import{o as Q,c as ee,a as _,_ as Re,n as xe,d as Se,w as ne,v as ui,F as ae,f as dn,t as wt,k as Te,g as rl,r as he,e as r,C as zn,m as Sa,D as je,I as co,j as Ze,l as el,J as vo,K as Y,L as Ll,M as Pr,i as Ar,N as Br,O as Er,P as ht,Q as g,R as tt,q as ka,S as Hn,p as Rr,U as ci,V as Jt,W as Lr,s as W,X as _e,Y as K,Z as Oe,z as ot,y as Z,$ as Xe,a0 as xa,a1 as $t,x as nt,a2 as Ca,a3 as $r,a4 as Or,u as Je,A as Ve,a5 as Mr,T as Et,a6 as Va,a7 as jn,a8 as F,a9 as Fr,aa as Nr,ab as Dr,ac as zr,b as yl,ad as Hr,E as jr,G as Ur,H as Gr}from"./mitt-5a091891.js";const Wr={mounted(){mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.$root.selectedLayout=null,this.$root.selectedElement=null,this.$root.selectedElement=e}),mw.top().app.on("mw.elementStyleEditor.refreshNode",e=>{this.$root.selectedElement=null,this.$root.selectedLayout=null,this.$root.selectedElement=e}),mw.top().app.on("mw.elementStyleEditor.selectLayout",e=>{this.$root.selectedLayout=null,this.$root.selectedLayout=e})}},Yr=["innerHTML"],Kr={class:"form-control-live-edit-label-wrapper"},qr=["value"],Xr=_("span",{class:"form-control-live-edit-bottom-effect"},null,-1),_a={__name:"Input",props:{modelValue:String,label:String},emits:["update:modelValue"],setup(e){return(t,n)=>(Q(),ee("div",null,[_("label",{class:"live-edit-label",innerHTML:e.label},null,8,Yr),_("div",null,[_("label",Kr,[_("input",{value:e.modelValue,onInput:n[0]||(n[0]=l=>t.$emit("update:modelValue",l.target.value)),class:"form-control-live-edit-input"},null,40,qr),Xr])])]))}},Zr={props:{textAlign:String},methods:{setTextAlignment(e){this.$emit("update:textAlign",e)}}},Jr={class:"form-control-live-edit-label-wrapper d-flex align-items-center"},Qr=_("label",{class:"live-edit-label px-0 col-4"},"Align",-1),eu={class:"s-field-content ms-3"},tu={class:"text-align"},nu=_("span",{class:"mdi mdi-format-align-left"},null,-1),lu=[nu],au=_("span",{class:"mdi mdi-format-align-center"},null,-1),ou=[au],iu=_("span",{class:"mdi mdi-format-align-right"},null,-1),su=[iu],ru=_("span",{class:"mdi mdi-format-align-justify"},null,-1),uu=[ru];function cu(e,t,n,l,a,o){return Q(),ee("div",Jr,[Qr,_("div",eu,[_("div",tu,[_("span",{class:xe(["ta-left",{active:n.textAlign==="left"}]),onClick:t[0]||(t[0]=i=>o.setTextAlignment("left")),"data-value":"left"},lu,2),_("span",{class:xe(["ta-center",{active:n.textAlign==="center"}]),onClick:t[1]||(t[1]=i=>o.setTextAlignment("center")),"data-value":"center"},ou,2),_("span",{class:xe(["ta-right",{active:n.textAlign==="right"}]),onClick:t[2]||(t[2]=i=>o.setTextAlignment("right")),"data-value":"right"},su,2),_("span",{class:xe(["ta-justify",{active:n.textAlign==="justify"}]),onClick:t[3]||(t[3]=i=>o.setTextAlignment("justify")),"data-value":"justify"},uu,2)])])])}const du=Re(Zr,[["render",cu]]),vu={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center flex-wrap gap-2"},fu=["innerHTML"],mu=["selected","value"],hu={props:{modelValue:String,label:String,options:Array},data(){return{selectedOption:this.modelValue}},watch:{modelValue(e){this.selectedOption!==e&&(this.selectedOption=e)}},methods:{handleInput(){this.selectedOption!==this.modelValue&&this.$emit("update:modelValue",this.selectedOption)}}},gn=Object.assign(hu,{__name:"DropdownSmall",emits:["update:modelValue"],setup(e){return(t,n)=>(Q(),ee("div",vu,[e.label?(Q(),ee("label",{key:0,class:"live-edit-label px-0 col-4",innerHTML:e.label},null,8,fu)):Se("",!0),ne(_("select",{"onUpdate:modelValue":n[0]||(n[0]=l=>t.selectedOption=l),class:"form-control-live-edit-input form-select",onInput:n[1]||(n[1]=l=>t.$emit("update:modelValue",l.target.value))},[(Q(!0),ee(ae,null,dn(e.options,l=>(Q(),ee("option",{selected:t.selectedOption===l.key,value:l.key},wt(l.value),9,mu))),256))],544),[[ui,t.selectedOption]])]))}}),gu=["innerHTML"],yu={class:"form-control-live-edit-label-wrapper"},bu=["value"],Ia={__name:"Dropdown",props:{modelValue:String,label:String,options:Array},emits:["update:modelValue"],setup(e){return(t,n)=>(Q(),ee("div",null,[_("label",{class:"live-edit-label",innerHTML:e.label},null,8,gu),_("div",null,[_("label",yu,[_("select",{class:"form-select form-control-live-edit-input",onInput:n[0]||(n[0]=l=>t.$emit("update:modelValue",l.target.value))},[(Q(!0),ee(ae,null,dn(e.options,l=>(Q(),ee("option",{value:l.key},wt(l.value),9,bu))),256))],32)])])]))}},pu={props:{value:String},watch:{value(e){this.fontFamily=e}},methods:{loadMoreFonts(){mw.top().app.fontManager.manageFonts()},selectFont(e){this.fontFamily=e,this.$emit("change",e)}},mounted(){setTimeout(()=>{this.supportedFonts=mw.top().app.fontManager.getFonts(),this.$forceUpdate(),mw.top().app.fontManager.subscribe(e=>{e&&(this.supportedFonts=e),this.$forceUpdate()})},1e3)},data(){return{supportedFonts:[],fontFamily:this.value}}},wu={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center flex-wrap gap-2"},Su=_("label",{class:"live-edit-label px-0 col-4"},"Font",-1),ku={class:"form-control-live-edit-input form-select",type:"button",ref:"dropdownButton",id:"fontDropdown","data-bs-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},xu=_("span",{class:"font-picker-selected-font"}," Select ",-1),Cu=[xu],Vu={class:"dropdown-menu","aria-labelledby":"fontDropdown"},_u=["onClick"];function Iu(e,t,n,l,a,o){return Q(),ee("div",wu,[Su,_("button",ku,[ne(_("div",null,[_("span",{class:"font-picker-selected-font",style:rl({fontFamily:a.fontFamily})},wt(a.fontFamily),5)],512),[[Te,a.fontFamily]]),ne(_("div",null,Cu,512),[[Te,!a.fontFamily]])],512),_("ul",Vu,[_("li",null,[_("a",{class:"dropdown-item",onClick:t[0]||(t[0]=i=>o.selectFont(""))}," Default ")]),(Q(!0),ee(ae,null,dn(a.supportedFonts,(i,s)=>(Q(),ee("li",{key:s,class:xe({active:i===a.fontFamily})},[_("a",{class:"dropdown-item",href:"#",onClick:u=>o.selectFont(i),style:rl({fontFamily:i})},wt(i),13,_u)],2))),128))]),_("small",{class:"cursor-pointer ms-auto",onClick:t[1]||(t[1]=i=>o.loadMoreFonts())},"Load more fonts ")])}const Ta=Re(pu,[["render",Iu]]),Tu={props:{label:String,modelValue:Number,min:Number,max:Number,step:Number,unit:String},data(){return{selectedValue:this.modelValue}},methods:{resetValue(){this.selectedValue=null}},watch:{selectedValue(e){e!==this.modelValue&&this.$emit("update:modelValue",e)},modelValue(e){this.selectedValue=e}}},Pu={class:"form-control-live-edit-label-wrapper d-flex align-items-center"},Au={class:"live-edit-label px-0 col-4"},Bu={class:"col-6 ms-4","data-size":"medium"},Eu=_("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",height:"16",viewBox:"0 -960 960 960",width:"16"},[_("path",{d:"M440-122q-121-15-200.5-105.5T160-440q0-66 26-126.5T260-672l57 57q-38 34-57.5 79T240-440q0 88 56 155.5T440-202v80Zm80 0v-80q87-16 143.5-83T720-440q0-100-70-170t-170-70h-3l44 44-56 56-140-140 140-140 56 56-44 44h3q134 0 227 93t93 227q0 121-79.5 211.5T520-122Z"})],-1),Ru=[Eu];function Lu(e,t,n,l,a,o){const i=he("v-slider");return Q(),ee("div",Pu,[_("label",Au,wt(n.label)+" "+wt(a.selectedValue)+wt(n.unit),1),_("div",Bu,[r(i,{min:n.min,max:n.max,step:n.step,modelValue:a.selectedValue,"onUpdate:modelValue":t[0]||(t[0]=s=>a.selectedValue=s)},null,8,["min","max","step","modelValue"]),_("span",{onClick:t[1]||(t[1]=(...s)=>o.resetValue&&o.resetValue(...s)),class:"reset-field tip mw-action-buttons-background-circle-on-hover","data-tipposition":"top-right","data-tip":"Restore default value"},Ru)])])}const Un=Re(Tu,[["render",Lu]]),$u={components:{ColorPicker:zn,FontPicker:Ta,Dropdown:Ia,Input:_a,Slider:Sa,Align:du,DropdownSmall:gn,SliderSmall:Un},data(){return{showTypography:!1,activeNode:null,isReady:!1,textTransformOptions:[{key:"none",value:"None"},{key:"capitalize",value:"Capitalize"},{key:"uppercase",value:"Uppercase"},{key:"lowercase",value:"Lowercase"}],fontWeightOptions:[{key:"normal",value:"Normal"},{key:"bold",value:"Bold"},{key:"bolder",value:"Bolder"},{key:"lighter",value:"Lighter"},{key:"100",value:"100"},{key:"200",value:"200"},{key:"300",value:"300"},{key:"400",value:"400"},{key:"500",value:"500"},{key:"600",value:"600"},{key:"700",value:"700"},{key:"800",value:"800"},{key:"900",value:"900"}],fontStylesOptions:[{key:"normal",value:"Normal"},{key:"italic",value:"Italic"},{key:"oblique",value:"Oblique"}],textAlign:null,fontSize:null,fontWeight:"normal",fontStyle:"normal",lineHeight:null,fontFamily:null,letterSpacing:null,wordSpacing:null,color:null,textTransform:"none",textDecorationIsBold:null,textDecorationIsItalic:null,textDecorationIsUnderline:null,textDecorationIsStrikethrough:null}},methods:{toggleTypography(){this.showTypography=!this.showTypography,this.emitter.emit("element-style-editor-show","typography")},resetAllProperties:function(){this.fontSize=null,this.fontWeight="normal",this.fontStyle="normal",this.lineHeight=null,this.fontFamily=null,this.color=null,this.textTransform="none",this.textDecorationIsBold=null,this.textDecorationIsItalic=null,this.textDecorationIsUnderline=null,this.textDecorationIsStrikethrough=null,this.letterSpacing=null,this.wordSpacing=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){mw.top().app.dispatch("mw.elementStyleEditor.closeAllOpenedMenus");var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssTextAlign(t),this.populateCssTextDecoration(t),this.populateCssFont(t),this.populateCssTextTransform(t),this.populateLetterSpacing(t),this.populateWordSpacing(t),setTimeout(()=>{this.isReady=!0},100)}},populateLetterSpacing:function(e){if(!(!e||!e.get)){var t=e.get.letterSpacing();this.letterSpacing=t}},populateWordSpacing:function(e){if(!(!e||!e.get)){var t=e.get.wordSpacing();this.wordSpacing=t}},populateCssTextAlign:function(e){if(!(!e||!e.get)){var t=e.get.alignNormalize();this.textAlign=t}},populateCssTextDecoration:function(e){if(!(!e||!e.get)){var t=e.get.is();this.textDecorationIsBold=t.bold,this.textDecorationIsItalic=t.italic,this.textDecorationIsUnderline=t.underlined,this.textDecorationIsStrikethrough=t.striked}},setTextAlignment:function(e){this.textAlign=e},handleFontChange:function(e){this.fontFamily=e},handleFontColorChange:function(e){typeof e=="string"&&(this.color=e)},populateCssFont:function(e){if(!(!e||!e.get)){var t=e.get.font();t.size&&(t.size=t.size.replace("px","")),t.lineHeight&&(t.lineHeight=t.lineHeight.replace("px","")),this.fontSize=t.size,this.fontWeight=t.weight,this.fontStyle=t.style,this.lineHeight=t.lineHeight,this.fontFamily=t.family,this.color=t.color}},populateCssTextTransform:function(e){if(!(!e||!e.get)){var t=e.get.textTransform();this.textTransform=t}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{this.$root.selectedElement&&this.populateStyleEditor(this.$root.selectedElement)}),this.emitter.on("element-style-editor-show",e=>{e!=="typography"&&(this.showTypography=!1)})},watch:{"$root.selectedElement":{handler:function(e){e&&this.populateStyleEditor(e)},deep:!0},fontFamily:function(e,t){this.applyPropertyToActiveNode("fontFamily",e)},fontSize:function(e,t){this.applyPropertyToActiveNode("fontSize",e+"px")},fontWeight:function(e,t){this.applyPropertyToActiveNode("fontWeight",e)},fontStyle:function(e,t){this.applyPropertyToActiveNode("fontStyle",e)},textAlign:function(e,t){this.applyPropertyToActiveNode("textAlign",e)},lineHeight:function(e,t){var n=!1;if(typeof e>"u"&&(n=!0),e==null&&(n=!0),n){this.applyPropertyToActiveNode("lineHeight","auto");return}this.applyPropertyToActiveNode("lineHeight",e+"px")},color:function(e,t){this.applyPropertyToActiveNode("color",e)},textTransform:function(e,t){this.applyPropertyToActiveNode("textTransform",e)},letterSpacing:function(e,t){this.applyPropertyToActiveNode("letterSpacing",e+"px")},wordSpacing:function(e,t){this.applyPropertyToActiveNode("wordSpacing",e+"px")}}},Ou={class:"d-flex"},Mu={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Fu=_("path",{d:"M21,7V3h-4v1H7V3H3v4h1v10H3v4h4v-1h10v1h4v-4h-1V7H21 M18,4h2v2h-2V4 M4,4h2v2H4V4 M6,20H4v-2h2V20 M20,20h-2v-2h2V20   M18,17h-1v1H7v-1H6V7h1V6h10v1h1V17 M16,8v2h-3v6h-2v-6H8V8H16z"},null,-1),Nu=[Fu],Du={key:0},zu={class:"my-4 pt-2"};function Hu(e,t,n,l,a,o){const i=he("FontPicker"),s=he("Align"),u=he("ColorPicker"),c=he("SliderSmall"),d=he("DropdownSmall");return Q(),ee(ae,null,[_("div",Ou,[(Q(),ee("svg",Mu,Nu)),_("b",{class:xe(["mw-admin-action-links ms-3",{active:a.showTypography}]),onClick:t[0]||(t[0]=(...f)=>o.toggleTypography&&o.toggleTypography(...f))}," Typography ",2)]),a.showTypography?(Q(),ee("div",Du,[_("div",null,[_("div",zu,[r(i,{modelValue:a.fontFamily,"onUpdate:modelValue":t[1]||(t[1]=f=>a.fontFamily=f),value:a.fontFamily,onChange:o.handleFontChange,label:"Family"},null,8,["modelValue","value","onChange"])]),r(s,{textAlign:a.textAlign,"onUpdate:textAlign":o.setTextAlignment},null,8,["textAlign","onUpdate:textAlign"]),r(u,{modelValue:a.color,"onUpdate:modelValue":t[2]||(t[2]=f=>a.color=f),color:a.color,label:"Color",onChange:o.handleFontColorChange},null,8,["modelValue","color","onChange"]),r(c,{label:"Font Size",modelValue:a.fontSize,"onUpdate:modelValue":t[3]||(t[3]=f=>a.fontSize=f),min:0,max:100,step:5},null,8,["modelValue"]),r(d,{modelValue:a.fontWeight,"onUpdate:modelValue":t[4]||(t[4]=f=>a.fontWeight=f),options:a.fontWeightOptions,label:"Weight"},null,8,["modelValue","options"]),r(d,{modelValue:a.textTransform,"onUpdate:modelValue":t[5]||(t[5]=f=>a.textTransform=f),options:a.textTransformOptions,label:"Transform"},null,8,["modelValue","options"]),r(d,{modelValue:a.fontStyle,"onUpdate:modelValue":t[6]||(t[6]=f=>a.fontStyle=f),options:a.fontStylesOptions,label:"Style"},null,8,["modelValue","options"]),r(c,{label:"Line Height",modelValue:a.lineHeight,"onUpdate:modelValue":t[7]||(t[7]=f=>a.lineHeight=f),min:0,max:100,step:5},null,8,["modelValue"]),r(c,{label:"Letter Spacing",modelValue:a.letterSpacing,"onUpdate:modelValue":t[8]||(t[8]=f=>a.letterSpacing=f),min:1,max:100,step:1},null,8,["modelValue"]),r(c,{label:"Word Spacing",modelValue:a.wordSpacing,"onUpdate:modelValue":t[9]||(t[9]=f=>a.wordSpacing=f),min:1,max:100,step:1},null,8,["modelValue"])])])):Se("",!0)],64)}const ju=Re($u,[["render",Hu]]);const Uu={data(){return{showSpacing:!1,activeNode:null,isReady:!1,marginTop:null,marginRight:null,marginBottom:null,marginLeft:null,paddingTop:null,paddingRight:null,paddingBottom:null,paddingLeft:null}},methods:{toggleSpacing:function(){this.showSpacing=!this.showSpacing,this.emitter.emit("element-style-editor-show","spacing")},resetAllProperties:function(){this.marginTop=null,this.marginRight=null,this.marginBottom=null,this.marginLeft=null,this.paddingTop=null,this.paddingRight=null,this.paddingBottom=null,this.paddingLeft=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssPadding(t),this.populateCssMargin(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssPadding:function(e){var t=e.get.padding(void 0,!0);this.paddingTop=parseFloat(t.top),this.paddingRight=parseFloat(t.right),this.paddingBottom=parseFloat(t.bottom),this.paddingLeft=parseFloat(t.left)},populateCssMargin:function(e){if(!(!e||!e.get)){var t=e.get.margin(void 0,!0);this.marginTop=parseFloat(t.top),this.marginRight=parseFloat(t.right),this.marginBottom=parseFloat(t.bottom),this.marginLeft=parseFloat(t.left)}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{this.$root.selectedElement&&this.populateStyleEditor(this.$root.selectedElement)}),this.emitter.on("element-style-editor-show",e=>{e!=="spacing"&&(this.showSpacing=!1)})},watch:{"$root.selectedElement":{handler:function(e){e&&this.populateStyleEditor(e)},deep:!0},marginTop:function(e,t){this.applyPropertyToActiveNode("marginTop",e+"px")},marginRight:function(e,t){this.applyPropertyToActiveNode("marginRight",e+"px")},marginBottom:function(e,t){this.applyPropertyToActiveNode("marginBottom",e+"px")},marginLeft:function(e,t){this.applyPropertyToActiveNode("marginLeft",e+"px")},paddingTop:function(e,t){this.applyPropertyToActiveNode("paddingTop",e+"px")},paddingRight:function(e,t){this.applyPropertyToActiveNode("paddingRight",e+"px")},paddingBottom:function(e,t){this.applyPropertyToActiveNode("paddingBottom",e+"px")},paddingLeft:function(e,t){this.applyPropertyToActiveNode("paddingLeft",e+"px")}}},Gu={class:"d-flex"},Wu={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Yu=_("path",{d:"M10.6,12l4-4H11V6h7v7h-2V9.4l-4,4V16h8V4H8v8H10.6 M22,2v16H12v4H2V12h4V2H22 M10,14H4v6h6V14z"},null,-1),Ku=[Yu],qu={key:0},Xu={class:"mw-element-spacing-editor mt-4"},Zu=_("span",{class:"mw-ese-label"},"Margin",-1),Ju={class:"mw-ese-holder mw-ese-margin"},Qu={class:"input mw-ese-top"},ec={class:"input mw-ese-right"},tc={class:"input mw-ese-bottom"},nc={class:"input mw-ese-left"},lc={class:"mw-ese-holder mw-ese-padding"},ac={class:"input mw-ese-top"},oc={class:"input mw-ese-right"},ic={class:"input mw-ese-bottom"},sc={class:"input mw-ese-left"},rc=_("span",{class:"mw-ese-label"},"Padding",-1);function uc(e,t,n,l,a,o){return Q(),ee(ae,null,[_("div",Gu,[(Q(),ee("svg",Wu,Ku)),_("b",{class:xe(["mw-admin-action-links ms-3",{active:a.showSpacing}]),onClick:t[0]||(t[0]=(...i)=>o.toggleSpacing&&o.toggleSpacing(...i))}," Spacing ",2)]),a.showSpacing?(Q(),ee("div",qu,[_("div",Xu,[Zu,_("div",Ju,[_("span",Qu,[ne(_("input",{type:"number","onUpdate:modelValue":t[1]||(t[1]=i=>a.marginTop=i)},null,512),[[je,a.marginTop]])]),_("span",ec,[ne(_("input",{type:"number","onUpdate:modelValue":t[2]||(t[2]=i=>a.marginRight=i)},null,512),[[je,a.marginRight]])]),_("span",tc,[ne(_("input",{type:"number","onUpdate:modelValue":t[3]||(t[3]=i=>a.marginBottom=i)},null,512),[[je,a.marginBottom]])]),_("span",nc,[ne(_("input",{type:"number","onUpdate:modelValue":t[4]||(t[4]=i=>a.marginLeft=i)},null,512),[[je,a.marginLeft]])]),_("div",lc,[_("span",ac,[ne(_("input",{type:"number",min:"0","onUpdate:modelValue":t[5]||(t[5]=i=>a.paddingTop=i)},null,512),[[je,a.paddingTop]])]),_("span",oc,[ne(_("input",{type:"number",min:"0","onUpdate:modelValue":t[6]||(t[6]=i=>a.paddingRight=i)},null,512),[[je,a.paddingRight]])]),_("span",ic,[ne(_("input",{type:"number",min:"0","onUpdate:modelValue":t[7]||(t[7]=i=>a.paddingBottom=i)},null,512),[[je,a.paddingBottom]])]),_("span",sc,[ne(_("input",{type:"number",min:"0","onUpdate:modelValue":t[8]||(t[8]=i=>a.paddingLeft=i)},null,512),[[je,a.paddingLeft]])]),rc])])])])):Se("",!0)],64)}const cc=Re(Uu,[["render",uc]]);const dc={props:{label:{type:String,default:"Image"},file:{type:String,default:""}},data(){return{selectedFile:this.file}},watch:{file(e){this.selectedFile=e}},methods:{selectBackgroundImage(){mw.filePickerDialog(e=>{this.selectedFile=e,this.$emit("change",this.selectedFile)})},removeBackgroundImage(){this.selectedFile="",this.$emit("change",this.selectedFile)},resetBackgroundImage(){this.$emit("change",this.selectedFile)}}},vc={class:"form-control-live-edit-label-wrapper my-4 background-image-nav d-flex align-items-center gap-2"},fc={class:"live-edit-label px-0 text-start"},mc={class:"d-flex col"},hc=_("svg",{xmlns:"http://www.w3.org/2000/svg",height:"20",viewBox:"0 -960 960 960",width:"20"},[_("path",{d:"M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h560q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H200Zm0-80h560v-560H200v560Zm40-80h480L570-480 450-320l-90-120-120 160Zm-40 80v-560 560Z"})],-1),gc={key:0,class:"background-preview",style:{"background-image":"none"}},yc={class:"d-flex ms-auto justify-content-end pe-4"},bc=_("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",height:"16",viewBox:"0 -960 960 960",width:"16"},[_("path",{d:"M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z"})],-1),pc=[bc];function wc(e,t,n,l,a,o){return Q(),ee("div",vc,[_("label",fc,wt(n.label),1),_("div",mc,[_("div",null,[_("span",{class:"mw-ui-btn mw-ui-btn-outline tip background-select-item",style:{border:"1px solid #000"},onClick:t[0]||(t[0]=(...i)=>o.selectBackgroundImage&&o.selectBackgroundImage(...i)),"data-tip":"Select background image"},[hc,a.selectedFile?Se("",!0):(Q(),ee("span",gc)),a.selectedFile?(Q(),ee("span",{key:1,class:"background-preview",style:rl({backgroundImage:`url(${a.selectedFile})`})},null,4)):Se("",!0)])]),_("div",yc,[a.selectedFile?(Q(),ee("span",{key:0,class:"mw-action-buttons-background-circle-on-hover",onClick:t[1]||(t[1]=(...i)=>o.removeBackgroundImage&&o.removeBackgroundImage(...i)),"data-tip":"Remove background","data-tipposition":"top-right"},pc)):Se("",!0)])])])}const Sc=Re(dc,[["render",wc]]);const kc={props:{file:{type:String,default:""},name:{type:String,default:"file"}},data(){return{showPicker:!1,iconDelete:!1,selectedFile:this.$props.file}},mounted(){mw.top().app.on("mw.elementStyleEditor.closeAllOpenedMenus",()=>{this.closePicker()})},watch:{file(e){this.selectedFile=e}},methods:{changefile(e){this.selectedFile=e.hex,this.$props.file=e.hex},triggerChangeSelectedFile(){this.$props.file=this.selectedFile,this.$emit("change",this.$props.file)},triggerChange(){this.$emit("change",this.$props.file)},removeBackgroundImage(){this.selectedFile="",this.$props.file="",this.$emit("change",this.$props.file)},closePicker(){this.showPicker=!1},togglePicker(){mw.filePickerDialog(e=>{this.selectedFile=e,this.$props.file=e,this.$emit("change",this.$props.file)}),this.showPicker=!this.showPicker}}},xc={class:"d-inline-flex"},Cc=_("i",{class:"mdi mdi-delete"},null,-1),Vc=[Cc];function _c(e,t,n,l,a,o){return Q(),ee("div",xc,[ne(_("input",{type:"hidden",ref:"filepickerinput","onUpdate:modelValue":t[0]||(t[0]=i=>a.selectedFile=i),onInput:t[1]||(t[1]=(...i)=>o.triggerChangeSelectedFile&&o.triggerChangeSelectedFile(...i))},null,544),[[je,a.selectedFile]]),a.selectedFile?(Q(),ee("button",{key:0,type:"button",class:"btn btn-link btn-sm",onClick:t[2]||(t[2]=i=>o.removeBackgroundImage())},Vc)):Se("",!0),a.selectedFile?(Q(),ee("div",{key:1,class:"file-picker-badge",onClick:t[3]||(t[3]=(...i)=>o.togglePicker&&o.togglePicker(...i)),style:rl({backgroundImage:"url("+a.selectedFile+")"})},null,4)):Se("",!0),a.selectedFile?Se("",!0):(Q(),ee("div",{key:2,class:"file-picker-badge",onClick:t[4]||(t[4]=(...i)=>o.togglePicker&&o.togglePicker(...i))}))])}const Ic=Re(kc,[["render",_c]]),Tc={components:{ColorPicker:zn,FontPicker:Ta,Dropdown:Ia,Input:_a,Slider:Sa,FilePicker:Ic,ImagePicker:Sc,DropdownSmall:gn},data(){return{showBackground:!1,backgroundPositionOptions:[{key:null,value:"None"},{key:"0% 0%",value:"Left Top"},{key:"50% 0%",value:"Center Top"},{key:"100% 0%",value:"Right Top"},{key:"0% 50%",value:"Left Center"},{key:"50% 50%",value:"Center Center"},{key:"100% 50%",value:"Right Center"},{key:"0% 100%",value:"Left Bottom"},{key:"50% 100%",value:"Center Bottom"},{key:"100% 100%",value:"Right Bottom"}],backgroundRepeatOptions:[{key:null,value:"None"},{key:"repeat",value:"Repeat"},{key:"no-repeat",value:"No Repeat"},{key:"repeat-x",value:"Repeat Horizontally"},{key:"repeat-y",value:"Repeat Vertically"}],backgroundClipOptions:[{key:null,value:"None"},{key:"border-box",value:"Border Box"},{key:"content-box",value:"Content Box"},{key:"text",value:"Text"}],backgroundSizeOptions:[{key:"auto",value:"Auto"},{key:"contain",value:"Fit"},{key:"cover",value:"Cover"},{key:"100% 100%",value:"Scale"}],activeNode:null,isReady:!1,backgroundImage:null,backgroundColor:null,backgroundPosition:null,backgroundRepeat:null,backgroundSize:"auto",backgroundImageUrl:null,backgroundClip:null}},methods:{toggleBackground:function(){this.showBackground?this.emitter.emit("element-style-editor-show","none"):this.emitter.emit("element-style-editor-show","background")},resetAllProperties:function(){this.backgroundImage=null,this.backgroundImageUrl=null,this.backgroundColor=null,this.backgroundPosition=null,this.backgroundRepeat=null,this.backgroundSize="auto",this.backgroundClip=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBackground(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBackground:function(e){if(!(!e||!e.get)){var t=e.get.background();t.image&&t.image.indexOf("url(")!==-1&&(this.backgroundImageUrl=t.image.replace("url(","").replace(")",""),this.backgroundImageUrl=this.backgroundImageUrl.replace(/\"/g,"")),t.size?this.backgroundSize=t.size:this.backgroundSize="auto",this.backgroundImage=t.image,this.backgroundColor=t.color,this.backgroundPosition=t.position,this.backgroundRepeat=t.repeat,this.backgroundClip=t.clip}},handleBackgroundColorChange:function(e){typeof e=="string"&&(this.backgroundColor=e)},handleBackgroundImageChange:function(e){var t=e;e&&e!=""&&e!="none"&&e!="inherit"&&e!="initial"?(this.backgroundImageUrl=e,e.indexOf("url(")===-1&&(t="url("+e+")")):this.backgroundImageUrl="",t==null&&(t="none"),this.backgroundImage=t},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{this.$root.selectedElement&&this.populateStyleEditor(this.$root.selectedElement)}),this.emitter.on("element-style-editor-show",e=>{e!=="background"?this.showBackground=!1:this.showBackground=!0})},watch:{"$root.selectedElement":{handler:function(e){e&&this.populateStyleEditor(e)},deep:!0},backgroundImage:function(e,t){this.applyPropertyToActiveNode("backgroundImage",e)},backgroundClip:function(e,t){e=="text"?(this.applyPropertyToActiveNode("backgroundClip","text"),this.applyPropertyToActiveNode("-webkitBackgroundClip","text"),this.applyPropertyToActiveNode("color","rgba(0,0,0,0)")):(this.applyPropertyToActiveNode("backgroundClip",e),this.applyPropertyToActiveNode("-webkitBackgroundClip",e),this.applyPropertyToActiveNode("color",""))},backgroundColor:function(e,t){this.applyPropertyToActiveNode("backgroundColor",e)},backgroundPosition:function(e,t){this.applyPropertyToActiveNode("backgroundPosition",e)},backgroundRepeat:function(e,t){this.applyPropertyToActiveNode("backgroundRepeat",e)},backgroundSize:function(e,t){this.applyPropertyToActiveNode("backgroundSize",e)}}},Pc={class:"d-flex"},Ac={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Bc=_("path",{d:"M12.2,3.9c4.5,0,8.1,3.6,8.1,8.1s-3.6,8.1-8.1,8.1S4.1,16.5,4.1,12S7.7,3.9,12.2,3.9"},null,-1),Ec=[Bc],Rc={key:0};function Lc(e,t,n,l,a,o){const i=he("ColorPicker"),s=he("ImagePicker"),u=he("DropdownSmall");return Q(),ee(ae,null,[_("div",Pc,[(Q(),ee("svg",Ac,Ec)),_("b",{class:xe(["mw-admin-action-links ms-3",{active:a.showBackground}]),onClick:t[0]||(t[0]=(...c)=>o.toggleBackground&&o.toggleBackground(...c))}," Background ",2)]),a.showBackground?(Q(),ee("div",Rc,[r(i,{modelValue:a.backgroundColor,"onUpdate:modelValue":t[1]||(t[1]=c=>a.backgroundColor=c),color:a.backgroundColor,label:"Color",onChange:o.handleBackgroundColorChange},null,8,["modelValue","color","onChange"]),r(s,{label:"Image",modelValue:a.backgroundImage,"onUpdate:modelValue":t[2]||(t[2]=c=>a.backgroundImage=c),file:a.backgroundImageUrl,onChange:o.handleBackgroundImageChange},null,8,["modelValue","file","onChange"]),r(u,{modelValue:a.backgroundSize,"onUpdate:modelValue":t[3]||(t[3]=c=>a.backgroundSize=c),options:a.backgroundSizeOptions,label:"Size"},null,8,["modelValue","options"]),r(u,{modelValue:a.backgroundRepeat,"onUpdate:modelValue":t[4]||(t[4]=c=>a.backgroundRepeat=c),options:a.backgroundRepeatOptions,label:"Repeat"},null,8,["modelValue","options"]),r(u,{modelValue:a.backgroundPosition,"onUpdate:modelValue":t[5]||(t[5]=c=>a.backgroundPosition=c),options:a.backgroundPositionOptions,label:"Position"},null,8,["modelValue","options"]),r(u,{modelValue:a.backgroundClip,"onUpdate:modelValue":t[6]||(t[6]=c=>a.backgroundClip=c),options:a.backgroundClipOptions,label:"Clip"},null,8,["modelValue","options"])])):Se("",!0)],64)}const $c=Re(Tc,[["render",Lc]]);const Oc={components:{Dropdown:Ia,Input:_a,FontPicker:Ta,ColorPicker:zn,Slider:Sa,DropdownSmall:gn,SliderSmall:Un},data(){return{showBorder:!1,activeNode:null,isReady:!1,borderPositionOptions:[{key:"all",value:"All"},{key:"top",value:"Top"},{key:"right",value:"Right"},{key:"bottom",value:"Bottom"},{key:"left",value:"Left"}],borderStylesOptions:[{key:"none",value:"None"},{key:"solid",value:"Solid"},{key:"dotted",value:"Dotted"},{key:"dashed",value:"Dashed"},{key:"double",value:"Double"},{key:"groove",value:"Groove"},{key:"ridge",value:"Ridge"},{key:"inset",value:"Inset"},{key:"outset",value:"Outset"}],borderPosition:null,borderSize:null,borderColor:null,borderImage:null,borderImageUrl:null,borderStyle:null}},methods:{toggleBorder:function(){this.showBorder=!this.showBorder,this.emitter.emit("element-style-editor-show","border")},handleBorderColorChange(e){typeof e=="string"&&(this.borderColor=e)},resetAllProperties:function(){this.borderPosition=null,this.borderSize=null,this.borderColor=null,this.borderStyle=null,this.borderImageUrl=null,this.borderImage=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBorder(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBorder:function(e){if(!(!e||!e.get)){var t=e.get.border(!0),n={};for(var l in t)if(t[l].width!==0){n=t[l];break}var a=n.width||0,o=n.color||"rgba(0,0,0,1)",i=n.style||"none";this.borderSize=a,this.borderColor=o,this.borderStyle=i,this.borderPosition="all"}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{this.$root.selectedElement&&this.populateStyleEditor(this.$root.selectedElement)}),this.emitter.on("element-style-editor-show",e=>{e!=="border"&&(this.showBorder=!1)})},watch:{"$root.selectedElement":{handler:function(e){e&&this.populateStyleEditor(e)},deep:!0},borderImageUrl:function(e,t){var n="";n+="url("+e+") ",n+=this.borderSize+" ",n+=" space ",this.borderImage=n},borderImage:function(e,t){this.applyPropertyToActiveNode("border-image",e)},borderPosition:function(e,t){this.applyPropertyToActiveNode("borderPosition",e)},borderSize:function(e,t){this.applyPropertyToActiveNode("border-width",e+"px")},borderColor:function(e,t){this.applyPropertyToActiveNode("border-color",e)},borderStyle:function(e,t){this.applyPropertyToActiveNode("border-style",e)}}},Mc={class:"d-flex"},Fc={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Nc=_("path",{d:"M15,21h2v-2h-2 M19,21h2v-2h-2 M7,21h2v-2H7 M11,21h2v-2h-2 M19,17h2v-2h-2 M19,13h2v-2h-2 M3,3v18h2V5h16V3 M19,9h2V7h-2"},null,-1),Dc=[Nc],zc={key:0};function Hc(e,t,n,l,a,o){const i=he("DropdownSmall"),s=he("SliderSmall"),u=he("ColorPicker");return Q(),ee(ae,null,[_("div",Mc,[(Q(),ee("svg",Fc,Dc)),_("b",{class:xe(["mw-admin-action-links ms-3",{active:a.showBorder}]),onClick:t[0]||(t[0]=(...c)=>o.toggleBorder&&o.toggleBorder(...c))}," Border ",2)]),a.showBorder?(Q(),ee("div",zc,[r(i,{modelValue:a.borderStyle,"onUpdate:modelValue":t[1]||(t[1]=c=>a.borderStyle=c),options:a.borderStylesOptions,label:"Style"},null,8,["modelValue","options"]),r(i,{modelValue:a.borderPosition,"onUpdate:modelValue":t[2]||(t[2]=c=>a.borderPosition=c),options:a.borderPositionOptions,label:"Position"},null,8,["modelValue","options"]),r(s,{label:"Size",modelValue:a.borderSize,"onUpdate:modelValue":t[3]||(t[3]=c=>a.borderSize=c),min:0,max:30,step:1},null,8,["modelValue"]),r(u,{modelValue:a.borderColor,"onUpdate:modelValue":t[4]||(t[4]=c=>a.borderColor=c),color:a.borderColor,label:"Color",onChange:o.handleBorderColorChange},null,8,["modelValue","color","onChange"])])):Se("",!0)],64)}const jc=Re(Oc,[["render",Hc]]);const Uc={data(){return{nodeTagName:null,displayNodeInfo:null,displayDomTree:null,activeNode:null,domTree:null,isReady:!1,currentCanvasDocument:!1}},methods:{toggleDomTree:function(){this.displayDomTree=!this.displayDomTree,this.displayDomTree&&this.populateDomTree(this.activeNode)},populateStyleEditor:function(e){e&&e&&e.nodeType===1&&(this.isReady=!1,this.displayNodeInfo=!1,this.activeNode=e,this.populateSelectedNode(e),this.populateDomTree(e),setTimeout(()=>{this.isReady=!0},100))},populateSelectedNode:function(e){if(this.nodeTagName=e.tagName,this.domTree){const t=this.domTree.getNodeIconAndTitle(e);this.displayNodeInfo=t.icon+t.title}else e.id?this.displayNodeInfo=e.tagName:this.displayNodeInfo=e.tagName},populateDomTree:function(e){this.displayDomTree&&((!this.domTree||!this.currentCanvasDocument||this.currentCanvasDocument!==mw.top().app.canvas.getDocument())&&(this.currentCanvasDocument=mw.top().app.canvas.getDocument(),this.domTree=new mw.DomTree({element:"#domtree",resizable:!0,targetDocument:e.ownerDocument,canSelect:function(t,n){mw.top().app.liveEdit.canBeElement(t);var l=mw.top().app.liveEdit.liveEditHelpers.targetIsInacesibleModule(t);return!l},onHover:function(t,n,l,a){},onSelect:(t,n,l,a)=>{mw.top().app.dispatch("mw.elementStyleEditor.selectNode",l),l.ownerDocument.defaultView.mw&&l.ownerDocument.defaultView.mw.tools.scrollTo(l,!1,100)}})),this.domTree.select(e))}},mounted(){},watch:{"$root.selectedElement":{handler:function(e){e&&this.populateStyleEditor(e)},deep:!0}}},Gc={class:"well"},Wc=_("div",{id:"domtree",style:{"margin-block-end":"15px"}},null,-1),Yc=[Wc],Kc={class:"d-flex align-items-center justify-content-between gap-2"},qc=_("label",{class:"live-edit-label mb-0"},"Selected element:",-1),Xc=["innerHTML"];function Zc(e,t,n,l,a,o){return ne((Q(),ee("div",null,[_("div",Gc,[ne(_("div",null,Yc,512),[[Te,a.displayDomTree]]),_("div",Kc,[qc,_("button",{type:"button",class:xe([{"btn-dark":a.displayDomTree,"btn-outline-dark":!a.displayDomTree},"btn btn-sm"]),onClick:t[0]||(t[0]=(...i)=>o.toggleDomTree&&o.toggleDomTree(...i)),innerHTML:a.displayNodeInfo},null,10,Xc)])])],512)),[[Te,a.displayNodeInfo]])}const Jc=Re(Uc,[["render",Zc]]),Qc={components:{DropdownSmall:gn},data(){return{showContainer:!1,activeContainerNode:null,isReady:!1,hasContainer:!1,containerType:null}},methods:{toggleContainer:function(){this.showContainer=!this.showContainer,this.emitter.emit("element-style-editor-show","container")},resetAllProperties:function(){this.hasContainer=null,this.containerType=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){this.isReady=!1,this.resetAllProperties();var t=mw.tools.firstParentOrCurrentWithAnyOfClasses(e,["container","container-fluid"]);t&&mw.tools.isEditable(t)&&t&&(this.hasContainer=!0,this.activeContainerNode=t,this.populateCssContainerForNode(t)),setTimeout(()=>{this.isReady=!0},100)}},populateCssContainerForNode:function(e){e.classList&&e.classList.contains("container-fluid")?this.containerType="container-fluid":this.containerType="container"},applyClassToActiveContainerNode:function(e){this.isReady&&this.activeContainerNode&&(e==="container-fluid"?(mw.top().app.dispatch("mw.elementStyleEditor.removeClassFromNode",{node:this.activeContainerNode,class:"container"}),mw.top().app.dispatch("mw.elementStyleEditor.addClassToNode",{node:this.activeContainerNode,class:"container-fluid"})):(mw.top().app.dispatch("mw.elementStyleEditor.removeClassFromNode",{node:this.activeContainerNode,class:"container-fluid"}),mw.top().app.dispatch("mw.elementStyleEditor.addClassToNode",{node:this.activeContainerNode,class:"container"})))}},mounted(){this.emitter.on("element-style-editor-show",e=>{this.$root.selectedElement&&this.populateStyleEditor(this.$root.selectedElement)}),this.emitter.on("element-style-editor-show",e=>{e!=="container"&&(this.showContainer=!1)})},watch:{"$root.selectedElement":{handler:function(e){e&&this.populateStyleEditor(e)},deep:!0},containerType:function(e,t){this.applyClassToActiveContainerNode(e)}}},ed={key:0},td={class:"mb-4 d-flex"},nd=_("svg",{fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},[_("path",{fill:"currentColor",d:"M19,17H5V7H19M19,5H5A2,2 0 0,0 3,7V17A2,2 0 0,0 5,19H19A2,2 0 0,0 21,17V7C21,5.89 20.1,5 19,5Z"})],-1),ld={key:0},ad={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center flex-wrap gap-2",id:"field-conatiner-type"},od=_("label",{class:"live-edit-label px-0 col-4"},"Container",-1),id={class:"s-field-content"},sd={class:"form-check"},rd=_("span",{class:"form-check-label"},"Container",-1),ud={class:"form-check"},cd=_("span",{class:"form-check-label"},"Fluid",-1);function dd(e,t,n,l,a,o){return a.hasContainer?(Q(),ee("div",ed,[_("div",td,[nd,_("b",{class:xe(["mw-admin-action-links ms-3",{active:a.showContainer}]),onClick:t[0]||(t[0]=(...i)=>o.toggleContainer&&o.toggleContainer(...i))}," Container ",2)]),a.showContainer?(Q(),ee("div",ld,[_("div",ad,[od,_("div",id,[_("label",sd,[ne(_("input",{class:"form-check-input",type:"radio",name:"containerType",value:"container","onUpdate:modelValue":t[1]||(t[1]=i=>a.containerType=i)},null,512),[[co,a.containerType]]),rd]),_("label",ud,[ne(_("input",{class:"form-check-input",type:"radio",name:"containerType",value:"container-fluid","onUpdate:modelValue":t[2]||(t[2]=i=>a.containerType=i)},null,512),[[co,a.containerType]]),cd])])])])):Se("",!0)])):Se("",!0)}const vd=Re(Qc,[["render",dd]]);class $l{static previewAnimation(t,n){var l=t.ownerDocument.defaultView,a=l.mw.tools.generateSelectorForNode(t),o=l.mw.id("animation"),i=Object.assign({selector:a,id:o},n);l.mw.__animate(i)}static removeAnimations(t){var n=t.ownerDocument.defaultView,l=n.mw,a=n.mw.tools.generateSelectorForNode(t),o=n.mw.__pageAnimations.find(function(u){return u.selector===a});if(o){var i=o,s=Object.assign({},i);l.__pageAnimations.splice(l.__pageAnimations.indexOf(i),1),Array.from(l.doc.querySelectorAll(s.selector)).forEach(function(u){if(u.$$mwAnimations&&u.$$mwAnimations.length){var c=u.$$mwAnimations.findIndex(function(d){return d.id===i.id});c>-1&&u.$$mwAnimations.splice(c,1)}})}}static setAnimation(t,n){var l=t.ownerDocument.defaultView,a=l.mw.tools.generateSelectorForNode(t),o=l.mw.id("animation");t.$$mwAnimations||(t.$$mwAnimations=[]),this.removeAnimations(t),t.$$mwAnimations||(t.$$mwAnimations=[]);var i=Object.assign({selector:a,id:o},n);return t.$$mwAnimations.push(i),l.mw.__pageAnimations.push(i),l.mw.__animate(i),mw.top().app&&mw.top().app.registerChange(t),i}static supportsAnimations(t){return!!(t.ownerDocument&&t.ownerDocument.defaultView&&t.ownerDocument.defaultView.mw&&t.ownerDocument.defaultView.mw.__animate&&t.ownerDocument.defaultView.mw.tools.isEditable(t))}static getAnimation(t){var n=t.ownerDocument.defaultView;if(n.mw.__pageAnimations){var l=n.mw.tools.generateSelectorForNode(t),a=n.mw.__pageAnimations.find(function(o){return o.selector===l});if(a)return a}return!1}}const fd={components:{DropdownSmall:gn,SliderSmall:Un},data(){return{showAnimations:!1,activeNode:null,isReady:!1,selectedAnimation:!1,selectedAnimationSpeed:!1,selectedAnimationWhenAppear:!1,supportsAnimations:!1,animationsAppear:[{key:null,value:"None"},{key:"onAppear",value:"When element appears on screen"},{key:"onHover",value:"When mouse is over"},{key:"onClick",value:"When element is clicked"}],animations:[{key:null,value:"None"},{key:"bounce",value:"Bounce"},{key:"flash",value:"Flash"},{key:"pulse",value:"Pulse"},{key:"rubberBand",value:"Rubber Band"},{key:"shakeX",value:"Shake X"},{key:"shakeY",value:"Shake Y"},{key:"headShake",value:"Head Shake"},{key:"swing",value:"Swing"},{key:"tada",value:"Tada"},{key:"wobble",value:"Wobble"},{key:"jello",value:"Jello"},{key:"heartBeat",value:"Heart Beat"},{key:"flip",value:"Flip"},{key:"flipInX",value:"Flip In X"},{key:"flipInY",value:"Flip In Y"},{key:"hinge",value:"Hinge"},{key:"jackInTheBox",value:"Jack In The Box"},{key:"rollIn",value:"Roll In"},{key:"backInDown",value:"Back In Down"},{key:"backInLeft",value:"Back In Left"},{key:"backInRight",value:"Back In Right"},{key:"backInUp",value:"Back In Up"},{key:"bounceIn",value:"Bounce In"},{key:"bounceInDown",value:"Bounce In Down"},{key:"bounceInLeft",value:"Bounce In Left"},{key:"bounceInRight",value:"Bounce In Right"},{key:"bounceInUp",value:"Bounce In Up"},{key:"fadeIn",value:"Fade In"},{key:"fadeInDown",value:"Fade In Down"},{key:"fadeInDownBig",value:"Fade In Down Big"},{key:"fadeInLeft",value:"Fade In Left"},{key:"fadeInLeftBig",value:"Fade In Left Big"},{key:"fadeInRight",value:"Fade In Right"},{key:"fadeInRightBig",value:"Fade In Right Big"},{key:"fadeInUp",value:"Fade In Up"},{key:"fadeInUpBig",value:"Fade In Up Big"},{key:"fadeInTopLeft",value:"Fade In Top Left"},{key:"fadeInTopRight",value:"Fade In Top Right"},{key:"fadeInBottomLeft",value:"Fade In Bottom Left"},{key:"fadeInBottomRight",value:"Fade In Bottom Right"},{key:"lightSpeedInRight",value:"LightSpeed In Right"},{key:"lightSpeedInLeft",value:"LightSpeed In Left"},{key:"rotateIn",value:"Rotate In"},{key:"rotateInDownLeft",value:"Rotate In Down Left"},{key:"rotateInDownRight",value:"Rotate In Down Right"},{key:"zoomIn",value:"Zoom In"},{key:"zoomInDown",value:"Zoom In Down"},{key:"zoomInLeft",value:"Zoom In Left"},{key:"zoomInRight",value:"Zoom In Right"},{key:"zoomInUp",value:"Zoom In Up"},{key:"slideInDown",value:"Slide In Down"},{key:"slideInLeft",value:"Slide In Left"},{key:"slideInRight",value:"Slide In Right"},{key:"slideInUp",value:"Slide In Up"}]}},methods:{toggleAnimations:function(){this.showAnimations=!this.showAnimations,this.emitter.emit("element-style-editor-show","animations")},resetAllProperties:function(){this.selectedAnimation=null,this.selectedAnimationSpeed=1,this.selectedAnimationWhenAppear=null},populateActiveAnimation:function(e){var t=$l.getAnimation(e);if(!t){this.resetAllProperties();return}t.animation?this.selectedAnimation=t.animation:this.selectedAnimation=null,t.speed?this.selectedAnimationSpeed=t.speed:this.selectedAnimationSpeed=null,t.when?this.selectedAnimationWhenAppear=t.when:this.selectedAnimationWhenAppear=null},setAnimation:function(){if(this.activeNode){var e=this.selectedAnimationSpeed?this.selectedAnimationSpeed:1,t=this.selectedAnimationWhenAppear?this.selectedAnimationWhenAppear:"onAppear",n={animation:this.selectedAnimation,speed:e,when:t};$l.setAnimation(this.activeNode,n)}},populateStyleEditor:function(e){e&&e&&e.nodeType===1&&(this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.supportsAnimations=$l.supportsAnimations(e),this.populateActiveAnimation(e),setTimeout(()=>{this.isReady=!0},100))}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="animations"?this.showAnimations=!1:(this.showBackground=!0,this.$root.selectedElement&&this.populateStyleEditor(this.$root.selectedElement))})},watch:{"$root.selectedElement":{handler:function(e){e&&this.populateStyleEditor(e)},deep:!0},selectedAnimation:function(e){this.isReady&&this.setAnimation()},selectedAnimationSpeed:function(e){this.isReady&&this.setAnimation()},selectedAnimationWhenAppear:function(e){this.isReady&&this.setAnimation()}}},md={key:0},hd={class:"mb-4 d-flex"},gd=_("svg",{fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg",version:"1.1",viewBox:"0 0 24 24"},[_("path",{fill:"currentColor",d:"M4,2A2,2 0 0,0 2,4V14H4V4H14V2H4M8,6A2,2 0 0,0 6,8V18H8V8H18V6H8M20,12V20H12V12H20M20,10H12A2,2 0 0,0 10,12V20A2,2 0 0,0 12,22H20A2,2 0 0,0 22,20V12A2,2 0 0,0 20,10M14,13V19L18,16L14,13Z"})],-1),yd={key:0},bd={key:0};function pd(e,t,n,l,a,o){const i=he("DropdownSmall"),s=he("SliderSmall");return a.supportsAnimations?(Q(),ee("div",md,[_("div",hd,[gd,_("b",{class:xe(["mw-admin-action-links ms-3",{active:a.showAnimations}]),onClick:t[0]||(t[0]=(...u)=>o.toggleAnimations&&o.toggleAnimations(...u))}," Animations ",2)]),a.showAnimations?(Q(),ee("div",yd,[r(i,{modelValue:a.selectedAnimation,"onUpdate:modelValue":t[1]||(t[1]=u=>a.selectedAnimation=u),options:a.animations,label:"Animation"},null,8,["modelValue","options"]),a.selectedAnimation?(Q(),ee("div",bd,[r(i,{modelValue:a.selectedAnimationWhenAppear,"onUpdate:modelValue":t[2]||(t[2]=u=>a.selectedAnimationWhenAppear=u),options:a.animationsAppear,label:"When"},null,8,["modelValue","options"]),r(s,{modelValue:a.selectedAnimationSpeed,"onUpdate:modelValue":t[3]||(t[3]=u=>a.selectedAnimationSpeed=u),label:"Speed",min:.1,max:5,step:.1,unit:"s"},null,8,["modelValue"])])):Se("",!0)])):Se("",!0)])):Se("",!0)}const wd=Re(fd,[["render",pd]]),Sd={components:{DropdownSmall:gn},data(){return{activeGridNode:null,showGridSettings:!1,isReady:!1,hasGrid:!1,colOptionsDesktop:[{key:"col-lg-1",value:"col-lg-1"},{key:"col-lg-2",value:"col-lg-2"},{key:"col-lg-3",value:"col-lg-3"},{key:"col-lg-4",value:"col-lg-4"},{key:"col-lg-5",value:"col-lg-5"},{key:"col-lg-6",value:"col-lg-6"},{key:"col-lg-7",value:"col-lg-7"},{key:"col-lg-8",value:"col-lg-8"},{key:"col-lg-9",value:"col-lg-9"},{key:"col-lg-10",value:"col-lg-10"},{key:"col-lg-11",value:"col-lg-11"},{key:"col-lg-12",value:"col-lg-12"}],colOptionsTablet:[{key:"col-md-1",value:"col-md-1"},{key:"col-md-2",value:"col-md-2"},{key:"col-md-3",value:"col-md-3"},{key:"col-md-4",value:"col-md-4"},{key:"col-md-5",value:"col-md-5"},{key:"col-md-6",value:"col-md-6"},{key:"col-md-7",value:"col-md-7"},{key:"col-md-8",value:"col-md-8"},{key:"col-md-9",value:"col-md-9"},{key:"col-md-10",value:"col-md-10"},{key:"col-md-11",value:"col-md-11"},{key:"col-md-12",value:"col-md-12"}],colOptionsMobile:[{key:"col-sm-1",value:"col-sm-1"},{key:"col-sm-2",value:"col-sm-2"},{key:"col-sm-3",value:"col-sm-3"},{key:"col-sm-4",value:"col-sm-4"},{key:"col-sm-5",value:"col-sm-5"},{key:"col-sm-6",value:"col-sm-6"},{key:"col-sm-7",value:"col-sm-7"},{key:"col-sm-8",value:"col-sm-8"},{key:"col-sm-9",value:"col-sm-9"},{key:"col-sm-10",value:"col-sm-10"},{key:"col-sm-11",value:"col-sm-11"},{key:"col-sm-12",value:"col-sm-12"}],selectedColDesktop:"",selectedColTablet:"",selectedColMobile:""}},methods:{toggleGridSettings:function(){this.showGridSettings=!this.showGridSettings,this.emitter.emit("element-style-editor-show","grid")},resetAllProperties:function(){this.hasGrid=null},populateStyleEditor:function(e){if(e&&e.nodeType===1){this.isReady=!1,this.resetAllProperties();var t=mw.top().app.liveEdit.liveEditHelpers.targetGetFirstColElement(e);t&&(e=t);for(const n of this.colOptionsDesktop)if(e.classList.contains(n.key)){this.hasGrid=!0,this.activeGridNode=e,this.selectedColDesktop=n.key;break}for(const n of this.colOptionsTablet)if(e.classList.contains(n.key)){this.hasGrid=!0,this.activeGridNode=e,this.selectedColTablet=n.key;break}for(const n of this.colOptionsMobile)if(e.classList.contains(n.key)){this.hasGrid=!0,this.activeGridNode=e,this.selectedColMobile=n.key;break}setTimeout(()=>{this.isReady=!0},100)}},applyClassToActiveGridNode:function(e){if(this.isReady&&this.activeGridNode){for(const n of this.colOptionsDesktop)this.activeGridNode.classList.remove(n.key);for(const n of this.colOptionsTablet)this.activeGridNode.classList.remove(n.key);for(const n of this.colOptionsMobile)this.activeGridNode.classList.remove(n.key);const t=[...this.colOptionsDesktop,...this.colOptionsTablet,...this.colOptionsMobile].find(n=>n.key===e);t&&this.activeGridNode.classList.add(t.key),mw.top().app&&mw.top().app.registerChangedState(this.activeGridNode)}}},mounted(){this.emitter.on("element-style-editor-show",e=>{this.$root.selectedElement&&this.populateStyleEditor(this.$root.selectedElement)}),this.emitter.on("element-style-editor-show",e=>{e!=="grid"&&(this.showGridSettings=!1)})},watch:{"$root.selectedElement":{handler:function(e){e&&this.populateStyleEditor(e)},deep:!0},selectedColDesktop:function(e,t){this.applyClassToActiveGridNode(e)},selectedColTablet:function(e,t){this.applyClassToActiveGridNode(e)},selectedColMobile:function(e,t){this.applyClassToActiveGridNode(e)}}},kd={key:0},xd={class:"mb-4 d-flex"},Cd=_("svg",{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",width:"24",height:"24",viewBox:"0 0 24 24"},[_("path",{d:"M4,2H20A2,2 0 0,1 22,4V20A2,2 0 0,1 20,22H4C2.92,22 2,21.1 2,20V4A2,2 0 0,1 4,2M4,4V11H11V4H4M4,20H11V13H4V20M20,20V13H13V20H20M20,4H13V11H20V4Z"})],-1),Vd={key:0},_d={class:"form-control-live-edit-label-wrapper d-flex align-items-center gap-2"},Id=_("label",{class:"live-edit-label px-0 col-4"},"Desktop",-1),Td=_("i",{class:"mdi mdi-monitor col-2",style:{"font-size":"24px"}},null,-1),Pd={class:"col-6"},Ad={class:"form-control-live-edit-label-wrapper d-flex align-items-center gap-2"},Bd=_("label",{class:"live-edit-label px-0 col-4"},"Tablet",-1),Ed=_("i",{class:"mdi mdi-tablet col-2",style:{"font-size":"24px"}},null,-1),Rd={class:"col-6"},Ld={class:"form-control-live-edit-label-wrapper d-flex align-items-center gap-2"},$d=_("label",{class:"live-edit-label px-0 col-4"},"Mobile",-1),Od=_("i",{class:"mdi mdi-cellphone col-2",style:{"font-size":"24px"}},null,-1),Md={class:"col-6"};function Fd(e,t,n,l,a,o){const i=he("DropdownSmall");return a.hasGrid?(Q(),ee("div",kd,[_("div",xd,[Cd,_("b",{class:xe(["mw-admin-action-links ms-3",{active:a.showGridSettings}]),onClick:t[0]||(t[0]=(...s)=>o.toggleGridSettings&&o.toggleGridSettings(...s))}," Grid ",2)]),a.showGridSettings?(Q(),ee("div",Vd,[_("div",_d,[Id,Td,_("div",Pd,[r(i,{options:a.colOptionsDesktop,modelValue:a.selectedColDesktop,"onUpdate:modelValue":t[1]||(t[1]=s=>a.selectedColDesktop=s)},null,8,["options","modelValue"])])]),_("div",Ad,[Bd,Ed,_("div",Rd,[r(i,{options:a.colOptionsTablet,modelValue:a.selectedColTablet,"onUpdate:modelValue":t[2]||(t[2]=s=>a.selectedColTablet=s)},null,8,["options","modelValue"])])]),_("div",Ld,[$d,Od,_("div",Md,[r(i,{options:a.colOptionsMobile,modelValue:a.selectedColMobile,"onUpdate:modelValue":t[3]||(t[3]=s=>a.selectedColMobile=s)},null,8,["options","modelValue"])])])])):Se("",!0)])):Se("",!0)}const Nd=Re(Sd,[["render",Fd]]);var Dd=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function zd(e,t,n){return n={path:t,exports:{},require:function(l,a){return Hd(l,a??n.path)}},e(n,n.exports),n.exports}function Hd(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}var jd=zd(function(e,t){(function(n,l){e.exports=l()})(Dd,function(){var n="__v-click-outside",l=typeof window<"u",a=typeof navigator<"u",o=l&&("ontouchstart"in window||a&&navigator.msMaxTouchPoints>0)?["touchstart"]:["click"],i=function(d){var f=d.event,v=d.handler;(0,d.middleware)(f)&&v(f)},s=function(d,f){var v=function(S){var x=typeof S=="function";if(!x&&typeof S!="object")throw new Error("v-click-outside: Binding value must be a function or an object");return{handler:x?S:S.handler,middleware:S.middleware||function(I){return I},events:S.events||o,isActive:S.isActive!==!1,detectIframe:S.detectIframe!==!1,capture:!!S.capture}}(f.value),m=v.handler,h=v.middleware,y=v.detectIframe,b=v.capture;if(v.isActive){if(d[n]=v.events.map(function(S){return{event:S,srcTarget:document.documentElement,handler:function(x){return function(I){var V=I.el,C=I.event,P=I.handler,k=I.middleware,w=C.path||C.composedPath&&C.composedPath();(w?w.indexOf(V)<0:!V.contains(C.target))&&i({event:C,handler:P,middleware:k})}({el:d,event:x,handler:m,middleware:h})},capture:b}}),y){var p={event:"blur",srcTarget:window,handler:function(S){return function(x){var I=x.el,V=x.event,C=x.handler,P=x.middleware;setTimeout(function(){var k=document.activeElement;k&&k.tagName==="IFRAME"&&!I.contains(k)&&i({event:V,handler:C,middleware:P})},0)}({el:d,event:S,handler:m,middleware:h})},capture:b};d[n]=[].concat(d[n],[p])}d[n].forEach(function(S){var x=S.event,I=S.srcTarget,V=S.handler;return setTimeout(function(){d[n]&&I.addEventListener(x,V,b)},0)})}},u=function(d){(d[n]||[]).forEach(function(f){return f.srcTarget.removeEventListener(f.event,f.handler,f.capture)}),delete d[n]},c=l?{beforeMount:s,updated:function(d,f){var v=f.value,m=f.oldValue;JSON.stringify(v)!==JSON.stringify(m)&&(u(d),s(d,{value:v}))},unmounted:u}:{};return{install:function(d){d.directive("click-outside",c)},directive:c}})}),Ud=jd;const Gd={class:"v3ti-loader-wrapper"},Wd=_("div",{class:"v3ti-loader"},null,-1),Yd=_("span",null,"Loading",-1),Kd=[Wd,Yd];function qd(e,t){return Q(),ee("div",Gd,Kd)}function di(e,t){t===void 0&&(t={});var n=t.insertAt;if(!(!e||typeof document>"u")){var l=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css",n==="top"&&l.firstChild?l.insertBefore(a,l.firstChild):l.appendChild(a),a.styleSheet?a.styleSheet.cssText=e:a.appendChild(document.createTextNode(e))}}var Xd=`.v3ti-loader-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  color: #112B3C;
}
.v3ti-loader-wrapper .v3ti-loader {
  width: 18px;
  height: 18px;
  border-radius: 50%;
  display: inline-block;
  border-top: 2px solid #112B3C;
  border-right: 2px solid transparent;
  box-sizing: border-box;
  animation: rotation 0.8s linear infinite;
  margin-right: 8px;
}
@keyframes rotation {
0% {
    transform: rotate(0deg);
}
100% {
    transform: rotate(360deg);
}
}`;di(Xd);const vi={};vi.render=qd;var Zd=vi,fi={name:"Vue3TagsInput",emits:["update:modelValue","update:tags","on-limit","on-tags-changed","on-remove","on-error","on-focus","on-blur","on-select","on-select-duplicate-tag","on-new-tag"],props:{readOnly:{type:Boolean,default:!1},modelValue:{type:String,default:""},validate:{type:[String,Function,Object],default:""},addTagOnKeys:{type:Array,default:function(){return[13,",",32]}},placeholder:{type:String,default:""},tags:{type:Array,default:()=>[]},loading:{type:Boolean,default:!1},limit:{type:Number,default:-1},allowDuplicates:{type:Boolean,default:!1},addTagOnBlur:{type:Boolean,default:!1},selectItems:{type:Array,default:()=>[]},select:{type:Boolean,default:!1},duplicateSelectItem:{type:Boolean,default:!0},uniqueSelectField:{type:String,default:"id"},addTagOnKeysWhenSelect:{type:Boolean,default:!1},isShowNoData:{type:Boolean,default:!0}},components:{Loading:Zd},directives:{clickOutside:Ud.directive},data(){return{isInputActive:!1,isError:!1,newTag:"",innerTags:[],multiple:!1}},computed:{isLimit(){const e=this.limit>0&&Number(this.limit)===this.innerTags.length;return e&&this.$emit("on-limit"),e},selectedItemsIds(){return this.duplicateSelectItem?[]:this.tags.map(e=>e[this.uniqueSelectField]||"")}},watch:{error(){this.isError=this.error},modelValue:{immediate:!0,handler(e){this.newTag=e}},tags:{deep:!0,immediate:!0,handler(e){this.innerTags=[...e]}}},methods:{isShot(e){return!!this.$slots[e]},makeItNormal(e){this.$emit("update:modelValue",e.target.value),this.$refs.inputTag.className="v3ti-new-tag",this.$refs.inputTag.style.textDecoration="none"},resetData(){this.innerTags=[]},resetInputValue(){this.newTag="",this.$emit("update:modelValue","")},setPosition(){const e=this.$refs.inputBox,t=this.$refs.contextMenu;if(e&&t){t.style.display="block";const n=e.clientHeight||32,l=3;t.style.top=n+l+"px"}},closeContextMenu(){this.$refs.contextMenu&&(this.$refs.contextMenu.style={display:"none"})},handleSelect(e){if(this.isShowCheckmark(e)){const t=this.tags.filter(n=>e.id!==n.id);this.$emit("update:tags",t),this.$emit("on-select-duplicate-tag",e),this.resetInputValue()}else this.$emit("on-select",e);this.$nextTick(()=>{this.closeContextMenu()})},isShowCheckmark(e){return this.duplicateSelectItem?!1:this.selectedItemsIds.includes(e[this.uniqueSelectField])},focusNewTag(){this.select&&!this.disabled&&this.setPosition(),!(this.readOnly||!this.$el.querySelector(".v3ti-new-tag"))&&this.$el.querySelector(".v3ti-new-tag").focus()},handleInputFocus(e){this.isInputActive=!0,this.$emit("on-focus",e)},handleInputBlur(e){this.isInputActive=!1,this.addNew(e),this.$emit("on-blur",e)},addNew(e){if(this.select&&!this.addTagOnKeysWhenSelect)return;const t=e?this.addTagOnKeys.indexOf(e.keyCode)!==-1||this.addTagOnKeys.indexOf(e.key)!==-1:!0,n=e&&e.type!=="blur";!t&&(n||!this.addTagOnBlur)||this.isLimit||(this.newTag&&(this.allowDuplicates||this.innerTags.indexOf(this.newTag)===-1)&&this.validateIfNeeded(this.newTag)?(this.innerTags.push(this.newTag),this.addTagOnKeysWhenSelect&&(this.$emit("on-new-tag",this.newTag),this.updatePositionContextMenu()),this.resetInputValue(),this.tagChange(),e&&e.preventDefault()):(this.validateIfNeeded(this.newTag)?this.makeItError(!0):this.makeItError(!1),e&&e.preventDefault()))},updatePositionContextMenu(){this.$nextTick(()=>{this.setPosition()})},makeItError(e){this.newTag!==""&&(this.$refs.inputTag.className="v3ti-new-tag v3ti-new-tag--error",this.$refs.inputTag.style.textDecoration="underline",this.$emit("on-error",e))},validateIfNeeded(e){return this.validate===""||this.validate===void 0?!0:typeof this.validate=="function"?this.validate(e):!0},removeLastTag(){this.newTag||(this.innerTags.pop(),this.tagChange(),this.updatePositionContextMenu())},remove(e){this.innerTags.splice(e,1),this.tagChange(),this.$emit("on-remove",e),this.updatePositionContextMenu()},tagChange(){this.$emit("on-tags-changed",this.innerTags)}}};const Jd={key:1,class:"v3ti-tag-content"},Qd=["onClick"],ev=["placeholder","disabled"],tv={key:0,class:"v3ti-loading"},nv={key:1,class:"v3ti-no-data"},lv={key:1},av={key:2},ov=["onClick"],iv={class:"v3ti-context-item--label"},sv={key:0,class:"v3ti-icon-selected-tag",width:"44",height:"44",viewBox:"0 0 24 24","stroke-width":"1.5",fill:"none","stroke-linecap":"round","stroke-linejoin":"round"},rv=_("path",{stroke:"none",d:"M0 0h24v24H0z"},null,-1),uv=_("path",{d:"M5 12l5 5l10 -10"},null,-1),cv=[rv,uv];function dv(e,t,n,l,a,o){const i=he("Loading"),s=Ze("click-outside");return ne((Q(),ee("div",{onClick:t[6]||(t[6]=u=>o.focusNewTag()),class:xe([{"v3ti--focus":a.isInputActive,"v3ti--error":a.isError},"v3ti"])},[_("div",{class:xe(["v3ti-content",{"v3ti-content--select":n.select}]),ref:"inputBox"},[(Q(!0),ee(ae,null,dn(a.innerTags,(u,c)=>(Q(),ee("span",{key:c,class:"v3ti-tag"},[o.isShot("item")?el(e.$slots,"item",vo(Y({key:0},{name:u,index:c,tag:u}))):(Q(),ee("span",Jd,wt(u),1)),n.readOnly?Se("",!0):(Q(),ee("a",{key:2,onClick:Ll(d=>o.remove(c),["prevent","stop"]),class:"v3ti-remove-tag"},null,8,Qd))]))),128)),ne(_("input",{ref:"inputTag",placeholder:n.placeholder,"onUpdate:modelValue":t[0]||(t[0]=u=>a.newTag=u),onKeydown:[t[1]||(t[1]=Pr(Ll(function(){return o.removeLastTag&&o.removeLastTag(...arguments)},["stop"]),["delete"])),t[2]||(t[2]=function(){return o.addNew&&o.addNew(...arguments)})],onBlur:t[3]||(t[3]=function(){return o.handleInputBlur&&o.handleInputBlur(...arguments)}),onFocus:t[4]||(t[4]=function(){return o.handleInputFocus&&o.handleInputFocus(...arguments)}),onInput:t[5]||(t[5]=function(){return o.makeItNormal&&o.makeItNormal(...arguments)}),class:"v3ti-new-tag",disabled:n.readOnly},null,40,ev),[[je,a.newTag]])],2),n.select?(Q(),ee("section",{key:0,class:xe(["v3ti-context-menu",{"v3ti-context-menu-no-data":!n.isShowNoData&&n.selectItems.length===0}]),ref:"contextMenu"},[n.loading?(Q(),ee("div",tv,[o.isShot("loading")?el(e.$slots,"default",{key:0}):(Q(),Ar(i,{key:1}))])):Se("",!0),!n.loading&&n.selectItems.length===0&&n.isShowNoData?(Q(),ee("div",nv,[o.isShot("no-data")?el(e.$slots,"no-data",{key:0}):(Q(),ee("span",lv," No data "))])):Se("",!0),!n.loading&&n.selectItems.length>0?(Q(),ee("div",av,[(Q(!0),ee(ae,null,dn(n.selectItems,(u,c)=>(Q(),ee("div",{key:c,class:xe(["v3ti-context-item",{"v3ti-context-item--active":o.isShowCheckmark(u)}]),onClick:Ll(d=>o.handleSelect(u,c),["stop"])},[_("div",iv,[el(e.$slots,"select-item",vo(Br(u)))]),o.isShowCheckmark(u)?(Q(),ee("svg",sv,cv)):Se("",!0)],10,ov))),128))])):Se("",!0)],2)):Se("",!0)],2)),[[s,o.closeContextMenu]])}var vv=`.v3ti {
  border-radius: 5px;
  min-height: 32px;
  line-height: 1.4;
  background-color: #fff;
  border: 1px solid #9ca3af;
  cursor: text;
  text-align: left;
  -webkit-appearance: textfield;
  display: flex;
  flex-wrap: wrap;
  position: relative;
}
.v3ti .v3ti-icon-selected-tag {
  stroke: #19be6b;
  width: 1rem;
  height: 1rem;
  margin-left: 4px;
}
.v3ti--focus {
  outline: 0;
  border-color: #000000;
  box-shadow: 0 0 0 1px #000000;
}
.v3ti--error {
  border-color: #F56C6C;
}
.v3ti .v3ti-no-data {
  color: #d8d8d8;
  text-align: center;
  padding: 4px 7px;
}
.v3ti .v3ti-loading {
  padding: 4px 7px;
  text-align: center;
}
.v3ti .v3ti-context-menu {
  max-height: 150px;
  min-width: 150px;
  overflow: auto;
  display: none;
  outline: none;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  margin: 0;
  padding: 5px 0;
  background: #ffffff;
  z-index: 1050;
  color: #475569;
  box-shadow: 0 3px 8px 2px rgba(0, 0, 0, 0.1);
  border-radius: 0 0 6px 6px;
}
.v3ti .v3ti-context-menu .v3ti-context-item {
  padding: 4px 7px;
  display: flex;
  align-items: center;
}
.v3ti .v3ti-context-menu .v3ti-context-item:hover {
  background: #e8e8e8;
  cursor: pointer;
}
.v3ti .v3ti-context-menu .v3ti-context-item--label {
  flex: 1;
  min-width: 1px;
}
.v3ti .v3ti-context-menu .v3ti-context-item--active {
  color: #317CAF;
}
.v3ti .v3ti-context-menu-no-data {
  padding: 0;
}
.v3ti .v3ti-content {
  width: 100%;
  display: flex;
  flex-wrap: wrap;
}
.v3ti .v3ti-content--select {
  padding-right: 30px;
}
.v3ti .v3ti-tag {
  display: flex;
  font-weight: 400;
  margin: 3px;
  padding: 0 5px;
  background: #317CAF;
  color: #ffffff;
  height: 27px;
  border-radius: 5px;
  align-items: center;
  max-width: calc(100% - 16px);
}
.v3ti .v3ti-tag .v3ti-tag-content {
  flex: 1;
  min-width: 1px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
.v3ti .v3ti-tag .v3ti-remove-tag {
  color: #ffffff;
  transition: opacity 0.3s ease;
  opacity: 0.5;
  cursor: pointer;
  padding: 0 5px 0 7px;
}
.v3ti .v3ti-tag .v3ti-remove-tag::before {
  content: "x";
}
.v3ti .v3ti-tag .v3ti-remove-tag:hover {
  opacity: 1;
}
.v3ti .v3ti-new-tag {
  background: transparent;
  border: 0;
  font-weight: 400;
  margin: 3px;
  outline: none;
  padding: 0 4px;
  flex: 1;
  min-width: 60px;
  height: 27px;
}
.v3ti .v3ti-new-tag--error {
  color: #F56C6C;
}`;di(vv);fi.render=dv;var fv=(()=>{const e=fi;return e.install=t=>{t.component("Vue3TagsInput",e)},e})();const mv={components:{Vue3TagsInput:fv},data(){return{canShowClassApplier:!1,showClasses:!1,activeNode:null,isReady:!1,classesToKeepInput:"",classesToKeep:["element","no-typing","safe-mode","edit","nodrop","allow-drop","module","module-overlap","module-overlap-on-hover","allow-typing","allow-edit","img-as-background","image-holder"],classes:[]}},methods:{toggleClasses:function(){this.showClasses=!this.showClasses,this.emitter.emit("element-style-editor-show","classes")},customValidateClasses(e){const t=/^[a-zA-Z\s,]*$/;return e.split(",").map(l=>l.trim()).filter(l=>t.test(l)&&this.classesToKeep.includes(l))},handleChangeClasses(e){this.classes=e},updateClassesToKeep(){this.classesToKeep=this.classesToKeepInput.split(",").map(e=>e.trim())},applyClasses(){this.isReady&&this.activeNode&&(this.activeNode.className="",this.classes.forEach(e=>{e&&this.activeNode.classList.add(e)}),this.classesToKeepInput&&this.classesToKeepInput.split(",").map(t=>t.trim()).filter(t=>!!t).forEach(t=>{this.activeNode.classList.contains(t)||this.activeNode.classList.add(t)}),mw.top().app&&mw.top().app.registerChangedState(this.activeNode))},populateStyleEditor(e){if(e&&e.nodeType===1){this.isReady=!1,this.activeNode=e,this.classes=this.activeNode.className.split(" ").filter(l=>!!l).filter(l=>l.startsWith("animate__")?!1:!this.classesToKeep.includes(l));const t=this.activeNode.className.split(" "),n=this.classesToKeep.filter(l=>t.includes(l));this.classesToKeepInput=n.join(", "),setTimeout(()=>{this.isReady=!0},100)}}},mounted(){this.emitter.on("element-style-editor-show",e=>{this.$root.selectedElement&&this.populateStyleEditor(this.$root.selectedElement)}),this.emitter.on("element-style-editor-show",e=>{e!=="classes"&&(this.showClasses=!1)})},watch:{"$root.selectedElement":{handler:function(e){if(e){var t=mw.top().app.liveEdit.liveEditHelpers.targetIsInEditField(e),n=mw.top().app.liveEdit.liveEditHelpers.targetIsInacesibleModule(e);t&&!n?(this.canShowClassApplier=!0,this.populateStyleEditor(e)):this.canShowClassApplier=!1}},deep:!0},classes(e,t){this.applyClasses()}}},hv={key:0},gv={class:"d-flex"},yv={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},bv=_("path",{d:"M12.9,3l2,0.4L11.1,21l-2-0.4L12.9,3 M19.6,12L16,8.4V5.6l6.4,6.4L16,18.4v-2.8L19.6,12 M1.6,12L8,5.6v2.8L4.4,12L8,15.6  v2.8L1.6,12z"},null,-1),pv=[bv],wv={key:0};function Sv(e,t,n,l,a,o){const i=he("vue3-tags-input");return a.canShowClassApplier?(Q(),ee("div",hv,[_("div",null,[_("div",gv,[(Q(),ee("svg",yv,pv)),_("b",{class:xe(["mw-admin-action-links ms-3",{active:a.showClasses}]),onClick:t[0]||(t[0]=(...s)=>o.toggleClasses&&o.toggleClasses(...s))}," Classes ",2)]),a.showClasses?(Q(),ee("div",wv,[_("div",null,[ne(_("input",{type:"hidden","onUpdate:modelValue":t[1]||(t[1]=s=>a.classesToKeepInput=s),onInput:t[2]||(t[2]=(...s)=>o.updateClassesToKeep&&o.updateClassesToKeep(...s))},null,544),[[je,a.classesToKeepInput]]),r(i,{tags:a.classes,placeholder:"Enter classes separated by commas",validate:o.customValidateClasses,onOnTagsChanged:o.handleChangeClasses},null,8,["tags","validate","onOnTagsChanged"])])])):Se("",!0)])])):Se("",!0)}const kv=Re(mv,[["render",Sv]]),xv={props:{modelValue:Object},data(){return{selectedBorderRadius:{borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""}}},watch:{modelValue(e){e&&(this.selectedBorderRadius={...e})}},methods:{updateValues(){this.$emit("update:modelValue",this.selectedBorderRadius)}}},Cv={class:"d-flex justify-content-center align-items-center"},Vv={class:"rounded-corners my-5"},_v={class:"s-field-content"},Iv={class:"mw-field mw-field-flat"},Tv={class:"mw-multiple-fields"},Pv={class:"mw-field mw-field-flat"},Av=_("span",{class:"mw-field mw-field-flat-prepend order-2"},[_("i",{class:"angle angle-top-left"})],-1),Bv={class:"mw-field mw-field-flat"},Ev=_("span",{class:"mw-field mw-field-flat-prepend"},[_("i",{class:"angle angle-top-right"})],-1),Rv={class:"mw-field mw-field-flat"},Lv={class:"mw-multiple-fields"},$v={class:"mw-field mw-field-flat"},Ov=_("span",{class:"mw-field mw-field-flat-prepend order-2"},[_("i",{class:"angle angle-bottom-left"})],-1),Mv={class:"mw-field mw-field-flat"},Fv=_("span",{class:"mw-field mw-field-flat-prepend"},[_("i",{class:"angle angle-bottom-right"})],-1);function Nv(e,t,n,l,a,o){return Q(),ee("div",Cv,[_("div",Vv,[_("div",_v,[_("div",Iv,[_("div",Tv,[_("div",Pv,[ne(_("input",{type:"number",class:"regular order-1 text-center",name:"borderTopLeftRadius",autocomplete:"off","onUpdate:modelValue":t[0]||(t[0]=i=>a.selectedBorderRadius.borderTopLeftRadius=i),onInput:t[1]||(t[1]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderTopLeftRadius]]),Av]),_("div",Bv,[Ev,ne(_("input",{class:"regular text-center",type:"number",name:"borderTopRightRadius",autocomplete:"off","onUpdate:modelValue":t[2]||(t[2]=i=>a.selectedBorderRadius.borderTopRightRadius=i),onInput:t[3]||(t[3]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderTopRightRadius]])])])]),_("div",Rv,[_("div",Lv,[_("div",$v,[ne(_("input",{class:"regular order-1 text-center",type:"number",name:"borderBottomLeftRadius",autocomplete:"off","onUpdate:modelValue":t[4]||(t[4]=i=>a.selectedBorderRadius.borderBottomLeftRadius=i),onInput:t[5]||(t[5]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderBottomLeftRadius]]),Ov]),_("div",Mv,[Fv,ne(_("input",{class:"regular text-center",type:"number",name:"borderBottomRightRadius",autocomplete:"off","onUpdate:modelValue":t[6]||(t[6]=i=>a.selectedBorderRadius.borderBottomRightRadius=i),onInput:t[7]||(t[7]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderBottomRightRadius]])])])])])])])}const Dv=Re(xv,[["render",Nv]]),zv={components:{BorderRadius:Dv},data(){return{showRoundedCorners:!1,activeNode:null,isReady:!1,borderRadius:{borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""},selectedBorderRadius:"",predefinedBorderRadiusValues:[{label:"None",value:"rounded-none",borderRadius:{tl:0,tr:0,bl:0,br:0}},{label:"Small",value:"rounded-sm",borderRadius:{tl:2,tr:2,bl:2,br:2}},{label:"Regular",value:"rounded",borderRadius:{tl:4,tr:4,bl:4,br:4}},{label:"Medium",value:"rounded-md",borderRadius:{tl:6,tr:6,bl:6,br:6}},{label:"Large",value:"rounded-lg",borderRadius:{tl:8,tr:8,bl:8,br:8}},{label:"Extra Large",value:"rounded-xl",borderRadius:{tl:12,tr:12,bl:12,br:12}},{label:"2XL",value:"rounded-2xl",borderRadius:{tl:16,tr:16,bl:16,br:16}},{label:"3XL",value:"rounded-3xl",borderRadius:{tl:24,tr:24,bl:24,br:24}},{label:"4XL",value:"rounded-4xl",borderRadius:{tl:34,tr:34,bl:34,br:34}},{label:"5XL",value:"rounded-5xl",borderRadius:{tl:42,tr:42,bl:42,br:42}},{label:"6XL",value:"rounded-6xl",borderRadius:{tl:50,tr:50,bl:50,br:50}},{label:"Full",value:"rounded-full",borderRadius:{tl:9999,tr:9999,bl:9999,br:9999}}]}},methods:{toggleRoundedCorners:function(){this.showRoundedCorners=!this.showRoundedCorners,this.emitter.emit("element-style-editor-show","roundedCorners")},applyPredefinedRadius(){const e=this.predefinedBorderRadiusValues.find(t=>t.value===this.selectedBorderRadius);if(e){const t=e.borderRadius;this.applyPropertyToActiveNode("border-top-left-radius",`${t.tl}px`),this.applyPropertyToActiveNode("border-top-right-radius",`${t.tr}px`),this.applyPropertyToActiveNode("border-bottom-left-radius",`${t.bl}px`),this.applyPropertyToActiveNode("border-bottom-right-radius",`${t.br}px`),this.populateStyleEditor(this.activeNode)}},resetAllProperties:function(){this.borderRadius={borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""}},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBorderRadius(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBorderRadius:function(e){if(!e||!e.get)return;var t=e.get.radius(!0);this.borderTopLeftRadius=t.tl,this.borderTopRightRadius=t.tr,this.borderBottomRightRadius=t.br,this.borderBottomLeftRadius=t.bl,this.borderRadius={borderTopLeftRadius:t.tl,borderTopRightRadius:t.tr,borderBottomLeftRadius:t.bl,borderBottomRightRadius:t.br};const n=this.predefinedBorderRadiusValues.find(l=>parseInt(l.borderRadius.tl)===parseInt(this.borderTopLeftRadius)&&parseInt(l.borderRadius.tr)===parseInt(this.borderTopRightRadius)&&parseInt(l.borderRadius.bl)===parseInt(this.borderBottomLeftRadius)&&parseInt(l.borderRadius.br)===parseInt(this.borderBottomRightRadius));n?this.selectedBorderRadius=n.value:this.selectedBorderRadius="custom"},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{this.$root.selectedElement&&this.populateStyleEditor(this.$root.selectedElement)}),this.emitter.on("element-style-editor-show",e=>{e!=="roundedCorners"&&(this.showRoundedCorners=!1)})},watch:{"$root.selectedElement":{handler:function(e){e&&this.populateStyleEditor(e)},deep:!0},borderRadius:function(e,t){var n="";e.borderTopLeftRadius?n+=e.borderTopLeftRadius+"px ":n+="0px ",e.borderTopRightRadius?n+=e.borderTopRightRadius+"px ":n+="0px ",e.borderBottomRightRadius?n+=e.borderBottomRightRadius+"px ":n+="0px ",e.borderBottomLeftRadius?n+=e.borderBottomLeftRadius+"px ":n+="0px ",this.applyPropertyToActiveNode("border-radius",n)}}},Hv={class:"d-flex"},jv={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Uv=_("path",{d:"M19,19h2v2h-2V19 M19,17h2v-2h-2V17 M3,13h2v-2H3V13 M3,17h2v-2H3V17 M3,9h2V7H3V9 M3,5h2V3H3V5 M7,5h2V3H7V5 M15,21h2v-2  h-2V21 M11,21h2v-2h-2V21 M15,21h2v-2h-2V21 M7,21h2v-2H7V21 M3,21h2v-2H3V21 M21,8c0-2.8-2.2-5-5-5h-5v2h5c1.7,0,3,1.3,3,3v5h2V8z"},null,-1),Gv=[Uv],Wv={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center flex-wrap gap-2"},Yv=_("label",{class:"live-edit-label",for:"borderRadiusSelect"},"Select predefined border radius:",-1),Kv=["value"],qv={class:"d-flex flex-column gap-3"};function Xv(e,t,n,l,a,o){const i=he("BorderRadius");return Q(),ee(ae,null,[_("div",Hv,[(Q(),ee("svg",jv,Gv)),_("b",{class:xe(["mw-admin-action-links ms-3",{active:a.showRoundedCorners}]),onClick:t[0]||(t[0]=(...s)=>o.toggleRoundedCorners&&o.toggleRoundedCorners(...s))}," Rounded corners ",2)]),_("div",{class:xe({"d-none":!a.showRoundedCorners})},[_("div",Wv,[Yv,ne(_("select",{class:"form-control-live-edit-input form-select",id:"borderRadiusSelect","onUpdate:modelValue":t[1]||(t[1]=s=>a.selectedBorderRadius=s),onChange:t[2]||(t[2]=(...s)=>o.applyPredefinedRadius&&o.applyPredefinedRadius(...s))},[(Q(!0),ee(ae,null,dn(a.predefinedBorderRadiusValues,(s,u)=>(Q(),ee("option",{key:u,value:s.value},wt(s.label),9,Kv))),128))],544),[[ui,a.selectedBorderRadius]])]),_("div",qv,[r(i,{modelValue:a.borderRadius,"onUpdate:modelValue":t[3]||(t[3]=s=>a.borderRadius=s)},null,8,["modelValue"])])],2)],64)}const Zv=Re(zv,[["render",Xv]]),Jv={components:{ColorPicker:zn,SliderSmall:Un},data(){return{activeNode:null,isReady:!1,boxShadowOptions:{horizontalLength:"",verticalLength:"",blurRadius:"",spreadRadius:"",shadowColor:"",inset:""}}},mounted(){this.emitter.on("element-style-editor-show",e=>{this.$root.selectedElement&&this.populateStyleEditor(this.$root.selectedElement)}),this.emitter.on("element-style-editor-show",e=>{e!=="showBoxShadowOptions"?this.showBoxShadowOptions=!1:this.showBoxShadowOptions=!0})},watch:{"$root.selectedElement":{handler:function(e){e&&this.populateStyleEditor(e)},deep:!0},boxShadowOptions:{handler:function(e,t){this.applyBoxShadow()},deep:!0}},methods:{applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})},handleBoxShadowColorChange(e){typeof e=="string"&&(this.boxShadowOptions.shadowColor=e)},toggleBoxShadow:function(){this.showBoxShadowOptions=!this.showBoxShadowOptions,this.emitter.emit("element-style-editor-show","boxShadowOptions")},resetAllProperties:function(){this.boxShadowOptions={horizontalLength:"",verticalLength:"",blurRadius:"",spreadRadius:"",shadowColor:"",inset:""}},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBoxShadow(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBoxShadow:function(e){if(!(!e||!e.get)){var t=e.get.boxShadow();for(let n in t)typeof t[n]=="number"&&(t[n]=`${t[n]}`);t.color&&(this.boxShadowOptions.shadowColor=t.color),t.offsetX&&(this.boxShadowOptions.horizontalLength=t.offsetX.replace("px","")),t.offsetY&&(this.boxShadowOptions.verticalLength=t.offsetY.replace("px","")),t.blurRadius&&(this.boxShadowOptions.blurRadius=t.blurRadius.replace("px","")),t.spreadRadius&&(this.boxShadowOptions.spreadRadius=t.spreadRadius.replace("px","")),t.inset&&(this.boxShadowOptions.inset=t.inset)}},applyBoxShadow(){if(!this.isReady)return;const{horizontalLength:e,verticalLength:t,blurRadius:n,spreadRadius:l,shadowColor:a,inset:o}=this.boxShadowOptions,i=`${o?"inset ":""}${e}px ${t}px ${n}px ${l}px ${a}`;this.applyPropertyToActiveNode("boxShadow",i)}}},Qv={class:"box-shadow-options"},ef={class:"form-group"},tf={class:"form-group"},nf={class:"form-check"},lf=_("label",{for:"inset"}," Inset",-1);function af(e,t,n,l,a,o){const i=he("SliderSmall"),s=he("ColorPicker");return Q(),ee("div",null,[_("div",Qv,[_("div",ef,[r(i,{label:"Horizontal Shadow Length",modelValue:a.boxShadowOptions.horizontalLength,"onUpdate:modelValue":t[0]||(t[0]=u=>a.boxShadowOptions.horizontalLength=u),min:-300,max:300,step:1},null,8,["modelValue"]),r(i,{label:"Vertical Shadow Length",modelValue:a.boxShadowOptions.verticalLength,"onUpdate:modelValue":t[1]||(t[1]=u=>a.boxShadowOptions.verticalLength=u),min:-300,max:300,step:1},null,8,["modelValue"]),r(i,{label:"Blur Radius",modelValue:a.boxShadowOptions.blurRadius,"onUpdate:modelValue":t[2]||(t[2]=u=>a.boxShadowOptions.blurRadius=u),min:0,max:30,step:1},null,8,["modelValue"]),r(i,{label:"Spread Radius",modelValue:a.boxShadowOptions.spreadRadius,"onUpdate:modelValue":t[3]||(t[3]=u=>a.boxShadowOptions.spreadRadius=u),min:0,max:30,step:1},null,8,["modelValue"]),r(s,{modelValue:a.boxShadowOptions.shadowColor,"onUpdate:modelValue":t[4]||(t[4]=u=>a.boxShadowOptions.shadowColor=u),color:a.boxShadowOptions.shadowColor,label:"Color",onChange:o.handleBoxShadowColorChange},null,8,["modelValue","color","onChange"])]),_("div",tf,[_("div",nf,[lf,ne(_("input",{style:{"margin-inline":"-15px 8px"},type:"checkbox",id:"inset",class:"form-check-input","onUpdate:modelValue":t[5]||(t[5]=u=>a.boxShadowOptions.inset=u),onChange:t[6]||(t[6]=(...u)=>o.applyBoxShadow&&o.applyBoxShadow(...u))},null,544),[[Er,a.boxShadowOptions.inset]])])])])])}const of=Re(Jv,[["render",af]]),sf={components:{ColorPicker:zn,SliderSmall:Un},data(){return{activeNode:null,isReady:!1,showTextShadowOptions:!1,textShadowOptions:{horizontalLength:"",verticalLength:"",blurRadius:"",shadowColor:""}}},mounted(){this.emitter.on("element-style-editor-show",e=>{this.$root.selectedElement&&this.populateStyleEditor(this.$root.selectedElement)}),this.emitter.on("element-style-editor-show",e=>{e!=="showTextShadowOptions"?this.showTextShadowOptions=!1:this.showTextShadowOptions=!0})},watch:{"$root.selectedElement":{handler:function(e){e&&this.populateStyleEditor(e)},deep:!0},textShadowOptions:{handler:function(e,t){this.applyTextShadow()},deep:!0}},methods:{applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})},handleTextShadowColorChange(e){typeof e=="string"&&(this.textShadowOptions.shadowColor=e)},toggleTextShadow:function(){this.showTextShadowOptions=!this.showTextShadowOptions},resetAllProperties:function(){this.textShadowOptions={horizontalLength:"",verticalLength:"",blurRadius:"",shadowColor:""}},populateStyleEditor:function(e){if(e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssTextShadow(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssTextShadow:function(e){if(!(!e||!e.get)){var t=e.get.textShadow();for(let n in t)typeof t[n]=="number"&&(t[n]=`${t[n]}`);t.color&&(this.textShadowOptions.shadowColor=t.color),t.offsetX&&(this.textShadowOptions.horizontalLength=t.offsetX.replace("px","")),t.offsetY&&(this.textShadowOptions.verticalLength=t.offsetY.replace("px","")),t.blurRadius&&(this.textShadowOptions.blurRadius=t.blurRadius.replace("px","")),t.spreadRadius&&(this.textShadowOptions.spreadRadius=t.spreadRadius.replace("px",""))}},applyTextShadow(){if(!this.isReady)return;const{horizontalLength:e,verticalLength:t,blurRadius:n,shadowColor:l,inset:a}=this.textShadowOptions,o=`${e}px ${t}px ${n}px ${l}`;this.applyPropertyToActiveNode("textShadow",o)}}},rf={class:"text-shadow-options"},uf={class:"form-group"};function cf(e,t,n,l,a,o){const i=he("SliderSmall"),s=he("ColorPicker");return Q(),ee("div",null,[_("div",rf,[_("div",uf,[r(i,{label:"Horizontal Shadow Length",modelValue:a.textShadowOptions.horizontalLength,"onUpdate:modelValue":t[0]||(t[0]=u=>a.textShadowOptions.horizontalLength=u),min:-300,max:300,step:1},null,8,["modelValue"]),r(i,{label:"Vertical Shadow Length",modelValue:a.textShadowOptions.verticalLength,"onUpdate:modelValue":t[1]||(t[1]=u=>a.textShadowOptions.verticalLength=u),min:-300,max:300,step:1},null,8,["modelValue"]),r(i,{label:"Blur Radius",modelValue:a.textShadowOptions.blurRadius,"onUpdate:modelValue":t[2]||(t[2]=u=>a.textShadowOptions.blurRadius=u),min:0,max:30,step:1},null,8,["modelValue"]),r(s,{modelValue:a.textShadowOptions.shadowColor,"onUpdate:modelValue":t[3]||(t[3]=u=>a.textShadowOptions.shadowColor=u),color:a.textShadowOptions.shadowColor,label:"Color",onChange:o.handleTextShadowColorChange},null,8,["modelValue","color","onChange"])])])])}const df=Re(sf,[["render",cf]]),vf={components:{ElementStyleEditorBoxShadow:of,ElementStyleEditorTextShadow:df},data(){return{showShadow:!1,showBoxShadowOptions:!1,showTextShadowOptions:!1}},mounted(){this.emitter.on("element-style-editor-show",e=>{e==="showShadow"||e==="showBoxShadowOptions"||e==="showTextShadowOptions"?(this.showShadow=!0,e==="showTextShadowOptions"?(this.showTextShadowOptions=!0,this.showBoxShadowOptions=!1):e==="showBoxShadowOptions"?(this.showTextShadowOptions=!1,this.showBoxShadowOptions=!0):(this.showTextShadowOptions=!1,this.showBoxShadowOptions=!1)):this.showShadow=!1})},methods:{toggleShadow:function(){this.showShadow=!this.showShadow},toggleTextShadow:function(){this.emitter.emit("element-style-editor-show","showTextShadowOptions")},toggleBoxShadow:function(){this.emitter.emit("element-style-editor-show","showBoxShadowOptions")}}},ff={class:"d-flex"},mf={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},hf=_("path",{d:"M12.2,3.9c4.5,0,8.1,3.6,8.1,8.1s-3.6,8.1-8.1,8.1S4.1,16.5,4.1,12S7.7,3.9,12.2,3.9"},null,-1),gf=[hf],yf={key:0},bf=_("br",null,null,-1);function pf(e,t,n,l,a,o){const i=he("ElementStyleEditorTextShadow"),s=he("ElementStyleEditorBoxShadow");return Q(),ee(ae,null,[_("div",ff,[(Q(),ee("svg",mf,gf)),_("b",{class:xe(["mw-admin-action-links ms-3",{active:a.showShadow}]),onClick:t[0]||(t[0]=(...u)=>o.toggleShadow&&o.toggleShadow(...u))}," Shadow ",2)]),a.showShadow?(Q(),ee("div",yf,[_("a",{class:xe(["mw-admin-action-links ms-3",{active:a.showTextShadowOptions}]),onClick:t[1]||(t[1]=(...u)=>o.toggleTextShadow&&o.toggleTextShadow(...u))}," Text shadow ",2),_("a",{class:xe(["mw-admin-action-links ms-3",{active:a.showBoxShadowOptions}]),onClick:t[2]||(t[2]=(...u)=>o.toggleBoxShadow&&o.toggleBoxShadow(...u))}," Box shadow ",2),bf,_("div",{class:xe({"d-none":!a.showTextShadowOptions})},[r(i)],2),_("div",{class:xe({"d-none":!a.showBoxShadowOptions})},[r(s)],2)])):Se("",!0)],64)}const wf=Re(vf,[["render",pf]]),Sf={data(){return{activeLayoutNode:null,isReady:!1}},mounted(){},watch:{"$root.selectedLayout":{handler:function(e){e&&this.populateLayoutSettings(e)},deep:!0}},methods:{editLayout:function(){mw.top().app.editor.dispatch("onLayoutSettingsRequest",this.activeLayoutNode)},populateLayoutSettings:function(e){e&&e.nodeType===1&&(this.isReady=!1,this.activeLayoutNode=e,setTimeout(()=>{this.isReady=!0},100))}}},kf={key:0,class:"mb-4"},xf={class:"row",role:"alert"};function Cf(e,t,n,l,a,o){return a.activeLayoutNode?(Q(),ee("div",kf,[_("div",xf,[_("div",null,[_("input",{type:"button",class:"btn btn-dark live-edit-toolbar-buttons btn-sm btn-block w-100",value:"Edit layout",onClick:t[0]||(t[0]=(...i)=>o.editLayout&&o.editLayout(...i))})])])])):Se("",!0)}const Vf=Re(Sf,[["render",Cf]]);const _f={components:{ElementStyleEditorActiveNode:Wr,ElementStyleEditorBackground:$c,ElementStyleEditorRoundedCorners:Zv,ElementStyleEditorElementSelector:Jc,ElementStyleEditorTypography:ju,ElementStyleEditorSpacing:cc,ElementStyleEditorBorder:jc,ElementStyleEditorContainer:vd,ElementStyleEditorGrid:Nd,ElementStyleEditorAnimations:wd,ElementStyleEditorShadow:wf,ElementStyleEditorClassApplier:kv,ElementStyleEditorLayoutSettings:Vf},data(){return{selectedElement:null,selectedLayout:null,showElementSelector:!0,showBackground:!0,showTypography:!0,showSpacing:!0,showBorder:!0,showContainer:!0,showGrid:!0,showAnimations:!0,showClassApplier:!0,showRoundedCorners:!0}},methods:{},mounted(){mw.top().app.on("cssEditorSettings",e=>{e.fieldSettings.components&&(this.showBackground=!1,this.showTypography=!1,this.showSpacing=!1,this.showBorder=!1,this.showElementSelector=!1,this.showContainer=!1,this.showAnimations=!1,this.showClassApplier=!1,e.fieldSettings.components.includes("background")&&(this.showBackground=!0),e.fieldSettings.components.includes("elementSelector")&&(this.showElementSelector=!0),e.fieldSettings.components.includes("typography")&&(this.showTypography=!0),e.fieldSettings.components.includes("spacing")&&(this.showSpacing=!0),e.fieldSettings.components.includes("border")&&(this.showBorder=!0),e.fieldSettings.components.includes("container")&&(this.showContainer=!0),e.fieldSettings.components.includes("grid")&&(this.showGrid=!0),e.fieldSettings.components.includes("animations")&&(this.showAnimations=!0),e.fieldSettings.components.includes("roundedCorners")&&(this.showRoundedCorners=!0),e.fieldSettings.components.includes("classes")&&(this.showClassApplier=!0))})}},If={class:"d-flex flex-column"},Tf={class:"mb-4"},Pf={class:"mb-4"},Af={class:"mb-4"},Bf={class:"mb-4"},Ef={class:"mb-4"},Rf={class:"mb-4"},Lf={class:"mb-4"},$f={class:"mb-4"};function Of(e,t,n,l,a,o){const i=he("ElementStyleEditorActiveNode"),s=he("ElementStyleEditorElementSelector"),u=he("ElementStyleEditorTypography"),c=he("ElementStyleEditorBackground"),d=he("ElementStyleEditorSpacing"),f=he("ElementStyleEditorContainer"),v=he("ElementStyleEditorGrid"),m=he("ElementStyleEditorBorder"),h=he("ElementStyleEditorRoundedCorners"),y=he("ElementStyleEditorAnimations"),b=he("ElementStyleEditorShadow"),p=he("ElementStyleEditorClassApplier");return Q(),ee(ae,null,[r(i),_("div",{class:xe(["mb-4",{"style-editor-disabled":!a.selectedElement}])},[_("div",If,[ne(_("div",Tf,[r(s)],512),[[Te,a.showElementSelector]]),ne(_("div",Pf,[r(u)],512),[[Te,a.showTypography]]),ne(_("div",Af,[r(c)],512),[[Te,a.showBackground]]),ne(_("div",Bf,[r(d)],512),[[Te,a.showSpacing]]),ne(_("div",null,[r(f)],512),[[Te,a.showContainer]]),ne(_("div",null,[r(v)],512),[[Te,a.showGrid]]),ne(_("div",Ef,[r(m)],512),[[Te,a.showBorder]]),ne(_("div",Rf,[r(h)],512),[[Te,a.showRoundedCorners]]),ne(_("div",null,[r(y)],512),[[Te,a.showAnimations]]),ne(_("div",Lf,[r(b)],512),[[Te,a.showClassApplier]]),ne(_("div",$f,[r(p)],512),[[Te,a.showClassApplier]])])],2)],64)}const Mf=Re(_f,[["render",Of]]);const Ce=typeof window<"u",Pa=Ce&&"IntersectionObserver"in window,Ff=Ce&&("ontouchstart"in window||window.navigator.maxTouchPoints>0);function fo(e,t,n){Nf(e,t),t.set(e,n)}function Nf(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function Df(e,t,n){var l=mi(e,t,"set");return zf(e,l,n),n}function zf(e,t,n){if(t.set)t.set.call(e,n);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=n}}function zt(e,t){var n=mi(e,t,"get");return Hf(e,n)}function mi(e,t,n){if(!t.has(e))throw new TypeError("attempted to "+n+" private field on non-instance");return t.get(e)}function Hf(e,t){return t.get?t.get.call(e):t.value}function hi(e,t,n){const l=t.length-1;if(l<0)return e===void 0?n:e;for(let a=0;a<l;a++){if(e==null)return n;e=e[t[a]]}return e==null||e[t[l]]===void 0?n:e[t[l]]}function yn(e,t){if(e===t)return!0;if(e instanceof Date&&t instanceof Date&&e.getTime()!==t.getTime()||e!==Object(e)||t!==Object(t))return!1;const n=Object.keys(e);return n.length!==Object.keys(t).length?!1:n.every(l=>yn(e[l],t[l]))}function Ul(e,t,n){return e==null||!t||typeof t!="string"?n:e[t]!==void 0?e[t]:(t=t.replace(/\[(\w+)\]/g,".$1"),t=t.replace(/^\./,""),hi(e,t.split("."),n))}function pt(e,t,n){if(t===!0)return e===void 0?n:e;if(t==null||typeof t=="boolean")return n;if(e!==Object(e)){if(typeof t!="function")return n;const a=t(e,n);return typeof a>"u"?n:a}if(typeof t=="string")return Ul(e,t,n);if(Array.isArray(t))return hi(e,t,n);if(typeof t!="function")return n;const l=t(e,n);return typeof l>"u"?n:l}function Ct(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0;return Array.from({length:e},(n,l)=>t+l)}function J(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"px";if(!(e==null||e===""))return isNaN(+e)?String(e):isFinite(+e)?`${Number(e)}${t}`:void 0}function ul(e){return e!==null&&typeof e=="object"&&!Array.isArray(e)}function Gl(e){return e&&"$el"in e?e.$el:e}const mo=Object.freeze({enter:13,tab:9,delete:46,esc:27,space:32,up:38,down:40,left:37,right:39,end:35,home:36,del:46,backspace:8,insert:45,pageup:33,pagedown:34,shift:16}),Wl=Object.freeze({enter:"Enter",tab:"Tab",delete:"Delete",esc:"Escape",space:"Space",up:"ArrowUp",down:"ArrowDown",left:"ArrowLeft",right:"ArrowRight",end:"End",home:"Home",del:"Delete",backspace:"Backspace",insert:"Insert",pageup:"PageUp",pagedown:"PageDown",shift:"Shift"});function gi(e){return Object.keys(e)}function jt(e,t){return t.every(n=>e.hasOwnProperty(n))}function Kt(e,t,n){const l=Object.create(null),a=Object.create(null);for(const o in e)t.some(i=>i instanceof RegExp?i.test(o):i===o)&&!(n!=null&&n.some(i=>i===o))?l[o]=e[o]:a[o]=e[o];return[l,a]}function rt(e,t){const n={...e};return t.forEach(l=>delete n[l]),n}const yi=/^on[^a-z]/,Aa=e=>yi.test(e),jf=["onAfterscriptexecute","onAnimationcancel","onAnimationend","onAnimationiteration","onAnimationstart","onAuxclick","onBeforeinput","onBeforescriptexecute","onChange","onClick","onCompositionend","onCompositionstart","onCompositionupdate","onContextmenu","onCopy","onCut","onDblclick","onFocusin","onFocusout","onFullscreenchange","onFullscreenerror","onGesturechange","onGestureend","onGesturestart","onGotpointercapture","onInput","onKeydown","onKeypress","onKeyup","onLostpointercapture","onMousedown","onMousemove","onMouseout","onMouseover","onMouseup","onMousewheel","onPaste","onPointercancel","onPointerdown","onPointerenter","onPointerleave","onPointermove","onPointerout","onPointerover","onPointerup","onReset","onSelect","onSubmit","onTouchcancel","onTouchend","onTouchmove","onTouchstart","onTransitioncancel","onTransitionend","onTransitionrun","onTransitionstart","onWheel"];function Qt(e){const[t,n]=Kt(e,[yi]),l=rt(t,jf),[a,o]=Kt(n,["class","style","id",/^data-/]);return Object.assign(a,t),Object.assign(o,l),[a,o]}function et(e){return e==null?[]:Array.isArray(e)?e:[e]}function Ue(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;return Math.max(t,Math.min(n,e))}function ho(e){const t=e.toString().trim();return t.includes(".")?t.length-t.indexOf(".")-1:0}function go(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"0";return e+n.repeat(Math.max(0,t-e.length))}function Uf(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1;const n=[];let l=0;for(;l<e.length;)n.push(e.substr(l,t)),l+=t;return n}function yo(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1e3;if(e<t)return`${e} B`;const n=t===1024?["Ki","Mi","Gi"]:["k","M","G"];let l=-1;for(;Math.abs(e)>=t&&l<n.length-1;)e/=t,++l;return`${e.toFixed(1)} ${n[l]}B`}function it(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0;const l={};for(const a in e)l[a]=e[a];for(const a in t){const o=e[a],i=t[a];if(ul(o)&&ul(i)){l[a]=it(o,i,n);continue}if(Array.isArray(o)&&Array.isArray(i)&&n){l[a]=n(o,i);continue}l[a]=i}return l}function bi(e){return e.map(t=>t.type===ae?bi(t.children):t).flat()}function Wt(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";if(Wt.cache.has(e))return Wt.cache.get(e);const t=e.replace(/[^a-z]/gi,"-").replace(/\B([A-Z])/g,"-$1").toLowerCase();return Wt.cache.set(e,t),t}Wt.cache=new Map;function En(e,t){if(!t||typeof t!="object")return[];if(Array.isArray(t))return t.map(n=>En(e,n)).flat(1);if(Array.isArray(t.children))return t.children.map(n=>En(e,n)).flat(1);if(t.component){if(Object.getOwnPropertySymbols(t.component.provides).includes(e))return[t.component];if(t.component.subTree)return En(e,t.component.subTree).flat(1)}return[]}var tl=new WeakMap,on=new WeakMap;class Gf{constructor(t){fo(this,tl,{writable:!0,value:[]}),fo(this,on,{writable:!0,value:0}),this.size=t}push(t){zt(this,tl)[zt(this,on)]=t,Df(this,on,(zt(this,on)+1)%this.size)}values(){return zt(this,tl).slice(zt(this,on)).concat(zt(this,tl).slice(0,zt(this,on)))}}function Wf(e){return"touches"in e?{clientX:e.touches[0].clientX,clientY:e.touches[0].clientY}:{clientX:e.clientX,clientY:e.clientY}}function Ba(e){const t=ht({}),n=g(e);return tt(()=>{for(const l in n.value)t[l]=n.value[l]},{flush:"sync"}),ka(t)}function cl(e,t){return e.includes(t)}function pi(e){return e[2].toLowerCase()+e.slice(3)}const St=()=>[Function,Array];function bo(e,t){return t="on"+Hn(t),!!(e[t]||e[`${t}Once`]||e[`${t}Capture`]||e[`${t}OnceCapture`]||e[`${t}CaptureOnce`])}function Ea(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),l=1;l<t;l++)n[l-1]=arguments[l];if(Array.isArray(e))for(const a of e)a(...n);else typeof e=="function"&&e(...n)}function Ln(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;const n=["button","[href]",'input:not([type="hidden"])',"select","textarea","[tabindex]"].map(l=>`${l}${t?':not([tabindex="-1"])':""}:not([disabled])`).join(", ");return[...e.querySelectorAll(n)]}function wi(e,t,n){let l,a=e.indexOf(document.activeElement);const o=t==="next"?1:-1;do a+=o,l=e[a];while((!l||l.offsetParent==null||!((n==null?void 0:n(l))??!0))&&a<e.length&&a>=0);return l}function dl(e,t){var l,a,o,i;const n=Ln(e);if(!t)(e===document.activeElement||!e.contains(document.activeElement))&&((l=n[0])==null||l.focus());else if(t==="first")(a=n[0])==null||a.focus();else if(t==="last")(o=n.at(-1))==null||o.focus();else if(typeof t=="number")(i=n[t])==null||i.focus();else{const s=wi(n,t);s?s.focus():dl(e,t==="next"?"first":"last")}}function Si(){}function vn(e,t){if(!(Ce&&typeof CSS<"u"&&typeof CSS.supports<"u"&&CSS.supports(`selector(${t})`)))return null;try{return!!e&&e.matches(t)}catch{return null}}const ki=["top","bottom"],Yf=["start","end","left","right"];function Yl(e,t){let[n,l]=e.split(" ");return l||(l=cl(ki,n)?"start":cl(Yf,n)?"top":"center"),{side:Kl(n,t),align:Kl(l,t)}}function Kl(e,t){return e==="start"?t?"right":"left":e==="end"?t?"left":"right":e}function Ol(e){return{side:{center:"center",top:"bottom",bottom:"top",left:"right",right:"left"}[e.side],align:e.align}}function Ml(e){return{side:e.side,align:{center:"center",top:"bottom",bottom:"top",left:"right",right:"left"}[e.align]}}function po(e){return{side:e.align,align:e.side}}function wo(e){return cl(ki,e.side)?"y":"x"}class cn{constructor(t){let{x:n,y:l,width:a,height:o}=t;this.x=n,this.y=l,this.width=a,this.height=o}get top(){return this.y}get bottom(){return this.y+this.height}get left(){return this.x}get right(){return this.x+this.width}}function So(e,t){return{x:{before:Math.max(0,t.left-e.left),after:Math.max(0,e.right-t.right)},y:{before:Math.max(0,t.top-e.top),after:Math.max(0,e.bottom-t.bottom)}}}function Ra(e){const t=e.getBoundingClientRect(),n=getComputedStyle(e),l=n.transform;if(l){let a,o,i,s,u;if(l.startsWith("matrix3d("))a=l.slice(9,-1).split(/, /),o=+a[0],i=+a[5],s=+a[12],u=+a[13];else if(l.startsWith("matrix("))a=l.slice(7,-1).split(/, /),o=+a[0],i=+a[3],s=+a[4],u=+a[5];else return new cn(t);const c=n.transformOrigin,d=t.x-s-(1-o)*parseFloat(c),f=t.y-u-(1-i)*parseFloat(c.slice(c.indexOf(" ")+1)),v=o?t.width/o:e.offsetWidth+1,m=i?t.height/i:e.offsetHeight+1;return new cn({x:d,y:f,width:v,height:m})}else return new cn(t)}function Ut(e,t,n){if(typeof e.animate>"u")return{finished:Promise.resolve()};let l;try{l=e.animate(t,n)}catch{return{finished:Promise.resolve()}}return typeof l.finished>"u"&&(l.finished=new Promise(a=>{l.onfinish=()=>{a(l)}})),l}const ol=new WeakMap;function Kf(e,t){Object.keys(t).forEach(n=>{if(Aa(n)){const l=pi(n),a=ol.get(e);if(t[n]==null)a==null||a.forEach(o=>{const[i,s]=o;i===l&&(e.removeEventListener(l,s),a.delete(o))});else if(!a||![...a].some(o=>o[0]===l&&o[1]===t[n])){e.addEventListener(l,t[n]);const o=a||new Set;o.add([l,t[n]]),ol.has(e)||ol.set(e,o)}}else t[n]==null?e.removeAttribute(n):e.setAttribute(n,t[n])})}function qf(e,t){Object.keys(t).forEach(n=>{if(Aa(n)){const l=pi(n),a=ol.get(e);a==null||a.forEach(o=>{const[i,s]=o;i===l&&(e.removeEventListener(l,s),a.delete(o))})}else e.removeAttribute(n)})}const sn=2.4,ko=.2126729,xo=.7151522,Co=.072175,Xf=.55,Zf=.58,Jf=.57,Qf=.62,nl=.03,Vo=1.45,em=5e-4,tm=1.25,nm=1.25,_o=.078,Io=12.82051282051282,ll=.06,To=.001;function Po(e,t){const n=(e.r/255)**sn,l=(e.g/255)**sn,a=(e.b/255)**sn,o=(t.r/255)**sn,i=(t.g/255)**sn,s=(t.b/255)**sn;let u=n*ko+l*xo+a*Co,c=o*ko+i*xo+s*Co;if(u<=nl&&(u+=(nl-u)**Vo),c<=nl&&(c+=(nl-c)**Vo),Math.abs(c-u)<em)return 0;let d;if(c>u){const f=(c**Xf-u**Zf)*tm;d=f<To?0:f<_o?f-f*Io*ll:f-ll}else{const f=(c**Qf-u**Jf)*nm;d=f>-To?0:f>-_o?f-f*Io*ll:f+ll}return d*100}function lm(e,t){t=Array.isArray(t)?t.slice(0,-1).map(n=>`'${n}'`).join(", ")+` or '${t.at(-1)}'`:`'${t}'`}const vl=.20689655172413793,am=e=>e>vl**3?Math.cbrt(e):e/(3*vl**2)+4/29,om=e=>e>vl?e**3:3*vl**2*(e-4/29);function xi(e){const t=am,n=t(e[1]);return[116*n-16,500*(t(e[0]/.95047)-n),200*(n-t(e[2]/1.08883))]}function Ci(e){const t=om,n=(e[0]+16)/116;return[t(n+e[1]/500)*.95047,t(n),t(n-e[2]/200)*1.08883]}const im=[[3.2406,-1.5372,-.4986],[-.9689,1.8758,.0415],[.0557,-.204,1.057]],sm=e=>e<=.0031308?e*12.92:1.055*e**(1/2.4)-.055,rm=[[.4124,.3576,.1805],[.2126,.7152,.0722],[.0193,.1192,.9505]],um=e=>e<=.04045?e/12.92:((e+.055)/1.055)**2.4;function Vi(e){const t=Array(3),n=sm,l=im;for(let a=0;a<3;++a)t[a]=Math.round(Ue(n(l[a][0]*e[0]+l[a][1]*e[1]+l[a][2]*e[2]))*255);return{r:t[0],g:t[1],b:t[2]}}function La(e){let{r:t,g:n,b:l}=e;const a=[0,0,0],o=um,i=rm;t=o(t/255),n=o(n/255),l=o(l/255);for(let s=0;s<3;++s)a[s]=i[s][0]*t+i[s][1]*n+i[s][2]*l;return a}function Ao(e){return!!e&&/^(#|var\(--|(rgb|hsl)a?\()/.test(e)}const Bo=/^(?<fn>(?:rgb|hsl)a?)\((?<values>.+)\)/,cm={rgb:(e,t,n,l)=>({r:e,g:t,b:n,a:l}),rgba:(e,t,n,l)=>({r:e,g:t,b:n,a:l}),hsl:(e,t,n,l)=>Eo({h:e,s:t,l:n,a:l}),hsla:(e,t,n,l)=>Eo({h:e,s:t,l:n,a:l}),hsv:(e,t,n,l)=>Vt({h:e,s:t,v:n,a:l}),hsva:(e,t,n,l)=>Vt({h:e,s:t,v:n,a:l})};function st(e){if(typeof e=="number")return{r:(e&16711680)>>16,g:(e&65280)>>8,b:e&255};if(typeof e=="string"&&Bo.test(e)){const{groups:t}=e.match(Bo),{fn:n,values:l}=t,a=l.split(/,\s*/).map(o=>o.endsWith("%")&&["hsl","hsla","hsv","hsva"].includes(n)?parseFloat(o)/100:parseFloat(o));return cm[n](...a)}else if(typeof e=="string"){let t=e.startsWith("#")?e.slice(1):e;return[3,4].includes(t.length)?t=t.split("").map(n=>n+n).join(""):[6,8].includes(t.length),Ai(t)}else if(typeof e=="object"){if(jt(e,["r","g","b"]))return e;if(jt(e,["h","s","l"]))return Vt($a(e));if(jt(e,["h","s","v"]))return Vt(e)}throw new TypeError(`Invalid color: ${e==null?e:String(e)||e.constructor.name}
Expected #hex, #hexa, rgb(), rgba(), hsl(), hsla(), object or number`)}function Vt(e){const{h:t,s:n,v:l,a}=e,o=s=>{const u=(s+t/60)%6;return l-l*n*Math.max(Math.min(u,4-u,1),0)},i=[o(5),o(3),o(1)].map(s=>Math.round(s*255));return{r:i[0],g:i[1],b:i[2],a}}function Eo(e){return Vt($a(e))}function bl(e){if(!e)return{h:0,s:1,v:1,a:1};const t=e.r/255,n=e.g/255,l=e.b/255,a=Math.max(t,n,l),o=Math.min(t,n,l);let i=0;a!==o&&(a===t?i=60*(0+(n-l)/(a-o)):a===n?i=60*(2+(l-t)/(a-o)):a===l&&(i=60*(4+(t-n)/(a-o)))),i<0&&(i=i+360);const s=a===0?0:(a-o)/a,u=[i,s,a];return{h:u[0],s:u[1],v:u[2],a:e.a}}function _i(e){const{h:t,s:n,v:l,a}=e,o=l-l*n/2,i=o===1||o===0?0:(l-o)/Math.min(o,1-o);return{h:t,s:i,l:o,a}}function $a(e){const{h:t,s:n,l,a}=e,o=l+n*Math.min(l,1-l),i=o===0?0:2-2*l/o;return{h:t,s:i,v:o,a}}function Ii(e){let{r:t,g:n,b:l,a}=e;return a===void 0?`rgb(${t}, ${n}, ${l})`:`rgba(${t}, ${n}, ${l}, ${a})`}function Ti(e){return Ii(Vt(e))}function al(e){const t=Math.round(e).toString(16);return("00".substr(0,2-t.length)+t).toUpperCase()}function Pi(e){let{r:t,g:n,b:l,a}=e;return`#${[al(t),al(n),al(l),a!==void 0?al(Math.round(a*255)):""].join("")}`}function Ai(e){e=vm(e);let[t,n,l,a]=Uf(e,2).map(o=>parseInt(o,16));return a=a===void 0?a:a/255,{r:t,g:n,b:l,a}}function dm(e){const t=Ai(e);return bl(t)}function Bi(e){return Pi(Vt(e))}function vm(e){return e.startsWith("#")&&(e=e.slice(1)),e=e.replace(/([^0-9a-f])/gi,"F"),(e.length===3||e.length===4)&&(e=e.split("").map(t=>t+t).join("")),e.length!==6&&(e=go(go(e,6),8,"F")),e}function fm(e,t){const n=xi(La(e));return n[0]=n[0]+t*10,Vi(Ci(n))}function mm(e,t){const n=xi(La(e));return n[0]=n[0]-t*10,Vi(Ci(n))}function ql(e){const t=st(e);return La(t)[1]}function hm(e,t){const n=ql(e),l=ql(t),a=Math.max(n,l),o=Math.min(n,l);return(a+.05)/(o+.05)}function Ei(e){const t=Math.abs(Po(st(0),st(e)));return Math.abs(Po(st(16777215),st(e)))>Math.min(t,50)?"#fff":"#000"}function E(e,t){return n=>Object.keys(e).reduce((l,a)=>{const i=typeof e[a]=="object"&&e[a]!=null&&!Array.isArray(e[a])?e[a]:{type:e[a]};return n&&a in n?l[a]={...i,default:n[a]}:l[a]=i,t&&!l[a].source&&(l[a].source=t),l},{})}const q=E({class:[String,Array],style:{type:[String,Array,Object],default:null}},"component");function ut(e){if(e._setup=e._setup??e.setup,!e.name)return e;if(e._setup){e.props=E(e.props??{},e.name)();const t=Object.keys(e.props);e.filterProps=function(l){return Kt(l,t,["class","style"])},e.props._as=String,e.setup=function(l,a){const o=Fa();if(!o.value)return e._setup(l,a);const{props:i,provideSubDefaults:s}=xm(l,l._as??e.name,o),u=e._setup(i,a);return s(),u}}return e}function L(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0;return t=>(e?ut:Rr)(t)}function yt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"div",n=arguments.length>2?arguments[2]:void 0;return L()({name:n??Hn(ci(e.replace(/__/g,"-"))),props:{tag:{type:String,default:t},...q()},setup(l,a){let{slots:o}=a;return()=>{var i;return Jt(l.tag,{class:[e,l.class],style:l.style},(i=o.default)==null?void 0:i.call(o))}}})}function Ri(e){if(typeof e.getRootNode!="function"){for(;e.parentNode;)e=e.parentNode;return e!==document?null:document}const t=e.getRootNode();return t!==document&&t.getRootNode({composed:!0})!==document?null:t}const $n="cubic-bezier(0.4, 0, 0.2, 1)",gm="cubic-bezier(0.0, 0, 0.2, 1)",ym="cubic-bezier(0.4, 0, 1, 1)";function Ne(e,t){const n=Lr();if(!n)throw new Error(`[Vuetify] ${e} ${t||"must be called from inside a setup function"}`);return n}function Tt(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"composables";const t=Ne(e).type;return Wt((t==null?void 0:t.aliasName)||(t==null?void 0:t.name))}let Li=0,il=new WeakMap;function We(){const e=Ne("getUid");if(il.has(e))return il.get(e);{const t=Li++;return il.set(e,t),t}}We.reset=()=>{Li=0,il=new WeakMap};function Oa(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;for(;e;){if(t?bm(e):Ma(e))return e;e=e.parentElement}return document.scrollingElement}function fl(e,t){const n=[];if(t&&e&&!t.contains(e))return n;for(;e&&(Ma(e)&&n.push(e),e!==t);)e=e.parentElement;return n}function Ma(e){if(!e||e.nodeType!==Node.ELEMENT_NODE)return!1;const t=window.getComputedStyle(e);return t.overflowY==="scroll"||t.overflowY==="auto"&&e.scrollHeight>e.clientHeight}function bm(e){if(!e||e.nodeType!==Node.ELEMENT_NODE)return!1;const t=window.getComputedStyle(e);return["scroll","auto"].includes(t.overflowY)}function pm(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Ne("injectSelf");const{provides:n}=t;if(n&&e in n)return n[e]}function wm(e){for(;e;){if(window.getComputedStyle(e).position==="fixed")return!0;e=e.offsetParent}return!1}function j(e){const t=Ne("useRender");t.render=e}const fn=Symbol.for("vuetify:defaults");function Sm(e){return W(e)}function Fa(){const e=_e(fn);if(!e)throw new Error("[Vuetify] Could not find defaults instance");return e}function $e(e,t){const n=Fa(),l=W(e),a=g(()=>{if(ot(t==null?void 0:t.disabled))return n.value;const i=ot(t==null?void 0:t.scoped),s=ot(t==null?void 0:t.reset),u=ot(t==null?void 0:t.root);if(l.value==null&&!(i||s||u))return n.value;let c=it(l.value,{prev:n.value});if(i)return c;if(s||u){const d=Number(s||1/0);for(let f=0;f<=d&&!(!c||!("prev"in c));f++)c=c.prev;return c&&typeof u=="string"&&u in c&&(c=it(it(c,{prev:c}),c[u])),c}return c.prev?it(c.prev,c):c});return Oe(fn,a),a}function km(e,t){var n,l;return typeof((n=e.props)==null?void 0:n[t])<"u"||typeof((l=e.props)==null?void 0:l[Wt(t)])<"u"}function xm(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:Fa();const l=Ne("useDefaults");if(t=t??l.type.name??l.type.__name,!t)throw new Error("[Vuetify] Could not determine component name");const a=g(()=>{var u;return(u=n.value)==null?void 0:u[e._as??t]}),o=new Proxy(e,{get(u,c){var f,v,m,h;const d=Reflect.get(u,c);return c==="class"||c==="style"?[(f=a.value)==null?void 0:f[c],d].filter(y=>y!=null):typeof c=="string"&&!km(l.vnode,c)?((v=a.value)==null?void 0:v[c])??((h=(m=n.value)==null?void 0:m.global)==null?void 0:h[c])??d:d}}),i=K();tt(()=>{if(a.value){const u=Object.entries(a.value).filter(c=>{let[d]=c;return d.startsWith(d[0].toUpperCase())});i.value=u.length?Object.fromEntries(u):void 0}else i.value=void 0});function s(){const u=pm(fn,l);Oe(fn,g(()=>i.value?it((u==null?void 0:u.value)??{},i.value):u==null?void 0:u.value))}return{props:o,provideSubDefaults:s}}const pl=["sm","md","lg","xl","xxl"],Xl=Symbol.for("vuetify:display"),Ro={mobileBreakpoint:"lg",thresholds:{xs:0,sm:600,md:960,lg:1280,xl:1920,xxl:2560}},Cm=function(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Ro;return it(Ro,e)};function Lo(e){return Ce&&!e?window.innerWidth:typeof e=="object"&&e.clientWidth||0}function $o(e){return Ce&&!e?window.innerHeight:typeof e=="object"&&e.clientHeight||0}function Oo(e){const t=Ce&&!e?window.navigator.userAgent:"ssr";function n(h){return!!t.match(h)}const l=n(/android/i),a=n(/iphone|ipad|ipod/i),o=n(/cordova/i),i=n(/electron/i),s=n(/chrome/i),u=n(/edge/i),c=n(/firefox/i),d=n(/opera/i),f=n(/win/i),v=n(/mac/i),m=n(/linux/i);return{android:l,ios:a,cordova:o,electron:i,chrome:s,edge:u,firefox:c,opera:d,win:f,mac:v,linux:m,touch:Ff,ssr:t==="ssr"}}function Vm(e,t){const{thresholds:n,mobileBreakpoint:l}=Cm(e),a=K($o(t)),o=K(Oo(t)),i=ht({}),s=K(Lo(t));function u(){a.value=$o(),s.value=Lo()}function c(){u(),o.value=Oo()}return tt(()=>{const d=s.value<n.sm,f=s.value<n.md&&!d,v=s.value<n.lg&&!(f||d),m=s.value<n.xl&&!(v||f||d),h=s.value<n.xxl&&!(m||v||f||d),y=s.value>=n.xxl,b=d?"xs":f?"sm":v?"md":m?"lg":h?"xl":"xxl",p=typeof l=="number"?l:n[l],S=s.value<p;i.xs=d,i.sm=f,i.md=v,i.lg=m,i.xl=h,i.xxl=y,i.smAndUp=!d,i.mdAndUp=!(d||f),i.lgAndUp=!(d||f||v),i.xlAndUp=!(d||f||v||m),i.smAndDown=!(v||m||h||y),i.mdAndDown=!(m||h||y),i.lgAndDown=!(h||y),i.xlAndDown=!y,i.name=b,i.height=a.value,i.width=s.value,i.mobile=S,i.mobileBreakpoint=l,i.platform=o.value,i.thresholds=n}),Ce&&window.addEventListener("resize",u,{passive:!0}),{...ka(i),update:c,ssr:!!t}}function en(){const e=_e(Xl);if(!e)throw new Error("Could not find Vuetify display injection");return e}const _m={collapse:"mdi-chevron-up",complete:"mdi-check",cancel:"mdi-close-circle",close:"mdi-close",delete:"mdi-close-circle",clear:"mdi-close-circle",success:"mdi-check-circle",info:"mdi-information",warning:"mdi-alert-circle",error:"mdi-close-circle",prev:"mdi-chevron-left",next:"mdi-chevron-right",checkboxOn:"mdi-checkbox-marked",checkboxOff:"mdi-checkbox-blank-outline",checkboxIndeterminate:"mdi-minus-box",delimiter:"mdi-circle",sortAsc:"mdi-arrow-up",sortDesc:"mdi-arrow-down",expand:"mdi-chevron-down",menu:"mdi-menu",subgroup:"mdi-menu-down",dropdown:"mdi-menu-down",radioOn:"mdi-radiobox-marked",radioOff:"mdi-radiobox-blank",edit:"mdi-pencil",ratingEmpty:"mdi-star-outline",ratingFull:"mdi-star",ratingHalf:"mdi-star-half-full",loading:"mdi-cached",first:"mdi-page-first",last:"mdi-page-last",unfold:"mdi-unfold-more-horizontal",file:"mdi-paperclip",plus:"mdi-plus",minus:"mdi-minus",calendar:"mdi-calendar"},Im={component:e=>Jt(Da,{...e,class:"mdi"})},se=[String,Function,Object,Array],Zl=Symbol.for("vuetify:icons"),wl=E({icon:{type:se},tag:{type:String,required:!0}},"icon"),Jl=L()({name:"VComponentIcon",props:wl(),setup(e,t){let{slots:n}=t;return()=>{const l=e.icon;return r(e.tag,null,{default:()=>{var a;return[e.icon?r(l,null,null):(a=n.default)==null?void 0:a.call(n)]}})}}}),Na=ut({name:"VSvgIcon",inheritAttrs:!1,props:wl(),setup(e,t){let{attrs:n}=t;return()=>r(e.tag,Y(n,{style:null}),{default:()=>[r("svg",{class:"v-icon__svg",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",role:"img","aria-hidden":"true"},[Array.isArray(e.icon)?e.icon.map(l=>Array.isArray(l)?r("path",{d:l[0],"fill-opacity":l[1]},null):r("path",{d:l},null)):r("path",{d:e.icon},null)])]})}}),Tm=ut({name:"VLigatureIcon",props:wl(),setup(e){return()=>r(e.tag,null,{default:()=>[e.icon]})}}),Da=ut({name:"VClassIcon",props:wl(),setup(e){return()=>r(e.tag,{class:e.icon},null)}}),Pm={svg:{component:Na},class:{component:Da}};function Am(e){return it({defaultSet:"mdi",sets:{...Pm,mdi:Im},aliases:{..._m,vuetify:["M8.2241 14.2009L12 21L22 3H14.4459L8.2241 14.2009Z",["M7.26303 12.4733L7.00113 12L2 3H12.5261C12.5261 3 12.5261 3 12.5261 3L7.26303 12.4733Z",.6]],"vuetify-outline":"svg:M7.26 12.47 12.53 3H2L7.26 12.47ZM14.45 3 8.22 14.2 12 21 22 3H14.45ZM18.6 5 12 16.88 10.51 14.2 15.62 5ZM7.26 8.35 5.4 5H9.13L7.26 8.35Z"}},e)}const Bm=e=>{const t=_e(Zl);if(!t)throw new Error("Missing Vuetify Icons provide!");return{iconData:g(()=>{var u;const l=ot(e);if(!l)return{component:Jl};let a=l;if(typeof a=="string"&&(a=a.trim(),a.startsWith("$")&&(a=(u=t.aliases)==null?void 0:u[a.slice(1)])),!a)throw new Error(`Could not find aliased icon "${l}"`);if(Array.isArray(a))return{component:Na,icon:a};if(typeof a!="string")return{component:Jl,icon:a};const o=Object.keys(t.sets).find(c=>typeof a=="string"&&a.startsWith(`${c}:`)),i=o?a.slice(o.length+1):a;return{component:t.sets[o??t.defaultSet].component,icon:i}})}},Em={badge:"Badge",open:"Open",close:"Close",dataIterator:{noResultsText:"No matching records found",loadingText:"Loading items..."},dataTable:{itemsPerPageText:"Rows per page:",ariaLabel:{sortDescending:"Sorted descending.",sortAscending:"Sorted ascending.",sortNone:"Not sorted.",activateNone:"Activate to remove sorting.",activateDescending:"Activate to sort descending.",activateAscending:"Activate to sort ascending."},sortBy:"Sort by"},dataFooter:{itemsPerPageText:"Items per page:",itemsPerPageAll:"All",nextPage:"Next page",prevPage:"Previous page",firstPage:"First page",lastPage:"Last page",pageText:"{0}-{1} of {2}"},dateRangeInput:{divider:"to"},datePicker:{ok:"OK",cancel:"Cancel",range:{title:"Select dates",header:"Enter dates"},title:"Select date",header:"Enter date",input:{placeholder:"Enter date"}},noDataText:"No data available",carousel:{prev:"Previous visual",next:"Next visual",ariaLabel:{delimiter:"Carousel slide {0} of {1}"}},calendar:{moreEvents:"{0} more"},input:{clear:"Clear {0}",prependAction:"{0} prepended action",appendAction:"{0} appended action",otp:"Please enter OTP character {0}"},fileInput:{counter:"{0} files",counterSize:"{0} files ({1} in total)"},timePicker:{am:"AM",pm:"PM"},pagination:{ariaLabel:{root:"Pagination Navigation",next:"Next page",previous:"Previous page",page:"Go to page {0}",currentPage:"Page {0}, Current page",first:"First page",last:"Last page"}},stepper:{next:"Next",prev:"Previous"},rating:{ariaLabel:{item:"Rating {0} of {1}"}},loading:"Loading...",infiniteScroll:{loadMore:"Load more",empty:"No more"}},Rm={af:!1,ar:!0,bg:!1,ca:!1,ckb:!1,cs:!1,de:!1,el:!1,en:!1,es:!1,et:!1,fa:!0,fi:!1,fr:!1,hr:!1,hu:!1,he:!0,id:!1,it:!1,ja:!1,ko:!1,lv:!1,lt:!1,nl:!1,no:!1,pl:!1,pt:!1,ro:!1,ru:!1,sk:!1,sl:!1,srCyrl:!1,srLatn:!1,sv:!1,th:!1,tr:!1,az:!1,uk:!1,vi:!1,zhHans:!1,zhHant:!1};function Rt(e,t){let n;function l(){n=xa(),n.run(()=>t.length?t(()=>{n==null||n.stop(),l()}):t())}Z(e,a=>{a&&!n?l():a||(n==null||n.stop(),n=void 0)},{immediate:!0}),Xe(()=>{n==null||n.stop()})}function ue(e,t,n){let l=arguments.length>3&&arguments[3]!==void 0?arguments[3]:f=>f,a=arguments.length>4&&arguments[4]!==void 0?arguments[4]:f=>f;const o=Ne("useProxiedModel"),i=W(e[t]!==void 0?e[t]:n),s=Wt(t),c=s!==t?g(()=>{var f,v,m,h;return e[t],!!(((f=o.vnode.props)!=null&&f.hasOwnProperty(t)||(v=o.vnode.props)!=null&&v.hasOwnProperty(s))&&((m=o.vnode.props)!=null&&m.hasOwnProperty(`onUpdate:${t}`)||(h=o.vnode.props)!=null&&h.hasOwnProperty(`onUpdate:${s}`)))}):g(()=>{var f,v;return e[t],!!((f=o.vnode.props)!=null&&f.hasOwnProperty(t)&&((v=o.vnode.props)!=null&&v.hasOwnProperty(`onUpdate:${t}`)))});Rt(()=>!c.value,()=>{Z(()=>e[t],f=>{i.value=f})});const d=g({get(){const f=e[t];return l(c.value?f:i.value)},set(f){const v=a(f),m=$t(c.value?e[t]:i.value);m===v||l(m)===f||(i.value=v,o==null||o.emit(`update:${t}`,v))}});return Object.defineProperty(d,"externalValue",{get:()=>c.value?e[t]:i.value}),d}const Mo="$vuetify.",Fo=(e,t)=>e.replace(/\{(\d+)\}/g,(n,l)=>String(t[+l])),$i=(e,t,n)=>function(l){for(var a=arguments.length,o=new Array(a>1?a-1:0),i=1;i<a;i++)o[i-1]=arguments[i];if(!l.startsWith(Mo))return Fo(l,o);const s=l.replace(Mo,""),u=e.value&&n.value[e.value],c=t.value&&n.value[t.value];let d=Ul(u,s,null);return d||(`${l}${e.value}`,d=Ul(c,s,null)),d||(d=l),typeof d!="string"&&(d=l),Fo(d,o)};function Oi(e,t){return(n,l)=>new Intl.NumberFormat([e.value,t.value],l).format(n)}function Fl(e,t,n){const l=ue(e,t,e[t]??n.value);return l.value=e[t]??n.value,Z(n,a=>{e[t]==null&&(l.value=n.value)}),l}function Mi(e){return t=>{const n=Fl(t,"locale",e.current),l=Fl(t,"fallback",e.fallback),a=Fl(t,"messages",e.messages);return{name:"vuetify",current:n,fallback:l,messages:a,t:$i(n,l,a),n:Oi(n,l),provide:Mi({current:n,fallback:l,messages:a})}}}function Lm(e){const t=K((e==null?void 0:e.locale)??"en"),n=K((e==null?void 0:e.fallback)??"en"),l=W({en:Em,...e==null?void 0:e.messages});return{name:"vuetify",current:t,fallback:n,messages:l,t:$i(t,n,l),n:Oi(t,n),provide:Mi({current:t,fallback:n,messages:l})}}const mn=Symbol.for("vuetify:locale");function $m(e){return e.name!=null}function Om(e){const t=e!=null&&e.adapter&&$m(e==null?void 0:e.adapter)?e==null?void 0:e.adapter:Lm(e),n=Fm(t,e);return{...t,...n}}function ct(){const e=_e(mn);if(!e)throw new Error("[Vuetify] Could not find injected locale instance");return e}function Mm(e){const t=_e(mn);if(!t)throw new Error("[Vuetify] Could not find injected locale instance");const n=t.provide(e),l=Nm(n,t.rtl,e),a={...n,...l};return Oe(mn,a),a}function Fm(e,t){const n=W((t==null?void 0:t.rtl)??Rm),l=g(()=>n.value[e.current.value]??!1);return{isRtl:l,rtl:n,rtlClasses:g(()=>`v-locale--is-${l.value?"rtl":"ltr"}`)}}function Nm(e,t,n){const l=g(()=>n.rtl??t.value[e.current.value]??!1);return{isRtl:l,rtl:t,rtlClasses:g(()=>`v-locale--is-${l.value?"rtl":"ltr"}`)}}function De(){const e=_e(mn);if(!e)throw new Error("[Vuetify] Could not find injected rtl instance");return{isRtl:e.isRtl,rtlClasses:e.rtlClasses}}const On=Symbol.for("vuetify:theme"),ye=E({theme:String},"theme"),Pn={defaultTheme:"light",variations:{colors:[],lighten:0,darken:0},themes:{light:{dark:!1,colors:{background:"#FFFFFF",surface:"#FFFFFF","surface-bright":"#FFFFFF","surface-variant":"#424242","on-surface-variant":"#EEEEEE",primary:"#6200EE","primary-darken-1":"#3700B3",secondary:"#03DAC6","secondary-darken-1":"#018786",error:"#B00020",info:"#2196F3",success:"#4CAF50",warning:"#FB8C00"},variables:{"border-color":"#000000","border-opacity":.12,"high-emphasis-opacity":.87,"medium-emphasis-opacity":.6,"disabled-opacity":.38,"idle-opacity":.04,"hover-opacity":.04,"focus-opacity":.12,"selected-opacity":.08,"activated-opacity":.12,"pressed-opacity":.12,"dragged-opacity":.08,"theme-kbd":"#212529","theme-on-kbd":"#FFFFFF","theme-code":"#F5F5F5","theme-on-code":"#000000"}},dark:{dark:!0,colors:{background:"#121212",surface:"#212121","surface-bright":"#ccbfd6","surface-variant":"#a3a3a3","on-surface-variant":"#424242",primary:"#BB86FC","primary-darken-1":"#3700B3",secondary:"#03DAC5","secondary-darken-1":"#03DAC5",error:"#CF6679",info:"#2196F3",success:"#4CAF50",warning:"#FB8C00"},variables:{"border-color":"#FFFFFF","border-opacity":.12,"high-emphasis-opacity":1,"medium-emphasis-opacity":.7,"disabled-opacity":.5,"idle-opacity":.1,"hover-opacity":.04,"focus-opacity":.12,"selected-opacity":.08,"activated-opacity":.12,"pressed-opacity":.16,"dragged-opacity":.08,"theme-kbd":"#212529","theme-on-kbd":"#FFFFFF","theme-code":"#343434","theme-on-code":"#CCCCCC"}}}};function Dm(){var n,l;let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Pn;if(!e)return{...Pn,isDisabled:!0};const t={};for(const[a,o]of Object.entries(e.themes??{})){const i=o.dark||a==="dark"?(n=Pn.themes)==null?void 0:n.dark:(l=Pn.themes)==null?void 0:l.light;t[a]=it(i,o)}return it(Pn,{...e,themes:t})}function zm(e){const t=Dm(e),n=W(t.defaultTheme),l=W(t.themes),a=g(()=>{const d={};for(const[f,v]of Object.entries(l.value)){const m=d[f]={...v,colors:{...v.colors}};if(t.variations)for(const h of t.variations.colors){const y=m.colors[h];if(y)for(const b of["lighten","darken"]){const p=b==="lighten"?fm:mm;for(const S of Ct(t.variations[b],1))m.colors[`${h}-${b}-${S}`]=Pi(p(st(y),S))}}for(const h of Object.keys(m.colors)){if(/^on-[a-z]/.test(h)||m.colors[`on-${h}`])continue;const y=`on-${h}`,b=st(m.colors[h]);m.colors[y]=Ei(b)}}return d}),o=g(()=>a.value[n.value]),i=g(()=>{const d=[];o.value.dark&&Ht(d,":root",["color-scheme: dark"]),Ht(d,":root",No(o.value));for(const[h,y]of Object.entries(a.value))Ht(d,`.v-theme--${h}`,[`color-scheme: ${y.dark?"dark":"normal"}`,...No(y)]);const f=[],v=[],m=new Set(Object.values(a.value).flatMap(h=>Object.keys(h.colors)));for(const h of m)/^on-[a-z]/.test(h)?Ht(v,`.${h}`,[`color: rgb(var(--v-theme-${h})) !important`]):(Ht(f,`.bg-${h}`,[`--v-theme-overlay-multiplier: var(--v-theme-${h}-overlay-multiplier)`,`background-color: rgb(var(--v-theme-${h})) !important`,`color: rgb(var(--v-theme-on-${h})) !important`]),Ht(v,`.text-${h}`,[`color: rgb(var(--v-theme-${h})) !important`]),Ht(v,`.border-${h}`,[`--v-border-color: var(--v-theme-${h})`]));return d.push(...f,...v),d.map((h,y)=>y===0?h:`    ${h}`).join("")});function s(){return{style:[{children:i.value,id:"vuetify-theme-stylesheet",nonce:t.cspNonce||!1}]}}function u(d){if(t.isDisabled)return;const f=d._context.provides.usehead;if(f)if(f.push){const v=f.push(s);Ce&&Z(i,()=>{v.patch(s)})}else Ce?(f.addHeadObjs(g(s)),tt(()=>f.updateDOM())):f.addHeadObjs(s());else{let m=function(){if(typeof document<"u"&&!v){const h=document.createElement("style");h.type="text/css",h.id="vuetify-theme-stylesheet",t.cspNonce&&h.setAttribute("nonce",t.cspNonce),v=h,document.head.appendChild(v)}v&&(v.innerHTML=i.value)},v=Ce?document.getElementById("vuetify-theme-stylesheet"):null;Ce?Z(i,m,{immediate:!0}):m()}}const c=g(()=>t.isDisabled?void 0:`v-theme--${n.value}`);return{install:u,isDisabled:t.isDisabled,name:n,themes:l,current:o,computedThemes:a,themeClasses:c,styles:i,global:{name:n,current:o}}}function be(e){Ne("provideTheme");const t=_e(On,null);if(!t)throw new Error("Could not find Vuetify theme injection");const n=g(()=>e.theme??t.name.value),l=g(()=>t.themes.value[n.value]),a=g(()=>t.isDisabled?void 0:`v-theme--${n.value}`),o={...t,name:n,current:l,themeClasses:a};return Oe(On,o),o}function Fi(){Ne("useTheme");const e=_e(On,null);if(!e)throw new Error("Could not find Vuetify theme injection");return e}function Ht(e,t,n){e.push(`${t} {
`,...n.map(l=>`  ${l};
`),`}
`)}function No(e){const t=e.dark?2:1,n=e.dark?1:2,l=[];for(const[a,o]of Object.entries(e.colors)){const i=st(o);l.push(`--v-theme-${a}: ${i.r},${i.g},${i.b}`),a.startsWith("on-")||l.push(`--v-theme-${a}-overlay-multiplier: ${ql(o)>.18?t:n}`)}for(const[a,o]of Object.entries(e.variables)){const i=typeof o=="string"&&o.startsWith("#")?st(o):void 0,s=i?`${i.r}, ${i.g}, ${i.b}`:void 0;l.push(`--v-${a}: ${s??o}`)}return l}const Ql={"001":1,AD:1,AE:6,AF:6,AG:0,AI:1,AL:1,AM:1,AN:1,AR:1,AS:0,AT:1,AU:1,AX:1,AZ:1,BA:1,BD:0,BE:1,BG:1,BH:6,BM:1,BN:1,BR:0,BS:0,BT:0,BW:0,BY:1,BZ:0,CA:0,CH:1,CL:1,CM:1,CN:1,CO:0,CR:1,CY:1,CZ:1,DE:1,DJ:6,DK:1,DM:0,DO:0,DZ:6,EC:1,EE:1,EG:6,ES:1,ET:0,FI:1,FJ:1,FO:1,FR:1,GB:1,"GB-alt-variant":0,GE:1,GF:1,GP:1,GR:1,GT:0,GU:0,HK:0,HN:0,HR:1,HU:1,ID:0,IE:1,IL:0,IN:0,IQ:6,IR:6,IS:1,IT:1,JM:0,JO:6,JP:0,KE:0,KG:1,KH:0,KR:0,KW:6,KZ:1,LA:0,LB:1,LI:1,LK:1,LT:1,LU:1,LV:1,LY:6,MC:1,MD:1,ME:1,MH:0,MK:1,MM:0,MN:1,MO:0,MQ:1,MT:0,MV:5,MX:0,MY:1,MZ:0,NI:0,NL:1,NO:1,NP:0,NZ:1,OM:6,PA:0,PE:0,PH:0,PK:0,PL:1,PR:0,PT:0,PY:0,QA:6,RE:1,RO:1,RS:1,RU:1,SA:0,SD:6,SE:1,SG:0,SI:1,SK:1,SM:1,SV:0,SY:6,TH:0,TJ:1,TM:1,TR:1,TT:0,TW:0,UA:1,UM:0,US:0,UY:1,UZ:1,VA:1,VE:0,VI:0,VN:1,WS:0,XK:1,YE:0,ZA:0,ZW:0};function Hm(e,t){const n=[];let l=[];const a=Ni(e),o=Di(e),i=(a.getDay()-Ql[t.slice(-2).toUpperCase()]+7)%7,s=(o.getDay()-Ql[t.slice(-2).toUpperCase()]+7)%7;for(let u=0;u<i;u++){const c=new Date(a);c.setDate(c.getDate()-(i-u)),l.push(c)}for(let u=1;u<=o.getDate();u++){const c=new Date(e.getFullYear(),e.getMonth(),u);l.push(c),l.length===7&&(n.push(l),l=[])}for(let u=1;u<7-s;u++){const c=new Date(o);c.setDate(c.getDate()+u),l.push(c)}return n.push(l),n}function Ni(e){return new Date(e.getFullYear(),e.getMonth(),1)}function Di(e){return new Date(e.getFullYear(),e.getMonth()+1,0)}function jm(e){const t=e.split("-").map(Number);return new Date(t[0],t[1]-1,t[2])}const Um=/([12]\d{3}-([1-9]|0[1-9]|1[0-2])-([1-9]|0[1-9]|[12]\d|3[01]))/;function Gm(e){if(e==null)return new Date;if(e instanceof Date)return e;if(typeof e=="string"){let t;if(Um.test(e))return jm(e);if(t=Date.parse(e),!isNaN(t))return new Date(t)}return null}const Do=new Date(2e3,0,2);function Wm(e){const t=Ql[e.slice(-2).toUpperCase()];return Ct(7).map(n=>{const l=new Date(Do);return l.setDate(Do.getDate()+t+n),new Intl.DateTimeFormat(e,{weekday:"narrow"}).format(l)})}function Ym(e,t,n){const l=new Date(e);let a={};switch(t){case"fullDateWithWeekday":a={weekday:"long",day:"numeric",month:"long",year:"numeric"};break;case"normalDateWithWeekday":a={weekday:"short",day:"numeric",month:"short"};break;case"keyboardDate":a={};break;case"monthAndDate":a={month:"long",day:"numeric"};break;case"monthAndYear":a={month:"long",year:"numeric"};break;case"dayOfMonth":a={day:"numeric"};break;case"shortDate":a={year:"numeric"};break;default:a={timeZone:"UTC",timeZoneName:"short"}}return new Intl.DateTimeFormat(n,a).format(l)}function Km(e,t){const n=new Date(e);return n.setDate(n.getDate()+t),n}function qm(e,t){const n=new Date(e);return n.setMonth(n.getMonth()+t),n}function Xm(e){return e.getFullYear()}function Zm(e){return e.getMonth()}function Jm(e){return new Date(e.getFullYear(),0,1)}function Qm(e){return new Date(e.getFullYear(),11,31)}function eh(e,t){return ea(e,t[0])&&nh(e,t[1])}function th(e){if(!e||e==null)return!1;const t=new Date(e);return t instanceof Date&&!isNaN(t.getTime())}function ea(e,t){return e.getTime()>t.getTime()}function nh(e,t){return e.getTime()<t.getTime()}function zo(e,t){return e.getTime()===t.getTime()}function lh(e,t){return e.getDate()===t.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function ah(e,t){return e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function oh(e,t,n){const l=new Date(e),a=new Date(t);return n==="month"?l.getMonth()-a.getMonth()+(l.getFullYear()-a.getFullYear())*12:Math.floor((l.getTime()-a.getTime())/(1e3*60*60*24))}function ih(e,t){const n=new Date(e);return n.setFullYear(t),n}function sh(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate())}function rh(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate(),23,59,59,999)}class uh{constructor(t){this.locale=t.locale}date(t){return Gm(t)}toJsDate(t){return t}addDays(t,n){return Km(t,n)}addMonths(t,n){return qm(t,n)}getWeekArray(t){return Hm(t,this.locale)}startOfMonth(t){return Ni(t)}endOfMonth(t){return Di(t)}format(t,n){return Ym(t,n,this.locale)}isEqual(t,n){return zo(t,n)}isValid(t){return th(t)}isWithinRange(t,n){return eh(t,n)}isAfter(t,n){return ea(t,n)}isBefore(t,n){return!ea(t,n)&&!zo(t,n)}isSameDay(t,n){return lh(t,n)}isSameMonth(t,n){return ah(t,n)}setYear(t,n){return ih(t,n)}getDiff(t,n,l){return oh(t,n,l)}getWeekdays(){return Wm(this.locale)}getYear(t){return Xm(t)}getMonth(t){return Zm(t)}startOfDay(t){return sh(t)}endOfDay(t){return rh(t)}startOfYear(t){return Jm(t)}endOfYear(t){return Qm(t)}}const Ho=Symbol.for("vuetify:date-adapter");function ch(e){return it({adapter:uh,locale:{af:"af-ZA",bg:"bg-BG",ca:"ca-ES",ckb:"",cs:"",de:"de-DE",el:"el-GR",en:"en-US",et:"et-EE",fa:"fa-IR",fi:"fi-FI",hr:"hr-HR",hu:"hu-HU",he:"he-IL",id:"id-ID",it:"it-IT",ja:"ja-JP",ko:"ko-KR",lv:"lv-LV",lt:"lt-LT",nl:"nl-NL",no:"nn-NO",pl:"pl-PL",pt:"pt-PT",ro:"ro-RO",ru:"ru-RU",sk:"sk-SK",sl:"sl-SI",srCyrl:"sr-SP",srLatn:"sr-SP",sv:"sv-SE",th:"th-TH",tr:"tr-TR",az:"az-AZ",uk:"uk-UA",vi:"vi-VN",zhHans:"zh-CN",zhHant:"zh-TW"}},e)}function kt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"content";const n=W(),l=W();if(Ce){const a=new ResizeObserver(o=>{e==null||e(o,a),o.length&&(t==="content"?l.value=o[0].contentRect:l.value=o[0].target.getBoundingClientRect())});nt(()=>{a.disconnect()}),Z(n,(o,i)=>{i&&(a.unobserve(Gl(i)),l.value=void 0),o&&a.observe(Gl(o))},{flush:"post"})}return{resizeRef:n,contentRect:Ca(l)}}const ml=Symbol.for("vuetify:layout"),zi=Symbol.for("vuetify:layout-item"),jo=1e3,Hi=E({overlaps:{type:Array,default:()=>[]},fullHeight:Boolean},"layout"),bn=E({name:{type:String},order:{type:[Number,String],default:0},absolute:Boolean},"layout-item");function dh(){const e=_e(ml);if(!e)throw new Error("[Vuetify] Could not find injected layout");return{getLayoutItem:e.getLayoutItem,mainRect:e.mainRect,mainStyles:e.mainStyles}}function pn(e){const t=_e(ml);if(!t)throw new Error("[Vuetify] Could not find injected layout");const n=e.id??`layout-item-${We()}`,l=Ne("useLayoutItem");Oe(zi,{id:n});const a=K(!1);$r(()=>a.value=!0),Or(()=>a.value=!1);const{layoutItemStyles:o,layoutItemScrimStyles:i}=t.register(l,{...e,active:g(()=>a.value?!1:e.active.value),id:n});return nt(()=>t.unregister(n)),{layoutItemStyles:o,layoutRect:t.layoutRect,layoutItemScrimStyles:i}}const vh=(e,t,n,l)=>{let a={top:0,left:0,right:0,bottom:0};const o=[{id:"",layer:{...a}}];for(const i of e){const s=t.get(i),u=n.get(i),c=l.get(i);if(!s||!u||!c)continue;const d={...a,[s.value]:parseInt(a[s.value],10)+(c.value?parseInt(u.value,10):0)};o.push({id:i,layer:d}),a=d}return o};function ji(e){const t=_e(ml,null),n=g(()=>t?t.rootZIndex.value-100:jo),l=W([]),a=ht(new Map),o=ht(new Map),i=ht(new Map),s=ht(new Map),u=ht(new Map),{resizeRef:c,contentRect:d}=kt(),f=g(()=>{const C=new Map,P=e.overlaps??[];for(const k of P.filter(w=>w.includes(":"))){const[w,T]=k.split(":");if(!l.value.includes(w)||!l.value.includes(T))continue;const A=a.get(w),B=a.get(T),R=o.get(w),M=o.get(T);!A||!B||!R||!M||(C.set(T,{position:A.value,amount:parseInt(R.value,10)}),C.set(w,{position:B.value,amount:-parseInt(M.value,10)}))}return C}),v=g(()=>{const C=[...new Set([...i.values()].map(k=>k.value))].sort((k,w)=>k-w),P=[];for(const k of C){const w=l.value.filter(T=>{var A;return((A=i.get(T))==null?void 0:A.value)===k});P.push(...w)}return vh(P,a,o,s)}),m=g(()=>!Array.from(u.values()).some(C=>C.value)),h=g(()=>v.value[v.value.length-1].layer),y=g(()=>({"--v-layout-left":J(h.value.left),"--v-layout-right":J(h.value.right),"--v-layout-top":J(h.value.top),"--v-layout-bottom":J(h.value.bottom),...m.value?void 0:{transition:"none"}})),b=g(()=>v.value.slice(1).map((C,P)=>{let{id:k}=C;const{layer:w}=v.value[P],T=o.get(k),A=a.get(k);return{id:k,...w,size:Number(T.value),position:A.value}})),p=C=>b.value.find(P=>P.id===C),S=Ne("createLayout"),x=K(!1);Je(()=>{x.value=!0}),Oe(ml,{register:(C,P)=>{let{id:k,order:w,position:T,layoutSize:A,elementSize:B,active:R,disableTransitions:M,absolute:X}=P;i.set(k,w),a.set(k,T),o.set(k,A),s.set(k,R),M&&u.set(k,M);const D=En(zi,S==null?void 0:S.vnode).indexOf(C);D>-1?l.value.splice(D,0,k):l.value.push(k);const O=g(()=>b.value.findIndex(oe=>oe.id===k)),G=g(()=>n.value+v.value.length*2-O.value*2),U=g(()=>{const oe=T.value==="left"||T.value==="right",re=T.value==="right",ve=T.value==="bottom",ge={[T.value]:0,zIndex:G.value,transform:`translate${oe?"X":"Y"}(${(R.value?0:-110)*(re||ve?-1:1)}%)`,position:X.value||n.value!==jo?"absolute":"fixed",...m.value?void 0:{transition:"none"}};if(!x.value)return ge;const N=b.value[O.value];if(!N)throw new Error(`[Vuetify] Could not find layout item "${k}"`);const me=f.value.get(k);return me&&(N[me.position]+=me.amount),{...ge,height:oe?`calc(100% - ${N.top}px - ${N.bottom}px)`:B.value?`${B.value}px`:void 0,left:re?void 0:`${N.left}px`,right:re?`${N.right}px`:void 0,top:T.value!=="bottom"?`${N.top}px`:void 0,bottom:T.value!=="top"?`${N.bottom}px`:void 0,width:oe?B.value?`${B.value}px`:void 0:`calc(100% - ${N.left}px - ${N.right}px)`}}),z=g(()=>({zIndex:G.value-1}));return{layoutItemStyles:U,layoutItemScrimStyles:z,zIndex:G}},unregister:C=>{i.delete(C),a.delete(C),o.delete(C),s.delete(C),u.delete(C),l.value=l.value.filter(P=>P!==C)},mainRect:h,mainStyles:y,getLayoutItem:p,items:b,layoutRect:d,rootZIndex:n});const I=g(()=>["v-layout",{"v-layout--full-height":e.fullHeight}]),V=g(()=>({zIndex:t?n.value:void 0,position:t?"relative":void 0,overflow:t?"hidden":void 0}));return{layoutClasses:I,layoutStyles:V,getLayoutItem:p,items:b,layoutRect:d,layoutRef:c}}function Ui(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const{blueprint:t,...n}=e,l=it(t,n),{aliases:a={},components:o={},directives:i={}}=l,s=Sm(l.defaults),u=Vm(l.display,l.ssr),c=zm(l.theme),d=Am(l.icons),f=Om(l.locale),v=ch(l.date);return{install:h=>{for(const y in i)h.directive(y,i[y]);for(const y in o)h.component(y,o[y]);for(const y in a)h.component(y,ut({...a[y],name:y,aliasName:a[y].name}));if(c.install(h),h.provide(fn,s),h.provide(Xl,u),h.provide(On,c),h.provide(Zl,d),h.provide(mn,f),h.provide(Ho,v),Ce&&l.ssr)if(h.$nuxt)h.$nuxt.hook("app:suspense:resolve",()=>{u.update()});else{const{mount:y}=h;h.mount=function(){const b=y(...arguments);return Ve(()=>u.update()),h.mount=y,b}}We.reset(),h.mixin({computed:{$vuetify(){return ht({defaults:rn.call(this,fn),display:rn.call(this,Xl),theme:rn.call(this,On),icons:rn.call(this,Zl),locale:rn.call(this,mn),date:rn.call(this,Ho)})}}})},defaults:s,display:u,theme:c,icons:d,locale:f,date:v}}const fh="3.3.19";Ui.version=fh;function rn(e){var l,a;const t=this.$,n=((l=t.parent)==null?void 0:l.provides)??((a=t.vnode.appContext)==null?void 0:a.provides);if(n&&e in n)return n[e]}const mh=E({...q(),...Hi({fullHeight:!0}),...ye()},"VApp"),hh=L()({name:"VApp",props:mh(),setup(e,t){let{slots:n}=t;const l=be(e),{layoutClasses:a,getLayoutItem:o,items:i,layoutRef:s}=ji(e),{rtlClasses:u}=De();return j(()=>{var c;return r("div",{ref:s,class:["v-application",l.themeClasses.value,a.value,u.value,e.class],style:[e.style]},[r("div",{class:"v-application__wrap"},[(c=n.default)==null?void 0:c.call(n)])])}),{getLayoutItem:o,items:i,theme:l}}});const ce=E({tag:{type:String,default:"div"}},"tag"),Gi=E({text:String,...q(),...ce()},"VToolbarTitle"),za=L()({name:"VToolbarTitle",props:Gi(),setup(e,t){let{slots:n}=t;return j(()=>{const l=!!(n.default||n.text||e.text);return r(e.tag,{class:["v-toolbar-title",e.class],style:e.style},{default:()=>{var a;return[l&&r("div",{class:"v-toolbar-title__placeholder"},[n.text?n.text():e.text,(a=n.default)==null?void 0:a.call(n)])]}})}),{}}}),gh=E({disabled:Boolean,group:Boolean,hideOnLeave:Boolean,leaveAbsolute:Boolean,mode:String,origin:String},"transition");function lt(e,t,n){return L()({name:e,props:gh({mode:n,origin:t}),setup(l,a){let{slots:o}=a;const i={onBeforeEnter(s){l.origin&&(s.style.transformOrigin=l.origin)},onLeave(s){if(l.leaveAbsolute){const{offsetTop:u,offsetLeft:c,offsetWidth:d,offsetHeight:f}=s;s._transitionInitialStyles={position:s.style.position,top:s.style.top,left:s.style.left,width:s.style.width,height:s.style.height},s.style.position="absolute",s.style.top=`${u}px`,s.style.left=`${c}px`,s.style.width=`${d}px`,s.style.height=`${f}px`}l.hideOnLeave&&s.style.setProperty("display","none","important")},onAfterLeave(s){if(l.leaveAbsolute&&(s!=null&&s._transitionInitialStyles)){const{position:u,top:c,left:d,width:f,height:v}=s._transitionInitialStyles;delete s._transitionInitialStyles,s.style.position=u||"",s.style.top=c||"",s.style.left=d||"",s.style.width=f||"",s.style.height=v||""}}};return()=>{const s=l.group?Mr:Et;return Jt(s,{name:l.disabled?"":e,css:!l.disabled,...l.group?void 0:{mode:l.mode},...l.disabled?{}:i},o.default)}}})}function Wi(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"in-out";return L()({name:e,props:{mode:{type:String,default:n},disabled:Boolean},setup(l,a){let{slots:o}=a;return()=>Jt(Et,{name:l.disabled?"":e,css:!l.disabled,...l.disabled?{}:t},o.default)}})}function Yi(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";const n=(arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1)?"width":"height",l=ci(`offset-${n}`);return{onBeforeEnter(i){i._parent=i.parentNode,i._initialStyle={transition:i.style.transition,overflow:i.style.overflow,[n]:i.style[n]}},onEnter(i){const s=i._initialStyle;i.style.setProperty("transition","none","important"),i.style.overflow="hidden";const u=`${i[l]}px`;i.style[n]="0",i.offsetHeight,i.style.transition=s.transition,e&&i._parent&&i._parent.classList.add(e),requestAnimationFrame(()=>{i.style[n]=u})},onAfterEnter:o,onEnterCancelled:o,onLeave(i){i._initialStyle={transition:"",overflow:i.style.overflow,[n]:i.style[n]},i.style.overflow="hidden",i.style[n]=`${i[l]}px`,i.offsetHeight,requestAnimationFrame(()=>i.style[n]="0")},onAfterLeave:a,onLeaveCancelled:a};function a(i){e&&i._parent&&i._parent.classList.remove(e),o(i)}function o(i){const s=i._initialStyle[n];i.style.overflow=i._initialStyle.overflow,s!=null&&(i.style[n]=s),delete i._initialStyle}}const yh=E({target:Object},"v-dialog-transition"),Sl=L()({name:"VDialogTransition",props:yh(),setup(e,t){let{slots:n}=t;const l={onBeforeEnter(a){a.style.pointerEvents="none",a.style.visibility="hidden"},async onEnter(a,o){var v;await new Promise(m=>requestAnimationFrame(m)),await new Promise(m=>requestAnimationFrame(m)),a.style.visibility="";const{x:i,y:s,sx:u,sy:c,speed:d}=Go(e.target,a),f=Ut(a,[{transform:`translate(${i}px, ${s}px) scale(${u}, ${c})`,opacity:0},{}],{duration:225*d,easing:gm});(v=Uo(a))==null||v.forEach(m=>{Ut(m,[{opacity:0},{opacity:0,offset:.33},{}],{duration:225*2*d,easing:$n})}),f.finished.then(()=>o())},onAfterEnter(a){a.style.removeProperty("pointer-events")},onBeforeLeave(a){a.style.pointerEvents="none"},async onLeave(a,o){var v;await new Promise(m=>requestAnimationFrame(m));const{x:i,y:s,sx:u,sy:c,speed:d}=Go(e.target,a);Ut(a,[{},{transform:`translate(${i}px, ${s}px) scale(${u}, ${c})`,opacity:0}],{duration:125*d,easing:ym}).finished.then(()=>o()),(v=Uo(a))==null||v.forEach(m=>{Ut(m,[{},{opacity:0,offset:.2},{opacity:0}],{duration:125*2*d,easing:$n})})},onAfterLeave(a){a.style.removeProperty("pointer-events")}};return()=>e.target?r(Et,Y({name:"dialog-transition"},l,{css:!1}),n):r(Et,{name:"dialog-transition"},n)}});function Uo(e){var n;const t=(n=e.querySelector(":scope > .v-card, :scope > .v-sheet, :scope > .v-list"))==null?void 0:n.children;return t&&[...t]}function Go(e,t){const n=e.getBoundingClientRect(),l=Ra(t),[a,o]=getComputedStyle(t).transformOrigin.split(" ").map(p=>parseFloat(p)),[i,s]=getComputedStyle(t).getPropertyValue("--v-overlay-anchor-origin").split(" ");let u=n.left+n.width/2;i==="left"||s==="left"?u-=n.width/2:(i==="right"||s==="right")&&(u+=n.width/2);let c=n.top+n.height/2;i==="top"||s==="top"?c-=n.height/2:(i==="bottom"||s==="bottom")&&(c+=n.height/2);const d=n.width/l.width,f=n.height/l.height,v=Math.max(1,d,f),m=d/v||0,h=f/v||0,y=l.width*l.height/(window.innerWidth*window.innerHeight),b=y>.12?Math.min(1.5,(y-.12)*10+1):1;return{x:u-(a+l.left),y:c-(o+l.top),sx:m,sy:h,speed:b}}const bh=lt("fab-transition","center center","out-in"),ph=lt("dialog-bottom-transition"),wh=lt("dialog-top-transition"),ta=lt("fade-transition"),Ha=lt("scale-transition"),Sh=lt("scroll-x-transition"),kh=lt("scroll-x-reverse-transition"),xh=lt("scroll-y-transition"),Ch=lt("scroll-y-reverse-transition"),Vh=lt("slide-x-transition"),_h=lt("slide-x-reverse-transition"),ja=lt("slide-y-transition"),Ih=lt("slide-y-reverse-transition"),kl=Wi("expand-transition",Yi()),Ua=Wi("expand-x-transition",Yi("",!0)),Th=E({defaults:Object,disabled:Boolean,reset:[Number,String],root:[Boolean,String],scoped:Boolean},"VDefaultsProvider"),we=L(!1)({name:"VDefaultsProvider",props:Th(),setup(e,t){let{slots:n}=t;const{defaults:l,disabled:a,reset:o,root:i,scoped:s}=ka(e);return $e(l,{reset:o,root:i,scoped:s,disabled:a}),()=>{var u;return(u=n.default)==null?void 0:u.call(n)}}});const dt=E({height:[Number,String],maxHeight:[Number,String],maxWidth:[Number,String],minHeight:[Number,String],minWidth:[Number,String],width:[Number,String]},"dimension");function vt(e){return{dimensionStyles:g(()=>({height:J(e.height),maxHeight:J(e.maxHeight),maxWidth:J(e.maxWidth),minHeight:J(e.minHeight),minWidth:J(e.minWidth),width:J(e.width)}))}}function Ph(e){return{aspectStyles:g(()=>{const t=Number(e.aspectRatio);return t?{paddingBottom:String(1/t*100)+"%"}:void 0})}}const Ki=E({aspectRatio:[String,Number],contentClass:String,inline:Boolean,...q(),...dt()},"VResponsive"),na=L()({name:"VResponsive",props:Ki(),setup(e,t){let{slots:n}=t;const{aspectStyles:l}=Ph(e),{dimensionStyles:a}=vt(e);return j(()=>{var o;return r("div",{class:["v-responsive",{"v-responsive--inline":e.inline},e.class],style:[a.value,e.style]},[r("div",{class:"v-responsive__sizer",style:l.value},null),(o=n.additional)==null?void 0:o.call(n),n.default&&r("div",{class:["v-responsive__content",e.contentClass]},[n.default()])])}),{}}}),Pt=E({transition:{type:[Boolean,String,Object],default:"fade-transition",validator:e=>e!==!0}},"transition"),gt=(e,t)=>{let{slots:n}=t;const{transition:l,disabled:a,...o}=e,{component:i=Et,...s}=typeof l=="object"?l:{};return Jt(i,Y(typeof l=="string"?{name:a?"":l}:s,o,{disabled:a}),n)};function Ah(e,t){if(!Pa)return;const n=t.modifiers||{},l=t.value,{handler:a,options:o}=typeof l=="object"?l:{handler:l,options:{}},i=new IntersectionObserver(function(){var f;let s=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],u=arguments.length>1?arguments[1]:void 0;const c=(f=e._observe)==null?void 0:f[t.instance.$.uid];if(!c)return;const d=s.some(v=>v.isIntersecting);a&&(!n.quiet||c.init)&&(!n.once||d||c.init)&&a(d,s,u),d&&n.once?qi(e,t):c.init=!0},o);e._observe=Object(e._observe),e._observe[t.instance.$.uid]={init:!1,observer:i},i.observe(e)}function qi(e,t){var l;const n=(l=e._observe)==null?void 0:l[t.instance.$.uid];n&&(n.observer.unobserve(e),delete e._observe[t.instance.$.uid])}const Gn={mounted:Ah,unmounted:qi},Xi=E({alt:String,cover:Boolean,eager:Boolean,gradient:String,lazySrc:String,options:{type:Object,default:()=>({root:void 0,rootMargin:void 0,threshold:void 0})},sizes:String,src:{type:[String,Object],default:""},srcset:String,...Ki(),...q(),...Pt()},"VImg"),qt=L()({name:"VImg",directives:{intersect:Gn},props:Xi(),emits:{loadstart:e=>!0,load:e=>!0,error:e=>!0},setup(e,t){let{emit:n,slots:l}=t;const a=K(""),o=W(),i=K(e.eager?"loading":"idle"),s=K(),u=K(),c=g(()=>e.src&&typeof e.src=="object"?{src:e.src.src,srcset:e.srcset||e.src.srcset,lazySrc:e.lazySrc||e.src.lazySrc,aspect:Number(e.aspectRatio||e.src.aspect||0)}:{src:e.src,srcset:e.srcset,lazySrc:e.lazySrc,aspect:Number(e.aspectRatio||0)}),d=g(()=>c.value.aspect||s.value/u.value||0);Z(()=>e.src,()=>{f(i.value!=="idle")}),Z(d,(k,w)=>{!k&&w&&o.value&&b(o.value)}),Va(()=>f());function f(k){if(!(e.eager&&k)&&!(Pa&&!k&&!e.eager)){if(i.value="loading",c.value.lazySrc){const w=new Image;w.src=c.value.lazySrc,b(w,null)}c.value.src&&Ve(()=>{var w,T;if(n("loadstart",((w=o.value)==null?void 0:w.currentSrc)||c.value.src),(T=o.value)!=null&&T.complete){if(o.value.naturalWidth||m(),i.value==="error")return;d.value||b(o.value,null),v()}else d.value||b(o.value),h()})}}function v(){var k;h(),i.value="loaded",n("load",((k=o.value)==null?void 0:k.currentSrc)||c.value.src)}function m(){var k;i.value="error",n("error",((k=o.value)==null?void 0:k.currentSrc)||c.value.src)}function h(){const k=o.value;k&&(a.value=k.currentSrc||k.src)}let y=-1;function b(k){let w=arguments.length>1&&arguments[1]!==void 0?arguments[1]:100;const T=()=>{clearTimeout(y);const{naturalHeight:A,naturalWidth:B}=k;A||B?(s.value=B,u.value=A):!k.complete&&i.value==="loading"&&w!=null?y=window.setTimeout(T,w):(k.currentSrc.endsWith(".svg")||k.currentSrc.startsWith("data:image/svg+xml"))&&(s.value=1,u.value=1)};T()}const p=g(()=>({"v-img__img--cover":e.cover,"v-img__img--contain":!e.cover})),S=()=>{var T;if(!c.value.src||i.value==="idle")return null;const k=r("img",{class:["v-img__img",p.value],src:c.value.src,srcset:c.value.srcset,alt:e.alt,sizes:e.sizes,ref:o,onLoad:v,onError:m},null),w=(T=l.sources)==null?void 0:T.call(l);return r(gt,{transition:e.transition,appear:!0},{default:()=>[ne(w?r("picture",{class:"v-img__picture"},[w,k]):k,[[Te,i.value==="loaded"]])]})},x=()=>r(gt,{transition:e.transition},{default:()=>[c.value.lazySrc&&i.value!=="loaded"&&r("img",{class:["v-img__img","v-img__img--preload",p.value],src:c.value.lazySrc,alt:e.alt},null)]}),I=()=>l.placeholder?r(gt,{transition:e.transition,appear:!0},{default:()=>[(i.value==="loading"||i.value==="error"&&!l.error)&&r("div",{class:"v-img__placeholder"},[l.placeholder()])]}):null,V=()=>l.error?r(gt,{transition:e.transition,appear:!0},{default:()=>[i.value==="error"&&r("div",{class:"v-img__error"},[l.error()])]}):null,C=()=>e.gradient?r("div",{class:"v-img__gradient",style:{backgroundImage:`linear-gradient(${e.gradient})`}},null):null,P=K(!1);{const k=Z(d,w=>{w&&(requestAnimationFrame(()=>{requestAnimationFrame(()=>{P.value=!0})}),k())})}return j(()=>{const[k]=na.filterProps(e);return ne(r(na,Y({class:["v-img",{"v-img--booting":!P.value},e.class],style:[{width:J(e.width==="auto"?s.value:e.width)},e.style]},k,{aspectRatio:d.value,"aria-label":e.alt,role:e.alt?"img":void 0}),{additional:()=>r(ae,null,[r(S,null,null),r(x,null,null),r(C,null,null),r(I,null,null),r(V,null,null)]),default:l.default}),[[Ze("intersect"),{handler:f,options:e.options},null,{once:!0}]])}),{currentSrc:a,image:o,state:i,naturalWidth:s,naturalHeight:u}}}),at=E({border:[Boolean,Number,String]},"border");function ft(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{borderClasses:g(()=>{const l=jn(e)?e.value:e.border,a=[];if(l===!0||l==="")a.push(`${t}--border`);else if(typeof l=="string"||l===0)for(const o of String(l).split(" "))a.push(`border-${o}`);return a})}}function Ga(e){return Ba(()=>{const t=[],n={};if(e.value.background)if(Ao(e.value.background)){if(n.backgroundColor=e.value.background,!e.value.text){const l=st(e.value.background);if(l.a==null||l.a===1){const a=Ei(l);n.color=a,n.caretColor=a}}}else t.push(`bg-${e.value.background}`);return e.value.text&&(Ao(e.value.text)?(n.color=e.value.text,n.caretColor=e.value.text):t.push(`text-${e.value.text}`)),{colorClasses:t,colorStyles:n}})}function Ge(e,t){const n=g(()=>({text:jn(e)?e.value:t?e[t]:null})),{colorClasses:l,colorStyles:a}=Ga(n);return{textColorClasses:l,textColorStyles:a}}function Ee(e,t){const n=g(()=>({background:jn(e)?e.value:t?e[t]:null})),{colorClasses:l,colorStyles:a}=Ga(n);return{backgroundColorClasses:l,backgroundColorStyles:a}}const Me=E({elevation:{type:[Number,String],validator(e){const t=parseInt(e);return!isNaN(t)&&t>=0&&t<=24}}},"elevation");function He(e){return{elevationClasses:g(()=>{const n=jn(e)?e.value:e.elevation,l=[];return n==null||l.push(`elevation-${n}`),l})}}const Pe=E({rounded:{type:[Boolean,Number,String],default:void 0}},"rounded");function Be(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{roundedClasses:g(()=>{const l=jn(e)?e.value:e.rounded,a=[];if(l===!0||l==="")a.push(`${t}--rounded`);else if(typeof l=="string"||l===0)for(const o of String(l).split(" "))a.push(`rounded-${o}`);return a})}}const Bh=[null,"prominent","default","comfortable","compact"],Zi=E({absolute:Boolean,collapse:Boolean,color:String,density:{type:String,default:"default",validator:e=>Bh.includes(e)},extended:Boolean,extensionHeight:{type:[Number,String],default:48},flat:Boolean,floating:Boolean,height:{type:[Number,String],default:64},image:String,title:String,...at(),...q(),...Me(),...Pe(),...ce({tag:"header"}),...ye()},"VToolbar"),la=L()({name:"VToolbar",props:Zi(),setup(e,t){var m;let{slots:n}=t;const{backgroundColorClasses:l,backgroundColorStyles:a}=Ee(F(e,"color")),{borderClasses:o}=ft(e),{elevationClasses:i}=He(e),{roundedClasses:s}=Be(e),{themeClasses:u}=be(e),{rtlClasses:c}=De(),d=K(!!(e.extended||(m=n.extension)!=null&&m.call(n))),f=g(()=>parseInt(Number(e.height)+(e.density==="prominent"?Number(e.height):0)-(e.density==="comfortable"?8:0)-(e.density==="compact"?16:0),10)),v=g(()=>d.value?parseInt(Number(e.extensionHeight)+(e.density==="prominent"?Number(e.extensionHeight):0)-(e.density==="comfortable"?4:0)-(e.density==="compact"?8:0),10):0);return $e({VBtn:{variant:"text"}}),j(()=>{var p;const h=!!(e.title||n.title),y=!!(n.image||e.image),b=(p=n.extension)==null?void 0:p.call(n);return d.value=!!(e.extended||b),r(e.tag,{class:["v-toolbar",{"v-toolbar--absolute":e.absolute,"v-toolbar--collapse":e.collapse,"v-toolbar--flat":e.flat,"v-toolbar--floating":e.floating,[`v-toolbar--density-${e.density}`]:!0},l.value,o.value,i.value,s.value,u.value,c.value,e.class],style:[a.value,e.style]},{default:()=>[y&&r("div",{key:"image",class:"v-toolbar__image"},[n.image?r(we,{key:"image-defaults",disabled:!e.image,defaults:{VImg:{cover:!0,src:e.image}}},n.image):r(qt,{key:"image-img",cover:!0,src:e.image},null)]),r(we,{defaults:{VTabs:{height:J(f.value)}}},{default:()=>{var S,x,I;return[r("div",{class:"v-toolbar__content",style:{height:J(f.value)}},[n.prepend&&r("div",{class:"v-toolbar__prepend"},[(S=n.prepend)==null?void 0:S.call(n)]),h&&r(za,{key:"title",text:e.title},{text:n.title}),(x=n.default)==null?void 0:x.call(n),n.append&&r("div",{class:"v-toolbar__append"},[(I=n.append)==null?void 0:I.call(n)])])]}}),r(we,{defaults:{VTabs:{height:J(v.value)}}},{default:()=>[r(kl,null,{default:()=>[d.value&&r("div",{class:"v-toolbar__extension",style:{height:J(v.value)}},[b])]})]})]})}),{contentHeight:f,extensionHeight:v}}}),Eh=E({scrollTarget:{type:String},scrollThreshold:{type:[String,Number],default:300}},"scroll");function Rh(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};const{canScroll:n}=t;let l=0;const a=W(null),o=K(0),i=K(0),s=K(0),u=K(!1),c=K(!1),d=g(()=>Number(e.scrollThreshold)),f=g(()=>Ue((d.value-o.value)/d.value||0)),v=()=>{const m=a.value;!m||n&&!n.value||(l=o.value,o.value="window"in m?m.pageYOffset:m.scrollTop,c.value=o.value<l,s.value=Math.abs(o.value-d.value))};return Z(c,()=>{i.value=i.value||o.value}),Z(u,()=>{i.value=0}),Je(()=>{Z(()=>e.scrollTarget,m=>{var y;const h=m?document.querySelector(m):window;h&&h!==a.value&&((y=a.value)==null||y.removeEventListener("scroll",v),a.value=h,a.value.addEventListener("scroll",v,{passive:!0}))},{immediate:!0})}),nt(()=>{var m;(m=a.value)==null||m.removeEventListener("scroll",v)}),n&&Z(n,v,{immediate:!0}),{scrollThreshold:d,currentScroll:o,currentThreshold:s,isScrollActive:u,scrollRatio:f,isScrollingUp:c,savedScroll:i}}function tn(){const e=K(!1);return Je(()=>{window.requestAnimationFrame(()=>{e.value=!0})}),{ssrBootStyles:g(()=>e.value?void 0:{transition:"none !important"}),isBooted:Ca(e)}}const Lh=E({scrollBehavior:String,modelValue:{type:Boolean,default:!0},location:{type:String,default:"top",validator:e=>["top","bottom"].includes(e)},...Zi(),...bn(),...Eh(),height:{type:[Number,String],default:64}},"VAppBar"),$h=L()({name:"VAppBar",props:Lh(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=W(),a=ue(e,"modelValue"),o=g(()=>{var S;const p=new Set(((S=e.scrollBehavior)==null?void 0:S.split(" "))??[]);return{hide:p.has("hide"),inverted:p.has("inverted"),collapse:p.has("collapse"),elevate:p.has("elevate"),fadeImage:p.has("fade-image")}}),i=g(()=>{const p=o.value;return p.hide||p.inverted||p.collapse||p.elevate||p.fadeImage||!a.value}),{currentScroll:s,scrollThreshold:u,isScrollingUp:c,scrollRatio:d}=Rh(e,{canScroll:i}),f=g(()=>e.collapse||o.value.collapse&&(o.value.inverted?d.value>0:d.value===0)),v=g(()=>e.flat||o.value.elevate&&(o.value.inverted?s.value>0:s.value===0)),m=g(()=>o.value.fadeImage?o.value.inverted?1-d.value:d.value:void 0),h=g(()=>{var x,I;if(o.value.hide&&o.value.inverted)return 0;const p=((x=l.value)==null?void 0:x.contentHeight)??0,S=((I=l.value)==null?void 0:I.extensionHeight)??0;return p+S});Rt(g(()=>!!e.scrollBehavior),()=>{tt(()=>{o.value.hide?o.value.inverted?a.value=s.value>u.value:a.value=c.value||s.value<u.value:a.value=!0})});const{ssrBootStyles:y}=tn(),{layoutItemStyles:b}=pn({id:e.name,order:g(()=>parseInt(e.order,10)),position:F(e,"location"),layoutSize:h,elementSize:K(void 0),active:a,absolute:F(e,"absolute")});return j(()=>{const[p]=la.filterProps(e);return r(la,Y({ref:l,class:["v-app-bar",{"v-app-bar--bottom":e.location==="bottom"},e.class],style:[{...b.value,"--v-toolbar-image-opacity":m.value,height:void 0,...y.value},e.style]},p,{collapse:f.value,flat:v.value}),n)}),{}}});const Oh=[null,"default","comfortable","compact"],Fe=E({density:{type:String,default:"default",validator:e=>Oh.includes(e)}},"density");function Ye(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{densityClasses:g(()=>`${t}--density-${e.density}`)}}const Mh=["elevated","flat","tonal","outlined","text","plain"];function nn(e,t){return r(ae,null,[e&&r("span",{key:"overlay",class:`${t}__overlay`},null),r("span",{key:"underlay",class:`${t}__underlay`},null)])}const mt=E({color:String,variant:{type:String,default:"elevated",validator:e=>Mh.includes(e)}},"variant");function ln(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();const n=g(()=>{const{variant:o}=ot(e);return`${t}--variant-${o}`}),{colorClasses:l,colorStyles:a}=Ga(g(()=>{const{variant:o,color:i}=ot(e);return{[["elevated","flat"].includes(o)?"background":"text"]:i}}));return{colorClasses:l,colorStyles:a,variantClasses:n}}const Ji=E({divided:Boolean,...at(),...q(),...Fe(),...Me(),...Pe(),...ce(),...ye(),...mt()},"VBtnGroup"),aa=L()({name:"VBtnGroup",props:Ji(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=be(e),{densityClasses:a}=Ye(e),{borderClasses:o}=ft(e),{elevationClasses:i}=He(e),{roundedClasses:s}=Be(e);$e({VBtn:{height:"auto",color:F(e,"color"),density:F(e,"density"),flat:!0,variant:F(e,"variant")}}),j(()=>r(e.tag,{class:["v-btn-group",{"v-btn-group--divided":e.divided},l.value,o.value,a.value,i.value,s.value,e.class],style:e.style},n))}}),wn=E({modelValue:{type:null,default:void 0},multiple:Boolean,mandatory:[Boolean,String],max:Number,selectedClass:String,disabled:Boolean},"group"),Sn=E({value:null,disabled:Boolean,selectedClass:String},"group-item");function kn(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;const l=Ne("useGroupItem");if(!l)throw new Error("[Vuetify] useGroupItem composable must be used inside a component setup function");const a=We();Oe(Symbol.for(`${t.description}:id`),a);const o=_e(t,null);if(!o){if(!n)return o;throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${t.description}`)}const i=F(e,"value"),s=g(()=>!!(o.disabled.value||e.disabled));o.register({id:a,value:i,disabled:s},l),nt(()=>{o.unregister(a)});const u=g(()=>o.isSelected(a)),c=g(()=>u.value&&[o.selectedClass.value,e.selectedClass]);return Z(u,d=>{l.emit("group:selected",{value:d})}),{id:a,isSelected:u,toggle:()=>o.select(a,!u.value),select:d=>o.select(a,d),selectedClass:c,value:i,disabled:s,group:o}}function an(e,t){let n=!1;const l=ht([]),a=ue(e,"modelValue",[],v=>v==null?[]:Qi(l,et(v)),v=>{const m=Nh(l,v);return e.multiple?m:m[0]}),o=Ne("useGroup");function i(v,m){const h=v,y=Symbol.for(`${t.description}:id`),p=En(y,o==null?void 0:o.vnode).indexOf(m);p>-1?l.splice(p,0,h):l.push(h)}function s(v){if(n)return;u();const m=l.findIndex(h=>h.id===v);l.splice(m,1)}function u(){const v=l.find(m=>!m.disabled);v&&e.mandatory==="force"&&!a.value.length&&(a.value=[v.id])}Je(()=>{u()}),nt(()=>{n=!0});function c(v,m){const h=l.find(y=>y.id===v);if(!(m&&(h!=null&&h.disabled)))if(e.multiple){const y=a.value.slice(),b=y.findIndex(S=>S===v),p=~b;if(m=m??!p,p&&e.mandatory&&y.length<=1||!p&&e.max!=null&&y.length+1>e.max)return;b<0&&m?y.push(v):b>=0&&!m&&y.splice(b,1),a.value=y}else{const y=a.value.includes(v);if(e.mandatory&&y)return;a.value=m??!y?[v]:[]}}function d(v){if(e.multiple,a.value.length){const m=a.value[0],h=l.findIndex(p=>p.id===m);let y=(h+v)%l.length,b=l[y];for(;b.disabled&&y!==h;)y=(y+v)%l.length,b=l[y];if(b.disabled)return;a.value=[l[y].id]}else{const m=l.find(h=>!h.disabled);m&&(a.value=[m.id])}}const f={register:i,unregister:s,selected:a,select:c,disabled:F(e,"disabled"),prev:()=>d(l.length-1),next:()=>d(1),isSelected:v=>a.value.includes(v),selectedClass:g(()=>e.selectedClass),items:g(()=>l),getItemIndex:v=>Fh(l,v)};return Oe(t,f),f}function Fh(e,t){const n=Qi(e,[t]);return n.length?e.findIndex(l=>l.id===n[0]):-1}function Qi(e,t){const n=[];return t.forEach(l=>{const a=e.find(i=>yn(l,i.value)),o=e[l];(a==null?void 0:a.value)!=null?n.push(a.id):o!=null&&n.push(o.id)}),n}function Nh(e,t){const n=[];return t.forEach(l=>{const a=e.findIndex(o=>o.id===l);if(~a){const o=e[a];n.push(o.value!=null?o.value:a)}}),n}const Wa=Symbol.for("vuetify:v-btn-toggle"),Dh=E({...Ji(),...wn()},"VBtnToggle"),zh=L()({name:"VBtnToggle",props:Dh(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{isSelected:l,next:a,prev:o,select:i,selected:s}=an(e,Wa);return j(()=>{const[u]=aa.filterProps(e);return r(aa,Y({class:["v-btn-toggle",e.class]},u,{style:e.style}),{default:()=>{var c;return[(c=n.default)==null?void 0:c.call(n,{isSelected:l,next:a,prev:o,select:i,selected:s})]}})}),{next:a,prev:o,select:i}}});const Hh=["x-small","small","default","large","x-large"],At=E({size:{type:[String,Number],default:"default"}},"size");function xn(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return Ba(()=>{let n,l;return cl(Hh,e.size)?n=`${t}--size-${e.size}`:e.size&&(l={width:J(e.size),height:J(e.size)}),{sizeClasses:n,sizeStyles:l}})}const jh=E({color:String,start:Boolean,end:Boolean,icon:se,...q(),...At(),...ce({tag:"i"}),...ye()},"VIcon"),ke=L()({name:"VIcon",props:jh(),setup(e,t){let{attrs:n,slots:l}=t;const a=W(),{themeClasses:o}=be(e),{iconData:i}=Bm(g(()=>a.value||e.icon)),{sizeClasses:s}=xn(e),{textColorClasses:u,textColorStyles:c}=Ge(F(e,"color"));return j(()=>{var f,v;const d=(f=l.default)==null?void 0:f.call(l);return d&&(a.value=(v=bi(d).filter(m=>m.type===Fr&&m.children&&typeof m.children=="string")[0])==null?void 0:v.children),r(i.value.component,{tag:e.tag,icon:i.value.icon,class:["v-icon","notranslate",o.value,s.value,u.value,{"v-icon--clickable":!!n.onClick,"v-icon--start":e.start,"v-icon--end":e.end},e.class],style:[s.value?void 0:{fontSize:J(e.size),height:J(e.size),width:J(e.size)},c.value,e.style],role:n.onClick?"button":void 0,"aria-hidden":!n.onClick},{default:()=>[d]})}),{}}});function Ya(e,t){const n=W(),l=K(!1);if(Pa){const a=new IntersectionObserver(o=>{e==null||e(o,a),l.value=!!o.find(i=>i.isIntersecting)},t);nt(()=>{a.disconnect()}),Z(n,(o,i)=>{i&&(a.unobserve(i),l.value=!1),o&&a.observe(o)},{flush:"post"})}return{intersectionRef:n,isIntersecting:l}}const Uh=E({bgColor:String,color:String,indeterminate:[Boolean,String],modelValue:{type:[Number,String],default:0},rotate:{type:[Number,String],default:0},width:{type:[Number,String],default:4},...q(),...At(),...ce({tag:"div"}),...ye()},"VProgressCircular"),Ka=L()({name:"VProgressCircular",props:Uh(),setup(e,t){let{slots:n}=t;const l=20,a=2*Math.PI*l,o=W(),{themeClasses:i}=be(e),{sizeClasses:s,sizeStyles:u}=xn(e),{textColorClasses:c,textColorStyles:d}=Ge(F(e,"color")),{textColorClasses:f,textColorStyles:v}=Ge(F(e,"bgColor")),{intersectionRef:m,isIntersecting:h}=Ya(),{resizeRef:y,contentRect:b}=kt(),p=g(()=>Math.max(0,Math.min(100,parseFloat(e.modelValue)))),S=g(()=>Number(e.width)),x=g(()=>u.value?Number(e.size):b.value?b.value.width:Math.max(S.value,32)),I=g(()=>l/(1-S.value/x.value)*2),V=g(()=>S.value/x.value*I.value),C=g(()=>J((100-p.value)/100*a));return tt(()=>{m.value=o.value,y.value=o.value}),j(()=>r(e.tag,{ref:o,class:["v-progress-circular",{"v-progress-circular--indeterminate":!!e.indeterminate,"v-progress-circular--visible":h.value,"v-progress-circular--disable-shrink":e.indeterminate==="disable-shrink"},i.value,s.value,c.value,e.class],style:[u.value,d.value,e.style],role:"progressbar","aria-valuemin":"0","aria-valuemax":"100","aria-valuenow":e.indeterminate?void 0:p.value},{default:()=>[r("svg",{style:{transform:`rotate(calc(-90deg + ${Number(e.rotate)}deg))`},xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${I.value} ${I.value}`},[r("circle",{class:["v-progress-circular__underlay",f.value],style:v.value,fill:"transparent",cx:"50%",cy:"50%",r:l,"stroke-width":V.value,"stroke-dasharray":a,"stroke-dashoffset":0},null),r("circle",{class:"v-progress-circular__overlay",fill:"transparent",cx:"50%",cy:"50%",r:l,"stroke-width":V.value,"stroke-dasharray":a,"stroke-dashoffset":C.value},null)]),n.default&&r("div",{class:"v-progress-circular__content"},[n.default({value:p.value})])]})),{}}});const Wo={center:"center",top:"bottom",bottom:"top",left:"right",right:"left"},Ot=E({location:String},"location");function Mt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,n=arguments.length>2?arguments[2]:void 0;const{isRtl:l}=De();return{locationStyles:g(()=>{if(!e.location)return{};const{side:o,align:i}=Yl(e.location.split(" ").length>1?e.location:`${e.location} center`,l.value);function s(c){return n?n(c):0}const u={};return o!=="center"&&(t?u[Wo[o]]=`calc(100% - ${s(o)}px)`:u[o]=0),i!=="center"?t?u[Wo[i]]=`calc(100% - ${s(i)}px)`:u[i]=0:(o==="center"?u.top=u.left="50%":u[{top:"left",bottom:"left",left:"top",right:"top"}[o]]="50%",u.transform={top:"translateX(-50%)",bottom:"translateX(-50%)",left:"translateY(-50%)",right:"translateY(-50%)",center:"translate(-50%, -50%)"}[o]),u})}}const Gh=E({absolute:Boolean,active:{type:Boolean,default:!0},bgColor:String,bgOpacity:[Number,String],bufferValue:{type:[Number,String],default:0},clickable:Boolean,color:String,height:{type:[Number,String],default:4},indeterminate:Boolean,max:{type:[Number,String],default:100},modelValue:{type:[Number,String],default:0},reverse:Boolean,stream:Boolean,striped:Boolean,roundedBar:Boolean,...q(),...Ot({location:"top"}),...Pe(),...ce(),...ye()},"VProgressLinear"),qa=L()({name:"VProgressLinear",props:Gh(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{isRtl:a,rtlClasses:o}=De(),{themeClasses:i}=be(e),{locationStyles:s}=Mt(e),{textColorClasses:u,textColorStyles:c}=Ge(e,"color"),{backgroundColorClasses:d,backgroundColorStyles:f}=Ee(g(()=>e.bgColor||e.color)),{backgroundColorClasses:v,backgroundColorStyles:m}=Ee(e,"color"),{roundedClasses:h}=Be(e),{intersectionRef:y,isIntersecting:b}=Ya(),p=g(()=>parseInt(e.max,10)),S=g(()=>parseInt(e.height,10)),x=g(()=>parseFloat(e.bufferValue)/p.value*100),I=g(()=>parseFloat(l.value)/p.value*100),V=g(()=>a.value!==e.reverse),C=g(()=>e.indeterminate?"fade-transition":"slide-x-transition"),P=g(()=>e.bgOpacity==null?e.bgOpacity:parseFloat(e.bgOpacity));function k(w){if(!y.value)return;const{left:T,right:A,width:B}=y.value.getBoundingClientRect(),R=V.value?B-w.clientX+(A-B):w.clientX-T;l.value=Math.round(R/B*p.value)}return j(()=>r(e.tag,{ref:y,class:["v-progress-linear",{"v-progress-linear--absolute":e.absolute,"v-progress-linear--active":e.active&&b.value,"v-progress-linear--reverse":V.value,"v-progress-linear--rounded":e.rounded,"v-progress-linear--rounded-bar":e.roundedBar,"v-progress-linear--striped":e.striped},h.value,i.value,o.value,e.class],style:[{bottom:e.location==="bottom"?0:void 0,top:e.location==="top"?0:void 0,height:e.active?J(S.value):0,"--v-progress-linear-height":J(S.value),...s.value},e.style],role:"progressbar","aria-hidden":e.active?"false":"true","aria-valuemin":"0","aria-valuemax":e.max,"aria-valuenow":e.indeterminate?void 0:I.value,onClick:e.clickable&&k},{default:()=>[e.stream&&r("div",{key:"stream",class:["v-progress-linear__stream",u.value],style:{...c.value,[V.value?"left":"right"]:J(-S.value),borderTop:`${J(S.value/2)} dotted`,opacity:P.value,top:`calc(50% - ${J(S.value/4)})`,width:J(100-x.value,"%"),"--v-progress-linear-stream-to":J(S.value*(V.value?1:-1))}},null),r("div",{class:["v-progress-linear__background",d.value],style:[f.value,{opacity:P.value,width:J(e.stream?x.value:100,"%")}]},null),r(Et,{name:C.value},{default:()=>[e.indeterminate?r("div",{class:"v-progress-linear__indeterminate"},[["long","short"].map(w=>r("div",{key:w,class:["v-progress-linear__indeterminate",w,v.value],style:m.value},null))]):r("div",{class:["v-progress-linear__determinate",v.value],style:[m.value,{width:J(I.value,"%")}]},null)]}),n.default&&r("div",{class:"v-progress-linear__content"},[n.default({value:I.value,buffer:x.value})])]})),{}}}),Xa=E({loading:[Boolean,String]},"loader");function xl(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{loaderClasses:g(()=>({[`${t}--loading`]:e.loading}))}}function Za(e,t){var l;let{slots:n}=t;return r("div",{class:`${e.name}__loader`},[((l=n.default)==null?void 0:l.call(n,{color:e.color,isActive:e.active}))||r(qa,{active:e.active,color:e.color,height:"2",indeterminate:!0},null)])}const Wh=["static","relative","fixed","absolute","sticky"],Cn=E({position:{type:String,validator:e=>Wh.includes(e)}},"position");function Vn(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{positionClasses:g(()=>e.position?`${t}--${e.position}`:void 0)}}function es(){var e,t;return(t=(e=Ne("useRouter"))==null?void 0:e.proxy)==null?void 0:t.$router}function Wn(e,t){const n=Nr("RouterLink"),l=g(()=>!!(e.href||e.to)),a=g(()=>(l==null?void 0:l.value)||bo(t,"click")||bo(e,"click"));if(typeof n=="string")return{isLink:l,isClickable:a,href:F(e,"href")};const o=e.to?n.useLink(e):void 0;return{isLink:l,isClickable:a,route:o==null?void 0:o.route,navigate:o==null?void 0:o.navigate,isActive:o&&g(()=>{var i,s;return e.exact?(i=o.isExactActive)==null?void 0:i.value:(s=o.isActive)==null?void 0:s.value}),href:g(()=>e.to?o==null?void 0:o.route.value.href:e.href)}}const Yn=E({href:String,replace:Boolean,to:[String,Object],exact:Boolean},"router");let Nl=!1;function Yh(e,t){let n=!1,l,a;Ce&&(Ve(()=>{window.addEventListener("popstate",o),l=e==null?void 0:e.beforeEach((i,s,u)=>{Nl?n?t(u):u():setTimeout(()=>n?t(u):u()),Nl=!0}),a=e==null?void 0:e.afterEach(()=>{Nl=!1})}),Xe(()=>{window.removeEventListener("popstate",o),l==null||l(),a==null||a()}));function o(i){var s;(s=i.state)!=null&&s.replaced||(n=!0,setTimeout(()=>n=!1))}}function Kh(e,t){Z(()=>{var n;return(n=e.isActive)==null?void 0:n.value},n=>{e.isLink.value&&n&&t&&Ve(()=>{t(!0)})},{immediate:!0})}const oa=Symbol("rippleStop"),qh=80;function Yo(e,t){e.style.transform=t,e.style.webkitTransform=t}function ia(e){return e.constructor.name==="TouchEvent"}function ts(e){return e.constructor.name==="KeyboardEvent"}const Xh=function(e,t){var f;let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},l=0,a=0;if(!ts(e)){const v=t.getBoundingClientRect(),m=ia(e)?e.touches[e.touches.length-1]:e;l=m.clientX-v.left,a=m.clientY-v.top}let o=0,i=.3;(f=t._ripple)!=null&&f.circle?(i=.15,o=t.clientWidth/2,o=n.center?o:o+Math.sqrt((l-o)**2+(a-o)**2)/4):o=Math.sqrt(t.clientWidth**2+t.clientHeight**2)/2;const s=`${(t.clientWidth-o*2)/2}px`,u=`${(t.clientHeight-o*2)/2}px`,c=n.center?s:`${l-o}px`,d=n.center?u:`${a-o}px`;return{radius:o,scale:i,x:c,y:d,centerX:s,centerY:u}},hl={show(e,t){var m;let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};if(!((m=t==null?void 0:t._ripple)!=null&&m.enabled))return;const l=document.createElement("span"),a=document.createElement("span");l.appendChild(a),l.className="v-ripple__container",n.class&&(l.className+=` ${n.class}`);const{radius:o,scale:i,x:s,y:u,centerX:c,centerY:d}=Xh(e,t,n),f=`${o*2}px`;a.className="v-ripple__animation",a.style.width=f,a.style.height=f,t.appendChild(l);const v=window.getComputedStyle(t);v&&v.position==="static"&&(t.style.position="relative",t.dataset.previousPosition="static"),a.classList.add("v-ripple__animation--enter"),a.classList.add("v-ripple__animation--visible"),Yo(a,`translate(${s}, ${u}) scale3d(${i},${i},${i})`),a.dataset.activated=String(performance.now()),setTimeout(()=>{a.classList.remove("v-ripple__animation--enter"),a.classList.add("v-ripple__animation--in"),Yo(a,`translate(${c}, ${d}) scale3d(1,1,1)`)},0)},hide(e){var o;if(!((o=e==null?void 0:e._ripple)!=null&&o.enabled))return;const t=e.getElementsByClassName("v-ripple__animation");if(t.length===0)return;const n=t[t.length-1];if(n.dataset.isHiding)return;n.dataset.isHiding="true";const l=performance.now()-Number(n.dataset.activated),a=Math.max(250-l,0);setTimeout(()=>{n.classList.remove("v-ripple__animation--in"),n.classList.add("v-ripple__animation--out"),setTimeout(()=>{var s;e.getElementsByClassName("v-ripple__animation").length===1&&e.dataset.previousPosition&&(e.style.position=e.dataset.previousPosition,delete e.dataset.previousPosition),((s=n.parentNode)==null?void 0:s.parentNode)===e&&e.removeChild(n.parentNode)},300)},a)}};function ns(e){return typeof e>"u"||!!e}function Mn(e){const t={},n=e.currentTarget;if(!(!(n!=null&&n._ripple)||n._ripple.touched||e[oa])){if(e[oa]=!0,ia(e))n._ripple.touched=!0,n._ripple.isTouch=!0;else if(n._ripple.isTouch)return;if(t.center=n._ripple.centered||ts(e),n._ripple.class&&(t.class=n._ripple.class),ia(e)){if(n._ripple.showTimerCommit)return;n._ripple.showTimerCommit=()=>{hl.show(e,n,t)},n._ripple.showTimer=window.setTimeout(()=>{var l;(l=n==null?void 0:n._ripple)!=null&&l.showTimerCommit&&(n._ripple.showTimerCommit(),n._ripple.showTimerCommit=null)},qh)}else hl.show(e,n,t)}}function Ko(e){e[oa]=!0}function Qe(e){const t=e.currentTarget;if(t!=null&&t._ripple){if(window.clearTimeout(t._ripple.showTimer),e.type==="touchend"&&t._ripple.showTimerCommit){t._ripple.showTimerCommit(),t._ripple.showTimerCommit=null,t._ripple.showTimer=window.setTimeout(()=>{Qe(e)});return}window.setTimeout(()=>{t._ripple&&(t._ripple.touched=!1)}),hl.hide(t)}}function ls(e){const t=e.currentTarget;t!=null&&t._ripple&&(t._ripple.showTimerCommit&&(t._ripple.showTimerCommit=null),window.clearTimeout(t._ripple.showTimer))}let Fn=!1;function as(e){!Fn&&(e.keyCode===mo.enter||e.keyCode===mo.space)&&(Fn=!0,Mn(e))}function os(e){Fn=!1,Qe(e)}function is(e){Fn&&(Fn=!1,Qe(e))}function ss(e,t,n){const{value:l,modifiers:a}=t,o=ns(l);if(o||hl.hide(e),e._ripple=e._ripple??{},e._ripple.enabled=o,e._ripple.centered=a.center,e._ripple.circle=a.circle,ul(l)&&l.class&&(e._ripple.class=l.class),o&&!n){if(a.stop){e.addEventListener("touchstart",Ko,{passive:!0}),e.addEventListener("mousedown",Ko);return}e.addEventListener("touchstart",Mn,{passive:!0}),e.addEventListener("touchend",Qe,{passive:!0}),e.addEventListener("touchmove",ls,{passive:!0}),e.addEventListener("touchcancel",Qe),e.addEventListener("mousedown",Mn),e.addEventListener("mouseup",Qe),e.addEventListener("mouseleave",Qe),e.addEventListener("keydown",as),e.addEventListener("keyup",os),e.addEventListener("blur",is),e.addEventListener("dragstart",Qe,{passive:!0})}else!o&&n&&rs(e)}function rs(e){e.removeEventListener("mousedown",Mn),e.removeEventListener("touchstart",Mn),e.removeEventListener("touchend",Qe),e.removeEventListener("touchmove",ls),e.removeEventListener("touchcancel",Qe),e.removeEventListener("mouseup",Qe),e.removeEventListener("mouseleave",Qe),e.removeEventListener("keydown",as),e.removeEventListener("keyup",os),e.removeEventListener("dragstart",Qe),e.removeEventListener("blur",is)}function Zh(e,t){ss(e,t,!1)}function Jh(e){delete e._ripple,rs(e)}function Qh(e,t){if(t.value===t.oldValue)return;const n=ns(t.oldValue);ss(e,t,n)}const Ft={mounted:Zh,unmounted:Jh,updated:Qh},Ja=E({active:{type:Boolean,default:void 0},symbol:{type:null,default:Wa},flat:Boolean,icon:[Boolean,String,Function,Object],prependIcon:se,appendIcon:se,block:Boolean,stacked:Boolean,ripple:{type:[Boolean,Object],default:!0},text:String,...at(),...q(),...Fe(),...dt(),...Me(),...Sn(),...Xa(),...Ot(),...Cn(),...Pe(),...Yn(),...At(),...ce({tag:"button"}),...ye(),...mt({variant:"elevated"})},"VBtn"),Ke=L()({name:"VBtn",directives:{Ripple:Ft},props:Ja(),emits:{"group:selected":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const{themeClasses:a}=be(e),{borderClasses:o}=ft(e),{colorClasses:i,colorStyles:s,variantClasses:u}=ln(e),{densityClasses:c}=Ye(e),{dimensionStyles:d}=vt(e),{elevationClasses:f}=He(e),{loaderClasses:v}=xl(e),{locationStyles:m}=Mt(e),{positionClasses:h}=Vn(e),{roundedClasses:y}=Be(e),{sizeClasses:b,sizeStyles:p}=xn(e),S=kn(e,e.symbol,!1),x=Wn(e,n),I=g(()=>{var w;return e.active!==void 0?e.active:x.isLink.value?(w=x.isActive)==null?void 0:w.value:S==null?void 0:S.isSelected.value}),V=g(()=>(S==null?void 0:S.disabled.value)||e.disabled),C=g(()=>e.variant==="elevated"&&!(e.disabled||e.flat||e.border)),P=g(()=>{if(e.value!==void 0)return Object(e.value)===e.value?JSON.stringify(e.value,null,0):e.value});function k(w){var T;V.value||x.isLink.value&&(w.metaKey||w.ctrlKey||w.shiftKey||w.button!==0||n.target==="_blank")||((T=x.navigate)==null||T.call(x,w),S==null||S.toggle())}return Kh(x,S==null?void 0:S.select),j(()=>{var M,X;const w=x.isLink.value?"a":e.tag,T=!!(e.prependIcon||l.prepend),A=!!(e.appendIcon||l.append),B=!!(e.icon&&e.icon!==!0),R=(S==null?void 0:S.isSelected.value)&&(!x.isLink.value||((M=x.isActive)==null?void 0:M.value))||!S||((X=x.isActive)==null?void 0:X.value);return ne(r(w,{type:w==="a"?void 0:"button",class:["v-btn",S==null?void 0:S.selectedClass.value,{"v-btn--active":I.value,"v-btn--block":e.block,"v-btn--disabled":V.value,"v-btn--elevated":C.value,"v-btn--flat":e.flat,"v-btn--icon":!!e.icon,"v-btn--loading":e.loading,"v-btn--stacked":e.stacked},a.value,o.value,R?i.value:void 0,c.value,f.value,v.value,h.value,y.value,b.value,u.value,e.class],style:[R?s.value:void 0,d.value,m.value,p.value,e.style],disabled:V.value||void 0,href:x.href.value,onClick:k,value:P.value},{default:()=>{var $;return[nn(!0,"v-btn"),!e.icon&&T&&r("span",{key:"prepend",class:"v-btn__prepend"},[l.prepend?r(we,{key:"prepend-defaults",disabled:!e.prependIcon,defaults:{VIcon:{icon:e.prependIcon}}},l.prepend):r(ke,{key:"prepend-icon",icon:e.prependIcon},null)]),r("span",{class:"v-btn__content","data-no-activator":""},[!l.default&&B?r(ke,{key:"content-icon",icon:e.icon},null):r(we,{key:"content-defaults",disabled:!B,defaults:{VIcon:{icon:e.icon}}},{default:()=>{var D;return[((D=l.default)==null?void 0:D.call(l))??e.text]}})]),!e.icon&&A&&r("span",{key:"append",class:"v-btn__append"},[l.append?r(we,{key:"append-defaults",disabled:!e.appendIcon,defaults:{VIcon:{icon:e.appendIcon}}},l.append):r(ke,{key:"append-icon",icon:e.appendIcon},null)]),!!e.loading&&r("span",{key:"loader",class:"v-btn__loader"},[(($=l.loader)==null?void 0:$.call(l))??r(Ka,{color:typeof e.loading=="boolean"?void 0:e.loading,indeterminate:!0,size:"23",width:"2"},null)])]}}),[[Ze("ripple"),!V.value&&e.ripple,null]])}),{}}}),eg=E({...Ja({icon:"$menu",variant:"text"})},"VAppBarNavIcon"),tg=L()({name:"VAppBarNavIcon",props:eg(),setup(e,t){let{slots:n}=t;return j(()=>r(Ke,Y(e,{class:["v-app-bar-nav-icon"]}),n)),{}}}),ng=L()({name:"VAppBarTitle",props:Gi(),setup(e,t){let{slots:n}=t;return j(()=>r(za,Y(e,{class:"v-app-bar-title"}),n)),{}}});const us=yt("v-alert-title"),lg=["success","info","warning","error"],ag=E({border:{type:[Boolean,String],validator:e=>typeof e=="boolean"||["top","end","bottom","start"].includes(e)},borderColor:String,closable:Boolean,closeIcon:{type:se,default:"$close"},closeLabel:{type:String,default:"$vuetify.close"},icon:{type:[Boolean,String,Function,Object],default:null},modelValue:{type:Boolean,default:!0},prominent:Boolean,title:String,text:String,type:{type:String,validator:e=>lg.includes(e)},...q(),...Fe(),...dt(),...Me(),...Ot(),...Cn(),...Pe(),...ce(),...ye(),...mt({variant:"flat"})},"VAlert"),og=L()({name:"VAlert",props:ag(),emits:{"click:close":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{emit:n,slots:l}=t;const a=ue(e,"modelValue"),o=g(()=>{if(e.icon!==!1)return e.type?e.icon??`$${e.type}`:e.icon}),i=g(()=>({color:e.color??e.type,variant:e.variant})),{themeClasses:s}=be(e),{colorClasses:u,colorStyles:c,variantClasses:d}=ln(i),{densityClasses:f}=Ye(e),{dimensionStyles:v}=vt(e),{elevationClasses:m}=He(e),{locationStyles:h}=Mt(e),{positionClasses:y}=Vn(e),{roundedClasses:b}=Be(e),{textColorClasses:p,textColorStyles:S}=Ge(F(e,"borderColor")),{t:x}=ct(),I=g(()=>({"aria-label":x(e.closeLabel),onClick(V){a.value=!1,n("click:close",V)}}));return()=>{const V=!!(l.prepend||o.value),C=!!(l.title||e.title),P=!!(l.close||e.closable);return a.value&&r(e.tag,{class:["v-alert",e.border&&{"v-alert--border":!!e.border,[`v-alert--border-${e.border===!0?"start":e.border}`]:!0},{"v-alert--prominent":e.prominent},s.value,u.value,f.value,m.value,y.value,b.value,d.value,e.class],style:[c.value,v.value,h.value,e.style],role:"alert"},{default:()=>{var k,w;return[nn(!1,"v-alert"),e.border&&r("div",{key:"border",class:["v-alert__border",p.value],style:S.value},null),V&&r("div",{key:"prepend",class:"v-alert__prepend"},[l.prepend?r(we,{key:"prepend-defaults",disabled:!o.value,defaults:{VIcon:{density:e.density,icon:o.value,size:e.prominent?44:28}}},l.prepend):r(ke,{key:"prepend-icon",density:e.density,icon:o.value,size:e.prominent?44:28},null)]),r("div",{class:"v-alert__content"},[C&&r(us,{key:"title"},{default:()=>{var T;return[((T=l.title)==null?void 0:T.call(l))??e.title]}}),((k=l.text)==null?void 0:k.call(l))??e.text,(w=l.default)==null?void 0:w.call(l)]),l.append&&r("div",{key:"append",class:"v-alert__append"},[l.append()]),P&&r("div",{key:"close",class:"v-alert__close"},[l.close?r(we,{key:"close-defaults",defaults:{VBtn:{icon:e.closeIcon,size:"x-small",variant:"text"}}},{default:()=>{var T;return[(T=l.close)==null?void 0:T.call(l,{props:I.value})]}}):r(Ke,Y({key:"close-btn",icon:e.closeIcon,size:"x-small",variant:"text"},I.value),null)])]}})}}});const ig=E({text:String,clickable:Boolean,...q(),...ye()},"VLabel"),_n=L()({name:"VLabel",props:ig(),setup(e,t){let{slots:n}=t;return j(()=>{var l;return r("label",{class:["v-label",{"v-label--clickable":e.clickable},e.class],style:e.style},[e.text,(l=n.default)==null?void 0:l.call(n)])}),{}}});const cs=Symbol.for("vuetify:selection-control-group"),Qa=E({color:String,disabled:{type:Boolean,default:null},defaultsTarget:String,error:Boolean,id:String,inline:Boolean,falseIcon:se,trueIcon:se,ripple:{type:Boolean,default:!0},multiple:{type:Boolean,default:null},name:String,readonly:Boolean,modelValue:null,type:String,valueComparator:{type:Function,default:yn},...q(),...Fe(),...ye()},"SelectionControlGroup"),sg=E({...Qa({defaultsTarget:"VSelectionControl"})},"VSelectionControlGroup"),ds=L()({name:"VSelectionControlGroup",props:sg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),a=We(),o=g(()=>e.id||`v-selection-control-group-${a}`),i=g(()=>e.name||o.value),s=new Set;return Oe(cs,{modelValue:l,forceUpdate:()=>{s.forEach(u=>u())},onForceUpdate:u=>{s.add(u),Xe(()=>{s.delete(u)})}}),$e({[e.defaultsTarget]:{color:F(e,"color"),disabled:F(e,"disabled"),density:F(e,"density"),error:F(e,"error"),inline:F(e,"inline"),modelValue:l,multiple:g(()=>!!e.multiple||e.multiple==null&&Array.isArray(l.value)),name:i,falseIcon:F(e,"falseIcon"),trueIcon:F(e,"trueIcon"),readonly:F(e,"readonly"),ripple:F(e,"ripple"),type:F(e,"type"),valueComparator:F(e,"valueComparator")}}),j(()=>{var u;return r("div",{class:["v-selection-control-group",{"v-selection-control-group--inline":e.inline},e.class],style:e.style,role:e.type==="radio"?"radiogroup":void 0},[(u=n.default)==null?void 0:u.call(n)])}),{}}}),Cl=E({label:String,trueValue:null,falseValue:null,value:null,...q(),...Qa()},"VSelectionControl");function rg(e){const t=_e(cs,void 0),{densityClasses:n}=Ye(e),l=ue(e,"modelValue"),a=g(()=>e.trueValue!==void 0?e.trueValue:e.value!==void 0?e.value:!0),o=g(()=>e.falseValue!==void 0?e.falseValue:!1),i=g(()=>!!e.multiple||e.multiple==null&&Array.isArray(l.value)),s=g({get(){const m=t?t.modelValue.value:l.value;return i.value?m.some(h=>e.valueComparator(h,a.value)):e.valueComparator(m,a.value)},set(m){if(e.readonly)return;const h=m?a.value:o.value;let y=h;i.value&&(y=m?[...et(l.value),h]:et(l.value).filter(b=>!e.valueComparator(b,a.value))),t?t.modelValue.value=y:l.value=y}}),{textColorClasses:u,textColorStyles:c}=Ge(g(()=>s.value&&!e.error&&!e.disabled?e.color:void 0)),{backgroundColorClasses:d,backgroundColorStyles:f}=Ee(g(()=>s.value&&!e.error&&!e.disabled?e.color:void 0)),v=g(()=>s.value?e.trueIcon:e.falseIcon);return{group:t,densityClasses:n,trueValue:a,falseValue:o,model:s,textColorClasses:u,textColorStyles:c,backgroundColorClasses:d,backgroundColorStyles:f,icon:v}}const Xt=L()({name:"VSelectionControl",directives:{Ripple:Ft},inheritAttrs:!1,props:Cl(),emits:{"update:modelValue":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const{group:a,densityClasses:o,icon:i,model:s,textColorClasses:u,textColorStyles:c,backgroundColorClasses:d,backgroundColorStyles:f,trueValue:v}=rg(e),m=We(),h=g(()=>e.id||`input-${m}`),y=K(!1),b=K(!1),p=W();a==null||a.onForceUpdate(()=>{p.value&&(p.value.checked=s.value)});function S(V){y.value=!0,vn(V.target,":focus-visible")!==!1&&(b.value=!0)}function x(){y.value=!1,b.value=!1}function I(V){e.readonly&&a&&Ve(()=>a.forceUpdate()),s.value=V.target.checked}return j(()=>{var w,T;const V=l.label?l.label({label:e.label,props:{for:h.value}}):e.label,[C,P]=Qt(n),k=r("input",Y({ref:p,checked:s.value,disabled:!!(e.readonly||e.disabled),id:h.value,onBlur:x,onFocus:S,onInput:I,"aria-disabled":!!(e.readonly||e.disabled),type:e.type,value:v.value,name:e.name,"aria-checked":e.type==="checkbox"?s.value:void 0},P),null);return r("div",Y({class:["v-selection-control",{"v-selection-control--dirty":s.value,"v-selection-control--disabled":e.disabled,"v-selection-control--error":e.error,"v-selection-control--focused":y.value,"v-selection-control--focus-visible":b.value,"v-selection-control--inline":e.inline},o.value,e.class]},C,{style:e.style}),[r("div",{class:["v-selection-control__wrapper",u.value],style:c.value},[(w=l.default)==null?void 0:w.call(l,{backgroundColorClasses:d,backgroundColorStyles:f}),ne(r("div",{class:["v-selection-control__input"]},[((T=l.input)==null?void 0:T.call(l,{model:s,textColorClasses:u,textColorStyles:c,backgroundColorClasses:d,backgroundColorStyles:f,inputNode:k,icon:i.value,props:{onFocus:S,onBlur:x,id:h.value}}))??r(ae,null,[i.value&&r(ke,{key:"icon",icon:i.value},null),k])]),[[Ze("ripple"),e.ripple&&[!e.disabled&&!e.readonly,null,["center","circle"]]]])]),V&&r(_n,{for:h.value,clickable:!0,onClick:A=>A.stopPropagation()},{default:()=>[V]})])}),{isFocused:y,input:p}}}),vs=E({indeterminate:Boolean,indeterminateIcon:{type:se,default:"$checkboxIndeterminate"},...Cl({falseIcon:"$checkboxOff",trueIcon:"$checkboxOn"})},"VCheckboxBtn"),hn=L()({name:"VCheckboxBtn",props:vs(),emits:{"update:modelValue":e=>!0,"update:indeterminate":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"indeterminate"),a=ue(e,"modelValue");function o(u){l.value&&(l.value=!1)}const i=g(()=>l.value?e.indeterminateIcon:e.falseIcon),s=g(()=>l.value?e.indeterminateIcon:e.trueIcon);return j(()=>{const u=rt(Xt.filterProps(e)[0],["modelValue"]);return r(Xt,Y(u,{modelValue:a.value,"onUpdate:modelValue":[c=>a.value=c,o],class:["v-checkbox-btn",e.class],style:e.style,type:"checkbox",falseIcon:i.value,trueIcon:s.value,"aria-checked":l.value?"mixed":void 0}),n)}),{}}});function fs(e){const{t}=ct();function n(l){let{name:a}=l;const o={prepend:"prependAction",prependInner:"prependAction",append:"appendAction",appendInner:"appendAction",clear:"clear"}[a],i=e[`onClick:${a}`],s=i&&o?t(`$vuetify.input.${o}`,e.label??""):void 0;return r(ke,{icon:e[`${a}Icon`],"aria-label":s,onClick:i},null)}return{InputIcon:n}}const ug=E({active:Boolean,color:String,messages:{type:[Array,String],default:()=>[]},...q(),...Pt({transition:{component:ja,leaveAbsolute:!0,group:!0}})},"VMessages"),ms=L()({name:"VMessages",props:ug(),setup(e,t){let{slots:n}=t;const l=g(()=>et(e.messages)),{textColorClasses:a,textColorStyles:o}=Ge(g(()=>e.color));return j(()=>r(gt,{transition:e.transition,tag:"div",class:["v-messages",a.value,e.class],style:[o.value,e.style],role:"alert","aria-live":"polite"},{default:()=>[e.active&&l.value.map((i,s)=>r("div",{class:"v-messages__message",key:`${s}-${l.value}`},[n.message?n.message({message:i}):i]))]})),{}}}),Vl=E({focused:Boolean,"onUpdate:focused":St()},"focus");function Nt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();const n=ue(e,"focused"),l=g(()=>({[`${t}--focused`]:n.value}));function a(){n.value=!0}function o(){n.value=!1}return{focusClasses:l,isFocused:n,focus:a,blur:o}}const hs=Symbol.for("vuetify:form"),cg=E({disabled:Boolean,fastFail:Boolean,readonly:Boolean,modelValue:{type:Boolean,default:null},validateOn:{type:String,default:"input"}},"form");function dg(e){const t=ue(e,"modelValue"),n=g(()=>e.disabled),l=g(()=>e.readonly),a=K(!1),o=W([]),i=W([]);async function s(){const d=[];let f=!0;i.value=[],a.value=!0;for(const v of o.value){const m=await v.validate();if(m.length>0&&(f=!1,d.push({id:v.id,errorMessages:m})),!f&&e.fastFail)break}return i.value=d,a.value=!1,{valid:f,errors:i.value}}function u(){o.value.forEach(d=>d.reset())}function c(){o.value.forEach(d=>d.resetValidation())}return Z(o,()=>{let d=0,f=0;const v=[];for(const m of o.value)m.isValid===!1?(f++,v.push({id:m.id,errorMessages:m.errorMessages})):m.isValid===!0&&d++;i.value=v,t.value=f>0?!1:d===o.value.length?!0:null},{deep:!0}),Oe(hs,{register:d=>{let{id:f,validate:v,reset:m,resetValidation:h}=d;o.value.some(y=>y.id===f),o.value.push({id:f,validate:v,reset:m,resetValidation:h,isValid:null,errorMessages:[]})},unregister:d=>{o.value=o.value.filter(f=>f.id!==d)},update:(d,f,v)=>{const m=o.value.find(h=>h.id===d);m&&(m.isValid=f,m.errorMessages=v)},isDisabled:n,isReadonly:l,isValidating:a,isValid:t,items:o,validateOn:F(e,"validateOn")}),{errors:i,isDisabled:n,isReadonly:l,isValidating:a,isValid:t,items:o,validate:s,reset:u,resetValidation:c}}function _l(){return _e(hs,null)}const gs=E({disabled:{type:Boolean,default:null},error:Boolean,errorMessages:{type:[Array,String],default:()=>[]},maxErrors:{type:[Number,String],default:1},name:String,label:String,readonly:{type:Boolean,default:null},rules:{type:Array,default:()=>[]},modelValue:null,validateOn:String,validationValue:null,...Vl()},"validation");function ys(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt(),n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:We();const l=ue(e,"modelValue"),a=g(()=>e.validationValue===void 0?l.value:e.validationValue),o=_l(),i=W([]),s=K(!0),u=g(()=>!!(et(l.value===""?null:l.value).length||et(a.value===""?null:a.value).length)),c=g(()=>!!(e.disabled??(o==null?void 0:o.isDisabled.value))),d=g(()=>!!(e.readonly??(o==null?void 0:o.isReadonly.value))),f=g(()=>e.errorMessages.length?et(e.errorMessages).slice(0,Math.max(0,+e.maxErrors)):i.value),v=g(()=>{let I=(e.validateOn??(o==null?void 0:o.validateOn.value))||"input";I==="lazy"&&(I="input lazy");const V=new Set((I==null?void 0:I.split(" "))??[]);return{blur:V.has("blur")||V.has("input"),input:V.has("input"),submit:V.has("submit"),lazy:V.has("lazy")}}),m=g(()=>e.error||e.errorMessages.length?!1:e.rules.length?s.value?i.value.length||v.value.lazy?null:!0:!i.value.length:!0),h=K(!1),y=g(()=>({[`${t}--error`]:m.value===!1,[`${t}--dirty`]:u.value,[`${t}--disabled`]:c.value,[`${t}--readonly`]:d.value})),b=g(()=>e.name??ot(n));Va(()=>{o==null||o.register({id:b.value,validate:x,reset:p,resetValidation:S})}),nt(()=>{o==null||o.unregister(b.value)}),Je(async()=>{v.value.lazy||await x(!0),o==null||o.update(b.value,m.value,f.value)}),Rt(()=>v.value.input,()=>{Z(a,()=>{if(a.value!=null)x();else if(e.focused){const I=Z(()=>e.focused,V=>{V||x(),I()})}})}),Rt(()=>v.value.blur,()=>{Z(()=>e.focused,I=>{I||x()})}),Z(m,()=>{o==null||o.update(b.value,m.value,f.value)});function p(){l.value=null,Ve(S)}function S(){s.value=!0,v.value.lazy?i.value=[]:x(!0)}async function x(){let I=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;const V=[];h.value=!0;for(const C of e.rules){if(V.length>=+(e.maxErrors??1))break;const k=await(typeof C=="function"?C:()=>C)(a.value);if(k!==!0){if(k!==!1&&typeof k!="string"){console.warn(`${k} is not a valid value. Rule functions must return boolean true or a string.`);continue}V.push(k||"")}}return i.value=V,h.value=!1,s.value=I,i.value}return{errorMessages:f,isDirty:u,isDisabled:c,isReadonly:d,isPristine:s,isValid:m,isValidating:h,reset:p,resetValidation:S,validate:x,validationClasses:y}}const Bt=E({id:String,appendIcon:se,centerAffix:{type:Boolean,default:!0},prependIcon:se,hideDetails:[Boolean,String],hint:String,persistentHint:Boolean,messages:{type:[Array,String],default:()=>[]},direction:{type:String,default:"horizontal",validator:e=>["horizontal","vertical"].includes(e)},"onClick:prepend":St(),"onClick:append":St(),...q(),...Fe(),...gs()},"VInput"),ze=L()({name:"VInput",props:{...Bt()},emits:{"update:modelValue":e=>!0},setup(e,t){let{attrs:n,slots:l,emit:a}=t;const{densityClasses:o}=Ye(e),{rtlClasses:i}=De(),{InputIcon:s}=fs(e),u=We(),c=g(()=>e.id||`input-${u}`),d=g(()=>`${c.value}-messages`),{errorMessages:f,isDirty:v,isDisabled:m,isReadonly:h,isPristine:y,isValid:b,isValidating:p,reset:S,resetValidation:x,validate:I,validationClasses:V}=ys(e,"v-input",c),C=g(()=>({id:c,messagesId:d,isDirty:v,isDisabled:m,isReadonly:h,isPristine:y,isValid:b,isValidating:p,reset:S,resetValidation:x,validate:I})),P=g(()=>{var k;return(k=e.errorMessages)!=null&&k.length||!y.value&&f.value.length?f.value:e.hint&&(e.persistentHint||e.focused)?e.hint:e.messages});return j(()=>{var B,R,M,X;const k=!!(l.prepend||e.prependIcon),w=!!(l.append||e.appendIcon),T=P.value.length>0,A=!e.hideDetails||e.hideDetails==="auto"&&(T||!!l.details);return r("div",{class:["v-input",`v-input--${e.direction}`,{"v-input--center-affix":e.centerAffix},o.value,i.value,V.value,e.class],style:e.style},[k&&r("div",{key:"prepend",class:"v-input__prepend"},[(B=l.prepend)==null?void 0:B.call(l,C.value),e.prependIcon&&r(s,{key:"prepend-icon",name:"prepend"},null)]),l.default&&r("div",{class:"v-input__control"},[(R=l.default)==null?void 0:R.call(l,C.value)]),w&&r("div",{key:"append",class:"v-input__append"},[e.appendIcon&&r(s,{key:"append-icon",name:"append"},null),(M=l.append)==null?void 0:M.call(l,C.value)]),A&&r("div",{class:"v-input__details"},[r(ms,{id:d.value,active:T,messages:P.value},{message:l.message}),(X=l.details)==null?void 0:X.call(l,C.value)])])}),{reset:S,resetValidation:x,validate:I}}}),vg=E({...Bt(),...rt(vs(),["inline"])},"VCheckbox"),fg=L()({name:"VCheckbox",inheritAttrs:!1,props:vg(),emits:{"update:modelValue":e=>!0,"update:focused":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const a=ue(e,"modelValue"),{isFocused:o,focus:i,blur:s}=Nt(e),u=We(),c=g(()=>e.id||`checkbox-${u}`);return j(()=>{const[d,f]=Qt(n),[v,m]=ze.filterProps(e),[h,y]=hn.filterProps(e);return r(ze,Y({class:["v-checkbox",e.class]},d,v,{modelValue:a.value,"onUpdate:modelValue":b=>a.value=b,id:c.value,focused:o.value,style:e.style}),{...l,default:b=>{let{id:p,messagesId:S,isDisabled:x,isReadonly:I}=b;return r(hn,Y(h,{id:p.value,"aria-describedby":S.value,disabled:x.value,readonly:I.value},f,{modelValue:a.value,"onUpdate:modelValue":V=>a.value=V,onFocus:i,onBlur:s}),l)}})}),{}}});const mg=E({start:Boolean,end:Boolean,icon:se,image:String,...q(),...Fe(),...Pe(),...At(),...ce(),...ye(),...mt({variant:"flat"})},"VAvatar"),Lt=L()({name:"VAvatar",props:mg(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=be(e),{colorClasses:a,colorStyles:o,variantClasses:i}=ln(e),{densityClasses:s}=Ye(e),{roundedClasses:u}=Be(e),{sizeClasses:c,sizeStyles:d}=xn(e);return j(()=>r(e.tag,{class:["v-avatar",{"v-avatar--start":e.start,"v-avatar--end":e.end},l.value,a.value,s.value,u.value,c.value,i.value,e.class],style:[o.value,d.value,e.style]},{default:()=>{var f;return[e.image?r(qt,{key:"image",src:e.image,alt:"",cover:!0},null):e.icon?r(ke,{key:"icon",icon:e.icon},null):(f=n.default)==null?void 0:f.call(n),nn(!1,"v-avatar")]}})),{}}});const bs=Symbol.for("vuetify:v-chip-group"),hg=E({column:Boolean,filter:Boolean,valueComparator:{type:Function,default:yn},...q(),...wn({selectedClass:"v-chip--selected"}),...ce(),...ye(),...mt({variant:"tonal"})},"VChipGroup"),gg=L()({name:"VChipGroup",props:hg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=be(e),{isSelected:a,select:o,next:i,prev:s,selected:u}=an(e,bs);return $e({VChip:{color:F(e,"color"),disabled:F(e,"disabled"),filter:F(e,"filter"),variant:F(e,"variant")}}),j(()=>r(e.tag,{class:["v-chip-group",{"v-chip-group--column":e.column},l.value,e.class],style:e.style},{default:()=>{var c;return[(c=n.default)==null?void 0:c.call(n,{isSelected:a,select:o,next:i,prev:s,selected:u.value})]}})),{}}}),yg=E({activeClass:String,appendAvatar:String,appendIcon:se,closable:Boolean,closeIcon:{type:se,default:"$delete"},closeLabel:{type:String,default:"$vuetify.close"},draggable:Boolean,filter:Boolean,filterIcon:{type:String,default:"$complete"},label:Boolean,link:{type:Boolean,default:void 0},pill:Boolean,prependAvatar:String,prependIcon:se,ripple:{type:[Boolean,Object],default:!0},text:String,modelValue:{type:Boolean,default:!0},onClick:St(),onClickOnce:St(),...at(),...q(),...Fe(),...Me(),...Sn(),...Pe(),...Yn(),...At(),...ce({tag:"span"}),...ye(),...mt({variant:"tonal"})},"VChip"),Kn=L()({name:"VChip",directives:{Ripple:Ft},props:yg(),emits:{"click:close":e=>!0,"update:modelValue":e=>!0,"group:selected":e=>!0,click:e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{t:o}=ct(),{borderClasses:i}=ft(e),{colorClasses:s,colorStyles:u,variantClasses:c}=ln(e),{densityClasses:d}=Ye(e),{elevationClasses:f}=He(e),{roundedClasses:v}=Be(e),{sizeClasses:m}=xn(e),{themeClasses:h}=be(e),y=ue(e,"modelValue"),b=kn(e,bs,!1),p=Wn(e,n),S=g(()=>e.link!==!1&&p.isLink.value),x=g(()=>!e.disabled&&e.link!==!1&&(!!b||e.link||p.isClickable.value)),I=g(()=>({"aria-label":o(e.closeLabel),onClick(P){P.stopPropagation(),y.value=!1,l("click:close",P)}}));function V(P){var k;l("click",P),x.value&&((k=p.navigate)==null||k.call(p,P),b==null||b.toggle())}function C(P){(P.key==="Enter"||P.key===" ")&&(P.preventDefault(),V(P))}return()=>{const P=p.isLink.value?"a":e.tag,k=!!(e.appendIcon||e.appendAvatar),w=!!(k||a.append),T=!!(a.close||e.closable),A=!!(a.filter||e.filter)&&b,B=!!(e.prependIcon||e.prependAvatar),R=!!(B||a.prepend),M=!b||b.isSelected.value;return y.value&&ne(r(P,{class:["v-chip",{"v-chip--disabled":e.disabled,"v-chip--label":e.label,"v-chip--link":x.value,"v-chip--filter":A,"v-chip--pill":e.pill},h.value,i.value,M?s.value:void 0,d.value,f.value,v.value,m.value,c.value,b==null?void 0:b.selectedClass.value,e.class],style:[M?u.value:void 0,e.style],disabled:e.disabled||void 0,draggable:e.draggable,href:p.href.value,tabindex:x.value?0:void 0,onClick:V,onKeydown:x.value&&!S.value&&C},{default:()=>{var X;return[nn(x.value,"v-chip"),A&&r(Ua,{key:"filter"},{default:()=>[ne(r("div",{class:"v-chip__filter"},[a.filter?r(we,{key:"filter-defaults",disabled:!e.filterIcon,defaults:{VIcon:{icon:e.filterIcon}}},a.filter):r(ke,{key:"filter-icon",icon:e.filterIcon},null)]),[[Te,b.isSelected.value]])]}),R&&r("div",{key:"prepend",class:"v-chip__prepend"},[a.prepend?r(we,{key:"prepend-defaults",disabled:!B,defaults:{VAvatar:{image:e.prependAvatar,start:!0},VIcon:{icon:e.prependIcon,start:!0}}},a.prepend):r(ae,null,[e.prependIcon&&r(ke,{key:"prepend-icon",icon:e.prependIcon,start:!0},null),e.prependAvatar&&r(Lt,{key:"prepend-avatar",image:e.prependAvatar,start:!0},null)])]),r("div",{class:"v-chip__content"},[((X=a.default)==null?void 0:X.call(a,{isSelected:b==null?void 0:b.isSelected.value,selectedClass:b==null?void 0:b.selectedClass.value,select:b==null?void 0:b.select,toggle:b==null?void 0:b.toggle,value:b==null?void 0:b.value.value,disabled:e.disabled}))??e.text]),w&&r("div",{key:"append",class:"v-chip__append"},[a.append?r(we,{key:"append-defaults",disabled:!k,defaults:{VAvatar:{end:!0,image:e.appendAvatar},VIcon:{end:!0,icon:e.appendIcon}}},a.append):r(ae,null,[e.appendIcon&&r(ke,{key:"append-icon",end:!0,icon:e.appendIcon},null),e.appendAvatar&&r(Lt,{key:"append-avatar",end:!0,image:e.appendAvatar},null)])]),T&&r("div",Y({key:"close",class:"v-chip__close"},I.value),[a.close?r(we,{key:"close-defaults",defaults:{VIcon:{icon:e.closeIcon,size:"x-small"}}},a.close):r(ke,{key:"close-icon",icon:e.closeIcon,size:"x-small"},null)])]}}),[[Ze("ripple"),x.value&&e.ripple,null]])}}});const sa=Symbol.for("vuetify:list");function ps(){const e=_e(sa,{hasPrepend:K(!1),updateHasPrepend:()=>null}),t={hasPrepend:K(!1),updateHasPrepend:n=>{n&&(t.hasPrepend.value=n)}};return Oe(sa,t),e}function ws(){return _e(sa,null)}const bg={open:e=>{let{id:t,value:n,opened:l,parents:a}=e;if(n){const o=new Set;o.add(t);let i=a.get(t);for(;i!=null;)o.add(i),i=a.get(i);return o}else return l.delete(t),l},select:()=>null},Ss={open:e=>{let{id:t,value:n,opened:l,parents:a}=e;if(n){let o=a.get(t);for(l.add(t);o!=null&&o!==t;)l.add(o),o=a.get(o);return l}else l.delete(t);return l},select:()=>null},pg={open:Ss.open,select:e=>{let{id:t,value:n,opened:l,parents:a}=e;if(!n)return l;const o=[];let i=a.get(t);for(;i!=null;)o.push(i),i=a.get(i);return new Set(o)}},eo=e=>{const t={select:n=>{let{id:l,value:a,selected:o}=n;if(l=$t(l),e&&!a){const i=Array.from(o.entries()).reduce((s,u)=>{let[c,d]=u;return d==="on"?[...s,c]:s},[]);if(i.length===1&&i[0]===l)return o}return o.set(l,a?"on":"off"),o},in:(n,l,a)=>{let o=new Map;for(const i of n||[])o=t.select({id:i,value:!0,selected:new Map(o),children:l,parents:a});return o},out:n=>{const l=[];for(const[a,o]of n.entries())o==="on"&&l.push(a);return l}};return t},ks=e=>{const t=eo(e);return{select:l=>{let{selected:a,id:o,...i}=l;o=$t(o);const s=a.has(o)?new Map([[o,a.get(o)]]):new Map;return t.select({...i,id:o,selected:s})},in:(l,a,o)=>{let i=new Map;return l!=null&&l.length&&(i=t.in(l.slice(0,1),a,o)),i},out:(l,a,o)=>t.out(l,a,o)}},wg=e=>{const t=eo(e);return{select:l=>{let{id:a,selected:o,children:i,...s}=l;return a=$t(a),i.has(a)?o:t.select({id:a,selected:o,children:i,...s})},in:t.in,out:t.out}},Sg=e=>{const t=ks(e);return{select:l=>{let{id:a,selected:o,children:i,...s}=l;return a=$t(a),i.has(a)?o:t.select({id:a,selected:o,children:i,...s})},in:t.in,out:t.out}},kg=e=>{const t={select:n=>{let{id:l,value:a,selected:o,children:i,parents:s}=n;l=$t(l);const u=new Map(o),c=[l];for(;c.length;){const f=c.shift();o.set(f,a?"on":"off"),i.has(f)&&c.push(...i.get(f))}let d=s.get(l);for(;d;){const f=i.get(d),v=f.every(h=>o.get(h)==="on"),m=f.every(h=>!o.has(h)||o.get(h)==="off");o.set(d,v?"on":m?"off":"indeterminate"),d=s.get(d)}return e&&!a&&Array.from(o.entries()).reduce((v,m)=>{let[h,y]=m;return y==="on"?[...v,h]:v},[]).length===0?u:o},in:(n,l,a)=>{let o=new Map;for(const i of n||[])o=t.select({id:i,value:!0,selected:new Map(o),children:l,parents:a});return o},out:(n,l)=>{const a=[];for(const[o,i]of n.entries())i==="on"&&!l.has(o)&&a.push(o);return a}};return t},Nn=Symbol.for("vuetify:nested"),xs={id:K(),root:{register:()=>null,unregister:()=>null,parents:W(new Map),children:W(new Map),open:()=>null,openOnSelect:()=>null,select:()=>null,opened:W(new Set),selected:W(new Map),selectedValues:W([])}},xg=E({selectStrategy:[String,Function],openStrategy:[String,Object],opened:Array,selected:Array,mandatory:Boolean},"nested"),Cg=e=>{let t=!1;const n=W(new Map),l=W(new Map),a=ue(e,"opened",e.opened,f=>new Set(f),f=>[...f.values()]),o=g(()=>{if(typeof e.selectStrategy=="object")return e.selectStrategy;switch(e.selectStrategy){case"single-leaf":return Sg(e.mandatory);case"leaf":return wg(e.mandatory);case"independent":return eo(e.mandatory);case"single-independent":return ks(e.mandatory);case"classic":default:return kg(e.mandatory)}}),i=g(()=>{if(typeof e.openStrategy=="object")return e.openStrategy;switch(e.openStrategy){case"list":return pg;case"single":return bg;case"multiple":default:return Ss}}),s=ue(e,"selected",e.selected,f=>o.value.in(f,n.value,l.value),f=>o.value.out(f,n.value,l.value));nt(()=>{t=!0});function u(f){const v=[];let m=f;for(;m!=null;)v.unshift(m),m=l.value.get(m);return v}const c=Ne("nested"),d={id:K(),root:{opened:a,selected:s,selectedValues:g(()=>{const f=[];for(const[v,m]of s.value.entries())m==="on"&&f.push(v);return f}),register:(f,v,m)=>{v&&f!==v&&l.value.set(f,v),m&&n.value.set(f,[]),v!=null&&n.value.set(v,[...n.value.get(v)||[],f])},unregister:f=>{if(t)return;n.value.delete(f);const v=l.value.get(f);if(v){const m=n.value.get(v)??[];n.value.set(v,m.filter(h=>h!==f))}l.value.delete(f),a.value.delete(f)},open:(f,v,m)=>{c.emit("click:open",{id:f,value:v,path:u(f),event:m});const h=i.value.open({id:f,value:v,opened:new Set(a.value),children:n.value,parents:l.value,event:m});h&&(a.value=h)},openOnSelect:(f,v,m)=>{const h=i.value.select({id:f,value:v,selected:new Map(s.value),opened:new Set(a.value),children:n.value,parents:l.value,event:m});h&&(a.value=h)},select:(f,v,m)=>{c.emit("click:select",{id:f,value:v,path:u(f),event:m});const h=o.value.select({id:f,value:v,selected:new Map(s.value),children:n.value,parents:l.value,event:m});h&&(s.value=h),d.root.openOnSelect(f,v,m)},children:n,parents:l}};return Oe(Nn,d),d.root},Cs=(e,t)=>{const n=_e(Nn,xs),l=Symbol(We()),a=g(()=>e.value!==void 0?e.value:l),o={...n,id:a,open:(i,s)=>n.root.open(a.value,i,s),openOnSelect:(i,s)=>n.root.openOnSelect(a.value,i,s),isOpen:g(()=>n.root.opened.value.has(a.value)),parent:g(()=>n.root.parents.value.get(a.value)),select:(i,s)=>n.root.select(a.value,i,s),isSelected:g(()=>n.root.selected.value.get($t(a.value))==="on"),isIndeterminate:g(()=>n.root.selected.value.get(a.value)==="indeterminate"),isLeaf:g(()=>!n.root.children.value.get(a.value)),isGroupActivator:n.isGroupActivator};return!n.isGroupActivator&&n.root.register(a.value,n.id.value,t),nt(()=>{!n.isGroupActivator&&n.root.unregister(a.value)}),t&&Oe(Nn,o),o},Vg=()=>{const e=_e(Nn,xs);Oe(Nn,{...e,isGroupActivator:!0})},_g=ut({name:"VListGroupActivator",setup(e,t){let{slots:n}=t;return Vg(),()=>{var l;return(l=n.default)==null?void 0:l.call(n)}}}),Ig=E({activeColor:String,baseColor:String,color:String,collapseIcon:{type:se,default:"$collapse"},expandIcon:{type:se,default:"$expand"},prependIcon:se,appendIcon:se,fluid:Boolean,subgroup:Boolean,title:String,value:null,...q(),...ce()},"VListGroup"),ra=L()({name:"VListGroup",props:Ig(),setup(e,t){let{slots:n}=t;const{isOpen:l,open:a,id:o}=Cs(F(e,"value"),!0),i=g(()=>`v-list-group--id-${String(o.value)}`),s=ws(),{isBooted:u}=tn();function c(m){a(!l.value,m)}const d=g(()=>({onClick:c,class:"v-list-group__header",id:i.value})),f=g(()=>l.value?e.collapseIcon:e.expandIcon),v=g(()=>({VListItem:{active:l.value,activeColor:e.activeColor,baseColor:e.baseColor,color:e.color,prependIcon:e.prependIcon||e.subgroup&&f.value,appendIcon:e.appendIcon||!e.subgroup&&f.value,title:e.title,value:e.value}}));return j(()=>r(e.tag,{class:["v-list-group",{"v-list-group--prepend":s==null?void 0:s.hasPrepend.value,"v-list-group--fluid":e.fluid,"v-list-group--subgroup":e.subgroup,"v-list-group--open":l.value},e.class],style:e.style},{default:()=>[n.activator&&r(we,{defaults:v.value},{default:()=>[r(_g,null,{default:()=>[n.activator({props:d.value,isOpen:l.value})]})]}),r(gt,{transition:{component:kl},disabled:!u.value},{default:()=>{var m;return[ne(r("div",{class:"v-list-group__items",role:"group","aria-labelledby":i.value},[(m=n.default)==null?void 0:m.call(n)]),[[Te,l.value]])]}})]})),{}}});const Vs=yt("v-list-item-subtitle"),_s=yt("v-list-item-title"),Tg=E({active:{type:Boolean,default:void 0},activeClass:String,activeColor:String,appendAvatar:String,appendIcon:se,baseColor:String,disabled:Boolean,lines:String,link:{type:Boolean,default:void 0},nav:Boolean,prependAvatar:String,prependIcon:se,ripple:{type:[Boolean,Object],default:!0},subtitle:[String,Number,Boolean],title:[String,Number,Boolean],value:null,onClick:St(),onClickOnce:St(),...at(),...q(),...Fe(),...dt(),...Me(),...Pe(),...Yn(),...ce(),...ye(),...mt({variant:"text"})},"VListItem"),_t=L()({name:"VListItem",directives:{Ripple:Ft},props:Tg(),emits:{click:e=>!0},setup(e,t){let{attrs:n,slots:l,emit:a}=t;const o=Wn(e,n),i=g(()=>e.value===void 0?o.href.value:e.value),{select:s,isSelected:u,isIndeterminate:c,isGroupActivator:d,root:f,parent:v,openOnSelect:m}=Cs(i,!1),h=ws(),y=g(()=>{var O;return e.active!==!1&&(e.active||((O=o.isActive)==null?void 0:O.value)||u.value)}),b=g(()=>e.link!==!1&&o.isLink.value),p=g(()=>!e.disabled&&e.link!==!1&&(e.link||o.isClickable.value||e.value!=null&&!!h)),S=g(()=>e.rounded||e.nav),x=g(()=>e.color??e.activeColor),I=g(()=>({color:y.value?x.value??e.baseColor:e.baseColor,variant:e.variant}));Z(()=>{var O;return(O=o.isActive)==null?void 0:O.value},O=>{O&&v.value!=null&&f.open(v.value,!0),O&&m(O)},{immediate:!0});const{themeClasses:V}=be(e),{borderClasses:C}=ft(e),{colorClasses:P,colorStyles:k,variantClasses:w}=ln(I),{densityClasses:T}=Ye(e),{dimensionStyles:A}=vt(e),{elevationClasses:B}=He(e),{roundedClasses:R}=Be(S),M=g(()=>e.lines?`v-list-item--${e.lines}-line`:void 0),X=g(()=>({isActive:y.value,select:s,isSelected:u.value,isIndeterminate:c.value}));function $(O){var G;a("click",O),!(d||!p.value)&&((G=o.navigate)==null||G.call(o,O),e.value!=null&&s(!u.value,O))}function D(O){(O.key==="Enter"||O.key===" ")&&(O.preventDefault(),$(O))}return j(()=>{const O=b.value?"a":e.tag,G=l.title||e.title,U=l.subtitle||e.subtitle,z=!!(e.appendAvatar||e.appendIcon),oe=!!(z||l.append),re=!!(e.prependAvatar||e.prependIcon),ve=!!(re||l.prepend);return h==null||h.updateHasPrepend(ve),e.activeColor&&lm("active-color",["color","base-color"]),ne(r(O,{class:["v-list-item",{"v-list-item--active":y.value,"v-list-item--disabled":e.disabled,"v-list-item--link":p.value,"v-list-item--nav":e.nav,"v-list-item--prepend":!ve&&(h==null?void 0:h.hasPrepend.value),[`${e.activeClass}`]:e.activeClass&&y.value},V.value,C.value,P.value,T.value,B.value,M.value,R.value,w.value,e.class],style:[k.value,A.value,e.style],href:o.href.value,tabindex:p.value?h?-2:0:void 0,onClick:$,onKeydown:p.value&&!b.value&&D},{default:()=>{var ge;return[nn(p.value||y.value,"v-list-item"),ve&&r("div",{key:"prepend",class:"v-list-item__prepend"},[l.prepend?r(we,{key:"prepend-defaults",disabled:!re,defaults:{VAvatar:{density:e.density,image:e.prependAvatar},VIcon:{density:e.density,icon:e.prependIcon},VListItemAction:{start:!0}}},{default:()=>{var N;return[(N=l.prepend)==null?void 0:N.call(l,X.value)]}}):r(ae,null,[e.prependAvatar&&r(Lt,{key:"prepend-avatar",density:e.density,image:e.prependAvatar},null),e.prependIcon&&r(ke,{key:"prepend-icon",density:e.density,icon:e.prependIcon},null)]),r("div",{class:"v-list-item__spacer"},null)]),r("div",{class:"v-list-item__content","data-no-activator":""},[G&&r(_s,{key:"title"},{default:()=>{var N;return[((N=l.title)==null?void 0:N.call(l,{title:e.title}))??e.title]}}),U&&r(Vs,{key:"subtitle"},{default:()=>{var N;return[((N=l.subtitle)==null?void 0:N.call(l,{subtitle:e.subtitle}))??e.subtitle]}}),(ge=l.default)==null?void 0:ge.call(l,X.value)]),oe&&r("div",{key:"append",class:"v-list-item__append"},[l.append?r(we,{key:"append-defaults",disabled:!z,defaults:{VAvatar:{density:e.density,image:e.appendAvatar},VIcon:{density:e.density,icon:e.appendIcon},VListItemAction:{end:!0}}},{default:()=>{var N;return[(N=l.append)==null?void 0:N.call(l,X.value)]}}):r(ae,null,[e.appendIcon&&r(ke,{key:"append-icon",density:e.density,icon:e.appendIcon},null),e.appendAvatar&&r(Lt,{key:"append-avatar",density:e.density,image:e.appendAvatar},null)]),r("div",{class:"v-list-item__spacer"},null)])]}}),[[Ze("ripple"),p.value&&e.ripple]])}),{}}}),Pg=E({color:String,inset:Boolean,sticky:Boolean,title:String,...q(),...ce()},"VListSubheader"),Is=L()({name:"VListSubheader",props:Pg(),setup(e,t){let{slots:n}=t;const{textColorClasses:l,textColorStyles:a}=Ge(F(e,"color"));return j(()=>{const o=!!(n.default||e.title);return r(e.tag,{class:["v-list-subheader",{"v-list-subheader--inset":e.inset,"v-list-subheader--sticky":e.sticky},l.value,e.class],style:[{textColorStyles:a},e.style]},{default:()=>{var i;return[o&&r("div",{class:"v-list-subheader__text"},[((i=n.default)==null?void 0:i.call(n))??e.title])]}})}),{}}});const Ag=E({color:String,inset:Boolean,length:[Number,String],thickness:[Number,String],vertical:Boolean,...q(),...ye()},"VDivider"),Ts=L()({name:"VDivider",props:Ag(),setup(e,t){let{attrs:n}=t;const{themeClasses:l}=be(e),{textColorClasses:a,textColorStyles:o}=Ge(F(e,"color")),i=g(()=>{const s={};return e.length&&(s[e.vertical?"maxHeight":"maxWidth"]=J(e.length)),e.thickness&&(s[e.vertical?"borderRightWidth":"borderTopWidth"]=J(e.thickness)),s});return j(()=>r("hr",{class:[{"v-divider":!0,"v-divider--inset":e.inset,"v-divider--vertical":e.vertical},l.value,a.value,e.class],style:[i.value,o.value,e.style],"aria-orientation":!n.role||n.role==="separator"?e.vertical?"vertical":"horizontal":void 0,role:`${n.role||"separator"}`},null)),{}}}),Bg=E({items:Array,returnObject:Boolean},"VListChildren"),Ps=L()({name:"VListChildren",props:Bg(),setup(e,t){let{slots:n}=t;return ps(),()=>{var l,a;return((l=n.default)==null?void 0:l.call(n))??((a=e.items)==null?void 0:a.map(o=>{var m,h;let{children:i,props:s,type:u,raw:c}=o;if(u==="divider")return((m=n.divider)==null?void 0:m.call(n,{props:s}))??r(Ts,s,null);if(u==="subheader")return((h=n.subheader)==null?void 0:h.call(n,{props:s}))??r(Is,s,null);const d={subtitle:n.subtitle?y=>{var b;return(b=n.subtitle)==null?void 0:b.call(n,{...y,item:c})}:void 0,prepend:n.prepend?y=>{var b;return(b=n.prepend)==null?void 0:b.call(n,{...y,item:c})}:void 0,append:n.append?y=>{var b;return(b=n.append)==null?void 0:b.call(n,{...y,item:c})}:void 0,title:n.title?y=>{var b;return(b=n.title)==null?void 0:b.call(n,{...y,item:c})}:void 0},[f,v]=ra.filterProps(s);return i?r(ra,Y({value:s==null?void 0:s.value},f),{activator:y=>{let{props:b}=y;const p={...s,...b,value:e.returnObject?c:s.value};return n.header?n.header({props:p}):r(_t,p,d)},default:()=>r(Ps,{items:i},n)}):n.item?n.item({props:s}):r(_t,Y(s,{value:e.returnObject?c:s.value}),d)}))}}}),As=E({items:{type:Array,default:()=>[]},itemTitle:{type:[String,Array,Function],default:"title"},itemValue:{type:[String,Array,Function],default:"value"},itemChildren:{type:[Boolean,String,Array,Function],default:"children"},itemProps:{type:[Boolean,String,Array,Function],default:"props"},returnObject:Boolean,valueComparator:{type:Function,default:yn}},"list-items");function Gt(e,t){const n=pt(t,e.itemTitle,t),l=pt(t,e.itemValue,n),a=pt(t,e.itemChildren),o=e.itemProps===!0?typeof t=="object"&&t!=null&&!Array.isArray(t)?"children"in t?Kt(t,["children"])[1]:t:void 0:pt(t,e.itemProps),i={title:n,value:l,...o};return{title:String(i.title??""),value:i.value,props:i,children:Array.isArray(a)?Bs(e,a):void 0,raw:t}}function Bs(e,t){const n=[];for(const l of t)n.push(Gt(e,l));return n}function to(e){const t=g(()=>Bs(e,e.items)),n=g(()=>t.value.some(o=>o.value===null));function l(o){return n.value||(o=o.filter(i=>i!==null)),o.map(i=>e.returnObject&&typeof i=="string"?Gt(e,i):t.value.find(s=>e.valueComparator(i,s.value))||Gt(e,i))}function a(o){return e.returnObject?o.map(i=>{let{raw:s}=i;return s}):o.map(i=>{let{value:s}=i;return s})}return{items:t,transformIn:l,transformOut:a}}function Eg(e){return typeof e=="string"||typeof e=="number"||typeof e=="boolean"}function Rg(e,t){const n=pt(t,e.itemType,"item"),l=Eg(t)?t:pt(t,e.itemTitle),a=pt(t,e.itemValue,void 0),o=pt(t,e.itemChildren),i=e.itemProps===!0?Kt(t,["children"])[1]:pt(t,e.itemProps),s={title:l,value:a,...i};return{type:n,title:s.title,value:s.value,props:s,children:n==="item"&&o?Es(e,o):void 0,raw:t}}function Es(e,t){const n=[];for(const l of t)n.push(Rg(e,l));return n}function Lg(e){return{items:g(()=>Es(e,e.items))}}const $g=E({baseColor:String,activeColor:String,activeClass:String,bgColor:String,disabled:Boolean,lines:{type:[Boolean,String],default:"one"},nav:Boolean,...xg({selectStrategy:"single-leaf",openStrategy:"list"}),...at(),...q(),...Fe(),...dt(),...Me(),itemType:{type:String,default:"type"},...As(),...Pe(),...ce(),...ye(),...mt({variant:"text"})},"VList"),Il=L()({name:"VList",props:$g(),emits:{"update:selected":e=>!0,"update:opened":e=>!0,"click:open":e=>!0,"click:select":e=>!0},setup(e,t){let{slots:n}=t;const{items:l}=Lg(e),{themeClasses:a}=be(e),{backgroundColorClasses:o,backgroundColorStyles:i}=Ee(F(e,"bgColor")),{borderClasses:s}=ft(e),{densityClasses:u}=Ye(e),{dimensionStyles:c}=vt(e),{elevationClasses:d}=He(e),{roundedClasses:f}=Be(e),{open:v,select:m}=Cg(e),h=g(()=>e.lines?`v-list--${e.lines}-line`:void 0),y=F(e,"activeColor"),b=F(e,"baseColor"),p=F(e,"color");ps(),$e({VListGroup:{activeColor:y,baseColor:b,color:p},VListItem:{activeClass:F(e,"activeClass"),activeColor:y,baseColor:b,color:p,density:F(e,"density"),disabled:F(e,"disabled"),lines:F(e,"lines"),nav:F(e,"nav"),variant:F(e,"variant")}});const S=K(!1),x=W();function I(w){S.value=!0}function V(w){S.value=!1}function C(w){var T;!S.value&&!(w.relatedTarget&&((T=x.value)!=null&&T.contains(w.relatedTarget)))&&k()}function P(w){if(x.value){if(w.key==="ArrowDown")k("next");else if(w.key==="ArrowUp")k("prev");else if(w.key==="Home")k("first");else if(w.key==="End")k("last");else return;w.preventDefault()}}function k(w){if(x.value)return dl(x.value,w)}return j(()=>r(e.tag,{ref:x,class:["v-list",{"v-list--disabled":e.disabled,"v-list--nav":e.nav},a.value,o.value,s.value,u.value,d.value,h.value,f.value,e.class],style:[i.value,c.value,e.style],tabindex:e.disabled||S.value?-1:0,role:"listbox","aria-activedescendant":void 0,onFocusin:I,onFocusout:V,onFocus:C,onKeydown:P},{default:()=>[r(Ps,{items:l.value,returnObject:e.returnObject},n)]})),{open:v,select:m,focus:k}}}),Og=yt("v-list-img"),Mg=E({start:Boolean,end:Boolean,...q(),...ce()},"VListItemAction"),Fg=L()({name:"VListItemAction",props:Mg(),setup(e,t){let{slots:n}=t;return j(()=>r(e.tag,{class:["v-list-item-action",{"v-list-item-action--start":e.start,"v-list-item-action--end":e.end},e.class],style:e.style},n)),{}}}),Ng=E({start:Boolean,end:Boolean,...q(),...ce()},"VListItemMedia"),Dg=L()({name:"VListItemMedia",props:Ng(),setup(e,t){let{slots:n}=t;return j(()=>r(e.tag,{class:["v-list-item-media",{"v-list-item-media--start":e.start,"v-list-item-media--end":e.end},e.class],style:e.style},n)),{}}});function Dl(e,t){return{x:e.x+t.x,y:e.y+t.y}}function zg(e,t){return{x:e.x-t.x,y:e.y-t.y}}function qo(e,t){if(e.side==="top"||e.side==="bottom"){const{side:n,align:l}=e,a=l==="left"?0:l==="center"?t.width/2:l==="right"?t.width:l,o=n==="top"?0:n==="bottom"?t.height:n;return Dl({x:a,y:o},t)}else if(e.side==="left"||e.side==="right"){const{side:n,align:l}=e,a=n==="left"?0:n==="right"?t.width:n,o=l==="top"?0:l==="center"?t.height/2:l==="bottom"?t.height:l;return Dl({x:a,y:o},t)}return Dl({x:t.width/2,y:t.height/2},t)}const Rs={static:Ug,connected:Wg},Hg=E({locationStrategy:{type:[String,Function],default:"static",validator:e=>typeof e=="function"||e in Rs},location:{type:String,default:"bottom"},origin:{type:String,default:"auto"},offset:[Number,String,Array]},"VOverlay-location-strategies");function jg(e,t){const n=W({}),l=W();Ce&&(Rt(()=>!!(t.isActive.value&&e.locationStrategy),o=>{var i,s;Z(()=>e.locationStrategy,o),Xe(()=>{l.value=void 0}),typeof e.locationStrategy=="function"?l.value=(i=e.locationStrategy(t,e,n))==null?void 0:i.updateLocation:l.value=(s=Rs[e.locationStrategy](t,e,n))==null?void 0:s.updateLocation}),window.addEventListener("resize",a,{passive:!0}),Xe(()=>{window.removeEventListener("resize",a),l.value=void 0}));function a(o){var i;(i=l.value)==null||i.call(l,o)}return{contentStyles:n,updateLocation:l}}function Ug(){}function Gg(e,t){t?e.style.removeProperty("left"):e.style.removeProperty("right");const n=Ra(e);return t?n.x+=parseFloat(e.style.right||0):n.x-=parseFloat(e.style.left||0),n.y-=parseFloat(e.style.top||0),n}function Wg(e,t,n){wm(e.activatorEl.value)&&Object.assign(n.value,{position:"fixed",top:0,[e.isRtl.value?"right":"left"]:0});const{preferredAnchor:a,preferredOrigin:o}=Ba(()=>{const h=Yl(t.location,e.isRtl.value),y=t.origin==="overlap"?h:t.origin==="auto"?Ol(h):Yl(t.origin,e.isRtl.value);return h.side===y.side&&h.align===Ml(y).align?{preferredAnchor:po(h),preferredOrigin:po(y)}:{preferredAnchor:h,preferredOrigin:y}}),[i,s,u,c]=["minWidth","minHeight","maxWidth","maxHeight"].map(h=>g(()=>{const y=parseFloat(t[h]);return isNaN(y)?1/0:y})),d=g(()=>{if(Array.isArray(t.offset))return t.offset;if(typeof t.offset=="string"){const h=t.offset.split(" ").map(parseFloat);return h.length<2&&h.push(0),h}return typeof t.offset=="number"?[t.offset,0]:[0,0]});let f=!1;const v=new ResizeObserver(()=>{f&&m()});Z([e.activatorEl,e.contentEl],(h,y)=>{let[b,p]=h,[S,x]=y;S&&v.unobserve(S),b&&v.observe(b),x&&v.unobserve(x),p&&v.observe(p)},{immediate:!0}),Xe(()=>{v.disconnect()});function m(){if(f=!1,requestAnimationFrame(()=>{requestAnimationFrame(()=>f=!0)}),!e.activatorEl.value||!e.contentEl.value)return;const h=e.activatorEl.value.getBoundingClientRect(),y=Gg(e.contentEl.value,e.isRtl.value),b=fl(e.contentEl.value),p=12;b.length||(b.push(document.documentElement),e.contentEl.value.style.top&&e.contentEl.value.style.left||(y.x-=parseFloat(document.documentElement.style.getPropertyValue("--v-body-scroll-x")||0),y.y-=parseFloat(document.documentElement.style.getPropertyValue("--v-body-scroll-y")||0)));const S=b.reduce((A,B)=>{const R=B.getBoundingClientRect(),M=new cn({x:B===document.documentElement?0:R.x,y:B===document.documentElement?0:R.y,width:B.clientWidth,height:B.clientHeight});return A?new cn({x:Math.max(A.left,M.left),y:Math.max(A.top,M.top),width:Math.min(A.right,M.right)-Math.max(A.left,M.left),height:Math.min(A.bottom,M.bottom)-Math.max(A.top,M.top)}):M},void 0);S.x+=p,S.y+=p,S.width-=p*2,S.height-=p*2;let x={anchor:a.value,origin:o.value};function I(A){const B=new cn(y),R=qo(A.anchor,h),M=qo(A.origin,B);let{x:X,y:$}=zg(R,M);switch(A.anchor.side){case"top":$-=d.value[0];break;case"bottom":$+=d.value[0];break;case"left":X-=d.value[0];break;case"right":X+=d.value[0];break}switch(A.anchor.align){case"top":$-=d.value[1];break;case"bottom":$+=d.value[1];break;case"left":X-=d.value[1];break;case"right":X+=d.value[1];break}return B.x+=X,B.y+=$,B.width=Math.min(B.width,u.value),B.height=Math.min(B.height,c.value),{overflows:So(B,S),x:X,y:$}}let V=0,C=0;const P={x:0,y:0},k={x:!1,y:!1};let w=-1;for(;!(w++>10);){const{x:A,y:B,overflows:R}=I(x);V+=A,C+=B,y.x+=A,y.y+=B;{const M=wo(x.anchor),X=R.x.before||R.x.after,$=R.y.before||R.y.after;let D=!1;if(["x","y"].forEach(O=>{if(O==="x"&&X&&!k.x||O==="y"&&$&&!k.y){const G={anchor:{...x.anchor},origin:{...x.origin}},U=O==="x"?M==="y"?Ml:Ol:M==="y"?Ol:Ml;G.anchor=U(G.anchor),G.origin=U(G.origin);const{overflows:z}=I(G);(z[O].before<=R[O].before&&z[O].after<=R[O].after||z[O].before+z[O].after<(R[O].before+R[O].after)/2)&&(x=G,D=k[O]=!0)}}),D)continue}R.x.before&&(V+=R.x.before,y.x+=R.x.before),R.x.after&&(V-=R.x.after,y.x-=R.x.after),R.y.before&&(C+=R.y.before,y.y+=R.y.before),R.y.after&&(C-=R.y.after,y.y-=R.y.after);{const M=So(y,S);P.x=S.width-M.x.before-M.x.after,P.y=S.height-M.y.before-M.y.after,V+=M.x.before,y.x+=M.x.before,C+=M.y.before,y.y+=M.y.before}break}const T=wo(x.anchor);return Object.assign(n.value,{"--v-overlay-anchor-origin":`${x.anchor.side} ${x.anchor.align}`,transformOrigin:`${x.origin.side} ${x.origin.align}`,top:J(zl(C)),left:e.isRtl.value?void 0:J(zl(V)),right:e.isRtl.value?J(zl(-V)):void 0,minWidth:J(T==="y"?Math.min(i.value,h.width):i.value),maxWidth:J(Xo(Ue(P.x,i.value===1/0?0:i.value,u.value))),maxHeight:J(Xo(Ue(P.y,s.value===1/0?0:s.value,c.value)))}),{available:P,contentBox:y}}return Z(()=>[a.value,o.value,t.offset,t.minWidth,t.minHeight,t.maxWidth,t.maxHeight],()=>m()),Ve(()=>{const h=m();if(!h)return;const{available:y,contentBox:b}=h;b.height>y.y&&requestAnimationFrame(()=>{m(),requestAnimationFrame(()=>{m()})})}),{updateLocation:m}}function zl(e){return Math.round(e*devicePixelRatio)/devicePixelRatio}function Xo(e){return Math.ceil(e*devicePixelRatio)/devicePixelRatio}let ua=!0;const gl=[];function Yg(e){!ua||gl.length?(gl.push(e),ca()):(ua=!1,e(),ca())}let Zo=-1;function ca(){cancelAnimationFrame(Zo),Zo=requestAnimationFrame(()=>{const e=gl.shift();e&&e(),gl.length?ca():ua=!0})}const sl={none:null,close:Xg,block:Zg,reposition:Jg},Kg=E({scrollStrategy:{type:[String,Function],default:"block",validator:e=>typeof e=="function"||e in sl}},"VOverlay-scroll-strategies");function qg(e,t){if(!Ce)return;let n;tt(async()=>{n==null||n.stop(),t.isActive.value&&e.scrollStrategy&&(n=xa(),await Ve(),n.active&&n.run(()=>{var l;typeof e.scrollStrategy=="function"?e.scrollStrategy(t,e,n):(l=sl[e.scrollStrategy])==null||l.call(sl,t,e,n)}))}),Xe(()=>{n==null||n.stop()})}function Xg(e){function t(n){e.isActive.value=!1}Ls(e.activatorEl.value??e.contentEl.value,t)}function Zg(e,t){var i;const n=(i=e.root.value)==null?void 0:i.offsetParent,l=[...new Set([...fl(e.activatorEl.value,t.contained?n:void 0),...fl(e.contentEl.value,t.contained?n:void 0)])].filter(s=>!s.classList.contains("v-overlay-scroll-blocked")),a=window.innerWidth-document.documentElement.offsetWidth,o=(s=>Ma(s)&&s)(n||document.documentElement);o&&e.root.value.classList.add("v-overlay--scroll-blocked"),l.forEach((s,u)=>{s.style.setProperty("--v-body-scroll-x",J(-s.scrollLeft)),s.style.setProperty("--v-body-scroll-y",J(-s.scrollTop)),s!==document.documentElement&&s.style.setProperty("--v-scrollbar-offset",J(a)),s.classList.add("v-overlay-scroll-blocked")}),Xe(()=>{l.forEach((s,u)=>{const c=parseFloat(s.style.getPropertyValue("--v-body-scroll-x")),d=parseFloat(s.style.getPropertyValue("--v-body-scroll-y"));s.style.removeProperty("--v-body-scroll-x"),s.style.removeProperty("--v-body-scroll-y"),s.style.removeProperty("--v-scrollbar-offset"),s.classList.remove("v-overlay-scroll-blocked"),s.scrollLeft=-c,s.scrollTop=-d}),o&&e.root.value.classList.remove("v-overlay--scroll-blocked")})}function Jg(e,t,n){let l=!1,a=-1,o=-1;function i(s){Yg(()=>{var d,f;const u=performance.now();(f=(d=e.updateLocation).value)==null||f.call(d,s),l=(performance.now()-u)/(1e3/60)>2})}o=(typeof requestIdleCallback>"u"?s=>s():requestIdleCallback)(()=>{n.run(()=>{Ls(e.activatorEl.value??e.contentEl.value,s=>{l?(cancelAnimationFrame(a),a=requestAnimationFrame(()=>{a=requestAnimationFrame(()=>{i(s)})})):i(s)})})}),Xe(()=>{typeof cancelIdleCallback<"u"&&cancelIdleCallback(o),cancelAnimationFrame(a)})}function Ls(e,t){const n=[document,...fl(e)];n.forEach(l=>{l.addEventListener("scroll",t,{passive:!0})}),Xe(()=>{n.forEach(l=>{l.removeEventListener("scroll",t)})})}const da=Symbol.for("vuetify:v-menu"),$s=E({closeDelay:[Number,String],openDelay:[Number,String]},"delay");function Os(e,t){const n={},l=a=>()=>{if(!Ce)return Promise.resolve(!0);const o=a==="openDelay";return n.closeDelay&&window.clearTimeout(n.closeDelay),delete n.closeDelay,n.openDelay&&window.clearTimeout(n.openDelay),delete n.openDelay,new Promise(i=>{const s=parseInt(e[a]??0,10);n[a]=window.setTimeout(()=>{t==null||t(o),i(o)},s)})};return{runCloseDelay:l("closeDelay"),runOpenDelay:l("openDelay")}}const Qg=E({activator:[String,Object],activatorProps:{type:Object,default:()=>({})},openOnClick:{type:Boolean,default:void 0},openOnHover:Boolean,openOnFocus:{type:Boolean,default:void 0},closeOnContentClick:Boolean,...$s()},"VOverlay-activator");function ey(e,t){let{isActive:n,isTop:l}=t;const a=W();let o=!1,i=!1,s=!0;const u=g(()=>e.openOnFocus||e.openOnFocus==null&&e.openOnHover),c=g(()=>e.openOnClick||e.openOnClick==null&&!e.openOnHover&&!u.value),{runOpenDelay:d,runCloseDelay:f}=Os(e,x=>{x===(e.openOnHover&&o||u.value&&i)&&!(e.openOnHover&&n.value&&!l.value)&&(n.value!==x&&(s=!0),n.value=x)}),v={onClick:x=>{x.stopPropagation(),a.value=x.currentTarget||x.target,n.value=!n.value},onMouseenter:x=>{var I;(I=x.sourceCapabilities)!=null&&I.firesTouchEvents||(o=!0,a.value=x.currentTarget||x.target,d())},onMouseleave:x=>{o=!1,f()},onFocus:x=>{vn(x.target,":focus-visible")!==!1&&(i=!0,x.stopPropagation(),a.value=x.currentTarget||x.target,d())},onBlur:x=>{i=!1,x.stopPropagation(),f()}},m=g(()=>{const x={};return c.value&&(x.onClick=v.onClick),e.openOnHover&&(x.onMouseenter=v.onMouseenter,x.onMouseleave=v.onMouseleave),u.value&&(x.onFocus=v.onFocus,x.onBlur=v.onBlur),x}),h=g(()=>{const x={};if(e.openOnHover&&(x.onMouseenter=()=>{o=!0,d()},x.onMouseleave=()=>{o=!1,f()}),u.value&&(x.onFocusin=()=>{i=!0,d()},x.onFocusout=()=>{i=!1,f()}),e.closeOnContentClick){const I=_e(da,null);x.onClick=()=>{n.value=!1,I==null||I.closeParents()}}return x}),y=g(()=>{const x={};return e.openOnHover&&(x.onMouseenter=()=>{s&&(o=!0,s=!1,d())},x.onMouseleave=()=>{o=!1,f()}),x});Z(l,x=>{x&&(e.openOnHover&&!o&&(!u.value||!i)||u.value&&!i&&(!e.openOnHover||!o))&&(n.value=!1)});const b=W();tt(()=>{b.value&&Ve(()=>{a.value=Gl(b.value)})});const p=Ne("useActivator");let S;return Z(()=>!!e.activator,x=>{x&&Ce?(S=xa(),S.run(()=>{ty(e,p,{activatorEl:a,activatorEvents:m})})):S&&S.stop()},{flush:"post",immediate:!0}),Xe(()=>{S==null||S.stop()}),{activatorEl:a,activatorRef:b,activatorEvents:m,contentEvents:h,scrimEvents:y}}function ty(e,t,n){let{activatorEl:l,activatorEvents:a}=n;Z(()=>e.activator,(u,c)=>{if(c&&u!==c){const d=s(c);d&&i(d)}u&&Ve(()=>o())},{immediate:!0}),Z(()=>e.activatorProps,()=>{o()}),Xe(()=>{i()});function o(){let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:s(),c=arguments.length>1&&arguments[1]!==void 0?arguments[1]:e.activatorProps;u&&Kf(u,Y(a.value,c))}function i(){let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:s(),c=arguments.length>1&&arguments[1]!==void 0?arguments[1]:e.activatorProps;u&&qf(u,Y(a.value,c))}function s(){var d,f;let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:e.activator,c;if(u)if(u==="parent"){let v=(f=(d=t==null?void 0:t.proxy)==null?void 0:d.$el)==null?void 0:f.parentNode;for(;v!=null&&v.hasAttribute("data-no-activator");)v=v.parentNode;c=v}else typeof u=="string"?c=document.querySelector(u):"$el"in u?c=u.$el:c=u;return l.value=(c==null?void 0:c.nodeType)===Node.ELEMENT_NODE?c:null,l.value}}function Ms(){if(!Ce)return K(!1);const{ssr:e}=en();if(e){const t=K(!1);return Je(()=>{t.value=!0}),t}else return K(!0)}const Tl=E({eager:Boolean},"lazy");function no(e,t){const n=K(!1),l=g(()=>n.value||e.eager||t.value);Z(t,()=>n.value=!0);function a(){e.eager||(n.value=!1)}return{isBooted:n,hasContent:l,onAfterLeave:a}}function In(){const t=Ne("useScopeId").vnode.scopeId;return{scopeId:t?{[t]:""}:void 0}}const Jo=Symbol.for("vuetify:stack"),An=ht([]);function ny(e,t,n){const l=Ne("useStack"),a=!n,o=_e(Jo,void 0),i=ht({activeChildren:new Set});Oe(Jo,i);const s=K(+t.value);Rt(e,()=>{var f;const d=(f=An.at(-1))==null?void 0:f[1];s.value=d?d+10:+t.value,a&&An.push([l.uid,s.value]),o==null||o.activeChildren.add(l.uid),Xe(()=>{if(a){const v=$t(An).findIndex(m=>m[0]===l.uid);An.splice(v,1)}o==null||o.activeChildren.delete(l.uid)})});const u=K(!0);a&&tt(()=>{var f;const d=((f=An.at(-1))==null?void 0:f[0])===l.uid;setTimeout(()=>u.value=d)});const c=g(()=>!i.activeChildren.size);return{globalTop:Ca(u),localTop:c,stackStyles:g(()=>({zIndex:s.value}))}}function ly(e){return{teleportTarget:g(()=>{const n=e.value;if(n===!0||!Ce)return;const l=n===!1?document.body:typeof n=="string"?document.querySelector(n):n;if(l==null)return;let a=l.querySelector(":scope > .v-overlay-container");return a||(a=document.createElement("div"),a.className="v-overlay-container",l.appendChild(a)),a})}}function ay(){return!0}function Fs(e,t,n){if(!e||Ns(e,n)===!1)return!1;const l=Ri(t);if(typeof ShadowRoot<"u"&&l instanceof ShadowRoot&&l.host===e.target)return!1;const a=(typeof n.value=="object"&&n.value.include||(()=>[]))();return a.push(t),!a.some(o=>o==null?void 0:o.contains(e.target))}function Ns(e,t){return(typeof t.value=="object"&&t.value.closeConditional||ay)(e)}function oy(e,t,n){const l=typeof n.value=="function"?n.value:n.value.handler;t._clickOutside.lastMousedownWasOutside&&Fs(e,t,n)&&setTimeout(()=>{Ns(e,n)&&l&&l(e)},0)}function Qo(e,t){const n=Ri(e);t(document),typeof ShadowRoot<"u"&&n instanceof ShadowRoot&&t(n)}const Ds={mounted(e,t){const n=a=>oy(a,e,t),l=a=>{e._clickOutside.lastMousedownWasOutside=Fs(a,e,t)};Qo(e,a=>{a.addEventListener("click",n,!0),a.addEventListener("mousedown",l,!0)}),e._clickOutside||(e._clickOutside={lastMousedownWasOutside:!1}),e._clickOutside[t.instance.$.uid]={onClick:n,onMousedown:l}},unmounted(e,t){e._clickOutside&&(Qo(e,n=>{var o;if(!n||!((o=e._clickOutside)!=null&&o[t.instance.$.uid]))return;const{onClick:l,onMousedown:a}=e._clickOutside[t.instance.$.uid];n.removeEventListener("click",l,!0),n.removeEventListener("mousedown",a,!0)}),delete e._clickOutside[t.instance.$.uid])}};function iy(e){const{modelValue:t,color:n,...l}=e;return r(Et,{name:"fade-transition",appear:!0},{default:()=>[e.modelValue&&r("div",Y({class:["v-overlay__scrim",e.color.backgroundColorClasses.value],style:e.color.backgroundColorStyles.value},l),null)]})}const qn=E({absolute:Boolean,attach:[Boolean,String,Object],closeOnBack:{type:Boolean,default:!0},contained:Boolean,contentClass:null,contentProps:null,disabled:Boolean,noClickAnimation:Boolean,modelValue:Boolean,persistent:Boolean,scrim:{type:[Boolean,String],default:!0},zIndex:{type:[Number,String],default:2e3},...Qg(),...q(),...dt(),...Tl(),...Hg(),...Kg(),...ye(),...Pt()},"VOverlay"),It=L()({name:"VOverlay",directives:{ClickOutside:Ds},inheritAttrs:!1,props:{_disableGlobalStack:Boolean,...qn()},emits:{"click:outside":e=>!0,"update:modelValue":e=>!0,afterLeave:()=>!0},setup(e,t){let{slots:n,attrs:l,emit:a}=t;const o=ue(e,"modelValue"),i=g({get:()=>o.value,set:G=>{G&&e.disabled||(o.value=G)}}),{teleportTarget:s}=ly(g(()=>e.attach||e.contained)),{themeClasses:u}=be(e),{rtlClasses:c,isRtl:d}=De(),{hasContent:f,onAfterLeave:v}=no(e,i),m=Ee(g(()=>typeof e.scrim=="string"?e.scrim:null)),{globalTop:h,localTop:y,stackStyles:b}=ny(i,F(e,"zIndex"),e._disableGlobalStack),{activatorEl:p,activatorRef:S,activatorEvents:x,contentEvents:I,scrimEvents:V}=ey(e,{isActive:i,isTop:y}),{dimensionStyles:C}=vt(e),P=Ms(),{scopeId:k}=In();Z(()=>e.disabled,G=>{G&&(i.value=!1)});const w=W(),T=W(),{contentStyles:A,updateLocation:B}=jg(e,{isRtl:d,contentEl:T,activatorEl:p,isActive:i});qg(e,{root:w,contentEl:T,activatorEl:p,isActive:i,updateLocation:B});function R(G){a("click:outside",G),e.persistent?O():i.value=!1}function M(){return i.value&&h.value}Ce&&Z(i,G=>{G?window.addEventListener("keydown",X):window.removeEventListener("keydown",X)},{immediate:!0});function X(G){var U,z;G.key==="Escape"&&h.value&&(e.persistent?O():(i.value=!1,(U=T.value)!=null&&U.contains(document.activeElement)&&((z=p.value)==null||z.focus())))}const $=es();Rt(()=>e.closeOnBack,()=>{Yh($,G=>{h.value&&i.value?(G(!1),e.persistent?O():i.value=!1):G()})});const D=W();Z(()=>i.value&&(e.absolute||e.contained)&&s.value==null,G=>{if(G){const U=Oa(w.value);U&&U!==document.scrollingElement&&(D.value=U.scrollTop)}});function O(){e.noClickAnimation||T.value&&Ut(T.value,[{transformOrigin:"center"},{transform:"scale(1.03)"},{transformOrigin:"center"}],{duration:150,easing:$n})}return j(()=>{var G;return r(ae,null,[(G=n.activator)==null?void 0:G.call(n,{isActive:i.value,props:Y({ref:S},x.value,e.activatorProps)}),P.value&&f.value&&r(Dr,{disabled:!s.value,to:s.value},{default:()=>[r("div",Y({class:["v-overlay",{"v-overlay--absolute":e.absolute||e.contained,"v-overlay--active":i.value,"v-overlay--contained":e.contained},u.value,c.value,e.class],style:[b.value,{top:J(D.value)},e.style],ref:w},k,l),[r(iy,Y({color:m,modelValue:i.value&&!!e.scrim},V.value),null),r(gt,{appear:!0,persisted:!0,transition:e.transition,target:p.value,onAfterLeave:()=>{v(),a("afterLeave")}},{default:()=>{var U;return[ne(r("div",Y({ref:T,class:["v-overlay__content",e.contentClass],style:[C.value,A.value]},I.value,e.contentProps),[(U=n.default)==null?void 0:U.call(n,{isActive:i})]),[[Te,i.value],[Ze("click-outside"),{handler:R,closeConditional:M,include:()=>[p.value]}]])]}})])]})])}),{activatorEl:p,animateClick:O,contentEl:T,globalTop:h,localTop:y,updateLocation:B}}}),Hl=Symbol("Forwarded refs");function jl(e,t){let n=e;for(;n;){const l=Reflect.getOwnPropertyDescriptor(n,t);if(l)return l;n=Object.getPrototypeOf(n)}}function bt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),l=1;l<t;l++)n[l-1]=arguments[l];return e[Hl]=n,new Proxy(e,{get(a,o){if(Reflect.has(a,o))return Reflect.get(a,o);if(!(typeof o=="symbol"||o.startsWith("__"))){for(const i of n)if(i.value&&Reflect.has(i.value,o)){const s=Reflect.get(i.value,o);return typeof s=="function"?s.bind(i.value):s}}},has(a,o){if(Reflect.has(a,o))return!0;if(typeof o=="symbol"||o.startsWith("__"))return!1;for(const i of n)if(i.value&&Reflect.has(i.value,o))return!0;return!1},set(a,o,i){if(Reflect.has(a,o))return Reflect.set(a,o,i);if(typeof o=="symbol"||o.startsWith("__"))return!1;for(const s of n)if(s.value&&Reflect.has(s.value,o))return Reflect.set(s.value,o,i);return!1},getOwnPropertyDescriptor(a,o){var s;const i=Reflect.getOwnPropertyDescriptor(a,o);if(i)return i;if(!(typeof o=="symbol"||o.startsWith("__"))){for(const u of n){if(!u.value)continue;const c=jl(u.value,o)??("_"in u.value?jl((s=u.value._)==null?void 0:s.setupState,o):void 0);if(c)return c}for(const u of n){const c=u.value&&u.value[Hl];if(!c)continue;const d=c.slice();for(;d.length;){const f=d.shift(),v=jl(f.value,o);if(v)return v;const m=f.value&&f.value[Hl];m&&d.push(...m)}}}}})}const sy=E({id:String,...rt(qn({closeDelay:250,closeOnContentClick:!0,locationStrategy:"connected",openDelay:300,scrim:!1,scrollStrategy:"reposition",transition:{component:Sl}}),["absolute"])},"VMenu"),Pl=L()({name:"VMenu",props:sy(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{scopeId:a}=In(),o=We(),i=g(()=>e.id||`v-menu-${o}`),s=W(),u=_e(da,null),c=K(0);Oe(da,{register(){++c.value},unregister(){--c.value},closeParents(){setTimeout(()=>{c.value||(l.value=!1,u==null||u.closeParents())},40)}});async function d(y){var S,x,I;const b=y.relatedTarget,p=y.target;await Ve(),l.value&&b!==p&&((S=s.value)!=null&&S.contentEl)&&((x=s.value)!=null&&x.globalTop)&&![document,s.value.contentEl].includes(p)&&!s.value.contentEl.contains(p)&&((I=Ln(s.value.contentEl)[0])==null||I.focus())}Z(l,y=>{y?(u==null||u.register(),document.addEventListener("focusin",d,{once:!0})):(u==null||u.unregister(),document.removeEventListener("focusin",d))});function f(){u==null||u.closeParents()}function v(y){var b,p,S;e.disabled||y.key==="Tab"&&(wi(Ln((b=s.value)==null?void 0:b.contentEl,!1),y.shiftKey?"prev":"next",I=>I.tabIndex>=0)||(l.value=!1,(S=(p=s.value)==null?void 0:p.activatorEl)==null||S.focus()))}function m(y){var p;if(e.disabled)return;const b=(p=s.value)==null?void 0:p.contentEl;b&&l.value?y.key==="ArrowDown"?(y.preventDefault(),dl(b,"next")):y.key==="ArrowUp"&&(y.preventDefault(),dl(b,"prev")):["ArrowDown","ArrowUp"].includes(y.key)&&(l.value=!0,y.preventDefault(),setTimeout(()=>setTimeout(()=>m(y))))}const h=g(()=>Y({"aria-haspopup":"menu","aria-expanded":String(l.value),"aria-owns":i.value,onKeydown:m},e.activatorProps));return j(()=>{const[y]=It.filterProps(e);return r(It,Y({ref:s,class:["v-menu",e.class],style:e.style},y,{modelValue:l.value,"onUpdate:modelValue":b=>l.value=b,absolute:!0,activatorProps:h.value,"onClick:outside":f,onKeydown:v},a),{activator:n.activator,default:function(){for(var b=arguments.length,p=new Array(b),S=0;S<b;S++)p[S]=arguments[S];return r(we,{root:"VMenu"},{default:()=>{var x;return[(x=n.default)==null?void 0:x.call(n,...p)]}})}})}),bt({id:i,ΨopenChildren:c},s)}});const ry=E({active:Boolean,max:[Number,String],value:{type:[Number,String],default:0},...q(),...Pt({transition:{component:ja}})},"VCounter"),Al=L()({name:"VCounter",functional:!0,props:ry(),setup(e,t){let{slots:n}=t;const l=g(()=>e.max?`${e.value} / ${e.max}`:String(e.value));return j(()=>r(gt,{transition:e.transition},{default:()=>[ne(r("div",{class:["v-counter",e.class],style:e.style},[n.default?n.default({counter:l.value,max:e.max,value:e.value}):l.value]),[[Te,e.active]])]})),{}}});const uy=E({floating:Boolean,...q()},"VFieldLabel"),Bn=L()({name:"VFieldLabel",props:uy(),setup(e,t){let{slots:n}=t;return j(()=>r(_n,{class:["v-field-label",{"v-field-label--floating":e.floating},e.class],style:e.style,"aria-hidden":e.floating||void 0},n)),{}}}),cy=["underlined","outlined","filled","solo","solo-inverted","solo-filled","plain"],Bl=E({appendInnerIcon:se,bgColor:String,clearable:Boolean,clearIcon:{type:se,default:"$clear"},active:Boolean,centerAffix:{type:Boolean,default:void 0},color:String,baseColor:String,dirty:Boolean,disabled:{type:Boolean,default:null},error:Boolean,flat:Boolean,label:String,persistentClear:Boolean,prependInnerIcon:se,reverse:Boolean,singleLine:Boolean,variant:{type:String,default:"filled",validator:e=>cy.includes(e)},"onClick:clear":St(),"onClick:appendInner":St(),"onClick:prependInner":St(),...q(),...Xa(),...Pe(),...ye()},"VField"),Xn=L()({name:"VField",inheritAttrs:!1,props:{id:String,...Vl(),...Bl()},emits:{"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{themeClasses:o}=be(e),{loaderClasses:i}=xl(e),{focusClasses:s,isFocused:u,focus:c,blur:d}=Nt(e),{InputIcon:f}=fs(e),{roundedClasses:v}=Be(e),{rtlClasses:m}=De(),h=g(()=>e.dirty||e.active),y=g(()=>!e.singleLine&&!!(e.label||a.label)),b=We(),p=g(()=>e.id||`input-${b}`),S=g(()=>`${p.value}-messages`),x=W(),I=W(),V=W(),C=g(()=>["plain","underlined"].includes(e.variant)),{backgroundColorClasses:P,backgroundColorStyles:k}=Ee(F(e,"bgColor")),{textColorClasses:w,textColorStyles:T}=Ge(g(()=>e.error||e.disabled?void 0:h.value&&u.value?e.color:e.baseColor));Z(h,R=>{if(y.value){const M=x.value.$el,X=I.value.$el;requestAnimationFrame(()=>{const $=Ra(M),D=X.getBoundingClientRect(),O=D.x-$.x,G=D.y-$.y-($.height/2-D.height/2),U=D.width/.75,z=Math.abs(U-$.width)>1?{maxWidth:J(U)}:void 0,oe=getComputedStyle(M),re=getComputedStyle(X),ve=parseFloat(oe.transitionDuration)*1e3||150,ge=parseFloat(re.getPropertyValue("--v-field-label-scale")),N=re.getPropertyValue("color");M.style.visibility="visible",X.style.visibility="hidden",Ut(M,{transform:`translate(${O}px, ${G}px) scale(${ge})`,color:N,...z},{duration:ve,easing:$n,direction:R?"normal":"reverse"}).finished.then(()=>{M.style.removeProperty("visibility"),X.style.removeProperty("visibility")})})}},{flush:"post"});const A=g(()=>({isActive:h,isFocused:u,controlRef:V,blur:d,focus:c}));function B(R){R.target!==document.activeElement&&R.preventDefault()}return j(()=>{var O,G,U;const R=e.variant==="outlined",M=a["prepend-inner"]||e.prependInnerIcon,X=!!(e.clearable||a.clear),$=!!(a["append-inner"]||e.appendInnerIcon||X),D=a.label?a.label({...A.value,label:e.label,props:{for:p.value}}):e.label;return r("div",Y({class:["v-field",{"v-field--active":h.value,"v-field--appended":$,"v-field--center-affix":e.centerAffix??!C.value,"v-field--disabled":e.disabled,"v-field--dirty":e.dirty,"v-field--error":e.error,"v-field--flat":e.flat,"v-field--has-background":!!e.bgColor,"v-field--persistent-clear":e.persistentClear,"v-field--prepended":M,"v-field--reverse":e.reverse,"v-field--single-line":e.singleLine,"v-field--no-label":!D,[`v-field--variant-${e.variant}`]:!0},o.value,P.value,s.value,i.value,v.value,m.value,e.class],style:[k.value,e.style],onClick:B},n),[r("div",{class:"v-field__overlay"},null),r(Za,{name:"v-field",active:!!e.loading,color:e.error?"error":typeof e.loading=="string"?e.loading:e.color},{default:a.loader}),M&&r("div",{key:"prepend",class:"v-field__prepend-inner"},[e.prependInnerIcon&&r(f,{key:"prepend-icon",name:"prependInner"},null),(O=a["prepend-inner"])==null?void 0:O.call(a,A.value)]),r("div",{class:"v-field__field","data-no-activator":""},[["filled","solo","solo-inverted","solo-filled"].includes(e.variant)&&y.value&&r(Bn,{key:"floating-label",ref:I,class:[w.value],floating:!0,for:p.value,style:T.value},{default:()=>[D]}),r(Bn,{ref:x,for:p.value},{default:()=>[D]}),(G=a.default)==null?void 0:G.call(a,{...A.value,props:{id:p.value,class:"v-field__input","aria-describedby":S.value},focus:c,blur:d})]),X&&r(Ua,{key:"clear"},{default:()=>[ne(r("div",{class:"v-field__clearable",onMousedown:z=>{z.preventDefault(),z.stopPropagation()}},[a.clear?a.clear():r(f,{name:"clear"},null)]),[[Te,e.dirty]])]}),$&&r("div",{key:"append",class:"v-field__append-inner"},[(U=a["append-inner"])==null?void 0:U.call(a,A.value),e.appendInnerIcon&&r(f,{key:"append-icon",name:"appendInner"},null)]),r("div",{class:["v-field__outline",w.value],style:T.value},[R&&r(ae,null,[r("div",{class:"v-field__outline__start"},null),y.value&&r("div",{class:"v-field__outline__notch"},[r(Bn,{ref:I,floating:!0,for:p.value},{default:()=>[D]})]),r("div",{class:"v-field__outline__end"},null)]),C.value&&y.value&&r(Bn,{ref:I,floating:!0,for:p.value},{default:()=>[D]})])])}),{controlRef:V}}});function lo(e){const t=Object.keys(Xn.props).filter(n=>!Aa(n)&&n!=="class"&&n!=="style");return Kt(e,t)}const dy=["color","file","time","date","datetime-local","week","month"],El=E({autofocus:Boolean,counter:[Boolean,Number,String],counterValue:[Number,Function],prefix:String,placeholder:String,persistentPlaceholder:Boolean,persistentCounter:Boolean,suffix:String,role:String,type:{type:String,default:"text"},modelModifiers:Object,...Bt(),...Bl()},"VTextField"),Zt=L()({name:"VTextField",directives:{Intersect:Gn},inheritAttrs:!1,props:El(),emits:{"click:control":e=>!0,"mousedown:control":e=>!0,"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const o=ue(e,"modelValue"),{isFocused:i,focus:s,blur:u}=Nt(e),c=g(()=>typeof e.counterValue=="function"?e.counterValue(o.value):typeof e.counterValue=="number"?e.counterValue:(o.value??"").toString().length),d=g(()=>{if(n.maxlength)return n.maxlength;if(!(!e.counter||typeof e.counter!="number"&&typeof e.counter!="string"))return e.counter}),f=g(()=>["plain","underlined"].includes(e.variant));function v(C,P){var k,w;!e.autofocus||!C||(w=(k=P[0].target)==null?void 0:k.focus)==null||w.call(k)}const m=W(),h=W(),y=W(),b=g(()=>dy.includes(e.type)||e.persistentPlaceholder||i.value||e.active);function p(){var C;y.value!==document.activeElement&&((C=y.value)==null||C.focus()),i.value||s()}function S(C){l("mousedown:control",C),C.target!==y.value&&(p(),C.preventDefault())}function x(C){p(),l("click:control",C)}function I(C){C.stopPropagation(),p(),Ve(()=>{o.value=null,Ea(e["onClick:clear"],C)})}function V(C){var k;const P=C.target;if(o.value=P.value,(k=e.modelModifiers)!=null&&k.trim&&["text","search","password","tel","url"].includes(e.type)){const w=[P.selectionStart,P.selectionEnd];Ve(()=>{P.selectionStart=w[0],P.selectionEnd=w[1]})}}return j(()=>{const C=!!(a.counter||e.counter||e.counterValue),P=!!(C||a.details),[k,w]=Qt(n),[{modelValue:T,...A}]=ze.filterProps(e),[B]=lo(e);return r(ze,Y({ref:m,modelValue:o.value,"onUpdate:modelValue":R=>o.value=R,class:["v-text-field",{"v-text-field--prefixed":e.prefix,"v-text-field--suffixed":e.suffix,"v-text-field--plain-underlined":["plain","underlined"].includes(e.variant)},e.class],style:e.style},k,A,{centerAffix:!f.value,focused:i.value}),{...a,default:R=>{let{id:M,isDisabled:X,isDirty:$,isReadonly:D,isValid:O}=R;return r(Xn,Y({ref:h,onMousedown:S,onClick:x,"onClick:clear":I,"onClick:prependInner":e["onClick:prependInner"],"onClick:appendInner":e["onClick:appendInner"],role:e.role},B,{id:M.value,active:b.value||$.value,dirty:$.value||e.dirty,disabled:X.value,focused:i.value,error:O.value===!1}),{...a,default:G=>{let{props:{class:U,...z}}=G;const oe=ne(r("input",Y({ref:y,value:o.value,onInput:V,autofocus:e.autofocus,readonly:D.value,disabled:X.value,name:e.name,placeholder:e.placeholder,size:1,type:e.type,onFocus:p,onBlur:u},z,w),null),[[Ze("intersect"),{handler:v},null,{once:!0}]]);return r(ae,null,[e.prefix&&r("span",{class:"v-text-field__prefix"},[r("span",{class:"v-text-field__prefix__text"},[e.prefix])]),a.default?r("div",{class:U,"data-no-activator":""},[a.default(),oe]):zr(oe,{class:U}),e.suffix&&r("span",{class:"v-text-field__suffix"},[r("span",{class:"v-text-field__suffix__text"},[e.suffix])])])}})},details:P?R=>{var M;return r(ae,null,[(M=a.details)==null?void 0:M.call(a,R),C&&r(ae,null,[r("span",null,null),r(Al,{active:e.persistentCounter||i.value,value:c.value,max:d.value},a.counter)])])}:void 0})}),bt({},m,h,y)}});const vy=E({renderless:Boolean,...q()},"VVirtualScrollItem"),fy=L()({name:"VVirtualScrollItem",inheritAttrs:!1,props:vy(),emits:{"update:height":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{resizeRef:o,contentRect:i}=kt(void 0,"border");Z(()=>{var s;return(s=i.value)==null?void 0:s.height},s=>{s!=null&&l("update:height",s)}),j(()=>{var s,u;return e.renderless?r(ae,null,[(s=a.default)==null?void 0:s.call(a,{itemRef:o})]):r("div",Y({ref:o,class:["v-virtual-scroll__item",e.class],style:e.style},n),[(u=a.default)==null?void 0:u.call(a)])})}}),ei=-1,ti=1,my=E({itemHeight:{type:[Number,String],default:48}},"virtual");function hy(e,t,n){const l=K(0),a=K(e.itemHeight),o=g({get:()=>parseInt(a.value??0,10),set(P){a.value=P}}),i=W(),{resizeRef:s,contentRect:u}=kt();tt(()=>{s.value=i.value});const c=en(),d=new Map;let f=Array.from({length:t.value.length});const v=g(()=>{const P=(!u.value||i.value===document.documentElement?c.height.value:u.value.height)-((n==null?void 0:n.value)??0);return Math.ceil(P/o.value*1.7+1)});function m(P,k){o.value=Math.max(o.value,k),f[P]=k,d.set(t.value[P],k)}function h(P){return f.slice(0,P).reduce((k,w)=>k+(w||o.value),0)}function y(P){const k=t.value.length;let w=0,T=0;for(;T<P&&w<k;)T+=f[w++]||o.value;return w-1}let b=0;function p(){if(!i.value||!u.value)return;const P=u.value.height-56,k=i.value.scrollTop,w=k<b?ei:ti,T=y(k+P/2),A=Math.round(v.value/3),B=T-A,R=l.value+A*2-1;w===ei&&T<=R?l.value=Ue(B,0,t.value.length):w===ti&&T>=R&&(l.value=Ue(B,0,t.value.length-v.value)),b=k}function S(P){if(!i.value)return;const k=h(P);i.value.scrollTop=k}const x=g(()=>Math.min(t.value.length,l.value+v.value)),I=g(()=>t.value.slice(l.value,x.value).map((P,k)=>({raw:P,index:k+l.value}))),V=g(()=>h(l.value)),C=g(()=>h(t.value.length)-h(x.value));return Z(()=>t.value.length,()=>{f=Ct(t.value.length).map(()=>o.value),d.forEach((P,k)=>{const w=t.value.indexOf(k);w===-1?d.delete(k):f[w]=P})}),{containerRef:i,computedItems:I,itemHeight:o,paddingTop:V,paddingBottom:C,scrollToIndex:S,handleScroll:p,handleItemResize:m}}const gy=E({items:{type:Array,default:()=>[]},renderless:Boolean,...my(),...q(),...dt()},"VVirtualScroll"),Rl=L()({name:"VVirtualScroll",props:gy(),setup(e,t){let{slots:n}=t;const l=Ne("VVirtualScroll"),{dimensionStyles:a}=vt(e),{containerRef:o,handleScroll:i,handleItemResize:s,scrollToIndex:u,paddingTop:c,paddingBottom:d,computedItems:f}=hy(e,F(e,"items"));return Rt(()=>e.renderless,()=>{Je(()=>{var v;o.value=Oa(l.vnode.el,!0),(v=o.value)==null||v.addEventListener("scroll",i)}),Xe(()=>{var v;(v=o.value)==null||v.removeEventListener("scroll",i)})}),j(()=>{const v=f.value.map(m=>r(fy,{key:m.index,renderless:e.renderless,"onUpdate:height":h=>s(m.index,h)},{default:h=>{var y;return(y=n.default)==null?void 0:y.call(n,{item:m.raw,index:m.index,...h})}}));return e.renderless?r(ae,null,[r("div",{class:"v-virtual-scroll__spacer",style:{paddingTop:J(c.value)}},null),v,r("div",{class:"v-virtual-scroll__spacer",style:{paddingBottom:J(d.value)}},null)]):r("div",{ref:o,class:["v-virtual-scroll",e.class],onScroll:i,style:[a.value,e.style]},[r("div",{class:"v-virtual-scroll__container",style:{paddingTop:J(c.value),paddingBottom:J(d.value)}},[v])])}),{scrollToIndex:u}}});function ao(e,t){const n=K(!1);let l;function a(s){cancelAnimationFrame(l),n.value=!0,l=requestAnimationFrame(()=>{l=requestAnimationFrame(()=>{n.value=!1})})}async function o(){await new Promise(s=>requestAnimationFrame(s)),await new Promise(s=>requestAnimationFrame(s)),await new Promise(s=>requestAnimationFrame(s)),await new Promise(s=>{if(n.value){const u=Z(n,()=>{u(),s()})}else s()})}async function i(s){var d,f;if(s.key==="Tab"&&((d=t.value)==null||d.focus()),!["PageDown","PageUp","Home","End"].includes(s.key))return;const u=(f=e.value)==null?void 0:f.$el;if(!u)return;(s.key==="Home"||s.key==="End")&&u.scrollTo({top:s.key==="Home"?0:u.scrollHeight,behavior:"smooth"}),await o();const c=u.querySelectorAll(":scope > :not(.v-virtual-scroll__spacer)");if(s.key==="PageDown"||s.key==="Home"){const v=u.getBoundingClientRect().top;for(const m of c)if(m.getBoundingClientRect().top>=v){m.focus();break}}else{const v=u.getBoundingClientRect().bottom;for(const m of[...c].reverse())if(m.getBoundingClientRect().bottom<=v){m.focus();break}}}return{onListScroll:a,onListKeydown:i}}const oo=E({chips:Boolean,closableChips:Boolean,closeText:{type:String,default:"$vuetify.close"},openText:{type:String,default:"$vuetify.open"},eager:Boolean,hideNoData:Boolean,hideSelected:Boolean,menu:Boolean,menuIcon:{type:se,default:"$dropdown"},menuProps:{type:Object},multiple:Boolean,noDataText:{type:String,default:"$vuetify.noDataText"},openOnClear:Boolean,itemColor:String,...As({itemChildren:!1})},"Select"),yy=E({...oo(),...rt(El({modelValue:null,role:"button"}),["validationValue","dirty","appendInnerIcon"]),...Pt({transition:{component:Sl}})},"VSelect"),by=L()({name:"VSelect",props:yy(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,"update:menu":e=>!0},setup(e,t){let{slots:n}=t;const{t:l}=ct(),a=W(),o=W(),i=W(),s=ue(e,"menu"),u=g({get:()=>s.value,set:$=>{var D;s.value&&!$&&((D=o.value)!=null&&D.ΨopenChildren)||(s.value=$)}}),{items:c,transformIn:d,transformOut:f}=to(e),v=ue(e,"modelValue",[],$=>d($===null?[null]:et($)),$=>{const D=f($);return e.multiple?D:D[0]??null}),m=_l(),h=g(()=>v.value.map($=>$.value)),y=K(!1),b=g(()=>u.value?e.closeText:e.openText);let p="",S;const x=g(()=>e.hideSelected?c.value.filter($=>!v.value.some(D=>D===$)):c.value),I=g(()=>e.hideNoData&&!c.value.length||e.readonly||(m==null?void 0:m.isReadonly.value)),V=W(),{onListScroll:C,onListKeydown:P}=ao(V,a);function k($){e.openOnClear&&(u.value=!0)}function w(){I.value||(u.value=!u.value)}function T($){var z,oe;if(!$.key||e.readonly||m!=null&&m.isReadonly.value)return;["Enter"," ","ArrowDown","ArrowUp","Home","End"].includes($.key)&&$.preventDefault(),["Enter","ArrowDown"," "].includes($.key)&&(u.value=!0),["Escape","Tab"].includes($.key)&&(u.value=!1),$.key==="Home"?(z=V.value)==null||z.focus("first"):$.key==="End"&&((oe=V.value)==null||oe.focus("last"));const D=1e3;function O(re){const ve=re.key.length===1,ge=!re.ctrlKey&&!re.metaKey&&!re.altKey;return ve&&ge}if(e.multiple||!O($))return;const G=performance.now();G-S>D&&(p=""),p+=$.key.toLowerCase(),S=G;const U=c.value.find(re=>re.title.toLowerCase().startsWith(p));U!==void 0&&(v.value=[U])}function A($){if(e.multiple){const D=v.value.findIndex(O=>e.valueComparator(O.value,$.value));if(D===-1)v.value=[...v.value,$];else{const O=[...v.value];O.splice(D,1),v.value=O}}else v.value=[$],u.value=!1}function B($){var D;(D=V.value)!=null&&D.$el.contains($.relatedTarget)||(u.value=!1)}function R(){var $;y.value&&(($=a.value)==null||$.focus())}function M($){y.value=!0}function X($){if($==null)v.value=[];else if(vn(a.value,":autofill")||vn(a.value,":-webkit-autofill")){const D=c.value.find(O=>O.title===$);D&&A(D)}else a.value&&(a.value.value="")}return Z(u,()=>{if(!e.hideSelected&&u.value&&v.value.length){const $=x.value.findIndex(D=>v.value.some(O=>e.valueComparator(O.value,D.value)));Ce&&window.requestAnimationFrame(()=>{var D;$>=0&&((D=i.value)==null||D.scrollToIndex($))})}}),j(()=>{const $=!!(e.chips||n.chip),D=!!(!e.hideNoData||x.value.length||n["prepend-item"]||n["append-item"]||n["no-data"]),O=v.value.length>0,[G]=Zt.filterProps(e),U=O||!y.value&&e.label&&!e.persistentPlaceholder?void 0:e.placeholder;return r(Zt,Y({ref:a},G,{modelValue:v.value.map(z=>z.props.value).join(", "),"onUpdate:modelValue":X,focused:y.value,"onUpdate:focused":z=>y.value=z,validationValue:v.externalValue,counterValue:v.value.length,dirty:O,class:["v-select",{"v-select--active-menu":u.value,"v-select--chips":!!e.chips,[`v-select--${e.multiple?"multiple":"single"}`]:!0,"v-select--selected":v.value.length,"v-select--selection-slot":!!n.selection},e.class],style:e.style,inputmode:"none",placeholder:U,"onClick:clear":k,"onMousedown:control":w,onBlur:B,onKeydown:T,"aria-label":l(b.value),title:l(b.value)}),{...n,default:()=>r(ae,null,[r(Pl,Y({ref:o,modelValue:u.value,"onUpdate:modelValue":z=>u.value=z,activator:"parent",contentClass:"v-select__content",disabled:I.value,eager:e.eager,maxHeight:310,openOnClick:!1,closeOnContentClick:!1,transition:e.transition,onAfterLeave:R},e.menuProps),{default:()=>[D&&r(Il,{ref:V,selected:h.value,selectStrategy:e.multiple?"independent":"single-independent",onMousedown:z=>z.preventDefault(),onKeydown:P,onFocusin:M,onScrollPassive:C,tabindex:"-1",color:e.itemColor??e.color},{default:()=>{var z,oe,re;return[(z=n["prepend-item"])==null?void 0:z.call(n),!x.value.length&&!e.hideNoData&&(((oe=n["no-data"])==null?void 0:oe.call(n))??r(_t,{title:l(e.noDataText)},null)),r(Rl,{ref:i,renderless:!0,items:x.value},{default:ve=>{var H;let{item:ge,index:N,itemRef:me}=ve;const te=Y(ge.props,{ref:me,key:N,onClick:()=>A(ge)});return((H=n.item)==null?void 0:H.call(n,{item:ge,index:N,props:te}))??r(_t,te,{prepend:le=>{let{isSelected:pe}=le;return r(ae,null,[e.multiple&&!e.hideSelected?r(hn,{key:ge.value,modelValue:pe,ripple:!1,tabindex:"-1"},null):void 0,ge.props.prependIcon&&r(ke,{icon:ge.props.prependIcon},null)])}})}}),(re=n["append-item"])==null?void 0:re.call(n)]}})]}),v.value.map((z,oe)=>{var ge;function re(N){N.stopPropagation(),N.preventDefault(),A(z)}const ve={"onClick:close":re,onMousedown(N){N.preventDefault(),N.stopPropagation()},modelValue:!0,"onUpdate:modelValue":void 0};return r("div",{key:z.value,class:"v-select__selection"},[$?n.chip?r(we,{key:"chip-defaults",defaults:{VChip:{closable:e.closableChips,size:"small",text:z.title}}},{default:()=>{var N;return[(N=n.chip)==null?void 0:N.call(n,{item:z,index:oe,props:ve})]}}):r(Kn,Y({key:"chip",closable:e.closableChips,size:"small",text:z.title,disabled:z.props.disabled},ve),null):((ge=n.selection)==null?void 0:ge.call(n,{item:z,index:oe}))??r("span",{class:"v-select__selection-text"},[z.title,e.multiple&&oe<v.value.length-1&&r("span",{class:"v-select__selection-comma"},[yl(",")])])])})]),"append-inner":function(){var ve;for(var z=arguments.length,oe=new Array(z),re=0;re<z;re++)oe[re]=arguments[re];return r(ae,null,[(ve=n["append-inner"])==null?void 0:ve.call(n,...oe),e.menuIcon?r(ke,{class:"v-select__menu-icon",icon:e.menuIcon},null):void 0])}})}),bt({isFocused:y,menu:u,select:A},a)}}),py=(e,t,n)=>e==null||t==null?-1:e.toString().toLocaleLowerCase().indexOf(t.toString().toLocaleLowerCase()),zs=E({customFilter:Function,customKeyFilter:Object,filterKeys:[Array,String],filterMode:{type:String,default:"intersection"},noFilter:Boolean},"filter");function wy(e,t,n){var s;const l=[],a=(n==null?void 0:n.default)??py,o=n!=null&&n.filterKeys?et(n.filterKeys):!1,i=Object.keys((n==null?void 0:n.customKeyFilter)??{}).length;if(!(e!=null&&e.length))return l;e:for(let u=0;u<e.length;u++){const[c,d=c]=et(e[u]),f={},v={};let m=-1;if(t&&!(n!=null&&n.noFilter)){if(typeof c=="object"){const b=o||Object.keys(d);for(const p of b){const S=pt(d,p,d),x=(s=n==null?void 0:n.customKeyFilter)==null?void 0:s[p];if(m=x?x(S,t,c):a(S,t,c),m!==-1&&m!==!1)x?f[p]=m:v[p]=m;else if((n==null?void 0:n.filterMode)==="every")continue e}}else m=a(c,t,c),m!==-1&&m!==!1&&(v.title=m);const h=Object.keys(v).length,y=Object.keys(f).length;if(!h&&!y||(n==null?void 0:n.filterMode)==="union"&&y!==i&&!h||(n==null?void 0:n.filterMode)==="intersection"&&(y!==i||!h))continue}l.push({index:u,matches:{...v,...f}})}return l}function Hs(e,t,n,l){const a=W([]),o=W(new Map),i=g(()=>l!=null&&l.transform?ot(t).map(u=>[u,l.transform(u)]):ot(t));tt(()=>{const u=typeof n=="function"?n():ot(n),c=typeof u!="string"&&typeof u!="number"?"":String(u),d=wy(i.value,c,{customKeyFilter:e.customKeyFilter,default:e.customFilter,filterKeys:e.filterKeys,filterMode:e.filterMode,noFilter:e.noFilter}),f=ot(t),v=[],m=new Map;d.forEach(h=>{let{index:y,matches:b}=h;const p=f[y];v.push(p),m.set(p.value,b)}),a.value=v,o.value=m});function s(u){return o.value.get(u.value)}return{filteredItems:a,filteredMatches:o,getMatches:s}}function Sy(e,t,n){if(t==null)return e;if(Array.isArray(t))throw new Error("Multiple matches is not implemented");return typeof t=="number"&&~t?r(ae,null,[r("span",{class:"v-autocomplete__unmask"},[e.substr(0,t)]),r("span",{class:"v-autocomplete__mask"},[e.substr(t,n)]),r("span",{class:"v-autocomplete__unmask"},[e.substr(t+n)])]):e}const ky=E({autoSelectFirst:{type:[Boolean,String]},search:String,...zs({filterKeys:["title"]}),...oo(),...rt(El({modelValue:null,role:"combobox"}),["validationValue","dirty","appendInnerIcon"]),...Pt({transition:!1})},"VAutocomplete"),xy=L()({name:"VAutocomplete",props:ky(),emits:{"update:focused":e=>!0,"update:search":e=>!0,"update:modelValue":e=>!0,"update:menu":e=>!0},setup(e,t){let{slots:n}=t;const{t:l}=ct(),a=W(),o=K(!1),i=K(!0),s=K(!1),u=W(),c=W(),d=ue(e,"menu"),f=g({get:()=>d.value,set:te=>{var H;d.value&&!te&&((H=u.value)!=null&&H.ΨopenChildren)||(d.value=te)}}),v=K(-1),m=g(()=>{var te;return(te=a.value)==null?void 0:te.color}),h=g(()=>f.value?e.closeText:e.openText),{items:y,transformIn:b,transformOut:p}=to(e),{textColorClasses:S,textColorStyles:x}=Ge(m),I=ue(e,"search",""),V=ue(e,"modelValue",[],te=>b(te===null?[null]:et(te)),te=>{const H=p(te);return e.multiple?H:H[0]??null}),C=_l(),{filteredItems:P,getMatches:k}=Hs(e,y,()=>i.value?"":I.value),w=g(()=>e.hideSelected?P.value.filter(te=>!V.value.some(H=>H.value===te.value)):P.value),T=g(()=>V.value.map(te=>te.props.value)),A=g(()=>{var H;return(e.autoSelectFirst===!0||e.autoSelectFirst==="exact"&&I.value===((H=w.value[0])==null?void 0:H.title))&&w.value.length>0&&!i.value&&!s.value}),B=g(()=>e.hideNoData&&!y.value.length||e.readonly||(C==null?void 0:C.isReadonly.value)),R=W(),{onListScroll:M,onListKeydown:X}=ao(R,a);function $(te){e.openOnClear&&(f.value=!0),I.value=""}function D(){B.value||(f.value=!0)}function O(te){B.value||(o.value&&(te.preventDefault(),te.stopPropagation()),f.value=!f.value)}function G(te){var pe,de,ie;if(e.readonly||C!=null&&C.isReadonly.value)return;const H=a.value.selectionStart,le=V.value.length;if((v.value>-1||["Enter","ArrowDown","ArrowUp"].includes(te.key))&&te.preventDefault(),["Enter","ArrowDown"].includes(te.key)&&(f.value=!0),["Escape"].includes(te.key)&&(f.value=!1),A.value&&["Enter","Tab"].includes(te.key)&&me(w.value[0]),te.key==="ArrowDown"&&A.value&&((pe=R.value)==null||pe.focus("next")),!!e.multiple){if(["Backspace","Delete"].includes(te.key)){if(v.value<0){te.key==="Backspace"&&!I.value&&(v.value=le-1);return}const fe=v.value,Ae=V.value[v.value];Ae&&!Ae.props.disabled&&me(Ae),v.value=fe>=le-1?le-2:fe}if(te.key==="ArrowLeft"){if(v.value<0&&H>0)return;const fe=v.value>-1?v.value-1:le-1;V.value[fe]?v.value=fe:(v.value=-1,a.value.setSelectionRange((de=I.value)==null?void 0:de.length,(ie=I.value)==null?void 0:ie.length))}if(te.key==="ArrowRight"){if(v.value<0)return;const fe=v.value+1;V.value[fe]?v.value=fe:(v.value=-1,a.value.setSelectionRange(0,0))}}}function U(te){I.value=te.target.value}function z(te){if(vn(a.value,":autofill")||vn(a.value,":-webkit-autofill")){const H=y.value.find(le=>le.title===te.target.value);H&&me(H)}}function oe(){var te;o.value&&(i.value=!0,(te=a.value)==null||te.focus())}function re(te){o.value=!0,setTimeout(()=>{s.value=!0})}function ve(te){s.value=!1}function ge(te){(te==null||te===""&&!e.multiple)&&(V.value=[])}const N=K(!1);function me(te){if(e.multiple){const H=V.value.findIndex(le=>e.valueComparator(le.value,te.value));if(H===-1)V.value=[...V.value,te];else{const le=[...V.value];le.splice(H,1),V.value=le}}else V.value=[te],N.value=!0,I.value=te.title,f.value=!1,i.value=!0,Ve(()=>N.value=!1)}return Z(o,(te,H)=>{var le;te!==H&&(te?(N.value=!0,I.value=e.multiple?"":String(((le=V.value.at(-1))==null?void 0:le.props.title)??""),i.value=!0,Ve(()=>N.value=!1)):(!e.multiple&&!I.value?V.value=[]:A.value&&!s.value&&!V.value.some(pe=>{let{value:de}=pe;return de===w.value[0].value})&&me(w.value[0]),f.value=!1,I.value="",v.value=-1))}),Z(I,te=>{!o.value||N.value||(te&&(f.value=!0),i.value=!te)}),Z(f,()=>{if(!e.hideSelected&&f.value&&V.value.length){const te=w.value.findIndex(H=>V.value.some(le=>H.value===le.value));Ce&&window.requestAnimationFrame(()=>{var H;te>=0&&((H=c.value)==null||H.scrollToIndex(te))})}}),j(()=>{const te=!!(e.chips||n.chip),H=!!(!e.hideNoData||w.value.length||n["prepend-item"]||n["append-item"]||n["no-data"]),le=V.value.length>0,[pe]=Zt.filterProps(e);return r(Zt,Y({ref:a},pe,{modelValue:I.value,"onUpdate:modelValue":ge,focused:o.value,"onUpdate:focused":de=>o.value=de,validationValue:V.externalValue,counterValue:V.value.length,dirty:le,onInput:U,onChange:z,class:["v-autocomplete",`v-autocomplete--${e.multiple?"multiple":"single"}`,{"v-autocomplete--active-menu":f.value,"v-autocomplete--chips":!!e.chips,"v-autocomplete--selection-slot":!!n.selection,"v-autocomplete--selecting-index":v.value>-1},e.class],style:e.style,readonly:e.readonly,placeholder:le?void 0:e.placeholder,"onClick:clear":$,"onMousedown:control":D,onKeydown:G}),{...n,default:()=>r(ae,null,[r(Pl,Y({ref:u,modelValue:f.value,"onUpdate:modelValue":de=>f.value=de,activator:"parent",contentClass:"v-autocomplete__content",disabled:B.value,eager:e.eager,maxHeight:310,openOnClick:!1,closeOnContentClick:!1,transition:e.transition,onAfterLeave:oe},e.menuProps),{default:()=>[H&&r(Il,{ref:R,selected:T.value,selectStrategy:e.multiple?"independent":"single-independent",onMousedown:de=>de.preventDefault(),onKeydown:X,onFocusin:re,onFocusout:ve,onScrollPassive:M,tabindex:"-1",color:e.itemColor??e.color},{default:()=>{var de,ie,fe;return[(de=n["prepend-item"])==null?void 0:de.call(n),!w.value.length&&!e.hideNoData&&(((ie=n["no-data"])==null?void 0:ie.call(n))??r(_t,{title:l(e.noDataText)},null)),r(Rl,{ref:c,renderless:!0,items:w.value},{default:Ae=>{var Tn;let{item:Le,index:Ie,itemRef:qe}=Ae;const Jn=Y(Le.props,{ref:qe,key:Ie,active:A.value&&Ie===0?!0:void 0,onClick:()=>me(Le)});return((Tn=n.item)==null?void 0:Tn.call(n,{item:Le,index:Ie,props:Jn}))??r(_t,Jn,{prepend:Dt=>{let{isSelected:xt}=Dt;return r(ae,null,[e.multiple&&!e.hideSelected?r(hn,{key:Le.value,modelValue:xt,ripple:!1,tabindex:"-1"},null):void 0,Le.props.prependIcon&&r(ke,{icon:Le.props.prependIcon},null)])},title:()=>{var Dt,xt;return i.value?Le.title:Sy(Le.title,(Dt=k(Le))==null?void 0:Dt.title,((xt=I.value)==null?void 0:xt.length)??0)}})}}),(fe=n["append-item"])==null?void 0:fe.call(n)]}})]}),V.value.map((de,ie)=>{var Le;function fe(Ie){Ie.stopPropagation(),Ie.preventDefault(),me(de)}const Ae={"onClick:close":fe,onMousedown(Ie){Ie.preventDefault(),Ie.stopPropagation()},modelValue:!0,"onUpdate:modelValue":void 0};return r("div",{key:de.value,class:["v-autocomplete__selection",ie===v.value&&["v-autocomplete__selection--selected",S.value]],style:ie===v.value?x.value:{}},[te?n.chip?r(we,{key:"chip-defaults",defaults:{VChip:{closable:e.closableChips,size:"small",text:de.title}}},{default:()=>{var Ie;return[(Ie=n.chip)==null?void 0:Ie.call(n,{item:de,index:ie,props:Ae})]}}):r(Kn,Y({key:"chip",closable:e.closableChips,size:"small",text:de.title,disabled:de.props.disabled},Ae),null):((Le=n.selection)==null?void 0:Le.call(n,{item:de,index:ie}))??r("span",{class:"v-autocomplete__selection-text"},[de.title,e.multiple&&ie<V.value.length-1&&r("span",{class:"v-autocomplete__selection-comma"},[yl(",")])])])})]),"append-inner":function(){var Ae;for(var de=arguments.length,ie=new Array(de),fe=0;fe<de;fe++)ie[fe]=arguments[fe];return r(ae,null,[(Ae=n["append-inner"])==null?void 0:Ae.call(n,...ie),e.menuIcon?r(ke,{class:"v-autocomplete__menu-icon",icon:e.menuIcon,onMousedown:O,onClick:Si,"aria-label":l(h.value),title:l(h.value)},null):void 0])}})}),bt({isFocused:o,isPristine:i,menu:f,search:I,filteredItems:P,select:me},a)}});const Cy=E({bordered:Boolean,color:String,content:[Number,String],dot:Boolean,floating:Boolean,icon:se,inline:Boolean,label:{type:String,default:"$vuetify.badge"},max:[Number,String],modelValue:{type:Boolean,default:!0},offsetX:[Number,String],offsetY:[Number,String],textColor:String,...q(),...Ot({location:"top end"}),...Pe(),...ce(),...ye(),...Pt({transition:"scale-rotate-transition"})},"VBadge"),Vy=L()({name:"VBadge",inheritAttrs:!1,props:Cy(),setup(e,t){const{backgroundColorClasses:n,backgroundColorStyles:l}=Ee(F(e,"color")),{roundedClasses:a}=Be(e),{t:o}=ct(),{textColorClasses:i,textColorStyles:s}=Ge(F(e,"textColor")),{themeClasses:u}=Fi(),{locationStyles:c}=Mt(e,!0,d=>(e.floating?e.dot?2:4:e.dot?8:12)+(["top","bottom"].includes(d)?+(e.offsetY??0):["left","right"].includes(d)?+(e.offsetX??0):0));return j(()=>{const d=Number(e.content),f=!e.max||isNaN(d)?e.content:d<=+e.max?d:`${e.max}+`,[v,m]=Kt(t.attrs,["aria-atomic","aria-label","aria-live","role","title"]);return r(e.tag,Y({class:["v-badge",{"v-badge--bordered":e.bordered,"v-badge--dot":e.dot,"v-badge--floating":e.floating,"v-badge--inline":e.inline},e.class]},m,{style:e.style}),{default:()=>{var h,y;return[r("div",{class:"v-badge__wrapper"},[(y=(h=t.slots).default)==null?void 0:y.call(h),r(gt,{transition:e.transition},{default:()=>{var b,p;return[ne(r("span",Y({class:["v-badge__badge",u.value,n.value,a.value,i.value],style:[l.value,s.value,e.inline?{}:c.value],"aria-atomic":"true","aria-label":o(e.label,d),"aria-live":"polite",role:"status"},v),[e.dot?void 0:t.slots.badge?(p=(b=t.slots).badge)==null?void 0:p.call(b):e.icon?r(ke,{icon:e.icon},null):f]),[[Te,e.modelValue]])]}})])]}})}),{}}});const _y=E({color:String,density:String,...q()},"VBannerActions"),js=L()({name:"VBannerActions",props:_y(),setup(e,t){let{slots:n}=t;return $e({VBtn:{color:e.color,density:e.density,variant:"text"}}),j(()=>{var l;return r("div",{class:["v-banner-actions",e.class],style:e.style},[(l=n.default)==null?void 0:l.call(n)])}),{}}}),Us=yt("v-banner-text"),Iy=E({avatar:String,color:String,icon:se,lines:String,stacked:Boolean,sticky:Boolean,text:String,...at(),...q(),...Fe(),...dt(),...Me(),...Ot(),...Cn(),...Pe(),...ce(),...ye()},"VBanner"),Ty=L()({name:"VBanner",props:Iy(),setup(e,t){let{slots:n}=t;const{borderClasses:l}=ft(e),{densityClasses:a}=Ye(e),{mobile:o}=en(),{dimensionStyles:i}=vt(e),{elevationClasses:s}=He(e),{locationStyles:u}=Mt(e),{positionClasses:c}=Vn(e),{roundedClasses:d}=Be(e),{themeClasses:f}=be(e),v=F(e,"color"),m=F(e,"density");$e({VBannerActions:{color:v,density:m}}),j(()=>{const h=!!(e.text||n.text),y=!!(e.avatar||e.icon),b=!!(y||n.prepend);return r(e.tag,{class:["v-banner",{"v-banner--stacked":e.stacked||o.value,"v-banner--sticky":e.sticky,[`v-banner--${e.lines}-line`]:!!e.lines},l.value,a.value,s.value,c.value,d.value,f.value,e.class],style:[i.value,u.value,e.style],role:"banner"},{default:()=>{var p;return[b&&r("div",{key:"prepend",class:"v-banner__prepend"},[n.prepend?r(we,{key:"prepend-defaults",disabled:!y,defaults:{VAvatar:{color:v.value,density:m.value,icon:e.icon,image:e.avatar}}},n.prepend):r(Lt,{key:"prepend-avatar",color:v.value,density:m.value,icon:e.icon,image:e.avatar},null)]),r("div",{class:"v-banner__content"},[h&&r(Us,{key:"text"},{default:()=>{var S;return[((S=n.text)==null?void 0:S.call(n))??e.text]}}),(p=n.default)==null?void 0:p.call(n)]),n.actions&&r(js,{key:"actions"},n.actions)]}})})}});const Py=E({bgColor:String,color:String,grow:Boolean,mode:{type:String,validator:e=>!e||["horizontal","shift"].includes(e)},height:{type:[Number,String],default:56},active:{type:Boolean,default:!0},...at(),...q(),...Fe(),...Me(),...Pe(),...bn({name:"bottom-navigation"}),...ce({tag:"header"}),...wn({modelValue:!0,selectedClass:"v-btn--selected"}),...ye()},"VBottomNavigation"),Ay=L()({name:"VBottomNavigation",props:Py(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=Fi(),{borderClasses:a}=ft(e),{backgroundColorClasses:o,backgroundColorStyles:i}=Ee(F(e,"bgColor")),{densityClasses:s}=Ye(e),{elevationClasses:u}=He(e),{roundedClasses:c}=Be(e),{ssrBootStyles:d}=tn(),f=g(()=>Number(e.height)-(e.density==="comfortable"?8:0)-(e.density==="compact"?16:0)),v=F(e,"active"),{layoutItemStyles:m}=pn({id:e.name,order:g(()=>parseInt(e.order,10)),position:g(()=>"bottom"),layoutSize:g(()=>v.value?f.value:0),elementSize:f,active:v,absolute:F(e,"absolute")});return an(e,Wa),$e({VBtn:{color:F(e,"color"),density:F(e,"density"),stacked:g(()=>e.mode!=="horizontal"),variant:"text"}},{scoped:!0}),j(()=>r(e.tag,{class:["v-bottom-navigation",{"v-bottom-navigation--active":v.value,"v-bottom-navigation--grow":e.grow,"v-bottom-navigation--shift":e.mode==="shift"},l.value,o.value,a.value,s.value,u.value,c.value,e.class],style:[i.value,m.value,{height:J(f.value),transform:`translateY(${J(v.value?0:100,"%")})`},d.value,e.style]},{default:()=>[n.default&&r("div",{class:"v-bottom-navigation__content"},[n.default()])]})),{}}});const By=E({divider:[Number,String],...q()},"VBreadcrumbsDivider"),Gs=L()({name:"VBreadcrumbsDivider",props:By(),setup(e,t){let{slots:n}=t;return j(()=>{var l;return r("li",{class:["v-breadcrumbs-divider",e.class],style:e.style},[((l=n==null?void 0:n.default)==null?void 0:l.call(n))??e.divider])}),{}}}),Ey=E({active:Boolean,activeClass:String,activeColor:String,color:String,disabled:Boolean,title:String,...q(),...Yn(),...ce({tag:"li"})},"VBreadcrumbsItem"),Ws=L()({name:"VBreadcrumbsItem",props:Ey(),setup(e,t){let{slots:n,attrs:l}=t;const a=Wn(e,l),o=g(()=>{var c;return e.active||((c=a.isActive)==null?void 0:c.value)}),i=g(()=>o.value?e.activeColor:e.color),{textColorClasses:s,textColorStyles:u}=Ge(i);return j(()=>r(e.tag,{class:["v-breadcrumbs-item",{"v-breadcrumbs-item--active":o.value,"v-breadcrumbs-item--disabled":e.disabled,[`${e.activeClass}`]:o.value&&e.activeClass},s.value,e.class],style:[u.value,e.style],"aria-current":o.value?"page":void 0},{default:()=>{var c,d;return[a.isLink.value?r("a",{class:"v-breadcrumbs-item--link",href:a.href.value,"aria-current":o.value?"page":void 0,onClick:a.navigate},[((d=n.default)==null?void 0:d.call(n))??e.title]):((c=n.default)==null?void 0:c.call(n))??e.title]}})),{}}}),Ry=E({activeClass:String,activeColor:String,bgColor:String,color:String,disabled:Boolean,divider:{type:String,default:"/"},icon:se,items:{type:Array,default:()=>[]},...q(),...Fe(),...Pe(),...ce({tag:"ul"})},"VBreadcrumbs"),Ly=L()({name:"VBreadcrumbs",props:Ry(),setup(e,t){let{slots:n}=t;const{backgroundColorClasses:l,backgroundColorStyles:a}=Ee(F(e,"bgColor")),{densityClasses:o}=Ye(e),{roundedClasses:i}=Be(e);$e({VBreadcrumbsDivider:{divider:F(e,"divider")},VBreadcrumbsItem:{activeClass:F(e,"activeClass"),activeColor:F(e,"activeColor"),color:F(e,"color"),disabled:F(e,"disabled")}});const s=g(()=>e.items.map(u=>typeof u=="string"?{item:{title:u},raw:u}:{item:u,raw:u}));return j(()=>{const u=!!(n.prepend||e.icon);return r(e.tag,{class:["v-breadcrumbs",l.value,o.value,i.value,e.class],style:[a.value,e.style]},{default:()=>{var c;return[u&&r("li",{key:"prepend",class:"v-breadcrumbs__prepend"},[n.prepend?r(we,{key:"prepend-defaults",disabled:!e.icon,defaults:{VIcon:{icon:e.icon,start:!0}}},n.prepend):r(ke,{key:"prepend-icon",start:!0,icon:e.icon},null)]),s.value.map((d,f,v)=>{let{item:m,raw:h}=d;return r(ae,null,[r(Ws,Y({key:m.title,disabled:f>=v.length-1},m),{default:n.title?()=>{var y;return(y=n.title)==null?void 0:y.call(n,{item:h,index:f})}:void 0}),f<v.length-1&&r(Gs,null,{default:n.divider?()=>{var y;return(y=n.divider)==null?void 0:y.call(n,{item:h,index:f})}:void 0})])}),(c=n.default)==null?void 0:c.call(n)]}})}),{}}});const Ys=L()({name:"VCardActions",props:q(),setup(e,t){let{slots:n}=t;return $e({VBtn:{variant:"text"}}),j(()=>{var l;return r("div",{class:["v-card-actions",e.class],style:e.style},[(l=n.default)==null?void 0:l.call(n)])}),{}}}),Ks=yt("v-card-subtitle"),qs=yt("v-card-title"),$y=E({appendAvatar:String,appendIcon:se,prependAvatar:String,prependIcon:se,subtitle:String,title:String,...q(),...Fe()},"VCardItem"),Xs=L()({name:"VCardItem",props:$y(),setup(e,t){let{slots:n}=t;return j(()=>{var c;const l=!!(e.prependAvatar||e.prependIcon),a=!!(l||n.prepend),o=!!(e.appendAvatar||e.appendIcon),i=!!(o||n.append),s=!!(e.title||n.title),u=!!(e.subtitle||n.subtitle);return r("div",{class:["v-card-item",e.class],style:e.style},[a&&r("div",{key:"prepend",class:"v-card-item__prepend"},[n.prepend?r(we,{key:"prepend-defaults",disabled:!l,defaults:{VAvatar:{density:e.density,icon:e.prependIcon,image:e.prependAvatar}}},n.prepend):l&&r(Lt,{key:"prepend-avatar",density:e.density,icon:e.prependIcon,image:e.prependAvatar},null)]),r("div",{class:"v-card-item__content"},[s&&r(qs,{key:"title"},{default:()=>{var d;return[((d=n.title)==null?void 0:d.call(n))??e.title]}}),u&&r(Ks,{key:"subtitle"},{default:()=>{var d;return[((d=n.subtitle)==null?void 0:d.call(n))??e.subtitle]}}),(c=n.default)==null?void 0:c.call(n)]),i&&r("div",{key:"append",class:"v-card-item__append"},[n.append?r(we,{key:"append-defaults",disabled:!o,defaults:{VAvatar:{density:e.density,icon:e.appendIcon,image:e.appendAvatar}}},n.append):o&&r(Lt,{key:"append-avatar",density:e.density,icon:e.appendIcon,image:e.appendAvatar},null)])])}),{}}}),Zs=yt("v-card-text"),Oy=E({appendAvatar:String,appendIcon:se,disabled:Boolean,flat:Boolean,hover:Boolean,image:String,link:{type:Boolean,default:void 0},prependAvatar:String,prependIcon:se,ripple:{type:[Boolean,Object],default:!0},subtitle:String,text:String,title:String,...at(),...q(),...Fe(),...dt(),...Me(),...Xa(),...Ot(),...Cn(),...Pe(),...Yn(),...ce(),...ye(),...mt({variant:"elevated"})},"VCard"),My=L()({name:"VCard",directives:{Ripple:Ft},props:Oy(),setup(e,t){let{attrs:n,slots:l}=t;const{themeClasses:a}=be(e),{borderClasses:o}=ft(e),{colorClasses:i,colorStyles:s,variantClasses:u}=ln(e),{densityClasses:c}=Ye(e),{dimensionStyles:d}=vt(e),{elevationClasses:f}=He(e),{loaderClasses:v}=xl(e),{locationStyles:m}=Mt(e),{positionClasses:h}=Vn(e),{roundedClasses:y}=Be(e),b=Wn(e,n),p=g(()=>e.link!==!1&&b.isLink.value),S=g(()=>!e.disabled&&e.link!==!1&&(e.link||b.isClickable.value));return j(()=>{const x=p.value?"a":e.tag,I=!!(l.title||e.title),V=!!(l.subtitle||e.subtitle),C=I||V,P=!!(l.append||e.appendAvatar||e.appendIcon),k=!!(l.prepend||e.prependAvatar||e.prependIcon),w=!!(l.image||e.image),T=C||k||P,A=!!(l.text||e.text);return ne(r(x,{class:["v-card",{"v-card--disabled":e.disabled,"v-card--flat":e.flat,"v-card--hover":e.hover&&!(e.disabled||e.flat),"v-card--link":S.value},a.value,o.value,i.value,c.value,f.value,v.value,h.value,y.value,u.value,e.class],style:[s.value,d.value,m.value,e.style],href:b.href.value,onClick:S.value&&b.navigate,tabindex:e.disabled?-1:void 0},{default:()=>{var B;return[w&&r("div",{key:"image",class:"v-card__image"},[l.image?r(we,{key:"image-defaults",disabled:!e.image,defaults:{VImg:{cover:!0,src:e.image}}},l.image):r(qt,{key:"image-img",cover:!0,src:e.image},null)]),r(Za,{name:"v-card",active:!!e.loading,color:typeof e.loading=="boolean"?void 0:e.loading},{default:l.loader}),T&&r(Xs,{key:"item",prependAvatar:e.prependAvatar,prependIcon:e.prependIcon,title:e.title,subtitle:e.subtitle,appendAvatar:e.appendAvatar,appendIcon:e.appendIcon},{default:l.item,prepend:l.prepend,title:l.title,subtitle:l.subtitle,append:l.append}),A&&r(Zs,{key:"text"},{default:()=>{var R;return[((R=l.text)==null?void 0:R.call(l))??e.text]}}),(B=l.default)==null?void 0:B.call(l),l.actions&&r(Ys,null,{default:l.actions}),nn(S.value,"v-card")]}}),[[Ze("ripple"),S.value&&e.ripple]])}),{}}});const Fy=e=>{const{touchstartX:t,touchendX:n,touchstartY:l,touchendY:a}=e,o=.5,i=16;e.offsetX=n-t,e.offsetY=a-l,Math.abs(e.offsetY)<o*Math.abs(e.offsetX)&&(e.left&&n<t-i&&e.left(e),e.right&&n>t+i&&e.right(e)),Math.abs(e.offsetX)<o*Math.abs(e.offsetY)&&(e.up&&a<l-i&&e.up(e),e.down&&a>l+i&&e.down(e))};function Ny(e,t){var l;const n=e.changedTouches[0];t.touchstartX=n.clientX,t.touchstartY=n.clientY,(l=t.start)==null||l.call(t,{originalEvent:e,...t})}function Dy(e,t){var l;const n=e.changedTouches[0];t.touchendX=n.clientX,t.touchendY=n.clientY,(l=t.end)==null||l.call(t,{originalEvent:e,...t}),Fy(t)}function zy(e,t){var l;const n=e.changedTouches[0];t.touchmoveX=n.clientX,t.touchmoveY=n.clientY,(l=t.move)==null||l.call(t,{originalEvent:e,...t})}function Hy(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const t={touchstartX:0,touchstartY:0,touchendX:0,touchendY:0,touchmoveX:0,touchmoveY:0,offsetX:0,offsetY:0,left:e.left,right:e.right,up:e.up,down:e.down,start:e.start,move:e.move,end:e.end};return{touchstart:n=>Ny(n,t),touchend:n=>Dy(n,t),touchmove:n=>zy(n,t)}}function jy(e,t){var s;const n=t.value,l=n!=null&&n.parent?e.parentElement:e,a=(n==null?void 0:n.options)??{passive:!0},o=(s=t.instance)==null?void 0:s.$.uid;if(!l||!o)return;const i=Hy(t.value);l._touchHandlers=l._touchHandlers??Object.create(null),l._touchHandlers[o]=i,gi(i).forEach(u=>{l.addEventListener(u,i[u],a)})}function Uy(e,t){var o,i;const n=(o=t.value)!=null&&o.parent?e.parentElement:e,l=(i=t.instance)==null?void 0:i.$.uid;if(!(n!=null&&n._touchHandlers)||!l)return;const a=n._touchHandlers[l];gi(a).forEach(s=>{n.removeEventListener(s,a[s])}),delete n._touchHandlers[l]}const io={mounted:jy,unmounted:Uy},Js=Symbol.for("vuetify:v-window"),Qs=Symbol.for("vuetify:v-window-group"),er=E({continuous:Boolean,nextIcon:{type:[Boolean,String,Function,Object],default:"$next"},prevIcon:{type:[Boolean,String,Function,Object],default:"$prev"},reverse:Boolean,showArrows:{type:[Boolean,String],validator:e=>typeof e=="boolean"||e==="hover"},touch:{type:[Object,Boolean],default:void 0},direction:{type:String,default:"horizontal"},modelValue:null,disabled:Boolean,selectedClass:{type:String,default:"v-window-item--active"},mandatory:{type:[Boolean,String],default:"force"},...q(),...ce(),...ye()},"VWindow"),va=L()({name:"VWindow",directives:{Touch:io},props:er(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=be(e),{isRtl:a}=De(),{t:o}=ct(),i=an(e,Qs),s=W(),u=g(()=>a.value?!e.reverse:e.reverse),c=K(!1),d=g(()=>{const I=e.direction==="vertical"?"y":"x",C=(u.value?!c.value:c.value)?"-reverse":"";return`v-window-${I}${C}-transition`}),f=K(0),v=W(void 0),m=g(()=>i.items.value.findIndex(I=>i.selected.value.includes(I.id)));Z(m,(I,V)=>{const C=i.items.value.length,P=C-1;C<=2?c.value=I<V:I===P&&V===0?c.value=!0:I===0&&V===P?c.value=!1:c.value=I<V}),Oe(Js,{transition:d,isReversed:c,transitionCount:f,transitionHeight:v,rootRef:s});const h=g(()=>e.continuous||m.value!==0),y=g(()=>e.continuous||m.value!==i.items.value.length-1);function b(){h.value&&i.prev()}function p(){y.value&&i.next()}const S=g(()=>{const I=[],V={icon:a.value?e.nextIcon:e.prevIcon,class:`v-window__${u.value?"right":"left"}`,onClick:i.prev,ariaLabel:o("$vuetify.carousel.prev")};I.push(h.value?n.prev?n.prev({props:V}):r(Ke,V,null):r("div",null,null));const C={icon:a.value?e.prevIcon:e.nextIcon,class:`v-window__${u.value?"left":"right"}`,onClick:i.next,ariaLabel:o("$vuetify.carousel.next")};return I.push(y.value?n.next?n.next({props:C}):r(Ke,C,null):r("div",null,null)),I}),x=g(()=>e.touch===!1?e.touch:{...{left:()=>{u.value?b():p()},right:()=>{u.value?p():b()},start:V=>{let{originalEvent:C}=V;C.stopPropagation()}},...e.touch===!0?{}:e.touch});return j(()=>ne(r(e.tag,{ref:s,class:["v-window",{"v-window--show-arrows-on-hover":e.showArrows==="hover"},l.value,e.class],style:e.style},{default:()=>{var I,V;return[r("div",{class:"v-window__container",style:{height:v.value}},[(I=n.default)==null?void 0:I.call(n,{group:i}),e.showArrows!==!1&&r("div",{class:"v-window__controls"},[S.value])]),(V=n.additional)==null?void 0:V.call(n,{group:i})]}}),[[Ze("touch"),x.value]])),{group:i}}}),Gy=E({color:String,cycle:Boolean,delimiterIcon:{type:se,default:"$delimiter"},height:{type:[Number,String],default:500},hideDelimiters:Boolean,hideDelimiterBackground:Boolean,interval:{type:[Number,String],default:6e3,validator:e=>Number(e)>0},progress:[Boolean,String],verticalDelimiters:[Boolean,String],...er({continuous:!0,mandatory:"force",showArrows:!0})},"VCarousel"),Wy=L()({name:"VCarousel",props:Gy(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{t:a}=ct(),o=W();let i=-1;Z(l,u),Z(()=>e.interval,u),Z(()=>e.cycle,c=>{c?u():window.clearTimeout(i)}),Je(s);function s(){!e.cycle||!o.value||(i=window.setTimeout(o.value.group.next,+e.interval>0?+e.interval:6e3))}function u(){window.clearTimeout(i),window.requestAnimationFrame(s)}return j(()=>{const[c]=va.filterProps(e);return r(va,Y({ref:o},c,{modelValue:l.value,"onUpdate:modelValue":d=>l.value=d,class:["v-carousel",{"v-carousel--hide-delimiter-background":e.hideDelimiterBackground,"v-carousel--vertical-delimiters":e.verticalDelimiters},e.class],style:[{height:J(e.height)},e.style]}),{default:n.default,additional:d=>{let{group:f}=d;return r(ae,null,[!e.hideDelimiters&&r("div",{class:"v-carousel__controls",style:{left:e.verticalDelimiters==="left"&&e.verticalDelimiters?0:"auto",right:e.verticalDelimiters==="right"?0:"auto"}},[f.items.value.length>0&&r(we,{defaults:{VBtn:{color:e.color,icon:e.delimiterIcon,size:"x-small",variant:"text"}},scoped:!0},{default:()=>[f.items.value.map((v,m)=>{const h={id:`carousel-item-${v.id}`,"aria-label":a("$vuetify.carousel.ariaLabel.delimiter",m+1,f.items.value.length),class:[f.isSelected(v.id)&&"v-btn--active"],onClick:()=>f.select(v.id,!0)};return n.item?n.item({props:h,item:v}):r(Ke,Y(v,h),null)})]})]),e.progress&&r(qa,{class:"v-carousel__progress",color:typeof e.progress=="string"?e.progress:void 0,modelValue:(f.getItemIndex(l.value)+1)/f.items.value.length*100},null)])},prev:n.prev,next:n.next})}),{}}}),tr=E({reverseTransition:{type:[Boolean,String],default:void 0},transition:{type:[Boolean,String],default:void 0},...q(),...Sn(),...Tl()},"VWindowItem"),fa=L()({name:"VWindowItem",directives:{Touch:io},props:tr(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const l=_e(Js),a=kn(e,Qs),{isBooted:o}=tn();if(!l||!a)throw new Error("[Vuetify] VWindowItem must be used inside VWindow");const i=K(!1),s=g(()=>o.value&&(l.isReversed.value?e.reverseTransition!==!1:e.transition!==!1));function u(){!i.value||!l||(i.value=!1,l.transitionCount.value>0&&(l.transitionCount.value-=1,l.transitionCount.value===0&&(l.transitionHeight.value=void 0)))}function c(){var h;i.value||!l||(i.value=!0,l.transitionCount.value===0&&(l.transitionHeight.value=J((h=l.rootRef.value)==null?void 0:h.clientHeight)),l.transitionCount.value+=1)}function d(){u()}function f(h){i.value&&Ve(()=>{!s.value||!i.value||!l||(l.transitionHeight.value=J(h.clientHeight))})}const v=g(()=>{const h=l.isReversed.value?e.reverseTransition:e.transition;return s.value?{name:typeof h!="string"?l.transition.value:h,onBeforeEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:c,onAfterLeave:u,onLeaveCancelled:d,onEnter:f}:!1}),{hasContent:m}=no(e,a.isSelected);return j(()=>r(gt,{transition:v.value,disabled:!o.value},{default:()=>{var h;return[ne(r("div",{class:["v-window-item",a.selectedClass.value,e.class],style:e.style},[m.value&&((h=n.default)==null?void 0:h.call(n))]),[[Te,a.isSelected.value]])]}})),{groupItem:a}}}),Yy=E({...Xi(),...tr()},"VCarouselItem"),Ky=L()({name:"VCarouselItem",inheritAttrs:!1,props:Yy(),setup(e,t){let{slots:n,attrs:l}=t;j(()=>{const[a]=qt.filterProps(e),[o]=fa.filterProps(e);return r(fa,Y({class:"v-carousel-item"},o),{default:()=>[r(qt,Y(l,a),n)]})})}});const qy=yt("v-code");const Xy=E({color:{type:Object},disabled:Boolean,dotSize:{type:[Number,String],default:10},height:{type:[Number,String],default:150},width:{type:[Number,String],default:300},...q()},"VColorPickerCanvas"),Zy=ut({name:"VColorPickerCanvas",props:Xy(),emits:{"update:color":e=>!0,"update:position":e=>!0},setup(e,t){let{emit:n}=t;const l=K(!1),a=W(),o=K(parseFloat(e.width)),i=K(parseFloat(e.height)),s=W({x:0,y:0}),u=g({get:()=>s.value,set(b){var x,I;if(!a.value)return;const{x:p,y:S}=b;n("update:color",{h:((x=e.color)==null?void 0:x.h)??0,s:Ue(p,0,o.value)/o.value,v:1-Ue(S,0,i.value)/i.value,a:((I=e.color)==null?void 0:I.a)??1})}}),c=g(()=>{const{x:b,y:p}=u.value,S=parseInt(e.dotSize,10)/2;return{width:J(e.dotSize),height:J(e.dotSize),transform:`translate(${J(b-S)}, ${J(p-S)})`}}),{resizeRef:d}=kt(b=>{var x;if(!((x=d.value)!=null&&x.offsetParent))return;const{width:p,height:S}=b[0].contentRect;o.value=p,i.value=S});function f(b,p,S){const{left:x,top:I,width:V,height:C}=S;u.value={x:Ue(b-x,0,V),y:Ue(p-I,0,C)}}function v(b){b.type==="mousedown"&&b.preventDefault(),!e.disabled&&(m(b),window.addEventListener("mousemove",m),window.addEventListener("mouseup",h),window.addEventListener("touchmove",m),window.addEventListener("touchend",h))}function m(b){if(e.disabled||!a.value)return;l.value=!0;const p=Wf(b);f(p.clientX,p.clientY,a.value.getBoundingClientRect())}function h(){window.removeEventListener("mousemove",m),window.removeEventListener("mouseup",h),window.removeEventListener("touchmove",m),window.removeEventListener("touchend",h)}function y(){var I;if(!a.value)return;const b=a.value,p=b.getContext("2d");if(!p)return;const S=p.createLinearGradient(0,0,b.width,0);S.addColorStop(0,"hsla(0, 0%, 100%, 1)"),S.addColorStop(1,`hsla(${((I=e.color)==null?void 0:I.h)??0}, 100%, 50%, 1)`),p.fillStyle=S,p.fillRect(0,0,b.width,b.height);const x=p.createLinearGradient(0,0,0,b.height);x.addColorStop(0,"hsla(0, 0%, 100%, 0)"),x.addColorStop(1,"hsla(0, 0%, 0%, 1)"),p.fillStyle=x,p.fillRect(0,0,b.width,b.height)}return Z(()=>{var b;return(b=e.color)==null?void 0:b.h},y,{immediate:!0}),Z(()=>[o.value,i.value],(b,p)=>{y(),s.value={x:u.value.x*b[0]/p[0],y:u.value.y*b[1]/p[1]}},{flush:"post"}),Z(()=>e.color,()=>{if(l.value){l.value=!1;return}s.value=e.color?{x:e.color.s*o.value,y:(1-e.color.v)*i.value}:{x:0,y:0}},{deep:!0,immediate:!0}),Je(()=>y()),j(()=>r("div",{ref:d,class:["v-color-picker-canvas",e.class],style:e.style,onMousedown:v,onTouchstartPassive:v},[r("canvas",{ref:a,width:o.value,height:i.value},null),e.color&&r("div",{class:["v-color-picker-canvas__dot",{"v-color-picker-canvas__dot--disabled":e.disabled}],style:c.value},null)])),{}}});function Jy(e,t){if(t){const{a:n,...l}=e;return l}return e}function Qy(e,t){if(t==null||typeof t=="string"){const n=Bi(e);return e.a===1?n.slice(0,7):n}if(typeof t=="object"){let n;return jt(t,["r","g","b"])?n=Vt(e):jt(t,["h","s","l"])?n=_i(e):jt(t,["h","s","v"])&&(n=e),Jy(n,!jt(t,["a"])&&e.a===1)}return e}const Rn={h:0,s:0,v:1,a:1},ma={inputProps:{type:"number",min:0},inputs:[{label:"R",max:255,step:1,getValue:e=>Math.round(e.r),getColor:(e,t)=>({...e,r:Number(t)})},{label:"G",max:255,step:1,getValue:e=>Math.round(e.g),getColor:(e,t)=>({...e,g:Number(t)})},{label:"B",max:255,step:1,getValue:e=>Math.round(e.b),getColor:(e,t)=>({...e,b:Number(t)})},{label:"A",max:1,step:.01,getValue:e=>{let{a:t}=e;return t!=null?Math.round(t*100)/100:1},getColor:(e,t)=>({...e,a:Number(t)})}],to:Vt,from:bl};var ri;const eb={...ma,inputs:(ri=ma.inputs)==null?void 0:ri.slice(0,3)},ha={inputProps:{type:"number",min:0},inputs:[{label:"H",max:360,step:1,getValue:e=>Math.round(e.h),getColor:(e,t)=>({...e,h:Number(t)})},{label:"S",max:1,step:.01,getValue:e=>Math.round(e.s*100)/100,getColor:(e,t)=>({...e,s:Number(t)})},{label:"L",max:1,step:.01,getValue:e=>Math.round(e.l*100)/100,getColor:(e,t)=>({...e,l:Number(t)})},{label:"A",max:1,step:.01,getValue:e=>{let{a:t}=e;return t!=null?Math.round(t*100)/100:1},getColor:(e,t)=>({...e,a:Number(t)})}],to:_i,from:$a},tb={...ha,inputs:ha.inputs.slice(0,3)},nr={inputProps:{type:"text"},inputs:[{label:"HEXA",getValue:e=>e,getColor:(e,t)=>t}],to:Bi,from:dm},nb={...nr,inputs:[{label:"HEX",getValue:e=>e.slice(0,7),getColor:(e,t)=>t}]},Yt={rgb:eb,rgba:ma,hsl:tb,hsla:ha,hex:nb,hexa:nr},lb=e=>{let{label:t,...n}=e;return r("div",{class:"v-color-picker-edit__input"},[r("input",n,null),r("span",null,[t])])},ab=E({color:Object,disabled:Boolean,mode:{type:String,default:"rgba",validator:e=>Object.keys(Yt).includes(e)},modes:{type:Array,default:()=>Object.keys(Yt),validator:e=>Array.isArray(e)&&e.every(t=>Object.keys(Yt).includes(t))},...q()},"VColorPickerEdit"),ob=ut({name:"VColorPickerEdit",props:ab(),emits:{"update:color":e=>!0,"update:mode":e=>!0},setup(e,t){let{emit:n}=t;const l=g(()=>e.modes.map(o=>({...Yt[o],name:o}))),a=g(()=>{var s;const o=l.value.find(u=>u.name===e.mode);if(!o)return[];const i=e.color?o.to(e.color):null;return(s=o.inputs)==null?void 0:s.map(u=>{let{getValue:c,getColor:d,...f}=u;return{...o.inputProps,...f,disabled:e.disabled,value:i&&c(i),onChange:v=>{const m=v.target;m&&n("update:color",o.from(d(i??Rn,m.value)))}}})});return j(()=>{var o;return r("div",{class:["v-color-picker-edit",e.class],style:e.style},[(o=a.value)==null?void 0:o.map(i=>r(lb,i,null)),l.value.length>1&&r(Ke,{icon:"$unfold",size:"x-small",variant:"plain",onClick:()=>{const i=l.value.findIndex(s=>s.name===e.mode);n("update:mode",l.value[(i+1)%l.value.length].name)}},null)])}),{}}});const so=Symbol.for("vuetify:v-slider");function ga(e,t,n){const l=n==="vertical",a=t.getBoundingClientRect(),o="touches"in e?e.touches[0]:e;return l?o.clientY-(a.top+a.height/2):o.clientX-(a.left+a.width/2)}function ib(e,t){return"touches"in e&&e.touches.length?e.touches[0][t]:"changedTouches"in e&&e.changedTouches.length?e.changedTouches[0][t]:e[t]}const lr=E({disabled:{type:Boolean,default:null},error:Boolean,readonly:{type:Boolean,default:null},max:{type:[Number,String],default:100},min:{type:[Number,String],default:0},step:{type:[Number,String],default:0},thumbColor:String,thumbLabel:{type:[Boolean,String],default:void 0,validator:e=>typeof e=="boolean"||e==="always"},thumbSize:{type:[Number,String],default:20},showTicks:{type:[Boolean,String],default:!1,validator:e=>typeof e=="boolean"||e==="always"},ticks:{type:[Array,Object]},tickSize:{type:[Number,String],default:2},color:String,trackColor:String,trackFillColor:String,trackSize:{type:[Number,String],default:4},direction:{type:String,default:"horizontal",validator:e=>["vertical","horizontal"].includes(e)},reverse:Boolean,...Pe(),...Me({elevation:2})},"Slider"),ar=e=>{const t=g(()=>parseFloat(e.min)),n=g(()=>parseFloat(e.max)),l=g(()=>+e.step>0?parseFloat(e.step):0),a=g(()=>Math.max(ho(l.value),ho(t.value)));function o(i){if(i=parseFloat(i),l.value<=0)return i;const s=Ue(i,t.value,n.value),u=t.value%l.value,c=Math.round((s-u)/l.value)*l.value+u;return parseFloat(Math.min(c,n.value).toFixed(a.value))}return{min:t,max:n,step:l,decimals:a,roundValue:o}},or=e=>{let{props:t,steps:n,onSliderStart:l,onSliderMove:a,onSliderEnd:o,getActiveThumb:i}=e;const{isRtl:s}=De(),u=F(t,"reverse"),c=g(()=>{let N=s.value?"rtl":"ltr";return t.reverse&&(N=N==="rtl"?"ltr":"rtl"),N}),{min:d,max:f,step:v,decimals:m,roundValue:h}=n,y=g(()=>parseInt(t.thumbSize,10)),b=g(()=>parseInt(t.tickSize,10)),p=g(()=>parseInt(t.trackSize,10)),S=g(()=>(f.value-d.value)/v.value),x=F(t,"disabled"),I=g(()=>t.direction==="vertical"),V=g(()=>t.error||t.disabled?void 0:t.thumbColor??t.color),C=g(()=>t.error||t.disabled?void 0:t.trackColor??t.color),P=g(()=>t.error||t.disabled?void 0:t.trackFillColor??t.color),k=K(!1),w=K(0),T=W(),A=W();function B(N){var Ae;const me=t.direction==="vertical",te=me?"top":"left",H=me?"height":"width",le=me?"clientY":"clientX",{[te]:pe,[H]:de}=(Ae=T.value)==null?void 0:Ae.$el.getBoundingClientRect(),ie=ib(N,le);let fe=Math.min(Math.max((ie-pe-w.value)/de,0),1)||0;return(me||c.value==="rtl")&&(fe=1-fe),h(d.value+fe*(f.value-d.value))}const R=N=>{o({value:B(N)}),k.value=!1,w.value=0},M=N=>{A.value=i(N),A.value&&(A.value.focus(),k.value=!0,A.value.contains(N.target)?w.value=ga(N,A.value,t.direction):(w.value=0,a({value:B(N)})),l({value:B(N)}))},X={passive:!0,capture:!0};function $(N){a({value:B(N)})}function D(N){N.stopPropagation(),N.preventDefault(),R(N),window.removeEventListener("mousemove",$,X),window.removeEventListener("mouseup",D)}function O(N){var me;R(N),window.removeEventListener("touchmove",$,X),(me=N.target)==null||me.removeEventListener("touchend",O)}function G(N){var me;M(N),window.addEventListener("touchmove",$,X),(me=N.target)==null||me.addEventListener("touchend",O,{passive:!1})}function U(N){N.preventDefault(),M(N),window.addEventListener("mousemove",$,X),window.addEventListener("mouseup",D,{passive:!1})}const z=N=>{const me=(N-d.value)/(f.value-d.value)*100;return Ue(isNaN(me)?0:me,0,100)},oe=F(t,"showTicks"),re=g(()=>oe.value?t.ticks?Array.isArray(t.ticks)?t.ticks.map(N=>({value:N,position:z(N),label:N.toString()})):Object.keys(t.ticks).map(N=>({value:parseFloat(N),position:z(parseFloat(N)),label:t.ticks[N]})):S.value!==1/0?Ct(S.value+1).map(N=>{const me=d.value+N*v.value;return{value:me,position:z(me)}}):[]:[]),ve=g(()=>re.value.some(N=>{let{label:me}=N;return!!me})),ge={activeThumbRef:A,color:F(t,"color"),decimals:m,disabled:x,direction:F(t,"direction"),elevation:F(t,"elevation"),hasLabels:ve,horizontalDirection:c,isReversed:u,min:d,max:f,mousePressed:k,numTicks:S,onSliderMousedown:U,onSliderTouchstart:G,parsedTicks:re,parseMouseMove:B,position:z,readonly:F(t,"readonly"),rounded:F(t,"rounded"),roundValue:h,showTicks:oe,startOffset:w,step:v,thumbSize:y,thumbColor:V,thumbLabel:F(t,"thumbLabel"),ticks:F(t,"ticks"),tickSize:b,trackColor:C,trackContainerRef:T,trackFillColor:P,trackSize:p,vertical:I};return Oe(so,ge),ge},sb=E({focused:Boolean,max:{type:Number,required:!0},min:{type:Number,required:!0},modelValue:{type:Number,required:!0},position:{type:Number,required:!0},ripple:{type:[Boolean,Object],default:!0},...q()},"VSliderThumb"),ya=L()({name:"VSliderThumb",directives:{Ripple:Ft},props:sb(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=_e(so),{rtlClasses:o}=De();if(!a)throw new Error("[Vuetify] v-slider-thumb must be used inside v-slider or v-range-slider");const{thumbColor:i,step:s,vertical:u,disabled:c,thumbSize:d,thumbLabel:f,direction:v,readonly:m,elevation:h,isReversed:y,horizontalDirection:b,mousePressed:p,decimals:S}=a,{textColorClasses:x,textColorStyles:I}=Ge(i),{pageup:V,pagedown:C,end:P,home:k,left:w,right:T,down:A,up:B}=Wl,R=[V,C,P,k,w,T,A,B],M=g(()=>s.value?[1,2,3]:[1,5,10]);function X(D,O){if(!R.includes(D.key))return;D.preventDefault();const G=s.value||.1,U=(e.max-e.min)/G;if([w,T,A,B].includes(D.key)){const oe=(b.value==="rtl"?[w,B]:[T,B]).includes(D.key)?1:-1,re=D.shiftKey?2:D.ctrlKey?1:0;O=O+oe*G*M.value[re]}else if(D.key===k)O=e.min;else if(D.key===P)O=e.max;else{const z=D.key===C?1:-1;O=O-z*G*(U>100?U/10:10)}return Math.max(e.min,Math.min(e.max,O))}function $(D){const O=X(D,e.modelValue);O!=null&&l("update:modelValue",O)}return j(()=>{const D=J(u.value||y.value?100-e.position:e.position,"%"),{elevationClasses:O}=He(g(()=>c.value?void 0:h.value));return r("div",{class:["v-slider-thumb",{"v-slider-thumb--focused":e.focused,"v-slider-thumb--pressed":e.focused&&p.value},e.class,o.value],style:[{"--v-slider-thumb-position":D,"--v-slider-thumb-size":J(d.value)},e.style],role:"slider",tabindex:c.value?-1:0,"aria-valuemin":e.min,"aria-valuemax":e.max,"aria-valuenow":e.modelValue,"aria-readonly":!!m.value,"aria-orientation":v.value,onKeydown:m.value?void 0:$},[r("div",{class:["v-slider-thumb__surface",x.value,O.value],style:{...I.value}},null),ne(r("div",{class:["v-slider-thumb__ripple",x.value],style:I.value},null),[[Ze("ripple"),e.ripple,null,{circle:!0,center:!0}]]),r(Ha,{origin:"bottom center"},{default:()=>{var G;return[ne(r("div",{class:"v-slider-thumb__label-container"},[r("div",{class:["v-slider-thumb__label"]},[r("div",null,[((G=n["thumb-label"])==null?void 0:G.call(n,{modelValue:e.modelValue}))??e.modelValue.toFixed(s.value?S.value:1)])])]),[[Te,f.value&&e.focused||f.value==="always"]])]}})])}),{}}});const rb=E({start:{type:Number,required:!0},stop:{type:Number,required:!0},...q()},"VSliderTrack"),ir=L()({name:"VSliderTrack",props:rb(),emits:{},setup(e,t){let{slots:n}=t;const l=_e(so);if(!l)throw new Error("[Vuetify] v-slider-track must be inside v-slider or v-range-slider");const{color:a,horizontalDirection:o,parsedTicks:i,rounded:s,showTicks:u,tickSize:c,trackColor:d,trackFillColor:f,trackSize:v,vertical:m,min:h,max:y}=l,{roundedClasses:b}=Be(s),{backgroundColorClasses:p,backgroundColorStyles:S}=Ee(f),{backgroundColorClasses:x,backgroundColorStyles:I}=Ee(d),V=g(()=>`inset-${m.value?"block-end":"inline-start"}`),C=g(()=>m.value?"height":"width"),P=g(()=>({[V.value]:"0%",[C.value]:"100%"})),k=g(()=>e.stop-e.start),w=g(()=>({[V.value]:J(e.start,"%"),[C.value]:J(k.value,"%")})),T=g(()=>u.value?(m.value?i.value.slice().reverse():i.value).map((B,R)=>{var $;const M=m.value?"bottom":"margin-inline-start",X=B.value!==h.value&&B.value!==y.value?J(B.position,"%"):void 0;return r("div",{key:B.value,class:["v-slider-track__tick",{"v-slider-track__tick--filled":B.position>=e.start&&B.position<=e.stop,"v-slider-track__tick--first":B.value===h.value,"v-slider-track__tick--last":B.value===y.value}],style:{[M]:X}},[(B.label||n["tick-label"])&&r("div",{class:"v-slider-track__tick-label"},[(($=n["tick-label"])==null?void 0:$.call(n,{tick:B,index:R}))??B.label])])}):[]);return j(()=>r("div",{class:["v-slider-track",b.value,e.class],style:[{"--v-slider-track-size":J(v.value),"--v-slider-tick-size":J(c.value),direction:m.value?void 0:o.value},e.style]},[r("div",{class:["v-slider-track__background",x.value,{"v-slider-track__background--opacity":!!a.value||!f.value}],style:{...P.value,...I.value}},null),r("div",{class:["v-slider-track__fill",p.value],style:{...w.value,...S.value}},null),u.value&&r("div",{class:["v-slider-track__ticks",{"v-slider-track__ticks--always-show":u.value==="always"}]},[T.value])])),{}}}),ub=E({...Vl(),...lr(),...Bt(),modelValue:{type:[Number,String],default:0}},"VSlider"),ba=L()({name:"VSlider",props:ub(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,start:e=>!0,end:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=W(),{rtlClasses:o}=De(),i=ar(e),s=ue(e,"modelValue",void 0,C=>i.roundValue(C??i.min.value)),{min:u,max:c,mousePressed:d,roundValue:f,onSliderMousedown:v,onSliderTouchstart:m,trackContainerRef:h,position:y,hasLabels:b,readonly:p}=or({props:e,steps:i,onSliderStart:()=>{l("start",s.value)},onSliderEnd:C=>{let{value:P}=C;const k=f(P);s.value=k,l("end",k)},onSliderMove:C=>{let{value:P}=C;return s.value=f(P)},getActiveThumb:()=>{var C;return(C=a.value)==null?void 0:C.$el}}),{isFocused:S,focus:x,blur:I}=Nt(e),V=g(()=>y(s.value));return j(()=>{const[C,P]=ze.filterProps(e),k=!!(e.label||n.label||n.prepend);return r(ze,Y({class:["v-slider",{"v-slider--has-labels":!!n["tick-label"]||b.value,"v-slider--focused":S.value,"v-slider--pressed":d.value,"v-slider--disabled":e.disabled},o.value,e.class],style:e.style},C,{focused:S.value}),{...n,prepend:k?w=>{var T,A;return r(ae,null,[((T=n.label)==null?void 0:T.call(n,w))??(e.label?r(_n,{id:w.id.value,class:"v-slider__label",text:e.label},null):void 0),(A=n.prepend)==null?void 0:A.call(n,w)])}:void 0,default:w=>{let{id:T,messagesId:A}=w;return r("div",{class:"v-slider__container",onMousedown:p.value?void 0:v,onTouchstartPassive:p.value?void 0:m},[r("input",{id:T.value,name:e.name||T.value,disabled:!!e.disabled,readonly:!!e.readonly,tabindex:"-1",value:s.value},null),r(ir,{ref:h,start:0,stop:V.value},{"tick-label":n["tick-label"]}),r(ya,{ref:a,"aria-describedby":A.value,focused:S.value,min:u.value,max:c.value,modelValue:s.value,"onUpdate:modelValue":B=>s.value=B,position:V.value,elevation:e.elevation,onFocus:x,onBlur:I},{"thumb-label":n["thumb-label"]})])}})}),{}}}),cb=E({color:{type:Object},disabled:Boolean,hideAlpha:Boolean,...q()},"VColorPickerPreview"),db=ut({name:"VColorPickerPreview",props:cb(),emits:{"update:color":e=>!0},setup(e,t){let{emit:n}=t;return j(()=>{var l,a;return r("div",{class:["v-color-picker-preview",{"v-color-picker-preview--hide-alpha":e.hideAlpha},e.class],style:e.style},[r("div",{class:"v-color-picker-preview__dot"},[r("div",{style:{background:Ti(e.color??Rn)}},null)]),r("div",{class:"v-color-picker-preview__sliders"},[r(ba,{class:"v-color-picker-preview__track v-color-picker-preview__hue",modelValue:(l=e.color)==null?void 0:l.h,"onUpdate:modelValue":o=>n("update:color",{...e.color??Rn,h:o}),step:0,min:0,max:360,disabled:e.disabled,thumbSize:14,trackSize:8,trackFillColor:"white",hideDetails:!0},null),!e.hideAlpha&&r(ba,{class:"v-color-picker-preview__track v-color-picker-preview__alpha",modelValue:((a=e.color)==null?void 0:a.a)??1,"onUpdate:modelValue":o=>n("update:color",{...e.color??Rn,a:o}),step:1/256,min:0,max:1,disabled:e.disabled,thumbSize:14,trackSize:8,trackFillColor:"white",hideDetails:!0},null)])])}),{}}});const vb=Object.freeze({base:"#f44336",lighten5:"#ffebee",lighten4:"#ffcdd2",lighten3:"#ef9a9a",lighten2:"#e57373",lighten1:"#ef5350",darken1:"#e53935",darken2:"#d32f2f",darken3:"#c62828",darken4:"#b71c1c",accent1:"#ff8a80",accent2:"#ff5252",accent3:"#ff1744",accent4:"#d50000"}),fb=Object.freeze({base:"#e91e63",lighten5:"#fce4ec",lighten4:"#f8bbd0",lighten3:"#f48fb1",lighten2:"#f06292",lighten1:"#ec407a",darken1:"#d81b60",darken2:"#c2185b",darken3:"#ad1457",darken4:"#880e4f",accent1:"#ff80ab",accent2:"#ff4081",accent3:"#f50057",accent4:"#c51162"}),mb=Object.freeze({base:"#9c27b0",lighten5:"#f3e5f5",lighten4:"#e1bee7",lighten3:"#ce93d8",lighten2:"#ba68c8",lighten1:"#ab47bc",darken1:"#8e24aa",darken2:"#7b1fa2",darken3:"#6a1b9a",darken4:"#4a148c",accent1:"#ea80fc",accent2:"#e040fb",accent3:"#d500f9",accent4:"#aa00ff"}),hb=Object.freeze({base:"#673ab7",lighten5:"#ede7f6",lighten4:"#d1c4e9",lighten3:"#b39ddb",lighten2:"#9575cd",lighten1:"#7e57c2",darken1:"#5e35b1",darken2:"#512da8",darken3:"#4527a0",darken4:"#311b92",accent1:"#b388ff",accent2:"#7c4dff",accent3:"#651fff",accent4:"#6200ea"}),gb=Object.freeze({base:"#3f51b5",lighten5:"#e8eaf6",lighten4:"#c5cae9",lighten3:"#9fa8da",lighten2:"#7986cb",lighten1:"#5c6bc0",darken1:"#3949ab",darken2:"#303f9f",darken3:"#283593",darken4:"#1a237e",accent1:"#8c9eff",accent2:"#536dfe",accent3:"#3d5afe",accent4:"#304ffe"}),yb=Object.freeze({base:"#2196f3",lighten5:"#e3f2fd",lighten4:"#bbdefb",lighten3:"#90caf9",lighten2:"#64b5f6",lighten1:"#42a5f5",darken1:"#1e88e5",darken2:"#1976d2",darken3:"#1565c0",darken4:"#0d47a1",accent1:"#82b1ff",accent2:"#448aff",accent3:"#2979ff",accent4:"#2962ff"}),bb=Object.freeze({base:"#03a9f4",lighten5:"#e1f5fe",lighten4:"#b3e5fc",lighten3:"#81d4fa",lighten2:"#4fc3f7",lighten1:"#29b6f6",darken1:"#039be5",darken2:"#0288d1",darken3:"#0277bd",darken4:"#01579b",accent1:"#80d8ff",accent2:"#40c4ff",accent3:"#00b0ff",accent4:"#0091ea"}),pb=Object.freeze({base:"#00bcd4",lighten5:"#e0f7fa",lighten4:"#b2ebf2",lighten3:"#80deea",lighten2:"#4dd0e1",lighten1:"#26c6da",darken1:"#00acc1",darken2:"#0097a7",darken3:"#00838f",darken4:"#006064",accent1:"#84ffff",accent2:"#18ffff",accent3:"#00e5ff",accent4:"#00b8d4"}),wb=Object.freeze({base:"#009688",lighten5:"#e0f2f1",lighten4:"#b2dfdb",lighten3:"#80cbc4",lighten2:"#4db6ac",lighten1:"#26a69a",darken1:"#00897b",darken2:"#00796b",darken3:"#00695c",darken4:"#004d40",accent1:"#a7ffeb",accent2:"#64ffda",accent3:"#1de9b6",accent4:"#00bfa5"}),Sb=Object.freeze({base:"#4caf50",lighten5:"#e8f5e9",lighten4:"#c8e6c9",lighten3:"#a5d6a7",lighten2:"#81c784",lighten1:"#66bb6a",darken1:"#43a047",darken2:"#388e3c",darken3:"#2e7d32",darken4:"#1b5e20",accent1:"#b9f6ca",accent2:"#69f0ae",accent3:"#00e676",accent4:"#00c853"}),kb=Object.freeze({base:"#8bc34a",lighten5:"#f1f8e9",lighten4:"#dcedc8",lighten3:"#c5e1a5",lighten2:"#aed581",lighten1:"#9ccc65",darken1:"#7cb342",darken2:"#689f38",darken3:"#558b2f",darken4:"#33691e",accent1:"#ccff90",accent2:"#b2ff59",accent3:"#76ff03",accent4:"#64dd17"}),xb=Object.freeze({base:"#cddc39",lighten5:"#f9fbe7",lighten4:"#f0f4c3",lighten3:"#e6ee9c",lighten2:"#dce775",lighten1:"#d4e157",darken1:"#c0ca33",darken2:"#afb42b",darken3:"#9e9d24",darken4:"#827717",accent1:"#f4ff81",accent2:"#eeff41",accent3:"#c6ff00",accent4:"#aeea00"}),Cb=Object.freeze({base:"#ffeb3b",lighten5:"#fffde7",lighten4:"#fff9c4",lighten3:"#fff59d",lighten2:"#fff176",lighten1:"#ffee58",darken1:"#fdd835",darken2:"#fbc02d",darken3:"#f9a825",darken4:"#f57f17",accent1:"#ffff8d",accent2:"#ffff00",accent3:"#ffea00",accent4:"#ffd600"}),Vb=Object.freeze({base:"#ffc107",lighten5:"#fff8e1",lighten4:"#ffecb3",lighten3:"#ffe082",lighten2:"#ffd54f",lighten1:"#ffca28",darken1:"#ffb300",darken2:"#ffa000",darken3:"#ff8f00",darken4:"#ff6f00",accent1:"#ffe57f",accent2:"#ffd740",accent3:"#ffc400",accent4:"#ffab00"}),_b=Object.freeze({base:"#ff9800",lighten5:"#fff3e0",lighten4:"#ffe0b2",lighten3:"#ffcc80",lighten2:"#ffb74d",lighten1:"#ffa726",darken1:"#fb8c00",darken2:"#f57c00",darken3:"#ef6c00",darken4:"#e65100",accent1:"#ffd180",accent2:"#ffab40",accent3:"#ff9100",accent4:"#ff6d00"}),Ib=Object.freeze({base:"#ff5722",lighten5:"#fbe9e7",lighten4:"#ffccbc",lighten3:"#ffab91",lighten2:"#ff8a65",lighten1:"#ff7043",darken1:"#f4511e",darken2:"#e64a19",darken3:"#d84315",darken4:"#bf360c",accent1:"#ff9e80",accent2:"#ff6e40",accent3:"#ff3d00",accent4:"#dd2c00"}),Tb=Object.freeze({base:"#795548",lighten5:"#efebe9",lighten4:"#d7ccc8",lighten3:"#bcaaa4",lighten2:"#a1887f",lighten1:"#8d6e63",darken1:"#6d4c41",darken2:"#5d4037",darken3:"#4e342e",darken4:"#3e2723"}),Pb=Object.freeze({base:"#607d8b",lighten5:"#eceff1",lighten4:"#cfd8dc",lighten3:"#b0bec5",lighten2:"#90a4ae",lighten1:"#78909c",darken1:"#546e7a",darken2:"#455a64",darken3:"#37474f",darken4:"#263238"}),Ab=Object.freeze({base:"#9e9e9e",lighten5:"#fafafa",lighten4:"#f5f5f5",lighten3:"#eeeeee",lighten2:"#e0e0e0",lighten1:"#bdbdbd",darken1:"#757575",darken2:"#616161",darken3:"#424242",darken4:"#212121"}),Bb=Object.freeze({black:"#000000",white:"#ffffff",transparent:"#ffffff00"}),Eb=Object.freeze({red:vb,pink:fb,purple:mb,deepPurple:hb,indigo:gb,blue:yb,lightBlue:bb,cyan:pb,teal:wb,green:Sb,lightGreen:kb,lime:xb,yellow:Cb,amber:Vb,orange:_b,deepOrange:Ib,brown:Tb,blueGrey:Pb,grey:Ab,shades:Bb}),Rb=E({swatches:{type:Array,default:()=>Lb(Eb)},disabled:Boolean,color:Object,maxHeight:[Number,String],...q()},"VColorPickerSwatches");function Lb(e){return Object.keys(e).map(t=>{const n=e[t];return n.base?[n.base,n.darken4,n.darken3,n.darken2,n.darken1,n.lighten1,n.lighten2,n.lighten3,n.lighten4,n.lighten5]:[n.black,n.white,n.transparent]})}const $b=ut({name:"VColorPickerSwatches",props:Rb(),emits:{"update:color":e=>!0},setup(e,t){let{emit:n}=t;return j(()=>r("div",{class:["v-color-picker-swatches",e.class],style:[{maxHeight:J(e.maxHeight)},e.style]},[r("div",null,[e.swatches.map(l=>r("div",{class:"v-color-picker-swatches__swatch"},[l.map(a=>{const o=st(a),i=bl(o),s=Ii(o);return r("div",{class:"v-color-picker-swatches__color",onClick:()=>i&&n("update:color",i)},[r("div",{style:{background:s}},[e.color&&yn(e.color,i)?r(ke,{size:"x-small",icon:"$success",color:hm(a,"#FFFFFF")>2?"white":"black"},null):void 0])])})]))])])),{}}});const sr=E({color:String,...at(),...q(),...dt(),...Me(),...Ot(),...Cn(),...Pe(),...ce(),...ye()},"VSheet"),pa=L()({name:"VSheet",props:sr(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=be(e),{backgroundColorClasses:a,backgroundColorStyles:o}=Ee(F(e,"color")),{borderClasses:i}=ft(e),{dimensionStyles:s}=vt(e),{elevationClasses:u}=He(e),{locationStyles:c}=Mt(e),{positionClasses:d}=Vn(e),{roundedClasses:f}=Be(e);return j(()=>r(e.tag,{class:["v-sheet",l.value,a.value,i.value,u.value,d.value,f.value,e.class],style:[o.value,s.value,c.value,e.style]},n)),{}}}),Ob=E({canvasHeight:{type:[String,Number],default:150},disabled:Boolean,dotSize:{type:[Number,String],default:10},hideCanvas:Boolean,hideSliders:Boolean,hideInputs:Boolean,mode:{type:String,default:"rgba",validator:e=>Object.keys(Yt).includes(e)},modes:{type:Array,default:()=>Object.keys(Yt),validator:e=>Array.isArray(e)&&e.every(t=>Object.keys(Yt).includes(t))},showSwatches:Boolean,swatches:Array,swatchesMaxHeight:{type:[Number,String],default:150},modelValue:{type:[Object,String]},...rt(sr({width:300}),["height","location","minHeight","maxHeight","minWidth","maxWidth"])},"VColorPicker"),Mb=ut({name:"VColorPicker",props:Ob(),emits:{"update:modelValue":e=>!0,"update:mode":e=>!0},setup(e){const t=ue(e,"mode"),n=W(null),l=ue(e,"modelValue",void 0,i=>{if(i==null||i==="")return null;let s;try{s=bl(st(i))}catch{return null}return n.value&&(s={...s,h:n.value.h},n.value=null),s},i=>i?Qy(i,e.modelValue):null),{rtlClasses:a}=De(),o=i=>{l.value=i,n.value=i};return Je(()=>{e.modes.includes(t.value)||(t.value=e.modes[0])}),$e({VSlider:{color:void 0,trackColor:void 0,trackFillColor:void 0}}),j(()=>{const[i]=pa.filterProps(e);return r(pa,Y({rounded:e.rounded,elevation:e.elevation,theme:e.theme,class:["v-color-picker",a.value,e.class],style:[{"--v-color-picker-color-hsv":Ti({...l.value??Rn,a:1})},e.style]},i,{maxWidth:e.width}),{default:()=>[!e.hideCanvas&&r(Zy,{key:"canvas",color:l.value,"onUpdate:color":o,disabled:e.disabled,dotSize:e.dotSize,width:e.width,height:e.canvasHeight},null),(!e.hideSliders||!e.hideInputs)&&r("div",{key:"controls",class:"v-color-picker__controls"},[!e.hideSliders&&r(db,{key:"preview",color:l.value,"onUpdate:color":o,hideAlpha:!t.value.endsWith("a"),disabled:e.disabled},null),!e.hideInputs&&r(ob,{key:"edit",modes:e.modes,mode:t.value,"onUpdate:mode":s=>t.value=s,color:l.value,"onUpdate:color":o,disabled:e.disabled},null)]),e.showSwatches&&r($b,{key:"swatches",color:l.value,"onUpdate:color":o,maxHeight:e.swatchesMaxHeight,swatches:e.swatches,disabled:e.disabled},null)]})}),{}}});function Fb(e,t,n){if(t==null)return e;if(Array.isArray(t))throw new Error("Multiple matches is not implemented");return typeof t=="number"&&~t?r(ae,null,[r("span",{class:"v-combobox__unmask"},[e.substr(0,t)]),r("span",{class:"v-combobox__mask"},[e.substr(t,n)]),r("span",{class:"v-combobox__unmask"},[e.substr(t+n)])]):e}const Nb=E({autoSelectFirst:{type:[Boolean,String]},delimiters:Array,...zs({filterKeys:["title"]}),...oo({hideNoData:!0,returnObject:!0}),...rt(El({modelValue:null,role:"combobox"}),["validationValue","dirty","appendInnerIcon"]),...Pt({transition:!1})},"VCombobox"),Db=L()({name:"VCombobox",props:Nb(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,"update:search":e=>!0,"update:menu":e=>!0},setup(e,t){var te;let{emit:n,slots:l}=t;const{t:a}=ct(),o=W(),i=K(!1),s=K(!0),u=K(!1),c=W(),d=W(),f=ue(e,"menu"),v=g({get:()=>f.value,set:H=>{var le;f.value&&!H&&((le=c.value)!=null&&le.ΨopenChildren)||(f.value=H)}}),m=K(-1);let h=!1;const y=g(()=>{var H;return(H=o.value)==null?void 0:H.color}),b=g(()=>v.value?e.closeText:e.openText),{items:p,transformIn:S,transformOut:x}=to(e),{textColorClasses:I,textColorStyles:V}=Ge(y),C=ue(e,"modelValue",[],H=>S(et(H)),H=>{const le=x(H);return e.multiple?le:le[0]??null}),P=_l(),k=K(e.multiple?"":((te=C.value[0])==null?void 0:te.title)??""),w=g({get:()=>k.value,set:H=>{var le;if(k.value=H,e.multiple||(C.value=[Gt(e,H)]),H&&e.multiple&&((le=e.delimiters)!=null&&le.length)){const pe=H.split(new RegExp(`(?:${e.delimiters.join("|")})+`));pe.length>1&&(pe.forEach(de=>{de=de.trim(),de&&ve(Gt(e,de))}),k.value="")}H||(m.value=-1),s.value=!H}});Z(k,H=>{h?Ve(()=>h=!1):i.value&&!v.value&&(v.value=!0),n("update:search",H)}),Z(C,H=>{var le;e.multiple||(k.value=((le=H[0])==null?void 0:le.title)??"")});const{filteredItems:T,getMatches:A}=Hs(e,p,()=>s.value?"":w.value),B=g(()=>e.hideSelected?T.value.filter(H=>!C.value.some(le=>le.value===H.value)):T.value),R=g(()=>C.value.map(H=>H.value)),M=g(()=>{var le;return(e.autoSelectFirst===!0||e.autoSelectFirst==="exact"&&w.value===((le=B.value[0])==null?void 0:le.title))&&B.value.length>0&&!s.value&&!u.value}),X=g(()=>e.hideNoData&&!p.value.length||e.readonly||(P==null?void 0:P.isReadonly.value)),$=W(),{onListScroll:D,onListKeydown:O}=ao($,o);function G(H){h=!0,e.openOnClear&&(v.value=!0)}function U(){X.value||(v.value=!0)}function z(H){X.value||(i.value&&(H.preventDefault(),H.stopPropagation()),v.value=!v.value)}function oe(H){var de;if(e.readonly||P!=null&&P.isReadonly.value)return;const le=o.value.selectionStart,pe=C.value.length;if((m.value>-1||["Enter","ArrowDown","ArrowUp"].includes(H.key))&&H.preventDefault(),["Enter","ArrowDown"].includes(H.key)&&(v.value=!0),["Escape"].includes(H.key)&&(v.value=!1),["Enter","Escape","Tab"].includes(H.key)&&(M.value&&["Enter","Tab"].includes(H.key)&&ve(T.value[0]),s.value=!0),H.key==="ArrowDown"&&M.value&&((de=$.value)==null||de.focus("next")),!!e.multiple){if(["Backspace","Delete"].includes(H.key)){if(m.value<0){H.key==="Backspace"&&!w.value&&(m.value=pe-1);return}const ie=m.value,fe=C.value[m.value];fe&&!fe.props.disabled&&ve(fe),m.value=ie>=pe-1?pe-2:ie}if(H.key==="ArrowLeft"){if(m.value<0&&le>0)return;const ie=m.value>-1?m.value-1:pe-1;C.value[ie]?m.value=ie:(m.value=-1,o.value.setSelectionRange(w.value.length,w.value.length))}if(H.key==="ArrowRight"){if(m.value<0)return;const ie=m.value+1;C.value[ie]?m.value=ie:(m.value=-1,o.value.setSelectionRange(0,0))}H.key==="Enter"&&w.value&&(ve(Gt(e,w.value)),w.value="")}}function re(){var H;i.value&&(s.value=!0,(H=o.value)==null||H.focus())}function ve(H){if(e.multiple){const le=C.value.findIndex(pe=>e.valueComparator(pe.value,H.value));if(le===-1)C.value=[...C.value,H];else{const pe=[...C.value];pe.splice(le,1),C.value=pe}w.value=""}else C.value=[H],k.value=H.title,Ve(()=>{v.value=!1,s.value=!0})}function ge(H){i.value=!0,setTimeout(()=>{u.value=!0})}function N(H){u.value=!1}function me(H){(H==null||H===""&&!e.multiple)&&(C.value=[])}return Z(T,H=>{!H.length&&e.hideNoData&&(v.value=!1)}),Z(i,(H,le)=>{H||H===le||(m.value=-1,v.value=!1,M.value&&!u.value&&!C.value.some(pe=>{let{value:de}=pe;return de===B.value[0].value})?ve(B.value[0]):e.multiple&&w.value&&(C.value=[...C.value,Gt(e,w.value)],w.value=""))}),Z(v,()=>{if(!e.hideSelected&&v.value&&C.value.length){const H=B.value.findIndex(le=>C.value.some(pe=>e.valueComparator(pe.value,le.value)));Ce&&window.requestAnimationFrame(()=>{var le;H>=0&&((le=d.value)==null||le.scrollToIndex(H))})}}),j(()=>{const H=!!(e.chips||l.chip),le=!!(!e.hideNoData||B.value.length||l["prepend-item"]||l["append-item"]||l["no-data"]),pe=C.value.length>0,[de]=Zt.filterProps(e);return r(Zt,Y({ref:o},de,{modelValue:w.value,"onUpdate:modelValue":[ie=>w.value=ie,me],focused:i.value,"onUpdate:focused":ie=>i.value=ie,validationValue:C.externalValue,counterValue:e.multiple?C.value.length:w.value.length,dirty:pe,class:["v-combobox",{"v-combobox--active-menu":v.value,"v-combobox--chips":!!e.chips,"v-combobox--selection-slot":!!l.selection,"v-combobox--selecting-index":m.value>-1,[`v-combobox--${e.multiple?"multiple":"single"}`]:!0},e.class],style:e.style,readonly:e.readonly,placeholder:pe?void 0:e.placeholder,"onClick:clear":G,"onMousedown:control":U,onKeydown:oe}),{...l,default:()=>r(ae,null,[r(Pl,Y({ref:c,modelValue:v.value,"onUpdate:modelValue":ie=>v.value=ie,activator:"parent",contentClass:"v-combobox__content",disabled:X.value,eager:e.eager,maxHeight:310,openOnClick:!1,closeOnContentClick:!1,transition:e.transition,onAfterLeave:re},e.menuProps),{default:()=>[le&&r(Il,{ref:$,selected:R.value,selectStrategy:e.multiple?"independent":"single-independent",onMousedown:ie=>ie.preventDefault(),onKeydown:O,onFocusin:ge,onFocusout:N,onScrollPassive:D,tabindex:"-1",color:e.itemColor??e.color},{default:()=>{var ie,fe,Ae;return[(ie=l["prepend-item"])==null?void 0:ie.call(l),!B.value.length&&!e.hideNoData&&(((fe=l["no-data"])==null?void 0:fe.call(l))??r(_t,{title:a(e.noDataText)},null)),r(Rl,{ref:d,renderless:!0,items:B.value},{default:Le=>{var Dt;let{item:Ie,index:qe,itemRef:Jn}=Le;const Tn=Y(Ie.props,{ref:Jn,key:qe,active:M.value&&qe===0?!0:void 0,onClick:()=>ve(Ie)});return((Dt=l.item)==null?void 0:Dt.call(l,{item:Ie,index:qe,props:Tn}))??r(_t,Tn,{prepend:xt=>{let{isSelected:Qn}=xt;return r(ae,null,[e.multiple&&!e.hideSelected?r(hn,{key:Ie.value,modelValue:Qn,ripple:!1,tabindex:"-1"},null):void 0,Ie.props.prependIcon&&r(ke,{icon:Ie.props.prependIcon},null)])},title:()=>{var xt,Qn;return s.value?Ie.title:Fb(Ie.title,(xt=A(Ie))==null?void 0:xt.title,((Qn=w.value)==null?void 0:Qn.length)??0)}})}}),(Ae=l["append-item"])==null?void 0:Ae.call(l)]}})]}),C.value.map((ie,fe)=>{var Ie;function Ae(qe){qe.stopPropagation(),qe.preventDefault(),ve(ie)}const Le={"onClick:close":Ae,onMousedown(qe){qe.preventDefault(),qe.stopPropagation()},modelValue:!0,"onUpdate:modelValue":void 0};return r("div",{key:ie.value,class:["v-combobox__selection",fe===m.value&&["v-combobox__selection--selected",I.value]],style:fe===m.value?V.value:{}},[H?l.chip?r(we,{key:"chip-defaults",defaults:{VChip:{closable:e.closableChips,size:"small",text:ie.title}}},{default:()=>{var qe;return[(qe=l.chip)==null?void 0:qe.call(l,{item:ie,index:fe,props:Le})]}}):r(Kn,Y({key:"chip",closable:e.closableChips,size:"small",text:ie.title,disabled:ie.props.disabled},Le),null):((Ie=l.selection)==null?void 0:Ie.call(l,{item:ie,index:fe}))??r("span",{class:"v-combobox__selection-text"},[ie.title,e.multiple&&fe<C.value.length-1&&r("span",{class:"v-combobox__selection-comma"},[yl(",")])])])})]),"append-inner":function(){var Le;for(var ie=arguments.length,fe=new Array(ie),Ae=0;Ae<ie;Ae++)fe[Ae]=arguments[Ae];return r(ae,null,[(Le=l["append-inner"])==null?void 0:Le.call(l,...fe),(!e.hideNoData||e.items.length)&&e.menuIcon?r(ke,{class:"v-combobox__menu-icon",icon:e.menuIcon,onMousedown:z,onClick:Si,"aria-label":a(b.value),title:a(b.value)},null):void 0])}})}),bt({isFocused:i,isPristine:s,menu:v,search:w,selectionIndex:m,filteredItems:T,select:ve},o)}});const zb=E({fullscreen:Boolean,retainFocus:{type:Boolean,default:!0},scrollable:Boolean,...qn({origin:"center center",scrollStrategy:"block",transition:{component:Sl},zIndex:2400})},"VDialog"),Hb=L()({name:"VDialog",props:zb(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{scopeId:a}=In(),o=W();function i(u){var f,v;const c=u.relatedTarget,d=u.target;if(c!==d&&((f=o.value)!=null&&f.contentEl)&&((v=o.value)!=null&&v.globalTop)&&![document,o.value.contentEl].includes(d)&&!o.value.contentEl.contains(d)){const m=Ln(o.value.contentEl);if(!m.length)return;const h=m[0],y=m[m.length-1];c===h?y.focus():h.focus()}}Ce&&Z(()=>l.value&&e.retainFocus,u=>{u?document.addEventListener("focusin",i):document.removeEventListener("focusin",i)},{immediate:!0}),Z(l,async u=>{var c,d;await Ve(),u?(c=o.value.contentEl)==null||c.focus({preventScroll:!0}):(d=o.value.activatorEl)==null||d.focus({preventScroll:!0})});const s=g(()=>Y({"aria-haspopup":"dialog","aria-expanded":String(l.value)},e.activatorProps));return j(()=>{const[u]=It.filterProps(e);return r(It,Y({ref:o,class:["v-dialog",{"v-dialog--fullscreen":e.fullscreen,"v-dialog--scrollable":e.scrollable},e.class],style:e.style},u,{modelValue:l.value,"onUpdate:modelValue":c=>l.value=c,"aria-modal":"true",activatorProps:s.value,role:"dialog"},a),{activator:n.activator,default:function(){for(var c=arguments.length,d=new Array(c),f=0;f<c;f++)d[f]=arguments[f];return r(we,{root:"VDialog"},{default:()=>{var v;return[(v=n.default)==null?void 0:v.call(n,...d)]}})}})}),bt({},o)}});const Dn=Symbol.for("vuetify:v-expansion-panel"),jb=["default","accordion","inset","popout"],Ub=E({color:String,variant:{type:String,default:"default",validator:e=>jb.includes(e)},readonly:Boolean,...q(),...wn(),...ce(),...ye()},"VExpansionPanels"),Gb=L()({name:"VExpansionPanels",props:Ub(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;an(e,Dn);const{themeClasses:l}=be(e),a=g(()=>e.variant&&`v-expansion-panels--variant-${e.variant}`);return $e({VExpansionPanel:{color:F(e,"color")},VExpansionPanelTitle:{readonly:F(e,"readonly")}}),j(()=>r(e.tag,{class:["v-expansion-panels",l.value,a.value,e.class],style:e.style},n)),{}}}),Wb=E({...q(),...Tl()},"VExpansionPanelText"),rr=L()({name:"VExpansionPanelText",props:Wb(),setup(e,t){let{slots:n}=t;const l=_e(Dn);if(!l)throw new Error("[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel");const{hasContent:a,onAfterLeave:o}=no(e,l.isSelected);return j(()=>r(kl,{onAfterLeave:o},{default:()=>{var i;return[ne(r("div",{class:["v-expansion-panel-text",e.class],style:e.style},[n.default&&a.value&&r("div",{class:"v-expansion-panel-text__wrapper"},[(i=n.default)==null?void 0:i.call(n)])]),[[Te,l.isSelected.value]])]}})),{}}}),ur=E({color:String,expandIcon:{type:se,default:"$expand"},collapseIcon:{type:se,default:"$collapse"},hideActions:Boolean,ripple:{type:[Boolean,Object],default:!1},readonly:Boolean,...q()},"VExpansionPanelTitle"),cr=L()({name:"VExpansionPanelTitle",directives:{Ripple:Ft},props:ur(),setup(e,t){let{slots:n}=t;const l=_e(Dn);if(!l)throw new Error("[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel");const{backgroundColorClasses:a,backgroundColorStyles:o}=Ee(e,"color"),i=g(()=>({collapseIcon:e.collapseIcon,disabled:l.disabled.value,expanded:l.isSelected.value,expandIcon:e.expandIcon,readonly:e.readonly}));return j(()=>{var s;return ne(r("button",{class:["v-expansion-panel-title",{"v-expansion-panel-title--active":l.isSelected.value},a.value,e.class],style:[o.value,e.style],type:"button",tabindex:l.disabled.value?-1:void 0,disabled:l.disabled.value,"aria-expanded":l.isSelected.value,onClick:e.readonly?void 0:l.toggle},[r("span",{class:"v-expansion-panel-title__overlay"},null),(s=n.default)==null?void 0:s.call(n,i.value),!e.hideActions&&r("span",{class:"v-expansion-panel-title__icon"},[n.actions?n.actions(i.value):r(ke,{icon:l.isSelected.value?e.collapseIcon:e.expandIcon},null)])]),[[Ze("ripple"),e.ripple]])}),{}}}),Yb=E({title:String,text:String,bgColor:String,...q(),...Me(),...Sn(),...Tl(),...Pe(),...ce(),...ur()},"VExpansionPanel"),Kb=L()({name:"VExpansionPanel",props:Yb(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const l=kn(e,Dn),{backgroundColorClasses:a,backgroundColorStyles:o}=Ee(e,"bgColor"),{elevationClasses:i}=He(e),{roundedClasses:s}=Be(e),u=g(()=>(l==null?void 0:l.disabled.value)||e.disabled),c=g(()=>l.group.items.value.reduce((v,m,h)=>(l.group.selected.value.includes(m.id)&&v.push(h),v),[])),d=g(()=>{const v=l.group.items.value.findIndex(m=>m.id===l.id);return!l.isSelected.value&&c.value.some(m=>m-v===1)}),f=g(()=>{const v=l.group.items.value.findIndex(m=>m.id===l.id);return!l.isSelected.value&&c.value.some(m=>m-v===-1)});return Oe(Dn,l),$e({VExpansionPanelText:{eager:F(e,"eager")}}),j(()=>{const v=!!(n.text||e.text),m=!!(n.title||e.title);return r(e.tag,{class:["v-expansion-panel",{"v-expansion-panel--active":l.isSelected.value,"v-expansion-panel--before-active":d.value,"v-expansion-panel--after-active":f.value,"v-expansion-panel--disabled":u.value},s.value,a.value,e.class],style:[o.value,e.style]},{default:()=>{var h;return[r("div",{class:["v-expansion-panel__shadow",...i.value]},null),m&&r(cr,{key:"title",collapseIcon:e.collapseIcon,color:e.color,expandIcon:e.expandIcon,hideActions:e.hideActions,ripple:e.ripple},{default:()=>[n.title?n.title():e.title]}),v&&r(rr,{key:"text"},{default:()=>[n.text?n.text():e.text]}),(h=n.default)==null?void 0:h.call(n)]}})}),{}}});const qb=E({chips:Boolean,counter:Boolean,counterSizeString:{type:String,default:"$vuetify.fileInput.counterSize"},counterString:{type:String,default:"$vuetify.fileInput.counter"},multiple:Boolean,showSize:{type:[Boolean,Number],default:!1,validator:e=>typeof e=="boolean"||[1e3,1024].includes(e)},...Bt({prependIcon:"$file"}),modelValue:{type:Array,default:()=>[],validator:e=>et(e).every(t=>t!=null&&typeof t=="object")},...Bl({clearable:!0})},"VFileInput"),Xb=L()({name:"VFileInput",inheritAttrs:!1,props:qb(),emits:{"click:control":e=>!0,"mousedown:control":e=>!0,"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{t:o}=ct(),i=ue(e,"modelValue"),{isFocused:s,focus:u,blur:c}=Nt(e),d=g(()=>typeof e.showSize!="boolean"?e.showSize:void 0),f=g(()=>(i.value??[]).reduce((w,T)=>{let{size:A=0}=T;return w+A},0)),v=g(()=>yo(f.value,d.value)),m=g(()=>(i.value??[]).map(w=>{const{name:T="",size:A=0}=w;return e.showSize?`${T} (${yo(A,d.value)})`:T})),h=g(()=>{var T;const w=((T=i.value)==null?void 0:T.length)??0;return e.showSize?o(e.counterSizeString,w,v.value):o(e.counterString,w)}),y=W(),b=W(),p=W(),S=g(()=>s.value||e.active),x=g(()=>["plain","underlined"].includes(e.variant));function I(){var w;p.value!==document.activeElement&&((w=p.value)==null||w.focus()),s.value||u()}function V(w){P(w)}function C(w){l("mousedown:control",w)}function P(w){var T;(T=p.value)==null||T.click(),l("click:control",w)}function k(w){w.stopPropagation(),I(),Ve(()=>{i.value=[],Ea(e["onClick:clear"],w)})}return Z(i,w=>{(!Array.isArray(w)||!w.length)&&p.value&&(p.value.value="")}),j(()=>{const w=!!(a.counter||e.counter),T=!!(w||a.details),[A,B]=Qt(n),[{modelValue:R,...M}]=ze.filterProps(e),[X]=lo(e);return r(ze,Y({ref:y,modelValue:i.value,"onUpdate:modelValue":$=>i.value=$,class:["v-file-input",{"v-text-field--plain-underlined":x.value},e.class],style:e.style,"onClick:prepend":V},A,M,{centerAffix:!x.value,focused:s.value}),{...a,default:$=>{let{id:D,isDisabled:O,isDirty:G,isReadonly:U,isValid:z}=$;return r(Xn,Y({ref:b,"prepend-icon":e.prependIcon,onMousedown:C,onClick:P,"onClick:clear":k,"onClick:prependInner":e["onClick:prependInner"],"onClick:appendInner":e["onClick:appendInner"]},X,{id:D.value,active:S.value||G.value,dirty:G.value,disabled:O.value,focused:s.value,error:z.value===!1}),{...a,default:oe=>{var ge;let{props:{class:re,...ve}}=oe;return r(ae,null,[r("input",Y({ref:p,type:"file",readonly:U.value,disabled:O.value,multiple:e.multiple,name:e.name,onClick:N=>{N.stopPropagation(),U.value&&N.preventDefault(),I()},onChange:N=>{if(!N.target)return;const me=N.target;i.value=[...me.files??[]]},onFocus:I,onBlur:c},ve,B),null),r("div",{class:re},[!!((ge=i.value)!=null&&ge.length)&&(a.selection?a.selection({fileNames:m.value,totalBytes:f.value,totalBytesReadable:v.value}):e.chips?m.value.map(N=>r(Kn,{key:N,size:"small",color:e.color},{default:()=>[N]})):m.value.join(", "))])])}})},details:T?$=>{var D,O;return r(ae,null,[(D=a.details)==null?void 0:D.call(a,$),w&&r(ae,null,[r("span",null,null),r(Al,{active:!!((O=i.value)!=null&&O.length),value:h.value},a.counter)])])}:void 0})}),bt({},y,b,p)}});const Zb=E({app:Boolean,color:String,height:{type:[Number,String],default:"auto"},...at(),...q(),...Me(),...bn(),...Pe(),...ce({tag:"footer"}),...ye()},"VFooter"),Jb=L()({name:"VFooter",props:Zb(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=be(e),{backgroundColorClasses:a,backgroundColorStyles:o}=Ee(F(e,"color")),{borderClasses:i}=ft(e),{elevationClasses:s}=He(e),{roundedClasses:u}=Be(e),c=K(32),{resizeRef:d}=kt(m=>{m.length&&(c.value=m[0].target.clientHeight)}),f=g(()=>e.height==="auto"?c.value:parseInt(e.height,10)),{layoutItemStyles:v}=pn({id:e.name,order:g(()=>parseInt(e.order,10)),position:g(()=>"bottom"),layoutSize:f,elementSize:g(()=>e.height==="auto"?void 0:f.value),active:g(()=>e.app),absolute:F(e,"absolute")});return j(()=>r(e.tag,{ref:d,class:["v-footer",l.value,a.value,i.value,s.value,u.value,e.class],style:[o.value,e.app?v.value:{height:J(e.height)},e.style]},n)),{}}}),Qb=E({...q(),...cg()},"VForm"),ep=L()({name:"VForm",props:Qb(),emits:{"update:modelValue":e=>!0,submit:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=dg(e),o=W();function i(u){u.preventDefault(),a.reset()}function s(u){const c=u,d=a.validate();c.then=d.then.bind(d),c.catch=d.catch.bind(d),c.finally=d.finally.bind(d),l("submit",c),c.defaultPrevented||d.then(f=>{var m;let{valid:v}=f;v&&((m=o.value)==null||m.submit())}),c.preventDefault()}return j(()=>{var u;return r("form",{ref:o,class:["v-form",e.class],style:e.style,novalidate:!0,onReset:i,onSubmit:s},[(u=n.default)==null?void 0:u.call(n,a)])}),bt(a,o)}});const tp=E({fluid:{type:Boolean,default:!1},...q(),...ce()},"VContainer"),np=L()({name:"VContainer",props:tp(),setup(e,t){let{slots:n}=t;const{rtlClasses:l}=De();return j(()=>r(e.tag,{class:["v-container",{"v-container--fluid":e.fluid},l.value,e.class],style:e.style},n)),{}}}),dr=(()=>pl.reduce((e,t)=>(e[t]={type:[Boolean,String,Number],default:!1},e),{}))(),vr=(()=>pl.reduce((e,t)=>{const n="offset"+Hn(t);return e[n]={type:[String,Number],default:null},e},{}))(),fr=(()=>pl.reduce((e,t)=>{const n="order"+Hn(t);return e[n]={type:[String,Number],default:null},e},{}))(),ni={col:Object.keys(dr),offset:Object.keys(vr),order:Object.keys(fr)};function lp(e,t,n){let l=e;if(!(n==null||n===!1)){if(t){const a=t.replace(e,"");l+=`-${a}`}return e==="col"&&(l="v-"+l),e==="col"&&(n===""||n===!0)||(l+=`-${n}`),l.toLowerCase()}}const ap=["auto","start","end","center","baseline","stretch"],op=E({cols:{type:[Boolean,String,Number],default:!1},...dr,offset:{type:[String,Number],default:null},...vr,order:{type:[String,Number],default:null},...fr,alignSelf:{type:String,default:null,validator:e=>ap.includes(e)},...q(),...ce()},"VCol"),ip=L()({name:"VCol",props:op(),setup(e,t){let{slots:n}=t;const l=g(()=>{const a=[];let o;for(o in ni)ni[o].forEach(s=>{const u=e[s],c=lp(o,s,u);c&&a.push(c)});const i=a.some(s=>s.startsWith("v-col-"));return a.push({"v-col":!i||!e.cols,[`v-col-${e.cols}`]:e.cols,[`offset-${e.offset}`]:e.offset,[`order-${e.order}`]:e.order,[`align-self-${e.alignSelf}`]:e.alignSelf}),a});return()=>{var a;return Jt(e.tag,{class:[l.value,e.class],style:e.style},(a=n.default)==null?void 0:a.call(n))}}}),ro=["start","end","center"],mr=["space-between","space-around","space-evenly"];function uo(e,t){return pl.reduce((n,l)=>{const a=e+Hn(l);return n[a]=t(),n},{})}const sp=[...ro,"baseline","stretch"],hr=e=>sp.includes(e),gr=uo("align",()=>({type:String,default:null,validator:hr})),rp=[...ro,...mr],yr=e=>rp.includes(e),br=uo("justify",()=>({type:String,default:null,validator:yr})),up=[...ro,...mr,"stretch"],pr=e=>up.includes(e),wr=uo("alignContent",()=>({type:String,default:null,validator:pr})),li={align:Object.keys(gr),justify:Object.keys(br),alignContent:Object.keys(wr)},cp={align:"align",justify:"justify",alignContent:"align-content"};function dp(e,t,n){let l=cp[e];if(n!=null){if(t){const a=t.replace(e,"");l+=`-${a}`}return l+=`-${n}`,l.toLowerCase()}}const vp=E({dense:Boolean,noGutters:Boolean,align:{type:String,default:null,validator:hr},...gr,justify:{type:String,default:null,validator:yr},...br,alignContent:{type:String,default:null,validator:pr},...wr,...q(),...ce()},"VRow"),fp=L()({name:"VRow",props:vp(),setup(e,t){let{slots:n}=t;const l=g(()=>{const a=[];let o;for(o in li)li[o].forEach(i=>{const s=e[i],u=dp(o,i,s);u&&a.push(u)});return a.push({"v-row--no-gutters":e.noGutters,"v-row--dense":e.dense,[`align-${e.align}`]:e.align,[`justify-${e.justify}`]:e.justify,[`align-content-${e.alignContent}`]:e.alignContent}),a});return()=>{var a;return Jt(e.tag,{class:["v-row",l.value,e.class],style:e.style},(a=n.default)==null?void 0:a.call(n))}}}),mp=yt("v-spacer","div","VSpacer"),hp=E({disabled:Boolean,modelValue:{type:Boolean,default:void 0},...$s()},"VHover"),gp=L()({name:"VHover",props:hp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{runOpenDelay:a,runCloseDelay:o}=Os(e,i=>!e.disabled&&(l.value=i));return()=>{var i;return(i=n.default)==null?void 0:i.call(n,{isHovering:l.value,props:{onMouseenter:a,onMouseleave:o}})}}});const Sr=Symbol.for("vuetify:v-item-group"),yp=E({...q(),...wn({selectedClass:"v-item--selected"}),...ce(),...ye()},"VItemGroup"),bp=L()({name:"VItemGroup",props:yp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=be(e),{isSelected:a,select:o,next:i,prev:s,selected:u}=an(e,Sr);return()=>r(e.tag,{class:["v-item-group",l.value,e.class],style:e.style},{default:()=>{var c;return[(c=n.default)==null?void 0:c.call(n,{isSelected:a,select:o,next:i,prev:s,selected:u.value})]}})}}),pp=L()({name:"VItem",props:Sn(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const{isSelected:l,select:a,toggle:o,selectedClass:i,value:s,disabled:u}=kn(e,Sr);return()=>{var c;return(c=n.default)==null?void 0:c.call(n,{isSelected:l.value,selectedClass:i.value,select:a,toggle:o,value:s.value,disabled:u.value})}}});const wp=yt("v-kbd");const Sp=E({...q(),...Hi()},"VLayout"),kp=L()({name:"VLayout",props:Sp(),setup(e,t){let{slots:n}=t;const{layoutClasses:l,layoutStyles:a,getLayoutItem:o,items:i,layoutRef:s}=ji(e);return j(()=>{var u;return r("div",{ref:s,class:[l.value,e.class],style:[a.value,e.style]},[(u=n.default)==null?void 0:u.call(n)])}),{getLayoutItem:o,items:i}}});const xp=E({position:{type:String,required:!0},size:{type:[Number,String],default:300},modelValue:Boolean,...q(),...bn()},"VLayoutItem"),Cp=L()({name:"VLayoutItem",props:xp(),setup(e,t){let{slots:n}=t;const{layoutItemStyles:l}=pn({id:e.name,order:g(()=>parseInt(e.order,10)),position:F(e,"position"),elementSize:F(e,"size"),layoutSize:F(e,"size"),active:F(e,"modelValue"),absolute:F(e,"absolute")});return()=>{var a;return r("div",{class:["v-layout-item",e.class],style:[l.value,e.style]},[(a=n.default)==null?void 0:a.call(n)])}}}),Vp=E({modelValue:Boolean,options:{type:Object,default:()=>({root:void 0,rootMargin:void 0,threshold:void 0})},...q(),...dt(),...ce(),...Pt({transition:"fade-transition"})},"VLazy"),_p=L()({name:"VLazy",directives:{intersect:Gn},props:Vp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{dimensionStyles:l}=vt(e),a=ue(e,"modelValue");function o(i){a.value||(a.value=i)}return j(()=>ne(r(e.tag,{class:["v-lazy",e.class],style:[l.value,e.style]},{default:()=>[a.value&&r(gt,{transition:e.transition,appear:!0},{default:()=>{var i;return[(i=n.default)==null?void 0:i.call(n)]}})]}),[[Ze("intersect"),{handler:o,options:e.options},null]])),{}}});const Ip=E({locale:String,fallbackLocale:String,messages:Object,rtl:{type:Boolean,default:void 0},...q()},"VLocaleProvider"),Tp=L()({name:"VLocaleProvider",props:Ip(),setup(e,t){let{slots:n}=t;const{rtlClasses:l}=Mm(e);return j(()=>{var a;return r("div",{class:["v-locale-provider",l.value,e.class],style:e.style},[(a=n.default)==null?void 0:a.call(n)])}),{}}});const Pp=E({scrollable:Boolean,...q(),...ce({tag:"main"})},"VMain"),Ap=L()({name:"VMain",props:Pp(),setup(e,t){let{slots:n}=t;const{mainStyles:l}=dh(),{ssrBootStyles:a}=tn();return j(()=>r(e.tag,{class:["v-main",{"v-main--scrollable":e.scrollable},e.class],style:[l.value,a.value,e.style]},{default:()=>{var o,i;return[e.scrollable?r("div",{class:"v-main__scroller"},[(o=n.default)==null?void 0:o.call(n)]):(i=n.default)==null?void 0:i.call(n)]}})),{}}});function Bp(e){let{rootEl:t,isSticky:n,layoutItemStyles:l}=e;const a=K(!1),o=K(0),i=g(()=>{const c=typeof a.value=="boolean"?"top":a.value;return[n.value?{top:"auto",bottom:"auto",height:void 0}:void 0,a.value?{[c]:J(o.value)}:{top:l.value.top}]});Je(()=>{Z(n,c=>{c?window.addEventListener("scroll",u,{passive:!0}):window.removeEventListener("scroll",u)},{immediate:!0})}),nt(()=>{window.removeEventListener("scroll",u)});let s=0;function u(){const c=s>window.scrollY?"up":"down",d=t.value.getBoundingClientRect(),f=parseFloat(l.value.top??0),v=window.scrollY-Math.max(0,o.value-f),m=d.height+Math.max(o.value,f)-window.scrollY-window.innerHeight,h=parseFloat(getComputedStyle(t.value).getPropertyValue("--v-body-scroll-y"))||0;d.height<window.innerHeight-f?(a.value="top",o.value=f):c==="up"&&a.value==="bottom"||c==="down"&&a.value==="top"?(o.value=window.scrollY+d.top-h,a.value=!0):c==="down"&&m<=0?(o.value=0,a.value="bottom"):c==="up"&&v<=0&&(h?a.value!=="top"&&(o.value=-v+h+f,a.value="top"):(o.value=d.top+v,a.value="top")),s=window.scrollY}return{isStuck:a,stickyStyles:i}}const Ep=100,Rp=20;function ai(e){const t=1.41421356237;return(e<0?-1:1)*Math.sqrt(Math.abs(e))*t}function oi(e){if(e.length<2)return 0;if(e.length===2)return e[1].t===e[0].t?0:(e[1].d-e[0].d)/(e[1].t-e[0].t);let t=0;for(let n=e.length-1;n>0;n--){if(e[n].t===e[n-1].t)continue;const l=ai(t),a=(e[n].d-e[n-1].d)/(e[n].t-e[n-1].t);t+=(a-l)*Math.abs(a),n===e.length-1&&(t*=.5)}return ai(t)*1e3}function Lp(){const e={};function t(a){Array.from(a.changedTouches).forEach(o=>{(e[o.identifier]??(e[o.identifier]=new Gf(Rp))).push([a.timeStamp,o])})}function n(a){Array.from(a.changedTouches).forEach(o=>{delete e[o.identifier]})}function l(a){var c;const o=(c=e[a])==null?void 0:c.values().reverse();if(!o)throw new Error(`No samples for touch id ${a}`);const i=o[0],s=[],u=[];for(const d of o){if(i[0]-d[0]>Ep)break;s.push({t:d[0],d:d[1].clientX}),u.push({t:d[0],d:d[1].clientY})}return{x:oi(s),y:oi(u),get direction(){const{x:d,y:f}=this,[v,m]=[Math.abs(d),Math.abs(f)];return v>m&&d>=0?"right":v>m&&d<=0?"left":m>v&&f>=0?"down":m>v&&f<=0?"up":$p()}}}return{addMovement:t,endTouch:n,getVelocity:l}}function $p(){throw new Error}function Op(e){let{isActive:t,isTemporary:n,width:l,touchless:a,position:o}=e;Je(()=>{window.addEventListener("touchstart",p,{passive:!0}),window.addEventListener("touchmove",S,{passive:!1}),window.addEventListener("touchend",x,{passive:!0})}),nt(()=>{window.removeEventListener("touchstart",p),window.removeEventListener("touchmove",S),window.removeEventListener("touchend",x)});const i=g(()=>["left","right"].includes(o.value)),{addMovement:s,endTouch:u,getVelocity:c}=Lp();let d=!1;const f=K(!1),v=K(0),m=K(0);let h;function y(V,C){return(o.value==="left"?V:o.value==="right"?document.documentElement.clientWidth-V:o.value==="top"?V:o.value==="bottom"?document.documentElement.clientHeight-V:un())-(C?l.value:0)}function b(V){let C=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;const P=o.value==="left"?(V-m.value)/l.value:o.value==="right"?(document.documentElement.clientWidth-V-m.value)/l.value:o.value==="top"?(V-m.value)/l.value:o.value==="bottom"?(document.documentElement.clientHeight-V-m.value)/l.value:un();return C?Math.max(0,Math.min(1,P)):P}function p(V){if(a.value)return;const C=V.changedTouches[0].clientX,P=V.changedTouches[0].clientY,k=25,w=o.value==="left"?C<k:o.value==="right"?C>document.documentElement.clientWidth-k:o.value==="top"?P<k:o.value==="bottom"?P>document.documentElement.clientHeight-k:un(),T=t.value&&(o.value==="left"?C<l.value:o.value==="right"?C>document.documentElement.clientWidth-l.value:o.value==="top"?P<l.value:o.value==="bottom"?P>document.documentElement.clientHeight-l.value:un());(w||T||t.value&&n.value)&&(d=!0,h=[C,P],m.value=y(i.value?C:P,t.value),v.value=b(i.value?C:P),u(V),s(V))}function S(V){const C=V.changedTouches[0].clientX,P=V.changedTouches[0].clientY;if(d){if(!V.cancelable){d=!1;return}const w=Math.abs(C-h[0]),T=Math.abs(P-h[1]);(i.value?w>T&&w>3:T>w&&T>3)?(f.value=!0,d=!1):(i.value?T:w)>3&&(d=!1)}if(!f.value)return;V.preventDefault(),s(V);const k=b(i.value?C:P,!1);v.value=Math.max(0,Math.min(1,k)),k>1?m.value=y(i.value?C:P,!0):k<0&&(m.value=y(i.value?C:P,!1))}function x(V){if(d=!1,!f.value)return;s(V),f.value=!1;const C=c(V.changedTouches[0].identifier),P=Math.abs(C.x),k=Math.abs(C.y);(i.value?P>k&&P>400:k>P&&k>3)?t.value=C.direction===({left:"right",right:"left",top:"down",bottom:"up"}[o.value]||un()):t.value=v.value>.5}const I=g(()=>f.value?{transform:o.value==="left"?`translateX(calc(-100% + ${v.value*l.value}px))`:o.value==="right"?`translateX(calc(100% - ${v.value*l.value}px))`:o.value==="top"?`translateY(calc(-100% + ${v.value*l.value}px))`:o.value==="bottom"?`translateY(calc(100% - ${v.value*l.value}px))`:un(),transition:"none"}:void 0);return{isDragging:f,dragProgress:v,dragStyles:I}}function un(){throw new Error}const Mp=["start","end","left","right","top","bottom"],Fp=E({color:String,disableResizeWatcher:Boolean,disableRouteWatcher:Boolean,expandOnHover:Boolean,floating:Boolean,modelValue:{type:Boolean,default:null},permanent:Boolean,rail:{type:Boolean,default:null},railWidth:{type:[Number,String],default:56},scrim:{type:[Boolean,String],default:!0},image:String,temporary:Boolean,touchless:Boolean,width:{type:[Number,String],default:256},location:{type:String,default:"start",validator:e=>Mp.includes(e)},sticky:Boolean,...at(),...q(),...Me(),...bn(),...Pe(),...ce({tag:"nav"}),...ye()},"VNavigationDrawer"),Np=L()({name:"VNavigationDrawer",props:Fp(),emits:{"update:modelValue":e=>!0,"update:rail":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{isRtl:o}=De(),{themeClasses:i}=be(e),{borderClasses:s}=ft(e),{backgroundColorClasses:u,backgroundColorStyles:c}=Ee(F(e,"color")),{elevationClasses:d}=He(e),{mobile:f}=en(),{roundedClasses:v}=Be(e),m=es(),h=ue(e,"modelValue",null,G=>!!G),{ssrBootStyles:y}=tn(),{scopeId:b}=In(),p=W(),S=K(!1),x=g(()=>e.rail&&e.expandOnHover&&S.value?Number(e.width):Number(e.rail?e.railWidth:e.width)),I=g(()=>Kl(e.location,o.value)),V=g(()=>!e.permanent&&(f.value||e.temporary)),C=g(()=>e.sticky&&!V.value&&I.value!=="bottom");e.expandOnHover&&e.rail!=null&&Z(S,G=>l("update:rail",!G)),e.disableResizeWatcher||Z(V,G=>!e.permanent&&Ve(()=>h.value=!G)),!e.disableRouteWatcher&&m&&Z(m.currentRoute,()=>V.value&&(h.value=!1)),Z(()=>e.permanent,G=>{G&&(h.value=!0)}),Va(()=>{e.modelValue!=null||V.value||(h.value=e.permanent||!f.value)});const{isDragging:P,dragProgress:k,dragStyles:w}=Op({isActive:h,isTemporary:V,width:x,touchless:F(e,"touchless"),position:I}),T=g(()=>{const G=V.value?0:e.rail&&e.expandOnHover?Number(e.railWidth):x.value;return P.value?G*k.value:G}),{layoutItemStyles:A,layoutItemScrimStyles:B}=pn({id:e.name,order:g(()=>parseInt(e.order,10)),position:I,layoutSize:T,elementSize:x,active:g(()=>h.value||P.value),disableTransitions:g(()=>P.value),absolute:g(()=>e.absolute||C.value&&typeof R.value!="string")}),{isStuck:R,stickyStyles:M}=Bp({rootEl:p,isSticky:C,layoutItemStyles:A}),X=Ee(g(()=>typeof e.scrim=="string"?e.scrim:null)),$=g(()=>({...P.value?{opacity:k.value*.2,transition:"none"}:void 0,...B.value}));$e({VList:{bgColor:"transparent"}});function D(){S.value=!0}function O(){S.value=!1}return j(()=>{const G=a.image||e.image;return r(ae,null,[r(e.tag,Y({ref:p,onMouseenter:D,onMouseleave:O,class:["v-navigation-drawer",`v-navigation-drawer--${I.value}`,{"v-navigation-drawer--expand-on-hover":e.expandOnHover,"v-navigation-drawer--floating":e.floating,"v-navigation-drawer--is-hovering":S.value,"v-navigation-drawer--rail":e.rail,"v-navigation-drawer--temporary":V.value,"v-navigation-drawer--active":h.value,"v-navigation-drawer--sticky":C.value},i.value,u.value,s.value,d.value,v.value,e.class],style:[c.value,A.value,w.value,y.value,M.value,e.style]},b,n),{default:()=>{var U,z,oe,re;return[G&&r("div",{key:"image",class:"v-navigation-drawer__img"},[a.image?(U=a.image)==null?void 0:U.call(a,{image:e.image}):r("img",{src:e.image,alt:""},null)]),a.prepend&&r("div",{class:"v-navigation-drawer__prepend"},[(z=a.prepend)==null?void 0:z.call(a)]),r("div",{class:"v-navigation-drawer__content"},[(oe=a.default)==null?void 0:oe.call(a)]),a.append&&r("div",{class:"v-navigation-drawer__append"},[(re=a.append)==null?void 0:re.call(a)])]}}),r(Et,{name:"fade-transition"},{default:()=>[V.value&&(P.value||h.value)&&!!e.scrim&&r("div",Y({class:["v-navigation-drawer__scrim",X.backgroundColorClasses.value],style:[$.value,X.backgroundColorStyles.value],onClick:()=>h.value=!1},b),null)]})])}),{isStuck:R}}}),Dp=ut({name:"VNoSsr",setup(e,t){let{slots:n}=t;const l=Ms();return()=>{var a;return l.value&&((a=n.default)==null?void 0:a.call(n))}}});function zp(){const e=W([]);Hr(()=>e.value=[]);function t(n,l){e.value[l]=n}return{refs:e,updateRef:t}}const Hp=E({activeColor:String,start:{type:[Number,String],default:1},modelValue:{type:Number,default:e=>e.start},disabled:Boolean,length:{type:[Number,String],default:1,validator:e=>e%1===0},totalVisible:[Number,String],firstIcon:{type:se,default:"$first"},prevIcon:{type:se,default:"$prev"},nextIcon:{type:se,default:"$next"},lastIcon:{type:se,default:"$last"},ariaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.root"},pageAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.page"},currentPageAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.currentPage"},firstAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.first"},previousAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.previous"},nextAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.next"},lastAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.last"},ellipsis:{type:String,default:"..."},showFirstLastPage:Boolean,...at(),...q(),...Fe(),...Me(),...Pe(),...At(),...ce({tag:"nav"}),...ye(),...mt({variant:"text"})},"VPagination"),jp=L()({name:"VPagination",props:Hp(),emits:{"update:modelValue":e=>!0,first:e=>!0,prev:e=>!0,next:e=>!0,last:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=ue(e,"modelValue"),{t:o,n:i}=ct(),{isRtl:s}=De(),{themeClasses:u}=be(e),{width:c}=en(),d=K(-1);$e(void 0,{scoped:!0});const{resizeRef:f}=kt(k=>{if(!k.length)return;const{target:w,contentRect:T}=k[0],A=w.querySelector(".v-pagination__list > *");if(!A)return;const B=T.width,R=A.offsetWidth+parseFloat(getComputedStyle(A).marginRight)*2;d.value=y(B,R)}),v=g(()=>parseInt(e.length,10)),m=g(()=>parseInt(e.start,10)),h=g(()=>e.totalVisible?parseInt(e.totalVisible,10):d.value>=0?d.value:y(c.value,58));function y(k,w){const T=e.showFirstLastPage?5:3;return Math.max(0,Math.floor(+((k-w*T)/w).toFixed(2)))}const b=g(()=>{if(v.value<=0||isNaN(v.value)||v.value>Number.MAX_SAFE_INTEGER)return[];if(h.value<=1)return[a.value];if(v.value<=h.value)return Ct(v.value,m.value);const k=h.value%2===0,w=k?h.value/2:Math.floor(h.value/2),T=k?w:w+1,A=v.value-w;if(T-a.value>=0)return[...Ct(Math.max(1,h.value-1),m.value),e.ellipsis,v.value];if(a.value-A>=(k?1:0)){const B=h.value-1,R=v.value-B+m.value;return[m.value,e.ellipsis,...Ct(B,R)]}else{const B=Math.max(1,h.value-3),R=B===1?a.value:a.value-Math.ceil(B/2)+m.value;return[m.value,e.ellipsis,...Ct(B,R),e.ellipsis,v.value]}});function p(k,w,T){k.preventDefault(),a.value=w,T&&l(T,w)}const{refs:S,updateRef:x}=zp();$e({VPaginationBtn:{color:F(e,"color"),border:F(e,"border"),density:F(e,"density"),size:F(e,"size"),variant:F(e,"variant"),rounded:F(e,"rounded"),elevation:F(e,"elevation")}});const I=g(()=>b.value.map((k,w)=>{const T=A=>x(A,w);if(typeof k=="string")return{isActive:!1,key:`ellipsis-${w}`,page:k,props:{ref:T,ellipsis:!0,icon:!0,disabled:!0}};{const A=k===a.value;return{isActive:A,key:k,page:i(k),props:{ref:T,ellipsis:!1,icon:!0,disabled:!!e.disabled||+e.length<2,color:A?e.activeColor:e.color,ariaCurrent:A,ariaLabel:o(A?e.currentPageAriaLabel:e.pageAriaLabel,k),onClick:B=>p(B,k)}}}})),V=g(()=>{const k=!!e.disabled||a.value<=m.value,w=!!e.disabled||a.value>=m.value+v.value-1;return{first:e.showFirstLastPage?{icon:s.value?e.lastIcon:e.firstIcon,onClick:T=>p(T,m.value,"first"),disabled:k,ariaLabel:o(e.firstAriaLabel),ariaDisabled:k}:void 0,prev:{icon:s.value?e.nextIcon:e.prevIcon,onClick:T=>p(T,a.value-1,"prev"),disabled:k,ariaLabel:o(e.previousAriaLabel),ariaDisabled:k},next:{icon:s.value?e.prevIcon:e.nextIcon,onClick:T=>p(T,a.value+1,"next"),disabled:w,ariaLabel:o(e.nextAriaLabel),ariaDisabled:w},last:e.showFirstLastPage?{icon:s.value?e.firstIcon:e.lastIcon,onClick:T=>p(T,m.value+v.value-1,"last"),disabled:w,ariaLabel:o(e.lastAriaLabel),ariaDisabled:w}:void 0}});function C(){var w;const k=a.value-m.value;(w=S.value[k])==null||w.$el.focus()}function P(k){k.key===Wl.left&&!e.disabled&&a.value>+e.start?(a.value=a.value-1,Ve(C)):k.key===Wl.right&&!e.disabled&&a.value<m.value+v.value-1&&(a.value=a.value+1,Ve(C))}return j(()=>r(e.tag,{ref:f,class:["v-pagination",u.value,e.class],style:e.style,role:"navigation","aria-label":o(e.ariaLabel),onKeydown:P,"data-test":"v-pagination-root"},{default:()=>[r("ul",{class:"v-pagination__list"},[e.showFirstLastPage&&r("li",{key:"first",class:"v-pagination__first","data-test":"v-pagination-first"},[n.first?n.first(V.value.first):r(Ke,Y({_as:"VPaginationBtn"},V.value.first),null)]),r("li",{key:"prev",class:"v-pagination__prev","data-test":"v-pagination-prev"},[n.prev?n.prev(V.value.prev):r(Ke,Y({_as:"VPaginationBtn"},V.value.prev),null)]),I.value.map((k,w)=>r("li",{key:k.key,class:["v-pagination__item",{"v-pagination__item--is-active":k.isActive}],"data-test":"v-pagination-item"},[n.item?n.item(k):r(Ke,Y({_as:"VPaginationBtn"},k.props),{default:()=>[k.page]})])),r("li",{key:"next",class:"v-pagination__next","data-test":"v-pagination-next"},[n.next?n.next(V.value.next):r(Ke,Y({_as:"VPaginationBtn"},V.value.next),null)]),e.showFirstLastPage&&r("li",{key:"last",class:"v-pagination__last","data-test":"v-pagination-last"},[n.last?n.last(V.value.last):r(Ke,Y({_as:"VPaginationBtn"},V.value.last),null)])])]})),{}}});function Up(e){return Math.floor(Math.abs(e))*Math.sign(e)}const Gp=E({scale:{type:[Number,String],default:.5},...q()},"VParallax"),Wp=L()({name:"VParallax",props:Gp(),setup(e,t){let{slots:n}=t;const{intersectionRef:l,isIntersecting:a}=Ya(),{resizeRef:o,contentRect:i}=kt(),{height:s}=en(),u=W();tt(()=>{var m;l.value=o.value=(m=u.value)==null?void 0:m.$el});let c;Z(a,m=>{m?(c=Oa(l.value),c=c===document.scrollingElement?document:c,c.addEventListener("scroll",v,{passive:!0}),v()):c.removeEventListener("scroll",v)}),nt(()=>{c==null||c.removeEventListener("scroll",v)}),Z(s,v),Z(()=>{var m;return(m=i.value)==null?void 0:m.height},v);const d=g(()=>1-Ue(+e.scale));let f=-1;function v(){a.value&&(cancelAnimationFrame(f),f=requestAnimationFrame(()=>{var V;const m=((V=u.value)==null?void 0:V.$el).querySelector(".v-img__img");if(!m)return;const h=c instanceof Document?document.documentElement.clientHeight:c.clientHeight,y=c instanceof Document?window.scrollY:c.scrollTop,b=l.value.getBoundingClientRect().top+y,p=i.value.height,S=b+(p-h)/2,x=Up((y-S)*d.value),I=Math.max(1,(d.value*(h-p)+p)/p);m.style.setProperty("transform",`translateY(${x}px) scale(${I})`)}))}return j(()=>r(qt,{class:["v-parallax",{"v-parallax--active":a.value},e.class],style:e.style,ref:u,cover:!0,onLoadstart:v,onLoad:v},n)),{}}}),Yp=E({...Cl({falseIcon:"$radioOff",trueIcon:"$radioOn"})},"VRadio"),Kp=L()({name:"VRadio",props:Yp(),setup(e,t){let{slots:n}=t;return j(()=>r(Xt,Y(e,{class:["v-radio",e.class],style:e.style,type:"radio"}),n)),{}}});const qp=E({height:{type:[Number,String],default:"auto"},...Bt(),...rt(Qa(),["multiple"]),trueIcon:{type:se,default:"$radioOn"},falseIcon:{type:se,default:"$radioOff"},type:{type:String,default:"radio"}},"VRadioGroup"),Xp=L()({name:"VRadioGroup",inheritAttrs:!1,props:qp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const a=We(),o=g(()=>e.id||`radio-group-${a}`),i=ue(e,"modelValue");return j(()=>{const[s,u]=Qt(n),[c,d]=ze.filterProps(e),[f,v]=Xt.filterProps(e),m=l.label?l.label({label:e.label,props:{for:o.value}}):e.label;return r(ze,Y({class:["v-radio-group",e.class],style:e.style},s,c,{modelValue:i.value,"onUpdate:modelValue":h=>i.value=h,id:o.value}),{...l,default:h=>{let{id:y,messagesId:b,isDisabled:p,isReadonly:S}=h;return r(ae,null,[m&&r(_n,{id:y.value},{default:()=>[m]}),r(ds,Y(f,{id:y.value,"aria-describedby":b.value,defaultsTarget:"VRadio",trueIcon:e.trueIcon,falseIcon:e.falseIcon,type:e.type,disabled:p.value,readonly:S.value,"aria-labelledby":m?y.value:void 0,multiple:!1},u,{modelValue:i.value,"onUpdate:modelValue":x=>i.value=x}),l)])}})}),{}}}),Zp=E({...Vl(),...Bt(),...lr(),strict:Boolean,modelValue:{type:Array,default:()=>[0,0]}},"VRangeSlider"),Jp=L()({name:"VRangeSlider",props:Zp(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,end:e=>!0,start:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=W(),o=W(),i=W(),{rtlClasses:s}=De();function u(w){if(!a.value||!o.value)return;const T=ga(w,a.value.$el,e.direction),A=ga(w,o.value.$el,e.direction),B=Math.abs(T),R=Math.abs(A);return B<R||B===R&&T<0?a.value.$el:o.value.$el}const c=ar(e),d=ue(e,"modelValue",void 0,w=>w!=null&&w.length?w.map(T=>c.roundValue(T)):[0,0]),{activeThumbRef:f,hasLabels:v,max:m,min:h,mousePressed:y,onSliderMousedown:b,onSliderTouchstart:p,position:S,trackContainerRef:x}=or({props:e,steps:c,onSliderStart:()=>{l("start",d.value)},onSliderEnd:w=>{var B;let{value:T}=w;const A=f.value===((B=a.value)==null?void 0:B.$el)?[T,d.value[1]]:[d.value[0],T];!e.strict&&A[0]<A[1]&&(d.value=A),l("end",d.value)},onSliderMove:w=>{var R,M,X,$;let{value:T}=w;const[A,B]=d.value;!e.strict&&A===B&&A!==h.value&&(f.value=T>A?(R=o.value)==null?void 0:R.$el:(M=a.value)==null?void 0:M.$el,(X=f.value)==null||X.focus()),f.value===(($=a.value)==null?void 0:$.$el)?d.value=[Math.min(T,B),B]:d.value=[A,Math.max(A,T)]},getActiveThumb:u}),{isFocused:I,focus:V,blur:C}=Nt(e),P=g(()=>S(d.value[0])),k=g(()=>S(d.value[1]));return j(()=>{const[w,T]=ze.filterProps(e),A=!!(e.label||n.label||n.prepend);return r(ze,Y({class:["v-slider","v-range-slider",{"v-slider--has-labels":!!n["tick-label"]||v.value,"v-slider--focused":I.value,"v-slider--pressed":y.value,"v-slider--disabled":e.disabled},s.value,e.class],style:e.style,ref:i},w,{focused:I.value}),{...n,prepend:A?B=>{var R,M;return r(ae,null,[((R=n.label)==null?void 0:R.call(n,B))??(e.label?r(_n,{class:"v-slider__label",text:e.label},null):void 0),(M=n.prepend)==null?void 0:M.call(n,B)])}:void 0,default:B=>{var X,$;let{id:R,messagesId:M}=B;return r("div",{class:"v-slider__container",onMousedown:b,onTouchstartPassive:p},[r("input",{id:`${R.value}_start`,name:e.name||R.value,disabled:!!e.disabled,readonly:!!e.readonly,tabindex:"-1",value:d.value[0]},null),r("input",{id:`${R.value}_stop`,name:e.name||R.value,disabled:!!e.disabled,readonly:!!e.readonly,tabindex:"-1",value:d.value[1]},null),r(ir,{ref:x,start:P.value,stop:k.value},{"tick-label":n["tick-label"]}),r(ya,{ref:a,"aria-describedby":M.value,focused:I&&f.value===((X=a.value)==null?void 0:X.$el),modelValue:d.value[0],"onUpdate:modelValue":D=>d.value=[D,d.value[1]],onFocus:D=>{var O,G,U,z;V(),f.value=(O=a.value)==null?void 0:O.$el,d.value[0]===d.value[1]&&d.value[1]===h.value&&D.relatedTarget!==((G=o.value)==null?void 0:G.$el)&&((U=a.value)==null||U.$el.blur(),(z=o.value)==null||z.$el.focus())},onBlur:()=>{C(),f.value=void 0},min:h.value,max:d.value[1],position:P.value},{"thumb-label":n["thumb-label"]}),r(ya,{ref:o,"aria-describedby":M.value,focused:I&&f.value===(($=o.value)==null?void 0:$.$el),modelValue:d.value[1],"onUpdate:modelValue":D=>d.value=[d.value[0],D],onFocus:D=>{var O,G,U,z;V(),f.value=(O=o.value)==null?void 0:O.$el,d.value[0]===d.value[1]&&d.value[0]===m.value&&D.relatedTarget!==((G=a.value)==null?void 0:G.$el)&&((U=o.value)==null||U.$el.blur(),(z=a.value)==null||z.$el.focus())},onBlur:()=>{C(),f.value=void 0},min:d.value[0],max:m.value,position:k.value},{"thumb-label":n["thumb-label"]})])}})}),{}}});const Qp=E({name:String,itemAriaLabel:{type:String,default:"$vuetify.rating.ariaLabel.item"},activeColor:String,color:String,clearable:Boolean,disabled:Boolean,emptyIcon:{type:se,default:"$ratingEmpty"},fullIcon:{type:se,default:"$ratingFull"},halfIncrements:Boolean,hover:Boolean,length:{type:[Number,String],default:5},readonly:Boolean,modelValue:{type:[Number,String],default:0},itemLabels:Array,itemLabelPosition:{type:String,default:"top",validator:e=>["top","bottom"].includes(e)},ripple:Boolean,...q(),...Fe(),...At(),...ce(),...ye()},"VRating"),e0=L()({name:"VRating",props:Qp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{t:l}=ct(),{themeClasses:a}=be(e),o=ue(e,"modelValue"),i=g(()=>Ue(parseFloat(o.value),0,+e.length)),s=g(()=>Ct(Number(e.length),1)),u=g(()=>s.value.flatMap(y=>e.halfIncrements?[y-.5,y]:[y])),c=K(-1),d=g(()=>u.value.map(y=>{const b=e.hover&&c.value>-1,p=i.value>=y,S=c.value>=y,I=(b?S:p)?e.fullIcon:e.emptyIcon,V=e.activeColor??e.color,C=p||S?V:e.color;return{isFilled:p,isHovered:S,icon:I,color:C}})),f=g(()=>[0,...u.value].map(y=>{function b(){c.value=y}function p(){c.value=-1}function S(){e.disabled||e.readonly||(o.value=i.value===y&&e.clearable?0:y)}return{onMouseenter:e.hover?b:void 0,onMouseleave:e.hover?p:void 0,onClick:S}})),v=g(()=>e.name??`v-rating-${We()}`);function m(y){var k,w;let{value:b,index:p,showStar:S=!0}=y;const{onMouseenter:x,onMouseleave:I,onClick:V}=f.value[p+1],C=`${v.value}-${String(b).replace(".","-")}`,P={color:(k=d.value[p])==null?void 0:k.color,density:e.density,disabled:e.disabled,icon:(w=d.value[p])==null?void 0:w.icon,ripple:e.ripple,size:e.size,variant:"plain"};return r(ae,null,[r("label",{for:C,class:{"v-rating__item--half":e.halfIncrements&&b%1>0,"v-rating__item--full":e.halfIncrements&&b%1===0},onMouseenter:x,onMouseleave:I,onClick:V},[r("span",{class:"v-rating__hidden"},[l(e.itemAriaLabel,b,e.length)]),S?n.item?n.item({...d.value[p],props:P,value:b,index:p,rating:i.value}):r(Ke,Y({"aria-label":l(e.itemAriaLabel,b,e.length)},P),null):void 0]),r("input",{class:"v-rating__hidden",name:v.value,id:C,type:"radio",value:b,checked:i.value===b,tabindex:-1,readonly:e.readonly,disabled:e.disabled},null)])}function h(y){return n["item-label"]?n["item-label"](y):y.label?r("span",null,[y.label]):r("span",null,[yl(" ")])}return j(()=>{var b;const y=!!((b=e.itemLabels)!=null&&b.length)||n["item-label"];return r(e.tag,{class:["v-rating",{"v-rating--hover":e.hover,"v-rating--readonly":e.readonly},a.value,e.class],style:e.style},{default:()=>[r(m,{value:0,index:-1,showStar:!1},null),s.value.map((p,S)=>{var x,I;return r("div",{class:"v-rating__wrapper"},[y&&e.itemLabelPosition==="top"?h({value:p,index:S,label:(x=e.itemLabels)==null?void 0:x[S]}):void 0,r("div",{class:"v-rating__item"},[e.halfIncrements?r(ae,null,[r(m,{value:p-.5,index:S*2},null),r(m,{value:p,index:S*2+1},null)]):r(m,{value:p,index:S},null)]),y&&e.itemLabelPosition==="bottom"?h({value:p,index:S,label:(I=e.itemLabels)==null?void 0:I[S]}):void 0])})]})}),{}}});function ii(e){const n=Math.abs(e);return Math.sign(e)*(n/((1/.501-2)*(1-n)+1))}function si(e){let{selectedElement:t,containerSize:n,contentSize:l,isRtl:a,currentScrollOffset:o,isHorizontal:i}=e;const s=i?t.clientWidth:t.clientHeight,u=i?t.offsetLeft:t.offsetTop,c=a&&i?l-u-s:u,d=n+o,f=s+c,v=s*.4;return c<=o?o=Math.max(c-v,0):d<=f&&(o=Math.min(o-(d-f-v),l-n)),o}function t0(e){let{selectedElement:t,containerSize:n,contentSize:l,isRtl:a,isHorizontal:o}=e;const i=o?t.clientWidth:t.clientHeight,s=o?t.offsetLeft:t.offsetTop,u=a&&o?l-s-i/2-n/2:s+i/2-n/2;return Math.min(l-n,Math.max(0,u))}const kr=Symbol.for("vuetify:v-slide-group"),xr=E({centerActive:Boolean,direction:{type:String,default:"horizontal"},symbol:{type:null,default:kr},nextIcon:{type:se,default:"$next"},prevIcon:{type:se,default:"$prev"},showArrows:{type:[Boolean,String],validator:e=>typeof e=="boolean"||["always","desktop","mobile"].includes(e)},...q(),...ce(),...wn({selectedClass:"v-slide-group-item--active"})},"VSlideGroup"),wa=L()({name:"VSlideGroup",props:xr(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{isRtl:l}=De(),{mobile:a}=en(),o=an(e,e.symbol),i=K(!1),s=K(0),u=K(0),c=K(0),d=g(()=>e.direction==="horizontal"),{resizeRef:f,contentRect:v}=kt(),{resizeRef:m,contentRect:h}=kt(),y=g(()=>o.selected.value.length?o.items.value.findIndex(U=>U.id===o.selected.value[0]):-1),b=g(()=>o.selected.value.length?o.items.value.findIndex(U=>U.id===o.selected.value[o.selected.value.length-1]):-1);if(Ce){let U=-1;Z(()=>[o.selected.value,v.value,h.value,d.value],()=>{cancelAnimationFrame(U),U=requestAnimationFrame(()=>{if(v.value&&h.value){const z=d.value?"width":"height";u.value=v.value[z],c.value=h.value[z],i.value=u.value+1<c.value}if(y.value>=0&&m.value){const z=m.value.children[b.value];y.value===0||!i.value?s.value=0:e.centerActive?s.value=t0({selectedElement:z,containerSize:u.value,contentSize:c.value,isRtl:l.value,isHorizontal:d.value}):i.value&&(s.value=si({selectedElement:z,containerSize:u.value,contentSize:c.value,isRtl:l.value,currentScrollOffset:s.value,isHorizontal:d.value}))}})})}const p=K(!1);let S=0,x=0;function I(U){const z=d.value?"clientX":"clientY";x=(l.value&&d.value?-1:1)*s.value,S=U.touches[0][z],p.value=!0}function V(U){if(!i.value)return;const z=d.value?"clientX":"clientY",oe=l.value&&d.value?-1:1;s.value=oe*(x+S-U.touches[0][z])}function C(U){const z=c.value-u.value;s.value<0||!i.value?s.value=0:s.value>=z&&(s.value=z),p.value=!1}function P(){f.value&&(f.value[d.value?"scrollLeft":"scrollTop"]=0)}const k=K(!1);function w(U){if(k.value=!0,!(!i.value||!m.value)){for(const z of U.composedPath())for(const oe of m.value.children)if(oe===z){s.value=si({selectedElement:oe,containerSize:u.value,contentSize:c.value,isRtl:l.value,currentScrollOffset:s.value,isHorizontal:d.value});return}}}function T(U){k.value=!1}function A(U){var z;!k.value&&!(U.relatedTarget&&((z=m.value)!=null&&z.contains(U.relatedTarget)))&&R()}function B(U){m.value&&(d.value?U.key==="ArrowRight"?R(l.value?"prev":"next"):U.key==="ArrowLeft"&&R(l.value?"next":"prev"):U.key==="ArrowDown"?R("next"):U.key==="ArrowUp"&&R("prev"),U.key==="Home"?R("first"):U.key==="End"&&R("last"))}function R(U){var z,oe,re,ve,ge;if(m.value)if(!U)(z=Ln(m.value)[0])==null||z.focus();else if(U==="next"){const N=(oe=m.value.querySelector(":focus"))==null?void 0:oe.nextElementSibling;N?N.focus():R("first")}else if(U==="prev"){const N=(re=m.value.querySelector(":focus"))==null?void 0:re.previousElementSibling;N?N.focus():R("last")}else U==="first"?(ve=m.value.firstElementChild)==null||ve.focus():U==="last"&&((ge=m.value.lastElementChild)==null||ge.focus())}function M(U){const z=s.value+(U==="prev"?-1:1)*u.value;s.value=Ue(z,0,c.value-u.value)}const X=g(()=>{let U=s.value>c.value-u.value?-(c.value-u.value)+ii(c.value-u.value-s.value):-s.value;s.value<=0&&(U=ii(-s.value));const z=l.value&&d.value?-1:1;return{transform:`translate${d.value?"X":"Y"}(${z*U}px)`,transition:p.value?"none":"",willChange:p.value?"transform":""}}),$=g(()=>({next:o.next,prev:o.prev,select:o.select,isSelected:o.isSelected})),D=g(()=>{switch(e.showArrows){case"always":return!0;case"desktop":return!a.value;case!0:return i.value||Math.abs(s.value)>0;case"mobile":return a.value||i.value||Math.abs(s.value)>0;default:return!a.value&&(i.value||Math.abs(s.value)>0)}}),O=g(()=>Math.abs(s.value)>0),G=g(()=>c.value>Math.abs(s.value)+u.value);return j(()=>r(e.tag,{class:["v-slide-group",{"v-slide-group--vertical":!d.value,"v-slide-group--has-affixes":D.value,"v-slide-group--is-overflowing":i.value},e.class],style:e.style,tabindex:k.value||o.selected.value.length?-1:0,onFocus:A},{default:()=>{var U,z,oe;return[D.value&&r("div",{key:"prev",class:["v-slide-group__prev",{"v-slide-group__prev--disabled":!O.value}],onClick:()=>M("prev")},[((U=n.prev)==null?void 0:U.call(n,$.value))??r(ta,null,{default:()=>[r(ke,{icon:l.value?e.nextIcon:e.prevIcon},null)]})]),r("div",{key:"container",ref:f,class:"v-slide-group__container",onScroll:P},[r("div",{ref:m,class:"v-slide-group__content",style:X.value,onTouchstartPassive:I,onTouchmovePassive:V,onTouchendPassive:C,onFocusin:w,onFocusout:T,onKeydown:B},[(z=n.default)==null?void 0:z.call(n,$.value)])]),D.value&&r("div",{key:"next",class:["v-slide-group__next",{"v-slide-group__next--disabled":!G.value}],onClick:()=>M("next")},[((oe=n.next)==null?void 0:oe.call(n,$.value))??r(ta,null,{default:()=>[r(ke,{icon:l.value?e.prevIcon:e.nextIcon},null)]})])]}})),{selected:o.selected,scrollTo:M,scrollOffset:s,focus:R}}}),n0=L()({name:"VSlideGroupItem",props:Sn(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const l=kn(e,kr);return()=>{var a;return(a=n.default)==null?void 0:a.call(n,{isSelected:l.isSelected.value,select:l.select,toggle:l.toggle,selectedClass:l.selectedClass.value})}}});const l0=E({multiLine:Boolean,timeout:{type:[Number,String],default:5e3},vertical:Boolean,...Ot({location:"bottom"}),...Cn(),...Pe(),...mt(),...ye(),...rt(qn({transition:"v-snackbar-transition"}),["persistent","noClickAnimation","scrim","scrollStrategy"])},"VSnackbar"),a0=L()({name:"VSnackbar",props:l0(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{locationStyles:a}=Mt(e),{positionClasses:o}=Vn(e),{scopeId:i}=In(),{themeClasses:s}=be(e),{colorClasses:u,colorStyles:c,variantClasses:d}=ln(e),{roundedClasses:f}=Be(e),v=W();Z(l,h),Z(()=>e.timeout,h),Je(()=>{l.value&&h()});let m=-1;function h(){window.clearTimeout(m);const b=Number(e.timeout);!l.value||b===-1||(m=window.setTimeout(()=>{l.value=!1},b))}function y(){window.clearTimeout(m)}return j(()=>{const[b]=It.filterProps(e);return r(It,Y({ref:v,class:["v-snackbar",{"v-snackbar--active":l.value,"v-snackbar--multi-line":e.multiLine&&!e.vertical,"v-snackbar--vertical":e.vertical},o.value,e.class],style:e.style},b,{modelValue:l.value,"onUpdate:modelValue":p=>l.value=p,contentProps:Y({class:["v-snackbar__wrapper",s.value,u.value,f.value,d.value],style:[a.value,c.value],onPointerenter:y,onPointerleave:h},b.contentProps),persistent:!0,noClickAnimation:!0,scrim:!1,scrollStrategy:"none",_disableGlobalStack:!0},i),{default:()=>[nn(!1,"v-snackbar"),n.default&&r("div",{class:"v-snackbar__content",role:"status","aria-live":"polite"},[n.default()]),n.actions&&r(we,{defaults:{VBtn:{variant:"text",ripple:!1}}},{default:()=>[r("div",{class:"v-snackbar__actions"},[n.actions()])]})],activator:n.activator})}),bt({},v)}});const o0=E({indeterminate:Boolean,inset:Boolean,flat:Boolean,loading:{type:[Boolean,String],default:!1},...Bt(),...Cl()},"VSwitch"),i0=L()({name:"VSwitch",inheritAttrs:!1,props:o0(),emits:{"update:focused":e=>!0,"update:modelValue":()=>!0,"update:indeterminate":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const a=ue(e,"indeterminate"),o=ue(e,"modelValue"),{loaderClasses:i}=xl(e),{isFocused:s,focus:u,blur:c}=Nt(e),d=W(),f=g(()=>typeof e.loading=="string"&&e.loading!==""?e.loading:e.color),v=We(),m=g(()=>e.id||`switch-${v}`);function h(){a.value&&(a.value=!1)}function y(b){var p,S;b.stopPropagation(),b.preventDefault(),(S=(p=d.value)==null?void 0:p.input)==null||S.click()}return j(()=>{const[b,p]=Qt(n),[S,x]=ze.filterProps(e),[I,V]=Xt.filterProps(e);return r(ze,Y({class:["v-switch",{"v-switch--inset":e.inset},{"v-switch--indeterminate":a.value},i.value,e.class],style:e.style},b,S,{id:m.value,focused:s.value}),{...l,default:C=>{let{id:P,messagesId:k,isDisabled:w,isReadonly:T,isValid:A}=C;return r(Xt,Y({ref:d},I,{modelValue:o.value,"onUpdate:modelValue":[B=>o.value=B,h],id:P.value,"aria-describedby":k.value,type:"checkbox","aria-checked":a.value?"mixed":void 0,disabled:w.value,readonly:T.value,onFocus:u,onBlur:c},p),{...l,default:B=>{let{backgroundColorClasses:R,backgroundColorStyles:M}=B;return r("div",{class:["v-switch__track",...R.value],style:M.value,onClick:y},null)},input:B=>{let{inputNode:R,icon:M,backgroundColorClasses:X,backgroundColorStyles:$}=B;return r(ae,null,[R,r("div",{class:["v-switch__thumb",{"v-switch__thumb--filled":M||e.loading},e.inset?void 0:X.value],style:e.inset?void 0:$.value},[r(Ha,null,{default:()=>[e.loading?r(Za,{name:"v-switch",active:!0,color:A.value===!1?void 0:f.value},{default:D=>l.loader?l.loader(D):r(Ka,{active:D.isActive,color:D.color,indeterminate:!0,size:"16",width:"2"},null)}):M&&r(ke,{key:M,icon:M,size:"x-small"},null)]})])])}})}})}),{}}});const s0=E({color:String,height:[Number,String],window:Boolean,...q(),...Me(),...bn(),...Pe(),...ce(),...ye()},"VSystemBar"),r0=L()({name:"VSystemBar",props:s0(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=be(e),{backgroundColorClasses:a,backgroundColorStyles:o}=Ee(F(e,"color")),{elevationClasses:i}=He(e),{roundedClasses:s}=Be(e),{ssrBootStyles:u}=tn(),c=g(()=>e.height??(e.window?32:24)),{layoutItemStyles:d}=pn({id:e.name,order:g(()=>parseInt(e.order,10)),position:K("top"),layoutSize:c,elementSize:c,active:g(()=>!0),absolute:F(e,"absolute")});return j(()=>r(e.tag,{class:["v-system-bar",{"v-system-bar--window":e.window},l.value,a.value,i.value,s.value,e.class],style:[o.value,d.value,u.value,e.style]},n)),{}}});const Cr=Symbol.for("vuetify:v-tabs"),u0=E({fixed:Boolean,sliderColor:String,hideSlider:Boolean,direction:{type:String,default:"horizontal"},...rt(Ja({selectedClass:"v-tab--selected",variant:"text"}),["active","block","flat","location","position","symbol"])},"VTab"),Vr=L()({name:"VTab",props:u0(),setup(e,t){let{slots:n,attrs:l}=t;const{textColorClasses:a,textColorStyles:o}=Ge(e,"sliderColor"),i=g(()=>e.direction==="horizontal"),s=K(!1),u=W(),c=W();function d(f){var m,h;let{value:v}=f;if(s.value=v,v){const y=(h=(m=u.value)==null?void 0:m.$el.parentElement)==null?void 0:h.querySelector(".v-tab--selected .v-tab__slider"),b=c.value;if(!y||!b)return;const p=getComputedStyle(y).color,S=y.getBoundingClientRect(),x=b.getBoundingClientRect(),I=i.value?"x":"y",V=i.value?"X":"Y",C=i.value?"right":"bottom",P=i.value?"width":"height",k=S[I],w=x[I],T=k>w?S[C]-x[C]:S[I]-x[I],A=Math.sign(T)>0?i.value?"right":"bottom":Math.sign(T)<0?i.value?"left":"top":"center",R=(Math.abs(T)+(Math.sign(T)<0?S[P]:x[P]))/Math.max(S[P],x[P])||0,M=S[P]/x[P]||0,X=1.5;Ut(b,{backgroundColor:[p,"currentcolor"],transform:[`translate${V}(${T}px) scale${V}(${M})`,`translate${V}(${T/X}px) scale${V}(${(R-1)/X+1})`,"none"],transformOrigin:Array(3).fill(A)},{duration:225,easing:$n})}}return j(()=>{const[f]=Ke.filterProps(e);return r(Ke,Y({symbol:Cr,ref:u,class:["v-tab",e.class],style:e.style,tabindex:s.value?0:-1,role:"tab","aria-selected":String(s.value),active:!1},f,l,{block:e.fixed,maxWidth:e.fixed?300:void 0,"onGroup:selected":d}),{default:()=>{var v;return[((v=n.default)==null?void 0:v.call(n))??e.text,!e.hideSlider&&r("div",{ref:c,class:["v-tab__slider",a.value],style:o.value},null)]}})}),{}}});function c0(e){return e?e.map(t=>ul(t)?t:{text:t,value:t}):[]}const d0=E({alignTabs:{type:String,default:"start"},color:String,fixedTabs:Boolean,items:{type:Array,default:()=>[]},stacked:Boolean,bgColor:String,grow:Boolean,height:{type:[Number,String],default:void 0},hideSlider:Boolean,sliderColor:String,...xr({mandatory:"force"}),...Fe(),...ce()},"VTabs"),v0=L()({name:"VTabs",props:d0(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),a=g(()=>c0(e.items)),{densityClasses:o}=Ye(e),{backgroundColorClasses:i,backgroundColorStyles:s}=Ee(F(e,"bgColor"));return $e({VTab:{color:F(e,"color"),direction:F(e,"direction"),stacked:F(e,"stacked"),fixed:F(e,"fixedTabs"),sliderColor:F(e,"sliderColor"),hideSlider:F(e,"hideSlider")}}),j(()=>{const[u]=wa.filterProps(e);return r(wa,Y(u,{modelValue:l.value,"onUpdate:modelValue":c=>l.value=c,class:["v-tabs",`v-tabs--${e.direction}`,`v-tabs--align-tabs-${e.alignTabs}`,{"v-tabs--fixed-tabs":e.fixedTabs,"v-tabs--grow":e.grow,"v-tabs--stacked":e.stacked},o.value,i.value,e.class],style:[{"--v-tabs-height":J(e.height)},s.value,e.style],role:"tablist",symbol:Cr}),{default:()=>[n.default?n.default():a.value.map(c=>r(Vr,Y(c,{key:c.text}),null))]})}),{}}});const f0=E({fixedHeader:Boolean,fixedFooter:Boolean,height:[Number,String],hover:Boolean,...q(),...Fe(),...ce(),...ye()},"VTable"),m0=L()({name:"VTable",props:f0(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=be(e),{densityClasses:a}=Ye(e);return j(()=>r(e.tag,{class:["v-table",{"v-table--fixed-height":!!e.height,"v-table--fixed-header":e.fixedHeader,"v-table--fixed-footer":e.fixedFooter,"v-table--has-top":!!n.top,"v-table--has-bottom":!!n.bottom,"v-table--hover":e.hover},l.value,a.value,e.class],style:e.style},{default:()=>{var o,i,s;return[(o=n.top)==null?void 0:o.call(n),n.default?r("div",{class:"v-table__wrapper",style:{height:J(e.height)}},[r("table",null,[n.default()])]):(i=n.wrapper)==null?void 0:i.call(n),(s=n.bottom)==null?void 0:s.call(n)]}})),{}}});const h0=E({autoGrow:Boolean,autofocus:Boolean,counter:[Boolean,Number,String],counterValue:Function,prefix:String,placeholder:String,persistentPlaceholder:Boolean,persistentCounter:Boolean,noResize:Boolean,rows:{type:[Number,String],default:5,validator:e=>!isNaN(parseFloat(e))},maxRows:{type:[Number,String],validator:e=>!isNaN(parseFloat(e))},suffix:String,modelModifiers:Object,...Bt(),...Bl()},"VTextarea"),g0=L()({name:"VTextarea",directives:{Intersect:Gn},inheritAttrs:!1,props:h0(),emits:{"click:control":e=>!0,"mousedown:control":e=>!0,"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const o=ue(e,"modelValue"),{isFocused:i,focus:s,blur:u}=Nt(e),c=g(()=>typeof e.counterValue=="function"?e.counterValue(o.value):(o.value||"").toString().length),d=g(()=>{if(n.maxlength)return n.maxlength;if(!(!e.counter||typeof e.counter!="number"&&typeof e.counter!="string"))return e.counter});function f(A,B){var R,M;!e.autofocus||!A||(M=(R=B[0].target)==null?void 0:R.focus)==null||M.call(R)}const v=W(),m=W(),h=K(""),y=W(),b=g(()=>e.persistentPlaceholder||i.value||e.active);function p(){var A;y.value!==document.activeElement&&((A=y.value)==null||A.focus()),i.value||s()}function S(A){p(),l("click:control",A)}function x(A){l("mousedown:control",A)}function I(A){A.stopPropagation(),p(),Ve(()=>{o.value="",Ea(e["onClick:clear"],A)})}function V(A){var R;const B=A.target;if(o.value=B.value,(R=e.modelModifiers)!=null&&R.trim){const M=[B.selectionStart,B.selectionEnd];Ve(()=>{B.selectionStart=M[0],B.selectionEnd=M[1]})}}const C=W(),P=W(+e.rows),k=g(()=>["plain","underlined"].includes(e.variant));tt(()=>{e.autoGrow||(P.value=+e.rows)});function w(){e.autoGrow&&Ve(()=>{if(!C.value||!m.value)return;const A=getComputedStyle(C.value),B=getComputedStyle(m.value.$el),R=parseFloat(A.getPropertyValue("--v-field-padding-top"))+parseFloat(A.getPropertyValue("--v-input-padding-top"))+parseFloat(A.getPropertyValue("--v-field-padding-bottom")),M=C.value.scrollHeight,X=parseFloat(A.lineHeight),$=Math.max(parseFloat(e.rows)*X+R,parseFloat(B.getPropertyValue("--v-input-control-height"))),D=parseFloat(e.maxRows)*X+R||1/0,O=Ue(M??0,$,D);P.value=Math.floor((O-R)/X),h.value=J(O)})}Je(w),Z(o,w),Z(()=>e.rows,w),Z(()=>e.maxRows,w),Z(()=>e.density,w);let T;return Z(C,A=>{A?(T=new ResizeObserver(w),T.observe(C.value)):T==null||T.disconnect()}),nt(()=>{T==null||T.disconnect()}),j(()=>{const A=!!(a.counter||e.counter||e.counterValue),B=!!(A||a.details),[R,M]=Qt(n),[{modelValue:X,...$}]=ze.filterProps(e),[D]=lo(e);return r(ze,Y({ref:v,modelValue:o.value,"onUpdate:modelValue":O=>o.value=O,class:["v-textarea v-text-field",{"v-textarea--prefixed":e.prefix,"v-textarea--suffixed":e.suffix,"v-text-field--prefixed":e.prefix,"v-text-field--suffixed":e.suffix,"v-textarea--auto-grow":e.autoGrow,"v-textarea--no-resize":e.noResize||e.autoGrow,"v-text-field--plain-underlined":k.value},e.class],style:e.style},R,$,{centerAffix:P.value===1&&!k.value,focused:i.value}),{...a,default:O=>{let{isDisabled:G,isDirty:U,isReadonly:z,isValid:oe}=O;return r(Xn,Y({ref:m,style:{"--v-textarea-control-height":h.value},onClick:S,onMousedown:x,"onClick:clear":I,"onClick:prependInner":e["onClick:prependInner"],"onClick:appendInner":e["onClick:appendInner"]},D,{active:b.value||U.value,centerAffix:P.value===1&&!k.value,dirty:U.value||e.dirty,disabled:G.value,focused:i.value,error:oe.value===!1}),{...a,default:re=>{let{props:{class:ve,...ge}}=re;return r(ae,null,[e.prefix&&r("span",{class:"v-text-field__prefix"},[e.prefix]),ne(r("textarea",Y({ref:y,class:ve,value:o.value,onInput:V,autofocus:e.autofocus,readonly:z.value,disabled:G.value,placeholder:e.placeholder,rows:e.rows,name:e.name,onFocus:p,onBlur:u},ge,M),null),[[Ze("intersect"),{handler:f},null,{once:!0}]]),e.autoGrow&&ne(r("textarea",{class:[ve,"v-textarea__sizer"],id:`${ge.id}-sizer`,"onUpdate:modelValue":N=>o.value=N,ref:C,readonly:!0,"aria-hidden":"true"},null),[[je,o.value]]),e.suffix&&r("span",{class:"v-text-field__suffix"},[e.suffix])])}})},details:B?O=>{var G;return r(ae,null,[(G=a.details)==null?void 0:G.call(a,O),A&&r(ae,null,[r("span",null,null),r(Al,{active:e.persistentCounter||i.value,value:c.value,max:d.value},a.counter)])])}:void 0})}),bt({},v,m,y)}});const y0=E({withBackground:Boolean,...q(),...ye(),...ce()},"VThemeProvider"),b0=L()({name:"VThemeProvider",props:y0(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=be(e);return()=>{var a;return e.withBackground?r(e.tag,{class:["v-theme-provider",l.value,e.class],style:e.style},{default:()=>{var o;return[(o=n.default)==null?void 0:o.call(n)]}}):(a=n.default)==null?void 0:a.call(n)}}});const p0=E({align:{type:String,default:"center",validator:e=>["center","start"].includes(e)},direction:{type:String,default:"vertical",validator:e=>["vertical","horizontal"].includes(e)},justify:{type:String,default:"auto",validator:e=>["auto","center"].includes(e)},side:{type:String,validator:e=>e==null||["start","end"].includes(e)},lineInset:{type:[String,Number],default:0},lineThickness:{type:[String,Number],default:2},lineColor:String,truncateLine:{type:String,validator:e=>["start","end","both"].includes(e)},...q(),...Fe(),...ce(),...ye()},"VTimeline"),w0=L()({name:"VTimeline",props:p0(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=be(e),{densityClasses:a}=Ye(e),{rtlClasses:o}=De();$e({VTimelineDivider:{lineColor:F(e,"lineColor")},VTimelineItem:{density:F(e,"density"),lineInset:F(e,"lineInset")}});const i=g(()=>{const u=e.side?e.side:e.density!=="default"?"end":null;return u&&`v-timeline--side-${u}`}),s=g(()=>{const u=["v-timeline--truncate-line-start","v-timeline--truncate-line-end"];switch(e.truncateLine){case"both":return u;case"start":return u[0];case"end":return u[1];default:return null}});return j(()=>r(e.tag,{class:["v-timeline",`v-timeline--${e.direction}`,`v-timeline--align-${e.align}`,`v-timeline--justify-${e.justify}`,s.value,{"v-timeline--inset-line":!!e.lineInset},l.value,a.value,i.value,o.value,e.class],style:[{"--v-timeline-line-thickness":J(e.lineThickness)},e.style]},n)),{}}}),S0=E({dotColor:String,fillDot:Boolean,hideDot:Boolean,icon:se,iconColor:String,lineColor:String,...q(),...Pe(),...At(),...Me()},"VTimelineDivider"),k0=L()({name:"VTimelineDivider",props:S0(),setup(e,t){let{slots:n}=t;const{sizeClasses:l,sizeStyles:a}=xn(e,"v-timeline-divider__dot"),{backgroundColorStyles:o,backgroundColorClasses:i}=Ee(F(e,"dotColor")),{roundedClasses:s}=Be(e,"v-timeline-divider__dot"),{elevationClasses:u}=He(e),{backgroundColorClasses:c,backgroundColorStyles:d}=Ee(F(e,"lineColor"));return j(()=>r("div",{class:["v-timeline-divider",{"v-timeline-divider--fill-dot":e.fillDot},e.class],style:e.style},[r("div",{class:["v-timeline-divider__before",c.value],style:d.value},null),!e.hideDot&&r("div",{key:"dot",class:["v-timeline-divider__dot",u.value,s.value,l.value],style:a.value},[r("div",{class:["v-timeline-divider__inner-dot",i.value,s.value],style:o.value},[n.default?r(we,{key:"icon-defaults",disabled:!e.icon,defaults:{VIcon:{color:e.iconColor,icon:e.icon,size:e.size}}},n.default):r(ke,{key:"icon",color:e.iconColor,icon:e.icon,size:e.size},null)])]),r("div",{class:["v-timeline-divider__after",c.value],style:d.value},null)])),{}}}),x0=E({density:String,dotColor:String,fillDot:Boolean,hideDot:Boolean,hideOpposite:{type:Boolean,default:void 0},icon:se,iconColor:String,lineInset:[Number,String],...q(),...dt(),...Me(),...Pe(),...At(),...ce()},"VTimelineItem"),C0=L()({name:"VTimelineItem",props:x0(),setup(e,t){let{slots:n}=t;const{dimensionStyles:l}=vt(e),a=K(0),o=W();return Z(o,i=>{var s;i&&(a.value=((s=i.$el.querySelector(".v-timeline-divider__dot"))==null?void 0:s.getBoundingClientRect().width)??0)},{flush:"post"}),j(()=>{var i,s;return r("div",{class:["v-timeline-item",{"v-timeline-item--fill-dot":e.fillDot},e.class],style:[{"--v-timeline-dot-size":J(a.value),"--v-timeline-line-inset":e.lineInset?`calc(var(--v-timeline-dot-size) / 2 + ${J(e.lineInset)})`:J(0)},e.style]},[r("div",{class:"v-timeline-item__body",style:l.value},[(i=n.default)==null?void 0:i.call(n)]),r(k0,{ref:o,hideDot:e.hideDot,icon:e.icon,iconColor:e.iconColor,size:e.size,elevation:e.elevation,dotColor:e.dotColor,fillDot:e.fillDot,rounded:e.rounded},{default:n.icon}),e.density!=="compact"&&r("div",{class:"v-timeline-item__opposite"},[!e.hideOpposite&&((s=n.opposite)==null?void 0:s.call(n))])])}),{}}}),V0=E({...q(),...mt({variant:"text"})},"VToolbarItems"),_0=L()({name:"VToolbarItems",props:V0(),setup(e,t){let{slots:n}=t;return $e({VBtn:{color:F(e,"color"),height:"inherit",variant:F(e,"variant")}}),j(()=>{var l;return r("div",{class:["v-toolbar-items",e.class],style:e.style},[(l=n.default)==null?void 0:l.call(n)])}),{}}});const I0=E({id:String,text:String,...rt(qn({closeOnBack:!1,location:"end",locationStrategy:"connected",eager:!0,minWidth:0,offset:10,openOnClick:!1,openOnHover:!0,origin:"auto",scrim:!1,scrollStrategy:"reposition",transition:!1}),["absolute","persistent"])},"VTooltip"),T0=L()({name:"VTooltip",props:I0(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{scopeId:a}=In(),o=We(),i=g(()=>e.id||`v-tooltip-${o}`),s=W(),u=g(()=>e.location.split(" ").length>1?e.location:e.location+" center"),c=g(()=>e.origin==="auto"||e.origin==="overlap"||e.origin.split(" ").length>1||e.location.split(" ").length>1?e.origin:e.origin+" center"),d=g(()=>e.transition?e.transition:l.value?"scale-transition":"fade-transition"),f=g(()=>Y({"aria-describedby":i.value},e.activatorProps));return j(()=>{const[v]=It.filterProps(e);return r(It,Y({ref:s,class:["v-tooltip",e.class],style:e.style,id:i.value},v,{modelValue:l.value,"onUpdate:modelValue":m=>l.value=m,transition:d.value,absolute:!0,location:u.value,origin:c.value,persistent:!0,role:"tooltip",activatorProps:f.value,_disableGlobalStack:!0},a),{activator:n.activator,default:function(){var b;for(var m=arguments.length,h=new Array(m),y=0;y<m;y++)h[y]=arguments[y];return((b=n.default)==null?void 0:b.call(n,...h))??e.text}})}),bt({},s)}}),P0=L()({name:"VValidation",props:gs(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ys(e,"validation");return()=>{var a;return(a=n.default)==null?void 0:a.call(n,l)}}}),A0=Object.freeze(Object.defineProperty({__proto__:null,VAlert:og,VAlertTitle:us,VApp:hh,VAppBar:$h,VAppBarNavIcon:tg,VAppBarTitle:ng,VAutocomplete:xy,VAvatar:Lt,VBadge:Vy,VBanner:Ty,VBannerActions:js,VBannerText:Us,VBottomNavigation:Ay,VBreadcrumbs:Ly,VBreadcrumbsDivider:Gs,VBreadcrumbsItem:Ws,VBtn:Ke,VBtnGroup:aa,VBtnToggle:zh,VCard:My,VCardActions:Ys,VCardItem:Xs,VCardSubtitle:Ks,VCardText:Zs,VCardTitle:qs,VCarousel:Wy,VCarouselItem:Ky,VCheckbox:fg,VCheckboxBtn:hn,VChip:Kn,VChipGroup:gg,VClassIcon:Da,VCode:qy,VCol:ip,VColorPicker:Mb,VCombobox:Db,VComponentIcon:Jl,VContainer:np,VCounter:Al,VDefaultsProvider:we,VDialog:Hb,VDialogBottomTransition:ph,VDialogTopTransition:wh,VDialogTransition:Sl,VDivider:Ts,VExpandTransition:kl,VExpandXTransition:Ua,VExpansionPanel:Kb,VExpansionPanelText:rr,VExpansionPanelTitle:cr,VExpansionPanels:Gb,VFabTransition:bh,VFadeTransition:ta,VField:Xn,VFieldLabel:Bn,VFileInput:Xb,VFooter:Jb,VForm:ep,VHover:gp,VIcon:ke,VImg:qt,VInput:ze,VItem:pp,VItemGroup:bp,VKbd:wp,VLabel:_n,VLayout:kp,VLayoutItem:Cp,VLazy:_p,VLigatureIcon:Tm,VList:Il,VListGroup:ra,VListImg:Og,VListItem:_t,VListItemAction:Fg,VListItemMedia:Dg,VListItemSubtitle:Vs,VListItemTitle:_s,VListSubheader:Is,VLocaleProvider:Tp,VMain:Ap,VMenu:Pl,VMessages:ms,VNavigationDrawer:Np,VNoSsr:Dp,VOverlay:It,VPagination:jp,VParallax:Wp,VProgressCircular:Ka,VProgressLinear:qa,VRadio:Kp,VRadioGroup:Xp,VRangeSlider:Jp,VRating:e0,VResponsive:na,VRow:fp,VScaleTransition:Ha,VScrollXReverseTransition:kh,VScrollXTransition:Sh,VScrollYReverseTransition:Ch,VScrollYTransition:xh,VSelect:by,VSelectionControl:Xt,VSelectionControlGroup:ds,VSheet:pa,VSlideGroup:wa,VSlideGroupItem:n0,VSlideXReverseTransition:_h,VSlideXTransition:Vh,VSlideYReverseTransition:Ih,VSlideYTransition:ja,VSlider:ba,VSnackbar:a0,VSpacer:mp,VSvgIcon:Na,VSwitch:i0,VSystemBar:r0,VTab:Vr,VTable:m0,VTabs:v0,VTextField:Zt,VTextarea:g0,VThemeProvider:b0,VTimeline:w0,VTimelineItem:C0,VToolbar:la,VToolbarItems:_0,VToolbarTitle:za,VTooltip:T0,VValidation:P0,VVirtualScroll:Rl,VWindow:va,VWindowItem:fa},Symbol.toStringTag,{value:"Module"}));function B0(e,t){const n=t.modifiers||{},l=t.value,{once:a,immediate:o,...i}=n,s=!Object.keys(i).length,{handler:u,options:c}=typeof l=="object"?l:{handler:l,options:{attributes:(i==null?void 0:i.attr)??s,characterData:(i==null?void 0:i.char)??s,childList:(i==null?void 0:i.child)??s,subtree:(i==null?void 0:i.sub)??s}},d=new MutationObserver(function(){let f=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],v=arguments.length>1?arguments[1]:void 0;u==null||u(f,v),a&&_r(e,t)});o&&(u==null||u([],d)),e._mutate=Object(e._mutate),e._mutate[t.instance.$.uid]={observer:d},d.observe(e,c)}function _r(e,t){var n;(n=e._mutate)!=null&&n[t.instance.$.uid]&&(e._mutate[t.instance.$.uid].observer.disconnect(),delete e._mutate[t.instance.$.uid])}const E0={mounted:B0,unmounted:_r};function R0(e,t){var a,o;const n=t.value,l={passive:!((a=t.modifiers)!=null&&a.active)};window.addEventListener("resize",n,l),e._onResize=Object(e._onResize),e._onResize[t.instance.$.uid]={handler:n,options:l},(o=t.modifiers)!=null&&o.quiet||n()}function L0(e,t){var a;if(!((a=e._onResize)!=null&&a[t.instance.$.uid]))return;const{handler:n,options:l}=e._onResize[t.instance.$.uid];window.removeEventListener("resize",n,l),delete e._onResize[t.instance.$.uid]}const $0={mounted:R0,unmounted:L0};function Ir(e,t){const{self:n=!1}=t.modifiers??{},l=t.value,a=typeof l=="object"&&l.options||{passive:!0},o=typeof l=="function"||"handleEvent"in l?l:l.handler,i=n?e:t.arg?document.querySelector(t.arg):window;i&&(i.addEventListener("scroll",o,a),e._onScroll=Object(e._onScroll),e._onScroll[t.instance.$.uid]={handler:o,options:a,target:n?void 0:i})}function Tr(e,t){var o;if(!((o=e._onScroll)!=null&&o[t.instance.$.uid]))return;const{handler:n,options:l,target:a=e}=e._onScroll[t.instance.$.uid];a.removeEventListener("scroll",n,l),delete e._onScroll[t.instance.$.uid]}function O0(e,t){t.value!==t.oldValue&&(Tr(e,t),Ir(e,t))}const M0={mounted:Ir,unmounted:Tr,updated:O0},F0=Object.freeze(Object.defineProperty({__proto__:null,ClickOutside:Ds,Intersect:Gn,Mutate:E0,Resize:$0,Ripple:Ft,Scroll:M0,Touch:io},Symbol.toStringTag,{value:"Module"})),N0=Gr(),Zn=jr(Mf);Zn.config.globalProperties.emitter=N0;Zn.directive("tooltip",{mounted:(e,t)=>new bootstrap.Tooltip(e,{boundary:document.body,container:e.parentNode})});const D0=Ui({components:A0,directives:F0});Zn.use(D0);Zn.use(Ur);Zn.mount("#mw-element-style-editor-app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
