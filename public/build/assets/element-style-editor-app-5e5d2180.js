import{o as ee,c as te,a as P,_ as ze,n as Le,e as we,w as ne,v as Pr,F as oe,f as En,t as xt,k as Pe,h as il,r as ke,d as r,C as pa,m as ka,D as je,I as co,j as Ze,l as Jn,J as vo,K as Y,L as Rl,M as Ar,b as Br,N as Rr,O as gt,P as h,Q as tt,q as Sa,R as zn,p as Er,S as ui,U as Jt,V as Lr,s as W,W as Ve,X as K,Y as $e,z as ot,y as Z,Z as Xe,$ as wa,a0 as $t,x as nt,a1 as Ca,a2 as $r,a3 as Mr,u as Je,A as xe,a4 as Fr,T as Rt,a5 as xa,a6 as Hn,a7 as D,a8 as Dr,a9 as Or,aa as Nr,ab as zr,g as gl,ac as Hr,E as jr,G as Ur,H as Gr}from"./mitt-c026d180.js";const Wr=["innerHTML"],Yr={class:"form-control-live-edit-label-wrapper"},Kr=["value"],qr=P("span",{class:"form-control-live-edit-bottom-effect"},null,-1),Va={__name:"Input",props:{modelValue:String,label:String},emits:["update:modelValue"],setup(e){return(t,n)=>(ee(),te("div",null,[P("label",{class:"live-edit-label",innerHTML:e.label},null,8,Wr),P("div",null,[P("label",Yr,[P("input",{value:e.modelValue,onInput:n[0]||(n[0]=l=>t.$emit("update:modelValue",l.target.value)),class:"form-control-live-edit-input"},null,40,Kr),qr])])]))}},Xr={props:{textAlign:String},methods:{setTextAlignment(e){this.$emit("update:textAlign",e)}}},Zr={class:"form-control-live-edit-label-wrapper d-flex align-items-center"},Jr=P("label",{class:"live-edit-label px-0 col-4"},"Align",-1),Qr={class:"s-field-content ms-3"},eu={class:"text-align"},tu=P("span",{class:"mdi mdi-format-align-left"},null,-1),nu=[tu],lu=P("span",{class:"mdi mdi-format-align-center"},null,-1),au=[lu],ou=P("span",{class:"mdi mdi-format-align-right"},null,-1),iu=[ou],su=P("span",{class:"mdi mdi-format-align-justify"},null,-1),ru=[su];function uu(e,t,n,l,a,o){return ee(),te("div",Zr,[Jr,P("div",Qr,[P("div",eu,[P("span",{class:Le(["ta-left",{active:n.textAlign==="left"}]),onClick:t[0]||(t[0]=i=>o.setTextAlignment("left")),"data-value":"left"},nu,2),P("span",{class:Le(["ta-center",{active:n.textAlign==="center"}]),onClick:t[1]||(t[1]=i=>o.setTextAlignment("center")),"data-value":"center"},au,2),P("span",{class:Le(["ta-right",{active:n.textAlign==="right"}]),onClick:t[2]||(t[2]=i=>o.setTextAlignment("right")),"data-value":"right"},iu,2),P("span",{class:Le(["ta-justify",{active:n.textAlign==="justify"}]),onClick:t[3]||(t[3]=i=>o.setTextAlignment("justify")),"data-value":"justify"},ru,2)])])])}const cu=ze(Xr,[["render",uu]]),du={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center flex-wrap gap-2"},vu=["innerHTML"],fu=["selected","value"],mu={props:{modelValue:String,label:String,options:Array},data(){return{selectedOption:this.modelValue}},watch:{modelValue(e){this.selectedOption!==e&&(this.selectedOption=e)}},methods:{handleInput(){this.selectedOption!==this.modelValue&&this.$emit("update:modelValue",this.selectedOption)}}},gn=Object.assign(mu,{__name:"DropdownSmall",emits:["update:modelValue"],setup(e){return(t,n)=>(ee(),te("div",du,[e.label?(ee(),te("label",{key:0,class:"live-edit-label px-0 col-4",innerHTML:e.label},null,8,vu)):we("",!0),ne(P("select",{"onUpdate:modelValue":n[0]||(n[0]=l=>t.selectedOption=l),class:"form-control-live-edit-input form-select",onInput:n[1]||(n[1]=l=>t.$emit("update:modelValue",l.target.value))},[(ee(!0),te(oe,null,En(e.options,l=>(ee(),te("option",{selected:t.selectedOption===l.key,value:l.key},xt(l.value),9,fu))),256))],544),[[Pr,t.selectedOption]])]))}}),gu=["innerHTML"],hu={class:"form-control-live-edit-label-wrapper"},yu=["value"],_a={__name:"Dropdown",props:{modelValue:String,label:String,options:Array},emits:["update:modelValue"],setup(e){return(t,n)=>(ee(),te("div",null,[P("label",{class:"live-edit-label",innerHTML:e.label},null,8,gu),P("div",null,[P("label",hu,[P("select",{class:"form-select form-control-live-edit-input",onInput:n[0]||(n[0]=l=>t.$emit("update:modelValue",l.target.value))},[(ee(!0),te(oe,null,En(e.options,l=>(ee(),te("option",{value:l.key},xt(l.value),9,yu))),256))],32)])])]))}},bu={props:{value:String},watch:{value(e){this.fontFamily=e}},methods:{loadMoreFonts(){mw.top().app.fontManager.manageFonts()},selectFont(e){this.fontFamily=e,this.$emit("change",e)}},mounted(){setTimeout(()=>{this.supportedFonts=mw.top().app.fontManager.getFonts(),this.$forceUpdate(),mw.top().app.fontManager.subscribe(e=>{e&&(this.supportedFonts=e),this.$forceUpdate()})},1e3)},data(){return{supportedFonts:[],fontFamily:this.value}}},pu={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center flex-wrap gap-2"},ku=P("label",{class:"live-edit-label px-0 col-4"},"Font",-1),Su={class:"form-control-live-edit-input form-select",type:"button",ref:"dropdownButton",id:"fontDropdown","data-bs-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},wu=P("span",{class:"font-picker-selected-font"}," Select ",-1),Cu=[wu],xu={class:"dropdown-menu","aria-labelledby":"fontDropdown"},Vu=["onClick"];function _u(e,t,n,l,a,o){return ee(),te("div",pu,[ku,P("button",Su,[ne(P("div",null,[P("span",{class:"font-picker-selected-font",style:il({fontFamily:a.fontFamily})},xt(a.fontFamily),5)],512),[[Pe,a.fontFamily]]),ne(P("div",null,Cu,512),[[Pe,!a.fontFamily]])],512),P("ul",xu,[(ee(!0),te(oe,null,En(a.supportedFonts,(i,s)=>(ee(),te("li",{key:s,class:Le({active:i===a.fontFamily})},[P("a",{class:"dropdown-item",href:"#",onClick:u=>o.selectFont(i),style:il({fontFamily:i})},xt(i),13,Vu)],2))),128))]),P("small",{class:"cursor-pointer ms-auto",onClick:t[0]||(t[0]=i=>o.loadMoreFonts())},"Load more fonts ")])}const Ia=ze(bu,[["render",_u]]),Iu={props:{label:String,modelValue:Number,min:Number,max:Number,step:Number,unit:String},data(){return{selectedValue:this.modelValue}},methods:{resetValue(){this.selectedValue=null}},watch:{selectedValue(e){e!==this.modelValue&&this.$emit("update:modelValue",e)},modelValue(e){this.selectedValue=e}}},Tu={class:"form-control-live-edit-label-wrapper d-flex align-items-center"},Pu={class:"live-edit-label px-0 col-4"},Au={class:"col-6 ms-4","data-size":"medium"},Bu=P("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",height:"16",viewBox:"0 -960 960 960",width:"16"},[P("path",{d:"M440-122q-121-15-200.5-105.5T160-440q0-66 26-126.5T260-672l57 57q-38 34-57.5 79T240-440q0 88 56 155.5T440-202v80Zm80 0v-80q87-16 143.5-83T720-440q0-100-70-170t-170-70h-3l44 44-56 56-140-140 140-140 56 56-44 44h3q134 0 227 93t93 227q0 121-79.5 211.5T520-122Z"})],-1),Ru=[Bu];function Eu(e,t,n,l,a,o){const i=ke("v-slider");return ee(),te("div",Tu,[P("label",Pu,xt(n.label)+" "+xt(a.selectedValue)+xt(n.unit),1),P("div",Au,[r(i,{min:n.min,max:n.max,step:n.step,modelValue:a.selectedValue,"onUpdate:modelValue":t[0]||(t[0]=s=>a.selectedValue=s)},null,8,["min","max","step","modelValue"]),P("span",{onClick:t[1]||(t[1]=(...s)=>o.resetValue&&o.resetValue(...s)),class:"reset-field tip mw-action-buttons-background-circle-on-hover","data-tipposition":"top-right","data-tip":"Restore default value"},Ru)])])}const Ta=ze(Iu,[["render",Eu]]),Lu={components:{ColorPicker:pa,FontPicker:Ia,Dropdown:_a,Input:Va,Slider:ka,Align:cu,DropdownSmall:gn,SliderSmall:Ta},data(){return{showTypography:!1,activeNode:null,isReady:!1,textTransformOptions:[{key:"none",value:"None"},{key:"capitalize",value:"Capitalize"},{key:"uppercase",value:"Uppercase"},{key:"lowercase",value:"Lowercase"}],fontWeightOptions:[{key:"normal",value:"Normal"},{key:"bold",value:"Bold"},{key:"bolder",value:"Bolder"},{key:"lighter",value:"Lighter"},{key:"100",value:"100"},{key:"200",value:"200"},{key:"300",value:"300"},{key:"400",value:"400"},{key:"500",value:"500"},{key:"600",value:"600"},{key:"700",value:"700"},{key:"800",value:"800"},{key:"900",value:"900"}],fontStylesOptions:[{key:"normal",value:"Normal"},{key:"italic",value:"Italic"},{key:"oblique",value:"Oblique"}],textAlign:null,fontSize:null,fontWeight:"normal",fontStyle:"normal",lineHeight:null,fontFamily:null,letterSpacing:null,wordSpacing:null,color:null,textTransform:"none",textDecorationIsBold:null,textDecorationIsItalic:null,textDecorationIsUnderline:null,textDecorationIsStrikethrough:null}},methods:{toggleTypography(){this.showTypography=!this.showTypography,this.emitter.emit("element-style-editor-show","typography")},resetAllProperties:function(){this.fontSize=null,this.fontWeight="normal",this.fontStyle="normal",this.lineHeight=null,this.fontFamily=null,this.color=null,this.textTransform="none",this.textDecorationIsBold=null,this.textDecorationIsItalic=null,this.textDecorationIsUnderline=null,this.textDecorationIsStrikethrough=null,this.letterSpacing=null,this.wordSpacing=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){mw.top().app.dispatch("mw.elementStyleEditor.closeAllOpenedMenus");var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssTextAlign(t),this.populateCssTextDecoration(t),this.populateCssFont(t),this.populateCssTextTransform(t),this.populateLetterSpacing(t),this.populateWordSpacing(t),setTimeout(()=>{this.isReady=!0},100)}},populateLetterSpacing:function(e){if(!(!e||!e.get)){var t=e.get.letterSpacing();this.letterSpacing=t}},populateWordSpacing:function(e){if(!(!e||!e.get)){var t=e.get.wordSpacing();this.wordSpacing=t}},populateCssTextAlign:function(e){if(!(!e||!e.get)){var t=e.get.alignNormalize();this.textAlign=t}},populateCssTextDecoration:function(e){if(!(!e||!e.get)){var t=e.get.is();this.textDecorationIsBold=t.bold,this.textDecorationIsItalic=t.italic,this.textDecorationIsUnderline=t.underlined,this.textDecorationIsStrikethrough=t.striked}},setTextAlignment:function(e){this.textAlign=e},handleFontChange:function(e){this.fontFamily=e},handleFontColorChange:function(e){typeof e=="string"&&(this.color=e)},populateCssFont:function(e){if(!(!e||!e.get)){var t=e.get.font();t.size&&(t.size=t.size.replace("px","")),t.lineHeight&&(t.lineHeight=t.lineHeight.replace("px","")),console.log("font",t),this.fontSize=t.size,this.fontWeight=t.weight,this.fontStyle=t.style,this.lineHeight=t.lineHeight,this.fontFamily=t.family,this.color=t.color}},populateCssTextTransform:function(e){if(!(!e||!e.get)){var t=e.get.textTransform();this.textTransform=t}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="typography"&&(this.showTypography=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{fontFamily:function(e,t){this.applyPropertyToActiveNode("fontFamily",e)},fontSize:function(e,t){this.applyPropertyToActiveNode("fontSize",e+"px")},fontWeight:function(e,t){this.applyPropertyToActiveNode("fontWeight",e)},fontStyle:function(e,t){this.applyPropertyToActiveNode("fontStyle",e)},textAlign:function(e,t){this.applyPropertyToActiveNode("textAlign",e)},lineHeight:function(e,t){var n=!1;if(typeof e>"u"&&(n=!0),e==null&&(n=!0),n){this.applyPropertyToActiveNode("lineHeight","auto");return}this.applyPropertyToActiveNode("lineHeight",e+"px")},color:function(e,t){this.applyPropertyToActiveNode("color",e)},textTransform:function(e,t){this.applyPropertyToActiveNode("textTransform",e)},letterSpacing:function(e,t){this.applyPropertyToActiveNode("letterSpacing",e+"px")},wordSpacing:function(e,t){this.applyPropertyToActiveNode("wordSpacing",e+"px")}}},$u={class:"d-flex"},Mu={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Fu=P("path",{d:"M21,7V3h-4v1H7V3H3v4h1v10H3v4h4v-1h10v1h4v-4h-1V7H21 M18,4h2v2h-2V4 M4,4h2v2H4V4 M6,20H4v-2h2V20 M20,20h-2v-2h2V20   M18,17h-1v1H7v-1H6V7h1V6h10v1h1V17 M16,8v2h-3v6h-2v-6H8V8H16z"},null,-1),Du=[Fu],Ou={key:0},Nu={class:"my-4 pt-2"};function zu(e,t,n,l,a,o){const i=ke("FontPicker"),s=ke("Align"),u=ke("ColorPicker"),c=ke("SliderSmall"),d=ke("DropdownSmall");return ee(),te(oe,null,[P("div",$u,[(ee(),te("svg",Mu,Du)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showTypography}]),onClick:t[0]||(t[0]=(...f)=>o.toggleTypography&&o.toggleTypography(...f))}," Typography ",2)]),a.showTypography?(ee(),te("div",Ou,[P("div",null,[P("div",Nu,[r(i,{modelValue:a.fontFamily,"onUpdate:modelValue":t[1]||(t[1]=f=>a.fontFamily=f),value:a.fontFamily,onChange:o.handleFontChange,label:"Family"},null,8,["modelValue","value","onChange"])]),r(s,{textAlign:a.textAlign,"onUpdate:textAlign":o.setTextAlignment},null,8,["textAlign","onUpdate:textAlign"]),r(u,{modelValue:a.color,"onUpdate:modelValue":t[2]||(t[2]=f=>a.color=f),color:a.color,label:"Color",onChange:o.handleFontColorChange},null,8,["modelValue","color","onChange"]),r(c,{label:"Font Size",modelValue:a.fontSize,"onUpdate:modelValue":t[3]||(t[3]=f=>a.fontSize=f),min:0,max:100,step:5},null,8,["modelValue"]),r(d,{modelValue:a.fontWeight,"onUpdate:modelValue":t[4]||(t[4]=f=>a.fontWeight=f),options:a.fontWeightOptions,label:"Weight"},null,8,["modelValue","options"]),r(d,{modelValue:a.textTransform,"onUpdate:modelValue":t[5]||(t[5]=f=>a.textTransform=f),options:a.textTransformOptions,label:"Transform"},null,8,["modelValue","options"]),r(d,{modelValue:a.fontStyle,"onUpdate:modelValue":t[6]||(t[6]=f=>a.fontStyle=f),options:a.fontStylesOptions,label:"Style"},null,8,["modelValue","options"]),r(c,{label:"Line Height",modelValue:a.lineHeight,"onUpdate:modelValue":t[7]||(t[7]=f=>a.lineHeight=f),min:0,max:100,step:5},null,8,["modelValue"]),r(c,{label:"Letter Spacing",modelValue:a.letterSpacing,"onUpdate:modelValue":t[8]||(t[8]=f=>a.letterSpacing=f),min:1,max:100,step:1},null,8,["modelValue"]),r(c,{label:"Word Spacing",modelValue:a.wordSpacing,"onUpdate:modelValue":t[9]||(t[9]=f=>a.wordSpacing=f),min:1,max:100,step:1},null,8,["modelValue"])])])):we("",!0)],64)}const Hu=ze(Lu,[["render",zu]]);const ju={data(){return{showSpacing:!1,activeNode:null,isReady:!1,marginTop:null,marginRight:null,marginBottom:null,marginLeft:null,paddingTop:null,paddingRight:null,paddingBottom:null,paddingLeft:null}},methods:{toggleSpacing:function(){this.showSpacing=!this.showSpacing,this.emitter.emit("element-style-editor-show","spacing")},resetAllProperties:function(){this.marginTop=null,this.marginRight=null,this.marginBottom=null,this.marginLeft=null,this.paddingTop=null,this.paddingRight=null,this.paddingBottom=null,this.paddingLeft=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssPadding(t),this.populateCssMargin(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssPadding:function(e){var t=e.get.padding(void 0,!0);this.paddingTop=parseFloat(t.top),this.paddingRight=parseFloat(t.right),this.paddingBottom=parseFloat(t.bottom),this.paddingLeft=parseFloat(t.left)},populateCssMargin:function(e){if(!(!e||!e.get)){var t=e.get.margin(void 0,!0);this.marginTop=parseFloat(t.top),this.marginRight=parseFloat(t.right),this.marginBottom=parseFloat(t.bottom),this.marginLeft=parseFloat(t.left)}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="spacing"&&(this.showSpacing=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{marginTop:function(e,t){this.applyPropertyToActiveNode("marginTop",e+"px")},marginRight:function(e,t){this.applyPropertyToActiveNode("marginRight",e+"px")},marginBottom:function(e,t){this.applyPropertyToActiveNode("marginBottom",e+"px")},marginLeft:function(e,t){this.applyPropertyToActiveNode("marginLeft",e+"px")},paddingTop:function(e,t){this.applyPropertyToActiveNode("paddingTop",e+"px")},paddingRight:function(e,t){this.applyPropertyToActiveNode("paddingRight",e+"px")},paddingBottom:function(e,t){this.applyPropertyToActiveNode("paddingBottom",e+"px")},paddingLeft:function(e,t){this.applyPropertyToActiveNode("paddingLeft",e+"px")}}},Uu={class:"d-flex"},Gu={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Wu=P("path",{d:"M10.6,12l4-4H11V6h7v7h-2V9.4l-4,4V16h8V4H8v8H10.6 M22,2v16H12v4H2V12h4V2H22 M10,14H4v6h6V14z"},null,-1),Yu=[Wu],Ku={key:0},qu={class:"mw-element-spacing-editor mt-4"},Xu=P("span",{class:"mw-ese-label"},"Margin",-1),Zu={class:"mw-ese-holder mw-ese-margin"},Ju={class:"input mw-ese-top"},Qu={class:"input mw-ese-right"},ec={class:"input mw-ese-bottom"},tc={class:"input mw-ese-left"},nc={class:"mw-ese-holder mw-ese-padding"},lc={class:"input mw-ese-top"},ac={class:"input mw-ese-right"},oc={class:"input mw-ese-bottom"},ic={class:"input mw-ese-left"},sc=P("span",{class:"mw-ese-label"},"Padding",-1);function rc(e,t,n,l,a,o){return ee(),te(oe,null,[P("div",Uu,[(ee(),te("svg",Gu,Yu)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showSpacing}]),onClick:t[0]||(t[0]=(...i)=>o.toggleSpacing&&o.toggleSpacing(...i))}," Spacing ",2)]),a.showSpacing?(ee(),te("div",Ku,[P("div",qu,[Xu,P("div",Zu,[P("span",Ju,[ne(P("input",{type:"number","onUpdate:modelValue":t[1]||(t[1]=i=>a.marginTop=i)},null,512),[[je,a.marginTop]])]),P("span",Qu,[ne(P("input",{type:"number","onUpdate:modelValue":t[2]||(t[2]=i=>a.marginRight=i)},null,512),[[je,a.marginRight]])]),P("span",ec,[ne(P("input",{type:"number","onUpdate:modelValue":t[3]||(t[3]=i=>a.marginBottom=i)},null,512),[[je,a.marginBottom]])]),P("span",tc,[ne(P("input",{type:"number","onUpdate:modelValue":t[4]||(t[4]=i=>a.marginLeft=i)},null,512),[[je,a.marginLeft]])]),P("div",nc,[P("span",lc,[ne(P("input",{type:"number",min:"0","onUpdate:modelValue":t[5]||(t[5]=i=>a.paddingTop=i)},null,512),[[je,a.paddingTop]])]),P("span",ac,[ne(P("input",{type:"number",min:"0","onUpdate:modelValue":t[6]||(t[6]=i=>a.paddingRight=i)},null,512),[[je,a.paddingRight]])]),P("span",oc,[ne(P("input",{type:"number",min:"0","onUpdate:modelValue":t[7]||(t[7]=i=>a.paddingBottom=i)},null,512),[[je,a.paddingBottom]])]),P("span",ic,[ne(P("input",{type:"number",min:"0","onUpdate:modelValue":t[8]||(t[8]=i=>a.paddingLeft=i)},null,512),[[je,a.paddingLeft]])]),sc])])])])):we("",!0)],64)}const uc=ze(ju,[["render",rc]]);const cc={props:{label:{type:String,default:"Image"},file:{type:String,default:""}},data(){return{selectedFile:this.file}},watch:{file(e){this.selectedFile=e}},methods:{selectBackgroundImage(){mw.filePickerDialog(e=>{this.selectedFile=e,this.$emit("change",this.selectedFile)})},removeBackgroundImage(){this.selectedFile="",this.$emit("change",this.selectedFile)},resetBackgroundImage(){this.$emit("change",this.selectedFile)}}},dc={class:"form-control-live-edit-label-wrapper my-4 background-image-nav d-flex align-items-center gap-2"},vc={class:"live-edit-label px-0 text-start"},fc={class:"d-flex col"},mc=P("svg",{xmlns:"http://www.w3.org/2000/svg",height:"20",viewBox:"0 -960 960 960",width:"20"},[P("path",{d:"M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h560q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H200Zm0-80h560v-560H200v560Zm40-80h480L570-480 450-320l-90-120-120 160Zm-40 80v-560 560Z"})],-1),gc={key:0,class:"background-preview",style:{"background-image":"none"}},hc={class:"d-flex ms-auto justify-content-end pe-4"},yc=P("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",height:"16",viewBox:"0 -960 960 960",width:"16"},[P("path",{d:"M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z"})],-1),bc=[yc];function pc(e,t,n,l,a,o){return ee(),te("div",dc,[P("label",vc,xt(n.label),1),P("div",fc,[P("div",null,[P("span",{class:"mw-ui-btn mw-ui-btn-outline tip background-select-item",style:{border:"1px solid #000"},onClick:t[0]||(t[0]=(...i)=>o.selectBackgroundImage&&o.selectBackgroundImage(...i)),"data-tip":"Select background image"},[mc,a.selectedFile?we("",!0):(ee(),te("span",gc)),a.selectedFile?(ee(),te("span",{key:1,class:"background-preview",style:il({backgroundImage:`url(${a.selectedFile})`})},null,4)):we("",!0)])]),P("div",hc,[a.selectedFile?(ee(),te("span",{key:0,class:"mw-action-buttons-background-circle-on-hover",onClick:t[1]||(t[1]=(...i)=>o.removeBackgroundImage&&o.removeBackgroundImage(...i)),"data-tip":"Remove background","data-tipposition":"top-right"},bc)):we("",!0)])])])}const kc=ze(cc,[["render",pc]]);const Sc={props:{file:{type:String,default:""},name:{type:String,default:"file"}},data(){return{showPicker:!1,iconDelete:!1,selectedFile:this.$props.file}},mounted(){mw.top().app.on("mw.elementStyleEditor.closeAllOpenedMenus",()=>{this.closePicker()})},watch:{file(e){this.selectedFile=e}},methods:{changefile(e){this.selectedFile=e.hex,this.$props.file=e.hex},triggerChangeSelectedFile(){this.$props.file=this.selectedFile,this.$emit("change",this.$props.file)},triggerChange(){this.$emit("change",this.$props.file)},removeBackgroundImage(){this.selectedFile="",this.$props.file="",this.$emit("change",this.$props.file)},closePicker(){this.showPicker=!1},togglePicker(){mw.filePickerDialog(e=>{this.selectedFile=e,this.$props.file=e,this.$emit("change",this.$props.file)}),this.showPicker=!this.showPicker}}},wc={class:"d-inline-flex"},Cc=P("i",{class:"mdi mdi-delete"},null,-1),xc=[Cc];function Vc(e,t,n,l,a,o){return ee(),te("div",wc,[ne(P("input",{type:"hidden",ref:"filepickerinput","onUpdate:modelValue":t[0]||(t[0]=i=>a.selectedFile=i),onInput:t[1]||(t[1]=(...i)=>o.triggerChangeSelectedFile&&o.triggerChangeSelectedFile(...i))},null,544),[[je,a.selectedFile]]),a.selectedFile?(ee(),te("button",{key:0,type:"button",class:"btn btn-link btn-sm",onClick:t[2]||(t[2]=i=>o.removeBackgroundImage())},xc)):we("",!0),a.selectedFile?(ee(),te("div",{key:1,class:"file-picker-badge",onClick:t[3]||(t[3]=(...i)=>o.togglePicker&&o.togglePicker(...i)),style:il({backgroundImage:"url("+a.selectedFile+")"})},null,4)):we("",!0),a.selectedFile?we("",!0):(ee(),te("div",{key:2,class:"file-picker-badge",onClick:t[4]||(t[4]=(...i)=>o.togglePicker&&o.togglePicker(...i))}))])}const _c=ze(Sc,[["render",Vc]]),Ic={components:{ColorPicker:pa,FontPicker:Ia,Dropdown:_a,Input:Va,Slider:ka,FilePicker:_c,ImagePicker:kc,DropdownSmall:gn},data(){return{showBackground:!1,backgroundPositionOptions:[{key:null,value:"None"},{key:"0% 0%",value:"Left Top"},{key:"50% 0%",value:"Center Top"},{key:"100% 0%",value:"Right Top"},{key:"0% 50%",value:"Left Center"},{key:"50% 50%",value:"Center Center"},{key:"100% 50%",value:"Right Center"},{key:"0% 100%",value:"Left Bottom"},{key:"50% 100%",value:"Center Bottom"},{key:"100% 100%",value:"Right Bottom"}],backgroundRepeatOptions:[{key:null,value:"None"},{key:"repeat",value:"Repeat"},{key:"no-repeat",value:"No Repeat"},{key:"repeat-x",value:"Repeat Horizontally"},{key:"repeat-y",value:"Repeat Vertically"}],backgroundClipOptions:[{key:null,value:"None"},{key:"border-box",value:"Border Box"},{key:"content-box",value:"Content Box"},{key:"text",value:"Text"}],backgroundSizeOptions:[{key:"auto",value:"Auto"},{key:"contain",value:"Fit"},{key:"cover",value:"Cover"},{key:"100% 100%",value:"Scale"}],activeNode:null,isReady:!1,backgroundImage:null,backgroundColor:null,backgroundPosition:null,backgroundRepeat:null,backgroundSize:"auto",backgroundImageUrl:null,backgroundClip:null}},methods:{toggleBackground:function(){this.showBackground=!this.showBackground,this.emitter.emit("element-style-editor-show","background")},resetAllProperties:function(){this.backgroundImage=null,this.backgroundImageUrl=null,this.backgroundColor=null,this.backgroundPosition=null,this.backgroundRepeat=null,this.backgroundSize="auto",this.backgroundClip=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBackground(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBackground:function(e){if(!(!e||!e.get)){var t=e.get.background();t.image&&t.image.indexOf("url(")!==-1&&(this.backgroundImageUrl=t.image.replace("url(","").replace(")",""),this.backgroundImageUrl=this.backgroundImageUrl.replace(/\"/g,"")),t.size?this.backgroundSize=t.size:this.backgroundSize="auto",this.backgroundImage=t.image,this.backgroundColor=t.color,this.backgroundPosition=t.position,this.backgroundRepeat=t.repeat,this.backgroundClip=t.clip}},handleBackgroundColorChange:function(e){typeof e=="string"&&(this.backgroundColor=e)},handleBackgroundImageChange:function(e){var t=e;e&&e!=""&&e!="none"&&e!="inherit"&&e!="initial"?(this.backgroundImageUrl=e,e.indexOf("url(")===-1&&(t="url("+e+")")):this.backgroundImageUrl="",t==null&&(t="none"),this.backgroundImage=t},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="background"&&(this.showBackground=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{backgroundImage:function(e,t){this.applyPropertyToActiveNode("backgroundImage",e)},backgroundClip:function(e,t){e=="text"?(this.applyPropertyToActiveNode("backgroundClip","text"),this.applyPropertyToActiveNode("-webkitBackgroundClip","text"),this.applyPropertyToActiveNode("color","rgba(0,0,0,0)")):(this.applyPropertyToActiveNode("backgroundClip",e),this.applyPropertyToActiveNode("-webkitBackgroundClip",e),this.applyPropertyToActiveNode("color",""))},backgroundColor:function(e,t){this.applyPropertyToActiveNode("backgroundColor",e)},backgroundPosition:function(e,t){this.applyPropertyToActiveNode("backgroundPosition",e)},backgroundRepeat:function(e,t){this.applyPropertyToActiveNode("backgroundRepeat",e)},backgroundSize:function(e,t){this.applyPropertyToActiveNode("backgroundSize",e)}}},Tc={class:"d-flex"},Pc={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Ac=P("path",{d:"M12.2,3.9c4.5,0,8.1,3.6,8.1,8.1s-3.6,8.1-8.1,8.1S4.1,16.5,4.1,12S7.7,3.9,12.2,3.9"},null,-1),Bc=[Ac],Rc={key:0};function Ec(e,t,n,l,a,o){const i=ke("ColorPicker"),s=ke("ImagePicker"),u=ke("DropdownSmall");return ee(),te(oe,null,[P("div",Tc,[(ee(),te("svg",Pc,Bc)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showBackground}]),onClick:t[0]||(t[0]=(...c)=>o.toggleBackground&&o.toggleBackground(...c))}," Background ",2)]),a.showBackground?(ee(),te("div",Rc,[r(i,{modelValue:a.backgroundColor,"onUpdate:modelValue":t[1]||(t[1]=c=>a.backgroundColor=c),color:a.backgroundColor,label:"Color",onChange:o.handleBackgroundColorChange},null,8,["modelValue","color","onChange"]),r(s,{label:"Image",modelValue:a.backgroundImage,"onUpdate:modelValue":t[2]||(t[2]=c=>a.backgroundImage=c),file:a.backgroundImageUrl,onChange:o.handleBackgroundImageChange},null,8,["modelValue","file","onChange"]),r(u,{modelValue:a.backgroundSize,"onUpdate:modelValue":t[3]||(t[3]=c=>a.backgroundSize=c),options:a.backgroundSizeOptions,label:"Size"},null,8,["modelValue","options"]),r(u,{modelValue:a.backgroundRepeat,"onUpdate:modelValue":t[4]||(t[4]=c=>a.backgroundRepeat=c),options:a.backgroundRepeatOptions,label:"Repeat"},null,8,["modelValue","options"]),r(u,{modelValue:a.backgroundPosition,"onUpdate:modelValue":t[5]||(t[5]=c=>a.backgroundPosition=c),options:a.backgroundPositionOptions,label:"Position"},null,8,["modelValue","options"]),r(u,{modelValue:a.backgroundClip,"onUpdate:modelValue":t[6]||(t[6]=c=>a.backgroundClip=c),options:a.backgroundClipOptions,label:"Clip"},null,8,["modelValue","options"])])):we("",!0)],64)}const Lc=ze(Ic,[["render",Ec]]),$c={props:{modelValue:Object},data(){return{selectedBorderRadius:{borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""}}},watch:{modelValue(e){e&&(this.selectedBorderRadius={...e})}},methods:{updateValues(){this.$emit("update:modelValue",this.selectedBorderRadius)}}},Mc={class:"d-flex justify-content-center align-items-center"},Fc={class:"rounded-corners my-5"},Dc={class:"s-field-content"},Oc={class:"mw-field mw-field-flat"},Nc={class:"mw-multiple-fields"},zc={class:"mw-field mw-field-flat"},Hc=P("span",{class:"mw-field mw-field-flat-prepend order-2"},[P("i",{class:"angle angle-top-left"})],-1),jc={class:"mw-field mw-field-flat"},Uc=P("span",{class:"mw-field mw-field-flat-prepend"},[P("i",{class:"angle angle-top-right"})],-1),Gc={class:"mw-field mw-field-flat"},Wc={class:"mw-multiple-fields"},Yc={class:"mw-field mw-field-flat"},Kc=P("span",{class:"mw-field mw-field-flat-prepend order-2"},[P("i",{class:"angle angle-bottom-left"})],-1),qc={class:"mw-field mw-field-flat"},Xc=P("span",{class:"mw-field mw-field-flat-prepend"},[P("i",{class:"angle angle-bottom-right"})],-1);function Zc(e,t,n,l,a,o){return ee(),te("div",Mc,[P("div",Fc,[P("div",Dc,[P("div",Oc,[P("div",Nc,[P("div",zc,[ne(P("input",{type:"number",class:"regular order-1 text-center",name:"borderTopLeftRadius",autocomplete:"off","onUpdate:modelValue":t[0]||(t[0]=i=>a.selectedBorderRadius.borderTopLeftRadius=i),onInput:t[1]||(t[1]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderTopLeftRadius]]),Hc]),P("div",jc,[Uc,ne(P("input",{class:"regular text-center",type:"number",name:"borderTopRightRadius",autocomplete:"off","onUpdate:modelValue":t[2]||(t[2]=i=>a.selectedBorderRadius.borderTopRightRadius=i),onInput:t[3]||(t[3]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderTopRightRadius]])])])]),P("div",Gc,[P("div",Wc,[P("div",Yc,[ne(P("input",{class:"regular order-1 text-center",type:"number",name:"borderBottomLeftRadius",autocomplete:"off","onUpdate:modelValue":t[4]||(t[4]=i=>a.selectedBorderRadius.borderBottomLeftRadius=i),onInput:t[5]||(t[5]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderBottomLeftRadius]]),Kc]),P("div",qc,[Xc,ne(P("input",{class:"regular text-center",type:"number",name:"borderBottomRightRadius",autocomplete:"off","onUpdate:modelValue":t[6]||(t[6]=i=>a.selectedBorderRadius.borderBottomRightRadius=i),onInput:t[7]||(t[7]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderBottomRightRadius]])])])])])])])}const ci=ze($c,[["render",Zc]]);const Jc={components:{Dropdown:_a,Input:Va,FontPicker:Ia,ColorPicker:pa,Slider:ka,DropdownSmall:gn,SliderSmall:Ta,BorderRadius:ci},data(){return{showBorder:!1,activeNode:null,isReady:!1,borderPositionOptions:[{key:"all",value:"All"},{key:"top",value:"Top"},{key:"right",value:"Right"},{key:"bottom",value:"Bottom"},{key:"left",value:"Left"}],borderStylesOptions:[{key:"none",value:"None"},{key:"solid",value:"Solid"},{key:"dotted",value:"Dotted"},{key:"dashed",value:"Dashed"},{key:"double",value:"Double"},{key:"groove",value:"Groove"},{key:"ridge",value:"Ridge"},{key:"inset",value:"Inset"},{key:"outset",value:"Outset"}],borderPosition:null,borderSize:null,borderColor:null,borderImage:null,borderImageUrl:null,borderStyle:null,borderRadius:{borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""},borderTopLeftRadius:null,borderTopRightRadius:null,borderBottomRightRadius:null,borderBottomLeftRadius:null}},methods:{toggleBorder:function(){this.showBorder=!this.showBorder,this.emitter.emit("element-style-editor-show","border")},handleBorderColorChange(e){typeof e=="string"&&(this.borderColor=e)},resetAllProperties:function(){this.borderPosition=null,this.borderSize=null,this.borderColor=null,this.borderStyle=null,this.borderRadius={borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""},this.borderTopLeftRadius=null,this.borderTopRightRadius=null,this.borderBottomRightRadius=null,this.borderBottomLeftRadius=null,this.borderImageUrl=null,this.borderImage=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBorder(t),this.populateCssBorderRadius(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBorder:function(e){if(!(!e||!e.get)){var t=e.get.border(!0),n={};for(var l in t)if(t[l].width!==0){n=t[l];break}var a=n.width||0,o=n.color||"rgba(0,0,0,1)",i=n.style||"none";console.log("borderSize",a),console.log("borderColor",o),console.log("borderStyle",i),this.borderSize=a,this.borderColor=o,this.borderStyle=i,this.borderPosition="all"}},populateCssBorderRadius:function(e){if(!(!e||!e.get)){var t=e.get.radius(!0);this.borderTopLeftRadius=t.tl,this.borderTopRightRadius=t.tr,this.borderBottomRightRadius=t.br,this.borderBottomLeftRadius=t.bl,this.borderRadius={borderTopLeftRadius:t.tl,borderTopRightRadius:t.tr,borderBottomLeftRadius:t.bl,borderBottomRightRadius:t.br}}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="border"&&(this.showBorder=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{borderRadius:function(e,t){var n="";e.borderTopLeftRadius?n+=e.borderTopLeftRadius+"px ":n+="0px ",e.borderTopRightRadius?n+=e.borderTopRightRadius+"px ":n+="0px ",e.borderBottomRightRadius?n+=e.borderBottomRightRadius+"px ":n+="0px ",e.borderBottomLeftRadius?n+=e.borderBottomLeftRadius+"px ":n+="0px ",this.applyPropertyToActiveNode("border-radius",n)},borderImageUrl:function(e,t){var n="";n+="url("+e+") ",n+=this.borderSize+" ",n+=" space ",this.borderImage=n},borderImage:function(e,t){this.applyPropertyToActiveNode("border-image",e)},borderPosition:function(e,t){this.applyPropertyToActiveNode("borderPosition",e)},borderSize:function(e,t){this.applyPropertyToActiveNode("border-width",e+"px")},borderColor:function(e,t){this.applyPropertyToActiveNode("border-color",e)},borderStyle:function(e,t){this.applyPropertyToActiveNode("border-style",e)}}},Qc={class:"d-flex"},ed={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},td=P("path",{d:"M15,21h2v-2h-2 M19,21h2v-2h-2 M7,21h2v-2H7 M11,21h2v-2h-2 M19,17h2v-2h-2 M19,13h2v-2h-2 M3,3v18h2V5h16V3 M19,9h2V7h-2"},null,-1),nd=[td],ld={key:0};function ad(e,t,n,l,a,o){const i=ke("DropdownSmall"),s=ke("SliderSmall"),u=ke("ColorPicker");return ee(),te(oe,null,[P("div",Qc,[(ee(),te("svg",ed,nd)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showBorder}]),onClick:t[0]||(t[0]=(...c)=>o.toggleBorder&&o.toggleBorder(...c))}," Border ",2)]),a.showBorder?(ee(),te("div",ld,[r(i,{modelValue:a.borderStyle,"onUpdate:modelValue":t[1]||(t[1]=c=>a.borderStyle=c),options:a.borderStylesOptions,label:"Style"},null,8,["modelValue","options"]),r(i,{modelValue:a.borderPosition,"onUpdate:modelValue":t[2]||(t[2]=c=>a.borderPosition=c),options:a.borderPositionOptions,label:"Position"},null,8,["modelValue","options"]),r(s,{label:"Size",modelValue:a.borderSize,"onUpdate:modelValue":t[3]||(t[3]=c=>a.borderSize=c),min:0,max:30,step:1},null,8,["modelValue"]),r(u,{modelValue:a.borderColor,"onUpdate:modelValue":t[4]||(t[4]=c=>a.borderColor=c),color:a.borderColor,label:"Color",onChange:o.handleBorderColorChange},null,8,["modelValue","color","onChange"])])):we("",!0)],64)}const od=ze(Jc,[["render",ad]]);const id={data(){return{nodeTagName:null,displayNodeInfo:null,displayDomTree:null,activeNode:null,domTree:null,isReady:!1,currentCanvasDocument:!1}},methods:{toggleDomTree:function(){this.displayDomTree=!this.displayDomTree,this.displayDomTree&&this.populateDomTree(this.activeNode)},populateStyleEditor:function(e){e&&e&&e.nodeType===1&&(this.isReady=!1,this.displayNodeInfo=!1,this.activeNode=e,this.populateSelectedNode(e),this.populateDomTree(e),setTimeout(()=>{this.isReady=!0},100))},populateSelectedNode:function(e){if(this.nodeTagName=e.tagName,this.domTree){const t=this.domTree.getNodeIconAndTitle(e);this.displayNodeInfo=t.icon+t.title}else e.id?this.displayNodeInfo=e.tagName:this.displayNodeInfo=e.tagName},populateDomTree:function(e){this.displayDomTree&&((!this.domTree||!this.currentCanvasDocument||this.currentCanvasDocument!==mw.top().app.canvas.getDocument())&&(this.currentCanvasDocument=mw.top().app.canvas.getDocument(),this.domTree=new mw.DomTree({element:"#domtree",resizable:!0,targetDocument:e.ownerDocument,canSelect:function(t,n){mw.top().app.liveEdit.canBeElement(t);var l=mw.top().app.liveEdit.liveEditHelpers.targetIsInacesibleModule(t);return!l},onHover:function(t,n,l,a){},onSelect:(t,n,l,a)=>{mw.top().app.dispatch("mw.elementStyleEditor.selectNode",l),l.ownerDocument.defaultView.mw&&l.ownerDocument.defaultView.mw.tools.scrollTo(l,!1,100)}})),this.domTree.select(e))}},mounted(){mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})}},sd={class:"well"},rd=P("div",{id:"domtree",style:{"margin-block-end":"15px"}},null,-1),ud=[rd],cd={class:"d-flex align-items-center justify-content-between gap-2"},dd=P("label",{class:"live-edit-label mb-0"},"Selected element:",-1),vd=["innerHTML"];function fd(e,t,n,l,a,o){return ne((ee(),te("div",null,[P("div",sd,[ne(P("div",null,ud,512),[[Pe,a.displayDomTree]]),P("div",cd,[dd,P("button",{type:"button",class:Le([{"btn-dark":a.displayDomTree,"btn-outline-dark":!a.displayDomTree},"btn btn-sm"]),onClick:t[0]||(t[0]=(...i)=>o.toggleDomTree&&o.toggleDomTree(...i)),innerHTML:a.displayNodeInfo},null,10,vd)])])],512)),[[Pe,a.displayNodeInfo]])}const md=ze(id,[["render",fd]]),gd={components:{DropdownSmall:gn},data(){return{showContainer:!1,activeContainerNode:null,isReady:!1,hasContainer:!1,containerType:null}},methods:{toggleContainer:function(){this.showContainer=!this.showContainer,this.emitter.emit("element-style-editor-show","container")},resetAllProperties:function(){this.hasContainer=null,this.containerType=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){this.isReady=!1,this.resetAllProperties();var t=mw.tools.firstParentOrCurrentWithAnyOfClasses(e,["container","container-fluid"]);t&&mw.tools.isEditable(t)&&t&&(this.hasContainer=!0,this.activeContainerNode=t,this.populateCssContainerForNode(t)),setTimeout(()=>{this.isReady=!0},100)}},populateCssContainerForNode:function(e){e.classList&&e.classList.contains("container-fluid")?this.containerType="container-fluid":this.containerType="container"},applyClassToActiveContainerNode:function(e){this.isReady&&this.activeContainerNode&&(e==="container-fluid"?(mw.top().app.dispatch("mw.elementStyleEditor.removeClassFromNode",{node:this.activeContainerNode,class:"container"}),mw.top().app.dispatch("mw.elementStyleEditor.addClassToNode",{node:this.activeContainerNode,class:"container-fluid"})):(mw.top().app.dispatch("mw.elementStyleEditor.removeClassFromNode",{node:this.activeContainerNode,class:"container-fluid"}),mw.top().app.dispatch("mw.elementStyleEditor.addClassToNode",{node:this.activeContainerNode,class:"container"})))}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="container"&&(this.showContainer=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{containerType:function(e,t){this.applyClassToActiveContainerNode(e)}}},hd={key:0},yd={class:"mb-4 d-flex"},bd=P("svg",{fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},[P("path",{fill:"currentColor",d:"M19,17H5V7H19M19,5H5A2,2 0 0,0 3,7V17A2,2 0 0,0 5,19H19A2,2 0 0,0 21,17V7C21,5.89 20.1,5 19,5Z"})],-1),pd={key:0},kd={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center flex-wrap gap-2",id:"field-conatiner-type"},Sd=P("label",{class:"live-edit-label px-0 col-4"},"Container",-1),wd={class:"s-field-content"},Cd={class:"form-check"},xd=P("span",{class:"form-check-label"},"Container",-1),Vd={class:"form-check"},_d=P("span",{class:"form-check-label"},"Fluid",-1);function Id(e,t,n,l,a,o){return a.hasContainer?(ee(),te("div",hd,[P("div",yd,[bd,P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showContainer}]),onClick:t[0]||(t[0]=(...i)=>o.toggleContainer&&o.toggleContainer(...i))}," Container ",2)]),a.showContainer?(ee(),te("div",pd,[P("div",kd,[Sd,P("div",wd,[P("label",Cd,[ne(P("input",{class:"form-check-input",type:"radio",name:"containerType",value:"container","onUpdate:modelValue":t[1]||(t[1]=i=>a.containerType=i)},null,512),[[co,a.containerType]]),xd]),P("label",Vd,[ne(P("input",{class:"form-check-input",type:"radio",name:"containerType",value:"container-fluid","onUpdate:modelValue":t[2]||(t[2]=i=>a.containerType=i)},null,512),[[co,a.containerType]]),_d])])])])):we("",!0)])):we("",!0)}const Td=ze(gd,[["render",Id]]);class El{static previewAnimation(t,n){var l=t.ownerDocument.defaultView,a=l.mw.tools.generateSelectorForNode(t),o=l.mw.id("animation"),i=Object.assign({selector:a,id:o},n);l.mw.__animate(i)}static removeAnimations(t){var n=t.ownerDocument.defaultView,l=n.mw,a=n.mw.tools.generateSelectorForNode(t),o=n.mw.__pageAnimations.find(function(u){return u.selector===a});if(o){var i=o,s=Object.assign({},i);l.__pageAnimations.splice(l.__pageAnimations.indexOf(i),1),Array.from(l.doc.querySelectorAll(s.selector)).forEach(function(u){if(u.$$mwAnimations&&u.$$mwAnimations.length){var c=u.$$mwAnimations.findIndex(function(d){return d.id===i.id});c>-1&&u.$$mwAnimations.splice(c,1)}})}}static setAnimation(t,n){var l=t.ownerDocument.defaultView,a=l.mw.tools.generateSelectorForNode(t),o=l.mw.id("animation");t.$$mwAnimations||(t.$$mwAnimations=[]),this.removeAnimations(t),t.$$mwAnimations||(t.$$mwAnimations=[]);var i=Object.assign({selector:a,id:o},n);return t.$$mwAnimations.push(i),l.mw.__pageAnimations.push(i),l.mw.__animate(i),mw.top().app&&mw.top().app.registerChange(t),i}static supportsAnimations(t){return!!(t.ownerDocument&&t.ownerDocument.defaultView&&t.ownerDocument.defaultView.mw&&t.ownerDocument.defaultView.mw.__animate&&t.ownerDocument.defaultView.mw.tools.isEditable(t))}static getAnimation(t){var n=t.ownerDocument.defaultView;if(n.mw.__pageAnimations){var l=n.mw.tools.generateSelectorForNode(t),a=n.mw.__pageAnimations.find(function(o){return o.selector===l});if(a)return a}return!1}}const Pd={components:{DropdownSmall:gn,SliderSmall:Ta},data(){return{showAnimations:!1,activeNode:null,isReady:!1,selectedAnimation:!1,selectedAnimationSpeed:!1,selectedAnimationWhenAppear:!1,supportsAnimations:!1,animationsAppear:[{key:null,value:"None"},{key:"onAppear",value:"When element appears on screen"},{key:"onHover",value:"When mouse is over"},{key:"onClick",value:"When element is clicked"}],animations:[{key:null,value:"None"},{key:"bounce",value:"Bounce"},{key:"flash",value:"Flash"},{key:"pulse",value:"Pulse"},{key:"rubberBand",value:"Rubber Band"},{key:"shakeX",value:"Shake X"},{key:"shakeY",value:"Shake Y"},{key:"headShake",value:"Head Shake"},{key:"swing",value:"Swing"},{key:"tada",value:"Tada"},{key:"wobble",value:"Wobble"},{key:"jello",value:"Jello"},{key:"heartBeat",value:"Heart Beat"},{key:"flip",value:"Flip"},{key:"flipInX",value:"Flip In X"},{key:"flipInY",value:"Flip In Y"},{key:"hinge",value:"Hinge"},{key:"jackInTheBox",value:"Jack In The Box"},{key:"rollIn",value:"Roll In"},{key:"backInDown",value:"Back In Down"},{key:"backInLeft",value:"Back In Left"},{key:"backInRight",value:"Back In Right"},{key:"backInUp",value:"Back In Up"},{key:"bounceIn",value:"Bounce In"},{key:"bounceInDown",value:"Bounce In Down"},{key:"bounceInLeft",value:"Bounce In Left"},{key:"bounceInRight",value:"Bounce In Right"},{key:"bounceInUp",value:"Bounce In Up"},{key:"fadeIn",value:"Fade In"},{key:"fadeInDown",value:"Fade In Down"},{key:"fadeInDownBig",value:"Fade In Down Big"},{key:"fadeInLeft",value:"Fade In Left"},{key:"fadeInLeftBig",value:"Fade In Left Big"},{key:"fadeInRight",value:"Fade In Right"},{key:"fadeInRightBig",value:"Fade In Right Big"},{key:"fadeInUp",value:"Fade In Up"},{key:"fadeInUpBig",value:"Fade In Up Big"},{key:"fadeInTopLeft",value:"Fade In Top Left"},{key:"fadeInTopRight",value:"Fade In Top Right"},{key:"fadeInBottomLeft",value:"Fade In Bottom Left"},{key:"fadeInBottomRight",value:"Fade In Bottom Right"},{key:"lightSpeedInRight",value:"LightSpeed In Right"},{key:"lightSpeedInLeft",value:"LightSpeed In Left"},{key:"rotateIn",value:"Rotate In"},{key:"rotateInDownLeft",value:"Rotate In Down Left"},{key:"rotateInDownRight",value:"Rotate In Down Right"},{key:"zoomIn",value:"Zoom In"},{key:"zoomInDown",value:"Zoom In Down"},{key:"zoomInLeft",value:"Zoom In Left"},{key:"zoomInRight",value:"Zoom In Right"},{key:"zoomInUp",value:"Zoom In Up"},{key:"slideInDown",value:"Slide In Down"},{key:"slideInLeft",value:"Slide In Left"},{key:"slideInRight",value:"Slide In Right"},{key:"slideInUp",value:"Slide In Up"}]}},methods:{toggleAnimations:function(){this.showAnimations=!this.showAnimations,this.emitter.emit("element-style-editor-show","animations")},resetAllProperties:function(){this.selectedAnimation=null,this.selectedAnimationSpeed=1,this.selectedAnimationWhenAppear=null},populateActiveAnimation:function(e){var t=El.getAnimation(e);if(!t){this.resetAllProperties();return}t.animation?this.selectedAnimation=t.animation:this.selectedAnimation=null,t.speed?this.selectedAnimationSpeed=t.speed:this.selectedAnimationSpeed=null,t.when?this.selectedAnimationWhenAppear=t.when:this.selectedAnimationWhenAppear=null},setAnimation:function(){if(this.activeNode){var e=this.selectedAnimationSpeed?this.selectedAnimationSpeed:1,t=this.selectedAnimationWhenAppear?this.selectedAnimationWhenAppear:"onAppear",n={animation:this.selectedAnimation,speed:e,when:t};mw.log(n),El.setAnimation(this.activeNode,n)}},populateStyleEditor:function(e){e&&e&&e.nodeType===1&&(this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.supportsAnimations=El.supportsAnimations(e),this.populateActiveAnimation(e),setTimeout(()=>{this.isReady=!0},100))}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="animations"&&(this.showAnimations=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{e.ownerDocument,e.ownerDocument.defaultView,this.populateStyleEditor(e)})},watch:{selectedAnimation:function(e){this.isReady&&this.setAnimation()},selectedAnimationSpeed:function(e){this.isReady&&this.setAnimation()},selectedAnimationWhenAppear:function(e){this.isReady&&this.setAnimation()}}},Ad={key:0},Bd={class:"mb-4 d-flex"},Rd=P("svg",{fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg",version:"1.1",viewBox:"0 0 24 24"},[P("path",{fill:"currentColor",d:"M4,2A2,2 0 0,0 2,4V14H4V4H14V2H4M8,6A2,2 0 0,0 6,8V18H8V8H18V6H8M20,12V20H12V12H20M20,10H12A2,2 0 0,0 10,12V20A2,2 0 0,0 12,22H20A2,2 0 0,0 22,20V12A2,2 0 0,0 20,10M14,13V19L18,16L14,13Z"})],-1),Ed={key:0},Ld={key:0};function $d(e,t,n,l,a,o){const i=ke("DropdownSmall"),s=ke("SliderSmall");return a.supportsAnimations?(ee(),te("div",Ad,[P("div",Bd,[Rd,P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showAnimations}]),onClick:t[0]||(t[0]=(...u)=>o.toggleAnimations&&o.toggleAnimations(...u))}," Animations ",2)]),a.showAnimations?(ee(),te("div",Ed,[r(i,{modelValue:a.selectedAnimation,"onUpdate:modelValue":t[1]||(t[1]=u=>a.selectedAnimation=u),options:a.animations,label:"Animation"},null,8,["modelValue","options"]),a.selectedAnimation?(ee(),te("div",Ld,[r(i,{modelValue:a.selectedAnimationWhenAppear,"onUpdate:modelValue":t[2]||(t[2]=u=>a.selectedAnimationWhenAppear=u),options:a.animationsAppear,label:"When"},null,8,["modelValue","options"]),r(s,{modelValue:a.selectedAnimationSpeed,"onUpdate:modelValue":t[3]||(t[3]=u=>a.selectedAnimationSpeed=u),label:"Speed",min:.1,max:5,step:.1,unit:"s"},null,8,["modelValue"])])):we("",!0)])):we("",!0)])):we("",!0)}const Md=ze(Pd,[["render",$d]]),Fd={components:{DropdownSmall:gn},data(){return{activeGridNode:null,showGridSettings:!1,isReady:!1,hasGrid:!1,colOptionsDesktop:[{key:null,value:"None"},{key:"col-1",value:"col-1"},{key:"col-2",value:"col-2"},{key:"col-3",value:"col-3"},{key:"col-4",value:"col-4"},{key:"col-5",value:"col-5"},{key:"col-6",value:"col-6"},{key:"col-7",value:"col-7"},{key:"col-8",value:"col-8"},{key:"col-9",value:"col-9"},{key:"col-10",value:"col-10"},{key:"col-11",value:"col-11"},{key:"col-12",value:"col-12"},{key:"col-lg-1",value:"col-lg-1"},{key:"col-lg-2",value:"col-lg-2"},{key:"col-lg-3",value:"col-lg-3"},{key:"col-lg-4",value:"col-lg-4"},{key:"col-lg-5",value:"col-lg-5"},{key:"col-lg-6",value:"col-lg-6"},{key:"col-lg-7",value:"col-lg-7"},{key:"col-lg-8",value:"col-lg-8"},{key:"col-lg-9",value:"col-lg-9"},{key:"col-lg-10",value:"col-lg-10"},{key:"col-lg-11",value:"col-lg-11"},{key:"col-lg-12",value:"col-lg-12"}],colOptionsTablet:[{key:null,value:"None"},{key:"col-md-1",value:"col-md-1"},{key:"col-md-2",value:"col-md-2"},{key:"col-md-3",value:"col-md-3"},{key:"col-md-4",value:"col-md-4"},{key:"col-md-5",value:"col-md-5"},{key:"col-md-6",value:"col-md-6"},{key:"col-md-7",value:"col-md-7"},{key:"col-md-8",value:"col-md-8"},{key:"col-md-9",value:"col-md-9"},{key:"col-md-10",value:"col-md-10"},{key:"col-md-11",value:"col-md-11"},{key:"col-md-12",value:"col-md-12"},{key:"col-sm-1",value:"col-sm-1"},{key:"col-sm-2",value:"col-sm-2"},{key:"col-sm-3",value:"col-sm-3"},{key:"col-sm-4",value:"col-sm-4"},{key:"col-sm-5",value:"col-sm-5"},{key:"col-sm-6",value:"col-sm-6"},{key:"col-sm-7",value:"col-sm-7"},{key:"col-sm-8",value:"col-sm-8"},{key:"col-sm-9",value:"col-sm-9"},{key:"col-sm-10",value:"col-sm-10"},{key:"col-sm-11",value:"col-sm-11"},{key:"col-sm-12",value:"col-sm-12"}],colOptionsMobile:[{key:null,value:"None"},{key:"col-xs-1",value:"col-xs-1"},{key:"col-xs-2",value:"col-xs-2"},{key:"col-xs-3",value:"col-xs-3"},{key:"col-xs-4",value:"col-xs-4"},{key:"col-xs-5",value:"col-xs-5"},{key:"col-xs-6",value:"col-xs-6"},{key:"col-xs-7",value:"col-xs-7"},{key:"col-xs-8",value:"col-xs-8"},{key:"col-xs-9",value:"col-xs-9"},{key:"col-xs-10",value:"col-xs-10"},{key:"col-xs-11",value:"col-xs-11"},{key:"col-xs-12",value:"col-xs-12"}],selectedColDesktop:"",selectedColTablet:"",selectedColMobile:""}},methods:{toggleGridSettings:function(){this.showGridSettings=!this.showGridSettings,this.emitter.emit("element-style-editor-show","grid")},resetAllProperties:function(){this.hasGrid=null},populateStyleEditor:function(e){if(e&&e.nodeType===1){this.isReady=!1,this.resetAllProperties();for(const t of this.colOptionsDesktop)if(e.classList.contains(t.key)){this.hasGrid=!0,this.activeGridNode=e,this.selectedColDesktop=t.key;break}for(const t of this.colOptionsTablet)if(e.classList.contains(t.key)){this.hasGrid=!0,this.activeGridNode=e,this.selectedColTablet=t.key;break}for(const t of this.colOptionsMobile)if(e.classList.contains(t.key)){this.hasGrid=!0,this.activeGridNode=e,this.selectedColMobile=t.key;break}setTimeout(()=>{this.isReady=!0},100)}},applyClassToActiveGridNode:function(e){if(this.isReady&&this.activeGridNode){for(const n of this.colOptionsDesktop)this.activeGridNode.classList.remove(n.key);for(const n of this.colOptionsTablet)this.activeGridNode.classList.remove(n.key);for(const n of this.colOptionsMobile)this.activeGridNode.classList.remove(n.key);const t=[...this.colOptionsDesktop,...this.colOptionsTablet,...this.colOptionsMobile].find(n=>n.key===e);t&&this.activeGridNode.classList.add(t.key),mw.top().app&&mw.top().app.registerChangedState(this.activeGridNode)}}},mounted(){mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)}),this.emitter.on("element-style-editor-show",e=>{e!=="grid"&&(this.showGridSettings=!1)})},watch:{selectedColDesktop:function(e,t){this.applyClassToActiveGridNode(e)},selectedColTablet:function(e,t){this.applyClassToActiveGridNode(e)},selectedColMobile:function(e,t){this.applyClassToActiveGridNode(e)}}},Dd={key:0},Od={class:"mb-4 d-flex"},Nd=P("svg",{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",width:"24",height:"24",viewBox:"0 0 24 24"},[P("path",{d:"M4,2H20A2,2 0 0,1 22,4V20A2,2 0 0,1 20,22H4C2.92,22 2,21.1 2,20V4A2,2 0 0,1 4,2M4,4V11H11V4H4M4,20H11V13H4V20M20,20V13H13V20H20M20,4H13V11H20V4Z"})],-1),zd={key:0},Hd={class:"form-control-live-edit-label-wrapper d-flex align-items-center gap-2"},jd=P("label",{class:"live-edit-label px-0 col-4"},"Desktop",-1),Ud=P("i",{class:"mdi mdi-monitor col-2",style:{"font-size":"24px"}},null,-1),Gd={class:"col-6"},Wd={class:"form-control-live-edit-label-wrapper d-flex align-items-center gap-2"},Yd=P("label",{class:"live-edit-label px-0 col-4"},"Tablet",-1),Kd=P("i",{class:"mdi mdi-tablet col-2",style:{"font-size":"24px"}},null,-1),qd={class:"col-6"},Xd={class:"form-control-live-edit-label-wrapper d-flex align-items-center gap-2"},Zd=P("label",{class:"live-edit-label px-0 col-4"},"Mobile",-1),Jd=P("i",{class:"mdi mdi-cellphone col-2",style:{"font-size":"24px"}},null,-1),Qd={class:"col-6"};function ev(e,t,n,l,a,o){const i=ke("DropdownSmall");return a.hasGrid?(ee(),te("div",Dd,[P("div",Od,[Nd,P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showGridSettings}]),onClick:t[0]||(t[0]=(...s)=>o.toggleGridSettings&&o.toggleGridSettings(...s))}," Grid ",2)]),a.showGridSettings?(ee(),te("div",zd,[P("div",Hd,[jd,Ud,P("div",Gd,[r(i,{options:a.colOptionsDesktop,modelValue:a.selectedColDesktop,"onUpdate:modelValue":t[1]||(t[1]=s=>a.selectedColDesktop=s)},null,8,["options","modelValue"])])]),P("div",Wd,[Yd,Kd,P("div",qd,[r(i,{options:a.colOptionsTablet,modelValue:a.selectedColTablet,"onUpdate:modelValue":t[2]||(t[2]=s=>a.selectedColTablet=s)},null,8,["options","modelValue"])])]),P("div",Xd,[Zd,Jd,P("div",Qd,[r(i,{options:a.colOptionsMobile,modelValue:a.selectedColMobile,"onUpdate:modelValue":t[3]||(t[3]=s=>a.selectedColMobile=s)},null,8,["options","modelValue"])])])])):we("",!0)])):we("",!0)}const tv=ze(Fd,[["render",ev]]);var nv=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function lv(e,t,n){return n={path:t,exports:{},require:function(l,a){return av(l,a??n.path)}},e(n,n.exports),n.exports}function av(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}var ov=lv(function(e,t){(function(n,l){e.exports=l()})(nv,function(){var n="__v-click-outside",l=typeof window<"u",a=typeof navigator<"u",o=l&&("ontouchstart"in window||a&&navigator.msMaxTouchPoints>0)?["touchstart"]:["click"],i=function(d){var f=d.event,v=d.handler;(0,d.middleware)(f)&&v(f)},s=function(d,f){var v=function(S){var C=typeof S=="function";if(!C&&typeof S!="object")throw new Error("v-click-outside: Binding value must be a function or an object");return{handler:C?S:S.handler,middleware:S.middleware||function(_){return _},events:S.events||o,isActive:S.isActive!==!1,detectIframe:S.detectIframe!==!1,capture:!!S.capture}}(f.value),m=v.handler,g=v.middleware,y=v.detectIframe,b=v.capture;if(v.isActive){if(d[n]=v.events.map(function(S){return{event:S,srcTarget:document.documentElement,handler:function(C){return function(_){var V=_.el,x=_.event,T=_.handler,w=_.middleware,k=x.path||x.composedPath&&x.composedPath();(k?k.indexOf(V)<0:!V.contains(x.target))&&i({event:x,handler:T,middleware:w})}({el:d,event:C,handler:m,middleware:g})},capture:b}}),y){var p={event:"blur",srcTarget:window,handler:function(S){return function(C){var _=C.el,V=C.event,x=C.handler,T=C.middleware;setTimeout(function(){var w=document.activeElement;w&&w.tagName==="IFRAME"&&!_.contains(w)&&i({event:V,handler:x,middleware:T})},0)}({el:d,event:S,handler:m,middleware:g})},capture:b};d[n]=[].concat(d[n],[p])}d[n].forEach(function(S){var C=S.event,_=S.srcTarget,V=S.handler;return setTimeout(function(){d[n]&&_.addEventListener(C,V,b)},0)})}},u=function(d){(d[n]||[]).forEach(function(f){return f.srcTarget.removeEventListener(f.event,f.handler,f.capture)}),delete d[n]},c=l?{beforeMount:s,updated:function(d,f){var v=f.value,m=f.oldValue;JSON.stringify(v)!==JSON.stringify(m)&&(u(d),s(d,{value:v}))},unmounted:u}:{};return{install:function(d){d.directive("click-outside",c)},directive:c}})}),iv=ov;const sv={class:"v3ti-loader-wrapper"},rv=P("div",{class:"v3ti-loader"},null,-1),uv=P("span",null,"Loading",-1),cv=[rv,uv];function dv(e,t){return ee(),te("div",sv,cv)}function di(e,t){t===void 0&&(t={});var n=t.insertAt;if(!(!e||typeof document>"u")){var l=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css",n==="top"&&l.firstChild?l.insertBefore(a,l.firstChild):l.appendChild(a),a.styleSheet?a.styleSheet.cssText=e:a.appendChild(document.createTextNode(e))}}var vv=`.v3ti-loader-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  color: #112B3C;
}
.v3ti-loader-wrapper .v3ti-loader {
  width: 18px;
  height: 18px;
  border-radius: 50%;
  display: inline-block;
  border-top: 2px solid #112B3C;
  border-right: 2px solid transparent;
  box-sizing: border-box;
  animation: rotation 0.8s linear infinite;
  margin-right: 8px;
}
@keyframes rotation {
0% {
    transform: rotate(0deg);
}
100% {
    transform: rotate(360deg);
}
}`;di(vv);const vi={};vi.render=dv;var fv=vi,fi={name:"Vue3TagsInput",emits:["update:modelValue","update:tags","on-limit","on-tags-changed","on-remove","on-error","on-focus","on-blur","on-select","on-select-duplicate-tag","on-new-tag"],props:{readOnly:{type:Boolean,default:!1},modelValue:{type:String,default:""},validate:{type:[String,Function,Object],default:""},addTagOnKeys:{type:Array,default:function(){return[13,",",32]}},placeholder:{type:String,default:""},tags:{type:Array,default:()=>[]},loading:{type:Boolean,default:!1},limit:{type:Number,default:-1},allowDuplicates:{type:Boolean,default:!1},addTagOnBlur:{type:Boolean,default:!1},selectItems:{type:Array,default:()=>[]},select:{type:Boolean,default:!1},duplicateSelectItem:{type:Boolean,default:!0},uniqueSelectField:{type:String,default:"id"},addTagOnKeysWhenSelect:{type:Boolean,default:!1},isShowNoData:{type:Boolean,default:!0}},components:{Loading:fv},directives:{clickOutside:iv.directive},data(){return{isInputActive:!1,isError:!1,newTag:"",innerTags:[],multiple:!1}},computed:{isLimit(){const e=this.limit>0&&Number(this.limit)===this.innerTags.length;return e&&this.$emit("on-limit"),e},selectedItemsIds(){return this.duplicateSelectItem?[]:this.tags.map(e=>e[this.uniqueSelectField]||"")}},watch:{error(){this.isError=this.error},modelValue:{immediate:!0,handler(e){this.newTag=e}},tags:{deep:!0,immediate:!0,handler(e){this.innerTags=[...e]}}},methods:{isShot(e){return!!this.$slots[e]},makeItNormal(e){this.$emit("update:modelValue",e.target.value),this.$refs.inputTag.className="v3ti-new-tag",this.$refs.inputTag.style.textDecoration="none"},resetData(){this.innerTags=[]},resetInputValue(){this.newTag="",this.$emit("update:modelValue","")},setPosition(){const e=this.$refs.inputBox,t=this.$refs.contextMenu;if(e&&t){t.style.display="block";const n=e.clientHeight||32,l=3;t.style.top=n+l+"px"}},closeContextMenu(){this.$refs.contextMenu&&(this.$refs.contextMenu.style={display:"none"})},handleSelect(e){if(this.isShowCheckmark(e)){const t=this.tags.filter(n=>e.id!==n.id);this.$emit("update:tags",t),this.$emit("on-select-duplicate-tag",e),this.resetInputValue()}else this.$emit("on-select",e);this.$nextTick(()=>{this.closeContextMenu()})},isShowCheckmark(e){return this.duplicateSelectItem?!1:this.selectedItemsIds.includes(e[this.uniqueSelectField])},focusNewTag(){this.select&&!this.disabled&&this.setPosition(),!(this.readOnly||!this.$el.querySelector(".v3ti-new-tag"))&&this.$el.querySelector(".v3ti-new-tag").focus()},handleInputFocus(e){this.isInputActive=!0,this.$emit("on-focus",e)},handleInputBlur(e){this.isInputActive=!1,this.addNew(e),this.$emit("on-blur",e)},addNew(e){if(this.select&&!this.addTagOnKeysWhenSelect)return;const t=e?this.addTagOnKeys.indexOf(e.keyCode)!==-1||this.addTagOnKeys.indexOf(e.key)!==-1:!0,n=e&&e.type!=="blur";!t&&(n||!this.addTagOnBlur)||this.isLimit||(this.newTag&&(this.allowDuplicates||this.innerTags.indexOf(this.newTag)===-1)&&this.validateIfNeeded(this.newTag)?(this.innerTags.push(this.newTag),this.addTagOnKeysWhenSelect&&(this.$emit("on-new-tag",this.newTag),this.updatePositionContextMenu()),this.resetInputValue(),this.tagChange(),e&&e.preventDefault()):(this.validateIfNeeded(this.newTag)?this.makeItError(!0):this.makeItError(!1),e&&e.preventDefault()))},updatePositionContextMenu(){this.$nextTick(()=>{this.setPosition()})},makeItError(e){this.newTag!==""&&(this.$refs.inputTag.className="v3ti-new-tag v3ti-new-tag--error",this.$refs.inputTag.style.textDecoration="underline",this.$emit("on-error",e))},validateIfNeeded(e){return this.validate===""||this.validate===void 0?!0:typeof this.validate=="function"?this.validate(e):!0},removeLastTag(){this.newTag||(this.innerTags.pop(),this.tagChange(),this.updatePositionContextMenu())},remove(e){this.innerTags.splice(e,1),this.tagChange(),this.$emit("on-remove",e),this.updatePositionContextMenu()},tagChange(){this.$emit("on-tags-changed",this.innerTags)}}};const mv={key:1,class:"v3ti-tag-content"},gv=["onClick"],hv=["placeholder","disabled"],yv={key:0,class:"v3ti-loading"},bv={key:1,class:"v3ti-no-data"},pv={key:1},kv={key:2},Sv=["onClick"],wv={class:"v3ti-context-item--label"},Cv={key:0,class:"v3ti-icon-selected-tag",width:"44",height:"44",viewBox:"0 0 24 24","stroke-width":"1.5",fill:"none","stroke-linecap":"round","stroke-linejoin":"round"},xv=P("path",{stroke:"none",d:"M0 0h24v24H0z"},null,-1),Vv=P("path",{d:"M5 12l5 5l10 -10"},null,-1),_v=[xv,Vv];function Iv(e,t,n,l,a,o){const i=ke("Loading"),s=Ze("click-outside");return ne((ee(),te("div",{onClick:t[6]||(t[6]=u=>o.focusNewTag()),class:Le([{"v3ti--focus":a.isInputActive,"v3ti--error":a.isError},"v3ti"])},[P("div",{class:Le(["v3ti-content",{"v3ti-content--select":n.select}]),ref:"inputBox"},[(ee(!0),te(oe,null,En(a.innerTags,(u,c)=>(ee(),te("span",{key:c,class:"v3ti-tag"},[o.isShot("item")?Jn(e.$slots,"item",vo(Y({key:0},{name:u,index:c,tag:u}))):(ee(),te("span",mv,xt(u),1)),n.readOnly?we("",!0):(ee(),te("a",{key:2,onClick:Rl(d=>o.remove(c),["prevent","stop"]),class:"v3ti-remove-tag"},null,8,gv))]))),128)),ne(P("input",{ref:"inputTag",placeholder:n.placeholder,"onUpdate:modelValue":t[0]||(t[0]=u=>a.newTag=u),onKeydown:[t[1]||(t[1]=Ar(Rl(function(){return o.removeLastTag&&o.removeLastTag(...arguments)},["stop"]),["delete"])),t[2]||(t[2]=function(){return o.addNew&&o.addNew(...arguments)})],onBlur:t[3]||(t[3]=function(){return o.handleInputBlur&&o.handleInputBlur(...arguments)}),onFocus:t[4]||(t[4]=function(){return o.handleInputFocus&&o.handleInputFocus(...arguments)}),onInput:t[5]||(t[5]=function(){return o.makeItNormal&&o.makeItNormal(...arguments)}),class:"v3ti-new-tag",disabled:n.readOnly},null,40,hv),[[je,a.newTag]])],2),n.select?(ee(),te("section",{key:0,class:Le(["v3ti-context-menu",{"v3ti-context-menu-no-data":!n.isShowNoData&&n.selectItems.length===0}]),ref:"contextMenu"},[n.loading?(ee(),te("div",yv,[o.isShot("loading")?Jn(e.$slots,"default",{key:0}):(ee(),Br(i,{key:1}))])):we("",!0),!n.loading&&n.selectItems.length===0&&n.isShowNoData?(ee(),te("div",bv,[o.isShot("no-data")?Jn(e.$slots,"no-data",{key:0}):(ee(),te("span",pv," No data "))])):we("",!0),!n.loading&&n.selectItems.length>0?(ee(),te("div",kv,[(ee(!0),te(oe,null,En(n.selectItems,(u,c)=>(ee(),te("div",{key:c,class:Le(["v3ti-context-item",{"v3ti-context-item--active":o.isShowCheckmark(u)}]),onClick:Rl(d=>o.handleSelect(u,c),["stop"])},[P("div",wv,[Jn(e.$slots,"select-item",vo(Rr(u)))]),o.isShowCheckmark(u)?(ee(),te("svg",Cv,_v)):we("",!0)],10,Sv))),128))])):we("",!0)],2)):we("",!0)],2)),[[s,o.closeContextMenu]])}var Tv=`.v3ti {
  border-radius: 5px;
  min-height: 32px;
  line-height: 1.4;
  background-color: #fff;
  border: 1px solid #9ca3af;
  cursor: text;
  text-align: left;
  -webkit-appearance: textfield;
  display: flex;
  flex-wrap: wrap;
  position: relative;
}
.v3ti .v3ti-icon-selected-tag {
  stroke: #19be6b;
  width: 1rem;
  height: 1rem;
  margin-left: 4px;
}
.v3ti--focus {
  outline: 0;
  border-color: #000000;
  box-shadow: 0 0 0 1px #000000;
}
.v3ti--error {
  border-color: #F56C6C;
}
.v3ti .v3ti-no-data {
  color: #d8d8d8;
  text-align: center;
  padding: 4px 7px;
}
.v3ti .v3ti-loading {
  padding: 4px 7px;
  text-align: center;
}
.v3ti .v3ti-context-menu {
  max-height: 150px;
  min-width: 150px;
  overflow: auto;
  display: none;
  outline: none;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  margin: 0;
  padding: 5px 0;
  background: #ffffff;
  z-index: 1050;
  color: #475569;
  box-shadow: 0 3px 8px 2px rgba(0, 0, 0, 0.1);
  border-radius: 0 0 6px 6px;
}
.v3ti .v3ti-context-menu .v3ti-context-item {
  padding: 4px 7px;
  display: flex;
  align-items: center;
}
.v3ti .v3ti-context-menu .v3ti-context-item:hover {
  background: #e8e8e8;
  cursor: pointer;
}
.v3ti .v3ti-context-menu .v3ti-context-item--label {
  flex: 1;
  min-width: 1px;
}
.v3ti .v3ti-context-menu .v3ti-context-item--active {
  color: #317CAF;
}
.v3ti .v3ti-context-menu-no-data {
  padding: 0;
}
.v3ti .v3ti-content {
  width: 100%;
  display: flex;
  flex-wrap: wrap;
}
.v3ti .v3ti-content--select {
  padding-right: 30px;
}
.v3ti .v3ti-tag {
  display: flex;
  font-weight: 400;
  margin: 3px;
  padding: 0 5px;
  background: #317CAF;
  color: #ffffff;
  height: 27px;
  border-radius: 5px;
  align-items: center;
  max-width: calc(100% - 16px);
}
.v3ti .v3ti-tag .v3ti-tag-content {
  flex: 1;
  min-width: 1px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
.v3ti .v3ti-tag .v3ti-remove-tag {
  color: #ffffff;
  transition: opacity 0.3s ease;
  opacity: 0.5;
  cursor: pointer;
  padding: 0 5px 0 7px;
}
.v3ti .v3ti-tag .v3ti-remove-tag::before {
  content: "x";
}
.v3ti .v3ti-tag .v3ti-remove-tag:hover {
  opacity: 1;
}
.v3ti .v3ti-new-tag {
  background: transparent;
  border: 0;
  font-weight: 400;
  margin: 3px;
  outline: none;
  padding: 0 4px;
  flex: 1;
  min-width: 60px;
  height: 27px;
}
.v3ti .v3ti-new-tag--error {
  color: #F56C6C;
}`;di(Tv);fi.render=Iv;var Pv=(()=>{const e=fi;return e.install=t=>{t.component("Vue3TagsInput",e)},e})();const Av={components:{Vue3TagsInput:Pv},data(){return{showClasses:!1,activeNode:null,isReady:!1,classesToKeepInput:"",classesToKeep:["element","no-typing","safe-mode","edit","nodrop","allow-drop","module","module-overlap","module-overlap-on-hover","allow-typing","allow-edit","img-as-background","image-holder"],classes:[]}},methods:{toggleClasses:function(){this.showClasses=!this.showClasses,this.emitter.emit("element-style-editor-show","classes")},customValidateClasses(e){const t=/^[a-zA-Z\s,]*$/;return e.split(",").map(l=>l.trim()).filter(l=>t.test(l)&&this.classesToKeep.includes(l))},handleChangeClasses(e){this.classes=e},updateClassesToKeep(){this.classesToKeep=this.classesToKeepInput.split(",").map(e=>e.trim())},applyClasses(){this.isReady&&this.activeNode&&(this.activeNode.className="",this.classes.forEach(e=>{e&&this.activeNode.classList.add(e)}),this.classesToKeepInput&&this.classesToKeepInput.split(",").map(t=>t.trim()).filter(t=>!!t).forEach(t=>{this.activeNode.classList.contains(t)||this.activeNode.classList.add(t)}),mw.top().app&&mw.top().app.registerChangedState(this.activeNode))},populateStyleEditor(e){if(e&&e.nodeType===1){this.isReady=!1,this.activeNode=e,this.classes=this.activeNode.className.split(" ").filter(l=>!!l).filter(l=>l.startsWith("animate__")?!1:!this.classesToKeep.includes(l));const t=this.activeNode.className.split(" "),n=this.classesToKeep.filter(l=>t.includes(l));this.classesToKeepInput=n.join(", "),setTimeout(()=>{this.isReady=!0},100)}}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="classes"&&(this.showClasses=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{classes(e,t){this.applyClasses()}}},Bv={class:"d-flex"},Rv={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Ev=P("path",{d:"M12.9,3l2,0.4L11.1,21l-2-0.4L12.9,3 M19.6,12L16,8.4V5.6l6.4,6.4L16,18.4v-2.8L19.6,12 M1.6,12L8,5.6v2.8L4.4,12L8,15.6  v2.8L1.6,12z"},null,-1),Lv=[Ev],$v={key:0};function Mv(e,t,n,l,a,o){const i=ke("vue3-tags-input");return ee(),te("div",null,[P("div",Bv,[(ee(),te("svg",Rv,Lv)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showClasses}]),onClick:t[0]||(t[0]=(...s)=>o.toggleClasses&&o.toggleClasses(...s))}," Classes ",2)]),a.showClasses?(ee(),te("div",$v,[P("div",null,[ne(P("input",{type:"hidden","onUpdate:modelValue":t[1]||(t[1]=s=>a.classesToKeepInput=s),onInput:t[2]||(t[2]=(...s)=>o.updateClassesToKeep&&o.updateClassesToKeep(...s))},null,544),[[je,a.classesToKeepInput]]),r(i,{tags:a.classes,placeholder:"Enter classes separated by commas",validate:o.customValidateClasses,onOnTagsChanged:o.handleChangeClasses},null,8,["tags","validate","onOnTagsChanged"])])])):we("",!0)])}const Fv=ze(Av,[["render",Mv]]),Dv={components:{BorderRadius:ci},data(){return{showRoundedCorners:!1,activeNode:null,isReady:!1,borderRadius:{borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""}}},methods:{toggleRoundedCorners:function(){this.showRoundedCorners=!this.showRoundedCorners,this.emitter.emit("element-style-editor-show","roundedCorners")},resetAllProperties:function(){this.borderRadius={borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""}},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBorderRadius(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBorderRadius:function(e){if(!(!e||!e.get)){var t=e.get.radius(!0);this.borderTopLeftRadius=t.tl,this.borderTopRightRadius=t.tr,this.borderBottomRightRadius=t.br,this.borderBottomLeftRadius=t.bl,this.borderRadius={borderTopLeftRadius:t.tl,borderTopRightRadius:t.tr,borderBottomLeftRadius:t.bl,borderBottomRightRadius:t.br}}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="roundedCorners"&&(this.showRoundedCorners=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{borderRadius:function(e,t){var n="";e.borderTopLeftRadius?n+=e.borderTopLeftRadius+"px ":n+="0px ",e.borderTopRightRadius?n+=e.borderTopRightRadius+"px ":n+="0px ",e.borderBottomRightRadius?n+=e.borderBottomRightRadius+"px ":n+="0px ",e.borderBottomLeftRadius?n+=e.borderBottomLeftRadius+"px ":n+="0px ",this.applyPropertyToActiveNode("border-radius",n)}}},Ov={class:"d-flex"},Nv={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},zv=P("path",{d:"M19,19h2v2h-2V19 M19,17h2v-2h-2V17 M3,13h2v-2H3V13 M3,17h2v-2H3V17 M3,9h2V7H3V9 M3,5h2V3H3V5 M7,5h2V3H7V5 M15,21h2v-2  h-2V21 M11,21h2v-2h-2V21 M15,21h2v-2h-2V21 M7,21h2v-2H7V21 M3,21h2v-2H3V21 M21,8c0-2.8-2.2-5-5-5h-5v2h5c1.7,0,3,1.3,3,3v5h2V8z"},null,-1),Hv=[zv],jv={key:0},Uv={class:"d-flex flex-column gap-3"};function Gv(e,t,n,l,a,o){const i=ke("BorderRadius");return ee(),te(oe,null,[P("div",Ov,[(ee(),te("svg",Nv,Hv)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showRoundedCorners}]),onClick:t[0]||(t[0]=(...s)=>o.toggleRoundedCorners&&o.toggleRoundedCorners(...s))}," Rounded corners ",2)]),a.showRoundedCorners?(ee(),te("div",jv,[P("div",Uv,[r(i,{modelValue:a.borderRadius,"onUpdate:modelValue":t[1]||(t[1]=s=>a.borderRadius=s)},null,8,["modelValue"])])])):we("",!0)],64)}const Wv=ze(Dv,[["render",Gv]]);const Yv={components:{ElementStyleEditorBackground:Lc,ElementStyleEditorRoundedCorners:Wv,ElementStyleEditorElementSelector:md,ElementStyleEditorTypography:Hu,ElementStyleEditorSpacing:uc,ElementStyleEditorBorder:od,ElementStyleEditorContainer:Td,ElementStyleEditorGrid:tv,ElementStyleEditorAnimations:Md,ElementStyleEditorClassApplier:Fv},data(){return{showElementSelector:!0,showBackground:!0,showTypography:!0,showSpacing:!0,showBorder:!0,showContainer:!0,showGrid:!0,showAnimations:!0,showClassApplier:!0,showRoundedCorners:!0}},methods:{},mounted(){mw.top().app.on("cssEditorSettings",e=>{e.fieldSettings.components&&(this.showBackground=!1,this.showTypography=!1,this.showSpacing=!1,this.showBorder=!1,this.showElementSelector=!1,this.showContainer=!1,this.showAnimations=!1,this.showClassApplier=!1,e.fieldSettings.components.includes("background")&&(this.showBackground=!0),e.fieldSettings.components.includes("elementSelector")&&(this.showElementSelector=!0),e.fieldSettings.components.includes("typography")&&(this.showTypography=!0),e.fieldSettings.components.includes("spacing")&&(this.showSpacing=!0),e.fieldSettings.components.includes("border")&&(this.showBorder=!0),e.fieldSettings.components.includes("container")&&(this.showContainer=!0),e.fieldSettings.components.includes("grid")&&(this.showGrid=!0),e.fieldSettings.components.includes("animations")&&(this.showAnimations=!0),e.fieldSettings.components.includes("roundedCorners")&&(this.showRoundedCorners=!0),e.fieldSettings.components.includes("classes")&&(this.showClassApplier=!0))})}},Kv={class:"d-flex flex-column"},qv={class:"mb-4"},Xv={class:"mb-4"},Zv={class:"mb-4"},Jv={class:"mb-4"},Qv={class:"mb-4"},ef={class:"mb-4"},tf={class:"mb-4"};function nf(e,t,n,l,a,o){const i=ke("ElementStyleEditorElementSelector"),s=ke("ElementStyleEditorBackground"),u=ke("ElementStyleEditorTypography"),c=ke("ElementStyleEditorSpacing"),d=ke("ElementStyleEditorContainer"),f=ke("ElementStyleEditorGrid"),v=ke("ElementStyleEditorBorder"),m=ke("ElementStyleEditorRoundedCorners"),g=ke("ElementStyleEditorAnimations"),y=ke("ElementStyleEditorClassApplier");return ee(),te("div",Kv,[ne(P("div",qv,[r(i)],512),[[Pe,a.showElementSelector]]),ne(P("div",Xv,[r(s)],512),[[Pe,a.showBackground]]),ne(P("div",Zv,[r(u)],512),[[Pe,a.showTypography]]),ne(P("div",Jv,[r(c)],512),[[Pe,a.showSpacing]]),ne(P("div",null,[r(d)],512),[[Pe,a.showContainer]]),ne(P("div",null,[r(f)],512),[[Pe,a.showGrid]]),ne(P("div",Qv,[r(v)],512),[[Pe,a.showBorder]]),ne(P("div",ef,[r(m)],512),[[Pe,a.showRoundedCorners]]),ne(P("div",null,[r(g)],512),[[Pe,a.showAnimations]]),ne(P("div",tf,[r(y)],512),[[Pe,a.showClassApplier]])])}const lf=ze(Yv,[["render",nf]]);const Ce=typeof window<"u",Pa=Ce&&"IntersectionObserver"in window,af=Ce&&("ontouchstart"in window||window.navigator.maxTouchPoints>0);function fo(e,t,n){of(e,t),t.set(e,n)}function of(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function sf(e,t,n){var l=mi(e,t,"set");return rf(e,l,n),n}function rf(e,t,n){if(t.set)t.set.call(e,n);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=n}}function zt(e,t){var n=mi(e,t,"get");return uf(e,n)}function mi(e,t,n){if(!t.has(e))throw new TypeError("attempted to "+n+" private field on non-instance");return t.get(e)}function uf(e,t){return t.get?t.get.call(e):t.value}function gi(e,t,n){const l=t.length-1;if(l<0)return e===void 0?n:e;for(let a=0;a<l;a++){if(e==null)return n;e=e[t[a]]}return e==null||e[t[l]]===void 0?n:e[t[l]]}function hn(e,t){if(e===t)return!0;if(e instanceof Date&&t instanceof Date&&e.getTime()!==t.getTime()||e!==Object(e)||t!==Object(t))return!1;const n=Object.keys(e);return n.length!==Object.keys(t).length?!1:n.every(l=>hn(e[l],t[l]))}function Hl(e,t,n){return e==null||!t||typeof t!="string"?n:e[t]!==void 0?e[t]:(t=t.replace(/\[(\w+)\]/g,".$1"),t=t.replace(/^\./,""),gi(e,t.split("."),n))}function pt(e,t,n){if(t===!0)return e===void 0?n:e;if(t==null||typeof t=="boolean")return n;if(e!==Object(e)){if(typeof t!="function")return n;const a=t(e,n);return typeof a>"u"?n:a}if(typeof t=="string")return Hl(e,t,n);if(Array.isArray(t))return gi(e,t,n);if(typeof t!="function")return n;const l=t(e,n);return typeof l>"u"?n:l}function Ct(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0;return Array.from({length:e},(n,l)=>t+l)}function J(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"px";if(!(e==null||e===""))return isNaN(+e)?String(e):isFinite(+e)?`${Number(e)}${t}`:void 0}function sl(e){return e!==null&&typeof e=="object"&&!Array.isArray(e)}function jl(e){return e&&"$el"in e?e.$el:e}const mo=Object.freeze({enter:13,tab:9,delete:46,esc:27,space:32,up:38,down:40,left:37,right:39,end:35,home:36,del:46,backspace:8,insert:45,pageup:33,pagedown:34,shift:16}),Ul=Object.freeze({enter:"Enter",tab:"Tab",delete:"Delete",esc:"Escape",space:"Space",up:"ArrowUp",down:"ArrowDown",left:"ArrowLeft",right:"ArrowRight",end:"End",home:"Home",del:"Delete",backspace:"Backspace",insert:"Insert",pageup:"PageUp",pagedown:"PageDown",shift:"Shift"});function hi(e){return Object.keys(e)}function jt(e,t){return t.every(n=>e.hasOwnProperty(n))}function Kt(e,t,n){const l=Object.create(null),a=Object.create(null);for(const o in e)t.some(i=>i instanceof RegExp?i.test(o):i===o)&&!(n!=null&&n.some(i=>i===o))?l[o]=e[o]:a[o]=e[o];return[l,a]}function rt(e,t){const n={...e};return t.forEach(l=>delete n[l]),n}const yi=/^on[^a-z]/,Aa=e=>yi.test(e),cf=["onAfterscriptexecute","onAnimationcancel","onAnimationend","onAnimationiteration","onAnimationstart","onAuxclick","onBeforeinput","onBeforescriptexecute","onChange","onClick","onCompositionend","onCompositionstart","onCompositionupdate","onContextmenu","onCopy","onCut","onDblclick","onFocusin","onFocusout","onFullscreenchange","onFullscreenerror","onGesturechange","onGestureend","onGesturestart","onGotpointercapture","onInput","onKeydown","onKeypress","onKeyup","onLostpointercapture","onMousedown","onMousemove","onMouseout","onMouseover","onMouseup","onMousewheel","onPaste","onPointercancel","onPointerdown","onPointerenter","onPointerleave","onPointermove","onPointerout","onPointerover","onPointerup","onReset","onSelect","onSubmit","onTouchcancel","onTouchend","onTouchmove","onTouchstart","onTransitioncancel","onTransitionend","onTransitionrun","onTransitionstart","onWheel"];function Qt(e){const[t,n]=Kt(e,[yi]),l=rt(t,cf),[a,o]=Kt(n,["class","style","id",/^data-/]);return Object.assign(a,t),Object.assign(o,l),[a,o]}function et(e){return e==null?[]:Array.isArray(e)?e:[e]}function Ue(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;return Math.max(t,Math.min(n,e))}function go(e){const t=e.toString().trim();return t.includes(".")?t.length-t.indexOf(".")-1:0}function ho(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"0";return e+n.repeat(Math.max(0,t-e.length))}function df(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1;const n=[];let l=0;for(;l<e.length;)n.push(e.substr(l,t)),l+=t;return n}function yo(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1e3;if(e<t)return`${e} B`;const n=t===1024?["Ki","Mi","Gi"]:["k","M","G"];let l=-1;for(;Math.abs(e)>=t&&l<n.length-1;)e/=t,++l;return`${e.toFixed(1)} ${n[l]}B`}function it(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0;const l={};for(const a in e)l[a]=e[a];for(const a in t){const o=e[a],i=t[a];if(sl(o)&&sl(i)){l[a]=it(o,i,n);continue}if(Array.isArray(o)&&Array.isArray(i)&&n){l[a]=n(o,i);continue}l[a]=i}return l}function bi(e){return e.map(t=>t.type===oe?bi(t.children):t).flat()}function Wt(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";if(Wt.cache.has(e))return Wt.cache.get(e);const t=e.replace(/[^a-z]/gi,"-").replace(/\B([A-Z])/g,"-$1").toLowerCase();return Wt.cache.set(e,t),t}Wt.cache=new Map;function Bn(e,t){if(!t||typeof t!="object")return[];if(Array.isArray(t))return t.map(n=>Bn(e,n)).flat(1);if(Array.isArray(t.children))return t.children.map(n=>Bn(e,n)).flat(1);if(t.component){if(Object.getOwnPropertySymbols(t.component.provides).includes(e))return[t.component];if(t.component.subTree)return Bn(e,t.component.subTree).flat(1)}return[]}var Qn=new WeakMap,on=new WeakMap;class vf{constructor(t){fo(this,Qn,{writable:!0,value:[]}),fo(this,on,{writable:!0,value:0}),this.size=t}push(t){zt(this,Qn)[zt(this,on)]=t,sf(this,on,(zt(this,on)+1)%this.size)}values(){return zt(this,Qn).slice(zt(this,on)).concat(zt(this,Qn).slice(0,zt(this,on)))}}function ff(e){return"touches"in e?{clientX:e.touches[0].clientX,clientY:e.touches[0].clientY}:{clientX:e.clientX,clientY:e.clientY}}function Ba(e){const t=gt({}),n=h(e);return tt(()=>{for(const l in n.value)t[l]=n.value[l]},{flush:"sync"}),Sa(t)}function rl(e,t){return e.includes(t)}function pi(e){return e[2].toLowerCase()+e.slice(3)}const kt=()=>[Function,Array];function bo(e,t){return t="on"+zn(t),!!(e[t]||e[`${t}Once`]||e[`${t}Capture`]||e[`${t}OnceCapture`]||e[`${t}CaptureOnce`])}function Ra(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),l=1;l<t;l++)n[l-1]=arguments[l];if(Array.isArray(e))for(const a of e)a(...n);else typeof e=="function"&&e(...n)}function Ln(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;const n=["button","[href]",'input:not([type="hidden"])',"select","textarea","[tabindex]"].map(l=>`${l}${t?':not([tabindex="-1"])':""}:not([disabled])`).join(", ");return[...e.querySelectorAll(n)]}function ki(e,t,n){let l,a=e.indexOf(document.activeElement);const o=t==="next"?1:-1;do a+=o,l=e[a];while((!l||l.offsetParent==null||!((n==null?void 0:n(l))??!0))&&a<e.length&&a>=0);return l}function ul(e,t){var l,a,o,i;const n=Ln(e);if(!t)(e===document.activeElement||!e.contains(document.activeElement))&&((l=n[0])==null||l.focus());else if(t==="first")(a=n[0])==null||a.focus();else if(t==="last")(o=n.at(-1))==null||o.focus();else if(typeof t=="number")(i=n[t])==null||i.focus();else{const s=ki(n,t);s?s.focus():ul(e,t==="next"?"first":"last")}}function Si(){}function dn(e,t){if(!(Ce&&typeof CSS<"u"&&typeof CSS.supports<"u"&&CSS.supports(`selector(${t})`)))return null;try{return!!e&&e.matches(t)}catch{return null}}const wi=["top","bottom"],mf=["start","end","left","right"];function Gl(e,t){let[n,l]=e.split(" ");return l||(l=rl(wi,n)?"start":rl(mf,n)?"top":"center"),{side:Wl(n,t),align:Wl(l,t)}}function Wl(e,t){return e==="start"?t?"right":"left":e==="end"?t?"left":"right":e}function Ll(e){return{side:{center:"center",top:"bottom",bottom:"top",left:"right",right:"left"}[e.side],align:e.align}}function $l(e){return{side:e.side,align:{center:"center",top:"bottom",bottom:"top",left:"right",right:"left"}[e.align]}}function po(e){return{side:e.align,align:e.side}}function ko(e){return rl(wi,e.side)?"y":"x"}class cn{constructor(t){let{x:n,y:l,width:a,height:o}=t;this.x=n,this.y=l,this.width=a,this.height=o}get top(){return this.y}get bottom(){return this.y+this.height}get left(){return this.x}get right(){return this.x+this.width}}function So(e,t){return{x:{before:Math.max(0,t.left-e.left),after:Math.max(0,e.right-t.right)},y:{before:Math.max(0,t.top-e.top),after:Math.max(0,e.bottom-t.bottom)}}}function Ea(e){const t=e.getBoundingClientRect(),n=getComputedStyle(e),l=n.transform;if(l){let a,o,i,s,u;if(l.startsWith("matrix3d("))a=l.slice(9,-1).split(/, /),o=+a[0],i=+a[5],s=+a[12],u=+a[13];else if(l.startsWith("matrix("))a=l.slice(7,-1).split(/, /),o=+a[0],i=+a[3],s=+a[4],u=+a[5];else return new cn(t);const c=n.transformOrigin,d=t.x-s-(1-o)*parseFloat(c),f=t.y-u-(1-i)*parseFloat(c.slice(c.indexOf(" ")+1)),v=o?t.width/o:e.offsetWidth+1,m=i?t.height/i:e.offsetHeight+1;return new cn({x:d,y:f,width:v,height:m})}else return new cn(t)}function Ut(e,t,n){if(typeof e.animate>"u")return{finished:Promise.resolve()};let l;try{l=e.animate(t,n)}catch{return{finished:Promise.resolve()}}return typeof l.finished>"u"&&(l.finished=new Promise(a=>{l.onfinish=()=>{a(l)}})),l}const ll=new WeakMap;function gf(e,t){Object.keys(t).forEach(n=>{if(Aa(n)){const l=pi(n),a=ll.get(e);if(t[n]==null)a==null||a.forEach(o=>{const[i,s]=o;i===l&&(e.removeEventListener(l,s),a.delete(o))});else if(!a||![...a].some(o=>o[0]===l&&o[1]===t[n])){e.addEventListener(l,t[n]);const o=a||new Set;o.add([l,t[n]]),ll.has(e)||ll.set(e,o)}}else t[n]==null?e.removeAttribute(n):e.setAttribute(n,t[n])})}function hf(e,t){Object.keys(t).forEach(n=>{if(Aa(n)){const l=pi(n),a=ll.get(e);a==null||a.forEach(o=>{const[i,s]=o;i===l&&(e.removeEventListener(l,s),a.delete(o))})}else e.removeAttribute(n)})}const sn=2.4,wo=.2126729,Co=.7151522,xo=.072175,yf=.55,bf=.58,pf=.57,kf=.62,el=.03,Vo=1.45,Sf=5e-4,wf=1.25,Cf=1.25,_o=.078,Io=12.82051282051282,tl=.06,To=.001;function Po(e,t){const n=(e.r/255)**sn,l=(e.g/255)**sn,a=(e.b/255)**sn,o=(t.r/255)**sn,i=(t.g/255)**sn,s=(t.b/255)**sn;let u=n*wo+l*Co+a*xo,c=o*wo+i*Co+s*xo;if(u<=el&&(u+=(el-u)**Vo),c<=el&&(c+=(el-c)**Vo),Math.abs(c-u)<Sf)return 0;let d;if(c>u){const f=(c**yf-u**bf)*wf;d=f<To?0:f<_o?f-f*Io*tl:f-tl}else{const f=(c**kf-u**pf)*Cf;d=f>-To?0:f>-_o?f-f*Io*tl:f+tl}return d*100}function xf(e,t){t=Array.isArray(t)?t.slice(0,-1).map(n=>`'${n}'`).join(", ")+` or '${t.at(-1)}'`:`'${t}'`}const cl=.20689655172413793,Vf=e=>e>cl**3?Math.cbrt(e):e/(3*cl**2)+4/29,_f=e=>e>cl?e**3:3*cl**2*(e-4/29);function Ci(e){const t=Vf,n=t(e[1]);return[116*n-16,500*(t(e[0]/.95047)-n),200*(n-t(e[2]/1.08883))]}function xi(e){const t=_f,n=(e[0]+16)/116;return[t(n+e[1]/500)*.95047,t(n),t(n-e[2]/200)*1.08883]}const If=[[3.2406,-1.5372,-.4986],[-.9689,1.8758,.0415],[.0557,-.204,1.057]],Tf=e=>e<=.0031308?e*12.92:1.055*e**(1/2.4)-.055,Pf=[[.4124,.3576,.1805],[.2126,.7152,.0722],[.0193,.1192,.9505]],Af=e=>e<=.04045?e/12.92:((e+.055)/1.055)**2.4;function Vi(e){const t=Array(3),n=Tf,l=If;for(let a=0;a<3;++a)t[a]=Math.round(Ue(n(l[a][0]*e[0]+l[a][1]*e[1]+l[a][2]*e[2]))*255);return{r:t[0],g:t[1],b:t[2]}}function La(e){let{r:t,g:n,b:l}=e;const a=[0,0,0],o=Af,i=Pf;t=o(t/255),n=o(n/255),l=o(l/255);for(let s=0;s<3;++s)a[s]=i[s][0]*t+i[s][1]*n+i[s][2]*l;return a}function Ao(e){return!!e&&/^(#|var\(--|(rgb|hsl)a?\()/.test(e)}const Bo=/^(?<fn>(?:rgb|hsl)a?)\((?<values>.+)\)/,Bf={rgb:(e,t,n,l)=>({r:e,g:t,b:n,a:l}),rgba:(e,t,n,l)=>({r:e,g:t,b:n,a:l}),hsl:(e,t,n,l)=>Ro({h:e,s:t,l:n,a:l}),hsla:(e,t,n,l)=>Ro({h:e,s:t,l:n,a:l}),hsv:(e,t,n,l)=>Vt({h:e,s:t,v:n,a:l}),hsva:(e,t,n,l)=>Vt({h:e,s:t,v:n,a:l})};function st(e){if(typeof e=="number")return{r:(e&16711680)>>16,g:(e&65280)>>8,b:e&255};if(typeof e=="string"&&Bo.test(e)){const{groups:t}=e.match(Bo),{fn:n,values:l}=t,a=l.split(/,\s*/).map(o=>o.endsWith("%")&&["hsl","hsla","hsv","hsva"].includes(n)?parseFloat(o)/100:parseFloat(o));return Bf[n](...a)}else if(typeof e=="string"){let t=e.startsWith("#")?e.slice(1):e;return[3,4].includes(t.length)?t=t.split("").map(n=>n+n).join(""):[6,8].includes(t.length),Ai(t)}else if(typeof e=="object"){if(jt(e,["r","g","b"]))return e;if(jt(e,["h","s","l"]))return Vt($a(e));if(jt(e,["h","s","v"]))return Vt(e)}throw new TypeError(`Invalid color: ${e==null?e:String(e)||e.constructor.name}
Expected #hex, #hexa, rgb(), rgba(), hsl(), hsla(), object or number`)}function Vt(e){const{h:t,s:n,v:l,a}=e,o=s=>{const u=(s+t/60)%6;return l-l*n*Math.max(Math.min(u,4-u,1),0)},i=[o(5),o(3),o(1)].map(s=>Math.round(s*255));return{r:i[0],g:i[1],b:i[2],a}}function Ro(e){return Vt($a(e))}function hl(e){if(!e)return{h:0,s:1,v:1,a:1};const t=e.r/255,n=e.g/255,l=e.b/255,a=Math.max(t,n,l),o=Math.min(t,n,l);let i=0;a!==o&&(a===t?i=60*(0+(n-l)/(a-o)):a===n?i=60*(2+(l-t)/(a-o)):a===l&&(i=60*(4+(t-n)/(a-o)))),i<0&&(i=i+360);const s=a===0?0:(a-o)/a,u=[i,s,a];return{h:u[0],s:u[1],v:u[2],a:e.a}}function _i(e){const{h:t,s:n,v:l,a}=e,o=l-l*n/2,i=o===1||o===0?0:(l-o)/Math.min(o,1-o);return{h:t,s:i,l:o,a}}function $a(e){const{h:t,s:n,l,a}=e,o=l+n*Math.min(l,1-l),i=o===0?0:2-2*l/o;return{h:t,s:i,v:o,a}}function Ii(e){let{r:t,g:n,b:l,a}=e;return a===void 0?`rgb(${t}, ${n}, ${l})`:`rgba(${t}, ${n}, ${l}, ${a})`}function Ti(e){return Ii(Vt(e))}function nl(e){const t=Math.round(e).toString(16);return("00".substr(0,2-t.length)+t).toUpperCase()}function Pi(e){let{r:t,g:n,b:l,a}=e;return`#${[nl(t),nl(n),nl(l),a!==void 0?nl(Math.round(a*255)):""].join("")}`}function Ai(e){e=Ef(e);let[t,n,l,a]=df(e,2).map(o=>parseInt(o,16));return a=a===void 0?a:a/255,{r:t,g:n,b:l,a}}function Rf(e){const t=Ai(e);return hl(t)}function Bi(e){return Pi(Vt(e))}function Ef(e){return e.startsWith("#")&&(e=e.slice(1)),e=e.replace(/([^0-9a-f])/gi,"F"),(e.length===3||e.length===4)&&(e=e.split("").map(t=>t+t).join("")),e.length!==6&&(e=ho(ho(e,6),8,"F")),e}function Lf(e,t){const n=Ci(La(e));return n[0]=n[0]+t*10,Vi(xi(n))}function $f(e,t){const n=Ci(La(e));return n[0]=n[0]-t*10,Vi(xi(n))}function Yl(e){const t=st(e);return La(t)[1]}function Mf(e,t){const n=Yl(e),l=Yl(t),a=Math.max(n,l),o=Math.min(n,l);return(a+.05)/(o+.05)}function Ri(e){const t=Math.abs(Po(st(0),st(e)));return Math.abs(Po(st(16777215),st(e)))>Math.min(t,50)?"#fff":"#000"}function R(e,t){return n=>Object.keys(e).reduce((l,a)=>{const i=typeof e[a]=="object"&&e[a]!=null&&!Array.isArray(e[a])?e[a]:{type:e[a]};return n&&a in n?l[a]={...i,default:n[a]}:l[a]=i,t&&!l[a].source&&(l[a].source=t),l},{})}const q=R({class:[String,Array],style:{type:[String,Array,Object],default:null}},"component");function ut(e){if(e._setup=e._setup??e.setup,!e.name)return e;if(e._setup){e.props=R(e.props??{},e.name)();const t=Object.keys(e.props);e.filterProps=function(l){return Kt(l,t,["class","style"])},e.props._as=String,e.setup=function(l,a){const o=Da();if(!o.value)return e._setup(l,a);const{props:i,provideSubDefaults:s}=Uf(l,l._as??e.name,o),u=e._setup(i,a);return s(),u}}return e}function L(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0;return t=>(e?ut:Er)(t)}function yt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"div",n=arguments.length>2?arguments[2]:void 0;return L()({name:n??zn(ui(e.replace(/__/g,"-"))),props:{tag:{type:String,default:t},...q()},setup(l,a){let{slots:o}=a;return()=>{var i;return Jt(l.tag,{class:[e,l.class],style:l.style},(i=o.default)==null?void 0:i.call(o))}}})}function Ei(e){if(typeof e.getRootNode!="function"){for(;e.parentNode;)e=e.parentNode;return e!==document?null:document}const t=e.getRootNode();return t!==document&&t.getRootNode({composed:!0})!==document?null:t}const $n="cubic-bezier(0.4, 0, 0.2, 1)",Ff="cubic-bezier(0.0, 0, 0.2, 1)",Df="cubic-bezier(0.4, 0, 1, 1)";function De(e,t){const n=Lr();if(!n)throw new Error(`[Vuetify] ${e} ${t||"must be called from inside a setup function"}`);return n}function Tt(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"composables";const t=De(e).type;return Wt((t==null?void 0:t.aliasName)||(t==null?void 0:t.name))}let Li=0,al=new WeakMap;function We(){const e=De("getUid");if(al.has(e))return al.get(e);{const t=Li++;return al.set(e,t),t}}We.reset=()=>{Li=0,al=new WeakMap};function Ma(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;for(;e;){if(t?Of(e):Fa(e))return e;e=e.parentElement}return document.scrollingElement}function dl(e,t){const n=[];if(t&&e&&!t.contains(e))return n;for(;e&&(Fa(e)&&n.push(e),e!==t);)e=e.parentElement;return n}function Fa(e){if(!e||e.nodeType!==Node.ELEMENT_NODE)return!1;const t=window.getComputedStyle(e);return t.overflowY==="scroll"||t.overflowY==="auto"&&e.scrollHeight>e.clientHeight}function Of(e){if(!e||e.nodeType!==Node.ELEMENT_NODE)return!1;const t=window.getComputedStyle(e);return["scroll","auto"].includes(t.overflowY)}function Nf(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:De("injectSelf");const{provides:n}=t;if(n&&e in n)return n[e]}function zf(e){for(;e;){if(window.getComputedStyle(e).position==="fixed")return!0;e=e.offsetParent}return!1}function j(e){const t=De("useRender");t.render=e}const vn=Symbol.for("vuetify:defaults");function Hf(e){return W(e)}function Da(){const e=Ve(vn);if(!e)throw new Error("[Vuetify] Could not find defaults instance");return e}function Ee(e,t){const n=Da(),l=W(e),a=h(()=>{if(ot(t==null?void 0:t.disabled))return n.value;const i=ot(t==null?void 0:t.scoped),s=ot(t==null?void 0:t.reset),u=ot(t==null?void 0:t.root);if(l.value==null&&!(i||s||u))return n.value;let c=it(l.value,{prev:n.value});if(i)return c;if(s||u){const d=Number(s||1/0);for(let f=0;f<=d&&!(!c||!("prev"in c));f++)c=c.prev;return c&&typeof u=="string"&&u in c&&(c=it(it(c,{prev:c}),c[u])),c}return c.prev?it(c.prev,c):c});return $e(vn,a),a}function jf(e,t){var n,l;return typeof((n=e.props)==null?void 0:n[t])<"u"||typeof((l=e.props)==null?void 0:l[Wt(t)])<"u"}function Uf(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:Da();const l=De("useDefaults");if(t=t??l.type.name??l.type.__name,!t)throw new Error("[Vuetify] Could not determine component name");const a=h(()=>{var u;return(u=n.value)==null?void 0:u[e._as??t]}),o=new Proxy(e,{get(u,c){var f,v,m,g;const d=Reflect.get(u,c);return c==="class"||c==="style"?[(f=a.value)==null?void 0:f[c],d].filter(y=>y!=null):typeof c=="string"&&!jf(l.vnode,c)?((v=a.value)==null?void 0:v[c])??((g=(m=n.value)==null?void 0:m.global)==null?void 0:g[c])??d:d}}),i=K();tt(()=>{if(a.value){const u=Object.entries(a.value).filter(c=>{let[d]=c;return d.startsWith(d[0].toUpperCase())});i.value=u.length?Object.fromEntries(u):void 0}else i.value=void 0});function s(){const u=Nf(vn,l);$e(vn,h(()=>i.value?it((u==null?void 0:u.value)??{},i.value):u==null?void 0:u.value))}return{props:o,provideSubDefaults:s}}const yl=["sm","md","lg","xl","xxl"],Kl=Symbol.for("vuetify:display"),Eo={mobileBreakpoint:"lg",thresholds:{xs:0,sm:600,md:960,lg:1280,xl:1920,xxl:2560}},Gf=function(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Eo;return it(Eo,e)};function Lo(e){return Ce&&!e?window.innerWidth:typeof e=="object"&&e.clientWidth||0}function $o(e){return Ce&&!e?window.innerHeight:typeof e=="object"&&e.clientHeight||0}function Mo(e){const t=Ce&&!e?window.navigator.userAgent:"ssr";function n(g){return!!t.match(g)}const l=n(/android/i),a=n(/iphone|ipad|ipod/i),o=n(/cordova/i),i=n(/electron/i),s=n(/chrome/i),u=n(/edge/i),c=n(/firefox/i),d=n(/opera/i),f=n(/win/i),v=n(/mac/i),m=n(/linux/i);return{android:l,ios:a,cordova:o,electron:i,chrome:s,edge:u,firefox:c,opera:d,win:f,mac:v,linux:m,touch:af,ssr:t==="ssr"}}function Wf(e,t){const{thresholds:n,mobileBreakpoint:l}=Gf(e),a=K($o(t)),o=K(Mo(t)),i=gt({}),s=K(Lo(t));function u(){a.value=$o(),s.value=Lo()}function c(){u(),o.value=Mo()}return tt(()=>{const d=s.value<n.sm,f=s.value<n.md&&!d,v=s.value<n.lg&&!(f||d),m=s.value<n.xl&&!(v||f||d),g=s.value<n.xxl&&!(m||v||f||d),y=s.value>=n.xxl,b=d?"xs":f?"sm":v?"md":m?"lg":g?"xl":"xxl",p=typeof l=="number"?l:n[l],S=s.value<p;i.xs=d,i.sm=f,i.md=v,i.lg=m,i.xl=g,i.xxl=y,i.smAndUp=!d,i.mdAndUp=!(d||f),i.lgAndUp=!(d||f||v),i.xlAndUp=!(d||f||v||m),i.smAndDown=!(v||m||g||y),i.mdAndDown=!(m||g||y),i.lgAndDown=!(g||y),i.xlAndDown=!y,i.name=b,i.height=a.value,i.width=s.value,i.mobile=S,i.mobileBreakpoint=l,i.platform=o.value,i.thresholds=n}),Ce&&window.addEventListener("resize",u,{passive:!0}),{...Sa(i),update:c,ssr:!!t}}function en(){const e=Ve(Kl);if(!e)throw new Error("Could not find Vuetify display injection");return e}const Yf={collapse:"mdi-chevron-up",complete:"mdi-check",cancel:"mdi-close-circle",close:"mdi-close",delete:"mdi-close-circle",clear:"mdi-close-circle",success:"mdi-check-circle",info:"mdi-information",warning:"mdi-alert-circle",error:"mdi-close-circle",prev:"mdi-chevron-left",next:"mdi-chevron-right",checkboxOn:"mdi-checkbox-marked",checkboxOff:"mdi-checkbox-blank-outline",checkboxIndeterminate:"mdi-minus-box",delimiter:"mdi-circle",sortAsc:"mdi-arrow-up",sortDesc:"mdi-arrow-down",expand:"mdi-chevron-down",menu:"mdi-menu",subgroup:"mdi-menu-down",dropdown:"mdi-menu-down",radioOn:"mdi-radiobox-marked",radioOff:"mdi-radiobox-blank",edit:"mdi-pencil",ratingEmpty:"mdi-star-outline",ratingFull:"mdi-star",ratingHalf:"mdi-star-half-full",loading:"mdi-cached",first:"mdi-page-first",last:"mdi-page-last",unfold:"mdi-unfold-more-horizontal",file:"mdi-paperclip",plus:"mdi-plus",minus:"mdi-minus",calendar:"mdi-calendar"},Kf={component:e=>Jt(Na,{...e,class:"mdi"})},se=[String,Function,Object,Array],ql=Symbol.for("vuetify:icons"),bl=R({icon:{type:se},tag:{type:String,required:!0}},"icon"),Xl=L()({name:"VComponentIcon",props:bl(),setup(e,t){let{slots:n}=t;return()=>{const l=e.icon;return r(e.tag,null,{default:()=>{var a;return[e.icon?r(l,null,null):(a=n.default)==null?void 0:a.call(n)]}})}}}),Oa=ut({name:"VSvgIcon",inheritAttrs:!1,props:bl(),setup(e,t){let{attrs:n}=t;return()=>r(e.tag,Y(n,{style:null}),{default:()=>[r("svg",{class:"v-icon__svg",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",role:"img","aria-hidden":"true"},[Array.isArray(e.icon)?e.icon.map(l=>Array.isArray(l)?r("path",{d:l[0],"fill-opacity":l[1]},null):r("path",{d:l},null)):r("path",{d:e.icon},null)])]})}}),qf=ut({name:"VLigatureIcon",props:bl(),setup(e){return()=>r(e.tag,null,{default:()=>[e.icon]})}}),Na=ut({name:"VClassIcon",props:bl(),setup(e){return()=>r(e.tag,{class:e.icon},null)}}),Xf={svg:{component:Oa},class:{component:Na}};function Zf(e){return it({defaultSet:"mdi",sets:{...Xf,mdi:Kf},aliases:{...Yf,vuetify:["M8.2241 14.2009L12 21L22 3H14.4459L8.2241 14.2009Z",["M7.26303 12.4733L7.00113 12L2 3H12.5261C12.5261 3 12.5261 3 12.5261 3L7.26303 12.4733Z",.6]],"vuetify-outline":"svg:M7.26 12.47 12.53 3H2L7.26 12.47ZM14.45 3 8.22 14.2 12 21 22 3H14.45ZM18.6 5 12 16.88 10.51 14.2 15.62 5ZM7.26 8.35 5.4 5H9.13L7.26 8.35Z"}},e)}const Jf=e=>{const t=Ve(ql);if(!t)throw new Error("Missing Vuetify Icons provide!");return{iconData:h(()=>{var u;const l=ot(e);if(!l)return{component:Xl};let a=l;if(typeof a=="string"&&(a=a.trim(),a.startsWith("$")&&(a=(u=t.aliases)==null?void 0:u[a.slice(1)])),!a)throw new Error(`Could not find aliased icon "${l}"`);if(Array.isArray(a))return{component:Oa,icon:a};if(typeof a!="string")return{component:Xl,icon:a};const o=Object.keys(t.sets).find(c=>typeof a=="string"&&a.startsWith(`${c}:`)),i=o?a.slice(o.length+1):a;return{component:t.sets[o??t.defaultSet].component,icon:i}})}},Qf={badge:"Badge",open:"Open",close:"Close",dataIterator:{noResultsText:"No matching records found",loadingText:"Loading items..."},dataTable:{itemsPerPageText:"Rows per page:",ariaLabel:{sortDescending:"Sorted descending.",sortAscending:"Sorted ascending.",sortNone:"Not sorted.",activateNone:"Activate to remove sorting.",activateDescending:"Activate to sort descending.",activateAscending:"Activate to sort ascending."},sortBy:"Sort by"},dataFooter:{itemsPerPageText:"Items per page:",itemsPerPageAll:"All",nextPage:"Next page",prevPage:"Previous page",firstPage:"First page",lastPage:"Last page",pageText:"{0}-{1} of {2}"},dateRangeInput:{divider:"to"},datePicker:{ok:"OK",cancel:"Cancel",range:{title:"Select dates",header:"Enter dates"},title:"Select date",header:"Enter date",input:{placeholder:"Enter date"}},noDataText:"No data available",carousel:{prev:"Previous visual",next:"Next visual",ariaLabel:{delimiter:"Carousel slide {0} of {1}"}},calendar:{moreEvents:"{0} more"},input:{clear:"Clear {0}",prependAction:"{0} prepended action",appendAction:"{0} appended action",otp:"Please enter OTP character {0}"},fileInput:{counter:"{0} files",counterSize:"{0} files ({1} in total)"},timePicker:{am:"AM",pm:"PM"},pagination:{ariaLabel:{root:"Pagination Navigation",next:"Next page",previous:"Previous page",page:"Go to page {0}",currentPage:"Page {0}, Current page",first:"First page",last:"Last page"}},stepper:{next:"Next",prev:"Previous"},rating:{ariaLabel:{item:"Rating {0} of {1}"}},loading:"Loading...",infiniteScroll:{loadMore:"Load more",empty:"No more"}},em={af:!1,ar:!0,bg:!1,ca:!1,ckb:!1,cs:!1,de:!1,el:!1,en:!1,es:!1,et:!1,fa:!0,fi:!1,fr:!1,hr:!1,hu:!1,he:!0,id:!1,it:!1,ja:!1,ko:!1,lv:!1,lt:!1,nl:!1,no:!1,pl:!1,pt:!1,ro:!1,ru:!1,sk:!1,sl:!1,srCyrl:!1,srLatn:!1,sv:!1,th:!1,tr:!1,az:!1,uk:!1,vi:!1,zhHans:!1,zhHant:!1};function Et(e,t){let n;function l(){n=wa(),n.run(()=>t.length?t(()=>{n==null||n.stop(),l()}):t())}Z(e,a=>{a&&!n?l():a||(n==null||n.stop(),n=void 0)},{immediate:!0}),Xe(()=>{n==null||n.stop()})}function ue(e,t,n){let l=arguments.length>3&&arguments[3]!==void 0?arguments[3]:f=>f,a=arguments.length>4&&arguments[4]!==void 0?arguments[4]:f=>f;const o=De("useProxiedModel"),i=W(e[t]!==void 0?e[t]:n),s=Wt(t),c=s!==t?h(()=>{var f,v,m,g;return e[t],!!(((f=o.vnode.props)!=null&&f.hasOwnProperty(t)||(v=o.vnode.props)!=null&&v.hasOwnProperty(s))&&((m=o.vnode.props)!=null&&m.hasOwnProperty(`onUpdate:${t}`)||(g=o.vnode.props)!=null&&g.hasOwnProperty(`onUpdate:${s}`)))}):h(()=>{var f,v;return e[t],!!((f=o.vnode.props)!=null&&f.hasOwnProperty(t)&&((v=o.vnode.props)!=null&&v.hasOwnProperty(`onUpdate:${t}`)))});Et(()=>!c.value,()=>{Z(()=>e[t],f=>{i.value=f})});const d=h({get(){const f=e[t];return l(c.value?f:i.value)},set(f){const v=a(f),m=$t(c.value?e[t]:i.value);m===v||l(m)===f||(i.value=v,o==null||o.emit(`update:${t}`,v))}});return Object.defineProperty(d,"externalValue",{get:()=>c.value?e[t]:i.value}),d}const Fo="$vuetify.",Do=(e,t)=>e.replace(/\{(\d+)\}/g,(n,l)=>String(t[+l])),$i=(e,t,n)=>function(l){for(var a=arguments.length,o=new Array(a>1?a-1:0),i=1;i<a;i++)o[i-1]=arguments[i];if(!l.startsWith(Fo))return Do(l,o);const s=l.replace(Fo,""),u=e.value&&n.value[e.value],c=t.value&&n.value[t.value];let d=Hl(u,s,null);return d||(`${l}${e.value}`,d=Hl(c,s,null)),d||(d=l),typeof d!="string"&&(d=l),Do(d,o)};function Mi(e,t){return(n,l)=>new Intl.NumberFormat([e.value,t.value],l).format(n)}function Ml(e,t,n){const l=ue(e,t,e[t]??n.value);return l.value=e[t]??n.value,Z(n,a=>{e[t]==null&&(l.value=n.value)}),l}function Fi(e){return t=>{const n=Ml(t,"locale",e.current),l=Ml(t,"fallback",e.fallback),a=Ml(t,"messages",e.messages);return{name:"vuetify",current:n,fallback:l,messages:a,t:$i(n,l,a),n:Mi(n,l),provide:Fi({current:n,fallback:l,messages:a})}}}function tm(e){const t=K((e==null?void 0:e.locale)??"en"),n=K((e==null?void 0:e.fallback)??"en"),l=W({en:Qf,...e==null?void 0:e.messages});return{name:"vuetify",current:t,fallback:n,messages:l,t:$i(t,n,l),n:Mi(t,n),provide:Fi({current:t,fallback:n,messages:l})}}const fn=Symbol.for("vuetify:locale");function nm(e){return e.name!=null}function lm(e){const t=e!=null&&e.adapter&&nm(e==null?void 0:e.adapter)?e==null?void 0:e.adapter:tm(e),n=om(t,e);return{...t,...n}}function ct(){const e=Ve(fn);if(!e)throw new Error("[Vuetify] Could not find injected locale instance");return e}function am(e){const t=Ve(fn);if(!t)throw new Error("[Vuetify] Could not find injected locale instance");const n=t.provide(e),l=im(n,t.rtl,e),a={...n,...l};return $e(fn,a),a}function om(e,t){const n=W((t==null?void 0:t.rtl)??em),l=h(()=>n.value[e.current.value]??!1);return{isRtl:l,rtl:n,rtlClasses:h(()=>`v-locale--is-${l.value?"rtl":"ltr"}`)}}function im(e,t,n){const l=h(()=>n.rtl??t.value[e.current.value]??!1);return{isRtl:l,rtl:t,rtlClasses:h(()=>`v-locale--is-${l.value?"rtl":"ltr"}`)}}function Oe(){const e=Ve(fn);if(!e)throw new Error("[Vuetify] Could not find injected rtl instance");return{isRtl:e.isRtl,rtlClasses:e.rtlClasses}}const Mn=Symbol.for("vuetify:theme"),he=R({theme:String},"theme"),Tn={defaultTheme:"light",variations:{colors:[],lighten:0,darken:0},themes:{light:{dark:!1,colors:{background:"#FFFFFF",surface:"#FFFFFF","surface-bright":"#FFFFFF","surface-variant":"#424242","on-surface-variant":"#EEEEEE",primary:"#6200EE","primary-darken-1":"#3700B3",secondary:"#03DAC6","secondary-darken-1":"#018786",error:"#B00020",info:"#2196F3",success:"#4CAF50",warning:"#FB8C00"},variables:{"border-color":"#000000","border-opacity":.12,"high-emphasis-opacity":.87,"medium-emphasis-opacity":.6,"disabled-opacity":.38,"idle-opacity":.04,"hover-opacity":.04,"focus-opacity":.12,"selected-opacity":.08,"activated-opacity":.12,"pressed-opacity":.12,"dragged-opacity":.08,"theme-kbd":"#212529","theme-on-kbd":"#FFFFFF","theme-code":"#F5F5F5","theme-on-code":"#000000"}},dark:{dark:!0,colors:{background:"#121212",surface:"#212121","surface-bright":"#ccbfd6","surface-variant":"#a3a3a3","on-surface-variant":"#424242",primary:"#BB86FC","primary-darken-1":"#3700B3",secondary:"#03DAC5","secondary-darken-1":"#03DAC5",error:"#CF6679",info:"#2196F3",success:"#4CAF50",warning:"#FB8C00"},variables:{"border-color":"#FFFFFF","border-opacity":.12,"high-emphasis-opacity":1,"medium-emphasis-opacity":.7,"disabled-opacity":.5,"idle-opacity":.1,"hover-opacity":.04,"focus-opacity":.12,"selected-opacity":.08,"activated-opacity":.12,"pressed-opacity":.16,"dragged-opacity":.08,"theme-kbd":"#212529","theme-on-kbd":"#FFFFFF","theme-code":"#343434","theme-on-code":"#CCCCCC"}}}};function sm(){var n,l;let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Tn;if(!e)return{...Tn,isDisabled:!0};const t={};for(const[a,o]of Object.entries(e.themes??{})){const i=o.dark||a==="dark"?(n=Tn.themes)==null?void 0:n.dark:(l=Tn.themes)==null?void 0:l.light;t[a]=it(i,o)}return it(Tn,{...e,themes:t})}function rm(e){const t=sm(e),n=W(t.defaultTheme),l=W(t.themes),a=h(()=>{const d={};for(const[f,v]of Object.entries(l.value)){const m=d[f]={...v,colors:{...v.colors}};if(t.variations)for(const g of t.variations.colors){const y=m.colors[g];if(y)for(const b of["lighten","darken"]){const p=b==="lighten"?Lf:$f;for(const S of Ct(t.variations[b],1))m.colors[`${g}-${b}-${S}`]=Pi(p(st(y),S))}}for(const g of Object.keys(m.colors)){if(/^on-[a-z]/.test(g)||m.colors[`on-${g}`])continue;const y=`on-${g}`,b=st(m.colors[g]);m.colors[y]=Ri(b)}}return d}),o=h(()=>a.value[n.value]),i=h(()=>{const d=[];o.value.dark&&Ht(d,":root",["color-scheme: dark"]),Ht(d,":root",Oo(o.value));for(const[g,y]of Object.entries(a.value))Ht(d,`.v-theme--${g}`,[`color-scheme: ${y.dark?"dark":"normal"}`,...Oo(y)]);const f=[],v=[],m=new Set(Object.values(a.value).flatMap(g=>Object.keys(g.colors)));for(const g of m)/^on-[a-z]/.test(g)?Ht(v,`.${g}`,[`color: rgb(var(--v-theme-${g})) !important`]):(Ht(f,`.bg-${g}`,[`--v-theme-overlay-multiplier: var(--v-theme-${g}-overlay-multiplier)`,`background-color: rgb(var(--v-theme-${g})) !important`,`color: rgb(var(--v-theme-on-${g})) !important`]),Ht(v,`.text-${g}`,[`color: rgb(var(--v-theme-${g})) !important`]),Ht(v,`.border-${g}`,[`--v-border-color: var(--v-theme-${g})`]));return d.push(...f,...v),d.map((g,y)=>y===0?g:`    ${g}`).join("")});function s(){return{style:[{children:i.value,id:"vuetify-theme-stylesheet",nonce:t.cspNonce||!1}]}}function u(d){if(t.isDisabled)return;const f=d._context.provides.usehead;if(f)if(f.push){const v=f.push(s);Ce&&Z(i,()=>{v.patch(s)})}else Ce?(f.addHeadObjs(h(s)),tt(()=>f.updateDOM())):f.addHeadObjs(s());else{let m=function(){if(typeof document<"u"&&!v){const g=document.createElement("style");g.type="text/css",g.id="vuetify-theme-stylesheet",t.cspNonce&&g.setAttribute("nonce",t.cspNonce),v=g,document.head.appendChild(v)}v&&(v.innerHTML=i.value)},v=Ce?document.getElementById("vuetify-theme-stylesheet"):null;Ce?Z(i,m,{immediate:!0}):m()}}const c=h(()=>t.isDisabled?void 0:`v-theme--${n.value}`);return{install:u,isDisabled:t.isDisabled,name:n,themes:l,current:o,computedThemes:a,themeClasses:c,styles:i,global:{name:n,current:o}}}function ye(e){De("provideTheme");const t=Ve(Mn,null);if(!t)throw new Error("Could not find Vuetify theme injection");const n=h(()=>e.theme??t.name.value),l=h(()=>t.themes.value[n.value]),a=h(()=>t.isDisabled?void 0:`v-theme--${n.value}`),o={...t,name:n,current:l,themeClasses:a};return $e(Mn,o),o}function Di(){De("useTheme");const e=Ve(Mn,null);if(!e)throw new Error("Could not find Vuetify theme injection");return e}function Ht(e,t,n){e.push(`${t} {
`,...n.map(l=>`  ${l};
`),`}
`)}function Oo(e){const t=e.dark?2:1,n=e.dark?1:2,l=[];for(const[a,o]of Object.entries(e.colors)){const i=st(o);l.push(`--v-theme-${a}: ${i.r},${i.g},${i.b}`),a.startsWith("on-")||l.push(`--v-theme-${a}-overlay-multiplier: ${Yl(o)>.18?t:n}`)}for(const[a,o]of Object.entries(e.variables)){const i=typeof o=="string"&&o.startsWith("#")?st(o):void 0,s=i?`${i.r}, ${i.g}, ${i.b}`:void 0;l.push(`--v-${a}: ${s??o}`)}return l}const Zl={"001":1,AD:1,AE:6,AF:6,AG:0,AI:1,AL:1,AM:1,AN:1,AR:1,AS:0,AT:1,AU:1,AX:1,AZ:1,BA:1,BD:0,BE:1,BG:1,BH:6,BM:1,BN:1,BR:0,BS:0,BT:0,BW:0,BY:1,BZ:0,CA:0,CH:1,CL:1,CM:1,CN:1,CO:0,CR:1,CY:1,CZ:1,DE:1,DJ:6,DK:1,DM:0,DO:0,DZ:6,EC:1,EE:1,EG:6,ES:1,ET:0,FI:1,FJ:1,FO:1,FR:1,GB:1,"GB-alt-variant":0,GE:1,GF:1,GP:1,GR:1,GT:0,GU:0,HK:0,HN:0,HR:1,HU:1,ID:0,IE:1,IL:0,IN:0,IQ:6,IR:6,IS:1,IT:1,JM:0,JO:6,JP:0,KE:0,KG:1,KH:0,KR:0,KW:6,KZ:1,LA:0,LB:1,LI:1,LK:1,LT:1,LU:1,LV:1,LY:6,MC:1,MD:1,ME:1,MH:0,MK:1,MM:0,MN:1,MO:0,MQ:1,MT:0,MV:5,MX:0,MY:1,MZ:0,NI:0,NL:1,NO:1,NP:0,NZ:1,OM:6,PA:0,PE:0,PH:0,PK:0,PL:1,PR:0,PT:0,PY:0,QA:6,RE:1,RO:1,RS:1,RU:1,SA:0,SD:6,SE:1,SG:0,SI:1,SK:1,SM:1,SV:0,SY:6,TH:0,TJ:1,TM:1,TR:1,TT:0,TW:0,UA:1,UM:0,US:0,UY:1,UZ:1,VA:1,VE:0,VI:0,VN:1,WS:0,XK:1,YE:0,ZA:0,ZW:0};function um(e,t){const n=[];let l=[];const a=Oi(e),o=Ni(e),i=(a.getDay()-Zl[t.slice(-2).toUpperCase()]+7)%7,s=(o.getDay()-Zl[t.slice(-2).toUpperCase()]+7)%7;for(let u=0;u<i;u++){const c=new Date(a);c.setDate(c.getDate()-(i-u)),l.push(c)}for(let u=1;u<=o.getDate();u++){const c=new Date(e.getFullYear(),e.getMonth(),u);l.push(c),l.length===7&&(n.push(l),l=[])}for(let u=1;u<7-s;u++){const c=new Date(o);c.setDate(c.getDate()+u),l.push(c)}return n.push(l),n}function Oi(e){return new Date(e.getFullYear(),e.getMonth(),1)}function Ni(e){return new Date(e.getFullYear(),e.getMonth()+1,0)}function cm(e){const t=e.split("-").map(Number);return new Date(t[0],t[1]-1,t[2])}const dm=/([12]\d{3}-([1-9]|0[1-9]|1[0-2])-([1-9]|0[1-9]|[12]\d|3[01]))/;function vm(e){if(e==null)return new Date;if(e instanceof Date)return e;if(typeof e=="string"){let t;if(dm.test(e))return cm(e);if(t=Date.parse(e),!isNaN(t))return new Date(t)}return null}const No=new Date(2e3,0,2);function fm(e){const t=Zl[e.slice(-2).toUpperCase()];return Ct(7).map(n=>{const l=new Date(No);return l.setDate(No.getDate()+t+n),new Intl.DateTimeFormat(e,{weekday:"narrow"}).format(l)})}function mm(e,t,n){const l=new Date(e);let a={};switch(t){case"fullDateWithWeekday":a={weekday:"long",day:"numeric",month:"long",year:"numeric"};break;case"normalDateWithWeekday":a={weekday:"short",day:"numeric",month:"short"};break;case"keyboardDate":a={};break;case"monthAndDate":a={month:"long",day:"numeric"};break;case"monthAndYear":a={month:"long",year:"numeric"};break;case"dayOfMonth":a={day:"numeric"};break;case"shortDate":a={year:"numeric"};break;default:a={timeZone:"UTC",timeZoneName:"short"}}return new Intl.DateTimeFormat(n,a).format(l)}function gm(e,t){const n=new Date(e);return n.setDate(n.getDate()+t),n}function hm(e,t){const n=new Date(e);return n.setMonth(n.getMonth()+t),n}function ym(e){return e.getFullYear()}function bm(e){return e.getMonth()}function pm(e){return new Date(e.getFullYear(),0,1)}function km(e){return new Date(e.getFullYear(),11,31)}function Sm(e,t){return Jl(e,t[0])&&Cm(e,t[1])}function wm(e){if(!e||e==null)return!1;const t=new Date(e);return t instanceof Date&&!isNaN(t.getTime())}function Jl(e,t){return e.getTime()>t.getTime()}function Cm(e,t){return e.getTime()<t.getTime()}function zo(e,t){return e.getTime()===t.getTime()}function xm(e,t){return e.getDate()===t.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function Vm(e,t){return e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function _m(e,t,n){const l=new Date(e),a=new Date(t);return n==="month"?l.getMonth()-a.getMonth()+(l.getFullYear()-a.getFullYear())*12:Math.floor((l.getTime()-a.getTime())/(1e3*60*60*24))}function Im(e,t){const n=new Date(e);return n.setFullYear(t),n}function Tm(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate())}function Pm(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate(),23,59,59,999)}class Am{constructor(t){this.locale=t.locale}date(t){return vm(t)}toJsDate(t){return t}addDays(t,n){return gm(t,n)}addMonths(t,n){return hm(t,n)}getWeekArray(t){return um(t,this.locale)}startOfMonth(t){return Oi(t)}endOfMonth(t){return Ni(t)}format(t,n){return mm(t,n,this.locale)}isEqual(t,n){return zo(t,n)}isValid(t){return wm(t)}isWithinRange(t,n){return Sm(t,n)}isAfter(t,n){return Jl(t,n)}isBefore(t,n){return!Jl(t,n)&&!zo(t,n)}isSameDay(t,n){return xm(t,n)}isSameMonth(t,n){return Vm(t,n)}setYear(t,n){return Im(t,n)}getDiff(t,n,l){return _m(t,n,l)}getWeekdays(){return fm(this.locale)}getYear(t){return ym(t)}getMonth(t){return bm(t)}startOfDay(t){return Tm(t)}endOfDay(t){return Pm(t)}startOfYear(t){return pm(t)}endOfYear(t){return km(t)}}const Ho=Symbol.for("vuetify:date-adapter");function Bm(e){return it({adapter:Am,locale:{af:"af-ZA",bg:"bg-BG",ca:"ca-ES",ckb:"",cs:"",de:"de-DE",el:"el-GR",en:"en-US",et:"et-EE",fa:"fa-IR",fi:"fi-FI",hr:"hr-HR",hu:"hu-HU",he:"he-IL",id:"id-ID",it:"it-IT",ja:"ja-JP",ko:"ko-KR",lv:"lv-LV",lt:"lt-LT",nl:"nl-NL",no:"nn-NO",pl:"pl-PL",pt:"pt-PT",ro:"ro-RO",ru:"ru-RU",sk:"sk-SK",sl:"sl-SI",srCyrl:"sr-SP",srLatn:"sr-SP",sv:"sv-SE",th:"th-TH",tr:"tr-TR",az:"az-AZ",uk:"uk-UA",vi:"vi-VN",zhHans:"zh-CN",zhHant:"zh-TW"}},e)}function St(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"content";const n=W(),l=W();if(Ce){const a=new ResizeObserver(o=>{e==null||e(o,a),o.length&&(t==="content"?l.value=o[0].contentRect:l.value=o[0].target.getBoundingClientRect())});nt(()=>{a.disconnect()}),Z(n,(o,i)=>{i&&(a.unobserve(jl(i)),l.value=void 0),o&&a.observe(jl(o))},{flush:"post"})}return{resizeRef:n,contentRect:Ca(l)}}const vl=Symbol.for("vuetify:layout"),zi=Symbol.for("vuetify:layout-item"),jo=1e3,Hi=R({overlaps:{type:Array,default:()=>[]},fullHeight:Boolean},"layout"),yn=R({name:{type:String},order:{type:[Number,String],default:0},absolute:Boolean},"layout-item");function Rm(){const e=Ve(vl);if(!e)throw new Error("[Vuetify] Could not find injected layout");return{getLayoutItem:e.getLayoutItem,mainRect:e.mainRect,mainStyles:e.mainStyles}}function bn(e){const t=Ve(vl);if(!t)throw new Error("[Vuetify] Could not find injected layout");const n=e.id??`layout-item-${We()}`,l=De("useLayoutItem");$e(zi,{id:n});const a=K(!1);$r(()=>a.value=!0),Mr(()=>a.value=!1);const{layoutItemStyles:o,layoutItemScrimStyles:i}=t.register(l,{...e,active:h(()=>a.value?!1:e.active.value),id:n});return nt(()=>t.unregister(n)),{layoutItemStyles:o,layoutRect:t.layoutRect,layoutItemScrimStyles:i}}const Em=(e,t,n,l)=>{let a={top:0,left:0,right:0,bottom:0};const o=[{id:"",layer:{...a}}];for(const i of e){const s=t.get(i),u=n.get(i),c=l.get(i);if(!s||!u||!c)continue;const d={...a,[s.value]:parseInt(a[s.value],10)+(c.value?parseInt(u.value,10):0)};o.push({id:i,layer:d}),a=d}return o};function ji(e){const t=Ve(vl,null),n=h(()=>t?t.rootZIndex.value-100:jo),l=W([]),a=gt(new Map),o=gt(new Map),i=gt(new Map),s=gt(new Map),u=gt(new Map),{resizeRef:c,contentRect:d}=St(),f=h(()=>{const x=new Map,T=e.overlaps??[];for(const w of T.filter(k=>k.includes(":"))){const[k,I]=w.split(":");if(!l.value.includes(k)||!l.value.includes(I))continue;const A=a.get(k),B=a.get(I),E=o.get(k),F=o.get(I);!A||!B||!E||!F||(x.set(I,{position:A.value,amount:parseInt(E.value,10)}),x.set(k,{position:B.value,amount:-parseInt(F.value,10)}))}return x}),v=h(()=>{const x=[...new Set([...i.values()].map(w=>w.value))].sort((w,k)=>w-k),T=[];for(const w of x){const k=l.value.filter(I=>{var A;return((A=i.get(I))==null?void 0:A.value)===w});T.push(...k)}return Em(T,a,o,s)}),m=h(()=>!Array.from(u.values()).some(x=>x.value)),g=h(()=>v.value[v.value.length-1].layer),y=h(()=>({"--v-layout-left":J(g.value.left),"--v-layout-right":J(g.value.right),"--v-layout-top":J(g.value.top),"--v-layout-bottom":J(g.value.bottom),...m.value?void 0:{transition:"none"}})),b=h(()=>v.value.slice(1).map((x,T)=>{let{id:w}=x;const{layer:k}=v.value[T],I=o.get(w),A=a.get(w);return{id:w,...k,size:Number(I.value),position:A.value}})),p=x=>b.value.find(T=>T.id===x),S=De("createLayout"),C=K(!1);Je(()=>{C.value=!0}),$e(vl,{register:(x,T)=>{let{id:w,order:k,position:I,layoutSize:A,elementSize:B,active:E,disableTransitions:F,absolute:X}=T;i.set(w,k),a.set(w,I),o.set(w,A),s.set(w,E),F&&u.set(w,F);const N=Bn(zi,S==null?void 0:S.vnode).indexOf(x);N>-1?l.value.splice(N,0,w):l.value.push(w);const M=h(()=>b.value.findIndex(ae=>ae.id===w)),G=h(()=>n.value+v.value.length*2-M.value*2),U=h(()=>{const ae=I.value==="left"||I.value==="right",re=I.value==="right",ve=I.value==="bottom",ge={[I.value]:0,zIndex:G.value,transform:`translate${ae?"X":"Y"}(${(E.value?0:-110)*(re||ve?-1:1)}%)`,position:X.value||n.value!==jo?"absolute":"fixed",...m.value?void 0:{transition:"none"}};if(!C.value)return ge;const O=b.value[M.value];if(!O)throw new Error(`[Vuetify] Could not find layout item "${w}"`);const me=f.value.get(w);return me&&(O[me.position]+=me.amount),{...ge,height:ae?`calc(100% - ${O.top}px - ${O.bottom}px)`:B.value?`${B.value}px`:void 0,left:re?void 0:`${O.left}px`,right:re?`${O.right}px`:void 0,top:I.value!=="bottom"?`${O.top}px`:void 0,bottom:I.value!=="top"?`${O.bottom}px`:void 0,width:ae?B.value?`${B.value}px`:void 0:`calc(100% - ${O.left}px - ${O.right}px)`}}),z=h(()=>({zIndex:G.value-1}));return{layoutItemStyles:U,layoutItemScrimStyles:z,zIndex:G}},unregister:x=>{i.delete(x),a.delete(x),o.delete(x),s.delete(x),u.delete(x),l.value=l.value.filter(T=>T!==x)},mainRect:g,mainStyles:y,getLayoutItem:p,items:b,layoutRect:d,rootZIndex:n});const _=h(()=>["v-layout",{"v-layout--full-height":e.fullHeight}]),V=h(()=>({zIndex:t?n.value:void 0,position:t?"relative":void 0,overflow:t?"hidden":void 0}));return{layoutClasses:_,layoutStyles:V,getLayoutItem:p,items:b,layoutRect:d,layoutRef:c}}function Ui(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const{blueprint:t,...n}=e,l=it(t,n),{aliases:a={},components:o={},directives:i={}}=l,s=Hf(l.defaults),u=Wf(l.display,l.ssr),c=rm(l.theme),d=Zf(l.icons),f=lm(l.locale),v=Bm(l.date);return{install:g=>{for(const y in i)g.directive(y,i[y]);for(const y in o)g.component(y,o[y]);for(const y in a)g.component(y,ut({...a[y],name:y,aliasName:a[y].name}));if(c.install(g),g.provide(vn,s),g.provide(Kl,u),g.provide(Mn,c),g.provide(ql,d),g.provide(fn,f),g.provide(Ho,v),Ce&&l.ssr)if(g.$nuxt)g.$nuxt.hook("app:suspense:resolve",()=>{u.update()});else{const{mount:y}=g;g.mount=function(){const b=y(...arguments);return xe(()=>u.update()),g.mount=y,b}}We.reset(),g.mixin({computed:{$vuetify(){return gt({defaults:rn.call(this,vn),display:rn.call(this,Kl),theme:rn.call(this,Mn),icons:rn.call(this,ql),locale:rn.call(this,fn),date:rn.call(this,Ho)})}}})},defaults:s,display:u,theme:c,icons:d,locale:f,date:v}}const Lm="3.3.19";Ui.version=Lm;function rn(e){var l,a;const t=this.$,n=((l=t.parent)==null?void 0:l.provides)??((a=t.vnode.appContext)==null?void 0:a.provides);if(n&&e in n)return n[e]}const $m=R({...q(),...Hi({fullHeight:!0}),...he()},"VApp"),Mm=L()({name:"VApp",props:$m(),setup(e,t){let{slots:n}=t;const l=ye(e),{layoutClasses:a,getLayoutItem:o,items:i,layoutRef:s}=ji(e),{rtlClasses:u}=Oe();return j(()=>{var c;return r("div",{ref:s,class:["v-application",l.themeClasses.value,a.value,u.value,e.class],style:[e.style]},[r("div",{class:"v-application__wrap"},[(c=n.default)==null?void 0:c.call(n)])])}),{getLayoutItem:o,items:i,theme:l}}});const ce=R({tag:{type:String,default:"div"}},"tag"),Gi=R({text:String,...q(),...ce()},"VToolbarTitle"),za=L()({name:"VToolbarTitle",props:Gi(),setup(e,t){let{slots:n}=t;return j(()=>{const l=!!(n.default||n.text||e.text);return r(e.tag,{class:["v-toolbar-title",e.class],style:e.style},{default:()=>{var a;return[l&&r("div",{class:"v-toolbar-title__placeholder"},[n.text?n.text():e.text,(a=n.default)==null?void 0:a.call(n)])]}})}),{}}}),Fm=R({disabled:Boolean,group:Boolean,hideOnLeave:Boolean,leaveAbsolute:Boolean,mode:String,origin:String},"transition");function lt(e,t,n){return L()({name:e,props:Fm({mode:n,origin:t}),setup(l,a){let{slots:o}=a;const i={onBeforeEnter(s){l.origin&&(s.style.transformOrigin=l.origin)},onLeave(s){if(l.leaveAbsolute){const{offsetTop:u,offsetLeft:c,offsetWidth:d,offsetHeight:f}=s;s._transitionInitialStyles={position:s.style.position,top:s.style.top,left:s.style.left,width:s.style.width,height:s.style.height},s.style.position="absolute",s.style.top=`${u}px`,s.style.left=`${c}px`,s.style.width=`${d}px`,s.style.height=`${f}px`}l.hideOnLeave&&s.style.setProperty("display","none","important")},onAfterLeave(s){if(l.leaveAbsolute&&(s!=null&&s._transitionInitialStyles)){const{position:u,top:c,left:d,width:f,height:v}=s._transitionInitialStyles;delete s._transitionInitialStyles,s.style.position=u||"",s.style.top=c||"",s.style.left=d||"",s.style.width=f||"",s.style.height=v||""}}};return()=>{const s=l.group?Fr:Rt;return Jt(s,{name:l.disabled?"":e,css:!l.disabled,...l.group?void 0:{mode:l.mode},...l.disabled?{}:i},o.default)}}})}function Wi(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"in-out";return L()({name:e,props:{mode:{type:String,default:n},disabled:Boolean},setup(l,a){let{slots:o}=a;return()=>Jt(Rt,{name:l.disabled?"":e,css:!l.disabled,...l.disabled?{}:t},o.default)}})}function Yi(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";const n=(arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1)?"width":"height",l=ui(`offset-${n}`);return{onBeforeEnter(i){i._parent=i.parentNode,i._initialStyle={transition:i.style.transition,overflow:i.style.overflow,[n]:i.style[n]}},onEnter(i){const s=i._initialStyle;i.style.setProperty("transition","none","important"),i.style.overflow="hidden";const u=`${i[l]}px`;i.style[n]="0",i.offsetHeight,i.style.transition=s.transition,e&&i._parent&&i._parent.classList.add(e),requestAnimationFrame(()=>{i.style[n]=u})},onAfterEnter:o,onEnterCancelled:o,onLeave(i){i._initialStyle={transition:"",overflow:i.style.overflow,[n]:i.style[n]},i.style.overflow="hidden",i.style[n]=`${i[l]}px`,i.offsetHeight,requestAnimationFrame(()=>i.style[n]="0")},onAfterLeave:a,onLeaveCancelled:a};function a(i){e&&i._parent&&i._parent.classList.remove(e),o(i)}function o(i){const s=i._initialStyle[n];i.style.overflow=i._initialStyle.overflow,s!=null&&(i.style[n]=s),delete i._initialStyle}}const Dm=R({target:Object},"v-dialog-transition"),pl=L()({name:"VDialogTransition",props:Dm(),setup(e,t){let{slots:n}=t;const l={onBeforeEnter(a){a.style.pointerEvents="none",a.style.visibility="hidden"},async onEnter(a,o){var v;await new Promise(m=>requestAnimationFrame(m)),await new Promise(m=>requestAnimationFrame(m)),a.style.visibility="";const{x:i,y:s,sx:u,sy:c,speed:d}=Go(e.target,a),f=Ut(a,[{transform:`translate(${i}px, ${s}px) scale(${u}, ${c})`,opacity:0},{}],{duration:225*d,easing:Ff});(v=Uo(a))==null||v.forEach(m=>{Ut(m,[{opacity:0},{opacity:0,offset:.33},{}],{duration:225*2*d,easing:$n})}),f.finished.then(()=>o())},onAfterEnter(a){a.style.removeProperty("pointer-events")},onBeforeLeave(a){a.style.pointerEvents="none"},async onLeave(a,o){var v;await new Promise(m=>requestAnimationFrame(m));const{x:i,y:s,sx:u,sy:c,speed:d}=Go(e.target,a);Ut(a,[{},{transform:`translate(${i}px, ${s}px) scale(${u}, ${c})`,opacity:0}],{duration:125*d,easing:Df}).finished.then(()=>o()),(v=Uo(a))==null||v.forEach(m=>{Ut(m,[{},{opacity:0,offset:.2},{opacity:0}],{duration:125*2*d,easing:$n})})},onAfterLeave(a){a.style.removeProperty("pointer-events")}};return()=>e.target?r(Rt,Y({name:"dialog-transition"},l,{css:!1}),n):r(Rt,{name:"dialog-transition"},n)}});function Uo(e){var n;const t=(n=e.querySelector(":scope > .v-card, :scope > .v-sheet, :scope > .v-list"))==null?void 0:n.children;return t&&[...t]}function Go(e,t){const n=e.getBoundingClientRect(),l=Ea(t),[a,o]=getComputedStyle(t).transformOrigin.split(" ").map(p=>parseFloat(p)),[i,s]=getComputedStyle(t).getPropertyValue("--v-overlay-anchor-origin").split(" ");let u=n.left+n.width/2;i==="left"||s==="left"?u-=n.width/2:(i==="right"||s==="right")&&(u+=n.width/2);let c=n.top+n.height/2;i==="top"||s==="top"?c-=n.height/2:(i==="bottom"||s==="bottom")&&(c+=n.height/2);const d=n.width/l.width,f=n.height/l.height,v=Math.max(1,d,f),m=d/v||0,g=f/v||0,y=l.width*l.height/(window.innerWidth*window.innerHeight),b=y>.12?Math.min(1.5,(y-.12)*10+1):1;return{x:u-(a+l.left),y:c-(o+l.top),sx:m,sy:g,speed:b}}const Om=lt("fab-transition","center center","out-in"),Nm=lt("dialog-bottom-transition"),zm=lt("dialog-top-transition"),Ql=lt("fade-transition"),Ha=lt("scale-transition"),Hm=lt("scroll-x-transition"),jm=lt("scroll-x-reverse-transition"),Um=lt("scroll-y-transition"),Gm=lt("scroll-y-reverse-transition"),Wm=lt("slide-x-transition"),Ym=lt("slide-x-reverse-transition"),ja=lt("slide-y-transition"),Km=lt("slide-y-reverse-transition"),kl=Wi("expand-transition",Yi()),Ua=Wi("expand-x-transition",Yi("",!0)),qm=R({defaults:Object,disabled:Boolean,reset:[Number,String],root:[Boolean,String],scoped:Boolean},"VDefaultsProvider"),pe=L(!1)({name:"VDefaultsProvider",props:qm(),setup(e,t){let{slots:n}=t;const{defaults:l,disabled:a,reset:o,root:i,scoped:s}=Sa(e);return Ee(l,{reset:o,root:i,scoped:s,disabled:a}),()=>{var u;return(u=n.default)==null?void 0:u.call(n)}}});const dt=R({height:[Number,String],maxHeight:[Number,String],maxWidth:[Number,String],minHeight:[Number,String],minWidth:[Number,String],width:[Number,String]},"dimension");function vt(e){return{dimensionStyles:h(()=>({height:J(e.height),maxHeight:J(e.maxHeight),maxWidth:J(e.maxWidth),minHeight:J(e.minHeight),minWidth:J(e.minWidth),width:J(e.width)}))}}function Xm(e){return{aspectStyles:h(()=>{const t=Number(e.aspectRatio);return t?{paddingBottom:String(1/t*100)+"%"}:void 0})}}const Ki=R({aspectRatio:[String,Number],contentClass:String,inline:Boolean,...q(),...dt()},"VResponsive"),ea=L()({name:"VResponsive",props:Ki(),setup(e,t){let{slots:n}=t;const{aspectStyles:l}=Xm(e),{dimensionStyles:a}=vt(e);return j(()=>{var o;return r("div",{class:["v-responsive",{"v-responsive--inline":e.inline},e.class],style:[a.value,e.style]},[r("div",{class:"v-responsive__sizer",style:l.value},null),(o=n.additional)==null?void 0:o.call(n),n.default&&r("div",{class:["v-responsive__content",e.contentClass]},[n.default()])])}),{}}}),Pt=R({transition:{type:[Boolean,String,Object],default:"fade-transition",validator:e=>e!==!0}},"transition"),ht=(e,t)=>{let{slots:n}=t;const{transition:l,disabled:a,...o}=e,{component:i=Rt,...s}=typeof l=="object"?l:{};return Jt(i,Y(typeof l=="string"?{name:a?"":l}:s,o,{disabled:a}),n)};function Zm(e,t){if(!Pa)return;const n=t.modifiers||{},l=t.value,{handler:a,options:o}=typeof l=="object"?l:{handler:l,options:{}},i=new IntersectionObserver(function(){var f;let s=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],u=arguments.length>1?arguments[1]:void 0;const c=(f=e._observe)==null?void 0:f[t.instance.$.uid];if(!c)return;const d=s.some(v=>v.isIntersecting);a&&(!n.quiet||c.init)&&(!n.once||d||c.init)&&a(d,s,u),d&&n.once?qi(e,t):c.init=!0},o);e._observe=Object(e._observe),e._observe[t.instance.$.uid]={init:!1,observer:i},i.observe(e)}function qi(e,t){var l;const n=(l=e._observe)==null?void 0:l[t.instance.$.uid];n&&(n.observer.unobserve(e),delete e._observe[t.instance.$.uid])}const jn={mounted:Zm,unmounted:qi},Xi=R({alt:String,cover:Boolean,eager:Boolean,gradient:String,lazySrc:String,options:{type:Object,default:()=>({root:void 0,rootMargin:void 0,threshold:void 0})},sizes:String,src:{type:[String,Object],default:""},srcset:String,...Ki(),...q(),...Pt()},"VImg"),qt=L()({name:"VImg",directives:{intersect:jn},props:Xi(),emits:{loadstart:e=>!0,load:e=>!0,error:e=>!0},setup(e,t){let{emit:n,slots:l}=t;const a=K(""),o=W(),i=K(e.eager?"loading":"idle"),s=K(),u=K(),c=h(()=>e.src&&typeof e.src=="object"?{src:e.src.src,srcset:e.srcset||e.src.srcset,lazySrc:e.lazySrc||e.src.lazySrc,aspect:Number(e.aspectRatio||e.src.aspect||0)}:{src:e.src,srcset:e.srcset,lazySrc:e.lazySrc,aspect:Number(e.aspectRatio||0)}),d=h(()=>c.value.aspect||s.value/u.value||0);Z(()=>e.src,()=>{f(i.value!=="idle")}),Z(d,(w,k)=>{!w&&k&&o.value&&b(o.value)}),xa(()=>f());function f(w){if(!(e.eager&&w)&&!(Pa&&!w&&!e.eager)){if(i.value="loading",c.value.lazySrc){const k=new Image;k.src=c.value.lazySrc,b(k,null)}c.value.src&&xe(()=>{var k,I;if(n("loadstart",((k=o.value)==null?void 0:k.currentSrc)||c.value.src),(I=o.value)!=null&&I.complete){if(o.value.naturalWidth||m(),i.value==="error")return;d.value||b(o.value,null),v()}else d.value||b(o.value),g()})}}function v(){var w;g(),i.value="loaded",n("load",((w=o.value)==null?void 0:w.currentSrc)||c.value.src)}function m(){var w;i.value="error",n("error",((w=o.value)==null?void 0:w.currentSrc)||c.value.src)}function g(){const w=o.value;w&&(a.value=w.currentSrc||w.src)}let y=-1;function b(w){let k=arguments.length>1&&arguments[1]!==void 0?arguments[1]:100;const I=()=>{clearTimeout(y);const{naturalHeight:A,naturalWidth:B}=w;A||B?(s.value=B,u.value=A):!w.complete&&i.value==="loading"&&k!=null?y=window.setTimeout(I,k):(w.currentSrc.endsWith(".svg")||w.currentSrc.startsWith("data:image/svg+xml"))&&(s.value=1,u.value=1)};I()}const p=h(()=>({"v-img__img--cover":e.cover,"v-img__img--contain":!e.cover})),S=()=>{var I;if(!c.value.src||i.value==="idle")return null;const w=r("img",{class:["v-img__img",p.value],src:c.value.src,srcset:c.value.srcset,alt:e.alt,sizes:e.sizes,ref:o,onLoad:v,onError:m},null),k=(I=l.sources)==null?void 0:I.call(l);return r(ht,{transition:e.transition,appear:!0},{default:()=>[ne(k?r("picture",{class:"v-img__picture"},[k,w]):w,[[Pe,i.value==="loaded"]])]})},C=()=>r(ht,{transition:e.transition},{default:()=>[c.value.lazySrc&&i.value!=="loaded"&&r("img",{class:["v-img__img","v-img__img--preload",p.value],src:c.value.lazySrc,alt:e.alt},null)]}),_=()=>l.placeholder?r(ht,{transition:e.transition,appear:!0},{default:()=>[(i.value==="loading"||i.value==="error"&&!l.error)&&r("div",{class:"v-img__placeholder"},[l.placeholder()])]}):null,V=()=>l.error?r(ht,{transition:e.transition,appear:!0},{default:()=>[i.value==="error"&&r("div",{class:"v-img__error"},[l.error()])]}):null,x=()=>e.gradient?r("div",{class:"v-img__gradient",style:{backgroundImage:`linear-gradient(${e.gradient})`}},null):null,T=K(!1);{const w=Z(d,k=>{k&&(requestAnimationFrame(()=>{requestAnimationFrame(()=>{T.value=!0})}),w())})}return j(()=>{const[w]=ea.filterProps(e);return ne(r(ea,Y({class:["v-img",{"v-img--booting":!T.value},e.class],style:[{width:J(e.width==="auto"?s.value:e.width)},e.style]},w,{aspectRatio:d.value,"aria-label":e.alt,role:e.alt?"img":void 0}),{additional:()=>r(oe,null,[r(S,null,null),r(C,null,null),r(x,null,null),r(_,null,null),r(V,null,null)]),default:l.default}),[[Ze("intersect"),{handler:f,options:e.options},null,{once:!0}]])}),{currentSrc:a,image:o,state:i,naturalWidth:s,naturalHeight:u}}}),at=R({border:[Boolean,Number,String]},"border");function ft(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{borderClasses:h(()=>{const l=Hn(e)?e.value:e.border,a=[];if(l===!0||l==="")a.push(`${t}--border`);else if(typeof l=="string"||l===0)for(const o of String(l).split(" "))a.push(`border-${o}`);return a})}}function Ga(e){return Ba(()=>{const t=[],n={};if(e.value.background)if(Ao(e.value.background)){if(n.backgroundColor=e.value.background,!e.value.text){const l=st(e.value.background);if(l.a==null||l.a===1){const a=Ri(l);n.color=a,n.caretColor=a}}}else t.push(`bg-${e.value.background}`);return e.value.text&&(Ao(e.value.text)?(n.color=e.value.text,n.caretColor=e.value.text):t.push(`text-${e.value.text}`)),{colorClasses:t,colorStyles:n}})}function Ge(e,t){const n=h(()=>({text:Hn(e)?e.value:t?e[t]:null})),{colorClasses:l,colorStyles:a}=Ga(n);return{textColorClasses:l,textColorStyles:a}}function Be(e,t){const n=h(()=>({background:Hn(e)?e.value:t?e[t]:null})),{colorClasses:l,colorStyles:a}=Ga(n);return{backgroundColorClasses:l,backgroundColorStyles:a}}const Me=R({elevation:{type:[Number,String],validator(e){const t=parseInt(e);return!isNaN(t)&&t>=0&&t<=24}}},"elevation");function He(e){return{elevationClasses:h(()=>{const n=Hn(e)?e.value:e.elevation,l=[];return n==null||l.push(`elevation-${n}`),l})}}const Ie=R({rounded:{type:[Boolean,Number,String],default:void 0}},"rounded");function Ae(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{roundedClasses:h(()=>{const l=Hn(e)?e.value:e.rounded,a=[];if(l===!0||l==="")a.push(`${t}--rounded`);else if(typeof l=="string"||l===0)for(const o of String(l).split(" "))a.push(`rounded-${o}`);return a})}}const Jm=[null,"prominent","default","comfortable","compact"],Zi=R({absolute:Boolean,collapse:Boolean,color:String,density:{type:String,default:"default",validator:e=>Jm.includes(e)},extended:Boolean,extensionHeight:{type:[Number,String],default:48},flat:Boolean,floating:Boolean,height:{type:[Number,String],default:64},image:String,title:String,...at(),...q(),...Me(),...Ie(),...ce({tag:"header"}),...he()},"VToolbar"),ta=L()({name:"VToolbar",props:Zi(),setup(e,t){var m;let{slots:n}=t;const{backgroundColorClasses:l,backgroundColorStyles:a}=Be(D(e,"color")),{borderClasses:o}=ft(e),{elevationClasses:i}=He(e),{roundedClasses:s}=Ae(e),{themeClasses:u}=ye(e),{rtlClasses:c}=Oe(),d=K(!!(e.extended||(m=n.extension)!=null&&m.call(n))),f=h(()=>parseInt(Number(e.height)+(e.density==="prominent"?Number(e.height):0)-(e.density==="comfortable"?8:0)-(e.density==="compact"?16:0),10)),v=h(()=>d.value?parseInt(Number(e.extensionHeight)+(e.density==="prominent"?Number(e.extensionHeight):0)-(e.density==="comfortable"?4:0)-(e.density==="compact"?8:0),10):0);return Ee({VBtn:{variant:"text"}}),j(()=>{var p;const g=!!(e.title||n.title),y=!!(n.image||e.image),b=(p=n.extension)==null?void 0:p.call(n);return d.value=!!(e.extended||b),r(e.tag,{class:["v-toolbar",{"v-toolbar--absolute":e.absolute,"v-toolbar--collapse":e.collapse,"v-toolbar--flat":e.flat,"v-toolbar--floating":e.floating,[`v-toolbar--density-${e.density}`]:!0},l.value,o.value,i.value,s.value,u.value,c.value,e.class],style:[a.value,e.style]},{default:()=>[y&&r("div",{key:"image",class:"v-toolbar__image"},[n.image?r(pe,{key:"image-defaults",disabled:!e.image,defaults:{VImg:{cover:!0,src:e.image}}},n.image):r(qt,{key:"image-img",cover:!0,src:e.image},null)]),r(pe,{defaults:{VTabs:{height:J(f.value)}}},{default:()=>{var S,C,_;return[r("div",{class:"v-toolbar__content",style:{height:J(f.value)}},[n.prepend&&r("div",{class:"v-toolbar__prepend"},[(S=n.prepend)==null?void 0:S.call(n)]),g&&r(za,{key:"title",text:e.title},{text:n.title}),(C=n.default)==null?void 0:C.call(n),n.append&&r("div",{class:"v-toolbar__append"},[(_=n.append)==null?void 0:_.call(n)])])]}}),r(pe,{defaults:{VTabs:{height:J(v.value)}}},{default:()=>[r(kl,null,{default:()=>[d.value&&r("div",{class:"v-toolbar__extension",style:{height:J(v.value)}},[b])]})]})]})}),{contentHeight:f,extensionHeight:v}}}),Qm=R({scrollTarget:{type:String},scrollThreshold:{type:[String,Number],default:300}},"scroll");function eg(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};const{canScroll:n}=t;let l=0;const a=W(null),o=K(0),i=K(0),s=K(0),u=K(!1),c=K(!1),d=h(()=>Number(e.scrollThreshold)),f=h(()=>Ue((d.value-o.value)/d.value||0)),v=()=>{const m=a.value;!m||n&&!n.value||(l=o.value,o.value="window"in m?m.pageYOffset:m.scrollTop,c.value=o.value<l,s.value=Math.abs(o.value-d.value))};return Z(c,()=>{i.value=i.value||o.value}),Z(u,()=>{i.value=0}),Je(()=>{Z(()=>e.scrollTarget,m=>{var y;const g=m?document.querySelector(m):window;g&&g!==a.value&&((y=a.value)==null||y.removeEventListener("scroll",v),a.value=g,a.value.addEventListener("scroll",v,{passive:!0}))},{immediate:!0})}),nt(()=>{var m;(m=a.value)==null||m.removeEventListener("scroll",v)}),n&&Z(n,v,{immediate:!0}),{scrollThreshold:d,currentScroll:o,currentThreshold:s,isScrollActive:u,scrollRatio:f,isScrollingUp:c,savedScroll:i}}function tn(){const e=K(!1);return Je(()=>{window.requestAnimationFrame(()=>{e.value=!0})}),{ssrBootStyles:h(()=>e.value?void 0:{transition:"none !important"}),isBooted:Ca(e)}}const tg=R({scrollBehavior:String,modelValue:{type:Boolean,default:!0},location:{type:String,default:"top",validator:e=>["top","bottom"].includes(e)},...Zi(),...yn(),...Qm(),height:{type:[Number,String],default:64}},"VAppBar"),ng=L()({name:"VAppBar",props:tg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=W(),a=ue(e,"modelValue"),o=h(()=>{var S;const p=new Set(((S=e.scrollBehavior)==null?void 0:S.split(" "))??[]);return{hide:p.has("hide"),inverted:p.has("inverted"),collapse:p.has("collapse"),elevate:p.has("elevate"),fadeImage:p.has("fade-image")}}),i=h(()=>{const p=o.value;return p.hide||p.inverted||p.collapse||p.elevate||p.fadeImage||!a.value}),{currentScroll:s,scrollThreshold:u,isScrollingUp:c,scrollRatio:d}=eg(e,{canScroll:i}),f=h(()=>e.collapse||o.value.collapse&&(o.value.inverted?d.value>0:d.value===0)),v=h(()=>e.flat||o.value.elevate&&(o.value.inverted?s.value>0:s.value===0)),m=h(()=>o.value.fadeImage?o.value.inverted?1-d.value:d.value:void 0),g=h(()=>{var C,_;if(o.value.hide&&o.value.inverted)return 0;const p=((C=l.value)==null?void 0:C.contentHeight)??0,S=((_=l.value)==null?void 0:_.extensionHeight)??0;return p+S});Et(h(()=>!!e.scrollBehavior),()=>{tt(()=>{o.value.hide?o.value.inverted?a.value=s.value>u.value:a.value=c.value||s.value<u.value:a.value=!0})});const{ssrBootStyles:y}=tn(),{layoutItemStyles:b}=bn({id:e.name,order:h(()=>parseInt(e.order,10)),position:D(e,"location"),layoutSize:g,elementSize:K(void 0),active:a,absolute:D(e,"absolute")});return j(()=>{const[p]=ta.filterProps(e);return r(ta,Y({ref:l,class:["v-app-bar",{"v-app-bar--bottom":e.location==="bottom"},e.class],style:[{...b.value,"--v-toolbar-image-opacity":m.value,height:void 0,...y.value},e.style]},p,{collapse:f.value,flat:v.value}),n)}),{}}});const lg=[null,"default","comfortable","compact"],Fe=R({density:{type:String,default:"default",validator:e=>lg.includes(e)}},"density");function Ye(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{densityClasses:h(()=>`${t}--density-${e.density}`)}}const ag=["elevated","flat","tonal","outlined","text","plain"];function nn(e,t){return r(oe,null,[e&&r("span",{key:"overlay",class:`${t}__overlay`},null),r("span",{key:"underlay",class:`${t}__underlay`},null)])}const mt=R({color:String,variant:{type:String,default:"elevated",validator:e=>ag.includes(e)}},"variant");function ln(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();const n=h(()=>{const{variant:o}=ot(e);return`${t}--variant-${o}`}),{colorClasses:l,colorStyles:a}=Ga(h(()=>{const{variant:o,color:i}=ot(e);return{[["elevated","flat"].includes(o)?"background":"text"]:i}}));return{colorClasses:l,colorStyles:a,variantClasses:n}}const Ji=R({divided:Boolean,...at(),...q(),...Fe(),...Me(),...Ie(),...ce(),...he(),...mt()},"VBtnGroup"),na=L()({name:"VBtnGroup",props:Ji(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{densityClasses:a}=Ye(e),{borderClasses:o}=ft(e),{elevationClasses:i}=He(e),{roundedClasses:s}=Ae(e);Ee({VBtn:{height:"auto",color:D(e,"color"),density:D(e,"density"),flat:!0,variant:D(e,"variant")}}),j(()=>r(e.tag,{class:["v-btn-group",{"v-btn-group--divided":e.divided},l.value,o.value,a.value,i.value,s.value,e.class],style:e.style},n))}}),pn=R({modelValue:{type:null,default:void 0},multiple:Boolean,mandatory:[Boolean,String],max:Number,selectedClass:String,disabled:Boolean},"group"),kn=R({value:null,disabled:Boolean,selectedClass:String},"group-item");function Sn(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;const l=De("useGroupItem");if(!l)throw new Error("[Vuetify] useGroupItem composable must be used inside a component setup function");const a=We();$e(Symbol.for(`${t.description}:id`),a);const o=Ve(t,null);if(!o){if(!n)return o;throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${t.description}`)}const i=D(e,"value"),s=h(()=>!!(o.disabled.value||e.disabled));o.register({id:a,value:i,disabled:s},l),nt(()=>{o.unregister(a)});const u=h(()=>o.isSelected(a)),c=h(()=>u.value&&[o.selectedClass.value,e.selectedClass]);return Z(u,d=>{l.emit("group:selected",{value:d})}),{id:a,isSelected:u,toggle:()=>o.select(a,!u.value),select:d=>o.select(a,d),selectedClass:c,value:i,disabled:s,group:o}}function an(e,t){let n=!1;const l=gt([]),a=ue(e,"modelValue",[],v=>v==null?[]:Qi(l,et(v)),v=>{const m=ig(l,v);return e.multiple?m:m[0]}),o=De("useGroup");function i(v,m){const g=v,y=Symbol.for(`${t.description}:id`),p=Bn(y,o==null?void 0:o.vnode).indexOf(m);p>-1?l.splice(p,0,g):l.push(g)}function s(v){if(n)return;u();const m=l.findIndex(g=>g.id===v);l.splice(m,1)}function u(){const v=l.find(m=>!m.disabled);v&&e.mandatory==="force"&&!a.value.length&&(a.value=[v.id])}Je(()=>{u()}),nt(()=>{n=!0});function c(v,m){const g=l.find(y=>y.id===v);if(!(m&&(g!=null&&g.disabled)))if(e.multiple){const y=a.value.slice(),b=y.findIndex(S=>S===v),p=~b;if(m=m??!p,p&&e.mandatory&&y.length<=1||!p&&e.max!=null&&y.length+1>e.max)return;b<0&&m?y.push(v):b>=0&&!m&&y.splice(b,1),a.value=y}else{const y=a.value.includes(v);if(e.mandatory&&y)return;a.value=m??!y?[v]:[]}}function d(v){if(e.multiple,a.value.length){const m=a.value[0],g=l.findIndex(p=>p.id===m);let y=(g+v)%l.length,b=l[y];for(;b.disabled&&y!==g;)y=(y+v)%l.length,b=l[y];if(b.disabled)return;a.value=[l[y].id]}else{const m=l.find(g=>!g.disabled);m&&(a.value=[m.id])}}const f={register:i,unregister:s,selected:a,select:c,disabled:D(e,"disabled"),prev:()=>d(l.length-1),next:()=>d(1),isSelected:v=>a.value.includes(v),selectedClass:h(()=>e.selectedClass),items:h(()=>l),getItemIndex:v=>og(l,v)};return $e(t,f),f}function og(e,t){const n=Qi(e,[t]);return n.length?e.findIndex(l=>l.id===n[0]):-1}function Qi(e,t){const n=[];return t.forEach(l=>{const a=e.find(i=>hn(l,i.value)),o=e[l];(a==null?void 0:a.value)!=null?n.push(a.id):o!=null&&n.push(o.id)}),n}function ig(e,t){const n=[];return t.forEach(l=>{const a=e.findIndex(o=>o.id===l);if(~a){const o=e[a];n.push(o.value!=null?o.value:a)}}),n}const Wa=Symbol.for("vuetify:v-btn-toggle"),sg=R({...Ji(),...pn()},"VBtnToggle"),rg=L()({name:"VBtnToggle",props:sg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{isSelected:l,next:a,prev:o,select:i,selected:s}=an(e,Wa);return j(()=>{const[u]=na.filterProps(e);return r(na,Y({class:["v-btn-toggle",e.class]},u,{style:e.style}),{default:()=>{var c;return[(c=n.default)==null?void 0:c.call(n,{isSelected:l,next:a,prev:o,select:i,selected:s})]}})}),{next:a,prev:o,select:i}}});const ug=["x-small","small","default","large","x-large"],At=R({size:{type:[String,Number],default:"default"}},"size");function wn(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return Ba(()=>{let n,l;return rl(ug,e.size)?n=`${t}--size-${e.size}`:e.size&&(l={width:J(e.size),height:J(e.size)}),{sizeClasses:n,sizeStyles:l}})}const cg=R({color:String,start:Boolean,end:Boolean,icon:se,...q(),...At(),...ce({tag:"i"}),...he()},"VIcon"),Se=L()({name:"VIcon",props:cg(),setup(e,t){let{attrs:n,slots:l}=t;const a=W(),{themeClasses:o}=ye(e),{iconData:i}=Jf(h(()=>a.value||e.icon)),{sizeClasses:s}=wn(e),{textColorClasses:u,textColorStyles:c}=Ge(D(e,"color"));return j(()=>{var f,v;const d=(f=l.default)==null?void 0:f.call(l);return d&&(a.value=(v=bi(d).filter(m=>m.type===Dr&&m.children&&typeof m.children=="string")[0])==null?void 0:v.children),r(i.value.component,{tag:e.tag,icon:i.value.icon,class:["v-icon","notranslate",o.value,s.value,u.value,{"v-icon--clickable":!!n.onClick,"v-icon--start":e.start,"v-icon--end":e.end},e.class],style:[s.value?void 0:{fontSize:J(e.size),height:J(e.size),width:J(e.size)},c.value,e.style],role:n.onClick?"button":void 0,"aria-hidden":!n.onClick},{default:()=>[d]})}),{}}});function Ya(e,t){const n=W(),l=K(!1);if(Pa){const a=new IntersectionObserver(o=>{e==null||e(o,a),l.value=!!o.find(i=>i.isIntersecting)},t);nt(()=>{a.disconnect()}),Z(n,(o,i)=>{i&&(a.unobserve(i),l.value=!1),o&&a.observe(o)},{flush:"post"})}return{intersectionRef:n,isIntersecting:l}}const dg=R({bgColor:String,color:String,indeterminate:[Boolean,String],modelValue:{type:[Number,String],default:0},rotate:{type:[Number,String],default:0},width:{type:[Number,String],default:4},...q(),...At(),...ce({tag:"div"}),...he()},"VProgressCircular"),Ka=L()({name:"VProgressCircular",props:dg(),setup(e,t){let{slots:n}=t;const l=20,a=2*Math.PI*l,o=W(),{themeClasses:i}=ye(e),{sizeClasses:s,sizeStyles:u}=wn(e),{textColorClasses:c,textColorStyles:d}=Ge(D(e,"color")),{textColorClasses:f,textColorStyles:v}=Ge(D(e,"bgColor")),{intersectionRef:m,isIntersecting:g}=Ya(),{resizeRef:y,contentRect:b}=St(),p=h(()=>Math.max(0,Math.min(100,parseFloat(e.modelValue)))),S=h(()=>Number(e.width)),C=h(()=>u.value?Number(e.size):b.value?b.value.width:Math.max(S.value,32)),_=h(()=>l/(1-S.value/C.value)*2),V=h(()=>S.value/C.value*_.value),x=h(()=>J((100-p.value)/100*a));return tt(()=>{m.value=o.value,y.value=o.value}),j(()=>r(e.tag,{ref:o,class:["v-progress-circular",{"v-progress-circular--indeterminate":!!e.indeterminate,"v-progress-circular--visible":g.value,"v-progress-circular--disable-shrink":e.indeterminate==="disable-shrink"},i.value,s.value,c.value,e.class],style:[u.value,d.value,e.style],role:"progressbar","aria-valuemin":"0","aria-valuemax":"100","aria-valuenow":e.indeterminate?void 0:p.value},{default:()=>[r("svg",{style:{transform:`rotate(calc(-90deg + ${Number(e.rotate)}deg))`},xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${_.value} ${_.value}`},[r("circle",{class:["v-progress-circular__underlay",f.value],style:v.value,fill:"transparent",cx:"50%",cy:"50%",r:l,"stroke-width":V.value,"stroke-dasharray":a,"stroke-dashoffset":0},null),r("circle",{class:"v-progress-circular__overlay",fill:"transparent",cx:"50%",cy:"50%",r:l,"stroke-width":V.value,"stroke-dasharray":a,"stroke-dashoffset":x.value},null)]),n.default&&r("div",{class:"v-progress-circular__content"},[n.default({value:p.value})])]})),{}}});const Wo={center:"center",top:"bottom",bottom:"top",left:"right",right:"left"},Mt=R({location:String},"location");function Ft(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,n=arguments.length>2?arguments[2]:void 0;const{isRtl:l}=Oe();return{locationStyles:h(()=>{if(!e.location)return{};const{side:o,align:i}=Gl(e.location.split(" ").length>1?e.location:`${e.location} center`,l.value);function s(c){return n?n(c):0}const u={};return o!=="center"&&(t?u[Wo[o]]=`calc(100% - ${s(o)}px)`:u[o]=0),i!=="center"?t?u[Wo[i]]=`calc(100% - ${s(i)}px)`:u[i]=0:(o==="center"?u.top=u.left="50%":u[{top:"left",bottom:"left",left:"top",right:"top"}[o]]="50%",u.transform={top:"translateX(-50%)",bottom:"translateX(-50%)",left:"translateY(-50%)",right:"translateY(-50%)",center:"translate(-50%, -50%)"}[o]),u})}}const vg=R({absolute:Boolean,active:{type:Boolean,default:!0},bgColor:String,bgOpacity:[Number,String],bufferValue:{type:[Number,String],default:0},clickable:Boolean,color:String,height:{type:[Number,String],default:4},indeterminate:Boolean,max:{type:[Number,String],default:100},modelValue:{type:[Number,String],default:0},reverse:Boolean,stream:Boolean,striped:Boolean,roundedBar:Boolean,...q(),...Mt({location:"top"}),...Ie(),...ce(),...he()},"VProgressLinear"),qa=L()({name:"VProgressLinear",props:vg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{isRtl:a,rtlClasses:o}=Oe(),{themeClasses:i}=ye(e),{locationStyles:s}=Ft(e),{textColorClasses:u,textColorStyles:c}=Ge(e,"color"),{backgroundColorClasses:d,backgroundColorStyles:f}=Be(h(()=>e.bgColor||e.color)),{backgroundColorClasses:v,backgroundColorStyles:m}=Be(e,"color"),{roundedClasses:g}=Ae(e),{intersectionRef:y,isIntersecting:b}=Ya(),p=h(()=>parseInt(e.max,10)),S=h(()=>parseInt(e.height,10)),C=h(()=>parseFloat(e.bufferValue)/p.value*100),_=h(()=>parseFloat(l.value)/p.value*100),V=h(()=>a.value!==e.reverse),x=h(()=>e.indeterminate?"fade-transition":"slide-x-transition"),T=h(()=>e.bgOpacity==null?e.bgOpacity:parseFloat(e.bgOpacity));function w(k){if(!y.value)return;const{left:I,right:A,width:B}=y.value.getBoundingClientRect(),E=V.value?B-k.clientX+(A-B):k.clientX-I;l.value=Math.round(E/B*p.value)}return j(()=>r(e.tag,{ref:y,class:["v-progress-linear",{"v-progress-linear--absolute":e.absolute,"v-progress-linear--active":e.active&&b.value,"v-progress-linear--reverse":V.value,"v-progress-linear--rounded":e.rounded,"v-progress-linear--rounded-bar":e.roundedBar,"v-progress-linear--striped":e.striped},g.value,i.value,o.value,e.class],style:[{bottom:e.location==="bottom"?0:void 0,top:e.location==="top"?0:void 0,height:e.active?J(S.value):0,"--v-progress-linear-height":J(S.value),...s.value},e.style],role:"progressbar","aria-hidden":e.active?"false":"true","aria-valuemin":"0","aria-valuemax":e.max,"aria-valuenow":e.indeterminate?void 0:_.value,onClick:e.clickable&&w},{default:()=>[e.stream&&r("div",{key:"stream",class:["v-progress-linear__stream",u.value],style:{...c.value,[V.value?"left":"right"]:J(-S.value),borderTop:`${J(S.value/2)} dotted`,opacity:T.value,top:`calc(50% - ${J(S.value/4)})`,width:J(100-C.value,"%"),"--v-progress-linear-stream-to":J(S.value*(V.value?1:-1))}},null),r("div",{class:["v-progress-linear__background",d.value],style:[f.value,{opacity:T.value,width:J(e.stream?C.value:100,"%")}]},null),r(Rt,{name:x.value},{default:()=>[e.indeterminate?r("div",{class:"v-progress-linear__indeterminate"},[["long","short"].map(k=>r("div",{key:k,class:["v-progress-linear__indeterminate",k,v.value],style:m.value},null))]):r("div",{class:["v-progress-linear__determinate",v.value],style:[m.value,{width:J(_.value,"%")}]},null)]}),n.default&&r("div",{class:"v-progress-linear__content"},[n.default({value:_.value,buffer:C.value})])]})),{}}}),Xa=R({loading:[Boolean,String]},"loader");function Sl(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{loaderClasses:h(()=>({[`${t}--loading`]:e.loading}))}}function Za(e,t){var l;let{slots:n}=t;return r("div",{class:`${e.name}__loader`},[((l=n.default)==null?void 0:l.call(n,{color:e.color,isActive:e.active}))||r(qa,{active:e.active,color:e.color,height:"2",indeterminate:!0},null)])}const fg=["static","relative","fixed","absolute","sticky"],Cn=R({position:{type:String,validator:e=>fg.includes(e)}},"position");function xn(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{positionClasses:h(()=>e.position?`${t}--${e.position}`:void 0)}}function es(){var e,t;return(t=(e=De("useRouter"))==null?void 0:e.proxy)==null?void 0:t.$router}function Un(e,t){const n=Or("RouterLink"),l=h(()=>!!(e.href||e.to)),a=h(()=>(l==null?void 0:l.value)||bo(t,"click")||bo(e,"click"));if(typeof n=="string")return{isLink:l,isClickable:a,href:D(e,"href")};const o=e.to?n.useLink(e):void 0;return{isLink:l,isClickable:a,route:o==null?void 0:o.route,navigate:o==null?void 0:o.navigate,isActive:o&&h(()=>{var i,s;return e.exact?(i=o.isExactActive)==null?void 0:i.value:(s=o.isActive)==null?void 0:s.value}),href:h(()=>e.to?o==null?void 0:o.route.value.href:e.href)}}const Gn=R({href:String,replace:Boolean,to:[String,Object],exact:Boolean},"router");let Fl=!1;function mg(e,t){let n=!1,l,a;Ce&&(xe(()=>{window.addEventListener("popstate",o),l=e==null?void 0:e.beforeEach((i,s,u)=>{Fl?n?t(u):u():setTimeout(()=>n?t(u):u()),Fl=!0}),a=e==null?void 0:e.afterEach(()=>{Fl=!1})}),Xe(()=>{window.removeEventListener("popstate",o),l==null||l(),a==null||a()}));function o(i){var s;(s=i.state)!=null&&s.replaced||(n=!0,setTimeout(()=>n=!1))}}function gg(e,t){Z(()=>{var n;return(n=e.isActive)==null?void 0:n.value},n=>{e.isLink.value&&n&&t&&xe(()=>{t(!0)})},{immediate:!0})}const la=Symbol("rippleStop"),hg=80;function Yo(e,t){e.style.transform=t,e.style.webkitTransform=t}function aa(e){return e.constructor.name==="TouchEvent"}function ts(e){return e.constructor.name==="KeyboardEvent"}const yg=function(e,t){var f;let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},l=0,a=0;if(!ts(e)){const v=t.getBoundingClientRect(),m=aa(e)?e.touches[e.touches.length-1]:e;l=m.clientX-v.left,a=m.clientY-v.top}let o=0,i=.3;(f=t._ripple)!=null&&f.circle?(i=.15,o=t.clientWidth/2,o=n.center?o:o+Math.sqrt((l-o)**2+(a-o)**2)/4):o=Math.sqrt(t.clientWidth**2+t.clientHeight**2)/2;const s=`${(t.clientWidth-o*2)/2}px`,u=`${(t.clientHeight-o*2)/2}px`,c=n.center?s:`${l-o}px`,d=n.center?u:`${a-o}px`;return{radius:o,scale:i,x:c,y:d,centerX:s,centerY:u}},fl={show(e,t){var m;let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};if(!((m=t==null?void 0:t._ripple)!=null&&m.enabled))return;const l=document.createElement("span"),a=document.createElement("span");l.appendChild(a),l.className="v-ripple__container",n.class&&(l.className+=` ${n.class}`);const{radius:o,scale:i,x:s,y:u,centerX:c,centerY:d}=yg(e,t,n),f=`${o*2}px`;a.className="v-ripple__animation",a.style.width=f,a.style.height=f,t.appendChild(l);const v=window.getComputedStyle(t);v&&v.position==="static"&&(t.style.position="relative",t.dataset.previousPosition="static"),a.classList.add("v-ripple__animation--enter"),a.classList.add("v-ripple__animation--visible"),Yo(a,`translate(${s}, ${u}) scale3d(${i},${i},${i})`),a.dataset.activated=String(performance.now()),setTimeout(()=>{a.classList.remove("v-ripple__animation--enter"),a.classList.add("v-ripple__animation--in"),Yo(a,`translate(${c}, ${d}) scale3d(1,1,1)`)},0)},hide(e){var o;if(!((o=e==null?void 0:e._ripple)!=null&&o.enabled))return;const t=e.getElementsByClassName("v-ripple__animation");if(t.length===0)return;const n=t[t.length-1];if(n.dataset.isHiding)return;n.dataset.isHiding="true";const l=performance.now()-Number(n.dataset.activated),a=Math.max(250-l,0);setTimeout(()=>{n.classList.remove("v-ripple__animation--in"),n.classList.add("v-ripple__animation--out"),setTimeout(()=>{var s;e.getElementsByClassName("v-ripple__animation").length===1&&e.dataset.previousPosition&&(e.style.position=e.dataset.previousPosition,delete e.dataset.previousPosition),((s=n.parentNode)==null?void 0:s.parentNode)===e&&e.removeChild(n.parentNode)},300)},a)}};function ns(e){return typeof e>"u"||!!e}function Fn(e){const t={},n=e.currentTarget;if(!(!(n!=null&&n._ripple)||n._ripple.touched||e[la])){if(e[la]=!0,aa(e))n._ripple.touched=!0,n._ripple.isTouch=!0;else if(n._ripple.isTouch)return;if(t.center=n._ripple.centered||ts(e),n._ripple.class&&(t.class=n._ripple.class),aa(e)){if(n._ripple.showTimerCommit)return;n._ripple.showTimerCommit=()=>{fl.show(e,n,t)},n._ripple.showTimer=window.setTimeout(()=>{var l;(l=n==null?void 0:n._ripple)!=null&&l.showTimerCommit&&(n._ripple.showTimerCommit(),n._ripple.showTimerCommit=null)},hg)}else fl.show(e,n,t)}}function Ko(e){e[la]=!0}function Qe(e){const t=e.currentTarget;if(t!=null&&t._ripple){if(window.clearTimeout(t._ripple.showTimer),e.type==="touchend"&&t._ripple.showTimerCommit){t._ripple.showTimerCommit(),t._ripple.showTimerCommit=null,t._ripple.showTimer=window.setTimeout(()=>{Qe(e)});return}window.setTimeout(()=>{t._ripple&&(t._ripple.touched=!1)}),fl.hide(t)}}function ls(e){const t=e.currentTarget;t!=null&&t._ripple&&(t._ripple.showTimerCommit&&(t._ripple.showTimerCommit=null),window.clearTimeout(t._ripple.showTimer))}let Dn=!1;function as(e){!Dn&&(e.keyCode===mo.enter||e.keyCode===mo.space)&&(Dn=!0,Fn(e))}function os(e){Dn=!1,Qe(e)}function is(e){Dn&&(Dn=!1,Qe(e))}function ss(e,t,n){const{value:l,modifiers:a}=t,o=ns(l);if(o||fl.hide(e),e._ripple=e._ripple??{},e._ripple.enabled=o,e._ripple.centered=a.center,e._ripple.circle=a.circle,sl(l)&&l.class&&(e._ripple.class=l.class),o&&!n){if(a.stop){e.addEventListener("touchstart",Ko,{passive:!0}),e.addEventListener("mousedown",Ko);return}e.addEventListener("touchstart",Fn,{passive:!0}),e.addEventListener("touchend",Qe,{passive:!0}),e.addEventListener("touchmove",ls,{passive:!0}),e.addEventListener("touchcancel",Qe),e.addEventListener("mousedown",Fn),e.addEventListener("mouseup",Qe),e.addEventListener("mouseleave",Qe),e.addEventListener("keydown",as),e.addEventListener("keyup",os),e.addEventListener("blur",is),e.addEventListener("dragstart",Qe,{passive:!0})}else!o&&n&&rs(e)}function rs(e){e.removeEventListener("mousedown",Fn),e.removeEventListener("touchstart",Fn),e.removeEventListener("touchend",Qe),e.removeEventListener("touchmove",ls),e.removeEventListener("touchcancel",Qe),e.removeEventListener("mouseup",Qe),e.removeEventListener("mouseleave",Qe),e.removeEventListener("keydown",as),e.removeEventListener("keyup",os),e.removeEventListener("dragstart",Qe),e.removeEventListener("blur",is)}function bg(e,t){ss(e,t,!1)}function pg(e){delete e._ripple,rs(e)}function kg(e,t){if(t.value===t.oldValue)return;const n=ns(t.oldValue);ss(e,t,n)}const Dt={mounted:bg,unmounted:pg,updated:kg},Ja=R({active:{type:Boolean,default:void 0},symbol:{type:null,default:Wa},flat:Boolean,icon:[Boolean,String,Function,Object],prependIcon:se,appendIcon:se,block:Boolean,stacked:Boolean,ripple:{type:[Boolean,Object],default:!0},text:String,...at(),...q(),...Fe(),...dt(),...Me(),...kn(),...Xa(),...Mt(),...Cn(),...Ie(),...Gn(),...At(),...ce({tag:"button"}),...he(),...mt({variant:"elevated"})},"VBtn"),Ke=L()({name:"VBtn",directives:{Ripple:Dt},props:Ja(),emits:{"group:selected":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const{themeClasses:a}=ye(e),{borderClasses:o}=ft(e),{colorClasses:i,colorStyles:s,variantClasses:u}=ln(e),{densityClasses:c}=Ye(e),{dimensionStyles:d}=vt(e),{elevationClasses:f}=He(e),{loaderClasses:v}=Sl(e),{locationStyles:m}=Ft(e),{positionClasses:g}=xn(e),{roundedClasses:y}=Ae(e),{sizeClasses:b,sizeStyles:p}=wn(e),S=Sn(e,e.symbol,!1),C=Un(e,n),_=h(()=>{var k;return e.active!==void 0?e.active:C.isLink.value?(k=C.isActive)==null?void 0:k.value:S==null?void 0:S.isSelected.value}),V=h(()=>(S==null?void 0:S.disabled.value)||e.disabled),x=h(()=>e.variant==="elevated"&&!(e.disabled||e.flat||e.border)),T=h(()=>{if(e.value!==void 0)return Object(e.value)===e.value?JSON.stringify(e.value,null,0):e.value});function w(k){var I;V.value||C.isLink.value&&(k.metaKey||k.ctrlKey||k.shiftKey||k.button!==0||n.target==="_blank")||((I=C.navigate)==null||I.call(C,k),S==null||S.toggle())}return gg(C,S==null?void 0:S.select),j(()=>{var F,X;const k=C.isLink.value?"a":e.tag,I=!!(e.prependIcon||l.prepend),A=!!(e.appendIcon||l.append),B=!!(e.icon&&e.icon!==!0),E=(S==null?void 0:S.isSelected.value)&&(!C.isLink.value||((F=C.isActive)==null?void 0:F.value))||!S||((X=C.isActive)==null?void 0:X.value);return ne(r(k,{type:k==="a"?void 0:"button",class:["v-btn",S==null?void 0:S.selectedClass.value,{"v-btn--active":_.value,"v-btn--block":e.block,"v-btn--disabled":V.value,"v-btn--elevated":x.value,"v-btn--flat":e.flat,"v-btn--icon":!!e.icon,"v-btn--loading":e.loading,"v-btn--stacked":e.stacked},a.value,o.value,E?i.value:void 0,c.value,f.value,v.value,g.value,y.value,b.value,u.value,e.class],style:[E?s.value:void 0,d.value,m.value,p.value,e.style],disabled:V.value||void 0,href:C.href.value,onClick:w,value:T.value},{default:()=>{var $;return[nn(!0,"v-btn"),!e.icon&&I&&r("span",{key:"prepend",class:"v-btn__prepend"},[l.prepend?r(pe,{key:"prepend-defaults",disabled:!e.prependIcon,defaults:{VIcon:{icon:e.prependIcon}}},l.prepend):r(Se,{key:"prepend-icon",icon:e.prependIcon},null)]),r("span",{class:"v-btn__content","data-no-activator":""},[!l.default&&B?r(Se,{key:"content-icon",icon:e.icon},null):r(pe,{key:"content-defaults",disabled:!B,defaults:{VIcon:{icon:e.icon}}},{default:()=>{var N;return[((N=l.default)==null?void 0:N.call(l))??e.text]}})]),!e.icon&&A&&r("span",{key:"append",class:"v-btn__append"},[l.append?r(pe,{key:"append-defaults",disabled:!e.appendIcon,defaults:{VIcon:{icon:e.appendIcon}}},l.append):r(Se,{key:"append-icon",icon:e.appendIcon},null)]),!!e.loading&&r("span",{key:"loader",class:"v-btn__loader"},[(($=l.loader)==null?void 0:$.call(l))??r(Ka,{color:typeof e.loading=="boolean"?void 0:e.loading,indeterminate:!0,size:"23",width:"2"},null)])]}}),[[Ze("ripple"),!V.value&&e.ripple,null]])}),{}}}),Sg=R({...Ja({icon:"$menu",variant:"text"})},"VAppBarNavIcon"),wg=L()({name:"VAppBarNavIcon",props:Sg(),setup(e,t){let{slots:n}=t;return j(()=>r(Ke,Y(e,{class:["v-app-bar-nav-icon"]}),n)),{}}}),Cg=L()({name:"VAppBarTitle",props:Gi(),setup(e,t){let{slots:n}=t;return j(()=>r(za,Y(e,{class:"v-app-bar-title"}),n)),{}}});const us=yt("v-alert-title"),xg=["success","info","warning","error"],Vg=R({border:{type:[Boolean,String],validator:e=>typeof e=="boolean"||["top","end","bottom","start"].includes(e)},borderColor:String,closable:Boolean,closeIcon:{type:se,default:"$close"},closeLabel:{type:String,default:"$vuetify.close"},icon:{type:[Boolean,String,Function,Object],default:null},modelValue:{type:Boolean,default:!0},prominent:Boolean,title:String,text:String,type:{type:String,validator:e=>xg.includes(e)},...q(),...Fe(),...dt(),...Me(),...Mt(),...Cn(),...Ie(),...ce(),...he(),...mt({variant:"flat"})},"VAlert"),_g=L()({name:"VAlert",props:Vg(),emits:{"click:close":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{emit:n,slots:l}=t;const a=ue(e,"modelValue"),o=h(()=>{if(e.icon!==!1)return e.type?e.icon??`$${e.type}`:e.icon}),i=h(()=>({color:e.color??e.type,variant:e.variant})),{themeClasses:s}=ye(e),{colorClasses:u,colorStyles:c,variantClasses:d}=ln(i),{densityClasses:f}=Ye(e),{dimensionStyles:v}=vt(e),{elevationClasses:m}=He(e),{locationStyles:g}=Ft(e),{positionClasses:y}=xn(e),{roundedClasses:b}=Ae(e),{textColorClasses:p,textColorStyles:S}=Ge(D(e,"borderColor")),{t:C}=ct(),_=h(()=>({"aria-label":C(e.closeLabel),onClick(V){a.value=!1,n("click:close",V)}}));return()=>{const V=!!(l.prepend||o.value),x=!!(l.title||e.title),T=!!(l.close||e.closable);return a.value&&r(e.tag,{class:["v-alert",e.border&&{"v-alert--border":!!e.border,[`v-alert--border-${e.border===!0?"start":e.border}`]:!0},{"v-alert--prominent":e.prominent},s.value,u.value,f.value,m.value,y.value,b.value,d.value,e.class],style:[c.value,v.value,g.value,e.style],role:"alert"},{default:()=>{var w,k;return[nn(!1,"v-alert"),e.border&&r("div",{key:"border",class:["v-alert__border",p.value],style:S.value},null),V&&r("div",{key:"prepend",class:"v-alert__prepend"},[l.prepend?r(pe,{key:"prepend-defaults",disabled:!o.value,defaults:{VIcon:{density:e.density,icon:o.value,size:e.prominent?44:28}}},l.prepend):r(Se,{key:"prepend-icon",density:e.density,icon:o.value,size:e.prominent?44:28},null)]),r("div",{class:"v-alert__content"},[x&&r(us,{key:"title"},{default:()=>{var I;return[((I=l.title)==null?void 0:I.call(l))??e.title]}}),((w=l.text)==null?void 0:w.call(l))??e.text,(k=l.default)==null?void 0:k.call(l)]),l.append&&r("div",{key:"append",class:"v-alert__append"},[l.append()]),T&&r("div",{key:"close",class:"v-alert__close"},[l.close?r(pe,{key:"close-defaults",defaults:{VBtn:{icon:e.closeIcon,size:"x-small",variant:"text"}}},{default:()=>{var I;return[(I=l.close)==null?void 0:I.call(l,{props:_.value})]}}):r(Ke,Y({key:"close-btn",icon:e.closeIcon,size:"x-small",variant:"text"},_.value),null)])]}})}}});const Ig=R({text:String,clickable:Boolean,...q(),...he()},"VLabel"),Vn=L()({name:"VLabel",props:Ig(),setup(e,t){let{slots:n}=t;return j(()=>{var l;return r("label",{class:["v-label",{"v-label--clickable":e.clickable},e.class],style:e.style},[e.text,(l=n.default)==null?void 0:l.call(n)])}),{}}});const cs=Symbol.for("vuetify:selection-control-group"),Qa=R({color:String,disabled:{type:Boolean,default:null},defaultsTarget:String,error:Boolean,id:String,inline:Boolean,falseIcon:se,trueIcon:se,ripple:{type:Boolean,default:!0},multiple:{type:Boolean,default:null},name:String,readonly:Boolean,modelValue:null,type:String,valueComparator:{type:Function,default:hn},...q(),...Fe(),...he()},"SelectionControlGroup"),Tg=R({...Qa({defaultsTarget:"VSelectionControl"})},"VSelectionControlGroup"),ds=L()({name:"VSelectionControlGroup",props:Tg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),a=We(),o=h(()=>e.id||`v-selection-control-group-${a}`),i=h(()=>e.name||o.value),s=new Set;return $e(cs,{modelValue:l,forceUpdate:()=>{s.forEach(u=>u())},onForceUpdate:u=>{s.add(u),Xe(()=>{s.delete(u)})}}),Ee({[e.defaultsTarget]:{color:D(e,"color"),disabled:D(e,"disabled"),density:D(e,"density"),error:D(e,"error"),inline:D(e,"inline"),modelValue:l,multiple:h(()=>!!e.multiple||e.multiple==null&&Array.isArray(l.value)),name:i,falseIcon:D(e,"falseIcon"),trueIcon:D(e,"trueIcon"),readonly:D(e,"readonly"),ripple:D(e,"ripple"),type:D(e,"type"),valueComparator:D(e,"valueComparator")}}),j(()=>{var u;return r("div",{class:["v-selection-control-group",{"v-selection-control-group--inline":e.inline},e.class],style:e.style,role:e.type==="radio"?"radiogroup":void 0},[(u=n.default)==null?void 0:u.call(n)])}),{}}}),wl=R({label:String,trueValue:null,falseValue:null,value:null,...q(),...Qa()},"VSelectionControl");function Pg(e){const t=Ve(cs,void 0),{densityClasses:n}=Ye(e),l=ue(e,"modelValue"),a=h(()=>e.trueValue!==void 0?e.trueValue:e.value!==void 0?e.value:!0),o=h(()=>e.falseValue!==void 0?e.falseValue:!1),i=h(()=>!!e.multiple||e.multiple==null&&Array.isArray(l.value)),s=h({get(){const m=t?t.modelValue.value:l.value;return i.value?m.some(g=>e.valueComparator(g,a.value)):e.valueComparator(m,a.value)},set(m){if(e.readonly)return;const g=m?a.value:o.value;let y=g;i.value&&(y=m?[...et(l.value),g]:et(l.value).filter(b=>!e.valueComparator(b,a.value))),t?t.modelValue.value=y:l.value=y}}),{textColorClasses:u,textColorStyles:c}=Ge(h(()=>s.value&&!e.error&&!e.disabled?e.color:void 0)),{backgroundColorClasses:d,backgroundColorStyles:f}=Be(h(()=>s.value&&!e.error&&!e.disabled?e.color:void 0)),v=h(()=>s.value?e.trueIcon:e.falseIcon);return{group:t,densityClasses:n,trueValue:a,falseValue:o,model:s,textColorClasses:u,textColorStyles:c,backgroundColorClasses:d,backgroundColorStyles:f,icon:v}}const Xt=L()({name:"VSelectionControl",directives:{Ripple:Dt},inheritAttrs:!1,props:wl(),emits:{"update:modelValue":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const{group:a,densityClasses:o,icon:i,model:s,textColorClasses:u,textColorStyles:c,backgroundColorClasses:d,backgroundColorStyles:f,trueValue:v}=Pg(e),m=We(),g=h(()=>e.id||`input-${m}`),y=K(!1),b=K(!1),p=W();a==null||a.onForceUpdate(()=>{p.value&&(p.value.checked=s.value)});function S(V){y.value=!0,dn(V.target,":focus-visible")!==!1&&(b.value=!0)}function C(){y.value=!1,b.value=!1}function _(V){e.readonly&&a&&xe(()=>a.forceUpdate()),s.value=V.target.checked}return j(()=>{var k,I;const V=l.label?l.label({label:e.label,props:{for:g.value}}):e.label,[x,T]=Qt(n),w=r("input",Y({ref:p,checked:s.value,disabled:!!(e.readonly||e.disabled),id:g.value,onBlur:C,onFocus:S,onInput:_,"aria-disabled":!!(e.readonly||e.disabled),type:e.type,value:v.value,name:e.name,"aria-checked":e.type==="checkbox"?s.value:void 0},T),null);return r("div",Y({class:["v-selection-control",{"v-selection-control--dirty":s.value,"v-selection-control--disabled":e.disabled,"v-selection-control--error":e.error,"v-selection-control--focused":y.value,"v-selection-control--focus-visible":b.value,"v-selection-control--inline":e.inline},o.value,e.class]},x,{style:e.style}),[r("div",{class:["v-selection-control__wrapper",u.value],style:c.value},[(k=l.default)==null?void 0:k.call(l,{backgroundColorClasses:d,backgroundColorStyles:f}),ne(r("div",{class:["v-selection-control__input"]},[((I=l.input)==null?void 0:I.call(l,{model:s,textColorClasses:u,textColorStyles:c,backgroundColorClasses:d,backgroundColorStyles:f,inputNode:w,icon:i.value,props:{onFocus:S,onBlur:C,id:g.value}}))??r(oe,null,[i.value&&r(Se,{key:"icon",icon:i.value},null),w])]),[[Ze("ripple"),e.ripple&&[!e.disabled&&!e.readonly,null,["center","circle"]]]])]),V&&r(Vn,{for:g.value,clickable:!0,onClick:A=>A.stopPropagation()},{default:()=>[V]})])}),{isFocused:y,input:p}}}),vs=R({indeterminate:Boolean,indeterminateIcon:{type:se,default:"$checkboxIndeterminate"},...wl({falseIcon:"$checkboxOff",trueIcon:"$checkboxOn"})},"VCheckboxBtn"),mn=L()({name:"VCheckboxBtn",props:vs(),emits:{"update:modelValue":e=>!0,"update:indeterminate":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"indeterminate"),a=ue(e,"modelValue");function o(u){l.value&&(l.value=!1)}const i=h(()=>l.value?e.indeterminateIcon:e.falseIcon),s=h(()=>l.value?e.indeterminateIcon:e.trueIcon);return j(()=>{const u=rt(Xt.filterProps(e)[0],["modelValue"]);return r(Xt,Y(u,{modelValue:a.value,"onUpdate:modelValue":[c=>a.value=c,o],class:["v-checkbox-btn",e.class],style:e.style,type:"checkbox",falseIcon:i.value,trueIcon:s.value,"aria-checked":l.value?"mixed":void 0}),n)}),{}}});function fs(e){const{t}=ct();function n(l){let{name:a}=l;const o={prepend:"prependAction",prependInner:"prependAction",append:"appendAction",appendInner:"appendAction",clear:"clear"}[a],i=e[`onClick:${a}`],s=i&&o?t(`$vuetify.input.${o}`,e.label??""):void 0;return r(Se,{icon:e[`${a}Icon`],"aria-label":s,onClick:i},null)}return{InputIcon:n}}const Ag=R({active:Boolean,color:String,messages:{type:[Array,String],default:()=>[]},...q(),...Pt({transition:{component:ja,leaveAbsolute:!0,group:!0}})},"VMessages"),ms=L()({name:"VMessages",props:Ag(),setup(e,t){let{slots:n}=t;const l=h(()=>et(e.messages)),{textColorClasses:a,textColorStyles:o}=Ge(h(()=>e.color));return j(()=>r(ht,{transition:e.transition,tag:"div",class:["v-messages",a.value,e.class],style:[o.value,e.style],role:"alert","aria-live":"polite"},{default:()=>[e.active&&l.value.map((i,s)=>r("div",{class:"v-messages__message",key:`${s}-${l.value}`},[n.message?n.message({message:i}):i]))]})),{}}}),Cl=R({focused:Boolean,"onUpdate:focused":kt()},"focus");function Ot(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();const n=ue(e,"focused"),l=h(()=>({[`${t}--focused`]:n.value}));function a(){n.value=!0}function o(){n.value=!1}return{focusClasses:l,isFocused:n,focus:a,blur:o}}const gs=Symbol.for("vuetify:form"),Bg=R({disabled:Boolean,fastFail:Boolean,readonly:Boolean,modelValue:{type:Boolean,default:null},validateOn:{type:String,default:"input"}},"form");function Rg(e){const t=ue(e,"modelValue"),n=h(()=>e.disabled),l=h(()=>e.readonly),a=K(!1),o=W([]),i=W([]);async function s(){const d=[];let f=!0;i.value=[],a.value=!0;for(const v of o.value){const m=await v.validate();if(m.length>0&&(f=!1,d.push({id:v.id,errorMessages:m})),!f&&e.fastFail)break}return i.value=d,a.value=!1,{valid:f,errors:i.value}}function u(){o.value.forEach(d=>d.reset())}function c(){o.value.forEach(d=>d.resetValidation())}return Z(o,()=>{let d=0,f=0;const v=[];for(const m of o.value)m.isValid===!1?(f++,v.push({id:m.id,errorMessages:m.errorMessages})):m.isValid===!0&&d++;i.value=v,t.value=f>0?!1:d===o.value.length?!0:null},{deep:!0}),$e(gs,{register:d=>{let{id:f,validate:v,reset:m,resetValidation:g}=d;o.value.some(y=>y.id===f),o.value.push({id:f,validate:v,reset:m,resetValidation:g,isValid:null,errorMessages:[]})},unregister:d=>{o.value=o.value.filter(f=>f.id!==d)},update:(d,f,v)=>{const m=o.value.find(g=>g.id===d);m&&(m.isValid=f,m.errorMessages=v)},isDisabled:n,isReadonly:l,isValidating:a,isValid:t,items:o,validateOn:D(e,"validateOn")}),{errors:i,isDisabled:n,isReadonly:l,isValidating:a,isValid:t,items:o,validate:s,reset:u,resetValidation:c}}function xl(){return Ve(gs,null)}const hs=R({disabled:{type:Boolean,default:null},error:Boolean,errorMessages:{type:[Array,String],default:()=>[]},maxErrors:{type:[Number,String],default:1},name:String,label:String,readonly:{type:Boolean,default:null},rules:{type:Array,default:()=>[]},modelValue:null,validateOn:String,validationValue:null,...Cl()},"validation");function ys(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt(),n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:We();const l=ue(e,"modelValue"),a=h(()=>e.validationValue===void 0?l.value:e.validationValue),o=xl(),i=W([]),s=K(!0),u=h(()=>!!(et(l.value===""?null:l.value).length||et(a.value===""?null:a.value).length)),c=h(()=>!!(e.disabled??(o==null?void 0:o.isDisabled.value))),d=h(()=>!!(e.readonly??(o==null?void 0:o.isReadonly.value))),f=h(()=>e.errorMessages.length?et(e.errorMessages).slice(0,Math.max(0,+e.maxErrors)):i.value),v=h(()=>{let _=(e.validateOn??(o==null?void 0:o.validateOn.value))||"input";_==="lazy"&&(_="input lazy");const V=new Set((_==null?void 0:_.split(" "))??[]);return{blur:V.has("blur")||V.has("input"),input:V.has("input"),submit:V.has("submit"),lazy:V.has("lazy")}}),m=h(()=>e.error||e.errorMessages.length?!1:e.rules.length?s.value?i.value.length||v.value.lazy?null:!0:!i.value.length:!0),g=K(!1),y=h(()=>({[`${t}--error`]:m.value===!1,[`${t}--dirty`]:u.value,[`${t}--disabled`]:c.value,[`${t}--readonly`]:d.value})),b=h(()=>e.name??ot(n));xa(()=>{o==null||o.register({id:b.value,validate:C,reset:p,resetValidation:S})}),nt(()=>{o==null||o.unregister(b.value)}),Je(async()=>{v.value.lazy||await C(!0),o==null||o.update(b.value,m.value,f.value)}),Et(()=>v.value.input,()=>{Z(a,()=>{if(a.value!=null)C();else if(e.focused){const _=Z(()=>e.focused,V=>{V||C(),_()})}})}),Et(()=>v.value.blur,()=>{Z(()=>e.focused,_=>{_||C()})}),Z(m,()=>{o==null||o.update(b.value,m.value,f.value)});function p(){l.value=null,xe(S)}function S(){s.value=!0,v.value.lazy?i.value=[]:C(!0)}async function C(){let _=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;const V=[];g.value=!0;for(const x of e.rules){if(V.length>=+(e.maxErrors??1))break;const w=await(typeof x=="function"?x:()=>x)(a.value);if(w!==!0){if(w!==!1&&typeof w!="string"){console.warn(`${w} is not a valid value. Rule functions must return boolean true or a string.`);continue}V.push(w||"")}}return i.value=V,g.value=!1,s.value=_,i.value}return{errorMessages:f,isDirty:u,isDisabled:c,isReadonly:d,isPristine:s,isValid:m,isValidating:g,reset:p,resetValidation:S,validate:C,validationClasses:y}}const Bt=R({id:String,appendIcon:se,centerAffix:{type:Boolean,default:!0},prependIcon:se,hideDetails:[Boolean,String],hint:String,persistentHint:Boolean,messages:{type:[Array,String],default:()=>[]},direction:{type:String,default:"horizontal",validator:e=>["horizontal","vertical"].includes(e)},"onClick:prepend":kt(),"onClick:append":kt(),...q(),...Fe(),...hs()},"VInput"),Ne=L()({name:"VInput",props:{...Bt()},emits:{"update:modelValue":e=>!0},setup(e,t){let{attrs:n,slots:l,emit:a}=t;const{densityClasses:o}=Ye(e),{rtlClasses:i}=Oe(),{InputIcon:s}=fs(e),u=We(),c=h(()=>e.id||`input-${u}`),d=h(()=>`${c.value}-messages`),{errorMessages:f,isDirty:v,isDisabled:m,isReadonly:g,isPristine:y,isValid:b,isValidating:p,reset:S,resetValidation:C,validate:_,validationClasses:V}=ys(e,"v-input",c),x=h(()=>({id:c,messagesId:d,isDirty:v,isDisabled:m,isReadonly:g,isPristine:y,isValid:b,isValidating:p,reset:S,resetValidation:C,validate:_})),T=h(()=>{var w;return(w=e.errorMessages)!=null&&w.length||!y.value&&f.value.length?f.value:e.hint&&(e.persistentHint||e.focused)?e.hint:e.messages});return j(()=>{var B,E,F,X;const w=!!(l.prepend||e.prependIcon),k=!!(l.append||e.appendIcon),I=T.value.length>0,A=!e.hideDetails||e.hideDetails==="auto"&&(I||!!l.details);return r("div",{class:["v-input",`v-input--${e.direction}`,{"v-input--center-affix":e.centerAffix},o.value,i.value,V.value,e.class],style:e.style},[w&&r("div",{key:"prepend",class:"v-input__prepend"},[(B=l.prepend)==null?void 0:B.call(l,x.value),e.prependIcon&&r(s,{key:"prepend-icon",name:"prepend"},null)]),l.default&&r("div",{class:"v-input__control"},[(E=l.default)==null?void 0:E.call(l,x.value)]),k&&r("div",{key:"append",class:"v-input__append"},[e.appendIcon&&r(s,{key:"append-icon",name:"append"},null),(F=l.append)==null?void 0:F.call(l,x.value)]),A&&r("div",{class:"v-input__details"},[r(ms,{id:d.value,active:I,messages:T.value},{message:l.message}),(X=l.details)==null?void 0:X.call(l,x.value)])])}),{reset:S,resetValidation:C,validate:_}}}),Eg=R({...Bt(),...rt(vs(),["inline"])},"VCheckbox"),Lg=L()({name:"VCheckbox",inheritAttrs:!1,props:Eg(),emits:{"update:modelValue":e=>!0,"update:focused":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const a=ue(e,"modelValue"),{isFocused:o,focus:i,blur:s}=Ot(e),u=We(),c=h(()=>e.id||`checkbox-${u}`);return j(()=>{const[d,f]=Qt(n),[v,m]=Ne.filterProps(e),[g,y]=mn.filterProps(e);return r(Ne,Y({class:["v-checkbox",e.class]},d,v,{modelValue:a.value,"onUpdate:modelValue":b=>a.value=b,id:c.value,focused:o.value,style:e.style}),{...l,default:b=>{let{id:p,messagesId:S,isDisabled:C,isReadonly:_}=b;return r(mn,Y(g,{id:p.value,"aria-describedby":S.value,disabled:C.value,readonly:_.value},f,{modelValue:a.value,"onUpdate:modelValue":V=>a.value=V,onFocus:i,onBlur:s}),l)}})}),{}}});const $g=R({start:Boolean,end:Boolean,icon:se,image:String,...q(),...Fe(),...Ie(),...At(),...ce(),...he(),...mt({variant:"flat"})},"VAvatar"),Lt=L()({name:"VAvatar",props:$g(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{colorClasses:a,colorStyles:o,variantClasses:i}=ln(e),{densityClasses:s}=Ye(e),{roundedClasses:u}=Ae(e),{sizeClasses:c,sizeStyles:d}=wn(e);return j(()=>r(e.tag,{class:["v-avatar",{"v-avatar--start":e.start,"v-avatar--end":e.end},l.value,a.value,s.value,u.value,c.value,i.value,e.class],style:[o.value,d.value,e.style]},{default:()=>{var f;return[e.image?r(qt,{key:"image",src:e.image,alt:"",cover:!0},null):e.icon?r(Se,{key:"icon",icon:e.icon},null):(f=n.default)==null?void 0:f.call(n),nn(!1,"v-avatar")]}})),{}}});const bs=Symbol.for("vuetify:v-chip-group"),Mg=R({column:Boolean,filter:Boolean,valueComparator:{type:Function,default:hn},...q(),...pn({selectedClass:"v-chip--selected"}),...ce(),...he(),...mt({variant:"tonal"})},"VChipGroup"),Fg=L()({name:"VChipGroup",props:Mg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{isSelected:a,select:o,next:i,prev:s,selected:u}=an(e,bs);return Ee({VChip:{color:D(e,"color"),disabled:D(e,"disabled"),filter:D(e,"filter"),variant:D(e,"variant")}}),j(()=>r(e.tag,{class:["v-chip-group",{"v-chip-group--column":e.column},l.value,e.class],style:e.style},{default:()=>{var c;return[(c=n.default)==null?void 0:c.call(n,{isSelected:a,select:o,next:i,prev:s,selected:u.value})]}})),{}}}),Dg=R({activeClass:String,appendAvatar:String,appendIcon:se,closable:Boolean,closeIcon:{type:se,default:"$delete"},closeLabel:{type:String,default:"$vuetify.close"},draggable:Boolean,filter:Boolean,filterIcon:{type:String,default:"$complete"},label:Boolean,link:{type:Boolean,default:void 0},pill:Boolean,prependAvatar:String,prependIcon:se,ripple:{type:[Boolean,Object],default:!0},text:String,modelValue:{type:Boolean,default:!0},onClick:kt(),onClickOnce:kt(),...at(),...q(),...Fe(),...Me(),...kn(),...Ie(),...Gn(),...At(),...ce({tag:"span"}),...he(),...mt({variant:"tonal"})},"VChip"),Wn=L()({name:"VChip",directives:{Ripple:Dt},props:Dg(),emits:{"click:close":e=>!0,"update:modelValue":e=>!0,"group:selected":e=>!0,click:e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{t:o}=ct(),{borderClasses:i}=ft(e),{colorClasses:s,colorStyles:u,variantClasses:c}=ln(e),{densityClasses:d}=Ye(e),{elevationClasses:f}=He(e),{roundedClasses:v}=Ae(e),{sizeClasses:m}=wn(e),{themeClasses:g}=ye(e),y=ue(e,"modelValue"),b=Sn(e,bs,!1),p=Un(e,n),S=h(()=>e.link!==!1&&p.isLink.value),C=h(()=>!e.disabled&&e.link!==!1&&(!!b||e.link||p.isClickable.value)),_=h(()=>({"aria-label":o(e.closeLabel),onClick(T){T.stopPropagation(),y.value=!1,l("click:close",T)}}));function V(T){var w;l("click",T),C.value&&((w=p.navigate)==null||w.call(p,T),b==null||b.toggle())}function x(T){(T.key==="Enter"||T.key===" ")&&(T.preventDefault(),V(T))}return()=>{const T=p.isLink.value?"a":e.tag,w=!!(e.appendIcon||e.appendAvatar),k=!!(w||a.append),I=!!(a.close||e.closable),A=!!(a.filter||e.filter)&&b,B=!!(e.prependIcon||e.prependAvatar),E=!!(B||a.prepend),F=!b||b.isSelected.value;return y.value&&ne(r(T,{class:["v-chip",{"v-chip--disabled":e.disabled,"v-chip--label":e.label,"v-chip--link":C.value,"v-chip--filter":A,"v-chip--pill":e.pill},g.value,i.value,F?s.value:void 0,d.value,f.value,v.value,m.value,c.value,b==null?void 0:b.selectedClass.value,e.class],style:[F?u.value:void 0,e.style],disabled:e.disabled||void 0,draggable:e.draggable,href:p.href.value,tabindex:C.value?0:void 0,onClick:V,onKeydown:C.value&&!S.value&&x},{default:()=>{var X;return[nn(C.value,"v-chip"),A&&r(Ua,{key:"filter"},{default:()=>[ne(r("div",{class:"v-chip__filter"},[a.filter?r(pe,{key:"filter-defaults",disabled:!e.filterIcon,defaults:{VIcon:{icon:e.filterIcon}}},a.filter):r(Se,{key:"filter-icon",icon:e.filterIcon},null)]),[[Pe,b.isSelected.value]])]}),E&&r("div",{key:"prepend",class:"v-chip__prepend"},[a.prepend?r(pe,{key:"prepend-defaults",disabled:!B,defaults:{VAvatar:{image:e.prependAvatar,start:!0},VIcon:{icon:e.prependIcon,start:!0}}},a.prepend):r(oe,null,[e.prependIcon&&r(Se,{key:"prepend-icon",icon:e.prependIcon,start:!0},null),e.prependAvatar&&r(Lt,{key:"prepend-avatar",image:e.prependAvatar,start:!0},null)])]),r("div",{class:"v-chip__content"},[((X=a.default)==null?void 0:X.call(a,{isSelected:b==null?void 0:b.isSelected.value,selectedClass:b==null?void 0:b.selectedClass.value,select:b==null?void 0:b.select,toggle:b==null?void 0:b.toggle,value:b==null?void 0:b.value.value,disabled:e.disabled}))??e.text]),k&&r("div",{key:"append",class:"v-chip__append"},[a.append?r(pe,{key:"append-defaults",disabled:!w,defaults:{VAvatar:{end:!0,image:e.appendAvatar},VIcon:{end:!0,icon:e.appendIcon}}},a.append):r(oe,null,[e.appendIcon&&r(Se,{key:"append-icon",end:!0,icon:e.appendIcon},null),e.appendAvatar&&r(Lt,{key:"append-avatar",end:!0,image:e.appendAvatar},null)])]),I&&r("div",Y({key:"close",class:"v-chip__close"},_.value),[a.close?r(pe,{key:"close-defaults",defaults:{VIcon:{icon:e.closeIcon,size:"x-small"}}},a.close):r(Se,{key:"close-icon",icon:e.closeIcon,size:"x-small"},null)])]}}),[[Ze("ripple"),C.value&&e.ripple,null]])}}});const oa=Symbol.for("vuetify:list");function ps(){const e=Ve(oa,{hasPrepend:K(!1),updateHasPrepend:()=>null}),t={hasPrepend:K(!1),updateHasPrepend:n=>{n&&(t.hasPrepend.value=n)}};return $e(oa,t),e}function ks(){return Ve(oa,null)}const Og={open:e=>{let{id:t,value:n,opened:l,parents:a}=e;if(n){const o=new Set;o.add(t);let i=a.get(t);for(;i!=null;)o.add(i),i=a.get(i);return o}else return l.delete(t),l},select:()=>null},Ss={open:e=>{let{id:t,value:n,opened:l,parents:a}=e;if(n){let o=a.get(t);for(l.add(t);o!=null&&o!==t;)l.add(o),o=a.get(o);return l}else l.delete(t);return l},select:()=>null},Ng={open:Ss.open,select:e=>{let{id:t,value:n,opened:l,parents:a}=e;if(!n)return l;const o=[];let i=a.get(t);for(;i!=null;)o.push(i),i=a.get(i);return new Set(o)}},eo=e=>{const t={select:n=>{let{id:l,value:a,selected:o}=n;if(l=$t(l),e&&!a){const i=Array.from(o.entries()).reduce((s,u)=>{let[c,d]=u;return d==="on"?[...s,c]:s},[]);if(i.length===1&&i[0]===l)return o}return o.set(l,a?"on":"off"),o},in:(n,l,a)=>{let o=new Map;for(const i of n||[])o=t.select({id:i,value:!0,selected:new Map(o),children:l,parents:a});return o},out:n=>{const l=[];for(const[a,o]of n.entries())o==="on"&&l.push(a);return l}};return t},ws=e=>{const t=eo(e);return{select:l=>{let{selected:a,id:o,...i}=l;o=$t(o);const s=a.has(o)?new Map([[o,a.get(o)]]):new Map;return t.select({...i,id:o,selected:s})},in:(l,a,o)=>{let i=new Map;return l!=null&&l.length&&(i=t.in(l.slice(0,1),a,o)),i},out:(l,a,o)=>t.out(l,a,o)}},zg=e=>{const t=eo(e);return{select:l=>{let{id:a,selected:o,children:i,...s}=l;return a=$t(a),i.has(a)?o:t.select({id:a,selected:o,children:i,...s})},in:t.in,out:t.out}},Hg=e=>{const t=ws(e);return{select:l=>{let{id:a,selected:o,children:i,...s}=l;return a=$t(a),i.has(a)?o:t.select({id:a,selected:o,children:i,...s})},in:t.in,out:t.out}},jg=e=>{const t={select:n=>{let{id:l,value:a,selected:o,children:i,parents:s}=n;l=$t(l);const u=new Map(o),c=[l];for(;c.length;){const f=c.shift();o.set(f,a?"on":"off"),i.has(f)&&c.push(...i.get(f))}let d=s.get(l);for(;d;){const f=i.get(d),v=f.every(g=>o.get(g)==="on"),m=f.every(g=>!o.has(g)||o.get(g)==="off");o.set(d,v?"on":m?"off":"indeterminate"),d=s.get(d)}return e&&!a&&Array.from(o.entries()).reduce((v,m)=>{let[g,y]=m;return y==="on"?[...v,g]:v},[]).length===0?u:o},in:(n,l,a)=>{let o=new Map;for(const i of n||[])o=t.select({id:i,value:!0,selected:new Map(o),children:l,parents:a});return o},out:(n,l)=>{const a=[];for(const[o,i]of n.entries())i==="on"&&!l.has(o)&&a.push(o);return a}};return t},On=Symbol.for("vuetify:nested"),Cs={id:K(),root:{register:()=>null,unregister:()=>null,parents:W(new Map),children:W(new Map),open:()=>null,openOnSelect:()=>null,select:()=>null,opened:W(new Set),selected:W(new Map),selectedValues:W([])}},Ug=R({selectStrategy:[String,Function],openStrategy:[String,Object],opened:Array,selected:Array,mandatory:Boolean},"nested"),Gg=e=>{let t=!1;const n=W(new Map),l=W(new Map),a=ue(e,"opened",e.opened,f=>new Set(f),f=>[...f.values()]),o=h(()=>{if(typeof e.selectStrategy=="object")return e.selectStrategy;switch(e.selectStrategy){case"single-leaf":return Hg(e.mandatory);case"leaf":return zg(e.mandatory);case"independent":return eo(e.mandatory);case"single-independent":return ws(e.mandatory);case"classic":default:return jg(e.mandatory)}}),i=h(()=>{if(typeof e.openStrategy=="object")return e.openStrategy;switch(e.openStrategy){case"list":return Ng;case"single":return Og;case"multiple":default:return Ss}}),s=ue(e,"selected",e.selected,f=>o.value.in(f,n.value,l.value),f=>o.value.out(f,n.value,l.value));nt(()=>{t=!0});function u(f){const v=[];let m=f;for(;m!=null;)v.unshift(m),m=l.value.get(m);return v}const c=De("nested"),d={id:K(),root:{opened:a,selected:s,selectedValues:h(()=>{const f=[];for(const[v,m]of s.value.entries())m==="on"&&f.push(v);return f}),register:(f,v,m)=>{v&&f!==v&&l.value.set(f,v),m&&n.value.set(f,[]),v!=null&&n.value.set(v,[...n.value.get(v)||[],f])},unregister:f=>{if(t)return;n.value.delete(f);const v=l.value.get(f);if(v){const m=n.value.get(v)??[];n.value.set(v,m.filter(g=>g!==f))}l.value.delete(f),a.value.delete(f)},open:(f,v,m)=>{c.emit("click:open",{id:f,value:v,path:u(f),event:m});const g=i.value.open({id:f,value:v,opened:new Set(a.value),children:n.value,parents:l.value,event:m});g&&(a.value=g)},openOnSelect:(f,v,m)=>{const g=i.value.select({id:f,value:v,selected:new Map(s.value),opened:new Set(a.value),children:n.value,parents:l.value,event:m});g&&(a.value=g)},select:(f,v,m)=>{c.emit("click:select",{id:f,value:v,path:u(f),event:m});const g=o.value.select({id:f,value:v,selected:new Map(s.value),children:n.value,parents:l.value,event:m});g&&(s.value=g),d.root.openOnSelect(f,v,m)},children:n,parents:l}};return $e(On,d),d.root},xs=(e,t)=>{const n=Ve(On,Cs),l=Symbol(We()),a=h(()=>e.value!==void 0?e.value:l),o={...n,id:a,open:(i,s)=>n.root.open(a.value,i,s),openOnSelect:(i,s)=>n.root.openOnSelect(a.value,i,s),isOpen:h(()=>n.root.opened.value.has(a.value)),parent:h(()=>n.root.parents.value.get(a.value)),select:(i,s)=>n.root.select(a.value,i,s),isSelected:h(()=>n.root.selected.value.get($t(a.value))==="on"),isIndeterminate:h(()=>n.root.selected.value.get(a.value)==="indeterminate"),isLeaf:h(()=>!n.root.children.value.get(a.value)),isGroupActivator:n.isGroupActivator};return!n.isGroupActivator&&n.root.register(a.value,n.id.value,t),nt(()=>{!n.isGroupActivator&&n.root.unregister(a.value)}),t&&$e(On,o),o},Wg=()=>{const e=Ve(On,Cs);$e(On,{...e,isGroupActivator:!0})},Yg=ut({name:"VListGroupActivator",setup(e,t){let{slots:n}=t;return Wg(),()=>{var l;return(l=n.default)==null?void 0:l.call(n)}}}),Kg=R({activeColor:String,baseColor:String,color:String,collapseIcon:{type:se,default:"$collapse"},expandIcon:{type:se,default:"$expand"},prependIcon:se,appendIcon:se,fluid:Boolean,subgroup:Boolean,title:String,value:null,...q(),...ce()},"VListGroup"),ia=L()({name:"VListGroup",props:Kg(),setup(e,t){let{slots:n}=t;const{isOpen:l,open:a,id:o}=xs(D(e,"value"),!0),i=h(()=>`v-list-group--id-${String(o.value)}`),s=ks(),{isBooted:u}=tn();function c(m){a(!l.value,m)}const d=h(()=>({onClick:c,class:"v-list-group__header",id:i.value})),f=h(()=>l.value?e.collapseIcon:e.expandIcon),v=h(()=>({VListItem:{active:l.value,activeColor:e.activeColor,baseColor:e.baseColor,color:e.color,prependIcon:e.prependIcon||e.subgroup&&f.value,appendIcon:e.appendIcon||!e.subgroup&&f.value,title:e.title,value:e.value}}));return j(()=>r(e.tag,{class:["v-list-group",{"v-list-group--prepend":s==null?void 0:s.hasPrepend.value,"v-list-group--fluid":e.fluid,"v-list-group--subgroup":e.subgroup,"v-list-group--open":l.value},e.class],style:e.style},{default:()=>[n.activator&&r(pe,{defaults:v.value},{default:()=>[r(Yg,null,{default:()=>[n.activator({props:d.value,isOpen:l.value})]})]}),r(ht,{transition:{component:kl},disabled:!u.value},{default:()=>{var m;return[ne(r("div",{class:"v-list-group__items",role:"group","aria-labelledby":i.value},[(m=n.default)==null?void 0:m.call(n)]),[[Pe,l.value]])]}})]})),{}}});const Vs=yt("v-list-item-subtitle"),_s=yt("v-list-item-title"),qg=R({active:{type:Boolean,default:void 0},activeClass:String,activeColor:String,appendAvatar:String,appendIcon:se,baseColor:String,disabled:Boolean,lines:String,link:{type:Boolean,default:void 0},nav:Boolean,prependAvatar:String,prependIcon:se,ripple:{type:[Boolean,Object],default:!0},subtitle:[String,Number,Boolean],title:[String,Number,Boolean],value:null,onClick:kt(),onClickOnce:kt(),...at(),...q(),...Fe(),...dt(),...Me(),...Ie(),...Gn(),...ce(),...he(),...mt({variant:"text"})},"VListItem"),_t=L()({name:"VListItem",directives:{Ripple:Dt},props:qg(),emits:{click:e=>!0},setup(e,t){let{attrs:n,slots:l,emit:a}=t;const o=Un(e,n),i=h(()=>e.value===void 0?o.href.value:e.value),{select:s,isSelected:u,isIndeterminate:c,isGroupActivator:d,root:f,parent:v,openOnSelect:m}=xs(i,!1),g=ks(),y=h(()=>{var M;return e.active!==!1&&(e.active||((M=o.isActive)==null?void 0:M.value)||u.value)}),b=h(()=>e.link!==!1&&o.isLink.value),p=h(()=>!e.disabled&&e.link!==!1&&(e.link||o.isClickable.value||e.value!=null&&!!g)),S=h(()=>e.rounded||e.nav),C=h(()=>e.color??e.activeColor),_=h(()=>({color:y.value?C.value??e.baseColor:e.baseColor,variant:e.variant}));Z(()=>{var M;return(M=o.isActive)==null?void 0:M.value},M=>{M&&v.value!=null&&f.open(v.value,!0),M&&m(M)},{immediate:!0});const{themeClasses:V}=ye(e),{borderClasses:x}=ft(e),{colorClasses:T,colorStyles:w,variantClasses:k}=ln(_),{densityClasses:I}=Ye(e),{dimensionStyles:A}=vt(e),{elevationClasses:B}=He(e),{roundedClasses:E}=Ae(S),F=h(()=>e.lines?`v-list-item--${e.lines}-line`:void 0),X=h(()=>({isActive:y.value,select:s,isSelected:u.value,isIndeterminate:c.value}));function $(M){var G;a("click",M),!(d||!p.value)&&((G=o.navigate)==null||G.call(o,M),e.value!=null&&s(!u.value,M))}function N(M){(M.key==="Enter"||M.key===" ")&&(M.preventDefault(),$(M))}return j(()=>{const M=b.value?"a":e.tag,G=l.title||e.title,U=l.subtitle||e.subtitle,z=!!(e.appendAvatar||e.appendIcon),ae=!!(z||l.append),re=!!(e.prependAvatar||e.prependIcon),ve=!!(re||l.prepend);return g==null||g.updateHasPrepend(ve),e.activeColor&&xf("active-color",["color","base-color"]),ne(r(M,{class:["v-list-item",{"v-list-item--active":y.value,"v-list-item--disabled":e.disabled,"v-list-item--link":p.value,"v-list-item--nav":e.nav,"v-list-item--prepend":!ve&&(g==null?void 0:g.hasPrepend.value),[`${e.activeClass}`]:e.activeClass&&y.value},V.value,x.value,T.value,I.value,B.value,F.value,E.value,k.value,e.class],style:[w.value,A.value,e.style],href:o.href.value,tabindex:p.value?g?-2:0:void 0,onClick:$,onKeydown:p.value&&!b.value&&N},{default:()=>{var ge;return[nn(p.value||y.value,"v-list-item"),ve&&r("div",{key:"prepend",class:"v-list-item__prepend"},[l.prepend?r(pe,{key:"prepend-defaults",disabled:!re,defaults:{VAvatar:{density:e.density,image:e.prependAvatar},VIcon:{density:e.density,icon:e.prependIcon},VListItemAction:{start:!0}}},{default:()=>{var O;return[(O=l.prepend)==null?void 0:O.call(l,X.value)]}}):r(oe,null,[e.prependAvatar&&r(Lt,{key:"prepend-avatar",density:e.density,image:e.prependAvatar},null),e.prependIcon&&r(Se,{key:"prepend-icon",density:e.density,icon:e.prependIcon},null)]),r("div",{class:"v-list-item__spacer"},null)]),r("div",{class:"v-list-item__content","data-no-activator":""},[G&&r(_s,{key:"title"},{default:()=>{var O;return[((O=l.title)==null?void 0:O.call(l,{title:e.title}))??e.title]}}),U&&r(Vs,{key:"subtitle"},{default:()=>{var O;return[((O=l.subtitle)==null?void 0:O.call(l,{subtitle:e.subtitle}))??e.subtitle]}}),(ge=l.default)==null?void 0:ge.call(l,X.value)]),ae&&r("div",{key:"append",class:"v-list-item__append"},[l.append?r(pe,{key:"append-defaults",disabled:!z,defaults:{VAvatar:{density:e.density,image:e.appendAvatar},VIcon:{density:e.density,icon:e.appendIcon},VListItemAction:{end:!0}}},{default:()=>{var O;return[(O=l.append)==null?void 0:O.call(l,X.value)]}}):r(oe,null,[e.appendIcon&&r(Se,{key:"append-icon",density:e.density,icon:e.appendIcon},null),e.appendAvatar&&r(Lt,{key:"append-avatar",density:e.density,image:e.appendAvatar},null)]),r("div",{class:"v-list-item__spacer"},null)])]}}),[[Ze("ripple"),p.value&&e.ripple]])}),{}}}),Xg=R({color:String,inset:Boolean,sticky:Boolean,title:String,...q(),...ce()},"VListSubheader"),Is=L()({name:"VListSubheader",props:Xg(),setup(e,t){let{slots:n}=t;const{textColorClasses:l,textColorStyles:a}=Ge(D(e,"color"));return j(()=>{const o=!!(n.default||e.title);return r(e.tag,{class:["v-list-subheader",{"v-list-subheader--inset":e.inset,"v-list-subheader--sticky":e.sticky},l.value,e.class],style:[{textColorStyles:a},e.style]},{default:()=>{var i;return[o&&r("div",{class:"v-list-subheader__text"},[((i=n.default)==null?void 0:i.call(n))??e.title])]}})}),{}}});const Zg=R({color:String,inset:Boolean,length:[Number,String],thickness:[Number,String],vertical:Boolean,...q(),...he()},"VDivider"),Ts=L()({name:"VDivider",props:Zg(),setup(e,t){let{attrs:n}=t;const{themeClasses:l}=ye(e),{textColorClasses:a,textColorStyles:o}=Ge(D(e,"color")),i=h(()=>{const s={};return e.length&&(s[e.vertical?"maxHeight":"maxWidth"]=J(e.length)),e.thickness&&(s[e.vertical?"borderRightWidth":"borderTopWidth"]=J(e.thickness)),s});return j(()=>r("hr",{class:[{"v-divider":!0,"v-divider--inset":e.inset,"v-divider--vertical":e.vertical},l.value,a.value,e.class],style:[i.value,o.value,e.style],"aria-orientation":!n.role||n.role==="separator"?e.vertical?"vertical":"horizontal":void 0,role:`${n.role||"separator"}`},null)),{}}}),Jg=R({items:Array,returnObject:Boolean},"VListChildren"),Ps=L()({name:"VListChildren",props:Jg(),setup(e,t){let{slots:n}=t;return ps(),()=>{var l,a;return((l=n.default)==null?void 0:l.call(n))??((a=e.items)==null?void 0:a.map(o=>{var m,g;let{children:i,props:s,type:u,raw:c}=o;if(u==="divider")return((m=n.divider)==null?void 0:m.call(n,{props:s}))??r(Ts,s,null);if(u==="subheader")return((g=n.subheader)==null?void 0:g.call(n,{props:s}))??r(Is,s,null);const d={subtitle:n.subtitle?y=>{var b;return(b=n.subtitle)==null?void 0:b.call(n,{...y,item:c})}:void 0,prepend:n.prepend?y=>{var b;return(b=n.prepend)==null?void 0:b.call(n,{...y,item:c})}:void 0,append:n.append?y=>{var b;return(b=n.append)==null?void 0:b.call(n,{...y,item:c})}:void 0,title:n.title?y=>{var b;return(b=n.title)==null?void 0:b.call(n,{...y,item:c})}:void 0},[f,v]=ia.filterProps(s);return i?r(ia,Y({value:s==null?void 0:s.value},f),{activator:y=>{let{props:b}=y;const p={...s,...b,value:e.returnObject?c:s.value};return n.header?n.header({props:p}):r(_t,p,d)},default:()=>r(Ps,{items:i},n)}):n.item?n.item({props:s}):r(_t,Y(s,{value:e.returnObject?c:s.value}),d)}))}}}),As=R({items:{type:Array,default:()=>[]},itemTitle:{type:[String,Array,Function],default:"title"},itemValue:{type:[String,Array,Function],default:"value"},itemChildren:{type:[Boolean,String,Array,Function],default:"children"},itemProps:{type:[Boolean,String,Array,Function],default:"props"},returnObject:Boolean,valueComparator:{type:Function,default:hn}},"list-items");function Gt(e,t){const n=pt(t,e.itemTitle,t),l=pt(t,e.itemValue,n),a=pt(t,e.itemChildren),o=e.itemProps===!0?typeof t=="object"&&t!=null&&!Array.isArray(t)?"children"in t?Kt(t,["children"])[1]:t:void 0:pt(t,e.itemProps),i={title:n,value:l,...o};return{title:String(i.title??""),value:i.value,props:i,children:Array.isArray(a)?Bs(e,a):void 0,raw:t}}function Bs(e,t){const n=[];for(const l of t)n.push(Gt(e,l));return n}function to(e){const t=h(()=>Bs(e,e.items)),n=h(()=>t.value.some(o=>o.value===null));function l(o){return n.value||(o=o.filter(i=>i!==null)),o.map(i=>e.returnObject&&typeof i=="string"?Gt(e,i):t.value.find(s=>e.valueComparator(i,s.value))||Gt(e,i))}function a(o){return e.returnObject?o.map(i=>{let{raw:s}=i;return s}):o.map(i=>{let{value:s}=i;return s})}return{items:t,transformIn:l,transformOut:a}}function Qg(e){return typeof e=="string"||typeof e=="number"||typeof e=="boolean"}function eh(e,t){const n=pt(t,e.itemType,"item"),l=Qg(t)?t:pt(t,e.itemTitle),a=pt(t,e.itemValue,void 0),o=pt(t,e.itemChildren),i=e.itemProps===!0?Kt(t,["children"])[1]:pt(t,e.itemProps),s={title:l,value:a,...i};return{type:n,title:s.title,value:s.value,props:s,children:n==="item"&&o?Rs(e,o):void 0,raw:t}}function Rs(e,t){const n=[];for(const l of t)n.push(eh(e,l));return n}function th(e){return{items:h(()=>Rs(e,e.items))}}const nh=R({baseColor:String,activeColor:String,activeClass:String,bgColor:String,disabled:Boolean,lines:{type:[Boolean,String],default:"one"},nav:Boolean,...Ug({selectStrategy:"single-leaf",openStrategy:"list"}),...at(),...q(),...Fe(),...dt(),...Me(),itemType:{type:String,default:"type"},...As(),...Ie(),...ce(),...he(),...mt({variant:"text"})},"VList"),Vl=L()({name:"VList",props:nh(),emits:{"update:selected":e=>!0,"update:opened":e=>!0,"click:open":e=>!0,"click:select":e=>!0},setup(e,t){let{slots:n}=t;const{items:l}=th(e),{themeClasses:a}=ye(e),{backgroundColorClasses:o,backgroundColorStyles:i}=Be(D(e,"bgColor")),{borderClasses:s}=ft(e),{densityClasses:u}=Ye(e),{dimensionStyles:c}=vt(e),{elevationClasses:d}=He(e),{roundedClasses:f}=Ae(e),{open:v,select:m}=Gg(e),g=h(()=>e.lines?`v-list--${e.lines}-line`:void 0),y=D(e,"activeColor"),b=D(e,"baseColor"),p=D(e,"color");ps(),Ee({VListGroup:{activeColor:y,baseColor:b,color:p},VListItem:{activeClass:D(e,"activeClass"),activeColor:y,baseColor:b,color:p,density:D(e,"density"),disabled:D(e,"disabled"),lines:D(e,"lines"),nav:D(e,"nav"),variant:D(e,"variant")}});const S=K(!1),C=W();function _(k){S.value=!0}function V(k){S.value=!1}function x(k){var I;!S.value&&!(k.relatedTarget&&((I=C.value)!=null&&I.contains(k.relatedTarget)))&&w()}function T(k){if(C.value){if(k.key==="ArrowDown")w("next");else if(k.key==="ArrowUp")w("prev");else if(k.key==="Home")w("first");else if(k.key==="End")w("last");else return;k.preventDefault()}}function w(k){if(C.value)return ul(C.value,k)}return j(()=>r(e.tag,{ref:C,class:["v-list",{"v-list--disabled":e.disabled,"v-list--nav":e.nav},a.value,o.value,s.value,u.value,d.value,g.value,f.value,e.class],style:[i.value,c.value,e.style],tabindex:e.disabled||S.value?-1:0,role:"listbox","aria-activedescendant":void 0,onFocusin:_,onFocusout:V,onFocus:x,onKeydown:T},{default:()=>[r(Ps,{items:l.value,returnObject:e.returnObject},n)]})),{open:v,select:m,focus:w}}}),lh=yt("v-list-img"),ah=R({start:Boolean,end:Boolean,...q(),...ce()},"VListItemAction"),oh=L()({name:"VListItemAction",props:ah(),setup(e,t){let{slots:n}=t;return j(()=>r(e.tag,{class:["v-list-item-action",{"v-list-item-action--start":e.start,"v-list-item-action--end":e.end},e.class],style:e.style},n)),{}}}),ih=R({start:Boolean,end:Boolean,...q(),...ce()},"VListItemMedia"),sh=L()({name:"VListItemMedia",props:ih(),setup(e,t){let{slots:n}=t;return j(()=>r(e.tag,{class:["v-list-item-media",{"v-list-item-media--start":e.start,"v-list-item-media--end":e.end},e.class],style:e.style},n)),{}}});function Dl(e,t){return{x:e.x+t.x,y:e.y+t.y}}function rh(e,t){return{x:e.x-t.x,y:e.y-t.y}}function qo(e,t){if(e.side==="top"||e.side==="bottom"){const{side:n,align:l}=e,a=l==="left"?0:l==="center"?t.width/2:l==="right"?t.width:l,o=n==="top"?0:n==="bottom"?t.height:n;return Dl({x:a,y:o},t)}else if(e.side==="left"||e.side==="right"){const{side:n,align:l}=e,a=n==="left"?0:n==="right"?t.width:n,o=l==="top"?0:l==="center"?t.height/2:l==="bottom"?t.height:l;return Dl({x:a,y:o},t)}return Dl({x:t.width/2,y:t.height/2},t)}const Es={static:dh,connected:fh},uh=R({locationStrategy:{type:[String,Function],default:"static",validator:e=>typeof e=="function"||e in Es},location:{type:String,default:"bottom"},origin:{type:String,default:"auto"},offset:[Number,String,Array]},"VOverlay-location-strategies");function ch(e,t){const n=W({}),l=W();Ce&&(Et(()=>!!(t.isActive.value&&e.locationStrategy),o=>{var i,s;Z(()=>e.locationStrategy,o),Xe(()=>{l.value=void 0}),typeof e.locationStrategy=="function"?l.value=(i=e.locationStrategy(t,e,n))==null?void 0:i.updateLocation:l.value=(s=Es[e.locationStrategy](t,e,n))==null?void 0:s.updateLocation}),window.addEventListener("resize",a,{passive:!0}),Xe(()=>{window.removeEventListener("resize",a),l.value=void 0}));function a(o){var i;(i=l.value)==null||i.call(l,o)}return{contentStyles:n,updateLocation:l}}function dh(){}function vh(e,t){t?e.style.removeProperty("left"):e.style.removeProperty("right");const n=Ea(e);return t?n.x+=parseFloat(e.style.right||0):n.x-=parseFloat(e.style.left||0),n.y-=parseFloat(e.style.top||0),n}function fh(e,t,n){zf(e.activatorEl.value)&&Object.assign(n.value,{position:"fixed",top:0,[e.isRtl.value?"right":"left"]:0});const{preferredAnchor:a,preferredOrigin:o}=Ba(()=>{const g=Gl(t.location,e.isRtl.value),y=t.origin==="overlap"?g:t.origin==="auto"?Ll(g):Gl(t.origin,e.isRtl.value);return g.side===y.side&&g.align===$l(y).align?{preferredAnchor:po(g),preferredOrigin:po(y)}:{preferredAnchor:g,preferredOrigin:y}}),[i,s,u,c]=["minWidth","minHeight","maxWidth","maxHeight"].map(g=>h(()=>{const y=parseFloat(t[g]);return isNaN(y)?1/0:y})),d=h(()=>{if(Array.isArray(t.offset))return t.offset;if(typeof t.offset=="string"){const g=t.offset.split(" ").map(parseFloat);return g.length<2&&g.push(0),g}return typeof t.offset=="number"?[t.offset,0]:[0,0]});let f=!1;const v=new ResizeObserver(()=>{f&&m()});Z([e.activatorEl,e.contentEl],(g,y)=>{let[b,p]=g,[S,C]=y;S&&v.unobserve(S),b&&v.observe(b),C&&v.unobserve(C),p&&v.observe(p)},{immediate:!0}),Xe(()=>{v.disconnect()});function m(){if(f=!1,requestAnimationFrame(()=>{requestAnimationFrame(()=>f=!0)}),!e.activatorEl.value||!e.contentEl.value)return;const g=e.activatorEl.value.getBoundingClientRect(),y=vh(e.contentEl.value,e.isRtl.value),b=dl(e.contentEl.value),p=12;b.length||(b.push(document.documentElement),e.contentEl.value.style.top&&e.contentEl.value.style.left||(y.x-=parseFloat(document.documentElement.style.getPropertyValue("--v-body-scroll-x")||0),y.y-=parseFloat(document.documentElement.style.getPropertyValue("--v-body-scroll-y")||0)));const S=b.reduce((A,B)=>{const E=B.getBoundingClientRect(),F=new cn({x:B===document.documentElement?0:E.x,y:B===document.documentElement?0:E.y,width:B.clientWidth,height:B.clientHeight});return A?new cn({x:Math.max(A.left,F.left),y:Math.max(A.top,F.top),width:Math.min(A.right,F.right)-Math.max(A.left,F.left),height:Math.min(A.bottom,F.bottom)-Math.max(A.top,F.top)}):F},void 0);S.x+=p,S.y+=p,S.width-=p*2,S.height-=p*2;let C={anchor:a.value,origin:o.value};function _(A){const B=new cn(y),E=qo(A.anchor,g),F=qo(A.origin,B);let{x:X,y:$}=rh(E,F);switch(A.anchor.side){case"top":$-=d.value[0];break;case"bottom":$+=d.value[0];break;case"left":X-=d.value[0];break;case"right":X+=d.value[0];break}switch(A.anchor.align){case"top":$-=d.value[1];break;case"bottom":$+=d.value[1];break;case"left":X-=d.value[1];break;case"right":X+=d.value[1];break}return B.x+=X,B.y+=$,B.width=Math.min(B.width,u.value),B.height=Math.min(B.height,c.value),{overflows:So(B,S),x:X,y:$}}let V=0,x=0;const T={x:0,y:0},w={x:!1,y:!1};let k=-1;for(;!(k++>10);){const{x:A,y:B,overflows:E}=_(C);V+=A,x+=B,y.x+=A,y.y+=B;{const F=ko(C.anchor),X=E.x.before||E.x.after,$=E.y.before||E.y.after;let N=!1;if(["x","y"].forEach(M=>{if(M==="x"&&X&&!w.x||M==="y"&&$&&!w.y){const G={anchor:{...C.anchor},origin:{...C.origin}},U=M==="x"?F==="y"?$l:Ll:F==="y"?Ll:$l;G.anchor=U(G.anchor),G.origin=U(G.origin);const{overflows:z}=_(G);(z[M].before<=E[M].before&&z[M].after<=E[M].after||z[M].before+z[M].after<(E[M].before+E[M].after)/2)&&(C=G,N=w[M]=!0)}}),N)continue}E.x.before&&(V+=E.x.before,y.x+=E.x.before),E.x.after&&(V-=E.x.after,y.x-=E.x.after),E.y.before&&(x+=E.y.before,y.y+=E.y.before),E.y.after&&(x-=E.y.after,y.y-=E.y.after);{const F=So(y,S);T.x=S.width-F.x.before-F.x.after,T.y=S.height-F.y.before-F.y.after,V+=F.x.before,y.x+=F.x.before,x+=F.y.before,y.y+=F.y.before}break}const I=ko(C.anchor);return Object.assign(n.value,{"--v-overlay-anchor-origin":`${C.anchor.side} ${C.anchor.align}`,transformOrigin:`${C.origin.side} ${C.origin.align}`,top:J(Ol(x)),left:e.isRtl.value?void 0:J(Ol(V)),right:e.isRtl.value?J(Ol(-V)):void 0,minWidth:J(I==="y"?Math.min(i.value,g.width):i.value),maxWidth:J(Xo(Ue(T.x,i.value===1/0?0:i.value,u.value))),maxHeight:J(Xo(Ue(T.y,s.value===1/0?0:s.value,c.value)))}),{available:T,contentBox:y}}return Z(()=>[a.value,o.value,t.offset,t.minWidth,t.minHeight,t.maxWidth,t.maxHeight],()=>m()),xe(()=>{const g=m();if(!g)return;const{available:y,contentBox:b}=g;b.height>y.y&&requestAnimationFrame(()=>{m(),requestAnimationFrame(()=>{m()})})}),{updateLocation:m}}function Ol(e){return Math.round(e*devicePixelRatio)/devicePixelRatio}function Xo(e){return Math.ceil(e*devicePixelRatio)/devicePixelRatio}let sa=!0;const ml=[];function mh(e){!sa||ml.length?(ml.push(e),ra()):(sa=!1,e(),ra())}let Zo=-1;function ra(){cancelAnimationFrame(Zo),Zo=requestAnimationFrame(()=>{const e=ml.shift();e&&e(),ml.length?ra():sa=!0})}const ol={none:null,close:yh,block:bh,reposition:ph},gh=R({scrollStrategy:{type:[String,Function],default:"block",validator:e=>typeof e=="function"||e in ol}},"VOverlay-scroll-strategies");function hh(e,t){if(!Ce)return;let n;tt(async()=>{n==null||n.stop(),t.isActive.value&&e.scrollStrategy&&(n=wa(),await xe(),n.active&&n.run(()=>{var l;typeof e.scrollStrategy=="function"?e.scrollStrategy(t,e,n):(l=ol[e.scrollStrategy])==null||l.call(ol,t,e,n)}))}),Xe(()=>{n==null||n.stop()})}function yh(e){function t(n){e.isActive.value=!1}Ls(e.activatorEl.value??e.contentEl.value,t)}function bh(e,t){var i;const n=(i=e.root.value)==null?void 0:i.offsetParent,l=[...new Set([...dl(e.activatorEl.value,t.contained?n:void 0),...dl(e.contentEl.value,t.contained?n:void 0)])].filter(s=>!s.classList.contains("v-overlay-scroll-blocked")),a=window.innerWidth-document.documentElement.offsetWidth,o=(s=>Fa(s)&&s)(n||document.documentElement);o&&e.root.value.classList.add("v-overlay--scroll-blocked"),l.forEach((s,u)=>{s.style.setProperty("--v-body-scroll-x",J(-s.scrollLeft)),s.style.setProperty("--v-body-scroll-y",J(-s.scrollTop)),s!==document.documentElement&&s.style.setProperty("--v-scrollbar-offset",J(a)),s.classList.add("v-overlay-scroll-blocked")}),Xe(()=>{l.forEach((s,u)=>{const c=parseFloat(s.style.getPropertyValue("--v-body-scroll-x")),d=parseFloat(s.style.getPropertyValue("--v-body-scroll-y"));s.style.removeProperty("--v-body-scroll-x"),s.style.removeProperty("--v-body-scroll-y"),s.style.removeProperty("--v-scrollbar-offset"),s.classList.remove("v-overlay-scroll-blocked"),s.scrollLeft=-c,s.scrollTop=-d}),o&&e.root.value.classList.remove("v-overlay--scroll-blocked")})}function ph(e,t,n){let l=!1,a=-1,o=-1;function i(s){mh(()=>{var d,f;const u=performance.now();(f=(d=e.updateLocation).value)==null||f.call(d,s),l=(performance.now()-u)/(1e3/60)>2})}o=(typeof requestIdleCallback>"u"?s=>s():requestIdleCallback)(()=>{n.run(()=>{Ls(e.activatorEl.value??e.contentEl.value,s=>{l?(cancelAnimationFrame(a),a=requestAnimationFrame(()=>{a=requestAnimationFrame(()=>{i(s)})})):i(s)})})}),Xe(()=>{typeof cancelIdleCallback<"u"&&cancelIdleCallback(o),cancelAnimationFrame(a)})}function Ls(e,t){const n=[document,...dl(e)];n.forEach(l=>{l.addEventListener("scroll",t,{passive:!0})}),Xe(()=>{n.forEach(l=>{l.removeEventListener("scroll",t)})})}const ua=Symbol.for("vuetify:v-menu"),$s=R({closeDelay:[Number,String],openDelay:[Number,String]},"delay");function Ms(e,t){const n={},l=a=>()=>{if(!Ce)return Promise.resolve(!0);const o=a==="openDelay";return n.closeDelay&&window.clearTimeout(n.closeDelay),delete n.closeDelay,n.openDelay&&window.clearTimeout(n.openDelay),delete n.openDelay,new Promise(i=>{const s=parseInt(e[a]??0,10);n[a]=window.setTimeout(()=>{t==null||t(o),i(o)},s)})};return{runCloseDelay:l("closeDelay"),runOpenDelay:l("openDelay")}}const kh=R({activator:[String,Object],activatorProps:{type:Object,default:()=>({})},openOnClick:{type:Boolean,default:void 0},openOnHover:Boolean,openOnFocus:{type:Boolean,default:void 0},closeOnContentClick:Boolean,...$s()},"VOverlay-activator");function Sh(e,t){let{isActive:n,isTop:l}=t;const a=W();let o=!1,i=!1,s=!0;const u=h(()=>e.openOnFocus||e.openOnFocus==null&&e.openOnHover),c=h(()=>e.openOnClick||e.openOnClick==null&&!e.openOnHover&&!u.value),{runOpenDelay:d,runCloseDelay:f}=Ms(e,C=>{C===(e.openOnHover&&o||u.value&&i)&&!(e.openOnHover&&n.value&&!l.value)&&(n.value!==C&&(s=!0),n.value=C)}),v={onClick:C=>{C.stopPropagation(),a.value=C.currentTarget||C.target,n.value=!n.value},onMouseenter:C=>{var _;(_=C.sourceCapabilities)!=null&&_.firesTouchEvents||(o=!0,a.value=C.currentTarget||C.target,d())},onMouseleave:C=>{o=!1,f()},onFocus:C=>{dn(C.target,":focus-visible")!==!1&&(i=!0,C.stopPropagation(),a.value=C.currentTarget||C.target,d())},onBlur:C=>{i=!1,C.stopPropagation(),f()}},m=h(()=>{const C={};return c.value&&(C.onClick=v.onClick),e.openOnHover&&(C.onMouseenter=v.onMouseenter,C.onMouseleave=v.onMouseleave),u.value&&(C.onFocus=v.onFocus,C.onBlur=v.onBlur),C}),g=h(()=>{const C={};if(e.openOnHover&&(C.onMouseenter=()=>{o=!0,d()},C.onMouseleave=()=>{o=!1,f()}),u.value&&(C.onFocusin=()=>{i=!0,d()},C.onFocusout=()=>{i=!1,f()}),e.closeOnContentClick){const _=Ve(ua,null);C.onClick=()=>{n.value=!1,_==null||_.closeParents()}}return C}),y=h(()=>{const C={};return e.openOnHover&&(C.onMouseenter=()=>{s&&(o=!0,s=!1,d())},C.onMouseleave=()=>{o=!1,f()}),C});Z(l,C=>{C&&(e.openOnHover&&!o&&(!u.value||!i)||u.value&&!i&&(!e.openOnHover||!o))&&(n.value=!1)});const b=W();tt(()=>{b.value&&xe(()=>{a.value=jl(b.value)})});const p=De("useActivator");let S;return Z(()=>!!e.activator,C=>{C&&Ce?(S=wa(),S.run(()=>{wh(e,p,{activatorEl:a,activatorEvents:m})})):S&&S.stop()},{flush:"post",immediate:!0}),Xe(()=>{S==null||S.stop()}),{activatorEl:a,activatorRef:b,activatorEvents:m,contentEvents:g,scrimEvents:y}}function wh(e,t,n){let{activatorEl:l,activatorEvents:a}=n;Z(()=>e.activator,(u,c)=>{if(c&&u!==c){const d=s(c);d&&i(d)}u&&xe(()=>o())},{immediate:!0}),Z(()=>e.activatorProps,()=>{o()}),Xe(()=>{i()});function o(){let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:s(),c=arguments.length>1&&arguments[1]!==void 0?arguments[1]:e.activatorProps;u&&gf(u,Y(a.value,c))}function i(){let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:s(),c=arguments.length>1&&arguments[1]!==void 0?arguments[1]:e.activatorProps;u&&hf(u,Y(a.value,c))}function s(){var d,f;let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:e.activator,c;if(u)if(u==="parent"){let v=(f=(d=t==null?void 0:t.proxy)==null?void 0:d.$el)==null?void 0:f.parentNode;for(;v!=null&&v.hasAttribute("data-no-activator");)v=v.parentNode;c=v}else typeof u=="string"?c=document.querySelector(u):"$el"in u?c=u.$el:c=u;return l.value=(c==null?void 0:c.nodeType)===Node.ELEMENT_NODE?c:null,l.value}}function Fs(){if(!Ce)return K(!1);const{ssr:e}=en();if(e){const t=K(!1);return Je(()=>{t.value=!0}),t}else return K(!0)}const _l=R({eager:Boolean},"lazy");function no(e,t){const n=K(!1),l=h(()=>n.value||e.eager||t.value);Z(t,()=>n.value=!0);function a(){e.eager||(n.value=!1)}return{isBooted:n,hasContent:l,onAfterLeave:a}}function _n(){const t=De("useScopeId").vnode.scopeId;return{scopeId:t?{[t]:""}:void 0}}const Jo=Symbol.for("vuetify:stack"),Pn=gt([]);function Ch(e,t,n){const l=De("useStack"),a=!n,o=Ve(Jo,void 0),i=gt({activeChildren:new Set});$e(Jo,i);const s=K(+t.value);Et(e,()=>{var f;const d=(f=Pn.at(-1))==null?void 0:f[1];s.value=d?d+10:+t.value,a&&Pn.push([l.uid,s.value]),o==null||o.activeChildren.add(l.uid),Xe(()=>{if(a){const v=$t(Pn).findIndex(m=>m[0]===l.uid);Pn.splice(v,1)}o==null||o.activeChildren.delete(l.uid)})});const u=K(!0);a&&tt(()=>{var f;const d=((f=Pn.at(-1))==null?void 0:f[0])===l.uid;setTimeout(()=>u.value=d)});const c=h(()=>!i.activeChildren.size);return{globalTop:Ca(u),localTop:c,stackStyles:h(()=>({zIndex:s.value}))}}function xh(e){return{teleportTarget:h(()=>{const n=e.value;if(n===!0||!Ce)return;const l=n===!1?document.body:typeof n=="string"?document.querySelector(n):n;if(l==null)return;let a=l.querySelector(":scope > .v-overlay-container");return a||(a=document.createElement("div"),a.className="v-overlay-container",l.appendChild(a)),a})}}function Vh(){return!0}function Ds(e,t,n){if(!e||Os(e,n)===!1)return!1;const l=Ei(t);if(typeof ShadowRoot<"u"&&l instanceof ShadowRoot&&l.host===e.target)return!1;const a=(typeof n.value=="object"&&n.value.include||(()=>[]))();return a.push(t),!a.some(o=>o==null?void 0:o.contains(e.target))}function Os(e,t){return(typeof t.value=="object"&&t.value.closeConditional||Vh)(e)}function _h(e,t,n){const l=typeof n.value=="function"?n.value:n.value.handler;t._clickOutside.lastMousedownWasOutside&&Ds(e,t,n)&&setTimeout(()=>{Os(e,n)&&l&&l(e)},0)}function Qo(e,t){const n=Ei(e);t(document),typeof ShadowRoot<"u"&&n instanceof ShadowRoot&&t(n)}const Ns={mounted(e,t){const n=a=>_h(a,e,t),l=a=>{e._clickOutside.lastMousedownWasOutside=Ds(a,e,t)};Qo(e,a=>{a.addEventListener("click",n,!0),a.addEventListener("mousedown",l,!0)}),e._clickOutside||(e._clickOutside={lastMousedownWasOutside:!1}),e._clickOutside[t.instance.$.uid]={onClick:n,onMousedown:l}},unmounted(e,t){e._clickOutside&&(Qo(e,n=>{var o;if(!n||!((o=e._clickOutside)!=null&&o[t.instance.$.uid]))return;const{onClick:l,onMousedown:a}=e._clickOutside[t.instance.$.uid];n.removeEventListener("click",l,!0),n.removeEventListener("mousedown",a,!0)}),delete e._clickOutside[t.instance.$.uid])}};function Ih(e){const{modelValue:t,color:n,...l}=e;return r(Rt,{name:"fade-transition",appear:!0},{default:()=>[e.modelValue&&r("div",Y({class:["v-overlay__scrim",e.color.backgroundColorClasses.value],style:e.color.backgroundColorStyles.value},l),null)]})}const Yn=R({absolute:Boolean,attach:[Boolean,String,Object],closeOnBack:{type:Boolean,default:!0},contained:Boolean,contentClass:null,contentProps:null,disabled:Boolean,noClickAnimation:Boolean,modelValue:Boolean,persistent:Boolean,scrim:{type:[Boolean,String],default:!0},zIndex:{type:[Number,String],default:2e3},...kh(),...q(),...dt(),..._l(),...uh(),...gh(),...he(),...Pt()},"VOverlay"),It=L()({name:"VOverlay",directives:{ClickOutside:Ns},inheritAttrs:!1,props:{_disableGlobalStack:Boolean,...Yn()},emits:{"click:outside":e=>!0,"update:modelValue":e=>!0,afterLeave:()=>!0},setup(e,t){let{slots:n,attrs:l,emit:a}=t;const o=ue(e,"modelValue"),i=h({get:()=>o.value,set:G=>{G&&e.disabled||(o.value=G)}}),{teleportTarget:s}=xh(h(()=>e.attach||e.contained)),{themeClasses:u}=ye(e),{rtlClasses:c,isRtl:d}=Oe(),{hasContent:f,onAfterLeave:v}=no(e,i),m=Be(h(()=>typeof e.scrim=="string"?e.scrim:null)),{globalTop:g,localTop:y,stackStyles:b}=Ch(i,D(e,"zIndex"),e._disableGlobalStack),{activatorEl:p,activatorRef:S,activatorEvents:C,contentEvents:_,scrimEvents:V}=Sh(e,{isActive:i,isTop:y}),{dimensionStyles:x}=vt(e),T=Fs(),{scopeId:w}=_n();Z(()=>e.disabled,G=>{G&&(i.value=!1)});const k=W(),I=W(),{contentStyles:A,updateLocation:B}=ch(e,{isRtl:d,contentEl:I,activatorEl:p,isActive:i});hh(e,{root:k,contentEl:I,activatorEl:p,isActive:i,updateLocation:B});function E(G){a("click:outside",G),e.persistent?M():i.value=!1}function F(){return i.value&&g.value}Ce&&Z(i,G=>{G?window.addEventListener("keydown",X):window.removeEventListener("keydown",X)},{immediate:!0});function X(G){var U,z;G.key==="Escape"&&g.value&&(e.persistent?M():(i.value=!1,(U=I.value)!=null&&U.contains(document.activeElement)&&((z=p.value)==null||z.focus())))}const $=es();Et(()=>e.closeOnBack,()=>{mg($,G=>{g.value&&i.value?(G(!1),e.persistent?M():i.value=!1):G()})});const N=W();Z(()=>i.value&&(e.absolute||e.contained)&&s.value==null,G=>{if(G){const U=Ma(k.value);U&&U!==document.scrollingElement&&(N.value=U.scrollTop)}});function M(){e.noClickAnimation||I.value&&Ut(I.value,[{transformOrigin:"center"},{transform:"scale(1.03)"},{transformOrigin:"center"}],{duration:150,easing:$n})}return j(()=>{var G;return r(oe,null,[(G=n.activator)==null?void 0:G.call(n,{isActive:i.value,props:Y({ref:S},C.value,e.activatorProps)}),T.value&&f.value&&r(Nr,{disabled:!s.value,to:s.value},{default:()=>[r("div",Y({class:["v-overlay",{"v-overlay--absolute":e.absolute||e.contained,"v-overlay--active":i.value,"v-overlay--contained":e.contained},u.value,c.value,e.class],style:[b.value,{top:J(N.value)},e.style],ref:k},w,l),[r(Ih,Y({color:m,modelValue:i.value&&!!e.scrim},V.value),null),r(ht,{appear:!0,persisted:!0,transition:e.transition,target:p.value,onAfterLeave:()=>{v(),a("afterLeave")}},{default:()=>{var U;return[ne(r("div",Y({ref:I,class:["v-overlay__content",e.contentClass],style:[x.value,A.value]},_.value,e.contentProps),[(U=n.default)==null?void 0:U.call(n,{isActive:i})]),[[Pe,i.value],[Ze("click-outside"),{handler:E,closeConditional:F,include:()=>[p.value]}]])]}})])]})])}),{activatorEl:p,animateClick:M,contentEl:I,globalTop:g,localTop:y,updateLocation:B}}}),Nl=Symbol("Forwarded refs");function zl(e,t){let n=e;for(;n;){const l=Reflect.getOwnPropertyDescriptor(n,t);if(l)return l;n=Object.getPrototypeOf(n)}}function bt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),l=1;l<t;l++)n[l-1]=arguments[l];return e[Nl]=n,new Proxy(e,{get(a,o){if(Reflect.has(a,o))return Reflect.get(a,o);if(!(typeof o=="symbol"||o.startsWith("__"))){for(const i of n)if(i.value&&Reflect.has(i.value,o)){const s=Reflect.get(i.value,o);return typeof s=="function"?s.bind(i.value):s}}},has(a,o){if(Reflect.has(a,o))return!0;if(typeof o=="symbol"||o.startsWith("__"))return!1;for(const i of n)if(i.value&&Reflect.has(i.value,o))return!0;return!1},set(a,o,i){if(Reflect.has(a,o))return Reflect.set(a,o,i);if(typeof o=="symbol"||o.startsWith("__"))return!1;for(const s of n)if(s.value&&Reflect.has(s.value,o))return Reflect.set(s.value,o,i);return!1},getOwnPropertyDescriptor(a,o){var s;const i=Reflect.getOwnPropertyDescriptor(a,o);if(i)return i;if(!(typeof o=="symbol"||o.startsWith("__"))){for(const u of n){if(!u.value)continue;const c=zl(u.value,o)??("_"in u.value?zl((s=u.value._)==null?void 0:s.setupState,o):void 0);if(c)return c}for(const u of n){const c=u.value&&u.value[Nl];if(!c)continue;const d=c.slice();for(;d.length;){const f=d.shift(),v=zl(f.value,o);if(v)return v;const m=f.value&&f.value[Nl];m&&d.push(...m)}}}}})}const Th=R({id:String,...rt(Yn({closeDelay:250,closeOnContentClick:!0,locationStrategy:"connected",openDelay:300,scrim:!1,scrollStrategy:"reposition",transition:{component:pl}}),["absolute"])},"VMenu"),Il=L()({name:"VMenu",props:Th(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{scopeId:a}=_n(),o=We(),i=h(()=>e.id||`v-menu-${o}`),s=W(),u=Ve(ua,null),c=K(0);$e(ua,{register(){++c.value},unregister(){--c.value},closeParents(){setTimeout(()=>{c.value||(l.value=!1,u==null||u.closeParents())},40)}});async function d(y){var S,C,_;const b=y.relatedTarget,p=y.target;await xe(),l.value&&b!==p&&((S=s.value)!=null&&S.contentEl)&&((C=s.value)!=null&&C.globalTop)&&![document,s.value.contentEl].includes(p)&&!s.value.contentEl.contains(p)&&((_=Ln(s.value.contentEl)[0])==null||_.focus())}Z(l,y=>{y?(u==null||u.register(),document.addEventListener("focusin",d,{once:!0})):(u==null||u.unregister(),document.removeEventListener("focusin",d))});function f(){u==null||u.closeParents()}function v(y){var b,p,S;e.disabled||y.key==="Tab"&&(ki(Ln((b=s.value)==null?void 0:b.contentEl,!1),y.shiftKey?"prev":"next",_=>_.tabIndex>=0)||(l.value=!1,(S=(p=s.value)==null?void 0:p.activatorEl)==null||S.focus()))}function m(y){var p;if(e.disabled)return;const b=(p=s.value)==null?void 0:p.contentEl;b&&l.value?y.key==="ArrowDown"?(y.preventDefault(),ul(b,"next")):y.key==="ArrowUp"&&(y.preventDefault(),ul(b,"prev")):["ArrowDown","ArrowUp"].includes(y.key)&&(l.value=!0,y.preventDefault(),setTimeout(()=>setTimeout(()=>m(y))))}const g=h(()=>Y({"aria-haspopup":"menu","aria-expanded":String(l.value),"aria-owns":i.value,onKeydown:m},e.activatorProps));return j(()=>{const[y]=It.filterProps(e);return r(It,Y({ref:s,class:["v-menu",e.class],style:e.style},y,{modelValue:l.value,"onUpdate:modelValue":b=>l.value=b,absolute:!0,activatorProps:g.value,"onClick:outside":f,onKeydown:v},a),{activator:n.activator,default:function(){for(var b=arguments.length,p=new Array(b),S=0;S<b;S++)p[S]=arguments[S];return r(pe,{root:"VMenu"},{default:()=>{var C;return[(C=n.default)==null?void 0:C.call(n,...p)]}})}})}),bt({id:i,ΨopenChildren:c},s)}});const Ph=R({active:Boolean,max:[Number,String],value:{type:[Number,String],default:0},...q(),...Pt({transition:{component:ja}})},"VCounter"),Tl=L()({name:"VCounter",functional:!0,props:Ph(),setup(e,t){let{slots:n}=t;const l=h(()=>e.max?`${e.value} / ${e.max}`:String(e.value));return j(()=>r(ht,{transition:e.transition},{default:()=>[ne(r("div",{class:["v-counter",e.class],style:e.style},[n.default?n.default({counter:l.value,max:e.max,value:e.value}):l.value]),[[Pe,e.active]])]})),{}}});const Ah=R({floating:Boolean,...q()},"VFieldLabel"),An=L()({name:"VFieldLabel",props:Ah(),setup(e,t){let{slots:n}=t;return j(()=>r(Vn,{class:["v-field-label",{"v-field-label--floating":e.floating},e.class],style:e.style,"aria-hidden":e.floating||void 0},n)),{}}}),Bh=["underlined","outlined","filled","solo","solo-inverted","solo-filled","plain"],Pl=R({appendInnerIcon:se,bgColor:String,clearable:Boolean,clearIcon:{type:se,default:"$clear"},active:Boolean,centerAffix:{type:Boolean,default:void 0},color:String,baseColor:String,dirty:Boolean,disabled:{type:Boolean,default:null},error:Boolean,flat:Boolean,label:String,persistentClear:Boolean,prependInnerIcon:se,reverse:Boolean,singleLine:Boolean,variant:{type:String,default:"filled",validator:e=>Bh.includes(e)},"onClick:clear":kt(),"onClick:appendInner":kt(),"onClick:prependInner":kt(),...q(),...Xa(),...Ie(),...he()},"VField"),Kn=L()({name:"VField",inheritAttrs:!1,props:{id:String,...Cl(),...Pl()},emits:{"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{themeClasses:o}=ye(e),{loaderClasses:i}=Sl(e),{focusClasses:s,isFocused:u,focus:c,blur:d}=Ot(e),{InputIcon:f}=fs(e),{roundedClasses:v}=Ae(e),{rtlClasses:m}=Oe(),g=h(()=>e.dirty||e.active),y=h(()=>!e.singleLine&&!!(e.label||a.label)),b=We(),p=h(()=>e.id||`input-${b}`),S=h(()=>`${p.value}-messages`),C=W(),_=W(),V=W(),x=h(()=>["plain","underlined"].includes(e.variant)),{backgroundColorClasses:T,backgroundColorStyles:w}=Be(D(e,"bgColor")),{textColorClasses:k,textColorStyles:I}=Ge(h(()=>e.error||e.disabled?void 0:g.value&&u.value?e.color:e.baseColor));Z(g,E=>{if(y.value){const F=C.value.$el,X=_.value.$el;requestAnimationFrame(()=>{const $=Ea(F),N=X.getBoundingClientRect(),M=N.x-$.x,G=N.y-$.y-($.height/2-N.height/2),U=N.width/.75,z=Math.abs(U-$.width)>1?{maxWidth:J(U)}:void 0,ae=getComputedStyle(F),re=getComputedStyle(X),ve=parseFloat(ae.transitionDuration)*1e3||150,ge=parseFloat(re.getPropertyValue("--v-field-label-scale")),O=re.getPropertyValue("color");F.style.visibility="visible",X.style.visibility="hidden",Ut(F,{transform:`translate(${M}px, ${G}px) scale(${ge})`,color:O,...z},{duration:ve,easing:$n,direction:E?"normal":"reverse"}).finished.then(()=>{F.style.removeProperty("visibility"),X.style.removeProperty("visibility")})})}},{flush:"post"});const A=h(()=>({isActive:g,isFocused:u,controlRef:V,blur:d,focus:c}));function B(E){E.target!==document.activeElement&&E.preventDefault()}return j(()=>{var M,G,U;const E=e.variant==="outlined",F=a["prepend-inner"]||e.prependInnerIcon,X=!!(e.clearable||a.clear),$=!!(a["append-inner"]||e.appendInnerIcon||X),N=a.label?a.label({...A.value,label:e.label,props:{for:p.value}}):e.label;return r("div",Y({class:["v-field",{"v-field--active":g.value,"v-field--appended":$,"v-field--center-affix":e.centerAffix??!x.value,"v-field--disabled":e.disabled,"v-field--dirty":e.dirty,"v-field--error":e.error,"v-field--flat":e.flat,"v-field--has-background":!!e.bgColor,"v-field--persistent-clear":e.persistentClear,"v-field--prepended":F,"v-field--reverse":e.reverse,"v-field--single-line":e.singleLine,"v-field--no-label":!N,[`v-field--variant-${e.variant}`]:!0},o.value,T.value,s.value,i.value,v.value,m.value,e.class],style:[w.value,e.style],onClick:B},n),[r("div",{class:"v-field__overlay"},null),r(Za,{name:"v-field",active:!!e.loading,color:e.error?"error":typeof e.loading=="string"?e.loading:e.color},{default:a.loader}),F&&r("div",{key:"prepend",class:"v-field__prepend-inner"},[e.prependInnerIcon&&r(f,{key:"prepend-icon",name:"prependInner"},null),(M=a["prepend-inner"])==null?void 0:M.call(a,A.value)]),r("div",{class:"v-field__field","data-no-activator":""},[["filled","solo","solo-inverted","solo-filled"].includes(e.variant)&&y.value&&r(An,{key:"floating-label",ref:_,class:[k.value],floating:!0,for:p.value,style:I.value},{default:()=>[N]}),r(An,{ref:C,for:p.value},{default:()=>[N]}),(G=a.default)==null?void 0:G.call(a,{...A.value,props:{id:p.value,class:"v-field__input","aria-describedby":S.value},focus:c,blur:d})]),X&&r(Ua,{key:"clear"},{default:()=>[ne(r("div",{class:"v-field__clearable",onMousedown:z=>{z.preventDefault(),z.stopPropagation()}},[a.clear?a.clear():r(f,{name:"clear"},null)]),[[Pe,e.dirty]])]}),$&&r("div",{key:"append",class:"v-field__append-inner"},[(U=a["append-inner"])==null?void 0:U.call(a,A.value),e.appendInnerIcon&&r(f,{key:"append-icon",name:"appendInner"},null)]),r("div",{class:["v-field__outline",k.value],style:I.value},[E&&r(oe,null,[r("div",{class:"v-field__outline__start"},null),y.value&&r("div",{class:"v-field__outline__notch"},[r(An,{ref:_,floating:!0,for:p.value},{default:()=>[N]})]),r("div",{class:"v-field__outline__end"},null)]),x.value&&y.value&&r(An,{ref:_,floating:!0,for:p.value},{default:()=>[N]})])])}),{controlRef:V}}});function lo(e){const t=Object.keys(Kn.props).filter(n=>!Aa(n)&&n!=="class"&&n!=="style");return Kt(e,t)}const Rh=["color","file","time","date","datetime-local","week","month"],Al=R({autofocus:Boolean,counter:[Boolean,Number,String],counterValue:[Number,Function],prefix:String,placeholder:String,persistentPlaceholder:Boolean,persistentCounter:Boolean,suffix:String,role:String,type:{type:String,default:"text"},modelModifiers:Object,...Bt(),...Pl()},"VTextField"),Zt=L()({name:"VTextField",directives:{Intersect:jn},inheritAttrs:!1,props:Al(),emits:{"click:control":e=>!0,"mousedown:control":e=>!0,"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const o=ue(e,"modelValue"),{isFocused:i,focus:s,blur:u}=Ot(e),c=h(()=>typeof e.counterValue=="function"?e.counterValue(o.value):typeof e.counterValue=="number"?e.counterValue:(o.value??"").toString().length),d=h(()=>{if(n.maxlength)return n.maxlength;if(!(!e.counter||typeof e.counter!="number"&&typeof e.counter!="string"))return e.counter}),f=h(()=>["plain","underlined"].includes(e.variant));function v(x,T){var w,k;!e.autofocus||!x||(k=(w=T[0].target)==null?void 0:w.focus)==null||k.call(w)}const m=W(),g=W(),y=W(),b=h(()=>Rh.includes(e.type)||e.persistentPlaceholder||i.value||e.active);function p(){var x;y.value!==document.activeElement&&((x=y.value)==null||x.focus()),i.value||s()}function S(x){l("mousedown:control",x),x.target!==y.value&&(p(),x.preventDefault())}function C(x){p(),l("click:control",x)}function _(x){x.stopPropagation(),p(),xe(()=>{o.value=null,Ra(e["onClick:clear"],x)})}function V(x){var w;const T=x.target;if(o.value=T.value,(w=e.modelModifiers)!=null&&w.trim&&["text","search","password","tel","url"].includes(e.type)){const k=[T.selectionStart,T.selectionEnd];xe(()=>{T.selectionStart=k[0],T.selectionEnd=k[1]})}}return j(()=>{const x=!!(a.counter||e.counter||e.counterValue),T=!!(x||a.details),[w,k]=Qt(n),[{modelValue:I,...A}]=Ne.filterProps(e),[B]=lo(e);return r(Ne,Y({ref:m,modelValue:o.value,"onUpdate:modelValue":E=>o.value=E,class:["v-text-field",{"v-text-field--prefixed":e.prefix,"v-text-field--suffixed":e.suffix,"v-text-field--plain-underlined":["plain","underlined"].includes(e.variant)},e.class],style:e.style},w,A,{centerAffix:!f.value,focused:i.value}),{...a,default:E=>{let{id:F,isDisabled:X,isDirty:$,isReadonly:N,isValid:M}=E;return r(Kn,Y({ref:g,onMousedown:S,onClick:C,"onClick:clear":_,"onClick:prependInner":e["onClick:prependInner"],"onClick:appendInner":e["onClick:appendInner"],role:e.role},B,{id:F.value,active:b.value||$.value,dirty:$.value||e.dirty,disabled:X.value,focused:i.value,error:M.value===!1}),{...a,default:G=>{let{props:{class:U,...z}}=G;const ae=ne(r("input",Y({ref:y,value:o.value,onInput:V,autofocus:e.autofocus,readonly:N.value,disabled:X.value,name:e.name,placeholder:e.placeholder,size:1,type:e.type,onFocus:p,onBlur:u},z,k),null),[[Ze("intersect"),{handler:v},null,{once:!0}]]);return r(oe,null,[e.prefix&&r("span",{class:"v-text-field__prefix"},[r("span",{class:"v-text-field__prefix__text"},[e.prefix])]),a.default?r("div",{class:U,"data-no-activator":""},[a.default(),ae]):zr(ae,{class:U}),e.suffix&&r("span",{class:"v-text-field__suffix"},[r("span",{class:"v-text-field__suffix__text"},[e.suffix])])])}})},details:T?E=>{var F;return r(oe,null,[(F=a.details)==null?void 0:F.call(a,E),x&&r(oe,null,[r("span",null,null),r(Tl,{active:e.persistentCounter||i.value,value:c.value,max:d.value},a.counter)])])}:void 0})}),bt({},m,g,y)}});const Eh=R({renderless:Boolean,...q()},"VVirtualScrollItem"),Lh=L()({name:"VVirtualScrollItem",inheritAttrs:!1,props:Eh(),emits:{"update:height":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{resizeRef:o,contentRect:i}=St(void 0,"border");Z(()=>{var s;return(s=i.value)==null?void 0:s.height},s=>{s!=null&&l("update:height",s)}),j(()=>{var s,u;return e.renderless?r(oe,null,[(s=a.default)==null?void 0:s.call(a,{itemRef:o})]):r("div",Y({ref:o,class:["v-virtual-scroll__item",e.class],style:e.style},n),[(u=a.default)==null?void 0:u.call(a)])})}}),ei=-1,ti=1,$h=R({itemHeight:{type:[Number,String],default:48}},"virtual");function Mh(e,t,n){const l=K(0),a=K(e.itemHeight),o=h({get:()=>parseInt(a.value??0,10),set(T){a.value=T}}),i=W(),{resizeRef:s,contentRect:u}=St();tt(()=>{s.value=i.value});const c=en(),d=new Map;let f=Array.from({length:t.value.length});const v=h(()=>{const T=(!u.value||i.value===document.documentElement?c.height.value:u.value.height)-((n==null?void 0:n.value)??0);return Math.ceil(T/o.value*1.7+1)});function m(T,w){o.value=Math.max(o.value,w),f[T]=w,d.set(t.value[T],w)}function g(T){return f.slice(0,T).reduce((w,k)=>w+(k||o.value),0)}function y(T){const w=t.value.length;let k=0,I=0;for(;I<T&&k<w;)I+=f[k++]||o.value;return k-1}let b=0;function p(){if(!i.value||!u.value)return;const T=u.value.height-56,w=i.value.scrollTop,k=w<b?ei:ti,I=y(w+T/2),A=Math.round(v.value/3),B=I-A,E=l.value+A*2-1;k===ei&&I<=E?l.value=Ue(B,0,t.value.length):k===ti&&I>=E&&(l.value=Ue(B,0,t.value.length-v.value)),b=w}function S(T){if(!i.value)return;const w=g(T);i.value.scrollTop=w}const C=h(()=>Math.min(t.value.length,l.value+v.value)),_=h(()=>t.value.slice(l.value,C.value).map((T,w)=>({raw:T,index:w+l.value}))),V=h(()=>g(l.value)),x=h(()=>g(t.value.length)-g(C.value));return Z(()=>t.value.length,()=>{f=Ct(t.value.length).map(()=>o.value),d.forEach((T,w)=>{const k=t.value.indexOf(w);k===-1?d.delete(w):f[k]=T})}),{containerRef:i,computedItems:_,itemHeight:o,paddingTop:V,paddingBottom:x,scrollToIndex:S,handleScroll:p,handleItemResize:m}}const Fh=R({items:{type:Array,default:()=>[]},renderless:Boolean,...$h(),...q(),...dt()},"VVirtualScroll"),Bl=L()({name:"VVirtualScroll",props:Fh(),setup(e,t){let{slots:n}=t;const l=De("VVirtualScroll"),{dimensionStyles:a}=vt(e),{containerRef:o,handleScroll:i,handleItemResize:s,scrollToIndex:u,paddingTop:c,paddingBottom:d,computedItems:f}=Mh(e,D(e,"items"));return Et(()=>e.renderless,()=>{Je(()=>{var v;o.value=Ma(l.vnode.el,!0),(v=o.value)==null||v.addEventListener("scroll",i)}),Xe(()=>{var v;(v=o.value)==null||v.removeEventListener("scroll",i)})}),j(()=>{const v=f.value.map(m=>r(Lh,{key:m.index,renderless:e.renderless,"onUpdate:height":g=>s(m.index,g)},{default:g=>{var y;return(y=n.default)==null?void 0:y.call(n,{item:m.raw,index:m.index,...g})}}));return e.renderless?r(oe,null,[r("div",{class:"v-virtual-scroll__spacer",style:{paddingTop:J(c.value)}},null),v,r("div",{class:"v-virtual-scroll__spacer",style:{paddingBottom:J(d.value)}},null)]):r("div",{ref:o,class:["v-virtual-scroll",e.class],onScroll:i,style:[a.value,e.style]},[r("div",{class:"v-virtual-scroll__container",style:{paddingTop:J(c.value),paddingBottom:J(d.value)}},[v])])}),{scrollToIndex:u}}});function ao(e,t){const n=K(!1);let l;function a(s){cancelAnimationFrame(l),n.value=!0,l=requestAnimationFrame(()=>{l=requestAnimationFrame(()=>{n.value=!1})})}async function o(){await new Promise(s=>requestAnimationFrame(s)),await new Promise(s=>requestAnimationFrame(s)),await new Promise(s=>requestAnimationFrame(s)),await new Promise(s=>{if(n.value){const u=Z(n,()=>{u(),s()})}else s()})}async function i(s){var d,f;if(s.key==="Tab"&&((d=t.value)==null||d.focus()),!["PageDown","PageUp","Home","End"].includes(s.key))return;const u=(f=e.value)==null?void 0:f.$el;if(!u)return;(s.key==="Home"||s.key==="End")&&u.scrollTo({top:s.key==="Home"?0:u.scrollHeight,behavior:"smooth"}),await o();const c=u.querySelectorAll(":scope > :not(.v-virtual-scroll__spacer)");if(s.key==="PageDown"||s.key==="Home"){const v=u.getBoundingClientRect().top;for(const m of c)if(m.getBoundingClientRect().top>=v){m.focus();break}}else{const v=u.getBoundingClientRect().bottom;for(const m of[...c].reverse())if(m.getBoundingClientRect().bottom<=v){m.focus();break}}}return{onListScroll:a,onListKeydown:i}}const oo=R({chips:Boolean,closableChips:Boolean,closeText:{type:String,default:"$vuetify.close"},openText:{type:String,default:"$vuetify.open"},eager:Boolean,hideNoData:Boolean,hideSelected:Boolean,menu:Boolean,menuIcon:{type:se,default:"$dropdown"},menuProps:{type:Object},multiple:Boolean,noDataText:{type:String,default:"$vuetify.noDataText"},openOnClear:Boolean,itemColor:String,...As({itemChildren:!1})},"Select"),Dh=R({...oo(),...rt(Al({modelValue:null,role:"button"}),["validationValue","dirty","appendInnerIcon"]),...Pt({transition:{component:pl}})},"VSelect"),Oh=L()({name:"VSelect",props:Dh(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,"update:menu":e=>!0},setup(e,t){let{slots:n}=t;const{t:l}=ct(),a=W(),o=W(),i=W(),s=ue(e,"menu"),u=h({get:()=>s.value,set:$=>{var N;s.value&&!$&&((N=o.value)!=null&&N.ΨopenChildren)||(s.value=$)}}),{items:c,transformIn:d,transformOut:f}=to(e),v=ue(e,"modelValue",[],$=>d($===null?[null]:et($)),$=>{const N=f($);return e.multiple?N:N[0]??null}),m=xl(),g=h(()=>v.value.map($=>$.value)),y=K(!1),b=h(()=>u.value?e.closeText:e.openText);let p="",S;const C=h(()=>e.hideSelected?c.value.filter($=>!v.value.some(N=>N===$)):c.value),_=h(()=>e.hideNoData&&!c.value.length||e.readonly||(m==null?void 0:m.isReadonly.value)),V=W(),{onListScroll:x,onListKeydown:T}=ao(V,a);function w($){e.openOnClear&&(u.value=!0)}function k(){_.value||(u.value=!u.value)}function I($){var z,ae;if(!$.key||e.readonly||m!=null&&m.isReadonly.value)return;["Enter"," ","ArrowDown","ArrowUp","Home","End"].includes($.key)&&$.preventDefault(),["Enter","ArrowDown"," "].includes($.key)&&(u.value=!0),["Escape","Tab"].includes($.key)&&(u.value=!1),$.key==="Home"?(z=V.value)==null||z.focus("first"):$.key==="End"&&((ae=V.value)==null||ae.focus("last"));const N=1e3;function M(re){const ve=re.key.length===1,ge=!re.ctrlKey&&!re.metaKey&&!re.altKey;return ve&&ge}if(e.multiple||!M($))return;const G=performance.now();G-S>N&&(p=""),p+=$.key.toLowerCase(),S=G;const U=c.value.find(re=>re.title.toLowerCase().startsWith(p));U!==void 0&&(v.value=[U])}function A($){if(e.multiple){const N=v.value.findIndex(M=>e.valueComparator(M.value,$.value));if(N===-1)v.value=[...v.value,$];else{const M=[...v.value];M.splice(N,1),v.value=M}}else v.value=[$],u.value=!1}function B($){var N;(N=V.value)!=null&&N.$el.contains($.relatedTarget)||(u.value=!1)}function E(){var $;y.value&&(($=a.value)==null||$.focus())}function F($){y.value=!0}function X($){if($==null)v.value=[];else if(dn(a.value,":autofill")||dn(a.value,":-webkit-autofill")){const N=c.value.find(M=>M.title===$);N&&A(N)}else a.value&&(a.value.value="")}return Z(u,()=>{if(!e.hideSelected&&u.value&&v.value.length){const $=C.value.findIndex(N=>v.value.some(M=>e.valueComparator(M.value,N.value)));Ce&&window.requestAnimationFrame(()=>{var N;$>=0&&((N=i.value)==null||N.scrollToIndex($))})}}),j(()=>{const $=!!(e.chips||n.chip),N=!!(!e.hideNoData||C.value.length||n["prepend-item"]||n["append-item"]||n["no-data"]),M=v.value.length>0,[G]=Zt.filterProps(e),U=M||!y.value&&e.label&&!e.persistentPlaceholder?void 0:e.placeholder;return r(Zt,Y({ref:a},G,{modelValue:v.value.map(z=>z.props.value).join(", "),"onUpdate:modelValue":X,focused:y.value,"onUpdate:focused":z=>y.value=z,validationValue:v.externalValue,counterValue:v.value.length,dirty:M,class:["v-select",{"v-select--active-menu":u.value,"v-select--chips":!!e.chips,[`v-select--${e.multiple?"multiple":"single"}`]:!0,"v-select--selected":v.value.length,"v-select--selection-slot":!!n.selection},e.class],style:e.style,inputmode:"none",placeholder:U,"onClick:clear":w,"onMousedown:control":k,onBlur:B,onKeydown:I,"aria-label":l(b.value),title:l(b.value)}),{...n,default:()=>r(oe,null,[r(Il,Y({ref:o,modelValue:u.value,"onUpdate:modelValue":z=>u.value=z,activator:"parent",contentClass:"v-select__content",disabled:_.value,eager:e.eager,maxHeight:310,openOnClick:!1,closeOnContentClick:!1,transition:e.transition,onAfterLeave:E},e.menuProps),{default:()=>[N&&r(Vl,{ref:V,selected:g.value,selectStrategy:e.multiple?"independent":"single-independent",onMousedown:z=>z.preventDefault(),onKeydown:T,onFocusin:F,onScrollPassive:x,tabindex:"-1",color:e.itemColor??e.color},{default:()=>{var z,ae,re;return[(z=n["prepend-item"])==null?void 0:z.call(n),!C.value.length&&!e.hideNoData&&(((ae=n["no-data"])==null?void 0:ae.call(n))??r(_t,{title:l(e.noDataText)},null)),r(Bl,{ref:i,renderless:!0,items:C.value},{default:ve=>{var H;let{item:ge,index:O,itemRef:me}=ve;const Q=Y(ge.props,{ref:me,key:O,onClick:()=>A(ge)});return((H=n.item)==null?void 0:H.call(n,{item:ge,index:O,props:Q}))??r(_t,Q,{prepend:le=>{let{isSelected:be}=le;return r(oe,null,[e.multiple&&!e.hideSelected?r(mn,{key:ge.value,modelValue:be,ripple:!1,tabindex:"-1"},null):void 0,ge.props.prependIcon&&r(Se,{icon:ge.props.prependIcon},null)])}})}}),(re=n["append-item"])==null?void 0:re.call(n)]}})]}),v.value.map((z,ae)=>{var ge;function re(O){O.stopPropagation(),O.preventDefault(),A(z)}const ve={"onClick:close":re,onMousedown(O){O.preventDefault(),O.stopPropagation()},modelValue:!0,"onUpdate:modelValue":void 0};return r("div",{key:z.value,class:"v-select__selection"},[$?n.chip?r(pe,{key:"chip-defaults",defaults:{VChip:{closable:e.closableChips,size:"small",text:z.title}}},{default:()=>{var O;return[(O=n.chip)==null?void 0:O.call(n,{item:z,index:ae,props:ve})]}}):r(Wn,Y({key:"chip",closable:e.closableChips,size:"small",text:z.title,disabled:z.props.disabled},ve),null):((ge=n.selection)==null?void 0:ge.call(n,{item:z,index:ae}))??r("span",{class:"v-select__selection-text"},[z.title,e.multiple&&ae<v.value.length-1&&r("span",{class:"v-select__selection-comma"},[gl(",")])])])})]),"append-inner":function(){var ve;for(var z=arguments.length,ae=new Array(z),re=0;re<z;re++)ae[re]=arguments[re];return r(oe,null,[(ve=n["append-inner"])==null?void 0:ve.call(n,...ae),e.menuIcon?r(Se,{class:"v-select__menu-icon",icon:e.menuIcon},null):void 0])}})}),bt({isFocused:y,menu:u,select:A},a)}}),Nh=(e,t,n)=>e==null||t==null?-1:e.toString().toLocaleLowerCase().indexOf(t.toString().toLocaleLowerCase()),zs=R({customFilter:Function,customKeyFilter:Object,filterKeys:[Array,String],filterMode:{type:String,default:"intersection"},noFilter:Boolean},"filter");function zh(e,t,n){var s;const l=[],a=(n==null?void 0:n.default)??Nh,o=n!=null&&n.filterKeys?et(n.filterKeys):!1,i=Object.keys((n==null?void 0:n.customKeyFilter)??{}).length;if(!(e!=null&&e.length))return l;e:for(let u=0;u<e.length;u++){const[c,d=c]=et(e[u]),f={},v={};let m=-1;if(t&&!(n!=null&&n.noFilter)){if(typeof c=="object"){const b=o||Object.keys(d);for(const p of b){const S=pt(d,p,d),C=(s=n==null?void 0:n.customKeyFilter)==null?void 0:s[p];if(m=C?C(S,t,c):a(S,t,c),m!==-1&&m!==!1)C?f[p]=m:v[p]=m;else if((n==null?void 0:n.filterMode)==="every")continue e}}else m=a(c,t,c),m!==-1&&m!==!1&&(v.title=m);const g=Object.keys(v).length,y=Object.keys(f).length;if(!g&&!y||(n==null?void 0:n.filterMode)==="union"&&y!==i&&!g||(n==null?void 0:n.filterMode)==="intersection"&&(y!==i||!g))continue}l.push({index:u,matches:{...v,...f}})}return l}function Hs(e,t,n,l){const a=W([]),o=W(new Map),i=h(()=>l!=null&&l.transform?ot(t).map(u=>[u,l.transform(u)]):ot(t));tt(()=>{const u=typeof n=="function"?n():ot(n),c=typeof u!="string"&&typeof u!="number"?"":String(u),d=zh(i.value,c,{customKeyFilter:e.customKeyFilter,default:e.customFilter,filterKeys:e.filterKeys,filterMode:e.filterMode,noFilter:e.noFilter}),f=ot(t),v=[],m=new Map;d.forEach(g=>{let{index:y,matches:b}=g;const p=f[y];v.push(p),m.set(p.value,b)}),a.value=v,o.value=m});function s(u){return o.value.get(u.value)}return{filteredItems:a,filteredMatches:o,getMatches:s}}function Hh(e,t,n){if(t==null)return e;if(Array.isArray(t))throw new Error("Multiple matches is not implemented");return typeof t=="number"&&~t?r(oe,null,[r("span",{class:"v-autocomplete__unmask"},[e.substr(0,t)]),r("span",{class:"v-autocomplete__mask"},[e.substr(t,n)]),r("span",{class:"v-autocomplete__unmask"},[e.substr(t+n)])]):e}const jh=R({autoSelectFirst:{type:[Boolean,String]},search:String,...zs({filterKeys:["title"]}),...oo(),...rt(Al({modelValue:null,role:"combobox"}),["validationValue","dirty","appendInnerIcon"]),...Pt({transition:!1})},"VAutocomplete"),Uh=L()({name:"VAutocomplete",props:jh(),emits:{"update:focused":e=>!0,"update:search":e=>!0,"update:modelValue":e=>!0,"update:menu":e=>!0},setup(e,t){let{slots:n}=t;const{t:l}=ct(),a=W(),o=K(!1),i=K(!0),s=K(!1),u=W(),c=W(),d=ue(e,"menu"),f=h({get:()=>d.value,set:Q=>{var H;d.value&&!Q&&((H=u.value)!=null&&H.ΨopenChildren)||(d.value=Q)}}),v=K(-1),m=h(()=>{var Q;return(Q=a.value)==null?void 0:Q.color}),g=h(()=>f.value?e.closeText:e.openText),{items:y,transformIn:b,transformOut:p}=to(e),{textColorClasses:S,textColorStyles:C}=Ge(m),_=ue(e,"search",""),V=ue(e,"modelValue",[],Q=>b(Q===null?[null]:et(Q)),Q=>{const H=p(Q);return e.multiple?H:H[0]??null}),x=xl(),{filteredItems:T,getMatches:w}=Hs(e,y,()=>i.value?"":_.value),k=h(()=>e.hideSelected?T.value.filter(Q=>!V.value.some(H=>H.value===Q.value)):T.value),I=h(()=>V.value.map(Q=>Q.props.value)),A=h(()=>{var H;return(e.autoSelectFirst===!0||e.autoSelectFirst==="exact"&&_.value===((H=k.value[0])==null?void 0:H.title))&&k.value.length>0&&!i.value&&!s.value}),B=h(()=>e.hideNoData&&!y.value.length||e.readonly||(x==null?void 0:x.isReadonly.value)),E=W(),{onListScroll:F,onListKeydown:X}=ao(E,a);function $(Q){e.openOnClear&&(f.value=!0),_.value=""}function N(){B.value||(f.value=!0)}function M(Q){B.value||(o.value&&(Q.preventDefault(),Q.stopPropagation()),f.value=!f.value)}function G(Q){var be,de,ie;if(e.readonly||x!=null&&x.isReadonly.value)return;const H=a.value.selectionStart,le=V.value.length;if((v.value>-1||["Enter","ArrowDown","ArrowUp"].includes(Q.key))&&Q.preventDefault(),["Enter","ArrowDown"].includes(Q.key)&&(f.value=!0),["Escape"].includes(Q.key)&&(f.value=!1),A.value&&["Enter","Tab"].includes(Q.key)&&me(k.value[0]),Q.key==="ArrowDown"&&A.value&&((be=E.value)==null||be.focus("next")),!!e.multiple){if(["Backspace","Delete"].includes(Q.key)){if(v.value<0){Q.key==="Backspace"&&!_.value&&(v.value=le-1);return}const fe=v.value,Te=V.value[v.value];Te&&!Te.props.disabled&&me(Te),v.value=fe>=le-1?le-2:fe}if(Q.key==="ArrowLeft"){if(v.value<0&&H>0)return;const fe=v.value>-1?v.value-1:le-1;V.value[fe]?v.value=fe:(v.value=-1,a.value.setSelectionRange((de=_.value)==null?void 0:de.length,(ie=_.value)==null?void 0:ie.length))}if(Q.key==="ArrowRight"){if(v.value<0)return;const fe=v.value+1;V.value[fe]?v.value=fe:(v.value=-1,a.value.setSelectionRange(0,0))}}}function U(Q){_.value=Q.target.value}function z(Q){if(dn(a.value,":autofill")||dn(a.value,":-webkit-autofill")){const H=y.value.find(le=>le.title===Q.target.value);H&&me(H)}}function ae(){var Q;o.value&&(i.value=!0,(Q=a.value)==null||Q.focus())}function re(Q){o.value=!0,setTimeout(()=>{s.value=!0})}function ve(Q){s.value=!1}function ge(Q){(Q==null||Q===""&&!e.multiple)&&(V.value=[])}const O=K(!1);function me(Q){if(e.multiple){const H=V.value.findIndex(le=>e.valueComparator(le.value,Q.value));if(H===-1)V.value=[...V.value,Q];else{const le=[...V.value];le.splice(H,1),V.value=le}}else V.value=[Q],O.value=!0,_.value=Q.title,f.value=!1,i.value=!0,xe(()=>O.value=!1)}return Z(o,(Q,H)=>{var le;Q!==H&&(Q?(O.value=!0,_.value=e.multiple?"":String(((le=V.value.at(-1))==null?void 0:le.props.title)??""),i.value=!0,xe(()=>O.value=!1)):(!e.multiple&&!_.value?V.value=[]:A.value&&!s.value&&!V.value.some(be=>{let{value:de}=be;return de===k.value[0].value})&&me(k.value[0]),f.value=!1,_.value="",v.value=-1))}),Z(_,Q=>{!o.value||O.value||(Q&&(f.value=!0),i.value=!Q)}),Z(f,()=>{if(!e.hideSelected&&f.value&&V.value.length){const Q=k.value.findIndex(H=>V.value.some(le=>H.value===le.value));Ce&&window.requestAnimationFrame(()=>{var H;Q>=0&&((H=c.value)==null||H.scrollToIndex(Q))})}}),j(()=>{const Q=!!(e.chips||n.chip),H=!!(!e.hideNoData||k.value.length||n["prepend-item"]||n["append-item"]||n["no-data"]),le=V.value.length>0,[be]=Zt.filterProps(e);return r(Zt,Y({ref:a},be,{modelValue:_.value,"onUpdate:modelValue":ge,focused:o.value,"onUpdate:focused":de=>o.value=de,validationValue:V.externalValue,counterValue:V.value.length,dirty:le,onInput:U,onChange:z,class:["v-autocomplete",`v-autocomplete--${e.multiple?"multiple":"single"}`,{"v-autocomplete--active-menu":f.value,"v-autocomplete--chips":!!e.chips,"v-autocomplete--selection-slot":!!n.selection,"v-autocomplete--selecting-index":v.value>-1},e.class],style:e.style,readonly:e.readonly,placeholder:le?void 0:e.placeholder,"onClick:clear":$,"onMousedown:control":N,onKeydown:G}),{...n,default:()=>r(oe,null,[r(Il,Y({ref:u,modelValue:f.value,"onUpdate:modelValue":de=>f.value=de,activator:"parent",contentClass:"v-autocomplete__content",disabled:B.value,eager:e.eager,maxHeight:310,openOnClick:!1,closeOnContentClick:!1,transition:e.transition,onAfterLeave:ae},e.menuProps),{default:()=>[H&&r(Vl,{ref:E,selected:I.value,selectStrategy:e.multiple?"independent":"single-independent",onMousedown:de=>de.preventDefault(),onKeydown:X,onFocusin:re,onFocusout:ve,onScrollPassive:F,tabindex:"-1",color:e.itemColor??e.color},{default:()=>{var de,ie,fe;return[(de=n["prepend-item"])==null?void 0:de.call(n),!k.value.length&&!e.hideNoData&&(((ie=n["no-data"])==null?void 0:ie.call(n))??r(_t,{title:l(e.noDataText)},null)),r(Bl,{ref:c,renderless:!0,items:k.value},{default:Te=>{var In;let{item:Re,index:_e,itemRef:qe}=Te;const Xn=Y(Re.props,{ref:qe,key:_e,active:A.value&&_e===0?!0:void 0,onClick:()=>me(Re)});return((In=n.item)==null?void 0:In.call(n,{item:Re,index:_e,props:Xn}))??r(_t,Xn,{prepend:Nt=>{let{isSelected:wt}=Nt;return r(oe,null,[e.multiple&&!e.hideSelected?r(mn,{key:Re.value,modelValue:wt,ripple:!1,tabindex:"-1"},null):void 0,Re.props.prependIcon&&r(Se,{icon:Re.props.prependIcon},null)])},title:()=>{var Nt,wt;return i.value?Re.title:Hh(Re.title,(Nt=w(Re))==null?void 0:Nt.title,((wt=_.value)==null?void 0:wt.length)??0)}})}}),(fe=n["append-item"])==null?void 0:fe.call(n)]}})]}),V.value.map((de,ie)=>{var Re;function fe(_e){_e.stopPropagation(),_e.preventDefault(),me(de)}const Te={"onClick:close":fe,onMousedown(_e){_e.preventDefault(),_e.stopPropagation()},modelValue:!0,"onUpdate:modelValue":void 0};return r("div",{key:de.value,class:["v-autocomplete__selection",ie===v.value&&["v-autocomplete__selection--selected",S.value]],style:ie===v.value?C.value:{}},[Q?n.chip?r(pe,{key:"chip-defaults",defaults:{VChip:{closable:e.closableChips,size:"small",text:de.title}}},{default:()=>{var _e;return[(_e=n.chip)==null?void 0:_e.call(n,{item:de,index:ie,props:Te})]}}):r(Wn,Y({key:"chip",closable:e.closableChips,size:"small",text:de.title,disabled:de.props.disabled},Te),null):((Re=n.selection)==null?void 0:Re.call(n,{item:de,index:ie}))??r("span",{class:"v-autocomplete__selection-text"},[de.title,e.multiple&&ie<V.value.length-1&&r("span",{class:"v-autocomplete__selection-comma"},[gl(",")])])])})]),"append-inner":function(){var Te;for(var de=arguments.length,ie=new Array(de),fe=0;fe<de;fe++)ie[fe]=arguments[fe];return r(oe,null,[(Te=n["append-inner"])==null?void 0:Te.call(n,...ie),e.menuIcon?r(Se,{class:"v-autocomplete__menu-icon",icon:e.menuIcon,onMousedown:M,onClick:Si,"aria-label":l(g.value),title:l(g.value)},null):void 0])}})}),bt({isFocused:o,isPristine:i,menu:f,search:_,filteredItems:T,select:me},a)}});const Gh=R({bordered:Boolean,color:String,content:[Number,String],dot:Boolean,floating:Boolean,icon:se,inline:Boolean,label:{type:String,default:"$vuetify.badge"},max:[Number,String],modelValue:{type:Boolean,default:!0},offsetX:[Number,String],offsetY:[Number,String],textColor:String,...q(),...Mt({location:"top end"}),...Ie(),...ce(),...he(),...Pt({transition:"scale-rotate-transition"})},"VBadge"),Wh=L()({name:"VBadge",inheritAttrs:!1,props:Gh(),setup(e,t){const{backgroundColorClasses:n,backgroundColorStyles:l}=Be(D(e,"color")),{roundedClasses:a}=Ae(e),{t:o}=ct(),{textColorClasses:i,textColorStyles:s}=Ge(D(e,"textColor")),{themeClasses:u}=Di(),{locationStyles:c}=Ft(e,!0,d=>(e.floating?e.dot?2:4:e.dot?8:12)+(["top","bottom"].includes(d)?+(e.offsetY??0):["left","right"].includes(d)?+(e.offsetX??0):0));return j(()=>{const d=Number(e.content),f=!e.max||isNaN(d)?e.content:d<=+e.max?d:`${e.max}+`,[v,m]=Kt(t.attrs,["aria-atomic","aria-label","aria-live","role","title"]);return r(e.tag,Y({class:["v-badge",{"v-badge--bordered":e.bordered,"v-badge--dot":e.dot,"v-badge--floating":e.floating,"v-badge--inline":e.inline},e.class]},m,{style:e.style}),{default:()=>{var g,y;return[r("div",{class:"v-badge__wrapper"},[(y=(g=t.slots).default)==null?void 0:y.call(g),r(ht,{transition:e.transition},{default:()=>{var b,p;return[ne(r("span",Y({class:["v-badge__badge",u.value,n.value,a.value,i.value],style:[l.value,s.value,e.inline?{}:c.value],"aria-atomic":"true","aria-label":o(e.label,d),"aria-live":"polite",role:"status"},v),[e.dot?void 0:t.slots.badge?(p=(b=t.slots).badge)==null?void 0:p.call(b):e.icon?r(Se,{icon:e.icon},null):f]),[[Pe,e.modelValue]])]}})])]}})}),{}}});const Yh=R({color:String,density:String,...q()},"VBannerActions"),js=L()({name:"VBannerActions",props:Yh(),setup(e,t){let{slots:n}=t;return Ee({VBtn:{color:e.color,density:e.density,variant:"text"}}),j(()=>{var l;return r("div",{class:["v-banner-actions",e.class],style:e.style},[(l=n.default)==null?void 0:l.call(n)])}),{}}}),Us=yt("v-banner-text"),Kh=R({avatar:String,color:String,icon:se,lines:String,stacked:Boolean,sticky:Boolean,text:String,...at(),...q(),...Fe(),...dt(),...Me(),...Mt(),...Cn(),...Ie(),...ce(),...he()},"VBanner"),qh=L()({name:"VBanner",props:Kh(),setup(e,t){let{slots:n}=t;const{borderClasses:l}=ft(e),{densityClasses:a}=Ye(e),{mobile:o}=en(),{dimensionStyles:i}=vt(e),{elevationClasses:s}=He(e),{locationStyles:u}=Ft(e),{positionClasses:c}=xn(e),{roundedClasses:d}=Ae(e),{themeClasses:f}=ye(e),v=D(e,"color"),m=D(e,"density");Ee({VBannerActions:{color:v,density:m}}),j(()=>{const g=!!(e.text||n.text),y=!!(e.avatar||e.icon),b=!!(y||n.prepend);return r(e.tag,{class:["v-banner",{"v-banner--stacked":e.stacked||o.value,"v-banner--sticky":e.sticky,[`v-banner--${e.lines}-line`]:!!e.lines},l.value,a.value,s.value,c.value,d.value,f.value,e.class],style:[i.value,u.value,e.style],role:"banner"},{default:()=>{var p;return[b&&r("div",{key:"prepend",class:"v-banner__prepend"},[n.prepend?r(pe,{key:"prepend-defaults",disabled:!y,defaults:{VAvatar:{color:v.value,density:m.value,icon:e.icon,image:e.avatar}}},n.prepend):r(Lt,{key:"prepend-avatar",color:v.value,density:m.value,icon:e.icon,image:e.avatar},null)]),r("div",{class:"v-banner__content"},[g&&r(Us,{key:"text"},{default:()=>{var S;return[((S=n.text)==null?void 0:S.call(n))??e.text]}}),(p=n.default)==null?void 0:p.call(n)]),n.actions&&r(js,{key:"actions"},n.actions)]}})})}});const Xh=R({bgColor:String,color:String,grow:Boolean,mode:{type:String,validator:e=>!e||["horizontal","shift"].includes(e)},height:{type:[Number,String],default:56},active:{type:Boolean,default:!0},...at(),...q(),...Fe(),...Me(),...Ie(),...yn({name:"bottom-navigation"}),...ce({tag:"header"}),...pn({modelValue:!0,selectedClass:"v-btn--selected"}),...he()},"VBottomNavigation"),Zh=L()({name:"VBottomNavigation",props:Xh(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=Di(),{borderClasses:a}=ft(e),{backgroundColorClasses:o,backgroundColorStyles:i}=Be(D(e,"bgColor")),{densityClasses:s}=Ye(e),{elevationClasses:u}=He(e),{roundedClasses:c}=Ae(e),{ssrBootStyles:d}=tn(),f=h(()=>Number(e.height)-(e.density==="comfortable"?8:0)-(e.density==="compact"?16:0)),v=D(e,"active"),{layoutItemStyles:m}=bn({id:e.name,order:h(()=>parseInt(e.order,10)),position:h(()=>"bottom"),layoutSize:h(()=>v.value?f.value:0),elementSize:f,active:v,absolute:D(e,"absolute")});return an(e,Wa),Ee({VBtn:{color:D(e,"color"),density:D(e,"density"),stacked:h(()=>e.mode!=="horizontal"),variant:"text"}},{scoped:!0}),j(()=>r(e.tag,{class:["v-bottom-navigation",{"v-bottom-navigation--active":v.value,"v-bottom-navigation--grow":e.grow,"v-bottom-navigation--shift":e.mode==="shift"},l.value,o.value,a.value,s.value,u.value,c.value,e.class],style:[i.value,m.value,{height:J(f.value),transform:`translateY(${J(v.value?0:100,"%")})`},d.value,e.style]},{default:()=>[n.default&&r("div",{class:"v-bottom-navigation__content"},[n.default()])]})),{}}});const Jh=R({divider:[Number,String],...q()},"VBreadcrumbsDivider"),Gs=L()({name:"VBreadcrumbsDivider",props:Jh(),setup(e,t){let{slots:n}=t;return j(()=>{var l;return r("li",{class:["v-breadcrumbs-divider",e.class],style:e.style},[((l=n==null?void 0:n.default)==null?void 0:l.call(n))??e.divider])}),{}}}),Qh=R({active:Boolean,activeClass:String,activeColor:String,color:String,disabled:Boolean,title:String,...q(),...Gn(),...ce({tag:"li"})},"VBreadcrumbsItem"),Ws=L()({name:"VBreadcrumbsItem",props:Qh(),setup(e,t){let{slots:n,attrs:l}=t;const a=Un(e,l),o=h(()=>{var c;return e.active||((c=a.isActive)==null?void 0:c.value)}),i=h(()=>o.value?e.activeColor:e.color),{textColorClasses:s,textColorStyles:u}=Ge(i);return j(()=>r(e.tag,{class:["v-breadcrumbs-item",{"v-breadcrumbs-item--active":o.value,"v-breadcrumbs-item--disabled":e.disabled,[`${e.activeClass}`]:o.value&&e.activeClass},s.value,e.class],style:[u.value,e.style],"aria-current":o.value?"page":void 0},{default:()=>{var c,d;return[a.isLink.value?r("a",{class:"v-breadcrumbs-item--link",href:a.href.value,"aria-current":o.value?"page":void 0,onClick:a.navigate},[((d=n.default)==null?void 0:d.call(n))??e.title]):((c=n.default)==null?void 0:c.call(n))??e.title]}})),{}}}),ey=R({activeClass:String,activeColor:String,bgColor:String,color:String,disabled:Boolean,divider:{type:String,default:"/"},icon:se,items:{type:Array,default:()=>[]},...q(),...Fe(),...Ie(),...ce({tag:"ul"})},"VBreadcrumbs"),ty=L()({name:"VBreadcrumbs",props:ey(),setup(e,t){let{slots:n}=t;const{backgroundColorClasses:l,backgroundColorStyles:a}=Be(D(e,"bgColor")),{densityClasses:o}=Ye(e),{roundedClasses:i}=Ae(e);Ee({VBreadcrumbsDivider:{divider:D(e,"divider")},VBreadcrumbsItem:{activeClass:D(e,"activeClass"),activeColor:D(e,"activeColor"),color:D(e,"color"),disabled:D(e,"disabled")}});const s=h(()=>e.items.map(u=>typeof u=="string"?{item:{title:u},raw:u}:{item:u,raw:u}));return j(()=>{const u=!!(n.prepend||e.icon);return r(e.tag,{class:["v-breadcrumbs",l.value,o.value,i.value,e.class],style:[a.value,e.style]},{default:()=>{var c;return[u&&r("li",{key:"prepend",class:"v-breadcrumbs__prepend"},[n.prepend?r(pe,{key:"prepend-defaults",disabled:!e.icon,defaults:{VIcon:{icon:e.icon,start:!0}}},n.prepend):r(Se,{key:"prepend-icon",start:!0,icon:e.icon},null)]),s.value.map((d,f,v)=>{let{item:m,raw:g}=d;return r(oe,null,[r(Ws,Y({key:m.title,disabled:f>=v.length-1},m),{default:n.title?()=>{var y;return(y=n.title)==null?void 0:y.call(n,{item:g,index:f})}:void 0}),f<v.length-1&&r(Gs,null,{default:n.divider?()=>{var y;return(y=n.divider)==null?void 0:y.call(n,{item:g,index:f})}:void 0})])}),(c=n.default)==null?void 0:c.call(n)]}})}),{}}});const Ys=L()({name:"VCardActions",props:q(),setup(e,t){let{slots:n}=t;return Ee({VBtn:{variant:"text"}}),j(()=>{var l;return r("div",{class:["v-card-actions",e.class],style:e.style},[(l=n.default)==null?void 0:l.call(n)])}),{}}}),Ks=yt("v-card-subtitle"),qs=yt("v-card-title"),ny=R({appendAvatar:String,appendIcon:se,prependAvatar:String,prependIcon:se,subtitle:String,title:String,...q(),...Fe()},"VCardItem"),Xs=L()({name:"VCardItem",props:ny(),setup(e,t){let{slots:n}=t;return j(()=>{var c;const l=!!(e.prependAvatar||e.prependIcon),a=!!(l||n.prepend),o=!!(e.appendAvatar||e.appendIcon),i=!!(o||n.append),s=!!(e.title||n.title),u=!!(e.subtitle||n.subtitle);return r("div",{class:["v-card-item",e.class],style:e.style},[a&&r("div",{key:"prepend",class:"v-card-item__prepend"},[n.prepend?r(pe,{key:"prepend-defaults",disabled:!l,defaults:{VAvatar:{density:e.density,icon:e.prependIcon,image:e.prependAvatar}}},n.prepend):l&&r(Lt,{key:"prepend-avatar",density:e.density,icon:e.prependIcon,image:e.prependAvatar},null)]),r("div",{class:"v-card-item__content"},[s&&r(qs,{key:"title"},{default:()=>{var d;return[((d=n.title)==null?void 0:d.call(n))??e.title]}}),u&&r(Ks,{key:"subtitle"},{default:()=>{var d;return[((d=n.subtitle)==null?void 0:d.call(n))??e.subtitle]}}),(c=n.default)==null?void 0:c.call(n)]),i&&r("div",{key:"append",class:"v-card-item__append"},[n.append?r(pe,{key:"append-defaults",disabled:!o,defaults:{VAvatar:{density:e.density,icon:e.appendIcon,image:e.appendAvatar}}},n.append):o&&r(Lt,{key:"append-avatar",density:e.density,icon:e.appendIcon,image:e.appendAvatar},null)])])}),{}}}),Zs=yt("v-card-text"),ly=R({appendAvatar:String,appendIcon:se,disabled:Boolean,flat:Boolean,hover:Boolean,image:String,link:{type:Boolean,default:void 0},prependAvatar:String,prependIcon:se,ripple:{type:[Boolean,Object],default:!0},subtitle:String,text:String,title:String,...at(),...q(),...Fe(),...dt(),...Me(),...Xa(),...Mt(),...Cn(),...Ie(),...Gn(),...ce(),...he(),...mt({variant:"elevated"})},"VCard"),ay=L()({name:"VCard",directives:{Ripple:Dt},props:ly(),setup(e,t){let{attrs:n,slots:l}=t;const{themeClasses:a}=ye(e),{borderClasses:o}=ft(e),{colorClasses:i,colorStyles:s,variantClasses:u}=ln(e),{densityClasses:c}=Ye(e),{dimensionStyles:d}=vt(e),{elevationClasses:f}=He(e),{loaderClasses:v}=Sl(e),{locationStyles:m}=Ft(e),{positionClasses:g}=xn(e),{roundedClasses:y}=Ae(e),b=Un(e,n),p=h(()=>e.link!==!1&&b.isLink.value),S=h(()=>!e.disabled&&e.link!==!1&&(e.link||b.isClickable.value));return j(()=>{const C=p.value?"a":e.tag,_=!!(l.title||e.title),V=!!(l.subtitle||e.subtitle),x=_||V,T=!!(l.append||e.appendAvatar||e.appendIcon),w=!!(l.prepend||e.prependAvatar||e.prependIcon),k=!!(l.image||e.image),I=x||w||T,A=!!(l.text||e.text);return ne(r(C,{class:["v-card",{"v-card--disabled":e.disabled,"v-card--flat":e.flat,"v-card--hover":e.hover&&!(e.disabled||e.flat),"v-card--link":S.value},a.value,o.value,i.value,c.value,f.value,v.value,g.value,y.value,u.value,e.class],style:[s.value,d.value,m.value,e.style],href:b.href.value,onClick:S.value&&b.navigate,tabindex:e.disabled?-1:void 0},{default:()=>{var B;return[k&&r("div",{key:"image",class:"v-card__image"},[l.image?r(pe,{key:"image-defaults",disabled:!e.image,defaults:{VImg:{cover:!0,src:e.image}}},l.image):r(qt,{key:"image-img",cover:!0,src:e.image},null)]),r(Za,{name:"v-card",active:!!e.loading,color:typeof e.loading=="boolean"?void 0:e.loading},{default:l.loader}),I&&r(Xs,{key:"item",prependAvatar:e.prependAvatar,prependIcon:e.prependIcon,title:e.title,subtitle:e.subtitle,appendAvatar:e.appendAvatar,appendIcon:e.appendIcon},{default:l.item,prepend:l.prepend,title:l.title,subtitle:l.subtitle,append:l.append}),A&&r(Zs,{key:"text"},{default:()=>{var E;return[((E=l.text)==null?void 0:E.call(l))??e.text]}}),(B=l.default)==null?void 0:B.call(l),l.actions&&r(Ys,null,{default:l.actions}),nn(S.value,"v-card")]}}),[[Ze("ripple"),S.value&&e.ripple]])}),{}}});const oy=e=>{const{touchstartX:t,touchendX:n,touchstartY:l,touchendY:a}=e,o=.5,i=16;e.offsetX=n-t,e.offsetY=a-l,Math.abs(e.offsetY)<o*Math.abs(e.offsetX)&&(e.left&&n<t-i&&e.left(e),e.right&&n>t+i&&e.right(e)),Math.abs(e.offsetX)<o*Math.abs(e.offsetY)&&(e.up&&a<l-i&&e.up(e),e.down&&a>l+i&&e.down(e))};function iy(e,t){var l;const n=e.changedTouches[0];t.touchstartX=n.clientX,t.touchstartY=n.clientY,(l=t.start)==null||l.call(t,{originalEvent:e,...t})}function sy(e,t){var l;const n=e.changedTouches[0];t.touchendX=n.clientX,t.touchendY=n.clientY,(l=t.end)==null||l.call(t,{originalEvent:e,...t}),oy(t)}function ry(e,t){var l;const n=e.changedTouches[0];t.touchmoveX=n.clientX,t.touchmoveY=n.clientY,(l=t.move)==null||l.call(t,{originalEvent:e,...t})}function uy(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const t={touchstartX:0,touchstartY:0,touchendX:0,touchendY:0,touchmoveX:0,touchmoveY:0,offsetX:0,offsetY:0,left:e.left,right:e.right,up:e.up,down:e.down,start:e.start,move:e.move,end:e.end};return{touchstart:n=>iy(n,t),touchend:n=>sy(n,t),touchmove:n=>ry(n,t)}}function cy(e,t){var s;const n=t.value,l=n!=null&&n.parent?e.parentElement:e,a=(n==null?void 0:n.options)??{passive:!0},o=(s=t.instance)==null?void 0:s.$.uid;if(!l||!o)return;const i=uy(t.value);l._touchHandlers=l._touchHandlers??Object.create(null),l._touchHandlers[o]=i,hi(i).forEach(u=>{l.addEventListener(u,i[u],a)})}function dy(e,t){var o,i;const n=(o=t.value)!=null&&o.parent?e.parentElement:e,l=(i=t.instance)==null?void 0:i.$.uid;if(!(n!=null&&n._touchHandlers)||!l)return;const a=n._touchHandlers[l];hi(a).forEach(s=>{n.removeEventListener(s,a[s])}),delete n._touchHandlers[l]}const io={mounted:cy,unmounted:dy},Js=Symbol.for("vuetify:v-window"),Qs=Symbol.for("vuetify:v-window-group"),er=R({continuous:Boolean,nextIcon:{type:[Boolean,String,Function,Object],default:"$next"},prevIcon:{type:[Boolean,String,Function,Object],default:"$prev"},reverse:Boolean,showArrows:{type:[Boolean,String],validator:e=>typeof e=="boolean"||e==="hover"},touch:{type:[Object,Boolean],default:void 0},direction:{type:String,default:"horizontal"},modelValue:null,disabled:Boolean,selectedClass:{type:String,default:"v-window-item--active"},mandatory:{type:[Boolean,String],default:"force"},...q(),...ce(),...he()},"VWindow"),ca=L()({name:"VWindow",directives:{Touch:io},props:er(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{isRtl:a}=Oe(),{t:o}=ct(),i=an(e,Qs),s=W(),u=h(()=>a.value?!e.reverse:e.reverse),c=K(!1),d=h(()=>{const _=e.direction==="vertical"?"y":"x",x=(u.value?!c.value:c.value)?"-reverse":"";return`v-window-${_}${x}-transition`}),f=K(0),v=W(void 0),m=h(()=>i.items.value.findIndex(_=>i.selected.value.includes(_.id)));Z(m,(_,V)=>{const x=i.items.value.length,T=x-1;x<=2?c.value=_<V:_===T&&V===0?c.value=!0:_===0&&V===T?c.value=!1:c.value=_<V}),$e(Js,{transition:d,isReversed:c,transitionCount:f,transitionHeight:v,rootRef:s});const g=h(()=>e.continuous||m.value!==0),y=h(()=>e.continuous||m.value!==i.items.value.length-1);function b(){g.value&&i.prev()}function p(){y.value&&i.next()}const S=h(()=>{const _=[],V={icon:a.value?e.nextIcon:e.prevIcon,class:`v-window__${u.value?"right":"left"}`,onClick:i.prev,ariaLabel:o("$vuetify.carousel.prev")};_.push(g.value?n.prev?n.prev({props:V}):r(Ke,V,null):r("div",null,null));const x={icon:a.value?e.prevIcon:e.nextIcon,class:`v-window__${u.value?"left":"right"}`,onClick:i.next,ariaLabel:o("$vuetify.carousel.next")};return _.push(y.value?n.next?n.next({props:x}):r(Ke,x,null):r("div",null,null)),_}),C=h(()=>e.touch===!1?e.touch:{...{left:()=>{u.value?b():p()},right:()=>{u.value?p():b()},start:V=>{let{originalEvent:x}=V;x.stopPropagation()}},...e.touch===!0?{}:e.touch});return j(()=>ne(r(e.tag,{ref:s,class:["v-window",{"v-window--show-arrows-on-hover":e.showArrows==="hover"},l.value,e.class],style:e.style},{default:()=>{var _,V;return[r("div",{class:"v-window__container",style:{height:v.value}},[(_=n.default)==null?void 0:_.call(n,{group:i}),e.showArrows!==!1&&r("div",{class:"v-window__controls"},[S.value])]),(V=n.additional)==null?void 0:V.call(n,{group:i})]}}),[[Ze("touch"),C.value]])),{group:i}}}),vy=R({color:String,cycle:Boolean,delimiterIcon:{type:se,default:"$delimiter"},height:{type:[Number,String],default:500},hideDelimiters:Boolean,hideDelimiterBackground:Boolean,interval:{type:[Number,String],default:6e3,validator:e=>Number(e)>0},progress:[Boolean,String],verticalDelimiters:[Boolean,String],...er({continuous:!0,mandatory:"force",showArrows:!0})},"VCarousel"),fy=L()({name:"VCarousel",props:vy(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{t:a}=ct(),o=W();let i=-1;Z(l,u),Z(()=>e.interval,u),Z(()=>e.cycle,c=>{c?u():window.clearTimeout(i)}),Je(s);function s(){!e.cycle||!o.value||(i=window.setTimeout(o.value.group.next,+e.interval>0?+e.interval:6e3))}function u(){window.clearTimeout(i),window.requestAnimationFrame(s)}return j(()=>{const[c]=ca.filterProps(e);return r(ca,Y({ref:o},c,{modelValue:l.value,"onUpdate:modelValue":d=>l.value=d,class:["v-carousel",{"v-carousel--hide-delimiter-background":e.hideDelimiterBackground,"v-carousel--vertical-delimiters":e.verticalDelimiters},e.class],style:[{height:J(e.height)},e.style]}),{default:n.default,additional:d=>{let{group:f}=d;return r(oe,null,[!e.hideDelimiters&&r("div",{class:"v-carousel__controls",style:{left:e.verticalDelimiters==="left"&&e.verticalDelimiters?0:"auto",right:e.verticalDelimiters==="right"?0:"auto"}},[f.items.value.length>0&&r(pe,{defaults:{VBtn:{color:e.color,icon:e.delimiterIcon,size:"x-small",variant:"text"}},scoped:!0},{default:()=>[f.items.value.map((v,m)=>{const g={id:`carousel-item-${v.id}`,"aria-label":a("$vuetify.carousel.ariaLabel.delimiter",m+1,f.items.value.length),class:[f.isSelected(v.id)&&"v-btn--active"],onClick:()=>f.select(v.id,!0)};return n.item?n.item({props:g,item:v}):r(Ke,Y(v,g),null)})]})]),e.progress&&r(qa,{class:"v-carousel__progress",color:typeof e.progress=="string"?e.progress:void 0,modelValue:(f.getItemIndex(l.value)+1)/f.items.value.length*100},null)])},prev:n.prev,next:n.next})}),{}}}),tr=R({reverseTransition:{type:[Boolean,String],default:void 0},transition:{type:[Boolean,String],default:void 0},...q(),...kn(),..._l()},"VWindowItem"),da=L()({name:"VWindowItem",directives:{Touch:io},props:tr(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const l=Ve(Js),a=Sn(e,Qs),{isBooted:o}=tn();if(!l||!a)throw new Error("[Vuetify] VWindowItem must be used inside VWindow");const i=K(!1),s=h(()=>o.value&&(l.isReversed.value?e.reverseTransition!==!1:e.transition!==!1));function u(){!i.value||!l||(i.value=!1,l.transitionCount.value>0&&(l.transitionCount.value-=1,l.transitionCount.value===0&&(l.transitionHeight.value=void 0)))}function c(){var g;i.value||!l||(i.value=!0,l.transitionCount.value===0&&(l.transitionHeight.value=J((g=l.rootRef.value)==null?void 0:g.clientHeight)),l.transitionCount.value+=1)}function d(){u()}function f(g){i.value&&xe(()=>{!s.value||!i.value||!l||(l.transitionHeight.value=J(g.clientHeight))})}const v=h(()=>{const g=l.isReversed.value?e.reverseTransition:e.transition;return s.value?{name:typeof g!="string"?l.transition.value:g,onBeforeEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:c,onAfterLeave:u,onLeaveCancelled:d,onEnter:f}:!1}),{hasContent:m}=no(e,a.isSelected);return j(()=>r(ht,{transition:v.value,disabled:!o.value},{default:()=>{var g;return[ne(r("div",{class:["v-window-item",a.selectedClass.value,e.class],style:e.style},[m.value&&((g=n.default)==null?void 0:g.call(n))]),[[Pe,a.isSelected.value]])]}})),{groupItem:a}}}),my=R({...Xi(),...tr()},"VCarouselItem"),gy=L()({name:"VCarouselItem",inheritAttrs:!1,props:my(),setup(e,t){let{slots:n,attrs:l}=t;j(()=>{const[a]=qt.filterProps(e),[o]=da.filterProps(e);return r(da,Y({class:"v-carousel-item"},o),{default:()=>[r(qt,Y(l,a),n)]})})}});const hy=yt("v-code");const yy=R({color:{type:Object},disabled:Boolean,dotSize:{type:[Number,String],default:10},height:{type:[Number,String],default:150},width:{type:[Number,String],default:300},...q()},"VColorPickerCanvas"),by=ut({name:"VColorPickerCanvas",props:yy(),emits:{"update:color":e=>!0,"update:position":e=>!0},setup(e,t){let{emit:n}=t;const l=K(!1),a=W(),o=K(parseFloat(e.width)),i=K(parseFloat(e.height)),s=W({x:0,y:0}),u=h({get:()=>s.value,set(b){var C,_;if(!a.value)return;const{x:p,y:S}=b;n("update:color",{h:((C=e.color)==null?void 0:C.h)??0,s:Ue(p,0,o.value)/o.value,v:1-Ue(S,0,i.value)/i.value,a:((_=e.color)==null?void 0:_.a)??1})}}),c=h(()=>{const{x:b,y:p}=u.value,S=parseInt(e.dotSize,10)/2;return{width:J(e.dotSize),height:J(e.dotSize),transform:`translate(${J(b-S)}, ${J(p-S)})`}}),{resizeRef:d}=St(b=>{var C;if(!((C=d.value)!=null&&C.offsetParent))return;const{width:p,height:S}=b[0].contentRect;o.value=p,i.value=S});function f(b,p,S){const{left:C,top:_,width:V,height:x}=S;u.value={x:Ue(b-C,0,V),y:Ue(p-_,0,x)}}function v(b){b.type==="mousedown"&&b.preventDefault(),!e.disabled&&(m(b),window.addEventListener("mousemove",m),window.addEventListener("mouseup",g),window.addEventListener("touchmove",m),window.addEventListener("touchend",g))}function m(b){if(e.disabled||!a.value)return;l.value=!0;const p=ff(b);f(p.clientX,p.clientY,a.value.getBoundingClientRect())}function g(){window.removeEventListener("mousemove",m),window.removeEventListener("mouseup",g),window.removeEventListener("touchmove",m),window.removeEventListener("touchend",g)}function y(){var _;if(!a.value)return;const b=a.value,p=b.getContext("2d");if(!p)return;const S=p.createLinearGradient(0,0,b.width,0);S.addColorStop(0,"hsla(0, 0%, 100%, 1)"),S.addColorStop(1,`hsla(${((_=e.color)==null?void 0:_.h)??0}, 100%, 50%, 1)`),p.fillStyle=S,p.fillRect(0,0,b.width,b.height);const C=p.createLinearGradient(0,0,0,b.height);C.addColorStop(0,"hsla(0, 0%, 100%, 0)"),C.addColorStop(1,"hsla(0, 0%, 0%, 1)"),p.fillStyle=C,p.fillRect(0,0,b.width,b.height)}return Z(()=>{var b;return(b=e.color)==null?void 0:b.h},y,{immediate:!0}),Z(()=>[o.value,i.value],(b,p)=>{y(),s.value={x:u.value.x*b[0]/p[0],y:u.value.y*b[1]/p[1]}},{flush:"post"}),Z(()=>e.color,()=>{if(l.value){l.value=!1;return}s.value=e.color?{x:e.color.s*o.value,y:(1-e.color.v)*i.value}:{x:0,y:0}},{deep:!0,immediate:!0}),Je(()=>y()),j(()=>r("div",{ref:d,class:["v-color-picker-canvas",e.class],style:e.style,onMousedown:v,onTouchstartPassive:v},[r("canvas",{ref:a,width:o.value,height:i.value},null),e.color&&r("div",{class:["v-color-picker-canvas__dot",{"v-color-picker-canvas__dot--disabled":e.disabled}],style:c.value},null)])),{}}});function py(e,t){if(t){const{a:n,...l}=e;return l}return e}function ky(e,t){if(t==null||typeof t=="string"){const n=Bi(e);return e.a===1?n.slice(0,7):n}if(typeof t=="object"){let n;return jt(t,["r","g","b"])?n=Vt(e):jt(t,["h","s","l"])?n=_i(e):jt(t,["h","s","v"])&&(n=e),py(n,!jt(t,["a"])&&e.a===1)}return e}const Rn={h:0,s:0,v:1,a:1},va={inputProps:{type:"number",min:0},inputs:[{label:"R",max:255,step:1,getValue:e=>Math.round(e.r),getColor:(e,t)=>({...e,r:Number(t)})},{label:"G",max:255,step:1,getValue:e=>Math.round(e.g),getColor:(e,t)=>({...e,g:Number(t)})},{label:"B",max:255,step:1,getValue:e=>Math.round(e.b),getColor:(e,t)=>({...e,b:Number(t)})},{label:"A",max:1,step:.01,getValue:e=>{let{a:t}=e;return t!=null?Math.round(t*100)/100:1},getColor:(e,t)=>({...e,a:Number(t)})}],to:Vt,from:hl};var ri;const Sy={...va,inputs:(ri=va.inputs)==null?void 0:ri.slice(0,3)},fa={inputProps:{type:"number",min:0},inputs:[{label:"H",max:360,step:1,getValue:e=>Math.round(e.h),getColor:(e,t)=>({...e,h:Number(t)})},{label:"S",max:1,step:.01,getValue:e=>Math.round(e.s*100)/100,getColor:(e,t)=>({...e,s:Number(t)})},{label:"L",max:1,step:.01,getValue:e=>Math.round(e.l*100)/100,getColor:(e,t)=>({...e,l:Number(t)})},{label:"A",max:1,step:.01,getValue:e=>{let{a:t}=e;return t!=null?Math.round(t*100)/100:1},getColor:(e,t)=>({...e,a:Number(t)})}],to:_i,from:$a},wy={...fa,inputs:fa.inputs.slice(0,3)},nr={inputProps:{type:"text"},inputs:[{label:"HEXA",getValue:e=>e,getColor:(e,t)=>t}],to:Bi,from:Rf},Cy={...nr,inputs:[{label:"HEX",getValue:e=>e.slice(0,7),getColor:(e,t)=>t}]},Yt={rgb:Sy,rgba:va,hsl:wy,hsla:fa,hex:Cy,hexa:nr},xy=e=>{let{label:t,...n}=e;return r("div",{class:"v-color-picker-edit__input"},[r("input",n,null),r("span",null,[t])])},Vy=R({color:Object,disabled:Boolean,mode:{type:String,default:"rgba",validator:e=>Object.keys(Yt).includes(e)},modes:{type:Array,default:()=>Object.keys(Yt),validator:e=>Array.isArray(e)&&e.every(t=>Object.keys(Yt).includes(t))},...q()},"VColorPickerEdit"),_y=ut({name:"VColorPickerEdit",props:Vy(),emits:{"update:color":e=>!0,"update:mode":e=>!0},setup(e,t){let{emit:n}=t;const l=h(()=>e.modes.map(o=>({...Yt[o],name:o}))),a=h(()=>{var s;const o=l.value.find(u=>u.name===e.mode);if(!o)return[];const i=e.color?o.to(e.color):null;return(s=o.inputs)==null?void 0:s.map(u=>{let{getValue:c,getColor:d,...f}=u;return{...o.inputProps,...f,disabled:e.disabled,value:i&&c(i),onChange:v=>{const m=v.target;m&&n("update:color",o.from(d(i??Rn,m.value)))}}})});return j(()=>{var o;return r("div",{class:["v-color-picker-edit",e.class],style:e.style},[(o=a.value)==null?void 0:o.map(i=>r(xy,i,null)),l.value.length>1&&r(Ke,{icon:"$unfold",size:"x-small",variant:"plain",onClick:()=>{const i=l.value.findIndex(s=>s.name===e.mode);n("update:mode",l.value[(i+1)%l.value.length].name)}},null)])}),{}}});const so=Symbol.for("vuetify:v-slider");function ma(e,t,n){const l=n==="vertical",a=t.getBoundingClientRect(),o="touches"in e?e.touches[0]:e;return l?o.clientY-(a.top+a.height/2):o.clientX-(a.left+a.width/2)}function Iy(e,t){return"touches"in e&&e.touches.length?e.touches[0][t]:"changedTouches"in e&&e.changedTouches.length?e.changedTouches[0][t]:e[t]}const lr=R({disabled:{type:Boolean,default:null},error:Boolean,readonly:{type:Boolean,default:null},max:{type:[Number,String],default:100},min:{type:[Number,String],default:0},step:{type:[Number,String],default:0},thumbColor:String,thumbLabel:{type:[Boolean,String],default:void 0,validator:e=>typeof e=="boolean"||e==="always"},thumbSize:{type:[Number,String],default:20},showTicks:{type:[Boolean,String],default:!1,validator:e=>typeof e=="boolean"||e==="always"},ticks:{type:[Array,Object]},tickSize:{type:[Number,String],default:2},color:String,trackColor:String,trackFillColor:String,trackSize:{type:[Number,String],default:4},direction:{type:String,default:"horizontal",validator:e=>["vertical","horizontal"].includes(e)},reverse:Boolean,...Ie(),...Me({elevation:2})},"Slider"),ar=e=>{const t=h(()=>parseFloat(e.min)),n=h(()=>parseFloat(e.max)),l=h(()=>+e.step>0?parseFloat(e.step):0),a=h(()=>Math.max(go(l.value),go(t.value)));function o(i){if(i=parseFloat(i),l.value<=0)return i;const s=Ue(i,t.value,n.value),u=t.value%l.value,c=Math.round((s-u)/l.value)*l.value+u;return parseFloat(Math.min(c,n.value).toFixed(a.value))}return{min:t,max:n,step:l,decimals:a,roundValue:o}},or=e=>{let{props:t,steps:n,onSliderStart:l,onSliderMove:a,onSliderEnd:o,getActiveThumb:i}=e;const{isRtl:s}=Oe(),u=D(t,"reverse"),c=h(()=>{let O=s.value?"rtl":"ltr";return t.reverse&&(O=O==="rtl"?"ltr":"rtl"),O}),{min:d,max:f,step:v,decimals:m,roundValue:g}=n,y=h(()=>parseInt(t.thumbSize,10)),b=h(()=>parseInt(t.tickSize,10)),p=h(()=>parseInt(t.trackSize,10)),S=h(()=>(f.value-d.value)/v.value),C=D(t,"disabled"),_=h(()=>t.direction==="vertical"),V=h(()=>t.error||t.disabled?void 0:t.thumbColor??t.color),x=h(()=>t.error||t.disabled?void 0:t.trackColor??t.color),T=h(()=>t.error||t.disabled?void 0:t.trackFillColor??t.color),w=K(!1),k=K(0),I=W(),A=W();function B(O){var Te;const me=t.direction==="vertical",Q=me?"top":"left",H=me?"height":"width",le=me?"clientY":"clientX",{[Q]:be,[H]:de}=(Te=I.value)==null?void 0:Te.$el.getBoundingClientRect(),ie=Iy(O,le);let fe=Math.min(Math.max((ie-be-k.value)/de,0),1)||0;return(me||c.value==="rtl")&&(fe=1-fe),g(d.value+fe*(f.value-d.value))}const E=O=>{o({value:B(O)}),w.value=!1,k.value=0},F=O=>{A.value=i(O),A.value&&(A.value.focus(),w.value=!0,A.value.contains(O.target)?k.value=ma(O,A.value,t.direction):(k.value=0,a({value:B(O)})),l({value:B(O)}))},X={passive:!0,capture:!0};function $(O){a({value:B(O)})}function N(O){O.stopPropagation(),O.preventDefault(),E(O),window.removeEventListener("mousemove",$,X),window.removeEventListener("mouseup",N)}function M(O){var me;E(O),window.removeEventListener("touchmove",$,X),(me=O.target)==null||me.removeEventListener("touchend",M)}function G(O){var me;F(O),window.addEventListener("touchmove",$,X),(me=O.target)==null||me.addEventListener("touchend",M,{passive:!1})}function U(O){O.preventDefault(),F(O),window.addEventListener("mousemove",$,X),window.addEventListener("mouseup",N,{passive:!1})}const z=O=>{const me=(O-d.value)/(f.value-d.value)*100;return Ue(isNaN(me)?0:me,0,100)},ae=D(t,"showTicks"),re=h(()=>ae.value?t.ticks?Array.isArray(t.ticks)?t.ticks.map(O=>({value:O,position:z(O),label:O.toString()})):Object.keys(t.ticks).map(O=>({value:parseFloat(O),position:z(parseFloat(O)),label:t.ticks[O]})):S.value!==1/0?Ct(S.value+1).map(O=>{const me=d.value+O*v.value;return{value:me,position:z(me)}}):[]:[]),ve=h(()=>re.value.some(O=>{let{label:me}=O;return!!me})),ge={activeThumbRef:A,color:D(t,"color"),decimals:m,disabled:C,direction:D(t,"direction"),elevation:D(t,"elevation"),hasLabels:ve,horizontalDirection:c,isReversed:u,min:d,max:f,mousePressed:w,numTicks:S,onSliderMousedown:U,onSliderTouchstart:G,parsedTicks:re,parseMouseMove:B,position:z,readonly:D(t,"readonly"),rounded:D(t,"rounded"),roundValue:g,showTicks:ae,startOffset:k,step:v,thumbSize:y,thumbColor:V,thumbLabel:D(t,"thumbLabel"),ticks:D(t,"ticks"),tickSize:b,trackColor:x,trackContainerRef:I,trackFillColor:T,trackSize:p,vertical:_};return $e(so,ge),ge},Ty=R({focused:Boolean,max:{type:Number,required:!0},min:{type:Number,required:!0},modelValue:{type:Number,required:!0},position:{type:Number,required:!0},ripple:{type:[Boolean,Object],default:!0},...q()},"VSliderThumb"),ga=L()({name:"VSliderThumb",directives:{Ripple:Dt},props:Ty(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=Ve(so),{rtlClasses:o}=Oe();if(!a)throw new Error("[Vuetify] v-slider-thumb must be used inside v-slider or v-range-slider");const{thumbColor:i,step:s,vertical:u,disabled:c,thumbSize:d,thumbLabel:f,direction:v,readonly:m,elevation:g,isReversed:y,horizontalDirection:b,mousePressed:p,decimals:S}=a,{textColorClasses:C,textColorStyles:_}=Ge(i),{pageup:V,pagedown:x,end:T,home:w,left:k,right:I,down:A,up:B}=Ul,E=[V,x,T,w,k,I,A,B],F=h(()=>s.value?[1,2,3]:[1,5,10]);function X(N,M){if(!E.includes(N.key))return;N.preventDefault();const G=s.value||.1,U=(e.max-e.min)/G;if([k,I,A,B].includes(N.key)){const ae=(b.value==="rtl"?[k,B]:[I,B]).includes(N.key)?1:-1,re=N.shiftKey?2:N.ctrlKey?1:0;M=M+ae*G*F.value[re]}else if(N.key===w)M=e.min;else if(N.key===T)M=e.max;else{const z=N.key===x?1:-1;M=M-z*G*(U>100?U/10:10)}return Math.max(e.min,Math.min(e.max,M))}function $(N){const M=X(N,e.modelValue);M!=null&&l("update:modelValue",M)}return j(()=>{const N=J(u.value||y.value?100-e.position:e.position,"%"),{elevationClasses:M}=He(h(()=>c.value?void 0:g.value));return r("div",{class:["v-slider-thumb",{"v-slider-thumb--focused":e.focused,"v-slider-thumb--pressed":e.focused&&p.value},e.class,o.value],style:[{"--v-slider-thumb-position":N,"--v-slider-thumb-size":J(d.value)},e.style],role:"slider",tabindex:c.value?-1:0,"aria-valuemin":e.min,"aria-valuemax":e.max,"aria-valuenow":e.modelValue,"aria-readonly":!!m.value,"aria-orientation":v.value,onKeydown:m.value?void 0:$},[r("div",{class:["v-slider-thumb__surface",C.value,M.value],style:{..._.value}},null),ne(r("div",{class:["v-slider-thumb__ripple",C.value],style:_.value},null),[[Ze("ripple"),e.ripple,null,{circle:!0,center:!0}]]),r(Ha,{origin:"bottom center"},{default:()=>{var G;return[ne(r("div",{class:"v-slider-thumb__label-container"},[r("div",{class:["v-slider-thumb__label"]},[r("div",null,[((G=n["thumb-label"])==null?void 0:G.call(n,{modelValue:e.modelValue}))??e.modelValue.toFixed(s.value?S.value:1)])])]),[[Pe,f.value&&e.focused||f.value==="always"]])]}})])}),{}}});const Py=R({start:{type:Number,required:!0},stop:{type:Number,required:!0},...q()},"VSliderTrack"),ir=L()({name:"VSliderTrack",props:Py(),emits:{},setup(e,t){let{slots:n}=t;const l=Ve(so);if(!l)throw new Error("[Vuetify] v-slider-track must be inside v-slider or v-range-slider");const{color:a,horizontalDirection:o,parsedTicks:i,rounded:s,showTicks:u,tickSize:c,trackColor:d,trackFillColor:f,trackSize:v,vertical:m,min:g,max:y}=l,{roundedClasses:b}=Ae(s),{backgroundColorClasses:p,backgroundColorStyles:S}=Be(f),{backgroundColorClasses:C,backgroundColorStyles:_}=Be(d),V=h(()=>`inset-${m.value?"block-end":"inline-start"}`),x=h(()=>m.value?"height":"width"),T=h(()=>({[V.value]:"0%",[x.value]:"100%"})),w=h(()=>e.stop-e.start),k=h(()=>({[V.value]:J(e.start,"%"),[x.value]:J(w.value,"%")})),I=h(()=>u.value?(m.value?i.value.slice().reverse():i.value).map((B,E)=>{var $;const F=m.value?"bottom":"margin-inline-start",X=B.value!==g.value&&B.value!==y.value?J(B.position,"%"):void 0;return r("div",{key:B.value,class:["v-slider-track__tick",{"v-slider-track__tick--filled":B.position>=e.start&&B.position<=e.stop,"v-slider-track__tick--first":B.value===g.value,"v-slider-track__tick--last":B.value===y.value}],style:{[F]:X}},[(B.label||n["tick-label"])&&r("div",{class:"v-slider-track__tick-label"},[(($=n["tick-label"])==null?void 0:$.call(n,{tick:B,index:E}))??B.label])])}):[]);return j(()=>r("div",{class:["v-slider-track",b.value,e.class],style:[{"--v-slider-track-size":J(v.value),"--v-slider-tick-size":J(c.value),direction:m.value?void 0:o.value},e.style]},[r("div",{class:["v-slider-track__background",C.value,{"v-slider-track__background--opacity":!!a.value||!f.value}],style:{...T.value,..._.value}},null),r("div",{class:["v-slider-track__fill",p.value],style:{...k.value,...S.value}},null),u.value&&r("div",{class:["v-slider-track__ticks",{"v-slider-track__ticks--always-show":u.value==="always"}]},[I.value])])),{}}}),Ay=R({...Cl(),...lr(),...Bt(),modelValue:{type:[Number,String],default:0}},"VSlider"),ha=L()({name:"VSlider",props:Ay(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,start:e=>!0,end:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=W(),{rtlClasses:o}=Oe(),i=ar(e),s=ue(e,"modelValue",void 0,x=>i.roundValue(x??i.min.value)),{min:u,max:c,mousePressed:d,roundValue:f,onSliderMousedown:v,onSliderTouchstart:m,trackContainerRef:g,position:y,hasLabels:b,readonly:p}=or({props:e,steps:i,onSliderStart:()=>{l("start",s.value)},onSliderEnd:x=>{let{value:T}=x;const w=f(T);s.value=w,l("end",w)},onSliderMove:x=>{let{value:T}=x;return s.value=f(T)},getActiveThumb:()=>{var x;return(x=a.value)==null?void 0:x.$el}}),{isFocused:S,focus:C,blur:_}=Ot(e),V=h(()=>y(s.value));return j(()=>{const[x,T]=Ne.filterProps(e),w=!!(e.label||n.label||n.prepend);return r(Ne,Y({class:["v-slider",{"v-slider--has-labels":!!n["tick-label"]||b.value,"v-slider--focused":S.value,"v-slider--pressed":d.value,"v-slider--disabled":e.disabled},o.value,e.class],style:e.style},x,{focused:S.value}),{...n,prepend:w?k=>{var I,A;return r(oe,null,[((I=n.label)==null?void 0:I.call(n,k))??(e.label?r(Vn,{id:k.id.value,class:"v-slider__label",text:e.label},null):void 0),(A=n.prepend)==null?void 0:A.call(n,k)])}:void 0,default:k=>{let{id:I,messagesId:A}=k;return r("div",{class:"v-slider__container",onMousedown:p.value?void 0:v,onTouchstartPassive:p.value?void 0:m},[r("input",{id:I.value,name:e.name||I.value,disabled:!!e.disabled,readonly:!!e.readonly,tabindex:"-1",value:s.value},null),r(ir,{ref:g,start:0,stop:V.value},{"tick-label":n["tick-label"]}),r(ga,{ref:a,"aria-describedby":A.value,focused:S.value,min:u.value,max:c.value,modelValue:s.value,"onUpdate:modelValue":B=>s.value=B,position:V.value,elevation:e.elevation,onFocus:C,onBlur:_},{"thumb-label":n["thumb-label"]})])}})}),{}}}),By=R({color:{type:Object},disabled:Boolean,hideAlpha:Boolean,...q()},"VColorPickerPreview"),Ry=ut({name:"VColorPickerPreview",props:By(),emits:{"update:color":e=>!0},setup(e,t){let{emit:n}=t;return j(()=>{var l,a;return r("div",{class:["v-color-picker-preview",{"v-color-picker-preview--hide-alpha":e.hideAlpha},e.class],style:e.style},[r("div",{class:"v-color-picker-preview__dot"},[r("div",{style:{background:Ti(e.color??Rn)}},null)]),r("div",{class:"v-color-picker-preview__sliders"},[r(ha,{class:"v-color-picker-preview__track v-color-picker-preview__hue",modelValue:(l=e.color)==null?void 0:l.h,"onUpdate:modelValue":o=>n("update:color",{...e.color??Rn,h:o}),step:0,min:0,max:360,disabled:e.disabled,thumbSize:14,trackSize:8,trackFillColor:"white",hideDetails:!0},null),!e.hideAlpha&&r(ha,{class:"v-color-picker-preview__track v-color-picker-preview__alpha",modelValue:((a=e.color)==null?void 0:a.a)??1,"onUpdate:modelValue":o=>n("update:color",{...e.color??Rn,a:o}),step:1/256,min:0,max:1,disabled:e.disabled,thumbSize:14,trackSize:8,trackFillColor:"white",hideDetails:!0},null)])])}),{}}});const Ey=Object.freeze({base:"#f44336",lighten5:"#ffebee",lighten4:"#ffcdd2",lighten3:"#ef9a9a",lighten2:"#e57373",lighten1:"#ef5350",darken1:"#e53935",darken2:"#d32f2f",darken3:"#c62828",darken4:"#b71c1c",accent1:"#ff8a80",accent2:"#ff5252",accent3:"#ff1744",accent4:"#d50000"}),Ly=Object.freeze({base:"#e91e63",lighten5:"#fce4ec",lighten4:"#f8bbd0",lighten3:"#f48fb1",lighten2:"#f06292",lighten1:"#ec407a",darken1:"#d81b60",darken2:"#c2185b",darken3:"#ad1457",darken4:"#880e4f",accent1:"#ff80ab",accent2:"#ff4081",accent3:"#f50057",accent4:"#c51162"}),$y=Object.freeze({base:"#9c27b0",lighten5:"#f3e5f5",lighten4:"#e1bee7",lighten3:"#ce93d8",lighten2:"#ba68c8",lighten1:"#ab47bc",darken1:"#8e24aa",darken2:"#7b1fa2",darken3:"#6a1b9a",darken4:"#4a148c",accent1:"#ea80fc",accent2:"#e040fb",accent3:"#d500f9",accent4:"#aa00ff"}),My=Object.freeze({base:"#673ab7",lighten5:"#ede7f6",lighten4:"#d1c4e9",lighten3:"#b39ddb",lighten2:"#9575cd",lighten1:"#7e57c2",darken1:"#5e35b1",darken2:"#512da8",darken3:"#4527a0",darken4:"#311b92",accent1:"#b388ff",accent2:"#7c4dff",accent3:"#651fff",accent4:"#6200ea"}),Fy=Object.freeze({base:"#3f51b5",lighten5:"#e8eaf6",lighten4:"#c5cae9",lighten3:"#9fa8da",lighten2:"#7986cb",lighten1:"#5c6bc0",darken1:"#3949ab",darken2:"#303f9f",darken3:"#283593",darken4:"#1a237e",accent1:"#8c9eff",accent2:"#536dfe",accent3:"#3d5afe",accent4:"#304ffe"}),Dy=Object.freeze({base:"#2196f3",lighten5:"#e3f2fd",lighten4:"#bbdefb",lighten3:"#90caf9",lighten2:"#64b5f6",lighten1:"#42a5f5",darken1:"#1e88e5",darken2:"#1976d2",darken3:"#1565c0",darken4:"#0d47a1",accent1:"#82b1ff",accent2:"#448aff",accent3:"#2979ff",accent4:"#2962ff"}),Oy=Object.freeze({base:"#03a9f4",lighten5:"#e1f5fe",lighten4:"#b3e5fc",lighten3:"#81d4fa",lighten2:"#4fc3f7",lighten1:"#29b6f6",darken1:"#039be5",darken2:"#0288d1",darken3:"#0277bd",darken4:"#01579b",accent1:"#80d8ff",accent2:"#40c4ff",accent3:"#00b0ff",accent4:"#0091ea"}),Ny=Object.freeze({base:"#00bcd4",lighten5:"#e0f7fa",lighten4:"#b2ebf2",lighten3:"#80deea",lighten2:"#4dd0e1",lighten1:"#26c6da",darken1:"#00acc1",darken2:"#0097a7",darken3:"#00838f",darken4:"#006064",accent1:"#84ffff",accent2:"#18ffff",accent3:"#00e5ff",accent4:"#00b8d4"}),zy=Object.freeze({base:"#009688",lighten5:"#e0f2f1",lighten4:"#b2dfdb",lighten3:"#80cbc4",lighten2:"#4db6ac",lighten1:"#26a69a",darken1:"#00897b",darken2:"#00796b",darken3:"#00695c",darken4:"#004d40",accent1:"#a7ffeb",accent2:"#64ffda",accent3:"#1de9b6",accent4:"#00bfa5"}),Hy=Object.freeze({base:"#4caf50",lighten5:"#e8f5e9",lighten4:"#c8e6c9",lighten3:"#a5d6a7",lighten2:"#81c784",lighten1:"#66bb6a",darken1:"#43a047",darken2:"#388e3c",darken3:"#2e7d32",darken4:"#1b5e20",accent1:"#b9f6ca",accent2:"#69f0ae",accent3:"#00e676",accent4:"#00c853"}),jy=Object.freeze({base:"#8bc34a",lighten5:"#f1f8e9",lighten4:"#dcedc8",lighten3:"#c5e1a5",lighten2:"#aed581",lighten1:"#9ccc65",darken1:"#7cb342",darken2:"#689f38",darken3:"#558b2f",darken4:"#33691e",accent1:"#ccff90",accent2:"#b2ff59",accent3:"#76ff03",accent4:"#64dd17"}),Uy=Object.freeze({base:"#cddc39",lighten5:"#f9fbe7",lighten4:"#f0f4c3",lighten3:"#e6ee9c",lighten2:"#dce775",lighten1:"#d4e157",darken1:"#c0ca33",darken2:"#afb42b",darken3:"#9e9d24",darken4:"#827717",accent1:"#f4ff81",accent2:"#eeff41",accent3:"#c6ff00",accent4:"#aeea00"}),Gy=Object.freeze({base:"#ffeb3b",lighten5:"#fffde7",lighten4:"#fff9c4",lighten3:"#fff59d",lighten2:"#fff176",lighten1:"#ffee58",darken1:"#fdd835",darken2:"#fbc02d",darken3:"#f9a825",darken4:"#f57f17",accent1:"#ffff8d",accent2:"#ffff00",accent3:"#ffea00",accent4:"#ffd600"}),Wy=Object.freeze({base:"#ffc107",lighten5:"#fff8e1",lighten4:"#ffecb3",lighten3:"#ffe082",lighten2:"#ffd54f",lighten1:"#ffca28",darken1:"#ffb300",darken2:"#ffa000",darken3:"#ff8f00",darken4:"#ff6f00",accent1:"#ffe57f",accent2:"#ffd740",accent3:"#ffc400",accent4:"#ffab00"}),Yy=Object.freeze({base:"#ff9800",lighten5:"#fff3e0",lighten4:"#ffe0b2",lighten3:"#ffcc80",lighten2:"#ffb74d",lighten1:"#ffa726",darken1:"#fb8c00",darken2:"#f57c00",darken3:"#ef6c00",darken4:"#e65100",accent1:"#ffd180",accent2:"#ffab40",accent3:"#ff9100",accent4:"#ff6d00"}),Ky=Object.freeze({base:"#ff5722",lighten5:"#fbe9e7",lighten4:"#ffccbc",lighten3:"#ffab91",lighten2:"#ff8a65",lighten1:"#ff7043",darken1:"#f4511e",darken2:"#e64a19",darken3:"#d84315",darken4:"#bf360c",accent1:"#ff9e80",accent2:"#ff6e40",accent3:"#ff3d00",accent4:"#dd2c00"}),qy=Object.freeze({base:"#795548",lighten5:"#efebe9",lighten4:"#d7ccc8",lighten3:"#bcaaa4",lighten2:"#a1887f",lighten1:"#8d6e63",darken1:"#6d4c41",darken2:"#5d4037",darken3:"#4e342e",darken4:"#3e2723"}),Xy=Object.freeze({base:"#607d8b",lighten5:"#eceff1",lighten4:"#cfd8dc",lighten3:"#b0bec5",lighten2:"#90a4ae",lighten1:"#78909c",darken1:"#546e7a",darken2:"#455a64",darken3:"#37474f",darken4:"#263238"}),Zy=Object.freeze({base:"#9e9e9e",lighten5:"#fafafa",lighten4:"#f5f5f5",lighten3:"#eeeeee",lighten2:"#e0e0e0",lighten1:"#bdbdbd",darken1:"#757575",darken2:"#616161",darken3:"#424242",darken4:"#212121"}),Jy=Object.freeze({black:"#000000",white:"#ffffff",transparent:"#ffffff00"}),Qy=Object.freeze({red:Ey,pink:Ly,purple:$y,deepPurple:My,indigo:Fy,blue:Dy,lightBlue:Oy,cyan:Ny,teal:zy,green:Hy,lightGreen:jy,lime:Uy,yellow:Gy,amber:Wy,orange:Yy,deepOrange:Ky,brown:qy,blueGrey:Xy,grey:Zy,shades:Jy}),eb=R({swatches:{type:Array,default:()=>tb(Qy)},disabled:Boolean,color:Object,maxHeight:[Number,String],...q()},"VColorPickerSwatches");function tb(e){return Object.keys(e).map(t=>{const n=e[t];return n.base?[n.base,n.darken4,n.darken3,n.darken2,n.darken1,n.lighten1,n.lighten2,n.lighten3,n.lighten4,n.lighten5]:[n.black,n.white,n.transparent]})}const nb=ut({name:"VColorPickerSwatches",props:eb(),emits:{"update:color":e=>!0},setup(e,t){let{emit:n}=t;return j(()=>r("div",{class:["v-color-picker-swatches",e.class],style:[{maxHeight:J(e.maxHeight)},e.style]},[r("div",null,[e.swatches.map(l=>r("div",{class:"v-color-picker-swatches__swatch"},[l.map(a=>{const o=st(a),i=hl(o),s=Ii(o);return r("div",{class:"v-color-picker-swatches__color",onClick:()=>i&&n("update:color",i)},[r("div",{style:{background:s}},[e.color&&hn(e.color,i)?r(Se,{size:"x-small",icon:"$success",color:Mf(a,"#FFFFFF")>2?"white":"black"},null):void 0])])})]))])])),{}}});const sr=R({color:String,...at(),...q(),...dt(),...Me(),...Mt(),...Cn(),...Ie(),...ce(),...he()},"VSheet"),ya=L()({name:"VSheet",props:sr(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{backgroundColorClasses:a,backgroundColorStyles:o}=Be(D(e,"color")),{borderClasses:i}=ft(e),{dimensionStyles:s}=vt(e),{elevationClasses:u}=He(e),{locationStyles:c}=Ft(e),{positionClasses:d}=xn(e),{roundedClasses:f}=Ae(e);return j(()=>r(e.tag,{class:["v-sheet",l.value,a.value,i.value,u.value,d.value,f.value,e.class],style:[o.value,s.value,c.value,e.style]},n)),{}}}),lb=R({canvasHeight:{type:[String,Number],default:150},disabled:Boolean,dotSize:{type:[Number,String],default:10},hideCanvas:Boolean,hideSliders:Boolean,hideInputs:Boolean,mode:{type:String,default:"rgba",validator:e=>Object.keys(Yt).includes(e)},modes:{type:Array,default:()=>Object.keys(Yt),validator:e=>Array.isArray(e)&&e.every(t=>Object.keys(Yt).includes(t))},showSwatches:Boolean,swatches:Array,swatchesMaxHeight:{type:[Number,String],default:150},modelValue:{type:[Object,String]},...rt(sr({width:300}),["height","location","minHeight","maxHeight","minWidth","maxWidth"])},"VColorPicker"),ab=ut({name:"VColorPicker",props:lb(),emits:{"update:modelValue":e=>!0,"update:mode":e=>!0},setup(e){const t=ue(e,"mode"),n=W(null),l=ue(e,"modelValue",void 0,i=>{if(i==null||i==="")return null;let s;try{s=hl(st(i))}catch{return null}return n.value&&(s={...s,h:n.value.h},n.value=null),s},i=>i?ky(i,e.modelValue):null),{rtlClasses:a}=Oe(),o=i=>{l.value=i,n.value=i};return Je(()=>{e.modes.includes(t.value)||(t.value=e.modes[0])}),Ee({VSlider:{color:void 0,trackColor:void 0,trackFillColor:void 0}}),j(()=>{const[i]=ya.filterProps(e);return r(ya,Y({rounded:e.rounded,elevation:e.elevation,theme:e.theme,class:["v-color-picker",a.value,e.class],style:[{"--v-color-picker-color-hsv":Ti({...l.value??Rn,a:1})},e.style]},i,{maxWidth:e.width}),{default:()=>[!e.hideCanvas&&r(by,{key:"canvas",color:l.value,"onUpdate:color":o,disabled:e.disabled,dotSize:e.dotSize,width:e.width,height:e.canvasHeight},null),(!e.hideSliders||!e.hideInputs)&&r("div",{key:"controls",class:"v-color-picker__controls"},[!e.hideSliders&&r(Ry,{key:"preview",color:l.value,"onUpdate:color":o,hideAlpha:!t.value.endsWith("a"),disabled:e.disabled},null),!e.hideInputs&&r(_y,{key:"edit",modes:e.modes,mode:t.value,"onUpdate:mode":s=>t.value=s,color:l.value,"onUpdate:color":o,disabled:e.disabled},null)]),e.showSwatches&&r(nb,{key:"swatches",color:l.value,"onUpdate:color":o,maxHeight:e.swatchesMaxHeight,swatches:e.swatches,disabled:e.disabled},null)]})}),{}}});function ob(e,t,n){if(t==null)return e;if(Array.isArray(t))throw new Error("Multiple matches is not implemented");return typeof t=="number"&&~t?r(oe,null,[r("span",{class:"v-combobox__unmask"},[e.substr(0,t)]),r("span",{class:"v-combobox__mask"},[e.substr(t,n)]),r("span",{class:"v-combobox__unmask"},[e.substr(t+n)])]):e}const ib=R({autoSelectFirst:{type:[Boolean,String]},delimiters:Array,...zs({filterKeys:["title"]}),...oo({hideNoData:!0,returnObject:!0}),...rt(Al({modelValue:null,role:"combobox"}),["validationValue","dirty","appendInnerIcon"]),...Pt({transition:!1})},"VCombobox"),sb=L()({name:"VCombobox",props:ib(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,"update:search":e=>!0,"update:menu":e=>!0},setup(e,t){var Q;let{emit:n,slots:l}=t;const{t:a}=ct(),o=W(),i=K(!1),s=K(!0),u=K(!1),c=W(),d=W(),f=ue(e,"menu"),v=h({get:()=>f.value,set:H=>{var le;f.value&&!H&&((le=c.value)!=null&&le.ΨopenChildren)||(f.value=H)}}),m=K(-1);let g=!1;const y=h(()=>{var H;return(H=o.value)==null?void 0:H.color}),b=h(()=>v.value?e.closeText:e.openText),{items:p,transformIn:S,transformOut:C}=to(e),{textColorClasses:_,textColorStyles:V}=Ge(y),x=ue(e,"modelValue",[],H=>S(et(H)),H=>{const le=C(H);return e.multiple?le:le[0]??null}),T=xl(),w=K(e.multiple?"":((Q=x.value[0])==null?void 0:Q.title)??""),k=h({get:()=>w.value,set:H=>{var le;if(w.value=H,e.multiple||(x.value=[Gt(e,H)]),H&&e.multiple&&((le=e.delimiters)!=null&&le.length)){const be=H.split(new RegExp(`(?:${e.delimiters.join("|")})+`));be.length>1&&(be.forEach(de=>{de=de.trim(),de&&ve(Gt(e,de))}),w.value="")}H||(m.value=-1),s.value=!H}});Z(w,H=>{g?xe(()=>g=!1):i.value&&!v.value&&(v.value=!0),n("update:search",H)}),Z(x,H=>{var le;e.multiple||(w.value=((le=H[0])==null?void 0:le.title)??"")});const{filteredItems:I,getMatches:A}=Hs(e,p,()=>s.value?"":k.value),B=h(()=>e.hideSelected?I.value.filter(H=>!x.value.some(le=>le.value===H.value)):I.value),E=h(()=>x.value.map(H=>H.value)),F=h(()=>{var le;return(e.autoSelectFirst===!0||e.autoSelectFirst==="exact"&&k.value===((le=B.value[0])==null?void 0:le.title))&&B.value.length>0&&!s.value&&!u.value}),X=h(()=>e.hideNoData&&!p.value.length||e.readonly||(T==null?void 0:T.isReadonly.value)),$=W(),{onListScroll:N,onListKeydown:M}=ao($,o);function G(H){g=!0,e.openOnClear&&(v.value=!0)}function U(){X.value||(v.value=!0)}function z(H){X.value||(i.value&&(H.preventDefault(),H.stopPropagation()),v.value=!v.value)}function ae(H){var de;if(e.readonly||T!=null&&T.isReadonly.value)return;const le=o.value.selectionStart,be=x.value.length;if((m.value>-1||["Enter","ArrowDown","ArrowUp"].includes(H.key))&&H.preventDefault(),["Enter","ArrowDown"].includes(H.key)&&(v.value=!0),["Escape"].includes(H.key)&&(v.value=!1),["Enter","Escape","Tab"].includes(H.key)&&(F.value&&["Enter","Tab"].includes(H.key)&&ve(I.value[0]),s.value=!0),H.key==="ArrowDown"&&F.value&&((de=$.value)==null||de.focus("next")),!!e.multiple){if(["Backspace","Delete"].includes(H.key)){if(m.value<0){H.key==="Backspace"&&!k.value&&(m.value=be-1);return}const ie=m.value,fe=x.value[m.value];fe&&!fe.props.disabled&&ve(fe),m.value=ie>=be-1?be-2:ie}if(H.key==="ArrowLeft"){if(m.value<0&&le>0)return;const ie=m.value>-1?m.value-1:be-1;x.value[ie]?m.value=ie:(m.value=-1,o.value.setSelectionRange(k.value.length,k.value.length))}if(H.key==="ArrowRight"){if(m.value<0)return;const ie=m.value+1;x.value[ie]?m.value=ie:(m.value=-1,o.value.setSelectionRange(0,0))}H.key==="Enter"&&k.value&&(ve(Gt(e,k.value)),k.value="")}}function re(){var H;i.value&&(s.value=!0,(H=o.value)==null||H.focus())}function ve(H){if(e.multiple){const le=x.value.findIndex(be=>e.valueComparator(be.value,H.value));if(le===-1)x.value=[...x.value,H];else{const be=[...x.value];be.splice(le,1),x.value=be}k.value=""}else x.value=[H],w.value=H.title,xe(()=>{v.value=!1,s.value=!0})}function ge(H){i.value=!0,setTimeout(()=>{u.value=!0})}function O(H){u.value=!1}function me(H){(H==null||H===""&&!e.multiple)&&(x.value=[])}return Z(I,H=>{!H.length&&e.hideNoData&&(v.value=!1)}),Z(i,(H,le)=>{H||H===le||(m.value=-1,v.value=!1,F.value&&!u.value&&!x.value.some(be=>{let{value:de}=be;return de===B.value[0].value})?ve(B.value[0]):e.multiple&&k.value&&(x.value=[...x.value,Gt(e,k.value)],k.value=""))}),Z(v,()=>{if(!e.hideSelected&&v.value&&x.value.length){const H=B.value.findIndex(le=>x.value.some(be=>e.valueComparator(be.value,le.value)));Ce&&window.requestAnimationFrame(()=>{var le;H>=0&&((le=d.value)==null||le.scrollToIndex(H))})}}),j(()=>{const H=!!(e.chips||l.chip),le=!!(!e.hideNoData||B.value.length||l["prepend-item"]||l["append-item"]||l["no-data"]),be=x.value.length>0,[de]=Zt.filterProps(e);return r(Zt,Y({ref:o},de,{modelValue:k.value,"onUpdate:modelValue":[ie=>k.value=ie,me],focused:i.value,"onUpdate:focused":ie=>i.value=ie,validationValue:x.externalValue,counterValue:e.multiple?x.value.length:k.value.length,dirty:be,class:["v-combobox",{"v-combobox--active-menu":v.value,"v-combobox--chips":!!e.chips,"v-combobox--selection-slot":!!l.selection,"v-combobox--selecting-index":m.value>-1,[`v-combobox--${e.multiple?"multiple":"single"}`]:!0},e.class],style:e.style,readonly:e.readonly,placeholder:be?void 0:e.placeholder,"onClick:clear":G,"onMousedown:control":U,onKeydown:ae}),{...l,default:()=>r(oe,null,[r(Il,Y({ref:c,modelValue:v.value,"onUpdate:modelValue":ie=>v.value=ie,activator:"parent",contentClass:"v-combobox__content",disabled:X.value,eager:e.eager,maxHeight:310,openOnClick:!1,closeOnContentClick:!1,transition:e.transition,onAfterLeave:re},e.menuProps),{default:()=>[le&&r(Vl,{ref:$,selected:E.value,selectStrategy:e.multiple?"independent":"single-independent",onMousedown:ie=>ie.preventDefault(),onKeydown:M,onFocusin:ge,onFocusout:O,onScrollPassive:N,tabindex:"-1",color:e.itemColor??e.color},{default:()=>{var ie,fe,Te;return[(ie=l["prepend-item"])==null?void 0:ie.call(l),!B.value.length&&!e.hideNoData&&(((fe=l["no-data"])==null?void 0:fe.call(l))??r(_t,{title:a(e.noDataText)},null)),r(Bl,{ref:d,renderless:!0,items:B.value},{default:Re=>{var Nt;let{item:_e,index:qe,itemRef:Xn}=Re;const In=Y(_e.props,{ref:Xn,key:qe,active:F.value&&qe===0?!0:void 0,onClick:()=>ve(_e)});return((Nt=l.item)==null?void 0:Nt.call(l,{item:_e,index:qe,props:In}))??r(_t,In,{prepend:wt=>{let{isSelected:Zn}=wt;return r(oe,null,[e.multiple&&!e.hideSelected?r(mn,{key:_e.value,modelValue:Zn,ripple:!1,tabindex:"-1"},null):void 0,_e.props.prependIcon&&r(Se,{icon:_e.props.prependIcon},null)])},title:()=>{var wt,Zn;return s.value?_e.title:ob(_e.title,(wt=A(_e))==null?void 0:wt.title,((Zn=k.value)==null?void 0:Zn.length)??0)}})}}),(Te=l["append-item"])==null?void 0:Te.call(l)]}})]}),x.value.map((ie,fe)=>{var _e;function Te(qe){qe.stopPropagation(),qe.preventDefault(),ve(ie)}const Re={"onClick:close":Te,onMousedown(qe){qe.preventDefault(),qe.stopPropagation()},modelValue:!0,"onUpdate:modelValue":void 0};return r("div",{key:ie.value,class:["v-combobox__selection",fe===m.value&&["v-combobox__selection--selected",_.value]],style:fe===m.value?V.value:{}},[H?l.chip?r(pe,{key:"chip-defaults",defaults:{VChip:{closable:e.closableChips,size:"small",text:ie.title}}},{default:()=>{var qe;return[(qe=l.chip)==null?void 0:qe.call(l,{item:ie,index:fe,props:Re})]}}):r(Wn,Y({key:"chip",closable:e.closableChips,size:"small",text:ie.title,disabled:ie.props.disabled},Re),null):((_e=l.selection)==null?void 0:_e.call(l,{item:ie,index:fe}))??r("span",{class:"v-combobox__selection-text"},[ie.title,e.multiple&&fe<x.value.length-1&&r("span",{class:"v-combobox__selection-comma"},[gl(",")])])])})]),"append-inner":function(){var Re;for(var ie=arguments.length,fe=new Array(ie),Te=0;Te<ie;Te++)fe[Te]=arguments[Te];return r(oe,null,[(Re=l["append-inner"])==null?void 0:Re.call(l,...fe),(!e.hideNoData||e.items.length)&&e.menuIcon?r(Se,{class:"v-combobox__menu-icon",icon:e.menuIcon,onMousedown:z,onClick:Si,"aria-label":a(b.value),title:a(b.value)},null):void 0])}})}),bt({isFocused:i,isPristine:s,menu:v,search:k,selectionIndex:m,filteredItems:I,select:ve},o)}});const rb=R({fullscreen:Boolean,retainFocus:{type:Boolean,default:!0},scrollable:Boolean,...Yn({origin:"center center",scrollStrategy:"block",transition:{component:pl},zIndex:2400})},"VDialog"),ub=L()({name:"VDialog",props:rb(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{scopeId:a}=_n(),o=W();function i(u){var f,v;const c=u.relatedTarget,d=u.target;if(c!==d&&((f=o.value)!=null&&f.contentEl)&&((v=o.value)!=null&&v.globalTop)&&![document,o.value.contentEl].includes(d)&&!o.value.contentEl.contains(d)){const m=Ln(o.value.contentEl);if(!m.length)return;const g=m[0],y=m[m.length-1];c===g?y.focus():g.focus()}}Ce&&Z(()=>l.value&&e.retainFocus,u=>{u?document.addEventListener("focusin",i):document.removeEventListener("focusin",i)},{immediate:!0}),Z(l,async u=>{var c,d;await xe(),u?(c=o.value.contentEl)==null||c.focus({preventScroll:!0}):(d=o.value.activatorEl)==null||d.focus({preventScroll:!0})});const s=h(()=>Y({"aria-haspopup":"dialog","aria-expanded":String(l.value)},e.activatorProps));return j(()=>{const[u]=It.filterProps(e);return r(It,Y({ref:o,class:["v-dialog",{"v-dialog--fullscreen":e.fullscreen,"v-dialog--scrollable":e.scrollable},e.class],style:e.style},u,{modelValue:l.value,"onUpdate:modelValue":c=>l.value=c,"aria-modal":"true",activatorProps:s.value,role:"dialog"},a),{activator:n.activator,default:function(){for(var c=arguments.length,d=new Array(c),f=0;f<c;f++)d[f]=arguments[f];return r(pe,{root:"VDialog"},{default:()=>{var v;return[(v=n.default)==null?void 0:v.call(n,...d)]}})}})}),bt({},o)}});const Nn=Symbol.for("vuetify:v-expansion-panel"),cb=["default","accordion","inset","popout"],db=R({color:String,variant:{type:String,default:"default",validator:e=>cb.includes(e)},readonly:Boolean,...q(),...pn(),...ce(),...he()},"VExpansionPanels"),vb=L()({name:"VExpansionPanels",props:db(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;an(e,Nn);const{themeClasses:l}=ye(e),a=h(()=>e.variant&&`v-expansion-panels--variant-${e.variant}`);return Ee({VExpansionPanel:{color:D(e,"color")},VExpansionPanelTitle:{readonly:D(e,"readonly")}}),j(()=>r(e.tag,{class:["v-expansion-panels",l.value,a.value,e.class],style:e.style},n)),{}}}),fb=R({...q(),..._l()},"VExpansionPanelText"),rr=L()({name:"VExpansionPanelText",props:fb(),setup(e,t){let{slots:n}=t;const l=Ve(Nn);if(!l)throw new Error("[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel");const{hasContent:a,onAfterLeave:o}=no(e,l.isSelected);return j(()=>r(kl,{onAfterLeave:o},{default:()=>{var i;return[ne(r("div",{class:["v-expansion-panel-text",e.class],style:e.style},[n.default&&a.value&&r("div",{class:"v-expansion-panel-text__wrapper"},[(i=n.default)==null?void 0:i.call(n)])]),[[Pe,l.isSelected.value]])]}})),{}}}),ur=R({color:String,expandIcon:{type:se,default:"$expand"},collapseIcon:{type:se,default:"$collapse"},hideActions:Boolean,ripple:{type:[Boolean,Object],default:!1},readonly:Boolean,...q()},"VExpansionPanelTitle"),cr=L()({name:"VExpansionPanelTitle",directives:{Ripple:Dt},props:ur(),setup(e,t){let{slots:n}=t;const l=Ve(Nn);if(!l)throw new Error("[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel");const{backgroundColorClasses:a,backgroundColorStyles:o}=Be(e,"color"),i=h(()=>({collapseIcon:e.collapseIcon,disabled:l.disabled.value,expanded:l.isSelected.value,expandIcon:e.expandIcon,readonly:e.readonly}));return j(()=>{var s;return ne(r("button",{class:["v-expansion-panel-title",{"v-expansion-panel-title--active":l.isSelected.value},a.value,e.class],style:[o.value,e.style],type:"button",tabindex:l.disabled.value?-1:void 0,disabled:l.disabled.value,"aria-expanded":l.isSelected.value,onClick:e.readonly?void 0:l.toggle},[r("span",{class:"v-expansion-panel-title__overlay"},null),(s=n.default)==null?void 0:s.call(n,i.value),!e.hideActions&&r("span",{class:"v-expansion-panel-title__icon"},[n.actions?n.actions(i.value):r(Se,{icon:l.isSelected.value?e.collapseIcon:e.expandIcon},null)])]),[[Ze("ripple"),e.ripple]])}),{}}}),mb=R({title:String,text:String,bgColor:String,...q(),...Me(),...kn(),..._l(),...Ie(),...ce(),...ur()},"VExpansionPanel"),gb=L()({name:"VExpansionPanel",props:mb(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const l=Sn(e,Nn),{backgroundColorClasses:a,backgroundColorStyles:o}=Be(e,"bgColor"),{elevationClasses:i}=He(e),{roundedClasses:s}=Ae(e),u=h(()=>(l==null?void 0:l.disabled.value)||e.disabled),c=h(()=>l.group.items.value.reduce((v,m,g)=>(l.group.selected.value.includes(m.id)&&v.push(g),v),[])),d=h(()=>{const v=l.group.items.value.findIndex(m=>m.id===l.id);return!l.isSelected.value&&c.value.some(m=>m-v===1)}),f=h(()=>{const v=l.group.items.value.findIndex(m=>m.id===l.id);return!l.isSelected.value&&c.value.some(m=>m-v===-1)});return $e(Nn,l),Ee({VExpansionPanelText:{eager:D(e,"eager")}}),j(()=>{const v=!!(n.text||e.text),m=!!(n.title||e.title);return r(e.tag,{class:["v-expansion-panel",{"v-expansion-panel--active":l.isSelected.value,"v-expansion-panel--before-active":d.value,"v-expansion-panel--after-active":f.value,"v-expansion-panel--disabled":u.value},s.value,a.value,e.class],style:[o.value,e.style]},{default:()=>{var g;return[r("div",{class:["v-expansion-panel__shadow",...i.value]},null),m&&r(cr,{key:"title",collapseIcon:e.collapseIcon,color:e.color,expandIcon:e.expandIcon,hideActions:e.hideActions,ripple:e.ripple},{default:()=>[n.title?n.title():e.title]}),v&&r(rr,{key:"text"},{default:()=>[n.text?n.text():e.text]}),(g=n.default)==null?void 0:g.call(n)]}})}),{}}});const hb=R({chips:Boolean,counter:Boolean,counterSizeString:{type:String,default:"$vuetify.fileInput.counterSize"},counterString:{type:String,default:"$vuetify.fileInput.counter"},multiple:Boolean,showSize:{type:[Boolean,Number],default:!1,validator:e=>typeof e=="boolean"||[1e3,1024].includes(e)},...Bt({prependIcon:"$file"}),modelValue:{type:Array,default:()=>[],validator:e=>et(e).every(t=>t!=null&&typeof t=="object")},...Pl({clearable:!0})},"VFileInput"),yb=L()({name:"VFileInput",inheritAttrs:!1,props:hb(),emits:{"click:control":e=>!0,"mousedown:control":e=>!0,"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{t:o}=ct(),i=ue(e,"modelValue"),{isFocused:s,focus:u,blur:c}=Ot(e),d=h(()=>typeof e.showSize!="boolean"?e.showSize:void 0),f=h(()=>(i.value??[]).reduce((k,I)=>{let{size:A=0}=I;return k+A},0)),v=h(()=>yo(f.value,d.value)),m=h(()=>(i.value??[]).map(k=>{const{name:I="",size:A=0}=k;return e.showSize?`${I} (${yo(A,d.value)})`:I})),g=h(()=>{var I;const k=((I=i.value)==null?void 0:I.length)??0;return e.showSize?o(e.counterSizeString,k,v.value):o(e.counterString,k)}),y=W(),b=W(),p=W(),S=h(()=>s.value||e.active),C=h(()=>["plain","underlined"].includes(e.variant));function _(){var k;p.value!==document.activeElement&&((k=p.value)==null||k.focus()),s.value||u()}function V(k){T(k)}function x(k){l("mousedown:control",k)}function T(k){var I;(I=p.value)==null||I.click(),l("click:control",k)}function w(k){k.stopPropagation(),_(),xe(()=>{i.value=[],Ra(e["onClick:clear"],k)})}return Z(i,k=>{(!Array.isArray(k)||!k.length)&&p.value&&(p.value.value="")}),j(()=>{const k=!!(a.counter||e.counter),I=!!(k||a.details),[A,B]=Qt(n),[{modelValue:E,...F}]=Ne.filterProps(e),[X]=lo(e);return r(Ne,Y({ref:y,modelValue:i.value,"onUpdate:modelValue":$=>i.value=$,class:["v-file-input",{"v-text-field--plain-underlined":C.value},e.class],style:e.style,"onClick:prepend":V},A,F,{centerAffix:!C.value,focused:s.value}),{...a,default:$=>{let{id:N,isDisabled:M,isDirty:G,isReadonly:U,isValid:z}=$;return r(Kn,Y({ref:b,"prepend-icon":e.prependIcon,onMousedown:x,onClick:T,"onClick:clear":w,"onClick:prependInner":e["onClick:prependInner"],"onClick:appendInner":e["onClick:appendInner"]},X,{id:N.value,active:S.value||G.value,dirty:G.value,disabled:M.value,focused:s.value,error:z.value===!1}),{...a,default:ae=>{var ge;let{props:{class:re,...ve}}=ae;return r(oe,null,[r("input",Y({ref:p,type:"file",readonly:U.value,disabled:M.value,multiple:e.multiple,name:e.name,onClick:O=>{O.stopPropagation(),U.value&&O.preventDefault(),_()},onChange:O=>{if(!O.target)return;const me=O.target;i.value=[...me.files??[]]},onFocus:_,onBlur:c},ve,B),null),r("div",{class:re},[!!((ge=i.value)!=null&&ge.length)&&(a.selection?a.selection({fileNames:m.value,totalBytes:f.value,totalBytesReadable:v.value}):e.chips?m.value.map(O=>r(Wn,{key:O,size:"small",color:e.color},{default:()=>[O]})):m.value.join(", "))])])}})},details:I?$=>{var N,M;return r(oe,null,[(N=a.details)==null?void 0:N.call(a,$),k&&r(oe,null,[r("span",null,null),r(Tl,{active:!!((M=i.value)!=null&&M.length),value:g.value},a.counter)])])}:void 0})}),bt({},y,b,p)}});const bb=R({app:Boolean,color:String,height:{type:[Number,String],default:"auto"},...at(),...q(),...Me(),...yn(),...Ie(),...ce({tag:"footer"}),...he()},"VFooter"),pb=L()({name:"VFooter",props:bb(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{backgroundColorClasses:a,backgroundColorStyles:o}=Be(D(e,"color")),{borderClasses:i}=ft(e),{elevationClasses:s}=He(e),{roundedClasses:u}=Ae(e),c=K(32),{resizeRef:d}=St(m=>{m.length&&(c.value=m[0].target.clientHeight)}),f=h(()=>e.height==="auto"?c.value:parseInt(e.height,10)),{layoutItemStyles:v}=bn({id:e.name,order:h(()=>parseInt(e.order,10)),position:h(()=>"bottom"),layoutSize:f,elementSize:h(()=>e.height==="auto"?void 0:f.value),active:h(()=>e.app),absolute:D(e,"absolute")});return j(()=>r(e.tag,{ref:d,class:["v-footer",l.value,a.value,i.value,s.value,u.value,e.class],style:[o.value,e.app?v.value:{height:J(e.height)},e.style]},n)),{}}}),kb=R({...q(),...Bg()},"VForm"),Sb=L()({name:"VForm",props:kb(),emits:{"update:modelValue":e=>!0,submit:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=Rg(e),o=W();function i(u){u.preventDefault(),a.reset()}function s(u){const c=u,d=a.validate();c.then=d.then.bind(d),c.catch=d.catch.bind(d),c.finally=d.finally.bind(d),l("submit",c),c.defaultPrevented||d.then(f=>{var m;let{valid:v}=f;v&&((m=o.value)==null||m.submit())}),c.preventDefault()}return j(()=>{var u;return r("form",{ref:o,class:["v-form",e.class],style:e.style,novalidate:!0,onReset:i,onSubmit:s},[(u=n.default)==null?void 0:u.call(n,a)])}),bt(a,o)}});const wb=R({fluid:{type:Boolean,default:!1},...q(),...ce()},"VContainer"),Cb=L()({name:"VContainer",props:wb(),setup(e,t){let{slots:n}=t;const{rtlClasses:l}=Oe();return j(()=>r(e.tag,{class:["v-container",{"v-container--fluid":e.fluid},l.value,e.class],style:e.style},n)),{}}}),dr=(()=>yl.reduce((e,t)=>(e[t]={type:[Boolean,String,Number],default:!1},e),{}))(),vr=(()=>yl.reduce((e,t)=>{const n="offset"+zn(t);return e[n]={type:[String,Number],default:null},e},{}))(),fr=(()=>yl.reduce((e,t)=>{const n="order"+zn(t);return e[n]={type:[String,Number],default:null},e},{}))(),ni={col:Object.keys(dr),offset:Object.keys(vr),order:Object.keys(fr)};function xb(e,t,n){let l=e;if(!(n==null||n===!1)){if(t){const a=t.replace(e,"");l+=`-${a}`}return e==="col"&&(l="v-"+l),e==="col"&&(n===""||n===!0)||(l+=`-${n}`),l.toLowerCase()}}const Vb=["auto","start","end","center","baseline","stretch"],_b=R({cols:{type:[Boolean,String,Number],default:!1},...dr,offset:{type:[String,Number],default:null},...vr,order:{type:[String,Number],default:null},...fr,alignSelf:{type:String,default:null,validator:e=>Vb.includes(e)},...q(),...ce()},"VCol"),Ib=L()({name:"VCol",props:_b(),setup(e,t){let{slots:n}=t;const l=h(()=>{const a=[];let o;for(o in ni)ni[o].forEach(s=>{const u=e[s],c=xb(o,s,u);c&&a.push(c)});const i=a.some(s=>s.startsWith("v-col-"));return a.push({"v-col":!i||!e.cols,[`v-col-${e.cols}`]:e.cols,[`offset-${e.offset}`]:e.offset,[`order-${e.order}`]:e.order,[`align-self-${e.alignSelf}`]:e.alignSelf}),a});return()=>{var a;return Jt(e.tag,{class:[l.value,e.class],style:e.style},(a=n.default)==null?void 0:a.call(n))}}}),ro=["start","end","center"],mr=["space-between","space-around","space-evenly"];function uo(e,t){return yl.reduce((n,l)=>{const a=e+zn(l);return n[a]=t(),n},{})}const Tb=[...ro,"baseline","stretch"],gr=e=>Tb.includes(e),hr=uo("align",()=>({type:String,default:null,validator:gr})),Pb=[...ro,...mr],yr=e=>Pb.includes(e),br=uo("justify",()=>({type:String,default:null,validator:yr})),Ab=[...ro,...mr,"stretch"],pr=e=>Ab.includes(e),kr=uo("alignContent",()=>({type:String,default:null,validator:pr})),li={align:Object.keys(hr),justify:Object.keys(br),alignContent:Object.keys(kr)},Bb={align:"align",justify:"justify",alignContent:"align-content"};function Rb(e,t,n){let l=Bb[e];if(n!=null){if(t){const a=t.replace(e,"");l+=`-${a}`}return l+=`-${n}`,l.toLowerCase()}}const Eb=R({dense:Boolean,noGutters:Boolean,align:{type:String,default:null,validator:gr},...hr,justify:{type:String,default:null,validator:yr},...br,alignContent:{type:String,default:null,validator:pr},...kr,...q(),...ce()},"VRow"),Lb=L()({name:"VRow",props:Eb(),setup(e,t){let{slots:n}=t;const l=h(()=>{const a=[];let o;for(o in li)li[o].forEach(i=>{const s=e[i],u=Rb(o,i,s);u&&a.push(u)});return a.push({"v-row--no-gutters":e.noGutters,"v-row--dense":e.dense,[`align-${e.align}`]:e.align,[`justify-${e.justify}`]:e.justify,[`align-content-${e.alignContent}`]:e.alignContent}),a});return()=>{var a;return Jt(e.tag,{class:["v-row",l.value,e.class],style:e.style},(a=n.default)==null?void 0:a.call(n))}}}),$b=yt("v-spacer","div","VSpacer"),Mb=R({disabled:Boolean,modelValue:{type:Boolean,default:void 0},...$s()},"VHover"),Fb=L()({name:"VHover",props:Mb(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{runOpenDelay:a,runCloseDelay:o}=Ms(e,i=>!e.disabled&&(l.value=i));return()=>{var i;return(i=n.default)==null?void 0:i.call(n,{isHovering:l.value,props:{onMouseenter:a,onMouseleave:o}})}}});const Sr=Symbol.for("vuetify:v-item-group"),Db=R({...q(),...pn({selectedClass:"v-item--selected"}),...ce(),...he()},"VItemGroup"),Ob=L()({name:"VItemGroup",props:Db(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{isSelected:a,select:o,next:i,prev:s,selected:u}=an(e,Sr);return()=>r(e.tag,{class:["v-item-group",l.value,e.class],style:e.style},{default:()=>{var c;return[(c=n.default)==null?void 0:c.call(n,{isSelected:a,select:o,next:i,prev:s,selected:u.value})]}})}}),Nb=L()({name:"VItem",props:kn(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const{isSelected:l,select:a,toggle:o,selectedClass:i,value:s,disabled:u}=Sn(e,Sr);return()=>{var c;return(c=n.default)==null?void 0:c.call(n,{isSelected:l.value,selectedClass:i.value,select:a,toggle:o,value:s.value,disabled:u.value})}}});const zb=yt("v-kbd");const Hb=R({...q(),...Hi()},"VLayout"),jb=L()({name:"VLayout",props:Hb(),setup(e,t){let{slots:n}=t;const{layoutClasses:l,layoutStyles:a,getLayoutItem:o,items:i,layoutRef:s}=ji(e);return j(()=>{var u;return r("div",{ref:s,class:[l.value,e.class],style:[a.value,e.style]},[(u=n.default)==null?void 0:u.call(n)])}),{getLayoutItem:o,items:i}}});const Ub=R({position:{type:String,required:!0},size:{type:[Number,String],default:300},modelValue:Boolean,...q(),...yn()},"VLayoutItem"),Gb=L()({name:"VLayoutItem",props:Ub(),setup(e,t){let{slots:n}=t;const{layoutItemStyles:l}=bn({id:e.name,order:h(()=>parseInt(e.order,10)),position:D(e,"position"),elementSize:D(e,"size"),layoutSize:D(e,"size"),active:D(e,"modelValue"),absolute:D(e,"absolute")});return()=>{var a;return r("div",{class:["v-layout-item",e.class],style:[l.value,e.style]},[(a=n.default)==null?void 0:a.call(n)])}}}),Wb=R({modelValue:Boolean,options:{type:Object,default:()=>({root:void 0,rootMargin:void 0,threshold:void 0})},...q(),...dt(),...ce(),...Pt({transition:"fade-transition"})},"VLazy"),Yb=L()({name:"VLazy",directives:{intersect:jn},props:Wb(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{dimensionStyles:l}=vt(e),a=ue(e,"modelValue");function o(i){a.value||(a.value=i)}return j(()=>ne(r(e.tag,{class:["v-lazy",e.class],style:[l.value,e.style]},{default:()=>[a.value&&r(ht,{transition:e.transition,appear:!0},{default:()=>{var i;return[(i=n.default)==null?void 0:i.call(n)]}})]}),[[Ze("intersect"),{handler:o,options:e.options},null]])),{}}});const Kb=R({locale:String,fallbackLocale:String,messages:Object,rtl:{type:Boolean,default:void 0},...q()},"VLocaleProvider"),qb=L()({name:"VLocaleProvider",props:Kb(),setup(e,t){let{slots:n}=t;const{rtlClasses:l}=am(e);return j(()=>{var a;return r("div",{class:["v-locale-provider",l.value,e.class],style:e.style},[(a=n.default)==null?void 0:a.call(n)])}),{}}});const Xb=R({scrollable:Boolean,...q(),...ce({tag:"main"})},"VMain"),Zb=L()({name:"VMain",props:Xb(),setup(e,t){let{slots:n}=t;const{mainStyles:l}=Rm(),{ssrBootStyles:a}=tn();return j(()=>r(e.tag,{class:["v-main",{"v-main--scrollable":e.scrollable},e.class],style:[l.value,a.value,e.style]},{default:()=>{var o,i;return[e.scrollable?r("div",{class:"v-main__scroller"},[(o=n.default)==null?void 0:o.call(n)]):(i=n.default)==null?void 0:i.call(n)]}})),{}}});function Jb(e){let{rootEl:t,isSticky:n,layoutItemStyles:l}=e;const a=K(!1),o=K(0),i=h(()=>{const c=typeof a.value=="boolean"?"top":a.value;return[n.value?{top:"auto",bottom:"auto",height:void 0}:void 0,a.value?{[c]:J(o.value)}:{top:l.value.top}]});Je(()=>{Z(n,c=>{c?window.addEventListener("scroll",u,{passive:!0}):window.removeEventListener("scroll",u)},{immediate:!0})}),nt(()=>{window.removeEventListener("scroll",u)});let s=0;function u(){const c=s>window.scrollY?"up":"down",d=t.value.getBoundingClientRect(),f=parseFloat(l.value.top??0),v=window.scrollY-Math.max(0,o.value-f),m=d.height+Math.max(o.value,f)-window.scrollY-window.innerHeight,g=parseFloat(getComputedStyle(t.value).getPropertyValue("--v-body-scroll-y"))||0;d.height<window.innerHeight-f?(a.value="top",o.value=f):c==="up"&&a.value==="bottom"||c==="down"&&a.value==="top"?(o.value=window.scrollY+d.top-g,a.value=!0):c==="down"&&m<=0?(o.value=0,a.value="bottom"):c==="up"&&v<=0&&(g?a.value!=="top"&&(o.value=-v+g+f,a.value="top"):(o.value=d.top+v,a.value="top")),s=window.scrollY}return{isStuck:a,stickyStyles:i}}const Qb=100,ep=20;function ai(e){const t=1.41421356237;return(e<0?-1:1)*Math.sqrt(Math.abs(e))*t}function oi(e){if(e.length<2)return 0;if(e.length===2)return e[1].t===e[0].t?0:(e[1].d-e[0].d)/(e[1].t-e[0].t);let t=0;for(let n=e.length-1;n>0;n--){if(e[n].t===e[n-1].t)continue;const l=ai(t),a=(e[n].d-e[n-1].d)/(e[n].t-e[n-1].t);t+=(a-l)*Math.abs(a),n===e.length-1&&(t*=.5)}return ai(t)*1e3}function tp(){const e={};function t(a){Array.from(a.changedTouches).forEach(o=>{(e[o.identifier]??(e[o.identifier]=new vf(ep))).push([a.timeStamp,o])})}function n(a){Array.from(a.changedTouches).forEach(o=>{delete e[o.identifier]})}function l(a){var c;const o=(c=e[a])==null?void 0:c.values().reverse();if(!o)throw new Error(`No samples for touch id ${a}`);const i=o[0],s=[],u=[];for(const d of o){if(i[0]-d[0]>Qb)break;s.push({t:d[0],d:d[1].clientX}),u.push({t:d[0],d:d[1].clientY})}return{x:oi(s),y:oi(u),get direction(){const{x:d,y:f}=this,[v,m]=[Math.abs(d),Math.abs(f)];return v>m&&d>=0?"right":v>m&&d<=0?"left":m>v&&f>=0?"down":m>v&&f<=0?"up":np()}}}return{addMovement:t,endTouch:n,getVelocity:l}}function np(){throw new Error}function lp(e){let{isActive:t,isTemporary:n,width:l,touchless:a,position:o}=e;Je(()=>{window.addEventListener("touchstart",p,{passive:!0}),window.addEventListener("touchmove",S,{passive:!1}),window.addEventListener("touchend",C,{passive:!0})}),nt(()=>{window.removeEventListener("touchstart",p),window.removeEventListener("touchmove",S),window.removeEventListener("touchend",C)});const i=h(()=>["left","right"].includes(o.value)),{addMovement:s,endTouch:u,getVelocity:c}=tp();let d=!1;const f=K(!1),v=K(0),m=K(0);let g;function y(V,x){return(o.value==="left"?V:o.value==="right"?document.documentElement.clientWidth-V:o.value==="top"?V:o.value==="bottom"?document.documentElement.clientHeight-V:un())-(x?l.value:0)}function b(V){let x=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;const T=o.value==="left"?(V-m.value)/l.value:o.value==="right"?(document.documentElement.clientWidth-V-m.value)/l.value:o.value==="top"?(V-m.value)/l.value:o.value==="bottom"?(document.documentElement.clientHeight-V-m.value)/l.value:un();return x?Math.max(0,Math.min(1,T)):T}function p(V){if(a.value)return;const x=V.changedTouches[0].clientX,T=V.changedTouches[0].clientY,w=25,k=o.value==="left"?x<w:o.value==="right"?x>document.documentElement.clientWidth-w:o.value==="top"?T<w:o.value==="bottom"?T>document.documentElement.clientHeight-w:un(),I=t.value&&(o.value==="left"?x<l.value:o.value==="right"?x>document.documentElement.clientWidth-l.value:o.value==="top"?T<l.value:o.value==="bottom"?T>document.documentElement.clientHeight-l.value:un());(k||I||t.value&&n.value)&&(d=!0,g=[x,T],m.value=y(i.value?x:T,t.value),v.value=b(i.value?x:T),u(V),s(V))}function S(V){const x=V.changedTouches[0].clientX,T=V.changedTouches[0].clientY;if(d){if(!V.cancelable){d=!1;return}const k=Math.abs(x-g[0]),I=Math.abs(T-g[1]);(i.value?k>I&&k>3:I>k&&I>3)?(f.value=!0,d=!1):(i.value?I:k)>3&&(d=!1)}if(!f.value)return;V.preventDefault(),s(V);const w=b(i.value?x:T,!1);v.value=Math.max(0,Math.min(1,w)),w>1?m.value=y(i.value?x:T,!0):w<0&&(m.value=y(i.value?x:T,!1))}function C(V){if(d=!1,!f.value)return;s(V),f.value=!1;const x=c(V.changedTouches[0].identifier),T=Math.abs(x.x),w=Math.abs(x.y);(i.value?T>w&&T>400:w>T&&w>3)?t.value=x.direction===({left:"right",right:"left",top:"down",bottom:"up"}[o.value]||un()):t.value=v.value>.5}const _=h(()=>f.value?{transform:o.value==="left"?`translateX(calc(-100% + ${v.value*l.value}px))`:o.value==="right"?`translateX(calc(100% - ${v.value*l.value}px))`:o.value==="top"?`translateY(calc(-100% + ${v.value*l.value}px))`:o.value==="bottom"?`translateY(calc(100% - ${v.value*l.value}px))`:un(),transition:"none"}:void 0);return{isDragging:f,dragProgress:v,dragStyles:_}}function un(){throw new Error}const ap=["start","end","left","right","top","bottom"],op=R({color:String,disableResizeWatcher:Boolean,disableRouteWatcher:Boolean,expandOnHover:Boolean,floating:Boolean,modelValue:{type:Boolean,default:null},permanent:Boolean,rail:{type:Boolean,default:null},railWidth:{type:[Number,String],default:56},scrim:{type:[Boolean,String],default:!0},image:String,temporary:Boolean,touchless:Boolean,width:{type:[Number,String],default:256},location:{type:String,default:"start",validator:e=>ap.includes(e)},sticky:Boolean,...at(),...q(),...Me(),...yn(),...Ie(),...ce({tag:"nav"}),...he()},"VNavigationDrawer"),ip=L()({name:"VNavigationDrawer",props:op(),emits:{"update:modelValue":e=>!0,"update:rail":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{isRtl:o}=Oe(),{themeClasses:i}=ye(e),{borderClasses:s}=ft(e),{backgroundColorClasses:u,backgroundColorStyles:c}=Be(D(e,"color")),{elevationClasses:d}=He(e),{mobile:f}=en(),{roundedClasses:v}=Ae(e),m=es(),g=ue(e,"modelValue",null,G=>!!G),{ssrBootStyles:y}=tn(),{scopeId:b}=_n(),p=W(),S=K(!1),C=h(()=>e.rail&&e.expandOnHover&&S.value?Number(e.width):Number(e.rail?e.railWidth:e.width)),_=h(()=>Wl(e.location,o.value)),V=h(()=>!e.permanent&&(f.value||e.temporary)),x=h(()=>e.sticky&&!V.value&&_.value!=="bottom");e.expandOnHover&&e.rail!=null&&Z(S,G=>l("update:rail",!G)),e.disableResizeWatcher||Z(V,G=>!e.permanent&&xe(()=>g.value=!G)),!e.disableRouteWatcher&&m&&Z(m.currentRoute,()=>V.value&&(g.value=!1)),Z(()=>e.permanent,G=>{G&&(g.value=!0)}),xa(()=>{e.modelValue!=null||V.value||(g.value=e.permanent||!f.value)});const{isDragging:T,dragProgress:w,dragStyles:k}=lp({isActive:g,isTemporary:V,width:C,touchless:D(e,"touchless"),position:_}),I=h(()=>{const G=V.value?0:e.rail&&e.expandOnHover?Number(e.railWidth):C.value;return T.value?G*w.value:G}),{layoutItemStyles:A,layoutItemScrimStyles:B}=bn({id:e.name,order:h(()=>parseInt(e.order,10)),position:_,layoutSize:I,elementSize:C,active:h(()=>g.value||T.value),disableTransitions:h(()=>T.value),absolute:h(()=>e.absolute||x.value&&typeof E.value!="string")}),{isStuck:E,stickyStyles:F}=Jb({rootEl:p,isSticky:x,layoutItemStyles:A}),X=Be(h(()=>typeof e.scrim=="string"?e.scrim:null)),$=h(()=>({...T.value?{opacity:w.value*.2,transition:"none"}:void 0,...B.value}));Ee({VList:{bgColor:"transparent"}});function N(){S.value=!0}function M(){S.value=!1}return j(()=>{const G=a.image||e.image;return r(oe,null,[r(e.tag,Y({ref:p,onMouseenter:N,onMouseleave:M,class:["v-navigation-drawer",`v-navigation-drawer--${_.value}`,{"v-navigation-drawer--expand-on-hover":e.expandOnHover,"v-navigation-drawer--floating":e.floating,"v-navigation-drawer--is-hovering":S.value,"v-navigation-drawer--rail":e.rail,"v-navigation-drawer--temporary":V.value,"v-navigation-drawer--active":g.value,"v-navigation-drawer--sticky":x.value},i.value,u.value,s.value,d.value,v.value,e.class],style:[c.value,A.value,k.value,y.value,F.value,e.style]},b,n),{default:()=>{var U,z,ae,re;return[G&&r("div",{key:"image",class:"v-navigation-drawer__img"},[a.image?(U=a.image)==null?void 0:U.call(a,{image:e.image}):r("img",{src:e.image,alt:""},null)]),a.prepend&&r("div",{class:"v-navigation-drawer__prepend"},[(z=a.prepend)==null?void 0:z.call(a)]),r("div",{class:"v-navigation-drawer__content"},[(ae=a.default)==null?void 0:ae.call(a)]),a.append&&r("div",{class:"v-navigation-drawer__append"},[(re=a.append)==null?void 0:re.call(a)])]}}),r(Rt,{name:"fade-transition"},{default:()=>[V.value&&(T.value||g.value)&&!!e.scrim&&r("div",Y({class:["v-navigation-drawer__scrim",X.backgroundColorClasses.value],style:[$.value,X.backgroundColorStyles.value],onClick:()=>g.value=!1},b),null)]})])}),{isStuck:E}}}),sp=ut({name:"VNoSsr",setup(e,t){let{slots:n}=t;const l=Fs();return()=>{var a;return l.value&&((a=n.default)==null?void 0:a.call(n))}}});function rp(){const e=W([]);Hr(()=>e.value=[]);function t(n,l){e.value[l]=n}return{refs:e,updateRef:t}}const up=R({activeColor:String,start:{type:[Number,String],default:1},modelValue:{type:Number,default:e=>e.start},disabled:Boolean,length:{type:[Number,String],default:1,validator:e=>e%1===0},totalVisible:[Number,String],firstIcon:{type:se,default:"$first"},prevIcon:{type:se,default:"$prev"},nextIcon:{type:se,default:"$next"},lastIcon:{type:se,default:"$last"},ariaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.root"},pageAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.page"},currentPageAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.currentPage"},firstAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.first"},previousAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.previous"},nextAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.next"},lastAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.last"},ellipsis:{type:String,default:"..."},showFirstLastPage:Boolean,...at(),...q(),...Fe(),...Me(),...Ie(),...At(),...ce({tag:"nav"}),...he(),...mt({variant:"text"})},"VPagination"),cp=L()({name:"VPagination",props:up(),emits:{"update:modelValue":e=>!0,first:e=>!0,prev:e=>!0,next:e=>!0,last:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=ue(e,"modelValue"),{t:o,n:i}=ct(),{isRtl:s}=Oe(),{themeClasses:u}=ye(e),{width:c}=en(),d=K(-1);Ee(void 0,{scoped:!0});const{resizeRef:f}=St(w=>{if(!w.length)return;const{target:k,contentRect:I}=w[0],A=k.querySelector(".v-pagination__list > *");if(!A)return;const B=I.width,E=A.offsetWidth+parseFloat(getComputedStyle(A).marginRight)*2;d.value=y(B,E)}),v=h(()=>parseInt(e.length,10)),m=h(()=>parseInt(e.start,10)),g=h(()=>e.totalVisible?parseInt(e.totalVisible,10):d.value>=0?d.value:y(c.value,58));function y(w,k){const I=e.showFirstLastPage?5:3;return Math.max(0,Math.floor(+((w-k*I)/k).toFixed(2)))}const b=h(()=>{if(v.value<=0||isNaN(v.value)||v.value>Number.MAX_SAFE_INTEGER)return[];if(g.value<=1)return[a.value];if(v.value<=g.value)return Ct(v.value,m.value);const w=g.value%2===0,k=w?g.value/2:Math.floor(g.value/2),I=w?k:k+1,A=v.value-k;if(I-a.value>=0)return[...Ct(Math.max(1,g.value-1),m.value),e.ellipsis,v.value];if(a.value-A>=(w?1:0)){const B=g.value-1,E=v.value-B+m.value;return[m.value,e.ellipsis,...Ct(B,E)]}else{const B=Math.max(1,g.value-3),E=B===1?a.value:a.value-Math.ceil(B/2)+m.value;return[m.value,e.ellipsis,...Ct(B,E),e.ellipsis,v.value]}});function p(w,k,I){w.preventDefault(),a.value=k,I&&l(I,k)}const{refs:S,updateRef:C}=rp();Ee({VPaginationBtn:{color:D(e,"color"),border:D(e,"border"),density:D(e,"density"),size:D(e,"size"),variant:D(e,"variant"),rounded:D(e,"rounded"),elevation:D(e,"elevation")}});const _=h(()=>b.value.map((w,k)=>{const I=A=>C(A,k);if(typeof w=="string")return{isActive:!1,key:`ellipsis-${k}`,page:w,props:{ref:I,ellipsis:!0,icon:!0,disabled:!0}};{const A=w===a.value;return{isActive:A,key:w,page:i(w),props:{ref:I,ellipsis:!1,icon:!0,disabled:!!e.disabled||+e.length<2,color:A?e.activeColor:e.color,ariaCurrent:A,ariaLabel:o(A?e.currentPageAriaLabel:e.pageAriaLabel,w),onClick:B=>p(B,w)}}}})),V=h(()=>{const w=!!e.disabled||a.value<=m.value,k=!!e.disabled||a.value>=m.value+v.value-1;return{first:e.showFirstLastPage?{icon:s.value?e.lastIcon:e.firstIcon,onClick:I=>p(I,m.value,"first"),disabled:w,ariaLabel:o(e.firstAriaLabel),ariaDisabled:w}:void 0,prev:{icon:s.value?e.nextIcon:e.prevIcon,onClick:I=>p(I,a.value-1,"prev"),disabled:w,ariaLabel:o(e.previousAriaLabel),ariaDisabled:w},next:{icon:s.value?e.prevIcon:e.nextIcon,onClick:I=>p(I,a.value+1,"next"),disabled:k,ariaLabel:o(e.nextAriaLabel),ariaDisabled:k},last:e.showFirstLastPage?{icon:s.value?e.firstIcon:e.lastIcon,onClick:I=>p(I,m.value+v.value-1,"last"),disabled:k,ariaLabel:o(e.lastAriaLabel),ariaDisabled:k}:void 0}});function x(){var k;const w=a.value-m.value;(k=S.value[w])==null||k.$el.focus()}function T(w){w.key===Ul.left&&!e.disabled&&a.value>+e.start?(a.value=a.value-1,xe(x)):w.key===Ul.right&&!e.disabled&&a.value<m.value+v.value-1&&(a.value=a.value+1,xe(x))}return j(()=>r(e.tag,{ref:f,class:["v-pagination",u.value,e.class],style:e.style,role:"navigation","aria-label":o(e.ariaLabel),onKeydown:T,"data-test":"v-pagination-root"},{default:()=>[r("ul",{class:"v-pagination__list"},[e.showFirstLastPage&&r("li",{key:"first",class:"v-pagination__first","data-test":"v-pagination-first"},[n.first?n.first(V.value.first):r(Ke,Y({_as:"VPaginationBtn"},V.value.first),null)]),r("li",{key:"prev",class:"v-pagination__prev","data-test":"v-pagination-prev"},[n.prev?n.prev(V.value.prev):r(Ke,Y({_as:"VPaginationBtn"},V.value.prev),null)]),_.value.map((w,k)=>r("li",{key:w.key,class:["v-pagination__item",{"v-pagination__item--is-active":w.isActive}],"data-test":"v-pagination-item"},[n.item?n.item(w):r(Ke,Y({_as:"VPaginationBtn"},w.props),{default:()=>[w.page]})])),r("li",{key:"next",class:"v-pagination__next","data-test":"v-pagination-next"},[n.next?n.next(V.value.next):r(Ke,Y({_as:"VPaginationBtn"},V.value.next),null)]),e.showFirstLastPage&&r("li",{key:"last",class:"v-pagination__last","data-test":"v-pagination-last"},[n.last?n.last(V.value.last):r(Ke,Y({_as:"VPaginationBtn"},V.value.last),null)])])]})),{}}});function dp(e){return Math.floor(Math.abs(e))*Math.sign(e)}const vp=R({scale:{type:[Number,String],default:.5},...q()},"VParallax"),fp=L()({name:"VParallax",props:vp(),setup(e,t){let{slots:n}=t;const{intersectionRef:l,isIntersecting:a}=Ya(),{resizeRef:o,contentRect:i}=St(),{height:s}=en(),u=W();tt(()=>{var m;l.value=o.value=(m=u.value)==null?void 0:m.$el});let c;Z(a,m=>{m?(c=Ma(l.value),c=c===document.scrollingElement?document:c,c.addEventListener("scroll",v,{passive:!0}),v()):c.removeEventListener("scroll",v)}),nt(()=>{c==null||c.removeEventListener("scroll",v)}),Z(s,v),Z(()=>{var m;return(m=i.value)==null?void 0:m.height},v);const d=h(()=>1-Ue(+e.scale));let f=-1;function v(){a.value&&(cancelAnimationFrame(f),f=requestAnimationFrame(()=>{var V;const m=((V=u.value)==null?void 0:V.$el).querySelector(".v-img__img");if(!m)return;const g=c instanceof Document?document.documentElement.clientHeight:c.clientHeight,y=c instanceof Document?window.scrollY:c.scrollTop,b=l.value.getBoundingClientRect().top+y,p=i.value.height,S=b+(p-g)/2,C=dp((y-S)*d.value),_=Math.max(1,(d.value*(g-p)+p)/p);m.style.setProperty("transform",`translateY(${C}px) scale(${_})`)}))}return j(()=>r(qt,{class:["v-parallax",{"v-parallax--active":a.value},e.class],style:e.style,ref:u,cover:!0,onLoadstart:v,onLoad:v},n)),{}}}),mp=R({...wl({falseIcon:"$radioOff",trueIcon:"$radioOn"})},"VRadio"),gp=L()({name:"VRadio",props:mp(),setup(e,t){let{slots:n}=t;return j(()=>r(Xt,Y(e,{class:["v-radio",e.class],style:e.style,type:"radio"}),n)),{}}});const hp=R({height:{type:[Number,String],default:"auto"},...Bt(),...rt(Qa(),["multiple"]),trueIcon:{type:se,default:"$radioOn"},falseIcon:{type:se,default:"$radioOff"},type:{type:String,default:"radio"}},"VRadioGroup"),yp=L()({name:"VRadioGroup",inheritAttrs:!1,props:hp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const a=We(),o=h(()=>e.id||`radio-group-${a}`),i=ue(e,"modelValue");return j(()=>{const[s,u]=Qt(n),[c,d]=Ne.filterProps(e),[f,v]=Xt.filterProps(e),m=l.label?l.label({label:e.label,props:{for:o.value}}):e.label;return r(Ne,Y({class:["v-radio-group",e.class],style:e.style},s,c,{modelValue:i.value,"onUpdate:modelValue":g=>i.value=g,id:o.value}),{...l,default:g=>{let{id:y,messagesId:b,isDisabled:p,isReadonly:S}=g;return r(oe,null,[m&&r(Vn,{id:y.value},{default:()=>[m]}),r(ds,Y(f,{id:y.value,"aria-describedby":b.value,defaultsTarget:"VRadio",trueIcon:e.trueIcon,falseIcon:e.falseIcon,type:e.type,disabled:p.value,readonly:S.value,"aria-labelledby":m?y.value:void 0,multiple:!1},u,{modelValue:i.value,"onUpdate:modelValue":C=>i.value=C}),l)])}})}),{}}}),bp=R({...Cl(),...Bt(),...lr(),strict:Boolean,modelValue:{type:Array,default:()=>[0,0]}},"VRangeSlider"),pp=L()({name:"VRangeSlider",props:bp(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,end:e=>!0,start:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=W(),o=W(),i=W(),{rtlClasses:s}=Oe();function u(k){if(!a.value||!o.value)return;const I=ma(k,a.value.$el,e.direction),A=ma(k,o.value.$el,e.direction),B=Math.abs(I),E=Math.abs(A);return B<E||B===E&&I<0?a.value.$el:o.value.$el}const c=ar(e),d=ue(e,"modelValue",void 0,k=>k!=null&&k.length?k.map(I=>c.roundValue(I)):[0,0]),{activeThumbRef:f,hasLabels:v,max:m,min:g,mousePressed:y,onSliderMousedown:b,onSliderTouchstart:p,position:S,trackContainerRef:C}=or({props:e,steps:c,onSliderStart:()=>{l("start",d.value)},onSliderEnd:k=>{var B;let{value:I}=k;const A=f.value===((B=a.value)==null?void 0:B.$el)?[I,d.value[1]]:[d.value[0],I];!e.strict&&A[0]<A[1]&&(d.value=A),l("end",d.value)},onSliderMove:k=>{var E,F,X,$;let{value:I}=k;const[A,B]=d.value;!e.strict&&A===B&&A!==g.value&&(f.value=I>A?(E=o.value)==null?void 0:E.$el:(F=a.value)==null?void 0:F.$el,(X=f.value)==null||X.focus()),f.value===(($=a.value)==null?void 0:$.$el)?d.value=[Math.min(I,B),B]:d.value=[A,Math.max(A,I)]},getActiveThumb:u}),{isFocused:_,focus:V,blur:x}=Ot(e),T=h(()=>S(d.value[0])),w=h(()=>S(d.value[1]));return j(()=>{const[k,I]=Ne.filterProps(e),A=!!(e.label||n.label||n.prepend);return r(Ne,Y({class:["v-slider","v-range-slider",{"v-slider--has-labels":!!n["tick-label"]||v.value,"v-slider--focused":_.value,"v-slider--pressed":y.value,"v-slider--disabled":e.disabled},s.value,e.class],style:e.style,ref:i},k,{focused:_.value}),{...n,prepend:A?B=>{var E,F;return r(oe,null,[((E=n.label)==null?void 0:E.call(n,B))??(e.label?r(Vn,{class:"v-slider__label",text:e.label},null):void 0),(F=n.prepend)==null?void 0:F.call(n,B)])}:void 0,default:B=>{var X,$;let{id:E,messagesId:F}=B;return r("div",{class:"v-slider__container",onMousedown:b,onTouchstartPassive:p},[r("input",{id:`${E.value}_start`,name:e.name||E.value,disabled:!!e.disabled,readonly:!!e.readonly,tabindex:"-1",value:d.value[0]},null),r("input",{id:`${E.value}_stop`,name:e.name||E.value,disabled:!!e.disabled,readonly:!!e.readonly,tabindex:"-1",value:d.value[1]},null),r(ir,{ref:C,start:T.value,stop:w.value},{"tick-label":n["tick-label"]}),r(ga,{ref:a,"aria-describedby":F.value,focused:_&&f.value===((X=a.value)==null?void 0:X.$el),modelValue:d.value[0],"onUpdate:modelValue":N=>d.value=[N,d.value[1]],onFocus:N=>{var M,G,U,z;V(),f.value=(M=a.value)==null?void 0:M.$el,d.value[0]===d.value[1]&&d.value[1]===g.value&&N.relatedTarget!==((G=o.value)==null?void 0:G.$el)&&((U=a.value)==null||U.$el.blur(),(z=o.value)==null||z.$el.focus())},onBlur:()=>{x(),f.value=void 0},min:g.value,max:d.value[1],position:T.value},{"thumb-label":n["thumb-label"]}),r(ga,{ref:o,"aria-describedby":F.value,focused:_&&f.value===(($=o.value)==null?void 0:$.$el),modelValue:d.value[1],"onUpdate:modelValue":N=>d.value=[d.value[0],N],onFocus:N=>{var M,G,U,z;V(),f.value=(M=o.value)==null?void 0:M.$el,d.value[0]===d.value[1]&&d.value[0]===m.value&&N.relatedTarget!==((G=a.value)==null?void 0:G.$el)&&((U=o.value)==null||U.$el.blur(),(z=a.value)==null||z.$el.focus())},onBlur:()=>{x(),f.value=void 0},min:d.value[0],max:m.value,position:w.value},{"thumb-label":n["thumb-label"]})])}})}),{}}});const kp=R({name:String,itemAriaLabel:{type:String,default:"$vuetify.rating.ariaLabel.item"},activeColor:String,color:String,clearable:Boolean,disabled:Boolean,emptyIcon:{type:se,default:"$ratingEmpty"},fullIcon:{type:se,default:"$ratingFull"},halfIncrements:Boolean,hover:Boolean,length:{type:[Number,String],default:5},readonly:Boolean,modelValue:{type:[Number,String],default:0},itemLabels:Array,itemLabelPosition:{type:String,default:"top",validator:e=>["top","bottom"].includes(e)},ripple:Boolean,...q(),...Fe(),...At(),...ce(),...he()},"VRating"),Sp=L()({name:"VRating",props:kp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{t:l}=ct(),{themeClasses:a}=ye(e),o=ue(e,"modelValue"),i=h(()=>Ue(parseFloat(o.value),0,+e.length)),s=h(()=>Ct(Number(e.length),1)),u=h(()=>s.value.flatMap(y=>e.halfIncrements?[y-.5,y]:[y])),c=K(-1),d=h(()=>u.value.map(y=>{const b=e.hover&&c.value>-1,p=i.value>=y,S=c.value>=y,_=(b?S:p)?e.fullIcon:e.emptyIcon,V=e.activeColor??e.color,x=p||S?V:e.color;return{isFilled:p,isHovered:S,icon:_,color:x}})),f=h(()=>[0,...u.value].map(y=>{function b(){c.value=y}function p(){c.value=-1}function S(){e.disabled||e.readonly||(o.value=i.value===y&&e.clearable?0:y)}return{onMouseenter:e.hover?b:void 0,onMouseleave:e.hover?p:void 0,onClick:S}})),v=h(()=>e.name??`v-rating-${We()}`);function m(y){var w,k;let{value:b,index:p,showStar:S=!0}=y;const{onMouseenter:C,onMouseleave:_,onClick:V}=f.value[p+1],x=`${v.value}-${String(b).replace(".","-")}`,T={color:(w=d.value[p])==null?void 0:w.color,density:e.density,disabled:e.disabled,icon:(k=d.value[p])==null?void 0:k.icon,ripple:e.ripple,size:e.size,variant:"plain"};return r(oe,null,[r("label",{for:x,class:{"v-rating__item--half":e.halfIncrements&&b%1>0,"v-rating__item--full":e.halfIncrements&&b%1===0},onMouseenter:C,onMouseleave:_,onClick:V},[r("span",{class:"v-rating__hidden"},[l(e.itemAriaLabel,b,e.length)]),S?n.item?n.item({...d.value[p],props:T,value:b,index:p,rating:i.value}):r(Ke,Y({"aria-label":l(e.itemAriaLabel,b,e.length)},T),null):void 0]),r("input",{class:"v-rating__hidden",name:v.value,id:x,type:"radio",value:b,checked:i.value===b,tabindex:-1,readonly:e.readonly,disabled:e.disabled},null)])}function g(y){return n["item-label"]?n["item-label"](y):y.label?r("span",null,[y.label]):r("span",null,[gl(" ")])}return j(()=>{var b;const y=!!((b=e.itemLabels)!=null&&b.length)||n["item-label"];return r(e.tag,{class:["v-rating",{"v-rating--hover":e.hover,"v-rating--readonly":e.readonly},a.value,e.class],style:e.style},{default:()=>[r(m,{value:0,index:-1,showStar:!1},null),s.value.map((p,S)=>{var C,_;return r("div",{class:"v-rating__wrapper"},[y&&e.itemLabelPosition==="top"?g({value:p,index:S,label:(C=e.itemLabels)==null?void 0:C[S]}):void 0,r("div",{class:"v-rating__item"},[e.halfIncrements?r(oe,null,[r(m,{value:p-.5,index:S*2},null),r(m,{value:p,index:S*2+1},null)]):r(m,{value:p,index:S},null)]),y&&e.itemLabelPosition==="bottom"?g({value:p,index:S,label:(_=e.itemLabels)==null?void 0:_[S]}):void 0])})]})}),{}}});function ii(e){const n=Math.abs(e);return Math.sign(e)*(n/((1/.501-2)*(1-n)+1))}function si(e){let{selectedElement:t,containerSize:n,contentSize:l,isRtl:a,currentScrollOffset:o,isHorizontal:i}=e;const s=i?t.clientWidth:t.clientHeight,u=i?t.offsetLeft:t.offsetTop,c=a&&i?l-u-s:u,d=n+o,f=s+c,v=s*.4;return c<=o?o=Math.max(c-v,0):d<=f&&(o=Math.min(o-(d-f-v),l-n)),o}function wp(e){let{selectedElement:t,containerSize:n,contentSize:l,isRtl:a,isHorizontal:o}=e;const i=o?t.clientWidth:t.clientHeight,s=o?t.offsetLeft:t.offsetTop,u=a&&o?l-s-i/2-n/2:s+i/2-n/2;return Math.min(l-n,Math.max(0,u))}const wr=Symbol.for("vuetify:v-slide-group"),Cr=R({centerActive:Boolean,direction:{type:String,default:"horizontal"},symbol:{type:null,default:wr},nextIcon:{type:se,default:"$next"},prevIcon:{type:se,default:"$prev"},showArrows:{type:[Boolean,String],validator:e=>typeof e=="boolean"||["always","desktop","mobile"].includes(e)},...q(),...ce(),...pn({selectedClass:"v-slide-group-item--active"})},"VSlideGroup"),ba=L()({name:"VSlideGroup",props:Cr(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{isRtl:l}=Oe(),{mobile:a}=en(),o=an(e,e.symbol),i=K(!1),s=K(0),u=K(0),c=K(0),d=h(()=>e.direction==="horizontal"),{resizeRef:f,contentRect:v}=St(),{resizeRef:m,contentRect:g}=St(),y=h(()=>o.selected.value.length?o.items.value.findIndex(U=>U.id===o.selected.value[0]):-1),b=h(()=>o.selected.value.length?o.items.value.findIndex(U=>U.id===o.selected.value[o.selected.value.length-1]):-1);if(Ce){let U=-1;Z(()=>[o.selected.value,v.value,g.value,d.value],()=>{cancelAnimationFrame(U),U=requestAnimationFrame(()=>{if(v.value&&g.value){const z=d.value?"width":"height";u.value=v.value[z],c.value=g.value[z],i.value=u.value+1<c.value}if(y.value>=0&&m.value){const z=m.value.children[b.value];y.value===0||!i.value?s.value=0:e.centerActive?s.value=wp({selectedElement:z,containerSize:u.value,contentSize:c.value,isRtl:l.value,isHorizontal:d.value}):i.value&&(s.value=si({selectedElement:z,containerSize:u.value,contentSize:c.value,isRtl:l.value,currentScrollOffset:s.value,isHorizontal:d.value}))}})})}const p=K(!1);let S=0,C=0;function _(U){const z=d.value?"clientX":"clientY";C=(l.value&&d.value?-1:1)*s.value,S=U.touches[0][z],p.value=!0}function V(U){if(!i.value)return;const z=d.value?"clientX":"clientY",ae=l.value&&d.value?-1:1;s.value=ae*(C+S-U.touches[0][z])}function x(U){const z=c.value-u.value;s.value<0||!i.value?s.value=0:s.value>=z&&(s.value=z),p.value=!1}function T(){f.value&&(f.value[d.value?"scrollLeft":"scrollTop"]=0)}const w=K(!1);function k(U){if(w.value=!0,!(!i.value||!m.value)){for(const z of U.composedPath())for(const ae of m.value.children)if(ae===z){s.value=si({selectedElement:ae,containerSize:u.value,contentSize:c.value,isRtl:l.value,currentScrollOffset:s.value,isHorizontal:d.value});return}}}function I(U){w.value=!1}function A(U){var z;!w.value&&!(U.relatedTarget&&((z=m.value)!=null&&z.contains(U.relatedTarget)))&&E()}function B(U){m.value&&(d.value?U.key==="ArrowRight"?E(l.value?"prev":"next"):U.key==="ArrowLeft"&&E(l.value?"next":"prev"):U.key==="ArrowDown"?E("next"):U.key==="ArrowUp"&&E("prev"),U.key==="Home"?E("first"):U.key==="End"&&E("last"))}function E(U){var z,ae,re,ve,ge;if(m.value)if(!U)(z=Ln(m.value)[0])==null||z.focus();else if(U==="next"){const O=(ae=m.value.querySelector(":focus"))==null?void 0:ae.nextElementSibling;O?O.focus():E("first")}else if(U==="prev"){const O=(re=m.value.querySelector(":focus"))==null?void 0:re.previousElementSibling;O?O.focus():E("last")}else U==="first"?(ve=m.value.firstElementChild)==null||ve.focus():U==="last"&&((ge=m.value.lastElementChild)==null||ge.focus())}function F(U){const z=s.value+(U==="prev"?-1:1)*u.value;s.value=Ue(z,0,c.value-u.value)}const X=h(()=>{let U=s.value>c.value-u.value?-(c.value-u.value)+ii(c.value-u.value-s.value):-s.value;s.value<=0&&(U=ii(-s.value));const z=l.value&&d.value?-1:1;return{transform:`translate${d.value?"X":"Y"}(${z*U}px)`,transition:p.value?"none":"",willChange:p.value?"transform":""}}),$=h(()=>({next:o.next,prev:o.prev,select:o.select,isSelected:o.isSelected})),N=h(()=>{switch(e.showArrows){case"always":return!0;case"desktop":return!a.value;case!0:return i.value||Math.abs(s.value)>0;case"mobile":return a.value||i.value||Math.abs(s.value)>0;default:return!a.value&&(i.value||Math.abs(s.value)>0)}}),M=h(()=>Math.abs(s.value)>0),G=h(()=>c.value>Math.abs(s.value)+u.value);return j(()=>r(e.tag,{class:["v-slide-group",{"v-slide-group--vertical":!d.value,"v-slide-group--has-affixes":N.value,"v-slide-group--is-overflowing":i.value},e.class],style:e.style,tabindex:w.value||o.selected.value.length?-1:0,onFocus:A},{default:()=>{var U,z,ae;return[N.value&&r("div",{key:"prev",class:["v-slide-group__prev",{"v-slide-group__prev--disabled":!M.value}],onClick:()=>F("prev")},[((U=n.prev)==null?void 0:U.call(n,$.value))??r(Ql,null,{default:()=>[r(Se,{icon:l.value?e.nextIcon:e.prevIcon},null)]})]),r("div",{key:"container",ref:f,class:"v-slide-group__container",onScroll:T},[r("div",{ref:m,class:"v-slide-group__content",style:X.value,onTouchstartPassive:_,onTouchmovePassive:V,onTouchendPassive:x,onFocusin:k,onFocusout:I,onKeydown:B},[(z=n.default)==null?void 0:z.call(n,$.value)])]),N.value&&r("div",{key:"next",class:["v-slide-group__next",{"v-slide-group__next--disabled":!G.value}],onClick:()=>F("next")},[((ae=n.next)==null?void 0:ae.call(n,$.value))??r(Ql,null,{default:()=>[r(Se,{icon:l.value?e.prevIcon:e.nextIcon},null)]})])]}})),{selected:o.selected,scrollTo:F,scrollOffset:s,focus:E}}}),Cp=L()({name:"VSlideGroupItem",props:kn(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const l=Sn(e,wr);return()=>{var a;return(a=n.default)==null?void 0:a.call(n,{isSelected:l.isSelected.value,select:l.select,toggle:l.toggle,selectedClass:l.selectedClass.value})}}});const xp=R({multiLine:Boolean,timeout:{type:[Number,String],default:5e3},vertical:Boolean,...Mt({location:"bottom"}),...Cn(),...Ie(),...mt(),...he(),...rt(Yn({transition:"v-snackbar-transition"}),["persistent","noClickAnimation","scrim","scrollStrategy"])},"VSnackbar"),Vp=L()({name:"VSnackbar",props:xp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{locationStyles:a}=Ft(e),{positionClasses:o}=xn(e),{scopeId:i}=_n(),{themeClasses:s}=ye(e),{colorClasses:u,colorStyles:c,variantClasses:d}=ln(e),{roundedClasses:f}=Ae(e),v=W();Z(l,g),Z(()=>e.timeout,g),Je(()=>{l.value&&g()});let m=-1;function g(){window.clearTimeout(m);const b=Number(e.timeout);!l.value||b===-1||(m=window.setTimeout(()=>{l.value=!1},b))}function y(){window.clearTimeout(m)}return j(()=>{const[b]=It.filterProps(e);return r(It,Y({ref:v,class:["v-snackbar",{"v-snackbar--active":l.value,"v-snackbar--multi-line":e.multiLine&&!e.vertical,"v-snackbar--vertical":e.vertical},o.value,e.class],style:e.style},b,{modelValue:l.value,"onUpdate:modelValue":p=>l.value=p,contentProps:Y({class:["v-snackbar__wrapper",s.value,u.value,f.value,d.value],style:[a.value,c.value],onPointerenter:y,onPointerleave:g},b.contentProps),persistent:!0,noClickAnimation:!0,scrim:!1,scrollStrategy:"none",_disableGlobalStack:!0},i),{default:()=>[nn(!1,"v-snackbar"),n.default&&r("div",{class:"v-snackbar__content",role:"status","aria-live":"polite"},[n.default()]),n.actions&&r(pe,{defaults:{VBtn:{variant:"text",ripple:!1}}},{default:()=>[r("div",{class:"v-snackbar__actions"},[n.actions()])]})],activator:n.activator})}),bt({},v)}});const _p=R({indeterminate:Boolean,inset:Boolean,flat:Boolean,loading:{type:[Boolean,String],default:!1},...Bt(),...wl()},"VSwitch"),Ip=L()({name:"VSwitch",inheritAttrs:!1,props:_p(),emits:{"update:focused":e=>!0,"update:modelValue":()=>!0,"update:indeterminate":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const a=ue(e,"indeterminate"),o=ue(e,"modelValue"),{loaderClasses:i}=Sl(e),{isFocused:s,focus:u,blur:c}=Ot(e),d=W(),f=h(()=>typeof e.loading=="string"&&e.loading!==""?e.loading:e.color),v=We(),m=h(()=>e.id||`switch-${v}`);function g(){a.value&&(a.value=!1)}function y(b){var p,S;b.stopPropagation(),b.preventDefault(),(S=(p=d.value)==null?void 0:p.input)==null||S.click()}return j(()=>{const[b,p]=Qt(n),[S,C]=Ne.filterProps(e),[_,V]=Xt.filterProps(e);return r(Ne,Y({class:["v-switch",{"v-switch--inset":e.inset},{"v-switch--indeterminate":a.value},i.value,e.class],style:e.style},b,S,{id:m.value,focused:s.value}),{...l,default:x=>{let{id:T,messagesId:w,isDisabled:k,isReadonly:I,isValid:A}=x;return r(Xt,Y({ref:d},_,{modelValue:o.value,"onUpdate:modelValue":[B=>o.value=B,g],id:T.value,"aria-describedby":w.value,type:"checkbox","aria-checked":a.value?"mixed":void 0,disabled:k.value,readonly:I.value,onFocus:u,onBlur:c},p),{...l,default:B=>{let{backgroundColorClasses:E,backgroundColorStyles:F}=B;return r("div",{class:["v-switch__track",...E.value],style:F.value,onClick:y},null)},input:B=>{let{inputNode:E,icon:F,backgroundColorClasses:X,backgroundColorStyles:$}=B;return r(oe,null,[E,r("div",{class:["v-switch__thumb",{"v-switch__thumb--filled":F||e.loading},e.inset?void 0:X.value],style:e.inset?void 0:$.value},[r(Ha,null,{default:()=>[e.loading?r(Za,{name:"v-switch",active:!0,color:A.value===!1?void 0:f.value},{default:N=>l.loader?l.loader(N):r(Ka,{active:N.isActive,color:N.color,indeterminate:!0,size:"16",width:"2"},null)}):F&&r(Se,{key:F,icon:F,size:"x-small"},null)]})])])}})}})}),{}}});const Tp=R({color:String,height:[Number,String],window:Boolean,...q(),...Me(),...yn(),...Ie(),...ce(),...he()},"VSystemBar"),Pp=L()({name:"VSystemBar",props:Tp(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{backgroundColorClasses:a,backgroundColorStyles:o}=Be(D(e,"color")),{elevationClasses:i}=He(e),{roundedClasses:s}=Ae(e),{ssrBootStyles:u}=tn(),c=h(()=>e.height??(e.window?32:24)),{layoutItemStyles:d}=bn({id:e.name,order:h(()=>parseInt(e.order,10)),position:K("top"),layoutSize:c,elementSize:c,active:h(()=>!0),absolute:D(e,"absolute")});return j(()=>r(e.tag,{class:["v-system-bar",{"v-system-bar--window":e.window},l.value,a.value,i.value,s.value,e.class],style:[o.value,d.value,u.value,e.style]},n)),{}}});const xr=Symbol.for("vuetify:v-tabs"),Ap=R({fixed:Boolean,sliderColor:String,hideSlider:Boolean,direction:{type:String,default:"horizontal"},...rt(Ja({selectedClass:"v-tab--selected",variant:"text"}),["active","block","flat","location","position","symbol"])},"VTab"),Vr=L()({name:"VTab",props:Ap(),setup(e,t){let{slots:n,attrs:l}=t;const{textColorClasses:a,textColorStyles:o}=Ge(e,"sliderColor"),i=h(()=>e.direction==="horizontal"),s=K(!1),u=W(),c=W();function d(f){var m,g;let{value:v}=f;if(s.value=v,v){const y=(g=(m=u.value)==null?void 0:m.$el.parentElement)==null?void 0:g.querySelector(".v-tab--selected .v-tab__slider"),b=c.value;if(!y||!b)return;const p=getComputedStyle(y).color,S=y.getBoundingClientRect(),C=b.getBoundingClientRect(),_=i.value?"x":"y",V=i.value?"X":"Y",x=i.value?"right":"bottom",T=i.value?"width":"height",w=S[_],k=C[_],I=w>k?S[x]-C[x]:S[_]-C[_],A=Math.sign(I)>0?i.value?"right":"bottom":Math.sign(I)<0?i.value?"left":"top":"center",E=(Math.abs(I)+(Math.sign(I)<0?S[T]:C[T]))/Math.max(S[T],C[T])||0,F=S[T]/C[T]||0,X=1.5;Ut(b,{backgroundColor:[p,"currentcolor"],transform:[`translate${V}(${I}px) scale${V}(${F})`,`translate${V}(${I/X}px) scale${V}(${(E-1)/X+1})`,"none"],transformOrigin:Array(3).fill(A)},{duration:225,easing:$n})}}return j(()=>{const[f]=Ke.filterProps(e);return r(Ke,Y({symbol:xr,ref:u,class:["v-tab",e.class],style:e.style,tabindex:s.value?0:-1,role:"tab","aria-selected":String(s.value),active:!1},f,l,{block:e.fixed,maxWidth:e.fixed?300:void 0,"onGroup:selected":d}),{default:()=>{var v;return[((v=n.default)==null?void 0:v.call(n))??e.text,!e.hideSlider&&r("div",{ref:c,class:["v-tab__slider",a.value],style:o.value},null)]}})}),{}}});function Bp(e){return e?e.map(t=>sl(t)?t:{text:t,value:t}):[]}const Rp=R({alignTabs:{type:String,default:"start"},color:String,fixedTabs:Boolean,items:{type:Array,default:()=>[]},stacked:Boolean,bgColor:String,grow:Boolean,height:{type:[Number,String],default:void 0},hideSlider:Boolean,sliderColor:String,...Cr({mandatory:"force"}),...Fe(),...ce()},"VTabs"),Ep=L()({name:"VTabs",props:Rp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),a=h(()=>Bp(e.items)),{densityClasses:o}=Ye(e),{backgroundColorClasses:i,backgroundColorStyles:s}=Be(D(e,"bgColor"));return Ee({VTab:{color:D(e,"color"),direction:D(e,"direction"),stacked:D(e,"stacked"),fixed:D(e,"fixedTabs"),sliderColor:D(e,"sliderColor"),hideSlider:D(e,"hideSlider")}}),j(()=>{const[u]=ba.filterProps(e);return r(ba,Y(u,{modelValue:l.value,"onUpdate:modelValue":c=>l.value=c,class:["v-tabs",`v-tabs--${e.direction}`,`v-tabs--align-tabs-${e.alignTabs}`,{"v-tabs--fixed-tabs":e.fixedTabs,"v-tabs--grow":e.grow,"v-tabs--stacked":e.stacked},o.value,i.value,e.class],style:[{"--v-tabs-height":J(e.height)},s.value,e.style],role:"tablist",symbol:xr}),{default:()=>[n.default?n.default():a.value.map(c=>r(Vr,Y(c,{key:c.text}),null))]})}),{}}});const Lp=R({fixedHeader:Boolean,fixedFooter:Boolean,height:[Number,String],hover:Boolean,...q(),...Fe(),...ce(),...he()},"VTable"),$p=L()({name:"VTable",props:Lp(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{densityClasses:a}=Ye(e);return j(()=>r(e.tag,{class:["v-table",{"v-table--fixed-height":!!e.height,"v-table--fixed-header":e.fixedHeader,"v-table--fixed-footer":e.fixedFooter,"v-table--has-top":!!n.top,"v-table--has-bottom":!!n.bottom,"v-table--hover":e.hover},l.value,a.value,e.class],style:e.style},{default:()=>{var o,i,s;return[(o=n.top)==null?void 0:o.call(n),n.default?r("div",{class:"v-table__wrapper",style:{height:J(e.height)}},[r("table",null,[n.default()])]):(i=n.wrapper)==null?void 0:i.call(n),(s=n.bottom)==null?void 0:s.call(n)]}})),{}}});const Mp=R({autoGrow:Boolean,autofocus:Boolean,counter:[Boolean,Number,String],counterValue:Function,prefix:String,placeholder:String,persistentPlaceholder:Boolean,persistentCounter:Boolean,noResize:Boolean,rows:{type:[Number,String],default:5,validator:e=>!isNaN(parseFloat(e))},maxRows:{type:[Number,String],validator:e=>!isNaN(parseFloat(e))},suffix:String,modelModifiers:Object,...Bt(),...Pl()},"VTextarea"),Fp=L()({name:"VTextarea",directives:{Intersect:jn},inheritAttrs:!1,props:Mp(),emits:{"click:control":e=>!0,"mousedown:control":e=>!0,"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const o=ue(e,"modelValue"),{isFocused:i,focus:s,blur:u}=Ot(e),c=h(()=>typeof e.counterValue=="function"?e.counterValue(o.value):(o.value||"").toString().length),d=h(()=>{if(n.maxlength)return n.maxlength;if(!(!e.counter||typeof e.counter!="number"&&typeof e.counter!="string"))return e.counter});function f(A,B){var E,F;!e.autofocus||!A||(F=(E=B[0].target)==null?void 0:E.focus)==null||F.call(E)}const v=W(),m=W(),g=K(""),y=W(),b=h(()=>e.persistentPlaceholder||i.value||e.active);function p(){var A;y.value!==document.activeElement&&((A=y.value)==null||A.focus()),i.value||s()}function S(A){p(),l("click:control",A)}function C(A){l("mousedown:control",A)}function _(A){A.stopPropagation(),p(),xe(()=>{o.value="",Ra(e["onClick:clear"],A)})}function V(A){var E;const B=A.target;if(o.value=B.value,(E=e.modelModifiers)!=null&&E.trim){const F=[B.selectionStart,B.selectionEnd];xe(()=>{B.selectionStart=F[0],B.selectionEnd=F[1]})}}const x=W(),T=W(+e.rows),w=h(()=>["plain","underlined"].includes(e.variant));tt(()=>{e.autoGrow||(T.value=+e.rows)});function k(){e.autoGrow&&xe(()=>{if(!x.value||!m.value)return;const A=getComputedStyle(x.value),B=getComputedStyle(m.value.$el),E=parseFloat(A.getPropertyValue("--v-field-padding-top"))+parseFloat(A.getPropertyValue("--v-input-padding-top"))+parseFloat(A.getPropertyValue("--v-field-padding-bottom")),F=x.value.scrollHeight,X=parseFloat(A.lineHeight),$=Math.max(parseFloat(e.rows)*X+E,parseFloat(B.getPropertyValue("--v-input-control-height"))),N=parseFloat(e.maxRows)*X+E||1/0,M=Ue(F??0,$,N);T.value=Math.floor((M-E)/X),g.value=J(M)})}Je(k),Z(o,k),Z(()=>e.rows,k),Z(()=>e.maxRows,k),Z(()=>e.density,k);let I;return Z(x,A=>{A?(I=new ResizeObserver(k),I.observe(x.value)):I==null||I.disconnect()}),nt(()=>{I==null||I.disconnect()}),j(()=>{const A=!!(a.counter||e.counter||e.counterValue),B=!!(A||a.details),[E,F]=Qt(n),[{modelValue:X,...$}]=Ne.filterProps(e),[N]=lo(e);return r(Ne,Y({ref:v,modelValue:o.value,"onUpdate:modelValue":M=>o.value=M,class:["v-textarea v-text-field",{"v-textarea--prefixed":e.prefix,"v-textarea--suffixed":e.suffix,"v-text-field--prefixed":e.prefix,"v-text-field--suffixed":e.suffix,"v-textarea--auto-grow":e.autoGrow,"v-textarea--no-resize":e.noResize||e.autoGrow,"v-text-field--plain-underlined":w.value},e.class],style:e.style},E,$,{centerAffix:T.value===1&&!w.value,focused:i.value}),{...a,default:M=>{let{isDisabled:G,isDirty:U,isReadonly:z,isValid:ae}=M;return r(Kn,Y({ref:m,style:{"--v-textarea-control-height":g.value},onClick:S,onMousedown:C,"onClick:clear":_,"onClick:prependInner":e["onClick:prependInner"],"onClick:appendInner":e["onClick:appendInner"]},N,{active:b.value||U.value,centerAffix:T.value===1&&!w.value,dirty:U.value||e.dirty,disabled:G.value,focused:i.value,error:ae.value===!1}),{...a,default:re=>{let{props:{class:ve,...ge}}=re;return r(oe,null,[e.prefix&&r("span",{class:"v-text-field__prefix"},[e.prefix]),ne(r("textarea",Y({ref:y,class:ve,value:o.value,onInput:V,autofocus:e.autofocus,readonly:z.value,disabled:G.value,placeholder:e.placeholder,rows:e.rows,name:e.name,onFocus:p,onBlur:u},ge,F),null),[[Ze("intersect"),{handler:f},null,{once:!0}]]),e.autoGrow&&ne(r("textarea",{class:[ve,"v-textarea__sizer"],id:`${ge.id}-sizer`,"onUpdate:modelValue":O=>o.value=O,ref:x,readonly:!0,"aria-hidden":"true"},null),[[je,o.value]]),e.suffix&&r("span",{class:"v-text-field__suffix"},[e.suffix])])}})},details:B?M=>{var G;return r(oe,null,[(G=a.details)==null?void 0:G.call(a,M),A&&r(oe,null,[r("span",null,null),r(Tl,{active:e.persistentCounter||i.value,value:c.value,max:d.value},a.counter)])])}:void 0})}),bt({},v,m,y)}});const Dp=R({withBackground:Boolean,...q(),...he(),...ce()},"VThemeProvider"),Op=L()({name:"VThemeProvider",props:Dp(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e);return()=>{var a;return e.withBackground?r(e.tag,{class:["v-theme-provider",l.value,e.class],style:e.style},{default:()=>{var o;return[(o=n.default)==null?void 0:o.call(n)]}}):(a=n.default)==null?void 0:a.call(n)}}});const Np=R({align:{type:String,default:"center",validator:e=>["center","start"].includes(e)},direction:{type:String,default:"vertical",validator:e=>["vertical","horizontal"].includes(e)},justify:{type:String,default:"auto",validator:e=>["auto","center"].includes(e)},side:{type:String,validator:e=>e==null||["start","end"].includes(e)},lineInset:{type:[String,Number],default:0},lineThickness:{type:[String,Number],default:2},lineColor:String,truncateLine:{type:String,validator:e=>["start","end","both"].includes(e)},...q(),...Fe(),...ce(),...he()},"VTimeline"),zp=L()({name:"VTimeline",props:Np(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{densityClasses:a}=Ye(e),{rtlClasses:o}=Oe();Ee({VTimelineDivider:{lineColor:D(e,"lineColor")},VTimelineItem:{density:D(e,"density"),lineInset:D(e,"lineInset")}});const i=h(()=>{const u=e.side?e.side:e.density!=="default"?"end":null;return u&&`v-timeline--side-${u}`}),s=h(()=>{const u=["v-timeline--truncate-line-start","v-timeline--truncate-line-end"];switch(e.truncateLine){case"both":return u;case"start":return u[0];case"end":return u[1];default:return null}});return j(()=>r(e.tag,{class:["v-timeline",`v-timeline--${e.direction}`,`v-timeline--align-${e.align}`,`v-timeline--justify-${e.justify}`,s.value,{"v-timeline--inset-line":!!e.lineInset},l.value,a.value,i.value,o.value,e.class],style:[{"--v-timeline-line-thickness":J(e.lineThickness)},e.style]},n)),{}}}),Hp=R({dotColor:String,fillDot:Boolean,hideDot:Boolean,icon:se,iconColor:String,lineColor:String,...q(),...Ie(),...At(),...Me()},"VTimelineDivider"),jp=L()({name:"VTimelineDivider",props:Hp(),setup(e,t){let{slots:n}=t;const{sizeClasses:l,sizeStyles:a}=wn(e,"v-timeline-divider__dot"),{backgroundColorStyles:o,backgroundColorClasses:i}=Be(D(e,"dotColor")),{roundedClasses:s}=Ae(e,"v-timeline-divider__dot"),{elevationClasses:u}=He(e),{backgroundColorClasses:c,backgroundColorStyles:d}=Be(D(e,"lineColor"));return j(()=>r("div",{class:["v-timeline-divider",{"v-timeline-divider--fill-dot":e.fillDot},e.class],style:e.style},[r("div",{class:["v-timeline-divider__before",c.value],style:d.value},null),!e.hideDot&&r("div",{key:"dot",class:["v-timeline-divider__dot",u.value,s.value,l.value],style:a.value},[r("div",{class:["v-timeline-divider__inner-dot",i.value,s.value],style:o.value},[n.default?r(pe,{key:"icon-defaults",disabled:!e.icon,defaults:{VIcon:{color:e.iconColor,icon:e.icon,size:e.size}}},n.default):r(Se,{key:"icon",color:e.iconColor,icon:e.icon,size:e.size},null)])]),r("div",{class:["v-timeline-divider__after",c.value],style:d.value},null)])),{}}}),Up=R({density:String,dotColor:String,fillDot:Boolean,hideDot:Boolean,hideOpposite:{type:Boolean,default:void 0},icon:se,iconColor:String,lineInset:[Number,String],...q(),...dt(),...Me(),...Ie(),...At(),...ce()},"VTimelineItem"),Gp=L()({name:"VTimelineItem",props:Up(),setup(e,t){let{slots:n}=t;const{dimensionStyles:l}=vt(e),a=K(0),o=W();return Z(o,i=>{var s;i&&(a.value=((s=i.$el.querySelector(".v-timeline-divider__dot"))==null?void 0:s.getBoundingClientRect().width)??0)},{flush:"post"}),j(()=>{var i,s;return r("div",{class:["v-timeline-item",{"v-timeline-item--fill-dot":e.fillDot},e.class],style:[{"--v-timeline-dot-size":J(a.value),"--v-timeline-line-inset":e.lineInset?`calc(var(--v-timeline-dot-size) / 2 + ${J(e.lineInset)})`:J(0)},e.style]},[r("div",{class:"v-timeline-item__body",style:l.value},[(i=n.default)==null?void 0:i.call(n)]),r(jp,{ref:o,hideDot:e.hideDot,icon:e.icon,iconColor:e.iconColor,size:e.size,elevation:e.elevation,dotColor:e.dotColor,fillDot:e.fillDot,rounded:e.rounded},{default:n.icon}),e.density!=="compact"&&r("div",{class:"v-timeline-item__opposite"},[!e.hideOpposite&&((s=n.opposite)==null?void 0:s.call(n))])])}),{}}}),Wp=R({...q(),...mt({variant:"text"})},"VToolbarItems"),Yp=L()({name:"VToolbarItems",props:Wp(),setup(e,t){let{slots:n}=t;return Ee({VBtn:{color:D(e,"color"),height:"inherit",variant:D(e,"variant")}}),j(()=>{var l;return r("div",{class:["v-toolbar-items",e.class],style:e.style},[(l=n.default)==null?void 0:l.call(n)])}),{}}});const Kp=R({id:String,text:String,...rt(Yn({closeOnBack:!1,location:"end",locationStrategy:"connected",eager:!0,minWidth:0,offset:10,openOnClick:!1,openOnHover:!0,origin:"auto",scrim:!1,scrollStrategy:"reposition",transition:!1}),["absolute","persistent"])},"VTooltip"),qp=L()({name:"VTooltip",props:Kp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{scopeId:a}=_n(),o=We(),i=h(()=>e.id||`v-tooltip-${o}`),s=W(),u=h(()=>e.location.split(" ").length>1?e.location:e.location+" center"),c=h(()=>e.origin==="auto"||e.origin==="overlap"||e.origin.split(" ").length>1||e.location.split(" ").length>1?e.origin:e.origin+" center"),d=h(()=>e.transition?e.transition:l.value?"scale-transition":"fade-transition"),f=h(()=>Y({"aria-describedby":i.value},e.activatorProps));return j(()=>{const[v]=It.filterProps(e);return r(It,Y({ref:s,class:["v-tooltip",e.class],style:e.style,id:i.value},v,{modelValue:l.value,"onUpdate:modelValue":m=>l.value=m,transition:d.value,absolute:!0,location:u.value,origin:c.value,persistent:!0,role:"tooltip",activatorProps:f.value,_disableGlobalStack:!0},a),{activator:n.activator,default:function(){var b;for(var m=arguments.length,g=new Array(m),y=0;y<m;y++)g[y]=arguments[y];return((b=n.default)==null?void 0:b.call(n,...g))??e.text}})}),bt({},s)}}),Xp=L()({name:"VValidation",props:hs(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ys(e,"validation");return()=>{var a;return(a=n.default)==null?void 0:a.call(n,l)}}}),Zp=Object.freeze(Object.defineProperty({__proto__:null,VAlert:_g,VAlertTitle:us,VApp:Mm,VAppBar:ng,VAppBarNavIcon:wg,VAppBarTitle:Cg,VAutocomplete:Uh,VAvatar:Lt,VBadge:Wh,VBanner:qh,VBannerActions:js,VBannerText:Us,VBottomNavigation:Zh,VBreadcrumbs:ty,VBreadcrumbsDivider:Gs,VBreadcrumbsItem:Ws,VBtn:Ke,VBtnGroup:na,VBtnToggle:rg,VCard:ay,VCardActions:Ys,VCardItem:Xs,VCardSubtitle:Ks,VCardText:Zs,VCardTitle:qs,VCarousel:fy,VCarouselItem:gy,VCheckbox:Lg,VCheckboxBtn:mn,VChip:Wn,VChipGroup:Fg,VClassIcon:Na,VCode:hy,VCol:Ib,VColorPicker:ab,VCombobox:sb,VComponentIcon:Xl,VContainer:Cb,VCounter:Tl,VDefaultsProvider:pe,VDialog:ub,VDialogBottomTransition:Nm,VDialogTopTransition:zm,VDialogTransition:pl,VDivider:Ts,VExpandTransition:kl,VExpandXTransition:Ua,VExpansionPanel:gb,VExpansionPanelText:rr,VExpansionPanelTitle:cr,VExpansionPanels:vb,VFabTransition:Om,VFadeTransition:Ql,VField:Kn,VFieldLabel:An,VFileInput:yb,VFooter:pb,VForm:Sb,VHover:Fb,VIcon:Se,VImg:qt,VInput:Ne,VItem:Nb,VItemGroup:Ob,VKbd:zb,VLabel:Vn,VLayout:jb,VLayoutItem:Gb,VLazy:Yb,VLigatureIcon:qf,VList:Vl,VListGroup:ia,VListImg:lh,VListItem:_t,VListItemAction:oh,VListItemMedia:sh,VListItemSubtitle:Vs,VListItemTitle:_s,VListSubheader:Is,VLocaleProvider:qb,VMain:Zb,VMenu:Il,VMessages:ms,VNavigationDrawer:ip,VNoSsr:sp,VOverlay:It,VPagination:cp,VParallax:fp,VProgressCircular:Ka,VProgressLinear:qa,VRadio:gp,VRadioGroup:yp,VRangeSlider:pp,VRating:Sp,VResponsive:ea,VRow:Lb,VScaleTransition:Ha,VScrollXReverseTransition:jm,VScrollXTransition:Hm,VScrollYReverseTransition:Gm,VScrollYTransition:Um,VSelect:Oh,VSelectionControl:Xt,VSelectionControlGroup:ds,VSheet:ya,VSlideGroup:ba,VSlideGroupItem:Cp,VSlideXReverseTransition:Ym,VSlideXTransition:Wm,VSlideYReverseTransition:Km,VSlideYTransition:ja,VSlider:ha,VSnackbar:Vp,VSpacer:$b,VSvgIcon:Oa,VSwitch:Ip,VSystemBar:Pp,VTab:Vr,VTable:$p,VTabs:Ep,VTextField:Zt,VTextarea:Fp,VThemeProvider:Op,VTimeline:zp,VTimelineItem:Gp,VToolbar:ta,VToolbarItems:Yp,VToolbarTitle:za,VTooltip:qp,VValidation:Xp,VVirtualScroll:Bl,VWindow:ca,VWindowItem:da},Symbol.toStringTag,{value:"Module"}));function Jp(e,t){const n=t.modifiers||{},l=t.value,{once:a,immediate:o,...i}=n,s=!Object.keys(i).length,{handler:u,options:c}=typeof l=="object"?l:{handler:l,options:{attributes:(i==null?void 0:i.attr)??s,characterData:(i==null?void 0:i.char)??s,childList:(i==null?void 0:i.child)??s,subtree:(i==null?void 0:i.sub)??s}},d=new MutationObserver(function(){let f=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],v=arguments.length>1?arguments[1]:void 0;u==null||u(f,v),a&&_r(e,t)});o&&(u==null||u([],d)),e._mutate=Object(e._mutate),e._mutate[t.instance.$.uid]={observer:d},d.observe(e,c)}function _r(e,t){var n;(n=e._mutate)!=null&&n[t.instance.$.uid]&&(e._mutate[t.instance.$.uid].observer.disconnect(),delete e._mutate[t.instance.$.uid])}const Qp={mounted:Jp,unmounted:_r};function e0(e,t){var a,o;const n=t.value,l={passive:!((a=t.modifiers)!=null&&a.active)};window.addEventListener("resize",n,l),e._onResize=Object(e._onResize),e._onResize[t.instance.$.uid]={handler:n,options:l},(o=t.modifiers)!=null&&o.quiet||n()}function t0(e,t){var a;if(!((a=e._onResize)!=null&&a[t.instance.$.uid]))return;const{handler:n,options:l}=e._onResize[t.instance.$.uid];window.removeEventListener("resize",n,l),delete e._onResize[t.instance.$.uid]}const n0={mounted:e0,unmounted:t0};function Ir(e,t){const{self:n=!1}=t.modifiers??{},l=t.value,a=typeof l=="object"&&l.options||{passive:!0},o=typeof l=="function"||"handleEvent"in l?l:l.handler,i=n?e:t.arg?document.querySelector(t.arg):window;i&&(i.addEventListener("scroll",o,a),e._onScroll=Object(e._onScroll),e._onScroll[t.instance.$.uid]={handler:o,options:a,target:n?void 0:i})}function Tr(e,t){var o;if(!((o=e._onScroll)!=null&&o[t.instance.$.uid]))return;const{handler:n,options:l,target:a=e}=e._onScroll[t.instance.$.uid];a.removeEventListener("scroll",n,l),delete e._onScroll[t.instance.$.uid]}function l0(e,t){t.value!==t.oldValue&&(Tr(e,t),Ir(e,t))}const a0={mounted:Ir,unmounted:Tr,updated:l0},o0=Object.freeze(Object.defineProperty({__proto__:null,ClickOutside:Ns,Intersect:jn,Mutate:Qp,Resize:n0,Ripple:Dt,Scroll:a0,Touch:io},Symbol.toStringTag,{value:"Module"})),i0=Gr(),qn=jr(lf);qn.config.globalProperties.emitter=i0;qn.directive("tooltip",{mounted:(e,t)=>new bootstrap.Tooltip(e,{boundary:document.body,container:e.parentNode})});const s0=Ui({components:Zp,directives:o0});qn.use(s0);qn.use(Ur);qn.mount("#mw-element-style-editor-app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
