var _c=Object.defineProperty;var kc=(e,t,s)=>t in e?_c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var As=(e,t,s)=>(kc(e,typeof t!="symbol"?t+"":t,s),s),Pn=(e,t,s)=>{if(!t.has(e))throw TypeError("Cannot "+s)};var G=(e,t,s)=>(Pn(e,t,"read from private field"),s?s.call(e):t.get(e)),pt=(e,t,s)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,s)},$n=(e,t,s,i)=>(Pn(e,t,"write to private field"),i?i.call(e,s):t.set(e,s),s);var wt=(e,t,s)=>(Pn(e,t,"access private method"),s);import"https://cdn.interactjs.io/v1.9.20/auto-start/index.js";import"https://cdn.interactjs.io/v1.9.20/actions/drag/index.js";import"https://cdn.interactjs.io/v1.9.20/actions/resize/index.js";import"https://cdn.interactjs.io/v1.9.20/modifiers/index.js";import"https://cdn.interactjs.io/v1.9.20/dev-tools/index.js";import xc from"https://cdn.interactjs.io/v1.9.20/interactjs/index.js";var gt;class Wt{constructor(){pt(this,gt,{})}on(t,s){G(this,gt)[t]?G(this,gt)[t].push(s):G(this,gt)[t]=[s]}off(t,s){if(G(this,gt)[t])if(typeof s=="function"){const i=G(this,gt)[t].indexOf(s);if(i===-1)return;G(this,gt)[t].splice(i,1)}else G(this,gt)[t]=[]}dispatch(t,s){G(this,gt)[t]&&G(this,gt)[t].forEach(function(i){i.call(this,s)})}emit(t,s){return this.dispatch(t,s)}}gt=new WeakMap;var vt,Rs,Ni;class Cc extends Wt{constructor(){super(...arguments);pt(this,Rs);pt(this,vt,{})}call(s,i){for(let n in G(this,vt))G(this,vt)[n][s]&&wt(this,Rs,Ni).call(this,s,G(this,vt)[n],i)}get(s){return G(this,vt)[s]}getModules(){return G(this,vt)}register(s,i){let n;typeof i=="function"?n=new i:n=i,G(this,vt)[s]=n,this[s]=n,wt(this,Rs,Ni).call(this,"onRegister",n),this.dispatch("register")}remove(s){let i;if(typeof s=="string"&&(i=s,s=this.get(s)),!i){for(let n in G(this,vt))if(G(this,vt)[n]===s){i=n;break}}delete G(this,vt)[i],delete this[i],wt(this,Rs,Ni).call(this,"onDestroy",s),this.dispatch("remove")}}vt=new WeakMap,Rs=new WeakSet,Ni=function(s,i,n){!s||!i||!i[s]||(s=i[s],s(n))};mw.require("editor.js");mw.require("css_parser.js");const Sc=function(){var e=document.querySelector("#mw-live-edit-editor"),t=function(){var a={};this.on=function(d,f){a[d]?a[d].push(f):a[d]=[f]},this.dispatch=function(d,f){a[d]&&a[d].forEach(function(h){h.call(this,f)})},this.provide=function(d){this.dispatch("change",d.map(function(f){return{label:f,value:f}}))}},s=new t;window.fontFamilyProvider=s;const i=mw.app.get("canvas").getFrame();i.contentWindow.fontFamilyProvider=s;const n=mw.Editor({document:i.contentWindow.document,executionDocument:i.contentWindow.document,actionWindow:i.contentWindow,element:e,mode:"document",regions:".edit",skin:"le2",editMode:"liveedit",scopeColor:"white",controls:[[{group:{icon:"mdi mdi-format-title",controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],smallEditorPositionX:"center",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:s});var o=document.getElementById("toolbar-undo"),r=document.getElementById("toolbar-redo");n.state.on("record",function(){r.disabled=!n.state.hasPrev,o.disabled=!n.state.hasNext}),n.state.on("change",function(){r.disabled=!n.state.hasPrev,o.disabled=!n.state.hasNext}),o&&o.addEventListener("click",function(){n.state.undo()}),r&&r.addEventListener("click",function(){n.state.redo()}),e.innerHTML="",e.appendChild(n.wrapper);var l=n.storage.get(n.settings.id+"-small-editor-pinned");typeof l>"u"&&typeof n.smallEditorApi<"u"&&n.smallEditorApi.pin(),mw.app.register("richTextEditor",n),mw.app.register("richTextEditorAPI",n.api)};var Ke;class Ec extends Wt{constructor(){super();pt(this,Ke,null)}go(s){G(this,Ke)&&G(this,Ke).ownerDocument&&G(this,Ke).contentWindow&&(G(this,Ke).src=s)}refresh(){G(this,Ke)&&G(this,Ke).ownerDocument&&G(this,Ke).contentWindow&&G(this,Ke).contentWindow.location.reload()}getFrame(){if(G(this,Ke)&&G(this,Ke).ownerDocument)return G(this,Ke)}getWindow(){if(G(this,Ke)&&G(this,Ke).ownerDocument)return G(this,Ke).contentWindow}getDocument(){if(G(this,Ke)&&G(this,Ke).ownerDocument)return G(this,Ke).contentWindow.document}mount(s){this.dispatch("liveEditBeforeLoaded"),mw.spinner({element:s,size:52,decorate:!0});const i=document.createElement("iframe");i.src=`${mw.settings.site_url}?editmode=n`,i.frameBorder=0,i.id="live-editor-frame",i.referrerPolicy="no-referrer",$n(this,Ke,i),s.innerHTML="",s.appendChild(i),i.addEventListener("load",n=>{this.dispatch("liveEditCanvasLoaded"),mw.spinner({element:s}).remove()})}}Ke=new WeakMap;function yl(e,t){return function(){return e.apply(t,arguments)}}const{toString:wl}=Object.prototype,{getPrototypeOf:yo}=Object,wo=(e=>t=>{const s=wl.call(t);return e[s]||(e[s]=s.slice(8,-1).toLowerCase())})(Object.create(null)),Kt=e=>(e=e.toLowerCase(),t=>wo(t)===e),Qi=e=>t=>typeof t===e,{isArray:Is}=Array,oi=Qi("undefined");function Lc(e){return e!==null&&!oi(e)&&e.constructor!==null&&!oi(e.constructor)&&ls(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const _l=Kt("ArrayBuffer");function Ac(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&_l(e.buffer),t}const Tc=Qi("string"),ls=Qi("function"),kl=Qi("number"),_o=e=>e!==null&&typeof e=="object",Mc=e=>e===!0||e===!1,Pi=e=>{if(wo(e)!=="object")return!1;const t=yo(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},Oc=Kt("Date"),Nc=Kt("File"),Pc=Kt("Blob"),$c=Kt("FileList"),Rc=e=>_o(e)&&ls(e.pipe),Hc=e=>{const t="[object FormData]";return e&&(typeof FormData=="function"&&e instanceof FormData||wl.call(e)===t||ls(e.toString)&&e.toString()===t)},Fc=Kt("URLSearchParams"),Dc=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function gi(e,t,{allOwnKeys:s=!1}={}){if(e===null||typeof e>"u")return;let i,n;if(typeof e!="object"&&(e=[e]),Is(e))for(i=0,n=e.length;i<n;i++)t.call(null,e[i],i,e);else{const o=s?Object.getOwnPropertyNames(e):Object.keys(e),r=o.length;let l;for(i=0;i<r;i++)l=o[i],t.call(null,e[l],l,e)}}function xl(e,t){t=t.toLowerCase();const s=Object.keys(e);let i=s.length,n;for(;i-- >0;)if(n=s[i],t===n.toLowerCase())return n;return null}const Cl=(()=>typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global)(),Sl=e=>!oi(e)&&e!==Cl;function Kn(){const{caseless:e}=Sl(this)&&this||{},t={},s=(i,n)=>{const o=e&&xl(t,n)||n;Pi(t[o])&&Pi(i)?t[o]=Kn(t[o],i):Pi(i)?t[o]=Kn({},i):Is(i)?t[o]=i.slice():t[o]=i};for(let i=0,n=arguments.length;i<n;i++)arguments[i]&&gi(arguments[i],s);return t}const Bc=(e,t,s,{allOwnKeys:i}={})=>(gi(t,(n,o)=>{s&&ls(n)?e[o]=yl(n,s):e[o]=n},{allOwnKeys:i}),e),Ic=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),zc=(e,t,s,i)=>{e.prototype=Object.create(t.prototype,i),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),s&&Object.assign(e.prototype,s)},Vc=(e,t,s,i)=>{let n,o,r;const l={};if(t=t||{},e==null)return t;do{for(n=Object.getOwnPropertyNames(e),o=n.length;o-- >0;)r=n[o],(!i||i(r,e,t))&&!l[r]&&(t[r]=e[r],l[r]=!0);e=s!==!1&&yo(e)}while(e&&(!s||s(e,t))&&e!==Object.prototype);return t},Uc=(e,t,s)=>{e=String(e),(s===void 0||s>e.length)&&(s=e.length),s-=t.length;const i=e.indexOf(t,s);return i!==-1&&i===s},jc=e=>{if(!e)return null;if(Is(e))return e;let t=e.length;if(!kl(t))return null;const s=new Array(t);for(;t-- >0;)s[t]=e[t];return s},qc=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&yo(Uint8Array)),Wc=(e,t)=>{const i=(e&&e[Symbol.iterator]).call(e);let n;for(;(n=i.next())&&!n.done;){const o=n.value;t.call(e,o[0],o[1])}},Kc=(e,t)=>{let s;const i=[];for(;(s=e.exec(t))!==null;)i.push(s);return i},Yc=Kt("HTMLFormElement"),Jc=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(s,i,n){return i.toUpperCase()+n}),wr=(({hasOwnProperty:e})=>(t,s)=>e.call(t,s))(Object.prototype),Xc=Kt("RegExp"),El=(e,t)=>{const s=Object.getOwnPropertyDescriptors(e),i={};gi(s,(n,o)=>{t(n,o,e)!==!1&&(i[o]=n)}),Object.defineProperties(e,i)},Zc=e=>{El(e,(t,s)=>{if(ls(e)&&["arguments","caller","callee"].indexOf(s)!==-1)return!1;const i=e[s];if(ls(i)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+s+"'")})}})},Gc=(e,t)=>{const s={},i=n=>{n.forEach(o=>{s[o]=!0})};return Is(e)?i(e):i(String(e).split(t)),s},Qc=()=>{},eu=(e,t)=>(e=+e,Number.isFinite(e)?e:t),Rn="abcdefghijklmnopqrstuvwxyz",_r="0123456789",Ll={DIGIT:_r,ALPHA:Rn,ALPHA_DIGIT:Rn+Rn.toUpperCase()+_r},tu=(e=16,t=Ll.ALPHA_DIGIT)=>{let s="";const{length:i}=t;for(;e--;)s+=t[Math.random()*i|0];return s};function su(e){return!!(e&&ls(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const iu=e=>{const t=new Array(10),s=(i,n)=>{if(_o(i)){if(t.indexOf(i)>=0)return;if(!("toJSON"in i)){t[n]=i;const o=Is(i)?[]:{};return gi(i,(r,l)=>{const a=s(r,n+1);!oi(a)&&(o[l]=a)}),t[n]=void 0,o}}return i};return s(e,0)},S={isArray:Is,isArrayBuffer:_l,isBuffer:Lc,isFormData:Hc,isArrayBufferView:Ac,isString:Tc,isNumber:kl,isBoolean:Mc,isObject:_o,isPlainObject:Pi,isUndefined:oi,isDate:Oc,isFile:Nc,isBlob:Pc,isRegExp:Xc,isFunction:ls,isStream:Rc,isURLSearchParams:Fc,isTypedArray:qc,isFileList:$c,forEach:gi,merge:Kn,extend:Bc,trim:Dc,stripBOM:Ic,inherits:zc,toFlatObject:Vc,kindOf:wo,kindOfTest:Kt,endsWith:Uc,toArray:jc,forEachEntry:Wc,matchAll:Kc,isHTMLForm:Yc,hasOwnProperty:wr,hasOwnProp:wr,reduceDescriptors:El,freezeMethods:Zc,toObjectSet:Gc,toCamelCase:Jc,noop:Qc,toFiniteNumber:eu,findKey:xl,global:Cl,isContextDefined:Sl,ALPHABET:Ll,generateString:tu,isSpecCompliantForm:su,toJSONObject:iu};function ye(e,t,s,i,n){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),s&&(this.config=s),i&&(this.request=i),n&&(this.response=n)}S.inherits(ye,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:S.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Al=ye.prototype,Tl={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{Tl[e]={value:e}});Object.defineProperties(ye,Tl);Object.defineProperty(Al,"isAxiosError",{value:!0});ye.from=(e,t,s,i,n,o)=>{const r=Object.create(Al);return S.toFlatObject(e,r,function(a){return a!==Error.prototype},l=>l!=="isAxiosError"),ye.call(r,e.message,t,s,i,n),r.cause=e,r.name=e.name,o&&Object.assign(r,o),r};const nu=null;function Yn(e){return S.isPlainObject(e)||S.isArray(e)}function Ml(e){return S.endsWith(e,"[]")?e.slice(0,-2):e}function kr(e,t,s){return e?e.concat(t).map(function(n,o){return n=Ml(n),!s&&o?"["+n+"]":n}).join(s?".":""):t}function ou(e){return S.isArray(e)&&!e.some(Yn)}const ru=S.toFlatObject(S,{},null,function(t){return/^is[A-Z]/.test(t)});function en(e,t,s){if(!S.isObject(e))throw new TypeError("target must be an object");t=t||new FormData,s=S.toFlatObject(s,{metaTokens:!0,dots:!1,indexes:!1},!1,function(_,E){return!S.isUndefined(E[_])});const i=s.metaTokens,n=s.visitor||f,o=s.dots,r=s.indexes,a=(s.Blob||typeof Blob<"u"&&Blob)&&S.isSpecCompliantForm(t);if(!S.isFunction(n))throw new TypeError("visitor must be a function");function d(b){if(b===null)return"";if(S.isDate(b))return b.toISOString();if(!a&&S.isBlob(b))throw new ye("Blob is not supported. Use a Buffer instead.");return S.isArrayBuffer(b)||S.isTypedArray(b)?a&&typeof Blob=="function"?new Blob([b]):Buffer.from(b):b}function f(b,_,E){let P=b;if(b&&!E&&typeof b=="object"){if(S.endsWith(_,"{}"))_=i?_:_.slice(0,-2),b=JSON.stringify(b);else if(S.isArray(b)&&ou(b)||(S.isFileList(b)||S.endsWith(_,"[]"))&&(P=S.toArray(b)))return _=Ml(_),P.forEach(function(K,se){!(S.isUndefined(K)||K===null)&&t.append(r===!0?kr([_],se,o):r===null?_:_+"[]",d(K))}),!1}return Yn(b)?!0:(t.append(kr(E,_,o),d(b)),!1)}const h=[],v=Object.assign(ru,{defaultVisitor:f,convertValue:d,isVisitable:Yn});function k(b,_){if(!S.isUndefined(b)){if(h.indexOf(b)!==-1)throw Error("Circular reference detected in "+_.join("."));h.push(b),S.forEach(b,function(P,Y){(!(S.isUndefined(P)||P===null)&&n.call(t,P,S.isString(Y)?Y.trim():Y,_,v))===!0&&k(P,_?_.concat(Y):[Y])}),h.pop()}}if(!S.isObject(e))throw new TypeError("data must be an object");return k(e),t}function xr(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(i){return t[i]})}function ko(e,t){this._pairs=[],e&&en(e,this,t)}const Ol=ko.prototype;Ol.append=function(t,s){this._pairs.push([t,s])};Ol.toString=function(t){const s=t?function(i){return t.call(this,i,xr)}:xr;return this._pairs.map(function(n){return s(n[0])+"="+s(n[1])},"").join("&")};function lu(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Nl(e,t,s){if(!t)return e;const i=s&&s.encode||lu,n=s&&s.serialize;let o;if(n?o=n(t,s):o=S.isURLSearchParams(t)?t.toString():new ko(t,s).toString(i),o){const r=e.indexOf("#");r!==-1&&(e=e.slice(0,r)),e+=(e.indexOf("?")===-1?"?":"&")+o}return e}class au{constructor(){this.handlers=[]}use(t,s,i){return this.handlers.push({fulfilled:t,rejected:s,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){S.forEach(this.handlers,function(i){i!==null&&t(i)})}}const Cr=au,Pl={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},cu=typeof URLSearchParams<"u"?URLSearchParams:ko,uu=typeof FormData<"u"?FormData:null,du=typeof Blob<"u"?Blob:null,fu=(()=>{let e;return typeof navigator<"u"&&((e=navigator.product)==="ReactNative"||e==="NativeScript"||e==="NS")?!1:typeof window<"u"&&typeof document<"u"})(),hu=(()=>typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function")(),Pt={isBrowser:!0,classes:{URLSearchParams:cu,FormData:uu,Blob:du},isStandardBrowserEnv:fu,isStandardBrowserWebWorkerEnv:hu,protocols:["http","https","file","blob","url","data"]};function pu(e,t){return en(e,new Pt.classes.URLSearchParams,Object.assign({visitor:function(s,i,n,o){return Pt.isNode&&S.isBuffer(s)?(this.append(i,s.toString("base64")),!1):o.defaultVisitor.apply(this,arguments)}},t))}function mu(e){return S.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function gu(e){const t={},s=Object.keys(e);let i;const n=s.length;let o;for(i=0;i<n;i++)o=s[i],t[o]=e[o];return t}function $l(e){function t(s,i,n,o){let r=s[o++];const l=Number.isFinite(+r),a=o>=s.length;return r=!r&&S.isArray(n)?n.length:r,a?(S.hasOwnProp(n,r)?n[r]=[n[r],i]:n[r]=i,!l):((!n[r]||!S.isObject(n[r]))&&(n[r]=[]),t(s,i,n[r],o)&&S.isArray(n[r])&&(n[r]=gu(n[r])),!l)}if(S.isFormData(e)&&S.isFunction(e.entries)){const s={};return S.forEachEntry(e,(i,n)=>{t(mu(i),n,s,0)}),s}return null}const vu={"Content-Type":void 0};function bu(e,t,s){if(S.isString(e))try{return(t||JSON.parse)(e),S.trim(e)}catch(i){if(i.name!=="SyntaxError")throw i}return(s||JSON.stringify)(e)}const tn={transitional:Pl,adapter:["xhr","http"],transformRequest:[function(t,s){const i=s.getContentType()||"",n=i.indexOf("application/json")>-1,o=S.isObject(t);if(o&&S.isHTMLForm(t)&&(t=new FormData(t)),S.isFormData(t))return n&&n?JSON.stringify($l(t)):t;if(S.isArrayBuffer(t)||S.isBuffer(t)||S.isStream(t)||S.isFile(t)||S.isBlob(t))return t;if(S.isArrayBufferView(t))return t.buffer;if(S.isURLSearchParams(t))return s.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let l;if(o){if(i.indexOf("application/x-www-form-urlencoded")>-1)return pu(t,this.formSerializer).toString();if((l=S.isFileList(t))||i.indexOf("multipart/form-data")>-1){const a=this.env&&this.env.FormData;return en(l?{"files[]":t}:t,a&&new a,this.formSerializer)}}return o||n?(s.setContentType("application/json",!1),bu(t)):t}],transformResponse:[function(t){const s=this.transitional||tn.transitional,i=s&&s.forcedJSONParsing,n=this.responseType==="json";if(t&&S.isString(t)&&(i&&!this.responseType||n)){const r=!(s&&s.silentJSONParsing)&&n;try{return JSON.parse(t)}catch(l){if(r)throw l.name==="SyntaxError"?ye.from(l,ye.ERR_BAD_RESPONSE,this,null,this.response):l}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Pt.classes.FormData,Blob:Pt.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};S.forEach(["delete","get","head"],function(t){tn.headers[t]={}});S.forEach(["post","put","patch"],function(t){tn.headers[t]=S.merge(vu)});const xo=tn,yu=S.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),wu=e=>{const t={};let s,i,n;return e&&e.split(`
`).forEach(function(r){n=r.indexOf(":"),s=r.substring(0,n).trim().toLowerCase(),i=r.substring(n+1).trim(),!(!s||t[s]&&yu[s])&&(s==="set-cookie"?t[s]?t[s].push(i):t[s]=[i]:t[s]=t[s]?t[s]+", "+i:i)}),t},Sr=Symbol("internals");function Ys(e){return e&&String(e).trim().toLowerCase()}function $i(e){return e===!1||e==null?e:S.isArray(e)?e.map($i):String(e)}function _u(e){const t=Object.create(null),s=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let i;for(;i=s.exec(e);)t[i[1]]=i[2];return t}function ku(e){return/^[-_a-zA-Z]+$/.test(e.trim())}function Hn(e,t,s,i,n){if(S.isFunction(i))return i.call(this,t,s);if(n&&(t=s),!!S.isString(t)){if(S.isString(i))return t.indexOf(i)!==-1;if(S.isRegExp(i))return i.test(t)}}function xu(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,s,i)=>s.toUpperCase()+i)}function Cu(e,t){const s=S.toCamelCase(" "+t);["get","set","has"].forEach(i=>{Object.defineProperty(e,i+s,{value:function(n,o,r){return this[i].call(this,t,n,o,r)},configurable:!0})})}class sn{constructor(t){t&&this.set(t)}set(t,s,i){const n=this;function o(l,a,d){const f=Ys(a);if(!f)throw new Error("header name must be a non-empty string");const h=S.findKey(n,f);(!h||n[h]===void 0||d===!0||d===void 0&&n[h]!==!1)&&(n[h||a]=$i(l))}const r=(l,a)=>S.forEach(l,(d,f)=>o(d,f,a));return S.isPlainObject(t)||t instanceof this.constructor?r(t,s):S.isString(t)&&(t=t.trim())&&!ku(t)?r(wu(t),s):t!=null&&o(s,t,i),this}get(t,s){if(t=Ys(t),t){const i=S.findKey(this,t);if(i){const n=this[i];if(!s)return n;if(s===!0)return _u(n);if(S.isFunction(s))return s.call(this,n,i);if(S.isRegExp(s))return s.exec(n);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,s){if(t=Ys(t),t){const i=S.findKey(this,t);return!!(i&&this[i]!==void 0&&(!s||Hn(this,this[i],i,s)))}return!1}delete(t,s){const i=this;let n=!1;function o(r){if(r=Ys(r),r){const l=S.findKey(i,r);l&&(!s||Hn(i,i[l],l,s))&&(delete i[l],n=!0)}}return S.isArray(t)?t.forEach(o):o(t),n}clear(t){const s=Object.keys(this);let i=s.length,n=!1;for(;i--;){const o=s[i];(!t||Hn(this,this[o],o,t,!0))&&(delete this[o],n=!0)}return n}normalize(t){const s=this,i={};return S.forEach(this,(n,o)=>{const r=S.findKey(i,o);if(r){s[r]=$i(n),delete s[o];return}const l=t?xu(o):String(o).trim();l!==o&&delete s[o],s[l]=$i(n),i[l]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const s=Object.create(null);return S.forEach(this,(i,n)=>{i!=null&&i!==!1&&(s[n]=t&&S.isArray(i)?i.join(", "):i)}),s}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,s])=>t+": "+s).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...s){const i=new this(t);return s.forEach(n=>i.set(n)),i}static accessor(t){const i=(this[Sr]=this[Sr]={accessors:{}}).accessors,n=this.prototype;function o(r){const l=Ys(r);i[l]||(Cu(n,r),i[l]=!0)}return S.isArray(t)?t.forEach(o):o(t),this}}sn.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);S.freezeMethods(sn.prototype);S.freezeMethods(sn);const Ut=sn;function Fn(e,t){const s=this||xo,i=t||s,n=Ut.from(i.headers);let o=i.data;return S.forEach(e,function(l){o=l.call(s,o,n.normalize(),t?t.status:void 0)}),n.normalize(),o}function Rl(e){return!!(e&&e.__CANCEL__)}function vi(e,t,s){ye.call(this,e??"canceled",ye.ERR_CANCELED,t,s),this.name="CanceledError"}S.inherits(vi,ye,{__CANCEL__:!0});function Su(e,t,s){const i=s.config.validateStatus;!s.status||!i||i(s.status)?e(s):t(new ye("Request failed with status code "+s.status,[ye.ERR_BAD_REQUEST,ye.ERR_BAD_RESPONSE][Math.floor(s.status/100)-4],s.config,s.request,s))}const Eu=Pt.isStandardBrowserEnv?function(){return{write:function(s,i,n,o,r,l){const a=[];a.push(s+"="+encodeURIComponent(i)),S.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),S.isString(o)&&a.push("path="+o),S.isString(r)&&a.push("domain="+r),l===!0&&a.push("secure"),document.cookie=a.join("; ")},read:function(s){const i=document.cookie.match(new RegExp("(^|;\\s*)("+s+")=([^;]*)"));return i?decodeURIComponent(i[3]):null},remove:function(s){this.write(s,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}();function Lu(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function Au(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}function Hl(e,t){return e&&!Lu(t)?Au(e,t):t}const Tu=Pt.isStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),s=document.createElement("a");let i;function n(o){let r=o;return t&&(s.setAttribute("href",r),r=s.href),s.setAttribute("href",r),{href:s.href,protocol:s.protocol?s.protocol.replace(/:$/,""):"",host:s.host,search:s.search?s.search.replace(/^\?/,""):"",hash:s.hash?s.hash.replace(/^#/,""):"",hostname:s.hostname,port:s.port,pathname:s.pathname.charAt(0)==="/"?s.pathname:"/"+s.pathname}}return i=n(window.location.href),function(r){const l=S.isString(r)?n(r):r;return l.protocol===i.protocol&&l.host===i.host}}():function(){return function(){return!0}}();function Mu(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}function Ou(e,t){e=e||10;const s=new Array(e),i=new Array(e);let n=0,o=0,r;return t=t!==void 0?t:1e3,function(a){const d=Date.now(),f=i[o];r||(r=d),s[n]=a,i[n]=d;let h=o,v=0;for(;h!==n;)v+=s[h++],h=h%e;if(n=(n+1)%e,n===o&&(o=(o+1)%e),d-r<t)return;const k=f&&d-f;return k?Math.round(v*1e3/k):void 0}}function Er(e,t){let s=0;const i=Ou(50,250);return n=>{const o=n.loaded,r=n.lengthComputable?n.total:void 0,l=o-s,a=i(l),d=o<=r;s=o;const f={loaded:o,total:r,progress:r?o/r:void 0,bytes:l,rate:a||void 0,estimated:a&&r&&d?(r-o)/a:void 0,event:n};f[t?"download":"upload"]=!0,e(f)}}const Nu=typeof XMLHttpRequest<"u",Pu=Nu&&function(e){return new Promise(function(s,i){let n=e.data;const o=Ut.from(e.headers).normalize(),r=e.responseType;let l;function a(){e.cancelToken&&e.cancelToken.unsubscribe(l),e.signal&&e.signal.removeEventListener("abort",l)}S.isFormData(n)&&(Pt.isStandardBrowserEnv||Pt.isStandardBrowserWebWorkerEnv)&&o.setContentType(!1);let d=new XMLHttpRequest;if(e.auth){const k=e.auth.username||"",b=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(k+":"+b))}const f=Hl(e.baseURL,e.url);d.open(e.method.toUpperCase(),Nl(f,e.params,e.paramsSerializer),!0),d.timeout=e.timeout;function h(){if(!d)return;const k=Ut.from("getAllResponseHeaders"in d&&d.getAllResponseHeaders()),_={data:!r||r==="text"||r==="json"?d.responseText:d.response,status:d.status,statusText:d.statusText,headers:k,config:e,request:d};Su(function(P){s(P),a()},function(P){i(P),a()},_),d=null}if("onloadend"in d?d.onloadend=h:d.onreadystatechange=function(){!d||d.readyState!==4||d.status===0&&!(d.responseURL&&d.responseURL.indexOf("file:")===0)||setTimeout(h)},d.onabort=function(){d&&(i(new ye("Request aborted",ye.ECONNABORTED,e,d)),d=null)},d.onerror=function(){i(new ye("Network Error",ye.ERR_NETWORK,e,d)),d=null},d.ontimeout=function(){let b=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const _=e.transitional||Pl;e.timeoutErrorMessage&&(b=e.timeoutErrorMessage),i(new ye(b,_.clarifyTimeoutError?ye.ETIMEDOUT:ye.ECONNABORTED,e,d)),d=null},Pt.isStandardBrowserEnv){const k=(e.withCredentials||Tu(f))&&e.xsrfCookieName&&Eu.read(e.xsrfCookieName);k&&o.set(e.xsrfHeaderName,k)}n===void 0&&o.setContentType(null),"setRequestHeader"in d&&S.forEach(o.toJSON(),function(b,_){d.setRequestHeader(_,b)}),S.isUndefined(e.withCredentials)||(d.withCredentials=!!e.withCredentials),r&&r!=="json"&&(d.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&d.addEventListener("progress",Er(e.onDownloadProgress,!0)),typeof e.onUploadProgress=="function"&&d.upload&&d.upload.addEventListener("progress",Er(e.onUploadProgress)),(e.cancelToken||e.signal)&&(l=k=>{d&&(i(!k||k.type?new vi(null,e,d):k),d.abort(),d=null)},e.cancelToken&&e.cancelToken.subscribe(l),e.signal&&(e.signal.aborted?l():e.signal.addEventListener("abort",l)));const v=Mu(f);if(v&&Pt.protocols.indexOf(v)===-1){i(new ye("Unsupported protocol "+v+":",ye.ERR_BAD_REQUEST,e));return}d.send(n||null)})},Ri={http:nu,xhr:Pu};S.forEach(Ri,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});const $u={getAdapter:e=>{e=S.isArray(e)?e:[e];const{length:t}=e;let s,i;for(let n=0;n<t&&(s=e[n],!(i=S.isString(s)?Ri[s.toLowerCase()]:s));n++);if(!i)throw i===!1?new ye(`Adapter ${s} is not supported by the environment`,"ERR_NOT_SUPPORT"):new Error(S.hasOwnProp(Ri,s)?`Adapter '${s}' is not available in the build`:`Unknown adapter '${s}'`);if(!S.isFunction(i))throw new TypeError("adapter is not a function");return i},adapters:Ri};function Dn(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new vi(null,e)}function Lr(e){return Dn(e),e.headers=Ut.from(e.headers),e.data=Fn.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),$u.getAdapter(e.adapter||xo.adapter)(e).then(function(i){return Dn(e),i.data=Fn.call(e,e.transformResponse,i),i.headers=Ut.from(i.headers),i},function(i){return Rl(i)||(Dn(e),i&&i.response&&(i.response.data=Fn.call(e,e.transformResponse,i.response),i.response.headers=Ut.from(i.response.headers))),Promise.reject(i)})}const Ar=e=>e instanceof Ut?e.toJSON():e;function Hs(e,t){t=t||{};const s={};function i(d,f,h){return S.isPlainObject(d)&&S.isPlainObject(f)?S.merge.call({caseless:h},d,f):S.isPlainObject(f)?S.merge({},f):S.isArray(f)?f.slice():f}function n(d,f,h){if(S.isUndefined(f)){if(!S.isUndefined(d))return i(void 0,d,h)}else return i(d,f,h)}function o(d,f){if(!S.isUndefined(f))return i(void 0,f)}function r(d,f){if(S.isUndefined(f)){if(!S.isUndefined(d))return i(void 0,d)}else return i(void 0,f)}function l(d,f,h){if(h in t)return i(d,f);if(h in e)return i(void 0,d)}const a={url:o,method:o,data:o,baseURL:r,transformRequest:r,transformResponse:r,paramsSerializer:r,timeout:r,timeoutMessage:r,withCredentials:r,adapter:r,responseType:r,xsrfCookieName:r,xsrfHeaderName:r,onUploadProgress:r,onDownloadProgress:r,decompress:r,maxContentLength:r,maxBodyLength:r,beforeRedirect:r,transport:r,httpAgent:r,httpsAgent:r,cancelToken:r,socketPath:r,responseEncoding:r,validateStatus:l,headers:(d,f)=>n(Ar(d),Ar(f),!0)};return S.forEach(Object.keys(e).concat(Object.keys(t)),function(f){const h=a[f]||n,v=h(e[f],t[f],f);S.isUndefined(v)&&h!==l||(s[f]=v)}),s}const Fl="1.3.4",Co={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{Co[e]=function(i){return typeof i===e||"a"+(t<1?"n ":" ")+e}});const Tr={};Co.transitional=function(t,s,i){function n(o,r){return"[Axios v"+Fl+"] Transitional option '"+o+"'"+r+(i?". "+i:"")}return(o,r,l)=>{if(t===!1)throw new ye(n(r," has been removed"+(s?" in "+s:"")),ye.ERR_DEPRECATED);return s&&!Tr[r]&&(Tr[r]=!0,console.warn(n(r," has been deprecated since v"+s+" and will be removed in the near future"))),t?t(o,r,l):!0}};function Ru(e,t,s){if(typeof e!="object")throw new ye("options must be an object",ye.ERR_BAD_OPTION_VALUE);const i=Object.keys(e);let n=i.length;for(;n-- >0;){const o=i[n],r=t[o];if(r){const l=e[o],a=l===void 0||r(l,o,e);if(a!==!0)throw new ye("option "+o+" must be "+a,ye.ERR_BAD_OPTION_VALUE);continue}if(s!==!0)throw new ye("Unknown option "+o,ye.ERR_BAD_OPTION)}}const Jn={assertOptions:Ru,validators:Co},Zt=Jn.validators;class Ui{constructor(t){this.defaults=t,this.interceptors={request:new Cr,response:new Cr}}request(t,s){typeof t=="string"?(s=s||{},s.url=t):s=t||{},s=Hs(this.defaults,s);const{transitional:i,paramsSerializer:n,headers:o}=s;i!==void 0&&Jn.assertOptions(i,{silentJSONParsing:Zt.transitional(Zt.boolean),forcedJSONParsing:Zt.transitional(Zt.boolean),clarifyTimeoutError:Zt.transitional(Zt.boolean)},!1),n!==void 0&&Jn.assertOptions(n,{encode:Zt.function,serialize:Zt.function},!0),s.method=(s.method||this.defaults.method||"get").toLowerCase();let r;r=o&&S.merge(o.common,o[s.method]),r&&S.forEach(["delete","get","head","post","put","patch","common"],b=>{delete o[b]}),s.headers=Ut.concat(r,o);const l=[];let a=!0;this.interceptors.request.forEach(function(_){typeof _.runWhen=="function"&&_.runWhen(s)===!1||(a=a&&_.synchronous,l.unshift(_.fulfilled,_.rejected))});const d=[];this.interceptors.response.forEach(function(_){d.push(_.fulfilled,_.rejected)});let f,h=0,v;if(!a){const b=[Lr.bind(this),void 0];for(b.unshift.apply(b,l),b.push.apply(b,d),v=b.length,f=Promise.resolve(s);h<v;)f=f.then(b[h++],b[h++]);return f}v=l.length;let k=s;for(h=0;h<v;){const b=l[h++],_=l[h++];try{k=b(k)}catch(E){_.call(this,E);break}}try{f=Lr.call(this,k)}catch(b){return Promise.reject(b)}for(h=0,v=d.length;h<v;)f=f.then(d[h++],d[h++]);return f}getUri(t){t=Hs(this.defaults,t);const s=Hl(t.baseURL,t.url);return Nl(s,t.params,t.paramsSerializer)}}S.forEach(["delete","get","head","options"],function(t){Ui.prototype[t]=function(s,i){return this.request(Hs(i||{},{method:t,url:s,data:(i||{}).data}))}});S.forEach(["post","put","patch"],function(t){function s(i){return function(o,r,l){return this.request(Hs(l||{},{method:t,headers:i?{"Content-Type":"multipart/form-data"}:{},url:o,data:r}))}}Ui.prototype[t]=s(),Ui.prototype[t+"Form"]=s(!0)});const Hi=Ui;class So{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let s;this.promise=new Promise(function(o){s=o});const i=this;this.promise.then(n=>{if(!i._listeners)return;let o=i._listeners.length;for(;o-- >0;)i._listeners[o](n);i._listeners=null}),this.promise.then=n=>{let o;const r=new Promise(l=>{i.subscribe(l),o=l}).then(n);return r.cancel=function(){i.unsubscribe(o)},r},t(function(o,r,l){i.reason||(i.reason=new vi(o,r,l),s(i.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const s=this._listeners.indexOf(t);s!==-1&&this._listeners.splice(s,1)}static source(){let t;return{token:new So(function(n){t=n}),cancel:t}}}const Hu=So;function Fu(e){return function(s){return e.apply(null,s)}}function Du(e){return S.isObject(e)&&e.isAxiosError===!0}const Xn={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Xn).forEach(([e,t])=>{Xn[t]=e});const Bu=Xn;function Dl(e){const t=new Hi(e),s=yl(Hi.prototype.request,t);return S.extend(s,Hi.prototype,t,{allOwnKeys:!0}),S.extend(s,t,null,{allOwnKeys:!0}),s.create=function(n){return Dl(Hs(e,n))},s}const Qe=Dl(xo);Qe.Axios=Hi;Qe.CanceledError=vi;Qe.CancelToken=Hu;Qe.isCancel=Rl;Qe.VERSION=Fl;Qe.toFormData=en;Qe.AxiosError=ye;Qe.Cancel=Qe.CanceledError;Qe.all=function(t){return Promise.all(t)};Qe.spread=Fu;Qe.isAxiosError=Du;Qe.mergeConfig=Hs;Qe.AxiosHeaders=Ut;Qe.formToJSON=e=>$l(S.isHTMLForm(e)?new FormData(e):e);Qe.HttpStatusCode=Bu;Qe.default=Qe;const Fs=Qe;class $t{static extend(){const t={};let s=!1,i=0;const n=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(s=arguments[0],i++);const o=function(r){for(const l in r)Object.prototype.hasOwnProperty.call(r,l)&&(s&&Object.prototype.toString.call(r[l])==="[object Object]"?t[l]=$t.extend(!0,t[l],r[l]):t[l]=r[l])};for(;i<n;i++){const r=arguments[i];o(r)}return t}}var bs=function(e,t){var s=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(n,o){this.nodes=(o||document).querySelectorAll(n)},this.each=function(n){if(this.nodes)for(var o=0;o<this.nodes.length;o++)n.call(this.nodes[o],o);else this.node&&n.call(this.node,0);return this},this.encapsulate=function(){};var i=function(n,o){n&&(Array.isArray(n)?n.forEach(function(r){i(r,o)}):n instanceof bs?o.append(n):typeof n=="object"&&o.append(new bs(n)))};this.create=function(){var n=this.document.createElement(this.settings.tag);if(this.node=n,this.settings.encapsulate===!0){var o=this.settings.encapsulate===!0?"open":this.settings.encapsulate;n.attachShadow({mode:o})}this.nodes=[n],this.settings.content&&i(this.settings.content,this)},this._specialProps=function(n,o){if(n==="tooltip")return this.node.dataset[n]=o,!0},this.setProps=function(){for(var n in this.settings.props)if(n==="dataset")for(var o in this.settings.props[n])this.node.dataset[o]=this.settings.props[n][o];else if(n==="style")for(var r in this.settings.props[n])this.node.style[r]=this.settings.props[n][r];else{var l=this.settings.props[n];this._specialProps(n,l)||(this.node[n]=l)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(n,o){return typeof o=="number"&&this.__.cssNumber.indexOf(n)===-1&&(o=o+"px"),o},this.css=function(n,o){if(typeof n=="string")if(typeof o<"u"){var r=this._normalizeCSSValue(n,o);this.each(function(){this.style[n]=r})}else return this.document.defaultView.getComputedStyle(this.node)[n];if(typeof n=="object")for(var l in n)this.each(function(){this.style[l]=s._normalizeCSSValue(l,n[l])});return this},this.dataset=function(n,o){return typeof o>"u"?this._active()[n]:(this.each(function(){this.dataset[n]=o}),this)},this.attr=function(n,o){return typeof o>"u"?this._active()[n]:(this.each(function(){this.setAttribute(n,o)}),this)},this.val=function(n){return typeof n>"u"?this._active().value:(this.each(function(){this.value=n}),this)},this.prop=function(n,o){var r=this._active();return typeof o>"u"?r[n]:(r[n]!==o&&(r[n]=o,this.trigger("propChange",[n,o])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(n){var o=mw.element("#r"+new Date().getTime());return this.each(function(){for(var r=this.querySelectorAll(n),l=0;l<r.length;l++)o.nodes.indexOf(r[l])===-1&&o.nodes.push(r[l])}),o},this.addClass=function(n){return n=n.trim().split(" "),this.each(function(){var o=this;n.forEach(function(r){o.classList.add(r)})})},this.toggleClass=function(n){return this.each(function(){this.classList.toggle(n.trim())})},this.removeClass=function(n){var o=Array.isArray(n);if(o)return this.each(function(){for(var l=0,a=n.length;l<a;l++)this.classList.remove(n[l])});n=n.trim();var r=n.split(" ");return r.length>1?this.removeClass(r):this.each(function(){this.classList.remove(n)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(n){return typeof n>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=n})},this.text=function(n,o){if(typeof n>"u")return this.node.textContent;typeof o>"u"&&(o=!0),o&&(n=this.document.createRange().createContextualFragment(n).textContent),this.node.innerHTML=n},this._asdom=function(n){return typeof n=="string"?this.document.createRange().createContextualFragment(n):n.node?n.node:n.nodes?n.nodes[n.nodes.length-1]:n},this.offset=function(){var n=this._active(),o=this.getWindow(),r=n.getBoundingClientRect();return r.offsetTop=r.top+o.pageYOffset,r.offsetBottom=r.bottom+o.pageYOffset,r.offsetLeft=r.left+o.pageXOffset,r},this.width=function(n){return n?this.css("width",n):this._active().offsetWidth},this.height=function(n){return n?this.css("height",n):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(n){n=n||"*";var o=this._active(),r=o.parentElement,l=mw.element();for(l.nodes=[];r;)r.matches(n)&&l.nodes.push(r),r=r.parentElement;return l},this.append=function(n){return n&&this.each(function(){this.append(s._asdom(n))}),this},this.before=function(n){return n&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(s._asdom(n),this)}),this},this.after=function(n){n&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(s._asdom(n),this.nextSibling)})},this.prepend=function(n){return n&&this.each(function(){this.prepend(s._asdom(n))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(n){this._disabled=n,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(n,o){return o=o||{},this.each(function(){this.dispatchEvent(new CustomEvent(n,{detail:o,cancelable:!0,bubbles:!0})),s._on[n]&&s._on[n].forEach(function(r){r.call(this,n,o)})}),this},this.get=function(n){return this.nodes[n]},this.wrap=function(n){var o=Eo(n);this.before(o),o.append(this)},this._on={},this.on=function(n,o){return n=n.trim().split(" "),n.forEach(function(r){s._on[r]||(s._on[r]=[]),s._on[r].push(o),s.each(function(){this.addEventListener(r,o,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=t||document,this.root instanceof bs&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,e=e||{},e.nodeName&&e.nodeType)this.nodes.push(e),this.node=e,e={},this._asElement=!0;else if(typeof e=="string")if(e.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(e)),e={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof bs)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new bs(this.settings.content));else{var n=this._asdom(e);this.nodes=[].slice.call(n.children),this._asElement=!0}e=e||{};var o={tag:"div",props:{}};this.settings=$t.extend({},o,e),!this._asElement&&(this.create(),this.setProps())},this.init()};const Eo=function(e,t){return new bs(e,t)};Eo.module=function(e,t){bs.prototype[e]=t};const Zn="mw-le-element";window.customElements&&!customElements.get(Zn)&&customElements.define(Zn,class extends HTMLElement{constructor(){super()}});const ve=(e,t)=>(e instanceof Object&&!e.nodeType&&(e=$t.extend({},e||{},{tag:e.tag||Zn})),Eo(e,t)),Mr=(e=null,t,s={},i)=>{if(!(!e||!t))return new Promise(async n=>{await e.ownerDocument.defaultView.mw.module.insert(e,t,s,"top",mw.liveEditState),n()})};class Iu extends Wt{constructor(){super(),mw.app.get("liveEdit").moduleHandle.on("targetChange",s=>{this.dispatch("targetChange",s)})}}class zu extends Wt{constructor(){super(),mw.app.get("liveEdit").elementHandle.on("targetChange",s=>{this.dispatch("targetChange",s)})}}class Vu extends Wt{constructor(){super(),mw.app.get("liveEdit").layoutHandleContent.on("targetChange",s=>{this.dispatch("targetChange",s)})}}class Uu extends Wt{constructor(){super(...arguments);As(this,"handle",{module:new Iu,element:new zu,layout:new Vu})}insertModule(s,i){const n=mw.app.get("liveEdit").handles.get("module").getTarget();return Mr(n,s,i)}insertLayout(s){const i=mw.app.get("liveEdit").handles.get("layout").getTarget();return Mr(i,"layouts",s)}}let Zs;const xi=document.documentElement;xi.matches?Zs="matches":xi.matchesSelector?Zs="matchesSelector":xi.mozMatchesSelector?Zs="mozMatchesSelector":xi.webkitMatchesSelector&&(Zs="webkitMatchesSelector");class jt{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(t,s){return t[Zs](s)}static isBlockLevel(t){if(!t||t.nodeType===3)return!1;var s=t.nodeName;if(typeof this._isBlockCache[s]<"u")return this._isBlockCache[s];var i=document.createElement(s);return this.fragment().appendChild(i),this._isBlockCache[s]=getComputedStyle(i).display==="block",this.fragment().removeChild(i),this._isBlockCache[s]}static firstBlockLevel(t){for(;t&&t.classList;){if(this.isBlockLevel(t))return t;t=t.parentNode}}static firstWithBackgroundImage(t){if(!t)return null;for(;t&&t.nodeName!=="BODY";){if(t.style.backgroundImage)return t;t=t.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(t,s){for(;t&&t.nodeName!=="BODY";){let i=0,n=s.length;for(;i<n;i++)if(t.classList.contains(s[i]))return!0;t=t.parentElement}return!1}static hasParentsWithClass(t,s){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.classList.contains(s))return!0;i=i.parentNode}return!1}}static hasParentWithId(t,s){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.id===s)return!0;i=i.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(t,s){for(;t&&t.nodeName!=="BODY";){let i=0,n=s.length;for(;i<n;i++)if(t.classList.contains(s[i]))return t;t=t.parentElement}return null}static firstParentOrCurrentWithTag(t,s){if(!(!t||!s)){s=typeof s!="string"?s:[s];for(var i=t;i&&i.nodeName!=="BODY";){if(s.indexOf(i.nodeName.toLowerCase())!==-1)return i;i=i.parentNode}return!1}}static index(t,s,i){i=i||t.tagName.toLowerCase(),s=s||t.parentNode;var n;s.constructor===[].constructor?n=s:n=s.querySelectorAll(i);for(var o=0,r=n.length;o<r;o++)if(t===n[o])return o}static firstParentOrCurrentWithClass(t,s){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.classList.contains(s))return i;i=i.parentNode}return!1}static firstParentOrCurrent(t,s){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.matches(s))return i;i=i.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(t,s){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(!i)return!1;if(this.hasAnyOfClasses(i,s))return i;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(t,s){let i=t;for(;i&&i.nodeName!=="BODY";){const n=i.classList.contains(s[0]),o=i.classList.contains(s[1]);if(n&&o)return!1;if(n)return!0;if(o)return!1;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,s){let i=t;for(;i&&i.nodeName!=="BODY";){const n=i.classList.contains(s[0]),o=i.classList.contains(s[1]);if(n&&o)return!1;if(n)return!0;if(o)return!1;i=i.parentNode}return!0}static hasAnyOfClasses(t,s){if(!t)return;let i=0,n=s.length;for(;i<n;i++)if(t.classList.contains(s[i]))return!0;return!1}static offset(t){if(t){var s=t.getBoundingClientRect(),i={top:s.top,left:s.left,width:s.width,height:s.height,bottom:s.bottom,right:s.right};return i.top+=t.ownerDocument.defaultView.scrollY,i.bottom+=t.ownerDocument.defaultView.scrollY,i.left+=t.ownerDocument.defaultView.scrollX,i.right+=t.ownerDocument.defaultView.scrollX,i}}static parentsOrder(t,s){for(var i=[],n={},o=s.length,r=0,l=-1;r<o;r++)n[s[r]]=-1;if(!t)return n;for(var a=t.parentNode;a&&a.nodeName!=="BODY";){for(l++,r=0;r<o;r++)a.classList.contains(s[r])&&i.indexOf(s[r])===-1&&(n[s[r]]=l,i.push(s[r]));a=a.parentNode}return n}}As(jt,"_isBlockCache",{}),As(jt,"_fragment");class ju{constructor(t){this.settings=t,this.tools=jt}isRow(t){return t.classList.contains(this.settings.rowClass)}isModule(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type!=="layouts"}isLayout(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts"}isInLayout(t){if(!t)return!1;for(t=t.parentNode;t&&t!==this.settings.document.body;){if(t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts")return!0;t=t.parentNode}}isElement(t){return t.classList.contains(this.settings.elementClass)}isEmptyElement(t){return t.classList.contains(this.settings.emptyElementClass)}isEdit(t){return t.classList.contains(this.settings.editClass)}isInEdit(t){var s=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t.parentNode,s)}isEditOrInEdit(t){return this.isEdit(t)||this.isInEdit(t)}isPlainText(t){return t.classList.contains(this.settings.plainElementClass)}getType(t){if(this.isEdit(t))return"edit";if(this.isElement(t))return"element";if(this.isModule(t))return"module";if(this.isLayout(t))return"layout"}}class Bl extends ju{constructor(t){super(t),this.settings=t,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM"],this.init()}isConfigurable(t){return this.isElement(t)||this.isModule(t)||this.isRow(t)}isEditableLayout(t){return this.this.isLayout(t)&&this.isInEdit(t)}canMoveModule(t){return this.isModule(t)&&this.isInEdit(t)}canAcceptByClass(t){return this.tools.hasAnyOfClasses(t,this.dropableElements())}canAcceptByTag(t){return!t||t.nodeType!==1?!1:this._tagsCanAccept.indexOf(t.nodeName)!==-1}allowDrop(t){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(t){return this.canAccept(t.parentNode)}canAccept(t){return!!(this.canAcceptByClass(t)&&this.isEditOrInEdit(t)&&this.allowDrop(t))}canReceiveElements(t){return this.isEdit(t)&&this.canAcceptByTag(t)}dropableElements(){return this._dropableElements}getIteractionTarget(t){return this.tools.firstWithAyOfClassesOnNodeOrParent(t,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(t,s){const i=this.getIteractionTarget(t);if(!i||!this.isEditOrInEdit(t)||!this.allowDrop(t))return null;const n={target:i,canInsert:!1,beforeAfter:!1};var o=this.settings.strictLayouts&&this.isLayout(s),r=this.settings.strict&&!this.isLayout(s)&&!this.isInLayout(i);if(r)return null;if(this.isEdit(i))n.canInsert=!o;else if(this.isElement(i)&&!o)this.canAcceptByTag(i)&&(n.canInsert=!o),n.beforeAfter=!0;else if(this.isModule(i)&&!o)if(this.canInsertBeforeOrAfter(i))n.beforeAfter=!0;else return null;else if(this.isLayout(i))if(this.canInsertBeforeOrAfter(i))n.beforeAfter=!0;else return null;return n}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let qu=-1;const Wu=(e,t)=>{if(!e||!t)return!1;const s=t.target;if(!s||s.nodeType!==1)return!1;e.pageX;const i=e.pageY,n=jt.offset(s),o={},r=15;if(qu===i||!t||!t.canInsert&&!t.beforeAfter)return!1;if(t.canInsert&&t.beforeAfter)if(i>=n.top-r&&i<=n.top+r)o.position="top",o.action="before";else if(i>=n.top+r&&i<=n.top+n.height/2)o.position="top",o.action="prepend";else if(i>=n.top+n.height/2&&i<=n.bottom-r)o.position="bottom",o.action="append";else if(i>=n.top+n.height/2&&i>=n.bottom-r)o.position="bottom",o.action="after";else return!1;else if(t.beforeAfter)if(i>=n.top-r&&i<=n.top+n.height/2)o.position="top",o.action="before";else if(i>=n.top+n.height/2&&i<=n.bottom+r)o.position="bottom",o.action="after";else return!1;else if(t.canInsert)if(i>=n.top-r&&i<=n.top+n.height/2)o.position="top",o.action="prepend";else if(i>=n.top+n.height/2&&i<=n.bottom+r)o.position="bottom",o.action="append";else return!1;return o},Ku=function(e,t){var s={handle:null,element:null,document,helper:!0},i=this,n={};this.on=function(r,l){n[r]?n[r].push(l):n[r]=[l]},this.dispatch=function(r,l){n[r]&&n[r].forEach(function(a){a.call(this,l)})};var o=function(r){i.settings.document.body.style.scrollBehavior="smooth",i.settings.document.defaultView.scrollTo(0,i.settings.document.defaultView.scrollY+r),i.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=$t.extend({},s,e),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(r){this.element=ve(r).get(0),this.settings.handle||(this.settings.handle=this.settings.element),this.handle=this.settings.handle,this.handle.attr("draggable","true")},this.setTargets=function(r){this.targets=ve(r)},this.addTarget=function(r){this.targets.push(r)},this.init=function(){this.config(),this.draggable()},this.helper=function(r){return this._helper||(this._helper=ve().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),r==="create"?(this._helper.style.top=r.pageY+"px",this._helper.style.left=r.pageX+"px",this._helper.style.width=i.element.offsetWidth+"px",this._helper.style.height=i.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"):r==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&r&&(this._helper.style.top=r.pageY+"px",this._helper.style.left=r.pageX+"px",this._helper.style.maxWidth=i.settings.document.defaultView.innerWidth-r.pageX-40+"px",this.settings.document.documentElement.classList.add("le-dragging")),this._helper},this.isDragging=!1,this.dropableService=new Bl(t),this.dropPosition=Wu,this.draggable=function(){ve(this.settings.target).on("dragleave",function(r){i.dropIndicator.hide()}),ve(this.settings.target).on("dragover",function(r){if(i.target=null,i.action=null,r.target!==i.element||!i.element.contains(r.target)){var l=i.dropableService.getTarget(r.target,i.element);if(l&&l!==i.element){const a=i.dropPosition(r,l);a?(i.target=l.target,i.action=a.action,i.dropIndicator.position(i.target,a.action+"-"+a.position)):i.dropIndicator.hide()}else i.dropIndicator.hide();i.isDragging&&(i.dispatch("dragOver",{element:i.element,event:r}),r.preventDefault())}}).on("drop",function(r){i.isDragging&&(r.preventDefault(),i.target&&i.action&&ve(i.target)[i.action](i.element),i.dropIndicator.hide(),i.dispatch("drop",{element:i.element,event:r})),i.dropIndicator.hide()}),this.handle.on("dragstart",function(r){i.isDragging=!0,i.element.id||(i.element.id="mw-element-"+new Date().getTime()),i.element.classList.add("mw-element-is-dragged"),r.dataTransfer.setData("text",i.element.id),r.dataTransfer.effectAllowed="move",i.helper("create"),i.dispatch("dragStart",{element:i.element,event:r})}).on("drag",function(r){var l=90,a=5;r.clientY<l&&o(-a),r.clientY>innerHeight-(l+(this._helper?this._helper.offsetHeight+10:0))&&o(a),r.dataTransfer.dropEffect="copy",i.dispatch("drag",{element:i.element,event:r}),i.helper(r)}).on("dragend",function(r){i.isDragging=!1,i.element.classList.remove("mw-element-is-dragged"),i.helper("remove"),i.dispatch("dragEnd",{element:i.element,event:r})})},this.init()},Bn=function(e){var t={},s=this;this.settings=$t.extend({},t,e);const i={};this.on=(l,a)=>{i[l]?i[l].push(a):i[l]=[a]},this.dispatch=(l,a)=>{i[l]&&i[l].forEach(d=>{d.call(this,a)})};var n=!0,o=null;this.getTarget=function(){return o},this.isVisible=function(){return n},this.show=function(){n=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){n=!1,this.wrapper.addClass("mw-handle-item-hidden")};let r=null;this.setContent=function(l){r&&r.remove(),r=l,this.wrapper.append(r)},this.initDraggable=function(){this.draggable=new Ku({handle:this.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},e),this.draggable.on("dragStart",function(){s.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){s.wrapper.removeClass("mw-handle-item-dragging")})},this.set=function(l){if(!l){o=null;return}var a=jt.offset(l);this.wrapper.css({top:a.top,left:a.left,width:a.width,height:a.height}),this.show(),this.draggable.setElement(l),o!==l&&(o=l,this.dispatch("targetChange",l))},this.createHandle=function(){this.settings.handle?this.handle=this.settings.handle:(this.handle=ve({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))},this.createWrapper=function(){this.wrapper=ve({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),ve(document.body).on("mouseup touchend",function(){s.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide()},Yu=function(e){e=e||{},this.tools=jt;var t=this,s={exceptions:["mw-handle-item"]};this.settings=$t.extend({},s,e),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var i=20,n=function(l){return l%5>=2.5?l/5*5+5:l/5*5},o=function(l,a){l=n(l),a=n(a);for(var d=[],f=l-i,h=l+i,v=a-i,k=a+i;f<h;f+=5)for(;v<=k;v+=5)d.push([f,v]);return d},r=function(l,a){l&&l.parentElement&&a.indexOf(l)===-1&&t.body!==l&&a.push(l)};this.fromEvent=function(l){return t.tools.hasAnyOfClassesOnNodeOrParent(l.target,this.settings.exceptions)?[]:(t.document._test||(t.document._test=document.createElement("div"),t.document._test.style.position="absolute",t.document._test.style.left="10px",t.document._test.style.background="red",t.document._test.style.width="10px",t.document._test.style.height="10px",t.document.body.appendChild(t.document._test)),t.document._test.style.top=l.pageY+"px",this.fromPoint(l.pageX,l.pageY))},this.fromPoint=function(l,a){var d=[];t.document.defaultView.frameElement&&(a-=t.document.defaultView.scrollY);var f=t.document.elementFromPoint(l,a);if(!f)return[];r(f,d);var h=o(l,a);return h.forEach(function(v){r(t.document.elementFromPoint(v[0],v[1]),d)}),d}},Ju=function(e){return jt.matches(e,'.row,[class*="row-"]')},Xu=function(e){return jt.matches(e,'.col,[class*="col-"]')};let Gt;const Or=function(){return Gt||(Gt=document.createElement("div"),Gt.style.visibility="hidden",Gt.style.position="absolute",Gt.style.width="1px",Gt.style.height="1px",document.body.appendChild(Gt)),Gt},Ci={},Zu=function(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof Ci[t]<"u")return Ci[t];var s=document.createElement(t);return Or().appendChild(s),Ci[t]=getComputedStyle(s).display==="block",Or().removeChild(s),Ci[t]},Gu=(e,t,s)=>{e=e||"*";for(var i=t.querySelectorAll(e),n=0,o=[];n<i.length;n++)!Xu(i[n])&&!Ju(i[n])&&!s.elementAnalyzer.isEdit(i[n])&&Zu(i[n])&&o.push(i[n]);return o},Qu=e=>{const{backgroundImageHolder:t,editClass:s,moduleClass:i,elementClass:n,allowDrop:o}=e.settings,r=e.root;for(var l=r.querySelectorAll("."+s+"."+t+", ."+s+" ."+t+", ."+s+'[style*="background-image"], .'+s+' [style*="background-image"]'),a=r.querySelectorAll("."+i+e.settings.unEditableModules.join(",."+i)),d=r.querySelectorAll("."+s),f=0,h=0,v=0;f<l.length;f++){var k=l[f];e.elementAnalyzer.isInEdit(k)&&(mw.tools.hasClass(k,i)||mw.tools.addClass(k,s),k.style.backgroundImage||(k.style.backgroundImage="none"))}for(;h<a.length;h++)a[f].classList.remove(i);for(;v<d.length;v++){for(var b=Gu(":not(."+n+")",d[v],e),_=0,E=d[v].querySelectorAll("."+o),P=0;P<E.length;P++)E[P].classList.add(n);for(;_<b.length;_++)b[_].classList.contains(i)||e.elementAnalyzer.isInEdit(b[_])&&b[_].classList.add(n)}},ed=function(e){this.handles=e,this.dragging=!1;var t=this;this.get=function(s){return this.handles[s]},this.set=function(s,i){this.get(s).set(i)},this.hide=function(s){s&&this.handles[s]?this.handles[s].hide():this.each(function(i,n){n.hide()})},this.hideAllBut=function(s){this.each(function(i,n){i!==s&&n.hide()})},this.show=function(s){s&&this.handles[s]?this.handles[s].show():this.each(function(i,n){n.show()})},this.each=function(s){if(s){var i;for(i in this.handles)s.call(t,i,this.handles[i])}},this.init=function(){this.each(function(s,i){i.draggable.on("dragStart",function(){t.dragging=!0,t.hideAllBut(s)}),i.draggable.on("dragEnd",function(){t.dragging=!1,i.show()})})},this.init()},td=function(e){e=e||{};const t={template:"default"};let s={};this.settings=$t.extend({},t,e),this._indicator=null;const i={};this.on=function(a,d){i[a]?i[a].push(d):i[a]=[d]},this.dispatch=function(a,d){i[a]&&i[a].forEach(function(f){f.call(this,d)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,s={})},this.show=function(){console.log(this.visible),this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const n=["before-top","prepend-top","after-bottom","append-bottom"],o="mw-drop-indicator-position-",r=n.map(function(a){return o+a});let l=null;this.position=function(a,d){if(!(!a||!d)&&!(s.target===a&&s.position===d)){s.target=a,s.position=d,l!==d&&(this._indicator.removeClass(r),l=d,this._indicator.addClass(o+d));var f=jt.offset(a);this._indicator.css({height:f.height,left:f.left,top:f.top,width:f.width}),this.show()}},this.make=function(){this._indicator=ve(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},sd=(e,t,s)=>{!e||!t||(e=e.isMWElement?e.get(0):e,e.dataset.tooltip=t,e.title=t,e.dataset.tooltipposition=s||"top-center")},ri=function(e){this.options=e||{};var t=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=ve({props:{className:"mw-le-handle-menu",id:t.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=ve({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var s,i,n,o=function(){s=ve({props:{className:"mw-le-handle-menu-title"}}),i=ve({props:{className:"mw-le-handle-menu-title-text"}}),n=ve({props:{className:"mw-le-handle-menu-title-icon"}}),s.append(i),s.append(n),t.root.prepend(s),t.title=s},r=null;this.getTarget=function(){return r},this.setTarget=function(l){r=l;for(var a=0;a<this.buttons.length;a++)this.buttons[a].config.onTarget&&this.buttons[a].config.onTarget(l,this.buttons[a].button.get(0),t.options.rootScope)},this.setTitle=function(l,a){i.html(l||""),n.html(a||"")},this.buttons=[],this.buildButtons=function(l,a){a=a||this.buttonsHolder,l=l||this.options.buttons,l.forEach(function(d){a.append(t.button(d))})},this.button=function(l){var a=ve({props:{className:"mw-le-handle-menu-button"+(l.className?" "+l.className:"")}}),d={props:{className:"mw-le-handle-menu-button-content"}},f=ve(d);if(l.title&&sd(f,l.title),l.icon){var h=ve({props:{className:"mw-le-handle-menu-button-icon",innerHTML:l.icon}});f.append(h)}if(l.text){var v=ve({props:{className:"mw-le-handle-menu-button-text",innerHTML:l.text}});f.append(v)}if(a.append(f),this.buttons.push({button:a,config:l}),l.menu){var k=ve({props:{className:"mw-le-handle-menu-button-sub-menu"}});a.append(k),t.buildButtons(l.menu,k),a.on("click",function(){this.classList.toggle("sub-menu-active")})}else typeof l.action=="function"&&a.on("click",function(){l.action(t.getTarget(),a.get(0),{dialog:t.options.rootScope.dialog,tooltip:t.options.rootScope.tooltip})});return a},this.init=function(){this.create(),o(),this.setTitle(t.options.title,t.options.icon),this.buildButtons(),this.hide()},this.init()},id=function(e){this.root=ve({props:{id:"mw-handle-item-element-root"}}),this.menu=new ri({id:"mw-handle-item-element-menu",title:"Element",buttons:[{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,s){},action:function(t){e.dialog({})}},{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(t){}}]}),this.menu.show(),this.root.append(this.menu.root)},nd=function(e){this.root=ve({props:{id:"mw-handle-item-module-root",contentEditable:!1}});var t=new ri({id:"mw-handle-item-element-menu-default",title:"Module",rootScope:e,buttons:[{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',action:()=>{const s=mw.app.get("liveEdit").handles.get("module").getTarget();mw.app.editor.dispatch("onModuleSettingsRequest",s);var i=s.dataset.type||s.getAttribute("type");i=i.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+i,s)}}]});this.menu=new ri({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,buttons:[]}),this.menu.show(),t.show(),this.root.append(this.menu.root),this.root.append(t.root)},od=(e,t)=>{const s=ve({props:{className:"le-dialog-footer"}}),i=ve({props:{className:"le-btn le-btn-primary le-dialog-footer-ok",innerHTML:e||"OK"}}),n=ve({props:{className:"le-btn le-dialog-footer-cancel"}});return s.append(n),s.append(i),{ok:i,cancel:n,footer:s}};var is,hi,Gn;class Il{constructor(t){pt(this,hi);pt(this,is,{});t=t||{};const s={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},s,t),this.build(),setTimeout(i=>this.open())}on(t,s){G(this,is)[t]?G(this,is)[t].push(s):G(this,is)[t]=[s]}dispatch(t,s){G(this,is)[t]&&G(this,is)[t].forEach(i=>{i.call(this,s)})}build(){this.root=ve({props:{className:`le-dialog ${typeof this.settings.position=="string"?this.settings.position:""}`}});var t=ve({props:{className:"le-dialog-close"}});t.on("click",()=>{this.remove()}),this.container=ve({props:{className:"le-dialog-container"},content:this.settings.content}),this.root.append(t),this.root.append(this.container),this.settings.footer&&this.root.append(this.settings.footer.root||this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this.settings.closeOnEscape&&this.settings.document.addEventListener("keydown",wt(this,hi,Gn)),this.settings.overlay&&this.overlay()}open(){if(this.settings.position.nodeName&&this.settings.position.ownerDocument===this.settings.document){var t=this.settings.position;t.ownerDocument;var s=t.ownerDocument.defaultView,i=t.getBoundingClientRect(),n=i.top+s.scrollY,o=i.left+t.offsetWidth+s.scrollX,r=this.root.get(0);n+r.offsetHeight>s.innerHeight+s.scrollY&&(n-=n+r.offsetHeight-(s.innerHeight+s.scrollY)),o+r.offsetWidth>s.innerWidth&&(o-=o+r.offsetWidth-s.innerWidth),this.root.css({top:n,left:o,position:this.settings.mode})}this.root.addClass("le-dialog-opened")}remove(){this.root.on("transitionend",()=>{this.root.remove(),this.overlay&&this.overlay.remove()}),this.root.removeClass("le-dialog-opened"),this.settings.closeOnEscape&&this.settings.document.removeEventListener("keydown",wt(this,hi,Gn)),this.dispatch("close")}overlay(){this.overlay=ve({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}is=new WeakMap,hi=new WeakSet,Gn=function(t){(t.key==="Escape"||t.keyCode===27)&&this.remove()};const rd=function(e,t){const s=od(),i=new Il({content:e,footer:s,position:"centered"});return s.cancel.on("click",function(){i.remove()}),s.ok.on("click",function(){t&&t.call(),i.remove()}),i},ld=function(e){this.root=ve({props:{id:"mw-handle-item-layout-root"}});const t={};this.on=(s,i)=>{t[s]?t[s].push(i):t[s]=[i]},this.dispatch=(s,i)=>{t[s]&&t[s].forEach(n=>{n.call(this,i)})},this.menu=new ri({id:"mw-handle-item-layout-menu",title:e.lang("Layout"),rootScope:e,buttons:[{title:e.lang("Settings"),text:"",icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 13.3 15.9" xml:space="preserve"><path d="M8.2,2.4L11,5.1l-8.2,8.2H0v-2.8L8.2,2.4z M11.8,4.3L9,1.6l1.4-1.4C10.5,0.1,10.7,0,10.9,0c0.2,0,0.4,0.1,0.5,0.2l1.7,1.7c0.1,0.1,0.2,0.3,0.2,0.5S13.3,2.8,13.1,3L11.8,4.3z"/><rect y="14.5" width="12" height="1.4"/></svg>',className:"mw-handle-insert-button",menu:[{title:e.lang("Add something"),text:e.lang("Add something"),icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" version="1.1" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button"},{title:e.lang("Settings1212"),text:"Do alert",className:"mw-handle-insert-button"}]},{title:e.lang("Clone"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>',className:"mw-handle-insert-button",action:function(s,i,n){var o=document.createElement("div");o.innerHTML=s.outerHTML,ve("[id]",o).each(function(){this.id="le-id-"+new Date().getTime()}),ve(s).after(o.innerHTML);var r=s.nextElementSibling;mw.reload_module(r,function(){n.statemanager.record({target:mw.tools.firstParentWithClass(s,"edit"),value:parent.innerHTML})})}},{title:e.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(s,i,n){s.nextElementSibling===null?i.style.display="none":i.style.display=""},action:function(s,i,n){n.handles.get("layout").hide();var o=s.nextElementSibling;if(o){var r=s.getBoundingClientRect(),l=o.getBoundingClientRect(),a=0;r.top<l.top&&(a=-(r.top-l.top)),s.classList.add("mw-le-target-to-animate"),o.classList.add("mw-le-target-to-animate"),s.style.transform="translateY("+a+"px)",o.style.transform="translateY("+-a+"px)",setTimeout(function(){o.parentNode.insertBefore(s,o.nextSibling),s.classList.remove("mw-le-target-to-animate"),o.classList.remove("mw-le-target-to-animate"),s.style.transform="",o.style.transform=""},300)}}},{title:e.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(s,i,n){s.previousElementSibling===null?i.style.display="none":i.style.display=""},action:function(s,i,n){n.handles.get("layout").hide();var o=s.previousElementSibling;if(o){var r=s.getBoundingClientRect(),l=o.getBoundingClientRect(),a=0;r.top>l.top&&(a=-(r.top-l.top)),s.classList.add("mw-le-target-to-animate"),o.classList.add("mw-le-target-to-animate"),s.style.transform="translateY("+a+"px)",o.style.transform="translateY("+-a+"px)",setTimeout(function(){o.parentNode.insertBefore(s,o),s.classList.remove("mw-le-target-to-animate"),o.classList.remove("mw-le-target-to-animate"),s.style.transform="",o.style.transform=""},300)}}},{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path  d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(s,i,n){rd("Are you sure",function(){s.remove()})}}]}),this.addButtons=function(){var s="Add Layout",i=n=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+n.charAt(0).toUpperCase()+n.slice(1))};this.plusTop=ve({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:e.lang(s)}}),this.plusBottom=ve({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:e.lang(s)}}),this.plusTop.on("click",function(){i("top")}),this.plusBottom.on("click",function(){i("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.menu.show(),this.addButtons(),this.root.append(this.menu.root)},Nr={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},ad=(e,t)=>((!t||!Nr[t])&&(t="en"),Nr[t][e]||e);class zl{constructor(t){const s=this,i={};this.on=(v,k)=>{i[v]?i[v].push(k):i[v]=[k]},this.dispatch=(v,k)=>{i[v]&&i[v].forEach(b=>{b.call(this,k)})},this.paused=!1;var n={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=$t.extend({},n,t),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(v){return ad(v,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new Bl(this.settings),this.dropIndicator=new td(this.settings);const o=new id(this),r=new nd(this),l=new ld(this);this.elementHandleContent=o,this.moduleHandleContent=r,this.layoutHandleContent=l,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.dialog=function(v){v||(v={});var k={document:window.top.document,position:r.menu.getTarget(),mode:"absolute"};s.pause();const b=new Il($t.extend({},k,v));return b.on("close",function(){s.play()}),b};var a=this.elementHandle=new Bn({...this.settings,dropIndicator:this.dropIndicator,content:o.root,handle:o.menu.title,document:this.settings.document,stateManager:this.settings.stateManager});a.on("targetChange",function(v){o.menu.setTarget(v);var k="";v.nodeName==="P"?k=s.lang("Paragraph"):/(H[1-6])/.test(v.nodeName)?k=s.lang("Title")+" "+v.nodeName.replace(/^\D+/g,""):v.nodeName==="IMG"||v.nodeName==="IMAGE"?k=s.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(v.nodeName)?k=s.lang("Title "+v.nodeName.replace("H","")):k=s.lang("Text"),o.menu.setTitle(k)}),this.moduleHandle=new Bn({...this.settings,dropIndicator:this.dropIndicator,content:r.root,handle:r.menu.title,document:this.settings.document,stateManager:this.settings.stateManager});var d=this.moduleHandle;this.getModuleQuickSettings=v=>new Promise(k=>{k(mw.quickSettings[v]),this.dispatch("moduleQuickSettings",{module:v})}),d.on("targetChange",function(v){s.getModuleQuickSettings(v.dataset.type).then(function(k){r.menu.root.remove(),r.menu=new ri({id:"mw-handle-item-element-menu",title:v.dataset.type,rootScope:s,buttons:k?k.mainMenu||[]:[],data:{target:v}}),r.menu.setTarget(v),r.menu.show(),r.root.append(r.menu.root)})}),this.layoutHandle=new Bn({...this.settings,dropIndicator:this.dropIndicator,content:l.root,handle:l.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var f=this.layoutHandle,h=s.lang("Layout");l.menu.setTitle(h),f.on("targetChange",function(v){l.menu.setTarget(v),l.menu.setTitle(h),s.elementAnalyzer.isEditOrInEdit(v)?(l.plusTop.show(),l.plusBottom.show()):(l.plusTop.hide(),l.plusBottom.hide())}),l.handle=f,r.handle=d,o.handle=a,this.hoverHandle=this.handles=new ed({element:a,module:d,layout:f}),this.observe=new Yu(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}init(){this.settings.mode==="auto"&&Qu(this);const t=i=>{const n=this.observe.fromEvent(i),o=n[0];if(o){const r=this.elementAnalyzer.getType(o);r&&r!=="edit"&&(this.handles.set(r,n[0]),r==="element"?this.handles.hide("module"):r==="module"&&this.handles.hide("element"))}};let s;s="click",ve(this.root).on(s,i=>{this.paused||t(i)})}}globalThis.LiveEdit=zl;const cd=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:inline-block}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:9;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;background-color:#7775757d;pointer-events:none}.mw-le-handle-menu{position:absolute;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;border-radius:7px;border:1px solid transparent;padding:3px 12px;display:inline-flex;align-items:center;background-color:#fff;pointer-events:all;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;position:absolute;top:-65px;left:-2px}.mw-le-handle-menu *{vertical-align:middle}#mw-handle-item-element-menu{top:-65px;left:-2px}#mw-handle-item-layout-menu{top:7px;right:7px}#mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#000}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#000}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:inline-flex;align-items:center;justify-content:center;padding:5px;-webkit-user-select:none;-moz-user-select:none;user-select:none;height:auto;cursor:grab;background-color:#0078ff;color:#fff}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#fff;border-radius:20px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#e9e9e9}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizer{position:absolute}.mw-le-resizer-r{cursor:col-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:row-resize;height:5px;left:0;width:100%}mw-le-element{display:block}mw-le-element{line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;font-family:Verdana,sans-serif;box-sizing:border-box}.edit,.element,.module{margin-top:20px;padding-top:20px;min-height:100px}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}
`;class ud extends Wt{constructor(){super()}onRegister(){mw.app.editor.on("onModuleSettingsChanged",t=>{mw.app.canvas.getWindow().mw.reload_module("#"+t.moduleId)}),mw.app.editor.on("onModuleSettingsRequest",t=>{var s=t.id,i=t.getAttribute("data-type");mw.dialogIframe({url:route("live_edit.module_settings")+"?id="+s+"&type="+i,width:300,height:500,draggable:!0,template:"mw_modal_simple",title:"Module settings",id:"btn-quick-setting-dialog-"+s})})}}let dd=class extends Wt{constructor(){super()}onRegister(){}reloadStylesheet(){alert("reloadStylesheet todo")}};const fd=()=>{mw.app.get("canvas").getFrame().parentElement;const t=mw.app.get("canvas").getDocument(),s=t.createElement("style");s.textContent=cd,t.head.prepend(s);const i=new zl({root:t.body,strict:!1,mode:"auto",document:t});i.on("insertLayoutRequest",function(){mw.app.editor.dispatch("insertLayoutRequest",mw.app.get("liveEdit").handles.get("layout").getTarget())}),mw.app.call("onLiveEditReady"),mw.app.register("liveEdit",i),mw.app.register("state",mw.liveEditState),mw.app.register("editor",Uu),mw.app.register("moduleSettings",ud),mw.app.register("templateSettings",dd),xc(".mw-handle-item").resizable({edges:{top:!0,left:!0,bottom:!0,right:!0},listeners:{move:function(n){let{x:o,y:r}=n.target.dataset;o=(parseFloat(o)||0)+n.deltaRect.left,r=(parseFloat(r)||0)+n.deltaRect.top,Object.assign(n.target.style,{width:`${n.rect.width}px`,height:`${n.rect.height}px`,transform:`translate(${o}px, ${r}px)`}),Object.assign(n.target.dataset,{x:o,y:r})}}})};var Tt,ns,xs,pi,Qn,mi,eo,Gi,Ul;class Vl{constructor(t={}){pt(this,pi);pt(this,mi);pt(this,Gi);pt(this,Tt,null);pt(this,ns,{});As(this,"selectedCategory","");pt(this,xs,[]);As(this,"root",null);const s={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},s,t),this.document=this.settings.document}on(t,s){G(this,ns)[t]?G(this,ns)[t].push(s):G(this,ns)[t]=[s]}dispatch(t,s){G(this,ns)[t]&&G(this,ns)[t].forEach(i=>{i.call(this,s)})}getData(){return G(this,Tt)}setData(t,s=!0){$n(this,Tt,t);let i=0,n=G(this,Tt).length;for(;i<n;i++)typeof G(this,Tt)[i].categories=="string"&&(G(this,Tt)[i].categories=G(this,Tt)[i].categories.split(",").map(o=>o.trim()));s&&this.dispatch("dataChanged",G(this,Tt))}prepareCategories(){const t=[],s=this.getData();let i=0,n=s.length;for(;i<n;i++){let r=s[i].categories||"",l=0,a=r.length;for(;l<a;l++){const d=r[l].trim();t.indexOf(d)===-1&&t.push(d)}}t.sort(),this.categories=t}createCategoriesMenu(){const t=this.document.createElement("ul");this.prepareCategories(),t.className="modules-list-categories",t.innerHTML=this.categories.map(s=>`<li data-category="${s}">${s}</li>`).join(""),t.innerHTML=`<li data-category="">All categories</li> ${t.innerHTML}`,t.addEventListener("click",s=>{s.target.nodeName==="LI"&&this.selectCategory(s.target.dataset.category)}),this.categoriesNavigation=t,this.rootShadow.appendChild(t),this.on("categorySelect",s=>{const i=t.querySelectorAll("[data-category]");for(const n of i)n.classList[n.dataset.category===s?"add":"remove"]("active")})}selectCategory(t=""){this.selectedCategory=t,this.search(t),this.dispatch("categorySelect",t)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let t=document.createElement("style");t.textContent=this.settings.css,this.rootShadow.appendChild(t)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let s=0,i=t.length;const n={miscellaneous:wt(this,mi,eo).call(this,"miscellaneous")};for(;s<i;s++)(t[s].categories||["miscellaneous"]).forEach(r=>{n[r]||(n[r]=wt(this,mi,eo).call(this,r));const l=wt(this,pi,Qn).call(this,t[s]);G(this,xs).push(l),n[r].appendChild(l),n[r].__$hasNodes=!0});for(const o in n)n[o].__$hasNodes&&this.modulesList.appendChild(n[o]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let s=0,i=t.length;for(;s<i;s++){const n=wt(this,pi,Qn).call(this,t[s]);G(this,xs).push(n),this.modulesList.appendChild(n)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(t){t.nodeName&&(t.style.display="none")}showItem(t){t.nodeName&&(t.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",t=>this.search(void 0,this.searchField.value)),this.on("categorySelect",t=>{this.searchField.value=""})}async search(t="",s=""){if(this.settings.searchMode==="local")return wt(this,Gi,Ul).call(this,t,s)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(t=>{t(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(t=>{t(this)})}}Tt=new WeakMap,ns=new WeakMap,xs=new WeakMap,pi=new WeakSet,Qn=function(t){t.locked=t.description.includes("a");const s=this.document.createElement("div");return s.className="modules-list-block-item modules-list-block-item-is-locked-"+t.locked,s.__$data=t,s.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${t.icon||t.screenshot||t.image})"></div>
            <div class="modules-list-block-item-title">${t.name||t.title}</div>
            <div class="modules-list-block-item-description">${t.description}</div>
            ${t.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,s.addEventListener("click",i=>{i.stopPropagation(),s.__$data.locked?this.dispatch("lockedModuleSelected",{data:t,element:s}):this.dispatch("moduleSelected",{data:t,element:s})}),s.$data=t,s},mi=new WeakSet,eo=function(t){const s=this.document.createElement("div");return s.className="modules-list-block-category-section",s.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+t+"</h5></div>",s.__$hasNodes=!1,s},Gi=new WeakSet,Ul=async function(t,s){return t&&(t=t.trim().toLowerCase()),s&&(s=s.trim().toLowerCase()),new Promise(i=>{let n=0,o=G(this,xs).length,r=0;for(;n<o;n++){const l=G(this,xs)[n],a=l.$data;if(t&&a.categories.indexOf(t)===-1){this.hideItem(l);continue}if(s&&(a.name||a.title).toLowerCase().indexOf(s)===-1){this.hideItem(l);continue}this.showItem(l),r++}console.log(s,t),this.modulesListNoResultsNode.style.display=r===0?"":"none",i()})};const Fi=[],jl=function(e){Fi.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+e}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",t=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(e){(e.key==="Escape"||e.keyCode===27)&&Fi.length>0&&(Fi[0].remove(),Fi.splice(0,1))});var to,Pr=function(e){var t=new Vl({data:to});t.create().then(function(){var s=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),i=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),n=mw.element({props:{className:"mw-le-layouts-dialog-col"}});s.append(i),s.append(n),mw.element(t.root).append(s),i.append(t.searchBlock);var o=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});i.append(o),i.append(t.categoriesNavigation),n.append(t.modulesList),e.append(t.root)})};const hd=()=>{var e=new jl("mw-le-layouts-dialog"),t=e.dialog;if(to){Pr(t);return}mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(s){return s.json()}).then(function(s){to=s,Pr(t),mw.spinner({element:t.get(0),decorate:!0}).remove()})};var so,$r=function(e){var t=new Vl({data:so});t.createCategorized().then(function(){e.append(t.root)})};const pd=()=>{var e=new jl("mw-le-modules-dialog"),t=e.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var s=mw.$(this).attr("data-module-name"),i={class:this.className};s==="layout"&&(i.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,s,i,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),so?$r(t):(mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(s){return s.json()}).then(function(s){so=s,$r(t),mw.spinner({element:t.get(0),decorate:!0}).remove()}))},md={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return pd()},insertLayout:function(){return hd()}},gd={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await Fs.get(route("api.module.list")+"?layout_type=module").then(e=>{this.modulesListData=e.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(e){if(this.modulesSkinsData[e])return this.modulesSkinsData[e];if(await Fs.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.modulesSkinsData[e]=t.data}),this.modulesSkinsData[e])return this.modulesSkinsData[e]}},vd={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await Fs.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(e=>{this.layoutsListData=e.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var e="layouts";if(this.layoutSkinsData[e])return this.layoutSkinsData[e];if(await Fs.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.layoutSkinsData[e]=t.data}),this.layoutSkinsData[e])return this.layoutSkinsData[e]}};class bd extends Wt{constructor(){super()}onRegister(){document.addEventListener("keydown",t=>{(t.key==="Enter"||t.keyCode===13)&&this.dispatch("enter",t),(t.key==="Escape"||t.keyCode===27)&&this.dispatch("escape",t),(t.key==="Backspace"||t.keyCode===8)&&this.dispatch("backspace",t),(t.key==="Delete"||t.keyCode===46)&&this.dispatch("delete",t),t.ctrlKey&&t.keyCode===83&&this.dispatch("ctrl+s",t),t.ctrlKey&&t.keyCode===90&&this.dispatch("ctrl+z",t),t.ctrlKey&&t.keyCode===89&&this.dispatch("ctrl+y",t)})}}mw.app=new Cc;const ql=new Ec,yd=document.getElementById("live-edit-frame-holder");mw.app.register("canvas",ql);mw.app.register("commands",md);mw.app.register("modules",gd);mw.app.register("layouts",vd);mw.app.register("keyboard",bd);ql.mount(yd);mw.app.canvas.on("liveEditBeforeLoaded",function(){mw.app.dispatch("init")});mw.app.canvas.on("liveEditCanvasLoaded",()=>{mw.app.dispatch("ready")});function Lo(e,t){const s=Object.create(null),i=e.split(",");for(let n=0;n<i.length;n++)s[i[n]]=!0;return t?n=>!!s[n.toLowerCase()]:n=>!!s[n]}function St(e){if(ne(e)){const t={};for(let s=0;s<e.length;s++){const i=e[s],n=Ze(i)?xd(i):St(i);if(n)for(const o in n)t[o]=n[o]}return t}else{if(Ze(e))return e;if(De(e))return e}}const wd=/;(?![^(]*\))/g,_d=/:([^]+)/,kd=/\/\*.*?\*\//gs;function xd(e){const t={};return e.replace(kd,"").split(wd).forEach(s=>{if(s){const i=s.split(_d);i.length>1&&(t[i[0].trim()]=i[1].trim())}}),t}function ut(e){let t="";if(Ze(e))t=e;else if(ne(e))for(let s=0;s<e.length;s++){const i=ut(e[s]);i&&(t+=i+" ")}else if(De(e))for(const s in e)e[s]&&(t+=s+" ");return t.trim()}const Cd="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Sd=Lo(Cd);function Wl(e){return!!e||e===""}const it=e=>Ze(e)?e:e==null?"":ne(e)||De(e)&&(e.toString===Xl||!ue(e.toString))?JSON.stringify(e,Kl,2):String(e),Kl=(e,t)=>t&&t.__v_isRef?Kl(e,t.value):Os(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((s,[i,n])=>(s[`${i} =>`]=n,s),{})}:Yl(t)?{[`Set(${t.size})`]:[...t.values()]}:De(t)&&!ne(t)&&!Zl(t)?String(t):t,Fe={},Ms=[],Et=()=>{},Ed=()=>!1,Ld=/^on[^a-z]/,nn=e=>Ld.test(e),Ao=e=>e.startsWith("onUpdate:"),rt=Object.assign,To=(e,t)=>{const s=e.indexOf(t);s>-1&&e.splice(s,1)},Ad=Object.prototype.hasOwnProperty,be=(e,t)=>Ad.call(e,t),ne=Array.isArray,Os=e=>on(e)==="[object Map]",Yl=e=>on(e)==="[object Set]",ue=e=>typeof e=="function",Ze=e=>typeof e=="string",Mo=e=>typeof e=="symbol",De=e=>e!==null&&typeof e=="object",Jl=e=>De(e)&&ue(e.then)&&ue(e.catch),Xl=Object.prototype.toString,on=e=>Xl.call(e),Td=e=>on(e).slice(8,-1),Zl=e=>on(e)==="[object Object]",Oo=e=>Ze(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Di=Lo(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),rn=e=>{const t=Object.create(null);return s=>t[s]||(t[s]=e(s))},Md=/-(\w)/g,Rt=rn(e=>e.replace(Md,(t,s)=>s?s.toUpperCase():"")),Od=/\B([A-Z])/g,zs=rn(e=>e.replace(Od,"-$1").toLowerCase()),ln=rn(e=>e.charAt(0).toUpperCase()+e.slice(1)),In=rn(e=>e?`on${ln(e)}`:""),li=(e,t)=>!Object.is(e,t),Bi=(e,t)=>{for(let s=0;s<e.length;s++)e[s](t)},ji=(e,t,s)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:s})},io=e=>{const t=parseFloat(e);return isNaN(t)?e:t},Nd=e=>{const t=Ze(e)?Number(e):NaN;return isNaN(t)?e:t};let Rr;const Pd=()=>Rr||(Rr=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});let _t;class $d{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this.parent=_t,!t&&_t&&(this.index=(_t.scopes||(_t.scopes=[])).push(this)-1)}get active(){return this._active}run(t){if(this._active){const s=_t;try{return _t=this,t()}finally{_t=s}}}on(){_t=this}off(){_t=this.parent}stop(t){if(this._active){let s,i;for(s=0,i=this.effects.length;s<i;s++)this.effects[s].stop();for(s=0,i=this.cleanups.length;s<i;s++)this.cleanups[s]();if(this.scopes)for(s=0,i=this.scopes.length;s<i;s++)this.scopes[s].stop(!0);if(!this.detached&&this.parent&&!t){const n=this.parent.scopes.pop();n&&n!==this&&(this.parent.scopes[this.index]=n,n.index=this.index)}this.parent=void 0,this._active=!1}}}function Rd(e,t=_t){t&&t.active&&t.effects.push(e)}function Hd(){return _t}const No=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Gl=e=>(e.w&as)>0,Ql=e=>(e.n&as)>0,Fd=({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=as},Dd=e=>{const{deps:t}=e;if(t.length){let s=0;for(let i=0;i<t.length;i++){const n=t[i];Gl(n)&&!Ql(n)?n.delete(e):t[s++]=n,n.w&=~as,n.n&=~as}t.length=s}},qi=new WeakMap;let Gs=0,as=1;const no=30;let kt;const Cs=Symbol(""),oo=Symbol("");class Po{constructor(t,s=null,i){this.fn=t,this.scheduler=s,this.active=!0,this.deps=[],this.parent=void 0,Rd(this,i)}run(){if(!this.active)return this.fn();let t=kt,s=os;for(;t;){if(t===this)return;t=t.parent}try{return this.parent=kt,kt=this,os=!0,as=1<<++Gs,Gs<=no?Fd(this):Hr(this),this.fn()}finally{Gs<=no&&Dd(this),as=1<<--Gs,kt=this.parent,os=s,this.parent=void 0,this.deferStop&&this.stop()}}stop(){kt===this?this.deferStop=!0:this.active&&(Hr(this),this.onStop&&this.onStop(),this.active=!1)}}function Hr(e){const{deps:t}=e;if(t.length){for(let s=0;s<t.length;s++)t[s].delete(e);t.length=0}}let os=!0;const ea=[];function Vs(){ea.push(os),os=!1}function Us(){const e=ea.pop();os=e===void 0?!0:e}function ht(e,t,s){if(os&&kt){let i=qi.get(e);i||qi.set(e,i=new Map);let n=i.get(s);n||i.set(s,n=No()),ta(n)}}function ta(e,t){let s=!1;Gs<=no?Ql(e)||(e.n|=as,s=!Gl(e)):s=!e.has(kt),s&&(e.add(kt),kt.deps.push(e))}function qt(e,t,s,i,n,o){const r=qi.get(e);if(!r)return;let l=[];if(t==="clear")l=[...r.values()];else if(s==="length"&&ne(e)){const a=Number(i);r.forEach((d,f)=>{(f==="length"||f>=a)&&l.push(d)})}else switch(s!==void 0&&l.push(r.get(s)),t){case"add":ne(e)?Oo(s)&&l.push(r.get("length")):(l.push(r.get(Cs)),Os(e)&&l.push(r.get(oo)));break;case"delete":ne(e)||(l.push(r.get(Cs)),Os(e)&&l.push(r.get(oo)));break;case"set":Os(e)&&l.push(r.get(Cs));break}if(l.length===1)l[0]&&ro(l[0]);else{const a=[];for(const d of l)d&&a.push(...d);ro(No(a))}}function ro(e,t){const s=ne(e)?e:[...e];for(const i of s)i.computed&&Fr(i);for(const i of s)i.computed||Fr(i)}function Fr(e,t){(e!==kt||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}function Bd(e,t){var s;return(s=qi.get(e))===null||s===void 0?void 0:s.get(t)}const Id=Lo("__proto__,__v_isRef,__isVue"),sa=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Mo)),zd=$o(),Vd=$o(!1,!0),Ud=$o(!0),Dr=jd();function jd(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...s){const i=we(this);for(let o=0,r=this.length;o<r;o++)ht(i,"get",o+"");const n=i[t](...s);return n===-1||n===!1?i[t](...s.map(we)):n}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...s){Vs();const i=we(this)[t].apply(this,s);return Us(),i}}),e}function qd(e){const t=we(this);return ht(t,"has",e),t.hasOwnProperty(e)}function $o(e=!1,t=!1){return function(i,n,o){if(n==="__v_isReactive")return!e;if(n==="__v_isReadonly")return e;if(n==="__v_isShallow")return t;if(n==="__v_raw"&&o===(e?t?af:la:t?ra:oa).get(i))return i;const r=ne(i);if(!e){if(r&&be(Dr,n))return Reflect.get(Dr,n,o);if(n==="hasOwnProperty")return qd}const l=Reflect.get(i,n,o);return(Mo(n)?sa.has(n):Id(n))||(e||ht(i,"get",n),t)?l:nt(l)?r&&Oo(n)?l:l.value:De(l)?e?aa(l):Fo(l):l}}const Wd=ia(),Kd=ia(!0);function ia(e=!1){return function(s,i,n,o){let r=s[i];if(Ds(r)&&nt(r)&&!nt(n))return!1;if(!e&&(!Wi(n)&&!Ds(n)&&(r=we(r),n=we(n)),!ne(s)&&nt(r)&&!nt(n)))return r.value=n,!0;const l=ne(s)&&Oo(i)?Number(i)<s.length:be(s,i),a=Reflect.set(s,i,n,o);return s===we(o)&&(l?li(n,r)&&qt(s,"set",i,n):qt(s,"add",i,n)),a}}function Yd(e,t){const s=be(e,t);e[t];const i=Reflect.deleteProperty(e,t);return i&&s&&qt(e,"delete",t,void 0),i}function Jd(e,t){const s=Reflect.has(e,t);return(!Mo(t)||!sa.has(t))&&ht(e,"has",t),s}function Xd(e){return ht(e,"iterate",ne(e)?"length":Cs),Reflect.ownKeys(e)}const na={get:zd,set:Wd,deleteProperty:Yd,has:Jd,ownKeys:Xd},Zd={get:Ud,set(e,t){return!0},deleteProperty(e,t){return!0}},Gd=rt({},na,{get:Vd,set:Kd}),Ro=e=>e,an=e=>Reflect.getPrototypeOf(e);function Si(e,t,s=!1,i=!1){e=e.__v_raw;const n=we(e),o=we(t);s||(t!==o&&ht(n,"get",t),ht(n,"get",o));const{has:r}=an(n),l=i?Ro:s?Bo:ai;if(r.call(n,t))return l(e.get(t));if(r.call(n,o))return l(e.get(o));e!==n&&e.get(t)}function Ei(e,t=!1){const s=this.__v_raw,i=we(s),n=we(e);return t||(e!==n&&ht(i,"has",e),ht(i,"has",n)),e===n?s.has(e):s.has(e)||s.has(n)}function Li(e,t=!1){return e=e.__v_raw,!t&&ht(we(e),"iterate",Cs),Reflect.get(e,"size",e)}function Br(e){e=we(e);const t=we(this);return an(t).has.call(t,e)||(t.add(e),qt(t,"add",e,e)),this}function Ir(e,t){t=we(t);const s=we(this),{has:i,get:n}=an(s);let o=i.call(s,e);o||(e=we(e),o=i.call(s,e));const r=n.call(s,e);return s.set(e,t),o?li(t,r)&&qt(s,"set",e,t):qt(s,"add",e,t),this}function zr(e){const t=we(this),{has:s,get:i}=an(t);let n=s.call(t,e);n||(e=we(e),n=s.call(t,e)),i&&i.call(t,e);const o=t.delete(e);return n&&qt(t,"delete",e,void 0),o}function Vr(){const e=we(this),t=e.size!==0,s=e.clear();return t&&qt(e,"clear",void 0,void 0),s}function Ai(e,t){return function(i,n){const o=this,r=o.__v_raw,l=we(r),a=t?Ro:e?Bo:ai;return!e&&ht(l,"iterate",Cs),r.forEach((d,f)=>i.call(n,a(d),a(f),o))}}function Ti(e,t,s){return function(...i){const n=this.__v_raw,o=we(n),r=Os(o),l=e==="entries"||e===Symbol.iterator&&r,a=e==="keys"&&r,d=n[e](...i),f=s?Ro:t?Bo:ai;return!t&&ht(o,"iterate",a?oo:Cs),{next(){const{value:h,done:v}=d.next();return v?{value:h,done:v}:{value:l?[f(h[0]),f(h[1])]:f(h),done:v}},[Symbol.iterator](){return this}}}}function Qt(e){return function(...t){return e==="delete"?!1:this}}function Qd(){const e={get(o){return Si(this,o)},get size(){return Li(this)},has:Ei,add:Br,set:Ir,delete:zr,clear:Vr,forEach:Ai(!1,!1)},t={get(o){return Si(this,o,!1,!0)},get size(){return Li(this)},has:Ei,add:Br,set:Ir,delete:zr,clear:Vr,forEach:Ai(!1,!0)},s={get(o){return Si(this,o,!0)},get size(){return Li(this,!0)},has(o){return Ei.call(this,o,!0)},add:Qt("add"),set:Qt("set"),delete:Qt("delete"),clear:Qt("clear"),forEach:Ai(!0,!1)},i={get(o){return Si(this,o,!0,!0)},get size(){return Li(this,!0)},has(o){return Ei.call(this,o,!0)},add:Qt("add"),set:Qt("set"),delete:Qt("delete"),clear:Qt("clear"),forEach:Ai(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(o=>{e[o]=Ti(o,!1,!1),s[o]=Ti(o,!0,!1),t[o]=Ti(o,!1,!0),i[o]=Ti(o,!0,!0)}),[e,s,t,i]}const[ef,tf,sf,nf]=Qd();function Ho(e,t){const s=t?e?nf:sf:e?tf:ef;return(i,n,o)=>n==="__v_isReactive"?!e:n==="__v_isReadonly"?e:n==="__v_raw"?i:Reflect.get(be(s,n)&&n in i?s:i,n,o)}const of={get:Ho(!1,!1)},rf={get:Ho(!1,!0)},lf={get:Ho(!0,!1)},oa=new WeakMap,ra=new WeakMap,la=new WeakMap,af=new WeakMap;function cf(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function uf(e){return e.__v_skip||!Object.isExtensible(e)?0:cf(Td(e))}function Fo(e){return Ds(e)?e:Do(e,!1,na,of,oa)}function df(e){return Do(e,!1,Gd,rf,ra)}function aa(e){return Do(e,!0,Zd,lf,la)}function Do(e,t,s,i,n){if(!De(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const o=n.get(e);if(o)return o;const r=uf(e);if(r===0)return e;const l=new Proxy(e,r===2?i:s);return n.set(e,l),l}function Ns(e){return Ds(e)?Ns(e.__v_raw):!!(e&&e.__v_isReactive)}function Ds(e){return!!(e&&e.__v_isReadonly)}function Wi(e){return!!(e&&e.__v_isShallow)}function ca(e){return Ns(e)||Ds(e)}function we(e){const t=e&&e.__v_raw;return t?we(t):e}function ua(e){return ji(e,"__v_skip",!0),e}const ai=e=>De(e)?Fo(e):e,Bo=e=>De(e)?aa(e):e;function da(e){os&&kt&&(e=we(e),ta(e.dep||(e.dep=No())))}function fa(e,t){e=we(e);const s=e.dep;s&&ro(s)}function nt(e){return!!(e&&e.__v_isRef===!0)}function Ot(e){return ff(e,!1)}function ff(e,t){return nt(e)?e:new hf(e,t)}class hf{constructor(t,s){this.__v_isShallow=s,this.dep=void 0,this.__v_isRef=!0,this._rawValue=s?t:we(t),this._value=s?t:ai(t)}get value(){return da(this),this._value}set value(t){const s=this.__v_isShallow||Wi(t)||Ds(t);t=s?t:we(t),li(t,this._rawValue)&&(this._rawValue=t,this._value=s?t:ai(t),fa(this))}}function Qs(e){return nt(e)?e.value:e}const pf={get:(e,t,s)=>Qs(Reflect.get(e,t,s)),set:(e,t,s,i)=>{const n=e[t];return nt(n)&&!nt(s)?(n.value=s,!0):Reflect.set(e,t,s,i)}};function ha(e){return Ns(e)?e:new Proxy(e,pf)}function ei(e){const t=ne(e)?new Array(e.length):{};for(const s in e)t[s]=gf(e,s);return t}class mf{constructor(t,s,i){this._object=t,this._key=s,this._defaultValue=i,this.__v_isRef=!0}get value(){const t=this._object[this._key];return t===void 0?this._defaultValue:t}set value(t){this._object[this._key]=t}get dep(){return Bd(we(this._object),this._key)}}function gf(e,t,s){const i=e[t];return nt(i)?i:new mf(e,t,s)}var pa;class vf{constructor(t,s,i,n){this._setter=s,this.dep=void 0,this.__v_isRef=!0,this[pa]=!1,this._dirty=!0,this.effect=new Po(t,()=>{this._dirty||(this._dirty=!0,fa(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!n,this.__v_isReadonly=i}get value(){const t=we(this);return da(t),(t._dirty||!t._cacheable)&&(t._dirty=!1,t._value=t.effect.run()),t._value}set value(t){this._setter(t)}}pa="__v_isReadonly";function bf(e,t,s=!1){let i,n;const o=ue(e);return o?(i=e,n=Et):(i=e.get,n=e.set),new vf(i,n,o||!n,s)}function rs(e,t,s,i){let n;try{n=i?e(...i):e()}catch(o){cn(o,t,s)}return n}function bt(e,t,s,i){if(ue(e)){const o=rs(e,t,s,i);return o&&Jl(o)&&o.catch(r=>{cn(r,t,s)}),o}const n=[];for(let o=0;o<e.length;o++)n.push(bt(e[o],t,s,i));return n}function cn(e,t,s,i=!0){const n=t?t.vnode:null;if(t){let o=t.parent;const r=t.proxy,l=s;for(;o;){const d=o.ec;if(d){for(let f=0;f<d.length;f++)if(d[f](e,r,l)===!1)return}o=o.parent}const a=t.appContext.config.errorHandler;if(a){rs(a,null,10,[e,r,l]);return}}yf(e,s,n,i)}function yf(e,t,s,i=!0){console.error(e)}let ci=!1,lo=!1;const lt=[];let Nt=0;const Ps=[];let zt=null,ys=0;const ma=Promise.resolve();let Io=null;function ga(e){const t=Io||ma;return e?t.then(this?e.bind(this):e):t}function wf(e){let t=Nt+1,s=lt.length;for(;t<s;){const i=t+s>>>1;ui(lt[i])<e?t=i+1:s=i}return t}function zo(e){(!lt.length||!lt.includes(e,ci&&e.allowRecurse?Nt+1:Nt))&&(e.id==null?lt.push(e):lt.splice(wf(e.id),0,e),va())}function va(){!ci&&!lo&&(lo=!0,Io=ma.then(ya))}function _f(e){const t=lt.indexOf(e);t>Nt&&lt.splice(t,1)}function kf(e){ne(e)?Ps.push(...e):(!zt||!zt.includes(e,e.allowRecurse?ys+1:ys))&&Ps.push(e),va()}function Ur(e,t=ci?Nt+1:0){for(;t<lt.length;t++){const s=lt[t];s&&s.pre&&(lt.splice(t,1),t--,s())}}function ba(e){if(Ps.length){const t=[...new Set(Ps)];if(Ps.length=0,zt){zt.push(...t);return}for(zt=t,zt.sort((s,i)=>ui(s)-ui(i)),ys=0;ys<zt.length;ys++)zt[ys]();zt=null,ys=0}}const ui=e=>e.id==null?1/0:e.id,xf=(e,t)=>{const s=ui(e)-ui(t);if(s===0){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return s};function ya(e){lo=!1,ci=!0,lt.sort(xf);const t=Et;try{for(Nt=0;Nt<lt.length;Nt++){const s=lt[Nt];s&&s.active!==!1&&rs(s,null,14)}}finally{Nt=0,lt.length=0,ba(),ci=!1,Io=null,(lt.length||Ps.length)&&ya()}}function Cf(e,t,...s){if(e.isUnmounted)return;const i=e.vnode.props||Fe;let n=s;const o=t.startsWith("update:"),r=o&&t.slice(7);if(r&&r in i){const f=`${r==="modelValue"?"model":r}Modifiers`,{number:h,trim:v}=i[f]||Fe;v&&(n=s.map(k=>Ze(k)?k.trim():k)),h&&(n=s.map(io))}let l,a=i[l=In(t)]||i[l=In(Rt(t))];!a&&o&&(a=i[l=In(zs(t))]),a&&bt(a,e,6,n);const d=i[l+"Once"];if(d){if(!e.emitted)e.emitted={};else if(e.emitted[l])return;e.emitted[l]=!0,bt(d,e,6,n)}}function wa(e,t,s=!1){const i=t.emitsCache,n=i.get(e);if(n!==void 0)return n;const o=e.emits;let r={},l=!1;if(!ue(e)){const a=d=>{const f=wa(d,t,!0);f&&(l=!0,rt(r,f))};!s&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}return!o&&!l?(De(e)&&i.set(e,null),null):(ne(o)?o.forEach(a=>r[a]=null):rt(r,o),De(e)&&i.set(e,r),r)}function un(e,t){return!e||!nn(t)?!1:(t=t.slice(2).replace(/Once$/,""),be(e,t[0].toLowerCase()+t.slice(1))||be(e,zs(t))||be(e,t))}let ot=null,_a=null;function Ki(e){const t=ot;return ot=e,_a=e&&e.type.__scopeId||null,t}function ti(e,t=ot,s){if(!t||e._n)return e;const i=(...n)=>{i._d&&Qr(-1);const o=Ki(t);let r;try{r=e(...n)}finally{Ki(o),i._d&&Qr(1)}return r};return i._n=!0,i._c=!0,i._d=!0,i}function zn(e){const{type:t,vnode:s,proxy:i,withProxy:n,props:o,propsOptions:[r],slots:l,attrs:a,emit:d,render:f,renderCache:h,data:v,setupState:k,ctx:b,inheritAttrs:_}=e;let E,P;const Y=Ki(e);try{if(s.shapeFlag&4){const se=n||i;E=Mt(f.call(se,se,h,o,k,v,b)),P=a}else{const se=t;E=Mt(se.length>1?se(o,{attrs:a,slots:l,emit:d}):se(o,null)),P=t.props?a:Sf(a)}}catch(se){ni.length=0,cn(se,e,1),E=V(yt)}let K=E;if(P&&_!==!1){const se=Object.keys(P),{shapeFlag:le}=K;se.length&&le&7&&(r&&se.some(Ao)&&(P=Ef(P,r)),K=cs(K,P))}return s.dirs&&(K=cs(K),K.dirs=K.dirs?K.dirs.concat(s.dirs):s.dirs),s.transition&&(K.transition=s.transition),E=K,Ki(Y),E}const Sf=e=>{let t;for(const s in e)(s==="class"||s==="style"||nn(s))&&((t||(t={}))[s]=e[s]);return t},Ef=(e,t)=>{const s={};for(const i in e)(!Ao(i)||!(i.slice(9)in t))&&(s[i]=e[i]);return s};function Lf(e,t,s){const{props:i,children:n,component:o}=e,{props:r,children:l,patchFlag:a}=t,d=o.emitsOptions;if(t.dirs||t.transition)return!0;if(s&&a>=0){if(a&1024)return!0;if(a&16)return i?jr(i,r,d):!!r;if(a&8){const f=t.dynamicProps;for(let h=0;h<f.length;h++){const v=f[h];if(r[v]!==i[v]&&!un(d,v))return!0}}}else return(n||l)&&(!l||!l.$stable)?!0:i===r?!1:i?r?jr(i,r,d):!0:!!r;return!1}function jr(e,t,s){const i=Object.keys(t);if(i.length!==Object.keys(e).length)return!0;for(let n=0;n<i.length;n++){const o=i[n];if(t[o]!==e[o]&&!un(s,o))return!0}return!1}function Af({vnode:e,parent:t},s){for(;t&&t.subTree===e;)(e=t.vnode).el=s,t=t.parent}const Tf=e=>e.__isSuspense;function Mf(e,t){t&&t.pendingBranch?ne(e)?t.effects.push(...e):t.effects.push(e):kf(e)}function Of(e,t){if(Ye){let s=Ye.provides;const i=Ye.parent&&Ye.parent.provides;i===s&&(s=Ye.provides=Object.create(i)),s[e]=t}}function Ii(e,t,s=!1){const i=Ye||ot;if(i){const n=i.parent==null?i.vnode.appContext&&i.vnode.appContext.provides:i.parent.provides;if(n&&e in n)return n[e];if(arguments.length>1)return s&&ue(t)?t.call(i.proxy):t}}const Mi={};function st(e,t,s){return ka(e,t,s)}function ka(e,t,{immediate:s,deep:i,flush:n,onTrack:o,onTrigger:r}=Fe){const l=Hd()===(Ye==null?void 0:Ye.scope)?Ye:null;let a,d=!1,f=!1;if(nt(e)?(a=()=>e.value,d=Wi(e)):Ns(e)?(a=()=>e,i=!0):ne(e)?(f=!0,d=e.some(K=>Ns(K)||Wi(K)),a=()=>e.map(K=>{if(nt(K))return K.value;if(Ns(K))return ks(K);if(ue(K))return rs(K,l,2)})):ue(e)?t?a=()=>rs(e,l,2):a=()=>{if(!(l&&l.isUnmounted))return h&&h(),bt(e,l,3,[v])}:a=Et,t&&i){const K=a;a=()=>ks(K())}let h,v=K=>{h=P.onStop=()=>{rs(K,l,4)}},k;if(fi)if(v=Et,t?s&&bt(t,l,3,[a(),f?[]:void 0,v]):a(),n==="sync"){const K=Eh();k=K.__watcherHandles||(K.__watcherHandles=[])}else return Et;let b=f?new Array(e.length).fill(Mi):Mi;const _=()=>{if(P.active)if(t){const K=P.run();(i||d||(f?K.some((se,le)=>li(se,b[le])):li(K,b)))&&(h&&h(),bt(t,l,3,[K,b===Mi?void 0:f&&b[0]===Mi?[]:b,v]),b=K)}else P.run()};_.allowRecurse=!!t;let E;n==="sync"?E=_:n==="post"?E=()=>ft(_,l&&l.suspense):(_.pre=!0,l&&(_.id=l.uid),E=()=>zo(_));const P=new Po(a,E);t?s?_():b=P.run():n==="post"?ft(P.run.bind(P),l&&l.suspense):P.run();const Y=()=>{P.stop(),l&&l.scope&&To(l.scope.effects,P)};return k&&k.push(Y),Y}function Nf(e,t,s){const i=this.proxy,n=Ze(e)?e.includes(".")?xa(i,e):()=>i[e]:e.bind(i,i);let o;ue(t)?o=t:(o=t.handler,s=t);const r=Ye;Bs(this);const l=ka(n,o.bind(i),s);return r?Bs(r):Ss(),l}function xa(e,t){const s=t.split(".");return()=>{let i=e;for(let n=0;n<s.length&&i;n++)i=i[s[n]];return i}}function ks(e,t){if(!De(e)||e.__v_skip||(t=t||new Set,t.has(e)))return e;if(t.add(e),nt(e))ks(e.value,t);else if(ne(e))for(let s=0;s<e.length;s++)ks(e[s],t);else if(Yl(e)||Os(e))e.forEach(s=>{ks(s,t)});else if(Zl(e))for(const s in e)ks(e[s],t);return e}function Pf(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return hn(()=>{e.isMounted=!0}),Vo(()=>{e.isUnmounting=!0}),e}const mt=[Function,Array],$f={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:mt,onEnter:mt,onAfterEnter:mt,onEnterCancelled:mt,onBeforeLeave:mt,onLeave:mt,onAfterLeave:mt,onLeaveCancelled:mt,onBeforeAppear:mt,onAppear:mt,onAfterAppear:mt,onAppearCancelled:mt},setup(e,{slots:t}){const s=vh(),i=Pf();let n;return()=>{const o=t.default&&Ea(t.default(),!0);if(!o||!o.length)return;let r=o[0];if(o.length>1){for(const _ of o)if(_.type!==yt){r=_;break}}const l=we(e),{mode:a}=l;if(i.isLeaving)return Vn(r);const d=qr(r);if(!d)return Vn(r);const f=ao(d,l,i,s);co(d,f);const h=s.subTree,v=h&&qr(h);let k=!1;const{getTransitionKey:b}=d.type;if(b){const _=b();n===void 0?n=_:_!==n&&(n=_,k=!0)}if(v&&v.type!==yt&&(!ws(d,v)||k)){const _=ao(v,l,i,s);if(co(v,_),a==="out-in")return i.isLeaving=!0,_.afterLeave=()=>{i.isLeaving=!1,s.update.active!==!1&&s.update()},Vn(r);a==="in-out"&&d.type!==yt&&(_.delayLeave=(E,P,Y)=>{const K=Sa(i,v);K[String(v.key)]=v,E._leaveCb=()=>{P(),E._leaveCb=void 0,delete f.delayedLeave},f.delayedLeave=Y})}return r}}},Ca=$f;function Sa(e,t){const{leavingVNodes:s}=e;let i=s.get(t.type);return i||(i=Object.create(null),s.set(t.type,i)),i}function ao(e,t,s,i){const{appear:n,mode:o,persisted:r=!1,onBeforeEnter:l,onEnter:a,onAfterEnter:d,onEnterCancelled:f,onBeforeLeave:h,onLeave:v,onAfterLeave:k,onLeaveCancelled:b,onBeforeAppear:_,onAppear:E,onAfterAppear:P,onAppearCancelled:Y}=t,K=String(e.key),se=Sa(s,e),le=(X,q)=>{X&&bt(X,i,9,q)},$e=(X,q)=>{const fe=q[1];le(X,q),ne(X)?X.every(de=>de.length<=1)&&fe():X.length<=1&&fe()},ke={mode:o,persisted:r,beforeEnter(X){let q=l;if(!s.isMounted)if(n)q=_||l;else return;X._leaveCb&&X._leaveCb(!0);const fe=se[K];fe&&ws(e,fe)&&fe.el._leaveCb&&fe.el._leaveCb(),le(q,[X])},enter(X){let q=a,fe=d,de=f;if(!s.isMounted)if(n)q=E||a,fe=P||d,de=Y||f;else return;let z=!1;const me=X._enterCb=xe=>{z||(z=!0,xe?le(de,[X]):le(fe,[X]),ke.delayedLeave&&ke.delayedLeave(),X._enterCb=void 0)};q?$e(q,[X,me]):me()},leave(X,q){const fe=String(e.key);if(X._enterCb&&X._enterCb(!0),s.isUnmounting)return q();le(h,[X]);let de=!1;const z=X._leaveCb=me=>{de||(de=!0,q(),me?le(b,[X]):le(k,[X]),X._leaveCb=void 0,se[fe]===e&&delete se[fe])};se[fe]=e,v?$e(v,[X,z]):z()},clone(X){return ao(X,t,s,i)}};return ke}function Vn(e){if(dn(e))return e=cs(e),e.children=null,e}function qr(e){return dn(e)?e.children?e.children[0]:void 0:e}function co(e,t){e.shapeFlag&6&&e.component?co(e.component.subTree,t):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ea(e,t=!1,s){let i=[],n=0;for(let o=0;o<e.length;o++){let r=e[o];const l=s==null?r.key:String(s)+String(r.key!=null?r.key:o);r.type===Pe?(r.patchFlag&128&&n++,i=i.concat(Ea(r.children,t,l))):(t||r.type!==yt)&&i.push(l!=null?cs(r,{key:l}):r)}if(n>1)for(let o=0;o<i.length;o++)i[o].patchFlag=-2;return i}function Yt(e){return ue(e)?{setup:e,name:e.name}:e}const si=e=>!!e.type.__asyncLoader,dn=e=>e.type.__isKeepAlive;function Rf(e,t){La(e,"a",t)}function Hf(e,t){La(e,"da",t)}function La(e,t,s=Ye){const i=e.__wdc||(e.__wdc=()=>{let n=s;for(;n;){if(n.isDeactivated)return;n=n.parent}return e()});if(fn(t,i,s),s){let n=s.parent;for(;n&&n.parent;)dn(n.parent.vnode)&&Ff(i,t,s,n),n=n.parent}}function Ff(e,t,s,i){const n=fn(t,e,i,!0);pn(()=>{To(i[t],n)},s)}function fn(e,t,s=Ye,i=!1){if(s){const n=s[e]||(s[e]=[]),o=t.__weh||(t.__weh=(...r)=>{if(s.isUnmounted)return;Vs(),Bs(s);const l=bt(t,s,e,r);return Ss(),Us(),l});return i?n.unshift(o):n.push(o),o}}const Jt=e=>(t,s=Ye)=>(!fi||e==="sp")&&fn(e,(...i)=>t(...i),s),Df=Jt("bm"),hn=Jt("m"),Bf=Jt("bu"),If=Jt("u"),Vo=Jt("bum"),pn=Jt("um"),zf=Jt("sp"),Vf=Jt("rtg"),Uf=Jt("rtc");function jf(e,t=Ye){fn("ec",e,t)}function mn(e,t){const s=ot;if(s===null)return e;const i=yn(s)||s.proxy,n=e.dirs||(e.dirs=[]);for(let o=0;o<t.length;o++){let[r,l,a,d=Fe]=t[o];r&&(ue(r)&&(r={mounted:r,updated:r}),r.deep&&ks(l),n.push({dir:r,instance:i,value:l,oldValue:void 0,arg:a,modifiers:d}))}return e}function fs(e,t,s,i){const n=e.dirs,o=t&&t.dirs;for(let r=0;r<n.length;r++){const l=n[r];o&&(l.oldValue=o[r].value);let a=l.dir[i];a&&(Vs(),bt(a,s,8,[e.el,l,e,t]),Us())}}const Aa="components",qf="directives";function Ne(e,t){return Ta(Aa,e,!0,t)||e}const Wf=Symbol();function Kf(e){return Ta(qf,e)}function Ta(e,t,s=!0,i=!1){const n=ot||Ye;if(n){const o=n.type;if(e===Aa){const l=kh(o,!1);if(l&&(l===t||l===Rt(t)||l===ln(Rt(t))))return o}const r=Wr(n[e]||o[e],t)||Wr(n.appContext[e],t);return!r&&i?o:r}}function Wr(e,t){return e&&(e[t]||e[Rt(t)]||e[ln(Rt(t))])}function xt(e,t,s,i){let n;const o=s&&s[i];if(ne(e)||Ze(e)){n=new Array(e.length);for(let r=0,l=e.length;r<l;r++)n[r]=t(e[r],r,void 0,o&&o[r])}else if(typeof e=="number"){n=new Array(e);for(let r=0;r<e;r++)n[r]=t(r+1,r,void 0,o&&o[r])}else if(De(e))if(e[Symbol.iterator])n=Array.from(e,(r,l)=>t(r,l,void 0,o&&o[l]));else{const r=Object.keys(e);n=new Array(r.length);for(let l=0,a=r.length;l<a;l++){const d=r[l];n[l]=t(e[d],d,l,o&&o[l])}}else n=[];return s&&(s[i]=n),n}function Yi(e,t,s={},i,n){if(ot.isCE||ot.parent&&si(ot.parent)&&ot.parent.isCE)return t!=="default"&&(s.name=t),V("slot",s,i&&i());let o=e[t];o&&o._c&&(o._d=!1),N();const r=o&&Ma(o(s)),l=Ie(Pe,{key:s.key||r&&r.key||`_${t}`},r||(i?i():[]),r&&e._===1?64:-2);return!n&&l.scopeId&&(l.slotScopeIds=[l.scopeId+"-s"]),o&&o._c&&(o._d=!0),l}function Ma(e){return e.some(t=>Xi(t)?!(t.type===yt||t.type===Pe&&!Ma(t.children)):!0)?e:null}const uo=e=>e?Va(e)?yn(e)||e.proxy:uo(e.parent):null,ii=rt(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>uo(e.parent),$root:e=>uo(e.root),$emit:e=>e.emit,$options:e=>Uo(e),$forceUpdate:e=>e.f||(e.f=()=>zo(e.update)),$nextTick:e=>e.n||(e.n=ga.bind(e.proxy)),$watch:e=>Nf.bind(e)}),Un=(e,t)=>e!==Fe&&!e.__isScriptSetup&&be(e,t),Yf={get({_:e},t){const{ctx:s,setupState:i,data:n,props:o,accessCache:r,type:l,appContext:a}=e;let d;if(t[0]!=="$"){const k=r[t];if(k!==void 0)switch(k){case 1:return i[t];case 2:return n[t];case 4:return s[t];case 3:return o[t]}else{if(Un(i,t))return r[t]=1,i[t];if(n!==Fe&&be(n,t))return r[t]=2,n[t];if((d=e.propsOptions[0])&&be(d,t))return r[t]=3,o[t];if(s!==Fe&&be(s,t))return r[t]=4,s[t];fo&&(r[t]=0)}}const f=ii[t];let h,v;if(f)return t==="$attrs"&&ht(e,"get",t),f(e);if((h=l.__cssModules)&&(h=h[t]))return h;if(s!==Fe&&be(s,t))return r[t]=4,s[t];if(v=a.config.globalProperties,be(v,t))return v[t]},set({_:e},t,s){const{data:i,setupState:n,ctx:o}=e;return Un(n,t)?(n[t]=s,!0):i!==Fe&&be(i,t)?(i[t]=s,!0):be(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(o[t]=s,!0)},has({_:{data:e,setupState:t,accessCache:s,ctx:i,appContext:n,propsOptions:o}},r){let l;return!!s[r]||e!==Fe&&be(e,r)||Un(t,r)||(l=o[0])&&be(l,r)||be(i,r)||be(ii,r)||be(n.config.globalProperties,r)},defineProperty(e,t,s){return s.get!=null?e._.accessCache[t]=0:be(s,"value")&&this.set(e,t,s.value,null),Reflect.defineProperty(e,t,s)}};let fo=!0;function Jf(e){const t=Uo(e),s=e.proxy,i=e.ctx;fo=!1,t.beforeCreate&&Kr(t.beforeCreate,e,"bc");const{data:n,computed:o,methods:r,watch:l,provide:a,inject:d,created:f,beforeMount:h,mounted:v,beforeUpdate:k,updated:b,activated:_,deactivated:E,beforeDestroy:P,beforeUnmount:Y,destroyed:K,unmounted:se,render:le,renderTracked:$e,renderTriggered:ke,errorCaptured:X,serverPrefetch:q,expose:fe,inheritAttrs:de,components:z,directives:me,filters:xe}=t;if(d&&Xf(d,i,null,e.appContext.config.unwrapInjectedRef),r)for(const Ce in r){const ge=r[Ce];ue(ge)&&(i[Ce]=ge.bind(s))}if(n){const Ce=n.call(s,s);De(Ce)&&(e.data=Fo(Ce))}if(fo=!0,o)for(const Ce in o){const ge=o[Ce],Re=ue(ge)?ge.bind(s,s):ue(ge.get)?ge.get.bind(s,s):Et,Me=!ue(ge)&&ue(ge.set)?ge.set.bind(s):Et,Ue=Vt({get:Re,set:Me});Object.defineProperty(i,Ce,{enumerable:!0,configurable:!0,get:()=>Ue.value,set:je=>Ue.value=je})}if(l)for(const Ce in l)Oa(l[Ce],i,s,Ce);if(a){const Ce=ue(a)?a.call(s):a;Reflect.ownKeys(Ce).forEach(ge=>{Of(ge,Ce[ge])})}f&&Kr(f,e,"c");function he(Ce,ge){ne(ge)?ge.forEach(Re=>Ce(Re.bind(s))):ge&&Ce(ge.bind(s))}if(he(Df,h),he(hn,v),he(Bf,k),he(If,b),he(Rf,_),he(Hf,E),he(jf,X),he(Uf,$e),he(Vf,ke),he(Vo,Y),he(pn,se),he(zf,q),ne(fe))if(fe.length){const Ce=e.exposed||(e.exposed={});fe.forEach(ge=>{Object.defineProperty(Ce,ge,{get:()=>s[ge],set:Re=>s[ge]=Re})})}else e.exposed||(e.exposed={});le&&e.render===Et&&(e.render=le),de!=null&&(e.inheritAttrs=de),z&&(e.components=z),me&&(e.directives=me)}function Xf(e,t,s=Et,i=!1){ne(e)&&(e=ho(e));for(const n in e){const o=e[n];let r;De(o)?"default"in o?r=Ii(o.from||n,o.default,!0):r=Ii(o.from||n):r=Ii(o),nt(r)&&i?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>r.value,set:l=>r.value=l}):t[n]=r}}function Kr(e,t,s){bt(ne(e)?e.map(i=>i.bind(t.proxy)):e.bind(t.proxy),t,s)}function Oa(e,t,s,i){const n=i.includes(".")?xa(s,i):()=>s[i];if(Ze(e)){const o=t[e];ue(o)&&st(n,o)}else if(ue(e))st(n,e.bind(s));else if(De(e))if(ne(e))e.forEach(o=>Oa(o,t,s,i));else{const o=ue(e.handler)?e.handler.bind(s):t[e.handler];ue(o)&&st(n,o,e)}}function Uo(e){const t=e.type,{mixins:s,extends:i}=t,{mixins:n,optionsCache:o,config:{optionMergeStrategies:r}}=e.appContext,l=o.get(t);let a;return l?a=l:!n.length&&!s&&!i?a=t:(a={},n.length&&n.forEach(d=>Ji(a,d,r,!0)),Ji(a,t,r)),De(t)&&o.set(t,a),a}function Ji(e,t,s,i=!1){const{mixins:n,extends:o}=t;o&&Ji(e,o,s,!0),n&&n.forEach(r=>Ji(e,r,s,!0));for(const r in t)if(!(i&&r==="expose")){const l=Zf[r]||s&&s[r];e[r]=l?l(e[r],t[r]):t[r]}return e}const Zf={data:Yr,props:vs,emits:vs,methods:vs,computed:vs,beforeCreate:ct,created:ct,beforeMount:ct,mounted:ct,beforeUpdate:ct,updated:ct,beforeDestroy:ct,beforeUnmount:ct,destroyed:ct,unmounted:ct,activated:ct,deactivated:ct,errorCaptured:ct,serverPrefetch:ct,components:vs,directives:vs,watch:Qf,provide:Yr,inject:Gf};function Yr(e,t){return t?e?function(){return rt(ue(e)?e.call(this,this):e,ue(t)?t.call(this,this):t)}:t:e}function Gf(e,t){return vs(ho(e),ho(t))}function ho(e){if(ne(e)){const t={};for(let s=0;s<e.length;s++)t[e[s]]=e[s];return t}return e}function ct(e,t){return e?[...new Set([].concat(e,t))]:t}function vs(e,t){return e?rt(rt(Object.create(null),e),t):t}function Qf(e,t){if(!e)return t;if(!t)return e;const s=rt(Object.create(null),e);for(const i in t)s[i]=ct(e[i],t[i]);return s}function eh(e,t,s,i=!1){const n={},o={};ji(o,vn,1),e.propsDefaults=Object.create(null),Na(e,t,n,o);for(const r in e.propsOptions[0])r in n||(n[r]=void 0);s?e.props=i?n:df(n):e.type.props?e.props=n:e.props=o,e.attrs=o}function th(e,t,s,i){const{props:n,attrs:o,vnode:{patchFlag:r}}=e,l=we(n),[a]=e.propsOptions;let d=!1;if((i||r>0)&&!(r&16)){if(r&8){const f=e.vnode.dynamicProps;for(let h=0;h<f.length;h++){let v=f[h];if(un(e.emitsOptions,v))continue;const k=t[v];if(a)if(be(o,v))k!==o[v]&&(o[v]=k,d=!0);else{const b=Rt(v);n[b]=po(a,l,b,k,e,!1)}else k!==o[v]&&(o[v]=k,d=!0)}}}else{Na(e,t,n,o)&&(d=!0);let f;for(const h in l)(!t||!be(t,h)&&((f=zs(h))===h||!be(t,f)))&&(a?s&&(s[h]!==void 0||s[f]!==void 0)&&(n[h]=po(a,l,h,void 0,e,!0)):delete n[h]);if(o!==l)for(const h in o)(!t||!be(t,h))&&(delete o[h],d=!0)}d&&qt(e,"set","$attrs")}function Na(e,t,s,i){const[n,o]=e.propsOptions;let r=!1,l;if(t)for(let a in t){if(Di(a))continue;const d=t[a];let f;n&&be(n,f=Rt(a))?!o||!o.includes(f)?s[f]=d:(l||(l={}))[f]=d:un(e.emitsOptions,a)||(!(a in i)||d!==i[a])&&(i[a]=d,r=!0)}if(o){const a=we(s),d=l||Fe;for(let f=0;f<o.length;f++){const h=o[f];s[h]=po(n,a,h,d[h],e,!be(d,h))}}return r}function po(e,t,s,i,n,o){const r=e[s];if(r!=null){const l=be(r,"default");if(l&&i===void 0){const a=r.default;if(r.type!==Function&&ue(a)){const{propsDefaults:d}=n;s in d?i=d[s]:(Bs(n),i=d[s]=a.call(null,t),Ss())}else i=a}r[0]&&(o&&!l?i=!1:r[1]&&(i===""||i===zs(s))&&(i=!0))}return i}function Pa(e,t,s=!1){const i=t.propsCache,n=i.get(e);if(n)return n;const o=e.props,r={},l=[];let a=!1;if(!ue(e)){const f=h=>{a=!0;const[v,k]=Pa(h,t,!0);rt(r,v),k&&l.push(...k)};!s&&t.mixins.length&&t.mixins.forEach(f),e.extends&&f(e.extends),e.mixins&&e.mixins.forEach(f)}if(!o&&!a)return De(e)&&i.set(e,Ms),Ms;if(ne(o))for(let f=0;f<o.length;f++){const h=Rt(o[f]);Jr(h)&&(r[h]=Fe)}else if(o)for(const f in o){const h=Rt(f);if(Jr(h)){const v=o[f],k=r[h]=ne(v)||ue(v)?{type:v}:Object.assign({},v);if(k){const b=Gr(Boolean,k.type),_=Gr(String,k.type);k[0]=b>-1,k[1]=_<0||b<_,(b>-1||be(k,"default"))&&l.push(h)}}}const d=[r,l];return De(e)&&i.set(e,d),d}function Jr(e){return e[0]!=="$"}function Xr(e){const t=e&&e.toString().match(/^\s*(function|class) (\w+)/);return t?t[2]:e===null?"null":""}function Zr(e,t){return Xr(e)===Xr(t)}function Gr(e,t){return ne(t)?t.findIndex(s=>Zr(s,e)):ue(t)&&Zr(t,e)?0:-1}const $a=e=>e[0]==="_"||e==="$stable",jo=e=>ne(e)?e.map(Mt):[Mt(e)],sh=(e,t,s)=>{if(t._n)return t;const i=ti((...n)=>jo(t(...n)),s);return i._c=!1,i},Ra=(e,t,s)=>{const i=e._ctx;for(const n in e){if($a(n))continue;const o=e[n];if(ue(o))t[n]=sh(n,o,i);else if(o!=null){const r=jo(o);t[n]=()=>r}}},Ha=(e,t)=>{const s=jo(t);e.slots.default=()=>s},ih=(e,t)=>{if(e.vnode.shapeFlag&32){const s=t._;s?(e.slots=we(t),ji(t,"_",s)):Ra(t,e.slots={})}else e.slots={},t&&Ha(e,t);ji(e.slots,vn,1)},nh=(e,t,s)=>{const{vnode:i,slots:n}=e;let o=!0,r=Fe;if(i.shapeFlag&32){const l=t._;l?s&&l===1?o=!1:(rt(n,t),!s&&l===1&&delete n._):(o=!t.$stable,Ra(t,n)),r=t}else t&&(Ha(e,t),r={default:1});if(o)for(const l in n)!$a(l)&&!(l in r)&&delete n[l]};function Fa(){return{app:null,config:{isNativeTag:Ed,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let oh=0;function rh(e,t){return function(i,n=null){ue(i)||(i=Object.assign({},i)),n!=null&&!De(n)&&(n=null);const o=Fa(),r=new Set;let l=!1;const a=o.app={_uid:oh++,_component:i,_props:n,_container:null,_context:o,_instance:null,version:Lh,get config(){return o.config},set config(d){},use(d,...f){return r.has(d)||(d&&ue(d.install)?(r.add(d),d.install(a,...f)):ue(d)&&(r.add(d),d(a,...f))),a},mixin(d){return o.mixins.includes(d)||o.mixins.push(d),a},component(d,f){return f?(o.components[d]=f,a):o.components[d]},directive(d,f){return f?(o.directives[d]=f,a):o.directives[d]},mount(d,f,h){if(!l){const v=V(i,n);return v.appContext=o,f&&t?t(v,d):e(v,d,h),l=!0,a._container=d,d.__vue_app__=a,yn(v.component)||v.component.proxy}},unmount(){l&&(e(null,a._container),delete a._container.__vue_app__)},provide(d,f){return o.provides[d]=f,a}};return a}}function mo(e,t,s,i,n=!1){if(ne(e)){e.forEach((v,k)=>mo(v,t&&(ne(t)?t[k]:t),s,i,n));return}if(si(i)&&!n)return;const o=i.shapeFlag&4?yn(i.component)||i.component.proxy:i.el,r=n?null:o,{i:l,r:a}=e,d=t&&t.r,f=l.refs===Fe?l.refs={}:l.refs,h=l.setupState;if(d!=null&&d!==a&&(Ze(d)?(f[d]=null,be(h,d)&&(h[d]=null)):nt(d)&&(d.value=null)),ue(a))rs(a,l,12,[r,f]);else{const v=Ze(a),k=nt(a);if(v||k){const b=()=>{if(e.f){const _=v?be(h,a)?h[a]:f[a]:a.value;n?ne(_)&&To(_,o):ne(_)?_.includes(o)||_.push(o):v?(f[a]=[o],be(h,a)&&(h[a]=f[a])):(a.value=[o],e.k&&(f[e.k]=a.value))}else v?(f[a]=r,be(h,a)&&(h[a]=r)):k&&(a.value=r,e.k&&(f[e.k]=r))};r?(b.id=-1,ft(b,s)):b()}}}const ft=Mf;function lh(e){return ah(e)}function ah(e,t){const s=Pd();s.__VUE__=!0;const{insert:i,remove:n,patchProp:o,createElement:r,createText:l,createComment:a,setText:d,setElementText:f,parentNode:h,nextSibling:v,setScopeId:k=Et,insertStaticContent:b}=e,_=(g,y,C,A=null,L=null,R=null,B=!1,$=null,F=!!y.dynamicChildren)=>{if(g===y)return;g&&!ws(g,y)&&(A=Te(g),je(g,L,R,!0),g=null),y.patchFlag===-2&&(F=!1,y.dynamicChildren=null);const{type:M,ref:Q,shapeFlag:J}=y;switch(M){case gn:E(g,y,C,A);break;case yt:P(g,y,C,A);break;case zi:g==null&&Y(y,C,A,B);break;case Pe:z(g,y,C,A,L,R,B,$,F);break;default:J&1?le(g,y,C,A,L,R,B,$,F):J&6?me(g,y,C,A,L,R,B,$,F):(J&64||J&128)&&M.process(g,y,C,A,L,R,B,$,F,Xt)}Q!=null&&L&&mo(Q,g&&g.ref,R,y||g,!y)},E=(g,y,C,A)=>{if(g==null)i(y.el=l(y.children),C,A);else{const L=y.el=g.el;y.children!==g.children&&d(L,y.children)}},P=(g,y,C,A)=>{g==null?i(y.el=a(y.children||""),C,A):y.el=g.el},Y=(g,y,C,A)=>{[g.el,g.anchor]=b(g.children,y,C,A,g.el,g.anchor)},K=({el:g,anchor:y},C,A)=>{let L;for(;g&&g!==y;)L=v(g),i(g,C,A),g=L;i(y,C,A)},se=({el:g,anchor:y})=>{let C;for(;g&&g!==y;)C=v(g),n(g),g=C;n(y)},le=(g,y,C,A,L,R,B,$,F)=>{B=B||y.type==="svg",g==null?$e(y,C,A,L,R,B,$,F):q(g,y,L,R,B,$,F)},$e=(g,y,C,A,L,R,B,$)=>{let F,M;const{type:Q,props:J,shapeFlag:ee,transition:ie,dirs:pe}=g;if(F=g.el=r(g.type,R,J&&J.is,J),ee&8?f(F,g.children):ee&16&&X(g.children,F,null,A,L,R&&Q!=="foreignObject",B,$),pe&&fs(g,null,A,"created"),ke(F,g,g.scopeId,B,A),J){for(const Se in J)Se!=="value"&&!Di(Se)&&o(F,Se,null,J[Se],R,g.children,A,L,Z);"value"in J&&o(F,"value",null,J.value),(M=J.onVnodeBeforeMount)&&At(M,A,g)}pe&&fs(g,null,A,"beforeMount");const Le=(!L||L&&!L.pendingBranch)&&ie&&!ie.persisted;Le&&ie.beforeEnter(F),i(F,y,C),((M=J&&J.onVnodeMounted)||Le||pe)&&ft(()=>{M&&At(M,A,g),Le&&ie.enter(F),pe&&fs(g,null,A,"mounted")},L)},ke=(g,y,C,A,L)=>{if(C&&k(g,C),A)for(let R=0;R<A.length;R++)k(g,A[R]);if(L){let R=L.subTree;if(y===R){const B=L.vnode;ke(g,B,B.scopeId,B.slotScopeIds,L.parent)}}},X=(g,y,C,A,L,R,B,$,F=0)=>{for(let M=F;M<g.length;M++){const Q=g[M]=$?ss(g[M]):Mt(g[M]);_(null,Q,y,C,A,L,R,B,$)}},q=(g,y,C,A,L,R,B)=>{const $=y.el=g.el;let{patchFlag:F,dynamicChildren:M,dirs:Q}=y;F|=g.patchFlag&16;const J=g.props||Fe,ee=y.props||Fe;let ie;C&&hs(C,!1),(ie=ee.onVnodeBeforeUpdate)&&At(ie,C,y,g),Q&&fs(y,g,C,"beforeUpdate"),C&&hs(C,!0);const pe=L&&y.type!=="foreignObject";if(M?fe(g.dynamicChildren,M,$,C,A,pe,R):B||ge(g,y,$,null,C,A,pe,R,!1),F>0){if(F&16)de($,y,J,ee,C,A,L);else if(F&2&&J.class!==ee.class&&o($,"class",null,ee.class,L),F&4&&o($,"style",J.style,ee.style,L),F&8){const Le=y.dynamicProps;for(let Se=0;Se<Le.length;Se++){const p=Le[Se],u=J[p],O=ee[p];(O!==u||p==="value")&&o($,p,u,O,L,g.children,C,A,Z)}}F&1&&g.children!==y.children&&f($,y.children)}else!B&&M==null&&de($,y,J,ee,C,A,L);((ie=ee.onVnodeUpdated)||Q)&&ft(()=>{ie&&At(ie,C,y,g),Q&&fs(y,g,C,"updated")},A)},fe=(g,y,C,A,L,R,B)=>{for(let $=0;$<y.length;$++){const F=g[$],M=y[$],Q=F.el&&(F.type===Pe||!ws(F,M)||F.shapeFlag&70)?h(F.el):C;_(F,M,Q,null,A,L,R,B,!0)}},de=(g,y,C,A,L,R,B)=>{if(C!==A){if(C!==Fe)for(const $ in C)!Di($)&&!($ in A)&&o(g,$,C[$],null,B,y.children,L,R,Z);for(const $ in A){if(Di($))continue;const F=A[$],M=C[$];F!==M&&$!=="value"&&o(g,$,M,F,B,y.children,L,R,Z)}"value"in A&&o(g,"value",C.value,A.value)}},z=(g,y,C,A,L,R,B,$,F)=>{const M=y.el=g?g.el:l(""),Q=y.anchor=g?g.anchor:l("");let{patchFlag:J,dynamicChildren:ee,slotScopeIds:ie}=y;ie&&($=$?$.concat(ie):ie),g==null?(i(M,C,A),i(Q,C,A),X(y.children,C,Q,L,R,B,$,F)):J>0&&J&64&&ee&&g.dynamicChildren?(fe(g.dynamicChildren,ee,C,L,R,B,$),(y.key!=null||L&&y===L.subTree)&&Da(g,y,!0)):ge(g,y,C,Q,L,R,B,$,F)},me=(g,y,C,A,L,R,B,$,F)=>{y.slotScopeIds=$,g==null?y.shapeFlag&512?L.ctx.activate(y,C,A,B,F):xe(y,C,A,L,R,B,F):oe(g,y,F)},xe=(g,y,C,A,L,R,B)=>{const $=g.component=gh(g,A,L);if(dn(g)&&($.ctx.renderer=Xt),bh($),$.asyncDep){if(L&&L.registerDep($,he),!g.el){const F=$.subTree=V(yt);P(null,F,y,C)}return}he($,g,y,C,L,R,B)},oe=(g,y,C)=>{const A=y.component=g.component;if(Lf(g,y,C))if(A.asyncDep&&!A.asyncResolved){Ce(A,y,C);return}else A.next=y,_f(A.update),A.update();else y.el=g.el,A.vnode=y},he=(g,y,C,A,L,R,B)=>{const $=()=>{if(g.isMounted){let{next:Q,bu:J,u:ee,parent:ie,vnode:pe}=g,Le=Q,Se;hs(g,!1),Q?(Q.el=pe.el,Ce(g,Q,B)):Q=pe,J&&Bi(J),(Se=Q.props&&Q.props.onVnodeBeforeUpdate)&&At(Se,ie,Q,pe),hs(g,!0);const p=zn(g),u=g.subTree;g.subTree=p,_(u,p,h(u.el),Te(u),g,L,R),Q.el=p.el,Le===null&&Af(g,p.el),ee&&ft(ee,L),(Se=Q.props&&Q.props.onVnodeUpdated)&&ft(()=>At(Se,ie,Q,pe),L)}else{let Q;const{el:J,props:ee}=y,{bm:ie,m:pe,parent:Le}=g,Se=si(y);if(hs(g,!1),ie&&Bi(ie),!Se&&(Q=ee&&ee.onVnodeBeforeMount)&&At(Q,Le,y),hs(g,!0),J&&Ws){const p=()=>{g.subTree=zn(g),Ws(J,g.subTree,g,L,null)};Se?y.type.__asyncLoader().then(()=>!g.isUnmounted&&p()):p()}else{const p=g.subTree=zn(g);_(null,p,C,A,g,L,R),y.el=p.el}if(pe&&ft(pe,L),!Se&&(Q=ee&&ee.onVnodeMounted)){const p=y;ft(()=>At(Q,Le,p),L)}(y.shapeFlag&256||Le&&si(Le.vnode)&&Le.vnode.shapeFlag&256)&&g.a&&ft(g.a,L),g.isMounted=!0,y=C=A=null}},F=g.effect=new Po($,()=>zo(M),g.scope),M=g.update=()=>F.run();M.id=g.uid,hs(g,!0),M()},Ce=(g,y,C)=>{y.component=g;const A=g.vnode.props;g.vnode=y,g.next=null,th(g,y.props,A,C),nh(g,y.children,C),Vs(),Ur(),Us()},ge=(g,y,C,A,L,R,B,$,F=!1)=>{const M=g&&g.children,Q=g?g.shapeFlag:0,J=y.children,{patchFlag:ee,shapeFlag:ie}=y;if(ee>0){if(ee&128){Me(M,J,C,A,L,R,B,$,F);return}else if(ee&256){Re(M,J,C,A,L,R,B,$,F);return}}ie&8?(Q&16&&Z(M,L,R),J!==M&&f(C,J)):Q&16?ie&16?Me(M,J,C,A,L,R,B,$,F):Z(M,L,R,!0):(Q&8&&f(C,""),ie&16&&X(J,C,A,L,R,B,$,F))},Re=(g,y,C,A,L,R,B,$,F)=>{g=g||Ms,y=y||Ms;const M=g.length,Q=y.length,J=Math.min(M,Q);let ee;for(ee=0;ee<J;ee++){const ie=y[ee]=F?ss(y[ee]):Mt(y[ee]);_(g[ee],ie,C,null,L,R,B,$,F)}M>Q?Z(g,L,R,!0,!1,J):X(y,C,A,L,R,B,$,F,J)},Me=(g,y,C,A,L,R,B,$,F)=>{let M=0;const Q=y.length;let J=g.length-1,ee=Q-1;for(;M<=J&&M<=ee;){const ie=g[M],pe=y[M]=F?ss(y[M]):Mt(y[M]);if(ws(ie,pe))_(ie,pe,C,null,L,R,B,$,F);else break;M++}for(;M<=J&&M<=ee;){const ie=g[J],pe=y[ee]=F?ss(y[ee]):Mt(y[ee]);if(ws(ie,pe))_(ie,pe,C,null,L,R,B,$,F);else break;J--,ee--}if(M>J){if(M<=ee){const ie=ee+1,pe=ie<Q?y[ie].el:A;for(;M<=ee;)_(null,y[M]=F?ss(y[M]):Mt(y[M]),C,pe,L,R,B,$,F),M++}}else if(M>ee)for(;M<=J;)je(g[M],L,R,!0),M++;else{const ie=M,pe=M,Le=new Map;for(M=pe;M<=ee;M++){const ae=y[M]=F?ss(y[M]):Mt(y[M]);ae.key!=null&&Le.set(ae.key,M)}let Se,p=0;const u=ee-pe+1;let O=!1,W=0;const H=new Array(u);for(M=0;M<u;M++)H[M]=0;for(M=ie;M<=J;M++){const ae=g[M];if(p>=u){je(ae,L,R,!0);continue}let _e;if(ae.key!=null)_e=Le.get(ae.key);else for(Se=pe;Se<=ee;Se++)if(H[Se-pe]===0&&ws(ae,y[Se])){_e=Se;break}_e===void 0?je(ae,L,R,!0):(H[_e-pe]=M+1,_e>=W?W=_e:O=!0,_(ae,y[_e],C,null,L,R,B,$,F),p++)}const te=O?ch(H):Ms;for(Se=te.length-1,M=u-1;M>=0;M--){const ae=pe+M,_e=y[ae],He=ae+1<Q?y[ae+1].el:A;H[M]===0?_(null,_e,C,He,L,R,B,$,F):O&&(Se<0||M!==te[Se]?Ue(_e,C,He,2):Se--)}}},Ue=(g,y,C,A,L=null)=>{const{el:R,type:B,transition:$,children:F,shapeFlag:M}=g;if(M&6){Ue(g.component.subTree,y,C,A);return}if(M&128){g.suspense.move(y,C,A);return}if(M&64){B.move(g,y,C,Xt);return}if(B===Pe){i(R,y,C);for(let J=0;J<F.length;J++)Ue(F[J],y,C,A);i(g.anchor,y,C);return}if(B===zi){K(g,y,C);return}if(A!==2&&M&1&&$)if(A===0)$.beforeEnter(R),i(R,y,C),ft(()=>$.enter(R),L);else{const{leave:J,delayLeave:ee,afterLeave:ie}=$,pe=()=>i(R,y,C),Le=()=>{J(R,()=>{pe(),ie&&ie()})};ee?ee(R,pe,Le):Le()}else i(R,y,C)},je=(g,y,C,A=!1,L=!1)=>{const{type:R,props:B,ref:$,children:F,dynamicChildren:M,shapeFlag:Q,patchFlag:J,dirs:ee}=g;if($!=null&&mo($,null,C,g,!0),Q&256){y.ctx.deactivate(g);return}const ie=Q&1&&ee,pe=!si(g);let Le;if(pe&&(Le=B&&B.onVnodeBeforeUnmount)&&At(Le,y,g),Q&6)Ge(g.component,C,A);else{if(Q&128){g.suspense.unmount(C,A);return}ie&&fs(g,null,y,"beforeUnmount"),Q&64?g.type.remove(g,y,C,L,Xt,A):M&&(R!==Pe||J>0&&J&64)?Z(M,y,C,!1,!0):(R===Pe&&J&384||!L&&Q&16)&&Z(F,y,C),A&&Lt(g)}(pe&&(Le=B&&B.onVnodeUnmounted)||ie)&&ft(()=>{Le&&At(Le,y,g),ie&&fs(g,null,y,"unmounted")},C)},Lt=g=>{const{type:y,el:C,anchor:A,transition:L}=g;if(y===Pe){Ht(C,A);return}if(y===zi){se(g);return}const R=()=>{n(C),L&&!L.persisted&&L.afterLeave&&L.afterLeave()};if(g.shapeFlag&1&&L&&!L.persisted){const{leave:B,delayLeave:$}=L,F=()=>B(C,R);$?$(g.el,R,F):F()}else R()},Ht=(g,y)=>{let C;for(;g!==y;)C=v(g),n(g),g=C;n(y)},Ge=(g,y,C)=>{const{bum:A,scope:L,update:R,subTree:B,um:$}=g;A&&Bi(A),L.stop(),R&&(R.active=!1,je(B,g,y,C)),$&&ft($,y),ft(()=>{g.isUnmounted=!0},y),y&&y.pendingBranch&&!y.isUnmounted&&g.asyncDep&&!g.asyncResolved&&g.suspenseId===y.pendingId&&(y.deps--,y.deps===0&&y.resolve())},Z=(g,y,C,A=!1,L=!1,R=0)=>{for(let B=R;B<g.length;B++)je(g[B],y,C,A,L)},Te=g=>g.shapeFlag&6?Te(g.component.subTree):g.shapeFlag&128?g.suspense.next():v(g.anchor||g.el),js=(g,y,C)=>{g==null?y._vnode&&je(y._vnode,null,null,!0):_(y._vnode||null,g,y,null,null,null,C),Ur(),ba(),y._vnode=g},Xt={p:_,um:je,m:Ue,r:Lt,mt:xe,mc:X,pc:ge,pbc:fe,n:Te,o:e};let qs,Ws;return t&&([qs,Ws]=t(Xt)),{render:js,hydrate:qs,createApp:rh(js,qs)}}function hs({effect:e,update:t},s){e.allowRecurse=t.allowRecurse=s}function Da(e,t,s=!1){const i=e.children,n=t.children;if(ne(i)&&ne(n))for(let o=0;o<i.length;o++){const r=i[o];let l=n[o];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=n[o]=ss(n[o]),l.el=r.el),s||Da(r,l)),l.type===gn&&(l.el=r.el)}}function ch(e){const t=e.slice(),s=[0];let i,n,o,r,l;const a=e.length;for(i=0;i<a;i++){const d=e[i];if(d!==0){if(n=s[s.length-1],e[n]<d){t[i]=n,s.push(i);continue}for(o=0,r=s.length-1;o<r;)l=o+r>>1,e[s[l]]<d?o=l+1:r=l;d<e[s[o]]&&(o>0&&(t[i]=s[o-1]),s[o]=i)}}for(o=s.length,r=s[o-1];o-- >0;)s[o]=r,r=t[r];return s}const uh=e=>e.__isTeleport,Pe=Symbol(void 0),gn=Symbol(void 0),yt=Symbol(void 0),zi=Symbol(void 0),ni=[];let Ct=null;function N(e=!1){ni.push(Ct=e?null:[])}function dh(){ni.pop(),Ct=ni[ni.length-1]||null}let di=1;function Qr(e){di+=e}function Ba(e){return e.dynamicChildren=di>0?Ct||Ms:null,dh(),di>0&&Ct&&Ct.push(e),e}function U(e,t,s,i,n,o){return Ba(c(e,t,s,i,n,o,!0))}function Ie(e,t,s,i,n){return Ba(V(e,t,s,i,n,!0))}function Xi(e){return e?e.__v_isVNode===!0:!1}function ws(e,t){return e.type===t.type&&e.key===t.key}const vn="__vInternal",Ia=({key:e})=>e??null,Vi=({ref:e,ref_key:t,ref_for:s})=>e!=null?Ze(e)||nt(e)||ue(e)?{i:ot,r:e,k:t,f:!!s}:e:null;function c(e,t=null,s=null,i=0,n=null,o=e===Pe?0:1,r=!1,l=!1){const a={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Ia(t),ref:t&&Vi(t),scopeId:_a,slotScopeIds:null,children:s,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:o,patchFlag:i,dynamicProps:n,dynamicChildren:null,appContext:null,ctx:ot};return l?(Wo(a,s),o&128&&e.normalize(a)):s&&(a.shapeFlag|=Ze(s)?8:16),di>0&&!r&&Ct&&(a.patchFlag>0||o&6)&&a.patchFlag!==32&&Ct.push(a),a}const V=fh;function fh(e,t=null,s=null,i=0,n=null,o=!1){if((!e||e===Wf)&&(e=yt),Xi(e)){const l=cs(e,t,!0);return s&&Wo(l,s),di>0&&!o&&Ct&&(l.shapeFlag&6?Ct[Ct.indexOf(e)]=l:Ct.push(l)),l.patchFlag|=-2,l}if(xh(e)&&(e=e.__vccOpts),t){t=hh(t);let{class:l,style:a}=t;l&&!Ze(l)&&(t.class=ut(l)),De(a)&&(ca(a)&&!ne(a)&&(a=rt({},a)),t.style=St(a))}const r=Ze(e)?1:Tf(e)?128:uh(e)?64:De(e)?4:ue(e)?2:0;return c(e,t,s,i,n,r,o,!0)}function hh(e){return e?ca(e)||vn in e?rt({},e):e:null}function cs(e,t,s=!1){const{props:i,ref:n,patchFlag:o,children:r}=e,l=t?za(i||{},t):i;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&Ia(l),ref:t&&t.ref?s&&n?ne(n)?n.concat(Vi(t)):[n,Vi(t)]:Vi(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:r,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Pe?o===-1?16:o|16:o,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&cs(e.ssContent),ssFallback:e.ssFallback&&cs(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function qo(e=" ",t=0){return V(gn,null,e,t)}function bn(e,t){const s=V(zi,null,e);return s.staticCount=t,s}function Ee(e="",t=!1){return t?(N(),Ie(yt,null,e)):V(yt,null,e)}function Mt(e){return e==null||typeof e=="boolean"?V(yt):ne(e)?V(Pe,null,e.slice()):typeof e=="object"?ss(e):V(gn,null,String(e))}function ss(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:cs(e)}function Wo(e,t){let s=0;const{shapeFlag:i}=e;if(t==null)t=null;else if(ne(t))s=16;else if(typeof t=="object")if(i&65){const n=t.default;n&&(n._c&&(n._d=!1),Wo(e,n()),n._c&&(n._d=!0));return}else{s=32;const n=t._;!n&&!(vn in t)?t._ctx=ot:n===3&&ot&&(ot.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else ue(t)?(t={default:t,_ctx:ot},s=32):(t=String(t),i&64?(s=16,t=[qo(t)]):s=8);e.children=t,e.shapeFlag|=s}function za(...e){const t={};for(let s=0;s<e.length;s++){const i=e[s];for(const n in i)if(n==="class")t.class!==i.class&&(t.class=ut([t.class,i.class]));else if(n==="style")t.style=St([t.style,i.style]);else if(nn(n)){const o=t[n],r=i[n];r&&o!==r&&!(ne(o)&&o.includes(r))&&(t[n]=o?[].concat(o,r):r)}else n!==""&&(t[n]=i[n])}return t}function At(e,t,s,i=null){bt(e,t,7,[s,i])}const ph=Fa();let mh=0;function gh(e,t,s){const i=e.type,n=(t?t.appContext:e.appContext)||ph,o={uid:mh++,vnode:e,type:i,parent:t,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new $d(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Pa(i,n),emitsOptions:wa(i,n),emit:null,emitted:null,propsDefaults:Fe,inheritAttrs:i.inheritAttrs,ctx:Fe,data:Fe,props:Fe,attrs:Fe,slots:Fe,refs:Fe,setupState:Fe,setupContext:null,suspense:s,suspenseId:s?s.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return o.ctx={_:o},o.root=t?t.root:o,o.emit=Cf.bind(null,o),e.ce&&e.ce(o),o}let Ye=null;const vh=()=>Ye||ot,Bs=e=>{Ye=e,e.scope.on()},Ss=()=>{Ye&&Ye.scope.off(),Ye=null};function Va(e){return e.vnode.shapeFlag&4}let fi=!1;function bh(e,t=!1){fi=t;const{props:s,children:i}=e.vnode,n=Va(e);eh(e,s,n,t),ih(e,i);const o=n?yh(e,t):void 0;return fi=!1,o}function yh(e,t){const s=e.type;e.accessCache=Object.create(null),e.proxy=ua(new Proxy(e.ctx,Yf));const{setup:i}=s;if(i){const n=e.setupContext=i.length>1?_h(e):null;Bs(e),Vs();const o=rs(i,e,0,[e.props,n]);if(Us(),Ss(),Jl(o)){if(o.then(Ss,Ss),t)return o.then(r=>{el(e,r,t)}).catch(r=>{cn(r,e,0)});e.asyncDep=o}else el(e,o,t)}else Ua(e,t)}function el(e,t,s){ue(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:De(t)&&(e.setupState=ha(t)),Ua(e,s)}let tl;function Ua(e,t,s){const i=e.type;if(!e.render){if(!t&&tl&&!i.render){const n=i.template||Uo(e).template;if(n){const{isCustomElement:o,compilerOptions:r}=e.appContext.config,{delimiters:l,compilerOptions:a}=i,d=rt(rt({isCustomElement:o,delimiters:l},r),a);i.render=tl(n,d)}}e.render=i.render||Et}Bs(e),Vs(),Jf(e),Us(),Ss()}function wh(e){return new Proxy(e.attrs,{get(t,s){return ht(e,"get","$attrs"),t[s]}})}function _h(e){const t=i=>{e.exposed=i||{}};let s;return{get attrs(){return s||(s=wh(e))},slots:e.slots,emit:e.emit,expose:t}}function yn(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(ha(ua(e.exposed)),{get(t,s){if(s in t)return t[s];if(s in ii)return ii[s](e)},has(t,s){return s in t||s in ii}}))}function kh(e,t=!0){return ue(e)?e.displayName||e.name:e.name||t&&e.__name}function xh(e){return ue(e)&&"__vccOpts"in e}const Vt=(e,t)=>bf(e,t,fi);function Ch(e,t,s){const i=arguments.length;return i===2?De(t)&&!ne(t)?Xi(t)?V(e,null,[t]):V(e,t):V(e,null,t):(i>3?s=Array.prototype.slice.call(arguments,2):i===3&&Xi(s)&&(s=[s]),V(e,t,s))}const Sh=Symbol(""),Eh=()=>Ii(Sh),Lh="3.2.47",Ah="http://www.w3.org/2000/svg",_s=typeof document<"u"?document:null,sl=_s&&_s.createElement("template"),Th={insert:(e,t,s)=>{t.insertBefore(e,s||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,s,i)=>{const n=t?_s.createElementNS(Ah,e):_s.createElement(e,s?{is:s}:void 0);return e==="select"&&i&&i.multiple!=null&&n.setAttribute("multiple",i.multiple),n},createText:e=>_s.createTextNode(e),createComment:e=>_s.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>_s.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,s,i,n,o){const r=s?s.previousSibling:t.lastChild;if(n&&(n===o||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),s),!(n===o||!(n=n.nextSibling)););else{sl.innerHTML=i?`<svg>${e}</svg>`:e;const l=sl.content;if(i){const a=l.firstChild;for(;a.firstChild;)l.appendChild(a.firstChild);l.removeChild(a)}t.insertBefore(l,s)}return[r?r.nextSibling:t.firstChild,s?s.previousSibling:t.lastChild]}};function Mh(e,t,s){const i=e._vtc;i&&(t=(t?[t,...i]:[...i]).join(" ")),t==null?e.removeAttribute("class"):s?e.setAttribute("class",t):e.className=t}function Oh(e,t,s){const i=e.style,n=Ze(s);if(s&&!n){if(t&&!Ze(t))for(const o in t)s[o]==null&&go(i,o,"");for(const o in s)go(i,o,s[o])}else{const o=i.display;n?t!==s&&(i.cssText=s):t&&e.removeAttribute("style"),"_vod"in e&&(i.display=o)}}const il=/\s*!important$/;function go(e,t,s){if(ne(s))s.forEach(i=>go(e,t,i));else if(s==null&&(s=""),t.startsWith("--"))e.setProperty(t,s);else{const i=Nh(e,t);il.test(s)?e.setProperty(zs(i),s.replace(il,""),"important"):e[i]=s}}const nl=["Webkit","Moz","ms"],jn={};function Nh(e,t){const s=jn[t];if(s)return s;let i=Rt(t);if(i!=="filter"&&i in e)return jn[t]=i;i=ln(i);for(let n=0;n<nl.length;n++){const o=nl[n]+i;if(o in e)return jn[t]=o}return t}const ol="http://www.w3.org/1999/xlink";function Ph(e,t,s,i,n){if(i&&t.startsWith("xlink:"))s==null?e.removeAttributeNS(ol,t.slice(6,t.length)):e.setAttributeNS(ol,t,s);else{const o=Sd(t);s==null||o&&!Wl(s)?e.removeAttribute(t):e.setAttribute(t,o?"":s)}}function $h(e,t,s,i,n,o,r){if(t==="innerHTML"||t==="textContent"){i&&r(i,n,o),e[t]=s??"";return}if(t==="value"&&e.tagName!=="PROGRESS"&&!e.tagName.includes("-")){e._value=s;const a=s??"";(e.value!==a||e.tagName==="OPTION")&&(e.value=a),s==null&&e.removeAttribute(t);return}let l=!1;if(s===""||s==null){const a=typeof e[t];a==="boolean"?s=Wl(s):s==null&&a==="string"?(s="",l=!0):a==="number"&&(s=0,l=!0)}try{e[t]=s}catch{}l&&e.removeAttribute(t)}function Ts(e,t,s,i){e.addEventListener(t,s,i)}function Rh(e,t,s,i){e.removeEventListener(t,s,i)}function Hh(e,t,s,i,n=null){const o=e._vei||(e._vei={}),r=o[t];if(i&&r)r.value=i;else{const[l,a]=Fh(t);if(i){const d=o[t]=Ih(i,n);Ts(e,l,d,a)}else r&&(Rh(e,l,r,a),o[t]=void 0)}}const rl=/(?:Once|Passive|Capture)$/;function Fh(e){let t;if(rl.test(e)){t={};let i;for(;i=e.match(rl);)e=e.slice(0,e.length-i[0].length),t[i[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):zs(e.slice(2)),t]}let qn=0;const Dh=Promise.resolve(),Bh=()=>qn||(Dh.then(()=>qn=0),qn=Date.now());function Ih(e,t){const s=i=>{if(!i._vts)i._vts=Date.now();else if(i._vts<=s.attached)return;bt(zh(i,s.value),t,5,[i])};return s.value=e,s.attached=Bh(),s}function zh(e,t){if(ne(t)){const s=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{s.call(e),e._stopped=!0},t.map(i=>n=>!n._stopped&&i&&i(n))}else return t}const ll=/^on[a-z]/,Vh=(e,t,s,i,n=!1,o,r,l,a)=>{t==="class"?Mh(e,i,n):t==="style"?Oh(e,s,i):nn(t)?Ao(t)||Hh(e,t,s,i,r):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):Uh(e,t,i,n))?$h(e,t,i,o,r,l,a):(t==="true-value"?e._trueValue=i:t==="false-value"&&(e._falseValue=i),Ph(e,t,i,n))};function Uh(e,t,s,i){return i?!!(t==="innerHTML"||t==="textContent"||t in e&&ll.test(t)&&ue(s)):t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA"||ll.test(t)&&Ze(s)?!1:t in e}const es="transition",Js="animation",wn=(e,{slots:t})=>Ch(Ca,jh(e),t);wn.displayName="Transition";const ja={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String};wn.props=rt({},Ca.props,ja);const ps=(e,t=[])=>{ne(e)?e.forEach(s=>s(...t)):e&&e(...t)},al=e=>e?ne(e)?e.some(t=>t.length>1):e.length>1:!1;function jh(e){const t={};for(const z in e)z in ja||(t[z]=e[z]);if(e.css===!1)return t;const{name:s="v",type:i,duration:n,enterFromClass:o=`${s}-enter-from`,enterActiveClass:r=`${s}-enter-active`,enterToClass:l=`${s}-enter-to`,appearFromClass:a=o,appearActiveClass:d=r,appearToClass:f=l,leaveFromClass:h=`${s}-leave-from`,leaveActiveClass:v=`${s}-leave-active`,leaveToClass:k=`${s}-leave-to`}=e,b=qh(n),_=b&&b[0],E=b&&b[1],{onBeforeEnter:P,onEnter:Y,onEnterCancelled:K,onLeave:se,onLeaveCancelled:le,onBeforeAppear:$e=P,onAppear:ke=Y,onAppearCancelled:X=K}=t,q=(z,me,xe)=>{ms(z,me?f:l),ms(z,me?d:r),xe&&xe()},fe=(z,me)=>{z._isLeaving=!1,ms(z,h),ms(z,k),ms(z,v),me&&me()},de=z=>(me,xe)=>{const oe=z?ke:Y,he=()=>q(me,z,xe);ps(oe,[me,he]),cl(()=>{ms(me,z?a:o),ts(me,z?f:l),al(oe)||ul(me,i,_,he)})};return rt(t,{onBeforeEnter(z){ps(P,[z]),ts(z,o),ts(z,r)},onBeforeAppear(z){ps($e,[z]),ts(z,a),ts(z,d)},onEnter:de(!1),onAppear:de(!0),onLeave(z,me){z._isLeaving=!0;const xe=()=>fe(z,me);ts(z,h),Yh(),ts(z,v),cl(()=>{z._isLeaving&&(ms(z,h),ts(z,k),al(se)||ul(z,i,E,xe))}),ps(se,[z,xe])},onEnterCancelled(z){q(z,!1),ps(K,[z])},onAppearCancelled(z){q(z,!0),ps(X,[z])},onLeaveCancelled(z){fe(z),ps(le,[z])}})}function qh(e){if(e==null)return null;if(De(e))return[Wn(e.enter),Wn(e.leave)];{const t=Wn(e);return[t,t]}}function Wn(e){return Nd(e)}function ts(e,t){t.split(/\s+/).forEach(s=>s&&e.classList.add(s)),(e._vtc||(e._vtc=new Set)).add(t)}function ms(e,t){t.split(/\s+/).forEach(i=>i&&e.classList.remove(i));const{_vtc:s}=e;s&&(s.delete(t),s.size||(e._vtc=void 0))}function cl(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let Wh=0;function ul(e,t,s,i){const n=e._endId=++Wh,o=()=>{n===e._endId&&i()};if(s)return setTimeout(o,s);const{type:r,timeout:l,propCount:a}=Kh(e,t);if(!r)return i();const d=r+"end";let f=0;const h=()=>{e.removeEventListener(d,v),o()},v=k=>{k.target===e&&++f>=a&&h()};setTimeout(()=>{f<a&&h()},l+1),e.addEventListener(d,v)}function Kh(e,t){const s=window.getComputedStyle(e),i=b=>(s[b]||"").split(", "),n=i(`${es}Delay`),o=i(`${es}Duration`),r=dl(n,o),l=i(`${Js}Delay`),a=i(`${Js}Duration`),d=dl(l,a);let f=null,h=0,v=0;t===es?r>0&&(f=es,h=r,v=o.length):t===Js?d>0&&(f=Js,h=d,v=a.length):(h=Math.max(r,d),f=h>0?r>d?es:Js:null,v=f?f===es?o.length:a.length:0);const k=f===es&&/\b(transform|all)(,|$)/.test(i(`${es}Property`).toString());return{type:f,timeout:h,propCount:v,hasTransform:k}}function dl(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((s,i)=>fl(s)+fl(e[i])))}function fl(e){return Number(e.slice(0,-1).replace(",","."))*1e3}function Yh(){return document.body.offsetHeight}const hl=e=>{const t=e.props["onUpdate:modelValue"]||!1;return ne(t)?s=>Bi(t,s):t};function Jh(e){e.target.composing=!0}function pl(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const qa={created(e,{modifiers:{lazy:t,trim:s,number:i}},n){e._assign=hl(n);const o=i||n.props&&n.props.type==="number";Ts(e,t?"change":"input",r=>{if(r.target.composing)return;let l=e.value;s&&(l=l.trim()),o&&(l=io(l)),e._assign(l)}),s&&Ts(e,"change",()=>{e.value=e.value.trim()}),t||(Ts(e,"compositionstart",Jh),Ts(e,"compositionend",pl),Ts(e,"change",pl))},mounted(e,{value:t}){e.value=t??""},beforeUpdate(e,{value:t,modifiers:{lazy:s,trim:i,number:n}},o){if(e._assign=hl(o),e.composing||document.activeElement===e&&e.type!=="range"&&(s||i&&e.value.trim()===t||(n||e.type==="number")&&io(e.value)===t))return;const r=t??"";e.value!==r&&(e.value=r)}},Xh=["ctrl","shift","alt","meta"],Zh={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,t)=>Xh.some(s=>e[`${s}Key`]&&!t.includes(s))},Ko=(e,t)=>(s,...i)=>{for(let n=0;n<t.length;n++){const o=Zh[t[n]];if(o&&o(s,t))return}return e(s,...i)},Gh={beforeMount(e,{value:t},{transition:s}){e._vod=e.style.display==="none"?"":e.style.display,s&&t?s.beforeEnter(e):Xs(e,t)},mounted(e,{value:t},{transition:s}){s&&t&&s.enter(e)},updated(e,{value:t,oldValue:s},{transition:i}){!t!=!s&&(i?t?(i.beforeEnter(e),Xs(e,!0),i.enter(e)):i.leave(e,()=>{Xs(e,!1)}):Xs(e,t))},beforeUnmount(e,{value:t}){Xs(e,t)}};function Xs(e,t){e.style.display=t?e._vod:"none"}const Qh=rt({patchProp:Vh},Th);let ml;function ep(){return ml||(ml=lh(Qh))}const tp=(...e)=>{const t=ep().createApp(...e),{mount:s}=t;return t.mount=i=>{const n=sp(i);if(!n)return;const o=t._component;!ue(o)&&!o.render&&!o.template&&(o.template=n.innerHTML),n.innerHTML="";const r=s(n,!1,n instanceof SVGElement);return n instanceof Element&&(n.removeAttribute("v-cloak"),n.setAttribute("data-v-app","")),r},t};function sp(e){return Ze(e)?document.querySelector(e):e}const Je=(e,t)=>{const s=e.__vccOpts||e;for(const[i,n]of t)s[i]=n;return s},ip={data(){return{previewMode:"desktop"}},methods:{setPreviewMode(e){this.previewMode=e,this.emulatorSet(e)},emulatorSet(e){var t={tablet:800,phone:400,desktop:"100%"},s=function(i){var n=t[i];typeof n=="number"&&(n=n+"px"),mw.app.canvas.getFrame().style.width=n};s(e)}}},np={id:"preview-nav",class:"toolbar-nav toolbar-nav-hover"},op={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 48 36.17",style:{"enable-background":"new 0 0 48 36.17"},"xml:space":"preserve"},rp=c("path",{d:`M25.59,34.11h-3.58v-6.59h3.58V34.11z M14.16,34.88L14.16,34.88c0-0.71,0.58-1.29,1.29-1.29h17.1
                        c0.71,0,1.29,0.58,1.29,1.29v0c0,0.71-0.58,1.29-1.29,1.29h-17.1C14.74,36.17,14.16,35.59,14.16,34.88z`},null,-1),lp=c("path",{class:"st0",d:`M3.32,27.6h41.35c1.53,0,2.76-1.24,2.76-2.76V3.24c0-1.53-1.24-2.76-2.76-2.76H3.32
                        c-1.53,0-2.76,1.24-2.76,2.76v21.6C0.56,26.37,1.8,27.6,3.32,27.6z`},null,-1),ap=[rp,lp],cp={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 48 48",style:{"enable-background":"new 0 0 48 48"},"xml:space":"preserve"},up=c("path",{class:"st0",d:`M24.45,39.5c0.56,0,1.03-0.18,1.39-0.55c0.37-0.37,0.55-0.83,0.55-1.39s-0.18-1.03-0.55-1.39
                    c-0.37-0.37-0.83-0.55-1.39-0.55s-1.03,0.18-1.39,0.55c-0.37,0.37-0.55,0.83-0.55,1.39s0.18,1.03,0.55,1.39
                    C23.42,39.32,23.88,39.5,24.45,39.5z M7,46c-0.8,0-1.5-0.3-2.1-0.9C4.3,44.5,4,43.8,4,43V5c0-0.8,0.3-1.5,0.9-2.1C5.5,2.3,6.2,2,7,2
                    h34c0.8,0,1.5,0.3,2.1,0.9C43.7,3.5,44,4.2,44,5v38c0,0.8-0.3,1.5-0.9,2.1C42.5,45.7,41.8,46,41,46H7z`},null,-1),dp=[up],fp={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 48 48",style:{"enable-background":"new 0 0 48 48"},"xml:space":"preserve"},hp=c("path",{class:"st0",d:`M18,11.5c0.43,0,0.79-0.14,1.08-0.43c0.28-0.28,0.42-0.64,0.42-1.07s-0.14-0.79-0.42-1.07
                    C18.79,8.64,18.43,8.5,18,8.5s-0.79,0.14-1.08,0.43C16.64,9.21,16.5,9.57,16.5,10s0.14,0.79,0.42,1.07
                    C17.21,11.36,17.57,11.5,18,11.5z M13,46c-0.8,0-1.5-0.3-2.1-0.9C10.3,44.5,10,43.8,10,43V5c0-0.8,0.3-1.5,0.9-2.1
                    C11.5,2.3,12.2,2,13,2h22c0.8,0,1.5,0.3,2.1,0.9C37.7,3.5,38,4.2,38,5v38c0,0.8-0.3,1.5-0.9,2.1C36.5,45.7,35.8,46,35,46H13z`},null,-1),pp=[hp];function mp(e,t,s,i,n,o){return N(),U("div",null,[c("nav",np,[c("span",{onClick:t[0]||(t[0]=r=>o.setPreviewMode("desktop")),"data-preview":"desktop",class:ut([n.previewMode=="desktop"?"active":""])},[(N(),U("svg",op,ap))],2),c("span",{onClick:t[1]||(t[1]=r=>o.setPreviewMode("tablet")),"data-preview":"tablet",class:ut([n.previewMode=="tablet"?"active":""])},[(N(),U("svg",cp,dp))],2),c("span",{onClick:t[2]||(t[2]=r=>o.setPreviewMode("phone")),"data-preview":"phone",class:ut([n.previewMode=="phone"?"active":""])},[(N(),U("svg",fp,pp))],2)])])}const gp=Je(ip,[["render",mp]]),vp={data(){},mounted(){mw.app.on("ready",()=>{new Sc,fd()})}},bp=c("div",{class:"toolbar-nav",id:"mw-live-edit-editor"},null,-1),yp=[bp];function wp(e,t,s,i,n,o){return N(),U("div",null,yp)}const _p=Je(vp,[["render",wp]]),kp={},xp=bn('<button class="mw-le-btn mw-le-btn-icon" id="toolbar-undo" disabled><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12.5,8C9.85,8 7.45,9 5.6,10.6L2,7V16H11L7.38,12.38C8.77,11.22 10.54,10.5 12.5,10.5C16.04,10.5 19.05,12.81 20.1,16L22.47,15.22C21.08,11.03 17.15,8 12.5,8Z"></path></svg></button><button class="mw-le-btn mw-le-btn-icon" id="toolbar-redo" disabled><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.4,10.6C16.55,9 14.15,8 11.5,8C6.85,8 2.92,11.03 1.54,15.22L3.9,16C4.95,12.81 7.95,10.5 11.5,10.5C13.45,10.5 15.23,11.22 16.62,12.38L13,16H22V7L18.4,10.6Z"></path></svg></button>',2);function Cp(e,t){return xp}const Sp=Je(kp,[["render",Cp]]),Ep={data(){}},Lp={class:"mw-le-btn mw-le-btn-primary",id:"save-button"};function Ap(e,t,s,i,n,o){return N(),U("span",Lp," Save ")}const Tp=Je(Ep,[["render",Ap]]),Mp={components:{SaveButton:Tp,UndoRedo:Sp,Editor:_p,ResolutionSwitch:gp},data(){}},Op={id:"toolbar"},Np={class:"toolbar-nav toolbar-nav-hover"},Pp={href:"",class:"mw-le-btn mw-le-btn-icon mw-le-btn-primary2"},$p={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",style:{width:"32px"}},Rp=c("path",{d:"M21,11H6.83L10.41,7.41L9,6L3,12L9,18L10.41,16.58L6.83,13H21V11Z"},null,-1),Hp=[Rp],Fp={class:"toolbar-col"},Dp={class:"toolbar-nav toolbar-nav-hover"},Bp=c("span",{style:{width:"50px"}},null,-1),Ip=c("span",{class:"mw-le-btn mw-le-btn-icon",id:"preview-button",onclick:"pagePreviewToggle()"},[c("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},[c("title",null,"eye"),c("path",{d:"M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17M12,4.5C7,4.5 2.73,7.61 1,12C2.73,16.39 7,19.5 12,19.5C17,19.5 21.27,16.39 23,12C21.27,7.61 17,4.5 12,4.5Z"})])],-1),zp=bn('<div id="user-menu-wrapper"><span class="mw-le-hamburger" id="toolbar-user-menu-button"><span></span><span></span><span></span></span><div id="user-menu" class="mw-le-nav-box"><div class="mw-le-nav-box-content" id="user-menu-header"><small>Project</small><h3>Boris Website</h3><span class="mw-le-btn mw-le-btn-sm"> In Test Period </span><span class="mw-le-btn mw-le-btn-sm mw-le-btn-primary2"> Upgrade </span></div><nav><a href=""><svg viewBox="0 0 40 40"><path d="M20 27.3l2.1-2.1-3.7-3.7h9.1v-3h-9.1l3.7-3.7-2.1-2.1-7.3 7.3 7.3 7.3zM20 40c-2.73 0-5.32-.52-7.75-1.58-2.43-1.05-4.56-2.48-6.38-4.3s-3.25-3.94-4.3-6.38S0 22.73 0 20c0-2.77.53-5.37 1.57-7.8s2.48-4.55 4.3-6.35 3.94-3.22 6.38-4.28S17.27 0 20 0c2.77 0 5.37.53 7.8 1.57s4.55 2.48 6.35 4.28c1.8 1.8 3.23 3.92 4.28 6.35C39.48 14.63 40 17.23 40 20c0 2.73-.52 5.32-1.58 7.75-1.05 2.43-2.48 4.56-4.28 6.38-1.8 1.82-3.92 3.25-6.35 4.3C25.37 39.48 22.77 40 20 40zm0-3c4.73 0 8.75-1.66 12.05-4.97C35.35 28.71 37 24.7 37 20c0-4.73-1.65-8.75-4.95-12.05C28.75 4.65 24.73 3 20 3c-4.7 0-8.71 1.65-12.02 4.95S3 15.27 3 20c0 4.7 1.66 8.71 4.98 12.03C11.29 35.34 15.3 37 20 37z"></path></svg> Back to Admin </a><a href=""><svg xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 40 40" xml:space="preserve" enable-background="new 0 0 40 40"><path d="M14.7 23c-2 0-3.6-.7-5-2-1.3-1.4-2-3-2-4.9 0-1.9.7-3.5 2-4.9 1.4-1.3 3-2 5-2 1.8 0 3.5.7 4.8 2 1.4 1.4 2 3 2 4.9 0 1.9-.6 3.5-2 4.9-1.3 1.3-3 2-4.8 2zm0-3a3.8 3.8 0 0 0 3.9-3.9c0-1.1-.4-2-1.2-2.8a3.8 3.8 0 0 0-2.7-1c-1.1 0-2 .3-2.8 1-.8.8-1.1 1.7-1.1 2.8 0 1 .3 2 1.1 2.8.8.7 1.7 1.1 2.8 1.1zm15 5.3c-1.5 0-2.7-.5-3.8-1.6-1-1-1.5-2.2-1.5-3.7s.5-2.7 1.6-3.8 2.2-1.5 3.7-1.5 2.7.5 3.8 1.6S35 18.4 35 20s-.5 2.7-1.6 3.8-2.2 1.5-3.7 1.5zM17.1 36.8c1.6-3 3.6-5 6.1-6S28 29 29.7 29a12.6 12.6 0 0 1 4.2.6A18.3 18.3 0 0 0 37 20c0-4.7-1.6-8.8-5-12-3.3-3.3-7.3-5-12-5S11.2 4.7 8 8a16.8 16.8 0 0 0-2.2 21.2 19.2 19.2 0 0 1 13.8-1.4 13.6 13.6 0 0 0-3.2 2.2H14.8a16.2 16.2 0 0 0-7.1 1.6c1.2 1.4 2.7 2.5 4.3 3.4s3.4 1.5 5.2 1.8zM20 40A20.3 20.3 0 0 1 1.6 27.7 19.4 19.4 0 0 1 5.9 5.8a20.2 20.2 0 0 1 21.9-4.2A20.3 20.3 0 0 1 40 20a20.3 20.3 0 0 1-12.2 18.4c-2.4 1-5 1.6-7.8 1.6z"></path></svg> Users </a><a href=""><svg viewBox="0 0 40 40"><path d="M15.4 40l-1-6.3c-.63-.23-1.3-.55-2-.95-.7-.4-1.32-.82-1.85-1.25l-5.9 2.7L0 26l5.4-3.95a5.1 5.1 0 01-.12-1.02c-.02-.39-.03-.73-.03-1.03s.01-.64.02-1.02c.02-.38.06-.73.12-1.02L0 14l4.65-8.2 5.9 2.7c.53-.43 1.15-.85 1.85-1.25.7-.4 1.37-.7 2-.9l1-6.35h9.2l1 6.3c.63.23 1.31.54 2.02.93.72.38 1.33.81 1.83 1.27l5.9-2.7L40 14l-5.4 3.85c.07.33.11.69.12 1.08a19.5 19.5 0 010 2.13c-.02.37-.06.72-.12 1.05L40 26l-4.65 8.2-5.9-2.7c-.53.43-1.14.86-1.83 1.28-.68.42-1.36.72-2.02.92l-1 6.3h-9.2zM20 26.5c1.8 0 3.33-.63 4.6-1.9s1.9-2.8 1.9-4.6-.63-3.33-1.9-4.6-2.8-1.9-4.6-1.9-3.33.63-4.6 1.9-1.9 2.8-1.9 4.6.63 3.33 1.9 4.6 2.8 1.9 4.6 1.9zm0-3c-.97 0-1.79-.34-2.48-1.02-.68-.68-1.02-1.51-1.02-2.48s.34-1.79 1.02-2.48c.68-.68 1.51-1.02 2.48-1.02s1.79.34 2.48 1.02c.68.68 1.02 1.51 1.02 2.48s-.34 1.79-1.02 2.48c-.69.68-1.51 1.02-2.48 1.02zM17.8 37h4.4l.7-5.6c1.1-.27 2.14-.68 3.12-1.25s1.88-1.25 2.68-2.05l5.3 2.3 2-3.6-4.7-3.45c.13-.57.24-1.12.33-1.67s.12-1.11.12-1.67-.03-1.12-.1-1.67-.18-1.11-.35-1.67L36 13.2l-2-3.6-5.3 2.3c-.77-.87-1.63-1.59-2.6-2.17s-2.03-.96-3.2-1.12L22.2 3h-4.4l-.7 5.6c-1.13.23-2.19.63-3.17 1.2s-1.86 1.27-2.62 2.1L6 9.6l-2 3.6 4.7 3.45c-.13.57-.24 1.12-.32 1.67s-.13 1.11-.13 1.68.04 1.12.12 1.67c.08.55.19 1.11.32 1.67L4 26.8l2 3.6 5.3-2.3c.8.8 1.69 1.48 2.68 2.05s2.02.98 3.12 1.25l.7 5.6z"></path></svg> Website Settings </a><a href=""><svg viewBox="0 0 40 32.29"><path d="M40 3v26c0 .8-.3 1.5-.9 2.1-.6.6-1.3.9-2.1.9H3c-.8 0-1.5-.3-2.1-.9-.6-.6-.9-1.3-.9-2.1V3C0 2.2.3 1.5.9.9 1.5.3 2.2 0 3 0h34c.8 0 1.5.3 2.1.9.6.6.9 1.3.9 2.1zM3 8.45h34V3H3v5.45zm0 6.45V29h34V14.9H3zM3 29V3v26z"></path></svg> Plans and Payments </a><a href=""><svg viewBox="0 0 36 36.1"><path d="M3 36.1c-.8 0-1.5-.3-2.1-.9-.6-.6-.9-1.3-.9-2.1V22.6h3v10.5h30V3H3v10.6H0V3C0 2.2.3 1.5.9.9S2.2 0 3 0h30c.8 0 1.5.3 2.1.9.6.6.9 1.3.9 2.1v30.1c0 .8-.3 1.5-.9 2.1-.6.6-1.3.9-2.1.9H3zm11.65-8.35L12.4 25.5l5.9-5.9H0v-3h18.3l-5.9-5.9 2.25-2.25 9.65 9.65-9.65 9.65z"></path></svg> Log out </a></nav></div></div>',1);function Vp(e,t,s,i,n,o){const r=Ne("ResolutionSwitch"),l=Ne("Editor"),a=Ne("UndoRedo"),d=Ne("SaveButton");return N(),U("div",Op,[c("div",Np,[c("a",Pp,[(N(),U("svg",$p,Hp))])]),V(r),V(l),c("div",Fp,[c("div",Dp,[V(a),V(d)]),Bp,Ip,zp])])}const Up=Je(Mp,[["render",Vp]]);function jp(e,t){return N(),Ie("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"2",stroke:"currentColor","aria-hidden":"true"},[V("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"}),V("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15 12a3 3 0 11-6 0 3 3 0 016 0z"})])}function qp(e,t){return N(),Ie("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"2",stroke:"currentColor","aria-hidden":"true"},[V("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"})])}function Wp(e,t){return N(),Ie("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"2",stroke:"currentColor","aria-hidden":"true"},[V("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"}),V("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 12a9 9 0 11-18 0 9 9 0 0118 0z"})])}const Kp={},Yp={version:"1.1",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 129 129","xmlns:xlink":"http://www.w3.org/1999/xlink"},Jp=c("g",null,[c("g",null,[c("path",{d:"m10.5,58.9h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3c0-2.3-1.8-4.1-4.1-4.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.2 1.9,4.1 4.1,4.1zm4.1-44.3h36.1v36.1h-36.1v-36.1z"}),c("path",{d:"m122.6,10.5c0-2.3-1.8-4.1-4.1-4.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.3 1.8,4.1 4.1,4.1h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3zm-8.2,40.2h-36.1v-36.1h36.1v36.1z"}),c("path",{d:"m10.5,122.6h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3c0-2.3-1.8-4.1-4.1-4.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.2 1.9,4.1 4.1,4.1zm4.1-44.3h36.1v36.1h-36.1v-36.1z"}),c("path",{d:"m118.5,70.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.3 1.8,4.1 4.1,4.1h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3c0-2.2-1.9-4.1-4.1-4.1zm-4.1,44.3h-36.1v-36.1h36.1v36.1z"})])],-1),Xp=[Jp];function Zp(e,t){return N(),U("svg",Yp,Xp)}const Gp=Je(Kp,[["render",Zp]]),Qp={},em={version:"1.1",id:"Capa_1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",width:"612px",height:"612px",viewBox:"0 0 612 612","xml:space":"preserve"},tm=c("g",null,[c("g",{id:"_x33__32_"},[c("g",null,[c("path",{d:`M59.226,88.839C26.513,88.839,0,115.352,0,148.064s26.513,59.226,59.226,59.226s59.226-26.514,59.226-59.226
				S91.938,88.839,59.226,88.839z M59.226,246.774C26.513,246.774,0,273.288,0,306c0,32.713,26.513,59.226,59.226,59.226
				s59.226-26.513,59.226-59.226C118.452,273.288,91.938,246.774,59.226,246.774z M59.226,404.71C26.513,404.71,0,431.223,0,463.936
				c0,32.712,26.513,59.226,59.226,59.226s59.226-26.514,59.226-59.226C118.452,431.223,91.938,404.71,59.226,404.71z
				 M197.419,187.548h375.096c21.815,0,39.484-17.669,39.484-39.484s-17.669-39.484-39.484-39.484H197.419
				c-21.815,0-39.484,17.669-39.484,39.484S175.604,187.548,197.419,187.548z M572.516,266.516H197.419
				c-21.815,0-39.484,17.669-39.484,39.484c0,21.814,17.669,39.484,39.484,39.484h375.096c21.815,0,39.484-17.67,39.484-39.484
				C612,284.185,594.331,266.516,572.516,266.516z M572.516,424.451H197.419c-21.815,0-39.484,17.67-39.484,39.484
				s17.669,39.483,39.484,39.483h375.096c21.815,0,39.484-17.669,39.484-39.483S594.331,424.451,572.516,424.451z`})])])],-1),sm=c("g",null,null,-1),im=c("g",null,null,-1),nm=c("g",null,null,-1),om=c("g",null,null,-1),rm=c("g",null,null,-1),lm=c("g",null,null,-1),am=c("g",null,null,-1),cm=c("g",null,null,-1),um=c("g",null,null,-1),dm=c("g",null,null,-1),fm=c("g",null,null,-1),hm=c("g",null,null,-1),pm=c("g",null,null,-1),mm=c("g",null,null,-1),gm=c("g",null,null,-1),vm=[tm,sm,im,nm,om,rm,lm,am,cm,um,dm,fm,hm,pm,mm,gm];function bm(e,t){return N(),U("svg",em,vm)}const ym=Je(Qp,[["render",bm]]),wm={},_m={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 1000 1000","xml:space":"preserve"},km=bn('<g><g transform="translate(0.000000,511.000000) scale(0.100000,-0.100000)"><path d="M4905.7,4342.3c-33.5-8.4-475.7-224.2-980.7-475.7l-920-461l1104.4-509.2L5213.7,2385l77.5,44c41.9,23.1,391.9,213.8,777.5,423.3c385.6,209.6,762.8,414.9,836.2,456.8l136.2,73.3l-953.5,475.7c-570,287.1-984.9,482-1035.2,488.3C5006.3,4352.8,4941.3,4350.7,4905.7,4342.3z"></path><path d="M2782.9,2037.2l6.3-961.9l62.9-92.2c58.7-85.9,119.4-117.3,1037.3-578.4C4425.8,136.5,4895.2-87.8,4932.9-96.2l67.1-12.6l-4.2,1043.6l-6.3,1043.6l-1037.3,477.8c-570,264-1068.7,492.5-1106.5,511.3l-69.2,31.4L2782.9,2037.2z"></path><path d="M6330.7,2466.8l-859.2-469.4l-6.3-955.6c-2.1-526,2.1-955.6,10.5-955.6c10.5,2.1,375.1,182.3,813.1,404.4c741.8,375.1,800.5,408.6,859.2,492.5l62.9,92.2l6.3,930.4c2.1,511.3-2.1,930.4-10.5,930.4C7198.3,2936.2,6804.3,2724.5,6330.7,2466.8z"></path><path d="M2223.3,318.8c-33.5-8.4-486.2-228.4-1003.8-488.3L276.6-641l366.7-199.1c201.2-111.1,576.3-316.4,836.1-456.8c259.8-140.4,505-274.5,546.9-297.6l77.5-44l1104.4,511.3l1104.4,509.2l-930.4,465.2C2826.9,123.9,2420.3,316.7,2370,323C2323.9,329.3,2259,327.2,2223.3,318.8z"></path><path d="M7588,318.8c-33.5-8.4-475.7-224.2-980.7-475.7l-920-461l1104.4-509.2l1104.4-511.3l75.4,41.9c44,25.1,394,215.8,779.6,425.4c385.6,209.6,762.8,414.9,836.1,456.8l136.2,73.3L8770-165.3C8200,121.8,7785,316.7,7734.7,323C7688.6,329.3,7623.7,327.2,7588,318.8z"></path><path d="M3428.3-1537.9L2328.1-2045l-6.3-1043.6l-4.2-1041.5l77.5,14.7c41.9,6.3,509.2,230.5,1037.3,494.6c873.8,438,966.1,488.3,1022.6,565.8c33.5,48.2,67.1,115.3,73.3,153c6.3,35.6,8.4,471.5,6.3,968.2l-6.3,905.3L3428.3-1537.9z"></path><path d="M5465.2-1986.4l6.3-961.9l62.9-92.2c58.7-83.8,119.5-119.5,1026.8-576.3c532.3-266.1,1001.7-490.4,1043.6-498.8l77.5-14.7l-4.2,1041.5l-6.3,1043.6l-1037.3,477.8c-570,264-1068.8,492.5-1106.5,511.3l-69.2,31.4L5465.2-1986.4z"></path><path d="M100.5-2017.8l6.3-930.4l62.9-92.2c58.7-83.8,117.4-117.3,859.2-492.5c438-222.1,802.6-402.4,813.1-404.4c8.4,0,12.6,429.6,10.5,955.6l-6.3,955.6L987-1556.8c-473.6,257.7-867.6,469.4-876,469.4C102.6-1087.4,98.4-1506.5,100.5-2017.8z"></path><path d="M9013-1556.8l-859.2-469.4l-6.3-955.6c-2.1-526,2.1-955.6,10.5-955.6c10.5,2.1,375.1,182.3,813.1,404.4c741.8,375.1,800.5,408.6,859.2,492.5l62.9,92.2l6.3,930.4c2.1,511.3-2.1,930.4-10.5,930.4C9880.6-1087.4,9486.6-1299,9013-1556.8z"></path></g></g>',1),xm=[km];function Cm(e,t){return N(),U("svg",_m,xm)}const Sm=Je(wm,[["render",Cm]]),Em={},Lm={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 1000 1000","enable-background":"new 0 0 1000 1000","xml:space":"preserve"},Am=c("g",null,[c("g",{transform:"translate(0.000000,511.000000) scale(0.100000,-0.100000)"},[c("path",{d:"M731.7,4913.1c-204.8-40.2-442.2-218.2-535.9-402c-99.5-191.4-95.7-67-95.7-3252c0-3242.4-3.8-3097,105.3-3284.5c70.8-120.6,214.4-250.8,352.2-319.6l126.3-61.3l1125.5-5.7l1125.5-5.7l80.4,57.4c124.4,84.2,384.7,212.5,574.2,279.5c168.4,59.3,168.4,59.3,243.1,183.8l72.7,122.5l-1496.8,9.6c-1663.3,11.5-1560,1.9-1626.9,139.7c-28.7,61.3-30.6,306.3-30.6,2888.3c0,2760.1,0,2821.3,38.3,2880.7c19.1,34.4,59.3,76.6,90,95.7c49.8,32.5,231.6,34.4,4122.9,34.4H9075l53.6-40.2c107.2-78.5,120.6-135.9,120.6-511v-338.8l168.4,84.2c179.9,90,342.6,145.5,428.8,145.5h53.6v312c0,201-9.6,344.5-26.8,407.7c-80.4,300.5-319.6,524.4-624,581.9C9122.9,4939.9,856.1,4938,731.7,4913.1z"}),c("path",{d:"M9727.7,3423.9C9358.3,3305.3,8632.9,2821,7852,2168.3C6295.8,870.6,4498.5-1058.8,3956.8-2008.2l-84.2-145.5l-178-61.3c-371.3-126.3-681.4-313.9-930.2-564.6c-176.1-179.9-294.8-338.8-551.3-746.5c-384.7-610.6-589.5-819.2-947.5-957l-149.3-57.4H607.2H100v-86.1v-86.1h2775.4h2775.4v86.1v86.1l-1898.7,1.9c-1123.5,1.9-1818.4,9.6-1701.6,19.1c302.4,23,585.7,72.7,786.7,135.9c338.8,109.1,507.2,218.2,796.3,516.8c417.3,434.5,620.2,771.4,685.2,1142.7c15.3,86.1,30.6,158.9,32.5,160.8c3.8,1.9,67,34.5,139.7,70.8c1085.3,549.3,3162,2553.4,4513.3,4354.5c505.3,671.8,832.6,1236.5,886.2,1527.4C9907.7,3473.7,9892.3,3477.5,9727.7,3423.9z M4177-2438.8c0-216.3-38.3-403.9-112.9-564.6c-55.5-118.7-61.3-124.4-199.1-185.7c-78.5-36.4-225.9-93.8-331.1-126.3c-162.7-53.6-225.9-63.2-440.2-72.7c-195.2-5.7-285.2-1.9-398.1,23c-80.4,19.1-145.5,40.2-145.5,47.9c0,34.5,201,289,340.7,428.7c283.3,287.1,656.5,486.2,1104.4,587.6c84.2,19.1,158.9,36.4,168.4,36.4C4171.2-2262.7,4177-2343.1,4177-2438.8z"}),c("path",{d:"M9789,2746.4c-55.5-101.5-199.1-333.1-319.6-513L9249.2,1908V172c0-1646.1-1.9-1739.9-34.5-1801.1c-19.1-36.4-65.1-82.3-101.4-101.5c-61.3-32.5-151.2-34.4-1684.4-34.4H5807.7l-197.1-158.9c-369.4-294.8-706.3-528.3-993.4-687.2l-124.4-68.9l-24.9-130.1c-45.9-239.3-176.1-509.2-365.6-761.8c-51.7-67-97.6-130.1-105.3-143.6c-9.6-15.3,513-21,2044.2-21h2059.5v86.1v86.1h-86.1c-149.3,0-482.3,187.6-696.7,390.5c-206.7,197.1-335,438.3-350.3,662.3l-5.7,86.1l1177.1,9.6l1177.1,9.6l126.3,61.3c137.8,68.9,281.4,199.1,352.2,319.6c109.1,185.7,105.3,103.3,101.4,2633.7l-5.7,2325.6L9789,2746.4z"})])],-1),Tm=[Am];function Mm(e,t){return N(),U("svg",Lm,Tm)}const Om=Je(Em,[["render",Mm]]),Nm={methods:{show:function(e){this.emitter.emit("live-edit-ui-show",e)}},components:{DesignSettingsIcon:Om,LayoutsIcon:Gp,ModulesIcon:Sm,PencilIcon:qp,PlayIcon:Wp,CogIcon:jp},data(){return{}}},Pm={id:"bubble-nav",class:"active"};function $m(e,t,s,i,n,o){const r=Ne("DesignSettingsIcon"),l=Ne("ModulesIcon"),a=Ne("LayoutsIcon");return N(),U("div",Pm,[c("span",{onClick:t[0]||(t[0]=d=>o.show("template-settings"))},[V(r)]),c("span",{onClick:t[1]||(t[1]=d=>o.show("show-modules"))},[V(l)]),c("span",{onClick:t[2]||(t[2]=d=>o.show("show-layouts"))},[V(a)])])}const Rm=Je(Nm,[["render",$m]]),Hm={components:{BubbleNav:Rm},data(){}};function Fm(e,t,s,i,n,o){const r=Ne("BubbleNav");return N(),U("div",null,[V(r)])}const Dm=Je(Hm,[["render",Fm]]);/*!
  * vue-color-kit v1.0.4
  * (c) 2021 
  * @license MIT
  */function gs(e){let t={r:0,g:0,b:0,a:1};/#/.test(e)?t=Im(e):/rgb/.test(e)?t=gl(e):typeof e=="string"?t=gl(`rgba(${e})`):Object.prototype.toString.call(e)==="[object Object]"&&(t=e);const{r:s,g:i,b:n,a:o}=t,{h:r,s:l,v:a}=zm(t);return{r:s,g:i,b:n,a:o===void 0?1:o,h:r,s:l,v:a}}function Yo(e){const t=document.createElement("canvas"),s=t.getContext("2d"),i=e*2;return t.width=i,t.height=i,s.fillStyle="#ffffff",s.fillRect(0,0,i,i),s.fillStyle="#ccd5db",s.fillRect(0,0,e,e),s.fillRect(e,e,e,e),t}function vo(e,t,s,i,n,o){const r=e==="l",l=t.createLinearGradient(0,0,r?s:0,r?0:i);l.addColorStop(.01,n),l.addColorStop(.99,o),t.fillStyle=l,t.fillRect(0,0,s,i)}function Bm({r:e,g:t,b:s},i){const n=r=>("0"+Number(r).toString(16)).slice(-2),o=`#${n(e)}${n(t)}${n(s)}`;return i?o.toUpperCase():o}function Im(e){e=e.slice(1);const t=s=>parseInt(s,16)||0;return{r:t(e.slice(0,2)),g:t(e.slice(2,4)),b:t(e.slice(4,6))}}function gl(e){return typeof e=="string"?(e=(/rgba?\((.*?)\)/.exec(e)||["","0,0,0,1"])[1].split(","),{r:Number(e[0])||0,g:Number(e[1])||0,b:Number(e[2])||0,a:Number(e[3]?e[3]:1)}):e}function zm({r:e,g:t,b:s}){e=e/255,t=t/255,s=s/255;const i=Math.max(e,t,s),n=Math.min(e,t,s),o=i-n;let r=0;i===n?r=0:i===e?t>=s?r=60*(t-s)/o:r=60*(t-s)/o+360:i===t?r=60*(s-e)/o+120:i===s&&(r=60*(e-t)/o+240),r=Math.floor(r);let l=parseFloat((i===0?0:1-n/i).toFixed(2)),a=parseFloat(i.toFixed(2));return{h:r,s:l,v:a}}var Jo=Yt({props:{color:{type:String,default:"#000000"},hsv:{type:Object,default:null},size:{type:Number,default:152}},emits:["selectSaturation"],data(){return{slideSaturationStyle:{}}},mounted(){this.renderColor(),this.renderSlide()},methods:{renderColor(){const e=this.$refs.canvasSaturation,t=this.size,s=e.getContext("2d");e.width=t,e.height=t,s.fillStyle=this.color,s.fillRect(0,0,t,t),vo("l",s,t,t,"#FFFFFF","rgba(255,255,255,0)"),vo("p",s,t,t,"rgba(0,0,0,0)","#000000")},renderSlide(){this.slideSaturationStyle={left:this.hsv.s*this.size-5+"px",top:(1-this.hsv.v)*this.size-5+"px"}},selectSaturation(e){const{top:t,left:s}=this.$el.getBoundingClientRect(),i=e.target.getContext("2d"),n=r=>{let l=r.clientX-s,a=r.clientY-t;l<0&&(l=0),a<0&&(a=0),l>this.size&&(l=this.size),a>this.size&&(a=this.size),this.slideSaturationStyle={left:l-5+"px",top:a-5+"px"};const d=i.getImageData(Math.min(l,this.size-1),Math.min(a,this.size-1),1,1),[f,h,v]=d.data;this.$emit("selectSaturation",{r:f,g:h,b:v})};n(e);const o=()=>{document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",o)};document.addEventListener("mousemove",n),document.addEventListener("mouseup",o)}}});const Vm={ref:"canvasSaturation"};function Um(e,t,s,i,n,o){return N(),Ie("div",{class:"saturation",onMousedown:t[1]||(t[1]=Ko((...r)=>e.selectSaturation&&e.selectSaturation(...r),["prevent","stop"]))},[V("canvas",Vm,null,512),V("div",{style:e.slideSaturationStyle,class:"slide"},null,4)],32)}Jo.render=Um;Jo.__file="src/color/Saturation.vue";var Xo=Yt({props:{hsv:{type:Object,default:null},width:{type:Number,default:15},height:{type:Number,default:152}},emits:["selectHue"],data(){return{slideHueStyle:{}}},mounted(){this.renderColor(),this.renderSlide()},methods:{renderColor(){const e=this.$refs.canvasHue,t=this.width,s=this.height,i=e.getContext("2d");e.width=t,e.height=s;const n=i.createLinearGradient(0,0,0,s);n.addColorStop(0,"#FF0000"),n.addColorStop(.17*1,"#FF00FF"),n.addColorStop(.17*2,"#0000FF"),n.addColorStop(.17*3,"#00FFFF"),n.addColorStop(.17*4,"#00FF00"),n.addColorStop(.17*5,"#FFFF00"),n.addColorStop(1,"#FF0000"),i.fillStyle=n,i.fillRect(0,0,t,s)},renderSlide(){this.slideHueStyle={top:(1-this.hsv.h/360)*this.height-2+"px"}},selectHue(e){const{top:t}=this.$el.getBoundingClientRect(),s=e.target.getContext("2d"),i=o=>{let r=o.clientY-t;r<0&&(r=0),r>this.height&&(r=this.height),this.slideHueStyle={top:r-2+"px"};const l=s.getImageData(0,Math.min(r,this.height-1),1,1),[a,d,f]=l.data;this.$emit("selectHue",{r:a,g:d,b:f})};i(e);const n=()=>{document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",n)};document.addEventListener("mousemove",i),document.addEventListener("mouseup",n)}}});const jm={ref:"canvasHue"};function qm(e,t,s,i,n,o){return N(),Ie("div",{class:"hue",onMousedown:t[1]||(t[1]=Ko((...r)=>e.selectHue&&e.selectHue(...r),["prevent","stop"]))},[V("canvas",jm,null,512),V("div",{style:e.slideHueStyle,class:"slide"},null,4)],32)}Xo.render=qm;Xo.__file="src/color/Hue.vue";var Zo=Yt({props:{color:{type:String,default:"#000000"},rgba:{type:Object,default:null},width:{type:Number,default:15},height:{type:Number,default:152}},emits:["selectAlpha"],data(){return{slideAlphaStyle:{},alphaSize:5}},watch:{color(){this.renderColor()},"rgba.a"(){this.renderSlide()}},mounted(){this.renderColor(),this.renderSlide()},methods:{renderColor(){const e=this.$refs.canvasAlpha,t=this.width,s=this.height,i=this.alphaSize,n=Yo(i),o=e.getContext("2d");e.width=t,e.height=s,o.fillStyle=o.createPattern(n,"repeat"),o.fillRect(0,0,t,s),vo("p",o,t,s,"rgba(255,255,255,0)",this.color)},renderSlide(){this.slideAlphaStyle={top:this.rgba.a*this.height-2+"px"}},selectAlpha(e){const{top:t}=this.$el.getBoundingClientRect(),s=n=>{let o=n.clientY-t;o<0&&(o=0),o>this.height&&(o=this.height);let r=parseFloat((o/this.height).toFixed(2));this.$emit("selectAlpha",r)};s(e);const i=()=>{document.removeEventListener("mousemove",s),document.removeEventListener("mouseup",i)};document.addEventListener("mousemove",s),document.addEventListener("mouseup",i)}}});const Wm={ref:"canvasAlpha"};function Km(e,t,s,i,n,o){return N(),Ie("div",{class:"color-alpha",onMousedown:t[1]||(t[1]=Ko((...r)=>e.selectAlpha&&e.selectAlpha(...r),["prevent","stop"]))},[V("canvas",Wm,null,512),V("div",{style:e.slideAlphaStyle,class:"slide"},null,4)],32)}Zo.render=Km;Zo.__file="src/color/Alpha.vue";var Go=Yt({props:{color:{type:String,default:"#000000"},width:{type:Number,default:100},height:{type:Number,default:30}},data(){return{alphaSize:5}},watch:{color(){this.renderColor()}},mounted(){this.renderColor()},methods:{renderColor(){const e=this.$el,t=this.width,s=this.height,i=this.alphaSize,n=Yo(i),o=e.getContext("2d");e.width=t,e.height=s,o.fillStyle=o.createPattern(n,"repeat"),o.fillRect(0,0,t,s),o.fillStyle=this.color,o.fillRect(0,0,t,s)}}});function Ym(e,t,s,i,n,o){return N(),Ie("canvas")}Go.render=Ym;Go.__file="src/color/Preview.vue";var Qo=Yt({props:{suckerCanvas:{type:Object,default:null},suckerArea:{type:Array,default:()=>[]}},data(){return{isOpenSucker:!1,suckerPreview:null,isSucking:!1}},watch:{suckerCanvas(e){this.isSucking=!1,this.suckColor(e)}},methods:{openSucker(){this.isOpenSucker?this.keydownHandler({keyCode:27}):(this.isOpenSucker=!0,this.isSucking=!0,this.$emit("openSucker",!0),document.addEventListener("keydown",this.keydownHandler))},keydownHandler(e){e.keyCode===27&&(this.isOpenSucker=!1,this.isSucking=!1,this.$emit("openSucker",!1),document.removeEventListener("keydown",this.keydownHandler),document.removeEventListener("mousemove",this.mousemoveHandler),document.removeEventListener("mouseup",this.mousemoveHandler),this.suckerPreview&&(document.body.removeChild(this.suckerPreview),this.suckerPreview=null))},mousemoveHandler(e){const{clientX:t,clientY:s}=e,{top:i,left:n,width:o,height:r}=this.suckerCanvas.getBoundingClientRect(),l=t-n,a=s-i,f=this.suckerCanvas.getContext("2d").getImageData(Math.min(l,o-1),Math.min(a,r-1),1,1);let[h,v,k,b]=f.data;b=parseFloat((b/255).toFixed(2));const _=this.suckerPreview.style;Object.assign(_,{position:"absolute",left:t+20+"px",top:s-36+"px",width:"24px",height:"24px",borderRadius:"50%",border:"2px solid #fff",boxShadow:"0 0 8px 0 rgba(0, 0, 0, 0.16)",background:`rgba(${h}, ${v}, ${k}, ${b})`,zIndex:95}),this.suckerArea.length&&t>=this.suckerArea[0]&&s>=this.suckerArea[1]&&t<=this.suckerArea[2]&&s<=this.suckerArea[3]?_.display="":_.display="none"},suckColor(e){e&&e.tagName!=="CANVAS"||(this.suckerPreview=document.createElement("div"),this.suckerPreview&&document.body.appendChild(this.suckerPreview),document.addEventListener("mousemove",this.mousemoveHandler),document.addEventListener("mouseup",this.mousemoveHandler),e.addEventListener("click",t=>{const{clientX:s,clientY:i}=t,{top:n,left:o,width:r,height:l}=e.getBoundingClientRect(),a=s-o,d=i-n,h=e.getContext("2d").getImageData(Math.min(a,r-1),Math.min(d,l-1),1,1);let[v,k,b,_]=h.data;_=parseFloat((_/255).toFixed(2)),this.$emit("selectSucker",{r:v,g:k,b,a:_})}))}}});const Jm=V("path",{d:"M13.1,8.2l5.6,5.6c0.4,0.4,0.5,1.1,0.1,1.5s-1.1,0.5-1.5,0.1c0,0-0.1,0-0.1-0.1l-1.4-1.4l-7.7,7.7C7.9,21.9,7.6,22,7.3,22H3.1C2.5,22,2,21.5,2,20.9l0,0v-4.2c0-0.3,0.1-0.6,0.3-0.8l5.8-5.8C8.5,9.7,9.2,9.6,9.7,10s0.5,1.1,0.1,1.5c0,0,0,0.1-0.1,0.1l-5.5,5.5v2.7h2.7l7.4-7.4L8.7,6.8c-0.5-0.4-0.5-1-0.1-1.5s1.1-0.5,1.5-0.1c0,0,0.1,0,0.1,0.1l1.4,1.4l3.5-3.5c1.6-1.6,4.1-1.6,5.8-0.1c1.6,1.6,1.6,4.1,0.1,5.8L20.9,9l-3.6,3.6c-0.4,0.4-1.1,0.5-1.5,0.1"},null,-1),Xm={key:1,class:"sucker",viewBox:"-16 -16 68 68",xmlns:"http://www.w3.org/2000/svg",stroke:"#9099a4"},Zm=V("g",{fill:"none","fill-rule":"evenodd"},[V("g",{transform:"translate(1 1)","stroke-width":"4"},[V("circle",{"stroke-opacity":".5",cx:"18",cy:"18",r:"18"}),V("path",{d:"M36 18c0-9.94-8.06-18-18-18"},[V("animateTransform",{attributeName:"transform",type:"rotate",from:"0 18 18",to:"360 18 18",dur:"1s",repeatCount:"indefinite"})])])],-1);function Gm(e,t,s,i,n,o){return N(),Ie("div",null,[e.isSucking?Ee("v-if",!0):(N(),Ie("svg",{key:0,class:[{active:e.isOpenSucker},"sucker"],xmlns:"http://www.w3.org/2000/svg",viewBox:"-12 -12 48 48",onClick:t[1]||(t[1]=(...r)=>e.openSucker&&e.openSucker(...r))},[Jm],2)),e.isSucking?(N(),Ie("svg",Xm,[Zm])):Ee("v-if",!0)])}Qo.render=Gm;Qo.__file="src/color/Sucker.vue";var er=Yt({props:{name:{type:String,default:""},color:{type:String,default:""}},emits:["inputColor"],setup(e,{emit:t}){return{modelColor:Vt({get(){return e.color||""},set(i){t("inputColor",i)}})}}});const Qm={class:"color-type"},e1={class:"name"};function t1(e,t,s,i,n,o){return N(),Ie("div",Qm,[V("span",e1,it(e.name),1),mn(V("input",{"onUpdate:modelValue":t[1]||(t[1]=r=>e.modelColor=r),class:"value"},null,512),[[qa,e.modelColor]])])}er.render=t1;er.__file="src/color/Box.vue";var tr=Yt({name:"ColorPicker",props:{color:{type:String,default:"#000000"},colorsDefault:{type:Array,default:()=>[]},colorsHistoryKey:{type:String,default:""}},emits:["selectColor"],setup(e,{emit:t}){const s=Ot(),i=Ot([]),n=Ot();e.colorsHistoryKey&&localStorage&&(i.value=JSON.parse(localStorage.getItem(e.colorsHistoryKey))||[]),n.value=Yo(4).toDataURL(),pn(()=>{o(s.value)});function o(l){if(!l)return;const a=i.value||[],d=a.indexOf(l);d>=0&&a.splice(d,1),a.length>=8&&(a.length=7),a.unshift(l),i.value=a||[],localStorage&&e.colorsHistoryKey&&localStorage.setItem(e.colorsHistoryKey,JSON.stringify(a))}function r(l){t("selectColor",l)}return{setColorsHistory:o,colorsHistory:i,color:s,imgAlphaBase64:n,selectColor:r}}});const s1={class:"colors"},i1={key:0,class:"colors history"};function n1(e,t,s,i,n,o){return N(),Ie("div",null,[V("ul",s1,[(N(!0),Ie(Pe,null,xt(e.colorsDefault,r=>(N(),Ie("li",{key:r,class:"item",onClick:l=>e.selectColor(r)},[V("div",{style:{background:`url(${e.imgAlphaBase64})`},class:"alpha"},null,4),V("div",{style:{background:r},class:"color"},null,4)],8,["onClick"]))),128))]),e.colorsHistory.length?(N(),Ie("ul",i1,[(N(!0),Ie(Pe,null,xt(e.colorsHistory,r=>(N(),Ie("li",{key:r,class:"item",onClick:l=>e.selectColor(r)},[V("div",{style:{background:`url(${e.imgAlphaBase64})`},class:"alpha"},null,4),V("div",{style:{background:r},class:"color"},null,4)],8,["onClick"]))),128))])):Ee("v-if",!0)])}tr.render=n1;tr.__file="src/color/Colors.vue";var $s=Yt({components:{Saturation:Jo,Hue:Xo,Alpha:Zo,Preview:Go,Sucker:Qo,Box:er,Colors:tr},emits:["changeColor","openSucker"],props:{color:{type:String,default:"#000000"},theme:{type:String,default:"dark"},suckerHide:{type:Boolean,default:!0},suckerCanvas:{type:null,default:null},suckerArea:{type:Array,default:()=>[]},colorsDefault:{type:Array,default:()=>["#000000","#FFFFFF","#FF1900","#F47365","#FFB243","#FFE623","#6EFF2A","#1BC7B1","#00BEFF","#2E81FF","#5D61FF","#FF89CF","#FC3CAD","#BF3DCE","#8E00A7","rgba(0,0,0,0)"]},colorsHistoryKey:{type:String,default:"vue-colorpicker-history"}},data(){return{hueWidth:15,hueHeight:152,previewHeight:30,modelRgba:"",modelHex:"",r:0,g:0,b:0,a:1,h:0,s:0,v:0}},computed:{isLightTheme(){return this.theme==="light"},totalWidth(){return this.hueHeight+(this.hueWidth+8)*2},previewWidth(){return this.totalWidth-(this.suckerHide?0:this.previewHeight)},rgba(){return{r:this.r,g:this.g,b:this.b,a:this.a}},hsv(){return{h:this.h,s:this.s,v:this.v}},rgbString(){return`rgb(${this.r}, ${this.g}, ${this.b})`},rgbaStringShort(){return`${this.r}, ${this.g}, ${this.b}, ${this.a}`},rgbaString(){return`rgba(${this.rgbaStringShort})`},hexString(){return Bm(this.rgba,!0)}},created(){Object.assign(this,gs(this.color)),this.setText(),this.$watch("rgba",()=>{this.$emit("changeColor",{rgba:this.rgba,hsv:this.hsv,hex:this.modelHex})})},methods:{selectSaturation(e){const{r:t,g:s,b:i,h:n,s:o,v:r}=gs(e);Object.assign(this,{r:t,g:s,b:i,h:n,s:o,v:r}),this.setText()},selectHue(e){const{r:t,g:s,b:i,h:n,s:o,v:r}=gs(e);Object.assign(this,{r:t,g:s,b:i,h:n,s:o,v:r}),this.setText(),this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide()})},selectAlpha(e){this.a=e,this.setText()},inputHex(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=gs(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.modelHex=e,this.modelRgba=this.rgbaStringShort,this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})},inputRgba(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=gs(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.modelHex=this.hexString,this.modelRgba=e,this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})},setText(){this.modelHex=this.hexString,this.modelRgba=this.rgbaStringShort},openSucker(e){this.$emit("openSucker",e)},selectSucker(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=gs(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.setText(),this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})},selectColor(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=gs(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.setText(),this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})}}});const o1={class:"color-set"};function r1(e,t,s,i,n,o){const r=Ne("Saturation"),l=Ne("Hue"),a=Ne("Alpha"),d=Ne("Preview"),f=Ne("Sucker"),h=Ne("Box"),v=Ne("Colors");return N(),Ie("div",{class:["hu-color-picker",{light:e.isLightTheme}],style:{width:e.totalWidth+"px"}},[V("div",o1,[V(r,{ref:"saturation",color:e.rgbString,hsv:e.hsv,size:e.hueHeight,onSelectSaturation:e.selectSaturation},null,8,["color","hsv","size","onSelectSaturation"]),V(l,{ref:"hue",hsv:e.hsv,width:e.hueWidth,height:e.hueHeight,onSelectHue:e.selectHue},null,8,["hsv","width","height","onSelectHue"]),V(a,{ref:"alpha",color:e.rgbString,rgba:e.rgba,width:e.hueWidth,height:e.hueHeight,onSelectAlpha:e.selectAlpha},null,8,["color","rgba","width","height","onSelectAlpha"])]),V("div",{style:{height:e.previewHeight+"px"},class:"color-show"},[V(d,{color:e.rgbaString,width:e.previewWidth,height:e.previewHeight},null,8,["color","width","height"]),e.suckerHide?Ee("v-if",!0):(N(),Ie(f,{key:0,"sucker-canvas":e.suckerCanvas,"sucker-area":e.suckerArea,onOpenSucker:e.openSucker,onSelectSucker:e.selectSucker},null,8,["sucker-canvas","sucker-area","onOpenSucker","onSelectSucker"]))],4),V(h,{name:"HEX",color:e.modelHex,onInputColor:e.inputHex},null,8,["color","onInputColor"]),V(h,{name:"RGBA",color:e.modelRgba,onInputColor:e.inputRgba},null,8,["color","onInputColor"]),V(v,{color:e.rgbaString,"colors-default":e.colorsDefault,"colors-history-key":e.colorsHistoryKey,onSelectColor:e.selectColor},null,8,["color","colors-default","colors-history-key","onSelectColor"]),Ee(" custom options "),Yi(e.$slots,"default")],6)}$s.render=r1;$s.__file="src/color/ColorPicker.vue";$s.install=e=>{e.component($s.name,$s)};const l1={components:{ColorPicker:$s},props:{color:{type:String,default:"#000000"},name:{type:String,default:"color"}},data(){return{showPicker:!1,suckerCanvas:null,suckerArea:[],isSucking:!1}},methods:{changeColor(e){this.$props.color=e.hex},openSucker(e){},closePicker(){this.showPicker=!1},togglePicker(){this.showPicker=!this.showPicker}}};function a1(e,t,s,i,n,o){const r=Ne("ColorPicker",!0),l=Kf("click-away");return mn((N(),U("div",null,[c("div",{class:"color-picker-badge",onClick:t[0]||(t[0]=(...a)=>o.togglePicker&&o.togglePicker(...a)),style:St({background:s.color})},null,4),n.showPicker?(N(),Ie(r,{key:0,theme:"light",value:s.color,"sucker-hide":!1,"sucker-canvas":n.suckerCanvas,"sucker-area":n.suckerArea,onOpenSucker:o.openSucker,onChangeColor:o.changeColor,onClose:o.togglePicker},null,8,["value","sucker-canvas","sucker-area","onOpenSucker","onChangeColor","onClose"])):Ee("",!0)])),[[l,o.closePicker]])}const c1=Je(l1,[["render",a1]]);const u1={components:{ColorPicker:c1},methods:{stringToId(e){return e.replace(/[^a-z0-9]/gi,"-").toLowerCase()},showSettingsGroup(e){let t="settings-group-"+this.stringToId(e),s=document.getElementById(t);s.style.display==="none"?s.style.display="block":s.style.display="none"},updateSettings(e,t,s){let i=e.target.value;Fs.post(mw.settings.api_url+"save_option",{option_group:s,option_key:t,option_value:i}).then(function(n){n.data})},resetTemplateSettings(){mw.tools.confirm_reset_module_by_id(this.optionGroup,function(){})},resetStylesheetSettings(){mw.tools.confirm_reset_module_by_id(this.optionGroupLess,function(){})}},mounted(){let e=this;Fs.get(mw.settings.api_url+"editor/template_settings_v2/list").then(function(t){t.data&&(e.settingsGroups=t.data.settingsGroups,e.optionGroup=t.data.optionGroup,e.optionGroupLess=t.data.optionGroupLess)})},data(){return{settingsGroups:[],optionGroup:"",optionGroupLess:""}}},d1={class:"p-3"},f1={key:0,class:"text-center"},h1={class:"mb-3"},p1=["onClick"],m1=["id"],g1=["id"],v1={class:"accordion-item"},b1=["id"],y1=["data-bs-target","aria-controls"],w1=["id","aria-labelledby","data-bs-parent"],_1={class:"accordion-body"},k1={class:"mt-2"},x1={key:0},C1={class:"mr-4"},S1=["value","onChange","name"],E1={key:1},L1={class:"d-flex justify-content-between"},A1={class:"mr-4"},T1={key:2},M1={class:"text-uppercase"},O1={key:3},N1=["onChange","name","value"],P1=["value"],$1={key:4},R1=["onChange","name","value"],H1=["value"],F1={key:5},D1=["onChange","name","value"],B1=c("option",{value:"Arial"},"Arial",-1),I1=c("option",{value:"Tahoma"},"Tahoma",-1),z1=[B1,I1],V1={key:0,class:"mt-2 mr-2"},U1={key:1,class:"mt-2 mr-2"};function j1(e,t,s,i,n,o){const r=Ne("ColorPicker");return N(),U("div",d1,[n.settingsGroups.length===0?(N(),U("div",f1," Loading... ")):(N(!0),U(Pe,{key:1},xt(n.settingsGroups,(l,a)=>(N(),U("div",h1,[c("div",null,[c("span",{onClick:d=>o.showSettingsGroup(a),class:"border-bottom pt-1 pb-1 settings-main-group"},it(a),9,p1)]),c("div",{style:{display:"none"},id:"settings-group-"+o.stringToId(a)},[c("div",{class:"accordion accordion-flush",id:"accordionFlush"+o.stringToId(a)},[(N(!0),U(Pe,null,xt(l.values,(d,f)=>(N(),U("div",v1,[c("h2",{class:"accordion-header",id:"flush-heading-"+o.stringToId(a+"-"+f)},[c("button",{class:"accordion-button collapsed",type:"button","data-bs-toggle":"collapse","data-bs-target":"#flush-collapse-"+o.stringToId(a+"-"+f),"aria-expanded":"false","aria-controls":"flush-collapse-"+o.stringToId(a+"-"+f)},it(f),9,y1)],8,b1),c("div",{id:"flush-collapse-"+o.stringToId(a+"-"+f),class:"accordion-collapse collapse","aria-labelledby":"flush-heading-"+o.stringToId(a+"-"+f),"data-bs-parent":"#accordionFlush"+o.stringToId(a)},[c("div",_1,[(N(!0),U(Pe,null,xt(d,(h,v)=>(N(),U("div",k1,[h.type==="text"?(N(),U("div",x1,[c("label",C1,it(h.label),1),c("div",null,[c("input",{type:"text",class:"form-control",value:[h.value?h.value:h.default],onChange:k=>o.updateSettings(k,v,h.optionGroup),name:v},null,40,S1)])])):Ee("",!0),h.type==="color"?(N(),U("div",E1,[c("div",L1,[c("div",A1,it(h.label),1),c("div",null,[(N(),Ie(r,{key:v,value:[h.value?h.value:h.default],onChange:k=>o.updateSettings(k,v,h.optionGroup),name:v},null,8,["value","onChange","name"]))])])])):Ee("",!0),h.type==="title"?(N(),U("div",T1,[c("div",M1,[c("span",null,it(h.label),1)])])):Ee("",!0),h.type==="dropdown_image"?(N(),U("div",O1,[c("div",null,it(h.label),1),c("select",{class:"form-control",onChange:k=>o.updateSettings(k,v,h.optionGroup),name:v,value:[h.value?h.value:h.default]},[(N(!0),U(Pe,null,xt(h.options,(k,b)=>(N(),U("option",{value:b},it(k),9,P1))),256))],40,N1)])):Ee("",!0),h.type==="dropdown"?(N(),U("div",$1,[c("div",null,it(h.label),1),c("select",{class:"form-control",onChange:k=>o.updateSettings(k,v,h.optionGroup),name:v,value:[h.value?h.value:h.default]},[(N(!0),U(Pe,null,xt(h.options,(k,b)=>(N(),U("option",{value:b},it(k),9,H1))),256))],40,R1)])):Ee("",!0),h.type==="font_selector"?(N(),U("div",F1,[c("div",null,it(h.label),1),c("select",{class:"form-control",onChange:k=>o.updateSettings(k,v,h.optionGroup),name:v,value:[h.value?h.value:h.default]},z1,40,D1)])):Ee("",!0)]))),256))])],8,w1)]))),256))],8,g1),l.type=="stylesheet"?(N(),U("div",V1,[c("button",{onClick:t[0]||(t[0]=(...d)=>o.resetStylesheetSettings&&o.resetStylesheetSettings(...d)),style:{"border-radius":"20px"},class:"btn btn-primary btn-sm btn-block"},"Reset Stylesheet Settings ")])):Ee("",!0),l.type=="template"?(N(),U("div",U1,[c("button",{onClick:t[1]||(t[1]=(...d)=>o.resetTemplateSettings&&o.resetTemplateSettings(...d)),style:{"border-radius":"20px"},class:"btn btn-primary btn-sm btn-block"},"Reset Template Settings ")])):Ee("",!0)],8,m1)]))),256))])}const q1=Je(u1,[["render",j1]]);function Oi(e){return[null,void 0,!1].indexOf(e)!==-1}function W1(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function Wa(e){var t={exports:{}};return e(t,t.exports),t.exports}var vl=Wa(function(e,t){e.exports=function(){var s=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function i(b){return b.split("").reverse().join("")}function n(b,_){return b.substring(0,_.length)===_}function o(b,_){return b.slice(-1*_.length)===_}function r(b,_,E){if((b[_]||b[E])&&b[_]===b[E])throw new Error(_)}function l(b){return typeof b=="number"&&isFinite(b)}function a(b,_){return b=b.toString().split("e"),(+((b=(b=Math.round(+(b[0]+"e"+(b[1]?+b[1]+_:_)))).toString().split("e"))[0]+"e"+(b[1]?+b[1]-_:-_))).toFixed(_)}function d(b,_,E,P,Y,K,se,le,$e,ke,X,q){var fe,de,z,me=q,xe="",oe="";return K&&(q=K(q)),!!l(q)&&(b!==!1&&parseFloat(q.toFixed(b))===0&&(q=0),q<0&&(fe=!0,q=Math.abs(q)),b!==!1&&(q=a(q,b)),(q=q.toString()).indexOf(".")!==-1?(z=(de=q.split("."))[0],E&&(xe=E+de[1])):z=q,_&&(z=i(z).match(/.{1,3}/g),z=i(z.join(i(_)))),fe&&le&&(oe+=le),P&&(oe+=P),fe&&$e&&(oe+=$e),oe+=z,oe+=xe,Y&&(oe+=Y),ke&&(oe=ke(oe,me)),oe)}function f(b,_,E,P,Y,K,se,le,$e,ke,X,q){var fe,de="";return X&&(q=X(q)),!(!q||typeof q!="string")&&(le&&n(q,le)&&(q=q.replace(le,""),fe=!0),P&&n(q,P)&&(q=q.replace(P,"")),$e&&n(q,$e)&&(q=q.replace($e,""),fe=!0),Y&&o(q,Y)&&(q=q.slice(0,-1*Y.length)),_&&(q=q.split(_).join("")),E&&(q=q.replace(E,".")),fe&&(de+="-"),(de=(de+=q).replace(/[^0-9\.\-.]/g,""))!==""&&(de=Number(de),se&&(de=se(de)),!!l(de)&&de))}function h(b){var _,E,P,Y={};for(b.suffix===void 0&&(b.suffix=b.postfix),_=0;_<s.length;_+=1)if((P=b[E=s[_]])===void 0)E!=="negative"||Y.negativeBefore?E==="mark"&&Y.thousand!=="."?Y[E]=".":Y[E]=!1:Y[E]="-";else if(E==="decimals"){if(!(P>=0&&P<8))throw new Error(E);Y[E]=P}else if(E==="encoder"||E==="decoder"||E==="edit"||E==="undo"){if(typeof P!="function")throw new Error(E);Y[E]=P}else{if(typeof P!="string")throw new Error(E);Y[E]=P}return r(Y,"mark","thousand"),r(Y,"prefix","negative"),r(Y,"prefix","negativeBefore"),Y}function v(b,_,E){var P,Y=[];for(P=0;P<s.length;P+=1)Y.push(b[s[P]]);return Y.push(E),_.apply("",Y)}function k(b){if(!(this instanceof k))return new k(b);typeof b=="object"&&(b=h(b),this.to=function(_){return v(b,d,_)},this.from=function(_){return v(b,f,_)})}return k}()}),K1=W1(Wa(function(e,t){(function(s){function i(p){return n(p)&&typeof p.from=="function"}function n(p){return typeof p=="object"&&typeof p.to=="function"}function o(p){p.parentElement.removeChild(p)}function r(p){return p!=null}function l(p){p.preventDefault()}function a(p){return p.filter(function(u){return!this[u]&&(this[u]=!0)},{})}function d(p,u){return Math.round(p/u)*u}function f(p,u){var O=p.getBoundingClientRect(),W=p.ownerDocument,H=W.documentElement,te=K(W);return/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(te.x=0),u?O.top+te.y-H.clientTop:O.left+te.x-H.clientLeft}function h(p){return typeof p=="number"&&!isNaN(p)&&isFinite(p)}function v(p,u,O){O>0&&(E(p,u),setTimeout(function(){P(p,u)},O))}function k(p){return Math.max(Math.min(p,100),0)}function b(p){return Array.isArray(p)?p:[p]}function _(p){var u=(p=String(p)).split(".");return u.length>1?u[1].length:0}function E(p,u){p.classList&&!/\s/.test(u)?p.classList.add(u):p.className+=" "+u}function P(p,u){p.classList&&!/\s/.test(u)?p.classList.remove(u):p.className=p.className.replace(new RegExp("(^|\\b)"+u.split(" ").join("|")+"(\\b|$)","gi")," ")}function Y(p,u){return p.classList?p.classList.contains(u):new RegExp("\\b"+u+"\\b").test(p.className)}function K(p){var u=window.pageXOffset!==void 0,O=(p.compatMode||"")==="CSS1Compat";return{x:u?window.pageXOffset:O?p.documentElement.scrollLeft:p.body.scrollLeft,y:u?window.pageYOffset:O?p.documentElement.scrollTop:p.body.scrollTop}}function se(){return window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"}}function le(){var p=!1;try{var u=Object.defineProperty({},"passive",{get:function(){p=!0}});window.addEventListener("test",null,u)}catch{}return p}function $e(){return window.CSS&&CSS.supports&&CSS.supports("touch-action","none")}function ke(p,u){return 100/(u-p)}function X(p,u,O){return 100*u/(p[O+1]-p[O])}function q(p,u){return X(p,p[0]<0?u+Math.abs(p[0]):u-p[0],0)}function fe(p,u){return u*(p[1]-p[0])/100+p[0]}function de(p,u){for(var O=1;p>=u[O];)O+=1;return O}function z(p,u,O){if(O>=p.slice(-1)[0])return 100;var W=de(O,p),H=p[W-1],te=p[W],ae=u[W-1],_e=u[W];return ae+q([H,te],O)/ke(ae,_e)}function me(p,u,O){if(O>=100)return p.slice(-1)[0];var W=de(O,u),H=p[W-1],te=p[W],ae=u[W-1];return fe([H,te],(O-ae)*ke(ae,u[W]))}function xe(p,u,O,W){if(W===100)return W;var H=de(W,p),te=p[H-1],ae=p[H];return O?W-te>(ae-te)/2?ae:te:u[H-1]?p[H-1]+d(W-p[H-1],u[H-1]):W}var oe,he;s.PipsMode=void 0,(he=s.PipsMode||(s.PipsMode={})).Range="range",he.Steps="steps",he.Positions="positions",he.Count="count",he.Values="values",s.PipsType=void 0,(oe=s.PipsType||(s.PipsType={}))[oe.None=-1]="None",oe[oe.NoValue=0]="NoValue",oe[oe.LargeValue=1]="LargeValue",oe[oe.SmallValue=2]="SmallValue";var Ce=function(){function p(u,O,W){var H;this.xPct=[],this.xVal=[],this.xSteps=[],this.xNumSteps=[],this.xHighestCompleteStep=[],this.xSteps=[W||!1],this.xNumSteps=[!1],this.snap=O;var te=[];for(Object.keys(u).forEach(function(ae){te.push([b(u[ae]),ae])}),te.sort(function(ae,_e){return ae[0][0]-_e[0][0]}),H=0;H<te.length;H++)this.handleEntryPoint(te[H][1],te[H][0]);for(this.xNumSteps=this.xSteps.slice(0),H=0;H<this.xNumSteps.length;H++)this.handleStepPoint(H,this.xNumSteps[H])}return p.prototype.getDistance=function(u){for(var O=[],W=0;W<this.xNumSteps.length-1;W++)O[W]=X(this.xVal,u,W);return O},p.prototype.getAbsoluteDistance=function(u,O,W){var H,te=0;if(u<this.xPct[this.xPct.length-1])for(;u>this.xPct[te+1];)te++;else u===this.xPct[this.xPct.length-1]&&(te=this.xPct.length-2);W||u!==this.xPct[te+1]||te++,O===null&&(O=[]);var ae=1,_e=O[te],He=0,Ft=0,et=0,re=0;for(H=W?(u-this.xPct[te])/(this.xPct[te+1]-this.xPct[te]):(this.xPct[te+1]-u)/(this.xPct[te+1]-this.xPct[te]);_e>0;)He=this.xPct[te+1+re]-this.xPct[te+re],O[te+re]*ae+100-100*H>100?(Ft=He*H,ae=(_e-100*H)/O[te+re],H=1):(Ft=O[te+re]*He/100*ae,ae=0),W?(et-=Ft,this.xPct.length+re>=1&&re--):(et+=Ft,this.xPct.length-re>=1&&re++),_e=O[te+re]*ae;return u+et},p.prototype.toStepping=function(u){return u=z(this.xVal,this.xPct,u)},p.prototype.fromStepping=function(u){return me(this.xVal,this.xPct,u)},p.prototype.getStep=function(u){return u=xe(this.xPct,this.xSteps,this.snap,u)},p.prototype.getDefaultStep=function(u,O,W){var H=de(u,this.xPct);return(u===100||O&&u===this.xPct[H-1])&&(H=Math.max(H-1,1)),(this.xVal[H]-this.xVal[H-1])/W},p.prototype.getNearbySteps=function(u){var O=de(u,this.xPct);return{stepBefore:{startValue:this.xVal[O-2],step:this.xNumSteps[O-2],highestStep:this.xHighestCompleteStep[O-2]},thisStep:{startValue:this.xVal[O-1],step:this.xNumSteps[O-1],highestStep:this.xHighestCompleteStep[O-1]},stepAfter:{startValue:this.xVal[O],step:this.xNumSteps[O],highestStep:this.xHighestCompleteStep[O]}}},p.prototype.countStepDecimals=function(){var u=this.xNumSteps.map(_);return Math.max.apply(null,u)},p.prototype.hasNoSize=function(){return this.xVal[0]===this.xVal[this.xVal.length-1]},p.prototype.convert=function(u){return this.getStep(this.toStepping(u))},p.prototype.handleEntryPoint=function(u,O){var W;if(!h(W=u==="min"?0:u==="max"?100:parseFloat(u))||!h(O[0]))throw new Error("noUiSlider: 'range' value isn't numeric.");this.xPct.push(W),this.xVal.push(O[0]);var H=Number(O[1]);W?this.xSteps.push(!isNaN(H)&&H):isNaN(H)||(this.xSteps[0]=H),this.xHighestCompleteStep.push(0)},p.prototype.handleStepPoint=function(u,O){if(O)if(this.xVal[u]!==this.xVal[u+1]){this.xSteps[u]=X([this.xVal[u],this.xVal[u+1]],O,0)/ke(this.xPct[u],this.xPct[u+1]);var W=(this.xVal[u+1]-this.xVal[u])/this.xNumSteps[u],H=Math.ceil(Number(W.toFixed(3))-1),te=this.xVal[u]+this.xNumSteps[u]*H;this.xHighestCompleteStep[u]=te}else this.xSteps[u]=this.xHighestCompleteStep[u]=this.xVal[u]},p}(),ge={to:function(p){return p===void 0?"":p.toFixed(2)},from:Number},Re={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},Me={tooltips:".__tooltips",aria:".__aria"};function Ue(p,u){if(!h(u))throw new Error("noUiSlider: 'step' is not numeric.");p.singleStep=u}function je(p,u){if(!h(u))throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");p.keyboardPageMultiplier=u}function Lt(p,u){if(!h(u))throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");p.keyboardMultiplier=u}function Ht(p,u){if(!h(u))throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");p.keyboardDefaultStep=u}function Ge(p,u){if(typeof u!="object"||Array.isArray(u))throw new Error("noUiSlider: 'range' is not an object.");if(u.min===void 0||u.max===void 0)throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");p.spectrum=new Ce(u,p.snap||!1,p.singleStep)}function Z(p,u){if(u=b(u),!Array.isArray(u)||!u.length)throw new Error("noUiSlider: 'start' option is incorrect.");p.handles=u.length,p.start=u}function Te(p,u){if(typeof u!="boolean")throw new Error("noUiSlider: 'snap' option must be a boolean.");p.snap=u}function js(p,u){if(typeof u!="boolean")throw new Error("noUiSlider: 'animate' option must be a boolean.");p.animate=u}function Xt(p,u){if(typeof u!="number")throw new Error("noUiSlider: 'animationDuration' option must be a number.");p.animationDuration=u}function qs(p,u){var O,W=[!1];if(u==="lower"?u=[!0,!1]:u==="upper"&&(u=[!1,!0]),u===!0||u===!1){for(O=1;O<p.handles;O++)W.push(u);W.push(!1)}else{if(!Array.isArray(u)||!u.length||u.length!==p.handles+1)throw new Error("noUiSlider: 'connect' option doesn't match handle count.");W=u}p.connect=W}function Ws(p,u){switch(u){case"horizontal":p.ort=0;break;case"vertical":p.ort=1;break;default:throw new Error("noUiSlider: 'orientation' option is invalid.")}}function g(p,u){if(!h(u))throw new Error("noUiSlider: 'margin' option must be numeric.");u!==0&&(p.margin=p.spectrum.getDistance(u))}function y(p,u){if(!h(u))throw new Error("noUiSlider: 'limit' option must be numeric.");if(p.limit=p.spectrum.getDistance(u),!p.limit||p.handles<2)throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.")}function C(p,u){var O;if(!h(u)&&!Array.isArray(u))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(u)&&u.length!==2&&!h(u[0])&&!h(u[1]))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(u!==0){for(Array.isArray(u)||(u=[u,u]),p.padding=[p.spectrum.getDistance(u[0]),p.spectrum.getDistance(u[1])],O=0;O<p.spectrum.xNumSteps.length-1;O++)if(p.padding[0][O]<0||p.padding[1][O]<0)throw new Error("noUiSlider: 'padding' option must be a positive number(s).");var W=u[0]+u[1],H=p.spectrum.xVal[0];if(W/(p.spectrum.xVal[p.spectrum.xVal.length-1]-H)>1)throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.")}}function A(p,u){switch(u){case"ltr":p.dir=0;break;case"rtl":p.dir=1;break;default:throw new Error("noUiSlider: 'direction' option was not recognized.")}}function L(p,u){if(typeof u!="string")throw new Error("noUiSlider: 'behaviour' must be a string containing options.");var O=u.indexOf("tap")>=0,W=u.indexOf("drag")>=0,H=u.indexOf("fixed")>=0,te=u.indexOf("snap")>=0,ae=u.indexOf("hover")>=0,_e=u.indexOf("unconstrained")>=0,He=u.indexOf("drag-all")>=0,Ft=u.indexOf("smooth-steps")>=0;if(H){if(p.handles!==2)throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");g(p,p.start[1]-p.start[0])}if(_e&&(p.margin||p.limit))throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");p.events={tap:O||te,drag:W,dragAll:He,smoothSteps:Ft,fixed:H,snap:te,hover:ae,unconstrained:_e}}function R(p,u){if(u!==!1)if(u===!0||n(u)){p.tooltips=[];for(var O=0;O<p.handles;O++)p.tooltips.push(u)}else{if((u=b(u)).length!==p.handles)throw new Error("noUiSlider: must pass a formatter for all handles.");u.forEach(function(W){if(typeof W!="boolean"&&!n(W))throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.")}),p.tooltips=u}}function B(p,u){if(u.length!==p.handles)throw new Error("noUiSlider: must pass a attributes for all handles.");p.handleAttributes=u}function $(p,u){if(!n(u))throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");p.ariaFormat=u}function F(p,u){if(!i(u))throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");p.format=u}function M(p,u){if(typeof u!="boolean")throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");p.keyboardSupport=u}function Q(p,u){p.documentElement=u}function J(p,u){if(typeof u!="string"&&u!==!1)throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");p.cssPrefix=u}function ee(p,u){if(typeof u!="object")throw new Error("noUiSlider: 'cssClasses' must be an object.");typeof p.cssPrefix=="string"?(p.cssClasses={},Object.keys(u).forEach(function(O){p.cssClasses[O]=p.cssPrefix+u[O]})):p.cssClasses=u}function ie(p){var u={margin:null,limit:null,padding:null,animate:!0,animationDuration:300,ariaFormat:ge,format:ge},O={step:{r:!1,t:Ue},keyboardPageMultiplier:{r:!1,t:je},keyboardMultiplier:{r:!1,t:Lt},keyboardDefaultStep:{r:!1,t:Ht},start:{r:!0,t:Z},connect:{r:!0,t:qs},direction:{r:!0,t:A},snap:{r:!1,t:Te},animate:{r:!1,t:js},animationDuration:{r:!1,t:Xt},range:{r:!0,t:Ge},orientation:{r:!1,t:Ws},margin:{r:!1,t:g},limit:{r:!1,t:y},padding:{r:!1,t:C},behaviour:{r:!0,t:L},ariaFormat:{r:!1,t:$},format:{r:!1,t:F},tooltips:{r:!1,t:R},keyboardSupport:{r:!0,t:M},documentElement:{r:!1,t:Q},cssPrefix:{r:!0,t:J},cssClasses:{r:!0,t:ee},handleAttributes:{r:!1,t:B}},W={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:Re,keyboardPageMultiplier:5,keyboardMultiplier:1,keyboardDefaultStep:10};p.format&&!p.ariaFormat&&(p.ariaFormat=p.format),Object.keys(O).forEach(function(He){if(r(p[He])||W[He]!==void 0)O[He].t(u,r(p[He])?p[He]:W[He]);else if(O[He].r)throw new Error("noUiSlider: '"+He+"' is required.")}),u.pips=p.pips;var H=document.createElement("div"),te=H.style.msTransform!==void 0,ae=H.style.transform!==void 0;u.transformRule=ae?"transform":te?"msTransform":"webkitTransform";var _e=[["left","top"],["right","bottom"]];return u.style=_e[u.dir][u.ort],u}function pe(p,u,O){var W,H,te,ae,_e,He=se(),Ft=$e()&&le(),et=p,re=u.spectrum,Dt=[],ze=[],dt=[],_n=0,Bt={},Es=p.ownerDocument,bi=u.documentElement||Es.documentElement,yi=Es.body,Xa=Es.dir==="rtl"||u.ort===1?0:100;function It(m,w){var x=Es.createElement("div");return w&&E(x,w),m.appendChild(x),x}function Za(m,w){var x=It(m,u.cssClasses.origin),T=It(x,u.cssClasses.handle);if(It(T,u.cssClasses.touchArea),T.setAttribute("data-handle",String(w)),u.keyboardSupport&&(T.setAttribute("tabindex","0"),T.addEventListener("keydown",function(D){return dc(D,w)})),u.handleAttributes!==void 0){var I=u.handleAttributes[w];Object.keys(I).forEach(function(D){T.setAttribute(D,I[D])})}return T.setAttribute("role","slider"),T.setAttribute("aria-orientation",u.ort?"vertical":"horizontal"),w===0?E(T,u.cssClasses.handleLower):w===u.handles-1&&E(T,u.cssClasses.handleUpper),x}function ir(m,w){return!!w&&It(m,u.cssClasses.connect)}function Ga(m,w){var x=It(w,u.cssClasses.connects);H=[],(te=[]).push(ir(x,m[0]));for(var T=0;T<u.handles;T++)H.push(Za(w,T)),dt[T]=T,te.push(ir(x,m[T+1]))}function Qa(m){return E(m,u.cssClasses.target),u.dir===0?E(m,u.cssClasses.ltr):E(m,u.cssClasses.rtl),u.ort===0?E(m,u.cssClasses.horizontal):E(m,u.cssClasses.vertical),E(m,getComputedStyle(m).direction==="rtl"?u.cssClasses.textDirectionRtl:u.cssClasses.textDirectionLtr),It(m,u.cssClasses.base)}function ec(m,w){return!(!u.tooltips||!u.tooltips[w])&&It(m.firstChild,u.cssClasses.tooltip)}function nr(){return et.hasAttribute("disabled")}function kn(m){return H[m].hasAttribute("disabled")}function xn(){_e&&(Ks("update"+Me.tooltips),_e.forEach(function(m){m&&o(m)}),_e=null)}function or(){xn(),_e=H.map(ec),An("update"+Me.tooltips,function(m,w,x){if(_e&&u.tooltips&&_e[w]!==!1){var T=m[w];u.tooltips[w]!==!0&&(T=u.tooltips[w].to(x[w])),_e[w].innerHTML=T}})}function tc(){Ks("update"+Me.aria),An("update"+Me.aria,function(m,w,x,T,I){dt.forEach(function(D){var ce=H[D],j=wi(ze,D,0,!0,!0,!0),We=wi(ze,D,100,!0,!0,!0),Ve=I[D],Oe=String(u.ariaFormat.to(x[D]));j=re.fromStepping(j).toFixed(1),We=re.fromStepping(We).toFixed(1),Ve=re.fromStepping(Ve).toFixed(1),ce.children[0].setAttribute("aria-valuemin",j),ce.children[0].setAttribute("aria-valuemax",We),ce.children[0].setAttribute("aria-valuenow",Ve),ce.children[0].setAttribute("aria-valuetext",Oe)})})}function sc(m){if(m.mode===s.PipsMode.Range||m.mode===s.PipsMode.Steps)return re.xVal;if(m.mode===s.PipsMode.Count){if(m.values<2)throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");for(var w=m.values-1,x=100/w,T=[];w--;)T[w]=w*x;return T.push(100),rr(T,m.stepped)}return m.mode===s.PipsMode.Positions?rr(m.values,m.stepped):m.mode===s.PipsMode.Values?m.stepped?m.values.map(function(I){return re.fromStepping(re.getStep(re.toStepping(I)))}):m.values:[]}function rr(m,w){return m.map(function(x){return re.fromStepping(w?re.getStep(x):x)})}function ic(m){function w(Ve,Oe){return Number((Ve+Oe).toFixed(7))}var x=sc(m),T={},I=re.xVal[0],D=re.xVal[re.xVal.length-1],ce=!1,j=!1,We=0;return(x=a(x.slice().sort(function(Ve,Oe){return Ve-Oe})))[0]!==I&&(x.unshift(I),ce=!0),x[x.length-1]!==D&&(x.push(D),j=!0),x.forEach(function(Ve,Oe){var Be,Ae,tt,at,Xe,mr,On,gr,vr,br,Nn=Ve,Ls=x[Oe+1],yr=m.mode===s.PipsMode.Steps;for(yr&&(Be=re.xNumSteps[Oe]),Be||(Be=Ls-Nn),Ls===void 0&&(Ls=Nn),Be=Math.max(Be,1e-7),Ae=Nn;Ae<=Ls;Ae=w(Ae,Be)){for(gr=(Xe=(at=re.toStepping(Ae))-We)/(m.density||1),br=Xe/(vr=Math.round(gr)),tt=1;tt<=vr;tt+=1)T[(mr=We+tt*br).toFixed(5)]=[re.fromStepping(mr),0];On=x.indexOf(Ae)>-1?s.PipsType.LargeValue:yr?s.PipsType.SmallValue:s.PipsType.NoValue,!Oe&&ce&&Ae!==Ls&&(On=0),Ae===Ls&&j||(T[at.toFixed(5)]=[Ae,On]),We=at}}),T}function nc(m,w,x){var T,I,D=Es.createElement("div"),ce=((T={})[s.PipsType.None]="",T[s.PipsType.NoValue]=u.cssClasses.valueNormal,T[s.PipsType.LargeValue]=u.cssClasses.valueLarge,T[s.PipsType.SmallValue]=u.cssClasses.valueSub,T),j=((I={})[s.PipsType.None]="",I[s.PipsType.NoValue]=u.cssClasses.markerNormal,I[s.PipsType.LargeValue]=u.cssClasses.markerLarge,I[s.PipsType.SmallValue]=u.cssClasses.markerSub,I),We=[u.cssClasses.valueHorizontal,u.cssClasses.valueVertical],Ve=[u.cssClasses.markerHorizontal,u.cssClasses.markerVertical];function Oe(Ae,tt){var at=tt===u.cssClasses.value,Xe=at?ce:j;return tt+" "+(at?We:Ve)[u.ort]+" "+Xe[Ae]}function Be(Ae,tt,at){if((at=w?w(tt,at):at)!==s.PipsType.None){var Xe=It(D,!1);Xe.className=Oe(at,u.cssClasses.marker),Xe.style[u.style]=Ae+"%",at>s.PipsType.NoValue&&((Xe=It(D,!1)).className=Oe(at,u.cssClasses.value),Xe.setAttribute("data-value",String(tt)),Xe.style[u.style]=Ae+"%",Xe.innerHTML=String(x.to(tt)))}}return E(D,u.cssClasses.pips),E(D,u.ort===0?u.cssClasses.pipsHorizontal:u.cssClasses.pipsVertical),Object.keys(m).forEach(function(Ae){Be(Ae,m[Ae][0],m[Ae][1])}),D}function Cn(){ae&&(o(ae),ae=null)}function Sn(m){Cn();var w=ic(m),x=m.filter,T=m.format||{to:function(I){return String(Math.round(I))}};return ae=et.appendChild(nc(w,x,T))}function lr(){var m=W.getBoundingClientRect(),w="offset"+["Width","Height"][u.ort];return u.ort===0?m.width||W[w]:m.height||W[w]}function us(m,w,x,T){var I=function(ce){var j=oc(ce,T.pageOffset,T.target||w);return!!j&&!(nr()&&!T.doNotReject)&&!(Y(et,u.cssClasses.tap)&&!T.doNotReject)&&!(m===He.start&&j.buttons!==void 0&&j.buttons>1)&&(!T.hover||!j.buttons)&&(Ft||j.preventDefault(),j.calcPoint=j.points[u.ort],void x(j,T))},D=[];return m.split(" ").forEach(function(ce){w.addEventListener(ce,I,!!Ft&&{passive:!0}),D.push([ce,I])}),D}function oc(m,w,x){var T=m.type.indexOf("touch")===0,I=m.type.indexOf("mouse")===0,D=m.type.indexOf("pointer")===0,ce=0,j=0;if(m.type.indexOf("MSPointer")===0&&(D=!0),m.type==="mousedown"&&!m.buttons&&!m.touches)return!1;if(T){var We=function(Be){var Ae=Be.target;return Ae===x||x.contains(Ae)||m.composed&&m.composedPath().shift()===x};if(m.type==="touchstart"){var Ve=Array.prototype.filter.call(m.touches,We);if(Ve.length>1)return!1;ce=Ve[0].pageX,j=Ve[0].pageY}else{var Oe=Array.prototype.find.call(m.changedTouches,We);if(!Oe)return!1;ce=Oe.pageX,j=Oe.pageY}}return w=w||K(Es),(I||D)&&(ce=m.clientX+w.x,j=m.clientY+w.y),m.pageOffset=w,m.points=[ce,j],m.cursor=I||D,m}function ar(m){var w=100*(m-f(W,u.ort))/lr();return w=k(w),u.dir?100-w:w}function rc(m){var w=100,x=!1;return H.forEach(function(T,I){if(!kn(I)){var D=ze[I],ce=Math.abs(D-m);(ce<w||ce<=w&&m>D||ce===100&&w===100)&&(x=I,w=ce)}}),x}function lc(m,w){m.type==="mouseout"&&m.target.nodeName==="HTML"&&m.relatedTarget===null&&En(m,w)}function ac(m,w){if(navigator.appVersion.indexOf("MSIE 9")===-1&&m.buttons===0&&w.buttonsProperty!==0)return En(m,w);var x=(u.dir?-1:1)*(m.calcPoint-w.startCalcPoint);cr(x>0,100*x/w.baseSize,w.locations,w.handleNumbers,w.connect)}function En(m,w){w.handle&&(P(w.handle,u.cssClasses.active),_n-=1),w.listeners.forEach(function(x){bi.removeEventListener(x[0],x[1])}),_n===0&&(P(et,u.cssClasses.drag),Mn(),m.cursor&&(yi.style.cursor="",yi.removeEventListener("selectstart",l))),u.events.smoothSteps&&(w.handleNumbers.forEach(function(x){ds(x,ze[x],!0,!0,!1,!1)}),w.handleNumbers.forEach(function(x){qe("update",x)})),w.handleNumbers.forEach(function(x){qe("change",x),qe("set",x),qe("end",x)})}function Ln(m,w){if(!w.handleNumbers.some(kn)){var x;w.handleNumbers.length===1&&(x=H[w.handleNumbers[0]].children[0],_n+=1,E(x,u.cssClasses.active)),m.stopPropagation();var T=[],I=us(He.move,bi,ac,{target:m.target,handle:x,connect:w.connect,listeners:T,startCalcPoint:m.calcPoint,baseSize:lr(),pageOffset:m.pageOffset,handleNumbers:w.handleNumbers,buttonsProperty:m.buttons,locations:ze.slice()}),D=us(He.end,bi,En,{target:m.target,handle:x,listeners:T,doNotReject:!0,handleNumbers:w.handleNumbers}),ce=us("mouseout",bi,lc,{target:m.target,handle:x,listeners:T,doNotReject:!0,handleNumbers:w.handleNumbers});T.push.apply(T,I.concat(D,ce)),m.cursor&&(yi.style.cursor=getComputedStyle(m.target).cursor,H.length>1&&E(et,u.cssClasses.drag),yi.addEventListener("selectstart",l,!1)),w.handleNumbers.forEach(function(j){qe("start",j)})}}function cc(m){m.stopPropagation();var w=ar(m.calcPoint),x=rc(w);x!==!1&&(u.events.snap||v(et,u.cssClasses.tap,u.animationDuration),ds(x,w,!0,!0),Mn(),qe("slide",x,!0),qe("update",x,!0),u.events.snap?Ln(m,{handleNumbers:[x]}):(qe("change",x,!0),qe("set",x,!0)))}function uc(m){var w=ar(m.calcPoint),x=re.getStep(w),T=re.fromStepping(x);Object.keys(Bt).forEach(function(I){I.split(".")[0]==="hover"&&Bt[I].forEach(function(D){D.call(ki,T)})})}function dc(m,w){if(nr()||kn(w))return!1;var x=["Left","Right"],T=["Down","Up"],I=["PageDown","PageUp"],D=["Home","End"];u.dir&&!u.ort?x.reverse():u.ort&&!u.dir&&(T.reverse(),I.reverse());var ce,j=m.key.replace("Arrow",""),We=j===I[0],Ve=j===I[1],Oe=j===T[0]||j===x[0]||We,Be=j===T[1]||j===x[1]||Ve,Ae=j===D[0],tt=j===D[1];if(!(Oe||Be||Ae||tt))return!0;if(m.preventDefault(),Be||Oe){var at=Oe?0:1,Xe=pr(w)[at];if(Xe===null)return!1;Xe===!1&&(Xe=re.getDefaultStep(ze[w],Oe,u.keyboardDefaultStep)),Xe*=Ve||We?u.keyboardPageMultiplier:u.keyboardMultiplier,Xe=Math.max(Xe,1e-7),Xe*=Oe?-1:1,ce=Dt[w]+Xe}else ce=tt?u.spectrum.xVal[u.spectrum.xVal.length-1]:u.spectrum.xVal[0];return ds(w,re.toStepping(ce),!0,!0),qe("slide",w),qe("update",w),qe("change",w),qe("set",w),!1}function fc(m){m.fixed||H.forEach(function(w,x){us(He.start,w.children[0],Ln,{handleNumbers:[x]})}),m.tap&&us(He.start,W,cc,{}),m.hover&&us(He.move,W,uc,{hover:!0}),m.drag&&te.forEach(function(w,x){if(w!==!1&&x!==0&&x!==te.length-1){var T=H[x-1],I=H[x],D=[w],ce=[T,I],j=[x-1,x];E(w,u.cssClasses.draggable),m.fixed&&(D.push(T.children[0]),D.push(I.children[0])),m.dragAll&&(ce=H,j=dt),D.forEach(function(We){us(He.start,We,Ln,{handles:ce,handleNumbers:j,connect:w})})}})}function An(m,w){Bt[m]=Bt[m]||[],Bt[m].push(w),m.split(".")[0]==="update"&&H.forEach(function(x,T){qe("update",T)})}function hc(m){return m===Me.aria||m===Me.tooltips}function Ks(m){var w=m&&m.split(".")[0],x=w?m.substring(w.length):m;Object.keys(Bt).forEach(function(T){var I=T.split(".")[0],D=T.substring(I.length);w&&w!==I||x&&x!==D||hc(D)&&x!==D||delete Bt[T]})}function qe(m,w,x){Object.keys(Bt).forEach(function(T){var I=T.split(".")[0];m===I&&Bt[T].forEach(function(D){D.call(ki,Dt.map(u.format.to),w,Dt.slice(),x||!1,ze.slice(),ki)})})}function wi(m,w,x,T,I,D,ce){var j;return H.length>1&&!u.events.unconstrained&&(T&&w>0&&(j=re.getAbsoluteDistance(m[w-1],u.margin,!1),x=Math.max(x,j)),I&&w<H.length-1&&(j=re.getAbsoluteDistance(m[w+1],u.margin,!0),x=Math.min(x,j))),H.length>1&&u.limit&&(T&&w>0&&(j=re.getAbsoluteDistance(m[w-1],u.limit,!1),x=Math.min(x,j)),I&&w<H.length-1&&(j=re.getAbsoluteDistance(m[w+1],u.limit,!0),x=Math.max(x,j))),u.padding&&(w===0&&(j=re.getAbsoluteDistance(0,u.padding[0],!1),x=Math.max(x,j)),w===H.length-1&&(j=re.getAbsoluteDistance(100,u.padding[1],!0),x=Math.min(x,j))),ce||(x=re.getStep(x)),!((x=k(x))===m[w]&&!D)&&x}function Tn(m,w){var x=u.ort;return(x?w:m)+", "+(x?m:w)}function cr(m,w,x,T,I){var D=x.slice(),ce=T[0],j=u.events.smoothSteps,We=[!m,m],Ve=[m,!m];T=T.slice(),m&&T.reverse(),T.length>1?T.forEach(function(Be,Ae){var tt=wi(D,Be,D[Be]+w,We[Ae],Ve[Ae],!1,j);tt===!1?w=0:(w=tt-D[Be],D[Be]=tt)}):We=Ve=[!0];var Oe=!1;T.forEach(function(Be,Ae){Oe=ds(Be,x[Be]+w,We[Ae],Ve[Ae],!1,j)||Oe}),Oe&&(T.forEach(function(Be){qe("update",Be),qe("slide",Be)}),I!=null&&qe("drag",ce))}function ur(m,w){return u.dir?100-m-w:m}function pc(m,w){ze[m]=w,Dt[m]=re.fromStepping(w);var x="translate("+Tn(ur(w,0)-Xa+"%","0")+")";H[m].style[u.transformRule]=x,dr(m),dr(m+1)}function Mn(){dt.forEach(function(m){var w=ze[m]>50?-1:1,x=3+(H.length+w*m);H[m].style.zIndex=String(x)})}function ds(m,w,x,T,I,D){return I||(w=wi(ze,m,w,x,T,!1,D)),w!==!1&&(pc(m,w),!0)}function dr(m){if(te[m]){var w=0,x=100;m!==0&&(w=ze[m-1]),m!==te.length-1&&(x=ze[m]);var T=x-w,I="translate("+Tn(ur(w,T)+"%","0")+")",D="scale("+Tn(T/100,"1")+")";te[m].style[u.transformRule]=I+" "+D}}function fr(m,w){return m===null||m===!1||m===void 0?ze[w]:(typeof m=="number"&&(m=String(m)),(m=u.format.from(m))!==!1&&(m=re.toStepping(m)),m===!1||isNaN(m)?ze[w]:m)}function _i(m,w,x){var T=b(m),I=ze[0]===void 0;w=w===void 0||w,u.animate&&!I&&v(et,u.cssClasses.tap,u.animationDuration),dt.forEach(function(j){ds(j,fr(T[j],j),!0,!1,x)});var D=dt.length===1?0:1;if(I&&re.hasNoSize()&&(x=!0,ze[0]=0,dt.length>1)){var ce=100/(dt.length-1);dt.forEach(function(j){ze[j]=j*ce})}for(;D<dt.length;++D)dt.forEach(function(j){ds(j,ze[j],!0,!0,x)});Mn(),dt.forEach(function(j){qe("update",j),T[j]!==null&&w&&qe("set",j)})}function mc(m){_i(u.start,m)}function gc(m,w,x,T){if(!((m=Number(m))>=0&&m<dt.length))throw new Error("noUiSlider: invalid handle number, got: "+m);ds(m,fr(w,m),!0,!0,T),qe("update",m),x&&qe("set",m)}function hr(m){if(m===void 0&&(m=!1),m)return Dt.length===1?Dt[0]:Dt.slice(0);var w=Dt.map(u.format.to);return w.length===1?w[0]:w}function vc(){for(Ks(Me.aria),Ks(Me.tooltips),Object.keys(u.cssClasses).forEach(function(m){P(et,u.cssClasses[m])});et.firstChild;)et.removeChild(et.firstChild);delete et.noUiSlider}function pr(m){var w=ze[m],x=re.getNearbySteps(w),T=Dt[m],I=x.thisStep.step,D=null;if(u.snap)return[T-x.stepBefore.startValue||null,x.stepAfter.startValue-T||null];I!==!1&&T+I>x.stepAfter.startValue&&(I=x.stepAfter.startValue-T),D=T>x.thisStep.startValue?x.thisStep.step:x.stepBefore.step!==!1&&T-x.stepBefore.highestStep,w===100?I=null:w===0&&(D=null);var ce=re.countStepDecimals();return I!==null&&I!==!1&&(I=Number(I.toFixed(ce))),D!==null&&D!==!1&&(D=Number(D.toFixed(ce))),[D,I]}function bc(){return dt.map(pr)}function yc(m,w){var x=hr(),T=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];T.forEach(function(D){m[D]!==void 0&&(O[D]=m[D])});var I=ie(O);T.forEach(function(D){m[D]!==void 0&&(u[D]=I[D])}),re=I.spectrum,u.margin=I.margin,u.limit=I.limit,u.padding=I.padding,u.pips?Sn(u.pips):Cn(),u.tooltips?or():xn(),ze=[],_i(r(m.start)?m.start:x,w)}function wc(){W=Qa(et),Ga(u.connect,W),fc(u.events),_i(u.start),u.pips&&Sn(u.pips),u.tooltips&&or(),tc()}wc();var ki={destroy:vc,steps:bc,on:An,off:Ks,get:hr,set:_i,setHandle:gc,reset:mc,__moveHandles:function(m,w,x){cr(m,w,ze,x)},options:O,updateOptions:yc,target:et,removePips:Cn,removeTooltips:xn,getPositions:function(){return ze.slice()},getTooltips:function(){return _e},getOrigins:function(){return H},pips:Sn};return ki}function Le(p,u){if(!p||!p.nodeName)throw new Error("noUiSlider: create requires a single element, got: "+p);if(p.noUiSlider)throw new Error("noUiSlider: Slider was already initialized.");var O=pe(p,ie(u),u);return p.noUiSlider=O,O}var Se={__spectrum:Ce,cssClasses:Re,create:Le};s.create=Le,s.cssClasses=Re,s.default=Se,Object.defineProperty(s,"__esModule",{value:!0})})(t)}));function bl(e,t){if(!Array.isArray(e)||!Array.isArray(t))return!1;const s=t.slice().sort();return e.length===t.length&&e.slice().sort().every(function(i,n){return i===s[n]})}var bo={name:"Slider",emits:["input","update:modelValue","start","slide","drag","update","change","set","end"],props:{value:{validator:function(e){return t=>typeof t=="number"||t instanceof Array||t==null||t===!1},required:!1},modelValue:{validator:function(e){return t=>typeof t=="number"||t instanceof Array||t==null||t===!1},required:!1},id:{type:[String,Number],required:!1},disabled:{type:Boolean,required:!1,default:!1},min:{type:Number,required:!1,default:0},max:{type:Number,required:!1,default:100},step:{type:Number,required:!1,default:1},orientation:{type:String,required:!1,default:"horizontal"},direction:{type:String,required:!1,default:"ltr"},tooltips:{type:Boolean,required:!1,default:!0},options:{type:Object,required:!1,default:()=>({})},merge:{type:Number,required:!1,default:-1},format:{type:[Object,Function,Boolean],required:!1,default:null},classes:{type:Object,required:!1,default:()=>({})},showTooltip:{type:String,required:!1,default:"always"},tooltipPosition:{type:String,required:!1,default:null},lazy:{type:Boolean,required:!1,default:!0},ariaLabelledby:{type:String,required:!1,default:void 0},aria:{required:!1,type:Object,default:()=>({})}},setup(e,t){const s=function(r,l,a){const{value:d,modelValue:f,min:h}=ei(r);let v=f&&f.value!==void 0?f:d;const k=Ot(v.value);if(Oi(v.value)&&(v=Ot(h.value)),Array.isArray(v.value)&&v.value.length==0)throw new Error("Slider v-model must not be an empty array");return{value:v,initialValue:k}}(e),i=function(r,l,a){const{classes:d,showTooltip:f,tooltipPosition:h,orientation:v}=ei(r),k=Vt(()=>({target:"slider-target",focused:"slider-focused",tooltipFocus:"slider-tooltip-focus",tooltipDrag:"slider-tooltip-drag",ltr:"slider-ltr",rtl:"slider-rtl",horizontal:"slider-horizontal",vertical:"slider-vertical",textDirectionRtl:"slider-txt-dir-rtl",textDirectionLtr:"slider-txt-dir-ltr",base:"slider-base",connects:"slider-connects",connect:"slider-connect",origin:"slider-origin",handle:"slider-handle",handleLower:"slider-handle-lower",handleUpper:"slider-handle-upper",touchArea:"slider-touch-area",tooltip:"slider-tooltip",tooltipTop:"slider-tooltip-top",tooltipBottom:"slider-tooltip-bottom",tooltipLeft:"slider-tooltip-left",tooltipRight:"slider-tooltip-right",tooltipHidden:"slider-tooltip-hidden",active:"slider-active",draggable:"slider-draggable",tap:"slider-state-tap",drag:"slider-state-drag",pips:"slider-pips",pipsHorizontal:"slider-pips-horizontal",pipsVertical:"slider-pips-vertical",marker:"slider-marker",markerHorizontal:"slider-marker-horizontal",markerVertical:"slider-marker-vertical",markerNormal:"slider-marker-normal",markerLarge:"slider-marker-large",markerSub:"slider-marker-sub",value:"slider-value",valueHorizontal:"slider-value-horizontal",valueVertical:"slider-value-vertical",valueNormal:"slider-value-normal",valueLarge:"slider-value-large",valueSub:"slider-value-sub",...d.value}));return{classList:Vt(()=>{const b={...k.value};return Object.keys(b).forEach(_=>{b[_]=Array.isArray(b[_])?b[_].filter(E=>E!==null).join(" "):b[_]}),f.value!=="always"&&(b.target+=` ${f.value==="drag"?b.tooltipDrag:b.tooltipFocus}`),v.value==="horizontal"&&(b.tooltip+=h.value==="bottom"?` ${b.tooltipBottom}`:` ${b.tooltipTop}`),v.value==="vertical"&&(b.tooltip+=h.value==="right"?` ${b.tooltipRight}`:` ${b.tooltipLeft}`),b})}}(e),n=function(r,l,a){const{format:d,step:f}=ei(r),h=a.value,v=a.classList,k=Vt(()=>d&&d.value?typeof d.value=="function"?{to:d.value}:vl({...d.value}):vl({decimals:f.value>=0?0:2})),b=Vt(()=>Array.isArray(h.value)?h.value.map(_=>k.value):k.value);return{tooltipFormat:k,tooltipsFormat:b,tooltipsMerge:(_,E,P)=>{var Y=getComputedStyle(_).direction==="rtl",K=_.noUiSlider.options.direction==="rtl",se=_.noUiSlider.options.orientation==="vertical",le=_.noUiSlider.getTooltips(),$e=_.noUiSlider.getOrigins();le.forEach(function(ke,X){ke&&$e[X].appendChild(ke)}),_.noUiSlider.on("update",function(ke,X,q,fe,de){var z=[[]],me=[[]],xe=[[]],oe=0;le[0]&&(z[0][0]=0,me[0][0]=de[0],xe[0][0]=k.value.to(parseFloat(ke[0])));for(var he=1;he<ke.length;he++)(!le[he]||ke[he]-ke[he-1]>E)&&(z[++oe]=[],xe[oe]=[],me[oe]=[]),le[he]&&(z[oe].push(he),xe[oe].push(k.value.to(parseFloat(ke[he]))),me[oe].push(de[he]));z.forEach(function(Ce,ge){for(var Re=Ce.length,Me=0;Me<Re;Me++){var Ue=Ce[Me];if(Me===Re-1){var je=0;me[ge].forEach(function(Z){je+=1e3-Z});var Lt=se?"bottom":"right",Ht=K?0:Re-1,Ge=1e3-me[ge][Ht];je=(Y&&!se?100:0)+je/Re-Ge,le[Ue].innerHTML=xe[ge].join(P),le[Ue].style.display="block",le[Ue].style[Lt]=je+"%",v.value.tooltipHidden.split(" ").forEach(Z=>{le[Ue].classList.contains(Z)&&le[Ue].classList.remove(Z)})}else le[Ue].style.display="none",v.value.tooltipHidden.split(" ").forEach(Z=>{le[Ue].classList.add(Z)})}})})}}}(e,0,{value:s.value,classList:i.classList}),o=function(r,l,a){const{orientation:d,direction:f,tooltips:h,step:v,min:k,max:b,merge:_,id:E,disabled:P,options:Y,classes:K,format:se,lazy:le,ariaLabelledby:$e,aria:ke}=ei(r),X=a.value,q=a.initialValue,fe=a.tooltipsFormat,de=a.tooltipsMerge,z=a.tooltipFormat,me=a.classList,xe=Ot(null),oe=Ot(null),he=Ot(!1),Ce=Vt(()=>{let Z={cssPrefix:"",cssClasses:me.value,orientation:d.value,direction:f.value,tooltips:!!h.value&&fe.value,connect:"lower",start:Oi(X.value)?k.value:X.value,range:{min:k.value,max:b.value}};if(v.value>0&&(Z.step=v.value),Array.isArray(X.value)&&(Z.connect=!0),$e&&$e.value||ke&&Object.keys(ke.value).length){let Te=Array.isArray(X.value)?X.value:[X.value];Z.handleAttributes=Te.map(js=>Object.assign({},ke.value,$e&&$e.value?{"aria-labelledby":$e.value}:{}))}return se.value&&(Z.ariaFormat=z.value),Z}),ge=Vt(()=>{let Z={id:E&&E.value?E.value:void 0};return P.value&&(Z.disabled=!0),Z}),Re=Vt(()=>Array.isArray(X.value)),Me=()=>{let Z=oe.value.get();return Array.isArray(Z)?Z.map(Te=>parseFloat(Te)):parseFloat(Z)},Ue=function(Z){let Te=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1];oe.value.set(Z,Te)},je=Z=>{l.emit("input",Z),l.emit("update:modelValue",Z),l.emit("update",Z)},Lt=()=>{oe.value=K1.create(xe.value,Object.assign({},Ce.value,Y.value)),h.value&&Re.value&&_.value>=0&&de(xe.value,_.value," - "),oe.value.on("set",()=>{const Z=Me();l.emit("change",Z),l.emit("set",Z),le.value&&je(Z)}),oe.value.on("update",()=>{if(!he.value)return;const Z=Me();Re.value&&bl(X.value,Z)||!Re.value&&X.value==Z?l.emit("update",Z):le.value||je(Z)}),oe.value.on("start",()=>{l.emit("start",Me())}),oe.value.on("end",()=>{l.emit("end",Me())}),oe.value.on("slide",()=>{l.emit("slide",Me())}),oe.value.on("drag",()=>{l.emit("drag",Me())}),xe.value.querySelectorAll("[data-handle]").forEach(Z=>{Z.onblur=()=>{xe.value&&me.value.focused.split(" ").forEach(Te=>{xe.value.classList.remove(Te)})},Z.onfocus=()=>{me.value.focused.split(" ").forEach(Te=>{xe.value.classList.add(Te)})}}),he.value=!0},Ht=()=>{oe.value.off(),oe.value.destroy(),oe.value=null},Ge=(Z,Te)=>{he.value=!1,Ht(),Lt()};return hn(Lt),pn(Ht),st(Re,Ge,{immediate:!1}),st(k,Ge,{immediate:!1}),st(b,Ge,{immediate:!1}),st(v,Ge,{immediate:!1}),st(d,Ge,{immediate:!1}),st(f,Ge,{immediate:!1}),st(h,Ge,{immediate:!1}),st(_,Ge,{immediate:!1}),st(se,Ge,{immediate:!1,deep:!0}),st(Y,Ge,{immediate:!1,deep:!0}),st(K,Ge,{immediate:!1,deep:!0}),st(X,(Z,Te)=>{Te&&(typeof Te=="object"&&typeof Z=="object"&&Z&&Object.keys(Te)>Object.keys(Z)||typeof Te=="object"&&typeof Z!="object"||Oi(Z))&&Ge()},{immediate:!1}),st(X,Z=>{if(Oi(Z))return void Ue(k.value,!1);let Te=Me();Re.value&&!Array.isArray(Te)&&(Te=[Te]),(Re.value&&!bl(Z,Te)||!Re.value&&Z!=Te)&&Ue(Z,!1)},{deep:!0}),{slider:xe,slider$:oe,isRange:Re,sliderProps:ge,init:Lt,destroy:Ht,refresh:Ge,update:Ue,reset:()=>{je(q.value)}}}(e,t,{value:s.value,initialValue:s.initialValue,tooltipFormat:n.tooltipFormat,tooltipsFormat:n.tooltipsFormat,tooltipsMerge:n.tooltipsMerge,classList:i.classList});return{...i,...n,...o}}};bo.render=function(e,t,s,i,n,o){return N(),U("div",za(e.sliderProps,{ref:"slider"}),null,16)},bo.__file="src/Slider.vue";const Y1={components:{Slider:bo},methods:{sliderUpdate(){console.log(this.value)}},data(){return{value:4}}};function J1(e,t,s,i,n,o){const r=Ne("Slider");return N(),U("div",null,[V(r,{onClick:o.sliderUpdate,min:0,max:5,modelValue:n.value,"onUpdate:modelValue":t[0]||(t[0]=l=>n.value=l),merge:1,tooltips:!1},null,8,["onClick","modelValue"])])}const X1=Je(Y1,[["render",J1]]);const Z1={components:{RangeSlider:X1,TemplateSettings:q1},methods:{closeSidebar(){this.showSidebar=!1,document.getElementById("live-edit-frame-holder").removeAttribute("style")},openSidebar(){this.showSidebar=!0,document.getElementById("live-edit-frame-holder").setAttribute("style","margin-right: 303px;")}},mounted(){const e=this;this.emitter.on("live-edit-ui-show",t=>{t=="template-settings"&&(e.showSidebar==!1?e.openSidebar():e.closeSidebar())}),document.addEventListener("keyup",function(t){t.keyCode===27&&(e.showSidebar=!1)})},data(){return{showSidebar:!0}}},G1={key:0};function Q1(e,t,s,i,n,o){const r=Ne("TemplateSettings"),l=Ne("RangeSlider");return N(),U("div",null,[c("div",{id:"general-theme-settings",class:ut([n.showSidebar==!0?"active":""])},[n.showSidebar?(N(),U("div",G1,[c("button",{onClick:t[0]||(t[0]=(...a)=>o.closeSidebar&&o.closeSidebar(...a)),type:"button",class:"btn btn-danger"}," Close Sidebar ")])):Ee("",!0),V(r),V(l)],2)])}const e0=Je(Z1,[["render",Q1]]),t0={},s0={style:{"fill-rule":"evenodd","clip-rule":"evenodd","stroke-linejoin":"round","stroke-miterlimit":"2"},version:"1.1",viewBox:"0 0 24 24",width:"100%","xml:space":"preserve",xmlns:"http://www.w3.org/2000/svg","xmlns:serif":"http://www.serif.com/","xmlns:xlink":"http://www.w3.org/1999/xlink"},i0=bn('<g id="Icon"><path d="M11.25,15.5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l-0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l-0,-3.5Zm-1.5,0l-0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l-0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path><path d="M11.25,5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l0,-3.5Zm-1.5,0l0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path><path d="M21.75,15.5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l0,-3.5Zm-1.5,0l0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path><path d="M21.75,5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l0,-3.5Zm-1.5,0l0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path></g>',1),n0=[i0];function o0(e,t){return N(),U("svg",s0,n0)}const r0=Je(t0,[["render",o0]]),l0={},a0={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"},c0=c("g",null,[c("path",{d:"M22 9.999V20a1 1 0 0 1-1 1h-8V9.999h9zm-11 6V21H3a1 1 0 0 1-1-1v-4.001h9zM11 3v10.999H2V4a1 1 0 0 1 1-1h8zm10 0a1 1 0 0 1 1 1v3.999h-9V3h8z"})],-1),u0=[c0];function d0(e,t){return N(),U("svg",a0,u0)}const f0=Je(l0,[["render",d0]]);const h0=(e,t)=>Array.from({length:Math.ceil(e.length/t)},(s,i)=>e.slice(i*t,i*t+t)),p0={name:"Loading",props:{color:{type:String,default:"#18191A"}}},m0={class:"dots"};function g0(e,t,s,i,n,o){return N(),U("div",m0,[c("div",{style:St(`background-color: ${s.color}`)},null,4),c("div",{style:St(`background-color: ${s.color}`)},null,4),c("div",{style:St(`background-color: ${s.color}`)},null,4)])}const v0=Je(p0,[["render",g0]]),b0={name:"LazyList",components:{Loading:v0},props:{data:{type:Array,default:()=>[]},itemsPerRender:{type:Number,default:3},containerClasses:{type:String,default:""},defaultLoading:{type:Boolean,default:!0},defaultLoadingColor:{type:String,default:"#18191A"}},created(){this.updateList(),this.$watch("data",function(){this.updateList()},{deep:!0})},mounted(){this.$refs.container.addEventListener("scroll",this.loadItems),this.loadItems()},beforeUnmount(){this.$refs.container.removeEventListener("scroll",this.loadItems)},data(){return{items:[],page:0,loading:!1,itemsToDisplay:[]}},methods:{updateList(){const e=h0(this.data,this.itemsPerRender);this.items=e,this.itemsToDisplay=e[0]},loadItems(){if(this.page===this.items.length-1)return;const e=this.$refs["end-of-list"];if(!e)return;const t=e.getBoundingClientRect();t.top>=0&&t.bottom<=window.innerHeight&&!this.loading&&(this.loading=!0,this.page++,setTimeout(()=>{this.items[this.page]===void 0&&(this.page=0),this.itemsToDisplay=[...this.itemsToDisplay,...this.items[this.page]],this.loading=!1,this.loadItems()},500))}}},y0={key:0,id:"loading-wrapper"},w0={key:1,id:"loading-wrapper"},_0={id:"end-of-list",ref:"end-of-list"};function k0(e,t,s,i,n,o){const r=Ne("Loading");return N(),U("div",{id:"container",ref:"container",class:ut(`${s.containerClasses}`)},[(N(!0),U(Pe,null,xt(n.itemsToDisplay,l=>Yi(e.$slots,"default",{item:l})),256)),n.loading?(N(),U(Pe,{key:0},[s.defaultLoading?(N(),U("div",y0,[V(r,{color:s.defaultLoadingColor},null,8,["color"])])):(N(),U("div",w0,[Yi(e.$slots,"loading")]))],64)):Ee("",!0),mn(c("div",_0,null,512),[[Gh,n.page!==n.items.length-1||!n.loading]])],2)}const x0=Je(b0,[["render",k0]]),C0=["data-index"],S0=Yt({__name:"masonry-wall",props:{columnWidth:{default:400},items:null,gap:{default:0},rtl:{type:Boolean,default:!1},ssrColumns:{default:0},scrollContainer:{default:null}},emits:["redraw","redrawSkip"],setup(e,{emit:t}){const s=e,{columnWidth:i,items:n,gap:o,rtl:r,ssrColumns:l,scrollContainer:a}=ei(s),d=Ot([]),f=Ot();function h(){const E=Math.floor((f.value.getBoundingClientRect().width+o.value)/(i.value+o.value));return E>0?E:1}function v(E){return[...new Array(E)].map(()=>[])}if(l.value>0){const E=v(l.value);n.value.forEach((P,Y)=>E[Y%l.value].push(Y)),d.value=E}async function k(E){if(E>=n.value.length)return;await ga();const P=[...f.value.children];r.value&&P.reverse();const Y=P.reduce((K,se)=>se.getBoundingClientRect().height<K.getBoundingClientRect().height?se:K);d.value[+Y.dataset.index].push(E),await k(E+1)}async function b(E=!1){if(d.value.length===h()&&!E){t("redrawSkip");return}d.value=v(h());const P=a==null?void 0:a.value,Y=P?P.scrollTop:window.scrollY;await k(0),P?P.scrollBy({top:Y-P.scrollTop}):window.scrollTo({top:Y}),t("redraw")}const _=typeof ResizeObserver>"u"?void 0:new ResizeObserver(()=>b());return hn(()=>{b(),_==null||_.observe(f.value)}),Vo(()=>_==null?void 0:_.unobserve(f.value)),st([n,r],()=>b(!0)),st([i,o],()=>b()),(E,P)=>(N(),U("div",{ref_key:"wall",ref:f,class:"masonry-wall",style:St({display:"flex",gap:`${Qs(o)}px`})},[(N(!0),U(Pe,null,xt(d.value,(Y,K)=>(N(),U("div",{key:K,class:"masonry-column","data-index":K,style:St({display:"flex","flex-basis":"0px","flex-direction":"column","flex-grow":1,gap:`${Qs(o)}px`,height:["-webkit-max-content","-moz-max-content","max-content"],"min-width":0})},[(N(!0),U(Pe,null,xt(Y,se=>(N(),U("div",{key:se,class:"masonry-item"},[Yi(E.$slots,"default",{item:Qs(n)[se],index:se},()=>[qo(it(Qs(n)[se]),1)])]))),128))],12,C0))),128))],4))}}),E0=(()=>{const e=S0;return e.install=t=>{t.component("MasonryWall",e)},e})();const L0={components:{GridIcon:r0,MasonryIcon:f0,MasonryWall:E0,LazyList:x0,ListIcon:ym},methods:{insertLayout(e){mw.app.editor.insertLayout({template:e}),this.showModal=!1},getLayoutsListFromService(){return mw.app.layouts.list()},filterCategorySubmit(e){this.filterCategory=e,this.filterLayouts()},filterLayouts(){this.layoutsListLoaded=!1;let e=this.layoutsList.layouts;this.filterKeyword!=""&&this.filterKeyword&&(e=e.filter(t=>t.title.toUpperCase().includes(this.filterKeyword.toUpperCase()))),this.filterCategory!=""&&this.filterCategory&&(e=e.filter(t=>{if(t.categories)return t.categories.toUpperCase().includes(this.filterCategory.toUpperCase())})),this.layoutsListLoaded=!0,this.layoutsListFiltered=e}},mounted(){const e=this;mw.app.on("ready",()=>{this.getLayoutsListFromService().then(function(t){e.layoutsList=t,e.layoutsListFiltered=t.layouts,e.layoutsListLoaded=!0}),mw.app.editor.on("insertLayoutRequest",function(t){e.showModal=!0})}),this.emitter.on("live-edit-ui-show",t=>{t=="show-layouts"&&(e.showModal==!1?e.showModal=!0:e.showModal=!1)}),document.addEventListener("keyup",function(t){t.keyCode===27&&(e.showModal=!1)})},data(){return{items:[{title:"First",description:"The first item."},{title:"Second",description:"The second item."}],filterKeyword:"",filterCategory:"",layoutsListTypePreview:"masonry",layoutsList:[],layoutsListFiltered:[],layoutsListLoaded:!1,showModal:!1}}},A0={key:0,style:{visibility:"hidden",position:"absolute",width:"1px",height:"1px"}},T0={key:0,class:"mw-le-dialog-block mw-le-layouts-dialog active",style:{inset:"20px",transform:"none"}},M0={class:"modules-list modules-list-defaultModules"},O0={class:"mw-le-layouts-dialog-row"},N0={class:"mw-le-layouts-dialog-col"},P0={class:"modules-list-search-block"},$0=c("div",{class:"mw-le-layouts-dialog-categories-title"},"Categories",-1),R0={class:"modules-list-categories pb-5"},H0=c("li",null,null,-1),F0=["onClick"],D0={class:"mw-le-layouts-dialog-col"},B0={key:0,class:"pl-4 mb-3 mt-3"},I0={key:0},z0={class:"pr-4 mt-3"},V0={class:"d-flex justify-content-end pr-4 layout-list-buttons"},U0={key:1,class:"modules-list-block"},j0=["onClick"],q0=["src","alt"],W0={class:"modules-list-block-item-title"},K0=["onClick"],Y0={class:"modules-list-block-item-title"},J0={class:"modules-list-block-item-description"},X0={key:3,class:"modules-list-block"},Z0=c("div",{class:"modules-list-block-no-results"}," Nothing found... ",-1),G0=[Z0];function Q0(e,t,s,i,n,o){const r=Ne("MasonryIcon"),l=Ne("GridIcon"),a=Ne("ListIcon"),d=Ne("MasonryWall"),f=Ne("LazyList");return N(),U(Pe,null,[n.showModal?(N(),U("div",A0)):Ee("",!0),n.showModal?(N(),U("div",{key:1,onClick:t[0]||(t[0]=h=>n.showModal=!1),class:"mw-le-overlay active"})):Ee("",!0),V(wn,{"enter-active-class":"animate__animated animate__backInLeft","leave-active-class":"animate__animated animate__backOutLeft"},{default:ti(()=>[n.showModal?(N(),U("div",T0,[c("div",M0,[c("div",O0,[c("div",N0,[c("div",P0,[mn(c("input",{"onUpdate:modelValue":t[1]||(t[1]=h=>n.filterKeyword=h),onKeydown:t[2]||(t[2]=h=>o.filterLayouts()),type:"text",placeholder:"Type to Search...",class:"modules-list-search-field"},null,544),[[qa,n.filterKeyword]])]),$0,c("ul",R0,[c("li",{onClick:t[3]||(t[3]=h=>o.filterCategorySubmit("")),class:ut([n.filterCategory==""?"active animate__animated animate__pulse":""])}," All categories ",2),H0,n.layoutsList.categories?(N(!0),U(Pe,{key:0},xt(n.layoutsList.categories,h=>(N(),U("li",{class:ut([h==n.filterCategory?"active animate__animated animate__pulse":""]),onClick:v=>o.filterCategorySubmit(h)},it(h),11,F0))),256)):Ee("",!0)])]),c("div",D0,[n.filterKeyword?(N(),U("div",B0,[qo(" Looking for "+it(n.filterKeyword)+" ",1),n.filterCategory?(N(),U("span",I0," in "+it(n.filterCategory),1)):Ee("",!0)])):Ee("",!0),c("div",z0,[c("div",V0,[c("button",{type:"button",onClick:t[4]||(t[4]=h=>n.layoutsListTypePreview="masonry"),class:ut(["btn btn-sm btn-rounded mr-1",n.layoutsListTypePreview=="masonry"?"btn-primary":"btn-dark"])},[V(r,{style:{"max-width":"23px","max-height":"23px"}})],2),c("button",{type:"button",onClick:t[5]||(t[5]=h=>n.layoutsListTypePreview="list"),class:ut(["btn btn-sm btn-rounded mr-1",n.layoutsListTypePreview=="list"?"btn-primary":"btn-dark"])},[V(l,{style:{"max-width":"23px","max-height":"23px"}})],2),c("button",{type:"button",onClick:t[6]||(t[6]=h=>n.layoutsListTypePreview="full"),class:ut(["btn btn-sm btn-rounded",n.layoutsListTypePreview=="full"?"btn-primary":"btn-dark"])},[V(a,{style:{"max-width":"23px","max-height":"23px"}})],2)])]),n.layoutsListLoaded&&n.layoutsListTypePreview=="masonry"?(N(),U("div",U0,[V(d,{items:n.layoutsListFiltered,"ssr-columns":1,"column-width":200,padding:22,gap:22},{default:ti(({item:h,index:v})=>[c("div",{onClick:k=>o.insertLayout(h.template),class:ut(["modules-list-block-item",h.locked?"modules-list-block-item-is-locked-true":"modules-list-block-item-is-locked-false"])},[c("img",{src:h.screenshot,alt:h.title},null,8,q0),c("div",W0,it(h.title),1)],10,j0)]),_:1},8,["items"])])):Ee("",!0),n.layoutsListLoaded&&(n.layoutsListTypePreview=="list"||n.layoutsListTypePreview=="full")&&n.layoutsListFiltered.length>0?(N(),Ie(f,{key:2,data:n.layoutsListFiltered,itemsPerRender:18,containerClasses:"modules-list-block",defaultLoadingColor:"#222"},{default:ti(({item:h})=>[c("div",{onClick:v=>o.insertLayout(h.template),style:St([n.layoutsListTypePreview=="full"?"width:100%;height:300px":"width:300px;height:160px"]),class:ut(["modules-list-block-item",h.locked?"modules-list-block-item-is-locked-true":"modules-list-block-item-is-locked-false"])},[c("div",{class:"modules-list-block-item-picture",style:St("background-image: url("+h.screenshot+")")},null,4),c("div",Y0,it(h.title),1),c("div",J0,it(h.description),1)],14,K0)]),_:1},8,["data"])):Ee("",!0),n.layoutsListFiltered.length==0?(N(),U("div",X0,G0)):Ee("",!0)])])])])):Ee("",!0)]),_:1}),n.showModal?(N(),U("div",{key:2,onClick:t[7]||(t[7]=h=>n.showModal=!1),class:"mw-le-dialog-close active"})):Ee("",!0)],64)}const eg=Je(L0,[["render",Q0]]);const tg={methods:{getLayoutsList(){return mw.app.modules.list()}},components:{},mounted(){const e=this;mw.app.on("ready",()=>{this.getLayoutsList().then(function(t){e.layoutsList=t})}),this.emitter.on("live-edit-ui-show",t=>{t=="show-modules"&&(e.showModal==!1?e.showModal=!0:e.showModal=!1)}),document.addEventListener("keyup",function(t){t.keyCode===27&&(e.showModal=!1)})},data(){return{keyword:"",category:"",layoutsList:null,showModal:!1}}},sg={key:0,style:{visibility:"hidden",position:"absolute",width:"1px",height:"1px"}},ig={key:0,class:"mw-le-dialog-block mw-le-modules-dialog active",style:{inset:"20px",transform:"none"}},ng={class:"modules-list modules-list-defaultModules"},og={class:"modules-list-search-block"},rg=c("input",{type:"text",placeholder:"Type to Search...",class:"modules-list-search-field"},null,-1),lg={key:0},ag=c("div",{class:"modules-list-block"},[c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"miscellaneous")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/inline_table/inline_table.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Inline Table"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/search/search.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Search"),c("div",{class:"modules-list-block-item-description"},"Module to search for content"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/popup/popup.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Pop-Up"),c("div",{class:"modules-list-block-item-description"},"Pop-Up")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/embed/embed.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Embed Code"),c("div",{class:"modules-list-block-item-description"},"Embed Code")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/logo/logo.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Logo"),c("div",{class:"modules-list-block-item-description"},"Logo")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/pdf/pdf.svg)"}}),c("div",{class:"modules-list-block-item-title"},"PDF"),c("div",{class:"modules-list-block-item-description"},"PDF")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/categories/category_images/category_images.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Categories Images"),c("div",{class:"modules-list-block-item-description"},"Categories Images"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/accordion/accordion.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Accordion"),c("div",{class:"modules-list-block-item-description"},"Accordion")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/tabs/tabs.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Tabs"),c("div",{class:"modules-list-block-item-description"},"Tabs"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/breadcrumb/breadcrumb.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Breadcrumb"),c("div",{class:"modules-list-block-item-description"},"Breadcrumb navigation"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/faq/faq.svg)"}}),c("div",{class:"modules-list-block-item-title"},"FAQ"),c("div",{class:"modules-list-block-item-description"},"FAQ")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/teamcard/teamcard.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Team Card"),c("div",{class:"modules-list-block-item-description"},"Team Card"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/multilanguage/multilanguage.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Multilanguage"),c("div",{class:"modules-list-block-item-description"},"Multilanguage"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/testimonials/testimonials.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Testimonials"),c("div",{class:"modules-list-block-item-description"},"Testimonials"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/tags/tags.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Tags"),c("div",{class:"modules-list-block-item-description"},"Tags module for your posts!"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"essentials")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/title/title.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Title"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/text/text.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Text"),c("div",{class:"modules-list-block-item-description"},"Simple text")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/spacer/spacer.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Spacer"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/text/empty_element.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Empty Element"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/text/multiple_columns.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Multiple Columns"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/btn/btn.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Button"),c("div",{class:"modules-list-block-item-description"},"Button")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/contact_form/contact_form.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Contact form"),c("div",{class:"modules-list-block-item-description"},"Contact form"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/google_maps/google_maps.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Google Maps"),c("div",{class:"modules-list-block-item-description"},"Google Maps"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/posts/posts.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Posts List"),c("div",{class:"modules-list-block-item-description"},"Posts List")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/content/content.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Content"),c("div",{class:"modules-list-block-item-description"},"Shows dynamic content"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/menu/menu.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Menu"),c("div",{class:"modules-list-block-item-description"},"Navigation menu for pages and links."),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"media")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/picture/picture.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Picture"),c("div",{class:"modules-list-block-item-description"},"Picture")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/pictures/pictures.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Picture Gallery"),c("div",{class:"modules-list-block-item-description"},"Picture Gallery"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/video/video.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Video"),c("div",{class:"modules-list-block-item-description"},"Video")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/image_rollover/image_rollover.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Image Rollover"),c("div",{class:"modules-list-block-item-description"},"Image Rollover"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/slider/slider.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Slider"),c("div",{class:"modules-list-block-item-description"},"Slider")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/audio/audio.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Audio"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/beforeafter/beforeafter.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Before/After"),c("div",{class:"modules-list-block-item-description"},"Before/After")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/carousel_grid/carousel_grid.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Carousel Grid"),c("div",{class:"modules-list-block-item-description"},"Microweber Carousel Grid"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"social")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/social_links/social_links.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Social Links"),c("div",{class:"modules-list-block-item-description"},"Social Links"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/facebook_like/facebook_like.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Facebook Like"),c("div",{class:"modules-list-block-item-description"},"Facebook Like"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/facebook_page/facebook_page.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Facebook page"),c("div",{class:"modules-list-block-item-description"},"Facebook page integration for your website! "),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/tweet_embed/tweet_embed.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Tweet Embed"),c("div",{class:"modules-list-block-item-description"},"Tweet Embed")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/twitter_feed/twitter_feed.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Twitter feed"),c("div",{class:"modules-list-block-item-description"},"Feed of tweets")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/sharer/sharer.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Sharer"),c("div",{class:"modules-list-block-item-description"},"Sharer"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"store")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/shop/products/products.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Products"),c("div",{class:"modules-list-block-item-description"},"Products")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/shop/cart_add/cart_add.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Add to cart"),c("div",{class:"modules-list-block-item-description"},"Add to cart"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/shop/shop.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Online shop"),c("div",{class:"modules-list-block-item-description"},"Online shop")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"navigation")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/pages/pages.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Pages Menu"),c("div",{class:"modules-list-block-item-description"},"Pages Menu"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/categories/categories.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Categories"),c("div",{class:"modules-list-block-item-description"},"Categories"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"users")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/users/forgot_password/forgot_password.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Forgot password"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/users/login/login.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Login"),c("div",{class:"modules-list-block-item-description"},"Login")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/users/register/register.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Registration"),c("div",{class:"modules-list-block-item-description"},"Microweber")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"marketing")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/newsletter/newsletter.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Newsletter"),c("div",{class:"modules-list-block-item-description"},"Newsletter")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"content")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/blog/blog.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Blog"),c("div",{class:"modules-list-block-item-description"},"Blog")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/comments/comments.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Comments"),c("div",{class:"modules-list-block-item-description"},"Comments")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/layouts/layouts.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Layouts"),c("div",{class:"modules-list-block-item-description"},"Layouts"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"other")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/highlight_code/highlight_code.svg)"}}),c("div",{class:"modules-list-block-item-title"},"highlight_code"),c("div",{class:"modules-list-block-item-description"},"highlight_code")])]),c("div",{class:"modules-list-block-no-results",style:{display:"none"}},"Nothing found...")],-1);function cg(e,t,s,i,n,o){return N(),U(Pe,null,[n.showModal?(N(),U("div",sg)):Ee("",!0),n.showModal?(N(),U("div",{key:1,onClick:t[0]||(t[0]=r=>n.showModal=!1),class:"mw-le-overlay active"})):Ee("",!0),V(wn,{"enter-active-class":"animate__animated animate__backInLeft","leave-active-class":"animate__animated animate__backOutLeft"},{default:ti(()=>[n.showModal?(N(),U("div",ig,[c("div",ng,[c("div",og,[rg,n.showModal?(N(),U("div",lg,[c("button",{onClick:t[1]||(t[1]=r=>n.showModal=!1),type:"button",class:"btn btn-danger"}," Close Modal ")])):Ee("",!0)]),ag])])):Ee("",!0)]),_:1})],64)}const ug=Je(tg,[["render",cg]]);const dg={__name:"App",setup(e){return(t,s)=>(N(),U("div",null,[V(Up),V(Dm),V(e0),V(eg),V(ug)]))}},Ka=function(){return document.ontouchstart!==null?"click":"touchstart"},Zi="__vue_click_away__",Ya=function(e,t,s){Ja(e);let i=s.context,n=t.value,o=!1;setTimeout(function(){o=!0},0),e[Zi]=function(r){if((!e||!e.contains(r.target))&&n&&o&&typeof n=="function")return n.call(i,r)},document.addEventListener(Ka(),e[Zi],!1)},Ja=function(e){document.removeEventListener(Ka(),e[Zi],!1),delete e[Zi]},fg=function(e,t,s){t.value!==t.oldValue&&Ya(e,t,s)},hg={install:function(e){e.directive("click-away",pg)}},pg={mounted:Ya,updated:fg,unmounted:Ja};function mg(e){return{all:e=e||new Map,on:function(t,s){var i=e.get(t);i?i.push(s):e.set(t,[s])},off:function(t,s){var i=e.get(t);i&&(s?i.splice(i.indexOf(s)>>>0,1):e.set(t,[]))},emit:function(t,s){var i=e.get(t);i&&i.slice().map(function(n){n(s)}),(i=e.get("*"))&&i.slice().map(function(n){n(t,s)})}}}const gg=mg(),sr=tp(dg);sr.config.globalProperties.emitter=gg;sr.use(hg);sr.mount("#live-edit-app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
