var Ut=Object.defineProperty;var Ft=(s,e,t)=>e in s?Ut(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var E=(s,e,t)=>(Ft(s,typeof e!="symbol"?e+"":e,t),t),pe=(s,e,t)=>{if(!e.has(s))throw TypeError("Cannot "+t)};var f=(s,e,t)=>(pe(s,e,"read from private field"),t?t.call(s):e.get(s)),x=(s,e,t)=>{if(e.has(s))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(s):e.set(s,t)},q=(s,e,t,i)=>(pe(s,e,"write to private field"),i?i.call(s,t):e.set(s,t),t);var N=(s,e,t)=>(pe(s,e,"access private method"),t);var H;class he{constructor(){x(this,H,{})}on(e,t){f(this,H)[e]?f(this,H)[e].push(t):f(this,H)[e]=[t]}off(e,t){if(f(this,H)[e])if(typeof t=="function"){const i=f(this,H)[e].indexOf(t);if(i===-1)return;f(this,H)[e].splice(i,1)}else f(this,H)[e]=[]}dispatch(e,t){f(this,H)[e]&&f(this,H)[e].forEach(function(i){i.call(this,t)})}emit(e,t){return this.dispatch(e,t)}}H=new WeakMap;var k,F,se;class Wt extends he{constructor(){super(...arguments);x(this,F);x(this,k,{})}call(t,i){for(let n in f(this,k))f(this,k)[n][t]&&N(this,F,se).call(this,t,f(this,k)[n],i)}get(t){return f(this,k)[t]}getModules(){return f(this,k)}register(t,i){let n;typeof i=="function"?n=new i:n=i,f(this,k)[t]=n,this[t]=n,N(this,F,se).call(this,"onRegister",n),this.dispatch("register")}remove(t){let i;if(typeof t=="string"&&(i=t,t=this.get(t)),!i){for(let n in f(this,k))if(f(this,k)[n]===t){i=n;break}}delete f(this,k)[i],delete this[i],N(this,F,se).call(this,"onDestroy",t),this.dispatch("remove")}}k=new WeakMap,F=new WeakSet,se=function(t,i,n){!t||!i||!i[t]||(t=i[t],t(n))};mw.require("editor.js");mw.require("css_parser.js");const Pn=function(){var s=document.querySelector("#mw-live-edit-editor"),e=function(){var l={};this.on=function(d,p){l[d]?l[d].push(p):l[d]=[p]},this.dispatch=function(d,p){l[d]&&l[d].forEach(function(c){c.call(this,p)})},this.provide=function(d){this.dispatch("change",d.map(function(p){return{label:p,value:p}}))}},t=new e;window.fontFamilyProvider=t;const i=mw.app.get("canvas").getFrame();i.contentWindow.fontFamilyProvider=t;const n=mw.Editor({document:i.contentWindow.document,executionDocument:i.contentWindow.document,actionWindow:i.contentWindow,element:s,mode:"document",notEditableClasses:["module"],regions:".edit",skin:"le2",editMode:"liveedit",scopeColor:"white",controls:[[{group:{icon:"mdi mdi-format-title",controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],smallEditorPositionX:"center",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:t});var r=document.getElementById("toolbar-undo"),o=document.getElementById("toolbar-redo");n.state.on("record",function(){o.disabled=!n.state.hasPrev,r.disabled=!n.state.hasNext}),n.state.on("change",function(){o.disabled=!n.state.hasPrev,r.disabled=!n.state.hasNext}),r&&r.addEventListener("click",function(){n.state.undo()}),o&&o.addEventListener("click",function(){n.state.redo()}),s.innerHTML="",s.appendChild(n.wrapper);var a=n.storage.get(n.settings.id+"-small-editor-pinned");typeof a>"u"&&typeof n.smallEditorApi<"u"&&n.smallEditorApi.pin(),mw.app.register("richTextEditor",n),mw.app.register("richTextEditorAPI",n.api)};function Yt(s){return s&&s.__esModule&&Object.prototype.hasOwnProperty.call(s,"default")?s.default:s}var Te={},Xt={get exports(){return Te},set exports(s){Te=s}},le={},Jt={get exports(){return le},set exports(s){le=s}},Lt=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}},Zt=Lt,V=Object.prototype.toString;function qe(s){return V.call(s)==="[object Array]"}function Oe(s){return typeof s>"u"}function Gt(s){return s!==null&&!Oe(s)&&s.constructor!==null&&!Oe(s.constructor)&&typeof s.constructor.isBuffer=="function"&&s.constructor.isBuffer(s)}function Kt(s){return V.call(s)==="[object ArrayBuffer]"}function Qt(s){return typeof FormData<"u"&&s instanceof FormData}function ei(s){var e;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?e=ArrayBuffer.isView(s):e=s&&s.buffer&&s.buffer instanceof ArrayBuffer,e}function ti(s){return typeof s=="string"}function ii(s){return typeof s=="number"}function Et(s){return s!==null&&typeof s=="object"}function re(s){if(V.call(s)!=="[object Object]")return!1;var e=Object.getPrototypeOf(s);return e===null||e===Object.prototype}function ni(s){return V.call(s)==="[object Date]"}function si(s){return V.call(s)==="[object File]"}function ri(s){return V.call(s)==="[object Blob]"}function Ht(s){return V.call(s)==="[object Function]"}function oi(s){return Et(s)&&Ht(s.pipe)}function ai(s){return typeof URLSearchParams<"u"&&s instanceof URLSearchParams}function li(s){return s.trim?s.trim():s.replace(/^\s+|\s+$/g,"")}function di(){return typeof navigator<"u"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window<"u"&&typeof document<"u"}function je(s,e){if(!(s===null||typeof s>"u"))if(typeof s!="object"&&(s=[s]),qe(s))for(var t=0,i=s.length;t<i;t++)e.call(null,s[t],t,s);else for(var n in s)Object.prototype.hasOwnProperty.call(s,n)&&e.call(null,s[n],n,s)}function De(){var s={};function e(n,r){re(s[r])&&re(n)?s[r]=De(s[r],n):re(n)?s[r]=De({},n):qe(n)?s[r]=n.slice():s[r]=n}for(var t=0,i=arguments.length;t<i;t++)je(arguments[t],e);return s}function ui(s,e,t){return je(e,function(n,r){t&&typeof n=="function"?s[r]=Zt(n,t):s[r]=n}),s}function hi(s){return s.charCodeAt(0)===65279&&(s=s.slice(1)),s}var L={isArray:qe,isArrayBuffer:Kt,isBuffer:Gt,isFormData:Qt,isArrayBufferView:ei,isString:ti,isNumber:ii,isObject:Et,isPlainObject:re,isUndefined:Oe,isDate:ni,isFile:si,isBlob:ri,isFunction:Ht,isStream:oi,isURLSearchParams:ai,isStandardBrowserEnv:di,forEach:je,merge:De,extend:ui,trim:li,stripBOM:hi},j=L;function Ze(s){return encodeURIComponent(s).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var kt=function(e,t,i){if(!t)return e;var n;if(i)n=i(t);else if(j.isURLSearchParams(t))n=t.toString();else{var r=[];j.forEach(t,function(l,d){l===null||typeof l>"u"||(j.isArray(l)?d=d+"[]":l=[l],j.forEach(l,function(c){j.isDate(c)?c=c.toISOString():j.isObject(c)&&(c=JSON.stringify(c)),r.push(Ze(d)+"="+Ze(c))}))}),n=r.join("&")}if(n){var o=e.indexOf("#");o!==-1&&(e=e.slice(0,o)),e+=(e.indexOf("?")===-1?"?":"&")+n}return e},ci=L;function ce(){this.handlers=[]}ce.prototype.use=function(e,t,i){return this.handlers.push({fulfilled:e,rejected:t,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1};ce.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)};ce.prototype.forEach=function(e){ci.forEach(this.handlers,function(i){i!==null&&e(i)})};var mi=ce,fi=L,pi=function(e,t){fi.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})},Nt=function(e,t,i,n,r){return e.config=t,i&&(e.code=i),e.request=n,e.response=r,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e},ge,Ge;function St(){if(Ge)return ge;Ge=1;var s=Nt;return ge=function(t,i,n,r,o){var a=new Error(t);return s(a,i,n,r,o)},ge}var we,Ke;function gi(){if(Ke)return we;Ke=1;var s=St();return we=function(t,i,n){var r=n.config.validateStatus;!n.status||!r||r(n.status)?t(n):i(s("Request failed with status code "+n.status,n.config,null,n.request,n))},we}var ve,Qe;function wi(){if(Qe)return ve;Qe=1;var s=L;return ve=s.isStandardBrowserEnv()?function(){return{write:function(i,n,r,o,a,l){var d=[];d.push(i+"="+encodeURIComponent(n)),s.isNumber(r)&&d.push("expires="+new Date(r).toGMTString()),s.isString(o)&&d.push("path="+o),s.isString(a)&&d.push("domain="+a),l===!0&&d.push("secure"),document.cookie=d.join("; ")},read:function(i){var n=document.cookie.match(new RegExp("(^|;\\s*)("+i+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(i){this.write(i,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}(),ve}var be,et;function vi(){return et||(et=1,be=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}),be}var ye,tt;function bi(){return tt||(tt=1,ye=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}),ye}var xe,it;function yi(){if(it)return xe;it=1;var s=vi(),e=bi();return xe=function(i,n){return i&&!s(n)?e(i,n):n},xe}var Ce,nt;function xi(){if(nt)return Ce;nt=1;var s=L,e=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];return Ce=function(i){var n={},r,o,a;return i&&s.forEach(i.split(`
`),function(d){if(a=d.indexOf(":"),r=s.trim(d.substr(0,a)).toLowerCase(),o=s.trim(d.substr(a+1)),r){if(n[r]&&e.indexOf(r)>=0)return;r==="set-cookie"?n[r]=(n[r]?n[r]:[]).concat([o]):n[r]=n[r]?n[r]+", "+o:o}}),n},Ce}var Le,st;function Ci(){if(st)return Le;st=1;var s=L;return Le=s.isStandardBrowserEnv()?function(){var t=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a"),n;function r(o){var a=o;return t&&(i.setAttribute("href",a),a=i.href),i.setAttribute("href",a),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:i.pathname.charAt(0)==="/"?i.pathname:"/"+i.pathname}}return n=r(window.location.href),function(a){var l=s.isString(a)?r(a):a;return l.protocol===n.protocol&&l.host===n.host}}():function(){return function(){return!0}}(),Le}var Ee,rt;function ot(){if(rt)return Ee;rt=1;var s=L,e=gi(),t=wi(),i=kt,n=yi(),r=xi(),o=Ci(),a=St();return Ee=function(d){return new Promise(function(c,h){var u=d.data,w=d.headers,v=d.responseType;s.isFormData(u)&&delete w["Content-Type"];var m=new XMLHttpRequest;if(d.auth){var B=d.auth.username||"",We=d.auth.password?unescape(encodeURIComponent(d.auth.password)):"";w.Authorization="Basic "+btoa(B+":"+We)}var Ye=n(d.baseURL,d.url);m.open(d.method.toUpperCase(),i(Ye,d.params,d.paramsSerializer),!0),m.timeout=d.timeout;function Xe(){if(m){var I="getAllResponseHeaders"in m?r(m.getAllResponseHeaders()):null,M=!v||v==="text"||v==="json"?m.responseText:m.response,J={data:M,status:m.status,statusText:m.statusText,headers:I,config:d,request:m};e(c,h,J),m=null}}if("onloadend"in m?m.onloadend=Xe:m.onreadystatechange=function(){!m||m.readyState!==4||m.status===0&&!(m.responseURL&&m.responseURL.indexOf("file:")===0)||setTimeout(Xe)},m.onabort=function(){m&&(h(a("Request aborted",d,"ECONNABORTED",m)),m=null)},m.onerror=function(){h(a("Network Error",d,null,m)),m=null},m.ontimeout=function(){var M="timeout of "+d.timeout+"ms exceeded";d.timeoutErrorMessage&&(M=d.timeoutErrorMessage),h(a(M,d,d.transitional&&d.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",m)),m=null},s.isStandardBrowserEnv()){var Je=(d.withCredentials||o(Ye))&&d.xsrfCookieName?t.read(d.xsrfCookieName):void 0;Je&&(w[d.xsrfHeaderName]=Je)}"setRequestHeader"in m&&s.forEach(w,function(M,J){typeof u>"u"&&J.toLowerCase()==="content-type"?delete w[J]:m.setRequestHeader(J,M)}),s.isUndefined(d.withCredentials)||(m.withCredentials=!!d.withCredentials),v&&v!=="json"&&(m.responseType=d.responseType),typeof d.onDownloadProgress=="function"&&m.addEventListener("progress",d.onDownloadProgress),typeof d.onUploadProgress=="function"&&m.upload&&m.upload.addEventListener("progress",d.onUploadProgress),d.cancelToken&&d.cancelToken.promise.then(function(M){m&&(m.abort(),h(M),m=null)}),u||(u=null),m.send(u)})},Ee}var b=L,at=pi,Li=Nt,Ei={"Content-Type":"application/x-www-form-urlencoded"};function lt(s,e){!b.isUndefined(s)&&b.isUndefined(s["Content-Type"])&&(s["Content-Type"]=e)}function Hi(){var s;return(typeof XMLHttpRequest<"u"||typeof process<"u"&&Object.prototype.toString.call(process)==="[object process]")&&(s=ot()),s}function ki(s,e,t){if(b.isString(s))try{return(e||JSON.parse)(s),b.trim(s)}catch(i){if(i.name!=="SyntaxError")throw i}return(t||JSON.stringify)(s)}var me={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:Hi(),transformRequest:[function(e,t){return at(t,"Accept"),at(t,"Content-Type"),b.isFormData(e)||b.isArrayBuffer(e)||b.isBuffer(e)||b.isStream(e)||b.isFile(e)||b.isBlob(e)?e:b.isArrayBufferView(e)?e.buffer:b.isURLSearchParams(e)?(lt(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):b.isObject(e)||t&&t["Content-Type"]==="application/json"?(lt(t,"application/json"),ki(e)):e}],transformResponse:[function(e){var t=this.transitional,i=t&&t.silentJSONParsing,n=t&&t.forcedJSONParsing,r=!i&&this.responseType==="json";if(r||n&&b.isString(e)&&e.length)try{return JSON.parse(e)}catch(o){if(r)throw o.name==="SyntaxError"?Li(o,this,"E_JSON_PARSE"):o}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};me.headers={common:{Accept:"application/json, text/plain, */*"}};b.forEach(["delete","get","head"],function(e){me.headers[e]={}});b.forEach(["post","put","patch"],function(e){me.headers[e]=b.merge(Ei)});var $e=me,Ni=L,Si=$e,_i=function(e,t,i){var n=this||Si;return Ni.forEach(i,function(o){e=o.call(n,e,t)}),e},He,dt;function _t(){return dt||(dt=1,He=function(e){return!!(e&&e.__CANCEL__)}),He}var ut=L,ke=_i,Ai=_t(),Mi=$e;function Ne(s){s.cancelToken&&s.cancelToken.throwIfRequested()}var Ti=function(e){Ne(e),e.headers=e.headers||{},e.data=ke.call(e,e.data,e.headers,e.transformRequest),e.headers=ut.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),ut.forEach(["delete","get","head","post","put","patch","common"],function(n){delete e.headers[n]});var t=e.adapter||Mi.adapter;return t(e).then(function(n){return Ne(e),n.data=ke.call(e,n.data,n.headers,e.transformResponse),n},function(n){return Ai(n)||(Ne(e),n&&n.response&&(n.response.data=ke.call(e,n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)})},y=L,At=function(e,t){t=t||{};var i={},n=["url","method","data"],r=["headers","auth","proxy","params"],o=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],a=["validateStatus"];function l(h,u){return y.isPlainObject(h)&&y.isPlainObject(u)?y.merge(h,u):y.isPlainObject(u)?y.merge({},u):y.isArray(u)?u.slice():u}function d(h){y.isUndefined(t[h])?y.isUndefined(e[h])||(i[h]=l(void 0,e[h])):i[h]=l(e[h],t[h])}y.forEach(n,function(u){y.isUndefined(t[u])||(i[u]=l(void 0,t[u]))}),y.forEach(r,d),y.forEach(o,function(u){y.isUndefined(t[u])?y.isUndefined(e[u])||(i[u]=l(void 0,e[u])):i[u]=l(void 0,t[u])}),y.forEach(a,function(u){u in t?i[u]=l(e[u],t[u]):u in e&&(i[u]=l(void 0,e[u]))});var p=n.concat(r).concat(o).concat(a),c=Object.keys(e).concat(Object.keys(t)).filter(function(u){return p.indexOf(u)===-1});return y.forEach(c,d),i};const Oi="axios",Di="0.21.4",zi="Promise based HTTP client for the browser and node.js",Bi="index.js",Ii={test:"grunt test",start:"node ./sandbox/server.js",build:"NODE_ENV=production grunt build",preversion:"npm test",version:"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",postversion:"git push && git push --tags",examples:"node ./examples/server.js",coveralls:"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",fix:"eslint --fix lib/**/*.js"},Ri={type:"git",url:"https://github.com/axios/axios.git"},Pi=["xhr","http","ajax","promise","node"],Vi="Matt Zabriskie",qi="MIT",ji={url:"https://github.com/axios/axios/issues"},$i="https://axios-http.com",Ui={coveralls:"^3.0.0","es6-promise":"^4.2.4",grunt:"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1",karma:"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2",minimist:"^1.2.0",mocha:"^8.2.1",sinon:"^4.5.0","terser-webpack-plugin":"^4.2.3",typescript:"^4.0.5","url-search-params":"^0.10.0",webpack:"^4.44.2","webpack-dev-server":"^3.11.0"},Fi={"./lib/adapters/http.js":"./lib/adapters/xhr.js"},Wi="dist/axios.min.js",Yi="dist/axios.min.js",Xi="./index.d.ts",Ji={"follow-redirects":"^1.14.0"},Zi=[{path:"./dist/axios.min.js",threshold:"5kB"}],Gi={name:Oi,version:Di,description:zi,main:Bi,scripts:Ii,repository:Ri,keywords:Pi,author:Vi,license:qi,bugs:ji,homepage:$i,devDependencies:Ui,browser:Fi,jsdelivr:Wi,unpkg:Yi,typings:Xi,dependencies:Ji,bundlesize:Zi};var Mt=Gi,Ue={};["object","boolean","number","function","string","symbol"].forEach(function(s,e){Ue[s]=function(i){return typeof i===s||"a"+(e<1?"n ":" ")+s}});var ht={},Ki=Mt.version.split(".");function Tt(s,e){for(var t=e?e.split("."):Ki,i=s.split("."),n=0;n<3;n++){if(t[n]>i[n])return!0;if(t[n]<i[n])return!1}return!1}Ue.transitional=function(e,t,i){var n=t&&Tt(t);function r(o,a){return"[Axios v"+Mt.version+"] Transitional option '"+o+"'"+a+(i?". "+i:"")}return function(o,a,l){if(e===!1)throw new Error(r(a," has been removed in "+t));return n&&!ht[a]&&(ht[a]=!0,console.warn(r(a," has been deprecated since v"+t+" and will be removed in the near future"))),e?e(o,a,l):!0}};function Qi(s,e,t){if(typeof s!="object")throw new TypeError("options must be an object");for(var i=Object.keys(s),n=i.length;n-- >0;){var r=i[n],o=e[r];if(o){var a=s[r],l=a===void 0||o(a,r,s);if(l!==!0)throw new TypeError("option "+r+" must be "+l);continue}if(t!==!0)throw Error("Unknown option "+r)}}var en={isOlderVersion:Tt,assertOptions:Qi,validators:Ue},Ot=L,tn=kt,ct=mi,mt=Ti,fe=At,Dt=en,U=Dt.validators;function ee(s){this.defaults=s,this.interceptors={request:new ct,response:new ct}}ee.prototype.request=function(e){typeof e=="string"?(e=arguments[1]||{},e.url=arguments[0]):e=e||{},e=fe(this.defaults,e),e.method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=e.transitional;t!==void 0&&Dt.assertOptions(t,{silentJSONParsing:U.transitional(U.boolean,"1.0.0"),forcedJSONParsing:U.transitional(U.boolean,"1.0.0"),clarifyTimeoutError:U.transitional(U.boolean,"1.0.0")},!1);var i=[],n=!0;this.interceptors.request.forEach(function(h){typeof h.runWhen=="function"&&h.runWhen(e)===!1||(n=n&&h.synchronous,i.unshift(h.fulfilled,h.rejected))});var r=[];this.interceptors.response.forEach(function(h){r.push(h.fulfilled,h.rejected)});var o;if(!n){var a=[mt,void 0];for(Array.prototype.unshift.apply(a,i),a=a.concat(r),o=Promise.resolve(e);a.length;)o=o.then(a.shift(),a.shift());return o}for(var l=e;i.length;){var d=i.shift(),p=i.shift();try{l=d(l)}catch(c){p(c);break}}try{o=mt(l)}catch(c){return Promise.reject(c)}for(;r.length;)o=o.then(r.shift(),r.shift());return o};ee.prototype.getUri=function(e){return e=fe(this.defaults,e),tn(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")};Ot.forEach(["delete","get","head","options"],function(e){ee.prototype[e]=function(t,i){return this.request(fe(i||{},{method:e,url:t,data:(i||{}).data}))}});Ot.forEach(["post","put","patch"],function(e){ee.prototype[e]=function(t,i,n){return this.request(fe(n||{},{method:e,url:t,data:i}))}});var nn=ee,Se,ft;function zt(){if(ft)return Se;ft=1;function s(e){this.message=e}return s.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},s.prototype.__CANCEL__=!0,Se=s,Se}var _e,pt;function sn(){if(pt)return _e;pt=1;var s=zt();function e(t){if(typeof t!="function")throw new TypeError("executor must be a function.");var i;this.promise=new Promise(function(o){i=o});var n=this;t(function(o){n.reason||(n.reason=new s(o),i(n.reason))})}return e.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},e.source=function(){var i,n=new e(function(o){i=o});return{token:n,cancel:i}},_e=e,_e}var Ae,gt;function rn(){return gt||(gt=1,Ae=function(e){return function(i){return e.apply(null,i)}}),Ae}var Me,wt;function on(){return wt||(wt=1,Me=function(e){return typeof e=="object"&&e.isAxiosError===!0}),Me}var vt=L,an=Lt,oe=nn,ln=At,dn=$e;function Bt(s){var e=new oe(s),t=an(oe.prototype.request,e);return vt.extend(t,oe.prototype,e),vt.extend(t,e),t}var S=Bt(dn);S.Axios=oe;S.create=function(e){return Bt(ln(S.defaults,e))};S.Cancel=zt();S.CancelToken=sn();S.isCancel=_t();S.all=function(e){return Promise.all(e)};S.spread=rn();S.isAxiosError=on();Jt.exports=S;le.default=S;(function(s){s.exports=le})(Xt);const de=Yt(Te);class A{static extend(){const e={};let t=!1,i=0;const n=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(t=arguments[0],i++);const r=function(o){for(const a in o)Object.prototype.hasOwnProperty.call(o,a)&&(t&&Object.prototype.toString.call(o[a])==="[object Object]"?e[a]=A.extend(!0,e[a],o[a]):e[a]=o[a])};for(;i<n;i++){const o=arguments[i];r(o)}return e}}var R=function(s,e){var t=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(n,r){this.nodes=(r||document).querySelectorAll(n)},this.each=function(n){if(this.nodes)for(var r=0;r<this.nodes.length;r++)n.call(this.nodes[r],r);else this.node&&n.call(this.node,0);return this},this.encapsulate=function(){};var i=function(n,r){n&&(Array.isArray(n)?n.forEach(function(o){i(o,r)}):n instanceof R?r.append(n):typeof n=="object"&&r.append(new R(n)))};this.create=function(){var n=this.document.createElement(this.settings.tag);if(this.node=n,this.settings.encapsulate===!0){var r=this.settings.encapsulate===!0?"open":this.settings.encapsulate;n.attachShadow({mode:r})}this.nodes=[n],this.settings.content&&i(this.settings.content,this)},this._specialProps=function(n,r){if(n==="tooltip")return this.node.dataset[n]=r,!0},this.setProps=function(){for(var n in this.settings.props)if(n==="dataset")for(var r in this.settings.props[n])this.node.dataset[r]=this.settings.props[n][r];else if(n==="style")for(var o in this.settings.props[n])this.node.style[o]=this.settings.props[n][o];else{var a=this.settings.props[n];this._specialProps(n,a)||(this.node[n]=a)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(n,r){return typeof r=="number"&&this.__.cssNumber.indexOf(n)===-1&&(r=r+"px"),r},this.css=function(n,r){if(typeof n=="string")if(typeof r<"u"){var o=this._normalizeCSSValue(n,r);this.each(function(){this.style[n]=o})}else return this.document.defaultView.getComputedStyle(this.node)[n];if(typeof n=="object")for(var a in n)this.each(function(){this.style[a]=t._normalizeCSSValue(a,n[a])});return this},this.dataset=function(n,r){return typeof r>"u"?this._active()[n]:(this.each(function(){this.dataset[n]=r}),this)},this.attr=function(n,r){return typeof r>"u"?this._active()[n]:(this.each(function(){this.setAttribute(n,r)}),this)},this.val=function(n){return typeof n>"u"?this._active().value:(this.each(function(){this.value=n}),this)},this.prop=function(n,r){var o=this._active();return typeof r>"u"?o[n]:(o[n]!==r&&(o[n]=r,this.trigger("propChange",[n,r])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(n){var r=mw.element("#r"+new Date().getTime());return this.each(function(){for(var o=this.querySelectorAll(n),a=0;a<o.length;a++)r.nodes.indexOf(o[a])===-1&&r.nodes.push(o[a])}),r},this.addClass=function(n){return n=n.trim().split(" "),this.each(function(){var r=this;n.forEach(function(o){r.classList.add(o)})})},this.toggleClass=function(n){return this.each(function(){this.classList.toggle(n.trim())})},this.removeClass=function(n){var r=Array.isArray(n);if(r)return this.each(function(){for(var a=0,l=n.length;a<l;a++)this.classList.remove(n[a])});n=n.trim();var o=n.split(" ");return o.length>1?this.removeClass(o):this.each(function(){this.classList.remove(n)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(n){return typeof n>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=n})},this.text=function(n,r){if(typeof n>"u")return this.node.textContent;typeof r>"u"&&(r=!0),r&&(n=this.document.createRange().createContextualFragment(n).textContent),this.node.innerHTML=n},this._asdom=function(n){return typeof n=="string"?this.document.createRange().createContextualFragment(n):n.node?n.node:n.nodes?n.nodes[n.nodes.length-1]:n},this.offset=function(){var n=this._active(),r=this.getWindow(),o=n.getBoundingClientRect();return o.offsetTop=o.top+r.pageYOffset,o.offsetBottom=o.bottom+r.pageYOffset,o.offsetLeft=o.left+r.pageXOffset,o},this.width=function(n){return n?this.css("width",n):this._active().offsetWidth},this.height=function(n){return n?this.css("height",n):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(n){n=n||"*";var r=this._active(),o=r.parentElement,a=mw.element();for(a.nodes=[];o;)o.matches(n)&&a.nodes.push(o),o=o.parentElement;return a},this.append=function(n){return n&&this.each(function(){this.append(t._asdom(n))}),this},this.before=function(n){return n&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(t._asdom(n),this)}),this},this.after=function(n){n&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(t._asdom(n),this.nextSibling)})},this.prepend=function(n){return n&&this.each(function(){this.prepend(t._asdom(n))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(n){this._disabled=n,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(n,r){return r=r||{},this.each(function(){this.dispatchEvent(new CustomEvent(n,{detail:r,cancelable:!0,bubbles:!0})),t._on[n]&&t._on[n].forEach(function(o){o.call(this,n,r)})}),this},this.get=function(n){return this.nodes[n]},this.wrap=function(n){var r=Fe(n);this.before(r),r.append(this)},this._on={},this.on=function(n,r){return n=n.trim().split(" "),n.forEach(function(o){t._on[o]||(t._on[o]=[]),t._on[o].push(r),t.each(function(){this.addEventListener(o,r,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=e||document,this.root instanceof R&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,s=s||{},s.nodeName&&s.nodeType)this.nodes.push(s),this.node=s,s={},this._asElement=!0;else if(typeof s=="string")if(s.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(s)),s={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof R)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new R(this.settings.content));else{var n=this._asdom(s);this.nodes=[].slice.call(n.children),this._asElement=!0}s=s||{};var r={tag:"div",props:{}};this.settings=A.extend({},r,s),!this._asElement&&(this.create(),this.setProps())},this.init()};const Fe=function(s,e){return new R(s,e)};Fe.module=function(s,e){R.prototype[s]=e};const ze="mw-le-element";window.customElements&&!customElements.get(ze)&&customElements.define(ze,class extends HTMLElement{constructor(){super()}});const g=(s,e)=>(s instanceof Object&&!s.nodeType&&(s=A.extend({},s||{},{tag:s.tag||ze})),Fe(s,e));let Z;const te=document.documentElement;te.matches?Z="matches":te.matchesSelector?Z="matchesSelector":te.mozMatchesSelector?Z="mozMatchesSelector":te.webkitMatchesSelector&&(Z="webkitMatchesSelector");class C{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(e,t){return e[Z](t)}static isBlockLevel(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof this._isBlockCache[t]<"u")return this._isBlockCache[t];var i=document.createElement(t);return this.fragment().appendChild(i),this._isBlockCache[t]=getComputedStyle(i).display==="block",this.fragment().removeChild(i),this._isBlockCache[t]}static firstBlockLevel(e){for(;e&&e.classList;){if(this.isBlockLevel(e))return e;e=e.parentNode}}static firstWithBackgroundImage(e){if(!e)return null;for(;e&&e.nodeName!=="BODY";){if(e.style.backgroundImage)return e;e=e.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(e,t){for(;e&&e.nodeName!=="BODY";){let i=0,n=t.length;for(;i<n;i++)if(e.classList.contains(t[i]))return!0;e=e.parentElement}return!1}static hasParentsWithClass(e,t){if(e){for(var i=e.parentNode;i&&i.nodeName!=="BODY";){if(i.classList.contains(t))return!0;i=i.parentNode}return!1}}static hasParentWithId(e,t){if(e){for(var i=e.parentNode;i&&i.nodeName!=="BODY";){if(i.id===t)return!0;i=i.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(e,t){for(;e&&e.nodeName!=="BODY";){let i=0,n=t.length;for(;i<n;i++)if(e.classList.contains(t[i]))return e;e=e.parentElement}return null}static firstParentOrCurrentWithTag(e,t){if(!(!e||!t)){t=typeof t!="string"?t:[t];for(var i=e;i&&i.nodeName!=="BODY";){if(t.indexOf(i.nodeName.toLowerCase())!==-1)return i;i=i.parentNode}return!1}}static index(e,t,i){i=i||e.tagName.toLowerCase(),t=t||e.parentNode;var n;t.constructor===[].constructor?n=t:n=t.querySelectorAll(i);for(var r=0,o=n.length;r<o;r++)if(e===n[r])return r}static firstParentOrCurrentWithClass(e,t){if(!e)return!1;for(var i=e;i&&i.nodeName!=="BODY";){if(i.classList.contains(t))return i;i=i.parentNode}return!1}static firstParentOrCurrent(e,t){if(!e)return!1;for(var i=e;i&&i.nodeName!=="BODY";){if(i.matches(t))return i;i=i.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(e,t){if(!e)return!1;for(var i=e;i&&i.nodeName!=="BODY";){if(!i)return!1;if(this.hasAnyOfClasses(i,t))return i;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(e,t){let i=e;for(;i&&i.nodeName!=="BODY";){const n=i.classList.contains(t[0]),r=i.classList.contains(t[1]);if(n&&r)return!1;if(n)return!0;if(r)return!1;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(e,t){let i=e;for(;i&&i.nodeName!=="BODY";){const n=i.classList.contains(t[0]),r=i.classList.contains(t[1]);if(n&&r)return!1;if(n)return!0;if(r)return!1;i=i.parentNode}return!0}static hasAnyOfClasses(e,t){if(!e)return;let i=0,n=t.length;for(;i<n;i++)if(e.classList.contains(t[i]))return!0;return!1}static offset(e){if(e){var t=e.getBoundingClientRect(),i={top:t.top,left:t.left,width:t.width,height:t.height,bottom:t.bottom,right:t.right};return i.top+=e.ownerDocument.defaultView.scrollY,i.bottom+=e.ownerDocument.defaultView.scrollY,i.left+=e.ownerDocument.defaultView.scrollX,i.right+=e.ownerDocument.defaultView.scrollX,i}}static parentsOrder(e,t){for(var i=[],n={},r=t.length,o=0,a=-1;o<r;o++)n[t[o]]=-1;if(!e)return n;for(var l=e.parentNode;l&&l.nodeName!=="BODY";){for(a++,o=0;o<r;o++)l.classList.contains(t[o])&&i.indexOf(t[o])===-1&&(n[t[o]]=a,i.push(t[o]));l=l.parentNode}return n}}E(C,"_isBlockCache",{}),E(C,"_fragment");class un{constructor(e){this.settings=e,this.tools=C}isRow(e){return e.classList.contains(this.settings.rowClass)}isModule(e){return e.classList.contains(this.settings.moduleClass)&&e.dataset.type!=="layouts"}isLayout(e){return e.classList.contains(this.settings.moduleClass)&&e.dataset.type==="layouts"}isInLayout(e){if(!e)return!1;for(e=e.parentNode;e&&e!==this.settings.document.body;){if(e.classList.contains(this.settings.moduleClass)&&e.dataset.type==="layouts")return!0;e=e.parentNode}}isElement(e){return e.classList.contains(this.settings.elementClass)}isEmptyElement(e){return e.classList.contains(this.settings.emptyElementClass)}isEdit(e){return e.classList.contains(this.settings.editClass)}isInEdit(e){var t=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(e.parentNode,t)}isEditOrInEdit(e){return this.isEdit(e)||this.isInEdit(e)}isPlainText(e){return e.classList.contains(this.settings.plainElementClass)}getType(e){if(this.isEdit(e))return"edit";if(this.isElement(e))return"element";if(this.isModule(e))return"module";if(this.isLayout(e))return"layout"}}class It extends un{constructor(e){super(e),this.settings=e,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM","DD"],this.init()}isConfigurable(e){return this.isElement(e)||this.isModule(e)||this.isRow(e)}isEditableLayout(e){return this.this.isLayout(e)&&this.isInEdit(e)}canMoveModule(e){return this.isModule(e)&&this.isInEdit(e)}canAcceptByClass(e){return this.tools.hasAnyOfClasses(e,this.dropableElements())}canAcceptByTag(e){return!e||e.nodeType!==1?!1:this._tagsCanAccept.indexOf(e.nodeName)!==-1}allowDrop(e){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(e,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(e){return this.canAccept(e.parentNode)}canAccept(e){return!!(this.canAcceptByClass(e)&&this.isEditOrInEdit(e)&&this.allowDrop(e))}canReceiveElements(e){return this.isEdit(e)&&this.canAcceptByTag(e)}dropableElements(){return this._dropableElements}getIteractionTarget(e){return this.tools.firstWithAyOfClassesOnNodeOrParent(e,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(e,t){const i=this.getIteractionTarget(e);if(!i||!this.isEditOrInEdit(e)||!this.allowDrop(e))return null;const n={target:i,canInsert:!1,beforeAfter:!1};var r=this.settings.strictLayouts&&this.isLayout(t),o=this.settings.strict&&!this.isLayout(t)&&!this.isInLayout(i);if(o)return null;if(this.isEdit(i))n.canInsert=!r;else if(this.isElement(i)&&!r)this.canAcceptByTag(i)&&(n.canInsert=!r),n.beforeAfter=!0;else if(this.isModule(i)&&!r)if(this.canInsertBeforeOrAfter(i))n.beforeAfter=!0;else return null;else if(this.isLayout(i))if(this.canInsertBeforeOrAfter(i))n.beforeAfter=!0;else return null;return n}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let hn=-1;const cn=(s,e)=>{if(!s||!e)return!1;const t=e.target;if(!t||t.nodeType!==1)return!1;s.pageX;const i=s.pageY,n=C.offset(t),r={},o=15;if(hn===i||!e||!e.canInsert&&!e.beforeAfter)return!1;if(e.canInsert&&e.beforeAfter)if(i>=n.top-o&&i<=n.top+o)r.position="top",r.action="before";else if(i>=n.top+o&&i<=n.top+n.height/2)r.position="top",r.action="prepend";else if(i>=n.top+n.height/2&&i<=n.bottom-o)r.position="bottom",r.action="append";else if(i>=n.top+n.height/2&&i>=n.bottom-o)r.position="bottom",r.action="after";else return!1;else if(e.beforeAfter)if(i>=n.top-o&&i<=n.top+n.height/2)r.position="top",r.action="before";else if(i>=n.top+n.height/2&&i<=n.bottom+o)r.position="bottom",r.action="after";else return!1;else if(e.canInsert)if(i>=n.top-o&&i<=n.top+n.height/2)r.position="top",r.action="prepend";else if(i>=n.top+n.height/2&&i<=n.bottom+o)r.position="bottom",r.action="append";else return!1;return r},mn=function(s,e){var t={handle:null,element:null,document,helper:!0},i=this,n={};this.on=function(o,a){n[o]?n[o].push(a):n[o]=[a]},this.dispatch=function(o,a){n[o]&&n[o].forEach(function(l){l.call(this,a)})};var r=function(o){i.settings.document.body.style.scrollBehavior="smooth",i.settings.document.defaultView.scrollTo(0,i.settings.document.defaultView.scrollY+o),i.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=A.extend({},t,s),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(o){this.element=g(o).get(0),this.settings.handle||(this.settings.handle=this.settings.element),this.handle=this.settings.handle,this.handle.attr("draggable","true")},this.setTargets=function(o){this.targets=g(o)},this.addTarget=function(o){this.targets.push(o)},this.init=function(){this.config(),this.draggable()},this.helper=function(o){return this._helper||(this._helper=g().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),o==="create"?(this._helper.style.top=o.pageY+"px",this._helper.style.left=o.pageX+"px",this._helper.style.width=i.element.offsetWidth+"px",this._helper.style.height=i.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"):o==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&o&&(this._helper.style.top=o.pageY+"px",this._helper.style.left=o.pageX+"px",this._helper.style.maxWidth=i.settings.document.defaultView.innerWidth-o.pageX-40+"px",this.settings.document.documentElement.classList.add("le-dragging")),this._helper},this.isDragging=!1,this.dropableService=new It(e),this.dropPosition=cn,this.draggable=function(){g(this.settings.target).on("dragleave",function(o){i.dropIndicator&&i.dropIndicator.hide()}),g(this.settings.target).on("dragover",function(o){if(i.target=null,i.action=null,o.target!==i.element||!i.element.contains(o.target)){var a=i.dropableService.getTarget(o.target,i.element);if(a&&a!==i.element){const l=i.dropPosition(o,a);l?(i.target=a.target,i.action=l.action,i.dropIndicator&&i.dropIndicator.position(i.target,l.action+"-"+l.position)):i.dropIndicator&&i.dropIndicator.hide()}else i.dropIndicator&&i.dropIndicator.hide();i.isDragging&&(i.dispatch("dragOver",{element:i.element,event:o}),o.preventDefault())}}).on("drop",function(o){i.isDragging&&(o.preventDefault(),i.target&&i.action&&g(i.target)[i.action](i.element),i.dropIndicator&&i.dropIndicator.hide(),i.dispatch("drop",{element:i.element,event:o})),i.dropIndicator&&i.dropIndicator.hide()}),this.handle.on("dragstart",function(o){i.isDragging=!0,i.element.id||(i.element.id="mw-element-"+new Date().getTime()),i.element.classList.add("mw-element-is-dragged"),o.dataTransfer.setData("text",i.element.id),o.dataTransfer.effectAllowed="move",i.helper("create"),i.dispatch("dragStart",{element:i.element,event:o})}).on("drag",function(o){var a=90,l=5;o.clientY<a&&r(-l),o.clientY>innerHeight-(a+(this._helper?this._helper.offsetHeight+10:0))&&r(l),o.dataTransfer.dropEffect="copy",i.dispatch("drag",{element:i.element,event:o}),i.helper(o)}).on("dragend",function(o){i.isDragging=!1,i.element.classList.remove("mw-element-is-dragged"),i.helper("remove"),i.dispatch("dragEnd",{element:i.element,event:o})})},this.init()};var O,W,Y;class Rt{constructor(e={}){E(this,"x",0);E(this,"y",0);E(this,"w",0);E(this,"h",0);E(this,"listeners",{});x(this,O,{});E(this,"activeHandle",null);E(this,"handles",{});x(this,W,!1);x(this,Y,!0);const t={element:null,document,maxHeight:null,maxWidth:null};this.settings=Object.assign({},t,e),this.element=this.settings.element,this.document=this.settings.document,this.element.classList.add("mw-le-resizable")}on(e,t){f(this,O)[e]?f(this,O)[e].push(t):f(this,O)[e]=[t]}dispatch(e,t){f(this,O)[e]&&f(this,O)[e].forEach(i=>{i.call(this,t)})}mouseMoveHandler(e){const t=e.clientX-this.x,i=e.clientY-this.y;let n=this.h+i,r;this.activeHandle===this.handles.left?r=this.w-t:r=this.w+t,this.settings.maxWidth&&(r=Math.min(r,this.settings.maxWidth)),this.settings.maxHeight&&(n=Math.min(n,this.settings.maxHeight)),this.element.style.width=`${r}px`,this.element.style.height=`${n}px`,e.preventDefault(),this.dispatch("resize",{height:this.element.offsetHeight,width:this.element.offsetWidth})}mouseUpHandler(){for(const e in this.listeners)this.document.removeEventListener(e,this.listeners[e]);this.listeners={},this.activeHandle=null,this.dispatch("resizeStop")}mouseDownHandler(e){this.x=e.clientX,this.y=e.clientY;const t=this.document.defaultView.getComputedStyle(this.element);this.w=parseInt(t.width,10),this.h=parseInt(t.height,10),this.listeners.mousemove=i=>this.mouseMoveHandler(i),this.listeners.mouseup=i=>this.mouseUpHandler(i);for(const i in this.listeners)this.document.addEventListener(i,this.listeners[i]);this.dispatch("resizeStart")}disable(){q(this,W,!0),q(this,Y,!1),this.element.classList.add("mw-le-resizable-disabled")}enable(){q(this,W,!1),q(this,Y,!0),this.element.classList.remove("mw-le-resizable-disabled")}disabled(){return f(this,W)}enabled(){return f(this,Y)}build(){const e=this.document.createElement("span"),t=this.document.createElement("span"),i=this.document.createElement("span"),n=this.document.createElement("span");this.handles.top=e,this.handles.right=t,this.handles.bottom=i,this.handles.left=n,e.className="mw-le-resizer mw-le-resizer-t",t.className="mw-le-resizer mw-le-resizer-r",n.className="mw-le-resizer mw-le-resizer-l",i.className="mw-le-resizer mw-le-resizer-b",this.element.appendChild(e),this.element.appendChild(t),this.element.appendChild(i),this.element.appendChild(n)}mount(){if(!this.element)return this;if(this.element.dataset.resizable)return this;this.element.dataset.resizable=!0,this.build();const e=this.element.querySelectorAll(".mw-le-resizer");return Array.from(e).forEach(t=>{t.addEventListener("mousedown",i=>{this.mouseDownHandler(i),this.activeHandle=t})}),this.dispatch("ready",{height:this.element.offsetHeight,width:this.element.offsetWidth}),this}}O=new WeakMap,W=new WeakMap,Y=new WeakMap;globalThis.Resizable=Rt;const ie=function(s){var e={},t=this;this.settings=A.extend({},e,s);const i={};this.on=(c,h)=>{i[c]?i[c].push(h):i[c]=[h]},this.dispatch=(c,h)=>{i[c]&&i[c].forEach(u=>{u.call(this,h)})};var n=!0,r=null;this.getTarget=function(){return r},this.isVisible=function(){return n},this.show=function(){n=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){n=!1,this.wrapper.addClass("mw-handle-item-hidden"),this.wrapper.removeClass("mw-handle-active")};let o=null;this.setContent=function(c){o&&o.remove(),o=c,this.wrapper.append(o)},this.initDraggable=function(){this.draggable=new mn({handle:this.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},s),this.draggable.on("dragStart",function(){t.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){t.wrapper.removeClass("mw-handle-item-dragging")})};const a=()=>{if(this.settings.document.defaultView.pageYOffset!==void 0)return{x:this.settings.document.defaultView.pageXOffset,y:this.settings.document.defaultView.pageYOffset};{let c,h,u=this.settings.document,w=u.documentElement,v=u.body;return c=w.scrollLeft||v.scrollLeft||0,h=w.scrollTop||v.scrollTop||0,{x:c,y:h}}};this.position=function(c){if(!c)return;const h=C.offset(c),u=a(),w=this.wrapper.get(0).querySelector(".mw-le-handle-menu-buttons");let v;u.y>h.top-70&&(v=u.y-(h.top-70),v+10>h.height&&(v=h.height+10)),w.style.transition="none",w.style.transform=v?`translateY(${v}px)`:"",setTimeout(()=>w.style.transition="",10),this.wrapper.css({top:h.top,left:h.left,width:h.width,height:h.height})},this.set=function(c,h){if(!c){r=null;return}this.position(c),this.show(),this.draggable.setElement(c),(r!==c||h)&&(r=c,this.dispatch("targetChange",c)),setTimeout(()=>this.wrapper.addClass("mw-handle-active"),1)},this.createHandle=function(){this.settings.handle?(typeof this.settings.handle=="string"&&(this.settings.handle=g(this.handle)),this.handle=this.settings.handle):(this.handle=g({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))};var l=this.settings.document.defaultView.innerWidth,d=this.settings.document.defaultView.innerHeight;this.resizableMaxWidth=function(c){if(typeof c>"u")return l;l=c},this.resizableMaxHeight=function(c){if(typeof c>"u")return d;d=c},this.findClosestElementByClass=function(c,h=200){let u=[],w=c,v=0;for(;w!==document;){const m=w.parentNode.querySelectorAll(".element,.module");if(m.length>0&&(u=[...m].filter(B=>Math.abs(c.getBoundingClientRect().top-B.getBoundingClientRect().top)<=h),u.length>0)||(w=w.parentNode,v++,v>h/10))break}return u};function p(c,h,u,w){var v=Math.min(u/c,w/h);return{width:c*v,height:h*v}}this.resizable=function(){this.settings.resizable&&(this.resizer=new Rt({element:this.wrapper.get(0),document:this.settings.document}),this.resizer.mount(),this.resizer.on("resize",c=>{const h=this.getTarget();h.nodeName==="IMG"?(c=p(h.offsetWidth,h.offsetHeight,c.width,c.height),h.style.height=c.height+"px",h.style.width=c.width+"px"):(h.style.minHeight=c.height+"px",h.style.width=c.width+"px"),this.set(h)}))},this.createWrapper=function(){this.wrapper=g({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),g(document.body).on("mouseup touchend",function(){t.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide(),this.resizable(),this.settings.document.addEventListener("orientationChange",c=>this.position(this.getTarget())),this.settings.document.addEventListener("resize",c=>this.position(this.getTarget())),this.settings.document.addEventListener("scroll",c=>this.position(this.getTarget()))},fn=function(s){s=s||{},this.tools=C;var e=this,t={exceptions:["mw-handle-item"]};this.settings=A.extend({},t,s),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var i=20,n=function(a){return a%5>=2.5?a/5*5+5:a/5*5},r=function(a,l){a=n(a),l=n(l);for(var d=[],p=a-i,c=a+i,h=l-i,u=l+i;p<c;p+=5)for(;h<=u;h+=5)d.push([p,h]);return d},o=function(a,l){a&&a.parentElement&&l.indexOf(a)===-1&&e.body!==a&&l.push(a)};this.fromEvent=function(a){return e.tools.hasAnyOfClassesOnNodeOrParent(a.target,this.settings.exceptions)?[]:(e.document._test||(e.document._test=document.createElement("div"),e.document._test.style.position="absolute",e.document._test.style.left="10px",e.document._test.style.background="red",e.document._test.style.width="10px",e.document._test.style.height="10px",e.document.body.appendChild(e.document._test)),e.document._test.style.top=a.pageY+"px",this.fromPoint(a.pageX,a.pageY))},this.fromPoint=function(a,l){var d=[];e.document.defaultView.frameElement&&(l-=e.document.defaultView.scrollY);var p=e.document.elementFromPoint(a,l);if(!p)return[];o(p,d);var c=r(a,l);return c.forEach(function(h){o(e.document.elementFromPoint(h[0],h[1]),d)}),d}},pn=function(s){return C.matches(s,'.row,[class*="row-"]')},gn=function(s){return C.matches(s,'.col,[class*="col-"]')};let T;const bt=function(){return T||(T=document.createElement("div"),T.style.visibility="hidden",T.style.position="absolute",T.style.width="1px",T.style.height="1px",document.body.appendChild(T)),T},ne={},wn=function(s){if(!s||s.nodeType===3)return!1;var e=s.nodeName;if(typeof ne[e]<"u")return ne[e];var t=document.createElement(e);return bt().appendChild(t),ne[e]=getComputedStyle(t).display==="block",bt().removeChild(t),ne[e]},vn=(s,e,t)=>{s=s||"*";for(var i=e.querySelectorAll(s),n=0,r=[];n<i.length;n++)!gn(i[n])&&!pn(i[n])&&!t.elementAnalyzer.isEdit(i[n])&&wn(i[n])&&r.push(i[n]);return r},bn=s=>{const{backgroundImageHolder:e,editClass:t,moduleClass:i,elementClass:n,allowDrop:r}=s.settings,o=s.root;for(var a=o.querySelectorAll("."+t+"."+e+", ."+t+" ."+e+", ."+t+'[style*="background-image"], .'+t+' [style*="background-image"]'),l=o.querySelectorAll("."+i+s.settings.unEditableModules.join(",."+i)),d=o.querySelectorAll("."+t),p=0,c=0,h=0;p<a.length;p++){var u=a[p];s.elementAnalyzer.isInEdit(u)&&(mw.tools.hasClass(u,i)||mw.tools.addClass(u,t),u.style.backgroundImage||(u.style.backgroundImage="none"))}for(;c<l.length;c++)l[p].classList.remove(i);for(;h<d.length;h++){for(var w=vn(":not(."+n+")",d[h],s),v=0,m=d[h].querySelectorAll("img,."+r),B=0;B<m.length;B++)m[B].classList.add(n);for(;v<w.length;v++)w[v].classList.contains(i)||s.elementAnalyzer.isInEdit(w[v])&&w[v].classList.add(n)}},yn=function(s){this.handles=s,this.dragging=!1;var e=this;this.get=function(t){return this.handles[t]},this.set=function(t,i){this.get(t).set(i)},this.hide=function(t){t&&this.handles[t]?this.handles[t].hide():this.each(function(i,n){n.hide()})},this.hideAllBut=function(t){this.each(function(i,n){i!==t&&n.hide()})},this.show=function(t){t&&this.handles[t]?this.handles[t].show():this.each(function(i,n){n.show()})},this.each=function(t){if(t){var i;for(i in this.handles)t.call(e,i,this.handles[i])}},this.targetIsSelected=function(t,i){if(t){t=t.target||t;var n;for(n in this.handles){if(i&&i===this.handles[n])continue;const r=this.handles[n].getTarget();if(r&&r===t)return!0}return!1}},this.targetIsOrInsideHandle=function(t){if(t){t=t.target||t;var i;for(i in this.handles)if(this.handles[i].wrapper.get(0)===t||this.handles[i].wrapper.get(0).contains(t))return!0;return!1}},this.init=function(){this.each(function(t,i){i.draggable.on("dragStart",function(){e.dragging=!0,e.hideAllBut(t)}),i.draggable.on("dragEnd",function(){e.dragging=!1,i.show()})})},this.init()},xn=function(s){s=s||{};const e={template:"default"};let t={};this.settings=A.extend({},e,s),this._indicator=null;const i={};this.on=function(l,d){i[l]?i[l].push(d):i[l]=[d]},this.dispatch=function(l,d){i[l]&&i[l].forEach(function(p){p.call(this,d)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,t={})},this.show=function(){console.log(this.visible),this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const n=["before-top","prepend-top","after-bottom","append-bottom"],r="mw-drop-indicator-position-",o=n.map(function(l){return r+l});let a=null;this.position=function(l,d){if(!(!l||!d)&&!(t.target===l&&t.position===d)){t.target=l,t.position=d,a!==d&&(this._indicator.removeClass(o),a=d,this._indicator.addClass(r+d));var p=C.offset(l);this._indicator.css({height:p.height,left:p.left,top:p.top,width:p.width}),this.show()}},this.make=function(){this._indicator=g(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},Cn=(s,e,t)=>{!s||!e||(s=s.isMWElement?s.get(0):s,s.dataset.tooltip=e,s.title=e,s.dataset.tooltipposition=t||"top-center")},X=function(s){this.options=s||{};var e=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=g({props:{className:"mw-le-handle-menu",id:e.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=g({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var t,i,n,r=function(){t=g({props:{className:"mw-le-handle-menu-title"}}),i=g({props:{className:"mw-le-handle-menu-title-text"}}),n=g({props:{className:"mw-le-handle-menu-title-icon"}}),t.append(i),t.append(n),e.root.prepend(t),e.title=t},o=null;this.getTarget=function(){return o},this.setTarget=function(a){o=a;for(var l=0;l<this.buttons.length;l++)this.buttons[l].config.onTarget&&this.buttons[l].config.onTarget(a,this.buttons[l].button.get(0),e.options.rootScope)},this.setTitle=function(a,l){i.html(a||""),n.html(l||"")},this.buttons=[],this.buildButtons=function(a,l){l=l||this.buttonsHolder,a=a||this.options.buttons,a.forEach(function(d){l.append(e.button(d))})},this.button=function(a){var l=g({props:{className:"mw-le-handle-menu-button"+(a.className?" "+a.className:"")}}),d={props:{className:"mw-le-handle-menu-button-content"}},p=g(d);if(a.title&&Cn(p,a.title),a.icon){var c=g({props:{className:"mw-le-handle-menu-button-icon",innerHTML:a.icon}});p.append(c)}if(a.text){var h=g({props:{className:"mw-le-handle-menu-button-text",innerHTML:a.text}});p.append(h)}if(l.append(p),this.buttons.push({button:l,config:a}),a.menu){var u=g({props:{className:"mw-le-handle-menu-button-sub-menu"}});l.append(u),e.buildButtons(a.menu,u),l.on("click",function(){this.classList.toggle("sub-menu-active")})}else typeof a.action=="function"&&l.on("click",function(){a.action(e.getTarget(),l.get(0))});return l},this.init=function(){this.create(),r(),this.setTitle(e.options.title,e.options.icon),this.buildButtons(),this.hide()},this.init()},Ln=(s,e)=>{const t=g({props:{className:"le-dialog-footer"}}),i=g({props:{className:"le-btn le-btn-primary le-dialog-footer-ok",innerHTML:s||"OK"}}),n=g({props:{className:"le-btn le-dialog-footer-cancel"}});return t.append(n),t.append(i),{ok:i,cancel:n,footer:t}};var D,G,Be;class Pt{constructor(e){x(this,G);x(this,D,{});e=e||{};const t={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},t,e),this.build(),setTimeout(i=>this.open())}on(e,t){f(this,D)[e]?f(this,D)[e].push(t):f(this,D)[e]=[t]}dispatch(e,t){f(this,D)[e]&&f(this,D)[e].forEach(i=>{i.call(this,t)})}build(){this.root=g({props:{className:`le-dialog ${typeof this.settings.position=="string"?this.settings.position:""}`}});var e=g({props:{className:"le-dialog-close"}});e.on("click",()=>{this.remove()}),this.container=g({props:{className:"le-dialog-container"},content:this.settings.content}),this.root.append(e),this.root.append(this.container),this.settings.footer&&this.root.append(this.settings.footer.root||this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this.settings.closeOnEscape&&this.settings.document.addEventListener("keydown",N(this,G,Be)),this.settings.overlay&&this.overlay()}open(){if(this.settings.position.nodeName&&this.settings.position.ownerDocument===this.settings.document){var e=this.settings.position;e.ownerDocument;var t=e.ownerDocument.defaultView,i=e.getBoundingClientRect(),n=i.top+t.scrollY,r=i.left+e.offsetWidth+t.scrollX,o=this.root.get(0);n+o.offsetHeight>t.innerHeight+t.scrollY&&(n-=n+o.offsetHeight-(t.innerHeight+t.scrollY)),r+o.offsetWidth>t.innerWidth&&(r-=r+o.offsetWidth-t.innerWidth),this.root.css({top:n,left:r,position:this.settings.mode})}this.root.addClass("le-dialog-opened")}remove(){this.root.on("transitionend",()=>{this.root.remove(),this.overlay&&this.overlay.remove()}),this.root.removeClass("le-dialog-opened"),this.settings.closeOnEscape&&this.settings.document.removeEventListener("keydown",N(this,G,Be)),this.dispatch("close")}overlay(){this.overlay=g({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}D=new WeakMap,G=new WeakSet,Be=function(e){(e.key==="Escape"||e.keyCode===27)&&this.remove()};const Vt=function(s,e){const t=Ln(),i=new Pt({content:s,footer:t.footer.get(0),position:"centered"});return t.cancel.on("click",function(){i.remove()}),t.ok.on("click",function(){e&&e.call(),i.remove()}),i},En=function(s){this.root=g({props:{id:"mw-handle-item-element-root"}});const e=[{title:"Duplicate",text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg>',className:"mw-handle-clone-button",onTarget:function(t,i){i.style.display=t.classList.contains("cloneable")?"":"none"},action:function(t){g(t).after(t.outerHTML)}},{title:"Move backward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20 13.5C20 17.09 17.09 20 13.5 20H6V18H13.5C16 18 18 16 18 13.5S16 9 13.5 9H7.83L10.91 12.09L9.5 13.5L4 8L9.5 2.5L10.92 3.91L7.83 7H13.5C17.09 7 20 9.91 20 13.5Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(t,i){const n=t.classList.contains("cloneable"),r=t.previousElementSibling;i.style.display=n&&r?"":"none"},action:function(t){const i=t.previousElementSibling;i&&(i.before(t),s.elementHandle.set(t))}},{title:"Move forward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M10.5 18H18V20H10.5C6.91 20 4 17.09 4 13.5S6.91 7 10.5 7H16.17L13.08 3.91L14.5 2.5L20 8L14.5 13.5L13.09 12.09L16.17 9H10.5C8 9 6 11 6 13.5S8 18 10.5 18Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(t,i){const n=t.classList.contains("cloneable"),r=t.nextElementSibling;i.style.display=n&&r?"":"none"},action:function(t){const i=t.nextElementSibling;i&&(i.after(t),s.elementHandle.set(t))}}];this.menu=new X({id:"mw-handle-item-element-menu",title:"Element",buttons:[{title:"Drag to rearange",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"  fill="currentColor" width="24" height="24" ><path d="M7,19V17H9V19H7M11,19V17H13V19H11M15,19V17H17V19H15M7,15V13H9V15H7M11,15V13H13V15H11M15,15V13H17V15H15M7,11V9H9V11H7M11,11V9H13V11H11M15,11V9H17V11H15M7,7V5H9V7H7M11,7V5H13V7H11M15,7V5H17V7H15Z" /></svg>',className:"mw-handle-drag-button",onTarget:function(t,i){},action:function(t){s.dialog({})}},{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,i){},action:function(t){s.dialog({})}},...e,{title:s.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(t){Vt(g("<span>Are you sure</span>"),()=>{t.remove(),s.elementHandle.hide()})}}]}),this.menu.show(),this.root.append(this.menu.root)},Hn=function(s){this.root=g({props:{id:"mw-handle-item-module-root",contentEditable:!1}});var e=new X({id:"mw-handle-item-element-menu-default",title:"Module",rootScope:s,buttons:[{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',action:()=>{const t=mw.app.get("liveEdit").handles.get("module").getTarget();mw.app.editor.dispatch("onModuleSettingsRequest",t);var i=t.dataset.type||t.getAttribute("type");i=i.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+i,t)}}]});this.menu=new X({id:"mw-handle-item-element-menu",title:"Module",rootScope:s,buttons:[]}),this.menu.show(),e.show(),this.root.append(this.menu.root),this.root.append(e.root)},kn=function(s){this.root=g({props:{id:"mw-handle-item-layout-root"}});const e={};this.on=(t,i)=>{e[t]?e[t].push(i):e[t]=[i]},this.dispatch=(t,i)=>{e[t]&&e[t].forEach(n=>{n.call(this,i)})},this.menu=new X({id:"mw-handle-item-layout-menu",title:s.lang("Layout"),rootScope:s,buttons:[{title:s.lang("Settings"),text:"",icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 13.3 15.9" xml:space="preserve"><path d="M8.2,2.4L11,5.1l-8.2,8.2H0v-2.8L8.2,2.4z M11.8,4.3L9,1.6l1.4-1.4C10.5,0.1,10.7,0,10.9,0c0.2,0,0.4,0.1,0.5,0.2l1.7,1.7c0.1,0.1,0.2,0.3,0.2,0.5S13.3,2.8,13.1,3L11.8,4.3z"/><rect y="14.5" width="12" height="1.4"/></svg>',className:"mw-handle-insert-button",menu:[{title:s.lang("Add something"),text:s.lang("Add something"),icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" version="1.1" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button"},{title:s.lang("Settings1212"),text:"Do alert",className:"mw-handle-insert-button"}]},{title:s.lang("Clone"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>',className:"mw-handle-insert-button",action:function(t,i,n){var r=document.createElement("div");r.innerHTML=t.outerHTML,g("[id]",r).each(function(){this.id="le-id-"+new Date().getTime()}),g(t).after(r.innerHTML);var o=t.nextElementSibling;mw.reload_module(o,function(){n.statemanager.record({target:mw.tools.firstParentWithClass(t,"edit"),value:parent.innerHTML})}),o.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})}},{title:s.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,i){t.nextElementSibling===null?i.style.display="none":i.style.display=""},action:function(t,i){var n=t.nextElementSibling;if(n){var r=t.getBoundingClientRect(),o=n.getBoundingClientRect(),a=0;r.top<o.top&&(a=-(r.top-o.top)),t.classList.add("mw-le-target-to-animate"),n.classList.add("mw-le-target-to-animate"),t.style.transform="translateY("+a+"px)",n.style.transform="translateY("+-a+"px)",setTimeout(function(){n.parentNode.insertBefore(t,n.nextSibling),t.classList.remove("mw-le-target-to-animate"),n.classList.remove("mw-le-target-to-animate"),t.style.transform="",n.style.transform="",t.scrollIntoView({behavior:"smooth",block:"start",inline:"start"}),s.layoutHandle.set(t,!0)},300)}}},{title:s.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,i,n){t.previousElementSibling===null?i.style.display="none":i.style.display=""},action:function(t,i){var n=t.previousElementSibling;if(n){var r=t.getBoundingClientRect(),o=n.getBoundingClientRect(),a=0;r.top>o.top&&(a=-(r.top-o.top)),t.classList.add("mw-le-target-to-animate"),n.classList.add("mw-le-target-to-animate"),t.style.transform="translateY("+a+"px)",n.style.transform="translateY("+-a+"px)",setTimeout(function(){n.parentNode.insertBefore(t,n),t.classList.remove("mw-le-target-to-animate"),n.classList.remove("mw-le-target-to-animate"),t.style.transform="",n.style.transform="",s.layoutHandle.set(t,!0),t.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})},300)}}},{title:s.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path  d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(t,i,n){Vt("Are you sure",function(){t.remove()})}}]}),this.addButtons=function(){var t="Add Layout",i=n=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+n.charAt(0).toUpperCase()+n.slice(1))};this.plusTop=g({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:s.lang(t)}}),this.plusBottom=g({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:s.lang(t)}}),this.plusTop.on("click",function(){i("top")}),this.plusBottom.on("click",function(){i("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.menu.show(),this.addButtons(),this.root.append(this.menu.root)},yt={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},Nn=(s,e)=>((!e||!yt[e])&&(e="en"),yt[e][s]||s),Sn=function(s){this.root=g({props:{id:"mw-handle-interaction-item-element-root"}}),this.menu=new X({id:"mw-handle-item-element-menu",title:"Element",buttons:[]}),this.menu.show(),this.root.append(this.menu.root)};class _n{constructor(e){const t=this,i={};this.on=(u,w)=>{i[u]?i[u].push(w):i[u]=[w]},this.dispatch=(u,w)=>{i[u]&&i[u].forEach(v=>{v.call(this,w)})},this.paused=!1;var n={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=A.extend({},n,e),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(u){return Nn(u,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new It(this.settings),this.dropIndicator=new xn(this.settings);const r=new En(this),o=new Hn(this),a=new kn(this);this.elementHandleContent=r,this.moduleHandleContent=o,this.layoutHandleContent=a,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.dialog=function(u){u||(u={});var w={document:window.top.document,position:o.menu.getTarget(),mode:"absolute"};t.pause();const v=new Pt(A.extend({},w,u));return v.on("close",function(){t.play()}),v};var l=this.elementHandle=new ie({...this.settings,dropIndicator:this.dropIndicator,content:r.root,handle:g(".mw-handle-drag-button",r.root.get(0)),document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});this.isResizing=!1,l.resizer.on("resizeStart",u=>this.isResizing=!0),l.resizer.on("resizeStop",u=>this.isResizing=!1),l.on("targetChange",function(u){r.menu.setTarget(u),u.className.includes("col-")?l.resizer.disable():l.resizer.enable()}),this.moduleHandle=new ie({...this.settings,dropIndicator:this.dropIndicator,content:o.root,handle:o.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});var d=this.moduleHandle;this.getModuleQuickSettings=u=>new Promise(w=>{w(mw.quickSettings[u]),this.dispatch("moduleQuickSettings",{module:u})}),d.on("targetChange",function(u){t.getModuleQuickSettings(u.dataset.type).then(function(w){o.menu.root.remove(),o.menu=new X({id:"mw-handle-item-element-menu",title:u.dataset.type,rootScope:t,buttons:w?w.mainMenu||[]:[],data:{target:u}}),o.menu.setTarget(u),o.menu.show(),o.root.append(o.menu.root)})}),this.layoutHandle=new ie({...this.settings,dropIndicator:this.dropIndicator,content:a.root,handle:a.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var p=this.layoutHandle,c=t.lang("Layout");a.menu.setTitle(c),p.on("targetChange",function(u){a.menu.setTarget(u),a.menu.setTitle(c),t.elementAnalyzer.isEditOrInEdit(u)?(a.plusTop.show(),a.plusBottom.show()):(a.plusTop.hide(),a.plusBottom.hide())}),a.handle=p,o.handle=d,r.handle=l;const h=new Sn;this.interactionHandle=new ie({...this.settings,content:h.root,document:this.settings.document,resizable:!1,className:"mw-handle-item-interaction-handle"}),this.interactionHandle.menu=h.menu,this.handles=new yn({element:l,module:d,layout:p,interactionHandle:this.interactionHandle}),this.observe=new fn(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}init(){this.settings.mode==="auto"&&setInterval(()=>bn(this),1e3);const e=i=>{if(this.handles.targetIsOrInsideHandle(i))return;const n=this.observe.fromEvent(i);let r=n[0];if(r.nodeName!=="IMG"&&(r=C.firstBlockLevel(n[0])),this.handles.get("element").set(null),this.handles.hide(),r){const o=this.elementAnalyzer.getType(r);o&&o!=="edit"&&(this.handles.set(o,r),o==="element"?this.handles.hide("module"):o==="module"?this.handles.hide("element"):o==="layout"?this.handles.set("layout",layout):this.handles.hide())}else{const o=C.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);o&&this.handles.set("layout",o)}};let t;t="mousedown touchstart",g(this.root).on("mousemove",i=>{if(this.paused||this.isResizing){this.interactionHandle.hide();return}if(this.handles.targetIsOrInsideHandle(i)){this.interactionHandle.hide();return}const n=this.observe.fromEvent(i),r=C.firstParentOrCurrentWithAnyOfClasses(n[0],["element","module","cloneable"]),o=C.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);let a=!1;if(o){const d=this.handles.get("element").getTarget(),p=this.handles.get("module").getTarget();o.contains(d)&&(a=!0),o.contains(p)&&(a=!0),a?this.handles.hide("layout"):this.handles.set("layout",o)}if(r&&!this.handles.targetIsSelected(r,this.interactionHandle)&&!r.classList.contains("module-layouts")){var l="";r.dataset.mwTitle?l=r.dataset.mwTitle:r.dataset.type?l=r.dataset.type:r.nodeName==="P"?l=this.lang("Paragraph"):/(H[1-6])/.test(r.nodeName)?l=this.lang("Title")+" "+r.nodeName.replace(/^\D+/g,""):r.nodeName==="IMG"||r.nodeName==="IMAGE"?l=this.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(r.nodeName)?l=this.lang("Title "+r.nodeName.replace("H","")):["DIV","MAIN","SECTION"].includes(r.nodeName)?l=this.lang("Block"):l=this.lang("Text"),this.interactionHandle.menu.setTitle(l),this.interactionHandle.show(),this.interactionHandle.set(r)}else this.interactionHandle.hide()}),g(this.root).on(t,i=>{this.paused||e(i)})}}globalThis.LiveEdit=_n;const Vn=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:none}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:999;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:none}.mw-handle-item.mw-le-resizable{position:absolute}.mw-handle-item.mw-handle-item-interaction-handle{pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;background-color:#7775757d;pointer-events:none}.mw-le-handle-menu{position:absolute;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;border-radius:7px;border:1px solid transparent;padding:3px 12px;display:inline-flex;align-items:center;background-color:#fff;pointer-events:all;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;position:absolute;top:-40px;left:-3px;transition:.2s;opacity:0;transform:translateY(10px);z-index:2}.mw-le-handle-menu .mw-le-handle-menu-buttons:empty{display:none!important}.mw-le-handle-menu *{vertical-align:middle}.mw-handle-item.mw-handle-active .mw-le-handle-menu .mw-le-handle-menu-buttons{opacity:1;transform:translateY(0)}#mw-handle-item-element-menu{top:-22px;left:-3px}#mw-handle-item-layout-menu{top:5px;right:5px;left:auto}#mw-handle-item-layout-menu .mw-le-handle-menu-buttons{left:auto;right:5px;top:5px}#mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-drag-button{cursor:grab}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:none;align-items:center;justify-content:center;padding:0 5px;height:20px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:grab;background-color:#0078ff;color:#fff}.mw-handle-item-interaction-handle .mw-le-handle-menu-title{display:inline-flex}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#0078ff;color:#fff;border-radius:7px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#016ce6}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}.mw-handle-item.mw-le-resizable .mw-le-resizer:before,.mw-handle-item.mw-le-resizable .mw-le-resizer:after{position:absolute;width:9px;height:9px;background-color:#fff;border:2px solid #2a84fb;content:""}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before{top:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{top:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{left:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before{bottom:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{bottom:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{top:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before{left:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{left:calc(50% - 4px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before{right:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{right:calc(50% - 5px)}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizable.mw-le-resizable-disabled .mw-le-resizer{display:none}.mw-le-resizer{position:absolute;pointer-events:all}.mw-le-resizer-r{cursor:e-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-l{cursor:e-resize;height:100%;left:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:n-resize;height:5px;left:0;width:100%}.mw-le-resizer-t{top:0;cursor:n-resize;height:5px;left:0;width:100%}mw-le-element{display:block;line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;font-family:Verdana,sans-serif;box-sizing:border-box}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}
`;var _,z,P,K,Ie,Q,Re,ue,jt;class qt{constructor(e={}){x(this,K);x(this,Q);x(this,ue);x(this,_,null);x(this,z,{});E(this,"selectedCategory","");x(this,P,[]);E(this,"root",null);const t={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},t,e),this.document=this.settings.document}on(e,t){f(this,z)[e]?f(this,z)[e].push(t):f(this,z)[e]=[t]}dispatch(e,t){f(this,z)[e]&&f(this,z)[e].forEach(i=>{i.call(this,t)})}getData(){return f(this,_)}setData(e,t=!0){q(this,_,e);let i=0,n=f(this,_).length;for(;i<n;i++)typeof f(this,_)[i].categories=="string"&&(f(this,_)[i].categories=f(this,_)[i].categories.split(",").map(r=>r.trim()));t&&this.dispatch("dataChanged",f(this,_))}prepareCategories(){const e=[],t=this.getData();let i=0,n=t.length;for(;i<n;i++){let o=t[i].categories||"",a=0,l=o.length;for(;a<l;a++){const d=o[a].trim();e.indexOf(d)===-1&&e.push(d)}}e.sort(),this.categories=e}createCategoriesMenu(){const e=this.document.createElement("ul");this.prepareCategories(),e.className="modules-list-categories",e.innerHTML=this.categories.map(t=>`<li data-category="${t}">${t}</li>`).join(""),e.innerHTML=`<li data-category="">All categories</li> ${e.innerHTML}`,e.addEventListener("click",t=>{t.target.nodeName==="LI"&&this.selectCategory(t.target.dataset.category)}),this.categoriesNavigation=e,this.rootShadow.appendChild(e),this.on("categorySelect",t=>{const i=e.querySelectorAll("[data-category]");for(const n of i)n.classList[n.dataset.category===t?"add":"remove"]("active")})}selectCategory(e=""){this.selectedCategory=e,this.search(e),this.dispatch("categorySelect",e)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let e=document.createElement("style");e.textContent=this.settings.css,this.rootShadow.appendChild(e)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const e=this.getData();let t=0,i=e.length;const n={miscellaneous:N(this,Q,Re).call(this,"miscellaneous")};for(;t<i;t++)(e[t].categories||["miscellaneous"]).forEach(o=>{n[o]||(n[o]=N(this,Q,Re).call(this,o));const a=N(this,K,Ie).call(this,e[t]);f(this,P).push(a),n[o].appendChild(a),n[o].__$hasNodes=!0});for(const r in n)n[r].__$hasNodes&&this.modulesList.appendChild(n[r]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const e=this.getData();let t=0,i=e.length;for(;t<i;t++){const n=N(this,K,Ie).call(this,e[t]);f(this,P).push(n),this.modulesList.appendChild(n)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(e){e.nodeName&&(e.style.display="none")}showItem(e){e.nodeName&&(e.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",e=>this.search(void 0,this.searchField.value)),this.on("categorySelect",e=>{this.searchField.value=""})}async search(e="",t=""){if(this.settings.searchMode==="local")return N(this,ue,jt).call(this,e,t)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(e=>{e(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(e=>{e(this)})}}_=new WeakMap,z=new WeakMap,P=new WeakMap,K=new WeakSet,Ie=function(e){e.locked=e.description.includes("a");const t=this.document.createElement("div");return t.className="modules-list-block-item modules-list-block-item-is-locked-"+e.locked,t.__$data=e,t.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${e.icon||e.screenshot||e.image})"></div>
            <div class="modules-list-block-item-title">${e.name||e.title}</div>
            <div class="modules-list-block-item-description">${e.description}</div>
            ${e.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,t.addEventListener("click",i=>{i.stopPropagation(),t.__$data.locked?this.dispatch("lockedModuleSelected",{data:e,element:t}):this.dispatch("moduleSelected",{data:e,element:t})}),t.$data=e,t},Q=new WeakSet,Re=function(e){const t=this.document.createElement("div");return t.className="modules-list-block-category-section",t.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+e+"</h5></div>",t.__$hasNodes=!1,t},ue=new WeakSet,jt=async function(e,t){return e&&(e=e.trim().toLowerCase()),t&&(t=t.trim().toLowerCase()),new Promise(i=>{let n=0,r=f(this,P).length,o=0;for(;n<r;n++){const a=f(this,P)[n],l=a.$data;if(e&&l.categories.indexOf(e)===-1){this.hideItem(a);continue}if(t&&(l.name||l.title).toLowerCase().indexOf(t)===-1){this.hideItem(a);continue}this.showItem(a),o++}console.log(t,e),this.modulesListNoResultsNode.style.display=o===0?"":"none",i()})};const ae=[],$t=function(s){ae.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+s}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",e=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(s){(s.key==="Escape"||s.keyCode===27)&&ae.length>0&&(ae[0].remove(),ae.splice(0,1))});var Pe,xt=function(s){var e=new qt({data:Pe});e.create().then(function(){var t=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),i=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),n=mw.element({props:{className:"mw-le-layouts-dialog-col"}});t.append(i),t.append(n),mw.element(e.root).append(t),i.append(e.searchBlock);var r=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});i.append(r),i.append(e.categoriesNavigation),n.append(e.modulesList),s.append(e.root)})};const An=()=>{var s=new $t("mw-le-layouts-dialog"),e=s.dialog;if(Pe){xt(e);return}mw.spinner({element:e.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(t){return t.json()}).then(function(t){Pe=t,xt(e),mw.spinner({element:e.get(0),decorate:!0}).remove()})};var Ve,Ct=function(s){var e=new qt({data:Ve});e.createCategorized().then(function(){s.append(e.root)})};const Mn=()=>{var s=new $t("mw-le-modules-dialog"),e=s.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var t=mw.$(this).attr("data-module-name"),i={class:this.className};t==="layout"&&(i.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,t,i,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),Ve?Ct(e):(mw.spinner({element:e.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(t){return t.json()}).then(function(t){Ve=t,Ct(e),mw.spinner({element:e.get(0),decorate:!0}).remove()}))},Tn={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return Mn()},insertLayout:function(){return An()}},On={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await de.get(route("api.module.list")+"?layout_type=module").then(s=>{this.modulesListData=s.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(s){if(this.modulesSkinsData[s])return this.modulesSkinsData[s];if(await de.get(route("api.module.getSkins")+"?module="+s).then(e=>{this.modulesSkinsData[s]=e.data}),this.modulesSkinsData[s])return this.modulesSkinsData[s]}},Dn={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await de.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(s=>{this.layoutsListData=s.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var s="layouts";if(this.layoutSkinsData[s])return this.layoutSkinsData[s];if(await de.get(route("api.module.getSkins")+"?module="+s).then(e=>{this.layoutSkinsData[s]=e.data}),this.layoutSkinsData[s])return this.layoutSkinsData[s]}};class zn extends he{constructor(){super()}onRegister(){}}class Bn extends he{selectIcon(e){var t=$(e)[0];mw.iconLoader().init();var i=mw.iconPicker({iconOptions:!1});i.target=document.createElement("i"),i.on("select",function(n){n.render(),t.value=i.target.outerHTML;var r=new Event("input");t.dispatchEvent(r),i.dialog("hide")}),i.dialog()}removeIcon(e){var t=$(e)[0];t.value="";var i=new Event("input");t.dispatchEvent(i)}}class In extends he{selectLink(e){var t=new(mw.top()).LinkEditor({mode:"dialog",controllers:[{type:"url",config:{text:!1,target:!1}},{type:"page",config:{text:!1,target:!1}},{type:"post",config:{text:!1,target:!1}},{type:"file",config:{text:!1,target:!1}},{type:"email",config:{text:!1,target:!1}},{type:"layout",config:{text:!1,target:!1}}]});mw.$(e)&&t.setValue({url:mw.$(e).val()||""}),t.promise().then(function(i){if(i){var n=i.url,r=i.url,o,a;i.data&&i.data.id&&(i.data.type&&i.data.type==="category"?o=i.data.id:(i.data.type&&i.data.type==="page"||i.data.content_type)&&(a=i.data.id)),r||(r=n),alert(r+" "+n+" "+o+" "+a)}})}}mw.app=new Wt;mw.app.register("commands",Tn);mw.app.register("modules",On);mw.app.register("layouts",Dn);mw.app.register("keyboard",zn);mw.app.register("iconPicker",Bn);mw.app.register("linkPicker",In);export{Pn as E,_n as L,he as M,de as a,Vn as l};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
