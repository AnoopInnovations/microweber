var Ac=Object.defineProperty;var Tc=(e,t,s)=>t in e?Ac(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var yt=(e,t,s)=>(Tc(e,typeof t!="symbol"?t+"":t,s),s),Ln=(e,t,s)=>{if(!t.has(e))throw TypeError("Cannot "+s)};var J=(e,t,s)=>(Ln(e,t,"read from private field"),s?s.call(e):t.get(e)),dt=(e,t,s)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,s)},En=(e,t,s,i)=>(Ln(e,t,"write to private field"),i?i.call(e,s):t.set(e,s),s);var kt=(e,t,s)=>(Ln(e,t,"access private method"),s);var gt;class ls{constructor(){dt(this,gt,{})}on(t,s){J(this,gt)[t]?J(this,gt)[t].push(s):J(this,gt)[t]=[s]}off(t,s){if(J(this,gt)[t])if(typeof s=="function"){const i=J(this,gt)[t].indexOf(s);if(i===-1)return;J(this,gt)[t].splice(i,1)}else J(this,gt)[t]=[]}dispatch(t,s){J(this,gt)[t]&&J(this,gt)[t].forEach(function(i){i.call(this,s)})}emit(t,s){return this.dispatch(t,s)}}gt=new WeakMap;var vt,Hs,Mi;class Nc extends ls{constructor(){super(...arguments);dt(this,Hs);dt(this,vt,{})}call(s,i){for(let n in J(this,vt))J(this,vt)[n][s]&&kt(this,Hs,Mi).call(this,s,J(this,vt)[n],i)}get(s){return J(this,vt)[s]}getModules(){return J(this,vt)}register(s,i){let n;typeof i=="function"?n=new i:n=i,J(this,vt)[s]=n,this[s]=n,kt(this,Hs,Mi).call(this,"onRegister",n),this.dispatch("register")}remove(s){let i;if(typeof s=="string"&&(i=s,s=this.get(s)),!i){for(let n in J(this,vt))if(J(this,vt)[n]===s){i=n;break}}delete J(this,vt)[i],delete this[i],kt(this,Hs,Mi).call(this,"onDestroy",s),this.dispatch("remove")}}vt=new WeakMap,Hs=new WeakSet,Mi=function(s,i,n){!s||!i||!i[s]||(s=i[s],s(n))};mw.require("editor.js");mw.require("css_parser.js");const Pc=function(){var e=document.querySelector("#mw-live-edit-editor"),t=function(){var c={};this.on=function(d,g){c[d]?c[d].push(g):c[d]=[g]},this.dispatch=function(d,g){c[d]&&c[d].forEach(function(p){p.call(this,g)})},this.provide=function(d){this.dispatch("change",d.map(function(g){return{label:g,value:g}}))}},s=new t;window.fontFamilyProvider=s;const i=mw.app.get("canvas").getFrame();i.contentWindow.fontFamilyProvider=s;const n=mw.Editor({document:i.contentWindow.document,executionDocument:i.contentWindow.document,actionWindow:i.contentWindow,element:e,mode:"document",regions:".edit",skin:"le2",editMode:"liveedit",scopeColor:"white",controls:[[{group:{icon:"mdi mdi-format-title",controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],smallEditorPositionX:"center",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:s});var o=document.getElementById("toolbar-undo"),r=document.getElementById("toolbar-redo");n.state.on("record",function(){r.disabled=!n.state.hasPrev,o.disabled=!n.state.hasNext}),n.state.on("change",function(){r.disabled=!n.state.hasPrev,o.disabled=!n.state.hasNext}),o&&o.addEventListener("click",function(){n.state.undo()}),r&&r.addEventListener("click",function(){n.state.redo()}),e.innerHTML="",e.appendChild(n.wrapper);var l=n.storage.get(n.settings.id+"-small-editor-pinned");typeof l>"u"&&typeof n.smallEditorApi<"u"&&n.smallEditorApi.pin(),mw.app.register("richTextEditor",n),mw.app.register("richTextEditorAPI",n.api)};var qe;class $c extends ls{constructor(){super();dt(this,qe,null)}go(s){J(this,qe)&&J(this,qe).ownerDocument&&J(this,qe).contentWindow&&(J(this,qe).src=s)}refresh(){J(this,qe)&&J(this,qe).ownerDocument&&J(this,qe).contentWindow&&J(this,qe).contentWindow.location.reload()}getFrame(){if(J(this,qe)&&J(this,qe).ownerDocument)return J(this,qe)}getWindow(){if(J(this,qe)&&J(this,qe).ownerDocument)return J(this,qe).contentWindow}getDocument(){if(J(this,qe)&&J(this,qe).ownerDocument)return J(this,qe).contentWindow.document}mount(s){this.dispatch("liveEditBeforeLoaded"),mw.spinner({element:s,size:52,decorate:!0});const i=document.createElement("iframe");i.src=`${mw.settings.site_url}?editmode=n`,i.frameBorder=0,i.id="live-editor-frame",i.referrerPolicy="no-referrer",En(this,qe,i),s.innerHTML="",s.appendChild(i),i.addEventListener("load",n=>{this.dispatch("liveEditCanvasLoaded"),mw.spinner({element:s}).remove()})}}qe=new WeakMap;function Oc(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Zn={},Hc={get exports(){return Zn},set exports(e){Zn=e}},Ii={},Rc={get exports(){return Ii},set exports(e){Ii=e}},Pl=function(t,s){return function(){for(var n=new Array(arguments.length),o=0;o<n.length;o++)n[o]=arguments[o];return t.apply(s,n)}},Ic=Pl,Cs=Object.prototype.toString;function _o(e){return Cs.call(e)==="[object Array]"}function Gn(e){return typeof e>"u"}function Dc(e){return e!==null&&!Gn(e)&&e.constructor!==null&&!Gn(e.constructor)&&typeof e.constructor.isBuffer=="function"&&e.constructor.isBuffer(e)}function Fc(e){return Cs.call(e)==="[object ArrayBuffer]"}function Bc(e){return typeof FormData<"u"&&e instanceof FormData}function zc(e){var t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&e.buffer instanceof ArrayBuffer,t}function jc(e){return typeof e=="string"}function Vc(e){return typeof e=="number"}function $l(e){return e!==null&&typeof e=="object"}function Ai(e){if(Cs.call(e)!=="[object Object]")return!1;var t=Object.getPrototypeOf(e);return t===null||t===Object.prototype}function Uc(e){return Cs.call(e)==="[object Date]"}function qc(e){return Cs.call(e)==="[object File]"}function Wc(e){return Cs.call(e)==="[object Blob]"}function Ol(e){return Cs.call(e)==="[object Function]"}function Kc(e){return $l(e)&&Ol(e.pipe)}function Yc(e){return typeof URLSearchParams<"u"&&e instanceof URLSearchParams}function Xc(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function Jc(){return typeof navigator<"u"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window<"u"&&typeof document<"u"}function xo(e,t){if(!(e===null||typeof e>"u"))if(typeof e!="object"&&(e=[e]),_o(e))for(var s=0,i=e.length;s<i;s++)t.call(null,e[s],s,e);else for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.call(null,e[n],n,e)}function Qn(){var e={};function t(n,o){Ai(e[o])&&Ai(n)?e[o]=Qn(e[o],n):Ai(n)?e[o]=Qn({},n):_o(n)?e[o]=n.slice():e[o]=n}for(var s=0,i=arguments.length;s<i;s++)xo(arguments[s],t);return e}function Zc(e,t,s){return xo(t,function(n,o){s&&typeof n=="function"?e[o]=Ic(n,s):e[o]=n}),e}function Gc(e){return e.charCodeAt(0)===65279&&(e=e.slice(1)),e}var mt={isArray:_o,isArrayBuffer:Fc,isBuffer:Dc,isFormData:Bc,isArrayBufferView:zc,isString:jc,isNumber:Vc,isObject:$l,isPlainObject:Ai,isUndefined:Gn,isDate:Uc,isFile:qc,isBlob:Wc,isFunction:Ol,isStream:Kc,isURLSearchParams:Yc,isStandardBrowserEnv:Jc,forEach:xo,merge:Qn,extend:Zc,trim:Xc,stripBOM:Gc},Es=mt;function yr(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var Hl=function(t,s,i){if(!s)return t;var n;if(i)n=i(s);else if(Es.isURLSearchParams(s))n=s.toString();else{var o=[];Es.forEach(s,function(c,d){c===null||typeof c>"u"||(Es.isArray(c)?d=d+"[]":c=[c],Es.forEach(c,function(p){Es.isDate(p)?p=p.toISOString():Es.isObject(p)&&(p=JSON.stringify(p)),o.push(yr(d)+"="+yr(p))}))}),n=o.join("&")}if(n){var r=t.indexOf("#");r!==-1&&(t=t.slice(0,r)),t+=(t.indexOf("?")===-1?"?":"&")+n}return t},Qc=mt;function Ki(){this.handlers=[]}Ki.prototype.use=function(t,s,i){return this.handlers.push({fulfilled:t,rejected:s,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1};Ki.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)};Ki.prototype.forEach=function(t){Qc.forEach(this.handlers,function(i){i!==null&&t(i)})};var eu=Ki,tu=mt,su=function(t,s){tu.forEach(t,function(n,o){o!==s&&o.toUpperCase()===s.toUpperCase()&&(t[s]=n,delete t[o])})},Rl=function(t,s,i,n,o){return t.config=s,i&&(t.code=i),t.request=n,t.response=o,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t},Mn,kr;function Il(){if(kr)return Mn;kr=1;var e=Rl;return Mn=function(s,i,n,o,r){var l=new Error(s);return e(l,i,n,o,r)},Mn}var An,_r;function iu(){if(_r)return An;_r=1;var e=Il();return An=function(s,i,n){var o=n.config.validateStatus;!n.status||!o||o(n.status)?s(n):i(e("Request failed with status code "+n.status,n.config,null,n.request,n))},An}var Tn,xr;function nu(){if(xr)return Tn;xr=1;var e=mt;return Tn=e.isStandardBrowserEnv()?function(){return{write:function(i,n,o,r,l,c){var d=[];d.push(i+"="+encodeURIComponent(n)),e.isNumber(o)&&d.push("expires="+new Date(o).toGMTString()),e.isString(r)&&d.push("path="+r),e.isString(l)&&d.push("domain="+l),c===!0&&d.push("secure"),document.cookie=d.join("; ")},read:function(i){var n=document.cookie.match(new RegExp("(^|;\\s*)("+i+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(i){this.write(i,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}(),Tn}var Nn,Cr;function ou(){return Cr||(Cr=1,Nn=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}),Nn}var Pn,Sr;function ru(){return Sr||(Sr=1,Pn=function(t,s){return s?t.replace(/\/+$/,"")+"/"+s.replace(/^\/+/,""):t}),Pn}var $n,Lr;function lu(){if(Lr)return $n;Lr=1;var e=ou(),t=ru();return $n=function(i,n){return i&&!e(n)?t(i,n):n},$n}var On,Er;function au(){if(Er)return On;Er=1;var e=mt,t=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];return On=function(i){var n={},o,r,l;return i&&e.forEach(i.split(`
`),function(d){if(l=d.indexOf(":"),o=e.trim(d.substr(0,l)).toLowerCase(),r=e.trim(d.substr(l+1)),o){if(n[o]&&t.indexOf(o)>=0)return;o==="set-cookie"?n[o]=(n[o]?n[o]:[]).concat([r]):n[o]=n[o]?n[o]+", "+r:r}}),n},On}var Hn,Mr;function cu(){if(Mr)return Hn;Mr=1;var e=mt;return Hn=e.isStandardBrowserEnv()?function(){var s=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a"),n;function o(r){var l=r;return s&&(i.setAttribute("href",l),l=i.href),i.setAttribute("href",l),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:i.pathname.charAt(0)==="/"?i.pathname:"/"+i.pathname}}return n=o(window.location.href),function(l){var c=e.isString(l)?o(l):l;return c.protocol===n.protocol&&c.host===n.host}}():function(){return function(){return!0}}(),Hn}var Rn,Ar;function Tr(){if(Ar)return Rn;Ar=1;var e=mt,t=iu(),s=nu(),i=Hl,n=lu(),o=au(),r=cu(),l=Il();return Rn=function(d){return new Promise(function(p,b){var y=d.data,_=d.headers,C=d.responseType;e.isFormData(y)&&delete _["Content-Type"];var x=new XMLHttpRequest;if(d.auth){var R=d.auth.username||"",Z=d.auth.password?unescape(encodeURIComponent(d.auth.password)):"";_.Authorization="Basic "+btoa(R+":"+Z)}var K=n(d.baseURL,d.url);x.open(d.method.toUpperCase(),i(K,d.params,d.paramsSerializer),!0),x.timeout=d.timeout;function te(){if(x){var be="getAllResponseHeaders"in x?o(x.getAllResponseHeaders()):null,ue=!C||C==="text"||C==="json"?x.responseText:x.response,V={data:ue,status:x.status,statusText:x.statusText,headers:be,config:d,request:x};t(p,b,V),x=null}}if("onloadend"in x?x.onloadend=te:x.onreadystatechange=function(){!x||x.readyState!==4||x.status===0&&!(x.responseURL&&x.responseURL.indexOf("file:")===0)||setTimeout(te)},x.onabort=function(){x&&(b(l("Request aborted",d,"ECONNABORTED",x)),x=null)},x.onerror=function(){b(l("Network Error",d,null,x)),x=null},x.ontimeout=function(){var ue="timeout of "+d.timeout+"ms exceeded";d.timeoutErrorMessage&&(ue=d.timeoutErrorMessage),b(l(ue,d,d.transitional&&d.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",x)),x=null},e.isStandardBrowserEnv()){var ne=(d.withCredentials||r(K))&&d.xsrfCookieName?s.read(d.xsrfCookieName):void 0;ne&&(_[d.xsrfHeaderName]=ne)}"setRequestHeader"in x&&e.forEach(_,function(ue,V){typeof y>"u"&&V.toLowerCase()==="content-type"?delete _[V]:x.setRequestHeader(V,ue)}),e.isUndefined(d.withCredentials)||(x.withCredentials=!!d.withCredentials),C&&C!=="json"&&(x.responseType=d.responseType),typeof d.onDownloadProgress=="function"&&x.addEventListener("progress",d.onDownloadProgress),typeof d.onUploadProgress=="function"&&x.upload&&x.upload.addEventListener("progress",d.onUploadProgress),d.cancelToken&&d.cancelToken.promise.then(function(ue){x&&(x.abort(),b(ue),x=null)}),y||(y=null),x.send(y)})},Rn}var tt=mt,Nr=su,uu=Rl,du={"Content-Type":"application/x-www-form-urlencoded"};function Pr(e,t){!tt.isUndefined(e)&&tt.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}function hu(){var e;return(typeof XMLHttpRequest<"u"||typeof process<"u"&&Object.prototype.toString.call(process)==="[object process]")&&(e=Tr()),e}function fu(e,t,s){if(tt.isString(e))try{return(t||JSON.parse)(e),tt.trim(e)}catch(i){if(i.name!=="SyntaxError")throw i}return(s||JSON.stringify)(e)}var Yi={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:hu(),transformRequest:[function(t,s){return Nr(s,"Accept"),Nr(s,"Content-Type"),tt.isFormData(t)||tt.isArrayBuffer(t)||tt.isBuffer(t)||tt.isStream(t)||tt.isFile(t)||tt.isBlob(t)?t:tt.isArrayBufferView(t)?t.buffer:tt.isURLSearchParams(t)?(Pr(s,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):tt.isObject(t)||s&&s["Content-Type"]==="application/json"?(Pr(s,"application/json"),fu(t)):t}],transformResponse:[function(t){var s=this.transitional,i=s&&s.silentJSONParsing,n=s&&s.forcedJSONParsing,o=!i&&this.responseType==="json";if(o||n&&tt.isString(t)&&t.length)try{return JSON.parse(t)}catch(r){if(o)throw r.name==="SyntaxError"?uu(r,this,"E_JSON_PARSE"):r}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300}};Yi.headers={common:{Accept:"application/json, text/plain, */*"}};tt.forEach(["delete","get","head"],function(t){Yi.headers[t]={}});tt.forEach(["post","put","patch"],function(t){Yi.headers[t]=tt.merge(du)});var Co=Yi,mu=mt,pu=Co,gu=function(t,s,i){var n=this||pu;return mu.forEach(i,function(r){t=r.call(n,t,s)}),t},In,$r;function Dl(){return $r||($r=1,In=function(t){return!!(t&&t.__CANCEL__)}),In}var Or=mt,Dn=gu,vu=Dl(),bu=Co;function Fn(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var wu=function(t){Fn(t),t.headers=t.headers||{},t.data=Dn.call(t,t.data,t.headers,t.transformRequest),t.headers=Or.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),Or.forEach(["delete","get","head","post","put","patch","common"],function(n){delete t.headers[n]});var s=t.adapter||bu.adapter;return s(t).then(function(n){return Fn(t),n.data=Dn.call(t,n.data,n.headers,t.transformResponse),n},function(n){return vu(n)||(Fn(t),n&&n.response&&(n.response.data=Dn.call(t,n.response.data,n.response.headers,t.transformResponse))),Promise.reject(n)})},ot=mt,Fl=function(t,s){s=s||{};var i={},n=["url","method","data"],o=["headers","auth","proxy","params"],r=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],l=["validateStatus"];function c(b,y){return ot.isPlainObject(b)&&ot.isPlainObject(y)?ot.merge(b,y):ot.isPlainObject(y)?ot.merge({},y):ot.isArray(y)?y.slice():y}function d(b){ot.isUndefined(s[b])?ot.isUndefined(t[b])||(i[b]=c(void 0,t[b])):i[b]=c(t[b],s[b])}ot.forEach(n,function(y){ot.isUndefined(s[y])||(i[y]=c(void 0,s[y]))}),ot.forEach(o,d),ot.forEach(r,function(y){ot.isUndefined(s[y])?ot.isUndefined(t[y])||(i[y]=c(void 0,t[y])):i[y]=c(void 0,s[y])}),ot.forEach(l,function(y){y in s?i[y]=c(t[y],s[y]):y in t&&(i[y]=c(void 0,t[y]))});var g=n.concat(o).concat(r).concat(l),p=Object.keys(t).concat(Object.keys(s)).filter(function(y){return g.indexOf(y)===-1});return ot.forEach(p,d),i};const yu="axios",ku="0.21.4",_u="Promise based HTTP client for the browser and node.js",xu="index.js",Cu={test:"grunt test",start:"node ./sandbox/server.js",build:"NODE_ENV=production grunt build",preversion:"npm test",version:"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",postversion:"git push && git push --tags",examples:"node ./examples/server.js",coveralls:"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",fix:"eslint --fix lib/**/*.js"},Su={type:"git",url:"https://github.com/axios/axios.git"},Lu=["xhr","http","ajax","promise","node"],Eu="Matt Zabriskie",Mu="MIT",Au={url:"https://github.com/axios/axios/issues"},Tu="https://axios-http.com",Nu={coveralls:"^3.0.0","es6-promise":"^4.2.4",grunt:"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1",karma:"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2",minimist:"^1.2.0",mocha:"^8.2.1",sinon:"^4.5.0","terser-webpack-plugin":"^4.2.3",typescript:"^4.0.5","url-search-params":"^0.10.0",webpack:"^4.44.2","webpack-dev-server":"^3.11.0"},Pu={"./lib/adapters/http.js":"./lib/adapters/xhr.js"},$u="dist/axios.min.js",Ou="dist/axios.min.js",Hu="./index.d.ts",Ru={"follow-redirects":"^1.14.0"},Iu=[{path:"./dist/axios.min.js",threshold:"5kB"}],Du={name:yu,version:ku,description:_u,main:xu,scripts:Cu,repository:Su,keywords:Lu,author:Eu,license:Mu,bugs:Au,homepage:Tu,devDependencies:Nu,browser:Pu,jsdelivr:$u,unpkg:Ou,typings:Hu,dependencies:Ru,bundlesize:Iu};var Bl=Du,So={};["object","boolean","number","function","string","symbol"].forEach(function(e,t){So[e]=function(i){return typeof i===e||"a"+(t<1?"n ":" ")+e}});var Hr={},Fu=Bl.version.split(".");function zl(e,t){for(var s=t?t.split("."):Fu,i=e.split("."),n=0;n<3;n++){if(s[n]>i[n])return!0;if(s[n]<i[n])return!1}return!1}So.transitional=function(t,s,i){var n=s&&zl(s);function o(r,l){return"[Axios v"+Bl.version+"] Transitional option '"+r+"'"+l+(i?". "+i:"")}return function(r,l,c){if(t===!1)throw new Error(o(l," has been removed in "+s));return n&&!Hr[l]&&(Hr[l]=!0,console.warn(o(l," has been deprecated since v"+s+" and will be removed in the near future"))),t?t(r,l,c):!0}};function Bu(e,t,s){if(typeof e!="object")throw new TypeError("options must be an object");for(var i=Object.keys(e),n=i.length;n-- >0;){var o=i[n],r=t[o];if(r){var l=e[o],c=l===void 0||r(l,o,e);if(c!==!0)throw new TypeError("option "+o+" must be "+c);continue}if(s!==!0)throw Error("Unknown option "+o)}}var zu={isOlderVersion:zl,assertOptions:Bu,validators:So},jl=mt,ju=Hl,Rr=eu,Ir=wu,Xi=Fl,Vl=zu,Ms=Vl.validators;function hi(e){this.defaults=e,this.interceptors={request:new Rr,response:new Rr}}hi.prototype.request=function(t){typeof t=="string"?(t=arguments[1]||{},t.url=arguments[0]):t=t||{},t=Xi(this.defaults,t),t.method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var s=t.transitional;s!==void 0&&Vl.assertOptions(s,{silentJSONParsing:Ms.transitional(Ms.boolean,"1.0.0"),forcedJSONParsing:Ms.transitional(Ms.boolean,"1.0.0"),clarifyTimeoutError:Ms.transitional(Ms.boolean,"1.0.0")},!1);var i=[],n=!0;this.interceptors.request.forEach(function(b){typeof b.runWhen=="function"&&b.runWhen(t)===!1||(n=n&&b.synchronous,i.unshift(b.fulfilled,b.rejected))});var o=[];this.interceptors.response.forEach(function(b){o.push(b.fulfilled,b.rejected)});var r;if(!n){var l=[Ir,void 0];for(Array.prototype.unshift.apply(l,i),l=l.concat(o),r=Promise.resolve(t);l.length;)r=r.then(l.shift(),l.shift());return r}for(var c=t;i.length;){var d=i.shift(),g=i.shift();try{c=d(c)}catch(p){g(p);break}}try{r=Ir(c)}catch(p){return Promise.reject(p)}for(;o.length;)r=r.then(o.shift(),o.shift());return r};hi.prototype.getUri=function(t){return t=Xi(this.defaults,t),ju(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")};jl.forEach(["delete","get","head","options"],function(t){hi.prototype[t]=function(s,i){return this.request(Xi(i||{},{method:t,url:s,data:(i||{}).data}))}});jl.forEach(["post","put","patch"],function(t){hi.prototype[t]=function(s,i,n){return this.request(Xi(n||{},{method:t,url:s,data:i}))}});var Vu=hi,Bn,Dr;function Ul(){if(Dr)return Bn;Dr=1;function e(t){this.message=t}return e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,Bn=e,Bn}var zn,Fr;function Uu(){if(Fr)return zn;Fr=1;var e=Ul();function t(s){if(typeof s!="function")throw new TypeError("executor must be a function.");var i;this.promise=new Promise(function(r){i=r});var n=this;s(function(r){n.reason||(n.reason=new e(r),i(n.reason))})}return t.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},t.source=function(){var i,n=new t(function(r){i=r});return{token:n,cancel:i}},zn=t,zn}var jn,Br;function qu(){return Br||(Br=1,jn=function(t){return function(i){return t.apply(null,i)}}),jn}var Vn,zr;function Wu(){return zr||(zr=1,Vn=function(t){return typeof t=="object"&&t.isAxiosError===!0}),Vn}var jr=mt,Ku=Pl,Ti=Vu,Yu=Fl,Xu=Co;function ql(e){var t=new Ti(e),s=Ku(Ti.prototype.request,t);return jr.extend(s,Ti.prototype,t),jr.extend(s,t),s}var Mt=ql(Xu);Mt.Axios=Ti;Mt.create=function(t){return ql(Yu(Mt.defaults,t))};Mt.Cancel=Ul();Mt.CancelToken=Uu();Mt.isCancel=Dl();Mt.all=function(t){return Promise.all(t)};Mt.spread=qu();Mt.isAxiosError=Wu();Rc.exports=Mt;Ii.default=Mt;(function(e){e.exports=Ii})(Hc);const Rs=Oc(Zn);class Ht{static extend(){const t={};let s=!1,i=0;const n=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(s=arguments[0],i++);const o=function(r){for(const l in r)Object.prototype.hasOwnProperty.call(r,l)&&(s&&Object.prototype.toString.call(r[l])==="[object Object]"?t[l]=Ht.extend(!0,t[l],r[l]):t[l]=r[l])};for(;i<n;i++){const r=arguments[i];o(r)}return t}}var gs=function(e,t){var s=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(n,o){this.nodes=(o||document).querySelectorAll(n)},this.each=function(n){if(this.nodes)for(var o=0;o<this.nodes.length;o++)n.call(this.nodes[o],o);else this.node&&n.call(this.node,0);return this},this.encapsulate=function(){};var i=function(n,o){n&&(Array.isArray(n)?n.forEach(function(r){i(r,o)}):n instanceof gs?o.append(n):typeof n=="object"&&o.append(new gs(n)))};this.create=function(){var n=this.document.createElement(this.settings.tag);if(this.node=n,this.settings.encapsulate===!0){var o=this.settings.encapsulate===!0?"open":this.settings.encapsulate;n.attachShadow({mode:o})}this.nodes=[n],this.settings.content&&i(this.settings.content,this)},this._specialProps=function(n,o){if(n==="tooltip")return this.node.dataset[n]=o,!0},this.setProps=function(){for(var n in this.settings.props)if(n==="dataset")for(var o in this.settings.props[n])this.node.dataset[o]=this.settings.props[n][o];else if(n==="style")for(var r in this.settings.props[n])this.node.style[r]=this.settings.props[n][r];else{var l=this.settings.props[n];this._specialProps(n,l)||(this.node[n]=l)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(n,o){return typeof o=="number"&&this.__.cssNumber.indexOf(n)===-1&&(o=o+"px"),o},this.css=function(n,o){if(typeof n=="string")if(typeof o<"u"){var r=this._normalizeCSSValue(n,o);this.each(function(){this.style[n]=r})}else return this.document.defaultView.getComputedStyle(this.node)[n];if(typeof n=="object")for(var l in n)this.each(function(){this.style[l]=s._normalizeCSSValue(l,n[l])});return this},this.dataset=function(n,o){return typeof o>"u"?this._active()[n]:(this.each(function(){this.dataset[n]=o}),this)},this.attr=function(n,o){return typeof o>"u"?this._active()[n]:(this.each(function(){this.setAttribute(n,o)}),this)},this.val=function(n){return typeof n>"u"?this._active().value:(this.each(function(){this.value=n}),this)},this.prop=function(n,o){var r=this._active();return typeof o>"u"?r[n]:(r[n]!==o&&(r[n]=o,this.trigger("propChange",[n,o])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(n){var o=mw.element("#r"+new Date().getTime());return this.each(function(){for(var r=this.querySelectorAll(n),l=0;l<r.length;l++)o.nodes.indexOf(r[l])===-1&&o.nodes.push(r[l])}),o},this.addClass=function(n){return n=n.trim().split(" "),this.each(function(){var o=this;n.forEach(function(r){o.classList.add(r)})})},this.toggleClass=function(n){return this.each(function(){this.classList.toggle(n.trim())})},this.removeClass=function(n){var o=Array.isArray(n);if(o)return this.each(function(){for(var l=0,c=n.length;l<c;l++)this.classList.remove(n[l])});n=n.trim();var r=n.split(" ");return r.length>1?this.removeClass(r):this.each(function(){this.classList.remove(n)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(n){return typeof n>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=n})},this.text=function(n,o){if(typeof n>"u")return this.node.textContent;typeof o>"u"&&(o=!0),o&&(n=this.document.createRange().createContextualFragment(n).textContent),this.node.innerHTML=n},this._asdom=function(n){return typeof n=="string"?this.document.createRange().createContextualFragment(n):n.node?n.node:n.nodes?n.nodes[n.nodes.length-1]:n},this.offset=function(){var n=this._active(),o=this.getWindow(),r=n.getBoundingClientRect();return r.offsetTop=r.top+o.pageYOffset,r.offsetBottom=r.bottom+o.pageYOffset,r.offsetLeft=r.left+o.pageXOffset,r},this.width=function(n){return n?this.css("width",n):this._active().offsetWidth},this.height=function(n){return n?this.css("height",n):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(n){n=n||"*";var o=this._active(),r=o.parentElement,l=mw.element();for(l.nodes=[];r;)r.matches(n)&&l.nodes.push(r),r=r.parentElement;return l},this.append=function(n){return n&&this.each(function(){this.append(s._asdom(n))}),this},this.before=function(n){return n&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(s._asdom(n),this)}),this},this.after=function(n){n&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(s._asdom(n),this.nextSibling)})},this.prepend=function(n){return n&&this.each(function(){this.prepend(s._asdom(n))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(n){this._disabled=n,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(n,o){return o=o||{},this.each(function(){this.dispatchEvent(new CustomEvent(n,{detail:o,cancelable:!0,bubbles:!0})),s._on[n]&&s._on[n].forEach(function(r){r.call(this,n,o)})}),this},this.get=function(n){return this.nodes[n]},this.wrap=function(n){var o=Lo(n);this.before(o),o.append(this)},this._on={},this.on=function(n,o){return n=n.trim().split(" "),n.forEach(function(r){s._on[r]||(s._on[r]=[]),s._on[r].push(o),s.each(function(){this.addEventListener(r,o,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=t||document,this.root instanceof gs&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,e=e||{},e.nodeName&&e.nodeType)this.nodes.push(e),this.node=e,e={},this._asElement=!0;else if(typeof e=="string")if(e.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(e)),e={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof gs)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new gs(this.settings.content));else{var n=this._asdom(e);this.nodes=[].slice.call(n.children),this._asElement=!0}e=e||{};var o={tag:"div",props:{}};this.settings=Ht.extend({},o,e),!this._asElement&&(this.create(),this.setProps())},this.init()};const Lo=function(e,t){return new gs(e,t)};Lo.module=function(e,t){gs.prototype[e]=t};const eo="mw-le-element";window.customElements&&!customElements.get(eo)&&customElements.define(eo,class extends HTMLElement{constructor(){super()}});const ge=(e,t)=>(e instanceof Object&&!e.nodeType&&(e=Ht.extend({},e||{},{tag:e.tag||eo})),Lo(e,t)),Vr=(e=null,t,s={},i)=>{if(!(!e||!t))return new Promise(async n=>{await e.ownerDocument.defaultView.mw.module.insert(e,t,s,"top",mw.liveEditState),n()})};class Ju extends ls{constructor(){super(),mw.app.get("liveEdit").moduleHandle.on("targetChange",s=>{this.dispatch("targetChange",s)})}}class Zu extends ls{constructor(){super(),mw.app.get("liveEdit").elementHandle.on("targetChange",s=>{this.dispatch("targetChange",s)})}}class Gu extends ls{constructor(){super(),mw.app.get("liveEdit").layoutHandleContent.on("targetChange",s=>{this.dispatch("targetChange",s)})}}class Qu extends ls{constructor(){super(...arguments);yt(this,"handle",{module:new Ju,element:new Zu,layout:new Gu})}insertModule(s,i){const n=mw.app.get("liveEdit").handles.get("module").getTarget();return Vr(n,s,i)}insertLayout(s){const i=mw.app.get("liveEdit").handles.get("layout").getTarget();return Vr(i,"layouts",s)}}let Xs;const bi=document.documentElement;bi.matches?Xs="matches":bi.matchesSelector?Xs="matchesSelector":bi.mozMatchesSelector?Xs="mozMatchesSelector":bi.webkitMatchesSelector&&(Xs="webkitMatchesSelector");class Ut{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(t,s){return t[Xs](s)}static isBlockLevel(t){if(!t||t.nodeType===3)return!1;var s=t.nodeName;if(typeof this._isBlockCache[s]<"u")return this._isBlockCache[s];var i=document.createElement(s);return this.fragment().appendChild(i),this._isBlockCache[s]=getComputedStyle(i).display==="block",this.fragment().removeChild(i),this._isBlockCache[s]}static firstBlockLevel(t){for(;t&&t.classList;){if(this.isBlockLevel(t))return t;t=t.parentNode}}static firstWithBackgroundImage(t){if(!t)return null;for(;t&&t.nodeName!=="BODY";){if(t.style.backgroundImage)return t;t=t.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(t,s){for(;t&&t.nodeName!=="BODY";){let i=0,n=s.length;for(;i<n;i++)if(t.classList.contains(s[i]))return!0;t=t.parentElement}return!1}static hasParentsWithClass(t,s){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.classList.contains(s))return!0;i=i.parentNode}return!1}}static hasParentWithId(t,s){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.id===s)return!0;i=i.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(t,s){for(;t&&t.nodeName!=="BODY";){let i=0,n=s.length;for(;i<n;i++)if(t.classList.contains(s[i]))return t;t=t.parentElement}return null}static firstParentOrCurrentWithTag(t,s){if(!(!t||!s)){s=typeof s!="string"?s:[s];for(var i=t;i&&i.nodeName!=="BODY";){if(s.indexOf(i.nodeName.toLowerCase())!==-1)return i;i=i.parentNode}return!1}}static index(t,s,i){i=i||t.tagName.toLowerCase(),s=s||t.parentNode;var n;s.constructor===[].constructor?n=s:n=s.querySelectorAll(i);for(var o=0,r=n.length;o<r;o++)if(t===n[o])return o}static firstParentOrCurrentWithClass(t,s){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.classList.contains(s))return i;i=i.parentNode}return!1}static firstParentOrCurrent(t,s){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.matches(s))return i;i=i.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(t,s){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(!i)return!1;if(this.hasAnyOfClasses(i,s))return i;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(t,s){let i=t;for(;i&&i.nodeName!=="BODY";){const n=i.classList.contains(s[0]),o=i.classList.contains(s[1]);if(n&&o)return!1;if(n)return!0;if(o)return!1;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,s){let i=t;for(;i&&i.nodeName!=="BODY";){const n=i.classList.contains(s[0]),o=i.classList.contains(s[1]);if(n&&o)return!1;if(n)return!0;if(o)return!1;i=i.parentNode}return!0}static hasAnyOfClasses(t,s){if(!t)return;let i=0,n=s.length;for(;i<n;i++)if(t.classList.contains(s[i]))return!0;return!1}static offset(t){if(t){var s=t.getBoundingClientRect(),i={top:s.top,left:s.left,width:s.width,height:s.height,bottom:s.bottom,right:s.right};return i.top+=t.ownerDocument.defaultView.scrollY,i.bottom+=t.ownerDocument.defaultView.scrollY,i.left+=t.ownerDocument.defaultView.scrollX,i.right+=t.ownerDocument.defaultView.scrollX,i}}static parentsOrder(t,s){for(var i=[],n={},o=s.length,r=0,l=-1;r<o;r++)n[s[r]]=-1;if(!t)return n;for(var c=t.parentNode;c&&c.nodeName!=="BODY";){for(l++,r=0;r<o;r++)c.classList.contains(s[r])&&i.indexOf(s[r])===-1&&(n[s[r]]=l,i.push(s[r]));c=c.parentNode}return n}}yt(Ut,"_isBlockCache",{}),yt(Ut,"_fragment");class ed{constructor(t){this.settings=t,this.tools=Ut}isRow(t){return t.classList.contains(this.settings.rowClass)}isModule(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type!=="layouts"}isLayout(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts"}isInLayout(t){if(!t)return!1;for(t=t.parentNode;t&&t!==this.settings.document.body;){if(t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts")return!0;t=t.parentNode}}isElement(t){return t.classList.contains(this.settings.elementClass)}isEmptyElement(t){return t.classList.contains(this.settings.emptyElementClass)}isEdit(t){return t.classList.contains(this.settings.editClass)}isInEdit(t){var s=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t.parentNode,s)}isEditOrInEdit(t){return this.isEdit(t)||this.isInEdit(t)}isPlainText(t){return t.classList.contains(this.settings.plainElementClass)}getType(t){if(this.isEdit(t))return"edit";if(this.isElement(t))return"element";if(this.isModule(t))return"module";if(this.isLayout(t))return"layout"}}class Wl extends ed{constructor(t){super(t),this.settings=t,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM"],this.init()}isConfigurable(t){return this.isElement(t)||this.isModule(t)||this.isRow(t)}isEditableLayout(t){return this.this.isLayout(t)&&this.isInEdit(t)}canMoveModule(t){return this.isModule(t)&&this.isInEdit(t)}canAcceptByClass(t){return this.tools.hasAnyOfClasses(t,this.dropableElements())}canAcceptByTag(t){return!t||t.nodeType!==1?!1:this._tagsCanAccept.indexOf(t.nodeName)!==-1}allowDrop(t){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(t){return this.canAccept(t.parentNode)}canAccept(t){return!!(this.canAcceptByClass(t)&&this.isEditOrInEdit(t)&&this.allowDrop(t))}canReceiveElements(t){return this.isEdit(t)&&this.canAcceptByTag(t)}dropableElements(){return this._dropableElements}getIteractionTarget(t){return this.tools.firstWithAyOfClassesOnNodeOrParent(t,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(t,s){const i=this.getIteractionTarget(t);if(!i||!this.isEditOrInEdit(t)||!this.allowDrop(t))return null;const n={target:i,canInsert:!1,beforeAfter:!1};var o=this.settings.strictLayouts&&this.isLayout(s),r=this.settings.strict&&!this.isLayout(s)&&!this.isInLayout(i);if(r)return null;if(this.isEdit(i))n.canInsert=!o;else if(this.isElement(i)&&!o)this.canAcceptByTag(i)&&(n.canInsert=!o),n.beforeAfter=!0;else if(this.isModule(i)&&!o)if(this.canInsertBeforeOrAfter(i))n.beforeAfter=!0;else return null;else if(this.isLayout(i))if(this.canInsertBeforeOrAfter(i))n.beforeAfter=!0;else return null;return n}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let td=-1;const sd=(e,t)=>{if(!e||!t)return!1;const s=t.target;if(!s||s.nodeType!==1)return!1;e.pageX;const i=e.pageY,n=Ut.offset(s),o={},r=15;if(td===i||!t||!t.canInsert&&!t.beforeAfter)return!1;if(t.canInsert&&t.beforeAfter)if(i>=n.top-r&&i<=n.top+r)o.position="top",o.action="before";else if(i>=n.top+r&&i<=n.top+n.height/2)o.position="top",o.action="prepend";else if(i>=n.top+n.height/2&&i<=n.bottom-r)o.position="bottom",o.action="append";else if(i>=n.top+n.height/2&&i>=n.bottom-r)o.position="bottom",o.action="after";else return!1;else if(t.beforeAfter)if(i>=n.top-r&&i<=n.top+n.height/2)o.position="top",o.action="before";else if(i>=n.top+n.height/2&&i<=n.bottom+r)o.position="bottom",o.action="after";else return!1;else if(t.canInsert)if(i>=n.top-r&&i<=n.top+n.height/2)o.position="top",o.action="prepend";else if(i>=n.top+n.height/2&&i<=n.bottom+r)o.position="bottom",o.action="append";else return!1;return o},id=function(e,t){var s={handle:null,element:null,document,helper:!0},i=this,n={};this.on=function(r,l){n[r]?n[r].push(l):n[r]=[l]},this.dispatch=function(r,l){n[r]&&n[r].forEach(function(c){c.call(this,l)})};var o=function(r){i.settings.document.body.style.scrollBehavior="smooth",i.settings.document.defaultView.scrollTo(0,i.settings.document.defaultView.scrollY+r),i.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=Ht.extend({},s,e),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(r){this.element=ge(r).get(0),this.settings.handle||(this.settings.handle=this.settings.element),this.handle=this.settings.handle,this.handle.attr("draggable","true")},this.setTargets=function(r){this.targets=ge(r)},this.addTarget=function(r){this.targets.push(r)},this.init=function(){this.config(),this.draggable()},this.helper=function(r){return this._helper||(this._helper=ge().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),r==="create"?(this._helper.style.top=r.pageY+"px",this._helper.style.left=r.pageX+"px",this._helper.style.width=i.element.offsetWidth+"px",this._helper.style.height=i.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"):r==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&r&&(this._helper.style.top=r.pageY+"px",this._helper.style.left=r.pageX+"px",this._helper.style.maxWidth=i.settings.document.defaultView.innerWidth-r.pageX-40+"px",this.settings.document.documentElement.classList.add("le-dragging")),this._helper},this.isDragging=!1,this.dropableService=new Wl(t),this.dropPosition=sd,this.draggable=function(){ge(this.settings.target).on("dragleave",function(r){i.dropIndicator.hide()}),ge(this.settings.target).on("dragover",function(r){if(i.target=null,i.action=null,r.target!==i.element||!i.element.contains(r.target)){var l=i.dropableService.getTarget(r.target,i.element);if(l&&l!==i.element){const c=i.dropPosition(r,l);c?(i.target=l.target,i.action=c.action,i.dropIndicator.position(i.target,c.action+"-"+c.position)):i.dropIndicator.hide()}else i.dropIndicator.hide();i.isDragging&&(i.dispatch("dragOver",{element:i.element,event:r}),r.preventDefault())}}).on("drop",function(r){i.isDragging&&(r.preventDefault(),i.target&&i.action&&ge(i.target)[i.action](i.element),i.dropIndicator.hide(),i.dispatch("drop",{element:i.element,event:r})),i.dropIndicator.hide()}),this.handle.on("dragstart",function(r){i.isDragging=!0,i.element.id||(i.element.id="mw-element-"+new Date().getTime()),i.element.classList.add("mw-element-is-dragged"),r.dataTransfer.setData("text",i.element.id),r.dataTransfer.effectAllowed="move",i.helper("create"),i.dispatch("dragStart",{element:i.element,event:r})}).on("drag",function(r){var l=90,c=5;r.clientY<l&&o(-c),r.clientY>innerHeight-(l+(this._helper?this._helper.offsetHeight+10:0))&&o(c),r.dataTransfer.dropEffect="copy",i.dispatch("drag",{element:i.element,event:r}),i.helper(r)}).on("dragend",function(r){i.isDragging=!1,i.element.classList.remove("mw-element-is-dragged"),i.helper("remove"),i.dispatch("dragEnd",{element:i.element,event:r})})},this.init()};var es;class Kl{constructor(t={}){yt(this,"x",0);yt(this,"y",0);yt(this,"w",0);yt(this,"h",0);yt(this,"listeners",{});dt(this,es,{});const s={element:null,document,maxHeight:null,maxWidth:null};this.settings=Object.assign({},s,t),this.element=this.settings.element,this.document=this.settings.document,this.element.classList.add("mw-le-resizable")}on(t,s){J(this,es)[t]?J(this,es)[t].push(s):J(this,es)[t]=[s]}dispatch(t,s){J(this,es)[t]&&J(this,es)[t].forEach(i=>{i.call(this,s)})}mouseMoveHandler(t){const s=t.clientX-this.x,i=t.clientY-this.y;let n=this.h+i,o=this.w+s;this.settings.maxWidth&&(o=Math.min(o,this.settings.maxWidth)),this.settings.maxHeight&&(n=Math.min(n,this.settings.maxHeight)),this.element.style.width=`${o}px`,this.element.style.height=`${n}px`,t.preventDefault(),this.dispatch("resize",{height:this.element.offsetHeight,width:this.element.offsetWidth})}mouseUpHandler(){for(const t in this.listeners)this.document.removeEventListener(t,this.listeners[t]);this.listeners={},this.dispatch("resizeStop")}mouseDownHandler(t){this.x=t.clientX,this.y=t.clientY;const s=this.document.defaultView.getComputedStyle(this.element);this.w=parseInt(s.width,10),this.h=parseInt(s.height,10),this.listeners.mousemove=i=>this.mouseMoveHandler(i),this.listeners.mouseup=i=>this.mouseUpHandler(i);for(const i in this.listeners)this.document.addEventListener(i,this.listeners[i])}build(){const t=this.document.createElement("span"),s=this.document.createElement("span"),i=this.document.createElement("span"),n=this.document.createElement("span");t.className="mw-le-resizer mw-le-resizer-t",s.className="mw-le-resizer mw-le-resizer-r",n.className="mw-le-resizer mw-le-resizer-l",i.className="mw-le-resizer mw-le-resizer-b",this.element.appendChild(t),this.element.appendChild(s),this.element.appendChild(i),this.element.appendChild(n)}mount(){if(!this.element)return this;if(this.element.dataset.resizable)return this;this.element.dataset.resizable=!0,this.build();const t=this.element.querySelectorAll(".mw-le-resizer");return Array.from(t).forEach(s=>{s.addEventListener("mousedown",i=>{this.mouseDownHandler(i)})}),this.dispatch("ready",{height:this.element.offsetHeight,width:this.element.offsetWidth}),this}}es=new WeakMap;globalThis.Resizable=Kl;const wi=function(e){var t={},s=this;this.settings=Ht.extend({},t,e);const i={};this.on=(l,c)=>{i[l]?i[l].push(c):i[l]=[c]},this.dispatch=(l,c)=>{i[l]&&i[l].forEach(d=>{d.call(this,c)})};var n=!0,o=null;this.getTarget=function(){return o},this.isVisible=function(){return n},this.show=function(){n=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){n=!1,this.wrapper.addClass("mw-handle-item-hidden")};let r=null;this.setContent=function(l){r&&r.remove(),r=l,this.wrapper.append(r)},this.initDraggable=function(){this.draggable=new id({handle:this.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},e),this.draggable.on("dragStart",function(){s.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){s.wrapper.removeClass("mw-handle-item-dragging")})},this.set=function(l){if(!l){o=null;return}var c=Ut.offset(l);this.wrapper.css({top:c.top,left:c.left,width:c.width,height:c.height}),this.show(),this.draggable.setElement(l),o!==l&&(o=l,this.dispatch("targetChange",l))},this.createHandle=function(){this.settings.handle?this.handle=this.settings.handle:(this.handle=ge({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))},this.resizable=function(){this.settings.resizable&&(this.resizer=new Kl({element:this.wrapper.get(0),document:this.settings.document}),this.resizer.mount(),this.resizer.on("resize",l=>{const c=this.getTarget();c&&(c.style.minHeight=l.height+"px",c.style.width=l.width+"px")}))},this.createWrapper=function(){this.wrapper=ge({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),ge(document.body).on("mouseup touchend",function(){s.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide(),this.resizable()},nd=function(e){e=e||{},this.tools=Ut;var t=this,s={exceptions:["mw-handle-item"]};this.settings=Ht.extend({},s,e),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var i=20,n=function(l){return l%5>=2.5?l/5*5+5:l/5*5},o=function(l,c){l=n(l),c=n(c);for(var d=[],g=l-i,p=l+i,b=c-i,y=c+i;g<p;g+=5)for(;b<=y;b+=5)d.push([g,b]);return d},r=function(l,c){l&&l.parentElement&&c.indexOf(l)===-1&&t.body!==l&&c.push(l)};this.fromEvent=function(l){return t.tools.hasAnyOfClassesOnNodeOrParent(l.target,this.settings.exceptions)?[]:(t.document._test||(t.document._test=document.createElement("div"),t.document._test.style.position="absolute",t.document._test.style.left="10px",t.document._test.style.background="red",t.document._test.style.width="10px",t.document._test.style.height="10px",t.document.body.appendChild(t.document._test)),t.document._test.style.top=l.pageY+"px",this.fromPoint(l.pageX,l.pageY))},this.fromPoint=function(l,c){var d=[];t.document.defaultView.frameElement&&(c-=t.document.defaultView.scrollY);var g=t.document.elementFromPoint(l,c);if(!g)return[];r(g,d);var p=o(l,c);return p.forEach(function(b){r(t.document.elementFromPoint(b[0],b[1]),d)}),d}},od=function(e){return Ut.matches(e,'.row,[class*="row-"]')},rd=function(e){return Ut.matches(e,'.col,[class*="col-"]')};let Xt;const Ur=function(){return Xt||(Xt=document.createElement("div"),Xt.style.visibility="hidden",Xt.style.position="absolute",Xt.style.width="1px",Xt.style.height="1px",document.body.appendChild(Xt)),Xt},yi={},ld=function(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof yi[t]<"u")return yi[t];var s=document.createElement(t);return Ur().appendChild(s),yi[t]=getComputedStyle(s).display==="block",Ur().removeChild(s),yi[t]},ad=(e,t,s)=>{e=e||"*";for(var i=t.querySelectorAll(e),n=0,o=[];n<i.length;n++)!rd(i[n])&&!od(i[n])&&!s.elementAnalyzer.isEdit(i[n])&&ld(i[n])&&o.push(i[n]);return o},cd=e=>{const{backgroundImageHolder:t,editClass:s,moduleClass:i,elementClass:n,allowDrop:o}=e.settings,r=e.root;for(var l=r.querySelectorAll("."+s+"."+t+", ."+s+" ."+t+", ."+s+'[style*="background-image"], .'+s+' [style*="background-image"]'),c=r.querySelectorAll("."+i+e.settings.unEditableModules.join(",."+i)),d=r.querySelectorAll("."+s),g=0,p=0,b=0;g<l.length;g++){var y=l[g];e.elementAnalyzer.isInEdit(y)&&(mw.tools.hasClass(y,i)||mw.tools.addClass(y,s),y.style.backgroundImage||(y.style.backgroundImage="none"))}for(;p<c.length;p++)c[g].classList.remove(i);for(;b<d.length;b++){for(var _=ad(":not(."+n+")",d[b],e),C=0,x=d[b].querySelectorAll("."+o),R=0;R<x.length;R++)x[R].classList.add(n);for(;C<_.length;C++)_[C].classList.contains(i)||e.elementAnalyzer.isInEdit(_[C])&&_[C].classList.add(n)}},ud=function(e){this.handles=e,this.dragging=!1;var t=this;this.get=function(s){return this.handles[s]},this.set=function(s,i){this.get(s).set(i)},this.hide=function(s){s&&this.handles[s]?this.handles[s].hide():this.each(function(i,n){n.hide()})},this.hideAllBut=function(s){this.each(function(i,n){i!==s&&n.hide()})},this.show=function(s){s&&this.handles[s]?this.handles[s].show():this.each(function(i,n){n.show()})},this.each=function(s){if(s){var i;for(i in this.handles)s.call(t,i,this.handles[i])}},this.targetIsOrInsideHandle=function(s){if(s){s=s.target||s;var i;for(i in this.handles)if(this.handles[i].wrapper.get(0)===s||this.handles[i].wrapper.get(0).contains(s))return!0;return!1}},this.init=function(){this.each(function(s,i){i.draggable.on("dragStart",function(){t.dragging=!0,t.hideAllBut(s)}),i.draggable.on("dragEnd",function(){t.dragging=!1,i.show()})})},this.init()},dd=function(e){e=e||{};const t={template:"default"};let s={};this.settings=Ht.extend({},t,e),this._indicator=null;const i={};this.on=function(c,d){i[c]?i[c].push(d):i[c]=[d]},this.dispatch=function(c,d){i[c]&&i[c].forEach(function(g){g.call(this,d)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,s={})},this.show=function(){console.log(this.visible),this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const n=["before-top","prepend-top","after-bottom","append-bottom"],o="mw-drop-indicator-position-",r=n.map(function(c){return o+c});let l=null;this.position=function(c,d){if(!(!c||!d)&&!(s.target===c&&s.position===d)){s.target=c,s.position=d,l!==d&&(this._indicator.removeClass(r),l=d,this._indicator.addClass(o+d));var g=Ut.offset(c);this._indicator.css({height:g.height,left:g.left,top:g.top,width:g.width}),this.show()}},this.make=function(){this._indicator=ge(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},hd=(e,t,s)=>{!e||!t||(e=e.isMWElement?e.get(0):e,e.dataset.tooltip=t,e.title=t,e.dataset.tooltipposition=s||"top-center")},Is=function(e){this.options=e||{};var t=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=ge({props:{className:"mw-le-handle-menu",id:t.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=ge({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var s,i,n,o=function(){s=ge({props:{className:"mw-le-handle-menu-title"}}),i=ge({props:{className:"mw-le-handle-menu-title-text"}}),n=ge({props:{className:"mw-le-handle-menu-title-icon"}}),s.append(i),s.append(n),t.root.prepend(s),t.title=s},r=null;this.getTarget=function(){return r},this.setTarget=function(l){r=l;for(var c=0;c<this.buttons.length;c++)this.buttons[c].config.onTarget&&this.buttons[c].config.onTarget(l,this.buttons[c].button.get(0),t.options.rootScope)},this.setTitle=function(l,c){i.html(l||""),n.html(c||"")},this.buttons=[],this.buildButtons=function(l,c){c=c||this.buttonsHolder,l=l||this.options.buttons,l.forEach(function(d){c.append(t.button(d))})},this.button=function(l){var c=ge({props:{className:"mw-le-handle-menu-button"+(l.className?" "+l.className:"")}}),d={props:{className:"mw-le-handle-menu-button-content"}},g=ge(d);if(l.title&&hd(g,l.title),l.icon){var p=ge({props:{className:"mw-le-handle-menu-button-icon",innerHTML:l.icon}});g.append(p)}if(l.text){var b=ge({props:{className:"mw-le-handle-menu-button-text",innerHTML:l.text}});g.append(b)}if(c.append(g),this.buttons.push({button:c,config:l}),l.menu){var y=ge({props:{className:"mw-le-handle-menu-button-sub-menu"}});c.append(y),t.buildButtons(l.menu,y),c.on("click",function(){this.classList.toggle("sub-menu-active")})}else typeof l.action=="function"&&c.on("click",function(){l.action(t.getTarget(),c.get(0),{dialog:t.options.rootScope.dialog,tooltip:t.options.rootScope.tooltip})});return c},this.init=function(){this.create(),o(),this.setTitle(t.options.title,t.options.icon),this.buildButtons(),this.hide()},this.init()},fd=function(e){this.root=ge({props:{id:"mw-handle-item-element-root"}}),this.menu=new Is({id:"mw-handle-item-element-menu",title:"Element",buttons:[{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,s){},action:function(t){e.dialog({})}},{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(t){}}]}),this.menu.show(),this.root.append(this.menu.root)},md=function(e){this.root=ge({props:{id:"mw-handle-item-module-root",contentEditable:!1}});var t=new Is({id:"mw-handle-item-element-menu-default",title:"Module",rootScope:e,buttons:[{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',action:()=>{const s=mw.app.get("liveEdit").handles.get("module").getTarget();mw.app.editor.dispatch("onModuleSettingsRequest",s);var i=s.dataset.type||s.getAttribute("type");i=i.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+i,s)}}]});this.menu=new Is({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,buttons:[]}),this.menu.show(),t.show(),this.root.append(this.menu.root),this.root.append(t.root)},pd=(e,t)=>{const s=ge({props:{className:"le-dialog-footer"}}),i=ge({props:{className:"le-btn le-btn-primary le-dialog-footer-ok",innerHTML:e||"OK"}}),n=ge({props:{className:"le-btn le-dialog-footer-cancel"}});return s.append(n),s.append(i),{ok:i,cancel:n,footer:s}};var ts,ci,to;class Yl{constructor(t){dt(this,ci);dt(this,ts,{});t=t||{};const s={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},s,t),this.build(),setTimeout(i=>this.open())}on(t,s){J(this,ts)[t]?J(this,ts)[t].push(s):J(this,ts)[t]=[s]}dispatch(t,s){J(this,ts)[t]&&J(this,ts)[t].forEach(i=>{i.call(this,s)})}build(){this.root=ge({props:{className:`le-dialog ${typeof this.settings.position=="string"?this.settings.position:""}`}});var t=ge({props:{className:"le-dialog-close"}});t.on("click",()=>{this.remove()}),this.container=ge({props:{className:"le-dialog-container"},content:this.settings.content}),this.root.append(t),this.root.append(this.container),this.settings.footer&&this.root.append(this.settings.footer.root||this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this.settings.closeOnEscape&&this.settings.document.addEventListener("keydown",kt(this,ci,to)),this.settings.overlay&&this.overlay()}open(){if(this.settings.position.nodeName&&this.settings.position.ownerDocument===this.settings.document){var t=this.settings.position;t.ownerDocument;var s=t.ownerDocument.defaultView,i=t.getBoundingClientRect(),n=i.top+s.scrollY,o=i.left+t.offsetWidth+s.scrollX,r=this.root.get(0);n+r.offsetHeight>s.innerHeight+s.scrollY&&(n-=n+r.offsetHeight-(s.innerHeight+s.scrollY)),o+r.offsetWidth>s.innerWidth&&(o-=o+r.offsetWidth-s.innerWidth),this.root.css({top:n,left:o,position:this.settings.mode})}this.root.addClass("le-dialog-opened")}remove(){this.root.on("transitionend",()=>{this.root.remove(),this.overlay&&this.overlay.remove()}),this.root.removeClass("le-dialog-opened"),this.settings.closeOnEscape&&this.settings.document.removeEventListener("keydown",kt(this,ci,to)),this.dispatch("close")}overlay(){this.overlay=ge({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}ts=new WeakMap,ci=new WeakSet,to=function(t){(t.key==="Escape"||t.keyCode===27)&&this.remove()};const gd=function(e,t){const s=pd(),i=new Yl({content:e,footer:s,position:"centered"});return s.cancel.on("click",function(){i.remove()}),s.ok.on("click",function(){t&&t.call(),i.remove()}),i},vd=function(e){this.root=ge({props:{id:"mw-handle-item-layout-root"}});const t={};this.on=(s,i)=>{t[s]?t[s].push(i):t[s]=[i]},this.dispatch=(s,i)=>{t[s]&&t[s].forEach(n=>{n.call(this,i)})},this.menu=new Is({id:"mw-handle-item-layout-menu",title:e.lang("Layout"),rootScope:e,buttons:[{title:e.lang("Settings"),text:"",icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 13.3 15.9" xml:space="preserve"><path d="M8.2,2.4L11,5.1l-8.2,8.2H0v-2.8L8.2,2.4z M11.8,4.3L9,1.6l1.4-1.4C10.5,0.1,10.7,0,10.9,0c0.2,0,0.4,0.1,0.5,0.2l1.7,1.7c0.1,0.1,0.2,0.3,0.2,0.5S13.3,2.8,13.1,3L11.8,4.3z"/><rect y="14.5" width="12" height="1.4"/></svg>',className:"mw-handle-insert-button",menu:[{title:e.lang("Add something"),text:e.lang("Add something"),icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" version="1.1" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button"},{title:e.lang("Settings1212"),text:"Do alert",className:"mw-handle-insert-button"}]},{title:e.lang("Clone"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>',className:"mw-handle-insert-button",action:function(s,i,n){var o=document.createElement("div");o.innerHTML=s.outerHTML,ge("[id]",o).each(function(){this.id="le-id-"+new Date().getTime()}),ge(s).after(o.innerHTML);var r=s.nextElementSibling;mw.reload_module(r,function(){n.statemanager.record({target:mw.tools.firstParentWithClass(s,"edit"),value:parent.innerHTML})})}},{title:e.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(s,i,n){s.nextElementSibling===null?i.style.display="none":i.style.display=""},action:function(s,i,n){n.handles.get("layout").hide();var o=s.nextElementSibling;if(o){var r=s.getBoundingClientRect(),l=o.getBoundingClientRect(),c=0;r.top<l.top&&(c=-(r.top-l.top)),s.classList.add("mw-le-target-to-animate"),o.classList.add("mw-le-target-to-animate"),s.style.transform="translateY("+c+"px)",o.style.transform="translateY("+-c+"px)",setTimeout(function(){o.parentNode.insertBefore(s,o.nextSibling),s.classList.remove("mw-le-target-to-animate"),o.classList.remove("mw-le-target-to-animate"),s.style.transform="",o.style.transform=""},300)}}},{title:e.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(s,i,n){s.previousElementSibling===null?i.style.display="none":i.style.display=""},action:function(s,i,n){n.handles.get("layout").hide();var o=s.previousElementSibling;if(o){var r=s.getBoundingClientRect(),l=o.getBoundingClientRect(),c=0;r.top>l.top&&(c=-(r.top-l.top)),s.classList.add("mw-le-target-to-animate"),o.classList.add("mw-le-target-to-animate"),s.style.transform="translateY("+c+"px)",o.style.transform="translateY("+-c+"px)",setTimeout(function(){o.parentNode.insertBefore(s,o),s.classList.remove("mw-le-target-to-animate"),o.classList.remove("mw-le-target-to-animate"),s.style.transform="",o.style.transform=""},300)}}},{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path  d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(s,i,n){gd("Are you sure",function(){s.remove()})}}]}),this.addButtons=function(){var s="Add Layout",i=n=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+n.charAt(0).toUpperCase()+n.slice(1))};this.plusTop=ge({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:e.lang(s)}}),this.plusBottom=ge({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:e.lang(s)}}),this.plusTop.on("click",function(){i("top")}),this.plusBottom.on("click",function(){i("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.menu.show(),this.addButtons(),this.root.append(this.menu.root)},qr={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},bd=(e,t)=>((!t||!qr[t])&&(t="en"),qr[t][e]||e),wd=function(e){this.root=ge({props:{id:"mw-handle-interaction-item-element-root"}}),this.menu=new Is({id:"mw-handle-item-element-menu",title:"Element",buttons:[]}),this.menu.show(),this.root.append(this.menu.root)};class Xl{constructor(t){const s=this,i={};this.on=(y,_)=>{i[y]?i[y].push(_):i[y]=[_]},this.dispatch=(y,_)=>{i[y]&&i[y].forEach(C=>{C.call(this,_)})},this.paused=!1;var n={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=Ht.extend({},n,t),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(y){return bd(y,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new Wl(this.settings),this.dropIndicator=new dd(this.settings);const o=new fd(this),r=new md(this),l=new vd(this);this.elementHandleContent=o,this.moduleHandleContent=r,this.layoutHandleContent=l,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.dialog=function(y){y||(y={});var _={document:window.top.document,position:r.menu.getTarget(),mode:"absolute"};s.pause();const C=new Yl(Ht.extend({},_,y));return C.on("close",function(){s.play()}),C};var c=this.elementHandle=new wi({...this.settings,dropIndicator:this.dropIndicator,content:o.root,handle:o.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});c.on("targetChange",function(y){o.menu.setTarget(y)}),this.moduleHandle=new wi({...this.settings,dropIndicator:this.dropIndicator,content:r.root,handle:r.menu.title,document:this.settings.document,stateManager:this.settings.stateManager});var d=this.moduleHandle;this.getModuleQuickSettings=y=>new Promise(_=>{_(mw.quickSettings[y]),this.dispatch("moduleQuickSettings",{module:y})}),d.on("targetChange",function(y){s.getModuleQuickSettings(y.dataset.type).then(function(_){r.menu.root.remove(),r.menu=new Is({id:"mw-handle-item-element-menu",title:y.dataset.type,rootScope:s,buttons:_?_.mainMenu||[]:[],data:{target:y}}),r.menu.setTarget(y),r.menu.show(),r.root.append(r.menu.root)})}),this.layoutHandle=new wi({...this.settings,dropIndicator:this.dropIndicator,content:l.root,handle:l.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var g=this.layoutHandle,p=s.lang("Layout");l.menu.setTitle(p),g.on("targetChange",function(y){l.menu.setTarget(y),l.menu.setTitle(p),s.elementAnalyzer.isEditOrInEdit(y)?(l.plusTop.show(),l.plusBottom.show()):(l.plusTop.hide(),l.plusBottom.hide())}),l.handle=g,r.handle=d,o.handle=c;const b=new wd;this.interactionHandle=new wi({...this.settings,content:b.root,document:this.settings.document,resizable:!1,className:"mw-handle-item-interaction-handle"}),this.interactionHandle.menu=b.menu,this.handles=new ud({element:c,module:d,layout:g,interactionHandle:this.interactionHandle}),this.observe=new nd(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}init(){this.settings.mode==="auto"&&cd(this);const t=i=>{if(this.handles.targetIsOrInsideHandle(i))return;const n=this.observe.fromEvent(i),o=n[0];if(this.handles.hide(),o){const r=this.elementAnalyzer.getType(o);r&&r!=="edit"&&(this.handles.set(r,n[0]),r==="element"?this.handles.hide("module"):r==="module"?this.handles.hide("element"):this.handles.hide())}};let s;s="mousedown touchstart",ge(this.root).on("mousemove",i=>{if(this.handles.targetIsOrInsideHandle(i))return;const o=this.observe.fromEvent(i)[0];if(o){var r="";o.nodeName==="P"?r=this.lang("Paragraph"):/(H[1-6])/.test(o.nodeName)?r=this.lang("Title")+" "+o.nodeName.replace(/^\D+/g,""):o.nodeName==="IMG"||o.nodeName==="IMAGE"?r=this.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(o.nodeName)?r=this.lang("Title "+o.nodeName.replace("H","")):r=this.lang("Text"),this.interactionHandle.menu.setTitle(r),this.interactionHandle.show(),this.interactionHandle.set(o)}else this.interactionHandle.hide()}),ge(this.root).on(s,i=>{this.paused||t(i)})}}globalThis.LiveEdit=Xl;const yd=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:inline-block}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:9;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:all}.mw-handle-item.mw-le-resizable{position:absolute}.mw-handle-item.mw-handle-item-interaction-handle{pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;background-color:#7775757d;pointer-events:none}.mw-le-handle-menu{position:absolute;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;border-radius:7px;border:1px solid transparent;padding:3px 12px;display:inline-flex;align-items:center;background-color:#fff;pointer-events:all;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;position:absolute;top:-40px;left:-3px}.mw-le-handle-menu .mw-le-handle-menu-buttons:empty{display:none!important}.mw-le-handle-menu *{vertical-align:middle}#mw-handle-item-element-menu{top:-22px;left:-3px}#mw-handle-item-layout-menu{top:7px;right:7px}#mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#000}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#000}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:none;align-items:center;justify-content:center;padding:0 5px;height:20px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:grab;background-color:#0078ff;color:#fff}.mw-handle-item-interaction-handle .mw-le-handle-menu-title{display:inline-flex}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#fff;border-radius:20px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#e9e9e9}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}.mw-handle-item.mw-le-resizable .mw-le-resizer:before,.mw-handle-item.mw-le-resizable .mw-le-resizer:after{position:absolute;width:9px;height:9px;background-color:#fff;border:2px solid #2a84fb;content:""}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{top:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{left:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before{bottom:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{bottom:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{top:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{left:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before{right:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{right:calc(50% - 6px)}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizer{position:absolute}.mw-le-resizer-r{cursor:e-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-l{cursor:e-resize;height:100%;left:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:n-resize;height:5px;left:0;width:100%}.mw-le-resizer-t{top:0;cursor:n-resize;height:5px;left:0;width:100%}mw-le-element{display:block;line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;font-family:Verdana,sans-serif;box-sizing:border-box}.edit,.element,.module{margin-top:20px;padding-top:20px;min-height:100px}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}
`;class kd extends ls{constructor(){super()}onRegister(){mw.app.editor.on("onModuleSettingsChanged",t=>{mw.app.canvas.getWindow().mw.reload_module("#"+t.moduleId)}),mw.app.editor.on("onModuleSettingsRequest",t=>{var s=t.id,i=t.getAttribute("data-type");mw.dialogIframe({url:route("live_edit.module_settings")+"?id="+s+"&type="+i,width:300,height:500,draggable:!0,template:"mw_modal_simple",title:"Module settings",id:"btn-quick-setting-dialog-"+s})})}}const _d=()=>{mw.app.get("canvas").getFrame().parentElement;const t=mw.app.get("canvas").getDocument(),s=t.createElement("style");s.textContent=yd,t.head.prepend(s);const i=new Xl({root:t.body,strict:!1,mode:"auto",document:t});i.on("insertLayoutRequest",function(){mw.app.editor.dispatch("insertLayoutRequest",mw.app.get("liveEdit").handles.get("layout").getTarget())}),mw.app.call("onLiveEditReady"),mw.app.register("liveEdit",i),mw.app.register("state",mw.liveEditState),mw.app.register("editor",Qu),mw.app.register("moduleSettings",kd)};var Nt,ss,ks,ui,so,di,io,Wi,Zl;class Jl{constructor(t={}){dt(this,ui);dt(this,di);dt(this,Wi);dt(this,Nt,null);dt(this,ss,{});yt(this,"selectedCategory","");dt(this,ks,[]);yt(this,"root",null);const s={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},s,t),this.document=this.settings.document}on(t,s){J(this,ss)[t]?J(this,ss)[t].push(s):J(this,ss)[t]=[s]}dispatch(t,s){J(this,ss)[t]&&J(this,ss)[t].forEach(i=>{i.call(this,s)})}getData(){return J(this,Nt)}setData(t,s=!0){En(this,Nt,t);let i=0,n=J(this,Nt).length;for(;i<n;i++)typeof J(this,Nt)[i].categories=="string"&&(J(this,Nt)[i].categories=J(this,Nt)[i].categories.split(",").map(o=>o.trim()));s&&this.dispatch("dataChanged",J(this,Nt))}prepareCategories(){const t=[],s=this.getData();let i=0,n=s.length;for(;i<n;i++){let r=s[i].categories||"",l=0,c=r.length;for(;l<c;l++){const d=r[l].trim();t.indexOf(d)===-1&&t.push(d)}}t.sort(),this.categories=t}createCategoriesMenu(){const t=this.document.createElement("ul");this.prepareCategories(),t.className="modules-list-categories",t.innerHTML=this.categories.map(s=>`<li data-category="${s}">${s}</li>`).join(""),t.innerHTML=`<li data-category="">All categories</li> ${t.innerHTML}`,t.addEventListener("click",s=>{s.target.nodeName==="LI"&&this.selectCategory(s.target.dataset.category)}),this.categoriesNavigation=t,this.rootShadow.appendChild(t),this.on("categorySelect",s=>{const i=t.querySelectorAll("[data-category]");for(const n of i)n.classList[n.dataset.category===s?"add":"remove"]("active")})}selectCategory(t=""){this.selectedCategory=t,this.search(t),this.dispatch("categorySelect",t)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let t=document.createElement("style");t.textContent=this.settings.css,this.rootShadow.appendChild(t)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let s=0,i=t.length;const n={miscellaneous:kt(this,di,io).call(this,"miscellaneous")};for(;s<i;s++)(t[s].categories||["miscellaneous"]).forEach(r=>{n[r]||(n[r]=kt(this,di,io).call(this,r));const l=kt(this,ui,so).call(this,t[s]);J(this,ks).push(l),n[r].appendChild(l),n[r].__$hasNodes=!0});for(const o in n)n[o].__$hasNodes&&this.modulesList.appendChild(n[o]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let s=0,i=t.length;for(;s<i;s++){const n=kt(this,ui,so).call(this,t[s]);J(this,ks).push(n),this.modulesList.appendChild(n)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(t){t.nodeName&&(t.style.display="none")}showItem(t){t.nodeName&&(t.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",t=>this.search(void 0,this.searchField.value)),this.on("categorySelect",t=>{this.searchField.value=""})}async search(t="",s=""){if(this.settings.searchMode==="local")return kt(this,Wi,Zl).call(this,t,s)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(t=>{t(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(t=>{t(this)})}}Nt=new WeakMap,ss=new WeakMap,ks=new WeakMap,ui=new WeakSet,so=function(t){t.locked=t.description.includes("a");const s=this.document.createElement("div");return s.className="modules-list-block-item modules-list-block-item-is-locked-"+t.locked,s.__$data=t,s.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${t.icon||t.screenshot||t.image})"></div>
            <div class="modules-list-block-item-title">${t.name||t.title}</div>
            <div class="modules-list-block-item-description">${t.description}</div>
            ${t.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,s.addEventListener("click",i=>{i.stopPropagation(),s.__$data.locked?this.dispatch("lockedModuleSelected",{data:t,element:s}):this.dispatch("moduleSelected",{data:t,element:s})}),s.$data=t,s},di=new WeakSet,io=function(t){const s=this.document.createElement("div");return s.className="modules-list-block-category-section",s.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+t+"</h5></div>",s.__$hasNodes=!1,s},Wi=new WeakSet,Zl=async function(t,s){return t&&(t=t.trim().toLowerCase()),s&&(s=s.trim().toLowerCase()),new Promise(i=>{let n=0,o=J(this,ks).length,r=0;for(;n<o;n++){const l=J(this,ks)[n],c=l.$data;if(t&&c.categories.indexOf(t)===-1){this.hideItem(l);continue}if(s&&(c.name||c.title).toLowerCase().indexOf(s)===-1){this.hideItem(l);continue}this.showItem(l),r++}console.log(s,t),this.modulesListNoResultsNode.style.display=r===0?"":"none",i()})};const Ni=[],Gl=function(e){Ni.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+e}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",t=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(e){(e.key==="Escape"||e.keyCode===27)&&Ni.length>0&&(Ni[0].remove(),Ni.splice(0,1))});var no,Wr=function(e){var t=new Jl({data:no});t.create().then(function(){var s=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),i=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),n=mw.element({props:{className:"mw-le-layouts-dialog-col"}});s.append(i),s.append(n),mw.element(t.root).append(s),i.append(t.searchBlock);var o=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});i.append(o),i.append(t.categoriesNavigation),n.append(t.modulesList),e.append(t.root)})};const xd=()=>{var e=new Gl("mw-le-layouts-dialog"),t=e.dialog;if(no){Wr(t);return}mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(s){return s.json()}).then(function(s){no=s,Wr(t),mw.spinner({element:t.get(0),decorate:!0}).remove()})};var oo,Kr=function(e){var t=new Jl({data:oo});t.createCategorized().then(function(){e.append(t.root)})};const Cd=()=>{var e=new Gl("mw-le-modules-dialog"),t=e.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var s=mw.$(this).attr("data-module-name"),i={class:this.className};s==="layout"&&(i.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,s,i,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),oo?Kr(t):(mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(s){return s.json()}).then(function(s){oo=s,Kr(t),mw.spinner({element:t.get(0),decorate:!0}).remove()}))},Sd={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return Cd()},insertLayout:function(){return xd()}},Ld={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await Rs.get(route("api.module.list")+"?layout_type=module").then(e=>{this.modulesListData=e.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(e){if(this.modulesSkinsData[e])return this.modulesSkinsData[e];if(await Rs.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.modulesSkinsData[e]=t.data}),this.modulesSkinsData[e])return this.modulesSkinsData[e]}},Ed={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await Rs.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(e=>{this.layoutsListData=e.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var e="layouts";if(this.layoutSkinsData[e])return this.layoutSkinsData[e];if(await Rs.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.layoutSkinsData[e]=t.data}),this.layoutSkinsData[e])return this.layoutSkinsData[e]}};class Md extends ls{constructor(){super()}onRegister(){document.addEventListener("keydown",t=>{(t.key==="Enter"||t.keyCode===13)&&this.dispatch("enter",t),(t.key==="Escape"||t.keyCode===27)&&this.dispatch("escape",t),(t.key==="Backspace"||t.keyCode===8)&&this.dispatch("backspace",t),(t.key==="Delete"||t.keyCode===46)&&this.dispatch("delete",t),t.ctrlKey&&t.keyCode===83&&this.dispatch("ctrl+s",t),t.ctrlKey&&t.keyCode===90&&this.dispatch("ctrl+z",t),t.ctrlKey&&t.keyCode===89&&this.dispatch("ctrl+y",t)})}}mw.app=new Nc;const Ql=new $c,Ad=document.getElementById("live-edit-frame-holder");mw.app.register("canvas",Ql);mw.app.register("commands",Sd);mw.app.register("modules",Ld);mw.app.register("layouts",Ed);mw.app.register("keyboard",Md);Ql.mount(Ad);mw.app.canvas.on("liveEditBeforeLoaded",function(){mw.app.dispatch("init")});mw.app.canvas.on("liveEditCanvasLoaded",()=>{mw.app.dispatch("ready")});function Eo(e,t){const s=Object.create(null),i=e.split(",");for(let n=0;n<i.length;n++)s[i[n]]=!0;return t?n=>!!s[n.toLowerCase()]:n=>!!s[n]}function Lt(e){if(ie(e)){const t={};for(let s=0;s<e.length;s++){const i=e[s],n=Xe(i)?$d(i):Lt(i);if(n)for(const o in n)t[o]=n[o]}return t}else{if(Xe(e))return e;if(Re(e))return e}}const Td=/;(?![^(]*\))/g,Nd=/:([^]+)/,Pd=/\/\*.*?\*\//gs;function $d(e){const t={};return e.replace(Pd,"").split(Td).forEach(s=>{if(s){const i=s.split(Nd);i.length>1&&(t[i[0].trim()]=i[1].trim())}}),t}function ct(e){let t="";if(Xe(e))t=e;else if(ie(e))for(let s=0;s<e.length;s++){const i=ct(e[s]);i&&(t+=i+" ")}else if(Re(e))for(const s in e)e[s]&&(t+=s+" ");return t.trim()}const Od="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Hd=Eo(Od);function ea(e){return!!e||e===""}const et=e=>Xe(e)?e:e==null?"":ie(e)||Re(e)&&(e.toString===na||!ce(e.toString))?JSON.stringify(e,ta,2):String(e),ta=(e,t)=>t&&t.__v_isRef?ta(e,t.value):Ns(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((s,[i,n])=>(s[`${i} =>`]=n,s),{})}:sa(t)?{[`Set(${t.size})`]:[...t.values()]}:Re(t)&&!ie(t)&&!oa(t)?String(t):t,He={},Ts=[],Et=()=>{},Rd=()=>!1,Id=/^on[^a-z]/,Ji=e=>Id.test(e),Mo=e=>e.startsWith("onUpdate:"),nt=Object.assign,Ao=(e,t)=>{const s=e.indexOf(t);s>-1&&e.splice(s,1)},Dd=Object.prototype.hasOwnProperty,we=(e,t)=>Dd.call(e,t),ie=Array.isArray,Ns=e=>Zi(e)==="[object Map]",sa=e=>Zi(e)==="[object Set]",ce=e=>typeof e=="function",Xe=e=>typeof e=="string",To=e=>typeof e=="symbol",Re=e=>e!==null&&typeof e=="object",ia=e=>Re(e)&&ce(e.then)&&ce(e.catch),na=Object.prototype.toString,Zi=e=>na.call(e),Fd=e=>Zi(e).slice(8,-1),oa=e=>Zi(e)==="[object Object]",No=e=>Xe(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Pi=Eo(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Gi=e=>{const t=Object.create(null);return s=>t[s]||(t[s]=e(s))},Bd=/-(\w)/g,Rt=Gi(e=>e.replace(Bd,(t,s)=>s?s.toUpperCase():"")),zd=/\B([A-Z])/g,Bs=Gi(e=>e.replace(zd,"-$1").toLowerCase()),Qi=Gi(e=>e.charAt(0).toUpperCase()+e.slice(1)),Un=Gi(e=>e?`on${Qi(e)}`:""),ii=(e,t)=>!Object.is(e,t),$i=(e,t)=>{for(let s=0;s<e.length;s++)e[s](t)},Di=(e,t,s)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:s})},ro=e=>{const t=parseFloat(e);return isNaN(t)?e:t},jd=e=>{const t=Xe(e)?Number(e):NaN;return isNaN(t)?e:t};let Yr;const Vd=()=>Yr||(Yr=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});let _t;class Ud{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this.parent=_t,!t&&_t&&(this.index=(_t.scopes||(_t.scopes=[])).push(this)-1)}get active(){return this._active}run(t){if(this._active){const s=_t;try{return _t=this,t()}finally{_t=s}}}on(){_t=this}off(){_t=this.parent}stop(t){if(this._active){let s,i;for(s=0,i=this.effects.length;s<i;s++)this.effects[s].stop();for(s=0,i=this.cleanups.length;s<i;s++)this.cleanups[s]();if(this.scopes)for(s=0,i=this.scopes.length;s<i;s++)this.scopes[s].stop(!0);if(!this.detached&&this.parent&&!t){const n=this.parent.scopes.pop();n&&n!==this&&(this.parent.scopes[this.index]=n,n.index=this.index)}this.parent=void 0,this._active=!1}}}function qd(e,t=_t){t&&t.active&&t.effects.push(e)}function Wd(){return _t}const Po=e=>{const t=new Set(e);return t.w=0,t.n=0,t},ra=e=>(e.w&os)>0,la=e=>(e.n&os)>0,Kd=({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=os},Yd=e=>{const{deps:t}=e;if(t.length){let s=0;for(let i=0;i<t.length;i++){const n=t[i];ra(n)&&!la(n)?n.delete(e):t[s++]=n,n.w&=~os,n.n&=~os}t.length=s}},Fi=new WeakMap;let Js=0,os=1;const lo=30;let xt;const _s=Symbol(""),ao=Symbol("");class $o{constructor(t,s=null,i){this.fn=t,this.scheduler=s,this.active=!0,this.deps=[],this.parent=void 0,qd(this,i)}run(){if(!this.active)return this.fn();let t=xt,s=is;for(;t;){if(t===this)return;t=t.parent}try{return this.parent=xt,xt=this,is=!0,os=1<<++Js,Js<=lo?Kd(this):Xr(this),this.fn()}finally{Js<=lo&&Yd(this),os=1<<--Js,xt=this.parent,is=s,this.parent=void 0,this.deferStop&&this.stop()}}stop(){xt===this?this.deferStop=!0:this.active&&(Xr(this),this.onStop&&this.onStop(),this.active=!1)}}function Xr(e){const{deps:t}=e;if(t.length){for(let s=0;s<t.length;s++)t[s].delete(e);t.length=0}}let is=!0;const aa=[];function zs(){aa.push(is),is=!1}function js(){const e=aa.pop();is=e===void 0?!0:e}function ft(e,t,s){if(is&&xt){let i=Fi.get(e);i||Fi.set(e,i=new Map);let n=i.get(s);n||i.set(s,n=Po()),ca(n)}}function ca(e,t){let s=!1;Js<=lo?la(e)||(e.n|=os,s=!ra(e)):s=!e.has(xt),s&&(e.add(xt),xt.deps.push(e))}function qt(e,t,s,i,n,o){const r=Fi.get(e);if(!r)return;let l=[];if(t==="clear")l=[...r.values()];else if(s==="length"&&ie(e)){const c=Number(i);r.forEach((d,g)=>{(g==="length"||g>=c)&&l.push(d)})}else switch(s!==void 0&&l.push(r.get(s)),t){case"add":ie(e)?No(s)&&l.push(r.get("length")):(l.push(r.get(_s)),Ns(e)&&l.push(r.get(ao)));break;case"delete":ie(e)||(l.push(r.get(_s)),Ns(e)&&l.push(r.get(ao)));break;case"set":Ns(e)&&l.push(r.get(_s));break}if(l.length===1)l[0]&&co(l[0]);else{const c=[];for(const d of l)d&&c.push(...d);co(Po(c))}}function co(e,t){const s=ie(e)?e:[...e];for(const i of s)i.computed&&Jr(i);for(const i of s)i.computed||Jr(i)}function Jr(e,t){(e!==xt||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}function Xd(e,t){var s;return(s=Fi.get(e))===null||s===void 0?void 0:s.get(t)}const Jd=Eo("__proto__,__v_isRef,__isVue"),ua=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(To)),Zd=Oo(),Gd=Oo(!1,!0),Qd=Oo(!0),Zr=eh();function eh(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...s){const i=ye(this);for(let o=0,r=this.length;o<r;o++)ft(i,"get",o+"");const n=i[t](...s);return n===-1||n===!1?i[t](...s.map(ye)):n}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...s){zs();const i=ye(this)[t].apply(this,s);return js(),i}}),e}function th(e){const t=ye(this);return ft(t,"has",e),t.hasOwnProperty(e)}function Oo(e=!1,t=!1){return function(i,n,o){if(n==="__v_isReactive")return!e;if(n==="__v_isReadonly")return e;if(n==="__v_isShallow")return t;if(n==="__v_raw"&&o===(e?t?vh:pa:t?ma:fa).get(i))return i;const r=ie(i);if(!e){if(r&&we(Zr,n))return Reflect.get(Zr,n,o);if(n==="hasOwnProperty")return th}const l=Reflect.get(i,n,o);return(To(n)?ua.has(n):Jd(n))||(e||ft(i,"get",n),t)?l:st(l)?r&&No(n)?l:l.value:Re(l)?e?ga(l):Io(l):l}}const sh=da(),ih=da(!0);function da(e=!1){return function(s,i,n,o){let r=s[i];if(Ds(r)&&st(r)&&!st(n))return!1;if(!e&&(!Bi(n)&&!Ds(n)&&(r=ye(r),n=ye(n)),!ie(s)&&st(r)&&!st(n)))return r.value=n,!0;const l=ie(s)&&No(i)?Number(i)<s.length:we(s,i),c=Reflect.set(s,i,n,o);return s===ye(o)&&(l?ii(n,r)&&qt(s,"set",i,n):qt(s,"add",i,n)),c}}function nh(e,t){const s=we(e,t);e[t];const i=Reflect.deleteProperty(e,t);return i&&s&&qt(e,"delete",t,void 0),i}function oh(e,t){const s=Reflect.has(e,t);return(!To(t)||!ua.has(t))&&ft(e,"has",t),s}function rh(e){return ft(e,"iterate",ie(e)?"length":_s),Reflect.ownKeys(e)}const ha={get:Zd,set:sh,deleteProperty:nh,has:oh,ownKeys:rh},lh={get:Qd,set(e,t){return!0},deleteProperty(e,t){return!0}},ah=nt({},ha,{get:Gd,set:ih}),Ho=e=>e,en=e=>Reflect.getPrototypeOf(e);function ki(e,t,s=!1,i=!1){e=e.__v_raw;const n=ye(e),o=ye(t);s||(t!==o&&ft(n,"get",t),ft(n,"get",o));const{has:r}=en(n),l=i?Ho:s?Fo:ni;if(r.call(n,t))return l(e.get(t));if(r.call(n,o))return l(e.get(o));e!==n&&e.get(t)}function _i(e,t=!1){const s=this.__v_raw,i=ye(s),n=ye(e);return t||(e!==n&&ft(i,"has",e),ft(i,"has",n)),e===n?s.has(e):s.has(e)||s.has(n)}function xi(e,t=!1){return e=e.__v_raw,!t&&ft(ye(e),"iterate",_s),Reflect.get(e,"size",e)}function Gr(e){e=ye(e);const t=ye(this);return en(t).has.call(t,e)||(t.add(e),qt(t,"add",e,e)),this}function Qr(e,t){t=ye(t);const s=ye(this),{has:i,get:n}=en(s);let o=i.call(s,e);o||(e=ye(e),o=i.call(s,e));const r=n.call(s,e);return s.set(e,t),o?ii(t,r)&&qt(s,"set",e,t):qt(s,"add",e,t),this}function el(e){const t=ye(this),{has:s,get:i}=en(t);let n=s.call(t,e);n||(e=ye(e),n=s.call(t,e)),i&&i.call(t,e);const o=t.delete(e);return n&&qt(t,"delete",e,void 0),o}function tl(){const e=ye(this),t=e.size!==0,s=e.clear();return t&&qt(e,"clear",void 0,void 0),s}function Ci(e,t){return function(i,n){const o=this,r=o.__v_raw,l=ye(r),c=t?Ho:e?Fo:ni;return!e&&ft(l,"iterate",_s),r.forEach((d,g)=>i.call(n,c(d),c(g),o))}}function Si(e,t,s){return function(...i){const n=this.__v_raw,o=ye(n),r=Ns(o),l=e==="entries"||e===Symbol.iterator&&r,c=e==="keys"&&r,d=n[e](...i),g=s?Ho:t?Fo:ni;return!t&&ft(o,"iterate",c?ao:_s),{next(){const{value:p,done:b}=d.next();return b?{value:p,done:b}:{value:l?[g(p[0]),g(p[1])]:g(p),done:b}},[Symbol.iterator](){return this}}}}function Jt(e){return function(...t){return e==="delete"?!1:this}}function ch(){const e={get(o){return ki(this,o)},get size(){return xi(this)},has:_i,add:Gr,set:Qr,delete:el,clear:tl,forEach:Ci(!1,!1)},t={get(o){return ki(this,o,!1,!0)},get size(){return xi(this)},has:_i,add:Gr,set:Qr,delete:el,clear:tl,forEach:Ci(!1,!0)},s={get(o){return ki(this,o,!0)},get size(){return xi(this,!0)},has(o){return _i.call(this,o,!0)},add:Jt("add"),set:Jt("set"),delete:Jt("delete"),clear:Jt("clear"),forEach:Ci(!0,!1)},i={get(o){return ki(this,o,!0,!0)},get size(){return xi(this,!0)},has(o){return _i.call(this,o,!0)},add:Jt("add"),set:Jt("set"),delete:Jt("delete"),clear:Jt("clear"),forEach:Ci(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(o=>{e[o]=Si(o,!1,!1),s[o]=Si(o,!0,!1),t[o]=Si(o,!1,!0),i[o]=Si(o,!0,!0)}),[e,s,t,i]}const[uh,dh,hh,fh]=ch();function Ro(e,t){const s=t?e?fh:hh:e?dh:uh;return(i,n,o)=>n==="__v_isReactive"?!e:n==="__v_isReadonly"?e:n==="__v_raw"?i:Reflect.get(we(s,n)&&n in i?s:i,n,o)}const mh={get:Ro(!1,!1)},ph={get:Ro(!1,!0)},gh={get:Ro(!0,!1)},fa=new WeakMap,ma=new WeakMap,pa=new WeakMap,vh=new WeakMap;function bh(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function wh(e){return e.__v_skip||!Object.isExtensible(e)?0:bh(Fd(e))}function Io(e){return Ds(e)?e:Do(e,!1,ha,mh,fa)}function yh(e){return Do(e,!1,ah,ph,ma)}function ga(e){return Do(e,!0,lh,gh,pa)}function Do(e,t,s,i,n){if(!Re(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const o=n.get(e);if(o)return o;const r=wh(e);if(r===0)return e;const l=new Proxy(e,r===2?i:s);return n.set(e,l),l}function Ps(e){return Ds(e)?Ps(e.__v_raw):!!(e&&e.__v_isReactive)}function Ds(e){return!!(e&&e.__v_isReadonly)}function Bi(e){return!!(e&&e.__v_isShallow)}function va(e){return Ps(e)||Ds(e)}function ye(e){const t=e&&e.__v_raw;return t?ye(t):e}function ba(e){return Di(e,"__v_skip",!0),e}const ni=e=>Re(e)?Io(e):e,Fo=e=>Re(e)?ga(e):e;function wa(e){is&&xt&&(e=ye(e),ca(e.dep||(e.dep=Po())))}function ya(e,t){e=ye(e);const s=e.dep;s&&co(s)}function st(e){return!!(e&&e.__v_isRef===!0)}function $t(e){return kh(e,!1)}function kh(e,t){return st(e)?e:new _h(e,t)}class _h{constructor(t,s){this.__v_isShallow=s,this.dep=void 0,this.__v_isRef=!0,this._rawValue=s?t:ye(t),this._value=s?t:ni(t)}get value(){return wa(this),this._value}set value(t){const s=this.__v_isShallow||Bi(t)||Ds(t);t=s?t:ye(t),ii(t,this._rawValue)&&(this._rawValue=t,this._value=s?t:ni(t),ya(this))}}function Zs(e){return st(e)?e.value:e}const xh={get:(e,t,s)=>Zs(Reflect.get(e,t,s)),set:(e,t,s,i)=>{const n=e[t];return st(n)&&!st(s)?(n.value=s,!0):Reflect.set(e,t,s,i)}};function ka(e){return Ps(e)?e:new Proxy(e,xh)}function Gs(e){const t=ie(e)?new Array(e.length):{};for(const s in e)t[s]=Sh(e,s);return t}class Ch{constructor(t,s,i){this._object=t,this._key=s,this._defaultValue=i,this.__v_isRef=!0}get value(){const t=this._object[this._key];return t===void 0?this._defaultValue:t}set value(t){this._object[this._key]=t}get dep(){return Xd(ye(this._object),this._key)}}function Sh(e,t,s){const i=e[t];return st(i)?i:new Ch(e,t,s)}var _a;class Lh{constructor(t,s,i,n){this._setter=s,this.dep=void 0,this.__v_isRef=!0,this[_a]=!1,this._dirty=!0,this.effect=new $o(t,()=>{this._dirty||(this._dirty=!0,ya(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!n,this.__v_isReadonly=i}get value(){const t=ye(this);return wa(t),(t._dirty||!t._cacheable)&&(t._dirty=!1,t._value=t.effect.run()),t._value}set value(t){this._setter(t)}}_a="__v_isReadonly";function Eh(e,t,s=!1){let i,n;const o=ce(e);return o?(i=e,n=Et):(i=e.get,n=e.set),new Lh(i,n,o||!n,s)}function ns(e,t,s,i){let n;try{n=i?e(...i):e()}catch(o){tn(o,t,s)}return n}function bt(e,t,s,i){if(ce(e)){const o=ns(e,t,s,i);return o&&ia(o)&&o.catch(r=>{tn(r,t,s)}),o}const n=[];for(let o=0;o<e.length;o++)n.push(bt(e[o],t,s,i));return n}function tn(e,t,s,i=!0){const n=t?t.vnode:null;if(t){let o=t.parent;const r=t.proxy,l=s;for(;o;){const d=o.ec;if(d){for(let g=0;g<d.length;g++)if(d[g](e,r,l)===!1)return}o=o.parent}const c=t.appContext.config.errorHandler;if(c){ns(c,null,10,[e,r,l]);return}}Mh(e,s,n,i)}function Mh(e,t,s,i=!0){console.error(e)}let oi=!1,uo=!1;const rt=[];let Ot=0;const $s=[];let jt=null,vs=0;const xa=Promise.resolve();let Bo=null;function Ca(e){const t=Bo||xa;return e?t.then(this?e.bind(this):e):t}function Ah(e){let t=Ot+1,s=rt.length;for(;t<s;){const i=t+s>>>1;ri(rt[i])<e?t=i+1:s=i}return t}function zo(e){(!rt.length||!rt.includes(e,oi&&e.allowRecurse?Ot+1:Ot))&&(e.id==null?rt.push(e):rt.splice(Ah(e.id),0,e),Sa())}function Sa(){!oi&&!uo&&(uo=!0,Bo=xa.then(Ea))}function Th(e){const t=rt.indexOf(e);t>Ot&&rt.splice(t,1)}function Nh(e){ie(e)?$s.push(...e):(!jt||!jt.includes(e,e.allowRecurse?vs+1:vs))&&$s.push(e),Sa()}function sl(e,t=oi?Ot+1:0){for(;t<rt.length;t++){const s=rt[t];s&&s.pre&&(rt.splice(t,1),t--,s())}}function La(e){if($s.length){const t=[...new Set($s)];if($s.length=0,jt){jt.push(...t);return}for(jt=t,jt.sort((s,i)=>ri(s)-ri(i)),vs=0;vs<jt.length;vs++)jt[vs]();jt=null,vs=0}}const ri=e=>e.id==null?1/0:e.id,Ph=(e,t)=>{const s=ri(e)-ri(t);if(s===0){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return s};function Ea(e){uo=!1,oi=!0,rt.sort(Ph);const t=Et;try{for(Ot=0;Ot<rt.length;Ot++){const s=rt[Ot];s&&s.active!==!1&&ns(s,null,14)}}finally{Ot=0,rt.length=0,La(),oi=!1,Bo=null,(rt.length||$s.length)&&Ea()}}function $h(e,t,...s){if(e.isUnmounted)return;const i=e.vnode.props||He;let n=s;const o=t.startsWith("update:"),r=o&&t.slice(7);if(r&&r in i){const g=`${r==="modelValue"?"model":r}Modifiers`,{number:p,trim:b}=i[g]||He;b&&(n=s.map(y=>Xe(y)?y.trim():y)),p&&(n=s.map(ro))}let l,c=i[l=Un(t)]||i[l=Un(Rt(t))];!c&&o&&(c=i[l=Un(Bs(t))]),c&&bt(c,e,6,n);const d=i[l+"Once"];if(d){if(!e.emitted)e.emitted={};else if(e.emitted[l])return;e.emitted[l]=!0,bt(d,e,6,n)}}function Ma(e,t,s=!1){const i=t.emitsCache,n=i.get(e);if(n!==void 0)return n;const o=e.emits;let r={},l=!1;if(!ce(e)){const c=d=>{const g=Ma(d,t,!0);g&&(l=!0,nt(r,g))};!s&&t.mixins.length&&t.mixins.forEach(c),e.extends&&c(e.extends),e.mixins&&e.mixins.forEach(c)}return!o&&!l?(Re(e)&&i.set(e,null),null):(ie(o)?o.forEach(c=>r[c]=null):nt(r,o),Re(e)&&i.set(e,r),r)}function sn(e,t){return!e||!Ji(t)?!1:(t=t.slice(2).replace(/Once$/,""),we(e,t[0].toLowerCase()+t.slice(1))||we(e,Bs(t))||we(e,t))}let it=null,Aa=null;function zi(e){const t=it;return it=e,Aa=e&&e.type.__scopeId||null,t}function Qs(e,t=it,s){if(!t||e._n)return e;const i=(...n)=>{i._d&&hl(-1);const o=zi(t);let r;try{r=e(...n)}finally{zi(o),i._d&&hl(1)}return r};return i._n=!0,i._c=!0,i._d=!0,i}function qn(e){const{type:t,vnode:s,proxy:i,withProxy:n,props:o,propsOptions:[r],slots:l,attrs:c,emit:d,render:g,renderCache:p,data:b,setupState:y,ctx:_,inheritAttrs:C}=e;let x,R;const Z=zi(e);try{if(s.shapeFlag&4){const te=n||i;x=Pt(g.call(te,te,p,o,y,b,_)),R=c}else{const te=t;x=Pt(te.length>1?te(o,{attrs:c,slots:l,emit:d}):te(o,null)),R=t.props?c:Oh(c)}}catch(te){si.length=0,tn(te,e,1),x=z(wt)}let K=x;if(R&&C!==!1){const te=Object.keys(R),{shapeFlag:ne}=K;te.length&&ne&7&&(r&&te.some(Mo)&&(R=Hh(R,r)),K=rs(K,R))}return s.dirs&&(K=rs(K),K.dirs=K.dirs?K.dirs.concat(s.dirs):s.dirs),s.transition&&(K.transition=s.transition),x=K,zi(Z),x}const Oh=e=>{let t;for(const s in e)(s==="class"||s==="style"||Ji(s))&&((t||(t={}))[s]=e[s]);return t},Hh=(e,t)=>{const s={};for(const i in e)(!Mo(i)||!(i.slice(9)in t))&&(s[i]=e[i]);return s};function Rh(e,t,s){const{props:i,children:n,component:o}=e,{props:r,children:l,patchFlag:c}=t,d=o.emitsOptions;if(t.dirs||t.transition)return!0;if(s&&c>=0){if(c&1024)return!0;if(c&16)return i?il(i,r,d):!!r;if(c&8){const g=t.dynamicProps;for(let p=0;p<g.length;p++){const b=g[p];if(r[b]!==i[b]&&!sn(d,b))return!0}}}else return(n||l)&&(!l||!l.$stable)?!0:i===r?!1:i?r?il(i,r,d):!0:!!r;return!1}function il(e,t,s){const i=Object.keys(t);if(i.length!==Object.keys(e).length)return!0;for(let n=0;n<i.length;n++){const o=i[n];if(t[o]!==e[o]&&!sn(s,o))return!0}return!1}function Ih({vnode:e,parent:t},s){for(;t&&t.subTree===e;)(e=t.vnode).el=s,t=t.parent}const Dh=e=>e.__isSuspense;function Fh(e,t){t&&t.pendingBranch?ie(e)?t.effects.push(...e):t.effects.push(e):Nh(e)}function Bh(e,t){if(We){let s=We.provides;const i=We.parent&&We.parent.provides;i===s&&(s=We.provides=Object.create(i)),s[e]=t}}function Oi(e,t,s=!1){const i=We||it;if(i){const n=i.parent==null?i.vnode.appContext&&i.vnode.appContext.provides:i.parent.provides;if(n&&e in n)return n[e];if(arguments.length>1)return s&&ce(t)?t.call(i.proxy):t}}const Li={};function Qe(e,t,s){return Ta(e,t,s)}function Ta(e,t,{immediate:s,deep:i,flush:n,onTrack:o,onTrigger:r}=He){const l=Wd()===(We==null?void 0:We.scope)?We:null;let c,d=!1,g=!1;if(st(e)?(c=()=>e.value,d=Bi(e)):Ps(e)?(c=()=>e,i=!0):ie(e)?(g=!0,d=e.some(K=>Ps(K)||Bi(K)),c=()=>e.map(K=>{if(st(K))return K.value;if(Ps(K))return ys(K);if(ce(K))return ns(K,l,2)})):ce(e)?t?c=()=>ns(e,l,2):c=()=>{if(!(l&&l.isUnmounted))return p&&p(),bt(e,l,3,[b])}:c=Et,t&&i){const K=c;c=()=>ys(K())}let p,b=K=>{p=R.onStop=()=>{ns(K,l,4)}},y;if(ai)if(b=Et,t?s&&bt(t,l,3,[c(),g?[]:void 0,b]):c(),n==="sync"){const K=Rf();y=K.__watcherHandles||(K.__watcherHandles=[])}else return Et;let _=g?new Array(e.length).fill(Li):Li;const C=()=>{if(R.active)if(t){const K=R.run();(i||d||(g?K.some((te,ne)=>ii(te,_[ne])):ii(K,_)))&&(p&&p(),bt(t,l,3,[K,_===Li?void 0:g&&_[0]===Li?[]:_,b]),_=K)}else R.run()};C.allowRecurse=!!t;let x;n==="sync"?x=C:n==="post"?x=()=>ht(C,l&&l.suspense):(C.pre=!0,l&&(C.id=l.uid),x=()=>zo(C));const R=new $o(c,x);t?s?C():_=R.run():n==="post"?ht(R.run.bind(R),l&&l.suspense):R.run();const Z=()=>{R.stop(),l&&l.scope&&Ao(l.scope.effects,R)};return y&&y.push(Z),Z}function zh(e,t,s){const i=this.proxy,n=Xe(e)?e.includes(".")?Na(i,e):()=>i[e]:e.bind(i,i);let o;ce(t)?o=t:(o=t.handler,s=t);const r=We;Fs(this);const l=Ta(n,o.bind(i),s);return r?Fs(r):xs(),l}function Na(e,t){const s=t.split(".");return()=>{let i=e;for(let n=0;n<s.length&&i;n++)i=i[s[n]];return i}}function ys(e,t){if(!Re(e)||e.__v_skip||(t=t||new Set,t.has(e)))return e;if(t.add(e),st(e))ys(e.value,t);else if(ie(e))for(let s=0;s<e.length;s++)ys(e[s],t);else if(sa(e)||Ns(e))e.forEach(s=>{ys(s,t)});else if(oa(e))for(const s in e)ys(e[s],t);return e}function jh(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return rn(()=>{e.isMounted=!0}),jo(()=>{e.isUnmounting=!0}),e}const pt=[Function,Array],Vh={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:pt,onEnter:pt,onAfterEnter:pt,onEnterCancelled:pt,onBeforeLeave:pt,onLeave:pt,onAfterLeave:pt,onLeaveCancelled:pt,onBeforeAppear:pt,onAppear:pt,onAfterAppear:pt,onAppearCancelled:pt},setup(e,{slots:t}){const s=Ef(),i=jh();let n;return()=>{const o=t.default&&Oa(t.default(),!0);if(!o||!o.length)return;let r=o[0];if(o.length>1){for(const C of o)if(C.type!==wt){r=C;break}}const l=ye(e),{mode:c}=l;if(i.isLeaving)return Wn(r);const d=nl(r);if(!d)return Wn(r);const g=ho(d,l,i,s);fo(d,g);const p=s.subTree,b=p&&nl(p);let y=!1;const{getTransitionKey:_}=d.type;if(_){const C=_();n===void 0?n=C:C!==n&&(n=C,y=!0)}if(b&&b.type!==wt&&(!bs(d,b)||y)){const C=ho(b,l,i,s);if(fo(b,C),c==="out-in")return i.isLeaving=!0,C.afterLeave=()=>{i.isLeaving=!1,s.update.active!==!1&&s.update()},Wn(r);c==="in-out"&&d.type!==wt&&(C.delayLeave=(x,R,Z)=>{const K=$a(i,b);K[String(b.key)]=b,x._leaveCb=()=>{R(),x._leaveCb=void 0,delete g.delayedLeave},g.delayedLeave=Z})}return r}}},Pa=Vh;function $a(e,t){const{leavingVNodes:s}=e;let i=s.get(t.type);return i||(i=Object.create(null),s.set(t.type,i)),i}function ho(e,t,s,i){const{appear:n,mode:o,persisted:r=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:d,onEnterCancelled:g,onBeforeLeave:p,onLeave:b,onAfterLeave:y,onLeaveCancelled:_,onBeforeAppear:C,onAppear:x,onAfterAppear:R,onAppearCancelled:Z}=t,K=String(e.key),te=$a(s,e),ne=(V,q)=>{V&&bt(V,i,9,q)},be=(V,q)=>{const he=q[1];ne(V,q),ie(V)?V.every(de=>de.length<=1)&&he():V.length<=1&&he()},ue={mode:o,persisted:r,beforeEnter(V){let q=l;if(!s.isMounted)if(n)q=C||l;else return;V._leaveCb&&V._leaveCb(!0);const he=te[K];he&&bs(e,he)&&he.el._leaveCb&&he.el._leaveCb(),ne(q,[V])},enter(V){let q=c,he=d,de=g;if(!s.isMounted)if(n)q=x||c,he=R||d,de=Z||g;else return;let B=!1;const pe=V._enterCb=_e=>{B||(B=!0,_e?ne(de,[V]):ne(he,[V]),ue.delayedLeave&&ue.delayedLeave(),V._enterCb=void 0)};q?be(q,[V,pe]):pe()},leave(V,q){const he=String(e.key);if(V._enterCb&&V._enterCb(!0),s.isUnmounting)return q();ne(p,[V]);let de=!1;const B=V._leaveCb=pe=>{de||(de=!0,q(),pe?ne(_,[V]):ne(y,[V]),V._leaveCb=void 0,te[he]===e&&delete te[he])};te[he]=e,b?be(b,[V,B]):B()},clone(V){return ho(V,t,s,i)}};return ue}function Wn(e){if(nn(e))return e=rs(e),e.children=null,e}function nl(e){return nn(e)?e.children?e.children[0]:void 0:e}function fo(e,t){e.shapeFlag&6&&e.component?fo(e.component.subTree,t):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Oa(e,t=!1,s){let i=[],n=0;for(let o=0;o<e.length;o++){let r=e[o];const l=s==null?r.key:String(s)+String(r.key!=null?r.key:o);r.type===Pe?(r.patchFlag&128&&n++,i=i.concat(Oa(r.children,t,l))):(t||r.type!==wt)&&i.push(l!=null?rs(r,{key:l}):r)}if(n>1)for(let o=0;o<i.length;o++)i[o].patchFlag=-2;return i}function Wt(e){return ce(e)?{setup:e,name:e.name}:e}const ei=e=>!!e.type.__asyncLoader,nn=e=>e.type.__isKeepAlive;function Uh(e,t){Ha(e,"a",t)}function qh(e,t){Ha(e,"da",t)}function Ha(e,t,s=We){const i=e.__wdc||(e.__wdc=()=>{let n=s;for(;n;){if(n.isDeactivated)return;n=n.parent}return e()});if(on(t,i,s),s){let n=s.parent;for(;n&&n.parent;)nn(n.parent.vnode)&&Wh(i,t,s,n),n=n.parent}}function Wh(e,t,s,i){const n=on(t,e,i,!0);ln(()=>{Ao(i[t],n)},s)}function on(e,t,s=We,i=!1){if(s){const n=s[e]||(s[e]=[]),o=t.__weh||(t.__weh=(...r)=>{if(s.isUnmounted)return;zs(),Fs(s);const l=bt(t,s,e,r);return xs(),js(),l});return i?n.unshift(o):n.push(o),o}}const Kt=e=>(t,s=We)=>(!ai||e==="sp")&&on(e,(...i)=>t(...i),s),Kh=Kt("bm"),rn=Kt("m"),Yh=Kt("bu"),Xh=Kt("u"),jo=Kt("bum"),ln=Kt("um"),Jh=Kt("sp"),Zh=Kt("rtg"),Gh=Kt("rtc");function Qh(e,t=We){on("ec",e,t)}function an(e,t){const s=it;if(s===null)return e;const i=hn(s)||s.proxy,n=e.dirs||(e.dirs=[]);for(let o=0;o<t.length;o++){let[r,l,c,d=He]=t[o];r&&(ce(r)&&(r={mounted:r,updated:r}),r.deep&&ys(l),n.push({dir:r,instance:i,value:l,oldValue:void 0,arg:c,modifiers:d}))}return e}function us(e,t,s,i){const n=e.dirs,o=t&&t.dirs;for(let r=0;r<n.length;r++){const l=n[r];o&&(l.oldValue=o[r].value);let c=l.dir[i];c&&(zs(),bt(c,s,8,[e.el,l,e,t]),js())}}const Ra="components",ef="directives";function Ne(e,t){return Ia(Ra,e,!0,t)||e}const tf=Symbol();function sf(e){return Ia(ef,e)}function Ia(e,t,s=!0,i=!1){const n=it||We;if(n){const o=n.type;if(e===Ra){const l=Pf(o,!1);if(l&&(l===t||l===Rt(t)||l===Qi(Rt(t))))return o}const r=ol(n[e]||o[e],t)||ol(n.appContext[e],t);return!r&&i?o:r}}function ol(e,t){return e&&(e[t]||e[Rt(t)]||e[Qi(Rt(t))])}function Ct(e,t,s,i){let n;const o=s&&s[i];if(ie(e)||Xe(e)){n=new Array(e.length);for(let r=0,l=e.length;r<l;r++)n[r]=t(e[r],r,void 0,o&&o[r])}else if(typeof e=="number"){n=new Array(e);for(let r=0;r<e;r++)n[r]=t(r+1,r,void 0,o&&o[r])}else if(Re(e))if(e[Symbol.iterator])n=Array.from(e,(r,l)=>t(r,l,void 0,o&&o[l]));else{const r=Object.keys(e);n=new Array(r.length);for(let l=0,c=r.length;l<c;l++){const d=r[l];n[l]=t(e[d],d,l,o&&o[l])}}else n=[];return s&&(s[i]=n),n}function ji(e,t,s={},i,n){if(it.isCE||it.parent&&ei(it.parent)&&it.parent.isCE)return t!=="default"&&(s.name=t),z("slot",s,i&&i());let o=e[t];o&&o._c&&(o._d=!1),N();const r=o&&Da(o(s)),l=De(Pe,{key:s.key||r&&r.key||`_${t}`},r||(i?i():[]),r&&e._===1?64:-2);return!n&&l.scopeId&&(l.slotScopeIds=[l.scopeId+"-s"]),o&&o._c&&(o._d=!0),l}function Da(e){return e.some(t=>Ui(t)?!(t.type===wt||t.type===Pe&&!Da(t.children)):!0)?e:null}const mo=e=>e?Ja(e)?hn(e)||e.proxy:mo(e.parent):null,ti=nt(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>mo(e.parent),$root:e=>mo(e.root),$emit:e=>e.emit,$options:e=>Vo(e),$forceUpdate:e=>e.f||(e.f=()=>zo(e.update)),$nextTick:e=>e.n||(e.n=Ca.bind(e.proxy)),$watch:e=>zh.bind(e)}),Kn=(e,t)=>e!==He&&!e.__isScriptSetup&&we(e,t),nf={get({_:e},t){const{ctx:s,setupState:i,data:n,props:o,accessCache:r,type:l,appContext:c}=e;let d;if(t[0]!=="$"){const y=r[t];if(y!==void 0)switch(y){case 1:return i[t];case 2:return n[t];case 4:return s[t];case 3:return o[t]}else{if(Kn(i,t))return r[t]=1,i[t];if(n!==He&&we(n,t))return r[t]=2,n[t];if((d=e.propsOptions[0])&&we(d,t))return r[t]=3,o[t];if(s!==He&&we(s,t))return r[t]=4,s[t];po&&(r[t]=0)}}const g=ti[t];let p,b;if(g)return t==="$attrs"&&ft(e,"get",t),g(e);if((p=l.__cssModules)&&(p=p[t]))return p;if(s!==He&&we(s,t))return r[t]=4,s[t];if(b=c.config.globalProperties,we(b,t))return b[t]},set({_:e},t,s){const{data:i,setupState:n,ctx:o}=e;return Kn(n,t)?(n[t]=s,!0):i!==He&&we(i,t)?(i[t]=s,!0):we(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(o[t]=s,!0)},has({_:{data:e,setupState:t,accessCache:s,ctx:i,appContext:n,propsOptions:o}},r){let l;return!!s[r]||e!==He&&we(e,r)||Kn(t,r)||(l=o[0])&&we(l,r)||we(i,r)||we(ti,r)||we(n.config.globalProperties,r)},defineProperty(e,t,s){return s.get!=null?e._.accessCache[t]=0:we(s,"value")&&this.set(e,t,s.value,null),Reflect.defineProperty(e,t,s)}};let po=!0;function of(e){const t=Vo(e),s=e.proxy,i=e.ctx;po=!1,t.beforeCreate&&rl(t.beforeCreate,e,"bc");const{data:n,computed:o,methods:r,watch:l,provide:c,inject:d,created:g,beforeMount:p,mounted:b,beforeUpdate:y,updated:_,activated:C,deactivated:x,beforeDestroy:R,beforeUnmount:Z,destroyed:K,unmounted:te,render:ne,renderTracked:be,renderTriggered:ue,errorCaptured:V,serverPrefetch:q,expose:he,inheritAttrs:de,components:B,directives:pe,filters:_e}=t;if(d&&rf(d,i,null,e.appContext.config.unwrapInjectedRef),r)for(const xe in r){const ve=r[xe];ce(ve)&&(i[xe]=ve.bind(s))}if(n){const xe=n.call(s,s);Re(xe)&&(e.data=Io(xe))}if(po=!0,o)for(const xe in o){const ve=o[xe],$e=ce(ve)?ve.bind(s,s):ce(ve.get)?ve.get.bind(s,s):Et,Ae=!ce(ve)&&ce(ve.set)?ve.set.bind(s):Et,ze=Vt({get:$e,set:Ae});Object.defineProperty(i,xe,{enumerable:!0,configurable:!0,get:()=>ze.value,set:je=>ze.value=je})}if(l)for(const xe in l)Fa(l[xe],i,s,xe);if(c){const xe=ce(c)?c.call(s):c;Reflect.ownKeys(xe).forEach(ve=>{Bh(ve,xe[ve])})}g&&rl(g,e,"c");function fe(xe,ve){ie(ve)?ve.forEach($e=>xe($e.bind(s))):ve&&xe(ve.bind(s))}if(fe(Kh,p),fe(rn,b),fe(Yh,y),fe(Xh,_),fe(Uh,C),fe(qh,x),fe(Qh,V),fe(Gh,be),fe(Zh,ue),fe(jo,Z),fe(ln,te),fe(Jh,q),ie(he))if(he.length){const xe=e.exposed||(e.exposed={});he.forEach(ve=>{Object.defineProperty(xe,ve,{get:()=>s[ve],set:$e=>s[ve]=$e})})}else e.exposed||(e.exposed={});ne&&e.render===Et&&(e.render=ne),de!=null&&(e.inheritAttrs=de),B&&(e.components=B),pe&&(e.directives=pe)}function rf(e,t,s=Et,i=!1){ie(e)&&(e=go(e));for(const n in e){const o=e[n];let r;Re(o)?"default"in o?r=Oi(o.from||n,o.default,!0):r=Oi(o.from||n):r=Oi(o),st(r)&&i?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>r.value,set:l=>r.value=l}):t[n]=r}}function rl(e,t,s){bt(ie(e)?e.map(i=>i.bind(t.proxy)):e.bind(t.proxy),t,s)}function Fa(e,t,s,i){const n=i.includes(".")?Na(s,i):()=>s[i];if(Xe(e)){const o=t[e];ce(o)&&Qe(n,o)}else if(ce(e))Qe(n,e.bind(s));else if(Re(e))if(ie(e))e.forEach(o=>Fa(o,t,s,i));else{const o=ce(e.handler)?e.handler.bind(s):t[e.handler];ce(o)&&Qe(n,o,e)}}function Vo(e){const t=e.type,{mixins:s,extends:i}=t,{mixins:n,optionsCache:o,config:{optionMergeStrategies:r}}=e.appContext,l=o.get(t);let c;return l?c=l:!n.length&&!s&&!i?c=t:(c={},n.length&&n.forEach(d=>Vi(c,d,r,!0)),Vi(c,t,r)),Re(t)&&o.set(t,c),c}function Vi(e,t,s,i=!1){const{mixins:n,extends:o}=t;o&&Vi(e,o,s,!0),n&&n.forEach(r=>Vi(e,r,s,!0));for(const r in t)if(!(i&&r==="expose")){const l=lf[r]||s&&s[r];e[r]=l?l(e[r],t[r]):t[r]}return e}const lf={data:ll,props:ps,emits:ps,methods:ps,computed:ps,beforeCreate:at,created:at,beforeMount:at,mounted:at,beforeUpdate:at,updated:at,beforeDestroy:at,beforeUnmount:at,destroyed:at,unmounted:at,activated:at,deactivated:at,errorCaptured:at,serverPrefetch:at,components:ps,directives:ps,watch:cf,provide:ll,inject:af};function ll(e,t){return t?e?function(){return nt(ce(e)?e.call(this,this):e,ce(t)?t.call(this,this):t)}:t:e}function af(e,t){return ps(go(e),go(t))}function go(e){if(ie(e)){const t={};for(let s=0;s<e.length;s++)t[e[s]]=e[s];return t}return e}function at(e,t){return e?[...new Set([].concat(e,t))]:t}function ps(e,t){return e?nt(nt(Object.create(null),e),t):t}function cf(e,t){if(!e)return t;if(!t)return e;const s=nt(Object.create(null),e);for(const i in t)s[i]=at(e[i],t[i]);return s}function uf(e,t,s,i=!1){const n={},o={};Di(o,un,1),e.propsDefaults=Object.create(null),Ba(e,t,n,o);for(const r in e.propsOptions[0])r in n||(n[r]=void 0);s?e.props=i?n:yh(n):e.type.props?e.props=n:e.props=o,e.attrs=o}function df(e,t,s,i){const{props:n,attrs:o,vnode:{patchFlag:r}}=e,l=ye(n),[c]=e.propsOptions;let d=!1;if((i||r>0)&&!(r&16)){if(r&8){const g=e.vnode.dynamicProps;for(let p=0;p<g.length;p++){let b=g[p];if(sn(e.emitsOptions,b))continue;const y=t[b];if(c)if(we(o,b))y!==o[b]&&(o[b]=y,d=!0);else{const _=Rt(b);n[_]=vo(c,l,_,y,e,!1)}else y!==o[b]&&(o[b]=y,d=!0)}}}else{Ba(e,t,n,o)&&(d=!0);let g;for(const p in l)(!t||!we(t,p)&&((g=Bs(p))===p||!we(t,g)))&&(c?s&&(s[p]!==void 0||s[g]!==void 0)&&(n[p]=vo(c,l,p,void 0,e,!0)):delete n[p]);if(o!==l)for(const p in o)(!t||!we(t,p))&&(delete o[p],d=!0)}d&&qt(e,"set","$attrs")}function Ba(e,t,s,i){const[n,o]=e.propsOptions;let r=!1,l;if(t)for(let c in t){if(Pi(c))continue;const d=t[c];let g;n&&we(n,g=Rt(c))?!o||!o.includes(g)?s[g]=d:(l||(l={}))[g]=d:sn(e.emitsOptions,c)||(!(c in i)||d!==i[c])&&(i[c]=d,r=!0)}if(o){const c=ye(s),d=l||He;for(let g=0;g<o.length;g++){const p=o[g];s[p]=vo(n,c,p,d[p],e,!we(d,p))}}return r}function vo(e,t,s,i,n,o){const r=e[s];if(r!=null){const l=we(r,"default");if(l&&i===void 0){const c=r.default;if(r.type!==Function&&ce(c)){const{propsDefaults:d}=n;s in d?i=d[s]:(Fs(n),i=d[s]=c.call(null,t),xs())}else i=c}r[0]&&(o&&!l?i=!1:r[1]&&(i===""||i===Bs(s))&&(i=!0))}return i}function za(e,t,s=!1){const i=t.propsCache,n=i.get(e);if(n)return n;const o=e.props,r={},l=[];let c=!1;if(!ce(e)){const g=p=>{c=!0;const[b,y]=za(p,t,!0);nt(r,b),y&&l.push(...y)};!s&&t.mixins.length&&t.mixins.forEach(g),e.extends&&g(e.extends),e.mixins&&e.mixins.forEach(g)}if(!o&&!c)return Re(e)&&i.set(e,Ts),Ts;if(ie(o))for(let g=0;g<o.length;g++){const p=Rt(o[g]);al(p)&&(r[p]=He)}else if(o)for(const g in o){const p=Rt(g);if(al(p)){const b=o[g],y=r[p]=ie(b)||ce(b)?{type:b}:Object.assign({},b);if(y){const _=dl(Boolean,y.type),C=dl(String,y.type);y[0]=_>-1,y[1]=C<0||_<C,(_>-1||we(y,"default"))&&l.push(p)}}}const d=[r,l];return Re(e)&&i.set(e,d),d}function al(e){return e[0]!=="$"}function cl(e){const t=e&&e.toString().match(/^\s*(function|class) (\w+)/);return t?t[2]:e===null?"null":""}function ul(e,t){return cl(e)===cl(t)}function dl(e,t){return ie(t)?t.findIndex(s=>ul(s,e)):ce(t)&&ul(t,e)?0:-1}const ja=e=>e[0]==="_"||e==="$stable",Uo=e=>ie(e)?e.map(Pt):[Pt(e)],hf=(e,t,s)=>{if(t._n)return t;const i=Qs((...n)=>Uo(t(...n)),s);return i._c=!1,i},Va=(e,t,s)=>{const i=e._ctx;for(const n in e){if(ja(n))continue;const o=e[n];if(ce(o))t[n]=hf(n,o,i);else if(o!=null){const r=Uo(o);t[n]=()=>r}}},Ua=(e,t)=>{const s=Uo(t);e.slots.default=()=>s},ff=(e,t)=>{if(e.vnode.shapeFlag&32){const s=t._;s?(e.slots=ye(t),Di(t,"_",s)):Va(t,e.slots={})}else e.slots={},t&&Ua(e,t);Di(e.slots,un,1)},mf=(e,t,s)=>{const{vnode:i,slots:n}=e;let o=!0,r=He;if(i.shapeFlag&32){const l=t._;l?s&&l===1?o=!1:(nt(n,t),!s&&l===1&&delete n._):(o=!t.$stable,Va(t,n)),r=t}else t&&(Ua(e,t),r={default:1});if(o)for(const l in n)!ja(l)&&!(l in r)&&delete n[l]};function qa(){return{app:null,config:{isNativeTag:Rd,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let pf=0;function gf(e,t){return function(i,n=null){ce(i)||(i=Object.assign({},i)),n!=null&&!Re(n)&&(n=null);const o=qa(),r=new Set;let l=!1;const c=o.app={_uid:pf++,_component:i,_props:n,_container:null,_context:o,_instance:null,version:If,get config(){return o.config},set config(d){},use(d,...g){return r.has(d)||(d&&ce(d.install)?(r.add(d),d.install(c,...g)):ce(d)&&(r.add(d),d(c,...g))),c},mixin(d){return o.mixins.includes(d)||o.mixins.push(d),c},component(d,g){return g?(o.components[d]=g,c):o.components[d]},directive(d,g){return g?(o.directives[d]=g,c):o.directives[d]},mount(d,g,p){if(!l){const b=z(i,n);return b.appContext=o,g&&t?t(b,d):e(b,d,p),l=!0,c._container=d,d.__vue_app__=c,hn(b.component)||b.component.proxy}},unmount(){l&&(e(null,c._container),delete c._container.__vue_app__)},provide(d,g){return o.provides[d]=g,c}};return c}}function bo(e,t,s,i,n=!1){if(ie(e)){e.forEach((b,y)=>bo(b,t&&(ie(t)?t[y]:t),s,i,n));return}if(ei(i)&&!n)return;const o=i.shapeFlag&4?hn(i.component)||i.component.proxy:i.el,r=n?null:o,{i:l,r:c}=e,d=t&&t.r,g=l.refs===He?l.refs={}:l.refs,p=l.setupState;if(d!=null&&d!==c&&(Xe(d)?(g[d]=null,we(p,d)&&(p[d]=null)):st(d)&&(d.value=null)),ce(c))ns(c,l,12,[r,g]);else{const b=Xe(c),y=st(c);if(b||y){const _=()=>{if(e.f){const C=b?we(p,c)?p[c]:g[c]:c.value;n?ie(C)&&Ao(C,o):ie(C)?C.includes(o)||C.push(o):b?(g[c]=[o],we(p,c)&&(p[c]=g[c])):(c.value=[o],e.k&&(g[e.k]=c.value))}else b?(g[c]=r,we(p,c)&&(p[c]=r)):y&&(c.value=r,e.k&&(g[e.k]=r))};r?(_.id=-1,ht(_,s)):_()}}}const ht=Fh;function vf(e){return bf(e)}function bf(e,t){const s=Vd();s.__VUE__=!0;const{insert:i,remove:n,patchProp:o,createElement:r,createText:l,createComment:c,setText:d,setElementText:g,parentNode:p,nextSibling:b,setScopeId:y=Et,insertStaticContent:_}=e,C=(m,v,S,E=null,L=null,$=null,D=!1,P=null,H=!!v.dynamicChildren)=>{if(m===v)return;m&&!bs(m,v)&&(E=Me(m),je(m,L,$,!0),m=null),v.patchFlag===-2&&(H=!1,v.dynamicChildren=null);const{type:A,ref:G,shapeFlag:Y}=v;switch(A){case cn:x(m,v,S,E);break;case wt:R(m,v,S,E);break;case Hi:m==null&&Z(v,S,E,D);break;case Pe:B(m,v,S,E,L,$,D,P,H);break;default:Y&1?ne(m,v,S,E,L,$,D,P,H):Y&6?pe(m,v,S,E,L,$,D,P,H):(Y&64||Y&128)&&A.process(m,v,S,E,L,$,D,P,H,Yt)}G!=null&&L&&bo(G,m&&m.ref,$,v||m,!v)},x=(m,v,S,E)=>{if(m==null)i(v.el=l(v.children),S,E);else{const L=v.el=m.el;v.children!==m.children&&d(L,v.children)}},R=(m,v,S,E)=>{m==null?i(v.el=c(v.children||""),S,E):v.el=m.el},Z=(m,v,S,E)=>{[m.el,m.anchor]=_(m.children,v,S,E,m.el,m.anchor)},K=({el:m,anchor:v},S,E)=>{let L;for(;m&&m!==v;)L=b(m),i(m,S,E),m=L;i(v,S,E)},te=({el:m,anchor:v})=>{let S;for(;m&&m!==v;)S=b(m),n(m),m=S;n(v)},ne=(m,v,S,E,L,$,D,P,H)=>{D=D||v.type==="svg",m==null?be(v,S,E,L,$,D,P,H):q(m,v,L,$,D,P,H)},be=(m,v,S,E,L,$,D,P)=>{let H,A;const{type:G,props:Y,shapeFlag:Q,transition:se,dirs:me}=m;if(H=m.el=r(m.type,$,Y&&Y.is,Y),Q&8?g(H,m.children):Q&16&&V(m.children,H,null,E,L,$&&G!=="foreignObject",D,P),me&&us(m,null,E,"created"),ue(H,m,m.scopeId,D,E),Y){for(const Ce in Y)Ce!=="value"&&!Pi(Ce)&&o(H,Ce,null,Y[Ce],$,m.children,E,L,X);"value"in Y&&o(H,"value",null,Y.value),(A=Y.onVnodeBeforeMount)&&Tt(A,E,m)}me&&us(m,null,E,"beforeMount");const Le=(!L||L&&!L.pendingBranch)&&se&&!se.persisted;Le&&se.beforeEnter(H),i(H,v,S),((A=Y&&Y.onVnodeMounted)||Le||me)&&ht(()=>{A&&Tt(A,E,m),Le&&se.enter(H),me&&us(m,null,E,"mounted")},L)},ue=(m,v,S,E,L)=>{if(S&&y(m,S),E)for(let $=0;$<E.length;$++)y(m,E[$]);if(L){let $=L.subTree;if(v===$){const D=L.vnode;ue(m,D,D.scopeId,D.slotScopeIds,L.parent)}}},V=(m,v,S,E,L,$,D,P,H=0)=>{for(let A=H;A<m.length;A++){const G=m[A]=P?Qt(m[A]):Pt(m[A]);C(null,G,v,S,E,L,$,D,P)}},q=(m,v,S,E,L,$,D)=>{const P=v.el=m.el;let{patchFlag:H,dynamicChildren:A,dirs:G}=v;H|=m.patchFlag&16;const Y=m.props||He,Q=v.props||He;let se;S&&ds(S,!1),(se=Q.onVnodeBeforeUpdate)&&Tt(se,S,v,m),G&&us(v,m,S,"beforeUpdate"),S&&ds(S,!0);const me=L&&v.type!=="foreignObject";if(A?he(m.dynamicChildren,A,P,S,E,me,$):D||ve(m,v,P,null,S,E,me,$,!1),H>0){if(H&16)de(P,v,Y,Q,S,E,L);else if(H&2&&Y.class!==Q.class&&o(P,"class",null,Q.class,L),H&4&&o(P,"style",Y.style,Q.style,L),H&8){const Le=v.dynamicProps;for(let Ce=0;Ce<Le.length;Ce++){const h=Le[Ce],u=Y[h],T=Q[h];(T!==u||h==="value")&&o(P,h,u,T,L,m.children,S,E,X)}}H&1&&m.children!==v.children&&g(P,v.children)}else!D&&A==null&&de(P,v,Y,Q,S,E,L);((se=Q.onVnodeUpdated)||G)&&ht(()=>{se&&Tt(se,S,v,m),G&&us(v,m,S,"updated")},E)},he=(m,v,S,E,L,$,D)=>{for(let P=0;P<v.length;P++){const H=m[P],A=v[P],G=H.el&&(H.type===Pe||!bs(H,A)||H.shapeFlag&70)?p(H.el):S;C(H,A,G,null,E,L,$,D,!0)}},de=(m,v,S,E,L,$,D)=>{if(S!==E){if(S!==He)for(const P in S)!Pi(P)&&!(P in E)&&o(m,P,S[P],null,D,v.children,L,$,X);for(const P in E){if(Pi(P))continue;const H=E[P],A=S[P];H!==A&&P!=="value"&&o(m,P,A,H,D,v.children,L,$,X)}"value"in E&&o(m,"value",S.value,E.value)}},B=(m,v,S,E,L,$,D,P,H)=>{const A=v.el=m?m.el:l(""),G=v.anchor=m?m.anchor:l("");let{patchFlag:Y,dynamicChildren:Q,slotScopeIds:se}=v;se&&(P=P?P.concat(se):se),m==null?(i(A,S,E),i(G,S,E),V(v.children,S,G,L,$,D,P,H)):Y>0&&Y&64&&Q&&m.dynamicChildren?(he(m.dynamicChildren,Q,S,L,$,D,P),(v.key!=null||L&&v===L.subTree)&&Wa(m,v,!0)):ve(m,v,S,G,L,$,D,P,H)},pe=(m,v,S,E,L,$,D,P,H)=>{v.slotScopeIds=P,m==null?v.shapeFlag&512?L.ctx.activate(v,S,E,D,H):_e(v,S,E,L,$,D,H):oe(m,v,H)},_e=(m,v,S,E,L,$,D)=>{const P=m.component=Lf(m,E,L);if(nn(m)&&(P.ctx.renderer=Yt),Mf(P),P.asyncDep){if(L&&L.registerDep(P,fe),!m.el){const H=P.subTree=z(wt);R(null,H,v,S)}return}fe(P,m,v,S,L,$,D)},oe=(m,v,S)=>{const E=v.component=m.component;if(Rh(m,v,S))if(E.asyncDep&&!E.asyncResolved){xe(E,v,S);return}else E.next=v,Th(E.update),E.update();else v.el=m.el,E.vnode=v},fe=(m,v,S,E,L,$,D)=>{const P=()=>{if(m.isMounted){let{next:G,bu:Y,u:Q,parent:se,vnode:me}=m,Le=G,Ce;ds(m,!1),G?(G.el=me.el,xe(m,G,D)):G=me,Y&&$i(Y),(Ce=G.props&&G.props.onVnodeBeforeUpdate)&&Tt(Ce,se,G,me),ds(m,!0);const h=qn(m),u=m.subTree;m.subTree=h,C(u,h,p(u.el),Me(u),m,L,$),G.el=h.el,Le===null&&Ih(m,h.el),Q&&ht(Q,L),(Ce=G.props&&G.props.onVnodeUpdated)&&ht(()=>Tt(Ce,se,G,me),L)}else{let G;const{el:Y,props:Q}=v,{bm:se,m:me,parent:Le}=m,Ce=ei(v);if(ds(m,!1),se&&$i(se),!Ce&&(G=Q&&Q.onVnodeBeforeMount)&&Tt(G,Le,v),ds(m,!0),Y&&qs){const h=()=>{m.subTree=qn(m),qs(Y,m.subTree,m,L,null)};Ce?v.type.__asyncLoader().then(()=>!m.isUnmounted&&h()):h()}else{const h=m.subTree=qn(m);C(null,h,S,E,m,L,$),v.el=h.el}if(me&&ht(me,L),!Ce&&(G=Q&&Q.onVnodeMounted)){const h=v;ht(()=>Tt(G,Le,h),L)}(v.shapeFlag&256||Le&&ei(Le.vnode)&&Le.vnode.shapeFlag&256)&&m.a&&ht(m.a,L),m.isMounted=!0,v=S=E=null}},H=m.effect=new $o(P,()=>zo(A),m.scope),A=m.update=()=>H.run();A.id=m.uid,ds(m,!0),A()},xe=(m,v,S)=>{v.component=m;const E=m.vnode.props;m.vnode=v,m.next=null,df(m,v.props,E,S),mf(m,v.children,S),zs(),sl(),js()},ve=(m,v,S,E,L,$,D,P,H=!1)=>{const A=m&&m.children,G=m?m.shapeFlag:0,Y=v.children,{patchFlag:Q,shapeFlag:se}=v;if(Q>0){if(Q&128){Ae(A,Y,S,E,L,$,D,P,H);return}else if(Q&256){$e(A,Y,S,E,L,$,D,P,H);return}}se&8?(G&16&&X(A,L,$),Y!==A&&g(S,Y)):G&16?se&16?Ae(A,Y,S,E,L,$,D,P,H):X(A,L,$,!0):(G&8&&g(S,""),se&16&&V(Y,S,E,L,$,D,P,H))},$e=(m,v,S,E,L,$,D,P,H)=>{m=m||Ts,v=v||Ts;const A=m.length,G=v.length,Y=Math.min(A,G);let Q;for(Q=0;Q<Y;Q++){const se=v[Q]=H?Qt(v[Q]):Pt(v[Q]);C(m[Q],se,S,null,L,$,D,P,H)}A>G?X(m,L,$,!0,!1,Y):V(v,S,E,L,$,D,P,H,Y)},Ae=(m,v,S,E,L,$,D,P,H)=>{let A=0;const G=v.length;let Y=m.length-1,Q=G-1;for(;A<=Y&&A<=Q;){const se=m[A],me=v[A]=H?Qt(v[A]):Pt(v[A]);if(bs(se,me))C(se,me,S,null,L,$,D,P,H);else break;A++}for(;A<=Y&&A<=Q;){const se=m[Y],me=v[Q]=H?Qt(v[Q]):Pt(v[Q]);if(bs(se,me))C(se,me,S,null,L,$,D,P,H);else break;Y--,Q--}if(A>Y){if(A<=Q){const se=Q+1,me=se<G?v[se].el:E;for(;A<=Q;)C(null,v[A]=H?Qt(v[A]):Pt(v[A]),S,me,L,$,D,P,H),A++}}else if(A>Q)for(;A<=Y;)je(m[A],L,$,!0),A++;else{const se=A,me=A,Le=new Map;for(A=me;A<=Q;A++){const le=v[A]=H?Qt(v[A]):Pt(v[A]);le.key!=null&&Le.set(le.key,A)}let Ce,h=0;const u=Q-me+1;let T=!1,W=0;const O=new Array(u);for(A=0;A<u;A++)O[A]=0;for(A=se;A<=Y;A++){const le=m[A];if(h>=u){je(le,L,$,!0);continue}let ke;if(le.key!=null)ke=Le.get(le.key);else for(Ce=me;Ce<=Q;Ce++)if(O[Ce-me]===0&&bs(le,v[Ce])){ke=Ce;break}ke===void 0?je(le,L,$,!0):(O[ke-me]=A+1,ke>=W?W=ke:T=!0,C(le,v[ke],S,null,L,$,D,P,H),h++)}const ee=T?wf(O):Ts;for(Ce=ee.length-1,A=u-1;A>=0;A--){const le=me+A,ke=v[le],Oe=le+1<G?v[le+1].el:E;O[A]===0?C(null,ke,S,Oe,L,$,D,P,H):T&&(Ce<0||A!==ee[Ce]?ze(ke,S,Oe,2):Ce--)}}},ze=(m,v,S,E,L=null)=>{const{el:$,type:D,transition:P,children:H,shapeFlag:A}=m;if(A&6){ze(m.component.subTree,v,S,E);return}if(A&128){m.suspense.move(v,S,E);return}if(A&64){D.move(m,v,S,Yt);return}if(D===Pe){i($,v,S);for(let Y=0;Y<H.length;Y++)ze(H[Y],v,S,E);i(m.anchor,v,S);return}if(D===Hi){K(m,v,S);return}if(E!==2&&A&1&&P)if(E===0)P.beforeEnter($),i($,v,S),ht(()=>P.enter($),L);else{const{leave:Y,delayLeave:Q,afterLeave:se}=P,me=()=>i($,v,S),Le=()=>{Y($,()=>{me(),se&&se()})};Q?Q($,me,Le):Le()}else i($,v,S)},je=(m,v,S,E=!1,L=!1)=>{const{type:$,props:D,ref:P,children:H,dynamicChildren:A,shapeFlag:G,patchFlag:Y,dirs:Q}=m;if(P!=null&&bo(P,null,S,m,!0),G&256){v.ctx.deactivate(m);return}const se=G&1&&Q,me=!ei(m);let Le;if(me&&(Le=D&&D.onVnodeBeforeUnmount)&&Tt(Le,v,m),G&6)Je(m.component,S,E);else{if(G&128){m.suspense.unmount(S,E);return}se&&us(m,null,v,"beforeUnmount"),G&64?m.type.remove(m,v,S,L,Yt,E):A&&($!==Pe||Y>0&&Y&64)?X(A,v,S,!1,!0):($===Pe&&Y&384||!L&&G&16)&&X(H,v,S),E&&At(m)}(me&&(Le=D&&D.onVnodeUnmounted)||se)&&ht(()=>{Le&&Tt(Le,v,m),se&&us(m,null,v,"unmounted")},S)},At=m=>{const{type:v,el:S,anchor:E,transition:L}=m;if(v===Pe){It(S,E);return}if(v===Hi){te(m);return}const $=()=>{n(S),L&&!L.persisted&&L.afterLeave&&L.afterLeave()};if(m.shapeFlag&1&&L&&!L.persisted){const{leave:D,delayLeave:P}=L,H=()=>D(S,$);P?P(m.el,$,H):H()}else $()},It=(m,v)=>{let S;for(;m!==v;)S=b(m),n(m),m=S;n(v)},Je=(m,v,S)=>{const{bum:E,scope:L,update:$,subTree:D,um:P}=m;E&&$i(E),L.stop(),$&&($.active=!1,je(D,m,v,S)),P&&ht(P,v),ht(()=>{m.isUnmounted=!0},v),v&&v.pendingBranch&&!v.isUnmounted&&m.asyncDep&&!m.asyncResolved&&m.suspenseId===v.pendingId&&(v.deps--,v.deps===0&&v.resolve())},X=(m,v,S,E=!1,L=!1,$=0)=>{for(let D=$;D<m.length;D++)je(m[D],v,S,E,L)},Me=m=>m.shapeFlag&6?Me(m.component.subTree):m.shapeFlag&128?m.suspense.next():b(m.anchor||m.el),Vs=(m,v,S)=>{m==null?v._vnode&&je(v._vnode,null,null,!0):C(v._vnode||null,m,v,null,null,null,S),sl(),La(),v._vnode=m},Yt={p:C,um:je,m:ze,r:At,mt:_e,mc:V,pc:ve,pbc:he,n:Me,o:e};let Us,qs;return t&&([Us,qs]=t(Yt)),{render:Vs,hydrate:Us,createApp:gf(Vs,Us)}}function ds({effect:e,update:t},s){e.allowRecurse=t.allowRecurse=s}function Wa(e,t,s=!1){const i=e.children,n=t.children;if(ie(i)&&ie(n))for(let o=0;o<i.length;o++){const r=i[o];let l=n[o];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=n[o]=Qt(n[o]),l.el=r.el),s||Wa(r,l)),l.type===cn&&(l.el=r.el)}}function wf(e){const t=e.slice(),s=[0];let i,n,o,r,l;const c=e.length;for(i=0;i<c;i++){const d=e[i];if(d!==0){if(n=s[s.length-1],e[n]<d){t[i]=n,s.push(i);continue}for(o=0,r=s.length-1;o<r;)l=o+r>>1,e[s[l]]<d?o=l+1:r=l;d<e[s[o]]&&(o>0&&(t[i]=s[o-1]),s[o]=i)}}for(o=s.length,r=s[o-1];o-- >0;)s[o]=r,r=t[r];return s}const yf=e=>e.__isTeleport,Pe=Symbol(void 0),cn=Symbol(void 0),wt=Symbol(void 0),Hi=Symbol(void 0),si=[];let St=null;function N(e=!1){si.push(St=e?null:[])}function kf(){si.pop(),St=si[si.length-1]||null}let li=1;function hl(e){li+=e}function Ka(e){return e.dynamicChildren=li>0?St||Ts:null,kf(),li>0&&St&&St.push(e),e}function j(e,t,s,i,n,o){return Ka(a(e,t,s,i,n,o,!0))}function De(e,t,s,i,n){return Ka(z(e,t,s,i,n,!0))}function Ui(e){return e?e.__v_isVNode===!0:!1}function bs(e,t){return e.type===t.type&&e.key===t.key}const un="__vInternal",Ya=({key:e})=>e??null,Ri=({ref:e,ref_key:t,ref_for:s})=>e!=null?Xe(e)||st(e)||ce(e)?{i:it,r:e,k:t,f:!!s}:e:null;function a(e,t=null,s=null,i=0,n=null,o=e===Pe?0:1,r=!1,l=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Ya(t),ref:t&&Ri(t),scopeId:Aa,slotScopeIds:null,children:s,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:o,patchFlag:i,dynamicProps:n,dynamicChildren:null,appContext:null,ctx:it};return l?(Wo(c,s),o&128&&e.normalize(c)):s&&(c.shapeFlag|=Xe(s)?8:16),li>0&&!r&&St&&(c.patchFlag>0||o&6)&&c.patchFlag!==32&&St.push(c),c}const z=_f;function _f(e,t=null,s=null,i=0,n=null,o=!1){if((!e||e===tf)&&(e=wt),Ui(e)){const l=rs(e,t,!0);return s&&Wo(l,s),li>0&&!o&&St&&(l.shapeFlag&6?St[St.indexOf(e)]=l:St.push(l)),l.patchFlag|=-2,l}if($f(e)&&(e=e.__vccOpts),t){t=xf(t);let{class:l,style:c}=t;l&&!Xe(l)&&(t.class=ct(l)),Re(c)&&(va(c)&&!ie(c)&&(c=nt({},c)),t.style=Lt(c))}const r=Xe(e)?1:Dh(e)?128:yf(e)?64:Re(e)?4:ce(e)?2:0;return a(e,t,s,i,n,r,o,!0)}function xf(e){return e?va(e)||un in e?nt({},e):e:null}function rs(e,t,s=!1){const{props:i,ref:n,patchFlag:o,children:r}=e,l=t?Xa(i||{},t):i;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&Ya(l),ref:t&&t.ref?s&&n?ie(n)?n.concat(Ri(t)):[n,Ri(t)]:Ri(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:r,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Pe?o===-1?16:o|16:o,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&rs(e.ssContent),ssFallback:e.ssFallback&&rs(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function qo(e=" ",t=0){return z(cn,null,e,t)}function dn(e,t){const s=z(Hi,null,e);return s.staticCount=t,s}function Se(e="",t=!1){return t?(N(),De(wt,null,e)):z(wt,null,e)}function Pt(e){return e==null||typeof e=="boolean"?z(wt):ie(e)?z(Pe,null,e.slice()):typeof e=="object"?Qt(e):z(cn,null,String(e))}function Qt(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:rs(e)}function Wo(e,t){let s=0;const{shapeFlag:i}=e;if(t==null)t=null;else if(ie(t))s=16;else if(typeof t=="object")if(i&65){const n=t.default;n&&(n._c&&(n._d=!1),Wo(e,n()),n._c&&(n._d=!0));return}else{s=32;const n=t._;!n&&!(un in t)?t._ctx=it:n===3&&it&&(it.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else ce(t)?(t={default:t,_ctx:it},s=32):(t=String(t),i&64?(s=16,t=[qo(t)]):s=8);e.children=t,e.shapeFlag|=s}function Xa(...e){const t={};for(let s=0;s<e.length;s++){const i=e[s];for(const n in i)if(n==="class")t.class!==i.class&&(t.class=ct([t.class,i.class]));else if(n==="style")t.style=Lt([t.style,i.style]);else if(Ji(n)){const o=t[n],r=i[n];r&&o!==r&&!(ie(o)&&o.includes(r))&&(t[n]=o?[].concat(o,r):r)}else n!==""&&(t[n]=i[n])}return t}function Tt(e,t,s,i=null){bt(e,t,7,[s,i])}const Cf=qa();let Sf=0;function Lf(e,t,s){const i=e.type,n=(t?t.appContext:e.appContext)||Cf,o={uid:Sf++,vnode:e,type:i,parent:t,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new Ud(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:za(i,n),emitsOptions:Ma(i,n),emit:null,emitted:null,propsDefaults:He,inheritAttrs:i.inheritAttrs,ctx:He,data:He,props:He,attrs:He,slots:He,refs:He,setupState:He,setupContext:null,suspense:s,suspenseId:s?s.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return o.ctx={_:o},o.root=t?t.root:o,o.emit=$h.bind(null,o),e.ce&&e.ce(o),o}let We=null;const Ef=()=>We||it,Fs=e=>{We=e,e.scope.on()},xs=()=>{We&&We.scope.off(),We=null};function Ja(e){return e.vnode.shapeFlag&4}let ai=!1;function Mf(e,t=!1){ai=t;const{props:s,children:i}=e.vnode,n=Ja(e);uf(e,s,n,t),ff(e,i);const o=n?Af(e,t):void 0;return ai=!1,o}function Af(e,t){const s=e.type;e.accessCache=Object.create(null),e.proxy=ba(new Proxy(e.ctx,nf));const{setup:i}=s;if(i){const n=e.setupContext=i.length>1?Nf(e):null;Fs(e),zs();const o=ns(i,e,0,[e.props,n]);if(js(),xs(),ia(o)){if(o.then(xs,xs),t)return o.then(r=>{fl(e,r,t)}).catch(r=>{tn(r,e,0)});e.asyncDep=o}else fl(e,o,t)}else Za(e,t)}function fl(e,t,s){ce(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:Re(t)&&(e.setupState=ka(t)),Za(e,s)}let ml;function Za(e,t,s){const i=e.type;if(!e.render){if(!t&&ml&&!i.render){const n=i.template||Vo(e).template;if(n){const{isCustomElement:o,compilerOptions:r}=e.appContext.config,{delimiters:l,compilerOptions:c}=i,d=nt(nt({isCustomElement:o,delimiters:l},r),c);i.render=ml(n,d)}}e.render=i.render||Et}Fs(e),zs(),of(e),js(),xs()}function Tf(e){return new Proxy(e.attrs,{get(t,s){return ft(e,"get","$attrs"),t[s]}})}function Nf(e){const t=i=>{e.exposed=i||{}};let s;return{get attrs(){return s||(s=Tf(e))},slots:e.slots,emit:e.emit,expose:t}}function hn(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(ka(ba(e.exposed)),{get(t,s){if(s in t)return t[s];if(s in ti)return ti[s](e)},has(t,s){return s in t||s in ti}}))}function Pf(e,t=!0){return ce(e)?e.displayName||e.name:e.name||t&&e.__name}function $f(e){return ce(e)&&"__vccOpts"in e}const Vt=(e,t)=>Eh(e,t,ai);function Of(e,t,s){const i=arguments.length;return i===2?Re(t)&&!ie(t)?Ui(t)?z(e,null,[t]):z(e,t):z(e,null,t):(i>3?s=Array.prototype.slice.call(arguments,2):i===3&&Ui(s)&&(s=[s]),z(e,t,s))}const Hf=Symbol(""),Rf=()=>Oi(Hf),If="3.2.47",Df="http://www.w3.org/2000/svg",ws=typeof document<"u"?document:null,pl=ws&&ws.createElement("template"),Ff={insert:(e,t,s)=>{t.insertBefore(e,s||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,s,i)=>{const n=t?ws.createElementNS(Df,e):ws.createElement(e,s?{is:s}:void 0);return e==="select"&&i&&i.multiple!=null&&n.setAttribute("multiple",i.multiple),n},createText:e=>ws.createTextNode(e),createComment:e=>ws.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>ws.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,s,i,n,o){const r=s?s.previousSibling:t.lastChild;if(n&&(n===o||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),s),!(n===o||!(n=n.nextSibling)););else{pl.innerHTML=i?`<svg>${e}</svg>`:e;const l=pl.content;if(i){const c=l.firstChild;for(;c.firstChild;)l.appendChild(c.firstChild);l.removeChild(c)}t.insertBefore(l,s)}return[r?r.nextSibling:t.firstChild,s?s.previousSibling:t.lastChild]}};function Bf(e,t,s){const i=e._vtc;i&&(t=(t?[t,...i]:[...i]).join(" ")),t==null?e.removeAttribute("class"):s?e.setAttribute("class",t):e.className=t}function zf(e,t,s){const i=e.style,n=Xe(s);if(s&&!n){if(t&&!Xe(t))for(const o in t)s[o]==null&&wo(i,o,"");for(const o in s)wo(i,o,s[o])}else{const o=i.display;n?t!==s&&(i.cssText=s):t&&e.removeAttribute("style"),"_vod"in e&&(i.display=o)}}const gl=/\s*!important$/;function wo(e,t,s){if(ie(s))s.forEach(i=>wo(e,t,i));else if(s==null&&(s=""),t.startsWith("--"))e.setProperty(t,s);else{const i=jf(e,t);gl.test(s)?e.setProperty(Bs(i),s.replace(gl,""),"important"):e[i]=s}}const vl=["Webkit","Moz","ms"],Yn={};function jf(e,t){const s=Yn[t];if(s)return s;let i=Rt(t);if(i!=="filter"&&i in e)return Yn[t]=i;i=Qi(i);for(let n=0;n<vl.length;n++){const o=vl[n]+i;if(o in e)return Yn[t]=o}return t}const bl="http://www.w3.org/1999/xlink";function Vf(e,t,s,i,n){if(i&&t.startsWith("xlink:"))s==null?e.removeAttributeNS(bl,t.slice(6,t.length)):e.setAttributeNS(bl,t,s);else{const o=Hd(t);s==null||o&&!ea(s)?e.removeAttribute(t):e.setAttribute(t,o?"":s)}}function Uf(e,t,s,i,n,o,r){if(t==="innerHTML"||t==="textContent"){i&&r(i,n,o),e[t]=s??"";return}if(t==="value"&&e.tagName!=="PROGRESS"&&!e.tagName.includes("-")){e._value=s;const c=s??"";(e.value!==c||e.tagName==="OPTION")&&(e.value=c),s==null&&e.removeAttribute(t);return}let l=!1;if(s===""||s==null){const c=typeof e[t];c==="boolean"?s=ea(s):s==null&&c==="string"?(s="",l=!0):c==="number"&&(s=0,l=!0)}try{e[t]=s}catch{}l&&e.removeAttribute(t)}function As(e,t,s,i){e.addEventListener(t,s,i)}function qf(e,t,s,i){e.removeEventListener(t,s,i)}function Wf(e,t,s,i,n=null){const o=e._vei||(e._vei={}),r=o[t];if(i&&r)r.value=i;else{const[l,c]=Kf(t);if(i){const d=o[t]=Jf(i,n);As(e,l,d,c)}else r&&(qf(e,l,r,c),o[t]=void 0)}}const wl=/(?:Once|Passive|Capture)$/;function Kf(e){let t;if(wl.test(e)){t={};let i;for(;i=e.match(wl);)e=e.slice(0,e.length-i[0].length),t[i[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):Bs(e.slice(2)),t]}let Xn=0;const Yf=Promise.resolve(),Xf=()=>Xn||(Yf.then(()=>Xn=0),Xn=Date.now());function Jf(e,t){const s=i=>{if(!i._vts)i._vts=Date.now();else if(i._vts<=s.attached)return;bt(Zf(i,s.value),t,5,[i])};return s.value=e,s.attached=Xf(),s}function Zf(e,t){if(ie(t)){const s=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{s.call(e),e._stopped=!0},t.map(i=>n=>!n._stopped&&i&&i(n))}else return t}const yl=/^on[a-z]/,Gf=(e,t,s,i,n=!1,o,r,l,c)=>{t==="class"?Bf(e,i,n):t==="style"?zf(e,s,i):Ji(t)?Mo(t)||Wf(e,t,s,i,r):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):Qf(e,t,i,n))?Uf(e,t,i,o,r,l,c):(t==="true-value"?e._trueValue=i:t==="false-value"&&(e._falseValue=i),Vf(e,t,i,n))};function Qf(e,t,s,i){return i?!!(t==="innerHTML"||t==="textContent"||t in e&&yl.test(t)&&ce(s)):t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA"||yl.test(t)&&Xe(s)?!1:t in e}const Zt="transition",Ks="animation",fn=(e,{slots:t})=>Of(Pa,em(e),t);fn.displayName="Transition";const Ga={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String};fn.props=nt({},Pa.props,Ga);const hs=(e,t=[])=>{ie(e)?e.forEach(s=>s(...t)):e&&e(...t)},kl=e=>e?ie(e)?e.some(t=>t.length>1):e.length>1:!1;function em(e){const t={};for(const B in e)B in Ga||(t[B]=e[B]);if(e.css===!1)return t;const{name:s="v",type:i,duration:n,enterFromClass:o=`${s}-enter-from`,enterActiveClass:r=`${s}-enter-active`,enterToClass:l=`${s}-enter-to`,appearFromClass:c=o,appearActiveClass:d=r,appearToClass:g=l,leaveFromClass:p=`${s}-leave-from`,leaveActiveClass:b=`${s}-leave-active`,leaveToClass:y=`${s}-leave-to`}=e,_=tm(n),C=_&&_[0],x=_&&_[1],{onBeforeEnter:R,onEnter:Z,onEnterCancelled:K,onLeave:te,onLeaveCancelled:ne,onBeforeAppear:be=R,onAppear:ue=Z,onAppearCancelled:V=K}=t,q=(B,pe,_e)=>{fs(B,pe?g:l),fs(B,pe?d:r),_e&&_e()},he=(B,pe)=>{B._isLeaving=!1,fs(B,p),fs(B,y),fs(B,b),pe&&pe()},de=B=>(pe,_e)=>{const oe=B?ue:Z,fe=()=>q(pe,B,_e);hs(oe,[pe,fe]),_l(()=>{fs(pe,B?c:o),Gt(pe,B?g:l),kl(oe)||xl(pe,i,C,fe)})};return nt(t,{onBeforeEnter(B){hs(R,[B]),Gt(B,o),Gt(B,r)},onBeforeAppear(B){hs(be,[B]),Gt(B,c),Gt(B,d)},onEnter:de(!1),onAppear:de(!0),onLeave(B,pe){B._isLeaving=!0;const _e=()=>he(B,pe);Gt(B,p),nm(),Gt(B,b),_l(()=>{B._isLeaving&&(fs(B,p),Gt(B,y),kl(te)||xl(B,i,x,_e))}),hs(te,[B,_e])},onEnterCancelled(B){q(B,!1),hs(K,[B])},onAppearCancelled(B){q(B,!0),hs(V,[B])},onLeaveCancelled(B){he(B),hs(ne,[B])}})}function tm(e){if(e==null)return null;if(Re(e))return[Jn(e.enter),Jn(e.leave)];{const t=Jn(e);return[t,t]}}function Jn(e){return jd(e)}function Gt(e,t){t.split(/\s+/).forEach(s=>s&&e.classList.add(s)),(e._vtc||(e._vtc=new Set)).add(t)}function fs(e,t){t.split(/\s+/).forEach(i=>i&&e.classList.remove(i));const{_vtc:s}=e;s&&(s.delete(t),s.size||(e._vtc=void 0))}function _l(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let sm=0;function xl(e,t,s,i){const n=e._endId=++sm,o=()=>{n===e._endId&&i()};if(s)return setTimeout(o,s);const{type:r,timeout:l,propCount:c}=im(e,t);if(!r)return i();const d=r+"end";let g=0;const p=()=>{e.removeEventListener(d,b),o()},b=y=>{y.target===e&&++g>=c&&p()};setTimeout(()=>{g<c&&p()},l+1),e.addEventListener(d,b)}function im(e,t){const s=window.getComputedStyle(e),i=_=>(s[_]||"").split(", "),n=i(`${Zt}Delay`),o=i(`${Zt}Duration`),r=Cl(n,o),l=i(`${Ks}Delay`),c=i(`${Ks}Duration`),d=Cl(l,c);let g=null,p=0,b=0;t===Zt?r>0&&(g=Zt,p=r,b=o.length):t===Ks?d>0&&(g=Ks,p=d,b=c.length):(p=Math.max(r,d),g=p>0?r>d?Zt:Ks:null,b=g?g===Zt?o.length:c.length:0);const y=g===Zt&&/\b(transform|all)(,|$)/.test(i(`${Zt}Property`).toString());return{type:g,timeout:p,propCount:b,hasTransform:y}}function Cl(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((s,i)=>Sl(s)+Sl(e[i])))}function Sl(e){return Number(e.slice(0,-1).replace(",","."))*1e3}function nm(){return document.body.offsetHeight}const Ll=e=>{const t=e.props["onUpdate:modelValue"]||!1;return ie(t)?s=>$i(t,s):t};function om(e){e.target.composing=!0}function El(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Qa={created(e,{modifiers:{lazy:t,trim:s,number:i}},n){e._assign=Ll(n);const o=i||n.props&&n.props.type==="number";As(e,t?"change":"input",r=>{if(r.target.composing)return;let l=e.value;s&&(l=l.trim()),o&&(l=ro(l)),e._assign(l)}),s&&As(e,"change",()=>{e.value=e.value.trim()}),t||(As(e,"compositionstart",om),As(e,"compositionend",El),As(e,"change",El))},mounted(e,{value:t}){e.value=t??""},beforeUpdate(e,{value:t,modifiers:{lazy:s,trim:i,number:n}},o){if(e._assign=Ll(o),e.composing||document.activeElement===e&&e.type!=="range"&&(s||i&&e.value.trim()===t||(n||e.type==="number")&&ro(e.value)===t))return;const r=t??"";e.value!==r&&(e.value=r)}},rm=["ctrl","shift","alt","meta"],lm={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,t)=>rm.some(s=>e[`${s}Key`]&&!t.includes(s))},Ko=(e,t)=>(s,...i)=>{for(let n=0;n<t.length;n++){const o=lm[t[n]];if(o&&o(s,t))return}return e(s,...i)},am={beforeMount(e,{value:t},{transition:s}){e._vod=e.style.display==="none"?"":e.style.display,s&&t?s.beforeEnter(e):Ys(e,t)},mounted(e,{value:t},{transition:s}){s&&t&&s.enter(e)},updated(e,{value:t,oldValue:s},{transition:i}){!t!=!s&&(i?t?(i.beforeEnter(e),Ys(e,!0),i.enter(e)):i.leave(e,()=>{Ys(e,!1)}):Ys(e,t))},beforeUnmount(e,{value:t}){Ys(e,t)}};function Ys(e,t){e.style.display=t?e._vod:"none"}const cm=nt({patchProp:Gf},Ff);let Ml;function um(){return Ml||(Ml=vf(cm))}const dm=(...e)=>{const t=um().createApp(...e),{mount:s}=t;return t.mount=i=>{const n=hm(i);if(!n)return;const o=t._component;!ce(o)&&!o.render&&!o.template&&(o.template=n.innerHTML),n.innerHTML="";const r=s(n,!1,n instanceof SVGElement);return n instanceof Element&&(n.removeAttribute("v-cloak"),n.setAttribute("data-v-app","")),r},t};function hm(e){return Xe(e)?document.querySelector(e):e}const Ke=(e,t)=>{const s=e.__vccOpts||e;for(const[i,n]of t)s[i]=n;return s},fm={data(){return{previewMode:"desktop"}},methods:{setPreviewMode(e){this.previewMode=e,this.emulatorSet(e)},emulatorSet(e){var t={tablet:800,phone:400,desktop:"100%"},s=function(i){var n=t[i];typeof n=="number"&&(n=n+"px"),mw.app.canvas.getFrame().style.width=n};s(e)}}},mm={id:"preview-nav",class:"toolbar-nav toolbar-nav-hover"},pm={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 48 36.17",style:{"enable-background":"new 0 0 48 36.17"},"xml:space":"preserve"},gm=a("path",{d:`M25.59,34.11h-3.58v-6.59h3.58V34.11z M14.16,34.88L14.16,34.88c0-0.71,0.58-1.29,1.29-1.29h17.1\r
                        c0.71,0,1.29,0.58,1.29,1.29v0c0,0.71-0.58,1.29-1.29,1.29h-17.1C14.74,36.17,14.16,35.59,14.16,34.88z`},null,-1),vm=a("path",{class:"st0",d:`M3.32,27.6h41.35c1.53,0,2.76-1.24,2.76-2.76V3.24c0-1.53-1.24-2.76-2.76-2.76H3.32\r
                        c-1.53,0-2.76,1.24-2.76,2.76v21.6C0.56,26.37,1.8,27.6,3.32,27.6z`},null,-1),bm=[gm,vm],wm={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 48 48",style:{"enable-background":"new 0 0 48 48"},"xml:space":"preserve"},ym=a("path",{class:"st0",d:`M24.45,39.5c0.56,0,1.03-0.18,1.39-0.55c0.37-0.37,0.55-0.83,0.55-1.39s-0.18-1.03-0.55-1.39\r
                    c-0.37-0.37-0.83-0.55-1.39-0.55s-1.03,0.18-1.39,0.55c-0.37,0.37-0.55,0.83-0.55,1.39s0.18,1.03,0.55,1.39\r
                    C23.42,39.32,23.88,39.5,24.45,39.5z M7,46c-0.8,0-1.5-0.3-2.1-0.9C4.3,44.5,4,43.8,4,43V5c0-0.8,0.3-1.5,0.9-2.1C5.5,2.3,6.2,2,7,2\r
                    h34c0.8,0,1.5,0.3,2.1,0.9C43.7,3.5,44,4.2,44,5v38c0,0.8-0.3,1.5-0.9,2.1C42.5,45.7,41.8,46,41,46H7z`},null,-1),km=[ym],_m={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 48 48",style:{"enable-background":"new 0 0 48 48"},"xml:space":"preserve"},xm=a("path",{class:"st0",d:`M18,11.5c0.43,0,0.79-0.14,1.08-0.43c0.28-0.28,0.42-0.64,0.42-1.07s-0.14-0.79-0.42-1.07\r
                    C18.79,8.64,18.43,8.5,18,8.5s-0.79,0.14-1.08,0.43C16.64,9.21,16.5,9.57,16.5,10s0.14,0.79,0.42,1.07\r
                    C17.21,11.36,17.57,11.5,18,11.5z M13,46c-0.8,0-1.5-0.3-2.1-0.9C10.3,44.5,10,43.8,10,43V5c0-0.8,0.3-1.5,0.9-2.1\r
                    C11.5,2.3,12.2,2,13,2h22c0.8,0,1.5,0.3,2.1,0.9C37.7,3.5,38,4.2,38,5v38c0,0.8-0.3,1.5-0.9,2.1C36.5,45.7,35.8,46,35,46H13z`},null,-1),Cm=[xm];function Sm(e,t,s,i,n,o){return N(),j("div",null,[a("nav",mm,[a("span",{onClick:t[0]||(t[0]=r=>o.setPreviewMode("desktop")),"data-preview":"desktop",class:ct([n.previewMode=="desktop"?"active":""])},[(N(),j("svg",pm,bm))],2),a("span",{onClick:t[1]||(t[1]=r=>o.setPreviewMode("tablet")),"data-preview":"tablet",class:ct([n.previewMode=="tablet"?"active":""])},[(N(),j("svg",wm,km))],2),a("span",{onClick:t[2]||(t[2]=r=>o.setPreviewMode("phone")),"data-preview":"phone",class:ct([n.previewMode=="phone"?"active":""])},[(N(),j("svg",_m,Cm))],2)])])}const Lm=Ke(fm,[["render",Sm]]),Em={data(){},mounted(){mw.app.on("ready",()=>{new Pc,_d()})}},Mm=a("div",{class:"toolbar-nav",id:"mw-live-edit-editor"},null,-1),Am=[Mm];function Tm(e,t,s,i,n,o){return N(),j("div",null,Am)}const Nm=Ke(Em,[["render",Tm]]),Pm={},$m=dn('<button class="mw-le-btn mw-le-btn-icon" id="toolbar-undo" disabled><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12.5,8C9.85,8 7.45,9 5.6,10.6L2,7V16H11L7.38,12.38C8.77,11.22 10.54,10.5 12.5,10.5C16.04,10.5 19.05,12.81 20.1,16L22.47,15.22C21.08,11.03 17.15,8 12.5,8Z"></path></svg></button><button class="mw-le-btn mw-le-btn-icon" id="toolbar-redo" disabled><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.4,10.6C16.55,9 14.15,8 11.5,8C6.85,8 2.92,11.03 1.54,15.22L3.9,16C4.95,12.81 7.95,10.5 11.5,10.5C13.45,10.5 15.23,11.22 16.62,12.38L13,16H22V7L18.4,10.6Z"></path></svg></button>',2);function Om(e,t){return $m}const Hm=Ke(Pm,[["render",Om]]),Rm={data(){}},Im={class:"mw-le-btn mw-le-btn-primary",id:"save-button"};function Dm(e,t,s,i,n,o){return N(),j("span",Im," Save ")}const Fm=Ke(Rm,[["render",Dm]]),Bm={components:{SaveButton:Fm,UndoRedo:Hm,Editor:Nm,ResolutionSwitch:Lm},data(){}},zm={id:"toolbar"},jm={class:"toolbar-nav toolbar-nav-hover"},Vm={href:"",class:"mw-le-btn mw-le-btn-icon mw-le-btn-primary2"},Um={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",style:{width:"32px"}},qm=a("path",{d:"M21,11H6.83L10.41,7.41L9,6L3,12L9,18L10.41,16.58L6.83,13H21V11Z"},null,-1),Wm=[qm],Km={class:"toolbar-col"},Ym={class:"toolbar-nav toolbar-nav-hover"},Xm=a("span",{style:{width:"50px"}},null,-1),Jm=a("span",{class:"mw-le-btn mw-le-btn-icon",id:"preview-button",onclick:"pagePreviewToggle()"},[a("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},[a("title",null,"eye"),a("path",{d:"M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17M12,4.5C7,4.5 2.73,7.61 1,12C2.73,16.39 7,19.5 12,19.5C17,19.5 21.27,16.39 23,12C21.27,7.61 17,4.5 12,4.5Z"})])],-1),Zm=dn('<div id="user-menu-wrapper"><span class="mw-le-hamburger" id="toolbar-user-menu-button"><span></span><span></span><span></span></span><div id="user-menu" class="mw-le-nav-box"><div class="mw-le-nav-box-content" id="user-menu-header"><small>Project</small><h3>Boris Website</h3><span class="mw-le-btn mw-le-btn-sm"> In Test Period </span><span class="mw-le-btn mw-le-btn-sm mw-le-btn-primary2"> Upgrade </span></div><nav><a href=""><svg viewBox="0 0 40 40"><path d="M20 27.3l2.1-2.1-3.7-3.7h9.1v-3h-9.1l3.7-3.7-2.1-2.1-7.3 7.3 7.3 7.3zM20 40c-2.73 0-5.32-.52-7.75-1.58-2.43-1.05-4.56-2.48-6.38-4.3s-3.25-3.94-4.3-6.38S0 22.73 0 20c0-2.77.53-5.37 1.57-7.8s2.48-4.55 4.3-6.35 3.94-3.22 6.38-4.28S17.27 0 20 0c2.77 0 5.37.53 7.8 1.57s4.55 2.48 6.35 4.28c1.8 1.8 3.23 3.92 4.28 6.35C39.48 14.63 40 17.23 40 20c0 2.73-.52 5.32-1.58 7.75-1.05 2.43-2.48 4.56-4.28 6.38-1.8 1.82-3.92 3.25-6.35 4.3C25.37 39.48 22.77 40 20 40zm0-3c4.73 0 8.75-1.66 12.05-4.97C35.35 28.71 37 24.7 37 20c0-4.73-1.65-8.75-4.95-12.05C28.75 4.65 24.73 3 20 3c-4.7 0-8.71 1.65-12.02 4.95S3 15.27 3 20c0 4.7 1.66 8.71 4.98 12.03C11.29 35.34 15.3 37 20 37z"></path></svg> Back to Admin </a><a href=""><svg xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 40 40" xml:space="preserve" enable-background="new 0 0 40 40"><path d="M14.7 23c-2 0-3.6-.7-5-2-1.3-1.4-2-3-2-4.9 0-1.9.7-3.5 2-4.9 1.4-1.3 3-2 5-2 1.8 0 3.5.7 4.8 2 1.4 1.4 2 3 2 4.9 0 1.9-.6 3.5-2 4.9-1.3 1.3-3 2-4.8 2zm0-3a3.8 3.8 0 0 0 3.9-3.9c0-1.1-.4-2-1.2-2.8a3.8 3.8 0 0 0-2.7-1c-1.1 0-2 .3-2.8 1-.8.8-1.1 1.7-1.1 2.8 0 1 .3 2 1.1 2.8.8.7 1.7 1.1 2.8 1.1zm15 5.3c-1.5 0-2.7-.5-3.8-1.6-1-1-1.5-2.2-1.5-3.7s.5-2.7 1.6-3.8 2.2-1.5 3.7-1.5 2.7.5 3.8 1.6S35 18.4 35 20s-.5 2.7-1.6 3.8-2.2 1.5-3.7 1.5zM17.1 36.8c1.6-3 3.6-5 6.1-6S28 29 29.7 29a12.6 12.6 0 0 1 4.2.6A18.3 18.3 0 0 0 37 20c0-4.7-1.6-8.8-5-12-3.3-3.3-7.3-5-12-5S11.2 4.7 8 8a16.8 16.8 0 0 0-2.2 21.2 19.2 19.2 0 0 1 13.8-1.4 13.6 13.6 0 0 0-3.2 2.2H14.8a16.2 16.2 0 0 0-7.1 1.6c1.2 1.4 2.7 2.5 4.3 3.4s3.4 1.5 5.2 1.8zM20 40A20.3 20.3 0 0 1 1.6 27.7 19.4 19.4 0 0 1 5.9 5.8a20.2 20.2 0 0 1 21.9-4.2A20.3 20.3 0 0 1 40 20a20.3 20.3 0 0 1-12.2 18.4c-2.4 1-5 1.6-7.8 1.6z"></path></svg> Users </a><a href=""><svg viewBox="0 0 40 40"><path d="M15.4 40l-1-6.3c-.63-.23-1.3-.55-2-.95-.7-.4-1.32-.82-1.85-1.25l-5.9 2.7L0 26l5.4-3.95a5.1 5.1 0 01-.12-1.02c-.02-.39-.03-.73-.03-1.03s.01-.64.02-1.02c.02-.38.06-.73.12-1.02L0 14l4.65-8.2 5.9 2.7c.53-.43 1.15-.85 1.85-1.25.7-.4 1.37-.7 2-.9l1-6.35h9.2l1 6.3c.63.23 1.31.54 2.02.93.72.38 1.33.81 1.83 1.27l5.9-2.7L40 14l-5.4 3.85c.07.33.11.69.12 1.08a19.5 19.5 0 010 2.13c-.02.37-.06.72-.12 1.05L40 26l-4.65 8.2-5.9-2.7c-.53.43-1.14.86-1.83 1.28-.68.42-1.36.72-2.02.92l-1 6.3h-9.2zM20 26.5c1.8 0 3.33-.63 4.6-1.9s1.9-2.8 1.9-4.6-.63-3.33-1.9-4.6-2.8-1.9-4.6-1.9-3.33.63-4.6 1.9-1.9 2.8-1.9 4.6.63 3.33 1.9 4.6 2.8 1.9 4.6 1.9zm0-3c-.97 0-1.79-.34-2.48-1.02-.68-.68-1.02-1.51-1.02-2.48s.34-1.79 1.02-2.48c.68-.68 1.51-1.02 2.48-1.02s1.79.34 2.48 1.02c.68.68 1.02 1.51 1.02 2.48s-.34 1.79-1.02 2.48c-.69.68-1.51 1.02-2.48 1.02zM17.8 37h4.4l.7-5.6c1.1-.27 2.14-.68 3.12-1.25s1.88-1.25 2.68-2.05l5.3 2.3 2-3.6-4.7-3.45c.13-.57.24-1.12.33-1.67s.12-1.11.12-1.67-.03-1.12-.1-1.67-.18-1.11-.35-1.67L36 13.2l-2-3.6-5.3 2.3c-.77-.87-1.63-1.59-2.6-2.17s-2.03-.96-3.2-1.12L22.2 3h-4.4l-.7 5.6c-1.13.23-2.19.63-3.17 1.2s-1.86 1.27-2.62 2.1L6 9.6l-2 3.6 4.7 3.45c-.13.57-.24 1.12-.32 1.67s-.13 1.11-.13 1.68.04 1.12.12 1.67c.08.55.19 1.11.32 1.67L4 26.8l2 3.6 5.3-2.3c.8.8 1.69 1.48 2.68 2.05s2.02.98 3.12 1.25l.7 5.6z"></path></svg> Website Settings </a><a href=""><svg viewBox="0 0 40 32.29"><path d="M40 3v26c0 .8-.3 1.5-.9 2.1-.6.6-1.3.9-2.1.9H3c-.8 0-1.5-.3-2.1-.9-.6-.6-.9-1.3-.9-2.1V3C0 2.2.3 1.5.9.9 1.5.3 2.2 0 3 0h34c.8 0 1.5.3 2.1.9.6.6.9 1.3.9 2.1zM3 8.45h34V3H3v5.45zm0 6.45V29h34V14.9H3zM3 29V3v26z"></path></svg> Plans and Payments </a><a href=""><svg viewBox="0 0 36 36.1"><path d="M3 36.1c-.8 0-1.5-.3-2.1-.9-.6-.6-.9-1.3-.9-2.1V22.6h3v10.5h30V3H3v10.6H0V3C0 2.2.3 1.5.9.9S2.2 0 3 0h30c.8 0 1.5.3 2.1.9.6.6.9 1.3.9 2.1v30.1c0 .8-.3 1.5-.9 2.1-.6.6-1.3.9-2.1.9H3zm11.65-8.35L12.4 25.5l5.9-5.9H0v-3h18.3l-5.9-5.9 2.25-2.25 9.65 9.65-9.65 9.65z"></path></svg> Log out </a></nav></div></div>',1);function Gm(e,t,s,i,n,o){const r=Ne("ResolutionSwitch"),l=Ne("Editor"),c=Ne("UndoRedo"),d=Ne("SaveButton");return N(),j("div",zm,[a("div",jm,[a("a",Vm,[(N(),j("svg",Um,Wm))])]),z(r),z(l),a("div",Km,[a("div",Ym,[z(c),z(d)]),Xm,Jm,Zm])])}const Qm=Ke(Bm,[["render",Gm]]);function ep(e,t){return N(),De("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"2",stroke:"currentColor","aria-hidden":"true"},[z("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"}),z("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15 12a3 3 0 11-6 0 3 3 0 016 0z"})])}function tp(e,t){return N(),De("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"2",stroke:"currentColor","aria-hidden":"true"},[z("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"})])}function sp(e,t){return N(),De("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"2",stroke:"currentColor","aria-hidden":"true"},[z("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"}),z("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 12a9 9 0 11-18 0 9 9 0 0118 0z"})])}const ip={},np={version:"1.1",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 129 129","xmlns:xlink":"http://www.w3.org/1999/xlink"},op=a("g",null,[a("g",null,[a("path",{d:"m10.5,58.9h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3c0-2.3-1.8-4.1-4.1-4.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.2 1.9,4.1 4.1,4.1zm4.1-44.3h36.1v36.1h-36.1v-36.1z"}),a("path",{d:"m122.6,10.5c0-2.3-1.8-4.1-4.1-4.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.3 1.8,4.1 4.1,4.1h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3zm-8.2,40.2h-36.1v-36.1h36.1v36.1z"}),a("path",{d:"m10.5,122.6h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3c0-2.3-1.8-4.1-4.1-4.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.2 1.9,4.1 4.1,4.1zm4.1-44.3h36.1v36.1h-36.1v-36.1z"}),a("path",{d:"m118.5,70.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.3 1.8,4.1 4.1,4.1h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3c0-2.2-1.9-4.1-4.1-4.1zm-4.1,44.3h-36.1v-36.1h36.1v36.1z"})])],-1),rp=[op];function lp(e,t){return N(),j("svg",np,rp)}const ap=Ke(ip,[["render",lp]]),cp={},up={version:"1.1",id:"Capa_1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",width:"612px",height:"612px",viewBox:"0 0 612 612","xml:space":"preserve"},dp=a("g",null,[a("g",{id:"_x33__32_"},[a("g",null,[a("path",{d:`M59.226,88.839C26.513,88.839,0,115.352,0,148.064s26.513,59.226,59.226,59.226s59.226-26.514,59.226-59.226\r
				S91.938,88.839,59.226,88.839z M59.226,246.774C26.513,246.774,0,273.288,0,306c0,32.713,26.513,59.226,59.226,59.226\r
				s59.226-26.513,59.226-59.226C118.452,273.288,91.938,246.774,59.226,246.774z M59.226,404.71C26.513,404.71,0,431.223,0,463.936\r
				c0,32.712,26.513,59.226,59.226,59.226s59.226-26.514,59.226-59.226C118.452,431.223,91.938,404.71,59.226,404.71z\r
				 M197.419,187.548h375.096c21.815,0,39.484-17.669,39.484-39.484s-17.669-39.484-39.484-39.484H197.419\r
				c-21.815,0-39.484,17.669-39.484,39.484S175.604,187.548,197.419,187.548z M572.516,266.516H197.419\r
				c-21.815,0-39.484,17.669-39.484,39.484c0,21.814,17.669,39.484,39.484,39.484h375.096c21.815,0,39.484-17.67,39.484-39.484\r
				C612,284.185,594.331,266.516,572.516,266.516z M572.516,424.451H197.419c-21.815,0-39.484,17.67-39.484,39.484\r
				s17.669,39.483,39.484,39.483h375.096c21.815,0,39.484-17.669,39.484-39.483S594.331,424.451,572.516,424.451z`})])])],-1),hp=a("g",null,null,-1),fp=a("g",null,null,-1),mp=a("g",null,null,-1),pp=a("g",null,null,-1),gp=a("g",null,null,-1),vp=a("g",null,null,-1),bp=a("g",null,null,-1),wp=a("g",null,null,-1),yp=a("g",null,null,-1),kp=a("g",null,null,-1),_p=a("g",null,null,-1),xp=a("g",null,null,-1),Cp=a("g",null,null,-1),Sp=a("g",null,null,-1),Lp=a("g",null,null,-1),Ep=[dp,hp,fp,mp,pp,gp,vp,bp,wp,yp,kp,_p,xp,Cp,Sp,Lp];function Mp(e,t){return N(),j("svg",up,Ep)}const Ap=Ke(cp,[["render",Mp]]),Tp={},Np={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 1000 1000","xml:space":"preserve"},Pp=dn('<g><g transform="translate(0.000000,511.000000) scale(0.100000,-0.100000)"><path d="M4905.7,4342.3c-33.5-8.4-475.7-224.2-980.7-475.7l-920-461l1104.4-509.2L5213.7,2385l77.5,44c41.9,23.1,391.9,213.8,777.5,423.3c385.6,209.6,762.8,414.9,836.2,456.8l136.2,73.3l-953.5,475.7c-570,287.1-984.9,482-1035.2,488.3C5006.3,4352.8,4941.3,4350.7,4905.7,4342.3z"></path><path d="M2782.9,2037.2l6.3-961.9l62.9-92.2c58.7-85.9,119.4-117.3,1037.3-578.4C4425.8,136.5,4895.2-87.8,4932.9-96.2l67.1-12.6l-4.2,1043.6l-6.3,1043.6l-1037.3,477.8c-570,264-1068.7,492.5-1106.5,511.3l-69.2,31.4L2782.9,2037.2z"></path><path d="M6330.7,2466.8l-859.2-469.4l-6.3-955.6c-2.1-526,2.1-955.6,10.5-955.6c10.5,2.1,375.1,182.3,813.1,404.4c741.8,375.1,800.5,408.6,859.2,492.5l62.9,92.2l6.3,930.4c2.1,511.3-2.1,930.4-10.5,930.4C7198.3,2936.2,6804.3,2724.5,6330.7,2466.8z"></path><path d="M2223.3,318.8c-33.5-8.4-486.2-228.4-1003.8-488.3L276.6-641l366.7-199.1c201.2-111.1,576.3-316.4,836.1-456.8c259.8-140.4,505-274.5,546.9-297.6l77.5-44l1104.4,511.3l1104.4,509.2l-930.4,465.2C2826.9,123.9,2420.3,316.7,2370,323C2323.9,329.3,2259,327.2,2223.3,318.8z"></path><path d="M7588,318.8c-33.5-8.4-475.7-224.2-980.7-475.7l-920-461l1104.4-509.2l1104.4-511.3l75.4,41.9c44,25.1,394,215.8,779.6,425.4c385.6,209.6,762.8,414.9,836.1,456.8l136.2,73.3L8770-165.3C8200,121.8,7785,316.7,7734.7,323C7688.6,329.3,7623.7,327.2,7588,318.8z"></path><path d="M3428.3-1537.9L2328.1-2045l-6.3-1043.6l-4.2-1041.5l77.5,14.7c41.9,6.3,509.2,230.5,1037.3,494.6c873.8,438,966.1,488.3,1022.6,565.8c33.5,48.2,67.1,115.3,73.3,153c6.3,35.6,8.4,471.5,6.3,968.2l-6.3,905.3L3428.3-1537.9z"></path><path d="M5465.2-1986.4l6.3-961.9l62.9-92.2c58.7-83.8,119.5-119.5,1026.8-576.3c532.3-266.1,1001.7-490.4,1043.6-498.8l77.5-14.7l-4.2,1041.5l-6.3,1043.6l-1037.3,477.8c-570,264-1068.8,492.5-1106.5,511.3l-69.2,31.4L5465.2-1986.4z"></path><path d="M100.5-2017.8l6.3-930.4l62.9-92.2c58.7-83.8,117.4-117.3,859.2-492.5c438-222.1,802.6-402.4,813.1-404.4c8.4,0,12.6,429.6,10.5,955.6l-6.3,955.6L987-1556.8c-473.6,257.7-867.6,469.4-876,469.4C102.6-1087.4,98.4-1506.5,100.5-2017.8z"></path><path d="M9013-1556.8l-859.2-469.4l-6.3-955.6c-2.1-526,2.1-955.6,10.5-955.6c10.5,2.1,375.1,182.3,813.1,404.4c741.8,375.1,800.5,408.6,859.2,492.5l62.9,92.2l6.3,930.4c2.1,511.3-2.1,930.4-10.5,930.4C9880.6-1087.4,9486.6-1299,9013-1556.8z"></path></g></g>',1),$p=[Pp];function Op(e,t){return N(),j("svg",Np,$p)}const Hp=Ke(Tp,[["render",Op]]),Rp={},Ip={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 1000 1000","enable-background":"new 0 0 1000 1000","xml:space":"preserve"},Dp=a("g",null,[a("g",{transform:"translate(0.000000,511.000000) scale(0.100000,-0.100000)"},[a("path",{d:"M731.7,4913.1c-204.8-40.2-442.2-218.2-535.9-402c-99.5-191.4-95.7-67-95.7-3252c0-3242.4-3.8-3097,105.3-3284.5c70.8-120.6,214.4-250.8,352.2-319.6l126.3-61.3l1125.5-5.7l1125.5-5.7l80.4,57.4c124.4,84.2,384.7,212.5,574.2,279.5c168.4,59.3,168.4,59.3,243.1,183.8l72.7,122.5l-1496.8,9.6c-1663.3,11.5-1560,1.9-1626.9,139.7c-28.7,61.3-30.6,306.3-30.6,2888.3c0,2760.1,0,2821.3,38.3,2880.7c19.1,34.4,59.3,76.6,90,95.7c49.8,32.5,231.6,34.4,4122.9,34.4H9075l53.6-40.2c107.2-78.5,120.6-135.9,120.6-511v-338.8l168.4,84.2c179.9,90,342.6,145.5,428.8,145.5h53.6v312c0,201-9.6,344.5-26.8,407.7c-80.4,300.5-319.6,524.4-624,581.9C9122.9,4939.9,856.1,4938,731.7,4913.1z"}),a("path",{d:"M9727.7,3423.9C9358.3,3305.3,8632.9,2821,7852,2168.3C6295.8,870.6,4498.5-1058.8,3956.8-2008.2l-84.2-145.5l-178-61.3c-371.3-126.3-681.4-313.9-930.2-564.6c-176.1-179.9-294.8-338.8-551.3-746.5c-384.7-610.6-589.5-819.2-947.5-957l-149.3-57.4H607.2H100v-86.1v-86.1h2775.4h2775.4v86.1v86.1l-1898.7,1.9c-1123.5,1.9-1818.4,9.6-1701.6,19.1c302.4,23,585.7,72.7,786.7,135.9c338.8,109.1,507.2,218.2,796.3,516.8c417.3,434.5,620.2,771.4,685.2,1142.7c15.3,86.1,30.6,158.9,32.5,160.8c3.8,1.9,67,34.5,139.7,70.8c1085.3,549.3,3162,2553.4,4513.3,4354.5c505.3,671.8,832.6,1236.5,886.2,1527.4C9907.7,3473.7,9892.3,3477.5,9727.7,3423.9z M4177-2438.8c0-216.3-38.3-403.9-112.9-564.6c-55.5-118.7-61.3-124.4-199.1-185.7c-78.5-36.4-225.9-93.8-331.1-126.3c-162.7-53.6-225.9-63.2-440.2-72.7c-195.2-5.7-285.2-1.9-398.1,23c-80.4,19.1-145.5,40.2-145.5,47.9c0,34.5,201,289,340.7,428.7c283.3,287.1,656.5,486.2,1104.4,587.6c84.2,19.1,158.9,36.4,168.4,36.4C4171.2-2262.7,4177-2343.1,4177-2438.8z"}),a("path",{d:"M9789,2746.4c-55.5-101.5-199.1-333.1-319.6-513L9249.2,1908V172c0-1646.1-1.9-1739.9-34.5-1801.1c-19.1-36.4-65.1-82.3-101.4-101.5c-61.3-32.5-151.2-34.4-1684.4-34.4H5807.7l-197.1-158.9c-369.4-294.8-706.3-528.3-993.4-687.2l-124.4-68.9l-24.9-130.1c-45.9-239.3-176.1-509.2-365.6-761.8c-51.7-67-97.6-130.1-105.3-143.6c-9.6-15.3,513-21,2044.2-21h2059.5v86.1v86.1h-86.1c-149.3,0-482.3,187.6-696.7,390.5c-206.7,197.1-335,438.3-350.3,662.3l-5.7,86.1l1177.1,9.6l1177.1,9.6l126.3,61.3c137.8,68.9,281.4,199.1,352.2,319.6c109.1,185.7,105.3,103.3,101.4,2633.7l-5.7,2325.6L9789,2746.4z"})])],-1),Fp=[Dp];function Bp(e,t){return N(),j("svg",Ip,Fp)}const zp=Ke(Rp,[["render",Bp]]),jp={methods:{show:function(e){this.emitter.emit("live-edit-ui-show",e)}},components:{DesignSettingsIcon:zp,LayoutsIcon:ap,ModulesIcon:Hp,PencilIcon:tp,PlayIcon:sp,CogIcon:ep},data(){return{}}},Vp={id:"bubble-nav",class:"active"};function Up(e,t,s,i,n,o){const r=Ne("DesignSettingsIcon"),l=Ne("ModulesIcon"),c=Ne("LayoutsIcon");return N(),j("div",Vp,[a("span",{onClick:t[0]||(t[0]=d=>o.show("template-settings"))},[z(r)]),a("span",{onClick:t[1]||(t[1]=d=>o.show("show-modules"))},[z(l)]),a("span",{onClick:t[2]||(t[2]=d=>o.show("show-layouts"))},[z(c)])])}const qp=Ke(jp,[["render",Up]]),Wp={components:{BubbleNav:qp},data(){}};function Kp(e,t,s,i,n,o){const r=Ne("BubbleNav");return N(),j("div",null,[z(r)])}const Yp=Ke(Wp,[["render",Kp]]);/*!
  * vue-color-kit v1.0.4
  * (c) 2021 
  * @license MIT
  */function ms(e){let t={r:0,g:0,b:0,a:1};/#/.test(e)?t=Jp(e):/rgb/.test(e)?t=Al(e):typeof e=="string"?t=Al(`rgba(${e})`):Object.prototype.toString.call(e)==="[object Object]"&&(t=e);const{r:s,g:i,b:n,a:o}=t,{h:r,s:l,v:c}=Zp(t);return{r:s,g:i,b:n,a:o===void 0?1:o,h:r,s:l,v:c}}function Yo(e){const t=document.createElement("canvas"),s=t.getContext("2d"),i=e*2;return t.width=i,t.height=i,s.fillStyle="#ffffff",s.fillRect(0,0,i,i),s.fillStyle="#ccd5db",s.fillRect(0,0,e,e),s.fillRect(e,e,e,e),t}function yo(e,t,s,i,n,o){const r=e==="l",l=t.createLinearGradient(0,0,r?s:0,r?0:i);l.addColorStop(.01,n),l.addColorStop(.99,o),t.fillStyle=l,t.fillRect(0,0,s,i)}function Xp({r:e,g:t,b:s},i){const n=r=>("0"+Number(r).toString(16)).slice(-2),o=`#${n(e)}${n(t)}${n(s)}`;return i?o.toUpperCase():o}function Jp(e){e=e.slice(1);const t=s=>parseInt(s,16)||0;return{r:t(e.slice(0,2)),g:t(e.slice(2,4)),b:t(e.slice(4,6))}}function Al(e){return typeof e=="string"?(e=(/rgba?\((.*?)\)/.exec(e)||["","0,0,0,1"])[1].split(","),{r:Number(e[0])||0,g:Number(e[1])||0,b:Number(e[2])||0,a:Number(e[3]?e[3]:1)}):e}function Zp({r:e,g:t,b:s}){e=e/255,t=t/255,s=s/255;const i=Math.max(e,t,s),n=Math.min(e,t,s),o=i-n;let r=0;i===n?r=0:i===e?t>=s?r=60*(t-s)/o:r=60*(t-s)/o+360:i===t?r=60*(s-e)/o+120:i===s&&(r=60*(e-t)/o+240),r=Math.floor(r);let l=parseFloat((i===0?0:1-n/i).toFixed(2)),c=parseFloat(i.toFixed(2));return{h:r,s:l,v:c}}var Xo=Wt({props:{color:{type:String,default:"#000000"},hsv:{type:Object,default:null},size:{type:Number,default:152}},emits:["selectSaturation"],data(){return{slideSaturationStyle:{}}},mounted(){this.renderColor(),this.renderSlide()},methods:{renderColor(){const e=this.$refs.canvasSaturation,t=this.size,s=e.getContext("2d");e.width=t,e.height=t,s.fillStyle=this.color,s.fillRect(0,0,t,t),yo("l",s,t,t,"#FFFFFF","rgba(255,255,255,0)"),yo("p",s,t,t,"rgba(0,0,0,0)","#000000")},renderSlide(){this.slideSaturationStyle={left:this.hsv.s*this.size-5+"px",top:(1-this.hsv.v)*this.size-5+"px"}},selectSaturation(e){const{top:t,left:s}=this.$el.getBoundingClientRect(),i=e.target.getContext("2d"),n=r=>{let l=r.clientX-s,c=r.clientY-t;l<0&&(l=0),c<0&&(c=0),l>this.size&&(l=this.size),c>this.size&&(c=this.size),this.slideSaturationStyle={left:l-5+"px",top:c-5+"px"};const d=i.getImageData(Math.min(l,this.size-1),Math.min(c,this.size-1),1,1),[g,p,b]=d.data;this.$emit("selectSaturation",{r:g,g:p,b})};n(e);const o=()=>{document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",o)};document.addEventListener("mousemove",n),document.addEventListener("mouseup",o)}}});const Gp={ref:"canvasSaturation"};function Qp(e,t,s,i,n,o){return N(),De("div",{class:"saturation",onMousedown:t[1]||(t[1]=Ko((...r)=>e.selectSaturation&&e.selectSaturation(...r),["prevent","stop"]))},[z("canvas",Gp,null,512),z("div",{style:e.slideSaturationStyle,class:"slide"},null,4)],32)}Xo.render=Qp;Xo.__file="src/color/Saturation.vue";var Jo=Wt({props:{hsv:{type:Object,default:null},width:{type:Number,default:15},height:{type:Number,default:152}},emits:["selectHue"],data(){return{slideHueStyle:{}}},mounted(){this.renderColor(),this.renderSlide()},methods:{renderColor(){const e=this.$refs.canvasHue,t=this.width,s=this.height,i=e.getContext("2d");e.width=t,e.height=s;const n=i.createLinearGradient(0,0,0,s);n.addColorStop(0,"#FF0000"),n.addColorStop(.17*1,"#FF00FF"),n.addColorStop(.17*2,"#0000FF"),n.addColorStop(.17*3,"#00FFFF"),n.addColorStop(.17*4,"#00FF00"),n.addColorStop(.17*5,"#FFFF00"),n.addColorStop(1,"#FF0000"),i.fillStyle=n,i.fillRect(0,0,t,s)},renderSlide(){this.slideHueStyle={top:(1-this.hsv.h/360)*this.height-2+"px"}},selectHue(e){const{top:t}=this.$el.getBoundingClientRect(),s=e.target.getContext("2d"),i=o=>{let r=o.clientY-t;r<0&&(r=0),r>this.height&&(r=this.height),this.slideHueStyle={top:r-2+"px"};const l=s.getImageData(0,Math.min(r,this.height-1),1,1),[c,d,g]=l.data;this.$emit("selectHue",{r:c,g:d,b:g})};i(e);const n=()=>{document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",n)};document.addEventListener("mousemove",i),document.addEventListener("mouseup",n)}}});const e1={ref:"canvasHue"};function t1(e,t,s,i,n,o){return N(),De("div",{class:"hue",onMousedown:t[1]||(t[1]=Ko((...r)=>e.selectHue&&e.selectHue(...r),["prevent","stop"]))},[z("canvas",e1,null,512),z("div",{style:e.slideHueStyle,class:"slide"},null,4)],32)}Jo.render=t1;Jo.__file="src/color/Hue.vue";var Zo=Wt({props:{color:{type:String,default:"#000000"},rgba:{type:Object,default:null},width:{type:Number,default:15},height:{type:Number,default:152}},emits:["selectAlpha"],data(){return{slideAlphaStyle:{},alphaSize:5}},watch:{color(){this.renderColor()},"rgba.a"(){this.renderSlide()}},mounted(){this.renderColor(),this.renderSlide()},methods:{renderColor(){const e=this.$refs.canvasAlpha,t=this.width,s=this.height,i=this.alphaSize,n=Yo(i),o=e.getContext("2d");e.width=t,e.height=s,o.fillStyle=o.createPattern(n,"repeat"),o.fillRect(0,0,t,s),yo("p",o,t,s,"rgba(255,255,255,0)",this.color)},renderSlide(){this.slideAlphaStyle={top:this.rgba.a*this.height-2+"px"}},selectAlpha(e){const{top:t}=this.$el.getBoundingClientRect(),s=n=>{let o=n.clientY-t;o<0&&(o=0),o>this.height&&(o=this.height);let r=parseFloat((o/this.height).toFixed(2));this.$emit("selectAlpha",r)};s(e);const i=()=>{document.removeEventListener("mousemove",s),document.removeEventListener("mouseup",i)};document.addEventListener("mousemove",s),document.addEventListener("mouseup",i)}}});const s1={ref:"canvasAlpha"};function i1(e,t,s,i,n,o){return N(),De("div",{class:"color-alpha",onMousedown:t[1]||(t[1]=Ko((...r)=>e.selectAlpha&&e.selectAlpha(...r),["prevent","stop"]))},[z("canvas",s1,null,512),z("div",{style:e.slideAlphaStyle,class:"slide"},null,4)],32)}Zo.render=i1;Zo.__file="src/color/Alpha.vue";var Go=Wt({props:{color:{type:String,default:"#000000"},width:{type:Number,default:100},height:{type:Number,default:30}},data(){return{alphaSize:5}},watch:{color(){this.renderColor()}},mounted(){this.renderColor()},methods:{renderColor(){const e=this.$el,t=this.width,s=this.height,i=this.alphaSize,n=Yo(i),o=e.getContext("2d");e.width=t,e.height=s,o.fillStyle=o.createPattern(n,"repeat"),o.fillRect(0,0,t,s),o.fillStyle=this.color,o.fillRect(0,0,t,s)}}});function n1(e,t,s,i,n,o){return N(),De("canvas")}Go.render=n1;Go.__file="src/color/Preview.vue";var Qo=Wt({props:{suckerCanvas:{type:Object,default:null},suckerArea:{type:Array,default:()=>[]}},data(){return{isOpenSucker:!1,suckerPreview:null,isSucking:!1}},watch:{suckerCanvas(e){this.isSucking=!1,this.suckColor(e)}},methods:{openSucker(){this.isOpenSucker?this.keydownHandler({keyCode:27}):(this.isOpenSucker=!0,this.isSucking=!0,this.$emit("openSucker",!0),document.addEventListener("keydown",this.keydownHandler))},keydownHandler(e){e.keyCode===27&&(this.isOpenSucker=!1,this.isSucking=!1,this.$emit("openSucker",!1),document.removeEventListener("keydown",this.keydownHandler),document.removeEventListener("mousemove",this.mousemoveHandler),document.removeEventListener("mouseup",this.mousemoveHandler),this.suckerPreview&&(document.body.removeChild(this.suckerPreview),this.suckerPreview=null))},mousemoveHandler(e){const{clientX:t,clientY:s}=e,{top:i,left:n,width:o,height:r}=this.suckerCanvas.getBoundingClientRect(),l=t-n,c=s-i,g=this.suckerCanvas.getContext("2d").getImageData(Math.min(l,o-1),Math.min(c,r-1),1,1);let[p,b,y,_]=g.data;_=parseFloat((_/255).toFixed(2));const C=this.suckerPreview.style;Object.assign(C,{position:"absolute",left:t+20+"px",top:s-36+"px",width:"24px",height:"24px",borderRadius:"50%",border:"2px solid #fff",boxShadow:"0 0 8px 0 rgba(0, 0, 0, 0.16)",background:`rgba(${p}, ${b}, ${y}, ${_})`,zIndex:95}),this.suckerArea.length&&t>=this.suckerArea[0]&&s>=this.suckerArea[1]&&t<=this.suckerArea[2]&&s<=this.suckerArea[3]?C.display="":C.display="none"},suckColor(e){e&&e.tagName!=="CANVAS"||(this.suckerPreview=document.createElement("div"),this.suckerPreview&&document.body.appendChild(this.suckerPreview),document.addEventListener("mousemove",this.mousemoveHandler),document.addEventListener("mouseup",this.mousemoveHandler),e.addEventListener("click",t=>{const{clientX:s,clientY:i}=t,{top:n,left:o,width:r,height:l}=e.getBoundingClientRect(),c=s-o,d=i-n,p=e.getContext("2d").getImageData(Math.min(c,r-1),Math.min(d,l-1),1,1);let[b,y,_,C]=p.data;C=parseFloat((C/255).toFixed(2)),this.$emit("selectSucker",{r:b,g:y,b:_,a:C})}))}}});const o1=z("path",{d:"M13.1,8.2l5.6,5.6c0.4,0.4,0.5,1.1,0.1,1.5s-1.1,0.5-1.5,0.1c0,0-0.1,0-0.1-0.1l-1.4-1.4l-7.7,7.7C7.9,21.9,7.6,22,7.3,22H3.1C2.5,22,2,21.5,2,20.9l0,0v-4.2c0-0.3,0.1-0.6,0.3-0.8l5.8-5.8C8.5,9.7,9.2,9.6,9.7,10s0.5,1.1,0.1,1.5c0,0,0,0.1-0.1,0.1l-5.5,5.5v2.7h2.7l7.4-7.4L8.7,6.8c-0.5-0.4-0.5-1-0.1-1.5s1.1-0.5,1.5-0.1c0,0,0.1,0,0.1,0.1l1.4,1.4l3.5-3.5c1.6-1.6,4.1-1.6,5.8-0.1c1.6,1.6,1.6,4.1,0.1,5.8L20.9,9l-3.6,3.6c-0.4,0.4-1.1,0.5-1.5,0.1"},null,-1),r1={key:1,class:"sucker",viewBox:"-16 -16 68 68",xmlns:"http://www.w3.org/2000/svg",stroke:"#9099a4"},l1=z("g",{fill:"none","fill-rule":"evenodd"},[z("g",{transform:"translate(1 1)","stroke-width":"4"},[z("circle",{"stroke-opacity":".5",cx:"18",cy:"18",r:"18"}),z("path",{d:"M36 18c0-9.94-8.06-18-18-18"},[z("animateTransform",{attributeName:"transform",type:"rotate",from:"0 18 18",to:"360 18 18",dur:"1s",repeatCount:"indefinite"})])])],-1);function a1(e,t,s,i,n,o){return N(),De("div",null,[e.isSucking?Se("v-if",!0):(N(),De("svg",{key:0,class:[{active:e.isOpenSucker},"sucker"],xmlns:"http://www.w3.org/2000/svg",viewBox:"-12 -12 48 48",onClick:t[1]||(t[1]=(...r)=>e.openSucker&&e.openSucker(...r))},[o1],2)),e.isSucking?(N(),De("svg",r1,[l1])):Se("v-if",!0)])}Qo.render=a1;Qo.__file="src/color/Sucker.vue";var er=Wt({props:{name:{type:String,default:""},color:{type:String,default:""}},emits:["inputColor"],setup(e,{emit:t}){return{modelColor:Vt({get(){return e.color||""},set(i){t("inputColor",i)}})}}});const c1={class:"color-type"},u1={class:"name"};function d1(e,t,s,i,n,o){return N(),De("div",c1,[z("span",u1,et(e.name),1),an(z("input",{"onUpdate:modelValue":t[1]||(t[1]=r=>e.modelColor=r),class:"value"},null,512),[[Qa,e.modelColor]])])}er.render=d1;er.__file="src/color/Box.vue";var tr=Wt({name:"ColorPicker",props:{color:{type:String,default:"#000000"},colorsDefault:{type:Array,default:()=>[]},colorsHistoryKey:{type:String,default:""}},emits:["selectColor"],setup(e,{emit:t}){const s=$t(),i=$t([]),n=$t();e.colorsHistoryKey&&localStorage&&(i.value=JSON.parse(localStorage.getItem(e.colorsHistoryKey))||[]),n.value=Yo(4).toDataURL(),ln(()=>{o(s.value)});function o(l){if(!l)return;const c=i.value||[],d=c.indexOf(l);d>=0&&c.splice(d,1),c.length>=8&&(c.length=7),c.unshift(l),i.value=c||[],localStorage&&e.colorsHistoryKey&&localStorage.setItem(e.colorsHistoryKey,JSON.stringify(c))}function r(l){t("selectColor",l)}return{setColorsHistory:o,colorsHistory:i,color:s,imgAlphaBase64:n,selectColor:r}}});const h1={class:"colors"},f1={key:0,class:"colors history"};function m1(e,t,s,i,n,o){return N(),De("div",null,[z("ul",h1,[(N(!0),De(Pe,null,Ct(e.colorsDefault,r=>(N(),De("li",{key:r,class:"item",onClick:l=>e.selectColor(r)},[z("div",{style:{background:`url(${e.imgAlphaBase64})`},class:"alpha"},null,4),z("div",{style:{background:r},class:"color"},null,4)],8,["onClick"]))),128))]),e.colorsHistory.length?(N(),De("ul",f1,[(N(!0),De(Pe,null,Ct(e.colorsHistory,r=>(N(),De("li",{key:r,class:"item",onClick:l=>e.selectColor(r)},[z("div",{style:{background:`url(${e.imgAlphaBase64})`},class:"alpha"},null,4),z("div",{style:{background:r},class:"color"},null,4)],8,["onClick"]))),128))])):Se("v-if",!0)])}tr.render=m1;tr.__file="src/color/Colors.vue";var Os=Wt({components:{Saturation:Xo,Hue:Jo,Alpha:Zo,Preview:Go,Sucker:Qo,Box:er,Colors:tr},emits:["changeColor","openSucker"],props:{color:{type:String,default:"#000000"},theme:{type:String,default:"dark"},suckerHide:{type:Boolean,default:!0},suckerCanvas:{type:null,default:null},suckerArea:{type:Array,default:()=>[]},colorsDefault:{type:Array,default:()=>["#000000","#FFFFFF","#FF1900","#F47365","#FFB243","#FFE623","#6EFF2A","#1BC7B1","#00BEFF","#2E81FF","#5D61FF","#FF89CF","#FC3CAD","#BF3DCE","#8E00A7","rgba(0,0,0,0)"]},colorsHistoryKey:{type:String,default:"vue-colorpicker-history"}},data(){return{hueWidth:15,hueHeight:152,previewHeight:30,modelRgba:"",modelHex:"",r:0,g:0,b:0,a:1,h:0,s:0,v:0}},computed:{isLightTheme(){return this.theme==="light"},totalWidth(){return this.hueHeight+(this.hueWidth+8)*2},previewWidth(){return this.totalWidth-(this.suckerHide?0:this.previewHeight)},rgba(){return{r:this.r,g:this.g,b:this.b,a:this.a}},hsv(){return{h:this.h,s:this.s,v:this.v}},rgbString(){return`rgb(${this.r}, ${this.g}, ${this.b})`},rgbaStringShort(){return`${this.r}, ${this.g}, ${this.b}, ${this.a}`},rgbaString(){return`rgba(${this.rgbaStringShort})`},hexString(){return Xp(this.rgba,!0)}},created(){Object.assign(this,ms(this.color)),this.setText(),this.$watch("rgba",()=>{this.$emit("changeColor",{rgba:this.rgba,hsv:this.hsv,hex:this.modelHex})})},methods:{selectSaturation(e){const{r:t,g:s,b:i,h:n,s:o,v:r}=ms(e);Object.assign(this,{r:t,g:s,b:i,h:n,s:o,v:r}),this.setText()},selectHue(e){const{r:t,g:s,b:i,h:n,s:o,v:r}=ms(e);Object.assign(this,{r:t,g:s,b:i,h:n,s:o,v:r}),this.setText(),this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide()})},selectAlpha(e){this.a=e,this.setText()},inputHex(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=ms(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.modelHex=e,this.modelRgba=this.rgbaStringShort,this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})},inputRgba(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=ms(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.modelHex=this.hexString,this.modelRgba=e,this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})},setText(){this.modelHex=this.hexString,this.modelRgba=this.rgbaStringShort},openSucker(e){this.$emit("openSucker",e)},selectSucker(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=ms(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.setText(),this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})},selectColor(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=ms(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.setText(),this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})}}});const p1={class:"color-set"};function g1(e,t,s,i,n,o){const r=Ne("Saturation"),l=Ne("Hue"),c=Ne("Alpha"),d=Ne("Preview"),g=Ne("Sucker"),p=Ne("Box"),b=Ne("Colors");return N(),De("div",{class:["hu-color-picker",{light:e.isLightTheme}],style:{width:e.totalWidth+"px"}},[z("div",p1,[z(r,{ref:"saturation",color:e.rgbString,hsv:e.hsv,size:e.hueHeight,onSelectSaturation:e.selectSaturation},null,8,["color","hsv","size","onSelectSaturation"]),z(l,{ref:"hue",hsv:e.hsv,width:e.hueWidth,height:e.hueHeight,onSelectHue:e.selectHue},null,8,["hsv","width","height","onSelectHue"]),z(c,{ref:"alpha",color:e.rgbString,rgba:e.rgba,width:e.hueWidth,height:e.hueHeight,onSelectAlpha:e.selectAlpha},null,8,["color","rgba","width","height","onSelectAlpha"])]),z("div",{style:{height:e.previewHeight+"px"},class:"color-show"},[z(d,{color:e.rgbaString,width:e.previewWidth,height:e.previewHeight},null,8,["color","width","height"]),e.suckerHide?Se("v-if",!0):(N(),De(g,{key:0,"sucker-canvas":e.suckerCanvas,"sucker-area":e.suckerArea,onOpenSucker:e.openSucker,onSelectSucker:e.selectSucker},null,8,["sucker-canvas","sucker-area","onOpenSucker","onSelectSucker"]))],4),z(p,{name:"HEX",color:e.modelHex,onInputColor:e.inputHex},null,8,["color","onInputColor"]),z(p,{name:"RGBA",color:e.modelRgba,onInputColor:e.inputRgba},null,8,["color","onInputColor"]),z(b,{color:e.rgbaString,"colors-default":e.colorsDefault,"colors-history-key":e.colorsHistoryKey,onSelectColor:e.selectColor},null,8,["color","colors-default","colors-history-key","onSelectColor"]),Se(" custom options "),ji(e.$slots,"default")],6)}Os.render=g1;Os.__file="src/color/ColorPicker.vue";Os.install=e=>{e.component(Os.name,Os)};const v1={components:{ColorPicker:Os},props:{color:{type:String,default:"#000000"},name:{type:String,default:"color"}},data(){return{showPicker:!1,suckerCanvas:null,suckerArea:[],isSucking:!1}},methods:{changeColor(e){this.$props.color=e.hex},openSucker(e){},closePicker(){this.showPicker=!1},togglePicker(){this.showPicker=!this.showPicker}}};function b1(e,t,s,i,n,o){const r=Ne("ColorPicker",!0),l=sf("click-away");return an((N(),j("div",null,[a("div",{class:"color-picker-badge",onClick:t[0]||(t[0]=(...c)=>o.togglePicker&&o.togglePicker(...c)),style:Lt({background:s.color})},null,4),n.showPicker?(N(),De(r,{key:0,theme:"light",value:s.color,"sucker-hide":!1,"sucker-canvas":n.suckerCanvas,"sucker-area":n.suckerArea,onOpenSucker:o.openSucker,onChangeColor:o.changeColor,onClose:o.togglePicker},null,8,["value","sucker-canvas","sucker-area","onOpenSucker","onChangeColor","onClose"])):Se("",!0)])),[[l,o.closePicker]])}const w1=Ke(v1,[["render",b1]]);const y1={components:{ColorPicker:w1},methods:{stringToId(e){return e.replace(/[^a-z0-9]/gi,"-").toLowerCase()},showSettingsGroup(e){let t="settings-group-"+this.stringToId(e),s=document.getElementById(t);s.style.display==="none"?s.style.display="block":s.style.display="none"},updateSettings(e,t,s){let i=e.target.value;Rs.post(mw.settings.api_url+"save_option",{option_group:s,option_key:t,option_value:i}).then(function(n){n.data})},resetTemplateSettings(){mw.tools.confirm_reset_module_by_id(this.optionGroup,function(){})},resetStylesheetSettings(){mw.tools.confirm_reset_module_by_id(this.optionGroupLess,function(){})}},mounted(){let e=this;Rs.get(mw.settings.api_url+"editor/template_settings_v2/list").then(function(t){t.data&&(e.settingsGroups=t.data.settingsGroups,e.optionGroup=t.data.optionGroup,e.optionGroupLess=t.data.optionGroupLess)})},data(){return{settingsGroups:[],optionGroup:"",optionGroupLess:""}}},k1={class:"p-3"},_1={key:0,class:"text-center"},x1={class:"mb-3"},C1=["onClick"],S1=["id"],L1=["id"],E1={class:"accordion-item"},M1=["id"],A1=["data-bs-target","aria-controls"],T1=["id","aria-labelledby","data-bs-parent"],N1={class:"accordion-body"},P1={class:"mt-2"},$1={key:0},O1={class:"mr-4"},H1=["value","onChange","name"],R1={key:1},I1={class:"d-flex justify-content-between"},D1={class:"mr-4"},F1={key:2},B1={class:"text-uppercase"},z1={key:3},j1=["onChange","name","value"],V1=["value"],U1={key:4},q1=["onChange","name","value"],W1=["value"],K1={key:5},Y1=["onChange","name","value"],X1=a("option",{value:"Arial"},"Arial",-1),J1=a("option",{value:"Tahoma"},"Tahoma",-1),Z1=[X1,J1],G1={key:0,class:"mt-2 mr-2"},Q1={key:1,class:"mt-2 mr-2"};function e0(e,t,s,i,n,o){const r=Ne("ColorPicker");return N(),j("div",k1,[n.settingsGroups.length===0?(N(),j("div",_1," Loading... ")):(N(!0),j(Pe,{key:1},Ct(n.settingsGroups,(l,c)=>(N(),j("div",x1,[a("div",null,[a("span",{onClick:d=>o.showSettingsGroup(c),class:"border-bottom pt-1 pb-1 settings-main-group"},et(c),9,C1)]),a("div",{style:{display:"none"},id:"settings-group-"+o.stringToId(c)},[a("div",{class:"accordion accordion-flush",id:"accordionFlush"+o.stringToId(c)},[(N(!0),j(Pe,null,Ct(l.values,(d,g)=>(N(),j("div",E1,[a("h2",{class:"accordion-header",id:"flush-heading-"+o.stringToId(c+"-"+g)},[a("button",{class:"accordion-button collapsed",type:"button","data-bs-toggle":"collapse","data-bs-target":"#flush-collapse-"+o.stringToId(c+"-"+g),"aria-expanded":"false","aria-controls":"flush-collapse-"+o.stringToId(c+"-"+g)},et(g),9,A1)],8,M1),a("div",{id:"flush-collapse-"+o.stringToId(c+"-"+g),class:"accordion-collapse collapse","aria-labelledby":"flush-heading-"+o.stringToId(c+"-"+g),"data-bs-parent":"#accordionFlush"+o.stringToId(c)},[a("div",N1,[(N(!0),j(Pe,null,Ct(d,(p,b)=>(N(),j("div",P1,[p.type==="text"?(N(),j("div",$1,[a("label",O1,et(p.label),1),a("div",null,[a("input",{type:"text",class:"form-control",value:[p.value?p.value:p.default],onChange:y=>o.updateSettings(y,b,p.optionGroup),name:b},null,40,H1)])])):Se("",!0),p.type==="color"?(N(),j("div",R1,[a("div",I1,[a("div",D1,et(p.label),1),a("div",null,[(N(),De(r,{key:b,value:[p.value?p.value:p.default],onChange:y=>o.updateSettings(y,b,p.optionGroup),name:b},null,8,["value","onChange","name"]))])])])):Se("",!0),p.type==="title"?(N(),j("div",F1,[a("div",B1,[a("span",null,et(p.label),1)])])):Se("",!0),p.type==="dropdown_image"?(N(),j("div",z1,[a("div",null,et(p.label),1),a("select",{class:"form-control",onChange:y=>o.updateSettings(y,b,p.optionGroup),name:b,value:[p.value?p.value:p.default]},[(N(!0),j(Pe,null,Ct(p.options,(y,_)=>(N(),j("option",{value:_},et(y),9,V1))),256))],40,j1)])):Se("",!0),p.type==="dropdown"?(N(),j("div",U1,[a("div",null,et(p.label),1),a("select",{class:"form-control",onChange:y=>o.updateSettings(y,b,p.optionGroup),name:b,value:[p.value?p.value:p.default]},[(N(!0),j(Pe,null,Ct(p.options,(y,_)=>(N(),j("option",{value:_},et(y),9,W1))),256))],40,q1)])):Se("",!0),p.type==="font_selector"?(N(),j("div",K1,[a("div",null,et(p.label),1),a("select",{class:"form-control",onChange:y=>o.updateSettings(y,b,p.optionGroup),name:b,value:[p.value?p.value:p.default]},Z1,40,Y1)])):Se("",!0)]))),256))])],8,T1)]))),256))],8,L1),l.type=="stylesheet"?(N(),j("div",G1,[a("button",{onClick:t[0]||(t[0]=(...d)=>o.resetStylesheetSettings&&o.resetStylesheetSettings(...d)),style:{"border-radius":"20px"},class:"btn btn-primary btn-sm btn-block"},"Reset Stylesheet Settings ")])):Se("",!0),l.type=="template"?(N(),j("div",Q1,[a("button",{onClick:t[1]||(t[1]=(...d)=>o.resetTemplateSettings&&o.resetTemplateSettings(...d)),style:{"border-radius":"20px"},class:"btn btn-primary btn-sm btn-block"},"Reset Template Settings ")])):Se("",!0)],8,S1)]))),256))])}const t0=Ke(y1,[["render",e0]]);function Ei(e){return[null,void 0,!1].indexOf(e)!==-1}function s0(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function ec(e){var t={exports:{}};return e(t,t.exports),t.exports}var Tl=ec(function(e,t){e.exports=function(){var s=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function i(_){return _.split("").reverse().join("")}function n(_,C){return _.substring(0,C.length)===C}function o(_,C){return _.slice(-1*C.length)===C}function r(_,C,x){if((_[C]||_[x])&&_[C]===_[x])throw new Error(C)}function l(_){return typeof _=="number"&&isFinite(_)}function c(_,C){return _=_.toString().split("e"),(+((_=(_=Math.round(+(_[0]+"e"+(_[1]?+_[1]+C:C)))).toString().split("e"))[0]+"e"+(_[1]?+_[1]-C:-C))).toFixed(C)}function d(_,C,x,R,Z,K,te,ne,be,ue,V,q){var he,de,B,pe=q,_e="",oe="";return K&&(q=K(q)),!!l(q)&&(_!==!1&&parseFloat(q.toFixed(_))===0&&(q=0),q<0&&(he=!0,q=Math.abs(q)),_!==!1&&(q=c(q,_)),(q=q.toString()).indexOf(".")!==-1?(B=(de=q.split("."))[0],x&&(_e=x+de[1])):B=q,C&&(B=i(B).match(/.{1,3}/g),B=i(B.join(i(C)))),he&&ne&&(oe+=ne),R&&(oe+=R),he&&be&&(oe+=be),oe+=B,oe+=_e,Z&&(oe+=Z),ue&&(oe=ue(oe,pe)),oe)}function g(_,C,x,R,Z,K,te,ne,be,ue,V,q){var he,de="";return V&&(q=V(q)),!(!q||typeof q!="string")&&(ne&&n(q,ne)&&(q=q.replace(ne,""),he=!0),R&&n(q,R)&&(q=q.replace(R,"")),be&&n(q,be)&&(q=q.replace(be,""),he=!0),Z&&o(q,Z)&&(q=q.slice(0,-1*Z.length)),C&&(q=q.split(C).join("")),x&&(q=q.replace(x,".")),he&&(de+="-"),(de=(de+=q).replace(/[^0-9\.\-.]/g,""))!==""&&(de=Number(de),te&&(de=te(de)),!!l(de)&&de))}function p(_){var C,x,R,Z={};for(_.suffix===void 0&&(_.suffix=_.postfix),C=0;C<s.length;C+=1)if((R=_[x=s[C]])===void 0)x!=="negative"||Z.negativeBefore?x==="mark"&&Z.thousand!=="."?Z[x]=".":Z[x]=!1:Z[x]="-";else if(x==="decimals"){if(!(R>=0&&R<8))throw new Error(x);Z[x]=R}else if(x==="encoder"||x==="decoder"||x==="edit"||x==="undo"){if(typeof R!="function")throw new Error(x);Z[x]=R}else{if(typeof R!="string")throw new Error(x);Z[x]=R}return r(Z,"mark","thousand"),r(Z,"prefix","negative"),r(Z,"prefix","negativeBefore"),Z}function b(_,C,x){var R,Z=[];for(R=0;R<s.length;R+=1)Z.push(_[s[R]]);return Z.push(x),C.apply("",Z)}function y(_){if(!(this instanceof y))return new y(_);typeof _=="object"&&(_=p(_),this.to=function(C){return b(_,d,C)},this.from=function(C){return b(_,g,C)})}return y}()}),i0=s0(ec(function(e,t){(function(s){function i(h){return n(h)&&typeof h.from=="function"}function n(h){return typeof h=="object"&&typeof h.to=="function"}function o(h){h.parentElement.removeChild(h)}function r(h){return h!=null}function l(h){h.preventDefault()}function c(h){return h.filter(function(u){return!this[u]&&(this[u]=!0)},{})}function d(h,u){return Math.round(h/u)*u}function g(h,u){var T=h.getBoundingClientRect(),W=h.ownerDocument,O=W.documentElement,ee=K(W);return/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(ee.x=0),u?T.top+ee.y-O.clientTop:T.left+ee.x-O.clientLeft}function p(h){return typeof h=="number"&&!isNaN(h)&&isFinite(h)}function b(h,u,T){T>0&&(x(h,u),setTimeout(function(){R(h,u)},T))}function y(h){return Math.max(Math.min(h,100),0)}function _(h){return Array.isArray(h)?h:[h]}function C(h){var u=(h=String(h)).split(".");return u.length>1?u[1].length:0}function x(h,u){h.classList&&!/\s/.test(u)?h.classList.add(u):h.className+=" "+u}function R(h,u){h.classList&&!/\s/.test(u)?h.classList.remove(u):h.className=h.className.replace(new RegExp("(^|\\b)"+u.split(" ").join("|")+"(\\b|$)","gi")," ")}function Z(h,u){return h.classList?h.classList.contains(u):new RegExp("\\b"+u+"\\b").test(h.className)}function K(h){var u=window.pageXOffset!==void 0,T=(h.compatMode||"")==="CSS1Compat";return{x:u?window.pageXOffset:T?h.documentElement.scrollLeft:h.body.scrollLeft,y:u?window.pageYOffset:T?h.documentElement.scrollTop:h.body.scrollTop}}function te(){return window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"}}function ne(){var h=!1;try{var u=Object.defineProperty({},"passive",{get:function(){h=!0}});window.addEventListener("test",null,u)}catch{}return h}function be(){return window.CSS&&CSS.supports&&CSS.supports("touch-action","none")}function ue(h,u){return 100/(u-h)}function V(h,u,T){return 100*u/(h[T+1]-h[T])}function q(h,u){return V(h,h[0]<0?u+Math.abs(h[0]):u-h[0],0)}function he(h,u){return u*(h[1]-h[0])/100+h[0]}function de(h,u){for(var T=1;h>=u[T];)T+=1;return T}function B(h,u,T){if(T>=h.slice(-1)[0])return 100;var W=de(T,h),O=h[W-1],ee=h[W],le=u[W-1],ke=u[W];return le+q([O,ee],T)/ue(le,ke)}function pe(h,u,T){if(T>=100)return h.slice(-1)[0];var W=de(T,u),O=h[W-1],ee=h[W],le=u[W-1];return he([O,ee],(T-le)*ue(le,u[W]))}function _e(h,u,T,W){if(W===100)return W;var O=de(W,h),ee=h[O-1],le=h[O];return T?W-ee>(le-ee)/2?le:ee:u[O-1]?h[O-1]+d(W-h[O-1],u[O-1]):W}var oe,fe;s.PipsMode=void 0,(fe=s.PipsMode||(s.PipsMode={})).Range="range",fe.Steps="steps",fe.Positions="positions",fe.Count="count",fe.Values="values",s.PipsType=void 0,(oe=s.PipsType||(s.PipsType={}))[oe.None=-1]="None",oe[oe.NoValue=0]="NoValue",oe[oe.LargeValue=1]="LargeValue",oe[oe.SmallValue=2]="SmallValue";var xe=function(){function h(u,T,W){var O;this.xPct=[],this.xVal=[],this.xSteps=[],this.xNumSteps=[],this.xHighestCompleteStep=[],this.xSteps=[W||!1],this.xNumSteps=[!1],this.snap=T;var ee=[];for(Object.keys(u).forEach(function(le){ee.push([_(u[le]),le])}),ee.sort(function(le,ke){return le[0][0]-ke[0][0]}),O=0;O<ee.length;O++)this.handleEntryPoint(ee[O][1],ee[O][0]);for(this.xNumSteps=this.xSteps.slice(0),O=0;O<this.xNumSteps.length;O++)this.handleStepPoint(O,this.xNumSteps[O])}return h.prototype.getDistance=function(u){for(var T=[],W=0;W<this.xNumSteps.length-1;W++)T[W]=V(this.xVal,u,W);return T},h.prototype.getAbsoluteDistance=function(u,T,W){var O,ee=0;if(u<this.xPct[this.xPct.length-1])for(;u>this.xPct[ee+1];)ee++;else u===this.xPct[this.xPct.length-1]&&(ee=this.xPct.length-2);W||u!==this.xPct[ee+1]||ee++,T===null&&(T=[]);var le=1,ke=T[ee],Oe=0,Dt=0,Ze=0,re=0;for(O=W?(u-this.xPct[ee])/(this.xPct[ee+1]-this.xPct[ee]):(this.xPct[ee+1]-u)/(this.xPct[ee+1]-this.xPct[ee]);ke>0;)Oe=this.xPct[ee+1+re]-this.xPct[ee+re],T[ee+re]*le+100-100*O>100?(Dt=Oe*O,le=(ke-100*O)/T[ee+re],O=1):(Dt=T[ee+re]*Oe/100*le,le=0),W?(Ze-=Dt,this.xPct.length+re>=1&&re--):(Ze+=Dt,this.xPct.length-re>=1&&re++),ke=T[ee+re]*le;return u+Ze},h.prototype.toStepping=function(u){return u=B(this.xVal,this.xPct,u)},h.prototype.fromStepping=function(u){return pe(this.xVal,this.xPct,u)},h.prototype.getStep=function(u){return u=_e(this.xPct,this.xSteps,this.snap,u)},h.prototype.getDefaultStep=function(u,T,W){var O=de(u,this.xPct);return(u===100||T&&u===this.xPct[O-1])&&(O=Math.max(O-1,1)),(this.xVal[O]-this.xVal[O-1])/W},h.prototype.getNearbySteps=function(u){var T=de(u,this.xPct);return{stepBefore:{startValue:this.xVal[T-2],step:this.xNumSteps[T-2],highestStep:this.xHighestCompleteStep[T-2]},thisStep:{startValue:this.xVal[T-1],step:this.xNumSteps[T-1],highestStep:this.xHighestCompleteStep[T-1]},stepAfter:{startValue:this.xVal[T],step:this.xNumSteps[T],highestStep:this.xHighestCompleteStep[T]}}},h.prototype.countStepDecimals=function(){var u=this.xNumSteps.map(C);return Math.max.apply(null,u)},h.prototype.hasNoSize=function(){return this.xVal[0]===this.xVal[this.xVal.length-1]},h.prototype.convert=function(u){return this.getStep(this.toStepping(u))},h.prototype.handleEntryPoint=function(u,T){var W;if(!p(W=u==="min"?0:u==="max"?100:parseFloat(u))||!p(T[0]))throw new Error("noUiSlider: 'range' value isn't numeric.");this.xPct.push(W),this.xVal.push(T[0]);var O=Number(T[1]);W?this.xSteps.push(!isNaN(O)&&O):isNaN(O)||(this.xSteps[0]=O),this.xHighestCompleteStep.push(0)},h.prototype.handleStepPoint=function(u,T){if(T)if(this.xVal[u]!==this.xVal[u+1]){this.xSteps[u]=V([this.xVal[u],this.xVal[u+1]],T,0)/ue(this.xPct[u],this.xPct[u+1]);var W=(this.xVal[u+1]-this.xVal[u])/this.xNumSteps[u],O=Math.ceil(Number(W.toFixed(3))-1),ee=this.xVal[u]+this.xNumSteps[u]*O;this.xHighestCompleteStep[u]=ee}else this.xSteps[u]=this.xHighestCompleteStep[u]=this.xVal[u]},h}(),ve={to:function(h){return h===void 0?"":h.toFixed(2)},from:Number},$e={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},Ae={tooltips:".__tooltips",aria:".__aria"};function ze(h,u){if(!p(u))throw new Error("noUiSlider: 'step' is not numeric.");h.singleStep=u}function je(h,u){if(!p(u))throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");h.keyboardPageMultiplier=u}function At(h,u){if(!p(u))throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");h.keyboardMultiplier=u}function It(h,u){if(!p(u))throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");h.keyboardDefaultStep=u}function Je(h,u){if(typeof u!="object"||Array.isArray(u))throw new Error("noUiSlider: 'range' is not an object.");if(u.min===void 0||u.max===void 0)throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");h.spectrum=new xe(u,h.snap||!1,h.singleStep)}function X(h,u){if(u=_(u),!Array.isArray(u)||!u.length)throw new Error("noUiSlider: 'start' option is incorrect.");h.handles=u.length,h.start=u}function Me(h,u){if(typeof u!="boolean")throw new Error("noUiSlider: 'snap' option must be a boolean.");h.snap=u}function Vs(h,u){if(typeof u!="boolean")throw new Error("noUiSlider: 'animate' option must be a boolean.");h.animate=u}function Yt(h,u){if(typeof u!="number")throw new Error("noUiSlider: 'animationDuration' option must be a number.");h.animationDuration=u}function Us(h,u){var T,W=[!1];if(u==="lower"?u=[!0,!1]:u==="upper"&&(u=[!1,!0]),u===!0||u===!1){for(T=1;T<h.handles;T++)W.push(u);W.push(!1)}else{if(!Array.isArray(u)||!u.length||u.length!==h.handles+1)throw new Error("noUiSlider: 'connect' option doesn't match handle count.");W=u}h.connect=W}function qs(h,u){switch(u){case"horizontal":h.ort=0;break;case"vertical":h.ort=1;break;default:throw new Error("noUiSlider: 'orientation' option is invalid.")}}function m(h,u){if(!p(u))throw new Error("noUiSlider: 'margin' option must be numeric.");u!==0&&(h.margin=h.spectrum.getDistance(u))}function v(h,u){if(!p(u))throw new Error("noUiSlider: 'limit' option must be numeric.");if(h.limit=h.spectrum.getDistance(u),!h.limit||h.handles<2)throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.")}function S(h,u){var T;if(!p(u)&&!Array.isArray(u))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(u)&&u.length!==2&&!p(u[0])&&!p(u[1]))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(u!==0){for(Array.isArray(u)||(u=[u,u]),h.padding=[h.spectrum.getDistance(u[0]),h.spectrum.getDistance(u[1])],T=0;T<h.spectrum.xNumSteps.length-1;T++)if(h.padding[0][T]<0||h.padding[1][T]<0)throw new Error("noUiSlider: 'padding' option must be a positive number(s).");var W=u[0]+u[1],O=h.spectrum.xVal[0];if(W/(h.spectrum.xVal[h.spectrum.xVal.length-1]-O)>1)throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.")}}function E(h,u){switch(u){case"ltr":h.dir=0;break;case"rtl":h.dir=1;break;default:throw new Error("noUiSlider: 'direction' option was not recognized.")}}function L(h,u){if(typeof u!="string")throw new Error("noUiSlider: 'behaviour' must be a string containing options.");var T=u.indexOf("tap")>=0,W=u.indexOf("drag")>=0,O=u.indexOf("fixed")>=0,ee=u.indexOf("snap")>=0,le=u.indexOf("hover")>=0,ke=u.indexOf("unconstrained")>=0,Oe=u.indexOf("drag-all")>=0,Dt=u.indexOf("smooth-steps")>=0;if(O){if(h.handles!==2)throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");m(h,h.start[1]-h.start[0])}if(ke&&(h.margin||h.limit))throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");h.events={tap:T||ee,drag:W,dragAll:Oe,smoothSteps:Dt,fixed:O,snap:ee,hover:le,unconstrained:ke}}function $(h,u){if(u!==!1)if(u===!0||n(u)){h.tooltips=[];for(var T=0;T<h.handles;T++)h.tooltips.push(u)}else{if((u=_(u)).length!==h.handles)throw new Error("noUiSlider: must pass a formatter for all handles.");u.forEach(function(W){if(typeof W!="boolean"&&!n(W))throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.")}),h.tooltips=u}}function D(h,u){if(u.length!==h.handles)throw new Error("noUiSlider: must pass a attributes for all handles.");h.handleAttributes=u}function P(h,u){if(!n(u))throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");h.ariaFormat=u}function H(h,u){if(!i(u))throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");h.format=u}function A(h,u){if(typeof u!="boolean")throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");h.keyboardSupport=u}function G(h,u){h.documentElement=u}function Y(h,u){if(typeof u!="string"&&u!==!1)throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");h.cssPrefix=u}function Q(h,u){if(typeof u!="object")throw new Error("noUiSlider: 'cssClasses' must be an object.");typeof h.cssPrefix=="string"?(h.cssClasses={},Object.keys(u).forEach(function(T){h.cssClasses[T]=h.cssPrefix+u[T]})):h.cssClasses=u}function se(h){var u={margin:null,limit:null,padding:null,animate:!0,animationDuration:300,ariaFormat:ve,format:ve},T={step:{r:!1,t:ze},keyboardPageMultiplier:{r:!1,t:je},keyboardMultiplier:{r:!1,t:At},keyboardDefaultStep:{r:!1,t:It},start:{r:!0,t:X},connect:{r:!0,t:Us},direction:{r:!0,t:E},snap:{r:!1,t:Me},animate:{r:!1,t:Vs},animationDuration:{r:!1,t:Yt},range:{r:!0,t:Je},orientation:{r:!1,t:qs},margin:{r:!1,t:m},limit:{r:!1,t:v},padding:{r:!1,t:S},behaviour:{r:!0,t:L},ariaFormat:{r:!1,t:P},format:{r:!1,t:H},tooltips:{r:!1,t:$},keyboardSupport:{r:!0,t:A},documentElement:{r:!1,t:G},cssPrefix:{r:!0,t:Y},cssClasses:{r:!0,t:Q},handleAttributes:{r:!1,t:D}},W={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:$e,keyboardPageMultiplier:5,keyboardMultiplier:1,keyboardDefaultStep:10};h.format&&!h.ariaFormat&&(h.ariaFormat=h.format),Object.keys(T).forEach(function(Oe){if(r(h[Oe])||W[Oe]!==void 0)T[Oe].t(u,r(h[Oe])?h[Oe]:W[Oe]);else if(T[Oe].r)throw new Error("noUiSlider: '"+Oe+"' is required.")}),u.pips=h.pips;var O=document.createElement("div"),ee=O.style.msTransform!==void 0,le=O.style.transform!==void 0;u.transformRule=le?"transform":ee?"msTransform":"webkitTransform";var ke=[["left","top"],["right","bottom"]];return u.style=ke[u.dir][u.ort],u}function me(h,u,T){var W,O,ee,le,ke,Oe=te(),Dt=be()&&ne(),Ze=h,re=u.spectrum,Ft=[],Fe=[],ut=[],mn=0,Bt={},Ss=h.ownerDocument,fi=u.documentElement||Ss.documentElement,mi=Ss.body,nc=Ss.dir==="rtl"||u.ort===1?0:100;function zt(f,w){var k=Ss.createElement("div");return w&&x(k,w),f.appendChild(k),k}function oc(f,w){var k=zt(f,u.cssClasses.origin),M=zt(k,u.cssClasses.handle);if(zt(M,u.cssClasses.touchArea),M.setAttribute("data-handle",String(w)),u.keyboardSupport&&(M.setAttribute("tabindex","0"),M.addEventListener("keydown",function(I){return wc(I,w)})),u.handleAttributes!==void 0){var F=u.handleAttributes[w];Object.keys(F).forEach(function(I){M.setAttribute(I,F[I])})}return M.setAttribute("role","slider"),M.setAttribute("aria-orientation",u.ort?"vertical":"horizontal"),w===0?x(M,u.cssClasses.handleLower):w===u.handles-1&&x(M,u.cssClasses.handleUpper),k}function ir(f,w){return!!w&&zt(f,u.cssClasses.connect)}function rc(f,w){var k=zt(w,u.cssClasses.connects);O=[],(ee=[]).push(ir(k,f[0]));for(var M=0;M<u.handles;M++)O.push(oc(w,M)),ut[M]=M,ee.push(ir(k,f[M+1]))}function lc(f){return x(f,u.cssClasses.target),u.dir===0?x(f,u.cssClasses.ltr):x(f,u.cssClasses.rtl),u.ort===0?x(f,u.cssClasses.horizontal):x(f,u.cssClasses.vertical),x(f,getComputedStyle(f).direction==="rtl"?u.cssClasses.textDirectionRtl:u.cssClasses.textDirectionLtr),zt(f,u.cssClasses.base)}function ac(f,w){return!(!u.tooltips||!u.tooltips[w])&&zt(f.firstChild,u.cssClasses.tooltip)}function nr(){return Ze.hasAttribute("disabled")}function pn(f){return O[f].hasAttribute("disabled")}function gn(){ke&&(Ws("update"+Ae.tooltips),ke.forEach(function(f){f&&o(f)}),ke=null)}function or(){gn(),ke=O.map(ac),kn("update"+Ae.tooltips,function(f,w,k){if(ke&&u.tooltips&&ke[w]!==!1){var M=f[w];u.tooltips[w]!==!0&&(M=u.tooltips[w].to(k[w])),ke[w].innerHTML=M}})}function cc(){Ws("update"+Ae.aria),kn("update"+Ae.aria,function(f,w,k,M,F){ut.forEach(function(I){var ae=O[I],U=pi(Fe,I,0,!0,!0,!0),Ue=pi(Fe,I,100,!0,!0,!0),Be=F[I],Te=String(u.ariaFormat.to(k[I]));U=re.fromStepping(U).toFixed(1),Ue=re.fromStepping(Ue).toFixed(1),Be=re.fromStepping(Be).toFixed(1),ae.children[0].setAttribute("aria-valuemin",U),ae.children[0].setAttribute("aria-valuemax",Ue),ae.children[0].setAttribute("aria-valuenow",Be),ae.children[0].setAttribute("aria-valuetext",Te)})})}function uc(f){if(f.mode===s.PipsMode.Range||f.mode===s.PipsMode.Steps)return re.xVal;if(f.mode===s.PipsMode.Count){if(f.values<2)throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");for(var w=f.values-1,k=100/w,M=[];w--;)M[w]=w*k;return M.push(100),rr(M,f.stepped)}return f.mode===s.PipsMode.Positions?rr(f.values,f.stepped):f.mode===s.PipsMode.Values?f.stepped?f.values.map(function(F){return re.fromStepping(re.getStep(re.toStepping(F)))}):f.values:[]}function rr(f,w){return f.map(function(k){return re.fromStepping(w?re.getStep(k):k)})}function dc(f){function w(Be,Te){return Number((Be+Te).toFixed(7))}var k=uc(f),M={},F=re.xVal[0],I=re.xVal[re.xVal.length-1],ae=!1,U=!1,Ue=0;return(k=c(k.slice().sort(function(Be,Te){return Be-Te})))[0]!==F&&(k.unshift(F),ae=!0),k[k.length-1]!==I&&(k.push(I),U=!0),k.forEach(function(Be,Te){var Ie,Ee,Ge,lt,Ye,pr,Cn,gr,vr,br,Sn=Be,Ls=k[Te+1],wr=f.mode===s.PipsMode.Steps;for(wr&&(Ie=re.xNumSteps[Te]),Ie||(Ie=Ls-Sn),Ls===void 0&&(Ls=Sn),Ie=Math.max(Ie,1e-7),Ee=Sn;Ee<=Ls;Ee=w(Ee,Ie)){for(gr=(Ye=(lt=re.toStepping(Ee))-Ue)/(f.density||1),br=Ye/(vr=Math.round(gr)),Ge=1;Ge<=vr;Ge+=1)M[(pr=Ue+Ge*br).toFixed(5)]=[re.fromStepping(pr),0];Cn=k.indexOf(Ee)>-1?s.PipsType.LargeValue:wr?s.PipsType.SmallValue:s.PipsType.NoValue,!Te&&ae&&Ee!==Ls&&(Cn=0),Ee===Ls&&U||(M[lt.toFixed(5)]=[Ee,Cn]),Ue=lt}}),M}function hc(f,w,k){var M,F,I=Ss.createElement("div"),ae=((M={})[s.PipsType.None]="",M[s.PipsType.NoValue]=u.cssClasses.valueNormal,M[s.PipsType.LargeValue]=u.cssClasses.valueLarge,M[s.PipsType.SmallValue]=u.cssClasses.valueSub,M),U=((F={})[s.PipsType.None]="",F[s.PipsType.NoValue]=u.cssClasses.markerNormal,F[s.PipsType.LargeValue]=u.cssClasses.markerLarge,F[s.PipsType.SmallValue]=u.cssClasses.markerSub,F),Ue=[u.cssClasses.valueHorizontal,u.cssClasses.valueVertical],Be=[u.cssClasses.markerHorizontal,u.cssClasses.markerVertical];function Te(Ee,Ge){var lt=Ge===u.cssClasses.value,Ye=lt?ae:U;return Ge+" "+(lt?Ue:Be)[u.ort]+" "+Ye[Ee]}function Ie(Ee,Ge,lt){if((lt=w?w(Ge,lt):lt)!==s.PipsType.None){var Ye=zt(I,!1);Ye.className=Te(lt,u.cssClasses.marker),Ye.style[u.style]=Ee+"%",lt>s.PipsType.NoValue&&((Ye=zt(I,!1)).className=Te(lt,u.cssClasses.value),Ye.setAttribute("data-value",String(Ge)),Ye.style[u.style]=Ee+"%",Ye.innerHTML=String(k.to(Ge)))}}return x(I,u.cssClasses.pips),x(I,u.ort===0?u.cssClasses.pipsHorizontal:u.cssClasses.pipsVertical),Object.keys(f).forEach(function(Ee){Ie(Ee,f[Ee][0],f[Ee][1])}),I}function vn(){le&&(o(le),le=null)}function bn(f){vn();var w=dc(f),k=f.filter,M=f.format||{to:function(F){return String(Math.round(F))}};return le=Ze.appendChild(hc(w,k,M))}function lr(){var f=W.getBoundingClientRect(),w="offset"+["Width","Height"][u.ort];return u.ort===0?f.width||W[w]:f.height||W[w]}function as(f,w,k,M){var F=function(ae){var U=fc(ae,M.pageOffset,M.target||w);return!!U&&!(nr()&&!M.doNotReject)&&!(Z(Ze,u.cssClasses.tap)&&!M.doNotReject)&&!(f===Oe.start&&U.buttons!==void 0&&U.buttons>1)&&(!M.hover||!U.buttons)&&(Dt||U.preventDefault(),U.calcPoint=U.points[u.ort],void k(U,M))},I=[];return f.split(" ").forEach(function(ae){w.addEventListener(ae,F,!!Dt&&{passive:!0}),I.push([ae,F])}),I}function fc(f,w,k){var M=f.type.indexOf("touch")===0,F=f.type.indexOf("mouse")===0,I=f.type.indexOf("pointer")===0,ae=0,U=0;if(f.type.indexOf("MSPointer")===0&&(I=!0),f.type==="mousedown"&&!f.buttons&&!f.touches)return!1;if(M){var Ue=function(Ie){var Ee=Ie.target;return Ee===k||k.contains(Ee)||f.composed&&f.composedPath().shift()===k};if(f.type==="touchstart"){var Be=Array.prototype.filter.call(f.touches,Ue);if(Be.length>1)return!1;ae=Be[0].pageX,U=Be[0].pageY}else{var Te=Array.prototype.find.call(f.changedTouches,Ue);if(!Te)return!1;ae=Te.pageX,U=Te.pageY}}return w=w||K(Ss),(F||I)&&(ae=f.clientX+w.x,U=f.clientY+w.y),f.pageOffset=w,f.points=[ae,U],f.cursor=F||I,f}function ar(f){var w=100*(f-g(W,u.ort))/lr();return w=y(w),u.dir?100-w:w}function mc(f){var w=100,k=!1;return O.forEach(function(M,F){if(!pn(F)){var I=Fe[F],ae=Math.abs(I-f);(ae<w||ae<=w&&f>I||ae===100&&w===100)&&(k=F,w=ae)}}),k}function pc(f,w){f.type==="mouseout"&&f.target.nodeName==="HTML"&&f.relatedTarget===null&&wn(f,w)}function gc(f,w){if(navigator.appVersion.indexOf("MSIE 9")===-1&&f.buttons===0&&w.buttonsProperty!==0)return wn(f,w);var k=(u.dir?-1:1)*(f.calcPoint-w.startCalcPoint);cr(k>0,100*k/w.baseSize,w.locations,w.handleNumbers,w.connect)}function wn(f,w){w.handle&&(R(w.handle,u.cssClasses.active),mn-=1),w.listeners.forEach(function(k){fi.removeEventListener(k[0],k[1])}),mn===0&&(R(Ze,u.cssClasses.drag),xn(),f.cursor&&(mi.style.cursor="",mi.removeEventListener("selectstart",l))),u.events.smoothSteps&&(w.handleNumbers.forEach(function(k){cs(k,Fe[k],!0,!0,!1,!1)}),w.handleNumbers.forEach(function(k){Ve("update",k)})),w.handleNumbers.forEach(function(k){Ve("change",k),Ve("set",k),Ve("end",k)})}function yn(f,w){if(!w.handleNumbers.some(pn)){var k;w.handleNumbers.length===1&&(k=O[w.handleNumbers[0]].children[0],mn+=1,x(k,u.cssClasses.active)),f.stopPropagation();var M=[],F=as(Oe.move,fi,gc,{target:f.target,handle:k,connect:w.connect,listeners:M,startCalcPoint:f.calcPoint,baseSize:lr(),pageOffset:f.pageOffset,handleNumbers:w.handleNumbers,buttonsProperty:f.buttons,locations:Fe.slice()}),I=as(Oe.end,fi,wn,{target:f.target,handle:k,listeners:M,doNotReject:!0,handleNumbers:w.handleNumbers}),ae=as("mouseout",fi,pc,{target:f.target,handle:k,listeners:M,doNotReject:!0,handleNumbers:w.handleNumbers});M.push.apply(M,F.concat(I,ae)),f.cursor&&(mi.style.cursor=getComputedStyle(f.target).cursor,O.length>1&&x(Ze,u.cssClasses.drag),mi.addEventListener("selectstart",l,!1)),w.handleNumbers.forEach(function(U){Ve("start",U)})}}function vc(f){f.stopPropagation();var w=ar(f.calcPoint),k=mc(w);k!==!1&&(u.events.snap||b(Ze,u.cssClasses.tap,u.animationDuration),cs(k,w,!0,!0),xn(),Ve("slide",k,!0),Ve("update",k,!0),u.events.snap?yn(f,{handleNumbers:[k]}):(Ve("change",k,!0),Ve("set",k,!0)))}function bc(f){var w=ar(f.calcPoint),k=re.getStep(w),M=re.fromStepping(k);Object.keys(Bt).forEach(function(F){F.split(".")[0]==="hover"&&Bt[F].forEach(function(I){I.call(vi,M)})})}function wc(f,w){if(nr()||pn(w))return!1;var k=["Left","Right"],M=["Down","Up"],F=["PageDown","PageUp"],I=["Home","End"];u.dir&&!u.ort?k.reverse():u.ort&&!u.dir&&(M.reverse(),F.reverse());var ae,U=f.key.replace("Arrow",""),Ue=U===F[0],Be=U===F[1],Te=U===M[0]||U===k[0]||Ue,Ie=U===M[1]||U===k[1]||Be,Ee=U===I[0],Ge=U===I[1];if(!(Te||Ie||Ee||Ge))return!0;if(f.preventDefault(),Ie||Te){var lt=Te?0:1,Ye=mr(w)[lt];if(Ye===null)return!1;Ye===!1&&(Ye=re.getDefaultStep(Fe[w],Te,u.keyboardDefaultStep)),Ye*=Be||Ue?u.keyboardPageMultiplier:u.keyboardMultiplier,Ye=Math.max(Ye,1e-7),Ye*=Te?-1:1,ae=Ft[w]+Ye}else ae=Ge?u.spectrum.xVal[u.spectrum.xVal.length-1]:u.spectrum.xVal[0];return cs(w,re.toStepping(ae),!0,!0),Ve("slide",w),Ve("update",w),Ve("change",w),Ve("set",w),!1}function yc(f){f.fixed||O.forEach(function(w,k){as(Oe.start,w.children[0],yn,{handleNumbers:[k]})}),f.tap&&as(Oe.start,W,vc,{}),f.hover&&as(Oe.move,W,bc,{hover:!0}),f.drag&&ee.forEach(function(w,k){if(w!==!1&&k!==0&&k!==ee.length-1){var M=O[k-1],F=O[k],I=[w],ae=[M,F],U=[k-1,k];x(w,u.cssClasses.draggable),f.fixed&&(I.push(M.children[0]),I.push(F.children[0])),f.dragAll&&(ae=O,U=ut),I.forEach(function(Ue){as(Oe.start,Ue,yn,{handles:ae,handleNumbers:U,connect:w})})}})}function kn(f,w){Bt[f]=Bt[f]||[],Bt[f].push(w),f.split(".")[0]==="update"&&O.forEach(function(k,M){Ve("update",M)})}function kc(f){return f===Ae.aria||f===Ae.tooltips}function Ws(f){var w=f&&f.split(".")[0],k=w?f.substring(w.length):f;Object.keys(Bt).forEach(function(M){var F=M.split(".")[0],I=M.substring(F.length);w&&w!==F||k&&k!==I||kc(I)&&k!==I||delete Bt[M]})}function Ve(f,w,k){Object.keys(Bt).forEach(function(M){var F=M.split(".")[0];f===F&&Bt[M].forEach(function(I){I.call(vi,Ft.map(u.format.to),w,Ft.slice(),k||!1,Fe.slice(),vi)})})}function pi(f,w,k,M,F,I,ae){var U;return O.length>1&&!u.events.unconstrained&&(M&&w>0&&(U=re.getAbsoluteDistance(f[w-1],u.margin,!1),k=Math.max(k,U)),F&&w<O.length-1&&(U=re.getAbsoluteDistance(f[w+1],u.margin,!0),k=Math.min(k,U))),O.length>1&&u.limit&&(M&&w>0&&(U=re.getAbsoluteDistance(f[w-1],u.limit,!1),k=Math.min(k,U)),F&&w<O.length-1&&(U=re.getAbsoluteDistance(f[w+1],u.limit,!0),k=Math.max(k,U))),u.padding&&(w===0&&(U=re.getAbsoluteDistance(0,u.padding[0],!1),k=Math.max(k,U)),w===O.length-1&&(U=re.getAbsoluteDistance(100,u.padding[1],!0),k=Math.min(k,U))),ae||(k=re.getStep(k)),!((k=y(k))===f[w]&&!I)&&k}function _n(f,w){var k=u.ort;return(k?w:f)+", "+(k?f:w)}function cr(f,w,k,M,F){var I=k.slice(),ae=M[0],U=u.events.smoothSteps,Ue=[!f,f],Be=[f,!f];M=M.slice(),f&&M.reverse(),M.length>1?M.forEach(function(Ie,Ee){var Ge=pi(I,Ie,I[Ie]+w,Ue[Ee],Be[Ee],!1,U);Ge===!1?w=0:(w=Ge-I[Ie],I[Ie]=Ge)}):Ue=Be=[!0];var Te=!1;M.forEach(function(Ie,Ee){Te=cs(Ie,k[Ie]+w,Ue[Ee],Be[Ee],!1,U)||Te}),Te&&(M.forEach(function(Ie){Ve("update",Ie),Ve("slide",Ie)}),F!=null&&Ve("drag",ae))}function ur(f,w){return u.dir?100-f-w:f}function _c(f,w){Fe[f]=w,Ft[f]=re.fromStepping(w);var k="translate("+_n(ur(w,0)-nc+"%","0")+")";O[f].style[u.transformRule]=k,dr(f),dr(f+1)}function xn(){ut.forEach(function(f){var w=Fe[f]>50?-1:1,k=3+(O.length+w*f);O[f].style.zIndex=String(k)})}function cs(f,w,k,M,F,I){return F||(w=pi(Fe,f,w,k,M,!1,I)),w!==!1&&(_c(f,w),!0)}function dr(f){if(ee[f]){var w=0,k=100;f!==0&&(w=Fe[f-1]),f!==ee.length-1&&(k=Fe[f]);var M=k-w,F="translate("+_n(ur(w,M)+"%","0")+")",I="scale("+_n(M/100,"1")+")";ee[f].style[u.transformRule]=F+" "+I}}function hr(f,w){return f===null||f===!1||f===void 0?Fe[w]:(typeof f=="number"&&(f=String(f)),(f=u.format.from(f))!==!1&&(f=re.toStepping(f)),f===!1||isNaN(f)?Fe[w]:f)}function gi(f,w,k){var M=_(f),F=Fe[0]===void 0;w=w===void 0||w,u.animate&&!F&&b(Ze,u.cssClasses.tap,u.animationDuration),ut.forEach(function(U){cs(U,hr(M[U],U),!0,!1,k)});var I=ut.length===1?0:1;if(F&&re.hasNoSize()&&(k=!0,Fe[0]=0,ut.length>1)){var ae=100/(ut.length-1);ut.forEach(function(U){Fe[U]=U*ae})}for(;I<ut.length;++I)ut.forEach(function(U){cs(U,Fe[U],!0,!0,k)});xn(),ut.forEach(function(U){Ve("update",U),M[U]!==null&&w&&Ve("set",U)})}function xc(f){gi(u.start,f)}function Cc(f,w,k,M){if(!((f=Number(f))>=0&&f<ut.length))throw new Error("noUiSlider: invalid handle number, got: "+f);cs(f,hr(w,f),!0,!0,M),Ve("update",f),k&&Ve("set",f)}function fr(f){if(f===void 0&&(f=!1),f)return Ft.length===1?Ft[0]:Ft.slice(0);var w=Ft.map(u.format.to);return w.length===1?w[0]:w}function Sc(){for(Ws(Ae.aria),Ws(Ae.tooltips),Object.keys(u.cssClasses).forEach(function(f){R(Ze,u.cssClasses[f])});Ze.firstChild;)Ze.removeChild(Ze.firstChild);delete Ze.noUiSlider}function mr(f){var w=Fe[f],k=re.getNearbySteps(w),M=Ft[f],F=k.thisStep.step,I=null;if(u.snap)return[M-k.stepBefore.startValue||null,k.stepAfter.startValue-M||null];F!==!1&&M+F>k.stepAfter.startValue&&(F=k.stepAfter.startValue-M),I=M>k.thisStep.startValue?k.thisStep.step:k.stepBefore.step!==!1&&M-k.stepBefore.highestStep,w===100?F=null:w===0&&(I=null);var ae=re.countStepDecimals();return F!==null&&F!==!1&&(F=Number(F.toFixed(ae))),I!==null&&I!==!1&&(I=Number(I.toFixed(ae))),[I,F]}function Lc(){return ut.map(mr)}function Ec(f,w){var k=fr(),M=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];M.forEach(function(I){f[I]!==void 0&&(T[I]=f[I])});var F=se(T);M.forEach(function(I){f[I]!==void 0&&(u[I]=F[I])}),re=F.spectrum,u.margin=F.margin,u.limit=F.limit,u.padding=F.padding,u.pips?bn(u.pips):vn(),u.tooltips?or():gn(),Fe=[],gi(r(f.start)?f.start:k,w)}function Mc(){W=lc(Ze),rc(u.connect,W),yc(u.events),gi(u.start),u.pips&&bn(u.pips),u.tooltips&&or(),cc()}Mc();var vi={destroy:Sc,steps:Lc,on:kn,off:Ws,get:fr,set:gi,setHandle:Cc,reset:xc,__moveHandles:function(f,w,k){cr(f,w,Fe,k)},options:T,updateOptions:Ec,target:Ze,removePips:vn,removeTooltips:gn,getPositions:function(){return Fe.slice()},getTooltips:function(){return ke},getOrigins:function(){return O},pips:bn};return vi}function Le(h,u){if(!h||!h.nodeName)throw new Error("noUiSlider: create requires a single element, got: "+h);if(h.noUiSlider)throw new Error("noUiSlider: Slider was already initialized.");var T=me(h,se(u),u);return h.noUiSlider=T,T}var Ce={__spectrum:xe,cssClasses:$e,create:Le};s.create=Le,s.cssClasses=$e,s.default=Ce,Object.defineProperty(s,"__esModule",{value:!0})})(t)}));function Nl(e,t){if(!Array.isArray(e)||!Array.isArray(t))return!1;const s=t.slice().sort();return e.length===t.length&&e.slice().sort().every(function(i,n){return i===s[n]})}var ko={name:"Slider",emits:["input","update:modelValue","start","slide","drag","update","change","set","end"],props:{value:{validator:function(e){return t=>typeof t=="number"||t instanceof Array||t==null||t===!1},required:!1},modelValue:{validator:function(e){return t=>typeof t=="number"||t instanceof Array||t==null||t===!1},required:!1},id:{type:[String,Number],required:!1},disabled:{type:Boolean,required:!1,default:!1},min:{type:Number,required:!1,default:0},max:{type:Number,required:!1,default:100},step:{type:Number,required:!1,default:1},orientation:{type:String,required:!1,default:"horizontal"},direction:{type:String,required:!1,default:"ltr"},tooltips:{type:Boolean,required:!1,default:!0},options:{type:Object,required:!1,default:()=>({})},merge:{type:Number,required:!1,default:-1},format:{type:[Object,Function,Boolean],required:!1,default:null},classes:{type:Object,required:!1,default:()=>({})},showTooltip:{type:String,required:!1,default:"always"},tooltipPosition:{type:String,required:!1,default:null},lazy:{type:Boolean,required:!1,default:!0},ariaLabelledby:{type:String,required:!1,default:void 0},aria:{required:!1,type:Object,default:()=>({})}},setup(e,t){const s=function(r,l,c){const{value:d,modelValue:g,min:p}=Gs(r);let b=g&&g.value!==void 0?g:d;const y=$t(b.value);if(Ei(b.value)&&(b=$t(p.value)),Array.isArray(b.value)&&b.value.length==0)throw new Error("Slider v-model must not be an empty array");return{value:b,initialValue:y}}(e),i=function(r,l,c){const{classes:d,showTooltip:g,tooltipPosition:p,orientation:b}=Gs(r),y=Vt(()=>({target:"slider-target",focused:"slider-focused",tooltipFocus:"slider-tooltip-focus",tooltipDrag:"slider-tooltip-drag",ltr:"slider-ltr",rtl:"slider-rtl",horizontal:"slider-horizontal",vertical:"slider-vertical",textDirectionRtl:"slider-txt-dir-rtl",textDirectionLtr:"slider-txt-dir-ltr",base:"slider-base",connects:"slider-connects",connect:"slider-connect",origin:"slider-origin",handle:"slider-handle",handleLower:"slider-handle-lower",handleUpper:"slider-handle-upper",touchArea:"slider-touch-area",tooltip:"slider-tooltip",tooltipTop:"slider-tooltip-top",tooltipBottom:"slider-tooltip-bottom",tooltipLeft:"slider-tooltip-left",tooltipRight:"slider-tooltip-right",tooltipHidden:"slider-tooltip-hidden",active:"slider-active",draggable:"slider-draggable",tap:"slider-state-tap",drag:"slider-state-drag",pips:"slider-pips",pipsHorizontal:"slider-pips-horizontal",pipsVertical:"slider-pips-vertical",marker:"slider-marker",markerHorizontal:"slider-marker-horizontal",markerVertical:"slider-marker-vertical",markerNormal:"slider-marker-normal",markerLarge:"slider-marker-large",markerSub:"slider-marker-sub",value:"slider-value",valueHorizontal:"slider-value-horizontal",valueVertical:"slider-value-vertical",valueNormal:"slider-value-normal",valueLarge:"slider-value-large",valueSub:"slider-value-sub",...d.value}));return{classList:Vt(()=>{const _={...y.value};return Object.keys(_).forEach(C=>{_[C]=Array.isArray(_[C])?_[C].filter(x=>x!==null).join(" "):_[C]}),g.value!=="always"&&(_.target+=` ${g.value==="drag"?_.tooltipDrag:_.tooltipFocus}`),b.value==="horizontal"&&(_.tooltip+=p.value==="bottom"?` ${_.tooltipBottom}`:` ${_.tooltipTop}`),b.value==="vertical"&&(_.tooltip+=p.value==="right"?` ${_.tooltipRight}`:` ${_.tooltipLeft}`),_})}}(e),n=function(r,l,c){const{format:d,step:g}=Gs(r),p=c.value,b=c.classList,y=Vt(()=>d&&d.value?typeof d.value=="function"?{to:d.value}:Tl({...d.value}):Tl({decimals:g.value>=0?0:2})),_=Vt(()=>Array.isArray(p.value)?p.value.map(C=>y.value):y.value);return{tooltipFormat:y,tooltipsFormat:_,tooltipsMerge:(C,x,R)=>{var Z=getComputedStyle(C).direction==="rtl",K=C.noUiSlider.options.direction==="rtl",te=C.noUiSlider.options.orientation==="vertical",ne=C.noUiSlider.getTooltips(),be=C.noUiSlider.getOrigins();ne.forEach(function(ue,V){ue&&be[V].appendChild(ue)}),C.noUiSlider.on("update",function(ue,V,q,he,de){var B=[[]],pe=[[]],_e=[[]],oe=0;ne[0]&&(B[0][0]=0,pe[0][0]=de[0],_e[0][0]=y.value.to(parseFloat(ue[0])));for(var fe=1;fe<ue.length;fe++)(!ne[fe]||ue[fe]-ue[fe-1]>x)&&(B[++oe]=[],_e[oe]=[],pe[oe]=[]),ne[fe]&&(B[oe].push(fe),_e[oe].push(y.value.to(parseFloat(ue[fe]))),pe[oe].push(de[fe]));B.forEach(function(xe,ve){for(var $e=xe.length,Ae=0;Ae<$e;Ae++){var ze=xe[Ae];if(Ae===$e-1){var je=0;pe[ve].forEach(function(X){je+=1e3-X});var At=te?"bottom":"right",It=K?0:$e-1,Je=1e3-pe[ve][It];je=(Z&&!te?100:0)+je/$e-Je,ne[ze].innerHTML=_e[ve].join(R),ne[ze].style.display="block",ne[ze].style[At]=je+"%",b.value.tooltipHidden.split(" ").forEach(X=>{ne[ze].classList.contains(X)&&ne[ze].classList.remove(X)})}else ne[ze].style.display="none",b.value.tooltipHidden.split(" ").forEach(X=>{ne[ze].classList.add(X)})}})})}}}(e,0,{value:s.value,classList:i.classList}),o=function(r,l,c){const{orientation:d,direction:g,tooltips:p,step:b,min:y,max:_,merge:C,id:x,disabled:R,options:Z,classes:K,format:te,lazy:ne,ariaLabelledby:be,aria:ue}=Gs(r),V=c.value,q=c.initialValue,he=c.tooltipsFormat,de=c.tooltipsMerge,B=c.tooltipFormat,pe=c.classList,_e=$t(null),oe=$t(null),fe=$t(!1),xe=Vt(()=>{let X={cssPrefix:"",cssClasses:pe.value,orientation:d.value,direction:g.value,tooltips:!!p.value&&he.value,connect:"lower",start:Ei(V.value)?y.value:V.value,range:{min:y.value,max:_.value}};if(b.value>0&&(X.step=b.value),Array.isArray(V.value)&&(X.connect=!0),be&&be.value||ue&&Object.keys(ue.value).length){let Me=Array.isArray(V.value)?V.value:[V.value];X.handleAttributes=Me.map(Vs=>Object.assign({},ue.value,be&&be.value?{"aria-labelledby":be.value}:{}))}return te.value&&(X.ariaFormat=B.value),X}),ve=Vt(()=>{let X={id:x&&x.value?x.value:void 0};return R.value&&(X.disabled=!0),X}),$e=Vt(()=>Array.isArray(V.value)),Ae=()=>{let X=oe.value.get();return Array.isArray(X)?X.map(Me=>parseFloat(Me)):parseFloat(X)},ze=function(X){let Me=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1];oe.value.set(X,Me)},je=X=>{l.emit("input",X),l.emit("update:modelValue",X),l.emit("update",X)},At=()=>{oe.value=i0.create(_e.value,Object.assign({},xe.value,Z.value)),p.value&&$e.value&&C.value>=0&&de(_e.value,C.value," - "),oe.value.on("set",()=>{const X=Ae();l.emit("change",X),l.emit("set",X),ne.value&&je(X)}),oe.value.on("update",()=>{if(!fe.value)return;const X=Ae();$e.value&&Nl(V.value,X)||!$e.value&&V.value==X?l.emit("update",X):ne.value||je(X)}),oe.value.on("start",()=>{l.emit("start",Ae())}),oe.value.on("end",()=>{l.emit("end",Ae())}),oe.value.on("slide",()=>{l.emit("slide",Ae())}),oe.value.on("drag",()=>{l.emit("drag",Ae())}),_e.value.querySelectorAll("[data-handle]").forEach(X=>{X.onblur=()=>{_e.value&&pe.value.focused.split(" ").forEach(Me=>{_e.value.classList.remove(Me)})},X.onfocus=()=>{pe.value.focused.split(" ").forEach(Me=>{_e.value.classList.add(Me)})}}),fe.value=!0},It=()=>{oe.value.off(),oe.value.destroy(),oe.value=null},Je=(X,Me)=>{fe.value=!1,It(),At()};return rn(At),ln(It),Qe($e,Je,{immediate:!1}),Qe(y,Je,{immediate:!1}),Qe(_,Je,{immediate:!1}),Qe(b,Je,{immediate:!1}),Qe(d,Je,{immediate:!1}),Qe(g,Je,{immediate:!1}),Qe(p,Je,{immediate:!1}),Qe(C,Je,{immediate:!1}),Qe(te,Je,{immediate:!1,deep:!0}),Qe(Z,Je,{immediate:!1,deep:!0}),Qe(K,Je,{immediate:!1,deep:!0}),Qe(V,(X,Me)=>{Me&&(typeof Me=="object"&&typeof X=="object"&&X&&Object.keys(Me)>Object.keys(X)||typeof Me=="object"&&typeof X!="object"||Ei(X))&&Je()},{immediate:!1}),Qe(V,X=>{if(Ei(X))return void ze(y.value,!1);let Me=Ae();$e.value&&!Array.isArray(Me)&&(Me=[Me]),($e.value&&!Nl(X,Me)||!$e.value&&X!=Me)&&ze(X,!1)},{deep:!0}),{slider:_e,slider$:oe,isRange:$e,sliderProps:ve,init:At,destroy:It,refresh:Je,update:ze,reset:()=>{je(q.value)}}}(e,t,{value:s.value,initialValue:s.initialValue,tooltipFormat:n.tooltipFormat,tooltipsFormat:n.tooltipsFormat,tooltipsMerge:n.tooltipsMerge,classList:i.classList});return{...i,...n,...o}}};ko.render=function(e,t,s,i,n,o){return N(),j("div",Xa(e.sliderProps,{ref:"slider"}),null,16)},ko.__file="src/Slider.vue";const n0={components:{Slider:ko},methods:{sliderUpdate(){console.log(this.value)}},data(){return{value:4}}};function o0(e,t,s,i,n,o){const r=Ne("Slider");return N(),j("div",null,[z(r,{onClick:o.sliderUpdate,min:0,max:5,modelValue:n.value,"onUpdate:modelValue":t[0]||(t[0]=l=>n.value=l),merge:1,tooltips:!1},null,8,["onClick","modelValue"])])}const r0=Ke(n0,[["render",o0]]);const l0={components:{RangeSlider:r0,TemplateSettings:t0},methods:{closeSidebar(){this.showSidebar=!1,document.getElementById("live-edit-frame-holder").removeAttribute("style")},openSidebar(){this.showSidebar=!0,document.getElementById("live-edit-frame-holder").setAttribute("style","margin-right: 303px;")}},mounted(){const e=this;this.emitter.on("live-edit-ui-show",t=>{t=="template-settings"&&(e.showSidebar==!1?e.openSidebar():e.closeSidebar())}),document.addEventListener("keyup",function(t){t.keyCode===27&&(e.showSidebar=!1)})},data(){return{showSidebar:!0}}},a0={key:0};function c0(e,t,s,i,n,o){const r=Ne("TemplateSettings"),l=Ne("RangeSlider");return N(),j("div",null,[a("div",{id:"general-theme-settings",class:ct([n.showSidebar==!0?"active":""])},[n.showSidebar?(N(),j("div",a0,[a("button",{onClick:t[0]||(t[0]=(...c)=>o.closeSidebar&&o.closeSidebar(...c)),type:"button",class:"btn btn-danger"}," Close Sidebar ")])):Se("",!0),z(r),z(l)],2)])}const u0=Ke(l0,[["render",c0]]),d0={},h0={style:{"fill-rule":"evenodd","clip-rule":"evenodd","stroke-linejoin":"round","stroke-miterlimit":"2"},version:"1.1",viewBox:"0 0 24 24",width:"100%","xml:space":"preserve",xmlns:"http://www.w3.org/2000/svg","xmlns:serif":"http://www.serif.com/","xmlns:xlink":"http://www.w3.org/1999/xlink"},f0=dn('<g id="Icon"><path d="M11.25,15.5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l-0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l-0,-3.5Zm-1.5,0l-0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l-0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path><path d="M11.25,5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l0,-3.5Zm-1.5,0l0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path><path d="M21.75,15.5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l0,-3.5Zm-1.5,0l0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path><path d="M21.75,5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l0,-3.5Zm-1.5,0l0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path></g>',1),m0=[f0];function p0(e,t){return N(),j("svg",h0,m0)}const g0=Ke(d0,[["render",p0]]),v0={},b0={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"},w0=a("g",null,[a("path",{d:"M22 9.999V20a1 1 0 0 1-1 1h-8V9.999h9zm-11 6V21H3a1 1 0 0 1-1-1v-4.001h9zM11 3v10.999H2V4a1 1 0 0 1 1-1h8zm10 0a1 1 0 0 1 1 1v3.999h-9V3h8z"})],-1),y0=[w0];function k0(e,t){return N(),j("svg",b0,y0)}const _0=Ke(v0,[["render",k0]]);const x0=(e,t)=>Array.from({length:Math.ceil(e.length/t)},(s,i)=>e.slice(i*t,i*t+t)),C0={name:"Loading",props:{color:{type:String,default:"#18191A"}}},S0={class:"dots"};function L0(e,t,s,i,n,o){return N(),j("div",S0,[a("div",{style:Lt(`background-color: ${s.color}`)},null,4),a("div",{style:Lt(`background-color: ${s.color}`)},null,4),a("div",{style:Lt(`background-color: ${s.color}`)},null,4)])}const E0=Ke(C0,[["render",L0]]),M0={name:"LazyList",components:{Loading:E0},props:{data:{type:Array,default:()=>[]},itemsPerRender:{type:Number,default:3},containerClasses:{type:String,default:""},defaultLoading:{type:Boolean,default:!0},defaultLoadingColor:{type:String,default:"#18191A"}},created(){this.updateList(),this.$watch("data",function(){this.updateList()},{deep:!0})},mounted(){this.$refs.container.addEventListener("scroll",this.loadItems),this.loadItems()},beforeUnmount(){this.$refs.container.removeEventListener("scroll",this.loadItems)},data(){return{items:[],page:0,loading:!1,itemsToDisplay:[]}},methods:{updateList(){const e=x0(this.data,this.itemsPerRender);this.items=e,this.itemsToDisplay=e[0]},loadItems(){if(this.page===this.items.length-1)return;const e=this.$refs["end-of-list"];if(!e)return;const t=e.getBoundingClientRect();t.top>=0&&t.bottom<=window.innerHeight&&!this.loading&&(this.loading=!0,this.page++,setTimeout(()=>{this.items[this.page]===void 0&&(this.page=0),this.itemsToDisplay=[...this.itemsToDisplay,...this.items[this.page]],this.loading=!1,this.loadItems()},500))}}},A0={key:0,id:"loading-wrapper"},T0={key:1,id:"loading-wrapper"},N0={id:"end-of-list",ref:"end-of-list"};function P0(e,t,s,i,n,o){const r=Ne("Loading");return N(),j("div",{id:"container",ref:"container",class:ct(`${s.containerClasses}`)},[(N(!0),j(Pe,null,Ct(n.itemsToDisplay,l=>ji(e.$slots,"default",{item:l})),256)),n.loading?(N(),j(Pe,{key:0},[s.defaultLoading?(N(),j("div",A0,[z(r,{color:s.defaultLoadingColor},null,8,["color"])])):(N(),j("div",T0,[ji(e.$slots,"loading")]))],64)):Se("",!0),an(a("div",N0,null,512),[[am,n.page!==n.items.length-1||!n.loading]])],2)}const $0=Ke(M0,[["render",P0]]),O0=["data-index"],H0=Wt({__name:"masonry-wall",props:{columnWidth:{default:400},items:null,gap:{default:0},rtl:{type:Boolean,default:!1},ssrColumns:{default:0},scrollContainer:{default:null}},emits:["redraw","redrawSkip"],setup(e,{emit:t}){const s=e,{columnWidth:i,items:n,gap:o,rtl:r,ssrColumns:l,scrollContainer:c}=Gs(s),d=$t([]),g=$t();function p(){const x=Math.floor((g.value.getBoundingClientRect().width+o.value)/(i.value+o.value));return x>0?x:1}function b(x){return[...new Array(x)].map(()=>[])}if(l.value>0){const x=b(l.value);n.value.forEach((R,Z)=>x[Z%l.value].push(Z)),d.value=x}async function y(x){if(x>=n.value.length)return;await Ca();const R=[...g.value.children];r.value&&R.reverse();const Z=R.reduce((K,te)=>te.getBoundingClientRect().height<K.getBoundingClientRect().height?te:K);d.value[+Z.dataset.index].push(x),await y(x+1)}async function _(x=!1){if(d.value.length===p()&&!x){t("redrawSkip");return}d.value=b(p());const R=c==null?void 0:c.value,Z=R?R.scrollTop:window.scrollY;await y(0),R?R.scrollBy({top:Z-R.scrollTop}):window.scrollTo({top:Z}),t("redraw")}const C=typeof ResizeObserver>"u"?void 0:new ResizeObserver(()=>_());return rn(()=>{_(),C==null||C.observe(g.value)}),jo(()=>C==null?void 0:C.unobserve(g.value)),Qe([n,r],()=>_(!0)),Qe([i,o],()=>_()),(x,R)=>(N(),j("div",{ref_key:"wall",ref:g,class:"masonry-wall",style:Lt({display:"flex",gap:`${Zs(o)}px`})},[(N(!0),j(Pe,null,Ct(d.value,(Z,K)=>(N(),j("div",{key:K,class:"masonry-column","data-index":K,style:Lt({display:"flex","flex-basis":"0px","flex-direction":"column","flex-grow":1,gap:`${Zs(o)}px`,height:["-webkit-max-content","-moz-max-content","max-content"],"min-width":0})},[(N(!0),j(Pe,null,Ct(Z,te=>(N(),j("div",{key:te,class:"masonry-item"},[ji(x.$slots,"default",{item:Zs(n)[te],index:te},()=>[qo(et(Zs(n)[te]),1)])]))),128))],12,O0))),128))],4))}}),R0=(()=>{const e=H0;return e.install=t=>{t.component("MasonryWall",e)},e})();const I0={components:{GridIcon:g0,MasonryIcon:_0,MasonryWall:R0,LazyList:$0,ListIcon:Ap},methods:{insertLayout(e){mw.app.editor.insertLayout({template:e}),this.showModal=!1},getLayoutsListFromService(){return mw.app.layouts.list()},filterCategorySubmit(e){this.filterCategory=e,this.filterLayouts()},filterLayouts(){this.layoutsListLoaded=!1;let e=this.layoutsList.layouts;this.filterKeyword!=""&&this.filterKeyword&&(e=e.filter(t=>t.title.toUpperCase().includes(this.filterKeyword.toUpperCase()))),this.filterCategory!=""&&this.filterCategory&&(e=e.filter(t=>{if(t.categories)return t.categories.toUpperCase().includes(this.filterCategory.toUpperCase())})),this.layoutsListLoaded=!0,this.layoutsListFiltered=e}},mounted(){const e=this;mw.app.on("ready",()=>{this.getLayoutsListFromService().then(function(t){e.layoutsList=t,e.layoutsListFiltered=t.layouts,e.layoutsListLoaded=!0}),mw.app.editor.on("insertLayoutRequest",function(t){e.showModal=!0})}),this.emitter.on("live-edit-ui-show",t=>{t=="show-layouts"&&(e.showModal==!1?e.showModal=!0:e.showModal=!1)}),document.addEventListener("keyup",function(t){t.keyCode===27&&(e.showModal=!1)})},data(){return{items:[{title:"First",description:"The first item."},{title:"Second",description:"The second item."}],filterKeyword:"",filterCategory:"",layoutsListTypePreview:"masonry",layoutsList:[],layoutsListFiltered:[],layoutsListLoaded:!1,showModal:!1}}},D0={key:0,style:{visibility:"hidden",position:"absolute",width:"1px",height:"1px"}},F0={key:0,class:"mw-le-dialog-block mw-le-layouts-dialog active",style:{inset:"20px",transform:"none"}},B0={class:"modules-list modules-list-defaultModules"},z0={class:"mw-le-layouts-dialog-row"},j0={class:"mw-le-layouts-dialog-col"},V0={class:"modules-list-search-block"},U0=a("div",{class:"mw-le-layouts-dialog-categories-title"},"Categories",-1),q0={class:"modules-list-categories pb-5"},W0=a("li",null,null,-1),K0=["onClick"],Y0={class:"mw-le-layouts-dialog-col"},X0={key:0,class:"pl-4 mb-3 mt-3"},J0={key:0},Z0={class:"pr-4 mt-3"},G0={class:"d-flex justify-content-end pr-4 layout-list-buttons"},Q0={key:1,class:"modules-list-block"},eg=["onClick"],tg=["src","alt"],sg={class:"modules-list-block-item-title"},ig=["onClick"],ng={class:"modules-list-block-item-title"},og={class:"modules-list-block-item-description"},rg={key:3,class:"modules-list-block"},lg=a("div",{class:"modules-list-block-no-results"}," Nothing found... ",-1),ag=[lg];function cg(e,t,s,i,n,o){const r=Ne("MasonryIcon"),l=Ne("GridIcon"),c=Ne("ListIcon"),d=Ne("MasonryWall"),g=Ne("LazyList");return N(),j(Pe,null,[n.showModal?(N(),j("div",D0)):Se("",!0),n.showModal?(N(),j("div",{key:1,onClick:t[0]||(t[0]=p=>n.showModal=!1),class:"mw-le-overlay active"})):Se("",!0),z(fn,{"enter-active-class":"animate__animated animate__backInLeft","leave-active-class":"animate__animated animate__backOutLeft"},{default:Qs(()=>[n.showModal?(N(),j("div",F0,[a("div",B0,[a("div",z0,[a("div",j0,[a("div",V0,[an(a("input",{"onUpdate:modelValue":t[1]||(t[1]=p=>n.filterKeyword=p),onKeydown:t[2]||(t[2]=p=>o.filterLayouts()),type:"text",placeholder:"Type to Search...",class:"modules-list-search-field"},null,544),[[Qa,n.filterKeyword]])]),U0,a("ul",q0,[a("li",{onClick:t[3]||(t[3]=p=>o.filterCategorySubmit("")),class:ct([n.filterCategory==""?"active animate__animated animate__pulse":""])}," All categories ",2),W0,n.layoutsList.categories?(N(!0),j(Pe,{key:0},Ct(n.layoutsList.categories,p=>(N(),j("li",{class:ct([p==n.filterCategory?"active animate__animated animate__pulse":""]),onClick:b=>o.filterCategorySubmit(p)},et(p),11,K0))),256)):Se("",!0)])]),a("div",Y0,[n.filterKeyword?(N(),j("div",X0,[qo(" Looking for "+et(n.filterKeyword)+" ",1),n.filterCategory?(N(),j("span",J0," in "+et(n.filterCategory),1)):Se("",!0)])):Se("",!0),a("div",Z0,[a("div",G0,[a("button",{type:"button",onClick:t[4]||(t[4]=p=>n.layoutsListTypePreview="masonry"),class:ct(["btn btn-sm btn-rounded mr-1",n.layoutsListTypePreview=="masonry"?"btn-primary":"btn-dark"])},[z(r,{style:{"max-width":"23px","max-height":"23px"}})],2),a("button",{type:"button",onClick:t[5]||(t[5]=p=>n.layoutsListTypePreview="list"),class:ct(["btn btn-sm btn-rounded mr-1",n.layoutsListTypePreview=="list"?"btn-primary":"btn-dark"])},[z(l,{style:{"max-width":"23px","max-height":"23px"}})],2),a("button",{type:"button",onClick:t[6]||(t[6]=p=>n.layoutsListTypePreview="full"),class:ct(["btn btn-sm btn-rounded",n.layoutsListTypePreview=="full"?"btn-primary":"btn-dark"])},[z(c,{style:{"max-width":"23px","max-height":"23px"}})],2)])]),n.layoutsListLoaded&&n.layoutsListTypePreview=="masonry"?(N(),j("div",Q0,[z(d,{items:n.layoutsListFiltered,"ssr-columns":1,"column-width":200,padding:22,gap:22},{default:Qs(({item:p,index:b})=>[a("div",{onClick:y=>o.insertLayout(p.template),class:ct(["modules-list-block-item",p.locked?"modules-list-block-item-is-locked-true":"modules-list-block-item-is-locked-false"])},[a("img",{src:p.screenshot,alt:p.title},null,8,tg),a("div",sg,et(p.title),1)],10,eg)]),_:1},8,["items"])])):Se("",!0),n.layoutsListLoaded&&(n.layoutsListTypePreview=="list"||n.layoutsListTypePreview=="full")&&n.layoutsListFiltered.length>0?(N(),De(g,{key:2,data:n.layoutsListFiltered,itemsPerRender:18,containerClasses:"modules-list-block",defaultLoadingColor:"#222"},{default:Qs(({item:p})=>[a("div",{onClick:b=>o.insertLayout(p.template),style:Lt([n.layoutsListTypePreview=="full"?"width:100%;height:300px":"width:300px;height:160px"]),class:ct(["modules-list-block-item",p.locked?"modules-list-block-item-is-locked-true":"modules-list-block-item-is-locked-false"])},[a("div",{class:"modules-list-block-item-picture",style:Lt("background-image: url("+p.screenshot+")")},null,4),a("div",ng,et(p.title),1),a("div",og,et(p.description),1)],14,ig)]),_:1},8,["data"])):Se("",!0),n.layoutsListFiltered.length==0?(N(),j("div",rg,ag)):Se("",!0)])])])])):Se("",!0)]),_:1}),n.showModal?(N(),j("div",{key:2,onClick:t[7]||(t[7]=p=>n.showModal=!1),class:"mw-le-dialog-close active"})):Se("",!0)],64)}const ug=Ke(I0,[["render",cg]]);const dg={methods:{getLayoutsList(){return mw.app.modules.list()}},components:{},mounted(){const e=this;mw.app.on("ready",()=>{this.getLayoutsList().then(function(t){e.layoutsList=t})}),this.emitter.on("live-edit-ui-show",t=>{t=="show-modules"&&(e.showModal==!1?e.showModal=!0:e.showModal=!1)}),document.addEventListener("keyup",function(t){t.keyCode===27&&(e.showModal=!1)})},data(){return{keyword:"",category:"",layoutsList:null,showModal:!1}}},hg={key:0,style:{visibility:"hidden",position:"absolute",width:"1px",height:"1px"}},fg={key:0,class:"mw-le-dialog-block mw-le-modules-dialog active",style:{inset:"20px",transform:"none"}},mg={class:"modules-list modules-list-defaultModules"},pg={class:"modules-list-search-block"},gg=a("input",{type:"text",placeholder:"Type to Search...",class:"modules-list-search-field"},null,-1),vg={key:0},bg=a("div",{class:"modules-list-block"},[a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"miscellaneous")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/inline_table/inline_table.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Inline Table"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/search/search.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Search"),a("div",{class:"modules-list-block-item-description"},"Module to search for content"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/popup/popup.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Pop-Up"),a("div",{class:"modules-list-block-item-description"},"Pop-Up")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/embed/embed.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Embed Code"),a("div",{class:"modules-list-block-item-description"},"Embed Code")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/logo/logo.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Logo"),a("div",{class:"modules-list-block-item-description"},"Logo")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/pdf/pdf.svg)"}}),a("div",{class:"modules-list-block-item-title"},"PDF"),a("div",{class:"modules-list-block-item-description"},"PDF")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/categories/category_images/category_images.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Categories Images"),a("div",{class:"modules-list-block-item-description"},"Categories Images"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/accordion/accordion.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Accordion"),a("div",{class:"modules-list-block-item-description"},"Accordion")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/tabs/tabs.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Tabs"),a("div",{class:"modules-list-block-item-description"},"Tabs"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/breadcrumb/breadcrumb.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Breadcrumb"),a("div",{class:"modules-list-block-item-description"},"Breadcrumb navigation"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/faq/faq.svg)"}}),a("div",{class:"modules-list-block-item-title"},"FAQ"),a("div",{class:"modules-list-block-item-description"},"FAQ")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/teamcard/teamcard.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Team Card"),a("div",{class:"modules-list-block-item-description"},"Team Card"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/multilanguage/multilanguage.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Multilanguage"),a("div",{class:"modules-list-block-item-description"},"Multilanguage"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/testimonials/testimonials.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Testimonials"),a("div",{class:"modules-list-block-item-description"},"Testimonials"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/tags/tags.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Tags"),a("div",{class:"modules-list-block-item-description"},"Tags module for your posts!"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"essentials")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/title/title.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Title"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/text/text.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Text"),a("div",{class:"modules-list-block-item-description"},"Simple text")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/spacer/spacer.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Spacer"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/text/empty_element.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Empty Element"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/text/multiple_columns.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Multiple Columns"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/btn/btn.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Button"),a("div",{class:"modules-list-block-item-description"},"Button")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/contact_form/contact_form.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Contact form"),a("div",{class:"modules-list-block-item-description"},"Contact form"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/google_maps/google_maps.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Google Maps"),a("div",{class:"modules-list-block-item-description"},"Google Maps"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/posts/posts.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Posts List"),a("div",{class:"modules-list-block-item-description"},"Posts List")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/content/content.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Content"),a("div",{class:"modules-list-block-item-description"},"Shows dynamic content"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/menu/menu.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Menu"),a("div",{class:"modules-list-block-item-description"},"Navigation menu for pages and links."),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"media")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/picture/picture.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Picture"),a("div",{class:"modules-list-block-item-description"},"Picture")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/pictures/pictures.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Picture Gallery"),a("div",{class:"modules-list-block-item-description"},"Picture Gallery"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/video/video.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Video"),a("div",{class:"modules-list-block-item-description"},"Video")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/image_rollover/image_rollover.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Image Rollover"),a("div",{class:"modules-list-block-item-description"},"Image Rollover"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/slider/slider.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Slider"),a("div",{class:"modules-list-block-item-description"},"Slider")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/audio/audio.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Audio"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/beforeafter/beforeafter.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Before/After"),a("div",{class:"modules-list-block-item-description"},"Before/After")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/carousel_grid/carousel_grid.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Carousel Grid"),a("div",{class:"modules-list-block-item-description"},"Microweber Carousel Grid"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"social")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/social_links/social_links.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Social Links"),a("div",{class:"modules-list-block-item-description"},"Social Links"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/facebook_like/facebook_like.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Facebook Like"),a("div",{class:"modules-list-block-item-description"},"Facebook Like"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/facebook_page/facebook_page.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Facebook page"),a("div",{class:"modules-list-block-item-description"},"Facebook page integration for your website! "),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/tweet_embed/tweet_embed.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Tweet Embed"),a("div",{class:"modules-list-block-item-description"},"Tweet Embed")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/twitter_feed/twitter_feed.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Twitter feed"),a("div",{class:"modules-list-block-item-description"},"Feed of tweets")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/sharer/sharer.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Sharer"),a("div",{class:"modules-list-block-item-description"},"Sharer"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"store")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/shop/products/products.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Products"),a("div",{class:"modules-list-block-item-description"},"Products")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/shop/cart_add/cart_add.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Add to cart"),a("div",{class:"modules-list-block-item-description"},"Add to cart"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/shop/shop.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Online shop"),a("div",{class:"modules-list-block-item-description"},"Online shop")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"navigation")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/pages/pages.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Pages Menu"),a("div",{class:"modules-list-block-item-description"},"Pages Menu"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/categories/categories.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Categories"),a("div",{class:"modules-list-block-item-description"},"Categories"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"users")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/users/forgot_password/forgot_password.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Forgot password"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/users/login/login.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Login"),a("div",{class:"modules-list-block-item-description"},"Login")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/users/register/register.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Registration"),a("div",{class:"modules-list-block-item-description"},"Microweber")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"marketing")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/newsletter/newsletter.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Newsletter"),a("div",{class:"modules-list-block-item-description"},"Newsletter")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"content")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/blog/blog.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Blog"),a("div",{class:"modules-list-block-item-description"},"Blog")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/comments/comments.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Comments"),a("div",{class:"modules-list-block-item-description"},"Comments")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/layouts/layouts.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Layouts"),a("div",{class:"modules-list-block-item-description"},"Layouts"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"other")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/highlight_code/highlight_code.svg)"}}),a("div",{class:"modules-list-block-item-title"},"highlight_code"),a("div",{class:"modules-list-block-item-description"},"highlight_code")])]),a("div",{class:"modules-list-block-no-results",style:{display:"none"}},"Nothing found...")],-1);function wg(e,t,s,i,n,o){return N(),j(Pe,null,[n.showModal?(N(),j("div",hg)):Se("",!0),n.showModal?(N(),j("div",{key:1,onClick:t[0]||(t[0]=r=>n.showModal=!1),class:"mw-le-overlay active"})):Se("",!0),z(fn,{"enter-active-class":"animate__animated animate__backInLeft","leave-active-class":"animate__animated animate__backOutLeft"},{default:Qs(()=>[n.showModal?(N(),j("div",fg,[a("div",mg,[a("div",pg,[gg,n.showModal?(N(),j("div",vg,[a("button",{onClick:t[1]||(t[1]=r=>n.showModal=!1),type:"button",class:"btn btn-danger"}," Close Modal ")])):Se("",!0)]),bg])])):Se("",!0)]),_:1})],64)}const yg=Ke(dg,[["render",wg]]);const kg={__name:"App",setup(e){return(t,s)=>(N(),j("div",null,[z(Qm),z(Yp),z(u0),z(ug),z(yg)]))}},tc=function(){return document.ontouchstart!==null?"click":"touchstart"},qi="__vue_click_away__",sc=function(e,t,s){ic(e);let i=s.context,n=t.value,o=!1;setTimeout(function(){o=!0},0),e[qi]=function(r){if((!e||!e.contains(r.target))&&n&&o&&typeof n=="function")return n.call(i,r)},document.addEventListener(tc(),e[qi],!1)},ic=function(e){document.removeEventListener(tc(),e[qi],!1),delete e[qi]},_g=function(e,t,s){t.value!==t.oldValue&&sc(e,t,s)},xg={install:function(e){e.directive("click-away",Cg)}},Cg={mounted:sc,updated:_g,unmounted:ic};function Sg(e){return{all:e=e||new Map,on:function(t,s){var i=e.get(t);i?i.push(s):e.set(t,[s])},off:function(t,s){var i=e.get(t);i&&(s?i.splice(i.indexOf(s)>>>0,1):e.set(t,[]))},emit:function(t,s){var i=e.get(t);i&&i.slice().map(function(n){n(s)}),(i=e.get("*"))&&i.slice().map(function(n){n(t,s)})}}}const Lg=Sg(),sr=dm(kg);sr.config.globalProperties.emitter=Lg;sr.use(xg);sr.mount("#live-edit-app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
