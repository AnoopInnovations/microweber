var Ta=Object.defineProperty;var Da=(e,t,n)=>t in e?Ta(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var mr=(e,t,n)=>(Da(e,typeof t!="symbol"?t+"":t,n),n),gr=(e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)};var k=(e,t,n)=>(gr(e,t,"read from private field"),n?n.call(e):t.get(e)),pe=(e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)},vr=(e,t,n,r)=>(gr(e,t,"write to private field"),r?r.call(e,n):t.set(e,n),n);var be=(e,t,n)=>(gr(e,t,"access private method"),n);var _e;class Je{constructor(){pe(this,_e,{})}on(t,n){k(this,_e)[t]?k(this,_e)[t].push(n):k(this,_e)[t]=[n]}off(t,n){if(k(this,_e)[t])if(typeof n=="function"){const r=k(this,_e)[t].indexOf(n);if(r===-1)return;k(this,_e)[t].splice(r,1)}else k(this,_e)[t]=[]}dispatch(t,n,r){k(this,_e)[t]&&k(this,_e)[t].forEach(function(i){i.call(this,n)})}emit(t,n){return this.dispatch(t,n)}}_e=new WeakMap;var Ee,vt,yn;class Na extends Je{constructor(){super(...arguments);pe(this,vt);pe(this,Ee,{})}call(n,r){for(let i in k(this,Ee))k(this,Ee)[i][n]&&be(this,vt,yn).call(this,n,k(this,Ee)[i],r)}get(n){return k(this,Ee)[n]}getModules(){return k(this,Ee)}register(n,r){let i;typeof r=="function"?i=new r:i=r,k(this,Ee)[n]=i,this[n]=i,be(this,vt,yn).call(this,"onRegister",i),this.dispatch("register")}remove(n){let r;if(typeof n=="string"&&(r=n,n=this.get(n)),!r){for(let i in k(this,Ee))if(k(this,Ee)[i]===n){r=i;break}}delete k(this,Ee)[r],delete this[r],be(this,vt,yn).call(this,"onDestroy",n),this.dispatch("remove")}}Ee=new WeakMap,vt=new WeakSet,yn=function(n,r,i){!n||!r||!r[n]||(n=r[n],n.call(r,i))};var Ne,qe,st,Xt,Or,Yt,Tr,kn,po;class fo{constructor(t={}){pe(this,Xt);pe(this,Yt);pe(this,kn);pe(this,Ne,null);pe(this,qe,{});mr(this,"selectedCategory","");pe(this,st,[]);mr(this,"root",null);const n={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},n,t),this.document=this.settings.document}on(t,n){k(this,qe)[t]?k(this,qe)[t].push(n):k(this,qe)[t]=[n]}dispatch(t,n){k(this,qe)[t]&&k(this,qe)[t].forEach(r=>{r.call(this,n)})}getData(){return k(this,Ne)}setData(t,n=!0){vr(this,Ne,t);let r=0,i=k(this,Ne).length;for(;r<i;r++)typeof k(this,Ne)[r].categories=="string"&&(k(this,Ne)[r].categories=k(this,Ne)[r].categories.split(",").map(o=>o.trim()));n&&this.dispatch("dataChanged",k(this,Ne))}prepareCategories(){const t=[],n=this.getData();let r=0,i=n.length;for(;r<i;r++){let a=n[r].categories||"",c=0,f=a.length;for(;c<f;c++){const p=a[c].trim();t.indexOf(p)===-1&&t.push(p)}}t.sort(),this.categories=t}createCategoriesMenu(){const t=this.document.createElement("ul");this.prepareCategories(),t.className="modules-list-categories",t.innerHTML=this.categories.map(n=>`<li data-category="${n}">${n}</li>`).join(""),t.innerHTML=`<li data-category="">All categories</li> ${t.innerHTML}`,t.addEventListener("click",n=>{n.target.nodeName==="LI"&&this.selectCategory(n.target.dataset.category)}),this.categoriesNavigation=t,this.rootShadow.appendChild(t),this.on("categorySelect",n=>{const r=t.querySelectorAll("[data-category]");for(const i of r)i.classList[i.dataset.category===n?"add":"remove"]("active")})}selectCategory(t=""){this.selectedCategory=t,this.search(t),this.dispatch("categorySelect",t)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let t=document.createElement("style");t.textContent=this.settings.css,this.rootShadow.appendChild(t)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let n=0,r=t.length;const i={miscellaneous:be(this,Yt,Tr).call(this,"miscellaneous")};for(;n<r;n++)(t[n].categories||["miscellaneous"]).forEach(a=>{i[a]||(i[a]=be(this,Yt,Tr).call(this,a));const c=be(this,Xt,Or).call(this,t[n]);k(this,st).push(c),i[a].appendChild(c),i[a].__$hasNodes=!0});for(const o in i)i[o].__$hasNodes&&this.modulesList.appendChild(i[o]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let n=0,r=t.length;for(;n<r;n++){const i=be(this,Xt,Or).call(this,t[n]);k(this,st).push(i),this.modulesList.appendChild(i)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(t){t.nodeName&&(t.style.display="none")}showItem(t){t.nodeName&&(t.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",t=>this.search(void 0,this.searchField.value)),this.on("categorySelect",t=>{this.searchField.value=""})}async search(t="",n=""){if(this.settings.searchMode==="local")return be(this,kn,po).call(this,t,n)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(t=>{t(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(t=>{t(this)})}}Ne=new WeakMap,qe=new WeakMap,st=new WeakMap,Xt=new WeakSet,Or=function(t){t.locked=t.description.includes("a");const n=this.document.createElement("div");return n.className="modules-list-block-item modules-list-block-item-is-locked-"+t.locked,n.__$data=t,n.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${t.icon||t.screenshot||t.image})"></div>
            <div class="modules-list-block-item-title">${t.name||t.title}</div>
            <div class="modules-list-block-item-description">${t.description}</div>
            ${t.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,n.addEventListener("click",r=>{r.stopPropagation(),n.__$data.locked?this.dispatch("lockedModuleSelected",{data:t,element:n}):this.dispatch("moduleSelected",{data:t,element:n})}),n.$data=t,n},Yt=new WeakSet,Tr=function(t){const n=this.document.createElement("div");return n.className="modules-list-block-category-section",n.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+t+"</h5></div>",n.__$hasNodes=!1,n},kn=new WeakSet,po=async function(t,n){return t&&(t=t.trim().toLowerCase()),n&&(n=n.trim().toLowerCase()),new Promise(r=>{let i=0,o=k(this,st).length,a=0;for(;i<o;i++){const c=k(this,st)[i],f=c.$data;if(t&&f.categories.indexOf(t)===-1){this.hideItem(c);continue}if(n&&(f.name||f.title).toLowerCase().indexOf(n)===-1){this.hideItem(c);continue}this.showItem(c),a++}console.log(n,t),this.modulesListNoResultsNode.style.display=a===0?"":"none",r()})};const _n=[],ho=function(e){_n.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+e}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",t=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(e){(e.key==="Escape"||e.keyCode===27)&&_n.length>0&&(_n[0].remove(),_n.splice(0,1))});var Dr,ji=function(e){var t=new fo({data:Dr});t.create().then(function(){var n=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),r=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),i=mw.element({props:{className:"mw-le-layouts-dialog-col"}});n.append(r),n.append(i),mw.element(t.root).append(n),r.append(t.searchBlock);var o=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});r.append(o),r.append(t.categoriesNavigation),i.append(t.modulesList),e.append(t.root)})};const Ra=()=>{var e=new ho("mw-le-layouts-dialog"),t=e.dialog;if(Dr){ji(t);return}mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(n){return n.json()}).then(function(n){Dr=n,ji(t),mw.spinner({element:t.get(0),decorate:!0}).remove()})};var Nr,Hi=function(e){var t=new fo({data:Nr});t.createCategorized().then(function(){e.append(t.root)})};const Pa=()=>{var e=new ho("mw-le-modules-dialog"),t=e.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var n=mw.$(this).attr("data-module-name"),r={class:this.className};n==="layout"&&(r.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,n,r,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),Nr?Hi(t):(mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(n){return n.json()}).then(function(n){Nr=n,Hi(t),mw.spinner({element:t.get(0),decorate:!0}).remove()}))},ka={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return Pa()},insertLayout:function(){return Ra()}};function mo(e,t){return function(){return e.apply(t,arguments)}}const{toString:La}=Object.prototype,{getPrototypeOf:Zr}=Object,Fn=(e=>t=>{const n=La.call(t);return e[n]||(e[n]=n.slice(8,-1).toLowerCase())})(Object.create(null)),Pe=e=>(e=e.toLowerCase(),t=>Fn(t)===e),Mn=e=>t=>typeof t===e,{isArray:_t}=Array,Wt=Mn("undefined");function Ia(e){return e!==null&&!Wt(e)&&e.constructor!==null&&!Wt(e.constructor)&&Se(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const go=Pe("ArrayBuffer");function Fa(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&go(e.buffer),t}const Ma=Mn("string"),Se=Mn("function"),vo=Mn("number"),Bn=e=>e!==null&&typeof e=="object",Ba=e=>e===!0||e===!1,En=e=>{if(Fn(e)!=="object")return!1;const t=Zr(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},$a=Pe("Date"),ja=Pe("File"),Ha=Pe("Blob"),Ua=Pe("FileList"),Wa=e=>Bn(e)&&Se(e.pipe),qa=e=>{let t;return e&&(typeof FormData=="function"&&e instanceof FormData||Se(e.append)&&((t=Fn(e))==="formdata"||t==="object"&&Se(e.toString)&&e.toString()==="[object FormData]"))},za=Pe("URLSearchParams"),Ka=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function Gt(e,t,{allOwnKeys:n=!1}={}){if(e===null||typeof e>"u")return;let r,i;if(typeof e!="object"&&(e=[e]),_t(e))for(r=0,i=e.length;r<i;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),a=o.length;let c;for(r=0;r<a;r++)c=o[r],t.call(null,e[c],c,e)}}function wo(e,t){t=t.toLowerCase();const n=Object.keys(e);let r=n.length,i;for(;r-- >0;)if(i=n[r],t===i.toLowerCase())return i;return null}const bo=(()=>typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global)(),yo=e=>!Wt(e)&&e!==bo;function Rr(){const{caseless:e}=yo(this)&&this||{},t={},n=(r,i)=>{const o=e&&wo(t,i)||i;En(t[o])&&En(r)?t[o]=Rr(t[o],r):En(r)?t[o]=Rr({},r):_t(r)?t[o]=r.slice():t[o]=r};for(let r=0,i=arguments.length;r<i;r++)arguments[r]&&Gt(arguments[r],n);return t}const Xa=(e,t,n,{allOwnKeys:r}={})=>(Gt(t,(i,o)=>{n&&Se(i)?e[o]=mo(i,n):e[o]=i},{allOwnKeys:r}),e),Ya=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),Va=(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},Ja=(e,t,n,r)=>{let i,o,a;const c={};if(t=t||{},e==null)return t;do{for(i=Object.getOwnPropertyNames(e),o=i.length;o-- >0;)a=i[o],(!r||r(a,e,t))&&!c[a]&&(t[a]=e[a],c[a]=!0);e=n!==!1&&Zr(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},Ga=(e,t,n)=>{e=String(e),(n===void 0||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return r!==-1&&r===n},Qa=e=>{if(!e)return null;if(_t(e))return e;let t=e.length;if(!vo(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},Za=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&Zr(Uint8Array)),el=(e,t)=>{const r=(e&&e[Symbol.iterator]).call(e);let i;for(;(i=r.next())&&!i.done;){const o=i.value;t.call(e,o[0],o[1])}},tl=(e,t)=>{let n;const r=[];for(;(n=e.exec(t))!==null;)r.push(n);return r},nl=Pe("HTMLFormElement"),rl=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(n,r,i){return r.toUpperCase()+i}),Ui=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),il=Pe("RegExp"),_o=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};Gt(n,(i,o)=>{t(i,o,e)!==!1&&(r[o]=i)}),Object.defineProperties(e,r)},ol=e=>{_o(e,(t,n)=>{if(Se(e)&&["arguments","caller","callee"].indexOf(n)!==-1)return!1;const r=e[n];if(Se(r)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")})}})},sl=(e,t)=>{const n={},r=i=>{i.forEach(o=>{n[o]=!0})};return _t(e)?r(e):r(String(e).split(t)),n},al=()=>{},ll=(e,t)=>(e=+e,Number.isFinite(e)?e:t),wr="abcdefghijklmnopqrstuvwxyz",Wi="0123456789",Eo={DIGIT:Wi,ALPHA:wr,ALPHA_DIGIT:wr+wr.toUpperCase()+Wi},cl=(e=16,t=Eo.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n};function ul(e){return!!(e&&Se(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const dl=e=>{const t=new Array(10),n=(r,i)=>{if(Bn(r)){if(t.indexOf(r)>=0)return;if(!("toJSON"in r)){t[i]=r;const o=_t(r)?[]:{};return Gt(r,(a,c)=>{const f=n(a,i+1);!Wt(f)&&(o[c]=f)}),t[i]=void 0,o}}return r};return n(e,0)},fl=Pe("AsyncFunction"),pl=e=>e&&(Bn(e)||Se(e))&&Se(e.then)&&Se(e.catch),w={isArray:_t,isArrayBuffer:go,isBuffer:Ia,isFormData:qa,isArrayBufferView:Fa,isString:Ma,isNumber:vo,isBoolean:Ba,isObject:Bn,isPlainObject:En,isUndefined:Wt,isDate:$a,isFile:ja,isBlob:Ha,isRegExp:il,isFunction:Se,isStream:Wa,isURLSearchParams:za,isTypedArray:Za,isFileList:Ua,forEach:Gt,merge:Rr,extend:Xa,trim:Ka,stripBOM:Ya,inherits:Va,toFlatObject:Ja,kindOf:Fn,kindOfTest:Pe,endsWith:Ga,toArray:Qa,forEachEntry:el,matchAll:tl,isHTMLForm:nl,hasOwnProperty:Ui,hasOwnProp:Ui,reduceDescriptors:_o,freezeMethods:ol,toObjectSet:sl,toCamelCase:rl,noop:al,toFiniteNumber:ll,findKey:wo,global:bo,isContextDefined:yo,ALPHABET:Eo,generateString:cl,isSpecCompliantForm:ul,toJSONObject:dl,isAsyncFn:fl,isThenable:pl};function U(e,t,n,r,i){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),i&&(this.response=i)}w.inherits(U,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:w.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const So=U.prototype,xo={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{xo[e]={value:e}});Object.defineProperties(U,xo);Object.defineProperty(So,"isAxiosError",{value:!0});U.from=(e,t,n,r,i,o)=>{const a=Object.create(So);return w.toFlatObject(e,a,function(f){return f!==Error.prototype},c=>c!=="isAxiosError"),U.call(a,e.message,t,n,r,i),a.cause=e,a.name=e.name,o&&Object.assign(a,o),a};const hl=null;function Pr(e){return w.isPlainObject(e)||w.isArray(e)}function Ao(e){return w.endsWith(e,"[]")?e.slice(0,-2):e}function qi(e,t,n){return e?e.concat(t).map(function(i,o){return i=Ao(i),!n&&o?"["+i+"]":i}).join(n?".":""):t}function ml(e){return w.isArray(e)&&!e.some(Pr)}const gl=w.toFlatObject(w,{},null,function(t){return/^is[A-Z]/.test(t)});function $n(e,t,n){if(!w.isObject(e))throw new TypeError("target must be an object");t=t||new FormData,n=w.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,function(R,E){return!w.isUndefined(E[R])});const r=n.metaTokens,i=n.visitor||m,o=n.dots,a=n.indexes,f=(n.Blob||typeof Blob<"u"&&Blob)&&w.isSpecCompliantForm(t);if(!w.isFunction(i))throw new TypeError("visitor must be a function");function p(C){if(C===null)return"";if(w.isDate(C))return C.toISOString();if(!f&&w.isBlob(C))throw new U("Blob is not supported. Use a Buffer instead.");return w.isArrayBuffer(C)||w.isTypedArray(C)?f&&typeof Blob=="function"?new Blob([C]):Buffer.from(C):C}function m(C,R,E){let x=C;if(C&&!E&&typeof C=="object"){if(w.endsWith(R,"{}"))R=r?R:R.slice(0,-2),C=JSON.stringify(C);else if(w.isArray(C)&&ml(C)||(w.isFileList(C)||w.endsWith(R,"[]"))&&(x=w.toArray(C)))return R=Ao(R),x.forEach(function(q,M){!(w.isUndefined(q)||q===null)&&t.append(a===!0?qi([R],M,o):a===null?R:R+"[]",p(q))}),!1}return Pr(C)?!0:(t.append(qi(E,R,o),p(C)),!1)}const S=[],T=Object.assign(gl,{defaultVisitor:m,convertValue:p,isVisitable:Pr});function D(C,R){if(!w.isUndefined(C)){if(S.indexOf(C)!==-1)throw Error("Circular reference detected in "+R.join("."));S.push(C),w.forEach(C,function(x,H){(!(w.isUndefined(x)||x===null)&&i.call(t,x,w.isString(H)?H.trim():H,R,T))===!0&&D(x,R?R.concat(H):[H])}),S.pop()}}if(!w.isObject(e))throw new TypeError("data must be an object");return D(e),t}function zi(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(r){return t[r]})}function ei(e,t){this._pairs=[],e&&$n(e,this,t)}const Co=ei.prototype;Co.append=function(t,n){this._pairs.push([t,n])};Co.toString=function(t){const n=t?function(r){return t.call(this,r,zi)}:zi;return this._pairs.map(function(i){return n(i[0])+"="+n(i[1])},"").join("&")};function vl(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Oo(e,t,n){if(!t)return e;const r=n&&n.encode||vl,i=n&&n.serialize;let o;if(i?o=i(t,n):o=w.isURLSearchParams(t)?t.toString():new ei(t,n).toString(r),o){const a=e.indexOf("#");a!==-1&&(e=e.slice(0,a)),e+=(e.indexOf("?")===-1?"?":"&")+o}return e}class wl{constructor(){this.handlers=[]}use(t,n,r){return this.handlers.push({fulfilled:t,rejected:n,synchronous:r?r.synchronous:!1,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){w.forEach(this.handlers,function(r){r!==null&&t(r)})}}const Ki=wl,To={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},bl=typeof URLSearchParams<"u"?URLSearchParams:ei,yl=typeof FormData<"u"?FormData:null,_l=typeof Blob<"u"?Blob:null,El=(()=>{let e;return typeof navigator<"u"&&((e=navigator.product)==="ReactNative"||e==="NativeScript"||e==="NS")?!1:typeof window<"u"&&typeof document<"u"})(),Sl=(()=>typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function")(),Re={isBrowser:!0,classes:{URLSearchParams:bl,FormData:yl,Blob:_l},isStandardBrowserEnv:El,isStandardBrowserWebWorkerEnv:Sl,protocols:["http","https","file","blob","url","data"]};function xl(e,t){return $n(e,new Re.classes.URLSearchParams,Object.assign({visitor:function(n,r,i,o){return Re.isNode&&w.isBuffer(n)?(this.append(r,n.toString("base64")),!1):o.defaultVisitor.apply(this,arguments)}},t))}function Al(e){return w.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function Cl(e){const t={},n=Object.keys(e);let r;const i=n.length;let o;for(r=0;r<i;r++)o=n[r],t[o]=e[o];return t}function Do(e){function t(n,r,i,o){let a=n[o++];const c=Number.isFinite(+a),f=o>=n.length;return a=!a&&w.isArray(i)?i.length:a,f?(w.hasOwnProp(i,a)?i[a]=[i[a],r]:i[a]=r,!c):((!i[a]||!w.isObject(i[a]))&&(i[a]=[]),t(n,r,i[a],o)&&w.isArray(i[a])&&(i[a]=Cl(i[a])),!c)}if(w.isFormData(e)&&w.isFunction(e.entries)){const n={};return w.forEachEntry(e,(r,i)=>{t(Al(r),i,n,0)}),n}return null}const Ol={"Content-Type":void 0};function Tl(e,t,n){if(w.isString(e))try{return(t||JSON.parse)(e),w.trim(e)}catch(r){if(r.name!=="SyntaxError")throw r}return(n||JSON.stringify)(e)}const jn={transitional:To,adapter:["xhr","http"],transformRequest:[function(t,n){const r=n.getContentType()||"",i=r.indexOf("application/json")>-1,o=w.isObject(t);if(o&&w.isHTMLForm(t)&&(t=new FormData(t)),w.isFormData(t))return i&&i?JSON.stringify(Do(t)):t;if(w.isArrayBuffer(t)||w.isBuffer(t)||w.isStream(t)||w.isFile(t)||w.isBlob(t))return t;if(w.isArrayBufferView(t))return t.buffer;if(w.isURLSearchParams(t))return n.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let c;if(o){if(r.indexOf("application/x-www-form-urlencoded")>-1)return xl(t,this.formSerializer).toString();if((c=w.isFileList(t))||r.indexOf("multipart/form-data")>-1){const f=this.env&&this.env.FormData;return $n(c?{"files[]":t}:t,f&&new f,this.formSerializer)}}return o||i?(n.setContentType("application/json",!1),Tl(t)):t}],transformResponse:[function(t){const n=this.transitional||jn.transitional,r=n&&n.forcedJSONParsing,i=this.responseType==="json";if(t&&w.isString(t)&&(r&&!this.responseType||i)){const a=!(n&&n.silentJSONParsing)&&i;try{return JSON.parse(t)}catch(c){if(a)throw c.name==="SyntaxError"?U.from(c,U.ERR_BAD_RESPONSE,this,null,this.response):c}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Re.classes.FormData,Blob:Re.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};w.forEach(["delete","get","head"],function(t){jn.headers[t]={}});w.forEach(["post","put","patch"],function(t){jn.headers[t]=w.merge(Ol)});const ti=jn,Dl=w.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Nl=e=>{const t={};let n,r,i;return e&&e.split(`
`).forEach(function(a){i=a.indexOf(":"),n=a.substring(0,i).trim().toLowerCase(),r=a.substring(i+1).trim(),!(!n||t[n]&&Dl[n])&&(n==="set-cookie"?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)}),t},Xi=Symbol("internals");function It(e){return e&&String(e).trim().toLowerCase()}function Sn(e){return e===!1||e==null?e:w.isArray(e)?e.map(Sn):String(e)}function Rl(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}const Pl=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function br(e,t,n,r,i){if(w.isFunction(r))return r.call(this,t,n);if(i&&(t=n),!!w.isString(t)){if(w.isString(r))return t.indexOf(r)!==-1;if(w.isRegExp(r))return r.test(t)}}function kl(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,n,r)=>n.toUpperCase()+r)}function Ll(e,t){const n=w.toCamelCase(" "+t);["get","set","has"].forEach(r=>{Object.defineProperty(e,r+n,{value:function(i,o,a){return this[r].call(this,t,i,o,a)},configurable:!0})})}class Hn{constructor(t){t&&this.set(t)}set(t,n,r){const i=this;function o(c,f,p){const m=It(f);if(!m)throw new Error("header name must be a non-empty string");const S=w.findKey(i,m);(!S||i[S]===void 0||p===!0||p===void 0&&i[S]!==!1)&&(i[S||f]=Sn(c))}const a=(c,f)=>w.forEach(c,(p,m)=>o(p,m,f));return w.isPlainObject(t)||t instanceof this.constructor?a(t,n):w.isString(t)&&(t=t.trim())&&!Pl(t)?a(Nl(t),n):t!=null&&o(n,t,r),this}get(t,n){if(t=It(t),t){const r=w.findKey(this,t);if(r){const i=this[r];if(!n)return i;if(n===!0)return Rl(i);if(w.isFunction(n))return n.call(this,i,r);if(w.isRegExp(n))return n.exec(i);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,n){if(t=It(t),t){const r=w.findKey(this,t);return!!(r&&this[r]!==void 0&&(!n||br(this,this[r],r,n)))}return!1}delete(t,n){const r=this;let i=!1;function o(a){if(a=It(a),a){const c=w.findKey(r,a);c&&(!n||br(r,r[c],c,n))&&(delete r[c],i=!0)}}return w.isArray(t)?t.forEach(o):o(t),i}clear(t){const n=Object.keys(this);let r=n.length,i=!1;for(;r--;){const o=n[r];(!t||br(this,this[o],o,t,!0))&&(delete this[o],i=!0)}return i}normalize(t){const n=this,r={};return w.forEach(this,(i,o)=>{const a=w.findKey(r,o);if(a){n[a]=Sn(i),delete n[o];return}const c=t?kl(o):String(o).trim();c!==o&&delete n[o],n[c]=Sn(i),r[c]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const n=Object.create(null);return w.forEach(this,(r,i)=>{r!=null&&r!==!1&&(n[i]=t&&w.isArray(r)?r.join(", "):r)}),n}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,n])=>t+": "+n).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...n){const r=new this(t);return n.forEach(i=>r.set(i)),r}static accessor(t){const r=(this[Xi]=this[Xi]={accessors:{}}).accessors,i=this.prototype;function o(a){const c=It(a);r[c]||(Ll(i,a),r[c]=!0)}return w.isArray(t)?t.forEach(o):o(t),this}}Hn.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);w.freezeMethods(Hn.prototype);w.freezeMethods(Hn);const Fe=Hn;function yr(e,t){const n=this||ti,r=t||n,i=Fe.from(r.headers);let o=r.data;return w.forEach(e,function(c){o=c.call(n,o,i.normalize(),t?t.status:void 0)}),i.normalize(),o}function No(e){return!!(e&&e.__CANCEL__)}function Qt(e,t,n){U.call(this,e??"canceled",U.ERR_CANCELED,t,n),this.name="CanceledError"}w.inherits(Qt,U,{__CANCEL__:!0});function Il(e,t,n){const r=n.config.validateStatus;!n.status||!r||r(n.status)?e(n):t(new U("Request failed with status code "+n.status,[U.ERR_BAD_REQUEST,U.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n))}const Fl=Re.isStandardBrowserEnv?function(){return{write:function(n,r,i,o,a,c){const f=[];f.push(n+"="+encodeURIComponent(r)),w.isNumber(i)&&f.push("expires="+new Date(i).toGMTString()),w.isString(o)&&f.push("path="+o),w.isString(a)&&f.push("domain="+a),c===!0&&f.push("secure"),document.cookie=f.join("; ")},read:function(n){const r=document.cookie.match(new RegExp("(^|;\\s*)("+n+")=([^;]*)"));return r?decodeURIComponent(r[3]):null},remove:function(n){this.write(n,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}();function Ml(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function Bl(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}function Ro(e,t){return e&&!Ml(t)?Bl(e,t):t}const $l=Re.isStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");let r;function i(o){let a=o;return t&&(n.setAttribute("href",a),a=n.href),n.setAttribute("href",a),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:n.pathname.charAt(0)==="/"?n.pathname:"/"+n.pathname}}return r=i(window.location.href),function(a){const c=w.isString(a)?i(a):a;return c.protocol===r.protocol&&c.host===r.host}}():function(){return function(){return!0}}();function jl(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}function Hl(e,t){e=e||10;const n=new Array(e),r=new Array(e);let i=0,o=0,a;return t=t!==void 0?t:1e3,function(f){const p=Date.now(),m=r[o];a||(a=p),n[i]=f,r[i]=p;let S=o,T=0;for(;S!==i;)T+=n[S++],S=S%e;if(i=(i+1)%e,i===o&&(o=(o+1)%e),p-a<t)return;const D=m&&p-m;return D?Math.round(T*1e3/D):void 0}}function Yi(e,t){let n=0;const r=Hl(50,250);return i=>{const o=i.loaded,a=i.lengthComputable?i.total:void 0,c=o-n,f=r(c),p=o<=a;n=o;const m={loaded:o,total:a,progress:a?o/a:void 0,bytes:c,rate:f||void 0,estimated:f&&a&&p?(a-o)/f:void 0,event:i};m[t?"download":"upload"]=!0,e(m)}}const Ul=typeof XMLHttpRequest<"u",Wl=Ul&&function(e){return new Promise(function(n,r){let i=e.data;const o=Fe.from(e.headers).normalize(),a=e.responseType;let c;function f(){e.cancelToken&&e.cancelToken.unsubscribe(c),e.signal&&e.signal.removeEventListener("abort",c)}w.isFormData(i)&&(Re.isStandardBrowserEnv||Re.isStandardBrowserWebWorkerEnv?o.setContentType(!1):o.setContentType("multipart/form-data;",!1));let p=new XMLHttpRequest;if(e.auth){const D=e.auth.username||"",C=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(D+":"+C))}const m=Ro(e.baseURL,e.url);p.open(e.method.toUpperCase(),Oo(m,e.params,e.paramsSerializer),!0),p.timeout=e.timeout;function S(){if(!p)return;const D=Fe.from("getAllResponseHeaders"in p&&p.getAllResponseHeaders()),R={data:!a||a==="text"||a==="json"?p.responseText:p.response,status:p.status,statusText:p.statusText,headers:D,config:e,request:p};Il(function(x){n(x),f()},function(x){r(x),f()},R),p=null}if("onloadend"in p?p.onloadend=S:p.onreadystatechange=function(){!p||p.readyState!==4||p.status===0&&!(p.responseURL&&p.responseURL.indexOf("file:")===0)||setTimeout(S)},p.onabort=function(){p&&(r(new U("Request aborted",U.ECONNABORTED,e,p)),p=null)},p.onerror=function(){r(new U("Network Error",U.ERR_NETWORK,e,p)),p=null},p.ontimeout=function(){let C=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const R=e.transitional||To;e.timeoutErrorMessage&&(C=e.timeoutErrorMessage),r(new U(C,R.clarifyTimeoutError?U.ETIMEDOUT:U.ECONNABORTED,e,p)),p=null},Re.isStandardBrowserEnv){const D=(e.withCredentials||$l(m))&&e.xsrfCookieName&&Fl.read(e.xsrfCookieName);D&&o.set(e.xsrfHeaderName,D)}i===void 0&&o.setContentType(null),"setRequestHeader"in p&&w.forEach(o.toJSON(),function(C,R){p.setRequestHeader(R,C)}),w.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),a&&a!=="json"&&(p.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&p.addEventListener("progress",Yi(e.onDownloadProgress,!0)),typeof e.onUploadProgress=="function"&&p.upload&&p.upload.addEventListener("progress",Yi(e.onUploadProgress)),(e.cancelToken||e.signal)&&(c=D=>{p&&(r(!D||D.type?new Qt(null,e,p):D),p.abort(),p=null)},e.cancelToken&&e.cancelToken.subscribe(c),e.signal&&(e.signal.aborted?c():e.signal.addEventListener("abort",c)));const T=jl(m);if(T&&Re.protocols.indexOf(T)===-1){r(new U("Unsupported protocol "+T+":",U.ERR_BAD_REQUEST,e));return}p.send(i||null)})},xn={http:hl,xhr:Wl};w.forEach(xn,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});const ql={getAdapter:e=>{e=w.isArray(e)?e:[e];const{length:t}=e;let n,r;for(let i=0;i<t&&(n=e[i],!(r=w.isString(n)?xn[n.toLowerCase()]:n));i++);if(!r)throw r===!1?new U(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT"):new Error(w.hasOwnProp(xn,n)?`Adapter '${n}' is not available in the build`:`Unknown adapter '${n}'`);if(!w.isFunction(r))throw new TypeError("adapter is not a function");return r},adapters:xn};function _r(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Qt(null,e)}function Vi(e){return _r(e),e.headers=Fe.from(e.headers),e.data=yr.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),ql.getAdapter(e.adapter||ti.adapter)(e).then(function(r){return _r(e),r.data=yr.call(e,e.transformResponse,r),r.headers=Fe.from(r.headers),r},function(r){return No(r)||(_r(e),r&&r.response&&(r.response.data=yr.call(e,e.transformResponse,r.response),r.response.headers=Fe.from(r.response.headers))),Promise.reject(r)})}const Ji=e=>e instanceof Fe?e.toJSON():e;function wt(e,t){t=t||{};const n={};function r(p,m,S){return w.isPlainObject(p)&&w.isPlainObject(m)?w.merge.call({caseless:S},p,m):w.isPlainObject(m)?w.merge({},m):w.isArray(m)?m.slice():m}function i(p,m,S){if(w.isUndefined(m)){if(!w.isUndefined(p))return r(void 0,p,S)}else return r(p,m,S)}function o(p,m){if(!w.isUndefined(m))return r(void 0,m)}function a(p,m){if(w.isUndefined(m)){if(!w.isUndefined(p))return r(void 0,p)}else return r(void 0,m)}function c(p,m,S){if(S in t)return r(p,m);if(S in e)return r(void 0,p)}const f={url:o,method:o,data:o,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:c,headers:(p,m)=>i(Ji(p),Ji(m),!0)};return w.forEach(Object.keys(Object.assign({},e,t)),function(m){const S=f[m]||i,T=S(e[m],t[m],m);w.isUndefined(T)&&S!==c||(n[m]=T)}),n}const Po="1.4.0",ni={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{ni[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}});const Gi={};ni.transitional=function(t,n,r){function i(o,a){return"[Axios v"+Po+"] Transitional option '"+o+"'"+a+(r?". "+r:"")}return(o,a,c)=>{if(t===!1)throw new U(i(a," has been removed"+(n?" in "+n:"")),U.ERR_DEPRECATED);return n&&!Gi[a]&&(Gi[a]=!0,console.warn(i(a," has been deprecated since v"+n+" and will be removed in the near future"))),t?t(o,a,c):!0}};function zl(e,t,n){if(typeof e!="object")throw new U("options must be an object",U.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let i=r.length;for(;i-- >0;){const o=r[i],a=t[o];if(a){const c=e[o],f=c===void 0||a(c,o,e);if(f!==!0)throw new U("option "+o+" must be "+f,U.ERR_BAD_OPTION_VALUE);continue}if(n!==!0)throw new U("Unknown option "+o,U.ERR_BAD_OPTION)}}const kr={assertOptions:zl,validators:ni},We=kr.validators;class On{constructor(t){this.defaults=t,this.interceptors={request:new Ki,response:new Ki}}request(t,n){typeof t=="string"?(n=n||{},n.url=t):n=t||{},n=wt(this.defaults,n);const{transitional:r,paramsSerializer:i,headers:o}=n;r!==void 0&&kr.assertOptions(r,{silentJSONParsing:We.transitional(We.boolean),forcedJSONParsing:We.transitional(We.boolean),clarifyTimeoutError:We.transitional(We.boolean)},!1),i!=null&&(w.isFunction(i)?n.paramsSerializer={serialize:i}:kr.assertOptions(i,{encode:We.function,serialize:We.function},!0)),n.method=(n.method||this.defaults.method||"get").toLowerCase();let a;a=o&&w.merge(o.common,o[n.method]),a&&w.forEach(["delete","get","head","post","put","patch","common"],C=>{delete o[C]}),n.headers=Fe.concat(a,o);const c=[];let f=!0;this.interceptors.request.forEach(function(R){typeof R.runWhen=="function"&&R.runWhen(n)===!1||(f=f&&R.synchronous,c.unshift(R.fulfilled,R.rejected))});const p=[];this.interceptors.response.forEach(function(R){p.push(R.fulfilled,R.rejected)});let m,S=0,T;if(!f){const C=[Vi.bind(this),void 0];for(C.unshift.apply(C,c),C.push.apply(C,p),T=C.length,m=Promise.resolve(n);S<T;)m=m.then(C[S++],C[S++]);return m}T=c.length;let D=n;for(S=0;S<T;){const C=c[S++],R=c[S++];try{D=C(D)}catch(E){R.call(this,E);break}}try{m=Vi.call(this,D)}catch(C){return Promise.reject(C)}for(S=0,T=p.length;S<T;)m=m.then(p[S++],p[S++]);return m}getUri(t){t=wt(this.defaults,t);const n=Ro(t.baseURL,t.url);return Oo(n,t.params,t.paramsSerializer)}}w.forEach(["delete","get","head","options"],function(t){On.prototype[t]=function(n,r){return this.request(wt(r||{},{method:t,url:n,data:(r||{}).data}))}});w.forEach(["post","put","patch"],function(t){function n(r){return function(o,a,c){return this.request(wt(c||{},{method:t,headers:r?{"Content-Type":"multipart/form-data"}:{},url:o,data:a}))}}On.prototype[t]=n(),On.prototype[t+"Form"]=n(!0)});const An=On;class ri{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let n;this.promise=new Promise(function(o){n=o});const r=this;this.promise.then(i=>{if(!r._listeners)return;let o=r._listeners.length;for(;o-- >0;)r._listeners[o](i);r._listeners=null}),this.promise.then=i=>{let o;const a=new Promise(c=>{r.subscribe(c),o=c}).then(i);return a.cancel=function(){r.unsubscribe(o)},a},t(function(o,a,c){r.reason||(r.reason=new Qt(o,a,c),n(r.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const n=this._listeners.indexOf(t);n!==-1&&this._listeners.splice(n,1)}static source(){let t;return{token:new ri(function(i){t=i}),cancel:t}}}const Kl=ri;function Xl(e){return function(n){return e.apply(null,n)}}function Yl(e){return w.isObject(e)&&e.isAxiosError===!0}const Lr={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Lr).forEach(([e,t])=>{Lr[t]=e});const Vl=Lr;function ko(e){const t=new An(e),n=mo(An.prototype.request,t);return w.extend(n,An.prototype,t,{allOwnKeys:!0}),w.extend(n,t,null,{allOwnKeys:!0}),n.create=function(i){return ko(wt(e,i))},n}const se=ko(ti);se.Axios=An;se.CanceledError=Qt;se.CancelToken=Kl;se.isCancel=No;se.VERSION=Po;se.toFormData=$n;se.AxiosError=U;se.Cancel=se.CanceledError;se.all=function(t){return Promise.all(t)};se.spread=Xl;se.isAxiosError=Yl;se.mergeConfig=wt;se.AxiosHeaders=Fe;se.formToJSON=e=>Do(w.isHTMLForm(e)?new FormData(e):e);se.HttpStatusCode=Vl;se.default=se;const qt=se,Jl={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await qt.get(route("api.module.list")+"?layout_type=module").then(e=>{this.modulesListData=e.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(e){if(this.modulesSkinsData[e])return this.modulesSkinsData[e];if(await qt.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.modulesSkinsData[e]=t.data}),this.modulesSkinsData[e])return this.modulesSkinsData[e]},getModuleInfo:function(e){if(this.modulesListData||this.list(),this.modulesListData&&this.modulesListData.modules){var t=this.modulesListData.modules.find(function(n){return n.module==e});return t}}},Gl={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await qt.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(e=>{this.layoutsListData=e.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var e="layouts";if(this.layoutSkinsData[e])return this.layoutSkinsData[e];if(await qt.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.layoutSkinsData[e]=t.data}),this.layoutSkinsData[e])return this.layoutSkinsData[e]}},Ql={licenses:null,save:async function(e){return await qt.post(mw.settings.api_url+"mw_save_license",{rel_type:"",activate_on_save:1,local_key:e})}};class Zl extends Je{constructor(){super()}onRegister(){}}class ec extends Je{selectIcon(t){var n=$(t)[0];mw.iconLoader().init();var r=mw.iconPicker({iconOptions:!1});r.target=document.createElement("i"),r.on("select",function(i){i.render(),n.value=r.target.outerHTML;var o=new Event("input");n.dispatchEvent(o),r.dialog("hide")}),r.dialog()}pickIcon(t,n={}){const r={iconOptions:{color:!0,size:!0,reset:!0}};var i=$(t)[0];const o=Object.assign({},r,n,{target:i});mw.iconLoader().init();var a=mw.iconPicker(o);return console.log(a),{promise:()=>new Promise(f=>{a.target=i,a.on("select",function(p){p.render(),a.dialog("hide"),f(p)}),a.dialog()}),target:i,picker:a}}removeIcon(t){var n=$(t)[0];n.value="";var r=new Event("input");n.dispatchEvent(r)}}class tc extends Je{constructor(){super()}selectLink(t){var n=new(mw.top()).LinkEditor({mode:"dialog",controllers:[{type:"url",config:{text:!1,target:!0}},{type:"page",config:{text:!1,target:!0}},{type:"post",config:{text:!1,target:!0}},{type:"file",config:{text:!1,target:!0}},{type:"email",config:{text:!1,target:!0}},{type:"layout",config:{text:!1,target:!1}}]});if(mw.$(t)){var r=mw.$(t),i="",o=!1;r&&r[0]&&r[0].nodeName==="A"?(i=r.attr("href"),r.attr("target")&&(o=r.attr("target"))):i=r.val(),i=="#"&&(i=""),n.setValue({url:i,target:o})}var a=this;n.promise().then(function(c){if(c){var f={},p=c.url;f.url=p,f.openInNewWindow=!1,c.target&&(f.openInNewWindow=c.target),c.data&&c.data.id&&(f.id=c.data.id,c.data.type&&c.data.type==="category"?f.type="category":(c.data.type&&c.data.type==="page"||c.data.content_type)&&(f.type="content")),a.dispatch("selected",f)}})}}class nc extends Je{constructor(){super(),this.colorPickerInstances=[],this.positionToElement=!1}setPositionToElement(t){this.positionToElement=t}openColorPicker(t,n=!1,r=!1){if(this.colorPickerInstances.length>0)for(let c=0;c<this.colorPickerInstances.length;c++)this.colorPickerInstances[c].remove();let i=this.generateRandId(10),o=mw.top().dialog({content:'<div id="color-picker-'+i+'" style="width:232px;height:325px;"></div>',title:"Color Picker",footer:!1,width:240,overlayClose:!0});r&&o.positionToElement(r),o.dialogContainer&&(o.dialogContainer.style.padding="0px"),o.overlay&&(o.overlay.style.backgroundColor="transparent"),this.colorPickerInstances.push(o);var a={element:"#color-picker-"+i,onchange:function(c){n&&n(c)}};return t=="rgba(0, 0, 0, 0)"&&(t=""),t&&(a.value=t),mw.top().colorPicker(a),o}selectColor(t,n=!1){if(this.colorPickerInstances.length>0)for(let a=0;a<this.colorPickerInstances.length;a++)this.colorPickerInstances[a].remove();var r=$(t)[0];let i=this.generateRandId(10),o=mw.top().dialog({content:'<div id="color-picker-'+i+'" style="width:232px;height:325px;"></div>',title:"Color Picker",footer:!1,width:240,overlayClose:!0});o.positionToElement(this.positionToElement),o.dialogContainer&&(o.dialogContainer.style.padding="0px"),o.overlay&&(o.overlay.style.backgroundColor="transparent"),this.colorPickerInstances.push(o),mw.top().colorPicker({element:"#color-picker-"+i,value:r.value,onchange:function(a){r.value=a,r.dispatchEvent(new Event("input")),n&&n(a)}})}generateRandId(t){let n="";const r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",i=r.length;let o=0;for(;o<t;)n+=r.charAt(Math.floor(Math.random()*i)),o+=1;return n}}(()=>{function e(s,u){var l=Object.keys(s);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(s);u&&(d=d.filter(function(h){return Object.getOwnPropertyDescriptor(s,h).enumerable})),l.push.apply(l,d)}return l}function t(s){for(var u=1;u<arguments.length;u++){var l=arguments[u]!=null?arguments[u]:{};u%2?e(Object(l),!0).forEach(function(d){r(s,d,l[d])}):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(l)):e(Object(l)).forEach(function(d){Object.defineProperty(s,d,Object.getOwnPropertyDescriptor(l,d))})}return s}function n(s){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?n=function(u){return typeof u}:n=function(u){return u&&typeof Symbol=="function"&&u.constructor===Symbol&&u!==Symbol.prototype?"symbol":typeof u},n(s)}function r(s,u,l){return u in s?Object.defineProperty(s,u,{value:l,enumerable:!0,configurable:!0,writable:!0}):s[u]=l,s}function i(){return i=Object.assign||function(s){for(var u=1;u<arguments.length;u++){var l=arguments[u];for(var d in l)Object.prototype.hasOwnProperty.call(l,d)&&(s[d]=l[d])}return s},i.apply(this,arguments)}function o(s,u){if(s==null)return{};var l={},d=Object.keys(s),h,g;for(g=0;g<d.length;g++)h=d[g],!(u.indexOf(h)>=0)&&(l[h]=s[h]);return l}function a(s,u){if(s==null)return{};var l=o(s,u),d,h;if(Object.getOwnPropertySymbols){var g=Object.getOwnPropertySymbols(s);for(h=0;h<g.length;h++)d=g[h],!(u.indexOf(d)>=0)&&(!Object.prototype.propertyIsEnumerable.call(s,d)||(l[d]=s[d]))}return l}var c="1.15.0";function f(s){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(s)}var p=f(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),m=f(/Edge/i),S=f(/firefox/i),T=f(/safari/i)&&!f(/chrome/i)&&!f(/android/i),D=f(/iP(ad|od|hone)/i),C=f(/chrome/i)&&f(/android/i),R={capture:!1,passive:!1};function E(s,u,l){s.addEventListener(u,l,!p&&R)}function x(s,u,l){s.removeEventListener(u,l,!p&&R)}function H(s,u){if(u){if(u[0]===">"&&(u=u.substring(1)),s)try{if(s.matches)return s.matches(u);if(s.msMatchesSelector)return s.msMatchesSelector(u);if(s.webkitMatchesSelector)return s.webkitMatchesSelector(u)}catch{return!1}return!1}}function q(s){return s.host&&s!==document&&s.host.nodeType?s.host:s.parentNode}function M(s,u,l,d){if(s){l=l||document;do{if(u!=null&&(u[0]===">"?s.parentNode===l&&H(s,u):H(s,u))||d&&s===l)return s;if(s===l)break}while(s=q(s))}return null}var W=/\s+/g;function _(s,u,l){if(s&&u)if(s.classList)s.classList[l?"add":"remove"](u);else{var d=(" "+s.className+" ").replace(W," ").replace(" "+u+" "," ");s.className=(d+(l?" "+u:"")).replace(W," ")}}function b(s,u,l){var d=s&&s.style;if(d){if(l===void 0)return document.defaultView&&document.defaultView.getComputedStyle?l=document.defaultView.getComputedStyle(s,""):s.currentStyle&&(l=s.currentStyle),u===void 0?l:l[u];!(u in d)&&u.indexOf("webkit")===-1&&(u="-webkit-"+u),d[u]=l+(typeof l=="string"?"":"px")}}function j(s,u){var l="";if(typeof s=="string")l=s;else do{var d=b(s,"transform");d&&d!=="none"&&(l=d+" "+l)}while(!u&&(s=s.parentNode));var h=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return h&&new h(l)}function te(s,u,l){if(s){var d=s.getElementsByTagName(u),h=0,g=d.length;if(l)for(;h<g;h++)l(d[h],h);return d}return[]}function Y(){var s=document.scrollingElement;return s||document.documentElement}function z(s,u,l,d,h){if(!(!s.getBoundingClientRect&&s!==window)){var g,v,O,y,N,P,I;if(s!==window&&s.parentNode&&s!==Y()?(g=s.getBoundingClientRect(),v=g.top,O=g.left,y=g.bottom,N=g.right,P=g.height,I=g.width):(v=0,O=0,y=window.innerHeight,N=window.innerWidth,P=window.innerHeight,I=window.innerWidth),(u||l)&&s!==window&&(h=h||s.parentNode,!p))do if(h&&h.getBoundingClientRect&&(b(h,"transform")!=="none"||l&&b(h,"position")!=="static")){var J=h.getBoundingClientRect();v-=J.top+parseInt(b(h,"border-top-width")),O-=J.left+parseInt(b(h,"border-left-width")),y=v+g.height,N=O+g.width;break}while(h=h.parentNode);if(d&&s!==window){var B=j(h||s),oe=B&&B.a,K=B&&B.d;B&&(v/=K,O/=oe,I/=oe,P/=K,y=v+P,N=O+I)}return{top:v,left:O,bottom:y,right:N,width:I,height:P}}}function X(s,u,l){for(var d=Be(s,!0),h=z(s)[u];d;){var g=z(d)[l],v=void 0;if(l==="top"||l==="left"?v=h>=g:v=h<=g,!v)return d;if(d===Y())break;d=Be(d,!1)}return!1}function ye(s,u,l,d){for(var h=0,g=0,v=s.children;g<v.length;){if(v[g].style.display!=="none"&&v[g]!==L.ghost&&(d||v[g]!==L.dragged)&&M(v[g],l.draggable,s,!1)){if(h===u)return v[g];h++}g++}return null}function xe(s,u){for(var l=s.lastElementChild;l&&(l===L.ghost||b(l,"display")==="none"||u&&!H(l,u));)l=l.previousElementSibling;return l||null}function Q(s,u){var l=0;if(!s||!s.parentNode)return-1;for(;s=s.previousElementSibling;)s.nodeName.toUpperCase()!=="TEMPLATE"&&s!==L.clone&&(!u||H(s,u))&&l++;return l}function Me(s){var u=0,l=0,d=Y();if(s)do{var h=j(s),g=h.a,v=h.d;u+=s.scrollLeft*g,l+=s.scrollTop*v}while(s!==d&&(s=s.parentNode));return[u,l]}function ia(s,u){for(var l in s)if(s.hasOwnProperty(l)){for(var d in u)if(u.hasOwnProperty(d)&&u[d]===s[l][d])return Number(l)}return-1}function Be(s,u){if(!s||!s.getBoundingClientRect)return Y();var l=s,d=!1;do if(l.clientWidth<l.scrollWidth||l.clientHeight<l.scrollHeight){var h=b(l);if(l.clientWidth<l.scrollWidth&&(h.overflowX=="auto"||h.overflowX=="scroll")||l.clientHeight<l.scrollHeight&&(h.overflowY=="auto"||h.overflowY=="scroll")){if(!l.getBoundingClientRect||l===document.body)return Y();if(d||u)return l;d=!0}}while(l=l.parentNode);return Y()}function oa(s,u){if(s&&u)for(var l in u)u.hasOwnProperty(l)&&(s[l]=u[l]);return s}function er(s,u){return Math.round(s.top)===Math.round(u.top)&&Math.round(s.left)===Math.round(u.left)&&Math.round(s.height)===Math.round(u.height)&&Math.round(s.width)===Math.round(u.width)}var At;function Ci(s,u){return function(){if(!At){var l=arguments,d=this;l.length===1?s.call(d,l[0]):s.apply(d,l),At=setTimeout(function(){At=void 0},u)}}}function sa(){clearTimeout(At),At=void 0}function Oi(s,u,l){s.scrollLeft+=u,s.scrollTop+=l}function Ti(s){var u=window.Polymer,l=window.jQuery||window.Zepto;return u&&u.dom?u.dom(s).cloneNode(!0):l?l(s).clone(!0)[0]:s.cloneNode(!0)}var ge="Sortable"+new Date().getTime();function aa(){var s=[],u;return{captureAnimationState:function(){if(s=[],!!this.options.animation){var l=[].slice.call(this.el.children);l.forEach(function(d){if(!(b(d,"display")==="none"||d===L.ghost)){s.push({target:d,rect:z(d)});var h=t({},s[s.length-1].rect);if(d.thisAnimationDuration){var g=j(d,!0);g&&(h.top-=g.f,h.left-=g.e)}d.fromRect=h}})}},addAnimationState:function(l){s.push(l)},removeAnimationState:function(l){s.splice(ia(s,{target:l}),1)},animateAll:function(l){var d=this;if(!this.options.animation){clearTimeout(u),typeof l=="function"&&l();return}var h=!1,g=0;s.forEach(function(v){var O=0,y=v.target,N=y.fromRect,P=z(y),I=y.prevFromRect,J=y.prevToRect,B=v.rect,oe=j(y,!0);oe&&(P.top-=oe.f,P.left-=oe.e),y.toRect=P,y.thisAnimationDuration&&er(I,P)&&!er(N,P)&&(B.top-P.top)/(B.left-P.left)==(N.top-P.top)/(N.left-P.left)&&(O=ca(B,I,J,d.options)),er(P,N)||(y.prevFromRect=N,y.prevToRect=P,O||(O=d.options.animation),d.animate(y,B,P,O)),O&&(h=!0,g=Math.max(g,O),clearTimeout(y.animationResetTimer),y.animationResetTimer=setTimeout(function(){y.animationTime=0,y.prevFromRect=null,y.fromRect=null,y.prevToRect=null,y.thisAnimationDuration=null},O),y.thisAnimationDuration=O)}),clearTimeout(u),h?u=setTimeout(function(){typeof l=="function"&&l()},g):typeof l=="function"&&l(),s=[]},animate:function(l,d,h,g){if(g){b(l,"transition",""),b(l,"transform","");var v=j(this.el),O=v&&v.a,y=v&&v.d,N=(d.left-h.left)/(O||1),P=(d.top-h.top)/(y||1);l.animatingX=!!N,l.animatingY=!!P,b(l,"transform","translate3d("+N+"px,"+P+"px,0)"),this.forRepaintDummy=la(l),b(l,"transition","transform "+g+"ms"+(this.options.easing?" "+this.options.easing:"")),b(l,"transform","translate3d(0,0,0)"),typeof l.animated=="number"&&clearTimeout(l.animated),l.animated=setTimeout(function(){b(l,"transition",""),b(l,"transform",""),l.animated=!1,l.animatingX=!1,l.animatingY=!1},g)}}}}function la(s){return s.offsetWidth}function ca(s,u,l,d){return Math.sqrt(Math.pow(u.top-s.top,2)+Math.pow(u.left-s.left,2))/Math.sqrt(Math.pow(u.top-l.top,2)+Math.pow(u.left-l.left,2))*d.animation}var dt=[],tr={initializeByDefault:!0},Ct={mount:function(s){for(var u in tr)tr.hasOwnProperty(u)&&!(u in s)&&(s[u]=tr[u]);dt.forEach(function(l){if(l.pluginName===s.pluginName)throw"Sortable: Cannot mount plugin ".concat(s.pluginName," more than once")}),dt.push(s)},pluginEvent:function(s,u,l){var d=this;this.eventCanceled=!1,l.cancel=function(){d.eventCanceled=!0};var h=s+"Global";dt.forEach(function(g){!u[g.pluginName]||(u[g.pluginName][h]&&u[g.pluginName][h](t({sortable:u},l)),u.options[g.pluginName]&&u[g.pluginName][s]&&u[g.pluginName][s](t({sortable:u},l)))})},initializePlugins:function(s,u,l,d){dt.forEach(function(v){var O=v.pluginName;if(!(!s.options[O]&&!v.initializeByDefault)){var y=new v(s,u,s.options);y.sortable=s,y.options=s.options,s[O]=y,i(l,y.defaults)}});for(var h in s.options)if(s.options.hasOwnProperty(h)){var g=this.modifyOption(s,h,s.options[h]);typeof g<"u"&&(s.options[h]=g)}},getEventProperties:function(s,u){var l={};return dt.forEach(function(d){typeof d.eventProperties=="function"&&i(l,d.eventProperties.call(u[d.pluginName],s))}),l},modifyOption:function(s,u,l){var d;return dt.forEach(function(h){!s[h.pluginName]||h.optionListeners&&typeof h.optionListeners[u]=="function"&&(d=h.optionListeners[u].call(s[h.pluginName],l))}),d}};function ua(s){var u=s.sortable,l=s.rootEl,d=s.name,h=s.targetEl,g=s.cloneEl,v=s.toEl,O=s.fromEl,y=s.oldIndex,N=s.newIndex,P=s.oldDraggableIndex,I=s.newDraggableIndex,J=s.originalEvent,B=s.putSortable,oe=s.extraEventProperties;if(u=u||l&&l[ge],!!u){var K,ke=u.options,fe="on"+d.charAt(0).toUpperCase()+d.substr(1);window.CustomEvent&&!p&&!m?K=new CustomEvent(d,{bubbles:!0,cancelable:!0}):(K=document.createEvent("Event"),K.initEvent(d,!0,!0)),K.to=v||l,K.from=O||l,K.item=h||l,K.clone=g,K.oldIndex=y,K.newIndex=N,K.oldDraggableIndex=P,K.newDraggableIndex=I,K.originalEvent=J,K.pullMode=B?B.lastPutMode:void 0;var Le=t(t({},oe),Ct.getEventProperties(d,u));for(var ue in Le)K[ue]=Le[ue];l&&l.dispatchEvent(K),ke[fe]&&ke[fe].call(u,K)}}var da=["evt"],me=function(s,u){var l=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},d=l.evt,h=a(l,da);Ct.pluginEvent.bind(L)(s,u,t({dragEl:A,parentEl:ee,ghostEl:F,rootEl:V,nextEl:Ge,lastDownEl:on,cloneEl:Z,cloneHidden:$e,dragStarted:Tt,putSortable:le,activeSortable:L.active,originalEvent:d,oldIndex:ft,oldDraggableIndex:Ot,newIndex:ve,newDraggableIndex:je,hideGhostForTarget:Ii,unhideGhostForTarget:Fi,cloneNowHidden:function(){$e=!0},cloneNowShown:function(){$e=!1},dispatchSortableEvent:function(g){de({sortable:u,name:g,originalEvent:d})}},h))};function de(s){ua(t({putSortable:le,cloneEl:Z,targetEl:A,rootEl:V,oldIndex:ft,oldDraggableIndex:Ot,newIndex:ve,newDraggableIndex:je},s))}var A,ee,F,V,Ge,on,Z,$e,ft,ve,Ot,je,sn,le,pt=!1,an=!1,ln=[],Qe,Ae,nr,rr,Di,Ni,Tt,ht,Dt,Nt=!1,cn=!1,un,ce,ir=[],or=!1,dn=[],fn=typeof document<"u",pn=D,Ri=m||p?"cssFloat":"float",fa=fn&&!C&&!D&&"draggable"in document.createElement("div"),Pi=function(){if(fn){if(p)return!1;var s=document.createElement("x");return s.style.cssText="pointer-events:auto",s.style.pointerEvents==="auto"}}(),ki=function(s,u){var l=b(s),d=parseInt(l.width)-parseInt(l.paddingLeft)-parseInt(l.paddingRight)-parseInt(l.borderLeftWidth)-parseInt(l.borderRightWidth),h=ye(s,0,u),g=ye(s,1,u),v=h&&b(h),O=g&&b(g),y=v&&parseInt(v.marginLeft)+parseInt(v.marginRight)+z(h).width,N=O&&parseInt(O.marginLeft)+parseInt(O.marginRight)+z(g).width;if(l.display==="flex")return l.flexDirection==="column"||l.flexDirection==="column-reverse"?"vertical":"horizontal";if(l.display==="grid")return l.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(h&&v.float&&v.float!=="none"){var P=v.float==="left"?"left":"right";return g&&(O.clear==="both"||O.clear===P)?"vertical":"horizontal"}return h&&(v.display==="block"||v.display==="flex"||v.display==="table"||v.display==="grid"||y>=d&&l[Ri]==="none"||g&&l[Ri]==="none"&&y+N>d)?"vertical":"horizontal"},pa=function(s,u,l){var d=l?s.left:s.top,h=l?s.right:s.bottom,g=l?s.width:s.height,v=l?u.left:u.top,O=l?u.right:u.bottom,y=l?u.width:u.height;return d===v||h===O||d+g/2===v+y/2},ha=function(s,u){var l;return ln.some(function(d){var h=d[ge].options.emptyInsertThreshold;if(!(!h||xe(d))){var g=z(d),v=s>=g.left-h&&s<=g.right+h,O=u>=g.top-h&&u<=g.bottom+h;if(v&&O)return l=d}}),l},Li=function(s){function u(h,g){return function(v,O,y,N){var P=v.options.group.name&&O.options.group.name&&v.options.group.name===O.options.group.name;if(h==null&&(g||P))return!0;if(h==null||h===!1)return!1;if(g&&h==="clone")return h;if(typeof h=="function")return u(h(v,O,y,N),g)(v,O,y,N);var I=(g?v:O).options.group.name;return h===!0||typeof h=="string"&&h===I||h.join&&h.indexOf(I)>-1}}var l={},d=s.group;(!d||n(d)!="object")&&(d={name:d}),l.name=d.name,l.checkPull=u(d.pull,!0),l.checkPut=u(d.put),l.revertClone=d.revertClone,s.group=l},Ii=function(){!Pi&&F&&b(F,"display","none")},Fi=function(){!Pi&&F&&b(F,"display","")};fn&&!C&&document.addEventListener("click",function(s){if(an)return s.preventDefault(),s.stopPropagation&&s.stopPropagation(),s.stopImmediatePropagation&&s.stopImmediatePropagation(),an=!1,!1},!0);var Ze=function(s){if(A){s=s.touches?s.touches[0]:s;var u=ha(s.clientX,s.clientY);if(u){var l={};for(var d in s)s.hasOwnProperty(d)&&(l[d]=s[d]);l.target=l.rootEl=u,l.preventDefault=void 0,l.stopPropagation=void 0,u[ge]._onDragOver(l)}}},ma=function(s){A&&A.parentNode[ge]._isOutsideThisEl(s.target)};function L(s,u){if(!(s&&s.nodeType&&s.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(s));this.el=s,this.options=u=i({},u),s[ge]=this;var l={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(s.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return ki(s,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(g,v){g.setData("Text",v.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:L.supportPointer!==!1&&"PointerEvent"in window&&!T,emptyInsertThreshold:5};Ct.initializePlugins(this,s,l);for(var d in l)!(d in u)&&(u[d]=l[d]);Li(u);for(var h in this)h.charAt(0)==="_"&&typeof this[h]=="function"&&(this[h]=this[h].bind(this));this.nativeDraggable=u.forceFallback?!1:fa,this.nativeDraggable&&(this.options.touchStartThreshold=1),u.supportPointer?E(s,"pointerdown",this._onTapStart):(E(s,"mousedown",this._onTapStart),E(s,"touchstart",this._onTapStart)),this.nativeDraggable&&(E(s,"dragover",this),E(s,"dragenter",this)),ln.push(this.el),u.store&&u.store.get&&this.sort(u.store.get(this)||[]),i(this,aa())}L.prototype={constructor:L,_isOutsideThisEl:function(s){!this.el.contains(s)&&s!==this.el&&(ht=null)},_getDirection:function(s,u){return typeof this.options.direction=="function"?this.options.direction.call(this,s,u,A):this.options.direction},_onTapStart:function(s){if(s.cancelable){var u=this,l=this.el,d=this.options,h=d.preventOnFilter,g=s.type,v=s.touches&&s.touches[0]||s.pointerType&&s.pointerType==="touch"&&s,O=(v||s).target,y=s.target.shadowRoot&&(s.path&&s.path[0]||s.composedPath&&s.composedPath()[0])||O,N=d.filter;if(Sa(l),!A&&!(/mousedown|pointerdown/.test(g)&&s.button!==0||d.disabled)&&!y.isContentEditable&&!(!this.nativeDraggable&&T&&O&&O.tagName.toUpperCase()==="SELECT")&&(O=M(O,d.draggable,l,!1),!(O&&O.animated)&&on!==O)){if(ft=Q(O),Ot=Q(O,d.draggable),typeof N=="function"){if(N.call(this,s,O,this)){de({sortable:u,rootEl:y,name:"filter",targetEl:O,toEl:l,fromEl:l}),me("filter",u,{evt:s}),h&&s.cancelable&&s.preventDefault();return}}else if(N&&(N=N.split(",").some(function(P){if(P=M(y,P.trim(),l,!1),P)return de({sortable:u,rootEl:P,name:"filter",targetEl:O,fromEl:l,toEl:l}),me("filter",u,{evt:s}),!0}),N)){h&&s.cancelable&&s.preventDefault();return}d.handle&&!M(y,d.handle,l,!1)||this._prepareDragStart(s,v,O)}}},_prepareDragStart:function(s,u,l){var d=this,h=d.el,g=d.options,v=h.ownerDocument,O;if(l&&!A&&l.parentNode===h){var y=z(l);if(V=h,A=l,ee=A.parentNode,Ge=A.nextSibling,on=l,sn=g.group,L.dragged=A,Qe={target:A,clientX:(u||s).clientX,clientY:(u||s).clientY},Di=Qe.clientX-y.left,Ni=Qe.clientY-y.top,this._lastX=(u||s).clientX,this._lastY=(u||s).clientY,A.style["will-change"]="all",O=function(){if(me("delayEnded",d,{evt:s}),L.eventCanceled){d._onDrop();return}d._disableDelayedDragEvents(),!S&&d.nativeDraggable&&(A.draggable=!0),d._triggerDragStart(s,u),de({sortable:d,name:"choose",originalEvent:s}),_(A,g.chosenClass,!0)},g.ignore.split(",").forEach(function(N){te(A,N.trim(),sr)}),E(v,"dragover",Ze),E(v,"mousemove",Ze),E(v,"touchmove",Ze),E(v,"mouseup",d._onDrop),E(v,"touchend",d._onDrop),E(v,"touchcancel",d._onDrop),S&&this.nativeDraggable&&(this.options.touchStartThreshold=4,A.draggable=!0),me("delayStart",this,{evt:s}),g.delay&&(!g.delayOnTouchOnly||u)&&(!this.nativeDraggable||!(m||p))){if(L.eventCanceled){this._onDrop();return}E(v,"mouseup",d._disableDelayedDrag),E(v,"touchend",d._disableDelayedDrag),E(v,"touchcancel",d._disableDelayedDrag),E(v,"mousemove",d._delayedDragTouchMoveHandler),E(v,"touchmove",d._delayedDragTouchMoveHandler),g.supportPointer&&E(v,"pointermove",d._delayedDragTouchMoveHandler),d._dragStartTimer=setTimeout(O,g.delay)}else O()}},_delayedDragTouchMoveHandler:function(s){var u=s.touches?s.touches[0]:s;Math.max(Math.abs(u.clientX-this._lastX),Math.abs(u.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){A&&sr(A),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var s=this.el.ownerDocument;x(s,"mouseup",this._disableDelayedDrag),x(s,"touchend",this._disableDelayedDrag),x(s,"touchcancel",this._disableDelayedDrag),x(s,"mousemove",this._delayedDragTouchMoveHandler),x(s,"touchmove",this._delayedDragTouchMoveHandler),x(s,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(s,u){u=u||s.pointerType=="touch"&&s,!this.nativeDraggable||u?this.options.supportPointer?E(document,"pointermove",this._onTouchMove):u?E(document,"touchmove",this._onTouchMove):E(document,"mousemove",this._onTouchMove):(E(A,"dragend",this),E(V,"dragstart",this._onDragStart));try{document.selection?mn(function(){document.selection.empty()}):window.getSelection().removeAllRanges()}catch{}},_dragStarted:function(s,u){if(pt=!1,V&&A){me("dragStarted",this,{evt:u}),this.nativeDraggable&&E(document,"dragover",ma);var l=this.options;!s&&_(A,l.dragClass,!1),_(A,l.ghostClass,!0),L.active=this,s&&this._appendGhost(),de({sortable:this,name:"start",originalEvent:u})}else this._nulling()},_emulateDragOver:function(){if(Ae){this._lastX=Ae.clientX,this._lastY=Ae.clientY,Ii();for(var s=document.elementFromPoint(Ae.clientX,Ae.clientY),u=s;s&&s.shadowRoot&&(s=s.shadowRoot.elementFromPoint(Ae.clientX,Ae.clientY),s!==u);)u=s;if(A.parentNode[ge]._isOutsideThisEl(s),u)do{if(u[ge]){var l=void 0;if(l=u[ge]._onDragOver({clientX:Ae.clientX,clientY:Ae.clientY,target:s,rootEl:u}),l&&!this.options.dragoverBubble)break}s=u}while(u=u.parentNode);Fi()}},_onTouchMove:function(s){if(Qe){var u=this.options,l=u.fallbackTolerance,d=u.fallbackOffset,h=s.touches?s.touches[0]:s,g=F&&j(F,!0),v=F&&g&&g.a,O=F&&g&&g.d,y=pn&&ce&&Me(ce),N=(h.clientX-Qe.clientX+d.x)/(v||1)+(y?y[0]-ir[0]:0)/(v||1),P=(h.clientY-Qe.clientY+d.y)/(O||1)+(y?y[1]-ir[1]:0)/(O||1);if(!L.active&&!pt){if(l&&Math.max(Math.abs(h.clientX-this._lastX),Math.abs(h.clientY-this._lastY))<l)return;this._onDragStart(s,!0)}if(F){g?(g.e+=N-(nr||0),g.f+=P-(rr||0)):g={a:1,b:0,c:0,d:1,e:N,f:P};var I="matrix(".concat(g.a,",").concat(g.b,",").concat(g.c,",").concat(g.d,",").concat(g.e,",").concat(g.f,")");b(F,"webkitTransform",I),b(F,"mozTransform",I),b(F,"msTransform",I),b(F,"transform",I),nr=N,rr=P,Ae=h}s.cancelable&&s.preventDefault()}},_appendGhost:function(){if(!F){var s=this.options.fallbackOnBody?document.body:V,u=z(A,!0,pn,!0,s),l=this.options;if(pn){for(ce=s;b(ce,"position")==="static"&&b(ce,"transform")==="none"&&ce!==document;)ce=ce.parentNode;ce!==document.body&&ce!==document.documentElement?(ce===document&&(ce=Y()),u.top+=ce.scrollTop,u.left+=ce.scrollLeft):ce=Y(),ir=Me(ce)}F=A.cloneNode(!0),_(F,l.ghostClass,!1),_(F,l.fallbackClass,!0),_(F,l.dragClass,!0),b(F,"transition",""),b(F,"transform",""),b(F,"box-sizing","border-box"),b(F,"margin",0),b(F,"top",u.top),b(F,"left",u.left),b(F,"width",u.width),b(F,"height",u.height),b(F,"opacity","0.8"),b(F,"position",pn?"absolute":"fixed"),b(F,"zIndex","100000"),b(F,"pointerEvents","none"),L.ghost=F,s.appendChild(F),b(F,"transform-origin",Di/parseInt(F.style.width)*100+"% "+Ni/parseInt(F.style.height)*100+"%")}},_onDragStart:function(s,u){var l=this,d=s.dataTransfer,h=l.options;if(me("dragStart",this,{evt:s}),L.eventCanceled){this._onDrop();return}me("setupClone",this),L.eventCanceled||(Z=Ti(A),Z.removeAttribute("id"),Z.draggable=!1,Z.style["will-change"]="",this._hideClone(),_(Z,this.options.chosenClass,!1),L.clone=Z),l.cloneId=mn(function(){me("clone",l),!L.eventCanceled&&(l.options.removeCloneOnHide||V.insertBefore(Z,A),l._hideClone(),de({sortable:l,name:"clone"}))}),!u&&_(A,h.dragClass,!0),u?(an=!0,l._loopId=setInterval(l._emulateDragOver,50)):(x(document,"mouseup",l._onDrop),x(document,"touchend",l._onDrop),x(document,"touchcancel",l._onDrop),d&&(d.effectAllowed="move",h.setData&&h.setData.call(l,d,A)),E(document,"drop",l),b(A,"transform","translateZ(0)")),pt=!0,l._dragStartId=mn(l._dragStarted.bind(l,u,s)),E(document,"selectstart",l),Tt=!0,T&&b(document.body,"user-select","none")},_onDragOver:function(s){var u=this.el,l=s.target,d,h,g,v=this.options,O=v.group,y=L.active,N=sn===O,P=v.sort,I=le||y,J,B=this,oe=!1;if(or)return;function K(Lt,Ca){me(Lt,B,t({evt:s,isOwner:N,axis:J?"vertical":"horizontal",revert:g,dragRect:d,targetRect:h,canSort:P,fromSortable:I,target:l,completed:fe,onMove:function($i,Oa){return hn(V,u,A,d,$i,z($i),s,Oa)},changed:Le},Ca))}function ke(){K("dragOverAnimationCapture"),B.captureAnimationState(),B!==I&&I.captureAnimationState()}function fe(Lt){return K("dragOverCompleted",{insertion:Lt}),Lt&&(N?y._hideClone():y._showClone(B),B!==I&&(_(A,le?le.options.ghostClass:y.options.ghostClass,!1),_(A,v.ghostClass,!0)),le!==B&&B!==L.active?le=B:B===L.active&&le&&(le=null),I===B&&(B._ignoreWhileAnimating=l),B.animateAll(function(){K("dragOverAnimationComplete"),B._ignoreWhileAnimating=null}),B!==I&&(I.animateAll(),I._ignoreWhileAnimating=null)),(l===A&&!A.animated||l===u&&!l.animated)&&(ht=null),!v.dragoverBubble&&!s.rootEl&&l!==document&&(A.parentNode[ge]._isOutsideThisEl(s.target),!Lt&&Ze(s)),!v.dragoverBubble&&s.stopPropagation&&s.stopPropagation(),oe=!0}function Le(){ve=Q(A),je=Q(A,v.draggable),de({sortable:B,name:"change",toEl:u,newIndex:ve,newDraggableIndex:je,originalEvent:s})}if(s.preventDefault!==void 0&&s.cancelable&&s.preventDefault(),l=M(l,v.draggable,u,!0),K("dragOver"),L.eventCanceled)return oe;if(A.contains(s.target)||l.animated&&l.animatingX&&l.animatingY||B._ignoreWhileAnimating===l)return fe(!1);if(an=!1,y&&!v.disabled&&(N?P||(g=ee!==V):le===this||(this.lastPutMode=sn.checkPull(this,y,A,s))&&O.checkPut(this,y,A,s))){if(J=this._getDirection(s,l)==="vertical",d=z(A),K("dragOverValid"),L.eventCanceled)return oe;if(g)return ee=V,ke(),this._hideClone(),K("revert"),L.eventCanceled||(Ge?V.insertBefore(A,Ge):V.appendChild(A)),fe(!0);var ue=xe(u,v.draggable);if(!ue||ba(s,J,this)&&!ue.animated){if(ue===A)return fe(!1);if(ue&&u===s.target&&(l=ue),l&&(h=z(l)),hn(V,u,A,d,l,h,s,!!l)!==!1)return ke(),ue&&ue.nextSibling?u.insertBefore(A,ue.nextSibling):u.appendChild(A),ee=u,Le(),fe(!0)}else if(ue&&wa(s,J,this)){var et=ye(u,0,v,!0);if(et===A)return fe(!1);if(l=et,h=z(l),hn(V,u,A,d,l,h,s,!1)!==!1)return ke(),u.insertBefore(A,et),ee=u,Le(),fe(!0)}else if(l.parentNode===u){h=z(l);var Te=0,tt,kt=A.parentNode!==u,mt=!pa(A.animated&&A.toRect||d,l.animated&&l.toRect||h,J),we=J?"top":"left",He=X(l,"top","top")||X(A,"top","top"),wn=He?He.scrollTop:void 0;ht!==l&&(tt=h[we],Nt=!1,cn=!mt&&v.invertSwap||kt),Te=ya(s,l,h,J,mt?1:v.swapThreshold,v.invertedSwapThreshold==null?v.swapThreshold:v.invertedSwapThreshold,cn,ht===l);var Ie;if(Te!==0){var gt=Q(A);do gt-=Te,Ie=ee.children[gt];while(Ie&&(b(Ie,"display")==="none"||Ie===F))}if(Te===0||Ie===l)return fe(!1);ht=l,Dt=Te;var nt=l.nextElementSibling,Ue=!1;Ue=Te===1;var rt=hn(V,u,A,d,l,h,s,Ue);if(rt!==!1)return(rt===1||rt===-1)&&(Ue=rt===1),or=!0,setTimeout(va,30),ke(),Ue&&!nt?u.appendChild(A):l.parentNode.insertBefore(A,Ue?nt:l),He&&Oi(He,0,wn-He.scrollTop),ee=A.parentNode,tt!==void 0&&!cn&&(un=Math.abs(tt-z(l)[we])),Le(),fe(!0)}if(u.contains(A))return fe(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){x(document,"mousemove",this._onTouchMove),x(document,"touchmove",this._onTouchMove),x(document,"pointermove",this._onTouchMove),x(document,"dragover",Ze),x(document,"mousemove",Ze),x(document,"touchmove",Ze)},_offUpEvents:function(){var s=this.el.ownerDocument;x(s,"mouseup",this._onDrop),x(s,"touchend",this._onDrop),x(s,"pointerup",this._onDrop),x(s,"touchcancel",this._onDrop),x(document,"selectstart",this)},_onDrop:function(s){var u=this.el,l=this.options;if(ve=Q(A),je=Q(A,l.draggable),me("drop",this,{evt:s}),ee=A&&A.parentNode,ve=Q(A),je=Q(A,l.draggable),L.eventCanceled){this._nulling();return}pt=!1,cn=!1,Nt=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),ar(this.cloneId),ar(this._dragStartId),this.nativeDraggable&&(x(document,"drop",this),x(u,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),T&&b(document.body,"user-select",""),b(A,"transform",""),s&&(Tt&&(s.cancelable&&s.preventDefault(),!l.dropBubble&&s.stopPropagation()),F&&F.parentNode&&F.parentNode.removeChild(F),(V===ee||le&&le.lastPutMode!=="clone")&&Z&&Z.parentNode&&Z.parentNode.removeChild(Z),A&&(this.nativeDraggable&&x(A,"dragend",this),sr(A),A.style["will-change"]="",Tt&&!pt&&_(A,le?le.options.ghostClass:this.options.ghostClass,!1),_(A,this.options.chosenClass,!1),de({sortable:this,name:"unchoose",toEl:ee,newIndex:null,newDraggableIndex:null,originalEvent:s}),V!==ee?(ve>=0&&(de({rootEl:ee,name:"add",toEl:ee,fromEl:V,originalEvent:s}),de({sortable:this,name:"remove",toEl:ee,originalEvent:s}),de({rootEl:ee,name:"sort",toEl:ee,fromEl:V,originalEvent:s}),de({sortable:this,name:"sort",toEl:ee,originalEvent:s})),le&&le.save()):ve!==ft&&ve>=0&&(de({sortable:this,name:"update",toEl:ee,originalEvent:s}),de({sortable:this,name:"sort",toEl:ee,originalEvent:s})),L.active&&((ve==null||ve===-1)&&(ve=ft,je=Ot),de({sortable:this,name:"end",toEl:ee,originalEvent:s}),this.save()))),this._nulling()},_nulling:function(){me("nulling",this),V=A=ee=F=Ge=Z=on=$e=Qe=Ae=Tt=ve=je=ft=Ot=ht=Dt=le=sn=L.dragged=L.ghost=L.clone=L.active=null,dn.forEach(function(s){s.checked=!0}),dn.length=nr=rr=0},handleEvent:function(s){switch(s.type){case"drop":case"dragend":this._onDrop(s);break;case"dragenter":case"dragover":A&&(this._onDragOver(s),ga(s));break;case"selectstart":s.preventDefault();break}},toArray:function(){for(var s=[],u,l=this.el.children,d=0,h=l.length,g=this.options;d<h;d++)u=l[d],M(u,g.draggable,this.el,!1)&&s.push(u.getAttribute(g.dataIdAttr)||Ea(u));return s},sort:function(s,u){var l={},d=this.el;this.toArray().forEach(function(h,g){var v=d.children[g];M(v,this.options.draggable,d,!1)&&(l[h]=v)},this),u&&this.captureAnimationState(),s.forEach(function(h){l[h]&&(d.removeChild(l[h]),d.appendChild(l[h]))}),u&&this.animateAll()},save:function(){var s=this.options.store;s&&s.set&&s.set(this)},closest:function(s,u){return M(s,u||this.options.draggable,this.el,!1)},option:function(s,u){var l=this.options;if(u===void 0)return l[s];var d=Ct.modifyOption(this,s,u);typeof d<"u"?l[s]=d:l[s]=u,s==="group"&&Li(l)},destroy:function(){me("destroy",this);var s=this.el;s[ge]=null,x(s,"mousedown",this._onTapStart),x(s,"touchstart",this._onTapStart),x(s,"pointerdown",this._onTapStart),this.nativeDraggable&&(x(s,"dragover",this),x(s,"dragenter",this)),Array.prototype.forEach.call(s.querySelectorAll("[draggable]"),function(u){u.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),ln.splice(ln.indexOf(this.el),1),this.el=s=null},_hideClone:function(){if(!$e){if(me("hideClone",this),L.eventCanceled)return;b(Z,"display","none"),this.options.removeCloneOnHide&&Z.parentNode&&Z.parentNode.removeChild(Z),$e=!0}},_showClone:function(s){if(s.lastPutMode!=="clone"){this._hideClone();return}if($e){if(me("showClone",this),L.eventCanceled)return;A.parentNode==V&&!this.options.group.revertClone?V.insertBefore(Z,A):Ge?V.insertBefore(Z,Ge):V.appendChild(Z),this.options.group.revertClone&&this.animate(A,Z),b(Z,"display",""),$e=!1}}};function ga(s){s.dataTransfer&&(s.dataTransfer.dropEffect="move"),s.cancelable&&s.preventDefault()}function hn(s,u,l,d,h,g,v,O){var y,N=s[ge],P=N.options.onMove,I;return window.CustomEvent&&!p&&!m?y=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(y=document.createEvent("Event"),y.initEvent("move",!0,!0)),y.to=u,y.from=s,y.dragged=l,y.draggedRect=d,y.related=h||u,y.relatedRect=g||z(u),y.willInsertAfter=O,y.originalEvent=v,s.dispatchEvent(y),P&&(I=P.call(N,y,v)),I}function sr(s){s.draggable=!1}function va(){or=!1}function wa(s,u,l){var d=z(ye(l.el,0,l.options,!0)),h=10;return u?s.clientX<d.left-h||s.clientY<d.top&&s.clientX<d.right:s.clientY<d.top-h||s.clientY<d.bottom&&s.clientX<d.left}function ba(s,u,l){var d=z(xe(l.el,l.options.draggable)),h=10;return u?s.clientX>d.right+h||s.clientX<=d.right&&s.clientY>d.bottom&&s.clientX>=d.left:s.clientX>d.right&&s.clientY>d.top||s.clientX<=d.right&&s.clientY>d.bottom+h}function ya(s,u,l,d,h,g,v,O){var y=d?s.clientY:s.clientX,N=d?l.height:l.width,P=d?l.top:l.left,I=d?l.bottom:l.right,J=!1;if(!v){if(O&&un<N*h){if(!Nt&&(Dt===1?y>P+N*g/2:y<I-N*g/2)&&(Nt=!0),Nt)J=!0;else if(Dt===1?y<P+un:y>I-un)return-Dt}else if(y>P+N*(1-h)/2&&y<I-N*(1-h)/2)return _a(u)}return J=J||v,J&&(y<P+N*g/2||y>I-N*g/2)?y>P+N/2?1:-1:0}function _a(s){return Q(A)<Q(s)?1:-1}function Ea(s){for(var u=s.tagName+s.className+s.src+s.href+s.textContent,l=u.length,d=0;l--;)d+=u.charCodeAt(l);return d.toString(36)}function Sa(s){dn.length=0;for(var u=s.getElementsByTagName("input"),l=u.length;l--;){var d=u[l];d.checked&&dn.push(d)}}function mn(s){return setTimeout(s,0)}function ar(s){return clearTimeout(s)}fn&&E(document,"touchmove",function(s){(L.active||pt)&&s.cancelable&&s.preventDefault()}),L.utils={on:E,off:x,css:b,find:te,is:function(s,u){return!!M(s,u,s,!1)},extend:oa,throttle:Ci,closest:M,toggleClass:_,clone:Ti,index:Q,nextTick:mn,cancelNextTick:ar,detectDirection:ki,getChild:ye},L.get=function(s){return s[ge]},L.mount=function(){for(var s=arguments.length,u=new Array(s),l=0;l<s;l++)u[l]=arguments[l];u[0].constructor===Array&&(u=u[0]),u.forEach(function(d){if(!d.prototype||!d.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(d));d.utils&&(L.utils=t(t({},L.utils),d.utils)),Ct.mount(d)})},L.create=function(s,u){return new L(s,u)},L.version=c;var re=[],Rt,lr,cr=!1,ur,dr,gn,Pt;function xa(){function s(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var u in this)u.charAt(0)==="_"&&typeof this[u]=="function"&&(this[u]=this[u].bind(this))}return s.prototype={dragStarted:function(u){var l=u.originalEvent;this.sortable.nativeDraggable?E(document,"dragover",this._handleAutoScroll):this.options.supportPointer?E(document,"pointermove",this._handleFallbackAutoScroll):l.touches?E(document,"touchmove",this._handleFallbackAutoScroll):E(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(u){var l=u.originalEvent;!this.options.dragOverBubble&&!l.rootEl&&this._handleAutoScroll(l)},drop:function(){this.sortable.nativeDraggable?x(document,"dragover",this._handleAutoScroll):(x(document,"pointermove",this._handleFallbackAutoScroll),x(document,"touchmove",this._handleFallbackAutoScroll),x(document,"mousemove",this._handleFallbackAutoScroll)),Mi(),vn(),sa()},nulling:function(){gn=lr=Rt=cr=Pt=ur=dr=null,re.length=0},_handleFallbackAutoScroll:function(u){this._handleAutoScroll(u,!0)},_handleAutoScroll:function(u,l){var d=this,h=(u.touches?u.touches[0]:u).clientX,g=(u.touches?u.touches[0]:u).clientY,v=document.elementFromPoint(h,g);if(gn=u,l||this.options.forceAutoScrollFallback||m||p||T){fr(u,this.options,v,l);var O=Be(v,!0);cr&&(!Pt||h!==ur||g!==dr)&&(Pt&&Mi(),Pt=setInterval(function(){var y=Be(document.elementFromPoint(h,g),!0);y!==O&&(O=y,vn()),fr(u,d.options,y,l)},10),ur=h,dr=g)}else{if(!this.options.bubbleScroll||Be(v,!0)===Y()){vn();return}fr(u,this.options,Be(v,!1),!1)}}},i(s,{pluginName:"scroll",initializeByDefault:!0})}function vn(){re.forEach(function(s){clearInterval(s.pid)}),re=[]}function Mi(){clearInterval(Pt)}var fr=Ci(function(s,u,l,d){if(u.scroll){var h=(s.touches?s.touches[0]:s).clientX,g=(s.touches?s.touches[0]:s).clientY,v=u.scrollSensitivity,O=u.scrollSpeed,y=Y(),N=!1,P;lr!==l&&(lr=l,vn(),Rt=u.scroll,P=u.scrollFn,Rt===!0&&(Rt=Be(l,!0)));var I=0,J=Rt;do{var B=J,oe=z(B),K=oe.top,ke=oe.bottom,fe=oe.left,Le=oe.right,ue=oe.width,et=oe.height,Te=void 0,tt=void 0,kt=B.scrollWidth,mt=B.scrollHeight,we=b(B),He=B.scrollLeft,wn=B.scrollTop;B===y?(Te=ue<kt&&(we.overflowX==="auto"||we.overflowX==="scroll"||we.overflowX==="visible"),tt=et<mt&&(we.overflowY==="auto"||we.overflowY==="scroll"||we.overflowY==="visible")):(Te=ue<kt&&(we.overflowX==="auto"||we.overflowX==="scroll"),tt=et<mt&&(we.overflowY==="auto"||we.overflowY==="scroll"));var Ie=Te&&(Math.abs(Le-h)<=v&&He+ue<kt)-(Math.abs(fe-h)<=v&&!!He),gt=tt&&(Math.abs(ke-g)<=v&&wn+et<mt)-(Math.abs(K-g)<=v&&!!wn);if(!re[I])for(var nt=0;nt<=I;nt++)re[nt]||(re[nt]={});(re[I].vx!=Ie||re[I].vy!=gt||re[I].el!==B)&&(re[I].el=B,re[I].vx=Ie,re[I].vy=gt,clearInterval(re[I].pid),(Ie!=0||gt!=0)&&(N=!0,re[I].pid=setInterval((function(){d&&this.layer===0&&L.active._onTouchMove(gn);var Ue=re[this.layer].vy?re[this.layer].vy*O:0,rt=re[this.layer].vx?re[this.layer].vx*O:0;typeof P=="function"&&P.call(L.dragged.parentNode[ge],rt,Ue,s,gn,re[this.layer].el)!=="continue"||Oi(re[this.layer].el,rt,Ue)}).bind({layer:I}),24))),I++}while(u.bubbleScroll&&J!==y&&(J=Be(J,!1)));cr=N}},30),Bi=function(s){var u=s.originalEvent,l=s.putSortable,d=s.dragEl,h=s.activeSortable,g=s.dispatchSortableEvent,v=s.hideGhostForTarget,O=s.unhideGhostForTarget;if(u){var y=l||h;v();var N=u.changedTouches&&u.changedTouches.length?u.changedTouches[0]:u,P=document.elementFromPoint(N.clientX,N.clientY);O(),y&&!y.el.contains(P)&&(g("spill"),this.onSpill({dragEl:d,putSortable:l}))}};function pr(){}pr.prototype={startIndex:null,dragStart:function(s){var u=s.oldDraggableIndex;this.startIndex=u},onSpill:function(s){var u=s.dragEl,l=s.putSortable;this.sortable.captureAnimationState(),l&&l.captureAnimationState();var d=ye(this.sortable.el,this.startIndex,this.options);d?this.sortable.el.insertBefore(u,d):this.sortable.el.appendChild(u),this.sortable.animateAll(),l&&l.animateAll()},drop:Bi},i(pr,{pluginName:"revertOnSpill"});function hr(){}hr.prototype={onSpill:function(s){var u=s.dragEl,l=s.putSortable,d=l||this.sortable;d.captureAnimationState(),u.parentNode&&u.parentNode.removeChild(u),d.animateAll()},drop:Bi},i(hr,{pluginName:"removeOnSpill"}),L.mount(new xa),L.mount(hr,pr);var Aa=L;if(window.Sortable=Aa,typeof window.Livewire>"u")throw"Livewire Sortable.js Plugin: window.Livewire is undefined. Make sure @livewireScripts is placed above this script include";window.Livewire.directive("sortable",(s,u,l)=>{if(u.modifiers.length>0)return;let d={};s.hasAttribute("wire:sortable.options")&&(d=new Function(`return ${s.getAttribute("wire:sortable.options")};`)()),s.livewire_sortable=window.Sortable.create(s,{...d,draggable:"[wire\\:sortable\\.item]",handle:s.querySelector("[wire\\:sortable\\.handle]")?"[wire\\:sortable\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable.item",group:{name:s.getAttribute("wire:sortable"),pull:!1,put:!1},store:{set:function(h){let g=h.toArray().map((v,O)=>({order:O+1,value:v}));l.call(u.method,g)}}})}),window.Livewire.directive("sortable-group",(s,u,l)=>{if(!u.modifiers.includes("item-group"))return;let d={};s.hasAttribute("wire:sortable-group.options")&&(d=new Function(`return ${s.getAttribute("wire:sortable-group.options")};`)()),s.livewire_sortable=window.Sortable.create(s,{...d,draggable:"[wire\\:sortable-group\\.item]",handle:s.querySelector("[wire\\:sortable-group\\.handle]")?"[wire\\:sortable-group\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable-group.item",group:{name:s.closest("[wire\\:sortable-group]").getAttribute("wire:sortable-group"),pull:!0,put:!0},onSort:()=>{let h=s.closest("[wire\\:sortable-group]"),g=Array.from(h.querySelectorAll("[wire\\:sortable-group\\.item-group]")).map((v,O)=>({order:O+1,value:v.getAttribute("wire:sortable-group.item-group"),items:v.livewire_sortable.toArray().map((y,N)=>({order:N+1,value:y}))}));l.call(h.getAttribute("wire:sortable-group"),g)}})})})();/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */var Ir=!1,Fr=!1,at=[],Mr=-1;function rc(e){ic(e)}function ic(e){at.includes(e)||at.push(e),oc()}function Lo(e){let t=at.indexOf(e);t!==-1&&t>Mr&&at.splice(t,1)}function oc(){!Fr&&!Ir&&(Ir=!0,queueMicrotask(sc))}function sc(){Ir=!1,Fr=!0;for(let e=0;e<at.length;e++)at[e](),Mr=e;at.length=0,Mr=-1,Fr=!1}var Et,St,Zt,Io,Br=!0;function ac(e){Br=!1,e(),Br=!0}function lc(e){Et=e.reactive,Zt=e.release,St=t=>e.effect(t,{scheduler:n=>{Br?rc(n):n()}}),Io=e.raw}function Qi(e){St=e}function cc(e){let t=()=>{};return[r=>{let i=St(r);return e._x_effects||(e._x_effects=new Set,e._x_runEffects=()=>{e._x_effects.forEach(o=>o())}),e._x_effects.add(i),t=()=>{i!==void 0&&(e._x_effects.delete(i),Zt(i))},i},()=>{t()}]}var Fo=[],Mo=[],Bo=[];function uc(e){Bo.push(e)}function $o(e,t){typeof t=="function"?(e._x_cleanups||(e._x_cleanups=[]),e._x_cleanups.push(t)):(t=e,Mo.push(t))}function dc(e){Fo.push(e)}function fc(e,t,n){e._x_attributeCleanups||(e._x_attributeCleanups={}),e._x_attributeCleanups[t]||(e._x_attributeCleanups[t]=[]),e._x_attributeCleanups[t].push(n)}function jo(e,t){e._x_attributeCleanups&&Object.entries(e._x_attributeCleanups).forEach(([n,r])=>{(t===void 0||t.includes(n))&&(r.forEach(i=>i()),delete e._x_attributeCleanups[n])})}var ii=new MutationObserver(li),oi=!1;function si(){ii.observe(document,{subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0}),oi=!0}function Ho(){pc(),ii.disconnect(),oi=!1}var jt=[],Er=!1;function pc(){jt=jt.concat(ii.takeRecords()),jt.length&&!Er&&(Er=!0,queueMicrotask(()=>{hc(),Er=!1}))}function hc(){li(jt),jt.length=0}function ae(e){if(!oi)return e();Ho();let t=e();return si(),t}var ai=!1,Tn=[];function mc(){ai=!0}function gc(){ai=!1,li(Tn),Tn=[]}function li(e){if(ai){Tn=Tn.concat(e);return}let t=[],n=[],r=new Map,i=new Map;for(let o=0;o<e.length;o++)if(!e[o].target._x_ignoreMutationObserver&&(e[o].type==="childList"&&(e[o].addedNodes.forEach(a=>a.nodeType===1&&t.push(a)),e[o].removedNodes.forEach(a=>a.nodeType===1&&n.push(a))),e[o].type==="attributes")){let a=e[o].target,c=e[o].attributeName,f=e[o].oldValue,p=()=>{r.has(a)||r.set(a,[]),r.get(a).push({name:c,value:a.getAttribute(c)})},m=()=>{i.has(a)||i.set(a,[]),i.get(a).push(c)};a.hasAttribute(c)&&f===null?p():a.hasAttribute(c)?(m(),p()):m()}i.forEach((o,a)=>{jo(a,o)}),r.forEach((o,a)=>{Fo.forEach(c=>c(a,o))});for(let o of n)if(!t.includes(o)&&(Mo.forEach(a=>a(o)),o._x_cleanups))for(;o._x_cleanups.length;)o._x_cleanups.pop()();t.forEach(o=>{o._x_ignoreSelf=!0,o._x_ignore=!0});for(let o of t)n.includes(o)||o.isConnected&&(delete o._x_ignoreSelf,delete o._x_ignore,Bo.forEach(a=>a(o)),o._x_ignore=!0,o._x_ignoreSelf=!0);t.forEach(o=>{delete o._x_ignoreSelf,delete o._x_ignore}),t=null,n=null,r=null,i=null}function Uo(e){return tn(bt(e))}function en(e,t,n){return e._x_dataStack=[t,...bt(n||e)],()=>{e._x_dataStack=e._x_dataStack.filter(r=>r!==t)}}function bt(e){return e._x_dataStack?e._x_dataStack:typeof ShadowRoot=="function"&&e instanceof ShadowRoot?bt(e.host):e.parentNode?bt(e.parentNode):[]}function tn(e){let t=new Proxy({},{ownKeys:()=>Array.from(new Set(e.flatMap(n=>Object.keys(n)))),has:(n,r)=>e.some(i=>i.hasOwnProperty(r)),get:(n,r)=>(e.find(i=>{if(i.hasOwnProperty(r)){let o=Object.getOwnPropertyDescriptor(i,r);if(o.get&&o.get._x_alreadyBound||o.set&&o.set._x_alreadyBound)return!0;if((o.get||o.set)&&o.enumerable){let a=o.get,c=o.set,f=o;a=a&&a.bind(t),c=c&&c.bind(t),a&&(a._x_alreadyBound=!0),c&&(c._x_alreadyBound=!0),Object.defineProperty(i,r,{...f,get:a,set:c})}return!0}return!1})||{})[r],set:(n,r,i)=>{let o=e.find(a=>a.hasOwnProperty(r));return o?o[r]=i:e[e.length-1][r]=i,!0}});return t}function Wo(e){let t=r=>typeof r=="object"&&!Array.isArray(r)&&r!==null,n=(r,i="")=>{Object.entries(Object.getOwnPropertyDescriptors(r)).forEach(([o,{value:a,enumerable:c}])=>{if(c===!1||a===void 0)return;let f=i===""?o:`${i}.${o}`;typeof a=="object"&&a!==null&&a._x_interceptor?r[o]=a.initialize(e,f,o):t(a)&&a!==r&&!(a instanceof Element)&&n(a,f)})};return n(e)}function qo(e,t=()=>{}){let n={initialValue:void 0,_x_interceptor:!0,initialize(r,i,o){return e(this.initialValue,()=>vc(r,i),a=>$r(r,i,a),i,o)}};return t(n),r=>{if(typeof r=="object"&&r!==null&&r._x_interceptor){let i=n.initialize.bind(n);n.initialize=(o,a,c)=>{let f=r.initialize(o,a,c);return n.initialValue=f,i(o,a,c)}}else n.initialValue=r;return n}}function vc(e,t){return t.split(".").reduce((n,r)=>n[r],e)}function $r(e,t,n){if(typeof t=="string"&&(t=t.split(".")),t.length===1)e[t[0]]=n;else{if(t.length===0)throw error;return e[t[0]]||(e[t[0]]={}),$r(e[t[0]],t.slice(1),n)}}var zo={};function Oe(e,t){zo[e]=t}function jr(e,t){return Object.entries(zo).forEach(([n,r])=>{let i=null;function o(){if(i)return i;{let[a,c]=Go(t);return i={interceptor:qo,...a},$o(t,c),i}}Object.defineProperty(e,`$${n}`,{get(){return r(t,o())},enumerable:!1})}),e}function wc(e,t,n,...r){try{return n(...r)}catch(i){zt(i,e,t)}}function zt(e,t,n=void 0){Object.assign(e,{el:t,expression:n}),console.warn(`Alpine Expression Error: ${e.message}

${n?'Expression: "'+n+`"

`:""}`,t),setTimeout(()=>{throw e},0)}var Cn=!0;function Ko(e){let t=Cn;Cn=!1;let n=e();return Cn=t,n}function lt(e,t,n={}){let r;return he(e,t)(i=>r=i,n),r}function he(...e){return Xo(...e)}var Xo=Yo;function bc(e){Xo=e}function Yo(e,t){let n={};jr(n,e);let r=[n,...bt(e)],i=typeof t=="function"?yc(r,t):Ec(r,t,e);return wc.bind(null,e,t,i)}function yc(e,t){return(n=()=>{},{scope:r={},params:i=[]}={})=>{let o=t.apply(tn([r,...e]),i);Dn(n,o)}}var Sr={};function _c(e,t){if(Sr[e])return Sr[e];let n=Object.getPrototypeOf(async function(){}).constructor,r=/^[\n\s]*if.*\(.*\)/.test(e)||/^(let|const)\s/.test(e)?`(async()=>{ ${e} })()`:e,o=(()=>{try{return new n(["__self","scope"],`with (scope) { __self.result = ${r} }; __self.finished = true; return __self.result;`)}catch(a){return zt(a,t,e),Promise.resolve()}})();return Sr[e]=o,o}function Ec(e,t,n){let r=_c(t,n);return(i=()=>{},{scope:o={},params:a=[]}={})=>{r.result=void 0,r.finished=!1;let c=tn([o,...e]);if(typeof r=="function"){let f=r(r,c).catch(p=>zt(p,n,t));r.finished?(Dn(i,r.result,c,a,n),r.result=void 0):f.then(p=>{Dn(i,p,c,a,n)}).catch(p=>zt(p,n,t)).finally(()=>r.result=void 0)}}}function Dn(e,t,n,r,i){if(Cn&&typeof t=="function"){let o=t.apply(n,r);o instanceof Promise?o.then(a=>Dn(e,a,n,r)).catch(a=>zt(a,i,t)):e(o)}else typeof t=="object"&&t instanceof Promise?t.then(o=>e(o)):e(t)}var ci="x-";function xt(e=""){return ci+e}function Sc(e){ci=e}var Hr={};function ie(e,t){return Hr[e]=t,{before(n){if(!Hr[n]){console.warn("Cannot find directive `${directive}`. `${name}` will use the default order of execution");return}const r=ot.indexOf(n);ot.splice(r>=0?r:ot.indexOf("DEFAULT"),0,e)}}}function ui(e,t,n){if(t=Array.from(t),e._x_virtualDirectives){let o=Object.entries(e._x_virtualDirectives).map(([c,f])=>({name:c,value:f})),a=Vo(o);o=o.map(c=>a.find(f=>f.name===c.name)?{name:`x-bind:${c.name}`,value:`"${c.value}"`}:c),t=t.concat(o)}let r={};return t.map(es((o,a)=>r[o]=a)).filter(ns).map(Cc(r,n)).sort(Oc).map(o=>Ac(e,o))}function Vo(e){return Array.from(e).map(es()).filter(t=>!ns(t))}var Ur=!1,$t=new Map,Jo=Symbol();function xc(e){Ur=!0;let t=Symbol();Jo=t,$t.set(t,[]);let n=()=>{for(;$t.get(t).length;)$t.get(t).shift()();$t.delete(t)},r=()=>{Ur=!1,n()};e(n),r()}function Go(e){let t=[],n=c=>t.push(c),[r,i]=cc(e);return t.push(i),[{Alpine:rn,effect:r,cleanup:n,evaluateLater:he.bind(he,e),evaluate:lt.bind(lt,e)},()=>t.forEach(c=>c())]}function Ac(e,t){let n=()=>{},r=Hr[t.type]||n,[i,o]=Go(e);fc(e,t.original,o);let a=()=>{e._x_ignore||e._x_ignoreSelf||(r.inline&&r.inline(e,t,i),r=r.bind(r,e,t,i),Ur?$t.get(Jo).push(r):r())};return a.runCleanups=o,a}var Qo=(e,t)=>({name:n,value:r})=>(n.startsWith(e)&&(n=n.replace(e,t)),{name:n,value:r}),Zo=e=>e;function es(e=()=>{}){return({name:t,value:n})=>{let{name:r,value:i}=ts.reduce((o,a)=>a(o),{name:t,value:n});return r!==t&&e(r,t),{name:r,value:i}}}var ts=[];function di(e){ts.push(e)}function ns({name:e}){return rs().test(e)}var rs=()=>new RegExp(`^${ci}([^:^.]+)\\b`);function Cc(e,t){return({name:n,value:r})=>{let i=n.match(rs()),o=n.match(/:([a-zA-Z0-9\-:]+)/),a=n.match(/\.[^.\]]+(?=[^\]]*$)/g)||[],c=t||e[n]||n;return{type:i?i[1]:null,value:o?o[1]:null,modifiers:a.map(f=>f.replace(".","")),expression:r,original:c}}}var Wr="DEFAULT",ot=["ignore","ref","data","id","bind","init","for","model","modelable","transition","show","if",Wr,"teleport"];function Oc(e,t){let n=ot.indexOf(e.type)===-1?Wr:e.type,r=ot.indexOf(t.type)===-1?Wr:t.type;return ot.indexOf(n)-ot.indexOf(r)}function Ht(e,t,n={}){e.dispatchEvent(new CustomEvent(t,{detail:n,bubbles:!0,composed:!0,cancelable:!0}))}function Ke(e,t){if(typeof ShadowRoot=="function"&&e instanceof ShadowRoot){Array.from(e.children).forEach(i=>Ke(i,t));return}let n=!1;if(t(e,()=>n=!0),n)return;let r=e.firstElementChild;for(;r;)Ke(r,t),r=r.nextElementSibling}function Xe(e,...t){console.warn(`Alpine Warning: ${e}`,...t)}var Zi=!1;function Tc(){Zi&&Xe("Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems."),Zi=!0,document.body||Xe("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?"),Ht(document,"alpine:init"),Ht(document,"alpine:initializing"),si(),uc(t=>Ye(t,Ke)),$o(t=>us(t)),dc((t,n)=>{ui(t,n).forEach(r=>r())});let e=t=>!Un(t.parentElement,!0);Array.from(document.querySelectorAll(ss())).filter(e).forEach(t=>{Ye(t)}),Ht(document,"alpine:initialized")}var fi=[],is=[];function os(){return fi.map(e=>e())}function ss(){return fi.concat(is).map(e=>e())}function as(e){fi.push(e)}function ls(e){is.push(e)}function Un(e,t=!1){return Wn(e,n=>{if((t?ss():os()).some(i=>n.matches(i)))return!0})}function Wn(e,t){if(e){if(t(e))return e;if(e._x_teleportBack&&(e=e._x_teleportBack),!!e.parentElement)return Wn(e.parentElement,t)}}function Dc(e){return os().some(t=>e.matches(t))}var cs=[];function Nc(e){cs.push(e)}function Ye(e,t=Ke,n=()=>{}){xc(()=>{t(e,(r,i)=>{n(r,i),cs.forEach(o=>o(r,i)),ui(r,r.attributes).forEach(o=>o()),r._x_ignore&&i()})})}function us(e){Ke(e,t=>jo(t))}var qr=[],pi=!1;function hi(e=()=>{}){return queueMicrotask(()=>{pi||setTimeout(()=>{zr()})}),new Promise(t=>{qr.push(()=>{e(),t()})})}function zr(){for(pi=!1;qr.length;)qr.shift()()}function Rc(){pi=!0}function mi(e,t){return Array.isArray(t)?eo(e,t.join(" ")):typeof t=="object"&&t!==null?Pc(e,t):typeof t=="function"?mi(e,t()):eo(e,t)}function eo(e,t){let n=i=>i.split(" ").filter(o=>!e.classList.contains(o)).filter(Boolean),r=i=>(e.classList.add(...i),()=>{e.classList.remove(...i)});return t=t===!0?t="":t||"",r(n(t))}function Pc(e,t){let n=c=>c.split(" ").filter(Boolean),r=Object.entries(t).flatMap(([c,f])=>f?n(c):!1).filter(Boolean),i=Object.entries(t).flatMap(([c,f])=>f?!1:n(c)).filter(Boolean),o=[],a=[];return i.forEach(c=>{e.classList.contains(c)&&(e.classList.remove(c),a.push(c))}),r.forEach(c=>{e.classList.contains(c)||(e.classList.add(c),o.push(c))}),()=>{a.forEach(c=>e.classList.add(c)),o.forEach(c=>e.classList.remove(c))}}function qn(e,t){return typeof t=="object"&&t!==null?kc(e,t):Lc(e,t)}function kc(e,t){let n={};return Object.entries(t).forEach(([r,i])=>{n[r]=e.style[r],r.startsWith("--")||(r=Ic(r)),e.style.setProperty(r,i)}),setTimeout(()=>{e.style.length===0&&e.removeAttribute("style")}),()=>{qn(e,n)}}function Lc(e,t){let n=e.getAttribute("style",t);return e.setAttribute("style",t),()=>{e.setAttribute("style",n||"")}}function Ic(e){return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function Kr(e,t=()=>{}){let n=!1;return function(){n?t.apply(this,arguments):(n=!0,e.apply(this,arguments))}}ie("transition",(e,{value:t,modifiers:n,expression:r},{evaluate:i})=>{typeof r=="function"&&(r=i(r)),r!==!1&&(!r||typeof r=="boolean"?Mc(e,n,t):Fc(e,r,t))});function Fc(e,t,n){ds(e,mi,""),{enter:i=>{e._x_transition.enter.during=i},"enter-start":i=>{e._x_transition.enter.start=i},"enter-end":i=>{e._x_transition.enter.end=i},leave:i=>{e._x_transition.leave.during=i},"leave-start":i=>{e._x_transition.leave.start=i},"leave-end":i=>{e._x_transition.leave.end=i}}[n](t)}function Mc(e,t,n){ds(e,qn);let r=!t.includes("in")&&!t.includes("out")&&!n,i=r||t.includes("in")||["enter"].includes(n),o=r||t.includes("out")||["leave"].includes(n);t.includes("in")&&!r&&(t=t.filter((x,H)=>H<t.indexOf("out"))),t.includes("out")&&!r&&(t=t.filter((x,H)=>H>t.indexOf("out")));let a=!t.includes("opacity")&&!t.includes("scale"),c=a||t.includes("opacity"),f=a||t.includes("scale"),p=c?0:1,m=f?Ft(t,"scale",95)/100:1,S=Ft(t,"delay",0)/1e3,T=Ft(t,"origin","center"),D="opacity, transform",C=Ft(t,"duration",150)/1e3,R=Ft(t,"duration",75)/1e3,E="cubic-bezier(0.4, 0.0, 0.2, 1)";i&&(e._x_transition.enter.during={transformOrigin:T,transitionDelay:`${S}s`,transitionProperty:D,transitionDuration:`${C}s`,transitionTimingFunction:E},e._x_transition.enter.start={opacity:p,transform:`scale(${m})`},e._x_transition.enter.end={opacity:1,transform:"scale(1)"}),o&&(e._x_transition.leave.during={transformOrigin:T,transitionDelay:`${S}s`,transitionProperty:D,transitionDuration:`${R}s`,transitionTimingFunction:E},e._x_transition.leave.start={opacity:1,transform:"scale(1)"},e._x_transition.leave.end={opacity:p,transform:`scale(${m})`})}function ds(e,t,n={}){e._x_transition||(e._x_transition={enter:{during:n,start:n,end:n},leave:{during:n,start:n,end:n},in(r=()=>{},i=()=>{}){Xr(e,t,{during:this.enter.during,start:this.enter.start,end:this.enter.end},r,i)},out(r=()=>{},i=()=>{}){Xr(e,t,{during:this.leave.during,start:this.leave.start,end:this.leave.end},r,i)}})}window.Element.prototype._x_toggleAndCascadeWithTransitions=function(e,t,n,r){const i=document.visibilityState==="visible"?requestAnimationFrame:setTimeout;let o=()=>i(n);if(t){e._x_transition&&(e._x_transition.enter||e._x_transition.leave)?e._x_transition.enter&&(Object.entries(e._x_transition.enter.during).length||Object.entries(e._x_transition.enter.start).length||Object.entries(e._x_transition.enter.end).length)?e._x_transition.in(n):o():e._x_transition?e._x_transition.in(n):o();return}e._x_hidePromise=e._x_transition?new Promise((a,c)=>{e._x_transition.out(()=>{},()=>a(r)),e._x_transitioning.beforeCancel(()=>c({isFromCancelledTransition:!0}))}):Promise.resolve(r),queueMicrotask(()=>{let a=fs(e);a?(a._x_hideChildren||(a._x_hideChildren=[]),a._x_hideChildren.push(e)):i(()=>{let c=f=>{let p=Promise.all([f._x_hidePromise,...(f._x_hideChildren||[]).map(c)]).then(([m])=>m());return delete f._x_hidePromise,delete f._x_hideChildren,p};c(e).catch(f=>{if(!f.isFromCancelledTransition)throw f})})})};function fs(e){let t=e.parentNode;if(t)return t._x_hidePromise?t:fs(t)}function Xr(e,t,{during:n,start:r,end:i}={},o=()=>{},a=()=>{}){if(e._x_transitioning&&e._x_transitioning.cancel(),Object.keys(n).length===0&&Object.keys(r).length===0&&Object.keys(i).length===0){o(),a();return}let c,f,p;Bc(e,{start(){c=t(e,r)},during(){f=t(e,n)},before:o,end(){c(),p=t(e,i)},after:a,cleanup(){f(),p()}})}function Bc(e,t){let n,r,i,o=Kr(()=>{ae(()=>{n=!0,r||t.before(),i||(t.end(),zr()),t.after(),e.isConnected&&t.cleanup(),delete e._x_transitioning})});e._x_transitioning={beforeCancels:[],beforeCancel(a){this.beforeCancels.push(a)},cancel:Kr(function(){for(;this.beforeCancels.length;)this.beforeCancels.shift()();o()}),finish:o},ae(()=>{t.start(),t.during()}),Rc(),requestAnimationFrame(()=>{if(n)return;let a=Number(getComputedStyle(e).transitionDuration.replace(/,.*/,"").replace("s",""))*1e3,c=Number(getComputedStyle(e).transitionDelay.replace(/,.*/,"").replace("s",""))*1e3;a===0&&(a=Number(getComputedStyle(e).animationDuration.replace("s",""))*1e3),ae(()=>{t.before()}),r=!0,requestAnimationFrame(()=>{n||(ae(()=>{t.end()}),zr(),setTimeout(e._x_transitioning.finish,a+c),i=!0)})})}function Ft(e,t,n){if(e.indexOf(t)===-1)return n;const r=e[e.indexOf(t)+1];if(!r||t==="scale"&&isNaN(r))return n;if(t==="duration"||t==="delay"){let i=r.match(/([0-9]+)ms/);if(i)return i[1]}return t==="origin"&&["top","right","left","center","bottom"].includes(e[e.indexOf(t)+2])?[r,e[e.indexOf(t)+2]].join(" "):r}var Kt=!1;function nn(e,t=()=>{}){return(...n)=>Kt?t(...n):e(...n)}function $c(e){return(...t)=>Kt&&e(...t)}function jc(e,t){t._x_dataStack||(t._x_dataStack=e._x_dataStack),Kt=!0,Uc(()=>{Hc(t)}),Kt=!1}function Hc(e){let t=!1;Ye(e,(r,i)=>{Ke(r,(o,a)=>{if(t&&Dc(o))return a();t=!0,i(o,a)})})}function Uc(e){let t=St;Qi((n,r)=>{let i=t(n);return Zt(i),()=>{}}),e(),Qi(t)}function ps(e,t,n,r=[]){switch(e._x_bindings||(e._x_bindings=Et({})),e._x_bindings[t]=n,t=r.includes("camel")?Jc(t):t,t){case"value":Wc(e,n);break;case"style":zc(e,n);break;case"class":qc(e,n);break;case"selected":case"checked":Kc(e,t,n);break;default:hs(e,t,n);break}}function Wc(e,t){if(e.type==="radio")e.attributes.value===void 0&&(e.value=t),window.fromModel&&(e.checked=to(e.value,t));else if(e.type==="checkbox")Number.isInteger(t)?e.value=t:!Number.isInteger(t)&&!Array.isArray(t)&&typeof t!="boolean"&&![null,void 0].includes(t)?e.value=String(t):Array.isArray(t)?e.checked=t.some(n=>to(n,e.value)):e.checked=!!t;else if(e.tagName==="SELECT")Vc(e,t);else{if(e.value===t)return;e.value=t}}function qc(e,t){e._x_undoAddedClasses&&e._x_undoAddedClasses(),e._x_undoAddedClasses=mi(e,t)}function zc(e,t){e._x_undoAddedStyles&&e._x_undoAddedStyles(),e._x_undoAddedStyles=qn(e,t)}function Kc(e,t,n){hs(e,t,n),Yc(e,t,n)}function hs(e,t,n){[null,void 0,!1].includes(n)&&Gc(t)?e.removeAttribute(t):(ms(t)&&(n=t),Xc(e,t,n))}function Xc(e,t,n){e.getAttribute(t)!=n&&e.setAttribute(t,n)}function Yc(e,t,n){e[t]!==n&&(e[t]=n)}function Vc(e,t){const n=[].concat(t).map(r=>r+"");Array.from(e.options).forEach(r=>{r.selected=n.includes(r.value)})}function Jc(e){return e.toLowerCase().replace(/-(\w)/g,(t,n)=>n.toUpperCase())}function to(e,t){return e==t}function ms(e){return["disabled","checked","required","readonly","hidden","open","selected","autofocus","itemscope","multiple","novalidate","allowfullscreen","allowpaymentrequest","formnovalidate","autoplay","controls","loop","muted","playsinline","default","ismap","reversed","async","defer","nomodule"].includes(e)}function Gc(e){return!["aria-pressed","aria-checked","aria-expanded","aria-selected"].includes(e)}function Qc(e,t,n){return e._x_bindings&&e._x_bindings[t]!==void 0?e._x_bindings[t]:gs(e,t,n)}function Zc(e,t,n,r=!0){if(e._x_bindings&&e._x_bindings[t]!==void 0)return e._x_bindings[t];if(e._x_inlineBindings&&e._x_inlineBindings[t]!==void 0){let i=e._x_inlineBindings[t];return i.extract=r,Ko(()=>lt(e,i.expression))}return gs(e,t,n)}function gs(e,t,n){let r=e.getAttribute(t);return r===null?typeof n=="function"?n():n:r===""?!0:ms(t)?!![t,"true"].includes(r):r}function vs(e,t){var n;return function(){var r=this,i=arguments,o=function(){n=null,e.apply(r,i)};clearTimeout(n),n=setTimeout(o,t)}}function ws(e,t){let n;return function(){let r=this,i=arguments;n||(e.apply(r,i),n=!0,setTimeout(()=>n=!1,t))}}function eu(e){(Array.isArray(e)?e:[e]).forEach(n=>n(rn))}var it={},no=!1;function tu(e,t){if(no||(it=Et(it),no=!0),t===void 0)return it[e];it[e]=t,typeof t=="object"&&t!==null&&t.hasOwnProperty("init")&&typeof t.init=="function"&&it[e].init(),Wo(it[e])}function nu(){return it}var bs={};function ru(e,t){let n=typeof t!="function"?()=>t:t;e instanceof Element?ys(e,n()):bs[e]=n}function iu(e){return Object.entries(bs).forEach(([t,n])=>{Object.defineProperty(e,t,{get(){return(...r)=>n(...r)}})}),e}function ys(e,t,n){let r=[];for(;r.length;)r.pop()();let i=Object.entries(t).map(([a,c])=>({name:a,value:c})),o=Vo(i);i=i.map(a=>o.find(c=>c.name===a.name)?{name:`x-bind:${a.name}`,value:`"${a.value}"`}:a),ui(e,i,n).map(a=>{r.push(a.runCleanups),a()})}var _s={};function ou(e,t){_s[e]=t}function su(e,t){return Object.entries(_s).forEach(([n,r])=>{Object.defineProperty(e,n,{get(){return(...i)=>r.bind(t)(...i)},enumerable:!1})}),e}var au={get reactive(){return Et},get release(){return Zt},get effect(){return St},get raw(){return Io},version:"3.12.3",flushAndStopDeferringMutations:gc,dontAutoEvaluateFunctions:Ko,disableEffectScheduling:ac,startObservingMutations:si,stopObservingMutations:Ho,setReactivityEngine:lc,closestDataStack:bt,skipDuringClone:nn,onlyDuringClone:$c,addRootSelector:as,addInitSelector:ls,addScopeToNode:en,deferMutations:mc,mapAttributes:di,evaluateLater:he,interceptInit:Nc,setEvaluator:bc,mergeProxies:tn,extractProp:Zc,findClosest:Wn,closestRoot:Un,destroyTree:us,interceptor:qo,transition:Xr,setStyles:qn,mutateDom:ae,directive:ie,throttle:ws,debounce:vs,evaluate:lt,initTree:Ye,nextTick:hi,prefixed:xt,prefix:Sc,plugin:eu,magic:Oe,store:tu,start:Tc,clone:jc,bound:Qc,$data:Uo,walk:Ke,data:ou,bind:ru},rn=au;function lu(e,t){const n=Object.create(null),r=e.split(",");for(let i=0;i<r.length;i++)n[r[i]]=!0;return t?i=>!!n[i.toLowerCase()]:i=>!!n[i]}var cu=Object.freeze({}),Es=Object.assign,uu=Object.prototype.hasOwnProperty,zn=(e,t)=>uu.call(e,t),ct=Array.isArray,Ut=e=>Ss(e)==="[object Map]",du=e=>typeof e=="string",gi=e=>typeof e=="symbol",Kn=e=>e!==null&&typeof e=="object",fu=Object.prototype.toString,Ss=e=>fu.call(e),xs=e=>Ss(e).slice(8,-1),vi=e=>du(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,pu=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},hu=pu(e=>e.charAt(0).toUpperCase()+e.slice(1)),As=(e,t)=>e!==t&&(e===e||t===t),Yr=new WeakMap,Mt=[],De,ut=Symbol("iterate"),Vr=Symbol("Map key iterate");function mu(e){return e&&e._isEffect===!0}function gu(e,t=cu){mu(e)&&(e=e.raw);const n=bu(e,t);return t.lazy||n(),n}function vu(e){e.active&&(Cs(e),e.options.onStop&&e.options.onStop(),e.active=!1)}var wu=0;function bu(e,t){const n=function(){if(!n.active)return e();if(!Mt.includes(n)){Cs(n);try{return _u(),Mt.push(n),De=n,e()}finally{Mt.pop(),Os(),De=Mt[Mt.length-1]}}};return n.id=wu++,n.allowRecurse=!!t.allowRecurse,n._isEffect=!0,n.active=!0,n.raw=e,n.deps=[],n.options=t,n}function Cs(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}var yt=!0,wi=[];function yu(){wi.push(yt),yt=!1}function _u(){wi.push(yt),yt=!0}function Os(){const e=wi.pop();yt=e===void 0?!0:e}function Ce(e,t,n){if(!yt||De===void 0)return;let r=Yr.get(e);r||Yr.set(e,r=new Map);let i=r.get(n);i||r.set(n,i=new Set),i.has(De)||(i.add(De),De.deps.push(i),De.options.onTrack&&De.options.onTrack({effect:De,target:e,type:t,key:n}))}function Ve(e,t,n,r,i,o){const a=Yr.get(e);if(!a)return;const c=new Set,f=m=>{m&&m.forEach(S=>{(S!==De||S.allowRecurse)&&c.add(S)})};if(t==="clear")a.forEach(f);else if(n==="length"&&ct(e))a.forEach((m,S)=>{(S==="length"||S>=r)&&f(m)});else switch(n!==void 0&&f(a.get(n)),t){case"add":ct(e)?vi(n)&&f(a.get("length")):(f(a.get(ut)),Ut(e)&&f(a.get(Vr)));break;case"delete":ct(e)||(f(a.get(ut)),Ut(e)&&f(a.get(Vr)));break;case"set":Ut(e)&&f(a.get(ut));break}const p=m=>{m.options.onTrigger&&m.options.onTrigger({effect:m,target:e,key:n,type:t,newValue:r,oldValue:i,oldTarget:o}),m.options.scheduler?m.options.scheduler(m):m()};c.forEach(p)}var Eu=lu("__proto__,__v_isRef,__isVue"),Ts=new Set(Object.getOwnPropertyNames(Symbol).map(e=>Symbol[e]).filter(gi)),Su=Xn(),xu=Xn(!1,!0),Au=Xn(!0),Cu=Xn(!0,!0),Nn={};["includes","indexOf","lastIndexOf"].forEach(e=>{const t=Array.prototype[e];Nn[e]=function(...n){const r=G(this);for(let o=0,a=this.length;o<a;o++)Ce(r,"get",o+"");const i=t.apply(r,n);return i===-1||i===!1?t.apply(r,n.map(G)):i}});["push","pop","shift","unshift","splice"].forEach(e=>{const t=Array.prototype[e];Nn[e]=function(...n){yu();const r=t.apply(this,n);return Os(),r}});function Xn(e=!1,t=!1){return function(r,i,o){if(i==="__v_isReactive")return!e;if(i==="__v_isReadonly")return e;if(i==="__v_raw"&&o===(e?t?Fu:Ws:t?Iu:Us).get(r))return r;const a=ct(r);if(!e&&a&&zn(Nn,i))return Reflect.get(Nn,i,o);const c=Reflect.get(r,i,o);return(gi(i)?Ts.has(i):Eu(i))||(e||Ce(r,"get",i),t)?c:Jr(c)?!a||!vi(i)?c.value:c:Kn(c)?e?qs(c):Ei(c):c}}var Ou=Ds(),Tu=Ds(!0);function Ds(e=!1){return function(n,r,i,o){let a=n[r];if(!e&&(i=G(i),a=G(a),!ct(n)&&Jr(a)&&!Jr(i)))return a.value=i,!0;const c=ct(n)&&vi(r)?Number(r)<n.length:zn(n,r),f=Reflect.set(n,r,i,o);return n===G(o)&&(c?As(i,a)&&Ve(n,"set",r,i,a):Ve(n,"add",r,i)),f}}function Du(e,t){const n=zn(e,t),r=e[t],i=Reflect.deleteProperty(e,t);return i&&n&&Ve(e,"delete",t,void 0,r),i}function Nu(e,t){const n=Reflect.has(e,t);return(!gi(t)||!Ts.has(t))&&Ce(e,"has",t),n}function Ru(e){return Ce(e,"iterate",ct(e)?"length":ut),Reflect.ownKeys(e)}var Ns={get:Su,set:Ou,deleteProperty:Du,has:Nu,ownKeys:Ru},Rs={get:Au,set(e,t){return console.warn(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0},deleteProperty(e,t){return console.warn(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0}};Es({},Ns,{get:xu,set:Tu});Es({},Rs,{get:Cu});var bi=e=>Kn(e)?Ei(e):e,yi=e=>Kn(e)?qs(e):e,_i=e=>e,Yn=e=>Reflect.getPrototypeOf(e);function Vn(e,t,n=!1,r=!1){e=e.__v_raw;const i=G(e),o=G(t);t!==o&&!n&&Ce(i,"get",t),!n&&Ce(i,"get",o);const{has:a}=Yn(i),c=r?_i:n?yi:bi;if(a.call(i,t))return c(e.get(t));if(a.call(i,o))return c(e.get(o));e!==i&&e.get(t)}function Jn(e,t=!1){const n=this.__v_raw,r=G(n),i=G(e);return e!==i&&!t&&Ce(r,"has",e),!t&&Ce(r,"has",i),e===i?n.has(e):n.has(e)||n.has(i)}function Gn(e,t=!1){return e=e.__v_raw,!t&&Ce(G(e),"iterate",ut),Reflect.get(e,"size",e)}function Ps(e){e=G(e);const t=G(this);return Yn(t).has.call(t,e)||(t.add(e),Ve(t,"add",e,e)),this}function ks(e,t){t=G(t);const n=G(this),{has:r,get:i}=Yn(n);let o=r.call(n,e);o?Hs(n,r,e):(e=G(e),o=r.call(n,e));const a=i.call(n,e);return n.set(e,t),o?As(t,a)&&Ve(n,"set",e,t,a):Ve(n,"add",e,t),this}function Ls(e){const t=G(this),{has:n,get:r}=Yn(t);let i=n.call(t,e);i?Hs(t,n,e):(e=G(e),i=n.call(t,e));const o=r?r.call(t,e):void 0,a=t.delete(e);return i&&Ve(t,"delete",e,void 0,o),a}function Is(){const e=G(this),t=e.size!==0,n=Ut(e)?new Map(e):new Set(e),r=e.clear();return t&&Ve(e,"clear",void 0,void 0,n),r}function Qn(e,t){return function(r,i){const o=this,a=o.__v_raw,c=G(a),f=t?_i:e?yi:bi;return!e&&Ce(c,"iterate",ut),a.forEach((p,m)=>r.call(i,f(p),f(m),o))}}function bn(e,t,n){return function(...r){const i=this.__v_raw,o=G(i),a=Ut(o),c=e==="entries"||e===Symbol.iterator&&a,f=e==="keys"&&a,p=i[e](...r),m=n?_i:t?yi:bi;return!t&&Ce(o,"iterate",f?Vr:ut),{next(){const{value:S,done:T}=p.next();return T?{value:S,done:T}:{value:c?[m(S[0]),m(S[1])]:m(S),done:T}},[Symbol.iterator](){return this}}}}function ze(e){return function(...t){{const n=t[0]?`on key "${t[0]}" `:"";console.warn(`${hu(e)} operation ${n}failed: target is readonly.`,G(this))}return e==="delete"?!1:this}}var Fs={get(e){return Vn(this,e)},get size(){return Gn(this)},has:Jn,add:Ps,set:ks,delete:Ls,clear:Is,forEach:Qn(!1,!1)},Ms={get(e){return Vn(this,e,!1,!0)},get size(){return Gn(this)},has:Jn,add:Ps,set:ks,delete:Ls,clear:Is,forEach:Qn(!1,!0)},Bs={get(e){return Vn(this,e,!0)},get size(){return Gn(this,!0)},has(e){return Jn.call(this,e,!0)},add:ze("add"),set:ze("set"),delete:ze("delete"),clear:ze("clear"),forEach:Qn(!0,!1)},$s={get(e){return Vn(this,e,!0,!0)},get size(){return Gn(this,!0)},has(e){return Jn.call(this,e,!0)},add:ze("add"),set:ze("set"),delete:ze("delete"),clear:ze("clear"),forEach:Qn(!0,!0)},Pu=["keys","values","entries",Symbol.iterator];Pu.forEach(e=>{Fs[e]=bn(e,!1,!1),Bs[e]=bn(e,!0,!1),Ms[e]=bn(e,!1,!0),$s[e]=bn(e,!0,!0)});function js(e,t){const n=t?e?$s:Ms:e?Bs:Fs;return(r,i,o)=>i==="__v_isReactive"?!e:i==="__v_isReadonly"?e:i==="__v_raw"?r:Reflect.get(zn(n,i)&&i in r?n:r,i,o)}var ku={get:js(!1,!1)},Lu={get:js(!0,!1)};function Hs(e,t,n){const r=G(n);if(r!==n&&t.call(e,r)){const i=xs(e);console.warn(`Reactive ${i} contains both the raw and reactive versions of the same object${i==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}var Us=new WeakMap,Iu=new WeakMap,Ws=new WeakMap,Fu=new WeakMap;function Mu(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Bu(e){return e.__v_skip||!Object.isExtensible(e)?0:Mu(xs(e))}function Ei(e){return e&&e.__v_isReadonly?e:zs(e,!1,Ns,ku,Us)}function qs(e){return zs(e,!0,Rs,Lu,Ws)}function zs(e,t,n,r,i){if(!Kn(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&!(t&&e.__v_isReactive))return e;const o=i.get(e);if(o)return o;const a=Bu(e);if(a===0)return e;const c=new Proxy(e,a===2?r:n);return i.set(e,c),c}function G(e){return e&&G(e.__v_raw)||e}function Jr(e){return!!(e&&e.__v_isRef===!0)}Oe("nextTick",()=>hi);Oe("dispatch",e=>Ht.bind(Ht,e));Oe("watch",(e,{evaluateLater:t,effect:n})=>(r,i)=>{let o=t(r),a=!0,c,f=n(()=>o(p=>{JSON.stringify(p),a?c=p:queueMicrotask(()=>{i(p,c),c=p}),a=!1}));e._x_effects.delete(f)});Oe("store",nu);Oe("data",e=>Uo(e));Oe("root",e=>Un(e));Oe("refs",e=>(e._x_refs_proxy||(e._x_refs_proxy=tn($u(e))),e._x_refs_proxy));function $u(e){let t=[],n=e;for(;n;)n._x_refs&&t.push(n._x_refs),n=n.parentNode;return t}var xr={};function Ks(e){return xr[e]||(xr[e]=0),++xr[e]}function ju(e,t){return Wn(e,n=>{if(n._x_ids&&n._x_ids[t])return!0})}function Hu(e,t){e._x_ids||(e._x_ids={}),e._x_ids[t]||(e._x_ids[t]=Ks(t))}Oe("id",e=>(t,n=null)=>{let r=ju(e,t),i=r?r._x_ids[t]:Ks(t);return n?`${t}-${i}-${n}`:`${t}-${i}`});Oe("el",e=>e);Xs("Focus","focus","focus");Xs("Persist","persist","persist");function Xs(e,t,n){Oe(t,r=>Xe(`You can't use [$${directiveName}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${n}`,r))}function Uu({get:e,set:t},{get:n,set:r}){let i=!0,o,a,c=St(()=>{let f,p;i?(f=e(),r(f),p=n(),i=!1):(f=e(),p=n(),a=JSON.stringify(f),JSON.stringify(p),a!==o?(p=n(),r(f),p=f):(t(p),f=p)),o=JSON.stringify(f),JSON.stringify(p)});return()=>{Zt(c)}}ie("modelable",(e,{expression:t},{effect:n,evaluateLater:r,cleanup:i})=>{let o=r(t),a=()=>{let m;return o(S=>m=S),m},c=r(`${t} = __placeholder`),f=m=>c(()=>{},{scope:{__placeholder:m}}),p=a();f(p),queueMicrotask(()=>{if(!e._x_model)return;e._x_removeModelListeners.default();let m=e._x_model.get,S=e._x_model.set,T=Uu({get(){return m()},set(D){S(D)}},{get(){return a()},set(D){f(D)}});i(T)})});var Wu=document.createElement("div");ie("teleport",(e,{modifiers:t,expression:n},{cleanup:r})=>{e.tagName.toLowerCase()!=="template"&&Xe("x-teleport can only be used on a <template> tag",e);let i=nn(()=>document.querySelector(n),()=>Wu)();i||Xe(`Cannot find x-teleport element for selector: "${n}"`);let o=e.content.cloneNode(!0).firstElementChild;e._x_teleport=o,o._x_teleportBack=e,e._x_forwardEvents&&e._x_forwardEvents.forEach(a=>{o.addEventListener(a,c=>{c.stopPropagation(),e.dispatchEvent(new c.constructor(c.type,c))})}),en(o,{},e),ae(()=>{t.includes("prepend")?i.parentNode.insertBefore(o,i):t.includes("append")?i.parentNode.insertBefore(o,i.nextSibling):i.appendChild(o),Ye(o),o._x_ignore=!0}),r(()=>o.remove())});var Ys=()=>{};Ys.inline=(e,{modifiers:t},{cleanup:n})=>{t.includes("self")?e._x_ignoreSelf=!0:e._x_ignore=!0,n(()=>{t.includes("self")?delete e._x_ignoreSelf:delete e._x_ignore})};ie("ignore",Ys);ie("effect",(e,{expression:t},{effect:n})=>n(he(e,t)));function Gr(e,t,n,r){let i=e,o=f=>r(f),a={},c=(f,p)=>m=>p(f,m);if(n.includes("dot")&&(t=qu(t)),n.includes("camel")&&(t=zu(t)),n.includes("passive")&&(a.passive=!0),n.includes("capture")&&(a.capture=!0),n.includes("window")&&(i=window),n.includes("document")&&(i=document),n.includes("debounce")){let f=n[n.indexOf("debounce")+1]||"invalid-wait",p=Rn(f.split("ms")[0])?Number(f.split("ms")[0]):250;o=vs(o,p)}if(n.includes("throttle")){let f=n[n.indexOf("throttle")+1]||"invalid-wait",p=Rn(f.split("ms")[0])?Number(f.split("ms")[0]):250;o=ws(o,p)}return n.includes("prevent")&&(o=c(o,(f,p)=>{p.preventDefault(),f(p)})),n.includes("stop")&&(o=c(o,(f,p)=>{p.stopPropagation(),f(p)})),n.includes("self")&&(o=c(o,(f,p)=>{p.target===e&&f(p)})),(n.includes("away")||n.includes("outside"))&&(i=document,o=c(o,(f,p)=>{e.contains(p.target)||p.target.isConnected!==!1&&(e.offsetWidth<1&&e.offsetHeight<1||e._x_isShown!==!1&&f(p))})),n.includes("once")&&(o=c(o,(f,p)=>{f(p),i.removeEventListener(t,o,a)})),o=c(o,(f,p)=>{Xu(t)&&Yu(p,n)||f(p)}),i.addEventListener(t,o,a),()=>{i.removeEventListener(t,o,a)}}function qu(e){return e.replace(/-/g,".")}function zu(e){return e.toLowerCase().replace(/-(\w)/g,(t,n)=>n.toUpperCase())}function Rn(e){return!Array.isArray(e)&&!isNaN(e)}function Ku(e){return[" ","_"].includes(e)?e:e.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[_\s]/,"-").toLowerCase()}function Xu(e){return["keydown","keyup"].includes(e)}function Yu(e,t){let n=t.filter(o=>!["window","document","prevent","stop","once","capture"].includes(o));if(n.includes("debounce")){let o=n.indexOf("debounce");n.splice(o,Rn((n[o+1]||"invalid-wait").split("ms")[0])?2:1)}if(n.includes("throttle")){let o=n.indexOf("throttle");n.splice(o,Rn((n[o+1]||"invalid-wait").split("ms")[0])?2:1)}if(n.length===0||n.length===1&&ro(e.key).includes(n[0]))return!1;const i=["ctrl","shift","alt","meta","cmd","super"].filter(o=>n.includes(o));return n=n.filter(o=>!i.includes(o)),!(i.length>0&&i.filter(a=>((a==="cmd"||a==="super")&&(a="meta"),e[`${a}Key`])).length===i.length&&ro(e.key).includes(n[0]))}function ro(e){if(!e)return[];e=Ku(e);let t={ctrl:"control",slash:"/",space:" ",spacebar:" ",cmd:"meta",esc:"escape",up:"arrow-up",down:"arrow-down",left:"arrow-left",right:"arrow-right",period:".",equal:"=",minus:"-",underscore:"_"};return t[e]=e,Object.keys(t).map(n=>{if(t[n]===e)return n}).filter(n=>n)}ie("model",(e,{modifiers:t,expression:n},{effect:r,cleanup:i})=>{let o=e;t.includes("parent")&&(o=e.parentNode);let a=he(o,n),c;typeof n=="string"?c=he(o,`${n} = __placeholder`):typeof n=="function"&&typeof n()=="string"?c=he(o,`${n()} = __placeholder`):c=()=>{};let f=()=>{let T;return a(D=>T=D),io(T)?T.get():T},p=T=>{let D;a(C=>D=C),io(D)?D.set(T):c(()=>{},{scope:{__placeholder:T}})};typeof n=="string"&&e.type==="radio"&&ae(()=>{e.hasAttribute("name")||e.setAttribute("name",n)});var m=e.tagName.toLowerCase()==="select"||["checkbox","radio"].includes(e.type)||t.includes("lazy")?"change":"input";let S=Kt?()=>{}:Gr(e,m,t,T=>{p(Vu(e,t,T,f()))});if(t.includes("fill")&&[null,""].includes(f())&&e.dispatchEvent(new Event(m,{})),e._x_removeModelListeners||(e._x_removeModelListeners={}),e._x_removeModelListeners.default=S,i(()=>e._x_removeModelListeners.default()),e.form){let T=Gr(e.form,"reset",[],D=>{hi(()=>e._x_model&&e._x_model.set(e.value))});i(()=>T())}e._x_model={get(){return f()},set(T){p(T)}},e._x_forceModelUpdate=T=>{T=T===void 0?f():T,T===void 0&&typeof n=="string"&&n.match(/\./)&&(T=""),window.fromModel=!0,ae(()=>ps(e,"value",T)),delete window.fromModel},r(()=>{let T=f();t.includes("unintrusive")&&document.activeElement.isSameNode(e)||e._x_forceModelUpdate(T)})});function Vu(e,t,n,r){return ae(()=>{if(n instanceof CustomEvent&&n.detail!==void 0)return n.detail??n.target.value;if(e.type==="checkbox")if(Array.isArray(r)){let i=t.includes("number")?Ar(n.target.value):n.target.value;return n.target.checked?r.concat([i]):r.filter(o=>!Ju(o,i))}else return n.target.checked;else{if(e.tagName.toLowerCase()==="select"&&e.multiple)return t.includes("number")?Array.from(n.target.selectedOptions).map(i=>{let o=i.value||i.text;return Ar(o)}):Array.from(n.target.selectedOptions).map(i=>i.value||i.text);{let i=n.target.value;return t.includes("number")?Ar(i):t.includes("trim")?i.trim():i}}})}function Ar(e){let t=e?parseFloat(e):null;return Gu(t)?t:e}function Ju(e,t){return e==t}function Gu(e){return!Array.isArray(e)&&!isNaN(e)}function io(e){return e!==null&&typeof e=="object"&&typeof e.get=="function"&&typeof e.set=="function"}ie("cloak",e=>queueMicrotask(()=>ae(()=>e.removeAttribute(xt("cloak")))));ls(()=>`[${xt("init")}]`);ie("init",nn((e,{expression:t},{evaluate:n})=>typeof t=="string"?!!t.trim()&&n(t,{},!1):n(t,{},!1)));ie("text",(e,{expression:t},{effect:n,evaluateLater:r})=>{let i=r(t);n(()=>{i(o=>{ae(()=>{e.textContent=o})})})});ie("html",(e,{expression:t},{effect:n,evaluateLater:r})=>{let i=r(t);n(()=>{i(o=>{ae(()=>{e.innerHTML=o,e._x_ignoreSelf=!0,Ye(e),delete e._x_ignoreSelf})})})});di(Qo(":",Zo(xt("bind:"))));var Vs=(e,{value:t,modifiers:n,expression:r,original:i},{effect:o})=>{if(!t){let c={};iu(c),he(e,r)(p=>{ys(e,p,i)},{scope:c});return}if(t==="key")return Qu(e,r);if(e._x_inlineBindings&&e._x_inlineBindings[t]&&e._x_inlineBindings[t].extract)return;let a=he(e,r);o(()=>a(c=>{c===void 0&&typeof r=="string"&&r.match(/\./)&&(c=""),ae(()=>ps(e,t,c,n))}))};Vs.inline=(e,{value:t,modifiers:n,expression:r})=>{t&&(e._x_inlineBindings||(e._x_inlineBindings={}),e._x_inlineBindings[t]={expression:r,extract:!1})};ie("bind",Vs);function Qu(e,t){e._x_keyExpression=t}as(()=>`[${xt("data")}]`);ie("data",nn((e,{expression:t},{cleanup:n})=>{t=t===""?"{}":t;let r={};jr(r,e);let i={};su(i,r);let o=lt(e,t,{scope:i});(o===void 0||o===!0)&&(o={}),jr(o,e);let a=Et(o);Wo(a);let c=en(e,a);a.init&&lt(e,a.init),n(()=>{a.destroy&&lt(e,a.destroy),c()})}));ie("show",(e,{modifiers:t,expression:n},{effect:r})=>{let i=he(e,n);e._x_doHide||(e._x_doHide=()=>{ae(()=>{e.style.setProperty("display","none",t.includes("important")?"important":void 0)})}),e._x_doShow||(e._x_doShow=()=>{ae(()=>{e.style.length===1&&e.style.display==="none"?e.removeAttribute("style"):e.style.removeProperty("display")})});let o=()=>{e._x_doHide(),e._x_isShown=!1},a=()=>{e._x_doShow(),e._x_isShown=!0},c=()=>setTimeout(a),f=Kr(S=>S?a():o(),S=>{typeof e._x_toggleAndCascadeWithTransitions=="function"?e._x_toggleAndCascadeWithTransitions(e,S,a,o):S?c():o()}),p,m=!0;r(()=>i(S=>{!m&&S===p||(t.includes("immediate")&&(S?c():o()),f(S),p=S,m=!1)}))});ie("for",(e,{expression:t},{effect:n,cleanup:r})=>{let i=ed(t),o=he(e,i.items),a=he(e,e._x_keyExpression||"index");e._x_prevKeys=[],e._x_lookup={},n(()=>Zu(e,i,o,a)),r(()=>{Object.values(e._x_lookup).forEach(c=>c.remove()),delete e._x_prevKeys,delete e._x_lookup})});function Zu(e,t,n,r){let i=a=>typeof a=="object"&&!Array.isArray(a),o=e;n(a=>{td(a)&&a>=0&&(a=Array.from(Array(a).keys(),E=>E+1)),a===void 0&&(a=[]);let c=e._x_lookup,f=e._x_prevKeys,p=[],m=[];if(i(a))a=Object.entries(a).map(([E,x])=>{let H=oo(t,x,E,a);r(q=>m.push(q),{scope:{index:E,...H}}),p.push(H)});else for(let E=0;E<a.length;E++){let x=oo(t,a[E],E,a);r(H=>m.push(H),{scope:{index:E,...x}}),p.push(x)}let S=[],T=[],D=[],C=[];for(let E=0;E<f.length;E++){let x=f[E];m.indexOf(x)===-1&&D.push(x)}f=f.filter(E=>!D.includes(E));let R="template";for(let E=0;E<m.length;E++){let x=m[E],H=f.indexOf(x);if(H===-1)f.splice(E,0,x),S.push([R,E]);else if(H!==E){let q=f.splice(E,1)[0],M=f.splice(H-1,1)[0];f.splice(E,0,M),f.splice(H,0,q),T.push([q,M])}else C.push(x);R=x}for(let E=0;E<D.length;E++){let x=D[E];c[x]._x_effects&&c[x]._x_effects.forEach(Lo),c[x].remove(),c[x]=null,delete c[x]}for(let E=0;E<T.length;E++){let[x,H]=T[E],q=c[x],M=c[H],W=document.createElement("div");ae(()=>{M||Xe('x-for ":key" is undefined or invalid',o),M.after(W),q.after(M),M._x_currentIfEl&&M.after(M._x_currentIfEl),W.before(q),q._x_currentIfEl&&q.after(q._x_currentIfEl),W.remove()}),M._x_refreshXForScope(p[m.indexOf(H)])}for(let E=0;E<S.length;E++){let[x,H]=S[E],q=x==="template"?o:c[x];q._x_currentIfEl&&(q=q._x_currentIfEl);let M=p[H],W=m[H],_=document.importNode(o.content,!0).firstElementChild,b=Et(M);en(_,b,o),_._x_refreshXForScope=j=>{Object.entries(j).forEach(([te,Y])=>{b[te]=Y})},ae(()=>{q.after(_),Ye(_)}),typeof W=="object"&&Xe("x-for key cannot be an object, it must be a string or an integer",o),c[W]=_}for(let E=0;E<C.length;E++)c[C[E]]._x_refreshXForScope(p[m.indexOf(C[E])]);o._x_prevKeys=m})}function ed(e){let t=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,n=/^\s*\(|\)\s*$/g,r=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,i=e.match(r);if(!i)return;let o={};o.items=i[2].trim();let a=i[1].replace(n,"").trim(),c=a.match(t);return c?(o.item=a.replace(t,"").trim(),o.index=c[1].trim(),c[2]&&(o.collection=c[2].trim())):o.item=a,o}function oo(e,t,n,r){let i={};return/^\[.*\]$/.test(e.item)&&Array.isArray(t)?e.item.replace("[","").replace("]","").split(",").map(a=>a.trim()).forEach((a,c)=>{i[a]=t[c]}):/^\{.*\}$/.test(e.item)&&!Array.isArray(t)&&typeof t=="object"?e.item.replace("{","").replace("}","").split(",").map(a=>a.trim()).forEach(a=>{i[a]=t[a]}):i[e.item]=t,e.index&&(i[e.index]=n),e.collection&&(i[e.collection]=r),i}function td(e){return!Array.isArray(e)&&!isNaN(e)}function Js(){}Js.inline=(e,{expression:t},{cleanup:n})=>{let r=Un(e);r._x_refs||(r._x_refs={}),r._x_refs[t]=e,n(()=>delete r._x_refs[t])};ie("ref",Js);ie("if",(e,{expression:t},{effect:n,cleanup:r})=>{let i=he(e,t),o=()=>{if(e._x_currentIfEl)return e._x_currentIfEl;let c=e.content.cloneNode(!0).firstElementChild;return en(c,{},e),ae(()=>{e.after(c),Ye(c)}),e._x_currentIfEl=c,e._x_undoIf=()=>{Ke(c,f=>{f._x_effects&&f._x_effects.forEach(Lo)}),c.remove(),delete e._x_currentIfEl},c},a=()=>{e._x_undoIf&&(e._x_undoIf(),delete e._x_undoIf)};n(()=>i(c=>{c?o():a()})),r(()=>e._x_undoIf&&e._x_undoIf())});ie("id",(e,{expression:t},{evaluate:n})=>{n(t).forEach(i=>Hu(e,i))});di(Qo("@",Zo(xt("on:"))));ie("on",nn((e,{value:t,modifiers:n,expression:r},{cleanup:i})=>{let o=r?he(e,r):()=>{};e.tagName.toLowerCase()==="template"&&(e._x_forwardEvents||(e._x_forwardEvents=[]),e._x_forwardEvents.includes(t)||e._x_forwardEvents.push(t));let a=Gr(e,t,n,c=>{o(()=>{},{scope:{$event:c},params:[c]})});i(()=>a())}));Zn("Collapse","collapse","collapse");Zn("Intersect","intersect","intersect");Zn("Focus","trap","focus");Zn("Mask","mask","mask");function Zn(e,t,n){ie(t,r=>Xe(`You can't use [x-${t}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${n}`,r))}rn.setEvaluator(Yo);rn.setReactivityEngine({reactive:Ei,effect:gu,release:vu,raw:G});var nd=rn,Si=nd;/*!
* tabbable 5.2.1
* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
*/var Gs=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])',"details>summary:first-of-type","details"],so=Gs.join(","),Pn=typeof Element>"u"?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector,Qs=function(t,n,r){var i=Array.prototype.slice.apply(t.querySelectorAll(so));return n&&Pn.call(t,so)&&i.unshift(t),i=i.filter(r),i},rd=function(t){return t.contentEditable==="true"},Zs=function(t){var n=parseInt(t.getAttribute("tabindex"),10);return isNaN(n)?rd(t)||(t.nodeName==="AUDIO"||t.nodeName==="VIDEO"||t.nodeName==="DETAILS")&&t.getAttribute("tabindex")===null?0:t.tabIndex:n},id=function(t,n){return t.tabIndex===n.tabIndex?t.documentOrder-n.documentOrder:t.tabIndex-n.tabIndex},xi=function(t){return t.tagName==="INPUT"},od=function(t){return xi(t)&&t.type==="hidden"},sd=function(t){var n=t.tagName==="DETAILS"&&Array.prototype.slice.apply(t.children).some(function(r){return r.tagName==="SUMMARY"});return n},ad=function(t,n){for(var r=0;r<t.length;r++)if(t[r].checked&&t[r].form===n)return t[r]},ld=function(t){if(!t.name)return!0;var n=t.form||t.ownerDocument,r=function(c){return n.querySelectorAll('input[type="radio"][name="'+c+'"]')},i;if(typeof window<"u"&&typeof window.CSS<"u"&&typeof window.CSS.escape=="function")i=r(window.CSS.escape(t.name));else try{i=r(t.name)}catch(a){return console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s",a.message),!1}var o=ad(i,t.form);return!o||o===t},cd=function(t){return xi(t)&&t.type==="radio"},ud=function(t){return cd(t)&&!ld(t)},dd=function(t,n){if(getComputedStyle(t).visibility==="hidden")return!0;var r=Pn.call(t,"details>summary:first-of-type"),i=r?t.parentElement:t;if(Pn.call(i,"details:not([open]) *"))return!0;if(!n||n==="full")for(;t;){if(getComputedStyle(t).display==="none")return!0;t=t.parentElement}else if(n==="non-zero-area"){var o=t.getBoundingClientRect(),a=o.width,c=o.height;return a===0&&c===0}return!1},fd=function(t){if(xi(t)||t.tagName==="SELECT"||t.tagName==="TEXTAREA"||t.tagName==="BUTTON")for(var n=t.parentElement;n;){if(n.tagName==="FIELDSET"&&n.disabled){for(var r=0;r<n.children.length;r++){var i=n.children.item(r);if(i.tagName==="LEGEND")return!i.contains(t)}return!0}n=n.parentElement}return!1},Ai=function(t,n){return!(n.disabled||od(n)||dd(n,t.displayCheck)||sd(n)||fd(n))},pd=function(t,n){return!(!Ai(t,n)||ud(n)||Zs(n)<0)},hd=function(t,n){n=n||{};var r=[],i=[],o=Qs(t,n.includeContainer,pd.bind(null,n));o.forEach(function(c,f){var p=Zs(c);p===0?r.push(c):i.push({documentOrder:f,tabIndex:p,node:c})});var a=i.sort(id).map(function(c){return c.node}).concat(r);return a},md=function(t,n){n=n||{};var r=Qs(t,n.includeContainer,Ai.bind(null,n));return r},gd=Gs.concat("iframe").join(","),ea=function(t,n){if(n=n||{},!t)throw new Error("No node provided");return Pn.call(t,gd)===!1?!1:Ai(n,t)};/*!
* focus-trap 6.6.1
* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
*/function ao(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,r)}return n}function vd(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?ao(Object(n),!0).forEach(function(r){wd(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ao(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function wd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var lo=function(){var e=[];return{activateTrap:function(n){if(e.length>0){var r=e[e.length-1];r!==n&&r.pause()}var i=e.indexOf(n);i===-1||e.splice(i,1),e.push(n)},deactivateTrap:function(n){var r=e.indexOf(n);r!==-1&&e.splice(r,1),e.length>0&&e[e.length-1].unpause()}}}(),bd=function(t){return t.tagName&&t.tagName.toLowerCase()==="input"&&typeof t.select=="function"},yd=function(t){return t.key==="Escape"||t.key==="Esc"||t.keyCode===27},_d=function(t){return t.key==="Tab"||t.keyCode===9},co=function(t){return setTimeout(t,0)},Cr=function(t,n){var r=-1;return t.every(function(i,o){return n(i)?(r=o,!1):!0}),r},Bt=function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return typeof t=="function"?t.apply(void 0,r):t},Ed=function(t,n){var r=document,i=vd({returnFocusOnDeactivate:!0,escapeDeactivates:!0,delayInitialFocus:!0},n),o={containers:[],tabbableGroups:[],nodeFocusedBeforeActivation:null,mostRecentlyFocusedNode:null,active:!1,paused:!1,delayInitialFocusTimer:void 0},a,c=function(_,b,j){return _&&_[b]!==void 0?_[b]:i[j||b]},f=function(_){return o.containers.some(function(b){return b.contains(_)})},p=function(_){var b=i[_];if(!b)return null;var j=b;if(typeof b=="string"&&(j=r.querySelector(b),!j))throw new Error("`".concat(_,"` refers to no known node"));if(typeof b=="function"&&(j=b(),!j))throw new Error("`".concat(_,"` did not return a node"));return j},m=function(){var _;if(c({},"initialFocus")===!1)return!1;if(p("initialFocus")!==null)_=p("initialFocus");else if(f(r.activeElement))_=r.activeElement;else{var b=o.tabbableGroups[0],j=b&&b.firstTabbableNode;_=j||p("fallbackFocus")}if(!_)throw new Error("Your focus-trap needs to have at least one focusable element");return _},S=function(){if(o.tabbableGroups=o.containers.map(function(_){var b=hd(_);if(b.length>0)return{container:_,firstTabbableNode:b[0],lastTabbableNode:b[b.length-1]}}).filter(function(_){return!!_}),o.tabbableGroups.length<=0&&!p("fallbackFocus"))throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times")},T=function W(_){if(_!==!1&&_!==r.activeElement){if(!_||!_.focus){W(m());return}_.focus({preventScroll:!!i.preventScroll}),o.mostRecentlyFocusedNode=_,bd(_)&&_.select()}},D=function(_){var b=p("setReturnFocus");return b||_},C=function(_){if(!f(_.target)){if(Bt(i.clickOutsideDeactivates,_)){a.deactivate({returnFocus:i.returnFocusOnDeactivate&&!ea(_.target)});return}Bt(i.allowOutsideClick,_)||_.preventDefault()}},R=function(_){var b=f(_.target);b||_.target instanceof Document?b&&(o.mostRecentlyFocusedNode=_.target):(_.stopImmediatePropagation(),T(o.mostRecentlyFocusedNode||m()))},E=function(_){S();var b=null;if(o.tabbableGroups.length>0){var j=Cr(o.tabbableGroups,function(Q){var Me=Q.container;return Me.contains(_.target)});if(j<0)_.shiftKey?b=o.tabbableGroups[o.tabbableGroups.length-1].lastTabbableNode:b=o.tabbableGroups[0].firstTabbableNode;else if(_.shiftKey){var te=Cr(o.tabbableGroups,function(Q){var Me=Q.firstTabbableNode;return _.target===Me});if(te<0&&o.tabbableGroups[j].container===_.target&&(te=j),te>=0){var Y=te===0?o.tabbableGroups.length-1:te-1,z=o.tabbableGroups[Y];b=z.lastTabbableNode}}else{var X=Cr(o.tabbableGroups,function(Q){var Me=Q.lastTabbableNode;return _.target===Me});if(X<0&&o.tabbableGroups[j].container===_.target&&(X=j),X>=0){var ye=X===o.tabbableGroups.length-1?0:X+1,xe=o.tabbableGroups[ye];b=xe.firstTabbableNode}}}else b=p("fallbackFocus");b&&(_.preventDefault(),T(b))},x=function(_){if(yd(_)&&Bt(i.escapeDeactivates)!==!1){_.preventDefault(),a.deactivate();return}if(_d(_)){E(_);return}},H=function(_){Bt(i.clickOutsideDeactivates,_)||f(_.target)||Bt(i.allowOutsideClick,_)||(_.preventDefault(),_.stopImmediatePropagation())},q=function(){if(o.active)return lo.activateTrap(a),o.delayInitialFocusTimer=i.delayInitialFocus?co(function(){T(m())}):T(m()),r.addEventListener("focusin",R,!0),r.addEventListener("mousedown",C,{capture:!0,passive:!1}),r.addEventListener("touchstart",C,{capture:!0,passive:!1}),r.addEventListener("click",H,{capture:!0,passive:!1}),r.addEventListener("keydown",x,{capture:!0,passive:!1}),a},M=function(){if(o.active)return r.removeEventListener("focusin",R,!0),r.removeEventListener("mousedown",C,!0),r.removeEventListener("touchstart",C,!0),r.removeEventListener("click",H,!0),r.removeEventListener("keydown",x,!0),a};return a={activate:function(_){if(o.active)return this;var b=c(_,"onActivate"),j=c(_,"onPostActivate"),te=c(_,"checkCanFocusTrap");te||S(),o.active=!0,o.paused=!1,o.nodeFocusedBeforeActivation=r.activeElement,b&&b();var Y=function(){te&&S(),q(),j&&j()};return te?(te(o.containers.concat()).then(Y,Y),this):(Y(),this)},deactivate:function(_){if(!o.active)return this;clearTimeout(o.delayInitialFocusTimer),o.delayInitialFocusTimer=void 0,M(),o.active=!1,o.paused=!1,lo.deactivateTrap(a);var b=c(_,"onDeactivate"),j=c(_,"onPostDeactivate"),te=c(_,"checkCanReturnFocus");b&&b();var Y=c(_,"returnFocus","returnFocusOnDeactivate"),z=function(){co(function(){Y&&T(D(o.nodeFocusedBeforeActivation)),j&&j()})};return Y&&te?(te(D(o.nodeFocusedBeforeActivation)).then(z,z),this):(z(),this)},pause:function(){return o.paused||!o.active?this:(o.paused=!0,M(),this)},unpause:function(){return!o.paused||!o.active?this:(o.paused=!1,S(),q(),this)},updateContainerElements:function(_){var b=[].concat(_).filter(Boolean);return o.containers=b.map(function(j){return typeof j=="string"?r.querySelector(j):j}),o.active&&S(),this}},a.updateContainerElements(t),a};function Sd(e){let t,n;window.addEventListener("focusin",()=>{t=n,n=document.activeElement}),e.magic("focus",r=>{let i=r;return{__noscroll:!1,__wrapAround:!1,within(o){return i=o,this},withoutScrolling(){return this.__noscroll=!0,this},noscroll(){return this.__noscroll=!0,this},withWrapAround(){return this.__wrapAround=!0,this},wrap(){return this.withWrapAround()},focusable(o){return ea(o)},previouslyFocused(){return t},lastFocused(){return t},focused(){return n},focusables(){return Array.isArray(i)?i:md(i,{displayCheck:"none"})},all(){return this.focusables()},isFirst(o){let a=this.all();return a[0]&&a[0].isSameNode(o)},isLast(o){let a=this.all();return a.length&&a.slice(-1)[0].isSameNode(o)},getFirst(){return this.all()[0]},getLast(){return this.all().slice(-1)[0]},getNext(){let o=this.all(),a=document.activeElement;if(o.indexOf(a)!==-1)return this.__wrapAround&&o.indexOf(a)===o.length-1?o[0]:o[o.indexOf(a)+1]},getPrevious(){let o=this.all(),a=document.activeElement;if(o.indexOf(a)!==-1)return this.__wrapAround&&o.indexOf(a)===0?o.slice(-1)[0]:o[o.indexOf(a)-1]},first(){this.focus(this.getFirst())},last(){this.focus(this.getLast())},next(){this.focus(this.getNext())},previous(){this.focus(this.getPrevious())},prev(){return this.previous()},focus(o){o&&setTimeout(()=>{o.hasAttribute("tabindex")||o.setAttribute("tabindex","0"),o.focus({preventScroll:this._noscroll})})}}}),e.directive("trap",e.skipDuringClone((r,{expression:i,modifiers:o},{effect:a,evaluateLater:c,cleanup:f})=>{let p=c(i),m=!1,S={escapeDeactivates:!1,allowOutsideClick:!0,fallbackFocus:()=>r},T=r.querySelector("[autofocus]");T&&(S.initialFocus=T);let D=Ed(r,S),C=()=>{},R=()=>{};const E=()=>{C(),C=()=>{},R(),R=()=>{},D.deactivate({returnFocus:!o.includes("noreturn")})};a(()=>p(x=>{m!==x&&(x&&!m&&setTimeout(()=>{o.includes("inert")&&(C=uo(r)),o.includes("noscroll")&&(R=xd()),D.activate()}),!x&&m&&E(),m=!!x)})),f(E)},(r,{expression:i,modifiers:o},{evaluate:a})=>{o.includes("inert")&&a(i)&&uo(r)}))}function uo(e){let t=[];return ta(e,n=>{let r=n.hasAttribute("aria-hidden");n.setAttribute("aria-hidden","true"),t.push(()=>r||n.removeAttribute("aria-hidden"))}),()=>{for(;t.length;)t.pop()()}}function ta(e,t){e.isSameNode(document.body)||!e.parentNode||Array.from(e.parentNode.children).forEach(n=>{n.isSameNode(e)?ta(e.parentNode,t):t(n)})}function xd(){let e=document.documentElement.style.overflow,t=document.documentElement.style.paddingRight,n=window.innerWidth-document.documentElement.clientWidth;return document.documentElement.style.overflow="hidden",document.documentElement.style.paddingRight=`${n}px`,()=>{document.documentElement.style.overflow=e,document.documentElement.style.paddingRight=t}}var Ad=Sd;class Cd extends Je{constructor(){super()}addModuleQuickSetting(t,n){mw.quickSettings[t]||(mw.quickSettings[t]=[]),mw.app.liveEdit.moduleHandleContent.menu.setMenu("dynamic",mw.quickSettings[t])}addLayoutQuickSetting(t){if(mw.layoutQuickSettings||(mw.layoutQuickSettings=[]),Array.isArray(t))for(let n=0;n<t.length;n++)mw.layoutQuickSettings.push(t[n]);else mw.layoutQuickSettings.push(t)}}var ne;class Od extends Je{constructor(){super();pe(this,ne,null)}go(n){k(this,ne)&&k(this,ne).ownerDocument&&k(this,ne).contentWindow&&(k(this,ne).src=n)}refresh(){k(this,ne)&&k(this,ne).ownerDocument&&k(this,ne).contentWindow&&k(this,ne).contentWindow.location.reload()}getFrame(){if(k(this,ne)&&k(this,ne).ownerDocument)return k(this,ne)}getWindow(){if(k(this,ne)&&k(this,ne).ownerDocument)return k(this,ne).contentWindow}getDocument(){if(k(this,ne)&&k(this,ne).ownerDocument)return k(this,ne).contentWindow.document}getLiveEditData(){var n=this.getWindow();return n&&typeof n.mw<"u"&&typeof n.mw.liveEditIframeData<"u"&&n.mw.liveEditIframeData?n.mw.liveEditIframeData:!1}mount(n){this.dispatch("liveEditBeforeLoaded"),mw.spinner({element:n,size:52,decorate:!0});const r=document.createElement("iframe");let i=mw.settings.site_url;const o=new URLSearchParams(window.top.location.search).get("url");o&&(i=decodeURIComponent(o)),i=new URL(i),i.searchParams.set("editmode","iframe"),i.host!==top.location.host&&(i=`${mw.settings.site_url}?editmode=iframe`),r.src=i.toString(),r.frameBorder=0,r.id="live-editor-frame",r.name="live-editor-frame",r.referrerPolicy="no-referrer",r.loading="lazy",vr(this,ne,r),n.innerHTML="",n.appendChild(r),window.onbeforeunload=function(){if(r&&r.contentWindow&&r.contentWindow.mw&&r.contentWindow.mw.askusertostay)return!0},r.addEventListener("load",a=>{r.contentWindow.mw.require("liveedit.css"),mw.spinner({element:n,decorate:!0}).remove(),r.contentWindow.document.body.addEventListener("click",c=>{this.dispatch("canvasDocumentClick",c)}),r.contentWindow.document.addEventListener("keydown",c=>{this.dispatch("canvasDocumentKeydown",c)}),r.contentWindow.document.body.addEventListener("dblclick",c=>{this.dispatch("canvasDocumentDoubleClick",c)}),r.contentWindow&&r.contentWindow.mw&&(r.contentWindow.mw.isNavigating=!1),this.dispatch("liveEditCanvasLoaded",{frame:r,frameWindow:r.contentWindow,frameDocument:r.contentWindow.document}),mw.spinner({element:n}).remove()})}}ne=new WeakMap;var Vt,Qr,Ln,na,In,ra,Jt;class Td extends Je{constructor(n={}){super();pe(this,Vt);pe(this,Ln);pe(this,In);pe(this,Jt,{edit:async(n,r,i)=>{var o=await mw.top().app.editImageDialog.editImageUrl(this.file);o&&(this.file=o,this.templatePrepare(),this.dispatch("change"),this.dispatch("edit"))},remove:(n,r,i)=>{this.removeFile(),this.dispatch("change"),this.dispatch("remove")},selectFile:(n,r,i)=>{var o,a=new mw.filePicker({type:this.settings.accept,label:!1,autoSelect:!1,footer:!0,_frameMaxHeight:!0,onResult:c=>{var f=c.src?c.src:c;f&&(f=f.toString(),this.file=f,this.templatePrepare(),o.remove(),this.dispatch("change"),this.dispatch("selectFile"))}});o=mw.top().dialog({content:a.root,title:mw.lang("Select file"),footer:!1,width:860})}});const r={canEdit:!0,canDelete:!0,element:null,template:null,document,id:mw.id(),accept:"images",templatePrepare:()=>{this.file?(this.root.querySelector(`#js-preview-image-wrapper-${this.id}`).style.display="",this.root.querySelector(`#js-dropzone-image-${this.id}`).style.display="none"):(this.root.querySelector(`#js-preview-image-wrapper-${this.id}`).style.display="none",this.root.querySelector(`#js-dropzone-image-${this.id}`).style.display="")}};this.settings=Object.assign({},r,n),this.document=this.settings.document,this.element=this.settings.element,this.file=this.settings.file,this.id=this.settings.id,typeof this.element=="string"&&(this.element=this.document.querySelector(this.settings.element)),this.window=this.settings.document.defaultView,this.init()}templatePrepare(){this.settings.templatePrepare.call(this),this.makePreview(),this.root.querySelectorAll('[data-fpc-action="edit"]').forEach(n=>{n.disabled=!be(this,Vt,Qr).call(this,this.file)})}template(){const n=this.id,r=this.settings.template||`
            <div class="mw-filepicker-component" id="root-${n}">
                <div id="js-preview-image-wrapper-${n}" style="display:none">
                    <div class="d-flex justify-content-between">
                        <div data-fpc-action="preview">
                             
                        </div>
                        <div class="d-flex gap-2 justify-content-between w-100">
                            <div class="form-control-live-edit-label-wrapper d-flex align-items-center">
                                <button type="button" class="mw-liveedit-button-actions-component btn-sm js-select-file-${n}" data-fpc-action="selectFile">
                                    ${mw.lang("Change")}
                                </button>
                            </div>
                            ${this.settings.canEdit?` 
                            <div class="form-control-live-edit-label-wrapper d-flex align-items-center">
                                <button type="button" class="mw-liveedit-button-actions-component"  id="js-edit-image-${n}" title="${mw.lang("Edit")}"  data-fpc-action="edit">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24"> <path d="M22.7 14.3L21.7 15.3L19.7 13.3L20.7 12.3C20.8 12.2 20.9 12.1 21.1 12.1C21.2 12.1 21.4 12.2 21.5 12.3L22.8 13.6C22.9 13.8 22.9 14.1 22.7 14.3M13 19.9V22H15.1L21.2 15.9L19.2 13.9L13 19.9M11.21 15.83L9.25 13.47L6.5 17H13.12L15.66 14.55L13.96 12.29L11.21 15.83M11 19.9V19.05L11.05 19H5V5H19V11.31L21 9.38V5C21 3.9 20.11 3 19 3H5C3.9 3 3 3.9 3 5V19C3 20.11 3.9 21 5 21H11V19.9Z"></path></svg>
                                </button>
                            </div>
                            `:""}
                            ${this.settings.canDelete?` 
                                <div class="form-control-live-edit-label-wrapper d-flex align-items-center">
                                    <button type="button" class="mw-liveedit-button-actions-component js-remove-file-${n}"  data-fpc-action="remove">
                                        <svg class="text-danger" fill="currentColor" xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0V0z" fill="none"></path><path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"></path></svg>
                                    </button>
                                </div>
                            
                            `:""}
                        </div>
                    </div>
                </div>


                <div id="js-dropzone-image-${n}" class="dropzone mw-dropzone js-select-file-${n}" style="display:none" data-fpc-action="selectFile">
                    <div class="d-flex flex-column align-items-center gap-3">
                        <div class="d-flex align-items-center justify-content-center" style="background:rgba(0,0,0,0.11);color:#000;width:40px;height:40px; border-radius:100%; font-size:28px;">
                            <i class="mdi mdi-plus"></i>
                        </div>
  
                        <div>
                            <span>
                                <b>20MB Max</b>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        `;return this.element.innerHTML=r,this.launch(),this.templatePrepare(),this}previewImage(){return`<img src="${this.file}" style="border-radius:4px;">`}previewVideo(){return`<video width="100px" src="${this.file}" muted loop playsinline style="border-radius:4px;"></video>`}previewAudio(){return`<video width="100px" src="${this.file}" controls playsinline style="border-radius:4px;"></video>`}generatePreview(){return be(this,Vt,Qr).call(this,this.file)?this.previewImage():be(this,Ln,na).call(this,this.file)?this.previewVideo():be(this,In,ra).call(this,this.file)?this.previewAudio():""}makePreview(){const n=this.root.querySelectorAll('[data-fpc-action="preview"]');this.file?n.forEach(r=>{const i=this.generatePreview();r.dataset.preview=!!i,r.innerHTML=i}):n.forEach(r=>{r.innerHTML=""})}setFile(n){this.file=n,this.templatePrepare()}removeFile(){const n=this.root.querySelectorAll('[data-fpc-action="preview"]');this.file=null,this.root.querySelectorAll('[data-fpc-action="preview"]'),n.forEach(r=>{r.innerHTML=""}),this.templatePrepare()}handleEvents(){this.root.querySelectorAll("[data-fpc-action]").forEach(n=>{const r=n.dataset.fpcAction.trim();r&&k(this,Jt)[r]&&n.addEventListener("click",i=>k(this,Jt)[r](i,n,this))})}launch(){this.root=this.document.getElementById(`root-${this.id}`),this.handleEvents()}init(){if(this.element)return this.template(),this}}Vt=new WeakSet,Qr=function(n){return/^https?:\/\/.+\.(jpg|jpeg|png|webp|avif|gif|svg)$/.test(n)},Ln=new WeakSet,na=function(n){return/^https?:\/\/.+\.(mp4|ogg|3gp|webm)$/.test(n)},In=new WeakSet,ra=function(n){return/^https?:\/\/.+\.(mp3)$/.test(n)},Jt=new WeakMap;mw.app=new Na;const Dd=new Od;mw.app.register("canvas",Dd);mw.app.register("commands",ka);mw.app.register("modules",Jl);mw.app.register("layouts",Gl);mw.app.register("license",Ql);mw.app.register("keyboard",Zl);mw.app.register("iconPicker",ec);mw.app.register("linkPicker",tc);mw.app.register("colorPicker",nc);mw.app.register("dynamicTargetMenus",Cd);mw.app.normalizeBase64Image=Nd;mw.app.normalizeBase64Images=Rd;mw.app.singleFilePickerComponent=e=>new Td(e);function Nd(e,t){var n,r;if(typeof e.src<"u"&&e.src.indexOf("data:image/")===0)n=e.src.split("/")[1].split(";")[0],r={file:e.src,name:mw.random().toString(36)+"."+n},$.post(mw.settings.api_url+"media/upload",r,function(o){o=$.parseJSON(o),e.src=o.src,mw.top().app.registerChange(e),mw.trigger("imageSrcChanged",[e,e.src]),typeof t=="function"&&t.call(e)});else if(e.style.backgroundImage.indexOf("data:image/")!==-1){var i=e.style.backgroundImage.replace(/url\(/g,"").replace(/\)/g,"");n=i.split("/")[1].split(";")[0],r={file:i,name:mw.random().toString(36)+"."+n},$.post(mw.settings.api_url+"media/upload",r,function(o){o=$.parseJSON(o),e.style.backgroundImage="url('"+o.src+"')",mw.top().app.registerChange(e),typeof t=="function"&&t.call(e)})}}function Rd(e,t){e=e||document.body;var n=e.querySelectorAll(".edit img[src*='data:image/'], .edit [style*='data:image/'][style*='background-image'], .mw-editor-area img[src*='data:image/'], .mw-editor-area [style*='data:image/'][style*='background-image']"),r=n.length,i=0,o=0;if(r>0){var a=document.getElementById("main-save-btn"),c;for(a&&(c=a.disabled,a.disabled=!0);i<r;i++)mw.tools.addClass(n[i],"element"),mw.wysiwyg.normalizeBase64Image(n[i],function(){o++,o===r&&(typeof t=="function"&&setTimeout(function(){t.call()},10),a&&(a.disabled=c))})}else typeof t=="function"&&setTimeout(function(){t.call()},10)}window.Alpine=Si;Si.plugin(Ad);Si.start();mw.options={saveOption:function(e,t,n){if(typeof e!="object")return!1;var r=e.group||e.option_group,i=e.key||e.option_key,o=typeof e.value<"u"?e.value:e.option_value;if(!r||!i||typeof o>"u")return!1;var a=!1;typeof e.lang<"u"&&(a=e.lang);var c=!1;typeof e.module<"u"&&(c=e.module);var f={option_group:r,option_key:i,option_value:o};return a&&(f.lang=a),c&&(f.module=c),$.ajax({type:"POST",url:mw.settings.site_url+"api/save_option",data:f,success:function(p){typeof t=="function"&&t.call(p)},error:function(p){typeof n=="function"&&n.call(p)}})},save:function(e,t){e=mw.$(e);var n,r,i;if(e){var o=e.attr("data-id");r=n=e.attr("option-group")||e.attr("option_group")||e.attr("data-option-group");var a=null,c=mw.tools.firstParentWithClass(e[0],"module");c&&(a=c.id,a=mw.$(c).attr("for-module-id")||c.id);var f=e.attr("data-reload")||e.attr("data-refresh"),p=e.attr("data-reload")||e.attr("data-also-reload"),m=mw.$(mw.dialog.get(e).container);if(i==null&&m!==void 0)var S=m.attr("data-settings-for-module");if(i==null)var i=e.attr("data-refresh");var T=0,D=m!==void 0?m.attr("data-type"):void 0,C,R,E;if(e[0].type==="checkbox")if(C="",R=e.attr("data-value-unchecked"),E=e.attr("data-value-checked"),R&&E)C=e[0].checked?E:R;else for(var x=document.getElementsByName(e[0].name),T=0,H=x.length;T<H;T++){var q=x[T].value;C=x[T].checked==!0?C===""?q:C+","+q:C}else C=e.val();typeof n>"u"&&typeof n>"u"&&a&&(n=a);var M={option_key:e.attr("name"),option_group:n,option_value:C};if(D===void 0)if(D===void 0&&c!==void 0&&c&&$(c).attr("data-type")){var W=$(c).attr("data-type");D=W.replace("/admin",""),M.module=D}else c!==void 0&&c&&$(c).attr("parent-module")&&(M.module=$(c).attr("parent-module"));D!==void 0&&(M.module=D),S!==void 0&&(M.for_module_id=S),n!=null&&(M.id=_);var _=e.attr("data-custom-field-id");_!=null&&(M.id=_);var b=e.attr("data-option-type");if(b!=null)M.option_type=b;else{var b=e.attr("option-type");b!=null&&(M.option_type=b)}var j=e.attr("parent-reload");o!==void 0&&(M.id=o);var te=e.attr("lang");typeof te<"u"&&(M.lang=te);var Y=e.attr("module");typeof Y<"u"&&(M.module=Y),$.ajax({type:"POST",url:mw.settings.site_url+"api/save_option",data:M,success:function(z){var X=null;typeof i>"u"?X=r:f&&(X=f),(typeof liveEditSettings<"u"&&liveEditSettings||mw.top().win.liveEditSettings)&&!r&&a&&(X=a);var ye=!1;mw.admin&&mw.top().win.mweditor&&mw.top().win.mweditor.contentWindow&&setTimeout(function(){mw.top().win.mweditor.contentWindow.mw.reload_module("#"+X)},777),window.parent.mw&&(self!==top&&setTimeout(function(){var xe=window.parent.document.getElementById(X);if(xe){var Q=window.mw.parent().tools.firstMatchesOnNodeOrParent(xe,[".edit:not([itemprop=dateModified])"]);Q||(Q=window.mw.parent().tools.firstMatchesOnNodeOrParent(xe,[".edit[rel=inherit]"])),Q&&(window.mw.parent().wysiwyg.change(Q),window.mw.parent().askusertostay=!0)}mw.reload_module_parent("#"+X),X!=r&&mw.reload_module_parent("#"+r),typeof mw<"u"&&mw.top().app&&mw.top().app.editor&&mw.top().app.editor.dispatch("onModuleSettingsChanged",{moduleId:X}),ye=1},777),window.mw.parent().reload_module!=null&&(mw.admin?setTimeout(function(){window.mw.parent().reload_module("#"+X),mw.options.___rebindAllFormsAfterReload()},777):(window.parent.mweditor!=null&&window.parent.mweditor.contentWindow.mw.reload_module("#"+X,function(){setTimeout(function(){window.mw.parent().exec("mw.admin.editor.set",window.parent.mweditor),mw.options.___rebindAllFormsAfterReload()},777)}),window.parent.mw!=null&&window.mw.parent().reload_module("#"+X,function(){setTimeout(function(){window.mw.parent().exec("mw.admin.editor.set",window.parent.mweditor),mw.options.___rebindAllFormsAfterReload()},777)})),ye=1)),p!=null&&window.mw!=null&&j!==!0&&window.mw.reload_module!==void 0&&(window.mw.reload_module(p,function(xe){mw.options.___rebindAllFormsAfterReload()}),window.mw.reload_module("#"+p,function(xe){mw.options.___rebindAllFormsAfterReload()})),ye==!1&&j!==!0&&X!=null&&X!=""&&(X=X.toString(),window.mw.reload_module!==void 0&&mw.reload_module_parent(X,function(){mw.reload_module_parent("#"+X,function(){mw.top().app.dispatch("moduleReloaded")})})),typeof t=="function"&&t.call(z),setTimeout(function(){mw.options.___rebindAllFormsAfterReload(),mw.top&&mw.top().app&&setTimeout(function(){mw.top().app.dispatch("moduleReloaded")},300)},300)}})}},tempOption:function(e,t){var n=[],r=e.getAttribute("data-mw-temp-option-save");r&&(n=JSON.parse(r));var i=t.group,o=t.key,a=n.findIndex(c=>c.group===i&&c.key===o);a!==-1?n[a]={...n[a],...t}:Array.isArray(n)?n.push(t):n=[t],e.setAttribute("data-mw-temp-option-save",JSON.stringify(n))},publishTempOptions:function(e){var t=e.querySelectorAll("[data-mw-temp-option-save]"),n=[];if(t)for(var r=0;r<t.length;r++){var i=t[r],o=i.getAttribute("data-mw-temp-option-save"),a=JSON.parse(o);if(a.length>0)for(var c=0;c<a.length;c++){var f=a[c];n.push(f)}i.removeAttribute("data-mw-temp-option-save")}if(n)for(var r=0;r<n.length;r++){var f=n[r];this.saveOption(f)}}};mw.options._optionSaved=null;mw.options._bindedRootFormsRegistry=[];mw.options.remove_bindings=function(e){var t=mw.$(e),n=t[0];n&&(n._optionsEvents&&(delete n._optionsEvents,n._optionsEventsClearBidings=!0),n.addClass("mw-options-form-force-rebind"),mw.$("input, select, textarea",n).not(".mw-options-form-binded-custom").each(function(){var r=mw.$(this);r&&r[0]&&r[0]._optionsEventsBinded&&delete r[0]._optionsEventsBinded}))};mw.options.form=function(e,t,n){var r=0,i=!1,o=mw.$(e),a=o[0];if(a&&(a&&o.hasClass("mw-options-form-force-rebind")&&(i=!0),a._optionsEvents||mw.$("input, select, textarea",a).not(".mw-options-form-binded-custom").each(function(){var m=mw.$(this);i&&(m[0]._optionsEventsBinded=null),m&&m[0]&&!m[0]._optionsEventsBinded&&m.hasClass("mw_option_field")&&(r++,m[0]._optionsEventsBinded=!0,a._optionsEventsClearBidings&&m.off("change input paste"),m.addClass("mw-options-form-binded"),m.on("change input paste",function(S){var T=this.name;mw.options.___slowDownEvent(T,this,function(){typeof a._optionsEvents.beforepost=="function"&&a._optionsEvents.beforepost.call(this),top!==self&&window.mw.parent().drag&&window.mw.parent().drag.save&&window.mw.parent().drag.save(),mw.options.save(this,a._optionsEvents.callback)})}))}),r>0)){a._optionsEvents=a._optionsEvents||{},a._optionsEvents=$.extend({},a._optionsEvents,{callback:t,beforepost:n});var c={};typeof a._optionsEvents.beforepost=="function"&&(c.beforepost=a._optionsEvents.beforepost),c.callback=a._optionsEvents.callback,c.binded_selector=e;var f=mw.tools.cloneObject(c),p=mw.options._bindedRootFormsRegistry.filter(function(m){return m.binded_selector===e});p.length||mw.options._bindedRootFormsRegistry.push(f)}};mw.options.___slowDownEvents={};mw.options.___slowDownEvent=function(e,t,n){typeof mw.options.___slowDownEvents[e]>"u"&&(mw.options.___slowDownEvents[e]=null),clearTimeout(mw.options.___slowDownEvents[e]),mw.options.___slowDownEvents[e]=setTimeout(function(){n.call(t)},700)};mw.options.___rebindAllFormsAfterReload=function(){var e="___rebindAllFormsAfterReload";mw.options.___slowDownEvent(e,this,function(){for(var t=0,n=mw.options._bindedRootFormsRegistry.length;t<n;t++){var r=mw.options._bindedRootFormsRegistry[t];if(r.binded_selector){var i=mw.$(r.binded_selector),o=i[0];if(o){var a=null,c=null;if(typeof r.beforepost=="function")var a=r.beforepost;if(typeof r.callback=="function")var c=r.callback;var f=!1;mw.$("input, select, textarea",o).not(".mw-options-form-binded-custom").not(".mw-options-form-binded").each(function(){var p=mw.$(this);p.hasClass("mw_option_field")&&(p[0]._optionsEventsBinded||(f=!0,p.attr("autocomplete","off")))}),o._optionsEvents&&f&&c&&(o._optionsEvents=null,o._optionsEventsClearBidings=!0,mw.options.form(r.binded_selector,c,a))}}}})};mw.pauseSave=!1;mw.askusertostay=!1;window.top===window&&(window.onbeforeunload=function(){if(mw.askusertostay)return mw.notification.warning(mw.lang("You have unsaved changes")),mw.lang("You have unsaved changes")});window.mwd=document;window.mww=window;window.mwhead=document.head||document.getElementsByTagName("head")[0];mw.doc=document;mw.win=window;mw.head=mwhead;mw.loaded=!1;mw._random=new Date().getTime();mw.random=function(){return mw._random++};mw.id=function(e){return e=e||"mw-",e+mw.random()};mw.onLive=function(e){typeof mw.settings.liveEdit=="boolean"&&mw.settings.liveEdit&&e.call(this)};mw.onAdmin=function(e){window.mwAdmin&&e.call(this)};mw.target={};mw.log=function(e){window.console&&mw.settings.debug&&top.console.log(e)};mw.$=function(e,t){if(typeof e=="object"||typeof e=="string"&&e.indexOf("<")!==-1)return jQuery(e);if(t=t||mwd,typeof document.querySelector<"u")if(typeof e=="string")try{return jQuery(t.querySelectorAll(e))}catch{return jQuery(e,t)}else return jQuery(e,t);else return jQuery(e,t)};mw.parent=function(){return window===top?window.mw:mw.tools.canAccessWindow(parent)&&parent.mw?parent.mw:window.mw};mw.top=function(){if(mw.__top)return mw.__top;var e=function(){for(var t=window,n=window;n&&mw.tools.canAccessWindow(n)&&(n.mw||n.parent.mw);)t=n,n=n.parent;return mw.__top=n.mw,t.mw};return window===top?(mw.__top=window.mw,window.mw):mw.tools.canAccessWindow(top)&&top.mw?(mw.__top=top.mw,top.mw):window.top!==window.parent?e():(mw.__top=window.mw,window.mw)};export{tc as L,Je as M,qt as a};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
