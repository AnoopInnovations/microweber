import{o as ee,c as te,a as P,_ as ze,n as Le,e as we,w as ne,v as Pr,t as yt,F as oe,f as En,k as Pe,h as il,r as ke,d as r,C as pa,m as ka,D as je,I as co,j as Ze,l as Jn,J as vo,K as Y,L as Rl,M as Ar,b as Br,N as Rr,O as gt,P as h,Q as tt,q as Sa,R as zn,p as Er,S as ui,U as Jt,V as Lr,s as W,W as Ve,X as K,Y as $e,z as ot,y as Z,Z as Xe,$ as wa,a0 as $t,x as nt,a1 as Ca,a2 as $r,a3 as Mr,u as Je,A as xe,a4 as Fr,T as Rt,a5 as xa,a6 as Hn,a7 as O,a8 as Or,a9 as Dr,aa as Nr,ab as zr,g as gl,ac as Hr,E as jr,G as Ur,H as Gr}from"./mitt-12ab5c85.js";const Wr=["innerHTML"],Yr={class:"form-control-live-edit-label-wrapper"},Kr=["value"],qr=P("span",{class:"form-control-live-edit-bottom-effect"},null,-1),Va={__name:"Input",props:{modelValue:String,label:String},emits:["update:modelValue"],setup(e){return(t,n)=>(ee(),te("div",null,[P("label",{class:"live-edit-label",innerHTML:e.label},null,8,Wr),P("div",null,[P("label",Yr,[P("input",{value:e.modelValue,onInput:n[0]||(n[0]=l=>t.$emit("update:modelValue",l.target.value)),class:"form-control-live-edit-input"},null,40,Kr),qr])])]))}},Xr={props:{textAlign:String},methods:{setTextAlignment(e){this.$emit("update:textAlign",e)}}},Zr={class:"form-control-live-edit-label-wrapper d-flex align-items-center"},Jr=P("label",{class:"live-edit-label px-0 col-4"},"Align",-1),Qr={class:"s-field-content ms-3"},eu={class:"text-align"},tu=P("span",{class:"mdi mdi-format-align-left"},null,-1),nu=[tu],lu=P("span",{class:"mdi mdi-format-align-center"},null,-1),au=[lu],ou=P("span",{class:"mdi mdi-format-align-right"},null,-1),iu=[ou],su=P("span",{class:"mdi mdi-format-align-justify"},null,-1),ru=[su];function uu(e,t,n,l,a,o){return ee(),te("div",Zr,[Jr,P("div",Qr,[P("div",eu,[P("span",{class:Le(["ta-left",{active:n.textAlign==="left"}]),onClick:t[0]||(t[0]=i=>o.setTextAlignment("left")),"data-value":"left"},nu,2),P("span",{class:Le(["ta-center",{active:n.textAlign==="center"}]),onClick:t[1]||(t[1]=i=>o.setTextAlignment("center")),"data-value":"center"},au,2),P("span",{class:Le(["ta-right",{active:n.textAlign==="right"}]),onClick:t[2]||(t[2]=i=>o.setTextAlignment("right")),"data-value":"right"},iu,2),P("span",{class:Le(["ta-justify",{active:n.textAlign==="justify"}]),onClick:t[3]||(t[3]=i=>o.setTextAlignment("justify")),"data-value":"justify"},ru,2)])])])}const cu=ze(Xr,[["render",uu]]),du={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center flex-wrap gap-2"},vu=["innerHTML"],fu=["value"],mu=["selected","value"],gu={props:{modelValue:String,label:String,options:Array},data(){return{selectedOption:this.modelValue}},watch:{modelValue(e){this.selectedOption!==e&&(this.selectedOption=e)}},methods:{handleInput(){this.selectedOption!==this.modelValue&&this.$emit("update:modelValue",this.selectedOption)}}},gn=Object.assign(gu,{__name:"DropdownSmall",emits:["update:modelValue"],setup(e){return(t,n)=>(ee(),te("div",du,[e.label?(ee(),te("label",{key:0,class:"live-edit-label px-0 col-4",innerHTML:e.label},null,8,vu)):we("",!0),ne(P("select",{"onUpdate:modelValue":n[0]||(n[0]=l=>t.selectedOption=l),class:"form-control-live-edit-input form-select",onInput:n[1]||(n[1]=l=>t.$emit("update:modelValue",l.target.value))},[t.selectedOption?(ee(),te("option",{key:0,value:t.selectedOption},yt(t.selectedOption),9,fu)):we("",!0),(ee(!0),te(oe,null,En(e.options,l=>(ee(),te("option",{selected:t.selectedOption===l.key,value:l.key},yt(l.value),9,mu))),256))],544),[[Pr,t.selectedOption]])]))}}),hu=["innerHTML"],yu={class:"form-control-live-edit-label-wrapper"},bu=["value"],_a={__name:"Dropdown",props:{modelValue:String,label:String,options:Array},emits:["update:modelValue"],setup(e){return(t,n)=>(ee(),te("div",null,[P("label",{class:"live-edit-label",innerHTML:e.label},null,8,hu),P("div",null,[P("label",yu,[P("select",{class:"form-select form-control-live-edit-input",onInput:n[0]||(n[0]=l=>t.$emit("update:modelValue",l.target.value))},[(ee(!0),te(oe,null,En(e.options,l=>(ee(),te("option",{value:l.key},yt(l.value),9,bu))),256))],32)])])]))}},pu={props:{value:String},watch:{value(e){this.fontFamily=e}},methods:{loadMoreFonts(){mw.top().app.fontManager.manageFonts()},selectFont(e){this.fontFamily=e,this.$emit("change",e)}},mounted(){setTimeout(()=>{this.supportedFonts=mw.top().app.fontManager.getFonts(),this.$forceUpdate(),mw.top().app.fontManager.subscribe(e=>{e&&(this.supportedFonts=e),this.$forceUpdate()})},1e3)},data(){return{supportedFonts:[],fontFamily:this.value}}},ku={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center flex-wrap gap-2"},Su=P("label",{class:"live-edit-label px-0 col-4"},"Font",-1),wu={class:"form-control-live-edit-input form-select",type:"button",ref:"dropdownButton",id:"fontDropdown","data-bs-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},Cu=P("span",{class:"font-picker-selected-font"}," Select ",-1),xu=[Cu],Vu={class:"dropdown-menu","aria-labelledby":"fontDropdown"},_u=["onClick"];function Iu(e,t,n,l,a,o){return ee(),te("div",ku,[Su,P("button",wu,[ne(P("div",null,[P("span",{class:"font-picker-selected-font",style:il({fontFamily:a.fontFamily})},yt(a.fontFamily),5)],512),[[Pe,a.fontFamily]]),ne(P("div",null,xu,512),[[Pe,!a.fontFamily]])],512),P("ul",Vu,[(ee(!0),te(oe,null,En(a.supportedFonts,(i,s)=>(ee(),te("li",{key:s,class:Le({active:i===a.fontFamily})},[P("a",{class:"dropdown-item",href:"#",onClick:u=>o.selectFont(i),style:il({fontFamily:i})},yt(i),13,_u)],2))),128))]),P("small",{class:"cursor-pointer ms-auto",onClick:t[0]||(t[0]=i=>o.loadMoreFonts())},"Load more fonts ")])}const Ia=ze(pu,[["render",Iu]]),Tu={props:{label:String,modelValue:Number,min:Number,max:Number,step:Number,unit:String},data(){return{selectedValue:this.modelValue}},methods:{resetValue(){this.selectedValue=null}},watch:{selectedValue(e){e!==this.modelValue&&this.$emit("update:modelValue",e)},modelValue(e){this.selectedValue=e}}},Pu={class:"form-control-live-edit-label-wrapper d-flex align-items-center"},Au={class:"live-edit-label px-0 col-4"},Bu={class:"col-6 ms-4","data-size":"medium"},Ru=P("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",height:"16",viewBox:"0 -960 960 960",width:"16"},[P("path",{d:"M440-122q-121-15-200.5-105.5T160-440q0-66 26-126.5T260-672l57 57q-38 34-57.5 79T240-440q0 88 56 155.5T440-202v80Zm80 0v-80q87-16 143.5-83T720-440q0-100-70-170t-170-70h-3l44 44-56 56-140-140 140-140 56 56-44 44h3q134 0 227 93t93 227q0 121-79.5 211.5T520-122Z"})],-1),Eu=[Ru];function Lu(e,t,n,l,a,o){const i=ke("v-slider");return ee(),te("div",Pu,[P("label",Au,yt(n.label)+" "+yt(a.selectedValue)+yt(n.unit),1),P("div",Bu,[r(i,{min:n.min,max:n.max,step:n.step,modelValue:a.selectedValue,"onUpdate:modelValue":t[0]||(t[0]=s=>a.selectedValue=s)},null,8,["min","max","step","modelValue"]),P("span",{onClick:t[1]||(t[1]=(...s)=>o.resetValue&&o.resetValue(...s)),class:"reset-field tip mw-action-buttons-background-circle-on-hover","data-tipposition":"top-right","data-tip":"Restore default value"},Eu)])])}const Ta=ze(Tu,[["render",Lu]]),$u={components:{ColorPicker:pa,FontPicker:Ia,Dropdown:_a,Input:Va,Slider:ka,Align:cu,DropdownSmall:gn,SliderSmall:Ta},data(){return{showTypography:!1,activeNode:null,isReady:!1,textTransformOptions:[{key:"none",value:"None"},{key:"capitalize",value:"Capitalize"},{key:"uppercase",value:"Uppercase"},{key:"lowercase",value:"Lowercase"}],fontWeightOptions:[{key:"normal",value:"Normal"},{key:"bold",value:"Bold"},{key:"bolder",value:"Bolder"},{key:"lighter",value:"Lighter"},{key:"100",value:"100"},{key:"200",value:"200"},{key:"300",value:"300"},{key:"400",value:"400"},{key:"500",value:"500"},{key:"600",value:"600"},{key:"700",value:"700"},{key:"800",value:"800"},{key:"900",value:"900"}],fontStylesOptions:[{key:"normal",value:"Normal"},{key:"italic",value:"Italic"},{key:"oblique",value:"Oblique"}],textAlign:null,fontSize:null,fontWeight:null,fontStyle:null,lineHeight:null,fontFamily:null,color:null,textTransform:"none",textDecorationIsBold:null,textDecorationIsItalic:null,textDecorationIsUnderline:null,textDecorationIsStrikethrough:null}},methods:{toggleTypography(){this.showTypography=!this.showTypography,this.emitter.emit("element-style-editor-show","typography")},resetAllProperties:function(){this.fontSize=null,this.fontWeight=null,this.fontStyle=null,this.lineHeight=null,this.fontFamily=null,this.color=null,this.textTransform="none",this.textDecorationIsBold=null,this.textDecorationIsItalic=null,this.textDecorationIsUnderline=null,this.textDecorationIsStrikethrough=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){mw.top().app.dispatch("mw.elementStyleEditor.closeAllOpenedMenus");var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssTextAlign(t),this.populateCssTextDecoration(t),this.populateCssFont(t),this.populateCssTextTransform(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssTextAlign:function(e){if(!(!e||!e.get)){var t=e.get.alignNormalize();this.textAlign=t}},populateCssTextDecoration:function(e){if(!(!e||!e.get)){var t=e.get.is();this.textDecorationIsBold=t.bold,this.textDecorationIsItalic=t.italic,this.textDecorationIsUnderline=t.underlined,this.textDecorationIsStrikethrough=t.striked}},setTextAlignment:function(e){this.textAlign=e},handleFontChange:function(e){this.fontFamily=e},handleFontColorChange:function(e){typeof e=="string"&&(this.color=e)},populateCssFont:function(e){if(!(!e||!e.get)){var t=e.get.font();t.size&&(t.size=t.size.replace("px","")),t.lineHeight&&(t.lineHeight=t.lineHeight.replace("px","")),this.fontSize=t.size,this.fontWeight=t.weight,this.fontStyle=t.style,this.lineHeight=t.lineHeight,this.fontFamily=t.family,this.color=t.color}},populateCssTextTransform:function(e){if(!(!e||!e.get)){var t=e.get.textTransform();this.textTransform=t}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="typography"&&(this.showTypography=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{fontFamily:function(e,t){this.applyPropertyToActiveNode("fontFamily",e)},fontSize:function(e,t){this.applyPropertyToActiveNode("fontSize",e+"px")},fontWeight:function(e,t){this.applyPropertyToActiveNode("fontWeight",e)},fontStyle:function(e,t){this.applyPropertyToActiveNode("fontStyle",e)},textAlign:function(e,t){this.applyPropertyToActiveNode("textAlign",e)},lineHeight:function(e,t){var n=!1;if(typeof e>"u"&&(n=!0),e==null&&(n=!0),n){this.applyPropertyToActiveNode("lineHeight","auto");return}this.applyPropertyToActiveNode("lineHeight",e+"px")},color:function(e,t){this.applyPropertyToActiveNode("color",e)},textTransform:function(e,t){this.applyPropertyToActiveNode("textTransform",e)}}},Mu={class:"d-flex"},Fu={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Ou=P("path",{d:"M21,7V3h-4v1H7V3H3v4h1v10H3v4h4v-1h10v1h4v-4h-1V7H21 M18,4h2v2h-2V4 M4,4h2v2H4V4 M6,20H4v-2h2V20 M20,20h-2v-2h2V20   M18,17h-1v1H7v-1H6V7h1V6h10v1h1V17 M16,8v2h-3v6h-2v-6H8V8H16z"},null,-1),Du=[Ou],Nu={key:0},zu={class:"my-4 pt-2"};function Hu(e,t,n,l,a,o){const i=ke("FontPicker"),s=ke("Align"),u=ke("ColorPicker"),c=ke("SliderSmall"),d=ke("DropdownSmall");return ee(),te(oe,null,[P("div",Mu,[(ee(),te("svg",Fu,Du)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showTypography}]),onClick:t[0]||(t[0]=(...f)=>o.toggleTypography&&o.toggleTypography(...f))}," Typography ",2)]),a.showTypography?(ee(),te("div",Nu,[P("div",null,[P("div",zu,[r(i,{modelValue:a.fontFamily,"onUpdate:modelValue":t[1]||(t[1]=f=>a.fontFamily=f),value:a.fontFamily,onChange:o.handleFontChange,label:"Family"},null,8,["modelValue","value","onChange"])]),r(s,{textAlign:a.textAlign,"onUpdate:textAlign":o.setTextAlignment},null,8,["textAlign","onUpdate:textAlign"]),r(u,{modelValue:a.color,"onUpdate:modelValue":t[2]||(t[2]=f=>a.color=f),color:a.color,label:"Color",onChange:o.handleFontColorChange},null,8,["modelValue","color","onChange"]),r(c,{label:"Size",modelValue:a.fontSize,"onUpdate:modelValue":t[3]||(t[3]=f=>a.fontSize=f),min:0,max:100,step:5},null,8,["modelValue"]),r(d,{modelValue:a.fontWeight,"onUpdate:modelValue":t[4]||(t[4]=f=>a.fontWeight=f),options:a.fontWeightOptions,label:"Weight"},null,8,["modelValue","options"]),r(d,{modelValue:a.textTransform,"onUpdate:modelValue":t[5]||(t[5]=f=>a.textTransform=f),options:a.textTransformOptions,label:"Transform"},null,8,["modelValue","options"]),r(d,{modelValue:a.fontStyle,"onUpdate:modelValue":t[6]||(t[6]=f=>a.fontStyle=f),options:a.fontStylesOptions,label:"Style"},null,8,["modelValue","options"]),r(c,{label:"Height",modelValue:a.lineHeight,"onUpdate:modelValue":t[7]||(t[7]=f=>a.lineHeight=f),min:0,max:100,step:5},null,8,["modelValue"])])])):we("",!0)],64)}const ju=ze($u,[["render",Hu]]);const Uu={data(){return{showSpacing:!1,activeNode:null,isReady:!1,marginTop:null,marginRight:null,marginBottom:null,marginLeft:null,paddingTop:null,paddingRight:null,paddingBottom:null,paddingLeft:null}},methods:{toggleSpacing:function(){this.showSpacing=!this.showSpacing,this.emitter.emit("element-style-editor-show","spacing")},resetAllProperties:function(){this.marginTop=null,this.marginRight=null,this.marginBottom=null,this.marginLeft=null,this.paddingTop=null,this.paddingRight=null,this.paddingBottom=null,this.paddingLeft=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssPadding(t),this.populateCssMargin(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssPadding:function(e){var t=e.get.padding(void 0,!0);this.paddingTop=parseFloat(t.top),this.paddingRight=parseFloat(t.right),this.paddingBottom=parseFloat(t.bottom),this.paddingLeft=parseFloat(t.left)},populateCssMargin:function(e){if(!(!e||!e.get)){var t=e.get.margin(void 0,!0);this.marginTop=parseFloat(t.top),this.marginRight=parseFloat(t.right),this.marginBottom=parseFloat(t.bottom),this.marginLeft=parseFloat(t.left)}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="spacing"&&(this.showSpacing=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{marginTop:function(e,t){this.applyPropertyToActiveNode("marginTop",e+"px")},marginRight:function(e,t){this.applyPropertyToActiveNode("marginRight",e+"px")},marginBottom:function(e,t){this.applyPropertyToActiveNode("marginBottom",e+"px")},marginLeft:function(e,t){this.applyPropertyToActiveNode("marginLeft",e+"px")},paddingTop:function(e,t){this.applyPropertyToActiveNode("paddingTop",e+"px")},paddingRight:function(e,t){this.applyPropertyToActiveNode("paddingRight",e+"px")},paddingBottom:function(e,t){this.applyPropertyToActiveNode("paddingBottom",e+"px")},paddingLeft:function(e,t){this.applyPropertyToActiveNode("paddingLeft",e+"px")}}},Gu={class:"d-flex"},Wu={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Yu=P("path",{d:"M10.6,12l4-4H11V6h7v7h-2V9.4l-4,4V16h8V4H8v8H10.6 M22,2v16H12v4H2V12h4V2H22 M10,14H4v6h6V14z"},null,-1),Ku=[Yu],qu={key:0},Xu={class:"mw-element-spacing-editor mt-4"},Zu=P("span",{class:"mw-ese-label"},"Margin",-1),Ju={class:"mw-ese-holder mw-ese-margin"},Qu={class:"input mw-ese-top"},ec={class:"input mw-ese-right"},tc={class:"input mw-ese-bottom"},nc={class:"input mw-ese-left"},lc={class:"mw-ese-holder mw-ese-padding"},ac={class:"input mw-ese-top"},oc={class:"input mw-ese-right"},ic={class:"input mw-ese-bottom"},sc={class:"input mw-ese-left"},rc=P("span",{class:"mw-ese-label"},"Padding",-1);function uc(e,t,n,l,a,o){return ee(),te(oe,null,[P("div",Gu,[(ee(),te("svg",Wu,Ku)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showSpacing}]),onClick:t[0]||(t[0]=(...i)=>o.toggleSpacing&&o.toggleSpacing(...i))}," Spacing ",2)]),a.showSpacing?(ee(),te("div",qu,[P("div",Xu,[Zu,P("div",Ju,[P("span",Qu,[ne(P("input",{type:"text","onUpdate:modelValue":t[1]||(t[1]=i=>a.marginTop=i)},null,512),[[je,a.marginTop]])]),P("span",ec,[ne(P("input",{type:"text","onUpdate:modelValue":t[2]||(t[2]=i=>a.marginRight=i)},null,512),[[je,a.marginRight]])]),P("span",tc,[ne(P("input",{type:"text","onUpdate:modelValue":t[3]||(t[3]=i=>a.marginBottom=i)},null,512),[[je,a.marginBottom]])]),P("span",nc,[ne(P("input",{type:"text","onUpdate:modelValue":t[4]||(t[4]=i=>a.marginLeft=i)},null,512),[[je,a.marginLeft]])]),P("div",lc,[P("span",ac,[ne(P("input",{type:"text",min:"0","onUpdate:modelValue":t[5]||(t[5]=i=>a.paddingTop=i)},null,512),[[je,a.paddingTop]])]),P("span",oc,[ne(P("input",{type:"text",min:"0","onUpdate:modelValue":t[6]||(t[6]=i=>a.paddingRight=i)},null,512),[[je,a.paddingRight]])]),P("span",ic,[ne(P("input",{type:"text",min:"0","onUpdate:modelValue":t[7]||(t[7]=i=>a.paddingBottom=i)},null,512),[[je,a.paddingBottom]])]),P("span",sc,[ne(P("input",{type:"text",min:"0","onUpdate:modelValue":t[8]||(t[8]=i=>a.paddingLeft=i)},null,512),[[je,a.paddingLeft]])]),rc])])])])):we("",!0)],64)}const cc=ze(Uu,[["render",uc]]);const dc={props:{label:{type:String,default:"Image"},file:{type:String,default:""}},data(){return{selectedFile:this.file}},watch:{file(e){this.selectedFile=e}},methods:{selectBackgroundImage(){mw.filePickerDialog(e=>{this.selectedFile=e,this.$emit("change",this.selectedFile)})},removeBackgroundImage(){this.selectedFile="",this.$emit("change",this.selectedFile)},resetBackgroundImage(){this.$emit("change",this.selectedFile)}}},vc={class:"form-control-live-edit-label-wrapper my-4 background-image-nav d-flex align-items-center gap-2"},fc={class:"live-edit-label px-0 text-start"},mc={class:"d-flex col"},gc=P("svg",{xmlns:"http://www.w3.org/2000/svg",height:"20",viewBox:"0 -960 960 960",width:"20"},[P("path",{d:"M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h560q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H200Zm0-80h560v-560H200v560Zm40-80h480L570-480 450-320l-90-120-120 160Zm-40 80v-560 560Z"})],-1),hc={key:0,class:"background-preview",style:{"background-image":"none"}},yc={class:"d-flex ms-auto justify-content-end pe-4"},bc=P("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",height:"16",viewBox:"0 -960 960 960",width:"16"},[P("path",{d:"M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z"})],-1),pc=[bc];function kc(e,t,n,l,a,o){return ee(),te("div",vc,[P("label",fc,yt(n.label),1),P("div",mc,[P("div",null,[P("span",{class:"mw-ui-btn mw-ui-btn-outline tip background-select-item",style:{border:"1px solid #000"},onClick:t[0]||(t[0]=(...i)=>o.selectBackgroundImage&&o.selectBackgroundImage(...i)),"data-tip":"Select background image"},[gc,a.selectedFile?we("",!0):(ee(),te("span",hc)),a.selectedFile?(ee(),te("span",{key:1,class:"background-preview",style:il({backgroundImage:`url(${a.selectedFile})`})},null,4)):we("",!0)])]),P("div",yc,[a.selectedFile?(ee(),te("span",{key:0,class:"mw-action-buttons-background-circle-on-hover",onClick:t[1]||(t[1]=(...i)=>o.removeBackgroundImage&&o.removeBackgroundImage(...i)),"data-tip":"Remove background","data-tipposition":"top-right"},pc)):we("",!0)])])])}const Sc=ze(dc,[["render",kc]]);const wc={props:{file:{type:String,default:""},name:{type:String,default:"file"}},data(){return{showPicker:!1,iconDelete:!1,selectedFile:this.$props.file}},mounted(){mw.top().app.on("mw.elementStyleEditor.closeAllOpenedMenus",()=>{this.closePicker()})},watch:{file(e){this.selectedFile=e}},methods:{changefile(e){this.selectedFile=e.hex,this.$props.file=e.hex},triggerChangeSelectedFile(){this.$props.file=this.selectedFile,this.$emit("change",this.$props.file)},triggerChange(){this.$emit("change",this.$props.file)},removeBackgroundImage(){this.selectedFile="",this.$props.file="",this.$emit("change",this.$props.file)},closePicker(){this.showPicker=!1},togglePicker(){mw.filePickerDialog(e=>{this.selectedFile=e,this.$props.file=e,this.$emit("change",this.$props.file)}),this.showPicker=!this.showPicker}}},Cc={class:"d-inline-flex"},xc=P("i",{class:"mdi mdi-delete"},null,-1),Vc=[xc];function _c(e,t,n,l,a,o){return ee(),te("div",Cc,[ne(P("input",{type:"hidden",ref:"filepickerinput","onUpdate:modelValue":t[0]||(t[0]=i=>a.selectedFile=i),onInput:t[1]||(t[1]=(...i)=>o.triggerChangeSelectedFile&&o.triggerChangeSelectedFile(...i))},null,544),[[je,a.selectedFile]]),a.selectedFile?(ee(),te("button",{key:0,type:"button",class:"btn btn-link btn-sm",onClick:t[2]||(t[2]=i=>o.removeBackgroundImage())},Vc)):we("",!0),a.selectedFile?(ee(),te("div",{key:1,class:"file-picker-badge",onClick:t[3]||(t[3]=(...i)=>o.togglePicker&&o.togglePicker(...i)),style:il({backgroundImage:"url("+a.selectedFile+")"})},null,4)):we("",!0),a.selectedFile?we("",!0):(ee(),te("div",{key:2,class:"file-picker-badge",onClick:t[4]||(t[4]=(...i)=>o.togglePicker&&o.togglePicker(...i))}))])}const Ic=ze(wc,[["render",_c]]),Tc={components:{ColorPicker:pa,FontPicker:Ia,Dropdown:_a,Input:Va,Slider:ka,FilePicker:Ic,ImagePicker:Sc,DropdownSmall:gn},data(){return{showBackground:!1,backgroundPositionOptions:[{key:"none",value:"None"},{key:"0% 0%",value:"Left Top"},{key:"50% 0%",value:"Center Top"},{key:"100% 0%",value:"Right Top"},{key:"0% 50%",value:"Left Center"},{key:"50% 50%",value:"Center Center"},{key:"100% 50%",value:"Right Center"},{key:"0% 100%",value:"Left Bottom"},{key:"50% 100%",value:"Center Bottom"},{key:"100% 100%",value:"Right Bottom"}],backgroundRepeatOptions:[{key:"none",value:"None"},{key:"repeat",value:"repeat"},{key:"no-repeat",value:"no-repeat"},{key:"repeat-x",value:"repeat horizontally"},{key:"repeat-y",value:"repeat vertically"}],backgroundClipOptions:[{key:"border-box",value:"Border Box"},{key:"content-box",value:"Content Box"},{key:"text",value:"Text"}],backgroundSizeOptions:[{key:"none",value:"None"},{key:"auto",value:"Auto"},{key:"contain",value:"Fit"},{key:"cover",value:"Cover"},{key:"100% 100%",value:"Scale"}],activeNode:null,isReady:!1,backgroundImage:null,backgroundColor:null,backgroundPosition:null,backgroundRepeat:null,backgroundSize:null,backgroundImageUrl:null,backgroundClip:null}},methods:{toggleBackground:function(){this.showBackground=!this.showBackground,this.emitter.emit("element-style-editor-show","background")},resetAllProperties:function(){this.backgroundImage=null,this.backgroundImageUrl=null,this.backgroundColor=null,this.backgroundPosition=null,this.backgroundRepeat=null,this.backgroundSize=null,this.backgroundClip=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBackground(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBackground:function(e){if(!(!e||!e.get)){var t=e.get.background();t.image&&t.image.indexOf("url(")!==-1&&(this.backgroundImageUrl=t.image.replace("url(","").replace(")",""),this.backgroundImageUrl=this.backgroundImageUrl.replace(/\"/g,"")),this.backgroundImage=t.image,this.backgroundColor=t.color,this.backgroundPosition=t.position,this.backgroundRepeat=t.repeat,this.backgroundSize=t.size,this.backgroundClip=t.clip}},handleBackgroundColorChange:function(e){typeof e=="string"&&(this.backgroundColor=e)},handleBackgroundImageChange:function(e){var t=e;e&&e!=""&&e!="none"&&e!="inherit"&&e!="initial"?(this.backgroundImageUrl=e,e.indexOf("url(")===-1&&(t="url("+e+")")):this.backgroundImageUrl="",t==null&&(t="none"),this.backgroundImage=t},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="background"&&(this.showBackground=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{backgroundImage:function(e,t){this.applyPropertyToActiveNode("backgroundImage",e)},backgroundClip:function(e,t){e=="text"?(this.applyPropertyToActiveNode("backgroundClip","text"),this.applyPropertyToActiveNode("-webkitBackgroundClip","text"),this.applyPropertyToActiveNode("color","rgba(0,0,0,0)")):(this.applyPropertyToActiveNode("backgroundClip",e),this.applyPropertyToActiveNode("-webkitBackgroundClip",e),this.applyPropertyToActiveNode("color",""))},backgroundColor:function(e,t){this.applyPropertyToActiveNode("backgroundColor",e)},backgroundPosition:function(e,t){this.applyPropertyToActiveNode("backgroundPosition",e)},backgroundRepeat:function(e,t){this.applyPropertyToActiveNode("backgroundRepeat",e)},backgroundSize:function(e,t){this.applyPropertyToActiveNode("backgroundSize",e)}}},Pc={class:"d-flex"},Ac={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Bc=P("path",{d:"M12.2,3.9c4.5,0,8.1,3.6,8.1,8.1s-3.6,8.1-8.1,8.1S4.1,16.5,4.1,12S7.7,3.9,12.2,3.9"},null,-1),Rc=[Bc],Ec={key:0};function Lc(e,t,n,l,a,o){const i=ke("ColorPicker"),s=ke("ImagePicker"),u=ke("DropdownSmall");return ee(),te(oe,null,[P("div",Pc,[(ee(),te("svg",Ac,Rc)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showBackground}]),onClick:t[0]||(t[0]=(...c)=>o.toggleBackground&&o.toggleBackground(...c))}," Background ",2)]),a.showBackground?(ee(),te("div",Ec,[r(i,{modelValue:a.backgroundColor,"onUpdate:modelValue":t[1]||(t[1]=c=>a.backgroundColor=c),color:a.backgroundColor,label:"Color",onChange:o.handleBackgroundColorChange},null,8,["modelValue","color","onChange"]),r(s,{label:"Image",modelValue:a.backgroundImage,"onUpdate:modelValue":t[2]||(t[2]=c=>a.backgroundImage=c),file:a.backgroundImageUrl,onChange:o.handleBackgroundImageChange},null,8,["modelValue","file","onChange"]),r(u,{modelValue:a.backgroundSize,"onUpdate:modelValue":t[3]||(t[3]=c=>a.backgroundSize=c),options:a.backgroundSizeOptions,label:"Size"},null,8,["modelValue","options"]),r(u,{modelValue:a.backgroundRepeat,"onUpdate:modelValue":t[4]||(t[4]=c=>a.backgroundRepeat=c),options:a.backgroundRepeatOptions,label:"Repeat"},null,8,["modelValue","options"]),r(u,{modelValue:a.backgroundPosition,"onUpdate:modelValue":t[5]||(t[5]=c=>a.backgroundPosition=c),options:a.backgroundPositionOptions,label:"Position"},null,8,["modelValue","options"]),r(u,{modelValue:a.backgroundClip,"onUpdate:modelValue":t[6]||(t[6]=c=>a.backgroundClip=c),options:a.backgroundClipOptions,label:"Clip"},null,8,["modelValue","options"])])):we("",!0)],64)}const $c=ze(Tc,[["render",Lc]]),Mc={props:{modelValue:Object},data(){return{selectedBorderRadius:{borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""}}},watch:{modelValue(e){e&&(this.selectedBorderRadius={...e})}},methods:{updateValues(){this.$emit("update:modelValue",this.selectedBorderRadius)}}},Fc={class:"d-flex justify-content-center align-items-center"},Oc={class:"rounded-corners my-5"},Dc={class:"s-field-content"},Nc={class:"mw-field mw-field-flat"},zc={class:"mw-multiple-fields"},Hc={class:"mw-field mw-field-flat"},jc=P("span",{class:"mw-field mw-field-flat-prepend order-2"},[P("i",{class:"angle angle-top-left"})],-1),Uc={class:"mw-field mw-field-flat"},Gc=P("span",{class:"mw-field mw-field-flat-prepend"},[P("i",{class:"angle angle-top-right"})],-1),Wc={class:"mw-field mw-field-flat"},Yc={class:"mw-multiple-fields"},Kc={class:"mw-field mw-field-flat"},qc=P("span",{class:"mw-field mw-field-flat-prepend order-2"},[P("i",{class:"angle angle-bottom-left"})],-1),Xc={class:"mw-field mw-field-flat"},Zc=P("span",{class:"mw-field mw-field-flat-prepend"},[P("i",{class:"angle angle-bottom-right"})],-1);function Jc(e,t,n,l,a,o){return ee(),te("div",Fc,[P("div",Oc,[P("div",Dc,[P("div",Nc,[P("div",zc,[P("div",Hc,[ne(P("input",{type:"number",class:"regular order-1 text-center",name:"borderTopLeftRadius",autocomplete:"off","onUpdate:modelValue":t[0]||(t[0]=i=>a.selectedBorderRadius.borderTopLeftRadius=i),onInput:t[1]||(t[1]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderTopLeftRadius]]),jc]),P("div",Uc,[Gc,ne(P("input",{class:"regular text-center",type:"number",name:"borderTopRightRadius",autocomplete:"off","onUpdate:modelValue":t[2]||(t[2]=i=>a.selectedBorderRadius.borderTopRightRadius=i),onInput:t[3]||(t[3]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderTopRightRadius]])])])]),P("div",Wc,[P("div",Yc,[P("div",Kc,[ne(P("input",{class:"regular order-1 text-center",type:"number",name:"borderBottomLeftRadius",autocomplete:"off","onUpdate:modelValue":t[4]||(t[4]=i=>a.selectedBorderRadius.borderBottomLeftRadius=i),onInput:t[5]||(t[5]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderBottomLeftRadius]]),qc]),P("div",Xc,[Zc,ne(P("input",{class:"regular text-center",type:"number",name:"borderBottomRightRadius",autocomplete:"off","onUpdate:modelValue":t[6]||(t[6]=i=>a.selectedBorderRadius.borderBottomRightRadius=i),onInput:t[7]||(t[7]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderBottomRightRadius]])])])])])])])}const ci=ze(Mc,[["render",Jc]]);const Qc={components:{Dropdown:_a,Input:Va,FontPicker:Ia,ColorPicker:pa,Slider:ka,DropdownSmall:gn,SliderSmall:Ta,BorderRadius:ci},data(){return{showBorder:!1,activeNode:null,isReady:!1,borderPositionOptions:[{key:"all",value:"All"},{key:"top",value:"Top"},{key:"right",value:"Right"},{key:"bottom",value:"Bottom"},{key:"left",value:"Left"}],borderStylesOptions:[{key:"none",value:"None"},{key:"solid",value:"Solid"},{key:"dotted",value:"Dotted"},{key:"dashed",value:"Dashed"},{key:"double",value:"Double"},{key:"groove",value:"Groove"},{key:"ridge",value:"Ridge"},{key:"inset",value:"Inset"},{key:"outset",value:"Outset"}],borderPosition:null,borderSize:null,borderColor:null,borderImage:null,borderImageUrl:null,borderStyle:null,borderRadius:{borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""},borderTopLeftRadius:null,borderTopRightRadius:null,borderBottomRightRadius:null,borderBottomLeftRadius:null}},methods:{toggleBorder:function(){this.showBorder=!this.showBorder,this.emitter.emit("element-style-editor-show","border")},handleBorderColorChange(e){typeof e=="string"&&(this.borderColor=e)},resetAllProperties:function(){this.borderPosition=null,this.borderSize=null,this.borderColor=null,this.borderStyle=null,this.borderRadius={borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""},this.borderTopLeftRadius=null,this.borderTopRightRadius=null,this.borderBottomRightRadius=null,this.borderBottomLeftRadius=null,this.borderImageUrl=null,this.borderImage=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBorder(t),this.populateCssBorderRadius(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBorder:function(e){if(!(!e||!e.get)){var t=e.get.border(!0),n={};for(var l in t)if(t[l].width!==0){n=t[l];break}var a=n.width||0,o=n.color||"rgba(0,0,0,1)",i=n.style||"none";this.borderSize=a,this.borderColor=o,this.borderStyle=i,this.borderPosition="all"}},populateCssBorderRadius:function(e){if(!(!e||!e.get)){var t=e.get.radius(!0);this.borderTopLeftRadius=t.tl,this.borderTopRightRadius=t.tr,this.borderBottomRightRadius=t.br,this.borderBottomLeftRadius=t.bl,this.borderRadius={borderTopLeftRadius:t.tl,borderTopRightRadius:t.tr,borderBottomLeftRadius:t.bl,borderBottomRightRadius:t.br}}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="border"&&(this.showBorder=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{borderRadius:function(e,t){var n="";e.borderTopLeftRadius?n+=e.borderTopLeftRadius+"px ":n+="0px ",e.borderTopRightRadius?n+=e.borderTopRightRadius+"px ":n+="0px ",e.borderBottomRightRadius?n+=e.borderBottomRightRadius+"px ":n+="0px ",e.borderBottomLeftRadius?n+=e.borderBottomLeftRadius+"px ":n+="0px ",this.applyPropertyToActiveNode("border-radius",n)},borderImageUrl:function(e,t){var n="";n+="url("+e+") ",n+=this.borderSize+" ",n+=" space ",this.borderImage=n},borderImage:function(e,t){this.applyPropertyToActiveNode("border-image",e)},borderPosition:function(e,t){this.applyPropertyToActiveNode("borderPosition",e)},borderSize:function(e,t){this.applyPropertyToActiveNode("border-width",e+"px")},borderColor:function(e,t){this.applyPropertyToActiveNode("border-color",e)},borderStyle:function(e,t){this.applyPropertyToActiveNode("border-style",e)}}},ed={class:"d-flex"},td={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},nd=P("path",{d:"M15,21h2v-2h-2 M19,21h2v-2h-2 M7,21h2v-2H7 M11,21h2v-2h-2 M19,17h2v-2h-2 M19,13h2v-2h-2 M3,3v18h2V5h16V3 M19,9h2V7h-2"},null,-1),ld=[nd],ad={key:0};function od(e,t,n,l,a,o){const i=ke("DropdownSmall"),s=ke("SliderSmall"),u=ke("ColorPicker");return ee(),te(oe,null,[P("div",ed,[(ee(),te("svg",td,ld)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showBorder}]),onClick:t[0]||(t[0]=(...c)=>o.toggleBorder&&o.toggleBorder(...c))}," Border ",2)]),a.showBorder?(ee(),te("div",ad,[r(i,{modelValue:a.borderStyle,"onUpdate:modelValue":t[1]||(t[1]=c=>a.borderStyle=c),options:a.borderStylesOptions,label:"Style"},null,8,["modelValue","options"]),r(i,{modelValue:a.borderPosition,"onUpdate:modelValue":t[2]||(t[2]=c=>a.borderPosition=c),options:a.borderPositionOptions,label:"Position"},null,8,["modelValue","options"]),r(s,{label:"Size",modelValue:a.borderSize,"onUpdate:modelValue":t[3]||(t[3]=c=>a.borderSize=c),min:0,max:30,step:1},null,8,["modelValue"]),r(u,{modelValue:a.borderColor,"onUpdate:modelValue":t[4]||(t[4]=c=>a.borderColor=c),color:a.borderColor,label:"Color",onChange:o.handleBorderColorChange},null,8,["modelValue","color","onChange"])])):we("",!0)],64)}const id=ze(Qc,[["render",od]]);const sd={data(){return{nodeTagName:null,displayNodeInfo:null,displayDomTree:null,activeNode:null,domTree:null,isReady:!1}},methods:{toggleDomTree:function(){this.displayDomTree=!this.displayDomTree,this.displayDomTree&&this.populateDomTree(this.activeNode)},populateStyleEditor:function(e){e&&e&&e.nodeType===1&&(this.isReady=!1,this.displayNodeInfo=!1,this.domTree=!1,this.activeNode=e,this.populateSelectedNode(e),this.populateDomTree(e),setTimeout(()=>{this.isReady=!0},100))},populateSelectedNode:function(e){this.nodeTagName=e.tagName,e.id?this.displayNodeInfo=e.tagName:this.displayNodeInfo=e.tagName},populateDomTree:function(e){this.displayDomTree&&(this.domTree=new mw.DomTree({element:"#domtree",resizable:!0,targetDocument:e.ownerDocument,canSelect:function(t,n){mw.top().app.liveEdit.canBeElement(t);var l=mw.top().app.liveEdit.liveEditHelpers.targetIsInacesibleModule(t);return!l},onHover:function(t,n,l,a){},onSelect:(t,n,l,a)=>{mw.top().app.dispatch("mw.elementStyleEditor.selectNode",l),l.ownerDocument.defaultView.mw&&l.ownerDocument.defaultView.mw.tools.scrollTo(l,!1,100)}}),this.domTree.select(e))}},mounted(){mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})}},rd={class:"well"},ud=P("div",{id:"domtree"},null,-1),cd=[ud],dd={class:"d-flex align-items-center justify-content-between gap-2"},vd=P("label",{class:"live-edit-label mb-0"},"Selected element:",-1);function fd(e,t,n,l,a,o){return ne((ee(),te("div",null,[P("div",rd,[ne(P("div",null,cd,512),[[Pe,a.displayDomTree]]),P("div",dd,[vd,P("button",{type:"button",class:Le([{"btn-dark":a.displayDomTree,"btn-outline-dark":!a.displayDomTree},"btn btn-sm"]),onClick:t[0]||(t[0]=(...i)=>o.toggleDomTree&&o.toggleDomTree(...i))},yt(a.displayNodeInfo),3)])])],512)),[[Pe,a.displayNodeInfo]])}const md=ze(sd,[["render",fd]]),gd={components:{DropdownSmall:gn},data(){return{showContainer:!1,activeContainerNode:null,isReady:!1,hasContainer:!1,containerType:null}},methods:{toggleContainer:function(){this.showContainer=!this.showContainer,this.emitter.emit("element-style-editor-show","container")},resetAllProperties:function(){this.hasContainer=null,this.containerType=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){this.isReady=!1,this.resetAllProperties();var t=mw.tools.firstParentOrCurrentWithAnyOfClasses(e,["container","container-fluid"]);t&&mw.tools.isEditable(t)&&t&&(this.hasContainer=!0,this.activeContainerNode=t,this.populateCssContainerForNode(t)),setTimeout(()=>{this.isReady=!0},100)}},populateCssContainerForNode:function(e){e.classList&&e.classList.contains("container-fluid")?this.containerType="container-fluid":this.containerType="container"},applyClassToActiveContainerNode:function(e){this.isReady&&this.activeContainerNode&&(e==="container-fluid"?(mw.top().app.dispatch("mw.elementStyleEditor.removeClassFromNode",{node:this.activeContainerNode,class:"container"}),mw.top().app.dispatch("mw.elementStyleEditor.addClassToNode",{node:this.activeContainerNode,class:"container-fluid"})):(mw.top().app.dispatch("mw.elementStyleEditor.removeClassFromNode",{node:this.activeContainerNode,class:"container-fluid"}),mw.top().app.dispatch("mw.elementStyleEditor.addClassToNode",{node:this.activeContainerNode,class:"container"})))}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="container"&&(this.showContainer=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{containerType:function(e,t){this.applyClassToActiveContainerNode(e)}}},hd={key:0},yd={class:"mb-4 d-flex"},bd=P("svg",{fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},[P("path",{fill:"currentColor",d:"M19,17H5V7H19M19,5H5A2,2 0 0,0 3,7V17A2,2 0 0,0 5,19H19A2,2 0 0,0 21,17V7C21,5.89 20.1,5 19,5Z"})],-1),pd={key:0},kd={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center flex-wrap gap-2",id:"field-conatiner-type"},Sd=P("label",{class:"live-edit-label px-0 col-4"},"Container",-1),wd={class:"s-field-content"},Cd={class:"form-check"},xd=P("span",{class:"form-check-label"},"Container",-1),Vd={class:"form-check"},_d=P("span",{class:"form-check-label"},"Fluid",-1);function Id(e,t,n,l,a,o){return a.hasContainer?(ee(),te("div",hd,[P("div",yd,[bd,P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showContainer}]),onClick:t[0]||(t[0]=(...i)=>o.toggleContainer&&o.toggleContainer(...i))}," Container ",2)]),a.showContainer?(ee(),te("div",pd,[P("div",kd,[Sd,P("div",wd,[P("label",Cd,[ne(P("input",{class:"form-check-input",type:"radio",name:"containerType",value:"container","onUpdate:modelValue":t[1]||(t[1]=i=>a.containerType=i)},null,512),[[co,a.containerType]]),xd]),P("label",Vd,[ne(P("input",{class:"form-check-input",type:"radio",name:"containerType",value:"container-fluid","onUpdate:modelValue":t[2]||(t[2]=i=>a.containerType=i)},null,512),[[co,a.containerType]]),_d])])])])):we("",!0)])):we("",!0)}const Td=ze(gd,[["render",Id]]);class El{static previewAnimation(t,n){var l=t.ownerDocument.defaultView,a=l.mw.tools.generateSelectorForNode(t),o=l.mw.id("animation"),i=Object.assign({selector:a,id:o},n);l.mw.__animate(i)}static removeAnimations(t){var n=t.ownerDocument.defaultView,l=n.mw,a=n.mw.tools.generateSelectorForNode(t),o=n.mw.__pageAnimations.find(function(u){return u.selector===a});if(o){var i=o,s=Object.assign({},i);l.__pageAnimations.splice(l.__pageAnimations.indexOf(i),1),Array.from(l.doc.querySelectorAll(s.selector)).forEach(function(u){if(u.$$mwAnimations&&u.$$mwAnimations.length){var c=u.$$mwAnimations.findIndex(function(d){return d.id===i.id});c>-1&&u.$$mwAnimations.splice(c,1)}})}}static setAnimation(t,n){var l=t.ownerDocument.defaultView,a=l.mw.tools.generateSelectorForNode(t),o=l.mw.id("animation");t.$$mwAnimations||(t.$$mwAnimations=[]),this.removeAnimations(t),t.$$mwAnimations||(t.$$mwAnimations=[]);var i=Object.assign({selector:a,id:o},n);return t.$$mwAnimations.push(i),l.mw.__pageAnimations.push(i),l.mw.__animate(i),mw.top().app&&mw.top().app.registerChange(t),i}static supportsAnimations(t){return!!(t.ownerDocument&&t.ownerDocument.defaultView&&t.ownerDocument.defaultView.mw&&t.ownerDocument.defaultView.mw.__animate&&t.ownerDocument.defaultView.mw.tools.isEditable(t))}static getAnimation(t){var n=t.ownerDocument.defaultView;if(n.mw.__pageAnimations){var l=n.mw.tools.generateSelectorForNode(t),a=n.mw.__pageAnimations.find(function(o){return o.selector===l});if(a)return a}return!1}}const Pd={components:{DropdownSmall:gn,SliderSmall:Ta},data(){return{showAnimations:!1,activeNode:null,isReady:!1,selectedAnimation:!1,selectedAnimationSpeed:!1,selectedAnimationWhenAppear:!1,supportsAnimations:!1,animationsAppear:[{key:"none",value:"None"},{key:"onAppear",value:"When element appears on screen"},{key:"onHover",value:"When mouse is over"},{key:"onClick",value:"When element is clicked"}],animations:[{key:"none",value:"None"},{key:"bounce",value:"Bounce"},{key:"flash",value:"Flash"},{key:"pulse",value:"Pulse"},{key:"rubberBand",value:"Rubber Band"},{key:"shakeX",value:"Shake X"},{key:"shakeY",value:"Shake Y"},{key:"headShake",value:"Head Shake"},{key:"swing",value:"Swing"},{key:"tada",value:"Tada"},{key:"wobble",value:"Wobble"},{key:"jello",value:"Jello"},{key:"heartBeat",value:"Heart Beat"},{key:"flip",value:"Flip"},{key:"flipInX",value:"Flip In X"},{key:"flipInY",value:"Flip In Y"},{key:"hinge",value:"Hinge"},{key:"jackInTheBox",value:"Jack In The Box"},{key:"rollIn",value:"Roll In"},{key:"backInDown",value:"Back In Down"},{key:"backInLeft",value:"Back In Left"},{key:"backInRight",value:"Back In Right"},{key:"backInUp",value:"Back In Up"},{key:"bounceIn",value:"Bounce In"},{key:"bounceInDown",value:"Bounce In Down"},{key:"bounceInLeft",value:"Bounce In Left"},{key:"bounceInRight",value:"Bounce In Right"},{key:"bounceInUp",value:"Bounce In Up"},{key:"fadeIn",value:"Fade In"},{key:"fadeInDown",value:"Fade In Down"},{key:"fadeInDownBig",value:"Fade In Down Big"},{key:"fadeInLeft",value:"Fade In Left"},{key:"fadeInLeftBig",value:"Fade In Left Big"},{key:"fadeInRight",value:"Fade In Right"},{key:"fadeInRightBig",value:"Fade In Right Big"},{key:"fadeInUp",value:"Fade In Up"},{key:"fadeInUpBig",value:"Fade In Up Big"},{key:"fadeInTopLeft",value:"Fade In Top Left"},{key:"fadeInTopRight",value:"Fade In Top Right"},{key:"fadeInBottomLeft",value:"Fade In Bottom Left"},{key:"fadeInBottomRight",value:"Fade In Bottom Right"},{key:"lightSpeedInRight",value:"LightSpeed In Right"},{key:"lightSpeedInLeft",value:"LightSpeed In Left"},{key:"rotateIn",value:"Rotate In"},{key:"rotateInDownLeft",value:"Rotate In Down Left"},{key:"rotateInDownRight",value:"Rotate In Down Right"},{key:"zoomIn",value:"Zoom In"},{key:"zoomInDown",value:"Zoom In Down"},{key:"zoomInLeft",value:"Zoom In Left"},{key:"zoomInRight",value:"Zoom In Right"},{key:"zoomInUp",value:"Zoom In Up"},{key:"slideInDown",value:"Slide In Down"},{key:"slideInLeft",value:"Slide In Left"},{key:"slideInRight",value:"Slide In Right"},{key:"slideInUp",value:"Slide In Up"}]}},methods:{toggleAnimations:function(){this.showAnimations=!this.showAnimations,this.emitter.emit("element-style-editor-show","animations")},resetAllProperties:function(){this.selectedAnimation=null,this.selectedAnimationSpeed=1,this.selectedAnimationWhenAppear=null},populateActiveAnimation:function(e){var t=El.getAnimation(e);if(!t){this.resetAllProperties();return}t.animation?this.selectedAnimation=t.animation:this.selectedAnimation=null,t.speed?this.selectedAnimationSpeed=t.speed:this.selectedAnimationSpeed=null,t.when?this.selectedAnimationWhenAppear=t.when:this.selectedAnimationWhenAppear=null},setAnimation:function(){if(this.activeNode){var e=this.selectedAnimationSpeed?this.selectedAnimationSpeed:1,t=this.selectedAnimationWhenAppear?this.selectedAnimationWhenAppear:"onAppear",n={animation:this.selectedAnimation,speed:e,when:t};mw.log(n),El.setAnimation(this.activeNode,n)}},populateStyleEditor:function(e){e&&e&&e.nodeType===1&&(this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.supportsAnimations=El.supportsAnimations(e),this.populateActiveAnimation(e),setTimeout(()=>{this.isReady=!0},100))}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="animations"&&(this.showAnimations=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{e.ownerDocument,e.ownerDocument.defaultView,this.populateStyleEditor(e)})},watch:{selectedAnimation:function(e){this.isReady&&this.setAnimation()},selectedAnimationSpeed:function(e){this.isReady&&this.setAnimation()},selectedAnimationWhenAppear:function(e){this.isReady&&this.setAnimation()}}},Ad={key:0},Bd={class:"mb-4 d-flex"},Rd=P("svg",{fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg",version:"1.1",viewBox:"0 0 24 24"},[P("path",{fill:"currentColor",d:"M4,2A2,2 0 0,0 2,4V14H4V4H14V2H4M8,6A2,2 0 0,0 6,8V18H8V8H18V6H8M20,12V20H12V12H20M20,10H12A2,2 0 0,0 10,12V20A2,2 0 0,0 12,22H20A2,2 0 0,0 22,20V12A2,2 0 0,0 20,10M14,13V19L18,16L14,13Z"})],-1),Ed={key:0},Ld={key:0};function $d(e,t,n,l,a,o){const i=ke("DropdownSmall"),s=ke("SliderSmall");return a.supportsAnimations?(ee(),te("div",Ad,[P("div",Bd,[Rd,P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showAnimations}]),onClick:t[0]||(t[0]=(...u)=>o.toggleAnimations&&o.toggleAnimations(...u))}," Animations ",2)]),a.showAnimations?(ee(),te("div",Ed,[r(i,{modelValue:a.selectedAnimation,"onUpdate:modelValue":t[1]||(t[1]=u=>a.selectedAnimation=u),options:a.animations,label:"Animation"},null,8,["modelValue","options"]),a.selectedAnimation?(ee(),te("div",Ld,[r(i,{modelValue:a.selectedAnimationWhenAppear,"onUpdate:modelValue":t[2]||(t[2]=u=>a.selectedAnimationWhenAppear=u),options:a.animationsAppear,label:"When"},null,8,["modelValue","options"]),r(s,{modelValue:a.selectedAnimationSpeed,"onUpdate:modelValue":t[3]||(t[3]=u=>a.selectedAnimationSpeed=u),label:"Speed",min:.1,max:5,step:.1,unit:"s"},null,8,["modelValue"])])):we("",!0)])):we("",!0)])):we("",!0)}const Md=ze(Pd,[["render",$d]]),Fd={components:{DropdownSmall:gn},data(){return{activeGridNode:null,showGridSettings:!1,isReady:!1,hasGrid:!1,colOptionsDesktop:[{key:"col-1",value:"col-1"},{key:"col-2",value:"col-2"},{key:"col-3",value:"col-3"},{key:"col-4",value:"col-4"},{key:"col-5",value:"col-5"},{key:"col-6",value:"col-6"},{key:"col-7",value:"col-7"},{key:"col-8",value:"col-8"},{key:"col-9",value:"col-9"},{key:"col-10",value:"col-10"},{key:"col-11",value:"col-11"},{key:"col-12",value:"col-12"},{key:"col-lg-1",value:"col-lg-1"},{key:"col-lg-2",value:"col-lg-2"},{key:"col-lg-3",value:"col-lg-3"},{key:"col-lg-4",value:"col-lg-4"},{key:"col-lg-5",value:"col-lg-5"},{key:"col-lg-6",value:"col-lg-6"},{key:"col-lg-7",value:"col-lg-7"},{key:"col-lg-8",value:"col-lg-8"},{key:"col-lg-9",value:"col-lg-9"},{key:"col-lg-10",value:"col-lg-10"},{key:"col-lg-11",value:"col-lg-11"},{key:"col-lg-12",value:"col-lg-12"}],colOptionsTablet:[{key:"col-md-1",value:"col-md-1"},{key:"col-md-2",value:"col-md-2"},{key:"col-md-3",value:"col-md-3"},{key:"col-md-4",value:"col-md-4"},{key:"col-md-5",value:"col-md-5"},{key:"col-md-6",value:"col-md-6"},{key:"col-md-7",value:"col-md-7"},{key:"col-md-8",value:"col-md-8"},{key:"col-md-9",value:"col-md-9"},{key:"col-md-10",value:"col-md-10"},{key:"col-md-11",value:"col-md-11"},{key:"col-md-12",value:"col-md-12"},{key:"col-sm-1",value:"col-sm-1"},{key:"col-sm-2",value:"col-sm-2"},{key:"col-sm-3",value:"col-sm-3"},{key:"col-sm-4",value:"col-sm-4"},{key:"col-sm-5",value:"col-sm-5"},{key:"col-sm-6",value:"col-sm-6"},{key:"col-sm-7",value:"col-sm-7"},{key:"col-sm-8",value:"col-sm-8"},{key:"col-sm-9",value:"col-sm-9"},{key:"col-sm-10",value:"col-sm-10"},{key:"col-sm-11",value:"col-sm-11"},{key:"col-sm-12",value:"col-sm-12"}],colOptionsMobile:[{key:"col-xs-1",value:"col-xs-1"},{key:"col-xs-2",value:"col-xs-2"},{key:"col-xs-3",value:"col-xs-3"},{key:"col-xs-4",value:"col-xs-4"},{key:"col-xs-5",value:"col-xs-5"},{key:"col-xs-6",value:"col-xs-6"},{key:"col-xs-7",value:"col-xs-7"},{key:"col-xs-8",value:"col-xs-8"},{key:"col-xs-9",value:"col-xs-9"},{key:"col-xs-10",value:"col-xs-10"},{key:"col-xs-11",value:"col-xs-11"},{key:"col-xs-12",value:"col-xs-12"}],selectedColDesktop:"",selectedColTablet:"",selectedColMobile:""}},methods:{toggleGridSettings:function(){this.showGridSettings=!this.showGridSettings,this.emitter.emit("element-style-editor-show","grid")},resetAllProperties:function(){this.hasGrid=null},populateStyleEditor:function(e){if(e&&e.nodeType===1){this.isReady=!1,this.resetAllProperties();for(const t of this.colOptionsDesktop)if(e.classList.contains(t.key)){this.hasGrid=!0,this.activeGridNode=e,this.selectedColDesktop=t.key;break}for(const t of this.colOptionsTablet)if(e.classList.contains(t.key)){this.hasGrid=!0,this.activeGridNode=e,this.selectedColTablet=t.key;break}for(const t of this.colOptionsMobile)if(e.classList.contains(t.key)){this.hasGrid=!0,this.activeGridNode=e,this.selectedColMobile=t.key;break}setTimeout(()=>{this.isReady=!0},100)}},applyClassToActiveGridNode:function(e){if(this.isReady&&this.activeGridNode){for(const n of this.colOptionsDesktop)this.activeGridNode.classList.remove(n.key);for(const n of this.colOptionsTablet)this.activeGridNode.classList.remove(n.key);for(const n of this.colOptionsMobile)this.activeGridNode.classList.remove(n.key);const t=[...this.colOptionsDesktop,...this.colOptionsTablet,...this.colOptionsMobile].find(n=>n.key===e);t&&this.activeGridNode.classList.add(t.key),mw.top().app&&mw.top().app.registerChangedState(this.activeGridNode)}}},mounted(){mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)}),this.emitter.on("element-style-editor-show",e=>{e!=="grid"&&(this.showGridSettings=!1)})},watch:{selectedColDesktop:function(e,t){this.applyClassToActiveGridNode(e)},selectedColTablet:function(e,t){this.applyClassToActiveGridNode(e)},selectedColMobile:function(e,t){this.applyClassToActiveGridNode(e)}}},Od={key:0},Dd={class:"mb-4 d-flex"},Nd=P("svg",{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",width:"24",height:"24",viewBox:"0 0 24 24"},[P("path",{d:"M4,2H20A2,2 0 0,1 22,4V20A2,2 0 0,1 20,22H4C2.92,22 2,21.1 2,20V4A2,2 0 0,1 4,2M4,4V11H11V4H4M4,20H11V13H4V20M20,20V13H13V20H20M20,4H13V11H20V4Z"})],-1),zd={key:0},Hd={class:"form-control-live-edit-label-wrapper d-flex align-items-center gap-2"},jd=P("label",{class:"live-edit-label px-0 col-4"},"Desktop",-1),Ud=P("i",{class:"mdi mdi-monitor col-2",style:{"font-size":"24px"}},null,-1),Gd={class:"col-6"},Wd={class:"form-control-live-edit-label-wrapper d-flex align-items-center gap-2"},Yd=P("label",{class:"live-edit-label px-0 col-4"},"Tablet",-1),Kd=P("i",{class:"mdi mdi-tablet col-2",style:{"font-size":"24px"}},null,-1),qd={class:"col-6"},Xd={class:"form-control-live-edit-label-wrapper d-flex align-items-center gap-2"},Zd=P("label",{class:"live-edit-label px-0 col-4"},"Mobile",-1),Jd=P("i",{class:"mdi mdi-cellphone col-2",style:{"font-size":"24px"}},null,-1),Qd={class:"col-6"};function ev(e,t,n,l,a,o){const i=ke("DropdownSmall");return a.hasGrid?(ee(),te("div",Od,[P("div",Dd,[Nd,P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showGridSettings}]),onClick:t[0]||(t[0]=(...s)=>o.toggleGridSettings&&o.toggleGridSettings(...s))}," Grid ",2)]),a.showGridSettings?(ee(),te("div",zd,[P("div",Hd,[jd,Ud,P("div",Gd,[r(i,{options:a.colOptionsDesktop,modelValue:a.selectedColDesktop,"onUpdate:modelValue":t[1]||(t[1]=s=>a.selectedColDesktop=s)},null,8,["options","modelValue"])])]),P("div",Wd,[Yd,Kd,P("div",qd,[r(i,{options:a.colOptionsTablet,modelValue:a.selectedColTablet,"onUpdate:modelValue":t[2]||(t[2]=s=>a.selectedColTablet=s)},null,8,["options","modelValue"])])]),P("div",Xd,[Zd,Jd,P("div",Qd,[r(i,{options:a.colOptionsMobile,modelValue:a.selectedColMobile,"onUpdate:modelValue":t[3]||(t[3]=s=>a.selectedColMobile=s)},null,8,["options","modelValue"])])])])):we("",!0)])):we("",!0)}const tv=ze(Fd,[["render",ev]]);var nv=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function lv(e,t,n){return n={path:t,exports:{},require:function(l,a){return av(l,a??n.path)}},e(n,n.exports),n.exports}function av(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}var ov=lv(function(e,t){(function(n,l){e.exports=l()})(nv,function(){var n="__v-click-outside",l=typeof window<"u",a=typeof navigator<"u",o=l&&("ontouchstart"in window||a&&navigator.msMaxTouchPoints>0)?["touchstart"]:["click"],i=function(d){var f=d.event,v=d.handler;(0,d.middleware)(f)&&v(f)},s=function(d,f){var v=function(S){var C=typeof S=="function";if(!C&&typeof S!="object")throw new Error("v-click-outside: Binding value must be a function or an object");return{handler:C?S:S.handler,middleware:S.middleware||function(_){return _},events:S.events||o,isActive:S.isActive!==!1,detectIframe:S.detectIframe!==!1,capture:!!S.capture}}(f.value),m=v.handler,g=v.middleware,y=v.detectIframe,b=v.capture;if(v.isActive){if(d[n]=v.events.map(function(S){return{event:S,srcTarget:document.documentElement,handler:function(C){return function(_){var V=_.el,x=_.event,T=_.handler,w=_.middleware,k=x.path||x.composedPath&&x.composedPath();(k?k.indexOf(V)<0:!V.contains(x.target))&&i({event:x,handler:T,middleware:w})}({el:d,event:C,handler:m,middleware:g})},capture:b}}),y){var p={event:"blur",srcTarget:window,handler:function(S){return function(C){var _=C.el,V=C.event,x=C.handler,T=C.middleware;setTimeout(function(){var w=document.activeElement;w&&w.tagName==="IFRAME"&&!_.contains(w)&&i({event:V,handler:x,middleware:T})},0)}({el:d,event:S,handler:m,middleware:g})},capture:b};d[n]=[].concat(d[n],[p])}d[n].forEach(function(S){var C=S.event,_=S.srcTarget,V=S.handler;return setTimeout(function(){d[n]&&_.addEventListener(C,V,b)},0)})}},u=function(d){(d[n]||[]).forEach(function(f){return f.srcTarget.removeEventListener(f.event,f.handler,f.capture)}),delete d[n]},c=l?{beforeMount:s,updated:function(d,f){var v=f.value,m=f.oldValue;JSON.stringify(v)!==JSON.stringify(m)&&(u(d),s(d,{value:v}))},unmounted:u}:{};return{install:function(d){d.directive("click-outside",c)},directive:c}})}),iv=ov;const sv={class:"v3ti-loader-wrapper"},rv=P("div",{class:"v3ti-loader"},null,-1),uv=P("span",null,"Loading",-1),cv=[rv,uv];function dv(e,t){return ee(),te("div",sv,cv)}function di(e,t){t===void 0&&(t={});var n=t.insertAt;if(!(!e||typeof document>"u")){var l=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css",n==="top"&&l.firstChild?l.insertBefore(a,l.firstChild):l.appendChild(a),a.styleSheet?a.styleSheet.cssText=e:a.appendChild(document.createTextNode(e))}}var vv=`.v3ti-loader-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  color: #112B3C;
}
.v3ti-loader-wrapper .v3ti-loader {
  width: 18px;
  height: 18px;
  border-radius: 50%;
  display: inline-block;
  border-top: 2px solid #112B3C;
  border-right: 2px solid transparent;
  box-sizing: border-box;
  animation: rotation 0.8s linear infinite;
  margin-right: 8px;
}
@keyframes rotation {
0% {
    transform: rotate(0deg);
}
100% {
    transform: rotate(360deg);
}
}`;di(vv);const vi={};vi.render=dv;var fv=vi,fi={name:"Vue3TagsInput",emits:["update:modelValue","update:tags","on-limit","on-tags-changed","on-remove","on-error","on-focus","on-blur","on-select","on-select-duplicate-tag","on-new-tag"],props:{readOnly:{type:Boolean,default:!1},modelValue:{type:String,default:""},validate:{type:[String,Function,Object],default:""},addTagOnKeys:{type:Array,default:function(){return[13,",",32]}},placeholder:{type:String,default:""},tags:{type:Array,default:()=>[]},loading:{type:Boolean,default:!1},limit:{type:Number,default:-1},allowDuplicates:{type:Boolean,default:!1},addTagOnBlur:{type:Boolean,default:!1},selectItems:{type:Array,default:()=>[]},select:{type:Boolean,default:!1},duplicateSelectItem:{type:Boolean,default:!0},uniqueSelectField:{type:String,default:"id"},addTagOnKeysWhenSelect:{type:Boolean,default:!1},isShowNoData:{type:Boolean,default:!0}},components:{Loading:fv},directives:{clickOutside:iv.directive},data(){return{isInputActive:!1,isError:!1,newTag:"",innerTags:[],multiple:!1}},computed:{isLimit(){const e=this.limit>0&&Number(this.limit)===this.innerTags.length;return e&&this.$emit("on-limit"),e},selectedItemsIds(){return this.duplicateSelectItem?[]:this.tags.map(e=>e[this.uniqueSelectField]||"")}},watch:{error(){this.isError=this.error},modelValue:{immediate:!0,handler(e){this.newTag=e}},tags:{deep:!0,immediate:!0,handler(e){this.innerTags=[...e]}}},methods:{isShot(e){return!!this.$slots[e]},makeItNormal(e){this.$emit("update:modelValue",e.target.value),this.$refs.inputTag.className="v3ti-new-tag",this.$refs.inputTag.style.textDecoration="none"},resetData(){this.innerTags=[]},resetInputValue(){this.newTag="",this.$emit("update:modelValue","")},setPosition(){const e=this.$refs.inputBox,t=this.$refs.contextMenu;if(e&&t){t.style.display="block";const n=e.clientHeight||32,l=3;t.style.top=n+l+"px"}},closeContextMenu(){this.$refs.contextMenu&&(this.$refs.contextMenu.style={display:"none"})},handleSelect(e){if(this.isShowCheckmark(e)){const t=this.tags.filter(n=>e.id!==n.id);this.$emit("update:tags",t),this.$emit("on-select-duplicate-tag",e),this.resetInputValue()}else this.$emit("on-select",e);this.$nextTick(()=>{this.closeContextMenu()})},isShowCheckmark(e){return this.duplicateSelectItem?!1:this.selectedItemsIds.includes(e[this.uniqueSelectField])},focusNewTag(){this.select&&!this.disabled&&this.setPosition(),!(this.readOnly||!this.$el.querySelector(".v3ti-new-tag"))&&this.$el.querySelector(".v3ti-new-tag").focus()},handleInputFocus(e){this.isInputActive=!0,this.$emit("on-focus",e)},handleInputBlur(e){this.isInputActive=!1,this.addNew(e),this.$emit("on-blur",e)},addNew(e){if(this.select&&!this.addTagOnKeysWhenSelect)return;const t=e?this.addTagOnKeys.indexOf(e.keyCode)!==-1||this.addTagOnKeys.indexOf(e.key)!==-1:!0,n=e&&e.type!=="blur";!t&&(n||!this.addTagOnBlur)||this.isLimit||(this.newTag&&(this.allowDuplicates||this.innerTags.indexOf(this.newTag)===-1)&&this.validateIfNeeded(this.newTag)?(this.innerTags.push(this.newTag),this.addTagOnKeysWhenSelect&&(this.$emit("on-new-tag",this.newTag),this.updatePositionContextMenu()),this.resetInputValue(),this.tagChange(),e&&e.preventDefault()):(this.validateIfNeeded(this.newTag)?this.makeItError(!0):this.makeItError(!1),e&&e.preventDefault()))},updatePositionContextMenu(){this.$nextTick(()=>{this.setPosition()})},makeItError(e){this.newTag!==""&&(this.$refs.inputTag.className="v3ti-new-tag v3ti-new-tag--error",this.$refs.inputTag.style.textDecoration="underline",this.$emit("on-error",e))},validateIfNeeded(e){return this.validate===""||this.validate===void 0?!0:typeof this.validate=="function"?this.validate(e):!0},removeLastTag(){this.newTag||(this.innerTags.pop(),this.tagChange(),this.updatePositionContextMenu())},remove(e){this.innerTags.splice(e,1),this.tagChange(),this.$emit("on-remove",e),this.updatePositionContextMenu()},tagChange(){this.$emit("on-tags-changed",this.innerTags)}}};const mv={key:1,class:"v3ti-tag-content"},gv=["onClick"],hv=["placeholder","disabled"],yv={key:0,class:"v3ti-loading"},bv={key:1,class:"v3ti-no-data"},pv={key:1},kv={key:2},Sv=["onClick"],wv={class:"v3ti-context-item--label"},Cv={key:0,class:"v3ti-icon-selected-tag",width:"44",height:"44",viewBox:"0 0 24 24","stroke-width":"1.5",fill:"none","stroke-linecap":"round","stroke-linejoin":"round"},xv=P("path",{stroke:"none",d:"M0 0h24v24H0z"},null,-1),Vv=P("path",{d:"M5 12l5 5l10 -10"},null,-1),_v=[xv,Vv];function Iv(e,t,n,l,a,o){const i=ke("Loading"),s=Ze("click-outside");return ne((ee(),te("div",{onClick:t[6]||(t[6]=u=>o.focusNewTag()),class:Le([{"v3ti--focus":a.isInputActive,"v3ti--error":a.isError},"v3ti"])},[P("div",{class:Le(["v3ti-content",{"v3ti-content--select":n.select}]),ref:"inputBox"},[(ee(!0),te(oe,null,En(a.innerTags,(u,c)=>(ee(),te("span",{key:c,class:"v3ti-tag"},[o.isShot("item")?Jn(e.$slots,"item",vo(Y({key:0},{name:u,index:c,tag:u}))):(ee(),te("span",mv,yt(u),1)),n.readOnly?we("",!0):(ee(),te("a",{key:2,onClick:Rl(d=>o.remove(c),["prevent","stop"]),class:"v3ti-remove-tag"},null,8,gv))]))),128)),ne(P("input",{ref:"inputTag",placeholder:n.placeholder,"onUpdate:modelValue":t[0]||(t[0]=u=>a.newTag=u),onKeydown:[t[1]||(t[1]=Ar(Rl(function(){return o.removeLastTag&&o.removeLastTag(...arguments)},["stop"]),["delete"])),t[2]||(t[2]=function(){return o.addNew&&o.addNew(...arguments)})],onBlur:t[3]||(t[3]=function(){return o.handleInputBlur&&o.handleInputBlur(...arguments)}),onFocus:t[4]||(t[4]=function(){return o.handleInputFocus&&o.handleInputFocus(...arguments)}),onInput:t[5]||(t[5]=function(){return o.makeItNormal&&o.makeItNormal(...arguments)}),class:"v3ti-new-tag",disabled:n.readOnly},null,40,hv),[[je,a.newTag]])],2),n.select?(ee(),te("section",{key:0,class:Le(["v3ti-context-menu",{"v3ti-context-menu-no-data":!n.isShowNoData&&n.selectItems.length===0}]),ref:"contextMenu"},[n.loading?(ee(),te("div",yv,[o.isShot("loading")?Jn(e.$slots,"default",{key:0}):(ee(),Br(i,{key:1}))])):we("",!0),!n.loading&&n.selectItems.length===0&&n.isShowNoData?(ee(),te("div",bv,[o.isShot("no-data")?Jn(e.$slots,"no-data",{key:0}):(ee(),te("span",pv," No data "))])):we("",!0),!n.loading&&n.selectItems.length>0?(ee(),te("div",kv,[(ee(!0),te(oe,null,En(n.selectItems,(u,c)=>(ee(),te("div",{key:c,class:Le(["v3ti-context-item",{"v3ti-context-item--active":o.isShowCheckmark(u)}]),onClick:Rl(d=>o.handleSelect(u,c),["stop"])},[P("div",wv,[Jn(e.$slots,"select-item",vo(Rr(u)))]),o.isShowCheckmark(u)?(ee(),te("svg",Cv,_v)):we("",!0)],10,Sv))),128))])):we("",!0)],2)):we("",!0)],2)),[[s,o.closeContextMenu]])}var Tv=`.v3ti {
  border-radius: 5px;
  min-height: 32px;
  line-height: 1.4;
  background-color: #fff;
  border: 1px solid #9ca3af;
  cursor: text;
  text-align: left;
  -webkit-appearance: textfield;
  display: flex;
  flex-wrap: wrap;
  position: relative;
}
.v3ti .v3ti-icon-selected-tag {
  stroke: #19be6b;
  width: 1rem;
  height: 1rem;
  margin-left: 4px;
}
.v3ti--focus {
  outline: 0;
  border-color: #000000;
  box-shadow: 0 0 0 1px #000000;
}
.v3ti--error {
  border-color: #F56C6C;
}
.v3ti .v3ti-no-data {
  color: #d8d8d8;
  text-align: center;
  padding: 4px 7px;
}
.v3ti .v3ti-loading {
  padding: 4px 7px;
  text-align: center;
}
.v3ti .v3ti-context-menu {
  max-height: 150px;
  min-width: 150px;
  overflow: auto;
  display: none;
  outline: none;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  margin: 0;
  padding: 5px 0;
  background: #ffffff;
  z-index: 1050;
  color: #475569;
  box-shadow: 0 3px 8px 2px rgba(0, 0, 0, 0.1);
  border-radius: 0 0 6px 6px;
}
.v3ti .v3ti-context-menu .v3ti-context-item {
  padding: 4px 7px;
  display: flex;
  align-items: center;
}
.v3ti .v3ti-context-menu .v3ti-context-item:hover {
  background: #e8e8e8;
  cursor: pointer;
}
.v3ti .v3ti-context-menu .v3ti-context-item--label {
  flex: 1;
  min-width: 1px;
}
.v3ti .v3ti-context-menu .v3ti-context-item--active {
  color: #317CAF;
}
.v3ti .v3ti-context-menu-no-data {
  padding: 0;
}
.v3ti .v3ti-content {
  width: 100%;
  display: flex;
  flex-wrap: wrap;
}
.v3ti .v3ti-content--select {
  padding-right: 30px;
}
.v3ti .v3ti-tag {
  display: flex;
  font-weight: 400;
  margin: 3px;
  padding: 0 5px;
  background: #317CAF;
  color: #ffffff;
  height: 27px;
  border-radius: 5px;
  align-items: center;
  max-width: calc(100% - 16px);
}
.v3ti .v3ti-tag .v3ti-tag-content {
  flex: 1;
  min-width: 1px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
.v3ti .v3ti-tag .v3ti-remove-tag {
  color: #ffffff;
  transition: opacity 0.3s ease;
  opacity: 0.5;
  cursor: pointer;
  padding: 0 5px 0 7px;
}
.v3ti .v3ti-tag .v3ti-remove-tag::before {
  content: "x";
}
.v3ti .v3ti-tag .v3ti-remove-tag:hover {
  opacity: 1;
}
.v3ti .v3ti-new-tag {
  background: transparent;
  border: 0;
  font-weight: 400;
  margin: 3px;
  outline: none;
  padding: 0 4px;
  flex: 1;
  min-width: 60px;
  height: 27px;
}
.v3ti .v3ti-new-tag--error {
  color: #F56C6C;
}`;di(Tv);fi.render=Iv;var Pv=(()=>{const e=fi;return e.install=t=>{t.component("Vue3TagsInput",e)},e})();const Av={components:{Vue3TagsInput:Pv},data(){return{showClasses:!1,activeNode:null,isReady:!1,classesToKeepInput:"",classesToKeep:["element","no-typing","safe-mode","edit","nodrop","allow-drop","module","module-overlap","module-overlap-on-hover","allow-typing","allow-edit","img-as-background","image-holder"],classes:[]}},methods:{toggleClasses:function(){this.showClasses=!this.showClasses,this.emitter.emit("element-style-editor-show","classes")},customValidateClasses(e){const t=/^[a-zA-Z\s,]*$/;return e.split(",").map(l=>l.trim()).filter(l=>t.test(l)&&this.classesToKeep.includes(l))},handleChangeClasses(e){this.classes=e},updateClassesToKeep(){this.classesToKeep=this.classesToKeepInput.split(",").map(e=>e.trim())},applyClasses(){this.isReady&&this.activeNode&&(this.activeNode.className="",this.classes.forEach(e=>{e&&this.activeNode.classList.add(e)}),this.classesToKeepInput&&this.classesToKeepInput.split(",").map(t=>t.trim()).filter(t=>!!t).forEach(t=>{this.activeNode.classList.contains(t)||this.activeNode.classList.add(t)}),mw.top().app&&mw.top().app.registerChangedState(this.activeNode))},populateStyleEditor(e){if(e&&e.nodeType===1){this.isReady=!1,this.activeNode=e,this.classes=this.activeNode.className.split(" ").filter(l=>!!l).filter(l=>l.startsWith("animate__")?!1:!this.classesToKeep.includes(l));const t=this.activeNode.className.split(" "),n=this.classesToKeep.filter(l=>t.includes(l));this.classesToKeepInput=n.join(", "),setTimeout(()=>{this.isReady=!0},100)}}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="classes"&&(this.showClasses=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{classes(e,t){this.applyClasses()}}},Bv={class:"d-flex"},Rv={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Ev=P("path",{d:"M12.9,3l2,0.4L11.1,21l-2-0.4L12.9,3 M19.6,12L16,8.4V5.6l6.4,6.4L16,18.4v-2.8L19.6,12 M1.6,12L8,5.6v2.8L4.4,12L8,15.6  v2.8L1.6,12z"},null,-1),Lv=[Ev],$v={key:0};function Mv(e,t,n,l,a,o){const i=ke("vue3-tags-input");return ee(),te("div",null,[P("div",Bv,[(ee(),te("svg",Rv,Lv)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showClasses}]),onClick:t[0]||(t[0]=(...s)=>o.toggleClasses&&o.toggleClasses(...s))}," Classes ",2)]),a.showClasses?(ee(),te("div",$v,[P("div",null,[ne(P("input",{type:"hidden","onUpdate:modelValue":t[1]||(t[1]=s=>a.classesToKeepInput=s),onInput:t[2]||(t[2]=(...s)=>o.updateClassesToKeep&&o.updateClassesToKeep(...s))},null,544),[[je,a.classesToKeepInput]]),r(i,{tags:a.classes,placeholder:"Enter classes separated by commas",validate:o.customValidateClasses,onOnTagsChanged:o.handleChangeClasses},null,8,["tags","validate","onOnTagsChanged"])])])):we("",!0)])}const Fv=ze(Av,[["render",Mv]]),Ov={components:{BorderRadius:ci},data(){return{showRoundedCorners:!1,activeNode:null,isReady:!1,borderRadius:{borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""}}},methods:{toggleRoundedCorners:function(){this.showRoundedCorners=!this.showRoundedCorners,this.emitter.emit("element-style-editor-show","roundedCorners")},resetAllProperties:function(){this.borderRadius={borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""}},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBorderRadius(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBorderRadius:function(e){if(!(!e||!e.get)){var t=e.get.radius(!0);this.borderTopLeftRadius=t.tl,this.borderTopRightRadius=t.tr,this.borderBottomRightRadius=t.br,this.borderBottomLeftRadius=t.bl,this.borderRadius={borderTopLeftRadius:t.tl,borderTopRightRadius:t.tr,borderBottomLeftRadius:t.bl,borderBottomRightRadius:t.br}}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="roundedCorners"&&(this.showRoundedCorners=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{borderRadius:function(e,t){var n="";e.borderTopLeftRadius?n+=e.borderTopLeftRadius+"px ":n+="0px ",e.borderTopRightRadius?n+=e.borderTopRightRadius+"px ":n+="0px ",e.borderBottomRightRadius?n+=e.borderBottomRightRadius+"px ":n+="0px ",e.borderBottomLeftRadius?n+=e.borderBottomLeftRadius+"px ":n+="0px ",this.applyPropertyToActiveNode("border-radius",n)}}},Dv={class:"d-flex"},Nv={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},zv=P("path",{d:"M19,19h2v2h-2V19 M19,17h2v-2h-2V17 M3,13h2v-2H3V13 M3,17h2v-2H3V17 M3,9h2V7H3V9 M3,5h2V3H3V5 M7,5h2V3H7V5 M15,21h2v-2  h-2V21 M11,21h2v-2h-2V21 M15,21h2v-2h-2V21 M7,21h2v-2H7V21 M3,21h2v-2H3V21 M21,8c0-2.8-2.2-5-5-5h-5v2h5c1.7,0,3,1.3,3,3v5h2V8z"},null,-1),Hv=[zv],jv={key:0},Uv={class:"d-flex flex-column gap-3"};function Gv(e,t,n,l,a,o){const i=ke("BorderRadius");return ee(),te(oe,null,[P("div",Dv,[(ee(),te("svg",Nv,Hv)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showRoundedCorners}]),onClick:t[0]||(t[0]=(...s)=>o.toggleRoundedCorners&&o.toggleRoundedCorners(...s))}," Rounded corners ",2)]),a.showRoundedCorners?(ee(),te("div",jv,[P("div",Uv,[r(i,{modelValue:a.borderRadius,"onUpdate:modelValue":t[1]||(t[1]=s=>a.borderRadius=s)},null,8,["modelValue"])])])):we("",!0)],64)}const Wv=ze(Ov,[["render",Gv]]);const Yv={components:{ElementStyleEditorBackground:$c,ElementStyleEditorRoundedCorners:Wv,ElementStyleEditorElementSelector:md,ElementStyleEditorTypography:ju,ElementStyleEditorSpacing:cc,ElementStyleEditorBorder:id,ElementStyleEditorContainer:Td,ElementStyleEditorGrid:tv,ElementStyleEditorAnimations:Md,ElementStyleEditorClassApplier:Fv},data(){return{showElementSelector:!0,showBackground:!0,showTypography:!0,showSpacing:!0,showBorder:!0,showContainer:!0,showGrid:!0,showAnimations:!0,showClassApplier:!0,showRoundedCorners:!0}},methods:{},mounted(){mw.top().app.on("cssEditorSettings",e=>{e.fieldSettings.components&&(this.showBackground=!1,this.showTypography=!1,this.showSpacing=!1,this.showBorder=!1,this.showElementSelector=!1,this.showContainer=!1,this.showAnimations=!1,this.showClassApplier=!1,e.fieldSettings.components.includes("background")&&(this.showBackground=!0),e.fieldSettings.components.includes("elementSelector")&&(this.showElementSelector=!0),e.fieldSettings.components.includes("typography")&&(this.showTypography=!0),e.fieldSettings.components.includes("spacing")&&(this.showSpacing=!0),e.fieldSettings.components.includes("border")&&(this.showBorder=!0),e.fieldSettings.components.includes("container")&&(this.showContainer=!0),e.fieldSettings.components.includes("grid")&&(this.showGrid=!0),e.fieldSettings.components.includes("animations")&&(this.showAnimations=!0),e.fieldSettings.components.includes("roundedCorners")&&(this.showRoundedCorners=!0),e.fieldSettings.components.includes("classes")&&(this.showClassApplier=!0))})}},Kv={class:"d-flex flex-column"},qv={class:"mb-4"},Xv={class:"mb-4"},Zv={class:"mb-4"},Jv={class:"mb-4"},Qv={class:"mb-4"},ef={class:"mb-4"},tf={class:"mb-4"};function nf(e,t,n,l,a,o){const i=ke("ElementStyleEditorElementSelector"),s=ke("ElementStyleEditorBackground"),u=ke("ElementStyleEditorTypography"),c=ke("ElementStyleEditorSpacing"),d=ke("ElementStyleEditorContainer"),f=ke("ElementStyleEditorGrid"),v=ke("ElementStyleEditorBorder"),m=ke("ElementStyleEditorRoundedCorners"),g=ke("ElementStyleEditorAnimations"),y=ke("ElementStyleEditorClassApplier");return ee(),te("div",Kv,[ne(P("div",qv,[r(i)],512),[[Pe,a.showElementSelector]]),ne(P("div",Xv,[r(s)],512),[[Pe,a.showBackground]]),ne(P("div",Zv,[r(u)],512),[[Pe,a.showTypography]]),ne(P("div",Jv,[r(c)],512),[[Pe,a.showSpacing]]),ne(P("div",null,[r(d)],512),[[Pe,a.showContainer]]),ne(P("div",null,[r(f)],512),[[Pe,a.showGrid]]),ne(P("div",Qv,[r(v)],512),[[Pe,a.showBorder]]),ne(P("div",ef,[r(m)],512),[[Pe,a.showRoundedCorners]]),ne(P("div",null,[r(g)],512),[[Pe,a.showAnimations]]),ne(P("div",tf,[r(y)],512),[[Pe,a.showClassApplier]])])}const lf=ze(Yv,[["render",nf]]);const Ce=typeof window<"u",Pa=Ce&&"IntersectionObserver"in window,af=Ce&&("ontouchstart"in window||window.navigator.maxTouchPoints>0);function fo(e,t,n){of(e,t),t.set(e,n)}function of(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function sf(e,t,n){var l=mi(e,t,"set");return rf(e,l,n),n}function rf(e,t,n){if(t.set)t.set.call(e,n);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=n}}function zt(e,t){var n=mi(e,t,"get");return uf(e,n)}function mi(e,t,n){if(!t.has(e))throw new TypeError("attempted to "+n+" private field on non-instance");return t.get(e)}function uf(e,t){return t.get?t.get.call(e):t.value}function gi(e,t,n){const l=t.length-1;if(l<0)return e===void 0?n:e;for(let a=0;a<l;a++){if(e==null)return n;e=e[t[a]]}return e==null||e[t[l]]===void 0?n:e[t[l]]}function hn(e,t){if(e===t)return!0;if(e instanceof Date&&t instanceof Date&&e.getTime()!==t.getTime()||e!==Object(e)||t!==Object(t))return!1;const n=Object.keys(e);return n.length!==Object.keys(t).length?!1:n.every(l=>hn(e[l],t[l]))}function Hl(e,t,n){return e==null||!t||typeof t!="string"?n:e[t]!==void 0?e[t]:(t=t.replace(/\[(\w+)\]/g,".$1"),t=t.replace(/^\./,""),gi(e,t.split("."),n))}function kt(e,t,n){if(t===!0)return e===void 0?n:e;if(t==null||typeof t=="boolean")return n;if(e!==Object(e)){if(typeof t!="function")return n;const a=t(e,n);return typeof a>"u"?n:a}if(typeof t=="string")return Hl(e,t,n);if(Array.isArray(t))return gi(e,t,n);if(typeof t!="function")return n;const l=t(e,n);return typeof l>"u"?n:l}function xt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0;return Array.from({length:e},(n,l)=>t+l)}function J(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"px";if(!(e==null||e===""))return isNaN(+e)?String(e):isFinite(+e)?`${Number(e)}${t}`:void 0}function sl(e){return e!==null&&typeof e=="object"&&!Array.isArray(e)}function jl(e){return e&&"$el"in e?e.$el:e}const mo=Object.freeze({enter:13,tab:9,delete:46,esc:27,space:32,up:38,down:40,left:37,right:39,end:35,home:36,del:46,backspace:8,insert:45,pageup:33,pagedown:34,shift:16}),Ul=Object.freeze({enter:"Enter",tab:"Tab",delete:"Delete",esc:"Escape",space:"Space",up:"ArrowUp",down:"ArrowDown",left:"ArrowLeft",right:"ArrowRight",end:"End",home:"Home",del:"Delete",backspace:"Backspace",insert:"Insert",pageup:"PageUp",pagedown:"PageDown",shift:"Shift"});function hi(e){return Object.keys(e)}function jt(e,t){return t.every(n=>e.hasOwnProperty(n))}function Kt(e,t,n){const l=Object.create(null),a=Object.create(null);for(const o in e)t.some(i=>i instanceof RegExp?i.test(o):i===o)&&!(n!=null&&n.some(i=>i===o))?l[o]=e[o]:a[o]=e[o];return[l,a]}function rt(e,t){const n={...e};return t.forEach(l=>delete n[l]),n}const yi=/^on[^a-z]/,Aa=e=>yi.test(e),cf=["onAfterscriptexecute","onAnimationcancel","onAnimationend","onAnimationiteration","onAnimationstart","onAuxclick","onBeforeinput","onBeforescriptexecute","onChange","onClick","onCompositionend","onCompositionstart","onCompositionupdate","onContextmenu","onCopy","onCut","onDblclick","onFocusin","onFocusout","onFullscreenchange","onFullscreenerror","onGesturechange","onGestureend","onGesturestart","onGotpointercapture","onInput","onKeydown","onKeypress","onKeyup","onLostpointercapture","onMousedown","onMousemove","onMouseout","onMouseover","onMouseup","onMousewheel","onPaste","onPointercancel","onPointerdown","onPointerenter","onPointerleave","onPointermove","onPointerout","onPointerover","onPointerup","onReset","onSelect","onSubmit","onTouchcancel","onTouchend","onTouchmove","onTouchstart","onTransitioncancel","onTransitionend","onTransitionrun","onTransitionstart","onWheel"];function Qt(e){const[t,n]=Kt(e,[yi]),l=rt(t,cf),[a,o]=Kt(n,["class","style","id",/^data-/]);return Object.assign(a,t),Object.assign(o,l),[a,o]}function et(e){return e==null?[]:Array.isArray(e)?e:[e]}function Ue(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;return Math.max(t,Math.min(n,e))}function go(e){const t=e.toString().trim();return t.includes(".")?t.length-t.indexOf(".")-1:0}function ho(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"0";return e+n.repeat(Math.max(0,t-e.length))}function df(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1;const n=[];let l=0;for(;l<e.length;)n.push(e.substr(l,t)),l+=t;return n}function yo(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1e3;if(e<t)return`${e} B`;const n=t===1024?["Ki","Mi","Gi"]:["k","M","G"];let l=-1;for(;Math.abs(e)>=t&&l<n.length-1;)e/=t,++l;return`${e.toFixed(1)} ${n[l]}B`}function it(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0;const l={};for(const a in e)l[a]=e[a];for(const a in t){const o=e[a],i=t[a];if(sl(o)&&sl(i)){l[a]=it(o,i,n);continue}if(Array.isArray(o)&&Array.isArray(i)&&n){l[a]=n(o,i);continue}l[a]=i}return l}function bi(e){return e.map(t=>t.type===oe?bi(t.children):t).flat()}function Wt(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";if(Wt.cache.has(e))return Wt.cache.get(e);const t=e.replace(/[^a-z]/gi,"-").replace(/\B([A-Z])/g,"-$1").toLowerCase();return Wt.cache.set(e,t),t}Wt.cache=new Map;function Bn(e,t){if(!t||typeof t!="object")return[];if(Array.isArray(t))return t.map(n=>Bn(e,n)).flat(1);if(Array.isArray(t.children))return t.children.map(n=>Bn(e,n)).flat(1);if(t.component){if(Object.getOwnPropertySymbols(t.component.provides).includes(e))return[t.component];if(t.component.subTree)return Bn(e,t.component.subTree).flat(1)}return[]}var Qn=new WeakMap,on=new WeakMap;class vf{constructor(t){fo(this,Qn,{writable:!0,value:[]}),fo(this,on,{writable:!0,value:0}),this.size=t}push(t){zt(this,Qn)[zt(this,on)]=t,sf(this,on,(zt(this,on)+1)%this.size)}values(){return zt(this,Qn).slice(zt(this,on)).concat(zt(this,Qn).slice(0,zt(this,on)))}}function ff(e){return"touches"in e?{clientX:e.touches[0].clientX,clientY:e.touches[0].clientY}:{clientX:e.clientX,clientY:e.clientY}}function Ba(e){const t=gt({}),n=h(e);return tt(()=>{for(const l in n.value)t[l]=n.value[l]},{flush:"sync"}),Sa(t)}function rl(e,t){return e.includes(t)}function pi(e){return e[2].toLowerCase()+e.slice(3)}const St=()=>[Function,Array];function bo(e,t){return t="on"+zn(t),!!(e[t]||e[`${t}Once`]||e[`${t}Capture`]||e[`${t}OnceCapture`]||e[`${t}CaptureOnce`])}function Ra(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),l=1;l<t;l++)n[l-1]=arguments[l];if(Array.isArray(e))for(const a of e)a(...n);else typeof e=="function"&&e(...n)}function Ln(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;const n=["button","[href]",'input:not([type="hidden"])',"select","textarea","[tabindex]"].map(l=>`${l}${t?':not([tabindex="-1"])':""}:not([disabled])`).join(", ");return[...e.querySelectorAll(n)]}function ki(e,t,n){let l,a=e.indexOf(document.activeElement);const o=t==="next"?1:-1;do a+=o,l=e[a];while((!l||l.offsetParent==null||!((n==null?void 0:n(l))??!0))&&a<e.length&&a>=0);return l}function ul(e,t){var l,a,o,i;const n=Ln(e);if(!t)(e===document.activeElement||!e.contains(document.activeElement))&&((l=n[0])==null||l.focus());else if(t==="first")(a=n[0])==null||a.focus();else if(t==="last")(o=n.at(-1))==null||o.focus();else if(typeof t=="number")(i=n[t])==null||i.focus();else{const s=ki(n,t);s?s.focus():ul(e,t==="next"?"first":"last")}}function Si(){}function dn(e,t){if(!(Ce&&typeof CSS<"u"&&typeof CSS.supports<"u"&&CSS.supports(`selector(${t})`)))return null;try{return!!e&&e.matches(t)}catch{return null}}const wi=["top","bottom"],mf=["start","end","left","right"];function Gl(e,t){let[n,l]=e.split(" ");return l||(l=rl(wi,n)?"start":rl(mf,n)?"top":"center"),{side:Wl(n,t),align:Wl(l,t)}}function Wl(e,t){return e==="start"?t?"right":"left":e==="end"?t?"left":"right":e}function Ll(e){return{side:{center:"center",top:"bottom",bottom:"top",left:"right",right:"left"}[e.side],align:e.align}}function $l(e){return{side:e.side,align:{center:"center",top:"bottom",bottom:"top",left:"right",right:"left"}[e.align]}}function po(e){return{side:e.align,align:e.side}}function ko(e){return rl(wi,e.side)?"y":"x"}class cn{constructor(t){let{x:n,y:l,width:a,height:o}=t;this.x=n,this.y=l,this.width=a,this.height=o}get top(){return this.y}get bottom(){return this.y+this.height}get left(){return this.x}get right(){return this.x+this.width}}function So(e,t){return{x:{before:Math.max(0,t.left-e.left),after:Math.max(0,e.right-t.right)},y:{before:Math.max(0,t.top-e.top),after:Math.max(0,e.bottom-t.bottom)}}}function Ea(e){const t=e.getBoundingClientRect(),n=getComputedStyle(e),l=n.transform;if(l){let a,o,i,s,u;if(l.startsWith("matrix3d("))a=l.slice(9,-1).split(/, /),o=+a[0],i=+a[5],s=+a[12],u=+a[13];else if(l.startsWith("matrix("))a=l.slice(7,-1).split(/, /),o=+a[0],i=+a[3],s=+a[4],u=+a[5];else return new cn(t);const c=n.transformOrigin,d=t.x-s-(1-o)*parseFloat(c),f=t.y-u-(1-i)*parseFloat(c.slice(c.indexOf(" ")+1)),v=o?t.width/o:e.offsetWidth+1,m=i?t.height/i:e.offsetHeight+1;return new cn({x:d,y:f,width:v,height:m})}else return new cn(t)}function Ut(e,t,n){if(typeof e.animate>"u")return{finished:Promise.resolve()};let l;try{l=e.animate(t,n)}catch{return{finished:Promise.resolve()}}return typeof l.finished>"u"&&(l.finished=new Promise(a=>{l.onfinish=()=>{a(l)}})),l}const ll=new WeakMap;function gf(e,t){Object.keys(t).forEach(n=>{if(Aa(n)){const l=pi(n),a=ll.get(e);if(t[n]==null)a==null||a.forEach(o=>{const[i,s]=o;i===l&&(e.removeEventListener(l,s),a.delete(o))});else if(!a||![...a].some(o=>o[0]===l&&o[1]===t[n])){e.addEventListener(l,t[n]);const o=a||new Set;o.add([l,t[n]]),ll.has(e)||ll.set(e,o)}}else t[n]==null?e.removeAttribute(n):e.setAttribute(n,t[n])})}function hf(e,t){Object.keys(t).forEach(n=>{if(Aa(n)){const l=pi(n),a=ll.get(e);a==null||a.forEach(o=>{const[i,s]=o;i===l&&(e.removeEventListener(l,s),a.delete(o))})}else e.removeAttribute(n)})}const sn=2.4,wo=.2126729,Co=.7151522,xo=.072175,yf=.55,bf=.58,pf=.57,kf=.62,el=.03,Vo=1.45,Sf=5e-4,wf=1.25,Cf=1.25,_o=.078,Io=12.82051282051282,tl=.06,To=.001;function Po(e,t){const n=(e.r/255)**sn,l=(e.g/255)**sn,a=(e.b/255)**sn,o=(t.r/255)**sn,i=(t.g/255)**sn,s=(t.b/255)**sn;let u=n*wo+l*Co+a*xo,c=o*wo+i*Co+s*xo;if(u<=el&&(u+=(el-u)**Vo),c<=el&&(c+=(el-c)**Vo),Math.abs(c-u)<Sf)return 0;let d;if(c>u){const f=(c**yf-u**bf)*wf;d=f<To?0:f<_o?f-f*Io*tl:f-tl}else{const f=(c**kf-u**pf)*Cf;d=f>-To?0:f>-_o?f-f*Io*tl:f+tl}return d*100}function xf(e,t){t=Array.isArray(t)?t.slice(0,-1).map(n=>`'${n}'`).join(", ")+` or '${t.at(-1)}'`:`'${t}'`}const cl=.20689655172413793,Vf=e=>e>cl**3?Math.cbrt(e):e/(3*cl**2)+4/29,_f=e=>e>cl?e**3:3*cl**2*(e-4/29);function Ci(e){const t=Vf,n=t(e[1]);return[116*n-16,500*(t(e[0]/.95047)-n),200*(n-t(e[2]/1.08883))]}function xi(e){const t=_f,n=(e[0]+16)/116;return[t(n+e[1]/500)*.95047,t(n),t(n-e[2]/200)*1.08883]}const If=[[3.2406,-1.5372,-.4986],[-.9689,1.8758,.0415],[.0557,-.204,1.057]],Tf=e=>e<=.0031308?e*12.92:1.055*e**(1/2.4)-.055,Pf=[[.4124,.3576,.1805],[.2126,.7152,.0722],[.0193,.1192,.9505]],Af=e=>e<=.04045?e/12.92:((e+.055)/1.055)**2.4;function Vi(e){const t=Array(3),n=Tf,l=If;for(let a=0;a<3;++a)t[a]=Math.round(Ue(n(l[a][0]*e[0]+l[a][1]*e[1]+l[a][2]*e[2]))*255);return{r:t[0],g:t[1],b:t[2]}}function La(e){let{r:t,g:n,b:l}=e;const a=[0,0,0],o=Af,i=Pf;t=o(t/255),n=o(n/255),l=o(l/255);for(let s=0;s<3;++s)a[s]=i[s][0]*t+i[s][1]*n+i[s][2]*l;return a}function Ao(e){return!!e&&/^(#|var\(--|(rgb|hsl)a?\()/.test(e)}const Bo=/^(?<fn>(?:rgb|hsl)a?)\((?<values>.+)\)/,Bf={rgb:(e,t,n,l)=>({r:e,g:t,b:n,a:l}),rgba:(e,t,n,l)=>({r:e,g:t,b:n,a:l}),hsl:(e,t,n,l)=>Ro({h:e,s:t,l:n,a:l}),hsla:(e,t,n,l)=>Ro({h:e,s:t,l:n,a:l}),hsv:(e,t,n,l)=>Vt({h:e,s:t,v:n,a:l}),hsva:(e,t,n,l)=>Vt({h:e,s:t,v:n,a:l})};function st(e){if(typeof e=="number")return{r:(e&16711680)>>16,g:(e&65280)>>8,b:e&255};if(typeof e=="string"&&Bo.test(e)){const{groups:t}=e.match(Bo),{fn:n,values:l}=t,a=l.split(/,\s*/).map(o=>o.endsWith("%")&&["hsl","hsla","hsv","hsva"].includes(n)?parseFloat(o)/100:parseFloat(o));return Bf[n](...a)}else if(typeof e=="string"){let t=e.startsWith("#")?e.slice(1):e;return[3,4].includes(t.length)?t=t.split("").map(n=>n+n).join(""):[6,8].includes(t.length),Ai(t)}else if(typeof e=="object"){if(jt(e,["r","g","b"]))return e;if(jt(e,["h","s","l"]))return Vt($a(e));if(jt(e,["h","s","v"]))return Vt(e)}throw new TypeError(`Invalid color: ${e==null?e:String(e)||e.constructor.name}
Expected #hex, #hexa, rgb(), rgba(), hsl(), hsla(), object or number`)}function Vt(e){const{h:t,s:n,v:l,a}=e,o=s=>{const u=(s+t/60)%6;return l-l*n*Math.max(Math.min(u,4-u,1),0)},i=[o(5),o(3),o(1)].map(s=>Math.round(s*255));return{r:i[0],g:i[1],b:i[2],a}}function Ro(e){return Vt($a(e))}function hl(e){if(!e)return{h:0,s:1,v:1,a:1};const t=e.r/255,n=e.g/255,l=e.b/255,a=Math.max(t,n,l),o=Math.min(t,n,l);let i=0;a!==o&&(a===t?i=60*(0+(n-l)/(a-o)):a===n?i=60*(2+(l-t)/(a-o)):a===l&&(i=60*(4+(t-n)/(a-o)))),i<0&&(i=i+360);const s=a===0?0:(a-o)/a,u=[i,s,a];return{h:u[0],s:u[1],v:u[2],a:e.a}}function _i(e){const{h:t,s:n,v:l,a}=e,o=l-l*n/2,i=o===1||o===0?0:(l-o)/Math.min(o,1-o);return{h:t,s:i,l:o,a}}function $a(e){const{h:t,s:n,l,a}=e,o=l+n*Math.min(l,1-l),i=o===0?0:2-2*l/o;return{h:t,s:i,v:o,a}}function Ii(e){let{r:t,g:n,b:l,a}=e;return a===void 0?`rgb(${t}, ${n}, ${l})`:`rgba(${t}, ${n}, ${l}, ${a})`}function Ti(e){return Ii(Vt(e))}function nl(e){const t=Math.round(e).toString(16);return("00".substr(0,2-t.length)+t).toUpperCase()}function Pi(e){let{r:t,g:n,b:l,a}=e;return`#${[nl(t),nl(n),nl(l),a!==void 0?nl(Math.round(a*255)):""].join("")}`}function Ai(e){e=Ef(e);let[t,n,l,a]=df(e,2).map(o=>parseInt(o,16));return a=a===void 0?a:a/255,{r:t,g:n,b:l,a}}function Rf(e){const t=Ai(e);return hl(t)}function Bi(e){return Pi(Vt(e))}function Ef(e){return e.startsWith("#")&&(e=e.slice(1)),e=e.replace(/([^0-9a-f])/gi,"F"),(e.length===3||e.length===4)&&(e=e.split("").map(t=>t+t).join("")),e.length!==6&&(e=ho(ho(e,6),8,"F")),e}function Lf(e,t){const n=Ci(La(e));return n[0]=n[0]+t*10,Vi(xi(n))}function $f(e,t){const n=Ci(La(e));return n[0]=n[0]-t*10,Vi(xi(n))}function Yl(e){const t=st(e);return La(t)[1]}function Mf(e,t){const n=Yl(e),l=Yl(t),a=Math.max(n,l),o=Math.min(n,l);return(a+.05)/(o+.05)}function Ri(e){const t=Math.abs(Po(st(0),st(e)));return Math.abs(Po(st(16777215),st(e)))>Math.min(t,50)?"#fff":"#000"}function R(e,t){return n=>Object.keys(e).reduce((l,a)=>{const i=typeof e[a]=="object"&&e[a]!=null&&!Array.isArray(e[a])?e[a]:{type:e[a]};return n&&a in n?l[a]={...i,default:n[a]}:l[a]=i,t&&!l[a].source&&(l[a].source=t),l},{})}const q=R({class:[String,Array],style:{type:[String,Array,Object],default:null}},"component");function ut(e){if(e._setup=e._setup??e.setup,!e.name)return e;if(e._setup){e.props=R(e.props??{},e.name)();const t=Object.keys(e.props);e.filterProps=function(l){return Kt(l,t,["class","style"])},e.props._as=String,e.setup=function(l,a){const o=Oa();if(!o.value)return e._setup(l,a);const{props:i,provideSubDefaults:s}=Uf(l,l._as??e.name,o),u=e._setup(i,a);return s(),u}}return e}function L(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0;return t=>(e?ut:Er)(t)}function bt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"div",n=arguments.length>2?arguments[2]:void 0;return L()({name:n??zn(ui(e.replace(/__/g,"-"))),props:{tag:{type:String,default:t},...q()},setup(l,a){let{slots:o}=a;return()=>{var i;return Jt(l.tag,{class:[e,l.class],style:l.style},(i=o.default)==null?void 0:i.call(o))}}})}function Ei(e){if(typeof e.getRootNode!="function"){for(;e.parentNode;)e=e.parentNode;return e!==document?null:document}const t=e.getRootNode();return t!==document&&t.getRootNode({composed:!0})!==document?null:t}const $n="cubic-bezier(0.4, 0, 0.2, 1)",Ff="cubic-bezier(0.0, 0, 0.2, 1)",Of="cubic-bezier(0.4, 0, 1, 1)";function Oe(e,t){const n=Lr();if(!n)throw new Error(`[Vuetify] ${e} ${t||"must be called from inside a setup function"}`);return n}function Tt(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"composables";const t=Oe(e).type;return Wt((t==null?void 0:t.aliasName)||(t==null?void 0:t.name))}let Li=0,al=new WeakMap;function We(){const e=Oe("getUid");if(al.has(e))return al.get(e);{const t=Li++;return al.set(e,t),t}}We.reset=()=>{Li=0,al=new WeakMap};function Ma(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;for(;e;){if(t?Df(e):Fa(e))return e;e=e.parentElement}return document.scrollingElement}function dl(e,t){const n=[];if(t&&e&&!t.contains(e))return n;for(;e&&(Fa(e)&&n.push(e),e!==t);)e=e.parentElement;return n}function Fa(e){if(!e||e.nodeType!==Node.ELEMENT_NODE)return!1;const t=window.getComputedStyle(e);return t.overflowY==="scroll"||t.overflowY==="auto"&&e.scrollHeight>e.clientHeight}function Df(e){if(!e||e.nodeType!==Node.ELEMENT_NODE)return!1;const t=window.getComputedStyle(e);return["scroll","auto"].includes(t.overflowY)}function Nf(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Oe("injectSelf");const{provides:n}=t;if(n&&e in n)return n[e]}function zf(e){for(;e;){if(window.getComputedStyle(e).position==="fixed")return!0;e=e.offsetParent}return!1}function j(e){const t=Oe("useRender");t.render=e}const vn=Symbol.for("vuetify:defaults");function Hf(e){return W(e)}function Oa(){const e=Ve(vn);if(!e)throw new Error("[Vuetify] Could not find defaults instance");return e}function Ee(e,t){const n=Oa(),l=W(e),a=h(()=>{if(ot(t==null?void 0:t.disabled))return n.value;const i=ot(t==null?void 0:t.scoped),s=ot(t==null?void 0:t.reset),u=ot(t==null?void 0:t.root);if(l.value==null&&!(i||s||u))return n.value;let c=it(l.value,{prev:n.value});if(i)return c;if(s||u){const d=Number(s||1/0);for(let f=0;f<=d&&!(!c||!("prev"in c));f++)c=c.prev;return c&&typeof u=="string"&&u in c&&(c=it(it(c,{prev:c}),c[u])),c}return c.prev?it(c.prev,c):c});return $e(vn,a),a}function jf(e,t){var n,l;return typeof((n=e.props)==null?void 0:n[t])<"u"||typeof((l=e.props)==null?void 0:l[Wt(t)])<"u"}function Uf(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:Oa();const l=Oe("useDefaults");if(t=t??l.type.name??l.type.__name,!t)throw new Error("[Vuetify] Could not determine component name");const a=h(()=>{var u;return(u=n.value)==null?void 0:u[e._as??t]}),o=new Proxy(e,{get(u,c){var f,v,m,g;const d=Reflect.get(u,c);return c==="class"||c==="style"?[(f=a.value)==null?void 0:f[c],d].filter(y=>y!=null):typeof c=="string"&&!jf(l.vnode,c)?((v=a.value)==null?void 0:v[c])??((g=(m=n.value)==null?void 0:m.global)==null?void 0:g[c])??d:d}}),i=K();tt(()=>{if(a.value){const u=Object.entries(a.value).filter(c=>{let[d]=c;return d.startsWith(d[0].toUpperCase())});i.value=u.length?Object.fromEntries(u):void 0}else i.value=void 0});function s(){const u=Nf(vn,l);$e(vn,h(()=>i.value?it((u==null?void 0:u.value)??{},i.value):u==null?void 0:u.value))}return{props:o,provideSubDefaults:s}}const yl=["sm","md","lg","xl","xxl"],Kl=Symbol.for("vuetify:display"),Eo={mobileBreakpoint:"lg",thresholds:{xs:0,sm:600,md:960,lg:1280,xl:1920,xxl:2560}},Gf=function(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Eo;return it(Eo,e)};function Lo(e){return Ce&&!e?window.innerWidth:typeof e=="object"&&e.clientWidth||0}function $o(e){return Ce&&!e?window.innerHeight:typeof e=="object"&&e.clientHeight||0}function Mo(e){const t=Ce&&!e?window.navigator.userAgent:"ssr";function n(g){return!!t.match(g)}const l=n(/android/i),a=n(/iphone|ipad|ipod/i),o=n(/cordova/i),i=n(/electron/i),s=n(/chrome/i),u=n(/edge/i),c=n(/firefox/i),d=n(/opera/i),f=n(/win/i),v=n(/mac/i),m=n(/linux/i);return{android:l,ios:a,cordova:o,electron:i,chrome:s,edge:u,firefox:c,opera:d,win:f,mac:v,linux:m,touch:af,ssr:t==="ssr"}}function Wf(e,t){const{thresholds:n,mobileBreakpoint:l}=Gf(e),a=K($o(t)),o=K(Mo(t)),i=gt({}),s=K(Lo(t));function u(){a.value=$o(),s.value=Lo()}function c(){u(),o.value=Mo()}return tt(()=>{const d=s.value<n.sm,f=s.value<n.md&&!d,v=s.value<n.lg&&!(f||d),m=s.value<n.xl&&!(v||f||d),g=s.value<n.xxl&&!(m||v||f||d),y=s.value>=n.xxl,b=d?"xs":f?"sm":v?"md":m?"lg":g?"xl":"xxl",p=typeof l=="number"?l:n[l],S=s.value<p;i.xs=d,i.sm=f,i.md=v,i.lg=m,i.xl=g,i.xxl=y,i.smAndUp=!d,i.mdAndUp=!(d||f),i.lgAndUp=!(d||f||v),i.xlAndUp=!(d||f||v||m),i.smAndDown=!(v||m||g||y),i.mdAndDown=!(m||g||y),i.lgAndDown=!(g||y),i.xlAndDown=!y,i.name=b,i.height=a.value,i.width=s.value,i.mobile=S,i.mobileBreakpoint=l,i.platform=o.value,i.thresholds=n}),Ce&&window.addEventListener("resize",u,{passive:!0}),{...Sa(i),update:c,ssr:!!t}}function en(){const e=Ve(Kl);if(!e)throw new Error("Could not find Vuetify display injection");return e}const Yf={collapse:"mdi-chevron-up",complete:"mdi-check",cancel:"mdi-close-circle",close:"mdi-close",delete:"mdi-close-circle",clear:"mdi-close-circle",success:"mdi-check-circle",info:"mdi-information",warning:"mdi-alert-circle",error:"mdi-close-circle",prev:"mdi-chevron-left",next:"mdi-chevron-right",checkboxOn:"mdi-checkbox-marked",checkboxOff:"mdi-checkbox-blank-outline",checkboxIndeterminate:"mdi-minus-box",delimiter:"mdi-circle",sortAsc:"mdi-arrow-up",sortDesc:"mdi-arrow-down",expand:"mdi-chevron-down",menu:"mdi-menu",subgroup:"mdi-menu-down",dropdown:"mdi-menu-down",radioOn:"mdi-radiobox-marked",radioOff:"mdi-radiobox-blank",edit:"mdi-pencil",ratingEmpty:"mdi-star-outline",ratingFull:"mdi-star",ratingHalf:"mdi-star-half-full",loading:"mdi-cached",first:"mdi-page-first",last:"mdi-page-last",unfold:"mdi-unfold-more-horizontal",file:"mdi-paperclip",plus:"mdi-plus",minus:"mdi-minus",calendar:"mdi-calendar"},Kf={component:e=>Jt(Na,{...e,class:"mdi"})},se=[String,Function,Object,Array],ql=Symbol.for("vuetify:icons"),bl=R({icon:{type:se},tag:{type:String,required:!0}},"icon"),Xl=L()({name:"VComponentIcon",props:bl(),setup(e,t){let{slots:n}=t;return()=>{const l=e.icon;return r(e.tag,null,{default:()=>{var a;return[e.icon?r(l,null,null):(a=n.default)==null?void 0:a.call(n)]}})}}}),Da=ut({name:"VSvgIcon",inheritAttrs:!1,props:bl(),setup(e,t){let{attrs:n}=t;return()=>r(e.tag,Y(n,{style:null}),{default:()=>[r("svg",{class:"v-icon__svg",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",role:"img","aria-hidden":"true"},[Array.isArray(e.icon)?e.icon.map(l=>Array.isArray(l)?r("path",{d:l[0],"fill-opacity":l[1]},null):r("path",{d:l},null)):r("path",{d:e.icon},null)])]})}}),qf=ut({name:"VLigatureIcon",props:bl(),setup(e){return()=>r(e.tag,null,{default:()=>[e.icon]})}}),Na=ut({name:"VClassIcon",props:bl(),setup(e){return()=>r(e.tag,{class:e.icon},null)}}),Xf={svg:{component:Da},class:{component:Na}};function Zf(e){return it({defaultSet:"mdi",sets:{...Xf,mdi:Kf},aliases:{...Yf,vuetify:["M8.2241 14.2009L12 21L22 3H14.4459L8.2241 14.2009Z",["M7.26303 12.4733L7.00113 12L2 3H12.5261C12.5261 3 12.5261 3 12.5261 3L7.26303 12.4733Z",.6]],"vuetify-outline":"svg:M7.26 12.47 12.53 3H2L7.26 12.47ZM14.45 3 8.22 14.2 12 21 22 3H14.45ZM18.6 5 12 16.88 10.51 14.2 15.62 5ZM7.26 8.35 5.4 5H9.13L7.26 8.35Z"}},e)}const Jf=e=>{const t=Ve(ql);if(!t)throw new Error("Missing Vuetify Icons provide!");return{iconData:h(()=>{var u;const l=ot(e);if(!l)return{component:Xl};let a=l;if(typeof a=="string"&&(a=a.trim(),a.startsWith("$")&&(a=(u=t.aliases)==null?void 0:u[a.slice(1)])),!a)throw new Error(`Could not find aliased icon "${l}"`);if(Array.isArray(a))return{component:Da,icon:a};if(typeof a!="string")return{component:Xl,icon:a};const o=Object.keys(t.sets).find(c=>typeof a=="string"&&a.startsWith(`${c}:`)),i=o?a.slice(o.length+1):a;return{component:t.sets[o??t.defaultSet].component,icon:i}})}},Qf={badge:"Badge",open:"Open",close:"Close",dataIterator:{noResultsText:"No matching records found",loadingText:"Loading items..."},dataTable:{itemsPerPageText:"Rows per page:",ariaLabel:{sortDescending:"Sorted descending.",sortAscending:"Sorted ascending.",sortNone:"Not sorted.",activateNone:"Activate to remove sorting.",activateDescending:"Activate to sort descending.",activateAscending:"Activate to sort ascending."},sortBy:"Sort by"},dataFooter:{itemsPerPageText:"Items per page:",itemsPerPageAll:"All",nextPage:"Next page",prevPage:"Previous page",firstPage:"First page",lastPage:"Last page",pageText:"{0}-{1} of {2}"},dateRangeInput:{divider:"to"},datePicker:{ok:"OK",cancel:"Cancel",range:{title:"Select dates",header:"Enter dates"},title:"Select date",header:"Enter date",input:{placeholder:"Enter date"}},noDataText:"No data available",carousel:{prev:"Previous visual",next:"Next visual",ariaLabel:{delimiter:"Carousel slide {0} of {1}"}},calendar:{moreEvents:"{0} more"},input:{clear:"Clear {0}",prependAction:"{0} prepended action",appendAction:"{0} appended action",otp:"Please enter OTP character {0}"},fileInput:{counter:"{0} files",counterSize:"{0} files ({1} in total)"},timePicker:{am:"AM",pm:"PM"},pagination:{ariaLabel:{root:"Pagination Navigation",next:"Next page",previous:"Previous page",page:"Go to page {0}",currentPage:"Page {0}, Current page",first:"First page",last:"Last page"}},stepper:{next:"Next",prev:"Previous"},rating:{ariaLabel:{item:"Rating {0} of {1}"}},loading:"Loading...",infiniteScroll:{loadMore:"Load more",empty:"No more"}},em={af:!1,ar:!0,bg:!1,ca:!1,ckb:!1,cs:!1,de:!1,el:!1,en:!1,es:!1,et:!1,fa:!0,fi:!1,fr:!1,hr:!1,hu:!1,he:!0,id:!1,it:!1,ja:!1,ko:!1,lv:!1,lt:!1,nl:!1,no:!1,pl:!1,pt:!1,ro:!1,ru:!1,sk:!1,sl:!1,srCyrl:!1,srLatn:!1,sv:!1,th:!1,tr:!1,az:!1,uk:!1,vi:!1,zhHans:!1,zhHant:!1};function Et(e,t){let n;function l(){n=wa(),n.run(()=>t.length?t(()=>{n==null||n.stop(),l()}):t())}Z(e,a=>{a&&!n?l():a||(n==null||n.stop(),n=void 0)},{immediate:!0}),Xe(()=>{n==null||n.stop()})}function ue(e,t,n){let l=arguments.length>3&&arguments[3]!==void 0?arguments[3]:f=>f,a=arguments.length>4&&arguments[4]!==void 0?arguments[4]:f=>f;const o=Oe("useProxiedModel"),i=W(e[t]!==void 0?e[t]:n),s=Wt(t),c=s!==t?h(()=>{var f,v,m,g;return e[t],!!(((f=o.vnode.props)!=null&&f.hasOwnProperty(t)||(v=o.vnode.props)!=null&&v.hasOwnProperty(s))&&((m=o.vnode.props)!=null&&m.hasOwnProperty(`onUpdate:${t}`)||(g=o.vnode.props)!=null&&g.hasOwnProperty(`onUpdate:${s}`)))}):h(()=>{var f,v;return e[t],!!((f=o.vnode.props)!=null&&f.hasOwnProperty(t)&&((v=o.vnode.props)!=null&&v.hasOwnProperty(`onUpdate:${t}`)))});Et(()=>!c.value,()=>{Z(()=>e[t],f=>{i.value=f})});const d=h({get(){const f=e[t];return l(c.value?f:i.value)},set(f){const v=a(f),m=$t(c.value?e[t]:i.value);m===v||l(m)===f||(i.value=v,o==null||o.emit(`update:${t}`,v))}});return Object.defineProperty(d,"externalValue",{get:()=>c.value?e[t]:i.value}),d}const Fo="$vuetify.",Oo=(e,t)=>e.replace(/\{(\d+)\}/g,(n,l)=>String(t[+l])),$i=(e,t,n)=>function(l){for(var a=arguments.length,o=new Array(a>1?a-1:0),i=1;i<a;i++)o[i-1]=arguments[i];if(!l.startsWith(Fo))return Oo(l,o);const s=l.replace(Fo,""),u=e.value&&n.value[e.value],c=t.value&&n.value[t.value];let d=Hl(u,s,null);return d||(`${l}${e.value}`,d=Hl(c,s,null)),d||(d=l),typeof d!="string"&&(d=l),Oo(d,o)};function Mi(e,t){return(n,l)=>new Intl.NumberFormat([e.value,t.value],l).format(n)}function Ml(e,t,n){const l=ue(e,t,e[t]??n.value);return l.value=e[t]??n.value,Z(n,a=>{e[t]==null&&(l.value=n.value)}),l}function Fi(e){return t=>{const n=Ml(t,"locale",e.current),l=Ml(t,"fallback",e.fallback),a=Ml(t,"messages",e.messages);return{name:"vuetify",current:n,fallback:l,messages:a,t:$i(n,l,a),n:Mi(n,l),provide:Fi({current:n,fallback:l,messages:a})}}}function tm(e){const t=K((e==null?void 0:e.locale)??"en"),n=K((e==null?void 0:e.fallback)??"en"),l=W({en:Qf,...e==null?void 0:e.messages});return{name:"vuetify",current:t,fallback:n,messages:l,t:$i(t,n,l),n:Mi(t,n),provide:Fi({current:t,fallback:n,messages:l})}}const fn=Symbol.for("vuetify:locale");function nm(e){return e.name!=null}function lm(e){const t=e!=null&&e.adapter&&nm(e==null?void 0:e.adapter)?e==null?void 0:e.adapter:tm(e),n=om(t,e);return{...t,...n}}function ct(){const e=Ve(fn);if(!e)throw new Error("[Vuetify] Could not find injected locale instance");return e}function am(e){const t=Ve(fn);if(!t)throw new Error("[Vuetify] Could not find injected locale instance");const n=t.provide(e),l=im(n,t.rtl,e),a={...n,...l};return $e(fn,a),a}function om(e,t){const n=W((t==null?void 0:t.rtl)??em),l=h(()=>n.value[e.current.value]??!1);return{isRtl:l,rtl:n,rtlClasses:h(()=>`v-locale--is-${l.value?"rtl":"ltr"}`)}}function im(e,t,n){const l=h(()=>n.rtl??t.value[e.current.value]??!1);return{isRtl:l,rtl:t,rtlClasses:h(()=>`v-locale--is-${l.value?"rtl":"ltr"}`)}}function De(){const e=Ve(fn);if(!e)throw new Error("[Vuetify] Could not find injected rtl instance");return{isRtl:e.isRtl,rtlClasses:e.rtlClasses}}const Mn=Symbol.for("vuetify:theme"),he=R({theme:String},"theme"),Tn={defaultTheme:"light",variations:{colors:[],lighten:0,darken:0},themes:{light:{dark:!1,colors:{background:"#FFFFFF",surface:"#FFFFFF","surface-bright":"#FFFFFF","surface-variant":"#424242","on-surface-variant":"#EEEEEE",primary:"#6200EE","primary-darken-1":"#3700B3",secondary:"#03DAC6","secondary-darken-1":"#018786",error:"#B00020",info:"#2196F3",success:"#4CAF50",warning:"#FB8C00"},variables:{"border-color":"#000000","border-opacity":.12,"high-emphasis-opacity":.87,"medium-emphasis-opacity":.6,"disabled-opacity":.38,"idle-opacity":.04,"hover-opacity":.04,"focus-opacity":.12,"selected-opacity":.08,"activated-opacity":.12,"pressed-opacity":.12,"dragged-opacity":.08,"theme-kbd":"#212529","theme-on-kbd":"#FFFFFF","theme-code":"#F5F5F5","theme-on-code":"#000000"}},dark:{dark:!0,colors:{background:"#121212",surface:"#212121","surface-bright":"#ccbfd6","surface-variant":"#a3a3a3","on-surface-variant":"#424242",primary:"#BB86FC","primary-darken-1":"#3700B3",secondary:"#03DAC5","secondary-darken-1":"#03DAC5",error:"#CF6679",info:"#2196F3",success:"#4CAF50",warning:"#FB8C00"},variables:{"border-color":"#FFFFFF","border-opacity":.12,"high-emphasis-opacity":1,"medium-emphasis-opacity":.7,"disabled-opacity":.5,"idle-opacity":.1,"hover-opacity":.04,"focus-opacity":.12,"selected-opacity":.08,"activated-opacity":.12,"pressed-opacity":.16,"dragged-opacity":.08,"theme-kbd":"#212529","theme-on-kbd":"#FFFFFF","theme-code":"#343434","theme-on-code":"#CCCCCC"}}}};function sm(){var n,l;let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Tn;if(!e)return{...Tn,isDisabled:!0};const t={};for(const[a,o]of Object.entries(e.themes??{})){const i=o.dark||a==="dark"?(n=Tn.themes)==null?void 0:n.dark:(l=Tn.themes)==null?void 0:l.light;t[a]=it(i,o)}return it(Tn,{...e,themes:t})}function rm(e){const t=sm(e),n=W(t.defaultTheme),l=W(t.themes),a=h(()=>{const d={};for(const[f,v]of Object.entries(l.value)){const m=d[f]={...v,colors:{...v.colors}};if(t.variations)for(const g of t.variations.colors){const y=m.colors[g];if(y)for(const b of["lighten","darken"]){const p=b==="lighten"?Lf:$f;for(const S of xt(t.variations[b],1))m.colors[`${g}-${b}-${S}`]=Pi(p(st(y),S))}}for(const g of Object.keys(m.colors)){if(/^on-[a-z]/.test(g)||m.colors[`on-${g}`])continue;const y=`on-${g}`,b=st(m.colors[g]);m.colors[y]=Ri(b)}}return d}),o=h(()=>a.value[n.value]),i=h(()=>{const d=[];o.value.dark&&Ht(d,":root",["color-scheme: dark"]),Ht(d,":root",Do(o.value));for(const[g,y]of Object.entries(a.value))Ht(d,`.v-theme--${g}`,[`color-scheme: ${y.dark?"dark":"normal"}`,...Do(y)]);const f=[],v=[],m=new Set(Object.values(a.value).flatMap(g=>Object.keys(g.colors)));for(const g of m)/^on-[a-z]/.test(g)?Ht(v,`.${g}`,[`color: rgb(var(--v-theme-${g})) !important`]):(Ht(f,`.bg-${g}`,[`--v-theme-overlay-multiplier: var(--v-theme-${g}-overlay-multiplier)`,`background-color: rgb(var(--v-theme-${g})) !important`,`color: rgb(var(--v-theme-on-${g})) !important`]),Ht(v,`.text-${g}`,[`color: rgb(var(--v-theme-${g})) !important`]),Ht(v,`.border-${g}`,[`--v-border-color: var(--v-theme-${g})`]));return d.push(...f,...v),d.map((g,y)=>y===0?g:`    ${g}`).join("")});function s(){return{style:[{children:i.value,id:"vuetify-theme-stylesheet",nonce:t.cspNonce||!1}]}}function u(d){if(t.isDisabled)return;const f=d._context.provides.usehead;if(f)if(f.push){const v=f.push(s);Ce&&Z(i,()=>{v.patch(s)})}else Ce?(f.addHeadObjs(h(s)),tt(()=>f.updateDOM())):f.addHeadObjs(s());else{let m=function(){if(typeof document<"u"&&!v){const g=document.createElement("style");g.type="text/css",g.id="vuetify-theme-stylesheet",t.cspNonce&&g.setAttribute("nonce",t.cspNonce),v=g,document.head.appendChild(v)}v&&(v.innerHTML=i.value)},v=Ce?document.getElementById("vuetify-theme-stylesheet"):null;Ce?Z(i,m,{immediate:!0}):m()}}const c=h(()=>t.isDisabled?void 0:`v-theme--${n.value}`);return{install:u,isDisabled:t.isDisabled,name:n,themes:l,current:o,computedThemes:a,themeClasses:c,styles:i,global:{name:n,current:o}}}function ye(e){Oe("provideTheme");const t=Ve(Mn,null);if(!t)throw new Error("Could not find Vuetify theme injection");const n=h(()=>e.theme??t.name.value),l=h(()=>t.themes.value[n.value]),a=h(()=>t.isDisabled?void 0:`v-theme--${n.value}`),o={...t,name:n,current:l,themeClasses:a};return $e(Mn,o),o}function Oi(){Oe("useTheme");const e=Ve(Mn,null);if(!e)throw new Error("Could not find Vuetify theme injection");return e}function Ht(e,t,n){e.push(`${t} {
`,...n.map(l=>`  ${l};
`),`}
`)}function Do(e){const t=e.dark?2:1,n=e.dark?1:2,l=[];for(const[a,o]of Object.entries(e.colors)){const i=st(o);l.push(`--v-theme-${a}: ${i.r},${i.g},${i.b}`),a.startsWith("on-")||l.push(`--v-theme-${a}-overlay-multiplier: ${Yl(o)>.18?t:n}`)}for(const[a,o]of Object.entries(e.variables)){const i=typeof o=="string"&&o.startsWith("#")?st(o):void 0,s=i?`${i.r}, ${i.g}, ${i.b}`:void 0;l.push(`--v-${a}: ${s??o}`)}return l}const Zl={"001":1,AD:1,AE:6,AF:6,AG:0,AI:1,AL:1,AM:1,AN:1,AR:1,AS:0,AT:1,AU:1,AX:1,AZ:1,BA:1,BD:0,BE:1,BG:1,BH:6,BM:1,BN:1,BR:0,BS:0,BT:0,BW:0,BY:1,BZ:0,CA:0,CH:1,CL:1,CM:1,CN:1,CO:0,CR:1,CY:1,CZ:1,DE:1,DJ:6,DK:1,DM:0,DO:0,DZ:6,EC:1,EE:1,EG:6,ES:1,ET:0,FI:1,FJ:1,FO:1,FR:1,GB:1,"GB-alt-variant":0,GE:1,GF:1,GP:1,GR:1,GT:0,GU:0,HK:0,HN:0,HR:1,HU:1,ID:0,IE:1,IL:0,IN:0,IQ:6,IR:6,IS:1,IT:1,JM:0,JO:6,JP:0,KE:0,KG:1,KH:0,KR:0,KW:6,KZ:1,LA:0,LB:1,LI:1,LK:1,LT:1,LU:1,LV:1,LY:6,MC:1,MD:1,ME:1,MH:0,MK:1,MM:0,MN:1,MO:0,MQ:1,MT:0,MV:5,MX:0,MY:1,MZ:0,NI:0,NL:1,NO:1,NP:0,NZ:1,OM:6,PA:0,PE:0,PH:0,PK:0,PL:1,PR:0,PT:0,PY:0,QA:6,RE:1,RO:1,RS:1,RU:1,SA:0,SD:6,SE:1,SG:0,SI:1,SK:1,SM:1,SV:0,SY:6,TH:0,TJ:1,TM:1,TR:1,TT:0,TW:0,UA:1,UM:0,US:0,UY:1,UZ:1,VA:1,VE:0,VI:0,VN:1,WS:0,XK:1,YE:0,ZA:0,ZW:0};function um(e,t){const n=[];let l=[];const a=Di(e),o=Ni(e),i=(a.getDay()-Zl[t.slice(-2).toUpperCase()]+7)%7,s=(o.getDay()-Zl[t.slice(-2).toUpperCase()]+7)%7;for(let u=0;u<i;u++){const c=new Date(a);c.setDate(c.getDate()-(i-u)),l.push(c)}for(let u=1;u<=o.getDate();u++){const c=new Date(e.getFullYear(),e.getMonth(),u);l.push(c),l.length===7&&(n.push(l),l=[])}for(let u=1;u<7-s;u++){const c=new Date(o);c.setDate(c.getDate()+u),l.push(c)}return n.push(l),n}function Di(e){return new Date(e.getFullYear(),e.getMonth(),1)}function Ni(e){return new Date(e.getFullYear(),e.getMonth()+1,0)}function cm(e){const t=e.split("-").map(Number);return new Date(t[0],t[1]-1,t[2])}const dm=/([12]\d{3}-([1-9]|0[1-9]|1[0-2])-([1-9]|0[1-9]|[12]\d|3[01]))/;function vm(e){if(e==null)return new Date;if(e instanceof Date)return e;if(typeof e=="string"){let t;if(dm.test(e))return cm(e);if(t=Date.parse(e),!isNaN(t))return new Date(t)}return null}const No=new Date(2e3,0,2);function fm(e){const t=Zl[e.slice(-2).toUpperCase()];return xt(7).map(n=>{const l=new Date(No);return l.setDate(No.getDate()+t+n),new Intl.DateTimeFormat(e,{weekday:"narrow"}).format(l)})}function mm(e,t,n){const l=new Date(e);let a={};switch(t){case"fullDateWithWeekday":a={weekday:"long",day:"numeric",month:"long",year:"numeric"};break;case"normalDateWithWeekday":a={weekday:"short",day:"numeric",month:"short"};break;case"keyboardDate":a={};break;case"monthAndDate":a={month:"long",day:"numeric"};break;case"monthAndYear":a={month:"long",year:"numeric"};break;case"dayOfMonth":a={day:"numeric"};break;case"shortDate":a={year:"numeric"};break;default:a={timeZone:"UTC",timeZoneName:"short"}}return new Intl.DateTimeFormat(n,a).format(l)}function gm(e,t){const n=new Date(e);return n.setDate(n.getDate()+t),n}function hm(e,t){const n=new Date(e);return n.setMonth(n.getMonth()+t),n}function ym(e){return e.getFullYear()}function bm(e){return e.getMonth()}function pm(e){return new Date(e.getFullYear(),0,1)}function km(e){return new Date(e.getFullYear(),11,31)}function Sm(e,t){return Jl(e,t[0])&&Cm(e,t[1])}function wm(e){if(!e||e==null)return!1;const t=new Date(e);return t instanceof Date&&!isNaN(t.getTime())}function Jl(e,t){return e.getTime()>t.getTime()}function Cm(e,t){return e.getTime()<t.getTime()}function zo(e,t){return e.getTime()===t.getTime()}function xm(e,t){return e.getDate()===t.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function Vm(e,t){return e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function _m(e,t,n){const l=new Date(e),a=new Date(t);return n==="month"?l.getMonth()-a.getMonth()+(l.getFullYear()-a.getFullYear())*12:Math.floor((l.getTime()-a.getTime())/(1e3*60*60*24))}function Im(e,t){const n=new Date(e);return n.setFullYear(t),n}function Tm(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate())}function Pm(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate(),23,59,59,999)}class Am{constructor(t){this.locale=t.locale}date(t){return vm(t)}toJsDate(t){return t}addDays(t,n){return gm(t,n)}addMonths(t,n){return hm(t,n)}getWeekArray(t){return um(t,this.locale)}startOfMonth(t){return Di(t)}endOfMonth(t){return Ni(t)}format(t,n){return mm(t,n,this.locale)}isEqual(t,n){return zo(t,n)}isValid(t){return wm(t)}isWithinRange(t,n){return Sm(t,n)}isAfter(t,n){return Jl(t,n)}isBefore(t,n){return!Jl(t,n)&&!zo(t,n)}isSameDay(t,n){return xm(t,n)}isSameMonth(t,n){return Vm(t,n)}setYear(t,n){return Im(t,n)}getDiff(t,n,l){return _m(t,n,l)}getWeekdays(){return fm(this.locale)}getYear(t){return ym(t)}getMonth(t){return bm(t)}startOfDay(t){return Tm(t)}endOfDay(t){return Pm(t)}startOfYear(t){return pm(t)}endOfYear(t){return km(t)}}const Ho=Symbol.for("vuetify:date-adapter");function Bm(e){return it({adapter:Am,locale:{af:"af-ZA",bg:"bg-BG",ca:"ca-ES",ckb:"",cs:"",de:"de-DE",el:"el-GR",en:"en-US",et:"et-EE",fa:"fa-IR",fi:"fi-FI",hr:"hr-HR",hu:"hu-HU",he:"he-IL",id:"id-ID",it:"it-IT",ja:"ja-JP",ko:"ko-KR",lv:"lv-LV",lt:"lt-LT",nl:"nl-NL",no:"nn-NO",pl:"pl-PL",pt:"pt-PT",ro:"ro-RO",ru:"ru-RU",sk:"sk-SK",sl:"sl-SI",srCyrl:"sr-SP",srLatn:"sr-SP",sv:"sv-SE",th:"th-TH",tr:"tr-TR",az:"az-AZ",uk:"uk-UA",vi:"vi-VN",zhHans:"zh-CN",zhHant:"zh-TW"}},e)}function wt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"content";const n=W(),l=W();if(Ce){const a=new ResizeObserver(o=>{e==null||e(o,a),o.length&&(t==="content"?l.value=o[0].contentRect:l.value=o[0].target.getBoundingClientRect())});nt(()=>{a.disconnect()}),Z(n,(o,i)=>{i&&(a.unobserve(jl(i)),l.value=void 0),o&&a.observe(jl(o))},{flush:"post"})}return{resizeRef:n,contentRect:Ca(l)}}const vl=Symbol.for("vuetify:layout"),zi=Symbol.for("vuetify:layout-item"),jo=1e3,Hi=R({overlaps:{type:Array,default:()=>[]},fullHeight:Boolean},"layout"),yn=R({name:{type:String},order:{type:[Number,String],default:0},absolute:Boolean},"layout-item");function Rm(){const e=Ve(vl);if(!e)throw new Error("[Vuetify] Could not find injected layout");return{getLayoutItem:e.getLayoutItem,mainRect:e.mainRect,mainStyles:e.mainStyles}}function bn(e){const t=Ve(vl);if(!t)throw new Error("[Vuetify] Could not find injected layout");const n=e.id??`layout-item-${We()}`,l=Oe("useLayoutItem");$e(zi,{id:n});const a=K(!1);$r(()=>a.value=!0),Mr(()=>a.value=!1);const{layoutItemStyles:o,layoutItemScrimStyles:i}=t.register(l,{...e,active:h(()=>a.value?!1:e.active.value),id:n});return nt(()=>t.unregister(n)),{layoutItemStyles:o,layoutRect:t.layoutRect,layoutItemScrimStyles:i}}const Em=(e,t,n,l)=>{let a={top:0,left:0,right:0,bottom:0};const o=[{id:"",layer:{...a}}];for(const i of e){const s=t.get(i),u=n.get(i),c=l.get(i);if(!s||!u||!c)continue;const d={...a,[s.value]:parseInt(a[s.value],10)+(c.value?parseInt(u.value,10):0)};o.push({id:i,layer:d}),a=d}return o};function ji(e){const t=Ve(vl,null),n=h(()=>t?t.rootZIndex.value-100:jo),l=W([]),a=gt(new Map),o=gt(new Map),i=gt(new Map),s=gt(new Map),u=gt(new Map),{resizeRef:c,contentRect:d}=wt(),f=h(()=>{const x=new Map,T=e.overlaps??[];for(const w of T.filter(k=>k.includes(":"))){const[k,I]=w.split(":");if(!l.value.includes(k)||!l.value.includes(I))continue;const A=a.get(k),B=a.get(I),E=o.get(k),F=o.get(I);!A||!B||!E||!F||(x.set(I,{position:A.value,amount:parseInt(E.value,10)}),x.set(k,{position:B.value,amount:-parseInt(F.value,10)}))}return x}),v=h(()=>{const x=[...new Set([...i.values()].map(w=>w.value))].sort((w,k)=>w-k),T=[];for(const w of x){const k=l.value.filter(I=>{var A;return((A=i.get(I))==null?void 0:A.value)===w});T.push(...k)}return Em(T,a,o,s)}),m=h(()=>!Array.from(u.values()).some(x=>x.value)),g=h(()=>v.value[v.value.length-1].layer),y=h(()=>({"--v-layout-left":J(g.value.left),"--v-layout-right":J(g.value.right),"--v-layout-top":J(g.value.top),"--v-layout-bottom":J(g.value.bottom),...m.value?void 0:{transition:"none"}})),b=h(()=>v.value.slice(1).map((x,T)=>{let{id:w}=x;const{layer:k}=v.value[T],I=o.get(w),A=a.get(w);return{id:w,...k,size:Number(I.value),position:A.value}})),p=x=>b.value.find(T=>T.id===x),S=Oe("createLayout"),C=K(!1);Je(()=>{C.value=!0}),$e(vl,{register:(x,T)=>{let{id:w,order:k,position:I,layoutSize:A,elementSize:B,active:E,disableTransitions:F,absolute:X}=T;i.set(w,k),a.set(w,I),o.set(w,A),s.set(w,E),F&&u.set(w,F);const N=Bn(zi,S==null?void 0:S.vnode).indexOf(x);N>-1?l.value.splice(N,0,w):l.value.push(w);const M=h(()=>b.value.findIndex(ae=>ae.id===w)),G=h(()=>n.value+v.value.length*2-M.value*2),U=h(()=>{const ae=I.value==="left"||I.value==="right",re=I.value==="right",ve=I.value==="bottom",ge={[I.value]:0,zIndex:G.value,transform:`translate${ae?"X":"Y"}(${(E.value?0:-110)*(re||ve?-1:1)}%)`,position:X.value||n.value!==jo?"absolute":"fixed",...m.value?void 0:{transition:"none"}};if(!C.value)return ge;const D=b.value[M.value];if(!D)throw new Error(`[Vuetify] Could not find layout item "${w}"`);const me=f.value.get(w);return me&&(D[me.position]+=me.amount),{...ge,height:ae?`calc(100% - ${D.top}px - ${D.bottom}px)`:B.value?`${B.value}px`:void 0,left:re?void 0:`${D.left}px`,right:re?`${D.right}px`:void 0,top:I.value!=="bottom"?`${D.top}px`:void 0,bottom:I.value!=="top"?`${D.bottom}px`:void 0,width:ae?B.value?`${B.value}px`:void 0:`calc(100% - ${D.left}px - ${D.right}px)`}}),z=h(()=>({zIndex:G.value-1}));return{layoutItemStyles:U,layoutItemScrimStyles:z,zIndex:G}},unregister:x=>{i.delete(x),a.delete(x),o.delete(x),s.delete(x),u.delete(x),l.value=l.value.filter(T=>T!==x)},mainRect:g,mainStyles:y,getLayoutItem:p,items:b,layoutRect:d,rootZIndex:n});const _=h(()=>["v-layout",{"v-layout--full-height":e.fullHeight}]),V=h(()=>({zIndex:t?n.value:void 0,position:t?"relative":void 0,overflow:t?"hidden":void 0}));return{layoutClasses:_,layoutStyles:V,getLayoutItem:p,items:b,layoutRect:d,layoutRef:c}}function Ui(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const{blueprint:t,...n}=e,l=it(t,n),{aliases:a={},components:o={},directives:i={}}=l,s=Hf(l.defaults),u=Wf(l.display,l.ssr),c=rm(l.theme),d=Zf(l.icons),f=lm(l.locale),v=Bm(l.date);return{install:g=>{for(const y in i)g.directive(y,i[y]);for(const y in o)g.component(y,o[y]);for(const y in a)g.component(y,ut({...a[y],name:y,aliasName:a[y].name}));if(c.install(g),g.provide(vn,s),g.provide(Kl,u),g.provide(Mn,c),g.provide(ql,d),g.provide(fn,f),g.provide(Ho,v),Ce&&l.ssr)if(g.$nuxt)g.$nuxt.hook("app:suspense:resolve",()=>{u.update()});else{const{mount:y}=g;g.mount=function(){const b=y(...arguments);return xe(()=>u.update()),g.mount=y,b}}We.reset(),g.mixin({computed:{$vuetify(){return gt({defaults:rn.call(this,vn),display:rn.call(this,Kl),theme:rn.call(this,Mn),icons:rn.call(this,ql),locale:rn.call(this,fn),date:rn.call(this,Ho)})}}})},defaults:s,display:u,theme:c,icons:d,locale:f,date:v}}const Lm="3.3.19";Ui.version=Lm;function rn(e){var l,a;const t=this.$,n=((l=t.parent)==null?void 0:l.provides)??((a=t.vnode.appContext)==null?void 0:a.provides);if(n&&e in n)return n[e]}const $m=R({...q(),...Hi({fullHeight:!0}),...he()},"VApp"),Mm=L()({name:"VApp",props:$m(),setup(e,t){let{slots:n}=t;const l=ye(e),{layoutClasses:a,getLayoutItem:o,items:i,layoutRef:s}=ji(e),{rtlClasses:u}=De();return j(()=>{var c;return r("div",{ref:s,class:["v-application",l.themeClasses.value,a.value,u.value,e.class],style:[e.style]},[r("div",{class:"v-application__wrap"},[(c=n.default)==null?void 0:c.call(n)])])}),{getLayoutItem:o,items:i,theme:l}}});const ce=R({tag:{type:String,default:"div"}},"tag"),Gi=R({text:String,...q(),...ce()},"VToolbarTitle"),za=L()({name:"VToolbarTitle",props:Gi(),setup(e,t){let{slots:n}=t;return j(()=>{const l=!!(n.default||n.text||e.text);return r(e.tag,{class:["v-toolbar-title",e.class],style:e.style},{default:()=>{var a;return[l&&r("div",{class:"v-toolbar-title__placeholder"},[n.text?n.text():e.text,(a=n.default)==null?void 0:a.call(n)])]}})}),{}}}),Fm=R({disabled:Boolean,group:Boolean,hideOnLeave:Boolean,leaveAbsolute:Boolean,mode:String,origin:String},"transition");function lt(e,t,n){return L()({name:e,props:Fm({mode:n,origin:t}),setup(l,a){let{slots:o}=a;const i={onBeforeEnter(s){l.origin&&(s.style.transformOrigin=l.origin)},onLeave(s){if(l.leaveAbsolute){const{offsetTop:u,offsetLeft:c,offsetWidth:d,offsetHeight:f}=s;s._transitionInitialStyles={position:s.style.position,top:s.style.top,left:s.style.left,width:s.style.width,height:s.style.height},s.style.position="absolute",s.style.top=`${u}px`,s.style.left=`${c}px`,s.style.width=`${d}px`,s.style.height=`${f}px`}l.hideOnLeave&&s.style.setProperty("display","none","important")},onAfterLeave(s){if(l.leaveAbsolute&&(s!=null&&s._transitionInitialStyles)){const{position:u,top:c,left:d,width:f,height:v}=s._transitionInitialStyles;delete s._transitionInitialStyles,s.style.position=u||"",s.style.top=c||"",s.style.left=d||"",s.style.width=f||"",s.style.height=v||""}}};return()=>{const s=l.group?Fr:Rt;return Jt(s,{name:l.disabled?"":e,css:!l.disabled,...l.group?void 0:{mode:l.mode},...l.disabled?{}:i},o.default)}}})}function Wi(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"in-out";return L()({name:e,props:{mode:{type:String,default:n},disabled:Boolean},setup(l,a){let{slots:o}=a;return()=>Jt(Rt,{name:l.disabled?"":e,css:!l.disabled,...l.disabled?{}:t},o.default)}})}function Yi(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";const n=(arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1)?"width":"height",l=ui(`offset-${n}`);return{onBeforeEnter(i){i._parent=i.parentNode,i._initialStyle={transition:i.style.transition,overflow:i.style.overflow,[n]:i.style[n]}},onEnter(i){const s=i._initialStyle;i.style.setProperty("transition","none","important"),i.style.overflow="hidden";const u=`${i[l]}px`;i.style[n]="0",i.offsetHeight,i.style.transition=s.transition,e&&i._parent&&i._parent.classList.add(e),requestAnimationFrame(()=>{i.style[n]=u})},onAfterEnter:o,onEnterCancelled:o,onLeave(i){i._initialStyle={transition:"",overflow:i.style.overflow,[n]:i.style[n]},i.style.overflow="hidden",i.style[n]=`${i[l]}px`,i.offsetHeight,requestAnimationFrame(()=>i.style[n]="0")},onAfterLeave:a,onLeaveCancelled:a};function a(i){e&&i._parent&&i._parent.classList.remove(e),o(i)}function o(i){const s=i._initialStyle[n];i.style.overflow=i._initialStyle.overflow,s!=null&&(i.style[n]=s),delete i._initialStyle}}const Om=R({target:Object},"v-dialog-transition"),pl=L()({name:"VDialogTransition",props:Om(),setup(e,t){let{slots:n}=t;const l={onBeforeEnter(a){a.style.pointerEvents="none",a.style.visibility="hidden"},async onEnter(a,o){var v;await new Promise(m=>requestAnimationFrame(m)),await new Promise(m=>requestAnimationFrame(m)),a.style.visibility="";const{x:i,y:s,sx:u,sy:c,speed:d}=Go(e.target,a),f=Ut(a,[{transform:`translate(${i}px, ${s}px) scale(${u}, ${c})`,opacity:0},{}],{duration:225*d,easing:Ff});(v=Uo(a))==null||v.forEach(m=>{Ut(m,[{opacity:0},{opacity:0,offset:.33},{}],{duration:225*2*d,easing:$n})}),f.finished.then(()=>o())},onAfterEnter(a){a.style.removeProperty("pointer-events")},onBeforeLeave(a){a.style.pointerEvents="none"},async onLeave(a,o){var v;await new Promise(m=>requestAnimationFrame(m));const{x:i,y:s,sx:u,sy:c,speed:d}=Go(e.target,a);Ut(a,[{},{transform:`translate(${i}px, ${s}px) scale(${u}, ${c})`,opacity:0}],{duration:125*d,easing:Of}).finished.then(()=>o()),(v=Uo(a))==null||v.forEach(m=>{Ut(m,[{},{opacity:0,offset:.2},{opacity:0}],{duration:125*2*d,easing:$n})})},onAfterLeave(a){a.style.removeProperty("pointer-events")}};return()=>e.target?r(Rt,Y({name:"dialog-transition"},l,{css:!1}),n):r(Rt,{name:"dialog-transition"},n)}});function Uo(e){var n;const t=(n=e.querySelector(":scope > .v-card, :scope > .v-sheet, :scope > .v-list"))==null?void 0:n.children;return t&&[...t]}function Go(e,t){const n=e.getBoundingClientRect(),l=Ea(t),[a,o]=getComputedStyle(t).transformOrigin.split(" ").map(p=>parseFloat(p)),[i,s]=getComputedStyle(t).getPropertyValue("--v-overlay-anchor-origin").split(" ");let u=n.left+n.width/2;i==="left"||s==="left"?u-=n.width/2:(i==="right"||s==="right")&&(u+=n.width/2);let c=n.top+n.height/2;i==="top"||s==="top"?c-=n.height/2:(i==="bottom"||s==="bottom")&&(c+=n.height/2);const d=n.width/l.width,f=n.height/l.height,v=Math.max(1,d,f),m=d/v||0,g=f/v||0,y=l.width*l.height/(window.innerWidth*window.innerHeight),b=y>.12?Math.min(1.5,(y-.12)*10+1):1;return{x:u-(a+l.left),y:c-(o+l.top),sx:m,sy:g,speed:b}}const Dm=lt("fab-transition","center center","out-in"),Nm=lt("dialog-bottom-transition"),zm=lt("dialog-top-transition"),Ql=lt("fade-transition"),Ha=lt("scale-transition"),Hm=lt("scroll-x-transition"),jm=lt("scroll-x-reverse-transition"),Um=lt("scroll-y-transition"),Gm=lt("scroll-y-reverse-transition"),Wm=lt("slide-x-transition"),Ym=lt("slide-x-reverse-transition"),ja=lt("slide-y-transition"),Km=lt("slide-y-reverse-transition"),kl=Wi("expand-transition",Yi()),Ua=Wi("expand-x-transition",Yi("",!0)),qm=R({defaults:Object,disabled:Boolean,reset:[Number,String],root:[Boolean,String],scoped:Boolean},"VDefaultsProvider"),pe=L(!1)({name:"VDefaultsProvider",props:qm(),setup(e,t){let{slots:n}=t;const{defaults:l,disabled:a,reset:o,root:i,scoped:s}=Sa(e);return Ee(l,{reset:o,root:i,scoped:s,disabled:a}),()=>{var u;return(u=n.default)==null?void 0:u.call(n)}}});const dt=R({height:[Number,String],maxHeight:[Number,String],maxWidth:[Number,String],minHeight:[Number,String],minWidth:[Number,String],width:[Number,String]},"dimension");function vt(e){return{dimensionStyles:h(()=>({height:J(e.height),maxHeight:J(e.maxHeight),maxWidth:J(e.maxWidth),minHeight:J(e.minHeight),minWidth:J(e.minWidth),width:J(e.width)}))}}function Xm(e){return{aspectStyles:h(()=>{const t=Number(e.aspectRatio);return t?{paddingBottom:String(1/t*100)+"%"}:void 0})}}const Ki=R({aspectRatio:[String,Number],contentClass:String,inline:Boolean,...q(),...dt()},"VResponsive"),ea=L()({name:"VResponsive",props:Ki(),setup(e,t){let{slots:n}=t;const{aspectStyles:l}=Xm(e),{dimensionStyles:a}=vt(e);return j(()=>{var o;return r("div",{class:["v-responsive",{"v-responsive--inline":e.inline},e.class],style:[a.value,e.style]},[r("div",{class:"v-responsive__sizer",style:l.value},null),(o=n.additional)==null?void 0:o.call(n),n.default&&r("div",{class:["v-responsive__content",e.contentClass]},[n.default()])])}),{}}}),Pt=R({transition:{type:[Boolean,String,Object],default:"fade-transition",validator:e=>e!==!0}},"transition"),ht=(e,t)=>{let{slots:n}=t;const{transition:l,disabled:a,...o}=e,{component:i=Rt,...s}=typeof l=="object"?l:{};return Jt(i,Y(typeof l=="string"?{name:a?"":l}:s,o,{disabled:a}),n)};function Zm(e,t){if(!Pa)return;const n=t.modifiers||{},l=t.value,{handler:a,options:o}=typeof l=="object"?l:{handler:l,options:{}},i=new IntersectionObserver(function(){var f;let s=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],u=arguments.length>1?arguments[1]:void 0;const c=(f=e._observe)==null?void 0:f[t.instance.$.uid];if(!c)return;const d=s.some(v=>v.isIntersecting);a&&(!n.quiet||c.init)&&(!n.once||d||c.init)&&a(d,s,u),d&&n.once?qi(e,t):c.init=!0},o);e._observe=Object(e._observe),e._observe[t.instance.$.uid]={init:!1,observer:i},i.observe(e)}function qi(e,t){var l;const n=(l=e._observe)==null?void 0:l[t.instance.$.uid];n&&(n.observer.unobserve(e),delete e._observe[t.instance.$.uid])}const jn={mounted:Zm,unmounted:qi},Xi=R({alt:String,cover:Boolean,eager:Boolean,gradient:String,lazySrc:String,options:{type:Object,default:()=>({root:void 0,rootMargin:void 0,threshold:void 0})},sizes:String,src:{type:[String,Object],default:""},srcset:String,...Ki(),...q(),...Pt()},"VImg"),qt=L()({name:"VImg",directives:{intersect:jn},props:Xi(),emits:{loadstart:e=>!0,load:e=>!0,error:e=>!0},setup(e,t){let{emit:n,slots:l}=t;const a=K(""),o=W(),i=K(e.eager?"loading":"idle"),s=K(),u=K(),c=h(()=>e.src&&typeof e.src=="object"?{src:e.src.src,srcset:e.srcset||e.src.srcset,lazySrc:e.lazySrc||e.src.lazySrc,aspect:Number(e.aspectRatio||e.src.aspect||0)}:{src:e.src,srcset:e.srcset,lazySrc:e.lazySrc,aspect:Number(e.aspectRatio||0)}),d=h(()=>c.value.aspect||s.value/u.value||0);Z(()=>e.src,()=>{f(i.value!=="idle")}),Z(d,(w,k)=>{!w&&k&&o.value&&b(o.value)}),xa(()=>f());function f(w){if(!(e.eager&&w)&&!(Pa&&!w&&!e.eager)){if(i.value="loading",c.value.lazySrc){const k=new Image;k.src=c.value.lazySrc,b(k,null)}c.value.src&&xe(()=>{var k,I;if(n("loadstart",((k=o.value)==null?void 0:k.currentSrc)||c.value.src),(I=o.value)!=null&&I.complete){if(o.value.naturalWidth||m(),i.value==="error")return;d.value||b(o.value,null),v()}else d.value||b(o.value),g()})}}function v(){var w;g(),i.value="loaded",n("load",((w=o.value)==null?void 0:w.currentSrc)||c.value.src)}function m(){var w;i.value="error",n("error",((w=o.value)==null?void 0:w.currentSrc)||c.value.src)}function g(){const w=o.value;w&&(a.value=w.currentSrc||w.src)}let y=-1;function b(w){let k=arguments.length>1&&arguments[1]!==void 0?arguments[1]:100;const I=()=>{clearTimeout(y);const{naturalHeight:A,naturalWidth:B}=w;A||B?(s.value=B,u.value=A):!w.complete&&i.value==="loading"&&k!=null?y=window.setTimeout(I,k):(w.currentSrc.endsWith(".svg")||w.currentSrc.startsWith("data:image/svg+xml"))&&(s.value=1,u.value=1)};I()}const p=h(()=>({"v-img__img--cover":e.cover,"v-img__img--contain":!e.cover})),S=()=>{var I;if(!c.value.src||i.value==="idle")return null;const w=r("img",{class:["v-img__img",p.value],src:c.value.src,srcset:c.value.srcset,alt:e.alt,sizes:e.sizes,ref:o,onLoad:v,onError:m},null),k=(I=l.sources)==null?void 0:I.call(l);return r(ht,{transition:e.transition,appear:!0},{default:()=>[ne(k?r("picture",{class:"v-img__picture"},[k,w]):w,[[Pe,i.value==="loaded"]])]})},C=()=>r(ht,{transition:e.transition},{default:()=>[c.value.lazySrc&&i.value!=="loaded"&&r("img",{class:["v-img__img","v-img__img--preload",p.value],src:c.value.lazySrc,alt:e.alt},null)]}),_=()=>l.placeholder?r(ht,{transition:e.transition,appear:!0},{default:()=>[(i.value==="loading"||i.value==="error"&&!l.error)&&r("div",{class:"v-img__placeholder"},[l.placeholder()])]}):null,V=()=>l.error?r(ht,{transition:e.transition,appear:!0},{default:()=>[i.value==="error"&&r("div",{class:"v-img__error"},[l.error()])]}):null,x=()=>e.gradient?r("div",{class:"v-img__gradient",style:{backgroundImage:`linear-gradient(${e.gradient})`}},null):null,T=K(!1);{const w=Z(d,k=>{k&&(requestAnimationFrame(()=>{requestAnimationFrame(()=>{T.value=!0})}),w())})}return j(()=>{const[w]=ea.filterProps(e);return ne(r(ea,Y({class:["v-img",{"v-img--booting":!T.value},e.class],style:[{width:J(e.width==="auto"?s.value:e.width)},e.style]},w,{aspectRatio:d.value,"aria-label":e.alt,role:e.alt?"img":void 0}),{additional:()=>r(oe,null,[r(S,null,null),r(C,null,null),r(x,null,null),r(_,null,null),r(V,null,null)]),default:l.default}),[[Ze("intersect"),{handler:f,options:e.options},null,{once:!0}]])}),{currentSrc:a,image:o,state:i,naturalWidth:s,naturalHeight:u}}}),at=R({border:[Boolean,Number,String]},"border");function ft(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{borderClasses:h(()=>{const l=Hn(e)?e.value:e.border,a=[];if(l===!0||l==="")a.push(`${t}--border`);else if(typeof l=="string"||l===0)for(const o of String(l).split(" "))a.push(`border-${o}`);return a})}}function Ga(e){return Ba(()=>{const t=[],n={};if(e.value.background)if(Ao(e.value.background)){if(n.backgroundColor=e.value.background,!e.value.text){const l=st(e.value.background);if(l.a==null||l.a===1){const a=Ri(l);n.color=a,n.caretColor=a}}}else t.push(`bg-${e.value.background}`);return e.value.text&&(Ao(e.value.text)?(n.color=e.value.text,n.caretColor=e.value.text):t.push(`text-${e.value.text}`)),{colorClasses:t,colorStyles:n}})}function Ge(e,t){const n=h(()=>({text:Hn(e)?e.value:t?e[t]:null})),{colorClasses:l,colorStyles:a}=Ga(n);return{textColorClasses:l,textColorStyles:a}}function Be(e,t){const n=h(()=>({background:Hn(e)?e.value:t?e[t]:null})),{colorClasses:l,colorStyles:a}=Ga(n);return{backgroundColorClasses:l,backgroundColorStyles:a}}const Me=R({elevation:{type:[Number,String],validator(e){const t=parseInt(e);return!isNaN(t)&&t>=0&&t<=24}}},"elevation");function He(e){return{elevationClasses:h(()=>{const n=Hn(e)?e.value:e.elevation,l=[];return n==null||l.push(`elevation-${n}`),l})}}const Ie=R({rounded:{type:[Boolean,Number,String],default:void 0}},"rounded");function Ae(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{roundedClasses:h(()=>{const l=Hn(e)?e.value:e.rounded,a=[];if(l===!0||l==="")a.push(`${t}--rounded`);else if(typeof l=="string"||l===0)for(const o of String(l).split(" "))a.push(`rounded-${o}`);return a})}}const Jm=[null,"prominent","default","comfortable","compact"],Zi=R({absolute:Boolean,collapse:Boolean,color:String,density:{type:String,default:"default",validator:e=>Jm.includes(e)},extended:Boolean,extensionHeight:{type:[Number,String],default:48},flat:Boolean,floating:Boolean,height:{type:[Number,String],default:64},image:String,title:String,...at(),...q(),...Me(),...Ie(),...ce({tag:"header"}),...he()},"VToolbar"),ta=L()({name:"VToolbar",props:Zi(),setup(e,t){var m;let{slots:n}=t;const{backgroundColorClasses:l,backgroundColorStyles:a}=Be(O(e,"color")),{borderClasses:o}=ft(e),{elevationClasses:i}=He(e),{roundedClasses:s}=Ae(e),{themeClasses:u}=ye(e),{rtlClasses:c}=De(),d=K(!!(e.extended||(m=n.extension)!=null&&m.call(n))),f=h(()=>parseInt(Number(e.height)+(e.density==="prominent"?Number(e.height):0)-(e.density==="comfortable"?8:0)-(e.density==="compact"?16:0),10)),v=h(()=>d.value?parseInt(Number(e.extensionHeight)+(e.density==="prominent"?Number(e.extensionHeight):0)-(e.density==="comfortable"?4:0)-(e.density==="compact"?8:0),10):0);return Ee({VBtn:{variant:"text"}}),j(()=>{var p;const g=!!(e.title||n.title),y=!!(n.image||e.image),b=(p=n.extension)==null?void 0:p.call(n);return d.value=!!(e.extended||b),r(e.tag,{class:["v-toolbar",{"v-toolbar--absolute":e.absolute,"v-toolbar--collapse":e.collapse,"v-toolbar--flat":e.flat,"v-toolbar--floating":e.floating,[`v-toolbar--density-${e.density}`]:!0},l.value,o.value,i.value,s.value,u.value,c.value,e.class],style:[a.value,e.style]},{default:()=>[y&&r("div",{key:"image",class:"v-toolbar__image"},[n.image?r(pe,{key:"image-defaults",disabled:!e.image,defaults:{VImg:{cover:!0,src:e.image}}},n.image):r(qt,{key:"image-img",cover:!0,src:e.image},null)]),r(pe,{defaults:{VTabs:{height:J(f.value)}}},{default:()=>{var S,C,_;return[r("div",{class:"v-toolbar__content",style:{height:J(f.value)}},[n.prepend&&r("div",{class:"v-toolbar__prepend"},[(S=n.prepend)==null?void 0:S.call(n)]),g&&r(za,{key:"title",text:e.title},{text:n.title}),(C=n.default)==null?void 0:C.call(n),n.append&&r("div",{class:"v-toolbar__append"},[(_=n.append)==null?void 0:_.call(n)])])]}}),r(pe,{defaults:{VTabs:{height:J(v.value)}}},{default:()=>[r(kl,null,{default:()=>[d.value&&r("div",{class:"v-toolbar__extension",style:{height:J(v.value)}},[b])]})]})]})}),{contentHeight:f,extensionHeight:v}}}),Qm=R({scrollTarget:{type:String},scrollThreshold:{type:[String,Number],default:300}},"scroll");function eg(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};const{canScroll:n}=t;let l=0;const a=W(null),o=K(0),i=K(0),s=K(0),u=K(!1),c=K(!1),d=h(()=>Number(e.scrollThreshold)),f=h(()=>Ue((d.value-o.value)/d.value||0)),v=()=>{const m=a.value;!m||n&&!n.value||(l=o.value,o.value="window"in m?m.pageYOffset:m.scrollTop,c.value=o.value<l,s.value=Math.abs(o.value-d.value))};return Z(c,()=>{i.value=i.value||o.value}),Z(u,()=>{i.value=0}),Je(()=>{Z(()=>e.scrollTarget,m=>{var y;const g=m?document.querySelector(m):window;g&&g!==a.value&&((y=a.value)==null||y.removeEventListener("scroll",v),a.value=g,a.value.addEventListener("scroll",v,{passive:!0}))},{immediate:!0})}),nt(()=>{var m;(m=a.value)==null||m.removeEventListener("scroll",v)}),n&&Z(n,v,{immediate:!0}),{scrollThreshold:d,currentScroll:o,currentThreshold:s,isScrollActive:u,scrollRatio:f,isScrollingUp:c,savedScroll:i}}function tn(){const e=K(!1);return Je(()=>{window.requestAnimationFrame(()=>{e.value=!0})}),{ssrBootStyles:h(()=>e.value?void 0:{transition:"none !important"}),isBooted:Ca(e)}}const tg=R({scrollBehavior:String,modelValue:{type:Boolean,default:!0},location:{type:String,default:"top",validator:e=>["top","bottom"].includes(e)},...Zi(),...yn(),...Qm(),height:{type:[Number,String],default:64}},"VAppBar"),ng=L()({name:"VAppBar",props:tg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=W(),a=ue(e,"modelValue"),o=h(()=>{var S;const p=new Set(((S=e.scrollBehavior)==null?void 0:S.split(" "))??[]);return{hide:p.has("hide"),inverted:p.has("inverted"),collapse:p.has("collapse"),elevate:p.has("elevate"),fadeImage:p.has("fade-image")}}),i=h(()=>{const p=o.value;return p.hide||p.inverted||p.collapse||p.elevate||p.fadeImage||!a.value}),{currentScroll:s,scrollThreshold:u,isScrollingUp:c,scrollRatio:d}=eg(e,{canScroll:i}),f=h(()=>e.collapse||o.value.collapse&&(o.value.inverted?d.value>0:d.value===0)),v=h(()=>e.flat||o.value.elevate&&(o.value.inverted?s.value>0:s.value===0)),m=h(()=>o.value.fadeImage?o.value.inverted?1-d.value:d.value:void 0),g=h(()=>{var C,_;if(o.value.hide&&o.value.inverted)return 0;const p=((C=l.value)==null?void 0:C.contentHeight)??0,S=((_=l.value)==null?void 0:_.extensionHeight)??0;return p+S});Et(h(()=>!!e.scrollBehavior),()=>{tt(()=>{o.value.hide?o.value.inverted?a.value=s.value>u.value:a.value=c.value||s.value<u.value:a.value=!0})});const{ssrBootStyles:y}=tn(),{layoutItemStyles:b}=bn({id:e.name,order:h(()=>parseInt(e.order,10)),position:O(e,"location"),layoutSize:g,elementSize:K(void 0),active:a,absolute:O(e,"absolute")});return j(()=>{const[p]=ta.filterProps(e);return r(ta,Y({ref:l,class:["v-app-bar",{"v-app-bar--bottom":e.location==="bottom"},e.class],style:[{...b.value,"--v-toolbar-image-opacity":m.value,height:void 0,...y.value},e.style]},p,{collapse:f.value,flat:v.value}),n)}),{}}});const lg=[null,"default","comfortable","compact"],Fe=R({density:{type:String,default:"default",validator:e=>lg.includes(e)}},"density");function Ye(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{densityClasses:h(()=>`${t}--density-${e.density}`)}}const ag=["elevated","flat","tonal","outlined","text","plain"];function nn(e,t){return r(oe,null,[e&&r("span",{key:"overlay",class:`${t}__overlay`},null),r("span",{key:"underlay",class:`${t}__underlay`},null)])}const mt=R({color:String,variant:{type:String,default:"elevated",validator:e=>ag.includes(e)}},"variant");function ln(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();const n=h(()=>{const{variant:o}=ot(e);return`${t}--variant-${o}`}),{colorClasses:l,colorStyles:a}=Ga(h(()=>{const{variant:o,color:i}=ot(e);return{[["elevated","flat"].includes(o)?"background":"text"]:i}}));return{colorClasses:l,colorStyles:a,variantClasses:n}}const Ji=R({divided:Boolean,...at(),...q(),...Fe(),...Me(),...Ie(),...ce(),...he(),...mt()},"VBtnGroup"),na=L()({name:"VBtnGroup",props:Ji(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{densityClasses:a}=Ye(e),{borderClasses:o}=ft(e),{elevationClasses:i}=He(e),{roundedClasses:s}=Ae(e);Ee({VBtn:{height:"auto",color:O(e,"color"),density:O(e,"density"),flat:!0,variant:O(e,"variant")}}),j(()=>r(e.tag,{class:["v-btn-group",{"v-btn-group--divided":e.divided},l.value,o.value,a.value,i.value,s.value,e.class],style:e.style},n))}}),pn=R({modelValue:{type:null,default:void 0},multiple:Boolean,mandatory:[Boolean,String],max:Number,selectedClass:String,disabled:Boolean},"group"),kn=R({value:null,disabled:Boolean,selectedClass:String},"group-item");function Sn(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;const l=Oe("useGroupItem");if(!l)throw new Error("[Vuetify] useGroupItem composable must be used inside a component setup function");const a=We();$e(Symbol.for(`${t.description}:id`),a);const o=Ve(t,null);if(!o){if(!n)return o;throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${t.description}`)}const i=O(e,"value"),s=h(()=>!!(o.disabled.value||e.disabled));o.register({id:a,value:i,disabled:s},l),nt(()=>{o.unregister(a)});const u=h(()=>o.isSelected(a)),c=h(()=>u.value&&[o.selectedClass.value,e.selectedClass]);return Z(u,d=>{l.emit("group:selected",{value:d})}),{id:a,isSelected:u,toggle:()=>o.select(a,!u.value),select:d=>o.select(a,d),selectedClass:c,value:i,disabled:s,group:o}}function an(e,t){let n=!1;const l=gt([]),a=ue(e,"modelValue",[],v=>v==null?[]:Qi(l,et(v)),v=>{const m=ig(l,v);return e.multiple?m:m[0]}),o=Oe("useGroup");function i(v,m){const g=v,y=Symbol.for(`${t.description}:id`),p=Bn(y,o==null?void 0:o.vnode).indexOf(m);p>-1?l.splice(p,0,g):l.push(g)}function s(v){if(n)return;u();const m=l.findIndex(g=>g.id===v);l.splice(m,1)}function u(){const v=l.find(m=>!m.disabled);v&&e.mandatory==="force"&&!a.value.length&&(a.value=[v.id])}Je(()=>{u()}),nt(()=>{n=!0});function c(v,m){const g=l.find(y=>y.id===v);if(!(m&&(g!=null&&g.disabled)))if(e.multiple){const y=a.value.slice(),b=y.findIndex(S=>S===v),p=~b;if(m=m??!p,p&&e.mandatory&&y.length<=1||!p&&e.max!=null&&y.length+1>e.max)return;b<0&&m?y.push(v):b>=0&&!m&&y.splice(b,1),a.value=y}else{const y=a.value.includes(v);if(e.mandatory&&y)return;a.value=m??!y?[v]:[]}}function d(v){if(e.multiple,a.value.length){const m=a.value[0],g=l.findIndex(p=>p.id===m);let y=(g+v)%l.length,b=l[y];for(;b.disabled&&y!==g;)y=(y+v)%l.length,b=l[y];if(b.disabled)return;a.value=[l[y].id]}else{const m=l.find(g=>!g.disabled);m&&(a.value=[m.id])}}const f={register:i,unregister:s,selected:a,select:c,disabled:O(e,"disabled"),prev:()=>d(l.length-1),next:()=>d(1),isSelected:v=>a.value.includes(v),selectedClass:h(()=>e.selectedClass),items:h(()=>l),getItemIndex:v=>og(l,v)};return $e(t,f),f}function og(e,t){const n=Qi(e,[t]);return n.length?e.findIndex(l=>l.id===n[0]):-1}function Qi(e,t){const n=[];return t.forEach(l=>{const a=e.find(i=>hn(l,i.value)),o=e[l];(a==null?void 0:a.value)!=null?n.push(a.id):o!=null&&n.push(o.id)}),n}function ig(e,t){const n=[];return t.forEach(l=>{const a=e.findIndex(o=>o.id===l);if(~a){const o=e[a];n.push(o.value!=null?o.value:a)}}),n}const Wa=Symbol.for("vuetify:v-btn-toggle"),sg=R({...Ji(),...pn()},"VBtnToggle"),rg=L()({name:"VBtnToggle",props:sg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{isSelected:l,next:a,prev:o,select:i,selected:s}=an(e,Wa);return j(()=>{const[u]=na.filterProps(e);return r(na,Y({class:["v-btn-toggle",e.class]},u,{style:e.style}),{default:()=>{var c;return[(c=n.default)==null?void 0:c.call(n,{isSelected:l,next:a,prev:o,select:i,selected:s})]}})}),{next:a,prev:o,select:i}}});const ug=["x-small","small","default","large","x-large"],At=R({size:{type:[String,Number],default:"default"}},"size");function wn(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return Ba(()=>{let n,l;return rl(ug,e.size)?n=`${t}--size-${e.size}`:e.size&&(l={width:J(e.size),height:J(e.size)}),{sizeClasses:n,sizeStyles:l}})}const cg=R({color:String,start:Boolean,end:Boolean,icon:se,...q(),...At(),...ce({tag:"i"}),...he()},"VIcon"),Se=L()({name:"VIcon",props:cg(),setup(e,t){let{attrs:n,slots:l}=t;const a=W(),{themeClasses:o}=ye(e),{iconData:i}=Jf(h(()=>a.value||e.icon)),{sizeClasses:s}=wn(e),{textColorClasses:u,textColorStyles:c}=Ge(O(e,"color"));return j(()=>{var f,v;const d=(f=l.default)==null?void 0:f.call(l);return d&&(a.value=(v=bi(d).filter(m=>m.type===Or&&m.children&&typeof m.children=="string")[0])==null?void 0:v.children),r(i.value.component,{tag:e.tag,icon:i.value.icon,class:["v-icon","notranslate",o.value,s.value,u.value,{"v-icon--clickable":!!n.onClick,"v-icon--start":e.start,"v-icon--end":e.end},e.class],style:[s.value?void 0:{fontSize:J(e.size),height:J(e.size),width:J(e.size)},c.value,e.style],role:n.onClick?"button":void 0,"aria-hidden":!n.onClick},{default:()=>[d]})}),{}}});function Ya(e,t){const n=W(),l=K(!1);if(Pa){const a=new IntersectionObserver(o=>{e==null||e(o,a),l.value=!!o.find(i=>i.isIntersecting)},t);nt(()=>{a.disconnect()}),Z(n,(o,i)=>{i&&(a.unobserve(i),l.value=!1),o&&a.observe(o)},{flush:"post"})}return{intersectionRef:n,isIntersecting:l}}const dg=R({bgColor:String,color:String,indeterminate:[Boolean,String],modelValue:{type:[Number,String],default:0},rotate:{type:[Number,String],default:0},width:{type:[Number,String],default:4},...q(),...At(),...ce({tag:"div"}),...he()},"VProgressCircular"),Ka=L()({name:"VProgressCircular",props:dg(),setup(e,t){let{slots:n}=t;const l=20,a=2*Math.PI*l,o=W(),{themeClasses:i}=ye(e),{sizeClasses:s,sizeStyles:u}=wn(e),{textColorClasses:c,textColorStyles:d}=Ge(O(e,"color")),{textColorClasses:f,textColorStyles:v}=Ge(O(e,"bgColor")),{intersectionRef:m,isIntersecting:g}=Ya(),{resizeRef:y,contentRect:b}=wt(),p=h(()=>Math.max(0,Math.min(100,parseFloat(e.modelValue)))),S=h(()=>Number(e.width)),C=h(()=>u.value?Number(e.size):b.value?b.value.width:Math.max(S.value,32)),_=h(()=>l/(1-S.value/C.value)*2),V=h(()=>S.value/C.value*_.value),x=h(()=>J((100-p.value)/100*a));return tt(()=>{m.value=o.value,y.value=o.value}),j(()=>r(e.tag,{ref:o,class:["v-progress-circular",{"v-progress-circular--indeterminate":!!e.indeterminate,"v-progress-circular--visible":g.value,"v-progress-circular--disable-shrink":e.indeterminate==="disable-shrink"},i.value,s.value,c.value,e.class],style:[u.value,d.value,e.style],role:"progressbar","aria-valuemin":"0","aria-valuemax":"100","aria-valuenow":e.indeterminate?void 0:p.value},{default:()=>[r("svg",{style:{transform:`rotate(calc(-90deg + ${Number(e.rotate)}deg))`},xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${_.value} ${_.value}`},[r("circle",{class:["v-progress-circular__underlay",f.value],style:v.value,fill:"transparent",cx:"50%",cy:"50%",r:l,"stroke-width":V.value,"stroke-dasharray":a,"stroke-dashoffset":0},null),r("circle",{class:"v-progress-circular__overlay",fill:"transparent",cx:"50%",cy:"50%",r:l,"stroke-width":V.value,"stroke-dasharray":a,"stroke-dashoffset":x.value},null)]),n.default&&r("div",{class:"v-progress-circular__content"},[n.default({value:p.value})])]})),{}}});const Wo={center:"center",top:"bottom",bottom:"top",left:"right",right:"left"},Mt=R({location:String},"location");function Ft(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,n=arguments.length>2?arguments[2]:void 0;const{isRtl:l}=De();return{locationStyles:h(()=>{if(!e.location)return{};const{side:o,align:i}=Gl(e.location.split(" ").length>1?e.location:`${e.location} center`,l.value);function s(c){return n?n(c):0}const u={};return o!=="center"&&(t?u[Wo[o]]=`calc(100% - ${s(o)}px)`:u[o]=0),i!=="center"?t?u[Wo[i]]=`calc(100% - ${s(i)}px)`:u[i]=0:(o==="center"?u.top=u.left="50%":u[{top:"left",bottom:"left",left:"top",right:"top"}[o]]="50%",u.transform={top:"translateX(-50%)",bottom:"translateX(-50%)",left:"translateY(-50%)",right:"translateY(-50%)",center:"translate(-50%, -50%)"}[o]),u})}}const vg=R({absolute:Boolean,active:{type:Boolean,default:!0},bgColor:String,bgOpacity:[Number,String],bufferValue:{type:[Number,String],default:0},clickable:Boolean,color:String,height:{type:[Number,String],default:4},indeterminate:Boolean,max:{type:[Number,String],default:100},modelValue:{type:[Number,String],default:0},reverse:Boolean,stream:Boolean,striped:Boolean,roundedBar:Boolean,...q(),...Mt({location:"top"}),...Ie(),...ce(),...he()},"VProgressLinear"),qa=L()({name:"VProgressLinear",props:vg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{isRtl:a,rtlClasses:o}=De(),{themeClasses:i}=ye(e),{locationStyles:s}=Ft(e),{textColorClasses:u,textColorStyles:c}=Ge(e,"color"),{backgroundColorClasses:d,backgroundColorStyles:f}=Be(h(()=>e.bgColor||e.color)),{backgroundColorClasses:v,backgroundColorStyles:m}=Be(e,"color"),{roundedClasses:g}=Ae(e),{intersectionRef:y,isIntersecting:b}=Ya(),p=h(()=>parseInt(e.max,10)),S=h(()=>parseInt(e.height,10)),C=h(()=>parseFloat(e.bufferValue)/p.value*100),_=h(()=>parseFloat(l.value)/p.value*100),V=h(()=>a.value!==e.reverse),x=h(()=>e.indeterminate?"fade-transition":"slide-x-transition"),T=h(()=>e.bgOpacity==null?e.bgOpacity:parseFloat(e.bgOpacity));function w(k){if(!y.value)return;const{left:I,right:A,width:B}=y.value.getBoundingClientRect(),E=V.value?B-k.clientX+(A-B):k.clientX-I;l.value=Math.round(E/B*p.value)}return j(()=>r(e.tag,{ref:y,class:["v-progress-linear",{"v-progress-linear--absolute":e.absolute,"v-progress-linear--active":e.active&&b.value,"v-progress-linear--reverse":V.value,"v-progress-linear--rounded":e.rounded,"v-progress-linear--rounded-bar":e.roundedBar,"v-progress-linear--striped":e.striped},g.value,i.value,o.value,e.class],style:[{bottom:e.location==="bottom"?0:void 0,top:e.location==="top"?0:void 0,height:e.active?J(S.value):0,"--v-progress-linear-height":J(S.value),...s.value},e.style],role:"progressbar","aria-hidden":e.active?"false":"true","aria-valuemin":"0","aria-valuemax":e.max,"aria-valuenow":e.indeterminate?void 0:_.value,onClick:e.clickable&&w},{default:()=>[e.stream&&r("div",{key:"stream",class:["v-progress-linear__stream",u.value],style:{...c.value,[V.value?"left":"right"]:J(-S.value),borderTop:`${J(S.value/2)} dotted`,opacity:T.value,top:`calc(50% - ${J(S.value/4)})`,width:J(100-C.value,"%"),"--v-progress-linear-stream-to":J(S.value*(V.value?1:-1))}},null),r("div",{class:["v-progress-linear__background",d.value],style:[f.value,{opacity:T.value,width:J(e.stream?C.value:100,"%")}]},null),r(Rt,{name:x.value},{default:()=>[e.indeterminate?r("div",{class:"v-progress-linear__indeterminate"},[["long","short"].map(k=>r("div",{key:k,class:["v-progress-linear__indeterminate",k,v.value],style:m.value},null))]):r("div",{class:["v-progress-linear__determinate",v.value],style:[m.value,{width:J(_.value,"%")}]},null)]}),n.default&&r("div",{class:"v-progress-linear__content"},[n.default({value:_.value,buffer:C.value})])]})),{}}}),Xa=R({loading:[Boolean,String]},"loader");function Sl(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{loaderClasses:h(()=>({[`${t}--loading`]:e.loading}))}}function Za(e,t){var l;let{slots:n}=t;return r("div",{class:`${e.name}__loader`},[((l=n.default)==null?void 0:l.call(n,{color:e.color,isActive:e.active}))||r(qa,{active:e.active,color:e.color,height:"2",indeterminate:!0},null)])}const fg=["static","relative","fixed","absolute","sticky"],Cn=R({position:{type:String,validator:e=>fg.includes(e)}},"position");function xn(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{positionClasses:h(()=>e.position?`${t}--${e.position}`:void 0)}}function es(){var e,t;return(t=(e=Oe("useRouter"))==null?void 0:e.proxy)==null?void 0:t.$router}function Un(e,t){const n=Dr("RouterLink"),l=h(()=>!!(e.href||e.to)),a=h(()=>(l==null?void 0:l.value)||bo(t,"click")||bo(e,"click"));if(typeof n=="string")return{isLink:l,isClickable:a,href:O(e,"href")};const o=e.to?n.useLink(e):void 0;return{isLink:l,isClickable:a,route:o==null?void 0:o.route,navigate:o==null?void 0:o.navigate,isActive:o&&h(()=>{var i,s;return e.exact?(i=o.isExactActive)==null?void 0:i.value:(s=o.isActive)==null?void 0:s.value}),href:h(()=>e.to?o==null?void 0:o.route.value.href:e.href)}}const Gn=R({href:String,replace:Boolean,to:[String,Object],exact:Boolean},"router");let Fl=!1;function mg(e,t){let n=!1,l,a;Ce&&(xe(()=>{window.addEventListener("popstate",o),l=e==null?void 0:e.beforeEach((i,s,u)=>{Fl?n?t(u):u():setTimeout(()=>n?t(u):u()),Fl=!0}),a=e==null?void 0:e.afterEach(()=>{Fl=!1})}),Xe(()=>{window.removeEventListener("popstate",o),l==null||l(),a==null||a()}));function o(i){var s;(s=i.state)!=null&&s.replaced||(n=!0,setTimeout(()=>n=!1))}}function gg(e,t){Z(()=>{var n;return(n=e.isActive)==null?void 0:n.value},n=>{e.isLink.value&&n&&t&&xe(()=>{t(!0)})},{immediate:!0})}const la=Symbol("rippleStop"),hg=80;function Yo(e,t){e.style.transform=t,e.style.webkitTransform=t}function aa(e){return e.constructor.name==="TouchEvent"}function ts(e){return e.constructor.name==="KeyboardEvent"}const yg=function(e,t){var f;let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},l=0,a=0;if(!ts(e)){const v=t.getBoundingClientRect(),m=aa(e)?e.touches[e.touches.length-1]:e;l=m.clientX-v.left,a=m.clientY-v.top}let o=0,i=.3;(f=t._ripple)!=null&&f.circle?(i=.15,o=t.clientWidth/2,o=n.center?o:o+Math.sqrt((l-o)**2+(a-o)**2)/4):o=Math.sqrt(t.clientWidth**2+t.clientHeight**2)/2;const s=`${(t.clientWidth-o*2)/2}px`,u=`${(t.clientHeight-o*2)/2}px`,c=n.center?s:`${l-o}px`,d=n.center?u:`${a-o}px`;return{radius:o,scale:i,x:c,y:d,centerX:s,centerY:u}},fl={show(e,t){var m;let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};if(!((m=t==null?void 0:t._ripple)!=null&&m.enabled))return;const l=document.createElement("span"),a=document.createElement("span");l.appendChild(a),l.className="v-ripple__container",n.class&&(l.className+=` ${n.class}`);const{radius:o,scale:i,x:s,y:u,centerX:c,centerY:d}=yg(e,t,n),f=`${o*2}px`;a.className="v-ripple__animation",a.style.width=f,a.style.height=f,t.appendChild(l);const v=window.getComputedStyle(t);v&&v.position==="static"&&(t.style.position="relative",t.dataset.previousPosition="static"),a.classList.add("v-ripple__animation--enter"),a.classList.add("v-ripple__animation--visible"),Yo(a,`translate(${s}, ${u}) scale3d(${i},${i},${i})`),a.dataset.activated=String(performance.now()),setTimeout(()=>{a.classList.remove("v-ripple__animation--enter"),a.classList.add("v-ripple__animation--in"),Yo(a,`translate(${c}, ${d}) scale3d(1,1,1)`)},0)},hide(e){var o;if(!((o=e==null?void 0:e._ripple)!=null&&o.enabled))return;const t=e.getElementsByClassName("v-ripple__animation");if(t.length===0)return;const n=t[t.length-1];if(n.dataset.isHiding)return;n.dataset.isHiding="true";const l=performance.now()-Number(n.dataset.activated),a=Math.max(250-l,0);setTimeout(()=>{n.classList.remove("v-ripple__animation--in"),n.classList.add("v-ripple__animation--out"),setTimeout(()=>{var s;e.getElementsByClassName("v-ripple__animation").length===1&&e.dataset.previousPosition&&(e.style.position=e.dataset.previousPosition,delete e.dataset.previousPosition),((s=n.parentNode)==null?void 0:s.parentNode)===e&&e.removeChild(n.parentNode)},300)},a)}};function ns(e){return typeof e>"u"||!!e}function Fn(e){const t={},n=e.currentTarget;if(!(!(n!=null&&n._ripple)||n._ripple.touched||e[la])){if(e[la]=!0,aa(e))n._ripple.touched=!0,n._ripple.isTouch=!0;else if(n._ripple.isTouch)return;if(t.center=n._ripple.centered||ts(e),n._ripple.class&&(t.class=n._ripple.class),aa(e)){if(n._ripple.showTimerCommit)return;n._ripple.showTimerCommit=()=>{fl.show(e,n,t)},n._ripple.showTimer=window.setTimeout(()=>{var l;(l=n==null?void 0:n._ripple)!=null&&l.showTimerCommit&&(n._ripple.showTimerCommit(),n._ripple.showTimerCommit=null)},hg)}else fl.show(e,n,t)}}function Ko(e){e[la]=!0}function Qe(e){const t=e.currentTarget;if(t!=null&&t._ripple){if(window.clearTimeout(t._ripple.showTimer),e.type==="touchend"&&t._ripple.showTimerCommit){t._ripple.showTimerCommit(),t._ripple.showTimerCommit=null,t._ripple.showTimer=window.setTimeout(()=>{Qe(e)});return}window.setTimeout(()=>{t._ripple&&(t._ripple.touched=!1)}),fl.hide(t)}}function ls(e){const t=e.currentTarget;t!=null&&t._ripple&&(t._ripple.showTimerCommit&&(t._ripple.showTimerCommit=null),window.clearTimeout(t._ripple.showTimer))}let On=!1;function as(e){!On&&(e.keyCode===mo.enter||e.keyCode===mo.space)&&(On=!0,Fn(e))}function os(e){On=!1,Qe(e)}function is(e){On&&(On=!1,Qe(e))}function ss(e,t,n){const{value:l,modifiers:a}=t,o=ns(l);if(o||fl.hide(e),e._ripple=e._ripple??{},e._ripple.enabled=o,e._ripple.centered=a.center,e._ripple.circle=a.circle,sl(l)&&l.class&&(e._ripple.class=l.class),o&&!n){if(a.stop){e.addEventListener("touchstart",Ko,{passive:!0}),e.addEventListener("mousedown",Ko);return}e.addEventListener("touchstart",Fn,{passive:!0}),e.addEventListener("touchend",Qe,{passive:!0}),e.addEventListener("touchmove",ls,{passive:!0}),e.addEventListener("touchcancel",Qe),e.addEventListener("mousedown",Fn),e.addEventListener("mouseup",Qe),e.addEventListener("mouseleave",Qe),e.addEventListener("keydown",as),e.addEventListener("keyup",os),e.addEventListener("blur",is),e.addEventListener("dragstart",Qe,{passive:!0})}else!o&&n&&rs(e)}function rs(e){e.removeEventListener("mousedown",Fn),e.removeEventListener("touchstart",Fn),e.removeEventListener("touchend",Qe),e.removeEventListener("touchmove",ls),e.removeEventListener("touchcancel",Qe),e.removeEventListener("mouseup",Qe),e.removeEventListener("mouseleave",Qe),e.removeEventListener("keydown",as),e.removeEventListener("keyup",os),e.removeEventListener("dragstart",Qe),e.removeEventListener("blur",is)}function bg(e,t){ss(e,t,!1)}function pg(e){delete e._ripple,rs(e)}function kg(e,t){if(t.value===t.oldValue)return;const n=ns(t.oldValue);ss(e,t,n)}const Ot={mounted:bg,unmounted:pg,updated:kg},Ja=R({active:{type:Boolean,default:void 0},symbol:{type:null,default:Wa},flat:Boolean,icon:[Boolean,String,Function,Object],prependIcon:se,appendIcon:se,block:Boolean,stacked:Boolean,ripple:{type:[Boolean,Object],default:!0},text:String,...at(),...q(),...Fe(),...dt(),...Me(),...kn(),...Xa(),...Mt(),...Cn(),...Ie(),...Gn(),...At(),...ce({tag:"button"}),...he(),...mt({variant:"elevated"})},"VBtn"),Ke=L()({name:"VBtn",directives:{Ripple:Ot},props:Ja(),emits:{"group:selected":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const{themeClasses:a}=ye(e),{borderClasses:o}=ft(e),{colorClasses:i,colorStyles:s,variantClasses:u}=ln(e),{densityClasses:c}=Ye(e),{dimensionStyles:d}=vt(e),{elevationClasses:f}=He(e),{loaderClasses:v}=Sl(e),{locationStyles:m}=Ft(e),{positionClasses:g}=xn(e),{roundedClasses:y}=Ae(e),{sizeClasses:b,sizeStyles:p}=wn(e),S=Sn(e,e.symbol,!1),C=Un(e,n),_=h(()=>{var k;return e.active!==void 0?e.active:C.isLink.value?(k=C.isActive)==null?void 0:k.value:S==null?void 0:S.isSelected.value}),V=h(()=>(S==null?void 0:S.disabled.value)||e.disabled),x=h(()=>e.variant==="elevated"&&!(e.disabled||e.flat||e.border)),T=h(()=>{if(e.value!==void 0)return Object(e.value)===e.value?JSON.stringify(e.value,null,0):e.value});function w(k){var I;V.value||C.isLink.value&&(k.metaKey||k.ctrlKey||k.shiftKey||k.button!==0||n.target==="_blank")||((I=C.navigate)==null||I.call(C,k),S==null||S.toggle())}return gg(C,S==null?void 0:S.select),j(()=>{var F,X;const k=C.isLink.value?"a":e.tag,I=!!(e.prependIcon||l.prepend),A=!!(e.appendIcon||l.append),B=!!(e.icon&&e.icon!==!0),E=(S==null?void 0:S.isSelected.value)&&(!C.isLink.value||((F=C.isActive)==null?void 0:F.value))||!S||((X=C.isActive)==null?void 0:X.value);return ne(r(k,{type:k==="a"?void 0:"button",class:["v-btn",S==null?void 0:S.selectedClass.value,{"v-btn--active":_.value,"v-btn--block":e.block,"v-btn--disabled":V.value,"v-btn--elevated":x.value,"v-btn--flat":e.flat,"v-btn--icon":!!e.icon,"v-btn--loading":e.loading,"v-btn--stacked":e.stacked},a.value,o.value,E?i.value:void 0,c.value,f.value,v.value,g.value,y.value,b.value,u.value,e.class],style:[E?s.value:void 0,d.value,m.value,p.value,e.style],disabled:V.value||void 0,href:C.href.value,onClick:w,value:T.value},{default:()=>{var $;return[nn(!0,"v-btn"),!e.icon&&I&&r("span",{key:"prepend",class:"v-btn__prepend"},[l.prepend?r(pe,{key:"prepend-defaults",disabled:!e.prependIcon,defaults:{VIcon:{icon:e.prependIcon}}},l.prepend):r(Se,{key:"prepend-icon",icon:e.prependIcon},null)]),r("span",{class:"v-btn__content","data-no-activator":""},[!l.default&&B?r(Se,{key:"content-icon",icon:e.icon},null):r(pe,{key:"content-defaults",disabled:!B,defaults:{VIcon:{icon:e.icon}}},{default:()=>{var N;return[((N=l.default)==null?void 0:N.call(l))??e.text]}})]),!e.icon&&A&&r("span",{key:"append",class:"v-btn__append"},[l.append?r(pe,{key:"append-defaults",disabled:!e.appendIcon,defaults:{VIcon:{icon:e.appendIcon}}},l.append):r(Se,{key:"append-icon",icon:e.appendIcon},null)]),!!e.loading&&r("span",{key:"loader",class:"v-btn__loader"},[(($=l.loader)==null?void 0:$.call(l))??r(Ka,{color:typeof e.loading=="boolean"?void 0:e.loading,indeterminate:!0,size:"23",width:"2"},null)])]}}),[[Ze("ripple"),!V.value&&e.ripple,null]])}),{}}}),Sg=R({...Ja({icon:"$menu",variant:"text"})},"VAppBarNavIcon"),wg=L()({name:"VAppBarNavIcon",props:Sg(),setup(e,t){let{slots:n}=t;return j(()=>r(Ke,Y(e,{class:["v-app-bar-nav-icon"]}),n)),{}}}),Cg=L()({name:"VAppBarTitle",props:Gi(),setup(e,t){let{slots:n}=t;return j(()=>r(za,Y(e,{class:"v-app-bar-title"}),n)),{}}});const us=bt("v-alert-title"),xg=["success","info","warning","error"],Vg=R({border:{type:[Boolean,String],validator:e=>typeof e=="boolean"||["top","end","bottom","start"].includes(e)},borderColor:String,closable:Boolean,closeIcon:{type:se,default:"$close"},closeLabel:{type:String,default:"$vuetify.close"},icon:{type:[Boolean,String,Function,Object],default:null},modelValue:{type:Boolean,default:!0},prominent:Boolean,title:String,text:String,type:{type:String,validator:e=>xg.includes(e)},...q(),...Fe(),...dt(),...Me(),...Mt(),...Cn(),...Ie(),...ce(),...he(),...mt({variant:"flat"})},"VAlert"),_g=L()({name:"VAlert",props:Vg(),emits:{"click:close":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{emit:n,slots:l}=t;const a=ue(e,"modelValue"),o=h(()=>{if(e.icon!==!1)return e.type?e.icon??`$${e.type}`:e.icon}),i=h(()=>({color:e.color??e.type,variant:e.variant})),{themeClasses:s}=ye(e),{colorClasses:u,colorStyles:c,variantClasses:d}=ln(i),{densityClasses:f}=Ye(e),{dimensionStyles:v}=vt(e),{elevationClasses:m}=He(e),{locationStyles:g}=Ft(e),{positionClasses:y}=xn(e),{roundedClasses:b}=Ae(e),{textColorClasses:p,textColorStyles:S}=Ge(O(e,"borderColor")),{t:C}=ct(),_=h(()=>({"aria-label":C(e.closeLabel),onClick(V){a.value=!1,n("click:close",V)}}));return()=>{const V=!!(l.prepend||o.value),x=!!(l.title||e.title),T=!!(l.close||e.closable);return a.value&&r(e.tag,{class:["v-alert",e.border&&{"v-alert--border":!!e.border,[`v-alert--border-${e.border===!0?"start":e.border}`]:!0},{"v-alert--prominent":e.prominent},s.value,u.value,f.value,m.value,y.value,b.value,d.value,e.class],style:[c.value,v.value,g.value,e.style],role:"alert"},{default:()=>{var w,k;return[nn(!1,"v-alert"),e.border&&r("div",{key:"border",class:["v-alert__border",p.value],style:S.value},null),V&&r("div",{key:"prepend",class:"v-alert__prepend"},[l.prepend?r(pe,{key:"prepend-defaults",disabled:!o.value,defaults:{VIcon:{density:e.density,icon:o.value,size:e.prominent?44:28}}},l.prepend):r(Se,{key:"prepend-icon",density:e.density,icon:o.value,size:e.prominent?44:28},null)]),r("div",{class:"v-alert__content"},[x&&r(us,{key:"title"},{default:()=>{var I;return[((I=l.title)==null?void 0:I.call(l))??e.title]}}),((w=l.text)==null?void 0:w.call(l))??e.text,(k=l.default)==null?void 0:k.call(l)]),l.append&&r("div",{key:"append",class:"v-alert__append"},[l.append()]),T&&r("div",{key:"close",class:"v-alert__close"},[l.close?r(pe,{key:"close-defaults",defaults:{VBtn:{icon:e.closeIcon,size:"x-small",variant:"text"}}},{default:()=>{var I;return[(I=l.close)==null?void 0:I.call(l,{props:_.value})]}}):r(Ke,Y({key:"close-btn",icon:e.closeIcon,size:"x-small",variant:"text"},_.value),null)])]}})}}});const Ig=R({text:String,clickable:Boolean,...q(),...he()},"VLabel"),Vn=L()({name:"VLabel",props:Ig(),setup(e,t){let{slots:n}=t;return j(()=>{var l;return r("label",{class:["v-label",{"v-label--clickable":e.clickable},e.class],style:e.style},[e.text,(l=n.default)==null?void 0:l.call(n)])}),{}}});const cs=Symbol.for("vuetify:selection-control-group"),Qa=R({color:String,disabled:{type:Boolean,default:null},defaultsTarget:String,error:Boolean,id:String,inline:Boolean,falseIcon:se,trueIcon:se,ripple:{type:Boolean,default:!0},multiple:{type:Boolean,default:null},name:String,readonly:Boolean,modelValue:null,type:String,valueComparator:{type:Function,default:hn},...q(),...Fe(),...he()},"SelectionControlGroup"),Tg=R({...Qa({defaultsTarget:"VSelectionControl"})},"VSelectionControlGroup"),ds=L()({name:"VSelectionControlGroup",props:Tg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),a=We(),o=h(()=>e.id||`v-selection-control-group-${a}`),i=h(()=>e.name||o.value),s=new Set;return $e(cs,{modelValue:l,forceUpdate:()=>{s.forEach(u=>u())},onForceUpdate:u=>{s.add(u),Xe(()=>{s.delete(u)})}}),Ee({[e.defaultsTarget]:{color:O(e,"color"),disabled:O(e,"disabled"),density:O(e,"density"),error:O(e,"error"),inline:O(e,"inline"),modelValue:l,multiple:h(()=>!!e.multiple||e.multiple==null&&Array.isArray(l.value)),name:i,falseIcon:O(e,"falseIcon"),trueIcon:O(e,"trueIcon"),readonly:O(e,"readonly"),ripple:O(e,"ripple"),type:O(e,"type"),valueComparator:O(e,"valueComparator")}}),j(()=>{var u;return r("div",{class:["v-selection-control-group",{"v-selection-control-group--inline":e.inline},e.class],style:e.style,role:e.type==="radio"?"radiogroup":void 0},[(u=n.default)==null?void 0:u.call(n)])}),{}}}),wl=R({label:String,trueValue:null,falseValue:null,value:null,...q(),...Qa()},"VSelectionControl");function Pg(e){const t=Ve(cs,void 0),{densityClasses:n}=Ye(e),l=ue(e,"modelValue"),a=h(()=>e.trueValue!==void 0?e.trueValue:e.value!==void 0?e.value:!0),o=h(()=>e.falseValue!==void 0?e.falseValue:!1),i=h(()=>!!e.multiple||e.multiple==null&&Array.isArray(l.value)),s=h({get(){const m=t?t.modelValue.value:l.value;return i.value?m.some(g=>e.valueComparator(g,a.value)):e.valueComparator(m,a.value)},set(m){if(e.readonly)return;const g=m?a.value:o.value;let y=g;i.value&&(y=m?[...et(l.value),g]:et(l.value).filter(b=>!e.valueComparator(b,a.value))),t?t.modelValue.value=y:l.value=y}}),{textColorClasses:u,textColorStyles:c}=Ge(h(()=>s.value&&!e.error&&!e.disabled?e.color:void 0)),{backgroundColorClasses:d,backgroundColorStyles:f}=Be(h(()=>s.value&&!e.error&&!e.disabled?e.color:void 0)),v=h(()=>s.value?e.trueIcon:e.falseIcon);return{group:t,densityClasses:n,trueValue:a,falseValue:o,model:s,textColorClasses:u,textColorStyles:c,backgroundColorClasses:d,backgroundColorStyles:f,icon:v}}const Xt=L()({name:"VSelectionControl",directives:{Ripple:Ot},inheritAttrs:!1,props:wl(),emits:{"update:modelValue":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const{group:a,densityClasses:o,icon:i,model:s,textColorClasses:u,textColorStyles:c,backgroundColorClasses:d,backgroundColorStyles:f,trueValue:v}=Pg(e),m=We(),g=h(()=>e.id||`input-${m}`),y=K(!1),b=K(!1),p=W();a==null||a.onForceUpdate(()=>{p.value&&(p.value.checked=s.value)});function S(V){y.value=!0,dn(V.target,":focus-visible")!==!1&&(b.value=!0)}function C(){y.value=!1,b.value=!1}function _(V){e.readonly&&a&&xe(()=>a.forceUpdate()),s.value=V.target.checked}return j(()=>{var k,I;const V=l.label?l.label({label:e.label,props:{for:g.value}}):e.label,[x,T]=Qt(n),w=r("input",Y({ref:p,checked:s.value,disabled:!!(e.readonly||e.disabled),id:g.value,onBlur:C,onFocus:S,onInput:_,"aria-disabled":!!(e.readonly||e.disabled),type:e.type,value:v.value,name:e.name,"aria-checked":e.type==="checkbox"?s.value:void 0},T),null);return r("div",Y({class:["v-selection-control",{"v-selection-control--dirty":s.value,"v-selection-control--disabled":e.disabled,"v-selection-control--error":e.error,"v-selection-control--focused":y.value,"v-selection-control--focus-visible":b.value,"v-selection-control--inline":e.inline},o.value,e.class]},x,{style:e.style}),[r("div",{class:["v-selection-control__wrapper",u.value],style:c.value},[(k=l.default)==null?void 0:k.call(l,{backgroundColorClasses:d,backgroundColorStyles:f}),ne(r("div",{class:["v-selection-control__input"]},[((I=l.input)==null?void 0:I.call(l,{model:s,textColorClasses:u,textColorStyles:c,backgroundColorClasses:d,backgroundColorStyles:f,inputNode:w,icon:i.value,props:{onFocus:S,onBlur:C,id:g.value}}))??r(oe,null,[i.value&&r(Se,{key:"icon",icon:i.value},null),w])]),[[Ze("ripple"),e.ripple&&[!e.disabled&&!e.readonly,null,["center","circle"]]]])]),V&&r(Vn,{for:g.value,clickable:!0,onClick:A=>A.stopPropagation()},{default:()=>[V]})])}),{isFocused:y,input:p}}}),vs=R({indeterminate:Boolean,indeterminateIcon:{type:se,default:"$checkboxIndeterminate"},...wl({falseIcon:"$checkboxOff",trueIcon:"$checkboxOn"})},"VCheckboxBtn"),mn=L()({name:"VCheckboxBtn",props:vs(),emits:{"update:modelValue":e=>!0,"update:indeterminate":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"indeterminate"),a=ue(e,"modelValue");function o(u){l.value&&(l.value=!1)}const i=h(()=>l.value?e.indeterminateIcon:e.falseIcon),s=h(()=>l.value?e.indeterminateIcon:e.trueIcon);return j(()=>{const u=rt(Xt.filterProps(e)[0],["modelValue"]);return r(Xt,Y(u,{modelValue:a.value,"onUpdate:modelValue":[c=>a.value=c,o],class:["v-checkbox-btn",e.class],style:e.style,type:"checkbox",falseIcon:i.value,trueIcon:s.value,"aria-checked":l.value?"mixed":void 0}),n)}),{}}});function fs(e){const{t}=ct();function n(l){let{name:a}=l;const o={prepend:"prependAction",prependInner:"prependAction",append:"appendAction",appendInner:"appendAction",clear:"clear"}[a],i=e[`onClick:${a}`],s=i&&o?t(`$vuetify.input.${o}`,e.label??""):void 0;return r(Se,{icon:e[`${a}Icon`],"aria-label":s,onClick:i},null)}return{InputIcon:n}}const Ag=R({active:Boolean,color:String,messages:{type:[Array,String],default:()=>[]},...q(),...Pt({transition:{component:ja,leaveAbsolute:!0,group:!0}})},"VMessages"),ms=L()({name:"VMessages",props:Ag(),setup(e,t){let{slots:n}=t;const l=h(()=>et(e.messages)),{textColorClasses:a,textColorStyles:o}=Ge(h(()=>e.color));return j(()=>r(ht,{transition:e.transition,tag:"div",class:["v-messages",a.value,e.class],style:[o.value,e.style],role:"alert","aria-live":"polite"},{default:()=>[e.active&&l.value.map((i,s)=>r("div",{class:"v-messages__message",key:`${s}-${l.value}`},[n.message?n.message({message:i}):i]))]})),{}}}),Cl=R({focused:Boolean,"onUpdate:focused":St()},"focus");function Dt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();const n=ue(e,"focused"),l=h(()=>({[`${t}--focused`]:n.value}));function a(){n.value=!0}function o(){n.value=!1}return{focusClasses:l,isFocused:n,focus:a,blur:o}}const gs=Symbol.for("vuetify:form"),Bg=R({disabled:Boolean,fastFail:Boolean,readonly:Boolean,modelValue:{type:Boolean,default:null},validateOn:{type:String,default:"input"}},"form");function Rg(e){const t=ue(e,"modelValue"),n=h(()=>e.disabled),l=h(()=>e.readonly),a=K(!1),o=W([]),i=W([]);async function s(){const d=[];let f=!0;i.value=[],a.value=!0;for(const v of o.value){const m=await v.validate();if(m.length>0&&(f=!1,d.push({id:v.id,errorMessages:m})),!f&&e.fastFail)break}return i.value=d,a.value=!1,{valid:f,errors:i.value}}function u(){o.value.forEach(d=>d.reset())}function c(){o.value.forEach(d=>d.resetValidation())}return Z(o,()=>{let d=0,f=0;const v=[];for(const m of o.value)m.isValid===!1?(f++,v.push({id:m.id,errorMessages:m.errorMessages})):m.isValid===!0&&d++;i.value=v,t.value=f>0?!1:d===o.value.length?!0:null},{deep:!0}),$e(gs,{register:d=>{let{id:f,validate:v,reset:m,resetValidation:g}=d;o.value.some(y=>y.id===f),o.value.push({id:f,validate:v,reset:m,resetValidation:g,isValid:null,errorMessages:[]})},unregister:d=>{o.value=o.value.filter(f=>f.id!==d)},update:(d,f,v)=>{const m=o.value.find(g=>g.id===d);m&&(m.isValid=f,m.errorMessages=v)},isDisabled:n,isReadonly:l,isValidating:a,isValid:t,items:o,validateOn:O(e,"validateOn")}),{errors:i,isDisabled:n,isReadonly:l,isValidating:a,isValid:t,items:o,validate:s,reset:u,resetValidation:c}}function xl(){return Ve(gs,null)}const hs=R({disabled:{type:Boolean,default:null},error:Boolean,errorMessages:{type:[Array,String],default:()=>[]},maxErrors:{type:[Number,String],default:1},name:String,label:String,readonly:{type:Boolean,default:null},rules:{type:Array,default:()=>[]},modelValue:null,validateOn:String,validationValue:null,...Cl()},"validation");function ys(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt(),n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:We();const l=ue(e,"modelValue"),a=h(()=>e.validationValue===void 0?l.value:e.validationValue),o=xl(),i=W([]),s=K(!0),u=h(()=>!!(et(l.value===""?null:l.value).length||et(a.value===""?null:a.value).length)),c=h(()=>!!(e.disabled??(o==null?void 0:o.isDisabled.value))),d=h(()=>!!(e.readonly??(o==null?void 0:o.isReadonly.value))),f=h(()=>e.errorMessages.length?et(e.errorMessages).slice(0,Math.max(0,+e.maxErrors)):i.value),v=h(()=>{let _=(e.validateOn??(o==null?void 0:o.validateOn.value))||"input";_==="lazy"&&(_="input lazy");const V=new Set((_==null?void 0:_.split(" "))??[]);return{blur:V.has("blur")||V.has("input"),input:V.has("input"),submit:V.has("submit"),lazy:V.has("lazy")}}),m=h(()=>e.error||e.errorMessages.length?!1:e.rules.length?s.value?i.value.length||v.value.lazy?null:!0:!i.value.length:!0),g=K(!1),y=h(()=>({[`${t}--error`]:m.value===!1,[`${t}--dirty`]:u.value,[`${t}--disabled`]:c.value,[`${t}--readonly`]:d.value})),b=h(()=>e.name??ot(n));xa(()=>{o==null||o.register({id:b.value,validate:C,reset:p,resetValidation:S})}),nt(()=>{o==null||o.unregister(b.value)}),Je(async()=>{v.value.lazy||await C(!0),o==null||o.update(b.value,m.value,f.value)}),Et(()=>v.value.input,()=>{Z(a,()=>{if(a.value!=null)C();else if(e.focused){const _=Z(()=>e.focused,V=>{V||C(),_()})}})}),Et(()=>v.value.blur,()=>{Z(()=>e.focused,_=>{_||C()})}),Z(m,()=>{o==null||o.update(b.value,m.value,f.value)});function p(){l.value=null,xe(S)}function S(){s.value=!0,v.value.lazy?i.value=[]:C(!0)}async function C(){let _=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;const V=[];g.value=!0;for(const x of e.rules){if(V.length>=+(e.maxErrors??1))break;const w=await(typeof x=="function"?x:()=>x)(a.value);if(w!==!0){if(w!==!1&&typeof w!="string"){console.warn(`${w} is not a valid value. Rule functions must return boolean true or a string.`);continue}V.push(w||"")}}return i.value=V,g.value=!1,s.value=_,i.value}return{errorMessages:f,isDirty:u,isDisabled:c,isReadonly:d,isPristine:s,isValid:m,isValidating:g,reset:p,resetValidation:S,validate:C,validationClasses:y}}const Bt=R({id:String,appendIcon:se,centerAffix:{type:Boolean,default:!0},prependIcon:se,hideDetails:[Boolean,String],hint:String,persistentHint:Boolean,messages:{type:[Array,String],default:()=>[]},direction:{type:String,default:"horizontal",validator:e=>["horizontal","vertical"].includes(e)},"onClick:prepend":St(),"onClick:append":St(),...q(),...Fe(),...hs()},"VInput"),Ne=L()({name:"VInput",props:{...Bt()},emits:{"update:modelValue":e=>!0},setup(e,t){let{attrs:n,slots:l,emit:a}=t;const{densityClasses:o}=Ye(e),{rtlClasses:i}=De(),{InputIcon:s}=fs(e),u=We(),c=h(()=>e.id||`input-${u}`),d=h(()=>`${c.value}-messages`),{errorMessages:f,isDirty:v,isDisabled:m,isReadonly:g,isPristine:y,isValid:b,isValidating:p,reset:S,resetValidation:C,validate:_,validationClasses:V}=ys(e,"v-input",c),x=h(()=>({id:c,messagesId:d,isDirty:v,isDisabled:m,isReadonly:g,isPristine:y,isValid:b,isValidating:p,reset:S,resetValidation:C,validate:_})),T=h(()=>{var w;return(w=e.errorMessages)!=null&&w.length||!y.value&&f.value.length?f.value:e.hint&&(e.persistentHint||e.focused)?e.hint:e.messages});return j(()=>{var B,E,F,X;const w=!!(l.prepend||e.prependIcon),k=!!(l.append||e.appendIcon),I=T.value.length>0,A=!e.hideDetails||e.hideDetails==="auto"&&(I||!!l.details);return r("div",{class:["v-input",`v-input--${e.direction}`,{"v-input--center-affix":e.centerAffix},o.value,i.value,V.value,e.class],style:e.style},[w&&r("div",{key:"prepend",class:"v-input__prepend"},[(B=l.prepend)==null?void 0:B.call(l,x.value),e.prependIcon&&r(s,{key:"prepend-icon",name:"prepend"},null)]),l.default&&r("div",{class:"v-input__control"},[(E=l.default)==null?void 0:E.call(l,x.value)]),k&&r("div",{key:"append",class:"v-input__append"},[e.appendIcon&&r(s,{key:"append-icon",name:"append"},null),(F=l.append)==null?void 0:F.call(l,x.value)]),A&&r("div",{class:"v-input__details"},[r(ms,{id:d.value,active:I,messages:T.value},{message:l.message}),(X=l.details)==null?void 0:X.call(l,x.value)])])}),{reset:S,resetValidation:C,validate:_}}}),Eg=R({...Bt(),...rt(vs(),["inline"])},"VCheckbox"),Lg=L()({name:"VCheckbox",inheritAttrs:!1,props:Eg(),emits:{"update:modelValue":e=>!0,"update:focused":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const a=ue(e,"modelValue"),{isFocused:o,focus:i,blur:s}=Dt(e),u=We(),c=h(()=>e.id||`checkbox-${u}`);return j(()=>{const[d,f]=Qt(n),[v,m]=Ne.filterProps(e),[g,y]=mn.filterProps(e);return r(Ne,Y({class:["v-checkbox",e.class]},d,v,{modelValue:a.value,"onUpdate:modelValue":b=>a.value=b,id:c.value,focused:o.value,style:e.style}),{...l,default:b=>{let{id:p,messagesId:S,isDisabled:C,isReadonly:_}=b;return r(mn,Y(g,{id:p.value,"aria-describedby":S.value,disabled:C.value,readonly:_.value},f,{modelValue:a.value,"onUpdate:modelValue":V=>a.value=V,onFocus:i,onBlur:s}),l)}})}),{}}});const $g=R({start:Boolean,end:Boolean,icon:se,image:String,...q(),...Fe(),...Ie(),...At(),...ce(),...he(),...mt({variant:"flat"})},"VAvatar"),Lt=L()({name:"VAvatar",props:$g(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{colorClasses:a,colorStyles:o,variantClasses:i}=ln(e),{densityClasses:s}=Ye(e),{roundedClasses:u}=Ae(e),{sizeClasses:c,sizeStyles:d}=wn(e);return j(()=>r(e.tag,{class:["v-avatar",{"v-avatar--start":e.start,"v-avatar--end":e.end},l.value,a.value,s.value,u.value,c.value,i.value,e.class],style:[o.value,d.value,e.style]},{default:()=>{var f;return[e.image?r(qt,{key:"image",src:e.image,alt:"",cover:!0},null):e.icon?r(Se,{key:"icon",icon:e.icon},null):(f=n.default)==null?void 0:f.call(n),nn(!1,"v-avatar")]}})),{}}});const bs=Symbol.for("vuetify:v-chip-group"),Mg=R({column:Boolean,filter:Boolean,valueComparator:{type:Function,default:hn},...q(),...pn({selectedClass:"v-chip--selected"}),...ce(),...he(),...mt({variant:"tonal"})},"VChipGroup"),Fg=L()({name:"VChipGroup",props:Mg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{isSelected:a,select:o,next:i,prev:s,selected:u}=an(e,bs);return Ee({VChip:{color:O(e,"color"),disabled:O(e,"disabled"),filter:O(e,"filter"),variant:O(e,"variant")}}),j(()=>r(e.tag,{class:["v-chip-group",{"v-chip-group--column":e.column},l.value,e.class],style:e.style},{default:()=>{var c;return[(c=n.default)==null?void 0:c.call(n,{isSelected:a,select:o,next:i,prev:s,selected:u.value})]}})),{}}}),Og=R({activeClass:String,appendAvatar:String,appendIcon:se,closable:Boolean,closeIcon:{type:se,default:"$delete"},closeLabel:{type:String,default:"$vuetify.close"},draggable:Boolean,filter:Boolean,filterIcon:{type:String,default:"$complete"},label:Boolean,link:{type:Boolean,default:void 0},pill:Boolean,prependAvatar:String,prependIcon:se,ripple:{type:[Boolean,Object],default:!0},text:String,modelValue:{type:Boolean,default:!0},onClick:St(),onClickOnce:St(),...at(),...q(),...Fe(),...Me(),...kn(),...Ie(),...Gn(),...At(),...ce({tag:"span"}),...he(),...mt({variant:"tonal"})},"VChip"),Wn=L()({name:"VChip",directives:{Ripple:Ot},props:Og(),emits:{"click:close":e=>!0,"update:modelValue":e=>!0,"group:selected":e=>!0,click:e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{t:o}=ct(),{borderClasses:i}=ft(e),{colorClasses:s,colorStyles:u,variantClasses:c}=ln(e),{densityClasses:d}=Ye(e),{elevationClasses:f}=He(e),{roundedClasses:v}=Ae(e),{sizeClasses:m}=wn(e),{themeClasses:g}=ye(e),y=ue(e,"modelValue"),b=Sn(e,bs,!1),p=Un(e,n),S=h(()=>e.link!==!1&&p.isLink.value),C=h(()=>!e.disabled&&e.link!==!1&&(!!b||e.link||p.isClickable.value)),_=h(()=>({"aria-label":o(e.closeLabel),onClick(T){T.stopPropagation(),y.value=!1,l("click:close",T)}}));function V(T){var w;l("click",T),C.value&&((w=p.navigate)==null||w.call(p,T),b==null||b.toggle())}function x(T){(T.key==="Enter"||T.key===" ")&&(T.preventDefault(),V(T))}return()=>{const T=p.isLink.value?"a":e.tag,w=!!(e.appendIcon||e.appendAvatar),k=!!(w||a.append),I=!!(a.close||e.closable),A=!!(a.filter||e.filter)&&b,B=!!(e.prependIcon||e.prependAvatar),E=!!(B||a.prepend),F=!b||b.isSelected.value;return y.value&&ne(r(T,{class:["v-chip",{"v-chip--disabled":e.disabled,"v-chip--label":e.label,"v-chip--link":C.value,"v-chip--filter":A,"v-chip--pill":e.pill},g.value,i.value,F?s.value:void 0,d.value,f.value,v.value,m.value,c.value,b==null?void 0:b.selectedClass.value,e.class],style:[F?u.value:void 0,e.style],disabled:e.disabled||void 0,draggable:e.draggable,href:p.href.value,tabindex:C.value?0:void 0,onClick:V,onKeydown:C.value&&!S.value&&x},{default:()=>{var X;return[nn(C.value,"v-chip"),A&&r(Ua,{key:"filter"},{default:()=>[ne(r("div",{class:"v-chip__filter"},[a.filter?r(pe,{key:"filter-defaults",disabled:!e.filterIcon,defaults:{VIcon:{icon:e.filterIcon}}},a.filter):r(Se,{key:"filter-icon",icon:e.filterIcon},null)]),[[Pe,b.isSelected.value]])]}),E&&r("div",{key:"prepend",class:"v-chip__prepend"},[a.prepend?r(pe,{key:"prepend-defaults",disabled:!B,defaults:{VAvatar:{image:e.prependAvatar,start:!0},VIcon:{icon:e.prependIcon,start:!0}}},a.prepend):r(oe,null,[e.prependIcon&&r(Se,{key:"prepend-icon",icon:e.prependIcon,start:!0},null),e.prependAvatar&&r(Lt,{key:"prepend-avatar",image:e.prependAvatar,start:!0},null)])]),r("div",{class:"v-chip__content"},[((X=a.default)==null?void 0:X.call(a,{isSelected:b==null?void 0:b.isSelected.value,selectedClass:b==null?void 0:b.selectedClass.value,select:b==null?void 0:b.select,toggle:b==null?void 0:b.toggle,value:b==null?void 0:b.value.value,disabled:e.disabled}))??e.text]),k&&r("div",{key:"append",class:"v-chip__append"},[a.append?r(pe,{key:"append-defaults",disabled:!w,defaults:{VAvatar:{end:!0,image:e.appendAvatar},VIcon:{end:!0,icon:e.appendIcon}}},a.append):r(oe,null,[e.appendIcon&&r(Se,{key:"append-icon",end:!0,icon:e.appendIcon},null),e.appendAvatar&&r(Lt,{key:"append-avatar",end:!0,image:e.appendAvatar},null)])]),I&&r("div",Y({key:"close",class:"v-chip__close"},_.value),[a.close?r(pe,{key:"close-defaults",defaults:{VIcon:{icon:e.closeIcon,size:"x-small"}}},a.close):r(Se,{key:"close-icon",icon:e.closeIcon,size:"x-small"},null)])]}}),[[Ze("ripple"),C.value&&e.ripple,null]])}}});const oa=Symbol.for("vuetify:list");function ps(){const e=Ve(oa,{hasPrepend:K(!1),updateHasPrepend:()=>null}),t={hasPrepend:K(!1),updateHasPrepend:n=>{n&&(t.hasPrepend.value=n)}};return $e(oa,t),e}function ks(){return Ve(oa,null)}const Dg={open:e=>{let{id:t,value:n,opened:l,parents:a}=e;if(n){const o=new Set;o.add(t);let i=a.get(t);for(;i!=null;)o.add(i),i=a.get(i);return o}else return l.delete(t),l},select:()=>null},Ss={open:e=>{let{id:t,value:n,opened:l,parents:a}=e;if(n){let o=a.get(t);for(l.add(t);o!=null&&o!==t;)l.add(o),o=a.get(o);return l}else l.delete(t);return l},select:()=>null},Ng={open:Ss.open,select:e=>{let{id:t,value:n,opened:l,parents:a}=e;if(!n)return l;const o=[];let i=a.get(t);for(;i!=null;)o.push(i),i=a.get(i);return new Set(o)}},eo=e=>{const t={select:n=>{let{id:l,value:a,selected:o}=n;if(l=$t(l),e&&!a){const i=Array.from(o.entries()).reduce((s,u)=>{let[c,d]=u;return d==="on"?[...s,c]:s},[]);if(i.length===1&&i[0]===l)return o}return o.set(l,a?"on":"off"),o},in:(n,l,a)=>{let o=new Map;for(const i of n||[])o=t.select({id:i,value:!0,selected:new Map(o),children:l,parents:a});return o},out:n=>{const l=[];for(const[a,o]of n.entries())o==="on"&&l.push(a);return l}};return t},ws=e=>{const t=eo(e);return{select:l=>{let{selected:a,id:o,...i}=l;o=$t(o);const s=a.has(o)?new Map([[o,a.get(o)]]):new Map;return t.select({...i,id:o,selected:s})},in:(l,a,o)=>{let i=new Map;return l!=null&&l.length&&(i=t.in(l.slice(0,1),a,o)),i},out:(l,a,o)=>t.out(l,a,o)}},zg=e=>{const t=eo(e);return{select:l=>{let{id:a,selected:o,children:i,...s}=l;return a=$t(a),i.has(a)?o:t.select({id:a,selected:o,children:i,...s})},in:t.in,out:t.out}},Hg=e=>{const t=ws(e);return{select:l=>{let{id:a,selected:o,children:i,...s}=l;return a=$t(a),i.has(a)?o:t.select({id:a,selected:o,children:i,...s})},in:t.in,out:t.out}},jg=e=>{const t={select:n=>{let{id:l,value:a,selected:o,children:i,parents:s}=n;l=$t(l);const u=new Map(o),c=[l];for(;c.length;){const f=c.shift();o.set(f,a?"on":"off"),i.has(f)&&c.push(...i.get(f))}let d=s.get(l);for(;d;){const f=i.get(d),v=f.every(g=>o.get(g)==="on"),m=f.every(g=>!o.has(g)||o.get(g)==="off");o.set(d,v?"on":m?"off":"indeterminate"),d=s.get(d)}return e&&!a&&Array.from(o.entries()).reduce((v,m)=>{let[g,y]=m;return y==="on"?[...v,g]:v},[]).length===0?u:o},in:(n,l,a)=>{let o=new Map;for(const i of n||[])o=t.select({id:i,value:!0,selected:new Map(o),children:l,parents:a});return o},out:(n,l)=>{const a=[];for(const[o,i]of n.entries())i==="on"&&!l.has(o)&&a.push(o);return a}};return t},Dn=Symbol.for("vuetify:nested"),Cs={id:K(),root:{register:()=>null,unregister:()=>null,parents:W(new Map),children:W(new Map),open:()=>null,openOnSelect:()=>null,select:()=>null,opened:W(new Set),selected:W(new Map),selectedValues:W([])}},Ug=R({selectStrategy:[String,Function],openStrategy:[String,Object],opened:Array,selected:Array,mandatory:Boolean},"nested"),Gg=e=>{let t=!1;const n=W(new Map),l=W(new Map),a=ue(e,"opened",e.opened,f=>new Set(f),f=>[...f.values()]),o=h(()=>{if(typeof e.selectStrategy=="object")return e.selectStrategy;switch(e.selectStrategy){case"single-leaf":return Hg(e.mandatory);case"leaf":return zg(e.mandatory);case"independent":return eo(e.mandatory);case"single-independent":return ws(e.mandatory);case"classic":default:return jg(e.mandatory)}}),i=h(()=>{if(typeof e.openStrategy=="object")return e.openStrategy;switch(e.openStrategy){case"list":return Ng;case"single":return Dg;case"multiple":default:return Ss}}),s=ue(e,"selected",e.selected,f=>o.value.in(f,n.value,l.value),f=>o.value.out(f,n.value,l.value));nt(()=>{t=!0});function u(f){const v=[];let m=f;for(;m!=null;)v.unshift(m),m=l.value.get(m);return v}const c=Oe("nested"),d={id:K(),root:{opened:a,selected:s,selectedValues:h(()=>{const f=[];for(const[v,m]of s.value.entries())m==="on"&&f.push(v);return f}),register:(f,v,m)=>{v&&f!==v&&l.value.set(f,v),m&&n.value.set(f,[]),v!=null&&n.value.set(v,[...n.value.get(v)||[],f])},unregister:f=>{if(t)return;n.value.delete(f);const v=l.value.get(f);if(v){const m=n.value.get(v)??[];n.value.set(v,m.filter(g=>g!==f))}l.value.delete(f),a.value.delete(f)},open:(f,v,m)=>{c.emit("click:open",{id:f,value:v,path:u(f),event:m});const g=i.value.open({id:f,value:v,opened:new Set(a.value),children:n.value,parents:l.value,event:m});g&&(a.value=g)},openOnSelect:(f,v,m)=>{const g=i.value.select({id:f,value:v,selected:new Map(s.value),opened:new Set(a.value),children:n.value,parents:l.value,event:m});g&&(a.value=g)},select:(f,v,m)=>{c.emit("click:select",{id:f,value:v,path:u(f),event:m});const g=o.value.select({id:f,value:v,selected:new Map(s.value),children:n.value,parents:l.value,event:m});g&&(s.value=g),d.root.openOnSelect(f,v,m)},children:n,parents:l}};return $e(Dn,d),d.root},xs=(e,t)=>{const n=Ve(Dn,Cs),l=Symbol(We()),a=h(()=>e.value!==void 0?e.value:l),o={...n,id:a,open:(i,s)=>n.root.open(a.value,i,s),openOnSelect:(i,s)=>n.root.openOnSelect(a.value,i,s),isOpen:h(()=>n.root.opened.value.has(a.value)),parent:h(()=>n.root.parents.value.get(a.value)),select:(i,s)=>n.root.select(a.value,i,s),isSelected:h(()=>n.root.selected.value.get($t(a.value))==="on"),isIndeterminate:h(()=>n.root.selected.value.get(a.value)==="indeterminate"),isLeaf:h(()=>!n.root.children.value.get(a.value)),isGroupActivator:n.isGroupActivator};return!n.isGroupActivator&&n.root.register(a.value,n.id.value,t),nt(()=>{!n.isGroupActivator&&n.root.unregister(a.value)}),t&&$e(Dn,o),o},Wg=()=>{const e=Ve(Dn,Cs);$e(Dn,{...e,isGroupActivator:!0})},Yg=ut({name:"VListGroupActivator",setup(e,t){let{slots:n}=t;return Wg(),()=>{var l;return(l=n.default)==null?void 0:l.call(n)}}}),Kg=R({activeColor:String,baseColor:String,color:String,collapseIcon:{type:se,default:"$collapse"},expandIcon:{type:se,default:"$expand"},prependIcon:se,appendIcon:se,fluid:Boolean,subgroup:Boolean,title:String,value:null,...q(),...ce()},"VListGroup"),ia=L()({name:"VListGroup",props:Kg(),setup(e,t){let{slots:n}=t;const{isOpen:l,open:a,id:o}=xs(O(e,"value"),!0),i=h(()=>`v-list-group--id-${String(o.value)}`),s=ks(),{isBooted:u}=tn();function c(m){a(!l.value,m)}const d=h(()=>({onClick:c,class:"v-list-group__header",id:i.value})),f=h(()=>l.value?e.collapseIcon:e.expandIcon),v=h(()=>({VListItem:{active:l.value,activeColor:e.activeColor,baseColor:e.baseColor,color:e.color,prependIcon:e.prependIcon||e.subgroup&&f.value,appendIcon:e.appendIcon||!e.subgroup&&f.value,title:e.title,value:e.value}}));return j(()=>r(e.tag,{class:["v-list-group",{"v-list-group--prepend":s==null?void 0:s.hasPrepend.value,"v-list-group--fluid":e.fluid,"v-list-group--subgroup":e.subgroup,"v-list-group--open":l.value},e.class],style:e.style},{default:()=>[n.activator&&r(pe,{defaults:v.value},{default:()=>[r(Yg,null,{default:()=>[n.activator({props:d.value,isOpen:l.value})]})]}),r(ht,{transition:{component:kl},disabled:!u.value},{default:()=>{var m;return[ne(r("div",{class:"v-list-group__items",role:"group","aria-labelledby":i.value},[(m=n.default)==null?void 0:m.call(n)]),[[Pe,l.value]])]}})]})),{}}});const Vs=bt("v-list-item-subtitle"),_s=bt("v-list-item-title"),qg=R({active:{type:Boolean,default:void 0},activeClass:String,activeColor:String,appendAvatar:String,appendIcon:se,baseColor:String,disabled:Boolean,lines:String,link:{type:Boolean,default:void 0},nav:Boolean,prependAvatar:String,prependIcon:se,ripple:{type:[Boolean,Object],default:!0},subtitle:[String,Number,Boolean],title:[String,Number,Boolean],value:null,onClick:St(),onClickOnce:St(),...at(),...q(),...Fe(),...dt(),...Me(),...Ie(),...Gn(),...ce(),...he(),...mt({variant:"text"})},"VListItem"),_t=L()({name:"VListItem",directives:{Ripple:Ot},props:qg(),emits:{click:e=>!0},setup(e,t){let{attrs:n,slots:l,emit:a}=t;const o=Un(e,n),i=h(()=>e.value===void 0?o.href.value:e.value),{select:s,isSelected:u,isIndeterminate:c,isGroupActivator:d,root:f,parent:v,openOnSelect:m}=xs(i,!1),g=ks(),y=h(()=>{var M;return e.active!==!1&&(e.active||((M=o.isActive)==null?void 0:M.value)||u.value)}),b=h(()=>e.link!==!1&&o.isLink.value),p=h(()=>!e.disabled&&e.link!==!1&&(e.link||o.isClickable.value||e.value!=null&&!!g)),S=h(()=>e.rounded||e.nav),C=h(()=>e.color??e.activeColor),_=h(()=>({color:y.value?C.value??e.baseColor:e.baseColor,variant:e.variant}));Z(()=>{var M;return(M=o.isActive)==null?void 0:M.value},M=>{M&&v.value!=null&&f.open(v.value,!0),M&&m(M)},{immediate:!0});const{themeClasses:V}=ye(e),{borderClasses:x}=ft(e),{colorClasses:T,colorStyles:w,variantClasses:k}=ln(_),{densityClasses:I}=Ye(e),{dimensionStyles:A}=vt(e),{elevationClasses:B}=He(e),{roundedClasses:E}=Ae(S),F=h(()=>e.lines?`v-list-item--${e.lines}-line`:void 0),X=h(()=>({isActive:y.value,select:s,isSelected:u.value,isIndeterminate:c.value}));function $(M){var G;a("click",M),!(d||!p.value)&&((G=o.navigate)==null||G.call(o,M),e.value!=null&&s(!u.value,M))}function N(M){(M.key==="Enter"||M.key===" ")&&(M.preventDefault(),$(M))}return j(()=>{const M=b.value?"a":e.tag,G=l.title||e.title,U=l.subtitle||e.subtitle,z=!!(e.appendAvatar||e.appendIcon),ae=!!(z||l.append),re=!!(e.prependAvatar||e.prependIcon),ve=!!(re||l.prepend);return g==null||g.updateHasPrepend(ve),e.activeColor&&xf("active-color",["color","base-color"]),ne(r(M,{class:["v-list-item",{"v-list-item--active":y.value,"v-list-item--disabled":e.disabled,"v-list-item--link":p.value,"v-list-item--nav":e.nav,"v-list-item--prepend":!ve&&(g==null?void 0:g.hasPrepend.value),[`${e.activeClass}`]:e.activeClass&&y.value},V.value,x.value,T.value,I.value,B.value,F.value,E.value,k.value,e.class],style:[w.value,A.value,e.style],href:o.href.value,tabindex:p.value?g?-2:0:void 0,onClick:$,onKeydown:p.value&&!b.value&&N},{default:()=>{var ge;return[nn(p.value||y.value,"v-list-item"),ve&&r("div",{key:"prepend",class:"v-list-item__prepend"},[l.prepend?r(pe,{key:"prepend-defaults",disabled:!re,defaults:{VAvatar:{density:e.density,image:e.prependAvatar},VIcon:{density:e.density,icon:e.prependIcon},VListItemAction:{start:!0}}},{default:()=>{var D;return[(D=l.prepend)==null?void 0:D.call(l,X.value)]}}):r(oe,null,[e.prependAvatar&&r(Lt,{key:"prepend-avatar",density:e.density,image:e.prependAvatar},null),e.prependIcon&&r(Se,{key:"prepend-icon",density:e.density,icon:e.prependIcon},null)]),r("div",{class:"v-list-item__spacer"},null)]),r("div",{class:"v-list-item__content","data-no-activator":""},[G&&r(_s,{key:"title"},{default:()=>{var D;return[((D=l.title)==null?void 0:D.call(l,{title:e.title}))??e.title]}}),U&&r(Vs,{key:"subtitle"},{default:()=>{var D;return[((D=l.subtitle)==null?void 0:D.call(l,{subtitle:e.subtitle}))??e.subtitle]}}),(ge=l.default)==null?void 0:ge.call(l,X.value)]),ae&&r("div",{key:"append",class:"v-list-item__append"},[l.append?r(pe,{key:"append-defaults",disabled:!z,defaults:{VAvatar:{density:e.density,image:e.appendAvatar},VIcon:{density:e.density,icon:e.appendIcon},VListItemAction:{end:!0}}},{default:()=>{var D;return[(D=l.append)==null?void 0:D.call(l,X.value)]}}):r(oe,null,[e.appendIcon&&r(Se,{key:"append-icon",density:e.density,icon:e.appendIcon},null),e.appendAvatar&&r(Lt,{key:"append-avatar",density:e.density,image:e.appendAvatar},null)]),r("div",{class:"v-list-item__spacer"},null)])]}}),[[Ze("ripple"),p.value&&e.ripple]])}),{}}}),Xg=R({color:String,inset:Boolean,sticky:Boolean,title:String,...q(),...ce()},"VListSubheader"),Is=L()({name:"VListSubheader",props:Xg(),setup(e,t){let{slots:n}=t;const{textColorClasses:l,textColorStyles:a}=Ge(O(e,"color"));return j(()=>{const o=!!(n.default||e.title);return r(e.tag,{class:["v-list-subheader",{"v-list-subheader--inset":e.inset,"v-list-subheader--sticky":e.sticky},l.value,e.class],style:[{textColorStyles:a},e.style]},{default:()=>{var i;return[o&&r("div",{class:"v-list-subheader__text"},[((i=n.default)==null?void 0:i.call(n))??e.title])]}})}),{}}});const Zg=R({color:String,inset:Boolean,length:[Number,String],thickness:[Number,String],vertical:Boolean,...q(),...he()},"VDivider"),Ts=L()({name:"VDivider",props:Zg(),setup(e,t){let{attrs:n}=t;const{themeClasses:l}=ye(e),{textColorClasses:a,textColorStyles:o}=Ge(O(e,"color")),i=h(()=>{const s={};return e.length&&(s[e.vertical?"maxHeight":"maxWidth"]=J(e.length)),e.thickness&&(s[e.vertical?"borderRightWidth":"borderTopWidth"]=J(e.thickness)),s});return j(()=>r("hr",{class:[{"v-divider":!0,"v-divider--inset":e.inset,"v-divider--vertical":e.vertical},l.value,a.value,e.class],style:[i.value,o.value,e.style],"aria-orientation":!n.role||n.role==="separator"?e.vertical?"vertical":"horizontal":void 0,role:`${n.role||"separator"}`},null)),{}}}),Jg=R({items:Array,returnObject:Boolean},"VListChildren"),Ps=L()({name:"VListChildren",props:Jg(),setup(e,t){let{slots:n}=t;return ps(),()=>{var l,a;return((l=n.default)==null?void 0:l.call(n))??((a=e.items)==null?void 0:a.map(o=>{var m,g;let{children:i,props:s,type:u,raw:c}=o;if(u==="divider")return((m=n.divider)==null?void 0:m.call(n,{props:s}))??r(Ts,s,null);if(u==="subheader")return((g=n.subheader)==null?void 0:g.call(n,{props:s}))??r(Is,s,null);const d={subtitle:n.subtitle?y=>{var b;return(b=n.subtitle)==null?void 0:b.call(n,{...y,item:c})}:void 0,prepend:n.prepend?y=>{var b;return(b=n.prepend)==null?void 0:b.call(n,{...y,item:c})}:void 0,append:n.append?y=>{var b;return(b=n.append)==null?void 0:b.call(n,{...y,item:c})}:void 0,title:n.title?y=>{var b;return(b=n.title)==null?void 0:b.call(n,{...y,item:c})}:void 0},[f,v]=ia.filterProps(s);return i?r(ia,Y({value:s==null?void 0:s.value},f),{activator:y=>{let{props:b}=y;const p={...s,...b,value:e.returnObject?c:s.value};return n.header?n.header({props:p}):r(_t,p,d)},default:()=>r(Ps,{items:i},n)}):n.item?n.item({props:s}):r(_t,Y(s,{value:e.returnObject?c:s.value}),d)}))}}}),As=R({items:{type:Array,default:()=>[]},itemTitle:{type:[String,Array,Function],default:"title"},itemValue:{type:[String,Array,Function],default:"value"},itemChildren:{type:[Boolean,String,Array,Function],default:"children"},itemProps:{type:[Boolean,String,Array,Function],default:"props"},returnObject:Boolean,valueComparator:{type:Function,default:hn}},"list-items");function Gt(e,t){const n=kt(t,e.itemTitle,t),l=kt(t,e.itemValue,n),a=kt(t,e.itemChildren),o=e.itemProps===!0?typeof t=="object"&&t!=null&&!Array.isArray(t)?"children"in t?Kt(t,["children"])[1]:t:void 0:kt(t,e.itemProps),i={title:n,value:l,...o};return{title:String(i.title??""),value:i.value,props:i,children:Array.isArray(a)?Bs(e,a):void 0,raw:t}}function Bs(e,t){const n=[];for(const l of t)n.push(Gt(e,l));return n}function to(e){const t=h(()=>Bs(e,e.items)),n=h(()=>t.value.some(o=>o.value===null));function l(o){return n.value||(o=o.filter(i=>i!==null)),o.map(i=>e.returnObject&&typeof i=="string"?Gt(e,i):t.value.find(s=>e.valueComparator(i,s.value))||Gt(e,i))}function a(o){return e.returnObject?o.map(i=>{let{raw:s}=i;return s}):o.map(i=>{let{value:s}=i;return s})}return{items:t,transformIn:l,transformOut:a}}function Qg(e){return typeof e=="string"||typeof e=="number"||typeof e=="boolean"}function eh(e,t){const n=kt(t,e.itemType,"item"),l=Qg(t)?t:kt(t,e.itemTitle),a=kt(t,e.itemValue,void 0),o=kt(t,e.itemChildren),i=e.itemProps===!0?Kt(t,["children"])[1]:kt(t,e.itemProps),s={title:l,value:a,...i};return{type:n,title:s.title,value:s.value,props:s,children:n==="item"&&o?Rs(e,o):void 0,raw:t}}function Rs(e,t){const n=[];for(const l of t)n.push(eh(e,l));return n}function th(e){return{items:h(()=>Rs(e,e.items))}}const nh=R({baseColor:String,activeColor:String,activeClass:String,bgColor:String,disabled:Boolean,lines:{type:[Boolean,String],default:"one"},nav:Boolean,...Ug({selectStrategy:"single-leaf",openStrategy:"list"}),...at(),...q(),...Fe(),...dt(),...Me(),itemType:{type:String,default:"type"},...As(),...Ie(),...ce(),...he(),...mt({variant:"text"})},"VList"),Vl=L()({name:"VList",props:nh(),emits:{"update:selected":e=>!0,"update:opened":e=>!0,"click:open":e=>!0,"click:select":e=>!0},setup(e,t){let{slots:n}=t;const{items:l}=th(e),{themeClasses:a}=ye(e),{backgroundColorClasses:o,backgroundColorStyles:i}=Be(O(e,"bgColor")),{borderClasses:s}=ft(e),{densityClasses:u}=Ye(e),{dimensionStyles:c}=vt(e),{elevationClasses:d}=He(e),{roundedClasses:f}=Ae(e),{open:v,select:m}=Gg(e),g=h(()=>e.lines?`v-list--${e.lines}-line`:void 0),y=O(e,"activeColor"),b=O(e,"baseColor"),p=O(e,"color");ps(),Ee({VListGroup:{activeColor:y,baseColor:b,color:p},VListItem:{activeClass:O(e,"activeClass"),activeColor:y,baseColor:b,color:p,density:O(e,"density"),disabled:O(e,"disabled"),lines:O(e,"lines"),nav:O(e,"nav"),variant:O(e,"variant")}});const S=K(!1),C=W();function _(k){S.value=!0}function V(k){S.value=!1}function x(k){var I;!S.value&&!(k.relatedTarget&&((I=C.value)!=null&&I.contains(k.relatedTarget)))&&w()}function T(k){if(C.value){if(k.key==="ArrowDown")w("next");else if(k.key==="ArrowUp")w("prev");else if(k.key==="Home")w("first");else if(k.key==="End")w("last");else return;k.preventDefault()}}function w(k){if(C.value)return ul(C.value,k)}return j(()=>r(e.tag,{ref:C,class:["v-list",{"v-list--disabled":e.disabled,"v-list--nav":e.nav},a.value,o.value,s.value,u.value,d.value,g.value,f.value,e.class],style:[i.value,c.value,e.style],tabindex:e.disabled||S.value?-1:0,role:"listbox","aria-activedescendant":void 0,onFocusin:_,onFocusout:V,onFocus:x,onKeydown:T},{default:()=>[r(Ps,{items:l.value,returnObject:e.returnObject},n)]})),{open:v,select:m,focus:w}}}),lh=bt("v-list-img"),ah=R({start:Boolean,end:Boolean,...q(),...ce()},"VListItemAction"),oh=L()({name:"VListItemAction",props:ah(),setup(e,t){let{slots:n}=t;return j(()=>r(e.tag,{class:["v-list-item-action",{"v-list-item-action--start":e.start,"v-list-item-action--end":e.end},e.class],style:e.style},n)),{}}}),ih=R({start:Boolean,end:Boolean,...q(),...ce()},"VListItemMedia"),sh=L()({name:"VListItemMedia",props:ih(),setup(e,t){let{slots:n}=t;return j(()=>r(e.tag,{class:["v-list-item-media",{"v-list-item-media--start":e.start,"v-list-item-media--end":e.end},e.class],style:e.style},n)),{}}});function Ol(e,t){return{x:e.x+t.x,y:e.y+t.y}}function rh(e,t){return{x:e.x-t.x,y:e.y-t.y}}function qo(e,t){if(e.side==="top"||e.side==="bottom"){const{side:n,align:l}=e,a=l==="left"?0:l==="center"?t.width/2:l==="right"?t.width:l,o=n==="top"?0:n==="bottom"?t.height:n;return Ol({x:a,y:o},t)}else if(e.side==="left"||e.side==="right"){const{side:n,align:l}=e,a=n==="left"?0:n==="right"?t.width:n,o=l==="top"?0:l==="center"?t.height/2:l==="bottom"?t.height:l;return Ol({x:a,y:o},t)}return Ol({x:t.width/2,y:t.height/2},t)}const Es={static:dh,connected:fh},uh=R({locationStrategy:{type:[String,Function],default:"static",validator:e=>typeof e=="function"||e in Es},location:{type:String,default:"bottom"},origin:{type:String,default:"auto"},offset:[Number,String,Array]},"VOverlay-location-strategies");function ch(e,t){const n=W({}),l=W();Ce&&(Et(()=>!!(t.isActive.value&&e.locationStrategy),o=>{var i,s;Z(()=>e.locationStrategy,o),Xe(()=>{l.value=void 0}),typeof e.locationStrategy=="function"?l.value=(i=e.locationStrategy(t,e,n))==null?void 0:i.updateLocation:l.value=(s=Es[e.locationStrategy](t,e,n))==null?void 0:s.updateLocation}),window.addEventListener("resize",a,{passive:!0}),Xe(()=>{window.removeEventListener("resize",a),l.value=void 0}));function a(o){var i;(i=l.value)==null||i.call(l,o)}return{contentStyles:n,updateLocation:l}}function dh(){}function vh(e,t){t?e.style.removeProperty("left"):e.style.removeProperty("right");const n=Ea(e);return t?n.x+=parseFloat(e.style.right||0):n.x-=parseFloat(e.style.left||0),n.y-=parseFloat(e.style.top||0),n}function fh(e,t,n){zf(e.activatorEl.value)&&Object.assign(n.value,{position:"fixed",top:0,[e.isRtl.value?"right":"left"]:0});const{preferredAnchor:a,preferredOrigin:o}=Ba(()=>{const g=Gl(t.location,e.isRtl.value),y=t.origin==="overlap"?g:t.origin==="auto"?Ll(g):Gl(t.origin,e.isRtl.value);return g.side===y.side&&g.align===$l(y).align?{preferredAnchor:po(g),preferredOrigin:po(y)}:{preferredAnchor:g,preferredOrigin:y}}),[i,s,u,c]=["minWidth","minHeight","maxWidth","maxHeight"].map(g=>h(()=>{const y=parseFloat(t[g]);return isNaN(y)?1/0:y})),d=h(()=>{if(Array.isArray(t.offset))return t.offset;if(typeof t.offset=="string"){const g=t.offset.split(" ").map(parseFloat);return g.length<2&&g.push(0),g}return typeof t.offset=="number"?[t.offset,0]:[0,0]});let f=!1;const v=new ResizeObserver(()=>{f&&m()});Z([e.activatorEl,e.contentEl],(g,y)=>{let[b,p]=g,[S,C]=y;S&&v.unobserve(S),b&&v.observe(b),C&&v.unobserve(C),p&&v.observe(p)},{immediate:!0}),Xe(()=>{v.disconnect()});function m(){if(f=!1,requestAnimationFrame(()=>{requestAnimationFrame(()=>f=!0)}),!e.activatorEl.value||!e.contentEl.value)return;const g=e.activatorEl.value.getBoundingClientRect(),y=vh(e.contentEl.value,e.isRtl.value),b=dl(e.contentEl.value),p=12;b.length||(b.push(document.documentElement),e.contentEl.value.style.top&&e.contentEl.value.style.left||(y.x-=parseFloat(document.documentElement.style.getPropertyValue("--v-body-scroll-x")||0),y.y-=parseFloat(document.documentElement.style.getPropertyValue("--v-body-scroll-y")||0)));const S=b.reduce((A,B)=>{const E=B.getBoundingClientRect(),F=new cn({x:B===document.documentElement?0:E.x,y:B===document.documentElement?0:E.y,width:B.clientWidth,height:B.clientHeight});return A?new cn({x:Math.max(A.left,F.left),y:Math.max(A.top,F.top),width:Math.min(A.right,F.right)-Math.max(A.left,F.left),height:Math.min(A.bottom,F.bottom)-Math.max(A.top,F.top)}):F},void 0);S.x+=p,S.y+=p,S.width-=p*2,S.height-=p*2;let C={anchor:a.value,origin:o.value};function _(A){const B=new cn(y),E=qo(A.anchor,g),F=qo(A.origin,B);let{x:X,y:$}=rh(E,F);switch(A.anchor.side){case"top":$-=d.value[0];break;case"bottom":$+=d.value[0];break;case"left":X-=d.value[0];break;case"right":X+=d.value[0];break}switch(A.anchor.align){case"top":$-=d.value[1];break;case"bottom":$+=d.value[1];break;case"left":X-=d.value[1];break;case"right":X+=d.value[1];break}return B.x+=X,B.y+=$,B.width=Math.min(B.width,u.value),B.height=Math.min(B.height,c.value),{overflows:So(B,S),x:X,y:$}}let V=0,x=0;const T={x:0,y:0},w={x:!1,y:!1};let k=-1;for(;!(k++>10);){const{x:A,y:B,overflows:E}=_(C);V+=A,x+=B,y.x+=A,y.y+=B;{const F=ko(C.anchor),X=E.x.before||E.x.after,$=E.y.before||E.y.after;let N=!1;if(["x","y"].forEach(M=>{if(M==="x"&&X&&!w.x||M==="y"&&$&&!w.y){const G={anchor:{...C.anchor},origin:{...C.origin}},U=M==="x"?F==="y"?$l:Ll:F==="y"?Ll:$l;G.anchor=U(G.anchor),G.origin=U(G.origin);const{overflows:z}=_(G);(z[M].before<=E[M].before&&z[M].after<=E[M].after||z[M].before+z[M].after<(E[M].before+E[M].after)/2)&&(C=G,N=w[M]=!0)}}),N)continue}E.x.before&&(V+=E.x.before,y.x+=E.x.before),E.x.after&&(V-=E.x.after,y.x-=E.x.after),E.y.before&&(x+=E.y.before,y.y+=E.y.before),E.y.after&&(x-=E.y.after,y.y-=E.y.after);{const F=So(y,S);T.x=S.width-F.x.before-F.x.after,T.y=S.height-F.y.before-F.y.after,V+=F.x.before,y.x+=F.x.before,x+=F.y.before,y.y+=F.y.before}break}const I=ko(C.anchor);return Object.assign(n.value,{"--v-overlay-anchor-origin":`${C.anchor.side} ${C.anchor.align}`,transformOrigin:`${C.origin.side} ${C.origin.align}`,top:J(Dl(x)),left:e.isRtl.value?void 0:J(Dl(V)),right:e.isRtl.value?J(Dl(-V)):void 0,minWidth:J(I==="y"?Math.min(i.value,g.width):i.value),maxWidth:J(Xo(Ue(T.x,i.value===1/0?0:i.value,u.value))),maxHeight:J(Xo(Ue(T.y,s.value===1/0?0:s.value,c.value)))}),{available:T,contentBox:y}}return Z(()=>[a.value,o.value,t.offset,t.minWidth,t.minHeight,t.maxWidth,t.maxHeight],()=>m()),xe(()=>{const g=m();if(!g)return;const{available:y,contentBox:b}=g;b.height>y.y&&requestAnimationFrame(()=>{m(),requestAnimationFrame(()=>{m()})})}),{updateLocation:m}}function Dl(e){return Math.round(e*devicePixelRatio)/devicePixelRatio}function Xo(e){return Math.ceil(e*devicePixelRatio)/devicePixelRatio}let sa=!0;const ml=[];function mh(e){!sa||ml.length?(ml.push(e),ra()):(sa=!1,e(),ra())}let Zo=-1;function ra(){cancelAnimationFrame(Zo),Zo=requestAnimationFrame(()=>{const e=ml.shift();e&&e(),ml.length?ra():sa=!0})}const ol={none:null,close:yh,block:bh,reposition:ph},gh=R({scrollStrategy:{type:[String,Function],default:"block",validator:e=>typeof e=="function"||e in ol}},"VOverlay-scroll-strategies");function hh(e,t){if(!Ce)return;let n;tt(async()=>{n==null||n.stop(),t.isActive.value&&e.scrollStrategy&&(n=wa(),await xe(),n.active&&n.run(()=>{var l;typeof e.scrollStrategy=="function"?e.scrollStrategy(t,e,n):(l=ol[e.scrollStrategy])==null||l.call(ol,t,e,n)}))}),Xe(()=>{n==null||n.stop()})}function yh(e){function t(n){e.isActive.value=!1}Ls(e.activatorEl.value??e.contentEl.value,t)}function bh(e,t){var i;const n=(i=e.root.value)==null?void 0:i.offsetParent,l=[...new Set([...dl(e.activatorEl.value,t.contained?n:void 0),...dl(e.contentEl.value,t.contained?n:void 0)])].filter(s=>!s.classList.contains("v-overlay-scroll-blocked")),a=window.innerWidth-document.documentElement.offsetWidth,o=(s=>Fa(s)&&s)(n||document.documentElement);o&&e.root.value.classList.add("v-overlay--scroll-blocked"),l.forEach((s,u)=>{s.style.setProperty("--v-body-scroll-x",J(-s.scrollLeft)),s.style.setProperty("--v-body-scroll-y",J(-s.scrollTop)),s!==document.documentElement&&s.style.setProperty("--v-scrollbar-offset",J(a)),s.classList.add("v-overlay-scroll-blocked")}),Xe(()=>{l.forEach((s,u)=>{const c=parseFloat(s.style.getPropertyValue("--v-body-scroll-x")),d=parseFloat(s.style.getPropertyValue("--v-body-scroll-y"));s.style.removeProperty("--v-body-scroll-x"),s.style.removeProperty("--v-body-scroll-y"),s.style.removeProperty("--v-scrollbar-offset"),s.classList.remove("v-overlay-scroll-blocked"),s.scrollLeft=-c,s.scrollTop=-d}),o&&e.root.value.classList.remove("v-overlay--scroll-blocked")})}function ph(e,t,n){let l=!1,a=-1,o=-1;function i(s){mh(()=>{var d,f;const u=performance.now();(f=(d=e.updateLocation).value)==null||f.call(d,s),l=(performance.now()-u)/(1e3/60)>2})}o=(typeof requestIdleCallback>"u"?s=>s():requestIdleCallback)(()=>{n.run(()=>{Ls(e.activatorEl.value??e.contentEl.value,s=>{l?(cancelAnimationFrame(a),a=requestAnimationFrame(()=>{a=requestAnimationFrame(()=>{i(s)})})):i(s)})})}),Xe(()=>{typeof cancelIdleCallback<"u"&&cancelIdleCallback(o),cancelAnimationFrame(a)})}function Ls(e,t){const n=[document,...dl(e)];n.forEach(l=>{l.addEventListener("scroll",t,{passive:!0})}),Xe(()=>{n.forEach(l=>{l.removeEventListener("scroll",t)})})}const ua=Symbol.for("vuetify:v-menu"),$s=R({closeDelay:[Number,String],openDelay:[Number,String]},"delay");function Ms(e,t){const n={},l=a=>()=>{if(!Ce)return Promise.resolve(!0);const o=a==="openDelay";return n.closeDelay&&window.clearTimeout(n.closeDelay),delete n.closeDelay,n.openDelay&&window.clearTimeout(n.openDelay),delete n.openDelay,new Promise(i=>{const s=parseInt(e[a]??0,10);n[a]=window.setTimeout(()=>{t==null||t(o),i(o)},s)})};return{runCloseDelay:l("closeDelay"),runOpenDelay:l("openDelay")}}const kh=R({activator:[String,Object],activatorProps:{type:Object,default:()=>({})},openOnClick:{type:Boolean,default:void 0},openOnHover:Boolean,openOnFocus:{type:Boolean,default:void 0},closeOnContentClick:Boolean,...$s()},"VOverlay-activator");function Sh(e,t){let{isActive:n,isTop:l}=t;const a=W();let o=!1,i=!1,s=!0;const u=h(()=>e.openOnFocus||e.openOnFocus==null&&e.openOnHover),c=h(()=>e.openOnClick||e.openOnClick==null&&!e.openOnHover&&!u.value),{runOpenDelay:d,runCloseDelay:f}=Ms(e,C=>{C===(e.openOnHover&&o||u.value&&i)&&!(e.openOnHover&&n.value&&!l.value)&&(n.value!==C&&(s=!0),n.value=C)}),v={onClick:C=>{C.stopPropagation(),a.value=C.currentTarget||C.target,n.value=!n.value},onMouseenter:C=>{var _;(_=C.sourceCapabilities)!=null&&_.firesTouchEvents||(o=!0,a.value=C.currentTarget||C.target,d())},onMouseleave:C=>{o=!1,f()},onFocus:C=>{dn(C.target,":focus-visible")!==!1&&(i=!0,C.stopPropagation(),a.value=C.currentTarget||C.target,d())},onBlur:C=>{i=!1,C.stopPropagation(),f()}},m=h(()=>{const C={};return c.value&&(C.onClick=v.onClick),e.openOnHover&&(C.onMouseenter=v.onMouseenter,C.onMouseleave=v.onMouseleave),u.value&&(C.onFocus=v.onFocus,C.onBlur=v.onBlur),C}),g=h(()=>{const C={};if(e.openOnHover&&(C.onMouseenter=()=>{o=!0,d()},C.onMouseleave=()=>{o=!1,f()}),u.value&&(C.onFocusin=()=>{i=!0,d()},C.onFocusout=()=>{i=!1,f()}),e.closeOnContentClick){const _=Ve(ua,null);C.onClick=()=>{n.value=!1,_==null||_.closeParents()}}return C}),y=h(()=>{const C={};return e.openOnHover&&(C.onMouseenter=()=>{s&&(o=!0,s=!1,d())},C.onMouseleave=()=>{o=!1,f()}),C});Z(l,C=>{C&&(e.openOnHover&&!o&&(!u.value||!i)||u.value&&!i&&(!e.openOnHover||!o))&&(n.value=!1)});const b=W();tt(()=>{b.value&&xe(()=>{a.value=jl(b.value)})});const p=Oe("useActivator");let S;return Z(()=>!!e.activator,C=>{C&&Ce?(S=wa(),S.run(()=>{wh(e,p,{activatorEl:a,activatorEvents:m})})):S&&S.stop()},{flush:"post",immediate:!0}),Xe(()=>{S==null||S.stop()}),{activatorEl:a,activatorRef:b,activatorEvents:m,contentEvents:g,scrimEvents:y}}function wh(e,t,n){let{activatorEl:l,activatorEvents:a}=n;Z(()=>e.activator,(u,c)=>{if(c&&u!==c){const d=s(c);d&&i(d)}u&&xe(()=>o())},{immediate:!0}),Z(()=>e.activatorProps,()=>{o()}),Xe(()=>{i()});function o(){let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:s(),c=arguments.length>1&&arguments[1]!==void 0?arguments[1]:e.activatorProps;u&&gf(u,Y(a.value,c))}function i(){let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:s(),c=arguments.length>1&&arguments[1]!==void 0?arguments[1]:e.activatorProps;u&&hf(u,Y(a.value,c))}function s(){var d,f;let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:e.activator,c;if(u)if(u==="parent"){let v=(f=(d=t==null?void 0:t.proxy)==null?void 0:d.$el)==null?void 0:f.parentNode;for(;v!=null&&v.hasAttribute("data-no-activator");)v=v.parentNode;c=v}else typeof u=="string"?c=document.querySelector(u):"$el"in u?c=u.$el:c=u;return l.value=(c==null?void 0:c.nodeType)===Node.ELEMENT_NODE?c:null,l.value}}function Fs(){if(!Ce)return K(!1);const{ssr:e}=en();if(e){const t=K(!1);return Je(()=>{t.value=!0}),t}else return K(!0)}const _l=R({eager:Boolean},"lazy");function no(e,t){const n=K(!1),l=h(()=>n.value||e.eager||t.value);Z(t,()=>n.value=!0);function a(){e.eager||(n.value=!1)}return{isBooted:n,hasContent:l,onAfterLeave:a}}function _n(){const t=Oe("useScopeId").vnode.scopeId;return{scopeId:t?{[t]:""}:void 0}}const Jo=Symbol.for("vuetify:stack"),Pn=gt([]);function Ch(e,t,n){const l=Oe("useStack"),a=!n,o=Ve(Jo,void 0),i=gt({activeChildren:new Set});$e(Jo,i);const s=K(+t.value);Et(e,()=>{var f;const d=(f=Pn.at(-1))==null?void 0:f[1];s.value=d?d+10:+t.value,a&&Pn.push([l.uid,s.value]),o==null||o.activeChildren.add(l.uid),Xe(()=>{if(a){const v=$t(Pn).findIndex(m=>m[0]===l.uid);Pn.splice(v,1)}o==null||o.activeChildren.delete(l.uid)})});const u=K(!0);a&&tt(()=>{var f;const d=((f=Pn.at(-1))==null?void 0:f[0])===l.uid;setTimeout(()=>u.value=d)});const c=h(()=>!i.activeChildren.size);return{globalTop:Ca(u),localTop:c,stackStyles:h(()=>({zIndex:s.value}))}}function xh(e){return{teleportTarget:h(()=>{const n=e.value;if(n===!0||!Ce)return;const l=n===!1?document.body:typeof n=="string"?document.querySelector(n):n;if(l==null)return;let a=l.querySelector(":scope > .v-overlay-container");return a||(a=document.createElement("div"),a.className="v-overlay-container",l.appendChild(a)),a})}}function Vh(){return!0}function Os(e,t,n){if(!e||Ds(e,n)===!1)return!1;const l=Ei(t);if(typeof ShadowRoot<"u"&&l instanceof ShadowRoot&&l.host===e.target)return!1;const a=(typeof n.value=="object"&&n.value.include||(()=>[]))();return a.push(t),!a.some(o=>o==null?void 0:o.contains(e.target))}function Ds(e,t){return(typeof t.value=="object"&&t.value.closeConditional||Vh)(e)}function _h(e,t,n){const l=typeof n.value=="function"?n.value:n.value.handler;t._clickOutside.lastMousedownWasOutside&&Os(e,t,n)&&setTimeout(()=>{Ds(e,n)&&l&&l(e)},0)}function Qo(e,t){const n=Ei(e);t(document),typeof ShadowRoot<"u"&&n instanceof ShadowRoot&&t(n)}const Ns={mounted(e,t){const n=a=>_h(a,e,t),l=a=>{e._clickOutside.lastMousedownWasOutside=Os(a,e,t)};Qo(e,a=>{a.addEventListener("click",n,!0),a.addEventListener("mousedown",l,!0)}),e._clickOutside||(e._clickOutside={lastMousedownWasOutside:!1}),e._clickOutside[t.instance.$.uid]={onClick:n,onMousedown:l}},unmounted(e,t){e._clickOutside&&(Qo(e,n=>{var o;if(!n||!((o=e._clickOutside)!=null&&o[t.instance.$.uid]))return;const{onClick:l,onMousedown:a}=e._clickOutside[t.instance.$.uid];n.removeEventListener("click",l,!0),n.removeEventListener("mousedown",a,!0)}),delete e._clickOutside[t.instance.$.uid])}};function Ih(e){const{modelValue:t,color:n,...l}=e;return r(Rt,{name:"fade-transition",appear:!0},{default:()=>[e.modelValue&&r("div",Y({class:["v-overlay__scrim",e.color.backgroundColorClasses.value],style:e.color.backgroundColorStyles.value},l),null)]})}const Yn=R({absolute:Boolean,attach:[Boolean,String,Object],closeOnBack:{type:Boolean,default:!0},contained:Boolean,contentClass:null,contentProps:null,disabled:Boolean,noClickAnimation:Boolean,modelValue:Boolean,persistent:Boolean,scrim:{type:[Boolean,String],default:!0},zIndex:{type:[Number,String],default:2e3},...kh(),...q(),...dt(),..._l(),...uh(),...gh(),...he(),...Pt()},"VOverlay"),It=L()({name:"VOverlay",directives:{ClickOutside:Ns},inheritAttrs:!1,props:{_disableGlobalStack:Boolean,...Yn()},emits:{"click:outside":e=>!0,"update:modelValue":e=>!0,afterLeave:()=>!0},setup(e,t){let{slots:n,attrs:l,emit:a}=t;const o=ue(e,"modelValue"),i=h({get:()=>o.value,set:G=>{G&&e.disabled||(o.value=G)}}),{teleportTarget:s}=xh(h(()=>e.attach||e.contained)),{themeClasses:u}=ye(e),{rtlClasses:c,isRtl:d}=De(),{hasContent:f,onAfterLeave:v}=no(e,i),m=Be(h(()=>typeof e.scrim=="string"?e.scrim:null)),{globalTop:g,localTop:y,stackStyles:b}=Ch(i,O(e,"zIndex"),e._disableGlobalStack),{activatorEl:p,activatorRef:S,activatorEvents:C,contentEvents:_,scrimEvents:V}=Sh(e,{isActive:i,isTop:y}),{dimensionStyles:x}=vt(e),T=Fs(),{scopeId:w}=_n();Z(()=>e.disabled,G=>{G&&(i.value=!1)});const k=W(),I=W(),{contentStyles:A,updateLocation:B}=ch(e,{isRtl:d,contentEl:I,activatorEl:p,isActive:i});hh(e,{root:k,contentEl:I,activatorEl:p,isActive:i,updateLocation:B});function E(G){a("click:outside",G),e.persistent?M():i.value=!1}function F(){return i.value&&g.value}Ce&&Z(i,G=>{G?window.addEventListener("keydown",X):window.removeEventListener("keydown",X)},{immediate:!0});function X(G){var U,z;G.key==="Escape"&&g.value&&(e.persistent?M():(i.value=!1,(U=I.value)!=null&&U.contains(document.activeElement)&&((z=p.value)==null||z.focus())))}const $=es();Et(()=>e.closeOnBack,()=>{mg($,G=>{g.value&&i.value?(G(!1),e.persistent?M():i.value=!1):G()})});const N=W();Z(()=>i.value&&(e.absolute||e.contained)&&s.value==null,G=>{if(G){const U=Ma(k.value);U&&U!==document.scrollingElement&&(N.value=U.scrollTop)}});function M(){e.noClickAnimation||I.value&&Ut(I.value,[{transformOrigin:"center"},{transform:"scale(1.03)"},{transformOrigin:"center"}],{duration:150,easing:$n})}return j(()=>{var G;return r(oe,null,[(G=n.activator)==null?void 0:G.call(n,{isActive:i.value,props:Y({ref:S},C.value,e.activatorProps)}),T.value&&f.value&&r(Nr,{disabled:!s.value,to:s.value},{default:()=>[r("div",Y({class:["v-overlay",{"v-overlay--absolute":e.absolute||e.contained,"v-overlay--active":i.value,"v-overlay--contained":e.contained},u.value,c.value,e.class],style:[b.value,{top:J(N.value)},e.style],ref:k},w,l),[r(Ih,Y({color:m,modelValue:i.value&&!!e.scrim},V.value),null),r(ht,{appear:!0,persisted:!0,transition:e.transition,target:p.value,onAfterLeave:()=>{v(),a("afterLeave")}},{default:()=>{var U;return[ne(r("div",Y({ref:I,class:["v-overlay__content",e.contentClass],style:[x.value,A.value]},_.value,e.contentProps),[(U=n.default)==null?void 0:U.call(n,{isActive:i})]),[[Pe,i.value],[Ze("click-outside"),{handler:E,closeConditional:F,include:()=>[p.value]}]])]}})])]})])}),{activatorEl:p,animateClick:M,contentEl:I,globalTop:g,localTop:y,updateLocation:B}}}),Nl=Symbol("Forwarded refs");function zl(e,t){let n=e;for(;n;){const l=Reflect.getOwnPropertyDescriptor(n,t);if(l)return l;n=Object.getPrototypeOf(n)}}function pt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),l=1;l<t;l++)n[l-1]=arguments[l];return e[Nl]=n,new Proxy(e,{get(a,o){if(Reflect.has(a,o))return Reflect.get(a,o);if(!(typeof o=="symbol"||o.startsWith("__"))){for(const i of n)if(i.value&&Reflect.has(i.value,o)){const s=Reflect.get(i.value,o);return typeof s=="function"?s.bind(i.value):s}}},has(a,o){if(Reflect.has(a,o))return!0;if(typeof o=="symbol"||o.startsWith("__"))return!1;for(const i of n)if(i.value&&Reflect.has(i.value,o))return!0;return!1},set(a,o,i){if(Reflect.has(a,o))return Reflect.set(a,o,i);if(typeof o=="symbol"||o.startsWith("__"))return!1;for(const s of n)if(s.value&&Reflect.has(s.value,o))return Reflect.set(s.value,o,i);return!1},getOwnPropertyDescriptor(a,o){var s;const i=Reflect.getOwnPropertyDescriptor(a,o);if(i)return i;if(!(typeof o=="symbol"||o.startsWith("__"))){for(const u of n){if(!u.value)continue;const c=zl(u.value,o)??("_"in u.value?zl((s=u.value._)==null?void 0:s.setupState,o):void 0);if(c)return c}for(const u of n){const c=u.value&&u.value[Nl];if(!c)continue;const d=c.slice();for(;d.length;){const f=d.shift(),v=zl(f.value,o);if(v)return v;const m=f.value&&f.value[Nl];m&&d.push(...m)}}}}})}const Th=R({id:String,...rt(Yn({closeDelay:250,closeOnContentClick:!0,locationStrategy:"connected",openDelay:300,scrim:!1,scrollStrategy:"reposition",transition:{component:pl}}),["absolute"])},"VMenu"),Il=L()({name:"VMenu",props:Th(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{scopeId:a}=_n(),o=We(),i=h(()=>e.id||`v-menu-${o}`),s=W(),u=Ve(ua,null),c=K(0);$e(ua,{register(){++c.value},unregister(){--c.value},closeParents(){setTimeout(()=>{c.value||(l.value=!1,u==null||u.closeParents())},40)}});async function d(y){var S,C,_;const b=y.relatedTarget,p=y.target;await xe(),l.value&&b!==p&&((S=s.value)!=null&&S.contentEl)&&((C=s.value)!=null&&C.globalTop)&&![document,s.value.contentEl].includes(p)&&!s.value.contentEl.contains(p)&&((_=Ln(s.value.contentEl)[0])==null||_.focus())}Z(l,y=>{y?(u==null||u.register(),document.addEventListener("focusin",d,{once:!0})):(u==null||u.unregister(),document.removeEventListener("focusin",d))});function f(){u==null||u.closeParents()}function v(y){var b,p,S;e.disabled||y.key==="Tab"&&(ki(Ln((b=s.value)==null?void 0:b.contentEl,!1),y.shiftKey?"prev":"next",_=>_.tabIndex>=0)||(l.value=!1,(S=(p=s.value)==null?void 0:p.activatorEl)==null||S.focus()))}function m(y){var p;if(e.disabled)return;const b=(p=s.value)==null?void 0:p.contentEl;b&&l.value?y.key==="ArrowDown"?(y.preventDefault(),ul(b,"next")):y.key==="ArrowUp"&&(y.preventDefault(),ul(b,"prev")):["ArrowDown","ArrowUp"].includes(y.key)&&(l.value=!0,y.preventDefault(),setTimeout(()=>setTimeout(()=>m(y))))}const g=h(()=>Y({"aria-haspopup":"menu","aria-expanded":String(l.value),"aria-owns":i.value,onKeydown:m},e.activatorProps));return j(()=>{const[y]=It.filterProps(e);return r(It,Y({ref:s,class:["v-menu",e.class],style:e.style},y,{modelValue:l.value,"onUpdate:modelValue":b=>l.value=b,absolute:!0,activatorProps:g.value,"onClick:outside":f,onKeydown:v},a),{activator:n.activator,default:function(){for(var b=arguments.length,p=new Array(b),S=0;S<b;S++)p[S]=arguments[S];return r(pe,{root:"VMenu"},{default:()=>{var C;return[(C=n.default)==null?void 0:C.call(n,...p)]}})}})}),pt({id:i,ΨopenChildren:c},s)}});const Ph=R({active:Boolean,max:[Number,String],value:{type:[Number,String],default:0},...q(),...Pt({transition:{component:ja}})},"VCounter"),Tl=L()({name:"VCounter",functional:!0,props:Ph(),setup(e,t){let{slots:n}=t;const l=h(()=>e.max?`${e.value} / ${e.max}`:String(e.value));return j(()=>r(ht,{transition:e.transition},{default:()=>[ne(r("div",{class:["v-counter",e.class],style:e.style},[n.default?n.default({counter:l.value,max:e.max,value:e.value}):l.value]),[[Pe,e.active]])]})),{}}});const Ah=R({floating:Boolean,...q()},"VFieldLabel"),An=L()({name:"VFieldLabel",props:Ah(),setup(e,t){let{slots:n}=t;return j(()=>r(Vn,{class:["v-field-label",{"v-field-label--floating":e.floating},e.class],style:e.style,"aria-hidden":e.floating||void 0},n)),{}}}),Bh=["underlined","outlined","filled","solo","solo-inverted","solo-filled","plain"],Pl=R({appendInnerIcon:se,bgColor:String,clearable:Boolean,clearIcon:{type:se,default:"$clear"},active:Boolean,centerAffix:{type:Boolean,default:void 0},color:String,baseColor:String,dirty:Boolean,disabled:{type:Boolean,default:null},error:Boolean,flat:Boolean,label:String,persistentClear:Boolean,prependInnerIcon:se,reverse:Boolean,singleLine:Boolean,variant:{type:String,default:"filled",validator:e=>Bh.includes(e)},"onClick:clear":St(),"onClick:appendInner":St(),"onClick:prependInner":St(),...q(),...Xa(),...Ie(),...he()},"VField"),Kn=L()({name:"VField",inheritAttrs:!1,props:{id:String,...Cl(),...Pl()},emits:{"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{themeClasses:o}=ye(e),{loaderClasses:i}=Sl(e),{focusClasses:s,isFocused:u,focus:c,blur:d}=Dt(e),{InputIcon:f}=fs(e),{roundedClasses:v}=Ae(e),{rtlClasses:m}=De(),g=h(()=>e.dirty||e.active),y=h(()=>!e.singleLine&&!!(e.label||a.label)),b=We(),p=h(()=>e.id||`input-${b}`),S=h(()=>`${p.value}-messages`),C=W(),_=W(),V=W(),x=h(()=>["plain","underlined"].includes(e.variant)),{backgroundColorClasses:T,backgroundColorStyles:w}=Be(O(e,"bgColor")),{textColorClasses:k,textColorStyles:I}=Ge(h(()=>e.error||e.disabled?void 0:g.value&&u.value?e.color:e.baseColor));Z(g,E=>{if(y.value){const F=C.value.$el,X=_.value.$el;requestAnimationFrame(()=>{const $=Ea(F),N=X.getBoundingClientRect(),M=N.x-$.x,G=N.y-$.y-($.height/2-N.height/2),U=N.width/.75,z=Math.abs(U-$.width)>1?{maxWidth:J(U)}:void 0,ae=getComputedStyle(F),re=getComputedStyle(X),ve=parseFloat(ae.transitionDuration)*1e3||150,ge=parseFloat(re.getPropertyValue("--v-field-label-scale")),D=re.getPropertyValue("color");F.style.visibility="visible",X.style.visibility="hidden",Ut(F,{transform:`translate(${M}px, ${G}px) scale(${ge})`,color:D,...z},{duration:ve,easing:$n,direction:E?"normal":"reverse"}).finished.then(()=>{F.style.removeProperty("visibility"),X.style.removeProperty("visibility")})})}},{flush:"post"});const A=h(()=>({isActive:g,isFocused:u,controlRef:V,blur:d,focus:c}));function B(E){E.target!==document.activeElement&&E.preventDefault()}return j(()=>{var M,G,U;const E=e.variant==="outlined",F=a["prepend-inner"]||e.prependInnerIcon,X=!!(e.clearable||a.clear),$=!!(a["append-inner"]||e.appendInnerIcon||X),N=a.label?a.label({...A.value,label:e.label,props:{for:p.value}}):e.label;return r("div",Y({class:["v-field",{"v-field--active":g.value,"v-field--appended":$,"v-field--center-affix":e.centerAffix??!x.value,"v-field--disabled":e.disabled,"v-field--dirty":e.dirty,"v-field--error":e.error,"v-field--flat":e.flat,"v-field--has-background":!!e.bgColor,"v-field--persistent-clear":e.persistentClear,"v-field--prepended":F,"v-field--reverse":e.reverse,"v-field--single-line":e.singleLine,"v-field--no-label":!N,[`v-field--variant-${e.variant}`]:!0},o.value,T.value,s.value,i.value,v.value,m.value,e.class],style:[w.value,e.style],onClick:B},n),[r("div",{class:"v-field__overlay"},null),r(Za,{name:"v-field",active:!!e.loading,color:e.error?"error":typeof e.loading=="string"?e.loading:e.color},{default:a.loader}),F&&r("div",{key:"prepend",class:"v-field__prepend-inner"},[e.prependInnerIcon&&r(f,{key:"prepend-icon",name:"prependInner"},null),(M=a["prepend-inner"])==null?void 0:M.call(a,A.value)]),r("div",{class:"v-field__field","data-no-activator":""},[["filled","solo","solo-inverted","solo-filled"].includes(e.variant)&&y.value&&r(An,{key:"floating-label",ref:_,class:[k.value],floating:!0,for:p.value,style:I.value},{default:()=>[N]}),r(An,{ref:C,for:p.value},{default:()=>[N]}),(G=a.default)==null?void 0:G.call(a,{...A.value,props:{id:p.value,class:"v-field__input","aria-describedby":S.value},focus:c,blur:d})]),X&&r(Ua,{key:"clear"},{default:()=>[ne(r("div",{class:"v-field__clearable",onMousedown:z=>{z.preventDefault(),z.stopPropagation()}},[a.clear?a.clear():r(f,{name:"clear"},null)]),[[Pe,e.dirty]])]}),$&&r("div",{key:"append",class:"v-field__append-inner"},[(U=a["append-inner"])==null?void 0:U.call(a,A.value),e.appendInnerIcon&&r(f,{key:"append-icon",name:"appendInner"},null)]),r("div",{class:["v-field__outline",k.value],style:I.value},[E&&r(oe,null,[r("div",{class:"v-field__outline__start"},null),y.value&&r("div",{class:"v-field__outline__notch"},[r(An,{ref:_,floating:!0,for:p.value},{default:()=>[N]})]),r("div",{class:"v-field__outline__end"},null)]),x.value&&y.value&&r(An,{ref:_,floating:!0,for:p.value},{default:()=>[N]})])])}),{controlRef:V}}});function lo(e){const t=Object.keys(Kn.props).filter(n=>!Aa(n)&&n!=="class"&&n!=="style");return Kt(e,t)}const Rh=["color","file","time","date","datetime-local","week","month"],Al=R({autofocus:Boolean,counter:[Boolean,Number,String],counterValue:[Number,Function],prefix:String,placeholder:String,persistentPlaceholder:Boolean,persistentCounter:Boolean,suffix:String,role:String,type:{type:String,default:"text"},modelModifiers:Object,...Bt(),...Pl()},"VTextField"),Zt=L()({name:"VTextField",directives:{Intersect:jn},inheritAttrs:!1,props:Al(),emits:{"click:control":e=>!0,"mousedown:control":e=>!0,"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const o=ue(e,"modelValue"),{isFocused:i,focus:s,blur:u}=Dt(e),c=h(()=>typeof e.counterValue=="function"?e.counterValue(o.value):typeof e.counterValue=="number"?e.counterValue:(o.value??"").toString().length),d=h(()=>{if(n.maxlength)return n.maxlength;if(!(!e.counter||typeof e.counter!="number"&&typeof e.counter!="string"))return e.counter}),f=h(()=>["plain","underlined"].includes(e.variant));function v(x,T){var w,k;!e.autofocus||!x||(k=(w=T[0].target)==null?void 0:w.focus)==null||k.call(w)}const m=W(),g=W(),y=W(),b=h(()=>Rh.includes(e.type)||e.persistentPlaceholder||i.value||e.active);function p(){var x;y.value!==document.activeElement&&((x=y.value)==null||x.focus()),i.value||s()}function S(x){l("mousedown:control",x),x.target!==y.value&&(p(),x.preventDefault())}function C(x){p(),l("click:control",x)}function _(x){x.stopPropagation(),p(),xe(()=>{o.value=null,Ra(e["onClick:clear"],x)})}function V(x){var w;const T=x.target;if(o.value=T.value,(w=e.modelModifiers)!=null&&w.trim&&["text","search","password","tel","url"].includes(e.type)){const k=[T.selectionStart,T.selectionEnd];xe(()=>{T.selectionStart=k[0],T.selectionEnd=k[1]})}}return j(()=>{const x=!!(a.counter||e.counter||e.counterValue),T=!!(x||a.details),[w,k]=Qt(n),[{modelValue:I,...A}]=Ne.filterProps(e),[B]=lo(e);return r(Ne,Y({ref:m,modelValue:o.value,"onUpdate:modelValue":E=>o.value=E,class:["v-text-field",{"v-text-field--prefixed":e.prefix,"v-text-field--suffixed":e.suffix,"v-text-field--plain-underlined":["plain","underlined"].includes(e.variant)},e.class],style:e.style},w,A,{centerAffix:!f.value,focused:i.value}),{...a,default:E=>{let{id:F,isDisabled:X,isDirty:$,isReadonly:N,isValid:M}=E;return r(Kn,Y({ref:g,onMousedown:S,onClick:C,"onClick:clear":_,"onClick:prependInner":e["onClick:prependInner"],"onClick:appendInner":e["onClick:appendInner"],role:e.role},B,{id:F.value,active:b.value||$.value,dirty:$.value||e.dirty,disabled:X.value,focused:i.value,error:M.value===!1}),{...a,default:G=>{let{props:{class:U,...z}}=G;const ae=ne(r("input",Y({ref:y,value:o.value,onInput:V,autofocus:e.autofocus,readonly:N.value,disabled:X.value,name:e.name,placeholder:e.placeholder,size:1,type:e.type,onFocus:p,onBlur:u},z,k),null),[[Ze("intersect"),{handler:v},null,{once:!0}]]);return r(oe,null,[e.prefix&&r("span",{class:"v-text-field__prefix"},[r("span",{class:"v-text-field__prefix__text"},[e.prefix])]),a.default?r("div",{class:U,"data-no-activator":""},[a.default(),ae]):zr(ae,{class:U}),e.suffix&&r("span",{class:"v-text-field__suffix"},[r("span",{class:"v-text-field__suffix__text"},[e.suffix])])])}})},details:T?E=>{var F;return r(oe,null,[(F=a.details)==null?void 0:F.call(a,E),x&&r(oe,null,[r("span",null,null),r(Tl,{active:e.persistentCounter||i.value,value:c.value,max:d.value},a.counter)])])}:void 0})}),pt({},m,g,y)}});const Eh=R({renderless:Boolean,...q()},"VVirtualScrollItem"),Lh=L()({name:"VVirtualScrollItem",inheritAttrs:!1,props:Eh(),emits:{"update:height":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{resizeRef:o,contentRect:i}=wt(void 0,"border");Z(()=>{var s;return(s=i.value)==null?void 0:s.height},s=>{s!=null&&l("update:height",s)}),j(()=>{var s,u;return e.renderless?r(oe,null,[(s=a.default)==null?void 0:s.call(a,{itemRef:o})]):r("div",Y({ref:o,class:["v-virtual-scroll__item",e.class],style:e.style},n),[(u=a.default)==null?void 0:u.call(a)])})}}),ei=-1,ti=1,$h=R({itemHeight:{type:[Number,String],default:48}},"virtual");function Mh(e,t,n){const l=K(0),a=K(e.itemHeight),o=h({get:()=>parseInt(a.value??0,10),set(T){a.value=T}}),i=W(),{resizeRef:s,contentRect:u}=wt();tt(()=>{s.value=i.value});const c=en(),d=new Map;let f=Array.from({length:t.value.length});const v=h(()=>{const T=(!u.value||i.value===document.documentElement?c.height.value:u.value.height)-((n==null?void 0:n.value)??0);return Math.ceil(T/o.value*1.7+1)});function m(T,w){o.value=Math.max(o.value,w),f[T]=w,d.set(t.value[T],w)}function g(T){return f.slice(0,T).reduce((w,k)=>w+(k||o.value),0)}function y(T){const w=t.value.length;let k=0,I=0;for(;I<T&&k<w;)I+=f[k++]||o.value;return k-1}let b=0;function p(){if(!i.value||!u.value)return;const T=u.value.height-56,w=i.value.scrollTop,k=w<b?ei:ti,I=y(w+T/2),A=Math.round(v.value/3),B=I-A,E=l.value+A*2-1;k===ei&&I<=E?l.value=Ue(B,0,t.value.length):k===ti&&I>=E&&(l.value=Ue(B,0,t.value.length-v.value)),b=w}function S(T){if(!i.value)return;const w=g(T);i.value.scrollTop=w}const C=h(()=>Math.min(t.value.length,l.value+v.value)),_=h(()=>t.value.slice(l.value,C.value).map((T,w)=>({raw:T,index:w+l.value}))),V=h(()=>g(l.value)),x=h(()=>g(t.value.length)-g(C.value));return Z(()=>t.value.length,()=>{f=xt(t.value.length).map(()=>o.value),d.forEach((T,w)=>{const k=t.value.indexOf(w);k===-1?d.delete(w):f[k]=T})}),{containerRef:i,computedItems:_,itemHeight:o,paddingTop:V,paddingBottom:x,scrollToIndex:S,handleScroll:p,handleItemResize:m}}const Fh=R({items:{type:Array,default:()=>[]},renderless:Boolean,...$h(),...q(),...dt()},"VVirtualScroll"),Bl=L()({name:"VVirtualScroll",props:Fh(),setup(e,t){let{slots:n}=t;const l=Oe("VVirtualScroll"),{dimensionStyles:a}=vt(e),{containerRef:o,handleScroll:i,handleItemResize:s,scrollToIndex:u,paddingTop:c,paddingBottom:d,computedItems:f}=Mh(e,O(e,"items"));return Et(()=>e.renderless,()=>{Je(()=>{var v;o.value=Ma(l.vnode.el,!0),(v=o.value)==null||v.addEventListener("scroll",i)}),Xe(()=>{var v;(v=o.value)==null||v.removeEventListener("scroll",i)})}),j(()=>{const v=f.value.map(m=>r(Lh,{key:m.index,renderless:e.renderless,"onUpdate:height":g=>s(m.index,g)},{default:g=>{var y;return(y=n.default)==null?void 0:y.call(n,{item:m.raw,index:m.index,...g})}}));return e.renderless?r(oe,null,[r("div",{class:"v-virtual-scroll__spacer",style:{paddingTop:J(c.value)}},null),v,r("div",{class:"v-virtual-scroll__spacer",style:{paddingBottom:J(d.value)}},null)]):r("div",{ref:o,class:["v-virtual-scroll",e.class],onScroll:i,style:[a.value,e.style]},[r("div",{class:"v-virtual-scroll__container",style:{paddingTop:J(c.value),paddingBottom:J(d.value)}},[v])])}),{scrollToIndex:u}}});function ao(e,t){const n=K(!1);let l;function a(s){cancelAnimationFrame(l),n.value=!0,l=requestAnimationFrame(()=>{l=requestAnimationFrame(()=>{n.value=!1})})}async function o(){await new Promise(s=>requestAnimationFrame(s)),await new Promise(s=>requestAnimationFrame(s)),await new Promise(s=>requestAnimationFrame(s)),await new Promise(s=>{if(n.value){const u=Z(n,()=>{u(),s()})}else s()})}async function i(s){var d,f;if(s.key==="Tab"&&((d=t.value)==null||d.focus()),!["PageDown","PageUp","Home","End"].includes(s.key))return;const u=(f=e.value)==null?void 0:f.$el;if(!u)return;(s.key==="Home"||s.key==="End")&&u.scrollTo({top:s.key==="Home"?0:u.scrollHeight,behavior:"smooth"}),await o();const c=u.querySelectorAll(":scope > :not(.v-virtual-scroll__spacer)");if(s.key==="PageDown"||s.key==="Home"){const v=u.getBoundingClientRect().top;for(const m of c)if(m.getBoundingClientRect().top>=v){m.focus();break}}else{const v=u.getBoundingClientRect().bottom;for(const m of[...c].reverse())if(m.getBoundingClientRect().bottom<=v){m.focus();break}}}return{onListScroll:a,onListKeydown:i}}const oo=R({chips:Boolean,closableChips:Boolean,closeText:{type:String,default:"$vuetify.close"},openText:{type:String,default:"$vuetify.open"},eager:Boolean,hideNoData:Boolean,hideSelected:Boolean,menu:Boolean,menuIcon:{type:se,default:"$dropdown"},menuProps:{type:Object},multiple:Boolean,noDataText:{type:String,default:"$vuetify.noDataText"},openOnClear:Boolean,itemColor:String,...As({itemChildren:!1})},"Select"),Oh=R({...oo(),...rt(Al({modelValue:null,role:"button"}),["validationValue","dirty","appendInnerIcon"]),...Pt({transition:{component:pl}})},"VSelect"),Dh=L()({name:"VSelect",props:Oh(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,"update:menu":e=>!0},setup(e,t){let{slots:n}=t;const{t:l}=ct(),a=W(),o=W(),i=W(),s=ue(e,"menu"),u=h({get:()=>s.value,set:$=>{var N;s.value&&!$&&((N=o.value)!=null&&N.ΨopenChildren)||(s.value=$)}}),{items:c,transformIn:d,transformOut:f}=to(e),v=ue(e,"modelValue",[],$=>d($===null?[null]:et($)),$=>{const N=f($);return e.multiple?N:N[0]??null}),m=xl(),g=h(()=>v.value.map($=>$.value)),y=K(!1),b=h(()=>u.value?e.closeText:e.openText);let p="",S;const C=h(()=>e.hideSelected?c.value.filter($=>!v.value.some(N=>N===$)):c.value),_=h(()=>e.hideNoData&&!c.value.length||e.readonly||(m==null?void 0:m.isReadonly.value)),V=W(),{onListScroll:x,onListKeydown:T}=ao(V,a);function w($){e.openOnClear&&(u.value=!0)}function k(){_.value||(u.value=!u.value)}function I($){var z,ae;if(!$.key||e.readonly||m!=null&&m.isReadonly.value)return;["Enter"," ","ArrowDown","ArrowUp","Home","End"].includes($.key)&&$.preventDefault(),["Enter","ArrowDown"," "].includes($.key)&&(u.value=!0),["Escape","Tab"].includes($.key)&&(u.value=!1),$.key==="Home"?(z=V.value)==null||z.focus("first"):$.key==="End"&&((ae=V.value)==null||ae.focus("last"));const N=1e3;function M(re){const ve=re.key.length===1,ge=!re.ctrlKey&&!re.metaKey&&!re.altKey;return ve&&ge}if(e.multiple||!M($))return;const G=performance.now();G-S>N&&(p=""),p+=$.key.toLowerCase(),S=G;const U=c.value.find(re=>re.title.toLowerCase().startsWith(p));U!==void 0&&(v.value=[U])}function A($){if(e.multiple){const N=v.value.findIndex(M=>e.valueComparator(M.value,$.value));if(N===-1)v.value=[...v.value,$];else{const M=[...v.value];M.splice(N,1),v.value=M}}else v.value=[$],u.value=!1}function B($){var N;(N=V.value)!=null&&N.$el.contains($.relatedTarget)||(u.value=!1)}function E(){var $;y.value&&(($=a.value)==null||$.focus())}function F($){y.value=!0}function X($){if($==null)v.value=[];else if(dn(a.value,":autofill")||dn(a.value,":-webkit-autofill")){const N=c.value.find(M=>M.title===$);N&&A(N)}else a.value&&(a.value.value="")}return Z(u,()=>{if(!e.hideSelected&&u.value&&v.value.length){const $=C.value.findIndex(N=>v.value.some(M=>e.valueComparator(M.value,N.value)));Ce&&window.requestAnimationFrame(()=>{var N;$>=0&&((N=i.value)==null||N.scrollToIndex($))})}}),j(()=>{const $=!!(e.chips||n.chip),N=!!(!e.hideNoData||C.value.length||n["prepend-item"]||n["append-item"]||n["no-data"]),M=v.value.length>0,[G]=Zt.filterProps(e),U=M||!y.value&&e.label&&!e.persistentPlaceholder?void 0:e.placeholder;return r(Zt,Y({ref:a},G,{modelValue:v.value.map(z=>z.props.value).join(", "),"onUpdate:modelValue":X,focused:y.value,"onUpdate:focused":z=>y.value=z,validationValue:v.externalValue,counterValue:v.value.length,dirty:M,class:["v-select",{"v-select--active-menu":u.value,"v-select--chips":!!e.chips,[`v-select--${e.multiple?"multiple":"single"}`]:!0,"v-select--selected":v.value.length,"v-select--selection-slot":!!n.selection},e.class],style:e.style,inputmode:"none",placeholder:U,"onClick:clear":w,"onMousedown:control":k,onBlur:B,onKeydown:I,"aria-label":l(b.value),title:l(b.value)}),{...n,default:()=>r(oe,null,[r(Il,Y({ref:o,modelValue:u.value,"onUpdate:modelValue":z=>u.value=z,activator:"parent",contentClass:"v-select__content",disabled:_.value,eager:e.eager,maxHeight:310,openOnClick:!1,closeOnContentClick:!1,transition:e.transition,onAfterLeave:E},e.menuProps),{default:()=>[N&&r(Vl,{ref:V,selected:g.value,selectStrategy:e.multiple?"independent":"single-independent",onMousedown:z=>z.preventDefault(),onKeydown:T,onFocusin:F,onScrollPassive:x,tabindex:"-1",color:e.itemColor??e.color},{default:()=>{var z,ae,re;return[(z=n["prepend-item"])==null?void 0:z.call(n),!C.value.length&&!e.hideNoData&&(((ae=n["no-data"])==null?void 0:ae.call(n))??r(_t,{title:l(e.noDataText)},null)),r(Bl,{ref:i,renderless:!0,items:C.value},{default:ve=>{var H;let{item:ge,index:D,itemRef:me}=ve;const Q=Y(ge.props,{ref:me,key:D,onClick:()=>A(ge)});return((H=n.item)==null?void 0:H.call(n,{item:ge,index:D,props:Q}))??r(_t,Q,{prepend:le=>{let{isSelected:be}=le;return r(oe,null,[e.multiple&&!e.hideSelected?r(mn,{key:ge.value,modelValue:be,ripple:!1,tabindex:"-1"},null):void 0,ge.props.prependIcon&&r(Se,{icon:ge.props.prependIcon},null)])}})}}),(re=n["append-item"])==null?void 0:re.call(n)]}})]}),v.value.map((z,ae)=>{var ge;function re(D){D.stopPropagation(),D.preventDefault(),A(z)}const ve={"onClick:close":re,onMousedown(D){D.preventDefault(),D.stopPropagation()},modelValue:!0,"onUpdate:modelValue":void 0};return r("div",{key:z.value,class:"v-select__selection"},[$?n.chip?r(pe,{key:"chip-defaults",defaults:{VChip:{closable:e.closableChips,size:"small",text:z.title}}},{default:()=>{var D;return[(D=n.chip)==null?void 0:D.call(n,{item:z,index:ae,props:ve})]}}):r(Wn,Y({key:"chip",closable:e.closableChips,size:"small",text:z.title,disabled:z.props.disabled},ve),null):((ge=n.selection)==null?void 0:ge.call(n,{item:z,index:ae}))??r("span",{class:"v-select__selection-text"},[z.title,e.multiple&&ae<v.value.length-1&&r("span",{class:"v-select__selection-comma"},[gl(",")])])])})]),"append-inner":function(){var ve;for(var z=arguments.length,ae=new Array(z),re=0;re<z;re++)ae[re]=arguments[re];return r(oe,null,[(ve=n["append-inner"])==null?void 0:ve.call(n,...ae),e.menuIcon?r(Se,{class:"v-select__menu-icon",icon:e.menuIcon},null):void 0])}})}),pt({isFocused:y,menu:u,select:A},a)}}),Nh=(e,t,n)=>e==null||t==null?-1:e.toString().toLocaleLowerCase().indexOf(t.toString().toLocaleLowerCase()),zs=R({customFilter:Function,customKeyFilter:Object,filterKeys:[Array,String],filterMode:{type:String,default:"intersection"},noFilter:Boolean},"filter");function zh(e,t,n){var s;const l=[],a=(n==null?void 0:n.default)??Nh,o=n!=null&&n.filterKeys?et(n.filterKeys):!1,i=Object.keys((n==null?void 0:n.customKeyFilter)??{}).length;if(!(e!=null&&e.length))return l;e:for(let u=0;u<e.length;u++){const[c,d=c]=et(e[u]),f={},v={};let m=-1;if(t&&!(n!=null&&n.noFilter)){if(typeof c=="object"){const b=o||Object.keys(d);for(const p of b){const S=kt(d,p,d),C=(s=n==null?void 0:n.customKeyFilter)==null?void 0:s[p];if(m=C?C(S,t,c):a(S,t,c),m!==-1&&m!==!1)C?f[p]=m:v[p]=m;else if((n==null?void 0:n.filterMode)==="every")continue e}}else m=a(c,t,c),m!==-1&&m!==!1&&(v.title=m);const g=Object.keys(v).length,y=Object.keys(f).length;if(!g&&!y||(n==null?void 0:n.filterMode)==="union"&&y!==i&&!g||(n==null?void 0:n.filterMode)==="intersection"&&(y!==i||!g))continue}l.push({index:u,matches:{...v,...f}})}return l}function Hs(e,t,n,l){const a=W([]),o=W(new Map),i=h(()=>l!=null&&l.transform?ot(t).map(u=>[u,l.transform(u)]):ot(t));tt(()=>{const u=typeof n=="function"?n():ot(n),c=typeof u!="string"&&typeof u!="number"?"":String(u),d=zh(i.value,c,{customKeyFilter:e.customKeyFilter,default:e.customFilter,filterKeys:e.filterKeys,filterMode:e.filterMode,noFilter:e.noFilter}),f=ot(t),v=[],m=new Map;d.forEach(g=>{let{index:y,matches:b}=g;const p=f[y];v.push(p),m.set(p.value,b)}),a.value=v,o.value=m});function s(u){return o.value.get(u.value)}return{filteredItems:a,filteredMatches:o,getMatches:s}}function Hh(e,t,n){if(t==null)return e;if(Array.isArray(t))throw new Error("Multiple matches is not implemented");return typeof t=="number"&&~t?r(oe,null,[r("span",{class:"v-autocomplete__unmask"},[e.substr(0,t)]),r("span",{class:"v-autocomplete__mask"},[e.substr(t,n)]),r("span",{class:"v-autocomplete__unmask"},[e.substr(t+n)])]):e}const jh=R({autoSelectFirst:{type:[Boolean,String]},search:String,...zs({filterKeys:["title"]}),...oo(),...rt(Al({modelValue:null,role:"combobox"}),["validationValue","dirty","appendInnerIcon"]),...Pt({transition:!1})},"VAutocomplete"),Uh=L()({name:"VAutocomplete",props:jh(),emits:{"update:focused":e=>!0,"update:search":e=>!0,"update:modelValue":e=>!0,"update:menu":e=>!0},setup(e,t){let{slots:n}=t;const{t:l}=ct(),a=W(),o=K(!1),i=K(!0),s=K(!1),u=W(),c=W(),d=ue(e,"menu"),f=h({get:()=>d.value,set:Q=>{var H;d.value&&!Q&&((H=u.value)!=null&&H.ΨopenChildren)||(d.value=Q)}}),v=K(-1),m=h(()=>{var Q;return(Q=a.value)==null?void 0:Q.color}),g=h(()=>f.value?e.closeText:e.openText),{items:y,transformIn:b,transformOut:p}=to(e),{textColorClasses:S,textColorStyles:C}=Ge(m),_=ue(e,"search",""),V=ue(e,"modelValue",[],Q=>b(Q===null?[null]:et(Q)),Q=>{const H=p(Q);return e.multiple?H:H[0]??null}),x=xl(),{filteredItems:T,getMatches:w}=Hs(e,y,()=>i.value?"":_.value),k=h(()=>e.hideSelected?T.value.filter(Q=>!V.value.some(H=>H.value===Q.value)):T.value),I=h(()=>V.value.map(Q=>Q.props.value)),A=h(()=>{var H;return(e.autoSelectFirst===!0||e.autoSelectFirst==="exact"&&_.value===((H=k.value[0])==null?void 0:H.title))&&k.value.length>0&&!i.value&&!s.value}),B=h(()=>e.hideNoData&&!y.value.length||e.readonly||(x==null?void 0:x.isReadonly.value)),E=W(),{onListScroll:F,onListKeydown:X}=ao(E,a);function $(Q){e.openOnClear&&(f.value=!0),_.value=""}function N(){B.value||(f.value=!0)}function M(Q){B.value||(o.value&&(Q.preventDefault(),Q.stopPropagation()),f.value=!f.value)}function G(Q){var be,de,ie;if(e.readonly||x!=null&&x.isReadonly.value)return;const H=a.value.selectionStart,le=V.value.length;if((v.value>-1||["Enter","ArrowDown","ArrowUp"].includes(Q.key))&&Q.preventDefault(),["Enter","ArrowDown"].includes(Q.key)&&(f.value=!0),["Escape"].includes(Q.key)&&(f.value=!1),A.value&&["Enter","Tab"].includes(Q.key)&&me(k.value[0]),Q.key==="ArrowDown"&&A.value&&((be=E.value)==null||be.focus("next")),!!e.multiple){if(["Backspace","Delete"].includes(Q.key)){if(v.value<0){Q.key==="Backspace"&&!_.value&&(v.value=le-1);return}const fe=v.value,Te=V.value[v.value];Te&&!Te.props.disabled&&me(Te),v.value=fe>=le-1?le-2:fe}if(Q.key==="ArrowLeft"){if(v.value<0&&H>0)return;const fe=v.value>-1?v.value-1:le-1;V.value[fe]?v.value=fe:(v.value=-1,a.value.setSelectionRange((de=_.value)==null?void 0:de.length,(ie=_.value)==null?void 0:ie.length))}if(Q.key==="ArrowRight"){if(v.value<0)return;const fe=v.value+1;V.value[fe]?v.value=fe:(v.value=-1,a.value.setSelectionRange(0,0))}}}function U(Q){_.value=Q.target.value}function z(Q){if(dn(a.value,":autofill")||dn(a.value,":-webkit-autofill")){const H=y.value.find(le=>le.title===Q.target.value);H&&me(H)}}function ae(){var Q;o.value&&(i.value=!0,(Q=a.value)==null||Q.focus())}function re(Q){o.value=!0,setTimeout(()=>{s.value=!0})}function ve(Q){s.value=!1}function ge(Q){(Q==null||Q===""&&!e.multiple)&&(V.value=[])}const D=K(!1);function me(Q){if(e.multiple){const H=V.value.findIndex(le=>e.valueComparator(le.value,Q.value));if(H===-1)V.value=[...V.value,Q];else{const le=[...V.value];le.splice(H,1),V.value=le}}else V.value=[Q],D.value=!0,_.value=Q.title,f.value=!1,i.value=!0,xe(()=>D.value=!1)}return Z(o,(Q,H)=>{var le;Q!==H&&(Q?(D.value=!0,_.value=e.multiple?"":String(((le=V.value.at(-1))==null?void 0:le.props.title)??""),i.value=!0,xe(()=>D.value=!1)):(!e.multiple&&!_.value?V.value=[]:A.value&&!s.value&&!V.value.some(be=>{let{value:de}=be;return de===k.value[0].value})&&me(k.value[0]),f.value=!1,_.value="",v.value=-1))}),Z(_,Q=>{!o.value||D.value||(Q&&(f.value=!0),i.value=!Q)}),Z(f,()=>{if(!e.hideSelected&&f.value&&V.value.length){const Q=k.value.findIndex(H=>V.value.some(le=>H.value===le.value));Ce&&window.requestAnimationFrame(()=>{var H;Q>=0&&((H=c.value)==null||H.scrollToIndex(Q))})}}),j(()=>{const Q=!!(e.chips||n.chip),H=!!(!e.hideNoData||k.value.length||n["prepend-item"]||n["append-item"]||n["no-data"]),le=V.value.length>0,[be]=Zt.filterProps(e);return r(Zt,Y({ref:a},be,{modelValue:_.value,"onUpdate:modelValue":ge,focused:o.value,"onUpdate:focused":de=>o.value=de,validationValue:V.externalValue,counterValue:V.value.length,dirty:le,onInput:U,onChange:z,class:["v-autocomplete",`v-autocomplete--${e.multiple?"multiple":"single"}`,{"v-autocomplete--active-menu":f.value,"v-autocomplete--chips":!!e.chips,"v-autocomplete--selection-slot":!!n.selection,"v-autocomplete--selecting-index":v.value>-1},e.class],style:e.style,readonly:e.readonly,placeholder:le?void 0:e.placeholder,"onClick:clear":$,"onMousedown:control":N,onKeydown:G}),{...n,default:()=>r(oe,null,[r(Il,Y({ref:u,modelValue:f.value,"onUpdate:modelValue":de=>f.value=de,activator:"parent",contentClass:"v-autocomplete__content",disabled:B.value,eager:e.eager,maxHeight:310,openOnClick:!1,closeOnContentClick:!1,transition:e.transition,onAfterLeave:ae},e.menuProps),{default:()=>[H&&r(Vl,{ref:E,selected:I.value,selectStrategy:e.multiple?"independent":"single-independent",onMousedown:de=>de.preventDefault(),onKeydown:X,onFocusin:re,onFocusout:ve,onScrollPassive:F,tabindex:"-1",color:e.itemColor??e.color},{default:()=>{var de,ie,fe;return[(de=n["prepend-item"])==null?void 0:de.call(n),!k.value.length&&!e.hideNoData&&(((ie=n["no-data"])==null?void 0:ie.call(n))??r(_t,{title:l(e.noDataText)},null)),r(Bl,{ref:c,renderless:!0,items:k.value},{default:Te=>{var In;let{item:Re,index:_e,itemRef:qe}=Te;const Xn=Y(Re.props,{ref:qe,key:_e,active:A.value&&_e===0?!0:void 0,onClick:()=>me(Re)});return((In=n.item)==null?void 0:In.call(n,{item:Re,index:_e,props:Xn}))??r(_t,Xn,{prepend:Nt=>{let{isSelected:Ct}=Nt;return r(oe,null,[e.multiple&&!e.hideSelected?r(mn,{key:Re.value,modelValue:Ct,ripple:!1,tabindex:"-1"},null):void 0,Re.props.prependIcon&&r(Se,{icon:Re.props.prependIcon},null)])},title:()=>{var Nt,Ct;return i.value?Re.title:Hh(Re.title,(Nt=w(Re))==null?void 0:Nt.title,((Ct=_.value)==null?void 0:Ct.length)??0)}})}}),(fe=n["append-item"])==null?void 0:fe.call(n)]}})]}),V.value.map((de,ie)=>{var Re;function fe(_e){_e.stopPropagation(),_e.preventDefault(),me(de)}const Te={"onClick:close":fe,onMousedown(_e){_e.preventDefault(),_e.stopPropagation()},modelValue:!0,"onUpdate:modelValue":void 0};return r("div",{key:de.value,class:["v-autocomplete__selection",ie===v.value&&["v-autocomplete__selection--selected",S.value]],style:ie===v.value?C.value:{}},[Q?n.chip?r(pe,{key:"chip-defaults",defaults:{VChip:{closable:e.closableChips,size:"small",text:de.title}}},{default:()=>{var _e;return[(_e=n.chip)==null?void 0:_e.call(n,{item:de,index:ie,props:Te})]}}):r(Wn,Y({key:"chip",closable:e.closableChips,size:"small",text:de.title,disabled:de.props.disabled},Te),null):((Re=n.selection)==null?void 0:Re.call(n,{item:de,index:ie}))??r("span",{class:"v-autocomplete__selection-text"},[de.title,e.multiple&&ie<V.value.length-1&&r("span",{class:"v-autocomplete__selection-comma"},[gl(",")])])])})]),"append-inner":function(){var Te;for(var de=arguments.length,ie=new Array(de),fe=0;fe<de;fe++)ie[fe]=arguments[fe];return r(oe,null,[(Te=n["append-inner"])==null?void 0:Te.call(n,...ie),e.menuIcon?r(Se,{class:"v-autocomplete__menu-icon",icon:e.menuIcon,onMousedown:M,onClick:Si,"aria-label":l(g.value),title:l(g.value)},null):void 0])}})}),pt({isFocused:o,isPristine:i,menu:f,search:_,filteredItems:T,select:me},a)}});const Gh=R({bordered:Boolean,color:String,content:[Number,String],dot:Boolean,floating:Boolean,icon:se,inline:Boolean,label:{type:String,default:"$vuetify.badge"},max:[Number,String],modelValue:{type:Boolean,default:!0},offsetX:[Number,String],offsetY:[Number,String],textColor:String,...q(),...Mt({location:"top end"}),...Ie(),...ce(),...he(),...Pt({transition:"scale-rotate-transition"})},"VBadge"),Wh=L()({name:"VBadge",inheritAttrs:!1,props:Gh(),setup(e,t){const{backgroundColorClasses:n,backgroundColorStyles:l}=Be(O(e,"color")),{roundedClasses:a}=Ae(e),{t:o}=ct(),{textColorClasses:i,textColorStyles:s}=Ge(O(e,"textColor")),{themeClasses:u}=Oi(),{locationStyles:c}=Ft(e,!0,d=>(e.floating?e.dot?2:4:e.dot?8:12)+(["top","bottom"].includes(d)?+(e.offsetY??0):["left","right"].includes(d)?+(e.offsetX??0):0));return j(()=>{const d=Number(e.content),f=!e.max||isNaN(d)?e.content:d<=+e.max?d:`${e.max}+`,[v,m]=Kt(t.attrs,["aria-atomic","aria-label","aria-live","role","title"]);return r(e.tag,Y({class:["v-badge",{"v-badge--bordered":e.bordered,"v-badge--dot":e.dot,"v-badge--floating":e.floating,"v-badge--inline":e.inline},e.class]},m,{style:e.style}),{default:()=>{var g,y;return[r("div",{class:"v-badge__wrapper"},[(y=(g=t.slots).default)==null?void 0:y.call(g),r(ht,{transition:e.transition},{default:()=>{var b,p;return[ne(r("span",Y({class:["v-badge__badge",u.value,n.value,a.value,i.value],style:[l.value,s.value,e.inline?{}:c.value],"aria-atomic":"true","aria-label":o(e.label,d),"aria-live":"polite",role:"status"},v),[e.dot?void 0:t.slots.badge?(p=(b=t.slots).badge)==null?void 0:p.call(b):e.icon?r(Se,{icon:e.icon},null):f]),[[Pe,e.modelValue]])]}})])]}})}),{}}});const Yh=R({color:String,density:String,...q()},"VBannerActions"),js=L()({name:"VBannerActions",props:Yh(),setup(e,t){let{slots:n}=t;return Ee({VBtn:{color:e.color,density:e.density,variant:"text"}}),j(()=>{var l;return r("div",{class:["v-banner-actions",e.class],style:e.style},[(l=n.default)==null?void 0:l.call(n)])}),{}}}),Us=bt("v-banner-text"),Kh=R({avatar:String,color:String,icon:se,lines:String,stacked:Boolean,sticky:Boolean,text:String,...at(),...q(),...Fe(),...dt(),...Me(),...Mt(),...Cn(),...Ie(),...ce(),...he()},"VBanner"),qh=L()({name:"VBanner",props:Kh(),setup(e,t){let{slots:n}=t;const{borderClasses:l}=ft(e),{densityClasses:a}=Ye(e),{mobile:o}=en(),{dimensionStyles:i}=vt(e),{elevationClasses:s}=He(e),{locationStyles:u}=Ft(e),{positionClasses:c}=xn(e),{roundedClasses:d}=Ae(e),{themeClasses:f}=ye(e),v=O(e,"color"),m=O(e,"density");Ee({VBannerActions:{color:v,density:m}}),j(()=>{const g=!!(e.text||n.text),y=!!(e.avatar||e.icon),b=!!(y||n.prepend);return r(e.tag,{class:["v-banner",{"v-banner--stacked":e.stacked||o.value,"v-banner--sticky":e.sticky,[`v-banner--${e.lines}-line`]:!!e.lines},l.value,a.value,s.value,c.value,d.value,f.value,e.class],style:[i.value,u.value,e.style],role:"banner"},{default:()=>{var p;return[b&&r("div",{key:"prepend",class:"v-banner__prepend"},[n.prepend?r(pe,{key:"prepend-defaults",disabled:!y,defaults:{VAvatar:{color:v.value,density:m.value,icon:e.icon,image:e.avatar}}},n.prepend):r(Lt,{key:"prepend-avatar",color:v.value,density:m.value,icon:e.icon,image:e.avatar},null)]),r("div",{class:"v-banner__content"},[g&&r(Us,{key:"text"},{default:()=>{var S;return[((S=n.text)==null?void 0:S.call(n))??e.text]}}),(p=n.default)==null?void 0:p.call(n)]),n.actions&&r(js,{key:"actions"},n.actions)]}})})}});const Xh=R({bgColor:String,color:String,grow:Boolean,mode:{type:String,validator:e=>!e||["horizontal","shift"].includes(e)},height:{type:[Number,String],default:56},active:{type:Boolean,default:!0},...at(),...q(),...Fe(),...Me(),...Ie(),...yn({name:"bottom-navigation"}),...ce({tag:"header"}),...pn({modelValue:!0,selectedClass:"v-btn--selected"}),...he()},"VBottomNavigation"),Zh=L()({name:"VBottomNavigation",props:Xh(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=Oi(),{borderClasses:a}=ft(e),{backgroundColorClasses:o,backgroundColorStyles:i}=Be(O(e,"bgColor")),{densityClasses:s}=Ye(e),{elevationClasses:u}=He(e),{roundedClasses:c}=Ae(e),{ssrBootStyles:d}=tn(),f=h(()=>Number(e.height)-(e.density==="comfortable"?8:0)-(e.density==="compact"?16:0)),v=O(e,"active"),{layoutItemStyles:m}=bn({id:e.name,order:h(()=>parseInt(e.order,10)),position:h(()=>"bottom"),layoutSize:h(()=>v.value?f.value:0),elementSize:f,active:v,absolute:O(e,"absolute")});return an(e,Wa),Ee({VBtn:{color:O(e,"color"),density:O(e,"density"),stacked:h(()=>e.mode!=="horizontal"),variant:"text"}},{scoped:!0}),j(()=>r(e.tag,{class:["v-bottom-navigation",{"v-bottom-navigation--active":v.value,"v-bottom-navigation--grow":e.grow,"v-bottom-navigation--shift":e.mode==="shift"},l.value,o.value,a.value,s.value,u.value,c.value,e.class],style:[i.value,m.value,{height:J(f.value),transform:`translateY(${J(v.value?0:100,"%")})`},d.value,e.style]},{default:()=>[n.default&&r("div",{class:"v-bottom-navigation__content"},[n.default()])]})),{}}});const Jh=R({divider:[Number,String],...q()},"VBreadcrumbsDivider"),Gs=L()({name:"VBreadcrumbsDivider",props:Jh(),setup(e,t){let{slots:n}=t;return j(()=>{var l;return r("li",{class:["v-breadcrumbs-divider",e.class],style:e.style},[((l=n==null?void 0:n.default)==null?void 0:l.call(n))??e.divider])}),{}}}),Qh=R({active:Boolean,activeClass:String,activeColor:String,color:String,disabled:Boolean,title:String,...q(),...Gn(),...ce({tag:"li"})},"VBreadcrumbsItem"),Ws=L()({name:"VBreadcrumbsItem",props:Qh(),setup(e,t){let{slots:n,attrs:l}=t;const a=Un(e,l),o=h(()=>{var c;return e.active||((c=a.isActive)==null?void 0:c.value)}),i=h(()=>o.value?e.activeColor:e.color),{textColorClasses:s,textColorStyles:u}=Ge(i);return j(()=>r(e.tag,{class:["v-breadcrumbs-item",{"v-breadcrumbs-item--active":o.value,"v-breadcrumbs-item--disabled":e.disabled,[`${e.activeClass}`]:o.value&&e.activeClass},s.value,e.class],style:[u.value,e.style],"aria-current":o.value?"page":void 0},{default:()=>{var c,d;return[a.isLink.value?r("a",{class:"v-breadcrumbs-item--link",href:a.href.value,"aria-current":o.value?"page":void 0,onClick:a.navigate},[((d=n.default)==null?void 0:d.call(n))??e.title]):((c=n.default)==null?void 0:c.call(n))??e.title]}})),{}}}),ey=R({activeClass:String,activeColor:String,bgColor:String,color:String,disabled:Boolean,divider:{type:String,default:"/"},icon:se,items:{type:Array,default:()=>[]},...q(),...Fe(),...Ie(),...ce({tag:"ul"})},"VBreadcrumbs"),ty=L()({name:"VBreadcrumbs",props:ey(),setup(e,t){let{slots:n}=t;const{backgroundColorClasses:l,backgroundColorStyles:a}=Be(O(e,"bgColor")),{densityClasses:o}=Ye(e),{roundedClasses:i}=Ae(e);Ee({VBreadcrumbsDivider:{divider:O(e,"divider")},VBreadcrumbsItem:{activeClass:O(e,"activeClass"),activeColor:O(e,"activeColor"),color:O(e,"color"),disabled:O(e,"disabled")}});const s=h(()=>e.items.map(u=>typeof u=="string"?{item:{title:u},raw:u}:{item:u,raw:u}));return j(()=>{const u=!!(n.prepend||e.icon);return r(e.tag,{class:["v-breadcrumbs",l.value,o.value,i.value,e.class],style:[a.value,e.style]},{default:()=>{var c;return[u&&r("li",{key:"prepend",class:"v-breadcrumbs__prepend"},[n.prepend?r(pe,{key:"prepend-defaults",disabled:!e.icon,defaults:{VIcon:{icon:e.icon,start:!0}}},n.prepend):r(Se,{key:"prepend-icon",start:!0,icon:e.icon},null)]),s.value.map((d,f,v)=>{let{item:m,raw:g}=d;return r(oe,null,[r(Ws,Y({key:m.title,disabled:f>=v.length-1},m),{default:n.title?()=>{var y;return(y=n.title)==null?void 0:y.call(n,{item:g,index:f})}:void 0}),f<v.length-1&&r(Gs,null,{default:n.divider?()=>{var y;return(y=n.divider)==null?void 0:y.call(n,{item:g,index:f})}:void 0})])}),(c=n.default)==null?void 0:c.call(n)]}})}),{}}});const Ys=L()({name:"VCardActions",props:q(),setup(e,t){let{slots:n}=t;return Ee({VBtn:{variant:"text"}}),j(()=>{var l;return r("div",{class:["v-card-actions",e.class],style:e.style},[(l=n.default)==null?void 0:l.call(n)])}),{}}}),Ks=bt("v-card-subtitle"),qs=bt("v-card-title"),ny=R({appendAvatar:String,appendIcon:se,prependAvatar:String,prependIcon:se,subtitle:String,title:String,...q(),...Fe()},"VCardItem"),Xs=L()({name:"VCardItem",props:ny(),setup(e,t){let{slots:n}=t;return j(()=>{var c;const l=!!(e.prependAvatar||e.prependIcon),a=!!(l||n.prepend),o=!!(e.appendAvatar||e.appendIcon),i=!!(o||n.append),s=!!(e.title||n.title),u=!!(e.subtitle||n.subtitle);return r("div",{class:["v-card-item",e.class],style:e.style},[a&&r("div",{key:"prepend",class:"v-card-item__prepend"},[n.prepend?r(pe,{key:"prepend-defaults",disabled:!l,defaults:{VAvatar:{density:e.density,icon:e.prependIcon,image:e.prependAvatar}}},n.prepend):l&&r(Lt,{key:"prepend-avatar",density:e.density,icon:e.prependIcon,image:e.prependAvatar},null)]),r("div",{class:"v-card-item__content"},[s&&r(qs,{key:"title"},{default:()=>{var d;return[((d=n.title)==null?void 0:d.call(n))??e.title]}}),u&&r(Ks,{key:"subtitle"},{default:()=>{var d;return[((d=n.subtitle)==null?void 0:d.call(n))??e.subtitle]}}),(c=n.default)==null?void 0:c.call(n)]),i&&r("div",{key:"append",class:"v-card-item__append"},[n.append?r(pe,{key:"append-defaults",disabled:!o,defaults:{VAvatar:{density:e.density,icon:e.appendIcon,image:e.appendAvatar}}},n.append):o&&r(Lt,{key:"append-avatar",density:e.density,icon:e.appendIcon,image:e.appendAvatar},null)])])}),{}}}),Zs=bt("v-card-text"),ly=R({appendAvatar:String,appendIcon:se,disabled:Boolean,flat:Boolean,hover:Boolean,image:String,link:{type:Boolean,default:void 0},prependAvatar:String,prependIcon:se,ripple:{type:[Boolean,Object],default:!0},subtitle:String,text:String,title:String,...at(),...q(),...Fe(),...dt(),...Me(),...Xa(),...Mt(),...Cn(),...Ie(),...Gn(),...ce(),...he(),...mt({variant:"elevated"})},"VCard"),ay=L()({name:"VCard",directives:{Ripple:Ot},props:ly(),setup(e,t){let{attrs:n,slots:l}=t;const{themeClasses:a}=ye(e),{borderClasses:o}=ft(e),{colorClasses:i,colorStyles:s,variantClasses:u}=ln(e),{densityClasses:c}=Ye(e),{dimensionStyles:d}=vt(e),{elevationClasses:f}=He(e),{loaderClasses:v}=Sl(e),{locationStyles:m}=Ft(e),{positionClasses:g}=xn(e),{roundedClasses:y}=Ae(e),b=Un(e,n),p=h(()=>e.link!==!1&&b.isLink.value),S=h(()=>!e.disabled&&e.link!==!1&&(e.link||b.isClickable.value));return j(()=>{const C=p.value?"a":e.tag,_=!!(l.title||e.title),V=!!(l.subtitle||e.subtitle),x=_||V,T=!!(l.append||e.appendAvatar||e.appendIcon),w=!!(l.prepend||e.prependAvatar||e.prependIcon),k=!!(l.image||e.image),I=x||w||T,A=!!(l.text||e.text);return ne(r(C,{class:["v-card",{"v-card--disabled":e.disabled,"v-card--flat":e.flat,"v-card--hover":e.hover&&!(e.disabled||e.flat),"v-card--link":S.value},a.value,o.value,i.value,c.value,f.value,v.value,g.value,y.value,u.value,e.class],style:[s.value,d.value,m.value,e.style],href:b.href.value,onClick:S.value&&b.navigate,tabindex:e.disabled?-1:void 0},{default:()=>{var B;return[k&&r("div",{key:"image",class:"v-card__image"},[l.image?r(pe,{key:"image-defaults",disabled:!e.image,defaults:{VImg:{cover:!0,src:e.image}}},l.image):r(qt,{key:"image-img",cover:!0,src:e.image},null)]),r(Za,{name:"v-card",active:!!e.loading,color:typeof e.loading=="boolean"?void 0:e.loading},{default:l.loader}),I&&r(Xs,{key:"item",prependAvatar:e.prependAvatar,prependIcon:e.prependIcon,title:e.title,subtitle:e.subtitle,appendAvatar:e.appendAvatar,appendIcon:e.appendIcon},{default:l.item,prepend:l.prepend,title:l.title,subtitle:l.subtitle,append:l.append}),A&&r(Zs,{key:"text"},{default:()=>{var E;return[((E=l.text)==null?void 0:E.call(l))??e.text]}}),(B=l.default)==null?void 0:B.call(l),l.actions&&r(Ys,null,{default:l.actions}),nn(S.value,"v-card")]}}),[[Ze("ripple"),S.value&&e.ripple]])}),{}}});const oy=e=>{const{touchstartX:t,touchendX:n,touchstartY:l,touchendY:a}=e,o=.5,i=16;e.offsetX=n-t,e.offsetY=a-l,Math.abs(e.offsetY)<o*Math.abs(e.offsetX)&&(e.left&&n<t-i&&e.left(e),e.right&&n>t+i&&e.right(e)),Math.abs(e.offsetX)<o*Math.abs(e.offsetY)&&(e.up&&a<l-i&&e.up(e),e.down&&a>l+i&&e.down(e))};function iy(e,t){var l;const n=e.changedTouches[0];t.touchstartX=n.clientX,t.touchstartY=n.clientY,(l=t.start)==null||l.call(t,{originalEvent:e,...t})}function sy(e,t){var l;const n=e.changedTouches[0];t.touchendX=n.clientX,t.touchendY=n.clientY,(l=t.end)==null||l.call(t,{originalEvent:e,...t}),oy(t)}function ry(e,t){var l;const n=e.changedTouches[0];t.touchmoveX=n.clientX,t.touchmoveY=n.clientY,(l=t.move)==null||l.call(t,{originalEvent:e,...t})}function uy(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const t={touchstartX:0,touchstartY:0,touchendX:0,touchendY:0,touchmoveX:0,touchmoveY:0,offsetX:0,offsetY:0,left:e.left,right:e.right,up:e.up,down:e.down,start:e.start,move:e.move,end:e.end};return{touchstart:n=>iy(n,t),touchend:n=>sy(n,t),touchmove:n=>ry(n,t)}}function cy(e,t){var s;const n=t.value,l=n!=null&&n.parent?e.parentElement:e,a=(n==null?void 0:n.options)??{passive:!0},o=(s=t.instance)==null?void 0:s.$.uid;if(!l||!o)return;const i=uy(t.value);l._touchHandlers=l._touchHandlers??Object.create(null),l._touchHandlers[o]=i,hi(i).forEach(u=>{l.addEventListener(u,i[u],a)})}function dy(e,t){var o,i;const n=(o=t.value)!=null&&o.parent?e.parentElement:e,l=(i=t.instance)==null?void 0:i.$.uid;if(!(n!=null&&n._touchHandlers)||!l)return;const a=n._touchHandlers[l];hi(a).forEach(s=>{n.removeEventListener(s,a[s])}),delete n._touchHandlers[l]}const io={mounted:cy,unmounted:dy},Js=Symbol.for("vuetify:v-window"),Qs=Symbol.for("vuetify:v-window-group"),er=R({continuous:Boolean,nextIcon:{type:[Boolean,String,Function,Object],default:"$next"},prevIcon:{type:[Boolean,String,Function,Object],default:"$prev"},reverse:Boolean,showArrows:{type:[Boolean,String],validator:e=>typeof e=="boolean"||e==="hover"},touch:{type:[Object,Boolean],default:void 0},direction:{type:String,default:"horizontal"},modelValue:null,disabled:Boolean,selectedClass:{type:String,default:"v-window-item--active"},mandatory:{type:[Boolean,String],default:"force"},...q(),...ce(),...he()},"VWindow"),ca=L()({name:"VWindow",directives:{Touch:io},props:er(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{isRtl:a}=De(),{t:o}=ct(),i=an(e,Qs),s=W(),u=h(()=>a.value?!e.reverse:e.reverse),c=K(!1),d=h(()=>{const _=e.direction==="vertical"?"y":"x",x=(u.value?!c.value:c.value)?"-reverse":"";return`v-window-${_}${x}-transition`}),f=K(0),v=W(void 0),m=h(()=>i.items.value.findIndex(_=>i.selected.value.includes(_.id)));Z(m,(_,V)=>{const x=i.items.value.length,T=x-1;x<=2?c.value=_<V:_===T&&V===0?c.value=!0:_===0&&V===T?c.value=!1:c.value=_<V}),$e(Js,{transition:d,isReversed:c,transitionCount:f,transitionHeight:v,rootRef:s});const g=h(()=>e.continuous||m.value!==0),y=h(()=>e.continuous||m.value!==i.items.value.length-1);function b(){g.value&&i.prev()}function p(){y.value&&i.next()}const S=h(()=>{const _=[],V={icon:a.value?e.nextIcon:e.prevIcon,class:`v-window__${u.value?"right":"left"}`,onClick:i.prev,ariaLabel:o("$vuetify.carousel.prev")};_.push(g.value?n.prev?n.prev({props:V}):r(Ke,V,null):r("div",null,null));const x={icon:a.value?e.prevIcon:e.nextIcon,class:`v-window__${u.value?"left":"right"}`,onClick:i.next,ariaLabel:o("$vuetify.carousel.next")};return _.push(y.value?n.next?n.next({props:x}):r(Ke,x,null):r("div",null,null)),_}),C=h(()=>e.touch===!1?e.touch:{...{left:()=>{u.value?b():p()},right:()=>{u.value?p():b()},start:V=>{let{originalEvent:x}=V;x.stopPropagation()}},...e.touch===!0?{}:e.touch});return j(()=>ne(r(e.tag,{ref:s,class:["v-window",{"v-window--show-arrows-on-hover":e.showArrows==="hover"},l.value,e.class],style:e.style},{default:()=>{var _,V;return[r("div",{class:"v-window__container",style:{height:v.value}},[(_=n.default)==null?void 0:_.call(n,{group:i}),e.showArrows!==!1&&r("div",{class:"v-window__controls"},[S.value])]),(V=n.additional)==null?void 0:V.call(n,{group:i})]}}),[[Ze("touch"),C.value]])),{group:i}}}),vy=R({color:String,cycle:Boolean,delimiterIcon:{type:se,default:"$delimiter"},height:{type:[Number,String],default:500},hideDelimiters:Boolean,hideDelimiterBackground:Boolean,interval:{type:[Number,String],default:6e3,validator:e=>Number(e)>0},progress:[Boolean,String],verticalDelimiters:[Boolean,String],...er({continuous:!0,mandatory:"force",showArrows:!0})},"VCarousel"),fy=L()({name:"VCarousel",props:vy(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{t:a}=ct(),o=W();let i=-1;Z(l,u),Z(()=>e.interval,u),Z(()=>e.cycle,c=>{c?u():window.clearTimeout(i)}),Je(s);function s(){!e.cycle||!o.value||(i=window.setTimeout(o.value.group.next,+e.interval>0?+e.interval:6e3))}function u(){window.clearTimeout(i),window.requestAnimationFrame(s)}return j(()=>{const[c]=ca.filterProps(e);return r(ca,Y({ref:o},c,{modelValue:l.value,"onUpdate:modelValue":d=>l.value=d,class:["v-carousel",{"v-carousel--hide-delimiter-background":e.hideDelimiterBackground,"v-carousel--vertical-delimiters":e.verticalDelimiters},e.class],style:[{height:J(e.height)},e.style]}),{default:n.default,additional:d=>{let{group:f}=d;return r(oe,null,[!e.hideDelimiters&&r("div",{class:"v-carousel__controls",style:{left:e.verticalDelimiters==="left"&&e.verticalDelimiters?0:"auto",right:e.verticalDelimiters==="right"?0:"auto"}},[f.items.value.length>0&&r(pe,{defaults:{VBtn:{color:e.color,icon:e.delimiterIcon,size:"x-small",variant:"text"}},scoped:!0},{default:()=>[f.items.value.map((v,m)=>{const g={id:`carousel-item-${v.id}`,"aria-label":a("$vuetify.carousel.ariaLabel.delimiter",m+1,f.items.value.length),class:[f.isSelected(v.id)&&"v-btn--active"],onClick:()=>f.select(v.id,!0)};return n.item?n.item({props:g,item:v}):r(Ke,Y(v,g),null)})]})]),e.progress&&r(qa,{class:"v-carousel__progress",color:typeof e.progress=="string"?e.progress:void 0,modelValue:(f.getItemIndex(l.value)+1)/f.items.value.length*100},null)])},prev:n.prev,next:n.next})}),{}}}),tr=R({reverseTransition:{type:[Boolean,String],default:void 0},transition:{type:[Boolean,String],default:void 0},...q(),...kn(),..._l()},"VWindowItem"),da=L()({name:"VWindowItem",directives:{Touch:io},props:tr(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const l=Ve(Js),a=Sn(e,Qs),{isBooted:o}=tn();if(!l||!a)throw new Error("[Vuetify] VWindowItem must be used inside VWindow");const i=K(!1),s=h(()=>o.value&&(l.isReversed.value?e.reverseTransition!==!1:e.transition!==!1));function u(){!i.value||!l||(i.value=!1,l.transitionCount.value>0&&(l.transitionCount.value-=1,l.transitionCount.value===0&&(l.transitionHeight.value=void 0)))}function c(){var g;i.value||!l||(i.value=!0,l.transitionCount.value===0&&(l.transitionHeight.value=J((g=l.rootRef.value)==null?void 0:g.clientHeight)),l.transitionCount.value+=1)}function d(){u()}function f(g){i.value&&xe(()=>{!s.value||!i.value||!l||(l.transitionHeight.value=J(g.clientHeight))})}const v=h(()=>{const g=l.isReversed.value?e.reverseTransition:e.transition;return s.value?{name:typeof g!="string"?l.transition.value:g,onBeforeEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:c,onAfterLeave:u,onLeaveCancelled:d,onEnter:f}:!1}),{hasContent:m}=no(e,a.isSelected);return j(()=>r(ht,{transition:v.value,disabled:!o.value},{default:()=>{var g;return[ne(r("div",{class:["v-window-item",a.selectedClass.value,e.class],style:e.style},[m.value&&((g=n.default)==null?void 0:g.call(n))]),[[Pe,a.isSelected.value]])]}})),{groupItem:a}}}),my=R({...Xi(),...tr()},"VCarouselItem"),gy=L()({name:"VCarouselItem",inheritAttrs:!1,props:my(),setup(e,t){let{slots:n,attrs:l}=t;j(()=>{const[a]=qt.filterProps(e),[o]=da.filterProps(e);return r(da,Y({class:"v-carousel-item"},o),{default:()=>[r(qt,Y(l,a),n)]})})}});const hy=bt("v-code");const yy=R({color:{type:Object},disabled:Boolean,dotSize:{type:[Number,String],default:10},height:{type:[Number,String],default:150},width:{type:[Number,String],default:300},...q()},"VColorPickerCanvas"),by=ut({name:"VColorPickerCanvas",props:yy(),emits:{"update:color":e=>!0,"update:position":e=>!0},setup(e,t){let{emit:n}=t;const l=K(!1),a=W(),o=K(parseFloat(e.width)),i=K(parseFloat(e.height)),s=W({x:0,y:0}),u=h({get:()=>s.value,set(b){var C,_;if(!a.value)return;const{x:p,y:S}=b;n("update:color",{h:((C=e.color)==null?void 0:C.h)??0,s:Ue(p,0,o.value)/o.value,v:1-Ue(S,0,i.value)/i.value,a:((_=e.color)==null?void 0:_.a)??1})}}),c=h(()=>{const{x:b,y:p}=u.value,S=parseInt(e.dotSize,10)/2;return{width:J(e.dotSize),height:J(e.dotSize),transform:`translate(${J(b-S)}, ${J(p-S)})`}}),{resizeRef:d}=wt(b=>{var C;if(!((C=d.value)!=null&&C.offsetParent))return;const{width:p,height:S}=b[0].contentRect;o.value=p,i.value=S});function f(b,p,S){const{left:C,top:_,width:V,height:x}=S;u.value={x:Ue(b-C,0,V),y:Ue(p-_,0,x)}}function v(b){b.type==="mousedown"&&b.preventDefault(),!e.disabled&&(m(b),window.addEventListener("mousemove",m),window.addEventListener("mouseup",g),window.addEventListener("touchmove",m),window.addEventListener("touchend",g))}function m(b){if(e.disabled||!a.value)return;l.value=!0;const p=ff(b);f(p.clientX,p.clientY,a.value.getBoundingClientRect())}function g(){window.removeEventListener("mousemove",m),window.removeEventListener("mouseup",g),window.removeEventListener("touchmove",m),window.removeEventListener("touchend",g)}function y(){var _;if(!a.value)return;const b=a.value,p=b.getContext("2d");if(!p)return;const S=p.createLinearGradient(0,0,b.width,0);S.addColorStop(0,"hsla(0, 0%, 100%, 1)"),S.addColorStop(1,`hsla(${((_=e.color)==null?void 0:_.h)??0}, 100%, 50%, 1)`),p.fillStyle=S,p.fillRect(0,0,b.width,b.height);const C=p.createLinearGradient(0,0,0,b.height);C.addColorStop(0,"hsla(0, 0%, 100%, 0)"),C.addColorStop(1,"hsla(0, 0%, 0%, 1)"),p.fillStyle=C,p.fillRect(0,0,b.width,b.height)}return Z(()=>{var b;return(b=e.color)==null?void 0:b.h},y,{immediate:!0}),Z(()=>[o.value,i.value],(b,p)=>{y(),s.value={x:u.value.x*b[0]/p[0],y:u.value.y*b[1]/p[1]}},{flush:"post"}),Z(()=>e.color,()=>{if(l.value){l.value=!1;return}s.value=e.color?{x:e.color.s*o.value,y:(1-e.color.v)*i.value}:{x:0,y:0}},{deep:!0,immediate:!0}),Je(()=>y()),j(()=>r("div",{ref:d,class:["v-color-picker-canvas",e.class],style:e.style,onMousedown:v,onTouchstartPassive:v},[r("canvas",{ref:a,width:o.value,height:i.value},null),e.color&&r("div",{class:["v-color-picker-canvas__dot",{"v-color-picker-canvas__dot--disabled":e.disabled}],style:c.value},null)])),{}}});function py(e,t){if(t){const{a:n,...l}=e;return l}return e}function ky(e,t){if(t==null||typeof t=="string"){const n=Bi(e);return e.a===1?n.slice(0,7):n}if(typeof t=="object"){let n;return jt(t,["r","g","b"])?n=Vt(e):jt(t,["h","s","l"])?n=_i(e):jt(t,["h","s","v"])&&(n=e),py(n,!jt(t,["a"])&&e.a===1)}return e}const Rn={h:0,s:0,v:1,a:1},va={inputProps:{type:"number",min:0},inputs:[{label:"R",max:255,step:1,getValue:e=>Math.round(e.r),getColor:(e,t)=>({...e,r:Number(t)})},{label:"G",max:255,step:1,getValue:e=>Math.round(e.g),getColor:(e,t)=>({...e,g:Number(t)})},{label:"B",max:255,step:1,getValue:e=>Math.round(e.b),getColor:(e,t)=>({...e,b:Number(t)})},{label:"A",max:1,step:.01,getValue:e=>{let{a:t}=e;return t!=null?Math.round(t*100)/100:1},getColor:(e,t)=>({...e,a:Number(t)})}],to:Vt,from:hl};var ri;const Sy={...va,inputs:(ri=va.inputs)==null?void 0:ri.slice(0,3)},fa={inputProps:{type:"number",min:0},inputs:[{label:"H",max:360,step:1,getValue:e=>Math.round(e.h),getColor:(e,t)=>({...e,h:Number(t)})},{label:"S",max:1,step:.01,getValue:e=>Math.round(e.s*100)/100,getColor:(e,t)=>({...e,s:Number(t)})},{label:"L",max:1,step:.01,getValue:e=>Math.round(e.l*100)/100,getColor:(e,t)=>({...e,l:Number(t)})},{label:"A",max:1,step:.01,getValue:e=>{let{a:t}=e;return t!=null?Math.round(t*100)/100:1},getColor:(e,t)=>({...e,a:Number(t)})}],to:_i,from:$a},wy={...fa,inputs:fa.inputs.slice(0,3)},nr={inputProps:{type:"text"},inputs:[{label:"HEXA",getValue:e=>e,getColor:(e,t)=>t}],to:Bi,from:Rf},Cy={...nr,inputs:[{label:"HEX",getValue:e=>e.slice(0,7),getColor:(e,t)=>t}]},Yt={rgb:Sy,rgba:va,hsl:wy,hsla:fa,hex:Cy,hexa:nr},xy=e=>{let{label:t,...n}=e;return r("div",{class:"v-color-picker-edit__input"},[r("input",n,null),r("span",null,[t])])},Vy=R({color:Object,disabled:Boolean,mode:{type:String,default:"rgba",validator:e=>Object.keys(Yt).includes(e)},modes:{type:Array,default:()=>Object.keys(Yt),validator:e=>Array.isArray(e)&&e.every(t=>Object.keys(Yt).includes(t))},...q()},"VColorPickerEdit"),_y=ut({name:"VColorPickerEdit",props:Vy(),emits:{"update:color":e=>!0,"update:mode":e=>!0},setup(e,t){let{emit:n}=t;const l=h(()=>e.modes.map(o=>({...Yt[o],name:o}))),a=h(()=>{var s;const o=l.value.find(u=>u.name===e.mode);if(!o)return[];const i=e.color?o.to(e.color):null;return(s=o.inputs)==null?void 0:s.map(u=>{let{getValue:c,getColor:d,...f}=u;return{...o.inputProps,...f,disabled:e.disabled,value:i&&c(i),onChange:v=>{const m=v.target;m&&n("update:color",o.from(d(i??Rn,m.value)))}}})});return j(()=>{var o;return r("div",{class:["v-color-picker-edit",e.class],style:e.style},[(o=a.value)==null?void 0:o.map(i=>r(xy,i,null)),l.value.length>1&&r(Ke,{icon:"$unfold",size:"x-small",variant:"plain",onClick:()=>{const i=l.value.findIndex(s=>s.name===e.mode);n("update:mode",l.value[(i+1)%l.value.length].name)}},null)])}),{}}});const so=Symbol.for("vuetify:v-slider");function ma(e,t,n){const l=n==="vertical",a=t.getBoundingClientRect(),o="touches"in e?e.touches[0]:e;return l?o.clientY-(a.top+a.height/2):o.clientX-(a.left+a.width/2)}function Iy(e,t){return"touches"in e&&e.touches.length?e.touches[0][t]:"changedTouches"in e&&e.changedTouches.length?e.changedTouches[0][t]:e[t]}const lr=R({disabled:{type:Boolean,default:null},error:Boolean,readonly:{type:Boolean,default:null},max:{type:[Number,String],default:100},min:{type:[Number,String],default:0},step:{type:[Number,String],default:0},thumbColor:String,thumbLabel:{type:[Boolean,String],default:void 0,validator:e=>typeof e=="boolean"||e==="always"},thumbSize:{type:[Number,String],default:20},showTicks:{type:[Boolean,String],default:!1,validator:e=>typeof e=="boolean"||e==="always"},ticks:{type:[Array,Object]},tickSize:{type:[Number,String],default:2},color:String,trackColor:String,trackFillColor:String,trackSize:{type:[Number,String],default:4},direction:{type:String,default:"horizontal",validator:e=>["vertical","horizontal"].includes(e)},reverse:Boolean,...Ie(),...Me({elevation:2})},"Slider"),ar=e=>{const t=h(()=>parseFloat(e.min)),n=h(()=>parseFloat(e.max)),l=h(()=>+e.step>0?parseFloat(e.step):0),a=h(()=>Math.max(go(l.value),go(t.value)));function o(i){if(i=parseFloat(i),l.value<=0)return i;const s=Ue(i,t.value,n.value),u=t.value%l.value,c=Math.round((s-u)/l.value)*l.value+u;return parseFloat(Math.min(c,n.value).toFixed(a.value))}return{min:t,max:n,step:l,decimals:a,roundValue:o}},or=e=>{let{props:t,steps:n,onSliderStart:l,onSliderMove:a,onSliderEnd:o,getActiveThumb:i}=e;const{isRtl:s}=De(),u=O(t,"reverse"),c=h(()=>{let D=s.value?"rtl":"ltr";return t.reverse&&(D=D==="rtl"?"ltr":"rtl"),D}),{min:d,max:f,step:v,decimals:m,roundValue:g}=n,y=h(()=>parseInt(t.thumbSize,10)),b=h(()=>parseInt(t.tickSize,10)),p=h(()=>parseInt(t.trackSize,10)),S=h(()=>(f.value-d.value)/v.value),C=O(t,"disabled"),_=h(()=>t.direction==="vertical"),V=h(()=>t.error||t.disabled?void 0:t.thumbColor??t.color),x=h(()=>t.error||t.disabled?void 0:t.trackColor??t.color),T=h(()=>t.error||t.disabled?void 0:t.trackFillColor??t.color),w=K(!1),k=K(0),I=W(),A=W();function B(D){var Te;const me=t.direction==="vertical",Q=me?"top":"left",H=me?"height":"width",le=me?"clientY":"clientX",{[Q]:be,[H]:de}=(Te=I.value)==null?void 0:Te.$el.getBoundingClientRect(),ie=Iy(D,le);let fe=Math.min(Math.max((ie-be-k.value)/de,0),1)||0;return(me||c.value==="rtl")&&(fe=1-fe),g(d.value+fe*(f.value-d.value))}const E=D=>{o({value:B(D)}),w.value=!1,k.value=0},F=D=>{A.value=i(D),A.value&&(A.value.focus(),w.value=!0,A.value.contains(D.target)?k.value=ma(D,A.value,t.direction):(k.value=0,a({value:B(D)})),l({value:B(D)}))},X={passive:!0,capture:!0};function $(D){a({value:B(D)})}function N(D){D.stopPropagation(),D.preventDefault(),E(D),window.removeEventListener("mousemove",$,X),window.removeEventListener("mouseup",N)}function M(D){var me;E(D),window.removeEventListener("touchmove",$,X),(me=D.target)==null||me.removeEventListener("touchend",M)}function G(D){var me;F(D),window.addEventListener("touchmove",$,X),(me=D.target)==null||me.addEventListener("touchend",M,{passive:!1})}function U(D){D.preventDefault(),F(D),window.addEventListener("mousemove",$,X),window.addEventListener("mouseup",N,{passive:!1})}const z=D=>{const me=(D-d.value)/(f.value-d.value)*100;return Ue(isNaN(me)?0:me,0,100)},ae=O(t,"showTicks"),re=h(()=>ae.value?t.ticks?Array.isArray(t.ticks)?t.ticks.map(D=>({value:D,position:z(D),label:D.toString()})):Object.keys(t.ticks).map(D=>({value:parseFloat(D),position:z(parseFloat(D)),label:t.ticks[D]})):S.value!==1/0?xt(S.value+1).map(D=>{const me=d.value+D*v.value;return{value:me,position:z(me)}}):[]:[]),ve=h(()=>re.value.some(D=>{let{label:me}=D;return!!me})),ge={activeThumbRef:A,color:O(t,"color"),decimals:m,disabled:C,direction:O(t,"direction"),elevation:O(t,"elevation"),hasLabels:ve,horizontalDirection:c,isReversed:u,min:d,max:f,mousePressed:w,numTicks:S,onSliderMousedown:U,onSliderTouchstart:G,parsedTicks:re,parseMouseMove:B,position:z,readonly:O(t,"readonly"),rounded:O(t,"rounded"),roundValue:g,showTicks:ae,startOffset:k,step:v,thumbSize:y,thumbColor:V,thumbLabel:O(t,"thumbLabel"),ticks:O(t,"ticks"),tickSize:b,trackColor:x,trackContainerRef:I,trackFillColor:T,trackSize:p,vertical:_};return $e(so,ge),ge},Ty=R({focused:Boolean,max:{type:Number,required:!0},min:{type:Number,required:!0},modelValue:{type:Number,required:!0},position:{type:Number,required:!0},ripple:{type:[Boolean,Object],default:!0},...q()},"VSliderThumb"),ga=L()({name:"VSliderThumb",directives:{Ripple:Ot},props:Ty(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=Ve(so),{rtlClasses:o}=De();if(!a)throw new Error("[Vuetify] v-slider-thumb must be used inside v-slider or v-range-slider");const{thumbColor:i,step:s,vertical:u,disabled:c,thumbSize:d,thumbLabel:f,direction:v,readonly:m,elevation:g,isReversed:y,horizontalDirection:b,mousePressed:p,decimals:S}=a,{textColorClasses:C,textColorStyles:_}=Ge(i),{pageup:V,pagedown:x,end:T,home:w,left:k,right:I,down:A,up:B}=Ul,E=[V,x,T,w,k,I,A,B],F=h(()=>s.value?[1,2,3]:[1,5,10]);function X(N,M){if(!E.includes(N.key))return;N.preventDefault();const G=s.value||.1,U=(e.max-e.min)/G;if([k,I,A,B].includes(N.key)){const ae=(b.value==="rtl"?[k,B]:[I,B]).includes(N.key)?1:-1,re=N.shiftKey?2:N.ctrlKey?1:0;M=M+ae*G*F.value[re]}else if(N.key===w)M=e.min;else if(N.key===T)M=e.max;else{const z=N.key===x?1:-1;M=M-z*G*(U>100?U/10:10)}return Math.max(e.min,Math.min(e.max,M))}function $(N){const M=X(N,e.modelValue);M!=null&&l("update:modelValue",M)}return j(()=>{const N=J(u.value||y.value?100-e.position:e.position,"%"),{elevationClasses:M}=He(h(()=>c.value?void 0:g.value));return r("div",{class:["v-slider-thumb",{"v-slider-thumb--focused":e.focused,"v-slider-thumb--pressed":e.focused&&p.value},e.class,o.value],style:[{"--v-slider-thumb-position":N,"--v-slider-thumb-size":J(d.value)},e.style],role:"slider",tabindex:c.value?-1:0,"aria-valuemin":e.min,"aria-valuemax":e.max,"aria-valuenow":e.modelValue,"aria-readonly":!!m.value,"aria-orientation":v.value,onKeydown:m.value?void 0:$},[r("div",{class:["v-slider-thumb__surface",C.value,M.value],style:{..._.value}},null),ne(r("div",{class:["v-slider-thumb__ripple",C.value],style:_.value},null),[[Ze("ripple"),e.ripple,null,{circle:!0,center:!0}]]),r(Ha,{origin:"bottom center"},{default:()=>{var G;return[ne(r("div",{class:"v-slider-thumb__label-container"},[r("div",{class:["v-slider-thumb__label"]},[r("div",null,[((G=n["thumb-label"])==null?void 0:G.call(n,{modelValue:e.modelValue}))??e.modelValue.toFixed(s.value?S.value:1)])])]),[[Pe,f.value&&e.focused||f.value==="always"]])]}})])}),{}}});const Py=R({start:{type:Number,required:!0},stop:{type:Number,required:!0},...q()},"VSliderTrack"),ir=L()({name:"VSliderTrack",props:Py(),emits:{},setup(e,t){let{slots:n}=t;const l=Ve(so);if(!l)throw new Error("[Vuetify] v-slider-track must be inside v-slider or v-range-slider");const{color:a,horizontalDirection:o,parsedTicks:i,rounded:s,showTicks:u,tickSize:c,trackColor:d,trackFillColor:f,trackSize:v,vertical:m,min:g,max:y}=l,{roundedClasses:b}=Ae(s),{backgroundColorClasses:p,backgroundColorStyles:S}=Be(f),{backgroundColorClasses:C,backgroundColorStyles:_}=Be(d),V=h(()=>`inset-${m.value?"block-end":"inline-start"}`),x=h(()=>m.value?"height":"width"),T=h(()=>({[V.value]:"0%",[x.value]:"100%"})),w=h(()=>e.stop-e.start),k=h(()=>({[V.value]:J(e.start,"%"),[x.value]:J(w.value,"%")})),I=h(()=>u.value?(m.value?i.value.slice().reverse():i.value).map((B,E)=>{var $;const F=m.value?"bottom":"margin-inline-start",X=B.value!==g.value&&B.value!==y.value?J(B.position,"%"):void 0;return r("div",{key:B.value,class:["v-slider-track__tick",{"v-slider-track__tick--filled":B.position>=e.start&&B.position<=e.stop,"v-slider-track__tick--first":B.value===g.value,"v-slider-track__tick--last":B.value===y.value}],style:{[F]:X}},[(B.label||n["tick-label"])&&r("div",{class:"v-slider-track__tick-label"},[(($=n["tick-label"])==null?void 0:$.call(n,{tick:B,index:E}))??B.label])])}):[]);return j(()=>r("div",{class:["v-slider-track",b.value,e.class],style:[{"--v-slider-track-size":J(v.value),"--v-slider-tick-size":J(c.value),direction:m.value?void 0:o.value},e.style]},[r("div",{class:["v-slider-track__background",C.value,{"v-slider-track__background--opacity":!!a.value||!f.value}],style:{...T.value,..._.value}},null),r("div",{class:["v-slider-track__fill",p.value],style:{...k.value,...S.value}},null),u.value&&r("div",{class:["v-slider-track__ticks",{"v-slider-track__ticks--always-show":u.value==="always"}]},[I.value])])),{}}}),Ay=R({...Cl(),...lr(),...Bt(),modelValue:{type:[Number,String],default:0}},"VSlider"),ha=L()({name:"VSlider",props:Ay(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,start:e=>!0,end:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=W(),{rtlClasses:o}=De(),i=ar(e),s=ue(e,"modelValue",void 0,x=>i.roundValue(x??i.min.value)),{min:u,max:c,mousePressed:d,roundValue:f,onSliderMousedown:v,onSliderTouchstart:m,trackContainerRef:g,position:y,hasLabels:b,readonly:p}=or({props:e,steps:i,onSliderStart:()=>{l("start",s.value)},onSliderEnd:x=>{let{value:T}=x;const w=f(T);s.value=w,l("end",w)},onSliderMove:x=>{let{value:T}=x;return s.value=f(T)},getActiveThumb:()=>{var x;return(x=a.value)==null?void 0:x.$el}}),{isFocused:S,focus:C,blur:_}=Dt(e),V=h(()=>y(s.value));return j(()=>{const[x,T]=Ne.filterProps(e),w=!!(e.label||n.label||n.prepend);return r(Ne,Y({class:["v-slider",{"v-slider--has-labels":!!n["tick-label"]||b.value,"v-slider--focused":S.value,"v-slider--pressed":d.value,"v-slider--disabled":e.disabled},o.value,e.class],style:e.style},x,{focused:S.value}),{...n,prepend:w?k=>{var I,A;return r(oe,null,[((I=n.label)==null?void 0:I.call(n,k))??(e.label?r(Vn,{id:k.id.value,class:"v-slider__label",text:e.label},null):void 0),(A=n.prepend)==null?void 0:A.call(n,k)])}:void 0,default:k=>{let{id:I,messagesId:A}=k;return r("div",{class:"v-slider__container",onMousedown:p.value?void 0:v,onTouchstartPassive:p.value?void 0:m},[r("input",{id:I.value,name:e.name||I.value,disabled:!!e.disabled,readonly:!!e.readonly,tabindex:"-1",value:s.value},null),r(ir,{ref:g,start:0,stop:V.value},{"tick-label":n["tick-label"]}),r(ga,{ref:a,"aria-describedby":A.value,focused:S.value,min:u.value,max:c.value,modelValue:s.value,"onUpdate:modelValue":B=>s.value=B,position:V.value,elevation:e.elevation,onFocus:C,onBlur:_},{"thumb-label":n["thumb-label"]})])}})}),{}}}),By=R({color:{type:Object},disabled:Boolean,hideAlpha:Boolean,...q()},"VColorPickerPreview"),Ry=ut({name:"VColorPickerPreview",props:By(),emits:{"update:color":e=>!0},setup(e,t){let{emit:n}=t;return j(()=>{var l,a;return r("div",{class:["v-color-picker-preview",{"v-color-picker-preview--hide-alpha":e.hideAlpha},e.class],style:e.style},[r("div",{class:"v-color-picker-preview__dot"},[r("div",{style:{background:Ti(e.color??Rn)}},null)]),r("div",{class:"v-color-picker-preview__sliders"},[r(ha,{class:"v-color-picker-preview__track v-color-picker-preview__hue",modelValue:(l=e.color)==null?void 0:l.h,"onUpdate:modelValue":o=>n("update:color",{...e.color??Rn,h:o}),step:0,min:0,max:360,disabled:e.disabled,thumbSize:14,trackSize:8,trackFillColor:"white",hideDetails:!0},null),!e.hideAlpha&&r(ha,{class:"v-color-picker-preview__track v-color-picker-preview__alpha",modelValue:((a=e.color)==null?void 0:a.a)??1,"onUpdate:modelValue":o=>n("update:color",{...e.color??Rn,a:o}),step:1/256,min:0,max:1,disabled:e.disabled,thumbSize:14,trackSize:8,trackFillColor:"white",hideDetails:!0},null)])])}),{}}});const Ey=Object.freeze({base:"#f44336",lighten5:"#ffebee",lighten4:"#ffcdd2",lighten3:"#ef9a9a",lighten2:"#e57373",lighten1:"#ef5350",darken1:"#e53935",darken2:"#d32f2f",darken3:"#c62828",darken4:"#b71c1c",accent1:"#ff8a80",accent2:"#ff5252",accent3:"#ff1744",accent4:"#d50000"}),Ly=Object.freeze({base:"#e91e63",lighten5:"#fce4ec",lighten4:"#f8bbd0",lighten3:"#f48fb1",lighten2:"#f06292",lighten1:"#ec407a",darken1:"#d81b60",darken2:"#c2185b",darken3:"#ad1457",darken4:"#880e4f",accent1:"#ff80ab",accent2:"#ff4081",accent3:"#f50057",accent4:"#c51162"}),$y=Object.freeze({base:"#9c27b0",lighten5:"#f3e5f5",lighten4:"#e1bee7",lighten3:"#ce93d8",lighten2:"#ba68c8",lighten1:"#ab47bc",darken1:"#8e24aa",darken2:"#7b1fa2",darken3:"#6a1b9a",darken4:"#4a148c",accent1:"#ea80fc",accent2:"#e040fb",accent3:"#d500f9",accent4:"#aa00ff"}),My=Object.freeze({base:"#673ab7",lighten5:"#ede7f6",lighten4:"#d1c4e9",lighten3:"#b39ddb",lighten2:"#9575cd",lighten1:"#7e57c2",darken1:"#5e35b1",darken2:"#512da8",darken3:"#4527a0",darken4:"#311b92",accent1:"#b388ff",accent2:"#7c4dff",accent3:"#651fff",accent4:"#6200ea"}),Fy=Object.freeze({base:"#3f51b5",lighten5:"#e8eaf6",lighten4:"#c5cae9",lighten3:"#9fa8da",lighten2:"#7986cb",lighten1:"#5c6bc0",darken1:"#3949ab",darken2:"#303f9f",darken3:"#283593",darken4:"#1a237e",accent1:"#8c9eff",accent2:"#536dfe",accent3:"#3d5afe",accent4:"#304ffe"}),Oy=Object.freeze({base:"#2196f3",lighten5:"#e3f2fd",lighten4:"#bbdefb",lighten3:"#90caf9",lighten2:"#64b5f6",lighten1:"#42a5f5",darken1:"#1e88e5",darken2:"#1976d2",darken3:"#1565c0",darken4:"#0d47a1",accent1:"#82b1ff",accent2:"#448aff",accent3:"#2979ff",accent4:"#2962ff"}),Dy=Object.freeze({base:"#03a9f4",lighten5:"#e1f5fe",lighten4:"#b3e5fc",lighten3:"#81d4fa",lighten2:"#4fc3f7",lighten1:"#29b6f6",darken1:"#039be5",darken2:"#0288d1",darken3:"#0277bd",darken4:"#01579b",accent1:"#80d8ff",accent2:"#40c4ff",accent3:"#00b0ff",accent4:"#0091ea"}),Ny=Object.freeze({base:"#00bcd4",lighten5:"#e0f7fa",lighten4:"#b2ebf2",lighten3:"#80deea",lighten2:"#4dd0e1",lighten1:"#26c6da",darken1:"#00acc1",darken2:"#0097a7",darken3:"#00838f",darken4:"#006064",accent1:"#84ffff",accent2:"#18ffff",accent3:"#00e5ff",accent4:"#00b8d4"}),zy=Object.freeze({base:"#009688",lighten5:"#e0f2f1",lighten4:"#b2dfdb",lighten3:"#80cbc4",lighten2:"#4db6ac",lighten1:"#26a69a",darken1:"#00897b",darken2:"#00796b",darken3:"#00695c",darken4:"#004d40",accent1:"#a7ffeb",accent2:"#64ffda",accent3:"#1de9b6",accent4:"#00bfa5"}),Hy=Object.freeze({base:"#4caf50",lighten5:"#e8f5e9",lighten4:"#c8e6c9",lighten3:"#a5d6a7",lighten2:"#81c784",lighten1:"#66bb6a",darken1:"#43a047",darken2:"#388e3c",darken3:"#2e7d32",darken4:"#1b5e20",accent1:"#b9f6ca",accent2:"#69f0ae",accent3:"#00e676",accent4:"#00c853"}),jy=Object.freeze({base:"#8bc34a",lighten5:"#f1f8e9",lighten4:"#dcedc8",lighten3:"#c5e1a5",lighten2:"#aed581",lighten1:"#9ccc65",darken1:"#7cb342",darken2:"#689f38",darken3:"#558b2f",darken4:"#33691e",accent1:"#ccff90",accent2:"#b2ff59",accent3:"#76ff03",accent4:"#64dd17"}),Uy=Object.freeze({base:"#cddc39",lighten5:"#f9fbe7",lighten4:"#f0f4c3",lighten3:"#e6ee9c",lighten2:"#dce775",lighten1:"#d4e157",darken1:"#c0ca33",darken2:"#afb42b",darken3:"#9e9d24",darken4:"#827717",accent1:"#f4ff81",accent2:"#eeff41",accent3:"#c6ff00",accent4:"#aeea00"}),Gy=Object.freeze({base:"#ffeb3b",lighten5:"#fffde7",lighten4:"#fff9c4",lighten3:"#fff59d",lighten2:"#fff176",lighten1:"#ffee58",darken1:"#fdd835",darken2:"#fbc02d",darken3:"#f9a825",darken4:"#f57f17",accent1:"#ffff8d",accent2:"#ffff00",accent3:"#ffea00",accent4:"#ffd600"}),Wy=Object.freeze({base:"#ffc107",lighten5:"#fff8e1",lighten4:"#ffecb3",lighten3:"#ffe082",lighten2:"#ffd54f",lighten1:"#ffca28",darken1:"#ffb300",darken2:"#ffa000",darken3:"#ff8f00",darken4:"#ff6f00",accent1:"#ffe57f",accent2:"#ffd740",accent3:"#ffc400",accent4:"#ffab00"}),Yy=Object.freeze({base:"#ff9800",lighten5:"#fff3e0",lighten4:"#ffe0b2",lighten3:"#ffcc80",lighten2:"#ffb74d",lighten1:"#ffa726",darken1:"#fb8c00",darken2:"#f57c00",darken3:"#ef6c00",darken4:"#e65100",accent1:"#ffd180",accent2:"#ffab40",accent3:"#ff9100",accent4:"#ff6d00"}),Ky=Object.freeze({base:"#ff5722",lighten5:"#fbe9e7",lighten4:"#ffccbc",lighten3:"#ffab91",lighten2:"#ff8a65",lighten1:"#ff7043",darken1:"#f4511e",darken2:"#e64a19",darken3:"#d84315",darken4:"#bf360c",accent1:"#ff9e80",accent2:"#ff6e40",accent3:"#ff3d00",accent4:"#dd2c00"}),qy=Object.freeze({base:"#795548",lighten5:"#efebe9",lighten4:"#d7ccc8",lighten3:"#bcaaa4",lighten2:"#a1887f",lighten1:"#8d6e63",darken1:"#6d4c41",darken2:"#5d4037",darken3:"#4e342e",darken4:"#3e2723"}),Xy=Object.freeze({base:"#607d8b",lighten5:"#eceff1",lighten4:"#cfd8dc",lighten3:"#b0bec5",lighten2:"#90a4ae",lighten1:"#78909c",darken1:"#546e7a",darken2:"#455a64",darken3:"#37474f",darken4:"#263238"}),Zy=Object.freeze({base:"#9e9e9e",lighten5:"#fafafa",lighten4:"#f5f5f5",lighten3:"#eeeeee",lighten2:"#e0e0e0",lighten1:"#bdbdbd",darken1:"#757575",darken2:"#616161",darken3:"#424242",darken4:"#212121"}),Jy=Object.freeze({black:"#000000",white:"#ffffff",transparent:"#ffffff00"}),Qy=Object.freeze({red:Ey,pink:Ly,purple:$y,deepPurple:My,indigo:Fy,blue:Oy,lightBlue:Dy,cyan:Ny,teal:zy,green:Hy,lightGreen:jy,lime:Uy,yellow:Gy,amber:Wy,orange:Yy,deepOrange:Ky,brown:qy,blueGrey:Xy,grey:Zy,shades:Jy}),eb=R({swatches:{type:Array,default:()=>tb(Qy)},disabled:Boolean,color:Object,maxHeight:[Number,String],...q()},"VColorPickerSwatches");function tb(e){return Object.keys(e).map(t=>{const n=e[t];return n.base?[n.base,n.darken4,n.darken3,n.darken2,n.darken1,n.lighten1,n.lighten2,n.lighten3,n.lighten4,n.lighten5]:[n.black,n.white,n.transparent]})}const nb=ut({name:"VColorPickerSwatches",props:eb(),emits:{"update:color":e=>!0},setup(e,t){let{emit:n}=t;return j(()=>r("div",{class:["v-color-picker-swatches",e.class],style:[{maxHeight:J(e.maxHeight)},e.style]},[r("div",null,[e.swatches.map(l=>r("div",{class:"v-color-picker-swatches__swatch"},[l.map(a=>{const o=st(a),i=hl(o),s=Ii(o);return r("div",{class:"v-color-picker-swatches__color",onClick:()=>i&&n("update:color",i)},[r("div",{style:{background:s}},[e.color&&hn(e.color,i)?r(Se,{size:"x-small",icon:"$success",color:Mf(a,"#FFFFFF")>2?"white":"black"},null):void 0])])})]))])])),{}}});const sr=R({color:String,...at(),...q(),...dt(),...Me(),...Mt(),...Cn(),...Ie(),...ce(),...he()},"VSheet"),ya=L()({name:"VSheet",props:sr(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{backgroundColorClasses:a,backgroundColorStyles:o}=Be(O(e,"color")),{borderClasses:i}=ft(e),{dimensionStyles:s}=vt(e),{elevationClasses:u}=He(e),{locationStyles:c}=Ft(e),{positionClasses:d}=xn(e),{roundedClasses:f}=Ae(e);return j(()=>r(e.tag,{class:["v-sheet",l.value,a.value,i.value,u.value,d.value,f.value,e.class],style:[o.value,s.value,c.value,e.style]},n)),{}}}),lb=R({canvasHeight:{type:[String,Number],default:150},disabled:Boolean,dotSize:{type:[Number,String],default:10},hideCanvas:Boolean,hideSliders:Boolean,hideInputs:Boolean,mode:{type:String,default:"rgba",validator:e=>Object.keys(Yt).includes(e)},modes:{type:Array,default:()=>Object.keys(Yt),validator:e=>Array.isArray(e)&&e.every(t=>Object.keys(Yt).includes(t))},showSwatches:Boolean,swatches:Array,swatchesMaxHeight:{type:[Number,String],default:150},modelValue:{type:[Object,String]},...rt(sr({width:300}),["height","location","minHeight","maxHeight","minWidth","maxWidth"])},"VColorPicker"),ab=ut({name:"VColorPicker",props:lb(),emits:{"update:modelValue":e=>!0,"update:mode":e=>!0},setup(e){const t=ue(e,"mode"),n=W(null),l=ue(e,"modelValue",void 0,i=>{if(i==null||i==="")return null;let s;try{s=hl(st(i))}catch{return null}return n.value&&(s={...s,h:n.value.h},n.value=null),s},i=>i?ky(i,e.modelValue):null),{rtlClasses:a}=De(),o=i=>{l.value=i,n.value=i};return Je(()=>{e.modes.includes(t.value)||(t.value=e.modes[0])}),Ee({VSlider:{color:void 0,trackColor:void 0,trackFillColor:void 0}}),j(()=>{const[i]=ya.filterProps(e);return r(ya,Y({rounded:e.rounded,elevation:e.elevation,theme:e.theme,class:["v-color-picker",a.value,e.class],style:[{"--v-color-picker-color-hsv":Ti({...l.value??Rn,a:1})},e.style]},i,{maxWidth:e.width}),{default:()=>[!e.hideCanvas&&r(by,{key:"canvas",color:l.value,"onUpdate:color":o,disabled:e.disabled,dotSize:e.dotSize,width:e.width,height:e.canvasHeight},null),(!e.hideSliders||!e.hideInputs)&&r("div",{key:"controls",class:"v-color-picker__controls"},[!e.hideSliders&&r(Ry,{key:"preview",color:l.value,"onUpdate:color":o,hideAlpha:!t.value.endsWith("a"),disabled:e.disabled},null),!e.hideInputs&&r(_y,{key:"edit",modes:e.modes,mode:t.value,"onUpdate:mode":s=>t.value=s,color:l.value,"onUpdate:color":o,disabled:e.disabled},null)]),e.showSwatches&&r(nb,{key:"swatches",color:l.value,"onUpdate:color":o,maxHeight:e.swatchesMaxHeight,swatches:e.swatches,disabled:e.disabled},null)]})}),{}}});function ob(e,t,n){if(t==null)return e;if(Array.isArray(t))throw new Error("Multiple matches is not implemented");return typeof t=="number"&&~t?r(oe,null,[r("span",{class:"v-combobox__unmask"},[e.substr(0,t)]),r("span",{class:"v-combobox__mask"},[e.substr(t,n)]),r("span",{class:"v-combobox__unmask"},[e.substr(t+n)])]):e}const ib=R({autoSelectFirst:{type:[Boolean,String]},delimiters:Array,...zs({filterKeys:["title"]}),...oo({hideNoData:!0,returnObject:!0}),...rt(Al({modelValue:null,role:"combobox"}),["validationValue","dirty","appendInnerIcon"]),...Pt({transition:!1})},"VCombobox"),sb=L()({name:"VCombobox",props:ib(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,"update:search":e=>!0,"update:menu":e=>!0},setup(e,t){var Q;let{emit:n,slots:l}=t;const{t:a}=ct(),o=W(),i=K(!1),s=K(!0),u=K(!1),c=W(),d=W(),f=ue(e,"menu"),v=h({get:()=>f.value,set:H=>{var le;f.value&&!H&&((le=c.value)!=null&&le.ΨopenChildren)||(f.value=H)}}),m=K(-1);let g=!1;const y=h(()=>{var H;return(H=o.value)==null?void 0:H.color}),b=h(()=>v.value?e.closeText:e.openText),{items:p,transformIn:S,transformOut:C}=to(e),{textColorClasses:_,textColorStyles:V}=Ge(y),x=ue(e,"modelValue",[],H=>S(et(H)),H=>{const le=C(H);return e.multiple?le:le[0]??null}),T=xl(),w=K(e.multiple?"":((Q=x.value[0])==null?void 0:Q.title)??""),k=h({get:()=>w.value,set:H=>{var le;if(w.value=H,e.multiple||(x.value=[Gt(e,H)]),H&&e.multiple&&((le=e.delimiters)!=null&&le.length)){const be=H.split(new RegExp(`(?:${e.delimiters.join("|")})+`));be.length>1&&(be.forEach(de=>{de=de.trim(),de&&ve(Gt(e,de))}),w.value="")}H||(m.value=-1),s.value=!H}});Z(w,H=>{g?xe(()=>g=!1):i.value&&!v.value&&(v.value=!0),n("update:search",H)}),Z(x,H=>{var le;e.multiple||(w.value=((le=H[0])==null?void 0:le.title)??"")});const{filteredItems:I,getMatches:A}=Hs(e,p,()=>s.value?"":k.value),B=h(()=>e.hideSelected?I.value.filter(H=>!x.value.some(le=>le.value===H.value)):I.value),E=h(()=>x.value.map(H=>H.value)),F=h(()=>{var le;return(e.autoSelectFirst===!0||e.autoSelectFirst==="exact"&&k.value===((le=B.value[0])==null?void 0:le.title))&&B.value.length>0&&!s.value&&!u.value}),X=h(()=>e.hideNoData&&!p.value.length||e.readonly||(T==null?void 0:T.isReadonly.value)),$=W(),{onListScroll:N,onListKeydown:M}=ao($,o);function G(H){g=!0,e.openOnClear&&(v.value=!0)}function U(){X.value||(v.value=!0)}function z(H){X.value||(i.value&&(H.preventDefault(),H.stopPropagation()),v.value=!v.value)}function ae(H){var de;if(e.readonly||T!=null&&T.isReadonly.value)return;const le=o.value.selectionStart,be=x.value.length;if((m.value>-1||["Enter","ArrowDown","ArrowUp"].includes(H.key))&&H.preventDefault(),["Enter","ArrowDown"].includes(H.key)&&(v.value=!0),["Escape"].includes(H.key)&&(v.value=!1),["Enter","Escape","Tab"].includes(H.key)&&(F.value&&["Enter","Tab"].includes(H.key)&&ve(I.value[0]),s.value=!0),H.key==="ArrowDown"&&F.value&&((de=$.value)==null||de.focus("next")),!!e.multiple){if(["Backspace","Delete"].includes(H.key)){if(m.value<0){H.key==="Backspace"&&!k.value&&(m.value=be-1);return}const ie=m.value,fe=x.value[m.value];fe&&!fe.props.disabled&&ve(fe),m.value=ie>=be-1?be-2:ie}if(H.key==="ArrowLeft"){if(m.value<0&&le>0)return;const ie=m.value>-1?m.value-1:be-1;x.value[ie]?m.value=ie:(m.value=-1,o.value.setSelectionRange(k.value.length,k.value.length))}if(H.key==="ArrowRight"){if(m.value<0)return;const ie=m.value+1;x.value[ie]?m.value=ie:(m.value=-1,o.value.setSelectionRange(0,0))}H.key==="Enter"&&k.value&&(ve(Gt(e,k.value)),k.value="")}}function re(){var H;i.value&&(s.value=!0,(H=o.value)==null||H.focus())}function ve(H){if(e.multiple){const le=x.value.findIndex(be=>e.valueComparator(be.value,H.value));if(le===-1)x.value=[...x.value,H];else{const be=[...x.value];be.splice(le,1),x.value=be}k.value=""}else x.value=[H],w.value=H.title,xe(()=>{v.value=!1,s.value=!0})}function ge(H){i.value=!0,setTimeout(()=>{u.value=!0})}function D(H){u.value=!1}function me(H){(H==null||H===""&&!e.multiple)&&(x.value=[])}return Z(I,H=>{!H.length&&e.hideNoData&&(v.value=!1)}),Z(i,(H,le)=>{H||H===le||(m.value=-1,v.value=!1,F.value&&!u.value&&!x.value.some(be=>{let{value:de}=be;return de===B.value[0].value})?ve(B.value[0]):e.multiple&&k.value&&(x.value=[...x.value,Gt(e,k.value)],k.value=""))}),Z(v,()=>{if(!e.hideSelected&&v.value&&x.value.length){const H=B.value.findIndex(le=>x.value.some(be=>e.valueComparator(be.value,le.value)));Ce&&window.requestAnimationFrame(()=>{var le;H>=0&&((le=d.value)==null||le.scrollToIndex(H))})}}),j(()=>{const H=!!(e.chips||l.chip),le=!!(!e.hideNoData||B.value.length||l["prepend-item"]||l["append-item"]||l["no-data"]),be=x.value.length>0,[de]=Zt.filterProps(e);return r(Zt,Y({ref:o},de,{modelValue:k.value,"onUpdate:modelValue":[ie=>k.value=ie,me],focused:i.value,"onUpdate:focused":ie=>i.value=ie,validationValue:x.externalValue,counterValue:e.multiple?x.value.length:k.value.length,dirty:be,class:["v-combobox",{"v-combobox--active-menu":v.value,"v-combobox--chips":!!e.chips,"v-combobox--selection-slot":!!l.selection,"v-combobox--selecting-index":m.value>-1,[`v-combobox--${e.multiple?"multiple":"single"}`]:!0},e.class],style:e.style,readonly:e.readonly,placeholder:be?void 0:e.placeholder,"onClick:clear":G,"onMousedown:control":U,onKeydown:ae}),{...l,default:()=>r(oe,null,[r(Il,Y({ref:c,modelValue:v.value,"onUpdate:modelValue":ie=>v.value=ie,activator:"parent",contentClass:"v-combobox__content",disabled:X.value,eager:e.eager,maxHeight:310,openOnClick:!1,closeOnContentClick:!1,transition:e.transition,onAfterLeave:re},e.menuProps),{default:()=>[le&&r(Vl,{ref:$,selected:E.value,selectStrategy:e.multiple?"independent":"single-independent",onMousedown:ie=>ie.preventDefault(),onKeydown:M,onFocusin:ge,onFocusout:D,onScrollPassive:N,tabindex:"-1",color:e.itemColor??e.color},{default:()=>{var ie,fe,Te;return[(ie=l["prepend-item"])==null?void 0:ie.call(l),!B.value.length&&!e.hideNoData&&(((fe=l["no-data"])==null?void 0:fe.call(l))??r(_t,{title:a(e.noDataText)},null)),r(Bl,{ref:d,renderless:!0,items:B.value},{default:Re=>{var Nt;let{item:_e,index:qe,itemRef:Xn}=Re;const In=Y(_e.props,{ref:Xn,key:qe,active:F.value&&qe===0?!0:void 0,onClick:()=>ve(_e)});return((Nt=l.item)==null?void 0:Nt.call(l,{item:_e,index:qe,props:In}))??r(_t,In,{prepend:Ct=>{let{isSelected:Zn}=Ct;return r(oe,null,[e.multiple&&!e.hideSelected?r(mn,{key:_e.value,modelValue:Zn,ripple:!1,tabindex:"-1"},null):void 0,_e.props.prependIcon&&r(Se,{icon:_e.props.prependIcon},null)])},title:()=>{var Ct,Zn;return s.value?_e.title:ob(_e.title,(Ct=A(_e))==null?void 0:Ct.title,((Zn=k.value)==null?void 0:Zn.length)??0)}})}}),(Te=l["append-item"])==null?void 0:Te.call(l)]}})]}),x.value.map((ie,fe)=>{var _e;function Te(qe){qe.stopPropagation(),qe.preventDefault(),ve(ie)}const Re={"onClick:close":Te,onMousedown(qe){qe.preventDefault(),qe.stopPropagation()},modelValue:!0,"onUpdate:modelValue":void 0};return r("div",{key:ie.value,class:["v-combobox__selection",fe===m.value&&["v-combobox__selection--selected",_.value]],style:fe===m.value?V.value:{}},[H?l.chip?r(pe,{key:"chip-defaults",defaults:{VChip:{closable:e.closableChips,size:"small",text:ie.title}}},{default:()=>{var qe;return[(qe=l.chip)==null?void 0:qe.call(l,{item:ie,index:fe,props:Re})]}}):r(Wn,Y({key:"chip",closable:e.closableChips,size:"small",text:ie.title,disabled:ie.props.disabled},Re),null):((_e=l.selection)==null?void 0:_e.call(l,{item:ie,index:fe}))??r("span",{class:"v-combobox__selection-text"},[ie.title,e.multiple&&fe<x.value.length-1&&r("span",{class:"v-combobox__selection-comma"},[gl(",")])])])})]),"append-inner":function(){var Re;for(var ie=arguments.length,fe=new Array(ie),Te=0;Te<ie;Te++)fe[Te]=arguments[Te];return r(oe,null,[(Re=l["append-inner"])==null?void 0:Re.call(l,...fe),(!e.hideNoData||e.items.length)&&e.menuIcon?r(Se,{class:"v-combobox__menu-icon",icon:e.menuIcon,onMousedown:z,onClick:Si,"aria-label":a(b.value),title:a(b.value)},null):void 0])}})}),pt({isFocused:i,isPristine:s,menu:v,search:k,selectionIndex:m,filteredItems:I,select:ve},o)}});const rb=R({fullscreen:Boolean,retainFocus:{type:Boolean,default:!0},scrollable:Boolean,...Yn({origin:"center center",scrollStrategy:"block",transition:{component:pl},zIndex:2400})},"VDialog"),ub=L()({name:"VDialog",props:rb(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{scopeId:a}=_n(),o=W();function i(u){var f,v;const c=u.relatedTarget,d=u.target;if(c!==d&&((f=o.value)!=null&&f.contentEl)&&((v=o.value)!=null&&v.globalTop)&&![document,o.value.contentEl].includes(d)&&!o.value.contentEl.contains(d)){const m=Ln(o.value.contentEl);if(!m.length)return;const g=m[0],y=m[m.length-1];c===g?y.focus():g.focus()}}Ce&&Z(()=>l.value&&e.retainFocus,u=>{u?document.addEventListener("focusin",i):document.removeEventListener("focusin",i)},{immediate:!0}),Z(l,async u=>{var c,d;await xe(),u?(c=o.value.contentEl)==null||c.focus({preventScroll:!0}):(d=o.value.activatorEl)==null||d.focus({preventScroll:!0})});const s=h(()=>Y({"aria-haspopup":"dialog","aria-expanded":String(l.value)},e.activatorProps));return j(()=>{const[u]=It.filterProps(e);return r(It,Y({ref:o,class:["v-dialog",{"v-dialog--fullscreen":e.fullscreen,"v-dialog--scrollable":e.scrollable},e.class],style:e.style},u,{modelValue:l.value,"onUpdate:modelValue":c=>l.value=c,"aria-modal":"true",activatorProps:s.value,role:"dialog"},a),{activator:n.activator,default:function(){for(var c=arguments.length,d=new Array(c),f=0;f<c;f++)d[f]=arguments[f];return r(pe,{root:"VDialog"},{default:()=>{var v;return[(v=n.default)==null?void 0:v.call(n,...d)]}})}})}),pt({},o)}});const Nn=Symbol.for("vuetify:v-expansion-panel"),cb=["default","accordion","inset","popout"],db=R({color:String,variant:{type:String,default:"default",validator:e=>cb.includes(e)},readonly:Boolean,...q(),...pn(),...ce(),...he()},"VExpansionPanels"),vb=L()({name:"VExpansionPanels",props:db(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;an(e,Nn);const{themeClasses:l}=ye(e),a=h(()=>e.variant&&`v-expansion-panels--variant-${e.variant}`);return Ee({VExpansionPanel:{color:O(e,"color")},VExpansionPanelTitle:{readonly:O(e,"readonly")}}),j(()=>r(e.tag,{class:["v-expansion-panels",l.value,a.value,e.class],style:e.style},n)),{}}}),fb=R({...q(),..._l()},"VExpansionPanelText"),rr=L()({name:"VExpansionPanelText",props:fb(),setup(e,t){let{slots:n}=t;const l=Ve(Nn);if(!l)throw new Error("[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel");const{hasContent:a,onAfterLeave:o}=no(e,l.isSelected);return j(()=>r(kl,{onAfterLeave:o},{default:()=>{var i;return[ne(r("div",{class:["v-expansion-panel-text",e.class],style:e.style},[n.default&&a.value&&r("div",{class:"v-expansion-panel-text__wrapper"},[(i=n.default)==null?void 0:i.call(n)])]),[[Pe,l.isSelected.value]])]}})),{}}}),ur=R({color:String,expandIcon:{type:se,default:"$expand"},collapseIcon:{type:se,default:"$collapse"},hideActions:Boolean,ripple:{type:[Boolean,Object],default:!1},readonly:Boolean,...q()},"VExpansionPanelTitle"),cr=L()({name:"VExpansionPanelTitle",directives:{Ripple:Ot},props:ur(),setup(e,t){let{slots:n}=t;const l=Ve(Nn);if(!l)throw new Error("[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel");const{backgroundColorClasses:a,backgroundColorStyles:o}=Be(e,"color"),i=h(()=>({collapseIcon:e.collapseIcon,disabled:l.disabled.value,expanded:l.isSelected.value,expandIcon:e.expandIcon,readonly:e.readonly}));return j(()=>{var s;return ne(r("button",{class:["v-expansion-panel-title",{"v-expansion-panel-title--active":l.isSelected.value},a.value,e.class],style:[o.value,e.style],type:"button",tabindex:l.disabled.value?-1:void 0,disabled:l.disabled.value,"aria-expanded":l.isSelected.value,onClick:e.readonly?void 0:l.toggle},[r("span",{class:"v-expansion-panel-title__overlay"},null),(s=n.default)==null?void 0:s.call(n,i.value),!e.hideActions&&r("span",{class:"v-expansion-panel-title__icon"},[n.actions?n.actions(i.value):r(Se,{icon:l.isSelected.value?e.collapseIcon:e.expandIcon},null)])]),[[Ze("ripple"),e.ripple]])}),{}}}),mb=R({title:String,text:String,bgColor:String,...q(),...Me(),...kn(),..._l(),...Ie(),...ce(),...ur()},"VExpansionPanel"),gb=L()({name:"VExpansionPanel",props:mb(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const l=Sn(e,Nn),{backgroundColorClasses:a,backgroundColorStyles:o}=Be(e,"bgColor"),{elevationClasses:i}=He(e),{roundedClasses:s}=Ae(e),u=h(()=>(l==null?void 0:l.disabled.value)||e.disabled),c=h(()=>l.group.items.value.reduce((v,m,g)=>(l.group.selected.value.includes(m.id)&&v.push(g),v),[])),d=h(()=>{const v=l.group.items.value.findIndex(m=>m.id===l.id);return!l.isSelected.value&&c.value.some(m=>m-v===1)}),f=h(()=>{const v=l.group.items.value.findIndex(m=>m.id===l.id);return!l.isSelected.value&&c.value.some(m=>m-v===-1)});return $e(Nn,l),Ee({VExpansionPanelText:{eager:O(e,"eager")}}),j(()=>{const v=!!(n.text||e.text),m=!!(n.title||e.title);return r(e.tag,{class:["v-expansion-panel",{"v-expansion-panel--active":l.isSelected.value,"v-expansion-panel--before-active":d.value,"v-expansion-panel--after-active":f.value,"v-expansion-panel--disabled":u.value},s.value,a.value,e.class],style:[o.value,e.style]},{default:()=>{var g;return[r("div",{class:["v-expansion-panel__shadow",...i.value]},null),m&&r(cr,{key:"title",collapseIcon:e.collapseIcon,color:e.color,expandIcon:e.expandIcon,hideActions:e.hideActions,ripple:e.ripple},{default:()=>[n.title?n.title():e.title]}),v&&r(rr,{key:"text"},{default:()=>[n.text?n.text():e.text]}),(g=n.default)==null?void 0:g.call(n)]}})}),{}}});const hb=R({chips:Boolean,counter:Boolean,counterSizeString:{type:String,default:"$vuetify.fileInput.counterSize"},counterString:{type:String,default:"$vuetify.fileInput.counter"},multiple:Boolean,showSize:{type:[Boolean,Number],default:!1,validator:e=>typeof e=="boolean"||[1e3,1024].includes(e)},...Bt({prependIcon:"$file"}),modelValue:{type:Array,default:()=>[],validator:e=>et(e).every(t=>t!=null&&typeof t=="object")},...Pl({clearable:!0})},"VFileInput"),yb=L()({name:"VFileInput",inheritAttrs:!1,props:hb(),emits:{"click:control":e=>!0,"mousedown:control":e=>!0,"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{t:o}=ct(),i=ue(e,"modelValue"),{isFocused:s,focus:u,blur:c}=Dt(e),d=h(()=>typeof e.showSize!="boolean"?e.showSize:void 0),f=h(()=>(i.value??[]).reduce((k,I)=>{let{size:A=0}=I;return k+A},0)),v=h(()=>yo(f.value,d.value)),m=h(()=>(i.value??[]).map(k=>{const{name:I="",size:A=0}=k;return e.showSize?`${I} (${yo(A,d.value)})`:I})),g=h(()=>{var I;const k=((I=i.value)==null?void 0:I.length)??0;return e.showSize?o(e.counterSizeString,k,v.value):o(e.counterString,k)}),y=W(),b=W(),p=W(),S=h(()=>s.value||e.active),C=h(()=>["plain","underlined"].includes(e.variant));function _(){var k;p.value!==document.activeElement&&((k=p.value)==null||k.focus()),s.value||u()}function V(k){T(k)}function x(k){l("mousedown:control",k)}function T(k){var I;(I=p.value)==null||I.click(),l("click:control",k)}function w(k){k.stopPropagation(),_(),xe(()=>{i.value=[],Ra(e["onClick:clear"],k)})}return Z(i,k=>{(!Array.isArray(k)||!k.length)&&p.value&&(p.value.value="")}),j(()=>{const k=!!(a.counter||e.counter),I=!!(k||a.details),[A,B]=Qt(n),[{modelValue:E,...F}]=Ne.filterProps(e),[X]=lo(e);return r(Ne,Y({ref:y,modelValue:i.value,"onUpdate:modelValue":$=>i.value=$,class:["v-file-input",{"v-text-field--plain-underlined":C.value},e.class],style:e.style,"onClick:prepend":V},A,F,{centerAffix:!C.value,focused:s.value}),{...a,default:$=>{let{id:N,isDisabled:M,isDirty:G,isReadonly:U,isValid:z}=$;return r(Kn,Y({ref:b,"prepend-icon":e.prependIcon,onMousedown:x,onClick:T,"onClick:clear":w,"onClick:prependInner":e["onClick:prependInner"],"onClick:appendInner":e["onClick:appendInner"]},X,{id:N.value,active:S.value||G.value,dirty:G.value,disabled:M.value,focused:s.value,error:z.value===!1}),{...a,default:ae=>{var ge;let{props:{class:re,...ve}}=ae;return r(oe,null,[r("input",Y({ref:p,type:"file",readonly:U.value,disabled:M.value,multiple:e.multiple,name:e.name,onClick:D=>{D.stopPropagation(),U.value&&D.preventDefault(),_()},onChange:D=>{if(!D.target)return;const me=D.target;i.value=[...me.files??[]]},onFocus:_,onBlur:c},ve,B),null),r("div",{class:re},[!!((ge=i.value)!=null&&ge.length)&&(a.selection?a.selection({fileNames:m.value,totalBytes:f.value,totalBytesReadable:v.value}):e.chips?m.value.map(D=>r(Wn,{key:D,size:"small",color:e.color},{default:()=>[D]})):m.value.join(", "))])])}})},details:I?$=>{var N,M;return r(oe,null,[(N=a.details)==null?void 0:N.call(a,$),k&&r(oe,null,[r("span",null,null),r(Tl,{active:!!((M=i.value)!=null&&M.length),value:g.value},a.counter)])])}:void 0})}),pt({},y,b,p)}});const bb=R({app:Boolean,color:String,height:{type:[Number,String],default:"auto"},...at(),...q(),...Me(),...yn(),...Ie(),...ce({tag:"footer"}),...he()},"VFooter"),pb=L()({name:"VFooter",props:bb(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{backgroundColorClasses:a,backgroundColorStyles:o}=Be(O(e,"color")),{borderClasses:i}=ft(e),{elevationClasses:s}=He(e),{roundedClasses:u}=Ae(e),c=K(32),{resizeRef:d}=wt(m=>{m.length&&(c.value=m[0].target.clientHeight)}),f=h(()=>e.height==="auto"?c.value:parseInt(e.height,10)),{layoutItemStyles:v}=bn({id:e.name,order:h(()=>parseInt(e.order,10)),position:h(()=>"bottom"),layoutSize:f,elementSize:h(()=>e.height==="auto"?void 0:f.value),active:h(()=>e.app),absolute:O(e,"absolute")});return j(()=>r(e.tag,{ref:d,class:["v-footer",l.value,a.value,i.value,s.value,u.value,e.class],style:[o.value,e.app?v.value:{height:J(e.height)},e.style]},n)),{}}}),kb=R({...q(),...Bg()},"VForm"),Sb=L()({name:"VForm",props:kb(),emits:{"update:modelValue":e=>!0,submit:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=Rg(e),o=W();function i(u){u.preventDefault(),a.reset()}function s(u){const c=u,d=a.validate();c.then=d.then.bind(d),c.catch=d.catch.bind(d),c.finally=d.finally.bind(d),l("submit",c),c.defaultPrevented||d.then(f=>{var m;let{valid:v}=f;v&&((m=o.value)==null||m.submit())}),c.preventDefault()}return j(()=>{var u;return r("form",{ref:o,class:["v-form",e.class],style:e.style,novalidate:!0,onReset:i,onSubmit:s},[(u=n.default)==null?void 0:u.call(n,a)])}),pt(a,o)}});const wb=R({fluid:{type:Boolean,default:!1},...q(),...ce()},"VContainer"),Cb=L()({name:"VContainer",props:wb(),setup(e,t){let{slots:n}=t;const{rtlClasses:l}=De();return j(()=>r(e.tag,{class:["v-container",{"v-container--fluid":e.fluid},l.value,e.class],style:e.style},n)),{}}}),dr=(()=>yl.reduce((e,t)=>(e[t]={type:[Boolean,String,Number],default:!1},e),{}))(),vr=(()=>yl.reduce((e,t)=>{const n="offset"+zn(t);return e[n]={type:[String,Number],default:null},e},{}))(),fr=(()=>yl.reduce((e,t)=>{const n="order"+zn(t);return e[n]={type:[String,Number],default:null},e},{}))(),ni={col:Object.keys(dr),offset:Object.keys(vr),order:Object.keys(fr)};function xb(e,t,n){let l=e;if(!(n==null||n===!1)){if(t){const a=t.replace(e,"");l+=`-${a}`}return e==="col"&&(l="v-"+l),e==="col"&&(n===""||n===!0)||(l+=`-${n}`),l.toLowerCase()}}const Vb=["auto","start","end","center","baseline","stretch"],_b=R({cols:{type:[Boolean,String,Number],default:!1},...dr,offset:{type:[String,Number],default:null},...vr,order:{type:[String,Number],default:null},...fr,alignSelf:{type:String,default:null,validator:e=>Vb.includes(e)},...q(),...ce()},"VCol"),Ib=L()({name:"VCol",props:_b(),setup(e,t){let{slots:n}=t;const l=h(()=>{const a=[];let o;for(o in ni)ni[o].forEach(s=>{const u=e[s],c=xb(o,s,u);c&&a.push(c)});const i=a.some(s=>s.startsWith("v-col-"));return a.push({"v-col":!i||!e.cols,[`v-col-${e.cols}`]:e.cols,[`offset-${e.offset}`]:e.offset,[`order-${e.order}`]:e.order,[`align-self-${e.alignSelf}`]:e.alignSelf}),a});return()=>{var a;return Jt(e.tag,{class:[l.value,e.class],style:e.style},(a=n.default)==null?void 0:a.call(n))}}}),ro=["start","end","center"],mr=["space-between","space-around","space-evenly"];function uo(e,t){return yl.reduce((n,l)=>{const a=e+zn(l);return n[a]=t(),n},{})}const Tb=[...ro,"baseline","stretch"],gr=e=>Tb.includes(e),hr=uo("align",()=>({type:String,default:null,validator:gr})),Pb=[...ro,...mr],yr=e=>Pb.includes(e),br=uo("justify",()=>({type:String,default:null,validator:yr})),Ab=[...ro,...mr,"stretch"],pr=e=>Ab.includes(e),kr=uo("alignContent",()=>({type:String,default:null,validator:pr})),li={align:Object.keys(hr),justify:Object.keys(br),alignContent:Object.keys(kr)},Bb={align:"align",justify:"justify",alignContent:"align-content"};function Rb(e,t,n){let l=Bb[e];if(n!=null){if(t){const a=t.replace(e,"");l+=`-${a}`}return l+=`-${n}`,l.toLowerCase()}}const Eb=R({dense:Boolean,noGutters:Boolean,align:{type:String,default:null,validator:gr},...hr,justify:{type:String,default:null,validator:yr},...br,alignContent:{type:String,default:null,validator:pr},...kr,...q(),...ce()},"VRow"),Lb=L()({name:"VRow",props:Eb(),setup(e,t){let{slots:n}=t;const l=h(()=>{const a=[];let o;for(o in li)li[o].forEach(i=>{const s=e[i],u=Rb(o,i,s);u&&a.push(u)});return a.push({"v-row--no-gutters":e.noGutters,"v-row--dense":e.dense,[`align-${e.align}`]:e.align,[`justify-${e.justify}`]:e.justify,[`align-content-${e.alignContent}`]:e.alignContent}),a});return()=>{var a;return Jt(e.tag,{class:["v-row",l.value,e.class],style:e.style},(a=n.default)==null?void 0:a.call(n))}}}),$b=bt("v-spacer","div","VSpacer"),Mb=R({disabled:Boolean,modelValue:{type:Boolean,default:void 0},...$s()},"VHover"),Fb=L()({name:"VHover",props:Mb(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{runOpenDelay:a,runCloseDelay:o}=Ms(e,i=>!e.disabled&&(l.value=i));return()=>{var i;return(i=n.default)==null?void 0:i.call(n,{isHovering:l.value,props:{onMouseenter:a,onMouseleave:o}})}}});const Sr=Symbol.for("vuetify:v-item-group"),Ob=R({...q(),...pn({selectedClass:"v-item--selected"}),...ce(),...he()},"VItemGroup"),Db=L()({name:"VItemGroup",props:Ob(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{isSelected:a,select:o,next:i,prev:s,selected:u}=an(e,Sr);return()=>r(e.tag,{class:["v-item-group",l.value,e.class],style:e.style},{default:()=>{var c;return[(c=n.default)==null?void 0:c.call(n,{isSelected:a,select:o,next:i,prev:s,selected:u.value})]}})}}),Nb=L()({name:"VItem",props:kn(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const{isSelected:l,select:a,toggle:o,selectedClass:i,value:s,disabled:u}=Sn(e,Sr);return()=>{var c;return(c=n.default)==null?void 0:c.call(n,{isSelected:l.value,selectedClass:i.value,select:a,toggle:o,value:s.value,disabled:u.value})}}});const zb=bt("v-kbd");const Hb=R({...q(),...Hi()},"VLayout"),jb=L()({name:"VLayout",props:Hb(),setup(e,t){let{slots:n}=t;const{layoutClasses:l,layoutStyles:a,getLayoutItem:o,items:i,layoutRef:s}=ji(e);return j(()=>{var u;return r("div",{ref:s,class:[l.value,e.class],style:[a.value,e.style]},[(u=n.default)==null?void 0:u.call(n)])}),{getLayoutItem:o,items:i}}});const Ub=R({position:{type:String,required:!0},size:{type:[Number,String],default:300},modelValue:Boolean,...q(),...yn()},"VLayoutItem"),Gb=L()({name:"VLayoutItem",props:Ub(),setup(e,t){let{slots:n}=t;const{layoutItemStyles:l}=bn({id:e.name,order:h(()=>parseInt(e.order,10)),position:O(e,"position"),elementSize:O(e,"size"),layoutSize:O(e,"size"),active:O(e,"modelValue"),absolute:O(e,"absolute")});return()=>{var a;return r("div",{class:["v-layout-item",e.class],style:[l.value,e.style]},[(a=n.default)==null?void 0:a.call(n)])}}}),Wb=R({modelValue:Boolean,options:{type:Object,default:()=>({root:void 0,rootMargin:void 0,threshold:void 0})},...q(),...dt(),...ce(),...Pt({transition:"fade-transition"})},"VLazy"),Yb=L()({name:"VLazy",directives:{intersect:jn},props:Wb(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{dimensionStyles:l}=vt(e),a=ue(e,"modelValue");function o(i){a.value||(a.value=i)}return j(()=>ne(r(e.tag,{class:["v-lazy",e.class],style:[l.value,e.style]},{default:()=>[a.value&&r(ht,{transition:e.transition,appear:!0},{default:()=>{var i;return[(i=n.default)==null?void 0:i.call(n)]}})]}),[[Ze("intersect"),{handler:o,options:e.options},null]])),{}}});const Kb=R({locale:String,fallbackLocale:String,messages:Object,rtl:{type:Boolean,default:void 0},...q()},"VLocaleProvider"),qb=L()({name:"VLocaleProvider",props:Kb(),setup(e,t){let{slots:n}=t;const{rtlClasses:l}=am(e);return j(()=>{var a;return r("div",{class:["v-locale-provider",l.value,e.class],style:e.style},[(a=n.default)==null?void 0:a.call(n)])}),{}}});const Xb=R({scrollable:Boolean,...q(),...ce({tag:"main"})},"VMain"),Zb=L()({name:"VMain",props:Xb(),setup(e,t){let{slots:n}=t;const{mainStyles:l}=Rm(),{ssrBootStyles:a}=tn();return j(()=>r(e.tag,{class:["v-main",{"v-main--scrollable":e.scrollable},e.class],style:[l.value,a.value,e.style]},{default:()=>{var o,i;return[e.scrollable?r("div",{class:"v-main__scroller"},[(o=n.default)==null?void 0:o.call(n)]):(i=n.default)==null?void 0:i.call(n)]}})),{}}});function Jb(e){let{rootEl:t,isSticky:n,layoutItemStyles:l}=e;const a=K(!1),o=K(0),i=h(()=>{const c=typeof a.value=="boolean"?"top":a.value;return[n.value?{top:"auto",bottom:"auto",height:void 0}:void 0,a.value?{[c]:J(o.value)}:{top:l.value.top}]});Je(()=>{Z(n,c=>{c?window.addEventListener("scroll",u,{passive:!0}):window.removeEventListener("scroll",u)},{immediate:!0})}),nt(()=>{window.removeEventListener("scroll",u)});let s=0;function u(){const c=s>window.scrollY?"up":"down",d=t.value.getBoundingClientRect(),f=parseFloat(l.value.top??0),v=window.scrollY-Math.max(0,o.value-f),m=d.height+Math.max(o.value,f)-window.scrollY-window.innerHeight,g=parseFloat(getComputedStyle(t.value).getPropertyValue("--v-body-scroll-y"))||0;d.height<window.innerHeight-f?(a.value="top",o.value=f):c==="up"&&a.value==="bottom"||c==="down"&&a.value==="top"?(o.value=window.scrollY+d.top-g,a.value=!0):c==="down"&&m<=0?(o.value=0,a.value="bottom"):c==="up"&&v<=0&&(g?a.value!=="top"&&(o.value=-v+g+f,a.value="top"):(o.value=d.top+v,a.value="top")),s=window.scrollY}return{isStuck:a,stickyStyles:i}}const Qb=100,ep=20;function ai(e){const t=1.41421356237;return(e<0?-1:1)*Math.sqrt(Math.abs(e))*t}function oi(e){if(e.length<2)return 0;if(e.length===2)return e[1].t===e[0].t?0:(e[1].d-e[0].d)/(e[1].t-e[0].t);let t=0;for(let n=e.length-1;n>0;n--){if(e[n].t===e[n-1].t)continue;const l=ai(t),a=(e[n].d-e[n-1].d)/(e[n].t-e[n-1].t);t+=(a-l)*Math.abs(a),n===e.length-1&&(t*=.5)}return ai(t)*1e3}function tp(){const e={};function t(a){Array.from(a.changedTouches).forEach(o=>{(e[o.identifier]??(e[o.identifier]=new vf(ep))).push([a.timeStamp,o])})}function n(a){Array.from(a.changedTouches).forEach(o=>{delete e[o.identifier]})}function l(a){var c;const o=(c=e[a])==null?void 0:c.values().reverse();if(!o)throw new Error(`No samples for touch id ${a}`);const i=o[0],s=[],u=[];for(const d of o){if(i[0]-d[0]>Qb)break;s.push({t:d[0],d:d[1].clientX}),u.push({t:d[0],d:d[1].clientY})}return{x:oi(s),y:oi(u),get direction(){const{x:d,y:f}=this,[v,m]=[Math.abs(d),Math.abs(f)];return v>m&&d>=0?"right":v>m&&d<=0?"left":m>v&&f>=0?"down":m>v&&f<=0?"up":np()}}}return{addMovement:t,endTouch:n,getVelocity:l}}function np(){throw new Error}function lp(e){let{isActive:t,isTemporary:n,width:l,touchless:a,position:o}=e;Je(()=>{window.addEventListener("touchstart",p,{passive:!0}),window.addEventListener("touchmove",S,{passive:!1}),window.addEventListener("touchend",C,{passive:!0})}),nt(()=>{window.removeEventListener("touchstart",p),window.removeEventListener("touchmove",S),window.removeEventListener("touchend",C)});const i=h(()=>["left","right"].includes(o.value)),{addMovement:s,endTouch:u,getVelocity:c}=tp();let d=!1;const f=K(!1),v=K(0),m=K(0);let g;function y(V,x){return(o.value==="left"?V:o.value==="right"?document.documentElement.clientWidth-V:o.value==="top"?V:o.value==="bottom"?document.documentElement.clientHeight-V:un())-(x?l.value:0)}function b(V){let x=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;const T=o.value==="left"?(V-m.value)/l.value:o.value==="right"?(document.documentElement.clientWidth-V-m.value)/l.value:o.value==="top"?(V-m.value)/l.value:o.value==="bottom"?(document.documentElement.clientHeight-V-m.value)/l.value:un();return x?Math.max(0,Math.min(1,T)):T}function p(V){if(a.value)return;const x=V.changedTouches[0].clientX,T=V.changedTouches[0].clientY,w=25,k=o.value==="left"?x<w:o.value==="right"?x>document.documentElement.clientWidth-w:o.value==="top"?T<w:o.value==="bottom"?T>document.documentElement.clientHeight-w:un(),I=t.value&&(o.value==="left"?x<l.value:o.value==="right"?x>document.documentElement.clientWidth-l.value:o.value==="top"?T<l.value:o.value==="bottom"?T>document.documentElement.clientHeight-l.value:un());(k||I||t.value&&n.value)&&(d=!0,g=[x,T],m.value=y(i.value?x:T,t.value),v.value=b(i.value?x:T),u(V),s(V))}function S(V){const x=V.changedTouches[0].clientX,T=V.changedTouches[0].clientY;if(d){if(!V.cancelable){d=!1;return}const k=Math.abs(x-g[0]),I=Math.abs(T-g[1]);(i.value?k>I&&k>3:I>k&&I>3)?(f.value=!0,d=!1):(i.value?I:k)>3&&(d=!1)}if(!f.value)return;V.preventDefault(),s(V);const w=b(i.value?x:T,!1);v.value=Math.max(0,Math.min(1,w)),w>1?m.value=y(i.value?x:T,!0):w<0&&(m.value=y(i.value?x:T,!1))}function C(V){if(d=!1,!f.value)return;s(V),f.value=!1;const x=c(V.changedTouches[0].identifier),T=Math.abs(x.x),w=Math.abs(x.y);(i.value?T>w&&T>400:w>T&&w>3)?t.value=x.direction===({left:"right",right:"left",top:"down",bottom:"up"}[o.value]||un()):t.value=v.value>.5}const _=h(()=>f.value?{transform:o.value==="left"?`translateX(calc(-100% + ${v.value*l.value}px))`:o.value==="right"?`translateX(calc(100% - ${v.value*l.value}px))`:o.value==="top"?`translateY(calc(-100% + ${v.value*l.value}px))`:o.value==="bottom"?`translateY(calc(100% - ${v.value*l.value}px))`:un(),transition:"none"}:void 0);return{isDragging:f,dragProgress:v,dragStyles:_}}function un(){throw new Error}const ap=["start","end","left","right","top","bottom"],op=R({color:String,disableResizeWatcher:Boolean,disableRouteWatcher:Boolean,expandOnHover:Boolean,floating:Boolean,modelValue:{type:Boolean,default:null},permanent:Boolean,rail:{type:Boolean,default:null},railWidth:{type:[Number,String],default:56},scrim:{type:[Boolean,String],default:!0},image:String,temporary:Boolean,touchless:Boolean,width:{type:[Number,String],default:256},location:{type:String,default:"start",validator:e=>ap.includes(e)},sticky:Boolean,...at(),...q(),...Me(),...yn(),...Ie(),...ce({tag:"nav"}),...he()},"VNavigationDrawer"),ip=L()({name:"VNavigationDrawer",props:op(),emits:{"update:modelValue":e=>!0,"update:rail":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{isRtl:o}=De(),{themeClasses:i}=ye(e),{borderClasses:s}=ft(e),{backgroundColorClasses:u,backgroundColorStyles:c}=Be(O(e,"color")),{elevationClasses:d}=He(e),{mobile:f}=en(),{roundedClasses:v}=Ae(e),m=es(),g=ue(e,"modelValue",null,G=>!!G),{ssrBootStyles:y}=tn(),{scopeId:b}=_n(),p=W(),S=K(!1),C=h(()=>e.rail&&e.expandOnHover&&S.value?Number(e.width):Number(e.rail?e.railWidth:e.width)),_=h(()=>Wl(e.location,o.value)),V=h(()=>!e.permanent&&(f.value||e.temporary)),x=h(()=>e.sticky&&!V.value&&_.value!=="bottom");e.expandOnHover&&e.rail!=null&&Z(S,G=>l("update:rail",!G)),e.disableResizeWatcher||Z(V,G=>!e.permanent&&xe(()=>g.value=!G)),!e.disableRouteWatcher&&m&&Z(m.currentRoute,()=>V.value&&(g.value=!1)),Z(()=>e.permanent,G=>{G&&(g.value=!0)}),xa(()=>{e.modelValue!=null||V.value||(g.value=e.permanent||!f.value)});const{isDragging:T,dragProgress:w,dragStyles:k}=lp({isActive:g,isTemporary:V,width:C,touchless:O(e,"touchless"),position:_}),I=h(()=>{const G=V.value?0:e.rail&&e.expandOnHover?Number(e.railWidth):C.value;return T.value?G*w.value:G}),{layoutItemStyles:A,layoutItemScrimStyles:B}=bn({id:e.name,order:h(()=>parseInt(e.order,10)),position:_,layoutSize:I,elementSize:C,active:h(()=>g.value||T.value),disableTransitions:h(()=>T.value),absolute:h(()=>e.absolute||x.value&&typeof E.value!="string")}),{isStuck:E,stickyStyles:F}=Jb({rootEl:p,isSticky:x,layoutItemStyles:A}),X=Be(h(()=>typeof e.scrim=="string"?e.scrim:null)),$=h(()=>({...T.value?{opacity:w.value*.2,transition:"none"}:void 0,...B.value}));Ee({VList:{bgColor:"transparent"}});function N(){S.value=!0}function M(){S.value=!1}return j(()=>{const G=a.image||e.image;return r(oe,null,[r(e.tag,Y({ref:p,onMouseenter:N,onMouseleave:M,class:["v-navigation-drawer",`v-navigation-drawer--${_.value}`,{"v-navigation-drawer--expand-on-hover":e.expandOnHover,"v-navigation-drawer--floating":e.floating,"v-navigation-drawer--is-hovering":S.value,"v-navigation-drawer--rail":e.rail,"v-navigation-drawer--temporary":V.value,"v-navigation-drawer--active":g.value,"v-navigation-drawer--sticky":x.value},i.value,u.value,s.value,d.value,v.value,e.class],style:[c.value,A.value,k.value,y.value,F.value,e.style]},b,n),{default:()=>{var U,z,ae,re;return[G&&r("div",{key:"image",class:"v-navigation-drawer__img"},[a.image?(U=a.image)==null?void 0:U.call(a,{image:e.image}):r("img",{src:e.image,alt:""},null)]),a.prepend&&r("div",{class:"v-navigation-drawer__prepend"},[(z=a.prepend)==null?void 0:z.call(a)]),r("div",{class:"v-navigation-drawer__content"},[(ae=a.default)==null?void 0:ae.call(a)]),a.append&&r("div",{class:"v-navigation-drawer__append"},[(re=a.append)==null?void 0:re.call(a)])]}}),r(Rt,{name:"fade-transition"},{default:()=>[V.value&&(T.value||g.value)&&!!e.scrim&&r("div",Y({class:["v-navigation-drawer__scrim",X.backgroundColorClasses.value],style:[$.value,X.backgroundColorStyles.value],onClick:()=>g.value=!1},b),null)]})])}),{isStuck:E}}}),sp=ut({name:"VNoSsr",setup(e,t){let{slots:n}=t;const l=Fs();return()=>{var a;return l.value&&((a=n.default)==null?void 0:a.call(n))}}});function rp(){const e=W([]);Hr(()=>e.value=[]);function t(n,l){e.value[l]=n}return{refs:e,updateRef:t}}const up=R({activeColor:String,start:{type:[Number,String],default:1},modelValue:{type:Number,default:e=>e.start},disabled:Boolean,length:{type:[Number,String],default:1,validator:e=>e%1===0},totalVisible:[Number,String],firstIcon:{type:se,default:"$first"},prevIcon:{type:se,default:"$prev"},nextIcon:{type:se,default:"$next"},lastIcon:{type:se,default:"$last"},ariaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.root"},pageAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.page"},currentPageAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.currentPage"},firstAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.first"},previousAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.previous"},nextAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.next"},lastAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.last"},ellipsis:{type:String,default:"..."},showFirstLastPage:Boolean,...at(),...q(),...Fe(),...Me(),...Ie(),...At(),...ce({tag:"nav"}),...he(),...mt({variant:"text"})},"VPagination"),cp=L()({name:"VPagination",props:up(),emits:{"update:modelValue":e=>!0,first:e=>!0,prev:e=>!0,next:e=>!0,last:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=ue(e,"modelValue"),{t:o,n:i}=ct(),{isRtl:s}=De(),{themeClasses:u}=ye(e),{width:c}=en(),d=K(-1);Ee(void 0,{scoped:!0});const{resizeRef:f}=wt(w=>{if(!w.length)return;const{target:k,contentRect:I}=w[0],A=k.querySelector(".v-pagination__list > *");if(!A)return;const B=I.width,E=A.offsetWidth+parseFloat(getComputedStyle(A).marginRight)*2;d.value=y(B,E)}),v=h(()=>parseInt(e.length,10)),m=h(()=>parseInt(e.start,10)),g=h(()=>e.totalVisible?parseInt(e.totalVisible,10):d.value>=0?d.value:y(c.value,58));function y(w,k){const I=e.showFirstLastPage?5:3;return Math.max(0,Math.floor(+((w-k*I)/k).toFixed(2)))}const b=h(()=>{if(v.value<=0||isNaN(v.value)||v.value>Number.MAX_SAFE_INTEGER)return[];if(g.value<=1)return[a.value];if(v.value<=g.value)return xt(v.value,m.value);const w=g.value%2===0,k=w?g.value/2:Math.floor(g.value/2),I=w?k:k+1,A=v.value-k;if(I-a.value>=0)return[...xt(Math.max(1,g.value-1),m.value),e.ellipsis,v.value];if(a.value-A>=(w?1:0)){const B=g.value-1,E=v.value-B+m.value;return[m.value,e.ellipsis,...xt(B,E)]}else{const B=Math.max(1,g.value-3),E=B===1?a.value:a.value-Math.ceil(B/2)+m.value;return[m.value,e.ellipsis,...xt(B,E),e.ellipsis,v.value]}});function p(w,k,I){w.preventDefault(),a.value=k,I&&l(I,k)}const{refs:S,updateRef:C}=rp();Ee({VPaginationBtn:{color:O(e,"color"),border:O(e,"border"),density:O(e,"density"),size:O(e,"size"),variant:O(e,"variant"),rounded:O(e,"rounded"),elevation:O(e,"elevation")}});const _=h(()=>b.value.map((w,k)=>{const I=A=>C(A,k);if(typeof w=="string")return{isActive:!1,key:`ellipsis-${k}`,page:w,props:{ref:I,ellipsis:!0,icon:!0,disabled:!0}};{const A=w===a.value;return{isActive:A,key:w,page:i(w),props:{ref:I,ellipsis:!1,icon:!0,disabled:!!e.disabled||+e.length<2,color:A?e.activeColor:e.color,ariaCurrent:A,ariaLabel:o(A?e.currentPageAriaLabel:e.pageAriaLabel,w),onClick:B=>p(B,w)}}}})),V=h(()=>{const w=!!e.disabled||a.value<=m.value,k=!!e.disabled||a.value>=m.value+v.value-1;return{first:e.showFirstLastPage?{icon:s.value?e.lastIcon:e.firstIcon,onClick:I=>p(I,m.value,"first"),disabled:w,ariaLabel:o(e.firstAriaLabel),ariaDisabled:w}:void 0,prev:{icon:s.value?e.nextIcon:e.prevIcon,onClick:I=>p(I,a.value-1,"prev"),disabled:w,ariaLabel:o(e.previousAriaLabel),ariaDisabled:w},next:{icon:s.value?e.prevIcon:e.nextIcon,onClick:I=>p(I,a.value+1,"next"),disabled:k,ariaLabel:o(e.nextAriaLabel),ariaDisabled:k},last:e.showFirstLastPage?{icon:s.value?e.firstIcon:e.lastIcon,onClick:I=>p(I,m.value+v.value-1,"last"),disabled:k,ariaLabel:o(e.lastAriaLabel),ariaDisabled:k}:void 0}});function x(){var k;const w=a.value-m.value;(k=S.value[w])==null||k.$el.focus()}function T(w){w.key===Ul.left&&!e.disabled&&a.value>+e.start?(a.value=a.value-1,xe(x)):w.key===Ul.right&&!e.disabled&&a.value<m.value+v.value-1&&(a.value=a.value+1,xe(x))}return j(()=>r(e.tag,{ref:f,class:["v-pagination",u.value,e.class],style:e.style,role:"navigation","aria-label":o(e.ariaLabel),onKeydown:T,"data-test":"v-pagination-root"},{default:()=>[r("ul",{class:"v-pagination__list"},[e.showFirstLastPage&&r("li",{key:"first",class:"v-pagination__first","data-test":"v-pagination-first"},[n.first?n.first(V.value.first):r(Ke,Y({_as:"VPaginationBtn"},V.value.first),null)]),r("li",{key:"prev",class:"v-pagination__prev","data-test":"v-pagination-prev"},[n.prev?n.prev(V.value.prev):r(Ke,Y({_as:"VPaginationBtn"},V.value.prev),null)]),_.value.map((w,k)=>r("li",{key:w.key,class:["v-pagination__item",{"v-pagination__item--is-active":w.isActive}],"data-test":"v-pagination-item"},[n.item?n.item(w):r(Ke,Y({_as:"VPaginationBtn"},w.props),{default:()=>[w.page]})])),r("li",{key:"next",class:"v-pagination__next","data-test":"v-pagination-next"},[n.next?n.next(V.value.next):r(Ke,Y({_as:"VPaginationBtn"},V.value.next),null)]),e.showFirstLastPage&&r("li",{key:"last",class:"v-pagination__last","data-test":"v-pagination-last"},[n.last?n.last(V.value.last):r(Ke,Y({_as:"VPaginationBtn"},V.value.last),null)])])]})),{}}});function dp(e){return Math.floor(Math.abs(e))*Math.sign(e)}const vp=R({scale:{type:[Number,String],default:.5},...q()},"VParallax"),fp=L()({name:"VParallax",props:vp(),setup(e,t){let{slots:n}=t;const{intersectionRef:l,isIntersecting:a}=Ya(),{resizeRef:o,contentRect:i}=wt(),{height:s}=en(),u=W();tt(()=>{var m;l.value=o.value=(m=u.value)==null?void 0:m.$el});let c;Z(a,m=>{m?(c=Ma(l.value),c=c===document.scrollingElement?document:c,c.addEventListener("scroll",v,{passive:!0}),v()):c.removeEventListener("scroll",v)}),nt(()=>{c==null||c.removeEventListener("scroll",v)}),Z(s,v),Z(()=>{var m;return(m=i.value)==null?void 0:m.height},v);const d=h(()=>1-Ue(+e.scale));let f=-1;function v(){a.value&&(cancelAnimationFrame(f),f=requestAnimationFrame(()=>{var V;const m=((V=u.value)==null?void 0:V.$el).querySelector(".v-img__img");if(!m)return;const g=c instanceof Document?document.documentElement.clientHeight:c.clientHeight,y=c instanceof Document?window.scrollY:c.scrollTop,b=l.value.getBoundingClientRect().top+y,p=i.value.height,S=b+(p-g)/2,C=dp((y-S)*d.value),_=Math.max(1,(d.value*(g-p)+p)/p);m.style.setProperty("transform",`translateY(${C}px) scale(${_})`)}))}return j(()=>r(qt,{class:["v-parallax",{"v-parallax--active":a.value},e.class],style:e.style,ref:u,cover:!0,onLoadstart:v,onLoad:v},n)),{}}}),mp=R({...wl({falseIcon:"$radioOff",trueIcon:"$radioOn"})},"VRadio"),gp=L()({name:"VRadio",props:mp(),setup(e,t){let{slots:n}=t;return j(()=>r(Xt,Y(e,{class:["v-radio",e.class],style:e.style,type:"radio"}),n)),{}}});const hp=R({height:{type:[Number,String],default:"auto"},...Bt(),...rt(Qa(),["multiple"]),trueIcon:{type:se,default:"$radioOn"},falseIcon:{type:se,default:"$radioOff"},type:{type:String,default:"radio"}},"VRadioGroup"),yp=L()({name:"VRadioGroup",inheritAttrs:!1,props:hp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const a=We(),o=h(()=>e.id||`radio-group-${a}`),i=ue(e,"modelValue");return j(()=>{const[s,u]=Qt(n),[c,d]=Ne.filterProps(e),[f,v]=Xt.filterProps(e),m=l.label?l.label({label:e.label,props:{for:o.value}}):e.label;return r(Ne,Y({class:["v-radio-group",e.class],style:e.style},s,c,{modelValue:i.value,"onUpdate:modelValue":g=>i.value=g,id:o.value}),{...l,default:g=>{let{id:y,messagesId:b,isDisabled:p,isReadonly:S}=g;return r(oe,null,[m&&r(Vn,{id:y.value},{default:()=>[m]}),r(ds,Y(f,{id:y.value,"aria-describedby":b.value,defaultsTarget:"VRadio",trueIcon:e.trueIcon,falseIcon:e.falseIcon,type:e.type,disabled:p.value,readonly:S.value,"aria-labelledby":m?y.value:void 0,multiple:!1},u,{modelValue:i.value,"onUpdate:modelValue":C=>i.value=C}),l)])}})}),{}}}),bp=R({...Cl(),...Bt(),...lr(),strict:Boolean,modelValue:{type:Array,default:()=>[0,0]}},"VRangeSlider"),pp=L()({name:"VRangeSlider",props:bp(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,end:e=>!0,start:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=W(),o=W(),i=W(),{rtlClasses:s}=De();function u(k){if(!a.value||!o.value)return;const I=ma(k,a.value.$el,e.direction),A=ma(k,o.value.$el,e.direction),B=Math.abs(I),E=Math.abs(A);return B<E||B===E&&I<0?a.value.$el:o.value.$el}const c=ar(e),d=ue(e,"modelValue",void 0,k=>k!=null&&k.length?k.map(I=>c.roundValue(I)):[0,0]),{activeThumbRef:f,hasLabels:v,max:m,min:g,mousePressed:y,onSliderMousedown:b,onSliderTouchstart:p,position:S,trackContainerRef:C}=or({props:e,steps:c,onSliderStart:()=>{l("start",d.value)},onSliderEnd:k=>{var B;let{value:I}=k;const A=f.value===((B=a.value)==null?void 0:B.$el)?[I,d.value[1]]:[d.value[0],I];!e.strict&&A[0]<A[1]&&(d.value=A),l("end",d.value)},onSliderMove:k=>{var E,F,X,$;let{value:I}=k;const[A,B]=d.value;!e.strict&&A===B&&A!==g.value&&(f.value=I>A?(E=o.value)==null?void 0:E.$el:(F=a.value)==null?void 0:F.$el,(X=f.value)==null||X.focus()),f.value===(($=a.value)==null?void 0:$.$el)?d.value=[Math.min(I,B),B]:d.value=[A,Math.max(A,I)]},getActiveThumb:u}),{isFocused:_,focus:V,blur:x}=Dt(e),T=h(()=>S(d.value[0])),w=h(()=>S(d.value[1]));return j(()=>{const[k,I]=Ne.filterProps(e),A=!!(e.label||n.label||n.prepend);return r(Ne,Y({class:["v-slider","v-range-slider",{"v-slider--has-labels":!!n["tick-label"]||v.value,"v-slider--focused":_.value,"v-slider--pressed":y.value,"v-slider--disabled":e.disabled},s.value,e.class],style:e.style,ref:i},k,{focused:_.value}),{...n,prepend:A?B=>{var E,F;return r(oe,null,[((E=n.label)==null?void 0:E.call(n,B))??(e.label?r(Vn,{class:"v-slider__label",text:e.label},null):void 0),(F=n.prepend)==null?void 0:F.call(n,B)])}:void 0,default:B=>{var X,$;let{id:E,messagesId:F}=B;return r("div",{class:"v-slider__container",onMousedown:b,onTouchstartPassive:p},[r("input",{id:`${E.value}_start`,name:e.name||E.value,disabled:!!e.disabled,readonly:!!e.readonly,tabindex:"-1",value:d.value[0]},null),r("input",{id:`${E.value}_stop`,name:e.name||E.value,disabled:!!e.disabled,readonly:!!e.readonly,tabindex:"-1",value:d.value[1]},null),r(ir,{ref:C,start:T.value,stop:w.value},{"tick-label":n["tick-label"]}),r(ga,{ref:a,"aria-describedby":F.value,focused:_&&f.value===((X=a.value)==null?void 0:X.$el),modelValue:d.value[0],"onUpdate:modelValue":N=>d.value=[N,d.value[1]],onFocus:N=>{var M,G,U,z;V(),f.value=(M=a.value)==null?void 0:M.$el,d.value[0]===d.value[1]&&d.value[1]===g.value&&N.relatedTarget!==((G=o.value)==null?void 0:G.$el)&&((U=a.value)==null||U.$el.blur(),(z=o.value)==null||z.$el.focus())},onBlur:()=>{x(),f.value=void 0},min:g.value,max:d.value[1],position:T.value},{"thumb-label":n["thumb-label"]}),r(ga,{ref:o,"aria-describedby":F.value,focused:_&&f.value===(($=o.value)==null?void 0:$.$el),modelValue:d.value[1],"onUpdate:modelValue":N=>d.value=[d.value[0],N],onFocus:N=>{var M,G,U,z;V(),f.value=(M=o.value)==null?void 0:M.$el,d.value[0]===d.value[1]&&d.value[0]===m.value&&N.relatedTarget!==((G=a.value)==null?void 0:G.$el)&&((U=o.value)==null||U.$el.blur(),(z=a.value)==null||z.$el.focus())},onBlur:()=>{x(),f.value=void 0},min:d.value[0],max:m.value,position:w.value},{"thumb-label":n["thumb-label"]})])}})}),{}}});const kp=R({name:String,itemAriaLabel:{type:String,default:"$vuetify.rating.ariaLabel.item"},activeColor:String,color:String,clearable:Boolean,disabled:Boolean,emptyIcon:{type:se,default:"$ratingEmpty"},fullIcon:{type:se,default:"$ratingFull"},halfIncrements:Boolean,hover:Boolean,length:{type:[Number,String],default:5},readonly:Boolean,modelValue:{type:[Number,String],default:0},itemLabels:Array,itemLabelPosition:{type:String,default:"top",validator:e=>["top","bottom"].includes(e)},ripple:Boolean,...q(),...Fe(),...At(),...ce(),...he()},"VRating"),Sp=L()({name:"VRating",props:kp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{t:l}=ct(),{themeClasses:a}=ye(e),o=ue(e,"modelValue"),i=h(()=>Ue(parseFloat(o.value),0,+e.length)),s=h(()=>xt(Number(e.length),1)),u=h(()=>s.value.flatMap(y=>e.halfIncrements?[y-.5,y]:[y])),c=K(-1),d=h(()=>u.value.map(y=>{const b=e.hover&&c.value>-1,p=i.value>=y,S=c.value>=y,_=(b?S:p)?e.fullIcon:e.emptyIcon,V=e.activeColor??e.color,x=p||S?V:e.color;return{isFilled:p,isHovered:S,icon:_,color:x}})),f=h(()=>[0,...u.value].map(y=>{function b(){c.value=y}function p(){c.value=-1}function S(){e.disabled||e.readonly||(o.value=i.value===y&&e.clearable?0:y)}return{onMouseenter:e.hover?b:void 0,onMouseleave:e.hover?p:void 0,onClick:S}})),v=h(()=>e.name??`v-rating-${We()}`);function m(y){var w,k;let{value:b,index:p,showStar:S=!0}=y;const{onMouseenter:C,onMouseleave:_,onClick:V}=f.value[p+1],x=`${v.value}-${String(b).replace(".","-")}`,T={color:(w=d.value[p])==null?void 0:w.color,density:e.density,disabled:e.disabled,icon:(k=d.value[p])==null?void 0:k.icon,ripple:e.ripple,size:e.size,variant:"plain"};return r(oe,null,[r("label",{for:x,class:{"v-rating__item--half":e.halfIncrements&&b%1>0,"v-rating__item--full":e.halfIncrements&&b%1===0},onMouseenter:C,onMouseleave:_,onClick:V},[r("span",{class:"v-rating__hidden"},[l(e.itemAriaLabel,b,e.length)]),S?n.item?n.item({...d.value[p],props:T,value:b,index:p,rating:i.value}):r(Ke,Y({"aria-label":l(e.itemAriaLabel,b,e.length)},T),null):void 0]),r("input",{class:"v-rating__hidden",name:v.value,id:x,type:"radio",value:b,checked:i.value===b,tabindex:-1,readonly:e.readonly,disabled:e.disabled},null)])}function g(y){return n["item-label"]?n["item-label"](y):y.label?r("span",null,[y.label]):r("span",null,[gl(" ")])}return j(()=>{var b;const y=!!((b=e.itemLabels)!=null&&b.length)||n["item-label"];return r(e.tag,{class:["v-rating",{"v-rating--hover":e.hover,"v-rating--readonly":e.readonly},a.value,e.class],style:e.style},{default:()=>[r(m,{value:0,index:-1,showStar:!1},null),s.value.map((p,S)=>{var C,_;return r("div",{class:"v-rating__wrapper"},[y&&e.itemLabelPosition==="top"?g({value:p,index:S,label:(C=e.itemLabels)==null?void 0:C[S]}):void 0,r("div",{class:"v-rating__item"},[e.halfIncrements?r(oe,null,[r(m,{value:p-.5,index:S*2},null),r(m,{value:p,index:S*2+1},null)]):r(m,{value:p,index:S},null)]),y&&e.itemLabelPosition==="bottom"?g({value:p,index:S,label:(_=e.itemLabels)==null?void 0:_[S]}):void 0])})]})}),{}}});function ii(e){const n=Math.abs(e);return Math.sign(e)*(n/((1/.501-2)*(1-n)+1))}function si(e){let{selectedElement:t,containerSize:n,contentSize:l,isRtl:a,currentScrollOffset:o,isHorizontal:i}=e;const s=i?t.clientWidth:t.clientHeight,u=i?t.offsetLeft:t.offsetTop,c=a&&i?l-u-s:u,d=n+o,f=s+c,v=s*.4;return c<=o?o=Math.max(c-v,0):d<=f&&(o=Math.min(o-(d-f-v),l-n)),o}function wp(e){let{selectedElement:t,containerSize:n,contentSize:l,isRtl:a,isHorizontal:o}=e;const i=o?t.clientWidth:t.clientHeight,s=o?t.offsetLeft:t.offsetTop,u=a&&o?l-s-i/2-n/2:s+i/2-n/2;return Math.min(l-n,Math.max(0,u))}const wr=Symbol.for("vuetify:v-slide-group"),Cr=R({centerActive:Boolean,direction:{type:String,default:"horizontal"},symbol:{type:null,default:wr},nextIcon:{type:se,default:"$next"},prevIcon:{type:se,default:"$prev"},showArrows:{type:[Boolean,String],validator:e=>typeof e=="boolean"||["always","desktop","mobile"].includes(e)},...q(),...ce(),...pn({selectedClass:"v-slide-group-item--active"})},"VSlideGroup"),ba=L()({name:"VSlideGroup",props:Cr(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{isRtl:l}=De(),{mobile:a}=en(),o=an(e,e.symbol),i=K(!1),s=K(0),u=K(0),c=K(0),d=h(()=>e.direction==="horizontal"),{resizeRef:f,contentRect:v}=wt(),{resizeRef:m,contentRect:g}=wt(),y=h(()=>o.selected.value.length?o.items.value.findIndex(U=>U.id===o.selected.value[0]):-1),b=h(()=>o.selected.value.length?o.items.value.findIndex(U=>U.id===o.selected.value[o.selected.value.length-1]):-1);if(Ce){let U=-1;Z(()=>[o.selected.value,v.value,g.value,d.value],()=>{cancelAnimationFrame(U),U=requestAnimationFrame(()=>{if(v.value&&g.value){const z=d.value?"width":"height";u.value=v.value[z],c.value=g.value[z],i.value=u.value+1<c.value}if(y.value>=0&&m.value){const z=m.value.children[b.value];y.value===0||!i.value?s.value=0:e.centerActive?s.value=wp({selectedElement:z,containerSize:u.value,contentSize:c.value,isRtl:l.value,isHorizontal:d.value}):i.value&&(s.value=si({selectedElement:z,containerSize:u.value,contentSize:c.value,isRtl:l.value,currentScrollOffset:s.value,isHorizontal:d.value}))}})})}const p=K(!1);let S=0,C=0;function _(U){const z=d.value?"clientX":"clientY";C=(l.value&&d.value?-1:1)*s.value,S=U.touches[0][z],p.value=!0}function V(U){if(!i.value)return;const z=d.value?"clientX":"clientY",ae=l.value&&d.value?-1:1;s.value=ae*(C+S-U.touches[0][z])}function x(U){const z=c.value-u.value;s.value<0||!i.value?s.value=0:s.value>=z&&(s.value=z),p.value=!1}function T(){f.value&&(f.value[d.value?"scrollLeft":"scrollTop"]=0)}const w=K(!1);function k(U){if(w.value=!0,!(!i.value||!m.value)){for(const z of U.composedPath())for(const ae of m.value.children)if(ae===z){s.value=si({selectedElement:ae,containerSize:u.value,contentSize:c.value,isRtl:l.value,currentScrollOffset:s.value,isHorizontal:d.value});return}}}function I(U){w.value=!1}function A(U){var z;!w.value&&!(U.relatedTarget&&((z=m.value)!=null&&z.contains(U.relatedTarget)))&&E()}function B(U){m.value&&(d.value?U.key==="ArrowRight"?E(l.value?"prev":"next"):U.key==="ArrowLeft"&&E(l.value?"next":"prev"):U.key==="ArrowDown"?E("next"):U.key==="ArrowUp"&&E("prev"),U.key==="Home"?E("first"):U.key==="End"&&E("last"))}function E(U){var z,ae,re,ve,ge;if(m.value)if(!U)(z=Ln(m.value)[0])==null||z.focus();else if(U==="next"){const D=(ae=m.value.querySelector(":focus"))==null?void 0:ae.nextElementSibling;D?D.focus():E("first")}else if(U==="prev"){const D=(re=m.value.querySelector(":focus"))==null?void 0:re.previousElementSibling;D?D.focus():E("last")}else U==="first"?(ve=m.value.firstElementChild)==null||ve.focus():U==="last"&&((ge=m.value.lastElementChild)==null||ge.focus())}function F(U){const z=s.value+(U==="prev"?-1:1)*u.value;s.value=Ue(z,0,c.value-u.value)}const X=h(()=>{let U=s.value>c.value-u.value?-(c.value-u.value)+ii(c.value-u.value-s.value):-s.value;s.value<=0&&(U=ii(-s.value));const z=l.value&&d.value?-1:1;return{transform:`translate${d.value?"X":"Y"}(${z*U}px)`,transition:p.value?"none":"",willChange:p.value?"transform":""}}),$=h(()=>({next:o.next,prev:o.prev,select:o.select,isSelected:o.isSelected})),N=h(()=>{switch(e.showArrows){case"always":return!0;case"desktop":return!a.value;case!0:return i.value||Math.abs(s.value)>0;case"mobile":return a.value||i.value||Math.abs(s.value)>0;default:return!a.value&&(i.value||Math.abs(s.value)>0)}}),M=h(()=>Math.abs(s.value)>0),G=h(()=>c.value>Math.abs(s.value)+u.value);return j(()=>r(e.tag,{class:["v-slide-group",{"v-slide-group--vertical":!d.value,"v-slide-group--has-affixes":N.value,"v-slide-group--is-overflowing":i.value},e.class],style:e.style,tabindex:w.value||o.selected.value.length?-1:0,onFocus:A},{default:()=>{var U,z,ae;return[N.value&&r("div",{key:"prev",class:["v-slide-group__prev",{"v-slide-group__prev--disabled":!M.value}],onClick:()=>F("prev")},[((U=n.prev)==null?void 0:U.call(n,$.value))??r(Ql,null,{default:()=>[r(Se,{icon:l.value?e.nextIcon:e.prevIcon},null)]})]),r("div",{key:"container",ref:f,class:"v-slide-group__container",onScroll:T},[r("div",{ref:m,class:"v-slide-group__content",style:X.value,onTouchstartPassive:_,onTouchmovePassive:V,onTouchendPassive:x,onFocusin:k,onFocusout:I,onKeydown:B},[(z=n.default)==null?void 0:z.call(n,$.value)])]),N.value&&r("div",{key:"next",class:["v-slide-group__next",{"v-slide-group__next--disabled":!G.value}],onClick:()=>F("next")},[((ae=n.next)==null?void 0:ae.call(n,$.value))??r(Ql,null,{default:()=>[r(Se,{icon:l.value?e.prevIcon:e.nextIcon},null)]})])]}})),{selected:o.selected,scrollTo:F,scrollOffset:s,focus:E}}}),Cp=L()({name:"VSlideGroupItem",props:kn(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const l=Sn(e,wr);return()=>{var a;return(a=n.default)==null?void 0:a.call(n,{isSelected:l.isSelected.value,select:l.select,toggle:l.toggle,selectedClass:l.selectedClass.value})}}});const xp=R({multiLine:Boolean,timeout:{type:[Number,String],default:5e3},vertical:Boolean,...Mt({location:"bottom"}),...Cn(),...Ie(),...mt(),...he(),...rt(Yn({transition:"v-snackbar-transition"}),["persistent","noClickAnimation","scrim","scrollStrategy"])},"VSnackbar"),Vp=L()({name:"VSnackbar",props:xp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{locationStyles:a}=Ft(e),{positionClasses:o}=xn(e),{scopeId:i}=_n(),{themeClasses:s}=ye(e),{colorClasses:u,colorStyles:c,variantClasses:d}=ln(e),{roundedClasses:f}=Ae(e),v=W();Z(l,g),Z(()=>e.timeout,g),Je(()=>{l.value&&g()});let m=-1;function g(){window.clearTimeout(m);const b=Number(e.timeout);!l.value||b===-1||(m=window.setTimeout(()=>{l.value=!1},b))}function y(){window.clearTimeout(m)}return j(()=>{const[b]=It.filterProps(e);return r(It,Y({ref:v,class:["v-snackbar",{"v-snackbar--active":l.value,"v-snackbar--multi-line":e.multiLine&&!e.vertical,"v-snackbar--vertical":e.vertical},o.value,e.class],style:e.style},b,{modelValue:l.value,"onUpdate:modelValue":p=>l.value=p,contentProps:Y({class:["v-snackbar__wrapper",s.value,u.value,f.value,d.value],style:[a.value,c.value],onPointerenter:y,onPointerleave:g},b.contentProps),persistent:!0,noClickAnimation:!0,scrim:!1,scrollStrategy:"none",_disableGlobalStack:!0},i),{default:()=>[nn(!1,"v-snackbar"),n.default&&r("div",{class:"v-snackbar__content",role:"status","aria-live":"polite"},[n.default()]),n.actions&&r(pe,{defaults:{VBtn:{variant:"text",ripple:!1}}},{default:()=>[r("div",{class:"v-snackbar__actions"},[n.actions()])]})],activator:n.activator})}),pt({},v)}});const _p=R({indeterminate:Boolean,inset:Boolean,flat:Boolean,loading:{type:[Boolean,String],default:!1},...Bt(),...wl()},"VSwitch"),Ip=L()({name:"VSwitch",inheritAttrs:!1,props:_p(),emits:{"update:focused":e=>!0,"update:modelValue":()=>!0,"update:indeterminate":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const a=ue(e,"indeterminate"),o=ue(e,"modelValue"),{loaderClasses:i}=Sl(e),{isFocused:s,focus:u,blur:c}=Dt(e),d=W(),f=h(()=>typeof e.loading=="string"&&e.loading!==""?e.loading:e.color),v=We(),m=h(()=>e.id||`switch-${v}`);function g(){a.value&&(a.value=!1)}function y(b){var p,S;b.stopPropagation(),b.preventDefault(),(S=(p=d.value)==null?void 0:p.input)==null||S.click()}return j(()=>{const[b,p]=Qt(n),[S,C]=Ne.filterProps(e),[_,V]=Xt.filterProps(e);return r(Ne,Y({class:["v-switch",{"v-switch--inset":e.inset},{"v-switch--indeterminate":a.value},i.value,e.class],style:e.style},b,S,{id:m.value,focused:s.value}),{...l,default:x=>{let{id:T,messagesId:w,isDisabled:k,isReadonly:I,isValid:A}=x;return r(Xt,Y({ref:d},_,{modelValue:o.value,"onUpdate:modelValue":[B=>o.value=B,g],id:T.value,"aria-describedby":w.value,type:"checkbox","aria-checked":a.value?"mixed":void 0,disabled:k.value,readonly:I.value,onFocus:u,onBlur:c},p),{...l,default:B=>{let{backgroundColorClasses:E,backgroundColorStyles:F}=B;return r("div",{class:["v-switch__track",...E.value],style:F.value,onClick:y},null)},input:B=>{let{inputNode:E,icon:F,backgroundColorClasses:X,backgroundColorStyles:$}=B;return r(oe,null,[E,r("div",{class:["v-switch__thumb",{"v-switch__thumb--filled":F||e.loading},e.inset?void 0:X.value],style:e.inset?void 0:$.value},[r(Ha,null,{default:()=>[e.loading?r(Za,{name:"v-switch",active:!0,color:A.value===!1?void 0:f.value},{default:N=>l.loader?l.loader(N):r(Ka,{active:N.isActive,color:N.color,indeterminate:!0,size:"16",width:"2"},null)}):F&&r(Se,{key:F,icon:F,size:"x-small"},null)]})])])}})}})}),{}}});const Tp=R({color:String,height:[Number,String],window:Boolean,...q(),...Me(),...yn(),...Ie(),...ce(),...he()},"VSystemBar"),Pp=L()({name:"VSystemBar",props:Tp(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{backgroundColorClasses:a,backgroundColorStyles:o}=Be(O(e,"color")),{elevationClasses:i}=He(e),{roundedClasses:s}=Ae(e),{ssrBootStyles:u}=tn(),c=h(()=>e.height??(e.window?32:24)),{layoutItemStyles:d}=bn({id:e.name,order:h(()=>parseInt(e.order,10)),position:K("top"),layoutSize:c,elementSize:c,active:h(()=>!0),absolute:O(e,"absolute")});return j(()=>r(e.tag,{class:["v-system-bar",{"v-system-bar--window":e.window},l.value,a.value,i.value,s.value,e.class],style:[o.value,d.value,u.value,e.style]},n)),{}}});const xr=Symbol.for("vuetify:v-tabs"),Ap=R({fixed:Boolean,sliderColor:String,hideSlider:Boolean,direction:{type:String,default:"horizontal"},...rt(Ja({selectedClass:"v-tab--selected",variant:"text"}),["active","block","flat","location","position","symbol"])},"VTab"),Vr=L()({name:"VTab",props:Ap(),setup(e,t){let{slots:n,attrs:l}=t;const{textColorClasses:a,textColorStyles:o}=Ge(e,"sliderColor"),i=h(()=>e.direction==="horizontal"),s=K(!1),u=W(),c=W();function d(f){var m,g;let{value:v}=f;if(s.value=v,v){const y=(g=(m=u.value)==null?void 0:m.$el.parentElement)==null?void 0:g.querySelector(".v-tab--selected .v-tab__slider"),b=c.value;if(!y||!b)return;const p=getComputedStyle(y).color,S=y.getBoundingClientRect(),C=b.getBoundingClientRect(),_=i.value?"x":"y",V=i.value?"X":"Y",x=i.value?"right":"bottom",T=i.value?"width":"height",w=S[_],k=C[_],I=w>k?S[x]-C[x]:S[_]-C[_],A=Math.sign(I)>0?i.value?"right":"bottom":Math.sign(I)<0?i.value?"left":"top":"center",E=(Math.abs(I)+(Math.sign(I)<0?S[T]:C[T]))/Math.max(S[T],C[T])||0,F=S[T]/C[T]||0,X=1.5;Ut(b,{backgroundColor:[p,"currentcolor"],transform:[`translate${V}(${I}px) scale${V}(${F})`,`translate${V}(${I/X}px) scale${V}(${(E-1)/X+1})`,"none"],transformOrigin:Array(3).fill(A)},{duration:225,easing:$n})}}return j(()=>{const[f]=Ke.filterProps(e);return r(Ke,Y({symbol:xr,ref:u,class:["v-tab",e.class],style:e.style,tabindex:s.value?0:-1,role:"tab","aria-selected":String(s.value),active:!1},f,l,{block:e.fixed,maxWidth:e.fixed?300:void 0,"onGroup:selected":d}),{default:()=>{var v;return[((v=n.default)==null?void 0:v.call(n))??e.text,!e.hideSlider&&r("div",{ref:c,class:["v-tab__slider",a.value],style:o.value},null)]}})}),{}}});function Bp(e){return e?e.map(t=>sl(t)?t:{text:t,value:t}):[]}const Rp=R({alignTabs:{type:String,default:"start"},color:String,fixedTabs:Boolean,items:{type:Array,default:()=>[]},stacked:Boolean,bgColor:String,grow:Boolean,height:{type:[Number,String],default:void 0},hideSlider:Boolean,sliderColor:String,...Cr({mandatory:"force"}),...Fe(),...ce()},"VTabs"),Ep=L()({name:"VTabs",props:Rp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),a=h(()=>Bp(e.items)),{densityClasses:o}=Ye(e),{backgroundColorClasses:i,backgroundColorStyles:s}=Be(O(e,"bgColor"));return Ee({VTab:{color:O(e,"color"),direction:O(e,"direction"),stacked:O(e,"stacked"),fixed:O(e,"fixedTabs"),sliderColor:O(e,"sliderColor"),hideSlider:O(e,"hideSlider")}}),j(()=>{const[u]=ba.filterProps(e);return r(ba,Y(u,{modelValue:l.value,"onUpdate:modelValue":c=>l.value=c,class:["v-tabs",`v-tabs--${e.direction}`,`v-tabs--align-tabs-${e.alignTabs}`,{"v-tabs--fixed-tabs":e.fixedTabs,"v-tabs--grow":e.grow,"v-tabs--stacked":e.stacked},o.value,i.value,e.class],style:[{"--v-tabs-height":J(e.height)},s.value,e.style],role:"tablist",symbol:xr}),{default:()=>[n.default?n.default():a.value.map(c=>r(Vr,Y(c,{key:c.text}),null))]})}),{}}});const Lp=R({fixedHeader:Boolean,fixedFooter:Boolean,height:[Number,String],hover:Boolean,...q(),...Fe(),...ce(),...he()},"VTable"),$p=L()({name:"VTable",props:Lp(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{densityClasses:a}=Ye(e);return j(()=>r(e.tag,{class:["v-table",{"v-table--fixed-height":!!e.height,"v-table--fixed-header":e.fixedHeader,"v-table--fixed-footer":e.fixedFooter,"v-table--has-top":!!n.top,"v-table--has-bottom":!!n.bottom,"v-table--hover":e.hover},l.value,a.value,e.class],style:e.style},{default:()=>{var o,i,s;return[(o=n.top)==null?void 0:o.call(n),n.default?r("div",{class:"v-table__wrapper",style:{height:J(e.height)}},[r("table",null,[n.default()])]):(i=n.wrapper)==null?void 0:i.call(n),(s=n.bottom)==null?void 0:s.call(n)]}})),{}}});const Mp=R({autoGrow:Boolean,autofocus:Boolean,counter:[Boolean,Number,String],counterValue:Function,prefix:String,placeholder:String,persistentPlaceholder:Boolean,persistentCounter:Boolean,noResize:Boolean,rows:{type:[Number,String],default:5,validator:e=>!isNaN(parseFloat(e))},maxRows:{type:[Number,String],validator:e=>!isNaN(parseFloat(e))},suffix:String,modelModifiers:Object,...Bt(),...Pl()},"VTextarea"),Fp=L()({name:"VTextarea",directives:{Intersect:jn},inheritAttrs:!1,props:Mp(),emits:{"click:control":e=>!0,"mousedown:control":e=>!0,"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const o=ue(e,"modelValue"),{isFocused:i,focus:s,blur:u}=Dt(e),c=h(()=>typeof e.counterValue=="function"?e.counterValue(o.value):(o.value||"").toString().length),d=h(()=>{if(n.maxlength)return n.maxlength;if(!(!e.counter||typeof e.counter!="number"&&typeof e.counter!="string"))return e.counter});function f(A,B){var E,F;!e.autofocus||!A||(F=(E=B[0].target)==null?void 0:E.focus)==null||F.call(E)}const v=W(),m=W(),g=K(""),y=W(),b=h(()=>e.persistentPlaceholder||i.value||e.active);function p(){var A;y.value!==document.activeElement&&((A=y.value)==null||A.focus()),i.value||s()}function S(A){p(),l("click:control",A)}function C(A){l("mousedown:control",A)}function _(A){A.stopPropagation(),p(),xe(()=>{o.value="",Ra(e["onClick:clear"],A)})}function V(A){var E;const B=A.target;if(o.value=B.value,(E=e.modelModifiers)!=null&&E.trim){const F=[B.selectionStart,B.selectionEnd];xe(()=>{B.selectionStart=F[0],B.selectionEnd=F[1]})}}const x=W(),T=W(+e.rows),w=h(()=>["plain","underlined"].includes(e.variant));tt(()=>{e.autoGrow||(T.value=+e.rows)});function k(){e.autoGrow&&xe(()=>{if(!x.value||!m.value)return;const A=getComputedStyle(x.value),B=getComputedStyle(m.value.$el),E=parseFloat(A.getPropertyValue("--v-field-padding-top"))+parseFloat(A.getPropertyValue("--v-input-padding-top"))+parseFloat(A.getPropertyValue("--v-field-padding-bottom")),F=x.value.scrollHeight,X=parseFloat(A.lineHeight),$=Math.max(parseFloat(e.rows)*X+E,parseFloat(B.getPropertyValue("--v-input-control-height"))),N=parseFloat(e.maxRows)*X+E||1/0,M=Ue(F??0,$,N);T.value=Math.floor((M-E)/X),g.value=J(M)})}Je(k),Z(o,k),Z(()=>e.rows,k),Z(()=>e.maxRows,k),Z(()=>e.density,k);let I;return Z(x,A=>{A?(I=new ResizeObserver(k),I.observe(x.value)):I==null||I.disconnect()}),nt(()=>{I==null||I.disconnect()}),j(()=>{const A=!!(a.counter||e.counter||e.counterValue),B=!!(A||a.details),[E,F]=Qt(n),[{modelValue:X,...$}]=Ne.filterProps(e),[N]=lo(e);return r(Ne,Y({ref:v,modelValue:o.value,"onUpdate:modelValue":M=>o.value=M,class:["v-textarea v-text-field",{"v-textarea--prefixed":e.prefix,"v-textarea--suffixed":e.suffix,"v-text-field--prefixed":e.prefix,"v-text-field--suffixed":e.suffix,"v-textarea--auto-grow":e.autoGrow,"v-textarea--no-resize":e.noResize||e.autoGrow,"v-text-field--plain-underlined":w.value},e.class],style:e.style},E,$,{centerAffix:T.value===1&&!w.value,focused:i.value}),{...a,default:M=>{let{isDisabled:G,isDirty:U,isReadonly:z,isValid:ae}=M;return r(Kn,Y({ref:m,style:{"--v-textarea-control-height":g.value},onClick:S,onMousedown:C,"onClick:clear":_,"onClick:prependInner":e["onClick:prependInner"],"onClick:appendInner":e["onClick:appendInner"]},N,{active:b.value||U.value,centerAffix:T.value===1&&!w.value,dirty:U.value||e.dirty,disabled:G.value,focused:i.value,error:ae.value===!1}),{...a,default:re=>{let{props:{class:ve,...ge}}=re;return r(oe,null,[e.prefix&&r("span",{class:"v-text-field__prefix"},[e.prefix]),ne(r("textarea",Y({ref:y,class:ve,value:o.value,onInput:V,autofocus:e.autofocus,readonly:z.value,disabled:G.value,placeholder:e.placeholder,rows:e.rows,name:e.name,onFocus:p,onBlur:u},ge,F),null),[[Ze("intersect"),{handler:f},null,{once:!0}]]),e.autoGrow&&ne(r("textarea",{class:[ve,"v-textarea__sizer"],id:`${ge.id}-sizer`,"onUpdate:modelValue":D=>o.value=D,ref:x,readonly:!0,"aria-hidden":"true"},null),[[je,o.value]]),e.suffix&&r("span",{class:"v-text-field__suffix"},[e.suffix])])}})},details:B?M=>{var G;return r(oe,null,[(G=a.details)==null?void 0:G.call(a,M),A&&r(oe,null,[r("span",null,null),r(Tl,{active:e.persistentCounter||i.value,value:c.value,max:d.value},a.counter)])])}:void 0})}),pt({},v,m,y)}});const Op=R({withBackground:Boolean,...q(),...he(),...ce()},"VThemeProvider"),Dp=L()({name:"VThemeProvider",props:Op(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e);return()=>{var a;return e.withBackground?r(e.tag,{class:["v-theme-provider",l.value,e.class],style:e.style},{default:()=>{var o;return[(o=n.default)==null?void 0:o.call(n)]}}):(a=n.default)==null?void 0:a.call(n)}}});const Np=R({align:{type:String,default:"center",validator:e=>["center","start"].includes(e)},direction:{type:String,default:"vertical",validator:e=>["vertical","horizontal"].includes(e)},justify:{type:String,default:"auto",validator:e=>["auto","center"].includes(e)},side:{type:String,validator:e=>e==null||["start","end"].includes(e)},lineInset:{type:[String,Number],default:0},lineThickness:{type:[String,Number],default:2},lineColor:String,truncateLine:{type:String,validator:e=>["start","end","both"].includes(e)},...q(),...Fe(),...ce(),...he()},"VTimeline"),zp=L()({name:"VTimeline",props:Np(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{densityClasses:a}=Ye(e),{rtlClasses:o}=De();Ee({VTimelineDivider:{lineColor:O(e,"lineColor")},VTimelineItem:{density:O(e,"density"),lineInset:O(e,"lineInset")}});const i=h(()=>{const u=e.side?e.side:e.density!=="default"?"end":null;return u&&`v-timeline--side-${u}`}),s=h(()=>{const u=["v-timeline--truncate-line-start","v-timeline--truncate-line-end"];switch(e.truncateLine){case"both":return u;case"start":return u[0];case"end":return u[1];default:return null}});return j(()=>r(e.tag,{class:["v-timeline",`v-timeline--${e.direction}`,`v-timeline--align-${e.align}`,`v-timeline--justify-${e.justify}`,s.value,{"v-timeline--inset-line":!!e.lineInset},l.value,a.value,i.value,o.value,e.class],style:[{"--v-timeline-line-thickness":J(e.lineThickness)},e.style]},n)),{}}}),Hp=R({dotColor:String,fillDot:Boolean,hideDot:Boolean,icon:se,iconColor:String,lineColor:String,...q(),...Ie(),...At(),...Me()},"VTimelineDivider"),jp=L()({name:"VTimelineDivider",props:Hp(),setup(e,t){let{slots:n}=t;const{sizeClasses:l,sizeStyles:a}=wn(e,"v-timeline-divider__dot"),{backgroundColorStyles:o,backgroundColorClasses:i}=Be(O(e,"dotColor")),{roundedClasses:s}=Ae(e,"v-timeline-divider__dot"),{elevationClasses:u}=He(e),{backgroundColorClasses:c,backgroundColorStyles:d}=Be(O(e,"lineColor"));return j(()=>r("div",{class:["v-timeline-divider",{"v-timeline-divider--fill-dot":e.fillDot},e.class],style:e.style},[r("div",{class:["v-timeline-divider__before",c.value],style:d.value},null),!e.hideDot&&r("div",{key:"dot",class:["v-timeline-divider__dot",u.value,s.value,l.value],style:a.value},[r("div",{class:["v-timeline-divider__inner-dot",i.value,s.value],style:o.value},[n.default?r(pe,{key:"icon-defaults",disabled:!e.icon,defaults:{VIcon:{color:e.iconColor,icon:e.icon,size:e.size}}},n.default):r(Se,{key:"icon",color:e.iconColor,icon:e.icon,size:e.size},null)])]),r("div",{class:["v-timeline-divider__after",c.value],style:d.value},null)])),{}}}),Up=R({density:String,dotColor:String,fillDot:Boolean,hideDot:Boolean,hideOpposite:{type:Boolean,default:void 0},icon:se,iconColor:String,lineInset:[Number,String],...q(),...dt(),...Me(),...Ie(),...At(),...ce()},"VTimelineItem"),Gp=L()({name:"VTimelineItem",props:Up(),setup(e,t){let{slots:n}=t;const{dimensionStyles:l}=vt(e),a=K(0),o=W();return Z(o,i=>{var s;i&&(a.value=((s=i.$el.querySelector(".v-timeline-divider__dot"))==null?void 0:s.getBoundingClientRect().width)??0)},{flush:"post"}),j(()=>{var i,s;return r("div",{class:["v-timeline-item",{"v-timeline-item--fill-dot":e.fillDot},e.class],style:[{"--v-timeline-dot-size":J(a.value),"--v-timeline-line-inset":e.lineInset?`calc(var(--v-timeline-dot-size) / 2 + ${J(e.lineInset)})`:J(0)},e.style]},[r("div",{class:"v-timeline-item__body",style:l.value},[(i=n.default)==null?void 0:i.call(n)]),r(jp,{ref:o,hideDot:e.hideDot,icon:e.icon,iconColor:e.iconColor,size:e.size,elevation:e.elevation,dotColor:e.dotColor,fillDot:e.fillDot,rounded:e.rounded},{default:n.icon}),e.density!=="compact"&&r("div",{class:"v-timeline-item__opposite"},[!e.hideOpposite&&((s=n.opposite)==null?void 0:s.call(n))])])}),{}}}),Wp=R({...q(),...mt({variant:"text"})},"VToolbarItems"),Yp=L()({name:"VToolbarItems",props:Wp(),setup(e,t){let{slots:n}=t;return Ee({VBtn:{color:O(e,"color"),height:"inherit",variant:O(e,"variant")}}),j(()=>{var l;return r("div",{class:["v-toolbar-items",e.class],style:e.style},[(l=n.default)==null?void 0:l.call(n)])}),{}}});const Kp=R({id:String,text:String,...rt(Yn({closeOnBack:!1,location:"end",locationStrategy:"connected",eager:!0,minWidth:0,offset:10,openOnClick:!1,openOnHover:!0,origin:"auto",scrim:!1,scrollStrategy:"reposition",transition:!1}),["absolute","persistent"])},"VTooltip"),qp=L()({name:"VTooltip",props:Kp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{scopeId:a}=_n(),o=We(),i=h(()=>e.id||`v-tooltip-${o}`),s=W(),u=h(()=>e.location.split(" ").length>1?e.location:e.location+" center"),c=h(()=>e.origin==="auto"||e.origin==="overlap"||e.origin.split(" ").length>1||e.location.split(" ").length>1?e.origin:e.origin+" center"),d=h(()=>e.transition?e.transition:l.value?"scale-transition":"fade-transition"),f=h(()=>Y({"aria-describedby":i.value},e.activatorProps));return j(()=>{const[v]=It.filterProps(e);return r(It,Y({ref:s,class:["v-tooltip",e.class],style:e.style,id:i.value},v,{modelValue:l.value,"onUpdate:modelValue":m=>l.value=m,transition:d.value,absolute:!0,location:u.value,origin:c.value,persistent:!0,role:"tooltip",activatorProps:f.value,_disableGlobalStack:!0},a),{activator:n.activator,default:function(){var b;for(var m=arguments.length,g=new Array(m),y=0;y<m;y++)g[y]=arguments[y];return((b=n.default)==null?void 0:b.call(n,...g))??e.text}})}),pt({},s)}}),Xp=L()({name:"VValidation",props:hs(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ys(e,"validation");return()=>{var a;return(a=n.default)==null?void 0:a.call(n,l)}}}),Zp=Object.freeze(Object.defineProperty({__proto__:null,VAlert:_g,VAlertTitle:us,VApp:Mm,VAppBar:ng,VAppBarNavIcon:wg,VAppBarTitle:Cg,VAutocomplete:Uh,VAvatar:Lt,VBadge:Wh,VBanner:qh,VBannerActions:js,VBannerText:Us,VBottomNavigation:Zh,VBreadcrumbs:ty,VBreadcrumbsDivider:Gs,VBreadcrumbsItem:Ws,VBtn:Ke,VBtnGroup:na,VBtnToggle:rg,VCard:ay,VCardActions:Ys,VCardItem:Xs,VCardSubtitle:Ks,VCardText:Zs,VCardTitle:qs,VCarousel:fy,VCarouselItem:gy,VCheckbox:Lg,VCheckboxBtn:mn,VChip:Wn,VChipGroup:Fg,VClassIcon:Na,VCode:hy,VCol:Ib,VColorPicker:ab,VCombobox:sb,VComponentIcon:Xl,VContainer:Cb,VCounter:Tl,VDefaultsProvider:pe,VDialog:ub,VDialogBottomTransition:Nm,VDialogTopTransition:zm,VDialogTransition:pl,VDivider:Ts,VExpandTransition:kl,VExpandXTransition:Ua,VExpansionPanel:gb,VExpansionPanelText:rr,VExpansionPanelTitle:cr,VExpansionPanels:vb,VFabTransition:Dm,VFadeTransition:Ql,VField:Kn,VFieldLabel:An,VFileInput:yb,VFooter:pb,VForm:Sb,VHover:Fb,VIcon:Se,VImg:qt,VInput:Ne,VItem:Nb,VItemGroup:Db,VKbd:zb,VLabel:Vn,VLayout:jb,VLayoutItem:Gb,VLazy:Yb,VLigatureIcon:qf,VList:Vl,VListGroup:ia,VListImg:lh,VListItem:_t,VListItemAction:oh,VListItemMedia:sh,VListItemSubtitle:Vs,VListItemTitle:_s,VListSubheader:Is,VLocaleProvider:qb,VMain:Zb,VMenu:Il,VMessages:ms,VNavigationDrawer:ip,VNoSsr:sp,VOverlay:It,VPagination:cp,VParallax:fp,VProgressCircular:Ka,VProgressLinear:qa,VRadio:gp,VRadioGroup:yp,VRangeSlider:pp,VRating:Sp,VResponsive:ea,VRow:Lb,VScaleTransition:Ha,VScrollXReverseTransition:jm,VScrollXTransition:Hm,VScrollYReverseTransition:Gm,VScrollYTransition:Um,VSelect:Dh,VSelectionControl:Xt,VSelectionControlGroup:ds,VSheet:ya,VSlideGroup:ba,VSlideGroupItem:Cp,VSlideXReverseTransition:Ym,VSlideXTransition:Wm,VSlideYReverseTransition:Km,VSlideYTransition:ja,VSlider:ha,VSnackbar:Vp,VSpacer:$b,VSvgIcon:Da,VSwitch:Ip,VSystemBar:Pp,VTab:Vr,VTable:$p,VTabs:Ep,VTextField:Zt,VTextarea:Fp,VThemeProvider:Dp,VTimeline:zp,VTimelineItem:Gp,VToolbar:ta,VToolbarItems:Yp,VToolbarTitle:za,VTooltip:qp,VValidation:Xp,VVirtualScroll:Bl,VWindow:ca,VWindowItem:da},Symbol.toStringTag,{value:"Module"}));function Jp(e,t){const n=t.modifiers||{},l=t.value,{once:a,immediate:o,...i}=n,s=!Object.keys(i).length,{handler:u,options:c}=typeof l=="object"?l:{handler:l,options:{attributes:(i==null?void 0:i.attr)??s,characterData:(i==null?void 0:i.char)??s,childList:(i==null?void 0:i.child)??s,subtree:(i==null?void 0:i.sub)??s}},d=new MutationObserver(function(){let f=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],v=arguments.length>1?arguments[1]:void 0;u==null||u(f,v),a&&_r(e,t)});o&&(u==null||u([],d)),e._mutate=Object(e._mutate),e._mutate[t.instance.$.uid]={observer:d},d.observe(e,c)}function _r(e,t){var n;(n=e._mutate)!=null&&n[t.instance.$.uid]&&(e._mutate[t.instance.$.uid].observer.disconnect(),delete e._mutate[t.instance.$.uid])}const Qp={mounted:Jp,unmounted:_r};function e0(e,t){var a,o;const n=t.value,l={passive:!((a=t.modifiers)!=null&&a.active)};window.addEventListener("resize",n,l),e._onResize=Object(e._onResize),e._onResize[t.instance.$.uid]={handler:n,options:l},(o=t.modifiers)!=null&&o.quiet||n()}function t0(e,t){var a;if(!((a=e._onResize)!=null&&a[t.instance.$.uid]))return;const{handler:n,options:l}=e._onResize[t.instance.$.uid];window.removeEventListener("resize",n,l),delete e._onResize[t.instance.$.uid]}const n0={mounted:e0,unmounted:t0};function Ir(e,t){const{self:n=!1}=t.modifiers??{},l=t.value,a=typeof l=="object"&&l.options||{passive:!0},o=typeof l=="function"||"handleEvent"in l?l:l.handler,i=n?e:t.arg?document.querySelector(t.arg):window;i&&(i.addEventListener("scroll",o,a),e._onScroll=Object(e._onScroll),e._onScroll[t.instance.$.uid]={handler:o,options:a,target:n?void 0:i})}function Tr(e,t){var o;if(!((o=e._onScroll)!=null&&o[t.instance.$.uid]))return;const{handler:n,options:l,target:a=e}=e._onScroll[t.instance.$.uid];a.removeEventListener("scroll",n,l),delete e._onScroll[t.instance.$.uid]}function l0(e,t){t.value!==t.oldValue&&(Tr(e,t),Ir(e,t))}const a0={mounted:Ir,unmounted:Tr,updated:l0},o0=Object.freeze(Object.defineProperty({__proto__:null,ClickOutside:Ns,Intersect:jn,Mutate:Qp,Resize:n0,Ripple:Ot,Scroll:a0,Touch:io},Symbol.toStringTag,{value:"Module"})),i0=Gr(),qn=jr(lf);qn.config.globalProperties.emitter=i0;qn.directive("tooltip",{mounted:(e,t)=>new bootstrap.Tooltip(e,{boundary:document.body,container:e.parentNode})});const s0=Ui({components:Zp,directives:o0});qn.use(s0);qn.use(Ur);qn.mount("#mw-element-style-editor-app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC1zdHlsZS1lZGl0b3ItYXBwLWMxOWI5MzhlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9hcHBzL0VsZW1lbnRTdHlsZUVkaXRvci9jb21wb25lbnRzL0FsaWduLnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL2NvbXBvbmVudHMvRHJvcGRvd25TbWFsbC52dWUiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9hcHBzL0VsZW1lbnRTdHlsZUVkaXRvci9jb21wb25lbnRzL0ZvbnRQaWNrZXIudnVlIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvdWkvYXBwcy9FbGVtZW50U3R5bGVFZGl0b3IvY29tcG9uZW50cy9TbGlkZXJTbWFsbC52dWUiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9hcHBzL0VsZW1lbnRTdHlsZUVkaXRvci9FbGVtZW50U3R5bGVFZGl0b3JUeXBvZ3JhcGh5LnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL0VsZW1lbnRTdHlsZUVkaXRvclNwYWNpbmcudnVlIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvdWkvYXBwcy9FbGVtZW50U3R5bGVFZGl0b3IvY29tcG9uZW50cy9JbWFnZVBpY2tlci52dWUiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9jb21wb25lbnRzL0Zvcm0vRmlsZVBpY2tlci52dWUiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9hcHBzL0VsZW1lbnRTdHlsZUVkaXRvci9FbGVtZW50U3R5bGVFZGl0b3JCYWNrZ3JvdW5kLnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL2NvbXBvbmVudHMvQm9yZGVyUmFkaXVzLnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL0VsZW1lbnRTdHlsZUVkaXRvckJvcmRlci52dWUiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9hcHBzL0VsZW1lbnRTdHlsZUVkaXRvci9FbGVtZW50U3R5bGVFZGl0b3JFbGVtZW50U2VsZWN0b3IudnVlIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvdWkvYXBwcy9FbGVtZW50U3R5bGVFZGl0b3IvRWxlbWVudFN0eWxlRWRpdG9yQ29udGFpbmVyLnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL0VsZW1lbnRTdHlsZUFuaW1hdGlvbnNBcHBsaWVyLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvdWkvYXBwcy9FbGVtZW50U3R5bGVFZGl0b3IvRWxlbWVudFN0eWxlRWRpdG9yQW5pbWF0aW9ucy52dWUiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9hcHBzL0VsZW1lbnRTdHlsZUVkaXRvci9FbGVtZW50U3R5bGVFZGl0b3JHcmlkLnZ1ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUzLXRhZ3MtaW5wdXQvZGlzdC92dWUzLXRhZ3MtaW5wdXQuZXNtLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvdWkvYXBwcy9FbGVtZW50U3R5bGVFZGl0b3IvRWxlbWVudFN0eWxlRWRpdG9yQ2xhc3NBcHBsaWVyLnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL0VsZW1lbnRTdHlsZUVkaXRvclJvdW5kZWRDb3JuZXJzLnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL0VsZW1lbnRTdHlsZUVkaXRvckFwcC52dWUiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9nbG9iYWxzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2hlbHBlcnMubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL3V0aWwvYW5jaG9yLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2JveC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9hbmltYXRpb24ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL3V0aWwvYmluZFByb3BzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2NvbG9yL0FQQ0EubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL3V0aWwvY29uc29sZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9jb2xvci90cmFuc2Zvcm1DSUVMQUIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL3V0aWwvY29sb3IvdHJhbnNmb3JtU1JHQi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9jb2xvclV0aWxzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL3Byb3BzRmFjdG9yeS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2RlZmluZUNvbXBvbmVudC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9jcmVhdGVTaW1wbGVGdW5jdGlvbmFsLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2RvbS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9lYXNpbmcubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL3V0aWwvZ2V0Q3VycmVudEluc3RhbmNlLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2dldFNjcm9sbFBhcmVudC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9pbmplY3RTZWxmLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2lzRml4ZWRQb3NpdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC91c2VSZW5kZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9kaXNwbGF5Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9pY29uc2V0cy9tZGkubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2ljb25zLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9sb2NhbGUvZW4ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2xvY2FsZS9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdG9nZ2xlU2NvcGUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvbG9jYWxlL2FkYXB0ZXJzL3Z1ZXRpZnkubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2xvY2FsZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdGhlbWUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2xhYnMvZGF0ZS9hZGFwdGVycy92dWV0aWZ5Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9sYWJzL2RhdGUvZGF0ZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvcmVzaXplT2JzZXJ2ZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2xheW91dC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvZnJhbWV3b3JrLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZBcHAvVkFwcC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdGFnLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUb29sYmFyL1ZUb29sYmFyVGl0bGUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvdHJhbnNpdGlvbnMvY3JlYXRlVHJhbnNpdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy90cmFuc2l0aW9ucy9leHBhbmQtdHJhbnNpdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy90cmFuc2l0aW9ucy9kaWFsb2ctdHJhbnNpdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy90cmFuc2l0aW9ucy9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WRGVmYXVsdHNQcm92aWRlci9WRGVmYXVsdHNQcm92aWRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvZGltZW5zaW9ucy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WUmVzcG9uc2l2ZS9WUmVzcG9uc2l2ZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdHJhbnNpdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvZGlyZWN0aXZlcy9pbnRlcnNlY3QvaW5kZXgubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkltZy9WSW1nLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9ib3JkZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2NvbG9yLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlRvb2xiYXIvVlRvb2xiYXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL3Njcm9sbC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvc3NyQm9vdC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQXBwQmFyL1ZBcHBCYXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL3ZhcmlhbnQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkJ0bkdyb3VwL1ZCdG5Hcm91cC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvZ3JvdXAubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkJ0blRvZ2dsZS9WQnRuVG9nZ2xlLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9zaXplLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZJY29uL1ZJY29uLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9pbnRlcnNlY3Rpb25PYnNlcnZlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WUHJvZ3Jlc3NDaXJjdWxhci9WUHJvZ3Jlc3NDaXJjdWxhci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvbG9jYXRpb24ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlByb2dyZXNzTGluZWFyL1ZQcm9ncmVzc0xpbmVhci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvbG9hZGVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9wb3NpdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvcm91dGVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9zZWxlY3RMaW5rLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9kaXJlY3RpdmVzL3JpcHBsZS9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQnRuL1ZCdG4ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkFwcEJhci9WQXBwQmFyTmF2SWNvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQXBwQmFyL1ZBcHBCYXJUaXRsZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQWxlcnQvVkFsZXJ0VGl0bGUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkFsZXJ0L1ZBbGVydC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGFiZWwvVkxhYmVsLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZTZWxlY3Rpb25Db250cm9sR3JvdXAvVlNlbGVjdGlvbkNvbnRyb2xHcm91cC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2VsZWN0aW9uQ29udHJvbC9WU2VsZWN0aW9uQ29udHJvbC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ2hlY2tib3gvVkNoZWNrYm94QnRuLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZJbnB1dC9JbnB1dEljb24ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVk1lc3NhZ2VzL1ZNZXNzYWdlcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvZm9jdXMubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2Zvcm0ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL3ZhbGlkYXRpb24ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVklucHV0L1ZJbnB1dC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ2hlY2tib3gvVkNoZWNrYm94Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZBdmF0YXIvVkF2YXRhci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ2hpcEdyb3VwL1ZDaGlwR3JvdXAubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNoaXAvVkNoaXAubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkxpc3QvbGlzdC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvbmVzdGVkL29wZW5TdHJhdGVnaWVzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9uZXN0ZWQvc2VsZWN0U3RyYXRlZ2llcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvbmVzdGVkL25lc3RlZC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGlzdC9WTGlzdEdyb3VwLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SXRlbVN1YnRpdGxlLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SXRlbVRpdGxlLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SXRlbS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGlzdC9WTGlzdFN1YmhlYWRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WRGl2aWRlci9WRGl2aWRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGlzdC9WTGlzdENoaWxkcmVuLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9saXN0LWl0ZW1zLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SW1nLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SXRlbUFjdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGlzdC9WTGlzdEl0ZW1NZWRpYS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WT3ZlcmxheS91dGlsL3BvaW50Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZPdmVybGF5L2xvY2F0aW9uU3RyYXRlZ2llcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WT3ZlcmxheS9yZXF1ZXN0TmV3RnJhbWUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVk92ZXJsYXkvc2Nyb2xsU3RyYXRlZ2llcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTWVudS9zaGFyZWQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2RlbGF5Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZPdmVybGF5L3VzZUFjdGl2YXRvci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvaHlkcmF0aW9uLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9sYXp5Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9zY29wZUlkLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9zdGFjay5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdGVsZXBvcnQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2RpcmVjdGl2ZXMvY2xpY2stb3V0c2lkZS9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WT3ZlcmxheS9WT3ZlcmxheS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvZm9yd2FyZFJlZnMubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVk1lbnUvVk1lbnUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNvdW50ZXIvVkNvdW50ZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkZpZWxkL1ZGaWVsZExhYmVsLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZGaWVsZC9WRmllbGQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlRleHRGaWVsZC9WVGV4dEZpZWxkLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZWaXJ0dWFsU2Nyb2xsL1ZWaXJ0dWFsU2Nyb2xsSXRlbS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdmlydHVhbC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WVmlydHVhbFNjcm9sbC9WVmlydHVhbFNjcm9sbC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2VsZWN0L3VzZVNjcm9sbGluZy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2VsZWN0L1ZTZWxlY3QubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2ZpbHRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQXV0b2NvbXBsZXRlL1ZBdXRvY29tcGxldGUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkJhZGdlL1ZCYWRnZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQmFubmVyL1ZCYW5uZXJBY3Rpb25zLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZCYW5uZXIvVkJhbm5lclRleHQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkJhbm5lci9WQmFubmVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZCb3R0b21OYXZpZ2F0aW9uL1ZCb3R0b21OYXZpZ2F0aW9uLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZCcmVhZGNydW1icy9WQnJlYWRjcnVtYnNEaXZpZGVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZCcmVhZGNydW1icy9WQnJlYWRjcnVtYnNJdGVtLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZCcmVhZGNydW1icy9WQnJlYWRjcnVtYnMubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNhcmQvVkNhcmRBY3Rpb25zLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZDYXJkL1ZDYXJkU3VidGl0bGUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNhcmQvVkNhcmRUaXRsZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ2FyZC9WQ2FyZEl0ZW0ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNhcmQvVkNhcmRUZXh0Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZDYXJkL1ZDYXJkLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9kaXJlY3RpdmVzL3RvdWNoL2luZGV4Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZXaW5kb3cvVldpbmRvdy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ2Fyb3VzZWwvVkNhcm91c2VsLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZXaW5kb3cvVldpbmRvd0l0ZW0ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNhcm91c2VsL1ZDYXJvdXNlbEl0ZW0ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNvZGUvaW5kZXgubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNvbG9yUGlja2VyL1ZDb2xvclBpY2tlckNhbnZhcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ29sb3JQaWNrZXIvdXRpbC9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ29sb3JQaWNrZXIvVkNvbG9yUGlja2VyRWRpdC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2xpZGVyL3NsaWRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2xpZGVyL1ZTbGlkZXJUaHVtYi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2xpZGVyL1ZTbGlkZXJUcmFjay5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2xpZGVyL1ZTbGlkZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNvbG9yUGlja2VyL1ZDb2xvclBpY2tlclByZXZpZXcubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL3V0aWwvY29sb3JzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZDb2xvclBpY2tlci9WQ29sb3JQaWNrZXJTd2F0Y2hlcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2hlZXQvVlNoZWV0Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZDb2xvclBpY2tlci9WQ29sb3JQaWNrZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNvbWJvYm94L1ZDb21ib2JveC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WRGlhbG9nL1ZEaWFsb2cubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkV4cGFuc2lvblBhbmVsL1ZFeHBhbnNpb25QYW5lbHMubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkV4cGFuc2lvblBhbmVsL1ZFeHBhbnNpb25QYW5lbFRleHQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkV4cGFuc2lvblBhbmVsL1ZFeHBhbnNpb25QYW5lbFRpdGxlLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZFeHBhbnNpb25QYW5lbC9WRXhwYW5zaW9uUGFuZWwubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkZpbGVJbnB1dC9WRmlsZUlucHV0Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZGb290ZXIvVkZvb3Rlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WRm9ybS9WRm9ybS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WR3JpZC9WQ29udGFpbmVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZHcmlkL1ZDb2wubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkdyaWQvVlJvdy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WR3JpZC9WU3BhY2VyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZIb3Zlci9WSG92ZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkl0ZW1Hcm91cC9WSXRlbUdyb3VwLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZJdGVtR3JvdXAvVkl0ZW0ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVktiZC9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGF5b3V0L1ZMYXlvdXQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkxheW91dC9WTGF5b3V0SXRlbS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGF6eS9WTGF6eS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTG9jYWxlUHJvdmlkZXIvVkxvY2FsZVByb3ZpZGVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZNYWluL1ZNYWluLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZOYXZpZ2F0aW9uRHJhd2VyL3N0aWNreS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdG91Y2gubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVk5hdmlnYXRpb25EcmF3ZXIvdG91Y2gubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVk5hdmlnYXRpb25EcmF3ZXIvVk5hdmlnYXRpb25EcmF3ZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVk5vU3NyL1ZOb1Nzci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvcmVmcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WUGFnaW5hdGlvbi9WUGFnaW5hdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WUGFyYWxsYXgvVlBhcmFsbGF4Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZSYWRpby9WUmFkaW8ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlJhZGlvR3JvdXAvVlJhZGlvR3JvdXAubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlJhbmdlU2xpZGVyL1ZSYW5nZVNsaWRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WUmF0aW5nL1ZSYXRpbmcubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlNsaWRlR3JvdXAvaGVscGVycy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2xpZGVHcm91cC9WU2xpZGVHcm91cC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2xpZGVHcm91cC9WU2xpZGVHcm91cEl0ZW0ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlNuYWNrYmFyL1ZTbmFja2Jhci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU3dpdGNoL1ZTd2l0Y2gubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlN5c3RlbUJhci9WU3lzdGVtQmFyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUYWJzL3NoYXJlZC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WVGFicy9WVGFiLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUYWJzL1ZUYWJzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUYWJsZS9WVGFibGUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlRleHRhcmVhL1ZUZXh0YXJlYS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WVGhlbWVQcm92aWRlci9WVGhlbWVQcm92aWRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WVGltZWxpbmUvVlRpbWVsaW5lLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUaW1lbGluZS9WVGltZWxpbmVEaXZpZGVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUaW1lbGluZS9WVGltZWxpbmVJdGVtLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUb29sYmFyL1ZUb29sYmFySXRlbXMubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlRvb2x0aXAvVlRvb2x0aXAubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlZhbGlkYXRpb24vVlZhbGlkYXRpb24ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2RpcmVjdGl2ZXMvbXV0YXRlL2luZGV4Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9kaXJlY3RpdmVzL3Jlc2l6ZS9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvZGlyZWN0aXZlcy9zY3JvbGwvaW5kZXgubWpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvdWkvYXBwcy9FbGVtZW50U3R5bGVFZGl0b3IvZWxlbWVudC1zdHlsZS1lZGl0b3ItYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jb250cm9sLWxpdmUtZWRpdC1sYWJlbC13cmFwcGVyIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwibGl2ZS1lZGl0LWxhYmVsIHB4LTAgY29sLTRcIj5BbGlnbjwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzLWZpZWxkLWNvbnRlbnQgbXMtM1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtYWxpZ25cIj5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNsYXNzPVwidGEtbGVmdFwiXG4gICAgICAgICAgICA6Y2xhc3M9XCJ7IGFjdGl2ZTogdGV4dEFsaWduID09PSAnbGVmdCcgfVwiXG4gICAgICAgICAgICBAY2xpY2s9XCJzZXRUZXh0QWxpZ25tZW50KCdsZWZ0JylcIlxuICAgICAgICAgICAgZGF0YS12YWx1ZT1cImxlZnRcIlxuICAgICAgICA+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGkgbWRpLWZvcm1hdC1hbGlnbi1sZWZ0XCI+PC9zcGFuPlxuICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJ0YS1jZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7IGFjdGl2ZTogdGV4dEFsaWduID09PSAnY2VudGVyJyB9XCJcbiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwic2V0VGV4dEFsaWdubWVudCgnY2VudGVyJylcIlxuICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPVwiY2VudGVyXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGkgbWRpLWZvcm1hdC1hbGlnbi1jZW50ZXJcIj48L3NwYW4+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInRhLXJpZ2h0XCJcbiAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieyBhY3RpdmU6IHRleHRBbGlnbiA9PT0gJ3JpZ2h0JyB9XCJcbiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwic2V0VGV4dEFsaWdubWVudCgncmlnaHQnKVwiXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9XCJyaWdodFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRpIG1kaS1mb3JtYXQtYWxpZ24tcmlnaHRcIj48L3NwYW4+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInRhLWp1c3RpZnlcIlxuICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7IGFjdGl2ZTogdGV4dEFsaWduID09PSAnanVzdGlmeScgfVwiXG4gICAgICAgICAgICAgICAgICAgIEBjbGljaz1cInNldFRleHRBbGlnbm1lbnQoJ2p1c3RpZnknKVwiXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9XCJqdXN0aWZ5XCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGkgbWRpLWZvcm1hdC1hbGlnbi1qdXN0aWZ5XCI+PC9zcGFuPlxuICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHByb3BzOiB7XG4gICAgICAgIHRleHRBbGlnbjogU3RyaW5nLCAvLyBQYXNzIHRoZSB0ZXh0IGFsaWdubWVudCBwcm9wZXJ0eSBhcyBhIHByb3BcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgc2V0VGV4dEFsaWdubWVudChhbGlnbm1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTp0ZXh0QWxpZ24nLCBhbGlnbm1lbnQpO1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG4iLCI8c2NyaXB0IHNldHVwPlxuXG5cbi8vIGRlZmluZXMgd2hhdCBldmVudHMgb3VyIGNvbXBvbmVudCBlbWl0c1xuZGVmaW5lRW1pdHMoWyd1cGRhdGU6bW9kZWxWYWx1ZSddKVxuPC9zY3JpcHQ+XG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IFN0cmluZyxcbiAgICBsYWJlbDogU3RyaW5nLFxuICAgIG9wdGlvbnM6IEFycmF5LFxuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RlZE9wdGlvbjogdGhpcy5tb2RlbFZhbHVlLFxuICAgIH07XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgbW9kZWxWYWx1ZShuZXdWYWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE9wdGlvbiAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRPcHRpb24gPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgICAgaGFuZGxlSW5wdXQoKSB7XG4gICAgICAgICAgLy8gRW1pdCB0aGUgZXZlbnQgb25seSBpZiBzZWxlY3RlZE9wdGlvbiBpcyBkaWZmZXJlbnQgZnJvbSBtb2RlbFZhbHVlXG4gICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRPcHRpb24gIT09IHRoaXMubW9kZWxWYWx1ZSkge1xuICAgICAgICAgICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHRoaXMuc2VsZWN0ZWRPcHRpb24pO1xuICAgICAgICAgIH1cbiAgICAgIH0sXG4gIH0sXG59O1xuPC9zY3JpcHQ+XG5cblxuPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNvbnRyb2wtbGl2ZS1lZGl0LWxhYmVsLXdyYXBwZXIgbXktNCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGZsZXgtd3JhcCBnYXAtMlwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJsaXZlLWVkaXQtbGFiZWwgcHgtMCBjb2wtNFwiIHYtaWY9XCJsYWJlbFwiIHYtaHRtbD1cImxhYmVsXCI+PC9sYWJlbD5cbiAgICAgICAgICA8c2VsZWN0IHYtbW9kZWw9XCJzZWxlY3RlZE9wdGlvblwiIGNsYXNzPVwiZm9ybS1jb250cm9sLWxpdmUtZWRpdC1pbnB1dCBmb3JtLXNlbGVjdFwiIEBpbnB1dD1cIiRlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsICRldmVudC50YXJnZXQudmFsdWUpXCI+XG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2LWlmPVwic2VsZWN0ZWRPcHRpb25cIiA6dmFsdWU9XCJzZWxlY3RlZE9wdGlvblwiPnt7IHNlbGVjdGVkT3B0aW9uIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2LWZvcj1cIm9wdGlvbiBpbiBvcHRpb25zXCIgOnNlbGVjdGVkPVwic2VsZWN0ZWRPcHRpb24gPT09IG9wdGlvbi5rZXlcIiA6dmFsdWU9XCJvcHRpb24ua2V5XCI+XG4gICAgICAgICAgICAgICAgICB7eyBvcHRpb24udmFsdWUgfX1cbiAgICAgICAgICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZm9ybS1jb250cm9sLWxpdmUtZWRpdC1sYWJlbC13cmFwcGVyIG15LTQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBmbGV4LXdyYXAgZ2FwLTJcIj5cblxuICAgIDxsYWJlbCBjbGFzcz1cImxpdmUtZWRpdC1sYWJlbCBweC0wIGNvbC00XCI+Rm9udDwvbGFiZWw+XG4gICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2wtbGl2ZS1lZGl0LWlucHV0IGZvcm0tc2VsZWN0XCJcbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICByZWY9XCJkcm9wZG93bkJ1dHRvblwiXG4gICAgICAgICAgaWQ9XCJmb250RHJvcGRvd25cIlxuICAgICAgICAgIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIlxuXG4gICAgICAgICAgYXJpYS1oYXNwb3B1cD1cInRydWVcIlxuICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxuICAgICAgICA8ZGl2IHYtc2hvdz1cImZvbnRGYW1pbHlcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImZvbnQtcGlja2VyLXNlbGVjdGVkLWZvbnRcIiA6c3R5bGU9XCJ7IGZvbnRGYW1pbHk6IGZvbnRGYW1pbHkgfVwiPlxuICAgICAgICAgICAge3sgZm9udEZhbWlseSB9fVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgdi1zaG93PVwiIWZvbnRGYW1pbHlcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImZvbnQtcGlja2VyLXNlbGVjdGVkLWZvbnRcIj5cbiAgICAgICAgICAgIFNlbGVjdFxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIiBhcmlhLWxhYmVsbGVkYnk9XCJmb250RHJvcGRvd25cIj5cbiAgICAgICAgPGxpXG4gICAgICAgICAgICB2LWZvcj1cIihmb250RmFtaWx5SXRlbSwgaW5kZXgpIGluIHN1cHBvcnRlZEZvbnRzXCJcbiAgICAgICAgICAgIDprZXk9XCJpbmRleFwiXG4gICAgICAgICAgICA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBmb250RmFtaWx5SXRlbSA9PT0gZm9udEZhbWlseSB9XCI+XG4gICAgICAgICAgPGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNcIiBAY2xpY2s9XCJzZWxlY3RGb250KGZvbnRGYW1pbHlJdGVtKVwiIDpzdHlsZT1cInsgZm9udEZhbWlseTogZm9udEZhbWlseUl0ZW0gfVwiPlxuICAgICAgICAgICAge3sgZm9udEZhbWlseUl0ZW0gfX1cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvbGk+XG4gICAgICA8L3VsPlxuICAgICAgICA8c21hbGwgY2xhc3M9XCJjdXJzb3ItcG9pbnRlciBtcy1hdXRvXCIgdi1vbjpjbGljaz1cImxvYWRNb3JlRm9udHMoKVwiPkxvYWQgbW9yZSBmb250cyA8L3NtYWxsPlxuXG4gIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczoge1xuICAgIHZhbHVlOiBTdHJpbmdcbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICB2YWx1ZShuZXdGb250RmFtaWx5KSB7XG4gICAgICB0aGlzLmZvbnRGYW1pbHkgPSBuZXdGb250RmFtaWx5O1xuICAgIH0sXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGxvYWRNb3JlRm9udHMoKSB7XG4gICAgICBtdy50b3AoKS5hcHAuZm9udE1hbmFnZXIubWFuYWdlRm9udHMoKTtcbiAgICB9LFxuXG4gICAgc2VsZWN0Rm9udChmb250RmFtaWx5KSB7XG4gICAgICB0aGlzLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5O1xuICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgZm9udEZhbWlseSk7XG4gICAgfSxcbiAgfSxcblxuICBtb3VudGVkKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zdXBwb3J0ZWRGb250cyA9IG13LnRvcCgpLmFwcC5mb250TWFuYWdlci5nZXRGb250cygpO1xuICAgICAgdGhpcy4kZm9yY2VVcGRhdGUoKTtcblxuICAgICAgbXcudG9wKCkuYXBwLmZvbnRNYW5hZ2VyLnN1YnNjcmliZSgoZm9udHMpID0+IHtcbiAgICAgICAgaWYgKGZvbnRzKSB7XG4gICAgICAgICAgdGhpcy5zdXBwb3J0ZWRGb250cyA9IGZvbnRzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9LCAxMDAwKTtcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3VwcG9ydGVkRm9udHM6IFtdLFxuICAgICAgZm9udEZhbWlseTogdGhpcy52YWx1ZSxcbiAgICB9O1xuICB9LFxufTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZm9ybS1jb250cm9sLWxpdmUtZWRpdC1sYWJlbC13cmFwcGVyIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cbiAgICA8bGFiZWwgY2xhc3M9XCJsaXZlLWVkaXQtbGFiZWwgcHgtMCBjb2wtNFwiPnt7IGxhYmVsIH19IHt7IHNlbGVjdGVkVmFsdWUgfX17eyB1bml0IH19PC9sYWJlbD5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLTYgbXMtNFwiIGRhdGEtc2l6ZT1cIm1lZGl1bVwiPlxuICAgICAgPHYtc2xpZGVyIDptaW49XCJtaW5cIiA6bWF4PVwibWF4XCIgOnN0ZXA9XCJzdGVwXCIgdi1tb2RlbD1cInNlbGVjdGVkVmFsdWVcIj48L3Ytc2xpZGVyPlxuICAgICAgPHNwYW4gQGNsaWNrPVwicmVzZXRWYWx1ZVwiIGNsYXNzPVwicmVzZXQtZmllbGQgdGlwICBtdy1hY3Rpb24tYnV0dG9ucy1iYWNrZ3JvdW5kLWNpcmNsZS1vbi1ob3ZlclwiIGRhdGEtdGlwcG9zaXRpb249XCJ0b3AtcmlnaHRcIiBkYXRhLXRpcD1cIlJlc3RvcmUgZGVmYXVsdCB2YWx1ZVwiPlxuICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgLTk2MCA5NjAgOTYwXCIgd2lkdGg9XCIxNlwiPjxwYXRoIGQ9XCJNNDQwLTEyMnEtMTIxLTE1LTIwMC41LTEwNS41VDE2MC00NDBxMC02NiAyNi0xMjYuNVQyNjAtNjcybDU3IDU3cS0zOCAzNC01Ny41IDc5VDI0MC00NDBxMCA4OCA1NiAxNTUuNVQ0NDAtMjAydjgwWm04MCAwdi04MHE4Ny0xNiAxNDMuNS04M1Q3MjAtNDQwcTAtMTAwLTcwLTE3MHQtMTcwLTcwaC0zbDQ0IDQ0LTU2IDU2LTE0MC0xNDAgMTQwLTE0MCA1NiA1Ni00NCA0NGgzcTEzNCAwIDIyNyA5M3Q5MyAyMjdxMCAxMjEtNzkuNSAyMTEuNVQ1MjAtMTIyWlwiPjwvcGF0aD48L3N2Zz5cbiAgICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIHByb3BzOiB7XG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICBtb2RlbFZhbHVlOiBOdW1iZXIsIC8vIFJlbmFtZSB0aGUgcHJvcCB0byBtb2RlbFZhbHVlXG4gICAgbWluOiBOdW1iZXIsXG4gICAgbWF4OiBOdW1iZXIsXG4gICAgc3RlcDogTnVtYmVyLFxuICAgIHVuaXQ6IFN0cmluZywgLy8gQWRkIHRoZSB1bml0IHByb3BcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0ZWRWYWx1ZTogdGhpcy5tb2RlbFZhbHVlLCAvLyBVc2UgbW9kZWxWYWx1ZSBhcyB0aGUgaW5pdGlhbCB2YWx1ZVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICByZXNldFZhbHVlKCkge1xuICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlID0gbnVsbDtcbiAgICB9LFxuICB9LFxuICB3YXRjaDoge1xuICAgIHNlbGVjdGVkVmFsdWUobmV3VmFsdWUpIHtcbiAgICAgIC8vIE9ubHkgZW1pdCB0aGUgJ3VwZGF0ZTptb2RlbFZhbHVlJyBldmVudCBpZiBzZWxlY3RlZFZhbHVlIGlzIGRpZmZlcmVudCBmcm9tIG1vZGVsVmFsdWVcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdGhpcy5tb2RlbFZhbHVlKSB7XG4gICAgICAgIHRoaXMuJGVtaXQoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLCBuZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBtb2RlbFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICAvLyBVcGRhdGUgc2VsZWN0ZWRWYWx1ZSB3aGVuIHRoZSBwYXJlbnQncyB2LW1vZGVsIGNoYW5nZXNcbiAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgIH0sXG4gIH0sXG59O1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4XCI+XG4gICAgICAgIDxzdmcgZmlsbD1cImN1cnJlbnRDb2xvclwiIGhlaWdodD1cIjI0XCIgd2lkdGg9XCIyNFwiICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgdmVyc2lvbj1cIjEuMVwiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAyNCAyNDtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPlxuICAgICAgICAgICAgPHBhdGggZD1cIk0yMSw3VjNoLTR2MUg3VjNIM3Y0aDF2MTBIM3Y0aDR2LTFoMTB2MWg0di00aC0xVjdIMjEgTTE4LDRoMnYyaC0yVjQgTTQsNGgydjJINFY0IE02LDIwSDR2LTJoMlYyMCBNMjAsMjBoLTJ2LTJoMlYyMCAgIE0xOCwxN2gtMXYxSDd2LTFINlY3aDFWNmgxMHYxaDFWMTcgTTE2LDh2MmgtM3Y2aC0ydi02SDhWOEgxNnpcIj48L3BhdGg+XG4gICAgICAgIDwvc3ZnPlxuXG4gICAgICAgIDxiIGNsYXNzPVwibXctYWRtaW4tYWN0aW9uLWxpbmtzIG1zLTNcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IHNob3dUeXBvZ3JhcGh5IH1cIiB2LW9uOmNsaWNrPVwidG9nZ2xlVHlwb2dyYXBoeVwiPlxuICAgICAgICAgICAgVHlwb2dyYXBoeVxuICAgICAgICA8L2I+XG4gICAgPC9kaXY+XG4gICAgPGRpdiB2LWlmPVwic2hvd1R5cG9ncmFwaHlcIj5cbiAgICAgPGRpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwibXktNCBwdC0yXCI+XG4gICAgICAgICAgICA8Rm9udFBpY2tlciB2LW1vZGVsPVwiZm9udEZhbWlseVwiIHYtYmluZDp2YWx1ZT1mb250RmFtaWx5IEBjaGFuZ2U9XCJoYW5kbGVGb250Q2hhbmdlXCIgOmxhYmVsPVwiJ0ZhbWlseSdcIi8+XG4gICAgICAgIDwvZGl2PlxuXG5cbiAgICAgICAgPEFsaWduIDp0ZXh0QWxpZ249XCJ0ZXh0QWxpZ25cIiBAdXBkYXRlOnRleHRBbGlnbj1cInNldFRleHRBbGlnbm1lbnRcIi8+XG5cblxuICAgICAgICA8Q29sb3JQaWNrZXIgdi1tb2RlbD1cImNvbG9yXCIgdi1iaW5kOmNvbG9yPWNvbG9yIDpsYWJlbD1cIidDb2xvcidcIiBAY2hhbmdlPVwiaGFuZGxlRm9udENvbG9yQ2hhbmdlXCIvPlxuXG4gICAgICAgIDxTbGlkZXJTbWFsbFxuICAgICAgICAgICAgbGFiZWw9XCJTaXplXCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmb250U2l6ZVwiXG4gICAgICAgICAgICA6bWluPVwiMFwiXG4gICAgICAgICAgICA6bWF4PVwiMTAwXCJcbiAgICAgICAgICAgIDpzdGVwPVwiNVwiXG4gICAgICAgID48L1NsaWRlclNtYWxsPlxuXG5cbiAgICAgICAgPERyb3Bkb3duU21hbGwgdi1tb2RlbD1cImZvbnRXZWlnaHRcIiA6b3B0aW9ucz1cImZvbnRXZWlnaHRPcHRpb25zXCIgOmxhYmVsPVwiJ1dlaWdodCdcIi8+XG4gICAgICAgIDxEcm9wZG93blNtYWxsIHYtbW9kZWw9XCJ0ZXh0VHJhbnNmb3JtXCIgOm9wdGlvbnM9XCJ0ZXh0VHJhbnNmb3JtT3B0aW9uc1wiIDpsYWJlbD1cIidUcmFuc2Zvcm0nXCIvPlxuICAgICAgICA8RHJvcGRvd25TbWFsbCB2LW1vZGVsPVwiZm9udFN0eWxlXCIgOm9wdGlvbnM9XCJmb250U3R5bGVzT3B0aW9uc1wiIDpsYWJlbD1cIidTdHlsZSdcIi8+XG5cblxuICAgICAgICA8U2xpZGVyU21hbGxcbiAgICAgICAgICAgIGxhYmVsPVwiSGVpZ2h0XCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJsaW5lSGVpZ2h0XCJcbiAgICAgICAgICAgIDptaW49XCIwXCJcbiAgICAgICAgICAgIDptYXg9XCIxMDBcIlxuICAgICAgICAgICAgOnN0ZXA9XCI1XCJcbiAgICAgICAgPjwvU2xpZGVyU21hbGw+XG5cblxuICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG5cbjxzY3JpcHQ+XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Gb3JtL0lucHV0LnZ1ZSc7XG5pbXBvcnQgQWxpZ24gZnJvbSAnLi9jb21wb25lbnRzL0FsaWduLnZ1ZSc7XG5pbXBvcnQgRHJvcGRvd25TbWFsbCBmcm9tICcuL2NvbXBvbmVudHMvRHJvcGRvd25TbWFsbC52dWUnO1xuaW1wb3J0IERyb3Bkb3duIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvRm9ybS9Ecm9wZG93bi52dWUnO1xuaW1wb3J0IEZvbnRQaWNrZXIgZnJvbSBcIi4vY29tcG9uZW50cy9Gb250UGlja2VyLnZ1ZVwiO1xuaW1wb3J0IENvbG9yUGlja2VyIGZyb20gXCIuL2NvbXBvbmVudHMvQ29sb3JQaWNrZXIudnVlXCI7XG5pbXBvcnQgU2xpZGVyU21hbGwgZnJvbSBcIi4vY29tcG9uZW50cy9TbGlkZXJTbWFsbC52dWVcIjtcbmltcG9ydCBTbGlkZXIgZnJvbSAnQHZ1ZWZvcm0vc2xpZGVyJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtDb2xvclBpY2tlciwgRm9udFBpY2tlciwgRHJvcGRvd24sIElucHV0LCBTbGlkZXIsIEFsaWduLCBEcm9wZG93blNtYWxsLCBTbGlkZXJTbWFsbH0sXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdzaG93VHlwb2dyYXBoeSc6IGZhbHNlLFxuICAgICAgICAgICAgJ2FjdGl2ZU5vZGUnOiBudWxsLFxuICAgICAgICAgICAgJ2lzUmVhZHknOiBmYWxzZSxcbiAgICAgICAgICAgICd0ZXh0VHJhbnNmb3JtT3B0aW9ucyc6IFtcbiAgICAgICAgICAgICAgICB7XCJrZXlcIjogXCJub25lXCIsIFwidmFsdWVcIjogXCJOb25lXCJ9LFxuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcImNhcGl0YWxpemVcIiwgXCJ2YWx1ZVwiOiBcIkNhcGl0YWxpemVcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwidXBwZXJjYXNlXCIsIFwidmFsdWVcIjogXCJVcHBlcmNhc2VcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwibG93ZXJjYXNlXCIsIFwidmFsdWVcIjogXCJMb3dlcmNhc2VcIn1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAnZm9udFdlaWdodE9wdGlvbnMnOiBbXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwibm9ybWFsXCIsIFwidmFsdWVcIjogXCJOb3JtYWxcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwiYm9sZFwiLCBcInZhbHVlXCI6IFwiQm9sZFwifSxcbiAgICAgICAgICAgICAgICB7XCJrZXlcIjogXCJib2xkZXJcIiwgXCJ2YWx1ZVwiOiBcIkJvbGRlclwifSxcbiAgICAgICAgICAgICAgICB7XCJrZXlcIjogXCJsaWdodGVyXCIsIFwidmFsdWVcIjogXCJMaWdodGVyXCJ9LFxuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcIjEwMFwiLCBcInZhbHVlXCI6IFwiMTAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcIjIwMFwiLCBcInZhbHVlXCI6IFwiMjAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcIjMwMFwiLCBcInZhbHVlXCI6IFwiMzAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcIjQwMFwiLCBcInZhbHVlXCI6IFwiNDAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcIjUwMFwiLCBcInZhbHVlXCI6IFwiNTAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcIjYwMFwiLCBcInZhbHVlXCI6IFwiNjAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcIjcwMFwiLCBcInZhbHVlXCI6IFwiNzAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcIjgwMFwiLCBcInZhbHVlXCI6IFwiODAwXCJ9LFxuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcIjkwMFwiLCBcInZhbHVlXCI6IFwiOTAwXCJ9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJmb250U3R5bGVzT3B0aW9uc1wiOiBbXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwibm9ybWFsXCIsIFwidmFsdWVcIjogXCJOb3JtYWxcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwiaXRhbGljXCIsIFwidmFsdWVcIjogXCJJdGFsaWNcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwib2JsaXF1ZVwiLCBcInZhbHVlXCI6IFwiT2JsaXF1ZVwifVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICd0ZXh0QWxpZ24nOiBudWxsLFxuICAgICAgICAgICAgJ2ZvbnRTaXplJzogbnVsbCxcbiAgICAgICAgICAgICdmb250V2VpZ2h0JzogbnVsbCxcbiAgICAgICAgICAgICdmb250U3R5bGUnOiBudWxsLFxuICAgICAgICAgICAgJ2xpbmVIZWlnaHQnOiBudWxsLFxuICAgICAgICAgICAgJ2ZvbnRGYW1pbHknOiBudWxsLFxuICAgICAgICAgICAgJ2NvbG9yJzogbnVsbCxcbiAgICAgICAgICAgICd0ZXh0VHJhbnNmb3JtJzogJ25vbmUnLFxuICAgICAgICAgICAgJ3RleHREZWNvcmF0aW9uSXNCb2xkJzogbnVsbCxcbiAgICAgICAgICAgICd0ZXh0RGVjb3JhdGlvbklzSXRhbGljJzogbnVsbCxcbiAgICAgICAgICAgICd0ZXh0RGVjb3JhdGlvbklzVW5kZXJsaW5lJzogbnVsbCxcbiAgICAgICAgICAgICd0ZXh0RGVjb3JhdGlvbklzU3RyaWtldGhyb3VnaCc6IG51bGwsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgdG9nZ2xlVHlwb2dyYXBoeSgpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1R5cG9ncmFwaHkgPSAhdGhpcy5zaG93VHlwb2dyYXBoeTtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93JywgJ3R5cG9ncmFwaHknKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXRBbGxQcm9wZXJ0aWVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmZvbnRTaXplID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuZm9udFdlaWdodCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmZvbnRTdHlsZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmxpbmVIZWlnaHQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5mb250RmFtaWx5ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuY29sb3IgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy50ZXh0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgICAgICAgdGhpcy50ZXh0RGVjb3JhdGlvbklzQm9sZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnRleHREZWNvcmF0aW9uSXNJdGFsaWMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy50ZXh0RGVjb3JhdGlvbklzVW5kZXJsaW5lID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudGV4dERlY29yYXRpb25Jc1N0cmlrZXRocm91Z2ggPSBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBvcHVsYXRlU3R5bGVFZGl0b3I6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBpZiAobm9kZSAmJiBub2RlICYmIG5vZGUubm9kZVR5cGUgPT09IDEpIHtcblxuICAgICAgICAgICAgICAgIG13LnRvcCgpLmFwcC5kaXNwYXRjaCgnbXcuZWxlbWVudFN0eWxlRWRpdG9yLmNsb3NlQWxsT3BlbmVkTWVudXMnKTtcbiAgICAgICAgICAgICAgICB2YXIgY3NzID0gbXcuQ1NTUGFyc2VyKG5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRBbGxQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVOb2RlID0gbm9kZTtcblxuXG4gICAgICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZUNzc1RleHRBbGlnbihjc3MpO1xuICAgICAgICAgICAgICAgIHRoaXMucG9wdWxhdGVDc3NUZXh0RGVjb3JhdGlvbihjc3MpO1xuICAgICAgICAgICAgICAgIHRoaXMucG9wdWxhdGVDc3NGb250KGNzcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZUNzc1RleHRUcmFuc2Zvcm0oY3NzKTtcblxuXG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG5cbiAgICAgICAgcG9wdWxhdGVDc3NUZXh0QWxpZ246IGZ1bmN0aW9uIChjc3MpIHtcbiAgICAgICAgICAgIGlmICghY3NzIHx8ICFjc3MuZ2V0KSByZXR1cm47XG4gICAgICAgICAgICB2YXIgYWxpZ24gPSBjc3MuZ2V0LmFsaWduTm9ybWFsaXplKCk7XG4gICAgICAgICAgICB0aGlzLnRleHRBbGlnbiA9IGFsaWduO1xuICAgICAgICB9LFxuICAgICAgICBwb3B1bGF0ZUNzc1RleHREZWNvcmF0aW9uOiBmdW5jdGlvbiAoY3NzKSB7XG4gICAgICAgICAgICBpZiAoIWNzcyB8fCAhY3NzLmdldCkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGlzID0gY3NzLmdldC5pcygpO1xuXG4gICAgICAgICAgICB0aGlzLnRleHREZWNvcmF0aW9uSXNCb2xkID0gaXMuYm9sZDtcbiAgICAgICAgICAgIHRoaXMudGV4dERlY29yYXRpb25Jc0l0YWxpYyA9IGlzLml0YWxpYztcbiAgICAgICAgICAgIHRoaXMudGV4dERlY29yYXRpb25Jc1VuZGVybGluZSA9IGlzLnVuZGVybGluZWQ7XG4gICAgICAgICAgICB0aGlzLnRleHREZWNvcmF0aW9uSXNTdHJpa2V0aHJvdWdoID0gaXMuc3RyaWtlZDtcblxuICAgICAgICB9LFxuXG4gICAgICAgIHNldFRleHRBbGlnbm1lbnQ6IGZ1bmN0aW9uIChhbGlnbm1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dEFsaWduID0gYWxpZ25tZW50O1xuXG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZUZvbnRDaGFuZ2U6IGZ1bmN0aW9uIChmb250RmFtaWx5KSB7XG4gICAgICAgICAgICB0aGlzLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5O1xuICAgICAgICB9LFxuXG4gICAgICAgIGhhbmRsZUZvbnRDb2xvckNoYW5nZTogZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIChjb2xvcikgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICAgICAgfSxcblxuICAgICAgICBwb3B1bGF0ZUNzc0ZvbnQ6IGZ1bmN0aW9uIChjc3MpIHtcbiAgICAgICAgICAgIGlmICghY3NzIHx8ICFjc3MuZ2V0KSByZXR1cm47XG4gICAgICAgICAgICB2YXIgZm9udCA9IGNzcy5nZXQuZm9udCgpO1xuXG5cbiAgICAgICAgICAgIC8vcmVwYWxjZSBweFxuICAgICAgICAgICAgaWYgKGZvbnQuc2l6ZSkge1xuICAgICAgICAgICAgICAgIGZvbnQuc2l6ZSA9IGZvbnQuc2l6ZS5yZXBsYWNlKCdweCcsICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmb250LmxpbmVIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBmb250LmxpbmVIZWlnaHQgPSBmb250LmxpbmVIZWlnaHQucmVwbGFjZSgncHgnLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZvbnRTaXplID0gZm9udC5zaXplO1xuXG4gICAgICAgICAgICB0aGlzLmZvbnRXZWlnaHQgPSBmb250LndlaWdodDtcbiAgICAgICAgICAgIHRoaXMuZm9udFN0eWxlID0gZm9udC5zdHlsZTtcbiAgICAgICAgICAgIHRoaXMubGluZUhlaWdodCA9IGZvbnQubGluZUhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuZm9udEZhbWlseSA9IGZvbnQuZmFtaWx5O1xuICAgICAgICAgICAgdGhpcy5jb2xvciA9IGZvbnQuY29sb3I7XG4gICAgICAgIH0sXG4gICAgICAgIHBvcHVsYXRlQ3NzVGV4dFRyYW5zZm9ybTogZnVuY3Rpb24gKGNzcykge1xuICAgICAgICAgICAgaWYgKCFjc3MgfHwgIWNzcy5nZXQpIHJldHVybjtcbiAgICAgICAgICAgIHZhciB0ZXh0VHJhbnNmb3JtID0gY3NzLmdldC50ZXh0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICB0aGlzLnRleHRUcmFuc2Zvcm0gPSB0ZXh0VHJhbnNmb3JtO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGU6IGZ1bmN0aW9uIChwcm9wLCB2YWwpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1JlYWR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVOb2RlKSB7XG4gICAgICAgICAgICAgICAgbXcudG9wKCkuYXBwLmRpc3BhdGNoKCdtdy5lbGVtZW50U3R5bGVFZGl0b3IuYXBwbHlDc3NQcm9wZXJ0eVRvTm9kZScsIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZTogdGhpcy5hY3RpdmVOb2RlLFxuICAgICAgICAgICAgICAgICAgICBwcm9wOiBwcm9wLFxuICAgICAgICAgICAgICAgICAgICB2YWw6IHZhbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgfSxcblxuICAgIG1vdW50ZWQoKSB7XG5cbiAgICAgICAgdGhpcy5lbWl0dGVyLm9uKFwiZWxlbWVudC1zdHlsZS1lZGl0b3Itc2hvd1wiLCBlbGVtZW50U3R5bGVFZGl0b3JTaG93ID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50U3R5bGVFZGl0b3JTaG93ICE9PSAndHlwb2dyYXBoeScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dUeXBvZ3JhcGh5ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG13LnRvcCgpLmFwcC5vbignbXcuZWxlbWVudFN0eWxlRWRpdG9yLnNlbGVjdE5vZGUnLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZVN0eWxlRWRpdG9yKGVsZW1lbnQpXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICB3YXRjaDoge1xuICAgICAgICBmb250RmFtaWx5OiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2ZvbnRGYW1pbHknLCBuZXdWYWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZvbnRTaXplOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2ZvbnRTaXplJywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9udFdlaWdodDogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdmb250V2VpZ2h0JywgbmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBmb250U3R5bGU6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnZm9udFN0eWxlJywgbmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICB0ZXh0QWxpZ246IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgndGV4dEFsaWduJywgbmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBsaW5lSGVpZ2h0OiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgc2V0QXV0byA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAobmV3VmFsdWUpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHNldEF1dG8gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZXRBdXRvID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZXRBdXRvKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdsaW5lSGVpZ2h0JywgJ2F1dG8nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2xpbmVIZWlnaHQnLCBuZXdWYWx1ZSArICdweCcpO1xuICAgICAgICB9LFxuICAgICAgICBjb2xvcjogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdjb2xvcicsIG5ld1ZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dFRyYW5zZm9ybTogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCd0ZXh0VHJhbnNmb3JtJywgbmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgIH0sXG5cblxufVxuPC9zY3JpcHQ+XG5cblxuIiwiXG5cbjxzdHlsZT5cblxuLm13LWVzZS1ob2xkZXJ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2ZjZmNmO1xuICAgIHRyYW5zaXRpb246IC4ycztcbn1cblxuLm13LWVzZS1ob2xkZXIuYWN0aXZle1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzAwODZkYjtcbiAgICBib3gtc2hhZG93OiAwIDAgM3B4IHJnYmEoMCwgMTM0LCAyMTksIC40KTtcbn1cblxuXG5cbiAgICAubXctZXNlLW1hcmdpbntcblxuICAgICAgICBwYWRkaW5nOiAgMzVweCA1MHB4O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG5cbiAgICAubXctZXNlLXBhZGRpbmd7XG4gICAgICAgIHdpZHRoOiAxMDBweDtcbiAgICAgICAgaGVpZ2h0OiA2NXB4O1xuICAgICAgICBwYWRkaW5nOiA1MHB4IDM1cHg7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB9XG4gICAgLm13LWVsZW1lbnQtc3BhY2luZy1lZGl0b3J7XG4gICAgICAgIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgICB9XG5cbiAgICAubXctZWxlbWVudC1zcGFjaW5nLWVkaXRvciAuaW5wdXQgaW5wdXR7XG4gICAgICAgIHdpZHRoOiA0MHB4O1xuICAgICAgICBoZWlnaHQ6IDIycHg7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNjZmNmY2Y7XG4gICAgICAgIHBhZGRpbmc6IDAgM3B4O1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICB9XG4gICAgLm13LWVsZW1lbnQtc3BhY2luZy1lZGl0b3IgLmlucHV0e1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG5cbiAgICAgICAgei1pbmRleDogMTtcbiAgICB9XG4gICAgLm13LWVzZS10b3B7XG4gICAgICAgIHRvcDogLTEwcHg7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICAgIH1cbiAgICAubXctZXNlLXJpZ2h0e1xuICAgICAgICB0b3A6IDUwJTtcbiAgICAgICAgcmlnaHQ6IC0yMHB4O1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgfVxuICAgIC5tdy1lc2UtYm90dG9te1xuICAgICAgICBib3R0b206IC0xMHB4O1xuICAgICAgICBsZWZ0OiA1MCU7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICB9XG4gICAgLm13LWVzZS1sZWZ0e1xuICAgICAgICB0b3A6IDUwJTtcbiAgICAgICAgbGVmdDogLTIwcHg7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICB9XG4gICAgLm13LWVzZS1sYWJlbHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGZvbnQtc2l6ZTogMTBweDtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICB9XG4gICAgLm13LWVzZS1wYWRkaW5nIC5tdy1lc2UtbGFiZWx7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDUwJTtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICB9XG4gIDwvc3R5bGU+XG5cbjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJkLWZsZXhcIj5cbiAgICAgICAgPHN2ZyBmaWxsPVwiY3VycmVudENvbG9yXCIgaGVpZ2h0PVwiMjRcIiB3aWR0aD1cIjI0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHZlcnNpb249XCIxLjFcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMjQgMjQ7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTAuNiwxMmw0LTRIMTFWNmg3djdoLTJWOS40bC00LDRWMTZoOFY0SDh2OEgxMC42IE0yMiwydjE2SDEydjRIMlYxMmg0VjJIMjIgTTEwLDE0SDR2Nmg2VjE0elwiPjwvcGF0aD5cbiAgICAgICAgPC9zdmc+XG5cbiAgICAgICAgPGIgY2xhc3M9XCJtdy1hZG1pbi1hY3Rpb24tbGlua3MgbXMtM1wiIDpjbGFzcz1cInsnYWN0aXZlJzogc2hvd1NwYWNpbmcgfVwiIHYtb246Y2xpY2s9XCJ0b2dnbGVTcGFjaW5nXCI+XG4gICAgICAgICAgICBTcGFjaW5nXG4gICAgICAgIDwvYj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgdi1pZj1cInNob3dTcGFjaW5nXCI+XG5cblxuICAgIDxkaXYgY2xhc3M9XCJtdy1lbGVtZW50LXNwYWNpbmctZWRpdG9yIG10LTRcIj5cbiAgICA8c3BhbiBjbGFzcz1cIm13LWVzZS1sYWJlbFwiPk1hcmdpbjwvc3Bhbj5cbiAgICA8ZGl2IGNsYXNzPVwibXctZXNlLWhvbGRlciBtdy1lc2UtbWFyZ2luXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQgbXctZXNlLXRvcFwiPjxpbnB1dCB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJtYXJnaW5Ub3BcIj48L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQgbXctZXNlLXJpZ2h0XCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgdi1tb2RlbD1cIm1hcmdpblJpZ2h0XCI+PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0IG13LWVzZS1ib3R0b21cIj48aW5wdXQgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwibWFyZ2luQm90dG9tXCI+PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0IG13LWVzZS1sZWZ0XCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgdi1tb2RlbD1cIm1hcmdpbkxlZnRcIj48L3NwYW4+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtdy1lc2UtaG9sZGVyIG13LWVzZS1wYWRkaW5nXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0IG13LWVzZS10b3BcIj48aW5wdXQgdHlwZT1cInRleHRcIiBtaW49XCIwXCIgdi1tb2RlbD1cInBhZGRpbmdUb3BcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0IG13LWVzZS1yaWdodFwiPjxpbnB1dCB0eXBlPVwidGV4dFwiIG1pbj1cIjBcIiB2LW1vZGVsPVwicGFkZGluZ1JpZ2h0XCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dCBtdy1lc2UtYm90dG9tXCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbWluPVwiMFwiIHYtbW9kZWw9XCJwYWRkaW5nQm90dG9tXCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dCBtdy1lc2UtbGVmdFwiPjxpbnB1dCB0eXBlPVwidGV4dFwiIG1pbj1cIjBcIiB2LW1vZGVsPVwicGFkZGluZ0xlZnRcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm13LWVzZS1sYWJlbFwiPlBhZGRpbmc8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+XG48L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cblxuZXhwb3J0IGRlZmF1bHQge1xuXG5cbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAnc2hvd1NwYWNpbmcnOiBmYWxzZSxcbiAgICAgICdhY3RpdmVOb2RlJzogbnVsbCxcbiAgICAgICdpc1JlYWR5JzogZmFsc2UsXG5cbiAgICAgICdtYXJnaW5Ub3AnOiBudWxsLFxuICAgICAgJ21hcmdpblJpZ2h0JzogbnVsbCxcbiAgICAgICdtYXJnaW5Cb3R0b20nOiBudWxsLFxuICAgICAgJ21hcmdpbkxlZnQnOiBudWxsLFxuXG4gICAgICAncGFkZGluZ1RvcCc6IG51bGwsXG4gICAgICAncGFkZGluZ1JpZ2h0JzogbnVsbCxcbiAgICAgICdwYWRkaW5nQm90dG9tJzogbnVsbCxcbiAgICAgICdwYWRkaW5nTGVmdCc6IG51bGwsXG5cbiAgICB9O1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICAgIHRvZ2dsZVNwYWNpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zaG93U3BhY2luZyA9ICF0aGlzLnNob3dTcGFjaW5nO1xuICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93JywgJ3NwYWNpbmcnKTtcbiAgICB9LFxuICAgIHJlc2V0QWxsUHJvcGVydGllczogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tYXJnaW5Ub3AgPSBudWxsO1xuICAgICAgdGhpcy5tYXJnaW5SaWdodCA9IG51bGw7XG4gICAgICB0aGlzLm1hcmdpbkJvdHRvbSA9IG51bGw7XG4gICAgICB0aGlzLm1hcmdpbkxlZnQgPSBudWxsO1xuXG4gICAgICB0aGlzLnBhZGRpbmdUb3AgPSBudWxsO1xuICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSBudWxsO1xuICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gbnVsbDtcbiAgICAgIHRoaXMucGFkZGluZ0xlZnQgPSBudWxsO1xuICAgIH0sXG5cbiAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKG5vZGUgJiYgbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIHZhciBjc3MgPSBtdy5DU1NQYXJzZXIobm9kZSk7XG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc2V0QWxsUHJvcGVydGllcygpO1xuICAgICAgICB0aGlzLmFjdGl2ZU5vZGUgPSBub2RlO1xuXG4gICAgICAgIHRoaXMucG9wdWxhdGVDc3NQYWRkaW5nKGNzcyk7XG4gICAgICAgIHRoaXMucG9wdWxhdGVDc3NNYXJnaW4oY3NzKTtcblxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICAgIH0sIDEwMCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHBvcHVsYXRlQ3NzUGFkZGluZzogZnVuY3Rpb24gKGNzcykge1xuICAgICAgdmFyIHBhZGRpbmcgPSBjc3MuZ2V0LnBhZGRpbmcodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIHRoaXMucGFkZGluZ1RvcCA9IHBhcnNlRmxvYXQocGFkZGluZy50b3ApO1xuICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSBwYXJzZUZsb2F0KHBhZGRpbmcucmlnaHQpO1xuICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gcGFyc2VGbG9hdChwYWRkaW5nLmJvdHRvbSk7XG4gICAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gcGFyc2VGbG9hdChwYWRkaW5nLmxlZnQpO1xuICAgIH0sXG5cbiAgICBwb3B1bGF0ZUNzc01hcmdpbjogZnVuY3Rpb24gKGNzcykge1xuICAgICAgaWYgKCFjc3MgfHwgIWNzcy5nZXQpIHJldHVybjtcbiAgICAgIHZhciBtYXJnaW4gPSBjc3MuZ2V0Lm1hcmdpbih1bmRlZmluZWQsIHRydWUpO1xuICAgICAgdGhpcy5tYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KG1hcmdpbi50b3ApO1xuICAgICAgdGhpcy5tYXJnaW5SaWdodCA9IHBhcnNlRmxvYXQobWFyZ2luLnJpZ2h0KTtcbiAgICAgIHRoaXMubWFyZ2luQm90dG9tID0gcGFyc2VGbG9hdChtYXJnaW4uYm90dG9tKTtcbiAgICAgIHRoaXMubWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQobWFyZ2luLmxlZnQpO1xuICAgIH0sXG5cblxuICAgIGFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGU6IGZ1bmN0aW9uIChwcm9wLCB2YWwpIHtcbiAgICAgIGlmICghdGhpcy5pc1JlYWR5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuXG4gICAgICBpZiAodGhpcy5hY3RpdmVOb2RlKSB7XG4gICAgICAgIG13LnRvcCgpLmFwcC5kaXNwYXRjaCgnbXcuZWxlbWVudFN0eWxlRWRpdG9yLmFwcGx5Q3NzUHJvcGVydHlUb05vZGUnLCB7XG4gICAgICAgICAgbm9kZTogdGhpcy5hY3RpdmVOb2RlLFxuICAgICAgICAgIHByb3A6IHByb3AsXG4gICAgICAgICAgdmFsOiB2YWxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICB9LFxuICBtb3VudGVkKCkge1xuXG4gICAgICB0aGlzLmVtaXR0ZXIub24oXCJlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93XCIsIGVsZW1lbnRTdHlsZUVkaXRvclNob3cgPT4ge1xuICAgICAgICAgIGlmIChlbGVtZW50U3R5bGVFZGl0b3JTaG93ICE9PSAnc3BhY2luZycpIHtcbiAgICAgICAgICAgICAgdGhpcy5zaG93U3BhY2luZyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgbXcudG9wKCkuYXBwLm9uKCdtdy5lbGVtZW50U3R5bGVFZGl0b3Iuc2VsZWN0Tm9kZScsIChlbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLnBvcHVsYXRlU3R5bGVFZGl0b3IoZWxlbWVudClcbiAgICB9KTtcblxuICB9LFxuXG4gIHdhdGNoOiB7XG4gICAgLy8gTWFyZ2luLXJlbGF0ZWQgcHJvcGVydHkgd2F0Y2hlcnNcbiAgICBtYXJnaW5Ub3A6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnbWFyZ2luVG9wJywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICB9LFxuICAgIG1hcmdpblJpZ2h0OiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ21hcmdpblJpZ2h0JywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICB9LFxuICAgIG1hcmdpbkJvdHRvbTogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdtYXJnaW5Cb3R0b20nLCBuZXdWYWx1ZSArICdweCcpO1xuICAgIH0sXG4gICAgbWFyZ2luTGVmdDogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdtYXJnaW5MZWZ0JywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICB9LFxuXG4gICAgLy8gUGFkZGluZy1yZWxhdGVkIHByb3BlcnR5IHdhdGNoZXJzXG4gICAgIHBhZGRpbmdUb3A6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgncGFkZGluZ1RvcCcsIG5ld1ZhbHVlICsgJ3B4Jyk7XG4gICAgfSxcbiAgICBwYWRkaW5nUmlnaHQ6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgncGFkZGluZ1JpZ2h0JywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICB9LFxuICAgIHBhZGRpbmdCb3R0b206IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgncGFkZGluZ0JvdHRvbScsIG5ld1ZhbHVlICsgJ3B4Jyk7XG4gICAgfSxcbiAgICBwYWRkaW5nTGVmdDogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdwYWRkaW5nTGVmdCcsIG5ld1ZhbHVlICsgJ3B4Jyk7XG4gICAgfSxcblxuICB9LFxuXG5cbn1cbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuIDxkaXYgY2xhc3M9XCJmb3JtLWNvbnRyb2wtbGl2ZS1lZGl0LWxhYmVsLXdyYXBwZXIgbXktNCBiYWNrZ3JvdW5kLWltYWdlLW5hdiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgPGxhYmVsIGNsYXNzPVwibGl2ZS1lZGl0LWxhYmVsIHB4LTAgdGV4dC1zdGFydFwiPnt7IGxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBjb2xcIj5cbiAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIm13LXVpLWJ0biBtdy11aS1idG4tb3V0bGluZSB0aXAgYmFja2dyb3VuZC1zZWxlY3QtaXRlbVwiIHN0eWxlPVwiYm9yZGVyOiAxcHggc29saWQgIzAwMDtcIlxuICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJzZWxlY3RCYWNrZ3JvdW5kSW1hZ2VcIlxuICAgICAgICAgICAgICAgICAgICBkYXRhLXRpcD1cIlNlbGVjdCBiYWNrZ3JvdW5kIGltYWdlXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgaGVpZ2h0PVwiMjBcIiB2aWV3Qm94PVwiMCAtOTYwIDk2MCA5NjBcIiB3aWR0aD1cIjIwXCI+PHBhdGggZD1cIk0yMDAtMTIwcS0zMyAwLTU2LjUtMjMuNVQxMjAtMjAwdi01NjBxMC0zMyAyMy41LTU2LjVUMjAwLTg0MGg1NjBxMzMgMCA1Ni41IDIzLjVUODQwLTc2MHY1NjBxMCAzMy0yMy41IDU2LjVUNzYwLTEyMEgyMDBabTAtODBoNTYwdi01NjBIMjAwdjU2MFptNDAtODBoNDgwTDU3MC00ODAgNDUwLTMyMGwtOTAtMTIwLTEyMCAxNjBabS00MCA4MHYtNTYwIDU2MFpcIi8+PC9zdmc+XG4gICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPVwiIXNlbGVjdGVkRmlsZVwiIGNsYXNzPVwiYmFja2dyb3VuZC1wcmV2aWV3XCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiBub25lO1wiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9XCJzZWxlY3RlZEZpbGVcIiBjbGFzcz1cImJhY2tncm91bmQtcHJldmlld1wiIDpzdHlsZT1cInsgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7c2VsZWN0ZWRGaWxlfSlgIH1cIj48L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuXG5cbiAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvIGp1c3RpZnktY29udGVudC1lbmQgcGUtNFwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibXctYWN0aW9uLWJ1dHRvbnMtYmFja2dyb3VuZC1jaXJjbGUtb24taG92ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cInJlbW92ZUJhY2tncm91bmRJbWFnZVwiXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YS10aXA9XCJSZW1vdmUgYmFja2dyb3VuZFwiXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YS10aXBwb3NpdGlvbj1cInRvcC1yaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgdi1pZj1cInNlbGVjdGVkRmlsZVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIC05NjAgOTYwIDk2MFwiIHdpZHRoPVwiMTZcIj48cGF0aCBkPVwiTTI4MC0xMjBxLTMzIDAtNTYuNS0yMy41VDIwMC0yMDB2LTUyMGgtNDB2LTgwaDIwMHYtNDBoMjQwdjQwaDIwMHY4MGgtNDB2NTIwcTAgMzMtMjMuNSA1Ni41VDY4MC0xMjBIMjgwWm00MDAtNjAwSDI4MHY1MjBoNDAwdi01MjBaTTM2MC0yODBoODB2LTM2MGgtODB2MzYwWm0xNjAgMGg4MHYtMzYwaC04MHYzNjBaTTI4MC03MjB2NTIwLTUyMFpcIi8+PC9zdmc+XG4gICAgICAgICAgICA8L3NwYW4+XG48IS0tICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtdy1hY3Rpb24tYnV0dG9ucy1iYWNrZ3JvdW5kLWNpcmNsZS1vbi1ob3ZlclwiLS0+XG48IS0tICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwicmVzZXRCYWNrZ3JvdW5kSW1hZ2VcIi0tPlxuPCEtLSAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGlwPVwiUmVzZXQgYmFja2dyb3VuZFwiLS0+XG48IS0tICAgICAgICAgICAgICAgICAgICAgZGF0YS10aXBwb3NpdGlvbj1cInRvcC1yaWdodFwiLS0+XG48IS0tICAgICAgICAgICAgICAgICAgICAgdi1pZj1cInNlbGVjdGVkRmlsZVwiLS0+XG48IS0tICAgICAgICAgICAgICAgPi0tPlxuPCEtLSAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAtOTYwIDk2MCA5NjBcIiB3aWR0aD1cIjE2XCI+PHBhdGggZD1cIk00NDAtMTIycS0xMjEtMTUtMjAwLjUtMTA1LjVUMTYwLTQ0MHEwLTY2IDI2LTEyNi41VDI2MC02NzJsNTcgNTdxLTM4IDM0LTU3LjUgNzlUMjQwLTQ0MHEwIDg4IDU2IDE1NS41VDQ0MC0yMDJ2ODBabTgwIDB2LTgwcTg3LTE2IDE0My41LTgzVDcyMC00NDBxMC0xMDAtNzAtMTcwdC0xNzAtNzBoLTNsNDQgNDQtNTYgNTYtMTQwLTE0MCAxNDAtMTQwIDU2IDU2LTQ0IDQ0aDNxMTM0IDAgMjI3IDkzdDkzIDIyN3EwIDEyMS03OS41IDIxMS41VDUyMC0xMjJaXCI+PC9wYXRoPjwvc3ZnPi0tPlxuPCEtLSAgICAgICAgICAgIDwvc3Bhbj4tLT5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogJ0ltYWdlJywgLy8gRGVmYXVsdCBsYWJlbCB0ZXh0XG4gICAgICAgIH0sXG4gICAgICAgIGZpbGU6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcnLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlbGVjdGVkRmlsZTogdGhpcy5maWxlLFxuICAgICAgICB9O1xuICAgIH0sXG4gIHdhdGNoOiB7XG4gICAgZmlsZShuZXdmaWxlKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkRmlsZSA9IG5ld2ZpbGU7XG4gICAgfSxcbiAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHNlbGVjdEJhY2tncm91bmRJbWFnZSgpIHtcbiAgICAgICAgICAgIG13LmZpbGVQaWNrZXJEaWFsb2coICh1cmwpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRmlsZSA9IHVybDtcblxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuc2VsZWN0ZWRGaWxlKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlQmFja2dyb3VuZEltYWdlKCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpbGUgPSAnJztcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuc2VsZWN0ZWRGaWxlKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXRCYWNrZ3JvdW5kSW1hZ2UoKSB7XG4gICAgICAgICAgICAvLyBJbXBsZW1lbnQgeW91ciByZXNldCBsb2dpYyBoZXJlLCBlLmcuLCBzZXQgJ3NlbGVjdGVkRmlsZScgdG8gYSBkZWZhdWx0IGltYWdlLlxuICAgICAgICAgICAgLy8gRXhhbXBsZTogdGhpcy5zZWxlY3RlZEZpbGUgPSAnZGVmYXVsdC1pbWFnZS11cmwuanBnJztcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuc2VsZWN0ZWRGaWxlKTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4vKiBBZGQgeW91ciBDU1Mgc3R5bGVzIGhlcmUgKi9cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbjxkaXYgY2xhc3M9XCJkLWlubGluZS1mbGV4XCI+XHJcblxyXG4gIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgcmVmPVwiZmlsZXBpY2tlcmlucHV0XCIgdi1tb2RlbD1cInNlbGVjdGVkRmlsZVwiIEBpbnB1dD1cInRyaWdnZXJDaGFuZ2VTZWxlY3RlZEZpbGVcIi8+XHJcblxyXG5cclxuXHJcblxyXG5cclxuICA8YnV0dG9uIHYtaWY9XCJzZWxlY3RlZEZpbGVcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdi1vbjpjbGljaz1cInJlbW92ZUJhY2tncm91bmRJbWFnZSgpXCI+XHJcbiAgICAgPGkgY2xhc3M9XCJtZGkgbWRpLWRlbGV0ZVwiPjwvaT5cclxuICA8L2J1dHRvbj5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gIDxkaXYgdi1pZj1cInNlbGVjdGVkRmlsZVwiIGNsYXNzPVwiZmlsZS1waWNrZXItYmFkZ2VcIlxyXG5cclxuICAgICAgIEBjbGljaz1cInRvZ2dsZVBpY2tlclwiXHJcbiAgICAgICA6c3R5bGU9XCJ7IGJhY2tncm91bmRJbWFnZTogJ3VybCgnICsgc2VsZWN0ZWRGaWxlICsgJyknIH1cIj48L2Rpdj5cclxuXHJcbiAgPGRpdiB2LWlmPVwiIXNlbGVjdGVkRmlsZVwiIGNsYXNzPVwiZmlsZS1waWNrZXItYmFkZ2VcIlxyXG5cclxuICAgICAgIEBjbGljaz1cInRvZ2dsZVBpY2tlclwiPjwvZGl2PlxyXG5cclxuXHJcblxyXG48L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzdHlsZT5cclxuLmh1LWZpbGUtcGlja2VyIHtcclxuICB3aWR0aDogMjAwcHggIWltcG9ydGFudDtcclxuICByaWdodDogMHB4O1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBtYXJnaW4tdG9wOiAycHg7XHJcbiAgei1pbmRleDogOTk7XHJcbn1cclxuXHJcbi5maWxlLXBpY2tlci1iYWRnZSB7XHJcbiAgd2lkdGg6IDMwcHg7XHJcbiAgaGVpZ2h0OiAzMHB4O1xyXG4gIGJhY2tncm91bmQ6ICNkZGQ7XHJcbiAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBsaW5lLWhlaWdodDogMzBweDtcclxuICBib3JkZXItcmFkaXVzOiAxMDAlO1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjZTBlMGUwO1xyXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xyXG5cclxuXHJcbn1cclxuPC9zdHlsZT5cclxuXHJcbjxzY3JpcHQ+XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblxyXG4gIHByb3BzOiB7XHJcbiAgICBmaWxlOiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgZGVmYXVsdDogJydcclxuICAgIH0sXHJcbiAgICBuYW1lOiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgZGVmYXVsdDogJ2ZpbGUnXHJcbiAgICB9XHJcbiAgfSxcclxuICBkYXRhKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc2hvd1BpY2tlcjogZmFsc2UsXHJcbiAgICAgIGljb25EZWxldGU6IGZhbHNlLFxyXG5cclxuICAgICAgc2VsZWN0ZWRGaWxlOiB0aGlzLiRwcm9wcy5maWxlXHJcbiAgICB9XHJcbiAgfSxcclxuICBtb3VudGVkKCkge1xyXG5cclxuXHJcbiAgICBtdy50b3AoKS5hcHAub24oJ213LmVsZW1lbnRTdHlsZUVkaXRvci5jbG9zZUFsbE9wZW5lZE1lbnVzJywgKCkgPT4ge1xyXG4gICAgICB0aGlzLmNsb3NlUGlja2VyKClcclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIHdhdGNoOiB7XHJcbiAgICBmaWxlKG5ld2ZpbGUpIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZEZpbGUgPSBuZXdmaWxlO1xyXG4gICAgfSxcclxuICB9LFxyXG5cclxuICBtZXRob2RzOiB7XHJcbiAgICBjaGFuZ2VmaWxlKGZpbGUpIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZEZpbGUgPSBmaWxlLmhleDtcclxuICAgICAgdGhpcy4kcHJvcHMuZmlsZSA9IGZpbGUuaGV4O1xyXG4gICAgfSxcclxuICAgIHRyaWdnZXJDaGFuZ2VTZWxlY3RlZEZpbGUoKSB7XHJcblxyXG4gICAgICB0aGlzLiRwcm9wcy5maWxlID0gdGhpcy5zZWxlY3RlZEZpbGU7XHJcblxyXG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLiRwcm9wcy5maWxlKTtcclxuICAgIH0sXHJcbiAgICB0cmlnZ2VyQ2hhbmdlKCkge1xyXG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLiRwcm9wcy5maWxlKTtcclxuICAgIH0sXHJcblxyXG4gICAgcmVtb3ZlQmFja2dyb3VuZEltYWdlKCkge1xyXG4gICAgICB0aGlzLnNlbGVjdGVkRmlsZSA9ICcnO1xyXG4gICAgICB0aGlzLiRwcm9wcy5maWxlID0gJyc7XHJcbiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuJHByb3BzLmZpbGUpO1xyXG4gICAgfSxcclxuICAgIGNsb3NlUGlja2VyKCkge1xyXG4gICAgICB0aGlzLnNob3dQaWNrZXIgPSBmYWxzZTtcclxuICAgIH0sXHJcbiAgICAgIHRvZ2dsZVBpY2tlcigpIHtcclxuXHJcblxyXG5cclxuICAgICAgbXcuZmlsZVBpY2tlckRpYWxvZyggKHVybCkgPT4ge1xyXG4gICAgICAgICB0aGlzLnNlbGVjdGVkRmlsZSA9IHVybDtcclxuICAgICAgICB0aGlzLiRwcm9wcy5maWxlID0gdXJsO1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuJHByb3BzLmZpbGUpO1xyXG4gICAgICB9KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgdGhpcy5zaG93UGlja2VyID0gIXRoaXMuc2hvd1BpY2tlcjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuPC9zY3JpcHQ+XHJcbiIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJkLWZsZXhcIj5cbiAgICAgICAgPHN2ZyBmaWxsPVwiY3VycmVudENvbG9yXCIgaGVpZ2h0PVwiMjRcIiB3aWR0aD1cIjI0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHZlcnNpb249XCIxLjFcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMjQgMjQ7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTIuMiwzLjljNC41LDAsOC4xLDMuNiw4LjEsOC4xcy0zLjYsOC4xLTguMSw4LjFTNC4xLDE2LjUsNC4xLDEyUzcuNywzLjksMTIuMiwzLjlcIj48L3BhdGg+XG4gICAgICAgIDwvc3ZnPlxuICAgICAgICA8YiBjbGFzcz1cIm13LWFkbWluLWFjdGlvbi1saW5rcyBtcy0zXCIgOmNsYXNzPVwieydhY3RpdmUnOiBzaG93QmFja2dyb3VuZCB9XCIgdi1vbjpjbGljaz1cInRvZ2dsZUJhY2tncm91bmRcIj5cbiAgICAgICAgICAgIEJhY2tncm91bmRcbiAgICAgICAgPC9iPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiB2LWlmPVwic2hvd0JhY2tncm91bmRcIj5cblxuICAgICAgICA8Q29sb3JQaWNrZXIgdi1tb2RlbD1cImJhY2tncm91bmRDb2xvclwiIHYtYmluZDpjb2xvcj1iYWNrZ3JvdW5kQ29sb3IgOmxhYmVsPVwiJ0NvbG9yJ1wiXG4gICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPVwiaGFuZGxlQmFja2dyb3VuZENvbG9yQ2hhbmdlXCIvPlxuXG5cbiAgICAgICAgPEltYWdlUGlja2VyIGxhYmVsPVwiSW1hZ2VcIiB2LW1vZGVsPVwiYmFja2dyb3VuZEltYWdlXCIgdi1iaW5kOmZpbGU9XCJiYWNrZ3JvdW5kSW1hZ2VVcmxcIlxuICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT1cImhhbmRsZUJhY2tncm91bmRJbWFnZUNoYW5nZVwiLz5cblxuICAgICAgICA8RHJvcGRvd25TbWFsbCB2LW1vZGVsPVwiYmFja2dyb3VuZFNpemVcIiA6b3B0aW9ucz1cImJhY2tncm91bmRTaXplT3B0aW9uc1wiIDpsYWJlbD1cIidTaXplJ1wiLz5cblxuXG4gICAgICAgIDxEcm9wZG93blNtYWxsIHYtbW9kZWw9XCJiYWNrZ3JvdW5kUmVwZWF0XCIgOm9wdGlvbnM9XCJiYWNrZ3JvdW5kUmVwZWF0T3B0aW9uc1wiIDpsYWJlbD1cIidSZXBlYXQnXCIvPlxuXG5cbiAgICAgICAgPERyb3Bkb3duU21hbGwgdi1tb2RlbD1cImJhY2tncm91bmRQb3NpdGlvblwiIDpvcHRpb25zPVwiYmFja2dyb3VuZFBvc2l0aW9uT3B0aW9uc1wiXG4gICAgICAgICAgICAgICAgICAgICAgIDpsYWJlbD1cIidQb3NpdGlvbidcIi8+XG5cblxuICAgICAgICA8RHJvcGRvd25TbWFsbCB2LW1vZGVsPVwiYmFja2dyb3VuZENsaXBcIiA6b3B0aW9ucz1cImJhY2tncm91bmRDbGlwT3B0aW9uc1wiXG4gICAgICAgICAgICAgICAgICAgICAgIDpsYWJlbD1cIidDbGlwJ1wiLz5cblxuXG5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Gb3JtL0lucHV0LnZ1ZSc7XG5pbXBvcnQgSW1hZ2VQaWNrZXIgZnJvbSAnLi9jb21wb25lbnRzL0ltYWdlUGlja2VyLnZ1ZSc7XG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Gb3JtL0Ryb3Bkb3duLnZ1ZSc7XG5pbXBvcnQgRm9udFBpY2tlciBmcm9tIFwiLi9jb21wb25lbnRzL0ZvbnRQaWNrZXIudnVlXCI7XG5pbXBvcnQgQ29sb3JQaWNrZXIgZnJvbSBcIi4vY29tcG9uZW50cy9Db2xvclBpY2tlci52dWVcIjtcbmltcG9ydCBEcm9wZG93blNtYWxsIGZyb20gXCIuL2NvbXBvbmVudHMvRHJvcGRvd25TbWFsbC52dWVcIjtcbmltcG9ydCBTbGlkZXIgZnJvbSAnQHZ1ZWZvcm0vc2xpZGVyJztcbmltcG9ydCBGaWxlUGlja2VyIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0Zvcm0vRmlsZVBpY2tlci52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgY29tcG9uZW50czoge0NvbG9yUGlja2VyLCBGb250UGlja2VyLCBEcm9wZG93biwgSW5wdXQsIFNsaWRlciwgRmlsZVBpY2tlciwgSW1hZ2VQaWNrZXIsIERyb3Bkb3duU21hbGx9LFxuXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdzaG93QmFja2dyb3VuZCc6IGZhbHNlLFxuICAgICAgICAgICAgJ2JhY2tncm91bmRQb3NpdGlvbk9wdGlvbnMnOiBbXG4gICAgICAgICAgICAgICAge2tleTogXCJub25lXCIsIHZhbHVlOiBcIk5vbmVcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCIwJSAwJVwiLCB2YWx1ZTogXCJMZWZ0IFRvcFwifSxcbiAgICAgICAgICAgICAgICB7a2V5OiBcIjUwJSAwJVwiLCB2YWx1ZTogXCJDZW50ZXIgVG9wXCJ9LFxuICAgICAgICAgICAgICAgIHtrZXk6IFwiMTAwJSAwJVwiLCB2YWx1ZTogXCJSaWdodCBUb3BcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCIwJSA1MCVcIiwgdmFsdWU6IFwiTGVmdCBDZW50ZXJcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCI1MCUgNTAlXCIsIHZhbHVlOiBcIkNlbnRlciBDZW50ZXJcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCIxMDAlIDUwJVwiLCB2YWx1ZTogXCJSaWdodCBDZW50ZXJcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCIwJSAxMDAlXCIsIHZhbHVlOiBcIkxlZnQgQm90dG9tXCJ9LFxuICAgICAgICAgICAgICAgIHtrZXk6IFwiNTAlIDEwMCVcIiwgdmFsdWU6IFwiQ2VudGVyIEJvdHRvbVwifSxcbiAgICAgICAgICAgICAgICB7a2V5OiBcIjEwMCUgMTAwJVwiLCB2YWx1ZTogXCJSaWdodCBCb3R0b21cIn1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAnYmFja2dyb3VuZFJlcGVhdE9wdGlvbnMnOiBbXG4gICAgICAgICAgICAgICAge2tleTogXCJub25lXCIsIHZhbHVlOiBcIk5vbmVcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCJyZXBlYXRcIiwgdmFsdWU6IFwicmVwZWF0XCJ9LFxuICAgICAgICAgICAgICAgIHtrZXk6IFwibm8tcmVwZWF0XCIsIHZhbHVlOiBcIm5vLXJlcGVhdFwifSxcbiAgICAgICAgICAgICAgICB7a2V5OiBcInJlcGVhdC14XCIsIHZhbHVlOiBcInJlcGVhdCBob3Jpem9udGFsbHlcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCJyZXBlYXQteVwiLCB2YWx1ZTogXCJyZXBlYXQgdmVydGljYWxseVwifVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kQ2xpcE9wdGlvbnMnOiBbXG4gICAgICAgICAgICAgICAge2tleTogXCJib3JkZXItYm94XCIsIHZhbHVlOiBcIkJvcmRlciBCb3hcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCJjb250ZW50LWJveFwiLCB2YWx1ZTogXCJDb250ZW50IEJveFwifSxcbiAgICAgICAgICAgICAgICB7a2V5OiBcInRleHRcIiwgdmFsdWU6IFwiVGV4dFwifVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kU2l6ZU9wdGlvbnMnOiBbXG4gICAgICAgICAgICAgICAge2tleTogXCJub25lXCIsIHZhbHVlOiBcIk5vbmVcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCJhdXRvXCIsIHZhbHVlOiBcIkF1dG9cIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCJjb250YWluXCIsIHZhbHVlOiBcIkZpdFwifSxcbiAgICAgICAgICAgICAgICB7a2V5OiBcImNvdmVyXCIsIHZhbHVlOiBcIkNvdmVyXCJ9LFxuICAgICAgICAgICAgICAgIHtrZXk6IFwiMTAwJSAxMDAlXCIsIHZhbHVlOiBcIlNjYWxlXCJ9XG4gICAgICAgICAgICBdLFxuXG4gICAgICAgICAgICAnYWN0aXZlTm9kZSc6IG51bGwsXG4gICAgICAgICAgICAnaXNSZWFkeSc6IGZhbHNlLFxuICAgICAgICAgICAgJ2JhY2tncm91bmRJbWFnZSc6IG51bGwsXG4gICAgICAgICAgICAnYmFja2dyb3VuZENvbG9yJzogbnVsbCxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kUG9zaXRpb24nOiBudWxsLFxuICAgICAgICAgICAgJ2JhY2tncm91bmRSZXBlYXQnOiBudWxsLFxuICAgICAgICAgICAgJ2JhY2tncm91bmRTaXplJzogbnVsbCxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kSW1hZ2VVcmwnOiBudWxsLFxuICAgICAgICAgICAgJ2JhY2tncm91bmRDbGlwJzogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICB0b2dnbGVCYWNrZ3JvdW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dCYWNrZ3JvdW5kID0gIXRoaXMuc2hvd0JhY2tncm91bmQ7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZWxlbWVudC1zdHlsZS1lZGl0b3Itc2hvdycsICdiYWNrZ3JvdW5kJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVzZXRBbGxQcm9wZXJ0aWVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZVVybCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRSZXBlYXQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kU2l6ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRDbGlwID0gbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUgJiYgbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNzcyA9IG13LkNTU1BhcnNlcihub2RlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0QWxsUHJvcGVydGllcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlTm9kZSA9IG5vZGU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBvcHVsYXRlQ3NzQmFja2dyb3VuZChjc3MpO1xuXG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwb3B1bGF0ZUNzc0JhY2tncm91bmQ6IGZ1bmN0aW9uIChjc3MpIHtcbiAgICAgICAgICAgIGlmICghY3NzIHx8ICFjc3MuZ2V0KSByZXR1cm47XG4gICAgICAgICAgICB2YXIgYmcgPSBjc3MuZ2V0LmJhY2tncm91bmQoKTtcblxuICAgICAgICAgICAgaWYgKGJnLmltYWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJnLmltYWdlLmluZGV4T2YoJ3VybCgnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VVcmwgPSBiZy5pbWFnZS5yZXBsYWNlKCd1cmwoJywgJycpLnJlcGxhY2UoJyknLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vYWxzbyByZXBsYWNlIFwiXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlVXJsID0gdGhpcy5iYWNrZ3JvdW5kSW1hZ2VVcmwucmVwbGFjZSgvXFxcIi9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZSA9IGJnLmltYWdlO1xuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBiZy5jb2xvcjtcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZFBvc2l0aW9uID0gYmcucG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRSZXBlYXQgPSBiZy5yZXBlYXQ7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRTaXplID0gYmcuc2l6ZTtcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZENsaXAgPSBiZy5jbGlwO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhhbmRsZUJhY2tncm91bmRDb2xvckNoYW5nZTogZnVuY3Rpb24gKGNvbG9yKSB7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGNvbG9yKSAhPSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gY29sb3JcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlQmFja2dyb3VuZEltYWdlQ2hhbmdlOiBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICB2YXIgdXJsVmFsID0gdXJsO1xuICAgICAgICAgICAgaWYgKHVybCAmJiB1cmwgIT0gJycgJiYgdXJsICE9ICdub25lJyAmJiB1cmwgIT0gJ2luaGVyaXQnICYmIHVybCAhPSAnaW5pdGlhbCcpIHtcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGNvbnRhaW4gdXJsKFxuICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlVXJsID0gdXJsO1xuICAgICAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZigndXJsKCcpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB1cmxWYWwgPSAndXJsKCcgKyB1cmwgKyAnKSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZVVybCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVybFZhbCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdXJsVmFsID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2UgPSB1cmxWYWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZTogZnVuY3Rpb24gKHByb3AsIHZhbCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZU5vZGUpIHtcbiAgICAgICAgICAgICAgICBtdy50b3AoKS5hcHAuZGlzcGF0Y2goJ213LmVsZW1lbnRTdHlsZUVkaXRvci5hcHBseUNzc1Byb3BlcnR5VG9Ob2RlJywge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiB0aGlzLmFjdGl2ZU5vZGUsXG4gICAgICAgICAgICAgICAgICAgIHByb3A6IHByb3AsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogdmFsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICB9LFxuICAgIG1vdW50ZWQoKSB7XG5cbiAgICAgICAgdGhpcy5lbWl0dGVyLm9uKFwiZWxlbWVudC1zdHlsZS1lZGl0b3Itc2hvd1wiLCBlbGVtZW50U3R5bGVFZGl0b3JTaG93ID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50U3R5bGVFZGl0b3JTaG93ICE9PSAnYmFja2dyb3VuZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dCYWNrZ3JvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG13LnRvcCgpLmFwcC5vbignbXcuZWxlbWVudFN0eWxlRWRpdG9yLnNlbGVjdE5vZGUnLCAoZWxlbWVudCkgPT4ge1xuXG4gICAgICAgICAgICB0aGlzLnBvcHVsYXRlU3R5bGVFZGl0b3IoZWxlbWVudClcblxuICAgICAgICB9KTtcblxuICAgIH0sXG5cbiAgICB3YXRjaDoge1xuICAgICAgICAvLyBCYWNrZ3JvdW5kLXJlbGF0ZWQgcHJvcGVydHkgd2F0Y2hlcnNcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JhY2tncm91bmRJbWFnZScsIG5ld1ZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgYmFja2dyb3VuZENsaXA6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JhY2tncm91bmRDbGlwJywgJ3RleHQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJy13ZWJraXRCYWNrZ3JvdW5kQ2xpcCcsICd0ZXh0Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdjb2xvcicsICdyZ2JhKDAsMCwwLDApJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnYmFja2dyb3VuZENsaXAnLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCctd2Via2l0QmFja2dyb3VuZENsaXAnLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdjb2xvcicsICcnKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnYmFja2dyb3VuZENvbG9yJywgbmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnYmFja2dyb3VuZFBvc2l0aW9uJywgbmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JhY2tncm91bmRSZXBlYXQnLCBuZXdWYWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGJhY2tncm91bmRTaXplOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JhY2tncm91bmRTaXplJywgbmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgIH0sXG59XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuICAgIDxkaXYgY2xhc3M9XCJyb3VuZGVkLWNvcm5lcnMgbXktNVwiPlxuXG4gICAgICA8ZGl2IGNsYXNzPVwicy1maWVsZC1jb250ZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtdy1maWVsZCBtdy1maWVsZC1mbGF0XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm13LW11bHRpcGxlLWZpZWxkc1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm13LWZpZWxkIG13LWZpZWxkLWZsYXRcIj5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwicmVndWxhciBvcmRlci0xIHRleHQtY2VudGVyXCJcbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJib3JkZXJUb3BMZWZ0UmFkaXVzXCJcbiAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgICAgICAgICB2LW1vZGVsPVwic2VsZWN0ZWRCb3JkZXJSYWRpdXMuYm9yZGVyVG9wTGVmdFJhZGl1c1wiXG4gICAgICAgICAgICAgICAgICBAaW5wdXQ9XCJ1cGRhdGVWYWx1ZXMoKVwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibXctZmllbGQgbXctZmllbGQtZmxhdC1wcmVwZW5kIG9yZGVyLTJcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImFuZ2xlIGFuZ2xlLXRvcC1sZWZ0XCI+PC9pPlxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtdy1maWVsZCBtdy1maWVsZC1mbGF0XCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibXctZmllbGQgbXctZmllbGQtZmxhdC1wcmVwZW5kXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhbmdsZSBhbmdsZS10b3AtcmlnaHRcIj48L2k+XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICBjbGFzcz1cInJlZ3VsYXIgdGV4dC1jZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgICBuYW1lPVwiYm9yZGVyVG9wUmlnaHRSYWRpdXNcIlxuICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJzZWxlY3RlZEJvcmRlclJhZGl1cy5ib3JkZXJUb3BSaWdodFJhZGl1c1wiXG4gICAgICAgICAgICAgICAgICBAaW5wdXQ9XCJ1cGRhdGVWYWx1ZXMoKVwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtdy1maWVsZCBtdy1maWVsZC1mbGF0XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm13LW11bHRpcGxlLWZpZWxkc1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm13LWZpZWxkIG13LWZpZWxkLWZsYXRcIj5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICBjbGFzcz1cInJlZ3VsYXIgb3JkZXItMSB0ZXh0LWNlbnRlclwiXG4gICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzXCJcbiAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgICAgICAgICB2LW1vZGVsPVwic2VsZWN0ZWRCb3JkZXJSYWRpdXMuYm9yZGVyQm90dG9tTGVmdFJhZGl1c1wiXG4gICAgICAgICAgICAgICAgICBAaW5wdXQ9XCJ1cGRhdGVWYWx1ZXMoKVwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibXctZmllbGQgbXctZmllbGQtZmxhdC1wcmVwZW5kIG9yZGVyLTJcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImFuZ2xlIGFuZ2xlLWJvdHRvbS1sZWZ0XCI+PC9pPlxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtdy1maWVsZCBtdy1maWVsZC1mbGF0XCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibXctZmllbGQgbXctZmllbGQtZmxhdC1wcmVwZW5kXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhbmdsZSBhbmdsZS1ib3R0b20tcmlnaHRcIj48L2k+XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICBjbGFzcz1cInJlZ3VsYXIgdGV4dC1jZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgICBuYW1lPVwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXNcIlxuICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJzZWxlY3RlZEJvcmRlclJhZGl1cy5ib3JkZXJCb3R0b21SaWdodFJhZGl1c1wiXG4gICAgICAgICAgICAgICAgICBAaW5wdXQ9XCJ1cGRhdGVWYWx1ZXMoKVwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IE9iamVjdCwgLy8gUmVjZWl2ZSBhbiBvYmplY3Qgd2l0aCByYWRpdXMgdmFsdWVzIGFzIGEgcHJvcFxuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RlZEJvcmRlclJhZGl1czoge1xuICAgICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiAnJyxcbiAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICcnLFxuICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAnJyxcbiAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6ICcnLFxuICAgICAgfSxcbiAgICB9O1xuICB9LFxuICB3YXRjaDoge1xuICAgIG1vZGVsVmFsdWUobmV3VmFsdWUpIHtcbiAgICAgIGlmIChuZXdWYWx1ZSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkQm9yZGVyUmFkaXVzID0geyAuLi5uZXdWYWx1ZSB9O1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICB1cGRhdGVWYWx1ZXMoKSB7XG4gICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHRoaXMuc2VsZWN0ZWRCb3JkZXJSYWRpdXMpO1xuICAgIH0sXG4gIH0sXG59O1xuPC9zY3JpcHQ+XG4iLCI8c3R5bGU+XG4ubXctZmllbGQge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm13LWZpZWxkLnVuaXQgaW5wdXQgKyBpbnB1dCB7XG4gIHdpZHRoOiA0MHB4O1xuICBwYWRkaW5nLWlubGluZS1zdGFydDogMDtcbiAgcGFkZGluZy1pbmxpbmUtZW5kOiAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5yb3VkZWQtY29ybmVycyB7XG4gIHBhZGRpbmctYm90dG9tOiAyMHB4O1xufVxuXG4ucm91ZGVkLWNvcm5lcnMgLm13LWZpZWxkIC5tdy1maWVsZCB7XG4gIHdpZHRoOiA3MHB4O1xuICBtYXJnaW46IDEwcHggMCA1cHg7XG59XG5cbi5yb3VkZWQtY29ybmVycyAubXctZmllbGQgLm13LWZpZWxkICsgLm13LWZpZWxkIHtcbiAgbWFyZ2luLWlubGluZS1zdGFydDogMTBweDtcbn1cblxuLmFuZ2xlIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogMTVweDtcbiAgaGVpZ2h0OiAxNXB4O1xuICBib3JkZXI6IDFweCBkb3R0ZWQgI2NjYztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbn1cblxuLmFuZ2xlLXRvcC1sZWZ0IHtcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogN3B4O1xuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICMwMDA7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjMDAwO1xufVxuXG4uYW5nbGUtdG9wLXJpZ2h0IHtcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDdweDtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgIzAwMDtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICMwMDA7XG59XG5cbi5hbmdsZS1ib3R0b20tbGVmdCB7XG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDdweDtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjMDAwO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzAwMDtcbn1cblxuLmFuZ2xlLWJvdHRvbS1yaWdodCB7XG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA3cHg7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICMwMDA7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMDAwO1xufVxuXG4ucy1maWVsZC1jb250ZW50IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cbjwvc3R5bGU+XG5cbjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJkLWZsZXhcIj5cbiAgICAgICAgPHN2ZyBmaWxsPVwiY3VycmVudENvbG9yXCIgaGVpZ2h0PVwiMjRcIiB3aWR0aD1cIjI0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHZlcnNpb249XCIxLjFcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMjQgMjQ7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTUsMjFoMnYtMmgtMiBNMTksMjFoMnYtMmgtMiBNNywyMWgydi0ySDcgTTExLDIxaDJ2LTJoLTIgTTE5LDE3aDJ2LTJoLTIgTTE5LDEzaDJ2LTJoLTIgTTMsM3YxOGgyVjVoMTZWMyBNMTksOWgyVjdoLTJcIj48L3BhdGg+XG4gICAgICAgIDwvc3ZnPlxuXG4gICAgICAgIDxiIGNsYXNzPVwibXctYWRtaW4tYWN0aW9uLWxpbmtzIG1zLTNcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IHNob3dCb3JkZXIgfVwiIHYtb246Y2xpY2s9XCJ0b2dnbGVCb3JkZXJcIj5cbiAgICAgICAgICAgIEJvcmRlclxuICAgICAgICA8L2I+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IHYtaWY9XCJzaG93Qm9yZGVyXCI+XG4gICAgPERyb3Bkb3duU21hbGwgdi1tb2RlbD1cImJvcmRlclN0eWxlXCIgOm9wdGlvbnM9XCJib3JkZXJTdHlsZXNPcHRpb25zXCIgbGFiZWw9XCJTdHlsZVwiLz5cblxuICAgIDwhLS0gICAgICA8Qm9yZGVyUmFkaXVzIHYtbW9kZWw9XCJib3JkZXJSYWRpdXNcIj48L0JvcmRlclJhZGl1cz4tLT5cblxuICAgIDxEcm9wZG93blNtYWxsIHYtbW9kZWw9XCJib3JkZXJQb3NpdGlvblwiIDpvcHRpb25zPVwiYm9yZGVyUG9zaXRpb25PcHRpb25zXCIgbGFiZWw9XCJQb3NpdGlvblwiLz5cblxuICAgIDxTbGlkZXJTbWFsbCBsYWJlbD1cIlNpemVcIiB2LW1vZGVsPVwiYm9yZGVyU2l6ZVwiIDptaW49XCIwXCIgOm1heD1cIjMwXCIgOnN0ZXA9XCIxXCI+PC9TbGlkZXJTbWFsbD5cblxuICAgIDxDb2xvclBpY2tlciB2LW1vZGVsPVwiYm9yZGVyQ29sb3JcIiB2LWJpbmQ6Y29sb3I9Ym9yZGVyQ29sb3IgOmxhYmVsPVwiJ0NvbG9yJ1wiXG4gICAgICAgICAgICAgICAgIEBjaGFuZ2U9XCJoYW5kbGVCb3JkZXJDb2xvckNoYW5nZVwiLz5cblxuXG48L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBJbnB1dCBmcm9tICcuLi8uLi9jb21wb25lbnRzL0Zvcm0vSW5wdXQudnVlJztcbmltcG9ydCBEcm9wZG93biBmcm9tICcuLi8uLi9jb21wb25lbnRzL0Zvcm0vRHJvcGRvd24udnVlJztcbmltcG9ydCBGb250UGlja2VyIGZyb20gXCIuL2NvbXBvbmVudHMvRm9udFBpY2tlci52dWVcIjtcbmltcG9ydCBDb2xvclBpY2tlciBmcm9tIFwiLi9jb21wb25lbnRzL0NvbG9yUGlja2VyLnZ1ZVwiO1xuaW1wb3J0IERyb3Bkb3duU21hbGwgZnJvbSBcIi4vY29tcG9uZW50cy9Ecm9wZG93blNtYWxsLnZ1ZVwiO1xuaW1wb3J0IFNsaWRlclNtYWxsIGZyb20gXCIuL2NvbXBvbmVudHMvU2xpZGVyU21hbGwudnVlXCI7XG5pbXBvcnQgQm9yZGVyUmFkaXVzIGZyb20gXCIuL2NvbXBvbmVudHMvQm9yZGVyUmFkaXVzLnZ1ZVwiO1xuXG5pbXBvcnQgU2xpZGVyIGZyb20gJ0B2dWVmb3JtL3NsaWRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICBjb21wb25lbnRzOiB7RHJvcGRvd24sIElucHV0LCBGb250UGlja2VyLCBDb2xvclBpY2tlciwgU2xpZGVyLCBEcm9wZG93blNtYWxsLCBTbGlkZXJTbWFsbCwgQm9yZGVyUmFkaXVzfSxcblxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgICdzaG93Qm9yZGVyJzogZmFsc2UsXG4gICAgICAnYWN0aXZlTm9kZSc6IG51bGwsXG4gICAgICAnaXNSZWFkeSc6IGZhbHNlLFxuXG4gICAgICAnYm9yZGVyUG9zaXRpb25PcHRpb25zJzogW1xuICAgICAgICB7XCJrZXlcIjogXCJhbGxcIiwgXCJ2YWx1ZVwiOiBcIkFsbFwifSxcbiAgICAgICAge1wia2V5XCI6IFwidG9wXCIsIFwidmFsdWVcIjogXCJUb3BcIn0sXG4gICAgICAgIHtcImtleVwiOiBcInJpZ2h0XCIsIFwidmFsdWVcIjogXCJSaWdodFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiYm90dG9tXCIsIFwidmFsdWVcIjogXCJCb3R0b21cIn0sXG4gICAgICAgIHtcImtleVwiOiBcImxlZnRcIiwgXCJ2YWx1ZVwiOiBcIkxlZnRcIn0sXG4gICAgICBdLFxuXG4gICAgICAnYm9yZGVyU3R5bGVzT3B0aW9ucyc6IFtcbiAgICAgICAge1wia2V5XCI6IFwibm9uZVwiLCBcInZhbHVlXCI6IFwiTm9uZVwifSxcbiAgICAgICAge1wia2V5XCI6IFwic29saWRcIiwgXCJ2YWx1ZVwiOiBcIlNvbGlkXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJkb3R0ZWRcIiwgXCJ2YWx1ZVwiOiBcIkRvdHRlZFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiZGFzaGVkXCIsIFwidmFsdWVcIjogXCJEYXNoZWRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImRvdWJsZVwiLCBcInZhbHVlXCI6IFwiRG91YmxlXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJncm9vdmVcIiwgXCJ2YWx1ZVwiOiBcIkdyb292ZVwifSxcbiAgICAgICAge1wia2V5XCI6IFwicmlkZ2VcIiwgXCJ2YWx1ZVwiOiBcIlJpZGdlXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJpbnNldFwiLCBcInZhbHVlXCI6IFwiSW5zZXRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcIm91dHNldFwiLCBcInZhbHVlXCI6IFwiT3V0c2V0XCJ9XG4gICAgICBdLFxuXG4gICAgICAnYm9yZGVyUG9zaXRpb24nOiBudWxsLFxuICAgICAgJ2JvcmRlclNpemUnOiBudWxsLFxuICAgICAgJ2JvcmRlckNvbG9yJzogbnVsbCxcbiAgICAgICdib3JkZXJJbWFnZSc6IG51bGwsXG4gICAgICAnYm9yZGVySW1hZ2VVcmwnOiBudWxsLFxuICAgICAgJ2JvcmRlclN0eWxlJzogbnVsbCxcbiAgICAgICdib3JkZXJSYWRpdXMnOiB7XG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6ICcnLFxuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJycsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6ICcnLFxuICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogJycsXG4gICAgICB9LFxuICAgICAgJ2JvcmRlclRvcExlZnRSYWRpdXMnOiBudWxsLFxuICAgICAgJ2JvcmRlclRvcFJpZ2h0UmFkaXVzJzogbnVsbCxcbiAgICAgICdib3JkZXJCb3R0b21SaWdodFJhZGl1cyc6IG51bGwsXG4gICAgICAnYm9yZGVyQm90dG9tTGVmdFJhZGl1cyc6IG51bGwsXG4gICAgfTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgdG9nZ2xlQm9yZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnNob3dCb3JkZXIgPSAhdGhpcy5zaG93Qm9yZGVyO1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZWxlbWVudC1zdHlsZS1lZGl0b3Itc2hvdycsICdib3JkZXInKTtcbiAgICB9LFxuICAgIGhhbmRsZUJvcmRlckNvbG9yQ2hhbmdlKGNvbG9yKSB7XG4gICAgICBpZiAodHlwZW9mIChjb2xvcikgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5ib3JkZXJDb2xvciA9IGNvbG9yO1xuICAgIH0sXG4gICAgcmVzZXRBbGxQcm9wZXJ0aWVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmJvcmRlclBvc2l0aW9uID0gbnVsbDtcbiAgICAgIHRoaXMuYm9yZGVyU2l6ZSA9IG51bGw7XG4gICAgICB0aGlzLmJvcmRlckNvbG9yID0gbnVsbDtcbiAgICAgIHRoaXMuYm9yZGVyU3R5bGUgPSBudWxsO1xuICAgICAgdGhpcy5ib3JkZXJSYWRpdXMgPSB7XG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6ICcnLFxuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJycsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6ICcnLFxuICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogJycsXG4gICAgICB9XG4gICAgICB0aGlzLmJvcmRlclRvcExlZnRSYWRpdXMgPSBudWxsO1xuICAgICAgdGhpcy5ib3JkZXJUb3BSaWdodFJhZGl1cyA9IG51bGw7XG4gICAgICB0aGlzLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzID0gbnVsbDtcbiAgICAgIHRoaXMuYm9yZGVyQm90dG9tTGVmdFJhZGl1cyA9IG51bGw7XG4gICAgICB0aGlzLmJvcmRlckltYWdlVXJsID0gbnVsbDtcbiAgICAgIHRoaXMuYm9yZGVySW1hZ2UgPSBudWxsO1xuICAgIH0sXG5cbiAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKG5vZGUgJiYgbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIHZhciBjc3MgPSBtdy5DU1NQYXJzZXIobm9kZSk7XG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc2V0QWxsUHJvcGVydGllcygpO1xuICAgICAgICB0aGlzLmFjdGl2ZU5vZGUgPSBub2RlO1xuXG4gICAgICAgIHRoaXMucG9wdWxhdGVDc3NCb3JkZXIoY3NzKTtcbiAgICAgICAgdGhpcy5wb3B1bGF0ZUNzc0JvcmRlclJhZGl1cyhjc3MpO1xuXG5cbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICB9LCAxMDApO1xuICAgICAgfVxuICAgIH0sXG4gICAgcG9wdWxhdGVDc3NCb3JkZXI6IGZ1bmN0aW9uIChjc3MpIHtcbiAgICAgIGlmICghY3NzIHx8ICFjc3MuZ2V0KSByZXR1cm47XG4gICAgICB2YXIgYm9yZGVyID0gY3NzLmdldC5ib3JkZXIodHJ1ZSk7XG5cbiAgICAgIHZhciBmcnN0ID0ge307XG4gICAgICBmb3IgKHZhciBpIGluIGJvcmRlcikge1xuICAgICAgICBpZiAoYm9yZGVyW2ldLndpZHRoICE9PSAwKSB7XG4gICAgICAgICAgZnJzdCA9IGJvcmRlcltpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHNpemUgPSBmcnN0LndpZHRoIHx8IDA7XG4gICAgICB2YXIgY29sb3IgPSBmcnN0LmNvbG9yIHx8ICdyZ2JhKDAsMCwwLDEpJztcbiAgICAgIHZhciBzdHlsZSA9IGZyc3Quc3R5bGUgfHwgJ25vbmUnO1xuXG5cbiAgICAgIHRoaXMuYm9yZGVyU2l6ZSA9IHNpemU7XG4gICAgICB0aGlzLmJvcmRlckNvbG9yID0gY29sb3I7XG4gICAgICB0aGlzLmJvcmRlclN0eWxlID0gc3R5bGU7XG4gICAgICB0aGlzLmJvcmRlclBvc2l0aW9uID0gJ2FsbCc7XG4gICAgfSxcbiAgICBwb3B1bGF0ZUNzc0JvcmRlclJhZGl1czogZnVuY3Rpb24gKGNzcykge1xuICAgICAgaWYgKCFjc3MgfHwgIWNzcy5nZXQpIHJldHVybjtcbiAgICAgIHZhciBib3JkZXJSYWRpdXMgPSBjc3MuZ2V0LnJhZGl1cyh0cnVlKTtcblxuICAgICAgdGhpcy5ib3JkZXJUb3BMZWZ0UmFkaXVzID0gYm9yZGVyUmFkaXVzLnRsO1xuICAgICAgdGhpcy5ib3JkZXJUb3BSaWdodFJhZGl1cyA9IGJvcmRlclJhZGl1cy50cjtcbiAgICAgIHRoaXMuYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMgPSBib3JkZXJSYWRpdXMuYnI7XG4gICAgICB0aGlzLmJvcmRlckJvdHRvbUxlZnRSYWRpdXMgPSBib3JkZXJSYWRpdXMuYmw7XG5cbiAgICAgIHRoaXMuYm9yZGVyUmFkaXVzID0ge1xuICAgICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMudGwsXG4gICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBib3JkZXJSYWRpdXMudHIsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IGJvcmRlclJhZGl1cy5ibCxcbiAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IGJvcmRlclJhZGl1cy5icixcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZTogZnVuY3Rpb24gKHByb3AsIHZhbCkge1xuICAgICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5hY3RpdmVOb2RlKSB7XG4gICAgICAgIG13LnRvcCgpLmFwcC5kaXNwYXRjaCgnbXcuZWxlbWVudFN0eWxlRWRpdG9yLmFwcGx5Q3NzUHJvcGVydHlUb05vZGUnLCB7XG4gICAgICAgICAgbm9kZTogdGhpcy5hY3RpdmVOb2RlLFxuICAgICAgICAgIHByb3A6IHByb3AsXG4gICAgICAgICAgdmFsOiB2YWxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICB9LFxuICBtb3VudGVkKCkge1xuXG4gICAgICB0aGlzLmVtaXR0ZXIub24oXCJlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93XCIsIGVsZW1lbnRTdHlsZUVkaXRvclNob3cgPT4ge1xuICAgICAgICAgIGlmIChlbGVtZW50U3R5bGVFZGl0b3JTaG93ICE9PSAnYm9yZGVyJykge1xuICAgICAgICAgICAgICB0aGlzLnNob3dCb3JkZXIgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIG13LnRvcCgpLmFwcC5vbignbXcuZWxlbWVudFN0eWxlRWRpdG9yLnNlbGVjdE5vZGUnLCAoZWxlbWVudCkgPT4ge1xuXG4gICAgICB0aGlzLnBvcHVsYXRlU3R5bGVFZGl0b3IoZWxlbWVudClcblxuICAgIH0pO1xuXG4gIH0sXG5cbiAgd2F0Y2g6IHtcbiAgICBib3JkZXJSYWRpdXM6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcblxuICAgICAgLy9Qcm94eShPYmplY3QpwqB7Ym9yZGVyVG9wTGVmdFJhZGl1czogJycsIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnJywgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogJycsIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAnJ31cblxuICAgICAgdmFyIGJvcmRlclJhZGl1c1ZhbHVlID0gJyc7XG4gICAgICBpZiAobmV3VmFsdWUuYm9yZGVyVG9wTGVmdFJhZGl1cykge1xuICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSBuZXdWYWx1ZS5ib3JkZXJUb3BMZWZ0UmFkaXVzICsgJ3B4ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSAnMHB4ICc7XG4gICAgICB9XG4gICAgICBpZiAobmV3VmFsdWUuYm9yZGVyVG9wUmlnaHRSYWRpdXMpIHtcbiAgICAgICAgYm9yZGVyUmFkaXVzVmFsdWUgKz0gbmV3VmFsdWUuYm9yZGVyVG9wUmlnaHRSYWRpdXMgKyAncHggJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJvcmRlclJhZGl1c1ZhbHVlICs9ICcwcHggJztcbiAgICAgIH1cbiAgICAgIGlmIChuZXdWYWx1ZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1cykge1xuICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSBuZXdWYWx1ZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1cyArICdweCAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYm9yZGVyUmFkaXVzVmFsdWUgKz0gJzBweCAnO1xuICAgICAgfVxuICAgICAgaWYgKG5ld1ZhbHVlLmJvcmRlckJvdHRvbUxlZnRSYWRpdXMpIHtcbiAgICAgICAgYm9yZGVyUmFkaXVzVmFsdWUgKz0gbmV3VmFsdWUuYm9yZGVyQm90dG9tTGVmdFJhZGl1cyArICdweCAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYm9yZGVyUmFkaXVzVmFsdWUgKz0gJzBweCAnO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JvcmRlci1yYWRpdXMnLCBib3JkZXJSYWRpdXNWYWx1ZSk7XG5cblxuICAgIH0sXG4gICAgLy8gQm9yZGVyLXJlbGF0ZWQgcHJvcGVydHkgd2F0Y2hlcnNcbiAgICBib3JkZXJJbWFnZVVybDogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdmFyIGJvcmRlckltYWdlVmFsdWUgPSAnJztcbiAgICAgIGJvcmRlckltYWdlVmFsdWUgKz0gJ3VybCgnICsgbmV3VmFsdWUgKyAnKSAnO1xuICAgICAgYm9yZGVySW1hZ2VWYWx1ZSArPSB0aGlzLmJvcmRlclNpemUgKyAnICc7XG4gICAgICAvLyAgICBib3JkZXJJbWFnZVZhbHVlICs9ICB0aGlzLmJvcmRlclN0eWxlICsgJyAnO1xuICAgICAgYm9yZGVySW1hZ2VWYWx1ZSArPSAnIHNwYWNlICc7XG4gICAgICB0aGlzLmJvcmRlckltYWdlID0gYm9yZGVySW1hZ2VWYWx1ZTtcbiAgICB9LFxuICAgIGJvcmRlckltYWdlOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JvcmRlci1pbWFnZScsIG5ld1ZhbHVlKTtcbiAgICB9LFxuXG4gICAgYm9yZGVyUG9zaXRpb246IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnYm9yZGVyUG9zaXRpb24nLCBuZXdWYWx1ZSk7XG4gICAgfSxcbiAgICBib3JkZXJTaXplOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JvcmRlci13aWR0aCcsIG5ld1ZhbHVlICsgJ3B4Jyk7XG4gICAgfSxcbiAgICBib3JkZXJDb2xvcjogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdib3JkZXItY29sb3InLCBuZXdWYWx1ZSk7XG4gICAgfSxcbiAgICBib3JkZXJTdHlsZTogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdib3JkZXItc3R5bGUnLCBuZXdWYWx1ZSk7XG4gICAgfSxcblxuXG4gICAgLy8gYm9yZGVyVG9wTGVmdFJhZGl1czogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgIC8vICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdib3JkZXJUb3BMZWZ0UmFkaXVzJywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICAvLyB9LFxuICAgIC8vIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgLy8gICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JvcmRlclRvcFJpZ2h0UmFkaXVzJywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICAvLyB9LFxuICAgIC8vIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgLy8gICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JvcmRlckJvdHRvbVJpZ2h0UmFkaXVzJywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICAvLyB9LFxuICAgIC8vIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAvLyAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnYm9yZGVyQm90dG9tTGVmdFJhZGl1cycsIG5ld1ZhbHVlICsgJ3B4Jyk7XG4gICAgLy8gfSxcbiAgfSxcbn1cbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuXG4gIDxkaXYgdi1zaG93PVwiZGlzcGxheU5vZGVJbmZvXCI+XG5cbiAgICA8ZGl2IGNsYXNzPVwid2VsbFwiPlxuXG4gICAgPGRpdiB2LXNob3c9XCJkaXNwbGF5RG9tVHJlZVwiPlxuICAgICAgPGRpdiBpZD1cImRvbXRyZWVcIj5cblxuXG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuXG5cbiAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGdhcC0yXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJsaXZlLWVkaXQtbGFiZWwgbWItMFwiPlNlbGVjdGVkIGVsZW1lbnQ6PC9sYWJlbD5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiICA6Y2xhc3M9XCJ7J2J0bi1kYXJrJzogZGlzcGxheURvbVRyZWUsICdidG4tb3V0bGluZS1kYXJrJzogIWRpc3BsYXlEb21UcmVlIH1cIiBjbGFzcz1cImJ0biBidG4tc20gXCIgQGNsaWNrPVwidG9nZ2xlRG9tVHJlZVwiPnt7IGRpc3BsYXlOb2RlSW5mbyB9fTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuXG5pbXBvcnQgJy4vZG9tLXRyZWUuY3NzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnbm9kZVRhZ05hbWUnOiBudWxsLFxuICAgICAgJ2Rpc3BsYXlOb2RlSW5mbyc6IG51bGwsXG4gICAgICAnZGlzcGxheURvbVRyZWUnOiBudWxsLFxuICAgICAgJ2FjdGl2ZU5vZGUnOiBudWxsLFxuICAgICAgJ2RvbVRyZWUnOiBudWxsLFxuICAgICAgJ2lzUmVhZHknOiBmYWxzZSxcbiAgICB9O1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcblxuICAgIHRvZ2dsZURvbVRyZWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuZGlzcGxheURvbVRyZWUgPSAhdGhpcy5kaXNwbGF5RG9tVHJlZTtcbiAgICAgIGlmICh0aGlzLmRpc3BsYXlEb21UcmVlKSB7XG4gICAgICAgIHRoaXMucG9wdWxhdGVEb21UcmVlKHRoaXMuYWN0aXZlTm9kZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKG5vZGUgJiYgbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG5cbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGlzcGxheU5vZGVJbmZvID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZG9tVHJlZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFjdGl2ZU5vZGUgPSBub2RlO1xuICAgICAgICB0aGlzLnBvcHVsYXRlU2VsZWN0ZWROb2RlKG5vZGUpO1xuICAgICAgICB0aGlzLnBvcHVsYXRlRG9tVHJlZShub2RlKTtcblxuXG5cbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICB9LCAxMDApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBwb3B1bGF0ZVNlbGVjdGVkTm9kZTogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHRoaXMubm9kZVRhZ05hbWUgPSBub2RlLnRhZ05hbWU7XG4gICAgICBpZiAobm9kZS5pZCkge1xuICAgICAgICAgIHRoaXMuZGlzcGxheU5vZGVJbmZvID0gbm9kZS50YWdOYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5Tm9kZUluZm8gPSBub2RlLnRhZ05hbWU7XG4gICAgICB9XG5cbiAgICB9LFxuXG4gICAgcG9wdWxhdGVEb21UcmVlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYoIXRoaXMuZGlzcGxheURvbVRyZWUpe1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cblxuICAgICAgdGhpcy5kb21UcmVlID0gbmV3IG13LkRvbVRyZWUoe1xuICAgICAgICBlbGVtZW50OiAnI2RvbXRyZWUnLFxuICAgICAgICByZXNpemFibGU6IHRydWUsXG4gICAgICAgIC8vIGNvbXBhY3RUcmVlVmlldzogdHJ1ZSxcbiAgICAgICAgLy8gIHRhcmdldERvY3VtZW50OiB0YXJnZXRNdy53aW4uZG9jdW1lbnQsXG4gICAgICAgIHRhcmdldERvY3VtZW50OiBlbGVtZW50Lm93bmVyRG9jdW1lbnQsXG4gICAgICAgIGNhblNlbGVjdDogZnVuY3Rpb24gKG5vZGUsIGxpKSB7XG4gICAgICAgICAgdmFyIGNhbiA9IG13LnRvcCgpLmFwcC5saXZlRWRpdC5jYW5CZUVsZW1lbnQobm9kZSlcbiAgICAgICAgICB2YXIgaXNJbmFjY2Vzc2libGUgPSBtdy50b3AoKS5hcHAubGl2ZUVkaXQubGl2ZUVkaXRIZWxwZXJzLnRhcmdldElzSW5hY2VzaWJsZU1vZHVsZShub2RlKTtcbiAgICAgICAgICBpZiAoaXNJbmFjY2Vzc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cblxuICAgICAgICAgIC8vIGlmICghbm9kZS5pZCkge1xuICAgICAgICAgIC8vICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgICAvLyAgIHJldHVybiBjYW47XG4gICAgICAgICAvLyB2YXIgY2FudCA9ICghbXcudG9vbHMuaXNFZGl0YWJsZShub2RlKSAmJiAhbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2VkaXQnKSAmJiAhbm9kZS5pZCk7XG4gICAgICAgICAgLy9yZXR1cm4gIWNhbnQ7XG4gICAgICAgICAgLy8gcmV0dXJuIG13LnRvb2xzLmlzRWRpdGFibGUobm9kZSkgfHwgbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2VkaXQnKTtcblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBvbkhvdmVyOiBmdW5jdGlvbiAoZSwgdGFyZ2V0LCBub2RlLCBlbGVtZW50KSB7XG5cbiAgICAgICAgfSxcbiAgICAgICAgb25TZWxlY3Q6IChlLCB0YXJnZXQsIG5vZGUsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICBtdy50b3AoKS5hcHAuZGlzcGF0Y2goJ213LmVsZW1lbnRTdHlsZUVkaXRvci5zZWxlY3ROb2RlJywgbm9kZSk7XG4gICAgICAgICAgaWYgKG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5tdykge1xuICAgICAgICAgICAgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lm13LnRvb2xzLnNjcm9sbFRvKG5vZGUsIGZhbHNlLCAxMDApO1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICB9KTtcblxuXG4gICAgICB0aGlzLmRvbVRyZWUuc2VsZWN0KGVsZW1lbnQpXG4gICAgfVxuXG5cbiAgfSxcblxuXG4gIG1vdW50ZWQoKSB7XG4gICAgbXcudG9wKCkuYXBwLm9uKCdtdy5lbGVtZW50U3R5bGVFZGl0b3Iuc2VsZWN0Tm9kZScsIChlbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLnBvcHVsYXRlU3R5bGVFZGl0b3IoZWxlbWVudClcbiAgICB9KTtcbiAgfSxcblxuXG59XG48L3NjcmlwdD5cblxuXG4iLCI8dGVtcGxhdGU+XG4gICAgPGRpdiB2LWlmPVwiaGFzQ29udGFpbmVyXCI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1iLTQgZC1mbGV4XCI+XG4gICAgICAgICAgICA8c3ZnIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBoZWlnaHQ9XCIyNFwiIHdpZHRoPVwiMjRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPlxuICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTE5LDE3SDVWN0gxOU0xOSw1SDVBMiwyIDAgMCwwIDMsN1YxN0EyLDIgMCAwLDAgNSwxOUgxOUEyLDIgMCAwLDAgMjEsMTdWN0MyMSw1Ljg5IDIwLjEsNSAxOSw1WlwiPjwvcGF0aD5cbiAgICAgICAgICAgIDwvc3ZnPlxuXG4gICAgICAgICAgICA8YiBjbGFzcz1cIm13LWFkbWluLWFjdGlvbi1saW5rcyBtcy0zXCIgOmNsYXNzPVwieydhY3RpdmUnOiBzaG93Q29udGFpbmVyIH1cIiB2LW9uOmNsaWNrPVwidG9nZ2xlQ29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgQ29udGFpbmVyXG4gICAgICAgICAgICA8L2I+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgdi1pZj1cInNob3dDb250YWluZXJcIj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jb250cm9sLWxpdmUtZWRpdC1sYWJlbC13cmFwcGVyIG15LTQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBmbGV4LXdyYXAgZ2FwLTJcIiBpZD1cImZpZWxkLWNvbmF0aW5lci10eXBlXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJsaXZlLWVkaXQtbGFiZWwgcHgtMCBjb2wtNFwiPkNvbnRhaW5lcjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicy1maWVsZC1jb250ZW50XCI+XG5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwiY29udGFpbmVyVHlwZVwiIHZhbHVlPVwiY29udGFpbmVyXCIgdi1tb2RlbD1cImNvbnRhaW5lclR5cGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCI+Q29udGFpbmVyPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cImNvbnRhaW5lclR5cGVcIiB2YWx1ZT1cImNvbnRhaW5lci1mbHVpZFwiIHYtbW9kZWw9XCJjb250YWluZXJUeXBlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPkZsdWlkPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG5cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuXG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cblxuaW1wb3J0IERyb3Bkb3duU21hbGwgZnJvbSAnLi9jb21wb25lbnRzL0Ryb3Bkb3duU21hbGwudnVlJztcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge0Ryb3Bkb3duU21hbGx9LFxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnc2hvd0NvbnRhaW5lcic6IGZhbHNlLFxuICAgICAgICAgICAgJ2FjdGl2ZUNvbnRhaW5lck5vZGUnOiBudWxsLFxuICAgICAgICAgICAgJ2lzUmVhZHknOiBmYWxzZSxcbiAgICAgICAgICAgICdoYXNDb250YWluZXInOiBmYWxzZSxcbiAgICAgICAgICAgICdjb250YWluZXJUeXBlJzogbnVsbCxcblxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHRvZ2dsZUNvbnRhaW5lcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5zaG93Q29udGFpbmVyID0gIXRoaXMuc2hvd0NvbnRhaW5lcjtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93JywgJ2NvbnRhaW5lcicpO1xuICAgICAgICB9LFxuICAgICAgICByZXNldEFsbFByb3BlcnRpZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzQ29udGFpbmVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyVHlwZSA9IG51bGw7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUgJiYgbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldEFsbFByb3BlcnRpZXMoKTtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyTm9kZSA9IG13LnRvb2xzLmZpcnN0UGFyZW50T3JDdXJyZW50V2l0aEFueU9mQ2xhc3Nlcyhub2RlLCBbJ2NvbnRhaW5lcicsICdjb250YWluZXItZmx1aWQnXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyTm9kZSAmJiBtdy50b29scy5pc0VkaXRhYmxlKGNvbnRhaW5lck5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhc0NvbnRhaW5lciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUNvbnRhaW5lck5vZGUgPSBjb250YWluZXJOb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZUNzc0NvbnRhaW5lckZvck5vZGUoY29udGFpbmVyTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNSZWFkeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwb3B1bGF0ZUNzc0NvbnRhaW5lckZvck5vZGU6IGZ1bmN0aW9uIChub2RlKSB7XG5cbiAgICAgICAgICAgIGlmIChub2RlLmNsYXNzTGlzdCAmJiBub2RlLmNsYXNzTGlzdC5jb250YWlucygnY29udGFpbmVyLWZsdWlkJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lclR5cGUgPSAnY29udGFpbmVyLWZsdWlkJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJUeXBlID0gJ2NvbnRhaW5lcic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cblxuICAgICAgICBhcHBseUNsYXNzVG9BY3RpdmVDb250YWluZXJOb2RlOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSZWFkeSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUNvbnRhaW5lck5vZGUpIHtcblxuXG5cbiAgICAgICAgICAgICAgICBpZiAodmFsID09PSAnY29udGFpbmVyLWZsdWlkJykge1xuICAgICAgICAgICAgICAgICAgICBtdy50b3AoKS5hcHAuZGlzcGF0Y2goJ213LmVsZW1lbnRTdHlsZUVkaXRvci5yZW1vdmVDbGFzc0Zyb21Ob2RlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogdGhpcy5hY3RpdmVDb250YWluZXJOb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb250YWluZXInXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBtdy50b3AoKS5hcHAuZGlzcGF0Y2goJ213LmVsZW1lbnRTdHlsZUVkaXRvci5hZGRDbGFzc1RvTm9kZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IHRoaXMuYWN0aXZlQ29udGFpbmVyTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY29udGFpbmVyLWZsdWlkJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtdy50b3AoKS5hcHAuZGlzcGF0Y2goJ213LmVsZW1lbnRTdHlsZUVkaXRvci5yZW1vdmVDbGFzc0Zyb21Ob2RlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogdGhpcy5hY3RpdmVDb250YWluZXJOb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb250YWluZXItZmx1aWQnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBtdy50b3AoKS5hcHAuZGlzcGF0Y2goJ213LmVsZW1lbnRTdHlsZUVkaXRvci5hZGRDbGFzc1RvTm9kZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IHRoaXMuYWN0aXZlQ29udGFpbmVyTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnY29udGFpbmVyJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgIH0sXG5cbiAgICBtb3VudGVkKCkge1xuICAgICAgICB0aGlzLmVtaXR0ZXIub24oXCJlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93XCIsIGVsZW1lbnRTdHlsZUVkaXRvclNob3cgPT4ge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRTdHlsZUVkaXRvclNob3cgIT09ICdjb250YWluZXInKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93Q29udGFpbmVyID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBtdy50b3AoKS5hcHAub24oJ213LmVsZW1lbnRTdHlsZUVkaXRvci5zZWxlY3ROb2RlJywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMucG9wdWxhdGVTdHlsZUVkaXRvcihlbGVtZW50KVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgd2F0Y2g6IHtcbiAgICAgICAgY29udGFpbmVyVHlwZTogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5hcHBseUNsYXNzVG9BY3RpdmVDb250YWluZXJOb2RlKG5ld1ZhbHVlKTtcblxuICAgICAgICB9LFxuXG4gICAgfSxcblxuXG59XG48L3NjcmlwdD5cblxuXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVtZW50U3R5bGVBbmltYXRpb25zQXBwbGllciB7XHJcblxyXG5cclxuICAgIHN0YXRpYyBwcmV2aWV3QW5pbWF0aW9uKG5vZGUsIGFuaW1hdGlvbikge1xyXG4gICAgICAgIHZhciBub2RlV2luZG93ID0gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xyXG5cclxuICAgICAgICB2YXIgc2VsID0gbm9kZVdpbmRvdy5tdy50b29scy5nZW5lcmF0ZVNlbGVjdG9yRm9yTm9kZShub2RlKTtcclxuICAgICAgICB2YXIgaWQgPSBub2RlV2luZG93Lm13LmlkKCdhbmltYXRpb24nKTtcclxuXHJcbiAgICAgICAgdmFyIGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe3NlbGVjdG9yOiBzZWwsIGlkOiBpZH0sIGFuaW1hdGlvbik7XHJcbiAgICAgICAgbm9kZVdpbmRvdy5tdy5fX2FuaW1hdGUoY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVtb3ZlQW5pbWF0aW9ucyhub2RlKSB7XHJcbiAgICAgICAgdmFyIG5vZGVXaW5kb3cgPSBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XHJcbiAgICAgICAgdmFyIHRhcmdldE13ID0gbm9kZVdpbmRvdy5tdztcclxuICAgICAgICB2YXIgc2VsID0gbm9kZVdpbmRvdy5tdy50b29scy5nZW5lcmF0ZVNlbGVjdG9yRm9yTm9kZShub2RlKTtcclxuXHJcbiAgICAgICAgdmFyIGN1cnIgPSBub2RlV2luZG93Lm13Ll9fcGFnZUFuaW1hdGlvbnMuZmluZChmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYS5zZWxlY3RvciA9PT0gc2VsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghY3Vycikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdmFyIGl0ZW0gPSBjdXJyO1xyXG4gICAgICAgIHZhciBjaXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xyXG4gICAgICAgIHRhcmdldE13Ll9fcGFnZUFuaW1hdGlvbnMuc3BsaWNlKHRhcmdldE13Ll9fcGFnZUFuaW1hdGlvbnMuaW5kZXhPZihpdGVtKSwgMSk7XHJcbiAgICAgICAgQXJyYXkuZnJvbSh0YXJnZXRNdy5kb2MucXVlcnlTZWxlY3RvckFsbChjaXRlbS5zZWxlY3RvcikpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUuJCRtd0FuaW1hdGlvbnMgJiYgbm9kZS4kJG13QW5pbWF0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpID0gbm9kZS4kJG13QW5pbWF0aW9ucy5maW5kSW5kZXgoZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5pZCA9PT0gaXRlbS5pZDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuJCRtd0FuaW1hdGlvbnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBzZXRBbmltYXRpb24obm9kZSwgYW5pbWF0aW9uKSB7XHJcblxyXG5cclxuICAgICAgICB2YXIgbm9kZVdpbmRvdyA9IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcclxuXHJcbiAgICAgICAgdmFyIHNlbCA9IG5vZGVXaW5kb3cubXcudG9vbHMuZ2VuZXJhdGVTZWxlY3RvckZvck5vZGUobm9kZSk7XHJcbiAgICAgICAgdmFyIGlkID0gbm9kZVdpbmRvdy5tdy5pZCgnYW5pbWF0aW9uJyk7XHJcblxyXG4gICAgICAgIGlmICghbm9kZS4kJG13QW5pbWF0aW9ucykge1xyXG4gICAgICAgICAgICBub2RlLiQkbXdBbmltYXRpb25zID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlbW92ZUFuaW1hdGlvbnMobm9kZSk7XHJcblxyXG4gICAgICAgIGlmICghbm9kZS4kJG13QW5pbWF0aW9ucykge1xyXG4gICAgICAgICAgICBub2RlLiQkbXdBbmltYXRpb25zID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjb25maWcgPSBPYmplY3QuYXNzaWduKHtzZWxlY3Rvcjogc2VsLCBpZDogaWR9LCBhbmltYXRpb24pO1xyXG4gICAgICAgIG5vZGUuJCRtd0FuaW1hdGlvbnMucHVzaChjb25maWcpXHJcbiAgICAgICAgbm9kZVdpbmRvdy5tdy5fX3BhZ2VBbmltYXRpb25zLnB1c2goY29uZmlnKVxyXG5cclxuICAgICAgICBub2RlV2luZG93Lm13Ll9fYW5pbWF0ZShjb25maWcpO1xyXG5cclxuXHJcbiAgICAgICAgaWYobXcudG9wKCkuYXBwKXtcclxuICAgICAgICAgICAgbXcudG9wKCkuYXBwLnJlZ2lzdGVyQ2hhbmdlKG5vZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIHN1cHBvcnRzQW5pbWF0aW9ucyhub2RlKSB7XHJcbiAgICAgICAgaWYgKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lm13ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5tdy5fX2FuaW1hdGUpIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5tdy50b29scy5pc0VkaXRhYmxlKG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEFuaW1hdGlvbihub2RlKSB7XHJcbiAgICAgICAgdmFyIG5vZGVXaW5kb3cgPSBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XHJcbiAgICAgICAgaWYgKG5vZGVXaW5kb3cubXcuX19wYWdlQW5pbWF0aW9ucykge1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZhciBzZWwgPSBub2RlV2luZG93Lm13LnRvb2xzLmdlbmVyYXRlU2VsZWN0b3JGb3JOb2RlKG5vZGUpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGN1cnIgPSBub2RlV2luZG93Lm13Ll9fcGFnZUFuaW1hdGlvbnMuZmluZChmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuc2VsZWN0b3IgPT09IHNlbDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgdi1pZj1cInN1cHBvcnRzQW5pbWF0aW9uc1wiPlxuXG4gICAgICA8ZGl2IGNsYXNzPVwibWItNCBkLWZsZXhcIj5cblxuICAgICAgICAgIDxzdmcgZmlsbD1cImN1cnJlbnRDb2xvclwiIGhlaWdodD1cIjI0XCIgd2lkdGg9XCIyNFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2ZXJzaW9uPVwiMS4xXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPlxuICAgICAgICAgICAgICA8cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk00LDJBMiwyIDAgMCwwIDIsNFYxNEg0VjRIMTRWMkg0TTgsNkEyLDIgMCAwLDAgNiw4VjE4SDhWOEgxOFY2SDhNMjAsMTJWMjBIMTJWMTJIMjBNMjAsMTBIMTJBMiwyIDAgMCwwIDEwLDEyVjIwQTIsMiAwIDAsMCAxMiwyMkgyMEEyLDIgMCAwLDAgMjIsMjBWMTJBMiwyIDAgMCwwIDIwLDEwTTE0LDEzVjE5TDE4LDE2TDE0LDEzWlwiPjwvcGF0aD5cbiAgICAgICAgICA8L3N2Zz5cblxuICAgICAgICAgIDxiIGNsYXNzPVwibXctYWRtaW4tYWN0aW9uLWxpbmtzIG1zLTNcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IHNob3dBbmltYXRpb25zIH1cIiB2LW9uOmNsaWNrPVwidG9nZ2xlQW5pbWF0aW9uc1wiPlxuICAgICAgICAgICAgICBBbmltYXRpb25zXG4gICAgICAgICAgPC9iPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgdi1pZj1cInNob3dBbmltYXRpb25zXCI+XG5cbiAgICAgIDxEcm9wZG93blNtYWxsIHYtbW9kZWw9XCJzZWxlY3RlZEFuaW1hdGlvblwiIDpvcHRpb25zPVwiYW5pbWF0aW9uc1wiIDpsYWJlbD1cIidBbmltYXRpb24nXCIvPlxuXG4gICAgPGRpdiB2LWlmPVwic2VsZWN0ZWRBbmltYXRpb25cIj5cbiAgICAgIDxEcm9wZG93blNtYWxsIHYtbW9kZWw9XCJzZWxlY3RlZEFuaW1hdGlvbldoZW5BcHBlYXJcIiA6b3B0aW9ucz1cImFuaW1hdGlvbnNBcHBlYXJcIiA6bGFiZWw9XCInV2hlbidcIi8+XG5cbiAgICAgIDxTbGlkZXJTbWFsbCB2LW1vZGVsPVwic2VsZWN0ZWRBbmltYXRpb25TcGVlZFwiIDpsYWJlbD1cIidTcGVlZCdcIiA6bWluPVwiMC4xXCIgOm1heD1cIjVcIiA6c3RlcD1cIjAuMVwiIDp1bml0PVwiJ3MnXCIvPlxuXG5cbiAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5cbmltcG9ydCBEcm9wZG93blNtYWxsIGZyb20gXCIuL2NvbXBvbmVudHMvRHJvcGRvd25TbWFsbC52dWVcIjtcbmltcG9ydCBTbGlkZXJTbWFsbCBmcm9tIFwiLi9jb21wb25lbnRzL1NsaWRlclNtYWxsLnZ1ZVwiO1xuaW1wb3J0IEVsZW1lbnRTdHlsZUFuaW1hdGlvbnNBcHBsaWVyIGZyb20gXCIuL0VsZW1lbnRTdHlsZUFuaW1hdGlvbnNBcHBsaWVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge0Ryb3Bkb3duU21hbGwsIFNsaWRlclNtYWxsfSxcblxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgICdzaG93QW5pbWF0aW9ucyc6IGZhbHNlLFxuICAgICAgJ2FjdGl2ZU5vZGUnOiBudWxsLFxuICAgICAgJ2lzUmVhZHknOiBmYWxzZSxcbiAgICAgICdzZWxlY3RlZEFuaW1hdGlvbic6IGZhbHNlLFxuICAgICAgJ3NlbGVjdGVkQW5pbWF0aW9uU3BlZWQnOiBmYWxzZSxcbiAgICAgICdzZWxlY3RlZEFuaW1hdGlvbldoZW5BcHBlYXInOiBmYWxzZSxcbiAgICAgICdzdXBwb3J0c0FuaW1hdGlvbnMnOiBmYWxzZSxcblxuICAgICAgJ2FuaW1hdGlvbnNBcHBlYXInOiBbXG4gICAgICAgIHtcImtleVwiOiBcIm5vbmVcIiwgXCJ2YWx1ZVwiOiBcIk5vbmVcIn0sXG4gICAgICAgIHtcImtleVwiOiBcIm9uQXBwZWFyXCIsIFwidmFsdWVcIjogXCJXaGVuIGVsZW1lbnQgYXBwZWFycyBvbiBzY3JlZW5cIn0sXG4gICAgICAgIHtcImtleVwiOiBcIm9uSG92ZXJcIiwgXCJ2YWx1ZVwiOiBcIldoZW4gbW91c2UgaXMgb3ZlclwifSxcbiAgICAgICAge1wia2V5XCI6IFwib25DbGlja1wiLCBcInZhbHVlXCI6IFwiV2hlbiBlbGVtZW50IGlzIGNsaWNrZWRcIn0sXG4gICAgICBdLFxuXG4gICAgICAnYW5pbWF0aW9ucyc6IFtcbiAgICAgICAge1wia2V5XCI6IFwibm9uZVwiLCBcInZhbHVlXCI6IFwiTm9uZVwifSxcbiAgICAgICAge1wia2V5XCI6IFwiYm91bmNlXCIsIFwidmFsdWVcIjogXCJCb3VuY2VcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImZsYXNoXCIsIFwidmFsdWVcIjogXCJGbGFzaFwifSxcbiAgICAgICAge1wia2V5XCI6IFwicHVsc2VcIiwgXCJ2YWx1ZVwiOiBcIlB1bHNlXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJydWJiZXJCYW5kXCIsIFwidmFsdWVcIjogXCJSdWJiZXIgQmFuZFwifSxcbiAgICAgICAge1wia2V5XCI6IFwic2hha2VYXCIsIFwidmFsdWVcIjogXCJTaGFrZSBYXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJzaGFrZVlcIiwgXCJ2YWx1ZVwiOiBcIlNoYWtlIFlcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImhlYWRTaGFrZVwiLCBcInZhbHVlXCI6IFwiSGVhZCBTaGFrZVwifSxcbiAgICAgICAge1wia2V5XCI6IFwic3dpbmdcIiwgXCJ2YWx1ZVwiOiBcIlN3aW5nXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJ0YWRhXCIsIFwidmFsdWVcIjogXCJUYWRhXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJ3b2JibGVcIiwgXCJ2YWx1ZVwiOiBcIldvYmJsZVwifSxcbiAgICAgICAge1wia2V5XCI6IFwiamVsbG9cIiwgXCJ2YWx1ZVwiOiBcIkplbGxvXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJoZWFydEJlYXRcIiwgXCJ2YWx1ZVwiOiBcIkhlYXJ0IEJlYXRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImZsaXBcIiwgXCJ2YWx1ZVwiOiBcIkZsaXBcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImZsaXBJblhcIiwgXCJ2YWx1ZVwiOiBcIkZsaXAgSW4gWFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiZmxpcEluWVwiLCBcInZhbHVlXCI6IFwiRmxpcCBJbiBZXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJoaW5nZVwiLCBcInZhbHVlXCI6IFwiSGluZ2VcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImphY2tJblRoZUJveFwiLCBcInZhbHVlXCI6IFwiSmFjayBJbiBUaGUgQm94XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJyb2xsSW5cIiwgXCJ2YWx1ZVwiOiBcIlJvbGwgSW5cIn0sXG4gICAgICAgIHtcImtleVwiOiBcImJhY2tJbkRvd25cIiwgXCJ2YWx1ZVwiOiBcIkJhY2sgSW4gRG93blwifSxcbiAgICAgICAge1wia2V5XCI6IFwiYmFja0luTGVmdFwiLCBcInZhbHVlXCI6IFwiQmFjayBJbiBMZWZ0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJiYWNrSW5SaWdodFwiLCBcInZhbHVlXCI6IFwiQmFjayBJbiBSaWdodFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiYmFja0luVXBcIiwgXCJ2YWx1ZVwiOiBcIkJhY2sgSW4gVXBcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImJvdW5jZUluXCIsIFwidmFsdWVcIjogXCJCb3VuY2UgSW5cIn0sXG4gICAgICAgIHtcImtleVwiOiBcImJvdW5jZUluRG93blwiLCBcInZhbHVlXCI6IFwiQm91bmNlIEluIERvd25cIn0sXG4gICAgICAgIHtcImtleVwiOiBcImJvdW5jZUluTGVmdFwiLCBcInZhbHVlXCI6IFwiQm91bmNlIEluIExlZnRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImJvdW5jZUluUmlnaHRcIiwgXCJ2YWx1ZVwiOiBcIkJvdW5jZSBJbiBSaWdodFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiYm91bmNlSW5VcFwiLCBcInZhbHVlXCI6IFwiQm91bmNlIEluIFVwXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJmYWRlSW5cIiwgXCJ2YWx1ZVwiOiBcIkZhZGUgSW5cIn0sXG4gICAgICAgIHtcImtleVwiOiBcImZhZGVJbkRvd25cIiwgXCJ2YWx1ZVwiOiBcIkZhZGUgSW4gRG93blwifSxcbiAgICAgICAge1wia2V5XCI6IFwiZmFkZUluRG93bkJpZ1wiLCBcInZhbHVlXCI6IFwiRmFkZSBJbiBEb3duIEJpZ1wifSxcbiAgICAgICAge1wia2V5XCI6IFwiZmFkZUluTGVmdFwiLCBcInZhbHVlXCI6IFwiRmFkZSBJbiBMZWZ0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJmYWRlSW5MZWZ0QmlnXCIsIFwidmFsdWVcIjogXCJGYWRlIEluIExlZnQgQmlnXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJmYWRlSW5SaWdodFwiLCBcInZhbHVlXCI6IFwiRmFkZSBJbiBSaWdodFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiZmFkZUluUmlnaHRCaWdcIiwgXCJ2YWx1ZVwiOiBcIkZhZGUgSW4gUmlnaHQgQmlnXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJmYWRlSW5VcFwiLCBcInZhbHVlXCI6IFwiRmFkZSBJbiBVcFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiZmFkZUluVXBCaWdcIiwgXCJ2YWx1ZVwiOiBcIkZhZGUgSW4gVXAgQmlnXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJmYWRlSW5Ub3BMZWZ0XCIsIFwidmFsdWVcIjogXCJGYWRlIEluIFRvcCBMZWZ0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJmYWRlSW5Ub3BSaWdodFwiLCBcInZhbHVlXCI6IFwiRmFkZSBJbiBUb3AgUmlnaHRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImZhZGVJbkJvdHRvbUxlZnRcIiwgXCJ2YWx1ZVwiOiBcIkZhZGUgSW4gQm90dG9tIExlZnRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImZhZGVJbkJvdHRvbVJpZ2h0XCIsIFwidmFsdWVcIjogXCJGYWRlIEluIEJvdHRvbSBSaWdodFwifSxcbiAgICAgICAge1wia2V5XCI6IFwibGlnaHRTcGVlZEluUmlnaHRcIiwgXCJ2YWx1ZVwiOiBcIkxpZ2h0U3BlZWQgSW4gUmlnaHRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImxpZ2h0U3BlZWRJbkxlZnRcIiwgXCJ2YWx1ZVwiOiBcIkxpZ2h0U3BlZWQgSW4gTGVmdFwifSxcbiAgICAgICAge1wia2V5XCI6IFwicm90YXRlSW5cIiwgXCJ2YWx1ZVwiOiBcIlJvdGF0ZSBJblwifSxcbiAgICAgICAge1wia2V5XCI6IFwicm90YXRlSW5Eb3duTGVmdFwiLCBcInZhbHVlXCI6IFwiUm90YXRlIEluIERvd24gTGVmdFwifSxcbiAgICAgICAge1wia2V5XCI6IFwicm90YXRlSW5Eb3duUmlnaHRcIiwgXCJ2YWx1ZVwiOiBcIlJvdGF0ZSBJbiBEb3duIFJpZ2h0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJ6b29tSW5cIiwgXCJ2YWx1ZVwiOiBcIlpvb20gSW5cIn0sXG4gICAgICAgIHtcImtleVwiOiBcInpvb21JbkRvd25cIiwgXCJ2YWx1ZVwiOiBcIlpvb20gSW4gRG93blwifSxcbiAgICAgICAge1wia2V5XCI6IFwiem9vbUluTGVmdFwiLCBcInZhbHVlXCI6IFwiWm9vbSBJbiBMZWZ0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJ6b29tSW5SaWdodFwiLCBcInZhbHVlXCI6IFwiWm9vbSBJbiBSaWdodFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiem9vbUluVXBcIiwgXCJ2YWx1ZVwiOiBcIlpvb20gSW4gVXBcIn0sXG4gICAgICAgIHtcImtleVwiOiBcInNsaWRlSW5Eb3duXCIsIFwidmFsdWVcIjogXCJTbGlkZSBJbiBEb3duXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJzbGlkZUluTGVmdFwiLCBcInZhbHVlXCI6IFwiU2xpZGUgSW4gTGVmdFwifSxcbiAgICAgICAge1wia2V5XCI6IFwic2xpZGVJblJpZ2h0XCIsIFwidmFsdWVcIjogXCJTbGlkZSBJbiBSaWdodFwifSxcbiAgICAgICAge1wia2V5XCI6IFwic2xpZGVJblVwXCIsIFwidmFsdWVcIjogXCJTbGlkZSBJbiBVcFwifSxcbiAgICAgIF0sXG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgICB0b2dnbGVBbmltYXRpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5zaG93QW5pbWF0aW9ucyA9ICF0aGlzLnNob3dBbmltYXRpb25zO1xuICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93JywgJ2FuaW1hdGlvbnMnKTtcbiAgICAgIH0sXG4gICAgcmVzZXRBbGxQcm9wZXJ0aWVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkQW5pbWF0aW9uID0gbnVsbDtcbiAgICAgIHRoaXMuc2VsZWN0ZWRBbmltYXRpb25TcGVlZCA9IDE7XG4gICAgICB0aGlzLnNlbGVjdGVkQW5pbWF0aW9uV2hlbkFwcGVhciA9IG51bGw7XG4gICAgfSxcblxuICAgIHBvcHVsYXRlQWN0aXZlQW5pbWF0aW9uOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIGFuaW1hdGlvbkRhdGEgPSBFbGVtZW50U3R5bGVBbmltYXRpb25zQXBwbGllci5nZXRBbmltYXRpb24obm9kZSk7XG4gICAgICBpZiAoIWFuaW1hdGlvbkRhdGEpIHtcbiAgICAgICAgdGhpcy5yZXNldEFsbFByb3BlcnRpZXMoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hbmltYXRpb24pIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEFuaW1hdGlvbiA9IGFuaW1hdGlvbkRhdGEuYW5pbWF0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEFuaW1hdGlvbiA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoYW5pbWF0aW9uRGF0YS5zcGVlZCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkQW5pbWF0aW9uU3BlZWQgPSBhbmltYXRpb25EYXRhLnNwZWVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEFuaW1hdGlvblNwZWVkID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChhbmltYXRpb25EYXRhLndoZW4pIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEFuaW1hdGlvbldoZW5BcHBlYXIgPSBhbmltYXRpb25EYXRhLndoZW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlbGVjdGVkQW5pbWF0aW9uV2hlbkFwcGVhciA9IG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRBbmltYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLmFjdGl2ZU5vZGUpIHtcblxuICAgICAgICB2YXIgc3BlZWQgPSB0aGlzLnNlbGVjdGVkQW5pbWF0aW9uU3BlZWQgPyB0aGlzLnNlbGVjdGVkQW5pbWF0aW9uU3BlZWQgOiAxO1xuICAgICAgICB2YXIgd2hlbiA9IHRoaXMuc2VsZWN0ZWRBbmltYXRpb25XaGVuQXBwZWFyID8gdGhpcy5zZWxlY3RlZEFuaW1hdGlvbldoZW5BcHBlYXIgOiAnb25BcHBlYXInO1xuICAgICAgICB2YXIgYW5pbWF0aW9uID0ge1xuICAgICAgICAgIGFuaW1hdGlvbjogdGhpcy5zZWxlY3RlZEFuaW1hdGlvbixcbiAgICAgICAgICBzcGVlZDogc3BlZWQsXG4gICAgICAgICAgd2hlbjogd2hlbixcbiAgICAgICAgfVxuXG4gICAgICAgIG13LmxvZyhhbmltYXRpb24pXG4gICAgICAgIEVsZW1lbnRTdHlsZUFuaW1hdGlvbnNBcHBsaWVyLnNldEFuaW1hdGlvbih0aGlzLmFjdGl2ZU5vZGUsIGFuaW1hdGlvbik7XG5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcG9wdWxhdGVTdHlsZUVkaXRvcjogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChub2RlICYmIG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnJlc2V0QWxsUHJvcGVydGllcygpO1xuICAgICAgICB0aGlzLmFjdGl2ZU5vZGUgPSBub2RlO1xuICAgICAgICB0aGlzLnN1cHBvcnRzQW5pbWF0aW9ucyA9IEVsZW1lbnRTdHlsZUFuaW1hdGlvbnNBcHBsaWVyLnN1cHBvcnRzQW5pbWF0aW9ucyhub2RlKTtcbiAgICAgICAgdGhpcy5wb3B1bGF0ZUFjdGl2ZUFuaW1hdGlvbihub2RlKTtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICB9LCAxMDApO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgbW91bnRlZCgpIHtcblxuICAgICAgdGhpcy5lbWl0dGVyLm9uKFwiZWxlbWVudC1zdHlsZS1lZGl0b3Itc2hvd1wiLCBlbGVtZW50U3R5bGVFZGl0b3JTaG93ID0+IHtcbiAgICAgICAgICBpZiAoZWxlbWVudFN0eWxlRWRpdG9yU2hvdyAhPT0gJ2FuaW1hdGlvbnMnKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2hvd0FuaW1hdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIG13LnRvcCgpLmFwcC5vbignbXcuZWxlbWVudFN0eWxlRWRpdG9yLnNlbGVjdE5vZGUnLCAoZWxlbWVudCkgPT4ge1xuICAgICAgdmFyIGRvY3VtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgICAgdmFyIGRvY3VtZW50V2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cbiAgICAgIHRoaXMucG9wdWxhdGVTdHlsZUVkaXRvcihlbGVtZW50KVxuICAgIH0pO1xuICB9LFxuXG5cbiAgd2F0Y2g6IHtcbiAgICBzZWxlY3RlZEFuaW1hdGlvbjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRBbmltYXRpb24oKVxuICAgIH0sXG5cbiAgICBzZWxlY3RlZEFuaW1hdGlvblNwZWVkOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBpZiAoIXRoaXMuaXNSZWFkeSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnNldEFuaW1hdGlvbigpXG4gICAgfSxcbiAgICBzZWxlY3RlZEFuaW1hdGlvbldoZW5BcHBlYXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIGlmICghdGhpcy5pc1JlYWR5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKClcbiAgICB9XG4gIH1cblxuXG59XG5cblxuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgdi1pZj1cImhhc0dyaWRcIj5cblxuXG4gICAgPGRpdiBjbGFzcz1cIm1iLTQgZC1mbGV4XCI+XG4gICAgICAgIDxzdmcgZmlsbD1cImN1cnJlbnRDb2xvclwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB2ZXJzaW9uPVwiMS4xXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNNCwySDIwQTIsMiAwIDAsMSAyMiw0VjIwQTIsMiAwIDAsMSAyMCwyMkg0QzIuOTIsMjIgMiwyMS4xIDIsMjBWNEEyLDIgMCAwLDEgNCwyTTQsNFYxMUgxMVY0SDRNNCwyMEgxMVYxM0g0VjIwTTIwLDIwVjEzSDEzVjIwSDIwTTIwLDRIMTNWMTFIMjBWNFpcIj48L3BhdGg+PC9zdmc+XG5cbiAgICAgICAgPGIgY2xhc3M9XCJtdy1hZG1pbi1hY3Rpb24tbGlua3MgbXMtM1wiIDpjbGFzcz1cInsnYWN0aXZlJzogc2hvd0dyaWRTZXR0aW5ncyB9XCIgdi1vbjpjbGljaz1cInRvZ2dsZUdyaWRTZXR0aW5nc1wiPlxuICAgICAgICBHcmlkXG4gICAgICA8L2I+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IHYtaWY9XCJzaG93R3JpZFNldHRpbmdzXCI+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNvbnRyb2wtbGl2ZS1lZGl0LWxhYmVsLXdyYXBwZXIgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJsaXZlLWVkaXQtbGFiZWwgcHgtMCBjb2wtNFwiPkRlc2t0b3A8L2xhYmVsPlxuICAgICAgICA8aSBjbGFzcz1cIm1kaSBtZGktbW9uaXRvciBjb2wtMlwiIHN0eWxlPVwiZm9udC1zaXplOiAyNHB4O1wiPjwvaT5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC02XCI+XG4gICAgICAgICAgICA8RHJvcGRvd25TbWFsbFxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwiY29sT3B0aW9uc0Rlc2t0b3BcIlxuICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJzZWxlY3RlZENvbERlc2t0b3BcIlxuICAgICAgICAgICAgPjwvRHJvcGRvd25TbWFsbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tY29udHJvbC1saXZlLWVkaXQtbGFiZWwtd3JhcHBlciBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImxpdmUtZWRpdC1sYWJlbCBweC0wIGNvbC00XCI+VGFibGV0PC9sYWJlbD5cbiAgICAgICAgPGkgY2xhc3M9XCJtZGkgbWRpLXRhYmxldCBjb2wtMlwiIHN0eWxlPVwiZm9udC1zaXplOiAyNHB4O1wiPjwvaT5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC02XCI+XG4gICAgICAgICAgICA8RHJvcGRvd25TbWFsbFxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwiY29sT3B0aW9uc1RhYmxldFwiXG4gICAgICAgICAgICAgICAgdi1tb2RlbD1cInNlbGVjdGVkQ29sVGFibGV0XCJcbiAgICAgICAgICAgID48L0Ryb3Bkb3duU21hbGw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNvbnRyb2wtbGl2ZS1lZGl0LWxhYmVsLXdyYXBwZXIgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJsaXZlLWVkaXQtbGFiZWwgcHgtMCBjb2wtNFwiPk1vYmlsZTwvbGFiZWw+XG4gICAgICAgIDxpIGNsYXNzPVwibWRpIG1kaS1jZWxscGhvbmUgY29sLTJcIiBzdHlsZT1cImZvbnQtc2l6ZTogMjRweDtcIj48L2k+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNlwiPlxuICAgICAgICAgICAgPERyb3Bkb3duU21hbGxcbiAgICAgICAgICAgICAgICA6b3B0aW9ucz1cImNvbE9wdGlvbnNNb2JpbGVcIlxuICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJzZWxlY3RlZENvbE1vYmlsZVwiXG4gICAgICAgICAgICA+PC9Ecm9wZG93blNtYWxsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgRHJvcGRvd25TbWFsbCBmcm9tICcuL2NvbXBvbmVudHMvRHJvcGRvd25TbWFsbC52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtEcm9wZG93blNtYWxsfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYWN0aXZlR3JpZE5vZGU6IG51bGwsXG4gICAgICBzaG93R3JpZFNldHRpbmdzOiBmYWxzZSxcbiAgICAgIGlzUmVhZHk6IGZhbHNlLFxuICAgICAgaGFzR3JpZDogZmFsc2UsXG5cbiAgICAgIGNvbE9wdGlvbnNEZXNrdG9wOiBbXG4gICAgICAgIHtrZXk6ICdjb2wtMScsIHZhbHVlOiAnY29sLTEnfSxcbiAgICAgICAge2tleTogJ2NvbC0yJywgdmFsdWU6ICdjb2wtMid9LFxuICAgICAgICB7a2V5OiAnY29sLTMnLCB2YWx1ZTogJ2NvbC0zJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtNCcsIHZhbHVlOiAnY29sLTQnfSxcbiAgICAgICAge2tleTogJ2NvbC01JywgdmFsdWU6ICdjb2wtNSd9LFxuICAgICAgICB7a2V5OiAnY29sLTYnLCB2YWx1ZTogJ2NvbC02J30sXG4gICAgICAgIHtrZXk6ICdjb2wtNycsIHZhbHVlOiAnY29sLTcnfSxcbiAgICAgICAge2tleTogJ2NvbC04JywgdmFsdWU6ICdjb2wtOCd9LFxuICAgICAgICB7a2V5OiAnY29sLTknLCB2YWx1ZTogJ2NvbC05J30sXG4gICAgICAgIHtrZXk6ICdjb2wtMTAnLCB2YWx1ZTogJ2NvbC0xMCd9LFxuICAgICAgICB7a2V5OiAnY29sLTExJywgdmFsdWU6ICdjb2wtMTEnfSxcbiAgICAgICAge2tleTogJ2NvbC0xMicsIHZhbHVlOiAnY29sLTEyJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtbGctMScsIHZhbHVlOiAnY29sLWxnLTEnfSxcbiAgICAgICAge2tleTogJ2NvbC1sZy0yJywgdmFsdWU6ICdjb2wtbGctMid9LFxuICAgICAgICB7a2V5OiAnY29sLWxnLTMnLCB2YWx1ZTogJ2NvbC1sZy0zJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtbGctNCcsIHZhbHVlOiAnY29sLWxnLTQnfSxcbiAgICAgICAge2tleTogJ2NvbC1sZy01JywgdmFsdWU6ICdjb2wtbGctNSd9LFxuICAgICAgICB7a2V5OiAnY29sLWxnLTYnLCB2YWx1ZTogJ2NvbC1sZy02J30sXG4gICAgICAgIHtrZXk6ICdjb2wtbGctNycsIHZhbHVlOiAnY29sLWxnLTcnfSxcbiAgICAgICAge2tleTogJ2NvbC1sZy04JywgdmFsdWU6ICdjb2wtbGctOCd9LFxuICAgICAgICB7a2V5OiAnY29sLWxnLTknLCB2YWx1ZTogJ2NvbC1sZy05J30sXG4gICAgICAgIHtrZXk6ICdjb2wtbGctMTAnLCB2YWx1ZTogJ2NvbC1sZy0xMCd9LFxuICAgICAgICB7a2V5OiAnY29sLWxnLTExJywgdmFsdWU6ICdjb2wtbGctMTEnfSxcbiAgICAgICAge2tleTogJ2NvbC1sZy0xMicsIHZhbHVlOiAnY29sLWxnLTEyJ30sXG4gICAgICBdLFxuXG4gICAgICBjb2xPcHRpb25zVGFibGV0OiBbXG4gICAgICAgIHtrZXk6ICdjb2wtbWQtMScsIHZhbHVlOiAnY29sLW1kLTEnfSxcbiAgICAgICAge2tleTogJ2NvbC1tZC0yJywgdmFsdWU6ICdjb2wtbWQtMid9LFxuICAgICAgICB7a2V5OiAnY29sLW1kLTMnLCB2YWx1ZTogJ2NvbC1tZC0zJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtbWQtNCcsIHZhbHVlOiAnY29sLW1kLTQnfSxcbiAgICAgICAge2tleTogJ2NvbC1tZC01JywgdmFsdWU6ICdjb2wtbWQtNSd9LFxuICAgICAgICB7a2V5OiAnY29sLW1kLTYnLCB2YWx1ZTogJ2NvbC1tZC02J30sXG4gICAgICAgIHtrZXk6ICdjb2wtbWQtNycsIHZhbHVlOiAnY29sLW1kLTcnfSxcbiAgICAgICAge2tleTogJ2NvbC1tZC04JywgdmFsdWU6ICdjb2wtbWQtOCd9LFxuICAgICAgICB7a2V5OiAnY29sLW1kLTknLCB2YWx1ZTogJ2NvbC1tZC05J30sXG4gICAgICAgIHtrZXk6ICdjb2wtbWQtMTAnLCB2YWx1ZTogJ2NvbC1tZC0xMCd9LFxuICAgICAgICB7a2V5OiAnY29sLW1kLTExJywgdmFsdWU6ICdjb2wtbWQtMTEnfSxcbiAgICAgICAge2tleTogJ2NvbC1tZC0xMicsIHZhbHVlOiAnY29sLW1kLTEyJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtc20tMScsIHZhbHVlOiAnY29sLXNtLTEnfSxcbiAgICAgICAge2tleTogJ2NvbC1zbS0yJywgdmFsdWU6ICdjb2wtc20tMid9LFxuICAgICAgICB7a2V5OiAnY29sLXNtLTMnLCB2YWx1ZTogJ2NvbC1zbS0zJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtc20tNCcsIHZhbHVlOiAnY29sLXNtLTQnfSxcbiAgICAgICAge2tleTogJ2NvbC1zbS01JywgdmFsdWU6ICdjb2wtc20tNSd9LFxuICAgICAgICB7a2V5OiAnY29sLXNtLTYnLCB2YWx1ZTogJ2NvbC1zbS02J30sXG4gICAgICAgIHtrZXk6ICdjb2wtc20tNycsIHZhbHVlOiAnY29sLXNtLTcnfSxcbiAgICAgICAge2tleTogJ2NvbC1zbS04JywgdmFsdWU6ICdjb2wtc20tOCd9LFxuICAgICAgICB7a2V5OiAnY29sLXNtLTknLCB2YWx1ZTogJ2NvbC1zbS05J30sXG4gICAgICAgIHtrZXk6ICdjb2wtc20tMTAnLCB2YWx1ZTogJ2NvbC1zbS0xMCd9LFxuICAgICAgICB7a2V5OiAnY29sLXNtLTExJywgdmFsdWU6ICdjb2wtc20tMTEnfSxcbiAgICAgICAge2tleTogJ2NvbC1zbS0xMicsIHZhbHVlOiAnY29sLXNtLTEyJ30sXG4gICAgICBdLFxuXG4gICAgICBjb2xPcHRpb25zTW9iaWxlOiBbXG4gICAgICAgIHtrZXk6ICdjb2wteHMtMScsIHZhbHVlOiAnY29sLXhzLTEnfSxcbiAgICAgICAge2tleTogJ2NvbC14cy0yJywgdmFsdWU6ICdjb2wteHMtMid9LFxuICAgICAgICB7a2V5OiAnY29sLXhzLTMnLCB2YWx1ZTogJ2NvbC14cy0zJ30sXG4gICAgICAgIHtrZXk6ICdjb2wteHMtNCcsIHZhbHVlOiAnY29sLXhzLTQnfSxcbiAgICAgICAge2tleTogJ2NvbC14cy01JywgdmFsdWU6ICdjb2wteHMtNSd9LFxuICAgICAgICB7a2V5OiAnY29sLXhzLTYnLCB2YWx1ZTogJ2NvbC14cy02J30sXG4gICAgICAgIHtrZXk6ICdjb2wteHMtNycsIHZhbHVlOiAnY29sLXhzLTcnfSxcbiAgICAgICAge2tleTogJ2NvbC14cy04JywgdmFsdWU6ICdjb2wteHMtOCd9LFxuICAgICAgICB7a2V5OiAnY29sLXhzLTknLCB2YWx1ZTogJ2NvbC14cy05J30sXG4gICAgICAgIHtrZXk6ICdjb2wteHMtMTAnLCB2YWx1ZTogJ2NvbC14cy0xMCd9LFxuICAgICAgICB7a2V5OiAnY29sLXhzLTExJywgdmFsdWU6ICdjb2wteHMtMTEnfSxcbiAgICAgICAge2tleTogJ2NvbC14cy0xMicsIHZhbHVlOiAnY29sLXhzLTEyJ30sXG4gICAgICBdLFxuXG4gICAgICBzZWxlY3RlZENvbERlc2t0b3A6ICcnLFxuICAgICAgc2VsZWN0ZWRDb2xUYWJsZXQ6ICcnLFxuICAgICAgc2VsZWN0ZWRDb2xNb2JpbGU6ICcnLFxuICAgIH07XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIHRvZ2dsZUdyaWRTZXR0aW5nczogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5zaG93R3JpZFNldHRpbmdzID0gIXRoaXMuc2hvd0dyaWRTZXR0aW5ncztcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93JywgJ2dyaWQnKTtcbiAgICB9LFxuICAgIHJlc2V0QWxsUHJvcGVydGllczogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5oYXNHcmlkID0gbnVsbDtcbiAgICB9LFxuXG4gICAgcG9wdWxhdGVTdHlsZUVkaXRvcjogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChub2RlICYmIG5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVzZXRBbGxQcm9wZXJ0aWVzKCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGdyaWQgY2xhc3NlcyBpbiB0aGUgYWN0aXZlIG5vZGVcbiAgICAgICAgZm9yIChjb25zdCBncmlkT3B0aW9uIG9mIHRoaXMuY29sT3B0aW9uc0Rlc2t0b3ApIHtcbiAgICAgICAgICBpZiAobm9kZS5jbGFzc0xpc3QuY29udGFpbnMoZ3JpZE9wdGlvbi5rZXkpKSB7XG4gICAgICAgICAgICB0aGlzLmhhc0dyaWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVHcmlkTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAvLyBTZXQgdGhlIHNlbGVjdGVkIGNsYXNzIG5hbWUgZm9yIERlc2t0b3AgYnJlYWtwb2ludFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENvbERlc2t0b3AgPSBncmlkT3B0aW9uLmtleTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGdyaWRPcHRpb24gb2YgdGhpcy5jb2xPcHRpb25zVGFibGV0KSB7XG4gICAgICAgICAgaWYgKG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKGdyaWRPcHRpb24ua2V5KSkge1xuICAgICAgICAgICAgdGhpcy5oYXNHcmlkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlR3JpZE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgLy8gU2V0IHRoZSBzZWxlY3RlZCBjbGFzcyBuYW1lIGZvciBUYWJsZXQgYnJlYWtwb2ludFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENvbFRhYmxldCA9IGdyaWRPcHRpb24ua2V5O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgZ3JpZE9wdGlvbiBvZiB0aGlzLmNvbE9wdGlvbnNNb2JpbGUpIHtcbiAgICAgICAgICBpZiAobm9kZS5jbGFzc0xpc3QuY29udGFpbnMoZ3JpZE9wdGlvbi5rZXkpKSB7XG4gICAgICAgICAgICB0aGlzLmhhc0dyaWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVHcmlkTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAvLyBTZXQgdGhlIHNlbGVjdGVkIGNsYXNzIG5hbWUgZm9yIE1vYmlsZSBicmVha3BvaW50XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkQ29sTW9iaWxlID0gZ3JpZE9wdGlvbi5rZXk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICB9LCAxMDApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBhcHBseUNsYXNzVG9BY3RpdmVHcmlkTm9kZTogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYWN0aXZlR3JpZE5vZGUpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBncmlkIGNsYXNzZXMgZnJvbSB0aGUgbm9kZVxuICAgICAgICBmb3IgKGNvbnN0IGdyaWRPcHRpb24gb2YgdGhpcy5jb2xPcHRpb25zRGVza3RvcCkge1xuICAgICAgICAgIHRoaXMuYWN0aXZlR3JpZE5vZGUuY2xhc3NMaXN0LnJlbW92ZShncmlkT3B0aW9uLmtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBncmlkT3B0aW9uIG9mIHRoaXMuY29sT3B0aW9uc1RhYmxldCkge1xuICAgICAgICAgIHRoaXMuYWN0aXZlR3JpZE5vZGUuY2xhc3NMaXN0LnJlbW92ZShncmlkT3B0aW9uLmtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBncmlkT3B0aW9uIG9mIHRoaXMuY29sT3B0aW9uc01vYmlsZSkge1xuICAgICAgICAgIHRoaXMuYWN0aXZlR3JpZE5vZGUuY2xhc3NMaXN0LnJlbW92ZShncmlkT3B0aW9uLmtleSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBcHBseSB0aGUgc2VsZWN0ZWQgZ3JpZCBjbGFzcyBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgYnJlYWtwb2ludFxuICAgICAgICBjb25zdCBzZWxlY3RlZEdyaWRPcHRpb24gPSBbLi4udGhpcy5jb2xPcHRpb25zRGVza3RvcCwgLi4udGhpcy5jb2xPcHRpb25zVGFibGV0LCAuLi50aGlzLmNvbE9wdGlvbnNNb2JpbGVdLmZpbmQob3B0aW9uID0+IG9wdGlvbi5rZXkgPT09IHZhbCk7XG4gICAgICAgIGlmIChzZWxlY3RlZEdyaWRPcHRpb24pIHtcbiAgICAgICAgICB0aGlzLmFjdGl2ZUdyaWROb2RlLmNsYXNzTGlzdC5hZGQoc2VsZWN0ZWRHcmlkT3B0aW9uLmtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobXcudG9wKCkuYXBwKSB7XG4gICAgICAgICAgbXcudG9wKCkuYXBwLnJlZ2lzdGVyQ2hhbmdlZFN0YXRlKHRoaXMuYWN0aXZlR3JpZE5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICBtb3VudGVkKCkge1xuICAgIG13LnRvcCgpLmFwcC5vbignbXcuZWxlbWVudFN0eWxlRWRpdG9yLnNlbGVjdE5vZGUnLCAoZWxlbWVudCkgPT4ge1xuICAgICAgdGhpcy5wb3B1bGF0ZVN0eWxlRWRpdG9yKGVsZW1lbnQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5lbWl0dGVyLm9uKFwiZWxlbWVudC1zdHlsZS1lZGl0b3Itc2hvd1wiLCBlbGVtZW50U3R5bGVFZGl0b3JTaG93ID0+IHtcbiAgICAgIGlmIChlbGVtZW50U3R5bGVFZGl0b3JTaG93ICE9PSAnZ3JpZCcpIHtcbiAgICAgICAgdGhpcy5zaG93R3JpZFNldHRpbmdzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgd2F0Y2g6IHtcbiAgICBzZWxlY3RlZENvbERlc2t0b3A6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuYXBwbHlDbGFzc1RvQWN0aXZlR3JpZE5vZGUobmV3VmFsdWUpO1xuICAgIH0sXG5cbiAgICBzZWxlY3RlZENvbFRhYmxldDogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5hcHBseUNsYXNzVG9BY3RpdmVHcmlkTm9kZShuZXdWYWx1ZSk7XG4gICAgfSxcblxuICAgIHNlbGVjdGVkQ29sTW9iaWxlOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICB0aGlzLmFwcGx5Q2xhc3NUb0FjdGl2ZUdyaWROb2RlKG5ld1ZhbHVlKTtcbiAgICB9LFxuICB9LFxufTtcbjwvc2NyaXB0PlxuIiwiaW1wb3J0IHsgb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2ssIGNyZWF0ZUVsZW1lbnRWTm9kZSwgcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSwgd2l0aERpcmVjdGl2ZXMsIG5vcm1hbGl6ZUNsYXNzLCBGcmFnbWVudCwgcmVuZGVyTGlzdCwgcmVuZGVyU2xvdCwgbm9ybWFsaXplUHJvcHMsIG1lcmdlUHJvcHMsIHRvRGlzcGxheVN0cmluZywgd2l0aE1vZGlmaWVycywgY3JlYXRlQ29tbWVudFZOb2RlLCB3aXRoS2V5cywgdk1vZGVsVGV4dCwgY3JlYXRlQmxvY2ssIGd1YXJkUmVhY3RpdmVQcm9wcyB9IGZyb20gJ3Z1ZSc7XG5cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgYmFzZWRpciwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7XG5cdCAgcGF0aDogYmFzZWRpcixcblx0ICBleHBvcnRzOiB7fSxcblx0ICByZXF1aXJlOiBmdW5jdGlvbiAocGF0aCwgYmFzZSkge1xuICAgICAgcmV0dXJuIGNvbW1vbmpzUmVxdWlyZShwYXRoLCAoYmFzZSA9PT0gdW5kZWZpbmVkIHx8IGJhc2UgPT09IG51bGwpID8gbW9kdWxlLnBhdGggOiBiYXNlKTtcbiAgICB9XG5cdH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxuZnVuY3Rpb24gY29tbW9uanNSZXF1aXJlICgpIHtcblx0dGhyb3cgbmV3IEVycm9yKCdEeW5hbWljIHJlcXVpcmVzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBieSBAcm9sbHVwL3BsdWdpbi1jb21tb25qcycpO1xufVxuXG52YXIgdkNsaWNrT3V0c2lkZV91bWQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4hZnVuY3Rpb24oZSxuKXttb2R1bGUuZXhwb3J0cz1uKCk7fShjb21tb25qc0dsb2JhbCxmdW5jdGlvbigpe3ZhciBlPVwiX192LWNsaWNrLW91dHNpZGVcIixuPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3csdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yLHI9biYmKFwib250b3VjaHN0YXJ0XCJpbiB3aW5kb3d8fHQmJm5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzPjApP1tcInRvdWNoc3RhcnRcIl06W1wiY2xpY2tcIl0saT1mdW5jdGlvbihlKXt2YXIgbj1lLmV2ZW50LHQ9ZS5oYW5kbGVyOygwLCBlLm1pZGRsZXdhcmUpKG4pJiZ0KG4pO30sYT1mdW5jdGlvbihuLHQpe3ZhciBhPWZ1bmN0aW9uKGUpe3ZhciBuPVwiZnVuY3Rpb25cIj09dHlwZW9mIGU7aWYoIW4mJlwib2JqZWN0XCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcInYtY2xpY2stb3V0c2lkZTogQmluZGluZyB2YWx1ZSBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0XCIpO3JldHVybiB7aGFuZGxlcjpuP2U6ZS5oYW5kbGVyLG1pZGRsZXdhcmU6ZS5taWRkbGV3YXJlfHxmdW5jdGlvbihlKXtyZXR1cm4gZX0sZXZlbnRzOmUuZXZlbnRzfHxyLGlzQWN0aXZlOiEoITE9PT1lLmlzQWN0aXZlKSxkZXRlY3RJZnJhbWU6ISghMT09PWUuZGV0ZWN0SWZyYW1lKSxjYXB0dXJlOkJvb2xlYW4oZS5jYXB0dXJlKX19KHQudmFsdWUpLG89YS5oYW5kbGVyLGQ9YS5taWRkbGV3YXJlLGM9YS5kZXRlY3RJZnJhbWUsdT1hLmNhcHR1cmU7aWYoYS5pc0FjdGl2ZSl7aWYobltlXT1hLmV2ZW50cy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHtldmVudDplLHNyY1RhcmdldDpkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsaGFuZGxlcjpmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIG49ZS5lbCx0PWUuZXZlbnQscj1lLmhhbmRsZXIsYT1lLm1pZGRsZXdhcmUsbz10LnBhdGh8fHQuY29tcG9zZWRQYXRoJiZ0LmNvbXBvc2VkUGF0aCgpOyhvP28uaW5kZXhPZihuKTwwOiFuLmNvbnRhaW5zKHQudGFyZ2V0KSkmJmkoe2V2ZW50OnQsaGFuZGxlcjpyLG1pZGRsZXdhcmU6YX0pO30oe2VsOm4sZXZlbnQ6ZSxoYW5kbGVyOm8sbWlkZGxld2FyZTpkfSl9LGNhcHR1cmU6dX19KSxjKXt2YXIgbD17ZXZlbnQ6XCJibHVyXCIsc3JjVGFyZ2V0OndpbmRvdyxoYW5kbGVyOmZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgbj1lLmVsLHQ9ZS5ldmVudCxyPWUuaGFuZGxlcixhPWUubWlkZGxld2FyZTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtlJiZcIklGUkFNRVwiPT09ZS50YWdOYW1lJiYhbi5jb250YWlucyhlKSYmaSh7ZXZlbnQ6dCxoYW5kbGVyOnIsbWlkZGxld2FyZTphfSk7fSwwKTt9KHtlbDpuLGV2ZW50OmUsaGFuZGxlcjpvLG1pZGRsZXdhcmU6ZH0pfSxjYXB0dXJlOnV9O25bZV09W10uY29uY2F0KG5bZV0sW2xdKTt9bltlXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciByPXQuZXZlbnQsaT10LnNyY1RhcmdldCxhPXQuaGFuZGxlcjtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe25bZV0mJmkuYWRkRXZlbnRMaXN0ZW5lcihyLGEsdSk7fSwwKX0pO319LG89ZnVuY3Rpb24obil7KG5bZV18fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnNyY1RhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGUuZXZlbnQsZS5oYW5kbGVyLGUuY2FwdHVyZSl9KSxkZWxldGUgbltlXTt9LGQ9bj97YmVmb3JlTW91bnQ6YSx1cGRhdGVkOmZ1bmN0aW9uKGUsbil7dmFyIHQ9bi52YWx1ZSxyPW4ub2xkVmFsdWU7SlNPTi5zdHJpbmdpZnkodCkhPT1KU09OLnN0cmluZ2lmeShyKSYmKG8oZSksYShlLHt2YWx1ZTp0fSkpO30sdW5tb3VudGVkOm99Ont9O3JldHVybiB7aW5zdGFsbDpmdW5jdGlvbihlKXtlLmRpcmVjdGl2ZShcImNsaWNrLW91dHNpZGVcIixkKTt9LGRpcmVjdGl2ZTpkfX0pO1xuXG59KTtcblxudmFyIHZDbGlja091dHNpZGUgPSB2Q2xpY2tPdXRzaWRlX3VtZDtcblxuY29uc3QgX2hvaXN0ZWRfMSQxID0ge1xuICBjbGFzczogXCJ2M3RpLWxvYWRlci13cmFwcGVyXCJcbn07XG5cbmNvbnN0IF9ob2lzdGVkXzIkMSA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICBjbGFzczogXCJ2M3RpLWxvYWRlclwiXG59LCBudWxsLCAtMSk7XG5cbmNvbnN0IF9ob2lzdGVkXzMkMSA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIG51bGwsIFwiTG9hZGluZ1wiLCAtMSk7XG5cbmNvbnN0IF9ob2lzdGVkXzQkMSA9IFtfaG9pc3RlZF8yJDEsIF9ob2lzdGVkXzMkMV07XG5mdW5jdGlvbiByZW5kZXIkMShfY3R4LCBfY2FjaGUpIHtcbiAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwgX2hvaXN0ZWRfMSQxLCBfaG9pc3RlZF80JDEpO1xufVxuXG5mdW5jdGlvbiBzdHlsZUluamVjdChjc3MsIHJlZikge1xuICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0ge307XG4gIHZhciBpbnNlcnRBdCA9IHJlZi5pbnNlcnRBdDtcblxuICBpZiAoIWNzcyB8fCB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybjsgfVxuXG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcblxuICBpZiAoaW5zZXJ0QXQgPT09ICd0b3AnKSB7XG4gICAgaWYgKGhlYWQuZmlyc3RDaGlsZCkge1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBjc3NfMjQ4eiQxID0gXCIudjN0aS1sb2FkZXItd3JhcHBlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgY29sb3I6ICMxMTJCM0M7XFxufVxcbi52M3RpLWxvYWRlci13cmFwcGVyIC52M3RpLWxvYWRlciB7XFxuICB3aWR0aDogMThweDtcXG4gIGhlaWdodDogMThweDtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCAjMTEyQjNDO1xcbiAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYW5pbWF0aW9uOiByb3RhdGlvbiAwLjhzIGxpbmVhciBpbmZpbml0ZTtcXG4gIG1hcmdpbi1yaWdodDogOHB4O1xcbn1cXG5Aa2V5ZnJhbWVzIHJvdGF0aW9uIHtcXG4wJSB7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbn1cXG4xMDAlIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG59XFxufVwiO1xuc3R5bGVJbmplY3QoY3NzXzI0OHokMSk7XG5cbmNvbnN0IHNjcmlwdCQxID0ge307XG5zY3JpcHQkMS5yZW5kZXIgPSByZW5kZXIkMTtcbnZhciBMb2FkaW5nID0gc2NyaXB0JDE7XG5cbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6IFwiVnVlM1RhZ3NJbnB1dFwiLFxuICBlbWl0czogWyd1cGRhdGU6bW9kZWxWYWx1ZScsICd1cGRhdGU6dGFncycsICdvbi1saW1pdCcsICdvbi10YWdzLWNoYW5nZWQnLCAnb24tcmVtb3ZlJywgJ29uLWVycm9yJywgJ29uLWZvY3VzJywgJ29uLWJsdXInLCAnb24tc2VsZWN0JywgJ29uLXNlbGVjdC1kdXBsaWNhdGUtdGFnJywgJ29uLW5ldy10YWcnXSxcbiAgcHJvcHM6IHtcbiAgICByZWFkT25seToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH0sXG4gICAgdmFsaWRhdGU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIEZ1bmN0aW9uLCBPYmplY3RdLFxuICAgICAgZGVmYXVsdDogXCJcIlxuICAgIH0sXG4gICAgYWRkVGFnT25LZXlzOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFsxMywgLy8gRW50ZXJcbiAgICAgICAgJywnLCAvLyBDb21tYSAnLCdcbiAgICAgICAgMzIgLy8gU3BhY2VcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHBsYWNlaG9sZGVyOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH0sXG4gICAgdGFnczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICAgIH0sXG4gICAgbG9hZGluZzoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBsaW1pdDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogLTFcbiAgICB9LFxuICAgIGFsbG93RHVwbGljYXRlczoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBhZGRUYWdPbkJsdXI6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgc2VsZWN0SXRlbXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogKCkgPT4gW11cbiAgICB9LFxuICAgIHNlbGVjdDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBkdXBsaWNhdGVTZWxlY3RJdGVtOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgdW5pcXVlU2VsZWN0RmllbGQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdpZCdcbiAgICB9LFxuICAgIGFkZFRhZ09uS2V5c1doZW5TZWxlY3Q6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgaXNTaG93Tm9EYXRhOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0gLy8gbXVsdGlwbGU6IHtcbiAgICAvLyAgIHR5cGU6IEJvb2xlYW4sXG4gICAgLy8gICBkZWZhdWx0OiBmYWxzZVxuICAgIC8vIH0sXG5cbiAgfSxcbiAgY29tcG9uZW50czoge1xuICAgIExvYWRpbmdcbiAgfSxcbiAgZGlyZWN0aXZlczoge1xuICAgIGNsaWNrT3V0c2lkZTogdkNsaWNrT3V0c2lkZS5kaXJlY3RpdmVcbiAgfSxcblxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0lucHV0QWN0aXZlOiBmYWxzZSxcbiAgICAgIGlzRXJyb3I6IGZhbHNlLFxuICAgICAgbmV3VGFnOiAnJyxcbiAgICAgIGlubmVyVGFnczogW10sXG4gICAgICBtdWx0aXBsZTogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGNvbXB1dGVkOiB7XG4gICAgaXNMaW1pdCgpIHtcbiAgICAgIGNvbnN0IGlzTGltaXQgPSB0aGlzLmxpbWl0ID4gMCAmJiBOdW1iZXIodGhpcy5saW1pdCkgPT09IHRoaXMuaW5uZXJUYWdzLmxlbmd0aDtcblxuICAgICAgaWYgKGlzTGltaXQpIHtcbiAgICAgICAgdGhpcy4kZW1pdCgnb24tbGltaXQnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzTGltaXQ7XG4gICAgfSxcblxuICAgIHNlbGVjdGVkSXRlbXNJZHMoKSB7XG4gICAgICBpZiAoIXRoaXMuZHVwbGljYXRlU2VsZWN0SXRlbSkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWdzLm1hcChvID0+IG9bdGhpcy51bmlxdWVTZWxlY3RGaWVsZF0gfHwgJycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgZXJyb3IoKSB7XG4gICAgICB0aGlzLmlzRXJyb3IgPSB0aGlzLmVycm9yO1xuICAgIH0sXG5cbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICBpbW1lZGlhdGU6IHRydWUsXG5cbiAgICAgIGhhbmRsZXIodmFsdWUpIHtcbiAgICAgICAgdGhpcy5uZXdUYWcgPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgIH0sXG4gICAgdGFnczoge1xuICAgICAgZGVlcDogdHJ1ZSxcbiAgICAgIGltbWVkaWF0ZTogdHJ1ZSxcblxuICAgICAgaGFuZGxlcih0YWdzKSB7XG4gICAgICAgIHRoaXMuaW5uZXJUYWdzID0gWy4uLnRhZ3NdO1xuICAgICAgfVxuXG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgaXNTaG90KG5hbWUpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuJHNsb3RzW25hbWVdO1xuICAgIH0sXG5cbiAgICBtYWtlSXROb3JtYWwoZXZlbnQpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgIHRoaXMuJHJlZnMuaW5wdXRUYWcuY2xhc3NOYW1lID0gJ3YzdGktbmV3LXRhZyc7XG4gICAgICB0aGlzLiRyZWZzLmlucHV0VGFnLnN0eWxlLnRleHREZWNvcmF0aW9uID0gXCJub25lXCI7XG4gICAgfSxcblxuICAgIHJlc2V0RGF0YSgpIHtcbiAgICAgIHRoaXMuaW5uZXJUYWdzID0gW107XG4gICAgfSxcblxuICAgIHJlc2V0SW5wdXRWYWx1ZSgpIHtcbiAgICAgIHRoaXMubmV3VGFnID0gJyc7XG4gICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsICcnKTtcbiAgICB9LFxuXG4gICAgc2V0UG9zaXRpb24oKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXMuJHJlZnMuaW5wdXRCb3g7XG4gICAgICBjb25zdCBtZW51ID0gdGhpcy4kcmVmcy5jb250ZXh0TWVudTtcblxuICAgICAgaWYgKGVsICYmIG1lbnUpIHtcbiAgICAgICAgbWVudS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiOyAvLyBtZW51LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcblxuICAgICAgICBjb25zdCBFTEVNRU5UX0hFSUdIVCA9IGVsLmNsaWVudEhlaWdodCB8fCAzMjtcbiAgICAgICAgY29uc3QgQk9SREVSX0hFSUdIVCA9IDM7XG4gICAgICAgIG1lbnUuc3R5bGUudG9wID0gRUxFTUVOVF9IRUlHSFQgKyBCT1JERVJfSEVJR0hUICsgXCJweFwiO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBjbG9zZUNvbnRleHRNZW51KCkge1xuICAgICAgaWYgKHRoaXMuJHJlZnMuY29udGV4dE1lbnUpIHtcbiAgICAgICAgdGhpcy4kcmVmcy5jb250ZXh0TWVudS5zdHlsZSA9IHtcbiAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaGFuZGxlU2VsZWN0KHRhZ0RhdGEpIHtcbiAgICAgIGlmICh0aGlzLmlzU2hvd0NoZWNrbWFyayh0YWdEYXRhKSkge1xuICAgICAgICBjb25zdCB0YWdzID0gdGhpcy50YWdzLmZpbHRlcihvID0+IHRhZ0RhdGEuaWQgIT09IG8uaWQpO1xuICAgICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6dGFncycsIHRhZ3MpO1xuICAgICAgICB0aGlzLiRlbWl0KCdvbi1zZWxlY3QtZHVwbGljYXRlLXRhZycsIHRhZ0RhdGEpO1xuICAgICAgICB0aGlzLnJlc2V0SW5wdXRWYWx1ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZW1pdCgnb24tc2VsZWN0JywgdGFnRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgdGhpcy5jbG9zZUNvbnRleHRNZW51KCk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgaXNTaG93Q2hlY2ttYXJrKHRhZykge1xuICAgICAgaWYgKCF0aGlzLmR1cGxpY2F0ZVNlbGVjdEl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRJdGVtc0lkcy5pbmNsdWRlcyh0YWdbdGhpcy51bmlxdWVTZWxlY3RGaWVsZF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGZvY3VzTmV3VGFnKCkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0ICYmICF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucmVhZE9ubHkgfHwgIXRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoXCIudjN0aS1uZXctdGFnXCIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWwucXVlcnlTZWxlY3RvcihcIi52M3RpLW5ldy10YWdcIikuZm9jdXMoKTtcbiAgICB9LFxuXG4gICAgaGFuZGxlSW5wdXRGb2N1cyhldmVudCkge1xuICAgICAgdGhpcy5pc0lucHV0QWN0aXZlID0gdHJ1ZTtcbiAgICAgIHRoaXMuJGVtaXQoJ29uLWZvY3VzJywgZXZlbnQpO1xuICAgIH0sXG5cbiAgICBoYW5kbGVJbnB1dEJsdXIoZSkge1xuICAgICAgdGhpcy5pc0lucHV0QWN0aXZlID0gZmFsc2U7XG4gICAgICB0aGlzLmFkZE5ldyhlKTtcbiAgICAgIHRoaXMuJGVtaXQoJ29uLWJsdXInLCBlKTtcbiAgICB9LFxuXG4gICAgYWRkTmV3KGUpIHtcbiAgICAgIGlmICh0aGlzLnNlbGVjdCAmJiAhdGhpcy5hZGRUYWdPbktleXNXaGVuU2VsZWN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5U2hvdWxkQWRkVGFnID0gZSA/IHRoaXMuYWRkVGFnT25LZXlzLmluZGV4T2YoZS5rZXlDb2RlKSAhPT0gLTEgfHwgdGhpcy5hZGRUYWdPbktleXMuaW5kZXhPZihlLmtleSkgIT09IC0xIDogdHJ1ZTtcbiAgICAgIGNvbnN0IHR5cGVJc05vdEJsdXIgPSBlICYmIGUudHlwZSAhPT0gXCJibHVyXCI7XG5cbiAgICAgIGlmICgha2V5U2hvdWxkQWRkVGFnICYmICh0eXBlSXNOb3RCbHVyIHx8ICF0aGlzLmFkZFRhZ09uQmx1cikgfHwgdGhpcy5pc0xpbWl0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubmV3VGFnICYmICh0aGlzLmFsbG93RHVwbGljYXRlcyB8fCB0aGlzLmlubmVyVGFncy5pbmRleE9mKHRoaXMubmV3VGFnKSA9PT0gLTEpICYmIHRoaXMudmFsaWRhdGVJZk5lZWRlZCh0aGlzLm5ld1RhZykpIHtcbiAgICAgICAgdGhpcy5pbm5lclRhZ3MucHVzaCh0aGlzLm5ld1RhZyk7XG5cbiAgICAgICAgaWYgKHRoaXMuYWRkVGFnT25LZXlzV2hlblNlbGVjdCkge1xuICAgICAgICAgIHRoaXMuJGVtaXQoJ29uLW5ldy10YWcnLCB0aGlzLm5ld1RhZyk7XG4gICAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbkNvbnRleHRNZW51KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlc2V0SW5wdXRWYWx1ZSgpO1xuICAgICAgICB0aGlzLnRhZ0NoYW5nZSgpO1xuICAgICAgICBlICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLnZhbGlkYXRlSWZOZWVkZWQodGhpcy5uZXdUYWcpKSB7XG4gICAgICAgICAgdGhpcy5tYWtlSXRFcnJvcih0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm1ha2VJdEVycm9yKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGVQb3NpdGlvbkNvbnRleHRNZW51KCkge1xuICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICB0aGlzLnNldFBvc2l0aW9uKCk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgbWFrZUl0RXJyb3IoaXNEdXBsaWNhdGVkT3JNYXhMZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLm5ld1RhZyAhPT0gJycpIHtcbiAgICAgICAgdGhpcy4kcmVmcy5pbnB1dFRhZy5jbGFzc05hbWUgPSAndjN0aS1uZXctdGFnIHYzdGktbmV3LXRhZy0tZXJyb3InO1xuICAgICAgICB0aGlzLiRyZWZzLmlucHV0VGFnLnN0eWxlLnRleHREZWNvcmF0aW9uID0gXCJ1bmRlcmxpbmVcIjtcbiAgICAgICAgdGhpcy4kZW1pdCgnb24tZXJyb3InLCBpc0R1cGxpY2F0ZWRPck1heExlbmd0aCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHZhbGlkYXRlSWZOZWVkZWQodGFnVmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLnZhbGlkYXRlID09PSBcIlwiIHx8IHRoaXMudmFsaWRhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnZhbGlkYXRlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGUodGFnVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlTGFzdFRhZygpIHtcbiAgICAgIGlmICh0aGlzLm5ld1RhZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5uZXJUYWdzLnBvcCgpO1xuICAgICAgdGhpcy50YWdDaGFuZ2UoKTtcbiAgICAgIHRoaXMudXBkYXRlUG9zaXRpb25Db250ZXh0TWVudSgpO1xuICAgIH0sXG5cbiAgICByZW1vdmUoaW5kZXgpIHtcbiAgICAgIHRoaXMuaW5uZXJUYWdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB0aGlzLnRhZ0NoYW5nZSgpO1xuICAgICAgdGhpcy4kZW1pdChcIm9uLXJlbW92ZVwiLCBpbmRleCk7XG4gICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uQ29udGV4dE1lbnUoKTtcbiAgICB9LFxuXG4gICAgdGFnQ2hhbmdlKCkge1xuICAgICAgdGhpcy4kZW1pdChcIm9uLXRhZ3MtY2hhbmdlZFwiLCB0aGlzLmlubmVyVGFncyk7XG4gICAgfVxuXG4gIH1cbn07XG5cbmNvbnN0IF9ob2lzdGVkXzEgPSB7XG4gIGtleTogMSxcbiAgY2xhc3M6IFwidjN0aS10YWctY29udGVudFwiXG59O1xuY29uc3QgX2hvaXN0ZWRfMiA9IFtcIm9uQ2xpY2tcIl07XG5jb25zdCBfaG9pc3RlZF8zID0gW1wicGxhY2Vob2xkZXJcIiwgXCJkaXNhYmxlZFwiXTtcbmNvbnN0IF9ob2lzdGVkXzQgPSB7XG4gIGtleTogMCxcbiAgY2xhc3M6IFwidjN0aS1sb2FkaW5nXCJcbn07XG5jb25zdCBfaG9pc3RlZF81ID0ge1xuICBrZXk6IDEsXG4gIGNsYXNzOiBcInYzdGktbm8tZGF0YVwiXG59O1xuY29uc3QgX2hvaXN0ZWRfNiA9IHtcbiAga2V5OiAxXG59O1xuY29uc3QgX2hvaXN0ZWRfNyA9IHtcbiAga2V5OiAyXG59O1xuY29uc3QgX2hvaXN0ZWRfOCA9IFtcIm9uQ2xpY2tcIl07XG5jb25zdCBfaG9pc3RlZF85ID0ge1xuICBjbGFzczogXCJ2M3RpLWNvbnRleHQtaXRlbS0tbGFiZWxcIlxufTtcbmNvbnN0IF9ob2lzdGVkXzEwID0ge1xuICBrZXk6IDAsXG4gIGNsYXNzOiBcInYzdGktaWNvbi1zZWxlY3RlZC10YWdcIixcbiAgd2lkdGg6IFwiNDRcIixcbiAgaGVpZ2h0OiBcIjQ0XCIsXG4gIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCIsXG4gIFwic3Ryb2tlLXdpZHRoXCI6IFwiMS41XCIsXG4gIGZpbGw6IFwibm9uZVwiLFxuICBcInN0cm9rZS1saW5lY2FwXCI6IFwicm91bmRcIixcbiAgXCJzdHJva2UtbGluZWpvaW5cIjogXCJyb3VuZFwiXG59O1xuXG5jb25zdCBfaG9pc3RlZF8xMSA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50Vk5vZGUoXCJwYXRoXCIsIHtcbiAgc3Ryb2tlOiBcIm5vbmVcIixcbiAgZDogXCJNMCAwaDI0djI0SDB6XCJcbn0sIG51bGwsIC0xKTtcblxuY29uc3QgX2hvaXN0ZWRfMTIgPSAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudFZOb2RlKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTUgMTJsNSA1bDEwIC0xMFwiXG59LCBudWxsLCAtMSk7XG5cbmNvbnN0IF9ob2lzdGVkXzEzID0gW19ob2lzdGVkXzExLCBfaG9pc3RlZF8xMl07XG5mdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7XG4gIGNvbnN0IF9jb21wb25lbnRfTG9hZGluZyA9IHJlc29sdmVDb21wb25lbnQoXCJMb2FkaW5nXCIpO1xuXG4gIGNvbnN0IF9kaXJlY3RpdmVfY2xpY2tfb3V0c2lkZSA9IHJlc29sdmVEaXJlY3RpdmUoXCJjbGljay1vdXRzaWRlXCIpO1xuXG4gIHJldHVybiB3aXRoRGlyZWN0aXZlcygob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgb25DbGljazogX2NhY2hlWzZdIHx8IChfY2FjaGVbNl0gPSAkZXZlbnQgPT4gJG9wdGlvbnMuZm9jdXNOZXdUYWcoKSksXG4gICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFt7XG4gICAgICAndjN0aS0tZm9jdXMnOiAkZGF0YS5pc0lucHV0QWN0aXZlLFxuICAgICAgJ3YzdGktLWVycm9yJzogJGRhdGEuaXNFcnJvclxuICAgIH0sIFwidjN0aVwiXSlcbiAgfSwgW2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtcInYzdGktY29udGVudFwiLCB7XG4gICAgICAndjN0aS1jb250ZW50LS1zZWxlY3QnOiAkcHJvcHMuc2VsZWN0XG4gICAgfV0pLFxuICAgIHJlZjogXCJpbnB1dEJveFwiXG4gIH0sIFsob3BlbkJsb2NrKHRydWUpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIG51bGwsIHJlbmRlckxpc3QoJGRhdGEuaW5uZXJUYWdzLCAodGFnLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwic3BhblwiLCB7XG4gICAgICBrZXk6IGluZGV4LFxuICAgICAgY2xhc3M6IFwidjN0aS10YWdcIlxuICAgIH0sIFskb3B0aW9ucy5pc1Nob3QoJ2l0ZW0nKSA/IHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiaXRlbVwiLCBub3JtYWxpemVQcm9wcyhtZXJnZVByb3BzKHtcbiAgICAgIGtleTogMFxuICAgIH0sIHtcbiAgICAgIG5hbWU6IHRhZyxcbiAgICAgIGluZGV4LFxuICAgICAgdGFnXG4gICAgfSkpKSA6IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwic3BhblwiLCBfaG9pc3RlZF8xLCB0b0Rpc3BsYXlTdHJpbmcodGFnKSwgMSkpLCAhJHByb3BzLnJlYWRPbmx5ID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJhXCIsIHtcbiAgICAgIGtleTogMixcbiAgICAgIG9uQ2xpY2s6IHdpdGhNb2RpZmllcnMoJGV2ZW50ID0+ICRvcHRpb25zLnJlbW92ZShpbmRleCksIFtcInByZXZlbnRcIiwgXCJzdG9wXCJdKSxcbiAgICAgIGNsYXNzOiBcInYzdGktcmVtb3ZlLXRhZ1wiXG4gICAgfSwgbnVsbCwgOCwgX2hvaXN0ZWRfMikpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwiXCIsIHRydWUpXSk7XG4gIH0pLCAxMjgpKSwgd2l0aERpcmVjdGl2ZXMoY3JlYXRlRWxlbWVudFZOb2RlKFwiaW5wdXRcIiwge1xuICAgIHJlZjogXCJpbnB1dFRhZ1wiLFxuICAgIHBsYWNlaG9sZGVyOiAkcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gJGV2ZW50ID0+ICRkYXRhLm5ld1RhZyA9ICRldmVudCksXG4gICAgb25LZXlkb3duOiBbX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSB3aXRoS2V5cyh3aXRoTW9kaWZpZXJzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAkb3B0aW9ucy5yZW1vdmVMYXN0VGFnICYmICRvcHRpb25zLnJlbW92ZUxhc3RUYWcoLi4uYXJndW1lbnRzKTtcbiAgICB9LCBbXCJzdG9wXCJdKSwgW1wiZGVsZXRlXCJdKSksIF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICRvcHRpb25zLmFkZE5ldyAmJiAkb3B0aW9ucy5hZGROZXcoLi4uYXJndW1lbnRzKTtcbiAgICB9KV0sXG4gICAgb25CbHVyOiBfY2FjaGVbM10gfHwgKF9jYWNoZVszXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAkb3B0aW9ucy5oYW5kbGVJbnB1dEJsdXIgJiYgJG9wdGlvbnMuaGFuZGxlSW5wdXRCbHVyKC4uLmFyZ3VtZW50cyk7XG4gICAgfSksXG4gICAgb25Gb2N1czogX2NhY2hlWzRdIHx8IChfY2FjaGVbNF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJG9wdGlvbnMuaGFuZGxlSW5wdXRGb2N1cyAmJiAkb3B0aW9ucy5oYW5kbGVJbnB1dEZvY3VzKC4uLmFyZ3VtZW50cyk7XG4gICAgfSksXG4gICAgb25JbnB1dDogX2NhY2hlWzVdIHx8IChfY2FjaGVbNV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJG9wdGlvbnMubWFrZUl0Tm9ybWFsICYmICRvcHRpb25zLm1ha2VJdE5vcm1hbCguLi5hcmd1bWVudHMpO1xuICAgIH0pLFxuICAgIGNsYXNzOiBcInYzdGktbmV3LXRhZ1wiLFxuICAgIGRpc2FibGVkOiAkcHJvcHMucmVhZE9ubHlcbiAgfSwgbnVsbCwgNDAsIF9ob2lzdGVkXzMpLCBbW3ZNb2RlbFRleHQsICRkYXRhLm5ld1RhZ11dKV0sIDIpLCAkcHJvcHMuc2VsZWN0ID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJzZWN0aW9uXCIsIHtcbiAgICBrZXk6IDAsXG4gICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtcInYzdGktY29udGV4dC1tZW51XCIsIHtcbiAgICAgICd2M3RpLWNvbnRleHQtbWVudS1uby1kYXRhJzogISRwcm9wcy5pc1Nob3dOb0RhdGEgJiYgJHByb3BzLnNlbGVjdEl0ZW1zLmxlbmd0aCA9PT0gMFxuICAgIH1dKSxcbiAgICByZWY6IFwiY29udGV4dE1lbnVcIlxuICB9LCBbJHByb3BzLmxvYWRpbmcgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCBfaG9pc3RlZF80LCBbJG9wdGlvbnMuaXNTaG90KCdsb2FkaW5nJykgPyByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIiwge1xuICAgIGtleTogMFxuICB9KSA6IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soX2NvbXBvbmVudF9Mb2FkaW5nLCB7XG4gICAga2V5OiAxXG4gIH0pKV0pKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcIlwiLCB0cnVlKSwgISRwcm9wcy5sb2FkaW5nICYmICRwcm9wcy5zZWxlY3RJdGVtcy5sZW5ndGggPT09IDAgJiYgJHByb3BzLmlzU2hvd05vRGF0YSA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIF9ob2lzdGVkXzUsIFskb3B0aW9ucy5pc1Nob3QoJ25vLWRhdGEnKSA/IHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwibm8tZGF0YVwiLCB7XG4gICAga2V5OiAwXG4gIH0pIDogKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJzcGFuXCIsIF9ob2lzdGVkXzYsIFwiIE5vIGRhdGEgXCIpKV0pKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcIlwiLCB0cnVlKSwgISRwcm9wcy5sb2FkaW5nICYmICRwcm9wcy5zZWxlY3RJdGVtcy5sZW5ndGggPiAwID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwgX2hvaXN0ZWRfNywgWyhvcGVuQmxvY2sodHJ1ZSksIGNyZWF0ZUVsZW1lbnRCbG9jayhGcmFnbWVudCwgbnVsbCwgcmVuZGVyTGlzdCgkcHJvcHMuc2VsZWN0SXRlbXMsIChpdGVtLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIHtcbiAgICAgIGtleTogaW5kZXgsXG4gICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1widjN0aS1jb250ZXh0LWl0ZW1cIiwge1xuICAgICAgICAndjN0aS1jb250ZXh0LWl0ZW0tLWFjdGl2ZSc6ICRvcHRpb25zLmlzU2hvd0NoZWNrbWFyayhpdGVtKVxuICAgICAgfV0pLFxuICAgICAgb25DbGljazogd2l0aE1vZGlmaWVycygkZXZlbnQgPT4gJG9wdGlvbnMuaGFuZGxlU2VsZWN0KGl0ZW0sIGluZGV4KSwgW1wic3RvcFwiXSlcbiAgICB9LCBbY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIF9ob2lzdGVkXzksIFtyZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcInNlbGVjdC1pdGVtXCIsIG5vcm1hbGl6ZVByb3BzKGd1YXJkUmVhY3RpdmVQcm9wcyhpdGVtKSkpXSksICRvcHRpb25zLmlzU2hvd0NoZWNrbWFyayhpdGVtKSA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwic3ZnXCIsIF9ob2lzdGVkXzEwLCBfaG9pc3RlZF8xMykpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwiXCIsIHRydWUpXSwgMTAsIF9ob2lzdGVkXzgpO1xuICB9KSwgMTI4KSldKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJcIiwgdHJ1ZSldLCAyKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJcIiwgdHJ1ZSldLCAyKSksIFtbX2RpcmVjdGl2ZV9jbGlja19vdXRzaWRlLCAkb3B0aW9ucy5jbG9zZUNvbnRleHRNZW51XV0pO1xufVxuXG52YXIgY3NzXzI0OHogPSBcIi52M3RpIHtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIG1pbi1oZWlnaHQ6IDMycHg7XFxuICBsaW5lLWhlaWdodDogMS40O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICM5Y2EzYWY7XFxuICBjdXJzb3I6IHRleHQ7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4udjN0aSAudjN0aS1pY29uLXNlbGVjdGVkLXRhZyB7XFxuICBzdHJva2U6ICMxOWJlNmI7XFxuICB3aWR0aDogMXJlbTtcXG4gIGhlaWdodDogMXJlbTtcXG4gIG1hcmdpbi1sZWZ0OiA0cHg7XFxufVxcbi52M3RpLS1mb2N1cyB7XFxuICBvdXRsaW5lOiAwO1xcbiAgYm9yZGVyLWNvbG9yOiAjMDAwMDAwO1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMXB4ICMwMDAwMDA7XFxufVxcbi52M3RpLS1lcnJvciB7XFxuICBib3JkZXItY29sb3I6ICNGNTZDNkM7XFxufVxcbi52M3RpIC52M3RpLW5vLWRhdGEge1xcbiAgY29sb3I6ICNkOGQ4ZDg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiA0cHggN3B4O1xcbn1cXG4udjN0aSAudjN0aS1sb2FkaW5nIHtcXG4gIHBhZGRpbmc6IDRweCA3cHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi52M3RpIC52M3RpLWNvbnRleHQtbWVudSB7XFxuICBtYXgtaGVpZ2h0OiAxNTBweDtcXG4gIG1pbi13aWR0aDogMTUwcHg7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogNXB4IDA7XFxuICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xcbiAgei1pbmRleDogMTA1MDtcXG4gIGNvbG9yOiAjNDc1NTY5O1xcbiAgYm94LXNoYWRvdzogMCAzcHggOHB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICBib3JkZXItcmFkaXVzOiAwIDAgNnB4IDZweDtcXG59XFxuLnYzdGkgLnYzdGktY29udGV4dC1tZW51IC52M3RpLWNvbnRleHQtaXRlbSB7XFxuICBwYWRkaW5nOiA0cHggN3B4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbi52M3RpIC52M3RpLWNvbnRleHQtbWVudSAudjN0aS1jb250ZXh0LWl0ZW06aG92ZXIge1xcbiAgYmFja2dyb3VuZDogI2U4ZThlODtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLnYzdGkgLnYzdGktY29udGV4dC1tZW51IC52M3RpLWNvbnRleHQtaXRlbS0tbGFiZWwge1xcbiAgZmxleDogMTtcXG4gIG1pbi13aWR0aDogMXB4O1xcbn1cXG4udjN0aSAudjN0aS1jb250ZXh0LW1lbnUgLnYzdGktY29udGV4dC1pdGVtLS1hY3RpdmUge1xcbiAgY29sb3I6ICMzMTdDQUY7XFxufVxcbi52M3RpIC52M3RpLWNvbnRleHQtbWVudS1uby1kYXRhIHtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbi52M3RpIC52M3RpLWNvbnRlbnQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbn1cXG4udjN0aSAudjN0aS1jb250ZW50LS1zZWxlY3Qge1xcbiAgcGFkZGluZy1yaWdodDogMzBweDtcXG59XFxuLnYzdGkgLnYzdGktdGFnIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgbWFyZ2luOiAzcHg7XFxuICBwYWRkaW5nOiAwIDVweDtcXG4gIGJhY2tncm91bmQ6ICMzMTdDQUY7XFxuICBjb2xvcjogI2ZmZmZmZjtcXG4gIGhlaWdodDogMjdweDtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBtYXgtd2lkdGg6IGNhbGMoMTAwJSAtIDE2cHgpO1xcbn1cXG4udjN0aSAudjN0aS10YWcgLnYzdGktdGFnLWNvbnRlbnQge1xcbiAgZmxleDogMTtcXG4gIG1pbi13aWR0aDogMXB4O1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG59XFxuLnYzdGkgLnYzdGktdGFnIC52M3RpLXJlbW92ZS10YWcge1xcbiAgY29sb3I6ICNmZmZmZmY7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZTtcXG4gIG9wYWNpdHk6IDAuNTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHBhZGRpbmc6IDAgNXB4IDAgN3B4O1xcbn1cXG4udjN0aSAudjN0aS10YWcgLnYzdGktcmVtb3ZlLXRhZzo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJ4XFxcIjtcXG59XFxuLnYzdGkgLnYzdGktdGFnIC52M3RpLXJlbW92ZS10YWc6aG92ZXIge1xcbiAgb3BhY2l0eTogMTtcXG59XFxuLnYzdGkgLnYzdGktbmV3LXRhZyB7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlcjogMDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBtYXJnaW46IDNweDtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBwYWRkaW5nOiAwIDRweDtcXG4gIGZsZXg6IDE7XFxuICBtaW4td2lkdGg6IDYwcHg7XFxuICBoZWlnaHQ6IDI3cHg7XFxufVxcbi52M3RpIC52M3RpLW5ldy10YWctLWVycm9yIHtcXG4gIGNvbG9yOiAjRjU2QzZDO1xcbn1cIjtcbnN0eWxlSW5qZWN0KGNzc18yNDh6KTtcblxuc2NyaXB0LnJlbmRlciA9IHJlbmRlcjtcblxuLy8gSW1wb3J0IHZ1ZSBjb21wb25lbnRcbi8vIElJRkUgaW5qZWN0cyBpbnN0YWxsIGZ1bmN0aW9uIGludG8gY29tcG9uZW50LCBhbGxvd2luZyBjb21wb25lbnRcbi8vIHRvIGJlIHJlZ2lzdGVyZWQgdmlhIFZ1ZS51c2UoKSBhcyB3ZWxsIGFzIFZ1ZS5jb21wb25lbnQoKSxcblxudmFyIGVudHJ5X2VzbSA9IC8qI19fUFVSRV9fKi8oKCkgPT4ge1xuICAvLyBHZXQgY29tcG9uZW50IGluc3RhbmNlXG4gIGNvbnN0IGluc3RhbGxhYmxlID0gc2NyaXB0OyAvLyBBdHRhY2ggaW5zdGFsbCBmdW5jdGlvbiBleGVjdXRlZCBieSBWdWUudXNlKClcblxuICBpbnN0YWxsYWJsZS5pbnN0YWxsID0gYXBwID0+IHtcbiAgICBhcHAuY29tcG9uZW50KCdWdWUzVGFnc0lucHV0JywgaW5zdGFsbGFibGUpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YWxsYWJsZTtcbn0pKCk7IC8vIEl0J3MgcG9zc2libGUgdG8gZXhwb3NlIG5hbWVkIGV4cG9ydHMgd2hlbiB3cml0aW5nIGNvbXBvbmVudHMgdGhhdCBjYW5cbi8vIGFsc28gYmUgdXNlZCBhcyBkaXJlY3RpdmVzLCBldGMuIC0gZWcuIGltcG9ydCB7IFJvbGx1cERlbW9EaXJlY3RpdmUgfSBmcm9tICdyb2xsdXAtZGVtbyc7XG4vLyBleHBvcnQgY29uc3QgUm9sbHVwRGVtb0RpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcblxuZXhwb3J0IHsgZW50cnlfZXNtIGFzIGRlZmF1bHQgfTtcbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdj5cblxuICAgICAgPGRpdiBjbGFzcz1cImQtZmxleFwiPlxuICAgICAgICAgIDxzdmcgZmlsbD1cImN1cnJlbnRDb2xvclwiIGhlaWdodD1cIjI0XCIgd2lkdGg9XCIyNFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB2ZXJzaW9uPVwiMS4xXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDI0IDI0O1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+XG4gICAgICAgICAgICAgICAgPHBhdGggZD1cIk0xMi45LDNsMiwwLjRMMTEuMSwyMWwtMi0wLjRMMTIuOSwzIE0xOS42LDEyTDE2LDguNFY1LjZsNi40LDYuNEwxNiwxOC40di0yLjhMMTkuNiwxMiBNMS42LDEyTDgsNS42djIuOEw0LjQsMTJMOCwxNS42ICB2Mi44TDEuNiwxMnpcIj48L3BhdGg+XG4gICAgICAgICAgPC9zdmc+XG5cbiAgICAgICAgICA8YiBjbGFzcz1cIm13LWFkbWluLWFjdGlvbi1saW5rcyBtcy0zXCIgOmNsYXNzPVwieydhY3RpdmUnOiBzaG93Q2xhc3NlcyB9XCIgdi1vbjpjbGljaz1cInRvZ2dsZUNsYXNzZXNcIj5cbiAgICAgICAgICAgICAgQ2xhc3Nlc1xuICAgICAgICAgIDwvYj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IHYtaWY9XCJzaG93Q2xhc3Nlc1wiPlxuXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiB2LW1vZGVsPVwiY2xhc3Nlc1RvS2VlcElucHV0XCIgQGlucHV0PVwidXBkYXRlQ2xhc3Nlc1RvS2VlcFwiLz5cblxuICAgICAgICAgICAgICA8dnVlMy10YWdzLWlucHV0IDp0YWdzPVwiY2xhc3Nlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciBjbGFzc2VzIHNlcGFyYXRlZCBieSBjb21tYXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp2YWxpZGF0ZT1cImN1c3RvbVZhbGlkYXRlQ2xhc3Nlc1wiXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAb24tdGFncy1jaGFuZ2VkPVwiaGFuZGxlQ2hhbmdlQ2xhc3Nlc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG5cblxuICAgICA8L2Rpdj5cblxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgVnVlM1RhZ3NJbnB1dCBmcm9tICd2dWUzLXRhZ3MtaW5wdXQnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBWdWUzVGFnc0lucHV0XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICBzaG93Q2xhc3NlczogZmFsc2UsXG4gICAgICBhY3RpdmVOb2RlOiBudWxsLFxuICAgICAgaXNSZWFkeTogZmFsc2UsXG4gICAgICBjbGFzc2VzVG9LZWVwSW5wdXQ6ICcnLFxuICAgICAgY2xhc3Nlc1RvS2VlcDogW1xuICAgICAgICAnZWxlbWVudCcsXG4gICAgICAgICduby10eXBpbmcnLFxuICAgICAgICAnc2FmZS1tb2RlJyxcbiAgICAgICAgJ2VkaXQnLFxuICAgICAgICAnbm9kcm9wJyxcbiAgICAgICAgJ2FsbG93LWRyb3AnLFxuICAgICAgICAnbW9kdWxlJyxcbiAgICAgICAgJ21vZHVsZS1vdmVybGFwJyxcbiAgICAgICAgJ21vZHVsZS1vdmVybGFwLW9uLWhvdmVyJyxcbiAgICAgICAgJ2FsbG93LXR5cGluZycsXG4gICAgICAgICdhbGxvdy1lZGl0JyxcbiAgICAgICAgJ2ltZy1hcy1iYWNrZ3JvdW5kJyxcbiAgICAgICAgJ2ltYWdlLWhvbGRlcicsXG4gICAgICBdLFxuICAgICAgY2xhc3NlczogW11cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgICB0b2dnbGVDbGFzc2VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5zaG93Q2xhc3NlcyA9ICF0aGlzLnNob3dDbGFzc2VzO1xuICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93JywgJ2NsYXNzZXMnKTtcbiAgICAgIH0sXG4gICAgY3VzdG9tVmFsaWRhdGVDbGFzc2VzKHZhbHVlKSB7XG4gICAgICAvLyBVc2UgcmVnZXggdG8gdmFsaWRhdGUgaW5wdXQgY2xhc3Nlc1xuICAgICAgY29uc3QgcmVnZXggPSAvXlthLXpBLVpcXHMsXSokLztcbiAgICAgIGNvbnN0IHZhbGlkQ2xhc3NlcyA9IHZhbHVlXG4gICAgICAgICAgLnNwbGl0KCcsJylcbiAgICAgICAgICAubWFwKGNsYXNzTmFtZSA9PiBjbGFzc05hbWUudHJpbSgpKVxuICAgICAgICAgIC5maWx0ZXIoY2xhc3NOYW1lID0+IHJlZ2V4LnRlc3QoY2xhc3NOYW1lKSAmJiB0aGlzLmNsYXNzZXNUb0tlZXAuaW5jbHVkZXMoY2xhc3NOYW1lKSk7XG4gICAgICByZXR1cm4gdmFsaWRDbGFzc2VzO1xuICAgIH0sXG4gICAgaGFuZGxlQ2hhbmdlQ2xhc3NlcyhjbGFzc2VzKSB7XG4gICAgICB0aGlzLmNsYXNzZXMgPSBjbGFzc2VzO1xuICAgIH0sXG4gICAgdXBkYXRlQ2xhc3Nlc1RvS2VlcCgpIHtcbiAgICAgIHRoaXMuY2xhc3Nlc1RvS2VlcCA9IHRoaXMuY2xhc3Nlc1RvS2VlcElucHV0LnNwbGl0KCcsJykubWFwKGNsYXNzTmFtZSA9PiBjbGFzc05hbWUudHJpbSgpKTtcbiAgICB9LFxuICAgIGFwcGx5Q2xhc3NlcygpIHtcbiAgICAgIGlmICghdGhpcy5pc1JlYWR5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmFjdGl2ZU5vZGUpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBjbGFzc2VzIGZyb20gdGhlIGFjdGl2ZSBub2RlXG4gICAgICAgIHRoaXMuYWN0aXZlTm9kZS5jbGFzc05hbWUgPSAnJztcblxuICAgICAgICAvLyBBZGQgdGhlIG5ldyBjbGFzc2VzIHRvIHRoZSBhY3RpdmUgbm9kZSBmcm9tIGNsYXNzZXMgYXJyYXlcbiAgICAgICAgdGhpcy5jbGFzc2VzLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZU5vZGUuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWRkIHRoZSBuZXcgY2xhc3NlcyBmcm9tIGNsYXNzZXNUb0tlZXBJbnB1dFxuICAgICAgICBpZiAodGhpcy5jbGFzc2VzVG9LZWVwSW5wdXQpIHtcbiAgICAgICAgICBjb25zdCBhZGRpdGlvbmFsQ2xhc3NlcyA9IHRoaXMuY2xhc3Nlc1RvS2VlcElucHV0LnNwbGl0KCcsJylcbiAgICAgICAgICAgICAgLm1hcChjbGFzc05hbWUgPT4gY2xhc3NOYW1lLnRyaW0oKSlcbiAgICAgICAgICAgICAgLmZpbHRlcihjbGFzc05hbWUgPT4gISFjbGFzc05hbWUpO1xuXG4gICAgICAgICAgYWRkaXRpb25hbENsYXNzZXMuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZU5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgdGhpcy5hY3RpdmVOb2RlLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKG13LnRvcCgpLmFwcCl7XG4gICAgICAgICAgbXcudG9wKCkuYXBwLnJlZ2lzdGVyQ2hhbmdlZFN0YXRlKHRoaXMuYWN0aXZlTm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcG9wdWxhdGVTdHlsZUVkaXRvcihlbGVtZW50KSB7XG4gICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFjdGl2ZU5vZGUgPSBlbGVtZW50O1xuXG4gICAgICAgIC8vIFBvcHVsYXRlIHRoZSBjbGFzc2VzIGFycmF5IHdpdGggdGhlIGV4aXN0aW5nIGNsYXNzZXMgb2YgdGhlIGFjdGl2ZSBub2RlXG4gICAgICAgIHRoaXMuY2xhc3NlcyA9IHRoaXMuYWN0aXZlTm9kZS5jbGFzc05hbWVcbiAgICAgICAgICAgIC5zcGxpdCgnICcpXG4gICAgICAgICAgICAuZmlsdGVyKGNsYXNzTmFtZSA9PiAhIWNsYXNzTmFtZSlcbiAgICAgICAgICAgIC5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgICAgICAgICAgLy8gRmlsdGVyIG91dCBjbGFzc2VzIHRoYXQgc3RhcnQgd2l0aCBcImFuaW1hdGVfX1wiXG4gICAgICAgICAgICAgIGlmIChjbGFzc05hbWUuc3RhcnRzV2l0aCgnYW5pbWF0ZV9fJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLmNsYXNzZXNUb0tlZXAuaW5jbHVkZXMoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGFjdGl2ZU5vZGUgaGFzIGFueSBjbGFzc2VzIHRvIGluY2x1ZGUgaW4gY2xhc3Nlc1RvS2VlcElucHV0XG4gICAgICAgIGNvbnN0IGFjdGl2ZU5vZGVDbGFzc2VzID0gdGhpcy5hY3RpdmVOb2RlLmNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICAgICAgICBjb25zdCBjbGFzc2VzVG9JbmNsdWRlID0gdGhpcy5jbGFzc2VzVG9LZWVwLmZpbHRlcihjbGFzc05hbWUgPT5cbiAgICAgICAgICAgIGFjdGl2ZU5vZGVDbGFzc2VzLmluY2x1ZGVzKGNsYXNzTmFtZSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jbGFzc2VzVG9LZWVwSW5wdXQgPSBjbGFzc2VzVG9JbmNsdWRlLmpvaW4oJywgJyk7XG5cblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICB9LCAxMDApO1xuICAgICAgfVxuICAgIH1cblxuICB9LFxuICBtb3VudGVkKCkge1xuICAgICAgdGhpcy5lbWl0dGVyLm9uKFwiZWxlbWVudC1zdHlsZS1lZGl0b3Itc2hvd1wiLCBlbGVtZW50U3R5bGVFZGl0b3JTaG93ID0+IHtcbiAgICAgICAgICBpZiAoZWxlbWVudFN0eWxlRWRpdG9yU2hvdyAhPT0gJ2NsYXNzZXMnKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2hvd0NsYXNzZXMgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgICBtdy50b3AoKS5hcHAub24oJ213LmVsZW1lbnRTdHlsZUVkaXRvci5zZWxlY3ROb2RlJywgKGVsZW1lbnQpID0+IHtcbiAgICAgIHRoaXMucG9wdWxhdGVTdHlsZUVkaXRvcihlbGVtZW50KTtcbiAgICB9KTtcbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBjbGFzc2VzKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgLy8gQXBwbHkgdGhlIGNsYXNzZXMgd2hlbmV2ZXIgdGhlIGNsYXNzZXMgYXJyYXkgY2hhbmdlc1xuICAgICAgdGhpcy5hcHBseUNsYXNzZXMoKTtcbiAgICB9LFxuICB9LFxufTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cImQtZmxleFwiPlxuXG4gICAgICAgIDxzdmcgZmlsbD1cImN1cnJlbnRDb2xvclwiIGhlaWdodD1cIjI0XCIgd2lkdGg9XCIyNFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB2ZXJzaW9uPVwiMS4xXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDI0IDI0O1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+XG4gICAgICAgICAgICA8cGF0aCBkPVwiTTE5LDE5aDJ2MmgtMlYxOSBNMTksMTdoMnYtMmgtMlYxNyBNMywxM2gydi0ySDNWMTMgTTMsMTdoMnYtMkgzVjE3IE0zLDloMlY3SDNWOSBNMyw1aDJWM0gzVjUgTTcsNWgyVjNIN1Y1IE0xNSwyMWgydi0yICBoLTJWMjEgTTExLDIxaDJ2LTJoLTJWMjEgTTE1LDIxaDJ2LTJoLTJWMjEgTTcsMjFoMnYtMkg3VjIxIE0zLDIxaDJ2LTJIM1YyMSBNMjEsOGMwLTIuOC0yLjItNS01LTVoLTV2Mmg1YzEuNywwLDMsMS4zLDMsM3Y1aDJWOHpcIj48L3BhdGg+XG4gICAgICAgIDwvc3ZnPlxuXG4gICAgICAgIDxiIGNsYXNzPVwibXctYWRtaW4tYWN0aW9uLWxpbmtzIG1zLTNcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IHNob3dSb3VuZGVkQ29ybmVycyB9XCIgdi1vbjpjbGljaz1cInRvZ2dsZVJvdW5kZWRDb3JuZXJzXCI+XG4gICAgICAgICAgICBSb3VuZGVkIGNvcm5lcnNcbiAgICAgICAgPC9iPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiB2LWlmPVwic2hvd1JvdW5kZWRDb3JuZXJzXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW4gZ2FwLTNcIj5cblxuICAgICAgICAgICAgPEJvcmRlclJhZGl1cyB2LW1vZGVsPVwiYm9yZGVyUmFkaXVzXCI+PC9Cb3JkZXJSYWRpdXM+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBCb3JkZXJSYWRpdXMgZnJvbSBcIi4vY29tcG9uZW50cy9Cb3JkZXJSYWRpdXMudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7Qm9yZGVyUmFkaXVzfSxcbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3Nob3dSb3VuZGVkQ29ybmVycyc6IGZhbHNlLFxuICAgICAgICAgICAgJ2FjdGl2ZU5vZGUnOiBudWxsLFxuICAgICAgICAgICAgJ2lzUmVhZHknOiBmYWxzZSxcbiAgICAgICAgICAgICdib3JkZXJSYWRpdXMnOiB7XG4gICAgICAgICAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJycsXG4gICAgICAgICAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICcnLFxuICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6ICcnLFxuICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAnJyxcbiAgICAgICAgICAgIH0sXG5cblxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICB0b2dnbGVSb3VuZGVkQ29ybmVyczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5zaG93Um91bmRlZENvcm5lcnMgPSAhdGhpcy5zaG93Um91bmRlZENvcm5lcnM7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZWxlbWVudC1zdHlsZS1lZGl0b3Itc2hvdycsICdyb3VuZGVkQ29ybmVycycpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlc2V0QWxsUHJvcGVydGllczogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB0aGlzLmJvcmRlclJhZGl1cyA9IHtcbiAgICAgICAgICAgICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiAnJyxcbiAgICAgICAgICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJycsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogJycsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6ICcnLFxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgcG9wdWxhdGVTdHlsZUVkaXRvcjogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlICYmIG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBjc3MgPSBtdy5DU1NQYXJzZXIobm9kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldEFsbFByb3BlcnRpZXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZU5vZGUgPSBub2RlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZUNzc0JvcmRlclJhZGl1cyhjc3MpO1xuXG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHBvcHVsYXRlQ3NzQm9yZGVyUmFkaXVzOiBmdW5jdGlvbiAoY3NzKSB7XG4gICAgICAgICAgICBpZiAoIWNzcyB8fCAhY3NzLmdldCkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGJvcmRlclJhZGl1cyA9IGNzcy5nZXQucmFkaXVzKHRydWUpO1xuXG4gICAgICAgICAgICB0aGlzLmJvcmRlclRvcExlZnRSYWRpdXMgPSBib3JkZXJSYWRpdXMudGw7XG4gICAgICAgICAgICB0aGlzLmJvcmRlclRvcFJpZ2h0UmFkaXVzID0gYm9yZGVyUmFkaXVzLnRyO1xuICAgICAgICAgICAgdGhpcy5ib3JkZXJCb3R0b21SaWdodFJhZGl1cyA9IGJvcmRlclJhZGl1cy5icjtcbiAgICAgICAgICAgIHRoaXMuYm9yZGVyQm90dG9tTGVmdFJhZGl1cyA9IGJvcmRlclJhZGl1cy5ibDtcblxuICAgICAgICAgICAgdGhpcy5ib3JkZXJSYWRpdXMgPSB7XG4gICAgICAgICAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLnRsLFxuICAgICAgICAgICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBib3JkZXJSYWRpdXMudHIsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLmJsLFxuICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBib3JkZXJSYWRpdXMuYnIsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZTogZnVuY3Rpb24gKHByb3AsIHZhbCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZU5vZGUpIHtcbiAgICAgICAgICAgICAgICBtdy50b3AoKS5hcHAuZGlzcGF0Y2goJ213LmVsZW1lbnRTdHlsZUVkaXRvci5hcHBseUNzc1Byb3BlcnR5VG9Ob2RlJywge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiB0aGlzLmFjdGl2ZU5vZGUsXG4gICAgICAgICAgICAgICAgICAgIHByb3A6IHByb3AsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogdmFsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICB9LFxuICAgIG1vdW50ZWQoKSB7XG5cbiAgICAgICAgdGhpcy5lbWl0dGVyLm9uKFwiZWxlbWVudC1zdHlsZS1lZGl0b3Itc2hvd1wiLCBlbGVtZW50U3R5bGVFZGl0b3JTaG93ID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50U3R5bGVFZGl0b3JTaG93ICE9PSAncm91bmRlZENvcm5lcnMnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93Um91bmRlZENvcm5lcnMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbXcudG9wKCkuYXBwLm9uKCdtdy5lbGVtZW50U3R5bGVFZGl0b3Iuc2VsZWN0Tm9kZScsIChlbGVtZW50KSA9PiB7XG5cbiAgICAgICAgICAgIHRoaXMucG9wdWxhdGVTdHlsZUVkaXRvcihlbGVtZW50KVxuXG4gICAgICAgIH0pO1xuXG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgICBib3JkZXJSYWRpdXM6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcblxuXG4gICAgICAgICAgICB2YXIgYm9yZGVyUmFkaXVzVmFsdWUgPSAnJztcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZS5ib3JkZXJUb3BMZWZ0UmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzVmFsdWUgKz0gbmV3VmFsdWUuYm9yZGVyVG9wTGVmdFJhZGl1cyArICdweCAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSAnMHB4ICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUuYm9yZGVyVG9wUmlnaHRSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSBuZXdWYWx1ZS5ib3JkZXJUb3BSaWdodFJhZGl1cyArICdweCAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSAnMHB4ICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUuYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSBuZXdWYWx1ZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1cyArICdweCAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSAnMHB4ICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUuYm9yZGVyQm90dG9tTGVmdFJhZGl1cykge1xuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1c1ZhbHVlICs9IG5ld1ZhbHVlLmJvcmRlckJvdHRvbUxlZnRSYWRpdXMgKyAncHggJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzVmFsdWUgKz0gJzBweCAnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JvcmRlci1yYWRpdXMnLCBib3JkZXJSYWRpdXNWYWx1ZSk7XG5cblxuICAgICAgICB9LFxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG5cblxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGZsZXgtY29sdW1uXCI+XG4gICAgPGRpdiBjbGFzcz1cIm1iLTRcIiB2LXNob3c9XCJzaG93RWxlbWVudFNlbGVjdG9yXCI+XG4gICAgICA8RWxlbWVudFN0eWxlRWRpdG9yRWxlbWVudFNlbGVjdG9yPjwvRWxlbWVudFN0eWxlRWRpdG9yRWxlbWVudFNlbGVjdG9yPlxuICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwibWItNFwiIHYtc2hvdz1cInNob3dCYWNrZ3JvdW5kXCI+XG4gICAgICAgICAgPEVsZW1lbnRTdHlsZUVkaXRvckJhY2tncm91bmQ+PC9FbGVtZW50U3R5bGVFZGl0b3JCYWNrZ3JvdW5kPlxuICAgICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cIm1iLTRcIiB2LXNob3c9XCJzaG93VHlwb2dyYXBoeVwiPlxuICAgICAgPEVsZW1lbnRTdHlsZUVkaXRvclR5cG9ncmFwaHk+PC9FbGVtZW50U3R5bGVFZGl0b3JUeXBvZ3JhcGh5PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJtYi00XCIgdi1zaG93PVwic2hvd1NwYWNpbmdcIj5cbiAgICAgIDxFbGVtZW50U3R5bGVFZGl0b3JTcGFjaW5nPjwvRWxlbWVudFN0eWxlRWRpdG9yU3BhY2luZz5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgdi1zaG93PVwic2hvd0NvbnRhaW5lclwiPlxuICAgICAgPEVsZW1lbnRTdHlsZUVkaXRvckNvbnRhaW5lcj48L0VsZW1lbnRTdHlsZUVkaXRvckNvbnRhaW5lcj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgdi1zaG93PVwic2hvd0dyaWRcIj5cbiAgICAgIDxFbGVtZW50U3R5bGVFZGl0b3JHcmlkPjwvRWxlbWVudFN0eWxlRWRpdG9yR3JpZD5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJtYi00XCIgdi1zaG93PVwic2hvd0JvcmRlclwiPlxuICAgICAgPEVsZW1lbnRTdHlsZUVkaXRvckJvcmRlcj48L0VsZW1lbnRTdHlsZUVkaXRvckJvcmRlcj5cbiAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz1cIm1iLTRcIiB2LXNob3c9XCJzaG93Um91bmRlZENvcm5lcnNcIj5cbiAgICAgIDxFbGVtZW50U3R5bGVFZGl0b3JSb3VuZGVkQ29ybmVycz48L0VsZW1lbnRTdHlsZUVkaXRvclJvdW5kZWRDb3JuZXJzPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiB2LXNob3c9XCJzaG93QW5pbWF0aW9uc1wiPlxuICAgICAgPEVsZW1lbnRTdHlsZUVkaXRvckFuaW1hdGlvbnM+PC9FbGVtZW50U3R5bGVFZGl0b3JBbmltYXRpb25zPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cIm1iLTRcIiB2LXNob3c9XCJzaG93Q2xhc3NBcHBsaWVyXCI+XG4gICAgICA8RWxlbWVudFN0eWxlRWRpdG9yQ2xhc3NBcHBsaWVyPjwvRWxlbWVudFN0eWxlRWRpdG9yQ2xhc3NBcHBsaWVyPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cbjxzdHlsZSBzcmM9XCIuL0VsZW1lbnRTdHlsZUVkaXRvci5jc3NcIj48L3N0eWxlPlxuXG48c2NyaXB0PlxuaW1wb3J0IEVsZW1lbnRTdHlsZUVkaXRvclR5cG9ncmFwaHkgZnJvbSAnLi9FbGVtZW50U3R5bGVFZGl0b3JUeXBvZ3JhcGh5LnZ1ZSc7XG5pbXBvcnQgRWxlbWVudFN0eWxlRWRpdG9yU3BhY2luZyBmcm9tICcuL0VsZW1lbnRTdHlsZUVkaXRvclNwYWNpbmcudnVlJztcbmltcG9ydCBFbGVtZW50U3R5bGVFZGl0b3JCYWNrZ3JvdW5kIGZyb20gJy4vRWxlbWVudFN0eWxlRWRpdG9yQmFja2dyb3VuZC52dWUnO1xuaW1wb3J0IEVsZW1lbnRTdHlsZUVkaXRvckJvcmRlciBmcm9tICcuL0VsZW1lbnRTdHlsZUVkaXRvckJvcmRlci52dWUnO1xuaW1wb3J0IEVsZW1lbnRTdHlsZUVkaXRvckVsZW1lbnRTZWxlY3RvciBmcm9tICcuL0VsZW1lbnRTdHlsZUVkaXRvckVsZW1lbnRTZWxlY3Rvci52dWUnO1xuaW1wb3J0IEVsZW1lbnRTdHlsZUVkaXRvckNvbnRhaW5lciBmcm9tICcuL0VsZW1lbnRTdHlsZUVkaXRvckNvbnRhaW5lci52dWUnO1xuaW1wb3J0IEVsZW1lbnRTdHlsZUVkaXRvckFuaW1hdGlvbnMgZnJvbSAnLi9FbGVtZW50U3R5bGVFZGl0b3JBbmltYXRpb25zLnZ1ZSc7XG5pbXBvcnQgRWxlbWVudFN0eWxlRWRpdG9yR3JpZCBmcm9tICcuL0VsZW1lbnRTdHlsZUVkaXRvckdyaWQudnVlJztcbmltcG9ydCBFbGVtZW50U3R5bGVFZGl0b3JDbGFzc0FwcGxpZXIgZnJvbSAnLi9FbGVtZW50U3R5bGVFZGl0b3JDbGFzc0FwcGxpZXIudnVlJztcbmltcG9ydCBFbGVtZW50U3R5bGVFZGl0b3JSb3VuZGVkQ29ybmVycyBmcm9tIFwiLi9FbGVtZW50U3R5bGVFZGl0b3JSb3VuZGVkQ29ybmVycy52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgICBFbGVtZW50U3R5bGVFZGl0b3JCYWNrZ3JvdW5kLFxuICAgICAgRWxlbWVudFN0eWxlRWRpdG9yUm91bmRlZENvcm5lcnMsXG4gICAgRWxlbWVudFN0eWxlRWRpdG9yRWxlbWVudFNlbGVjdG9yLFxuICAgIEVsZW1lbnRTdHlsZUVkaXRvclR5cG9ncmFwaHksXG4gICAgRWxlbWVudFN0eWxlRWRpdG9yU3BhY2luZyxcbiAgICBFbGVtZW50U3R5bGVFZGl0b3JCb3JkZXIsXG4gICAgRWxlbWVudFN0eWxlRWRpdG9yQ29udGFpbmVyLFxuICAgIEVsZW1lbnRTdHlsZUVkaXRvckdyaWQsXG4gICAgRWxlbWVudFN0eWxlRWRpdG9yQW5pbWF0aW9ucyxcbiAgICBFbGVtZW50U3R5bGVFZGl0b3JDbGFzc0FwcGxpZXIsXG4gIH0sXG5cbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2hvd0VsZW1lbnRTZWxlY3RvcjogdHJ1ZSxcbiAgICAgICAgc2hvd0JhY2tncm91bmQ6IHRydWUsXG4gICAgICAgIHNob3dUeXBvZ3JhcGh5OiB0cnVlLFxuICAgICAgICBzaG93U3BhY2luZzogdHJ1ZSxcbiAgICAgICAgc2hvd0JvcmRlcjogdHJ1ZSxcbiAgICAgICAgc2hvd0NvbnRhaW5lcjogdHJ1ZSxcbiAgICAgICAgc2hvd0dyaWQ6IHRydWUsXG4gICAgICAgIHNob3dBbmltYXRpb25zOiB0cnVlLFxuICAgICAgICBzaG93Q2xhc3NBcHBsaWVyOiB0cnVlLFxuICAgICAgICBzaG93Um91bmRlZENvcm5lcnM6IHRydWUsXG4gICAgfVxuICB9LFxuXG4gIG1ldGhvZHM6IHt9LFxuICBtb3VudGVkKCkge1xuXG4gICAgbXcudG9wKCkuYXBwLm9uKCdjc3NFZGl0b3JTZXR0aW5ncycsIChzZXR0aW5ncykgPT4ge1xuXG4gICAgICBpZiAoc2V0dGluZ3MuZmllbGRTZXR0aW5ncy5jb21wb25lbnRzKSB7XG5cbiAgICAgICAgdGhpcy5zaG93QmFja2dyb3VuZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNob3dUeXBvZ3JhcGh5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hvd1NwYWNpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zaG93Qm9yZGVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hvd0VsZW1lbnRTZWxlY3RvciA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNob3dDb250YWluZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zaG93QW5pbWF0aW9ucyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNob3dDbGFzc0FwcGxpZXIgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChzZXR0aW5ncy5maWVsZFNldHRpbmdzLmNvbXBvbmVudHMuaW5jbHVkZXMoJ2JhY2tncm91bmQnKSkge1xuICAgICAgICAgICAgICB0aGlzLnNob3dCYWNrZ3JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIGlmIChzZXR0aW5ncy5maWVsZFNldHRpbmdzLmNvbXBvbmVudHMuaW5jbHVkZXMoJ2VsZW1lbnRTZWxlY3RvcicpKSB7XG4gICAgICAgICAgdGhpcy5zaG93RWxlbWVudFNlbGVjdG9yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0dGluZ3MuZmllbGRTZXR0aW5ncy5jb21wb25lbnRzLmluY2x1ZGVzKCd0eXBvZ3JhcGh5JykpIHtcbiAgICAgICAgICB0aGlzLnNob3dUeXBvZ3JhcGh5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0dGluZ3MuZmllbGRTZXR0aW5ncy5jb21wb25lbnRzLmluY2x1ZGVzKCdzcGFjaW5nJykpIHtcbiAgICAgICAgICB0aGlzLnNob3dTcGFjaW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXR0aW5ncy5maWVsZFNldHRpbmdzLmNvbXBvbmVudHMuaW5jbHVkZXMoJ2JvcmRlcicpKSB7XG4gICAgICAgICAgdGhpcy5zaG93Qm9yZGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0dGluZ3MuZmllbGRTZXR0aW5ncy5jb21wb25lbnRzLmluY2x1ZGVzKCdjb250YWluZXInKSkge1xuICAgICAgICAgIHRoaXMuc2hvd0NvbnRhaW5lciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldHRpbmdzLmZpZWxkU2V0dGluZ3MuY29tcG9uZW50cy5pbmNsdWRlcygnZ3JpZCcpKSB7XG4gICAgICAgICAgdGhpcy5zaG93R3JpZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2V0dGluZ3MuZmllbGRTZXR0aW5ncy5jb21wb25lbnRzLmluY2x1ZGVzKCdhbmltYXRpb25zJykpIHtcbiAgICAgICAgICB0aGlzLnNob3dBbmltYXRpb25zID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXR0aW5ncy5maWVsZFNldHRpbmdzLmNvbXBvbmVudHMuaW5jbHVkZXMoJ3JvdW5kZWRDb3JuZXJzJykpIHtcbiAgICAgICAgICB0aGlzLnNob3dSb3VuZGVkQ29ybmVycyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2V0dGluZ3MuZmllbGRTZXR0aW5ncy5jb21wb25lbnRzLmluY2x1ZGVzKCdjbGFzc2VzJykpIHtcbiAgICAgICAgICB0aGlzLnNob3dDbGFzc0FwcGxpZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfSxcblxuXG59XG48L3NjcmlwdD5cblxuXG4iLCJleHBvcnQgY29uc3QgSU5fQlJPV1NFUiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuZXhwb3J0IGNvbnN0IFNVUFBPUlRTX0lOVEVSU0VDVElPTiA9IElOX0JST1dTRVIgJiYgJ0ludGVyc2VjdGlvbk9ic2VydmVyJyBpbiB3aW5kb3c7XG5leHBvcnQgY29uc3QgU1VQUE9SVFNfVE9VQ0ggPSBJTl9CUk9XU0VSICYmICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgd2luZG93Lm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDApO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFscy5tanMubWFwIiwiZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkSW5pdFNwZWMob2JqLCBwcml2YXRlTWFwLCB2YWx1ZSkgeyBfY2hlY2tQcml2YXRlUmVkZWNsYXJhdGlvbihvYmosIHByaXZhdGVNYXApOyBwcml2YXRlTWFwLnNldChvYmosIHZhbHVlKTsgfVxuZnVuY3Rpb24gX2NoZWNrUHJpdmF0ZVJlZGVjbGFyYXRpb24ob2JqLCBwcml2YXRlQ29sbGVjdGlvbikgeyBpZiAocHJpdmF0ZUNvbGxlY3Rpb24uaGFzKG9iaikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBpbml0aWFsaXplIHRoZSBzYW1lIHByaXZhdGUgZWxlbWVudHMgdHdpY2Ugb24gYW4gb2JqZWN0XCIpOyB9IH1cbmZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHsgdmFyIGRlc2NyaXB0b3IgPSBfY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yKHJlY2VpdmVyLCBwcml2YXRlTWFwLCBcInNldFwiKTsgX2NsYXNzQXBwbHlEZXNjcmlwdG9yU2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yLCB2YWx1ZSk7IHJldHVybiB2YWx1ZTsgfVxuZnVuY3Rpb24gX2NsYXNzQXBwbHlEZXNjcmlwdG9yU2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yLCB2YWx1ZSkgeyBpZiAoZGVzY3JpcHRvci5zZXQpIHsgZGVzY3JpcHRvci5zZXQuY2FsbChyZWNlaXZlciwgdmFsdWUpOyB9IGVsc2UgeyBpZiAoIWRlc2NyaXB0b3Iud3JpdGFibGUpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcmVhZCBvbmx5IHByaXZhdGUgZmllbGRcIik7IH0gZGVzY3JpcHRvci52YWx1ZSA9IHZhbHVlOyB9IH1cbmZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkgeyB2YXIgZGVzY3JpcHRvciA9IF9jbGFzc0V4dHJhY3RGaWVsZERlc2NyaXB0b3IocmVjZWl2ZXIsIHByaXZhdGVNYXAsIFwiZ2V0XCIpOyByZXR1cm4gX2NsYXNzQXBwbHlEZXNjcmlwdG9yR2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yKTsgfVxuZnVuY3Rpb24gX2NsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvcihyZWNlaXZlciwgcHJpdmF0ZU1hcCwgYWN0aW9uKSB7IGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gXCIgKyBhY3Rpb24gKyBcIiBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTsgfSByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpOyB9XG5mdW5jdGlvbiBfY2xhc3NBcHBseURlc2NyaXB0b3JHZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IpIHsgaWYgKGRlc2NyaXB0b3IuZ2V0KSB7IHJldHVybiBkZXNjcmlwdG9yLmdldC5jYWxsKHJlY2VpdmVyKTsgfSByZXR1cm4gZGVzY3JpcHRvci52YWx1ZTsgfVxuLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgY29tcHV0ZWQsIEZyYWdtZW50LCByZWFjdGl2ZSwgdG9SZWZzLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBJTl9CUk9XU0VSIH0gZnJvbSBcIi4vZ2xvYmFscy5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBnZXROZXN0ZWRWYWx1ZShvYmosIHBhdGgsIGZhbGxiYWNrKSB7XG4gIGNvbnN0IGxhc3QgPSBwYXRoLmxlbmd0aCAtIDE7XG4gIGlmIChsYXN0IDwgMCkgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkID8gZmFsbGJhY2sgOiBvYmo7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGFzdDsgaSsrKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgfVxuICAgIG9iaiA9IG9ialtwYXRoW2ldXTtcbiAgfVxuICBpZiAob2JqID09IG51bGwpIHJldHVybiBmYWxsYmFjaztcbiAgcmV0dXJuIG9ialtwYXRoW2xhc3RdXSA9PT0gdW5kZWZpbmVkID8gZmFsbGJhY2sgOiBvYmpbcGF0aFtsYXN0XV07XG59XG5leHBvcnQgZnVuY3Rpb24gZGVlcEVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuICBpZiAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUgJiYgYS5nZXRUaW1lKCkgIT09IGIuZ2V0VGltZSgpKSB7XG4gICAgLy8gSWYgdGhlIHZhbHVlcyBhcmUgRGF0ZSwgY29tcGFyZSB0aGVtIGFzIHRpbWVzdGFtcHNcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGEgIT09IE9iamVjdChhKSB8fCBiICE9PSBPYmplY3QoYikpIHtcbiAgICAvLyBJZiB0aGUgdmFsdWVzIGFyZW4ndCBvYmplY3RzLCB0aGV5IHdlcmUgYWxyZWFkeSBjaGVja2VkIGZvciBlcXVhbGl0eVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBwcm9wcyA9IE9iamVjdC5rZXlzKGEpO1xuICBpZiAocHJvcHMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHtcbiAgICAvLyBEaWZmZXJlbnQgbnVtYmVyIG9mIHByb3BzLCBkb24ndCBib3RoZXIgdG8gY2hlY2tcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHByb3BzLmV2ZXJ5KHAgPT4gZGVlcEVxdWFsKGFbcF0sIGJbcF0pKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPYmplY3RWYWx1ZUJ5UGF0aChvYmosIHBhdGgsIGZhbGxiYWNrKSB7XG4gIC8vIGNyZWRpdDogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82NDkxNDYzL2FjY2Vzc2luZy1uZXN0ZWQtamF2YXNjcmlwdC1vYmplY3RzLXdpdGgtc3RyaW5nLWtleSNjb21tZW50NTUyNzg0MTNfNjQ5MTYyMVxuICBpZiAob2JqID09IG51bGwgfHwgIXBhdGggfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSByZXR1cm4gZmFsbGJhY2s7XG4gIGlmIChvYmpbcGF0aF0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIG9ialtwYXRoXTtcbiAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFxbKFxcdyspXFxdL2csICcuJDEnKTsgLy8gY29udmVydCBpbmRleGVzIHRvIHByb3BlcnRpZXNcbiAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXlxcLi8sICcnKTsgLy8gc3RyaXAgYSBsZWFkaW5nIGRvdFxuICByZXR1cm4gZ2V0TmVzdGVkVmFsdWUob2JqLCBwYXRoLnNwbGl0KCcuJyksIGZhbGxiYWNrKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm9wZXJ0eUZyb21JdGVtKGl0ZW0sIHByb3BlcnR5LCBmYWxsYmFjaykge1xuICBpZiAocHJvcGVydHkgPT09IHRydWUpIHJldHVybiBpdGVtID09PSB1bmRlZmluZWQgPyBmYWxsYmFjayA6IGl0ZW07XG4gIGlmIChwcm9wZXJ0eSA9PSBudWxsIHx8IHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gZmFsbGJhY2s7XG4gIGlmIChpdGVtICE9PSBPYmplY3QoaXRlbSkpIHtcbiAgICBpZiAodHlwZW9mIHByb3BlcnR5ICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsbGJhY2s7XG4gICAgY29uc3QgdmFsdWUgPSBwcm9wZXJ0eShpdGVtLCBmYWxsYmFjayk7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyBmYWxsYmFjayA6IHZhbHVlO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdzdHJpbmcnKSByZXR1cm4gZ2V0T2JqZWN0VmFsdWVCeVBhdGgoaXRlbSwgcHJvcGVydHksIGZhbGxiYWNrKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcGVydHkpKSByZXR1cm4gZ2V0TmVzdGVkVmFsdWUoaXRlbSwgcHJvcGVydHksIGZhbGxiYWNrKTtcbiAgaWYgKHR5cGVvZiBwcm9wZXJ0eSAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbGxiYWNrO1xuICBjb25zdCB2YWx1ZSA9IHByb3BlcnR5KGl0ZW0sIGZhbGxiYWNrKTtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyBmYWxsYmFjayA6IHZhbHVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGxlbmd0aCkge1xuICBsZXQgc3RhcnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIHJldHVybiBBcnJheS5mcm9tKHtcbiAgICBsZW5ndGhcbiAgfSwgKHYsIGspID0+IHN0YXJ0ICsgayk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0WkluZGV4KGVsKSB7XG4gIGlmICghZWwgfHwgZWwubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSByZXR1cm4gMDtcbiAgY29uc3QgaW5kZXggPSArd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUoJ3otaW5kZXgnKTtcbiAgaWYgKCFpbmRleCkgcmV0dXJuIGdldFpJbmRleChlbC5wYXJlbnROb2RlKTtcbiAgcmV0dXJuIGluZGV4O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb1VuaXQoc3RyKSB7XG4gIGxldCB1bml0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAncHgnO1xuICBpZiAoc3RyID09IG51bGwgfHwgc3RyID09PSAnJykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoaXNOYU4oK3N0cikpIHtcbiAgICByZXR1cm4gU3RyaW5nKHN0cik7XG4gIH0gZWxzZSBpZiAoIWlzRmluaXRlKCtzdHIpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYCR7TnVtYmVyKHN0cil9JHt1bml0fWA7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShvYmopO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlZkVsZW1lbnQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgJyRlbCcgaW4gb2JqID8gb2JqLiRlbCA6IG9iajtcbn1cblxuLy8gS2V5Ym9hcmRFdmVudC5rZXlDb2RlIGFsaWFzZXNcbmV4cG9ydCBjb25zdCBrZXlDb2RlcyA9IE9iamVjdC5mcmVlemUoe1xuICBlbnRlcjogMTMsXG4gIHRhYjogOSxcbiAgZGVsZXRlOiA0NixcbiAgZXNjOiAyNyxcbiAgc3BhY2U6IDMyLFxuICB1cDogMzgsXG4gIGRvd246IDQwLFxuICBsZWZ0OiAzNyxcbiAgcmlnaHQ6IDM5LFxuICBlbmQ6IDM1LFxuICBob21lOiAzNixcbiAgZGVsOiA0NixcbiAgYmFja3NwYWNlOiA4LFxuICBpbnNlcnQ6IDQ1LFxuICBwYWdldXA6IDMzLFxuICBwYWdlZG93bjogMzQsXG4gIHNoaWZ0OiAxNlxufSk7XG5leHBvcnQgY29uc3Qga2V5VmFsdWVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGVudGVyOiAnRW50ZXInLFxuICB0YWI6ICdUYWInLFxuICBkZWxldGU6ICdEZWxldGUnLFxuICBlc2M6ICdFc2NhcGUnLFxuICBzcGFjZTogJ1NwYWNlJyxcbiAgdXA6ICdBcnJvd1VwJyxcbiAgZG93bjogJ0Fycm93RG93bicsXG4gIGxlZnQ6ICdBcnJvd0xlZnQnLFxuICByaWdodDogJ0Fycm93UmlnaHQnLFxuICBlbmQ6ICdFbmQnLFxuICBob21lOiAnSG9tZScsXG4gIGRlbDogJ0RlbGV0ZScsXG4gIGJhY2tzcGFjZTogJ0JhY2tzcGFjZScsXG4gIGluc2VydDogJ0luc2VydCcsXG4gIHBhZ2V1cDogJ1BhZ2VVcCcsXG4gIHBhZ2Vkb3duOiAnUGFnZURvd24nLFxuICBzaGlmdDogJ1NoaWZ0J1xufSk7XG5leHBvcnQgZnVuY3Rpb24ga2V5cyhvKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXMob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGtleS5ldmVyeShrID0+IG9iai5oYXNPd25Qcm9wZXJ0eShrKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGljayhvYmosIHBhdGhzLCBleGNsdWRlKSB7XG4gIGNvbnN0IGZvdW5kID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgcmVzdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGlmIChwYXRocy5zb21lKHBhdGggPT4gcGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCA/IHBhdGgudGVzdChrZXkpIDogcGF0aCA9PT0ga2V5KSAmJiAhZXhjbHVkZT8uc29tZShwYXRoID0+IHBhdGggPT09IGtleSkpIHtcbiAgICAgIGZvdW5kW2tleV0gPSBvYmpba2V5XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdFtrZXldID0gb2JqW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBbZm91bmQsIHJlc3RdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9taXQob2JqLCBleGNsdWRlKSB7XG4gIGNvbnN0IGNsb25lID0ge1xuICAgIC4uLm9ialxuICB9O1xuICBleGNsdWRlLmZvckVhY2gocHJvcCA9PiBkZWxldGUgY2xvbmVbcHJvcF0pO1xuICByZXR1cm4gY2xvbmU7XG59XG5leHBvcnQgZnVuY3Rpb24gb25seShvYmosIGluY2x1ZGUpIHtcbiAgY29uc3QgY2xvbmUgPSB7fTtcbiAgaW5jbHVkZS5mb3JFYWNoKHByb3AgPT4gY2xvbmVbcHJvcF0gPSBvYmpbcHJvcF0pO1xuICByZXR1cm4gY2xvbmU7XG59XG5jb25zdCBvblJFID0gL15vblteYS16XS87XG5leHBvcnQgY29uc3QgaXNPbiA9IGtleSA9PiBvblJFLnRlc3Qoa2V5KTtcbmNvbnN0IGJ1YmJsaW5nRXZlbnRzID0gWydvbkFmdGVyc2NyaXB0ZXhlY3V0ZScsICdvbkFuaW1hdGlvbmNhbmNlbCcsICdvbkFuaW1hdGlvbmVuZCcsICdvbkFuaW1hdGlvbml0ZXJhdGlvbicsICdvbkFuaW1hdGlvbnN0YXJ0JywgJ29uQXV4Y2xpY2snLCAnb25CZWZvcmVpbnB1dCcsICdvbkJlZm9yZXNjcmlwdGV4ZWN1dGUnLCAnb25DaGFuZ2UnLCAnb25DbGljaycsICdvbkNvbXBvc2l0aW9uZW5kJywgJ29uQ29tcG9zaXRpb25zdGFydCcsICdvbkNvbXBvc2l0aW9udXBkYXRlJywgJ29uQ29udGV4dG1lbnUnLCAnb25Db3B5JywgJ29uQ3V0JywgJ29uRGJsY2xpY2snLCAnb25Gb2N1c2luJywgJ29uRm9jdXNvdXQnLCAnb25GdWxsc2NyZWVuY2hhbmdlJywgJ29uRnVsbHNjcmVlbmVycm9yJywgJ29uR2VzdHVyZWNoYW5nZScsICdvbkdlc3R1cmVlbmQnLCAnb25HZXN0dXJlc3RhcnQnLCAnb25Hb3Rwb2ludGVyY2FwdHVyZScsICdvbklucHV0JywgJ29uS2V5ZG93bicsICdvbktleXByZXNzJywgJ29uS2V5dXAnLCAnb25Mb3N0cG9pbnRlcmNhcHR1cmUnLCAnb25Nb3VzZWRvd24nLCAnb25Nb3VzZW1vdmUnLCAnb25Nb3VzZW91dCcsICdvbk1vdXNlb3ZlcicsICdvbk1vdXNldXAnLCAnb25Nb3VzZXdoZWVsJywgJ29uUGFzdGUnLCAnb25Qb2ludGVyY2FuY2VsJywgJ29uUG9pbnRlcmRvd24nLCAnb25Qb2ludGVyZW50ZXInLCAnb25Qb2ludGVybGVhdmUnLCAnb25Qb2ludGVybW92ZScsICdvblBvaW50ZXJvdXQnLCAnb25Qb2ludGVyb3ZlcicsICdvblBvaW50ZXJ1cCcsICdvblJlc2V0JywgJ29uU2VsZWN0JywgJ29uU3VibWl0JywgJ29uVG91Y2hjYW5jZWwnLCAnb25Ub3VjaGVuZCcsICdvblRvdWNobW92ZScsICdvblRvdWNoc3RhcnQnLCAnb25UcmFuc2l0aW9uY2FuY2VsJywgJ29uVHJhbnNpdGlvbmVuZCcsICdvblRyYW5zaXRpb25ydW4nLCAnb25UcmFuc2l0aW9uc3RhcnQnLCAnb25XaGVlbCddO1xuXG4vKipcbiAqIEZpbHRlciBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIGFwcGxpZWQgdG9cbiAqIHRoZSByb290IGVsZW1lbnQgb2YgYW4gaW5wdXQgY29tcG9uZW50LiBSZW1haW5pbmdcbiAqIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgPGlucHV0PiBlbGVtZW50IGluc2lkZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcklucHV0QXR0cnMoYXR0cnMpIHtcbiAgY29uc3QgW2V2ZW50cywgcHJvcHNdID0gcGljayhhdHRycywgW29uUkVdKTtcbiAgY29uc3QgaW5wdXRFdmVudHMgPSBvbWl0KGV2ZW50cywgYnViYmxpbmdFdmVudHMpO1xuICBjb25zdCBbcm9vdEF0dHJzLCBpbnB1dEF0dHJzXSA9IHBpY2socHJvcHMsIFsnY2xhc3MnLCAnc3R5bGUnLCAnaWQnLCAvXmRhdGEtL10pO1xuICBPYmplY3QuYXNzaWduKHJvb3RBdHRycywgZXZlbnRzKTtcbiAgT2JqZWN0LmFzc2lnbihpbnB1dEF0dHJzLCBpbnB1dEV2ZW50cyk7XG4gIHJldHVybiBbcm9vdEF0dHJzLCBpbnB1dEF0dHJzXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzZXQgZGlmZmVyZW5jZSBvZiBCIGFuZCBBLCBpLmUuIHRoZSBzZXQgb2YgZWxlbWVudHMgaW4gQiBidXQgbm90IGluIEFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFycmF5RGlmZihhLCBiKSB7XG4gIGNvbnN0IGRpZmYgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFhLmluY2x1ZGVzKGJbaV0pKSBkaWZmLnB1c2goYltpXSk7XG4gIH1cbiAgcmV0dXJuIGRpZmY7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcEluQXJyYXkodikge1xuICByZXR1cm4gdiA9PSBudWxsID8gW10gOiBBcnJheS5pc0FycmF5KHYpID8gdiA6IFt2XTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0RmlsdGVyKHZhbHVlLCBzZWFyY2gsIGl0ZW0pIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgc2VhcmNoICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbicgJiYgdmFsdWUudG9TdHJpbmcoKS50b0xvY2FsZUxvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoLnRvTG9jYWxlTG93ZXJDYXNlKCkpICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2hJdGVtcyhpdGVtcywgc2VhcmNoKSB7XG4gIGlmICghc2VhcmNoKSByZXR1cm4gaXRlbXM7XG4gIHNlYXJjaCA9IHNlYXJjaC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChzZWFyY2gudHJpbSgpID09PSAnJykgcmV0dXJuIGl0ZW1zO1xuICByZXR1cm4gaXRlbXMuZmlsdGVyKGl0ZW0gPT4gT2JqZWN0LmtleXMoaXRlbSkuc29tZShrZXkgPT4gZGVmYXVsdEZpbHRlcihnZXRPYmplY3RWYWx1ZUJ5UGF0aChpdGVtLCBrZXkpLCBzZWFyY2gsIGl0ZW0pKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2UoZm4sIGRlbGF5KSB7XG4gIGxldCB0aW1lb3V0SWQgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiBmbiguLi5hcmdzKSwgZGVsYXkpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlKGZuLCBsaW1pdCkge1xuICBsZXQgdGhyb3R0bGluZyA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhyb3R0bGluZykge1xuICAgICAgdGhyb3R0bGluZyA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRocm90dGxpbmcgPSBmYWxzZSwgbGltaXQpO1xuICAgICAgcmV0dXJuIGZuKC4uLmFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xufVxuLyoqXG4gKiBGaWx0ZXJzIHNsb3RzIHRvIG9ubHkgdGhvc2Ugc3RhcnRpbmcgd2l0aCBgcHJlZml4YCwgcmVtb3ZpbmcgdGhlIHByZWZpeFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJlZml4ZWRTbG90cyhwcmVmaXgsIHNsb3RzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhzbG90cykuZmlsdGVyKGsgPT4gay5zdGFydHNXaXRoKHByZWZpeCkpLnJlZHVjZSgob2JqLCBrKSA9PiB7XG4gICAgb2JqW2sucmVwbGFjZShwcmVmaXgsICcnKV0gPSBzbG90c1trXTtcbiAgICByZXR1cm4gb2JqO1xuICB9LCB7fSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xhbXAodmFsdWUpIHtcbiAgbGV0IG1pbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgbGV0IG1heCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCB2YWx1ZSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldERlY2ltYWxzKHZhbHVlKSB7XG4gIGNvbnN0IHRyaW1tZWRTdHIgPSB2YWx1ZS50b1N0cmluZygpLnRyaW0oKTtcbiAgcmV0dXJuIHRyaW1tZWRTdHIuaW5jbHVkZXMoJy4nKSA/IHRyaW1tZWRTdHIubGVuZ3RoIC0gdHJpbW1lZFN0ci5pbmRleE9mKCcuJykgLSAxIDogMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWRFbmQoc3RyLCBsZW5ndGgpIHtcbiAgbGV0IGNoYXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcwJztcbiAgcmV0dXJuIHN0ciArIGNoYXIucmVwZWF0KE1hdGgubWF4KDAsIGxlbmd0aCAtIHN0ci5sZW5ndGgpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWRTdGFydChzdHIsIGxlbmd0aCkge1xuICBsZXQgY2hhciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJzAnO1xuICByZXR1cm4gY2hhci5yZXBlYXQoTWF0aC5tYXgoMCwgbGVuZ3RoIC0gc3RyLmxlbmd0aCkpICsgc3RyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNodW5rKHN0cikge1xuICBsZXQgc2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcbiAgY29uc3QgY2h1bmtlZCA9IFtdO1xuICBsZXQgaW5kZXggPSAwO1xuICB3aGlsZSAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgY2h1bmtlZC5wdXNoKHN0ci5zdWJzdHIoaW5kZXgsIHNpemUpKTtcbiAgICBpbmRleCArPSBzaXplO1xuICB9XG4gIHJldHVybiBjaHVua2VkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGh1bWFuUmVhZGFibGVGaWxlU2l6ZShieXRlcykge1xuICBsZXQgYmFzZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTAwMDtcbiAgaWYgKGJ5dGVzIDwgYmFzZSkge1xuICAgIHJldHVybiBgJHtieXRlc30gQmA7XG4gIH1cbiAgY29uc3QgcHJlZml4ID0gYmFzZSA9PT0gMTAyNCA/IFsnS2knLCAnTWknLCAnR2knXSA6IFsnaycsICdNJywgJ0cnXTtcbiAgbGV0IHVuaXQgPSAtMTtcbiAgd2hpbGUgKE1hdGguYWJzKGJ5dGVzKSA+PSBiYXNlICYmIHVuaXQgPCBwcmVmaXgubGVuZ3RoIC0gMSkge1xuICAgIGJ5dGVzIC89IGJhc2U7XG4gICAgKyt1bml0O1xuICB9XG4gIHJldHVybiBgJHtieXRlcy50b0ZpeGVkKDEpfSAke3ByZWZpeFt1bml0XX1CYDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjYW1lbGl6ZU9iamVjdEtleXMob2JqKSB7XG4gIGlmICghb2JqKSByZXR1cm4ge307XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZSgobywga2V5KSA9PiB7XG4gICAgb1tjYW1lbGl6ZShrZXkpXSA9IG9ialtrZXldO1xuICAgIHJldHVybiBvO1xuICB9LCB7fSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VEZWVwKCkge1xuICBsZXQgc291cmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgbGV0IHRhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIGxldCBhcnJheUZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIGNvbnN0IG91dCA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcbiAgICBvdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG4gIGZvciAoY29uc3Qga2V5IGluIHRhcmdldCkge1xuICAgIGNvbnN0IHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgY29uc3QgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcblxuICAgIC8vIE9ubHkgY29udGludWUgZGVlcCBtZXJnaW5nIGlmXG4gICAgLy8gYm90aCBwcm9wZXJ0aWVzIGFyZSBvYmplY3RzXG4gICAgaWYgKGlzT2JqZWN0KHNvdXJjZVByb3BlcnR5KSAmJiBpc09iamVjdCh0YXJnZXRQcm9wZXJ0eSkpIHtcbiAgICAgIG91dFtrZXldID0gbWVyZ2VEZWVwKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSwgYXJyYXlGbik7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlUHJvcGVydHkpICYmIEFycmF5LmlzQXJyYXkodGFyZ2V0UHJvcGVydHkpICYmIGFycmF5Rm4pIHtcbiAgICAgIG91dFtrZXldID0gYXJyYXlGbihzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIG91dFtrZXldID0gdGFyZ2V0UHJvcGVydHk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaWxsQXJyYXkobGVuZ3RoLCBvYmopIHtcbiAgcmV0dXJuIEFycmF5KGxlbmd0aCkuZmlsbChvYmopO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW5GcmFnbWVudHMobm9kZXMpIHtcbiAgcmV0dXJuIG5vZGVzLm1hcChub2RlID0+IHtcbiAgICBpZiAobm9kZS50eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgcmV0dXJuIGZsYXR0ZW5GcmFnbWVudHMobm9kZS5jaGlsZHJlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfSkuZmxhdCgpO1xufVxuZXhwb3J0IGNvbnN0IHJhbmRvbUhleENvbG9yID0gKCkgPT4ge1xuICBjb25zdCBuID0gKE1hdGgucmFuZG9tKCkgKiAweGZmZmZmICogMTAwMDAwMCkudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gJyMnICsgbi5zbGljZSgwLCA2KTtcbn07XG5leHBvcnQgZnVuY3Rpb24gdG9LZWJhYkNhc2UoKSB7XG4gIGxldCBzdHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuICBpZiAodG9LZWJhYkNhc2UuY2FjaGUuaGFzKHN0cikpIHJldHVybiB0b0tlYmFiQ2FzZS5jYWNoZS5nZXQoc3RyKTtcbiAgY29uc3Qga2ViYWIgPSBzdHIucmVwbGFjZSgvW15hLXpdL2dpLCAnLScpLnJlcGxhY2UoL1xcQihbQS1aXSkvZywgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG4gIHRvS2ViYWJDYXNlLmNhY2hlLnNldChzdHIsIGtlYmFiKTtcbiAgcmV0dXJuIGtlYmFiO1xufVxudG9LZWJhYkNhc2UuY2FjaGUgPSBuZXcgTWFwKCk7XG5leHBvcnQgZnVuY3Rpb24gZmluZENoaWxkcmVuKHZub2RlKSB7XG4gIGlmICghdm5vZGUgfHwgdHlwZW9mIHZub2RlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGUubWFwKGNoaWxkID0+IGZpbmRDaGlsZHJlbihjaGlsZCkpLmZpbHRlcih2ID0+IHYpLmZsYXQoMSk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZS5jaGlsZHJlbikpIHtcbiAgICByZXR1cm4gdm5vZGUuY2hpbGRyZW4ubWFwKGNoaWxkID0+IGZpbmRDaGlsZHJlbihjaGlsZCkpLmZpbHRlcih2ID0+IHYpLmZsYXQoMSk7XG4gIH0gZWxzZSBpZiAodm5vZGUuY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIFt2bm9kZS5jb21wb25lbnQsIC4uLmZpbmRDaGlsZHJlbih2bm9kZS5jb21wb25lbnQ/LnN1YlRyZWUpXS5maWx0ZXIodiA9PiB2KS5mbGF0KDEpO1xuICB9XG4gIHJldHVybiBbXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ2hpbGRyZW5XaXRoUHJvdmlkZShrZXksIHZub2RlKSB7XG4gIGlmICghdm5vZGUgfHwgdHlwZW9mIHZub2RlICE9PSAnb2JqZWN0JykgcmV0dXJuIFtdO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGUubWFwKGNoaWxkID0+IGZpbmRDaGlsZHJlbldpdGhQcm92aWRlKGtleSwgY2hpbGQpKS5mbGF0KDEpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIHZub2RlLmNoaWxkcmVuLm1hcChjaGlsZCA9PiBmaW5kQ2hpbGRyZW5XaXRoUHJvdmlkZShrZXksIGNoaWxkKSkuZmxhdCgxKTtcbiAgfSBlbHNlIGlmICh2bm9kZS5jb21wb25lbnQpIHtcbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh2bm9kZS5jb21wb25lbnQucHJvdmlkZXMpLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIHJldHVybiBbdm5vZGUuY29tcG9uZW50XTtcbiAgICB9IGVsc2UgaWYgKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlKSB7XG4gICAgICByZXR1cm4gZmluZENoaWxkcmVuV2l0aFByb3ZpZGUoa2V5LCB2bm9kZS5jb21wb25lbnQuc3ViVHJlZSkuZmxhdCgxKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxudmFyIF9hcnIgPSAvKiNfX1BVUkVfXyovbmV3IFdlYWtNYXAoKTtcbnZhciBfcG9pbnRlciA9IC8qI19fUFVSRV9fKi9uZXcgV2Vha01hcCgpO1xuZXhwb3J0IGNsYXNzIENpcmN1bGFyQnVmZmVyIHtcbiAgY29uc3RydWN0b3Ioc2l6ZSkge1xuICAgIF9jbGFzc1ByaXZhdGVGaWVsZEluaXRTcGVjKHRoaXMsIF9hcnIsIHtcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IFtdXG4gICAgfSk7XG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkSW5pdFNwZWModGhpcywgX3BvaW50ZXIsIHtcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IDBcbiAgICB9KTtcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICB9XG4gIHB1c2godmFsKSB7XG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9hcnIpW19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfcG9pbnRlcildID0gdmFsO1xuICAgIF9jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfcG9pbnRlciwgKF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfcG9pbnRlcikgKyAxKSAlIHRoaXMuc2l6ZSk7XG4gIH1cbiAgdmFsdWVzKCkge1xuICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX2Fycikuc2xpY2UoX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9wb2ludGVyKSkuY29uY2F0KF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfYXJyKS5zbGljZSgwLCBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX3BvaW50ZXIpKSk7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudENvb3JkaW5hdGVzKGUpIHtcbiAgaWYgKCd0b3VjaGVzJyBpbiBlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsaWVudFg6IGUudG91Y2hlc1swXS5jbGllbnRYLFxuICAgICAgY2xpZW50WTogZS50b3VjaGVzWzBdLmNsaWVudFlcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgY2xpZW50WDogZS5jbGllbnRYLFxuICAgIGNsaWVudFk6IGUuY2xpZW50WVxuICB9O1xufVxuXG4vLyBPbmx5IGFsbG93IGEgc2luZ2xlIHJldHVybiB0eXBlXG5cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cnVjdENvbXB1dGVkKGdldHRlcikge1xuICBjb25zdCByZWZzID0gcmVhY3RpdmUoe30pO1xuICBjb25zdCBiYXNlID0gY29tcHV0ZWQoZ2V0dGVyKTtcbiAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGJhc2UudmFsdWUpIHtcbiAgICAgIHJlZnNba2V5XSA9IGJhc2UudmFsdWVba2V5XTtcbiAgICB9XG4gIH0sIHtcbiAgICBmbHVzaDogJ3N5bmMnXG4gIH0pO1xuICByZXR1cm4gdG9SZWZzKHJlZnMpO1xufVxuXG4vKiogQXJyYXkuaW5jbHVkZXMgYnV0IHZhbHVlIGNhbiBiZSBhbnkgdHlwZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluY2x1ZGVzKGFyciwgdmFsKSB7XG4gIHJldHVybiBhcnIuaW5jbHVkZXModmFsKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBldmVudE5hbWUocHJvcE5hbWUpIHtcbiAgcmV0dXJuIHByb3BOYW1lWzJdLnRvTG93ZXJDYXNlKCkgKyBwcm9wTmFtZS5zbGljZSgzKTtcbn1cbmV4cG9ydCBjb25zdCBFdmVudFByb3AgPSAoKSA9PiBbRnVuY3Rpb24sIEFycmF5XTtcbmV4cG9ydCBmdW5jdGlvbiBoYXNFdmVudChwcm9wcywgbmFtZSkge1xuICBuYW1lID0gJ29uJyArIGNhcGl0YWxpemUobmFtZSk7XG4gIHJldHVybiAhIShwcm9wc1tuYW1lXSB8fCBwcm9wc1tgJHtuYW1lfU9uY2VgXSB8fCBwcm9wc1tgJHtuYW1lfUNhcHR1cmVgXSB8fCBwcm9wc1tgJHtuYW1lfU9uY2VDYXB0dXJlYF0gfHwgcHJvcHNbYCR7bmFtZX1DYXB0dXJlT25jZWBdKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjYWxsRXZlbnQoaGFuZGxlcikge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICBmb3IgKGNvbnN0IGggb2YgaGFuZGxlcikge1xuICAgICAgaCguLi5hcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBoYW5kbGVyKC4uLmFyZ3MpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZm9jdXNhYmxlQ2hpbGRyZW4oZWwpIHtcbiAgbGV0IGZpbHRlckJ5VGFiSW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gIGNvbnN0IHRhcmdldHMgPSBbJ2J1dHRvbicsICdbaHJlZl0nLCAnaW5wdXQ6bm90KFt0eXBlPVwiaGlkZGVuXCJdKScsICdzZWxlY3QnLCAndGV4dGFyZWEnLCAnW3RhYmluZGV4XSddLm1hcChzID0+IGAke3N9JHtmaWx0ZXJCeVRhYkluZGV4ID8gJzpub3QoW3RhYmluZGV4PVwiLTFcIl0pJyA6ICcnfTpub3QoW2Rpc2FibGVkXSlgKS5qb2luKCcsICcpO1xuICByZXR1cm4gWy4uLmVsLnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0cyldO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRFbGVtZW50KGVsZW1lbnRzLCBsb2NhdGlvbiwgY29uZGl0aW9uKSB7XG4gIGxldCBfZWw7XG4gIGxldCBpZHggPSBlbGVtZW50cy5pbmRleE9mKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICBjb25zdCBpbmMgPSBsb2NhdGlvbiA9PT0gJ25leHQnID8gMSA6IC0xO1xuICBkbyB7XG4gICAgaWR4ICs9IGluYztcbiAgICBfZWwgPSBlbGVtZW50c1tpZHhdO1xuICB9IHdoaWxlICgoIV9lbCB8fCBfZWwub2Zmc2V0UGFyZW50ID09IG51bGwgfHwgIShjb25kaXRpb24/LihfZWwpID8/IHRydWUpKSAmJiBpZHggPCBlbGVtZW50cy5sZW5ndGggJiYgaWR4ID49IDApO1xuICByZXR1cm4gX2VsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvY3VzQ2hpbGQoZWwsIGxvY2F0aW9uKSB7XG4gIGNvbnN0IGZvY3VzYWJsZSA9IGZvY3VzYWJsZUNoaWxkcmVuKGVsKTtcbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIGlmIChlbCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB8fCAhZWwuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIGZvY3VzYWJsZVswXT8uZm9jdXMoKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobG9jYXRpb24gPT09ICdmaXJzdCcpIHtcbiAgICBmb2N1c2FibGVbMF0/LmZvY3VzKCk7XG4gIH0gZWxzZSBpZiAobG9jYXRpb24gPT09ICdsYXN0Jykge1xuICAgIGZvY3VzYWJsZS5hdCgtMSk/LmZvY3VzKCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnbnVtYmVyJykge1xuICAgIGZvY3VzYWJsZVtsb2NhdGlvbl0/LmZvY3VzKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgX2VsID0gZ2V0TmV4dEVsZW1lbnQoZm9jdXNhYmxlLCBsb2NhdGlvbik7XG4gICAgaWYgKF9lbCkgX2VsLmZvY3VzKCk7ZWxzZSBmb2N1c0NoaWxkKGVsLCBsb2NhdGlvbiA9PT0gJ25leHQnID8gJ2ZpcnN0JyA6ICdsYXN0Jyk7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbCkge1xuICByZXR1cm4gdmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnICYmIHZhbC50cmltKCkgPT09ICcnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4vKiogUmV0dXJucyBudWxsIGlmIHRoZSBzZWxlY3RvciBpcyBub3Qgc3VwcG9ydGVkIG9yIHdlIGNhbid0IGNoZWNrICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hlc1NlbGVjdG9yKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBzdXBwb3J0c1NlbGVjdG9yID0gSU5fQlJPV1NFUiAmJiB0eXBlb2YgQ1NTICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQ1NTLnN1cHBvcnRzICE9PSAndW5kZWZpbmVkJyAmJiBDU1Muc3VwcG9ydHMoYHNlbGVjdG9yKCR7c2VsZWN0b3J9KWApO1xuICBpZiAoIXN1cHBvcnRzU2VsZWN0b3IpIHJldHVybiBudWxsO1xuICB0cnkge1xuICAgIHJldHVybiAhIWVsICYmIGVsLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBpbmNsdWRlcyB9IGZyb20gXCIuL2hlbHBlcnMubWpzXCI7XG5jb25zdCBibG9jayA9IFsndG9wJywgJ2JvdHRvbSddO1xuY29uc3QgaW5saW5lID0gWydzdGFydCcsICdlbmQnLCAnbGVmdCcsICdyaWdodCddO1xuLyoqIFBhcnNlIGEgcmF3IGFuY2hvciBzdHJpbmcgaW50byBhbiBvYmplY3QgKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUFuY2hvcihhbmNob3IsIGlzUnRsKSB7XG4gIGxldCBbc2lkZSwgYWxpZ25dID0gYW5jaG9yLnNwbGl0KCcgJyk7XG4gIGlmICghYWxpZ24pIHtcbiAgICBhbGlnbiA9IGluY2x1ZGVzKGJsb2NrLCBzaWRlKSA/ICdzdGFydCcgOiBpbmNsdWRlcyhpbmxpbmUsIHNpZGUpID8gJ3RvcCcgOiAnY2VudGVyJztcbiAgfVxuICByZXR1cm4ge1xuICAgIHNpZGU6IHRvUGh5c2ljYWwoc2lkZSwgaXNSdGwpLFxuICAgIGFsaWduOiB0b1BoeXNpY2FsKGFsaWduLCBpc1J0bClcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b1BoeXNpY2FsKHN0ciwgaXNSdGwpIHtcbiAgaWYgKHN0ciA9PT0gJ3N0YXJ0JykgcmV0dXJuIGlzUnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgaWYgKHN0ciA9PT0gJ2VuZCcpIHJldHVybiBpc1J0bCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIHJldHVybiBzdHI7XG59XG5leHBvcnQgZnVuY3Rpb24gZmxpcFNpZGUoYW5jaG9yKSB7XG4gIHJldHVybiB7XG4gICAgc2lkZToge1xuICAgICAgY2VudGVyOiAnY2VudGVyJyxcbiAgICAgIHRvcDogJ2JvdHRvbScsXG4gICAgICBib3R0b206ICd0b3AnLFxuICAgICAgbGVmdDogJ3JpZ2h0JyxcbiAgICAgIHJpZ2h0OiAnbGVmdCdcbiAgICB9W2FuY2hvci5zaWRlXSxcbiAgICBhbGlnbjogYW5jaG9yLmFsaWduXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZmxpcEFsaWduKGFuY2hvcikge1xuICByZXR1cm4ge1xuICAgIHNpZGU6IGFuY2hvci5zaWRlLFxuICAgIGFsaWduOiB7XG4gICAgICBjZW50ZXI6ICdjZW50ZXInLFxuICAgICAgdG9wOiAnYm90dG9tJyxcbiAgICAgIGJvdHRvbTogJ3RvcCcsXG4gICAgICBsZWZ0OiAncmlnaHQnLFxuICAgICAgcmlnaHQ6ICdsZWZ0J1xuICAgIH1bYW5jaG9yLmFsaWduXVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZsaXBDb3JuZXIoYW5jaG9yKSB7XG4gIHJldHVybiB7XG4gICAgc2lkZTogYW5jaG9yLmFsaWduLFxuICAgIGFsaWduOiBhbmNob3Iuc2lkZVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEF4aXMoYW5jaG9yKSB7XG4gIHJldHVybiBpbmNsdWRlcyhibG9jaywgYW5jaG9yLnNpZGUpID8gJ3knIDogJ3gnO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5jaG9yLm1qcy5tYXAiLCJleHBvcnQgY2xhc3MgQm94IHtcbiAgY29uc3RydWN0b3IoX3JlZikge1xuICAgIGxldCB7XG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0XG4gICAgfSA9IF9yZWY7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgfVxuICBnZXQgdG9wKCkge1xuICAgIHJldHVybiB0aGlzLnk7XG4gIH1cbiAgZ2V0IGJvdHRvbSgpIHtcbiAgICByZXR1cm4gdGhpcy55ICsgdGhpcy5oZWlnaHQ7XG4gIH1cbiAgZ2V0IGxlZnQoKSB7XG4gICAgcmV0dXJuIHRoaXMueDtcbiAgfVxuICBnZXQgcmlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMueCArIHRoaXMud2lkdGg7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPdmVyZmxvdyhhLCBiKSB7XG4gIHJldHVybiB7XG4gICAgeDoge1xuICAgICAgYmVmb3JlOiBNYXRoLm1heCgwLCBiLmxlZnQgLSBhLmxlZnQpLFxuICAgICAgYWZ0ZXI6IE1hdGgubWF4KDAsIGEucmlnaHQgLSBiLnJpZ2h0KVxuICAgIH0sXG4gICAgeToge1xuICAgICAgYmVmb3JlOiBNYXRoLm1heCgwLCBiLnRvcCAtIGEudG9wKSxcbiAgICAgIGFmdGVyOiBNYXRoLm1heCgwLCBhLmJvdHRvbSAtIGIuYm90dG9tKVxuICAgIH1cbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJveC5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBCb3ggfSBmcm9tIFwiLi9ib3gubWpzXCI7XG4vKiogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTc4NzY2MDEvMjA3NDczNiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG51bGxpZnlUcmFuc2Zvcm1zKGVsKSB7XG4gIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgY29uc3QgdHggPSBzdHlsZS50cmFuc2Zvcm07XG4gIGlmICh0eCkge1xuICAgIGxldCB0YSwgc3gsIHN5LCBkeCwgZHk7XG4gICAgaWYgKHR4LnN0YXJ0c1dpdGgoJ21hdHJpeDNkKCcpKSB7XG4gICAgICB0YSA9IHR4LnNsaWNlKDksIC0xKS5zcGxpdCgvLCAvKTtcbiAgICAgIHN4ID0gK3RhWzBdO1xuICAgICAgc3kgPSArdGFbNV07XG4gICAgICBkeCA9ICt0YVsxMl07XG4gICAgICBkeSA9ICt0YVsxM107XG4gICAgfSBlbHNlIGlmICh0eC5zdGFydHNXaXRoKCdtYXRyaXgoJykpIHtcbiAgICAgIHRhID0gdHguc2xpY2UoNywgLTEpLnNwbGl0KC8sIC8pO1xuICAgICAgc3ggPSArdGFbMF07XG4gICAgICBzeSA9ICt0YVszXTtcbiAgICAgIGR4ID0gK3RhWzRdO1xuICAgICAgZHkgPSArdGFbNV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQm94KHJlY3QpO1xuICAgIH1cbiAgICBjb25zdCB0byA9IHN0eWxlLnRyYW5zZm9ybU9yaWdpbjtcbiAgICBjb25zdCB4ID0gcmVjdC54IC0gZHggLSAoMSAtIHN4KSAqIHBhcnNlRmxvYXQodG8pO1xuICAgIGNvbnN0IHkgPSByZWN0LnkgLSBkeSAtICgxIC0gc3kpICogcGFyc2VGbG9hdCh0by5zbGljZSh0by5pbmRleE9mKCcgJykgKyAxKSk7XG4gICAgY29uc3QgdyA9IHN4ID8gcmVjdC53aWR0aCAvIHN4IDogZWwub2Zmc2V0V2lkdGggKyAxO1xuICAgIGNvbnN0IGggPSBzeSA/IHJlY3QuaGVpZ2h0IC8gc3kgOiBlbC5vZmZzZXRIZWlnaHQgKyAxO1xuICAgIHJldHVybiBuZXcgQm94KHtcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgd2lkdGg6IHcsXG4gICAgICBoZWlnaHQ6IGhcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEJveChyZWN0KTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGFuaW1hdGUoZWwsIGtleWZyYW1lcywgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGVsLmFuaW1hdGUgPT09ICd1bmRlZmluZWQnKSByZXR1cm4ge1xuICAgIGZpbmlzaGVkOiBQcm9taXNlLnJlc29sdmUoKVxuICB9O1xuICBsZXQgYW5pbWF0aW9uO1xuICB0cnkge1xuICAgIGFuaW1hdGlvbiA9IGVsLmFuaW1hdGUoa2V5ZnJhbWVzLCBvcHRpb25zKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZpbmlzaGVkOiBQcm9taXNlLnJlc29sdmUoKVxuICAgIH07XG4gIH1cbiAgaWYgKHR5cGVvZiBhbmltYXRpb24uZmluaXNoZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYW5pbWF0aW9uLmZpbmlzaGVkID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBhbmltYXRpb24ub25maW5pc2ggPSAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUoYW5pbWF0aW9uKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuaW1hdGlvbi5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBldmVudE5hbWUsIGlzT24gfSBmcm9tIFwiLi9oZWxwZXJzLm1qc1wiO1xuY29uc3QgaGFuZGxlcnMgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRQcm9wcyhlbCwgcHJvcHMpIHtcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goayA9PiB7XG4gICAgaWYgKGlzT24oaykpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBldmVudE5hbWUoayk7XG4gICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnMuZ2V0KGVsKTtcbiAgICAgIGlmIChwcm9wc1trXSA9PSBudWxsKSB7XG4gICAgICAgIGhhbmRsZXI/LmZvckVhY2godiA9PiB7XG4gICAgICAgICAgY29uc3QgW24sIGZuXSA9IHY7XG4gICAgICAgICAgaWYgKG4gPT09IG5hbWUpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgZm4pO1xuICAgICAgICAgICAgaGFuZGxlci5kZWxldGUodik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoIWhhbmRsZXIgfHwgIVsuLi5oYW5kbGVyXT8uc29tZSh2ID0+IHZbMF0gPT09IG5hbWUgJiYgdlsxXSA9PT0gcHJvcHNba10pKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgcHJvcHNba10pO1xuICAgICAgICBjb25zdCBfaGFuZGxlciA9IGhhbmRsZXIgfHwgbmV3IFNldCgpO1xuICAgICAgICBfaGFuZGxlci5hZGQoW25hbWUsIHByb3BzW2tdXSk7XG4gICAgICAgIGlmICghaGFuZGxlcnMuaGFzKGVsKSkgaGFuZGxlcnMuc2V0KGVsLCBfaGFuZGxlcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wc1trXSA9PSBudWxsKSB7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShrLCBwcm9wc1trXSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1bmJpbmRQcm9wcyhlbCwgcHJvcHMpIHtcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goayA9PiB7XG4gICAgaWYgKGlzT24oaykpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBldmVudE5hbWUoayk7XG4gICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnMuZ2V0KGVsKTtcbiAgICAgIGhhbmRsZXI/LmZvckVhY2godiA9PiB7XG4gICAgICAgIGNvbnN0IFtuLCBmbl0gPSB2O1xuICAgICAgICBpZiAobiA9PT0gbmFtZSkge1xuICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgZm4pO1xuICAgICAgICAgIGhhbmRsZXIuZGVsZXRlKHYpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGspO1xuICAgIH1cbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kUHJvcHMubWpzLm1hcCIsIi8qKlxuICogV0NBRyAzLjAgQVBDQSBwZXJjZXB0dWFsIGNvbnRyYXN0IGFsZ29yaXRobSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9NeW5kZXgvU0FQQy1BUENBXG4gKiBAbGljZW5jZSBodHRwczovL3d3dy53My5vcmcvQ29uc29ydGl1bS9MZWdhbC8yMDE1L2NvcHlyaWdodC1zb2Z0d2FyZS1hbmQtZG9jdW1lbnRcbiAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1dBSS9HTC90YXNrLWZvcmNlcy9zaWx2ZXIvd2lraS9WaXN1YWxfQ29udHJhc3Rfb2ZfVGV4dF9TdWJncm91cFxuICovXG4vLyBUeXBlc1xuXG4vLyBNQUdJQ0FMIE5VTUJFUlNcblxuLy8gc1JHQiBDb252ZXJzaW9uIHRvIFJlbGF0aXZlIEx1bWluYW5jZSAoWSlcblxuLy8gVHJhbnNmZXIgQ3VydmUgKGFrYSBcIkdhbW1hXCIpIGZvciBzUkdCIGxpbmVhcml6YXRpb25cbi8vIFNpbXBsZSBwb3dlciBjdXJ2ZSB2cyBwaWVjZXdpc2UgZGVzY3JpYmVkIGluIGRvY3Ncbi8vIEVzc2VudGlhbGx5LCAyLjQgYmVzdCBtb2RlbHMgYWN0dWFsIGRpc3BsYXlcbi8vIGNoYXJhY3RlcmlzdGljcyBpbiBjb21iaW5hdGlvbiB3aXRoIHRoZSB0b3RhbCBtZXRob2RcbmNvbnN0IG1haW5UUkMgPSAyLjQ7XG5jb25zdCBSY28gPSAwLjIxMjY3Mjk7IC8vIHNSR0IgUmVkIENvZWZmaWNpZW50IChmcm9tIG1hdHJpeClcbmNvbnN0IEdjbyA9IDAuNzE1MTUyMjsgLy8gc1JHQiBHcmVlbiBDb2VmZmljaWVudCAoZnJvbSBtYXRyaXgpXG5jb25zdCBCY28gPSAwLjA3MjE3NTA7IC8vIHNSR0IgQmx1ZSBDb2VmZmljaWVudCAoZnJvbSBtYXRyaXgpXG5cbi8vIEZvciBGaW5kaW5nIFJhdyBTQVBDIENvbnRyYXN0IGZyb20gUmVsYXRpdmUgTHVtaW5hbmNlIChZKVxuXG4vLyBDb25zdGFudHMgZm9yIFNBUEMgUG93ZXIgQ3VydmUgRXhwb25lbnRzXG4vLyBPbmUgcGFpciBmb3Igbm9ybWFsIHRleHQsIGFuZCBvbmUgZm9yIHJldmVyc2Vcbi8vIFRoZXNlIGFyZSB0aGUgXCJiZWF0aW5nIGhlYXJ0XCIgb2YgU0FQQ1xuY29uc3Qgbm9ybUJHID0gMC41NTtcbmNvbnN0IG5vcm1UWFQgPSAwLjU4O1xuY29uc3QgcmV2VFhUID0gMC41NztcbmNvbnN0IHJldkJHID0gMC42MjtcblxuLy8gRm9yIENsYW1waW5nIGFuZCBTY2FsaW5nIFZhbHVlc1xuXG5jb25zdCBibGtUaHJzID0gMC4wMzsgLy8gTGV2ZWwgdGhhdCB0cmlnZ2VycyB0aGUgc29mdCBibGFjayBjbGFtcFxuY29uc3QgYmxrQ2xtcCA9IDEuNDU7IC8vIEV4cG9uZW50IGZvciB0aGUgc29mdCBibGFjayBjbGFtcCBjdXJ2ZVxuY29uc3QgZGVsdGFZbWluID0gMC4wMDA1OyAvLyBMaW50IHRyYXBcbmNvbnN0IHNjYWxlQm9XID0gMS4yNTsgLy8gU2NhbGluZyBmb3IgZGFyayB0ZXh0IG9uIGxpZ2h0XG5jb25zdCBzY2FsZVdvQiA9IDEuMjU7IC8vIFNjYWxpbmcgZm9yIGxpZ2h0IHRleHQgb24gZGFya1xuY29uc3QgbG9Db25UaHJlc2ggPSAwLjA3ODsgLy8gVGhyZXNob2xkIGZvciBuZXcgc2ltcGxlIG9mZnNldCBzY2FsZVxuY29uc3QgbG9Db25GYWN0b3IgPSAxMi44MjA1MTI4MjA1MTI4MjsgLy8gPSAxLzAuMDc4LFxuY29uc3QgbG9Db25PZmZzZXQgPSAwLjA2OyAvLyBUaGUgc2ltcGxlIG9mZnNldFxuY29uc3QgbG9DbGlwID0gMC4wMDE7IC8vIE91dHB1dCBjbGlwIChsaW50IHRyYXAgIzIpXG5cbmV4cG9ydCBmdW5jdGlvbiBBUENBY29udHJhc3QodGV4dCwgYmFja2dyb3VuZCkge1xuICAvLyBMaW5lYXJpemUgc1JHQlxuICBjb25zdCBSdHh0ID0gKHRleHQuciAvIDI1NSkgKiogbWFpblRSQztcbiAgY29uc3QgR3R4dCA9ICh0ZXh0LmcgLyAyNTUpICoqIG1haW5UUkM7XG4gIGNvbnN0IEJ0eHQgPSAodGV4dC5iIC8gMjU1KSAqKiBtYWluVFJDO1xuICBjb25zdCBSYmcgPSAoYmFja2dyb3VuZC5yIC8gMjU1KSAqKiBtYWluVFJDO1xuICBjb25zdCBHYmcgPSAoYmFja2dyb3VuZC5nIC8gMjU1KSAqKiBtYWluVFJDO1xuICBjb25zdCBCYmcgPSAoYmFja2dyb3VuZC5iIC8gMjU1KSAqKiBtYWluVFJDO1xuXG4gIC8vIEFwcGx5IHRoZSBzdGFuZGFyZCBjb2VmZmljaWVudHMgYW5kIHN1bSB0byBZXG4gIGxldCBZdHh0ID0gUnR4dCAqIFJjbyArIEd0eHQgKiBHY28gKyBCdHh0ICogQmNvO1xuICBsZXQgWWJnID0gUmJnICogUmNvICsgR2JnICogR2NvICsgQmJnICogQmNvO1xuXG4gIC8vIFNvZnQgY2xhbXAgWSB3aGVuIG5lYXIgYmxhY2suXG4gIC8vIE5vdyBjbGFtcGluZyBhbGwgY29sb3JzIHRvIHByZXZlbnQgY3Jvc3NvdmVyIGVycm9yc1xuICBpZiAoWXR4dCA8PSBibGtUaHJzKSBZdHh0ICs9IChibGtUaHJzIC0gWXR4dCkgKiogYmxrQ2xtcDtcbiAgaWYgKFliZyA8PSBibGtUaHJzKSBZYmcgKz0gKGJsa1RocnMgLSBZYmcpICoqIGJsa0NsbXA7XG5cbiAgLy8gUmV0dXJuIDAgRWFybHkgZm9yIGV4dHJlbWVseSBsb3cg4oiGWSAobGludCB0cmFwICMxKVxuICBpZiAoTWF0aC5hYnMoWWJnIC0gWXR4dCkgPCBkZWx0YVltaW4pIHJldHVybiAwLjA7XG5cbiAgLy8gU0FQQyBDT05UUkFTVFxuXG4gIGxldCBvdXRwdXRDb250cmFzdDsgLy8gRm9yIHdlaWdodGVkIGZpbmFsIHZhbHVlc1xuICBpZiAoWWJnID4gWXR4dCkge1xuICAgIC8vIEZvciBub3JtYWwgcG9sYXJpdHksIGJsYWNrIHRleHQgb24gd2hpdGVcbiAgICAvLyBDYWxjdWxhdGUgdGhlIFNBUEMgY29udHJhc3QgdmFsdWUgYW5kIHNjYWxlXG5cbiAgICBjb25zdCBTQVBDID0gKFliZyAqKiBub3JtQkcgLSBZdHh0ICoqIG5vcm1UWFQpICogc2NhbGVCb1c7XG5cbiAgICAvLyBORVchIFNBUEMgU21vb3RoU2NhbGXihKJcbiAgICAvLyBMb3cgQ29udHJhc3QgU21vb3RoIFNjYWxlIFJvbGxvdXQgdG8gcHJldmVudCBwb2xhcml0eSByZXZlcnNhbFxuICAgIC8vIGFuZCBhbHNvIGEgbG93IGNsaXAgZm9yIHZlcnkgbG93IGNvbnRyYXN0cyAobGludCB0cmFwICMyKVxuICAgIC8vIG11Y2ggb2YgdGhpcyBpcyBmb3IgdmVyeSBsb3cgY29udHJhc3RzLCBsZXNzIHRoYW4gMTBcbiAgICAvLyB0aGVyZWZvcmUgZm9yIG1vc3QgcmV2ZXJzaW5nIG5lZWRzLCBvbmx5IGxvQ29uT2Zmc2V0IGlzIGltcG9ydGFudFxuICAgIG91dHB1dENvbnRyYXN0ID0gU0FQQyA8IGxvQ2xpcCA/IDAuMCA6IFNBUEMgPCBsb0NvblRocmVzaCA/IFNBUEMgLSBTQVBDICogbG9Db25GYWN0b3IgKiBsb0Nvbk9mZnNldCA6IFNBUEMgLSBsb0Nvbk9mZnNldDtcbiAgfSBlbHNlIHtcbiAgICAvLyBGb3IgcmV2ZXJzZSBwb2xhcml0eSwgbGlnaHQgdGV4dCBvbiBkYXJrXG4gICAgLy8gV29CIHNob3VsZCBhbHdheXMgcmV0dXJuIG5lZ2F0aXZlIHZhbHVlLlxuXG4gICAgY29uc3QgU0FQQyA9IChZYmcgKiogcmV2QkcgLSBZdHh0ICoqIHJldlRYVCkgKiBzY2FsZVdvQjtcbiAgICBvdXRwdXRDb250cmFzdCA9IFNBUEMgPiAtbG9DbGlwID8gMC4wIDogU0FQQyA+IC1sb0NvblRocmVzaCA/IFNBUEMgLSBTQVBDICogbG9Db25GYWN0b3IgKiBsb0Nvbk9mZnNldCA6IFNBUEMgKyBsb0Nvbk9mZnNldDtcbiAgfVxuICByZXR1cm4gb3V0cHV0Q29udHJhc3QgKiAxMDA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BUENBLm1qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5cbi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJ3Z1ZSc7XG5leHBvcnQgZnVuY3Rpb24gY29uc29sZVdhcm4obWVzc2FnZSkge1xuICB3YXJuKGBWdWV0aWZ5OiAke21lc3NhZ2V9YCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29uc29sZUVycm9yKG1lc3NhZ2UpIHtcbiAgd2FybihgVnVldGlmeSBlcnJvcjogJHttZXNzYWdlfWApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlcHJlY2F0ZShvcmlnaW5hbCwgcmVwbGFjZW1lbnQpIHtcbiAgcmVwbGFjZW1lbnQgPSBBcnJheS5pc0FycmF5KHJlcGxhY2VtZW50KSA/IHJlcGxhY2VtZW50LnNsaWNlKDAsIC0xKS5tYXAocyA9PiBgJyR7c30nYCkuam9pbignLCAnKSArIGAgb3IgJyR7cmVwbGFjZW1lbnQuYXQoLTEpfSdgIDogYCcke3JlcGxhY2VtZW50fSdgO1xuICB3YXJuKGBbVnVldGlmeSBVUEdSQURFXSAnJHtvcmlnaW5hbH0nIGlzIGRlcHJlY2F0ZWQsIHVzZSAke3JlcGxhY2VtZW50fSBpbnN0ZWFkLmApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJyZWFraW5nKG9yaWdpbmFsLCByZXBsYWNlbWVudCkge1xuICAvLyB3YXJuKGBbVnVldGlmeSBCUkVBS0lOR10gJyR7b3JpZ2luYWx9JyBoYXMgYmVlbiByZW1vdmVkLCB1c2UgJyR7cmVwbGFjZW1lbnR9JyBpbnN0ZWFkLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSB1cGdyYWRlIGd1aWRlIGh0dHBzOi8vZ2l0aHViLmNvbS92dWV0aWZ5anMvdnVldGlmeS9yZWxlYXNlcy90YWcvdjIuMC4wI3VzZXItY29udGVudC11cGdyYWRlLWd1aWRlYClcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVkKG9yaWdpbmFsKSB7XG4gIC8vIHdhcm4oYFtWdWV0aWZ5IFJFTU9WRURdICcke29yaWdpbmFsfScgaGFzIGJlZW4gcmVtb3ZlZC4gWW91IGNhbiBzYWZlbHkgb21pdCBpdC5gKVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc29sZS5tanMubWFwIiwiLy8gVHlwZXNcblxuY29uc3QgZGVsdGEgPSAwLjIwNjg5NjU1MTcyNDEzNzkzOyAvLyA2w7cyOVxuXG5jb25zdCBjaWVsYWJGb3J3YXJkVHJhbnNmb3JtID0gdCA9PiB0ID4gZGVsdGEgKiogMyA/IE1hdGguY2JydCh0KSA6IHQgLyAoMyAqIGRlbHRhICoqIDIpICsgNCAvIDI5O1xuY29uc3QgY2llbGFiUmV2ZXJzZVRyYW5zZm9ybSA9IHQgPT4gdCA+IGRlbHRhID8gdCAqKiAzIDogMyAqIGRlbHRhICoqIDIgKiAodCAtIDQgLyAyOSk7XG5leHBvcnQgZnVuY3Rpb24gZnJvbVhZWih4eXopIHtcbiAgY29uc3QgdHJhbnNmb3JtID0gY2llbGFiRm9yd2FyZFRyYW5zZm9ybTtcbiAgY29uc3QgdHJhbnNmb3JtZWRZID0gdHJhbnNmb3JtKHh5elsxXSk7XG4gIHJldHVybiBbMTE2ICogdHJhbnNmb3JtZWRZIC0gMTYsIDUwMCAqICh0cmFuc2Zvcm0oeHl6WzBdIC8gMC45NTA0NykgLSB0cmFuc2Zvcm1lZFkpLCAyMDAgKiAodHJhbnNmb3JtZWRZIC0gdHJhbnNmb3JtKHh5elsyXSAvIDEuMDg4ODMpKV07XG59XG5leHBvcnQgZnVuY3Rpb24gdG9YWVoobGFiKSB7XG4gIGNvbnN0IHRyYW5zZm9ybSA9IGNpZWxhYlJldmVyc2VUcmFuc2Zvcm07XG4gIGNvbnN0IExuID0gKGxhYlswXSArIDE2KSAvIDExNjtcbiAgcmV0dXJuIFt0cmFuc2Zvcm0oTG4gKyBsYWJbMV0gLyA1MDApICogMC45NTA0NywgdHJhbnNmb3JtKExuKSwgdHJhbnNmb3JtKExuIC0gbGFiWzJdIC8gMjAwKSAqIDEuMDg4ODNdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNmb3JtQ0lFTEFCLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNsYW1wIH0gZnJvbSBcIi4uL2hlbHBlcnMubWpzXCI7IC8vIFR5cGVzXG4vLyBGb3IgY29udmVydGluZyBYWVogdG8gc1JHQlxuY29uc3Qgc3JnYkZvcndhcmRNYXRyaXggPSBbWzMuMjQwNiwgLTEuNTM3MiwgLTAuNDk4Nl0sIFstMC45Njg5LCAxLjg3NTgsIDAuMDQxNV0sIFswLjA1NTcsIC0wLjIwNDAsIDEuMDU3MF1dO1xuXG4vLyBGb3J3YXJkIGdhbW1hIGFkanVzdFxuY29uc3Qgc3JnYkZvcndhcmRUcmFuc2Zvcm0gPSBDID0+IEMgPD0gMC4wMDMxMzA4ID8gQyAqIDEyLjkyIDogMS4wNTUgKiBDICoqICgxIC8gMi40KSAtIDAuMDU1O1xuXG4vLyBGb3IgY29udmVydGluZyBzUkdCIHRvIFhZWlxuY29uc3Qgc3JnYlJldmVyc2VNYXRyaXggPSBbWzAuNDEyNCwgMC4zNTc2LCAwLjE4MDVdLCBbMC4yMTI2LCAwLjcxNTIsIDAuMDcyMl0sIFswLjAxOTMsIDAuMTE5MiwgMC45NTA1XV07XG5cbi8vIFJldmVyc2UgZ2FtbWEgYWRqdXN0XG5jb25zdCBzcmdiUmV2ZXJzZVRyYW5zZm9ybSA9IEMgPT4gQyA8PSAwLjA0MDQ1ID8gQyAvIDEyLjkyIDogKChDICsgMC4wNTUpIC8gMS4wNTUpICoqIDIuNDtcbmV4cG9ydCBmdW5jdGlvbiBmcm9tWFlaKHh5eikge1xuICBjb25zdCByZ2IgPSBBcnJheSgzKTtcbiAgY29uc3QgdHJhbnNmb3JtID0gc3JnYkZvcndhcmRUcmFuc2Zvcm07XG4gIGNvbnN0IG1hdHJpeCA9IHNyZ2JGb3J3YXJkTWF0cml4O1xuXG4gIC8vIE1hdHJpeCB0cmFuc2Zvcm0sIHRoZW4gZ2FtbWEgYWRqdXN0bWVudFxuICBmb3IgKGxldCBpID0gMDsgaSA8IDM7ICsraSkge1xuICAgIC8vIFJlc2NhbGUgYmFjayB0byBbMCwgMjU1XVxuICAgIHJnYltpXSA9IE1hdGgucm91bmQoY2xhbXAodHJhbnNmb3JtKG1hdHJpeFtpXVswXSAqIHh5elswXSArIG1hdHJpeFtpXVsxXSAqIHh5elsxXSArIG1hdHJpeFtpXVsyXSAqIHh5elsyXSkpICogMjU1KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHI6IHJnYlswXSxcbiAgICBnOiByZ2JbMV0sXG4gICAgYjogcmdiWzJdXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdG9YWVooX3JlZikge1xuICBsZXQge1xuICAgIHIsXG4gICAgZyxcbiAgICBiXG4gIH0gPSBfcmVmO1xuICBjb25zdCB4eXogPSBbMCwgMCwgMF07XG4gIGNvbnN0IHRyYW5zZm9ybSA9IHNyZ2JSZXZlcnNlVHJhbnNmb3JtO1xuICBjb25zdCBtYXRyaXggPSBzcmdiUmV2ZXJzZU1hdHJpeDtcblxuICAvLyBSZXNjYWxlIGZyb20gWzAsIDI1NV0gdG8gWzAsIDFdIHRoZW4gYWRqdXN0IHNSR0IgZ2FtbWEgdG8gbGluZWFyIFJHQlxuICByID0gdHJhbnNmb3JtKHIgLyAyNTUpO1xuICBnID0gdHJhbnNmb3JtKGcgLyAyNTUpO1xuICBiID0gdHJhbnNmb3JtKGIgLyAyNTUpO1xuXG4gIC8vIE1hdHJpeCBjb2xvciBzcGFjZSB0cmFuc2Zvcm1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyArK2kpIHtcbiAgICB4eXpbaV0gPSBtYXRyaXhbaV1bMF0gKiByICsgbWF0cml4W2ldWzFdICogZyArIG1hdHJpeFtpXVsyXSAqIGI7XG4gIH1cbiAgcmV0dXJuIHh5ejtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zZm9ybVNSR0IubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgQVBDQWNvbnRyYXN0IH0gZnJvbSBcIi4vY29sb3IvQVBDQS5tanNcIjtcbmltcG9ydCB7IGNvbnNvbGVXYXJuIH0gZnJvbSBcIi4vY29uc29sZS5tanNcIjtcbmltcG9ydCB7IGNodW5rLCBoYXMsIHBhZEVuZCB9IGZyb20gXCIuL2hlbHBlcnMubWpzXCI7XG5pbXBvcnQgKiBhcyBDSUVMQUIgZnJvbSBcIi4vY29sb3IvdHJhbnNmb3JtQ0lFTEFCLm1qc1wiO1xuaW1wb3J0ICogYXMgc1JHQiBmcm9tIFwiLi9jb2xvci90cmFuc2Zvcm1TUkdCLm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ3NzQ29sb3IoY29sb3IpIHtcbiAgcmV0dXJuICEhY29sb3IgJiYgL14oI3x2YXJcXCgtLXwocmdifGhzbClhP1xcKCkvLnRlc3QoY29sb3IpO1xufVxuY29uc3QgY3NzQ29sb3JSZSA9IC9eKD88Zm4+KD86cmdifGhzbClhPylcXCgoPzx2YWx1ZXM+LispXFwpLztcbmNvbnN0IG1hcHBlcnMgPSB7XG4gIHJnYjogKHIsIGcsIGIsIGEpID0+ICh7XG4gICAgcixcbiAgICBnLFxuICAgIGIsXG4gICAgYVxuICB9KSxcbiAgcmdiYTogKHIsIGcsIGIsIGEpID0+ICh7XG4gICAgcixcbiAgICBnLFxuICAgIGIsXG4gICAgYVxuICB9KSxcbiAgaHNsOiAoaCwgcywgbCwgYSkgPT4gSFNMdG9SR0Ioe1xuICAgIGgsXG4gICAgcyxcbiAgICBsLFxuICAgIGFcbiAgfSksXG4gIGhzbGE6IChoLCBzLCBsLCBhKSA9PiBIU0x0b1JHQih7XG4gICAgaCxcbiAgICBzLFxuICAgIGwsXG4gICAgYVxuICB9KSxcbiAgaHN2OiAoaCwgcywgdiwgYSkgPT4gSFNWdG9SR0Ioe1xuICAgIGgsXG4gICAgcyxcbiAgICB2LFxuICAgIGFcbiAgfSksXG4gIGhzdmE6IChoLCBzLCB2LCBhKSA9PiBIU1Z0b1JHQih7XG4gICAgaCxcbiAgICBzLFxuICAgIHYsXG4gICAgYVxuICB9KVxufTtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNvbG9yKGNvbG9yKSB7XG4gIGlmICh0eXBlb2YgY29sb3IgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKGlzTmFOKGNvbG9yKSB8fCBjb2xvciA8IDAgfHwgY29sb3IgPiAweEZGRkZGRikge1xuICAgICAgLy8gaW50IGNhbid0IGhhdmUgb3BhY2l0eVxuICAgICAgY29uc29sZVdhcm4oYCcke2NvbG9yfScgaXMgbm90IGEgdmFsaWQgaGV4IGNvbG9yYCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICByOiAoY29sb3IgJiAweEZGMDAwMCkgPj4gMTYsXG4gICAgICBnOiAoY29sb3IgJiAweEZGMDApID4+IDgsXG4gICAgICBiOiBjb2xvciAmIDB4RkZcbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycgJiYgY3NzQ29sb3JSZS50ZXN0KGNvbG9yKSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGdyb3Vwc1xuICAgIH0gPSBjb2xvci5tYXRjaChjc3NDb2xvclJlKTtcbiAgICBjb25zdCB7XG4gICAgICBmbixcbiAgICAgIHZhbHVlc1xuICAgIH0gPSBncm91cHM7XG4gICAgY29uc3QgcmVhbFZhbHVlcyA9IHZhbHVlcy5zcGxpdCgvLFxccyovKS5tYXAodiA9PiB7XG4gICAgICBpZiAodi5lbmRzV2l0aCgnJScpICYmIFsnaHNsJywgJ2hzbGEnLCAnaHN2JywgJ2hzdmEnXS5pbmNsdWRlcyhmbikpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodikgLyAxMDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbWFwcGVyc1tmbl0oLi4ucmVhbFZhbHVlcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNvbG9yID09PSAnc3RyaW5nJykge1xuICAgIGxldCBoZXggPSBjb2xvci5zdGFydHNXaXRoKCcjJykgPyBjb2xvci5zbGljZSgxKSA6IGNvbG9yO1xuICAgIGlmIChbMywgNF0uaW5jbHVkZXMoaGV4Lmxlbmd0aCkpIHtcbiAgICAgIGhleCA9IGhleC5zcGxpdCgnJykubWFwKGNoYXIgPT4gY2hhciArIGNoYXIpLmpvaW4oJycpO1xuICAgIH0gZWxzZSBpZiAoIVs2LCA4XS5pbmNsdWRlcyhoZXgubGVuZ3RoKSkge1xuICAgICAgY29uc29sZVdhcm4oYCcke2NvbG9yfScgaXMgbm90IGEgdmFsaWQgaGV4KGEpIGNvbG9yYCk7XG4gICAgfVxuICAgIGNvbnN0IGludCA9IHBhcnNlSW50KGhleCwgMTYpO1xuICAgIGlmIChpc05hTihpbnQpIHx8IGludCA8IDAgfHwgaW50ID4gMHhGRkZGRkZGRikge1xuICAgICAgY29uc29sZVdhcm4oYCcke2NvbG9yfScgaXMgbm90IGEgdmFsaWQgaGV4KGEpIGNvbG9yYCk7XG4gICAgfVxuICAgIHJldHVybiBIZXhUb1JHQihoZXgpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAoaGFzKGNvbG9yLCBbJ3InLCAnZycsICdiJ10pKSB7XG4gICAgICByZXR1cm4gY29sb3I7XG4gICAgfSBlbHNlIGlmIChoYXMoY29sb3IsIFsnaCcsICdzJywgJ2wnXSkpIHtcbiAgICAgIHJldHVybiBIU1Z0b1JHQihIU0x0b0hTVihjb2xvcikpO1xuICAgIH0gZWxzZSBpZiAoaGFzKGNvbG9yLCBbJ2gnLCAncycsICd2J10pKSB7XG4gICAgICByZXR1cm4gSFNWdG9SR0IoY29sb3IpO1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGNvbG9yOiAke2NvbG9yID09IG51bGwgPyBjb2xvciA6IFN0cmluZyhjb2xvcikgfHwgY29sb3IuY29uc3RydWN0b3IubmFtZX1cXG5FeHBlY3RlZCAjaGV4LCAjaGV4YSwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgb2JqZWN0IG9yIG51bWJlcmApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIFJHQlRvSW50KGNvbG9yKSB7XG4gIHJldHVybiAoY29sb3IuciA8PCAxNikgKyAoY29sb3IuZyA8PCA4KSArIGNvbG9yLmI7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xhc3NUb0hleChjb2xvciwgY29sb3JzLCBjdXJyZW50VGhlbWUpIHtcbiAgY29uc3QgW2NvbG9yTmFtZSwgY29sb3JNb2RpZmllcl0gPSBjb2xvci50b1N0cmluZygpLnRyaW0oKS5yZXBsYWNlKCctJywgJycpLnNwbGl0KCcgJywgMik7XG4gIGxldCBoZXhDb2xvciA9ICcnO1xuICBpZiAoY29sb3JOYW1lICYmIGNvbG9yTmFtZSBpbiBjb2xvcnMpIHtcbiAgICBpZiAoY29sb3JNb2RpZmllciAmJiBjb2xvck1vZGlmaWVyIGluIGNvbG9yc1tjb2xvck5hbWVdKSB7XG4gICAgICBoZXhDb2xvciA9IGNvbG9yc1tjb2xvck5hbWVdW2NvbG9yTW9kaWZpZXJdO1xuICAgIH0gZWxzZSBpZiAoJ2Jhc2UnIGluIGNvbG9yc1tjb2xvck5hbWVdKSB7XG4gICAgICBoZXhDb2xvciA9IGNvbG9yc1tjb2xvck5hbWVdLmJhc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNvbG9yTmFtZSAmJiBjb2xvck5hbWUgaW4gY3VycmVudFRoZW1lKSB7XG4gICAgaGV4Q29sb3IgPSBjdXJyZW50VGhlbWVbY29sb3JOYW1lXTtcbiAgfVxuICByZXR1cm4gaGV4Q29sb3I7XG59XG5cbi8qKiBDb252ZXJ0cyBIU1ZBIHRvIFJHQkEuIEJhc2VkIG9uIGZvcm11bGEgZnJvbSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IU0xfYW5kX0hTViAqL1xuZXhwb3J0IGZ1bmN0aW9uIEhTVnRvUkdCKGhzdmEpIHtcbiAgY29uc3Qge1xuICAgIGgsXG4gICAgcyxcbiAgICB2LFxuICAgIGFcbiAgfSA9IGhzdmE7XG4gIGNvbnN0IGYgPSBuID0+IHtcbiAgICBjb25zdCBrID0gKG4gKyBoIC8gNjApICUgNjtcbiAgICByZXR1cm4gdiAtIHYgKiBzICogTWF0aC5tYXgoTWF0aC5taW4oaywgNCAtIGssIDEpLCAwKTtcbiAgfTtcbiAgY29uc3QgcmdiID0gW2YoNSksIGYoMyksIGYoMSldLm1hcCh2ID0+IE1hdGgucm91bmQodiAqIDI1NSkpO1xuICByZXR1cm4ge1xuICAgIHI6IHJnYlswXSxcbiAgICBnOiByZ2JbMV0sXG4gICAgYjogcmdiWzJdLFxuICAgIGFcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBIU0x0b1JHQihoc2xhKSB7XG4gIHJldHVybiBIU1Z0b1JHQihIU0x0b0hTVihoc2xhKSk7XG59XG5cbi8qKiBDb252ZXJ0cyBSR0JBIHRvIEhTVkEuIEJhc2VkIG9uIGZvcm11bGEgZnJvbSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IU0xfYW5kX0hTViAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJHQnRvSFNWKHJnYmEpIHtcbiAgaWYgKCFyZ2JhKSByZXR1cm4ge1xuICAgIGg6IDAsXG4gICAgczogMSxcbiAgICB2OiAxLFxuICAgIGE6IDFcbiAgfTtcbiAgY29uc3QgciA9IHJnYmEuciAvIDI1NTtcbiAgY29uc3QgZyA9IHJnYmEuZyAvIDI1NTtcbiAgY29uc3QgYiA9IHJnYmEuYiAvIDI1NTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gIGNvbnN0IG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICBsZXQgaCA9IDA7XG4gIGlmIChtYXggIT09IG1pbikge1xuICAgIGlmIChtYXggPT09IHIpIHtcbiAgICAgIGggPSA2MCAqICgwICsgKGcgLSBiKSAvIChtYXggLSBtaW4pKTtcbiAgICB9IGVsc2UgaWYgKG1heCA9PT0gZykge1xuICAgICAgaCA9IDYwICogKDIgKyAoYiAtIHIpIC8gKG1heCAtIG1pbikpO1xuICAgIH0gZWxzZSBpZiAobWF4ID09PSBiKSB7XG4gICAgICBoID0gNjAgKiAoNCArIChyIC0gZykgLyAobWF4IC0gbWluKSk7XG4gICAgfVxuICB9XG4gIGlmIChoIDwgMCkgaCA9IGggKyAzNjA7XG4gIGNvbnN0IHMgPSBtYXggPT09IDAgPyAwIDogKG1heCAtIG1pbikgLyBtYXg7XG4gIGNvbnN0IGhzdiA9IFtoLCBzLCBtYXhdO1xuICByZXR1cm4ge1xuICAgIGg6IGhzdlswXSxcbiAgICBzOiBoc3ZbMV0sXG4gICAgdjogaHN2WzJdLFxuICAgIGE6IHJnYmEuYVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIEhTVnRvSFNMKGhzdmEpIHtcbiAgY29uc3Qge1xuICAgIGgsXG4gICAgcyxcbiAgICB2LFxuICAgIGFcbiAgfSA9IGhzdmE7XG4gIGNvbnN0IGwgPSB2IC0gdiAqIHMgLyAyO1xuICBjb25zdCBzcHJpbWUgPSBsID09PSAxIHx8IGwgPT09IDAgPyAwIDogKHYgLSBsKSAvIE1hdGgubWluKGwsIDEgLSBsKTtcbiAgcmV0dXJuIHtcbiAgICBoLFxuICAgIHM6IHNwcmltZSxcbiAgICBsLFxuICAgIGFcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBIU0x0b0hTVihoc2wpIHtcbiAgY29uc3Qge1xuICAgIGgsXG4gICAgcyxcbiAgICBsLFxuICAgIGFcbiAgfSA9IGhzbDtcbiAgY29uc3QgdiA9IGwgKyBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICBjb25zdCBzcHJpbWUgPSB2ID09PSAwID8gMCA6IDIgLSAyICogbCAvIHY7XG4gIHJldHVybiB7XG4gICAgaCxcbiAgICBzOiBzcHJpbWUsXG4gICAgdixcbiAgICBhXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gUkdCdG9DU1MoX3JlZikge1xuICBsZXQge1xuICAgIHIsXG4gICAgZyxcbiAgICBiLFxuICAgIGFcbiAgfSA9IF9yZWY7XG4gIHJldHVybiBhID09PSB1bmRlZmluZWQgPyBgcmdiKCR7cn0sICR7Z30sICR7Yn0pYCA6IGByZ2JhKCR7cn0sICR7Z30sICR7Yn0sICR7YX0pYDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBIU1Z0b0NTUyhoc3ZhKSB7XG4gIHJldHVybiBSR0J0b0NTUyhIU1Z0b1JHQihoc3ZhKSk7XG59XG5mdW5jdGlvbiB0b0hleCh2KSB7XG4gIGNvbnN0IGggPSBNYXRoLnJvdW5kKHYpLnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuICgnMDAnLnN1YnN0cigwLCAyIC0gaC5sZW5ndGgpICsgaCkudG9VcHBlckNhc2UoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBSR0J0b0hleChfcmVmMikge1xuICBsZXQge1xuICAgIHIsXG4gICAgZyxcbiAgICBiLFxuICAgIGFcbiAgfSA9IF9yZWYyO1xuICByZXR1cm4gYCMke1t0b0hleChyKSwgdG9IZXgoZyksIHRvSGV4KGIpLCBhICE9PSB1bmRlZmluZWQgPyB0b0hleChNYXRoLnJvdW5kKGEgKiAyNTUpKSA6ICcnXS5qb2luKCcnKX1gO1xufVxuZXhwb3J0IGZ1bmN0aW9uIEhleFRvUkdCKGhleCkge1xuICBoZXggPSBwYXJzZUhleChoZXgpO1xuICBsZXQgW3IsIGcsIGIsIGFdID0gY2h1bmsoaGV4LCAyKS5tYXAoYyA9PiBwYXJzZUludChjLCAxNikpO1xuICBhID0gYSA9PT0gdW5kZWZpbmVkID8gYSA6IGEgLyAyNTU7XG4gIHJldHVybiB7XG4gICAgcixcbiAgICBnLFxuICAgIGIsXG4gICAgYVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIEhleFRvSFNWKGhleCkge1xuICBjb25zdCByZ2IgPSBIZXhUb1JHQihoZXgpO1xuICByZXR1cm4gUkdCdG9IU1YocmdiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBIU1Z0b0hleChoc3ZhKSB7XG4gIHJldHVybiBSR0J0b0hleChIU1Z0b1JHQihoc3ZhKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VIZXgoaGV4KSB7XG4gIGlmIChoZXguc3RhcnRzV2l0aCgnIycpKSB7XG4gICAgaGV4ID0gaGV4LnNsaWNlKDEpO1xuICB9XG4gIGhleCA9IGhleC5yZXBsYWNlKC8oW14wLTlhLWZdKS9naSwgJ0YnKTtcbiAgaWYgKGhleC5sZW5ndGggPT09IDMgfHwgaGV4Lmxlbmd0aCA9PT0gNCkge1xuICAgIGhleCA9IGhleC5zcGxpdCgnJykubWFwKHggPT4geCArIHgpLmpvaW4oJycpO1xuICB9XG4gIGlmIChoZXgubGVuZ3RoICE9PSA2KSB7XG4gICAgaGV4ID0gcGFkRW5kKHBhZEVuZChoZXgsIDYpLCA4LCAnRicpO1xuICB9XG4gIHJldHVybiBoZXg7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHcmFkaWVudChncmFkaWVudCwgY29sb3JzLCBjdXJyZW50VGhlbWUpIHtcbiAgcmV0dXJuIGdyYWRpZW50LnJlcGxhY2UoLyhbYS16XSsoXFxzW2Etel0rLVsxLTVdKT8pKD89JHwsKS9naSwgeCA9PiB7XG4gICAgcmV0dXJuIGNsYXNzVG9IZXgoeCwgY29sb3JzLCBjdXJyZW50VGhlbWUpIHx8IHg7XG4gIH0pLnJlcGxhY2UoLyhyZ2JhXFwoKSNbMC05YS1mXSsoPz0sKS9naSwgeCA9PiB7XG4gICAgcmV0dXJuICdyZ2JhKCcgKyBPYmplY3QudmFsdWVzKEhleFRvUkdCKHBhcnNlSGV4KHgucmVwbGFjZSgvcmdiYVxcKC8sICcnKSkpKS5zbGljZSgwLCAzKS5qb2luKCcsJyk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGxpZ2h0ZW4odmFsdWUsIGFtb3VudCkge1xuICBjb25zdCBsYWIgPSBDSUVMQUIuZnJvbVhZWihzUkdCLnRvWFlaKHZhbHVlKSk7XG4gIGxhYlswXSA9IGxhYlswXSArIGFtb3VudCAqIDEwO1xuICByZXR1cm4gc1JHQi5mcm9tWFlaKENJRUxBQi50b1hZWihsYWIpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkYXJrZW4odmFsdWUsIGFtb3VudCkge1xuICBjb25zdCBsYWIgPSBDSUVMQUIuZnJvbVhZWihzUkdCLnRvWFlaKHZhbHVlKSk7XG4gIGxhYlswXSA9IGxhYlswXSAtIGFtb3VudCAqIDEwO1xuICByZXR1cm4gc1JHQi5mcm9tWFlaKENJRUxBQi50b1hZWihsYWIpKTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHJlbGF0aXZlIGx1bWluYW5jZSBvZiBhIGdpdmVuIGNvbG9yXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMdW1hKGNvbG9yKSB7XG4gIGNvbnN0IHJnYiA9IHBhcnNlQ29sb3IoY29sb3IpO1xuICByZXR1cm4gc1JHQi50b1hZWihyZ2IpWzFdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRyYXN0IHJhdGlvICgxLTIxKSBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAvI2NvbnRyYXN0LXJhdGlvZGVmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cmFzdChmaXJzdCwgc2Vjb25kKSB7XG4gIGNvbnN0IGwxID0gZ2V0THVtYShmaXJzdCk7XG4gIGNvbnN0IGwyID0gZ2V0THVtYShzZWNvbmQpO1xuICBjb25zdCBsaWdodCA9IE1hdGgubWF4KGwxLCBsMik7XG4gIGNvbnN0IGRhcmsgPSBNYXRoLm1pbihsMSwgbDIpO1xuICByZXR1cm4gKGxpZ2h0ICsgMC4wNSkgLyAoZGFyayArIDAuMDUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcmVncm91bmQoY29sb3IpIHtcbiAgY29uc3QgYmxhY2tDb250cmFzdCA9IE1hdGguYWJzKEFQQ0Fjb250cmFzdChwYXJzZUNvbG9yKDApLCBwYXJzZUNvbG9yKGNvbG9yKSkpO1xuICBjb25zdCB3aGl0ZUNvbnRyYXN0ID0gTWF0aC5hYnMoQVBDQWNvbnRyYXN0KHBhcnNlQ29sb3IoMHhmZmZmZmYpLCBwYXJzZUNvbG9yKGNvbG9yKSkpO1xuXG4gIC8vIFRPRE86IHdhcm4gYWJvdXQgcG9vciBjb2xvciBzZWxlY3Rpb25zXG4gIC8vIGNvbnN0IGNvbnRyYXN0QXNUZXh0ID0gTWF0aC5hYnMoQVBDQWNvbnRyYXN0KGNvbG9yVmFsLCBjb2xvclRvSW50KHRoZW1lLmNvbG9ycy5iYWNrZ3JvdW5kKSkpXG4gIC8vIGNvbnN0IG1pbkNvbnRyYXN0ID0gTWF0aC5tYXgoYmxhY2tDb250cmFzdCwgd2hpdGVDb250cmFzdClcbiAgLy8gaWYgKG1pbkNvbnRyYXN0IDwgNjApIHtcbiAgLy8gICBjb25zb2xlSW5mbyhgJHtrZXl9IHRoZW1lIGNvbG9yICR7Y29sb3J9IGhhcyBwb29yIGNvbnRyYXN0ICgke21pbkNvbnRyYXN0LnRvRml4ZWQoKX0lKWApXG4gIC8vIH0gZWxzZSBpZiAoY29udHJhc3RBc1RleHQgPCA2MCAmJiAhWydiYWNrZ3JvdW5kJywgJ3N1cmZhY2UnXS5pbmNsdWRlcyhjb2xvcikpIHtcbiAgLy8gICBjb25zb2xlSW5mbyhgJHtrZXl9IHRoZW1lIGNvbG9yICR7Y29sb3J9IGhhcyBwb29yIGNvbnRyYXN0IGFzIHRleHQgKCR7Y29udHJhc3RBc1RleHQudG9GaXhlZCgpfSUpYClcbiAgLy8gfVxuXG4gIC8vIFByZWZlciB3aGl0ZSB0ZXh0IGlmIGJvdGggaGF2ZSBhbiBhY2NlcHRhYmxlIGNvbnRyYXN0IHJhdGlvXG4gIHJldHVybiB3aGl0ZUNvbnRyYXN0ID4gTWF0aC5taW4oYmxhY2tDb250cmFzdCwgNTApID8gJyNmZmYnIDogJyMwMDAnO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sb3JVdGlscy5tanMubWFwIiwiLy8gVHlwZXNcbi8vIGVzbGludC1kaXNhYmxlLWxpbmUgdnVlL3ByZWZlci1pbXBvcnQtZnJvbS12dWVcblxuLyoqXG4gKiBDcmVhdGVzIGEgZmFjdG9yeSBmdW5jdGlvbiBmb3IgcHJvcHMgZGVmaW5pdGlvbnMuXG4gKiBUaGlzIGlzIHVzZWQgdG8gZGVmaW5lIHByb3BzIGluIGEgY29tcG9zYWJsZSB0aGVuIG92ZXJyaWRlXG4gKiBkZWZhdWx0IHZhbHVlcyBpbiBhbiBpbXBsZW1lbnRpbmcgY29tcG9uZW50LlxuICpcbiAqIEBleGFtcGxlIFNpbXBsaWZpZWQgc2lnbmF0dXJlXG4gKiAocHJvcHM6IFByb3BzKSA9PiAoZGVmYXVsdHM/OiBSZWNvcmQ8a2V5b2YgcHJvcHMsIGFueT4pID0+IFByb3BzXG4gKlxuICogQGV4YW1wbGUgVXNhZ2VcbiAqIGNvbnN0IG1ha2VQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gKiAgIGZvbzogU3RyaW5nLFxuICogfSlcbiAqXG4gKiBkZWZpbmVDb21wb25lbnQoe1xuICogICBwcm9wczoge1xuICogICAgIC4uLm1ha2VQcm9wcyh7XG4gKiAgICAgICBmb286ICdhJyxcbiAqICAgICB9KSxcbiAqICAgfSxcbiAqICAgc2V0dXAgKHByb3BzKSB7XG4gKiAgICAgLy8gd291bGQgYmUgXCJzdHJpbmcgfCB1bmRlZmluZWRcIiwgbm93IFwic3RyaW5nXCIgYmVjYXVzZSBhIGRlZmF1bHQgaGFzIGJlZW4gcHJvdmlkZWRcbiAqICAgICBwcm9wcy5mb29cbiAqICAgfSxcbiAqIH1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvcHNGYWN0b3J5KHByb3BzLCBzb3VyY2UpIHtcbiAgcmV0dXJuIGRlZmF1bHRzID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZSgob2JqLCBwcm9wKSA9PiB7XG4gICAgICBjb25zdCBpc09iamVjdERlZmluaXRpb24gPSB0eXBlb2YgcHJvcHNbcHJvcF0gPT09ICdvYmplY3QnICYmIHByb3BzW3Byb3BdICE9IG51bGwgJiYgIUFycmF5LmlzQXJyYXkocHJvcHNbcHJvcF0pO1xuICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IGlzT2JqZWN0RGVmaW5pdGlvbiA/IHByb3BzW3Byb3BdIDoge1xuICAgICAgICB0eXBlOiBwcm9wc1twcm9wXVxuICAgICAgfTtcbiAgICAgIGlmIChkZWZhdWx0cyAmJiBwcm9wIGluIGRlZmF1bHRzKSB7XG4gICAgICAgIG9ialtwcm9wXSA9IHtcbiAgICAgICAgICAuLi5kZWZpbml0aW9uLFxuICAgICAgICAgIGRlZmF1bHQ6IGRlZmF1bHRzW3Byb3BdXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmpbcHJvcF0gPSBkZWZpbml0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKHNvdXJjZSAmJiAhb2JqW3Byb3BdLnNvdXJjZSkge1xuICAgICAgICBvYmpbcHJvcF0uc291cmNlID0gc291cmNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LCB7fSk7XG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wc0ZhY3RvcnkubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvcHJvcHNGYWN0b3J5Lm1qc1wiOyAvLyBUeXBlc1xuLy8gQ29tcG9zYWJsZXNcbmV4cG9ydCBjb25zdCBtYWtlQ29tcG9uZW50UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjbGFzczogW1N0cmluZywgQXJyYXldLFxuICBzdHlsZToge1xuICAgIHR5cGU6IFtTdHJpbmcsIEFycmF5LCBPYmplY3RdLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfVxufSwgJ2NvbXBvbmVudCcpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9uZW50Lm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgaW5qZWN0RGVmYXVsdHMsIGludGVybmFsVXNlRGVmYXVsdHMgfSBmcm9tIFwiLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IGFzIF9kZWZpbmVDb21wb25lbnQgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLWltcG9ydHNcbn0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnNvbGVXYXJuIH0gZnJvbSBcIi4vY29uc29sZS5tanNcIjtcbmltcG9ydCB7IHBpY2sgfSBmcm9tIFwiLi9oZWxwZXJzLm1qc1wiO1xuaW1wb3J0IHsgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4vcHJvcHNGYWN0b3J5Lm1qc1wiOyAvLyBUeXBlc1xuLy8gSW1wbGVtZW50YXRpb25cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVDb21wb25lbnQob3B0aW9ucykge1xuICBvcHRpb25zLl9zZXR1cCA9IG9wdGlvbnMuX3NldHVwID8/IG9wdGlvbnMuc2V0dXA7XG4gIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgY29uc29sZVdhcm4oJ1RoZSBjb21wb25lbnQgaXMgbWlzc2luZyBhbiBleHBsaWNpdCBuYW1lLCB1bmFibGUgdG8gZ2VuZXJhdGUgZGVmYXVsdCBwcm9wIHZhbHVlJyk7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cbiAgaWYgKG9wdGlvbnMuX3NldHVwKSB7XG4gICAgb3B0aW9ucy5wcm9wcyA9IHByb3BzRmFjdG9yeShvcHRpb25zLnByb3BzID8/IHt9LCBvcHRpb25zLm5hbWUpKCk7XG4gICAgY29uc3QgcHJvcEtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zLnByb3BzKTtcbiAgICBvcHRpb25zLmZpbHRlclByb3BzID0gZnVuY3Rpb24gZmlsdGVyUHJvcHMocHJvcHMpIHtcbiAgICAgIHJldHVybiBwaWNrKHByb3BzLCBwcm9wS2V5cywgWydjbGFzcycsICdzdHlsZSddKTtcbiAgICB9O1xuICAgIG9wdGlvbnMucHJvcHMuX2FzID0gU3RyaW5nO1xuICAgIG9wdGlvbnMuc2V0dXAgPSBmdW5jdGlvbiBzZXR1cChwcm9wcywgY3R4KSB7XG4gICAgICBjb25zdCBkZWZhdWx0cyA9IGluamVjdERlZmF1bHRzKCk7XG5cbiAgICAgIC8vIFNraXAgcHJvcHMgcHJveHkgaWYgZGVmYXVsdHMgYXJlIG5vdCBwcm92aWRlZFxuICAgICAgaWYgKCFkZWZhdWx0cy52YWx1ZSkgcmV0dXJuIG9wdGlvbnMuX3NldHVwKHByb3BzLCBjdHgpO1xuICAgICAgY29uc3Qge1xuICAgICAgICBwcm9wczogX3Byb3BzLFxuICAgICAgICBwcm92aWRlU3ViRGVmYXVsdHNcbiAgICAgIH0gPSBpbnRlcm5hbFVzZURlZmF1bHRzKHByb3BzLCBwcm9wcy5fYXMgPz8gb3B0aW9ucy5uYW1lLCBkZWZhdWx0cyk7XG4gICAgICBjb25zdCBzZXR1cEJpbmRpbmdzID0gb3B0aW9ucy5fc2V0dXAoX3Byb3BzLCBjdHgpO1xuICAgICAgcHJvdmlkZVN1YkRlZmF1bHRzKCk7XG4gICAgICByZXR1cm4gc2V0dXBCaW5kaW5ncztcbiAgICB9O1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufVxuLy8gSW1wbGVtZW50YXRpb25cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmljQ29tcG9uZW50KCkge1xuICBsZXQgZXhwb3NlRGVmYXVsdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG4gIHJldHVybiBvcHRpb25zID0+IChleHBvc2VEZWZhdWx0cyA/IGRlZmluZUNvbXBvbmVudCA6IF9kZWZpbmVDb21wb25lbnQpKG9wdGlvbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZUZ1bmN0aW9uYWxDb21wb25lbnQocHJvcHMsIHJlbmRlcikge1xuICByZW5kZXIucHJvcHMgPSBwcm9wcztcbiAgcmV0dXJuIHJlbmRlcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmluZUNvbXBvbmVudC5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY2FtZWxpemUsIGNhcGl0YWxpemUsIGggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCB9IGZyb20gXCIuL2RlZmluZUNvbXBvbmVudC5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKGtsYXNzKSB7XG4gIGxldCB0YWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdkaXYnO1xuICBsZXQgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICByZXR1cm4gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgICBuYW1lOiBuYW1lID8/IGNhcGl0YWxpemUoY2FtZWxpemUoa2xhc3MucmVwbGFjZSgvX18vZywgJy0nKSkpLFxuICAgIHByb3BzOiB7XG4gICAgICB0YWc6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiB0YWdcbiAgICAgIH0sXG4gICAgICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKVxuICAgIH0sXG4gICAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIHNsb3RzXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBoKHByb3BzLnRhZywge1xuICAgICAgICAgIGNsYXNzOiBba2xhc3MsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgICBzdHlsZTogcHJvcHMuc3R5bGVcbiAgICAgICAgfSwgc2xvdHMuZGVmYXVsdD8uKCkpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlU2ltcGxlRnVuY3Rpb25hbC5tanMubWFwIiwiLyoqXG4gKiBSZXR1cm5zOlxuICogIC0gJ251bGwnIGlmIHRoZSBub2RlIGlzIG5vdCBhdHRhY2hlZCB0byB0aGUgRE9NXG4gKiAgLSB0aGUgcm9vdCBub2RlIChIVE1MRG9jdW1lbnQgfCBTaGFkb3dSb290KSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaGVkUm9vdChub2RlKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGlmICh0eXBlb2Ygbm9kZS5nZXRSb290Tm9kZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFNoYWRvdyBET00gbm90IHN1cHBvcnRlZCAoSUUxMSksIGxldHMgZmluZCB0aGUgcm9vdCBvZiB0aGlzIG5vZGVcbiAgICB3aGlsZSAobm9kZS5wYXJlbnROb2RlKSBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuXG4gICAgLy8gVGhlIHJvb3QgcGFyZW50IGlzIHRoZSBkb2N1bWVudCBpZiB0aGUgbm9kZSBpcyBhdHRhY2hlZCB0byB0aGUgRE9NXG4gICAgaWYgKG5vZGUgIT09IGRvY3VtZW50KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gZG9jdW1lbnQ7XG4gIH1cbiAgY29uc3Qgcm9vdCA9IG5vZGUuZ2V0Um9vdE5vZGUoKTtcblxuICAvLyBUaGUgY29tcG9zZWQgcm9vdCBub2RlIGlzIHRoZSBkb2N1bWVudCBpZiB0aGUgbm9kZSBpcyBhdHRhY2hlZCB0byB0aGUgRE9NXG4gIGlmIChyb290ICE9PSBkb2N1bWVudCAmJiByb290LmdldFJvb3ROb2RlKHtcbiAgICBjb21wb3NlZDogdHJ1ZVxuICB9KSAhPT0gZG9jdW1lbnQpIHJldHVybiBudWxsO1xuICByZXR1cm4gcm9vdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvbS5tanMubWFwIiwiZXhwb3J0IGNvbnN0IHN0YW5kYXJkRWFzaW5nID0gJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknO1xuZXhwb3J0IGNvbnN0IGRlY2VsZXJhdGVkRWFzaW5nID0gJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknOyAvLyBFbnRlcmluZ1xuZXhwb3J0IGNvbnN0IGFjY2VsZXJhdGVkRWFzaW5nID0gJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJzsgLy8gTGVhdmluZ1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWFzaW5nLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZSBhcyBfZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHRvS2ViYWJDYXNlIH0gZnJvbSBcIi4vaGVscGVycy5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50SW5zdGFuY2UobmFtZSwgbWVzc2FnZSkge1xuICBjb25zdCB2bSA9IF9nZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgaWYgKCF2bSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgW1Z1ZXRpZnldICR7bmFtZX0gJHttZXNzYWdlIHx8ICdtdXN0IGJlIGNhbGxlZCBmcm9tIGluc2lkZSBhIHNldHVwIGZ1bmN0aW9uJ31gKTtcbiAgfVxuICByZXR1cm4gdm07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudEluc3RhbmNlTmFtZSgpIHtcbiAgbGV0IG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdjb21wb3NhYmxlcyc7XG4gIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKG5hbWUpLnR5cGU7XG4gIHJldHVybiB0b0tlYmFiQ2FzZSh2bT8uYWxpYXNOYW1lIHx8IHZtPy5uYW1lKTtcbn1cbmxldCBfdWlkID0gMDtcbmxldCBfbWFwID0gbmV3IFdlYWtNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRVaWQoKSB7XG4gIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKCdnZXRVaWQnKTtcbiAgaWYgKF9tYXAuaGFzKHZtKSkgcmV0dXJuIF9tYXAuZ2V0KHZtKTtlbHNlIHtcbiAgICBjb25zdCB1aWQgPSBfdWlkKys7XG4gICAgX21hcC5zZXQodm0sIHVpZCk7XG4gICAgcmV0dXJuIHVpZDtcbiAgfVxufVxuZ2V0VWlkLnJlc2V0ID0gKCkgPT4ge1xuICBfdWlkID0gMDtcbiAgX21hcCA9IG5ldyBXZWFrTWFwKCk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0Q3VycmVudEluc3RhbmNlLm1qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsKSB7XG4gIGxldCBpbmNsdWRlSGlkZGVuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgd2hpbGUgKGVsKSB7XG4gICAgaWYgKGluY2x1ZGVIaWRkZW4gPyBpc1BvdGVudGlhbGx5U2Nyb2xsYWJsZShlbCkgOiBoYXNTY3JvbGxiYXIoZWwpKSByZXR1cm4gZWw7XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudHMoZWwsIHN0b3BBdCkge1xuICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICBpZiAoc3RvcEF0ICYmIGVsICYmICFzdG9wQXQuY29udGFpbnMoZWwpKSByZXR1cm4gZWxlbWVudHM7XG4gIHdoaWxlIChlbCkge1xuICAgIGlmIChoYXNTY3JvbGxiYXIoZWwpKSBlbGVtZW50cy5wdXNoKGVsKTtcbiAgICBpZiAoZWwgPT09IHN0b3BBdCkgYnJlYWs7XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50cztcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNTY3JvbGxiYXIoZWwpIHtcbiAgaWYgKCFlbCB8fCBlbC5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIHJldHVybiBzdHlsZS5vdmVyZmxvd1kgPT09ICdzY3JvbGwnIHx8IHN0eWxlLm92ZXJmbG93WSA9PT0gJ2F1dG8nICYmIGVsLnNjcm9sbEhlaWdodCA+IGVsLmNsaWVudEhlaWdodDtcbn1cbmZ1bmN0aW9uIGlzUG90ZW50aWFsbHlTY3JvbGxhYmxlKGVsKSB7XG4gIGlmICghZWwgfHwgZWwubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICByZXR1cm4gWydzY3JvbGwnLCAnYXV0byddLmluY2x1ZGVzKHN0eWxlLm92ZXJmbG93WSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRTY3JvbGxQYXJlbnQubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSBcIi4vZ2V0Q3VycmVudEluc3RhbmNlLm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFNlbGYoa2V5KSB7XG4gIGxldCB2bSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZ2V0Q3VycmVudEluc3RhbmNlKCdpbmplY3RTZWxmJyk7XG4gIGNvbnN0IHtcbiAgICBwcm92aWRlc1xuICB9ID0gdm07XG4gIGlmIChwcm92aWRlcyAmJiBrZXkgaW4gcHJvdmlkZXMpIHtcbiAgICAvLyBUUyBkb2Vzbid0IGFsbG93IHN5bWJvbCBhcyBpbmRleCB0eXBlXG4gICAgcmV0dXJuIHByb3ZpZGVzW2tleV07XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluamVjdFNlbGYubWpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc0ZpeGVkUG9zaXRpb24oZWwpIHtcbiAgd2hpbGUgKGVsKSB7XG4gICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsID0gZWwub2Zmc2V0UGFyZW50O1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRml4ZWRQb3NpdGlvbi5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tIFwiLi9nZXRDdXJyZW50SW5zdGFuY2UubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVuZGVyKHJlbmRlcikge1xuICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgndXNlUmVuZGVyJyk7XG4gIHZtLnJlbmRlciA9IHJlbmRlcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVJlbmRlci5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaW5qZWN0LCBwcm92aWRlLCByZWYsIHNoYWxsb3dSZWYsIHVucmVmLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2UsIGluamVjdFNlbGYsIG1lcmdlRGVlcCwgdG9LZWJhYkNhc2UgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBEZWZhdWx0c1N5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6ZGVmYXVsdHMnKTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0cyhvcHRpb25zKSB7XG4gIHJldHVybiByZWYob3B0aW9ucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0RGVmYXVsdHMoKSB7XG4gIGNvbnN0IGRlZmF1bHRzID0gaW5qZWN0KERlZmF1bHRzU3ltYm9sKTtcbiAgaWYgKCFkZWZhdWx0cykgdGhyb3cgbmV3IEVycm9yKCdbVnVldGlmeV0gQ291bGQgbm90IGZpbmQgZGVmYXVsdHMgaW5zdGFuY2UnKTtcbiAgcmV0dXJuIGRlZmF1bHRzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVEZWZhdWx0cyhkZWZhdWx0cywgb3B0aW9ucykge1xuICBjb25zdCBpbmplY3RlZERlZmF1bHRzID0gaW5qZWN0RGVmYXVsdHMoKTtcbiAgY29uc3QgcHJvdmlkZWREZWZhdWx0cyA9IHJlZihkZWZhdWx0cyk7XG4gIGNvbnN0IG5ld0RlZmF1bHRzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IGRpc2FibGVkID0gdW5yZWYob3B0aW9ucz8uZGlzYWJsZWQpO1xuICAgIGlmIChkaXNhYmxlZCkgcmV0dXJuIGluamVjdGVkRGVmYXVsdHMudmFsdWU7XG4gICAgY29uc3Qgc2NvcGVkID0gdW5yZWYob3B0aW9ucz8uc2NvcGVkKTtcbiAgICBjb25zdCByZXNldCA9IHVucmVmKG9wdGlvbnM/LnJlc2V0KTtcbiAgICBjb25zdCByb290ID0gdW5yZWYob3B0aW9ucz8ucm9vdCk7XG4gICAgaWYgKHByb3ZpZGVkRGVmYXVsdHMudmFsdWUgPT0gbnVsbCAmJiAhKHNjb3BlZCB8fCByZXNldCB8fCByb290KSkgcmV0dXJuIGluamVjdGVkRGVmYXVsdHMudmFsdWU7XG4gICAgbGV0IHByb3BlcnRpZXMgPSBtZXJnZURlZXAocHJvdmlkZWREZWZhdWx0cy52YWx1ZSwge1xuICAgICAgcHJldjogaW5qZWN0ZWREZWZhdWx0cy52YWx1ZVxuICAgIH0pO1xuICAgIGlmIChzY29wZWQpIHJldHVybiBwcm9wZXJ0aWVzO1xuICAgIGlmIChyZXNldCB8fCByb290KSB7XG4gICAgICBjb25zdCBsZW4gPSBOdW1iZXIocmVzZXQgfHwgSW5maW5pdHkpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKCFwcm9wZXJ0aWVzIHx8ICEoJ3ByZXYnIGluIHByb3BlcnRpZXMpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcGVydGllcyA9IHByb3BlcnRpZXMucHJldjtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wZXJ0aWVzICYmIHR5cGVvZiByb290ID09PSAnc3RyaW5nJyAmJiByb290IGluIHByb3BlcnRpZXMpIHtcbiAgICAgICAgcHJvcGVydGllcyA9IG1lcmdlRGVlcChtZXJnZURlZXAocHJvcGVydGllcywge1xuICAgICAgICAgIHByZXY6IHByb3BlcnRpZXNcbiAgICAgICAgfSksIHByb3BlcnRpZXNbcm9vdF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnRpZXM7XG4gICAgfVxuICAgIHJldHVybiBwcm9wZXJ0aWVzLnByZXYgPyBtZXJnZURlZXAocHJvcGVydGllcy5wcmV2LCBwcm9wZXJ0aWVzKSA6IHByb3BlcnRpZXM7XG4gIH0pO1xuICBwcm92aWRlKERlZmF1bHRzU3ltYm9sLCBuZXdEZWZhdWx0cyk7XG4gIHJldHVybiBuZXdEZWZhdWx0cztcbn1cbmZ1bmN0aW9uIHByb3BJc0RlZmluZWQodm5vZGUsIHByb3ApIHtcbiAgcmV0dXJuIHR5cGVvZiB2bm9kZS5wcm9wcz8uW3Byb3BdICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygdm5vZGUucHJvcHM/Llt0b0tlYmFiQ2FzZShwcm9wKV0gIT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGludGVybmFsVXNlRGVmYXVsdHMoKSB7XG4gIGxldCBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIGxldCBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIGxldCBkZWZhdWx0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogaW5qZWN0RGVmYXVsdHMoKTtcbiAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoJ3VzZURlZmF1bHRzJyk7XG4gIG5hbWUgPSBuYW1lID8/IHZtLnR5cGUubmFtZSA/PyB2bS50eXBlLl9fbmFtZTtcbiAgaWYgKCFuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbVnVldGlmeV0gQ291bGQgbm90IGRldGVybWluZSBjb21wb25lbnQgbmFtZScpO1xuICB9XG4gIGNvbnN0IGNvbXBvbmVudERlZmF1bHRzID0gY29tcHV0ZWQoKCkgPT4gZGVmYXVsdHMudmFsdWU/Lltwcm9wcy5fYXMgPz8gbmFtZV0pO1xuICBjb25zdCBfcHJvcHMgPSBuZXcgUHJveHkocHJvcHMsIHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBjb25zdCBwcm9wVmFsdWUgPSBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3ApO1xuICAgICAgaWYgKHByb3AgPT09ICdjbGFzcycgfHwgcHJvcCA9PT0gJ3N0eWxlJykge1xuICAgICAgICByZXR1cm4gW2NvbXBvbmVudERlZmF1bHRzLnZhbHVlPy5bcHJvcF0sIHByb3BWYWx1ZV0uZmlsdGVyKHYgPT4gdiAhPSBudWxsKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3AgPT09ICdzdHJpbmcnICYmICFwcm9wSXNEZWZpbmVkKHZtLnZub2RlLCBwcm9wKSkge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50RGVmYXVsdHMudmFsdWU/Lltwcm9wXSA/PyBkZWZhdWx0cy52YWx1ZT8uZ2xvYmFsPy5bcHJvcF0gPz8gcHJvcFZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBfc3ViY29tcG9uZW50RGVmYXVsdHMgPSBzaGFsbG93UmVmKCk7XG4gIHdhdGNoRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoY29tcG9uZW50RGVmYXVsdHMudmFsdWUpIHtcbiAgICAgIGNvbnN0IHN1YkNvbXBvbmVudHMgPSBPYmplY3QuZW50cmllcyhjb21wb25lbnREZWZhdWx0cy52YWx1ZSkuZmlsdGVyKF9yZWYgPT4ge1xuICAgICAgICBsZXQgW2tleV0gPSBfcmVmO1xuICAgICAgICByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoa2V5WzBdLnRvVXBwZXJDYXNlKCkpO1xuICAgICAgfSk7XG4gICAgICBfc3ViY29tcG9uZW50RGVmYXVsdHMudmFsdWUgPSBzdWJDb21wb25lbnRzLmxlbmd0aCA/IE9iamVjdC5mcm9tRW50cmllcyhzdWJDb21wb25lbnRzKSA6IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgX3N1YmNvbXBvbmVudERlZmF1bHRzLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIHByb3ZpZGVTdWJEZWZhdWx0cygpIHtcbiAgICBjb25zdCBpbmplY3RlZCA9IGluamVjdFNlbGYoRGVmYXVsdHNTeW1ib2wsIHZtKTtcbiAgICBwcm92aWRlKERlZmF1bHRzU3ltYm9sLCBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gX3N1YmNvbXBvbmVudERlZmF1bHRzLnZhbHVlID8gbWVyZ2VEZWVwKGluamVjdGVkPy52YWx1ZSA/PyB7fSwgX3N1YmNvbXBvbmVudERlZmF1bHRzLnZhbHVlKSA6IGluamVjdGVkPy52YWx1ZTtcbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwcm9wczogX3Byb3BzLFxuICAgIHByb3ZpZGVTdWJEZWZhdWx0c1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZURlZmF1bHRzKCkge1xuICBsZXQgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICBsZXQgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICBjb25zdCB7XG4gICAgcHJvcHM6IF9wcm9wcyxcbiAgICBwcm92aWRlU3ViRGVmYXVsdHNcbiAgfSA9IGludGVybmFsVXNlRGVmYXVsdHMocHJvcHMsIG5hbWUpO1xuICBwcm92aWRlU3ViRGVmYXVsdHMoKTtcbiAgcmV0dXJuIF9wcm9wcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRzLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGluamVjdCwgcmVhY3RpdmUsIHNoYWxsb3dSZWYsIHRvUmVmcywgd2F0Y2hFZmZlY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgbWVyZ2VEZWVwIH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBJTl9CUk9XU0VSLCBTVVBQT1JUU19UT1VDSCB9IGZyb20gXCIuLi91dGlsL2dsb2JhbHMubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgYnJlYWtwb2ludHMgPSBbJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgJ3h4bCddOyAvLyBubyB4c1xuXG5leHBvcnQgY29uc3QgRGlzcGxheVN5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6ZGlzcGxheScpO1xuY29uc3QgZGVmYXVsdERpc3BsYXlPcHRpb25zID0ge1xuICBtb2JpbGVCcmVha3BvaW50OiAnbGcnLFxuICB0aHJlc2hvbGRzOiB7XG4gICAgeHM6IDAsXG4gICAgc206IDYwMCxcbiAgICBtZDogOTYwLFxuICAgIGxnOiAxMjgwLFxuICAgIHhsOiAxOTIwLFxuICAgIHh4bDogMjU2MFxuICB9XG59O1xuY29uc3QgcGFyc2VEaXNwbGF5T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGRlZmF1bHREaXNwbGF5T3B0aW9ucztcbiAgcmV0dXJuIG1lcmdlRGVlcChkZWZhdWx0RGlzcGxheU9wdGlvbnMsIG9wdGlvbnMpO1xufTtcbmZ1bmN0aW9uIGdldENsaWVudFdpZHRoKHNzcikge1xuICByZXR1cm4gSU5fQlJPV1NFUiAmJiAhc3NyID8gd2luZG93LmlubmVyV2lkdGggOiB0eXBlb2Ygc3NyID09PSAnb2JqZWN0JyAmJiBzc3IuY2xpZW50V2lkdGggfHwgMDtcbn1cbmZ1bmN0aW9uIGdldENsaWVudEhlaWdodChzc3IpIHtcbiAgcmV0dXJuIElOX0JST1dTRVIgJiYgIXNzciA/IHdpbmRvdy5pbm5lckhlaWdodCA6IHR5cGVvZiBzc3IgPT09ICdvYmplY3QnICYmIHNzci5jbGllbnRIZWlnaHQgfHwgMDtcbn1cbmZ1bmN0aW9uIGdldFBsYXRmb3JtKHNzcikge1xuICBjb25zdCB1c2VyQWdlbnQgPSBJTl9CUk9XU0VSICYmICFzc3IgPyB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCA6ICdzc3InO1xuICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICByZXR1cm4gQm9vbGVhbih1c2VyQWdlbnQubWF0Y2gocmVnZXhwKSk7XG4gIH1cbiAgY29uc3QgYW5kcm9pZCA9IG1hdGNoKC9hbmRyb2lkL2kpO1xuICBjb25zdCBpb3MgPSBtYXRjaCgvaXBob25lfGlwYWR8aXBvZC9pKTtcbiAgY29uc3QgY29yZG92YSA9IG1hdGNoKC9jb3Jkb3ZhL2kpO1xuICBjb25zdCBlbGVjdHJvbiA9IG1hdGNoKC9lbGVjdHJvbi9pKTtcbiAgY29uc3QgY2hyb21lID0gbWF0Y2goL2Nocm9tZS9pKTtcbiAgY29uc3QgZWRnZSA9IG1hdGNoKC9lZGdlL2kpO1xuICBjb25zdCBmaXJlZm94ID0gbWF0Y2goL2ZpcmVmb3gvaSk7XG4gIGNvbnN0IG9wZXJhID0gbWF0Y2goL29wZXJhL2kpO1xuICBjb25zdCB3aW4gPSBtYXRjaCgvd2luL2kpO1xuICBjb25zdCBtYWMgPSBtYXRjaCgvbWFjL2kpO1xuICBjb25zdCBsaW51eCA9IG1hdGNoKC9saW51eC9pKTtcbiAgcmV0dXJuIHtcbiAgICBhbmRyb2lkLFxuICAgIGlvcyxcbiAgICBjb3Jkb3ZhLFxuICAgIGVsZWN0cm9uLFxuICAgIGNocm9tZSxcbiAgICBlZGdlLFxuICAgIGZpcmVmb3gsXG4gICAgb3BlcmEsXG4gICAgd2luLFxuICAgIG1hYyxcbiAgICBsaW51eCxcbiAgICB0b3VjaDogU1VQUE9SVFNfVE9VQ0gsXG4gICAgc3NyOiB1c2VyQWdlbnQgPT09ICdzc3InXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlzcGxheShvcHRpb25zLCBzc3IpIHtcbiAgY29uc3Qge1xuICAgIHRocmVzaG9sZHMsXG4gICAgbW9iaWxlQnJlYWtwb2ludFxuICB9ID0gcGFyc2VEaXNwbGF5T3B0aW9ucyhvcHRpb25zKTtcbiAgY29uc3QgaGVpZ2h0ID0gc2hhbGxvd1JlZihnZXRDbGllbnRIZWlnaHQoc3NyKSk7XG4gIGNvbnN0IHBsYXRmb3JtID0gc2hhbGxvd1JlZihnZXRQbGF0Zm9ybShzc3IpKTtcbiAgY29uc3Qgc3RhdGUgPSByZWFjdGl2ZSh7fSk7XG4gIGNvbnN0IHdpZHRoID0gc2hhbGxvd1JlZihnZXRDbGllbnRXaWR0aChzc3IpKTtcbiAgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgICBoZWlnaHQudmFsdWUgPSBnZXRDbGllbnRIZWlnaHQoKTtcbiAgICB3aWR0aC52YWx1ZSA9IGdldENsaWVudFdpZHRoKCk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHVwZGF0ZVNpemUoKTtcbiAgICBwbGF0Zm9ybS52YWx1ZSA9IGdldFBsYXRmb3JtKCk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHhzID0gd2lkdGgudmFsdWUgPCB0aHJlc2hvbGRzLnNtO1xuICAgIGNvbnN0IHNtID0gd2lkdGgudmFsdWUgPCB0aHJlc2hvbGRzLm1kICYmICF4cztcbiAgICBjb25zdCBtZCA9IHdpZHRoLnZhbHVlIDwgdGhyZXNob2xkcy5sZyAmJiAhKHNtIHx8IHhzKTtcbiAgICBjb25zdCBsZyA9IHdpZHRoLnZhbHVlIDwgdGhyZXNob2xkcy54bCAmJiAhKG1kIHx8IHNtIHx8IHhzKTtcbiAgICBjb25zdCB4bCA9IHdpZHRoLnZhbHVlIDwgdGhyZXNob2xkcy54eGwgJiYgIShsZyB8fCBtZCB8fCBzbSB8fCB4cyk7XG4gICAgY29uc3QgeHhsID0gd2lkdGgudmFsdWUgPj0gdGhyZXNob2xkcy54eGw7XG4gICAgY29uc3QgbmFtZSA9IHhzID8gJ3hzJyA6IHNtID8gJ3NtJyA6IG1kID8gJ21kJyA6IGxnID8gJ2xnJyA6IHhsID8gJ3hsJyA6ICd4eGwnO1xuICAgIGNvbnN0IGJyZWFrcG9pbnRWYWx1ZSA9IHR5cGVvZiBtb2JpbGVCcmVha3BvaW50ID09PSAnbnVtYmVyJyA/IG1vYmlsZUJyZWFrcG9pbnQgOiB0aHJlc2hvbGRzW21vYmlsZUJyZWFrcG9pbnRdO1xuICAgIGNvbnN0IG1vYmlsZSA9IHdpZHRoLnZhbHVlIDwgYnJlYWtwb2ludFZhbHVlO1xuICAgIHN0YXRlLnhzID0geHM7XG4gICAgc3RhdGUuc20gPSBzbTtcbiAgICBzdGF0ZS5tZCA9IG1kO1xuICAgIHN0YXRlLmxnID0gbGc7XG4gICAgc3RhdGUueGwgPSB4bDtcbiAgICBzdGF0ZS54eGwgPSB4eGw7XG4gICAgc3RhdGUuc21BbmRVcCA9ICF4cztcbiAgICBzdGF0ZS5tZEFuZFVwID0gISh4cyB8fCBzbSk7XG4gICAgc3RhdGUubGdBbmRVcCA9ICEoeHMgfHwgc20gfHwgbWQpO1xuICAgIHN0YXRlLnhsQW5kVXAgPSAhKHhzIHx8IHNtIHx8IG1kIHx8IGxnKTtcbiAgICBzdGF0ZS5zbUFuZERvd24gPSAhKG1kIHx8IGxnIHx8IHhsIHx8IHh4bCk7XG4gICAgc3RhdGUubWRBbmREb3duID0gIShsZyB8fCB4bCB8fCB4eGwpO1xuICAgIHN0YXRlLmxnQW5kRG93biA9ICEoeGwgfHwgeHhsKTtcbiAgICBzdGF0ZS54bEFuZERvd24gPSAheHhsO1xuICAgIHN0YXRlLm5hbWUgPSBuYW1lO1xuICAgIHN0YXRlLmhlaWdodCA9IGhlaWdodC52YWx1ZTtcbiAgICBzdGF0ZS53aWR0aCA9IHdpZHRoLnZhbHVlO1xuICAgIHN0YXRlLm1vYmlsZSA9IG1vYmlsZTtcbiAgICBzdGF0ZS5tb2JpbGVCcmVha3BvaW50ID0gbW9iaWxlQnJlYWtwb2ludDtcbiAgICBzdGF0ZS5wbGF0Zm9ybSA9IHBsYXRmb3JtLnZhbHVlO1xuICAgIHN0YXRlLnRocmVzaG9sZHMgPSB0aHJlc2hvbGRzO1xuICB9KTtcbiAgaWYgKElOX0JST1dTRVIpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdXBkYXRlU2l6ZSwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgLi4udG9SZWZzKHN0YXRlKSxcbiAgICB1cGRhdGUsXG4gICAgc3NyOiAhIXNzclxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZURpc3BsYXkoKSB7XG4gIGNvbnN0IGRpc3BsYXkgPSBpbmplY3QoRGlzcGxheVN5bWJvbCk7XG4gIGlmICghZGlzcGxheSkgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBWdWV0aWZ5IGRpc3BsYXkgaW5qZWN0aW9uJyk7XG4gIHJldHVybiBkaXNwbGF5O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzcGxheS5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IFZDbGFzc0ljb24gfSBmcm9tIFwiLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgaCB9IGZyb20gJ3Z1ZSc7XG5cbi8vIFR5cGVzXG5cbmNvbnN0IGFsaWFzZXMgPSB7XG4gIGNvbGxhcHNlOiAnbWRpLWNoZXZyb24tdXAnLFxuICBjb21wbGV0ZTogJ21kaS1jaGVjaycsXG4gIGNhbmNlbDogJ21kaS1jbG9zZS1jaXJjbGUnLFxuICBjbG9zZTogJ21kaS1jbG9zZScsXG4gIGRlbGV0ZTogJ21kaS1jbG9zZS1jaXJjbGUnLFxuICAvLyBkZWxldGUgKGUuZy4gdi1jaGlwIGNsb3NlKVxuICBjbGVhcjogJ21kaS1jbG9zZS1jaXJjbGUnLFxuICBzdWNjZXNzOiAnbWRpLWNoZWNrLWNpcmNsZScsXG4gIGluZm86ICdtZGktaW5mb3JtYXRpb24nLFxuICB3YXJuaW5nOiAnbWRpLWFsZXJ0LWNpcmNsZScsXG4gIGVycm9yOiAnbWRpLWNsb3NlLWNpcmNsZScsXG4gIHByZXY6ICdtZGktY2hldnJvbi1sZWZ0JyxcbiAgbmV4dDogJ21kaS1jaGV2cm9uLXJpZ2h0JyxcbiAgY2hlY2tib3hPbjogJ21kaS1jaGVja2JveC1tYXJrZWQnLFxuICBjaGVja2JveE9mZjogJ21kaS1jaGVja2JveC1ibGFuay1vdXRsaW5lJyxcbiAgY2hlY2tib3hJbmRldGVybWluYXRlOiAnbWRpLW1pbnVzLWJveCcsXG4gIGRlbGltaXRlcjogJ21kaS1jaXJjbGUnLFxuICAvLyBmb3IgY2Fyb3VzZWxcbiAgc29ydEFzYzogJ21kaS1hcnJvdy11cCcsXG4gIHNvcnREZXNjOiAnbWRpLWFycm93LWRvd24nLFxuICBleHBhbmQ6ICdtZGktY2hldnJvbi1kb3duJyxcbiAgbWVudTogJ21kaS1tZW51JyxcbiAgc3ViZ3JvdXA6ICdtZGktbWVudS1kb3duJyxcbiAgZHJvcGRvd246ICdtZGktbWVudS1kb3duJyxcbiAgcmFkaW9PbjogJ21kaS1yYWRpb2JveC1tYXJrZWQnLFxuICByYWRpb09mZjogJ21kaS1yYWRpb2JveC1ibGFuaycsXG4gIGVkaXQ6ICdtZGktcGVuY2lsJyxcbiAgcmF0aW5nRW1wdHk6ICdtZGktc3Rhci1vdXRsaW5lJyxcbiAgcmF0aW5nRnVsbDogJ21kaS1zdGFyJyxcbiAgcmF0aW5nSGFsZjogJ21kaS1zdGFyLWhhbGYtZnVsbCcsXG4gIGxvYWRpbmc6ICdtZGktY2FjaGVkJyxcbiAgZmlyc3Q6ICdtZGktcGFnZS1maXJzdCcsXG4gIGxhc3Q6ICdtZGktcGFnZS1sYXN0JyxcbiAgdW5mb2xkOiAnbWRpLXVuZm9sZC1tb3JlLWhvcml6b250YWwnLFxuICBmaWxlOiAnbWRpLXBhcGVyY2xpcCcsXG4gIHBsdXM6ICdtZGktcGx1cycsXG4gIG1pbnVzOiAnbWRpLW1pbnVzJyxcbiAgY2FsZW5kYXI6ICdtZGktY2FsZW5kYXInXG59O1xuY29uc3QgbWRpID0ge1xuICAvLyBOb3QgdXNpbmcgbWVyZ2VQcm9wcyBoZXJlLCBmdW5jdGlvbmFsIGNvbXBvbmVudHMgbWVyZ2UgcHJvcHMgYnkgZGVmYXVsdCAoPylcbiAgY29tcG9uZW50OiBwcm9wcyA9PiBoKFZDbGFzc0ljb24sIHtcbiAgICAuLi5wcm9wcyxcbiAgICBjbGFzczogJ21kaSdcbiAgfSlcbn07XG5leHBvcnQgeyBhbGlhc2VzLCBtZGkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1kaS5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gSWNvbnNcbmltcG9ydCB7IGFsaWFzZXMsIG1kaSB9IGZyb20gXCIuLi9pY29uc2V0cy9tZGkubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCwgdW5yZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBnZW5lcmljQ29tcG9uZW50LCBtZXJnZURlZXAsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IEljb25WYWx1ZSA9IFtTdHJpbmcsIEZ1bmN0aW9uLCBPYmplY3QsIEFycmF5XTtcbmV4cG9ydCBjb25zdCBJY29uU3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTppY29ucycpO1xuZXhwb3J0IGNvbnN0IG1ha2VJY29uUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBpY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlXG4gIH0sXG4gIC8vIENvdWxkIG5vdCByZW1vdmUgdGhpcyBhbmQgdXNlIG1ha2VUYWdQcm9wcywgdHlwZXMgY29tcGxhaW5lZCBiZWNhdXNlIGl0IGlzIG5vdCByZXF1aXJlZFxuICB0YWc6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfVxufSwgJ2ljb24nKTtcbmV4cG9ydCBjb25zdCBWQ29tcG9uZW50SWNvbiA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQ29tcG9uZW50SWNvbicsXG4gIHByb3BzOiBtYWtlSWNvblByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IEljb24gPSBwcm9wcy5pY29uO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIG51bGwsIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Byb3BzLmljb24gPyBfY3JlYXRlVk5vZGUoSWNvbiwgbnVsbCwgbnVsbCkgOiBzbG90cy5kZWZhdWx0Py4oKV1cbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbn0pO1xuZXhwb3J0IGNvbnN0IFZTdmdJY29uID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ1ZTdmdJY29uJyxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IG1ha2VJY29uUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYyKSB7XG4gICAgbGV0IHtcbiAgICAgIGF0dHJzXG4gICAgfSA9IF9yZWYyO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywgX21lcmdlUHJvcHMoYXR0cnMsIHtcbiAgICAgICAgXCJzdHlsZVwiOiBudWxsXG4gICAgICB9KSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX2NyZWF0ZVZOb2RlKFwic3ZnXCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1pY29uX19zdmdcIixcbiAgICAgICAgICBcInhtbG5zXCI6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICAgICAgICBcInZpZXdCb3hcIjogXCIwIDAgMjQgMjRcIixcbiAgICAgICAgICBcInJvbGVcIjogXCJpbWdcIixcbiAgICAgICAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gICAgICAgIH0sIFtBcnJheS5pc0FycmF5KHByb3BzLmljb24pID8gcHJvcHMuaWNvbi5tYXAocGF0aCA9PiBBcnJheS5pc0FycmF5KHBhdGgpID8gX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICAgICAgXCJkXCI6IHBhdGhbMF0sXG4gICAgICAgICAgXCJmaWxsLW9wYWNpdHlcIjogcGF0aFsxXVxuICAgICAgICB9LCBudWxsKSA6IF9jcmVhdGVWTm9kZShcInBhdGhcIiwge1xuICAgICAgICAgIFwiZFwiOiBwYXRoXG4gICAgICAgIH0sIG51bGwpKSA6IF9jcmVhdGVWTm9kZShcInBhdGhcIiwge1xuICAgICAgICAgIFwiZFwiOiBwcm9wcy5pY29uXG4gICAgICAgIH0sIG51bGwpXSldXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG59KTtcbmV4cG9ydCBjb25zdCBWTGlnYXR1cmVJY29uID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ1ZMaWdhdHVyZUljb24nLFxuICBwcm9wczogbWFrZUljb25Qcm9wcygpLFxuICBzZXR1cChwcm9wcykge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywgbnVsbCwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbcHJvcHMuaWNvbl1cbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbn0pO1xuZXhwb3J0IGNvbnN0IFZDbGFzc0ljb24gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnVkNsYXNzSWNvbicsXG4gIHByb3BzOiBtYWtlSWNvblByb3BzKCksXG4gIHNldHVwKHByb3BzKSB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICAgIFwiY2xhc3NcIjogcHJvcHMuaWNvblxuICAgICAgfSwgbnVsbCk7XG4gICAgfTtcbiAgfVxufSk7XG5leHBvcnQgY29uc3QgZGVmYXVsdFNldHMgPSB7XG4gIHN2Zzoge1xuICAgIGNvbXBvbmVudDogVlN2Z0ljb25cbiAgfSxcbiAgY2xhc3M6IHtcbiAgICBjb21wb25lbnQ6IFZDbGFzc0ljb25cbiAgfVxufTtcblxuLy8gQ29tcG9zYWJsZXNcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJY29ucyhvcHRpb25zKSB7XG4gIHJldHVybiBtZXJnZURlZXAoe1xuICAgIGRlZmF1bHRTZXQ6ICdtZGknLFxuICAgIHNldHM6IHtcbiAgICAgIC4uLmRlZmF1bHRTZXRzLFxuICAgICAgbWRpXG4gICAgfSxcbiAgICBhbGlhc2VzOiB7XG4gICAgICAuLi5hbGlhc2VzLFxuICAgICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuICAgICAgdnVldGlmeTogWydNOC4yMjQxIDE0LjIwMDlMMTIgMjFMMjIgM0gxNC40NDU5TDguMjI0MSAxNC4yMDA5WicsIFsnTTcuMjYzMDMgMTIuNDczM0w3LjAwMTEzIDEyTDIgM0gxMi41MjYxQzEyLjUyNjEgMyAxMi41MjYxIDMgMTIuNTI2MSAzTDcuMjYzMDMgMTIuNDczM1onLCAwLjZdXSxcbiAgICAgICd2dWV0aWZ5LW91dGxpbmUnOiAnc3ZnOk03LjI2IDEyLjQ3IDEyLjUzIDNIMkw3LjI2IDEyLjQ3Wk0xNC40NSAzIDguMjIgMTQuMiAxMiAyMSAyMiAzSDE0LjQ1Wk0xOC42IDUgMTIgMTYuODggMTAuNTEgMTQuMiAxNS42MiA1Wk03LjI2IDguMzUgNS40IDVIOS4xM0w3LjI2IDguMzVaJ1xuICAgICAgLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG4gICAgfVxuICB9LCBvcHRpb25zKTtcbn1cbmV4cG9ydCBjb25zdCB1c2VJY29uID0gcHJvcHMgPT4ge1xuICBjb25zdCBpY29ucyA9IGluamVjdChJY29uU3ltYm9sKTtcbiAgaWYgKCFpY29ucykgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIFZ1ZXRpZnkgSWNvbnMgcHJvdmlkZSEnKTtcbiAgY29uc3QgaWNvbkRhdGEgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgaWNvbkFsaWFzID0gdW5yZWYocHJvcHMpO1xuICAgIGlmICghaWNvbkFsaWFzKSByZXR1cm4ge1xuICAgICAgY29tcG9uZW50OiBWQ29tcG9uZW50SWNvblxuICAgIH07XG4gICAgbGV0IGljb24gPSBpY29uQWxpYXM7XG4gICAgaWYgKHR5cGVvZiBpY29uID09PSAnc3RyaW5nJykge1xuICAgICAgaWNvbiA9IGljb24udHJpbSgpO1xuICAgICAgaWYgKGljb24uc3RhcnRzV2l0aCgnJCcpKSB7XG4gICAgICAgIGljb24gPSBpY29ucy5hbGlhc2VzPy5baWNvbi5zbGljZSgxKV07XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghaWNvbikgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBhbGlhc2VkIGljb24gXCIke2ljb25BbGlhc31cImApO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGljb24pKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb21wb25lbnQ6IFZTdmdJY29uLFxuICAgICAgICBpY29uXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGljb24gIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb21wb25lbnQ6IFZDb21wb25lbnRJY29uLFxuICAgICAgICBpY29uXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpY29uU2V0TmFtZSA9IE9iamVjdC5rZXlzKGljb25zLnNldHMpLmZpbmQoc2V0TmFtZSA9PiB0eXBlb2YgaWNvbiA9PT0gJ3N0cmluZycgJiYgaWNvbi5zdGFydHNXaXRoKGAke3NldE5hbWV9OmApKTtcbiAgICBjb25zdCBpY29uTmFtZSA9IGljb25TZXROYW1lID8gaWNvbi5zbGljZShpY29uU2V0TmFtZS5sZW5ndGggKyAxKSA6IGljb247XG4gICAgY29uc3QgaWNvblNldCA9IGljb25zLnNldHNbaWNvblNldE5hbWUgPz8gaWNvbnMuZGVmYXVsdFNldF07XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbXBvbmVudDogaWNvblNldC5jb21wb25lbnQsXG4gICAgICBpY29uOiBpY29uTmFtZVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGljb25EYXRhXG4gIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWNvbnMubWpzLm1hcCIsImV4cG9ydCBkZWZhdWx0IHtcbiAgYmFkZ2U6ICdCYWRnZScsXG4gIG9wZW46ICdPcGVuJyxcbiAgY2xvc2U6ICdDbG9zZScsXG4gIGRhdGFJdGVyYXRvcjoge1xuICAgIG5vUmVzdWx0c1RleHQ6ICdObyBtYXRjaGluZyByZWNvcmRzIGZvdW5kJyxcbiAgICBsb2FkaW5nVGV4dDogJ0xvYWRpbmcgaXRlbXMuLi4nXG4gIH0sXG4gIGRhdGFUYWJsZToge1xuICAgIGl0ZW1zUGVyUGFnZVRleHQ6ICdSb3dzIHBlciBwYWdlOicsXG4gICAgYXJpYUxhYmVsOiB7XG4gICAgICBzb3J0RGVzY2VuZGluZzogJ1NvcnRlZCBkZXNjZW5kaW5nLicsXG4gICAgICBzb3J0QXNjZW5kaW5nOiAnU29ydGVkIGFzY2VuZGluZy4nLFxuICAgICAgc29ydE5vbmU6ICdOb3Qgc29ydGVkLicsXG4gICAgICBhY3RpdmF0ZU5vbmU6ICdBY3RpdmF0ZSB0byByZW1vdmUgc29ydGluZy4nLFxuICAgICAgYWN0aXZhdGVEZXNjZW5kaW5nOiAnQWN0aXZhdGUgdG8gc29ydCBkZXNjZW5kaW5nLicsXG4gICAgICBhY3RpdmF0ZUFzY2VuZGluZzogJ0FjdGl2YXRlIHRvIHNvcnQgYXNjZW5kaW5nLidcbiAgICB9LFxuICAgIHNvcnRCeTogJ1NvcnQgYnknXG4gIH0sXG4gIGRhdGFGb290ZXI6IHtcbiAgICBpdGVtc1BlclBhZ2VUZXh0OiAnSXRlbXMgcGVyIHBhZ2U6JyxcbiAgICBpdGVtc1BlclBhZ2VBbGw6ICdBbGwnLFxuICAgIG5leHRQYWdlOiAnTmV4dCBwYWdlJyxcbiAgICBwcmV2UGFnZTogJ1ByZXZpb3VzIHBhZ2UnLFxuICAgIGZpcnN0UGFnZTogJ0ZpcnN0IHBhZ2UnLFxuICAgIGxhc3RQYWdlOiAnTGFzdCBwYWdlJyxcbiAgICBwYWdlVGV4dDogJ3swfS17MX0gb2YgezJ9J1xuICB9LFxuICBkYXRlUmFuZ2VJbnB1dDoge1xuICAgIGRpdmlkZXI6ICd0bydcbiAgfSxcbiAgZGF0ZVBpY2tlcjoge1xuICAgIG9rOiAnT0snLFxuICAgIGNhbmNlbDogJ0NhbmNlbCcsXG4gICAgcmFuZ2U6IHtcbiAgICAgIHRpdGxlOiAnU2VsZWN0IGRhdGVzJyxcbiAgICAgIGhlYWRlcjogJ0VudGVyIGRhdGVzJ1xuICAgIH0sXG4gICAgdGl0bGU6ICdTZWxlY3QgZGF0ZScsXG4gICAgaGVhZGVyOiAnRW50ZXIgZGF0ZScsXG4gICAgaW5wdXQ6IHtcbiAgICAgIHBsYWNlaG9sZGVyOiAnRW50ZXIgZGF0ZSdcbiAgICB9XG4gIH0sXG4gIG5vRGF0YVRleHQ6ICdObyBkYXRhIGF2YWlsYWJsZScsXG4gIGNhcm91c2VsOiB7XG4gICAgcHJldjogJ1ByZXZpb3VzIHZpc3VhbCcsXG4gICAgbmV4dDogJ05leHQgdmlzdWFsJyxcbiAgICBhcmlhTGFiZWw6IHtcbiAgICAgIGRlbGltaXRlcjogJ0Nhcm91c2VsIHNsaWRlIHswfSBvZiB7MX0nXG4gICAgfVxuICB9LFxuICBjYWxlbmRhcjoge1xuICAgIG1vcmVFdmVudHM6ICd7MH0gbW9yZSdcbiAgfSxcbiAgaW5wdXQ6IHtcbiAgICBjbGVhcjogJ0NsZWFyIHswfScsXG4gICAgcHJlcGVuZEFjdGlvbjogJ3swfSBwcmVwZW5kZWQgYWN0aW9uJyxcbiAgICBhcHBlbmRBY3Rpb246ICd7MH0gYXBwZW5kZWQgYWN0aW9uJyxcbiAgICBvdHA6ICdQbGVhc2UgZW50ZXIgT1RQIGNoYXJhY3RlciB7MH0nXG4gIH0sXG4gIGZpbGVJbnB1dDoge1xuICAgIGNvdW50ZXI6ICd7MH0gZmlsZXMnLFxuICAgIGNvdW50ZXJTaXplOiAnezB9IGZpbGVzICh7MX0gaW4gdG90YWwpJ1xuICB9LFxuICB0aW1lUGlja2VyOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTSdcbiAgfSxcbiAgcGFnaW5hdGlvbjoge1xuICAgIGFyaWFMYWJlbDoge1xuICAgICAgcm9vdDogJ1BhZ2luYXRpb24gTmF2aWdhdGlvbicsXG4gICAgICBuZXh0OiAnTmV4dCBwYWdlJyxcbiAgICAgIHByZXZpb3VzOiAnUHJldmlvdXMgcGFnZScsXG4gICAgICBwYWdlOiAnR28gdG8gcGFnZSB7MH0nLFxuICAgICAgY3VycmVudFBhZ2U6ICdQYWdlIHswfSwgQ3VycmVudCBwYWdlJyxcbiAgICAgIGZpcnN0OiAnRmlyc3QgcGFnZScsXG4gICAgICBsYXN0OiAnTGFzdCBwYWdlJ1xuICAgIH1cbiAgfSxcbiAgc3RlcHBlcjoge1xuICAgIG5leHQ6ICdOZXh0JyxcbiAgICBwcmV2OiAnUHJldmlvdXMnXG4gIH0sXG4gIHJhdGluZzoge1xuICAgIGFyaWFMYWJlbDoge1xuICAgICAgaXRlbTogJ1JhdGluZyB7MH0gb2YgezF9J1xuICAgIH1cbiAgfSxcbiAgbG9hZGluZzogJ0xvYWRpbmcuLi4nLFxuICBpbmZpbml0ZVNjcm9sbDoge1xuICAgIGxvYWRNb3JlOiAnTG9hZCBtb3JlJyxcbiAgICBlbXB0eTogJ05vIG1vcmUnXG4gIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbi5tanMubWFwIiwiZXhwb3J0IHsgZGVmYXVsdCBhcyBhZiB9IGZyb20gXCIuL2FmLm1qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBhciB9IGZyb20gXCIuL2FyLm1qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBiZyB9IGZyb20gXCIuL2JnLm1qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjYSB9IGZyb20gXCIuL2NhLm1qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBja2IgfSBmcm9tIFwiLi9ja2IubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNzIH0gZnJvbSBcIi4vY3MubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRhIH0gZnJvbSBcIi4vZGEubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlIH0gZnJvbSBcIi4vZGUubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGVsIH0gZnJvbSBcIi4vZWwubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGVuIH0gZnJvbSBcIi4vZW4ubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGVzIH0gZnJvbSBcIi4vZXMubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGV0IH0gZnJvbSBcIi4vZXQubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZhIH0gZnJvbSBcIi4vZmEubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZpIH0gZnJvbSBcIi4vZmkubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZyIH0gZnJvbSBcIi4vZnIubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGhyIH0gZnJvbSBcIi4vaHIubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGh1IH0gZnJvbSBcIi4vaHUubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGhlIH0gZnJvbSBcIi4vaGUubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlkIH0gZnJvbSBcIi4vaWQubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGl0IH0gZnJvbSBcIi4vaXQubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGphIH0gZnJvbSBcIi4vamEubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGtvIH0gZnJvbSBcIi4va28ubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGx2IH0gZnJvbSBcIi4vbHYubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGx0IH0gZnJvbSBcIi4vbHQubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG5sIH0gZnJvbSBcIi4vbmwubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG5vIH0gZnJvbSBcIi4vbm8ubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBsIH0gZnJvbSBcIi4vcGwubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHB0IH0gZnJvbSBcIi4vcHQubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJvIH0gZnJvbSBcIi4vcm8ubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJ1IH0gZnJvbSBcIi4vcnUubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNrIH0gZnJvbSBcIi4vc2subWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNsIH0gZnJvbSBcIi4vc2wubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNyQ3lybCB9IGZyb20gXCIuL3NyLUN5cmwubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNyTGF0biB9IGZyb20gXCIuL3NyLUxhdG4ubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN2IH0gZnJvbSBcIi4vc3YubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRoIH0gZnJvbSBcIi4vdGgubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRyIH0gZnJvbSBcIi4vdHIubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGF6IH0gZnJvbSBcIi4vYXoubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVrIH0gZnJvbSBcIi4vdWsubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHZpIH0gZnJvbSBcIi4vdmkubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHpoSGFucyB9IGZyb20gXCIuL3poLUhhbnMubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHpoSGFudCB9IGZyb20gXCIuL3poLUhhbnQubWpzXCI7XG5leHBvcnQgY29uc3QgZGVmYXVsdFJ0bCA9IHtcbiAgYWY6IGZhbHNlLFxuICBhcjogdHJ1ZSxcbiAgYmc6IGZhbHNlLFxuICBjYTogZmFsc2UsXG4gIGNrYjogZmFsc2UsXG4gIGNzOiBmYWxzZSxcbiAgZGU6IGZhbHNlLFxuICBlbDogZmFsc2UsXG4gIGVuOiBmYWxzZSxcbiAgZXM6IGZhbHNlLFxuICBldDogZmFsc2UsXG4gIGZhOiB0cnVlLFxuICBmaTogZmFsc2UsXG4gIGZyOiBmYWxzZSxcbiAgaHI6IGZhbHNlLFxuICBodTogZmFsc2UsXG4gIGhlOiB0cnVlLFxuICBpZDogZmFsc2UsXG4gIGl0OiBmYWxzZSxcbiAgamE6IGZhbHNlLFxuICBrbzogZmFsc2UsXG4gIGx2OiBmYWxzZSxcbiAgbHQ6IGZhbHNlLFxuICBubDogZmFsc2UsXG4gIG5vOiBmYWxzZSxcbiAgcGw6IGZhbHNlLFxuICBwdDogZmFsc2UsXG4gIHJvOiBmYWxzZSxcbiAgcnU6IGZhbHNlLFxuICBzazogZmFsc2UsXG4gIHNsOiBmYWxzZSxcbiAgc3JDeXJsOiBmYWxzZSxcbiAgc3JMYXRuOiBmYWxzZSxcbiAgc3Y6IGZhbHNlLFxuICB0aDogZmFsc2UsXG4gIHRyOiBmYWxzZSxcbiAgYXo6IGZhbHNlLFxuICB1azogZmFsc2UsXG4gIHZpOiBmYWxzZSxcbiAgemhIYW5zOiBmYWxzZSxcbiAgemhIYW50OiBmYWxzZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGVmZmVjdFNjb3BlLCBvblNjb3BlRGlzcG9zZSwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuXG4vLyBUeXBlc1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlVG9nZ2xlU2NvcGUoc291cmNlLCBmbikge1xuICBsZXQgc2NvcGU7XG4gIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIHNjb3BlID0gZWZmZWN0U2NvcGUoKTtcbiAgICBzY29wZS5ydW4oKCkgPT4gZm4ubGVuZ3RoID8gZm4oKCkgPT4ge1xuICAgICAgc2NvcGU/LnN0b3AoKTtcbiAgICAgIHN0YXJ0KCk7XG4gICAgfSkgOiBmbigpKTtcbiAgfVxuICB3YXRjaChzb3VyY2UsIGFjdGl2ZSA9PiB7XG4gICAgaWYgKGFjdGl2ZSAmJiAhc2NvcGUpIHtcbiAgICAgIHN0YXJ0KCk7XG4gICAgfSBlbHNlIGlmICghYWN0aXZlKSB7XG4gICAgICBzY29wZT8uc3RvcCgpO1xuICAgICAgc2NvcGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9LCB7XG4gICAgaW1tZWRpYXRlOiB0cnVlXG4gIH0pO1xuICBvblNjb3BlRGlzcG9zZSgoKSA9PiB7XG4gICAgc2NvcGU/LnN0b3AoKTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2dnbGVTY29wZS5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVRvZ2dsZVNjb3BlIH0gZnJvbSBcIi4vdG9nZ2xlU2NvcGUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHJlZiwgdG9SYXcsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZSwgdG9LZWJhYkNhc2UgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbi8vIENvbXBvc2FibGVzXG5leHBvcnQgZnVuY3Rpb24gdXNlUHJveGllZE1vZGVsKHByb3BzLCBwcm9wLCBkZWZhdWx0VmFsdWUpIHtcbiAgbGV0IHRyYW5zZm9ybUluID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB2ID0+IHY7XG4gIGxldCB0cmFuc2Zvcm1PdXQgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHYgPT4gdjtcbiAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoJ3VzZVByb3hpZWRNb2RlbCcpO1xuICBjb25zdCBpbnRlcm5hbCA9IHJlZihwcm9wc1twcm9wXSAhPT0gdW5kZWZpbmVkID8gcHJvcHNbcHJvcF0gOiBkZWZhdWx0VmFsdWUpO1xuICBjb25zdCBrZWJhYlByb3AgPSB0b0tlYmFiQ2FzZShwcm9wKTtcbiAgY29uc3QgY2hlY2tLZWJhYiA9IGtlYmFiUHJvcCAhPT0gcHJvcDtcbiAgY29uc3QgaXNDb250cm9sbGVkID0gY2hlY2tLZWJhYiA/IGNvbXB1dGVkKCgpID0+IHtcbiAgICB2b2lkIHByb3BzW3Byb3BdO1xuICAgIHJldHVybiAhISgodm0udm5vZGUucHJvcHM/Lmhhc093blByb3BlcnR5KHByb3ApIHx8IHZtLnZub2RlLnByb3BzPy5oYXNPd25Qcm9wZXJ0eShrZWJhYlByb3ApKSAmJiAodm0udm5vZGUucHJvcHM/Lmhhc093blByb3BlcnR5KGBvblVwZGF0ZToke3Byb3B9YCkgfHwgdm0udm5vZGUucHJvcHM/Lmhhc093blByb3BlcnR5KGBvblVwZGF0ZToke2tlYmFiUHJvcH1gKSkpO1xuICB9KSA6IGNvbXB1dGVkKCgpID0+IHtcbiAgICB2b2lkIHByb3BzW3Byb3BdO1xuICAgIHJldHVybiAhISh2bS52bm9kZS5wcm9wcz8uaGFzT3duUHJvcGVydHkocHJvcCkgJiYgdm0udm5vZGUucHJvcHM/Lmhhc093blByb3BlcnR5KGBvblVwZGF0ZToke3Byb3B9YCkpO1xuICB9KTtcbiAgdXNlVG9nZ2xlU2NvcGUoKCkgPT4gIWlzQ29udHJvbGxlZC52YWx1ZSwgKCkgPT4ge1xuICAgIHdhdGNoKCgpID0+IHByb3BzW3Byb3BdLCB2YWwgPT4ge1xuICAgICAgaW50ZXJuYWwudmFsdWUgPSB2YWw7XG4gICAgfSk7XG4gIH0pO1xuICBjb25zdCBtb2RlbCA9IGNvbXB1dGVkKHtcbiAgICBnZXQoKSB7XG4gICAgICBjb25zdCBleHRlcm5hbFZhbHVlID0gcHJvcHNbcHJvcF07XG4gICAgICByZXR1cm4gdHJhbnNmb3JtSW4oaXNDb250cm9sbGVkLnZhbHVlID8gZXh0ZXJuYWxWYWx1ZSA6IGludGVybmFsLnZhbHVlKTtcbiAgICB9LFxuICAgIHNldChpbnRlcm5hbFZhbHVlKSB7XG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IHRyYW5zZm9ybU91dChpbnRlcm5hbFZhbHVlKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gdG9SYXcoaXNDb250cm9sbGVkLnZhbHVlID8gcHJvcHNbcHJvcF0gOiBpbnRlcm5hbC52YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IG5ld1ZhbHVlIHx8IHRyYW5zZm9ybUluKHZhbHVlKSA9PT0gaW50ZXJuYWxWYWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpbnRlcm5hbC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgdm0/LmVtaXQoYHVwZGF0ZToke3Byb3B9YCwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2RlbCwgJ2V4dGVybmFsVmFsdWUnLCB7XG4gICAgZ2V0OiAoKSA9PiBpc0NvbnRyb2xsZWQudmFsdWUgPyBwcm9wc1twcm9wXSA6IGludGVybmFsLnZhbHVlXG4gIH0pO1xuICByZXR1cm4gbW9kZWw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm94aWVkTW9kZWwubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IHJlZiwgc2hhbGxvd1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29uc29sZUVycm9yLCBjb25zb2xlV2FybiwgZ2V0T2JqZWN0VmFsdWVCeVBhdGggfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gTG9jYWxlc1xuaW1wb3J0IGVuIGZyb20gXCIuLi9lbi5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IExBTkdfUFJFRklYID0gJyR2dWV0aWZ5Lic7XG5jb25zdCByZXBsYWNlID0gKHN0ciwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFx7KFxcZCspXFx9L2csIChtYXRjaCwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gU3RyaW5nKHBhcmFtc1sraW5kZXhdKTtcbiAgfSk7XG59O1xuY29uc3QgY3JlYXRlVHJhbnNsYXRlRnVuY3Rpb24gPSAoY3VycmVudCwgZmFsbGJhY2ssIG1lc3NhZ2VzKSA9PiB7XG4gIHJldHVybiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBhcmFtcyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBwYXJhbXNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBpZiAoIWtleS5zdGFydHNXaXRoKExBTkdfUFJFRklYKSkge1xuICAgICAgcmV0dXJuIHJlcGxhY2Uoa2V5LCBwYXJhbXMpO1xuICAgIH1cbiAgICBjb25zdCBzaG9ydEtleSA9IGtleS5yZXBsYWNlKExBTkdfUFJFRklYLCAnJyk7XG4gICAgY29uc3QgY3VycmVudExvY2FsZSA9IGN1cnJlbnQudmFsdWUgJiYgbWVzc2FnZXMudmFsdWVbY3VycmVudC52YWx1ZV07XG4gICAgY29uc3QgZmFsbGJhY2tMb2NhbGUgPSBmYWxsYmFjay52YWx1ZSAmJiBtZXNzYWdlcy52YWx1ZVtmYWxsYmFjay52YWx1ZV07XG4gICAgbGV0IHN0ciA9IGdldE9iamVjdFZhbHVlQnlQYXRoKGN1cnJlbnRMb2NhbGUsIHNob3J0S2V5LCBudWxsKTtcbiAgICBpZiAoIXN0cikge1xuICAgICAgY29uc29sZVdhcm4oYFRyYW5zbGF0aW9uIGtleSBcIiR7a2V5fVwiIG5vdCBmb3VuZCBpbiBcIiR7Y3VycmVudC52YWx1ZX1cIiwgdHJ5aW5nIGZhbGxiYWNrIGxvY2FsZWApO1xuICAgICAgc3RyID0gZ2V0T2JqZWN0VmFsdWVCeVBhdGgoZmFsbGJhY2tMb2NhbGUsIHNob3J0S2V5LCBudWxsKTtcbiAgICB9XG4gICAgaWYgKCFzdHIpIHtcbiAgICAgIGNvbnNvbGVFcnJvcihgVHJhbnNsYXRpb24ga2V5IFwiJHtrZXl9XCIgbm90IGZvdW5kIGluIGZhbGxiYWNrYCk7XG4gICAgICBzdHIgPSBrZXk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgY29uc29sZUVycm9yKGBUcmFuc2xhdGlvbiBrZXkgXCIke2tleX1cIiBoYXMgYSBub24tc3RyaW5nIHZhbHVlYCk7XG4gICAgICBzdHIgPSBrZXk7XG4gICAgfVxuICAgIHJldHVybiByZXBsYWNlKHN0ciwgcGFyYW1zKTtcbiAgfTtcbn07XG5mdW5jdGlvbiBjcmVhdGVOdW1iZXJGdW5jdGlvbihjdXJyZW50LCBmYWxsYmFjaykge1xuICByZXR1cm4gKHZhbHVlLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgbnVtYmVyRm9ybWF0ID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KFtjdXJyZW50LnZhbHVlLCBmYWxsYmFjay52YWx1ZV0sIG9wdGlvbnMpO1xuICAgIHJldHVybiBudW1iZXJGb3JtYXQuZm9ybWF0KHZhbHVlKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIHVzZVByb3ZpZGVkKHByb3BzLCBwcm9wLCBwcm92aWRlZCkge1xuICBjb25zdCBpbnRlcm5hbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgcHJvcCwgcHJvcHNbcHJvcF0gPz8gcHJvdmlkZWQudmFsdWUpO1xuXG4gIC8vIFRPRE86IFJlbW92ZSB3aGVuIGRlZmF1bHRWYWx1ZSB3b3Jrc1xuICBpbnRlcm5hbC52YWx1ZSA9IHByb3BzW3Byb3BdID8/IHByb3ZpZGVkLnZhbHVlO1xuICB3YXRjaChwcm92aWRlZCwgdiA9PiB7XG4gICAgaWYgKHByb3BzW3Byb3BdID09IG51bGwpIHtcbiAgICAgIGludGVybmFsLnZhbHVlID0gcHJvdmlkZWQudmFsdWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGludGVybmFsO1xufVxuZnVuY3Rpb24gY3JlYXRlUHJvdmlkZUZ1bmN0aW9uKHN0YXRlKSB7XG4gIHJldHVybiBwcm9wcyA9PiB7XG4gICAgY29uc3QgY3VycmVudCA9IHVzZVByb3ZpZGVkKHByb3BzLCAnbG9jYWxlJywgc3RhdGUuY3VycmVudCk7XG4gICAgY29uc3QgZmFsbGJhY2sgPSB1c2VQcm92aWRlZChwcm9wcywgJ2ZhbGxiYWNrJywgc3RhdGUuZmFsbGJhY2spO1xuICAgIGNvbnN0IG1lc3NhZ2VzID0gdXNlUHJvdmlkZWQocHJvcHMsICdtZXNzYWdlcycsIHN0YXRlLm1lc3NhZ2VzKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogJ3Z1ZXRpZnknLFxuICAgICAgY3VycmVudCxcbiAgICAgIGZhbGxiYWNrLFxuICAgICAgbWVzc2FnZXMsXG4gICAgICB0OiBjcmVhdGVUcmFuc2xhdGVGdW5jdGlvbihjdXJyZW50LCBmYWxsYmFjaywgbWVzc2FnZXMpLFxuICAgICAgbjogY3JlYXRlTnVtYmVyRnVuY3Rpb24oY3VycmVudCwgZmFsbGJhY2spLFxuICAgICAgcHJvdmlkZTogY3JlYXRlUHJvdmlkZUZ1bmN0aW9uKHtcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgZmFsbGJhY2ssXG4gICAgICAgIG1lc3NhZ2VzXG4gICAgICB9KVxuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVnVldGlmeUFkYXB0ZXIob3B0aW9ucykge1xuICBjb25zdCBjdXJyZW50ID0gc2hhbGxvd1JlZihvcHRpb25zPy5sb2NhbGUgPz8gJ2VuJyk7XG4gIGNvbnN0IGZhbGxiYWNrID0gc2hhbGxvd1JlZihvcHRpb25zPy5mYWxsYmFjayA/PyAnZW4nKTtcbiAgY29uc3QgbWVzc2FnZXMgPSByZWYoe1xuICAgIGVuLFxuICAgIC4uLm9wdGlvbnM/Lm1lc3NhZ2VzXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICd2dWV0aWZ5JyxcbiAgICBjdXJyZW50LFxuICAgIGZhbGxiYWNrLFxuICAgIG1lc3NhZ2VzLFxuICAgIHQ6IGNyZWF0ZVRyYW5zbGF0ZUZ1bmN0aW9uKGN1cnJlbnQsIGZhbGxiYWNrLCBtZXNzYWdlcyksXG4gICAgbjogY3JlYXRlTnVtYmVyRnVuY3Rpb24oY3VycmVudCwgZmFsbGJhY2spLFxuICAgIHByb3ZpZGU6IGNyZWF0ZVByb3ZpZGVGdW5jdGlvbih7XG4gICAgICBjdXJyZW50LFxuICAgICAgZmFsbGJhY2ssXG4gICAgICBtZXNzYWdlc1xuICAgIH0pXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12dWV0aWZ5Lm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBpbmplY3QsIHByb3ZpZGUsIHJlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBkZWZhdWx0UnRsIH0gZnJvbSBcIi4uL2xvY2FsZS9pbmRleC5tanNcIjtcbmltcG9ydCB7IGNyZWF0ZVZ1ZXRpZnlBZGFwdGVyIH0gZnJvbSBcIi4uL2xvY2FsZS9hZGFwdGVycy92dWV0aWZ5Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IExvY2FsZVN5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6bG9jYWxlJyk7XG5mdW5jdGlvbiBpc0xvY2FsZUluc3RhbmNlKG9iaikge1xuICByZXR1cm4gb2JqLm5hbWUgIT0gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2NhbGUob3B0aW9ucykge1xuICBjb25zdCBpMThuID0gb3B0aW9ucz8uYWRhcHRlciAmJiBpc0xvY2FsZUluc3RhbmNlKG9wdGlvbnM/LmFkYXB0ZXIpID8gb3B0aW9ucz8uYWRhcHRlciA6IGNyZWF0ZVZ1ZXRpZnlBZGFwdGVyKG9wdGlvbnMpO1xuICBjb25zdCBydGwgPSBjcmVhdGVSdGwoaTE4biwgb3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgLi4uaTE4bixcbiAgICAuLi5ydGxcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2NhbGUoKSB7XG4gIGNvbnN0IGxvY2FsZSA9IGluamVjdChMb2NhbGVTeW1ib2wpO1xuICBpZiAoIWxvY2FsZSkgdGhyb3cgbmV3IEVycm9yKCdbVnVldGlmeV0gQ291bGQgbm90IGZpbmQgaW5qZWN0ZWQgbG9jYWxlIGluc3RhbmNlJyk7XG4gIHJldHVybiBsb2NhbGU7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUxvY2FsZShwcm9wcykge1xuICBjb25zdCBsb2NhbGUgPSBpbmplY3QoTG9jYWxlU3ltYm9sKTtcbiAgaWYgKCFsb2NhbGUpIHRocm93IG5ldyBFcnJvcignW1Z1ZXRpZnldIENvdWxkIG5vdCBmaW5kIGluamVjdGVkIGxvY2FsZSBpbnN0YW5jZScpO1xuICBjb25zdCBpMThuID0gbG9jYWxlLnByb3ZpZGUocHJvcHMpO1xuICBjb25zdCBydGwgPSBwcm92aWRlUnRsKGkxOG4sIGxvY2FsZS5ydGwsIHByb3BzKTtcbiAgY29uc3QgZGF0YSA9IHtcbiAgICAuLi5pMThuLFxuICAgIC4uLnJ0bFxuICB9O1xuICBwcm92aWRlKExvY2FsZVN5bWJvbCwgZGF0YSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vLyBSVExcblxuZXhwb3J0IGNvbnN0IFJ0bFN5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6cnRsJyk7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUnRsKGkxOG4sIG9wdGlvbnMpIHtcbiAgY29uc3QgcnRsID0gcmVmKG9wdGlvbnM/LnJ0bCA/PyBkZWZhdWx0UnRsKTtcbiAgY29uc3QgaXNSdGwgPSBjb21wdXRlZCgoKSA9PiBydGwudmFsdWVbaTE4bi5jdXJyZW50LnZhbHVlXSA/PyBmYWxzZSk7XG4gIHJldHVybiB7XG4gICAgaXNSdGwsXG4gICAgcnRsLFxuICAgIHJ0bENsYXNzZXM6IGNvbXB1dGVkKCgpID0+IGB2LWxvY2FsZS0taXMtJHtpc1J0bC52YWx1ZSA/ICdydGwnIDogJ2x0cid9YClcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlUnRsKGxvY2FsZSwgcnRsLCBwcm9wcykge1xuICBjb25zdCBpc1J0bCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLnJ0bCA/PyBydGwudmFsdWVbbG9jYWxlLmN1cnJlbnQudmFsdWVdID8/IGZhbHNlKTtcbiAgcmV0dXJuIHtcbiAgICBpc1J0bCxcbiAgICBydGwsXG4gICAgcnRsQ2xhc3NlczogY29tcHV0ZWQoKCkgPT4gYHYtbG9jYWxlLS1pcy0ke2lzUnRsLnZhbHVlID8gJ3J0bCcgOiAnbHRyJ31gKVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJ0bCgpIHtcbiAgY29uc3QgbG9jYWxlID0gaW5qZWN0KExvY2FsZVN5bWJvbCk7XG4gIGlmICghbG9jYWxlKSB0aHJvdyBuZXcgRXJyb3IoJ1tWdWV0aWZ5XSBDb3VsZCBub3QgZmluZCBpbmplY3RlZCBydGwgaW5zdGFuY2UnKTtcbiAgcmV0dXJuIHtcbiAgICBpc1J0bDogbG9jYWxlLmlzUnRsLFxuICAgIHJ0bENsYXNzZXM6IGxvY2FsZS5ydGxDbGFzc2VzXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2NhbGUubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCwgcHJvdmlkZSwgcmVmLCB3YXRjaCwgd2F0Y2hFZmZlY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY3JlYXRlUmFuZ2UsIGRhcmtlbiwgZ2V0Q3VycmVudEluc3RhbmNlLCBnZXRGb3JlZ3JvdW5kLCBnZXRMdW1hLCBJTl9CUk9XU0VSLCBsaWdodGVuLCBtZXJnZURlZXAsIHBhcnNlQ29sb3IsIHByb3BzRmFjdG9yeSwgUkdCdG9IZXggfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBUaGVtZVN5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6dGhlbWUnKTtcbmV4cG9ydCBjb25zdCBtYWtlVGhlbWVQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHRoZW1lOiBTdHJpbmdcbn0sICd0aGVtZScpO1xuY29uc3QgZGVmYXVsdFRoZW1lT3B0aW9ucyA9IHtcbiAgZGVmYXVsdFRoZW1lOiAnbGlnaHQnLFxuICB2YXJpYXRpb25zOiB7XG4gICAgY29sb3JzOiBbXSxcbiAgICBsaWdodGVuOiAwLFxuICAgIGRhcmtlbjogMFxuICB9LFxuICB0aGVtZXM6IHtcbiAgICBsaWdodDoge1xuICAgICAgZGFyazogZmFsc2UsXG4gICAgICBjb2xvcnM6IHtcbiAgICAgICAgYmFja2dyb3VuZDogJyNGRkZGRkYnLFxuICAgICAgICBzdXJmYWNlOiAnI0ZGRkZGRicsXG4gICAgICAgICdzdXJmYWNlLWJyaWdodCc6ICcjRkZGRkZGJyxcbiAgICAgICAgJ3N1cmZhY2UtdmFyaWFudCc6ICcjNDI0MjQyJyxcbiAgICAgICAgJ29uLXN1cmZhY2UtdmFyaWFudCc6ICcjRUVFRUVFJyxcbiAgICAgICAgcHJpbWFyeTogJyM2MjAwRUUnLFxuICAgICAgICAncHJpbWFyeS1kYXJrZW4tMSc6ICcjMzcwMEIzJyxcbiAgICAgICAgc2Vjb25kYXJ5OiAnIzAzREFDNicsXG4gICAgICAgICdzZWNvbmRhcnktZGFya2VuLTEnOiAnIzAxODc4NicsXG4gICAgICAgIGVycm9yOiAnI0IwMDAyMCcsXG4gICAgICAgIGluZm86ICcjMjE5NkYzJyxcbiAgICAgICAgc3VjY2VzczogJyM0Q0FGNTAnLFxuICAgICAgICB3YXJuaW5nOiAnI0ZCOEMwMCdcbiAgICAgIH0sXG4gICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgJ2JvcmRlci1jb2xvcic6ICcjMDAwMDAwJyxcbiAgICAgICAgJ2JvcmRlci1vcGFjaXR5JzogMC4xMixcbiAgICAgICAgJ2hpZ2gtZW1waGFzaXMtb3BhY2l0eSc6IDAuODcsXG4gICAgICAgICdtZWRpdW0tZW1waGFzaXMtb3BhY2l0eSc6IDAuNjAsXG4gICAgICAgICdkaXNhYmxlZC1vcGFjaXR5JzogMC4zOCxcbiAgICAgICAgJ2lkbGUtb3BhY2l0eSc6IDAuMDQsXG4gICAgICAgICdob3Zlci1vcGFjaXR5JzogMC4wNCxcbiAgICAgICAgJ2ZvY3VzLW9wYWNpdHknOiAwLjEyLFxuICAgICAgICAnc2VsZWN0ZWQtb3BhY2l0eSc6IDAuMDgsXG4gICAgICAgICdhY3RpdmF0ZWQtb3BhY2l0eSc6IDAuMTIsXG4gICAgICAgICdwcmVzc2VkLW9wYWNpdHknOiAwLjEyLFxuICAgICAgICAnZHJhZ2dlZC1vcGFjaXR5JzogMC4wOCxcbiAgICAgICAgJ3RoZW1lLWtiZCc6ICcjMjEyNTI5JyxcbiAgICAgICAgJ3RoZW1lLW9uLWtiZCc6ICcjRkZGRkZGJyxcbiAgICAgICAgJ3RoZW1lLWNvZGUnOiAnI0Y1RjVGNScsXG4gICAgICAgICd0aGVtZS1vbi1jb2RlJzogJyMwMDAwMDAnXG4gICAgICB9XG4gICAgfSxcbiAgICBkYXJrOiB7XG4gICAgICBkYXJrOiB0cnVlLFxuICAgICAgY29sb3JzOiB7XG4gICAgICAgIGJhY2tncm91bmQ6ICcjMTIxMjEyJyxcbiAgICAgICAgc3VyZmFjZTogJyMyMTIxMjEnLFxuICAgICAgICAnc3VyZmFjZS1icmlnaHQnOiAnI2NjYmZkNicsXG4gICAgICAgICdzdXJmYWNlLXZhcmlhbnQnOiAnI2EzYTNhMycsXG4gICAgICAgICdvbi1zdXJmYWNlLXZhcmlhbnQnOiAnIzQyNDI0MicsXG4gICAgICAgIHByaW1hcnk6ICcjQkI4NkZDJyxcbiAgICAgICAgJ3ByaW1hcnktZGFya2VuLTEnOiAnIzM3MDBCMycsXG4gICAgICAgIHNlY29uZGFyeTogJyMwM0RBQzUnLFxuICAgICAgICAnc2Vjb25kYXJ5LWRhcmtlbi0xJzogJyMwM0RBQzUnLFxuICAgICAgICBlcnJvcjogJyNDRjY2NzknLFxuICAgICAgICBpbmZvOiAnIzIxOTZGMycsXG4gICAgICAgIHN1Y2Nlc3M6ICcjNENBRjUwJyxcbiAgICAgICAgd2FybmluZzogJyNGQjhDMDAnXG4gICAgICB9LFxuICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgICdib3JkZXItY29sb3InOiAnI0ZGRkZGRicsXG4gICAgICAgICdib3JkZXItb3BhY2l0eSc6IDAuMTIsXG4gICAgICAgICdoaWdoLWVtcGhhc2lzLW9wYWNpdHknOiAxLFxuICAgICAgICAnbWVkaXVtLWVtcGhhc2lzLW9wYWNpdHknOiAwLjcwLFxuICAgICAgICAnZGlzYWJsZWQtb3BhY2l0eSc6IDAuNTAsXG4gICAgICAgICdpZGxlLW9wYWNpdHknOiAwLjEwLFxuICAgICAgICAnaG92ZXItb3BhY2l0eSc6IDAuMDQsXG4gICAgICAgICdmb2N1cy1vcGFjaXR5JzogMC4xMixcbiAgICAgICAgJ3NlbGVjdGVkLW9wYWNpdHknOiAwLjA4LFxuICAgICAgICAnYWN0aXZhdGVkLW9wYWNpdHknOiAwLjEyLFxuICAgICAgICAncHJlc3NlZC1vcGFjaXR5JzogMC4xNixcbiAgICAgICAgJ2RyYWdnZWQtb3BhY2l0eSc6IDAuMDgsXG4gICAgICAgICd0aGVtZS1rYmQnOiAnIzIxMjUyOScsXG4gICAgICAgICd0aGVtZS1vbi1rYmQnOiAnI0ZGRkZGRicsXG4gICAgICAgICd0aGVtZS1jb2RlJzogJyMzNDM0MzQnLFxuICAgICAgICAndGhlbWUtb24tY29kZSc6ICcjQ0NDQ0NDJ1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIHBhcnNlVGhlbWVPcHRpb25zKCkge1xuICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZGVmYXVsdFRoZW1lT3B0aW9ucztcbiAgaWYgKCFvcHRpb25zKSByZXR1cm4ge1xuICAgIC4uLmRlZmF1bHRUaGVtZU9wdGlvbnMsXG4gICAgaXNEaXNhYmxlZDogdHJ1ZVxuICB9O1xuICBjb25zdCB0aGVtZXMgPSB7fTtcbiAgZm9yIChjb25zdCBba2V5LCB0aGVtZV0gb2YgT2JqZWN0LmVudHJpZXMob3B0aW9ucy50aGVtZXMgPz8ge30pKSB7XG4gICAgY29uc3QgZGVmYXVsdFRoZW1lID0gdGhlbWUuZGFyayB8fCBrZXkgPT09ICdkYXJrJyA/IGRlZmF1bHRUaGVtZU9wdGlvbnMudGhlbWVzPy5kYXJrIDogZGVmYXVsdFRoZW1lT3B0aW9ucy50aGVtZXM/LmxpZ2h0O1xuICAgIHRoZW1lc1trZXldID0gbWVyZ2VEZWVwKGRlZmF1bHRUaGVtZSwgdGhlbWUpO1xuICB9XG4gIHJldHVybiBtZXJnZURlZXAoZGVmYXVsdFRoZW1lT3B0aW9ucywge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgdGhlbWVzXG4gIH0pO1xufVxuXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRoZW1lKG9wdGlvbnMpIHtcbiAgY29uc3QgcGFyc2VkT3B0aW9ucyA9IHBhcnNlVGhlbWVPcHRpb25zKG9wdGlvbnMpO1xuICBjb25zdCBuYW1lID0gcmVmKHBhcnNlZE9wdGlvbnMuZGVmYXVsdFRoZW1lKTtcbiAgY29uc3QgdGhlbWVzID0gcmVmKHBhcnNlZE9wdGlvbnMudGhlbWVzKTtcbiAgY29uc3QgY29tcHV0ZWRUaGVtZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgYWNjID0ge307XG4gICAgZm9yIChjb25zdCBbbmFtZSwgb3JpZ2luYWxdIG9mIE9iamVjdC5lbnRyaWVzKHRoZW1lcy52YWx1ZSkpIHtcbiAgICAgIGNvbnN0IHRoZW1lID0gYWNjW25hbWVdID0ge1xuICAgICAgICAuLi5vcmlnaW5hbCxcbiAgICAgICAgY29sb3JzOiB7XG4gICAgICAgICAgLi4ub3JpZ2luYWwuY29sb3JzXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBpZiAocGFyc2VkT3B0aW9ucy52YXJpYXRpb25zKSB7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBwYXJzZWRPcHRpb25zLnZhcmlhdGlvbnMuY29sb3JzKSB7XG4gICAgICAgICAgY29uc3QgY29sb3IgPSB0aGVtZS5jb2xvcnNbbmFtZV07XG4gICAgICAgICAgaWYgKCFjb2xvcikgY29udGludWU7XG4gICAgICAgICAgZm9yIChjb25zdCB2YXJpYXRpb24gb2YgWydsaWdodGVuJywgJ2RhcmtlbiddKSB7XG4gICAgICAgICAgICBjb25zdCBmbiA9IHZhcmlhdGlvbiA9PT0gJ2xpZ2h0ZW4nID8gbGlnaHRlbiA6IGRhcmtlbjtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYW1vdW50IG9mIGNyZWF0ZVJhbmdlKHBhcnNlZE9wdGlvbnMudmFyaWF0aW9uc1t2YXJpYXRpb25dLCAxKSkge1xuICAgICAgICAgICAgICB0aGVtZS5jb2xvcnNbYCR7bmFtZX0tJHt2YXJpYXRpb259LSR7YW1vdW50fWBdID0gUkdCdG9IZXgoZm4ocGFyc2VDb2xvcihjb2xvciksIGFtb3VudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBjb2xvciBvZiBPYmplY3Qua2V5cyh0aGVtZS5jb2xvcnMpKSB7XG4gICAgICAgIGlmICgvXm9uLVthLXpdLy50ZXN0KGNvbG9yKSB8fCB0aGVtZS5jb2xvcnNbYG9uLSR7Y29sb3J9YF0pIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBvbkNvbG9yID0gYG9uLSR7Y29sb3J9YDtcbiAgICAgICAgY29uc3QgY29sb3JWYWwgPSBwYXJzZUNvbG9yKHRoZW1lLmNvbG9yc1tjb2xvcl0pO1xuICAgICAgICB0aGVtZS5jb2xvcnNbb25Db2xvcl0gPSBnZXRGb3JlZ3JvdW5kKGNvbG9yVmFsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSk7XG4gIGNvbnN0IGN1cnJlbnQgPSBjb21wdXRlZCgoKSA9PiBjb21wdXRlZFRoZW1lcy52YWx1ZVtuYW1lLnZhbHVlXSk7XG4gIGNvbnN0IHN0eWxlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGlmIChjdXJyZW50LnZhbHVlLmRhcmspIHtcbiAgICAgIGNyZWF0ZUNzc0NsYXNzKGxpbmVzLCAnOnJvb3QnLCBbJ2NvbG9yLXNjaGVtZTogZGFyayddKTtcbiAgICB9XG4gICAgY3JlYXRlQ3NzQ2xhc3MobGluZXMsICc6cm9vdCcsIGdlbkNzc1ZhcmlhYmxlcyhjdXJyZW50LnZhbHVlKSk7XG4gICAgZm9yIChjb25zdCBbdGhlbWVOYW1lLCB0aGVtZV0gb2YgT2JqZWN0LmVudHJpZXMoY29tcHV0ZWRUaGVtZXMudmFsdWUpKSB7XG4gICAgICBjcmVhdGVDc3NDbGFzcyhsaW5lcywgYC52LXRoZW1lLS0ke3RoZW1lTmFtZX1gLCBbYGNvbG9yLXNjaGVtZTogJHt0aGVtZS5kYXJrID8gJ2RhcmsnIDogJ25vcm1hbCd9YCwgLi4uZ2VuQ3NzVmFyaWFibGVzKHRoZW1lKV0pO1xuICAgIH1cbiAgICBjb25zdCBiZ0xpbmVzID0gW107XG4gICAgY29uc3QgZmdMaW5lcyA9IFtdO1xuICAgIGNvbnN0IGNvbG9ycyA9IG5ldyBTZXQoT2JqZWN0LnZhbHVlcyhjb21wdXRlZFRoZW1lcy52YWx1ZSkuZmxhdE1hcCh0aGVtZSA9PiBPYmplY3Qua2V5cyh0aGVtZS5jb2xvcnMpKSk7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgY29sb3JzKSB7XG4gICAgICBpZiAoL15vbi1bYS16XS8udGVzdChrZXkpKSB7XG4gICAgICAgIGNyZWF0ZUNzc0NsYXNzKGZnTGluZXMsIGAuJHtrZXl9YCwgW2Bjb2xvcjogcmdiKHZhcigtLXYtdGhlbWUtJHtrZXl9KSkgIWltcG9ydGFudGBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyZWF0ZUNzc0NsYXNzKGJnTGluZXMsIGAuYmctJHtrZXl9YCwgW2AtLXYtdGhlbWUtb3ZlcmxheS1tdWx0aXBsaWVyOiB2YXIoLS12LXRoZW1lLSR7a2V5fS1vdmVybGF5LW11bHRpcGxpZXIpYCwgYGJhY2tncm91bmQtY29sb3I6IHJnYih2YXIoLS12LXRoZW1lLSR7a2V5fSkpICFpbXBvcnRhbnRgLCBgY29sb3I6IHJnYih2YXIoLS12LXRoZW1lLW9uLSR7a2V5fSkpICFpbXBvcnRhbnRgXSk7XG4gICAgICAgIGNyZWF0ZUNzc0NsYXNzKGZnTGluZXMsIGAudGV4dC0ke2tleX1gLCBbYGNvbG9yOiByZ2IodmFyKC0tdi10aGVtZS0ke2tleX0pKSAhaW1wb3J0YW50YF0pO1xuICAgICAgICBjcmVhdGVDc3NDbGFzcyhmZ0xpbmVzLCBgLmJvcmRlci0ke2tleX1gLCBbYC0tdi1ib3JkZXItY29sb3I6IHZhcigtLXYtdGhlbWUtJHtrZXl9KWBdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGluZXMucHVzaCguLi5iZ0xpbmVzLCAuLi5mZ0xpbmVzKTtcbiAgICByZXR1cm4gbGluZXMubWFwKChzdHIsIGkpID0+IGkgPT09IDAgPyBzdHIgOiBgICAgICR7c3RyfWApLmpvaW4oJycpO1xuICB9KTtcbiAgZnVuY3Rpb24gZ2V0SGVhZCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3R5bGU6IFt7XG4gICAgICAgIGNoaWxkcmVuOiBzdHlsZXMudmFsdWUsXG4gICAgICAgIGlkOiAndnVldGlmeS10aGVtZS1zdHlsZXNoZWV0JyxcbiAgICAgICAgbm9uY2U6IHBhcnNlZE9wdGlvbnMuY3NwTm9uY2UgfHwgZmFsc2VcbiAgICAgIH1dXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBpbnN0YWxsKGFwcCkge1xuICAgIGlmIChwYXJzZWRPcHRpb25zLmlzRGlzYWJsZWQpIHJldHVybjtcbiAgICBjb25zdCBoZWFkID0gYXBwLl9jb250ZXh0LnByb3ZpZGVzLnVzZWhlYWQ7XG4gICAgaWYgKGhlYWQpIHtcbiAgICAgIGlmIChoZWFkLnB1c2gpIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSBoZWFkLnB1c2goZ2V0SGVhZCk7XG4gICAgICAgIGlmIChJTl9CUk9XU0VSKSB7XG4gICAgICAgICAgd2F0Y2goc3R5bGVzLCAoKSA9PiB7XG4gICAgICAgICAgICBlbnRyeS5wYXRjaChnZXRIZWFkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKElOX0JST1dTRVIpIHtcbiAgICAgICAgICBoZWFkLmFkZEhlYWRPYmpzKGNvbXB1dGVkKGdldEhlYWQpKTtcbiAgICAgICAgICB3YXRjaEVmZmVjdCgoKSA9PiBoZWFkLnVwZGF0ZURPTSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoZWFkLmFkZEhlYWRPYmpzKGdldEhlYWQoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHN0eWxlRWwgPSBJTl9CUk9XU0VSID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Z1ZXRpZnktdGhlbWUtc3R5bGVzaGVldCcpIDogbnVsbDtcbiAgICAgIGlmIChJTl9CUk9XU0VSKSB7XG4gICAgICAgIHdhdGNoKHN0eWxlcywgdXBkYXRlU3R5bGVzLCB7XG4gICAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlU3R5bGVzKCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiB1cGRhdGVTdHlsZXMoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmICFzdHlsZUVsKSB7XG4gICAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgIGVsLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgICAgIGVsLmlkID0gJ3Z1ZXRpZnktdGhlbWUtc3R5bGVzaGVldCc7XG4gICAgICAgICAgaWYgKHBhcnNlZE9wdGlvbnMuY3NwTm9uY2UpIGVsLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBwYXJzZWRPcHRpb25zLmNzcE5vbmNlKTtcbiAgICAgICAgICBzdHlsZUVsID0gZWw7XG4gICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGVFbCkgc3R5bGVFbC5pbm5lckhUTUwgPSBzdHlsZXMudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IHRoZW1lQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHBhcnNlZE9wdGlvbnMuaXNEaXNhYmxlZCA/IHVuZGVmaW5lZCA6IGB2LXRoZW1lLS0ke25hbWUudmFsdWV9YCk7XG4gIHJldHVybiB7XG4gICAgaW5zdGFsbCxcbiAgICBpc0Rpc2FibGVkOiBwYXJzZWRPcHRpb25zLmlzRGlzYWJsZWQsXG4gICAgbmFtZSxcbiAgICB0aGVtZXMsXG4gICAgY3VycmVudCxcbiAgICBjb21wdXRlZFRoZW1lcyxcbiAgICB0aGVtZUNsYXNzZXMsXG4gICAgc3R5bGVzLFxuICAgIGdsb2JhbDoge1xuICAgICAgbmFtZSxcbiAgICAgIGN1cnJlbnRcbiAgICB9XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVRoZW1lKHByb3BzKSB7XG4gIGdldEN1cnJlbnRJbnN0YW5jZSgncHJvdmlkZVRoZW1lJyk7XG4gIGNvbnN0IHRoZW1lID0gaW5qZWN0KFRoZW1lU3ltYm9sLCBudWxsKTtcbiAgaWYgKCF0aGVtZSkgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBWdWV0aWZ5IHRoZW1lIGluamVjdGlvbicpO1xuICBjb25zdCBuYW1lID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy50aGVtZSA/PyB0aGVtZS5uYW1lLnZhbHVlO1xuICB9KTtcbiAgY29uc3QgY3VycmVudCA9IGNvbXB1dGVkKCgpID0+IHRoZW1lLnRoZW1lcy52YWx1ZVtuYW1lLnZhbHVlXSk7XG4gIGNvbnN0IHRoZW1lQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHRoZW1lLmlzRGlzYWJsZWQgPyB1bmRlZmluZWQgOiBgdi10aGVtZS0tJHtuYW1lLnZhbHVlfWApO1xuICBjb25zdCBuZXdUaGVtZSA9IHtcbiAgICAuLi50aGVtZSxcbiAgICBuYW1lLFxuICAgIGN1cnJlbnQsXG4gICAgdGhlbWVDbGFzc2VzXG4gIH07XG4gIHByb3ZpZGUoVGhlbWVTeW1ib2wsIG5ld1RoZW1lKTtcbiAgcmV0dXJuIG5ld1RoZW1lO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICBnZXRDdXJyZW50SW5zdGFuY2UoJ3VzZVRoZW1lJyk7XG4gIGNvbnN0IHRoZW1lID0gaW5qZWN0KFRoZW1lU3ltYm9sLCBudWxsKTtcbiAgaWYgKCF0aGVtZSkgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBWdWV0aWZ5IHRoZW1lIGluamVjdGlvbicpO1xuICByZXR1cm4gdGhlbWU7XG59XG5mdW5jdGlvbiBjcmVhdGVDc3NDbGFzcyhsaW5lcywgc2VsZWN0b3IsIGNvbnRlbnQpIHtcbiAgbGluZXMucHVzaChgJHtzZWxlY3Rvcn0ge1xcbmAsIC4uLmNvbnRlbnQubWFwKGxpbmUgPT4gYCAgJHtsaW5lfTtcXG5gKSwgJ31cXG4nKTtcbn1cbmZ1bmN0aW9uIGdlbkNzc1ZhcmlhYmxlcyh0aGVtZSkge1xuICBjb25zdCBsaWdodE92ZXJsYXkgPSB0aGVtZS5kYXJrID8gMiA6IDE7XG4gIGNvbnN0IGRhcmtPdmVybGF5ID0gdGhlbWUuZGFyayA/IDEgOiAyO1xuICBjb25zdCB2YXJpYWJsZXMgPSBbXTtcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhlbWUuY29sb3JzKSkge1xuICAgIGNvbnN0IHJnYiA9IHBhcnNlQ29sb3IodmFsdWUpO1xuICAgIHZhcmlhYmxlcy5wdXNoKGAtLXYtdGhlbWUtJHtrZXl9OiAke3JnYi5yfSwke3JnYi5nfSwke3JnYi5ifWApO1xuICAgIGlmICgha2V5LnN0YXJ0c1dpdGgoJ29uLScpKSB7XG4gICAgICB2YXJpYWJsZXMucHVzaChgLS12LXRoZW1lLSR7a2V5fS1vdmVybGF5LW11bHRpcGxpZXI6ICR7Z2V0THVtYSh2YWx1ZSkgPiAwLjE4ID8gbGlnaHRPdmVybGF5IDogZGFya092ZXJsYXl9YCk7XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoZW1lLnZhcmlhYmxlcykpIHtcbiAgICBjb25zdCBjb2xvciA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuc3RhcnRzV2l0aCgnIycpID8gcGFyc2VDb2xvcih2YWx1ZSkgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcmdiID0gY29sb3IgPyBgJHtjb2xvci5yfSwgJHtjb2xvci5nfSwgJHtjb2xvci5ifWAgOiB1bmRlZmluZWQ7XG4gICAgdmFyaWFibGVzLnB1c2goYC0tdi0ke2tleX06ICR7cmdiID8/IHZhbHVlfWApO1xuICB9XG4gIHJldHVybiB2YXJpYWJsZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aGVtZS5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjcmVhdGVSYW5nZSB9IGZyb20gXCIuLi8uLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3QgZmlyc3REYXkgPSB7XG4gICcwMDEnOiAxLFxuICBBRDogMSxcbiAgQUU6IDYsXG4gIEFGOiA2LFxuICBBRzogMCxcbiAgQUk6IDEsXG4gIEFMOiAxLFxuICBBTTogMSxcbiAgQU46IDEsXG4gIEFSOiAxLFxuICBBUzogMCxcbiAgQVQ6IDEsXG4gIEFVOiAxLFxuICBBWDogMSxcbiAgQVo6IDEsXG4gIEJBOiAxLFxuICBCRDogMCxcbiAgQkU6IDEsXG4gIEJHOiAxLFxuICBCSDogNixcbiAgQk06IDEsXG4gIEJOOiAxLFxuICBCUjogMCxcbiAgQlM6IDAsXG4gIEJUOiAwLFxuICBCVzogMCxcbiAgQlk6IDEsXG4gIEJaOiAwLFxuICBDQTogMCxcbiAgQ0g6IDEsXG4gIENMOiAxLFxuICBDTTogMSxcbiAgQ046IDEsXG4gIENPOiAwLFxuICBDUjogMSxcbiAgQ1k6IDEsXG4gIENaOiAxLFxuICBERTogMSxcbiAgREo6IDYsXG4gIERLOiAxLFxuICBETTogMCxcbiAgRE86IDAsXG4gIERaOiA2LFxuICBFQzogMSxcbiAgRUU6IDEsXG4gIEVHOiA2LFxuICBFUzogMSxcbiAgRVQ6IDAsXG4gIEZJOiAxLFxuICBGSjogMSxcbiAgRk86IDEsXG4gIEZSOiAxLFxuICBHQjogMSxcbiAgJ0dCLWFsdC12YXJpYW50JzogMCxcbiAgR0U6IDEsXG4gIEdGOiAxLFxuICBHUDogMSxcbiAgR1I6IDEsXG4gIEdUOiAwLFxuICBHVTogMCxcbiAgSEs6IDAsXG4gIEhOOiAwLFxuICBIUjogMSxcbiAgSFU6IDEsXG4gIElEOiAwLFxuICBJRTogMSxcbiAgSUw6IDAsXG4gIElOOiAwLFxuICBJUTogNixcbiAgSVI6IDYsXG4gIElTOiAxLFxuICBJVDogMSxcbiAgSk06IDAsXG4gIEpPOiA2LFxuICBKUDogMCxcbiAgS0U6IDAsXG4gIEtHOiAxLFxuICBLSDogMCxcbiAgS1I6IDAsXG4gIEtXOiA2LFxuICBLWjogMSxcbiAgTEE6IDAsXG4gIExCOiAxLFxuICBMSTogMSxcbiAgTEs6IDEsXG4gIExUOiAxLFxuICBMVTogMSxcbiAgTFY6IDEsXG4gIExZOiA2LFxuICBNQzogMSxcbiAgTUQ6IDEsXG4gIE1FOiAxLFxuICBNSDogMCxcbiAgTUs6IDEsXG4gIE1NOiAwLFxuICBNTjogMSxcbiAgTU86IDAsXG4gIE1ROiAxLFxuICBNVDogMCxcbiAgTVY6IDUsXG4gIE1YOiAwLFxuICBNWTogMSxcbiAgTVo6IDAsXG4gIE5JOiAwLFxuICBOTDogMSxcbiAgTk86IDEsXG4gIE5QOiAwLFxuICBOWjogMSxcbiAgT006IDYsXG4gIFBBOiAwLFxuICBQRTogMCxcbiAgUEg6IDAsXG4gIFBLOiAwLFxuICBQTDogMSxcbiAgUFI6IDAsXG4gIFBUOiAwLFxuICBQWTogMCxcbiAgUUE6IDYsXG4gIFJFOiAxLFxuICBSTzogMSxcbiAgUlM6IDEsXG4gIFJVOiAxLFxuICBTQTogMCxcbiAgU0Q6IDYsXG4gIFNFOiAxLFxuICBTRzogMCxcbiAgU0k6IDEsXG4gIFNLOiAxLFxuICBTTTogMSxcbiAgU1Y6IDAsXG4gIFNZOiA2LFxuICBUSDogMCxcbiAgVEo6IDEsXG4gIFRNOiAxLFxuICBUUjogMSxcbiAgVFQ6IDAsXG4gIFRXOiAwLFxuICBVQTogMSxcbiAgVU06IDAsXG4gIFVTOiAwLFxuICBVWTogMSxcbiAgVVo6IDEsXG4gIFZBOiAxLFxuICBWRTogMCxcbiAgVkk6IDAsXG4gIFZOOiAxLFxuICBXUzogMCxcbiAgWEs6IDEsXG4gIFlFOiAwLFxuICBaQTogMCxcbiAgWlc6IDBcbn07XG5mdW5jdGlvbiBnZXRXZWVrQXJyYXkoZGF0ZSwgbG9jYWxlKSB7XG4gIGNvbnN0IHdlZWtzID0gW107XG4gIGxldCBjdXJyZW50V2VlayA9IFtdO1xuICBjb25zdCBmaXJzdERheU9mTW9udGggPSBzdGFydE9mTW9udGgoZGF0ZSk7XG4gIGNvbnN0IGxhc3REYXlPZk1vbnRoID0gZW5kT2ZNb250aChkYXRlKTtcbiAgY29uc3QgZmlyc3REYXlXZWVrSW5kZXggPSAoZmlyc3REYXlPZk1vbnRoLmdldERheSgpIC0gZmlyc3REYXlbbG9jYWxlLnNsaWNlKC0yKS50b1VwcGVyQ2FzZSgpXSArIDcpICUgNztcbiAgY29uc3QgbGFzdERheVdlZWtJbmRleCA9IChsYXN0RGF5T2ZNb250aC5nZXREYXkoKSAtIGZpcnN0RGF5W2xvY2FsZS5zbGljZSgtMikudG9VcHBlckNhc2UoKV0gKyA3KSAlIDc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyc3REYXlXZWVrSW5kZXg7IGkrKykge1xuICAgIGNvbnN0IGFkamFjZW50RGF5ID0gbmV3IERhdGUoZmlyc3REYXlPZk1vbnRoKTtcbiAgICBhZGphY2VudERheS5zZXREYXRlKGFkamFjZW50RGF5LmdldERhdGUoKSAtIChmaXJzdERheVdlZWtJbmRleCAtIGkpKTtcbiAgICBjdXJyZW50V2Vlay5wdXNoKGFkamFjZW50RGF5KTtcbiAgfVxuICBmb3IgKGxldCBpID0gMTsgaSA8PSBsYXN0RGF5T2ZNb250aC5nZXREYXRlKCk7IGkrKykge1xuICAgIGNvbnN0IGRheSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBpKTtcblxuICAgIC8vIEFkZCB0aGUgZGF5IHRvIHRoZSBjdXJyZW50IHdlZWtcbiAgICBjdXJyZW50V2Vlay5wdXNoKGRheSk7XG5cbiAgICAvLyBJZiB0aGUgY3VycmVudCB3ZWVrIGhhcyA3IGRheXMsIGFkZCBpdCB0byB0aGUgd2Vla3MgYXJyYXkgYW5kIHN0YXJ0IGEgbmV3IHdlZWtcbiAgICBpZiAoY3VycmVudFdlZWsubGVuZ3RoID09PSA3KSB7XG4gICAgICB3ZWVrcy5wdXNoKGN1cnJlbnRXZWVrKTtcbiAgICAgIGN1cnJlbnRXZWVrID0gW107XG4gICAgfVxuICB9XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgNyAtIGxhc3REYXlXZWVrSW5kZXg7IGkrKykge1xuICAgIGNvbnN0IGFkamFjZW50RGF5ID0gbmV3IERhdGUobGFzdERheU9mTW9udGgpO1xuICAgIGFkamFjZW50RGF5LnNldERhdGUoYWRqYWNlbnREYXkuZ2V0RGF0ZSgpICsgaSk7XG4gICAgY3VycmVudFdlZWsucHVzaChhZGphY2VudERheSk7XG4gIH1cbiAgd2Vla3MucHVzaChjdXJyZW50V2Vlayk7XG4gIHJldHVybiB3ZWVrcztcbn1cbmZ1bmN0aW9uIHN0YXJ0T2ZNb250aChkYXRlKSB7XG4gIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgMSk7XG59XG5mdW5jdGlvbiBlbmRPZk1vbnRoKGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgMSwgMCk7XG59XG5mdW5jdGlvbiBwYXJzZUxvY2FsRGF0ZSh2YWx1ZSkge1xuICBjb25zdCBwYXJ0cyA9IHZhbHVlLnNwbGl0KCctJykubWFwKE51bWJlcik7XG5cbiAgLy8gbmV3IERhdGUoKSB1c2VzIGxvY2FsIHRpbWUgem9uZSB3aGVuIHBhc3NpbmcgaW5kaXZpZHVhbCBkYXRlIGNvbXBvbmVudCB2YWx1ZXNcbiAgcmV0dXJuIG5ldyBEYXRlKHBhcnRzWzBdLCBwYXJ0c1sxXSAtIDEsIHBhcnRzWzJdKTtcbn1cbmNvbnN0IF9ZWVlNTUREID0gLyhbMTJdXFxkezN9LShbMS05XXwwWzEtOV18MVswLTJdKS0oWzEtOV18MFsxLTldfFsxMl1cXGR8M1swMV0pKS87XG5mdW5jdGlvbiBkYXRlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gbmV3IERhdGUoKTtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIHZhbHVlO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIGxldCBwYXJzZWQ7XG4gICAgaWYgKF9ZWVlNTURELnRlc3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gcGFyc2VMb2NhbERhdGUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWQgPSBEYXRlLnBhcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKCFpc05hTihwYXJzZWQpKSByZXR1cm4gbmV3IERhdGUocGFyc2VkKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmNvbnN0IHN1bmRheUphbnVhcnlTZWNvbmQyMDAwID0gbmV3IERhdGUoMjAwMCwgMCwgMik7XG5mdW5jdGlvbiBnZXRXZWVrZGF5cyhsb2NhbGUpIHtcbiAgY29uc3QgZGF5c0Zyb21TdW5kYXkgPSBmaXJzdERheVtsb2NhbGUuc2xpY2UoLTIpLnRvVXBwZXJDYXNlKCldO1xuICByZXR1cm4gY3JlYXRlUmFuZ2UoNykubWFwKGkgPT4ge1xuICAgIGNvbnN0IHdlZWtkYXkgPSBuZXcgRGF0ZShzdW5kYXlKYW51YXJ5U2Vjb25kMjAwMCk7XG4gICAgd2Vla2RheS5zZXREYXRlKHN1bmRheUphbnVhcnlTZWNvbmQyMDAwLmdldERhdGUoKSArIGRheXNGcm9tU3VuZGF5ICsgaSk7XG4gICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwge1xuICAgICAgd2Vla2RheTogJ25hcnJvdydcbiAgICB9KS5mb3JtYXQod2Vla2RheSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZm9ybWF0KHZhbHVlLCBmb3JtYXRTdHJpbmcsIGxvY2FsZSkge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUodmFsdWUpO1xuICBsZXQgb3B0aW9ucyA9IHt9O1xuICBzd2l0Y2ggKGZvcm1hdFN0cmluZykge1xuICAgIGNhc2UgJ2Z1bGxEYXRlV2l0aFdlZWtkYXknOlxuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgd2Vla2RheTogJ2xvbmcnLFxuICAgICAgICBkYXk6ICdudW1lcmljJyxcbiAgICAgICAgbW9udGg6ICdsb25nJyxcbiAgICAgICAgeWVhcjogJ251bWVyaWMnXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbm9ybWFsRGF0ZVdpdGhXZWVrZGF5JzpcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHdlZWtkYXk6ICdzaG9ydCcsXG4gICAgICAgIGRheTogJ251bWVyaWMnLFxuICAgICAgICBtb250aDogJ3Nob3J0J1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2tleWJvYXJkRGF0ZSc6XG4gICAgICBvcHRpb25zID0ge307XG4gICAgICBicmVhaztcbiAgICBjYXNlICdtb250aEFuZERhdGUnOlxuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgbW9udGg6ICdsb25nJyxcbiAgICAgICAgZGF5OiAnbnVtZXJpYydcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdtb250aEFuZFllYXInOlxuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgbW9udGg6ICdsb25nJyxcbiAgICAgICAgeWVhcjogJ251bWVyaWMnXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZGF5T2ZNb250aCc6XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBkYXk6ICdudW1lcmljJ1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3Nob3J0RGF0ZSc6XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICB5ZWFyOiAnbnVtZXJpYydcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgdGltZVpvbmU6ICdVVEMnLFxuICAgICAgICB0aW1lWm9uZU5hbWU6ICdzaG9ydCdcbiAgICAgIH07XG4gIH1cbiAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0KGRhdGUpO1xufVxuZnVuY3Rpb24gYWRkRGF5cyhkYXRlLCBhbW91bnQpIHtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKGRhdGUpO1xuICBkLnNldERhdGUoZC5nZXREYXRlKCkgKyBhbW91bnQpO1xuICByZXR1cm4gZDtcbn1cbmZ1bmN0aW9uIGFkZE1vbnRocyhkYXRlLCBhbW91bnQpIHtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKGRhdGUpO1xuICBkLnNldE1vbnRoKGQuZ2V0TW9udGgoKSArIGFtb3VudCk7XG4gIHJldHVybiBkO1xufVxuZnVuY3Rpb24gZ2V0WWVhcihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCk7XG59XG5mdW5jdGlvbiBnZXRNb250aChkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG59XG5mdW5jdGlvbiBzdGFydE9mWWVhcihkYXRlKSB7XG4gIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xufVxuZnVuY3Rpb24gZW5kT2ZZZWFyKGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgMTEsIDMxKTtcbn1cbmZ1bmN0aW9uIGlzV2l0aGluUmFuZ2UoZGF0ZSwgcmFuZ2UpIHtcbiAgcmV0dXJuIGlzQWZ0ZXIoZGF0ZSwgcmFuZ2VbMF0pICYmIGlzQmVmb3JlKGRhdGUsIHJhbmdlWzFdKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWQoZGF0ZSkge1xuICBpZiAoIWRhdGUgfHwgZGF0ZSA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IGQgPSBuZXcgRGF0ZShkYXRlKTtcbiAgcmV0dXJuIGQgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTihkLmdldFRpbWUoKSk7XG59XG5mdW5jdGlvbiBpc0FmdGVyKGRhdGUsIGNvbXBhcmluZykge1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgPiBjb21wYXJpbmcuZ2V0VGltZSgpO1xufVxuZnVuY3Rpb24gaXNCZWZvcmUoZGF0ZSwgY29tcGFyaW5nKSB7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSA8IGNvbXBhcmluZy5nZXRUaW1lKCk7XG59XG5mdW5jdGlvbiBpc0VxdWFsKGRhdGUsIGNvbXBhcmluZykge1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgPT09IGNvbXBhcmluZy5nZXRUaW1lKCk7XG59XG5mdW5jdGlvbiBpc1NhbWVEYXkoZGF0ZSwgY29tcGFyaW5nKSB7XG4gIHJldHVybiBkYXRlLmdldERhdGUoKSA9PT0gY29tcGFyaW5nLmdldERhdGUoKSAmJiBkYXRlLmdldE1vbnRoKCkgPT09IGNvbXBhcmluZy5nZXRNb250aCgpICYmIGRhdGUuZ2V0RnVsbFllYXIoKSA9PT0gY29tcGFyaW5nLmdldEZ1bGxZZWFyKCk7XG59XG5mdW5jdGlvbiBpc1NhbWVNb250aChkYXRlLCBjb21wYXJpbmcpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKSA9PT0gY29tcGFyaW5nLmdldE1vbnRoKCkgJiYgZGF0ZS5nZXRGdWxsWWVhcigpID09PSBjb21wYXJpbmcuZ2V0RnVsbFllYXIoKTtcbn1cbmZ1bmN0aW9uIGdldERpZmYoZGF0ZSwgY29tcGFyaW5nLCB1bml0KSB7XG4gIGNvbnN0IGQgPSBuZXcgRGF0ZShkYXRlKTtcbiAgY29uc3QgYyA9IG5ldyBEYXRlKGNvbXBhcmluZyk7XG4gIGlmICh1bml0ID09PSAnbW9udGgnKSB7XG4gICAgcmV0dXJuIGQuZ2V0TW9udGgoKSAtIGMuZ2V0TW9udGgoKSArIChkLmdldEZ1bGxZZWFyKCkgLSBjLmdldEZ1bGxZZWFyKCkpICogMTI7XG4gIH1cbiAgcmV0dXJuIE1hdGguZmxvb3IoKGQuZ2V0VGltZSgpIC0gYy5nZXRUaW1lKCkpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKTtcbn1cbmZ1bmN0aW9uIHNldFllYXIoZGF0ZSwgeWVhcikge1xuICBjb25zdCBkID0gbmV3IERhdGUoZGF0ZSk7XG4gIGQuc2V0RnVsbFllYXIoeWVhcik7XG4gIHJldHVybiBkO1xufVxuZnVuY3Rpb24gc3RhcnRPZkRheShkYXRlKSB7XG4gIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpO1xufVxuZnVuY3Rpb24gZW5kT2ZEYXkoZGF0ZSkge1xuICByZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCAyMywgNTksIDU5LCA5OTkpO1xufVxuZXhwb3J0IGNsYXNzIFZ1ZXRpZnlEYXRlQWRhcHRlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLmxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB9XG4gIGRhdGUodmFsdWUpIHtcbiAgICByZXR1cm4gZGF0ZSh2YWx1ZSk7XG4gIH1cbiAgdG9Kc0RhdGUoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIGFkZERheXMoZGF0ZSwgYW1vdW50KSB7XG4gICAgcmV0dXJuIGFkZERheXMoZGF0ZSwgYW1vdW50KTtcbiAgfVxuICBhZGRNb250aHMoZGF0ZSwgYW1vdW50KSB7XG4gICAgcmV0dXJuIGFkZE1vbnRocyhkYXRlLCBhbW91bnQpO1xuICB9XG4gIGdldFdlZWtBcnJheShkYXRlKSB7XG4gICAgcmV0dXJuIGdldFdlZWtBcnJheShkYXRlLCB0aGlzLmxvY2FsZSk7XG4gIH1cbiAgc3RhcnRPZk1vbnRoKGRhdGUpIHtcbiAgICByZXR1cm4gc3RhcnRPZk1vbnRoKGRhdGUpO1xuICB9XG4gIGVuZE9mTW9udGgoZGF0ZSkge1xuICAgIHJldHVybiBlbmRPZk1vbnRoKGRhdGUpO1xuICB9XG4gIGZvcm1hdChkYXRlLCBmb3JtYXRTdHJpbmcpIHtcbiAgICByZXR1cm4gZm9ybWF0KGRhdGUsIGZvcm1hdFN0cmluZywgdGhpcy5sb2NhbGUpO1xuICB9XG4gIGlzRXF1YWwoZGF0ZSwgY29tcGFyaW5nKSB7XG4gICAgcmV0dXJuIGlzRXF1YWwoZGF0ZSwgY29tcGFyaW5nKTtcbiAgfVxuICBpc1ZhbGlkKGRhdGUpIHtcbiAgICByZXR1cm4gaXNWYWxpZChkYXRlKTtcbiAgfVxuICBpc1dpdGhpblJhbmdlKGRhdGUsIHJhbmdlKSB7XG4gICAgcmV0dXJuIGlzV2l0aGluUmFuZ2UoZGF0ZSwgcmFuZ2UpO1xuICB9XG4gIGlzQWZ0ZXIoZGF0ZSwgY29tcGFyaW5nKSB7XG4gICAgcmV0dXJuIGlzQWZ0ZXIoZGF0ZSwgY29tcGFyaW5nKTtcbiAgfVxuICBpc0JlZm9yZShkYXRlLCBjb21wYXJpbmcpIHtcbiAgICByZXR1cm4gIWlzQWZ0ZXIoZGF0ZSwgY29tcGFyaW5nKSAmJiAhaXNFcXVhbChkYXRlLCBjb21wYXJpbmcpO1xuICB9XG4gIGlzU2FtZURheShkYXRlLCBjb21wYXJpbmcpIHtcbiAgICByZXR1cm4gaXNTYW1lRGF5KGRhdGUsIGNvbXBhcmluZyk7XG4gIH1cbiAgaXNTYW1lTW9udGgoZGF0ZSwgY29tcGFyaW5nKSB7XG4gICAgcmV0dXJuIGlzU2FtZU1vbnRoKGRhdGUsIGNvbXBhcmluZyk7XG4gIH1cbiAgc2V0WWVhcihkYXRlLCB5ZWFyKSB7XG4gICAgcmV0dXJuIHNldFllYXIoZGF0ZSwgeWVhcik7XG4gIH1cbiAgZ2V0RGlmZihkYXRlLCBjb21wYXJpbmcsIHVuaXQpIHtcbiAgICByZXR1cm4gZ2V0RGlmZihkYXRlLCBjb21wYXJpbmcsIHVuaXQpO1xuICB9XG4gIGdldFdlZWtkYXlzKCkge1xuICAgIHJldHVybiBnZXRXZWVrZGF5cyh0aGlzLmxvY2FsZSk7XG4gIH1cbiAgZ2V0WWVhcihkYXRlKSB7XG4gICAgcmV0dXJuIGdldFllYXIoZGF0ZSk7XG4gIH1cbiAgZ2V0TW9udGgoZGF0ZSkge1xuICAgIHJldHVybiBnZXRNb250aChkYXRlKTtcbiAgfVxuICBzdGFydE9mRGF5KGRhdGUpIHtcbiAgICByZXR1cm4gc3RhcnRPZkRheShkYXRlKTtcbiAgfVxuICBlbmRPZkRheShkYXRlKSB7XG4gICAgcmV0dXJuIGVuZE9mRGF5KGRhdGUpO1xuICB9XG4gIHN0YXJ0T2ZZZWFyKGRhdGUpIHtcbiAgICByZXR1cm4gc3RhcnRPZlllYXIoZGF0ZSk7XG4gIH1cbiAgZW5kT2ZZZWFyKGRhdGUpIHtcbiAgICByZXR1cm4gZW5kT2ZZZWFyKGRhdGUpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12dWV0aWZ5Lm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBpbmplY3QsIHJlYWN0aXZlLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBtZXJnZURlZXAsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBBZGFwdGVyc1xuaW1wb3J0IHsgVnVldGlmeURhdGVBZGFwdGVyIH0gZnJvbSBcIi4vYWRhcHRlcnMvdnVldGlmeS5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBEYXRlQWRhcHRlclN5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6ZGF0ZS1hZGFwdGVyJyk7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBtZXJnZURlZXAoe1xuICAgIGFkYXB0ZXI6IFZ1ZXRpZnlEYXRlQWRhcHRlcixcbiAgICBsb2NhbGU6IHtcbiAgICAgIGFmOiAnYWYtWkEnLFxuICAgICAgLy8gYXI6ICcnLCAjIG5vdCB0aGUgc2FtZSB2YWx1ZSBmb3IgYWxsIHZhcmlhbnRzXG4gICAgICBiZzogJ2JnLUJHJyxcbiAgICAgIGNhOiAnY2EtRVMnLFxuICAgICAgY2tiOiAnJyxcbiAgICAgIGNzOiAnJyxcbiAgICAgIGRlOiAnZGUtREUnLFxuICAgICAgZWw6ICdlbC1HUicsXG4gICAgICBlbjogJ2VuLVVTJyxcbiAgICAgIC8vIGVzOiAnJywgIyBub3QgdGhlIHNhbWUgdmFsdWUgZm9yIGFsbCB2YXJpYW50c1xuICAgICAgZXQ6ICdldC1FRScsXG4gICAgICBmYTogJ2ZhLUlSJyxcbiAgICAgIGZpOiAnZmktRkknLFxuICAgICAgLy8gZnI6ICcnLCAjbm90IHRoZSBzYW1lIHZhbHVlIGZvciBhbGwgdmFyaWFudHNcbiAgICAgIGhyOiAnaHItSFInLFxuICAgICAgaHU6ICdodS1IVScsXG4gICAgICBoZTogJ2hlLUlMJyxcbiAgICAgIGlkOiAnaWQtSUQnLFxuICAgICAgaXQ6ICdpdC1JVCcsXG4gICAgICBqYTogJ2phLUpQJyxcbiAgICAgIGtvOiAna28tS1InLFxuICAgICAgbHY6ICdsdi1MVicsXG4gICAgICBsdDogJ2x0LUxUJyxcbiAgICAgIG5sOiAnbmwtTkwnLFxuICAgICAgbm86ICdubi1OTycsXG4gICAgICBwbDogJ3BsLVBMJyxcbiAgICAgIHB0OiAncHQtUFQnLFxuICAgICAgcm86ICdyby1STycsXG4gICAgICBydTogJ3J1LVJVJyxcbiAgICAgIHNrOiAnc2stU0snLFxuICAgICAgc2w6ICdzbC1TSScsXG4gICAgICBzckN5cmw6ICdzci1TUCcsXG4gICAgICBzckxhdG46ICdzci1TUCcsXG4gICAgICBzdjogJ3N2LVNFJyxcbiAgICAgIHRoOiAndGgtVEgnLFxuICAgICAgdHI6ICd0ci1UUicsXG4gICAgICBhejogJ2F6LUFaJyxcbiAgICAgIHVrOiAndWstVUEnLFxuICAgICAgdmk6ICd2aS1WTicsXG4gICAgICB6aEhhbnM6ICd6aC1DTicsXG4gICAgICB6aEhhbnQ6ICd6aC1UVydcbiAgICB9XG4gIH0sIG9wdGlvbnMpO1xufVxuXG4vLyBUT0RPOiByZXZpc2l0IHRoaXMgYWZ0ZXIgaXQgc3RhcnRzIGJlaW5nIGltcGxlbWVudGVkXG5leHBvcnQgY29uc3QgbWFrZURhdGVQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGRpc3BsYXlEYXRlOiB7XG4gICAgdHlwZTogT2JqZWN0LFxuICAgIGRlZmF1bHQ6IG5ldyBEYXRlKClcbiAgfSxcbiAgaGlkZUFkamFjZW50TW9udGhzOiBCb29sZWFuLFxuICBtb2RlbFZhbHVlOiB7XG4gICAgdHlwZTogbnVsbCxcbiAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICB9XG59LCAnZGF0ZScpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURhdGUoKSB7XG4gIGNvbnN0IGRhdGUgPSBpbmplY3QoRGF0ZUFkYXB0ZXJTeW1ib2wpO1xuICBjb25zdCBsb2NhbGUgPSB1c2VMb2NhbGUoKTtcbiAgaWYgKCFkYXRlKSB0aHJvdyBuZXcgRXJyb3IoJ1tWdWV0aWZ5XSBDb3VsZCBub3QgZmluZCBpbmplY3RlZCBkYXRlJyk7XG4gIGNvbnN0IGluc3RhbmNlID0gcmVhY3RpdmUodHlwZW9mIGRhdGUuYWRhcHRlciA9PT0gJ2Z1bmN0aW9uJ1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICA/IG5ldyBkYXRlLmFkYXB0ZXIoe1xuICAgIGxvY2FsZTogZGF0ZS5sb2NhbGU/Lltsb2NhbGUuY3VycmVudC52YWx1ZV0gPz8gbG9jYWxlLmN1cnJlbnQudmFsdWVcbiAgfSkgOiBkYXRlLmFkYXB0ZXIpO1xuICB3YXRjaChsb2NhbGUuY3VycmVudCwgdmFsdWUgPT4ge1xuICAgIGNvbnN0IG5ld0xvY2FsZSA9IGRhdGUubG9jYWxlID8gZGF0ZS5sb2NhbGVbdmFsdWVdIDogdmFsdWU7XG4gICAgaW5zdGFuY2UubG9jYWxlID0gbmV3TG9jYWxlID8/IGluc3RhbmNlLmxvY2FsZTtcbiAgfSk7XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b0lzbyhhZGFwdGVyLCB2YWx1ZSkge1xuICBjb25zdCBkYXRlID0gYWRhcHRlci50b0pzRGF0ZSh2YWx1ZSk7XG4gIHJldHVybiBgJHtkYXRlLmdldEZ1bGxZZWFyKCl9LSR7ZGF0ZS5nZXRNb250aCgpICsgMX0tJHtkYXRlLmdldERhdGUoKX1gO1xufVxuZnVuY3Rpb24gZ2V0TW9uZGF5T2ZGaXJzdFdlZWtPZlllYXIoeWVhcikge1xuICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgMSk7XG59XG5cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI3NDg2MS9ob3ctZG8taS1jYWxjdWxhdGUtdGhlLXdlZWstbnVtYmVyLWdpdmVuLWEtZGF0ZS8yNzUwMjQjMjc1MDI0XG5leHBvcnQgZnVuY3Rpb24gZ2V0V2VlayhhZGFwdGVyLCB2YWx1ZSkge1xuICBjb25zdCBkYXRlID0gYWRhcHRlci50b0pzRGF0ZSh2YWx1ZSk7XG4gIGxldCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICBsZXQgZDF3MSA9IGdldE1vbmRheU9mRmlyc3RXZWVrT2ZZZWFyKHllYXIpO1xuICBpZiAoZGF0ZSA8IGQxdzEpIHtcbiAgICB5ZWFyID0geWVhciAtIDE7XG4gICAgZDF3MSA9IGdldE1vbmRheU9mRmlyc3RXZWVrT2ZZZWFyKHllYXIpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHR2ID0gZ2V0TW9uZGF5T2ZGaXJzdFdlZWtPZlllYXIoeWVhciArIDEpO1xuICAgIGlmIChkYXRlID49IHR2KSB7XG4gICAgICB5ZWFyID0geWVhciArIDE7XG4gICAgICBkMXcxID0gdHY7XG4gICAgfVxuICB9XG4gIGNvbnN0IGRpZmZUaW1lID0gTWF0aC5hYnMoZGF0ZS5nZXRUaW1lKCkgLSBkMXcxLmdldFRpbWUoKSk7XG4gIGNvbnN0IGRpZmZEYXlzID0gTWF0aC5jZWlsKGRpZmZUaW1lIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKTtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZkRheXMgLyA3KSArIDE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IG9uQmVmb3JlVW5tb3VudCwgcmVhZG9ubHksIHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgcmVmRWxlbWVudCB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgSU5fQlJPV1NFUiB9IGZyb20gXCIuLi91dGlsL2dsb2JhbHMubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVzaXplT2JzZXJ2ZXIoY2FsbGJhY2spIHtcbiAgbGV0IGJveCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2NvbnRlbnQnO1xuICBjb25zdCByZXNpemVSZWYgPSByZWYoKTtcbiAgY29uc3QgY29udGVudFJlY3QgPSByZWYoKTtcbiAgaWYgKElOX0JST1dTRVIpIHtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgIGNhbGxiYWNrPy4oZW50cmllcywgb2JzZXJ2ZXIpO1xuICAgICAgaWYgKCFlbnRyaWVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgaWYgKGJveCA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICAgIGNvbnRlbnRSZWN0LnZhbHVlID0gZW50cmllc1swXS5jb250ZW50UmVjdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnRSZWN0LnZhbHVlID0gZW50cmllc1swXS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICB3YXRjaChyZXNpemVSZWYsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChvbGRWYWx1ZSkge1xuICAgICAgICBvYnNlcnZlci51bm9ic2VydmUocmVmRWxlbWVudChvbGRWYWx1ZSkpO1xuICAgICAgICBjb250ZW50UmVjdC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdWYWx1ZSkgb2JzZXJ2ZXIub2JzZXJ2ZShyZWZFbGVtZW50KG5ld1ZhbHVlKSk7XG4gICAgfSwge1xuICAgICAgZmx1c2g6ICdwb3N0J1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgcmVzaXplUmVmLFxuICAgIGNvbnRlbnRSZWN0OiByZWFkb25seShjb250ZW50UmVjdClcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc2l6ZU9ic2VydmVyLm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlUmVzaXplT2JzZXJ2ZXIgfSBmcm9tIFwiLi9yZXNpemVPYnNlcnZlci5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaW5qZWN0LCBvbkFjdGl2YXRlZCwgb25CZWZvcmVVbm1vdW50LCBvbkRlYWN0aXZhdGVkLCBvbk1vdW50ZWQsIHByb3ZpZGUsIHJlYWN0aXZlLCByZWYsIHNoYWxsb3dSZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZmluZENoaWxkcmVuV2l0aFByb3ZpZGUsIGdldEN1cnJlbnRJbnN0YW5jZSwgZ2V0VWlkLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBWdWV0aWZ5TGF5b3V0S2V5ID0gU3ltYm9sLmZvcigndnVldGlmeTpsYXlvdXQnKTtcbmV4cG9ydCBjb25zdCBWdWV0aWZ5TGF5b3V0SXRlbUtleSA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6bGF5b3V0LWl0ZW0nKTtcbmNvbnN0IFJPT1RfWklOREVYID0gMTAwMDtcbmV4cG9ydCBjb25zdCBtYWtlTGF5b3V0UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBvdmVybGFwczoge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gIH0sXG4gIGZ1bGxIZWlnaHQ6IEJvb2xlYW5cbn0sICdsYXlvdXQnKTtcblxuLy8gQ29tcG9zYWJsZXNcbmV4cG9ydCBjb25zdCBtYWtlTGF5b3V0SXRlbVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgbmFtZToge1xuICAgIHR5cGU6IFN0cmluZ1xuICB9LFxuICBvcmRlcjoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICBhYnNvbHV0ZTogQm9vbGVhblxufSwgJ2xheW91dC1pdGVtJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlTGF5b3V0KCkge1xuICBjb25zdCBsYXlvdXQgPSBpbmplY3QoVnVldGlmeUxheW91dEtleSk7XG4gIGlmICghbGF5b3V0KSB0aHJvdyBuZXcgRXJyb3IoJ1tWdWV0aWZ5XSBDb3VsZCBub3QgZmluZCBpbmplY3RlZCBsYXlvdXQnKTtcbiAgcmV0dXJuIHtcbiAgICBnZXRMYXlvdXRJdGVtOiBsYXlvdXQuZ2V0TGF5b3V0SXRlbSxcbiAgICBtYWluUmVjdDogbGF5b3V0Lm1haW5SZWN0LFxuICAgIG1haW5TdHlsZXM6IGxheW91dC5tYWluU3R5bGVzXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlTGF5b3V0SXRlbShvcHRpb25zKSB7XG4gIGNvbnN0IGxheW91dCA9IGluamVjdChWdWV0aWZ5TGF5b3V0S2V5KTtcbiAgaWYgKCFsYXlvdXQpIHRocm93IG5ldyBFcnJvcignW1Z1ZXRpZnldIENvdWxkIG5vdCBmaW5kIGluamVjdGVkIGxheW91dCcpO1xuICBjb25zdCBpZCA9IG9wdGlvbnMuaWQgPz8gYGxheW91dC1pdGVtLSR7Z2V0VWlkKCl9YDtcbiAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoJ3VzZUxheW91dEl0ZW0nKTtcbiAgcHJvdmlkZShWdWV0aWZ5TGF5b3V0SXRlbUtleSwge1xuICAgIGlkXG4gIH0pO1xuICBjb25zdCBpc0tlcHRBbGl2ZSA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICBvbkRlYWN0aXZhdGVkKCgpID0+IGlzS2VwdEFsaXZlLnZhbHVlID0gdHJ1ZSk7XG4gIG9uQWN0aXZhdGVkKCgpID0+IGlzS2VwdEFsaXZlLnZhbHVlID0gZmFsc2UpO1xuICBjb25zdCB7XG4gICAgbGF5b3V0SXRlbVN0eWxlcyxcbiAgICBsYXlvdXRJdGVtU2NyaW1TdHlsZXNcbiAgfSA9IGxheW91dC5yZWdpc3Rlcih2bSwge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgYWN0aXZlOiBjb21wdXRlZCgoKSA9PiBpc0tlcHRBbGl2ZS52YWx1ZSA/IGZhbHNlIDogb3B0aW9ucy5hY3RpdmUudmFsdWUpLFxuICAgIGlkXG4gIH0pO1xuICBvbkJlZm9yZVVubW91bnQoKCkgPT4gbGF5b3V0LnVucmVnaXN0ZXIoaWQpKTtcbiAgcmV0dXJuIHtcbiAgICBsYXlvdXRJdGVtU3R5bGVzLFxuICAgIGxheW91dFJlY3Q6IGxheW91dC5sYXlvdXRSZWN0LFxuICAgIGxheW91dEl0ZW1TY3JpbVN0eWxlc1xuICB9O1xufVxuY29uc3QgZ2VuZXJhdGVMYXllcnMgPSAobGF5b3V0LCBwb3NpdGlvbnMsIGxheW91dFNpemVzLCBhY3RpdmVJdGVtcykgPT4ge1xuICBsZXQgcHJldmlvdXNMYXllciA9IHtcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDBcbiAgfTtcbiAgY29uc3QgbGF5ZXJzID0gW3tcbiAgICBpZDogJycsXG4gICAgbGF5ZXI6IHtcbiAgICAgIC4uLnByZXZpb3VzTGF5ZXJcbiAgICB9XG4gIH1dO1xuICBmb3IgKGNvbnN0IGlkIG9mIGxheW91dCkge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25zLmdldChpZCk7XG4gICAgY29uc3QgYW1vdW50ID0gbGF5b3V0U2l6ZXMuZ2V0KGlkKTtcbiAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVJdGVtcy5nZXQoaWQpO1xuICAgIGlmICghcG9zaXRpb24gfHwgIWFtb3VudCB8fCAhYWN0aXZlKSBjb250aW51ZTtcbiAgICBjb25zdCBsYXllciA9IHtcbiAgICAgIC4uLnByZXZpb3VzTGF5ZXIsXG4gICAgICBbcG9zaXRpb24udmFsdWVdOiBwYXJzZUludChwcmV2aW91c0xheWVyW3Bvc2l0aW9uLnZhbHVlXSwgMTApICsgKGFjdGl2ZS52YWx1ZSA/IHBhcnNlSW50KGFtb3VudC52YWx1ZSwgMTApIDogMClcbiAgICB9O1xuICAgIGxheWVycy5wdXNoKHtcbiAgICAgIGlkLFxuICAgICAgbGF5ZXJcbiAgICB9KTtcbiAgICBwcmV2aW91c0xheWVyID0gbGF5ZXI7XG4gIH1cbiAgcmV0dXJuIGxheWVycztcbn07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGF5b3V0KHByb3BzKSB7XG4gIGNvbnN0IHBhcmVudExheW91dCA9IGluamVjdChWdWV0aWZ5TGF5b3V0S2V5LCBudWxsKTtcbiAgY29uc3Qgcm9vdFpJbmRleCA9IGNvbXB1dGVkKCgpID0+IHBhcmVudExheW91dCA/IHBhcmVudExheW91dC5yb290WkluZGV4LnZhbHVlIC0gMTAwIDogUk9PVF9aSU5ERVgpO1xuICBjb25zdCByZWdpc3RlcmVkID0gcmVmKFtdKTtcbiAgY29uc3QgcG9zaXRpb25zID0gcmVhY3RpdmUobmV3IE1hcCgpKTtcbiAgY29uc3QgbGF5b3V0U2l6ZXMgPSByZWFjdGl2ZShuZXcgTWFwKCkpO1xuICBjb25zdCBwcmlvcml0aWVzID0gcmVhY3RpdmUobmV3IE1hcCgpKTtcbiAgY29uc3QgYWN0aXZlSXRlbXMgPSByZWFjdGl2ZShuZXcgTWFwKCkpO1xuICBjb25zdCBkaXNhYmxlZFRyYW5zaXRpb25zID0gcmVhY3RpdmUobmV3IE1hcCgpKTtcbiAgY29uc3Qge1xuICAgIHJlc2l6ZVJlZixcbiAgICBjb250ZW50UmVjdDogbGF5b3V0UmVjdFxuICB9ID0gdXNlUmVzaXplT2JzZXJ2ZXIoKTtcbiAgY29uc3QgY29tcHV0ZWRPdmVybGFwcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gICAgY29uc3Qgb3ZlcmxhcHMgPSBwcm9wcy5vdmVybGFwcyA/PyBbXTtcbiAgICBmb3IgKGNvbnN0IG92ZXJsYXAgb2Ygb3ZlcmxhcHMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5pbmNsdWRlcygnOicpKSkge1xuICAgICAgY29uc3QgW3RvcCwgYm90dG9tXSA9IG92ZXJsYXAuc3BsaXQoJzonKTtcbiAgICAgIGlmICghcmVnaXN0ZXJlZC52YWx1ZS5pbmNsdWRlcyh0b3ApIHx8ICFyZWdpc3RlcmVkLnZhbHVlLmluY2x1ZGVzKGJvdHRvbSkpIGNvbnRpbnVlO1xuICAgICAgY29uc3QgdG9wUG9zaXRpb24gPSBwb3NpdGlvbnMuZ2V0KHRvcCk7XG4gICAgICBjb25zdCBib3R0b21Qb3NpdGlvbiA9IHBvc2l0aW9ucy5nZXQoYm90dG9tKTtcbiAgICAgIGNvbnN0IHRvcEFtb3VudCA9IGxheW91dFNpemVzLmdldCh0b3ApO1xuICAgICAgY29uc3QgYm90dG9tQW1vdW50ID0gbGF5b3V0U2l6ZXMuZ2V0KGJvdHRvbSk7XG4gICAgICBpZiAoIXRvcFBvc2l0aW9uIHx8ICFib3R0b21Qb3NpdGlvbiB8fCAhdG9wQW1vdW50IHx8ICFib3R0b21BbW91bnQpIGNvbnRpbnVlO1xuICAgICAgbWFwLnNldChib3R0b20sIHtcbiAgICAgICAgcG9zaXRpb246IHRvcFBvc2l0aW9uLnZhbHVlLFxuICAgICAgICBhbW91bnQ6IHBhcnNlSW50KHRvcEFtb3VudC52YWx1ZSwgMTApXG4gICAgICB9KTtcbiAgICAgIG1hcC5zZXQodG9wLCB7XG4gICAgICAgIHBvc2l0aW9uOiBib3R0b21Qb3NpdGlvbi52YWx1ZSxcbiAgICAgICAgYW1vdW50OiAtcGFyc2VJbnQoYm90dG9tQW1vdW50LnZhbHVlLCAxMClcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xuICB9KTtcbiAgY29uc3QgbGF5ZXJzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IHVuaXF1ZVByaW9yaXRpZXMgPSBbLi4ubmV3IFNldChbLi4ucHJpb3JpdGllcy52YWx1ZXMoKV0ubWFwKHAgPT4gcC52YWx1ZSkpXS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgY29uc3QgbGF5b3V0ID0gW107XG4gICAgZm9yIChjb25zdCBwIG9mIHVuaXF1ZVByaW9yaXRpZXMpIHtcbiAgICAgIGNvbnN0IGl0ZW1zID0gcmVnaXN0ZXJlZC52YWx1ZS5maWx0ZXIoaWQgPT4gcHJpb3JpdGllcy5nZXQoaWQpPy52YWx1ZSA9PT0gcCk7XG4gICAgICBsYXlvdXQucHVzaCguLi5pdGVtcyk7XG4gICAgfVxuICAgIHJldHVybiBnZW5lcmF0ZUxheWVycyhsYXlvdXQsIHBvc2l0aW9ucywgbGF5b3V0U2l6ZXMsIGFjdGl2ZUl0ZW1zKTtcbiAgfSk7XG4gIGNvbnN0IHRyYW5zaXRpb25zRW5hYmxlZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gIUFycmF5LmZyb20oZGlzYWJsZWRUcmFuc2l0aW9ucy52YWx1ZXMoKSkuc29tZShyZWYgPT4gcmVmLnZhbHVlKTtcbiAgfSk7XG4gIGNvbnN0IG1haW5SZWN0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBsYXllcnMudmFsdWVbbGF5ZXJzLnZhbHVlLmxlbmd0aCAtIDFdLmxheWVyO1xuICB9KTtcbiAgY29uc3QgbWFpblN0eWxlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgJy0tdi1sYXlvdXQtbGVmdCc6IGNvbnZlcnRUb1VuaXQobWFpblJlY3QudmFsdWUubGVmdCksXG4gICAgICAnLS12LWxheW91dC1yaWdodCc6IGNvbnZlcnRUb1VuaXQobWFpblJlY3QudmFsdWUucmlnaHQpLFxuICAgICAgJy0tdi1sYXlvdXQtdG9wJzogY29udmVydFRvVW5pdChtYWluUmVjdC52YWx1ZS50b3ApLFxuICAgICAgJy0tdi1sYXlvdXQtYm90dG9tJzogY29udmVydFRvVW5pdChtYWluUmVjdC52YWx1ZS5ib3R0b20pLFxuICAgICAgLi4uKHRyYW5zaXRpb25zRW5hYmxlZC52YWx1ZSA/IHVuZGVmaW5lZCA6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogJ25vbmUnXG4gICAgICB9KVxuICAgIH07XG4gIH0pO1xuICBjb25zdCBpdGVtcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gbGF5ZXJzLnZhbHVlLnNsaWNlKDEpLm1hcCgoX3JlZiwgaW5kZXgpID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGlkXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbGF5ZXJcbiAgICAgIH0gPSBsYXllcnMudmFsdWVbaW5kZXhdO1xuICAgICAgY29uc3Qgc2l6ZSA9IGxheW91dFNpemVzLmdldChpZCk7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9ucy5nZXQoaWQpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQsXG4gICAgICAgIC4uLmxheWVyLFxuICAgICAgICBzaXplOiBOdW1iZXIoc2l6ZS52YWx1ZSksXG4gICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbi52YWx1ZVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSk7XG4gIGNvbnN0IGdldExheW91dEl0ZW0gPSBpZCA9PiB7XG4gICAgcmV0dXJuIGl0ZW1zLnZhbHVlLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSBpZCk7XG4gIH07XG4gIGNvbnN0IHJvb3RWbSA9IGdldEN1cnJlbnRJbnN0YW5jZSgnY3JlYXRlTGF5b3V0Jyk7XG4gIGNvbnN0IGlzTW91bnRlZCA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgIGlzTW91bnRlZC52YWx1ZSA9IHRydWU7XG4gIH0pO1xuICBwcm92aWRlKFZ1ZXRpZnlMYXlvdXRLZXksIHtcbiAgICByZWdpc3RlcjogKHZtLCBfcmVmMikgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgaWQsXG4gICAgICAgIG9yZGVyLFxuICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgbGF5b3V0U2l6ZSxcbiAgICAgICAgZWxlbWVudFNpemUsXG4gICAgICAgIGFjdGl2ZSxcbiAgICAgICAgZGlzYWJsZVRyYW5zaXRpb25zLFxuICAgICAgICBhYnNvbHV0ZVxuICAgICAgfSA9IF9yZWYyO1xuICAgICAgcHJpb3JpdGllcy5zZXQoaWQsIG9yZGVyKTtcbiAgICAgIHBvc2l0aW9ucy5zZXQoaWQsIHBvc2l0aW9uKTtcbiAgICAgIGxheW91dFNpemVzLnNldChpZCwgbGF5b3V0U2l6ZSk7XG4gICAgICBhY3RpdmVJdGVtcy5zZXQoaWQsIGFjdGl2ZSk7XG4gICAgICBkaXNhYmxlVHJhbnNpdGlvbnMgJiYgZGlzYWJsZWRUcmFuc2l0aW9ucy5zZXQoaWQsIGRpc2FibGVUcmFuc2l0aW9ucyk7XG4gICAgICBjb25zdCBpbnN0YW5jZXMgPSBmaW5kQ2hpbGRyZW5XaXRoUHJvdmlkZShWdWV0aWZ5TGF5b3V0SXRlbUtleSwgcm9vdFZtPy52bm9kZSk7XG4gICAgICBjb25zdCBpbnN0YW5jZUluZGV4ID0gaW5zdGFuY2VzLmluZGV4T2Yodm0pO1xuICAgICAgaWYgKGluc3RhbmNlSW5kZXggPiAtMSkgcmVnaXN0ZXJlZC52YWx1ZS5zcGxpY2UoaW5zdGFuY2VJbmRleCwgMCwgaWQpO2Vsc2UgcmVnaXN0ZXJlZC52YWx1ZS5wdXNoKGlkKTtcbiAgICAgIGNvbnN0IGluZGV4ID0gY29tcHV0ZWQoKCkgPT4gaXRlbXMudmFsdWUuZmluZEluZGV4KGkgPT4gaS5pZCA9PT0gaWQpKTtcbiAgICAgIGNvbnN0IHpJbmRleCA9IGNvbXB1dGVkKCgpID0+IHJvb3RaSW5kZXgudmFsdWUgKyBsYXllcnMudmFsdWUubGVuZ3RoICogMiAtIGluZGV4LnZhbHVlICogMik7XG4gICAgICBjb25zdCBsYXlvdXRJdGVtU3R5bGVzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSBwb3NpdGlvbi52YWx1ZSA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uLnZhbHVlID09PSAncmlnaHQnO1xuICAgICAgICBjb25zdCBpc09wcG9zaXRlSG9yaXpvbnRhbCA9IHBvc2l0aW9uLnZhbHVlID09PSAncmlnaHQnO1xuICAgICAgICBjb25zdCBpc09wcG9zaXRlVmVydGljYWwgPSBwb3NpdGlvbi52YWx1ZSA9PT0gJ2JvdHRvbSc7XG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IHtcbiAgICAgICAgICBbcG9zaXRpb24udmFsdWVdOiAwLFxuICAgICAgICAgIHpJbmRleDogekluZGV4LnZhbHVlLFxuICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSR7aXNIb3Jpem9udGFsID8gJ1gnIDogJ1knfSgkeyhhY3RpdmUudmFsdWUgPyAwIDogLTExMCkgKiAoaXNPcHBvc2l0ZUhvcml6b250YWwgfHwgaXNPcHBvc2l0ZVZlcnRpY2FsID8gLTEgOiAxKX0lKWAsXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlLnZhbHVlIHx8IHJvb3RaSW5kZXgudmFsdWUgIT09IFJPT1RfWklOREVYID8gJ2Fic29sdXRlJyA6ICdmaXhlZCcsXG4gICAgICAgICAgLi4uKHRyYW5zaXRpb25zRW5hYmxlZC52YWx1ZSA/IHVuZGVmaW5lZCA6IHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246ICdub25lJ1xuICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICAgIGlmICghaXNNb3VudGVkLnZhbHVlKSByZXR1cm4gc3R5bGVzO1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbXMudmFsdWVbaW5kZXgudmFsdWVdO1xuICAgICAgICBpZiAoIWl0ZW0pIHRocm93IG5ldyBFcnJvcihgW1Z1ZXRpZnldIENvdWxkIG5vdCBmaW5kIGxheW91dCBpdGVtIFwiJHtpZH1cImApO1xuICAgICAgICBjb25zdCBvdmVybGFwID0gY29tcHV0ZWRPdmVybGFwcy52YWx1ZS5nZXQoaWQpO1xuICAgICAgICBpZiAob3ZlcmxhcCkge1xuICAgICAgICAgIGl0ZW1bb3ZlcmxhcC5wb3NpdGlvbl0gKz0gb3ZlcmxhcC5hbW91bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5zdHlsZXMsXG4gICAgICAgICAgaGVpZ2h0OiBpc0hvcml6b250YWwgPyBgY2FsYygxMDAlIC0gJHtpdGVtLnRvcH1weCAtICR7aXRlbS5ib3R0b219cHgpYCA6IGVsZW1lbnRTaXplLnZhbHVlID8gYCR7ZWxlbWVudFNpemUudmFsdWV9cHhgIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGxlZnQ6IGlzT3Bwb3NpdGVIb3Jpem9udGFsID8gdW5kZWZpbmVkIDogYCR7aXRlbS5sZWZ0fXB4YCxcbiAgICAgICAgICByaWdodDogaXNPcHBvc2l0ZUhvcml6b250YWwgPyBgJHtpdGVtLnJpZ2h0fXB4YCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0b3A6IHBvc2l0aW9uLnZhbHVlICE9PSAnYm90dG9tJyA/IGAke2l0ZW0udG9wfXB4YCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBib3R0b206IHBvc2l0aW9uLnZhbHVlICE9PSAndG9wJyA/IGAke2l0ZW0uYm90dG9tfXB4YCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICB3aWR0aDogIWlzSG9yaXpvbnRhbCA/IGBjYWxjKDEwMCUgLSAke2l0ZW0ubGVmdH1weCAtICR7aXRlbS5yaWdodH1weClgIDogZWxlbWVudFNpemUudmFsdWUgPyBgJHtlbGVtZW50U2l6ZS52YWx1ZX1weGAgOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgbGF5b3V0SXRlbVNjcmltU3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgICAgekluZGV4OiB6SW5kZXgudmFsdWUgLSAxXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYXlvdXRJdGVtU3R5bGVzLFxuICAgICAgICBsYXlvdXRJdGVtU2NyaW1TdHlsZXMsXG4gICAgICAgIHpJbmRleFxuICAgICAgfTtcbiAgICB9LFxuICAgIHVucmVnaXN0ZXI6IGlkID0+IHtcbiAgICAgIHByaW9yaXRpZXMuZGVsZXRlKGlkKTtcbiAgICAgIHBvc2l0aW9ucy5kZWxldGUoaWQpO1xuICAgICAgbGF5b3V0U2l6ZXMuZGVsZXRlKGlkKTtcbiAgICAgIGFjdGl2ZUl0ZW1zLmRlbGV0ZShpZCk7XG4gICAgICBkaXNhYmxlZFRyYW5zaXRpb25zLmRlbGV0ZShpZCk7XG4gICAgICByZWdpc3RlcmVkLnZhbHVlID0gcmVnaXN0ZXJlZC52YWx1ZS5maWx0ZXIodiA9PiB2ICE9PSBpZCk7XG4gICAgfSxcbiAgICBtYWluUmVjdCxcbiAgICBtYWluU3R5bGVzLFxuICAgIGdldExheW91dEl0ZW0sXG4gICAgaXRlbXMsXG4gICAgbGF5b3V0UmVjdCxcbiAgICByb290WkluZGV4XG4gIH0pO1xuICBjb25zdCBsYXlvdXRDbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4gWyd2LWxheW91dCcsIHtcbiAgICAndi1sYXlvdXQtLWZ1bGwtaGVpZ2h0JzogcHJvcHMuZnVsbEhlaWdodFxuICB9XSk7XG4gIGNvbnN0IGxheW91dFN0eWxlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgekluZGV4OiBwYXJlbnRMYXlvdXQgPyByb290WkluZGV4LnZhbHVlIDogdW5kZWZpbmVkLFxuICAgIHBvc2l0aW9uOiBwYXJlbnRMYXlvdXQgPyAncmVsYXRpdmUnIDogdW5kZWZpbmVkLFxuICAgIG92ZXJmbG93OiBwYXJlbnRMYXlvdXQgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICB9KSk7XG4gIHJldHVybiB7XG4gICAgbGF5b3V0Q2xhc3NlcyxcbiAgICBsYXlvdXRTdHlsZXMsXG4gICAgZ2V0TGF5b3V0SXRlbSxcbiAgICBpdGVtcyxcbiAgICBsYXlvdXRSZWN0LFxuICAgIGxheW91dFJlZjogcmVzaXplUmVmXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYXlvdXQubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBjcmVhdGVEZWZhdWx0cywgRGVmYXVsdHNTeW1ib2wgfSBmcm9tIFwiLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjtcbmltcG9ydCB7IGNyZWF0ZURpc3BsYXksIERpc3BsYXlTeW1ib2wgfSBmcm9tIFwiLi9jb21wb3NhYmxlcy9kaXNwbGF5Lm1qc1wiO1xuaW1wb3J0IHsgY3JlYXRlSWNvbnMsIEljb25TeW1ib2wgfSBmcm9tIFwiLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2FsZSwgTG9jYWxlU3ltYm9sIH0gZnJvbSBcIi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUsIFRoZW1lU3ltYm9sIH0gZnJvbSBcIi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7XG5pbXBvcnQgeyBjcmVhdGVEYXRlLCBEYXRlQWRhcHRlclN5bWJvbCB9IGZyb20gXCIuL2xhYnMvZGF0ZS9kYXRlLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IG5leHRUaWNrLCByZWFjdGl2ZSB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGdldFVpZCwgSU5fQlJPV1NFUiwgbWVyZ2VEZWVwIH0gZnJvbSBcIi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCAqIGZyb20gXCIuL2NvbXBvc2FibGVzL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZ1ZXRpZnkoKSB7XG4gIGxldCB2dWV0aWZ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgY29uc3Qge1xuICAgIGJsdWVwcmludCxcbiAgICAuLi5yZXN0XG4gIH0gPSB2dWV0aWZ5O1xuICBjb25zdCBvcHRpb25zID0gbWVyZ2VEZWVwKGJsdWVwcmludCwgcmVzdCk7XG4gIGNvbnN0IHtcbiAgICBhbGlhc2VzID0ge30sXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGRpcmVjdGl2ZXMgPSB7fVxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgZGVmYXVsdHMgPSBjcmVhdGVEZWZhdWx0cyhvcHRpb25zLmRlZmF1bHRzKTtcbiAgY29uc3QgZGlzcGxheSA9IGNyZWF0ZURpc3BsYXkob3B0aW9ucy5kaXNwbGF5LCBvcHRpb25zLnNzcik7XG4gIGNvbnN0IHRoZW1lID0gY3JlYXRlVGhlbWUob3B0aW9ucy50aGVtZSk7XG4gIGNvbnN0IGljb25zID0gY3JlYXRlSWNvbnMob3B0aW9ucy5pY29ucyk7XG4gIGNvbnN0IGxvY2FsZSA9IGNyZWF0ZUxvY2FsZShvcHRpb25zLmxvY2FsZSk7XG4gIGNvbnN0IGRhdGUgPSBjcmVhdGVEYXRlKG9wdGlvbnMuZGF0ZSk7XG4gIGNvbnN0IGluc3RhbGwgPSBhcHAgPT4ge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGRpcmVjdGl2ZXMpIHtcbiAgICAgIGFwcC5kaXJlY3RpdmUoa2V5LCBkaXJlY3RpdmVzW2tleV0pO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjb21wb25lbnRzKSB7XG4gICAgICBhcHAuY29tcG9uZW50KGtleSwgY29tcG9uZW50c1trZXldKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYWxpYXNlcykge1xuICAgICAgYXBwLmNvbXBvbmVudChrZXksIGRlZmluZUNvbXBvbmVudCh7XG4gICAgICAgIC4uLmFsaWFzZXNba2V5XSxcbiAgICAgICAgbmFtZToga2V5LFxuICAgICAgICBhbGlhc05hbWU6IGFsaWFzZXNba2V5XS5uYW1lXG4gICAgICB9KSk7XG4gICAgfVxuICAgIHRoZW1lLmluc3RhbGwoYXBwKTtcbiAgICBhcHAucHJvdmlkZShEZWZhdWx0c1N5bWJvbCwgZGVmYXVsdHMpO1xuICAgIGFwcC5wcm92aWRlKERpc3BsYXlTeW1ib2wsIGRpc3BsYXkpO1xuICAgIGFwcC5wcm92aWRlKFRoZW1lU3ltYm9sLCB0aGVtZSk7XG4gICAgYXBwLnByb3ZpZGUoSWNvblN5bWJvbCwgaWNvbnMpO1xuICAgIGFwcC5wcm92aWRlKExvY2FsZVN5bWJvbCwgbG9jYWxlKTtcbiAgICBhcHAucHJvdmlkZShEYXRlQWRhcHRlclN5bWJvbCwgZGF0ZSk7XG4gICAgaWYgKElOX0JST1dTRVIgJiYgb3B0aW9ucy5zc3IpIHtcbiAgICAgIGlmIChhcHAuJG51eHQpIHtcbiAgICAgICAgYXBwLiRudXh0Lmhvb2soJ2FwcDpzdXNwZW5zZTpyZXNvbHZlJywgKCkgPT4ge1xuICAgICAgICAgIGRpc3BsYXkudXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIG1vdW50XG4gICAgICAgIH0gPSBhcHA7XG4gICAgICAgIGFwcC5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb25zdCB2bSA9IG1vdW50KC4uLmFyZ3VtZW50cyk7XG4gICAgICAgICAgbmV4dFRpY2soKCkgPT4gZGlzcGxheS51cGRhdGUoKSk7XG4gICAgICAgICAgYXBwLm1vdW50ID0gbW91bnQ7XG4gICAgICAgICAgcmV0dXJuIHZtO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBnZXRVaWQucmVzZXQoKTtcbiAgICBpZiAodHlwZW9mIF9fVlVFX09QVElPTlNfQVBJX18gIT09ICdib29sZWFuJyB8fCBfX1ZVRV9PUFRJT05TX0FQSV9fKSB7XG4gICAgICBhcHAubWl4aW4oe1xuICAgICAgICBjb21wdXRlZDoge1xuICAgICAgICAgICR2dWV0aWZ5KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWN0aXZlKHtcbiAgICAgICAgICAgICAgZGVmYXVsdHM6IGluamVjdC5jYWxsKHRoaXMsIERlZmF1bHRzU3ltYm9sKSxcbiAgICAgICAgICAgICAgZGlzcGxheTogaW5qZWN0LmNhbGwodGhpcywgRGlzcGxheVN5bWJvbCksXG4gICAgICAgICAgICAgIHRoZW1lOiBpbmplY3QuY2FsbCh0aGlzLCBUaGVtZVN5bWJvbCksXG4gICAgICAgICAgICAgIGljb25zOiBpbmplY3QuY2FsbCh0aGlzLCBJY29uU3ltYm9sKSxcbiAgICAgICAgICAgICAgbG9jYWxlOiBpbmplY3QuY2FsbCh0aGlzLCBMb2NhbGVTeW1ib2wpLFxuICAgICAgICAgICAgICBkYXRlOiBpbmplY3QuY2FsbCh0aGlzLCBEYXRlQWRhcHRlclN5bWJvbClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgIGluc3RhbGwsXG4gICAgZGVmYXVsdHMsXG4gICAgZGlzcGxheSxcbiAgICB0aGVtZSxcbiAgICBpY29ucyxcbiAgICBsb2NhbGUsXG4gICAgZGF0ZVxuICB9O1xufVxuZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcIjMuMy4xOVwiO1xuY3JlYXRlVnVldGlmeS52ZXJzaW9uID0gdmVyc2lvbjtcblxuLy8gVnVlJ3MgaW5qZWN0KCkgY2FuIG9ubHkgYmUgdXNlZCBpbiBzZXR1cFxuZnVuY3Rpb24gaW5qZWN0KGtleSkge1xuICBjb25zdCB2bSA9IHRoaXMuJDtcbiAgY29uc3QgcHJvdmlkZXMgPSB2bS5wYXJlbnQ/LnByb3ZpZGVzID8/IHZtLnZub2RlLmFwcENvbnRleHQ/LnByb3ZpZGVzO1xuICBpZiAocHJvdmlkZXMgJiYga2V5IGluIHByb3ZpZGVzKSB7XG4gICAgcmV0dXJuIHByb3ZpZGVzW2tleV07XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyYW1ld29yay5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZBcHAuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgY3JlYXRlTGF5b3V0LCBtYWtlTGF5b3V0UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGF5b3V0Lm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkFwcFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VMYXlvdXRQcm9wcyh7XG4gICAgZnVsbEhlaWdodDogdHJ1ZVxuICB9KSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZBcHAnKTtcbmV4cG9ydCBjb25zdCBWQXBwID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZBcHAnLFxuICBwcm9wczogbWFrZVZBcHBQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHRoZW1lID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBsYXlvdXRDbGFzc2VzLFxuICAgICAgZ2V0TGF5b3V0SXRlbSxcbiAgICAgIGl0ZW1zLFxuICAgICAgbGF5b3V0UmVmXG4gICAgfSA9IGNyZWF0ZUxheW91dChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcnRsQ2xhc3Nlc1xuICAgIH0gPSB1c2VSdGwoKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwicmVmXCI6IGxheW91dFJlZixcbiAgICAgIFwiY2xhc3NcIjogWyd2LWFwcGxpY2F0aW9uJywgdGhlbWUudGhlbWVDbGFzc2VzLnZhbHVlLCBsYXlvdXRDbGFzc2VzLnZhbHVlLCBydGxDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IFtwcm9wcy5zdHlsZV1cbiAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJ2LWFwcGxpY2F0aW9uX193cmFwXCJcbiAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKCldKV0pKTtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0TGF5b3V0SXRlbSxcbiAgICAgIGl0ZW1zLFxuICAgICAgdGhlbWVcbiAgICB9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZBcHAubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VUYWdQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHRhZzoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnZGl2J1xuICB9XG59LCAndGFnJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWcubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWVG9vbGJhclRpdGxlUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICB0ZXh0OiBTdHJpbmcsXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKVxufSwgJ1ZUb29sYmFyVGl0bGUnKTtcbmV4cG9ydCBjb25zdCBWVG9vbGJhclRpdGxlID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZUb29sYmFyVGl0bGUnLFxuICBwcm9wczogbWFrZVZUb29sYmFyVGl0bGVQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBoYXNUZXh0ID0gISEoc2xvdHMuZGVmYXVsdCB8fCBzbG90cy50ZXh0IHx8IHByb3BzLnRleHQpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtdG9vbGJhci10aXRsZScsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbaGFzVGV4dCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXRvb2xiYXItdGl0bGVfX3BsYWNlaG9sZGVyXCJcbiAgICAgICAgfSwgW3Nsb3RzLnRleHQgPyBzbG90cy50ZXh0KCkgOiBwcm9wcy50ZXh0LCBzbG90cy5kZWZhdWx0Py4oKV0pXVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZUb29sYmFyVGl0bGUubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgaCwgVHJhbnNpdGlvbiwgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VUcmFuc2l0aW9uUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgZ3JvdXA6IEJvb2xlYW4sXG4gIGhpZGVPbkxlYXZlOiBCb29sZWFuLFxuICBsZWF2ZUFic29sdXRlOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIG9yaWdpbjogU3RyaW5nXG59LCAndHJhbnNpdGlvbicpO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNzc1RyYW5zaXRpb24obmFtZSwgb3JpZ2luLCBtb2RlKSB7XG4gIHJldHVybiBnZW5lcmljQ29tcG9uZW50KCkoe1xuICAgIG5hbWUsXG4gICAgcHJvcHM6IG1ha2VUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgbW9kZSxcbiAgICAgIG9yaWdpblxuICAgIH0pLFxuICAgIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgICBsZXQge1xuICAgICAgICBzbG90c1xuICAgICAgfSA9IF9yZWY7XG4gICAgICBjb25zdCBmdW5jdGlvbnMgPSB7XG4gICAgICAgIG9uQmVmb3JlRW50ZXIoZWwpIHtcbiAgICAgICAgICBpZiAocHJvcHMub3JpZ2luKSB7XG4gICAgICAgICAgICBlbC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBwcm9wcy5vcmlnaW47XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkxlYXZlKGVsKSB7XG4gICAgICAgICAgaWYgKHByb3BzLmxlYXZlQWJzb2x1dGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgb2Zmc2V0VG9wLFxuICAgICAgICAgICAgICBvZmZzZXRMZWZ0LFxuICAgICAgICAgICAgICBvZmZzZXRXaWR0aCxcbiAgICAgICAgICAgICAgb2Zmc2V0SGVpZ2h0XG4gICAgICAgICAgICB9ID0gZWw7XG4gICAgICAgICAgICBlbC5fdHJhbnNpdGlvbkluaXRpYWxTdHlsZXMgPSB7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBlbC5zdHlsZS5wb3NpdGlvbixcbiAgICAgICAgICAgICAgdG9wOiBlbC5zdHlsZS50b3AsXG4gICAgICAgICAgICAgIGxlZnQ6IGVsLnN0eWxlLmxlZnQsXG4gICAgICAgICAgICAgIHdpZHRoOiBlbC5zdHlsZS53aWR0aCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBlbC5zdHlsZS5oZWlnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBlbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgICBlbC5zdHlsZS50b3AgPSBgJHtvZmZzZXRUb3B9cHhgO1xuICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IGAke29mZnNldExlZnR9cHhgO1xuICAgICAgICAgICAgZWwuc3R5bGUud2lkdGggPSBgJHtvZmZzZXRXaWR0aH1weGA7XG4gICAgICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSBgJHtvZmZzZXRIZWlnaHR9cHhgO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJvcHMuaGlkZU9uTGVhdmUpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ25vbmUnLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkFmdGVyTGVhdmUoZWwpIHtcbiAgICAgICAgICBpZiAocHJvcHMubGVhdmVBYnNvbHV0ZSAmJiBlbD8uX3RyYW5zaXRpb25Jbml0aWFsU3R5bGVzKSB7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgIHBvc2l0aW9uLFxuICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgICAgIH0gPSBlbC5fdHJhbnNpdGlvbkluaXRpYWxTdHlsZXM7XG4gICAgICAgICAgICBkZWxldGUgZWwuX3RyYW5zaXRpb25Jbml0aWFsU3R5bGVzO1xuICAgICAgICAgICAgZWwuc3R5bGUucG9zaXRpb24gPSBwb3NpdGlvbiB8fCAnJztcbiAgICAgICAgICAgIGVsLnN0eWxlLnRvcCA9IHRvcCB8fCAnJztcbiAgICAgICAgICAgIGVsLnN0eWxlLmxlZnQgPSBsZWZ0IHx8ICcnO1xuICAgICAgICAgICAgZWwuc3R5bGUud2lkdGggPSB3aWR0aCB8fCAnJztcbiAgICAgICAgICAgIGVsLnN0eWxlLmhlaWdodCA9IGhlaWdodCB8fCAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjb25zdCB0YWcgPSBwcm9wcy5ncm91cCA/IFRyYW5zaXRpb25Hcm91cCA6IFRyYW5zaXRpb247XG4gICAgICAgIHJldHVybiBoKHRhZywge1xuICAgICAgICAgIG5hbWU6IHByb3BzLmRpc2FibGVkID8gJycgOiBuYW1lLFxuICAgICAgICAgIGNzczogIXByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIC4uLihwcm9wcy5ncm91cCA/IHVuZGVmaW5lZCA6IHtcbiAgICAgICAgICAgIG1vZGU6IHByb3BzLm1vZGVcbiAgICAgICAgICB9KSxcbiAgICAgICAgICAuLi4ocHJvcHMuZGlzYWJsZWQgPyB7fSA6IGZ1bmN0aW9ucylcbiAgICAgICAgfSwgc2xvdHMuZGVmYXVsdCk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSmF2YXNjcmlwdFRyYW5zaXRpb24obmFtZSwgZnVuY3Rpb25zKSB7XG4gIGxldCBtb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnaW4tb3V0JztcbiAgcmV0dXJuIGdlbmVyaWNDb21wb25lbnQoKSh7XG4gICAgbmFtZSxcbiAgICBwcm9wczoge1xuICAgICAgbW9kZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGRlZmF1bHQ6IG1vZGVcbiAgICAgIH0sXG4gICAgICBkaXNhYmxlZDogQm9vbGVhblxuICAgIH0sXG4gICAgc2V0dXAocHJvcHMsIF9yZWYyKSB7XG4gICAgICBsZXQge1xuICAgICAgICBzbG90c1xuICAgICAgfSA9IF9yZWYyO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGgoVHJhbnNpdGlvbiwge1xuICAgICAgICAgIG5hbWU6IHByb3BzLmRpc2FibGVkID8gJycgOiBuYW1lLFxuICAgICAgICAgIGNzczogIXByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIC8vIG1vZGU6IHByb3BzLm1vZGUsIC8vIFRPRE86IHZ1ZWpzL3Z1ZS1uZXh0IzMxMDRcbiAgICAgICAgICAuLi4ocHJvcHMuZGlzYWJsZWQgPyB7fSA6IGZ1bmN0aW9ucylcbiAgICAgICAgfSwgc2xvdHMuZGVmYXVsdCk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVUcmFuc2l0aW9uLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNhbWVsaXplIH0gZnJvbSAndnVlJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcbiAgbGV0IGV4cGFuZGVkUGFyZW50Q2xhc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuICBsZXQgeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gIGNvbnN0IHNpemVQcm9wZXJ0eSA9IHggPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gIGNvbnN0IG9mZnNldFByb3BlcnR5ID0gY2FtZWxpemUoYG9mZnNldC0ke3NpemVQcm9wZXJ0eX1gKTtcbiAgcmV0dXJuIHtcbiAgICBvbkJlZm9yZUVudGVyKGVsKSB7XG4gICAgICBlbC5fcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIGVsLl9pbml0aWFsU3R5bGUgPSB7XG4gICAgICAgIHRyYW5zaXRpb246IGVsLnN0eWxlLnRyYW5zaXRpb24sXG4gICAgICAgIG92ZXJmbG93OiBlbC5zdHlsZS5vdmVyZmxvdyxcbiAgICAgICAgW3NpemVQcm9wZXJ0eV06IGVsLnN0eWxlW3NpemVQcm9wZXJ0eV1cbiAgICAgIH07XG4gICAgfSxcbiAgICBvbkVudGVyKGVsKSB7XG4gICAgICBjb25zdCBpbml0aWFsU3R5bGUgPSBlbC5faW5pdGlhbFN0eWxlO1xuICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJ3RyYW5zaXRpb24nLCAnbm9uZScsICdpbXBvcnRhbnQnKTtcbiAgICAgIC8vIEhpZGUgb3ZlcmZsb3cgdG8gYWNjb3VudCBmb3IgY29sbGFwc2VkIG1hcmdpbnMgaW4gdGhlIGNhbGN1bGF0ZWQgaGVpZ2h0XG4gICAgICBlbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gYCR7ZWxbb2Zmc2V0UHJvcGVydHldfXB4YDtcbiAgICAgIGVsLnN0eWxlW3NpemVQcm9wZXJ0eV0gPSAnMCc7XG4gICAgICB2b2lkIGVsLm9mZnNldEhlaWdodDsgLy8gZm9yY2UgcmVmbG93XG5cbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb24gPSBpbml0aWFsU3R5bGUudHJhbnNpdGlvbjtcbiAgICAgIGlmIChleHBhbmRlZFBhcmVudENsYXNzICYmIGVsLl9wYXJlbnQpIHtcbiAgICAgICAgZWwuX3BhcmVudC5jbGFzc0xpc3QuYWRkKGV4cGFuZGVkUGFyZW50Q2xhc3MpO1xuICAgICAgfVxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgZWwuc3R5bGVbc2l6ZVByb3BlcnR5XSA9IG9mZnNldDtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb25BZnRlckVudGVyOiByZXNldFN0eWxlcyxcbiAgICBvbkVudGVyQ2FuY2VsbGVkOiByZXNldFN0eWxlcyxcbiAgICBvbkxlYXZlKGVsKSB7XG4gICAgICBlbC5faW5pdGlhbFN0eWxlID0ge1xuICAgICAgICB0cmFuc2l0aW9uOiAnJyxcbiAgICAgICAgb3ZlcmZsb3c6IGVsLnN0eWxlLm92ZXJmbG93LFxuICAgICAgICBbc2l6ZVByb3BlcnR5XTogZWwuc3R5bGVbc2l6ZVByb3BlcnR5XVxuICAgICAgfTtcbiAgICAgIGVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICBlbC5zdHlsZVtzaXplUHJvcGVydHldID0gYCR7ZWxbb2Zmc2V0UHJvcGVydHldfXB4YDtcbiAgICAgIHZvaWQgZWwub2Zmc2V0SGVpZ2h0OyAvLyBmb3JjZSByZWZsb3dcblxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IGVsLnN0eWxlW3NpemVQcm9wZXJ0eV0gPSAnMCcpO1xuICAgIH0sXG4gICAgb25BZnRlckxlYXZlLFxuICAgIG9uTGVhdmVDYW5jZWxsZWQ6IG9uQWZ0ZXJMZWF2ZVxuICB9O1xuICBmdW5jdGlvbiBvbkFmdGVyTGVhdmUoZWwpIHtcbiAgICBpZiAoZXhwYW5kZWRQYXJlbnRDbGFzcyAmJiBlbC5fcGFyZW50KSB7XG4gICAgICBlbC5fcGFyZW50LmNsYXNzTGlzdC5yZW1vdmUoZXhwYW5kZWRQYXJlbnRDbGFzcyk7XG4gICAgfVxuICAgIHJlc2V0U3R5bGVzKGVsKTtcbiAgfVxuICBmdW5jdGlvbiByZXNldFN0eWxlcyhlbCkge1xuICAgIGNvbnN0IHNpemUgPSBlbC5faW5pdGlhbFN0eWxlW3NpemVQcm9wZXJ0eV07XG4gICAgZWwuc3R5bGUub3ZlcmZsb3cgPSBlbC5faW5pdGlhbFN0eWxlLm92ZXJmbG93O1xuICAgIGlmIChzaXplICE9IG51bGwpIGVsLnN0eWxlW3NpemVQcm9wZXJ0eV0gPSBzaXplO1xuICAgIGRlbGV0ZSBlbC5faW5pdGlhbFN0eWxlO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBhbmQtdHJhbnNpdGlvbi5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGFjY2VsZXJhdGVkRWFzaW5nLCBhbmltYXRlLCBkZWNlbGVyYXRlZEVhc2luZywgZ2VuZXJpY0NvbXBvbmVudCwgbnVsbGlmeVRyYW5zZm9ybXMsIHByb3BzRmFjdG9yeSwgc3RhbmRhcmRFYXNpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkRpYWxvZ1RyYW5zaXRpb25Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHRhcmdldDogT2JqZWN0XG59LCAndi1kaWFsb2ctdHJhbnNpdGlvbicpO1xuZXhwb3J0IGNvbnN0IFZEaWFsb2dUcmFuc2l0aW9uID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZEaWFsb2dUcmFuc2l0aW9uJyxcbiAgcHJvcHM6IG1ha2VWRGlhbG9nVHJhbnNpdGlvblByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgZnVuY3Rpb25zID0ge1xuICAgICAgb25CZWZvcmVFbnRlcihlbCkge1xuICAgICAgICBlbC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xuICAgICAgICBlbC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICB9LFxuICAgICAgYXN5bmMgb25FbnRlcihlbCwgZG9uZSkge1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShyZXNvbHZlKSk7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc29sdmUpKTtcbiAgICAgICAgZWwuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgeCxcbiAgICAgICAgICB5LFxuICAgICAgICAgIHN4LFxuICAgICAgICAgIHN5LFxuICAgICAgICAgIHNwZWVkXG4gICAgICAgIH0gPSBnZXREaW1lbnNpb25zKHByb3BzLnRhcmdldCwgZWwpO1xuICAgICAgICBjb25zdCBhbmltYXRpb24gPSBhbmltYXRlKGVsLCBbe1xuICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke3h9cHgsICR7eX1weCkgc2NhbGUoJHtzeH0sICR7c3l9KWAsXG4gICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICB9LCB7fV0sIHtcbiAgICAgICAgICBkdXJhdGlvbjogMjI1ICogc3BlZWQsXG4gICAgICAgICAgZWFzaW5nOiBkZWNlbGVyYXRlZEVhc2luZ1xuICAgICAgICB9KTtcbiAgICAgICAgZ2V0Q2hpbGRyZW4oZWwpPy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICBhbmltYXRlKGVsLCBbe1xuICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICBvZmZzZXQ6IDAuMzNcbiAgICAgICAgICB9LCB7fV0sIHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiAyMjUgKiAyICogc3BlZWQsXG4gICAgICAgICAgICBlYXNpbmc6IHN0YW5kYXJkRWFzaW5nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBhbmltYXRpb24uZmluaXNoZWQudGhlbigoKSA9PiBkb25lKCkpO1xuICAgICAgfSxcbiAgICAgIG9uQWZ0ZXJFbnRlcihlbCkge1xuICAgICAgICBlbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncG9pbnRlci1ldmVudHMnKTtcbiAgICAgIH0sXG4gICAgICBvbkJlZm9yZUxlYXZlKGVsKSB7XG4gICAgICAgIGVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgICB9LFxuICAgICAgYXN5bmMgb25MZWF2ZShlbCwgZG9uZSkge1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShyZXNvbHZlKSk7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB4LFxuICAgICAgICAgIHksXG4gICAgICAgICAgc3gsXG4gICAgICAgICAgc3ksXG4gICAgICAgICAgc3BlZWRcbiAgICAgICAgfSA9IGdldERpbWVuc2lvbnMocHJvcHMudGFyZ2V0LCBlbCk7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IGFuaW1hdGUoZWwsIFt7fSwge1xuICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke3h9cHgsICR7eX1weCkgc2NhbGUoJHtzeH0sICR7c3l9KWAsXG4gICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICB9XSwge1xuICAgICAgICAgIGR1cmF0aW9uOiAxMjUgKiBzcGVlZCxcbiAgICAgICAgICBlYXNpbmc6IGFjY2VsZXJhdGVkRWFzaW5nXG4gICAgICAgIH0pO1xuICAgICAgICBhbmltYXRpb24uZmluaXNoZWQudGhlbigoKSA9PiBkb25lKCkpO1xuICAgICAgICBnZXRDaGlsZHJlbihlbCk/LmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgIGFuaW1hdGUoZWwsIFt7fSwge1xuICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgIG9mZnNldDogMC4yXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgIH1dLCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogMTI1ICogMiAqIHNwZWVkLFxuICAgICAgICAgICAgZWFzaW5nOiBzdGFuZGFyZEVhc2luZ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbkFmdGVyTGVhdmUoZWwpIHtcbiAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3BvaW50ZXItZXZlbnRzJyk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnRhcmdldCA/IF9jcmVhdGVWTm9kZShUcmFuc2l0aW9uLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwibmFtZVwiOiBcImRpYWxvZy10cmFuc2l0aW9uXCJcbiAgICAgIH0sIGZ1bmN0aW9ucywge1xuICAgICAgICBcImNzc1wiOiBmYWxzZVxuICAgICAgfSksIHNsb3RzKSA6IF9jcmVhdGVWTm9kZShUcmFuc2l0aW9uLCB7XG4gICAgICAgIFwibmFtZVwiOiBcImRpYWxvZy10cmFuc2l0aW9uXCJcbiAgICAgIH0sIHNsb3RzKTtcbiAgICB9O1xuICB9XG59KTtcblxuLyoqIEFuaW1hdGFibGUgY2hpbGRyZW4gKGNhcmQsIHNoZWV0LCBsaXN0KSAqL1xuZnVuY3Rpb24gZ2V0Q2hpbGRyZW4oZWwpIHtcbiAgY29uc3QgZWxzID0gZWwucXVlcnlTZWxlY3RvcignOnNjb3BlID4gLnYtY2FyZCwgOnNjb3BlID4gLnYtc2hlZXQsIDpzY29wZSA+IC52LWxpc3QnKT8uY2hpbGRyZW47XG4gIHJldHVybiBlbHMgJiYgWy4uLmVsc107XG59XG5mdW5jdGlvbiBnZXREaW1lbnNpb25zKHRhcmdldCwgZWwpIHtcbiAgY29uc3QgdGFyZ2V0Qm94ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCBlbEJveCA9IG51bGxpZnlUcmFuc2Zvcm1zKGVsKTtcbiAgY29uc3QgW29yaWdpblgsIG9yaWdpblldID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCkudHJhbnNmb3JtT3JpZ2luLnNwbGl0KCcgJykubWFwKHYgPT4gcGFyc2VGbG9hdCh2KSk7XG4gIGNvbnN0IFthbmNob3JTaWRlLCBhbmNob3JPZmZzZXRdID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZSgnLS12LW92ZXJsYXktYW5jaG9yLW9yaWdpbicpLnNwbGl0KCcgJyk7XG4gIGxldCBvZmZzZXRYID0gdGFyZ2V0Qm94LmxlZnQgKyB0YXJnZXRCb3gud2lkdGggLyAyO1xuICBpZiAoYW5jaG9yU2lkZSA9PT0gJ2xlZnQnIHx8IGFuY2hvck9mZnNldCA9PT0gJ2xlZnQnKSB7XG4gICAgb2Zmc2V0WCAtPSB0YXJnZXRCb3gud2lkdGggLyAyO1xuICB9IGVsc2UgaWYgKGFuY2hvclNpZGUgPT09ICdyaWdodCcgfHwgYW5jaG9yT2Zmc2V0ID09PSAncmlnaHQnKSB7XG4gICAgb2Zmc2V0WCArPSB0YXJnZXRCb3gud2lkdGggLyAyO1xuICB9XG4gIGxldCBvZmZzZXRZID0gdGFyZ2V0Qm94LnRvcCArIHRhcmdldEJveC5oZWlnaHQgLyAyO1xuICBpZiAoYW5jaG9yU2lkZSA9PT0gJ3RvcCcgfHwgYW5jaG9yT2Zmc2V0ID09PSAndG9wJykge1xuICAgIG9mZnNldFkgLT0gdGFyZ2V0Qm94LmhlaWdodCAvIDI7XG4gIH0gZWxzZSBpZiAoYW5jaG9yU2lkZSA9PT0gJ2JvdHRvbScgfHwgYW5jaG9yT2Zmc2V0ID09PSAnYm90dG9tJykge1xuICAgIG9mZnNldFkgKz0gdGFyZ2V0Qm94LmhlaWdodCAvIDI7XG4gIH1cbiAgY29uc3QgdHN4ID0gdGFyZ2V0Qm94LndpZHRoIC8gZWxCb3gud2lkdGg7XG4gIGNvbnN0IHRzeSA9IHRhcmdldEJveC5oZWlnaHQgLyBlbEJveC5oZWlnaHQ7XG4gIGNvbnN0IG1heHMgPSBNYXRoLm1heCgxLCB0c3gsIHRzeSk7XG4gIGNvbnN0IHN4ID0gdHN4IC8gbWF4cyB8fCAwO1xuICBjb25zdCBzeSA9IHRzeSAvIG1heHMgfHwgMDtcblxuICAvLyBBbmltYXRlIGVsZW1lbnRzIGxhcmdlciB0aGFuIDEyJSBvZiB0aGUgc2NyZWVuIGFyZWEgdXAgdG8gMS41eCBzbG93ZXJcbiAgY29uc3QgYXNhID0gZWxCb3gud2lkdGggKiBlbEJveC5oZWlnaHQgLyAod2luZG93LmlubmVyV2lkdGggKiB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICBjb25zdCBzcGVlZCA9IGFzYSA+IDAuMTIgPyBNYXRoLm1pbigxLjUsIChhc2EgLSAwLjEyKSAqIDEwICsgMSkgOiAxO1xuICByZXR1cm4ge1xuICAgIHg6IG9mZnNldFggLSAob3JpZ2luWCArIGVsQm94LmxlZnQpLFxuICAgIHk6IG9mZnNldFkgLSAob3JpZ2luWSArIGVsQm94LnRvcCksXG4gICAgc3gsXG4gICAgc3ksXG4gICAgc3BlZWRcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpYWxvZy10cmFuc2l0aW9uLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVDc3NUcmFuc2l0aW9uLCBjcmVhdGVKYXZhc2NyaXB0VHJhbnNpdGlvbiB9IGZyb20gXCIuL2NyZWF0ZVRyYW5zaXRpb24ubWpzXCI7XG5pbXBvcnQgRXhwYW5kVHJhbnNpdGlvbkdlbmVyYXRvciBmcm9tIFwiLi9leHBhbmQtdHJhbnNpdGlvbi5tanNcIjsgLy8gQ29tcG9uZW50IHNwZWNpZmljIHRyYW5zaXRpb25zXG5leHBvcnQgY29uc3QgVkZhYlRyYW5zaXRpb24gPSBjcmVhdGVDc3NUcmFuc2l0aW9uKCdmYWItdHJhbnNpdGlvbicsICdjZW50ZXIgY2VudGVyJywgJ291dC1pbicpO1xuXG4vLyBHZW5lcmljIHRyYW5zaXRpb25zXG5leHBvcnQgY29uc3QgVkRpYWxvZ0JvdHRvbVRyYW5zaXRpb24gPSBjcmVhdGVDc3NUcmFuc2l0aW9uKCdkaWFsb2ctYm90dG9tLXRyYW5zaXRpb24nKTtcbmV4cG9ydCBjb25zdCBWRGlhbG9nVG9wVHJhbnNpdGlvbiA9IGNyZWF0ZUNzc1RyYW5zaXRpb24oJ2RpYWxvZy10b3AtdHJhbnNpdGlvbicpO1xuZXhwb3J0IGNvbnN0IFZGYWRlVHJhbnNpdGlvbiA9IGNyZWF0ZUNzc1RyYW5zaXRpb24oJ2ZhZGUtdHJhbnNpdGlvbicpO1xuZXhwb3J0IGNvbnN0IFZTY2FsZVRyYW5zaXRpb24gPSBjcmVhdGVDc3NUcmFuc2l0aW9uKCdzY2FsZS10cmFuc2l0aW9uJyk7XG5leHBvcnQgY29uc3QgVlNjcm9sbFhUcmFuc2l0aW9uID0gY3JlYXRlQ3NzVHJhbnNpdGlvbignc2Nyb2xsLXgtdHJhbnNpdGlvbicpO1xuZXhwb3J0IGNvbnN0IFZTY3JvbGxYUmV2ZXJzZVRyYW5zaXRpb24gPSBjcmVhdGVDc3NUcmFuc2l0aW9uKCdzY3JvbGwteC1yZXZlcnNlLXRyYW5zaXRpb24nKTtcbmV4cG9ydCBjb25zdCBWU2Nyb2xsWVRyYW5zaXRpb24gPSBjcmVhdGVDc3NUcmFuc2l0aW9uKCdzY3JvbGwteS10cmFuc2l0aW9uJyk7XG5leHBvcnQgY29uc3QgVlNjcm9sbFlSZXZlcnNlVHJhbnNpdGlvbiA9IGNyZWF0ZUNzc1RyYW5zaXRpb24oJ3Njcm9sbC15LXJldmVyc2UtdHJhbnNpdGlvbicpO1xuZXhwb3J0IGNvbnN0IFZTbGlkZVhUcmFuc2l0aW9uID0gY3JlYXRlQ3NzVHJhbnNpdGlvbignc2xpZGUteC10cmFuc2l0aW9uJyk7XG5leHBvcnQgY29uc3QgVlNsaWRlWFJldmVyc2VUcmFuc2l0aW9uID0gY3JlYXRlQ3NzVHJhbnNpdGlvbignc2xpZGUteC1yZXZlcnNlLXRyYW5zaXRpb24nKTtcbmV4cG9ydCBjb25zdCBWU2xpZGVZVHJhbnNpdGlvbiA9IGNyZWF0ZUNzc1RyYW5zaXRpb24oJ3NsaWRlLXktdHJhbnNpdGlvbicpO1xuZXhwb3J0IGNvbnN0IFZTbGlkZVlSZXZlcnNlVHJhbnNpdGlvbiA9IGNyZWF0ZUNzc1RyYW5zaXRpb24oJ3NsaWRlLXktcmV2ZXJzZS10cmFuc2l0aW9uJyk7XG5cbi8vIEphdmFzY3JpcHQgdHJhbnNpdGlvbnNcbmV4cG9ydCBjb25zdCBWRXhwYW5kVHJhbnNpdGlvbiA9IGNyZWF0ZUphdmFzY3JpcHRUcmFuc2l0aW9uKCdleHBhbmQtdHJhbnNpdGlvbicsIEV4cGFuZFRyYW5zaXRpb25HZW5lcmF0b3IoKSk7XG5leHBvcnQgY29uc3QgVkV4cGFuZFhUcmFuc2l0aW9uID0gY3JlYXRlSmF2YXNjcmlwdFRyYW5zaXRpb24oJ2V4cGFuZC14LXRyYW5zaXRpb24nLCBFeHBhbmRUcmFuc2l0aW9uR2VuZXJhdG9yKCcnLCB0cnVlKSk7XG5leHBvcnQgeyBWRGlhbG9nVHJhbnNpdGlvbiB9IGZyb20gXCIuL2RpYWxvZy10cmFuc2l0aW9uLm1qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBwcm92aWRlRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgdG9SZWZzIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWRGVmYXVsdHNQcm92aWRlclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZGVmYXVsdHM6IE9iamVjdCxcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIHJlc2V0OiBbTnVtYmVyLCBTdHJpbmddLFxuICByb290OiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgc2NvcGVkOiBCb29sZWFuXG59LCAnVkRlZmF1bHRzUHJvdmlkZXInKTtcbmV4cG9ydCBjb25zdCBWRGVmYXVsdHNQcm92aWRlciA9IGdlbmVyaWNDb21wb25lbnQoZmFsc2UpKHtcbiAgbmFtZTogJ1ZEZWZhdWx0c1Byb3ZpZGVyJyxcbiAgcHJvcHM6IG1ha2VWRGVmYXVsdHNQcm92aWRlclByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgZGVmYXVsdHMsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIHJlc2V0LFxuICAgICAgcm9vdCxcbiAgICAgIHNjb3BlZFxuICAgIH0gPSB0b1JlZnMocHJvcHMpO1xuICAgIHByb3ZpZGVEZWZhdWx0cyhkZWZhdWx0cywge1xuICAgICAgcmVzZXQsXG4gICAgICByb290LFxuICAgICAgc2NvcGVkLFxuICAgICAgZGlzYWJsZWRcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4gc2xvdHMuZGVmYXVsdD8uKCk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkRlZmF1bHRzUHJvdmlkZXIubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VEaW1lbnNpb25Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGhlaWdodDogW051bWJlciwgU3RyaW5nXSxcbiAgbWF4SGVpZ2h0OiBbTnVtYmVyLCBTdHJpbmddLFxuICBtYXhXaWR0aDogW051bWJlciwgU3RyaW5nXSxcbiAgbWluSGVpZ2h0OiBbTnVtYmVyLCBTdHJpbmddLFxuICBtaW5XaWR0aDogW051bWJlciwgU3RyaW5nXSxcbiAgd2lkdGg6IFtOdW1iZXIsIFN0cmluZ11cbn0sICdkaW1lbnNpb24nKTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VEaW1lbnNpb24ocHJvcHMpIHtcbiAgY29uc3QgZGltZW5zaW9uU3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICBoZWlnaHQ6IGNvbnZlcnRUb1VuaXQocHJvcHMuaGVpZ2h0KSxcbiAgICBtYXhIZWlnaHQ6IGNvbnZlcnRUb1VuaXQocHJvcHMubWF4SGVpZ2h0KSxcbiAgICBtYXhXaWR0aDogY29udmVydFRvVW5pdChwcm9wcy5tYXhXaWR0aCksXG4gICAgbWluSGVpZ2h0OiBjb252ZXJ0VG9Vbml0KHByb3BzLm1pbkhlaWdodCksXG4gICAgbWluV2lkdGg6IGNvbnZlcnRUb1VuaXQocHJvcHMubWluV2lkdGgpLFxuICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KHByb3BzLndpZHRoKVxuICB9KSk7XG4gIHJldHVybiB7XG4gICAgZGltZW5zaW9uU3R5bGVzXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaW1lbnNpb25zLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlJlc3BvbnNpdmUuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURpbWVuc2lvblByb3BzLCB1c2VEaW1lbnNpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGltZW5zaW9ucy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFzcGVjdFN0eWxlcyhwcm9wcykge1xuICByZXR1cm4ge1xuICAgIGFzcGVjdFN0eWxlczogY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgcmF0aW8gPSBOdW1iZXIocHJvcHMuYXNwZWN0UmF0aW8pO1xuICAgICAgcmV0dXJuIHJhdGlvID8ge1xuICAgICAgICBwYWRkaW5nQm90dG9tOiBTdHJpbmcoMSAvIHJhdGlvICogMTAwKSArICclJ1xuICAgICAgfSA6IHVuZGVmaW5lZDtcbiAgICB9KVxuICB9O1xufVxuZXhwb3J0IGNvbnN0IG1ha2VWUmVzcG9uc2l2ZVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYXNwZWN0UmF0aW86IFtTdHJpbmcsIE51bWJlcl0sXG4gIGNvbnRlbnRDbGFzczogU3RyaW5nLFxuICBpbmxpbmU6IEJvb2xlYW4sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGltZW5zaW9uUHJvcHMoKVxufSwgJ1ZSZXNwb25zaXZlJyk7XG5leHBvcnQgY29uc3QgVlJlc3BvbnNpdmUgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlJlc3BvbnNpdmUnLFxuICBwcm9wczogbWFrZVZSZXNwb25zaXZlUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBhc3BlY3RTdHlsZXNcbiAgICB9ID0gdXNlQXNwZWN0U3R5bGVzKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBkaW1lbnNpb25TdHlsZXNcbiAgICB9ID0gdXNlRGltZW5zaW9uKHByb3BzKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LXJlc3BvbnNpdmUnLCB7XG4gICAgICAgICd2LXJlc3BvbnNpdmUtLWlubGluZSc6IHByb3BzLmlubGluZVxuICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBbZGltZW5zaW9uU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV1cbiAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJ2LXJlc3BvbnNpdmVfX3NpemVyXCIsXG4gICAgICBcInN0eWxlXCI6IGFzcGVjdFN0eWxlcy52YWx1ZVxuICAgIH0sIG51bGwpLCBzbG90cy5hZGRpdGlvbmFsPy4oKSwgc2xvdHMuZGVmYXVsdCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtcmVzcG9uc2l2ZV9fY29udGVudCcsIHByb3BzLmNvbnRlbnRDbGFzc11cbiAgICB9LCBbc2xvdHMuZGVmYXVsdCgpXSldKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZSZXNwb25zaXZlLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGgsIG1lcmdlUHJvcHMsIFRyYW5zaXRpb24gfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVRyYW5zaXRpb25Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHRyYW5zaXRpb246IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nLCBPYmplY3RdLFxuICAgIGRlZmF1bHQ6ICdmYWRlLXRyYW5zaXRpb24nLFxuICAgIHZhbGlkYXRvcjogdmFsID0+IHZhbCAhPT0gdHJ1ZVxuICB9XG59LCAndHJhbnNpdGlvbicpO1xuZXhwb3J0IGNvbnN0IE1heWJlVHJhbnNpdGlvbiA9IChwcm9wcywgX3JlZikgPT4ge1xuICBsZXQge1xuICAgIHNsb3RzXG4gIH0gPSBfcmVmO1xuICBjb25zdCB7XG4gICAgdHJhbnNpdGlvbixcbiAgICBkaXNhYmxlZCxcbiAgICAuLi5yZXN0XG4gIH0gPSBwcm9wcztcbiAgY29uc3Qge1xuICAgIGNvbXBvbmVudCA9IFRyYW5zaXRpb24sXG4gICAgLi4uY3VzdG9tUHJvcHNcbiAgfSA9IHR5cGVvZiB0cmFuc2l0aW9uID09PSAnb2JqZWN0JyA/IHRyYW5zaXRpb24gOiB7fTtcbiAgcmV0dXJuIGgoY29tcG9uZW50LCBtZXJnZVByb3BzKHR5cGVvZiB0cmFuc2l0aW9uID09PSAnc3RyaW5nJyA/IHtcbiAgICBuYW1lOiBkaXNhYmxlZCA/ICcnIDogdHJhbnNpdGlvblxuICB9IDogY3VzdG9tUHJvcHMsIHJlc3QsIHtcbiAgICBkaXNhYmxlZFxuICB9KSwgc2xvdHMpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zaXRpb24ubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgU1VQUE9SVFNfSU5URVJTRUNUSU9OIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5mdW5jdGlvbiBtb3VudGVkKGVsLCBiaW5kaW5nKSB7XG4gIGlmICghU1VQUE9SVFNfSU5URVJTRUNUSU9OKSByZXR1cm47XG4gIGNvbnN0IG1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzIHx8IHt9O1xuICBjb25zdCB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIGNvbnN0IHtcbiAgICBoYW5kbGVyLFxuICAgIG9wdGlvbnNcbiAgfSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyB2YWx1ZSA6IHtcbiAgICBoYW5kbGVyOiB2YWx1ZSxcbiAgICBvcHRpb25zOiB7fVxuICB9O1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGVudHJpZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICAgIGxldCBvYnNlcnZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IF9vYnNlcnZlID0gZWwuX29ic2VydmU/LltiaW5kaW5nLmluc3RhbmNlLiQudWlkXTtcbiAgICBpZiAoIV9vYnNlcnZlKSByZXR1cm47IC8vIEp1c3QgaW4gY2FzZSwgc2hvdWxkIG5ldmVyIGZpcmVcblxuICAgIGNvbnN0IGlzSW50ZXJzZWN0aW5nID0gZW50cmllcy5zb21lKGVudHJ5ID0+IGVudHJ5LmlzSW50ZXJzZWN0aW5nKTtcblxuICAgIC8vIElmIGlzIG5vdCBxdWlldCBvciBoYXMgYWxyZWFkeSBiZWVuXG4gICAgLy8gaW5pdHRlZCwgaW52b2tlIHRoZSB1c2VyIGNhbGxiYWNrXG4gICAgaWYgKGhhbmRsZXIgJiYgKCFtb2RpZmllcnMucXVpZXQgfHwgX29ic2VydmUuaW5pdCkgJiYgKCFtb2RpZmllcnMub25jZSB8fCBpc0ludGVyc2VjdGluZyB8fCBfb2JzZXJ2ZS5pbml0KSkge1xuICAgICAgaGFuZGxlcihpc0ludGVyc2VjdGluZywgZW50cmllcywgb2JzZXJ2ZXIpO1xuICAgIH1cbiAgICBpZiAoaXNJbnRlcnNlY3RpbmcgJiYgbW9kaWZpZXJzLm9uY2UpIHVubW91bnRlZChlbCwgYmluZGluZyk7ZWxzZSBfb2JzZXJ2ZS5pbml0ID0gdHJ1ZTtcbiAgfSwgb3B0aW9ucyk7XG4gIGVsLl9vYnNlcnZlID0gT2JqZWN0KGVsLl9vYnNlcnZlKTtcbiAgZWwuX29ic2VydmVbYmluZGluZy5pbnN0YW5jZS4kLnVpZF0gPSB7XG4gICAgaW5pdDogZmFsc2UsXG4gICAgb2JzZXJ2ZXJcbiAgfTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShlbCk7XG59XG5mdW5jdGlvbiB1bm1vdW50ZWQoZWwsIGJpbmRpbmcpIHtcbiAgY29uc3Qgb2JzZXJ2ZSA9IGVsLl9vYnNlcnZlPy5bYmluZGluZy5pbnN0YW5jZS4kLnVpZF07XG4gIGlmICghb2JzZXJ2ZSkgcmV0dXJuO1xuICBvYnNlcnZlLm9ic2VydmVyLnVub2JzZXJ2ZShlbCk7XG4gIGRlbGV0ZSBlbC5fb2JzZXJ2ZVtiaW5kaW5nLmluc3RhbmNlLiQudWlkXTtcbn1cbmV4cG9ydCBjb25zdCBJbnRlcnNlY3QgPSB7XG4gIG1vdW50ZWQsXG4gIHVubW91bnRlZFxufTtcbmV4cG9ydCBkZWZhdWx0IEludGVyc2VjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCJpbXBvcnQgeyB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZJbWcuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IG1ha2VWUmVzcG9uc2l2ZVByb3BzLCBWUmVzcG9uc2l2ZSB9IGZyb20gXCIuLi9WUmVzcG9uc2l2ZS9WUmVzcG9uc2l2ZS5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVHJhbnNpdGlvblByb3BzLCBNYXliZVRyYW5zaXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdHJhbnNpdGlvbi5tanNcIjsgLy8gRGlyZWN0aXZlc1xuaW1wb3J0IGludGVyc2VjdCBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9pbnRlcnNlY3QvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG5leHRUaWNrLCBvbkJlZm9yZU1vdW50LCByZWYsIHNoYWxsb3dSZWYsIHZTaG93LCB3YXRjaCwgd2l0aERpcmVjdGl2ZXMgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCBTVVBQT1JUU19JTlRFUlNFQ1RJT04sIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWSW1nUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhbHQ6IFN0cmluZyxcbiAgY292ZXI6IEJvb2xlYW4sXG4gIGVhZ2VyOiBCb29sZWFuLFxuICBncmFkaWVudDogU3RyaW5nLFxuICBsYXp5U3JjOiBTdHJpbmcsXG4gIG9wdGlvbnM6IHtcbiAgICB0eXBlOiBPYmplY3QsXG4gICAgLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdHlwZXMsIG5hdmlnYXRlIHRvOlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JbnRlcnNlY3Rpb25fT2JzZXJ2ZXJfQVBJXG4gICAgZGVmYXVsdDogKCkgPT4gKHtcbiAgICAgIHJvb3Q6IHVuZGVmaW5lZCxcbiAgICAgIHJvb3RNYXJnaW46IHVuZGVmaW5lZCxcbiAgICAgIHRocmVzaG9sZDogdW5kZWZpbmVkXG4gICAgfSlcbiAgfSxcbiAgc2l6ZXM6IFN0cmluZyxcbiAgc3JjOiB7XG4gICAgdHlwZTogW1N0cmluZywgT2JqZWN0XSxcbiAgICBkZWZhdWx0OiAnJ1xuICB9LFxuICBzcmNzZXQ6IFN0cmluZyxcbiAgLi4ubWFrZVZSZXNwb25zaXZlUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VUcmFuc2l0aW9uUHJvcHMoKVxufSwgJ1ZJbWcnKTtcbmV4cG9ydCBjb25zdCBWSW1nID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZJbWcnLFxuICBkaXJlY3RpdmVzOiB7XG4gICAgaW50ZXJzZWN0XG4gIH0sXG4gIHByb3BzOiBtYWtlVkltZ1Byb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgbG9hZHN0YXJ0OiB2YWx1ZSA9PiB0cnVlLFxuICAgIGxvYWQ6IHZhbHVlID0+IHRydWUsXG4gICAgZXJyb3I6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgZW1pdCxcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgY3VycmVudFNyYyA9IHNoYWxsb3dSZWYoJycpOyAvLyBTZXQgZnJvbSBzcmNzZXRcbiAgICBjb25zdCBpbWFnZSA9IHJlZigpO1xuICAgIGNvbnN0IHN0YXRlID0gc2hhbGxvd1JlZihwcm9wcy5lYWdlciA/ICdsb2FkaW5nJyA6ICdpZGxlJyk7XG4gICAgY29uc3QgbmF0dXJhbFdpZHRoID0gc2hhbGxvd1JlZigpO1xuICAgIGNvbnN0IG5hdHVyYWxIZWlnaHQgPSBzaGFsbG93UmVmKCk7XG4gICAgY29uc3Qgbm9ybWFsaXNlZFNyYyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5zcmMgJiYgdHlwZW9mIHByb3BzLnNyYyA9PT0gJ29iamVjdCcgPyB7XG4gICAgICAgIHNyYzogcHJvcHMuc3JjLnNyYyxcbiAgICAgICAgc3Jjc2V0OiBwcm9wcy5zcmNzZXQgfHwgcHJvcHMuc3JjLnNyY3NldCxcbiAgICAgICAgbGF6eVNyYzogcHJvcHMubGF6eVNyYyB8fCBwcm9wcy5zcmMubGF6eVNyYyxcbiAgICAgICAgYXNwZWN0OiBOdW1iZXIocHJvcHMuYXNwZWN0UmF0aW8gfHwgcHJvcHMuc3JjLmFzcGVjdCB8fCAwKVxuICAgICAgfSA6IHtcbiAgICAgICAgc3JjOiBwcm9wcy5zcmMsXG4gICAgICAgIHNyY3NldDogcHJvcHMuc3Jjc2V0LFxuICAgICAgICBsYXp5U3JjOiBwcm9wcy5sYXp5U3JjLFxuICAgICAgICBhc3BlY3Q6IE51bWJlcihwcm9wcy5hc3BlY3RSYXRpbyB8fCAwKVxuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBhc3BlY3RSYXRpbyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBub3JtYWxpc2VkU3JjLnZhbHVlLmFzcGVjdCB8fCBuYXR1cmFsV2lkdGgudmFsdWUgLyBuYXR1cmFsSGVpZ2h0LnZhbHVlIHx8IDA7XG4gICAgfSk7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuc3JjLCAoKSA9PiB7XG4gICAgICBpbml0KHN0YXRlLnZhbHVlICE9PSAnaWRsZScpO1xuICAgIH0pO1xuICAgIHdhdGNoKGFzcGVjdFJhdGlvLCAodmFsLCBvbGRWYWwpID0+IHtcbiAgICAgIGlmICghdmFsICYmIG9sZFZhbCAmJiBpbWFnZS52YWx1ZSkge1xuICAgICAgICBwb2xsRm9yU2l6ZShpbWFnZS52YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBUT0RPOiBnZXRTcmMgd2hlbiB3aW5kb3cgd2lkdGggY2hhbmdlc1xuXG4gICAgb25CZWZvcmVNb3VudCgoKSA9PiBpbml0KCkpO1xuICAgIGZ1bmN0aW9uIGluaXQoaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgIGlmIChwcm9wcy5lYWdlciAmJiBpc0ludGVyc2VjdGluZykgcmV0dXJuO1xuICAgICAgaWYgKFNVUFBPUlRTX0lOVEVSU0VDVElPTiAmJiAhaXNJbnRlcnNlY3RpbmcgJiYgIXByb3BzLmVhZ2VyKSByZXR1cm47XG4gICAgICBzdGF0ZS52YWx1ZSA9ICdsb2FkaW5nJztcbiAgICAgIGlmIChub3JtYWxpc2VkU3JjLnZhbHVlLmxhenlTcmMpIHtcbiAgICAgICAgY29uc3QgbGF6eUltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBsYXp5SW1nLnNyYyA9IG5vcm1hbGlzZWRTcmMudmFsdWUubGF6eVNyYztcbiAgICAgICAgcG9sbEZvclNpemUobGF6eUltZywgbnVsbCk7XG4gICAgICB9XG4gICAgICBpZiAoIW5vcm1hbGlzZWRTcmMudmFsdWUuc3JjKSByZXR1cm47XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGVtaXQoJ2xvYWRzdGFydCcsIGltYWdlLnZhbHVlPy5jdXJyZW50U3JjIHx8IG5vcm1hbGlzZWRTcmMudmFsdWUuc3JjKTtcbiAgICAgICAgaWYgKGltYWdlLnZhbHVlPy5jb21wbGV0ZSkge1xuICAgICAgICAgIGlmICghaW1hZ2UudmFsdWUubmF0dXJhbFdpZHRoKSB7XG4gICAgICAgICAgICBvbkVycm9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGF0ZS52YWx1ZSA9PT0gJ2Vycm9yJykgcmV0dXJuO1xuICAgICAgICAgIGlmICghYXNwZWN0UmF0aW8udmFsdWUpIHBvbGxGb3JTaXplKGltYWdlLnZhbHVlLCBudWxsKTtcbiAgICAgICAgICBvbkxvYWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWFzcGVjdFJhdGlvLnZhbHVlKSBwb2xsRm9yU2l6ZShpbWFnZS52YWx1ZSk7XG4gICAgICAgICAgZ2V0U3JjKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkxvYWQoKSB7XG4gICAgICBnZXRTcmMoKTtcbiAgICAgIHN0YXRlLnZhbHVlID0gJ2xvYWRlZCc7XG4gICAgICBlbWl0KCdsb2FkJywgaW1hZ2UudmFsdWU/LmN1cnJlbnRTcmMgfHwgbm9ybWFsaXNlZFNyYy52YWx1ZS5zcmMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkVycm9yKCkge1xuICAgICAgc3RhdGUudmFsdWUgPSAnZXJyb3InO1xuICAgICAgZW1pdCgnZXJyb3InLCBpbWFnZS52YWx1ZT8uY3VycmVudFNyYyB8fCBub3JtYWxpc2VkU3JjLnZhbHVlLnNyYyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFNyYygpIHtcbiAgICAgIGNvbnN0IGltZyA9IGltYWdlLnZhbHVlO1xuICAgICAgaWYgKGltZykgY3VycmVudFNyYy52YWx1ZSA9IGltZy5jdXJyZW50U3JjIHx8IGltZy5zcmM7XG4gICAgfVxuICAgIGxldCB0aW1lciA9IC0xO1xuICAgIGZ1bmN0aW9uIHBvbGxGb3JTaXplKGltZykge1xuICAgICAgbGV0IHRpbWVvdXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDEwMDtcbiAgICAgIGNvbnN0IHBvbGwgPSAoKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBuYXR1cmFsSGVpZ2h0OiBpbWdIZWlnaHQsXG4gICAgICAgICAgbmF0dXJhbFdpZHRoOiBpbWdXaWR0aFxuICAgICAgICB9ID0gaW1nO1xuICAgICAgICBpZiAoaW1nSGVpZ2h0IHx8IGltZ1dpZHRoKSB7XG4gICAgICAgICAgbmF0dXJhbFdpZHRoLnZhbHVlID0gaW1nV2lkdGg7XG4gICAgICAgICAgbmF0dXJhbEhlaWdodC52YWx1ZSA9IGltZ0hlaWdodDtcbiAgICAgICAgfSBlbHNlIGlmICghaW1nLmNvbXBsZXRlICYmIHN0YXRlLnZhbHVlID09PSAnbG9hZGluZycgJiYgdGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgICAgdGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChwb2xsLCB0aW1lb3V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChpbWcuY3VycmVudFNyYy5lbmRzV2l0aCgnLnN2ZycpIHx8IGltZy5jdXJyZW50U3JjLnN0YXJ0c1dpdGgoJ2RhdGE6aW1hZ2Uvc3ZnK3htbCcpKSB7XG4gICAgICAgICAgbmF0dXJhbFdpZHRoLnZhbHVlID0gMTtcbiAgICAgICAgICBuYXR1cmFsSGVpZ2h0LnZhbHVlID0gMTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHBvbGwoKTtcbiAgICB9XG4gICAgY29uc3QgY29udGFpbkNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgJ3YtaW1nX19pbWctLWNvdmVyJzogcHJvcHMuY292ZXIsXG4gICAgICAndi1pbWdfX2ltZy0tY29udGFpbic6ICFwcm9wcy5jb3ZlclxuICAgIH0pKTtcbiAgICBjb25zdCBfX2ltYWdlID0gKCkgPT4ge1xuICAgICAgaWYgKCFub3JtYWxpc2VkU3JjLnZhbHVlLnNyYyB8fCBzdGF0ZS52YWx1ZSA9PT0gJ2lkbGUnKSByZXR1cm4gbnVsbDtcbiAgICAgIGNvbnN0IGltZyA9IF9jcmVhdGVWTm9kZShcImltZ1wiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWltZ19faW1nJywgY29udGFpbkNsYXNzZXMudmFsdWVdLFxuICAgICAgICBcInNyY1wiOiBub3JtYWxpc2VkU3JjLnZhbHVlLnNyYyxcbiAgICAgICAgXCJzcmNzZXRcIjogbm9ybWFsaXNlZFNyYy52YWx1ZS5zcmNzZXQsXG4gICAgICAgIFwiYWx0XCI6IHByb3BzLmFsdCxcbiAgICAgICAgXCJzaXplc1wiOiBwcm9wcy5zaXplcyxcbiAgICAgICAgXCJyZWZcIjogaW1hZ2UsXG4gICAgICAgIFwib25Mb2FkXCI6IG9uTG9hZCxcbiAgICAgICAgXCJvbkVycm9yXCI6IG9uRXJyb3JcbiAgICAgIH0sIG51bGwpO1xuICAgICAgY29uc3Qgc291cmNlcyA9IHNsb3RzLnNvdXJjZXM/LigpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShNYXliZVRyYW5zaXRpb24sIHtcbiAgICAgICAgXCJ0cmFuc2l0aW9uXCI6IHByb3BzLnRyYW5zaXRpb24sXG4gICAgICAgIFwiYXBwZWFyXCI6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW3dpdGhEaXJlY3RpdmVzKHNvdXJjZXMgPyBfY3JlYXRlVk5vZGUoXCJwaWN0dXJlXCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1pbWdfX3BpY3R1cmVcIlxuICAgICAgICB9LCBbc291cmNlcywgaW1nXSkgOiBpbWcsIFtbdlNob3csIHN0YXRlLnZhbHVlID09PSAnbG9hZGVkJ11dKV1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgX19wcmVsb2FkSW1hZ2UgPSAoKSA9PiBfY3JlYXRlVk5vZGUoTWF5YmVUcmFuc2l0aW9uLCB7XG4gICAgICBcInRyYW5zaXRpb25cIjogcHJvcHMudHJhbnNpdGlvblxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtub3JtYWxpc2VkU3JjLnZhbHVlLmxhenlTcmMgJiYgc3RhdGUudmFsdWUgIT09ICdsb2FkZWQnICYmIF9jcmVhdGVWTm9kZShcImltZ1wiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWltZ19faW1nJywgJ3YtaW1nX19pbWctLXByZWxvYWQnLCBjb250YWluQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgIFwic3JjXCI6IG5vcm1hbGlzZWRTcmMudmFsdWUubGF6eVNyYyxcbiAgICAgICAgXCJhbHRcIjogcHJvcHMuYWx0XG4gICAgICB9LCBudWxsKV1cbiAgICB9KTtcbiAgICBjb25zdCBfX3BsYWNlaG9sZGVyID0gKCkgPT4ge1xuICAgICAgaWYgKCFzbG90cy5wbGFjZWhvbGRlcikgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKE1heWJlVHJhbnNpdGlvbiwge1xuICAgICAgICBcInRyYW5zaXRpb25cIjogcHJvcHMudHJhbnNpdGlvbixcbiAgICAgICAgXCJhcHBlYXJcIjogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbKHN0YXRlLnZhbHVlID09PSAnbG9hZGluZycgfHwgc3RhdGUudmFsdWUgPT09ICdlcnJvcicgJiYgIXNsb3RzLmVycm9yKSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWltZ19fcGxhY2Vob2xkZXJcIlxuICAgICAgICB9LCBbc2xvdHMucGxhY2Vob2xkZXIoKV0pXVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBfX2Vycm9yID0gKCkgPT4ge1xuICAgICAgaWYgKCFzbG90cy5lcnJvcikgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKE1heWJlVHJhbnNpdGlvbiwge1xuICAgICAgICBcInRyYW5zaXRpb25cIjogcHJvcHMudHJhbnNpdGlvbixcbiAgICAgICAgXCJhcHBlYXJcIjogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc3RhdGUudmFsdWUgPT09ICdlcnJvcicgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1pbWdfX2Vycm9yXCJcbiAgICAgICAgfSwgW3Nsb3RzLmVycm9yKCldKV1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgX19ncmFkaWVudCA9ICgpID0+IHtcbiAgICAgIGlmICghcHJvcHMuZ3JhZGllbnQpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWltZ19fZ3JhZGllbnRcIixcbiAgICAgICAgXCJzdHlsZVwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgbGluZWFyLWdyYWRpZW50KCR7cHJvcHMuZ3JhZGllbnR9KWBcbiAgICAgICAgfVxuICAgICAgfSwgbnVsbCk7XG4gICAgfTtcbiAgICBjb25zdCBpc0Jvb3RlZCA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIHtcbiAgICAgIGNvbnN0IHN0b3AgPSB3YXRjaChhc3BlY3RSYXRpbywgdmFsID0+IHtcbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgIC8vIERvZXNuJ3Qgd29yayB3aXRoIG5leHRUaWNrLCBpZGsgd2h5XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICAgIGlzQm9vdGVkLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBbcmVzcG9uc2l2ZVByb3BzXSA9IFZSZXNwb25zaXZlLmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIHJldHVybiBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFZSZXNwb25zaXZlLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWltZycsIHtcbiAgICAgICAgICAndi1pbWctLWJvb3RpbmcnOiAhaXNCb290ZWQudmFsdWVcbiAgICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFt7XG4gICAgICAgICAgd2lkdGg6IGNvbnZlcnRUb1VuaXQocHJvcHMud2lkdGggPT09ICdhdXRvJyA/IG5hdHVyYWxXaWR0aC52YWx1ZSA6IHByb3BzLndpZHRoKVxuICAgICAgICB9LCBwcm9wcy5zdHlsZV1cbiAgICAgIH0sIHJlc3BvbnNpdmVQcm9wcywge1xuICAgICAgICBcImFzcGVjdFJhdGlvXCI6IGFzcGVjdFJhdGlvLnZhbHVlLFxuICAgICAgICBcImFyaWEtbGFiZWxcIjogcHJvcHMuYWx0LFxuICAgICAgICBcInJvbGVcIjogcHJvcHMuYWx0ID8gJ2ltZycgOiB1bmRlZmluZWRcbiAgICAgIH0pLCB7XG4gICAgICAgIGFkZGl0aW9uYWw6ICgpID0+IF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtfY3JlYXRlVk5vZGUoX19pbWFnZSwgbnVsbCwgbnVsbCksIF9jcmVhdGVWTm9kZShfX3ByZWxvYWRJbWFnZSwgbnVsbCwgbnVsbCksIF9jcmVhdGVWTm9kZShfX2dyYWRpZW50LCBudWxsLCBudWxsKSwgX2NyZWF0ZVZOb2RlKF9fcGxhY2Vob2xkZXIsIG51bGwsIG51bGwpLCBfY3JlYXRlVk5vZGUoX19lcnJvciwgbnVsbCwgbnVsbCldKSxcbiAgICAgICAgZGVmYXVsdDogc2xvdHMuZGVmYXVsdFxuICAgICAgfSksIFtbX3Jlc29sdmVEaXJlY3RpdmUoXCJpbnRlcnNlY3RcIiksIHtcbiAgICAgICAgaGFuZGxlcjogaW5pdCxcbiAgICAgICAgb3B0aW9uczogcHJvcHMub3B0aW9uc1xuICAgICAgfSwgbnVsbCwge1xuICAgICAgICBvbmNlOiB0cnVlXG4gICAgICB9XV0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBjdXJyZW50U3JjLFxuICAgICAgaW1hZ2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIG5hdHVyYWxXaWR0aCxcbiAgICAgIG5hdHVyYWxIZWlnaHRcbiAgICB9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZJbWcubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGlzUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZU5hbWUsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuLy8gQ29tcG9zYWJsZXNcbmV4cG9ydCBjb25zdCBtYWtlQm9yZGVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBib3JkZXI6IFtCb29sZWFuLCBOdW1iZXIsIFN0cmluZ11cbn0sICdib3JkZXInKTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VCb3JkZXIocHJvcHMpIHtcbiAgbGV0IG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGdldEN1cnJlbnRJbnN0YW5jZU5hbWUoKTtcbiAgY29uc3QgYm9yZGVyQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBib3JkZXIgPSBpc1JlZihwcm9wcykgPyBwcm9wcy52YWx1ZSA6IHByb3BzLmJvcmRlcjtcbiAgICBjb25zdCBjbGFzc2VzID0gW107XG4gICAgaWYgKGJvcmRlciA9PT0gdHJ1ZSB8fCBib3JkZXIgPT09ICcnKSB7XG4gICAgICBjbGFzc2VzLnB1c2goYCR7bmFtZX0tLWJvcmRlcmApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvcmRlciA9PT0gJ3N0cmluZycgfHwgYm9yZGVyID09PSAwKSB7XG4gICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIFN0cmluZyhib3JkZXIpLnNwbGl0KCcgJykpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKGBib3JkZXItJHt2YWx1ZX1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGJvcmRlckNsYXNzZXNcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvcmRlci5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaXNSZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZGVzdHJ1Y3RDb21wdXRlZCwgZ2V0Rm9yZWdyb3VuZCwgaXNDc3NDb2xvciwgcGFyc2VDb2xvciB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuLy8gQ29tcG9zYWJsZXNcbmV4cG9ydCBmdW5jdGlvbiB1c2VDb2xvcihjb2xvcnMpIHtcbiAgcmV0dXJuIGRlc3RydWN0Q29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBbXTtcbiAgICBjb25zdCBzdHlsZXMgPSB7fTtcbiAgICBpZiAoY29sb3JzLnZhbHVlLmJhY2tncm91bmQpIHtcbiAgICAgIGlmIChpc0Nzc0NvbG9yKGNvbG9ycy52YWx1ZS5iYWNrZ3JvdW5kKSkge1xuICAgICAgICBzdHlsZXMuYmFja2dyb3VuZENvbG9yID0gY29sb3JzLnZhbHVlLmJhY2tncm91bmQ7XG4gICAgICAgIGlmICghY29sb3JzLnZhbHVlLnRleHQpIHtcbiAgICAgICAgICBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBwYXJzZUNvbG9yKGNvbG9ycy52YWx1ZS5iYWNrZ3JvdW5kKTtcbiAgICAgICAgICBpZiAoYmFja2dyb3VuZENvbG9yLmEgPT0gbnVsbCB8fCBiYWNrZ3JvdW5kQ29sb3IuYSA9PT0gMSkge1xuICAgICAgICAgICAgY29uc3QgdGV4dENvbG9yID0gZ2V0Rm9yZWdyb3VuZChiYWNrZ3JvdW5kQ29sb3IpO1xuICAgICAgICAgICAgc3R5bGVzLmNvbG9yID0gdGV4dENvbG9yO1xuICAgICAgICAgICAgc3R5bGVzLmNhcmV0Q29sb3IgPSB0ZXh0Q29sb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGFzc2VzLnB1c2goYGJnLSR7Y29sb3JzLnZhbHVlLmJhY2tncm91bmR9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjb2xvcnMudmFsdWUudGV4dCkge1xuICAgICAgaWYgKGlzQ3NzQ29sb3IoY29sb3JzLnZhbHVlLnRleHQpKSB7XG4gICAgICAgIHN0eWxlcy5jb2xvciA9IGNvbG9ycy52YWx1ZS50ZXh0O1xuICAgICAgICBzdHlsZXMuY2FyZXRDb2xvciA9IGNvbG9ycy52YWx1ZS50ZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKGB0ZXh0LSR7Y29sb3JzLnZhbHVlLnRleHR9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjb2xvckNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICBjb2xvclN0eWxlczogc3R5bGVzXG4gICAgfTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlVGV4dENvbG9yKHByb3BzLCBuYW1lKSB7XG4gIGNvbnN0IGNvbG9ycyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgdGV4dDogaXNSZWYocHJvcHMpID8gcHJvcHMudmFsdWUgOiBuYW1lID8gcHJvcHNbbmFtZV0gOiBudWxsXG4gIH0pKTtcbiAgY29uc3Qge1xuICAgIGNvbG9yQ2xhc3NlczogdGV4dENvbG9yQ2xhc3NlcyxcbiAgICBjb2xvclN0eWxlczogdGV4dENvbG9yU3R5bGVzXG4gIH0gPSB1c2VDb2xvcihjb2xvcnMpO1xuICByZXR1cm4ge1xuICAgIHRleHRDb2xvckNsYXNzZXMsXG4gICAgdGV4dENvbG9yU3R5bGVzXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlQmFja2dyb3VuZENvbG9yKHByb3BzLCBuYW1lKSB7XG4gIGNvbnN0IGNvbG9ycyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgYmFja2dyb3VuZDogaXNSZWYocHJvcHMpID8gcHJvcHMudmFsdWUgOiBuYW1lID8gcHJvcHNbbmFtZV0gOiBudWxsXG4gIH0pKTtcbiAgY29uc3Qge1xuICAgIGNvbG9yQ2xhc3NlczogYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICBjb2xvclN0eWxlczogYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gIH0gPSB1c2VDb2xvcihjb2xvcnMpO1xuICByZXR1cm4ge1xuICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvci5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaXNSZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VFbGV2YXRpb25Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGVsZXZhdGlvbjoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgdmFsaWRhdG9yKHYpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VJbnQodik7XG4gICAgICByZXR1cm4gIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSA+PSAwICYmXG4gICAgICAvLyBNYXRlcmlhbCBEZXNpZ24gaGFzIGEgbWF4aW11bSBlbGV2YXRpb24gb2YgMjRcbiAgICAgIC8vIGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL2Vudmlyb25tZW50L2VsZXZhdGlvbi5odG1sI2RlZmF1bHQtZWxldmF0aW9uc1xuICAgICAgdmFsdWUgPD0gMjQ7XG4gICAgfVxuICB9XG59LCAnZWxldmF0aW9uJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlRWxldmF0aW9uKHByb3BzKSB7XG4gIGNvbnN0IGVsZXZhdGlvbkNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgZWxldmF0aW9uID0gaXNSZWYocHJvcHMpID8gcHJvcHMudmFsdWUgOiBwcm9wcy5lbGV2YXRpb247XG4gICAgY29uc3QgY2xhc3NlcyA9IFtdO1xuICAgIGlmIChlbGV2YXRpb24gPT0gbnVsbCkgcmV0dXJuIGNsYXNzZXM7XG4gICAgY2xhc3Nlcy5wdXNoKGBlbGV2YXRpb24tJHtlbGV2YXRpb259YCk7XG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGVsZXZhdGlvbkNsYXNzZXNcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVsZXZhdGlvbi5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaXNSZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlTmFtZSwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VSb3VuZGVkUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICByb3VuZGVkOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIE51bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgfVxufSwgJ3JvdW5kZWQnKTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3VuZGVkKHByb3BzKSB7XG4gIGxldCBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBnZXRDdXJyZW50SW5zdGFuY2VOYW1lKCk7XG4gIGNvbnN0IHJvdW5kZWRDbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IHJvdW5kZWQgPSBpc1JlZihwcm9wcykgPyBwcm9wcy52YWx1ZSA6IHByb3BzLnJvdW5kZWQ7XG4gICAgY29uc3QgY2xhc3NlcyA9IFtdO1xuICAgIGlmIChyb3VuZGVkID09PSB0cnVlIHx8IHJvdW5kZWQgPT09ICcnKSB7XG4gICAgICBjbGFzc2VzLnB1c2goYCR7bmFtZX0tLXJvdW5kZWRgKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiByb3VuZGVkID09PSAnc3RyaW5nJyB8fCByb3VuZGVkID09PSAwKSB7XG4gICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIFN0cmluZyhyb3VuZGVkKS5zcGxpdCgnICcpKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChgcm91bmRlZC0ke3ZhbHVlfWApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgcm91bmRlZENsYXNzZXNcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdW5kZWQubWpzLm1hcCIsImltcG9ydCB7IHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WVG9vbGJhci5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlRvb2xiYXJUaXRsZSB9IGZyb20gXCIuL1ZUb29sYmFyVGl0bGUubWpzXCI7XG5pbXBvcnQgeyBWRXhwYW5kVHJhbnNpdGlvbiB9IGZyb20gXCIuLi90cmFuc2l0aW9ucy9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZEZWZhdWx0c1Byb3ZpZGVyIH0gZnJvbSBcIi4uL1ZEZWZhdWx0c1Byb3ZpZGVyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkltZyB9IGZyb20gXCIuLi9WSW1nL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUJvcmRlclByb3BzLCB1c2VCb3JkZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvYm9yZGVyLm1qc1wiO1xuaW1wb3J0IHsgdXNlQmFja2dyb3VuZENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhbGUubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgc2hhbGxvd1JlZiwgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IGFsbG93ZWREZW5zaXRpZXMgPSBbbnVsbCwgJ3Byb21pbmVudCcsICdkZWZhdWx0JywgJ2NvbWZvcnRhYmxlJywgJ2NvbXBhY3QnXTtcbmV4cG9ydCBjb25zdCBtYWtlVlRvb2xiYXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGFic29sdXRlOiBCb29sZWFuLFxuICBjb2xsYXBzZTogQm9vbGVhbixcbiAgY29sb3I6IFN0cmluZyxcbiAgZGVuc2l0eToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnZGVmYXVsdCcsXG4gICAgdmFsaWRhdG9yOiB2ID0+IGFsbG93ZWREZW5zaXRpZXMuaW5jbHVkZXModilcbiAgfSxcbiAgZXh0ZW5kZWQ6IEJvb2xlYW4sXG4gIGV4dGVuc2lvbkhlaWdodDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogNDhcbiAgfSxcbiAgZmxhdDogQm9vbGVhbixcbiAgZmxvYXRpbmc6IEJvb2xlYW4sXG4gIGhlaWdodDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogNjRcbiAgfSxcbiAgaW1hZ2U6IFN0cmluZyxcbiAgdGl0bGU6IFN0cmluZyxcbiAgLi4ubWFrZUJvcmRlclByb3BzKCksXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRWxldmF0aW9uUHJvcHMoKSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoe1xuICAgIHRhZzogJ2hlYWRlcidcbiAgfSksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWVG9vbGJhcicpO1xuZXhwb3J0IGNvbnN0IFZUb29sYmFyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZUb29sYmFyJyxcbiAgcHJvcHM6IG1ha2VWVG9vbGJhclByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VCYWNrZ3JvdW5kQ29sb3IodG9SZWYocHJvcHMsICdjb2xvcicpKTtcbiAgICBjb25zdCB7XG4gICAgICBib3JkZXJDbGFzc2VzXG4gICAgfSA9IHVzZUJvcmRlcihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJ0bENsYXNzZXNcbiAgICB9ID0gdXNlUnRsKCk7XG4gICAgY29uc3QgaXNFeHRlbmRlZCA9IHNoYWxsb3dSZWYoISEocHJvcHMuZXh0ZW5kZWQgfHwgc2xvdHMuZXh0ZW5zaW9uPy4oKSkpO1xuICAgIGNvbnN0IGNvbnRlbnRIZWlnaHQgPSBjb21wdXRlZCgoKSA9PiBwYXJzZUludChOdW1iZXIocHJvcHMuaGVpZ2h0KSArIChwcm9wcy5kZW5zaXR5ID09PSAncHJvbWluZW50JyA/IE51bWJlcihwcm9wcy5oZWlnaHQpIDogMCkgLSAocHJvcHMuZGVuc2l0eSA9PT0gJ2NvbWZvcnRhYmxlJyA/IDggOiAwKSAtIChwcm9wcy5kZW5zaXR5ID09PSAnY29tcGFjdCcgPyAxNiA6IDApLCAxMCkpO1xuICAgIGNvbnN0IGV4dGVuc2lvbkhlaWdodCA9IGNvbXB1dGVkKCgpID0+IGlzRXh0ZW5kZWQudmFsdWUgPyBwYXJzZUludChOdW1iZXIocHJvcHMuZXh0ZW5zaW9uSGVpZ2h0KSArIChwcm9wcy5kZW5zaXR5ID09PSAncHJvbWluZW50JyA/IE51bWJlcihwcm9wcy5leHRlbnNpb25IZWlnaHQpIDogMCkgLSAocHJvcHMuZGVuc2l0eSA9PT0gJ2NvbWZvcnRhYmxlJyA/IDQgOiAwKSAtIChwcm9wcy5kZW5zaXR5ID09PSAnY29tcGFjdCcgPyA4IDogMCksIDEwKSA6IDApO1xuICAgIHByb3ZpZGVEZWZhdWx0cyh7XG4gICAgICBWQnRuOiB7XG4gICAgICAgIHZhcmlhbnQ6ICd0ZXh0J1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBoYXNUaXRsZSA9ICEhKHByb3BzLnRpdGxlIHx8IHNsb3RzLnRpdGxlKTtcbiAgICAgIGNvbnN0IGhhc0ltYWdlID0gISEoc2xvdHMuaW1hZ2UgfHwgcHJvcHMuaW1hZ2UpO1xuICAgICAgY29uc3QgZXh0ZW5zaW9uID0gc2xvdHMuZXh0ZW5zaW9uPy4oKTtcbiAgICAgIGlzRXh0ZW5kZWQudmFsdWUgPSAhIShwcm9wcy5leHRlbmRlZCB8fCBleHRlbnNpb24pO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtdG9vbGJhcicsIHtcbiAgICAgICAgICAndi10b29sYmFyLS1hYnNvbHV0ZSc6IHByb3BzLmFic29sdXRlLFxuICAgICAgICAgICd2LXRvb2xiYXItLWNvbGxhcHNlJzogcHJvcHMuY29sbGFwc2UsXG4gICAgICAgICAgJ3YtdG9vbGJhci0tZmxhdCc6IHByb3BzLmZsYXQsXG4gICAgICAgICAgJ3YtdG9vbGJhci0tZmxvYXRpbmcnOiBwcm9wcy5mbG9hdGluZyxcbiAgICAgICAgICBbYHYtdG9vbGJhci0tZGVuc2l0eS0ke3Byb3BzLmRlbnNpdHl9YF06IHRydWVcbiAgICAgICAgfSwgYmFja2dyb3VuZENvbG9yQ2xhc3Nlcy52YWx1ZSwgYm9yZGVyQ2xhc3Nlcy52YWx1ZSwgZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgcnRsQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFtiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbaGFzSW1hZ2UgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImltYWdlXCIsXG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtdG9vbGJhcl9faW1hZ2VcIlxuICAgICAgICB9LCBbIXNsb3RzLmltYWdlID8gX2NyZWF0ZVZOb2RlKFZJbWcsIHtcbiAgICAgICAgICBcImtleVwiOiBcImltYWdlLWltZ1wiLFxuICAgICAgICAgIFwiY292ZXJcIjogdHJ1ZSxcbiAgICAgICAgICBcInNyY1wiOiBwcm9wcy5pbWFnZVxuICAgICAgICB9LCBudWxsKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgIFwia2V5XCI6IFwiaW1hZ2UtZGVmYXVsdHNcIixcbiAgICAgICAgICBcImRpc2FibGVkXCI6ICFwcm9wcy5pbWFnZSxcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZJbWc6IHtcbiAgICAgICAgICAgICAgY292ZXI6IHRydWUsXG4gICAgICAgICAgICAgIHNyYzogcHJvcHMuaW1hZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHNsb3RzLmltYWdlKV0pLCBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZUYWJzOiB7XG4gICAgICAgICAgICAgIGhlaWdodDogY29udmVydFRvVW5pdChjb250ZW50SGVpZ2h0LnZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtdG9vbGJhcl9fY29udGVudFwiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiB7XG4gICAgICAgICAgICAgIGhlaWdodDogY29udmVydFRvVW5pdChjb250ZW50SGVpZ2h0LnZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIFtzbG90cy5wcmVwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwidi10b29sYmFyX19wcmVwZW5kXCJcbiAgICAgICAgICB9LCBbc2xvdHMucHJlcGVuZD8uKCldKSwgaGFzVGl0bGUgJiYgX2NyZWF0ZVZOb2RlKFZUb29sYmFyVGl0bGUsIHtcbiAgICAgICAgICAgIFwia2V5XCI6IFwidGl0bGVcIixcbiAgICAgICAgICAgIFwidGV4dFwiOiBwcm9wcy50aXRsZVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIHRleHQ6IHNsb3RzLnRpdGxlXG4gICAgICAgICAgfSksIHNsb3RzLmRlZmF1bHQ/LigpLCBzbG90cy5hcHBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXRvb2xiYXJfX2FwcGVuZFwiXG4gICAgICAgICAgfSwgW3Nsb3RzLmFwcGVuZD8uKCldKV0pXVxuICAgICAgICB9KSwgX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICBWVGFiczoge1xuICAgICAgICAgICAgICBoZWlnaHQ6IGNvbnZlcnRUb1VuaXQoZXh0ZW5zaW9uSGVpZ2h0LnZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtfY3JlYXRlVk5vZGUoVkV4cGFuZFRyYW5zaXRpb24sIG51bGwsIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtpc0V4dGVuZGVkLnZhbHVlICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXRvb2xiYXJfX2V4dGVuc2lvblwiLFxuICAgICAgICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGNvbnZlcnRUb1VuaXQoZXh0ZW5zaW9uSGVpZ2h0LnZhbHVlKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBbZXh0ZW5zaW9uXSldXG4gICAgICAgICAgfSldXG4gICAgICAgIH0pXVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnRIZWlnaHQsXG4gICAgICBleHRlbnNpb25IZWlnaHRcbiAgICB9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZUb29sYmFyLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBvbkJlZm9yZVVubW91bnQsIG9uTW91bnRlZCwgcmVmLCBzaGFsbG93UmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjbGFtcCwgY29uc29sZVdhcm4sIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuLy8gQ29tcG9zYWJsZXNcbmV4cG9ydCBjb25zdCBtYWtlU2Nyb2xsUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBzY3JvbGxUYXJnZXQ6IHtcbiAgICB0eXBlOiBTdHJpbmdcbiAgfSxcbiAgc2Nyb2xsVGhyZXNob2xkOiB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiAzMDBcbiAgfVxufSwgJ3Njcm9sbCcpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNjcm9sbChwcm9wcykge1xuICBsZXQgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIGNvbnN0IHtcbiAgICBjYW5TY3JvbGxcbiAgfSA9IGFyZ3M7XG4gIGxldCBwcmV2aW91c1Njcm9sbCA9IDA7XG4gIGNvbnN0IHRhcmdldCA9IHJlZihudWxsKTtcbiAgY29uc3QgY3VycmVudFNjcm9sbCA9IHNoYWxsb3dSZWYoMCk7XG4gIGNvbnN0IHNhdmVkU2Nyb2xsID0gc2hhbGxvd1JlZigwKTtcbiAgY29uc3QgY3VycmVudFRocmVzaG9sZCA9IHNoYWxsb3dSZWYoMCk7XG4gIGNvbnN0IGlzU2Nyb2xsQWN0aXZlID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gIGNvbnN0IGlzU2Nyb2xsaW5nVXAgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgY29uc3Qgc2Nyb2xsVGhyZXNob2xkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBOdW1iZXIocHJvcHMuc2Nyb2xsVGhyZXNob2xkKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIDE6IGF0IHRvcFxuICAgKiAwOiBhdCB0aHJlc2hvbGRcbiAgICovXG4gIGNvbnN0IHNjcm9sbFJhdGlvID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBjbGFtcCgoc2Nyb2xsVGhyZXNob2xkLnZhbHVlIC0gY3VycmVudFNjcm9sbC52YWx1ZSkgLyBzY3JvbGxUaHJlc2hvbGQudmFsdWUgfHwgMCk7XG4gIH0pO1xuICBjb25zdCBvblNjcm9sbCA9ICgpID0+IHtcbiAgICBjb25zdCB0YXJnZXRFbCA9IHRhcmdldC52YWx1ZTtcbiAgICBpZiAoIXRhcmdldEVsIHx8IGNhblNjcm9sbCAmJiAhY2FuU2Nyb2xsLnZhbHVlKSByZXR1cm47XG4gICAgcHJldmlvdXNTY3JvbGwgPSBjdXJyZW50U2Nyb2xsLnZhbHVlO1xuICAgIGN1cnJlbnRTY3JvbGwudmFsdWUgPSAnd2luZG93JyBpbiB0YXJnZXRFbCA/IHRhcmdldEVsLnBhZ2VZT2Zmc2V0IDogdGFyZ2V0RWwuc2Nyb2xsVG9wO1xuICAgIGlzU2Nyb2xsaW5nVXAudmFsdWUgPSBjdXJyZW50U2Nyb2xsLnZhbHVlIDwgcHJldmlvdXNTY3JvbGw7XG4gICAgY3VycmVudFRocmVzaG9sZC52YWx1ZSA9IE1hdGguYWJzKGN1cnJlbnRTY3JvbGwudmFsdWUgLSBzY3JvbGxUaHJlc2hvbGQudmFsdWUpO1xuICB9O1xuICB3YXRjaChpc1Njcm9sbGluZ1VwLCAoKSA9PiB7XG4gICAgc2F2ZWRTY3JvbGwudmFsdWUgPSBzYXZlZFNjcm9sbC52YWx1ZSB8fCBjdXJyZW50U2Nyb2xsLnZhbHVlO1xuICB9KTtcbiAgd2F0Y2goaXNTY3JvbGxBY3RpdmUsICgpID0+IHtcbiAgICBzYXZlZFNjcm9sbC52YWx1ZSA9IDA7XG4gIH0pO1xuICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgIHdhdGNoKCgpID0+IHByb3BzLnNjcm9sbFRhcmdldCwgc2Nyb2xsVGFyZ2V0ID0+IHtcbiAgICAgIGNvbnN0IG5ld1RhcmdldCA9IHNjcm9sbFRhcmdldCA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2Nyb2xsVGFyZ2V0KSA6IHdpbmRvdztcbiAgICAgIGlmICghbmV3VGFyZ2V0KSB7XG4gICAgICAgIGNvbnNvbGVXYXJuKGBVbmFibGUgdG8gbG9jYXRlIGVsZW1lbnQgd2l0aCBpZGVudGlmaWVyICR7c2Nyb2xsVGFyZ2V0fWApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAobmV3VGFyZ2V0ID09PSB0YXJnZXQudmFsdWUpIHJldHVybjtcbiAgICAgIHRhcmdldC52YWx1ZT8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwpO1xuICAgICAgdGFyZ2V0LnZhbHVlID0gbmV3VGFyZ2V0O1xuICAgICAgdGFyZ2V0LnZhbHVlLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsLCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0sIHtcbiAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcbiAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICB0YXJnZXQudmFsdWU/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsKTtcbiAgfSk7XG5cbiAgLy8gRG8gd2UgbmVlZCB0aGlzPyBJZiB5ZXMgLSBzZWVtcyB0aGF0XG4gIC8vIHRoZXJlJ3Mgbm8gbmVlZCB0byBleHBvc2Ugb25TY3JvbGxcbiAgY2FuU2Nyb2xsICYmIHdhdGNoKGNhblNjcm9sbCwgb25TY3JvbGwsIHtcbiAgICBpbW1lZGlhdGU6IHRydWVcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsVGhyZXNob2xkLFxuICAgIGN1cnJlbnRTY3JvbGwsXG4gICAgY3VycmVudFRocmVzaG9sZCxcbiAgICBpc1Njcm9sbEFjdGl2ZSxcbiAgICBzY3JvbGxSYXRpbyxcbiAgICAvLyByZXF1aXJlZCBvbmx5IGZvciB0ZXN0aW5nXG4gICAgLy8gcHJvYmFibHkgY2FuIGJlIHJlbW92ZWRcbiAgICAvLyBsYXRlciAoMiBjaGFycyBjaGxuZylcbiAgICBpc1Njcm9sbGluZ1VwLFxuICAgIHNhdmVkU2Nyb2xsXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY3JvbGwubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG9uTW91bnRlZCwgcmVhZG9ubHksIHNoYWxsb3dSZWYgfSBmcm9tICd2dWUnO1xuXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNzckJvb3QoKSB7XG4gIGNvbnN0IGlzQm9vdGVkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBpc0Jvb3RlZC52YWx1ZSA9IHRydWU7XG4gICAgfSk7XG4gIH0pO1xuICBjb25zdCBzc3JCb290U3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gIWlzQm9vdGVkLnZhbHVlID8ge1xuICAgIHRyYW5zaXRpb246ICdub25lICFpbXBvcnRhbnQnXG4gIH0gOiB1bmRlZmluZWQpO1xuICByZXR1cm4ge1xuICAgIHNzckJvb3RTdHlsZXMsXG4gICAgaXNCb290ZWQ6IHJlYWRvbmx5KGlzQm9vdGVkKVxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3NyQm9vdC5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZBcHBCYXIuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IG1ha2VWVG9vbGJhclByb3BzLCBWVG9vbGJhciB9IGZyb20gXCIuLi9WVG9vbGJhci9WVG9vbGJhci5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VMYXlvdXRJdGVtUHJvcHMsIHVzZUxheW91dEl0ZW0gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGF5b3V0Lm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IG1ha2VTY3JvbGxQcm9wcywgdXNlU2Nyb2xsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Njcm9sbC5tanNcIjtcbmltcG9ydCB7IHVzZVNzckJvb3QgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc3NyQm9vdC5tanNcIjtcbmltcG9ydCB7IHVzZVRvZ2dsZVNjb3BlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RvZ2dsZVNjb3BlLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCByZWYsIHNoYWxsb3dSZWYsIHRvUmVmLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWQXBwQmFyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBzY3JvbGxCZWhhdmlvcjogU3RyaW5nLFxuICBtb2RlbFZhbHVlOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIGxvY2F0aW9uOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICd0b3AnLFxuICAgIHZhbGlkYXRvcjogdmFsdWUgPT4gWyd0b3AnLCAnYm90dG9tJ10uaW5jbHVkZXModmFsdWUpXG4gIH0sXG4gIC4uLm1ha2VWVG9vbGJhclByb3BzKCksXG4gIC4uLm1ha2VMYXlvdXRJdGVtUHJvcHMoKSxcbiAgLi4ubWFrZVNjcm9sbFByb3BzKCksXG4gIGhlaWdodDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogNjRcbiAgfVxufSwgJ1ZBcHBCYXInKTtcbmV4cG9ydCBjb25zdCBWQXBwQmFyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZBcHBCYXInLFxuICBwcm9wczogbWFrZVZBcHBCYXJQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB2VG9vbGJhclJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHNjcm9sbEJlaGF2aW9yID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgYmVoYXZpb3IgPSBuZXcgU2V0KHByb3BzLnNjcm9sbEJlaGF2aW9yPy5zcGxpdCgnICcpID8/IFtdKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhpZGU6IGJlaGF2aW9yLmhhcygnaGlkZScpLFxuICAgICAgICAvLyBmdWxseUhpZGU6IGJlaGF2aW9yLmhhcygnZnVsbHktaGlkZScpLFxuICAgICAgICBpbnZlcnRlZDogYmVoYXZpb3IuaGFzKCdpbnZlcnRlZCcpLFxuICAgICAgICBjb2xsYXBzZTogYmVoYXZpb3IuaGFzKCdjb2xsYXBzZScpLFxuICAgICAgICBlbGV2YXRlOiBiZWhhdmlvci5oYXMoJ2VsZXZhdGUnKSxcbiAgICAgICAgZmFkZUltYWdlOiBiZWhhdmlvci5oYXMoJ2ZhZGUtaW1hZ2UnKVxuICAgICAgICAvLyBzaHJpbms6IGJlaGF2aW9yLmhhcygnc2hyaW5rJyksXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgY29uc3QgY2FuU2Nyb2xsID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgYmVoYXZpb3IgPSBzY3JvbGxCZWhhdmlvci52YWx1ZTtcbiAgICAgIHJldHVybiBiZWhhdmlvci5oaWRlIHx8XG4gICAgICAvLyBiZWhhdmlvci5mdWxseUhpZGUgfHxcbiAgICAgIGJlaGF2aW9yLmludmVydGVkIHx8IGJlaGF2aW9yLmNvbGxhcHNlIHx8IGJlaGF2aW9yLmVsZXZhdGUgfHwgYmVoYXZpb3IuZmFkZUltYWdlIHx8XG4gICAgICAvLyBiZWhhdmlvci5zaHJpbmsgfHxcbiAgICAgICFpc0FjdGl2ZS52YWx1ZTtcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBjdXJyZW50U2Nyb2xsLFxuICAgICAgc2Nyb2xsVGhyZXNob2xkLFxuICAgICAgaXNTY3JvbGxpbmdVcCxcbiAgICAgIHNjcm9sbFJhdGlvXG4gICAgfSA9IHVzZVNjcm9sbChwcm9wcywge1xuICAgICAgY2FuU2Nyb2xsXG4gICAgfSk7XG4gICAgY29uc3QgaXNDb2xsYXBzZWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5jb2xsYXBzZSB8fCBzY3JvbGxCZWhhdmlvci52YWx1ZS5jb2xsYXBzZSAmJiAoc2Nyb2xsQmVoYXZpb3IudmFsdWUuaW52ZXJ0ZWQgPyBzY3JvbGxSYXRpby52YWx1ZSA+IDAgOiBzY3JvbGxSYXRpby52YWx1ZSA9PT0gMCkpO1xuICAgIGNvbnN0IGlzRmxhdCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmZsYXQgfHwgc2Nyb2xsQmVoYXZpb3IudmFsdWUuZWxldmF0ZSAmJiAoc2Nyb2xsQmVoYXZpb3IudmFsdWUuaW52ZXJ0ZWQgPyBjdXJyZW50U2Nyb2xsLnZhbHVlID4gMCA6IGN1cnJlbnRTY3JvbGwudmFsdWUgPT09IDApKTtcbiAgICBjb25zdCBvcGFjaXR5ID0gY29tcHV0ZWQoKCkgPT4gc2Nyb2xsQmVoYXZpb3IudmFsdWUuZmFkZUltYWdlID8gc2Nyb2xsQmVoYXZpb3IudmFsdWUuaW52ZXJ0ZWQgPyAxIC0gc2Nyb2xsUmF0aW8udmFsdWUgOiBzY3JvbGxSYXRpby52YWx1ZSA6IHVuZGVmaW5lZCk7XG4gICAgY29uc3QgaGVpZ2h0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHNjcm9sbEJlaGF2aW9yLnZhbHVlLmhpZGUgJiYgc2Nyb2xsQmVoYXZpb3IudmFsdWUuaW52ZXJ0ZWQpIHJldHVybiAwO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gdlRvb2xiYXJSZWYudmFsdWU/LmNvbnRlbnRIZWlnaHQgPz8gMDtcbiAgICAgIGNvbnN0IGV4dGVuc2lvbkhlaWdodCA9IHZUb29sYmFyUmVmLnZhbHVlPy5leHRlbnNpb25IZWlnaHQgPz8gMDtcbiAgICAgIHJldHVybiBoZWlnaHQgKyBleHRlbnNpb25IZWlnaHQ7XG4gICAgfSk7XG4gICAgdXNlVG9nZ2xlU2NvcGUoY29tcHV0ZWQoKCkgPT4gISFwcm9wcy5zY3JvbGxCZWhhdmlvciksICgpID0+IHtcbiAgICAgIHdhdGNoRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHNjcm9sbEJlaGF2aW9yLnZhbHVlLmhpZGUpIHtcbiAgICAgICAgICBpZiAoc2Nyb2xsQmVoYXZpb3IudmFsdWUuaW52ZXJ0ZWQpIHtcbiAgICAgICAgICAgIGlzQWN0aXZlLnZhbHVlID0gY3VycmVudFNjcm9sbC52YWx1ZSA+IHNjcm9sbFRocmVzaG9sZC52YWx1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXNBY3RpdmUudmFsdWUgPSBpc1Njcm9sbGluZ1VwLnZhbHVlIHx8IGN1cnJlbnRTY3JvbGwudmFsdWUgPCBzY3JvbGxUaHJlc2hvbGQudmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzQWN0aXZlLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgc3NyQm9vdFN0eWxlc1xuICAgIH0gPSB1c2VTc3JCb290KCk7XG4gICAgY29uc3Qge1xuICAgICAgbGF5b3V0SXRlbVN0eWxlc1xuICAgIH0gPSB1c2VMYXlvdXRJdGVtKHtcbiAgICAgIGlkOiBwcm9wcy5uYW1lLFxuICAgICAgb3JkZXI6IGNvbXB1dGVkKCgpID0+IHBhcnNlSW50KHByb3BzLm9yZGVyLCAxMCkpLFxuICAgICAgcG9zaXRpb246IHRvUmVmKHByb3BzLCAnbG9jYXRpb24nKSxcbiAgICAgIGxheW91dFNpemU6IGhlaWdodCxcbiAgICAgIGVsZW1lbnRTaXplOiBzaGFsbG93UmVmKHVuZGVmaW5lZCksXG4gICAgICBhY3RpdmU6IGlzQWN0aXZlLFxuICAgICAgYWJzb2x1dGU6IHRvUmVmKHByb3BzLCAnYWJzb2x1dGUnKVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBbdG9vbGJhclByb3BzXSA9IFZUb29sYmFyLmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVlRvb2xiYXIsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJyZWZcIjogdlRvb2xiYXJSZWYsXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWFwcC1iYXInLCB7XG4gICAgICAgICAgJ3YtYXBwLWJhci0tYm90dG9tJzogcHJvcHMubG9jYXRpb24gPT09ICdib3R0b20nXG4gICAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbe1xuICAgICAgICAgIC4uLmxheW91dEl0ZW1TdHlsZXMudmFsdWUsXG4gICAgICAgICAgJy0tdi10b29sYmFyLWltYWdlLW9wYWNpdHknOiBvcGFjaXR5LnZhbHVlLFxuICAgICAgICAgIGhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICAgIC4uLnNzckJvb3RTdHlsZXMudmFsdWVcbiAgICAgICAgfSwgcHJvcHMuc3R5bGVdXG4gICAgICB9LCB0b29sYmFyUHJvcHMsIHtcbiAgICAgICAgXCJjb2xsYXBzZVwiOiBpc0NvbGxhcHNlZC52YWx1ZSxcbiAgICAgICAgXCJmbGF0XCI6IGlzRmxhdC52YWx1ZVxuICAgICAgfSksIHNsb3RzKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkFwcEJhci5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2VOYW1lLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IGFsbG93ZWREZW5zaXRpZXMgPSBbbnVsbCwgJ2RlZmF1bHQnLCAnY29tZm9ydGFibGUnLCAnY29tcGFjdCddO1xuXG4vLyB0eXBlb2YgYWxsb3dlZERlbnNpdGllc1tudW1iZXJdIGV2YWx1dGVzIHRvIGFueVxuLy8gd2hlbiBnZW5lcmF0aW5nIGFwaSB0eXBlcyBmb3Igd2hhdGV2ZXIgcmVhc29uLlxuXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VEZW5zaXR5UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBkZW5zaXR5OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdkZWZhdWx0JyxcbiAgICB2YWxpZGF0b3I6IHYgPT4gYWxsb3dlZERlbnNpdGllcy5pbmNsdWRlcyh2KVxuICB9XG59LCAnZGVuc2l0eScpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURlbnNpdHkocHJvcHMpIHtcbiAgbGV0IG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGdldEN1cnJlbnRJbnN0YW5jZU5hbWUoKTtcbiAgY29uc3QgZGVuc2l0eUNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIGAke25hbWV9LS1kZW5zaXR5LSR7cHJvcHMuZGVuc2l0eX1gO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBkZW5zaXR5Q2xhc3Nlc1xuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVuc2l0eS5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQ29sb3IgfSBmcm9tIFwiLi9jb2xvci5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgdW5yZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlTmFtZSwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgYWxsb3dlZFZhcmlhbnRzID0gWydlbGV2YXRlZCcsICdmbGF0JywgJ3RvbmFsJywgJ291dGxpbmVkJywgJ3RleHQnLCAncGxhaW4nXTtcbmV4cG9ydCBmdW5jdGlvbiBnZW5PdmVybGF5cyhpc0NsaWNrYWJsZSwgbmFtZSkge1xuICByZXR1cm4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW2lzQ2xpY2thYmxlICYmIF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgIFwia2V5XCI6IFwib3ZlcmxheVwiLFxuICAgIFwiY2xhc3NcIjogYCR7bmFtZX1fX292ZXJsYXlgXG4gIH0sIG51bGwpLCBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICBcImtleVwiOiBcInVuZGVybGF5XCIsXG4gICAgXCJjbGFzc1wiOiBgJHtuYW1lfV9fdW5kZXJsYXlgXG4gIH0sIG51bGwpXSk7XG59XG5leHBvcnQgY29uc3QgbWFrZVZhcmlhbnRQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbG9yOiBTdHJpbmcsXG4gIHZhcmlhbnQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2VsZXZhdGVkJyxcbiAgICB2YWxpZGF0b3I6IHYgPT4gYWxsb3dlZFZhcmlhbnRzLmluY2x1ZGVzKHYpXG4gIH1cbn0sICd2YXJpYW50Jyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlVmFyaWFudChwcm9wcykge1xuICBsZXQgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZ2V0Q3VycmVudEluc3RhbmNlTmFtZSgpO1xuICBjb25zdCB2YXJpYW50Q2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB2YXJpYW50XG4gICAgfSA9IHVucmVmKHByb3BzKTtcbiAgICByZXR1cm4gYCR7bmFtZX0tLXZhcmlhbnQtJHt2YXJpYW50fWA7XG4gIH0pO1xuICBjb25zdCB7XG4gICAgY29sb3JDbGFzc2VzLFxuICAgIGNvbG9yU3R5bGVzXG4gIH0gPSB1c2VDb2xvcihjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdmFyaWFudCxcbiAgICAgIGNvbG9yXG4gICAgfSA9IHVucmVmKHByb3BzKTtcbiAgICByZXR1cm4ge1xuICAgICAgW1snZWxldmF0ZWQnLCAnZmxhdCddLmluY2x1ZGVzKHZhcmlhbnQpID8gJ2JhY2tncm91bmQnIDogJ3RleHQnXTogY29sb3JcbiAgICB9O1xuICB9KSk7XG4gIHJldHVybiB7XG4gICAgY29sb3JDbGFzc2VzLFxuICAgIGNvbG9yU3R5bGVzLFxuICAgIHZhcmlhbnRDbGFzc2VzXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YXJpYW50Lm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkJ0bkdyb3VwLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUJvcmRlclByb3BzLCB1c2VCb3JkZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvYm9yZGVyLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjtcbmltcG9ydCB7IG1ha2VEZW5zaXR5UHJvcHMsIHVzZURlbnNpdHkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVuc2l0eS5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZhcmlhbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy92YXJpYW50Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZCdG5Hcm91cFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZGl2aWRlZDogQm9vbGVhbixcbiAgLi4ubWFrZUJvcmRlclByb3BzKCksXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGVuc2l0eVByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpLFxuICAuLi5tYWtlVmFyaWFudFByb3BzKClcbn0sICdWQnRuR3JvdXAnKTtcbmV4cG9ydCBjb25zdCBWQnRuR3JvdXAgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkJ0bkdyb3VwJyxcbiAgcHJvcHM6IG1ha2VWQnRuR3JvdXBQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbnNpdHlDbGFzc2VzXG4gICAgfSA9IHVzZURlbnNpdHkocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJvcmRlckNsYXNzZXNcbiAgICB9ID0gdXNlQm9yZGVyKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZCdG46IHtcbiAgICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICAgIGNvbG9yOiB0b1JlZihwcm9wcywgJ2NvbG9yJyksXG4gICAgICAgIGRlbnNpdHk6IHRvUmVmKHByb3BzLCAnZGVuc2l0eScpLFxuICAgICAgICBmbGF0OiB0cnVlLFxuICAgICAgICB2YXJpYW50OiB0b1JlZihwcm9wcywgJ3ZhcmlhbnQnKVxuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1idG4tZ3JvdXAnLCB7XG4gICAgICAgICAgJ3YtYnRuLWdyb3VwLS1kaXZpZGVkJzogcHJvcHMuZGl2aWRlZFxuICAgICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIGJvcmRlckNsYXNzZXMudmFsdWUsIGRlbnNpdHlDbGFzc2VzLnZhbHVlLCBlbGV2YXRpb25DbGFzc2VzLnZhbHVlLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9LCBzbG90cyk7XG4gICAgfSk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkJ0bkdyb3VwLm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4vcHJveGllZE1vZGVsLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBpbmplY3QsIG9uQmVmb3JlVW5tb3VudCwgb25Nb3VudGVkLCBwcm92aWRlLCByZWFjdGl2ZSwgdG9SZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnNvbGVXYXJuLCBkZWVwRXF1YWwsIGZpbmRDaGlsZHJlbldpdGhQcm92aWRlLCBnZXRDdXJyZW50SW5zdGFuY2UsIGdldFVpZCwgcHJvcHNGYWN0b3J5LCB3cmFwSW5BcnJheSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VHcm91cFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IG51bGwsXG4gICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gIH0sXG4gIG11bHRpcGxlOiBCb29sZWFuLFxuICBtYW5kYXRvcnk6IFtCb29sZWFuLCBTdHJpbmddLFxuICBtYXg6IE51bWJlcixcbiAgc2VsZWN0ZWRDbGFzczogU3RyaW5nLFxuICBkaXNhYmxlZDogQm9vbGVhblxufSwgJ2dyb3VwJyk7XG5leHBvcnQgY29uc3QgbWFrZUdyb3VwSXRlbVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgdmFsdWU6IG51bGwsXG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICBzZWxlY3RlZENsYXNzOiBTdHJpbmdcbn0sICdncm91cC1pdGVtJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlR3JvdXBJdGVtKHByb3BzLCBpbmplY3RLZXkpIHtcbiAgbGV0IHJlcXVpcmVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0cnVlO1xuICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgndXNlR3JvdXBJdGVtJyk7XG4gIGlmICghdm0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tWdWV0aWZ5XSB1c2VHcm91cEl0ZW0gY29tcG9zYWJsZSBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgY29tcG9uZW50IHNldHVwIGZ1bmN0aW9uJyk7XG4gIH1cbiAgY29uc3QgaWQgPSBnZXRVaWQoKTtcbiAgcHJvdmlkZShTeW1ib2wuZm9yKGAke2luamVjdEtleS5kZXNjcmlwdGlvbn06aWRgKSwgaWQpO1xuICBjb25zdCBncm91cCA9IGluamVjdChpbmplY3RLZXksIG51bGwpO1xuICBpZiAoIWdyb3VwKSB7XG4gICAgaWYgKCFyZXF1aXJlZCkgcmV0dXJuIGdyb3VwO1xuICAgIHRocm93IG5ldyBFcnJvcihgW1Z1ZXRpZnldIENvdWxkIG5vdCBmaW5kIHVzZUdyb3VwIGluamVjdGlvbiB3aXRoIHN5bWJvbCAke2luamVjdEtleS5kZXNjcmlwdGlvbn1gKTtcbiAgfVxuICBjb25zdCB2YWx1ZSA9IHRvUmVmKHByb3BzLCAndmFsdWUnKTtcbiAgY29uc3QgZGlzYWJsZWQgPSBjb21wdXRlZCgoKSA9PiAhIShncm91cC5kaXNhYmxlZC52YWx1ZSB8fCBwcm9wcy5kaXNhYmxlZCkpO1xuICBncm91cC5yZWdpc3Rlcih7XG4gICAgaWQsXG4gICAgdmFsdWUsXG4gICAgZGlzYWJsZWRcbiAgfSwgdm0pO1xuICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgIGdyb3VwLnVucmVnaXN0ZXIoaWQpO1xuICB9KTtcbiAgY29uc3QgaXNTZWxlY3RlZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gZ3JvdXAuaXNTZWxlY3RlZChpZCk7XG4gIH0pO1xuICBjb25zdCBzZWxlY3RlZENsYXNzID0gY29tcHV0ZWQoKCkgPT4gaXNTZWxlY3RlZC52YWx1ZSAmJiBbZ3JvdXAuc2VsZWN0ZWRDbGFzcy52YWx1ZSwgcHJvcHMuc2VsZWN0ZWRDbGFzc10pO1xuICB3YXRjaChpc1NlbGVjdGVkLCB2YWx1ZSA9PiB7XG4gICAgdm0uZW1pdCgnZ3JvdXA6c2VsZWN0ZWQnLCB7XG4gICAgICB2YWx1ZVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBpZCxcbiAgICBpc1NlbGVjdGVkLFxuICAgIHRvZ2dsZTogKCkgPT4gZ3JvdXAuc2VsZWN0KGlkLCAhaXNTZWxlY3RlZC52YWx1ZSksXG4gICAgc2VsZWN0OiB2YWx1ZSA9PiBncm91cC5zZWxlY3QoaWQsIHZhbHVlKSxcbiAgICBzZWxlY3RlZENsYXNzLFxuICAgIHZhbHVlLFxuICAgIGRpc2FibGVkLFxuICAgIGdyb3VwXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlR3JvdXAocHJvcHMsIGluamVjdEtleSkge1xuICBsZXQgaXNVbm1vdW50ZWQgPSBmYWxzZTtcbiAgY29uc3QgaXRlbXMgPSByZWFjdGl2ZShbXSk7XG4gIGNvbnN0IHNlbGVjdGVkID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScsIFtdLCB2ID0+IHtcbiAgICBpZiAodiA9PSBudWxsKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGdldElkcyhpdGVtcywgd3JhcEluQXJyYXkodikpO1xuICB9LCB2ID0+IHtcbiAgICBjb25zdCBhcnIgPSBnZXRWYWx1ZXMoaXRlbXMsIHYpO1xuICAgIHJldHVybiBwcm9wcy5tdWx0aXBsZSA/IGFyciA6IGFyclswXTtcbiAgfSk7XG4gIGNvbnN0IGdyb3VwVm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoJ3VzZUdyb3VwJyk7XG4gIGZ1bmN0aW9uIHJlZ2lzdGVyKGl0ZW0sIHZtKSB7XG4gICAgLy8gSXMgdGhlcmUgYSBiZXR0ZXIgd2F5IHRvIGZpeCB0aGlzIHR5cGluZz9cbiAgICBjb25zdCB1bndyYXBwZWQgPSBpdGVtO1xuICAgIGNvbnN0IGtleSA9IFN5bWJvbC5mb3IoYCR7aW5qZWN0S2V5LmRlc2NyaXB0aW9ufTppZGApO1xuICAgIGNvbnN0IGNoaWxkcmVuID0gZmluZENoaWxkcmVuV2l0aFByb3ZpZGUoa2V5LCBncm91cFZtPy52bm9kZSk7XG4gICAgY29uc3QgaW5kZXggPSBjaGlsZHJlbi5pbmRleE9mKHZtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgaXRlbXMuc3BsaWNlKGluZGV4LCAwLCB1bndyYXBwZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtcy5wdXNoKHVud3JhcHBlZCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHVucmVnaXN0ZXIoaWQpIHtcbiAgICBpZiAoaXNVbm1vdW50ZWQpIHJldHVybjtcblxuICAgIC8vIFRPRE86IHJlLWV2YWx1YXRlIHRoaXMgbGluZSdzIGltcG9ydGFuY2UgaW4gdGhlIGZ1dHVyZVxuICAgIC8vIHNob3VsZCB3ZSBvbmx5IG1vZGlmeSB0aGUgbW9kZWwgaWYgbWFuZGF0b3J5IGlzIHNldC5cbiAgICAvLyBzZWxlY3RlZC52YWx1ZSA9IHNlbGVjdGVkLnZhbHVlLmZpbHRlcih2ID0+IHYgIT09IGlkKVxuXG4gICAgZm9yY2VNYW5kYXRvcnlWYWx1ZSgpO1xuICAgIGNvbnN0IGluZGV4ID0gaXRlbXMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWQpO1xuICAgIGl0ZW1zLnNwbGljZShpbmRleCwgMSk7XG4gIH1cblxuICAvLyBJZiBtYW5kYXRvcnkgYW5kIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIHRoZW4gc2VsZWN0IGZpcnN0IG5vbi1kaXNhYmxlZCBpdGVtXG4gIGZ1bmN0aW9uIGZvcmNlTWFuZGF0b3J5VmFsdWUoKSB7XG4gICAgY29uc3QgaXRlbSA9IGl0ZW1zLmZpbmQoaXRlbSA9PiAhaXRlbS5kaXNhYmxlZCk7XG4gICAgaWYgKGl0ZW0gJiYgcHJvcHMubWFuZGF0b3J5ID09PSAnZm9yY2UnICYmICFzZWxlY3RlZC52YWx1ZS5sZW5ndGgpIHtcbiAgICAgIHNlbGVjdGVkLnZhbHVlID0gW2l0ZW0uaWRdO1xuICAgIH1cbiAgfVxuICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgIGZvcmNlTWFuZGF0b3J5VmFsdWUoKTtcbiAgfSk7XG4gIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgaXNVbm1vdW50ZWQgPSB0cnVlO1xuICB9KTtcbiAgZnVuY3Rpb24gc2VsZWN0KGlkLCB2YWx1ZSkge1xuICAgIGNvbnN0IGl0ZW0gPSBpdGVtcy5maW5kKGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWQpO1xuICAgIGlmICh2YWx1ZSAmJiBpdGVtPy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgIGlmIChwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgY29uc3QgaW50ZXJuYWxWYWx1ZSA9IHNlbGVjdGVkLnZhbHVlLnNsaWNlKCk7XG4gICAgICBjb25zdCBpbmRleCA9IGludGVybmFsVmFsdWUuZmluZEluZGV4KHYgPT4gdiA9PT0gaWQpO1xuICAgICAgY29uc3QgaXNTZWxlY3RlZCA9IH5pbmRleDtcbiAgICAgIHZhbHVlID0gdmFsdWUgPz8gIWlzU2VsZWN0ZWQ7XG5cbiAgICAgIC8vIFdlIGNhbid0IHJlbW92ZSB2YWx1ZSBpZiBncm91cCBpc1xuICAgICAgLy8gbWFuZGF0b3J5LCB2YWx1ZSBhbHJlYWR5IGV4aXN0cyxcbiAgICAgIC8vIGFuZCBpdCBpcyB0aGUgb25seSB2YWx1ZVxuICAgICAgaWYgKGlzU2VsZWN0ZWQgJiYgcHJvcHMubWFuZGF0b3J5ICYmIGludGVybmFsVmFsdWUubGVuZ3RoIDw9IDEpIHJldHVybjtcblxuICAgICAgLy8gV2UgY2FuJ3QgYWRkIHZhbHVlIGlmIGl0IHdvdWxkXG4gICAgICAvLyBjYXVzZSBtYXggbGltaXQgdG8gYmUgZXhjZWVkZWRcbiAgICAgIGlmICghaXNTZWxlY3RlZCAmJiBwcm9wcy5tYXggIT0gbnVsbCAmJiBpbnRlcm5hbFZhbHVlLmxlbmd0aCArIDEgPiBwcm9wcy5tYXgpIHJldHVybjtcbiAgICAgIGlmIChpbmRleCA8IDAgJiYgdmFsdWUpIGludGVybmFsVmFsdWUucHVzaChpZCk7ZWxzZSBpZiAoaW5kZXggPj0gMCAmJiAhdmFsdWUpIGludGVybmFsVmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHNlbGVjdGVkLnZhbHVlID0gaW50ZXJuYWxWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaXNTZWxlY3RlZCA9IHNlbGVjdGVkLnZhbHVlLmluY2x1ZGVzKGlkKTtcbiAgICAgIGlmIChwcm9wcy5tYW5kYXRvcnkgJiYgaXNTZWxlY3RlZCkgcmV0dXJuO1xuICAgICAgc2VsZWN0ZWQudmFsdWUgPSB2YWx1ZSA/PyAhaXNTZWxlY3RlZCA/IFtpZF0gOiBbXTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc3RlcChvZmZzZXQpIHtcbiAgICAvLyBnZXR0aW5nIGFuIG9mZnNldCBmcm9tIHNlbGVjdGVkIHZhbHVlIG9idmlvdXNseSB3b24ndCB3b3JrIHdpdGggbXVsdGlwbGUgdmFsdWVzXG4gICAgaWYgKHByb3BzLm11bHRpcGxlKSBjb25zb2xlV2FybignVGhpcyBtZXRob2QgaXMgbm90IHN1cHBvcnRlZCB3aGVuIHVzaW5nIFwibXVsdGlwbGVcIiBwcm9wJyk7XG4gICAgaWYgKCFzZWxlY3RlZC52YWx1ZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtcy5maW5kKGl0ZW0gPT4gIWl0ZW0uZGlzYWJsZWQpO1xuICAgICAgaXRlbSAmJiAoc2VsZWN0ZWQudmFsdWUgPSBbaXRlbS5pZF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjdXJyZW50SWQgPSBzZWxlY3RlZC52YWx1ZVswXTtcbiAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IGl0ZW1zLmZpbmRJbmRleChpID0+IGkuaWQgPT09IGN1cnJlbnRJZCk7XG4gICAgICBsZXQgbmV3SW5kZXggPSAoY3VycmVudEluZGV4ICsgb2Zmc2V0KSAlIGl0ZW1zLmxlbmd0aDtcbiAgICAgIGxldCBuZXdJdGVtID0gaXRlbXNbbmV3SW5kZXhdO1xuICAgICAgd2hpbGUgKG5ld0l0ZW0uZGlzYWJsZWQgJiYgbmV3SW5kZXggIT09IGN1cnJlbnRJbmRleCkge1xuICAgICAgICBuZXdJbmRleCA9IChuZXdJbmRleCArIG9mZnNldCkgJSBpdGVtcy5sZW5ndGg7XG4gICAgICAgIG5ld0l0ZW0gPSBpdGVtc1tuZXdJbmRleF07XG4gICAgICB9XG4gICAgICBpZiAobmV3SXRlbS5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgc2VsZWN0ZWQudmFsdWUgPSBbaXRlbXNbbmV3SW5kZXhdLmlkXTtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgcmVnaXN0ZXIsXG4gICAgdW5yZWdpc3RlcixcbiAgICBzZWxlY3RlZCxcbiAgICBzZWxlY3QsXG4gICAgZGlzYWJsZWQ6IHRvUmVmKHByb3BzLCAnZGlzYWJsZWQnKSxcbiAgICBwcmV2OiAoKSA9PiBzdGVwKGl0ZW1zLmxlbmd0aCAtIDEpLFxuICAgIG5leHQ6ICgpID0+IHN0ZXAoMSksXG4gICAgaXNTZWxlY3RlZDogaWQgPT4gc2VsZWN0ZWQudmFsdWUuaW5jbHVkZXMoaWQpLFxuICAgIHNlbGVjdGVkQ2xhc3M6IGNvbXB1dGVkKCgpID0+IHByb3BzLnNlbGVjdGVkQ2xhc3MpLFxuICAgIGl0ZW1zOiBjb21wdXRlZCgoKSA9PiBpdGVtcyksXG4gICAgZ2V0SXRlbUluZGV4OiB2YWx1ZSA9PiBnZXRJdGVtSW5kZXgoaXRlbXMsIHZhbHVlKVxuICB9O1xuICBwcm92aWRlKGluamVjdEtleSwgc3RhdGUpO1xuICByZXR1cm4gc3RhdGU7XG59XG5mdW5jdGlvbiBnZXRJdGVtSW5kZXgoaXRlbXMsIHZhbHVlKSB7XG4gIGNvbnN0IGlkcyA9IGdldElkcyhpdGVtcywgW3ZhbHVlXSk7XG4gIGlmICghaWRzLmxlbmd0aCkgcmV0dXJuIC0xO1xuICByZXR1cm4gaXRlbXMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWRzWzBdKTtcbn1cbmZ1bmN0aW9uIGdldElkcyhpdGVtcywgbW9kZWxWYWx1ZSkge1xuICBjb25zdCBpZHMgPSBbXTtcbiAgbW9kZWxWYWx1ZS5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICBjb25zdCBpdGVtID0gaXRlbXMuZmluZChpdGVtID0+IGRlZXBFcXVhbCh2YWx1ZSwgaXRlbS52YWx1ZSkpO1xuICAgIGNvbnN0IGl0ZW1CeUluZGV4ID0gaXRlbXNbdmFsdWVdO1xuICAgIGlmIChpdGVtPy52YWx1ZSAhPSBudWxsKSB7XG4gICAgICBpZHMucHVzaChpdGVtLmlkKTtcbiAgICB9IGVsc2UgaWYgKGl0ZW1CeUluZGV4ICE9IG51bGwpIHtcbiAgICAgIGlkcy5wdXNoKGl0ZW1CeUluZGV4LmlkKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaWRzO1xufVxuZnVuY3Rpb24gZ2V0VmFsdWVzKGl0ZW1zLCBpZHMpIHtcbiAgY29uc3QgdmFsdWVzID0gW107XG4gIGlkcy5mb3JFYWNoKGlkID0+IHtcbiAgICBjb25zdCBpdGVtSW5kZXggPSBpdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmlkID09PSBpZCk7XG4gICAgaWYgKH5pdGVtSW5kZXgpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpdGVtSW5kZXhdO1xuICAgICAgdmFsdWVzLnB1c2goaXRlbS52YWx1ZSAhPSBudWxsID8gaXRlbS52YWx1ZSA6IGl0ZW1JbmRleCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHZhbHVlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyb3VwLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkJ0blRvZ2dsZS5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgbWFrZVZCdG5Hcm91cFByb3BzLCBWQnRuR3JvdXAgfSBmcm9tIFwiLi4vVkJ0bkdyb3VwL1ZCdG5Hcm91cC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VHcm91cFByb3BzLCB1c2VHcm91cCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ncm91cC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IFZCdG5Ub2dnbGVTeW1ib2wgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5OnYtYnRuLXRvZ2dsZScpO1xuZXhwb3J0IGNvbnN0IG1ha2VWQnRuVG9nZ2xlUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICAuLi5tYWtlVkJ0bkdyb3VwUHJvcHMoKSxcbiAgLi4ubWFrZUdyb3VwUHJvcHMoKVxufSwgJ1ZCdG5Ub2dnbGUnKTtcbmV4cG9ydCBjb25zdCBWQnRuVG9nZ2xlID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZCdG5Ub2dnbGUnLFxuICBwcm9wczogbWFrZVZCdG5Ub2dnbGVQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBpc1NlbGVjdGVkLFxuICAgICAgbmV4dCxcbiAgICAgIHByZXYsXG4gICAgICBzZWxlY3QsXG4gICAgICBzZWxlY3RlZFxuICAgIH0gPSB1c2VHcm91cChwcm9wcywgVkJ0blRvZ2dsZVN5bWJvbCk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFtidG5Hcm91cFByb3BzXSA9IFZCdG5Hcm91cC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZCdG5Hcm91cCwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcImNsYXNzXCI6IFsndi1idG4tdG9nZ2xlJywgcHJvcHMuY2xhc3NdXG4gICAgICB9LCBidG5Hcm91cFByb3BzLCB7XG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0pLCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy5kZWZhdWx0Py4oe1xuICAgICAgICAgIGlzU2VsZWN0ZWQsXG4gICAgICAgICAgbmV4dCxcbiAgICAgICAgICBwcmV2LFxuICAgICAgICAgIHNlbGVjdCxcbiAgICAgICAgICBzZWxlY3RlZFxuICAgICAgICB9KV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBuZXh0LFxuICAgICAgcHJldixcbiAgICAgIHNlbGVjdFxuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkJ0blRvZ2dsZS5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBkZXN0cnVjdENvbXB1dGVkLCBnZXRDdXJyZW50SW5zdGFuY2VOYW1lLCBpbmNsdWRlcywgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5jb25zdCBwcmVkZWZpbmVkU2l6ZXMgPSBbJ3gtc21hbGwnLCAnc21hbGwnLCAnZGVmYXVsdCcsICdsYXJnZScsICd4LWxhcmdlJ107XG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VTaXplUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBzaXplOiB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiAnZGVmYXVsdCdcbiAgfVxufSwgJ3NpemUnKTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VTaXplKHByb3BzKSB7XG4gIGxldCBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBnZXRDdXJyZW50SW5zdGFuY2VOYW1lKCk7XG4gIHJldHVybiBkZXN0cnVjdENvbXB1dGVkKCgpID0+IHtcbiAgICBsZXQgc2l6ZUNsYXNzZXM7XG4gICAgbGV0IHNpemVTdHlsZXM7XG4gICAgaWYgKGluY2x1ZGVzKHByZWRlZmluZWRTaXplcywgcHJvcHMuc2l6ZSkpIHtcbiAgICAgIHNpemVDbGFzc2VzID0gYCR7bmFtZX0tLXNpemUtJHtwcm9wcy5zaXplfWA7XG4gICAgfSBlbHNlIGlmIChwcm9wcy5zaXplKSB7XG4gICAgICBzaXplU3R5bGVzID0ge1xuICAgICAgICB3aWR0aDogY29udmVydFRvVW5pdChwcm9wcy5zaXplKSxcbiAgICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KHByb3BzLnNpemUpXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc2l6ZUNsYXNzZXMsXG4gICAgICBzaXplU3R5bGVzXG4gICAgfTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaXplLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkljb24uY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VUZXh0Q29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlLCB1c2VJY29uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNpemVQcm9wcywgdXNlU2l6ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zaXplLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHJlZiwgVGV4dCwgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZmxhdHRlbkZyYWdtZW50cywgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkljb25Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbG9yOiBTdHJpbmcsXG4gIHN0YXJ0OiBCb29sZWFuLFxuICBlbmQ6IEJvb2xlYW4sXG4gIGljb246IEljb25WYWx1ZSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VTaXplUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKHtcbiAgICB0YWc6ICdpJ1xuICB9KSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZJY29uJyk7XG5leHBvcnQgY29uc3QgVkljb24gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkljb24nLFxuICBwcm9wczogbWFrZVZJY29uUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnMsXG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHNsb3RJY29uID0gcmVmKCk7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgaWNvbkRhdGFcbiAgICB9ID0gdXNlSWNvbihjb21wdXRlZCgoKSA9PiBzbG90SWNvbi52YWx1ZSB8fCBwcm9wcy5pY29uKSk7XG4gICAgY29uc3Qge1xuICAgICAgc2l6ZUNsYXNzZXNcbiAgICB9ID0gdXNlU2l6ZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgdGV4dENvbG9yQ2xhc3NlcyxcbiAgICAgIHRleHRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VUZXh0Q29sb3IodG9SZWYocHJvcHMsICdjb2xvcicpKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3Qgc2xvdFZhbHVlID0gc2xvdHMuZGVmYXVsdD8uKCk7XG4gICAgICBpZiAoc2xvdFZhbHVlKSB7XG4gICAgICAgIHNsb3RJY29uLnZhbHVlID0gZmxhdHRlbkZyYWdtZW50cyhzbG90VmFsdWUpLmZpbHRlcihub2RlID0+IG5vZGUudHlwZSA9PT0gVGV4dCAmJiBub2RlLmNoaWxkcmVuICYmIHR5cGVvZiBub2RlLmNoaWxkcmVuID09PSAnc3RyaW5nJylbMF0/LmNoaWxkcmVuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShpY29uRGF0YS52YWx1ZS5jb21wb25lbnQsIHtcbiAgICAgICAgXCJ0YWdcIjogcHJvcHMudGFnLFxuICAgICAgICBcImljb25cIjogaWNvbkRhdGEudmFsdWUuaWNvbixcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtaWNvbicsICdub3RyYW5zbGF0ZScsIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgc2l6ZUNsYXNzZXMudmFsdWUsIHRleHRDb2xvckNsYXNzZXMudmFsdWUsIHtcbiAgICAgICAgICAndi1pY29uLS1jbGlja2FibGUnOiAhIWF0dHJzLm9uQ2xpY2ssXG4gICAgICAgICAgJ3YtaWNvbi0tc3RhcnQnOiBwcm9wcy5zdGFydCxcbiAgICAgICAgICAndi1pY29uLS1lbmQnOiBwcm9wcy5lbmRcbiAgICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFshc2l6ZUNsYXNzZXMudmFsdWUgPyB7XG4gICAgICAgICAgZm9udFNpemU6IGNvbnZlcnRUb1VuaXQocHJvcHMuc2l6ZSksXG4gICAgICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KHByb3BzLnNpemUpLFxuICAgICAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KHByb3BzLnNpemUpXG4gICAgICAgIH0gOiB1bmRlZmluZWQsIHRleHRDb2xvclN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdLFxuICAgICAgICBcInJvbGVcIjogYXR0cnMub25DbGljayA/ICdidXR0b24nIDogdW5kZWZpbmVkLFxuICAgICAgICBcImFyaWEtaGlkZGVuXCI6ICFhdHRycy5vbkNsaWNrXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90VmFsdWVdXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vkljb24ubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgb25CZWZvcmVVbm1vdW50LCByZWYsIHNoYWxsb3dSZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IFNVUFBPUlRTX0lOVEVSU0VDVElPTiB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUludGVyc2VjdGlvbk9ic2VydmVyKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGNvbnN0IGludGVyc2VjdGlvblJlZiA9IHJlZigpO1xuICBjb25zdCBpc0ludGVyc2VjdGluZyA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICBpZiAoU1VQUE9SVFNfSU5URVJTRUNUSU9OKSB7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICBjYWxsYmFjaz8uKGVudHJpZXMsIG9ic2VydmVyKTtcbiAgICAgIGlzSW50ZXJzZWN0aW5nLnZhbHVlID0gISFlbnRyaWVzLmZpbmQoZW50cnkgPT4gZW50cnkuaXNJbnRlcnNlY3RpbmcpO1xuICAgIH0sIG9wdGlvbnMpO1xuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgd2F0Y2goaW50ZXJzZWN0aW9uUmVmLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAob2xkVmFsdWUpIHtcbiAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKG9sZFZhbHVlKTtcbiAgICAgICAgaXNJbnRlcnNlY3RpbmcudmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdWYWx1ZSkgb2JzZXJ2ZXIub2JzZXJ2ZShuZXdWYWx1ZSk7XG4gICAgfSwge1xuICAgICAgZmx1c2g6ICdwb3N0J1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgaW50ZXJzZWN0aW9uUmVmLFxuICAgIGlzSW50ZXJzZWN0aW5nXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnNlY3Rpb25PYnNlcnZlci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZQcm9ncmVzc0NpcmN1bGFyLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlVGV4dENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHVzZUludGVyc2VjdGlvbk9ic2VydmVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ludGVyc2VjdGlvbk9ic2VydmVyLm1qc1wiO1xuaW1wb3J0IHsgdXNlUmVzaXplT2JzZXJ2ZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcmVzaXplT2JzZXJ2ZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlU2l6ZVByb3BzLCB1c2VTaXplIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NpemUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgcmVmLCB0b1JlZiwgd2F0Y2hFZmZlY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVlByb2dyZXNzQ2lyY3VsYXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGJnQ29sb3I6IFN0cmluZyxcbiAgY29sb3I6IFN0cmluZyxcbiAgaW5kZXRlcm1pbmF0ZTogW0Jvb2xlYW4sIFN0cmluZ10sXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDBcbiAgfSxcbiAgcm90YXRlOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAwXG4gIH0sXG4gIHdpZHRoOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiA0XG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlU2l6ZVByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcyh7XG4gICAgdGFnOiAnZGl2J1xuICB9KSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZQcm9ncmVzc0NpcmN1bGFyJyk7XG5leHBvcnQgY29uc3QgVlByb2dyZXNzQ2lyY3VsYXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlByb2dyZXNzQ2lyY3VsYXInLFxuICBwcm9wczogbWFrZVZQcm9ncmVzc0NpcmN1bGFyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBNQUdJQ19SQURJVVNfQ09OU1RBTlQgPSAyMDtcbiAgICBjb25zdCBDSVJDVU1GRVJFTkNFID0gMiAqIE1hdGguUEkgKiBNQUdJQ19SQURJVVNfQ09OU1RBTlQ7XG4gICAgY29uc3Qgcm9vdCA9IHJlZigpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNpemVDbGFzc2VzLFxuICAgICAgc2l6ZVN0eWxlc1xuICAgIH0gPSB1c2VTaXplKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcih0b1JlZihwcm9wcywgJ2NvbG9yJykpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRleHRDb2xvckNsYXNzZXM6IHVuZGVybGF5Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzOiB1bmRlcmxheUNvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcih0b1JlZihwcm9wcywgJ2JnQ29sb3InKSk7XG4gICAgY29uc3Qge1xuICAgICAgaW50ZXJzZWN0aW9uUmVmLFxuICAgICAgaXNJbnRlcnNlY3RpbmdcbiAgICB9ID0gdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKTtcbiAgICBjb25zdCB7XG4gICAgICByZXNpemVSZWYsXG4gICAgICBjb250ZW50UmVjdFxuICAgIH0gPSB1c2VSZXNpemVPYnNlcnZlcigpO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRWYWx1ZSA9IGNvbXB1dGVkKCgpID0+IE1hdGgubWF4KDAsIE1hdGgubWluKDEwMCwgcGFyc2VGbG9hdChwcm9wcy5tb2RlbFZhbHVlKSkpKTtcbiAgICBjb25zdCB3aWR0aCA9IGNvbXB1dGVkKCgpID0+IE51bWJlcihwcm9wcy53aWR0aCkpO1xuICAgIGNvbnN0IHNpemUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICAvLyBHZXQgc2l6ZSBmcm9tIGVsZW1lbnQgaWYgc2l6ZSBwcm9wIHZhbHVlIGlzIHNtYWxsLCBsYXJnZSBldGNcbiAgICAgIHJldHVybiBzaXplU3R5bGVzLnZhbHVlID8gTnVtYmVyKHByb3BzLnNpemUpIDogY29udGVudFJlY3QudmFsdWUgPyBjb250ZW50UmVjdC52YWx1ZS53aWR0aCA6IE1hdGgubWF4KHdpZHRoLnZhbHVlLCAzMik7XG4gICAgfSk7XG4gICAgY29uc3QgZGlhbWV0ZXIgPSBjb21wdXRlZCgoKSA9PiBNQUdJQ19SQURJVVNfQ09OU1RBTlQgLyAoMSAtIHdpZHRoLnZhbHVlIC8gc2l6ZS52YWx1ZSkgKiAyKTtcbiAgICBjb25zdCBzdHJva2VXaWR0aCA9IGNvbXB1dGVkKCgpID0+IHdpZHRoLnZhbHVlIC8gc2l6ZS52YWx1ZSAqIGRpYW1ldGVyLnZhbHVlKTtcbiAgICBjb25zdCBzdHJva2VEYXNoT2Zmc2V0ID0gY29tcHV0ZWQoKCkgPT4gY29udmVydFRvVW5pdCgoMTAwIC0gbm9ybWFsaXplZFZhbHVlLnZhbHVlKSAvIDEwMCAqIENJUkNVTUZFUkVOQ0UpKTtcbiAgICB3YXRjaEVmZmVjdCgoKSA9PiB7XG4gICAgICBpbnRlcnNlY3Rpb25SZWYudmFsdWUgPSByb290LnZhbHVlO1xuICAgICAgcmVzaXplUmVmLnZhbHVlID0gcm9vdC52YWx1ZTtcbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJyZWZcIjogcm9vdCxcbiAgICAgIFwiY2xhc3NcIjogWyd2LXByb2dyZXNzLWNpcmN1bGFyJywge1xuICAgICAgICAndi1wcm9ncmVzcy1jaXJjdWxhci0taW5kZXRlcm1pbmF0ZSc6ICEhcHJvcHMuaW5kZXRlcm1pbmF0ZSxcbiAgICAgICAgJ3YtcHJvZ3Jlc3MtY2lyY3VsYXItLXZpc2libGUnOiBpc0ludGVyc2VjdGluZy52YWx1ZSxcbiAgICAgICAgJ3YtcHJvZ3Jlc3MtY2lyY3VsYXItLWRpc2FibGUtc2hyaW5rJzogcHJvcHMuaW5kZXRlcm1pbmF0ZSA9PT0gJ2Rpc2FibGUtc2hyaW5rJ1xuICAgICAgfSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBzaXplQ2xhc3Nlcy52YWx1ZSwgdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBbc2l6ZVN0eWxlcy52YWx1ZSwgdGV4dENvbG9yU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV0sXG4gICAgICBcInJvbGVcIjogXCJwcm9ncmVzc2JhclwiLFxuICAgICAgXCJhcmlhLXZhbHVlbWluXCI6IFwiMFwiLFxuICAgICAgXCJhcmlhLXZhbHVlbWF4XCI6IFwiMTAwXCIsXG4gICAgICBcImFyaWEtdmFsdWVub3dcIjogcHJvcHMuaW5kZXRlcm1pbmF0ZSA/IHVuZGVmaW5lZCA6IG5vcm1hbGl6ZWRWYWx1ZS52YWx1ZVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtfY3JlYXRlVk5vZGUoXCJzdmdcIiwge1xuICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICB0cmFuc2Zvcm06IGByb3RhdGUoY2FsYygtOTBkZWcgKyAke051bWJlcihwcm9wcy5yb3RhdGUpfWRlZykpYFxuICAgICAgICB9LFxuICAgICAgICBcInhtbG5zXCI6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICAgICAgXCJ2aWV3Qm94XCI6IGAwIDAgJHtkaWFtZXRlci52YWx1ZX0gJHtkaWFtZXRlci52YWx1ZX1gXG4gICAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiY2lyY2xlXCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtcHJvZ3Jlc3MtY2lyY3VsYXJfX3VuZGVybGF5JywgdW5kZXJsYXlDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgICBcInN0eWxlXCI6IHVuZGVybGF5Q29sb3JTdHlsZXMudmFsdWUsXG4gICAgICAgIFwiZmlsbFwiOiBcInRyYW5zcGFyZW50XCIsXG4gICAgICAgIFwiY3hcIjogXCI1MCVcIixcbiAgICAgICAgXCJjeVwiOiBcIjUwJVwiLFxuICAgICAgICBcInJcIjogTUFHSUNfUkFESVVTX0NPTlNUQU5ULFxuICAgICAgICBcInN0cm9rZS13aWR0aFwiOiBzdHJva2VXaWR0aC52YWx1ZSxcbiAgICAgICAgXCJzdHJva2UtZGFzaGFycmF5XCI6IENJUkNVTUZFUkVOQ0UsXG4gICAgICAgIFwic3Ryb2tlLWRhc2hvZmZzZXRcIjogMFxuICAgICAgfSwgbnVsbCksIF9jcmVhdGVWTm9kZShcImNpcmNsZVwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LXByb2dyZXNzLWNpcmN1bGFyX19vdmVybGF5XCIsXG4gICAgICAgIFwiZmlsbFwiOiBcInRyYW5zcGFyZW50XCIsXG4gICAgICAgIFwiY3hcIjogXCI1MCVcIixcbiAgICAgICAgXCJjeVwiOiBcIjUwJVwiLFxuICAgICAgICBcInJcIjogTUFHSUNfUkFESVVTX0NPTlNUQU5ULFxuICAgICAgICBcInN0cm9rZS13aWR0aFwiOiBzdHJva2VXaWR0aC52YWx1ZSxcbiAgICAgICAgXCJzdHJva2UtZGFzaGFycmF5XCI6IENJUkNVTUZFUkVOQ0UsXG4gICAgICAgIFwic3Ryb2tlLWRhc2hvZmZzZXRcIjogc3Ryb2tlRGFzaE9mZnNldC52YWx1ZVxuICAgICAgfSwgbnVsbCldKSwgc2xvdHMuZGVmYXVsdCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi1wcm9ncmVzcy1jaXJjdWxhcl9fY29udGVudFwiXG4gICAgICB9LCBbc2xvdHMuZGVmYXVsdCh7XG4gICAgICAgIHZhbHVlOiBub3JtYWxpemVkVmFsdWUudmFsdWVcbiAgICAgIH0pXSldXG4gICAgfSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WUHJvZ3Jlc3NDaXJjdWxhci5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gXCIuL2xvY2FsZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBwYXJzZUFuY2hvciwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5jb25zdCBvcHBvc2l0ZU1hcCA9IHtcbiAgY2VudGVyOiAnY2VudGVyJyxcbiAgdG9wOiAnYm90dG9tJyxcbiAgYm90dG9tOiAndG9wJyxcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0J1xufTtcbmV4cG9ydCBjb25zdCBtYWtlTG9jYXRpb25Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGxvY2F0aW9uOiBTdHJpbmdcbn0sICdsb2NhdGlvbicpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxvY2F0aW9uKHByb3BzKSB7XG4gIGxldCBvcHBvc2l0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gIGxldCBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgY29uc3Qge1xuICAgIGlzUnRsXG4gIH0gPSB1c2VSdGwoKTtcbiAgY29uc3QgbG9jYXRpb25TdHlsZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKCFwcm9wcy5sb2NhdGlvbikgcmV0dXJuIHt9O1xuICAgIGNvbnN0IHtcbiAgICAgIHNpZGUsXG4gICAgICBhbGlnblxuICAgIH0gPSBwYXJzZUFuY2hvcihwcm9wcy5sb2NhdGlvbi5zcGxpdCgnICcpLmxlbmd0aCA+IDEgPyBwcm9wcy5sb2NhdGlvbiA6IGAke3Byb3BzLmxvY2F0aW9ufSBjZW50ZXJgLCBpc1J0bC52YWx1ZSk7XG4gICAgZnVuY3Rpb24gZ2V0T2Zmc2V0KHNpZGUpIHtcbiAgICAgIHJldHVybiBvZmZzZXQgPyBvZmZzZXQoc2lkZSkgOiAwO1xuICAgIH1cbiAgICBjb25zdCBzdHlsZXMgPSB7fTtcbiAgICBpZiAoc2lkZSAhPT0gJ2NlbnRlcicpIHtcbiAgICAgIGlmIChvcHBvc2l0ZSkgc3R5bGVzW29wcG9zaXRlTWFwW3NpZGVdXSA9IGBjYWxjKDEwMCUgLSAke2dldE9mZnNldChzaWRlKX1weClgO2Vsc2Ugc3R5bGVzW3NpZGVdID0gMDtcbiAgICB9XG4gICAgaWYgKGFsaWduICE9PSAnY2VudGVyJykge1xuICAgICAgaWYgKG9wcG9zaXRlKSBzdHlsZXNbb3Bwb3NpdGVNYXBbYWxpZ25dXSA9IGBjYWxjKDEwMCUgLSAke2dldE9mZnNldChhbGlnbil9cHgpYDtlbHNlIHN0eWxlc1thbGlnbl0gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc2lkZSA9PT0gJ2NlbnRlcicpIHN0eWxlcy50b3AgPSBzdHlsZXMubGVmdCA9ICc1MCUnO2Vsc2Uge1xuICAgICAgICBzdHlsZXNbe1xuICAgICAgICAgIHRvcDogJ2xlZnQnLFxuICAgICAgICAgIGJvdHRvbTogJ2xlZnQnLFxuICAgICAgICAgIGxlZnQ6ICd0b3AnLFxuICAgICAgICAgIHJpZ2h0OiAndG9wJ1xuICAgICAgICB9W3NpZGVdXSA9ICc1MCUnO1xuICAgICAgfVxuICAgICAgc3R5bGVzLnRyYW5zZm9ybSA9IHtcbiAgICAgICAgdG9wOiAndHJhbnNsYXRlWCgtNTAlKScsXG4gICAgICAgIGJvdHRvbTogJ3RyYW5zbGF0ZVgoLTUwJSknLFxuICAgICAgICBsZWZ0OiAndHJhbnNsYXRlWSgtNTAlKScsXG4gICAgICAgIHJpZ2h0OiAndHJhbnNsYXRlWSgtNTAlKScsXG4gICAgICAgIGNlbnRlcjogJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKSdcbiAgICAgIH1bc2lkZV07XG4gICAgfVxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGxvY2F0aW9uU3R5bGVzXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2NhdGlvbi5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZQcm9ncmVzc0xpbmVhci5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciwgdXNlVGV4dENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHVzZUludGVyc2VjdGlvbk9ic2VydmVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ludGVyc2VjdGlvbk9ic2VydmVyLm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IG1ha2VMb2NhdGlvblByb3BzLCB1c2VMb2NhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhdGlvbi5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgVHJhbnNpdGlvbiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWUHJvZ3Jlc3NMaW5lYXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGFic29sdXRlOiBCb29sZWFuLFxuICBhY3RpdmU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgYmdDb2xvcjogU3RyaW5nLFxuICBiZ09wYWNpdHk6IFtOdW1iZXIsIFN0cmluZ10sXG4gIGJ1ZmZlclZhbHVlOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAwXG4gIH0sXG4gIGNsaWNrYWJsZTogQm9vbGVhbixcbiAgY29sb3I6IFN0cmluZyxcbiAgaGVpZ2h0OiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiA0XG4gIH0sXG4gIGluZGV0ZXJtaW5hdGU6IEJvb2xlYW4sXG4gIG1heDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMTAwXG4gIH0sXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDBcbiAgfSxcbiAgcmV2ZXJzZTogQm9vbGVhbixcbiAgc3RyZWFtOiBCb29sZWFuLFxuICBzdHJpcGVkOiBCb29sZWFuLFxuICByb3VuZGVkQmFyOiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUxvY2F0aW9uUHJvcHMoe1xuICAgIGxvY2F0aW9uOiAndG9wJ1xuICB9KSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZQcm9ncmVzc0xpbmVhcicpO1xuZXhwb3J0IGNvbnN0IFZQcm9ncmVzc0xpbmVhciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWUHJvZ3Jlc3NMaW5lYXInLFxuICBwcm9wczogbWFrZVZQcm9ncmVzc0xpbmVhclByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHByb2dyZXNzID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzUnRsLFxuICAgICAgcnRsQ2xhc3Nlc1xuICAgIH0gPSB1c2VSdGwoKTtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBsb2NhdGlvblN0eWxlc1xuICAgIH0gPSB1c2VMb2NhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgdGV4dENvbG9yQ2xhc3NlcyxcbiAgICAgIHRleHRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VUZXh0Q29sb3IocHJvcHMsICdjb2xvcicpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKGNvbXB1dGVkKCgpID0+IHByb3BzLmJnQ29sb3IgfHwgcHJvcHMuY29sb3IpKTtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzOiBiYXJDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXM6IGJhckNvbG9yU3R5bGVzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcihwcm9wcywgJ2NvbG9yJyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgaW50ZXJzZWN0aW9uUmVmLFxuICAgICAgaXNJbnRlcnNlY3RpbmdcbiAgICB9ID0gdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKTtcbiAgICBjb25zdCBtYXggPSBjb21wdXRlZCgoKSA9PiBwYXJzZUludChwcm9wcy5tYXgsIDEwKSk7XG4gICAgY29uc3QgaGVpZ2h0ID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VJbnQocHJvcHMuaGVpZ2h0LCAxMCkpO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRCdWZmZXIgPSBjb21wdXRlZCgoKSA9PiBwYXJzZUZsb2F0KHByb3BzLmJ1ZmZlclZhbHVlKSAvIG1heC52YWx1ZSAqIDEwMCk7XG4gICAgY29uc3Qgbm9ybWFsaXplZFZhbHVlID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VGbG9hdChwcm9ncmVzcy52YWx1ZSkgLyBtYXgudmFsdWUgKiAxMDApO1xuICAgIGNvbnN0IGlzUmV2ZXJzZWQgPSBjb21wdXRlZCgoKSA9PiBpc1J0bC52YWx1ZSAhPT0gcHJvcHMucmV2ZXJzZSk7XG4gICAgY29uc3QgdHJhbnNpdGlvbiA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmluZGV0ZXJtaW5hdGUgPyAnZmFkZS10cmFuc2l0aW9uJyA6ICdzbGlkZS14LXRyYW5zaXRpb24nKTtcbiAgICBjb25zdCBvcGFjaXR5ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLmJnT3BhY2l0eSA9PSBudWxsID8gcHJvcHMuYmdPcGFjaXR5IDogcGFyc2VGbG9hdChwcm9wcy5iZ09wYWNpdHkpO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICAgIGlmICghaW50ZXJzZWN0aW9uUmVmLnZhbHVlKSByZXR1cm47XG4gICAgICBjb25zdCB7XG4gICAgICAgIGxlZnQsXG4gICAgICAgIHJpZ2h0LFxuICAgICAgICB3aWR0aFxuICAgICAgfSA9IGludGVyc2VjdGlvblJlZi52YWx1ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gaXNSZXZlcnNlZC52YWx1ZSA/IHdpZHRoIC0gZS5jbGllbnRYICsgKHJpZ2h0IC0gd2lkdGgpIDogZS5jbGllbnRYIC0gbGVmdDtcbiAgICAgIHByb2dyZXNzLnZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSAvIHdpZHRoICogbWF4LnZhbHVlKTtcbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgIFwicmVmXCI6IGludGVyc2VjdGlvblJlZixcbiAgICAgIFwiY2xhc3NcIjogWyd2LXByb2dyZXNzLWxpbmVhcicsIHtcbiAgICAgICAgJ3YtcHJvZ3Jlc3MtbGluZWFyLS1hYnNvbHV0ZSc6IHByb3BzLmFic29sdXRlLFxuICAgICAgICAndi1wcm9ncmVzcy1saW5lYXItLWFjdGl2ZSc6IHByb3BzLmFjdGl2ZSAmJiBpc0ludGVyc2VjdGluZy52YWx1ZSxcbiAgICAgICAgJ3YtcHJvZ3Jlc3MtbGluZWFyLS1yZXZlcnNlJzogaXNSZXZlcnNlZC52YWx1ZSxcbiAgICAgICAgJ3YtcHJvZ3Jlc3MtbGluZWFyLS1yb3VuZGVkJzogcHJvcHMucm91bmRlZCxcbiAgICAgICAgJ3YtcHJvZ3Jlc3MtbGluZWFyLS1yb3VuZGVkLWJhcic6IHByb3BzLnJvdW5kZWRCYXIsXG4gICAgICAgICd2LXByb2dyZXNzLWxpbmVhci0tc3RyaXBlZCc6IHByb3BzLnN0cmlwZWRcbiAgICAgIH0sIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCB0aGVtZUNsYXNzZXMudmFsdWUsIHJ0bENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW3tcbiAgICAgICAgYm90dG9tOiBwcm9wcy5sb2NhdGlvbiA9PT0gJ2JvdHRvbScgPyAwIDogdW5kZWZpbmVkLFxuICAgICAgICB0b3A6IHByb3BzLmxvY2F0aW9uID09PSAndG9wJyA/IDAgOiB1bmRlZmluZWQsXG4gICAgICAgIGhlaWdodDogcHJvcHMuYWN0aXZlID8gY29udmVydFRvVW5pdChoZWlnaHQudmFsdWUpIDogMCxcbiAgICAgICAgJy0tdi1wcm9ncmVzcy1saW5lYXItaGVpZ2h0JzogY29udmVydFRvVW5pdChoZWlnaHQudmFsdWUpLFxuICAgICAgICAuLi5sb2NhdGlvblN0eWxlcy52YWx1ZVxuICAgICAgfSwgcHJvcHMuc3R5bGVdLFxuICAgICAgXCJyb2xlXCI6IFwicHJvZ3Jlc3NiYXJcIixcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogcHJvcHMuYWN0aXZlID8gJ2ZhbHNlJyA6ICd0cnVlJyxcbiAgICAgIFwiYXJpYS12YWx1ZW1pblwiOiBcIjBcIixcbiAgICAgIFwiYXJpYS12YWx1ZW1heFwiOiBwcm9wcy5tYXgsXG4gICAgICBcImFyaWEtdmFsdWVub3dcIjogcHJvcHMuaW5kZXRlcm1pbmF0ZSA/IHVuZGVmaW5lZCA6IG5vcm1hbGl6ZWRWYWx1ZS52YWx1ZSxcbiAgICAgIFwib25DbGlja1wiOiBwcm9wcy5jbGlja2FibGUgJiYgaGFuZGxlQ2xpY2tcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbcHJvcHMuc3RyZWFtICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwic3RyZWFtXCIsXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXByb2dyZXNzLWxpbmVhcl9fc3RyZWFtJywgdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICAgIC4uLnRleHRDb2xvclN0eWxlcy52YWx1ZSxcbiAgICAgICAgICBbaXNSZXZlcnNlZC52YWx1ZSA/ICdsZWZ0JyA6ICdyaWdodCddOiBjb252ZXJ0VG9Vbml0KC1oZWlnaHQudmFsdWUpLFxuICAgICAgICAgIGJvcmRlclRvcDogYCR7Y29udmVydFRvVW5pdChoZWlnaHQudmFsdWUgLyAyKX0gZG90dGVkYCxcbiAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5LnZhbHVlLFxuICAgICAgICAgIHRvcDogYGNhbGMoNTAlIC0gJHtjb252ZXJ0VG9Vbml0KGhlaWdodC52YWx1ZSAvIDQpfSlgLFxuICAgICAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KDEwMCAtIG5vcm1hbGl6ZWRCdWZmZXIudmFsdWUsICclJyksXG4gICAgICAgICAgJy0tdi1wcm9ncmVzcy1saW5lYXItc3RyZWFtLXRvJzogY29udmVydFRvVW5pdChoZWlnaHQudmFsdWUgKiAoaXNSZXZlcnNlZC52YWx1ZSA/IDEgOiAtMSkpXG4gICAgICAgIH1cbiAgICAgIH0sIG51bGwpLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1wcm9ncmVzcy1saW5lYXJfX2JhY2tncm91bmQnLCBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLnZhbHVlXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlLCB7XG4gICAgICAgICAgb3BhY2l0eTogb3BhY2l0eS52YWx1ZSxcbiAgICAgICAgICB3aWR0aDogY29udmVydFRvVW5pdCghcHJvcHMuc3RyZWFtID8gMTAwIDogbm9ybWFsaXplZEJ1ZmZlci52YWx1ZSwgJyUnKVxuICAgICAgICB9XVxuICAgICAgfSwgbnVsbCksIF9jcmVhdGVWTm9kZShUcmFuc2l0aW9uLCB7XG4gICAgICAgIFwibmFtZVwiOiB0cmFuc2l0aW9uLnZhbHVlXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFshcHJvcHMuaW5kZXRlcm1pbmF0ZSA/IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBbJ3YtcHJvZ3Jlc3MtbGluZWFyX19kZXRlcm1pbmF0ZScsIGJhckNvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgICAgXCJzdHlsZVwiOiBbYmFyQ29sb3JTdHlsZXMudmFsdWUsIHtcbiAgICAgICAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KG5vcm1hbGl6ZWRWYWx1ZS52YWx1ZSwgJyUnKVxuICAgICAgICAgIH1dXG4gICAgICAgIH0sIG51bGwpIDogX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1wcm9ncmVzcy1saW5lYXJfX2luZGV0ZXJtaW5hdGVcIlxuICAgICAgICB9LCBbWydsb25nJywgJ3Nob3J0J10ubWFwKGJhciA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwia2V5XCI6IGJhcixcbiAgICAgICAgICBcImNsYXNzXCI6IFsndi1wcm9ncmVzcy1saW5lYXJfX2luZGV0ZXJtaW5hdGUnLCBiYXIsIGJhckNvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgICAgXCJzdHlsZVwiOiBiYXJDb2xvclN0eWxlcy52YWx1ZVxuICAgICAgICB9LCBudWxsKSldKV1cbiAgICAgIH0pLCBzbG90cy5kZWZhdWx0ICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LXByb2dyZXNzLWxpbmVhcl9fY29udGVudFwiXG4gICAgICB9LCBbc2xvdHMuZGVmYXVsdCh7XG4gICAgICAgIHZhbHVlOiBub3JtYWxpemVkVmFsdWUudmFsdWUsXG4gICAgICAgIGJ1ZmZlcjogbm9ybWFsaXplZEJ1ZmZlci52YWx1ZVxuICAgICAgfSldKV1cbiAgICB9KSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZQcm9ncmVzc0xpbmVhci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlByb2dyZXNzTGluZWFyIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvVlByb2dyZXNzTGluZWFyL2luZGV4Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZU5hbWUsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuLy8gQ29tcG9zYWJsZXNcbmV4cG9ydCBjb25zdCBtYWtlTG9hZGVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBsb2FkaW5nOiBbQm9vbGVhbiwgU3RyaW5nXVxufSwgJ2xvYWRlcicpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxvYWRlcihwcm9wcykge1xuICBsZXQgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZ2V0Q3VycmVudEluc3RhbmNlTmFtZSgpO1xuICBjb25zdCBsb2FkZXJDbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICBbYCR7bmFtZX0tLWxvYWRpbmdgXTogcHJvcHMubG9hZGluZ1xuICB9KSk7XG4gIHJldHVybiB7XG4gICAgbG9hZGVyQ2xhc3Nlc1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIExvYWRlclNsb3QocHJvcHMsIF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzbG90c1xuICB9ID0gX3JlZjtcbiAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgXCJjbGFzc1wiOiBgJHtwcm9wcy5uYW1lfV9fbG9hZGVyYFxuICB9LCBbc2xvdHMuZGVmYXVsdD8uKHtcbiAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgaXNBY3RpdmU6IHByb3BzLmFjdGl2ZVxuICB9KSB8fCBfY3JlYXRlVk5vZGUoVlByb2dyZXNzTGluZWFyLCB7XG4gICAgXCJhY3RpdmVcIjogcHJvcHMuYWN0aXZlLFxuICAgIFwiY29sb3JcIjogcHJvcHMuY29sb3IsXG4gICAgXCJoZWlnaHRcIjogXCIyXCIsXG4gICAgXCJpbmRldGVybWluYXRlXCI6IHRydWVcbiAgfSwgbnVsbCldKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvYWRlci5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2VOYW1lLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IHBvc2l0aW9uVmFsdWVzID0gWydzdGF0aWMnLCAncmVsYXRpdmUnLCAnZml4ZWQnLCAnYWJzb2x1dGUnLCAnc3RpY2t5J107XG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VQb3NpdGlvblByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgcG9zaXRpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgdmFsaWRhdG9yOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL3YgPT4gcG9zaXRpb25WYWx1ZXMuaW5jbHVkZXModilcbiAgfVxufSwgJ3Bvc2l0aW9uJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlUG9zaXRpb24ocHJvcHMpIHtcbiAgbGV0IG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGdldEN1cnJlbnRJbnN0YW5jZU5hbWUoKTtcbiAgY29uc3QgcG9zaXRpb25DbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy5wb3NpdGlvbiA/IGAke25hbWV9LS0ke3Byb3BzLnBvc2l0aW9ufWAgOiB1bmRlZmluZWQ7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uQ2xhc3Nlc1xuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zaXRpb24ubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG5leHRUaWNrLCBvblNjb3BlRGlzcG9zZSwgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZSwgaGFzRXZlbnQsIElOX0JST1dTRVIsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJvdXRlKCkge1xuICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgndXNlUm91dGUnKTtcbiAgcmV0dXJuIGNvbXB1dGVkKCgpID0+IHZtPy5wcm94eT8uJHJvdXRlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZXIoKSB7XG4gIHJldHVybiBnZXRDdXJyZW50SW5zdGFuY2UoJ3VzZVJvdXRlcicpPy5wcm94eT8uJHJvdXRlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VMaW5rKHByb3BzLCBhdHRycykge1xuICBjb25zdCBSb3V0ZXJMaW5rID0gcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQoJ1JvdXRlckxpbmsnKTtcbiAgY29uc3QgaXNMaW5rID0gY29tcHV0ZWQoKCkgPT4gISEocHJvcHMuaHJlZiB8fCBwcm9wcy50bykpO1xuICBjb25zdCBpc0NsaWNrYWJsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gaXNMaW5rPy52YWx1ZSB8fCBoYXNFdmVudChhdHRycywgJ2NsaWNrJykgfHwgaGFzRXZlbnQocHJvcHMsICdjbGljaycpO1xuICB9KTtcbiAgaWYgKHR5cGVvZiBSb3V0ZXJMaW5rID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB7XG4gICAgICBpc0xpbmssXG4gICAgICBpc0NsaWNrYWJsZSxcbiAgICAgIGhyZWY6IHRvUmVmKHByb3BzLCAnaHJlZicpXG4gICAgfTtcbiAgfVxuICBjb25zdCBsaW5rID0gcHJvcHMudG8gPyBSb3V0ZXJMaW5rLnVzZUxpbmsocHJvcHMpIDogdW5kZWZpbmVkO1xuICByZXR1cm4ge1xuICAgIGlzTGluayxcbiAgICBpc0NsaWNrYWJsZSxcbiAgICByb3V0ZTogbGluaz8ucm91dGUsXG4gICAgbmF2aWdhdGU6IGxpbms/Lm5hdmlnYXRlLFxuICAgIGlzQWN0aXZlOiBsaW5rICYmIGNvbXB1dGVkKCgpID0+IHByb3BzLmV4YWN0ID8gbGluay5pc0V4YWN0QWN0aXZlPy52YWx1ZSA6IGxpbmsuaXNBY3RpdmU/LnZhbHVlKSxcbiAgICBocmVmOiBjb21wdXRlZCgoKSA9PiBwcm9wcy50byA/IGxpbms/LnJvdXRlLnZhbHVlLmhyZWYgOiBwcm9wcy5ocmVmKVxuICB9O1xufVxuZXhwb3J0IGNvbnN0IG1ha2VSb3V0ZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGhyZWY6IFN0cmluZyxcbiAgcmVwbGFjZTogQm9vbGVhbixcbiAgdG86IFtTdHJpbmcsIE9iamVjdF0sXG4gIGV4YWN0OiBCb29sZWFuXG59LCAncm91dGVyJyk7XG5sZXQgaW5UcmFuc2l0aW9uID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gdXNlQmFja0J1dHRvbihyb3V0ZXIsIGNiKSB7XG4gIGxldCBwb3BwZWQgPSBmYWxzZTtcbiAgbGV0IHJlbW92ZUJlZm9yZTtcbiAgbGV0IHJlbW92ZUFmdGVyO1xuICBpZiAoSU5fQlJPV1NFUikge1xuICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIG9uUG9wc3RhdGUpO1xuICAgICAgcmVtb3ZlQmVmb3JlID0gcm91dGVyPy5iZWZvcmVFYWNoKCh0bywgZnJvbSwgbmV4dCkgPT4ge1xuICAgICAgICBpZiAoIWluVHJhbnNpdGlvbikge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcG9wcGVkID8gY2IobmV4dCkgOiBuZXh0KCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBvcHBlZCA/IGNiKG5leHQpIDogbmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIGluVHJhbnNpdGlvbiA9IHRydWU7XG4gICAgICB9KTtcbiAgICAgIHJlbW92ZUFmdGVyID0gcm91dGVyPy5hZnRlckVhY2goKCkgPT4ge1xuICAgICAgICBpblRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9uU2NvcGVEaXNwb3NlKCgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIG9uUG9wc3RhdGUpO1xuICAgICAgcmVtb3ZlQmVmb3JlPy4oKTtcbiAgICAgIHJlbW92ZUFmdGVyPy4oKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBvblBvcHN0YXRlKGUpIHtcbiAgICBpZiAoZS5zdGF0ZT8ucmVwbGFjZWQpIHJldHVybjtcbiAgICBwb3BwZWQgPSB0cnVlO1xuICAgIHNldFRpbWVvdXQoKCkgPT4gcG9wcGVkID0gZmFsc2UpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXIubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgbmV4dFRpY2ssIHdhdGNoIH0gZnJvbSAndnVlJztcblxuLy8gVHlwZXNcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlbGVjdExpbmsobGluaywgc2VsZWN0KSB7XG4gIHdhdGNoKCgpID0+IGxpbmsuaXNBY3RpdmU/LnZhbHVlLCBpc0FjdGl2ZSA9PiB7XG4gICAgaWYgKGxpbmsuaXNMaW5rLnZhbHVlICYmIGlzQWN0aXZlICYmIHNlbGVjdCkge1xuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBzZWxlY3QodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBpbW1lZGlhdGU6IHRydWVcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3RMaW5rLm1qcy5tYXAiLCIvLyBTdHlsZXNcbmltcG9ydCBcIi4vVlJpcHBsZS5jc3NcIjtcblxuLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBpc09iamVjdCwga2V5Q29kZXMgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IHN0b3BTeW1ib2wgPSBTeW1ib2woJ3JpcHBsZVN0b3AnKTtcbmNvbnN0IERFTEFZX1JJUFBMRSA9IDgwO1xuZnVuY3Rpb24gdHJhbnNmb3JtKGVsLCB2YWx1ZSkge1xuICBlbC5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgZWwuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gdmFsdWU7XG59XG5mdW5jdGlvbiBpc1RvdWNoRXZlbnQoZSkge1xuICByZXR1cm4gZS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVG91Y2hFdmVudCc7XG59XG5mdW5jdGlvbiBpc0tleWJvYXJkRXZlbnQoZSkge1xuICByZXR1cm4gZS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnS2V5Ym9hcmRFdmVudCc7XG59XG5jb25zdCBjYWxjdWxhdGUgPSBmdW5jdGlvbiAoZSwgZWwpIHtcbiAgbGV0IHZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgbGV0IGxvY2FsWCA9IDA7XG4gIGxldCBsb2NhbFkgPSAwO1xuICBpZiAoIWlzS2V5Ym9hcmRFdmVudChlKSkge1xuICAgIGNvbnN0IG9mZnNldCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHRhcmdldCA9IGlzVG91Y2hFdmVudChlKSA/IGUudG91Y2hlc1tlLnRvdWNoZXMubGVuZ3RoIC0gMV0gOiBlO1xuICAgIGxvY2FsWCA9IHRhcmdldC5jbGllbnRYIC0gb2Zmc2V0LmxlZnQ7XG4gICAgbG9jYWxZID0gdGFyZ2V0LmNsaWVudFkgLSBvZmZzZXQudG9wO1xuICB9XG4gIGxldCByYWRpdXMgPSAwO1xuICBsZXQgc2NhbGUgPSAwLjM7XG4gIGlmIChlbC5fcmlwcGxlPy5jaXJjbGUpIHtcbiAgICBzY2FsZSA9IDAuMTU7XG4gICAgcmFkaXVzID0gZWwuY2xpZW50V2lkdGggLyAyO1xuICAgIHJhZGl1cyA9IHZhbHVlLmNlbnRlciA/IHJhZGl1cyA6IHJhZGl1cyArIE1hdGguc3FydCgobG9jYWxYIC0gcmFkaXVzKSAqKiAyICsgKGxvY2FsWSAtIHJhZGl1cykgKiogMikgLyA0O1xuICB9IGVsc2Uge1xuICAgIHJhZGl1cyA9IE1hdGguc3FydChlbC5jbGllbnRXaWR0aCAqKiAyICsgZWwuY2xpZW50SGVpZ2h0ICoqIDIpIC8gMjtcbiAgfVxuICBjb25zdCBjZW50ZXJYID0gYCR7KGVsLmNsaWVudFdpZHRoIC0gcmFkaXVzICogMikgLyAyfXB4YDtcbiAgY29uc3QgY2VudGVyWSA9IGAkeyhlbC5jbGllbnRIZWlnaHQgLSByYWRpdXMgKiAyKSAvIDJ9cHhgO1xuICBjb25zdCB4ID0gdmFsdWUuY2VudGVyID8gY2VudGVyWCA6IGAke2xvY2FsWCAtIHJhZGl1c31weGA7XG4gIGNvbnN0IHkgPSB2YWx1ZS5jZW50ZXIgPyBjZW50ZXJZIDogYCR7bG9jYWxZIC0gcmFkaXVzfXB4YDtcbiAgcmV0dXJuIHtcbiAgICByYWRpdXMsXG4gICAgc2NhbGUsXG4gICAgeCxcbiAgICB5LFxuICAgIGNlbnRlclgsXG4gICAgY2VudGVyWVxuICB9O1xufTtcbmNvbnN0IHJpcHBsZXMgPSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG1heC1zdGF0ZW1lbnRzICovXG4gIHNob3coZSwgZWwpIHtcbiAgICBsZXQgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIGlmICghZWw/Ll9yaXBwbGU/LmVuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGNvbnN0IGFuaW1hdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYW5pbWF0aW9uKTtcbiAgICBjb250YWluZXIuY2xhc3NOYW1lID0gJ3YtcmlwcGxlX19jb250YWluZXInO1xuICAgIGlmICh2YWx1ZS5jbGFzcykge1xuICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSArPSBgICR7dmFsdWUuY2xhc3N9YDtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgcmFkaXVzLFxuICAgICAgc2NhbGUsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGNlbnRlclgsXG4gICAgICBjZW50ZXJZXG4gICAgfSA9IGNhbGN1bGF0ZShlLCBlbCwgdmFsdWUpO1xuICAgIGNvbnN0IHNpemUgPSBgJHtyYWRpdXMgKiAyfXB4YDtcbiAgICBhbmltYXRpb24uY2xhc3NOYW1lID0gJ3YtcmlwcGxlX19hbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbi5zdHlsZS53aWR0aCA9IHNpemU7XG4gICAgYW5pbWF0aW9uLnN0eWxlLmhlaWdodCA9IHNpemU7XG4gICAgZWwuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICBjb25zdCBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICBpZiAoY29tcHV0ZWQgJiYgY29tcHV0ZWQucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgICBlbC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICBlbC5kYXRhc2V0LnByZXZpb3VzUG9zaXRpb24gPSAnc3RhdGljJztcbiAgICB9XG4gICAgYW5pbWF0aW9uLmNsYXNzTGlzdC5hZGQoJ3YtcmlwcGxlX19hbmltYXRpb24tLWVudGVyJyk7XG4gICAgYW5pbWF0aW9uLmNsYXNzTGlzdC5hZGQoJ3YtcmlwcGxlX19hbmltYXRpb24tLXZpc2libGUnKTtcbiAgICB0cmFuc2Zvcm0oYW5pbWF0aW9uLCBgdHJhbnNsYXRlKCR7eH0sICR7eX0pIHNjYWxlM2QoJHtzY2FsZX0sJHtzY2FsZX0sJHtzY2FsZX0pYCk7XG4gICAgYW5pbWF0aW9uLmRhdGFzZXQuYWN0aXZhdGVkID0gU3RyaW5nKHBlcmZvcm1hbmNlLm5vdygpKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGFuaW1hdGlvbi5jbGFzc0xpc3QucmVtb3ZlKCd2LXJpcHBsZV9fYW5pbWF0aW9uLS1lbnRlcicpO1xuICAgICAgYW5pbWF0aW9uLmNsYXNzTGlzdC5hZGQoJ3YtcmlwcGxlX19hbmltYXRpb24tLWluJyk7XG4gICAgICB0cmFuc2Zvcm0oYW5pbWF0aW9uLCBgdHJhbnNsYXRlKCR7Y2VudGVyWH0sICR7Y2VudGVyWX0pIHNjYWxlM2QoMSwxLDEpYCk7XG4gICAgfSwgMCk7XG4gIH0sXG4gIGhpZGUoZWwpIHtcbiAgICBpZiAoIWVsPy5fcmlwcGxlPy5lbmFibGVkKSByZXR1cm47XG4gICAgY29uc3QgcmlwcGxlcyA9IGVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3YtcmlwcGxlX19hbmltYXRpb24nKTtcbiAgICBpZiAocmlwcGxlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBjb25zdCBhbmltYXRpb24gPSByaXBwbGVzW3JpcHBsZXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGFuaW1hdGlvbi5kYXRhc2V0LmlzSGlkaW5nKSByZXR1cm47ZWxzZSBhbmltYXRpb24uZGF0YXNldC5pc0hpZGluZyA9ICd0cnVlJztcbiAgICBjb25zdCBkaWZmID0gcGVyZm9ybWFuY2Uubm93KCkgLSBOdW1iZXIoYW5pbWF0aW9uLmRhdGFzZXQuYWN0aXZhdGVkKTtcbiAgICBjb25zdCBkZWxheSA9IE1hdGgubWF4KDI1MCAtIGRpZmYsIDApO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgYW5pbWF0aW9uLmNsYXNzTGlzdC5yZW1vdmUoJ3YtcmlwcGxlX19hbmltYXRpb24tLWluJyk7XG4gICAgICBhbmltYXRpb24uY2xhc3NMaXN0LmFkZCgndi1yaXBwbGVfX2FuaW1hdGlvbi0tb3V0Jyk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29uc3QgcmlwcGxlcyA9IGVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3YtcmlwcGxlX19hbmltYXRpb24nKTtcbiAgICAgICAgaWYgKHJpcHBsZXMubGVuZ3RoID09PSAxICYmIGVsLmRhdGFzZXQucHJldmlvdXNQb3NpdGlvbikge1xuICAgICAgICAgIGVsLnN0eWxlLnBvc2l0aW9uID0gZWwuZGF0YXNldC5wcmV2aW91c1Bvc2l0aW9uO1xuICAgICAgICAgIGRlbGV0ZSBlbC5kYXRhc2V0LnByZXZpb3VzUG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdGlvbi5wYXJlbnROb2RlPy5wYXJlbnROb2RlID09PSBlbCkgZWwucmVtb3ZlQ2hpbGQoYW5pbWF0aW9uLnBhcmVudE5vZGUpO1xuICAgICAgfSwgMzAwKTtcbiAgICB9LCBkZWxheSk7XG4gIH1cbn07XG5mdW5jdGlvbiBpc1JpcHBsZUVuYWJsZWQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgISF2YWx1ZTtcbn1cbmZ1bmN0aW9uIHJpcHBsZVNob3coZSkge1xuICBjb25zdCB2YWx1ZSA9IHt9O1xuICBjb25zdCBlbGVtZW50ID0gZS5jdXJyZW50VGFyZ2V0O1xuICBpZiAoIWVsZW1lbnQ/Ll9yaXBwbGUgfHwgZWxlbWVudC5fcmlwcGxlLnRvdWNoZWQgfHwgZVtzdG9wU3ltYm9sXSkgcmV0dXJuO1xuXG4gIC8vIERvbid0IGFsbG93IHRoZSBldmVudCB0byB0cmlnZ2VyIHJpcHBsZXMgb24gYW55IG90aGVyIGVsZW1lbnRzXG4gIGVbc3RvcFN5bWJvbF0gPSB0cnVlO1xuICBpZiAoaXNUb3VjaEV2ZW50KGUpKSB7XG4gICAgZWxlbWVudC5fcmlwcGxlLnRvdWNoZWQgPSB0cnVlO1xuICAgIGVsZW1lbnQuX3JpcHBsZS5pc1RvdWNoID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJdCdzIHBvc3NpYmxlIGZvciB0b3VjaCBldmVudHMgdG8gZmlyZVxuICAgIC8vIGFzIG1vdXNlIGV2ZW50cyBvbiBBbmRyb2lkL2lPUywgdGhpc1xuICAgIC8vIHdpbGwgc2tpcCB0aGUgZXZlbnQgY2FsbCBpZiBpdCBoYXNcbiAgICAvLyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCBhcyB0b3VjaFxuICAgIGlmIChlbGVtZW50Ll9yaXBwbGUuaXNUb3VjaCkgcmV0dXJuO1xuICB9XG4gIHZhbHVlLmNlbnRlciA9IGVsZW1lbnQuX3JpcHBsZS5jZW50ZXJlZCB8fCBpc0tleWJvYXJkRXZlbnQoZSk7XG4gIGlmIChlbGVtZW50Ll9yaXBwbGUuY2xhc3MpIHtcbiAgICB2YWx1ZS5jbGFzcyA9IGVsZW1lbnQuX3JpcHBsZS5jbGFzcztcbiAgfVxuICBpZiAoaXNUb3VjaEV2ZW50KGUpKSB7XG4gICAgLy8gYWxyZWFkeSBxdWV1ZWQgdGhhdCBzaG93cyBvciBoaWRlcyB0aGUgcmlwcGxlXG4gICAgaWYgKGVsZW1lbnQuX3JpcHBsZS5zaG93VGltZXJDb21taXQpIHJldHVybjtcbiAgICBlbGVtZW50Ll9yaXBwbGUuc2hvd1RpbWVyQ29tbWl0ID0gKCkgPT4ge1xuICAgICAgcmlwcGxlcy5zaG93KGUsIGVsZW1lbnQsIHZhbHVlKTtcbiAgICB9O1xuICAgIGVsZW1lbnQuX3JpcHBsZS5zaG93VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoZWxlbWVudD8uX3JpcHBsZT8uc2hvd1RpbWVyQ29tbWl0KSB7XG4gICAgICAgIGVsZW1lbnQuX3JpcHBsZS5zaG93VGltZXJDb21taXQoKTtcbiAgICAgICAgZWxlbWVudC5fcmlwcGxlLnNob3dUaW1lckNvbW1pdCA9IG51bGw7XG4gICAgICB9XG4gICAgfSwgREVMQVlfUklQUExFKTtcbiAgfSBlbHNlIHtcbiAgICByaXBwbGVzLnNob3coZSwgZWxlbWVudCwgdmFsdWUpO1xuICB9XG59XG5mdW5jdGlvbiByaXBwbGVTdG9wKGUpIHtcbiAgZVtzdG9wU3ltYm9sXSA9IHRydWU7XG59XG5mdW5jdGlvbiByaXBwbGVIaWRlKGUpIHtcbiAgY29uc3QgZWxlbWVudCA9IGUuY3VycmVudFRhcmdldDtcbiAgaWYgKCFlbGVtZW50Py5fcmlwcGxlKSByZXR1cm47XG4gIHdpbmRvdy5jbGVhclRpbWVvdXQoZWxlbWVudC5fcmlwcGxlLnNob3dUaW1lcik7XG5cbiAgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VycyBiZWZvcmUgdGhlIHNob3cgdGltZXIgaXMgdHJpZ2dlcmVkLlxuICAvLyBXZSBzdGlsbCB3YW50IHRvIHNob3cgcmlwcGxlIGVmZmVjdC5cbiAgaWYgKGUudHlwZSA9PT0gJ3RvdWNoZW5kJyAmJiBlbGVtZW50Ll9yaXBwbGUuc2hvd1RpbWVyQ29tbWl0KSB7XG4gICAgZWxlbWVudC5fcmlwcGxlLnNob3dUaW1lckNvbW1pdCgpO1xuICAgIGVsZW1lbnQuX3JpcHBsZS5zaG93VGltZXJDb21taXQgPSBudWxsO1xuXG4gICAgLy8gcmUtcXVldWUgcmlwcGxlIGhpZGluZ1xuICAgIGVsZW1lbnQuX3JpcHBsZS5zaG93VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICByaXBwbGVIaWRlKGUpO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaWYgKGVsZW1lbnQuX3JpcHBsZSkge1xuICAgICAgZWxlbWVudC5fcmlwcGxlLnRvdWNoZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuICByaXBwbGVzLmhpZGUoZWxlbWVudCk7XG59XG5mdW5jdGlvbiByaXBwbGVDYW5jZWxTaG93KGUpIHtcbiAgY29uc3QgZWxlbWVudCA9IGUuY3VycmVudFRhcmdldDtcbiAgaWYgKCFlbGVtZW50Py5fcmlwcGxlKSByZXR1cm47XG4gIGlmIChlbGVtZW50Ll9yaXBwbGUuc2hvd1RpbWVyQ29tbWl0KSB7XG4gICAgZWxlbWVudC5fcmlwcGxlLnNob3dUaW1lckNvbW1pdCA9IG51bGw7XG4gIH1cbiAgd2luZG93LmNsZWFyVGltZW91dChlbGVtZW50Ll9yaXBwbGUuc2hvd1RpbWVyKTtcbn1cbmxldCBrZXlib2FyZFJpcHBsZSA9IGZhbHNlO1xuZnVuY3Rpb24ga2V5Ym9hcmRSaXBwbGVTaG93KGUpIHtcbiAgaWYgKCFrZXlib2FyZFJpcHBsZSAmJiAoZS5rZXlDb2RlID09PSBrZXlDb2Rlcy5lbnRlciB8fCBlLmtleUNvZGUgPT09IGtleUNvZGVzLnNwYWNlKSkge1xuICAgIGtleWJvYXJkUmlwcGxlID0gdHJ1ZTtcbiAgICByaXBwbGVTaG93KGUpO1xuICB9XG59XG5mdW5jdGlvbiBrZXlib2FyZFJpcHBsZUhpZGUoZSkge1xuICBrZXlib2FyZFJpcHBsZSA9IGZhbHNlO1xuICByaXBwbGVIaWRlKGUpO1xufVxuZnVuY3Rpb24gZm9jdXNSaXBwbGVIaWRlKGUpIHtcbiAgaWYgKGtleWJvYXJkUmlwcGxlKSB7XG4gICAga2V5Ym9hcmRSaXBwbGUgPSBmYWxzZTtcbiAgICByaXBwbGVIaWRlKGUpO1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVSaXBwbGUoZWwsIGJpbmRpbmcsIHdhc0VuYWJsZWQpIHtcbiAgY29uc3Qge1xuICAgIHZhbHVlLFxuICAgIG1vZGlmaWVyc1xuICB9ID0gYmluZGluZztcbiAgY29uc3QgZW5hYmxlZCA9IGlzUmlwcGxlRW5hYmxlZCh2YWx1ZSk7XG4gIGlmICghZW5hYmxlZCkge1xuICAgIHJpcHBsZXMuaGlkZShlbCk7XG4gIH1cbiAgZWwuX3JpcHBsZSA9IGVsLl9yaXBwbGUgPz8ge307XG4gIGVsLl9yaXBwbGUuZW5hYmxlZCA9IGVuYWJsZWQ7XG4gIGVsLl9yaXBwbGUuY2VudGVyZWQgPSBtb2RpZmllcnMuY2VudGVyO1xuICBlbC5fcmlwcGxlLmNpcmNsZSA9IG1vZGlmaWVycy5jaXJjbGU7XG4gIGlmIChpc09iamVjdCh2YWx1ZSkgJiYgdmFsdWUuY2xhc3MpIHtcbiAgICBlbC5fcmlwcGxlLmNsYXNzID0gdmFsdWUuY2xhc3M7XG4gIH1cbiAgaWYgKGVuYWJsZWQgJiYgIXdhc0VuYWJsZWQpIHtcbiAgICBpZiAobW9kaWZpZXJzLnN0b3ApIHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCByaXBwbGVTdG9wLCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgcmlwcGxlU3RvcCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCByaXBwbGVTaG93LCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCByaXBwbGVIaWRlLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgcmlwcGxlQ2FuY2VsU2hvdywge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgcmlwcGxlSGlkZSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgcmlwcGxlU2hvdyk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHJpcHBsZUhpZGUpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCByaXBwbGVIaWRlKTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywga2V5Ym9hcmRSaXBwbGVTaG93KTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGtleWJvYXJkUmlwcGxlSGlkZSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZvY3VzUmlwcGxlSGlkZSk7XG5cbiAgICAvLyBBbmNob3IgdGFncyBjYW4gYmUgZHJhZ2dlZCwgY2F1c2VzIG90aGVyIGhpZGVzIHRvIGZhaWwgLSAjMTUzN1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIHJpcHBsZUhpZGUsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIGlmICghZW5hYmxlZCAmJiB3YXNFbmFibGVkKSB7XG4gICAgcmVtb3ZlTGlzdGVuZXJzKGVsKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKGVsKSB7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHJpcHBsZVNob3cpO1xuICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgcmlwcGxlU2hvdyk7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgcmlwcGxlSGlkZSk7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHJpcHBsZUNhbmNlbFNob3cpO1xuICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHJpcHBsZUhpZGUpO1xuICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgcmlwcGxlSGlkZSk7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCByaXBwbGVIaWRlKTtcbiAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGtleWJvYXJkUmlwcGxlU2hvdyk7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywga2V5Ym9hcmRSaXBwbGVIaWRlKTtcbiAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgcmlwcGxlSGlkZSk7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmb2N1c1JpcHBsZUhpZGUpO1xufVxuZnVuY3Rpb24gbW91bnRlZChlbCwgYmluZGluZykge1xuICB1cGRhdGVSaXBwbGUoZWwsIGJpbmRpbmcsIGZhbHNlKTtcbn1cbmZ1bmN0aW9uIHVubW91bnRlZChlbCkge1xuICBkZWxldGUgZWwuX3JpcHBsZTtcbiAgcmVtb3ZlTGlzdGVuZXJzKGVsKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZWQoZWwsIGJpbmRpbmcpIHtcbiAgaWYgKGJpbmRpbmcudmFsdWUgPT09IGJpbmRpbmcub2xkVmFsdWUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgd2FzRW5hYmxlZCA9IGlzUmlwcGxlRW5hYmxlZChiaW5kaW5nLm9sZFZhbHVlKTtcbiAgdXBkYXRlUmlwcGxlKGVsLCBiaW5kaW5nLCB3YXNFbmFibGVkKTtcbn1cbmV4cG9ydCBjb25zdCBSaXBwbGUgPSB7XG4gIG1vdW50ZWQsXG4gIHVubW91bnRlZCxcbiAgdXBkYXRlZFxufTtcbmV4cG9ydCBkZWZhdWx0IFJpcHBsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCJpbXBvcnQgeyB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQnRuLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQnRuVG9nZ2xlU3ltYm9sIH0gZnJvbSBcIi4uL1ZCdG5Ub2dnbGUvVkJ0blRvZ2dsZS5tanNcIjtcbmltcG9ydCB7IFZEZWZhdWx0c1Byb3ZpZGVyIH0gZnJvbSBcIi4uL1ZEZWZhdWx0c1Byb3ZpZGVyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkljb24gfSBmcm9tIFwiLi4vVkljb24vaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWUHJvZ3Jlc3NDaXJjdWxhciB9IGZyb20gXCIuLi9WUHJvZ3Jlc3NDaXJjdWxhci9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VCb3JkZXJQcm9wcywgdXNlQm9yZGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2JvcmRlci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzLCB1c2VEZW5zaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGltZW5zaW9uUHJvcHMsIHVzZURpbWVuc2lvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaW1lbnNpb25zLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUdyb3VwSXRlbVByb3BzLCB1c2VHcm91cEl0ZW0gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZ3JvdXAubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlTG9hZGVyUHJvcHMsIHVzZUxvYWRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2FkZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlTG9jYXRpb25Qcm9wcywgdXNlTG9jYXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBtYWtlUG9zaXRpb25Qcm9wcywgdXNlUG9zaXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcG9zaXRpb24ubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91dGVyUHJvcHMsIHVzZUxpbmsgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91dGVyLm1qc1wiO1xuaW1wb3J0IHsgdXNlU2VsZWN0TGluayB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zZWxlY3RMaW5rLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNpemVQcm9wcywgdXNlU2l6ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zaXplLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7XG5pbXBvcnQgeyBnZW5PdmVybGF5cywgbWFrZVZhcmlhbnRQcm9wcywgdXNlVmFyaWFudCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy92YXJpYW50Lm1qc1wiOyAvLyBEaXJlY3RpdmVzXG5pbXBvcnQgeyBSaXBwbGUgfSBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9yaXBwbGUvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkJ0blByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWN0aXZlOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgfSxcbiAgc3ltYm9sOiB7XG4gICAgdHlwZTogbnVsbCxcbiAgICBkZWZhdWx0OiBWQnRuVG9nZ2xlU3ltYm9sXG4gIH0sXG4gIGZsYXQ6IEJvb2xlYW4sXG4gIGljb246IFtCb29sZWFuLCBTdHJpbmcsIEZ1bmN0aW9uLCBPYmplY3RdLFxuICBwcmVwZW5kSWNvbjogSWNvblZhbHVlLFxuICBhcHBlbmRJY29uOiBJY29uVmFsdWUsXG4gIGJsb2NrOiBCb29sZWFuLFxuICBzdGFja2VkOiBCb29sZWFuLFxuICByaXBwbGU6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgT2JqZWN0XSxcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIHRleHQ6IFN0cmluZyxcbiAgLi4ubWFrZUJvcmRlclByb3BzKCksXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGVuc2l0eVByb3BzKCksXG4gIC4uLm1ha2VEaW1lbnNpb25Qcm9wcygpLFxuICAuLi5tYWtlRWxldmF0aW9uUHJvcHMoKSxcbiAgLi4ubWFrZUdyb3VwSXRlbVByb3BzKCksXG4gIC4uLm1ha2VMb2FkZXJQcm9wcygpLFxuICAuLi5tYWtlTG9jYXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUG9zaXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VSb3V0ZXJQcm9wcygpLFxuICAuLi5tYWtlU2l6ZVByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcyh7XG4gICAgdGFnOiAnYnV0dG9uJ1xuICB9KSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKSxcbiAgLi4ubWFrZVZhcmlhbnRQcm9wcyh7XG4gICAgdmFyaWFudDogJ2VsZXZhdGVkJ1xuICB9KVxufSwgJ1ZCdG4nKTtcbmV4cG9ydCBjb25zdCBWQnRuID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZCdG4nLFxuICBkaXJlY3RpdmVzOiB7XG4gICAgUmlwcGxlXG4gIH0sXG4gIHByb3BzOiBtYWtlVkJ0blByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ2dyb3VwOnNlbGVjdGVkJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnMsXG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJvcmRlckNsYXNzZXNcbiAgICB9ID0gdXNlQm9yZGVyKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBjb2xvckNsYXNzZXMsXG4gICAgICBjb2xvclN0eWxlcyxcbiAgICAgIHZhcmlhbnRDbGFzc2VzXG4gICAgfSA9IHVzZVZhcmlhbnQocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbnNpdHlDbGFzc2VzXG4gICAgfSA9IHVzZURlbnNpdHkocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRpbWVuc2lvblN0eWxlc1xuICAgIH0gPSB1c2VEaW1lbnNpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbkNsYXNzZXNcbiAgICB9ID0gdXNlRWxldmF0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBsb2FkZXJDbGFzc2VzXG4gICAgfSA9IHVzZUxvYWRlcihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgbG9jYXRpb25TdHlsZXNcbiAgICB9ID0gdXNlTG9jYXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHBvc2l0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VQb3NpdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgc2l6ZUNsYXNzZXMsXG4gICAgICBzaXplU3R5bGVzXG4gICAgfSA9IHVzZVNpemUocHJvcHMpO1xuICAgIGNvbnN0IGdyb3VwID0gdXNlR3JvdXBJdGVtKHByb3BzLCBwcm9wcy5zeW1ib2wsIGZhbHNlKTtcbiAgICBjb25zdCBsaW5rID0gdXNlTGluayhwcm9wcywgYXR0cnMpO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmFjdGl2ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5hY3RpdmU7XG4gICAgICB9XG4gICAgICBpZiAobGluay5pc0xpbmsudmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGxpbmsuaXNBY3RpdmU/LnZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdyb3VwPy5pc1NlbGVjdGVkLnZhbHVlO1xuICAgIH0pO1xuICAgIGNvbnN0IGlzRGlzYWJsZWQgPSBjb21wdXRlZCgoKSA9PiBncm91cD8uZGlzYWJsZWQudmFsdWUgfHwgcHJvcHMuZGlzYWJsZWQpO1xuICAgIGNvbnN0IGlzRWxldmF0ZWQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMudmFyaWFudCA9PT0gJ2VsZXZhdGVkJyAmJiAhKHByb3BzLmRpc2FibGVkIHx8IHByb3BzLmZsYXQgfHwgcHJvcHMuYm9yZGVyKTtcbiAgICB9KTtcbiAgICBjb25zdCB2YWx1ZUF0dHIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMudmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBPYmplY3QocHJvcHMudmFsdWUpID09PSBwcm9wcy52YWx1ZSA/IEpTT04uc3RyaW5naWZ5KHByb3BzLnZhbHVlLCBudWxsLCAwKSA6IHByb3BzLnZhbHVlO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgaWYgKGlzRGlzYWJsZWQudmFsdWUgfHwgbGluay5pc0xpbmsudmFsdWUgJiYgKGUubWV0YUtleSB8fCBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSB8fCBlLmJ1dHRvbiAhPT0gMCB8fCBhdHRycy50YXJnZXQgPT09ICdfYmxhbmsnKSkgcmV0dXJuO1xuICAgICAgbGluay5uYXZpZ2F0ZT8uKGUpO1xuICAgICAgZ3JvdXA/LnRvZ2dsZSgpO1xuICAgIH1cbiAgICB1c2VTZWxlY3RMaW5rKGxpbmssIGdyb3VwPy5zZWxlY3QpO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBUYWcgPSBsaW5rLmlzTGluay52YWx1ZSA/ICdhJyA6IHByb3BzLnRhZztcbiAgICAgIGNvbnN0IGhhc1ByZXBlbmQgPSAhIShwcm9wcy5wcmVwZW5kSWNvbiB8fCBzbG90cy5wcmVwZW5kKTtcbiAgICAgIGNvbnN0IGhhc0FwcGVuZCA9ICEhKHByb3BzLmFwcGVuZEljb24gfHwgc2xvdHMuYXBwZW5kKTtcbiAgICAgIGNvbnN0IGhhc0ljb24gPSAhIShwcm9wcy5pY29uICYmIHByb3BzLmljb24gIT09IHRydWUpO1xuICAgICAgY29uc3QgaGFzQ29sb3IgPSBncm91cD8uaXNTZWxlY3RlZC52YWx1ZSAmJiAoIWxpbmsuaXNMaW5rLnZhbHVlIHx8IGxpbmsuaXNBY3RpdmU/LnZhbHVlKSB8fCAhZ3JvdXAgfHwgbGluay5pc0FjdGl2ZT8udmFsdWU7XG4gICAgICByZXR1cm4gX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShUYWcsIHtcbiAgICAgICAgXCJ0eXBlXCI6IFRhZyA9PT0gJ2EnID8gdW5kZWZpbmVkIDogJ2J1dHRvbicsXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWJ0bicsIGdyb3VwPy5zZWxlY3RlZENsYXNzLnZhbHVlLCB7XG4gICAgICAgICAgJ3YtYnRuLS1hY3RpdmUnOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgICAndi1idG4tLWJsb2NrJzogcHJvcHMuYmxvY2ssXG4gICAgICAgICAgJ3YtYnRuLS1kaXNhYmxlZCc6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICAgICAgJ3YtYnRuLS1lbGV2YXRlZCc6IGlzRWxldmF0ZWQudmFsdWUsXG4gICAgICAgICAgJ3YtYnRuLS1mbGF0JzogcHJvcHMuZmxhdCxcbiAgICAgICAgICAndi1idG4tLWljb24nOiAhIXByb3BzLmljb24sXG4gICAgICAgICAgJ3YtYnRuLS1sb2FkaW5nJzogcHJvcHMubG9hZGluZyxcbiAgICAgICAgICAndi1idG4tLXN0YWNrZWQnOiBwcm9wcy5zdGFja2VkXG4gICAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgYm9yZGVyQ2xhc3Nlcy52YWx1ZSwgaGFzQ29sb3IgPyBjb2xvckNsYXNzZXMudmFsdWUgOiB1bmRlZmluZWQsIGRlbnNpdHlDbGFzc2VzLnZhbHVlLCBlbGV2YXRpb25DbGFzc2VzLnZhbHVlLCBsb2FkZXJDbGFzc2VzLnZhbHVlLCBwb3NpdGlvbkNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCBzaXplQ2xhc3Nlcy52YWx1ZSwgdmFyaWFudENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbaGFzQ29sb3IgPyBjb2xvclN0eWxlcy52YWx1ZSA6IHVuZGVmaW5lZCwgZGltZW5zaW9uU3R5bGVzLnZhbHVlLCBsb2NhdGlvblN0eWxlcy52YWx1ZSwgc2l6ZVN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdLFxuICAgICAgICBcImRpc2FibGVkXCI6IGlzRGlzYWJsZWQudmFsdWUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBcImhyZWZcIjogbGluay5ocmVmLnZhbHVlLFxuICAgICAgICBcIm9uQ2xpY2tcIjogb25DbGljayxcbiAgICAgICAgXCJ2YWx1ZVwiOiB2YWx1ZUF0dHIudmFsdWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW2dlbk92ZXJsYXlzKHRydWUsICd2LWJ0bicpLCAhcHJvcHMuaWNvbiAmJiBoYXNQcmVwZW5kICYmIF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZFwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWJ0bl9fcHJlcGVuZFwiXG4gICAgICAgIH0sIFshc2xvdHMucHJlcGVuZCA/IF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZC1pY29uXCIsXG4gICAgICAgICAgXCJpY29uXCI6IHByb3BzLnByZXBlbmRJY29uXG4gICAgICAgIH0sIG51bGwpIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWRlZmF1bHRzXCIsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiAhcHJvcHMucHJlcGVuZEljb24sXG4gICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICBWSWNvbjoge1xuICAgICAgICAgICAgICBpY29uOiBwcm9wcy5wcmVwZW5kSWNvblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgc2xvdHMucHJlcGVuZCldKSwgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtYnRuX19jb250ZW50XCIsXG4gICAgICAgICAgXCJkYXRhLW5vLWFjdGl2YXRvclwiOiBcIlwiXG4gICAgICAgIH0sIFshc2xvdHMuZGVmYXVsdCAmJiBoYXNJY29uID8gX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJjb250ZW50LWljb25cIixcbiAgICAgICAgICBcImljb25cIjogcHJvcHMuaWNvblxuICAgICAgICB9LCBudWxsKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgIFwia2V5XCI6IFwiY29udGVudC1kZWZhdWx0c1wiLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogIWhhc0ljb24sXG4gICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICBWSWNvbjoge1xuICAgICAgICAgICAgICBpY29uOiBwcm9wcy5pY29uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmRlZmF1bHQ/LigpID8/IHByb3BzLnRleHRdXG4gICAgICAgIH0pXSksICFwcm9wcy5pY29uICYmIGhhc0FwcGVuZCAmJiBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImFwcGVuZFwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWJ0bl9fYXBwZW5kXCJcbiAgICAgICAgfSwgWyFzbG90cy5hcHBlbmQgPyBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICBcImtleVwiOiBcImFwcGVuZC1pY29uXCIsXG4gICAgICAgICAgXCJpY29uXCI6IHByb3BzLmFwcGVuZEljb25cbiAgICAgICAgfSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImFwcGVuZC1kZWZhdWx0c1wiLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogIXByb3BzLmFwcGVuZEljb24sXG4gICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICBWSWNvbjoge1xuICAgICAgICAgICAgICBpY29uOiBwcm9wcy5hcHBlbmRJY29uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBzbG90cy5hcHBlbmQpXSksICEhcHJvcHMubG9hZGluZyAmJiBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImxvYWRlclwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWJ0bl9fbG9hZGVyXCJcbiAgICAgICAgfSwgW3Nsb3RzLmxvYWRlcj8uKCkgPz8gX2NyZWF0ZVZOb2RlKFZQcm9ncmVzc0NpcmN1bGFyLCB7XG4gICAgICAgICAgXCJjb2xvclwiOiB0eXBlb2YgcHJvcHMubG9hZGluZyA9PT0gJ2Jvb2xlYW4nID8gdW5kZWZpbmVkIDogcHJvcHMubG9hZGluZyxcbiAgICAgICAgICBcImluZGV0ZXJtaW5hdGVcIjogdHJ1ZSxcbiAgICAgICAgICBcInNpemVcIjogXCIyM1wiLFxuICAgICAgICAgIFwid2lkdGhcIjogXCIyXCJcbiAgICAgICAgfSwgbnVsbCldKV1cbiAgICAgIH0pLCBbW19yZXNvbHZlRGlyZWN0aXZlKFwicmlwcGxlXCIpLCAhaXNEaXNhYmxlZC52YWx1ZSAmJiBwcm9wcy5yaXBwbGUsIG51bGxdXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZCdG4ubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IG1ha2VWQnRuUHJvcHMsIFZCdG4gfSBmcm9tIFwiLi4vVkJ0bi9WQnRuLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZBcHBCYXJOYXZJY29uUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICAuLi5tYWtlVkJ0blByb3BzKHtcbiAgICBpY29uOiAnJG1lbnUnLFxuICAgIHZhcmlhbnQ6ICd0ZXh0J1xuICB9KVxufSwgJ1ZBcHBCYXJOYXZJY29uJyk7XG5leHBvcnQgY29uc3QgVkFwcEJhck5hdkljb24gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkFwcEJhck5hdkljb24nLFxuICBwcm9wczogbWFrZVZBcHBCYXJOYXZJY29uUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFZCdG4sIF9tZXJnZVByb3BzKHByb3BzLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1hcHAtYmFyLW5hdi1pY29uJ11cbiAgICB9KSwgc2xvdHMpKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkFwcEJhck5hdkljb24ubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IG1ha2VWVG9vbGJhclRpdGxlUHJvcHMsIFZUb29sYmFyVGl0bGUgfSBmcm9tIFwiLi4vVlRvb2xiYXIvVlRvb2xiYXJUaXRsZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBWQXBwQmFyVGl0bGUgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkFwcEJhclRpdGxlJyxcbiAgcHJvcHM6IG1ha2VWVG9vbGJhclRpdGxlUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFZUb29sYmFyVGl0bGUsIF9tZXJnZVByb3BzKHByb3BzLCB7XG4gICAgICBcImNsYXNzXCI6IFwidi1hcHAtYmFyLXRpdGxlXCJcbiAgICB9KSwgc2xvdHMpKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkFwcEJhclRpdGxlLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBWQWxlcnRUaXRsZSA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtYWxlcnQtdGl0bGUnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZBbGVydFRpdGxlLm1qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkFsZXJ0LmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQWxlcnRUaXRsZSB9IGZyb20gXCIuL1ZBbGVydFRpdGxlLm1qc1wiO1xuaW1wb3J0IHsgVkJ0biB9IGZyb20gXCIuLi9WQnRuL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gXCIuLi9WSWNvbi9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVRleHRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzLCB1c2VEZW5zaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGltZW5zaW9uUHJvcHMsIHVzZURpbWVuc2lvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaW1lbnNpb25zLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IG1ha2VMb2NhdGlvblByb3BzLCB1c2VMb2NhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VQb3NpdGlvblByb3BzLCB1c2VQb3NpdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wb3NpdGlvbi5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjtcbmltcG9ydCB7IGdlbk92ZXJsYXlzLCBtYWtlVmFyaWFudFByb3BzLCB1c2VWYXJpYW50IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3ZhcmlhbnQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3QgYWxsb3dlZFR5cGVzID0gWydzdWNjZXNzJywgJ2luZm8nLCAnd2FybmluZycsICdlcnJvciddO1xuZXhwb3J0IGNvbnN0IG1ha2VWQWxlcnRQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGJvcmRlcjoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgIHZhbGlkYXRvcjogdmFsID0+IHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnYm9vbGVhbicgfHwgWyd0b3AnLCAnZW5kJywgJ2JvdHRvbScsICdzdGFydCddLmluY2x1ZGVzKHZhbCk7XG4gICAgfVxuICB9LFxuICBib3JkZXJDb2xvcjogU3RyaW5nLFxuICBjbG9zYWJsZTogQm9vbGVhbixcbiAgY2xvc2VJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckY2xvc2UnXG4gIH0sXG4gIGNsb3NlTGFiZWw6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJyR2dWV0aWZ5LmNsb3NlJ1xuICB9LFxuICBpY29uOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZywgRnVuY3Rpb24sIE9iamVjdF0sXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICBtb2RlbFZhbHVlOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIHByb21pbmVudDogQm9vbGVhbixcbiAgdGl0bGU6IFN0cmluZyxcbiAgdGV4dDogU3RyaW5nLFxuICB0eXBlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHZhbGlkYXRvcjogdmFsID0+IGFsbG93ZWRUeXBlcy5pbmNsdWRlcyh2YWwpXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGVuc2l0eVByb3BzKCksXG4gIC4uLm1ha2VEaW1lbnNpb25Qcm9wcygpLFxuICAuLi5tYWtlRWxldmF0aW9uUHJvcHMoKSxcbiAgLi4ubWFrZUxvY2F0aW9uUHJvcHMoKSxcbiAgLi4ubWFrZVBvc2l0aW9uUHJvcHMoKSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKSxcbiAgLi4ubWFrZVZhcmlhbnRQcm9wcyh7XG4gICAgdmFyaWFudDogJ2ZsYXQnXG4gIH0pXG59LCAnVkFsZXJ0Jyk7XG5leHBvcnQgY29uc3QgVkFsZXJ0ID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZBbGVydCcsXG4gIHByb3BzOiBtYWtlVkFsZXJ0UHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAnY2xpY2s6Y2xvc2UnOiBlID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBlbWl0LFxuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCBpY29uID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmljb24gPT09IGZhbHNlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgaWYgKCFwcm9wcy50eXBlKSByZXR1cm4gcHJvcHMuaWNvbjtcbiAgICAgIHJldHVybiBwcm9wcy5pY29uID8/IGAkJHtwcm9wcy50eXBlfWA7XG4gICAgfSk7XG4gICAgY29uc3QgdmFyaWFudFByb3BzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIGNvbG9yOiBwcm9wcy5jb2xvciA/PyBwcm9wcy50eXBlLFxuICAgICAgdmFyaWFudDogcHJvcHMudmFyaWFudFxuICAgIH0pKTtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBjb2xvckNsYXNzZXMsXG4gICAgICBjb2xvclN0eWxlcyxcbiAgICAgIHZhcmlhbnRDbGFzc2VzXG4gICAgfSA9IHVzZVZhcmlhbnQodmFyaWFudFByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBkZW5zaXR5Q2xhc3Nlc1xuICAgIH0gPSB1c2VEZW5zaXR5KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBkaW1lbnNpb25TdHlsZXNcbiAgICB9ID0gdXNlRGltZW5zaW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgbG9jYXRpb25TdHlsZXNcbiAgICB9ID0gdXNlTG9jYXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHBvc2l0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VQb3NpdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgdGV4dENvbG9yQ2xhc3NlcyxcbiAgICAgIHRleHRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VUZXh0Q29sb3IodG9SZWYocHJvcHMsICdib3JkZXJDb2xvcicpKTtcbiAgICBjb25zdCB7XG4gICAgICB0XG4gICAgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IGNsb3NlUHJvcHMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgJ2FyaWEtbGFiZWwnOiB0KHByb3BzLmNsb3NlTGFiZWwpLFxuICAgICAgb25DbGljayhlKSB7XG4gICAgICAgIGlzQWN0aXZlLnZhbHVlID0gZmFsc2U7XG4gICAgICAgIGVtaXQoJ2NsaWNrOmNsb3NlJywgZSk7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBoYXNQcmVwZW5kID0gISEoc2xvdHMucHJlcGVuZCB8fCBpY29uLnZhbHVlKTtcbiAgICAgIGNvbnN0IGhhc1RpdGxlID0gISEoc2xvdHMudGl0bGUgfHwgcHJvcHMudGl0bGUpO1xuICAgICAgY29uc3QgaGFzQ2xvc2UgPSAhIShzbG90cy5jbG9zZSB8fCBwcm9wcy5jbG9zYWJsZSk7XG4gICAgICByZXR1cm4gaXNBY3RpdmUudmFsdWUgJiYgX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1hbGVydCcsIHByb3BzLmJvcmRlciAmJiB7XG4gICAgICAgICAgJ3YtYWxlcnQtLWJvcmRlcic6ICEhcHJvcHMuYm9yZGVyLFxuICAgICAgICAgIFtgdi1hbGVydC0tYm9yZGVyLSR7cHJvcHMuYm9yZGVyID09PSB0cnVlID8gJ3N0YXJ0JyA6IHByb3BzLmJvcmRlcn1gXTogdHJ1ZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgJ3YtYWxlcnQtLXByb21pbmVudCc6IHByb3BzLnByb21pbmVudFxuICAgICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIGNvbG9yQ2xhc3Nlcy52YWx1ZSwgZGVuc2l0eUNsYXNzZXMudmFsdWUsIGVsZXZhdGlvbkNsYXNzZXMudmFsdWUsIHBvc2l0aW9uQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHZhcmlhbnRDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW2NvbG9yU3R5bGVzLnZhbHVlLCBkaW1lbnNpb25TdHlsZXMudmFsdWUsIGxvY2F0aW9uU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV0sXG4gICAgICAgIFwicm9sZVwiOiBcImFsZXJ0XCJcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW2dlbk92ZXJsYXlzKGZhbHNlLCAndi1hbGVydCcpLCBwcm9wcy5ib3JkZXIgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImJvcmRlclwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogWyd2LWFsZXJ0X19ib3JkZXInLCB0ZXh0Q29sb3JDbGFzc2VzLnZhbHVlXSxcbiAgICAgICAgICBcInN0eWxlXCI6IHRleHRDb2xvclN0eWxlcy52YWx1ZVxuICAgICAgICB9LCBudWxsKSwgaGFzUHJlcGVuZCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZFwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWFsZXJ0X19wcmVwZW5kXCJcbiAgICAgICAgfSwgWyFzbG90cy5wcmVwZW5kID8gX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWljb25cIixcbiAgICAgICAgICBcImRlbnNpdHlcIjogcHJvcHMuZGVuc2l0eSxcbiAgICAgICAgICBcImljb25cIjogaWNvbi52YWx1ZSxcbiAgICAgICAgICBcInNpemVcIjogcHJvcHMucHJvbWluZW50ID8gNDQgOiAyOFxuICAgICAgICB9LCBudWxsKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZC1kZWZhdWx0c1wiLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogIWljb24udmFsdWUsXG4gICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICBWSWNvbjoge1xuICAgICAgICAgICAgICBkZW5zaXR5OiBwcm9wcy5kZW5zaXR5LFxuICAgICAgICAgICAgICBpY29uOiBpY29uLnZhbHVlLFxuICAgICAgICAgICAgICBzaXplOiBwcm9wcy5wcm9taW5lbnQgPyA0NCA6IDI4XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBzbG90cy5wcmVwZW5kKV0pLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWFsZXJ0X19jb250ZW50XCJcbiAgICAgICAgfSwgW2hhc1RpdGxlICYmIF9jcmVhdGVWTm9kZShWQWxlcnRUaXRsZSwge1xuICAgICAgICAgIFwia2V5XCI6IFwidGl0bGVcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLnRpdGxlPy4oKSA/PyBwcm9wcy50aXRsZV1cbiAgICAgICAgfSksIHNsb3RzLnRleHQ/LigpID8/IHByb3BzLnRleHQsIHNsb3RzLmRlZmF1bHQ/LigpXSksIHNsb3RzLmFwcGVuZCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwiYXBwZW5kXCIsXG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtYWxlcnRfX2FwcGVuZFwiXG4gICAgICAgIH0sIFtzbG90cy5hcHBlbmQoKV0pLCBoYXNDbG9zZSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwiY2xvc2VcIixcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1hbGVydF9fY2xvc2VcIlxuICAgICAgICB9LCBbIXNsb3RzLmNsb3NlID8gX2NyZWF0ZVZOb2RlKFZCdG4sIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICBcImtleVwiOiBcImNsb3NlLWJ0blwiLFxuICAgICAgICAgIFwiaWNvblwiOiBwcm9wcy5jbG9zZUljb24sXG4gICAgICAgICAgXCJzaXplXCI6IFwieC1zbWFsbFwiLFxuICAgICAgICAgIFwidmFyaWFudFwiOiBcInRleHRcIlxuICAgICAgICB9LCBjbG9zZVByb3BzLnZhbHVlKSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImNsb3NlLWRlZmF1bHRzXCIsXG4gICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICBWQnRuOiB7XG4gICAgICAgICAgICAgIGljb246IHByb3BzLmNsb3NlSWNvbixcbiAgICAgICAgICAgICAgc2l6ZTogJ3gtc21hbGwnLFxuICAgICAgICAgICAgICB2YXJpYW50OiAndGV4dCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMuY2xvc2U/Lih7XG4gICAgICAgICAgICBwcm9wczogY2xvc2VQcm9wcy52YWx1ZVxuICAgICAgICAgIH0pXVxuICAgICAgICB9KV0pXVxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQWxlcnQubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WTGFiZWwuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkxhYmVsUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICB0ZXh0OiBTdHJpbmcsXG4gIGNsaWNrYWJsZTogQm9vbGVhbixcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWTGFiZWwnKTtcbmV4cG9ydCBjb25zdCBWTGFiZWwgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkxhYmVsJyxcbiAgcHJvcHM6IG1ha2VWTGFiZWxQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJsYWJlbFwiLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1sYWJlbCcsIHtcbiAgICAgICAgJ3YtbGFiZWwtLWNsaWNrYWJsZSc6IHByb3BzLmNsaWNrYWJsZVxuICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIFtwcm9wcy50ZXh0LCBzbG90cy5kZWZhdWx0Py4oKV0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkxhYmVsLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlNlbGVjdGlvbkNvbnRyb2xHcm91cC5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBwcm92aWRlRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG9uU2NvcGVEaXNwb3NlLCBwcm92aWRlLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBkZWVwRXF1YWwsIGdlbmVyaWNDb21wb25lbnQsIGdldFVpZCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBWU2VsZWN0aW9uQ29udHJvbEdyb3VwU3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTpzZWxlY3Rpb24tY29udHJvbC1ncm91cCcpO1xuZXhwb3J0IGNvbnN0IG1ha2VTZWxlY3Rpb25Db250cm9sR3JvdXBQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbG9yOiBTdHJpbmcsXG4gIGRpc2FibGVkOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIGRlZmF1bHRzVGFyZ2V0OiBTdHJpbmcsXG4gIGVycm9yOiBCb29sZWFuLFxuICBpZDogU3RyaW5nLFxuICBpbmxpbmU6IEJvb2xlYW4sXG4gIGZhbHNlSWNvbjogSWNvblZhbHVlLFxuICB0cnVlSWNvbjogSWNvblZhbHVlLFxuICByaXBwbGU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgbXVsdGlwbGU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgbmFtZTogU3RyaW5nLFxuICByZWFkb25seTogQm9vbGVhbixcbiAgbW9kZWxWYWx1ZTogbnVsbCxcbiAgdHlwZTogU3RyaW5nLFxuICB2YWx1ZUNvbXBhcmF0b3I6IHtcbiAgICB0eXBlOiBGdW5jdGlvbixcbiAgICBkZWZhdWx0OiBkZWVwRXF1YWxcbiAgfSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1NlbGVjdGlvbkNvbnRyb2xHcm91cCcpO1xuZXhwb3J0IGNvbnN0IG1ha2VWU2VsZWN0aW9uQ29udHJvbEdyb3VwUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICAuLi5tYWtlU2VsZWN0aW9uQ29udHJvbEdyb3VwUHJvcHMoe1xuICAgIGRlZmF1bHRzVGFyZ2V0OiAnVlNlbGVjdGlvbkNvbnRyb2wnXG4gIH0pXG59LCAnVlNlbGVjdGlvbkNvbnRyb2xHcm91cCcpO1xuZXhwb3J0IGNvbnN0IFZTZWxlY3Rpb25Db250cm9sR3JvdXAgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlNlbGVjdGlvbkNvbnRyb2xHcm91cCcsXG4gIHByb3BzOiBtYWtlVlNlbGVjdGlvbkNvbnRyb2xHcm91cFByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBtb2RlbFZhbHVlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHVpZCA9IGdldFVpZCgpO1xuICAgIGNvbnN0IGlkID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuaWQgfHwgYHYtc2VsZWN0aW9uLWNvbnRyb2wtZ3JvdXAtJHt1aWR9YCk7XG4gICAgY29uc3QgbmFtZSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLm5hbWUgfHwgaWQudmFsdWUpO1xuICAgIGNvbnN0IHVwZGF0ZUhhbmRsZXJzID0gbmV3IFNldCgpO1xuICAgIHByb3ZpZGUoVlNlbGVjdGlvbkNvbnRyb2xHcm91cFN5bWJvbCwge1xuICAgICAgbW9kZWxWYWx1ZSxcbiAgICAgIGZvcmNlVXBkYXRlOiAoKSA9PiB7XG4gICAgICAgIHVwZGF0ZUhhbmRsZXJzLmZvckVhY2goZm4gPT4gZm4oKSk7XG4gICAgICB9LFxuICAgICAgb25Gb3JjZVVwZGF0ZTogY2IgPT4ge1xuICAgICAgICB1cGRhdGVIYW5kbGVycy5hZGQoY2IpO1xuICAgICAgICBvblNjb3BlRGlzcG9zZSgoKSA9PiB7XG4gICAgICAgICAgdXBkYXRlSGFuZGxlcnMuZGVsZXRlKGNiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFtwcm9wcy5kZWZhdWx0c1RhcmdldF06IHtcbiAgICAgICAgY29sb3I6IHRvUmVmKHByb3BzLCAnY29sb3InKSxcbiAgICAgICAgZGlzYWJsZWQ6IHRvUmVmKHByb3BzLCAnZGlzYWJsZWQnKSxcbiAgICAgICAgZGVuc2l0eTogdG9SZWYocHJvcHMsICdkZW5zaXR5JyksXG4gICAgICAgIGVycm9yOiB0b1JlZihwcm9wcywgJ2Vycm9yJyksXG4gICAgICAgIGlubGluZTogdG9SZWYocHJvcHMsICdpbmxpbmUnKSxcbiAgICAgICAgbW9kZWxWYWx1ZSxcbiAgICAgICAgbXVsdGlwbGU6IGNvbXB1dGVkKCgpID0+ICEhcHJvcHMubXVsdGlwbGUgfHwgcHJvcHMubXVsdGlwbGUgPT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KG1vZGVsVmFsdWUudmFsdWUpKSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZmFsc2VJY29uOiB0b1JlZihwcm9wcywgJ2ZhbHNlSWNvbicpLFxuICAgICAgICB0cnVlSWNvbjogdG9SZWYocHJvcHMsICd0cnVlSWNvbicpLFxuICAgICAgICByZWFkb25seTogdG9SZWYocHJvcHMsICdyZWFkb25seScpLFxuICAgICAgICByaXBwbGU6IHRvUmVmKHByb3BzLCAncmlwcGxlJyksXG4gICAgICAgIHR5cGU6IHRvUmVmKHByb3BzLCAndHlwZScpLFxuICAgICAgICB2YWx1ZUNvbXBhcmF0b3I6IHRvUmVmKHByb3BzLCAndmFsdWVDb21wYXJhdG9yJylcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LXNlbGVjdGlvbi1jb250cm9sLWdyb3VwJywge1xuICAgICAgICAndi1zZWxlY3Rpb24tY29udHJvbC1ncm91cC0taW5saW5lJzogcHJvcHMuaW5saW5lXG4gICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlLFxuICAgICAgXCJyb2xlXCI6IHByb3BzLnR5cGUgPT09ICdyYWRpbycgPyAncmFkaW9ncm91cCcgOiB1bmRlZmluZWRcbiAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKCldKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZTZWxlY3Rpb25Db250cm9sR3JvdXAubWpzLm1hcCIsImltcG9ydCB7IHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlNlbGVjdGlvbkNvbnRyb2wuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJY29uIH0gZnJvbSBcIi4uL1ZJY29uL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkxhYmVsIH0gZnJvbSBcIi4uL1ZMYWJlbC9pbmRleC5tanNcIjtcbmltcG9ydCB7IG1ha2VTZWxlY3Rpb25Db250cm9sR3JvdXBQcm9wcywgVlNlbGVjdGlvbkNvbnRyb2xHcm91cFN5bWJvbCB9IGZyb20gXCIuLi9WU2VsZWN0aW9uQ29udHJvbEdyb3VwL1ZTZWxlY3Rpb25Db250cm9sR3JvdXAubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VCYWNrZ3JvdW5kQ29sb3IsIHVzZVRleHRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyB1c2VEZW5zaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiOyAvLyBEaXJlY3RpdmVzXG5pbXBvcnQgeyBSaXBwbGUgfSBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9yaXBwbGUvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCwgbmV4dFRpY2ssIHJlZiwgc2hhbGxvd1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBmaWx0ZXJJbnB1dEF0dHJzLCBnZW5lcmljQ29tcG9uZW50LCBnZXRVaWQsIG1hdGNoZXNTZWxlY3RvciwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIsIHdyYXBJbkFycmF5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZTZWxlY3Rpb25Db250cm9sUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBsYWJlbDogU3RyaW5nLFxuICB0cnVlVmFsdWU6IG51bGwsXG4gIGZhbHNlVmFsdWU6IG51bGwsXG4gIHZhbHVlOiBudWxsLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVNlbGVjdGlvbkNvbnRyb2xHcm91cFByb3BzKClcbn0sICdWU2VsZWN0aW9uQ29udHJvbCcpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlbGVjdGlvbkNvbnRyb2wocHJvcHMpIHtcbiAgY29uc3QgZ3JvdXAgPSBpbmplY3QoVlNlbGVjdGlvbkNvbnRyb2xHcm91cFN5bWJvbCwgdW5kZWZpbmVkKTtcbiAgY29uc3Qge1xuICAgIGRlbnNpdHlDbGFzc2VzXG4gIH0gPSB1c2VEZW5zaXR5KHByb3BzKTtcbiAgY29uc3QgbW9kZWxWYWx1ZSA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgY29uc3QgdHJ1ZVZhbHVlID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMudHJ1ZVZhbHVlICE9PSB1bmRlZmluZWQgPyBwcm9wcy50cnVlVmFsdWUgOiBwcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkID8gcHJvcHMudmFsdWUgOiB0cnVlKTtcbiAgY29uc3QgZmFsc2VWYWx1ZSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmZhbHNlVmFsdWUgIT09IHVuZGVmaW5lZCA/IHByb3BzLmZhbHNlVmFsdWUgOiBmYWxzZSk7XG4gIGNvbnN0IGlzTXVsdGlwbGUgPSBjb21wdXRlZCgoKSA9PiAhIXByb3BzLm11bHRpcGxlIHx8IHByb3BzLm11bHRpcGxlID09IG51bGwgJiYgQXJyYXkuaXNBcnJheShtb2RlbFZhbHVlLnZhbHVlKSk7XG4gIGNvbnN0IG1vZGVsID0gY29tcHV0ZWQoe1xuICAgIGdldCgpIHtcbiAgICAgIGNvbnN0IHZhbCA9IGdyb3VwID8gZ3JvdXAubW9kZWxWYWx1ZS52YWx1ZSA6IG1vZGVsVmFsdWUudmFsdWU7XG4gICAgICByZXR1cm4gaXNNdWx0aXBsZS52YWx1ZSA/IHZhbC5zb21lKHYgPT4gcHJvcHMudmFsdWVDb21wYXJhdG9yKHYsIHRydWVWYWx1ZS52YWx1ZSkpIDogcHJvcHMudmFsdWVDb21wYXJhdG9yKHZhbCwgdHJ1ZVZhbHVlLnZhbHVlKTtcbiAgICB9LFxuICAgIHNldCh2YWwpIHtcbiAgICAgIGlmIChwcm9wcy5yZWFkb25seSkgcmV0dXJuO1xuICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdmFsID8gdHJ1ZVZhbHVlLnZhbHVlIDogZmFsc2VWYWx1ZS52YWx1ZTtcbiAgICAgIGxldCBuZXdWYWwgPSBjdXJyZW50VmFsdWU7XG4gICAgICBpZiAoaXNNdWx0aXBsZS52YWx1ZSkge1xuICAgICAgICBuZXdWYWwgPSB2YWwgPyBbLi4ud3JhcEluQXJyYXkobW9kZWxWYWx1ZS52YWx1ZSksIGN1cnJlbnRWYWx1ZV0gOiB3cmFwSW5BcnJheShtb2RlbFZhbHVlLnZhbHVlKS5maWx0ZXIoaXRlbSA9PiAhcHJvcHMudmFsdWVDb21wYXJhdG9yKGl0ZW0sIHRydWVWYWx1ZS52YWx1ZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGdyb3VwKSB7XG4gICAgICAgIGdyb3VwLm1vZGVsVmFsdWUudmFsdWUgPSBuZXdWYWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb2RlbFZhbHVlLnZhbHVlID0gbmV3VmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHtcbiAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgIHRleHRDb2xvclN0eWxlc1xuICB9ID0gdXNlVGV4dENvbG9yKGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gbW9kZWwudmFsdWUgJiYgIXByb3BzLmVycm9yICYmICFwcm9wcy5kaXNhYmxlZCA/IHByb3BzLmNvbG9yIDogdW5kZWZpbmVkO1xuICB9KSk7XG4gIGNvbnN0IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgIGJhY2tncm91bmRDb2xvclN0eWxlc1xuICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gbW9kZWwudmFsdWUgJiYgIXByb3BzLmVycm9yICYmICFwcm9wcy5kaXNhYmxlZCA/IHByb3BzLmNvbG9yIDogdW5kZWZpbmVkO1xuICB9KSk7XG4gIGNvbnN0IGljb24gPSBjb21wdXRlZCgoKSA9PiBtb2RlbC52YWx1ZSA/IHByb3BzLnRydWVJY29uIDogcHJvcHMuZmFsc2VJY29uKTtcbiAgcmV0dXJuIHtcbiAgICBncm91cCxcbiAgICBkZW5zaXR5Q2xhc3NlcyxcbiAgICB0cnVlVmFsdWUsXG4gICAgZmFsc2VWYWx1ZSxcbiAgICBtb2RlbCxcbiAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgIHRleHRDb2xvclN0eWxlcyxcbiAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgIGJhY2tncm91bmRDb2xvclN0eWxlcyxcbiAgICBpY29uXG4gIH07XG59XG5leHBvcnQgY29uc3QgVlNlbGVjdGlvbkNvbnRyb2wgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlNlbGVjdGlvbkNvbnRyb2wnLFxuICBkaXJlY3RpdmVzOiB7XG4gICAgUmlwcGxlXG4gIH0sXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiBtYWtlVlNlbGVjdGlvbkNvbnRyb2xQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbCA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGF0dHJzLFxuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBncm91cCxcbiAgICAgIGRlbnNpdHlDbGFzc2VzLFxuICAgICAgaWNvbixcbiAgICAgIG1vZGVsLFxuICAgICAgdGV4dENvbG9yQ2xhc3NlcyxcbiAgICAgIHRleHRDb2xvclN0eWxlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXMsXG4gICAgICB0cnVlVmFsdWVcbiAgICB9ID0gdXNlU2VsZWN0aW9uQ29udHJvbChwcm9wcyk7XG4gICAgY29uc3QgdWlkID0gZ2V0VWlkKCk7XG4gICAgY29uc3QgaWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5pZCB8fCBgaW5wdXQtJHt1aWR9YCk7XG4gICAgY29uc3QgaXNGb2N1c2VkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAgY29uc3QgaXNGb2N1c1Zpc2libGUgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgICBjb25zdCBpbnB1dCA9IHJlZigpO1xuICAgIGdyb3VwPy5vbkZvcmNlVXBkYXRlKCgpID0+IHtcbiAgICAgIGlmIChpbnB1dC52YWx1ZSkge1xuICAgICAgICBpbnB1dC52YWx1ZS5jaGVja2VkID0gbW9kZWwudmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gb25Gb2N1cyhlKSB7XG4gICAgICBpc0ZvY3VzZWQudmFsdWUgPSB0cnVlO1xuICAgICAgaWYgKG1hdGNoZXNTZWxlY3RvcihlLnRhcmdldCwgJzpmb2N1cy12aXNpYmxlJykgIT09IGZhbHNlKSB7XG4gICAgICAgIGlzRm9jdXNWaXNpYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25CbHVyKCkge1xuICAgICAgaXNGb2N1c2VkLnZhbHVlID0gZmFsc2U7XG4gICAgICBpc0ZvY3VzVmlzaWJsZS52YWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbklucHV0KGUpIHtcbiAgICAgIGlmIChwcm9wcy5yZWFkb25seSAmJiBncm91cCkge1xuICAgICAgICBuZXh0VGljaygoKSA9PiBncm91cC5mb3JjZVVwZGF0ZSgpKTtcbiAgICAgIH1cbiAgICAgIG1vZGVsLnZhbHVlID0gZS50YXJnZXQuY2hlY2tlZDtcbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IGxhYmVsID0gc2xvdHMubGFiZWwgPyBzbG90cy5sYWJlbCh7XG4gICAgICAgIGxhYmVsOiBwcm9wcy5sYWJlbCxcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICBmb3I6IGlkLnZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0pIDogcHJvcHMubGFiZWw7XG4gICAgICBjb25zdCBbcm9vdEF0dHJzLCBpbnB1dEF0dHJzXSA9IGZpbHRlcklucHV0QXR0cnMoYXR0cnMpO1xuICAgICAgY29uc3QgaW5wdXROb2RlID0gX2NyZWF0ZVZOb2RlKFwiaW5wdXRcIiwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcInJlZlwiOiBpbnB1dCxcbiAgICAgICAgXCJjaGVja2VkXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICBcImRpc2FibGVkXCI6ICEhKHByb3BzLnJlYWRvbmx5IHx8IHByb3BzLmRpc2FibGVkKSxcbiAgICAgICAgXCJpZFwiOiBpZC52YWx1ZSxcbiAgICAgICAgXCJvbkJsdXJcIjogb25CbHVyLFxuICAgICAgICBcIm9uRm9jdXNcIjogb25Gb2N1cyxcbiAgICAgICAgXCJvbklucHV0XCI6IG9uSW5wdXQsXG4gICAgICAgIFwiYXJpYS1kaXNhYmxlZFwiOiAhIShwcm9wcy5yZWFkb25seSB8fCBwcm9wcy5kaXNhYmxlZCksXG4gICAgICAgIFwidHlwZVwiOiBwcm9wcy50eXBlLFxuICAgICAgICBcInZhbHVlXCI6IHRydWVWYWx1ZS52YWx1ZSxcbiAgICAgICAgXCJuYW1lXCI6IHByb3BzLm5hbWUsXG4gICAgICAgIFwiYXJpYS1jaGVja2VkXCI6IHByb3BzLnR5cGUgPT09ICdjaGVja2JveCcgPyBtb2RlbC52YWx1ZSA6IHVuZGVmaW5lZFxuICAgICAgfSwgaW5wdXRBdHRycyksIG51bGwpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXNlbGVjdGlvbi1jb250cm9sJywge1xuICAgICAgICAgICd2LXNlbGVjdGlvbi1jb250cm9sLS1kaXJ0eSc6IG1vZGVsLnZhbHVlLFxuICAgICAgICAgICd2LXNlbGVjdGlvbi1jb250cm9sLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICd2LXNlbGVjdGlvbi1jb250cm9sLS1lcnJvcic6IHByb3BzLmVycm9yLFxuICAgICAgICAgICd2LXNlbGVjdGlvbi1jb250cm9sLS1mb2N1c2VkJzogaXNGb2N1c2VkLnZhbHVlLFxuICAgICAgICAgICd2LXNlbGVjdGlvbi1jb250cm9sLS1mb2N1cy12aXNpYmxlJzogaXNGb2N1c1Zpc2libGUudmFsdWUsXG4gICAgICAgICAgJ3Ytc2VsZWN0aW9uLWNvbnRyb2wtLWlubGluZSc6IHByb3BzLmlubGluZVxuICAgICAgICB9LCBkZW5zaXR5Q2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdXG4gICAgICB9LCByb290QXR0cnMsIHtcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSksIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1zZWxlY3Rpb24tY29udHJvbF9fd3JhcHBlcicsIHRleHRDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgICBcInN0eWxlXCI6IHRleHRDb2xvclN0eWxlcy52YWx1ZVxuICAgICAgfSwgW3Nsb3RzLmRlZmF1bHQ/Lih7XG4gICAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlc1xuICAgICAgfSksIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1zZWxlY3Rpb24tY29udHJvbF9faW5wdXQnXVxuICAgICAgfSwgW3Nsb3RzLmlucHV0Py4oe1xuICAgICAgICBtb2RlbCxcbiAgICAgICAgdGV4dENvbG9yQ2xhc3NlcyxcbiAgICAgICAgdGV4dENvbG9yU3R5bGVzLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXMsXG4gICAgICAgIGlucHV0Tm9kZSxcbiAgICAgICAgaWNvbjogaWNvbi52YWx1ZSxcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICBvbkZvY3VzLFxuICAgICAgICAgIG9uQmx1cixcbiAgICAgICAgICBpZDogaWQudmFsdWVcbiAgICAgICAgfVxuICAgICAgfSkgPz8gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW2ljb24udmFsdWUgJiYgX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgIFwia2V5XCI6IFwiaWNvblwiLFxuICAgICAgICBcImljb25cIjogaWNvbi52YWx1ZVxuICAgICAgfSwgbnVsbCksIGlucHV0Tm9kZV0pXSksIFtbX3Jlc29sdmVEaXJlY3RpdmUoXCJyaXBwbGVcIiksIHByb3BzLnJpcHBsZSAmJiBbIXByb3BzLmRpc2FibGVkICYmICFwcm9wcy5yZWFkb25seSwgbnVsbCwgWydjZW50ZXInLCAnY2lyY2xlJ11dXV0pXSksIGxhYmVsICYmIF9jcmVhdGVWTm9kZShWTGFiZWwsIHtcbiAgICAgICAgXCJmb3JcIjogaWQudmFsdWUsXG4gICAgICAgIFwiY2xpY2thYmxlXCI6IHRydWUsXG4gICAgICAgIFwib25DbGlja1wiOiBlID0+IGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW2xhYmVsXVxuICAgICAgfSldKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgaXNGb2N1c2VkLFxuICAgICAgaW5wdXRcbiAgICB9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZTZWxlY3Rpb25Db250cm9sLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBtYWtlVlNlbGVjdGlvbkNvbnRyb2xQcm9wcywgVlNlbGVjdGlvbkNvbnRyb2wgfSBmcm9tIFwiLi4vVlNlbGVjdGlvbkNvbnRyb2wvVlNlbGVjdGlvbkNvbnRyb2wubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIG9taXQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZDaGVja2JveEJ0blByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgaW5kZXRlcm1pbmF0ZTogQm9vbGVhbixcbiAgaW5kZXRlcm1pbmF0ZUljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRjaGVja2JveEluZGV0ZXJtaW5hdGUnXG4gIH0sXG4gIC4uLm1ha2VWU2VsZWN0aW9uQ29udHJvbFByb3BzKHtcbiAgICBmYWxzZUljb246ICckY2hlY2tib3hPZmYnLFxuICAgIHRydWVJY29uOiAnJGNoZWNrYm94T24nXG4gIH0pXG59LCAnVkNoZWNrYm94QnRuJyk7XG5leHBvcnQgY29uc3QgVkNoZWNrYm94QnRuID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZDaGVja2JveEJ0bicsXG4gIHByb3BzOiBtYWtlVkNoZWNrYm94QnRuUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWx1ZSA9PiB0cnVlLFxuICAgICd1cGRhdGU6aW5kZXRlcm1pbmF0ZSc6IHZhbCA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgaW5kZXRlcm1pbmF0ZSA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ2luZGV0ZXJtaW5hdGUnKTtcbiAgICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBmdW5jdGlvbiBvbkNoYW5nZSh2KSB7XG4gICAgICBpZiAoaW5kZXRlcm1pbmF0ZS52YWx1ZSkge1xuICAgICAgICBpbmRldGVybWluYXRlLnZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGZhbHNlSWNvbiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBpbmRldGVybWluYXRlLnZhbHVlID8gcHJvcHMuaW5kZXRlcm1pbmF0ZUljb24gOiBwcm9wcy5mYWxzZUljb247XG4gICAgfSk7XG4gICAgY29uc3QgdHJ1ZUljb24gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gaW5kZXRlcm1pbmF0ZS52YWx1ZSA/IHByb3BzLmluZGV0ZXJtaW5hdGVJY29uIDogcHJvcHMudHJ1ZUljb247XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyb2xQcm9wcyA9IG9taXQoVlNlbGVjdGlvbkNvbnRyb2wuZmlsdGVyUHJvcHMocHJvcHMpWzBdLCBbJ21vZGVsVmFsdWUnXSk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZTZWxlY3Rpb25Db250cm9sLCBfbWVyZ2VQcm9wcyhjb250cm9sUHJvcHMsIHtcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogWyRldmVudCA9PiBtb2RlbC52YWx1ZSA9ICRldmVudCwgb25DaGFuZ2VdLFxuICAgICAgICBcImNsYXNzXCI6IFsndi1jaGVja2JveC1idG4nLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGUsXG4gICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgIFwiZmFsc2VJY29uXCI6IGZhbHNlSWNvbi52YWx1ZSxcbiAgICAgICAgXCJ0cnVlSWNvblwiOiB0cnVlSWNvbi52YWx1ZSxcbiAgICAgICAgXCJhcmlhLWNoZWNrZWRcIjogaW5kZXRlcm1pbmF0ZS52YWx1ZSA/ICdtaXhlZCcgOiB1bmRlZmluZWRcbiAgICAgIH0pLCBzbG90cyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDaGVja2JveEJ0bi5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkljb24gfSBmcm9tIFwiLi4vVkljb24vaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUlucHV0SWNvbihwcm9wcykge1xuICBjb25zdCB7XG4gICAgdFxuICB9ID0gdXNlTG9jYWxlKCk7XG4gIGZ1bmN0aW9uIElucHV0SWNvbihfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIG5hbWVcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBsb2NhbGVLZXkgPSB7XG4gICAgICBwcmVwZW5kOiAncHJlcGVuZEFjdGlvbicsXG4gICAgICBwcmVwZW5kSW5uZXI6ICdwcmVwZW5kQWN0aW9uJyxcbiAgICAgIGFwcGVuZDogJ2FwcGVuZEFjdGlvbicsXG4gICAgICBhcHBlbmRJbm5lcjogJ2FwcGVuZEFjdGlvbicsXG4gICAgICBjbGVhcjogJ2NsZWFyJ1xuICAgIH1bbmFtZV07XG4gICAgY29uc3QgbGlzdGVuZXIgPSBwcm9wc1tgb25DbGljazoke25hbWV9YF07XG4gICAgY29uc3QgbGFiZWwgPSBsaXN0ZW5lciAmJiBsb2NhbGVLZXkgPyB0KGAkdnVldGlmeS5pbnB1dC4ke2xvY2FsZUtleX1gLCBwcm9wcy5sYWJlbCA/PyAnJykgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgXCJpY29uXCI6IHByb3BzW2Ake25hbWV9SWNvbmBdLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IGxhYmVsLFxuICAgICAgXCJvbkNsaWNrXCI6IGxpc3RlbmVyXG4gICAgfSwgbnVsbCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBJbnB1dEljb25cbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlucHV0SWNvbi5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZNZXNzYWdlcy5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlNsaWRlWVRyYW5zaXRpb24gfSBmcm9tIFwiLi4vdHJhbnNpdGlvbnMvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VUZXh0Q29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRyYW5zaXRpb25Qcm9wcywgTWF5YmVUcmFuc2l0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RyYW5zaXRpb24ubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIsIHdyYXBJbkFycmF5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZNZXNzYWdlc1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWN0aXZlOiBCb29sZWFuLFxuICBjb2xvcjogU3RyaW5nLFxuICBtZXNzYWdlczoge1xuICAgIHR5cGU6IFtBcnJheSwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRyYW5zaXRpb25Qcm9wcyh7XG4gICAgdHJhbnNpdGlvbjoge1xuICAgICAgY29tcG9uZW50OiBWU2xpZGVZVHJhbnNpdGlvbixcbiAgICAgIGxlYXZlQWJzb2x1dGU6IHRydWUsXG4gICAgICBncm91cDogdHJ1ZVxuICAgIH1cbiAgfSlcbn0sICdWTWVzc2FnZXMnKTtcbmV4cG9ydCBjb25zdCBWTWVzc2FnZXMgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVk1lc3NhZ2VzJyxcbiAgcHJvcHM6IG1ha2VWTWVzc2FnZXNQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IG1lc3NhZ2VzID0gY29tcHV0ZWQoKCkgPT4gd3JhcEluQXJyYXkocHJvcHMubWVzc2FnZXMpKTtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcihjb21wdXRlZCgoKSA9PiBwcm9wcy5jb2xvcikpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoTWF5YmVUcmFuc2l0aW9uLCB7XG4gICAgICBcInRyYW5zaXRpb25cIjogcHJvcHMudHJhbnNpdGlvbixcbiAgICAgIFwidGFnXCI6IFwiZGl2XCIsXG4gICAgICBcImNsYXNzXCI6IFsndi1tZXNzYWdlcycsIHRleHRDb2xvckNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW3RleHRDb2xvclN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdLFxuICAgICAgXCJyb2xlXCI6IFwiYWxlcnRcIixcbiAgICAgIFwiYXJpYS1saXZlXCI6IFwicG9saXRlXCJcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbcHJvcHMuYWN0aXZlICYmIG1lc3NhZ2VzLnZhbHVlLm1hcCgobWVzc2FnZSwgaSkgPT4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtbWVzc2FnZXNfX21lc3NhZ2VcIixcbiAgICAgICAgXCJrZXlcIjogYCR7aX0tJHttZXNzYWdlcy52YWx1ZX1gXG4gICAgICB9LCBbc2xvdHMubWVzc2FnZSA/IHNsb3RzLm1lc3NhZ2Uoe1xuICAgICAgICBtZXNzYWdlXG4gICAgICB9KSA6IG1lc3NhZ2VdKSldXG4gICAgfSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTWVzc2FnZXMubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgRXZlbnRQcm9wLCBnZXRDdXJyZW50SW5zdGFuY2VOYW1lLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbi8vIENvbXBvc2FibGVzXG5leHBvcnQgY29uc3QgbWFrZUZvY3VzUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBmb2N1c2VkOiBCb29sZWFuLFxuICAnb25VcGRhdGU6Zm9jdXNlZCc6IEV2ZW50UHJvcCgpXG59LCAnZm9jdXMnKTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VGb2N1cyhwcm9wcykge1xuICBsZXQgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZ2V0Q3VycmVudEluc3RhbmNlTmFtZSgpO1xuICBjb25zdCBpc0ZvY3VzZWQgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdmb2N1c2VkJyk7XG4gIGNvbnN0IGZvY3VzQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgW2Ake25hbWV9LS1mb2N1c2VkYF06IGlzRm9jdXNlZC52YWx1ZVxuICAgIH07XG4gIH0pO1xuICBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICBpc0ZvY3VzZWQudmFsdWUgPSB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIGJsdXIoKSB7XG4gICAgaXNGb2N1c2VkLnZhbHVlID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBmb2N1c0NsYXNzZXMsXG4gICAgaXNGb2N1c2VkLFxuICAgIGZvY3VzLFxuICAgIGJsdXJcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvY3VzLm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4vcHJveGllZE1vZGVsLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBpbmplY3QsIHByb3ZpZGUsIHJlZiwgc2hhbGxvd1JlZiwgdG9SZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnNvbGVXYXJuLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBGb3JtS2V5ID0gU3ltYm9sLmZvcigndnVldGlmeTpmb3JtJyk7XG5leHBvcnQgY29uc3QgbWFrZUZvcm1Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICBmYXN0RmFpbDogQm9vbGVhbixcbiAgcmVhZG9ubHk6IEJvb2xlYW4sXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgdmFsaWRhdGVPbjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnaW5wdXQnXG4gIH1cbn0sICdmb3JtJyk7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRm9ybShwcm9wcykge1xuICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgY29uc3QgaXNEaXNhYmxlZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmRpc2FibGVkKTtcbiAgY29uc3QgaXNSZWFkb25seSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLnJlYWRvbmx5KTtcbiAgY29uc3QgaXNWYWxpZGF0aW5nID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gIGNvbnN0IGl0ZW1zID0gcmVmKFtdKTtcbiAgY29uc3QgZXJyb3JzID0gcmVmKFtdKTtcbiAgYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGxldCB2YWxpZCA9IHRydWU7XG4gICAgZXJyb3JzLnZhbHVlID0gW107XG4gICAgaXNWYWxpZGF0aW5nLnZhbHVlID0gdHJ1ZTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMudmFsdWUpIHtcbiAgICAgIGNvbnN0IGl0ZW1FcnJvck1lc3NhZ2VzID0gYXdhaXQgaXRlbS52YWxpZGF0ZSgpO1xuICAgICAgaWYgKGl0ZW1FcnJvck1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHtcbiAgICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgICBlcnJvck1lc3NhZ2VzOiBpdGVtRXJyb3JNZXNzYWdlc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghdmFsaWQgJiYgcHJvcHMuZmFzdEZhaWwpIGJyZWFrO1xuICAgIH1cbiAgICBlcnJvcnMudmFsdWUgPSByZXN1bHRzO1xuICAgIGlzVmFsaWRhdGluZy52YWx1ZSA9IGZhbHNlO1xuICAgIHJldHVybiB7XG4gICAgICB2YWxpZCxcbiAgICAgIGVycm9yczogZXJyb3JzLnZhbHVlXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBpdGVtcy52YWx1ZS5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5yZXNldCgpKTtcbiAgfVxuICBmdW5jdGlvbiByZXNldFZhbGlkYXRpb24oKSB7XG4gICAgaXRlbXMudmFsdWUuZm9yRWFjaChpdGVtID0+IGl0ZW0ucmVzZXRWYWxpZGF0aW9uKCkpO1xuICB9XG4gIHdhdGNoKGl0ZW1zLCAoKSA9PiB7XG4gICAgbGV0IHZhbGlkID0gMDtcbiAgICBsZXQgaW52YWxpZCA9IDA7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcy52YWx1ZSkge1xuICAgICAgaWYgKGl0ZW0uaXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaW52YWxpZCsrO1xuICAgICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICAgIGVycm9yTWVzc2FnZXM6IGl0ZW0uZXJyb3JNZXNzYWdlc1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbS5pc1ZhbGlkID09PSB0cnVlKSB2YWxpZCsrO1xuICAgIH1cbiAgICBlcnJvcnMudmFsdWUgPSByZXN1bHRzO1xuICAgIG1vZGVsLnZhbHVlID0gaW52YWxpZCA+IDAgPyBmYWxzZSA6IHZhbGlkID09PSBpdGVtcy52YWx1ZS5sZW5ndGggPyB0cnVlIDogbnVsbDtcbiAgfSwge1xuICAgIGRlZXA6IHRydWVcbiAgfSk7XG4gIHByb3ZpZGUoRm9ybUtleSwge1xuICAgIHJlZ2lzdGVyOiBfcmVmID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGlkLFxuICAgICAgICB2YWxpZGF0ZSxcbiAgICAgICAgcmVzZXQsXG4gICAgICAgIHJlc2V0VmFsaWRhdGlvblxuICAgICAgfSA9IF9yZWY7XG4gICAgICBpZiAoaXRlbXMudmFsdWUuc29tZShpdGVtID0+IGl0ZW0uaWQgPT09IGlkKSkge1xuICAgICAgICBjb25zb2xlV2FybihgRHVwbGljYXRlIGlucHV0IG5hbWUgXCIke2lkfVwiYCk7XG4gICAgICB9XG4gICAgICBpdGVtcy52YWx1ZS5wdXNoKHtcbiAgICAgICAgaWQsXG4gICAgICAgIHZhbGlkYXRlLFxuICAgICAgICByZXNldCxcbiAgICAgICAgcmVzZXRWYWxpZGF0aW9uLFxuICAgICAgICBpc1ZhbGlkOiBudWxsLFxuICAgICAgICBlcnJvck1lc3NhZ2VzOiBbXVxuICAgICAgfSk7XG4gICAgfSxcbiAgICB1bnJlZ2lzdGVyOiBpZCA9PiB7XG4gICAgICBpdGVtcy52YWx1ZSA9IGl0ZW1zLnZhbHVlLmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uaWQgIT09IGlkO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB1cGRhdGU6IChpZCwgaXNWYWxpZCwgZXJyb3JNZXNzYWdlcykgPT4ge1xuICAgICAgY29uc3QgZm91bmQgPSBpdGVtcy52YWx1ZS5maW5kKGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWQpO1xuICAgICAgaWYgKCFmb3VuZCkgcmV0dXJuO1xuICAgICAgZm91bmQuaXNWYWxpZCA9IGlzVmFsaWQ7XG4gICAgICBmb3VuZC5lcnJvck1lc3NhZ2VzID0gZXJyb3JNZXNzYWdlcztcbiAgICB9LFxuICAgIGlzRGlzYWJsZWQsXG4gICAgaXNSZWFkb25seSxcbiAgICBpc1ZhbGlkYXRpbmcsXG4gICAgaXNWYWxpZDogbW9kZWwsXG4gICAgaXRlbXMsXG4gICAgdmFsaWRhdGVPbjogdG9SZWYocHJvcHMsICd2YWxpZGF0ZU9uJylcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZXJyb3JzLFxuICAgIGlzRGlzYWJsZWQsXG4gICAgaXNSZWFkb25seSxcbiAgICBpc1ZhbGlkYXRpbmcsXG4gICAgaXNWYWxpZDogbW9kZWwsXG4gICAgaXRlbXMsXG4gICAgdmFsaWRhdGUsXG4gICAgcmVzZXQsXG4gICAgcmVzZXRWYWxpZGF0aW9uXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlRm9ybSgpIHtcbiAgcmV0dXJuIGluamVjdChGb3JtS2V5LCBudWxsKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm0ubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlRm9jdXNQcm9wcyB9IGZyb20gXCIuL2ZvY3VzLm1qc1wiO1xuaW1wb3J0IHsgdXNlRm9ybSB9IGZyb20gXCIuL2Zvcm0ubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi9wcm94aWVkTW9kZWwubWpzXCI7XG5pbXBvcnQgeyB1c2VUb2dnbGVTY29wZSB9IGZyb20gXCIuL3RvZ2dsZVNjb3BlLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBuZXh0VGljaywgb25CZWZvcmVNb3VudCwgb25CZWZvcmVVbm1vdW50LCBvbk1vdW50ZWQsIHJlZiwgc2hhbGxvd1JlZiwgdW5yZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZU5hbWUsIGdldFVpZCwgcHJvcHNGYWN0b3J5LCB3cmFwSW5BcnJheSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWYWxpZGF0aW9uUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBkaXNhYmxlZDoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICBlcnJvcjogQm9vbGVhbixcbiAgZXJyb3JNZXNzYWdlczoge1xuICAgIHR5cGU6IFtBcnJheSwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICB9LFxuICBtYXhFcnJvcnM6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDFcbiAgfSxcbiAgbmFtZTogU3RyaW5nLFxuICBsYWJlbDogU3RyaW5nLFxuICByZWFkb25seToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICBydWxlczoge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gIH0sXG4gIG1vZGVsVmFsdWU6IG51bGwsXG4gIHZhbGlkYXRlT246IFN0cmluZyxcbiAgdmFsaWRhdGlvblZhbHVlOiBudWxsLFxuICAuLi5tYWtlRm9jdXNQcm9wcygpXG59LCAndmFsaWRhdGlvbicpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVZhbGlkYXRpb24ocHJvcHMpIHtcbiAgbGV0IG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGdldEN1cnJlbnRJbnN0YW5jZU5hbWUoKTtcbiAgbGV0IGlkID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBnZXRVaWQoKTtcbiAgY29uc3QgbW9kZWwgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gIGNvbnN0IHZhbGlkYXRpb25Nb2RlbCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLnZhbGlkYXRpb25WYWx1ZSA9PT0gdW5kZWZpbmVkID8gbW9kZWwudmFsdWUgOiBwcm9wcy52YWxpZGF0aW9uVmFsdWUpO1xuICBjb25zdCBmb3JtID0gdXNlRm9ybSgpO1xuICBjb25zdCBpbnRlcm5hbEVycm9yTWVzc2FnZXMgPSByZWYoW10pO1xuICBjb25zdCBpc1ByaXN0aW5lID0gc2hhbGxvd1JlZih0cnVlKTtcbiAgY29uc3QgaXNEaXJ0eSA9IGNvbXB1dGVkKCgpID0+ICEhKHdyYXBJbkFycmF5KG1vZGVsLnZhbHVlID09PSAnJyA/IG51bGwgOiBtb2RlbC52YWx1ZSkubGVuZ3RoIHx8IHdyYXBJbkFycmF5KHZhbGlkYXRpb25Nb2RlbC52YWx1ZSA9PT0gJycgPyBudWxsIDogdmFsaWRhdGlvbk1vZGVsLnZhbHVlKS5sZW5ndGgpKTtcbiAgY29uc3QgaXNEaXNhYmxlZCA9IGNvbXB1dGVkKCgpID0+ICEhKHByb3BzLmRpc2FibGVkID8/IGZvcm0/LmlzRGlzYWJsZWQudmFsdWUpKTtcbiAgY29uc3QgaXNSZWFkb25seSA9IGNvbXB1dGVkKCgpID0+ICEhKHByb3BzLnJlYWRvbmx5ID8/IGZvcm0/LmlzUmVhZG9ubHkudmFsdWUpKTtcbiAgY29uc3QgZXJyb3JNZXNzYWdlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gcHJvcHMuZXJyb3JNZXNzYWdlcy5sZW5ndGggPyB3cmFwSW5BcnJheShwcm9wcy5lcnJvck1lc3NhZ2VzKS5zbGljZSgwLCBNYXRoLm1heCgwLCArcHJvcHMubWF4RXJyb3JzKSkgOiBpbnRlcm5hbEVycm9yTWVzc2FnZXMudmFsdWU7XG4gIH0pO1xuICBjb25zdCB2YWxpZGF0ZU9uID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IChwcm9wcy52YWxpZGF0ZU9uID8/IGZvcm0/LnZhbGlkYXRlT24udmFsdWUpIHx8ICdpbnB1dCc7XG4gICAgaWYgKHZhbHVlID09PSAnbGF6eScpIHZhbHVlID0gJ2lucHV0IGxhenknO1xuICAgIGNvbnN0IHNldCA9IG5ldyBTZXQodmFsdWU/LnNwbGl0KCcgJykgPz8gW10pO1xuICAgIHJldHVybiB7XG4gICAgICBibHVyOiBzZXQuaGFzKCdibHVyJykgfHwgc2V0LmhhcygnaW5wdXQnKSxcbiAgICAgIGlucHV0OiBzZXQuaGFzKCdpbnB1dCcpLFxuICAgICAgc3VibWl0OiBzZXQuaGFzKCdzdWJtaXQnKSxcbiAgICAgIGxhenk6IHNldC5oYXMoJ2xhenknKVxuICAgIH07XG4gIH0pO1xuICBjb25zdCBpc1ZhbGlkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5lcnJvciB8fCBwcm9wcy5lcnJvck1lc3NhZ2VzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghcHJvcHMucnVsZXMubGVuZ3RoKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoaXNQcmlzdGluZS52YWx1ZSkge1xuICAgICAgcmV0dXJuIGludGVybmFsRXJyb3JNZXNzYWdlcy52YWx1ZS5sZW5ndGggfHwgdmFsaWRhdGVPbi52YWx1ZS5sYXp5ID8gbnVsbCA6IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAhaW50ZXJuYWxFcnJvck1lc3NhZ2VzLnZhbHVlLmxlbmd0aDtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBpc1ZhbGlkYXRpbmcgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgY29uc3QgdmFsaWRhdGlvbkNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtgJHtuYW1lfS0tZXJyb3JgXTogaXNWYWxpZC52YWx1ZSA9PT0gZmFsc2UsXG4gICAgICBbYCR7bmFtZX0tLWRpcnR5YF06IGlzRGlydHkudmFsdWUsXG4gICAgICBbYCR7bmFtZX0tLWRpc2FibGVkYF06IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICBbYCR7bmFtZX0tLXJlYWRvbmx5YF06IGlzUmVhZG9ubHkudmFsdWVcbiAgICB9O1xuICB9KTtcbiAgY29uc3QgdWlkID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMubmFtZSA/PyB1bnJlZihpZCkpO1xuICBvbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgICBmb3JtPy5yZWdpc3Rlcih7XG4gICAgICBpZDogdWlkLnZhbHVlLFxuICAgICAgdmFsaWRhdGUsXG4gICAgICByZXNldCxcbiAgICAgIHJlc2V0VmFsaWRhdGlvblxuICAgIH0pO1xuICB9KTtcbiAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICBmb3JtPy51bnJlZ2lzdGVyKHVpZC52YWx1ZSk7XG4gIH0pO1xuICBvbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIGlmICghdmFsaWRhdGVPbi52YWx1ZS5sYXp5KSB7XG4gICAgICBhd2FpdCB2YWxpZGF0ZSh0cnVlKTtcbiAgICB9XG4gICAgZm9ybT8udXBkYXRlKHVpZC52YWx1ZSwgaXNWYWxpZC52YWx1ZSwgZXJyb3JNZXNzYWdlcy52YWx1ZSk7XG4gIH0pO1xuICB1c2VUb2dnbGVTY29wZSgoKSA9PiB2YWxpZGF0ZU9uLnZhbHVlLmlucHV0LCAoKSA9PiB7XG4gICAgd2F0Y2godmFsaWRhdGlvbk1vZGVsLCAoKSA9PiB7XG4gICAgICBpZiAodmFsaWRhdGlvbk1vZGVsLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgdmFsaWRhdGUoKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcHMuZm9jdXNlZCkge1xuICAgICAgICBjb25zdCB1bndhdGNoID0gd2F0Y2goKCkgPT4gcHJvcHMuZm9jdXNlZCwgdmFsID0+IHtcbiAgICAgICAgICBpZiAoIXZhbCkgdmFsaWRhdGUoKTtcbiAgICAgICAgICB1bndhdGNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgdXNlVG9nZ2xlU2NvcGUoKCkgPT4gdmFsaWRhdGVPbi52YWx1ZS5ibHVyLCAoKSA9PiB7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuZm9jdXNlZCwgdmFsID0+IHtcbiAgICAgIGlmICghdmFsKSB2YWxpZGF0ZSgpO1xuICAgIH0pO1xuICB9KTtcbiAgd2F0Y2goaXNWYWxpZCwgKCkgPT4ge1xuICAgIGZvcm0/LnVwZGF0ZSh1aWQudmFsdWUsIGlzVmFsaWQudmFsdWUsIGVycm9yTWVzc2FnZXMudmFsdWUpO1xuICB9KTtcbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgbW9kZWwudmFsdWUgPSBudWxsO1xuICAgIG5leHRUaWNrKHJlc2V0VmFsaWRhdGlvbik7XG4gIH1cbiAgZnVuY3Rpb24gcmVzZXRWYWxpZGF0aW9uKCkge1xuICAgIGlzUHJpc3RpbmUudmFsdWUgPSB0cnVlO1xuICAgIGlmICghdmFsaWRhdGVPbi52YWx1ZS5sYXp5KSB7XG4gICAgICB2YWxpZGF0ZSh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW50ZXJuYWxFcnJvck1lc3NhZ2VzLnZhbHVlID0gW107XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICAgIGxldCBzaWxlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBpc1ZhbGlkYXRpbmcudmFsdWUgPSB0cnVlO1xuICAgIGZvciAoY29uc3QgcnVsZSBvZiBwcm9wcy5ydWxlcykge1xuICAgICAgaWYgKHJlc3VsdHMubGVuZ3RoID49ICsocHJvcHMubWF4RXJyb3JzID8/IDEpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY29uc3QgaGFuZGxlciA9IHR5cGVvZiBydWxlID09PSAnZnVuY3Rpb24nID8gcnVsZSA6ICgpID0+IHJ1bGU7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBoYW5kbGVyKHZhbGlkYXRpb25Nb2RlbC52YWx1ZSk7XG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSBjb250aW51ZTtcbiAgICAgIGlmIChyZXN1bHQgIT09IGZhbHNlICYmIHR5cGVvZiByZXN1bHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihgJHtyZXN1bHR9IGlzIG5vdCBhIHZhbGlkIHZhbHVlLiBSdWxlIGZ1bmN0aW9ucyBtdXN0IHJldHVybiBib29sZWFuIHRydWUgb3IgYSBzdHJpbmcuYCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCB8fCAnJyk7XG4gICAgfVxuICAgIGludGVybmFsRXJyb3JNZXNzYWdlcy52YWx1ZSA9IHJlc3VsdHM7XG4gICAgaXNWYWxpZGF0aW5nLnZhbHVlID0gZmFsc2U7XG4gICAgaXNQcmlzdGluZS52YWx1ZSA9IHNpbGVudDtcbiAgICByZXR1cm4gaW50ZXJuYWxFcnJvck1lc3NhZ2VzLnZhbHVlO1xuICB9XG4gIHJldHVybiB7XG4gICAgZXJyb3JNZXNzYWdlcyxcbiAgICBpc0RpcnR5LFxuICAgIGlzRGlzYWJsZWQsXG4gICAgaXNSZWFkb25seSxcbiAgICBpc1ByaXN0aW5lLFxuICAgIGlzVmFsaWQsXG4gICAgaXNWYWxpZGF0aW5nLFxuICAgIHJlc2V0LFxuICAgIHJlc2V0VmFsaWRhdGlvbixcbiAgICB2YWxpZGF0ZSxcbiAgICB2YWxpZGF0aW9uQ2xhc3Nlc1xuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGlvbi5tanMubWFwIiwiaW1wb3J0IHsgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZJbnB1dC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgdXNlSW5wdXRJY29uIH0gZnJvbSBcIi4vSW5wdXRJY29uLm1qc1wiO1xuaW1wb3J0IHsgVk1lc3NhZ2VzIH0gZnJvbSBcIi4uL1ZNZXNzYWdlcy9WTWVzc2FnZXMubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURlbnNpdHlQcm9wcywgdXNlRGVuc2l0eSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZW5zaXR5Lm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IG1ha2VWYWxpZGF0aW9uUHJvcHMsIHVzZVZhbGlkYXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdmFsaWRhdGlvbi5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBFdmVudFByb3AsIGdlbmVyaWNDb21wb25lbnQsIGdldFVpZCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVklucHV0UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBpZDogU3RyaW5nLFxuICBhcHBlbmRJY29uOiBJY29uVmFsdWUsXG4gIGNlbnRlckFmZml4OiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIHByZXBlbmRJY29uOiBJY29uVmFsdWUsXG4gIGhpZGVEZXRhaWxzOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgaGludDogU3RyaW5nLFxuICBwZXJzaXN0ZW50SGludDogQm9vbGVhbixcbiAgbWVzc2FnZXM6IHtcbiAgICB0eXBlOiBbQXJyYXksIFN0cmluZ10sXG4gICAgZGVmYXVsdDogKCkgPT4gW11cbiAgfSxcbiAgZGlyZWN0aW9uOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdob3Jpem9udGFsJyxcbiAgICB2YWxpZGF0b3I6IHYgPT4gWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10uaW5jbHVkZXModilcbiAgfSxcbiAgJ29uQ2xpY2s6cHJlcGVuZCc6IEV2ZW50UHJvcCgpLFxuICAnb25DbGljazphcHBlbmQnOiBFdmVudFByb3AoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZVZhbGlkYXRpb25Qcm9wcygpXG59LCAnVklucHV0Jyk7XG5leHBvcnQgY29uc3QgVklucHV0ID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZJbnB1dCcsXG4gIHByb3BzOiB7XG4gICAgLi4ubWFrZVZJbnB1dFByb3BzKClcbiAgfSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBhdHRycyxcbiAgICAgIHNsb3RzLFxuICAgICAgZW1pdFxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbnNpdHlDbGFzc2VzXG4gICAgfSA9IHVzZURlbnNpdHkocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJ0bENsYXNzZXNcbiAgICB9ID0gdXNlUnRsKCk7XG4gICAgY29uc3Qge1xuICAgICAgSW5wdXRJY29uXG4gICAgfSA9IHVzZUlucHV0SWNvbihwcm9wcyk7XG4gICAgY29uc3QgdWlkID0gZ2V0VWlkKCk7XG4gICAgY29uc3QgaWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5pZCB8fCBgaW5wdXQtJHt1aWR9YCk7XG4gICAgY29uc3QgbWVzc2FnZXNJZCA9IGNvbXB1dGVkKCgpID0+IGAke2lkLnZhbHVlfS1tZXNzYWdlc2ApO1xuICAgIGNvbnN0IHtcbiAgICAgIGVycm9yTWVzc2FnZXMsXG4gICAgICBpc0RpcnR5LFxuICAgICAgaXNEaXNhYmxlZCxcbiAgICAgIGlzUmVhZG9ubHksXG4gICAgICBpc1ByaXN0aW5lLFxuICAgICAgaXNWYWxpZCxcbiAgICAgIGlzVmFsaWRhdGluZyxcbiAgICAgIHJlc2V0LFxuICAgICAgcmVzZXRWYWxpZGF0aW9uLFxuICAgICAgdmFsaWRhdGUsXG4gICAgICB2YWxpZGF0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VWYWxpZGF0aW9uKHByb3BzLCAndi1pbnB1dCcsIGlkKTtcbiAgICBjb25zdCBzbG90UHJvcHMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgaWQsXG4gICAgICBtZXNzYWdlc0lkLFxuICAgICAgaXNEaXJ0eSxcbiAgICAgIGlzRGlzYWJsZWQsXG4gICAgICBpc1JlYWRvbmx5LFxuICAgICAgaXNQcmlzdGluZSxcbiAgICAgIGlzVmFsaWQsXG4gICAgICBpc1ZhbGlkYXRpbmcsXG4gICAgICByZXNldCxcbiAgICAgIHJlc2V0VmFsaWRhdGlvbixcbiAgICAgIHZhbGlkYXRlXG4gICAgfSkpO1xuICAgIGNvbnN0IG1lc3NhZ2VzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmVycm9yTWVzc2FnZXM/Lmxlbmd0aCB8fCAhaXNQcmlzdGluZS52YWx1ZSAmJiBlcnJvck1lc3NhZ2VzLnZhbHVlLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZXJyb3JNZXNzYWdlcy52YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcHMuaGludCAmJiAocHJvcHMucGVyc2lzdGVudEhpbnQgfHwgcHJvcHMuZm9jdXNlZCkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmhpbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcHJvcHMubWVzc2FnZXM7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IGhhc1ByZXBlbmQgPSAhIShzbG90cy5wcmVwZW5kIHx8IHByb3BzLnByZXBlbmRJY29uKTtcbiAgICAgIGNvbnN0IGhhc0FwcGVuZCA9ICEhKHNsb3RzLmFwcGVuZCB8fCBwcm9wcy5hcHBlbmRJY29uKTtcbiAgICAgIGNvbnN0IGhhc01lc3NhZ2VzID0gbWVzc2FnZXMudmFsdWUubGVuZ3RoID4gMDtcbiAgICAgIGNvbnN0IGhhc0RldGFpbHMgPSAhcHJvcHMuaGlkZURldGFpbHMgfHwgcHJvcHMuaGlkZURldGFpbHMgPT09ICdhdXRvJyAmJiAoaGFzTWVzc2FnZXMgfHwgISFzbG90cy5kZXRhaWxzKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1pbnB1dCcsIGB2LWlucHV0LS0ke3Byb3BzLmRpcmVjdGlvbn1gLCB7XG4gICAgICAgICAgJ3YtaW5wdXQtLWNlbnRlci1hZmZpeCc6IHByb3BzLmNlbnRlckFmZml4XG4gICAgICAgIH0sIGRlbnNpdHlDbGFzc2VzLnZhbHVlLCBydGxDbGFzc2VzLnZhbHVlLCB2YWxpZGF0aW9uQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9LCBbaGFzUHJlcGVuZCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImtleVwiOiBcInByZXBlbmRcIixcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtaW5wdXRfX3ByZXBlbmRcIlxuICAgICAgfSwgW3Nsb3RzLnByZXBlbmQ/LihzbG90UHJvcHMudmFsdWUpLCBwcm9wcy5wcmVwZW5kSWNvbiAmJiBfY3JlYXRlVk5vZGUoSW5wdXRJY29uLCB7XG4gICAgICAgIFwia2V5XCI6IFwicHJlcGVuZC1pY29uXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInByZXBlbmRcIlxuICAgICAgfSwgbnVsbCldKSwgc2xvdHMuZGVmYXVsdCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi1pbnB1dF9fY29udHJvbFwiXG4gICAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKHNsb3RQcm9wcy52YWx1ZSldKSwgaGFzQXBwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwiYXBwZW5kXCIsXG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWlucHV0X19hcHBlbmRcIlxuICAgICAgfSwgW3Byb3BzLmFwcGVuZEljb24gJiYgX2NyZWF0ZVZOb2RlKElucHV0SWNvbiwge1xuICAgICAgICBcImtleVwiOiBcImFwcGVuZC1pY29uXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImFwcGVuZFwiXG4gICAgICB9LCBudWxsKSwgc2xvdHMuYXBwZW5kPy4oc2xvdFByb3BzLnZhbHVlKV0pLCBoYXNEZXRhaWxzICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWlucHV0X19kZXRhaWxzXCJcbiAgICAgIH0sIFtfY3JlYXRlVk5vZGUoVk1lc3NhZ2VzLCB7XG4gICAgICAgIFwiaWRcIjogbWVzc2FnZXNJZC52YWx1ZSxcbiAgICAgICAgXCJhY3RpdmVcIjogaGFzTWVzc2FnZXMsXG4gICAgICAgIFwibWVzc2FnZXNcIjogbWVzc2FnZXMudmFsdWVcbiAgICAgIH0sIHtcbiAgICAgICAgbWVzc2FnZTogc2xvdHMubWVzc2FnZVxuICAgICAgfSksIHNsb3RzLmRldGFpbHM/LihzbG90UHJvcHMudmFsdWUpXSldKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzZXQsXG4gICAgICByZXNldFZhbGlkYXRpb24sXG4gICAgICB2YWxpZGF0ZVxuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VklucHV0Lm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkNoZWNrYm94LmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBtYWtlVkNoZWNrYm94QnRuUHJvcHMsIFZDaGVja2JveEJ0biB9IGZyb20gXCIuL1ZDaGVja2JveEJ0bi5tanNcIjtcbmltcG9ydCB7IG1ha2VWSW5wdXRQcm9wcywgVklucHV0IH0gZnJvbSBcIi4uL1ZJbnB1dC9WSW5wdXQubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VGb2N1cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb2N1cy5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZmlsdGVySW5wdXRBdHRycywgZ2VuZXJpY0NvbXBvbmVudCwgZ2V0VWlkLCBvbWl0LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWQ2hlY2tib3hQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC4uLm1ha2VWSW5wdXRQcm9wcygpLFxuICAuLi5vbWl0KG1ha2VWQ2hlY2tib3hCdG5Qcm9wcygpLCBbJ2lubGluZSddKVxufSwgJ1ZDaGVja2JveCcpO1xuZXhwb3J0IGNvbnN0IFZDaGVja2JveCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQ2hlY2tib3gnLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczogbWFrZVZDaGVja2JveFByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOmZvY3VzZWQnOiBmb2N1c2VkID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnMsXG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IG1vZGVsID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRm9jdXNlZCxcbiAgICAgIGZvY3VzLFxuICAgICAgYmx1clxuICAgIH0gPSB1c2VGb2N1cyhwcm9wcyk7XG4gICAgY29uc3QgdWlkID0gZ2V0VWlkKCk7XG4gICAgY29uc3QgaWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5pZCB8fCBgY2hlY2tib3gtJHt1aWR9YCk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFtyb290QXR0cnMsIGNvbnRyb2xBdHRyc10gPSBmaWx0ZXJJbnB1dEF0dHJzKGF0dHJzKTtcbiAgICAgIGNvbnN0IFtpbnB1dFByb3BzLCBfMV0gPSBWSW5wdXQuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgY29uc3QgW2NoZWNrYm94UHJvcHMsIF8yXSA9IFZDaGVja2JveEJ0bi5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZJbnB1dCwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcImNsYXNzXCI6IFsndi1jaGVja2JveCcsIHByb3BzLmNsYXNzXVxuICAgICAgfSwgcm9vdEF0dHJzLCBpbnB1dFByb3BzLCB7XG4gICAgICAgIFwibW9kZWxWYWx1ZVwiOiBtb2RlbC52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBtb2RlbC52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgXCJpZFwiOiBpZC52YWx1ZSxcbiAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZC52YWx1ZSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSksIHtcbiAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgIGRlZmF1bHQ6IF9yZWYyID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBtZXNzYWdlc0lkLFxuICAgICAgICAgICAgaXNEaXNhYmxlZCxcbiAgICAgICAgICAgIGlzUmVhZG9ubHlcbiAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWQ2hlY2tib3hCdG4sIF9tZXJnZVByb3BzKGNoZWNrYm94UHJvcHMsIHtcbiAgICAgICAgICAgIFwiaWRcIjogaWQudmFsdWUsXG4gICAgICAgICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogbWVzc2FnZXNJZC52YWx1ZSxcbiAgICAgICAgICAgIFwiZGlzYWJsZWRcIjogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICAgICAgIFwicmVhZG9ubHlcIjogaXNSZWFkb25seS52YWx1ZVxuICAgICAgICAgIH0sIGNvbnRyb2xBdHRycywge1xuICAgICAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBtb2RlbC52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgICAgIFwib25Gb2N1c1wiOiBmb2N1cyxcbiAgICAgICAgICAgIFwib25CbHVyXCI6IGJsdXJcbiAgICAgICAgICB9KSwgc2xvdHMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNoZWNrYm94Lm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkF2YXRhci5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkljb24gfSBmcm9tIFwiLi4vVkljb24vaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWSW1nIH0gZnJvbSBcIi4uL1ZJbWcvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURlbnNpdHlQcm9wcywgdXNlRGVuc2l0eSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZW5zaXR5Lm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdW5kZWRQcm9wcywgdXNlUm91bmRlZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNpemVQcm9wcywgdXNlU2l6ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zaXplLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7XG5pbXBvcnQgeyBnZW5PdmVybGF5cywgbWFrZVZhcmlhbnRQcm9wcywgdXNlVmFyaWFudCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy92YXJpYW50Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZBdmF0YXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHN0YXJ0OiBCb29sZWFuLFxuICBlbmQ6IEJvb2xlYW4sXG4gIGljb246IEljb25WYWx1ZSxcbiAgaW1hZ2U6IFN0cmluZyxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlU2l6ZVByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpLFxuICAuLi5tYWtlVmFyaWFudFByb3BzKHtcbiAgICB2YXJpYW50OiAnZmxhdCdcbiAgfSlcbn0sICdWQXZhdGFyJyk7XG5leHBvcnQgY29uc3QgVkF2YXRhciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQXZhdGFyJyxcbiAgcHJvcHM6IG1ha2VWQXZhdGFyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBjb2xvckNsYXNzZXMsXG4gICAgICBjb2xvclN0eWxlcyxcbiAgICAgIHZhcmlhbnRDbGFzc2VzXG4gICAgfSA9IHVzZVZhcmlhbnQocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbnNpdHlDbGFzc2VzXG4gICAgfSA9IHVzZURlbnNpdHkocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNpemVDbGFzc2VzLFxuICAgICAgc2l6ZVN0eWxlc1xuICAgIH0gPSB1c2VTaXplKHByb3BzKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtYXZhdGFyJywge1xuICAgICAgICAndi1hdmF0YXItLXN0YXJ0JzogcHJvcHMuc3RhcnQsXG4gICAgICAgICd2LWF2YXRhci0tZW5kJzogcHJvcHMuZW5kXG4gICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIGNvbG9yQ2xhc3Nlcy52YWx1ZSwgZGVuc2l0eUNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCBzaXplQ2xhc3Nlcy52YWx1ZSwgdmFyaWFudENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW2NvbG9yU3R5bGVzLnZhbHVlLCBzaXplU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV1cbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbcHJvcHMuaW1hZ2UgPyBfY3JlYXRlVk5vZGUoVkltZywge1xuICAgICAgICBcImtleVwiOiBcImltYWdlXCIsXG4gICAgICAgIFwic3JjXCI6IHByb3BzLmltYWdlLFxuICAgICAgICBcImFsdFwiOiBcIlwiLFxuICAgICAgICBcImNvdmVyXCI6IHRydWVcbiAgICAgIH0sIG51bGwpIDogcHJvcHMuaWNvbiA/IF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICBcImtleVwiOiBcImljb25cIixcbiAgICAgICAgXCJpY29uXCI6IHByb3BzLmljb25cbiAgICAgIH0sIG51bGwpIDogc2xvdHMuZGVmYXVsdD8uKCksIGdlbk92ZXJsYXlzKGZhbHNlLCAndi1hdmF0YXInKV1cbiAgICB9KSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZBdmF0YXIubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQ2hpcEdyb3VwLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjtcbmltcG9ydCB7IG1ha2VHcm91cFByb3BzLCB1c2VHcm91cCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ncm91cC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZhcmlhbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy92YXJpYW50Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlZXBFcXVhbCwgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBWQ2hpcEdyb3VwU3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTp2LWNoaXAtZ3JvdXAnKTtcbmV4cG9ydCBjb25zdCBtYWtlVkNoaXBHcm91cFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29sdW1uOiBCb29sZWFuLFxuICBmaWx0ZXI6IEJvb2xlYW4sXG4gIHZhbHVlQ29tcGFyYXRvcjoge1xuICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgIGRlZmF1bHQ6IGRlZXBFcXVhbFxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUdyb3VwUHJvcHMoe1xuICAgIHNlbGVjdGVkQ2xhc3M6ICd2LWNoaXAtLXNlbGVjdGVkJ1xuICB9KSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKCksXG4gIC4uLm1ha2VWYXJpYW50UHJvcHMoe1xuICAgIHZhcmlhbnQ6ICd0b25hbCdcbiAgfSlcbn0sICdWQ2hpcEdyb3VwJyk7XG5leHBvcnQgY29uc3QgVkNoaXBHcm91cCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQ2hpcEdyb3VwJyxcbiAgcHJvcHM6IG1ha2VWQ2hpcEdyb3VwUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWx1ZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgaXNTZWxlY3RlZCxcbiAgICAgIHNlbGVjdCxcbiAgICAgIG5leHQsXG4gICAgICBwcmV2LFxuICAgICAgc2VsZWN0ZWRcbiAgICB9ID0gdXNlR3JvdXAocHJvcHMsIFZDaGlwR3JvdXBTeW1ib2wpO1xuICAgIHByb3ZpZGVEZWZhdWx0cyh7XG4gICAgICBWQ2hpcDoge1xuICAgICAgICBjb2xvcjogdG9SZWYocHJvcHMsICdjb2xvcicpLFxuICAgICAgICBkaXNhYmxlZDogdG9SZWYocHJvcHMsICdkaXNhYmxlZCcpLFxuICAgICAgICBmaWx0ZXI6IHRvUmVmKHByb3BzLCAnZmlsdGVyJyksXG4gICAgICAgIHZhcmlhbnQ6IHRvUmVmKHByb3BzLCAndmFyaWFudCcpXG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWNoaXAtZ3JvdXAnLCB7XG4gICAgICAgICd2LWNoaXAtZ3JvdXAtLWNvbHVtbic6IHByb3BzLmNvbHVtblxuICAgICAgfSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmRlZmF1bHQ/Lih7XG4gICAgICAgIGlzU2VsZWN0ZWQsXG4gICAgICAgIHNlbGVjdCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgcHJldixcbiAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLnZhbHVlXG4gICAgICB9KV1cbiAgICB9KSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDaGlwR3JvdXAubWpzLm1hcCIsImltcG9ydCB7IG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCB2U2hvdyBhcyBfdlNob3csIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8qIGVzbGludC1kaXNhYmxlIGNvbXBsZXhpdHkgKi9cbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQ2hpcC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkV4cGFuZFhUcmFuc2l0aW9uIH0gZnJvbSBcIi4uL3RyYW5zaXRpb25zL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkF2YXRhciB9IGZyb20gXCIuLi9WQXZhdGFyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkNoaXBHcm91cFN5bWJvbCB9IGZyb20gXCIuLi9WQ2hpcEdyb3VwL1ZDaGlwR3JvdXAubWpzXCI7XG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZJY29uIH0gZnJvbSBcIi4uL1ZJY29uL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUJvcmRlclByb3BzLCB1c2VCb3JkZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvYm9yZGVyLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VEZW5zaXR5UHJvcHMsIHVzZURlbnNpdHkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVuc2l0eS5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VHcm91cEl0ZW1Qcm9wcywgdXNlR3JvdXBJdGVtIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2dyb3VwLm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91dGVyUHJvcHMsIHVzZUxpbmsgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91dGVyLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNpemVQcm9wcywgdXNlU2l6ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zaXplLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7XG5pbXBvcnQgeyBnZW5PdmVybGF5cywgbWFrZVZhcmlhbnRQcm9wcywgdXNlVmFyaWFudCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy92YXJpYW50Lm1qc1wiOyAvLyBEaXJlY3RpdmVzXG5pbXBvcnQgeyBSaXBwbGUgfSBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9yaXBwbGUvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgRXZlbnRQcm9wLCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkNoaXBQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVuZEF2YXRhcjogU3RyaW5nLFxuICBhcHBlbmRJY29uOiBJY29uVmFsdWUsXG4gIGNsb3NhYmxlOiBCb29sZWFuLFxuICBjbG9zZUljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRkZWxldGUnXG4gIH0sXG4gIGNsb3NlTGFiZWw6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJyR2dWV0aWZ5LmNsb3NlJ1xuICB9LFxuICBkcmFnZ2FibGU6IEJvb2xlYW4sXG4gIGZpbHRlcjogQm9vbGVhbixcbiAgZmlsdGVySWNvbjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJGNvbXBsZXRlJ1xuICB9LFxuICBsYWJlbDogQm9vbGVhbixcbiAgbGluazoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gIH0sXG4gIHBpbGw6IEJvb2xlYW4sXG4gIHByZXBlbmRBdmF0YXI6IFN0cmluZyxcbiAgcHJlcGVuZEljb246IEljb25WYWx1ZSxcbiAgcmlwcGxlOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIE9iamVjdF0sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICB0ZXh0OiBTdHJpbmcsXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgb25DbGljazogRXZlbnRQcm9wKCksXG4gIG9uQ2xpY2tPbmNlOiBFdmVudFByb3AoKSxcbiAgLi4ubWFrZUJvcmRlclByb3BzKCksXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGVuc2l0eVByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlR3JvdXBJdGVtUHJvcHMoKSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlUm91dGVyUHJvcHMoKSxcbiAgLi4ubWFrZVNpemVQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoe1xuICAgIHRhZzogJ3NwYW4nXG4gIH0pLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpLFxuICAuLi5tYWtlVmFyaWFudFByb3BzKHtcbiAgICB2YXJpYW50OiAndG9uYWwnXG4gIH0pXG59LCAnVkNoaXAnKTtcbmV4cG9ydCBjb25zdCBWQ2hpcCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQ2hpcCcsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICBSaXBwbGVcbiAgfSxcbiAgcHJvcHM6IG1ha2VWQ2hpcFByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ2NsaWNrOmNsb3NlJzogZSA9PiB0cnVlLFxuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWUsXG4gICAgJ2dyb3VwOnNlbGVjdGVkJzogdmFsID0+IHRydWUsXG4gICAgY2xpY2s6IGUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBhdHRycyxcbiAgICAgIGVtaXQsXG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRcbiAgICB9ID0gdXNlTG9jYWxlKCk7XG4gICAgY29uc3Qge1xuICAgICAgYm9yZGVyQ2xhc3Nlc1xuICAgIH0gPSB1c2VCb3JkZXIocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbG9yQ2xhc3NlcyxcbiAgICAgIGNvbG9yU3R5bGVzLFxuICAgICAgdmFyaWFudENsYXNzZXNcbiAgICB9ID0gdXNlVmFyaWFudChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGVuc2l0eUNsYXNzZXNcbiAgICB9ID0gdXNlRGVuc2l0eShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNpemVDbGFzc2VzXG4gICAgfSA9IHVzZVNpemUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IGdyb3VwID0gdXNlR3JvdXBJdGVtKHByb3BzLCBWQ2hpcEdyb3VwU3ltYm9sLCBmYWxzZSk7XG4gICAgY29uc3QgbGluayA9IHVzZUxpbmsocHJvcHMsIGF0dHJzKTtcbiAgICBjb25zdCBpc0xpbmsgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5saW5rICE9PSBmYWxzZSAmJiBsaW5rLmlzTGluay52YWx1ZSk7XG4gICAgY29uc3QgaXNDbGlja2FibGUgPSBjb21wdXRlZCgoKSA9PiAhcHJvcHMuZGlzYWJsZWQgJiYgcHJvcHMubGluayAhPT0gZmFsc2UgJiYgKCEhZ3JvdXAgfHwgcHJvcHMubGluayB8fCBsaW5rLmlzQ2xpY2thYmxlLnZhbHVlKSk7XG4gICAgY29uc3QgY2xvc2VQcm9wcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAnYXJpYS1sYWJlbCc6IHQocHJvcHMuY2xvc2VMYWJlbCksXG4gICAgICBvbkNsaWNrKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgaXNBY3RpdmUudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgZW1pdCgnY2xpY2s6Y2xvc2UnLCBlKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICBlbWl0KCdjbGljaycsIGUpO1xuICAgICAgaWYgKCFpc0NsaWNrYWJsZS52YWx1ZSkgcmV0dXJuO1xuICAgICAgbGluay5uYXZpZ2F0ZT8uKGUpO1xuICAgICAgZ3JvdXA/LnRvZ2dsZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbktleURvd24oZSkge1xuICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInIHx8IGUua2V5ID09PSAnICcpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBvbkNsaWNrKGUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgVGFnID0gbGluay5pc0xpbmsudmFsdWUgPyAnYScgOiBwcm9wcy50YWc7XG4gICAgICBjb25zdCBoYXNBcHBlbmRNZWRpYSA9ICEhKHByb3BzLmFwcGVuZEljb24gfHwgcHJvcHMuYXBwZW5kQXZhdGFyKTtcbiAgICAgIGNvbnN0IGhhc0FwcGVuZCA9ICEhKGhhc0FwcGVuZE1lZGlhIHx8IHNsb3RzLmFwcGVuZCk7XG4gICAgICBjb25zdCBoYXNDbG9zZSA9ICEhKHNsb3RzLmNsb3NlIHx8IHByb3BzLmNsb3NhYmxlKTtcbiAgICAgIGNvbnN0IGhhc0ZpbHRlciA9ICEhKHNsb3RzLmZpbHRlciB8fCBwcm9wcy5maWx0ZXIpICYmIGdyb3VwO1xuICAgICAgY29uc3QgaGFzUHJlcGVuZE1lZGlhID0gISEocHJvcHMucHJlcGVuZEljb24gfHwgcHJvcHMucHJlcGVuZEF2YXRhcik7XG4gICAgICBjb25zdCBoYXNQcmVwZW5kID0gISEoaGFzUHJlcGVuZE1lZGlhIHx8IHNsb3RzLnByZXBlbmQpO1xuICAgICAgY29uc3QgaGFzQ29sb3IgPSAhZ3JvdXAgfHwgZ3JvdXAuaXNTZWxlY3RlZC52YWx1ZTtcbiAgICAgIHJldHVybiBpc0FjdGl2ZS52YWx1ZSAmJiBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1jaGlwJywge1xuICAgICAgICAgICd2LWNoaXAtLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgJ3YtY2hpcC0tbGFiZWwnOiBwcm9wcy5sYWJlbCxcbiAgICAgICAgICAndi1jaGlwLS1saW5rJzogaXNDbGlja2FibGUudmFsdWUsXG4gICAgICAgICAgJ3YtY2hpcC0tZmlsdGVyJzogaGFzRmlsdGVyLFxuICAgICAgICAgICd2LWNoaXAtLXBpbGwnOiBwcm9wcy5waWxsXG4gICAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgYm9yZGVyQ2xhc3Nlcy52YWx1ZSwgaGFzQ29sb3IgPyBjb2xvckNsYXNzZXMudmFsdWUgOiB1bmRlZmluZWQsIGRlbnNpdHlDbGFzc2VzLnZhbHVlLCBlbGV2YXRpb25DbGFzc2VzLnZhbHVlLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgc2l6ZUNsYXNzZXMudmFsdWUsIHZhcmlhbnRDbGFzc2VzLnZhbHVlLCBncm91cD8uc2VsZWN0ZWRDbGFzcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFtoYXNDb2xvciA/IGNvbG9yU3R5bGVzLnZhbHVlIDogdW5kZWZpbmVkLCBwcm9wcy5zdHlsZV0sXG4gICAgICAgIFwiZGlzYWJsZWRcIjogcHJvcHMuZGlzYWJsZWQgfHwgdW5kZWZpbmVkLFxuICAgICAgICBcImRyYWdnYWJsZVwiOiBwcm9wcy5kcmFnZ2FibGUsXG4gICAgICAgIFwiaHJlZlwiOiBsaW5rLmhyZWYudmFsdWUsXG4gICAgICAgIFwidGFiaW5kZXhcIjogaXNDbGlja2FibGUudmFsdWUgPyAwIDogdW5kZWZpbmVkLFxuICAgICAgICBcIm9uQ2xpY2tcIjogb25DbGljayxcbiAgICAgICAgXCJvbktleWRvd25cIjogaXNDbGlja2FibGUudmFsdWUgJiYgIWlzTGluay52YWx1ZSAmJiBvbktleURvd25cbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW2dlbk92ZXJsYXlzKGlzQ2xpY2thYmxlLnZhbHVlLCAndi1jaGlwJyksIGhhc0ZpbHRlciAmJiBfY3JlYXRlVk5vZGUoVkV4cGFuZFhUcmFuc2l0aW9uLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJmaWx0ZXJcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW193aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtY2hpcF9fZmlsdGVyXCJcbiAgICAgICAgICB9LCBbIXNsb3RzLmZpbHRlciA/IF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgICAgXCJrZXlcIjogXCJmaWx0ZXItaWNvblwiLFxuICAgICAgICAgICAgXCJpY29uXCI6IHByb3BzLmZpbHRlckljb25cbiAgICAgICAgICB9LCBudWxsKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgICAgXCJrZXlcIjogXCJmaWx0ZXItZGVmYXVsdHNcIixcbiAgICAgICAgICAgIFwiZGlzYWJsZWRcIjogIXByb3BzLmZpbHRlckljb24sXG4gICAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgICAgVkljb246IHtcbiAgICAgICAgICAgICAgICBpY29uOiBwcm9wcy5maWx0ZXJJY29uXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBzbG90cy5maWx0ZXIpXSksIFtbX3ZTaG93LCBncm91cC5pc1NlbGVjdGVkLnZhbHVlXV0pXVxuICAgICAgICB9KSwgaGFzUHJlcGVuZCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZFwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWNoaXBfX3ByZXBlbmRcIlxuICAgICAgICB9LCBbIXNsb3RzLnByZXBlbmQgPyBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbcHJvcHMucHJlcGVuZEljb24gJiYgX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWljb25cIixcbiAgICAgICAgICBcImljb25cIjogcHJvcHMucHJlcGVuZEljb24sXG4gICAgICAgICAgXCJzdGFydFwiOiB0cnVlXG4gICAgICAgIH0sIG51bGwpLCBwcm9wcy5wcmVwZW5kQXZhdGFyICYmIF9jcmVhdGVWTm9kZShWQXZhdGFyLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWF2YXRhclwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogcHJvcHMucHJlcGVuZEF2YXRhcixcbiAgICAgICAgICBcInN0YXJ0XCI6IHRydWVcbiAgICAgICAgfSwgbnVsbCldKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZC1kZWZhdWx0c1wiLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogIWhhc1ByZXBlbmRNZWRpYSxcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZBdmF0YXI6IHtcbiAgICAgICAgICAgICAgaW1hZ2U6IHByb3BzLnByZXBlbmRBdmF0YXIsXG4gICAgICAgICAgICAgIHN0YXJ0OiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgVkljb246IHtcbiAgICAgICAgICAgICAgaWNvbjogcHJvcHMucHJlcGVuZEljb24sXG4gICAgICAgICAgICAgIHN0YXJ0OiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBzbG90cy5wcmVwZW5kKV0pLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWNoaXBfX2NvbnRlbnRcIlxuICAgICAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKHtcbiAgICAgICAgICBpc1NlbGVjdGVkOiBncm91cD8uaXNTZWxlY3RlZC52YWx1ZSxcbiAgICAgICAgICBzZWxlY3RlZENsYXNzOiBncm91cD8uc2VsZWN0ZWRDbGFzcy52YWx1ZSxcbiAgICAgICAgICBzZWxlY3Q6IGdyb3VwPy5zZWxlY3QsXG4gICAgICAgICAgdG9nZ2xlOiBncm91cD8udG9nZ2xlLFxuICAgICAgICAgIHZhbHVlOiBncm91cD8udmFsdWUudmFsdWUsXG4gICAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkXG4gICAgICAgIH0pID8/IHByb3BzLnRleHRdKSwgaGFzQXBwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJhcHBlbmRcIixcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1jaGlwX19hcHBlbmRcIlxuICAgICAgICB9LCBbIXNsb3RzLmFwcGVuZCA/IF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtwcm9wcy5hcHBlbmRJY29uICYmIF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgIFwia2V5XCI6IFwiYXBwZW5kLWljb25cIixcbiAgICAgICAgICBcImVuZFwiOiB0cnVlLFxuICAgICAgICAgIFwiaWNvblwiOiBwcm9wcy5hcHBlbmRJY29uXG4gICAgICAgIH0sIG51bGwpLCBwcm9wcy5hcHBlbmRBdmF0YXIgJiYgX2NyZWF0ZVZOb2RlKFZBdmF0YXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImFwcGVuZC1hdmF0YXJcIixcbiAgICAgICAgICBcImVuZFwiOiB0cnVlLFxuICAgICAgICAgIFwiaW1hZ2VcIjogcHJvcHMuYXBwZW5kQXZhdGFyXG4gICAgICAgIH0sIG51bGwpXSkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImFwcGVuZC1kZWZhdWx0c1wiLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogIWhhc0FwcGVuZE1lZGlhLFxuICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgVkF2YXRhcjoge1xuICAgICAgICAgICAgICBlbmQ6IHRydWUsXG4gICAgICAgICAgICAgIGltYWdlOiBwcm9wcy5hcHBlbmRBdmF0YXJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBWSWNvbjoge1xuICAgICAgICAgICAgICBlbmQ6IHRydWUsXG4gICAgICAgICAgICAgIGljb246IHByb3BzLmFwcGVuZEljb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHNsb3RzLmFwcGVuZCldKSwgaGFzQ2xvc2UgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICBcImtleVwiOiBcImNsb3NlXCIsXG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtY2hpcF9fY2xvc2VcIlxuICAgICAgICB9LCBjbG9zZVByb3BzLnZhbHVlKSwgWyFzbG90cy5jbG9zZSA/IF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgIFwia2V5XCI6IFwiY2xvc2UtaWNvblwiLFxuICAgICAgICAgIFwiaWNvblwiOiBwcm9wcy5jbG9zZUljb24sXG4gICAgICAgICAgXCJzaXplXCI6IFwieC1zbWFsbFwiXG4gICAgICAgIH0sIG51bGwpIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJjbG9zZS1kZWZhdWx0c1wiLFxuICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgVkljb246IHtcbiAgICAgICAgICAgICAgaWNvbjogcHJvcHMuY2xvc2VJY29uLFxuICAgICAgICAgICAgICBzaXplOiAneC1zbWFsbCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHNsb3RzLmNsb3NlKV0pXVxuICAgICAgfSksIFtbX3Jlc29sdmVEaXJlY3RpdmUoXCJyaXBwbGVcIiksIGlzQ2xpY2thYmxlLnZhbHVlICYmIHByb3BzLnJpcHBsZSwgbnVsbF1dKTtcbiAgICB9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDaGlwLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBpbmplY3QsIHByb3ZpZGUsIHNoYWxsb3dSZWYgfSBmcm9tICd2dWUnO1xuXG4vLyBUeXBlc1xuXG4vLyBEZXB0aFxuZXhwb3J0IGNvbnN0IERlcHRoS2V5ID0gU3ltYm9sLmZvcigndnVldGlmeTpkZXB0aCcpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURlcHRoKGhhc1ByZXBlbmQpIHtcbiAgY29uc3QgcGFyZW50ID0gaW5qZWN0KERlcHRoS2V5LCBzaGFsbG93UmVmKC0xKSk7XG4gIGNvbnN0IGRlcHRoID0gY29tcHV0ZWQoKCkgPT4gcGFyZW50LnZhbHVlICsgMSArIChoYXNQcmVwZW5kPy52YWx1ZSA/IDEgOiAwKSk7XG4gIHByb3ZpZGUoRGVwdGhLZXksIGRlcHRoKTtcbiAgcmV0dXJuIGRlcHRoO1xufVxuXG4vLyBMaXN0XG5leHBvcnQgY29uc3QgTGlzdEtleSA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6bGlzdCcpO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxpc3QoKSB7XG4gIGNvbnN0IHBhcmVudCA9IGluamVjdChMaXN0S2V5LCB7XG4gICAgaGFzUHJlcGVuZDogc2hhbGxvd1JlZihmYWxzZSksXG4gICAgdXBkYXRlSGFzUHJlcGVuZDogKCkgPT4gbnVsbFxuICB9KTtcbiAgY29uc3QgZGF0YSA9IHtcbiAgICBoYXNQcmVwZW5kOiBzaGFsbG93UmVmKGZhbHNlKSxcbiAgICB1cGRhdGVIYXNQcmVwZW5kOiB2YWx1ZSA9PiB7XG4gICAgICBpZiAodmFsdWUpIGRhdGEuaGFzUHJlcGVuZC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfTtcbiAgcHJvdmlkZShMaXN0S2V5LCBkYXRhKTtcbiAgcmV0dXJuIHBhcmVudDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VMaXN0KCkge1xuICByZXR1cm4gaW5qZWN0KExpc3RLZXksIG51bGwpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdC5tanMubWFwIiwiZXhwb3J0IGNvbnN0IHNpbmdsZU9wZW5TdHJhdGVneSA9IHtcbiAgb3BlbjogX3JlZiA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGlkLFxuICAgICAgdmFsdWUsXG4gICAgICBvcGVuZWQsXG4gICAgICBwYXJlbnRzXG4gICAgfSA9IF9yZWY7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCBuZXdPcGVuZWQgPSBuZXcgU2V0KCk7XG4gICAgICBuZXdPcGVuZWQuYWRkKGlkKTtcbiAgICAgIGxldCBwYXJlbnQgPSBwYXJlbnRzLmdldChpZCk7XG4gICAgICB3aGlsZSAocGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgbmV3T3BlbmVkLmFkZChwYXJlbnQpO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnRzLmdldChwYXJlbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld09wZW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3BlbmVkLmRlbGV0ZShpZCk7XG4gICAgICByZXR1cm4gb3BlbmVkO1xuICAgIH1cbiAgfSxcbiAgc2VsZWN0OiAoKSA9PiBudWxsXG59O1xuZXhwb3J0IGNvbnN0IG11bHRpcGxlT3BlblN0cmF0ZWd5ID0ge1xuICBvcGVuOiBfcmVmMiA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGlkLFxuICAgICAgdmFsdWUsXG4gICAgICBvcGVuZWQsXG4gICAgICBwYXJlbnRzXG4gICAgfSA9IF9yZWYyO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgbGV0IHBhcmVudCA9IHBhcmVudHMuZ2V0KGlkKTtcbiAgICAgIG9wZW5lZC5hZGQoaWQpO1xuICAgICAgd2hpbGUgKHBhcmVudCAhPSBudWxsICYmIHBhcmVudCAhPT0gaWQpIHtcbiAgICAgICAgb3BlbmVkLmFkZChwYXJlbnQpO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnRzLmdldChwYXJlbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wZW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3BlbmVkLmRlbGV0ZShpZCk7XG4gICAgfVxuICAgIHJldHVybiBvcGVuZWQ7XG4gIH0sXG4gIHNlbGVjdDogKCkgPT4gbnVsbFxufTtcbmV4cG9ydCBjb25zdCBsaXN0T3BlblN0cmF0ZWd5ID0ge1xuICBvcGVuOiBtdWx0aXBsZU9wZW5TdHJhdGVneS5vcGVuLFxuICBzZWxlY3Q6IF9yZWYzID0+IHtcbiAgICBsZXQge1xuICAgICAgaWQsXG4gICAgICB2YWx1ZSxcbiAgICAgIG9wZW5lZCxcbiAgICAgIHBhcmVudHNcbiAgICB9ID0gX3JlZjM7XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIG9wZW5lZDtcbiAgICBjb25zdCBwYXRoID0gW107XG4gICAgbGV0IHBhcmVudCA9IHBhcmVudHMuZ2V0KGlkKTtcbiAgICB3aGlsZSAocGFyZW50ICE9IG51bGwpIHtcbiAgICAgIHBhdGgucHVzaChwYXJlbnQpO1xuICAgICAgcGFyZW50ID0gcGFyZW50cy5nZXQocGFyZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTZXQocGF0aCk7XG4gIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVuU3RyYXRlZ2llcy5tanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgc29uYXJqcy9uby1pZGVudGljYWwtZnVuY3Rpb25zICovXG4vLyBVdGlsaXRpZXNcbmltcG9ydCB7IHRvUmF3IH0gZnJvbSAndnVlJztcbmV4cG9ydCBjb25zdCBpbmRlcGVuZGVudFNlbGVjdFN0cmF0ZWd5ID0gbWFuZGF0b3J5ID0+IHtcbiAgY29uc3Qgc3RyYXRlZ3kgPSB7XG4gICAgc2VsZWN0OiBfcmVmID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGlkLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgc2VsZWN0ZWRcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgaWQgPSB0b1JhdyhpZCk7XG5cbiAgICAgIC8vIFdoZW4gbWFuZGF0b3J5IGFuZCB3ZSdyZSB0cnlpbmcgdG8gZGVzZWxlY3Qgd2hlbiBpZFxuICAgICAgLy8gaXMgdGhlIG9ubHkgY3VycmVudGx5IHNlbGVjdGVkIGl0ZW0gdGhlbiBkbyBub3RoaW5nXG4gICAgICBpZiAobWFuZGF0b3J5ICYmICF2YWx1ZSkge1xuICAgICAgICBjb25zdCBvbiA9IEFycmF5LmZyb20oc2VsZWN0ZWQuZW50cmllcygpKS5yZWR1Y2UoKGFyciwgX3JlZjIpID0+IHtcbiAgICAgICAgICBsZXQgW2tleSwgdmFsdWVdID0gX3JlZjI7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09PSAnb24nID8gWy4uLmFyciwga2V5XSA6IGFycjtcbiAgICAgICAgfSwgW10pO1xuICAgICAgICBpZiAob24ubGVuZ3RoID09PSAxICYmIG9uWzBdID09PSBpZCkgcmV0dXJuIHNlbGVjdGVkO1xuICAgICAgfVxuICAgICAgc2VsZWN0ZWQuc2V0KGlkLCB2YWx1ZSA/ICdvbicgOiAnb2ZmJyk7XG4gICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgfSxcbiAgICBpbjogKHYsIGNoaWxkcmVuLCBwYXJlbnRzKSA9PiB7XG4gICAgICBsZXQgbWFwID0gbmV3IE1hcCgpO1xuICAgICAgZm9yIChjb25zdCBpZCBvZiB2IHx8IFtdKSB7XG4gICAgICAgIG1hcCA9IHN0cmF0ZWd5LnNlbGVjdCh7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgICAgc2VsZWN0ZWQ6IG5ldyBNYXAobWFwKSxcbiAgICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgICBwYXJlbnRzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LFxuICAgIG91dDogdiA9PiB7XG4gICAgICBjb25zdCBhcnIgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHYuZW50cmllcygpKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJ29uJykgYXJyLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuICB9O1xuICByZXR1cm4gc3RyYXRlZ3k7XG59O1xuZXhwb3J0IGNvbnN0IGluZGVwZW5kZW50U2luZ2xlU2VsZWN0U3RyYXRlZ3kgPSBtYW5kYXRvcnkgPT4ge1xuICBjb25zdCBwYXJlbnRTdHJhdGVneSA9IGluZGVwZW5kZW50U2VsZWN0U3RyYXRlZ3kobWFuZGF0b3J5KTtcbiAgY29uc3Qgc3RyYXRlZ3kgPSB7XG4gICAgc2VsZWN0OiBfcmVmMyA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgaWQsXG4gICAgICAgIC4uLnJlc3RcbiAgICAgIH0gPSBfcmVmMztcbiAgICAgIGlkID0gdG9SYXcoaWQpO1xuICAgICAgY29uc3Qgc2luZ2xlU2VsZWN0ZWQgPSBzZWxlY3RlZC5oYXMoaWQpID8gbmV3IE1hcChbW2lkLCBzZWxlY3RlZC5nZXQoaWQpXV0pIDogbmV3IE1hcCgpO1xuICAgICAgcmV0dXJuIHBhcmVudFN0cmF0ZWd5LnNlbGVjdCh7XG4gICAgICAgIC4uLnJlc3QsXG4gICAgICAgIGlkLFxuICAgICAgICBzZWxlY3RlZDogc2luZ2xlU2VsZWN0ZWRcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaW46ICh2LCBjaGlsZHJlbiwgcGFyZW50cykgPT4ge1xuICAgICAgbGV0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgIGlmICh2Py5sZW5ndGgpIHtcbiAgICAgICAgbWFwID0gcGFyZW50U3RyYXRlZ3kuaW4odi5zbGljZSgwLCAxKSwgY2hpbGRyZW4sIHBhcmVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LFxuICAgIG91dDogKHYsIGNoaWxkcmVuLCBwYXJlbnRzKSA9PiB7XG4gICAgICByZXR1cm4gcGFyZW50U3RyYXRlZ3kub3V0KHYsIGNoaWxkcmVuLCBwYXJlbnRzKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBzdHJhdGVneTtcbn07XG5leHBvcnQgY29uc3QgbGVhZlNlbGVjdFN0cmF0ZWd5ID0gbWFuZGF0b3J5ID0+IHtcbiAgY29uc3QgcGFyZW50U3RyYXRlZ3kgPSBpbmRlcGVuZGVudFNlbGVjdFN0cmF0ZWd5KG1hbmRhdG9yeSk7XG4gIGNvbnN0IHN0cmF0ZWd5ID0ge1xuICAgIHNlbGVjdDogX3JlZjQgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgaWQsXG4gICAgICAgIHNlbGVjdGVkLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgLi4ucmVzdFxuICAgICAgfSA9IF9yZWY0O1xuICAgICAgaWQgPSB0b1JhdyhpZCk7XG4gICAgICBpZiAoY2hpbGRyZW4uaGFzKGlkKSkgcmV0dXJuIHNlbGVjdGVkO1xuICAgICAgcmV0dXJuIHBhcmVudFN0cmF0ZWd5LnNlbGVjdCh7XG4gICAgICAgIGlkLFxuICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIC4uLnJlc3RcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaW46IHBhcmVudFN0cmF0ZWd5LmluLFxuICAgIG91dDogcGFyZW50U3RyYXRlZ3kub3V0XG4gIH07XG4gIHJldHVybiBzdHJhdGVneTtcbn07XG5leHBvcnQgY29uc3QgbGVhZlNpbmdsZVNlbGVjdFN0cmF0ZWd5ID0gbWFuZGF0b3J5ID0+IHtcbiAgY29uc3QgcGFyZW50U3RyYXRlZ3kgPSBpbmRlcGVuZGVudFNpbmdsZVNlbGVjdFN0cmF0ZWd5KG1hbmRhdG9yeSk7XG4gIGNvbnN0IHN0cmF0ZWd5ID0ge1xuICAgIHNlbGVjdDogX3JlZjUgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgaWQsXG4gICAgICAgIHNlbGVjdGVkLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgLi4ucmVzdFxuICAgICAgfSA9IF9yZWY1O1xuICAgICAgaWQgPSB0b1JhdyhpZCk7XG4gICAgICBpZiAoY2hpbGRyZW4uaGFzKGlkKSkgcmV0dXJuIHNlbGVjdGVkO1xuICAgICAgcmV0dXJuIHBhcmVudFN0cmF0ZWd5LnNlbGVjdCh7XG4gICAgICAgIGlkLFxuICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIC4uLnJlc3RcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaW46IHBhcmVudFN0cmF0ZWd5LmluLFxuICAgIG91dDogcGFyZW50U3RyYXRlZ3kub3V0XG4gIH07XG4gIHJldHVybiBzdHJhdGVneTtcbn07XG5leHBvcnQgY29uc3QgY2xhc3NpY1NlbGVjdFN0cmF0ZWd5ID0gbWFuZGF0b3J5ID0+IHtcbiAgY29uc3Qgc3RyYXRlZ3kgPSB7XG4gICAgc2VsZWN0OiBfcmVmNiA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBpZCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHNlbGVjdGVkLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgcGFyZW50c1xuICAgICAgfSA9IF9yZWY2O1xuICAgICAgaWQgPSB0b1JhdyhpZCk7XG4gICAgICBjb25zdCBvcmlnaW5hbCA9IG5ldyBNYXAoc2VsZWN0ZWQpO1xuICAgICAgY29uc3QgaXRlbXMgPSBbaWRdO1xuICAgICAgd2hpbGUgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbXMuc2hpZnQoKTtcbiAgICAgICAgc2VsZWN0ZWQuc2V0KGl0ZW0sIHZhbHVlID8gJ29uJyA6ICdvZmYnKTtcbiAgICAgICAgaWYgKGNoaWxkcmVuLmhhcyhpdGVtKSkge1xuICAgICAgICAgIGl0ZW1zLnB1c2goLi4uY2hpbGRyZW4uZ2V0KGl0ZW0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IHBhcmVudCA9IHBhcmVudHMuZ2V0KGlkKTtcbiAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW5JZHMgPSBjaGlsZHJlbi5nZXQocGFyZW50KTtcbiAgICAgICAgY29uc3QgZXZlcnlTZWxlY3RlZCA9IGNoaWxkcmVuSWRzLmV2ZXJ5KGNpZCA9PiBzZWxlY3RlZC5nZXQoY2lkKSA9PT0gJ29uJyk7XG4gICAgICAgIGNvbnN0IG5vbmVTZWxlY3RlZCA9IGNoaWxkcmVuSWRzLmV2ZXJ5KGNpZCA9PiAhc2VsZWN0ZWQuaGFzKGNpZCkgfHwgc2VsZWN0ZWQuZ2V0KGNpZCkgPT09ICdvZmYnKTtcbiAgICAgICAgc2VsZWN0ZWQuc2V0KHBhcmVudCwgZXZlcnlTZWxlY3RlZCA/ICdvbicgOiBub25lU2VsZWN0ZWQgPyAnb2ZmJyA6ICdpbmRldGVybWluYXRlJyk7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudHMuZ2V0KHBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG1hbmRhdG9yeSBhbmQgcGxhbm5lZCBkZXNlbGVjdCByZXN1bHRzIGluIG5vIHNlbGVjdGVkXG4gICAgICAvLyBpdGVtcyB0aGVuIHdlIGNhbid0IGRvIGl0LCBzbyByZXR1cm4gb3JpZ2luYWwgc3RhdGVcbiAgICAgIGlmIChtYW5kYXRvcnkgJiYgIXZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9uID0gQXJyYXkuZnJvbShzZWxlY3RlZC5lbnRyaWVzKCkpLnJlZHVjZSgoYXJyLCBfcmVmNykgPT4ge1xuICAgICAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmNztcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPT09ICdvbicgPyBbLi4uYXJyLCBrZXldIDogYXJyO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIGlmIChvbi5sZW5ndGggPT09IDApIHJldHVybiBvcmlnaW5hbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICB9LFxuICAgIGluOiAodiwgY2hpbGRyZW4sIHBhcmVudHMpID0+IHtcbiAgICAgIGxldCBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICBmb3IgKGNvbnN0IGlkIG9mIHYgfHwgW10pIHtcbiAgICAgICAgbWFwID0gc3RyYXRlZ3kuc2VsZWN0KHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgICAgICBzZWxlY3RlZDogbmV3IE1hcChtYXApLFxuICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgIHBhcmVudHNcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH0sXG4gICAgb3V0OiAodiwgY2hpbGRyZW4pID0+IHtcbiAgICAgIGNvbnN0IGFyciA9IFtdO1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygdi5lbnRyaWVzKCkpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnb24nICYmICFjaGlsZHJlbi5oYXMoa2V5KSkgYXJyLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuICB9O1xuICByZXR1cm4gc3RyYXRlZ3k7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VsZWN0U3RyYXRlZ2llcy5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCwgb25CZWZvcmVVbm1vdW50LCBwcm92aWRlLCByZWYsIHNoYWxsb3dSZWYsIHRvUmF3IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGxpc3RPcGVuU3RyYXRlZ3ksIG11bHRpcGxlT3BlblN0cmF0ZWd5LCBzaW5nbGVPcGVuU3RyYXRlZ3kgfSBmcm9tIFwiLi9vcGVuU3RyYXRlZ2llcy5tanNcIjtcbmltcG9ydCB7IGNsYXNzaWNTZWxlY3RTdHJhdGVneSwgaW5kZXBlbmRlbnRTZWxlY3RTdHJhdGVneSwgaW5kZXBlbmRlbnRTaW5nbGVTZWxlY3RTdHJhdGVneSwgbGVhZlNlbGVjdFN0cmF0ZWd5LCBsZWFmU2luZ2xlU2VsZWN0U3RyYXRlZ3kgfSBmcm9tIFwiLi9zZWxlY3RTdHJhdGVnaWVzLm1qc1wiO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlLCBnZXRVaWQsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IFZOZXN0ZWRTeW1ib2wgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5Om5lc3RlZCcpO1xuZXhwb3J0IGNvbnN0IGVtcHR5TmVzdGVkID0ge1xuICBpZDogc2hhbGxvd1JlZigpLFxuICByb290OiB7XG4gICAgcmVnaXN0ZXI6ICgpID0+IG51bGwsXG4gICAgdW5yZWdpc3RlcjogKCkgPT4gbnVsbCxcbiAgICBwYXJlbnRzOiByZWYobmV3IE1hcCgpKSxcbiAgICBjaGlsZHJlbjogcmVmKG5ldyBNYXAoKSksXG4gICAgb3BlbjogKCkgPT4gbnVsbCxcbiAgICBvcGVuT25TZWxlY3Q6ICgpID0+IG51bGwsXG4gICAgc2VsZWN0OiAoKSA9PiBudWxsLFxuICAgIG9wZW5lZDogcmVmKG5ldyBTZXQoKSksXG4gICAgc2VsZWN0ZWQ6IHJlZihuZXcgTWFwKCkpLFxuICAgIHNlbGVjdGVkVmFsdWVzOiByZWYoW10pXG4gIH1cbn07XG5leHBvcnQgY29uc3QgbWFrZU5lc3RlZFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgc2VsZWN0U3RyYXRlZ3k6IFtTdHJpbmcsIEZ1bmN0aW9uXSxcbiAgb3BlblN0cmF0ZWd5OiBbU3RyaW5nLCBPYmplY3RdLFxuICBvcGVuZWQ6IEFycmF5LFxuICBzZWxlY3RlZDogQXJyYXksXG4gIG1hbmRhdG9yeTogQm9vbGVhblxufSwgJ25lc3RlZCcpO1xuZXhwb3J0IGNvbnN0IHVzZU5lc3RlZCA9IHByb3BzID0+IHtcbiAgbGV0IGlzVW5tb3VudGVkID0gZmFsc2U7XG4gIGNvbnN0IGNoaWxkcmVuID0gcmVmKG5ldyBNYXAoKSk7XG4gIGNvbnN0IHBhcmVudHMgPSByZWYobmV3IE1hcCgpKTtcbiAgY29uc3Qgb3BlbmVkID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnb3BlbmVkJywgcHJvcHMub3BlbmVkLCB2ID0+IG5ldyBTZXQodiksIHYgPT4gWy4uLnYudmFsdWVzKCldKTtcbiAgY29uc3Qgc2VsZWN0U3RyYXRlZ3kgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBwcm9wcy5zZWxlY3RTdHJhdGVneSA9PT0gJ29iamVjdCcpIHJldHVybiBwcm9wcy5zZWxlY3RTdHJhdGVneTtcbiAgICBzd2l0Y2ggKHByb3BzLnNlbGVjdFN0cmF0ZWd5KSB7XG4gICAgICBjYXNlICdzaW5nbGUtbGVhZic6XG4gICAgICAgIHJldHVybiBsZWFmU2luZ2xlU2VsZWN0U3RyYXRlZ3kocHJvcHMubWFuZGF0b3J5KTtcbiAgICAgIGNhc2UgJ2xlYWYnOlxuICAgICAgICByZXR1cm4gbGVhZlNlbGVjdFN0cmF0ZWd5KHByb3BzLm1hbmRhdG9yeSk7XG4gICAgICBjYXNlICdpbmRlcGVuZGVudCc6XG4gICAgICAgIHJldHVybiBpbmRlcGVuZGVudFNlbGVjdFN0cmF0ZWd5KHByb3BzLm1hbmRhdG9yeSk7XG4gICAgICBjYXNlICdzaW5nbGUtaW5kZXBlbmRlbnQnOlxuICAgICAgICByZXR1cm4gaW5kZXBlbmRlbnRTaW5nbGVTZWxlY3RTdHJhdGVneShwcm9wcy5tYW5kYXRvcnkpO1xuICAgICAgY2FzZSAnY2xhc3NpYyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gY2xhc3NpY1NlbGVjdFN0cmF0ZWd5KHByb3BzLm1hbmRhdG9yeSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3Qgb3BlblN0cmF0ZWd5ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmICh0eXBlb2YgcHJvcHMub3BlblN0cmF0ZWd5ID09PSAnb2JqZWN0JykgcmV0dXJuIHByb3BzLm9wZW5TdHJhdGVneTtcbiAgICBzd2l0Y2ggKHByb3BzLm9wZW5TdHJhdGVneSkge1xuICAgICAgY2FzZSAnbGlzdCc6XG4gICAgICAgIHJldHVybiBsaXN0T3BlblN0cmF0ZWd5O1xuICAgICAgY2FzZSAnc2luZ2xlJzpcbiAgICAgICAgcmV0dXJuIHNpbmdsZU9wZW5TdHJhdGVneTtcbiAgICAgIGNhc2UgJ211bHRpcGxlJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBtdWx0aXBsZU9wZW5TdHJhdGVneTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBzZWxlY3RlZCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ3NlbGVjdGVkJywgcHJvcHMuc2VsZWN0ZWQsIHYgPT4gc2VsZWN0U3RyYXRlZ3kudmFsdWUuaW4odiwgY2hpbGRyZW4udmFsdWUsIHBhcmVudHMudmFsdWUpLCB2ID0+IHNlbGVjdFN0cmF0ZWd5LnZhbHVlLm91dCh2LCBjaGlsZHJlbi52YWx1ZSwgcGFyZW50cy52YWx1ZSkpO1xuICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgIGlzVW5tb3VudGVkID0gdHJ1ZTtcbiAgfSk7XG4gIGZ1bmN0aW9uIGdldFBhdGgoaWQpIHtcbiAgICBjb25zdCBwYXRoID0gW107XG4gICAgbGV0IHBhcmVudCA9IGlkO1xuICAgIHdoaWxlIChwYXJlbnQgIT0gbnVsbCkge1xuICAgICAgcGF0aC51bnNoaWZ0KHBhcmVudCk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnRzLnZhbHVlLmdldChwYXJlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgnbmVzdGVkJyk7XG4gIGNvbnN0IG5lc3RlZCA9IHtcbiAgICBpZDogc2hhbGxvd1JlZigpLFxuICAgIHJvb3Q6IHtcbiAgICAgIG9wZW5lZCxcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgc2VsZWN0ZWRWYWx1ZXM6IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgICAgY29uc3QgYXJyID0gW107XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHNlbGVjdGVkLnZhbHVlLmVudHJpZXMoKSkge1xuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ29uJykgYXJyLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfSksXG4gICAgICByZWdpc3RlcjogKGlkLCBwYXJlbnRJZCwgaXNHcm91cCkgPT4ge1xuICAgICAgICBwYXJlbnRJZCAmJiBpZCAhPT0gcGFyZW50SWQgJiYgcGFyZW50cy52YWx1ZS5zZXQoaWQsIHBhcmVudElkKTtcbiAgICAgICAgaXNHcm91cCAmJiBjaGlsZHJlbi52YWx1ZS5zZXQoaWQsIFtdKTtcbiAgICAgICAgaWYgKHBhcmVudElkICE9IG51bGwpIHtcbiAgICAgICAgICBjaGlsZHJlbi52YWx1ZS5zZXQocGFyZW50SWQsIFsuLi4oY2hpbGRyZW4udmFsdWUuZ2V0KHBhcmVudElkKSB8fCBbXSksIGlkXSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1bnJlZ2lzdGVyOiBpZCA9PiB7XG4gICAgICAgIGlmIChpc1VubW91bnRlZCkgcmV0dXJuO1xuICAgICAgICBjaGlsZHJlbi52YWx1ZS5kZWxldGUoaWQpO1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBwYXJlbnRzLnZhbHVlLmdldChpZCk7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICBjb25zdCBsaXN0ID0gY2hpbGRyZW4udmFsdWUuZ2V0KHBhcmVudCkgPz8gW107XG4gICAgICAgICAgY2hpbGRyZW4udmFsdWUuc2V0KHBhcmVudCwgbGlzdC5maWx0ZXIoY2hpbGQgPT4gY2hpbGQgIT09IGlkKSk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50cy52YWx1ZS5kZWxldGUoaWQpO1xuICAgICAgICBvcGVuZWQudmFsdWUuZGVsZXRlKGlkKTtcbiAgICAgIH0sXG4gICAgICBvcGVuOiAoaWQsIHZhbHVlLCBldmVudCkgPT4ge1xuICAgICAgICB2bS5lbWl0KCdjbGljazpvcGVuJywge1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIHBhdGg6IGdldFBhdGgoaWQpLFxuICAgICAgICAgIGV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBuZXdPcGVuZWQgPSBvcGVuU3RyYXRlZ3kudmFsdWUub3Blbih7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgb3BlbmVkOiBuZXcgU2V0KG9wZW5lZC52YWx1ZSksXG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLnZhbHVlLFxuICAgICAgICAgIHBhcmVudHM6IHBhcmVudHMudmFsdWUsXG4gICAgICAgICAgZXZlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIG5ld09wZW5lZCAmJiAob3BlbmVkLnZhbHVlID0gbmV3T3BlbmVkKTtcbiAgICAgIH0sXG4gICAgICBvcGVuT25TZWxlY3Q6IChpZCwgdmFsdWUsIGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld09wZW5lZCA9IG9wZW5TdHJhdGVneS52YWx1ZS5zZWxlY3Qoe1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIHNlbGVjdGVkOiBuZXcgTWFwKHNlbGVjdGVkLnZhbHVlKSxcbiAgICAgICAgICBvcGVuZWQ6IG5ldyBTZXQob3BlbmVkLnZhbHVlKSxcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4udmFsdWUsXG4gICAgICAgICAgcGFyZW50czogcGFyZW50cy52YWx1ZSxcbiAgICAgICAgICBldmVudFxuICAgICAgICB9KTtcbiAgICAgICAgbmV3T3BlbmVkICYmIChvcGVuZWQudmFsdWUgPSBuZXdPcGVuZWQpO1xuICAgICAgfSxcbiAgICAgIHNlbGVjdDogKGlkLCB2YWx1ZSwgZXZlbnQpID0+IHtcbiAgICAgICAgdm0uZW1pdCgnY2xpY2s6c2VsZWN0Jywge1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIHBhdGg6IGdldFBhdGgoaWQpLFxuICAgICAgICAgIGV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBuZXdTZWxlY3RlZCA9IHNlbGVjdFN0cmF0ZWd5LnZhbHVlLnNlbGVjdCh7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgc2VsZWN0ZWQ6IG5ldyBNYXAoc2VsZWN0ZWQudmFsdWUpLFxuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbi52YWx1ZSxcbiAgICAgICAgICBwYXJlbnRzOiBwYXJlbnRzLnZhbHVlLFxuICAgICAgICAgIGV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgICBuZXdTZWxlY3RlZCAmJiAoc2VsZWN0ZWQudmFsdWUgPSBuZXdTZWxlY3RlZCk7XG4gICAgICAgIG5lc3RlZC5yb290Lm9wZW5PblNlbGVjdChpZCwgdmFsdWUsIGV2ZW50KTtcbiAgICAgIH0sXG4gICAgICBjaGlsZHJlbixcbiAgICAgIHBhcmVudHNcbiAgICB9XG4gIH07XG4gIHByb3ZpZGUoVk5lc3RlZFN5bWJvbCwgbmVzdGVkKTtcbiAgcmV0dXJuIG5lc3RlZC5yb290O1xufTtcbmV4cG9ydCBjb25zdCB1c2VOZXN0ZWRJdGVtID0gKGlkLCBpc0dyb3VwKSA9PiB7XG4gIGNvbnN0IHBhcmVudCA9IGluamVjdChWTmVzdGVkU3ltYm9sLCBlbXB0eU5lc3RlZCk7XG4gIGNvbnN0IHVpZFN5bWJvbCA9IFN5bWJvbChnZXRVaWQoKSk7XG4gIGNvbnN0IGNvbXB1dGVkSWQgPSBjb21wdXRlZCgoKSA9PiBpZC52YWx1ZSAhPT0gdW5kZWZpbmVkID8gaWQudmFsdWUgOiB1aWRTeW1ib2wpO1xuICBjb25zdCBpdGVtID0ge1xuICAgIC4uLnBhcmVudCxcbiAgICBpZDogY29tcHV0ZWRJZCxcbiAgICBvcGVuOiAob3BlbiwgZSkgPT4gcGFyZW50LnJvb3Qub3Blbihjb21wdXRlZElkLnZhbHVlLCBvcGVuLCBlKSxcbiAgICBvcGVuT25TZWxlY3Q6IChvcGVuLCBlKSA9PiBwYXJlbnQucm9vdC5vcGVuT25TZWxlY3QoY29tcHV0ZWRJZC52YWx1ZSwgb3BlbiwgZSksXG4gICAgaXNPcGVuOiBjb21wdXRlZCgoKSA9PiBwYXJlbnQucm9vdC5vcGVuZWQudmFsdWUuaGFzKGNvbXB1dGVkSWQudmFsdWUpKSxcbiAgICBwYXJlbnQ6IGNvbXB1dGVkKCgpID0+IHBhcmVudC5yb290LnBhcmVudHMudmFsdWUuZ2V0KGNvbXB1dGVkSWQudmFsdWUpKSxcbiAgICBzZWxlY3Q6IChzZWxlY3RlZCwgZSkgPT4gcGFyZW50LnJvb3Quc2VsZWN0KGNvbXB1dGVkSWQudmFsdWUsIHNlbGVjdGVkLCBlKSxcbiAgICBpc1NlbGVjdGVkOiBjb21wdXRlZCgoKSA9PiBwYXJlbnQucm9vdC5zZWxlY3RlZC52YWx1ZS5nZXQodG9SYXcoY29tcHV0ZWRJZC52YWx1ZSkpID09PSAnb24nKSxcbiAgICBpc0luZGV0ZXJtaW5hdGU6IGNvbXB1dGVkKCgpID0+IHBhcmVudC5yb290LnNlbGVjdGVkLnZhbHVlLmdldChjb21wdXRlZElkLnZhbHVlKSA9PT0gJ2luZGV0ZXJtaW5hdGUnKSxcbiAgICBpc0xlYWY6IGNvbXB1dGVkKCgpID0+ICFwYXJlbnQucm9vdC5jaGlsZHJlbi52YWx1ZS5nZXQoY29tcHV0ZWRJZC52YWx1ZSkpLFxuICAgIGlzR3JvdXBBY3RpdmF0b3I6IHBhcmVudC5pc0dyb3VwQWN0aXZhdG9yXG4gIH07XG4gICFwYXJlbnQuaXNHcm91cEFjdGl2YXRvciAmJiBwYXJlbnQucm9vdC5yZWdpc3Rlcihjb21wdXRlZElkLnZhbHVlLCBwYXJlbnQuaWQudmFsdWUsIGlzR3JvdXApO1xuICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICFwYXJlbnQuaXNHcm91cEFjdGl2YXRvciAmJiBwYXJlbnQucm9vdC51bnJlZ2lzdGVyKGNvbXB1dGVkSWQudmFsdWUpO1xuICB9KTtcbiAgaXNHcm91cCAmJiBwcm92aWRlKFZOZXN0ZWRTeW1ib2wsIGl0ZW0pO1xuICByZXR1cm4gaXRlbTtcbn07XG5leHBvcnQgY29uc3QgdXNlTmVzdGVkR3JvdXBBY3RpdmF0b3IgPSAoKSA9PiB7XG4gIGNvbnN0IHBhcmVudCA9IGluamVjdChWTmVzdGVkU3ltYm9sLCBlbXB0eU5lc3RlZCk7XG4gIHByb3ZpZGUoVk5lc3RlZFN5bWJvbCwge1xuICAgIC4uLnBhcmVudCxcbiAgICBpc0dyb3VwQWN0aXZhdG9yOiB0cnVlXG4gIH0pO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5lc3RlZC5tanMubWFwIiwiaW1wb3J0IHsgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCB2U2hvdyBhcyBfdlNob3csIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZFeHBhbmRUcmFuc2l0aW9uIH0gZnJvbSBcIi4uL3RyYW5zaXRpb25zL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VMaXN0IH0gZnJvbSBcIi4vbGlzdC5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyB1c2VOZXN0ZWRHcm91cEFjdGl2YXRvciwgdXNlTmVzdGVkSXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9uZXN0ZWQvbmVzdGVkLm1qc1wiO1xuaW1wb3J0IHsgdXNlU3NyQm9vdCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zc3JCb290Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IE1heWJlVHJhbnNpdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90cmFuc2l0aW9uLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5jb25zdCBWTGlzdEdyb3VwQWN0aXZhdG9yID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ1ZMaXN0R3JvdXBBY3RpdmF0b3InLFxuICBzZXR1cChfLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgdXNlTmVzdGVkR3JvdXBBY3RpdmF0b3IoKTtcbiAgICByZXR1cm4gKCkgPT4gc2xvdHMuZGVmYXVsdD8uKCk7XG4gIH1cbn0pO1xuZXhwb3J0IGNvbnN0IG1ha2VWTGlzdEdyb3VwUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICAvKiBAZGVwcmVjYXRlZCAqL1xuICBhY3RpdmVDb2xvcjogU3RyaW5nLFxuICBiYXNlQ29sb3I6IFN0cmluZyxcbiAgY29sb3I6IFN0cmluZyxcbiAgY29sbGFwc2VJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckY29sbGFwc2UnXG4gIH0sXG4gIGV4cGFuZEljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRleHBhbmQnXG4gIH0sXG4gIHByZXBlbmRJY29uOiBJY29uVmFsdWUsXG4gIGFwcGVuZEljb246IEljb25WYWx1ZSxcbiAgZmx1aWQ6IEJvb2xlYW4sXG4gIHN1Ymdyb3VwOiBCb29sZWFuLFxuICB0aXRsZTogU3RyaW5nLFxuICB2YWx1ZTogbnVsbCxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpXG59LCAnVkxpc3RHcm91cCcpO1xuZXhwb3J0IGNvbnN0IFZMaXN0R3JvdXAgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkxpc3RHcm91cCcsXG4gIHByb3BzOiBtYWtlVkxpc3RHcm91cFByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmMikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmMjtcbiAgICBjb25zdCB7XG4gICAgICBpc09wZW4sXG4gICAgICBvcGVuLFxuICAgICAgaWQ6IF9pZFxuICAgIH0gPSB1c2VOZXN0ZWRJdGVtKHRvUmVmKHByb3BzLCAndmFsdWUnKSwgdHJ1ZSk7XG4gICAgY29uc3QgaWQgPSBjb21wdXRlZCgoKSA9PiBgdi1saXN0LWdyb3VwLS1pZC0ke1N0cmluZyhfaWQudmFsdWUpfWApO1xuICAgIGNvbnN0IGxpc3QgPSB1c2VMaXN0KCk7XG4gICAgY29uc3Qge1xuICAgICAgaXNCb290ZWRcbiAgICB9ID0gdXNlU3NyQm9vdCgpO1xuICAgIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgb3BlbighaXNPcGVuLnZhbHVlLCBlKTtcbiAgICB9XG4gICAgY29uc3QgYWN0aXZhdG9yUHJvcHMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgb25DbGljayxcbiAgICAgIGNsYXNzOiAndi1saXN0LWdyb3VwX19oZWFkZXInLFxuICAgICAgaWQ6IGlkLnZhbHVlXG4gICAgfSkpO1xuICAgIGNvbnN0IHRvZ2dsZUljb24gPSBjb21wdXRlZCgoKSA9PiBpc09wZW4udmFsdWUgPyBwcm9wcy5jb2xsYXBzZUljb24gOiBwcm9wcy5leHBhbmRJY29uKTtcbiAgICBjb25zdCBhY3RpdmF0b3JEZWZhdWx0cyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICBWTGlzdEl0ZW06IHtcbiAgICAgICAgYWN0aXZlOiBpc09wZW4udmFsdWUsXG4gICAgICAgIGFjdGl2ZUNvbG9yOiBwcm9wcy5hY3RpdmVDb2xvcixcbiAgICAgICAgYmFzZUNvbG9yOiBwcm9wcy5iYXNlQ29sb3IsXG4gICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgcHJlcGVuZEljb246IHByb3BzLnByZXBlbmRJY29uIHx8IHByb3BzLnN1Ymdyb3VwICYmIHRvZ2dsZUljb24udmFsdWUsXG4gICAgICAgIGFwcGVuZEljb246IHByb3BzLmFwcGVuZEljb24gfHwgIXByb3BzLnN1Ymdyb3VwICYmIHRvZ2dsZUljb24udmFsdWUsXG4gICAgICAgIHRpdGxlOiBwcm9wcy50aXRsZSxcbiAgICAgICAgdmFsdWU6IHByb3BzLnZhbHVlXG4gICAgICB9XG4gICAgfSkpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1saXN0LWdyb3VwJywge1xuICAgICAgICAndi1saXN0LWdyb3VwLS1wcmVwZW5kJzogbGlzdD8uaGFzUHJlcGVuZC52YWx1ZSxcbiAgICAgICAgJ3YtbGlzdC1ncm91cC0tZmx1aWQnOiBwcm9wcy5mbHVpZCxcbiAgICAgICAgJ3YtbGlzdC1ncm91cC0tc3ViZ3JvdXAnOiBwcm9wcy5zdWJncm91cCxcbiAgICAgICAgJ3YtbGlzdC1ncm91cC0tb3Blbic6IGlzT3Blbi52YWx1ZVxuICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy5hY3RpdmF0b3IgJiYgX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgIFwiZGVmYXVsdHNcIjogYWN0aXZhdG9yRGVmYXVsdHMudmFsdWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShWTGlzdEdyb3VwQWN0aXZhdG9yLCBudWxsLCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmFjdGl2YXRvcih7XG4gICAgICAgICAgICBwcm9wczogYWN0aXZhdG9yUHJvcHMudmFsdWUsXG4gICAgICAgICAgICBpc09wZW46IGlzT3Blbi52YWx1ZVxuICAgICAgICAgIH0pXVxuICAgICAgICB9KV1cbiAgICAgIH0pLCBfY3JlYXRlVk5vZGUoTWF5YmVUcmFuc2l0aW9uLCB7XG4gICAgICAgIFwidHJhbnNpdGlvblwiOiB7XG4gICAgICAgICAgY29tcG9uZW50OiBWRXhwYW5kVHJhbnNpdGlvblxuICAgICAgICB9LFxuICAgICAgICBcImRpc2FibGVkXCI6ICFpc0Jvb3RlZC52YWx1ZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtbGlzdC1ncm91cF9faXRlbXNcIixcbiAgICAgICAgICBcInJvbGVcIjogXCJncm91cFwiLFxuICAgICAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGlkLnZhbHVlXG4gICAgICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKV0pLCBbW192U2hvdywgaXNPcGVuLnZhbHVlXV0pXVxuICAgICAgfSldXG4gICAgfSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTGlzdEdyb3VwLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBWTGlzdEl0ZW1TdWJ0aXRsZSA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtbGlzdC1pdGVtLXN1YnRpdGxlJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTGlzdEl0ZW1TdWJ0aXRsZS5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgVkxpc3RJdGVtVGl0bGUgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWxpc3QtaXRlbS10aXRsZScpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vkxpc3RJdGVtVGl0bGUubWpzLm1hcCIsImltcG9ydCB7IHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkxpc3RJdGVtLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWTGlzdEl0ZW1TdWJ0aXRsZSB9IGZyb20gXCIuL1ZMaXN0SXRlbVN1YnRpdGxlLm1qc1wiO1xuaW1wb3J0IHsgVkxpc3RJdGVtVGl0bGUgfSBmcm9tIFwiLi9WTGlzdEl0ZW1UaXRsZS5tanNcIjtcbmltcG9ydCB7IFZBdmF0YXIgfSBmcm9tIFwiLi4vVkF2YXRhci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZEZWZhdWx0c1Byb3ZpZGVyIH0gZnJvbSBcIi4uL1ZEZWZhdWx0c1Byb3ZpZGVyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkljb24gfSBmcm9tIFwiLi4vVkljb24vaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VMaXN0IH0gZnJvbSBcIi4vbGlzdC5tanNcIjtcbmltcG9ydCB7IG1ha2VCb3JkZXJQcm9wcywgdXNlQm9yZGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2JvcmRlci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzLCB1c2VEZW5zaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGltZW5zaW9uUHJvcHMsIHVzZURpbWVuc2lvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaW1lbnNpb25zLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlTmVzdGVkSXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9uZXN0ZWQvbmVzdGVkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdW5kZWRQcm9wcywgdXNlUm91bmRlZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdXRlclByb3BzLCB1c2VMaW5rIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdXRlci5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiO1xuaW1wb3J0IHsgZ2VuT3ZlcmxheXMsIG1ha2VWYXJpYW50UHJvcHMsIHVzZVZhcmlhbnQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdmFyaWFudC5tanNcIjsgLy8gRGlyZWN0aXZlc1xuaW1wb3J0IHsgUmlwcGxlIH0gZnJvbSBcIi4uLy4uL2RpcmVjdGl2ZXMvcmlwcGxlL2luZGV4Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBkZXByZWNhdGUsIEV2ZW50UHJvcCwgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkxpc3RJdGVtUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhY3RpdmU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICBhY3RpdmVDbGFzczogU3RyaW5nLFxuICAvKiBAZGVwcmVjYXRlZCAqL1xuICBhY3RpdmVDb2xvcjogU3RyaW5nLFxuICBhcHBlbmRBdmF0YXI6IFN0cmluZyxcbiAgYXBwZW5kSWNvbjogSWNvblZhbHVlLFxuICBiYXNlQ29sb3I6IFN0cmluZyxcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIGxpbmVzOiBTdHJpbmcsXG4gIGxpbms6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICBuYXY6IEJvb2xlYW4sXG4gIHByZXBlbmRBdmF0YXI6IFN0cmluZyxcbiAgcHJlcGVuZEljb246IEljb25WYWx1ZSxcbiAgcmlwcGxlOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIE9iamVjdF0sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBzdWJ0aXRsZTogW1N0cmluZywgTnVtYmVyLCBCb29sZWFuXSxcbiAgdGl0bGU6IFtTdHJpbmcsIE51bWJlciwgQm9vbGVhbl0sXG4gIHZhbHVlOiBudWxsLFxuICBvbkNsaWNrOiBFdmVudFByb3AoKSxcbiAgb25DbGlja09uY2U6IEV2ZW50UHJvcCgpLFxuICAuLi5tYWtlQm9yZGVyUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZURpbWVuc2lvblByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VSb3V0ZXJQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKSxcbiAgLi4ubWFrZVZhcmlhbnRQcm9wcyh7XG4gICAgdmFyaWFudDogJ3RleHQnXG4gIH0pXG59LCAnVkxpc3RJdGVtJyk7XG5leHBvcnQgY29uc3QgVkxpc3RJdGVtID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZMaXN0SXRlbScsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICBSaXBwbGVcbiAgfSxcbiAgcHJvcHM6IG1ha2VWTGlzdEl0ZW1Qcm9wcygpLFxuICBlbWl0czoge1xuICAgIGNsaWNrOiBlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnMsXG4gICAgICBzbG90cyxcbiAgICAgIGVtaXRcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBsaW5rID0gdXNlTGluayhwcm9wcywgYXR0cnMpO1xuICAgIGNvbnN0IGlkID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMudmFsdWUgPT09IHVuZGVmaW5lZCA/IGxpbmsuaHJlZi52YWx1ZSA6IHByb3BzLnZhbHVlKTtcbiAgICBjb25zdCB7XG4gICAgICBzZWxlY3QsXG4gICAgICBpc1NlbGVjdGVkLFxuICAgICAgaXNJbmRldGVybWluYXRlLFxuICAgICAgaXNHcm91cEFjdGl2YXRvcixcbiAgICAgIHJvb3QsXG4gICAgICBwYXJlbnQsXG4gICAgICBvcGVuT25TZWxlY3RcbiAgICB9ID0gdXNlTmVzdGVkSXRlbShpZCwgZmFsc2UpO1xuICAgIGNvbnN0IGxpc3QgPSB1c2VMaXN0KCk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5hY3RpdmUgIT09IGZhbHNlICYmIChwcm9wcy5hY3RpdmUgfHwgbGluay5pc0FjdGl2ZT8udmFsdWUgfHwgaXNTZWxlY3RlZC52YWx1ZSkpO1xuICAgIGNvbnN0IGlzTGluayA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmxpbmsgIT09IGZhbHNlICYmIGxpbmsuaXNMaW5rLnZhbHVlKTtcbiAgICBjb25zdCBpc0NsaWNrYWJsZSA9IGNvbXB1dGVkKCgpID0+ICFwcm9wcy5kaXNhYmxlZCAmJiBwcm9wcy5saW5rICE9PSBmYWxzZSAmJiAocHJvcHMubGluayB8fCBsaW5rLmlzQ2xpY2thYmxlLnZhbHVlIHx8IHByb3BzLnZhbHVlICE9IG51bGwgJiYgISFsaXN0KSk7XG4gICAgY29uc3Qgcm91bmRlZFByb3BzID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMucm91bmRlZCB8fCBwcm9wcy5uYXYpO1xuICAgIGNvbnN0IGNvbG9yID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuY29sb3IgPz8gcHJvcHMuYWN0aXZlQ29sb3IpO1xuICAgIGNvbnN0IHZhcmlhbnRQcm9wcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICBjb2xvcjogaXNBY3RpdmUudmFsdWUgPyBjb2xvci52YWx1ZSA/PyBwcm9wcy5iYXNlQ29sb3IgOiBwcm9wcy5iYXNlQ29sb3IsXG4gICAgICB2YXJpYW50OiBwcm9wcy52YXJpYW50XG4gICAgfSkpO1xuICAgIHdhdGNoKCgpID0+IGxpbmsuaXNBY3RpdmU/LnZhbHVlLCB2YWwgPT4ge1xuICAgICAgaWYgKHZhbCAmJiBwYXJlbnQudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICByb290Lm9wZW4ocGFyZW50LnZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgb3Blbk9uU2VsZWN0KHZhbCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaW1tZWRpYXRlOiB0cnVlXG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgYm9yZGVyQ2xhc3Nlc1xuICAgIH0gPSB1c2VCb3JkZXIocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbG9yQ2xhc3NlcyxcbiAgICAgIGNvbG9yU3R5bGVzLFxuICAgICAgdmFyaWFudENsYXNzZXNcbiAgICB9ID0gdXNlVmFyaWFudCh2YXJpYW50UHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbnNpdHlDbGFzc2VzXG4gICAgfSA9IHVzZURlbnNpdHkocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRpbWVuc2lvblN0eWxlc1xuICAgIH0gPSB1c2VEaW1lbnNpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbkNsYXNzZXNcbiAgICB9ID0gdXNlRWxldmF0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHJvdW5kZWRQcm9wcyk7XG4gICAgY29uc3QgbGluZUNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5saW5lcyA/IGB2LWxpc3QtaXRlbS0tJHtwcm9wcy5saW5lc30tbGluZWAgOiB1bmRlZmluZWQpO1xuICAgIGNvbnN0IHNsb3RQcm9wcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICBpc0FjdGl2ZTogaXNBY3RpdmUudmFsdWUsXG4gICAgICBzZWxlY3QsXG4gICAgICBpc1NlbGVjdGVkOiBpc1NlbGVjdGVkLnZhbHVlLFxuICAgICAgaXNJbmRldGVybWluYXRlOiBpc0luZGV0ZXJtaW5hdGUudmFsdWVcbiAgICB9KSk7XG4gICAgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICBlbWl0KCdjbGljaycsIGUpO1xuICAgICAgaWYgKGlzR3JvdXBBY3RpdmF0b3IgfHwgIWlzQ2xpY2thYmxlLnZhbHVlKSByZXR1cm47XG4gICAgICBsaW5rLm5hdmlnYXRlPy4oZSk7XG4gICAgICBwcm9wcy52YWx1ZSAhPSBudWxsICYmIHNlbGVjdCghaXNTZWxlY3RlZC52YWx1ZSwgZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXkgPT09ICcgJykge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uQ2xpY2soZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBUYWcgPSBpc0xpbmsudmFsdWUgPyAnYScgOiBwcm9wcy50YWc7XG4gICAgICBjb25zdCBoYXNUaXRsZSA9IHNsb3RzLnRpdGxlIHx8IHByb3BzLnRpdGxlO1xuICAgICAgY29uc3QgaGFzU3VidGl0bGUgPSBzbG90cy5zdWJ0aXRsZSB8fCBwcm9wcy5zdWJ0aXRsZTtcbiAgICAgIGNvbnN0IGhhc0FwcGVuZE1lZGlhID0gISEocHJvcHMuYXBwZW5kQXZhdGFyIHx8IHByb3BzLmFwcGVuZEljb24pO1xuICAgICAgY29uc3QgaGFzQXBwZW5kID0gISEoaGFzQXBwZW5kTWVkaWEgfHwgc2xvdHMuYXBwZW5kKTtcbiAgICAgIGNvbnN0IGhhc1ByZXBlbmRNZWRpYSA9ICEhKHByb3BzLnByZXBlbmRBdmF0YXIgfHwgcHJvcHMucHJlcGVuZEljb24pO1xuICAgICAgY29uc3QgaGFzUHJlcGVuZCA9ICEhKGhhc1ByZXBlbmRNZWRpYSB8fCBzbG90cy5wcmVwZW5kKTtcbiAgICAgIGxpc3Q/LnVwZGF0ZUhhc1ByZXBlbmQoaGFzUHJlcGVuZCk7XG4gICAgICBpZiAocHJvcHMuYWN0aXZlQ29sb3IpIHtcbiAgICAgICAgZGVwcmVjYXRlKCdhY3RpdmUtY29sb3InLCBbJ2NvbG9yJywgJ2Jhc2UtY29sb3InXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShUYWcsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtbGlzdC1pdGVtJywge1xuICAgICAgICAgICd2LWxpc3QtaXRlbS0tYWN0aXZlJzogaXNBY3RpdmUudmFsdWUsXG4gICAgICAgICAgJ3YtbGlzdC1pdGVtLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICd2LWxpc3QtaXRlbS0tbGluayc6IGlzQ2xpY2thYmxlLnZhbHVlLFxuICAgICAgICAgICd2LWxpc3QtaXRlbS0tbmF2JzogcHJvcHMubmF2LFxuICAgICAgICAgICd2LWxpc3QtaXRlbS0tcHJlcGVuZCc6ICFoYXNQcmVwZW5kICYmIGxpc3Q/Lmhhc1ByZXBlbmQudmFsdWUsXG4gICAgICAgICAgW2Ake3Byb3BzLmFjdGl2ZUNsYXNzfWBdOiBwcm9wcy5hY3RpdmVDbGFzcyAmJiBpc0FjdGl2ZS52YWx1ZVxuICAgICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIGJvcmRlckNsYXNzZXMudmFsdWUsIGNvbG9yQ2xhc3Nlcy52YWx1ZSwgZGVuc2l0eUNsYXNzZXMudmFsdWUsIGVsZXZhdGlvbkNsYXNzZXMudmFsdWUsIGxpbmVDbGFzc2VzLnZhbHVlLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgdmFyaWFudENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbY29sb3JTdHlsZXMudmFsdWUsIGRpbWVuc2lvblN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdLFxuICAgICAgICBcImhyZWZcIjogbGluay5ocmVmLnZhbHVlLFxuICAgICAgICBcInRhYmluZGV4XCI6IGlzQ2xpY2thYmxlLnZhbHVlID8gbGlzdCA/IC0yIDogMCA6IHVuZGVmaW5lZCxcbiAgICAgICAgXCJvbkNsaWNrXCI6IG9uQ2xpY2ssXG4gICAgICAgIFwib25LZXlkb3duXCI6IGlzQ2xpY2thYmxlLnZhbHVlICYmICFpc0xpbmsudmFsdWUgJiYgb25LZXlEb3duXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtnZW5PdmVybGF5cyhpc0NsaWNrYWJsZS52YWx1ZSB8fCBpc0FjdGl2ZS52YWx1ZSwgJ3YtbGlzdC1pdGVtJyksIGhhc1ByZXBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImtleVwiOiBcInByZXBlbmRcIixcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1saXN0LWl0ZW1fX3ByZXBlbmRcIlxuICAgICAgICB9LCBbIXNsb3RzLnByZXBlbmQgPyBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbcHJvcHMucHJlcGVuZEF2YXRhciAmJiBfY3JlYXRlVk5vZGUoVkF2YXRhciwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZC1hdmF0YXJcIixcbiAgICAgICAgICBcImRlbnNpdHlcIjogcHJvcHMuZGVuc2l0eSxcbiAgICAgICAgICBcImltYWdlXCI6IHByb3BzLnByZXBlbmRBdmF0YXJcbiAgICAgICAgfSwgbnVsbCksIHByb3BzLnByZXBlbmRJY29uICYmIF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZC1pY29uXCIsXG4gICAgICAgICAgXCJkZW5zaXR5XCI6IHByb3BzLmRlbnNpdHksXG4gICAgICAgICAgXCJpY29uXCI6IHByb3BzLnByZXBlbmRJY29uXG4gICAgICAgIH0sIG51bGwpXSkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcInByZXBlbmQtZGVmYXVsdHNcIixcbiAgICAgICAgICBcImRpc2FibGVkXCI6ICFoYXNQcmVwZW5kTWVkaWEsXG4gICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICBWQXZhdGFyOiB7XG4gICAgICAgICAgICAgIGRlbnNpdHk6IHByb3BzLmRlbnNpdHksXG4gICAgICAgICAgICAgIGltYWdlOiBwcm9wcy5wcmVwZW5kQXZhdGFyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgVkljb246IHtcbiAgICAgICAgICAgICAgZGVuc2l0eTogcHJvcHMuZGVuc2l0eSxcbiAgICAgICAgICAgICAgaWNvbjogcHJvcHMucHJlcGVuZEljb25cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBWTGlzdEl0ZW1BY3Rpb246IHtcbiAgICAgICAgICAgICAgc3RhcnQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMucHJlcGVuZD8uKHNsb3RQcm9wcy52YWx1ZSldXG4gICAgICAgIH0pLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWxpc3QtaXRlbV9fc3BhY2VyXCJcbiAgICAgICAgfSwgbnVsbCldKSwgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1saXN0LWl0ZW1fX2NvbnRlbnRcIixcbiAgICAgICAgICBcImRhdGEtbm8tYWN0aXZhdG9yXCI6IFwiXCJcbiAgICAgICAgfSwgW2hhc1RpdGxlICYmIF9jcmVhdGVWTm9kZShWTGlzdEl0ZW1UaXRsZSwge1xuICAgICAgICAgIFwia2V5XCI6IFwidGl0bGVcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLnRpdGxlPy4oe1xuICAgICAgICAgICAgdGl0bGU6IHByb3BzLnRpdGxlXG4gICAgICAgICAgfSkgPz8gcHJvcHMudGl0bGVdXG4gICAgICAgIH0pLCBoYXNTdWJ0aXRsZSAmJiBfY3JlYXRlVk5vZGUoVkxpc3RJdGVtU3VidGl0bGUsIHtcbiAgICAgICAgICBcImtleVwiOiBcInN1YnRpdGxlXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy5zdWJ0aXRsZT8uKHtcbiAgICAgICAgICAgIHN1YnRpdGxlOiBwcm9wcy5zdWJ0aXRsZVxuICAgICAgICAgIH0pID8/IHByb3BzLnN1YnRpdGxlXVxuICAgICAgICB9KSwgc2xvdHMuZGVmYXVsdD8uKHNsb3RQcm9wcy52YWx1ZSldKSwgaGFzQXBwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJhcHBlbmRcIixcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1saXN0LWl0ZW1fX2FwcGVuZFwiXG4gICAgICAgIH0sIFshc2xvdHMuYXBwZW5kID8gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Byb3BzLmFwcGVuZEljb24gJiYgX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJhcHBlbmQtaWNvblwiLFxuICAgICAgICAgIFwiZGVuc2l0eVwiOiBwcm9wcy5kZW5zaXR5LFxuICAgICAgICAgIFwiaWNvblwiOiBwcm9wcy5hcHBlbmRJY29uXG4gICAgICAgIH0sIG51bGwpLCBwcm9wcy5hcHBlbmRBdmF0YXIgJiYgX2NyZWF0ZVZOb2RlKFZBdmF0YXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImFwcGVuZC1hdmF0YXJcIixcbiAgICAgICAgICBcImRlbnNpdHlcIjogcHJvcHMuZGVuc2l0eSxcbiAgICAgICAgICBcImltYWdlXCI6IHByb3BzLmFwcGVuZEF2YXRhclxuICAgICAgICB9LCBudWxsKV0pIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJhcHBlbmQtZGVmYXVsdHNcIixcbiAgICAgICAgICBcImRpc2FibGVkXCI6ICFoYXNBcHBlbmRNZWRpYSxcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZBdmF0YXI6IHtcbiAgICAgICAgICAgICAgZGVuc2l0eTogcHJvcHMuZGVuc2l0eSxcbiAgICAgICAgICAgICAgaW1hZ2U6IHByb3BzLmFwcGVuZEF2YXRhclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFZJY29uOiB7XG4gICAgICAgICAgICAgIGRlbnNpdHk6IHByb3BzLmRlbnNpdHksXG4gICAgICAgICAgICAgIGljb246IHByb3BzLmFwcGVuZEljb25cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBWTGlzdEl0ZW1BY3Rpb246IHtcbiAgICAgICAgICAgICAgZW5kOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmFwcGVuZD8uKHNsb3RQcm9wcy52YWx1ZSldXG4gICAgICAgIH0pLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWxpc3QtaXRlbV9fc3BhY2VyXCJcbiAgICAgICAgfSwgbnVsbCldKV1cbiAgICAgIH0pLCBbW19yZXNvbHZlRGlyZWN0aXZlKFwicmlwcGxlXCIpLCBpc0NsaWNrYWJsZS52YWx1ZSAmJiBwcm9wcy5yaXBwbGVdXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZMaXN0SXRlbS5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVRleHRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZMaXN0U3ViaGVhZGVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjb2xvcjogU3RyaW5nLFxuICBpbnNldDogQm9vbGVhbixcbiAgc3RpY2t5OiBCb29sZWFuLFxuICB0aXRsZTogU3RyaW5nLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKClcbn0sICdWTGlzdFN1YmhlYWRlcicpO1xuZXhwb3J0IGNvbnN0IFZMaXN0U3ViaGVhZGVyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZMaXN0U3ViaGVhZGVyJyxcbiAgcHJvcHM6IG1ha2VWTGlzdFN1YmhlYWRlclByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGV4dENvbG9yQ2xhc3NlcyxcbiAgICAgIHRleHRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VUZXh0Q29sb3IodG9SZWYocHJvcHMsICdjb2xvcicpKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaGFzVGV4dCA9ICEhKHNsb3RzLmRlZmF1bHQgfHwgcHJvcHMudGl0bGUpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtbGlzdC1zdWJoZWFkZXInLCB7XG4gICAgICAgICAgJ3YtbGlzdC1zdWJoZWFkZXItLWluc2V0JzogcHJvcHMuaW5zZXQsXG4gICAgICAgICAgJ3YtbGlzdC1zdWJoZWFkZXItLXN0aWNreSc6IHByb3BzLnN0aWNreVxuICAgICAgICB9LCB0ZXh0Q29sb3JDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW3tcbiAgICAgICAgICB0ZXh0Q29sb3JTdHlsZXNcbiAgICAgICAgfSwgcHJvcHMuc3R5bGVdXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtoYXNUZXh0ICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtbGlzdC1zdWJoZWFkZXJfX3RleHRcIlxuICAgICAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKCkgPz8gcHJvcHMudGl0bGVdKV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTGlzdFN1YmhlYWRlci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZEaXZpZGVyLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlVGV4dENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQsIGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZEaXZpZGVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjb2xvcjogU3RyaW5nLFxuICBpbnNldDogQm9vbGVhbixcbiAgbGVuZ3RoOiBbTnVtYmVyLCBTdHJpbmddLFxuICB0aGlja25lc3M6IFtOdW1iZXIsIFN0cmluZ10sXG4gIHZlcnRpY2FsOiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZEaXZpZGVyJyk7XG5leHBvcnQgY29uc3QgVkRpdmlkZXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkRpdmlkZXInLFxuICBwcm9wczogbWFrZVZEaXZpZGVyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcih0b1JlZihwcm9wcywgJ2NvbG9yJykpO1xuICAgIGNvbnN0IGRpdmlkZXJTdHlsZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBzdHlsZXMgPSB7fTtcbiAgICAgIGlmIChwcm9wcy5sZW5ndGgpIHtcbiAgICAgICAgc3R5bGVzW3Byb3BzLnZlcnRpY2FsID8gJ21heEhlaWdodCcgOiAnbWF4V2lkdGgnXSA9IGNvbnZlcnRUb1VuaXQocHJvcHMubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy50aGlja25lc3MpIHtcbiAgICAgICAgc3R5bGVzW3Byb3BzLnZlcnRpY2FsID8gJ2JvcmRlclJpZ2h0V2lkdGgnIDogJ2JvcmRlclRvcFdpZHRoJ10gPSBjb252ZXJ0VG9Vbml0KHByb3BzLnRoaWNrbmVzcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3R5bGVzO1xuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJoclwiLCB7XG4gICAgICBcImNsYXNzXCI6IFt7XG4gICAgICAgICd2LWRpdmlkZXInOiB0cnVlLFxuICAgICAgICAndi1kaXZpZGVyLS1pbnNldCc6IHByb3BzLmluc2V0LFxuICAgICAgICAndi1kaXZpZGVyLS12ZXJ0aWNhbCc6IHByb3BzLnZlcnRpY2FsXG4gICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIHRleHRDb2xvckNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW2RpdmlkZXJTdHlsZXMudmFsdWUsIHRleHRDb2xvclN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdLFxuICAgICAgXCJhcmlhLW9yaWVudGF0aW9uXCI6ICFhdHRycy5yb2xlIHx8IGF0dHJzLnJvbGUgPT09ICdzZXBhcmF0b3InID8gcHJvcHMudmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnIDogdW5kZWZpbmVkLFxuICAgICAgXCJyb2xlXCI6IGAke2F0dHJzLnJvbGUgfHwgJ3NlcGFyYXRvcid9YFxuICAgIH0sIG51bGwpKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkRpdmlkZXIubWpzLm1hcCIsImltcG9ydCB7IG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZMaXN0R3JvdXAgfSBmcm9tIFwiLi9WTGlzdEdyb3VwLm1qc1wiO1xuaW1wb3J0IHsgVkxpc3RJdGVtIH0gZnJvbSBcIi4vVkxpc3RJdGVtLm1qc1wiO1xuaW1wb3J0IHsgVkxpc3RTdWJoZWFkZXIgfSBmcm9tIFwiLi9WTGlzdFN1YmhlYWRlci5tanNcIjtcbmltcG9ydCB7IFZEaXZpZGVyIH0gZnJvbSBcIi4uL1ZEaXZpZGVyL2luZGV4Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNyZWF0ZUxpc3QgfSBmcm9tIFwiLi9saXN0Lm1qc1wiO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZMaXN0Q2hpbGRyZW5Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGl0ZW1zOiBBcnJheSxcbiAgcmV0dXJuT2JqZWN0OiBCb29sZWFuXG59LCAnVkxpc3RDaGlsZHJlbicpO1xuZXhwb3J0IGNvbnN0IFZMaXN0Q2hpbGRyZW4gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkxpc3RDaGlsZHJlbicsXG4gIHByb3BzOiBtYWtlVkxpc3RDaGlsZHJlblByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY3JlYXRlTGlzdCgpO1xuICAgIHJldHVybiAoKSA9PiBzbG90cy5kZWZhdWx0Py4oKSA/PyBwcm9wcy5pdGVtcz8ubWFwKF9yZWYyID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBwcm9wczogaXRlbVByb3BzLFxuICAgICAgICB0eXBlLFxuICAgICAgICByYXc6IGl0ZW1cbiAgICAgIH0gPSBfcmVmMjtcbiAgICAgIGlmICh0eXBlID09PSAnZGl2aWRlcicpIHtcbiAgICAgICAgcmV0dXJuIHNsb3RzLmRpdmlkZXI/Lih7XG4gICAgICAgICAgcHJvcHM6IGl0ZW1Qcm9wc1xuICAgICAgICB9KSA/PyBfY3JlYXRlVk5vZGUoVkRpdmlkZXIsIGl0ZW1Qcm9wcywgbnVsbCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gJ3N1YmhlYWRlcicpIHtcbiAgICAgICAgcmV0dXJuIHNsb3RzLnN1YmhlYWRlcj8uKHtcbiAgICAgICAgICBwcm9wczogaXRlbVByb3BzXG4gICAgICAgIH0pID8/IF9jcmVhdGVWTm9kZShWTGlzdFN1YmhlYWRlciwgaXRlbVByb3BzLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNsb3RzV2l0aEl0ZW0gPSB7XG4gICAgICAgIHN1YnRpdGxlOiBzbG90cy5zdWJ0aXRsZSA/IHNsb3RQcm9wcyA9PiBzbG90cy5zdWJ0aXRsZT8uKHtcbiAgICAgICAgICAuLi5zbG90UHJvcHMsXG4gICAgICAgICAgaXRlbVxuICAgICAgICB9KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgcHJlcGVuZDogc2xvdHMucHJlcGVuZCA/IHNsb3RQcm9wcyA9PiBzbG90cy5wcmVwZW5kPy4oe1xuICAgICAgICAgIC4uLnNsb3RQcm9wcyxcbiAgICAgICAgICBpdGVtXG4gICAgICAgIH0pIDogdW5kZWZpbmVkLFxuICAgICAgICBhcHBlbmQ6IHNsb3RzLmFwcGVuZCA/IHNsb3RQcm9wcyA9PiBzbG90cy5hcHBlbmQ/Lih7XG4gICAgICAgICAgLi4uc2xvdFByb3BzLFxuICAgICAgICAgIGl0ZW1cbiAgICAgICAgfSkgOiB1bmRlZmluZWQsXG4gICAgICAgIHRpdGxlOiBzbG90cy50aXRsZSA/IHNsb3RQcm9wcyA9PiBzbG90cy50aXRsZT8uKHtcbiAgICAgICAgICAuLi5zbG90UHJvcHMsXG4gICAgICAgICAgaXRlbVxuICAgICAgICB9KSA6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICAgIGNvbnN0IFtsaXN0R3JvdXBQcm9wcywgXzFdID0gVkxpc3RHcm91cC5maWx0ZXJQcm9wcyhpdGVtUHJvcHMpO1xuICAgICAgcmV0dXJuIGNoaWxkcmVuID8gX2NyZWF0ZVZOb2RlKFZMaXN0R3JvdXAsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJ2YWx1ZVwiOiBpdGVtUHJvcHM/LnZhbHVlXG4gICAgICB9LCBsaXN0R3JvdXBQcm9wcyksIHtcbiAgICAgICAgYWN0aXZhdG9yOiBfcmVmMyA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIHByb3BzOiBhY3RpdmF0b3JQcm9wc1xuICAgICAgICAgIH0gPSBfcmVmMztcbiAgICAgICAgICBjb25zdCBsaXN0SXRlbVByb3BzID0ge1xuICAgICAgICAgICAgLi4uaXRlbVByb3BzLFxuICAgICAgICAgICAgLi4uYWN0aXZhdG9yUHJvcHMsXG4gICAgICAgICAgICB2YWx1ZTogcHJvcHMucmV0dXJuT2JqZWN0ID8gaXRlbSA6IGl0ZW1Qcm9wcy52YWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIHNsb3RzLmhlYWRlciA/IHNsb3RzLmhlYWRlcih7XG4gICAgICAgICAgICBwcm9wczogbGlzdEl0ZW1Qcm9wc1xuICAgICAgICAgIH0pIDogX2NyZWF0ZVZOb2RlKFZMaXN0SXRlbSwgbGlzdEl0ZW1Qcm9wcywgc2xvdHNXaXRoSXRlbSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IF9jcmVhdGVWTm9kZShWTGlzdENoaWxkcmVuLCB7XG4gICAgICAgICAgXCJpdGVtc1wiOiBjaGlsZHJlblxuICAgICAgICB9LCBzbG90cylcbiAgICAgIH0pIDogc2xvdHMuaXRlbSA/IHNsb3RzLml0ZW0oe1xuICAgICAgICBwcm9wczogaXRlbVByb3BzXG4gICAgICB9KSA6IF9jcmVhdGVWTm9kZShWTGlzdEl0ZW0sIF9tZXJnZVByb3BzKGl0ZW1Qcm9wcywge1xuICAgICAgICBcInZhbHVlXCI6IHByb3BzLnJldHVybk9iamVjdCA/IGl0ZW0gOiBpdGVtUHJvcHMudmFsdWVcbiAgICAgIH0pLCBzbG90c1dpdGhJdGVtKTtcbiAgICB9KTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTGlzdENoaWxkcmVuLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlZXBFcXVhbCwgZ2V0UHJvcGVydHlGcm9tSXRlbSwgcGljaywgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VJdGVtc1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgaXRlbXM6IHtcbiAgICB0eXBlOiBBcnJheSxcbiAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICB9LFxuICBpdGVtVGl0bGU6IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBBcnJheSwgRnVuY3Rpb25dLFxuICAgIGRlZmF1bHQ6ICd0aXRsZSdcbiAgfSxcbiAgaXRlbVZhbHVlOiB7XG4gICAgdHlwZTogW1N0cmluZywgQXJyYXksIEZ1bmN0aW9uXSxcbiAgICBkZWZhdWx0OiAndmFsdWUnXG4gIH0sXG4gIGl0ZW1DaGlsZHJlbjoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmcsIEFycmF5LCBGdW5jdGlvbl0sXG4gICAgZGVmYXVsdDogJ2NoaWxkcmVuJ1xuICB9LFxuICBpdGVtUHJvcHM6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nLCBBcnJheSwgRnVuY3Rpb25dLFxuICAgIGRlZmF1bHQ6ICdwcm9wcydcbiAgfSxcbiAgcmV0dXJuT2JqZWN0OiBCb29sZWFuLFxuICB2YWx1ZUNvbXBhcmF0b3I6IHtcbiAgICB0eXBlOiBGdW5jdGlvbixcbiAgICBkZWZhdWx0OiBkZWVwRXF1YWxcbiAgfVxufSwgJ2xpc3QtaXRlbXMnKTtcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1JdGVtKHByb3BzLCBpdGVtKSB7XG4gIGNvbnN0IHRpdGxlID0gZ2V0UHJvcGVydHlGcm9tSXRlbShpdGVtLCBwcm9wcy5pdGVtVGl0bGUsIGl0ZW0pO1xuICBjb25zdCB2YWx1ZSA9IGdldFByb3BlcnR5RnJvbUl0ZW0oaXRlbSwgcHJvcHMuaXRlbVZhbHVlLCB0aXRsZSk7XG4gIGNvbnN0IGNoaWxkcmVuID0gZ2V0UHJvcGVydHlGcm9tSXRlbShpdGVtLCBwcm9wcy5pdGVtQ2hpbGRyZW4pO1xuICBjb25zdCBpdGVtUHJvcHMgPSBwcm9wcy5pdGVtUHJvcHMgPT09IHRydWUgPyB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbSAhPSBudWxsICYmICFBcnJheS5pc0FycmF5KGl0ZW0pID8gJ2NoaWxkcmVuJyBpbiBpdGVtID8gcGljayhpdGVtLCBbJ2NoaWxkcmVuJ10pWzFdIDogaXRlbSA6IHVuZGVmaW5lZCA6IGdldFByb3BlcnR5RnJvbUl0ZW0oaXRlbSwgcHJvcHMuaXRlbVByb3BzKTtcbiAgY29uc3QgX3Byb3BzID0ge1xuICAgIHRpdGxlLFxuICAgIHZhbHVlLFxuICAgIC4uLml0ZW1Qcm9wc1xuICB9O1xuICByZXR1cm4ge1xuICAgIHRpdGxlOiBTdHJpbmcoX3Byb3BzLnRpdGxlID8/ICcnKSxcbiAgICB2YWx1ZTogX3Byb3BzLnZhbHVlLFxuICAgIHByb3BzOiBfcHJvcHMsXG4gICAgY2hpbGRyZW46IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gdHJhbnNmb3JtSXRlbXMocHJvcHMsIGNoaWxkcmVuKSA6IHVuZGVmaW5lZCxcbiAgICByYXc6IGl0ZW1cbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1JdGVtcyhwcm9wcywgaXRlbXMpIHtcbiAgY29uc3QgYXJyYXkgPSBbXTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgYXJyYXkucHVzaCh0cmFuc2Zvcm1JdGVtKHByb3BzLCBpdGVtKSk7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZUl0ZW1zKHByb3BzKSB7XG4gIGNvbnN0IGl0ZW1zID0gY29tcHV0ZWQoKCkgPT4gdHJhbnNmb3JtSXRlbXMocHJvcHMsIHByb3BzLml0ZW1zKSk7XG4gIGNvbnN0IGhhc051bGxJdGVtID0gY29tcHV0ZWQoKCkgPT4gaXRlbXMudmFsdWUuc29tZShpdGVtID0+IGl0ZW0udmFsdWUgPT09IG51bGwpKTtcbiAgZnVuY3Rpb24gdHJhbnNmb3JtSW4odmFsdWUpIHtcbiAgICBpZiAoIWhhc051bGxJdGVtLnZhbHVlKSB7XG4gICAgICAvLyBXaGVuIHRoZSBtb2RlbCB2YWx1ZSBpcyBudWxsLCByZXR1cm4gYW4gSW50ZXJuYWxJdGVtXG4gICAgICAvLyBiYXNlZCBvbiBudWxsIG9ubHkgaWYgbnVsbCBpcyBvbmUgb2YgdGhlIGl0ZW1zXG4gICAgICB2YWx1ZSA9IHZhbHVlLmZpbHRlcih2ID0+IHYgIT09IG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUubWFwKHYgPT4ge1xuICAgICAgaWYgKHByb3BzLnJldHVybk9iamVjdCAmJiB0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gU3RyaW5nIG1vZGVsIHZhbHVlIG1lYW5zIHZhbHVlIGlzIGEgY3VzdG9tIGlucHV0IHZhbHVlIGZyb20gY29tYm9ib3hcbiAgICAgICAgLy8gRG9uJ3QgbG9vayB1cCBleGlzdGluZyBpdGVtcyBpZiB0aGUgbW9kZWwgdmFsdWUgaXMgYSBzdHJpbmdcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybUl0ZW0ocHJvcHMsIHYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZW1zLnZhbHVlLmZpbmQoaXRlbSA9PiBwcm9wcy52YWx1ZUNvbXBhcmF0b3IodiwgaXRlbS52YWx1ZSkpIHx8IHRyYW5zZm9ybUl0ZW0ocHJvcHMsIHYpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHRyYW5zZm9ybU91dCh2YWx1ZSkge1xuICAgIHJldHVybiBwcm9wcy5yZXR1cm5PYmplY3QgPyB2YWx1ZS5tYXAoX3JlZiA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICByYXdcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgcmV0dXJuIHJhdztcbiAgICB9KSA6IHZhbHVlLm1hcChfcmVmMiA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICB2YWx1ZVxuICAgICAgfSA9IF9yZWYyO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgaXRlbXMsXG4gICAgdHJhbnNmb3JtSW4sXG4gICAgdHJhbnNmb3JtT3V0XG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0LWl0ZW1zLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkxpc3QuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZMaXN0Q2hpbGRyZW4gfSBmcm9tIFwiLi9WTGlzdENoaWxkcmVuLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgY3JlYXRlTGlzdCB9IGZyb20gXCIuL2xpc3QubWpzXCI7XG5pbXBvcnQgeyBtYWtlQm9yZGVyUHJvcHMsIHVzZUJvcmRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ib3JkZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VCYWNrZ3JvdW5kQ29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiO1xuaW1wb3J0IHsgbWFrZURlbnNpdHlQcm9wcywgdXNlRGVuc2l0eSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZW5zaXR5Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURpbWVuc2lvblByb3BzLCB1c2VEaW1lbnNpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGltZW5zaW9ucy5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VJdGVtc1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xpc3QtaXRlbXMubWpzXCI7XG5pbXBvcnQgeyBtYWtlTmVzdGVkUHJvcHMsIHVzZU5lc3RlZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9uZXN0ZWQvbmVzdGVkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdW5kZWRQcm9wcywgdXNlUm91bmRlZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVmFyaWFudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3ZhcmlhbnQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHJlZiwgc2hhbGxvd1JlZiwgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZm9jdXNDaGlsZCwgZ2VuZXJpY0NvbXBvbmVudCwgZ2V0UHJvcGVydHlGcm9tSXRlbSwgcGljaywgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1JdGVtKHByb3BzLCBpdGVtKSB7XG4gIGNvbnN0IHR5cGUgPSBnZXRQcm9wZXJ0eUZyb21JdGVtKGl0ZW0sIHByb3BzLml0ZW1UeXBlLCAnaXRlbScpO1xuICBjb25zdCB0aXRsZSA9IGlzUHJpbWl0aXZlKGl0ZW0pID8gaXRlbSA6IGdldFByb3BlcnR5RnJvbUl0ZW0oaXRlbSwgcHJvcHMuaXRlbVRpdGxlKTtcbiAgY29uc3QgdmFsdWUgPSBnZXRQcm9wZXJ0eUZyb21JdGVtKGl0ZW0sIHByb3BzLml0ZW1WYWx1ZSwgdW5kZWZpbmVkKTtcbiAgY29uc3QgY2hpbGRyZW4gPSBnZXRQcm9wZXJ0eUZyb21JdGVtKGl0ZW0sIHByb3BzLml0ZW1DaGlsZHJlbik7XG4gIGNvbnN0IGl0ZW1Qcm9wcyA9IHByb3BzLml0ZW1Qcm9wcyA9PT0gdHJ1ZSA/IHBpY2soaXRlbSwgWydjaGlsZHJlbiddKVsxXSA6IGdldFByb3BlcnR5RnJvbUl0ZW0oaXRlbSwgcHJvcHMuaXRlbVByb3BzKTtcbiAgY29uc3QgX3Byb3BzID0ge1xuICAgIHRpdGxlLFxuICAgIHZhbHVlLFxuICAgIC4uLml0ZW1Qcm9wc1xuICB9O1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgdGl0bGU6IF9wcm9wcy50aXRsZSxcbiAgICB2YWx1ZTogX3Byb3BzLnZhbHVlLFxuICAgIHByb3BzOiBfcHJvcHMsXG4gICAgY2hpbGRyZW46IHR5cGUgPT09ICdpdGVtJyAmJiBjaGlsZHJlbiA/IHRyYW5zZm9ybUl0ZW1zKHByb3BzLCBjaGlsZHJlbikgOiB1bmRlZmluZWQsXG4gICAgcmF3OiBpdGVtXG4gIH07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1JdGVtcyhwcm9wcywgaXRlbXMpIHtcbiAgY29uc3QgYXJyYXkgPSBbXTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgYXJyYXkucHVzaCh0cmFuc2Zvcm1JdGVtKHByb3BzLCBpdGVtKSk7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuZnVuY3Rpb24gdXNlTGlzdEl0ZW1zKHByb3BzKSB7XG4gIGNvbnN0IGl0ZW1zID0gY29tcHV0ZWQoKCkgPT4gdHJhbnNmb3JtSXRlbXMocHJvcHMsIHByb3BzLml0ZW1zKSk7XG4gIHJldHVybiB7XG4gICAgaXRlbXNcbiAgfTtcbn1cbmV4cG9ydCBjb25zdCBtYWtlVkxpc3RQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGJhc2VDb2xvcjogU3RyaW5nLFxuICAvKiBAZGVwcmVjYXRlZCAqL1xuICBhY3RpdmVDb2xvcjogU3RyaW5nLFxuICBhY3RpdmVDbGFzczogU3RyaW5nLFxuICBiZ0NvbG9yOiBTdHJpbmcsXG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICBsaW5lczoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6ICdvbmUnXG4gIH0sXG4gIG5hdjogQm9vbGVhbixcbiAgLi4ubWFrZU5lc3RlZFByb3BzKHtcbiAgICBzZWxlY3RTdHJhdGVneTogJ3NpbmdsZS1sZWFmJyxcbiAgICBvcGVuU3RyYXRlZ3k6ICdsaXN0J1xuICB9KSxcbiAgLi4ubWFrZUJvcmRlclByb3BzKCksXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGVuc2l0eVByb3BzKCksXG4gIC4uLm1ha2VEaW1lbnNpb25Qcm9wcygpLFxuICAuLi5tYWtlRWxldmF0aW9uUHJvcHMoKSxcbiAgaXRlbVR5cGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ3R5cGUnXG4gIH0sXG4gIC4uLm1ha2VJdGVtc1Byb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKCksXG4gIC4uLm1ha2VWYXJpYW50UHJvcHMoe1xuICAgIHZhcmlhbnQ6ICd0ZXh0J1xuICB9KVxufSwgJ1ZMaXN0Jyk7XG5leHBvcnQgY29uc3QgVkxpc3QgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkxpc3QnLFxuICBwcm9wczogbWFrZVZMaXN0UHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOnNlbGVjdGVkJzogdmFsID0+IHRydWUsXG4gICAgJ3VwZGF0ZTpvcGVuZWQnOiB2YWwgPT4gdHJ1ZSxcbiAgICAnY2xpY2s6b3Blbic6IHZhbHVlID0+IHRydWUsXG4gICAgJ2NsaWNrOnNlbGVjdCc6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBpdGVtc1xuICAgIH0gPSB1c2VMaXN0SXRlbXMocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHRvUmVmKHByb3BzLCAnYmdDb2xvcicpKTtcbiAgICBjb25zdCB7XG4gICAgICBib3JkZXJDbGFzc2VzXG4gICAgfSA9IHVzZUJvcmRlcihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGVuc2l0eUNsYXNzZXNcbiAgICB9ID0gdXNlRGVuc2l0eShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGltZW5zaW9uU3R5bGVzXG4gICAgfSA9IHVzZURpbWVuc2lvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIG9wZW4sXG4gICAgICBzZWxlY3RcbiAgICB9ID0gdXNlTmVzdGVkKHByb3BzKTtcbiAgICBjb25zdCBsaW5lQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmxpbmVzID8gYHYtbGlzdC0tJHtwcm9wcy5saW5lc30tbGluZWAgOiB1bmRlZmluZWQpO1xuICAgIGNvbnN0IGFjdGl2ZUNvbG9yID0gdG9SZWYocHJvcHMsICdhY3RpdmVDb2xvcicpO1xuICAgIGNvbnN0IGJhc2VDb2xvciA9IHRvUmVmKHByb3BzLCAnYmFzZUNvbG9yJyk7XG4gICAgY29uc3QgY29sb3IgPSB0b1JlZihwcm9wcywgJ2NvbG9yJyk7XG4gICAgY3JlYXRlTGlzdCgpO1xuICAgIHByb3ZpZGVEZWZhdWx0cyh7XG4gICAgICBWTGlzdEdyb3VwOiB7XG4gICAgICAgIGFjdGl2ZUNvbG9yLFxuICAgICAgICBiYXNlQ29sb3IsXG4gICAgICAgIGNvbG9yXG4gICAgICB9LFxuICAgICAgVkxpc3RJdGVtOiB7XG4gICAgICAgIGFjdGl2ZUNsYXNzOiB0b1JlZihwcm9wcywgJ2FjdGl2ZUNsYXNzJyksXG4gICAgICAgIGFjdGl2ZUNvbG9yLFxuICAgICAgICBiYXNlQ29sb3IsXG4gICAgICAgIGNvbG9yLFxuICAgICAgICBkZW5zaXR5OiB0b1JlZihwcm9wcywgJ2RlbnNpdHknKSxcbiAgICAgICAgZGlzYWJsZWQ6IHRvUmVmKHByb3BzLCAnZGlzYWJsZWQnKSxcbiAgICAgICAgbGluZXM6IHRvUmVmKHByb3BzLCAnbGluZXMnKSxcbiAgICAgICAgbmF2OiB0b1JlZihwcm9wcywgJ25hdicpLFxuICAgICAgICB2YXJpYW50OiB0b1JlZihwcm9wcywgJ3ZhcmlhbnQnKVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGlzRm9jdXNlZCA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIGNvbnN0IGNvbnRlbnRSZWYgPSByZWYoKTtcbiAgICBmdW5jdGlvbiBvbkZvY3VzaW4oZSkge1xuICAgICAgaXNGb2N1c2VkLnZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Gb2N1c291dChlKSB7XG4gICAgICBpc0ZvY3VzZWQudmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Gb2N1cyhlKSB7XG4gICAgICBpZiAoIWlzRm9jdXNlZC52YWx1ZSAmJiAhKGUucmVsYXRlZFRhcmdldCAmJiBjb250ZW50UmVmLnZhbHVlPy5jb250YWlucyhlLnJlbGF0ZWRUYXJnZXQpKSkgZm9jdXMoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25LZXlkb3duKGUpIHtcbiAgICAgIGlmICghY29udGVudFJlZi52YWx1ZSkgcmV0dXJuO1xuICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dEb3duJykge1xuICAgICAgICBmb2N1cygnbmV4dCcpO1xuICAgICAgfSBlbHNlIGlmIChlLmtleSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICAgIGZvY3VzKCdwcmV2Jyk7XG4gICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnSG9tZScpIHtcbiAgICAgICAgZm9jdXMoJ2ZpcnN0Jyk7XG4gICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnRW5kJykge1xuICAgICAgICBmb2N1cygnbGFzdCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb2N1cyhsb2NhdGlvbikge1xuICAgICAgaWYgKGNvbnRlbnRSZWYudmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZvY3VzQ2hpbGQoY29udGVudFJlZi52YWx1ZSwgbG9jYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgICAgXCJyZWZcIjogY29udGVudFJlZixcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtbGlzdCcsIHtcbiAgICAgICAgICAndi1saXN0LS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICd2LWxpc3QtLW5hdic6IHByb3BzLm5hdlxuICAgICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIGJvcmRlckNsYXNzZXMudmFsdWUsIGRlbnNpdHlDbGFzc2VzLnZhbHVlLCBlbGV2YXRpb25DbGFzc2VzLnZhbHVlLCBsaW5lQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlLCBkaW1lbnNpb25TdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXSxcbiAgICAgICAgXCJ0YWJpbmRleFwiOiBwcm9wcy5kaXNhYmxlZCB8fCBpc0ZvY3VzZWQudmFsdWUgPyAtMSA6IDAsXG4gICAgICAgIFwicm9sZVwiOiBcImxpc3Rib3hcIixcbiAgICAgICAgXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIjogdW5kZWZpbmVkLFxuICAgICAgICBcIm9uRm9jdXNpblwiOiBvbkZvY3VzaW4sXG4gICAgICAgIFwib25Gb2N1c291dFwiOiBvbkZvY3Vzb3V0LFxuICAgICAgICBcIm9uRm9jdXNcIjogb25Gb2N1cyxcbiAgICAgICAgXCJvbktleWRvd25cIjogb25LZXlkb3duXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtfY3JlYXRlVk5vZGUoVkxpc3RDaGlsZHJlbiwge1xuICAgICAgICAgIFwiaXRlbXNcIjogaXRlbXMudmFsdWUsXG4gICAgICAgICAgXCJyZXR1cm5PYmplY3RcIjogcHJvcHMucmV0dXJuT2JqZWN0XG4gICAgICAgIH0sIHNsb3RzKV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBvcGVuLFxuICAgICAgc2VsZWN0LFxuICAgICAgZm9jdXNcbiAgICB9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZMaXN0Lm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBWTGlzdEltZyA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtbGlzdC1pbWcnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZMaXN0SW1nLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkxpc3RJdGVtQWN0aW9uUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBzdGFydDogQm9vbGVhbixcbiAgZW5kOiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKClcbn0sICdWTGlzdEl0ZW1BY3Rpb24nKTtcbmV4cG9ydCBjb25zdCBWTGlzdEl0ZW1BY3Rpb24gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkxpc3RJdGVtQWN0aW9uJyxcbiAgcHJvcHM6IG1ha2VWTGlzdEl0ZW1BY3Rpb25Qcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1saXN0LWl0ZW0tYWN0aW9uJywge1xuICAgICAgICAndi1saXN0LWl0ZW0tYWN0aW9uLS1zdGFydCc6IHByb3BzLnN0YXJ0LFxuICAgICAgICAndi1saXN0LWl0ZW0tYWN0aW9uLS1lbmQnOiBwcm9wcy5lbmRcbiAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICB9LCBzbG90cykpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTGlzdEl0ZW1BY3Rpb24ubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWTGlzdEl0ZW1NZWRpYVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgc3RhcnQ6IEJvb2xlYW4sXG4gIGVuZDogQm9vbGVhbixcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpXG59LCAnVkxpc3RJdGVtTWVkaWEnKTtcbmV4cG9ydCBjb25zdCBWTGlzdEl0ZW1NZWRpYSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTGlzdEl0ZW1NZWRpYScsXG4gIHByb3BzOiBtYWtlVkxpc3RJdGVtTWVkaWFQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1saXN0LWl0ZW0tbWVkaWEnLCB7XG4gICAgICAgICAgJ3YtbGlzdC1pdGVtLW1lZGlhLS1zdGFydCc6IHByb3BzLnN0YXJ0LFxuICAgICAgICAgICd2LWxpc3QtaXRlbS1tZWRpYS0tZW5kJzogcHJvcHMuZW5kXG4gICAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSwgc2xvdHMpO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTGlzdEl0ZW1NZWRpYS5tanMubWFwIiwiLy8gVHlwZXNcblxuLyoqIENvbnZlcnQgYSBwb2ludCBpbiBsb2NhbCBzcGFjZSB0byB2aWV3cG9ydCBzcGFjZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRUb1ZpZXdwb3J0KHBvaW50LCBvZmZzZXQpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwb2ludC54ICsgb2Zmc2V0LngsXG4gICAgeTogcG9pbnQueSArIG9mZnNldC55XG4gIH07XG59XG5cbi8qKiBDb252ZXJ0IGEgcG9pbnQgaW4gdmlld3BvcnQgc3BhY2UgdG8gbG9jYWwgc3BhY2UgKi9cbmV4cG9ydCBmdW5jdGlvbiB2aWV3cG9ydFRvRWxlbWVudChwb2ludCwgb2Zmc2V0KSB7XG4gIHJldHVybiB7XG4gICAgeDogcG9pbnQueCAtIG9mZnNldC54LFxuICAgIHk6IHBvaW50LnkgLSBvZmZzZXQueVxuICB9O1xufVxuXG4vKiogR2V0IHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIHBvaW50cyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9mZnNldChhLCBiKSB7XG4gIHJldHVybiB7XG4gICAgeDogYS54IC0gYi54LFxuICAgIHk6IGEueSAtIGIueVxuICB9O1xufVxuXG4vKiogQ29udmVydCBhbiBhbmNob3Igb2JqZWN0IHRvIGEgcG9pbnQgaW4gbG9jYWwgc3BhY2UgKi9cbmV4cG9ydCBmdW5jdGlvbiBhbmNob3JUb1BvaW50KGFuY2hvciwgYm94KSB7XG4gIGlmIChhbmNob3Iuc2lkZSA9PT0gJ3RvcCcgfHwgYW5jaG9yLnNpZGUgPT09ICdib3R0b20nKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2lkZSxcbiAgICAgIGFsaWduXG4gICAgfSA9IGFuY2hvcjtcbiAgICBjb25zdCB4ID0gYWxpZ24gPT09ICdsZWZ0JyA/IDAgOiBhbGlnbiA9PT0gJ2NlbnRlcicgPyBib3gud2lkdGggLyAyIDogYWxpZ24gPT09ICdyaWdodCcgPyBib3gud2lkdGggOiBhbGlnbjtcbiAgICBjb25zdCB5ID0gc2lkZSA9PT0gJ3RvcCcgPyAwIDogc2lkZSA9PT0gJ2JvdHRvbScgPyBib3guaGVpZ2h0IDogc2lkZTtcbiAgICByZXR1cm4gZWxlbWVudFRvVmlld3BvcnQoe1xuICAgICAgeCxcbiAgICAgIHlcbiAgICB9LCBib3gpO1xuICB9IGVsc2UgaWYgKGFuY2hvci5zaWRlID09PSAnbGVmdCcgfHwgYW5jaG9yLnNpZGUgPT09ICdyaWdodCcpIHtcbiAgICBjb25zdCB7XG4gICAgICBzaWRlLFxuICAgICAgYWxpZ25cbiAgICB9ID0gYW5jaG9yO1xuICAgIGNvbnN0IHggPSBzaWRlID09PSAnbGVmdCcgPyAwIDogc2lkZSA9PT0gJ3JpZ2h0JyA/IGJveC53aWR0aCA6IHNpZGU7XG4gICAgY29uc3QgeSA9IGFsaWduID09PSAndG9wJyA/IDAgOiBhbGlnbiA9PT0gJ2NlbnRlcicgPyBib3guaGVpZ2h0IC8gMiA6IGFsaWduID09PSAnYm90dG9tJyA/IGJveC5oZWlnaHQgOiBhbGlnbjtcbiAgICByZXR1cm4gZWxlbWVudFRvVmlld3BvcnQoe1xuICAgICAgeCxcbiAgICAgIHlcbiAgICB9LCBib3gpO1xuICB9XG4gIHJldHVybiBlbGVtZW50VG9WaWV3cG9ydCh7XG4gICAgeDogYm94LndpZHRoIC8gMixcbiAgICB5OiBib3guaGVpZ2h0IC8gMlxuICB9LCBib3gpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9pbnQubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VUb2dnbGVTY29wZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90b2dnbGVTY29wZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgbmV4dFRpY2ssIG9uU2NvcGVEaXNwb3NlLCByZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGFuY2hvclRvUG9pbnQsIGdldE9mZnNldCB9IGZyb20gXCIuL3V0aWwvcG9pbnQubWpzXCI7XG5pbXBvcnQgeyBjbGFtcCwgY29uc29sZUVycm9yLCBjb252ZXJ0VG9Vbml0LCBkZXN0cnVjdENvbXB1dGVkLCBmbGlwQWxpZ24sIGZsaXBDb3JuZXIsIGZsaXBTaWRlLCBnZXRBeGlzLCBnZXRTY3JvbGxQYXJlbnRzLCBJTl9CUk9XU0VSLCBpc0ZpeGVkUG9zaXRpb24sIG51bGxpZnlUcmFuc2Zvcm1zLCBwYXJzZUFuY2hvciwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBCb3gsIGdldE92ZXJmbG93IH0gZnJvbSBcIi4uLy4uL3V0aWwvYm94Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3QgbG9jYXRpb25TdHJhdGVnaWVzID0ge1xuICBzdGF0aWM6IHN0YXRpY0xvY2F0aW9uU3RyYXRlZ3ksXG4gIC8vIHNwZWNpZmljIHZpZXdwb3J0IHBvc2l0aW9uLCB1c3VhbGx5IGNlbnRlcmVkXG4gIGNvbm5lY3RlZDogY29ubmVjdGVkTG9jYXRpb25TdHJhdGVneSAvLyBjb25uZWN0ZWQgdG8gYSBjZXJ0YWluIGVsZW1lbnRcbn07XG5cbmV4cG9ydCBjb25zdCBtYWtlTG9jYXRpb25TdHJhdGVneVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgbG9jYXRpb25TdHJhdGVneToge1xuICAgIHR5cGU6IFtTdHJpbmcsIEZ1bmN0aW9uXSxcbiAgICBkZWZhdWx0OiAnc3RhdGljJyxcbiAgICB2YWxpZGF0b3I6IHZhbCA9PiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nIHx8IHZhbCBpbiBsb2NhdGlvblN0cmF0ZWdpZXNcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2JvdHRvbSdcbiAgfSxcbiAgb3JpZ2luOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdhdXRvJ1xuICB9LFxuICBvZmZzZXQ6IFtOdW1iZXIsIFN0cmluZywgQXJyYXldXG59LCAnVk92ZXJsYXktbG9jYXRpb24tc3RyYXRlZ2llcycpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxvY2F0aW9uU3RyYXRlZ2llcyhwcm9wcywgZGF0YSkge1xuICBjb25zdCBjb250ZW50U3R5bGVzID0gcmVmKHt9KTtcbiAgY29uc3QgdXBkYXRlTG9jYXRpb24gPSByZWYoKTtcbiAgaWYgKElOX0JST1dTRVIpIHtcbiAgICB1c2VUb2dnbGVTY29wZSgoKSA9PiAhIShkYXRhLmlzQWN0aXZlLnZhbHVlICYmIHByb3BzLmxvY2F0aW9uU3RyYXRlZ3kpLCByZXNldCA9PiB7XG4gICAgICB3YXRjaCgoKSA9PiBwcm9wcy5sb2NhdGlvblN0cmF0ZWd5LCByZXNldCk7XG4gICAgICBvblNjb3BlRGlzcG9zZSgoKSA9PiB7XG4gICAgICAgIHVwZGF0ZUxvY2F0aW9uLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIHByb3BzLmxvY2F0aW9uU3RyYXRlZ3kgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdXBkYXRlTG9jYXRpb24udmFsdWUgPSBwcm9wcy5sb2NhdGlvblN0cmF0ZWd5KGRhdGEsIHByb3BzLCBjb250ZW50U3R5bGVzKT8udXBkYXRlTG9jYXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVMb2NhdGlvbi52YWx1ZSA9IGxvY2F0aW9uU3RyYXRlZ2llc1twcm9wcy5sb2NhdGlvblN0cmF0ZWd5XShkYXRhLCBwcm9wcywgY29udGVudFN0eWxlcyk/LnVwZGF0ZUxvY2F0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblJlc2l6ZSwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIG9uU2NvcGVEaXNwb3NlKCgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblJlc2l6ZSk7XG4gICAgICB1cGRhdGVMb2NhdGlvbi52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBvblJlc2l6ZShlKSB7XG4gICAgdXBkYXRlTG9jYXRpb24udmFsdWU/LihlKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGNvbnRlbnRTdHlsZXMsXG4gICAgdXBkYXRlTG9jYXRpb25cbiAgfTtcbn1cbmZ1bmN0aW9uIHN0YXRpY0xvY2F0aW9uU3RyYXRlZ3koKSB7XG4gIC8vIFRPRE9cbn1cblxuLyoqIEdldCBzaXplIG9mIGVsZW1lbnQgaWdub3JpbmcgbWF4LXdpZHRoL21heC1oZWlnaHQgKi9cbmZ1bmN0aW9uIGdldEludHJpbnNpY1NpemUoZWwsIGlzUnRsKSB7XG4gIC8vIGNvbnN0IHNjcm9sbGFibGVzID0gbmV3IE1hcDxFbGVtZW50LCBbbnVtYmVyLCBudW1iZXJdPigpXG4gIC8vIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKS5mb3JFYWNoKGVsID0+IHtcbiAgLy8gICBjb25zdCB4ID0gZWwuc2Nyb2xsTGVmdFxuICAvLyAgIGNvbnN0IHkgPSBlbC5zY3JvbGxUb3BcbiAgLy8gICBpZiAoeCB8fCB5KSB7XG4gIC8vICAgICBzY3JvbGxhYmxlcy5zZXQoZWwsIFt4LCB5XSlcbiAgLy8gICB9XG4gIC8vIH0pXG5cbiAgLy8gY29uc3QgaW5pdGlhbE1heFdpZHRoID0gZWwuc3R5bGUubWF4V2lkdGhcbiAgLy8gY29uc3QgaW5pdGlhbE1heEhlaWdodCA9IGVsLnN0eWxlLm1heEhlaWdodFxuICAvLyBlbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnbWF4LXdpZHRoJylcbiAgLy8gZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ21heC1oZWlnaHQnKVxuXG4gIGlmIChpc1J0bCkge1xuICAgIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdsZWZ0Jyk7XG4gIH0gZWxzZSB7XG4gICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3JpZ2h0Jyk7XG4gIH1cblxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc29uYXJqcy9wcmVmZXItaW1tZWRpYXRlLXJldHVybiAqL1xuICBjb25zdCBjb250ZW50Qm94ID0gbnVsbGlmeVRyYW5zZm9ybXMoZWwpO1xuICBpZiAoaXNSdGwpIHtcbiAgICBjb250ZW50Qm94LnggKz0gcGFyc2VGbG9hdChlbC5zdHlsZS5yaWdodCB8fCAwKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZW50Qm94LnggLT0gcGFyc2VGbG9hdChlbC5zdHlsZS5sZWZ0IHx8IDApO1xuICB9XG4gIGNvbnRlbnRCb3gueSAtPSBwYXJzZUZsb2F0KGVsLnN0eWxlLnRvcCB8fCAwKTtcblxuICAvLyBlbC5zdHlsZS5tYXhXaWR0aCA9IGluaXRpYWxNYXhXaWR0aFxuICAvLyBlbC5zdHlsZS5tYXhIZWlnaHQgPSBpbml0aWFsTWF4SGVpZ2h0XG4gIC8vIHNjcm9sbGFibGVzLmZvckVhY2goKHBvc2l0aW9uLCBlbCkgPT4ge1xuICAvLyAgIGVsLnNjcm9sbFRvKC4uLnBvc2l0aW9uKVxuICAvLyB9KVxuXG4gIHJldHVybiBjb250ZW50Qm94O1xufVxuZnVuY3Rpb24gY29ubmVjdGVkTG9jYXRpb25TdHJhdGVneShkYXRhLCBwcm9wcywgY29udGVudFN0eWxlcykge1xuICBjb25zdCBhY3RpdmF0b3JGaXhlZCA9IGlzRml4ZWRQb3NpdGlvbihkYXRhLmFjdGl2YXRvckVsLnZhbHVlKTtcbiAgaWYgKGFjdGl2YXRvckZpeGVkKSB7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50U3R5bGVzLnZhbHVlLCB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIFtkYXRhLmlzUnRsLnZhbHVlID8gJ3JpZ2h0JyA6ICdsZWZ0J106IDBcbiAgICB9KTtcbiAgfVxuICBjb25zdCB7XG4gICAgcHJlZmVycmVkQW5jaG9yLFxuICAgIHByZWZlcnJlZE9yaWdpblxuICB9ID0gZGVzdHJ1Y3RDb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgcGFyc2VkQW5jaG9yID0gcGFyc2VBbmNob3IocHJvcHMubG9jYXRpb24sIGRhdGEuaXNSdGwudmFsdWUpO1xuICAgIGNvbnN0IHBhcnNlZE9yaWdpbiA9IHByb3BzLm9yaWdpbiA9PT0gJ292ZXJsYXAnID8gcGFyc2VkQW5jaG9yIDogcHJvcHMub3JpZ2luID09PSAnYXV0bycgPyBmbGlwU2lkZShwYXJzZWRBbmNob3IpIDogcGFyc2VBbmNob3IocHJvcHMub3JpZ2luLCBkYXRhLmlzUnRsLnZhbHVlKTtcblxuICAgIC8vIFNvbWUgY29tYmluYXRpb25zIG9mIHByb3BzIG1heSBwcm9kdWNlIGFuIGludmFsaWQgb3JpZ2luXG4gICAgaWYgKHBhcnNlZEFuY2hvci5zaWRlID09PSBwYXJzZWRPcmlnaW4uc2lkZSAmJiBwYXJzZWRBbmNob3IuYWxpZ24gPT09IGZsaXBBbGlnbihwYXJzZWRPcmlnaW4pLmFsaWduKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmVmZXJyZWRBbmNob3I6IGZsaXBDb3JuZXIocGFyc2VkQW5jaG9yKSxcbiAgICAgICAgcHJlZmVycmVkT3JpZ2luOiBmbGlwQ29ybmVyKHBhcnNlZE9yaWdpbilcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZWZlcnJlZEFuY2hvcjogcGFyc2VkQW5jaG9yLFxuICAgICAgICBwcmVmZXJyZWRPcmlnaW46IHBhcnNlZE9yaWdpblxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBbbWluV2lkdGgsIG1pbkhlaWdodCwgbWF4V2lkdGgsIG1heEhlaWdodF0gPSBbJ21pbldpZHRoJywgJ21pbkhlaWdodCcsICdtYXhXaWR0aCcsICdtYXhIZWlnaHQnXS5tYXAoa2V5ID0+IHtcbiAgICByZXR1cm4gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgdmFsID0gcGFyc2VGbG9hdChwcm9wc1trZXldKTtcbiAgICAgIHJldHVybiBpc05hTih2YWwpID8gSW5maW5pdHkgOiB2YWw7XG4gICAgfSk7XG4gIH0pO1xuICBjb25zdCBvZmZzZXQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMub2Zmc2V0KSkge1xuICAgICAgcmV0dXJuIHByb3BzLm9mZnNldDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcm9wcy5vZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBvZmZzZXQgPSBwcm9wcy5vZmZzZXQuc3BsaXQoJyAnKS5tYXAocGFyc2VGbG9hdCk7XG4gICAgICBpZiAob2Zmc2V0Lmxlbmd0aCA8IDIpIG9mZnNldC5wdXNoKDApO1xuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiBwcm9wcy5vZmZzZXQgPT09ICdudW1iZXInID8gW3Byb3BzLm9mZnNldCwgMF0gOiBbMCwgMF07XG4gIH0pO1xuICBsZXQgb2JzZXJ2ZSA9IGZhbHNlO1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoKSA9PiB7XG4gICAgaWYgKG9ic2VydmUpIHVwZGF0ZUxvY2F0aW9uKCk7XG4gIH0pO1xuICB3YXRjaChbZGF0YS5hY3RpdmF0b3JFbCwgZGF0YS5jb250ZW50RWxdLCAoX3JlZiwgX3JlZjIpID0+IHtcbiAgICBsZXQgW25ld0FjdGl2YXRvckVsLCBuZXdDb250ZW50RWxdID0gX3JlZjtcbiAgICBsZXQgW29sZEFjdGl2YXRvckVsLCBvbGRDb250ZW50RWxdID0gX3JlZjI7XG4gICAgaWYgKG9sZEFjdGl2YXRvckVsKSBvYnNlcnZlci51bm9ic2VydmUob2xkQWN0aXZhdG9yRWwpO1xuICAgIGlmIChuZXdBY3RpdmF0b3JFbCkgb2JzZXJ2ZXIub2JzZXJ2ZShuZXdBY3RpdmF0b3JFbCk7XG4gICAgaWYgKG9sZENvbnRlbnRFbCkgb2JzZXJ2ZXIudW5vYnNlcnZlKG9sZENvbnRlbnRFbCk7XG4gICAgaWYgKG5ld0NvbnRlbnRFbCkgb2JzZXJ2ZXIub2JzZXJ2ZShuZXdDb250ZW50RWwpO1xuICB9LCB7XG4gICAgaW1tZWRpYXRlOiB0cnVlXG4gIH0pO1xuICBvblNjb3BlRGlzcG9zZSgoKSA9PiB7XG4gICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgZnVuY3Rpb24gdXBkYXRlTG9jYXRpb24oKSB7XG4gICAgb2JzZXJ2ZSA9IGZhbHNlO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gb2JzZXJ2ZSA9IHRydWUpO1xuICAgIH0pO1xuICAgIGlmICghZGF0YS5hY3RpdmF0b3JFbC52YWx1ZSB8fCAhZGF0YS5jb250ZW50RWwudmFsdWUpIHJldHVybjtcbiAgICBjb25zdCB0YXJnZXRCb3ggPSBkYXRhLmFjdGl2YXRvckVsLnZhbHVlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGNvbnRlbnRCb3ggPSBnZXRJbnRyaW5zaWNTaXplKGRhdGEuY29udGVudEVsLnZhbHVlLCBkYXRhLmlzUnRsLnZhbHVlKTtcbiAgICBjb25zdCBzY3JvbGxQYXJlbnRzID0gZ2V0U2Nyb2xsUGFyZW50cyhkYXRhLmNvbnRlbnRFbC52YWx1ZSk7XG4gICAgY29uc3Qgdmlld3BvcnRNYXJnaW4gPSAxMjtcbiAgICBpZiAoIXNjcm9sbFBhcmVudHMubGVuZ3RoKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLnB1c2goZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgICAgIGlmICghKGRhdGEuY29udGVudEVsLnZhbHVlLnN0eWxlLnRvcCAmJiBkYXRhLmNvbnRlbnRFbC52YWx1ZS5zdHlsZS5sZWZ0KSkge1xuICAgICAgICBjb250ZW50Qm94LnggLT0gcGFyc2VGbG9hdChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS12LWJvZHktc2Nyb2xsLXgnKSB8fCAwKTtcbiAgICAgICAgY29udGVudEJveC55IC09IHBhcnNlRmxvYXQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0tdi1ib2R5LXNjcm9sbC15JykgfHwgMCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHZpZXdwb3J0ID0gc2Nyb2xsUGFyZW50cy5yZWR1Y2UoKGJveCwgZWwpID0+IHtcbiAgICAgIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHNjcm9sbEJveCA9IG5ldyBCb3goe1xuICAgICAgICB4OiBlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID8gMCA6IHJlY3QueCxcbiAgICAgICAgeTogZWwgPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA/IDAgOiByZWN0LnksXG4gICAgICAgIHdpZHRoOiBlbC5jbGllbnRXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBlbC5jbGllbnRIZWlnaHRcbiAgICAgIH0pO1xuICAgICAgaWYgKGJveCkge1xuICAgICAgICByZXR1cm4gbmV3IEJveCh7XG4gICAgICAgICAgeDogTWF0aC5tYXgoYm94LmxlZnQsIHNjcm9sbEJveC5sZWZ0KSxcbiAgICAgICAgICB5OiBNYXRoLm1heChib3gudG9wLCBzY3JvbGxCb3gudG9wKSxcbiAgICAgICAgICB3aWR0aDogTWF0aC5taW4oYm94LnJpZ2h0LCBzY3JvbGxCb3gucmlnaHQpIC0gTWF0aC5tYXgoYm94LmxlZnQsIHNjcm9sbEJveC5sZWZ0KSxcbiAgICAgICAgICBoZWlnaHQ6IE1hdGgubWluKGJveC5ib3R0b20sIHNjcm9sbEJveC5ib3R0b20pIC0gTWF0aC5tYXgoYm94LnRvcCwgc2Nyb2xsQm94LnRvcClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2Nyb2xsQm94O1xuICAgIH0sIHVuZGVmaW5lZCk7XG4gICAgdmlld3BvcnQueCArPSB2aWV3cG9ydE1hcmdpbjtcbiAgICB2aWV3cG9ydC55ICs9IHZpZXdwb3J0TWFyZ2luO1xuICAgIHZpZXdwb3J0LndpZHRoIC09IHZpZXdwb3J0TWFyZ2luICogMjtcbiAgICB2aWV3cG9ydC5oZWlnaHQgLT0gdmlld3BvcnRNYXJnaW4gKiAyO1xuICAgIGxldCBwbGFjZW1lbnQgPSB7XG4gICAgICBhbmNob3I6IHByZWZlcnJlZEFuY2hvci52YWx1ZSxcbiAgICAgIG9yaWdpbjogcHJlZmVycmVkT3JpZ2luLnZhbHVlXG4gICAgfTtcbiAgICBmdW5jdGlvbiBjaGVja092ZXJmbG93KF9wbGFjZW1lbnQpIHtcbiAgICAgIGNvbnN0IGJveCA9IG5ldyBCb3goY29udGVudEJveCk7XG4gICAgICBjb25zdCB0YXJnZXRQb2ludCA9IGFuY2hvclRvUG9pbnQoX3BsYWNlbWVudC5hbmNob3IsIHRhcmdldEJveCk7XG4gICAgICBjb25zdCBjb250ZW50UG9pbnQgPSBhbmNob3JUb1BvaW50KF9wbGFjZW1lbnQub3JpZ2luLCBib3gpO1xuICAgICAgbGV0IHtcbiAgICAgICAgeCxcbiAgICAgICAgeVxuICAgICAgfSA9IGdldE9mZnNldCh0YXJnZXRQb2ludCwgY29udGVudFBvaW50KTtcbiAgICAgIHN3aXRjaCAoX3BsYWNlbWVudC5hbmNob3Iuc2lkZSkge1xuICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgIHkgLT0gb2Zmc2V0LnZhbHVlWzBdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgIHkgKz0gb2Zmc2V0LnZhbHVlWzBdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICB4IC09IG9mZnNldC52YWx1ZVswXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgIHggKz0gb2Zmc2V0LnZhbHVlWzBdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChfcGxhY2VtZW50LmFuY2hvci5hbGlnbikge1xuICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgIHkgLT0gb2Zmc2V0LnZhbHVlWzFdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgIHkgKz0gb2Zmc2V0LnZhbHVlWzFdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICB4IC09IG9mZnNldC52YWx1ZVsxXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgIHggKz0gb2Zmc2V0LnZhbHVlWzFdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYm94LnggKz0geDtcbiAgICAgIGJveC55ICs9IHk7XG4gICAgICBib3gud2lkdGggPSBNYXRoLm1pbihib3gud2lkdGgsIG1heFdpZHRoLnZhbHVlKTtcbiAgICAgIGJveC5oZWlnaHQgPSBNYXRoLm1pbihib3guaGVpZ2h0LCBtYXhIZWlnaHQudmFsdWUpO1xuICAgICAgY29uc3Qgb3ZlcmZsb3dzID0gZ2V0T3ZlcmZsb3coYm94LCB2aWV3cG9ydCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvdmVyZmxvd3MsXG4gICAgICAgIHgsXG4gICAgICAgIHlcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCB4ID0gMDtcbiAgICBsZXQgeSA9IDA7XG4gICAgY29uc3QgYXZhaWxhYmxlID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICAgIGNvbnN0IGZsaXBwZWQgPSB7XG4gICAgICB4OiBmYWxzZSxcbiAgICAgIHk6IGZhbHNlXG4gICAgfTtcbiAgICBsZXQgcmVzZXRzID0gLTE7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChyZXNldHMrKyA+IDEwKSB7XG4gICAgICAgIGNvbnNvbGVFcnJvcignSW5maW5pdGUgbG9vcCBkZXRlY3RlZCBpbiBjb25uZWN0ZWRMb2NhdGlvblN0cmF0ZWd5Jyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY29uc3Qge1xuICAgICAgICB4OiBfeCxcbiAgICAgICAgeTogX3ksXG4gICAgICAgIG92ZXJmbG93c1xuICAgICAgfSA9IGNoZWNrT3ZlcmZsb3cocGxhY2VtZW50KTtcbiAgICAgIHggKz0gX3g7XG4gICAgICB5ICs9IF95O1xuICAgICAgY29udGVudEJveC54ICs9IF94O1xuICAgICAgY29udGVudEJveC55ICs9IF95O1xuXG4gICAgICAvLyBmbGlwXG4gICAgICB7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBnZXRBeGlzKHBsYWNlbWVudC5hbmNob3IpO1xuICAgICAgICBjb25zdCBoYXNPdmVyZmxvd1ggPSBvdmVyZmxvd3MueC5iZWZvcmUgfHwgb3ZlcmZsb3dzLnguYWZ0ZXI7XG4gICAgICAgIGNvbnN0IGhhc092ZXJmbG93WSA9IG92ZXJmbG93cy55LmJlZm9yZSB8fCBvdmVyZmxvd3MueS5hZnRlcjtcbiAgICAgICAgbGV0IHJlc2V0ID0gZmFsc2U7XG4gICAgICAgIFsneCcsICd5J10uZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIGlmIChrZXkgPT09ICd4JyAmJiBoYXNPdmVyZmxvd1ggJiYgIWZsaXBwZWQueCB8fCBrZXkgPT09ICd5JyAmJiBoYXNPdmVyZmxvd1kgJiYgIWZsaXBwZWQueSkge1xuICAgICAgICAgICAgY29uc3QgbmV3UGxhY2VtZW50ID0ge1xuICAgICAgICAgICAgICBhbmNob3I6IHtcbiAgICAgICAgICAgICAgICAuLi5wbGFjZW1lbnQuYW5jaG9yXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9yaWdpbjoge1xuICAgICAgICAgICAgICAgIC4uLnBsYWNlbWVudC5vcmlnaW5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGZsaXAgPSBrZXkgPT09ICd4JyA/IGF4aXMgPT09ICd5JyA/IGZsaXBBbGlnbiA6IGZsaXBTaWRlIDogYXhpcyA9PT0gJ3knID8gZmxpcFNpZGUgOiBmbGlwQWxpZ247XG4gICAgICAgICAgICBuZXdQbGFjZW1lbnQuYW5jaG9yID0gZmxpcChuZXdQbGFjZW1lbnQuYW5jaG9yKTtcbiAgICAgICAgICAgIG5ld1BsYWNlbWVudC5vcmlnaW4gPSBmbGlwKG5ld1BsYWNlbWVudC5vcmlnaW4pO1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICBvdmVyZmxvd3M6IG5ld092ZXJmbG93c1xuICAgICAgICAgICAgfSA9IGNoZWNrT3ZlcmZsb3cobmV3UGxhY2VtZW50KTtcbiAgICAgICAgICAgIGlmIChuZXdPdmVyZmxvd3Nba2V5XS5iZWZvcmUgPD0gb3ZlcmZsb3dzW2tleV0uYmVmb3JlICYmIG5ld092ZXJmbG93c1trZXldLmFmdGVyIDw9IG92ZXJmbG93c1trZXldLmFmdGVyIHx8IG5ld092ZXJmbG93c1trZXldLmJlZm9yZSArIG5ld092ZXJmbG93c1trZXldLmFmdGVyIDwgKG92ZXJmbG93c1trZXldLmJlZm9yZSArIG92ZXJmbG93c1trZXldLmFmdGVyKSAvIDIpIHtcbiAgICAgICAgICAgICAgcGxhY2VtZW50ID0gbmV3UGxhY2VtZW50O1xuICAgICAgICAgICAgICByZXNldCA9IGZsaXBwZWRba2V5XSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlc2V0KSBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gc2hpZnRcbiAgICAgIGlmIChvdmVyZmxvd3MueC5iZWZvcmUpIHtcbiAgICAgICAgeCArPSBvdmVyZmxvd3MueC5iZWZvcmU7XG4gICAgICAgIGNvbnRlbnRCb3gueCArPSBvdmVyZmxvd3MueC5iZWZvcmU7XG4gICAgICB9XG4gICAgICBpZiAob3ZlcmZsb3dzLnguYWZ0ZXIpIHtcbiAgICAgICAgeCAtPSBvdmVyZmxvd3MueC5hZnRlcjtcbiAgICAgICAgY29udGVudEJveC54IC09IG92ZXJmbG93cy54LmFmdGVyO1xuICAgICAgfVxuICAgICAgaWYgKG92ZXJmbG93cy55LmJlZm9yZSkge1xuICAgICAgICB5ICs9IG92ZXJmbG93cy55LmJlZm9yZTtcbiAgICAgICAgY29udGVudEJveC55ICs9IG92ZXJmbG93cy55LmJlZm9yZTtcbiAgICAgIH1cbiAgICAgIGlmIChvdmVyZmxvd3MueS5hZnRlcikge1xuICAgICAgICB5IC09IG92ZXJmbG93cy55LmFmdGVyO1xuICAgICAgICBjb250ZW50Qm94LnkgLT0gb3ZlcmZsb3dzLnkuYWZ0ZXI7XG4gICAgICB9XG5cbiAgICAgIC8vIHNpemVcbiAgICAgIHtcbiAgICAgICAgY29uc3Qgb3ZlcmZsb3dzID0gZ2V0T3ZlcmZsb3coY29udGVudEJveCwgdmlld3BvcnQpO1xuICAgICAgICBhdmFpbGFibGUueCA9IHZpZXdwb3J0LndpZHRoIC0gb3ZlcmZsb3dzLnguYmVmb3JlIC0gb3ZlcmZsb3dzLnguYWZ0ZXI7XG4gICAgICAgIGF2YWlsYWJsZS55ID0gdmlld3BvcnQuaGVpZ2h0IC0gb3ZlcmZsb3dzLnkuYmVmb3JlIC0gb3ZlcmZsb3dzLnkuYWZ0ZXI7XG4gICAgICAgIHggKz0gb3ZlcmZsb3dzLnguYmVmb3JlO1xuICAgICAgICBjb250ZW50Qm94LnggKz0gb3ZlcmZsb3dzLnguYmVmb3JlO1xuICAgICAgICB5ICs9IG92ZXJmbG93cy55LmJlZm9yZTtcbiAgICAgICAgY29udGVudEJveC55ICs9IG92ZXJmbG93cy55LmJlZm9yZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjb25zdCBheGlzID0gZ2V0QXhpcyhwbGFjZW1lbnQuYW5jaG9yKTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRTdHlsZXMudmFsdWUsIHtcbiAgICAgICctLXYtb3ZlcmxheS1hbmNob3Itb3JpZ2luJzogYCR7cGxhY2VtZW50LmFuY2hvci5zaWRlfSAke3BsYWNlbWVudC5hbmNob3IuYWxpZ259YCxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogYCR7cGxhY2VtZW50Lm9yaWdpbi5zaWRlfSAke3BsYWNlbWVudC5vcmlnaW4uYWxpZ259YCxcbiAgICAgIC8vIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke3BpeGVsUm91bmQoeCl9cHgsICR7cGl4ZWxSb3VuZCh5KX1weClgLFxuICAgICAgdG9wOiBjb252ZXJ0VG9Vbml0KHBpeGVsUm91bmQoeSkpLFxuICAgICAgbGVmdDogZGF0YS5pc1J0bC52YWx1ZSA/IHVuZGVmaW5lZCA6IGNvbnZlcnRUb1VuaXQocGl4ZWxSb3VuZCh4KSksXG4gICAgICByaWdodDogZGF0YS5pc1J0bC52YWx1ZSA/IGNvbnZlcnRUb1VuaXQocGl4ZWxSb3VuZCgteCkpIDogdW5kZWZpbmVkLFxuICAgICAgbWluV2lkdGg6IGNvbnZlcnRUb1VuaXQoYXhpcyA9PT0gJ3knID8gTWF0aC5taW4obWluV2lkdGgudmFsdWUsIHRhcmdldEJveC53aWR0aCkgOiBtaW5XaWR0aC52YWx1ZSksXG4gICAgICBtYXhXaWR0aDogY29udmVydFRvVW5pdChwaXhlbENlaWwoY2xhbXAoYXZhaWxhYmxlLngsIG1pbldpZHRoLnZhbHVlID09PSBJbmZpbml0eSA/IDAgOiBtaW5XaWR0aC52YWx1ZSwgbWF4V2lkdGgudmFsdWUpKSksXG4gICAgICBtYXhIZWlnaHQ6IGNvbnZlcnRUb1VuaXQocGl4ZWxDZWlsKGNsYW1wKGF2YWlsYWJsZS55LCBtaW5IZWlnaHQudmFsdWUgPT09IEluZmluaXR5ID8gMCA6IG1pbkhlaWdodC52YWx1ZSwgbWF4SGVpZ2h0LnZhbHVlKSkpXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF2YWlsYWJsZSxcbiAgICAgIGNvbnRlbnRCb3hcbiAgICB9O1xuICB9XG4gIHdhdGNoKCgpID0+IFtwcmVmZXJyZWRBbmNob3IudmFsdWUsIHByZWZlcnJlZE9yaWdpbi52YWx1ZSwgcHJvcHMub2Zmc2V0LCBwcm9wcy5taW5XaWR0aCwgcHJvcHMubWluSGVpZ2h0LCBwcm9wcy5tYXhXaWR0aCwgcHJvcHMubWF4SGVpZ2h0XSwgKCkgPT4gdXBkYXRlTG9jYXRpb24oKSk7XG4gIG5leHRUaWNrKCgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB1cGRhdGVMb2NhdGlvbigpO1xuXG4gICAgLy8gVE9ETzogb3ZlcmZsb3dpbmcgY29udGVudCBzaG91bGQgb25seSByZXF1aXJlIGEgc2luZ2xlIHVwZGF0ZUxvY2F0aW9uIGNhbGxcbiAgICAvLyBJY2t5IGhhY2sgdG8gbWFrZSBzdXJlIHRoZSBjb250ZW50IGlzIHBvc2l0aW9uZWQgY29uc2lzdGVudGx5XG4gICAgaWYgKCFyZXN1bHQpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBhdmFpbGFibGUsXG4gICAgICBjb250ZW50Qm94XG4gICAgfSA9IHJlc3VsdDtcbiAgICBpZiAoY29udGVudEJveC5oZWlnaHQgPiBhdmFpbGFibGUueSkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgdXBkYXRlTG9jYXRpb24oKTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICB1cGRhdGVMb2NhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlTG9jYXRpb25cbiAgfTtcbn1cbmZ1bmN0aW9uIHBpeGVsUm91bmQodmFsKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbCAqIGRldmljZVBpeGVsUmF0aW8pIC8gZGV2aWNlUGl4ZWxSYXRpbztcbn1cbmZ1bmN0aW9uIHBpeGVsQ2VpbCh2YWwpIHtcbiAgcmV0dXJuIE1hdGguY2VpbCh2YWwgKiBkZXZpY2VQaXhlbFJhdGlvKSAvIGRldmljZVBpeGVsUmF0aW87XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2NhdGlvblN0cmF0ZWdpZXMubWpzLm1hcCIsImxldCBjbGVhbiA9IHRydWU7XG5jb25zdCBmcmFtZXMgPSBbXTtcblxuLyoqXG4gKiBTY2hlZHVsZSBhIHRhc2sgdG8gcnVuIGluIGFuIGFuaW1hdGlvbiBmcmFtZSBvbiBpdHMgb3duXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgaGVhdnkgdGFza3MgdGhhdCBtYXkgY2F1c2UgamFuayBpZiBhbGwgcmFuIHRvZ2V0aGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXF1ZXN0TmV3RnJhbWUoY2IpIHtcbiAgaWYgKCFjbGVhbiB8fCBmcmFtZXMubGVuZ3RoKSB7XG4gICAgZnJhbWVzLnB1c2goY2IpO1xuICAgIHJ1bigpO1xuICB9IGVsc2Uge1xuICAgIGNsZWFuID0gZmFsc2U7XG4gICAgY2IoKTtcbiAgICBydW4oKTtcbiAgfVxufVxubGV0IHJhZiA9IC0xO1xuZnVuY3Rpb24gcnVuKCkge1xuICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuICByYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIGNvbnN0IGZyYW1lID0gZnJhbWVzLnNoaWZ0KCk7XG4gICAgaWYgKGZyYW1lKSBmcmFtZSgpO1xuICAgIGlmIChmcmFtZXMubGVuZ3RoKSBydW4oKTtlbHNlIGNsZWFuID0gdHJ1ZTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0TmV3RnJhbWUubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZWZmZWN0U2NvcGUsIG5leHRUaWNrLCBvblNjb3BlRGlzcG9zZSwgd2F0Y2hFZmZlY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgcmVxdWVzdE5ld0ZyYW1lIH0gZnJvbSBcIi4vcmVxdWVzdE5ld0ZyYW1lLm1qc1wiO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZ2V0U2Nyb2xsUGFyZW50cywgaGFzU2Nyb2xsYmFyLCBJTl9CUk9XU0VSLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IHNjcm9sbFN0cmF0ZWdpZXMgPSB7XG4gIG5vbmU6IG51bGwsXG4gIGNsb3NlOiBjbG9zZVNjcm9sbFN0cmF0ZWd5LFxuICBibG9jazogYmxvY2tTY3JvbGxTdHJhdGVneSxcbiAgcmVwb3NpdGlvbjogcmVwb3NpdGlvblNjcm9sbFN0cmF0ZWd5XG59O1xuZXhwb3J0IGNvbnN0IG1ha2VTY3JvbGxTdHJhdGVneVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgc2Nyb2xsU3RyYXRlZ3k6IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBGdW5jdGlvbl0sXG4gICAgZGVmYXVsdDogJ2Jsb2NrJyxcbiAgICB2YWxpZGF0b3I6IHZhbCA9PiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nIHx8IHZhbCBpbiBzY3JvbGxTdHJhdGVnaWVzXG4gIH1cbn0sICdWT3ZlcmxheS1zY3JvbGwtc3RyYXRlZ2llcycpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNjcm9sbFN0cmF0ZWdpZXMocHJvcHMsIGRhdGEpIHtcbiAgaWYgKCFJTl9CUk9XU0VSKSByZXR1cm47XG4gIGxldCBzY29wZTtcbiAgd2F0Y2hFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgIHNjb3BlPy5zdG9wKCk7XG4gICAgaWYgKCEoZGF0YS5pc0FjdGl2ZS52YWx1ZSAmJiBwcm9wcy5zY3JvbGxTdHJhdGVneSkpIHJldHVybjtcbiAgICBzY29wZSA9IGVmZmVjdFNjb3BlKCk7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICBzY29wZS5hY3RpdmUgJiYgc2NvcGUucnVuKCgpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHMuc2Nyb2xsU3RyYXRlZ3kgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJvcHMuc2Nyb2xsU3RyYXRlZ3koZGF0YSwgcHJvcHMsIHNjb3BlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjcm9sbFN0cmF0ZWdpZXNbcHJvcHMuc2Nyb2xsU3RyYXRlZ3ldPy4oZGF0YSwgcHJvcHMsIHNjb3BlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIG9uU2NvcGVEaXNwb3NlKCgpID0+IHtcbiAgICBzY29wZT8uc3RvcCgpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNsb3NlU2Nyb2xsU3RyYXRlZ3koZGF0YSkge1xuICBmdW5jdGlvbiBvblNjcm9sbChlKSB7XG4gICAgZGF0YS5pc0FjdGl2ZS52YWx1ZSA9IGZhbHNlO1xuICB9XG4gIGJpbmRTY3JvbGwoZGF0YS5hY3RpdmF0b3JFbC52YWx1ZSA/PyBkYXRhLmNvbnRlbnRFbC52YWx1ZSwgb25TY3JvbGwpO1xufVxuZnVuY3Rpb24gYmxvY2tTY3JvbGxTdHJhdGVneShkYXRhLCBwcm9wcykge1xuICBjb25zdCBvZmZzZXRQYXJlbnQgPSBkYXRhLnJvb3QudmFsdWU/Lm9mZnNldFBhcmVudDtcbiAgY29uc3Qgc2Nyb2xsRWxlbWVudHMgPSBbLi4ubmV3IFNldChbLi4uZ2V0U2Nyb2xsUGFyZW50cyhkYXRhLmFjdGl2YXRvckVsLnZhbHVlLCBwcm9wcy5jb250YWluZWQgPyBvZmZzZXRQYXJlbnQgOiB1bmRlZmluZWQpLCAuLi5nZXRTY3JvbGxQYXJlbnRzKGRhdGEuY29udGVudEVsLnZhbHVlLCBwcm9wcy5jb250YWluZWQgPyBvZmZzZXRQYXJlbnQgOiB1bmRlZmluZWQpXSldLmZpbHRlcihlbCA9PiAhZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCd2LW92ZXJsYXktc2Nyb2xsLWJsb2NrZWQnKSk7XG4gIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIGNvbnN0IHNjcm9sbGFibGVQYXJlbnQgPSAoZWwgPT4gaGFzU2Nyb2xsYmFyKGVsKSAmJiBlbCkob2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gIGlmIChzY3JvbGxhYmxlUGFyZW50KSB7XG4gICAgZGF0YS5yb290LnZhbHVlLmNsYXNzTGlzdC5hZGQoJ3Ytb3ZlcmxheS0tc2Nyb2xsLWJsb2NrZWQnKTtcbiAgfVxuICBzY3JvbGxFbGVtZW50cy5mb3JFYWNoKChlbCwgaSkgPT4ge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KCctLXYtYm9keS1zY3JvbGwteCcsIGNvbnZlcnRUb1VuaXQoLWVsLnNjcm9sbExlZnQpKTtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS12LWJvZHktc2Nyb2xsLXknLCBjb252ZXJ0VG9Vbml0KC1lbC5zY3JvbGxUb3ApKTtcbiAgICBpZiAoZWwgIT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tdi1zY3JvbGxiYXItb2Zmc2V0JywgY29udmVydFRvVW5pdChzY3JvbGxiYXJXaWR0aCkpO1xuICAgIH1cbiAgICBlbC5jbGFzc0xpc3QuYWRkKCd2LW92ZXJsYXktc2Nyb2xsLWJsb2NrZWQnKTtcbiAgfSk7XG4gIG9uU2NvcGVEaXNwb3NlKCgpID0+IHtcbiAgICBzY3JvbGxFbGVtZW50cy5mb3JFYWNoKChlbCwgaSkgPT4ge1xuICAgICAgY29uc3QgeCA9IHBhcnNlRmxvYXQoZWwuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS12LWJvZHktc2Nyb2xsLXgnKSk7XG4gICAgICBjb25zdCB5ID0gcGFyc2VGbG9hdChlbC5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLXYtYm9keS1zY3JvbGwteScpKTtcbiAgICAgIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCctLXYtYm9keS1zY3JvbGwteCcpO1xuICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJy0tdi1ib2R5LXNjcm9sbC15Jyk7XG4gICAgICBlbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnLS12LXNjcm9sbGJhci1vZmZzZXQnKTtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ3Ytb3ZlcmxheS1zY3JvbGwtYmxvY2tlZCcpO1xuICAgICAgZWwuc2Nyb2xsTGVmdCA9IC14O1xuICAgICAgZWwuc2Nyb2xsVG9wID0gLXk7XG4gICAgfSk7XG4gICAgaWYgKHNjcm9sbGFibGVQYXJlbnQpIHtcbiAgICAgIGRhdGEucm9vdC52YWx1ZS5jbGFzc0xpc3QucmVtb3ZlKCd2LW92ZXJsYXktLXNjcm9sbC1ibG9ja2VkJyk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIHJlcG9zaXRpb25TY3JvbGxTdHJhdGVneShkYXRhLCBwcm9wcywgc2NvcGUpIHtcbiAgbGV0IHNsb3cgPSBmYWxzZTtcbiAgbGV0IHJhZiA9IC0xO1xuICBsZXQgcmljID0gLTE7XG4gIGZ1bmN0aW9uIHVwZGF0ZShlKSB7XG4gICAgcmVxdWVzdE5ld0ZyYW1lKCgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBkYXRhLnVwZGF0ZUxvY2F0aW9uLnZhbHVlPy4oZSk7XG4gICAgICBjb25zdCB0aW1lID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydDtcbiAgICAgIHNsb3cgPSB0aW1lIC8gKDEwMDAgLyA2MCkgPiAyO1xuICAgIH0pO1xuICB9XG4gIHJpYyA9ICh0eXBlb2YgcmVxdWVzdElkbGVDYWxsYmFjayA9PT0gJ3VuZGVmaW5lZCcgPyBjYiA9PiBjYigpIDogcmVxdWVzdElkbGVDYWxsYmFjaykoKCkgPT4ge1xuICAgIHNjb3BlLnJ1bigoKSA9PiB7XG4gICAgICBiaW5kU2Nyb2xsKGRhdGEuYWN0aXZhdG9yRWwudmFsdWUgPz8gZGF0YS5jb250ZW50RWwudmFsdWUsIGUgPT4ge1xuICAgICAgICBpZiAoc2xvdykge1xuICAgICAgICAgIC8vIElmIHRoZSBwb3NpdGlvbiBjYWxjdWxhdGlvbiBpcyBzbG93LFxuICAgICAgICAgIC8vIGRlZmVyIHVwZGF0ZXMgdW50aWwgc2Nyb2xsaW5nIGlzIGZpbmlzaGVkLlxuICAgICAgICAgIC8vIEJyb3dzZXJzIHVzdWFsbHkgZmlyZSBvbmUgc2Nyb2xsIGV2ZW50IHBlciBmcmFtZSBzb1xuICAgICAgICAgIC8vIHdlIGp1c3Qgd2FpdCB1bnRpbCB3ZSd2ZSBnb3QgdHdvIGZyYW1lcyB3aXRob3V0IGFuIGV2ZW50XG4gICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmKTtcbiAgICAgICAgICByYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgcmFmID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgdXBkYXRlKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBkYXRlKGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG4gIG9uU2NvcGVEaXNwb3NlKCgpID0+IHtcbiAgICB0eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrICE9PSAndW5kZWZpbmVkJyAmJiBjYW5jZWxJZGxlQ2FsbGJhY2socmljKTtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuICB9KTtcbn1cblxuLyoqIEBwcml2YXRlICovXG5mdW5jdGlvbiBiaW5kU2Nyb2xsKGVsLCBvblNjcm9sbCkge1xuICBjb25zdCBzY3JvbGxFbGVtZW50cyA9IFtkb2N1bWVudCwgLi4uZ2V0U2Nyb2xsUGFyZW50cyhlbCldO1xuICBzY3JvbGxFbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbCwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcbiAgb25TY29wZURpc3Bvc2UoKCkgPT4ge1xuICAgIHNjcm9sbEVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwpO1xuICAgIH0pO1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjcm9sbFN0cmF0ZWdpZXMubWpzLm1hcCIsIi8vIFR5cGVzXG5cbmV4cG9ydCBjb25zdCBWTWVudVN5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6di1tZW51Jyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZWQubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgSU5fQlJPV1NFUiwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VEZWxheVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY2xvc2VEZWxheTogW051bWJlciwgU3RyaW5nXSxcbiAgb3BlbkRlbGF5OiBbTnVtYmVyLCBTdHJpbmddXG59LCAnZGVsYXknKTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VEZWxheShwcm9wcywgY2IpIHtcbiAgY29uc3QgZGVsYXlzID0ge307XG4gIGNvbnN0IHJ1bkRlbGF5RmFjdG9yeSA9IHByb3AgPT4gKCkgPT4ge1xuICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgaWYgKCFJTl9CUk9XU0VSKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICAgIGNvbnN0IGFjdGl2ZSA9IHByb3AgPT09ICdvcGVuRGVsYXknO1xuICAgIGRlbGF5cy5jbG9zZURlbGF5ICYmIHdpbmRvdy5jbGVhclRpbWVvdXQoZGVsYXlzLmNsb3NlRGVsYXkpO1xuICAgIGRlbGV0ZSBkZWxheXMuY2xvc2VEZWxheTtcbiAgICBkZWxheXMub3BlbkRlbGF5ICYmIHdpbmRvdy5jbGVhclRpbWVvdXQoZGVsYXlzLm9wZW5EZWxheSk7XG4gICAgZGVsZXRlIGRlbGF5cy5vcGVuRGVsYXk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgY29uc3QgZGVsYXkgPSBwYXJzZUludChwcm9wc1twcm9wXSA/PyAwLCAxMCk7XG4gICAgICBkZWxheXNbcHJvcF0gPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNiPy4oYWN0aXZlKTtcbiAgICAgICAgcmVzb2x2ZShhY3RpdmUpO1xuICAgICAgfSwgZGVsYXkpO1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4ge1xuICAgIHJ1bkNsb3NlRGVsYXk6IHJ1bkRlbGF5RmFjdG9yeSgnY2xvc2VEZWxheScpLFxuICAgIHJ1bk9wZW5EZWxheTogcnVuRGVsYXlGYWN0b3J5KCdvcGVuRGVsYXknKVxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsYXkubWpzLm1hcCIsIi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZNZW51U3ltYm9sIH0gZnJvbSBcIi4uL1ZNZW51L3NoYXJlZC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VEZWxheVByb3BzLCB1c2VEZWxheSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWxheS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgZWZmZWN0U2NvcGUsIGluamVjdCwgbWVyZ2VQcm9wcywgbmV4dFRpY2ssIG9uU2NvcGVEaXNwb3NlLCByZWYsIHdhdGNoLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBiaW5kUHJvcHMsIGdldEN1cnJlbnRJbnN0YW5jZSwgSU5fQlJPV1NFUiwgbWF0Y2hlc1NlbGVjdG9yLCBwcm9wc0ZhY3RvcnksIHJlZkVsZW1lbnQsIHVuYmluZFByb3BzIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZUFjdGl2YXRvclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWN0aXZhdG9yOiBbU3RyaW5nLCBPYmplY3RdLFxuICBhY3RpdmF0b3JQcm9wczoge1xuICAgIHR5cGU6IE9iamVjdCxcbiAgICBkZWZhdWx0OiAoKSA9PiAoe30pXG4gIH0sXG4gIG9wZW5PbkNsaWNrOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgfSxcbiAgb3Blbk9uSG92ZXI6IEJvb2xlYW4sXG4gIG9wZW5PbkZvY3VzOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgfSxcbiAgY2xvc2VPbkNvbnRlbnRDbGljazogQm9vbGVhbixcbiAgLi4ubWFrZURlbGF5UHJvcHMoKVxufSwgJ1ZPdmVybGF5LWFjdGl2YXRvcicpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFjdGl2YXRvcihwcm9wcywgX3JlZikge1xuICBsZXQge1xuICAgIGlzQWN0aXZlLFxuICAgIGlzVG9wXG4gIH0gPSBfcmVmO1xuICBjb25zdCBhY3RpdmF0b3JFbCA9IHJlZigpO1xuICBsZXQgaXNIb3ZlcmVkID0gZmFsc2U7XG4gIGxldCBpc0ZvY3VzZWQgPSBmYWxzZTtcbiAgbGV0IGZpcnN0RW50ZXIgPSB0cnVlO1xuICBjb25zdCBvcGVuT25Gb2N1cyA9IGNvbXB1dGVkKCgpID0+IHByb3BzLm9wZW5PbkZvY3VzIHx8IHByb3BzLm9wZW5PbkZvY3VzID09IG51bGwgJiYgcHJvcHMub3Blbk9uSG92ZXIpO1xuICBjb25zdCBvcGVuT25DbGljayA9IGNvbXB1dGVkKCgpID0+IHByb3BzLm9wZW5PbkNsaWNrIHx8IHByb3BzLm9wZW5PbkNsaWNrID09IG51bGwgJiYgIXByb3BzLm9wZW5PbkhvdmVyICYmICFvcGVuT25Gb2N1cy52YWx1ZSk7XG4gIGNvbnN0IHtcbiAgICBydW5PcGVuRGVsYXksXG4gICAgcnVuQ2xvc2VEZWxheVxuICB9ID0gdXNlRGVsYXkocHJvcHMsIHZhbHVlID0+IHtcbiAgICBpZiAodmFsdWUgPT09IChwcm9wcy5vcGVuT25Ib3ZlciAmJiBpc0hvdmVyZWQgfHwgb3Blbk9uRm9jdXMudmFsdWUgJiYgaXNGb2N1c2VkKSAmJiAhKHByb3BzLm9wZW5PbkhvdmVyICYmIGlzQWN0aXZlLnZhbHVlICYmICFpc1RvcC52YWx1ZSkpIHtcbiAgICAgIGlmIChpc0FjdGl2ZS52YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgZmlyc3RFbnRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICBpc0FjdGl2ZS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGF2YWlsYWJsZUV2ZW50cyA9IHtcbiAgICBvbkNsaWNrOiBlID0+IHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBhY3RpdmF0b3JFbC52YWx1ZSA9IGUuY3VycmVudFRhcmdldCB8fCBlLnRhcmdldDtcbiAgICAgIGlzQWN0aXZlLnZhbHVlID0gIWlzQWN0aXZlLnZhbHVlO1xuICAgIH0sXG4gICAgb25Nb3VzZWVudGVyOiBlID0+IHtcbiAgICAgIGlmIChlLnNvdXJjZUNhcGFiaWxpdGllcz8uZmlyZXNUb3VjaEV2ZW50cykgcmV0dXJuO1xuICAgICAgaXNIb3ZlcmVkID0gdHJ1ZTtcbiAgICAgIGFjdGl2YXRvckVsLnZhbHVlID0gZS5jdXJyZW50VGFyZ2V0IHx8IGUudGFyZ2V0O1xuICAgICAgcnVuT3BlbkRlbGF5KCk7XG4gICAgfSxcbiAgICBvbk1vdXNlbGVhdmU6IGUgPT4ge1xuICAgICAgaXNIb3ZlcmVkID0gZmFsc2U7XG4gICAgICBydW5DbG9zZURlbGF5KCk7XG4gICAgfSxcbiAgICBvbkZvY3VzOiBlID0+IHtcbiAgICAgIGlmIChtYXRjaGVzU2VsZWN0b3IoZS50YXJnZXQsICc6Zm9jdXMtdmlzaWJsZScpID09PSBmYWxzZSkgcmV0dXJuO1xuICAgICAgaXNGb2N1c2VkID0gdHJ1ZTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBhY3RpdmF0b3JFbC52YWx1ZSA9IGUuY3VycmVudFRhcmdldCB8fCBlLnRhcmdldDtcbiAgICAgIHJ1bk9wZW5EZWxheSgpO1xuICAgIH0sXG4gICAgb25CbHVyOiBlID0+IHtcbiAgICAgIGlzRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJ1bkNsb3NlRGVsYXkoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGFjdGl2YXRvckV2ZW50cyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBldmVudHMgPSB7fTtcbiAgICBpZiAob3Blbk9uQ2xpY2sudmFsdWUpIHtcbiAgICAgIGV2ZW50cy5vbkNsaWNrID0gYXZhaWxhYmxlRXZlbnRzLm9uQ2xpY2s7XG4gICAgfVxuICAgIGlmIChwcm9wcy5vcGVuT25Ib3Zlcikge1xuICAgICAgZXZlbnRzLm9uTW91c2VlbnRlciA9IGF2YWlsYWJsZUV2ZW50cy5vbk1vdXNlZW50ZXI7XG4gICAgICBldmVudHMub25Nb3VzZWxlYXZlID0gYXZhaWxhYmxlRXZlbnRzLm9uTW91c2VsZWF2ZTtcbiAgICB9XG4gICAgaWYgKG9wZW5PbkZvY3VzLnZhbHVlKSB7XG4gICAgICBldmVudHMub25Gb2N1cyA9IGF2YWlsYWJsZUV2ZW50cy5vbkZvY3VzO1xuICAgICAgZXZlbnRzLm9uQmx1ciA9IGF2YWlsYWJsZUV2ZW50cy5vbkJsdXI7XG4gICAgfVxuICAgIHJldHVybiBldmVudHM7XG4gIH0pO1xuICBjb25zdCBjb250ZW50RXZlbnRzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50cyA9IHt9O1xuICAgIGlmIChwcm9wcy5vcGVuT25Ib3Zlcikge1xuICAgICAgZXZlbnRzLm9uTW91c2VlbnRlciA9ICgpID0+IHtcbiAgICAgICAgaXNIb3ZlcmVkID0gdHJ1ZTtcbiAgICAgICAgcnVuT3BlbkRlbGF5KCk7XG4gICAgICB9O1xuICAgICAgZXZlbnRzLm9uTW91c2VsZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgaXNIb3ZlcmVkID0gZmFsc2U7XG4gICAgICAgIHJ1bkNsb3NlRGVsYXkoKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChvcGVuT25Gb2N1cy52YWx1ZSkge1xuICAgICAgZXZlbnRzLm9uRm9jdXNpbiA9ICgpID0+IHtcbiAgICAgICAgaXNGb2N1c2VkID0gdHJ1ZTtcbiAgICAgICAgcnVuT3BlbkRlbGF5KCk7XG4gICAgICB9O1xuICAgICAgZXZlbnRzLm9uRm9jdXNvdXQgPSAoKSA9PiB7XG4gICAgICAgIGlzRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICBydW5DbG9zZURlbGF5KCk7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAocHJvcHMuY2xvc2VPbkNvbnRlbnRDbGljaykge1xuICAgICAgY29uc3QgbWVudSA9IGluamVjdChWTWVudVN5bWJvbCwgbnVsbCk7XG4gICAgICBldmVudHMub25DbGljayA9ICgpID0+IHtcbiAgICAgICAgaXNBY3RpdmUudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgbWVudT8uY2xvc2VQYXJlbnRzKCk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZXZlbnRzO1xuICB9KTtcbiAgY29uc3Qgc2NyaW1FdmVudHMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRzID0ge307XG4gICAgaWYgKHByb3BzLm9wZW5PbkhvdmVyKSB7XG4gICAgICBldmVudHMub25Nb3VzZWVudGVyID0gKCkgPT4ge1xuICAgICAgICBpZiAoZmlyc3RFbnRlcikge1xuICAgICAgICAgIGlzSG92ZXJlZCA9IHRydWU7XG4gICAgICAgICAgZmlyc3RFbnRlciA9IGZhbHNlO1xuICAgICAgICAgIHJ1bk9wZW5EZWxheSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZXZlbnRzLm9uTW91c2VsZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgaXNIb3ZlcmVkID0gZmFsc2U7XG4gICAgICAgIHJ1bkNsb3NlRGVsYXkoKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBldmVudHM7XG4gIH0pO1xuICB3YXRjaChpc1RvcCwgdmFsID0+IHtcbiAgICBpZiAodmFsICYmIChwcm9wcy5vcGVuT25Ib3ZlciAmJiAhaXNIb3ZlcmVkICYmICghb3Blbk9uRm9jdXMudmFsdWUgfHwgIWlzRm9jdXNlZCkgfHwgb3Blbk9uRm9jdXMudmFsdWUgJiYgIWlzRm9jdXNlZCAmJiAoIXByb3BzLm9wZW5PbkhvdmVyIHx8ICFpc0hvdmVyZWQpKSkge1xuICAgICAgaXNBY3RpdmUudmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBhY3RpdmF0b3JSZWYgPSByZWYoKTtcbiAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghYWN0aXZhdG9yUmVmLnZhbHVlKSByZXR1cm47XG4gICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgYWN0aXZhdG9yRWwudmFsdWUgPSByZWZFbGVtZW50KGFjdGl2YXRvclJlZi52YWx1ZSk7XG4gICAgfSk7XG4gIH0pO1xuICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgndXNlQWN0aXZhdG9yJyk7XG4gIGxldCBzY29wZTtcbiAgd2F0Y2goKCkgPT4gISFwcm9wcy5hY3RpdmF0b3IsIHZhbCA9PiB7XG4gICAgaWYgKHZhbCAmJiBJTl9CUk9XU0VSKSB7XG4gICAgICBzY29wZSA9IGVmZmVjdFNjb3BlKCk7XG4gICAgICBzY29wZS5ydW4oKCkgPT4ge1xuICAgICAgICBfdXNlQWN0aXZhdG9yKHByb3BzLCB2bSwge1xuICAgICAgICAgIGFjdGl2YXRvckVsLFxuICAgICAgICAgIGFjdGl2YXRvckV2ZW50c1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoc2NvcGUpIHtcbiAgICAgIHNjb3BlLnN0b3AoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBmbHVzaDogJ3Bvc3QnLFxuICAgIGltbWVkaWF0ZTogdHJ1ZVxuICB9KTtcbiAgb25TY29wZURpc3Bvc2UoKCkgPT4ge1xuICAgIHNjb3BlPy5zdG9wKCk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGFjdGl2YXRvckVsLFxuICAgIGFjdGl2YXRvclJlZixcbiAgICBhY3RpdmF0b3JFdmVudHMsXG4gICAgY29udGVudEV2ZW50cyxcbiAgICBzY3JpbUV2ZW50c1xuICB9O1xufVxuZnVuY3Rpb24gX3VzZUFjdGl2YXRvcihwcm9wcywgdm0sIF9yZWYyKSB7XG4gIGxldCB7XG4gICAgYWN0aXZhdG9yRWwsXG4gICAgYWN0aXZhdG9yRXZlbnRzXG4gIH0gPSBfcmVmMjtcbiAgd2F0Y2goKCkgPT4gcHJvcHMuYWN0aXZhdG9yLCAodmFsLCBvbGRWYWwpID0+IHtcbiAgICBpZiAob2xkVmFsICYmIHZhbCAhPT0gb2xkVmFsKSB7XG4gICAgICBjb25zdCBhY3RpdmF0b3IgPSBnZXRBY3RpdmF0b3Iob2xkVmFsKTtcbiAgICAgIGFjdGl2YXRvciAmJiB1bmJpbmRBY3RpdmF0b3JQcm9wcyhhY3RpdmF0b3IpO1xuICAgIH1cbiAgICBpZiAodmFsKSB7XG4gICAgICBuZXh0VGljaygoKSA9PiBiaW5kQWN0aXZhdG9yUHJvcHMoKSk7XG4gICAgfVxuICB9LCB7XG4gICAgaW1tZWRpYXRlOiB0cnVlXG4gIH0pO1xuICB3YXRjaCgoKSA9PiBwcm9wcy5hY3RpdmF0b3JQcm9wcywgKCkgPT4ge1xuICAgIGJpbmRBY3RpdmF0b3JQcm9wcygpO1xuICB9KTtcbiAgb25TY29wZURpc3Bvc2UoKCkgPT4ge1xuICAgIHVuYmluZEFjdGl2YXRvclByb3BzKCk7XG4gIH0pO1xuICBmdW5jdGlvbiBiaW5kQWN0aXZhdG9yUHJvcHMoKSB7XG4gICAgbGV0IGVsID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBnZXRBY3RpdmF0b3IoKTtcbiAgICBsZXQgX3Byb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBwcm9wcy5hY3RpdmF0b3JQcm9wcztcbiAgICBpZiAoIWVsKSByZXR1cm47XG4gICAgYmluZFByb3BzKGVsLCBtZXJnZVByb3BzKGFjdGl2YXRvckV2ZW50cy52YWx1ZSwgX3Byb3BzKSk7XG4gIH1cbiAgZnVuY3Rpb24gdW5iaW5kQWN0aXZhdG9yUHJvcHMoKSB7XG4gICAgbGV0IGVsID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBnZXRBY3RpdmF0b3IoKTtcbiAgICBsZXQgX3Byb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBwcm9wcy5hY3RpdmF0b3JQcm9wcztcbiAgICBpZiAoIWVsKSByZXR1cm47XG4gICAgdW5iaW5kUHJvcHMoZWwsIG1lcmdlUHJvcHMoYWN0aXZhdG9yRXZlbnRzLnZhbHVlLCBfcHJvcHMpKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRBY3RpdmF0b3IoKSB7XG4gICAgbGV0IHNlbGVjdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBwcm9wcy5hY3RpdmF0b3I7XG4gICAgbGV0IGFjdGl2YXRvcjtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChzZWxlY3RvciA9PT0gJ3BhcmVudCcpIHtcbiAgICAgICAgbGV0IGVsID0gdm0/LnByb3h5Py4kZWw/LnBhcmVudE5vZGU7XG4gICAgICAgIHdoaWxlIChlbD8uaGFzQXR0cmlidXRlKCdkYXRhLW5vLWFjdGl2YXRvcicpKSB7XG4gICAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2YXRvciA9IGVsO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIFNlbGVjdG9yXG4gICAgICAgIGFjdGl2YXRvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfSBlbHNlIGlmICgnJGVsJyBpbiBzZWxlY3Rvcikge1xuICAgICAgICAvLyBDb21wb25lbnQgKHJlZilcbiAgICAgICAgYWN0aXZhdG9yID0gc2VsZWN0b3IuJGVsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSFRNTEVsZW1lbnQgfCBFbGVtZW50XG4gICAgICAgIGFjdGl2YXRvciA9IHNlbGVjdG9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoZSBhY3RpdmF0b3Igc2hvdWxkIG9ubHkgYmUgYSB2YWxpZCBlbGVtZW50IChJZ25vcmUgY29tbWVudHMgYW5kIHRleHQgbm9kZXMpXG4gICAgYWN0aXZhdG9yRWwudmFsdWUgPSBhY3RpdmF0b3I/Lm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSA/IGFjdGl2YXRvciA6IG51bGw7XG4gICAgcmV0dXJuIGFjdGl2YXRvckVsLnZhbHVlO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VBY3RpdmF0b3IubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VEaXNwbGF5IH0gZnJvbSBcIi4vZGlzcGxheS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBvbk1vdW50ZWQsIHNoYWxsb3dSZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgSU5fQlJPV1NFUiB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUh5ZHJhdGlvbigpIHtcbiAgaWYgKCFJTl9CUk9XU0VSKSByZXR1cm4gc2hhbGxvd1JlZihmYWxzZSk7XG4gIGNvbnN0IHtcbiAgICBzc3JcbiAgfSA9IHVzZURpc3BsYXkoKTtcbiAgaWYgKHNzcikge1xuICAgIGNvbnN0IGlzTW91bnRlZCA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBpc01vdW50ZWQudmFsdWUgPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiBpc01vdW50ZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNoYWxsb3dSZWYodHJ1ZSk7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh5ZHJhdGlvbi5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgc2hhbGxvd1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZUxhenlQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGVhZ2VyOiBCb29sZWFuXG59LCAnbGF6eScpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxhenkocHJvcHMsIGFjdGl2ZSkge1xuICBjb25zdCBpc0Jvb3RlZCA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICBjb25zdCBoYXNDb250ZW50ID0gY29tcHV0ZWQoKCkgPT4gaXNCb290ZWQudmFsdWUgfHwgcHJvcHMuZWFnZXIgfHwgYWN0aXZlLnZhbHVlKTtcbiAgd2F0Y2goYWN0aXZlLCAoKSA9PiBpc0Jvb3RlZC52YWx1ZSA9IHRydWUpO1xuICBmdW5jdGlvbiBvbkFmdGVyTGVhdmUoKSB7XG4gICAgaWYgKCFwcm9wcy5lYWdlcikgaXNCb290ZWQudmFsdWUgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGlzQm9vdGVkLFxuICAgIGhhc0NvbnRlbnQsXG4gICAgb25BZnRlckxlYXZlXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYXp5Lm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNjb3BlSWQoKSB7XG4gIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKCd1c2VTY29wZUlkJyk7XG4gIGNvbnN0IHNjb3BlSWQgPSB2bS52bm9kZS5zY29wZUlkO1xuICByZXR1cm4ge1xuICAgIHNjb3BlSWQ6IHNjb3BlSWQgPyB7XG4gICAgICBbc2NvcGVJZF06ICcnXG4gICAgfSA6IHVuZGVmaW5lZFxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NvcGVJZC5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVRvZ2dsZVNjb3BlIH0gZnJvbSBcIi4vdG9nZ2xlU2NvcGUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCwgb25TY29wZURpc3Bvc2UsIHByb3ZpZGUsIHJlYWN0aXZlLCByZWFkb25seSwgc2hhbGxvd1JlZiwgdG9SYXcsIHdhdGNoRWZmZWN0IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3QgU3RhY2tTeW1ib2wgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5OnN0YWNrJyk7XG5jb25zdCBnbG9iYWxTdGFjayA9IHJlYWN0aXZlKFtdKTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VTdGFjayhpc0FjdGl2ZSwgekluZGV4LCBkaXNhYmxlR2xvYmFsU3RhY2spIHtcbiAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoJ3VzZVN0YWNrJyk7XG4gIGNvbnN0IGNyZWF0ZVN0YWNrRW50cnkgPSAhZGlzYWJsZUdsb2JhbFN0YWNrO1xuICBjb25zdCBwYXJlbnQgPSBpbmplY3QoU3RhY2tTeW1ib2wsIHVuZGVmaW5lZCk7XG4gIGNvbnN0IHN0YWNrID0gcmVhY3RpdmUoe1xuICAgIGFjdGl2ZUNoaWxkcmVuOiBuZXcgU2V0KClcbiAgfSk7XG4gIHByb3ZpZGUoU3RhY2tTeW1ib2wsIHN0YWNrKTtcbiAgY29uc3QgX3pJbmRleCA9IHNoYWxsb3dSZWYoK3pJbmRleC52YWx1ZSk7XG4gIHVzZVRvZ2dsZVNjb3BlKGlzQWN0aXZlLCAoKSA9PiB7XG4gICAgY29uc3QgbGFzdFpJbmRleCA9IGdsb2JhbFN0YWNrLmF0KC0xKT8uWzFdO1xuICAgIF96SW5kZXgudmFsdWUgPSBsYXN0WkluZGV4ID8gbGFzdFpJbmRleCArIDEwIDogK3pJbmRleC52YWx1ZTtcbiAgICBpZiAoY3JlYXRlU3RhY2tFbnRyeSkge1xuICAgICAgZ2xvYmFsU3RhY2sucHVzaChbdm0udWlkLCBfekluZGV4LnZhbHVlXSk7XG4gICAgfVxuICAgIHBhcmVudD8uYWN0aXZlQ2hpbGRyZW4uYWRkKHZtLnVpZCk7XG4gICAgb25TY29wZURpc3Bvc2UoKCkgPT4ge1xuICAgICAgaWYgKGNyZWF0ZVN0YWNrRW50cnkpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gdG9SYXcoZ2xvYmFsU3RhY2spLmZpbmRJbmRleCh2ID0+IHZbMF0gPT09IHZtLnVpZCk7XG4gICAgICAgIGdsb2JhbFN0YWNrLnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgICAgcGFyZW50Py5hY3RpdmVDaGlsZHJlbi5kZWxldGUodm0udWlkKTtcbiAgICB9KTtcbiAgfSk7XG4gIGNvbnN0IGdsb2JhbFRvcCA9IHNoYWxsb3dSZWYodHJ1ZSk7XG4gIGlmIChjcmVhdGVTdGFja0VudHJ5KSB7XG4gICAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xuICAgICAgY29uc3QgX2lzVG9wID0gZ2xvYmFsU3RhY2suYXQoLTEpPy5bMF0gPT09IHZtLnVpZDtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gZ2xvYmFsVG9wLnZhbHVlID0gX2lzVG9wKTtcbiAgICB9KTtcbiAgfVxuICBjb25zdCBsb2NhbFRvcCA9IGNvbXB1dGVkKCgpID0+ICFzdGFjay5hY3RpdmVDaGlsZHJlbi5zaXplKTtcbiAgcmV0dXJuIHtcbiAgICBnbG9iYWxUb3A6IHJlYWRvbmx5KGdsb2JhbFRvcCksXG4gICAgbG9jYWxUb3AsXG4gICAgc3RhY2tTdHlsZXM6IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICB6SW5kZXg6IF96SW5kZXgudmFsdWVcbiAgICB9KSlcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YWNrLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCB3YXJuIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IElOX0JST1dTRVIgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBmdW5jdGlvbiB1c2VUZWxlcG9ydCh0YXJnZXQpIHtcbiAgY29uc3QgdGVsZXBvcnRUYXJnZXQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgX3RhcmdldCA9IHRhcmdldC52YWx1ZTtcbiAgICBpZiAoX3RhcmdldCA9PT0gdHJ1ZSB8fCAhSU5fQlJPV1NFUikgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gX3RhcmdldCA9PT0gZmFsc2UgPyBkb2N1bWVudC5ib2R5IDogdHlwZW9mIF90YXJnZXQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihfdGFyZ2V0KSA6IF90YXJnZXQ7XG4gICAgaWYgKHRhcmdldEVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgd2FybihgVW5hYmxlIHRvIGxvY2F0ZSB0YXJnZXQgJHtfdGFyZ2V0fWApO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbGV0IGNvbnRhaW5lciA9IHRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcignOnNjb3BlID4gLnYtb3ZlcmxheS1jb250YWluZXInKTtcbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250YWluZXIuY2xhc3NOYW1lID0gJ3Ytb3ZlcmxheS1jb250YWluZXInO1xuICAgICAgdGFyZ2V0RWxlbWVudC5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGFpbmVyO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0ZWxlcG9ydFRhcmdldFxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVsZXBvcnQubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgYXR0YWNoZWRSb290IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5mdW5jdGlvbiBkZWZhdWx0Q29uZGl0aW9uYWwoKSB7XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gY2hlY2tFdmVudChlLCBlbCwgYmluZGluZykge1xuICAvLyBUaGUgaW5jbHVkZSBlbGVtZW50IGNhbGxiYWNrcyBiZWxvdyBjYW4gYmUgZXhwZW5zaXZlXG4gIC8vIHNvIHdlIHNob3VsZCBhdm9pZCBjYWxsaW5nIHRoZW0gd2hlbiB3ZSdyZSBub3QgYWN0aXZlLlxuICAvLyBFeHBsaWNpdGx5IGNoZWNrIGZvciBmYWxzZSB0byBhbGxvdyBmYWxsYmFjayBjb21wYXRpYmlsaXR5XG4gIC8vIHdpdGggbm9uLXRvZ2dsZWFibGUgY29tcG9uZW50c1xuICBpZiAoIWUgfHwgY2hlY2tJc0FjdGl2ZShlLCBiaW5kaW5nKSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB3ZSdyZSBjbGlja2luZyBpbnNpZGUgdGhlIHNoYWRvd3Jvb3QsIHRoZW4gdGhlIGFwcCByb290IGRvZXNuJ3QgZ2V0IHRoZSBzYW1lXG4gIC8vIGxldmVsIG9mIGludHJvc3BlY3Rpb24gYXMgdG8gX3doYXRfIHdlJ3JlIGNsaWNraW5nLiBXZSB3YW50IHRvIGNoZWNrIHRvIHNlZSBpZlxuICAvLyBvdXIgdGFyZ2V0IGlzIHRoZSBzaGFkb3dyb290IHBhcmVudCBjb250YWluZXIsIGFuZCBpZiBpdCBpcywgaWdub3JlLlxuICBjb25zdCByb290ID0gYXR0YWNoZWRSb290KGVsKTtcbiAgaWYgKHR5cGVvZiBTaGFkb3dSb290ICE9PSAndW5kZWZpbmVkJyAmJiByb290IGluc3RhbmNlb2YgU2hhZG93Um9vdCAmJiByb290Lmhvc3QgPT09IGUudGFyZ2V0KSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gQ2hlY2sgaWYgYWRkaXRpb25hbCBlbGVtZW50cyB3ZXJlIHBhc3NlZCB0byBiZSBpbmNsdWRlZCBpbiBjaGVja1xuICAvLyAoY2xpY2sgbXVzdCBiZSBvdXRzaWRlIGFsbCBpbmNsdWRlZCBlbGVtZW50cywgaWYgYW55KVxuICBjb25zdCBlbGVtZW50cyA9ICh0eXBlb2YgYmluZGluZy52YWx1ZSA9PT0gJ29iamVjdCcgJiYgYmluZGluZy52YWx1ZS5pbmNsdWRlIHx8ICgoKSA9PiBbXSkpKCk7XG4gIC8vIEFkZCB0aGUgcm9vdCBlbGVtZW50IGZvciB0aGUgY29tcG9uZW50IHRoaXMgZGlyZWN0aXZlIHdhcyBkZWZpbmVkIG9uXG4gIGVsZW1lbnRzLnB1c2goZWwpO1xuXG4gIC8vIENoZWNrIGlmIGl0J3MgYSBjbGljayBvdXRzaWRlIG91ciBlbGVtZW50cywgYW5kIHRoZW4gaWYgb3VyIGNhbGxiYWNrIHJldHVybnMgdHJ1ZS5cbiAgLy8gTm9uLXRvZ2dsZWFibGUgY29tcG9uZW50cyBzaG91bGQgdGFrZSBhY3Rpb24gaW4gdGhlaXIgY2FsbGJhY2sgYW5kIHJldHVybiBmYWxzeS5cbiAgLy8gVG9nZ2xlYWJsZSBjYW4gcmV0dXJuIHRydWUgaWYgaXQgd2FudHMgdG8gZGVhY3RpdmF0ZS5cbiAgLy8gTm90ZSB0aGF0LCBiZWNhdXNlIHdlJ3JlIGluIHRoZSBjYXB0dXJlIHBoYXNlLCB0aGlzIGNhbGxiYWNrIHdpbGwgb2NjdXIgYmVmb3JlXG4gIC8vIHRoZSBidWJibGluZyBjbGljayBldmVudCBvbiBhbnkgb3V0c2lkZSBlbGVtZW50cy5cbiAgcmV0dXJuICFlbGVtZW50cy5zb21lKGVsID0+IGVsPy5jb250YWlucyhlLnRhcmdldCkpO1xufVxuZnVuY3Rpb24gY2hlY2tJc0FjdGl2ZShlLCBiaW5kaW5nKSB7XG4gIGNvbnN0IGlzQWN0aXZlID0gdHlwZW9mIGJpbmRpbmcudmFsdWUgPT09ICdvYmplY3QnICYmIGJpbmRpbmcudmFsdWUuY2xvc2VDb25kaXRpb25hbCB8fCBkZWZhdWx0Q29uZGl0aW9uYWw7XG4gIHJldHVybiBpc0FjdGl2ZShlKTtcbn1cbmZ1bmN0aW9uIGRpcmVjdGl2ZShlLCBlbCwgYmluZGluZykge1xuICBjb25zdCBoYW5kbGVyID0gdHlwZW9mIGJpbmRpbmcudmFsdWUgPT09ICdmdW5jdGlvbicgPyBiaW5kaW5nLnZhbHVlIDogYmluZGluZy52YWx1ZS5oYW5kbGVyO1xuICBlbC5fY2xpY2tPdXRzaWRlLmxhc3RNb3VzZWRvd25XYXNPdXRzaWRlICYmIGNoZWNrRXZlbnQoZSwgZWwsIGJpbmRpbmcpICYmIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGNoZWNrSXNBY3RpdmUoZSwgYmluZGluZykgJiYgaGFuZGxlciAmJiBoYW5kbGVyKGUpO1xuICB9LCAwKTtcbn1cbmZ1bmN0aW9uIGhhbmRsZVNoYWRvdyhlbCwgY2FsbGJhY2spIHtcbiAgY29uc3Qgcm9vdCA9IGF0dGFjaGVkUm9vdChlbCk7XG4gIGNhbGxiYWNrKGRvY3VtZW50KTtcbiAgaWYgKHR5cGVvZiBTaGFkb3dSb290ICE9PSAndW5kZWZpbmVkJyAmJiByb290IGluc3RhbmNlb2YgU2hhZG93Um9vdCkge1xuICAgIGNhbGxiYWNrKHJvb3QpO1xuICB9XG59XG5leHBvcnQgY29uc3QgQ2xpY2tPdXRzaWRlID0ge1xuICAvLyBbZGF0YS1hcHBdIG1heSBub3QgYmUgZm91bmRcbiAgLy8gaWYgdXNpbmcgYmluZCwgaW5zZXJ0ZWQgbWFrZXNcbiAgLy8gc3VyZSB0aGF0IHRoZSByb290IGVsZW1lbnQgaXNcbiAgLy8gYXZhaWxhYmxlLCBpT1MgZG9lcyBub3Qgc3VwcG9ydFxuICAvLyBjbGlja3Mgb24gYm9keVxuICBtb3VudGVkKGVsLCBiaW5kaW5nKSB7XG4gICAgY29uc3Qgb25DbGljayA9IGUgPT4gZGlyZWN0aXZlKGUsIGVsLCBiaW5kaW5nKTtcbiAgICBjb25zdCBvbk1vdXNlZG93biA9IGUgPT4ge1xuICAgICAgZWwuX2NsaWNrT3V0c2lkZS5sYXN0TW91c2Vkb3duV2FzT3V0c2lkZSA9IGNoZWNrRXZlbnQoZSwgZWwsIGJpbmRpbmcpO1xuICAgIH07XG4gICAgaGFuZGxlU2hhZG93KGVsLCBhcHAgPT4ge1xuICAgICAgYXBwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGljaywgdHJ1ZSk7XG4gICAgICBhcHAuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Nb3VzZWRvd24sIHRydWUpO1xuICAgIH0pO1xuICAgIGlmICghZWwuX2NsaWNrT3V0c2lkZSkge1xuICAgICAgZWwuX2NsaWNrT3V0c2lkZSA9IHtcbiAgICAgICAgbGFzdE1vdXNlZG93bldhc091dHNpZGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgICBlbC5fY2xpY2tPdXRzaWRlW2JpbmRpbmcuaW5zdGFuY2UuJC51aWRdID0ge1xuICAgICAgb25DbGljayxcbiAgICAgIG9uTW91c2Vkb3duXG4gICAgfTtcbiAgfSxcbiAgdW5tb3VudGVkKGVsLCBiaW5kaW5nKSB7XG4gICAgaWYgKCFlbC5fY2xpY2tPdXRzaWRlKSByZXR1cm47XG4gICAgaGFuZGxlU2hhZG93KGVsLCBhcHAgPT4ge1xuICAgICAgaWYgKCFhcHAgfHwgIWVsLl9jbGlja091dHNpZGU/LltiaW5kaW5nLmluc3RhbmNlLiQudWlkXSkgcmV0dXJuO1xuICAgICAgY29uc3Qge1xuICAgICAgICBvbkNsaWNrLFxuICAgICAgICBvbk1vdXNlZG93blxuICAgICAgfSA9IGVsLl9jbGlja091dHNpZGVbYmluZGluZy5pbnN0YW5jZS4kLnVpZF07XG4gICAgICBhcHAucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrLCB0cnVlKTtcbiAgICAgIGFwcC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbk1vdXNlZG93biwgdHJ1ZSk7XG4gICAgfSk7XG4gICAgZGVsZXRlIGVsLl9jbGlja091dHNpZGVbYmluZGluZy5pbnN0YW5jZS4kLnVpZF07XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBDbGlja091dHNpZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIiwiaW1wb3J0IHsgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCB2U2hvdyBhcyBfdlNob3csIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZPdmVybGF5LmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUxvY2F0aW9uU3RyYXRlZ3lQcm9wcywgdXNlTG9jYXRpb25TdHJhdGVnaWVzIH0gZnJvbSBcIi4vbG9jYXRpb25TdHJhdGVnaWVzLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNjcm9sbFN0cmF0ZWd5UHJvcHMsIHVzZVNjcm9sbFN0cmF0ZWdpZXMgfSBmcm9tIFwiLi9zY3JvbGxTdHJhdGVnaWVzLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUFjdGl2YXRvclByb3BzLCB1c2VBY3RpdmF0b3IgfSBmcm9tIFwiLi91c2VBY3RpdmF0b3IubWpzXCI7XG5pbXBvcnQgeyB1c2VCYWNrZ3JvdW5kQ29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURpbWVuc2lvblByb3BzLCB1c2VEaW1lbnNpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGltZW5zaW9ucy5tanNcIjtcbmltcG9ydCB7IHVzZUh5ZHJhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9oeWRyYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBtYWtlTGF6eVByb3BzLCB1c2VMYXp5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xhenkubWpzXCI7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IHVzZUJhY2tCdXR0b24sIHVzZVJvdXRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3V0ZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VTY29wZUlkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Njb3BlSWQubWpzXCI7XG5pbXBvcnQgeyB1c2VTdGFjayB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zdGFjay5tanNcIjtcbmltcG9ydCB7IHVzZVRlbGVwb3J0IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RlbGVwb3J0Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjtcbmltcG9ydCB7IHVzZVRvZ2dsZVNjb3BlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RvZ2dsZVNjb3BlLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRyYW5zaXRpb25Qcm9wcywgTWF5YmVUcmFuc2l0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RyYW5zaXRpb24ubWpzXCI7IC8vIERpcmVjdGl2ZXNcbmltcG9ydCB7IENsaWNrT3V0c2lkZSB9IGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL2NsaWNrLW91dHNpZGUvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG1lcmdlUHJvcHMsIHJlZiwgVGVsZXBvcnQsIHRvUmVmLCBUcmFuc2l0aW9uLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBhbmltYXRlLCBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBnZXRTY3JvbGxQYXJlbnQsIElOX0JST1dTRVIsIHByb3BzRmFjdG9yeSwgc3RhbmRhcmRFYXNpbmcsIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZnVuY3Rpb24gU2NyaW0ocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIG1vZGVsVmFsdWUsXG4gICAgY29sb3IsXG4gICAgLi4ucmVzdFxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBfY3JlYXRlVk5vZGUoVHJhbnNpdGlvbiwge1xuICAgIFwibmFtZVwiOiBcImZhZGUtdHJhbnNpdGlvblwiLFxuICAgIFwiYXBwZWFyXCI6IHRydWVcbiAgfSwge1xuICAgIGRlZmF1bHQ6ICgpID0+IFtwcm9wcy5tb2RlbFZhbHVlICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCBfbWVyZ2VQcm9wcyh7XG4gICAgICBcImNsYXNzXCI6IFsndi1vdmVybGF5X19zY3JpbScsIHByb3BzLmNvbG9yLmJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5jb2xvci5iYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWVcbiAgICB9LCByZXN0KSwgbnVsbCldXG4gIH0pO1xufVxuZXhwb3J0IGNvbnN0IG1ha2VWT3ZlcmxheVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWJzb2x1dGU6IEJvb2xlYW4sXG4gIGF0dGFjaDogW0Jvb2xlYW4sIFN0cmluZywgT2JqZWN0XSxcbiAgY2xvc2VPbkJhY2s6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgY29udGFpbmVkOiBCb29sZWFuLFxuICBjb250ZW50Q2xhc3M6IG51bGwsXG4gIGNvbnRlbnRQcm9wczogbnVsbCxcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIG5vQ2xpY2tBbmltYXRpb246IEJvb2xlYW4sXG4gIG1vZGVsVmFsdWU6IEJvb2xlYW4sXG4gIHBlcnNpc3RlbnQ6IEJvb2xlYW4sXG4gIHNjcmltOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ10sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICB6SW5kZXg6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDIwMDBcbiAgfSxcbiAgLi4ubWFrZUFjdGl2YXRvclByb3BzKCksXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGltZW5zaW9uUHJvcHMoKSxcbiAgLi4ubWFrZUxhenlQcm9wcygpLFxuICAuLi5tYWtlTG9jYXRpb25TdHJhdGVneVByb3BzKCksXG4gIC4uLm1ha2VTY3JvbGxTdHJhdGVneVByb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKCksXG4gIC4uLm1ha2VUcmFuc2l0aW9uUHJvcHMoKVxufSwgJ1ZPdmVybGF5Jyk7XG5leHBvcnQgY29uc3QgVk92ZXJsYXkgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVk92ZXJsYXknLFxuICBkaXJlY3RpdmVzOiB7XG4gICAgQ2xpY2tPdXRzaWRlXG4gIH0sXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiB7XG4gICAgX2Rpc2FibGVHbG9iYWxTdGFjazogQm9vbGVhbixcbiAgICAuLi5tYWtlVk92ZXJsYXlQcm9wcygpXG4gIH0sXG4gIGVtaXRzOiB7XG4gICAgJ2NsaWNrOm91dHNpZGUnOiBlID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZSxcbiAgICBhZnRlckxlYXZlOiAoKSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzLFxuICAgICAgYXR0cnMsXG4gICAgICBlbWl0XG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgbW9kZWwgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSBjb21wdXRlZCh7XG4gICAgICBnZXQ6ICgpID0+IG1vZGVsLnZhbHVlLFxuICAgICAgc2V0OiB2ID0+IHtcbiAgICAgICAgaWYgKCEodiAmJiBwcm9wcy5kaXNhYmxlZCkpIG1vZGVsLnZhbHVlID0gdjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICB0ZWxlcG9ydFRhcmdldFxuICAgIH0gPSB1c2VUZWxlcG9ydChjb21wdXRlZCgoKSA9PiBwcm9wcy5hdHRhY2ggfHwgcHJvcHMuY29udGFpbmVkKSk7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcnRsQ2xhc3NlcyxcbiAgICAgIGlzUnRsXG4gICAgfSA9IHVzZVJ0bCgpO1xuICAgIGNvbnN0IHtcbiAgICAgIGhhc0NvbnRlbnQsXG4gICAgICBvbkFmdGVyTGVhdmVcbiAgICB9ID0gdXNlTGF6eShwcm9wcywgaXNBY3RpdmUpO1xuICAgIGNvbnN0IHNjcmltQ29sb3IgPSB1c2VCYWNrZ3JvdW5kQ29sb3IoY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHR5cGVvZiBwcm9wcy5zY3JpbSA9PT0gJ3N0cmluZycgPyBwcm9wcy5zY3JpbSA6IG51bGw7XG4gICAgfSkpO1xuICAgIGNvbnN0IHtcbiAgICAgIGdsb2JhbFRvcCxcbiAgICAgIGxvY2FsVG9wLFxuICAgICAgc3RhY2tTdHlsZXNcbiAgICB9ID0gdXNlU3RhY2soaXNBY3RpdmUsIHRvUmVmKHByb3BzLCAnekluZGV4JyksIHByb3BzLl9kaXNhYmxlR2xvYmFsU3RhY2spO1xuICAgIGNvbnN0IHtcbiAgICAgIGFjdGl2YXRvckVsLFxuICAgICAgYWN0aXZhdG9yUmVmLFxuICAgICAgYWN0aXZhdG9yRXZlbnRzLFxuICAgICAgY29udGVudEV2ZW50cyxcbiAgICAgIHNjcmltRXZlbnRzXG4gICAgfSA9IHVzZUFjdGl2YXRvcihwcm9wcywge1xuICAgICAgaXNBY3RpdmUsXG4gICAgICBpc1RvcDogbG9jYWxUb3BcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBkaW1lbnNpb25TdHlsZXNcbiAgICB9ID0gdXNlRGltZW5zaW9uKHByb3BzKTtcbiAgICBjb25zdCBpc01vdW50ZWQgPSB1c2VIeWRyYXRpb24oKTtcbiAgICBjb25zdCB7XG4gICAgICBzY29wZUlkXG4gICAgfSA9IHVzZVNjb3BlSWQoKTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5kaXNhYmxlZCwgdiA9PiB7XG4gICAgICBpZiAodikgaXNBY3RpdmUudmFsdWUgPSBmYWxzZTtcbiAgICB9KTtcbiAgICBjb25zdCByb290ID0gcmVmKCk7XG4gICAgY29uc3QgY29udGVudEVsID0gcmVmKCk7XG4gICAgY29uc3Qge1xuICAgICAgY29udGVudFN0eWxlcyxcbiAgICAgIHVwZGF0ZUxvY2F0aW9uXG4gICAgfSA9IHVzZUxvY2F0aW9uU3RyYXRlZ2llcyhwcm9wcywge1xuICAgICAgaXNSdGwsXG4gICAgICBjb250ZW50RWwsXG4gICAgICBhY3RpdmF0b3JFbCxcbiAgICAgIGlzQWN0aXZlXG4gICAgfSk7XG4gICAgdXNlU2Nyb2xsU3RyYXRlZ2llcyhwcm9wcywge1xuICAgICAgcm9vdCxcbiAgICAgIGNvbnRlbnRFbCxcbiAgICAgIGFjdGl2YXRvckVsLFxuICAgICAgaXNBY3RpdmUsXG4gICAgICB1cGRhdGVMb2NhdGlvblxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIG9uQ2xpY2tPdXRzaWRlKGUpIHtcbiAgICAgIGVtaXQoJ2NsaWNrOm91dHNpZGUnLCBlKTtcbiAgICAgIGlmICghcHJvcHMucGVyc2lzdGVudCkgaXNBY3RpdmUudmFsdWUgPSBmYWxzZTtlbHNlIGFuaW1hdGVDbGljaygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbG9zZUNvbmRpdGlvbmFsKCkge1xuICAgICAgcmV0dXJuIGlzQWN0aXZlLnZhbHVlICYmIGdsb2JhbFRvcC52YWx1ZTtcbiAgICB9XG4gICAgSU5fQlJPV1NFUiAmJiB3YXRjaChpc0FjdGl2ZSwgdmFsID0+IHtcbiAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbktleWRvd24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbktleWRvd24pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIG9uS2V5ZG93bihlKSB7XG4gICAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnICYmIGdsb2JhbFRvcC52YWx1ZSkge1xuICAgICAgICBpZiAoIXByb3BzLnBlcnNpc3RlbnQpIHtcbiAgICAgICAgICBpc0FjdGl2ZS52YWx1ZSA9IGZhbHNlO1xuICAgICAgICAgIGlmIChjb250ZW50RWwudmFsdWU/LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgICBhY3RpdmF0b3JFbC52YWx1ZT8uZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBhbmltYXRlQ2xpY2soKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gICAgdXNlVG9nZ2xlU2NvcGUoKCkgPT4gcHJvcHMuY2xvc2VPbkJhY2ssICgpID0+IHtcbiAgICAgIHVzZUJhY2tCdXR0b24ocm91dGVyLCBuZXh0ID0+IHtcbiAgICAgICAgaWYgKGdsb2JhbFRvcC52YWx1ZSAmJiBpc0FjdGl2ZS52YWx1ZSkge1xuICAgICAgICAgIG5leHQoZmFsc2UpO1xuICAgICAgICAgIGlmICghcHJvcHMucGVyc2lzdGVudCkgaXNBY3RpdmUudmFsdWUgPSBmYWxzZTtlbHNlIGFuaW1hdGVDbGljaygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY29uc3QgdG9wID0gcmVmKCk7XG4gICAgd2F0Y2goKCkgPT4gaXNBY3RpdmUudmFsdWUgJiYgKHByb3BzLmFic29sdXRlIHx8IHByb3BzLmNvbnRhaW5lZCkgJiYgdGVsZXBvcnRUYXJnZXQudmFsdWUgPT0gbnVsbCwgdmFsID0+IHtcbiAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgY29uc3Qgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJvb3QudmFsdWUpO1xuICAgICAgICBpZiAoc2Nyb2xsUGFyZW50ICYmIHNjcm9sbFBhcmVudCAhPT0gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCkge1xuICAgICAgICAgIHRvcC52YWx1ZSA9IHNjcm9sbFBhcmVudC5zY3JvbGxUb3A7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFkZCBhIHF1aWNrIFwiYm91bmNlXCIgYW5pbWF0aW9uIHRvIHRoZSBjb250ZW50XG4gICAgZnVuY3Rpb24gYW5pbWF0ZUNsaWNrKCkge1xuICAgICAgaWYgKHByb3BzLm5vQ2xpY2tBbmltYXRpb24pIHJldHVybjtcbiAgICAgIGNvbnRlbnRFbC52YWx1ZSAmJiBhbmltYXRlKGNvbnRlbnRFbC52YWx1ZSwgW3tcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnY2VudGVyJ1xuICAgICAgfSwge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxLjAzKSdcbiAgICAgIH0sIHtcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnY2VudGVyJ1xuICAgICAgfV0sIHtcbiAgICAgICAgZHVyYXRpb246IDE1MCxcbiAgICAgICAgZWFzaW5nOiBzdGFuZGFyZEVhc2luZ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbc2xvdHMuYWN0aXZhdG9yPy4oe1xuICAgICAgaXNBY3RpdmU6IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgcHJvcHM6IG1lcmdlUHJvcHMoe1xuICAgICAgICByZWY6IGFjdGl2YXRvclJlZlxuICAgICAgfSwgYWN0aXZhdG9yRXZlbnRzLnZhbHVlLCBwcm9wcy5hY3RpdmF0b3JQcm9wcylcbiAgICB9KSwgaXNNb3VudGVkLnZhbHVlICYmIGhhc0NvbnRlbnQudmFsdWUgJiYgX2NyZWF0ZVZOb2RlKFRlbGVwb3J0LCB7XG4gICAgICBcImRpc2FibGVkXCI6ICF0ZWxlcG9ydFRhcmdldC52YWx1ZSxcbiAgICAgIFwidG9cIjogdGVsZXBvcnRUYXJnZXQudmFsdWVcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytb3ZlcmxheScsIHtcbiAgICAgICAgICAndi1vdmVybGF5LS1hYnNvbHV0ZSc6IHByb3BzLmFic29sdXRlIHx8IHByb3BzLmNvbnRhaW5lZCxcbiAgICAgICAgICAndi1vdmVybGF5LS1hY3RpdmUnOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgICAndi1vdmVybGF5LS1jb250YWluZWQnOiBwcm9wcy5jb250YWluZWRcbiAgICAgICAgfSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBydGxDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW3N0YWNrU3R5bGVzLnZhbHVlLCB7XG4gICAgICAgICAgdG9wOiBjb252ZXJ0VG9Vbml0KHRvcC52YWx1ZSlcbiAgICAgICAgfSwgcHJvcHMuc3R5bGVdLFxuICAgICAgICBcInJlZlwiOiByb290XG4gICAgICB9LCBzY29wZUlkLCBhdHRycyksIFtfY3JlYXRlVk5vZGUoU2NyaW0sIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJjb2xvclwiOiBzY3JpbUNvbG9yLFxuICAgICAgICBcIm1vZGVsVmFsdWVcIjogaXNBY3RpdmUudmFsdWUgJiYgISFwcm9wcy5zY3JpbVxuICAgICAgfSwgc2NyaW1FdmVudHMudmFsdWUpLCBudWxsKSwgX2NyZWF0ZVZOb2RlKE1heWJlVHJhbnNpdGlvbiwge1xuICAgICAgICBcImFwcGVhclwiOiB0cnVlLFxuICAgICAgICBcInBlcnNpc3RlZFwiOiB0cnVlLFxuICAgICAgICBcInRyYW5zaXRpb25cIjogcHJvcHMudHJhbnNpdGlvbixcbiAgICAgICAgXCJ0YXJnZXRcIjogYWN0aXZhdG9yRWwudmFsdWUsXG4gICAgICAgIFwib25BZnRlckxlYXZlXCI6ICgpID0+IHtcbiAgICAgICAgICBvbkFmdGVyTGVhdmUoKTtcbiAgICAgICAgICBlbWl0KCdhZnRlckxlYXZlJyk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW193aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoXCJkaXZcIiwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgIFwicmVmXCI6IGNvbnRlbnRFbCxcbiAgICAgICAgICBcImNsYXNzXCI6IFsndi1vdmVybGF5X19jb250ZW50JywgcHJvcHMuY29udGVudENsYXNzXSxcbiAgICAgICAgICBcInN0eWxlXCI6IFtkaW1lbnNpb25TdHlsZXMudmFsdWUsIGNvbnRlbnRTdHlsZXMudmFsdWVdXG4gICAgICAgIH0sIGNvbnRlbnRFdmVudHMudmFsdWUsIHByb3BzLmNvbnRlbnRQcm9wcyksIFtzbG90cy5kZWZhdWx0Py4oe1xuICAgICAgICAgIGlzQWN0aXZlXG4gICAgICAgIH0pXSksIFtbX3ZTaG93LCBpc0FjdGl2ZS52YWx1ZV0sIFtfcmVzb2x2ZURpcmVjdGl2ZShcImNsaWNrLW91dHNpZGVcIiksIHtcbiAgICAgICAgICBoYW5kbGVyOiBvbkNsaWNrT3V0c2lkZSxcbiAgICAgICAgICBjbG9zZUNvbmRpdGlvbmFsLFxuICAgICAgICAgIGluY2x1ZGU6ICgpID0+IFthY3RpdmF0b3JFbC52YWx1ZV1cbiAgICAgICAgfV1dKV1cbiAgICAgIH0pXSldXG4gICAgfSldKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGl2YXRvckVsLFxuICAgICAgYW5pbWF0ZUNsaWNrLFxuICAgICAgY29udGVudEVsLFxuICAgICAgZ2xvYmFsVG9wLFxuICAgICAgbG9jYWxUb3AsXG4gICAgICB1cGRhdGVMb2NhdGlvblxuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vk92ZXJsYXkubWpzLm1hcCIsIi8vIFR5cGVzXG5cbmNvbnN0IFJlZnMgPSBTeW1ib2woJ0ZvcndhcmRlZCByZWZzJyk7XG5cbi8qKiBPbWl0IHByb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBQICovXG5cbmZ1bmN0aW9uIGdldERlc2NyaXB0b3Iob2JqLCBrZXkpIHtcbiAgbGV0IGN1cnJlbnRPYmogPSBvYmo7XG4gIHdoaWxlIChjdXJyZW50T2JqKSB7XG4gICAgY29uc3QgZGVzY3JpcHRvciA9IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGN1cnJlbnRPYmosIGtleSk7XG4gICAgaWYgKGRlc2NyaXB0b3IpIHJldHVybiBkZXNjcmlwdG9yO1xuICAgIGN1cnJlbnRPYmogPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY3VycmVudE9iaik7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkUmVmcyh0YXJnZXQpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlZnMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHJlZnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIHRhcmdldFtSZWZzXSA9IHJlZnM7XG4gIHJldHVybiBuZXcgUHJveHkodGFyZ2V0LCB7XG4gICAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAoUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNraXAgaW50ZXJuYWwgcHJvcGVydGllc1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzeW1ib2wnIHx8IGtleS5zdGFydHNXaXRoKCdfXycpKSByZXR1cm47XG4gICAgICBmb3IgKGNvbnN0IHJlZiBvZiByZWZzKSB7XG4gICAgICAgIGlmIChyZWYudmFsdWUgJiYgUmVmbGVjdC5oYXMocmVmLnZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgY29uc3QgdmFsID0gUmVmbGVjdC5nZXQocmVmLnZhbHVlLCBrZXkpO1xuICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nID8gdmFsLmJpbmQocmVmLnZhbHVlKSA6IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgaGFzKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAoUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBTa2lwIGludGVybmFsIHByb3BlcnRpZXNcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3ltYm9sJyB8fCBrZXkuc3RhcnRzV2l0aCgnX18nKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChjb25zdCByZWYgb2YgcmVmcykge1xuICAgICAgICBpZiAocmVmLnZhbHVlICYmIFJlZmxlY3QuaGFzKHJlZi52YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBTa2lwIGludGVybmFsIHByb3BlcnRpZXNcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3ltYm9sJyB8fCBrZXkuc3RhcnRzV2l0aCgnX18nKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChjb25zdCByZWYgb2YgcmVmcykge1xuICAgICAgICBpZiAocmVmLnZhbHVlICYmIFJlZmxlY3QuaGFzKHJlZi52YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldChyZWYudmFsdWUsIGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICBpZiAoZGVzY3JpcHRvcikgcmV0dXJuIGRlc2NyaXB0b3I7XG5cbiAgICAgIC8vIFNraXAgaW50ZXJuYWwgcHJvcGVydGllc1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzeW1ib2wnIHx8IGtleS5zdGFydHNXaXRoKCdfXycpKSByZXR1cm47XG5cbiAgICAgIC8vIENoZWNrIGVhY2ggcmVmJ3Mgb3duIHByb3BlcnRpZXNcbiAgICAgIGZvciAoY29uc3QgcmVmIG9mIHJlZnMpIHtcbiAgICAgICAgaWYgKCFyZWYudmFsdWUpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gZ2V0RGVzY3JpcHRvcihyZWYudmFsdWUsIGtleSkgPz8gKCdfJyBpbiByZWYudmFsdWUgPyBnZXREZXNjcmlwdG9yKHJlZi52YWx1ZS5fPy5zZXR1cFN0YXRlLCBrZXkpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgfVxuXG4gICAgICAvLyBSZWN1cnNpdmUgc2VhcmNoIHVwIGVhY2ggcmVmJ3MgcHJvdG90eXBlXG4gICAgICBmb3IgKGNvbnN0IHJlZiBvZiByZWZzKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkUmVmcyA9IHJlZi52YWx1ZSAmJiByZWYudmFsdWVbUmVmc107XG4gICAgICAgIGlmICghY2hpbGRSZWZzKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgcXVldWUgPSBjaGlsZFJlZnMuc2xpY2UoKTtcbiAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IHJlZiA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IGdldERlc2NyaXB0b3IocmVmLnZhbHVlLCBrZXkpO1xuICAgICAgICAgIGlmIChkZXNjcmlwdG9yKSByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICAgICAgICBjb25zdCBjaGlsZFJlZnMgPSByZWYudmFsdWUgJiYgcmVmLnZhbHVlW1JlZnNdO1xuICAgICAgICAgIGlmIChjaGlsZFJlZnMpIHF1ZXVlLnB1c2goLi4uY2hpbGRSZWZzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9yd2FyZFJlZnMubWpzLm1hcCIsImltcG9ydCB7IG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WTWVudS5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkRpYWxvZ1RyYW5zaXRpb24gfSBmcm9tIFwiLi4vdHJhbnNpdGlvbnMvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZPdmVybGF5IH0gZnJvbSBcIi4uL1ZPdmVybGF5L2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZPdmVybGF5UHJvcHMgfSBmcm9tIFwiLi4vVk92ZXJsYXkvVk92ZXJsYXkubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBmb3J3YXJkUmVmcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb3J3YXJkUmVmcy5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7XG5pbXBvcnQgeyB1c2VTY29wZUlkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Njb3BlSWQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCwgbWVyZ2VQcm9wcywgbmV4dFRpY2ssIHByb3ZpZGUsIHJlZiwgc2hhbGxvd1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgVk1lbnVTeW1ib2wgfSBmcm9tIFwiLi9zaGFyZWQubWpzXCI7XG5pbXBvcnQgeyBmb2N1c2FibGVDaGlsZHJlbiwgZm9jdXNDaGlsZCwgZ2VuZXJpY0NvbXBvbmVudCwgZ2V0TmV4dEVsZW1lbnQsIGdldFVpZCwgb21pdCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVk1lbnVQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC8vIFRPRE9cbiAgLy8gZGlzYWJsZUtleXM6IEJvb2xlYW4sXG4gIGlkOiBTdHJpbmcsXG4gIC4uLm9taXQobWFrZVZPdmVybGF5UHJvcHMoe1xuICAgIGNsb3NlRGVsYXk6IDI1MCxcbiAgICBjbG9zZU9uQ29udGVudENsaWNrOiB0cnVlLFxuICAgIGxvY2F0aW9uU3RyYXRlZ3k6ICdjb25uZWN0ZWQnLFxuICAgIG9wZW5EZWxheTogMzAwLFxuICAgIHNjcmltOiBmYWxzZSxcbiAgICBzY3JvbGxTdHJhdGVneTogJ3JlcG9zaXRpb24nLFxuICAgIHRyYW5zaXRpb246IHtcbiAgICAgIGNvbXBvbmVudDogVkRpYWxvZ1RyYW5zaXRpb25cbiAgICB9XG4gIH0pLCBbJ2Fic29sdXRlJ10pXG59LCAnVk1lbnUnKTtcbmV4cG9ydCBjb25zdCBWTWVudSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTWVudScsXG4gIHByb3BzOiBtYWtlVk1lbnVQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCB7XG4gICAgICBzY29wZUlkXG4gICAgfSA9IHVzZVNjb3BlSWQoKTtcbiAgICBjb25zdCB1aWQgPSBnZXRVaWQoKTtcbiAgICBjb25zdCBpZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmlkIHx8IGB2LW1lbnUtJHt1aWR9YCk7XG4gICAgY29uc3Qgb3ZlcmxheSA9IHJlZigpO1xuICAgIGNvbnN0IHBhcmVudCA9IGluamVjdChWTWVudVN5bWJvbCwgbnVsbCk7XG4gICAgY29uc3Qgb3BlbkNoaWxkcmVuID0gc2hhbGxvd1JlZigwKTtcbiAgICBwcm92aWRlKFZNZW51U3ltYm9sLCB7XG4gICAgICByZWdpc3RlcigpIHtcbiAgICAgICAgKytvcGVuQ2hpbGRyZW4udmFsdWU7XG4gICAgICB9LFxuICAgICAgdW5yZWdpc3RlcigpIHtcbiAgICAgICAgLS1vcGVuQ2hpbGRyZW4udmFsdWU7XG4gICAgICB9LFxuICAgICAgY2xvc2VQYXJlbnRzKCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpZiAoIW9wZW5DaGlsZHJlbi52YWx1ZSkge1xuICAgICAgICAgICAgaXNBY3RpdmUudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcmVudD8uY2xvc2VQYXJlbnRzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCA0MCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXN5bmMgZnVuY3Rpb24gb25Gb2N1c0luKGUpIHtcbiAgICAgIGNvbnN0IGJlZm9yZSA9IGUucmVsYXRlZFRhcmdldDtcbiAgICAgIGNvbnN0IGFmdGVyID0gZS50YXJnZXQ7XG4gICAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgaWYgKGlzQWN0aXZlLnZhbHVlICYmIGJlZm9yZSAhPT0gYWZ0ZXIgJiYgb3ZlcmxheS52YWx1ZT8uY29udGVudEVsICYmXG4gICAgICAvLyBXZSdyZSB0aGUgdG9wbW9zdCBtZW51XG4gICAgICBvdmVybGF5LnZhbHVlPy5nbG9iYWxUb3AgJiZcbiAgICAgIC8vIEl0IGlzbid0IHRoZSBkb2N1bWVudCBvciB0aGUgbWVudSBib2R5XG4gICAgICAhW2RvY3VtZW50LCBvdmVybGF5LnZhbHVlLmNvbnRlbnRFbF0uaW5jbHVkZXMoYWZ0ZXIpICYmXG4gICAgICAvLyBJdCBpc24ndCBpbnNpZGUgdGhlIG1lbnUgYm9keVxuICAgICAgIW92ZXJsYXkudmFsdWUuY29udGVudEVsLmNvbnRhaW5zKGFmdGVyKSkge1xuICAgICAgICBjb25zdCBmb2N1c2FibGUgPSBmb2N1c2FibGVDaGlsZHJlbihvdmVybGF5LnZhbHVlLmNvbnRlbnRFbCk7XG4gICAgICAgIGZvY3VzYWJsZVswXT8uZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2F0Y2goaXNBY3RpdmUsIHZhbCA9PiB7XG4gICAgICBpZiAodmFsKSB7XG4gICAgICAgIHBhcmVudD8ucmVnaXN0ZXIoKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIG9uRm9jdXNJbiwge1xuICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQ/LnVucmVnaXN0ZXIoKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIG9uRm9jdXNJbik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gb25DbGlja091dHNpZGUoKSB7XG4gICAgICBwYXJlbnQ/LmNsb3NlUGFyZW50cygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbktleWRvd24oZSkge1xuICAgICAgaWYgKHByb3BzLmRpc2FibGVkKSByZXR1cm47XG4gICAgICBpZiAoZS5rZXkgPT09ICdUYWInKSB7XG4gICAgICAgIGNvbnN0IG5leHRFbGVtZW50ID0gZ2V0TmV4dEVsZW1lbnQoZm9jdXNhYmxlQ2hpbGRyZW4ob3ZlcmxheS52YWx1ZT8uY29udGVudEVsLCBmYWxzZSksIGUuc2hpZnRLZXkgPyAncHJldicgOiAnbmV4dCcsIGVsID0+IGVsLnRhYkluZGV4ID49IDApO1xuICAgICAgICBpZiAoIW5leHRFbGVtZW50KSB7XG4gICAgICAgICAgaXNBY3RpdmUudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICBvdmVybGF5LnZhbHVlPy5hY3RpdmF0b3JFbD8uZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkFjdGl2YXRvcktleWRvd24oZSkge1xuICAgICAgaWYgKHByb3BzLmRpc2FibGVkKSByZXR1cm47XG4gICAgICBjb25zdCBlbCA9IG92ZXJsYXkudmFsdWU/LmNvbnRlbnRFbDtcbiAgICAgIGlmIChlbCAmJiBpc0FjdGl2ZS52YWx1ZSkge1xuICAgICAgICBpZiAoZS5rZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGZvY3VzQ2hpbGQoZWwsICduZXh0Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdBcnJvd1VwJykge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBmb2N1c0NoaWxkKGVsLCAncHJldicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFsnQXJyb3dEb3duJywgJ0Fycm93VXAnXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgaXNBY3RpdmUudmFsdWUgPSB0cnVlO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gc2V0VGltZW91dCgoKSA9PiBvbkFjdGl2YXRvcktleWRvd24oZSkpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYWN0aXZhdG9yUHJvcHMgPSBjb21wdXRlZCgoKSA9PiBtZXJnZVByb3BzKHtcbiAgICAgICdhcmlhLWhhc3BvcHVwJzogJ21lbnUnLFxuICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBTdHJpbmcoaXNBY3RpdmUudmFsdWUpLFxuICAgICAgJ2FyaWEtb3ducyc6IGlkLnZhbHVlLFxuICAgICAgb25LZXlkb3duOiBvbkFjdGl2YXRvcktleWRvd25cbiAgICB9LCBwcm9wcy5hY3RpdmF0b3JQcm9wcykpO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBbb3ZlcmxheVByb3BzXSA9IFZPdmVybGF5LmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVk92ZXJsYXksIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJyZWZcIjogb3ZlcmxheSxcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtbWVudScsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSwgb3ZlcmxheVByb3BzLCB7XG4gICAgICAgIFwibW9kZWxWYWx1ZVwiOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBpc0FjdGl2ZS52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgXCJhYnNvbHV0ZVwiOiB0cnVlLFxuICAgICAgICBcImFjdGl2YXRvclByb3BzXCI6IGFjdGl2YXRvclByb3BzLnZhbHVlLFxuICAgICAgICBcIm9uQ2xpY2s6b3V0c2lkZVwiOiBvbkNsaWNrT3V0c2lkZSxcbiAgICAgICAgXCJvbktleWRvd25cIjogb25LZXlkb3duXG4gICAgICB9LCBzY29wZUlkKSwge1xuICAgICAgICBhY3RpdmF0b3I6IHNsb3RzLmFjdGl2YXRvcixcbiAgICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgICAgXCJyb290XCI6IFwiVk1lbnVcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy5kZWZhdWx0Py4oLi4uYXJncyldXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3J3YXJkUmVmcyh7XG4gICAgICBpZCxcbiAgICAgIM6ob3BlbkNoaWxkcmVuOiBvcGVuQ2hpbGRyZW5cbiAgICB9LCBvdmVybGF5KTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTWVudS5tanMubWFwIiwiaW1wb3J0IHsgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIHZTaG93IGFzIF92U2hvdyB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQ291bnRlci5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlNsaWRlWVRyYW5zaXRpb24gfSBmcm9tIFwiLi4vdHJhbnNpdGlvbnMvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRyYW5zaXRpb25Qcm9wcywgTWF5YmVUcmFuc2l0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RyYW5zaXRpb24ubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkNvdW50ZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGFjdGl2ZTogQm9vbGVhbixcbiAgbWF4OiBbTnVtYmVyLCBTdHJpbmddLFxuICB2YWx1ZToge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRyYW5zaXRpb25Qcm9wcyh7XG4gICAgdHJhbnNpdGlvbjoge1xuICAgICAgY29tcG9uZW50OiBWU2xpZGVZVHJhbnNpdGlvblxuICAgIH1cbiAgfSlcbn0sICdWQ291bnRlcicpO1xuZXhwb3J0IGNvbnN0IFZDb3VudGVyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZDb3VudGVyJyxcbiAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgcHJvcHM6IG1ha2VWQ291bnRlclByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgY291bnRlciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5tYXggPyBgJHtwcm9wcy52YWx1ZX0gLyAke3Byb3BzLm1heH1gIDogU3RyaW5nKHByb3BzLnZhbHVlKTtcbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKE1heWJlVHJhbnNpdGlvbiwge1xuICAgICAgXCJ0cmFuc2l0aW9uXCI6IHByb3BzLnRyYW5zaXRpb25cbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWNvdW50ZXInLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIFtzbG90cy5kZWZhdWx0ID8gc2xvdHMuZGVmYXVsdCh7XG4gICAgICAgIGNvdW50ZXI6IGNvdW50ZXIudmFsdWUsXG4gICAgICAgIG1heDogcHJvcHMubWF4LFxuICAgICAgICB2YWx1ZTogcHJvcHMudmFsdWVcbiAgICAgIH0pIDogY291bnRlci52YWx1ZV0pLCBbW192U2hvdywgcHJvcHMuYWN0aXZlXV0pXVxuICAgIH0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNvdW50ZXIubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZMYWJlbCB9IGZyb20gXCIuLi9WTGFiZWwvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZGaWVsZExhYmVsUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBmbG9hdGluZzogQm9vbGVhbixcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKClcbn0sICdWRmllbGRMYWJlbCcpO1xuZXhwb3J0IGNvbnN0IFZGaWVsZExhYmVsID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZGaWVsZExhYmVsJyxcbiAgcHJvcHM6IG1ha2VWRmllbGRMYWJlbFByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShWTGFiZWwsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWZpZWxkLWxhYmVsJywge1xuICAgICAgICAndi1maWVsZC1sYWJlbC0tZmxvYXRpbmcnOiBwcm9wcy5mbG9hdGluZ1xuICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZSxcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogcHJvcHMuZmxvYXRpbmcgfHwgdW5kZWZpbmVkXG4gICAgfSwgc2xvdHMpKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkZpZWxkTGFiZWwubWpzLm1hcCIsImltcG9ydCB7IG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCB2U2hvdyBhcyBfdlNob3csIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WRmllbGQuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZGaWVsZExhYmVsIH0gZnJvbSBcIi4vVkZpZWxkTGFiZWwubWpzXCI7XG5pbXBvcnQgeyBWRXhwYW5kWFRyYW5zaXRpb24gfSBmcm9tIFwiLi4vdHJhbnNpdGlvbnMvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyB1c2VJbnB1dEljb24gfSBmcm9tIFwiLi4vVklucHV0L0lucHV0SWNvbi5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciwgdXNlVGV4dENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VGb2N1c1Byb3BzLCB1c2VGb2N1cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb2N1cy5tanNcIjtcbmltcG9ydCB7IEljb25WYWx1ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IExvYWRlclNsb3QsIG1ha2VMb2FkZXJQcm9wcywgdXNlTG9hZGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvYWRlci5tanNcIjtcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhbGUubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCByZWYsIHRvUmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBhbmltYXRlLCBjb252ZXJ0VG9Vbml0LCBFdmVudFByb3AsIGdlbmVyaWNDb21wb25lbnQsIGdldFVpZCwgaXNPbiwgbnVsbGlmeVRyYW5zZm9ybXMsIHBpY2ssIHByb3BzRmFjdG9yeSwgc3RhbmRhcmRFYXNpbmcsIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3QgYWxsb3dlZFZhcmlhbnRzID0gWyd1bmRlcmxpbmVkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCcsICdzb2xvJywgJ3NvbG8taW52ZXJ0ZWQnLCAnc29sby1maWxsZWQnLCAncGxhaW4nXTtcbmV4cG9ydCBjb25zdCBtYWtlVkZpZWxkUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhcHBlbmRJbm5lckljb246IEljb25WYWx1ZSxcbiAgYmdDb2xvcjogU3RyaW5nLFxuICBjbGVhcmFibGU6IEJvb2xlYW4sXG4gIGNsZWFySWNvbjoge1xuICAgIHR5cGU6IEljb25WYWx1ZSxcbiAgICBkZWZhdWx0OiAnJGNsZWFyJ1xuICB9LFxuICBhY3RpdmU6IEJvb2xlYW4sXG4gIGNlbnRlckFmZml4OiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgfSxcbiAgY29sb3I6IFN0cmluZyxcbiAgYmFzZUNvbG9yOiBTdHJpbmcsXG4gIGRpcnR5OiBCb29sZWFuLFxuICBkaXNhYmxlZDoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICBlcnJvcjogQm9vbGVhbixcbiAgZmxhdDogQm9vbGVhbixcbiAgbGFiZWw6IFN0cmluZyxcbiAgcGVyc2lzdGVudENsZWFyOiBCb29sZWFuLFxuICBwcmVwZW5kSW5uZXJJY29uOiBJY29uVmFsdWUsXG4gIHJldmVyc2U6IEJvb2xlYW4sXG4gIHNpbmdsZUxpbmU6IEJvb2xlYW4sXG4gIHZhcmlhbnQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2ZpbGxlZCcsXG4gICAgdmFsaWRhdG9yOiB2ID0+IGFsbG93ZWRWYXJpYW50cy5pbmNsdWRlcyh2KVxuICB9LFxuICAnb25DbGljazpjbGVhcic6IEV2ZW50UHJvcCgpLFxuICAnb25DbGljazphcHBlbmRJbm5lcic6IEV2ZW50UHJvcCgpLFxuICAnb25DbGljazpwcmVwZW5kSW5uZXInOiBFdmVudFByb3AoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VMb2FkZXJQcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWRmllbGQnKTtcbmV4cG9ydCBjb25zdCBWRmllbGQgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkZpZWxkJyxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IHtcbiAgICBpZDogU3RyaW5nLFxuICAgIC4uLm1ha2VGb2N1c1Byb3BzKCksXG4gICAgLi4ubWFrZVZGaWVsZFByb3BzKClcbiAgfSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOmZvY3VzZWQnOiBmb2N1c2VkID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnMsXG4gICAgICBlbWl0LFxuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBsb2FkZXJDbGFzc2VzXG4gICAgfSA9IHVzZUxvYWRlcihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZm9jdXNDbGFzc2VzLFxuICAgICAgaXNGb2N1c2VkLFxuICAgICAgZm9jdXMsXG4gICAgICBibHVyXG4gICAgfSA9IHVzZUZvY3VzKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBJbnB1dEljb25cbiAgICB9ID0gdXNlSW5wdXRJY29uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBydGxDbGFzc2VzXG4gICAgfSA9IHVzZVJ0bCgpO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuZGlydHkgfHwgcHJvcHMuYWN0aXZlKTtcbiAgICBjb25zdCBoYXNMYWJlbCA9IGNvbXB1dGVkKCgpID0+ICFwcm9wcy5zaW5nbGVMaW5lICYmICEhKHByb3BzLmxhYmVsIHx8IHNsb3RzLmxhYmVsKSk7XG4gICAgY29uc3QgdWlkID0gZ2V0VWlkKCk7XG4gICAgY29uc3QgaWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5pZCB8fCBgaW5wdXQtJHt1aWR9YCk7XG4gICAgY29uc3QgbWVzc2FnZXNJZCA9IGNvbXB1dGVkKCgpID0+IGAke2lkLnZhbHVlfS1tZXNzYWdlc2ApO1xuICAgIGNvbnN0IGxhYmVsUmVmID0gcmVmKCk7XG4gICAgY29uc3QgZmxvYXRpbmdMYWJlbFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGNvbnRyb2xSZWYgPSByZWYoKTtcbiAgICBjb25zdCBpc1BsYWluT3JVbmRlcmxpbmVkID0gY29tcHV0ZWQoKCkgPT4gWydwbGFpbicsICd1bmRlcmxpbmVkJ10uaW5jbHVkZXMocHJvcHMudmFyaWFudCkpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHRvUmVmKHByb3BzLCAnYmdDb2xvcicpKTtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcihjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMuZXJyb3IgfHwgcHJvcHMuZGlzYWJsZWQgPyB1bmRlZmluZWQgOiBpc0FjdGl2ZS52YWx1ZSAmJiBpc0ZvY3VzZWQudmFsdWUgPyBwcm9wcy5jb2xvciA6IHByb3BzLmJhc2VDb2xvcjtcbiAgICB9KSk7XG4gICAgd2F0Y2goaXNBY3RpdmUsIHZhbCA9PiB7XG4gICAgICBpZiAoaGFzTGFiZWwudmFsdWUpIHtcbiAgICAgICAgY29uc3QgZWwgPSBsYWJlbFJlZi52YWx1ZS4kZWw7XG4gICAgICAgIGNvbnN0IHRhcmdldEVsID0gZmxvYXRpbmdMYWJlbFJlZi52YWx1ZS4kZWw7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVjdCA9IG51bGxpZnlUcmFuc2Zvcm1zKGVsKTtcbiAgICAgICAgICBjb25zdCB0YXJnZXRSZWN0ID0gdGFyZ2V0RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgY29uc3QgeCA9IHRhcmdldFJlY3QueCAtIHJlY3QueDtcbiAgICAgICAgICBjb25zdCB5ID0gdGFyZ2V0UmVjdC55IC0gcmVjdC55IC0gKHJlY3QuaGVpZ2h0IC8gMiAtIHRhcmdldFJlY3QuaGVpZ2h0IC8gMik7XG4gICAgICAgICAgY29uc3QgdGFyZ2V0V2lkdGggPSB0YXJnZXRSZWN0LndpZHRoIC8gMC43NTtcbiAgICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGguYWJzKHRhcmdldFdpZHRoIC0gcmVjdC53aWR0aCkgPiAxID8ge1xuICAgICAgICAgICAgbWF4V2lkdGg6IGNvbnZlcnRUb1VuaXQodGFyZ2V0V2lkdGgpXG4gICAgICAgICAgfSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgICAgICAgIGNvbnN0IHRhcmdldFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXRFbCk7XG4gICAgICAgICAgY29uc3QgZHVyYXRpb24gPSBwYXJzZUZsb2F0KHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbikgKiAxMDAwIHx8IDE1MDtcbiAgICAgICAgICBjb25zdCBzY2FsZSA9IHBhcnNlRmxvYXQodGFyZ2V0U3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS12LWZpZWxkLWxhYmVsLXNjYWxlJykpO1xuICAgICAgICAgIGNvbnN0IGNvbG9yID0gdGFyZ2V0U3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnY29sb3InKTtcbiAgICAgICAgICBlbC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgIHRhcmdldEVsLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgICBhbmltYXRlKGVsLCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpIHNjYWxlKCR7c2NhbGV9KWAsXG4gICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgIC4uLndpZHRoXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICBlYXNpbmc6IHN0YW5kYXJkRWFzaW5nLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiB2YWwgPyAnbm9ybWFsJyA6ICdyZXZlcnNlJ1xuICAgICAgICAgIH0pLmZpbmlzaGVkLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3Zpc2liaWxpdHknKTtcbiAgICAgICAgICAgIHRhcmdldEVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCd2aXNpYmlsaXR5Jyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGZsdXNoOiAncG9zdCdcbiAgICB9KTtcbiAgICBjb25zdCBzbG90UHJvcHMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgaXNBY3RpdmUsXG4gICAgICBpc0ZvY3VzZWQsXG4gICAgICBjb250cm9sUmVmLFxuICAgICAgYmx1cixcbiAgICAgIGZvY3VzXG4gICAgfSkpO1xuICAgIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgaWYgKGUudGFyZ2V0ICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IGlzT3V0bGluZWQgPSBwcm9wcy52YXJpYW50ID09PSAnb3V0bGluZWQnO1xuICAgICAgY29uc3QgaGFzUHJlcGVuZCA9IHNsb3RzWydwcmVwZW5kLWlubmVyJ10gfHwgcHJvcHMucHJlcGVuZElubmVySWNvbjtcbiAgICAgIGNvbnN0IGhhc0NsZWFyID0gISEocHJvcHMuY2xlYXJhYmxlIHx8IHNsb3RzLmNsZWFyKTtcbiAgICAgIGNvbnN0IGhhc0FwcGVuZCA9ICEhKHNsb3RzWydhcHBlbmQtaW5uZXInXSB8fCBwcm9wcy5hcHBlbmRJbm5lckljb24gfHwgaGFzQ2xlYXIpO1xuICAgICAgY29uc3QgbGFiZWwgPSBzbG90cy5sYWJlbCA/IHNsb3RzLmxhYmVsKHtcbiAgICAgICAgLi4uc2xvdFByb3BzLnZhbHVlLFxuICAgICAgICBsYWJlbDogcHJvcHMubGFiZWwsXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgZm9yOiBpZC52YWx1ZVxuICAgICAgICB9XG4gICAgICB9KSA6IHByb3BzLmxhYmVsO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWZpZWxkJywge1xuICAgICAgICAgICd2LWZpZWxkLS1hY3RpdmUnOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgICAndi1maWVsZC0tYXBwZW5kZWQnOiBoYXNBcHBlbmQsXG4gICAgICAgICAgJ3YtZmllbGQtLWNlbnRlci1hZmZpeCc6IHByb3BzLmNlbnRlckFmZml4ID8/ICFpc1BsYWluT3JVbmRlcmxpbmVkLnZhbHVlLFxuICAgICAgICAgICd2LWZpZWxkLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICd2LWZpZWxkLS1kaXJ0eSc6IHByb3BzLmRpcnR5LFxuICAgICAgICAgICd2LWZpZWxkLS1lcnJvcic6IHByb3BzLmVycm9yLFxuICAgICAgICAgICd2LWZpZWxkLS1mbGF0JzogcHJvcHMuZmxhdCxcbiAgICAgICAgICAndi1maWVsZC0taGFzLWJhY2tncm91bmQnOiAhIXByb3BzLmJnQ29sb3IsXG4gICAgICAgICAgJ3YtZmllbGQtLXBlcnNpc3RlbnQtY2xlYXInOiBwcm9wcy5wZXJzaXN0ZW50Q2xlYXIsXG4gICAgICAgICAgJ3YtZmllbGQtLXByZXBlbmRlZCc6IGhhc1ByZXBlbmQsXG4gICAgICAgICAgJ3YtZmllbGQtLXJldmVyc2UnOiBwcm9wcy5yZXZlcnNlLFxuICAgICAgICAgICd2LWZpZWxkLS1zaW5nbGUtbGluZSc6IHByb3BzLnNpbmdsZUxpbmUsXG4gICAgICAgICAgJ3YtZmllbGQtLW5vLWxhYmVsJzogIWxhYmVsLFxuICAgICAgICAgIFtgdi1maWVsZC0tdmFyaWFudC0ke3Byb3BzLnZhcmlhbnR9YF06IHRydWVcbiAgICAgICAgfSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLnZhbHVlLCBmb2N1c0NsYXNzZXMudmFsdWUsIGxvYWRlckNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCBydGxDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW2JhY2tncm91bmRDb2xvclN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdLFxuICAgICAgICBcIm9uQ2xpY2tcIjogb25DbGlja1xuICAgICAgfSwgYXR0cnMpLCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtZmllbGRfX292ZXJsYXlcIlxuICAgICAgfSwgbnVsbCksIF9jcmVhdGVWTm9kZShMb2FkZXJTbG90LCB7XG4gICAgICAgIFwibmFtZVwiOiBcInYtZmllbGRcIixcbiAgICAgICAgXCJhY3RpdmVcIjogISFwcm9wcy5sb2FkaW5nLFxuICAgICAgICBcImNvbG9yXCI6IHByb3BzLmVycm9yID8gJ2Vycm9yJyA6IHR5cGVvZiBwcm9wcy5sb2FkaW5nID09PSAnc3RyaW5nJyA/IHByb3BzLmxvYWRpbmcgOiBwcm9wcy5jb2xvclxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiBzbG90cy5sb2FkZXJcbiAgICAgIH0pLCBoYXNQcmVwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwicHJlcGVuZFwiLFxuICAgICAgICBcImNsYXNzXCI6IFwidi1maWVsZF9fcHJlcGVuZC1pbm5lclwiXG4gICAgICB9LCBbcHJvcHMucHJlcGVuZElubmVySWNvbiAmJiBfY3JlYXRlVk5vZGUoSW5wdXRJY29uLCB7XG4gICAgICAgIFwia2V5XCI6IFwicHJlcGVuZC1pY29uXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInByZXBlbmRJbm5lclwiXG4gICAgICB9LCBudWxsKSwgc2xvdHNbJ3ByZXBlbmQtaW5uZXInXT8uKHNsb3RQcm9wcy52YWx1ZSldKSwgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtZmllbGRfX2ZpZWxkXCIsXG4gICAgICAgIFwiZGF0YS1uby1hY3RpdmF0b3JcIjogXCJcIlxuICAgICAgfSwgW1snZmlsbGVkJywgJ3NvbG8nLCAnc29sby1pbnZlcnRlZCcsICdzb2xvLWZpbGxlZCddLmluY2x1ZGVzKHByb3BzLnZhcmlhbnQpICYmIGhhc0xhYmVsLnZhbHVlICYmIF9jcmVhdGVWTm9kZShWRmllbGRMYWJlbCwge1xuICAgICAgICBcImtleVwiOiBcImZsb2F0aW5nLWxhYmVsXCIsXG4gICAgICAgIFwicmVmXCI6IGZsb2F0aW5nTGFiZWxSZWYsXG4gICAgICAgIFwiY2xhc3NcIjogW3RleHRDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgICBcImZsb2F0aW5nXCI6IHRydWUsXG4gICAgICAgIFwiZm9yXCI6IGlkLnZhbHVlLFxuICAgICAgICBcInN0eWxlXCI6IHRleHRDb2xvclN0eWxlcy52YWx1ZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbbGFiZWxdXG4gICAgICB9KSwgX2NyZWF0ZVZOb2RlKFZGaWVsZExhYmVsLCB7XG4gICAgICAgIFwicmVmXCI6IGxhYmVsUmVmLFxuICAgICAgICBcImZvclwiOiBpZC52YWx1ZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbbGFiZWxdXG4gICAgICB9KSwgc2xvdHMuZGVmYXVsdD8uKHtcbiAgICAgICAgLi4uc2xvdFByb3BzLnZhbHVlLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIGlkOiBpZC52YWx1ZSxcbiAgICAgICAgICBjbGFzczogJ3YtZmllbGRfX2lucHV0JyxcbiAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6IG1lc3NhZ2VzSWQudmFsdWVcbiAgICAgICAgfSxcbiAgICAgICAgZm9jdXMsXG4gICAgICAgIGJsdXJcbiAgICAgIH0pXSksIGhhc0NsZWFyICYmIF9jcmVhdGVWTm9kZShWRXhwYW5kWFRyYW5zaXRpb24sIHtcbiAgICAgICAgXCJrZXlcIjogXCJjbGVhclwiXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1maWVsZF9fY2xlYXJhYmxlXCIsXG4gICAgICAgICAgXCJvbk1vdXNlZG93blwiOiBlID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBbc2xvdHMuY2xlYXIgPyBzbG90cy5jbGVhcigpIDogX2NyZWF0ZVZOb2RlKElucHV0SWNvbiwge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNsZWFyXCJcbiAgICAgICAgfSwgbnVsbCldKSwgW1tfdlNob3csIHByb3BzLmRpcnR5XV0pXVxuICAgICAgfSksIGhhc0FwcGVuZCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImtleVwiOiBcImFwcGVuZFwiLFxuICAgICAgICBcImNsYXNzXCI6IFwidi1maWVsZF9fYXBwZW5kLWlubmVyXCJcbiAgICAgIH0sIFtzbG90c1snYXBwZW5kLWlubmVyJ10/LihzbG90UHJvcHMudmFsdWUpLCBwcm9wcy5hcHBlbmRJbm5lckljb24gJiYgX2NyZWF0ZVZOb2RlKElucHV0SWNvbiwge1xuICAgICAgICBcImtleVwiOiBcImFwcGVuZC1pY29uXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImFwcGVuZElubmVyXCJcbiAgICAgIH0sIG51bGwpXSksIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWZpZWxkX19vdXRsaW5lJywgdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgIFwic3R5bGVcIjogdGV4dENvbG9yU3R5bGVzLnZhbHVlXG4gICAgICB9LCBbaXNPdXRsaW5lZCAmJiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtZmllbGRfX291dGxpbmVfX3N0YXJ0XCJcbiAgICAgIH0sIG51bGwpLCBoYXNMYWJlbC52YWx1ZSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi1maWVsZF9fb3V0bGluZV9fbm90Y2hcIlxuICAgICAgfSwgW19jcmVhdGVWTm9kZShWRmllbGRMYWJlbCwge1xuICAgICAgICBcInJlZlwiOiBmbG9hdGluZ0xhYmVsUmVmLFxuICAgICAgICBcImZsb2F0aW5nXCI6IHRydWUsXG4gICAgICAgIFwiZm9yXCI6IGlkLnZhbHVlXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtsYWJlbF1cbiAgICAgIH0pXSksIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWZpZWxkX19vdXRsaW5lX19lbmRcIlxuICAgICAgfSwgbnVsbCldKSwgaXNQbGFpbk9yVW5kZXJsaW5lZC52YWx1ZSAmJiBoYXNMYWJlbC52YWx1ZSAmJiBfY3JlYXRlVk5vZGUoVkZpZWxkTGFiZWwsIHtcbiAgICAgICAgXCJyZWZcIjogZmxvYXRpbmdMYWJlbFJlZixcbiAgICAgICAgXCJmbG9hdGluZ1wiOiB0cnVlLFxuICAgICAgICBcImZvclwiOiBpZC52YWx1ZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbbGFiZWxdXG4gICAgICB9KV0pXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRyb2xSZWZcbiAgICB9O1xuICB9XG59KTtcbi8vIFRPRE86IHRoaXMgaXMga2luZGEgc2xvdywgbWlnaHQgYmUgYmV0dGVyIHRvIGltcGxpY2l0bHkgaW5oZXJpdCBwcm9wcyBpbnN0ZWFkXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyRmllbGRQcm9wcyhhdHRycykge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoVkZpZWxkLnByb3BzKS5maWx0ZXIoayA9PiAhaXNPbihrKSAmJiBrICE9PSAnY2xhc3MnICYmIGsgIT09ICdzdHlsZScpO1xuICByZXR1cm4gcGljayhhdHRycywga2V5cyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WRmllbGQubWpzLm1hcCIsImltcG9ydCB7IEZyYWdtZW50IGFzIF9GcmFnbWVudCwgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlRleHRGaWVsZC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkNvdW50ZXIgfSBmcm9tIFwiLi4vVkNvdW50ZXIvVkNvdW50ZXIubWpzXCI7XG5pbXBvcnQgeyBmaWx0ZXJGaWVsZFByb3BzLCBtYWtlVkZpZWxkUHJvcHMsIFZGaWVsZCB9IGZyb20gXCIuLi9WRmllbGQvVkZpZWxkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZJbnB1dFByb3BzLCBWSW5wdXQgfSBmcm9tIFwiLi4vVklucHV0L1ZJbnB1dC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUZvY3VzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvY3VzLm1qc1wiO1xuaW1wb3J0IHsgZm9yd2FyZFJlZnMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9yd2FyZFJlZnMubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiOyAvLyBEaXJlY3RpdmVzXG5pbXBvcnQgSW50ZXJzZWN0IGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL2ludGVyc2VjdC9pbmRleC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjbG9uZVZOb2RlLCBjb21wdXRlZCwgbmV4dFRpY2ssIHJlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjYWxsRXZlbnQsIGZpbHRlcklucHV0QXR0cnMsIGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5jb25zdCBhY3RpdmVUeXBlcyA9IFsnY29sb3InLCAnZmlsZScsICd0aW1lJywgJ2RhdGUnLCAnZGF0ZXRpbWUtbG9jYWwnLCAnd2VlaycsICdtb250aCddO1xuZXhwb3J0IGNvbnN0IG1ha2VWVGV4dEZpZWxkUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhdXRvZm9jdXM6IEJvb2xlYW4sXG4gIGNvdW50ZXI6IFtCb29sZWFuLCBOdW1iZXIsIFN0cmluZ10sXG4gIGNvdW50ZXJWYWx1ZTogW051bWJlciwgRnVuY3Rpb25dLFxuICBwcmVmaXg6IFN0cmluZyxcbiAgcGxhY2Vob2xkZXI6IFN0cmluZyxcbiAgcGVyc2lzdGVudFBsYWNlaG9sZGVyOiBCb29sZWFuLFxuICBwZXJzaXN0ZW50Q291bnRlcjogQm9vbGVhbixcbiAgc3VmZml4OiBTdHJpbmcsXG4gIHJvbGU6IFN0cmluZyxcbiAgdHlwZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAndGV4dCdcbiAgfSxcbiAgbW9kZWxNb2RpZmllcnM6IE9iamVjdCxcbiAgLi4ubWFrZVZJbnB1dFByb3BzKCksXG4gIC4uLm1ha2VWRmllbGRQcm9wcygpXG59LCAnVlRleHRGaWVsZCcpO1xuZXhwb3J0IGNvbnN0IFZUZXh0RmllbGQgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlRleHRGaWVsZCcsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICBJbnRlcnNlY3RcbiAgfSxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IG1ha2VWVGV4dEZpZWxkUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAnY2xpY2s6Y29udHJvbCc6IGUgPT4gdHJ1ZSxcbiAgICAnbW91c2Vkb3duOmNvbnRyb2wnOiBlID0+IHRydWUsXG4gICAgJ3VwZGF0ZTpmb2N1c2VkJzogZm9jdXNlZCA9PiB0cnVlLFxuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbCA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGF0dHJzLFxuICAgICAgZW1pdCxcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgbW9kZWwgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgY29uc3Qge1xuICAgICAgaXNGb2N1c2VkLFxuICAgICAgZm9jdXMsXG4gICAgICBibHVyXG4gICAgfSA9IHVzZUZvY3VzKHByb3BzKTtcbiAgICBjb25zdCBjb3VudGVyVmFsdWUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gdHlwZW9mIHByb3BzLmNvdW50ZXJWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHByb3BzLmNvdW50ZXJWYWx1ZShtb2RlbC52YWx1ZSkgOiB0eXBlb2YgcHJvcHMuY291bnRlclZhbHVlID09PSAnbnVtYmVyJyA/IHByb3BzLmNvdW50ZXJWYWx1ZSA6IChtb2RlbC52YWx1ZSA/PyAnJykudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgfSk7XG4gICAgY29uc3QgbWF4ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKGF0dHJzLm1heGxlbmd0aCkgcmV0dXJuIGF0dHJzLm1heGxlbmd0aDtcbiAgICAgIGlmICghcHJvcHMuY291bnRlciB8fCB0eXBlb2YgcHJvcHMuY291bnRlciAhPT0gJ251bWJlcicgJiYgdHlwZW9mIHByb3BzLmNvdW50ZXIgIT09ICdzdHJpbmcnKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHByb3BzLmNvdW50ZXI7XG4gICAgfSk7XG4gICAgY29uc3QgaXNQbGFpbk9yVW5kZXJsaW5lZCA9IGNvbXB1dGVkKCgpID0+IFsncGxhaW4nLCAndW5kZXJsaW5lZCddLmluY2x1ZGVzKHByb3BzLnZhcmlhbnQpKTtcbiAgICBmdW5jdGlvbiBvbkludGVyc2VjdChpc0ludGVyc2VjdGluZywgZW50cmllcykge1xuICAgICAgaWYgKCFwcm9wcy5hdXRvZm9jdXMgfHwgIWlzSW50ZXJzZWN0aW5nKSByZXR1cm47XG4gICAgICBlbnRyaWVzWzBdLnRhcmdldD8uZm9jdXM/LigpO1xuICAgIH1cbiAgICBjb25zdCB2SW5wdXRSZWYgPSByZWYoKTtcbiAgICBjb25zdCB2RmllbGRSZWYgPSByZWYoKTtcbiAgICBjb25zdCBpbnB1dFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gY29tcHV0ZWQoKCkgPT4gYWN0aXZlVHlwZXMuaW5jbHVkZXMocHJvcHMudHlwZSkgfHwgcHJvcHMucGVyc2lzdGVudFBsYWNlaG9sZGVyIHx8IGlzRm9jdXNlZC52YWx1ZSB8fCBwcm9wcy5hY3RpdmUpO1xuICAgIGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgICBpZiAoaW5wdXRSZWYudmFsdWUgIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgaW5wdXRSZWYudmFsdWU/LmZvY3VzKCk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzRm9jdXNlZC52YWx1ZSkgZm9jdXMoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Db250cm9sTW91c2Vkb3duKGUpIHtcbiAgICAgIGVtaXQoJ21vdXNlZG93bjpjb250cm9sJywgZSk7XG4gICAgICBpZiAoZS50YXJnZXQgPT09IGlucHV0UmVmLnZhbHVlKSByZXR1cm47XG4gICAgICBvbkZvY3VzKCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQ29udHJvbENsaWNrKGUpIHtcbiAgICAgIG9uRm9jdXMoKTtcbiAgICAgIGVtaXQoJ2NsaWNrOmNvbnRyb2wnLCBlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25DbGVhcihlKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgb25Gb2N1cygpO1xuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBtb2RlbC52YWx1ZSA9IG51bGw7XG4gICAgICAgIGNhbGxFdmVudChwcm9wc1snb25DbGljazpjbGVhciddLCBlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbklucHV0KGUpIHtcbiAgICAgIGNvbnN0IGVsID0gZS50YXJnZXQ7XG4gICAgICBtb2RlbC52YWx1ZSA9IGVsLnZhbHVlO1xuICAgICAgaWYgKHByb3BzLm1vZGVsTW9kaWZpZXJzPy50cmltICYmIFsndGV4dCcsICdzZWFyY2gnLCAncGFzc3dvcmQnLCAndGVsJywgJ3VybCddLmluY2x1ZGVzKHByb3BzLnR5cGUpKSB7XG4gICAgICAgIGNvbnN0IGNhcmV0UG9zaXRpb24gPSBbZWwuc2VsZWN0aW9uU3RhcnQsIGVsLnNlbGVjdGlvbkVuZF07XG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBlbC5zZWxlY3Rpb25TdGFydCA9IGNhcmV0UG9zaXRpb25bMF07XG4gICAgICAgICAgZWwuc2VsZWN0aW9uRW5kID0gY2FyZXRQb3NpdGlvblsxXTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBoYXNDb3VudGVyID0gISEoc2xvdHMuY291bnRlciB8fCBwcm9wcy5jb3VudGVyIHx8IHByb3BzLmNvdW50ZXJWYWx1ZSk7XG4gICAgICBjb25zdCBoYXNEZXRhaWxzID0gISEoaGFzQ291bnRlciB8fCBzbG90cy5kZXRhaWxzKTtcbiAgICAgIGNvbnN0IFtyb290QXR0cnMsIGlucHV0QXR0cnNdID0gZmlsdGVySW5wdXRBdHRycyhhdHRycyk7XG4gICAgICBjb25zdCBbe1xuICAgICAgICBtb2RlbFZhbHVlOiBfLFxuICAgICAgICAuLi5pbnB1dFByb3BzXG4gICAgICB9XSA9IFZJbnB1dC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICBjb25zdCBbZmllbGRQcm9wc10gPSBmaWx0ZXJGaWVsZFByb3BzKHByb3BzKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVklucHV0LCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwicmVmXCI6IHZJbnB1dFJlZixcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IG1vZGVsLnZhbHVlID0gJGV2ZW50LFxuICAgICAgICBcImNsYXNzXCI6IFsndi10ZXh0LWZpZWxkJywge1xuICAgICAgICAgICd2LXRleHQtZmllbGQtLXByZWZpeGVkJzogcHJvcHMucHJlZml4LFxuICAgICAgICAgICd2LXRleHQtZmllbGQtLXN1ZmZpeGVkJzogcHJvcHMuc3VmZml4LFxuICAgICAgICAgICd2LXRleHQtZmllbGQtLXBsYWluLXVuZGVybGluZWQnOiBbJ3BsYWluJywgJ3VuZGVybGluZWQnXS5pbmNsdWRlcyhwcm9wcy52YXJpYW50KVxuICAgICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIHJvb3RBdHRycywgaW5wdXRQcm9wcywge1xuICAgICAgICBcImNlbnRlckFmZml4XCI6ICFpc1BsYWluT3JVbmRlcmxpbmVkLnZhbHVlLFxuICAgICAgICBcImZvY3VzZWRcIjogaXNGb2N1c2VkLnZhbHVlXG4gICAgICB9KSwge1xuICAgICAgICAuLi5zbG90cyxcbiAgICAgICAgZGVmYXVsdDogX3JlZjIgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIGlzRGlzYWJsZWQsXG4gICAgICAgICAgICBpc0RpcnR5LFxuICAgICAgICAgICAgaXNSZWFkb25seSxcbiAgICAgICAgICAgIGlzVmFsaWRcbiAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWRmllbGQsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICAgIFwicmVmXCI6IHZGaWVsZFJlZixcbiAgICAgICAgICAgIFwib25Nb3VzZWRvd25cIjogb25Db250cm9sTW91c2Vkb3duLFxuICAgICAgICAgICAgXCJvbkNsaWNrXCI6IG9uQ29udHJvbENsaWNrLFxuICAgICAgICAgICAgXCJvbkNsaWNrOmNsZWFyXCI6IG9uQ2xlYXIsXG4gICAgICAgICAgICBcIm9uQ2xpY2s6cHJlcGVuZElubmVyXCI6IHByb3BzWydvbkNsaWNrOnByZXBlbmRJbm5lciddLFxuICAgICAgICAgICAgXCJvbkNsaWNrOmFwcGVuZElubmVyXCI6IHByb3BzWydvbkNsaWNrOmFwcGVuZElubmVyJ10sXG4gICAgICAgICAgICBcInJvbGVcIjogcHJvcHMucm9sZVxuICAgICAgICAgIH0sIGZpZWxkUHJvcHMsIHtcbiAgICAgICAgICAgIFwiaWRcIjogaWQudmFsdWUsXG4gICAgICAgICAgICBcImFjdGl2ZVwiOiBpc0FjdGl2ZS52YWx1ZSB8fCBpc0RpcnR5LnZhbHVlLFxuICAgICAgICAgICAgXCJkaXJ0eVwiOiBpc0RpcnR5LnZhbHVlIHx8IHByb3BzLmRpcnR5LFxuICAgICAgICAgICAgXCJkaXNhYmxlZFwiOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZC52YWx1ZSxcbiAgICAgICAgICAgIFwiZXJyb3JcIjogaXNWYWxpZC52YWx1ZSA9PT0gZmFsc2VcbiAgICAgICAgICB9KSwge1xuICAgICAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgICAgICBkZWZhdWx0OiBfcmVmMyA9PiB7XG4gICAgICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBmaWVsZENsYXNzLFxuICAgICAgICAgICAgICAgICAgLi4uc2xvdFByb3BzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9ID0gX3JlZjM7XG4gICAgICAgICAgICAgIGNvbnN0IGlucHV0Tm9kZSA9IF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoXCJpbnB1dFwiLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgICAgICAgXCJyZWZcIjogaW5wdXRSZWYsXG4gICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBtb2RlbC52YWx1ZSxcbiAgICAgICAgICAgICAgICBcIm9uSW5wdXRcIjogb25JbnB1dCxcbiAgICAgICAgICAgICAgICBcImF1dG9mb2N1c1wiOiBwcm9wcy5hdXRvZm9jdXMsXG4gICAgICAgICAgICAgICAgXCJyZWFkb25seVwiOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgICAgICAgICAgICAgIFwiZGlzYWJsZWRcIjogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogcHJvcHMubmFtZSxcbiAgICAgICAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6IHByb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgIFwic2l6ZVwiOiAxLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBwcm9wcy50eXBlLFxuICAgICAgICAgICAgICAgIFwib25Gb2N1c1wiOiBvbkZvY3VzLFxuICAgICAgICAgICAgICAgIFwib25CbHVyXCI6IGJsdXJcbiAgICAgICAgICAgICAgfSwgc2xvdFByb3BzLCBpbnB1dEF0dHJzKSwgbnVsbCksIFtbX3Jlc29sdmVEaXJlY3RpdmUoXCJpbnRlcnNlY3RcIiksIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBvbkludGVyc2VjdFxuICAgICAgICAgICAgICB9LCBudWxsLCB7XG4gICAgICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgICAgICB9XV0pO1xuICAgICAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Byb3BzLnByZWZpeCAmJiBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwidi10ZXh0LWZpZWxkX19wcmVmaXhcIlxuICAgICAgICAgICAgICB9LCBbX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtdGV4dC1maWVsZF9fcHJlZml4X190ZXh0XCJcbiAgICAgICAgICAgICAgfSwgW3Byb3BzLnByZWZpeF0pXSksIHNsb3RzLmRlZmF1bHQgPyBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogZmllbGRDbGFzcyxcbiAgICAgICAgICAgICAgICBcImRhdGEtbm8tYWN0aXZhdG9yXCI6IFwiXCJcbiAgICAgICAgICAgICAgfSwgW3Nsb3RzLmRlZmF1bHQoKSwgaW5wdXROb2RlXSkgOiBjbG9uZVZOb2RlKGlucHV0Tm9kZSwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBmaWVsZENsYXNzXG4gICAgICAgICAgICAgIH0pLCBwcm9wcy5zdWZmaXggJiYgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtdGV4dC1maWVsZF9fc3VmZml4XCJcbiAgICAgICAgICAgICAgfSwgW19jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXRleHQtZmllbGRfX3N1ZmZpeF9fdGV4dFwiXG4gICAgICAgICAgICAgIH0sIFtwcm9wcy5zdWZmaXhdKV0pXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRldGFpbHM6IGhhc0RldGFpbHMgPyBzbG90UHJvcHMgPT4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Nsb3RzLmRldGFpbHM/LihzbG90UHJvcHMpLCBoYXNDb3VudGVyICYmIF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIG51bGwsIG51bGwpLCBfY3JlYXRlVk5vZGUoVkNvdW50ZXIsIHtcbiAgICAgICAgICBcImFjdGl2ZVwiOiBwcm9wcy5wZXJzaXN0ZW50Q291bnRlciB8fCBpc0ZvY3VzZWQudmFsdWUsXG4gICAgICAgICAgXCJ2YWx1ZVwiOiBjb3VudGVyVmFsdWUudmFsdWUsXG4gICAgICAgICAgXCJtYXhcIjogbWF4LnZhbHVlXG4gICAgICAgIH0sIHNsb3RzLmNvdW50ZXIpXSldKSA6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvcndhcmRSZWZzKHt9LCB2SW5wdXRSZWYsIHZGaWVsZFJlZiwgaW5wdXRSZWYpO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZUZXh0RmllbGQubWpzLm1hcCIsImltcG9ydCB7IG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50IH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyB1c2VSZXNpemVPYnNlcnZlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yZXNpemVPYnNlcnZlci5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWVmlydHVhbFNjcm9sbEl0ZW1Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHJlbmRlcmxlc3M6IEJvb2xlYW4sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpXG59LCAnVlZpcnR1YWxTY3JvbGxJdGVtJyk7XG5leHBvcnQgY29uc3QgVlZpcnR1YWxTY3JvbGxJdGVtID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZWaXJ0dWFsU2Nyb2xsSXRlbScsXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiBtYWtlVlZpcnR1YWxTY3JvbGxJdGVtUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOmhlaWdodCc6IGhlaWdodCA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGF0dHJzLFxuICAgICAgZW1pdCxcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgcmVzaXplUmVmLFxuICAgICAgY29udGVudFJlY3RcbiAgICB9ID0gdXNlUmVzaXplT2JzZXJ2ZXIodW5kZWZpbmVkLCAnYm9yZGVyJyk7XG4gICAgd2F0Y2goKCkgPT4gY29udGVudFJlY3QudmFsdWU/LmhlaWdodCwgaGVpZ2h0ID0+IHtcbiAgICAgIGlmIChoZWlnaHQgIT0gbnVsbCkgZW1pdCgndXBkYXRlOmhlaWdodCcsIGhlaWdodCk7XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHByb3BzLnJlbmRlcmxlc3MgPyBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbc2xvdHMuZGVmYXVsdD8uKHtcbiAgICAgIGl0ZW1SZWY6IHJlc2l6ZVJlZlxuICAgIH0pXSkgOiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwgX21lcmdlUHJvcHMoe1xuICAgICAgXCJyZWZcIjogcmVzaXplUmVmLFxuICAgICAgXCJjbGFzc1wiOiBbJ3YtdmlydHVhbC1zY3JvbGxfX2l0ZW0nLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgfSwgYXR0cnMpLCBbc2xvdHMuZGVmYXVsdD8uKCldKSk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlZpcnR1YWxTY3JvbGxJdGVtLm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlRGlzcGxheSB9IGZyb20gXCIuL2Rpc3BsYXkubWpzXCI7XG5pbXBvcnQgeyB1c2VSZXNpemVPYnNlcnZlciB9IGZyb20gXCIuL3Jlc2l6ZU9ic2VydmVyLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCByZWYsIHNoYWxsb3dSZWYsIHdhdGNoLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjbGFtcCwgY3JlYXRlUmFuZ2UsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3QgVVAgPSAtMTtcbmNvbnN0IERPV04gPSAxO1xuZXhwb3J0IGNvbnN0IG1ha2VWaXJ0dWFsUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBpdGVtSGVpZ2h0OiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiA0OFxuICB9XG59LCAndmlydHVhbCcpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVZpcnR1YWwocHJvcHMsIGl0ZW1zLCBvZmZzZXQpIHtcbiAgY29uc3QgZmlyc3QgPSBzaGFsbG93UmVmKDApO1xuICBjb25zdCBiYXNlSXRlbUhlaWdodCA9IHNoYWxsb3dSZWYocHJvcHMuaXRlbUhlaWdodCk7XG4gIGNvbnN0IGl0ZW1IZWlnaHQgPSBjb21wdXRlZCh7XG4gICAgZ2V0OiAoKSA9PiBwYXJzZUludChiYXNlSXRlbUhlaWdodC52YWx1ZSA/PyAwLCAxMCksXG4gICAgc2V0KHZhbCkge1xuICAgICAgYmFzZUl0ZW1IZWlnaHQudmFsdWUgPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgY29udGFpbmVyUmVmID0gcmVmKCk7XG4gIGNvbnN0IHtcbiAgICByZXNpemVSZWYsXG4gICAgY29udGVudFJlY3RcbiAgfSA9IHVzZVJlc2l6ZU9ic2VydmVyKCk7XG4gIHdhdGNoRWZmZWN0KCgpID0+IHtcbiAgICByZXNpemVSZWYudmFsdWUgPSBjb250YWluZXJSZWYudmFsdWU7XG4gIH0pO1xuICBjb25zdCBkaXNwbGF5ID0gdXNlRGlzcGxheSgpO1xuICBjb25zdCBzaXplTWFwID0gbmV3IE1hcCgpO1xuICBsZXQgc2l6ZXMgPSBBcnJheS5mcm9tKHtcbiAgICBsZW5ndGg6IGl0ZW1zLnZhbHVlLmxlbmd0aFxuICB9KTtcbiAgY29uc3QgdmlzaWJsZUl0ZW1zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IGhlaWdodCA9ICghY29udGVudFJlY3QudmFsdWUgfHwgY29udGFpbmVyUmVmLnZhbHVlID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyBkaXNwbGF5LmhlaWdodC52YWx1ZSA6IGNvbnRlbnRSZWN0LnZhbHVlLmhlaWdodCkgLSAob2Zmc2V0Py52YWx1ZSA/PyAwKTtcbiAgICByZXR1cm4gTWF0aC5jZWlsKGhlaWdodCAvIGl0ZW1IZWlnaHQudmFsdWUgKiAxLjcgKyAxKTtcbiAgfSk7XG4gIGZ1bmN0aW9uIGhhbmRsZUl0ZW1SZXNpemUoaW5kZXgsIGhlaWdodCkge1xuICAgIGl0ZW1IZWlnaHQudmFsdWUgPSBNYXRoLm1heChpdGVtSGVpZ2h0LnZhbHVlLCBoZWlnaHQpO1xuICAgIHNpemVzW2luZGV4XSA9IGhlaWdodDtcbiAgICBzaXplTWFwLnNldChpdGVtcy52YWx1ZVtpbmRleF0sIGhlaWdodCk7XG4gIH1cbiAgZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KGluZGV4KSB7XG4gICAgcmV0dXJuIHNpemVzLnNsaWNlKDAsIGluZGV4KS5yZWR1Y2UoKGFjYywgdmFsKSA9PiBhY2MgKyAodmFsIHx8IGl0ZW1IZWlnaHQudmFsdWUpLCAwKTtcbiAgfVxuICBmdW5jdGlvbiBjYWxjdWxhdGVNaWRQb2ludEluZGV4KHNjcm9sbFRvcCkge1xuICAgIGNvbnN0IGVuZCA9IGl0ZW1zLnZhbHVlLmxlbmd0aDtcbiAgICBsZXQgbWlkZGxlID0gMDtcbiAgICBsZXQgbWlkZGxlT2Zmc2V0ID0gMDtcbiAgICB3aGlsZSAobWlkZGxlT2Zmc2V0IDwgc2Nyb2xsVG9wICYmIG1pZGRsZSA8IGVuZCkge1xuICAgICAgbWlkZGxlT2Zmc2V0ICs9IHNpemVzW21pZGRsZSsrXSB8fCBpdGVtSGVpZ2h0LnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbWlkZGxlIC0gMTtcbiAgfVxuICBsZXQgbGFzdFNjcm9sbFRvcCA9IDA7XG4gIGZ1bmN0aW9uIGhhbmRsZVNjcm9sbCgpIHtcbiAgICBpZiAoIWNvbnRhaW5lclJlZi52YWx1ZSB8fCAhY29udGVudFJlY3QudmFsdWUpIHJldHVybjtcbiAgICBjb25zdCBoZWlnaHQgPSBjb250ZW50UmVjdC52YWx1ZS5oZWlnaHQgLSA1NjtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSBjb250YWluZXJSZWYudmFsdWUuc2Nyb2xsVG9wO1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHNjcm9sbFRvcCA8IGxhc3RTY3JvbGxUb3AgPyBVUCA6IERPV047XG4gICAgY29uc3QgbWlkUG9pbnRJbmRleCA9IGNhbGN1bGF0ZU1pZFBvaW50SW5kZXgoc2Nyb2xsVG9wICsgaGVpZ2h0IC8gMik7XG4gICAgY29uc3QgYnVmZmVyID0gTWF0aC5yb3VuZCh2aXNpYmxlSXRlbXMudmFsdWUgLyAzKTtcbiAgICBjb25zdCBmaXJzdEluZGV4ID0gbWlkUG9pbnRJbmRleCAtIGJ1ZmZlcjtcbiAgICBjb25zdCBsYXN0SW5kZXggPSBmaXJzdC52YWx1ZSArIGJ1ZmZlciAqIDIgLSAxO1xuICAgIGlmIChkaXJlY3Rpb24gPT09IFVQICYmIG1pZFBvaW50SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICBmaXJzdC52YWx1ZSA9IGNsYW1wKGZpcnN0SW5kZXgsIDAsIGl0ZW1zLnZhbHVlLmxlbmd0aCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IERPV04gJiYgbWlkUG9pbnRJbmRleCA+PSBsYXN0SW5kZXgpIHtcbiAgICAgIGZpcnN0LnZhbHVlID0gY2xhbXAoZmlyc3RJbmRleCwgMCwgaXRlbXMudmFsdWUubGVuZ3RoIC0gdmlzaWJsZUl0ZW1zLnZhbHVlKTtcbiAgICB9XG4gICAgbGFzdFNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgfVxuICBmdW5jdGlvbiBzY3JvbGxUb0luZGV4KGluZGV4KSB7XG4gICAgaWYgKCFjb250YWluZXJSZWYudmFsdWUpIHJldHVybjtcbiAgICBjb25zdCBvZmZzZXQgPSBjYWxjdWxhdGVPZmZzZXQoaW5kZXgpO1xuICAgIGNvbnRhaW5lclJlZi52YWx1ZS5zY3JvbGxUb3AgPSBvZmZzZXQ7XG4gIH1cbiAgY29uc3QgbGFzdCA9IGNvbXB1dGVkKCgpID0+IE1hdGgubWluKGl0ZW1zLnZhbHVlLmxlbmd0aCwgZmlyc3QudmFsdWUgKyB2aXNpYmxlSXRlbXMudmFsdWUpKTtcbiAgY29uc3QgY29tcHV0ZWRJdGVtcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gaXRlbXMudmFsdWUuc2xpY2UoZmlyc3QudmFsdWUsIGxhc3QudmFsdWUpLm1hcCgoaXRlbSwgaW5kZXgpID0+ICh7XG4gICAgICByYXc6IGl0ZW0sXG4gICAgICBpbmRleDogaW5kZXggKyBmaXJzdC52YWx1ZVxuICAgIH0pKTtcbiAgfSk7XG4gIGNvbnN0IHBhZGRpbmdUb3AgPSBjb21wdXRlZCgoKSA9PiBjYWxjdWxhdGVPZmZzZXQoZmlyc3QudmFsdWUpKTtcbiAgY29uc3QgcGFkZGluZ0JvdHRvbSA9IGNvbXB1dGVkKCgpID0+IGNhbGN1bGF0ZU9mZnNldChpdGVtcy52YWx1ZS5sZW5ndGgpIC0gY2FsY3VsYXRlT2Zmc2V0KGxhc3QudmFsdWUpKTtcbiAgd2F0Y2goKCkgPT4gaXRlbXMudmFsdWUubGVuZ3RoLCAoKSA9PiB7XG4gICAgc2l6ZXMgPSBjcmVhdGVSYW5nZShpdGVtcy52YWx1ZS5sZW5ndGgpLm1hcCgoKSA9PiBpdGVtSGVpZ2h0LnZhbHVlKTtcbiAgICBzaXplTWFwLmZvckVhY2goKGhlaWdodCwgaXRlbSkgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSBpdGVtcy52YWx1ZS5pbmRleE9mKGl0ZW0pO1xuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICBzaXplTWFwLmRlbGV0ZShpdGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemVzW2luZGV4XSA9IGhlaWdodDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgY29udGFpbmVyUmVmLFxuICAgIGNvbXB1dGVkSXRlbXMsXG4gICAgaXRlbUhlaWdodCxcbiAgICBwYWRkaW5nVG9wLFxuICAgIHBhZGRpbmdCb3R0b20sXG4gICAgc2Nyb2xsVG9JbmRleCxcbiAgICBoYW5kbGVTY3JvbGwsXG4gICAgaGFuZGxlSXRlbVJlc2l6ZVxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmlydHVhbC5tanMubWFwIiwiaW1wb3J0IHsgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlZpcnR1YWxTY3JvbGwuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZWaXJ0dWFsU2Nyb2xsSXRlbSB9IGZyb20gXCIuL1ZWaXJ0dWFsU2Nyb2xsSXRlbS5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGltZW5zaW9uUHJvcHMsIHVzZURpbWVuc2lvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaW1lbnNpb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlVG9nZ2xlU2NvcGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdG9nZ2xlU2NvcGUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVmlydHVhbFByb3BzLCB1c2VWaXJ0dWFsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3ZpcnR1YWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgb25Nb3VudGVkLCBvblNjb3BlRGlzcG9zZSwgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZ2VuZXJpY0NvbXBvbmVudCwgZ2V0Q3VycmVudEluc3RhbmNlLCBnZXRTY3JvbGxQYXJlbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZWaXJ0dWFsU2Nyb2xsUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBpdGVtczoge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gIH0sXG4gIHJlbmRlcmxlc3M6IEJvb2xlYW4sXG4gIC4uLm1ha2VWaXJ0dWFsUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEaW1lbnNpb25Qcm9wcygpXG59LCAnVlZpcnR1YWxTY3JvbGwnKTtcbmV4cG9ydCBjb25zdCBWVmlydHVhbFNjcm9sbCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWVmlydHVhbFNjcm9sbCcsXG4gIHByb3BzOiBtYWtlVlZpcnR1YWxTY3JvbGxQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKCdWVmlydHVhbFNjcm9sbCcpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRpbWVuc2lvblN0eWxlc1xuICAgIH0gPSB1c2VEaW1lbnNpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbnRhaW5lclJlZixcbiAgICAgIGhhbmRsZVNjcm9sbCxcbiAgICAgIGhhbmRsZUl0ZW1SZXNpemUsXG4gICAgICBzY3JvbGxUb0luZGV4LFxuICAgICAgcGFkZGluZ1RvcCxcbiAgICAgIHBhZGRpbmdCb3R0b20sXG4gICAgICBjb21wdXRlZEl0ZW1zXG4gICAgfSA9IHVzZVZpcnR1YWwocHJvcHMsIHRvUmVmKHByb3BzLCAnaXRlbXMnKSk7XG4gICAgdXNlVG9nZ2xlU2NvcGUoKCkgPT4gcHJvcHMucmVuZGVybGVzcywgKCkgPT4ge1xuICAgICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgICAgY29udGFpbmVyUmVmLnZhbHVlID0gZ2V0U2Nyb2xsUGFyZW50KHZtLnZub2RlLmVsLCB0cnVlKTtcbiAgICAgICAgY29udGFpbmVyUmVmLnZhbHVlPy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYW5kbGVTY3JvbGwpO1xuICAgICAgfSk7XG4gICAgICBvblNjb3BlRGlzcG9zZSgoKSA9PiB7XG4gICAgICAgIGNvbnRhaW5lclJlZi52YWx1ZT8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlU2Nyb2xsKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IGNvbXB1dGVkSXRlbXMudmFsdWUubWFwKGl0ZW0gPT4gX2NyZWF0ZVZOb2RlKFZWaXJ0dWFsU2Nyb2xsSXRlbSwge1xuICAgICAgICBcImtleVwiOiBpdGVtLmluZGV4LFxuICAgICAgICBcInJlbmRlcmxlc3NcIjogcHJvcHMucmVuZGVybGVzcyxcbiAgICAgICAgXCJvblVwZGF0ZTpoZWlnaHRcIjogaGVpZ2h0ID0+IGhhbmRsZUl0ZW1SZXNpemUoaXRlbS5pbmRleCwgaGVpZ2h0KVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiBzbG90UHJvcHMgPT4gc2xvdHMuZGVmYXVsdD8uKHtcbiAgICAgICAgICBpdGVtOiBpdGVtLnJhdyxcbiAgICAgICAgICBpbmRleDogaXRlbS5pbmRleCxcbiAgICAgICAgICAuLi5zbG90UHJvcHNcbiAgICAgICAgfSlcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBwcm9wcy5yZW5kZXJsZXNzID8gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW19jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LXZpcnR1YWwtc2Nyb2xsX19zcGFjZXJcIixcbiAgICAgICAgXCJzdHlsZVwiOiB7XG4gICAgICAgICAgcGFkZGluZ1RvcDogY29udmVydFRvVW5pdChwYWRkaW5nVG9wLnZhbHVlKVxuICAgICAgICB9XG4gICAgICB9LCBudWxsKSwgY2hpbGRyZW4sIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LXZpcnR1YWwtc2Nyb2xsX19zcGFjZXJcIixcbiAgICAgICAgXCJzdHlsZVwiOiB7XG4gICAgICAgICAgcGFkZGluZ0JvdHRvbTogY29udmVydFRvVW5pdChwYWRkaW5nQm90dG9tLnZhbHVlKVxuICAgICAgICB9XG4gICAgICB9LCBudWxsKV0pIDogX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJyZWZcIjogY29udGFpbmVyUmVmLFxuICAgICAgICBcImNsYXNzXCI6IFsndi12aXJ0dWFsLXNjcm9sbCcsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJvblNjcm9sbFwiOiBoYW5kbGVTY3JvbGwsXG4gICAgICAgIFwic3R5bGVcIjogW2RpbWVuc2lvblN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdXG4gICAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtdmlydHVhbC1zY3JvbGxfX2NvbnRhaW5lclwiLFxuICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICBwYWRkaW5nVG9wOiBjb252ZXJ0VG9Vbml0KHBhZGRpbmdUb3AudmFsdWUpLFxuICAgICAgICAgIHBhZGRpbmdCb3R0b206IGNvbnZlcnRUb1VuaXQocGFkZGluZ0JvdHRvbS52YWx1ZSlcbiAgICAgICAgfVxuICAgICAgfSwgW2NoaWxkcmVuXSldKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgc2Nyb2xsVG9JbmRleFxuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlZpcnR1YWxTY3JvbGwubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgc2hhbGxvd1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuXG4vLyBUeXBlc1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2Nyb2xsaW5nKGxpc3RSZWYsIHRleHRGaWVsZFJlZikge1xuICBjb25zdCBpc1Njcm9sbGluZyA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICBsZXQgc2Nyb2xsVGltZW91dDtcbiAgZnVuY3Rpb24gb25MaXN0U2Nyb2xsKGUpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShzY3JvbGxUaW1lb3V0KTtcbiAgICBpc1Njcm9sbGluZy52YWx1ZSA9IHRydWU7XG4gICAgc2Nyb2xsVGltZW91dCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzY3JvbGxUaW1lb3V0ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgaXNTY3JvbGxpbmcudmFsdWUgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGZpbmlzaFNjcm9sbGluZygpIHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShyZXNvbHZlKSk7XG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzb2x2ZSkpO1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc29sdmUpKTtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGlmIChpc1Njcm9sbGluZy52YWx1ZSkge1xuICAgICAgICBjb25zdCBzdG9wID0gd2F0Y2goaXNTY3JvbGxpbmcsICgpID0+IHtcbiAgICAgICAgICBzdG9wKCk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gb25MaXN0S2V5ZG93bihlKSB7XG4gICAgaWYgKGUua2V5ID09PSAnVGFiJykge1xuICAgICAgdGV4dEZpZWxkUmVmLnZhbHVlPy5mb2N1cygpO1xuICAgIH1cbiAgICBpZiAoIVsnUGFnZURvd24nLCAnUGFnZVVwJywgJ0hvbWUnLCAnRW5kJ10uaW5jbHVkZXMoZS5rZXkpKSByZXR1cm47XG4gICAgY29uc3QgZWwgPSBsaXN0UmVmLnZhbHVlPy4kZWw7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuICAgIGlmIChlLmtleSA9PT0gJ0hvbWUnIHx8IGUua2V5ID09PSAnRW5kJykge1xuICAgICAgZWwuc2Nyb2xsVG8oe1xuICAgICAgICB0b3A6IGUua2V5ID09PSAnSG9tZScgPyAwIDogZWwuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICBhd2FpdCBmaW5pc2hTY3JvbGxpbmcoKTtcbiAgICBjb25zdCBjaGlsZHJlbiA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJzpzY29wZSA+IDpub3QoLnYtdmlydHVhbC1zY3JvbGxfX3NwYWNlciknKTtcbiAgICBpZiAoZS5rZXkgPT09ICdQYWdlRG93bicgfHwgZS5rZXkgPT09ICdIb21lJykge1xuICAgICAgY29uc3QgdG9wID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgICBpZiAoY2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wID49IHRvcCkge1xuICAgICAgICAgIGNoaWxkLmZvY3VzKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYm90dG9tID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tO1xuICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBbLi4uY2hpbGRyZW5dLnJldmVyc2UoKSkge1xuICAgICAgICBpZiAoY2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDw9IGJvdHRvbSkge1xuICAgICAgICAgIGNoaWxkLmZvY3VzKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBvbkxpc3RTY3JvbGwsXG4gICAgb25MaXN0S2V5ZG93blxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlU2Nyb2xsaW5nLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlNlbGVjdC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkRpYWxvZ1RyYW5zaXRpb24gfSBmcm9tIFwiLi4vdHJhbnNpdGlvbnMvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWQ2hlY2tib3hCdG4gfSBmcm9tIFwiLi4vVkNoZWNrYm94L2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkNoaXAgfSBmcm9tIFwiLi4vVkNoaXAvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZJY29uIH0gZnJvbSBcIi4uL1ZJY29uL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkxpc3QsIFZMaXN0SXRlbSB9IGZyb20gXCIuLi9WTGlzdC9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZNZW51IH0gZnJvbSBcIi4uL1ZNZW51L2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZUZXh0RmllbGRQcm9wcywgVlRleHRGaWVsZCB9IGZyb20gXCIuLi9WVGV4dEZpZWxkL1ZUZXh0RmllbGQubWpzXCI7XG5pbXBvcnQgeyBWVmlydHVhbFNjcm9sbCB9IGZyb20gXCIuLi9WVmlydHVhbFNjcm9sbC9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVNjcm9sbGluZyB9IGZyb20gXCIuL3VzZVNjcm9sbGluZy5tanNcIjtcbmltcG9ydCB7IHVzZUZvcm0gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9ybS5tanNcIjtcbmltcG9ydCB7IGZvcndhcmRSZWZzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvcndhcmRSZWZzLm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUl0ZW1zUHJvcHMsIHVzZUl0ZW1zIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xpc3QtaXRlbXMubWpzXCI7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IG1ha2VUcmFuc2l0aW9uUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdHJhbnNpdGlvbi5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgbWVyZ2VQcm9wcywgcmVmLCBzaGFsbG93UmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBJTl9CUk9XU0VSLCBtYXRjaGVzU2VsZWN0b3IsIG9taXQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyLCB3cmFwSW5BcnJheSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VTZWxlY3RQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNoaXBzOiBCb29sZWFuLFxuICBjbG9zYWJsZUNoaXBzOiBCb29sZWFuLFxuICBjbG9zZVRleHQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJyR2dWV0aWZ5LmNsb3NlJ1xuICB9LFxuICBvcGVuVGV4dDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkub3BlbidcbiAgfSxcbiAgZWFnZXI6IEJvb2xlYW4sXG4gIGhpZGVOb0RhdGE6IEJvb2xlYW4sXG4gIGhpZGVTZWxlY3RlZDogQm9vbGVhbixcbiAgbWVudTogQm9vbGVhbixcbiAgbWVudUljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRkcm9wZG93bidcbiAgfSxcbiAgbWVudVByb3BzOiB7XG4gICAgdHlwZTogT2JqZWN0XG4gIH0sXG4gIG11bHRpcGxlOiBCb29sZWFuLFxuICBub0RhdGFUZXh0OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICckdnVldGlmeS5ub0RhdGFUZXh0J1xuICB9LFxuICBvcGVuT25DbGVhcjogQm9vbGVhbixcbiAgaXRlbUNvbG9yOiBTdHJpbmcsXG4gIC4uLm1ha2VJdGVtc1Byb3BzKHtcbiAgICBpdGVtQ2hpbGRyZW46IGZhbHNlXG4gIH0pXG59LCAnU2VsZWN0Jyk7XG5leHBvcnQgY29uc3QgbWFrZVZTZWxlY3RQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC4uLm1ha2VTZWxlY3RQcm9wcygpLFxuICAuLi5vbWl0KG1ha2VWVGV4dEZpZWxkUHJvcHMoe1xuICAgIG1vZGVsVmFsdWU6IG51bGwsXG4gICAgcm9sZTogJ2J1dHRvbidcbiAgfSksIFsndmFsaWRhdGlvblZhbHVlJywgJ2RpcnR5JywgJ2FwcGVuZElubmVySWNvbiddKSxcbiAgLi4ubWFrZVRyYW5zaXRpb25Qcm9wcyh7XG4gICAgdHJhbnNpdGlvbjoge1xuICAgICAgY29tcG9uZW50OiBWRGlhbG9nVHJhbnNpdGlvblxuICAgIH1cbiAgfSlcbn0sICdWU2VsZWN0Jyk7XG5leHBvcnQgY29uc3QgVlNlbGVjdCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWU2VsZWN0JyxcbiAgcHJvcHM6IG1ha2VWU2VsZWN0UHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOmZvY3VzZWQnOiBmb2N1c2VkID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptZW51JzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0XG4gICAgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IHZUZXh0RmllbGRSZWYgPSByZWYoKTtcbiAgICBjb25zdCB2TWVudVJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHZWaXJ0dWFsU2Nyb2xsUmVmID0gcmVmKCk7XG4gICAgY29uc3QgX21lbnUgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtZW51Jyk7XG4gICAgY29uc3QgbWVudSA9IGNvbXB1dGVkKHtcbiAgICAgIGdldDogKCkgPT4gX21lbnUudmFsdWUsXG4gICAgICBzZXQ6IHYgPT4ge1xuICAgICAgICBpZiAoX21lbnUudmFsdWUgJiYgIXYgJiYgdk1lbnVSZWYudmFsdWU/Ls6ob3BlbkNoaWxkcmVuKSByZXR1cm47XG4gICAgICAgIF9tZW51LnZhbHVlID0gdjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBpdGVtcyxcbiAgICAgIHRyYW5zZm9ybUluLFxuICAgICAgdHJhbnNmb3JtT3V0XG4gICAgfSA9IHVzZUl0ZW1zKHByb3BzKTtcbiAgICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnLCBbXSwgdiA9PiB0cmFuc2Zvcm1Jbih2ID09PSBudWxsID8gW251bGxdIDogd3JhcEluQXJyYXkodikpLCB2ID0+IHtcbiAgICAgIGNvbnN0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtT3V0KHYpO1xuICAgICAgcmV0dXJuIHByb3BzLm11bHRpcGxlID8gdHJhbnNmb3JtZWQgOiB0cmFuc2Zvcm1lZFswXSA/PyBudWxsO1xuICAgIH0pO1xuICAgIGNvbnN0IGZvcm0gPSB1c2VGb3JtKCk7XG4gICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZXMgPSBjb21wdXRlZCgoKSA9PiBtb2RlbC52YWx1ZS5tYXAoc2VsZWN0aW9uID0+IHNlbGVjdGlvbi52YWx1ZSkpO1xuICAgIGNvbnN0IGlzRm9jdXNlZCA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIGNvbnN0IGxhYmVsID0gY29tcHV0ZWQoKCkgPT4gbWVudS52YWx1ZSA/IHByb3BzLmNsb3NlVGV4dCA6IHByb3BzLm9wZW5UZXh0KTtcbiAgICBsZXQga2V5Ym9hcmRMb29rdXBQcmVmaXggPSAnJztcbiAgICBsZXQga2V5Ym9hcmRMb29rdXBMYXN0VGltZTtcbiAgICBjb25zdCBkaXNwbGF5SXRlbXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMuaGlkZVNlbGVjdGVkKSB7XG4gICAgICAgIHJldHVybiBpdGVtcy52YWx1ZS5maWx0ZXIoaXRlbSA9PiAhbW9kZWwudmFsdWUuc29tZShzID0+IHMgPT09IGl0ZW0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtcy52YWx1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBtZW51RGlzYWJsZWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5oaWRlTm9EYXRhICYmICFpdGVtcy52YWx1ZS5sZW5ndGggfHwgcHJvcHMucmVhZG9ubHkgfHwgZm9ybT8uaXNSZWFkb25seS52YWx1ZSk7XG4gICAgY29uc3QgbGlzdFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHtcbiAgICAgIG9uTGlzdFNjcm9sbCxcbiAgICAgIG9uTGlzdEtleWRvd25cbiAgICB9ID0gdXNlU2Nyb2xsaW5nKGxpc3RSZWYsIHZUZXh0RmllbGRSZWYpO1xuICAgIGZ1bmN0aW9uIG9uQ2xlYXIoZSkge1xuICAgICAgaWYgKHByb3BzLm9wZW5PbkNsZWFyKSB7XG4gICAgICAgIG1lbnUudmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbk1vdXNlZG93bkNvbnRyb2woKSB7XG4gICAgICBpZiAobWVudURpc2FibGVkLnZhbHVlKSByZXR1cm47XG4gICAgICBtZW51LnZhbHVlID0gIW1lbnUudmFsdWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uS2V5ZG93bihlKSB7XG4gICAgICBpZiAoIWUua2V5IHx8IHByb3BzLnJlYWRvbmx5IHx8IGZvcm0/LmlzUmVhZG9ubHkudmFsdWUpIHJldHVybjtcbiAgICAgIGlmIChbJ0VudGVyJywgJyAnLCAnQXJyb3dEb3duJywgJ0Fycm93VXAnLCAnSG9tZScsICdFbmQnXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgaWYgKFsnRW50ZXInLCAnQXJyb3dEb3duJywgJyAnXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgbWVudS52YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoWydFc2NhcGUnLCAnVGFiJ10uaW5jbHVkZXMoZS5rZXkpKSB7XG4gICAgICAgIG1lbnUudmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChlLmtleSA9PT0gJ0hvbWUnKSB7XG4gICAgICAgIGxpc3RSZWYudmFsdWU/LmZvY3VzKCdmaXJzdCcpO1xuICAgICAgfSBlbHNlIGlmIChlLmtleSA9PT0gJ0VuZCcpIHtcbiAgICAgICAgbGlzdFJlZi52YWx1ZT8uZm9jdXMoJ2xhc3QnKTtcbiAgICAgIH1cblxuICAgICAgLy8gaHRtbCBzZWxlY3QgaG90a2V5c1xuICAgICAgY29uc3QgS0VZQk9BUkRfTE9PS1VQX1RIUkVTSE9MRCA9IDEwMDA7IC8vIG1pbGxpc2Vjb25kc1xuXG4gICAgICBmdW5jdGlvbiBjaGVja1ByaW50YWJsZShlKSB7XG4gICAgICAgIGNvbnN0IGlzUHJpbnRhYmxlQ2hhciA9IGUua2V5Lmxlbmd0aCA9PT0gMTtcbiAgICAgICAgY29uc3Qgbm9Nb2RpZmllciA9ICFlLmN0cmxLZXkgJiYgIWUubWV0YUtleSAmJiAhZS5hbHRLZXk7XG4gICAgICAgIHJldHVybiBpc1ByaW50YWJsZUNoYXIgJiYgbm9Nb2RpZmllcjtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5tdWx0aXBsZSB8fCAhY2hlY2tQcmludGFibGUoZSkpIHJldHVybjtcbiAgICAgIGNvbnN0IG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgaWYgKG5vdyAtIGtleWJvYXJkTG9va3VwTGFzdFRpbWUgPiBLRVlCT0FSRF9MT09LVVBfVEhSRVNIT0xEKSB7XG4gICAgICAgIGtleWJvYXJkTG9va3VwUHJlZml4ID0gJyc7XG4gICAgICB9XG4gICAgICBrZXlib2FyZExvb2t1cFByZWZpeCArPSBlLmtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAga2V5Ym9hcmRMb29rdXBMYXN0VGltZSA9IG5vdztcbiAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtcy52YWx1ZS5maW5kKGl0ZW0gPT4gaXRlbS50aXRsZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoa2V5Ym9hcmRMb29rdXBQcmVmaXgpKTtcbiAgICAgIGlmIChpdGVtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbW9kZWwudmFsdWUgPSBbaXRlbV07XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNlbGVjdChpdGVtKSB7XG4gICAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBtb2RlbC52YWx1ZS5maW5kSW5kZXgoc2VsZWN0aW9uID0+IHByb3BzLnZhbHVlQ29tcGFyYXRvcihzZWxlY3Rpb24udmFsdWUsIGl0ZW0udmFsdWUpKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgIG1vZGVsLnZhbHVlID0gWy4uLm1vZGVsLnZhbHVlLCBpdGVtXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IFsuLi5tb2RlbC52YWx1ZV07XG4gICAgICAgICAgdmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICBtb2RlbC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb2RlbC52YWx1ZSA9IFtpdGVtXTtcbiAgICAgICAgbWVudS52YWx1ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkJsdXIoZSkge1xuICAgICAgaWYgKCFsaXN0UmVmLnZhbHVlPy4kZWwuY29udGFpbnMoZS5yZWxhdGVkVGFyZ2V0KSkge1xuICAgICAgICBtZW51LnZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQWZ0ZXJMZWF2ZSgpIHtcbiAgICAgIGlmIChpc0ZvY3VzZWQudmFsdWUpIHtcbiAgICAgICAgdlRleHRGaWVsZFJlZi52YWx1ZT8uZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25Gb2N1c2luKGUpIHtcbiAgICAgIGlzRm9jdXNlZC52YWx1ZSA9IHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uTW9kZWxVcGRhdGUodikge1xuICAgICAgaWYgKHYgPT0gbnVsbCkgbW9kZWwudmFsdWUgPSBbXTtlbHNlIGlmIChtYXRjaGVzU2VsZWN0b3IodlRleHRGaWVsZFJlZi52YWx1ZSwgJzphdXRvZmlsbCcpIHx8IG1hdGNoZXNTZWxlY3Rvcih2VGV4dEZpZWxkUmVmLnZhbHVlLCAnOi13ZWJraXQtYXV0b2ZpbGwnKSkge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbXMudmFsdWUuZmluZChpdGVtID0+IGl0ZW0udGl0bGUgPT09IHYpO1xuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgIHNlbGVjdChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh2VGV4dEZpZWxkUmVmLnZhbHVlKSB7XG4gICAgICAgIHZUZXh0RmllbGRSZWYudmFsdWUudmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICB9XG4gICAgd2F0Y2gobWVudSwgKCkgPT4ge1xuICAgICAgaWYgKCFwcm9wcy5oaWRlU2VsZWN0ZWQgJiYgbWVudS52YWx1ZSAmJiBtb2RlbC52YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBkaXNwbGF5SXRlbXMudmFsdWUuZmluZEluZGV4KGl0ZW0gPT4gbW9kZWwudmFsdWUuc29tZShzID0+IHByb3BzLnZhbHVlQ29tcGFyYXRvcihzLnZhbHVlLCBpdGVtLnZhbHVlKSkpO1xuICAgICAgICBJTl9CUk9XU0VSICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGluZGV4ID49IDAgJiYgdlZpcnR1YWxTY3JvbGxSZWYudmFsdWU/LnNjcm9sbFRvSW5kZXgoaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaGFzQ2hpcHMgPSAhIShwcm9wcy5jaGlwcyB8fCBzbG90cy5jaGlwKTtcbiAgICAgIGNvbnN0IGhhc0xpc3QgPSAhISghcHJvcHMuaGlkZU5vRGF0YSB8fCBkaXNwbGF5SXRlbXMudmFsdWUubGVuZ3RoIHx8IHNsb3RzWydwcmVwZW5kLWl0ZW0nXSB8fCBzbG90c1snYXBwZW5kLWl0ZW0nXSB8fCBzbG90c1snbm8tZGF0YSddKTtcbiAgICAgIGNvbnN0IGlzRGlydHkgPSBtb2RlbC52YWx1ZS5sZW5ndGggPiAwO1xuICAgICAgY29uc3QgW3RleHRGaWVsZFByb3BzXSA9IFZUZXh0RmllbGQuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSBpc0RpcnR5IHx8ICFpc0ZvY3VzZWQudmFsdWUgJiYgcHJvcHMubGFiZWwgJiYgIXByb3BzLnBlcnNpc3RlbnRQbGFjZWhvbGRlciA/IHVuZGVmaW5lZCA6IHByb3BzLnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWVGV4dEZpZWxkLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwicmVmXCI6IHZUZXh0RmllbGRSZWZcbiAgICAgIH0sIHRleHRGaWVsZFByb3BzLCB7XG4gICAgICAgIFwibW9kZWxWYWx1ZVwiOiBtb2RlbC52YWx1ZS5tYXAodiA9PiB2LnByb3BzLnZhbHVlKS5qb2luKCcsICcpLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogb25Nb2RlbFVwZGF0ZSxcbiAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZC52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTpmb2N1c2VkXCI6ICRldmVudCA9PiBpc0ZvY3VzZWQudmFsdWUgPSAkZXZlbnQsXG4gICAgICAgIFwidmFsaWRhdGlvblZhbHVlXCI6IG1vZGVsLmV4dGVybmFsVmFsdWUsXG4gICAgICAgIFwiY291bnRlclZhbHVlXCI6IG1vZGVsLnZhbHVlLmxlbmd0aCxcbiAgICAgICAgXCJkaXJ0eVwiOiBpc0RpcnR5LFxuICAgICAgICBcImNsYXNzXCI6IFsndi1zZWxlY3QnLCB7XG4gICAgICAgICAgJ3Ytc2VsZWN0LS1hY3RpdmUtbWVudSc6IG1lbnUudmFsdWUsXG4gICAgICAgICAgJ3Ytc2VsZWN0LS1jaGlwcyc6ICEhcHJvcHMuY2hpcHMsXG4gICAgICAgICAgW2B2LXNlbGVjdC0tJHtwcm9wcy5tdWx0aXBsZSA/ICdtdWx0aXBsZScgOiAnc2luZ2xlJ31gXTogdHJ1ZSxcbiAgICAgICAgICAndi1zZWxlY3QtLXNlbGVjdGVkJzogbW9kZWwudmFsdWUubGVuZ3RoLFxuICAgICAgICAgICd2LXNlbGVjdC0tc2VsZWN0aW9uLXNsb3QnOiAhIXNsb3RzLnNlbGVjdGlvblxuICAgICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGUsXG4gICAgICAgIFwiaW5wdXRtb2RlXCI6IFwibm9uZVwiLFxuICAgICAgICBcInBsYWNlaG9sZGVyXCI6IHBsYWNlaG9sZGVyLFxuICAgICAgICBcIm9uQ2xpY2s6Y2xlYXJcIjogb25DbGVhcixcbiAgICAgICAgXCJvbk1vdXNlZG93bjpjb250cm9sXCI6IG9uTW91c2Vkb3duQ29udHJvbCxcbiAgICAgICAgXCJvbkJsdXJcIjogb25CbHVyLFxuICAgICAgICBcIm9uS2V5ZG93blwiOiBvbktleWRvd24sXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0KGxhYmVsLnZhbHVlKSxcbiAgICAgICAgXCJ0aXRsZVwiOiB0KGxhYmVsLnZhbHVlKVxuICAgICAgfSksIHtcbiAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtfY3JlYXRlVk5vZGUoVk1lbnUsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICBcInJlZlwiOiB2TWVudVJlZixcbiAgICAgICAgICBcIm1vZGVsVmFsdWVcIjogbWVudS52YWx1ZSxcbiAgICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IG1lbnUudmFsdWUgPSAkZXZlbnQsXG4gICAgICAgICAgXCJhY3RpdmF0b3JcIjogXCJwYXJlbnRcIixcbiAgICAgICAgICBcImNvbnRlbnRDbGFzc1wiOiBcInYtc2VsZWN0X19jb250ZW50XCIsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiBtZW51RGlzYWJsZWQudmFsdWUsXG4gICAgICAgICAgXCJlYWdlclwiOiBwcm9wcy5lYWdlcixcbiAgICAgICAgICBcIm1heEhlaWdodFwiOiAzMTAsXG4gICAgICAgICAgXCJvcGVuT25DbGlja1wiOiBmYWxzZSxcbiAgICAgICAgICBcImNsb3NlT25Db250ZW50Q2xpY2tcIjogZmFsc2UsXG4gICAgICAgICAgXCJ0cmFuc2l0aW9uXCI6IHByb3BzLnRyYW5zaXRpb24sXG4gICAgICAgICAgXCJvbkFmdGVyTGVhdmVcIjogb25BZnRlckxlYXZlXG4gICAgICAgIH0sIHByb3BzLm1lbnVQcm9wcyksIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbaGFzTGlzdCAmJiBfY3JlYXRlVk5vZGUoVkxpc3QsIHtcbiAgICAgICAgICAgIFwicmVmXCI6IGxpc3RSZWYsXG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6IHNlbGVjdGVkVmFsdWVzLnZhbHVlLFxuICAgICAgICAgICAgXCJzZWxlY3RTdHJhdGVneVwiOiBwcm9wcy5tdWx0aXBsZSA/ICdpbmRlcGVuZGVudCcgOiAnc2luZ2xlLWluZGVwZW5kZW50JyxcbiAgICAgICAgICAgIFwib25Nb3VzZWRvd25cIjogZSA9PiBlLnByZXZlbnREZWZhdWx0KCksXG4gICAgICAgICAgICBcIm9uS2V5ZG93blwiOiBvbkxpc3RLZXlkb3duLFxuICAgICAgICAgICAgXCJvbkZvY3VzaW5cIjogb25Gb2N1c2luLFxuICAgICAgICAgICAgXCJvblNjcm9sbFBhc3NpdmVcIjogb25MaXN0U2Nyb2xsLFxuICAgICAgICAgICAgXCJ0YWJpbmRleFwiOiBcIi0xXCIsXG4gICAgICAgICAgICBcImNvbG9yXCI6IHByb3BzLml0ZW1Db2xvciA/PyBwcm9wcy5jb2xvclxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90c1sncHJlcGVuZC1pdGVtJ10/LigpLCAhZGlzcGxheUl0ZW1zLnZhbHVlLmxlbmd0aCAmJiAhcHJvcHMuaGlkZU5vRGF0YSAmJiAoc2xvdHNbJ25vLWRhdGEnXT8uKCkgPz8gX2NyZWF0ZVZOb2RlKFZMaXN0SXRlbSwge1xuICAgICAgICAgICAgICBcInRpdGxlXCI6IHQocHJvcHMubm9EYXRhVGV4dClcbiAgICAgICAgICAgIH0sIG51bGwpKSwgX2NyZWF0ZVZOb2RlKFZWaXJ0dWFsU2Nyb2xsLCB7XG4gICAgICAgICAgICAgIFwicmVmXCI6IHZWaXJ0dWFsU2Nyb2xsUmVmLFxuICAgICAgICAgICAgICBcInJlbmRlcmxlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgXCJpdGVtc1wiOiBkaXNwbGF5SXRlbXMudmFsdWVcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogX3JlZjIgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICBpdGVtUmVmXG4gICAgICAgICAgICAgICAgfSA9IF9yZWYyO1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1Qcm9wcyA9IG1lcmdlUHJvcHMoaXRlbS5wcm9wcywge1xuICAgICAgICAgICAgICAgICAgcmVmOiBpdGVtUmVmLFxuICAgICAgICAgICAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHNlbGVjdChpdGVtKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBzbG90cy5pdGVtPy4oe1xuICAgICAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgcHJvcHM6IGl0ZW1Qcm9wc1xuICAgICAgICAgICAgICAgIH0pID8/IF9jcmVhdGVWTm9kZShWTGlzdEl0ZW0sIGl0ZW1Qcm9wcywge1xuICAgICAgICAgICAgICAgICAgcHJlcGVuZDogX3JlZjMgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgfSA9IF9yZWYzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Byb3BzLm11bHRpcGxlICYmICFwcm9wcy5oaWRlU2VsZWN0ZWQgPyBfY3JlYXRlVk5vZGUoVkNoZWNrYm94QnRuLCB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogaXRlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBcIm1vZGVsVmFsdWVcIjogaXNTZWxlY3RlZCxcbiAgICAgICAgICAgICAgICAgICAgICBcInJpcHBsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICBcInRhYmluZGV4XCI6IFwiLTFcIlxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKSA6IHVuZGVmaW5lZCwgaXRlbS5wcm9wcy5wcmVwZW5kSWNvbiAmJiBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogaXRlbS5wcm9wcy5wcmVwZW5kSWNvblxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSwgc2xvdHNbJ2FwcGVuZC1pdGVtJ10/LigpXVxuICAgICAgICAgIH0pXVxuICAgICAgICB9KSwgbW9kZWwudmFsdWUubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGZ1bmN0aW9uIG9uQ2hpcENsb3NlKGUpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBzZWxlY3QoaXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHNsb3RQcm9wcyA9IHtcbiAgICAgICAgICAgICdvbkNsaWNrOmNsb3NlJzogb25DaGlwQ2xvc2UsXG4gICAgICAgICAgICBvbk1vdXNlZG93bihlKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtb2RlbFZhbHVlOiB0cnVlLFxuICAgICAgICAgICAgJ29uVXBkYXRlOm1vZGVsVmFsdWUnOiB1bmRlZmluZWRcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJrZXlcIjogaXRlbS52YWx1ZSxcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXNlbGVjdF9fc2VsZWN0aW9uXCJcbiAgICAgICAgICB9LCBbaGFzQ2hpcHMgPyAhc2xvdHMuY2hpcCA/IF9jcmVhdGVWTm9kZShWQ2hpcCwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgICAgXCJrZXlcIjogXCJjaGlwXCIsXG4gICAgICAgICAgICBcImNsb3NhYmxlXCI6IHByb3BzLmNsb3NhYmxlQ2hpcHMsXG4gICAgICAgICAgICBcInNpemVcIjogXCJzbWFsbFwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IGl0ZW0udGl0bGUsXG4gICAgICAgICAgICBcImRpc2FibGVkXCI6IGl0ZW0ucHJvcHMuZGlzYWJsZWRcbiAgICAgICAgICB9LCBzbG90UHJvcHMpLCBudWxsKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgICAgXCJrZXlcIjogXCJjaGlwLWRlZmF1bHRzXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgICAgVkNoaXA6IHtcbiAgICAgICAgICAgICAgICBjbG9zYWJsZTogcHJvcHMuY2xvc2FibGVDaGlwcyxcbiAgICAgICAgICAgICAgICBzaXplOiAnc21hbGwnLFxuICAgICAgICAgICAgICAgIHRleHQ6IGl0ZW0udGl0bGVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy5jaGlwPy4oe1xuICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgcHJvcHM6IHNsb3RQcm9wc1xuICAgICAgICAgICAgfSldXG4gICAgICAgICAgfSkgOiBzbG90cy5zZWxlY3Rpb24/Lih7XG4gICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICB9KSA/PyBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXNlbGVjdF9fc2VsZWN0aW9uLXRleHRcIlxuICAgICAgICAgIH0sIFtpdGVtLnRpdGxlLCBwcm9wcy5tdWx0aXBsZSAmJiBpbmRleCA8IG1vZGVsLnZhbHVlLmxlbmd0aCAtIDEgJiYgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwidi1zZWxlY3RfX3NlbGVjdGlvbi1jb21tYVwiXG4gICAgICAgICAgfSwgW19jcmVhdGVUZXh0Vk5vZGUoXCIsXCIpXSldKV0pO1xuICAgICAgICB9KV0pLFxuICAgICAgICAnYXBwZW5kLWlubmVyJzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtzbG90c1snYXBwZW5kLWlubmVyJ10/LiguLi5hcmdzKSwgcHJvcHMubWVudUljb24gPyBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXNlbGVjdF9fbWVudS1pY29uXCIsXG4gICAgICAgICAgICBcImljb25cIjogcHJvcHMubWVudUljb25cbiAgICAgICAgICB9LCBudWxsKSA6IHVuZGVmaW5lZF0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm9yd2FyZFJlZnMoe1xuICAgICAgaXNGb2N1c2VkLFxuICAgICAgbWVudSxcbiAgICAgIHNlbGVjdFxuICAgIH0sIHZUZXh0RmllbGRSZWYpO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZTZWxlY3QubWpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlIG1heC1zdGF0ZW1lbnRzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1sYWJlbHMgKi9cblxuLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgcmVmLCB1bnJlZiwgd2F0Y2hFZmZlY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2V0UHJvcGVydHlGcm9tSXRlbSwgcHJvcHNGYWN0b3J5LCB3cmFwSW5BcnJheSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuLy8gQ29tcG9zYWJsZXNcbmV4cG9ydCBjb25zdCBkZWZhdWx0RmlsdGVyID0gKHZhbHVlLCBxdWVyeSwgaXRlbSkgPT4ge1xuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBxdWVyeSA9PSBudWxsKSByZXR1cm4gLTE7XG4gIHJldHVybiB2YWx1ZS50b1N0cmluZygpLnRvTG9jYWxlTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeS50b1N0cmluZygpLnRvTG9jYWxlTG93ZXJDYXNlKCkpO1xufTtcbmV4cG9ydCBjb25zdCBtYWtlRmlsdGVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjdXN0b21GaWx0ZXI6IEZ1bmN0aW9uLFxuICBjdXN0b21LZXlGaWx0ZXI6IE9iamVjdCxcbiAgZmlsdGVyS2V5czogW0FycmF5LCBTdHJpbmddLFxuICBmaWx0ZXJNb2RlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdpbnRlcnNlY3Rpb24nXG4gIH0sXG4gIG5vRmlsdGVyOiBCb29sZWFuXG59LCAnZmlsdGVyJyk7XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVySXRlbXMoaXRlbXMsIHF1ZXJ5LCBvcHRpb25zKSB7XG4gIGNvbnN0IGFycmF5ID0gW107XG4gIC8vIGFsd2F5cyBlbnN1cmUgd2UgZmFsbCBiYWNrIHRvIGEgZnVuY3Rpb25pbmcgZmlsdGVyXG4gIGNvbnN0IGZpbHRlciA9IG9wdGlvbnM/LmRlZmF1bHQgPz8gZGVmYXVsdEZpbHRlcjtcbiAgY29uc3Qga2V5cyA9IG9wdGlvbnM/LmZpbHRlcktleXMgPyB3cmFwSW5BcnJheShvcHRpb25zLmZpbHRlcktleXMpIDogZmFsc2U7XG4gIGNvbnN0IGN1c3RvbUZpbHRlcnNMZW5ndGggPSBPYmplY3Qua2V5cyhvcHRpb25zPy5jdXN0b21LZXlGaWx0ZXIgPz8ge30pLmxlbmd0aDtcbiAgaWYgKCFpdGVtcz8ubGVuZ3RoKSByZXR1cm4gYXJyYXk7XG4gIGxvb3A6IGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBbaXRlbSwgdHJhbnNmb3JtZWQgPSBpdGVtXSA9IHdyYXBJbkFycmF5KGl0ZW1zW2ldKTtcbiAgICBjb25zdCBjdXN0b21NYXRjaGVzID0ge307XG4gICAgY29uc3QgZGVmYXVsdE1hdGNoZXMgPSB7fTtcbiAgICBsZXQgbWF0Y2ggPSAtMTtcbiAgICBpZiAocXVlcnkgJiYgIW9wdGlvbnM/Lm5vRmlsdGVyKSB7XG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcktleXMgPSBrZXlzIHx8IE9iamVjdC5rZXlzKHRyYW5zZm9ybWVkKTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgZmlsdGVyS2V5cykge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0UHJvcGVydHlGcm9tSXRlbSh0cmFuc2Zvcm1lZCwga2V5LCB0cmFuc2Zvcm1lZCk7XG4gICAgICAgICAgY29uc3Qga2V5RmlsdGVyID0gb3B0aW9ucz8uY3VzdG9tS2V5RmlsdGVyPy5ba2V5XTtcbiAgICAgICAgICBtYXRjaCA9IGtleUZpbHRlciA/IGtleUZpbHRlcih2YWx1ZSwgcXVlcnksIGl0ZW0pIDogZmlsdGVyKHZhbHVlLCBxdWVyeSwgaXRlbSk7XG4gICAgICAgICAgaWYgKG1hdGNoICE9PSAtMSAmJiBtYXRjaCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChrZXlGaWx0ZXIpIGN1c3RvbU1hdGNoZXNba2V5XSA9IG1hdGNoO2Vsc2UgZGVmYXVsdE1hdGNoZXNba2V5XSA9IG1hdGNoO1xuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucz8uZmlsdGVyTW9kZSA9PT0gJ2V2ZXJ5Jykge1xuICAgICAgICAgICAgY29udGludWUgbG9vcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hdGNoID0gZmlsdGVyKGl0ZW0sIHF1ZXJ5LCBpdGVtKTtcbiAgICAgICAgaWYgKG1hdGNoICE9PSAtMSAmJiBtYXRjaCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBkZWZhdWx0TWF0Y2hlcy50aXRsZSA9IG1hdGNoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBkZWZhdWx0TWF0Y2hlc0xlbmd0aCA9IE9iamVjdC5rZXlzKGRlZmF1bHRNYXRjaGVzKS5sZW5ndGg7XG4gICAgICBjb25zdCBjdXN0b21NYXRjaGVzTGVuZ3RoID0gT2JqZWN0LmtleXMoY3VzdG9tTWF0Y2hlcykubGVuZ3RoO1xuICAgICAgaWYgKCFkZWZhdWx0TWF0Y2hlc0xlbmd0aCAmJiAhY3VzdG9tTWF0Y2hlc0xlbmd0aCkgY29udGludWU7XG4gICAgICBpZiAob3B0aW9ucz8uZmlsdGVyTW9kZSA9PT0gJ3VuaW9uJyAmJiBjdXN0b21NYXRjaGVzTGVuZ3RoICE9PSBjdXN0b21GaWx0ZXJzTGVuZ3RoICYmICFkZWZhdWx0TWF0Y2hlc0xlbmd0aCkgY29udGludWU7XG4gICAgICBpZiAob3B0aW9ucz8uZmlsdGVyTW9kZSA9PT0gJ2ludGVyc2VjdGlvbicgJiYgKGN1c3RvbU1hdGNoZXNMZW5ndGggIT09IGN1c3RvbUZpbHRlcnNMZW5ndGggfHwgIWRlZmF1bHRNYXRjaGVzTGVuZ3RoKSkgY29udGludWU7XG4gICAgfVxuICAgIGFycmF5LnB1c2goe1xuICAgICAgaW5kZXg6IGksXG4gICAgICBtYXRjaGVzOiB7XG4gICAgICAgIC4uLmRlZmF1bHRNYXRjaGVzLFxuICAgICAgICAuLi5jdXN0b21NYXRjaGVzXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZUZpbHRlcihwcm9wcywgaXRlbXMsIHF1ZXJ5LCBvcHRpb25zKSB7XG4gIGNvbnN0IGZpbHRlcmVkSXRlbXMgPSByZWYoW10pO1xuICBjb25zdCBmaWx0ZXJlZE1hdGNoZXMgPSByZWYobmV3IE1hcCgpKTtcbiAgY29uc3QgdHJhbnNmb3JtZWRJdGVtcyA9IGNvbXB1dGVkKCgpID0+IG9wdGlvbnM/LnRyYW5zZm9ybSA/IHVucmVmKGl0ZW1zKS5tYXAoaXRlbSA9PiBbaXRlbSwgb3B0aW9ucy50cmFuc2Zvcm0oaXRlbSldKSA6IHVucmVmKGl0ZW1zKSk7XG4gIHdhdGNoRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBfcXVlcnkgPSB0eXBlb2YgcXVlcnkgPT09ICdmdW5jdGlvbicgPyBxdWVyeSgpIDogdW5yZWYocXVlcnkpO1xuICAgIGNvbnN0IHN0clF1ZXJ5ID0gdHlwZW9mIF9xdWVyeSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIF9xdWVyeSAhPT0gJ251bWJlcicgPyAnJyA6IFN0cmluZyhfcXVlcnkpO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBmaWx0ZXJJdGVtcyh0cmFuc2Zvcm1lZEl0ZW1zLnZhbHVlLCBzdHJRdWVyeSwge1xuICAgICAgY3VzdG9tS2V5RmlsdGVyOiBwcm9wcy5jdXN0b21LZXlGaWx0ZXIsXG4gICAgICBkZWZhdWx0OiBwcm9wcy5jdXN0b21GaWx0ZXIsXG4gICAgICBmaWx0ZXJLZXlzOiBwcm9wcy5maWx0ZXJLZXlzLFxuICAgICAgZmlsdGVyTW9kZTogcHJvcHMuZmlsdGVyTW9kZSxcbiAgICAgIG5vRmlsdGVyOiBwcm9wcy5ub0ZpbHRlclxuICAgIH0pO1xuICAgIGNvbnN0IG9yaWdpbmFsSXRlbXMgPSB1bnJlZihpdGVtcyk7XG4gICAgY29uc3QgX2ZpbHRlcmVkSXRlbXMgPSBbXTtcbiAgICBjb25zdCBfZmlsdGVyZWRNYXRjaGVzID0gbmV3IE1hcCgpO1xuICAgIHJlc3VsdHMuZm9yRWFjaChfcmVmID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGluZGV4LFxuICAgICAgICBtYXRjaGVzXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIGNvbnN0IGl0ZW0gPSBvcmlnaW5hbEl0ZW1zW2luZGV4XTtcbiAgICAgIF9maWx0ZXJlZEl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICBfZmlsdGVyZWRNYXRjaGVzLnNldChpdGVtLnZhbHVlLCBtYXRjaGVzKTtcbiAgICB9KTtcbiAgICBmaWx0ZXJlZEl0ZW1zLnZhbHVlID0gX2ZpbHRlcmVkSXRlbXM7XG4gICAgZmlsdGVyZWRNYXRjaGVzLnZhbHVlID0gX2ZpbHRlcmVkTWF0Y2hlcztcbiAgfSk7XG4gIGZ1bmN0aW9uIGdldE1hdGNoZXMoaXRlbSkge1xuICAgIHJldHVybiBmaWx0ZXJlZE1hdGNoZXMudmFsdWUuZ2V0KGl0ZW0udmFsdWUpO1xuICB9XG4gIHJldHVybiB7XG4gICAgZmlsdGVyZWRJdGVtcyxcbiAgICBmaWx0ZXJlZE1hdGNoZXMsXG4gICAgZ2V0TWF0Y2hlc1xuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkF1dG9jb21wbGV0ZS5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkNoZWNrYm94QnRuIH0gZnJvbSBcIi4uL1ZDaGVja2JveC9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZDaGlwIH0gZnJvbSBcIi4uL1ZDaGlwL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gXCIuLi9WSWNvbi9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZMaXN0LCBWTGlzdEl0ZW0gfSBmcm9tIFwiLi4vVkxpc3QvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWTWVudSB9IGZyb20gXCIuLi9WTWVudS9pbmRleC5tanNcIjtcbmltcG9ydCB7IG1ha2VTZWxlY3RQcm9wcyB9IGZyb20gXCIuLi9WU2VsZWN0L1ZTZWxlY3QubWpzXCI7XG5pbXBvcnQgeyBtYWtlVlRleHRGaWVsZFByb3BzLCBWVGV4dEZpZWxkIH0gZnJvbSBcIi4uL1ZUZXh0RmllbGQvVlRleHRGaWVsZC5tanNcIjtcbmltcG9ydCB7IFZWaXJ0dWFsU2Nyb2xsIH0gZnJvbSBcIi4uL1ZWaXJ0dWFsU2Nyb2xsL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlU2Nyb2xsaW5nIH0gZnJvbSBcIi4uL1ZTZWxlY3QvdXNlU2Nyb2xsaW5nLm1qc1wiO1xuaW1wb3J0IHsgdXNlVGV4dENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUZpbHRlclByb3BzLCB1c2VGaWx0ZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZmlsdGVyLm1qc1wiO1xuaW1wb3J0IHsgdXNlRm9ybSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb3JtLm1qc1wiO1xuaW1wb3J0IHsgZm9yd2FyZFJlZnMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9yd2FyZFJlZnMubWpzXCI7XG5pbXBvcnQgeyB1c2VJdGVtcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9saXN0LWl0ZW1zLm1qc1wiO1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7XG5pbXBvcnQgeyBtYWtlVHJhbnNpdGlvblByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RyYW5zaXRpb24ubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG1lcmdlUHJvcHMsIG5leHRUaWNrLCByZWYsIHNoYWxsb3dSZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIElOX0JST1dTRVIsIG1hdGNoZXNTZWxlY3Rvciwgbm9vcCwgb21pdCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIsIHdyYXBJbkFycmF5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5mdW5jdGlvbiBoaWdobGlnaHRSZXN1bHQodGV4dCwgbWF0Y2hlcywgbGVuZ3RoKSB7XG4gIGlmIChtYXRjaGVzID09IG51bGwpIHJldHVybiB0ZXh0O1xuICBpZiAoQXJyYXkuaXNBcnJheShtYXRjaGVzKSkgdGhyb3cgbmV3IEVycm9yKCdNdWx0aXBsZSBtYXRjaGVzIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xuICByZXR1cm4gdHlwZW9mIG1hdGNoZXMgPT09ICdudW1iZXInICYmIH5tYXRjaGVzID8gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW19jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgIFwiY2xhc3NcIjogXCJ2LWF1dG9jb21wbGV0ZV9fdW5tYXNrXCJcbiAgfSwgW3RleHQuc3Vic3RyKDAsIG1hdGNoZXMpXSksIF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgIFwiY2xhc3NcIjogXCJ2LWF1dG9jb21wbGV0ZV9fbWFza1wiXG4gIH0sIFt0ZXh0LnN1YnN0cihtYXRjaGVzLCBsZW5ndGgpXSksIF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgIFwiY2xhc3NcIjogXCJ2LWF1dG9jb21wbGV0ZV9fdW5tYXNrXCJcbiAgfSwgW3RleHQuc3Vic3RyKG1hdGNoZXMgKyBsZW5ndGgpXSldKSA6IHRleHQ7XG59XG5leHBvcnQgY29uc3QgbWFrZVZBdXRvY29tcGxldGVQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGF1dG9TZWxlY3RGaXJzdDoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddXG4gIH0sXG4gIHNlYXJjaDogU3RyaW5nLFxuICAuLi5tYWtlRmlsdGVyUHJvcHMoe1xuICAgIGZpbHRlcktleXM6IFsndGl0bGUnXVxuICB9KSxcbiAgLi4ubWFrZVNlbGVjdFByb3BzKCksXG4gIC4uLm9taXQobWFrZVZUZXh0RmllbGRQcm9wcyh7XG4gICAgbW9kZWxWYWx1ZTogbnVsbCxcbiAgICByb2xlOiAnY29tYm9ib3gnXG4gIH0pLCBbJ3ZhbGlkYXRpb25WYWx1ZScsICdkaXJ0eScsICdhcHBlbmRJbm5lckljb24nXSksXG4gIC4uLm1ha2VUcmFuc2l0aW9uUHJvcHMoe1xuICAgIHRyYW5zaXRpb246IGZhbHNlXG4gIH0pXG59LCAnVkF1dG9jb21wbGV0ZScpO1xuZXhwb3J0IGNvbnN0IFZBdXRvY29tcGxldGUgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkF1dG9jb21wbGV0ZScsXG4gIHByb3BzOiBtYWtlVkF1dG9jb21wbGV0ZVByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTpmb2N1c2VkJzogZm9jdXNlZCA9PiB0cnVlLFxuICAgICd1cGRhdGU6c2VhcmNoJzogdmFsID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptZW51JzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0XG4gICAgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IHZUZXh0RmllbGRSZWYgPSByZWYoKTtcbiAgICBjb25zdCBpc0ZvY3VzZWQgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgICBjb25zdCBpc1ByaXN0aW5lID0gc2hhbGxvd1JlZih0cnVlKTtcbiAgICBjb25zdCBsaXN0SGFzRm9jdXMgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgICBjb25zdCB2TWVudVJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHZWaXJ0dWFsU2Nyb2xsUmVmID0gcmVmKCk7XG4gICAgY29uc3QgX21lbnUgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtZW51Jyk7XG4gICAgY29uc3QgbWVudSA9IGNvbXB1dGVkKHtcbiAgICAgIGdldDogKCkgPT4gX21lbnUudmFsdWUsXG4gICAgICBzZXQ6IHYgPT4ge1xuICAgICAgICBpZiAoX21lbnUudmFsdWUgJiYgIXYgJiYgdk1lbnVSZWYudmFsdWU/Ls6ob3BlbkNoaWxkcmVuKSByZXR1cm47XG4gICAgICAgIF9tZW51LnZhbHVlID0gdjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBzZWxlY3Rpb25JbmRleCA9IHNoYWxsb3dSZWYoLTEpO1xuICAgIGNvbnN0IGNvbG9yID0gY29tcHV0ZWQoKCkgPT4gdlRleHRGaWVsZFJlZi52YWx1ZT8uY29sb3IpO1xuICAgIGNvbnN0IGxhYmVsID0gY29tcHV0ZWQoKCkgPT4gbWVudS52YWx1ZSA/IHByb3BzLmNsb3NlVGV4dCA6IHByb3BzLm9wZW5UZXh0KTtcbiAgICBjb25zdCB7XG4gICAgICBpdGVtcyxcbiAgICAgIHRyYW5zZm9ybUluLFxuICAgICAgdHJhbnNmb3JtT3V0XG4gICAgfSA9IHVzZUl0ZW1zKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcihjb2xvcik7XG4gICAgY29uc3Qgc2VhcmNoID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnc2VhcmNoJywgJycpO1xuICAgIGNvbnN0IG1vZGVsID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScsIFtdLCB2ID0+IHRyYW5zZm9ybUluKHYgPT09IG51bGwgPyBbbnVsbF0gOiB3cmFwSW5BcnJheSh2KSksIHYgPT4ge1xuICAgICAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1PdXQodik7XG4gICAgICByZXR1cm4gcHJvcHMubXVsdGlwbGUgPyB0cmFuc2Zvcm1lZCA6IHRyYW5zZm9ybWVkWzBdID8/IG51bGw7XG4gICAgfSk7XG4gICAgY29uc3QgZm9ybSA9IHVzZUZvcm0oKTtcbiAgICBjb25zdCB7XG4gICAgICBmaWx0ZXJlZEl0ZW1zLFxuICAgICAgZ2V0TWF0Y2hlc1xuICAgIH0gPSB1c2VGaWx0ZXIocHJvcHMsIGl0ZW1zLCAoKSA9PiBpc1ByaXN0aW5lLnZhbHVlID8gJycgOiBzZWFyY2gudmFsdWUpO1xuICAgIGNvbnN0IGRpc3BsYXlJdGVtcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5oaWRlU2VsZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkSXRlbXMudmFsdWUuZmlsdGVyKGZpbHRlcmVkSXRlbSA9PiAhbW9kZWwudmFsdWUuc29tZShzID0+IHMudmFsdWUgPT09IGZpbHRlcmVkSXRlbS52YWx1ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZpbHRlcmVkSXRlbXMudmFsdWU7XG4gICAgfSk7XG4gICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZXMgPSBjb21wdXRlZCgoKSA9PiBtb2RlbC52YWx1ZS5tYXAoc2VsZWN0aW9uID0+IHNlbGVjdGlvbi5wcm9wcy52YWx1ZSkpO1xuICAgIGNvbnN0IGhpZ2hsaWdodEZpcnN0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0Rmlyc3QgPSBwcm9wcy5hdXRvU2VsZWN0Rmlyc3QgPT09IHRydWUgfHwgcHJvcHMuYXV0b1NlbGVjdEZpcnN0ID09PSAnZXhhY3QnICYmIHNlYXJjaC52YWx1ZSA9PT0gZGlzcGxheUl0ZW1zLnZhbHVlWzBdPy50aXRsZTtcbiAgICAgIHJldHVybiBzZWxlY3RGaXJzdCAmJiBkaXNwbGF5SXRlbXMudmFsdWUubGVuZ3RoID4gMCAmJiAhaXNQcmlzdGluZS52YWx1ZSAmJiAhbGlzdEhhc0ZvY3VzLnZhbHVlO1xuICAgIH0pO1xuICAgIGNvbnN0IG1lbnVEaXNhYmxlZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmhpZGVOb0RhdGEgJiYgIWl0ZW1zLnZhbHVlLmxlbmd0aCB8fCBwcm9wcy5yZWFkb25seSB8fCBmb3JtPy5pc1JlYWRvbmx5LnZhbHVlKTtcbiAgICBjb25zdCBsaXN0UmVmID0gcmVmKCk7XG4gICAgY29uc3Qge1xuICAgICAgb25MaXN0U2Nyb2xsLFxuICAgICAgb25MaXN0S2V5ZG93blxuICAgIH0gPSB1c2VTY3JvbGxpbmcobGlzdFJlZiwgdlRleHRGaWVsZFJlZik7XG4gICAgZnVuY3Rpb24gb25DbGVhcihlKSB7XG4gICAgICBpZiAocHJvcHMub3Blbk9uQ2xlYXIpIHtcbiAgICAgICAgbWVudS52YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBzZWFyY2gudmFsdWUgPSAnJztcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Nb3VzZWRvd25Db250cm9sKCkge1xuICAgICAgaWYgKG1lbnVEaXNhYmxlZC52YWx1ZSkgcmV0dXJuO1xuICAgICAgbWVudS52YWx1ZSA9IHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uTW91c2Vkb3duTWVudUljb24oZSkge1xuICAgICAgaWYgKG1lbnVEaXNhYmxlZC52YWx1ZSkgcmV0dXJuO1xuICAgICAgaWYgKGlzRm9jdXNlZC52YWx1ZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgICBtZW51LnZhbHVlID0gIW1lbnUudmFsdWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uS2V5ZG93bihlKSB7XG4gICAgICBpZiAocHJvcHMucmVhZG9ubHkgfHwgZm9ybT8uaXNSZWFkb25seS52YWx1ZSkgcmV0dXJuO1xuICAgICAgY29uc3Qgc2VsZWN0aW9uU3RhcnQgPSB2VGV4dEZpZWxkUmVmLnZhbHVlLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgY29uc3QgbGVuZ3RoID0gbW9kZWwudmFsdWUubGVuZ3RoO1xuICAgICAgaWYgKHNlbGVjdGlvbkluZGV4LnZhbHVlID4gLTEgfHwgWydFbnRlcicsICdBcnJvd0Rvd24nLCAnQXJyb3dVcCddLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBpZiAoWydFbnRlcicsICdBcnJvd0Rvd24nXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgbWVudS52YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoWydFc2NhcGUnXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgbWVudS52YWx1ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGhpZ2hsaWdodEZpcnN0LnZhbHVlICYmIFsnRW50ZXInLCAnVGFiJ10uaW5jbHVkZXMoZS5rZXkpKSB7XG4gICAgICAgIHNlbGVjdChkaXNwbGF5SXRlbXMudmFsdWVbMF0pO1xuICAgICAgfVxuICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dEb3duJyAmJiBoaWdobGlnaHRGaXJzdC52YWx1ZSkge1xuICAgICAgICBsaXN0UmVmLnZhbHVlPy5mb2N1cygnbmV4dCcpO1xuICAgICAgfVxuICAgICAgaWYgKCFwcm9wcy5tdWx0aXBsZSkgcmV0dXJuO1xuICAgICAgaWYgKFsnQmFja3NwYWNlJywgJ0RlbGV0ZSddLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICBpZiAoc2VsZWN0aW9uSW5kZXgudmFsdWUgPCAwKSB7XG4gICAgICAgICAgaWYgKGUua2V5ID09PSAnQmFja3NwYWNlJyAmJiAhc2VhcmNoLnZhbHVlKSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25JbmRleC52YWx1ZSA9IGxlbmd0aCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcmlnaW5hbFNlbGVjdGlvbkluZGV4ID0gc2VsZWN0aW9uSW5kZXgudmFsdWU7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkSXRlbSA9IG1vZGVsLnZhbHVlW3NlbGVjdGlvbkluZGV4LnZhbHVlXTtcbiAgICAgICAgaWYgKHNlbGVjdGVkSXRlbSAmJiAhc2VsZWN0ZWRJdGVtLnByb3BzLmRpc2FibGVkKSBzZWxlY3Qoc2VsZWN0ZWRJdGVtKTtcbiAgICAgICAgc2VsZWN0aW9uSW5kZXgudmFsdWUgPSBvcmlnaW5hbFNlbGVjdGlvbkluZGV4ID49IGxlbmd0aCAtIDEgPyBsZW5ndGggLSAyIDogb3JpZ2luYWxTZWxlY3Rpb25JbmRleDtcbiAgICAgIH1cbiAgICAgIGlmIChlLmtleSA9PT0gJ0Fycm93TGVmdCcpIHtcbiAgICAgICAgaWYgKHNlbGVjdGlvbkluZGV4LnZhbHVlIDwgMCAmJiBzZWxlY3Rpb25TdGFydCA+IDApIHJldHVybjtcbiAgICAgICAgY29uc3QgcHJldiA9IHNlbGVjdGlvbkluZGV4LnZhbHVlID4gLTEgPyBzZWxlY3Rpb25JbmRleC52YWx1ZSAtIDEgOiBsZW5ndGggLSAxO1xuICAgICAgICBpZiAobW9kZWwudmFsdWVbcHJldl0pIHtcbiAgICAgICAgICBzZWxlY3Rpb25JbmRleC52YWx1ZSA9IHByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZWN0aW9uSW5kZXgudmFsdWUgPSAtMTtcbiAgICAgICAgICB2VGV4dEZpZWxkUmVmLnZhbHVlLnNldFNlbGVjdGlvblJhbmdlKHNlYXJjaC52YWx1ZT8ubGVuZ3RoLCBzZWFyY2gudmFsdWU/Lmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlLmtleSA9PT0gJ0Fycm93UmlnaHQnKSB7XG4gICAgICAgIGlmIChzZWxlY3Rpb25JbmRleC52YWx1ZSA8IDApIHJldHVybjtcbiAgICAgICAgY29uc3QgbmV4dCA9IHNlbGVjdGlvbkluZGV4LnZhbHVlICsgMTtcbiAgICAgICAgaWYgKG1vZGVsLnZhbHVlW25leHRdKSB7XG4gICAgICAgICAgc2VsZWN0aW9uSW5kZXgudmFsdWUgPSBuZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGVjdGlvbkluZGV4LnZhbHVlID0gLTE7XG4gICAgICAgICAgdlRleHRGaWVsZFJlZi52YWx1ZS5zZXRTZWxlY3Rpb25SYW5nZSgwLCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbklucHV0KGUpIHtcbiAgICAgIHNlYXJjaC52YWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkNoYW5nZShlKSB7XG4gICAgICBpZiAobWF0Y2hlc1NlbGVjdG9yKHZUZXh0RmllbGRSZWYudmFsdWUsICc6YXV0b2ZpbGwnKSB8fCBtYXRjaGVzU2VsZWN0b3IodlRleHRGaWVsZFJlZi52YWx1ZSwgJzotd2Via2l0LWF1dG9maWxsJykpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zLnZhbHVlLmZpbmQoaXRlbSA9PiBpdGVtLnRpdGxlID09PSBlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgc2VsZWN0KGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQWZ0ZXJMZWF2ZSgpIHtcbiAgICAgIGlmIChpc0ZvY3VzZWQudmFsdWUpIHtcbiAgICAgICAgaXNQcmlzdGluZS52YWx1ZSA9IHRydWU7XG4gICAgICAgIHZUZXh0RmllbGRSZWYudmFsdWU/LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRm9jdXNpbihlKSB7XG4gICAgICBpc0ZvY3VzZWQudmFsdWUgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGxpc3RIYXNGb2N1cy52YWx1ZSA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Gb2N1c291dChlKSB7XG4gICAgICBsaXN0SGFzRm9jdXMudmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25VcGRhdGVNb2RlbFZhbHVlKHYpIHtcbiAgICAgIGlmICh2ID09IG51bGwgfHwgdiA9PT0gJycgJiYgIXByb3BzLm11bHRpcGxlKSBtb2RlbC52YWx1ZSA9IFtdO1xuICAgIH1cbiAgICBjb25zdCBpc1NlbGVjdGluZyA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIGZ1bmN0aW9uIHNlbGVjdChpdGVtKSB7XG4gICAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBtb2RlbC52YWx1ZS5maW5kSW5kZXgoc2VsZWN0aW9uID0+IHByb3BzLnZhbHVlQ29tcGFyYXRvcihzZWxlY3Rpb24udmFsdWUsIGl0ZW0udmFsdWUpKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgIG1vZGVsLnZhbHVlID0gWy4uLm1vZGVsLnZhbHVlLCBpdGVtXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IFsuLi5tb2RlbC52YWx1ZV07XG4gICAgICAgICAgdmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICBtb2RlbC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb2RlbC52YWx1ZSA9IFtpdGVtXTtcbiAgICAgICAgaXNTZWxlY3RpbmcudmFsdWUgPSB0cnVlO1xuICAgICAgICBzZWFyY2gudmFsdWUgPSBpdGVtLnRpdGxlO1xuICAgICAgICBtZW51LnZhbHVlID0gZmFsc2U7XG4gICAgICAgIGlzUHJpc3RpbmUudmFsdWUgPSB0cnVlO1xuICAgICAgICBuZXh0VGljaygoKSA9PiBpc1NlbGVjdGluZy52YWx1ZSA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2F0Y2goaXNGb2N1c2VkLCAodmFsLCBvbGRWYWwpID0+IHtcbiAgICAgIGlmICh2YWwgPT09IG9sZFZhbCkgcmV0dXJuO1xuICAgICAgaWYgKHZhbCkge1xuICAgICAgICBpc1NlbGVjdGluZy52YWx1ZSA9IHRydWU7XG4gICAgICAgIHNlYXJjaC52YWx1ZSA9IHByb3BzLm11bHRpcGxlID8gJycgOiBTdHJpbmcobW9kZWwudmFsdWUuYXQoLTEpPy5wcm9wcy50aXRsZSA/PyAnJyk7XG4gICAgICAgIGlzUHJpc3RpbmUudmFsdWUgPSB0cnVlO1xuICAgICAgICBuZXh0VGljaygoKSA9PiBpc1NlbGVjdGluZy52YWx1ZSA9IGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghcHJvcHMubXVsdGlwbGUgJiYgIXNlYXJjaC52YWx1ZSkgbW9kZWwudmFsdWUgPSBbXTtlbHNlIGlmIChoaWdobGlnaHRGaXJzdC52YWx1ZSAmJiAhbGlzdEhhc0ZvY3VzLnZhbHVlICYmICFtb2RlbC52YWx1ZS5zb21lKF9yZWYyID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09PSBkaXNwbGF5SXRlbXMudmFsdWVbMF0udmFsdWU7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgc2VsZWN0KGRpc3BsYXlJdGVtcy52YWx1ZVswXSk7XG4gICAgICAgIH1cbiAgICAgICAgbWVudS52YWx1ZSA9IGZhbHNlO1xuICAgICAgICBzZWFyY2gudmFsdWUgPSAnJztcbiAgICAgICAgc2VsZWN0aW9uSW5kZXgudmFsdWUgPSAtMTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB3YXRjaChzZWFyY2gsIHZhbCA9PiB7XG4gICAgICBpZiAoIWlzRm9jdXNlZC52YWx1ZSB8fCBpc1NlbGVjdGluZy52YWx1ZSkgcmV0dXJuO1xuICAgICAgaWYgKHZhbCkgbWVudS52YWx1ZSA9IHRydWU7XG4gICAgICBpc1ByaXN0aW5lLnZhbHVlID0gIXZhbDtcbiAgICB9KTtcbiAgICB3YXRjaChtZW51LCAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmhpZGVTZWxlY3RlZCAmJiBtZW51LnZhbHVlICYmIG1vZGVsLnZhbHVlLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IGRpc3BsYXlJdGVtcy52YWx1ZS5maW5kSW5kZXgoaXRlbSA9PiBtb2RlbC52YWx1ZS5zb21lKHMgPT4gaXRlbS52YWx1ZSA9PT0gcy52YWx1ZSkpO1xuICAgICAgICBJTl9CUk9XU0VSICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGluZGV4ID49IDAgJiYgdlZpcnR1YWxTY3JvbGxSZWYudmFsdWU/LnNjcm9sbFRvSW5kZXgoaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaGFzQ2hpcHMgPSAhIShwcm9wcy5jaGlwcyB8fCBzbG90cy5jaGlwKTtcbiAgICAgIGNvbnN0IGhhc0xpc3QgPSAhISghcHJvcHMuaGlkZU5vRGF0YSB8fCBkaXNwbGF5SXRlbXMudmFsdWUubGVuZ3RoIHx8IHNsb3RzWydwcmVwZW5kLWl0ZW0nXSB8fCBzbG90c1snYXBwZW5kLWl0ZW0nXSB8fCBzbG90c1snbm8tZGF0YSddKTtcbiAgICAgIGNvbnN0IGlzRGlydHkgPSBtb2RlbC52YWx1ZS5sZW5ndGggPiAwO1xuICAgICAgY29uc3QgW3RleHRGaWVsZFByb3BzXSA9IFZUZXh0RmllbGQuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWVGV4dEZpZWxkLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwicmVmXCI6IHZUZXh0RmllbGRSZWZcbiAgICAgIH0sIHRleHRGaWVsZFByb3BzLCB7XG4gICAgICAgIFwibW9kZWxWYWx1ZVwiOiBzZWFyY2gudmFsdWUsXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBvblVwZGF0ZU1vZGVsVmFsdWUsXG4gICAgICAgIFwiZm9jdXNlZFwiOiBpc0ZvY3VzZWQudmFsdWUsXG4gICAgICAgIFwib25VcGRhdGU6Zm9jdXNlZFwiOiAkZXZlbnQgPT4gaXNGb2N1c2VkLnZhbHVlID0gJGV2ZW50LFxuICAgICAgICBcInZhbGlkYXRpb25WYWx1ZVwiOiBtb2RlbC5leHRlcm5hbFZhbHVlLFxuICAgICAgICBcImNvdW50ZXJWYWx1ZVwiOiBtb2RlbC52YWx1ZS5sZW5ndGgsXG4gICAgICAgIFwiZGlydHlcIjogaXNEaXJ0eSxcbiAgICAgICAgXCJvbklucHV0XCI6IG9uSW5wdXQsXG4gICAgICAgIFwib25DaGFuZ2VcIjogb25DaGFuZ2UsXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWF1dG9jb21wbGV0ZScsIGB2LWF1dG9jb21wbGV0ZS0tJHtwcm9wcy5tdWx0aXBsZSA/ICdtdWx0aXBsZScgOiAnc2luZ2xlJ31gLCB7XG4gICAgICAgICAgJ3YtYXV0b2NvbXBsZXRlLS1hY3RpdmUtbWVudSc6IG1lbnUudmFsdWUsXG4gICAgICAgICAgJ3YtYXV0b2NvbXBsZXRlLS1jaGlwcyc6ICEhcHJvcHMuY2hpcHMsXG4gICAgICAgICAgJ3YtYXV0b2NvbXBsZXRlLS1zZWxlY3Rpb24tc2xvdCc6ICEhc2xvdHMuc2VsZWN0aW9uLFxuICAgICAgICAgICd2LWF1dG9jb21wbGV0ZS0tc2VsZWN0aW5nLWluZGV4Jzogc2VsZWN0aW9uSW5kZXgudmFsdWUgPiAtMVxuICAgICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGUsXG4gICAgICAgIFwicmVhZG9ubHlcIjogcHJvcHMucmVhZG9ubHksXG4gICAgICAgIFwicGxhY2Vob2xkZXJcIjogaXNEaXJ0eSA/IHVuZGVmaW5lZCA6IHByb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgICBcIm9uQ2xpY2s6Y2xlYXJcIjogb25DbGVhcixcbiAgICAgICAgXCJvbk1vdXNlZG93bjpjb250cm9sXCI6IG9uTW91c2Vkb3duQ29udHJvbCxcbiAgICAgICAgXCJvbktleWRvd25cIjogb25LZXlkb3duXG4gICAgICB9KSwge1xuICAgICAgICAuLi5zbG90cyxcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW19jcmVhdGVWTm9kZShWTWVudSwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgIFwicmVmXCI6IHZNZW51UmVmLFxuICAgICAgICAgIFwibW9kZWxWYWx1ZVwiOiBtZW51LnZhbHVlLFxuICAgICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gbWVudS52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgICBcImFjdGl2YXRvclwiOiBcInBhcmVudFwiLFxuICAgICAgICAgIFwiY29udGVudENsYXNzXCI6IFwidi1hdXRvY29tcGxldGVfX2NvbnRlbnRcIixcbiAgICAgICAgICBcImRpc2FibGVkXCI6IG1lbnVEaXNhYmxlZC52YWx1ZSxcbiAgICAgICAgICBcImVhZ2VyXCI6IHByb3BzLmVhZ2VyLFxuICAgICAgICAgIFwibWF4SGVpZ2h0XCI6IDMxMCxcbiAgICAgICAgICBcIm9wZW5PbkNsaWNrXCI6IGZhbHNlLFxuICAgICAgICAgIFwiY2xvc2VPbkNvbnRlbnRDbGlja1wiOiBmYWxzZSxcbiAgICAgICAgICBcInRyYW5zaXRpb25cIjogcHJvcHMudHJhbnNpdGlvbixcbiAgICAgICAgICBcIm9uQWZ0ZXJMZWF2ZVwiOiBvbkFmdGVyTGVhdmVcbiAgICAgICAgfSwgcHJvcHMubWVudVByb3BzKSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtoYXNMaXN0ICYmIF9jcmVhdGVWTm9kZShWTGlzdCwge1xuICAgICAgICAgICAgXCJyZWZcIjogbGlzdFJlZixcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogc2VsZWN0ZWRWYWx1ZXMudmFsdWUsXG4gICAgICAgICAgICBcInNlbGVjdFN0cmF0ZWd5XCI6IHByb3BzLm11bHRpcGxlID8gJ2luZGVwZW5kZW50JyA6ICdzaW5nbGUtaW5kZXBlbmRlbnQnLFxuICAgICAgICAgICAgXCJvbk1vdXNlZG93blwiOiBlID0+IGUucHJldmVudERlZmF1bHQoKSxcbiAgICAgICAgICAgIFwib25LZXlkb3duXCI6IG9uTGlzdEtleWRvd24sXG4gICAgICAgICAgICBcIm9uRm9jdXNpblwiOiBvbkZvY3VzaW4sXG4gICAgICAgICAgICBcIm9uRm9jdXNvdXRcIjogb25Gb2N1c291dCxcbiAgICAgICAgICAgIFwib25TY3JvbGxQYXNzaXZlXCI6IG9uTGlzdFNjcm9sbCxcbiAgICAgICAgICAgIFwidGFiaW5kZXhcIjogXCItMVwiLFxuICAgICAgICAgICAgXCJjb2xvclwiOiBwcm9wcy5pdGVtQ29sb3IgPz8gcHJvcHMuY29sb3JcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHNbJ3ByZXBlbmQtaXRlbSddPy4oKSwgIWRpc3BsYXlJdGVtcy52YWx1ZS5sZW5ndGggJiYgIXByb3BzLmhpZGVOb0RhdGEgJiYgKHNsb3RzWyduby1kYXRhJ10/LigpID8/IF9jcmVhdGVWTm9kZShWTGlzdEl0ZW0sIHtcbiAgICAgICAgICAgICAgXCJ0aXRsZVwiOiB0KHByb3BzLm5vRGF0YVRleHQpXG4gICAgICAgICAgICB9LCBudWxsKSksIF9jcmVhdGVWTm9kZShWVmlydHVhbFNjcm9sbCwge1xuICAgICAgICAgICAgICBcInJlZlwiOiB2VmlydHVhbFNjcm9sbFJlZixcbiAgICAgICAgICAgICAgXCJyZW5kZXJsZXNzXCI6IHRydWUsXG4gICAgICAgICAgICAgIFwiaXRlbXNcIjogZGlzcGxheUl0ZW1zLnZhbHVlXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6IF9yZWYzID0+IHtcbiAgICAgICAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgaXRlbVJlZlxuICAgICAgICAgICAgICAgIH0gPSBfcmVmMztcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtUHJvcHMgPSBtZXJnZVByb3BzKGl0ZW0ucHJvcHMsIHtcbiAgICAgICAgICAgICAgICAgIHJlZjogaXRlbVJlZixcbiAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgICAgICAgICBhY3RpdmU6IGhpZ2hsaWdodEZpcnN0LnZhbHVlICYmIGluZGV4ID09PSAwID8gdHJ1ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHNlbGVjdChpdGVtKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBzbG90cy5pdGVtPy4oe1xuICAgICAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgcHJvcHM6IGl0ZW1Qcm9wc1xuICAgICAgICAgICAgICAgIH0pID8/IF9jcmVhdGVWTm9kZShWTGlzdEl0ZW0sIGl0ZW1Qcm9wcywge1xuICAgICAgICAgICAgICAgICAgcHJlcGVuZDogX3JlZjQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgfSA9IF9yZWY0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Byb3BzLm11bHRpcGxlICYmICFwcm9wcy5oaWRlU2VsZWN0ZWQgPyBfY3JlYXRlVk5vZGUoVkNoZWNrYm94QnRuLCB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogaXRlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBcIm1vZGVsVmFsdWVcIjogaXNTZWxlY3RlZCxcbiAgICAgICAgICAgICAgICAgICAgICBcInJpcHBsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICBcInRhYmluZGV4XCI6IFwiLTFcIlxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKSA6IHVuZGVmaW5lZCwgaXRlbS5wcm9wcy5wcmVwZW5kSWNvbiAmJiBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogaXRlbS5wcm9wcy5wcmVwZW5kSWNvblxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKV0pO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ByaXN0aW5lLnZhbHVlID8gaXRlbS50aXRsZSA6IGhpZ2hsaWdodFJlc3VsdChpdGVtLnRpdGxlLCBnZXRNYXRjaGVzKGl0ZW0pPy50aXRsZSwgc2VhcmNoLnZhbHVlPy5sZW5ndGggPz8gMCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLCBzbG90c1snYXBwZW5kLWl0ZW0nXT8uKCldXG4gICAgICAgICAgfSldXG4gICAgICAgIH0pLCBtb2RlbC52YWx1ZS5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgZnVuY3Rpb24gb25DaGlwQ2xvc2UoZSkge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHNlbGVjdChpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc2xvdFByb3BzID0ge1xuICAgICAgICAgICAgJ29uQ2xpY2s6Y2xvc2UnOiBvbkNoaXBDbG9zZSxcbiAgICAgICAgICAgIG9uTW91c2Vkb3duKGUpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vZGVsVmFsdWU6IHRydWUsXG4gICAgICAgICAgICAnb25VcGRhdGU6bW9kZWxWYWx1ZSc6IHVuZGVmaW5lZFxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICBcImtleVwiOiBpdGVtLnZhbHVlLFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBbJ3YtYXV0b2NvbXBsZXRlX19zZWxlY3Rpb24nLCBpbmRleCA9PT0gc2VsZWN0aW9uSW5kZXgudmFsdWUgJiYgWyd2LWF1dG9jb21wbGV0ZV9fc2VsZWN0aW9uLS1zZWxlY3RlZCcsIHRleHRDb2xvckNsYXNzZXMudmFsdWVdXSxcbiAgICAgICAgICAgIFwic3R5bGVcIjogaW5kZXggPT09IHNlbGVjdGlvbkluZGV4LnZhbHVlID8gdGV4dENvbG9yU3R5bGVzLnZhbHVlIDoge31cbiAgICAgICAgICB9LCBbaGFzQ2hpcHMgPyAhc2xvdHMuY2hpcCA/IF9jcmVhdGVWTm9kZShWQ2hpcCwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgICAgXCJrZXlcIjogXCJjaGlwXCIsXG4gICAgICAgICAgICBcImNsb3NhYmxlXCI6IHByb3BzLmNsb3NhYmxlQ2hpcHMsXG4gICAgICAgICAgICBcInNpemVcIjogXCJzbWFsbFwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IGl0ZW0udGl0bGUsXG4gICAgICAgICAgICBcImRpc2FibGVkXCI6IGl0ZW0ucHJvcHMuZGlzYWJsZWRcbiAgICAgICAgICB9LCBzbG90UHJvcHMpLCBudWxsKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgICAgXCJrZXlcIjogXCJjaGlwLWRlZmF1bHRzXCIsXG4gICAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgICAgVkNoaXA6IHtcbiAgICAgICAgICAgICAgICBjbG9zYWJsZTogcHJvcHMuY2xvc2FibGVDaGlwcyxcbiAgICAgICAgICAgICAgICBzaXplOiAnc21hbGwnLFxuICAgICAgICAgICAgICAgIHRleHQ6IGl0ZW0udGl0bGVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy5jaGlwPy4oe1xuICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgcHJvcHM6IHNsb3RQcm9wc1xuICAgICAgICAgICAgfSldXG4gICAgICAgICAgfSkgOiBzbG90cy5zZWxlY3Rpb24/Lih7XG4gICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICB9KSA/PyBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWF1dG9jb21wbGV0ZV9fc2VsZWN0aW9uLXRleHRcIlxuICAgICAgICAgIH0sIFtpdGVtLnRpdGxlLCBwcm9wcy5tdWx0aXBsZSAmJiBpbmRleCA8IG1vZGVsLnZhbHVlLmxlbmd0aCAtIDEgJiYgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwidi1hdXRvY29tcGxldGVfX3NlbGVjdGlvbi1jb21tYVwiXG4gICAgICAgICAgfSwgW19jcmVhdGVUZXh0Vk5vZGUoXCIsXCIpXSldKV0pO1xuICAgICAgICB9KV0pLFxuICAgICAgICAnYXBwZW5kLWlubmVyJzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtzbG90c1snYXBwZW5kLWlubmVyJ10/LiguLi5hcmdzKSwgcHJvcHMubWVudUljb24gPyBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWF1dG9jb21wbGV0ZV9fbWVudS1pY29uXCIsXG4gICAgICAgICAgICBcImljb25cIjogcHJvcHMubWVudUljb24sXG4gICAgICAgICAgICBcIm9uTW91c2Vkb3duXCI6IG9uTW91c2Vkb3duTWVudUljb24sXG4gICAgICAgICAgICBcIm9uQ2xpY2tcIjogbm9vcCxcbiAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0KGxhYmVsLnZhbHVlKSxcbiAgICAgICAgICAgIFwidGl0bGVcIjogdChsYWJlbC52YWx1ZSlcbiAgICAgICAgICB9LCBudWxsKSA6IHVuZGVmaW5lZF0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm9yd2FyZFJlZnMoe1xuICAgICAgaXNGb2N1c2VkLFxuICAgICAgaXNQcmlzdGluZSxcbiAgICAgIG1lbnUsXG4gICAgICBzZWFyY2gsXG4gICAgICBmaWx0ZXJlZEl0ZW1zLFxuICAgICAgc2VsZWN0XG4gICAgfSwgdlRleHRGaWVsZFJlZik7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkF1dG9jb21wbGV0ZS5tanMubWFwIiwiaW1wb3J0IHsgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCB2U2hvdyBhcyBfdlNob3csIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQmFkZ2UuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJY29uIH0gZnJvbSBcIi4uL1ZJY29uL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQmFja2dyb3VuZENvbG9yLCB1c2VUZXh0Q29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IG1ha2VMb2NhdGlvblByb3BzLCB1c2VMb2NhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgdXNlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVHJhbnNpdGlvblByb3BzLCBNYXliZVRyYW5zaXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdHJhbnNpdGlvbi5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwaWNrLCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWQmFkZ2VQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGJvcmRlcmVkOiBCb29sZWFuLFxuICBjb2xvcjogU3RyaW5nLFxuICBjb250ZW50OiBbTnVtYmVyLCBTdHJpbmddLFxuICBkb3Q6IEJvb2xlYW4sXG4gIGZsb2F0aW5nOiBCb29sZWFuLFxuICBpY29uOiBJY29uVmFsdWUsXG4gIGlubGluZTogQm9vbGVhbixcbiAgbGFiZWw6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJyR2dWV0aWZ5LmJhZGdlJ1xuICB9LFxuICBtYXg6IFtOdW1iZXIsIFN0cmluZ10sXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgb2Zmc2V0WDogW051bWJlciwgU3RyaW5nXSxcbiAgb2Zmc2V0WTogW051bWJlciwgU3RyaW5nXSxcbiAgdGV4dENvbG9yOiBTdHJpbmcsXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlTG9jYXRpb25Qcm9wcyh7XG4gICAgbG9jYXRpb246ICd0b3AgZW5kJ1xuICB9KSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKSxcbiAgLi4ubWFrZVRyYW5zaXRpb25Qcm9wcyh7XG4gICAgdHJhbnNpdGlvbjogJ3NjYWxlLXJvdGF0ZS10cmFuc2l0aW9uJ1xuICB9KVxufSwgJ1ZCYWRnZScpO1xuZXhwb3J0IGNvbnN0IFZCYWRnZSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQmFkZ2UnLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczogbWFrZVZCYWRnZVByb3BzKCksXG4gIHNldHVwKHByb3BzLCBjdHgpIHtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcih0b1JlZihwcm9wcywgJ2NvbG9yJykpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRcbiAgICB9ID0gdXNlTG9jYWxlKCk7XG4gICAgY29uc3Qge1xuICAgICAgdGV4dENvbG9yQ2xhc3NlcyxcbiAgICAgIHRleHRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VUZXh0Q29sb3IodG9SZWYocHJvcHMsICd0ZXh0Q29sb3InKSk7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3Qge1xuICAgICAgbG9jYXRpb25TdHlsZXNcbiAgICB9ID0gdXNlTG9jYXRpb24ocHJvcHMsIHRydWUsIHNpZGUgPT4ge1xuICAgICAgY29uc3QgYmFzZSA9IHByb3BzLmZsb2F0aW5nID8gcHJvcHMuZG90ID8gMiA6IDQgOiBwcm9wcy5kb3QgPyA4IDogMTI7XG4gICAgICByZXR1cm4gYmFzZSArIChbJ3RvcCcsICdib3R0b20nXS5pbmNsdWRlcyhzaWRlKSA/ICsocHJvcHMub2Zmc2V0WSA/PyAwKSA6IFsnbGVmdCcsICdyaWdodCddLmluY2x1ZGVzKHNpZGUpID8gKyhwcm9wcy5vZmZzZXRYID8/IDApIDogMCk7XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gTnVtYmVyKHByb3BzLmNvbnRlbnQpO1xuICAgICAgY29uc3QgY29udGVudCA9ICFwcm9wcy5tYXggfHwgaXNOYU4odmFsdWUpID8gcHJvcHMuY29udGVudCA6IHZhbHVlIDw9ICtwcm9wcy5tYXggPyB2YWx1ZSA6IGAke3Byb3BzLm1heH0rYDtcbiAgICAgIGNvbnN0IFtiYWRnZUF0dHJzLCBhdHRyc10gPSBwaWNrKGN0eC5hdHRycywgWydhcmlhLWF0b21pYycsICdhcmlhLWxhYmVsJywgJ2FyaWEtbGl2ZScsICdyb2xlJywgJ3RpdGxlJ10pO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtYmFkZ2UnLCB7XG4gICAgICAgICAgJ3YtYmFkZ2UtLWJvcmRlcmVkJzogcHJvcHMuYm9yZGVyZWQsXG4gICAgICAgICAgJ3YtYmFkZ2UtLWRvdCc6IHByb3BzLmRvdCxcbiAgICAgICAgICAndi1iYWRnZS0tZmxvYXRpbmcnOiBwcm9wcy5mbG9hdGluZyxcbiAgICAgICAgICAndi1iYWRnZS0taW5saW5lJzogcHJvcHMuaW5saW5lXG4gICAgICAgIH0sIHByb3BzLmNsYXNzXVxuICAgICAgfSwgYXR0cnMsIHtcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSksIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtYmFkZ2VfX3dyYXBwZXJcIlxuICAgICAgICB9LCBbY3R4LnNsb3RzLmRlZmF1bHQ/LigpLCBfY3JlYXRlVk5vZGUoTWF5YmVUcmFuc2l0aW9uLCB7XG4gICAgICAgICAgXCJ0cmFuc2l0aW9uXCI6IHByb3BzLnRyYW5zaXRpb25cbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFwic3BhblwiLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFsndi1iYWRnZV9fYmFkZ2UnLCB0aGVtZUNsYXNzZXMudmFsdWUsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCB0ZXh0Q29sb3JDbGFzc2VzLnZhbHVlXSxcbiAgICAgICAgICAgIFwic3R5bGVcIjogW2JhY2tncm91bmRDb2xvclN0eWxlcy52YWx1ZSwgdGV4dENvbG9yU3R5bGVzLnZhbHVlLCBwcm9wcy5pbmxpbmUgPyB7fSA6IGxvY2F0aW9uU3R5bGVzLnZhbHVlXSxcbiAgICAgICAgICAgIFwiYXJpYS1hdG9taWNcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogdChwcm9wcy5sYWJlbCwgdmFsdWUpLFxuICAgICAgICAgICAgXCJhcmlhLWxpdmVcIjogXCJwb2xpdGVcIixcbiAgICAgICAgICAgIFwicm9sZVwiOiBcInN0YXR1c1wiXG4gICAgICAgICAgfSwgYmFkZ2VBdHRycyksIFtwcm9wcy5kb3QgPyB1bmRlZmluZWQgOiBjdHguc2xvdHMuYmFkZ2UgPyBjdHguc2xvdHMuYmFkZ2U/LigpIDogcHJvcHMuaWNvbiA/IF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgICAgXCJpY29uXCI6IHByb3BzLmljb25cbiAgICAgICAgICB9LCBudWxsKSA6IGNvbnRlbnRdKSwgW1tfdlNob3csIHByb3BzLm1vZGVsVmFsdWVdXSldXG4gICAgICAgIH0pXSldXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkJhZGdlLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWQmFubmVyQWN0aW9uc1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29sb3I6IFN0cmluZyxcbiAgZGVuc2l0eTogU3RyaW5nLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKVxufSwgJ1ZCYW5uZXJBY3Rpb25zJyk7XG5leHBvcnQgY29uc3QgVkJhbm5lckFjdGlvbnMgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkJhbm5lckFjdGlvbnMnLFxuICBwcm9wczogbWFrZVZCYW5uZXJBY3Rpb25zUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBwcm92aWRlRGVmYXVsdHMoe1xuICAgICAgVkJ0bjoge1xuICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgIGRlbnNpdHk6IHByb3BzLmRlbnNpdHksXG4gICAgICAgIHZhcmlhbnQ6ICd0ZXh0J1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtYmFubmVyLWFjdGlvbnMnLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgfSwgW3Nsb3RzLmRlZmF1bHQ/LigpXSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQmFubmVyQWN0aW9ucy5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgVkJhbm5lclRleHQgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWJhbm5lci10ZXh0Jyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQmFubmVyVGV4dC5tanMubWFwIiwiaW1wb3J0IHsgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZCYW5uZXIuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZCYW5uZXJBY3Rpb25zIH0gZnJvbSBcIi4vVkJhbm5lckFjdGlvbnMubWpzXCI7XG5pbXBvcnQgeyBWQmFubmVyVGV4dCB9IGZyb20gXCIuL1ZCYW5uZXJUZXh0Lm1qc1wiO1xuaW1wb3J0IHsgVkF2YXRhciB9IGZyb20gXCIuLi9WQXZhdGFyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQm9yZGVyUHJvcHMsIHVzZUJvcmRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ib3JkZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiO1xuaW1wb3J0IHsgbWFrZURlbnNpdHlQcm9wcywgdXNlRGVuc2l0eSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZW5zaXR5Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURpbWVuc2lvblByb3BzLCB1c2VEaW1lbnNpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGltZW5zaW9ucy5tanNcIjtcbmltcG9ydCB7IHVzZURpc3BsYXkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGlzcGxheS5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IEljb25WYWx1ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IG1ha2VMb2NhdGlvblByb3BzLCB1c2VMb2NhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VQb3NpdGlvblByb3BzLCB1c2VQb3NpdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wb3NpdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZCYW5uZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGF2YXRhcjogU3RyaW5nLFxuICBjb2xvcjogU3RyaW5nLFxuICBpY29uOiBJY29uVmFsdWUsXG4gIGxpbmVzOiBTdHJpbmcsXG4gIHN0YWNrZWQ6IEJvb2xlYW4sXG4gIHN0aWNreTogQm9vbGVhbixcbiAgdGV4dDogU3RyaW5nLFxuICAuLi5tYWtlQm9yZGVyUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZURpbWVuc2lvblByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlTG9jYXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUG9zaXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpXG59LCAnVkJhbm5lcicpO1xuZXhwb3J0IGNvbnN0IFZCYW5uZXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkJhbm5lcicsXG4gIHByb3BzOiBtYWtlVkJhbm5lclByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgYm9yZGVyQ2xhc3Nlc1xuICAgIH0gPSB1c2VCb3JkZXIocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbnNpdHlDbGFzc2VzXG4gICAgfSA9IHVzZURlbnNpdHkocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIG1vYmlsZVxuICAgIH0gPSB1c2VEaXNwbGF5KCk7XG4gICAgY29uc3Qge1xuICAgICAgZGltZW5zaW9uU3R5bGVzXG4gICAgfSA9IHVzZURpbWVuc2lvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxvY2F0aW9uU3R5bGVzXG4gICAgfSA9IHVzZUxvY2F0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBwb3NpdGlvbkNsYXNzZXNcbiAgICB9ID0gdXNlUG9zaXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IGNvbG9yID0gdG9SZWYocHJvcHMsICdjb2xvcicpO1xuICAgIGNvbnN0IGRlbnNpdHkgPSB0b1JlZihwcm9wcywgJ2RlbnNpdHknKTtcbiAgICBwcm92aWRlRGVmYXVsdHMoe1xuICAgICAgVkJhbm5lckFjdGlvbnM6IHtcbiAgICAgICAgY29sb3IsXG4gICAgICAgIGRlbnNpdHlcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaGFzVGV4dCA9ICEhKHByb3BzLnRleHQgfHwgc2xvdHMudGV4dCk7XG4gICAgICBjb25zdCBoYXNQcmVwZW5kTWVkaWEgPSAhIShwcm9wcy5hdmF0YXIgfHwgcHJvcHMuaWNvbik7XG4gICAgICBjb25zdCBoYXNQcmVwZW5kID0gISEoaGFzUHJlcGVuZE1lZGlhIHx8IHNsb3RzLnByZXBlbmQpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtYmFubmVyJywge1xuICAgICAgICAgICd2LWJhbm5lci0tc3RhY2tlZCc6IHByb3BzLnN0YWNrZWQgfHwgbW9iaWxlLnZhbHVlLFxuICAgICAgICAgICd2LWJhbm5lci0tc3RpY2t5JzogcHJvcHMuc3RpY2t5LFxuICAgICAgICAgIFtgdi1iYW5uZXItLSR7cHJvcHMubGluZXN9LWxpbmVgXTogISFwcm9wcy5saW5lc1xuICAgICAgICB9LCBib3JkZXJDbGFzc2VzLnZhbHVlLCBkZW5zaXR5Q2xhc3Nlcy52YWx1ZSwgZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSwgcG9zaXRpb25DbGFzc2VzLnZhbHVlLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW2RpbWVuc2lvblN0eWxlcy52YWx1ZSwgbG9jYXRpb25TdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXSxcbiAgICAgICAgXCJyb2xlXCI6IFwiYmFubmVyXCJcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW2hhc1ByZXBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImtleVwiOiBcInByZXBlbmRcIixcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1iYW5uZXJfX3ByZXBlbmRcIlxuICAgICAgICB9LCBbIXNsb3RzLnByZXBlbmQgPyBfY3JlYXRlVk5vZGUoVkF2YXRhciwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZC1hdmF0YXJcIixcbiAgICAgICAgICBcImNvbG9yXCI6IGNvbG9yLnZhbHVlLFxuICAgICAgICAgIFwiZGVuc2l0eVwiOiBkZW5zaXR5LnZhbHVlLFxuICAgICAgICAgIFwiaWNvblwiOiBwcm9wcy5pY29uLFxuICAgICAgICAgIFwiaW1hZ2VcIjogcHJvcHMuYXZhdGFyXG4gICAgICAgIH0sIG51bGwpIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWRlZmF1bHRzXCIsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiAhaGFzUHJlcGVuZE1lZGlhLFxuICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgVkF2YXRhcjoge1xuICAgICAgICAgICAgICBjb2xvcjogY29sb3IudmFsdWUsXG4gICAgICAgICAgICAgIGRlbnNpdHk6IGRlbnNpdHkudmFsdWUsXG4gICAgICAgICAgICAgIGljb246IHByb3BzLmljb24sXG4gICAgICAgICAgICAgIGltYWdlOiBwcm9wcy5hdmF0YXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHNsb3RzLnByZXBlbmQpXSksIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtYmFubmVyX19jb250ZW50XCJcbiAgICAgICAgfSwgW2hhc1RleHQgJiYgX2NyZWF0ZVZOb2RlKFZCYW5uZXJUZXh0LCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJ0ZXh0XCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy50ZXh0Py4oKSA/PyBwcm9wcy50ZXh0XVxuICAgICAgICB9KSwgc2xvdHMuZGVmYXVsdD8uKCldKSwgc2xvdHMuYWN0aW9ucyAmJiBfY3JlYXRlVk5vZGUoVkJhbm5lckFjdGlvbnMsIHtcbiAgICAgICAgICBcImtleVwiOiBcImFjdGlvbnNcIlxuICAgICAgICB9LCBzbG90cy5hY3Rpb25zKV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZCYW5uZXIubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQm90dG9tTmF2aWdhdGlvbi5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkJ0blRvZ2dsZVN5bWJvbCB9IGZyb20gXCIuLi9WQnRuVG9nZ2xlL1ZCdG5Ub2dnbGUubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQm9yZGVyUHJvcHMsIHVzZUJvcmRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ib3JkZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VCYWNrZ3JvdW5kQ29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiO1xuaW1wb3J0IHsgbWFrZURlbnNpdHlQcm9wcywgdXNlRGVuc2l0eSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZW5zaXR5Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUdyb3VwUHJvcHMsIHVzZUdyb3VwIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2dyb3VwLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUxheW91dEl0ZW1Qcm9wcywgdXNlTGF5b3V0SXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sYXlvdXQubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyB1c2VTc3JCb290IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NzckJvb3QubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHVzZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWQm90dG9tTmF2aWdhdGlvblByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYmdDb2xvcjogU3RyaW5nLFxuICBjb2xvcjogU3RyaW5nLFxuICBncm93OiBCb29sZWFuLFxuICBtb2RlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHZhbGlkYXRvcjogdiA9PiAhdiB8fCBbJ2hvcml6b250YWwnLCAnc2hpZnQnXS5pbmNsdWRlcyh2KVxuICB9LFxuICBoZWlnaHQ6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDU2XG4gIH0sXG4gIGFjdGl2ZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICAuLi5tYWtlQm9yZGVyUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZUxheW91dEl0ZW1Qcm9wcyh7XG4gICAgbmFtZTogJ2JvdHRvbS1uYXZpZ2F0aW9uJ1xuICB9KSxcbiAgLi4ubWFrZVRhZ1Byb3BzKHtcbiAgICB0YWc6ICdoZWFkZXInXG4gIH0pLFxuICAuLi5tYWtlR3JvdXBQcm9wcyh7XG4gICAgbW9kZWxWYWx1ZTogdHJ1ZSxcbiAgICBzZWxlY3RlZENsYXNzOiAndi1idG4tLXNlbGVjdGVkJ1xuICB9KSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZCb3R0b21OYXZpZ2F0aW9uJyk7XG5leHBvcnQgY29uc3QgVkJvdHRvbU5hdmlnYXRpb24gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkJvdHRvbU5hdmlnYXRpb24nLFxuICBwcm9wczogbWFrZVZCb3R0b21OYXZpZ2F0aW9uUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWx1ZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3Qge1xuICAgICAgYm9yZGVyQ2xhc3Nlc1xuICAgIH0gPSB1c2VCb3JkZXIocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHRvUmVmKHByb3BzLCAnYmdDb2xvcicpKTtcbiAgICBjb25zdCB7XG4gICAgICBkZW5zaXR5Q2xhc3Nlc1xuICAgIH0gPSB1c2VEZW5zaXR5KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgc3NyQm9vdFN0eWxlc1xuICAgIH0gPSB1c2VTc3JCb290KCk7XG4gICAgY29uc3QgaGVpZ2h0ID0gY29tcHV0ZWQoKCkgPT4gTnVtYmVyKHByb3BzLmhlaWdodCkgLSAocHJvcHMuZGVuc2l0eSA9PT0gJ2NvbWZvcnRhYmxlJyA/IDggOiAwKSAtIChwcm9wcy5kZW5zaXR5ID09PSAnY29tcGFjdCcgPyAxNiA6IDApKTtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHRvUmVmKHByb3BzLCAnYWN0aXZlJyk7XG4gICAgY29uc3Qge1xuICAgICAgbGF5b3V0SXRlbVN0eWxlc1xuICAgIH0gPSB1c2VMYXlvdXRJdGVtKHtcbiAgICAgIGlkOiBwcm9wcy5uYW1lLFxuICAgICAgb3JkZXI6IGNvbXB1dGVkKCgpID0+IHBhcnNlSW50KHByb3BzLm9yZGVyLCAxMCkpLFxuICAgICAgcG9zaXRpb246IGNvbXB1dGVkKCgpID0+ICdib3R0b20nKSxcbiAgICAgIGxheW91dFNpemU6IGNvbXB1dGVkKCgpID0+IGlzQWN0aXZlLnZhbHVlID8gaGVpZ2h0LnZhbHVlIDogMCksXG4gICAgICBlbGVtZW50U2l6ZTogaGVpZ2h0LFxuICAgICAgYWN0aXZlOiBpc0FjdGl2ZSxcbiAgICAgIGFic29sdXRlOiB0b1JlZihwcm9wcywgJ2Fic29sdXRlJylcbiAgICB9KTtcbiAgICB1c2VHcm91cChwcm9wcywgVkJ0blRvZ2dsZVN5bWJvbCk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZCdG46IHtcbiAgICAgICAgY29sb3I6IHRvUmVmKHByb3BzLCAnY29sb3InKSxcbiAgICAgICAgZGVuc2l0eTogdG9SZWYocHJvcHMsICdkZW5zaXR5JyksXG4gICAgICAgIHN0YWNrZWQ6IGNvbXB1dGVkKCgpID0+IHByb3BzLm1vZGUgIT09ICdob3Jpem9udGFsJyksXG4gICAgICAgIHZhcmlhbnQ6ICd0ZXh0J1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHNjb3BlZDogdHJ1ZVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1ib3R0b20tbmF2aWdhdGlvbicsIHtcbiAgICAgICAgICAndi1ib3R0b20tbmF2aWdhdGlvbi0tYWN0aXZlJzogaXNBY3RpdmUudmFsdWUsXG4gICAgICAgICAgJ3YtYm90dG9tLW5hdmlnYXRpb24tLWdyb3cnOiBwcm9wcy5ncm93LFxuICAgICAgICAgICd2LWJvdHRvbS1uYXZpZ2F0aW9uLS1zaGlmdCc6IHByb3BzLm1vZGUgPT09ICdzaGlmdCdcbiAgICAgICAgfSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLnZhbHVlLCBib3JkZXJDbGFzc2VzLnZhbHVlLCBkZW5zaXR5Q2xhc3Nlcy52YWx1ZSwgZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlLCBsYXlvdXRJdGVtU3R5bGVzLnZhbHVlLCB7XG4gICAgICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KGhlaWdodC52YWx1ZSksXG4gICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgke2NvbnZlcnRUb1VuaXQoIWlzQWN0aXZlLnZhbHVlID8gMTAwIDogMCwgJyUnKX0pYFxuICAgICAgICB9LCBzc3JCb290U3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV1cbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmRlZmF1bHQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1ib3R0b20tbmF2aWdhdGlvbl9fY29udGVudFwiXG4gICAgICAgIH0sIFtzbG90cy5kZWZhdWx0KCldKV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQm90dG9tTmF2aWdhdGlvbi5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkJyZWFkY3J1bWJzRGl2aWRlclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZGl2aWRlcjogW051bWJlciwgU3RyaW5nXSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKClcbn0sICdWQnJlYWRjcnVtYnNEaXZpZGVyJyk7XG5leHBvcnQgY29uc3QgVkJyZWFkY3J1bWJzRGl2aWRlciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQnJlYWRjcnVtYnNEaXZpZGVyJyxcbiAgcHJvcHM6IG1ha2VWQnJlYWRjcnVtYnNEaXZpZGVyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFwibGlcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtYnJlYWRjcnVtYnMtZGl2aWRlcicsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICB9LCBbc2xvdHM/LmRlZmF1bHQ/LigpID8/IHByb3BzLmRpdmlkZXJdKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZCcmVhZGNydW1ic0RpdmlkZXIubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VUZXh0Q29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdXRlclByb3BzLCB1c2VMaW5rIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdXRlci5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkJyZWFkY3J1bWJzSXRlbVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWN0aXZlOiBCb29sZWFuLFxuICBhY3RpdmVDbGFzczogU3RyaW5nLFxuICBhY3RpdmVDb2xvcjogU3RyaW5nLFxuICBjb2xvcjogU3RyaW5nLFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgdGl0bGU6IFN0cmluZyxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VSb3V0ZXJQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoe1xuICAgIHRhZzogJ2xpJ1xuICB9KVxufSwgJ1ZCcmVhZGNydW1ic0l0ZW0nKTtcbmV4cG9ydCBjb25zdCBWQnJlYWRjcnVtYnNJdGVtID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZCcmVhZGNydW1ic0l0ZW0nLFxuICBwcm9wczogbWFrZVZCcmVhZGNydW1ic0l0ZW1Qcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90cyxcbiAgICAgIGF0dHJzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgbGluayA9IHVzZUxpbmsocHJvcHMsIGF0dHJzKTtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmFjdGl2ZSB8fCBsaW5rLmlzQWN0aXZlPy52YWx1ZSk7XG4gICAgY29uc3QgY29sb3IgPSBjb21wdXRlZCgoKSA9PiBpc0FjdGl2ZS52YWx1ZSA/IHByb3BzLmFjdGl2ZUNvbG9yIDogcHJvcHMuY29sb3IpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRleHRDb2xvckNsYXNzZXMsXG4gICAgICB0ZXh0Q29sb3JTdHlsZXNcbiAgICB9ID0gdXNlVGV4dENvbG9yKGNvbG9yKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtYnJlYWRjcnVtYnMtaXRlbScsIHtcbiAgICAgICAgICAndi1icmVhZGNydW1icy1pdGVtLS1hY3RpdmUnOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgICAndi1icmVhZGNydW1icy1pdGVtLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIFtgJHtwcm9wcy5hY3RpdmVDbGFzc31gXTogaXNBY3RpdmUudmFsdWUgJiYgcHJvcHMuYWN0aXZlQ2xhc3NcbiAgICAgICAgfSwgdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFt0ZXh0Q29sb3JTdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXSxcbiAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUudmFsdWUgPyAncGFnZScgOiB1bmRlZmluZWRcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gWyFsaW5rLmlzTGluay52YWx1ZSA/IHNsb3RzLmRlZmF1bHQ/LigpID8/IHByb3BzLnRpdGxlIDogX2NyZWF0ZVZOb2RlKFwiYVwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtYnJlYWRjcnVtYnMtaXRlbS0tbGlua1wiLFxuICAgICAgICAgIFwiaHJlZlwiOiBsaW5rLmhyZWYudmFsdWUsXG4gICAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUudmFsdWUgPyAncGFnZScgOiB1bmRlZmluZWQsXG4gICAgICAgICAgXCJvbkNsaWNrXCI6IGxpbmsubmF2aWdhdGVcbiAgICAgICAgfSwgW3Nsb3RzLmRlZmF1bHQ/LigpID8/IHByb3BzLnRpdGxlXSldXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkJyZWFkY3J1bWJzSXRlbS5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkJyZWFkY3J1bWJzLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQnJlYWRjcnVtYnNEaXZpZGVyIH0gZnJvbSBcIi4vVkJyZWFkY3J1bWJzRGl2aWRlci5tanNcIjtcbmltcG9ydCB7IFZCcmVhZGNydW1ic0l0ZW0gfSBmcm9tIFwiLi9WQnJlYWRjcnVtYnNJdGVtLm1qc1wiO1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gXCIuLi9WSWNvbi9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBwcm92aWRlRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzLCB1c2VEZW5zaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWQnJlYWRjcnVtYnNQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFjdGl2ZUNvbG9yOiBTdHJpbmcsXG4gIGJnQ29sb3I6IFN0cmluZyxcbiAgY29sb3I6IFN0cmluZyxcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIGRpdmlkZXI6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJy8nXG4gIH0sXG4gIGljb246IEljb25WYWx1ZSxcbiAgaXRlbXM6IHtcbiAgICB0eXBlOiBBcnJheSxcbiAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURlbnNpdHlQcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcyh7XG4gICAgdGFnOiAndWwnXG4gIH0pXG59LCAnVkJyZWFkY3J1bWJzJyk7XG5leHBvcnQgY29uc3QgVkJyZWFkY3J1bWJzID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZCcmVhZGNydW1icycsXG4gIHByb3BzOiBtYWtlVkJyZWFkY3J1bWJzUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcih0b1JlZihwcm9wcywgJ2JnQ29sb3InKSk7XG4gICAgY29uc3Qge1xuICAgICAgZGVuc2l0eUNsYXNzZXNcbiAgICB9ID0gdXNlRGVuc2l0eShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZCcmVhZGNydW1ic0RpdmlkZXI6IHtcbiAgICAgICAgZGl2aWRlcjogdG9SZWYocHJvcHMsICdkaXZpZGVyJylcbiAgICAgIH0sXG4gICAgICBWQnJlYWRjcnVtYnNJdGVtOiB7XG4gICAgICAgIGFjdGl2ZUNsYXNzOiB0b1JlZihwcm9wcywgJ2FjdGl2ZUNsYXNzJyksXG4gICAgICAgIGFjdGl2ZUNvbG9yOiB0b1JlZihwcm9wcywgJ2FjdGl2ZUNvbG9yJyksXG4gICAgICAgIGNvbG9yOiB0b1JlZihwcm9wcywgJ2NvbG9yJyksXG4gICAgICAgIGRpc2FibGVkOiB0b1JlZihwcm9wcywgJ2Rpc2FibGVkJylcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBpdGVtcyA9IGNvbXB1dGVkKCgpID0+IHByb3BzLml0ZW1zLm1hcChpdGVtID0+IHtcbiAgICAgIHJldHVybiB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycgPyB7XG4gICAgICAgIGl0ZW06IHtcbiAgICAgICAgICB0aXRsZTogaXRlbVxuICAgICAgICB9LFxuICAgICAgICByYXc6IGl0ZW1cbiAgICAgIH0gOiB7XG4gICAgICAgIGl0ZW0sXG4gICAgICAgIHJhdzogaXRlbVxuICAgICAgfTtcbiAgICB9KSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IGhhc1ByZXBlbmQgPSAhIShzbG90cy5wcmVwZW5kIHx8IHByb3BzLmljb24pO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtYnJlYWRjcnVtYnMnLCBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLnZhbHVlLCBkZW5zaXR5Q2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV1cbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW2hhc1ByZXBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwibGlcIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZFwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWJyZWFkY3J1bWJzX19wcmVwZW5kXCJcbiAgICAgICAgfSwgWyFzbG90cy5wcmVwZW5kID8gX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWljb25cIixcbiAgICAgICAgICBcInN0YXJ0XCI6IHRydWUsXG4gICAgICAgICAgXCJpY29uXCI6IHByb3BzLmljb25cbiAgICAgICAgfSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcInByZXBlbmQtZGVmYXVsdHNcIixcbiAgICAgICAgICBcImRpc2FibGVkXCI6ICFwcm9wcy5pY29uLFxuICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgVkljb246IHtcbiAgICAgICAgICAgICAgaWNvbjogcHJvcHMuaWNvbixcbiAgICAgICAgICAgICAgc3RhcnQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHNsb3RzLnByZXBlbmQpXSksIGl0ZW1zLnZhbHVlLm1hcCgoX3JlZjIsIGluZGV4LCBhcnJheSkgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgcmF3XG4gICAgICAgICAgfSA9IF9yZWYyO1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKFZCcmVhZGNydW1ic0l0ZW0sIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICAgIFwia2V5XCI6IGl0ZW0udGl0bGUsXG4gICAgICAgICAgICBcImRpc2FibGVkXCI6IGluZGV4ID49IGFycmF5Lmxlbmd0aCAtIDFcbiAgICAgICAgICB9LCBpdGVtKSwge1xuICAgICAgICAgICAgZGVmYXVsdDogc2xvdHMudGl0bGUgPyAoKSA9PiBzbG90cy50aXRsZT8uKHtcbiAgICAgICAgICAgICAgaXRlbTogcmF3LFxuICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSkgOiB1bmRlZmluZWRcbiAgICAgICAgICB9KSwgaW5kZXggPCBhcnJheS5sZW5ndGggLSAxICYmIF9jcmVhdGVWTm9kZShWQnJlYWRjcnVtYnNEaXZpZGVyLCBudWxsLCB7XG4gICAgICAgICAgICBkZWZhdWx0OiBzbG90cy5kaXZpZGVyID8gKCkgPT4gc2xvdHMuZGl2aWRlcj8uKHtcbiAgICAgICAgICAgICAgaXRlbTogcmF3LFxuICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSkgOiB1bmRlZmluZWRcbiAgICAgICAgICB9KV0pO1xuICAgICAgICB9KSwgc2xvdHMuZGVmYXVsdD8uKCldXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkJyZWFkY3J1bWJzLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBWQ2FyZEFjdGlvbnMgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkNhcmRBY3Rpb25zJyxcbiAgcHJvcHM6IG1ha2VDb21wb25lbnRQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIHByb3ZpZGVEZWZhdWx0cyh7XG4gICAgICBWQnRuOiB7XG4gICAgICAgIHZhcmlhbnQ6ICd0ZXh0J1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtY2FyZC1hY3Rpb25zJywgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKV0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNhcmRBY3Rpb25zLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBWQ2FyZFN1YnRpdGxlID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1jYXJkLXN1YnRpdGxlJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ2FyZFN1YnRpdGxlLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBWQ2FyZFRpdGxlID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1jYXJkLXRpdGxlJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ2FyZFRpdGxlLm1qcy5tYXAiLCJpbXBvcnQgeyByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQ2FyZFN1YnRpdGxlIH0gZnJvbSBcIi4vVkNhcmRTdWJ0aXRsZS5tanNcIjtcbmltcG9ydCB7IFZDYXJkVGl0bGUgfSBmcm9tIFwiLi9WQ2FyZFRpdGxlLm1qc1wiO1xuaW1wb3J0IHsgVkF2YXRhciB9IGZyb20gXCIuLi9WQXZhdGFyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURlbnNpdHlQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZW5zaXR5Lm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZUNhcmRJdGVtUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhcHBlbmRBdmF0YXI6IFN0cmluZyxcbiAgYXBwZW5kSWNvbjogSWNvblZhbHVlLFxuICBwcmVwZW5kQXZhdGFyOiBTdHJpbmcsXG4gIHByZXBlbmRJY29uOiBJY29uVmFsdWUsXG4gIHN1YnRpdGxlOiBTdHJpbmcsXG4gIHRpdGxlOiBTdHJpbmcsXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGVuc2l0eVByb3BzKClcbn0sICdWQ2FyZEl0ZW0nKTtcbmV4cG9ydCBjb25zdCBWQ2FyZEl0ZW0gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkNhcmRJdGVtJyxcbiAgcHJvcHM6IG1ha2VDYXJkSXRlbVByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IGhhc1ByZXBlbmRNZWRpYSA9ICEhKHByb3BzLnByZXBlbmRBdmF0YXIgfHwgcHJvcHMucHJlcGVuZEljb24pO1xuICAgICAgY29uc3QgaGFzUHJlcGVuZCA9ICEhKGhhc1ByZXBlbmRNZWRpYSB8fCBzbG90cy5wcmVwZW5kKTtcbiAgICAgIGNvbnN0IGhhc0FwcGVuZE1lZGlhID0gISEocHJvcHMuYXBwZW5kQXZhdGFyIHx8IHByb3BzLmFwcGVuZEljb24pO1xuICAgICAgY29uc3QgaGFzQXBwZW5kID0gISEoaGFzQXBwZW5kTWVkaWEgfHwgc2xvdHMuYXBwZW5kKTtcbiAgICAgIGNvbnN0IGhhc1RpdGxlID0gISEocHJvcHMudGl0bGUgfHwgc2xvdHMudGl0bGUpO1xuICAgICAgY29uc3QgaGFzU3VidGl0bGUgPSAhIShwcm9wcy5zdWJ0aXRsZSB8fCBzbG90cy5zdWJ0aXRsZSk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtY2FyZC1pdGVtJywgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9LCBbaGFzUHJlcGVuZCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImtleVwiOiBcInByZXBlbmRcIixcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtY2FyZC1pdGVtX19wcmVwZW5kXCJcbiAgICAgIH0sIFshc2xvdHMucHJlcGVuZCA/IGhhc1ByZXBlbmRNZWRpYSAmJiBfY3JlYXRlVk5vZGUoVkF2YXRhciwge1xuICAgICAgICBcImtleVwiOiBcInByZXBlbmQtYXZhdGFyXCIsXG4gICAgICAgIFwiZGVuc2l0eVwiOiBwcm9wcy5kZW5zaXR5LFxuICAgICAgICBcImljb25cIjogcHJvcHMucHJlcGVuZEljb24sXG4gICAgICAgIFwiaW1hZ2VcIjogcHJvcHMucHJlcGVuZEF2YXRhclxuICAgICAgfSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWRlZmF1bHRzXCIsXG4gICAgICAgIFwiZGlzYWJsZWRcIjogIWhhc1ByZXBlbmRNZWRpYSxcbiAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgVkF2YXRhcjoge1xuICAgICAgICAgICAgZGVuc2l0eTogcHJvcHMuZGVuc2l0eSxcbiAgICAgICAgICAgIGljb246IHByb3BzLnByZXBlbmRJY29uLFxuICAgICAgICAgICAgaW1hZ2U6IHByb3BzLnByZXBlbmRBdmF0YXJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHNsb3RzLnByZXBlbmQpXSksIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWNhcmQtaXRlbV9fY29udGVudFwiXG4gICAgICB9LCBbaGFzVGl0bGUgJiYgX2NyZWF0ZVZOb2RlKFZDYXJkVGl0bGUsIHtcbiAgICAgICAgXCJrZXlcIjogXCJ0aXRsZVwiXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy50aXRsZT8uKCkgPz8gcHJvcHMudGl0bGVdXG4gICAgICB9KSwgaGFzU3VidGl0bGUgJiYgX2NyZWF0ZVZOb2RlKFZDYXJkU3VidGl0bGUsIHtcbiAgICAgICAgXCJrZXlcIjogXCJzdWJ0aXRsZVwiXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy5zdWJ0aXRsZT8uKCkgPz8gcHJvcHMuc3VidGl0bGVdXG4gICAgICB9KSwgc2xvdHMuZGVmYXVsdD8uKCldKSwgaGFzQXBwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwiYXBwZW5kXCIsXG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWNhcmQtaXRlbV9fYXBwZW5kXCJcbiAgICAgIH0sIFshc2xvdHMuYXBwZW5kID8gaGFzQXBwZW5kTWVkaWEgJiYgX2NyZWF0ZVZOb2RlKFZBdmF0YXIsIHtcbiAgICAgICAgXCJrZXlcIjogXCJhcHBlbmQtYXZhdGFyXCIsXG4gICAgICAgIFwiZGVuc2l0eVwiOiBwcm9wcy5kZW5zaXR5LFxuICAgICAgICBcImljb25cIjogcHJvcHMuYXBwZW5kSWNvbixcbiAgICAgICAgXCJpbWFnZVwiOiBwcm9wcy5hcHBlbmRBdmF0YXJcbiAgICAgIH0sIG51bGwpIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgIFwia2V5XCI6IFwiYXBwZW5kLWRlZmF1bHRzXCIsXG4gICAgICAgIFwiZGlzYWJsZWRcIjogIWhhc0FwcGVuZE1lZGlhLFxuICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICBWQXZhdGFyOiB7XG4gICAgICAgICAgICBkZW5zaXR5OiBwcm9wcy5kZW5zaXR5LFxuICAgICAgICAgICAgaWNvbjogcHJvcHMuYXBwZW5kSWNvbixcbiAgICAgICAgICAgIGltYWdlOiBwcm9wcy5hcHBlbmRBdmF0YXJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHNsb3RzLmFwcGVuZCldKV0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ2FyZEl0ZW0ubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZDYXJkVGV4dCA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtY2FyZC10ZXh0Jyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ2FyZFRleHQubWpzLm1hcCIsImltcG9ydCB7IHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLyogZXNsaW50LWRpc2FibGUgY29tcGxleGl0eSAqL1xuXG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkNhcmQuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZDYXJkQWN0aW9ucyB9IGZyb20gXCIuL1ZDYXJkQWN0aW9ucy5tanNcIjtcbmltcG9ydCB7IFZDYXJkSXRlbSB9IGZyb20gXCIuL1ZDYXJkSXRlbS5tanNcIjtcbmltcG9ydCB7IFZDYXJkVGV4dCB9IGZyb20gXCIuL1ZDYXJkVGV4dC5tanNcIjtcbmltcG9ydCB7IFZEZWZhdWx0c1Byb3ZpZGVyIH0gZnJvbSBcIi4uL1ZEZWZhdWx0c1Byb3ZpZGVyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkltZyB9IGZyb20gXCIuLi9WSW1nL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUJvcmRlclByb3BzLCB1c2VCb3JkZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvYm9yZGVyLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VEZW5zaXR5UHJvcHMsIHVzZURlbnNpdHkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVuc2l0eS5tanNcIjtcbmltcG9ydCB7IG1ha2VEaW1lbnNpb25Qcm9wcywgdXNlRGltZW5zaW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RpbWVuc2lvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRWxldmF0aW9uUHJvcHMsIHVzZUVsZXZhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyBMb2FkZXJTbG90LCBtYWtlTG9hZGVyUHJvcHMsIHVzZUxvYWRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2FkZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlTG9jYXRpb25Qcm9wcywgdXNlTG9jYXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBtYWtlUG9zaXRpb25Qcm9wcywgdXNlUG9zaXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcG9zaXRpb24ubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91dGVyUHJvcHMsIHVzZUxpbmsgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91dGVyLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7XG5pbXBvcnQgeyBnZW5PdmVybGF5cywgbWFrZVZhcmlhbnRQcm9wcywgdXNlVmFyaWFudCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy92YXJpYW50Lm1qc1wiOyAvLyBEaXJlY3RpdmVzXG5pbXBvcnQgeyBSaXBwbGUgfSBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9yaXBwbGUvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkNhcmRQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGFwcGVuZEF2YXRhcjogU3RyaW5nLFxuICBhcHBlbmRJY29uOiBJY29uVmFsdWUsXG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICBmbGF0OiBCb29sZWFuLFxuICBob3ZlcjogQm9vbGVhbixcbiAgaW1hZ2U6IFN0cmluZyxcbiAgbGluazoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gIH0sXG4gIHByZXBlbmRBdmF0YXI6IFN0cmluZyxcbiAgcHJlcGVuZEljb246IEljb25WYWx1ZSxcbiAgcmlwcGxlOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIE9iamVjdF0sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBzdWJ0aXRsZTogU3RyaW5nLFxuICB0ZXh0OiBTdHJpbmcsXG4gIHRpdGxlOiBTdHJpbmcsXG4gIC4uLm1ha2VCb3JkZXJQcm9wcygpLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURlbnNpdHlQcm9wcygpLFxuICAuLi5tYWtlRGltZW5zaW9uUHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKCksXG4gIC4uLm1ha2VMb2FkZXJQcm9wcygpLFxuICAuLi5tYWtlTG9jYXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUG9zaXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VSb3V0ZXJQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKSxcbiAgLi4ubWFrZVZhcmlhbnRQcm9wcyh7XG4gICAgdmFyaWFudDogJ2VsZXZhdGVkJ1xuICB9KVxufSwgJ1ZDYXJkJyk7XG5leHBvcnQgY29uc3QgVkNhcmQgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkNhcmQnLFxuICBkaXJlY3RpdmVzOiB7XG4gICAgUmlwcGxlXG4gIH0sXG4gIHByb3BzOiBtYWtlVkNhcmRQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBhdHRycyxcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgYm9yZGVyQ2xhc3Nlc1xuICAgIH0gPSB1c2VCb3JkZXIocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbG9yQ2xhc3NlcyxcbiAgICAgIGNvbG9yU3R5bGVzLFxuICAgICAgdmFyaWFudENsYXNzZXNcbiAgICB9ID0gdXNlVmFyaWFudChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGVuc2l0eUNsYXNzZXNcbiAgICB9ID0gdXNlRGVuc2l0eShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGltZW5zaW9uU3R5bGVzXG4gICAgfSA9IHVzZURpbWVuc2lvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxvYWRlckNsYXNzZXNcbiAgICB9ID0gdXNlTG9hZGVyKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBsb2NhdGlvblN0eWxlc1xuICAgIH0gPSB1c2VMb2NhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcG9zaXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZVBvc2l0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzKTtcbiAgICBjb25zdCBsaW5rID0gdXNlTGluayhwcm9wcywgYXR0cnMpO1xuICAgIGNvbnN0IGlzTGluayA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmxpbmsgIT09IGZhbHNlICYmIGxpbmsuaXNMaW5rLnZhbHVlKTtcbiAgICBjb25zdCBpc0NsaWNrYWJsZSA9IGNvbXB1dGVkKCgpID0+ICFwcm9wcy5kaXNhYmxlZCAmJiBwcm9wcy5saW5rICE9PSBmYWxzZSAmJiAocHJvcHMubGluayB8fCBsaW5rLmlzQ2xpY2thYmxlLnZhbHVlKSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFRhZyA9IGlzTGluay52YWx1ZSA/ICdhJyA6IHByb3BzLnRhZztcbiAgICAgIGNvbnN0IGhhc1RpdGxlID0gISEoc2xvdHMudGl0bGUgfHwgcHJvcHMudGl0bGUpO1xuICAgICAgY29uc3QgaGFzU3VidGl0bGUgPSAhIShzbG90cy5zdWJ0aXRsZSB8fCBwcm9wcy5zdWJ0aXRsZSk7XG4gICAgICBjb25zdCBoYXNIZWFkZXIgPSBoYXNUaXRsZSB8fCBoYXNTdWJ0aXRsZTtcbiAgICAgIGNvbnN0IGhhc0FwcGVuZCA9ICEhKHNsb3RzLmFwcGVuZCB8fCBwcm9wcy5hcHBlbmRBdmF0YXIgfHwgcHJvcHMuYXBwZW5kSWNvbik7XG4gICAgICBjb25zdCBoYXNQcmVwZW5kID0gISEoc2xvdHMucHJlcGVuZCB8fCBwcm9wcy5wcmVwZW5kQXZhdGFyIHx8IHByb3BzLnByZXBlbmRJY29uKTtcbiAgICAgIGNvbnN0IGhhc0ltYWdlID0gISEoc2xvdHMuaW1hZ2UgfHwgcHJvcHMuaW1hZ2UpO1xuICAgICAgY29uc3QgaGFzQ2FyZEl0ZW0gPSBoYXNIZWFkZXIgfHwgaGFzUHJlcGVuZCB8fCBoYXNBcHBlbmQ7XG4gICAgICBjb25zdCBoYXNUZXh0ID0gISEoc2xvdHMudGV4dCB8fCBwcm9wcy50ZXh0KTtcbiAgICAgIHJldHVybiBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1jYXJkJywge1xuICAgICAgICAgICd2LWNhcmQtLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgJ3YtY2FyZC0tZmxhdCc6IHByb3BzLmZsYXQsXG4gICAgICAgICAgJ3YtY2FyZC0taG92ZXInOiBwcm9wcy5ob3ZlciAmJiAhKHByb3BzLmRpc2FibGVkIHx8IHByb3BzLmZsYXQpLFxuICAgICAgICAgICd2LWNhcmQtLWxpbmsnOiBpc0NsaWNrYWJsZS52YWx1ZVxuICAgICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIGJvcmRlckNsYXNzZXMudmFsdWUsIGNvbG9yQ2xhc3Nlcy52YWx1ZSwgZGVuc2l0eUNsYXNzZXMudmFsdWUsIGVsZXZhdGlvbkNsYXNzZXMudmFsdWUsIGxvYWRlckNsYXNzZXMudmFsdWUsIHBvc2l0aW9uQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHZhcmlhbnRDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW2NvbG9yU3R5bGVzLnZhbHVlLCBkaW1lbnNpb25TdHlsZXMudmFsdWUsIGxvY2F0aW9uU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV0sXG4gICAgICAgIFwiaHJlZlwiOiBsaW5rLmhyZWYudmFsdWUsXG4gICAgICAgIFwib25DbGlja1wiOiBpc0NsaWNrYWJsZS52YWx1ZSAmJiBsaW5rLm5hdmlnYXRlLFxuICAgICAgICBcInRhYmluZGV4XCI6IHByb3BzLmRpc2FibGVkID8gLTEgOiB1bmRlZmluZWRcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW2hhc0ltYWdlICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJpbWFnZVwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWNhcmRfX2ltYWdlXCJcbiAgICAgICAgfSwgWyFzbG90cy5pbWFnZSA/IF9jcmVhdGVWTm9kZShWSW1nLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJpbWFnZS1pbWdcIixcbiAgICAgICAgICBcImNvdmVyXCI6IHRydWUsXG4gICAgICAgICAgXCJzcmNcIjogcHJvcHMuaW1hZ2VcbiAgICAgICAgfSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImltYWdlLWRlZmF1bHRzXCIsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiAhcHJvcHMuaW1hZ2UsXG4gICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICBWSW1nOiB7XG4gICAgICAgICAgICAgIGNvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICBzcmM6IHByb3BzLmltYWdlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBzbG90cy5pbWFnZSldKSwgX2NyZWF0ZVZOb2RlKExvYWRlclNsb3QsIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ2LWNhcmRcIixcbiAgICAgICAgICBcImFjdGl2ZVwiOiAhIXByb3BzLmxvYWRpbmcsXG4gICAgICAgICAgXCJjb2xvclwiOiB0eXBlb2YgcHJvcHMubG9hZGluZyA9PT0gJ2Jvb2xlYW4nID8gdW5kZWZpbmVkIDogcHJvcHMubG9hZGluZ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogc2xvdHMubG9hZGVyXG4gICAgICAgIH0pLCBoYXNDYXJkSXRlbSAmJiBfY3JlYXRlVk5vZGUoVkNhcmRJdGVtLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJpdGVtXCIsXG4gICAgICAgICAgXCJwcmVwZW5kQXZhdGFyXCI6IHByb3BzLnByZXBlbmRBdmF0YXIsXG4gICAgICAgICAgXCJwcmVwZW5kSWNvblwiOiBwcm9wcy5wcmVwZW5kSWNvbixcbiAgICAgICAgICBcInRpdGxlXCI6IHByb3BzLnRpdGxlLFxuICAgICAgICAgIFwic3VidGl0bGVcIjogcHJvcHMuc3VidGl0bGUsXG4gICAgICAgICAgXCJhcHBlbmRBdmF0YXJcIjogcHJvcHMuYXBwZW5kQXZhdGFyLFxuICAgICAgICAgIFwiYXBwZW5kSWNvblwiOiBwcm9wcy5hcHBlbmRJY29uXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiBzbG90cy5pdGVtLFxuICAgICAgICAgIHByZXBlbmQ6IHNsb3RzLnByZXBlbmQsXG4gICAgICAgICAgdGl0bGU6IHNsb3RzLnRpdGxlLFxuICAgICAgICAgIHN1YnRpdGxlOiBzbG90cy5zdWJ0aXRsZSxcbiAgICAgICAgICBhcHBlbmQ6IHNsb3RzLmFwcGVuZFxuICAgICAgICB9KSwgaGFzVGV4dCAmJiBfY3JlYXRlVk5vZGUoVkNhcmRUZXh0LCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJ0ZXh0XCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy50ZXh0Py4oKSA/PyBwcm9wcy50ZXh0XVxuICAgICAgICB9KSwgc2xvdHMuZGVmYXVsdD8uKCksIHNsb3RzLmFjdGlvbnMgJiYgX2NyZWF0ZVZOb2RlKFZDYXJkQWN0aW9ucywgbnVsbCwge1xuICAgICAgICAgIGRlZmF1bHQ6IHNsb3RzLmFjdGlvbnNcbiAgICAgICAgfSksIGdlbk92ZXJsYXlzKGlzQ2xpY2thYmxlLnZhbHVlLCAndi1jYXJkJyldXG4gICAgICB9KSwgW1tfcmVzb2x2ZURpcmVjdGl2ZShcInJpcHBsZVwiKSwgaXNDbGlja2FibGUudmFsdWUgJiYgcHJvcHMucmlwcGxlXV0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ2FyZC5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBrZXlzIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5jb25zdCBoYW5kbGVHZXN0dXJlID0gd3JhcHBlciA9PiB7XG4gIGNvbnN0IHtcbiAgICB0b3VjaHN0YXJ0WCxcbiAgICB0b3VjaGVuZFgsXG4gICAgdG91Y2hzdGFydFksXG4gICAgdG91Y2hlbmRZXG4gIH0gPSB3cmFwcGVyO1xuICBjb25zdCBkaXJSYXRpbyA9IDAuNTtcbiAgY29uc3QgbWluRGlzdGFuY2UgPSAxNjtcbiAgd3JhcHBlci5vZmZzZXRYID0gdG91Y2hlbmRYIC0gdG91Y2hzdGFydFg7XG4gIHdyYXBwZXIub2Zmc2V0WSA9IHRvdWNoZW5kWSAtIHRvdWNoc3RhcnRZO1xuICBpZiAoTWF0aC5hYnMod3JhcHBlci5vZmZzZXRZKSA8IGRpclJhdGlvICogTWF0aC5hYnMod3JhcHBlci5vZmZzZXRYKSkge1xuICAgIHdyYXBwZXIubGVmdCAmJiB0b3VjaGVuZFggPCB0b3VjaHN0YXJ0WCAtIG1pbkRpc3RhbmNlICYmIHdyYXBwZXIubGVmdCh3cmFwcGVyKTtcbiAgICB3cmFwcGVyLnJpZ2h0ICYmIHRvdWNoZW5kWCA+IHRvdWNoc3RhcnRYICsgbWluRGlzdGFuY2UgJiYgd3JhcHBlci5yaWdodCh3cmFwcGVyKTtcbiAgfVxuICBpZiAoTWF0aC5hYnMod3JhcHBlci5vZmZzZXRYKSA8IGRpclJhdGlvICogTWF0aC5hYnMod3JhcHBlci5vZmZzZXRZKSkge1xuICAgIHdyYXBwZXIudXAgJiYgdG91Y2hlbmRZIDwgdG91Y2hzdGFydFkgLSBtaW5EaXN0YW5jZSAmJiB3cmFwcGVyLnVwKHdyYXBwZXIpO1xuICAgIHdyYXBwZXIuZG93biAmJiB0b3VjaGVuZFkgPiB0b3VjaHN0YXJ0WSArIG1pbkRpc3RhbmNlICYmIHdyYXBwZXIuZG93bih3cmFwcGVyKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHRvdWNoc3RhcnQoZXZlbnQsIHdyYXBwZXIpIHtcbiAgY29uc3QgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgd3JhcHBlci50b3VjaHN0YXJ0WCA9IHRvdWNoLmNsaWVudFg7XG4gIHdyYXBwZXIudG91Y2hzdGFydFkgPSB0b3VjaC5jbGllbnRZO1xuICB3cmFwcGVyLnN0YXJ0Py4oe1xuICAgIG9yaWdpbmFsRXZlbnQ6IGV2ZW50LFxuICAgIC4uLndyYXBwZXJcbiAgfSk7XG59XG5mdW5jdGlvbiB0b3VjaGVuZChldmVudCwgd3JhcHBlcikge1xuICBjb25zdCB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICB3cmFwcGVyLnRvdWNoZW5kWCA9IHRvdWNoLmNsaWVudFg7XG4gIHdyYXBwZXIudG91Y2hlbmRZID0gdG91Y2guY2xpZW50WTtcbiAgd3JhcHBlci5lbmQ/Lih7XG4gICAgb3JpZ2luYWxFdmVudDogZXZlbnQsXG4gICAgLi4ud3JhcHBlclxuICB9KTtcbiAgaGFuZGxlR2VzdHVyZSh3cmFwcGVyKTtcbn1cbmZ1bmN0aW9uIHRvdWNobW92ZShldmVudCwgd3JhcHBlcikge1xuICBjb25zdCB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICB3cmFwcGVyLnRvdWNobW92ZVggPSB0b3VjaC5jbGllbnRYO1xuICB3cmFwcGVyLnRvdWNobW92ZVkgPSB0b3VjaC5jbGllbnRZO1xuICB3cmFwcGVyLm1vdmU/Lih7XG4gICAgb3JpZ2luYWxFdmVudDogZXZlbnQsXG4gICAgLi4ud3JhcHBlclxuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUhhbmRsZXJzKCkge1xuICBsZXQgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICBjb25zdCB3cmFwcGVyID0ge1xuICAgIHRvdWNoc3RhcnRYOiAwLFxuICAgIHRvdWNoc3RhcnRZOiAwLFxuICAgIHRvdWNoZW5kWDogMCxcbiAgICB0b3VjaGVuZFk6IDAsXG4gICAgdG91Y2htb3ZlWDogMCxcbiAgICB0b3VjaG1vdmVZOiAwLFxuICAgIG9mZnNldFg6IDAsXG4gICAgb2Zmc2V0WTogMCxcbiAgICBsZWZ0OiB2YWx1ZS5sZWZ0LFxuICAgIHJpZ2h0OiB2YWx1ZS5yaWdodCxcbiAgICB1cDogdmFsdWUudXAsXG4gICAgZG93bjogdmFsdWUuZG93bixcbiAgICBzdGFydDogdmFsdWUuc3RhcnQsXG4gICAgbW92ZTogdmFsdWUubW92ZSxcbiAgICBlbmQ6IHZhbHVlLmVuZFxuICB9O1xuICByZXR1cm4ge1xuICAgIHRvdWNoc3RhcnQ6IGUgPT4gdG91Y2hzdGFydChlLCB3cmFwcGVyKSxcbiAgICB0b3VjaGVuZDogZSA9PiB0b3VjaGVuZChlLCB3cmFwcGVyKSxcbiAgICB0b3VjaG1vdmU6IGUgPT4gdG91Y2htb3ZlKGUsIHdyYXBwZXIpXG4gIH07XG59XG5mdW5jdGlvbiBtb3VudGVkKGVsLCBiaW5kaW5nKSB7XG4gIGNvbnN0IHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgY29uc3QgdGFyZ2V0ID0gdmFsdWU/LnBhcmVudCA/IGVsLnBhcmVudEVsZW1lbnQgOiBlbDtcbiAgY29uc3Qgb3B0aW9ucyA9IHZhbHVlPy5vcHRpb25zID8/IHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH07XG4gIGNvbnN0IHVpZCA9IGJpbmRpbmcuaW5zdGFuY2U/LiQudWlkOyAvLyBUT0RPOiB1c2UgY3VzdG9tIHVpZCBnZW5lcmF0b3JcblxuICBpZiAoIXRhcmdldCB8fCAhdWlkKSByZXR1cm47XG4gIGNvbnN0IGhhbmRsZXJzID0gY3JlYXRlSGFuZGxlcnMoYmluZGluZy52YWx1ZSk7XG4gIHRhcmdldC5fdG91Y2hIYW5kbGVycyA9IHRhcmdldC5fdG91Y2hIYW5kbGVycyA/PyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0YXJnZXQuX3RvdWNoSGFuZGxlcnNbdWlkXSA9IGhhbmRsZXJzO1xuICBrZXlzKGhhbmRsZXJzKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyc1tldmVudE5hbWVdLCBvcHRpb25zKTtcbiAgfSk7XG59XG5mdW5jdGlvbiB1bm1vdW50ZWQoZWwsIGJpbmRpbmcpIHtcbiAgY29uc3QgdGFyZ2V0ID0gYmluZGluZy52YWx1ZT8ucGFyZW50ID8gZWwucGFyZW50RWxlbWVudCA6IGVsO1xuICBjb25zdCB1aWQgPSBiaW5kaW5nLmluc3RhbmNlPy4kLnVpZDtcbiAgaWYgKCF0YXJnZXQ/Ll90b3VjaEhhbmRsZXJzIHx8ICF1aWQpIHJldHVybjtcbiAgY29uc3QgaGFuZGxlcnMgPSB0YXJnZXQuX3RvdWNoSGFuZGxlcnNbdWlkXTtcbiAga2V5cyhoYW5kbGVycykuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcnNbZXZlbnROYW1lXSk7XG4gIH0pO1xuICBkZWxldGUgdGFyZ2V0Ll90b3VjaEhhbmRsZXJzW3VpZF07XG59XG5leHBvcnQgY29uc3QgVG91Y2ggPSB7XG4gIG1vdW50ZWQsXG4gIHVubW91bnRlZFxufTtcbmV4cG9ydCBkZWZhdWx0IFRvdWNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCIsImltcG9ydCB7IHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZXaW5kb3cuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZCdG4gfSBmcm9tIFwiLi4vVkJ0bi9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyB1c2VHcm91cCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ncm91cC5tanNcIjtcbmltcG9ydCB7IHVzZUxvY2FsZSwgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBEaXJlY3RpdmVzXG5pbXBvcnQgeyBUb3VjaCB9IGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL3RvdWNoL2luZGV4Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBwcm92aWRlLCByZWYsIHNoYWxsb3dSZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgVldpbmRvd1N5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6di13aW5kb3cnKTtcbmV4cG9ydCBjb25zdCBWV2luZG93R3JvdXBTeW1ib2wgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5OnYtd2luZG93LWdyb3VwJyk7XG5leHBvcnQgY29uc3QgbWFrZVZXaW5kb3dQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbnRpbnVvdXM6IEJvb2xlYW4sXG4gIG5leHRJY29uOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZywgRnVuY3Rpb24sIE9iamVjdF0sXG4gICAgZGVmYXVsdDogJyRuZXh0J1xuICB9LFxuICBwcmV2SWNvbjoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmcsIEZ1bmN0aW9uLCBPYmplY3RdLFxuICAgIGRlZmF1bHQ6ICckcHJldidcbiAgfSxcbiAgcmV2ZXJzZTogQm9vbGVhbixcbiAgc2hvd0Fycm93czoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgIHZhbGlkYXRvcjogdiA9PiB0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nIHx8IHYgPT09ICdob3ZlcidcbiAgfSxcbiAgdG91Y2g6IHtcbiAgICB0eXBlOiBbT2JqZWN0LCBCb29sZWFuXSxcbiAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgfSxcbiAgZGlyZWN0aW9uOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdob3Jpem9udGFsJ1xuICB9LFxuICBtb2RlbFZhbHVlOiBudWxsLFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgc2VsZWN0ZWRDbGFzczoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAndi13aW5kb3ctaXRlbS0tYWN0aXZlJ1xuICB9LFxuICAvLyBUT0RPOiBtYW5kYXRvcnkgc2hvdWxkIHByb2JhYmx5IG5vdCBiZSBleHBvc2VkIGJ1dCBkbyB0aGlzIGZvciBub3dcbiAgbWFuZGF0b3J5OiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ10sXG4gICAgZGVmYXVsdDogJ2ZvcmNlJ1xuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWV2luZG93Jyk7XG5leHBvcnQgY29uc3QgVldpbmRvdyA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWV2luZG93JyxcbiAgZGlyZWN0aXZlczoge1xuICAgIFRvdWNoXG4gIH0sXG4gIHByb3BzOiBtYWtlVldpbmRvd1Byb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdiA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgaXNSdGxcbiAgICB9ID0gdXNlUnRsKCk7XG4gICAgY29uc3Qge1xuICAgICAgdFxuICAgIH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCBncm91cCA9IHVzZUdyb3VwKHByb3BzLCBWV2luZG93R3JvdXBTeW1ib2wpO1xuICAgIGNvbnN0IHJvb3RSZWYgPSByZWYoKTtcbiAgICBjb25zdCBpc1J0bFJldmVyc2UgPSBjb21wdXRlZCgoKSA9PiBpc1J0bC52YWx1ZSA/ICFwcm9wcy5yZXZlcnNlIDogcHJvcHMucmV2ZXJzZSk7XG4gICAgY29uc3QgaXNSZXZlcnNlZCA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIGNvbnN0IHRyYW5zaXRpb24gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBheGlzID0gcHJvcHMuZGlyZWN0aW9uID09PSAndmVydGljYWwnID8gJ3knIDogJ3gnO1xuICAgICAgY29uc3QgcmV2ZXJzZSA9IGlzUnRsUmV2ZXJzZS52YWx1ZSA/ICFpc1JldmVyc2VkLnZhbHVlIDogaXNSZXZlcnNlZC52YWx1ZTtcbiAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IHJldmVyc2UgPyAnLXJldmVyc2UnIDogJyc7XG4gICAgICByZXR1cm4gYHYtd2luZG93LSR7YXhpc30ke2RpcmVjdGlvbn0tdHJhbnNpdGlvbmA7XG4gICAgfSk7XG4gICAgY29uc3QgdHJhbnNpdGlvbkNvdW50ID0gc2hhbGxvd1JlZigwKTtcbiAgICBjb25zdCB0cmFuc2l0aW9uSGVpZ2h0ID0gcmVmKHVuZGVmaW5lZCk7XG4gICAgY29uc3QgYWN0aXZlSW5kZXggPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gZ3JvdXAuaXRlbXMudmFsdWUuZmluZEluZGV4KGl0ZW0gPT4gZ3JvdXAuc2VsZWN0ZWQudmFsdWUuaW5jbHVkZXMoaXRlbS5pZCkpO1xuICAgIH0pO1xuICAgIHdhdGNoKGFjdGl2ZUluZGV4LCAobmV3VmFsLCBvbGRWYWwpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW1zTGVuZ3RoID0gZ3JvdXAuaXRlbXMudmFsdWUubGVuZ3RoO1xuICAgICAgY29uc3QgbGFzdEluZGV4ID0gaXRlbXNMZW5ndGggLSAxO1xuICAgICAgaWYgKGl0ZW1zTGVuZ3RoIDw9IDIpIHtcbiAgICAgICAgaXNSZXZlcnNlZC52YWx1ZSA9IG5ld1ZhbCA8IG9sZFZhbDtcbiAgICAgIH0gZWxzZSBpZiAobmV3VmFsID09PSBsYXN0SW5kZXggJiYgb2xkVmFsID09PSAwKSB7XG4gICAgICAgIGlzUmV2ZXJzZWQudmFsdWUgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChuZXdWYWwgPT09IDAgJiYgb2xkVmFsID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgaXNSZXZlcnNlZC52YWx1ZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXNSZXZlcnNlZC52YWx1ZSA9IG5ld1ZhbCA8IG9sZFZhbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwcm92aWRlKFZXaW5kb3dTeW1ib2wsIHtcbiAgICAgIHRyYW5zaXRpb24sXG4gICAgICBpc1JldmVyc2VkLFxuICAgICAgdHJhbnNpdGlvbkNvdW50LFxuICAgICAgdHJhbnNpdGlvbkhlaWdodCxcbiAgICAgIHJvb3RSZWZcbiAgICB9KTtcbiAgICBjb25zdCBjYW5Nb3ZlQmFjayA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmNvbnRpbnVvdXMgfHwgYWN0aXZlSW5kZXgudmFsdWUgIT09IDApO1xuICAgIGNvbnN0IGNhbk1vdmVGb3J3YXJkID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuY29udGludW91cyB8fCBhY3RpdmVJbmRleC52YWx1ZSAhPT0gZ3JvdXAuaXRlbXMudmFsdWUubGVuZ3RoIC0gMSk7XG4gICAgZnVuY3Rpb24gcHJldigpIHtcbiAgICAgIGNhbk1vdmVCYWNrLnZhbHVlICYmIGdyb3VwLnByZXYoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIGNhbk1vdmVGb3J3YXJkLnZhbHVlICYmIGdyb3VwLm5leHQoKTtcbiAgICB9XG4gICAgY29uc3QgYXJyb3dzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgYXJyb3dzID0gW107XG4gICAgICBjb25zdCBwcmV2UHJvcHMgPSB7XG4gICAgICAgIGljb246IGlzUnRsLnZhbHVlID8gcHJvcHMubmV4dEljb24gOiBwcm9wcy5wcmV2SWNvbixcbiAgICAgICAgY2xhc3M6IGB2LXdpbmRvd19fJHtpc1J0bFJldmVyc2UudmFsdWUgPyAncmlnaHQnIDogJ2xlZnQnfWAsXG4gICAgICAgIG9uQ2xpY2s6IGdyb3VwLnByZXYsXG4gICAgICAgIGFyaWFMYWJlbDogdCgnJHZ1ZXRpZnkuY2Fyb3VzZWwucHJldicpXG4gICAgICB9O1xuICAgICAgYXJyb3dzLnB1c2goY2FuTW92ZUJhY2sudmFsdWUgPyBzbG90cy5wcmV2ID8gc2xvdHMucHJldih7XG4gICAgICAgIHByb3BzOiBwcmV2UHJvcHNcbiAgICAgIH0pIDogX2NyZWF0ZVZOb2RlKFZCdG4sIHByZXZQcm9wcywgbnVsbCkgOiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwgbnVsbCwgbnVsbCkpO1xuICAgICAgY29uc3QgbmV4dFByb3BzID0ge1xuICAgICAgICBpY29uOiBpc1J0bC52YWx1ZSA/IHByb3BzLnByZXZJY29uIDogcHJvcHMubmV4dEljb24sXG4gICAgICAgIGNsYXNzOiBgdi13aW5kb3dfXyR7aXNSdGxSZXZlcnNlLnZhbHVlID8gJ2xlZnQnIDogJ3JpZ2h0J31gLFxuICAgICAgICBvbkNsaWNrOiBncm91cC5uZXh0LFxuICAgICAgICBhcmlhTGFiZWw6IHQoJyR2dWV0aWZ5LmNhcm91c2VsLm5leHQnKVxuICAgICAgfTtcbiAgICAgIGFycm93cy5wdXNoKGNhbk1vdmVGb3J3YXJkLnZhbHVlID8gc2xvdHMubmV4dCA/IHNsb3RzLm5leHQoe1xuICAgICAgICBwcm9wczogbmV4dFByb3BzXG4gICAgICB9KSA6IF9jcmVhdGVWTm9kZShWQnRuLCBuZXh0UHJvcHMsIG51bGwpIDogX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIG51bGwsIG51bGwpKTtcbiAgICAgIHJldHVybiBhcnJvd3M7XG4gICAgfSk7XG4gICAgY29uc3QgdG91Y2hPcHRpb25zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLnRvdWNoID09PSBmYWxzZSkgcmV0dXJuIHByb3BzLnRvdWNoO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbGVmdDogKCkgPT4ge1xuICAgICAgICAgIGlzUnRsUmV2ZXJzZS52YWx1ZSA/IHByZXYoKSA6IG5leHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmlnaHQ6ICgpID0+IHtcbiAgICAgICAgICBpc1J0bFJldmVyc2UudmFsdWUgPyBuZXh0KCkgOiBwcmV2KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0OiBfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnRcbiAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgb3JpZ2luYWxFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIC4uLihwcm9wcy50b3VjaCA9PT0gdHJ1ZSA/IHt9IDogcHJvcHMudG91Y2gpXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJyZWZcIjogcm9vdFJlZixcbiAgICAgIFwiY2xhc3NcIjogWyd2LXdpbmRvdycsIHtcbiAgICAgICAgJ3Ytd2luZG93LS1zaG93LWFycm93cy1vbi1ob3Zlcic6IHByb3BzLnNob3dBcnJvd3MgPT09ICdob3ZlcidcbiAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi13aW5kb3dfX2NvbnRhaW5lclwiLFxuICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICBoZWlnaHQ6IHRyYW5zaXRpb25IZWlnaHQudmFsdWVcbiAgICAgICAgfVxuICAgICAgfSwgW3Nsb3RzLmRlZmF1bHQ/Lih7XG4gICAgICAgIGdyb3VwXG4gICAgICB9KSwgcHJvcHMuc2hvd0Fycm93cyAhPT0gZmFsc2UgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtd2luZG93X19jb250cm9sc1wiXG4gICAgICB9LCBbYXJyb3dzLnZhbHVlXSldKSwgc2xvdHMuYWRkaXRpb25hbD8uKHtcbiAgICAgICAgZ3JvdXBcbiAgICAgIH0pXVxuICAgIH0pLCBbW19yZXNvbHZlRGlyZWN0aXZlKFwidG91Y2hcIiksIHRvdWNoT3B0aW9ucy52YWx1ZV1dKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdyb3VwXG4gICAgfTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WV2luZG93Lm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIEZyYWdtZW50IGFzIF9GcmFnbWVudCB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQ2Fyb3VzZWwuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZCdG4gfSBmcm9tIFwiLi4vVkJ0bi9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZEZWZhdWx0c1Byb3ZpZGVyIH0gZnJvbSBcIi4uL1ZEZWZhdWx0c1Byb3ZpZGVyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVlByb2dyZXNzTGluZWFyIH0gZnJvbSBcIi4uL1ZQcm9ncmVzc0xpbmVhci9pbmRleC5tanNcIjtcbmltcG9ydCB7IG1ha2VWV2luZG93UHJvcHMsIFZXaW5kb3cgfSBmcm9tIFwiLi4vVldpbmRvdy9WV2luZG93Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgb25Nb3VudGVkLCByZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQsIGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZDYXJvdXNlbFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29sb3I6IFN0cmluZyxcbiAgY3ljbGU6IEJvb2xlYW4sXG4gIGRlbGltaXRlckljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRkZWxpbWl0ZXInXG4gIH0sXG4gIGhlaWdodDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogNTAwXG4gIH0sXG4gIGhpZGVEZWxpbWl0ZXJzOiBCb29sZWFuLFxuICBoaWRlRGVsaW1pdGVyQmFja2dyb3VuZDogQm9vbGVhbixcbiAgaW50ZXJ2YWw6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDYwMDAsXG4gICAgdmFsaWRhdG9yOiB2YWx1ZSA9PiBOdW1iZXIodmFsdWUpID4gMFxuICB9LFxuICBwcm9ncmVzczogW0Jvb2xlYW4sIFN0cmluZ10sXG4gIHZlcnRpY2FsRGVsaW1pdGVyczogW0Jvb2xlYW4sIFN0cmluZ10sXG4gIC4uLm1ha2VWV2luZG93UHJvcHMoe1xuICAgIGNvbnRpbnVvdXM6IHRydWUsXG4gICAgbWFuZGF0b3J5OiAnZm9yY2UnLFxuICAgIHNob3dBcnJvd3M6IHRydWVcbiAgfSlcbn0sICdWQ2Fyb3VzZWwnKTtcbmV4cG9ydCBjb25zdCBWQ2Fyb3VzZWwgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkNhcm91c2VsJyxcbiAgcHJvcHM6IG1ha2VWQ2Fyb3VzZWxQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbCA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgbW9kZWwgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgY29uc3Qge1xuICAgICAgdFxuICAgIH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCB3aW5kb3dSZWYgPSByZWYoKTtcbiAgICBsZXQgc2xpZGVUaW1lb3V0ID0gLTE7XG4gICAgd2F0Y2gobW9kZWwsIHJlc3RhcnRUaW1lb3V0KTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5pbnRlcnZhbCwgcmVzdGFydFRpbWVvdXQpO1xuICAgIHdhdGNoKCgpID0+IHByb3BzLmN5Y2xlLCB2YWwgPT4ge1xuICAgICAgaWYgKHZhbCkgcmVzdGFydFRpbWVvdXQoKTtlbHNlIHdpbmRvdy5jbGVhclRpbWVvdXQoc2xpZGVUaW1lb3V0KTtcbiAgICB9KTtcbiAgICBvbk1vdW50ZWQoc3RhcnRUaW1lb3V0KTtcbiAgICBmdW5jdGlvbiBzdGFydFRpbWVvdXQoKSB7XG4gICAgICBpZiAoIXByb3BzLmN5Y2xlIHx8ICF3aW5kb3dSZWYudmFsdWUpIHJldHVybjtcbiAgICAgIHNsaWRlVGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KHdpbmRvd1JlZi52YWx1ZS5ncm91cC5uZXh0LCArcHJvcHMuaW50ZXJ2YWwgPiAwID8gK3Byb3BzLmludGVydmFsIDogNjAwMCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc3RhcnRUaW1lb3V0KCkge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dChzbGlkZVRpbWVvdXQpO1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzdGFydFRpbWVvdXQpO1xuICAgIH1cbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgW3dpbmRvd1Byb3BzXSA9IFZXaW5kb3cuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWV2luZG93LCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwicmVmXCI6IHdpbmRvd1JlZlxuICAgICAgfSwgd2luZG93UHJvcHMsIHtcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IG1vZGVsLnZhbHVlID0gJGV2ZW50LFxuICAgICAgICBcImNsYXNzXCI6IFsndi1jYXJvdXNlbCcsIHtcbiAgICAgICAgICAndi1jYXJvdXNlbC0taGlkZS1kZWxpbWl0ZXItYmFja2dyb3VuZCc6IHByb3BzLmhpZGVEZWxpbWl0ZXJCYWNrZ3JvdW5kLFxuICAgICAgICAgICd2LWNhcm91c2VsLS12ZXJ0aWNhbC1kZWxpbWl0ZXJzJzogcHJvcHMudmVydGljYWxEZWxpbWl0ZXJzXG4gICAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbe1xuICAgICAgICAgIGhlaWdodDogY29udmVydFRvVW5pdChwcm9wcy5oZWlnaHQpXG4gICAgICAgIH0sIHByb3BzLnN0eWxlXVxuICAgICAgfSksIHtcbiAgICAgICAgZGVmYXVsdDogc2xvdHMuZGVmYXVsdCxcbiAgICAgICAgYWRkaXRpb25hbDogX3JlZjIgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBncm91cFxuICAgICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgWyFwcm9wcy5oaWRlRGVsaW1pdGVycyAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtY2Fyb3VzZWxfX2NvbnRyb2xzXCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICAgICAgbGVmdDogcHJvcHMudmVydGljYWxEZWxpbWl0ZXJzID09PSAnbGVmdCcgJiYgcHJvcHMudmVydGljYWxEZWxpbWl0ZXJzID8gMCA6ICdhdXRvJyxcbiAgICAgICAgICAgICAgcmlnaHQ6IHByb3BzLnZlcnRpY2FsRGVsaW1pdGVycyA9PT0gJ3JpZ2h0JyA/IDAgOiAnYXV0bydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBbZ3JvdXAuaXRlbXMudmFsdWUubGVuZ3RoID4gMCAmJiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgICBWQnRuOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICAgICAgICAgIGljb246IHByb3BzLmRlbGltaXRlckljb24sXG4gICAgICAgICAgICAgICAgc2l6ZTogJ3gtc21hbGwnLFxuICAgICAgICAgICAgICAgIHZhcmlhbnQ6ICd0ZXh0J1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJzY29wZWRcIjogdHJ1ZVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtncm91cC5pdGVtcy52YWx1ZS5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgICAgICAgICAgIGlkOiBgY2Fyb3VzZWwtaXRlbS0ke2l0ZW0uaWR9YCxcbiAgICAgICAgICAgICAgICAnYXJpYS1sYWJlbCc6IHQoJyR2dWV0aWZ5LmNhcm91c2VsLmFyaWFMYWJlbC5kZWxpbWl0ZXInLCBpbmRleCArIDEsIGdyb3VwLml0ZW1zLnZhbHVlLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgY2xhc3M6IFtncm91cC5pc1NlbGVjdGVkKGl0ZW0uaWQpICYmICd2LWJ0bi0tYWN0aXZlJ10sXG4gICAgICAgICAgICAgICAgb25DbGljazogKCkgPT4gZ3JvdXAuc2VsZWN0KGl0ZW0uaWQsIHRydWUpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHJldHVybiBzbG90cy5pdGVtID8gc2xvdHMuaXRlbSh7XG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICB9KSA6IF9jcmVhdGVWTm9kZShWQnRuLCBfbWVyZ2VQcm9wcyhpdGVtLCBwcm9wcyksIG51bGwpO1xuICAgICAgICAgICAgfSldXG4gICAgICAgICAgfSldKSwgcHJvcHMucHJvZ3Jlc3MgJiYgX2NyZWF0ZVZOb2RlKFZQcm9ncmVzc0xpbmVhciwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtY2Fyb3VzZWxfX3Byb2dyZXNzXCIsXG4gICAgICAgICAgICBcImNvbG9yXCI6IHR5cGVvZiBwcm9wcy5wcm9ncmVzcyA9PT0gJ3N0cmluZycgPyBwcm9wcy5wcm9ncmVzcyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIFwibW9kZWxWYWx1ZVwiOiAoZ3JvdXAuZ2V0SXRlbUluZGV4KG1vZGVsLnZhbHVlKSArIDEpIC8gZ3JvdXAuaXRlbXMudmFsdWUubGVuZ3RoICogMTAwXG4gICAgICAgICAgfSwgbnVsbCldKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJldjogc2xvdHMucHJldixcbiAgICAgICAgbmV4dDogc2xvdHMubmV4dFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDYXJvdXNlbC5tanMubWFwIiwiaW1wb3J0IHsgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIHZTaG93IGFzIF92U2hvdyB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUdyb3VwSXRlbVByb3BzLCB1c2VHcm91cEl0ZW0gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZ3JvdXAubWpzXCI7XG5pbXBvcnQgeyBtYWtlTGF6eVByb3BzLCB1c2VMYXp5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xhenkubWpzXCI7XG5pbXBvcnQgeyB1c2VTc3JCb290IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NzckJvb3QubWpzXCI7XG5pbXBvcnQgeyBNYXliZVRyYW5zaXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdHJhbnNpdGlvbi5tanNcIjsgLy8gRGlyZWN0aXZlc1xuaW1wb3J0IFRvdWNoIGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL3RvdWNoL2luZGV4Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBpbmplY3QsIG5leHRUaWNrLCBzaGFsbG93UmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQsIGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5pbXBvcnQgeyBWV2luZG93R3JvdXBTeW1ib2wsIFZXaW5kb3dTeW1ib2wgfSBmcm9tIFwiLi9WV2luZG93Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWV2luZG93SXRlbVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgcmV2ZXJzZVRyYW5zaXRpb246IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgfSxcbiAgdHJhbnNpdGlvbjoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUdyb3VwSXRlbVByb3BzKCksXG4gIC4uLm1ha2VMYXp5UHJvcHMoKVxufSwgJ1ZXaW5kb3dJdGVtJyk7XG5leHBvcnQgY29uc3QgVldpbmRvd0l0ZW0gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVldpbmRvd0l0ZW0nLFxuICBkaXJlY3RpdmVzOiB7XG4gICAgVG91Y2hcbiAgfSxcbiAgcHJvcHM6IG1ha2VWV2luZG93SXRlbVByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ2dyb3VwOnNlbGVjdGVkJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB3aW5kb3cgPSBpbmplY3QoVldpbmRvd1N5bWJvbCk7XG4gICAgY29uc3QgZ3JvdXBJdGVtID0gdXNlR3JvdXBJdGVtKHByb3BzLCBWV2luZG93R3JvdXBTeW1ib2wpO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzQm9vdGVkXG4gICAgfSA9IHVzZVNzckJvb3QoKTtcbiAgICBpZiAoIXdpbmRvdyB8fCAhZ3JvdXBJdGVtKSB0aHJvdyBuZXcgRXJyb3IoJ1tWdWV0aWZ5XSBWV2luZG93SXRlbSBtdXN0IGJlIHVzZWQgaW5zaWRlIFZXaW5kb3cnKTtcbiAgICBjb25zdCBpc1RyYW5zaXRpb25pbmcgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgICBjb25zdCBoYXNUcmFuc2l0aW9uID0gY29tcHV0ZWQoKCkgPT4gaXNCb290ZWQudmFsdWUgJiYgKHdpbmRvdy5pc1JldmVyc2VkLnZhbHVlID8gcHJvcHMucmV2ZXJzZVRyYW5zaXRpb24gIT09IGZhbHNlIDogcHJvcHMudHJhbnNpdGlvbiAhPT0gZmFsc2UpKTtcbiAgICBmdW5jdGlvbiBvbkFmdGVyVHJhbnNpdGlvbigpIHtcbiAgICAgIGlmICghaXNUcmFuc2l0aW9uaW5nLnZhbHVlIHx8ICF3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBGaW5hbGl6ZSB0cmFuc2l0aW9uIHN0YXRlLlxuICAgICAgaXNUcmFuc2l0aW9uaW5nLnZhbHVlID0gZmFsc2U7XG4gICAgICBpZiAod2luZG93LnRyYW5zaXRpb25Db3VudC52YWx1ZSA+IDApIHtcbiAgICAgICAgd2luZG93LnRyYW5zaXRpb25Db3VudC52YWx1ZSAtPSAxO1xuXG4gICAgICAgIC8vIFJlbW92ZSBjb250YWluZXIgaGVpZ2h0IGlmIHdlIGFyZSBvdXQgb2YgdHJhbnNpdGlvbi5cbiAgICAgICAgaWYgKHdpbmRvdy50cmFuc2l0aW9uQ291bnQudmFsdWUgPT09IDApIHtcbiAgICAgICAgICB3aW5kb3cudHJhbnNpdGlvbkhlaWdodC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkJlZm9yZVRyYW5zaXRpb24oKSB7XG4gICAgICBpZiAoaXNUcmFuc2l0aW9uaW5nLnZhbHVlIHx8ICF3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJbml0aWFsaXplIHRyYW5zaXRpb24gc3RhdGUgaGVyZS5cbiAgICAgIGlzVHJhbnNpdGlvbmluZy52YWx1ZSA9IHRydWU7XG4gICAgICBpZiAod2luZG93LnRyYW5zaXRpb25Db3VudC52YWx1ZSA9PT0gMCkge1xuICAgICAgICAvLyBTZXQgaW5pdGlhbCBoZWlnaHQgZm9yIGhlaWdodCB0cmFuc2l0aW9uLlxuICAgICAgICB3aW5kb3cudHJhbnNpdGlvbkhlaWdodC52YWx1ZSA9IGNvbnZlcnRUb1VuaXQod2luZG93LnJvb3RSZWYudmFsdWU/LmNsaWVudEhlaWdodCk7XG4gICAgICB9XG4gICAgICB3aW5kb3cudHJhbnNpdGlvbkNvdW50LnZhbHVlICs9IDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkNhbmNlbGxlZCgpIHtcbiAgICAgIG9uQWZ0ZXJUcmFuc2l0aW9uKCk7IC8vIFRoaXMgc2hvdWxkIGhhdmUgdGhlIHNhbWUgcGF0aCBhcyBub3JtYWwgdHJhbnNpdGlvbiBlbmQuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25FbnRlclRyYW5zaXRpb24oZWwpIHtcbiAgICAgIGlmICghaXNUcmFuc2l0aW9uaW5nLnZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgLy8gRG8gbm90IHNldCBoZWlnaHQgaWYgbm8gdHJhbnNpdGlvbiBvciBjYW5jZWxsZWQuXG4gICAgICAgIGlmICghaGFzVHJhbnNpdGlvbi52YWx1ZSB8fCAhaXNUcmFuc2l0aW9uaW5nLnZhbHVlIHx8ICF3aW5kb3cpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdHJhbnNpdGlvbiB0YXJnZXQgaGVpZ2h0LlxuICAgICAgICB3aW5kb3cudHJhbnNpdGlvbkhlaWdodC52YWx1ZSA9IGNvbnZlcnRUb1VuaXQoZWwuY2xpZW50SGVpZ2h0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB0cmFuc2l0aW9uID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IHdpbmRvdy5pc1JldmVyc2VkLnZhbHVlID8gcHJvcHMucmV2ZXJzZVRyYW5zaXRpb24gOiBwcm9wcy50cmFuc2l0aW9uO1xuICAgICAgcmV0dXJuICFoYXNUcmFuc2l0aW9uLnZhbHVlID8gZmFsc2UgOiB7XG4gICAgICAgIG5hbWU6IHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyA/IHdpbmRvdy50cmFuc2l0aW9uLnZhbHVlIDogbmFtZSxcbiAgICAgICAgb25CZWZvcmVFbnRlcjogb25CZWZvcmVUcmFuc2l0aW9uLFxuICAgICAgICBvbkFmdGVyRW50ZXI6IG9uQWZ0ZXJUcmFuc2l0aW9uLFxuICAgICAgICBvbkVudGVyQ2FuY2VsbGVkOiBvblRyYW5zaXRpb25DYW5jZWxsZWQsXG4gICAgICAgIG9uQmVmb3JlTGVhdmU6IG9uQmVmb3JlVHJhbnNpdGlvbixcbiAgICAgICAgb25BZnRlckxlYXZlOiBvbkFmdGVyVHJhbnNpdGlvbixcbiAgICAgICAgb25MZWF2ZUNhbmNlbGxlZDogb25UcmFuc2l0aW9uQ2FuY2VsbGVkLFxuICAgICAgICBvbkVudGVyOiBvbkVudGVyVHJhbnNpdGlvblxuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBoYXNDb250ZW50XG4gICAgfSA9IHVzZUxhenkocHJvcHMsIGdyb3VwSXRlbS5pc1NlbGVjdGVkKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKE1heWJlVHJhbnNpdGlvbiwge1xuICAgICAgXCJ0cmFuc2l0aW9uXCI6IHRyYW5zaXRpb24udmFsdWUsXG4gICAgICBcImRpc2FibGVkXCI6ICFpc0Jvb3RlZC52YWx1ZVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytd2luZG93LWl0ZW0nLCBncm91cEl0ZW0uc2VsZWN0ZWRDbGFzcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9LCBbaGFzQ29udGVudC52YWx1ZSAmJiBzbG90cy5kZWZhdWx0Py4oKV0pLCBbW192U2hvdywgZ3JvdXBJdGVtLmlzU2VsZWN0ZWQudmFsdWVdXSldXG4gICAgfSkpO1xuICAgIHJldHVybiB7XG4gICAgICBncm91cEl0ZW1cbiAgICB9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZXaW5kb3dJdGVtLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBtYWtlVkltZ1Byb3BzLCBWSW1nIH0gZnJvbSBcIi4uL1ZJbWcvVkltZy5tanNcIjtcbmltcG9ydCB7IG1ha2VWV2luZG93SXRlbVByb3BzLCBWV2luZG93SXRlbSB9IGZyb20gXCIuLi9WV2luZG93L1ZXaW5kb3dJdGVtLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZDYXJvdXNlbEl0ZW1Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC4uLm1ha2VWSW1nUHJvcHMoKSxcbiAgLi4ubWFrZVZXaW5kb3dJdGVtUHJvcHMoKVxufSwgJ1ZDYXJvdXNlbEl0ZW0nKTtcbmV4cG9ydCBjb25zdCBWQ2Fyb3VzZWxJdGVtID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZDYXJvdXNlbEl0ZW0nLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczogbWFrZVZDYXJvdXNlbEl0ZW1Qcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90cyxcbiAgICAgIGF0dHJzXG4gICAgfSA9IF9yZWY7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFtpbWdQcm9wc10gPSBWSW1nLmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIGNvbnN0IFt3aW5kb3dJdGVtUHJvcHNdID0gVldpbmRvd0l0ZW0uZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWV2luZG93SXRlbSwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcImNsYXNzXCI6IFwidi1jYXJvdXNlbC1pdGVtXCJcbiAgICAgIH0sIHdpbmRvd0l0ZW1Qcm9wcyksIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShWSW1nLCBfbWVyZ2VQcm9wcyhhdHRycywgaW1nUHJvcHMpLCBzbG90cyldXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ2Fyb3VzZWxJdGVtLm1qcy5tYXAiLCIvLyBTdHlsZXNcbmltcG9ydCBcIi4vVkNvZGUuY3NzXCI7XG5cbi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZDb2RlID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1jb2RlJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZDb2xvclBpY2tlckNhbnZhcy5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyB1c2VSZXNpemVPYnNlcnZlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yZXNpemVPYnNlcnZlci5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgb25Nb3VudGVkLCByZWYsIHNoYWxsb3dSZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNsYW1wLCBjb252ZXJ0VG9Vbml0LCBkZWZpbmVDb21wb25lbnQsIGdldEV2ZW50Q29vcmRpbmF0ZXMsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZDb2xvclBpY2tlckNhbnZhc1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29sb3I6IHtcbiAgICB0eXBlOiBPYmplY3RcbiAgfSxcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIGRvdFNpemU6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDEwXG4gIH0sXG4gIGhlaWdodDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMTUwXG4gIH0sXG4gIHdpZHRoOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAzMDBcbiAgfSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKClcbn0sICdWQ29sb3JQaWNrZXJDYW52YXMnKTtcbmV4cG9ydCBjb25zdCBWQ29sb3JQaWNrZXJDYW52YXMgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnVkNvbG9yUGlja2VyQ2FudmFzJyxcbiAgcHJvcHM6IG1ha2VWQ29sb3JQaWNrZXJDYW52YXNQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6Y29sb3InOiBjb2xvciA9PiB0cnVlLFxuICAgICd1cGRhdGU6cG9zaXRpb24nOiBodWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBlbWl0XG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgaXNJbnRlcmFjdGluZyA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIGNvbnN0IGNhbnZhc1JlZiA9IHJlZigpO1xuICAgIGNvbnN0IGNhbnZhc1dpZHRoID0gc2hhbGxvd1JlZihwYXJzZUZsb2F0KHByb3BzLndpZHRoKSk7XG4gICAgY29uc3QgY2FudmFzSGVpZ2h0ID0gc2hhbGxvd1JlZihwYXJzZUZsb2F0KHByb3BzLmhlaWdodCkpO1xuICAgIGNvbnN0IF9kb3RQb3NpdGlvbiA9IHJlZih7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH0pO1xuICAgIGNvbnN0IGRvdFBvc2l0aW9uID0gY29tcHV0ZWQoe1xuICAgICAgZ2V0OiAoKSA9PiBfZG90UG9zaXRpb24udmFsdWUsXG4gICAgICBzZXQodmFsKSB7XG4gICAgICAgIGlmICghY2FudmFzUmVmLnZhbHVlKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB4LFxuICAgICAgICAgIHlcbiAgICAgICAgfSA9IHZhbDtcbiAgICAgICAgZW1pdCgndXBkYXRlOmNvbG9yJywge1xuICAgICAgICAgIGg6IHByb3BzLmNvbG9yPy5oID8/IDAsXG4gICAgICAgICAgczogY2xhbXAoeCwgMCwgY2FudmFzV2lkdGgudmFsdWUpIC8gY2FudmFzV2lkdGgudmFsdWUsXG4gICAgICAgICAgdjogMSAtIGNsYW1wKHksIDAsIGNhbnZhc0hlaWdodC52YWx1ZSkgLyBjYW52YXNIZWlnaHQudmFsdWUsXG4gICAgICAgICAgYTogcHJvcHMuY29sb3I/LmEgPz8gMVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBkb3RTdHlsZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHgsXG4gICAgICAgIHlcbiAgICAgIH0gPSBkb3RQb3NpdGlvbi52YWx1ZTtcbiAgICAgIGNvbnN0IHJhZGl1cyA9IHBhcnNlSW50KHByb3BzLmRvdFNpemUsIDEwKSAvIDI7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogY29udmVydFRvVW5pdChwcm9wcy5kb3RTaXplKSxcbiAgICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KHByb3BzLmRvdFNpemUpLFxuICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoJHtjb252ZXJ0VG9Vbml0KHggLSByYWRpdXMpfSwgJHtjb252ZXJ0VG9Vbml0KHkgLSByYWRpdXMpfSlgXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIHJlc2l6ZVJlZlxuICAgIH0gPSB1c2VSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgIGlmICghcmVzaXplUmVmLnZhbHVlPy5vZmZzZXRQYXJlbnQpIHJldHVybjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgICAgfSA9IGVudHJpZXNbMF0uY29udGVudFJlY3Q7XG4gICAgICBjYW52YXNXaWR0aC52YWx1ZSA9IHdpZHRoO1xuICAgICAgY2FudmFzSGVpZ2h0LnZhbHVlID0gaGVpZ2h0O1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIHVwZGF0ZURvdFBvc2l0aW9uKHgsIHksIHJlY3QpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbGVmdCxcbiAgICAgICAgdG9wLFxuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0XG4gICAgICB9ID0gcmVjdDtcbiAgICAgIGRvdFBvc2l0aW9uLnZhbHVlID0ge1xuICAgICAgICB4OiBjbGFtcCh4IC0gbGVmdCwgMCwgd2lkdGgpLFxuICAgICAgICB5OiBjbGFtcCh5IC0gdG9wLCAwLCBoZWlnaHQpXG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZSkge1xuICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlZG93bicpIHtcbiAgICAgICAgLy8gUHJldmVudCB0ZXh0IHNlbGVjdGlvbiB3aGlsZSBkcmFnZ2luZ1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgIGhhbmRsZU1vdXNlTW92ZShlKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3VzZU1vdmUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVNb3VzZVVwKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBoYW5kbGVNb3VzZU1vdmUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgaGFuZGxlTW91c2VVcCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZShlKSB7XG4gICAgICBpZiAocHJvcHMuZGlzYWJsZWQgfHwgIWNhbnZhc1JlZi52YWx1ZSkgcmV0dXJuO1xuICAgICAgaXNJbnRlcmFjdGluZy52YWx1ZSA9IHRydWU7XG4gICAgICBjb25zdCBjb29yZHMgPSBnZXRFdmVudENvb3JkaW5hdGVzKGUpO1xuICAgICAgdXBkYXRlRG90UG9zaXRpb24oY29vcmRzLmNsaWVudFgsIGNvb3Jkcy5jbGllbnRZLCBjYW52YXNSZWYudmFsdWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVNb3VzZVVwKCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZU1vdXNlTW92ZSk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGhhbmRsZU1vdXNlVXApO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZU1vdXNlTW92ZSk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBoYW5kbGVNb3VzZVVwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlQ2FudmFzKCkge1xuICAgICAgaWYgKCFjYW52YXNSZWYudmFsdWUpIHJldHVybjtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGNhbnZhc1JlZi52YWx1ZTtcbiAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgaWYgKCFjdHgpIHJldHVybjtcbiAgICAgIGNvbnN0IHNhdHVyYXRpb25HcmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCBjYW52YXMud2lkdGgsIDApO1xuICAgICAgc2F0dXJhdGlvbkdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCAnaHNsYSgwLCAwJSwgMTAwJSwgMSknKTsgLy8gd2hpdGVcbiAgICAgIHNhdHVyYXRpb25HcmFkaWVudC5hZGRDb2xvclN0b3AoMSwgYGhzbGEoJHtwcm9wcy5jb2xvcj8uaCA/PyAwfSwgMTAwJSwgNTAlLCAxKWApO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHNhdHVyYXRpb25HcmFkaWVudDtcbiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgY29uc3QgdmFsdWVHcmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCAwLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgIHZhbHVlR3JhZGllbnQuYWRkQ29sb3JTdG9wKDAsICdoc2xhKDAsIDAlLCAxMDAlLCAwKScpOyAvLyB0cmFuc3BhcmVudFxuICAgICAgdmFsdWVHcmFkaWVudC5hZGRDb2xvclN0b3AoMSwgJ2hzbGEoMCwgMCUsIDAlLCAxKScpOyAvLyBibGFja1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHZhbHVlR3JhZGllbnQ7XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICB9XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuY29sb3I/LmgsIHVwZGF0ZUNhbnZhcywge1xuICAgICAgaW1tZWRpYXRlOiB0cnVlXG4gICAgfSk7XG4gICAgd2F0Y2goKCkgPT4gW2NhbnZhc1dpZHRoLnZhbHVlLCBjYW52YXNIZWlnaHQudmFsdWVdLCAobmV3VmFsLCBvbGRWYWwpID0+IHtcbiAgICAgIHVwZGF0ZUNhbnZhcygpO1xuICAgICAgX2RvdFBvc2l0aW9uLnZhbHVlID0ge1xuICAgICAgICB4OiBkb3RQb3NpdGlvbi52YWx1ZS54ICogbmV3VmFsWzBdIC8gb2xkVmFsWzBdLFxuICAgICAgICB5OiBkb3RQb3NpdGlvbi52YWx1ZS55ICogbmV3VmFsWzFdIC8gb2xkVmFsWzFdXG4gICAgICB9O1xuICAgIH0sIHtcbiAgICAgIGZsdXNoOiAncG9zdCdcbiAgICB9KTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5jb2xvciwgKCkgPT4ge1xuICAgICAgaWYgKGlzSW50ZXJhY3RpbmcudmFsdWUpIHtcbiAgICAgICAgaXNJbnRlcmFjdGluZy52YWx1ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBfZG90UG9zaXRpb24udmFsdWUgPSBwcm9wcy5jb2xvciA/IHtcbiAgICAgICAgeDogcHJvcHMuY29sb3IucyAqIGNhbnZhc1dpZHRoLnZhbHVlLFxuICAgICAgICB5OiAoMSAtIHByb3BzLmNvbG9yLnYpICogY2FudmFzSGVpZ2h0LnZhbHVlXG4gICAgICB9IDoge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwXG4gICAgICB9O1xuICAgIH0sIHtcbiAgICAgIGRlZXA6IHRydWUsXG4gICAgICBpbW1lZGlhdGU6IHRydWVcbiAgICB9KTtcbiAgICBvbk1vdW50ZWQoKCkgPT4gdXBkYXRlQ2FudmFzKCkpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJyZWZcIjogcmVzaXplUmVmLFxuICAgICAgXCJjbGFzc1wiOiBbJ3YtY29sb3ItcGlja2VyLWNhbnZhcycsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGUsXG4gICAgICBcIm9uTW91c2Vkb3duXCI6IGhhbmRsZU1vdXNlRG93bixcbiAgICAgIFwib25Ub3VjaHN0YXJ0UGFzc2l2ZVwiOiBoYW5kbGVNb3VzZURvd25cbiAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiY2FudmFzXCIsIHtcbiAgICAgIFwicmVmXCI6IGNhbnZhc1JlZixcbiAgICAgIFwid2lkdGhcIjogY2FudmFzV2lkdGgudmFsdWUsXG4gICAgICBcImhlaWdodFwiOiBjYW52YXNIZWlnaHQudmFsdWVcbiAgICB9LCBudWxsKSwgcHJvcHMuY29sb3IgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWNvbG9yLXBpY2tlci1jYW52YXNfX2RvdCcsIHtcbiAgICAgICAgJ3YtY29sb3ItcGlja2VyLWNhbnZhc19fZG90LS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkXG4gICAgICB9XSxcbiAgICAgIFwic3R5bGVcIjogZG90U3R5bGVzLnZhbHVlXG4gICAgfSwgbnVsbCldKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDb2xvclBpY2tlckNhbnZhcy5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBIZXhUb0hTViwgSFNMdG9IU1YsIEhTVnRvSGV4LCBIU1Z0b0hTTCwgSFNWdG9SR0IsIFJHQnRvSFNWIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWwvY29sb3JVdGlscy5tanNcIjtcbmltcG9ydCB7IGhhcyB9IGZyb20gXCIuLi8uLi8uLi91dGlsL2hlbHBlcnMubWpzXCI7IC8vIFR5cGVzXG5mdW5jdGlvbiBzdHJpcEFscGhhKGNvbG9yLCBzdHJpcEFscGhhKSB7XG4gIGlmIChzdHJpcEFscGhhKSB7XG4gICAgY29uc3Qge1xuICAgICAgYSxcbiAgICAgIC4uLnJlc3RcbiAgICB9ID0gY29sb3I7XG4gICAgcmV0dXJuIHJlc3Q7XG4gIH1cbiAgcmV0dXJuIGNvbG9yO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RDb2xvcihjb2xvciwgaW5wdXQpIHtcbiAgaWYgKGlucHV0ID09IG51bGwgfHwgdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGhleCA9IEhTVnRvSGV4KGNvbG9yKTtcbiAgICBpZiAoY29sb3IuYSA9PT0gMSkgcmV0dXJuIGhleC5zbGljZSgwLCA3KTtlbHNlIHJldHVybiBoZXg7XG4gIH1cbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcpIHtcbiAgICBsZXQgY29udmVydGVkO1xuICAgIGlmIChoYXMoaW5wdXQsIFsncicsICdnJywgJ2InXSkpIGNvbnZlcnRlZCA9IEhTVnRvUkdCKGNvbG9yKTtlbHNlIGlmIChoYXMoaW5wdXQsIFsnaCcsICdzJywgJ2wnXSkpIGNvbnZlcnRlZCA9IEhTVnRvSFNMKGNvbG9yKTtlbHNlIGlmIChoYXMoaW5wdXQsIFsnaCcsICdzJywgJ3YnXSkpIGNvbnZlcnRlZCA9IGNvbG9yO1xuICAgIHJldHVybiBzdHJpcEFscGhhKGNvbnZlcnRlZCwgIWhhcyhpbnB1dCwgWydhJ10pICYmIGNvbG9yLmEgPT09IDEpO1xuICB9XG4gIHJldHVybiBjb2xvcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNBbHBoYShjb2xvcikge1xuICBpZiAoIWNvbG9yKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNvbG9yLmxlbmd0aCA+IDc7XG4gIH1cbiAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gaGFzKGNvbG9yLCBbJ2EnXSkgfHwgaGFzKGNvbG9yLCBbJ2FscGhhJ10pO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBjb25zdCBudWxsQ29sb3IgPSB7XG4gIGg6IDAsXG4gIHM6IDAsXG4gIHY6IDEsXG4gIGE6IDFcbn07XG5jb25zdCByZ2JhID0ge1xuICBpbnB1dFByb3BzOiB7XG4gICAgdHlwZTogJ251bWJlcicsXG4gICAgbWluOiAwXG4gIH0sXG4gIGlucHV0czogW3tcbiAgICBsYWJlbDogJ1InLFxuICAgIG1heDogMjU1LFxuICAgIHN0ZXA6IDEsXG4gICAgZ2V0VmFsdWU6IGMgPT4gTWF0aC5yb3VuZChjLnIpLFxuICAgIGdldENvbG9yOiAoYywgdikgPT4gKHtcbiAgICAgIC4uLmMsXG4gICAgICByOiBOdW1iZXIodilcbiAgICB9KVxuICB9LCB7XG4gICAgbGFiZWw6ICdHJyxcbiAgICBtYXg6IDI1NSxcbiAgICBzdGVwOiAxLFxuICAgIGdldFZhbHVlOiBjID0+IE1hdGgucm91bmQoYy5nKSxcbiAgICBnZXRDb2xvcjogKGMsIHYpID0+ICh7XG4gICAgICAuLi5jLFxuICAgICAgZzogTnVtYmVyKHYpXG4gICAgfSlcbiAgfSwge1xuICAgIGxhYmVsOiAnQicsXG4gICAgbWF4OiAyNTUsXG4gICAgc3RlcDogMSxcbiAgICBnZXRWYWx1ZTogYyA9PiBNYXRoLnJvdW5kKGMuYiksXG4gICAgZ2V0Q29sb3I6IChjLCB2KSA9PiAoe1xuICAgICAgLi4uYyxcbiAgICAgIGI6IE51bWJlcih2KVxuICAgIH0pXG4gIH0sIHtcbiAgICBsYWJlbDogJ0EnLFxuICAgIG1heDogMSxcbiAgICBzdGVwOiAwLjAxLFxuICAgIGdldFZhbHVlOiBfcmVmID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGFcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgcmV0dXJuIGEgIT0gbnVsbCA/IE1hdGgucm91bmQoYSAqIDEwMCkgLyAxMDAgOiAxO1xuICAgIH0sXG4gICAgZ2V0Q29sb3I6IChjLCB2KSA9PiAoe1xuICAgICAgLi4uYyxcbiAgICAgIGE6IE51bWJlcih2KVxuICAgIH0pXG4gIH1dLFxuICB0bzogSFNWdG9SR0IsXG4gIGZyb206IFJHQnRvSFNWXG59O1xuY29uc3QgcmdiID0ge1xuICAuLi5yZ2JhLFxuICBpbnB1dHM6IHJnYmEuaW5wdXRzPy5zbGljZSgwLCAzKVxufTtcbmNvbnN0IGhzbGEgPSB7XG4gIGlucHV0UHJvcHM6IHtcbiAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICBtaW46IDBcbiAgfSxcbiAgaW5wdXRzOiBbe1xuICAgIGxhYmVsOiAnSCcsXG4gICAgbWF4OiAzNjAsXG4gICAgc3RlcDogMSxcbiAgICBnZXRWYWx1ZTogYyA9PiBNYXRoLnJvdW5kKGMuaCksXG4gICAgZ2V0Q29sb3I6IChjLCB2KSA9PiAoe1xuICAgICAgLi4uYyxcbiAgICAgIGg6IE51bWJlcih2KVxuICAgIH0pXG4gIH0sIHtcbiAgICBsYWJlbDogJ1MnLFxuICAgIG1heDogMSxcbiAgICBzdGVwOiAwLjAxLFxuICAgIGdldFZhbHVlOiBjID0+IE1hdGgucm91bmQoYy5zICogMTAwKSAvIDEwMCxcbiAgICBnZXRDb2xvcjogKGMsIHYpID0+ICh7XG4gICAgICAuLi5jLFxuICAgICAgczogTnVtYmVyKHYpXG4gICAgfSlcbiAgfSwge1xuICAgIGxhYmVsOiAnTCcsXG4gICAgbWF4OiAxLFxuICAgIHN0ZXA6IDAuMDEsXG4gICAgZ2V0VmFsdWU6IGMgPT4gTWF0aC5yb3VuZChjLmwgKiAxMDApIC8gMTAwLFxuICAgIGdldENvbG9yOiAoYywgdikgPT4gKHtcbiAgICAgIC4uLmMsXG4gICAgICBsOiBOdW1iZXIodilcbiAgICB9KVxuICB9LCB7XG4gICAgbGFiZWw6ICdBJyxcbiAgICBtYXg6IDEsXG4gICAgc3RlcDogMC4wMSxcbiAgICBnZXRWYWx1ZTogX3JlZjIgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgYVxuICAgICAgfSA9IF9yZWYyO1xuICAgICAgcmV0dXJuIGEgIT0gbnVsbCA/IE1hdGgucm91bmQoYSAqIDEwMCkgLyAxMDAgOiAxO1xuICAgIH0sXG4gICAgZ2V0Q29sb3I6IChjLCB2KSA9PiAoe1xuICAgICAgLi4uYyxcbiAgICAgIGE6IE51bWJlcih2KVxuICAgIH0pXG4gIH1dLFxuICB0bzogSFNWdG9IU0wsXG4gIGZyb206IEhTTHRvSFNWXG59O1xuY29uc3QgaHNsID0ge1xuICAuLi5oc2xhLFxuICBpbnB1dHM6IGhzbGEuaW5wdXRzLnNsaWNlKDAsIDMpXG59O1xuY29uc3QgaGV4YSA9IHtcbiAgaW5wdXRQcm9wczoge1xuICAgIHR5cGU6ICd0ZXh0J1xuICB9LFxuICBpbnB1dHM6IFt7XG4gICAgbGFiZWw6ICdIRVhBJyxcbiAgICBnZXRWYWx1ZTogYyA9PiBjLFxuICAgIGdldENvbG9yOiAoYywgdikgPT4gdlxuICB9XSxcbiAgdG86IEhTVnRvSGV4LFxuICBmcm9tOiBIZXhUb0hTVlxufTtcbmNvbnN0IGhleCA9IHtcbiAgLi4uaGV4YSxcbiAgaW5wdXRzOiBbe1xuICAgIGxhYmVsOiAnSEVYJyxcbiAgICBnZXRWYWx1ZTogYyA9PiBjLnNsaWNlKDAsIDcpLFxuICAgIGdldENvbG9yOiAoYywgdikgPT4gdlxuICB9XVxufTtcbmV4cG9ydCBjb25zdCBtb2RlcyA9IHtcbiAgcmdiLFxuICByZ2JhLFxuICBoc2wsXG4gIGhzbGEsXG4gIGhleCxcbiAgaGV4YVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkNvbG9yUGlja2VyRWRpdC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkJ0biB9IGZyb20gXCIuLi9WQnRuL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBtb2RlcywgbnVsbENvbG9yIH0gZnJvbSBcIi4vdXRpbC9pbmRleC5tanNcIjtcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IFZDb2xvclBpY2tlcklucHV0ID0gX3JlZiA9PiB7XG4gIGxldCB7XG4gICAgbGFiZWwsXG4gICAgLi4ucmVzdFxuICB9ID0gX3JlZjtcbiAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgXCJjbGFzc1wiOiBcInYtY29sb3ItcGlja2VyLWVkaXRfX2lucHV0XCJcbiAgfSwgW19jcmVhdGVWTm9kZShcImlucHV0XCIsIHJlc3QsIG51bGwpLCBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIG51bGwsIFtsYWJlbF0pXSk7XG59O1xuZXhwb3J0IGNvbnN0IG1ha2VWQ29sb3JQaWNrZXJFZGl0UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjb2xvcjogT2JqZWN0LFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgbW9kZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAncmdiYScsXG4gICAgdmFsaWRhdG9yOiB2ID0+IE9iamVjdC5rZXlzKG1vZGVzKS5pbmNsdWRlcyh2KVxuICB9LFxuICBtb2Rlczoge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6ICgpID0+IE9iamVjdC5rZXlzKG1vZGVzKSxcbiAgICB2YWxpZGF0b3I6IHYgPT4gQXJyYXkuaXNBcnJheSh2KSAmJiB2LmV2ZXJ5KG0gPT4gT2JqZWN0LmtleXMobW9kZXMpLmluY2x1ZGVzKG0pKVxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKVxufSwgJ1ZDb2xvclBpY2tlckVkaXQnKTtcbmV4cG9ydCBjb25zdCBWQ29sb3JQaWNrZXJFZGl0ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ1ZDb2xvclBpY2tlckVkaXQnLFxuICBwcm9wczogbWFrZVZDb2xvclBpY2tlckVkaXRQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6Y29sb3InOiBjb2xvciA9PiB0cnVlLFxuICAgICd1cGRhdGU6bW9kZSc6IG1vZGUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZjIpIHtcbiAgICBsZXQge1xuICAgICAgZW1pdFxuICAgIH0gPSBfcmVmMjtcbiAgICBjb25zdCBlbmFibGVkTW9kZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMubW9kZXMubWFwKGtleSA9PiAoe1xuICAgICAgICAuLi5tb2Rlc1trZXldLFxuICAgICAgICBuYW1lOiBrZXlcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgICBjb25zdCBpbnB1dHMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBtb2RlID0gZW5hYmxlZE1vZGVzLnZhbHVlLmZpbmQobSA9PiBtLm5hbWUgPT09IHByb3BzLm1vZGUpO1xuICAgICAgaWYgKCFtb2RlKSByZXR1cm4gW107XG4gICAgICBjb25zdCBjb2xvciA9IHByb3BzLmNvbG9yID8gbW9kZS50byhwcm9wcy5jb2xvcikgOiBudWxsO1xuICAgICAgcmV0dXJuIG1vZGUuaW5wdXRzPy5tYXAoX3JlZjMgPT4ge1xuICAgICAgICBsZXQge1xuICAgICAgICAgIGdldFZhbHVlLFxuICAgICAgICAgIGdldENvbG9yLFxuICAgICAgICAgIC4uLmlucHV0UHJvcHNcbiAgICAgICAgfSA9IF9yZWYzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLm1vZGUuaW5wdXRQcm9wcyxcbiAgICAgICAgICAuLi5pbnB1dFByb3BzLFxuICAgICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICB2YWx1ZTogY29sb3IgJiYgZ2V0VmFsdWUoY29sb3IpLFxuICAgICAgICAgIG9uQ2hhbmdlOiBlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHJldHVybjtcbiAgICAgICAgICAgIGVtaXQoJ3VwZGF0ZTpjb2xvcicsIG1vZGUuZnJvbShnZXRDb2xvcihjb2xvciA/PyBudWxsQ29sb3IsIHRhcmdldC52YWx1ZSkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWNvbG9yLXBpY2tlci1lZGl0JywgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIFtpbnB1dHMudmFsdWU/Lm1hcChwcm9wcyA9PiBfY3JlYXRlVk5vZGUoVkNvbG9yUGlja2VySW5wdXQsIHByb3BzLCBudWxsKSksIGVuYWJsZWRNb2Rlcy52YWx1ZS5sZW5ndGggPiAxICYmIF9jcmVhdGVWTm9kZShWQnRuLCB7XG4gICAgICBcImljb25cIjogXCIkdW5mb2xkXCIsXG4gICAgICBcInNpemVcIjogXCJ4LXNtYWxsXCIsXG4gICAgICBcInZhcmlhbnRcIjogXCJwbGFpblwiLFxuICAgICAgXCJvbkNsaWNrXCI6ICgpID0+IHtcbiAgICAgICAgY29uc3QgbWkgPSBlbmFibGVkTW9kZXMudmFsdWUuZmluZEluZGV4KG0gPT4gbS5uYW1lID09PSBwcm9wcy5tb2RlKTtcbiAgICAgICAgZW1pdCgndXBkYXRlOm1vZGUnLCBlbmFibGVkTW9kZXMudmFsdWVbKG1pICsgMSkgJSBlbmFibGVkTW9kZXMudmFsdWUubGVuZ3RoXS5uYW1lKTtcbiAgICAgIH1cbiAgICB9LCBudWxsKV0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNvbG9yUGlja2VyRWRpdC5tanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgbWF4LXN0YXRlbWVudHMgKi9cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlRWxldmF0aW9uUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgcHJvdmlkZSwgcmVmLCBzaGFsbG93UmVmLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjbGFtcCwgY3JlYXRlUmFuZ2UsIGdldERlY2ltYWxzLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBWU2xpZGVyU3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTp2LXNsaWRlcicpO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9mZnNldChlLCBlbCwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHZlcnRpY2FsID0gZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHRvdWNoID0gJ3RvdWNoZXMnIGluIGUgPyBlLnRvdWNoZXNbMF0gOiBlO1xuICByZXR1cm4gdmVydGljYWwgPyB0b3VjaC5jbGllbnRZIC0gKHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLyAyKSA6IHRvdWNoLmNsaWVudFggLSAocmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDIpO1xufVxuZnVuY3Rpb24gZ2V0UG9zaXRpb24oZSwgcG9zaXRpb24pIHtcbiAgaWYgKCd0b3VjaGVzJyBpbiBlICYmIGUudG91Y2hlcy5sZW5ndGgpIHJldHVybiBlLnRvdWNoZXNbMF1bcG9zaXRpb25dO2Vsc2UgaWYgKCdjaGFuZ2VkVG91Y2hlcycgaW4gZSAmJiBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCkgcmV0dXJuIGUuY2hhbmdlZFRvdWNoZXNbMF1bcG9zaXRpb25dO2Vsc2UgcmV0dXJuIGVbcG9zaXRpb25dO1xufVxuZXhwb3J0IGNvbnN0IG1ha2VTbGlkZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGRpc2FibGVkOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIGVycm9yOiBCb29sZWFuLFxuICByZWFkb25seToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICBtYXg6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDEwMFxuICB9LFxuICBtaW46IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDBcbiAgfSxcbiAgc3RlcDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICB0aHVtYkNvbG9yOiBTdHJpbmcsXG4gIHRodW1iTGFiZWw6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiB1bmRlZmluZWQsXG4gICAgdmFsaWRhdG9yOiB2ID0+IHR5cGVvZiB2ID09PSAnYm9vbGVhbicgfHwgdiA9PT0gJ2Fsd2F5cydcbiAgfSxcbiAgdGh1bWJTaXplOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAyMFxuICB9LFxuICBzaG93VGlja3M6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB2YWxpZGF0b3I6IHYgPT4gdHlwZW9mIHYgPT09ICdib29sZWFuJyB8fCB2ID09PSAnYWx3YXlzJ1xuICB9LFxuICB0aWNrczoge1xuICAgIHR5cGU6IFtBcnJheSwgT2JqZWN0XVxuICB9LFxuICB0aWNrU2l6ZToge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMlxuICB9LFxuICBjb2xvcjogU3RyaW5nLFxuICB0cmFja0NvbG9yOiBTdHJpbmcsXG4gIHRyYWNrRmlsbENvbG9yOiBTdHJpbmcsXG4gIHRyYWNrU2l6ZToge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogNFxuICB9LFxuICBkaXJlY3Rpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2hvcml6b250YWwnLFxuICAgIHZhbGlkYXRvcjogdiA9PiBbJ3ZlcnRpY2FsJywgJ2hvcml6b250YWwnXS5pbmNsdWRlcyh2KVxuICB9LFxuICByZXZlcnNlOiBCb29sZWFuLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcyh7XG4gICAgZWxldmF0aW9uOiAyXG4gIH0pXG59LCAnU2xpZGVyJyk7XG5leHBvcnQgY29uc3QgdXNlU3RlcHMgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IG1pbiA9IGNvbXB1dGVkKCgpID0+IHBhcnNlRmxvYXQocHJvcHMubWluKSk7XG4gIGNvbnN0IG1heCA9IGNvbXB1dGVkKCgpID0+IHBhcnNlRmxvYXQocHJvcHMubWF4KSk7XG4gIGNvbnN0IHN0ZXAgPSBjb21wdXRlZCgoKSA9PiArcHJvcHMuc3RlcCA+IDAgPyBwYXJzZUZsb2F0KHByb3BzLnN0ZXApIDogMCk7XG4gIGNvbnN0IGRlY2ltYWxzID0gY29tcHV0ZWQoKCkgPT4gTWF0aC5tYXgoZ2V0RGVjaW1hbHMoc3RlcC52YWx1ZSksIGdldERlY2ltYWxzKG1pbi52YWx1ZSkpKTtcbiAgZnVuY3Rpb24gcm91bmRWYWx1ZSh2YWx1ZSkge1xuICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgaWYgKHN0ZXAudmFsdWUgPD0gMCkgcmV0dXJuIHZhbHVlO1xuICAgIGNvbnN0IGNsYW1wZWQgPSBjbGFtcCh2YWx1ZSwgbWluLnZhbHVlLCBtYXgudmFsdWUpO1xuICAgIGNvbnN0IG9mZnNldCA9IG1pbi52YWx1ZSAlIHN0ZXAudmFsdWU7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBNYXRoLnJvdW5kKChjbGFtcGVkIC0gb2Zmc2V0KSAvIHN0ZXAudmFsdWUpICogc3RlcC52YWx1ZSArIG9mZnNldDtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChNYXRoLm1pbihuZXdWYWx1ZSwgbWF4LnZhbHVlKS50b0ZpeGVkKGRlY2ltYWxzLnZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtaW4sXG4gICAgbWF4LFxuICAgIHN0ZXAsXG4gICAgZGVjaW1hbHMsXG4gICAgcm91bmRWYWx1ZVxuICB9O1xufTtcbmV4cG9ydCBjb25zdCB1c2VTbGlkZXIgPSBfcmVmID0+IHtcbiAgbGV0IHtcbiAgICBwcm9wcyxcbiAgICBzdGVwcyxcbiAgICBvblNsaWRlclN0YXJ0LFxuICAgIG9uU2xpZGVyTW92ZSxcbiAgICBvblNsaWRlckVuZCxcbiAgICBnZXRBY3RpdmVUaHVtYlxuICB9ID0gX3JlZjtcbiAgY29uc3Qge1xuICAgIGlzUnRsXG4gIH0gPSB1c2VSdGwoKTtcbiAgY29uc3QgaXNSZXZlcnNlZCA9IHRvUmVmKHByb3BzLCAncmV2ZXJzZScpO1xuICBjb25zdCBob3Jpem9udGFsRGlyZWN0aW9uID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGxldCBoZCA9IGlzUnRsLnZhbHVlID8gJ3J0bCcgOiAnbHRyJztcbiAgICBpZiAocHJvcHMucmV2ZXJzZSkge1xuICAgICAgaGQgPSBoZCA9PT0gJ3J0bCcgPyAnbHRyJyA6ICdydGwnO1xuICAgIH1cbiAgICByZXR1cm4gaGQ7XG4gIH0pO1xuICBjb25zdCB7XG4gICAgbWluLFxuICAgIG1heCxcbiAgICBzdGVwLFxuICAgIGRlY2ltYWxzLFxuICAgIHJvdW5kVmFsdWVcbiAgfSA9IHN0ZXBzO1xuICBjb25zdCB0aHVtYlNpemUgPSBjb21wdXRlZCgoKSA9PiBwYXJzZUludChwcm9wcy50aHVtYlNpemUsIDEwKSk7XG4gIGNvbnN0IHRpY2tTaXplID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VJbnQocHJvcHMudGlja1NpemUsIDEwKSk7XG4gIGNvbnN0IHRyYWNrU2l6ZSA9IGNvbXB1dGVkKCgpID0+IHBhcnNlSW50KHByb3BzLnRyYWNrU2l6ZSwgMTApKTtcbiAgY29uc3QgbnVtVGlja3MgPSBjb21wdXRlZCgoKSA9PiAobWF4LnZhbHVlIC0gbWluLnZhbHVlKSAvIHN0ZXAudmFsdWUpO1xuICBjb25zdCBkaXNhYmxlZCA9IHRvUmVmKHByb3BzLCAnZGlzYWJsZWQnKTtcbiAgY29uc3QgdmVydGljYWwgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpO1xuICBjb25zdCB0aHVtYkNvbG9yID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuZXJyb3IgfHwgcHJvcHMuZGlzYWJsZWQgPyB1bmRlZmluZWQgOiBwcm9wcy50aHVtYkNvbG9yID8/IHByb3BzLmNvbG9yKTtcbiAgY29uc3QgdHJhY2tDb2xvciA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmVycm9yIHx8IHByb3BzLmRpc2FibGVkID8gdW5kZWZpbmVkIDogcHJvcHMudHJhY2tDb2xvciA/PyBwcm9wcy5jb2xvcik7XG4gIGNvbnN0IHRyYWNrRmlsbENvbG9yID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuZXJyb3IgfHwgcHJvcHMuZGlzYWJsZWQgPyB1bmRlZmluZWQgOiBwcm9wcy50cmFja0ZpbGxDb2xvciA/PyBwcm9wcy5jb2xvcik7XG4gIGNvbnN0IG1vdXNlUHJlc3NlZCA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICBjb25zdCBzdGFydE9mZnNldCA9IHNoYWxsb3dSZWYoMCk7XG4gIGNvbnN0IHRyYWNrQ29udGFpbmVyUmVmID0gcmVmKCk7XG4gIGNvbnN0IGFjdGl2ZVRodW1iUmVmID0gcmVmKCk7XG4gIGZ1bmN0aW9uIHBhcnNlTW91c2VNb3ZlKGUpIHtcbiAgICBjb25zdCB2ZXJ0aWNhbCA9IHByb3BzLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgICBjb25zdCBzdGFydCA9IHZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCc7XG4gICAgY29uc3QgbGVuZ3RoID0gdmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgY29uc3QgcG9zaXRpb24gPSB2ZXJ0aWNhbCA/ICdjbGllbnRZJyA6ICdjbGllbnRYJztcbiAgICBjb25zdCB7XG4gICAgICBbc3RhcnRdOiB0cmFja1N0YXJ0LFxuICAgICAgW2xlbmd0aF06IHRyYWNrTGVuZ3RoXG4gICAgfSA9IHRyYWNrQ29udGFpbmVyUmVmLnZhbHVlPy4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgY2xpY2tPZmZzZXQgPSBnZXRQb3NpdGlvbihlLCBwb3NpdGlvbik7XG5cbiAgICAvLyBJdCBpcyBwb3NzaWJsZSBmb3IgbGVmdCB0byBiZSBOYU4sIGZvcmNlIHRvIG51bWJlclxuICAgIGxldCBjbGlja1BvcyA9IE1hdGgubWluKE1hdGgubWF4KChjbGlja09mZnNldCAtIHRyYWNrU3RhcnQgLSBzdGFydE9mZnNldC52YWx1ZSkgLyB0cmFja0xlbmd0aCwgMCksIDEpIHx8IDA7XG4gICAgaWYgKHZlcnRpY2FsIHx8IGhvcml6b250YWxEaXJlY3Rpb24udmFsdWUgPT09ICdydGwnKSBjbGlja1BvcyA9IDEgLSBjbGlja1BvcztcbiAgICByZXR1cm4gcm91bmRWYWx1ZShtaW4udmFsdWUgKyBjbGlja1BvcyAqIChtYXgudmFsdWUgLSBtaW4udmFsdWUpKTtcbiAgfVxuICBjb25zdCBoYW5kbGVTdG9wID0gZSA9PiB7XG4gICAgb25TbGlkZXJFbmQoe1xuICAgICAgdmFsdWU6IHBhcnNlTW91c2VNb3ZlKGUpXG4gICAgfSk7XG4gICAgbW91c2VQcmVzc2VkLnZhbHVlID0gZmFsc2U7XG4gICAgc3RhcnRPZmZzZXQudmFsdWUgPSAwO1xuICB9O1xuICBjb25zdCBoYW5kbGVTdGFydCA9IGUgPT4ge1xuICAgIGFjdGl2ZVRodW1iUmVmLnZhbHVlID0gZ2V0QWN0aXZlVGh1bWIoZSk7XG4gICAgaWYgKCFhY3RpdmVUaHVtYlJlZi52YWx1ZSkgcmV0dXJuO1xuICAgIGFjdGl2ZVRodW1iUmVmLnZhbHVlLmZvY3VzKCk7XG4gICAgbW91c2VQcmVzc2VkLnZhbHVlID0gdHJ1ZTtcbiAgICBpZiAoYWN0aXZlVGh1bWJSZWYudmFsdWUuY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICBzdGFydE9mZnNldC52YWx1ZSA9IGdldE9mZnNldChlLCBhY3RpdmVUaHVtYlJlZi52YWx1ZSwgcHJvcHMuZGlyZWN0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRPZmZzZXQudmFsdWUgPSAwO1xuICAgICAgb25TbGlkZXJNb3ZlKHtcbiAgICAgICAgdmFsdWU6IHBhcnNlTW91c2VNb3ZlKGUpXG4gICAgICB9KTtcbiAgICB9XG4gICAgb25TbGlkZXJTdGFydCh7XG4gICAgICB2YWx1ZTogcGFyc2VNb3VzZU1vdmUoZSlcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgbW92ZUxpc3RlbmVyT3B0aW9ucyA9IHtcbiAgICBwYXNzaXZlOiB0cnVlLFxuICAgIGNhcHR1cmU6IHRydWVcbiAgfTtcbiAgZnVuY3Rpb24gb25Nb3VzZU1vdmUoZSkge1xuICAgIG9uU2xpZGVyTW92ZSh7XG4gICAgICB2YWx1ZTogcGFyc2VNb3VzZU1vdmUoZSlcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBvblNsaWRlck1vdXNlVXAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGhhbmRsZVN0b3AoZSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlLCBtb3ZlTGlzdGVuZXJPcHRpb25zKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uU2xpZGVyTW91c2VVcCk7XG4gIH1cbiAgZnVuY3Rpb24gb25TbGlkZXJUb3VjaGVuZChlKSB7XG4gICAgaGFuZGxlU3RvcChlKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Nb3VzZU1vdmUsIG1vdmVMaXN0ZW5lck9wdGlvbnMpO1xuICAgIGUudGFyZ2V0Py5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uU2xpZGVyVG91Y2hlbmQpO1xuICB9XG4gIGZ1bmN0aW9uIG9uU2xpZGVyVG91Y2hzdGFydChlKSB7XG4gICAgaGFuZGxlU3RhcnQoZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uTW91c2VNb3ZlLCBtb3ZlTGlzdGVuZXJPcHRpb25zKTtcbiAgICBlLnRhcmdldD8uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblNsaWRlclRvdWNoZW5kLCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9uU2xpZGVyTW91c2Vkb3duKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaGFuZGxlU3RhcnQoZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlLCBtb3ZlTGlzdGVuZXJPcHRpb25zKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uU2xpZGVyTW91c2VVcCwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuICBjb25zdCBwb3NpdGlvbiA9IHZhbCA9PiB7XG4gICAgY29uc3QgcGVyY2VudGFnZSA9ICh2YWwgLSBtaW4udmFsdWUpIC8gKG1heC52YWx1ZSAtIG1pbi52YWx1ZSkgKiAxMDA7XG4gICAgcmV0dXJuIGNsYW1wKGlzTmFOKHBlcmNlbnRhZ2UpID8gMCA6IHBlcmNlbnRhZ2UsIDAsIDEwMCk7XG4gIH07XG4gIGNvbnN0IHNob3dUaWNrcyA9IHRvUmVmKHByb3BzLCAnc2hvd1RpY2tzJyk7XG4gIGNvbnN0IHBhcnNlZFRpY2tzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmICghc2hvd1RpY2tzLnZhbHVlKSByZXR1cm4gW107XG4gICAgaWYgKCFwcm9wcy50aWNrcykge1xuICAgICAgcmV0dXJuIG51bVRpY2tzLnZhbHVlICE9PSBJbmZpbml0eSA/IGNyZWF0ZVJhbmdlKG51bVRpY2tzLnZhbHVlICsgMSkubWFwKHQgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG1pbi52YWx1ZSArIHQgKiBzdGVwLnZhbHVlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbih2YWx1ZSlcbiAgICAgICAgfTtcbiAgICAgIH0pIDogW107XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BzLnRpY2tzKSkgcmV0dXJuIHByb3BzLnRpY2tzLm1hcCh0ID0+ICh7XG4gICAgICB2YWx1ZTogdCxcbiAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbih0KSxcbiAgICAgIGxhYmVsOiB0LnRvU3RyaW5nKClcbiAgICB9KSk7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzLnRpY2tzKS5tYXAoa2V5ID0+ICh7XG4gICAgICB2YWx1ZTogcGFyc2VGbG9hdChrZXkpLFxuICAgICAgcG9zaXRpb246IHBvc2l0aW9uKHBhcnNlRmxvYXQoa2V5KSksXG4gICAgICBsYWJlbDogcHJvcHMudGlja3Nba2V5XVxuICAgIH0pKTtcbiAgfSk7XG4gIGNvbnN0IGhhc0xhYmVscyA9IGNvbXB1dGVkKCgpID0+IHBhcnNlZFRpY2tzLnZhbHVlLnNvbWUoX3JlZjIgPT4ge1xuICAgIGxldCB7XG4gICAgICBsYWJlbFxuICAgIH0gPSBfcmVmMjtcbiAgICByZXR1cm4gISFsYWJlbDtcbiAgfSkpO1xuICBjb25zdCBkYXRhID0ge1xuICAgIGFjdGl2ZVRodW1iUmVmLFxuICAgIGNvbG9yOiB0b1JlZihwcm9wcywgJ2NvbG9yJyksXG4gICAgZGVjaW1hbHMsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlyZWN0aW9uOiB0b1JlZihwcm9wcywgJ2RpcmVjdGlvbicpLFxuICAgIGVsZXZhdGlvbjogdG9SZWYocHJvcHMsICdlbGV2YXRpb24nKSxcbiAgICBoYXNMYWJlbHMsXG4gICAgaG9yaXpvbnRhbERpcmVjdGlvbixcbiAgICBpc1JldmVyc2VkLFxuICAgIG1pbixcbiAgICBtYXgsXG4gICAgbW91c2VQcmVzc2VkLFxuICAgIG51bVRpY2tzLFxuICAgIG9uU2xpZGVyTW91c2Vkb3duLFxuICAgIG9uU2xpZGVyVG91Y2hzdGFydCxcbiAgICBwYXJzZWRUaWNrcyxcbiAgICBwYXJzZU1vdXNlTW92ZSxcbiAgICBwb3NpdGlvbixcbiAgICByZWFkb25seTogdG9SZWYocHJvcHMsICdyZWFkb25seScpLFxuICAgIHJvdW5kZWQ6IHRvUmVmKHByb3BzLCAncm91bmRlZCcpLFxuICAgIHJvdW5kVmFsdWUsXG4gICAgc2hvd1RpY2tzLFxuICAgIHN0YXJ0T2Zmc2V0LFxuICAgIHN0ZXAsXG4gICAgdGh1bWJTaXplLFxuICAgIHRodW1iQ29sb3IsXG4gICAgdGh1bWJMYWJlbDogdG9SZWYocHJvcHMsICd0aHVtYkxhYmVsJyksXG4gICAgdGlja3M6IHRvUmVmKHByb3BzLCAndGlja3MnKSxcbiAgICB0aWNrU2l6ZSxcbiAgICB0cmFja0NvbG9yLFxuICAgIHRyYWNrQ29udGFpbmVyUmVmLFxuICAgIHRyYWNrRmlsbENvbG9yLFxuICAgIHRyYWNrU2l6ZSxcbiAgICB2ZXJ0aWNhbFxuICB9O1xuICBwcm92aWRlKFZTbGlkZXJTeW1ib2wsIGRhdGEpO1xuICByZXR1cm4gZGF0YTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zbGlkZXIubWpzLm1hcCIsImltcG9ydCB7IHZTaG93IGFzIF92U2hvdywgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlNsaWRlclRodW1iLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWU2xpZGVyU3ltYm9sIH0gZnJvbSBcIi4vc2xpZGVyLm1qc1wiO1xuaW1wb3J0IHsgVlNjYWxlVHJhbnNpdGlvbiB9IGZyb20gXCIuLi90cmFuc2l0aW9ucy9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVRleHRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyB1c2VFbGV2YXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjsgLy8gRGlyZWN0aXZlc1xuaW1wb3J0IFJpcHBsZSBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9yaXBwbGUvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBrZXlWYWx1ZXMsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZTbGlkZXJUaHVtYlByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZm9jdXNlZDogQm9vbGVhbixcbiAgbWF4OiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIHJlcXVpcmVkOiB0cnVlXG4gIH0sXG4gIG1pbjoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICByZXF1aXJlZDogdHJ1ZVxuICB9LFxuICBtb2RlbFZhbHVlOiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIHJlcXVpcmVkOiB0cnVlXG4gIH0sXG4gIHBvc2l0aW9uOiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIHJlcXVpcmVkOiB0cnVlXG4gIH0sXG4gIHJpcHBsZToge1xuICAgIHR5cGU6IFtCb29sZWFuLCBPYmplY3RdLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKClcbn0sICdWU2xpZGVyVGh1bWInKTtcbmV4cG9ydCBjb25zdCBWU2xpZGVyVGh1bWIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlNsaWRlclRodW1iJyxcbiAgZGlyZWN0aXZlczoge1xuICAgIFJpcHBsZVxuICB9LFxuICBwcm9wczogbWFrZVZTbGlkZXJUaHVtYlByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdiA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzLFxuICAgICAgZW1pdFxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHNsaWRlciA9IGluamVjdChWU2xpZGVyU3ltYm9sKTtcbiAgICBjb25zdCB7XG4gICAgICBydGxDbGFzc2VzXG4gICAgfSA9IHVzZVJ0bCgpO1xuICAgIGlmICghc2xpZGVyKSB0aHJvdyBuZXcgRXJyb3IoJ1tWdWV0aWZ5XSB2LXNsaWRlci10aHVtYiBtdXN0IGJlIHVzZWQgaW5zaWRlIHYtc2xpZGVyIG9yIHYtcmFuZ2Utc2xpZGVyJyk7XG4gICAgY29uc3Qge1xuICAgICAgdGh1bWJDb2xvcixcbiAgICAgIHN0ZXAsXG4gICAgICB2ZXJ0aWNhbCxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgdGh1bWJTaXplLFxuICAgICAgdGh1bWJMYWJlbCxcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHJlYWRvbmx5LFxuICAgICAgZWxldmF0aW9uLFxuICAgICAgaXNSZXZlcnNlZCxcbiAgICAgIGhvcml6b250YWxEaXJlY3Rpb24sXG4gICAgICBtb3VzZVByZXNzZWQsXG4gICAgICBkZWNpbWFsc1xuICAgIH0gPSBzbGlkZXI7XG4gICAgY29uc3Qge1xuICAgICAgdGV4dENvbG9yQ2xhc3NlcyxcbiAgICAgIHRleHRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VUZXh0Q29sb3IodGh1bWJDb2xvcik7XG4gICAgY29uc3Qge1xuICAgICAgcGFnZXVwLFxuICAgICAgcGFnZWRvd24sXG4gICAgICBlbmQsXG4gICAgICBob21lLFxuICAgICAgbGVmdCxcbiAgICAgIHJpZ2h0LFxuICAgICAgZG93bixcbiAgICAgIHVwXG4gICAgfSA9IGtleVZhbHVlcztcbiAgICBjb25zdCByZWxldmFudEtleXMgPSBbcGFnZXVwLCBwYWdlZG93biwgZW5kLCBob21lLCBsZWZ0LCByaWdodCwgZG93biwgdXBdO1xuICAgIGNvbnN0IG11bHRpcGxpZXJzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHN0ZXAudmFsdWUpIHJldHVybiBbMSwgMiwgM107ZWxzZSByZXR1cm4gWzEsIDUsIDEwXTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBwYXJzZUtleWRvd24oZSwgdmFsdWUpIHtcbiAgICAgIGlmICghcmVsZXZhbnRLZXlzLmluY2x1ZGVzKGUua2V5KSkgcmV0dXJuO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgX3N0ZXAgPSBzdGVwLnZhbHVlIHx8IDAuMTtcbiAgICAgIGNvbnN0IHN0ZXBzID0gKHByb3BzLm1heCAtIHByb3BzLm1pbikgLyBfc3RlcDtcbiAgICAgIGlmIChbbGVmdCwgcmlnaHQsIGRvd24sIHVwXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgY29uc3QgaW5jcmVhc2UgPSBob3Jpem9udGFsRGlyZWN0aW9uLnZhbHVlID09PSAncnRsJyA/IFtsZWZ0LCB1cF0gOiBbcmlnaHQsIHVwXTtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gaW5jcmVhc2UuaW5jbHVkZXMoZS5rZXkpID8gMSA6IC0xO1xuICAgICAgICBjb25zdCBtdWx0aXBsaWVyID0gZS5zaGlmdEtleSA/IDIgOiBlLmN0cmxLZXkgPyAxIDogMDtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSArIGRpcmVjdGlvbiAqIF9zdGVwICogbXVsdGlwbGllcnMudmFsdWVbbXVsdGlwbGllcl07XG4gICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSBob21lKSB7XG4gICAgICAgIHZhbHVlID0gcHJvcHMubWluO1xuICAgICAgfSBlbHNlIGlmIChlLmtleSA9PT0gZW5kKSB7XG4gICAgICAgIHZhbHVlID0gcHJvcHMubWF4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gZS5rZXkgPT09IHBhZ2Vkb3duID8gMSA6IC0xO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlIC0gZGlyZWN0aW9uICogX3N0ZXAgKiAoc3RlcHMgPiAxMDAgPyBzdGVwcyAvIDEwIDogMTApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE1hdGgubWF4KHByb3BzLm1pbiwgTWF0aC5taW4ocHJvcHMubWF4LCB2YWx1ZSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbktleWRvd24oZSkge1xuICAgICAgY29uc3QgbmV3VmFsdWUgPSBwYXJzZUtleWRvd24oZSwgcHJvcHMubW9kZWxWYWx1ZSk7XG4gICAgICBuZXdWYWx1ZSAhPSBudWxsICYmIGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgbmV3VmFsdWUpO1xuICAgIH1cbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgcG9zaXRpb25QZXJjZW50YWdlID0gY29udmVydFRvVW5pdCh2ZXJ0aWNhbC52YWx1ZSB8fCBpc1JldmVyc2VkLnZhbHVlID8gMTAwIC0gcHJvcHMucG9zaXRpb24gOiBwcm9wcy5wb3NpdGlvbiwgJyUnKTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZWxldmF0aW9uQ2xhc3Nlc1xuICAgICAgfSA9IHVzZUVsZXZhdGlvbihjb21wdXRlZCgoKSA9PiAhZGlzYWJsZWQudmFsdWUgPyBlbGV2YXRpb24udmFsdWUgOiB1bmRlZmluZWQpKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1zbGlkZXItdGh1bWInLCB7XG4gICAgICAgICAgJ3Ytc2xpZGVyLXRodW1iLS1mb2N1c2VkJzogcHJvcHMuZm9jdXNlZCxcbiAgICAgICAgICAndi1zbGlkZXItdGh1bWItLXByZXNzZWQnOiBwcm9wcy5mb2N1c2VkICYmIG1vdXNlUHJlc3NlZC52YWx1ZVxuICAgICAgICB9LCBwcm9wcy5jbGFzcywgcnRsQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgIFwic3R5bGVcIjogW3tcbiAgICAgICAgICAnLS12LXNsaWRlci10aHVtYi1wb3NpdGlvbic6IHBvc2l0aW9uUGVyY2VudGFnZSxcbiAgICAgICAgICAnLS12LXNsaWRlci10aHVtYi1zaXplJzogY29udmVydFRvVW5pdCh0aHVtYlNpemUudmFsdWUpXG4gICAgICAgIH0sIHByb3BzLnN0eWxlXSxcbiAgICAgICAgXCJyb2xlXCI6IFwic2xpZGVyXCIsXG4gICAgICAgIFwidGFiaW5kZXhcIjogZGlzYWJsZWQudmFsdWUgPyAtMSA6IDAsXG4gICAgICAgIFwiYXJpYS12YWx1ZW1pblwiOiBwcm9wcy5taW4sXG4gICAgICAgIFwiYXJpYS12YWx1ZW1heFwiOiBwcm9wcy5tYXgsXG4gICAgICAgIFwiYXJpYS12YWx1ZW5vd1wiOiBwcm9wcy5tb2RlbFZhbHVlLFxuICAgICAgICBcImFyaWEtcmVhZG9ubHlcIjogISFyZWFkb25seS52YWx1ZSxcbiAgICAgICAgXCJhcmlhLW9yaWVudGF0aW9uXCI6IGRpcmVjdGlvbi52YWx1ZSxcbiAgICAgICAgXCJvbktleWRvd25cIjogIXJlYWRvbmx5LnZhbHVlID8gb25LZXlkb3duIDogdW5kZWZpbmVkXG4gICAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytc2xpZGVyLXRodW1iX19zdXJmYWNlJywgdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZSwgZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICAgIC4uLnRleHRDb2xvclN0eWxlcy52YWx1ZVxuICAgICAgICB9XG4gICAgICB9LCBudWxsKSwgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXNsaWRlci10aHVtYl9fcmlwcGxlJywgdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgIFwic3R5bGVcIjogdGV4dENvbG9yU3R5bGVzLnZhbHVlXG4gICAgICB9LCBudWxsKSwgW1tfcmVzb2x2ZURpcmVjdGl2ZShcInJpcHBsZVwiKSwgcHJvcHMucmlwcGxlLCBudWxsLCB7XG4gICAgICAgIGNpcmNsZTogdHJ1ZSxcbiAgICAgICAgY2VudGVyOiB0cnVlXG4gICAgICB9XV0pLCBfY3JlYXRlVk5vZGUoVlNjYWxlVHJhbnNpdGlvbiwge1xuICAgICAgICBcIm9yaWdpblwiOiBcImJvdHRvbSBjZW50ZXJcIlxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtc2xpZGVyLXRodW1iX19sYWJlbC1jb250YWluZXJcIlxuICAgICAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFsndi1zbGlkZXItdGh1bWJfX2xhYmVsJ11cbiAgICAgICAgfSwgW19jcmVhdGVWTm9kZShcImRpdlwiLCBudWxsLCBbc2xvdHNbJ3RodW1iLWxhYmVsJ10/Lih7XG4gICAgICAgICAgbW9kZWxWYWx1ZTogcHJvcHMubW9kZWxWYWx1ZVxuICAgICAgICB9KSA/PyBwcm9wcy5tb2RlbFZhbHVlLnRvRml4ZWQoc3RlcC52YWx1ZSA/IGRlY2ltYWxzLnZhbHVlIDogMSldKV0pXSksIFtbX3ZTaG93LCB0aHVtYkxhYmVsLnZhbHVlICYmIHByb3BzLmZvY3VzZWQgfHwgdGh1bWJMYWJlbC52YWx1ZSA9PT0gJ2Fsd2F5cyddXSldXG4gICAgICB9KV0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WU2xpZGVyVGh1bWIubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WU2xpZGVyVHJhY2suY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZTbGlkZXJTeW1ib2wgfSBmcm9tIFwiLi9zbGlkZXIubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VCYWNrZ3JvdW5kQ29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgdXNlUm91bmRlZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBpbmplY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVlNsaWRlclRyYWNrUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBzdGFydDoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICByZXF1aXJlZDogdHJ1ZVxuICB9LFxuICBzdG9wOiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIHJlcXVpcmVkOiB0cnVlXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpXG59LCAnVlNsaWRlclRyYWNrJyk7XG5leHBvcnQgY29uc3QgVlNsaWRlclRyYWNrID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZTbGlkZXJUcmFjaycsXG4gIHByb3BzOiBtYWtlVlNsaWRlclRyYWNrUHJvcHMoKSxcbiAgZW1pdHM6IHt9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHNsaWRlciA9IGluamVjdChWU2xpZGVyU3ltYm9sKTtcbiAgICBpZiAoIXNsaWRlcikgdGhyb3cgbmV3IEVycm9yKCdbVnVldGlmeV0gdi1zbGlkZXItdHJhY2sgbXVzdCBiZSBpbnNpZGUgdi1zbGlkZXIgb3Igdi1yYW5nZS1zbGlkZXInKTtcbiAgICBjb25zdCB7XG4gICAgICBjb2xvcixcbiAgICAgIGhvcml6b250YWxEaXJlY3Rpb24sXG4gICAgICBwYXJzZWRUaWNrcyxcbiAgICAgIHJvdW5kZWQsXG4gICAgICBzaG93VGlja3MsXG4gICAgICB0aWNrU2l6ZSxcbiAgICAgIHRyYWNrQ29sb3IsXG4gICAgICB0cmFja0ZpbGxDb2xvcixcbiAgICAgIHRyYWNrU2l6ZSxcbiAgICAgIHZlcnRpY2FsLFxuICAgICAgbWluLFxuICAgICAgbWF4XG4gICAgfSA9IHNsaWRlcjtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHJvdW5kZWQpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXM6IHRyYWNrRmlsbENvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlczogdHJhY2tGaWxsQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHRyYWNrRmlsbENvbG9yKTtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzOiB0cmFja0NvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlczogdHJhY2tDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VCYWNrZ3JvdW5kQ29sb3IodHJhY2tDb2xvcik7XG4gICAgY29uc3Qgc3RhcnREaXIgPSBjb21wdXRlZCgoKSA9PiBgaW5zZXQtJHt2ZXJ0aWNhbC52YWx1ZSA/ICdibG9jay1lbmQnIDogJ2lubGluZS1zdGFydCd9YCk7XG4gICAgY29uc3QgZW5kRGlyID0gY29tcHV0ZWQoKCkgPT4gdmVydGljYWwudmFsdWUgPyAnaGVpZ2h0JyA6ICd3aWR0aCcpO1xuICAgIGNvbnN0IGJhY2tncm91bmRTdHlsZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbc3RhcnREaXIudmFsdWVdOiAnMCUnLFxuICAgICAgICBbZW5kRGlyLnZhbHVlXTogJzEwMCUnXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IHRyYWNrRmlsbFdpZHRoID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuc3RvcCAtIHByb3BzLnN0YXJ0KTtcbiAgICBjb25zdCB0cmFja0ZpbGxTdHlsZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbc3RhcnREaXIudmFsdWVdOiBjb252ZXJ0VG9Vbml0KHByb3BzLnN0YXJ0LCAnJScpLFxuICAgICAgICBbZW5kRGlyLnZhbHVlXTogY29udmVydFRvVW5pdCh0cmFja0ZpbGxXaWR0aC52YWx1ZSwgJyUnKVxuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBjb21wdXRlZFRpY2tzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKCFzaG93VGlja3MudmFsdWUpIHJldHVybiBbXTtcbiAgICAgIGNvbnN0IHRpY2tzID0gdmVydGljYWwudmFsdWUgPyBwYXJzZWRUaWNrcy52YWx1ZS5zbGljZSgpLnJldmVyc2UoKSA6IHBhcnNlZFRpY2tzLnZhbHVlO1xuICAgICAgcmV0dXJuIHRpY2tzLm1hcCgodGljaywgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uUHJvcGVydHkgPSB2ZXJ0aWNhbC52YWx1ZSA/ICdib3R0b20nIDogJ21hcmdpbi1pbmxpbmUtc3RhcnQnO1xuICAgICAgICBjb25zdCBkaXJlY3Rpb25WYWx1ZSA9IHRpY2sudmFsdWUgIT09IG1pbi52YWx1ZSAmJiB0aWNrLnZhbHVlICE9PSBtYXgudmFsdWUgPyBjb252ZXJ0VG9Vbml0KHRpY2sucG9zaXRpb24sICclJykgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwia2V5XCI6IHRpY2sudmFsdWUsXG4gICAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytc2xpZGVyLXRyYWNrX190aWNrJywge1xuICAgICAgICAgICAgJ3Ytc2xpZGVyLXRyYWNrX190aWNrLS1maWxsZWQnOiB0aWNrLnBvc2l0aW9uID49IHByb3BzLnN0YXJ0ICYmIHRpY2sucG9zaXRpb24gPD0gcHJvcHMuc3RvcCxcbiAgICAgICAgICAgICd2LXNsaWRlci10cmFja19fdGljay0tZmlyc3QnOiB0aWNrLnZhbHVlID09PSBtaW4udmFsdWUsXG4gICAgICAgICAgICAndi1zbGlkZXItdHJhY2tfX3RpY2stLWxhc3QnOiB0aWNrLnZhbHVlID09PSBtYXgudmFsdWVcbiAgICAgICAgICB9XSxcbiAgICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICAgIFtkaXJlY3Rpb25Qcm9wZXJ0eV06IGRpcmVjdGlvblZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICB9LCBbKHRpY2subGFiZWwgfHwgc2xvdHNbJ3RpY2stbGFiZWwnXSkgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1zbGlkZXItdHJhY2tfX3RpY2stbGFiZWxcIlxuICAgICAgICB9LCBbc2xvdHNbJ3RpY2stbGFiZWwnXT8uKHtcbiAgICAgICAgICB0aWNrLFxuICAgICAgICAgIGluZGV4XG4gICAgICAgIH0pID8/IHRpY2subGFiZWxdKV0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1zbGlkZXItdHJhY2snLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFt7XG4gICAgICAgICAgJy0tdi1zbGlkZXItdHJhY2stc2l6ZSc6IGNvbnZlcnRUb1VuaXQodHJhY2tTaXplLnZhbHVlKSxcbiAgICAgICAgICAnLS12LXNsaWRlci10aWNrLXNpemUnOiBjb252ZXJ0VG9Vbml0KHRpY2tTaXplLnZhbHVlKSxcbiAgICAgICAgICBkaXJlY3Rpb246ICF2ZXJ0aWNhbC52YWx1ZSA/IGhvcml6b250YWxEaXJlY3Rpb24udmFsdWUgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgcHJvcHMuc3R5bGVdXG4gICAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytc2xpZGVyLXRyYWNrX19iYWNrZ3JvdW5kJywgdHJhY2tDb2xvckNsYXNzZXMudmFsdWUsIHtcbiAgICAgICAgICAndi1zbGlkZXItdHJhY2tfX2JhY2tncm91bmQtLW9wYWNpdHknOiAhIWNvbG9yLnZhbHVlIHx8ICF0cmFja0ZpbGxDb2xvci52YWx1ZVxuICAgICAgICB9XSxcbiAgICAgICAgXCJzdHlsZVwiOiB7XG4gICAgICAgICAgLi4uYmFja2dyb3VuZFN0eWxlcy52YWx1ZSxcbiAgICAgICAgICAuLi50cmFja0NvbG9yU3R5bGVzLnZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0sIG51bGwpLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1zbGlkZXItdHJhY2tfX2ZpbGwnLCB0cmFja0ZpbGxDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICAuLi50cmFja0ZpbGxTdHlsZXMudmFsdWUsXG4gICAgICAgICAgLi4udHJhY2tGaWxsQ29sb3JTdHlsZXMudmFsdWVcbiAgICAgICAgfVxuICAgICAgfSwgbnVsbCksIHNob3dUaWNrcy52YWx1ZSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1zbGlkZXItdHJhY2tfX3RpY2tzJywge1xuICAgICAgICAgICd2LXNsaWRlci10cmFja19fdGlja3MtLWFsd2F5cy1zaG93Jzogc2hvd1RpY2tzLnZhbHVlID09PSAnYWx3YXlzJ1xuICAgICAgICB9XVxuICAgICAgfSwgW2NvbXB1dGVkVGlja3MudmFsdWVdKV0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WU2xpZGVyVHJhY2subWpzLm1hcCIsImltcG9ydCB7IG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50IH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZTbGlkZXIuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZTbGlkZXJUaHVtYiB9IGZyb20gXCIuL1ZTbGlkZXJUaHVtYi5tanNcIjtcbmltcG9ydCB7IFZTbGlkZXJUcmFjayB9IGZyb20gXCIuL1ZTbGlkZXJUcmFjay5tanNcIjtcbmltcG9ydCB7IG1ha2VWSW5wdXRQcm9wcywgVklucHV0IH0gZnJvbSBcIi4uL1ZJbnB1dC9WSW5wdXQubWpzXCI7XG5pbXBvcnQgeyBWTGFiZWwgfSBmcm9tIFwiLi4vVkxhYmVsL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZVNsaWRlclByb3BzLCB1c2VTbGlkZXIsIHVzZVN0ZXBzIH0gZnJvbSBcIi4vc2xpZGVyLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUZvY3VzUHJvcHMsIHVzZUZvY3VzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvY3VzLm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHJlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWU2xpZGVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICAuLi5tYWtlRm9jdXNQcm9wcygpLFxuICAuLi5tYWtlU2xpZGVyUHJvcHMoKSxcbiAgLi4ubWFrZVZJbnB1dFByb3BzKCksXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDBcbiAgfVxufSwgJ1ZTbGlkZXInKTtcbmV4cG9ydCBjb25zdCBWU2xpZGVyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZTbGlkZXInLFxuICBwcm9wczogbWFrZVZTbGlkZXJQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6Zm9jdXNlZCc6IHZhbHVlID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdiA9PiB0cnVlLFxuICAgIHN0YXJ0OiB2YWx1ZSA9PiB0cnVlLFxuICAgIGVuZDogdmFsdWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90cyxcbiAgICAgIGVtaXRcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB0aHVtYkNvbnRhaW5lclJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJ0bENsYXNzZXNcbiAgICB9ID0gdXNlUnRsKCk7XG4gICAgY29uc3Qgc3RlcHMgPSB1c2VTdGVwcyhwcm9wcyk7XG4gICAgY29uc3QgbW9kZWwgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJywgdW5kZWZpbmVkLCB2YWx1ZSA9PiB7XG4gICAgICByZXR1cm4gc3RlcHMucm91bmRWYWx1ZSh2YWx1ZSA9PSBudWxsID8gc3RlcHMubWluLnZhbHVlIDogdmFsdWUpO1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIG1pbixcbiAgICAgIG1heCxcbiAgICAgIG1vdXNlUHJlc3NlZCxcbiAgICAgIHJvdW5kVmFsdWUsXG4gICAgICBvblNsaWRlck1vdXNlZG93bixcbiAgICAgIG9uU2xpZGVyVG91Y2hzdGFydCxcbiAgICAgIHRyYWNrQ29udGFpbmVyUmVmLFxuICAgICAgcG9zaXRpb24sXG4gICAgICBoYXNMYWJlbHMsXG4gICAgICByZWFkb25seVxuICAgIH0gPSB1c2VTbGlkZXIoe1xuICAgICAgcHJvcHMsXG4gICAgICBzdGVwcyxcbiAgICAgIG9uU2xpZGVyU3RhcnQ6ICgpID0+IHtcbiAgICAgICAgZW1pdCgnc3RhcnQnLCBtb2RlbC52YWx1ZSk7XG4gICAgICB9LFxuICAgICAgb25TbGlkZXJFbmQ6IF9yZWYyID0+IHtcbiAgICAgICAgbGV0IHtcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgIGNvbnN0IHJvdW5kZWRWYWx1ZSA9IHJvdW5kVmFsdWUodmFsdWUpO1xuICAgICAgICBtb2RlbC52YWx1ZSA9IHJvdW5kZWRWYWx1ZTtcbiAgICAgICAgZW1pdCgnZW5kJywgcm91bmRlZFZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBvblNsaWRlck1vdmU6IF9yZWYzID0+IHtcbiAgICAgICAgbGV0IHtcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9ID0gX3JlZjM7XG4gICAgICAgIHJldHVybiBtb2RlbC52YWx1ZSA9IHJvdW5kVmFsdWUodmFsdWUpO1xuICAgICAgfSxcbiAgICAgIGdldEFjdGl2ZVRodW1iOiAoKSA9PiB0aHVtYkNvbnRhaW5lclJlZi52YWx1ZT8uJGVsXG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgaXNGb2N1c2VkLFxuICAgICAgZm9jdXMsXG4gICAgICBibHVyXG4gICAgfSA9IHVzZUZvY3VzKHByb3BzKTtcbiAgICBjb25zdCB0cmFja1N0b3AgPSBjb21wdXRlZCgoKSA9PiBwb3NpdGlvbihtb2RlbC52YWx1ZSkpO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBbaW5wdXRQcm9wcywgX10gPSBWSW5wdXQuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgY29uc3QgaGFzUHJlcGVuZCA9ICEhKHByb3BzLmxhYmVsIHx8IHNsb3RzLmxhYmVsIHx8IHNsb3RzLnByZXBlbmQpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWSW5wdXQsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytc2xpZGVyJywge1xuICAgICAgICAgICd2LXNsaWRlci0taGFzLWxhYmVscyc6ICEhc2xvdHNbJ3RpY2stbGFiZWwnXSB8fCBoYXNMYWJlbHMudmFsdWUsXG4gICAgICAgICAgJ3Ytc2xpZGVyLS1mb2N1c2VkJzogaXNGb2N1c2VkLnZhbHVlLFxuICAgICAgICAgICd2LXNsaWRlci0tcHJlc3NlZCc6IG1vdXNlUHJlc3NlZC52YWx1ZSxcbiAgICAgICAgICAndi1zbGlkZXItLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWRcbiAgICAgICAgfSwgcnRsQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9LCBpbnB1dFByb3BzLCB7XG4gICAgICAgIFwiZm9jdXNlZFwiOiBpc0ZvY3VzZWQudmFsdWVcbiAgICAgIH0pLCB7XG4gICAgICAgIC4uLnNsb3RzLFxuICAgICAgICBwcmVwZW5kOiBoYXNQcmVwZW5kID8gc2xvdFByb3BzID0+IF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtzbG90cy5sYWJlbD8uKHNsb3RQcm9wcykgPz8gKHByb3BzLmxhYmVsID8gX2NyZWF0ZVZOb2RlKFZMYWJlbCwge1xuICAgICAgICAgIFwiaWRcIjogc2xvdFByb3BzLmlkLnZhbHVlLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXNsaWRlcl9fbGFiZWxcIixcbiAgICAgICAgICBcInRleHRcIjogcHJvcHMubGFiZWxcbiAgICAgICAgfSwgbnVsbCkgOiB1bmRlZmluZWQpLCBzbG90cy5wcmVwZW5kPy4oc2xvdFByb3BzKV0pIDogdW5kZWZpbmVkLFxuICAgICAgICBkZWZhdWx0OiBfcmVmNCA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbWVzc2FnZXNJZFxuICAgICAgICAgIH0gPSBfcmVmNDtcbiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXNsaWRlcl9fY29udGFpbmVyXCIsXG4gICAgICAgICAgICBcIm9uTW91c2Vkb3duXCI6ICFyZWFkb25seS52YWx1ZSA/IG9uU2xpZGVyTW91c2Vkb3duIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgXCJvblRvdWNoc3RhcnRQYXNzaXZlXCI6ICFyZWFkb25seS52YWx1ZSA/IG9uU2xpZGVyVG91Y2hzdGFydCA6IHVuZGVmaW5lZFxuICAgICAgICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBcImlkXCI6IGlkLnZhbHVlLFxuICAgICAgICAgICAgXCJuYW1lXCI6IHByb3BzLm5hbWUgfHwgaWQudmFsdWUsXG4gICAgICAgICAgICBcImRpc2FibGVkXCI6ICEhcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICBcInJlYWRvbmx5XCI6ICEhcHJvcHMucmVhZG9ubHksXG4gICAgICAgICAgICBcInRhYmluZGV4XCI6IFwiLTFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogbW9kZWwudmFsdWVcbiAgICAgICAgICB9LCBudWxsKSwgX2NyZWF0ZVZOb2RlKFZTbGlkZXJUcmFjaywge1xuICAgICAgICAgICAgXCJyZWZcIjogdHJhY2tDb250YWluZXJSZWYsXG4gICAgICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgICAgICBcInN0b3BcIjogdHJhY2tTdG9wLnZhbHVlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgJ3RpY2stbGFiZWwnOiBzbG90c1sndGljay1sYWJlbCddXG4gICAgICAgICAgfSksIF9jcmVhdGVWTm9kZShWU2xpZGVyVGh1bWIsIHtcbiAgICAgICAgICAgIFwicmVmXCI6IHRodW1iQ29udGFpbmVyUmVmLFxuICAgICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IG1lc3NhZ2VzSWQudmFsdWUsXG4gICAgICAgICAgICBcImZvY3VzZWRcIjogaXNGb2N1c2VkLnZhbHVlLFxuICAgICAgICAgICAgXCJtaW5cIjogbWluLnZhbHVlLFxuICAgICAgICAgICAgXCJtYXhcIjogbWF4LnZhbHVlLFxuICAgICAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IHYgPT4gbW9kZWwudmFsdWUgPSB2LFxuICAgICAgICAgICAgXCJwb3NpdGlvblwiOiB0cmFja1N0b3AudmFsdWUsXG4gICAgICAgICAgICBcImVsZXZhdGlvblwiOiBwcm9wcy5lbGV2YXRpb24sXG4gICAgICAgICAgICBcIm9uRm9jdXNcIjogZm9jdXMsXG4gICAgICAgICAgICBcIm9uQmx1clwiOiBibHVyXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgJ3RodW1iLWxhYmVsJzogc2xvdHNbJ3RodW1iLWxhYmVsJ11cbiAgICAgICAgICB9KV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlNsaWRlci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZDb2xvclBpY2tlclByZXZpZXcuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZTbGlkZXIgfSBmcm9tIFwiLi4vVlNsaWRlci9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgbnVsbENvbG9yIH0gZnJvbSBcIi4vdXRpbC9pbmRleC5tanNcIjtcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgSFNWdG9DU1MsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZDb2xvclBpY2tlclByZXZpZXdQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbG9yOiB7XG4gICAgdHlwZTogT2JqZWN0XG4gIH0sXG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICBoaWRlQWxwaGE6IEJvb2xlYW4sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpXG59LCAnVkNvbG9yUGlja2VyUHJldmlldycpO1xuZXhwb3J0IGNvbnN0IFZDb2xvclBpY2tlclByZXZpZXcgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnVkNvbG9yUGlja2VyUHJldmlldycsXG4gIHByb3BzOiBtYWtlVkNvbG9yUGlja2VyUHJldmlld1Byb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTpjb2xvcic6IGNvbG9yID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgZW1pdFxuICAgIH0gPSBfcmVmO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtY29sb3ItcGlja2VyLXByZXZpZXcnLCB7XG4gICAgICAgICd2LWNvbG9yLXBpY2tlci1wcmV2aWV3LS1oaWRlLWFscGhhJzogcHJvcHMuaGlkZUFscGhhXG4gICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgfSwgW19jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFwidi1jb2xvci1waWNrZXItcHJldmlld19fZG90XCJcbiAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBIU1Z0b0NTUyhwcm9wcy5jb2xvciA/PyBudWxsQ29sb3IpXG4gICAgICB9XG4gICAgfSwgbnVsbCldKSwgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJ2LWNvbG9yLXBpY2tlci1wcmV2aWV3X19zbGlkZXJzXCJcbiAgICB9LCBbX2NyZWF0ZVZOb2RlKFZTbGlkZXIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJ2LWNvbG9yLXBpY2tlci1wcmV2aWV3X190cmFjayB2LWNvbG9yLXBpY2tlci1wcmV2aWV3X19odWVcIixcbiAgICAgIFwibW9kZWxWYWx1ZVwiOiBwcm9wcy5jb2xvcj8uaCxcbiAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBoID0+IGVtaXQoJ3VwZGF0ZTpjb2xvcicsIHtcbiAgICAgICAgLi4uKHByb3BzLmNvbG9yID8/IG51bGxDb2xvciksXG4gICAgICAgIGhcbiAgICAgIH0pLFxuICAgICAgXCJzdGVwXCI6IDAsXG4gICAgICBcIm1pblwiOiAwLFxuICAgICAgXCJtYXhcIjogMzYwLFxuICAgICAgXCJkaXNhYmxlZFwiOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIFwidGh1bWJTaXplXCI6IDE0LFxuICAgICAgXCJ0cmFja1NpemVcIjogOCxcbiAgICAgIFwidHJhY2tGaWxsQ29sb3JcIjogXCJ3aGl0ZVwiLFxuICAgICAgXCJoaWRlRGV0YWlsc1wiOiB0cnVlXG4gICAgfSwgbnVsbCksICFwcm9wcy5oaWRlQWxwaGEgJiYgX2NyZWF0ZVZOb2RlKFZTbGlkZXIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJ2LWNvbG9yLXBpY2tlci1wcmV2aWV3X190cmFjayB2LWNvbG9yLXBpY2tlci1wcmV2aWV3X19hbHBoYVwiLFxuICAgICAgXCJtb2RlbFZhbHVlXCI6IHByb3BzLmNvbG9yPy5hID8/IDEsXG4gICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogYSA9PiBlbWl0KCd1cGRhdGU6Y29sb3InLCB7XG4gICAgICAgIC4uLihwcm9wcy5jb2xvciA/PyBudWxsQ29sb3IpLFxuICAgICAgICBhXG4gICAgICB9KSxcbiAgICAgIFwic3RlcFwiOiAxIC8gMjU2LFxuICAgICAgXCJtaW5cIjogMCxcbiAgICAgIFwibWF4XCI6IDEsXG4gICAgICBcImRpc2FibGVkXCI6IHByb3BzLmRpc2FibGVkLFxuICAgICAgXCJ0aHVtYlNpemVcIjogMTQsXG4gICAgICBcInRyYWNrU2l6ZVwiOiA4LFxuICAgICAgXCJ0cmFja0ZpbGxDb2xvclwiOiBcIndoaXRlXCIsXG4gICAgICBcImhpZGVEZXRhaWxzXCI6IHRydWVcbiAgICB9LCBudWxsKV0pXSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ29sb3JQaWNrZXJQcmV2aWV3Lm1qcy5tYXAiLCJjb25zdCByZWQgPSBPYmplY3QuZnJlZXplKHtcbiAgYmFzZTogJyNmNDQzMzYnLFxuICBsaWdodGVuNTogJyNmZmViZWUnLFxuICBsaWdodGVuNDogJyNmZmNkZDInLFxuICBsaWdodGVuMzogJyNlZjlhOWEnLFxuICBsaWdodGVuMjogJyNlNTczNzMnLFxuICBsaWdodGVuMTogJyNlZjUzNTAnLFxuICBkYXJrZW4xOiAnI2U1MzkzNScsXG4gIGRhcmtlbjI6ICcjZDMyZjJmJyxcbiAgZGFya2VuMzogJyNjNjI4MjgnLFxuICBkYXJrZW40OiAnI2I3MWMxYycsXG4gIGFjY2VudDE6ICcjZmY4YTgwJyxcbiAgYWNjZW50MjogJyNmZjUyNTInLFxuICBhY2NlbnQzOiAnI2ZmMTc0NCcsXG4gIGFjY2VudDQ6ICcjZDUwMDAwJ1xufSk7XG5jb25zdCBwaW5rID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjZTkxZTYzJyxcbiAgbGlnaHRlbjU6ICcjZmNlNGVjJyxcbiAgbGlnaHRlbjQ6ICcjZjhiYmQwJyxcbiAgbGlnaHRlbjM6ICcjZjQ4ZmIxJyxcbiAgbGlnaHRlbjI6ICcjZjA2MjkyJyxcbiAgbGlnaHRlbjE6ICcjZWM0MDdhJyxcbiAgZGFya2VuMTogJyNkODFiNjAnLFxuICBkYXJrZW4yOiAnI2MyMTg1YicsXG4gIGRhcmtlbjM6ICcjYWQxNDU3JyxcbiAgZGFya2VuNDogJyM4ODBlNGYnLFxuICBhY2NlbnQxOiAnI2ZmODBhYicsXG4gIGFjY2VudDI6ICcjZmY0MDgxJyxcbiAgYWNjZW50MzogJyNmNTAwNTcnLFxuICBhY2NlbnQ0OiAnI2M1MTE2Midcbn0pO1xuY29uc3QgcHVycGxlID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjOWMyN2IwJyxcbiAgbGlnaHRlbjU6ICcjZjNlNWY1JyxcbiAgbGlnaHRlbjQ6ICcjZTFiZWU3JyxcbiAgbGlnaHRlbjM6ICcjY2U5M2Q4JyxcbiAgbGlnaHRlbjI6ICcjYmE2OGM4JyxcbiAgbGlnaHRlbjE6ICcjYWI0N2JjJyxcbiAgZGFya2VuMTogJyM4ZTI0YWEnLFxuICBkYXJrZW4yOiAnIzdiMWZhMicsXG4gIGRhcmtlbjM6ICcjNmExYjlhJyxcbiAgZGFya2VuNDogJyM0YTE0OGMnLFxuICBhY2NlbnQxOiAnI2VhODBmYycsXG4gIGFjY2VudDI6ICcjZTA0MGZiJyxcbiAgYWNjZW50MzogJyNkNTAwZjknLFxuICBhY2NlbnQ0OiAnI2FhMDBmZidcbn0pO1xuY29uc3QgZGVlcFB1cnBsZSA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnIzY3M2FiNycsXG4gIGxpZ2h0ZW41OiAnI2VkZTdmNicsXG4gIGxpZ2h0ZW40OiAnI2QxYzRlOScsXG4gIGxpZ2h0ZW4zOiAnI2IzOWRkYicsXG4gIGxpZ2h0ZW4yOiAnIzk1NzVjZCcsXG4gIGxpZ2h0ZW4xOiAnIzdlNTdjMicsXG4gIGRhcmtlbjE6ICcjNWUzNWIxJyxcbiAgZGFya2VuMjogJyM1MTJkYTgnLFxuICBkYXJrZW4zOiAnIzQ1MjdhMCcsXG4gIGRhcmtlbjQ6ICcjMzExYjkyJyxcbiAgYWNjZW50MTogJyNiMzg4ZmYnLFxuICBhY2NlbnQyOiAnIzdjNGRmZicsXG4gIGFjY2VudDM6ICcjNjUxZmZmJyxcbiAgYWNjZW50NDogJyM2MjAwZWEnXG59KTtcbmNvbnN0IGluZGlnbyA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnIzNmNTFiNScsXG4gIGxpZ2h0ZW41OiAnI2U4ZWFmNicsXG4gIGxpZ2h0ZW40OiAnI2M1Y2FlOScsXG4gIGxpZ2h0ZW4zOiAnIzlmYThkYScsXG4gIGxpZ2h0ZW4yOiAnIzc5ODZjYicsXG4gIGxpZ2h0ZW4xOiAnIzVjNmJjMCcsXG4gIGRhcmtlbjE6ICcjMzk0OWFiJyxcbiAgZGFya2VuMjogJyMzMDNmOWYnLFxuICBkYXJrZW4zOiAnIzI4MzU5MycsXG4gIGRhcmtlbjQ6ICcjMWEyMzdlJyxcbiAgYWNjZW50MTogJyM4YzllZmYnLFxuICBhY2NlbnQyOiAnIzUzNmRmZScsXG4gIGFjY2VudDM6ICcjM2Q1YWZlJyxcbiAgYWNjZW50NDogJyMzMDRmZmUnXG59KTtcbmNvbnN0IGJsdWUgPSBPYmplY3QuZnJlZXplKHtcbiAgYmFzZTogJyMyMTk2ZjMnLFxuICBsaWdodGVuNTogJyNlM2YyZmQnLFxuICBsaWdodGVuNDogJyNiYmRlZmInLFxuICBsaWdodGVuMzogJyM5MGNhZjknLFxuICBsaWdodGVuMjogJyM2NGI1ZjYnLFxuICBsaWdodGVuMTogJyM0MmE1ZjUnLFxuICBkYXJrZW4xOiAnIzFlODhlNScsXG4gIGRhcmtlbjI6ICcjMTk3NmQyJyxcbiAgZGFya2VuMzogJyMxNTY1YzAnLFxuICBkYXJrZW40OiAnIzBkNDdhMScsXG4gIGFjY2VudDE6ICcjODJiMWZmJyxcbiAgYWNjZW50MjogJyM0NDhhZmYnLFxuICBhY2NlbnQzOiAnIzI5NzlmZicsXG4gIGFjY2VudDQ6ICcjMjk2MmZmJ1xufSk7XG5jb25zdCBsaWdodEJsdWUgPSBPYmplY3QuZnJlZXplKHtcbiAgYmFzZTogJyMwM2E5ZjQnLFxuICBsaWdodGVuNTogJyNlMWY1ZmUnLFxuICBsaWdodGVuNDogJyNiM2U1ZmMnLFxuICBsaWdodGVuMzogJyM4MWQ0ZmEnLFxuICBsaWdodGVuMjogJyM0ZmMzZjcnLFxuICBsaWdodGVuMTogJyMyOWI2ZjYnLFxuICBkYXJrZW4xOiAnIzAzOWJlNScsXG4gIGRhcmtlbjI6ICcjMDI4OGQxJyxcbiAgZGFya2VuMzogJyMwMjc3YmQnLFxuICBkYXJrZW40OiAnIzAxNTc5YicsXG4gIGFjY2VudDE6ICcjODBkOGZmJyxcbiAgYWNjZW50MjogJyM0MGM0ZmYnLFxuICBhY2NlbnQzOiAnIzAwYjBmZicsXG4gIGFjY2VudDQ6ICcjMDA5MWVhJ1xufSk7XG5jb25zdCBjeWFuID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjMDBiY2Q0JyxcbiAgbGlnaHRlbjU6ICcjZTBmN2ZhJyxcbiAgbGlnaHRlbjQ6ICcjYjJlYmYyJyxcbiAgbGlnaHRlbjM6ICcjODBkZWVhJyxcbiAgbGlnaHRlbjI6ICcjNGRkMGUxJyxcbiAgbGlnaHRlbjE6ICcjMjZjNmRhJyxcbiAgZGFya2VuMTogJyMwMGFjYzEnLFxuICBkYXJrZW4yOiAnIzAwOTdhNycsXG4gIGRhcmtlbjM6ICcjMDA4MzhmJyxcbiAgZGFya2VuNDogJyMwMDYwNjQnLFxuICBhY2NlbnQxOiAnIzg0ZmZmZicsXG4gIGFjY2VudDI6ICcjMThmZmZmJyxcbiAgYWNjZW50MzogJyMwMGU1ZmYnLFxuICBhY2NlbnQ0OiAnIzAwYjhkNCdcbn0pO1xuY29uc3QgdGVhbCA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnIzAwOTY4OCcsXG4gIGxpZ2h0ZW41OiAnI2UwZjJmMScsXG4gIGxpZ2h0ZW40OiAnI2IyZGZkYicsXG4gIGxpZ2h0ZW4zOiAnIzgwY2JjNCcsXG4gIGxpZ2h0ZW4yOiAnIzRkYjZhYycsXG4gIGxpZ2h0ZW4xOiAnIzI2YTY5YScsXG4gIGRhcmtlbjE6ICcjMDA4OTdiJyxcbiAgZGFya2VuMjogJyMwMDc5NmInLFxuICBkYXJrZW4zOiAnIzAwNjk1YycsXG4gIGRhcmtlbjQ6ICcjMDA0ZDQwJyxcbiAgYWNjZW50MTogJyNhN2ZmZWInLFxuICBhY2NlbnQyOiAnIzY0ZmZkYScsXG4gIGFjY2VudDM6ICcjMWRlOWI2JyxcbiAgYWNjZW50NDogJyMwMGJmYTUnXG59KTtcbmNvbnN0IGdyZWVuID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjNGNhZjUwJyxcbiAgbGlnaHRlbjU6ICcjZThmNWU5JyxcbiAgbGlnaHRlbjQ6ICcjYzhlNmM5JyxcbiAgbGlnaHRlbjM6ICcjYTVkNmE3JyxcbiAgbGlnaHRlbjI6ICcjODFjNzg0JyxcbiAgbGlnaHRlbjE6ICcjNjZiYjZhJyxcbiAgZGFya2VuMTogJyM0M2EwNDcnLFxuICBkYXJrZW4yOiAnIzM4OGUzYycsXG4gIGRhcmtlbjM6ICcjMmU3ZDMyJyxcbiAgZGFya2VuNDogJyMxYjVlMjAnLFxuICBhY2NlbnQxOiAnI2I5ZjZjYScsXG4gIGFjY2VudDI6ICcjNjlmMGFlJyxcbiAgYWNjZW50MzogJyMwMGU2NzYnLFxuICBhY2NlbnQ0OiAnIzAwYzg1Mydcbn0pO1xuY29uc3QgbGlnaHRHcmVlbiA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnIzhiYzM0YScsXG4gIGxpZ2h0ZW41OiAnI2YxZjhlOScsXG4gIGxpZ2h0ZW40OiAnI2RjZWRjOCcsXG4gIGxpZ2h0ZW4zOiAnI2M1ZTFhNScsXG4gIGxpZ2h0ZW4yOiAnI2FlZDU4MScsXG4gIGxpZ2h0ZW4xOiAnIzljY2M2NScsXG4gIGRhcmtlbjE6ICcjN2NiMzQyJyxcbiAgZGFya2VuMjogJyM2ODlmMzgnLFxuICBkYXJrZW4zOiAnIzU1OGIyZicsXG4gIGRhcmtlbjQ6ICcjMzM2OTFlJyxcbiAgYWNjZW50MTogJyNjY2ZmOTAnLFxuICBhY2NlbnQyOiAnI2IyZmY1OScsXG4gIGFjY2VudDM6ICcjNzZmZjAzJyxcbiAgYWNjZW50NDogJyM2NGRkMTcnXG59KTtcbmNvbnN0IGxpbWUgPSBPYmplY3QuZnJlZXplKHtcbiAgYmFzZTogJyNjZGRjMzknLFxuICBsaWdodGVuNTogJyNmOWZiZTcnLFxuICBsaWdodGVuNDogJyNmMGY0YzMnLFxuICBsaWdodGVuMzogJyNlNmVlOWMnLFxuICBsaWdodGVuMjogJyNkY2U3NzUnLFxuICBsaWdodGVuMTogJyNkNGUxNTcnLFxuICBkYXJrZW4xOiAnI2MwY2EzMycsXG4gIGRhcmtlbjI6ICcjYWZiNDJiJyxcbiAgZGFya2VuMzogJyM5ZTlkMjQnLFxuICBkYXJrZW40OiAnIzgyNzcxNycsXG4gIGFjY2VudDE6ICcjZjRmZjgxJyxcbiAgYWNjZW50MjogJyNlZWZmNDEnLFxuICBhY2NlbnQzOiAnI2M2ZmYwMCcsXG4gIGFjY2VudDQ6ICcjYWVlYTAwJ1xufSk7XG5jb25zdCB5ZWxsb3cgPSBPYmplY3QuZnJlZXplKHtcbiAgYmFzZTogJyNmZmViM2InLFxuICBsaWdodGVuNTogJyNmZmZkZTcnLFxuICBsaWdodGVuNDogJyNmZmY5YzQnLFxuICBsaWdodGVuMzogJyNmZmY1OWQnLFxuICBsaWdodGVuMjogJyNmZmYxNzYnLFxuICBsaWdodGVuMTogJyNmZmVlNTgnLFxuICBkYXJrZW4xOiAnI2ZkZDgzNScsXG4gIGRhcmtlbjI6ICcjZmJjMDJkJyxcbiAgZGFya2VuMzogJyNmOWE4MjUnLFxuICBkYXJrZW40OiAnI2Y1N2YxNycsXG4gIGFjY2VudDE6ICcjZmZmZjhkJyxcbiAgYWNjZW50MjogJyNmZmZmMDAnLFxuICBhY2NlbnQzOiAnI2ZmZWEwMCcsXG4gIGFjY2VudDQ6ICcjZmZkNjAwJ1xufSk7XG5jb25zdCBhbWJlciA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnI2ZmYzEwNycsXG4gIGxpZ2h0ZW41OiAnI2ZmZjhlMScsXG4gIGxpZ2h0ZW40OiAnI2ZmZWNiMycsXG4gIGxpZ2h0ZW4zOiAnI2ZmZTA4MicsXG4gIGxpZ2h0ZW4yOiAnI2ZmZDU0ZicsXG4gIGxpZ2h0ZW4xOiAnI2ZmY2EyOCcsXG4gIGRhcmtlbjE6ICcjZmZiMzAwJyxcbiAgZGFya2VuMjogJyNmZmEwMDAnLFxuICBkYXJrZW4zOiAnI2ZmOGYwMCcsXG4gIGRhcmtlbjQ6ICcjZmY2ZjAwJyxcbiAgYWNjZW50MTogJyNmZmU1N2YnLFxuICBhY2NlbnQyOiAnI2ZmZDc0MCcsXG4gIGFjY2VudDM6ICcjZmZjNDAwJyxcbiAgYWNjZW50NDogJyNmZmFiMDAnXG59KTtcbmNvbnN0IG9yYW5nZSA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnI2ZmOTgwMCcsXG4gIGxpZ2h0ZW41OiAnI2ZmZjNlMCcsXG4gIGxpZ2h0ZW40OiAnI2ZmZTBiMicsXG4gIGxpZ2h0ZW4zOiAnI2ZmY2M4MCcsXG4gIGxpZ2h0ZW4yOiAnI2ZmYjc0ZCcsXG4gIGxpZ2h0ZW4xOiAnI2ZmYTcyNicsXG4gIGRhcmtlbjE6ICcjZmI4YzAwJyxcbiAgZGFya2VuMjogJyNmNTdjMDAnLFxuICBkYXJrZW4zOiAnI2VmNmMwMCcsXG4gIGRhcmtlbjQ6ICcjZTY1MTAwJyxcbiAgYWNjZW50MTogJyNmZmQxODAnLFxuICBhY2NlbnQyOiAnI2ZmYWI0MCcsXG4gIGFjY2VudDM6ICcjZmY5MTAwJyxcbiAgYWNjZW50NDogJyNmZjZkMDAnXG59KTtcbmNvbnN0IGRlZXBPcmFuZ2UgPSBPYmplY3QuZnJlZXplKHtcbiAgYmFzZTogJyNmZjU3MjInLFxuICBsaWdodGVuNTogJyNmYmU5ZTcnLFxuICBsaWdodGVuNDogJyNmZmNjYmMnLFxuICBsaWdodGVuMzogJyNmZmFiOTEnLFxuICBsaWdodGVuMjogJyNmZjhhNjUnLFxuICBsaWdodGVuMTogJyNmZjcwNDMnLFxuICBkYXJrZW4xOiAnI2Y0NTExZScsXG4gIGRhcmtlbjI6ICcjZTY0YTE5JyxcbiAgZGFya2VuMzogJyNkODQzMTUnLFxuICBkYXJrZW40OiAnI2JmMzYwYycsXG4gIGFjY2VudDE6ICcjZmY5ZTgwJyxcbiAgYWNjZW50MjogJyNmZjZlNDAnLFxuICBhY2NlbnQzOiAnI2ZmM2QwMCcsXG4gIGFjY2VudDQ6ICcjZGQyYzAwJ1xufSk7XG5jb25zdCBicm93biA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnIzc5NTU0OCcsXG4gIGxpZ2h0ZW41OiAnI2VmZWJlOScsXG4gIGxpZ2h0ZW40OiAnI2Q3Y2NjOCcsXG4gIGxpZ2h0ZW4zOiAnI2JjYWFhNCcsXG4gIGxpZ2h0ZW4yOiAnI2ExODg3ZicsXG4gIGxpZ2h0ZW4xOiAnIzhkNmU2MycsXG4gIGRhcmtlbjE6ICcjNmQ0YzQxJyxcbiAgZGFya2VuMjogJyM1ZDQwMzcnLFxuICBkYXJrZW4zOiAnIzRlMzQyZScsXG4gIGRhcmtlbjQ6ICcjM2UyNzIzJ1xufSk7XG5jb25zdCBibHVlR3JleSA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnIzYwN2Q4YicsXG4gIGxpZ2h0ZW41OiAnI2VjZWZmMScsXG4gIGxpZ2h0ZW40OiAnI2NmZDhkYycsXG4gIGxpZ2h0ZW4zOiAnI2IwYmVjNScsXG4gIGxpZ2h0ZW4yOiAnIzkwYTRhZScsXG4gIGxpZ2h0ZW4xOiAnIzc4OTA5YycsXG4gIGRhcmtlbjE6ICcjNTQ2ZTdhJyxcbiAgZGFya2VuMjogJyM0NTVhNjQnLFxuICBkYXJrZW4zOiAnIzM3NDc0ZicsXG4gIGRhcmtlbjQ6ICcjMjYzMjM4J1xufSk7XG5jb25zdCBncmV5ID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjOWU5ZTllJyxcbiAgbGlnaHRlbjU6ICcjZmFmYWZhJyxcbiAgbGlnaHRlbjQ6ICcjZjVmNWY1JyxcbiAgbGlnaHRlbjM6ICcjZWVlZWVlJyxcbiAgbGlnaHRlbjI6ICcjZTBlMGUwJyxcbiAgbGlnaHRlbjE6ICcjYmRiZGJkJyxcbiAgZGFya2VuMTogJyM3NTc1NzUnLFxuICBkYXJrZW4yOiAnIzYxNjE2MScsXG4gIGRhcmtlbjM6ICcjNDI0MjQyJyxcbiAgZGFya2VuNDogJyMyMTIxMjEnXG59KTtcbmNvbnN0IHNoYWRlcyA9IE9iamVjdC5mcmVlemUoe1xuICBibGFjazogJyMwMDAwMDAnLFxuICB3aGl0ZTogJyNmZmZmZmYnLFxuICB0cmFuc3BhcmVudDogJyNmZmZmZmYwMCdcbn0pO1xuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmZyZWV6ZSh7XG4gIHJlZCxcbiAgcGluayxcbiAgcHVycGxlLFxuICBkZWVwUHVycGxlLFxuICBpbmRpZ28sXG4gIGJsdWUsXG4gIGxpZ2h0Qmx1ZSxcbiAgY3lhbixcbiAgdGVhbCxcbiAgZ3JlZW4sXG4gIGxpZ2h0R3JlZW4sXG4gIGxpbWUsXG4gIHllbGxvdyxcbiAgYW1iZXIsXG4gIG9yYW5nZSxcbiAgZGVlcE9yYW5nZSxcbiAgYnJvd24sXG4gIGJsdWVHcmV5LFxuICBncmV5LFxuICBzaGFkZXNcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sb3JzLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkNvbG9yUGlja2VyU3dhdGNoZXMuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJY29uIH0gZnJvbSBcIi4uL1ZJY29uL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBkZWVwRXF1YWwsIGRlZmluZUNvbXBvbmVudCwgZ2V0Q29udHJhc3QsIHBhcnNlQ29sb3IsIHByb3BzRmFjdG9yeSwgUkdCdG9DU1MsIFJHQnRvSFNWLCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmltcG9ydCBjb2xvcnMgZnJvbSBcIi4uLy4uL3V0aWwvY29sb3JzLm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWQ29sb3JQaWNrZXJTd2F0Y2hlc1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgc3dhdGNoZXM6IHtcbiAgICB0eXBlOiBBcnJheSxcbiAgICBkZWZhdWx0OiAoKSA9PiBwYXJzZURlZmF1bHRDb2xvcnMoY29sb3JzKVxuICB9LFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgY29sb3I6IE9iamVjdCxcbiAgbWF4SGVpZ2h0OiBbTnVtYmVyLCBTdHJpbmddLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKVxufSwgJ1ZDb2xvclBpY2tlclN3YXRjaGVzJyk7XG5mdW5jdGlvbiBwYXJzZURlZmF1bHRDb2xvcnMoY29sb3JzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhjb2xvcnMpLm1hcChrZXkgPT4ge1xuICAgIGNvbnN0IGNvbG9yID0gY29sb3JzW2tleV07XG4gICAgcmV0dXJuIGNvbG9yLmJhc2UgPyBbY29sb3IuYmFzZSwgY29sb3IuZGFya2VuNCwgY29sb3IuZGFya2VuMywgY29sb3IuZGFya2VuMiwgY29sb3IuZGFya2VuMSwgY29sb3IubGlnaHRlbjEsIGNvbG9yLmxpZ2h0ZW4yLCBjb2xvci5saWdodGVuMywgY29sb3IubGlnaHRlbjQsIGNvbG9yLmxpZ2h0ZW41XSA6IFtjb2xvci5ibGFjaywgY29sb3Iud2hpdGUsIGNvbG9yLnRyYW5zcGFyZW50XTtcbiAgfSk7XG59XG5leHBvcnQgY29uc3QgVkNvbG9yUGlja2VyU3dhdGNoZXMgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnVkNvbG9yUGlja2VyU3dhdGNoZXMnLFxuICBwcm9wczogbWFrZVZDb2xvclBpY2tlclN3YXRjaGVzUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOmNvbG9yJzogY29sb3IgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBlbWl0XG4gICAgfSA9IF9yZWY7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1jb2xvci1waWNrZXItc3dhdGNoZXMnLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IFt7XG4gICAgICAgIG1heEhlaWdodDogY29udmVydFRvVW5pdChwcm9wcy5tYXhIZWlnaHQpXG4gICAgICB9LCBwcm9wcy5zdHlsZV1cbiAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIG51bGwsIFtwcm9wcy5zd2F0Y2hlcy5tYXAoc3dhdGNoID0+IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFwidi1jb2xvci1waWNrZXItc3dhdGNoZXNfX3N3YXRjaFwiXG4gICAgfSwgW3N3YXRjaC5tYXAoY29sb3IgPT4ge1xuICAgICAgY29uc3QgcmdiYSA9IHBhcnNlQ29sb3IoY29sb3IpO1xuICAgICAgY29uc3QgaHN2YSA9IFJHQnRvSFNWKHJnYmEpO1xuICAgICAgY29uc3QgYmFja2dyb3VuZCA9IFJHQnRvQ1NTKHJnYmEpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWNvbG9yLXBpY2tlci1zd2F0Y2hlc19fY29sb3JcIixcbiAgICAgICAgXCJvbkNsaWNrXCI6ICgpID0+IGhzdmEgJiYgZW1pdCgndXBkYXRlOmNvbG9yJywgaHN2YSlcbiAgICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kXG4gICAgICAgIH1cbiAgICAgIH0sIFtwcm9wcy5jb2xvciAmJiBkZWVwRXF1YWwocHJvcHMuY29sb3IsIGhzdmEpID8gX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgIFwic2l6ZVwiOiBcIngtc21hbGxcIixcbiAgICAgICAgXCJpY29uXCI6IFwiJHN1Y2Nlc3NcIixcbiAgICAgICAgXCJjb2xvclwiOiBnZXRDb250cmFzdChjb2xvciwgJyNGRkZGRkYnKSA+IDIgPyAnd2hpdGUnIDogJ2JsYWNrJ1xuICAgICAgfSwgbnVsbCkgOiB1bmRlZmluZWRdKV0pO1xuICAgIH0pXSkpXSldKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDb2xvclBpY2tlclN3YXRjaGVzLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlNoZWV0LmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUJvcmRlclByb3BzLCB1c2VCb3JkZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvYm9yZGVyLm1qc1wiO1xuaW1wb3J0IHsgdXNlQmFja2dyb3VuZENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VEaW1lbnNpb25Qcm9wcywgdXNlRGltZW5zaW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RpbWVuc2lvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRWxldmF0aW9uUHJvcHMsIHVzZUVsZXZhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzXCI7XG5pbXBvcnQgeyBtYWtlTG9jYXRpb25Qcm9wcywgdXNlTG9jYXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBtYWtlUG9zaXRpb25Qcm9wcywgdXNlUG9zaXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcG9zaXRpb24ubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWU2hlZXRQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbG9yOiBTdHJpbmcsXG4gIC4uLm1ha2VCb3JkZXJQcm9wcygpLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURpbWVuc2lvblByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlTG9jYXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUG9zaXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpXG59LCAnVlNoZWV0Jyk7XG5leHBvcnQgY29uc3QgVlNoZWV0ID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZTaGVldCcsXG4gIHByb3BzOiBtYWtlVlNoZWV0UHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcih0b1JlZihwcm9wcywgJ2NvbG9yJykpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJvcmRlckNsYXNzZXNcbiAgICB9ID0gdXNlQm9yZGVyKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBkaW1lbnNpb25TdHlsZXNcbiAgICB9ID0gdXNlRGltZW5zaW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgbG9jYXRpb25TdHlsZXNcbiAgICB9ID0gdXNlTG9jYXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHBvc2l0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VQb3NpdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LXNoZWV0JywgdGhlbWVDbGFzc2VzLnZhbHVlLCBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLnZhbHVlLCBib3JkZXJDbGFzc2VzLnZhbHVlLCBlbGV2YXRpb25DbGFzc2VzLnZhbHVlLCBwb3NpdGlvbkNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IFtiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWUsIGRpbWVuc2lvblN0eWxlcy52YWx1ZSwgbG9jYXRpb25TdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXVxuICAgIH0sIHNsb3RzKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZTaGVldC5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZDb2xvclBpY2tlci5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkNvbG9yUGlja2VyQ2FudmFzIH0gZnJvbSBcIi4vVkNvbG9yUGlja2VyQ2FudmFzLm1qc1wiO1xuaW1wb3J0IHsgVkNvbG9yUGlja2VyRWRpdCB9IGZyb20gXCIuL1ZDb2xvclBpY2tlckVkaXQubWpzXCI7XG5pbXBvcnQgeyBWQ29sb3JQaWNrZXJQcmV2aWV3IH0gZnJvbSBcIi4vVkNvbG9yUGlja2VyUHJldmlldy5tanNcIjtcbmltcG9ydCB7IFZDb2xvclBpY2tlclN3YXRjaGVzIH0gZnJvbSBcIi4vVkNvbG9yUGlja2VyU3dhdGNoZXMubWpzXCI7XG5pbXBvcnQgeyBtYWtlVlNoZWV0UHJvcHMsIFZTaGVldCB9IGZyb20gXCIuLi9WU2hlZXQvVlNoZWV0Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgb25Nb3VudGVkLCByZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZXh0cmFjdENvbG9yLCBtb2RlcywgbnVsbENvbG9yIH0gZnJvbSBcIi4vdXRpbC9pbmRleC5tanNcIjtcbmltcG9ydCB7IGNvbnNvbGVXYXJuLCBkZWZpbmVDb21wb25lbnQsIEhTVnRvQ1NTLCBvbWl0LCBwYXJzZUNvbG9yLCBwcm9wc0ZhY3RvcnksIFJHQnRvSFNWLCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkNvbG9yUGlja2VyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjYW52YXNIZWlnaHQ6IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGRlZmF1bHQ6IDE1MFxuICB9LFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgZG90U2l6ZToge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMTBcbiAgfSxcbiAgaGlkZUNhbnZhczogQm9vbGVhbixcbiAgaGlkZVNsaWRlcnM6IEJvb2xlYW4sXG4gIGhpZGVJbnB1dHM6IEJvb2xlYW4sXG4gIG1vZGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ3JnYmEnLFxuICAgIHZhbGlkYXRvcjogdiA9PiBPYmplY3Qua2V5cyhtb2RlcykuaW5jbHVkZXModilcbiAgfSxcbiAgbW9kZXM6IHtcbiAgICB0eXBlOiBBcnJheSxcbiAgICBkZWZhdWx0OiAoKSA9PiBPYmplY3Qua2V5cyhtb2RlcyksXG4gICAgdmFsaWRhdG9yOiB2ID0+IEFycmF5LmlzQXJyYXkodikgJiYgdi5ldmVyeShtID0+IE9iamVjdC5rZXlzKG1vZGVzKS5pbmNsdWRlcyhtKSlcbiAgfSxcbiAgc2hvd1N3YXRjaGVzOiBCb29sZWFuLFxuICBzd2F0Y2hlczogQXJyYXksXG4gIHN3YXRjaGVzTWF4SGVpZ2h0OiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAxNTBcbiAgfSxcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IFtPYmplY3QsIFN0cmluZ11cbiAgfSxcbiAgLi4ub21pdChtYWtlVlNoZWV0UHJvcHMoe1xuICAgIHdpZHRoOiAzMDBcbiAgfSksIFsnaGVpZ2h0JywgJ2xvY2F0aW9uJywgJ21pbkhlaWdodCcsICdtYXhIZWlnaHQnLCAnbWluV2lkdGgnLCAnbWF4V2lkdGgnXSlcbn0sICdWQ29sb3JQaWNrZXInKTtcbmV4cG9ydCBjb25zdCBWQ29sb3JQaWNrZXIgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnVkNvbG9yUGlja2VyJyxcbiAgcHJvcHM6IG1ha2VWQ29sb3JQaWNrZXJQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IGNvbG9yID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlJzogbW9kZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzKSB7XG4gICAgY29uc3QgbW9kZSA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGUnKTtcbiAgICBjb25zdCBsYXN0UGlja2VkQ29sb3IgPSByZWYobnVsbCk7XG4gICAgY29uc3QgY3VycmVudENvbG9yID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScsIHVuZGVmaW5lZCwgdiA9PiB7XG4gICAgICBpZiAodiA9PSBudWxsIHx8IHYgPT09ICcnKSByZXR1cm4gbnVsbDtcbiAgICAgIGxldCBjO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYyA9IFJHQnRvSFNWKHBhcnNlQ29sb3IodikpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGVXYXJuKGVycik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGxhc3RQaWNrZWRDb2xvci52YWx1ZSkge1xuICAgICAgICBjID0ge1xuICAgICAgICAgIC4uLmMsXG4gICAgICAgICAgaDogbGFzdFBpY2tlZENvbG9yLnZhbHVlLmhcbiAgICAgICAgfTtcbiAgICAgICAgbGFzdFBpY2tlZENvbG9yLnZhbHVlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjO1xuICAgIH0sIHYgPT4ge1xuICAgICAgaWYgKCF2KSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBleHRyYWN0Q29sb3IodiwgcHJvcHMubW9kZWxWYWx1ZSk7XG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgcnRsQ2xhc3Nlc1xuICAgIH0gPSB1c2VSdGwoKTtcbiAgICBjb25zdCB1cGRhdGVDb2xvciA9IGhzdmEgPT4ge1xuICAgICAgY3VycmVudENvbG9yLnZhbHVlID0gaHN2YTtcbiAgICAgIGxhc3RQaWNrZWRDb2xvci52YWx1ZSA9IGhzdmE7XG4gICAgfTtcbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgaWYgKCFwcm9wcy5tb2Rlcy5pbmNsdWRlcyhtb2RlLnZhbHVlKSkgbW9kZS52YWx1ZSA9IHByb3BzLm1vZGVzWzBdO1xuICAgIH0pO1xuICAgIHByb3ZpZGVEZWZhdWx0cyh7XG4gICAgICBWU2xpZGVyOiB7XG4gICAgICAgIGNvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgIHRyYWNrQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgdHJhY2tGaWxsQ29sb3I6IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBbc2hlZXRQcm9wc10gPSBWU2hlZXQuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWU2hlZXQsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJyb3VuZGVkXCI6IHByb3BzLnJvdW5kZWQsXG4gICAgICAgIFwiZWxldmF0aW9uXCI6IHByb3BzLmVsZXZhdGlvbixcbiAgICAgICAgXCJ0aGVtZVwiOiBwcm9wcy50aGVtZSxcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtY29sb3ItcGlja2VyJywgcnRsQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFt7XG4gICAgICAgICAgJy0tdi1jb2xvci1waWNrZXItY29sb3ItaHN2JzogSFNWdG9DU1Moe1xuICAgICAgICAgICAgLi4uKGN1cnJlbnRDb2xvci52YWx1ZSA/PyBudWxsQ29sb3IpLFxuICAgICAgICAgICAgYTogMVxuICAgICAgICAgIH0pXG4gICAgICAgIH0sIHByb3BzLnN0eWxlXVxuICAgICAgfSwgc2hlZXRQcm9wcywge1xuICAgICAgICBcIm1heFdpZHRoXCI6IHByb3BzLndpZHRoXG4gICAgICB9KSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbIXByb3BzLmhpZGVDYW52YXMgJiYgX2NyZWF0ZVZOb2RlKFZDb2xvclBpY2tlckNhbnZhcywge1xuICAgICAgICAgIFwia2V5XCI6IFwiY2FudmFzXCIsXG4gICAgICAgICAgXCJjb2xvclwiOiBjdXJyZW50Q29sb3IudmFsdWUsXG4gICAgICAgICAgXCJvblVwZGF0ZTpjb2xvclwiOiB1cGRhdGVDb2xvcixcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIFwiZG90U2l6ZVwiOiBwcm9wcy5kb3RTaXplLFxuICAgICAgICAgIFwid2lkdGhcIjogcHJvcHMud2lkdGgsXG4gICAgICAgICAgXCJoZWlnaHRcIjogcHJvcHMuY2FudmFzSGVpZ2h0XG4gICAgICAgIH0sIG51bGwpLCAoIXByb3BzLmhpZGVTbGlkZXJzIHx8ICFwcm9wcy5oaWRlSW5wdXRzKSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwiY29udHJvbHNcIixcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1jb2xvci1waWNrZXJfX2NvbnRyb2xzXCJcbiAgICAgICAgfSwgWyFwcm9wcy5oaWRlU2xpZGVycyAmJiBfY3JlYXRlVk5vZGUoVkNvbG9yUGlja2VyUHJldmlldywge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJldmlld1wiLFxuICAgICAgICAgIFwiY29sb3JcIjogY3VycmVudENvbG9yLnZhbHVlLFxuICAgICAgICAgIFwib25VcGRhdGU6Y29sb3JcIjogdXBkYXRlQ29sb3IsXG4gICAgICAgICAgXCJoaWRlQWxwaGFcIjogIW1vZGUudmFsdWUuZW5kc1dpdGgoJ2EnKSxcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHByb3BzLmRpc2FibGVkXG4gICAgICAgIH0sIG51bGwpLCAhcHJvcHMuaGlkZUlucHV0cyAmJiBfY3JlYXRlVk5vZGUoVkNvbG9yUGlja2VyRWRpdCwge1xuICAgICAgICAgIFwia2V5XCI6IFwiZWRpdFwiLFxuICAgICAgICAgIFwibW9kZXNcIjogcHJvcHMubW9kZXMsXG4gICAgICAgICAgXCJtb2RlXCI6IG1vZGUudmFsdWUsXG4gICAgICAgICAgXCJvblVwZGF0ZTptb2RlXCI6IG0gPT4gbW9kZS52YWx1ZSA9IG0sXG4gICAgICAgICAgXCJjb2xvclwiOiBjdXJyZW50Q29sb3IudmFsdWUsXG4gICAgICAgICAgXCJvblVwZGF0ZTpjb2xvclwiOiB1cGRhdGVDb2xvcixcbiAgICAgICAgICBcImRpc2FibGVkXCI6IHByb3BzLmRpc2FibGVkXG4gICAgICAgIH0sIG51bGwpXSksIHByb3BzLnNob3dTd2F0Y2hlcyAmJiBfY3JlYXRlVk5vZGUoVkNvbG9yUGlja2VyU3dhdGNoZXMsIHtcbiAgICAgICAgICBcImtleVwiOiBcInN3YXRjaGVzXCIsXG4gICAgICAgICAgXCJjb2xvclwiOiBjdXJyZW50Q29sb3IudmFsdWUsXG4gICAgICAgICAgXCJvblVwZGF0ZTpjb2xvclwiOiB1cGRhdGVDb2xvcixcbiAgICAgICAgICBcIm1heEhlaWdodFwiOiBwcm9wcy5zd2F0Y2hlc01heEhlaWdodCxcbiAgICAgICAgICBcInN3YXRjaGVzXCI6IHByb3BzLnN3YXRjaGVzLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogcHJvcHMuZGlzYWJsZWRcbiAgICAgICAgfSwgbnVsbCldXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNvbG9yUGlja2VyLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkNvbWJvYm94LmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQ2hlY2tib3hCdG4gfSBmcm9tIFwiLi4vVkNoZWNrYm94L2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkNoaXAgfSBmcm9tIFwiLi4vVkNoaXAvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZJY29uIH0gZnJvbSBcIi4uL1ZJY29uL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkxpc3QsIFZMaXN0SXRlbSB9IGZyb20gXCIuLi9WTGlzdC9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZNZW51IH0gZnJvbSBcIi4uL1ZNZW51L2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNlbGVjdFByb3BzIH0gZnJvbSBcIi4uL1ZTZWxlY3QvVlNlbGVjdC5tanNcIjtcbmltcG9ydCB7IFZUZXh0RmllbGQgfSBmcm9tIFwiLi4vVlRleHRGaWVsZC9pbmRleC5tanNcIjtcbmltcG9ydCB7IG1ha2VWVGV4dEZpZWxkUHJvcHMgfSBmcm9tIFwiLi4vVlRleHRGaWVsZC9WVGV4dEZpZWxkLm1qc1wiO1xuaW1wb3J0IHsgVlZpcnR1YWxTY3JvbGwgfSBmcm9tIFwiLi4vVlZpcnR1YWxTY3JvbGwvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VTY3JvbGxpbmcgfSBmcm9tIFwiLi4vVlNlbGVjdC91c2VTY3JvbGxpbmcubWpzXCI7XG5pbXBvcnQgeyB1c2VUZXh0Q29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlRmlsdGVyUHJvcHMsIHVzZUZpbHRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9maWx0ZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VGb3JtIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2Zvcm0ubWpzXCI7XG5pbXBvcnQgeyBmb3J3YXJkUmVmcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb3J3YXJkUmVmcy5tanNcIjtcbmltcG9ydCB7IHRyYW5zZm9ybUl0ZW0sIHVzZUl0ZW1zIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xpc3QtaXRlbXMubWpzXCI7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IG1ha2VUcmFuc2l0aW9uUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdHJhbnNpdGlvbi5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgbWVyZ2VQcm9wcywgbmV4dFRpY2ssIHJlZiwgc2hhbGxvd1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgSU5fQlJPV1NFUiwgbm9vcCwgb21pdCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIsIHdyYXBJbkFycmF5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5mdW5jdGlvbiBoaWdobGlnaHRSZXN1bHQodGV4dCwgbWF0Y2hlcywgbGVuZ3RoKSB7XG4gIGlmIChtYXRjaGVzID09IG51bGwpIHJldHVybiB0ZXh0O1xuICBpZiAoQXJyYXkuaXNBcnJheShtYXRjaGVzKSkgdGhyb3cgbmV3IEVycm9yKCdNdWx0aXBsZSBtYXRjaGVzIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xuICByZXR1cm4gdHlwZW9mIG1hdGNoZXMgPT09ICdudW1iZXInICYmIH5tYXRjaGVzID8gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW19jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgIFwiY2xhc3NcIjogXCJ2LWNvbWJvYm94X191bm1hc2tcIlxuICB9LCBbdGV4dC5zdWJzdHIoMCwgbWF0Y2hlcyldKSwgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgXCJjbGFzc1wiOiBcInYtY29tYm9ib3hfX21hc2tcIlxuICB9LCBbdGV4dC5zdWJzdHIobWF0Y2hlcywgbGVuZ3RoKV0pLCBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICBcImNsYXNzXCI6IFwidi1jb21ib2JveF9fdW5tYXNrXCJcbiAgfSwgW3RleHQuc3Vic3RyKG1hdGNoZXMgKyBsZW5ndGgpXSldKSA6IHRleHQ7XG59XG5leHBvcnQgY29uc3QgbWFrZVZDb21ib2JveFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYXV0b1NlbGVjdEZpcnN0OiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ11cbiAgfSxcbiAgZGVsaW1pdGVyczogQXJyYXksXG4gIC4uLm1ha2VGaWx0ZXJQcm9wcyh7XG4gICAgZmlsdGVyS2V5czogWyd0aXRsZSddXG4gIH0pLFxuICAuLi5tYWtlU2VsZWN0UHJvcHMoe1xuICAgIGhpZGVOb0RhdGE6IHRydWUsXG4gICAgcmV0dXJuT2JqZWN0OiB0cnVlXG4gIH0pLFxuICAuLi5vbWl0KG1ha2VWVGV4dEZpZWxkUHJvcHMoe1xuICAgIG1vZGVsVmFsdWU6IG51bGwsXG4gICAgcm9sZTogJ2NvbWJvYm94J1xuICB9KSwgWyd2YWxpZGF0aW9uVmFsdWUnLCAnZGlydHknLCAnYXBwZW5kSW5uZXJJY29uJ10pLFxuICAuLi5tYWtlVHJhbnNpdGlvblByb3BzKHtcbiAgICB0cmFuc2l0aW9uOiBmYWxzZVxuICB9KVxufSwgJ1ZDb21ib2JveCcpO1xuZXhwb3J0IGNvbnN0IFZDb21ib2JveCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQ29tYm9ib3gnLFxuICBwcm9wczogbWFrZVZDb21ib2JveFByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTpmb2N1c2VkJzogZm9jdXNlZCA9PiB0cnVlLFxuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbCA9PiB0cnVlLFxuICAgICd1cGRhdGU6c2VhcmNoJzogdmFsID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptZW51JzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgZW1pdCxcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdFxuICAgIH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCB2VGV4dEZpZWxkUmVmID0gcmVmKCk7XG4gICAgY29uc3QgaXNGb2N1c2VkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAgY29uc3QgaXNQcmlzdGluZSA9IHNoYWxsb3dSZWYodHJ1ZSk7XG4gICAgY29uc3QgbGlzdEhhc0ZvY3VzID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAgY29uc3Qgdk1lbnVSZWYgPSByZWYoKTtcbiAgICBjb25zdCB2VmlydHVhbFNjcm9sbFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IF9tZW51ID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbWVudScpO1xuICAgIGNvbnN0IG1lbnUgPSBjb21wdXRlZCh7XG4gICAgICBnZXQ6ICgpID0+IF9tZW51LnZhbHVlLFxuICAgICAgc2V0OiB2ID0+IHtcbiAgICAgICAgaWYgKF9tZW51LnZhbHVlICYmICF2ICYmIHZNZW51UmVmLnZhbHVlPy7OqG9wZW5DaGlsZHJlbikgcmV0dXJuO1xuICAgICAgICBfbWVudS52YWx1ZSA9IHY7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgc2VsZWN0aW9uSW5kZXggPSBzaGFsbG93UmVmKC0xKTtcbiAgICBsZXQgY2xlYXJlZCA9IGZhbHNlO1xuICAgIGNvbnN0IGNvbG9yID0gY29tcHV0ZWQoKCkgPT4gdlRleHRGaWVsZFJlZi52YWx1ZT8uY29sb3IpO1xuICAgIGNvbnN0IGxhYmVsID0gY29tcHV0ZWQoKCkgPT4gbWVudS52YWx1ZSA/IHByb3BzLmNsb3NlVGV4dCA6IHByb3BzLm9wZW5UZXh0KTtcbiAgICBjb25zdCB7XG4gICAgICBpdGVtcyxcbiAgICAgIHRyYW5zZm9ybUluLFxuICAgICAgdHJhbnNmb3JtT3V0XG4gICAgfSA9IHVzZUl0ZW1zKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcihjb2xvcik7XG4gICAgY29uc3QgbW9kZWwgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJywgW10sIHYgPT4gdHJhbnNmb3JtSW4od3JhcEluQXJyYXkodikpLCB2ID0+IHtcbiAgICAgIGNvbnN0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtT3V0KHYpO1xuICAgICAgcmV0dXJuIHByb3BzLm11bHRpcGxlID8gdHJhbnNmb3JtZWQgOiB0cmFuc2Zvcm1lZFswXSA/PyBudWxsO1xuICAgIH0pO1xuICAgIGNvbnN0IGZvcm0gPSB1c2VGb3JtKCk7XG4gICAgY29uc3QgX3NlYXJjaCA9IHNoYWxsb3dSZWYoIXByb3BzLm11bHRpcGxlID8gbW9kZWwudmFsdWVbMF0/LnRpdGxlID8/ICcnIDogJycpO1xuICAgIGNvbnN0IHNlYXJjaCA9IGNvbXB1dGVkKHtcbiAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICByZXR1cm4gX3NlYXJjaC52YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IHZhbCA9PiB7XG4gICAgICAgIF9zZWFyY2gudmFsdWUgPSB2YWw7XG4gICAgICAgIGlmICghcHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgICBtb2RlbC52YWx1ZSA9IFt0cmFuc2Zvcm1JdGVtKHByb3BzLCB2YWwpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsICYmIHByb3BzLm11bHRpcGxlICYmIHByb3BzLmRlbGltaXRlcnM/Lmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IHZhbC5zcGxpdChuZXcgUmVnRXhwKGAoPzoke3Byb3BzLmRlbGltaXRlcnMuam9pbignfCcpfSkrYCkpO1xuICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdmFsdWVzLmZvckVhY2godiA9PiB7XG4gICAgICAgICAgICAgIHYgPSB2LnRyaW0oKTtcbiAgICAgICAgICAgICAgaWYgKHYpIHNlbGVjdCh0cmFuc2Zvcm1JdGVtKHByb3BzLCB2KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF9zZWFyY2gudmFsdWUgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2YWwpIHNlbGVjdGlvbkluZGV4LnZhbHVlID0gLTE7XG4gICAgICAgIGlzUHJpc3RpbmUudmFsdWUgPSAhdmFsO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHdhdGNoKF9zZWFyY2gsIHZhbHVlID0+IHtcbiAgICAgIGlmIChjbGVhcmVkKSB7XG4gICAgICAgIC8vIHdhaXQgZm9yIGNsZWFyIHRvIGZpbmlzaCwgVlRleHRGaWVsZCBzZXRzIF9zZWFyY2ggdG8gbnVsbFxuICAgICAgICAvLyB0aGVuIHNlYXJjaCBjb21wdXRlZCB0cmlnZ2VycyBhbmQgdXBkYXRlcyBfc2VhcmNoIHRvICcnXG4gICAgICAgIG5leHRUaWNrKCgpID0+IGNsZWFyZWQgPSBmYWxzZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRm9jdXNlZC52YWx1ZSAmJiAhbWVudS52YWx1ZSkge1xuICAgICAgICBtZW51LnZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVtaXQoJ3VwZGF0ZTpzZWFyY2gnLCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgd2F0Y2gobW9kZWwsIHZhbHVlID0+IHtcbiAgICAgIGlmICghcHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgX3NlYXJjaC52YWx1ZSA9IHZhbHVlWzBdPy50aXRsZSA/PyAnJztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBmaWx0ZXJlZEl0ZW1zLFxuICAgICAgZ2V0TWF0Y2hlc1xuICAgIH0gPSB1c2VGaWx0ZXIocHJvcHMsIGl0ZW1zLCAoKSA9PiBpc1ByaXN0aW5lLnZhbHVlID8gJycgOiBzZWFyY2gudmFsdWUpO1xuICAgIGNvbnN0IGRpc3BsYXlJdGVtcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5oaWRlU2VsZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkSXRlbXMudmFsdWUuZmlsdGVyKGZpbHRlcmVkSXRlbSA9PiAhbW9kZWwudmFsdWUuc29tZShzID0+IHMudmFsdWUgPT09IGZpbHRlcmVkSXRlbS52YWx1ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZpbHRlcmVkSXRlbXMudmFsdWU7XG4gICAgfSk7XG4gICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZXMgPSBjb21wdXRlZCgoKSA9PiBtb2RlbC52YWx1ZS5tYXAoc2VsZWN0aW9uID0+IHNlbGVjdGlvbi52YWx1ZSkpO1xuICAgIGNvbnN0IGhpZ2hsaWdodEZpcnN0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0Rmlyc3QgPSBwcm9wcy5hdXRvU2VsZWN0Rmlyc3QgPT09IHRydWUgfHwgcHJvcHMuYXV0b1NlbGVjdEZpcnN0ID09PSAnZXhhY3QnICYmIHNlYXJjaC52YWx1ZSA9PT0gZGlzcGxheUl0ZW1zLnZhbHVlWzBdPy50aXRsZTtcbiAgICAgIHJldHVybiBzZWxlY3RGaXJzdCAmJiBkaXNwbGF5SXRlbXMudmFsdWUubGVuZ3RoID4gMCAmJiAhaXNQcmlzdGluZS52YWx1ZSAmJiAhbGlzdEhhc0ZvY3VzLnZhbHVlO1xuICAgIH0pO1xuICAgIGNvbnN0IG1lbnVEaXNhYmxlZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmhpZGVOb0RhdGEgJiYgIWl0ZW1zLnZhbHVlLmxlbmd0aCB8fCBwcm9wcy5yZWFkb25seSB8fCBmb3JtPy5pc1JlYWRvbmx5LnZhbHVlKTtcbiAgICBjb25zdCBsaXN0UmVmID0gcmVmKCk7XG4gICAgY29uc3Qge1xuICAgICAgb25MaXN0U2Nyb2xsLFxuICAgICAgb25MaXN0S2V5ZG93blxuICAgIH0gPSB1c2VTY3JvbGxpbmcobGlzdFJlZiwgdlRleHRGaWVsZFJlZik7XG4gICAgZnVuY3Rpb24gb25DbGVhcihlKSB7XG4gICAgICBjbGVhcmVkID0gdHJ1ZTtcbiAgICAgIGlmIChwcm9wcy5vcGVuT25DbGVhcikge1xuICAgICAgICBtZW51LnZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25Nb3VzZWRvd25Db250cm9sKCkge1xuICAgICAgaWYgKG1lbnVEaXNhYmxlZC52YWx1ZSkgcmV0dXJuO1xuICAgICAgbWVudS52YWx1ZSA9IHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uTW91c2Vkb3duTWVudUljb24oZSkge1xuICAgICAgaWYgKG1lbnVEaXNhYmxlZC52YWx1ZSkgcmV0dXJuO1xuICAgICAgaWYgKGlzRm9jdXNlZC52YWx1ZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgICBtZW51LnZhbHVlID0gIW1lbnUudmFsdWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uS2V5ZG93bihlKSB7XG4gICAgICBpZiAocHJvcHMucmVhZG9ubHkgfHwgZm9ybT8uaXNSZWFkb25seS52YWx1ZSkgcmV0dXJuO1xuICAgICAgY29uc3Qgc2VsZWN0aW9uU3RhcnQgPSB2VGV4dEZpZWxkUmVmLnZhbHVlLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgY29uc3QgbGVuZ3RoID0gbW9kZWwudmFsdWUubGVuZ3RoO1xuICAgICAgaWYgKHNlbGVjdGlvbkluZGV4LnZhbHVlID4gLTEgfHwgWydFbnRlcicsICdBcnJvd0Rvd24nLCAnQXJyb3dVcCddLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBpZiAoWydFbnRlcicsICdBcnJvd0Rvd24nXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgbWVudS52YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoWydFc2NhcGUnXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgbWVudS52YWx1ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKFsnRW50ZXInLCAnRXNjYXBlJywgJ1RhYiddLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICBpZiAoaGlnaGxpZ2h0Rmlyc3QudmFsdWUgJiYgWydFbnRlcicsICdUYWInXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgICBzZWxlY3QoZmlsdGVyZWRJdGVtcy52YWx1ZVswXSk7XG4gICAgICAgIH1cbiAgICAgICAgaXNQcmlzdGluZS52YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoZS5rZXkgPT09ICdBcnJvd0Rvd24nICYmIGhpZ2hsaWdodEZpcnN0LnZhbHVlKSB7XG4gICAgICAgIGxpc3RSZWYudmFsdWU/LmZvY3VzKCduZXh0Jyk7XG4gICAgICB9XG4gICAgICBpZiAoIXByb3BzLm11bHRpcGxlKSByZXR1cm47XG4gICAgICBpZiAoWydCYWNrc3BhY2UnLCAnRGVsZXRlJ10uaW5jbHVkZXMoZS5rZXkpKSB7XG4gICAgICAgIGlmIChzZWxlY3Rpb25JbmRleC52YWx1ZSA8IDApIHtcbiAgICAgICAgICBpZiAoZS5rZXkgPT09ICdCYWNrc3BhY2UnICYmICFzZWFyY2gudmFsdWUpIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbkluZGV4LnZhbHVlID0gbGVuZ3RoIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsU2VsZWN0aW9uSW5kZXggPSBzZWxlY3Rpb25JbmRleC52YWx1ZTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRJdGVtID0gbW9kZWwudmFsdWVbc2VsZWN0aW9uSW5kZXgudmFsdWVdO1xuICAgICAgICBpZiAoc2VsZWN0ZWRJdGVtICYmICFzZWxlY3RlZEl0ZW0ucHJvcHMuZGlzYWJsZWQpIHNlbGVjdChzZWxlY3RlZEl0ZW0pO1xuICAgICAgICBzZWxlY3Rpb25JbmRleC52YWx1ZSA9IG9yaWdpbmFsU2VsZWN0aW9uSW5kZXggPj0gbGVuZ3RoIC0gMSA/IGxlbmd0aCAtIDIgOiBvcmlnaW5hbFNlbGVjdGlvbkluZGV4O1xuICAgICAgfVxuICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dMZWZ0Jykge1xuICAgICAgICBpZiAoc2VsZWN0aW9uSW5kZXgudmFsdWUgPCAwICYmIHNlbGVjdGlvblN0YXJ0ID4gMCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBwcmV2ID0gc2VsZWN0aW9uSW5kZXgudmFsdWUgPiAtMSA/IHNlbGVjdGlvbkluZGV4LnZhbHVlIC0gMSA6IGxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChtb2RlbC52YWx1ZVtwcmV2XSkge1xuICAgICAgICAgIHNlbGVjdGlvbkluZGV4LnZhbHVlID0gcHJldjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxlY3Rpb25JbmRleC52YWx1ZSA9IC0xO1xuICAgICAgICAgIHZUZXh0RmllbGRSZWYudmFsdWUuc2V0U2VsZWN0aW9uUmFuZ2Uoc2VhcmNoLnZhbHVlLmxlbmd0aCwgc2VhcmNoLnZhbHVlLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlLmtleSA9PT0gJ0Fycm93UmlnaHQnKSB7XG4gICAgICAgIGlmIChzZWxlY3Rpb25JbmRleC52YWx1ZSA8IDApIHJldHVybjtcbiAgICAgICAgY29uc3QgbmV4dCA9IHNlbGVjdGlvbkluZGV4LnZhbHVlICsgMTtcbiAgICAgICAgaWYgKG1vZGVsLnZhbHVlW25leHRdKSB7XG4gICAgICAgICAgc2VsZWN0aW9uSW5kZXgudmFsdWUgPSBuZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGVjdGlvbkluZGV4LnZhbHVlID0gLTE7XG4gICAgICAgICAgdlRleHRGaWVsZFJlZi52YWx1ZS5zZXRTZWxlY3Rpb25SYW5nZSgwLCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInICYmIHNlYXJjaC52YWx1ZSkge1xuICAgICAgICBzZWxlY3QodHJhbnNmb3JtSXRlbShwcm9wcywgc2VhcmNoLnZhbHVlKSk7XG4gICAgICAgIHNlYXJjaC52YWx1ZSA9ICcnO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkFmdGVyTGVhdmUoKSB7XG4gICAgICBpZiAoaXNGb2N1c2VkLnZhbHVlKSB7XG4gICAgICAgIGlzUHJpc3RpbmUudmFsdWUgPSB0cnVlO1xuICAgICAgICB2VGV4dEZpZWxkUmVmLnZhbHVlPy5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzZWxlY3QoaXRlbSkge1xuICAgICAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gbW9kZWwudmFsdWUuZmluZEluZGV4KHNlbGVjdGlvbiA9PiBwcm9wcy52YWx1ZUNvbXBhcmF0b3Ioc2VsZWN0aW9uLnZhbHVlLCBpdGVtLnZhbHVlKSk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICBtb2RlbC52YWx1ZSA9IFsuLi5tb2RlbC52YWx1ZSwgaXRlbV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBbLi4ubW9kZWwudmFsdWVdO1xuICAgICAgICAgIHZhbHVlLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgbW9kZWwudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBzZWFyY2gudmFsdWUgPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGVsLnZhbHVlID0gW2l0ZW1dO1xuICAgICAgICBfc2VhcmNoLnZhbHVlID0gaXRlbS50aXRsZTtcblxuICAgICAgICAvLyB3YXRjaCBmb3Igc2VhcmNoIHdhdGNoZXIgdG8gdHJpZ2dlclxuICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgbWVudS52YWx1ZSA9IGZhbHNlO1xuICAgICAgICAgIGlzUHJpc3RpbmUudmFsdWUgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25Gb2N1c2luKGUpIHtcbiAgICAgIGlzRm9jdXNlZC52YWx1ZSA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgbGlzdEhhc0ZvY3VzLnZhbHVlID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkZvY3Vzb3V0KGUpIHtcbiAgICAgIGxpc3RIYXNGb2N1cy52YWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblVwZGF0ZU1vZGVsVmFsdWUodikge1xuICAgICAgaWYgKHYgPT0gbnVsbCB8fCB2ID09PSAnJyAmJiAhcHJvcHMubXVsdGlwbGUpIG1vZGVsLnZhbHVlID0gW107XG4gICAgfVxuICAgIHdhdGNoKGZpbHRlcmVkSXRlbXMsIHZhbCA9PiB7XG4gICAgICBpZiAoIXZhbC5sZW5ndGggJiYgcHJvcHMuaGlkZU5vRGF0YSkgbWVudS52YWx1ZSA9IGZhbHNlO1xuICAgIH0pO1xuICAgIHdhdGNoKGlzRm9jdXNlZCwgKHZhbCwgb2xkVmFsKSA9PiB7XG4gICAgICBpZiAodmFsIHx8IHZhbCA9PT0gb2xkVmFsKSByZXR1cm47XG4gICAgICBzZWxlY3Rpb25JbmRleC52YWx1ZSA9IC0xO1xuICAgICAgbWVudS52YWx1ZSA9IGZhbHNlO1xuICAgICAgaWYgKGhpZ2hsaWdodEZpcnN0LnZhbHVlICYmICFsaXN0SGFzRm9jdXMudmFsdWUgJiYgIW1vZGVsLnZhbHVlLnNvbWUoX3JlZjIgPT4ge1xuICAgICAgICBsZXQge1xuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBkaXNwbGF5SXRlbXMudmFsdWVbMF0udmFsdWU7XG4gICAgICB9KSkge1xuICAgICAgICBzZWxlY3QoZGlzcGxheUl0ZW1zLnZhbHVlWzBdKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcHMubXVsdGlwbGUgJiYgc2VhcmNoLnZhbHVlKSB7XG4gICAgICAgIG1vZGVsLnZhbHVlID0gWy4uLm1vZGVsLnZhbHVlLCB0cmFuc2Zvcm1JdGVtKHByb3BzLCBzZWFyY2gudmFsdWUpXTtcbiAgICAgICAgc2VhcmNoLnZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgfSk7XG4gICAgd2F0Y2gobWVudSwgKCkgPT4ge1xuICAgICAgaWYgKCFwcm9wcy5oaWRlU2VsZWN0ZWQgJiYgbWVudS52YWx1ZSAmJiBtb2RlbC52YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBkaXNwbGF5SXRlbXMudmFsdWUuZmluZEluZGV4KGl0ZW0gPT4gbW9kZWwudmFsdWUuc29tZShzID0+IHByb3BzLnZhbHVlQ29tcGFyYXRvcihzLnZhbHVlLCBpdGVtLnZhbHVlKSkpO1xuICAgICAgICBJTl9CUk9XU0VSICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGluZGV4ID49IDAgJiYgdlZpcnR1YWxTY3JvbGxSZWYudmFsdWU/LnNjcm9sbFRvSW5kZXgoaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaGFzQ2hpcHMgPSAhIShwcm9wcy5jaGlwcyB8fCBzbG90cy5jaGlwKTtcbiAgICAgIGNvbnN0IGhhc0xpc3QgPSAhISghcHJvcHMuaGlkZU5vRGF0YSB8fCBkaXNwbGF5SXRlbXMudmFsdWUubGVuZ3RoIHx8IHNsb3RzWydwcmVwZW5kLWl0ZW0nXSB8fCBzbG90c1snYXBwZW5kLWl0ZW0nXSB8fCBzbG90c1snbm8tZGF0YSddKTtcbiAgICAgIGNvbnN0IGlzRGlydHkgPSBtb2RlbC52YWx1ZS5sZW5ndGggPiAwO1xuICAgICAgY29uc3QgW3RleHRGaWVsZFByb3BzXSA9IFZUZXh0RmllbGQuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWVGV4dEZpZWxkLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwicmVmXCI6IHZUZXh0RmllbGRSZWZcbiAgICAgIH0sIHRleHRGaWVsZFByb3BzLCB7XG4gICAgICAgIFwibW9kZWxWYWx1ZVwiOiBzZWFyY2gudmFsdWUsXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBbJGV2ZW50ID0+IHNlYXJjaC52YWx1ZSA9ICRldmVudCwgb25VcGRhdGVNb2RlbFZhbHVlXSxcbiAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZC52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTpmb2N1c2VkXCI6ICRldmVudCA9PiBpc0ZvY3VzZWQudmFsdWUgPSAkZXZlbnQsXG4gICAgICAgIFwidmFsaWRhdGlvblZhbHVlXCI6IG1vZGVsLmV4dGVybmFsVmFsdWUsXG4gICAgICAgIFwiY291bnRlclZhbHVlXCI6IHByb3BzLm11bHRpcGxlID8gbW9kZWwudmFsdWUubGVuZ3RoIDogc2VhcmNoLnZhbHVlLmxlbmd0aCxcbiAgICAgICAgXCJkaXJ0eVwiOiBpc0RpcnR5LFxuICAgICAgICBcImNsYXNzXCI6IFsndi1jb21ib2JveCcsIHtcbiAgICAgICAgICAndi1jb21ib2JveC0tYWN0aXZlLW1lbnUnOiBtZW51LnZhbHVlLFxuICAgICAgICAgICd2LWNvbWJvYm94LS1jaGlwcyc6ICEhcHJvcHMuY2hpcHMsXG4gICAgICAgICAgJ3YtY29tYm9ib3gtLXNlbGVjdGlvbi1zbG90JzogISFzbG90cy5zZWxlY3Rpb24sXG4gICAgICAgICAgJ3YtY29tYm9ib3gtLXNlbGVjdGluZy1pbmRleCc6IHNlbGVjdGlvbkluZGV4LnZhbHVlID4gLTEsXG4gICAgICAgICAgW2B2LWNvbWJvYm94LS0ke3Byb3BzLm11bHRpcGxlID8gJ211bHRpcGxlJyA6ICdzaW5nbGUnfWBdOiB0cnVlXG4gICAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZSxcbiAgICAgICAgXCJyZWFkb25seVwiOiBwcm9wcy5yZWFkb25seSxcbiAgICAgICAgXCJwbGFjZWhvbGRlclwiOiBpc0RpcnR5ID8gdW5kZWZpbmVkIDogcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICAgIFwib25DbGljazpjbGVhclwiOiBvbkNsZWFyLFxuICAgICAgICBcIm9uTW91c2Vkb3duOmNvbnRyb2xcIjogb25Nb3VzZWRvd25Db250cm9sLFxuICAgICAgICBcIm9uS2V5ZG93blwiOiBvbktleWRvd25cbiAgICAgIH0pLCB7XG4gICAgICAgIC4uLnNsb3RzLFxuICAgICAgICBkZWZhdWx0OiAoKSA9PiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKFZNZW51LCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgXCJyZWZcIjogdk1lbnVSZWYsXG4gICAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1lbnUudmFsdWUsXG4gICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBtZW51LnZhbHVlID0gJGV2ZW50LFxuICAgICAgICAgIFwiYWN0aXZhdG9yXCI6IFwicGFyZW50XCIsXG4gICAgICAgICAgXCJjb250ZW50Q2xhc3NcIjogXCJ2LWNvbWJvYm94X19jb250ZW50XCIsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiBtZW51RGlzYWJsZWQudmFsdWUsXG4gICAgICAgICAgXCJlYWdlclwiOiBwcm9wcy5lYWdlcixcbiAgICAgICAgICBcIm1heEhlaWdodFwiOiAzMTAsXG4gICAgICAgICAgXCJvcGVuT25DbGlja1wiOiBmYWxzZSxcbiAgICAgICAgICBcImNsb3NlT25Db250ZW50Q2xpY2tcIjogZmFsc2UsXG4gICAgICAgICAgXCJ0cmFuc2l0aW9uXCI6IHByb3BzLnRyYW5zaXRpb24sXG4gICAgICAgICAgXCJvbkFmdGVyTGVhdmVcIjogb25BZnRlckxlYXZlXG4gICAgICAgIH0sIHByb3BzLm1lbnVQcm9wcyksIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbaGFzTGlzdCAmJiBfY3JlYXRlVk5vZGUoVkxpc3QsIHtcbiAgICAgICAgICAgIFwicmVmXCI6IGxpc3RSZWYsXG4gICAgICAgICAgICBcInNlbGVjdGVkXCI6IHNlbGVjdGVkVmFsdWVzLnZhbHVlLFxuICAgICAgICAgICAgXCJzZWxlY3RTdHJhdGVneVwiOiBwcm9wcy5tdWx0aXBsZSA/ICdpbmRlcGVuZGVudCcgOiAnc2luZ2xlLWluZGVwZW5kZW50JyxcbiAgICAgICAgICAgIFwib25Nb3VzZWRvd25cIjogZSA9PiBlLnByZXZlbnREZWZhdWx0KCksXG4gICAgICAgICAgICBcIm9uS2V5ZG93blwiOiBvbkxpc3RLZXlkb3duLFxuICAgICAgICAgICAgXCJvbkZvY3VzaW5cIjogb25Gb2N1c2luLFxuICAgICAgICAgICAgXCJvbkZvY3Vzb3V0XCI6IG9uRm9jdXNvdXQsXG4gICAgICAgICAgICBcIm9uU2Nyb2xsUGFzc2l2ZVwiOiBvbkxpc3RTY3JvbGwsXG4gICAgICAgICAgICBcInRhYmluZGV4XCI6IFwiLTFcIixcbiAgICAgICAgICAgIFwiY29sb3JcIjogcHJvcHMuaXRlbUNvbG9yID8/IHByb3BzLmNvbG9yXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzWydwcmVwZW5kLWl0ZW0nXT8uKCksICFkaXNwbGF5SXRlbXMudmFsdWUubGVuZ3RoICYmICFwcm9wcy5oaWRlTm9EYXRhICYmIChzbG90c1snbm8tZGF0YSddPy4oKSA/PyBfY3JlYXRlVk5vZGUoVkxpc3RJdGVtLCB7XG4gICAgICAgICAgICAgIFwidGl0bGVcIjogdChwcm9wcy5ub0RhdGFUZXh0KVxuICAgICAgICAgICAgfSwgbnVsbCkpLCBfY3JlYXRlVk5vZGUoVlZpcnR1YWxTY3JvbGwsIHtcbiAgICAgICAgICAgICAgXCJyZWZcIjogdlZpcnR1YWxTY3JvbGxSZWYsXG4gICAgICAgICAgICAgIFwicmVuZGVybGVzc1wiOiB0cnVlLFxuICAgICAgICAgICAgICBcIml0ZW1zXCI6IGRpc3BsYXlJdGVtcy52YWx1ZVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBkZWZhdWx0OiBfcmVmMyA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgIGl0ZW1SZWZcbiAgICAgICAgICAgICAgICB9ID0gX3JlZjM7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbVByb3BzID0gbWVyZ2VQcm9wcyhpdGVtLnByb3BzLCB7XG4gICAgICAgICAgICAgICAgICByZWY6IGl0ZW1SZWYsXG4gICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgICAgICAgICAgYWN0aXZlOiBoaWdobGlnaHRGaXJzdC52YWx1ZSAmJiBpbmRleCA9PT0gMCA/IHRydWUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBzZWxlY3QoaXRlbSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2xvdHMuaXRlbT8uKHtcbiAgICAgICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgIHByb3BzOiBpdGVtUHJvcHNcbiAgICAgICAgICAgICAgICB9KSA/PyBfY3JlYXRlVk5vZGUoVkxpc3RJdGVtLCBpdGVtUHJvcHMsIHtcbiAgICAgICAgICAgICAgICAgIHByZXBlbmQ6IF9yZWY0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgICAgICAgICAgICBpc1NlbGVjdGVkXG4gICAgICAgICAgICAgICAgICAgIH0gPSBfcmVmNDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtwcm9wcy5tdWx0aXBsZSAmJiAhcHJvcHMuaGlkZVNlbGVjdGVkID8gX2NyZWF0ZVZOb2RlKFZDaGVja2JveEJ0biwge1xuICAgICAgICAgICAgICAgICAgICAgIFwia2V5XCI6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgXCJtb2RlbFZhbHVlXCI6IGlzU2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgXCJyaXBwbGVcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgXCJ0YWJpbmRleFwiOiBcIi0xXCJcbiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCkgOiB1bmRlZmluZWQsIGl0ZW0ucHJvcHMucHJlcGVuZEljb24gJiYgX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IGl0ZW0ucHJvcHMucHJlcGVuZEljb25cbiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCldKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB0aXRsZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNQcmlzdGluZS52YWx1ZSA/IGl0ZW0udGl0bGUgOiBoaWdobGlnaHRSZXN1bHQoaXRlbS50aXRsZSwgZ2V0TWF0Y2hlcyhpdGVtKT8udGl0bGUsIHNlYXJjaC52YWx1ZT8ubGVuZ3RoID8/IDApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSwgc2xvdHNbJ2FwcGVuZC1pdGVtJ10/LigpXVxuICAgICAgICAgIH0pXVxuICAgICAgICB9KSwgbW9kZWwudmFsdWUubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGZ1bmN0aW9uIG9uQ2hpcENsb3NlKGUpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBzZWxlY3QoaXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHNsb3RQcm9wcyA9IHtcbiAgICAgICAgICAgICdvbkNsaWNrOmNsb3NlJzogb25DaGlwQ2xvc2UsXG4gICAgICAgICAgICBvbk1vdXNlZG93bihlKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtb2RlbFZhbHVlOiB0cnVlLFxuICAgICAgICAgICAgJ29uVXBkYXRlOm1vZGVsVmFsdWUnOiB1bmRlZmluZWRcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJrZXlcIjogaXRlbS52YWx1ZSxcbiAgICAgICAgICAgIFwiY2xhc3NcIjogWyd2LWNvbWJvYm94X19zZWxlY3Rpb24nLCBpbmRleCA9PT0gc2VsZWN0aW9uSW5kZXgudmFsdWUgJiYgWyd2LWNvbWJvYm94X19zZWxlY3Rpb24tLXNlbGVjdGVkJywgdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZV1dLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBpbmRleCA9PT0gc2VsZWN0aW9uSW5kZXgudmFsdWUgPyB0ZXh0Q29sb3JTdHlsZXMudmFsdWUgOiB7fVxuICAgICAgICAgIH0sIFtoYXNDaGlwcyA/ICFzbG90cy5jaGlwID8gX2NyZWF0ZVZOb2RlKFZDaGlwLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgICBcImtleVwiOiBcImNoaXBcIixcbiAgICAgICAgICAgIFwiY2xvc2FibGVcIjogcHJvcHMuY2xvc2FibGVDaGlwcyxcbiAgICAgICAgICAgIFwic2l6ZVwiOiBcInNtYWxsXCIsXG4gICAgICAgICAgICBcInRleHRcIjogaXRlbS50aXRsZSxcbiAgICAgICAgICAgIFwiZGlzYWJsZWRcIjogaXRlbS5wcm9wcy5kaXNhYmxlZFxuICAgICAgICAgIH0sIHNsb3RQcm9wcyksIG51bGwpIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgICBcImtleVwiOiBcImNoaXAtZGVmYXVsdHNcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgICBWQ2hpcDoge1xuICAgICAgICAgICAgICAgIGNsb3NhYmxlOiBwcm9wcy5jbG9zYWJsZUNoaXBzLFxuICAgICAgICAgICAgICAgIHNpemU6ICdzbWFsbCcsXG4gICAgICAgICAgICAgICAgdGV4dDogaXRlbS50aXRsZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmNoaXA/Lih7XG4gICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICBwcm9wczogc2xvdFByb3BzXG4gICAgICAgICAgICB9KV1cbiAgICAgICAgICB9KSA6IHNsb3RzLnNlbGVjdGlvbj8uKHtcbiAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgIH0pID8/IF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtY29tYm9ib3hfX3NlbGVjdGlvbi10ZXh0XCJcbiAgICAgICAgICB9LCBbaXRlbS50aXRsZSwgcHJvcHMubXVsdGlwbGUgJiYgaW5kZXggPCBtb2RlbC52YWx1ZS5sZW5ndGggLSAxICYmIF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtY29tYm9ib3hfX3NlbGVjdGlvbi1jb21tYVwiXG4gICAgICAgICAgfSwgW19jcmVhdGVUZXh0Vk5vZGUoXCIsXCIpXSldKV0pO1xuICAgICAgICB9KV0pLFxuICAgICAgICAnYXBwZW5kLWlubmVyJzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtzbG90c1snYXBwZW5kLWlubmVyJ10/LiguLi5hcmdzKSwgKCFwcm9wcy5oaWRlTm9EYXRhIHx8IHByb3BzLml0ZW1zLmxlbmd0aCkgJiYgcHJvcHMubWVudUljb24gPyBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWNvbWJvYm94X19tZW51LWljb25cIixcbiAgICAgICAgICAgIFwiaWNvblwiOiBwcm9wcy5tZW51SWNvbixcbiAgICAgICAgICAgIFwib25Nb3VzZWRvd25cIjogb25Nb3VzZWRvd25NZW51SWNvbixcbiAgICAgICAgICAgIFwib25DbGlja1wiOiBub29wLFxuICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHQobGFiZWwudmFsdWUpLFxuICAgICAgICAgICAgXCJ0aXRsZVwiOiB0KGxhYmVsLnZhbHVlKVxuICAgICAgICAgIH0sIG51bGwpIDogdW5kZWZpbmVkXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3J3YXJkUmVmcyh7XG4gICAgICBpc0ZvY3VzZWQsXG4gICAgICBpc1ByaXN0aW5lLFxuICAgICAgbWVudSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIHNlbGVjdGlvbkluZGV4LFxuICAgICAgZmlsdGVyZWRJdGVtcyxcbiAgICAgIHNlbGVjdFxuICAgIH0sIHZUZXh0RmllbGRSZWYpO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDb21ib2JveC5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZEaWFsb2cuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZEaWFsb2dUcmFuc2l0aW9uIH0gZnJvbSBcIi4uL3RyYW5zaXRpb25zL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWT3ZlcmxheSB9IGZyb20gXCIuLi9WT3ZlcmxheS9pbmRleC5tanNcIjtcbmltcG9ydCB7IG1ha2VWT3ZlcmxheVByb3BzIH0gZnJvbSBcIi4uL1ZPdmVybGF5L1ZPdmVybGF5Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgZm9yd2FyZFJlZnMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9yd2FyZFJlZnMubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiO1xuaW1wb3J0IHsgdXNlU2NvcGVJZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zY29wZUlkLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBtZXJnZVByb3BzLCBuZXh0VGljaywgcmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBmb2N1c2FibGVDaGlsZHJlbiwgZ2VuZXJpY0NvbXBvbmVudCwgSU5fQlJPV1NFUiwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkRpYWxvZ1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZnVsbHNjcmVlbjogQm9vbGVhbixcbiAgcmV0YWluRm9jdXM6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgc2Nyb2xsYWJsZTogQm9vbGVhbixcbiAgLi4ubWFrZVZPdmVybGF5UHJvcHMoe1xuICAgIG9yaWdpbjogJ2NlbnRlciBjZW50ZXInLFxuICAgIHNjcm9sbFN0cmF0ZWd5OiAnYmxvY2snLFxuICAgIHRyYW5zaXRpb246IHtcbiAgICAgIGNvbXBvbmVudDogVkRpYWxvZ1RyYW5zaXRpb25cbiAgICB9LFxuICAgIHpJbmRleDogMjQwMFxuICB9KVxufSwgJ1ZEaWFsb2cnKTtcbmV4cG9ydCBjb25zdCBWRGlhbG9nID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZEaWFsb2cnLFxuICBwcm9wczogbWFrZVZEaWFsb2dQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCB7XG4gICAgICBzY29wZUlkXG4gICAgfSA9IHVzZVNjb3BlSWQoKTtcbiAgICBjb25zdCBvdmVybGF5ID0gcmVmKCk7XG4gICAgZnVuY3Rpb24gb25Gb2N1c2luKGUpIHtcbiAgICAgIGNvbnN0IGJlZm9yZSA9IGUucmVsYXRlZFRhcmdldDtcbiAgICAgIGNvbnN0IGFmdGVyID0gZS50YXJnZXQ7XG4gICAgICBpZiAoYmVmb3JlICE9PSBhZnRlciAmJiBvdmVybGF5LnZhbHVlPy5jb250ZW50RWwgJiZcbiAgICAgIC8vIFdlJ3JlIHRoZSB0b3Btb3N0IGRpYWxvZ1xuICAgICAgb3ZlcmxheS52YWx1ZT8uZ2xvYmFsVG9wICYmXG4gICAgICAvLyBJdCBpc24ndCB0aGUgZG9jdW1lbnQgb3IgdGhlIGRpYWxvZyBib2R5XG4gICAgICAhW2RvY3VtZW50LCBvdmVybGF5LnZhbHVlLmNvbnRlbnRFbF0uaW5jbHVkZXMoYWZ0ZXIpICYmXG4gICAgICAvLyBJdCBpc24ndCBpbnNpZGUgdGhlIGRpYWxvZyBib2R5XG4gICAgICAhb3ZlcmxheS52YWx1ZS5jb250ZW50RWwuY29udGFpbnMoYWZ0ZXIpKSB7XG4gICAgICAgIGNvbnN0IGZvY3VzYWJsZSA9IGZvY3VzYWJsZUNoaWxkcmVuKG92ZXJsYXkudmFsdWUuY29udGVudEVsKTtcbiAgICAgICAgaWYgKCFmb2N1c2FibGUubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGZpcnN0RWxlbWVudCA9IGZvY3VzYWJsZVswXTtcbiAgICAgICAgY29uc3QgbGFzdEVsZW1lbnQgPSBmb2N1c2FibGVbZm9jdXNhYmxlLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoYmVmb3JlID09PSBmaXJzdEVsZW1lbnQpIHtcbiAgICAgICAgICBsYXN0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChJTl9CUk9XU0VSKSB7XG4gICAgICB3YXRjaCgoKSA9PiBpc0FjdGl2ZS52YWx1ZSAmJiBwcm9wcy5yZXRhaW5Gb2N1cywgdmFsID0+IHtcbiAgICAgICAgdmFsID8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIG9uRm9jdXNpbikgOiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1c2luJywgb25Gb2N1c2luKTtcbiAgICAgIH0sIHtcbiAgICAgICAgaW1tZWRpYXRlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgd2F0Y2goaXNBY3RpdmUsIGFzeW5jIHZhbCA9PiB7XG4gICAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgaWYgKHZhbCkge1xuICAgICAgICBvdmVybGF5LnZhbHVlLmNvbnRlbnRFbD8uZm9jdXMoe1xuICAgICAgICAgIHByZXZlbnRTY3JvbGw6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdmVybGF5LnZhbHVlLmFjdGl2YXRvckVsPy5mb2N1cyh7XG4gICAgICAgICAgcHJldmVudFNjcm9sbDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBhY3RpdmF0b3JQcm9wcyA9IGNvbXB1dGVkKCgpID0+IG1lcmdlUHJvcHMoe1xuICAgICAgJ2FyaWEtaGFzcG9wdXAnOiAnZGlhbG9nJyxcbiAgICAgICdhcmlhLWV4cGFuZGVkJzogU3RyaW5nKGlzQWN0aXZlLnZhbHVlKVxuICAgIH0sIHByb3BzLmFjdGl2YXRvclByb3BzKSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFtvdmVybGF5UHJvcHNdID0gVk92ZXJsYXkuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWT3ZlcmxheSwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcInJlZlwiOiBvdmVybGF5LFxuICAgICAgICBcImNsYXNzXCI6IFsndi1kaWFsb2cnLCB7XG4gICAgICAgICAgJ3YtZGlhbG9nLS1mdWxsc2NyZWVuJzogcHJvcHMuZnVsbHNjcmVlbixcbiAgICAgICAgICAndi1kaWFsb2ctLXNjcm9sbGFibGUnOiBwcm9wcy5zY3JvbGxhYmxlXG4gICAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSwgb3ZlcmxheVByb3BzLCB7XG4gICAgICAgIFwibW9kZWxWYWx1ZVwiOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBpc0FjdGl2ZS52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgXCJhcmlhLW1vZGFsXCI6IFwidHJ1ZVwiLFxuICAgICAgICBcImFjdGl2YXRvclByb3BzXCI6IGFjdGl2YXRvclByb3BzLnZhbHVlLFxuICAgICAgICBcInJvbGVcIjogXCJkaWFsb2dcIlxuICAgICAgfSwgc2NvcGVJZCksIHtcbiAgICAgICAgYWN0aXZhdG9yOiBzbG90cy5hY3RpdmF0b3IsXG4gICAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIFwicm9vdFwiOiBcIlZEaWFsb2dcIlxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy5kZWZhdWx0Py4oLi4uYXJncyldXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3J3YXJkUmVmcyh7fSwgb3ZlcmxheSk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkRpYWxvZy5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZFeHBhbnNpb25QYW5lbC5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBwcm92aWRlRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7XG5pbXBvcnQgeyBtYWtlR3JvdXBQcm9wcywgdXNlR3JvdXAgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZ3JvdXAubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBWRXhwYW5zaW9uUGFuZWxTeW1ib2wgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5OnYtZXhwYW5zaW9uLXBhbmVsJyk7XG5jb25zdCBhbGxvd2VkVmFyaWFudHMgPSBbJ2RlZmF1bHQnLCAnYWNjb3JkaW9uJywgJ2luc2V0JywgJ3BvcG91dCddO1xuZXhwb3J0IGNvbnN0IG1ha2VWRXhwYW5zaW9uUGFuZWxzUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjb2xvcjogU3RyaW5nLFxuICB2YXJpYW50OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdkZWZhdWx0JyxcbiAgICB2YWxpZGF0b3I6IHYgPT4gYWxsb3dlZFZhcmlhbnRzLmluY2x1ZGVzKHYpXG4gIH0sXG4gIHJlYWRvbmx5OiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUdyb3VwUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWRXhwYW5zaW9uUGFuZWxzJyk7XG5leHBvcnQgY29uc3QgVkV4cGFuc2lvblBhbmVscyA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWRXhwYW5zaW9uUGFuZWxzJyxcbiAgcHJvcHM6IG1ha2VWRXhwYW5zaW9uUGFuZWxzUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIHVzZUdyb3VwKHByb3BzLCBWRXhwYW5zaW9uUGFuZWxTeW1ib2wpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHZhcmlhbnRDbGFzcyA9IGNvbXB1dGVkKCgpID0+IHByb3BzLnZhcmlhbnQgJiYgYHYtZXhwYW5zaW9uLXBhbmVscy0tdmFyaWFudC0ke3Byb3BzLnZhcmlhbnR9YCk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZFeHBhbnNpb25QYW5lbDoge1xuICAgICAgICBjb2xvcjogdG9SZWYocHJvcHMsICdjb2xvcicpXG4gICAgICB9LFxuICAgICAgVkV4cGFuc2lvblBhbmVsVGl0bGU6IHtcbiAgICAgICAgcmVhZG9ubHk6IHRvUmVmKHByb3BzLCAncmVhZG9ubHknKVxuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1leHBhbnNpb24tcGFuZWxzJywgdGhlbWVDbGFzc2VzLnZhbHVlLCB2YXJpYW50Q2xhc3MudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICB9LCBzbG90cykpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WRXhwYW5zaW9uUGFuZWxzLm1qcy5tYXAiLCJpbXBvcnQgeyB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHZTaG93IGFzIF92U2hvdywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkV4cGFuc2lvblBhbmVsU3ltYm9sIH0gZnJvbSBcIi4vVkV4cGFuc2lvblBhbmVscy5tanNcIjtcbmltcG9ydCB7IFZFeHBhbmRUcmFuc2l0aW9uIH0gZnJvbSBcIi4uL3RyYW5zaXRpb25zL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VMYXp5UHJvcHMsIHVzZUxhenkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGF6eS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBpbmplY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkV4cGFuc2lvblBhbmVsVGV4dFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VMYXp5UHJvcHMoKVxufSwgJ1ZFeHBhbnNpb25QYW5lbFRleHQnKTtcbmV4cG9ydCBjb25zdCBWRXhwYW5zaW9uUGFuZWxUZXh0ID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZFeHBhbnNpb25QYW5lbFRleHQnLFxuICBwcm9wczogbWFrZVZFeHBhbnNpb25QYW5lbFRleHRQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGV4cGFuc2lvblBhbmVsID0gaW5qZWN0KFZFeHBhbnNpb25QYW5lbFN5bWJvbCk7XG4gICAgaWYgKCFleHBhbnNpb25QYW5lbCkgdGhyb3cgbmV3IEVycm9yKCdbVnVldGlmeV0gdi1leHBhbnNpb24tcGFuZWwtdGV4dCBuZWVkcyB0byBiZSBwbGFjZWQgaW5zaWRlIHYtZXhwYW5zaW9uLXBhbmVsJyk7XG4gICAgY29uc3Qge1xuICAgICAgaGFzQ29udGVudCxcbiAgICAgIG9uQWZ0ZXJMZWF2ZVxuICAgIH0gPSB1c2VMYXp5KHByb3BzLCBleHBhbnNpb25QYW5lbC5pc1NlbGVjdGVkKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFZFeHBhbmRUcmFuc2l0aW9uLCB7XG4gICAgICBcIm9uQWZ0ZXJMZWF2ZVwiOiBvbkFmdGVyTGVhdmVcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWV4cGFuc2lvbi1wYW5lbC10ZXh0JywgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9LCBbc2xvdHMuZGVmYXVsdCAmJiBoYXNDb250ZW50LnZhbHVlICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWV4cGFuc2lvbi1wYW5lbC10ZXh0X193cmFwcGVyXCJcbiAgICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKV0pXSksIFtbX3ZTaG93LCBleHBhbnNpb25QYW5lbC5pc1NlbGVjdGVkLnZhbHVlXV0pXVxuICAgIH0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkV4cGFuc2lvblBhbmVsVGV4dC5tanMubWFwIiwiaW1wb3J0IHsgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWRXhwYW5zaW9uUGFuZWxTeW1ib2wgfSBmcm9tIFwiLi9WRXhwYW5zaW9uUGFuZWxzLm1qc1wiO1xuaW1wb3J0IHsgVkljb24gfSBmcm9tIFwiLi4vVkljb24vaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VCYWNrZ3JvdW5kQ29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiOyAvLyBEaXJlY3RpdmVzXG5pbXBvcnQgeyBSaXBwbGUgfSBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9yaXBwbGUvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWRXhwYW5zaW9uUGFuZWxUaXRsZVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29sb3I6IFN0cmluZyxcbiAgZXhwYW5kSWNvbjoge1xuICAgIHR5cGU6IEljb25WYWx1ZSxcbiAgICBkZWZhdWx0OiAnJGV4cGFuZCdcbiAgfSxcbiAgY29sbGFwc2VJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckY29sbGFwc2UnXG4gIH0sXG4gIGhpZGVBY3Rpb25zOiBCb29sZWFuLFxuICByaXBwbGU6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgT2JqZWN0XSxcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICByZWFkb25seTogQm9vbGVhbixcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKClcbn0sICdWRXhwYW5zaW9uUGFuZWxUaXRsZScpO1xuZXhwb3J0IGNvbnN0IFZFeHBhbnNpb25QYW5lbFRpdGxlID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZFeHBhbnNpb25QYW5lbFRpdGxlJyxcbiAgZGlyZWN0aXZlczoge1xuICAgIFJpcHBsZVxuICB9LFxuICBwcm9wczogbWFrZVZFeHBhbnNpb25QYW5lbFRpdGxlUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBleHBhbnNpb25QYW5lbCA9IGluamVjdChWRXhwYW5zaW9uUGFuZWxTeW1ib2wpO1xuICAgIGlmICghZXhwYW5zaW9uUGFuZWwpIHRocm93IG5ldyBFcnJvcignW1Z1ZXRpZnldIHYtZXhwYW5zaW9uLXBhbmVsLXRpdGxlIG5lZWRzIHRvIGJlIHBsYWNlZCBpbnNpZGUgdi1leHBhbnNpb24tcGFuZWwnKTtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcihwcm9wcywgJ2NvbG9yJyk7XG4gICAgY29uc3Qgc2xvdFByb3BzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIGNvbGxhcHNlSWNvbjogcHJvcHMuY29sbGFwc2VJY29uLFxuICAgICAgZGlzYWJsZWQ6IGV4cGFuc2lvblBhbmVsLmRpc2FibGVkLnZhbHVlLFxuICAgICAgZXhwYW5kZWQ6IGV4cGFuc2lvblBhbmVsLmlzU2VsZWN0ZWQudmFsdWUsXG4gICAgICBleHBhbmRJY29uOiBwcm9wcy5leHBhbmRJY29uLFxuICAgICAgcmVhZG9ubHk6IHByb3BzLnJlYWRvbmx5XG4gICAgfSkpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFwiYnV0dG9uXCIsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWV4cGFuc2lvbi1wYW5lbC10aXRsZScsIHtcbiAgICAgICAgJ3YtZXhwYW5zaW9uLXBhbmVsLXRpdGxlLS1hY3RpdmUnOiBleHBhbnNpb25QYW5lbC5pc1NlbGVjdGVkLnZhbHVlXG4gICAgICB9LCBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IFtiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXSxcbiAgICAgIFwidHlwZVwiOiBcImJ1dHRvblwiLFxuICAgICAgXCJ0YWJpbmRleFwiOiBleHBhbnNpb25QYW5lbC5kaXNhYmxlZC52YWx1ZSA/IC0xIDogdW5kZWZpbmVkLFxuICAgICAgXCJkaXNhYmxlZFwiOiBleHBhbnNpb25QYW5lbC5kaXNhYmxlZC52YWx1ZSxcbiAgICAgIFwiYXJpYS1leHBhbmRlZFwiOiBleHBhbnNpb25QYW5lbC5pc1NlbGVjdGVkLnZhbHVlLFxuICAgICAgXCJvbkNsaWNrXCI6ICFwcm9wcy5yZWFkb25seSA/IGV4cGFuc2lvblBhbmVsLnRvZ2dsZSA6IHVuZGVmaW5lZFxuICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJ2LWV4cGFuc2lvbi1wYW5lbC10aXRsZV9fb3ZlcmxheVwiXG4gICAgfSwgbnVsbCksIHNsb3RzLmRlZmF1bHQ/LihzbG90UHJvcHMudmFsdWUpLCAhcHJvcHMuaGlkZUFjdGlvbnMgJiYgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgICBcImNsYXNzXCI6IFwidi1leHBhbnNpb24tcGFuZWwtdGl0bGVfX2ljb25cIlxuICAgIH0sIFtzbG90cy5hY3Rpb25zID8gc2xvdHMuYWN0aW9ucyhzbG90UHJvcHMudmFsdWUpIDogX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICBcImljb25cIjogZXhwYW5zaW9uUGFuZWwuaXNTZWxlY3RlZC52YWx1ZSA/IHByb3BzLmNvbGxhcHNlSWNvbiA6IHByb3BzLmV4cGFuZEljb25cbiAgICB9LCBudWxsKV0pXSksIFtbX3Jlc29sdmVEaXJlY3RpdmUoXCJyaXBwbGVcIiksIHByb3BzLnJpcHBsZV1dKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZFeHBhbnNpb25QYW5lbFRpdGxlLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWRXhwYW5zaW9uUGFuZWxTeW1ib2wgfSBmcm9tIFwiLi9WRXhwYW5zaW9uUGFuZWxzLm1qc1wiO1xuaW1wb3J0IHsgVkV4cGFuc2lvblBhbmVsVGV4dCB9IGZyb20gXCIuL1ZFeHBhbnNpb25QYW5lbFRleHQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVkV4cGFuc2lvblBhbmVsVGl0bGVQcm9wcywgVkV4cGFuc2lvblBhbmVsVGl0bGUgfSBmcm9tIFwiLi9WRXhwYW5zaW9uUGFuZWxUaXRsZS5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBwcm92aWRlRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRWxldmF0aW9uUHJvcHMsIHVzZUVsZXZhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzXCI7XG5pbXBvcnQgeyBtYWtlR3JvdXBJdGVtUHJvcHMsIHVzZUdyb3VwSXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ncm91cC5tanNcIjtcbmltcG9ydCB7IG1ha2VMYXp5UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGF6eS5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHByb3ZpZGUsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZFeHBhbnNpb25QYW5lbFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgdGl0bGU6IFN0cmluZyxcbiAgdGV4dDogU3RyaW5nLFxuICBiZ0NvbG9yOiBTdHJpbmcsXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRWxldmF0aW9uUHJvcHMoKSxcbiAgLi4ubWFrZUdyb3VwSXRlbVByb3BzKCksXG4gIC4uLm1ha2VMYXp5UHJvcHMoKSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVZFeHBhbnNpb25QYW5lbFRpdGxlUHJvcHMoKVxufSwgJ1ZFeHBhbnNpb25QYW5lbCcpO1xuZXhwb3J0IGNvbnN0IFZFeHBhbnNpb25QYW5lbCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWRXhwYW5zaW9uUGFuZWwnLFxuICBwcm9wczogbWFrZVZFeHBhbnNpb25QYW5lbFByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ2dyb3VwOnNlbGVjdGVkJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBncm91cEl0ZW0gPSB1c2VHcm91cEl0ZW0ocHJvcHMsIFZFeHBhbnNpb25QYW5lbFN5bWJvbCk7XG4gICAgY29uc3Qge1xuICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VCYWNrZ3JvdW5kQ29sb3IocHJvcHMsICdiZ0NvbG9yJyk7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocHJvcHMpO1xuICAgIGNvbnN0IGlzRGlzYWJsZWQgPSBjb21wdXRlZCgoKSA9PiBncm91cEl0ZW0/LmRpc2FibGVkLnZhbHVlIHx8IHByb3BzLmRpc2FibGVkKTtcbiAgICBjb25zdCBzZWxlY3RlZEluZGljZXMgPSBjb21wdXRlZCgoKSA9PiBncm91cEl0ZW0uZ3JvdXAuaXRlbXMudmFsdWUucmVkdWNlKChhcnIsIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBpZiAoZ3JvdXBJdGVtLmdyb3VwLnNlbGVjdGVkLnZhbHVlLmluY2x1ZGVzKGl0ZW0uaWQpKSBhcnIucHVzaChpbmRleCk7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0sIFtdKSk7XG4gICAgY29uc3QgaXNCZWZvcmVTZWxlY3RlZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gZ3JvdXBJdGVtLmdyb3VwLml0ZW1zLnZhbHVlLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IGdyb3VwSXRlbS5pZCk7XG4gICAgICByZXR1cm4gIWdyb3VwSXRlbS5pc1NlbGVjdGVkLnZhbHVlICYmIHNlbGVjdGVkSW5kaWNlcy52YWx1ZS5zb21lKHNlbGVjdGVkSW5kZXggPT4gc2VsZWN0ZWRJbmRleCAtIGluZGV4ID09PSAxKTtcbiAgICB9KTtcbiAgICBjb25zdCBpc0FmdGVyU2VsZWN0ZWQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IGdyb3VwSXRlbS5ncm91cC5pdGVtcy52YWx1ZS5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmlkID09PSBncm91cEl0ZW0uaWQpO1xuICAgICAgcmV0dXJuICFncm91cEl0ZW0uaXNTZWxlY3RlZC52YWx1ZSAmJiBzZWxlY3RlZEluZGljZXMudmFsdWUuc29tZShzZWxlY3RlZEluZGV4ID0+IHNlbGVjdGVkSW5kZXggLSBpbmRleCA9PT0gLTEpO1xuICAgIH0pO1xuICAgIHByb3ZpZGUoVkV4cGFuc2lvblBhbmVsU3ltYm9sLCBncm91cEl0ZW0pO1xuICAgIHByb3ZpZGVEZWZhdWx0cyh7XG4gICAgICBWRXhwYW5zaW9uUGFuZWxUZXh0OiB7XG4gICAgICAgIGVhZ2VyOiB0b1JlZihwcm9wcywgJ2VhZ2VyJylcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaGFzVGV4dCA9ICEhKHNsb3RzLnRleHQgfHwgcHJvcHMudGV4dCk7XG4gICAgICBjb25zdCBoYXNUaXRsZSA9ICEhKHNsb3RzLnRpdGxlIHx8IHByb3BzLnRpdGxlKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWV4cGFuc2lvbi1wYW5lbCcsIHtcbiAgICAgICAgICAndi1leHBhbnNpb24tcGFuZWwtLWFjdGl2ZSc6IGdyb3VwSXRlbS5pc1NlbGVjdGVkLnZhbHVlLFxuICAgICAgICAgICd2LWV4cGFuc2lvbi1wYW5lbC0tYmVmb3JlLWFjdGl2ZSc6IGlzQmVmb3JlU2VsZWN0ZWQudmFsdWUsXG4gICAgICAgICAgJ3YtZXhwYW5zaW9uLXBhbmVsLS1hZnRlci1hY3RpdmUnOiBpc0FmdGVyU2VsZWN0ZWQudmFsdWUsXG4gICAgICAgICAgJ3YtZXhwYW5zaW9uLXBhbmVsLS1kaXNhYmxlZCc6IGlzRGlzYWJsZWQudmFsdWVcbiAgICAgICAgfSwgcm91bmRlZENsYXNzZXMudmFsdWUsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV1cbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBbJ3YtZXhwYW5zaW9uLXBhbmVsX19zaGFkb3cnLCAuLi5lbGV2YXRpb25DbGFzc2VzLnZhbHVlXVxuICAgICAgICB9LCBudWxsKSwgaGFzVGl0bGUgJiYgX2NyZWF0ZVZOb2RlKFZFeHBhbnNpb25QYW5lbFRpdGxlLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJ0aXRsZVwiLFxuICAgICAgICAgIFwiY29sbGFwc2VJY29uXCI6IHByb3BzLmNvbGxhcHNlSWNvbixcbiAgICAgICAgICBcImNvbG9yXCI6IHByb3BzLmNvbG9yLFxuICAgICAgICAgIFwiZXhwYW5kSWNvblwiOiBwcm9wcy5leHBhbmRJY29uLFxuICAgICAgICAgIFwiaGlkZUFjdGlvbnNcIjogcHJvcHMuaGlkZUFjdGlvbnMsXG4gICAgICAgICAgXCJyaXBwbGVcIjogcHJvcHMucmlwcGxlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMudGl0bGUgPyBzbG90cy50aXRsZSgpIDogcHJvcHMudGl0bGVdXG4gICAgICAgIH0pLCBoYXNUZXh0ICYmIF9jcmVhdGVWTm9kZShWRXhwYW5zaW9uUGFuZWxUZXh0LCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJ0ZXh0XCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy50ZXh0ID8gc2xvdHMudGV4dCgpIDogcHJvcHMudGV4dF1cbiAgICAgICAgfSksIHNsb3RzLmRlZmF1bHQ/LigpXVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZFeHBhbnNpb25QYW5lbC5tanMubWFwIiwiaW1wb3J0IHsgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkZpbGVJbnB1dC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkNoaXAgfSBmcm9tIFwiLi4vVkNoaXAvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWQ291bnRlciB9IGZyb20gXCIuLi9WQ291bnRlci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZGaWVsZCB9IGZyb20gXCIuLi9WRmllbGQvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBmaWx0ZXJGaWVsZFByb3BzLCBtYWtlVkZpZWxkUHJvcHMgfSBmcm9tIFwiLi4vVkZpZWxkL1ZGaWVsZC5tanNcIjtcbmltcG9ydCB7IG1ha2VWSW5wdXRQcm9wcywgVklucHV0IH0gZnJvbSBcIi4uL1ZJbnB1dC9WSW5wdXQubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VGb2N1cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb2N1cy5tanNcIjtcbmltcG9ydCB7IGZvcndhcmRSZWZzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvcndhcmRSZWZzLm1qc1wiO1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG5leHRUaWNrLCByZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNhbGxFdmVudCwgZmlsdGVySW5wdXRBdHRycywgZ2VuZXJpY0NvbXBvbmVudCwgaHVtYW5SZWFkYWJsZUZpbGVTaXplLCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciwgd3JhcEluQXJyYXkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkZpbGVJbnB1dFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY2hpcHM6IEJvb2xlYW4sXG4gIGNvdW50ZXI6IEJvb2xlYW4sXG4gIGNvdW50ZXJTaXplU3RyaW5nOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICckdnVldGlmeS5maWxlSW5wdXQuY291bnRlclNpemUnXG4gIH0sXG4gIGNvdW50ZXJTdHJpbmc6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJyR2dWV0aWZ5LmZpbGVJbnB1dC5jb3VudGVyJ1xuICB9LFxuICBtdWx0aXBsZTogQm9vbGVhbixcbiAgc2hvd1NpemU6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB2YWxpZGF0b3I6IHYgPT4ge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnYm9vbGVhbicgfHwgWzEwMDAsIDEwMjRdLmluY2x1ZGVzKHYpO1xuICAgIH1cbiAgfSxcbiAgLi4ubWFrZVZJbnB1dFByb3BzKHtcbiAgICBwcmVwZW5kSWNvbjogJyRmaWxlJ1xuICB9KSxcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6ICgpID0+IFtdLFxuICAgIHZhbGlkYXRvcjogdmFsID0+IHtcbiAgICAgIHJldHVybiB3cmFwSW5BcnJheSh2YWwpLmV2ZXJ5KHYgPT4gdiAhPSBudWxsICYmIHR5cGVvZiB2ID09PSAnb2JqZWN0Jyk7XG4gICAgfVxuICB9LFxuICAuLi5tYWtlVkZpZWxkUHJvcHMoe1xuICAgIGNsZWFyYWJsZTogdHJ1ZVxuICB9KVxufSwgJ1ZGaWxlSW5wdXQnKTtcbmV4cG9ydCBjb25zdCBWRmlsZUlucHV0ID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZGaWxlSW5wdXQnLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczogbWFrZVZGaWxlSW5wdXRQcm9wcygpLFxuICBlbWl0czoge1xuICAgICdjbGljazpjb250cm9sJzogZSA9PiB0cnVlLFxuICAgICdtb3VzZWRvd246Y29udHJvbCc6IGUgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOmZvY3VzZWQnOiBmb2N1c2VkID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogZmlsZXMgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBhdHRycyxcbiAgICAgIGVtaXQsXG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRcbiAgICB9ID0gdXNlTG9jYWxlKCk7XG4gICAgY29uc3QgbW9kZWwgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgY29uc3Qge1xuICAgICAgaXNGb2N1c2VkLFxuICAgICAgZm9jdXMsXG4gICAgICBibHVyXG4gICAgfSA9IHVzZUZvY3VzKHByb3BzKTtcbiAgICBjb25zdCBiYXNlID0gY29tcHV0ZWQoKCkgPT4gdHlwZW9mIHByb3BzLnNob3dTaXplICE9PSAnYm9vbGVhbicgPyBwcm9wcy5zaG93U2l6ZSA6IHVuZGVmaW5lZCk7XG4gICAgY29uc3QgdG90YWxCeXRlcyA9IGNvbXB1dGVkKCgpID0+IChtb2RlbC52YWx1ZSA/PyBbXSkucmVkdWNlKChieXRlcywgX3JlZjIpID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIHNpemUgPSAwXG4gICAgICB9ID0gX3JlZjI7XG4gICAgICByZXR1cm4gYnl0ZXMgKyBzaXplO1xuICAgIH0sIDApKTtcbiAgICBjb25zdCB0b3RhbEJ5dGVzUmVhZGFibGUgPSBjb21wdXRlZCgoKSA9PiBodW1hblJlYWRhYmxlRmlsZVNpemUodG90YWxCeXRlcy52YWx1ZSwgYmFzZS52YWx1ZSkpO1xuICAgIGNvbnN0IGZpbGVOYW1lcyA9IGNvbXB1dGVkKCgpID0+IChtb2RlbC52YWx1ZSA/PyBbXSkubWFwKGZpbGUgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBuYW1lID0gJycsXG4gICAgICAgIHNpemUgPSAwXG4gICAgICB9ID0gZmlsZTtcbiAgICAgIHJldHVybiAhcHJvcHMuc2hvd1NpemUgPyBuYW1lIDogYCR7bmFtZX0gKCR7aHVtYW5SZWFkYWJsZUZpbGVTaXplKHNpemUsIGJhc2UudmFsdWUpfSlgO1xuICAgIH0pKTtcbiAgICBjb25zdCBjb3VudGVyVmFsdWUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBmaWxlQ291bnQgPSBtb2RlbC52YWx1ZT8ubGVuZ3RoID8/IDA7XG4gICAgICBpZiAocHJvcHMuc2hvd1NpemUpIHJldHVybiB0KHByb3BzLmNvdW50ZXJTaXplU3RyaW5nLCBmaWxlQ291bnQsIHRvdGFsQnl0ZXNSZWFkYWJsZS52YWx1ZSk7ZWxzZSByZXR1cm4gdChwcm9wcy5jb3VudGVyU3RyaW5nLCBmaWxlQ291bnQpO1xuICAgIH0pO1xuICAgIGNvbnN0IHZJbnB1dFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHZGaWVsZFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGlucHV0UmVmID0gcmVmKCk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSBjb21wdXRlZCgoKSA9PiBpc0ZvY3VzZWQudmFsdWUgfHwgcHJvcHMuYWN0aXZlKTtcbiAgICBjb25zdCBpc1BsYWluT3JVbmRlcmxpbmVkID0gY29tcHV0ZWQoKCkgPT4gWydwbGFpbicsICd1bmRlcmxpbmVkJ10uaW5jbHVkZXMocHJvcHMudmFyaWFudCkpO1xuICAgIGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgICBpZiAoaW5wdXRSZWYudmFsdWUgIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgaW5wdXRSZWYudmFsdWU/LmZvY3VzKCk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzRm9jdXNlZC52YWx1ZSkgZm9jdXMoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25DbGlja1ByZXBlbmQoZSkge1xuICAgICAgb25Db250cm9sQ2xpY2soZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQ29udHJvbE1vdXNlZG93bihlKSB7XG4gICAgICBlbWl0KCdtb3VzZWRvd246Y29udHJvbCcsIGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkNvbnRyb2xDbGljayhlKSB7XG4gICAgICBpbnB1dFJlZi52YWx1ZT8uY2xpY2soKTtcbiAgICAgIGVtaXQoJ2NsaWNrOmNvbnRyb2wnLCBlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25DbGVhcihlKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgb25Gb2N1cygpO1xuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBtb2RlbC52YWx1ZSA9IFtdO1xuICAgICAgICBjYWxsRXZlbnQocHJvcHNbJ29uQ2xpY2s6Y2xlYXInXSwgZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgd2F0Y2gobW9kZWwsIG5ld1ZhbHVlID0+IHtcbiAgICAgIGNvbnN0IGhhc01vZGVsUmVzZXQgPSAhQXJyYXkuaXNBcnJheShuZXdWYWx1ZSkgfHwgIW5ld1ZhbHVlLmxlbmd0aDtcbiAgICAgIGlmIChoYXNNb2RlbFJlc2V0ICYmIGlucHV0UmVmLnZhbHVlKSB7XG4gICAgICAgIGlucHV0UmVmLnZhbHVlLnZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IGhhc0NvdW50ZXIgPSAhIShzbG90cy5jb3VudGVyIHx8IHByb3BzLmNvdW50ZXIpO1xuICAgICAgY29uc3QgaGFzRGV0YWlscyA9ICEhKGhhc0NvdW50ZXIgfHwgc2xvdHMuZGV0YWlscyk7XG4gICAgICBjb25zdCBbcm9vdEF0dHJzLCBpbnB1dEF0dHJzXSA9IGZpbHRlcklucHV0QXR0cnMoYXR0cnMpO1xuICAgICAgY29uc3QgW3tcbiAgICAgICAgbW9kZWxWYWx1ZTogXyxcbiAgICAgICAgLi4uaW5wdXRQcm9wc1xuICAgICAgfV0gPSBWSW5wdXQuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgY29uc3QgW2ZpZWxkUHJvcHNdID0gZmlsdGVyRmllbGRQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZJbnB1dCwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcInJlZlwiOiB2SW5wdXRSZWYsXG4gICAgICAgIFwibW9kZWxWYWx1ZVwiOiBtb2RlbC52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBtb2RlbC52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtZmlsZS1pbnB1dCcsIHtcbiAgICAgICAgICAndi10ZXh0LWZpZWxkLS1wbGFpbi11bmRlcmxpbmVkJzogaXNQbGFpbk9yVW5kZXJsaW5lZC52YWx1ZVxuICAgICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGUsXG4gICAgICAgIFwib25DbGljazpwcmVwZW5kXCI6IG9uQ2xpY2tQcmVwZW5kXG4gICAgICB9LCByb290QXR0cnMsIGlucHV0UHJvcHMsIHtcbiAgICAgICAgXCJjZW50ZXJBZmZpeFwiOiAhaXNQbGFpbk9yVW5kZXJsaW5lZC52YWx1ZSxcbiAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZC52YWx1ZVxuICAgICAgfSksIHtcbiAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgIGRlZmF1bHQ6IF9yZWYzID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBpc0Rpc2FibGVkLFxuICAgICAgICAgICAgaXNEaXJ0eSxcbiAgICAgICAgICAgIGlzUmVhZG9ubHksXG4gICAgICAgICAgICBpc1ZhbGlkXG4gICAgICAgICAgfSA9IF9yZWYzO1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVkZpZWxkLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgICBcInJlZlwiOiB2RmllbGRSZWYsXG4gICAgICAgICAgICBcInByZXBlbmQtaWNvblwiOiBwcm9wcy5wcmVwZW5kSWNvbixcbiAgICAgICAgICAgIFwib25Nb3VzZWRvd25cIjogb25Db250cm9sTW91c2Vkb3duLFxuICAgICAgICAgICAgXCJvbkNsaWNrXCI6IG9uQ29udHJvbENsaWNrLFxuICAgICAgICAgICAgXCJvbkNsaWNrOmNsZWFyXCI6IG9uQ2xlYXIsXG4gICAgICAgICAgICBcIm9uQ2xpY2s6cHJlcGVuZElubmVyXCI6IHByb3BzWydvbkNsaWNrOnByZXBlbmRJbm5lciddLFxuICAgICAgICAgICAgXCJvbkNsaWNrOmFwcGVuZElubmVyXCI6IHByb3BzWydvbkNsaWNrOmFwcGVuZElubmVyJ11cbiAgICAgICAgICB9LCBmaWVsZFByb3BzLCB7XG4gICAgICAgICAgICBcImlkXCI6IGlkLnZhbHVlLFxuICAgICAgICAgICAgXCJhY3RpdmVcIjogaXNBY3RpdmUudmFsdWUgfHwgaXNEaXJ0eS52YWx1ZSxcbiAgICAgICAgICAgIFwiZGlydHlcIjogaXNEaXJ0eS52YWx1ZSxcbiAgICAgICAgICAgIFwiZGlzYWJsZWRcIjogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICAgICAgIFwiZm9jdXNlZFwiOiBpc0ZvY3VzZWQudmFsdWUsXG4gICAgICAgICAgICBcImVycm9yXCI6IGlzVmFsaWQudmFsdWUgPT09IGZhbHNlXG4gICAgICAgICAgfSksIHtcbiAgICAgICAgICAgIC4uLnNsb3RzLFxuICAgICAgICAgICAgZGVmYXVsdDogX3JlZjQgPT4ge1xuICAgICAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgICBjbGFzczogZmllbGRDbGFzcyxcbiAgICAgICAgICAgICAgICAgIC4uLnNsb3RQcm9wc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSA9IF9yZWY0O1xuICAgICAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW19jcmVhdGVWTm9kZShcImlucHV0XCIsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICAgICAgICBcInJlZlwiOiBpbnB1dFJlZixcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJmaWxlXCIsXG4gICAgICAgICAgICAgICAgXCJyZWFkb25seVwiOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgICAgICAgICAgICAgIFwiZGlzYWJsZWRcIjogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICAgICAgICAgICBcIm11bHRpcGxlXCI6IHByb3BzLm11bHRpcGxlLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBwcm9wcy5uYW1lLFxuICAgICAgICAgICAgICAgIFwib25DbGlja1wiOiBlID0+IHtcbiAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoaXNSZWFkb25seS52YWx1ZSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgb25Gb2N1cygpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJvbkNoYW5nZVwiOiBlID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmICghZS50YXJnZXQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgbW9kZWwudmFsdWUgPSBbLi4uKHRhcmdldC5maWxlcyA/PyBbXSldO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJvbkZvY3VzXCI6IG9uRm9jdXMsXG4gICAgICAgICAgICAgICAgXCJvbkJsdXJcIjogYmx1clxuICAgICAgICAgICAgICB9LCBzbG90UHJvcHMsIGlucHV0QXR0cnMpLCBudWxsKSwgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICBcImNsYXNzXCI6IGZpZWxkQ2xhc3NcbiAgICAgICAgICAgICAgfSwgWyEhbW9kZWwudmFsdWU/Lmxlbmd0aCAmJiAoc2xvdHMuc2VsZWN0aW9uID8gc2xvdHMuc2VsZWN0aW9uKHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZXM6IGZpbGVOYW1lcy52YWx1ZSxcbiAgICAgICAgICAgICAgICB0b3RhbEJ5dGVzOiB0b3RhbEJ5dGVzLnZhbHVlLFxuICAgICAgICAgICAgICAgIHRvdGFsQnl0ZXNSZWFkYWJsZTogdG90YWxCeXRlc1JlYWRhYmxlLnZhbHVlXG4gICAgICAgICAgICAgIH0pIDogcHJvcHMuY2hpcHMgPyBmaWxlTmFtZXMudmFsdWUubWFwKHRleHQgPT4gX2NyZWF0ZVZOb2RlKFZDaGlwLCB7XG4gICAgICAgICAgICAgICAgXCJrZXlcIjogdGV4dCxcbiAgICAgICAgICAgICAgICBcInNpemVcIjogXCJzbWFsbFwiLFxuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogcHJvcHMuY29sb3JcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFt0ZXh0XVxuICAgICAgICAgICAgICB9KSkgOiBmaWxlTmFtZXMudmFsdWUuam9pbignLCAnKSldKV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBkZXRhaWxzOiBoYXNEZXRhaWxzID8gc2xvdFByb3BzID0+IF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtzbG90cy5kZXRhaWxzPy4oc2xvdFByb3BzKSwgaGFzQ291bnRlciAmJiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKFwic3BhblwiLCBudWxsLCBudWxsKSwgX2NyZWF0ZVZOb2RlKFZDb3VudGVyLCB7XG4gICAgICAgICAgXCJhY3RpdmVcIjogISFtb2RlbC52YWx1ZT8ubGVuZ3RoLFxuICAgICAgICAgIFwidmFsdWVcIjogY291bnRlclZhbHVlLnZhbHVlXG4gICAgICAgIH0sIHNsb3RzLmNvdW50ZXIpXSldKSA6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvcndhcmRSZWZzKHt9LCB2SW5wdXRSZWYsIHZGaWVsZFJlZiwgaW5wdXRSZWYpO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZGaWxlSW5wdXQubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WRm9vdGVyLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUJvcmRlclByb3BzLCB1c2VCb3JkZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvYm9yZGVyLm1qc1wiO1xuaW1wb3J0IHsgdXNlQmFja2dyb3VuZENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VMYXlvdXRJdGVtUHJvcHMsIHVzZUxheW91dEl0ZW0gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGF5b3V0Lm1qc1wiO1xuaW1wb3J0IHsgdXNlUmVzaXplT2JzZXJ2ZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcmVzaXplT2JzZXJ2ZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgc2hhbGxvd1JlZiwgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkZvb3RlclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYXBwOiBCb29sZWFuLFxuICBjb2xvcjogU3RyaW5nLFxuICBoZWlnaHQ6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6ICdhdXRvJ1xuICB9LFxuICAuLi5tYWtlQm9yZGVyUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlTGF5b3V0SXRlbVByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKHtcbiAgICB0YWc6ICdmb290ZXInXG4gIH0pLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpXG59LCAnVkZvb3RlcicpO1xuZXhwb3J0IGNvbnN0IFZGb290ZXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkZvb3RlcicsXG4gIHByb3BzOiBtYWtlVkZvb3RlclByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VCYWNrZ3JvdW5kQ29sb3IodG9SZWYocHJvcHMsICdjb2xvcicpKTtcbiAgICBjb25zdCB7XG4gICAgICBib3JkZXJDbGFzc2VzXG4gICAgfSA9IHVzZUJvcmRlcihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocHJvcHMpO1xuICAgIGNvbnN0IGF1dG9IZWlnaHQgPSBzaGFsbG93UmVmKDMyKTtcbiAgICBjb25zdCB7XG4gICAgICByZXNpemVSZWZcbiAgICB9ID0gdXNlUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICBpZiAoIWVudHJpZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICBhdXRvSGVpZ2h0LnZhbHVlID0gZW50cmllc1swXS50YXJnZXQuY2xpZW50SGVpZ2h0O1xuICAgIH0pO1xuICAgIGNvbnN0IGhlaWdodCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmhlaWdodCA9PT0gJ2F1dG8nID8gYXV0b0hlaWdodC52YWx1ZSA6IHBhcnNlSW50KHByb3BzLmhlaWdodCwgMTApKTtcbiAgICBjb25zdCB7XG4gICAgICBsYXlvdXRJdGVtU3R5bGVzXG4gICAgfSA9IHVzZUxheW91dEl0ZW0oe1xuICAgICAgaWQ6IHByb3BzLm5hbWUsXG4gICAgICBvcmRlcjogY29tcHV0ZWQoKCkgPT4gcGFyc2VJbnQocHJvcHMub3JkZXIsIDEwKSksXG4gICAgICBwb3NpdGlvbjogY29tcHV0ZWQoKCkgPT4gJ2JvdHRvbScpLFxuICAgICAgbGF5b3V0U2l6ZTogaGVpZ2h0LFxuICAgICAgZWxlbWVudFNpemU6IGNvbXB1dGVkKCgpID0+IHByb3BzLmhlaWdodCA9PT0gJ2F1dG8nID8gdW5kZWZpbmVkIDogaGVpZ2h0LnZhbHVlKSxcbiAgICAgIGFjdGl2ZTogY29tcHV0ZWQoKCkgPT4gcHJvcHMuYXBwKSxcbiAgICAgIGFic29sdXRlOiB0b1JlZihwcm9wcywgJ2Fic29sdXRlJylcbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJyZWZcIjogcmVzaXplUmVmLFxuICAgICAgXCJjbGFzc1wiOiBbJ3YtZm9vdGVyJywgdGhlbWVDbGFzc2VzLnZhbHVlLCBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLnZhbHVlLCBib3JkZXJDbGFzc2VzLnZhbHVlLCBlbGV2YXRpb25DbGFzc2VzLnZhbHVlLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBbYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlLCBwcm9wcy5hcHAgPyBsYXlvdXRJdGVtU3R5bGVzLnZhbHVlIDoge1xuICAgICAgICBoZWlnaHQ6IGNvbnZlcnRUb1VuaXQocHJvcHMuaGVpZ2h0KVxuICAgICAgfSwgcHJvcHMuc3R5bGVdXG4gICAgfSwgc2xvdHMpKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkZvb3Rlci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBjcmVhdGVGb3JtLCBtYWtlRm9ybVByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2Zvcm0ubWpzXCI7XG5pbXBvcnQgeyBmb3J3YXJkUmVmcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb3J3YXJkUmVmcy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyByZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkZvcm1Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRm9ybVByb3BzKClcbn0sICdWRm9ybScpO1xuZXhwb3J0IGNvbnN0IFZGb3JtID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZGb3JtJyxcbiAgcHJvcHM6IG1ha2VWRm9ybVByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWUsXG4gICAgc3VibWl0OiBlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHMsXG4gICAgICBlbWl0XG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgZm9ybSA9IGNyZWF0ZUZvcm0ocHJvcHMpO1xuICAgIGNvbnN0IGZvcm1SZWYgPSByZWYoKTtcbiAgICBmdW5jdGlvbiBvblJlc2V0KGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGZvcm0ucmVzZXQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25TdWJtaXQoX2UpIHtcbiAgICAgIGNvbnN0IGUgPSBfZTtcbiAgICAgIGNvbnN0IHJlYWR5ID0gZm9ybS52YWxpZGF0ZSgpO1xuICAgICAgZS50aGVuID0gcmVhZHkudGhlbi5iaW5kKHJlYWR5KTtcbiAgICAgIGUuY2F0Y2ggPSByZWFkeS5jYXRjaC5iaW5kKHJlYWR5KTtcbiAgICAgIGUuZmluYWxseSA9IHJlYWR5LmZpbmFsbHkuYmluZChyZWFkeSk7XG4gICAgICBlbWl0KCdzdWJtaXQnLCBlKTtcbiAgICAgIGlmICghZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIHJlYWR5LnRoZW4oX3JlZjIgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICB2YWxpZFxuICAgICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgICAgIGZvcm1SZWYudmFsdWU/LnN1Ym1pdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJmb3JtXCIsIHtcbiAgICAgIFwicmVmXCI6IGZvcm1SZWYsXG4gICAgICBcImNsYXNzXCI6IFsndi1mb3JtJywgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZSxcbiAgICAgIFwibm92YWxpZGF0ZVwiOiB0cnVlLFxuICAgICAgXCJvblJlc2V0XCI6IG9uUmVzZXQsXG4gICAgICBcIm9uU3VibWl0XCI6IG9uU3VibWl0XG4gICAgfSwgW3Nsb3RzLmRlZmF1bHQ/Lihmb3JtKV0pKTtcbiAgICByZXR1cm4gZm9yd2FyZFJlZnMoZm9ybSwgZm9ybVJlZik7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkZvcm0ubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WR3JpZC5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWQ29udGFpbmVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBmbHVpZDoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpXG59LCAnVkNvbnRhaW5lcicpO1xuZXhwb3J0IGNvbnN0IFZDb250YWluZXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkNvbnRhaW5lcicsXG4gIHByb3BzOiBtYWtlVkNvbnRhaW5lclByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgcnRsQ2xhc3Nlc1xuICAgIH0gPSB1c2VSdGwoKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtY29udGFpbmVyJywge1xuICAgICAgICAndi1jb250YWluZXItLWZsdWlkJzogcHJvcHMuZmx1aWRcbiAgICAgIH0sIHJ0bENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICB9LCBzbG90cykpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ29udGFpbmVyLm1qcy5tYXAiLCIvLyBTdHlsZXNcbmltcG9ydCBcIi4vVkdyaWQuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgYnJlYWtwb2ludHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGlzcGxheS5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSwgY29tcHV0ZWQsIGggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5jb25zdCBicmVha3BvaW50UHJvcHMgPSAoKCkgPT4ge1xuICByZXR1cm4gYnJlYWtwb2ludHMucmVkdWNlKChwcm9wcywgdmFsKSA9PiB7XG4gICAgcHJvcHNbdmFsXSA9IHtcbiAgICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH07XG4gICAgcmV0dXJuIHByb3BzO1xuICB9LCB7fSk7XG59KSgpO1xuY29uc3Qgb2Zmc2V0UHJvcHMgPSAoKCkgPT4ge1xuICByZXR1cm4gYnJlYWtwb2ludHMucmVkdWNlKChwcm9wcywgdmFsKSA9PiB7XG4gICAgY29uc3Qgb2Zmc2V0S2V5ID0gJ29mZnNldCcgKyBjYXBpdGFsaXplKHZhbCk7XG4gICAgcHJvcHNbb2Zmc2V0S2V5XSA9IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH0sIHt9KTtcbn0pKCk7XG5jb25zdCBvcmRlclByb3BzID0gKCgpID0+IHtcbiAgcmV0dXJuIGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHZhbCkgPT4ge1xuICAgIGNvbnN0IG9yZGVyS2V5ID0gJ29yZGVyJyArIGNhcGl0YWxpemUodmFsKTtcbiAgICBwcm9wc1tvcmRlcktleV0gPSB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIHByb3BzO1xuICB9LCB7fSk7XG59KSgpO1xuY29uc3QgcHJvcE1hcCA9IHtcbiAgY29sOiBPYmplY3Qua2V5cyhicmVha3BvaW50UHJvcHMpLFxuICBvZmZzZXQ6IE9iamVjdC5rZXlzKG9mZnNldFByb3BzKSxcbiAgb3JkZXI6IE9iamVjdC5rZXlzKG9yZGVyUHJvcHMpXG59O1xuZnVuY3Rpb24gYnJlYWtwb2ludENsYXNzKHR5cGUsIHByb3AsIHZhbCkge1xuICBsZXQgY2xhc3NOYW1lID0gdHlwZTtcbiAgaWYgKHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChwcm9wKSB7XG4gICAgY29uc3QgYnJlYWtwb2ludCA9IHByb3AucmVwbGFjZSh0eXBlLCAnJyk7XG4gICAgY2xhc3NOYW1lICs9IGAtJHticmVha3BvaW50fWA7XG4gIH1cbiAgaWYgKHR5cGUgPT09ICdjb2wnKSB7XG4gICAgY2xhc3NOYW1lID0gJ3YtJyArIGNsYXNzTmFtZTtcbiAgfVxuICAvLyBIYW5kbGluZyB0aGUgYm9vbGVhbiBzdHlsZSBwcm9wIHdoZW4gYWNjZXB0aW5nIFtCb29sZWFuLCBTdHJpbmcsIE51bWJlcl1cbiAgLy8gbWVhbnMgVnVlIHdpbGwgbm90IGNvbnZlcnQgPHYtY29sIHNtPjwvdi1jb2w+IHRvIHNtOiB0cnVlIGZvciB1cy5cbiAgLy8gU2luY2UgdGhlIGRlZmF1bHQgaXMgZmFsc2UsIGFuIGVtcHR5IHN0cmluZyBpbmRpY2F0ZXMgdGhlIHByb3AncyBwcmVzZW5jZS5cbiAgaWYgKHR5cGUgPT09ICdjb2wnICYmICh2YWwgPT09ICcnIHx8IHZhbCA9PT0gdHJ1ZSkpIHtcbiAgICAvLyAudi1jb2wtbWRcbiAgICByZXR1cm4gY2xhc3NOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgLy8gLm9yZGVyLW1kLTZcbiAgY2xhc3NOYW1lICs9IGAtJHt2YWx9YDtcbiAgcmV0dXJuIGNsYXNzTmFtZS50b0xvd2VyQ2FzZSgpO1xufVxuY29uc3QgQUxJR05fU0VMRl9WQUxVRVMgPSBbJ2F1dG8nLCAnc3RhcnQnLCAnZW5kJywgJ2NlbnRlcicsICdiYXNlbGluZScsICdzdHJldGNoJ107XG5leHBvcnQgY29uc3QgbWFrZVZDb2xQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbHM6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nLCBOdW1iZXJdLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0sXG4gIC4uLmJyZWFrcG9pbnRQcm9wcyxcbiAgb2Zmc2V0OiB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIC4uLm9mZnNldFByb3BzLFxuICBvcmRlcjoge1xuICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICAuLi5vcmRlclByb3BzLFxuICBhbGlnblNlbGY6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogbnVsbCxcbiAgICB2YWxpZGF0b3I6IHN0ciA9PiBBTElHTl9TRUxGX1ZBTFVFUy5pbmNsdWRlcyhzdHIpXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKVxufSwgJ1ZDb2wnKTtcbmV4cG9ydCBjb25zdCBWQ29sID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZDb2wnLFxuICBwcm9wczogbWFrZVZDb2xQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBjbGFzc0xpc3QgPSBbXTtcblxuICAgICAgLy8gTG9vcCB0aHJvdWdoIGBjb2xgLCBgb2Zmc2V0YCwgYG9yZGVyYCBicmVha3BvaW50IHByb3BzXG4gICAgICBsZXQgdHlwZTtcbiAgICAgIGZvciAodHlwZSBpbiBwcm9wTWFwKSB7XG4gICAgICAgIHByb3BNYXBbdHlwZV0uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGJyZWFrcG9pbnRDbGFzcyh0eXBlLCBwcm9wLCB2YWx1ZSk7XG4gICAgICAgICAgaWYgKGNsYXNzTmFtZSkgY2xhc3NMaXN0LnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBoYXNDb2xDbGFzc2VzID0gY2xhc3NMaXN0LnNvbWUoY2xhc3NOYW1lID0+IGNsYXNzTmFtZS5zdGFydHNXaXRoKCd2LWNvbC0nKSk7XG4gICAgICBjbGFzc0xpc3QucHVzaCh7XG4gICAgICAgIC8vIERlZmF1bHQgdG8gLnYtY29sIGlmIG5vIG90aGVyIGNvbC17YnB9LSogY2xhc3NlcyBnZW5lcmF0ZWQgbm9yIGBjb2xzYCBzcGVjaWZpZWQuXG4gICAgICAgICd2LWNvbCc6ICFoYXNDb2xDbGFzc2VzIHx8ICFwcm9wcy5jb2xzLFxuICAgICAgICBbYHYtY29sLSR7cHJvcHMuY29sc31gXTogcHJvcHMuY29scyxcbiAgICAgICAgW2BvZmZzZXQtJHtwcm9wcy5vZmZzZXR9YF06IHByb3BzLm9mZnNldCxcbiAgICAgICAgW2BvcmRlci0ke3Byb3BzLm9yZGVyfWBdOiBwcm9wcy5vcmRlcixcbiAgICAgICAgW2BhbGlnbi1zZWxmLSR7cHJvcHMuYWxpZ25TZWxmfWBdOiBwcm9wcy5hbGlnblNlbGZcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNsYXNzTGlzdDtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4gaChwcm9wcy50YWcsIHtcbiAgICAgIGNsYXNzOiBbY2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgc3R5bGU6IHByb3BzLnN0eWxlXG4gICAgfSwgc2xvdHMuZGVmYXVsdD8uKCkpO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDb2wubWpzLm1hcCIsIi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WR3JpZC5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBicmVha3BvaW50cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaXNwbGF5Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjYXBpdGFsaXplLCBjb21wdXRlZCwgaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IEFMSUdOTUVOVCA9IFsnc3RhcnQnLCAnZW5kJywgJ2NlbnRlciddO1xuY29uc3QgU1BBQ0UgPSBbJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJywgJ3NwYWNlLWV2ZW5seSddO1xuZnVuY3Rpb24gbWFrZVJvd1Byb3BzKHByZWZpeCwgZGVmKSB7XG4gIHJldHVybiBicmVha3BvaW50cy5yZWR1Y2UoKHByb3BzLCB2YWwpID0+IHtcbiAgICBjb25zdCBwcmVmaXhLZXkgPSBwcmVmaXggKyBjYXBpdGFsaXplKHZhbCk7XG4gICAgcHJvcHNbcHJlZml4S2V5XSA9IGRlZigpO1xuICAgIHJldHVybiBwcm9wcztcbiAgfSwge30pO1xufVxuY29uc3QgQUxJR05fVkFMVUVTID0gWy4uLkFMSUdOTUVOVCwgJ2Jhc2VsaW5lJywgJ3N0cmV0Y2gnXTtcbmNvbnN0IGFsaWduVmFsaWRhdG9yID0gc3RyID0+IEFMSUdOX1ZBTFVFUy5pbmNsdWRlcyhzdHIpO1xuY29uc3QgYWxpZ25Qcm9wcyA9IG1ha2VSb3dQcm9wcygnYWxpZ24nLCAoKSA9PiAoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGRlZmF1bHQ6IG51bGwsXG4gIHZhbGlkYXRvcjogYWxpZ25WYWxpZGF0b3Jcbn0pKTtcbmNvbnN0IEpVU1RJRllfVkFMVUVTID0gWy4uLkFMSUdOTUVOVCwgLi4uU1BBQ0VdO1xuY29uc3QganVzdGlmeVZhbGlkYXRvciA9IHN0ciA9PiBKVVNUSUZZX1ZBTFVFUy5pbmNsdWRlcyhzdHIpO1xuY29uc3QganVzdGlmeVByb3BzID0gbWFrZVJvd1Byb3BzKCdqdXN0aWZ5JywgKCkgPT4gKHtcbiAgdHlwZTogU3RyaW5nLFxuICBkZWZhdWx0OiBudWxsLFxuICB2YWxpZGF0b3I6IGp1c3RpZnlWYWxpZGF0b3Jcbn0pKTtcbmNvbnN0IEFMSUdOX0NPTlRFTlRfVkFMVUVTID0gWy4uLkFMSUdOTUVOVCwgLi4uU1BBQ0UsICdzdHJldGNoJ107XG5jb25zdCBhbGlnbkNvbnRlbnRWYWxpZGF0b3IgPSBzdHIgPT4gQUxJR05fQ09OVEVOVF9WQUxVRVMuaW5jbHVkZXMoc3RyKTtcbmNvbnN0IGFsaWduQ29udGVudFByb3BzID0gbWFrZVJvd1Byb3BzKCdhbGlnbkNvbnRlbnQnLCAoKSA9PiAoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGRlZmF1bHQ6IG51bGwsXG4gIHZhbGlkYXRvcjogYWxpZ25Db250ZW50VmFsaWRhdG9yXG59KSk7XG5jb25zdCBwcm9wTWFwID0ge1xuICBhbGlnbjogT2JqZWN0LmtleXMoYWxpZ25Qcm9wcyksXG4gIGp1c3RpZnk6IE9iamVjdC5rZXlzKGp1c3RpZnlQcm9wcyksXG4gIGFsaWduQ29udGVudDogT2JqZWN0LmtleXMoYWxpZ25Db250ZW50UHJvcHMpXG59O1xuY29uc3QgY2xhc3NNYXAgPSB7XG4gIGFsaWduOiAnYWxpZ24nLFxuICBqdXN0aWZ5OiAnanVzdGlmeScsXG4gIGFsaWduQ29udGVudDogJ2FsaWduLWNvbnRlbnQnXG59O1xuZnVuY3Rpb24gYnJlYWtwb2ludENsYXNzKHR5cGUsIHByb3AsIHZhbCkge1xuICBsZXQgY2xhc3NOYW1lID0gY2xhc3NNYXBbdHlwZV07XG4gIGlmICh2YWwgPT0gbnVsbCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKHByb3ApIHtcbiAgICAvLyBhbGlnblNtIC0+IFNtXG4gICAgY29uc3QgYnJlYWtwb2ludCA9IHByb3AucmVwbGFjZSh0eXBlLCAnJyk7XG4gICAgY2xhc3NOYW1lICs9IGAtJHticmVha3BvaW50fWA7XG4gIH1cbiAgLy8gLmFsaWduLWl0ZW1zLXNtLWNlbnRlclxuICBjbGFzc05hbWUgKz0gYC0ke3ZhbH1gO1xuICByZXR1cm4gY2xhc3NOYW1lLnRvTG93ZXJDYXNlKCk7XG59XG5leHBvcnQgY29uc3QgbWFrZVZSb3dQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGRlbnNlOiBCb29sZWFuLFxuICBub0d1dHRlcnM6IEJvb2xlYW4sXG4gIGFsaWduOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgdmFsaWRhdG9yOiBhbGlnblZhbGlkYXRvclxuICB9LFxuICAuLi5hbGlnblByb3BzLFxuICBqdXN0aWZ5OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgdmFsaWRhdG9yOiBqdXN0aWZ5VmFsaWRhdG9yXG4gIH0sXG4gIC4uLmp1c3RpZnlQcm9wcyxcbiAgYWxpZ25Db250ZW50OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgdmFsaWRhdG9yOiBhbGlnbkNvbnRlbnRWYWxpZGF0b3JcbiAgfSxcbiAgLi4uYWxpZ25Db250ZW50UHJvcHMsXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKVxufSwgJ1ZSb3cnKTtcbmV4cG9ydCBjb25zdCBWUm93ID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZSb3cnLFxuICBwcm9wczogbWFrZVZSb3dQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBjbGFzc0xpc3QgPSBbXTtcblxuICAgICAgLy8gTG9vcCB0aHJvdWdoIGBhbGlnbmAsIGBqdXN0aWZ5YCwgYGFsaWduQ29udGVudGAgYnJlYWtwb2ludCBwcm9wc1xuICAgICAgbGV0IHR5cGU7XG4gICAgICBmb3IgKHR5cGUgaW4gcHJvcE1hcCkge1xuICAgICAgICBwcm9wTWFwW3R5cGVdLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBicmVha3BvaW50Q2xhc3ModHlwZSwgcHJvcCwgdmFsdWUpO1xuICAgICAgICAgIGlmIChjbGFzc05hbWUpIGNsYXNzTGlzdC5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgY2xhc3NMaXN0LnB1c2goe1xuICAgICAgICAndi1yb3ctLW5vLWd1dHRlcnMnOiBwcm9wcy5ub0d1dHRlcnMsXG4gICAgICAgICd2LXJvdy0tZGVuc2UnOiBwcm9wcy5kZW5zZSxcbiAgICAgICAgW2BhbGlnbi0ke3Byb3BzLmFsaWdufWBdOiBwcm9wcy5hbGlnbixcbiAgICAgICAgW2BqdXN0aWZ5LSR7cHJvcHMuanVzdGlmeX1gXTogcHJvcHMuanVzdGlmeSxcbiAgICAgICAgW2BhbGlnbi1jb250ZW50LSR7cHJvcHMuYWxpZ25Db250ZW50fWBdOiBwcm9wcy5hbGlnbkNvbnRlbnRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNsYXNzTGlzdDtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4gaChwcm9wcy50YWcsIHtcbiAgICAgIGNsYXNzOiBbJ3Ytcm93JywgY2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgc3R5bGU6IHByb3BzLnN0eWxlXG4gICAgfSwgc2xvdHMuZGVmYXVsdD8uKCkpO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZSb3cubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZTcGFjZXIgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LXNwYWNlcicsICdkaXYnLCAnVlNwYWNlcicpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlNwYWNlci5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VEZWxheVByb3BzLCB1c2VEZWxheSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWxheS5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZIb3ZlclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICAuLi5tYWtlRGVsYXlQcm9wcygpXG59LCAnVkhvdmVyJyk7XG5leHBvcnQgY29uc3QgVkhvdmVyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZIb3ZlcicsXG4gIHByb3BzOiBtYWtlVkhvdmVyUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWx1ZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgaXNIb3ZlcmluZyA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCB7XG4gICAgICBydW5PcGVuRGVsYXksXG4gICAgICBydW5DbG9zZURlbGF5XG4gICAgfSA9IHVzZURlbGF5KHByb3BzLCB2YWx1ZSA9PiAhcHJvcHMuZGlzYWJsZWQgJiYgKGlzSG92ZXJpbmcudmFsdWUgPSB2YWx1ZSkpO1xuICAgIHJldHVybiAoKSA9PiBzbG90cy5kZWZhdWx0Py4oe1xuICAgICAgaXNIb3ZlcmluZzogaXNIb3ZlcmluZy52YWx1ZSxcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIG9uTW91c2VlbnRlcjogcnVuT3BlbkRlbGF5LFxuICAgICAgICBvbk1vdXNlbGVhdmU6IHJ1bkNsb3NlRGVsYXlcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WSG92ZXIubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WSXRlbUdyb3VwLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VHcm91cFByb3BzLCB1c2VHcm91cCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ncm91cC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZJdGVtR3JvdXBTeW1ib2wgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5OnYtaXRlbS1ncm91cCcpO1xuZXhwb3J0IGNvbnN0IG1ha2VWSXRlbUdyb3VwUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUdyb3VwUHJvcHMoe1xuICAgIHNlbGVjdGVkQ2xhc3M6ICd2LWl0ZW0tLXNlbGVjdGVkJ1xuICB9KSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWSXRlbUdyb3VwJyk7XG5leHBvcnQgY29uc3QgVkl0ZW1Hcm91cCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWSXRlbUdyb3VwJyxcbiAgcHJvcHM6IG1ha2VWSXRlbUdyb3VwUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWx1ZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgaXNTZWxlY3RlZCxcbiAgICAgIHNlbGVjdCxcbiAgICAgIG5leHQsXG4gICAgICBwcmV2LFxuICAgICAgc2VsZWN0ZWRcbiAgICB9ID0gdXNlR3JvdXAocHJvcHMsIFZJdGVtR3JvdXBTeW1ib2wpO1xuICAgIHJldHVybiAoKSA9PiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1pdGVtLWdyb3VwJywgdGhlbWVDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmRlZmF1bHQ/Lih7XG4gICAgICAgIGlzU2VsZWN0ZWQsXG4gICAgICAgIHNlbGVjdCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgcHJldixcbiAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLnZhbHVlXG4gICAgICB9KV1cbiAgICB9KTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WSXRlbUdyb3VwLm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgVkl0ZW1Hcm91cFN5bWJvbCB9IGZyb20gXCIuL1ZJdGVtR3JvdXAubWpzXCI7XG5pbXBvcnQgeyBtYWtlR3JvdXBJdGVtUHJvcHMsIHVzZUdyb3VwSXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ncm91cC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgVkl0ZW0gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkl0ZW0nLFxuICBwcm9wczogbWFrZUdyb3VwSXRlbVByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ2dyb3VwOnNlbGVjdGVkJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBpc1NlbGVjdGVkLFxuICAgICAgc2VsZWN0LFxuICAgICAgdG9nZ2xlLFxuICAgICAgc2VsZWN0ZWRDbGFzcyxcbiAgICAgIHZhbHVlLFxuICAgICAgZGlzYWJsZWRcbiAgICB9ID0gdXNlR3JvdXBJdGVtKHByb3BzLCBWSXRlbUdyb3VwU3ltYm9sKTtcbiAgICByZXR1cm4gKCkgPT4gc2xvdHMuZGVmYXVsdD8uKHtcbiAgICAgIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQudmFsdWUsXG4gICAgICBzZWxlY3RlZENsYXNzOiBzZWxlY3RlZENsYXNzLnZhbHVlLFxuICAgICAgc2VsZWN0LFxuICAgICAgdG9nZ2xlLFxuICAgICAgdmFsdWU6IHZhbHVlLnZhbHVlLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLnZhbHVlXG4gICAgfSk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vkl0ZW0ubWpzLm1hcCIsIi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WS2JkLmNzc1wiO1xuXG4vLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBWS2JkID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1rYmQnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkxheW91dC5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBjcmVhdGVMYXlvdXQsIG1ha2VMYXlvdXRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sYXlvdXQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkxheW91dFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VMYXlvdXRQcm9wcygpXG59LCAnVkxheW91dCcpO1xuZXhwb3J0IGNvbnN0IFZMYXlvdXQgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkxheW91dCcsXG4gIHByb3BzOiBtYWtlVkxheW91dFByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgbGF5b3V0Q2xhc3NlcyxcbiAgICAgIGxheW91dFN0eWxlcyxcbiAgICAgIGdldExheW91dEl0ZW0sXG4gICAgICBpdGVtcyxcbiAgICAgIGxheW91dFJlZlxuICAgIH0gPSBjcmVhdGVMYXlvdXQocHJvcHMpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJyZWZcIjogbGF5b3V0UmVmLFxuICAgICAgXCJjbGFzc1wiOiBbbGF5b3V0Q2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBbbGF5b3V0U3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV1cbiAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKCldKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldExheW91dEl0ZW0sXG4gICAgICBpdGVtc1xuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkxheW91dC5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZMYXlvdXRJdGVtLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VMYXlvdXRJdGVtUHJvcHMsIHVzZUxheW91dEl0ZW0gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGF5b3V0Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkxheW91dEl0ZW1Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHBvc2l0aW9uOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmVkOiB0cnVlXG4gIH0sXG4gIHNpemU6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDMwMFxuICB9LFxuICBtb2RlbFZhbHVlOiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUxheW91dEl0ZW1Qcm9wcygpXG59LCAnVkxheW91dEl0ZW0nKTtcbmV4cG9ydCBjb25zdCBWTGF5b3V0SXRlbSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTGF5b3V0SXRlbScsXG4gIHByb3BzOiBtYWtlVkxheW91dEl0ZW1Qcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIGxheW91dEl0ZW1TdHlsZXNcbiAgICB9ID0gdXNlTGF5b3V0SXRlbSh7XG4gICAgICBpZDogcHJvcHMubmFtZSxcbiAgICAgIG9yZGVyOiBjb21wdXRlZCgoKSA9PiBwYXJzZUludChwcm9wcy5vcmRlciwgMTApKSxcbiAgICAgIHBvc2l0aW9uOiB0b1JlZihwcm9wcywgJ3Bvc2l0aW9uJyksXG4gICAgICBlbGVtZW50U2l6ZTogdG9SZWYocHJvcHMsICdzaXplJyksXG4gICAgICBsYXlvdXRTaXplOiB0b1JlZihwcm9wcywgJ3NpemUnKSxcbiAgICAgIGFjdGl2ZTogdG9SZWYocHJvcHMsICdtb2RlbFZhbHVlJyksXG4gICAgICBhYnNvbHV0ZTogdG9SZWYocHJvcHMsICdhYnNvbHV0ZScpXG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1sYXlvdXQtaXRlbScsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW2xheW91dEl0ZW1TdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXVxuICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKV0pO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZMYXlvdXRJdGVtLm1qcy5tYXAiLCJpbXBvcnQgeyB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURpbWVuc2lvblByb3BzLCB1c2VEaW1lbnNpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGltZW5zaW9ucy5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRyYW5zaXRpb25Qcm9wcywgTWF5YmVUcmFuc2l0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RyYW5zaXRpb24ubWpzXCI7IC8vIERpcmVjdGl2ZXNcbmltcG9ydCBpbnRlcnNlY3QgZnJvbSBcIi4uLy4uL2RpcmVjdGl2ZXMvaW50ZXJzZWN0L2luZGV4Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZMYXp5UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBtb2RlbFZhbHVlOiBCb29sZWFuLFxuICBvcHRpb25zOiB7XG4gICAgdHlwZTogT2JqZWN0LFxuICAgIC8vIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHR5cGVzLCBuYXZpZ2F0ZSB0bzpcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSW50ZXJzZWN0aW9uX09ic2VydmVyX0FQSVxuICAgIGRlZmF1bHQ6ICgpID0+ICh7XG4gICAgICByb290OiB1bmRlZmluZWQsXG4gICAgICByb290TWFyZ2luOiB1bmRlZmluZWQsXG4gICAgICB0aHJlc2hvbGQ6IHVuZGVmaW5lZFxuICAgIH0pXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGltZW5zaW9uUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUcmFuc2l0aW9uUHJvcHMoe1xuICAgIHRyYW5zaXRpb246ICdmYWRlLXRyYW5zaXRpb24nXG4gIH0pXG59LCAnVkxhenknKTtcbmV4cG9ydCBjb25zdCBWTGF6eSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTGF6eScsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICBpbnRlcnNlY3RcbiAgfSxcbiAgcHJvcHM6IG1ha2VWTGF6eVByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIGRpbWVuc2lvblN0eWxlc1xuICAgIH0gPSB1c2VEaW1lbnNpb24ocHJvcHMpO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGZ1bmN0aW9uIG9uSW50ZXJzZWN0KGlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICBpZiAoaXNBY3RpdmUudmFsdWUpIHJldHVybjtcbiAgICAgIGlzQWN0aXZlLnZhbHVlID0gaXNJbnRlcnNlY3Rpbmc7XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtbGF6eScsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW2RpbWVuc2lvblN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gW2lzQWN0aXZlLnZhbHVlICYmIF9jcmVhdGVWTm9kZShNYXliZVRyYW5zaXRpb24sIHtcbiAgICAgICAgXCJ0cmFuc2l0aW9uXCI6IHByb3BzLnRyYW5zaXRpb24sXG4gICAgICAgIFwiYXBwZWFyXCI6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmRlZmF1bHQ/LigpXVxuICAgICAgfSldXG4gICAgfSksIFtbX3Jlc29sdmVEaXJlY3RpdmUoXCJpbnRlcnNlY3RcIiksIHtcbiAgICAgIGhhbmRsZXI6IG9uSW50ZXJzZWN0LFxuICAgICAgb3B0aW9uczogcHJvcHMub3B0aW9uc1xuICAgIH0sIG51bGxdXSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTGF6eS5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZMb2NhbGVQcm92aWRlci5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBwcm92aWRlTG9jYWxlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWTG9jYWxlUHJvdmlkZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGxvY2FsZTogU3RyaW5nLFxuICBmYWxsYmFja0xvY2FsZTogU3RyaW5nLFxuICBtZXNzYWdlczogT2JqZWN0LFxuICBydGw6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKVxufSwgJ1ZMb2NhbGVQcm92aWRlcicpO1xuZXhwb3J0IGNvbnN0IFZMb2NhbGVQcm92aWRlciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTG9jYWxlUHJvdmlkZXInLFxuICBwcm9wczogbWFrZVZMb2NhbGVQcm92aWRlclByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgcnRsQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlTG9jYWxlKHByb3BzKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWxvY2FsZS1wcm92aWRlcicsIHJ0bENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKCldKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZMb2NhbGVQcm92aWRlci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZNYWluLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHVzZUxheW91dCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sYXlvdXQubWpzXCI7XG5pbXBvcnQgeyB1c2VTc3JCb290IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NzckJvb3QubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZNYWluUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBzY3JvbGxhYmxlOiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKHtcbiAgICB0YWc6ICdtYWluJ1xuICB9KVxufSwgJ1ZNYWluJyk7XG5leHBvcnQgY29uc3QgVk1haW4gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVk1haW4nLFxuICBwcm9wczogbWFrZVZNYWluUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBtYWluU3R5bGVzXG4gICAgfSA9IHVzZUxheW91dCgpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNzckJvb3RTdHlsZXNcbiAgICB9ID0gdXNlU3NyQm9vdCgpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1tYWluJywge1xuICAgICAgICAndi1tYWluLS1zY3JvbGxhYmxlJzogcHJvcHMuc2Nyb2xsYWJsZVxuICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBbbWFpblN0eWxlcy52YWx1ZSwgc3NyQm9vdFN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gW3Byb3BzLnNjcm9sbGFibGUgPyBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi1tYWluX19zY3JvbGxlclwiXG4gICAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKCldKSA6IHNsb3RzLmRlZmF1bHQ/LigpXVxuICAgIH0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vk1haW4ubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG9uQmVmb3JlVW5tb3VudCwgb25Nb3VudGVkLCBzaGFsbG93UmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RpY2t5KF9yZWYpIHtcbiAgbGV0IHtcbiAgICByb290RWwsXG4gICAgaXNTdGlja3ksXG4gICAgbGF5b3V0SXRlbVN0eWxlc1xuICB9ID0gX3JlZjtcbiAgY29uc3QgaXNTdHVjayA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICBjb25zdCBzdHVja1Bvc2l0aW9uID0gc2hhbGxvd1JlZigwKTtcbiAgY29uc3Qgc3RpY2t5U3R5bGVzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IHNpZGUgPSB0eXBlb2YgaXNTdHVjay52YWx1ZSA9PT0gJ2Jvb2xlYW4nID8gJ3RvcCcgOiBpc1N0dWNrLnZhbHVlO1xuICAgIHJldHVybiBbaXNTdGlja3kudmFsdWUgPyB7XG4gICAgICB0b3A6ICdhdXRvJyxcbiAgICAgIGJvdHRvbTogJ2F1dG8nLFxuICAgICAgaGVpZ2h0OiB1bmRlZmluZWRcbiAgICB9IDogdW5kZWZpbmVkLCBpc1N0dWNrLnZhbHVlID8ge1xuICAgICAgW3NpZGVdOiBjb252ZXJ0VG9Vbml0KHN0dWNrUG9zaXRpb24udmFsdWUpXG4gICAgfSA6IHtcbiAgICAgIHRvcDogbGF5b3V0SXRlbVN0eWxlcy52YWx1ZS50b3BcbiAgICB9XTtcbiAgfSk7XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgd2F0Y2goaXNTdGlja3ksIHZhbCA9PiB7XG4gICAgICBpZiAodmFsKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbCwge1xuICAgICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcbiAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwpO1xuICB9KTtcbiAgbGV0IGxhc3RTY3JvbGxUb3AgPSAwO1xuICBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgICBjb25zdCBkaXJlY3Rpb24gPSBsYXN0U2Nyb2xsVG9wID4gd2luZG93LnNjcm9sbFkgPyAndXAnIDogJ2Rvd24nO1xuICAgIGNvbnN0IHJlY3QgPSByb290RWwudmFsdWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgbGF5b3V0VG9wID0gcGFyc2VGbG9hdChsYXlvdXRJdGVtU3R5bGVzLnZhbHVlLnRvcCA/PyAwKTtcbiAgICBjb25zdCB0b3AgPSB3aW5kb3cuc2Nyb2xsWSAtIE1hdGgubWF4KDAsIHN0dWNrUG9zaXRpb24udmFsdWUgLSBsYXlvdXRUb3ApO1xuICAgIGNvbnN0IGJvdHRvbSA9IHJlY3QuaGVpZ2h0ICsgTWF0aC5tYXgoc3R1Y2tQb3NpdGlvbi52YWx1ZSwgbGF5b3V0VG9wKSAtIHdpbmRvdy5zY3JvbGxZIC0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIGNvbnN0IGJvZHlTY3JvbGwgPSBwYXJzZUZsb2F0KGdldENvbXB1dGVkU3R5bGUocm9vdEVsLnZhbHVlKS5nZXRQcm9wZXJ0eVZhbHVlKCctLXYtYm9keS1zY3JvbGwteScpKSB8fCAwO1xuICAgIGlmIChyZWN0LmhlaWdodCA8IHdpbmRvdy5pbm5lckhlaWdodCAtIGxheW91dFRvcCkge1xuICAgICAgaXNTdHVjay52YWx1ZSA9ICd0b3AnO1xuICAgICAgc3R1Y2tQb3NpdGlvbi52YWx1ZSA9IGxheW91dFRvcDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJyAmJiBpc1N0dWNrLnZhbHVlID09PSAnYm90dG9tJyB8fCBkaXJlY3Rpb24gPT09ICdkb3duJyAmJiBpc1N0dWNrLnZhbHVlID09PSAndG9wJykge1xuICAgICAgc3R1Y2tQb3NpdGlvbi52YWx1ZSA9IHdpbmRvdy5zY3JvbGxZICsgcmVjdC50b3AgLSBib2R5U2Nyb2xsO1xuICAgICAgaXNTdHVjay52YWx1ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkb3duJyAmJiBib3R0b20gPD0gMCkge1xuICAgICAgc3R1Y2tQb3NpdGlvbi52YWx1ZSA9IDA7XG4gICAgICBpc1N0dWNrLnZhbHVlID0gJ2JvdHRvbSc7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICd1cCcgJiYgdG9wIDw9IDApIHtcbiAgICAgIGlmICghYm9keVNjcm9sbCkge1xuICAgICAgICBzdHVja1Bvc2l0aW9uLnZhbHVlID0gcmVjdC50b3AgKyB0b3A7XG4gICAgICAgIGlzU3R1Y2sudmFsdWUgPSAndG9wJztcbiAgICAgIH0gZWxzZSBpZiAoaXNTdHVjay52YWx1ZSAhPT0gJ3RvcCcpIHtcbiAgICAgICAgc3R1Y2tQb3NpdGlvbi52YWx1ZSA9IC10b3AgKyBib2R5U2Nyb2xsICsgbGF5b3V0VG9wO1xuICAgICAgICBpc1N0dWNrLnZhbHVlID0gJ3RvcCc7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RTY3JvbGxUb3AgPSB3aW5kb3cuc2Nyb2xsWTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGlzU3R1Y2ssXG4gICAgc3RpY2t5U3R5bGVzXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGlja3kubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgQ2lyY3VsYXJCdWZmZXIgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjtcbmNvbnN0IEhPUklaT04gPSAxMDA7IC8vIG1zXG5jb25zdCBISVNUT1JZID0gMjA7IC8vIG51bWJlciBvZiBzYW1wbGVzIHRvIGtlZXBcblxuLyoqIEBzZWUgaHR0cHM6Ly9hbmRyb2lkLmdvb2dsZXNvdXJjZS5jb20vcGxhdGZvcm0vZnJhbWV3b3Jrcy9uYXRpdmUvKy9tYXN0ZXIvbGlicy9pbnB1dC9WZWxvY2l0eVRyYWNrZXIuY3BwICovXG5mdW5jdGlvbiBraW5ldGljRW5lcmd5VG9WZWxvY2l0eSh3b3JrKSB7XG4gIGNvbnN0IHNxcnQyID0gMS40MTQyMTM1NjIzNztcbiAgcmV0dXJuICh3b3JrIDwgMCA/IC0xLjAgOiAxLjApICogTWF0aC5zcXJ0KE1hdGguYWJzKHdvcmspKSAqIHNxcnQyO1xufVxuXG4vKipcbiAqIFJldHVybnMgcG9pbnRlciB2ZWxvY2l0eSBpbiBweC9zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVJbXB1bHNlVmVsb2NpdHkoc2FtcGxlcykge1xuICAvLyBUaGUgaW5wdXQgc2hvdWxkIGJlIGluIHJldmVyc2VkIHRpbWUgb3JkZXIgKG1vc3QgcmVjZW50IHNhbXBsZSBhdCBpbmRleCBpPTApXG4gIGlmIChzYW1wbGVzLmxlbmd0aCA8IDIpIHtcbiAgICAvLyBpZiAwIG9yIDEgcG9pbnRzLCB2ZWxvY2l0eSBpcyB6ZXJvXG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgLy8gaWYgKHNhbXBsZXNbMV0udCA+IHNhbXBsZXNbMF0udCkge1xuICAvLyAgIC8vIEFsZ29yaXRobSB3aWxsIHN0aWxsIHdvcmssIGJ1dCBub3QgcGVyZmVjdGx5XG4gIC8vICAgY29uc29sZVdhcm4oJ1NhbXBsZXMgcHJvdmlkZWQgdG8gY2FsY3VsYXRlSW1wdWxzZVZlbG9jaXR5IGluIHRoZSB3cm9uZyBvcmRlcicpXG4gIC8vIH1cbiAgaWYgKHNhbXBsZXMubGVuZ3RoID09PSAyKSB7XG4gICAgLy8gaWYgMiBwb2ludHMsIGJhc2ljIGxpbmVhciBjYWxjdWxhdGlvblxuICAgIGlmIChzYW1wbGVzWzFdLnQgPT09IHNhbXBsZXNbMF0udCkge1xuICAgICAgLy8gY29uc29sZVdhcm4oYEV2ZW50cyBoYXZlIGlkZW50aWNhbCB0aW1lIHN0YW1wcyB0PSR7c2FtcGxlc1swXS50fSwgc2V0dGluZyB2ZWxvY2l0eSA9IDBgKVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiAoc2FtcGxlc1sxXS5kIC0gc2FtcGxlc1swXS5kKSAvIChzYW1wbGVzWzFdLnQgLSBzYW1wbGVzWzBdLnQpO1xuICB9XG4gIC8vIEd1YXJhbnRlZWQgdG8gaGF2ZSBhdCBsZWFzdCAzIHBvaW50cyBoZXJlXG4gIC8vIHN0YXJ0IHdpdGggdGhlIG9sZGVzdCBzYW1wbGUgYW5kIGdvIGZvcndhcmQgaW4gdGltZVxuICBsZXQgd29yayA9IDA7XG4gIGZvciAobGV0IGkgPSBzYW1wbGVzLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICBpZiAoc2FtcGxlc1tpXS50ID09PSBzYW1wbGVzW2kgLSAxXS50KSB7XG4gICAgICAvLyBjb25zb2xlV2FybihgRXZlbnRzIGhhdmUgaWRlbnRpY2FsIHRpbWUgc3RhbXBzIHQ9JHtzYW1wbGVzW2ldLnR9LCBza2lwcGluZyBzYW1wbGVgKVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHZwcmV2ID0ga2luZXRpY0VuZXJneVRvVmVsb2NpdHkod29yayk7IC8vIHZbaS0xXVxuICAgIGNvbnN0IHZjdXJyID0gKHNhbXBsZXNbaV0uZCAtIHNhbXBsZXNbaSAtIDFdLmQpIC8gKHNhbXBsZXNbaV0udCAtIHNhbXBsZXNbaSAtIDFdLnQpOyAvLyB2W2ldXG4gICAgd29yayArPSAodmN1cnIgLSB2cHJldikgKiBNYXRoLmFicyh2Y3Vycik7XG4gICAgaWYgKGkgPT09IHNhbXBsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgd29yayAqPSAwLjU7XG4gICAgfVxuICB9XG4gIHJldHVybiBraW5ldGljRW5lcmd5VG9WZWxvY2l0eSh3b3JrKSAqIDEwMDA7XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlVmVsb2NpdHkoKSB7XG4gIGNvbnN0IHRvdWNoZXMgPSB7fTtcbiAgZnVuY3Rpb24gYWRkTW92ZW1lbnQoZSkge1xuICAgIEFycmF5LmZyb20oZS5jaGFuZ2VkVG91Y2hlcykuZm9yRWFjaCh0b3VjaCA9PiB7XG4gICAgICBjb25zdCBzYW1wbGVzID0gdG91Y2hlc1t0b3VjaC5pZGVudGlmaWVyXSA/PyAodG91Y2hlc1t0b3VjaC5pZGVudGlmaWVyXSA9IG5ldyBDaXJjdWxhckJ1ZmZlcihISVNUT1JZKSk7XG4gICAgICBzYW1wbGVzLnB1c2goW2UudGltZVN0YW1wLCB0b3VjaF0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGVuZFRvdWNoKGUpIHtcbiAgICBBcnJheS5mcm9tKGUuY2hhbmdlZFRvdWNoZXMpLmZvckVhY2godG91Y2ggPT4ge1xuICAgICAgZGVsZXRlIHRvdWNoZXNbdG91Y2guaWRlbnRpZmllcl07XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0VmVsb2NpdHkoaWQpIHtcbiAgICBjb25zdCBzYW1wbGVzID0gdG91Y2hlc1tpZF0/LnZhbHVlcygpLnJldmVyc2UoKTtcbiAgICBpZiAoIXNhbXBsZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gc2FtcGxlcyBmb3IgdG91Y2ggaWQgJHtpZH1gKTtcbiAgICB9XG4gICAgY29uc3QgbmV3ZXN0ID0gc2FtcGxlc1swXTtcbiAgICBjb25zdCB4ID0gW107XG4gICAgY29uc3QgeSA9IFtdO1xuICAgIGZvciAoY29uc3QgdmFsIG9mIHNhbXBsZXMpIHtcbiAgICAgIGlmIChuZXdlc3RbMF0gLSB2YWxbMF0gPiBIT1JJWk9OKSBicmVhaztcbiAgICAgIHgucHVzaCh7XG4gICAgICAgIHQ6IHZhbFswXSxcbiAgICAgICAgZDogdmFsWzFdLmNsaWVudFhcbiAgICAgIH0pO1xuICAgICAgeS5wdXNoKHtcbiAgICAgICAgdDogdmFsWzBdLFxuICAgICAgICBkOiB2YWxbMV0uY2xpZW50WVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB4OiBjYWxjdWxhdGVJbXB1bHNlVmVsb2NpdHkoeCksXG4gICAgICB5OiBjYWxjdWxhdGVJbXB1bHNlVmVsb2NpdHkoeSksXG4gICAgICBnZXQgZGlyZWN0aW9uKCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgeCxcbiAgICAgICAgICB5XG4gICAgICAgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBbYWJzWCwgYWJzWV0gPSBbTWF0aC5hYnMoeCksIE1hdGguYWJzKHkpXTtcbiAgICAgICAgcmV0dXJuIGFic1ggPiBhYnNZICYmIHggPj0gMCA/ICdyaWdodCcgOiBhYnNYID4gYWJzWSAmJiB4IDw9IDAgPyAnbGVmdCcgOiBhYnNZID4gYWJzWCAmJiB5ID49IDAgPyAnZG93bicgOiBhYnNZID4gYWJzWCAmJiB5IDw9IDAgPyAndXAnIDogb29wcygpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhZGRNb3ZlbWVudCxcbiAgICBlbmRUb3VjaCxcbiAgICBnZXRWZWxvY2l0eVxuICB9O1xufVxuZnVuY3Rpb24gb29wcygpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b3VjaC5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVZlbG9jaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RvdWNoLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBvbkJlZm9yZVVubW91bnQsIG9uTW91bnRlZCwgc2hhbGxvd1JlZiB9IGZyb20gJ3Z1ZSc7XG5cbi8vIFR5cGVzXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VUb3VjaChfcmVmKSB7XG4gIGxldCB7XG4gICAgaXNBY3RpdmUsXG4gICAgaXNUZW1wb3JhcnksXG4gICAgd2lkdGgsXG4gICAgdG91Y2hsZXNzLFxuICAgIHBvc2l0aW9uXG4gIH0gPSBfcmVmO1xuICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaHN0YXJ0LCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2htb3ZlLCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hlbmQsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG4gIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoc3RhcnQpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNobW92ZSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaGVuZCk7XG4gIH0pO1xuICBjb25zdCBpc0hvcml6b250YWwgPSBjb21wdXRlZCgoKSA9PiBbJ2xlZnQnLCAncmlnaHQnXS5pbmNsdWRlcyhwb3NpdGlvbi52YWx1ZSkpO1xuICBjb25zdCB7XG4gICAgYWRkTW92ZW1lbnQsXG4gICAgZW5kVG91Y2gsXG4gICAgZ2V0VmVsb2NpdHlcbiAgfSA9IHVzZVZlbG9jaXR5KCk7XG4gIGxldCBtYXliZURyYWdnaW5nID0gZmFsc2U7XG4gIGNvbnN0IGlzRHJhZ2dpbmcgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgY29uc3QgZHJhZ1Byb2dyZXNzID0gc2hhbGxvd1JlZigwKTtcbiAgY29uc3Qgb2Zmc2V0ID0gc2hhbGxvd1JlZigwKTtcbiAgbGV0IHN0YXJ0O1xuICBmdW5jdGlvbiBnZXRPZmZzZXQocG9zLCBhY3RpdmUpIHtcbiAgICByZXR1cm4gKHBvc2l0aW9uLnZhbHVlID09PSAnbGVmdCcgPyBwb3MgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ3JpZ2h0JyA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAtIHBvcyA6IHBvc2l0aW9uLnZhbHVlID09PSAndG9wJyA/IHBvcyA6IHBvc2l0aW9uLnZhbHVlID09PSAnYm90dG9tJyA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgLSBwb3MgOiBvb3BzKCkpIC0gKGFjdGl2ZSA/IHdpZHRoLnZhbHVlIDogMCk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UHJvZ3Jlc3MocG9zKSB7XG4gICAgbGV0IGxpbWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuICAgIGNvbnN0IHByb2dyZXNzID0gcG9zaXRpb24udmFsdWUgPT09ICdsZWZ0JyA/IChwb3MgLSBvZmZzZXQudmFsdWUpIC8gd2lkdGgudmFsdWUgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ3JpZ2h0JyA/IChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggLSBwb3MgLSBvZmZzZXQudmFsdWUpIC8gd2lkdGgudmFsdWUgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ3RvcCcgPyAocG9zIC0gb2Zmc2V0LnZhbHVlKSAvIHdpZHRoLnZhbHVlIDogcG9zaXRpb24udmFsdWUgPT09ICdib3R0b20nID8gKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgLSBwb3MgLSBvZmZzZXQudmFsdWUpIC8gd2lkdGgudmFsdWUgOiBvb3BzKCk7XG4gICAgcmV0dXJuIGxpbWl0ID8gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgcHJvZ3Jlc3MpKSA6IHByb2dyZXNzO1xuICB9XG4gIGZ1bmN0aW9uIG9uVG91Y2hzdGFydChlKSB7XG4gICAgaWYgKHRvdWNobGVzcy52YWx1ZSkgcmV0dXJuO1xuICAgIGNvbnN0IHRvdWNoWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICBjb25zdCB0b3VjaFkgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFk7XG4gICAgY29uc3QgdG91Y2hab25lID0gMjU7XG4gICAgY29uc3QgaW5Ub3VjaFpvbmUgPSBwb3NpdGlvbi52YWx1ZSA9PT0gJ2xlZnQnID8gdG91Y2hYIDwgdG91Y2hab25lIDogcG9zaXRpb24udmFsdWUgPT09ICdyaWdodCcgPyB0b3VjaFggPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggLSB0b3VjaFpvbmUgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ3RvcCcgPyB0b3VjaFkgPCB0b3VjaFpvbmUgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ2JvdHRvbScgPyB0b3VjaFkgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gdG91Y2hab25lIDogb29wcygpO1xuICAgIGNvbnN0IGluRWxlbWVudCA9IGlzQWN0aXZlLnZhbHVlICYmIChwb3NpdGlvbi52YWx1ZSA9PT0gJ2xlZnQnID8gdG91Y2hYIDwgd2lkdGgudmFsdWUgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ3JpZ2h0JyA/IHRvdWNoWCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAtIHdpZHRoLnZhbHVlIDogcG9zaXRpb24udmFsdWUgPT09ICd0b3AnID8gdG91Y2hZIDwgd2lkdGgudmFsdWUgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ2JvdHRvbScgPyB0b3VjaFkgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gd2lkdGgudmFsdWUgOiBvb3BzKCkpO1xuICAgIGlmIChpblRvdWNoWm9uZSB8fCBpbkVsZW1lbnQgfHwgaXNBY3RpdmUudmFsdWUgJiYgaXNUZW1wb3JhcnkudmFsdWUpIHtcbiAgICAgIG1heWJlRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgc3RhcnQgPSBbdG91Y2hYLCB0b3VjaFldO1xuICAgICAgb2Zmc2V0LnZhbHVlID0gZ2V0T2Zmc2V0KGlzSG9yaXpvbnRhbC52YWx1ZSA/IHRvdWNoWCA6IHRvdWNoWSwgaXNBY3RpdmUudmFsdWUpO1xuICAgICAgZHJhZ1Byb2dyZXNzLnZhbHVlID0gZ2V0UHJvZ3Jlc3MoaXNIb3Jpem9udGFsLnZhbHVlID8gdG91Y2hYIDogdG91Y2hZKTtcbiAgICAgIGVuZFRvdWNoKGUpO1xuICAgICAgYWRkTW92ZW1lbnQoZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uVG91Y2htb3ZlKGUpIHtcbiAgICBjb25zdCB0b3VjaFggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFg7XG4gICAgY29uc3QgdG91Y2hZID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZO1xuICAgIGlmIChtYXliZURyYWdnaW5nKSB7XG4gICAgICBpZiAoIWUuY2FuY2VsYWJsZSkge1xuICAgICAgICBtYXliZURyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGR4ID0gTWF0aC5hYnModG91Y2hYIC0gc3RhcnRbMF0pO1xuICAgICAgY29uc3QgZHkgPSBNYXRoLmFicyh0b3VjaFkgLSBzdGFydFsxXSk7XG4gICAgICBjb25zdCB0aHJlc2hvbGRNZXQgPSBpc0hvcml6b250YWwudmFsdWUgPyBkeCA+IGR5ICYmIGR4ID4gMyA6IGR5ID4gZHggJiYgZHkgPiAzO1xuICAgICAgaWYgKHRocmVzaG9sZE1ldCkge1xuICAgICAgICBpc0RyYWdnaW5nLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgbWF5YmVEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICgoaXNIb3Jpem9udGFsLnZhbHVlID8gZHkgOiBkeCkgPiAzKSB7XG4gICAgICAgIG1heWJlRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc0RyYWdnaW5nLnZhbHVlKSByZXR1cm47XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGFkZE1vdmVtZW50KGUpO1xuICAgIGNvbnN0IHByb2dyZXNzID0gZ2V0UHJvZ3Jlc3MoaXNIb3Jpem9udGFsLnZhbHVlID8gdG91Y2hYIDogdG91Y2hZLCBmYWxzZSk7XG4gICAgZHJhZ1Byb2dyZXNzLnZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgcHJvZ3Jlc3MpKTtcbiAgICBpZiAocHJvZ3Jlc3MgPiAxKSB7XG4gICAgICBvZmZzZXQudmFsdWUgPSBnZXRPZmZzZXQoaXNIb3Jpem9udGFsLnZhbHVlID8gdG91Y2hYIDogdG91Y2hZLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHByb2dyZXNzIDwgMCkge1xuICAgICAgb2Zmc2V0LnZhbHVlID0gZ2V0T2Zmc2V0KGlzSG9yaXpvbnRhbC52YWx1ZSA/IHRvdWNoWCA6IHRvdWNoWSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvblRvdWNoZW5kKGUpIHtcbiAgICBtYXliZURyYWdnaW5nID0gZmFsc2U7XG4gICAgaWYgKCFpc0RyYWdnaW5nLnZhbHVlKSByZXR1cm47XG4gICAgYWRkTW92ZW1lbnQoZSk7XG4gICAgaXNEcmFnZ2luZy52YWx1ZSA9IGZhbHNlO1xuICAgIGNvbnN0IHZlbG9jaXR5ID0gZ2V0VmVsb2NpdHkoZS5jaGFuZ2VkVG91Y2hlc1swXS5pZGVudGlmaWVyKTtcbiAgICBjb25zdCB2eCA9IE1hdGguYWJzKHZlbG9jaXR5LngpO1xuICAgIGNvbnN0IHZ5ID0gTWF0aC5hYnModmVsb2NpdHkueSk7XG4gICAgY29uc3QgdGhyZXNob2xkTWV0ID0gaXNIb3Jpem9udGFsLnZhbHVlID8gdnggPiB2eSAmJiB2eCA+IDQwMCA6IHZ5ID4gdnggJiYgdnkgPiAzO1xuICAgIGlmICh0aHJlc2hvbGRNZXQpIHtcbiAgICAgIGlzQWN0aXZlLnZhbHVlID0gdmVsb2NpdHkuZGlyZWN0aW9uID09PSAoe1xuICAgICAgICBsZWZ0OiAncmlnaHQnLFxuICAgICAgICByaWdodDogJ2xlZnQnLFxuICAgICAgICB0b3A6ICdkb3duJyxcbiAgICAgICAgYm90dG9tOiAndXAnXG4gICAgICB9W3Bvc2l0aW9uLnZhbHVlXSB8fCBvb3BzKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpc0FjdGl2ZS52YWx1ZSA9IGRyYWdQcm9ncmVzcy52YWx1ZSA+IDAuNTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZHJhZ1N0eWxlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gaXNEcmFnZ2luZy52YWx1ZSA/IHtcbiAgICAgIHRyYW5zZm9ybTogcG9zaXRpb24udmFsdWUgPT09ICdsZWZ0JyA/IGB0cmFuc2xhdGVYKGNhbGMoLTEwMCUgKyAke2RyYWdQcm9ncmVzcy52YWx1ZSAqIHdpZHRoLnZhbHVlfXB4KSlgIDogcG9zaXRpb24udmFsdWUgPT09ICdyaWdodCcgPyBgdHJhbnNsYXRlWChjYWxjKDEwMCUgLSAke2RyYWdQcm9ncmVzcy52YWx1ZSAqIHdpZHRoLnZhbHVlfXB4KSlgIDogcG9zaXRpb24udmFsdWUgPT09ICd0b3AnID8gYHRyYW5zbGF0ZVkoY2FsYygtMTAwJSArICR7ZHJhZ1Byb2dyZXNzLnZhbHVlICogd2lkdGgudmFsdWV9cHgpKWAgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ2JvdHRvbScgPyBgdHJhbnNsYXRlWShjYWxjKDEwMCUgLSAke2RyYWdQcm9ncmVzcy52YWx1ZSAqIHdpZHRoLnZhbHVlfXB4KSlgIDogb29wcygpLFxuICAgICAgdHJhbnNpdGlvbjogJ25vbmUnXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgaXNEcmFnZ2luZyxcbiAgICBkcmFnUHJvZ3Jlc3MsXG4gICAgZHJhZ1N0eWxlc1xuICB9O1xufVxuZnVuY3Rpb24gb29wcygpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b3VjaC5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVk5hdmlnYXRpb25EcmF3ZXIuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VTdGlja3kgfSBmcm9tIFwiLi9zdGlja3kubWpzXCI7XG5pbXBvcnQgeyB1c2VUb3VjaCB9IGZyb20gXCIuL3RvdWNoLm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUJvcmRlclByb3BzLCB1c2VCb3JkZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvYm9yZGVyLm1qc1wiO1xuaW1wb3J0IHsgdXNlQmFja2dyb3VuZENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjtcbmltcG9ydCB7IHVzZURpc3BsYXkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGlzcGxheS5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VMYXlvdXRJdGVtUHJvcHMsIHVzZUxheW91dEl0ZW0gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGF5b3V0Lm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3V0ZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VTY29wZUlkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Njb3BlSWQubWpzXCI7XG5pbXBvcnQgeyB1c2VTc3JCb290IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NzckJvb3QubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgbmV4dFRpY2ssIG9uQmVmb3JlTW91bnQsIHJlZiwgc2hhbGxvd1JlZiwgdG9SZWYsIFRyYW5zaXRpb24sIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdG9QaHlzaWNhbCwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5jb25zdCBsb2NhdGlvbnMgPSBbJ3N0YXJ0JywgJ2VuZCcsICdsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXTtcbmV4cG9ydCBjb25zdCBtYWtlVk5hdmlnYXRpb25EcmF3ZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbG9yOiBTdHJpbmcsXG4gIGRpc2FibGVSZXNpemVXYXRjaGVyOiBCb29sZWFuLFxuICBkaXNhYmxlUm91dGVXYXRjaGVyOiBCb29sZWFuLFxuICBleHBhbmRPbkhvdmVyOiBCb29sZWFuLFxuICBmbG9hdGluZzogQm9vbGVhbixcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICBwZXJtYW5lbnQ6IEJvb2xlYW4sXG4gIHJhaWw6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgcmFpbFdpZHRoOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiA1NlxuICB9LFxuICBzY3JpbToge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgaW1hZ2U6IFN0cmluZyxcbiAgdGVtcG9yYXJ5OiBCb29sZWFuLFxuICB0b3VjaGxlc3M6IEJvb2xlYW4sXG4gIHdpZHRoOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAyNTZcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ3N0YXJ0JyxcbiAgICB2YWxpZGF0b3I6IHZhbHVlID0+IGxvY2F0aW9ucy5pbmNsdWRlcyh2YWx1ZSlcbiAgfSxcbiAgc3RpY2t5OiBCb29sZWFuLFxuICAuLi5tYWtlQm9yZGVyUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlTGF5b3V0SXRlbVByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKHtcbiAgICB0YWc6ICduYXYnXG4gIH0pLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpXG59LCAnVk5hdmlnYXRpb25EcmF3ZXInKTtcbmV4cG9ydCBjb25zdCBWTmF2aWdhdGlvbkRyYXdlciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTmF2aWdhdGlvbkRyYXdlcicsXG4gIHByb3BzOiBtYWtlVk5hdmlnYXRpb25EcmF3ZXJQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbCA9PiB0cnVlLFxuICAgICd1cGRhdGU6cmFpbCc6IHZhbCA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGF0dHJzLFxuICAgICAgZW1pdCxcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgaXNSdGxcbiAgICB9ID0gdXNlUnRsKCk7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgYm9yZGVyQ2xhc3Nlc1xuICAgIH0gPSB1c2VCb3JkZXIocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHRvUmVmKHByb3BzLCAnY29sb3InKSk7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIG1vYmlsZVxuICAgIH0gPSB1c2VEaXNwbGF5KCk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJywgbnVsbCwgdiA9PiAhIXYpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNzckJvb3RTdHlsZXNcbiAgICB9ID0gdXNlU3NyQm9vdCgpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjb3BlSWRcbiAgICB9ID0gdXNlU2NvcGVJZCgpO1xuICAgIGNvbnN0IHJvb3RFbCA9IHJlZigpO1xuICAgIGNvbnN0IGlzSG92ZXJpbmcgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgICBjb25zdCB3aWR0aCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5yYWlsICYmIHByb3BzLmV4cGFuZE9uSG92ZXIgJiYgaXNIb3ZlcmluZy52YWx1ZSA/IE51bWJlcihwcm9wcy53aWR0aCkgOiBOdW1iZXIocHJvcHMucmFpbCA/IHByb3BzLnJhaWxXaWR0aCA6IHByb3BzLndpZHRoKTtcbiAgICB9KTtcbiAgICBjb25zdCBsb2NhdGlvbiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiB0b1BoeXNpY2FsKHByb3BzLmxvY2F0aW9uLCBpc1J0bC52YWx1ZSk7XG4gICAgfSk7XG4gICAgY29uc3QgaXNUZW1wb3JhcnkgPSBjb21wdXRlZCgoKSA9PiAhcHJvcHMucGVybWFuZW50ICYmIChtb2JpbGUudmFsdWUgfHwgcHJvcHMudGVtcG9yYXJ5KSk7XG4gICAgY29uc3QgaXNTdGlja3kgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5zdGlja3kgJiYgIWlzVGVtcG9yYXJ5LnZhbHVlICYmIGxvY2F0aW9uLnZhbHVlICE9PSAnYm90dG9tJyk7XG4gICAgaWYgKHByb3BzLmV4cGFuZE9uSG92ZXIgJiYgcHJvcHMucmFpbCAhPSBudWxsKSB7XG4gICAgICB3YXRjaChpc0hvdmVyaW5nLCB2YWwgPT4gZW1pdCgndXBkYXRlOnJhaWwnLCAhdmFsKSk7XG4gICAgfVxuICAgIGlmICghcHJvcHMuZGlzYWJsZVJlc2l6ZVdhdGNoZXIpIHtcbiAgICAgIHdhdGNoKGlzVGVtcG9yYXJ5LCB2YWwgPT4gIXByb3BzLnBlcm1hbmVudCAmJiBuZXh0VGljaygoKSA9PiBpc0FjdGl2ZS52YWx1ZSA9ICF2YWwpKTtcbiAgICB9XG4gICAgaWYgKCFwcm9wcy5kaXNhYmxlUm91dGVXYXRjaGVyICYmIHJvdXRlcikge1xuICAgICAgd2F0Y2gocm91dGVyLmN1cnJlbnRSb3V0ZSwgKCkgPT4gaXNUZW1wb3JhcnkudmFsdWUgJiYgKGlzQWN0aXZlLnZhbHVlID0gZmFsc2UpKTtcbiAgICB9XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMucGVybWFuZW50LCB2YWwgPT4ge1xuICAgICAgaWYgKHZhbCkgaXNBY3RpdmUudmFsdWUgPSB0cnVlO1xuICAgIH0pO1xuICAgIG9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLm1vZGVsVmFsdWUgIT0gbnVsbCB8fCBpc1RlbXBvcmFyeS52YWx1ZSkgcmV0dXJuO1xuICAgICAgaXNBY3RpdmUudmFsdWUgPSBwcm9wcy5wZXJtYW5lbnQgfHwgIW1vYmlsZS52YWx1ZTtcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBpc0RyYWdnaW5nLFxuICAgICAgZHJhZ1Byb2dyZXNzLFxuICAgICAgZHJhZ1N0eWxlc1xuICAgIH0gPSB1c2VUb3VjaCh7XG4gICAgICBpc0FjdGl2ZSxcbiAgICAgIGlzVGVtcG9yYXJ5LFxuICAgICAgd2lkdGgsXG4gICAgICB0b3VjaGxlc3M6IHRvUmVmKHByb3BzLCAndG91Y2hsZXNzJyksXG4gICAgICBwb3NpdGlvbjogbG9jYXRpb25cbiAgICB9KTtcbiAgICBjb25zdCBsYXlvdXRTaXplID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3Qgc2l6ZSA9IGlzVGVtcG9yYXJ5LnZhbHVlID8gMCA6IHByb3BzLnJhaWwgJiYgcHJvcHMuZXhwYW5kT25Ib3ZlciA/IE51bWJlcihwcm9wcy5yYWlsV2lkdGgpIDogd2lkdGgudmFsdWU7XG4gICAgICByZXR1cm4gaXNEcmFnZ2luZy52YWx1ZSA/IHNpemUgKiBkcmFnUHJvZ3Jlc3MudmFsdWUgOiBzaXplO1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGxheW91dEl0ZW1TdHlsZXMsXG4gICAgICBsYXlvdXRJdGVtU2NyaW1TdHlsZXNcbiAgICB9ID0gdXNlTGF5b3V0SXRlbSh7XG4gICAgICBpZDogcHJvcHMubmFtZSxcbiAgICAgIG9yZGVyOiBjb21wdXRlZCgoKSA9PiBwYXJzZUludChwcm9wcy5vcmRlciwgMTApKSxcbiAgICAgIHBvc2l0aW9uOiBsb2NhdGlvbixcbiAgICAgIGxheW91dFNpemUsXG4gICAgICBlbGVtZW50U2l6ZTogd2lkdGgsXG4gICAgICBhY3RpdmU6IGNvbXB1dGVkKCgpID0+IGlzQWN0aXZlLnZhbHVlIHx8IGlzRHJhZ2dpbmcudmFsdWUpLFxuICAgICAgZGlzYWJsZVRyYW5zaXRpb25zOiBjb21wdXRlZCgoKSA9PiBpc0RyYWdnaW5nLnZhbHVlKSxcbiAgICAgIGFic29sdXRlOiBjb21wdXRlZCgoKSA9PlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgcHJvcHMuYWJzb2x1dGUgfHwgaXNTdGlja3kudmFsdWUgJiYgdHlwZW9mIGlzU3R1Y2sudmFsdWUgIT09ICdzdHJpbmcnKVxuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzU3R1Y2ssXG4gICAgICBzdGlja3lTdHlsZXNcbiAgICB9ID0gdXNlU3RpY2t5KHtcbiAgICAgIHJvb3RFbCxcbiAgICAgIGlzU3RpY2t5LFxuICAgICAgbGF5b3V0SXRlbVN0eWxlc1xuICAgIH0pO1xuICAgIGNvbnN0IHNjcmltQ29sb3IgPSB1c2VCYWNrZ3JvdW5kQ29sb3IoY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHR5cGVvZiBwcm9wcy5zY3JpbSA9PT0gJ3N0cmluZycgPyBwcm9wcy5zY3JpbSA6IG51bGw7XG4gICAgfSkpO1xuICAgIGNvbnN0IHNjcmltU3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIC4uLihpc0RyYWdnaW5nLnZhbHVlID8ge1xuICAgICAgICBvcGFjaXR5OiBkcmFnUHJvZ3Jlc3MudmFsdWUgKiAwLjIsXG4gICAgICAgIHRyYW5zaXRpb246ICdub25lJ1xuICAgICAgfSA6IHVuZGVmaW5lZCksXG4gICAgICAuLi5sYXlvdXRJdGVtU2NyaW1TdHlsZXMudmFsdWVcbiAgICB9KSk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZMaXN0OiB7XG4gICAgICAgIGJnQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBvbk1vdXNlZW50ZXIoKSB7XG4gICAgICBpc0hvdmVyaW5nLnZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Nb3VzZWxlYXZlKCkge1xuICAgICAgaXNIb3ZlcmluZy52YWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaGFzSW1hZ2UgPSBzbG90cy5pbWFnZSB8fCBwcm9wcy5pbWFnZTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywgX21lcmdlUHJvcHMoe1xuICAgICAgICBcInJlZlwiOiByb290RWwsXG4gICAgICAgIFwib25Nb3VzZWVudGVyXCI6IG9uTW91c2VlbnRlcixcbiAgICAgICAgXCJvbk1vdXNlbGVhdmVcIjogb25Nb3VzZWxlYXZlLFxuICAgICAgICBcImNsYXNzXCI6IFsndi1uYXZpZ2F0aW9uLWRyYXdlcicsIGB2LW5hdmlnYXRpb24tZHJhd2VyLS0ke2xvY2F0aW9uLnZhbHVlfWAsIHtcbiAgICAgICAgICAndi1uYXZpZ2F0aW9uLWRyYXdlci0tZXhwYW5kLW9uLWhvdmVyJzogcHJvcHMuZXhwYW5kT25Ib3ZlcixcbiAgICAgICAgICAndi1uYXZpZ2F0aW9uLWRyYXdlci0tZmxvYXRpbmcnOiBwcm9wcy5mbG9hdGluZyxcbiAgICAgICAgICAndi1uYXZpZ2F0aW9uLWRyYXdlci0taXMtaG92ZXJpbmcnOiBpc0hvdmVyaW5nLnZhbHVlLFxuICAgICAgICAgICd2LW5hdmlnYXRpb24tZHJhd2VyLS1yYWlsJzogcHJvcHMucmFpbCxcbiAgICAgICAgICAndi1uYXZpZ2F0aW9uLWRyYXdlci0tdGVtcG9yYXJ5JzogaXNUZW1wb3JhcnkudmFsdWUsXG4gICAgICAgICAgJ3YtbmF2aWdhdGlvbi1kcmF3ZXItLWFjdGl2ZSc6IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICAgICd2LW5hdmlnYXRpb24tZHJhd2VyLS1zdGlja3knOiBpc1N0aWNreS52YWx1ZVxuICAgICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIGJvcmRlckNsYXNzZXMudmFsdWUsIGVsZXZhdGlvbkNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW2JhY2tncm91bmRDb2xvclN0eWxlcy52YWx1ZSwgbGF5b3V0SXRlbVN0eWxlcy52YWx1ZSwgZHJhZ1N0eWxlcy52YWx1ZSwgc3NyQm9vdFN0eWxlcy52YWx1ZSwgc3RpY2t5U3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV1cbiAgICAgIH0sIHNjb3BlSWQsIGF0dHJzKSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbaGFzSW1hZ2UgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImltYWdlXCIsXG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtbmF2aWdhdGlvbi1kcmF3ZXJfX2ltZ1wiXG4gICAgICAgIH0sIFtzbG90cy5pbWFnZSA/IHNsb3RzLmltYWdlPy4oe1xuICAgICAgICAgIGltYWdlOiBwcm9wcy5pbWFnZVxuICAgICAgICB9KSA6IF9jcmVhdGVWTm9kZShcImltZ1wiLCB7XG4gICAgICAgICAgXCJzcmNcIjogcHJvcHMuaW1hZ2UsXG4gICAgICAgICAgXCJhbHRcIjogXCJcIlxuICAgICAgICB9LCBudWxsKV0pLCBzbG90cy5wcmVwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtbmF2aWdhdGlvbi1kcmF3ZXJfX3ByZXBlbmRcIlxuICAgICAgICB9LCBbc2xvdHMucHJlcGVuZD8uKCldKSwgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1uYXZpZ2F0aW9uLWRyYXdlcl9fY29udGVudFwiXG4gICAgICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKV0pLCBzbG90cy5hcHBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1uYXZpZ2F0aW9uLWRyYXdlcl9fYXBwZW5kXCJcbiAgICAgICAgfSwgW3Nsb3RzLmFwcGVuZD8uKCldKV1cbiAgICAgIH0pLCBfY3JlYXRlVk5vZGUoVHJhbnNpdGlvbiwge1xuICAgICAgICBcIm5hbWVcIjogXCJmYWRlLXRyYW5zaXRpb25cIlxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbaXNUZW1wb3JhcnkudmFsdWUgJiYgKGlzRHJhZ2dpbmcudmFsdWUgfHwgaXNBY3RpdmUudmFsdWUpICYmICEhcHJvcHMuc2NyaW0gJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICBcImNsYXNzXCI6IFsndi1uYXZpZ2F0aW9uLWRyYXdlcl9fc2NyaW0nLCBzY3JpbUNvbG9yLmJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgICAgIFwic3R5bGVcIjogW3NjcmltU3R5bGVzLnZhbHVlLCBzY3JpbUNvbG9yLmJhY2tncm91bmRDb2xvclN0eWxlcy52YWx1ZV0sXG4gICAgICAgICAgXCJvbkNsaWNrXCI6ICgpID0+IGlzQWN0aXZlLnZhbHVlID0gZmFsc2VcbiAgICAgICAgfSwgc2NvcGVJZCksIG51bGwpXVxuICAgICAgfSldKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgaXNTdHVja1xuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vk5hdmlnYXRpb25EcmF3ZXIubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VIeWRyYXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaHlkcmF0aW9uLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZOb1NzciA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdWTm9Tc3InLFxuICBzZXR1cChfLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qgc2hvdyA9IHVzZUh5ZHJhdGlvbigpO1xuICAgIHJldHVybiAoKSA9PiBzaG93LnZhbHVlICYmIHNsb3RzLmRlZmF1bHQ/LigpO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZOb1Nzci5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBvbkJlZm9yZVVwZGF0ZSwgcmVmIH0gZnJvbSAndnVlJztcblxuLy8gVHlwZXNcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZnMoKSB7XG4gIGNvbnN0IHJlZnMgPSByZWYoW10pO1xuICBvbkJlZm9yZVVwZGF0ZSgoKSA9PiByZWZzLnZhbHVlID0gW10pO1xuICBmdW5jdGlvbiB1cGRhdGVSZWYoZSwgaSkge1xuICAgIHJlZnMudmFsdWVbaV0gPSBlO1xuICB9XG4gIHJldHVybiB7XG4gICAgcmVmcyxcbiAgICB1cGRhdGVSZWZcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZnMubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcyB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WUGFnaW5hdGlvbi5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkJ0biB9IGZyb20gXCIuLi9WQnRuL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlRGlzcGxheSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pbmRleC5tanNcIjtcbmltcG9ydCB7IG1ha2VCb3JkZXJQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ib3JkZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiO1xuaW1wb3J0IHsgbWFrZURlbnNpdHlQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZW5zaXR5Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUVsZXZhdGlvblByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IEljb25WYWx1ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IHVzZUxvY2FsZSwgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7XG5pbXBvcnQgeyB1c2VSZWZzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JlZnMubWpzXCI7XG5pbXBvcnQgeyB1c2VSZXNpemVPYnNlcnZlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yZXNpemVPYnNlcnZlci5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VTaXplUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc2l6ZS5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZhcmlhbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy92YXJpYW50Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBuZXh0VGljaywgc2hhbGxvd1JlZiwgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY3JlYXRlUmFuZ2UsIGdlbmVyaWNDb21wb25lbnQsIGtleVZhbHVlcywgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVlBhZ2luYXRpb25Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGFjdGl2ZUNvbG9yOiBTdHJpbmcsXG4gIHN0YXJ0OiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAxXG4gIH0sXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogcHJvcHMgPT4gcHJvcHMuc3RhcnRcbiAgfSxcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIGxlbmd0aDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMSxcbiAgICB2YWxpZGF0b3I6IHZhbCA9PiB2YWwgJSAxID09PSAwXG4gIH0sXG4gIHRvdGFsVmlzaWJsZTogW051bWJlciwgU3RyaW5nXSxcbiAgZmlyc3RJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckZmlyc3QnXG4gIH0sXG4gIHByZXZJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckcHJldidcbiAgfSxcbiAgbmV4dEljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRuZXh0J1xuICB9LFxuICBsYXN0SWNvbjoge1xuICAgIHR5cGU6IEljb25WYWx1ZSxcbiAgICBkZWZhdWx0OiAnJGxhc3QnXG4gIH0sXG4gIGFyaWFMYWJlbDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkucGFnaW5hdGlvbi5hcmlhTGFiZWwucm9vdCdcbiAgfSxcbiAgcGFnZUFyaWFMYWJlbDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkucGFnaW5hdGlvbi5hcmlhTGFiZWwucGFnZSdcbiAgfSxcbiAgY3VycmVudFBhZ2VBcmlhTGFiZWw6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJyR2dWV0aWZ5LnBhZ2luYXRpb24uYXJpYUxhYmVsLmN1cnJlbnRQYWdlJ1xuICB9LFxuICBmaXJzdEFyaWFMYWJlbDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkucGFnaW5hdGlvbi5hcmlhTGFiZWwuZmlyc3QnXG4gIH0sXG4gIHByZXZpb3VzQXJpYUxhYmVsOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICckdnVldGlmeS5wYWdpbmF0aW9uLmFyaWFMYWJlbC5wcmV2aW91cydcbiAgfSxcbiAgbmV4dEFyaWFMYWJlbDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkucGFnaW5hdGlvbi5hcmlhTGFiZWwubmV4dCdcbiAgfSxcbiAgbGFzdEFyaWFMYWJlbDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkucGFnaW5hdGlvbi5hcmlhTGFiZWwubGFzdCdcbiAgfSxcbiAgZWxsaXBzaXM6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJy4uLidcbiAgfSxcbiAgc2hvd0ZpcnN0TGFzdFBhZ2U6IEJvb2xlYW4sXG4gIC4uLm1ha2VCb3JkZXJQcm9wcygpLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURlbnNpdHlQcm9wcygpLFxuICAuLi5tYWtlRWxldmF0aW9uUHJvcHMoKSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlU2l6ZVByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcyh7XG4gICAgdGFnOiAnbmF2J1xuICB9KSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKSxcbiAgLi4ubWFrZVZhcmlhbnRQcm9wcyh7XG4gICAgdmFyaWFudDogJ3RleHQnXG4gIH0pXG59LCAnVlBhZ2luYXRpb24nKTtcbmV4cG9ydCBjb25zdCBWUGFnaW5hdGlvbiA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWUGFnaW5hdGlvbicsXG4gIHByb3BzOiBtYWtlVlBhZ2luYXRpb25Qcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWUsXG4gICAgZmlyc3Q6IHZhbHVlID0+IHRydWUsXG4gICAgcHJldjogdmFsdWUgPT4gdHJ1ZSxcbiAgICBuZXh0OiB2YWx1ZSA9PiB0cnVlLFxuICAgIGxhc3Q6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHMsXG4gICAgICBlbWl0XG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgcGFnZSA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCB7XG4gICAgICB0LFxuICAgICAgblxuICAgIH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCB7XG4gICAgICBpc1J0bFxuICAgIH0gPSB1c2VSdGwoKTtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICB3aWR0aFxuICAgIH0gPSB1c2VEaXNwbGF5KCk7XG4gICAgY29uc3QgbWF4QnV0dG9ucyA9IHNoYWxsb3dSZWYoLTEpO1xuICAgIHByb3ZpZGVEZWZhdWx0cyh1bmRlZmluZWQsIHtcbiAgICAgIHNjb3BlZDogdHJ1ZVxuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIHJlc2l6ZVJlZlxuICAgIH0gPSB1c2VSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgIGlmICghZW50cmllcy5sZW5ndGgpIHJldHVybjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBjb250ZW50UmVjdFxuICAgICAgfSA9IGVudHJpZXNbMF07XG4gICAgICBjb25zdCBmaXJzdEl0ZW0gPSB0YXJnZXQucXVlcnlTZWxlY3RvcignLnYtcGFnaW5hdGlvbl9fbGlzdCA+IConKTtcbiAgICAgIGlmICghZmlyc3RJdGVtKSByZXR1cm47XG4gICAgICBjb25zdCB0b3RhbFdpZHRoID0gY29udGVudFJlY3Qud2lkdGg7XG4gICAgICBjb25zdCBpdGVtV2lkdGggPSBmaXJzdEl0ZW0ub2Zmc2V0V2lkdGggKyBwYXJzZUZsb2F0KGdldENvbXB1dGVkU3R5bGUoZmlyc3RJdGVtKS5tYXJnaW5SaWdodCkgKiAyO1xuICAgICAgbWF4QnV0dG9ucy52YWx1ZSA9IGdldE1heCh0b3RhbFdpZHRoLCBpdGVtV2lkdGgpO1xuICAgIH0pO1xuICAgIGNvbnN0IGxlbmd0aCA9IGNvbXB1dGVkKCgpID0+IHBhcnNlSW50KHByb3BzLmxlbmd0aCwgMTApKTtcbiAgICBjb25zdCBzdGFydCA9IGNvbXB1dGVkKCgpID0+IHBhcnNlSW50KHByb3BzLnN0YXJ0LCAxMCkpO1xuICAgIGNvbnN0IHRvdGFsVmlzaWJsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy50b3RhbFZpc2libGUpIHJldHVybiBwYXJzZUludChwcm9wcy50b3RhbFZpc2libGUsIDEwKTtlbHNlIGlmIChtYXhCdXR0b25zLnZhbHVlID49IDApIHJldHVybiBtYXhCdXR0b25zLnZhbHVlO1xuICAgICAgcmV0dXJuIGdldE1heCh3aWR0aC52YWx1ZSwgNTgpO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGdldE1heCh0b3RhbFdpZHRoLCBpdGVtV2lkdGgpIHtcbiAgICAgIGNvbnN0IG1pbkJ1dHRvbnMgPSBwcm9wcy5zaG93Rmlyc3RMYXN0UGFnZSA/IDUgOiAzO1xuICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGguZmxvb3IoXG4gICAgICAvLyBSb3VuZCB0byB0d28gZGVjaW1hbCBwbGFjZXMgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzXG4gICAgICArKCh0b3RhbFdpZHRoIC0gaXRlbVdpZHRoICogbWluQnV0dG9ucykgLyBpdGVtV2lkdGgpLnRvRml4ZWQoMikpKTtcbiAgICB9XG4gICAgY29uc3QgcmFuZ2UgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAobGVuZ3RoLnZhbHVlIDw9IDAgfHwgaXNOYU4obGVuZ3RoLnZhbHVlKSB8fCBsZW5ndGgudmFsdWUgPiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikgcmV0dXJuIFtdO1xuICAgICAgaWYgKHRvdGFsVmlzaWJsZS52YWx1ZSA8PSAxKSByZXR1cm4gW3BhZ2UudmFsdWVdO1xuICAgICAgaWYgKGxlbmd0aC52YWx1ZSA8PSB0b3RhbFZpc2libGUudmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJhbmdlKGxlbmd0aC52YWx1ZSwgc3RhcnQudmFsdWUpO1xuICAgICAgfVxuICAgICAgY29uc3QgZXZlbiA9IHRvdGFsVmlzaWJsZS52YWx1ZSAlIDIgPT09IDA7XG4gICAgICBjb25zdCBtaWRkbGUgPSBldmVuID8gdG90YWxWaXNpYmxlLnZhbHVlIC8gMiA6IE1hdGguZmxvb3IodG90YWxWaXNpYmxlLnZhbHVlIC8gMik7XG4gICAgICBjb25zdCBsZWZ0ID0gZXZlbiA/IG1pZGRsZSA6IG1pZGRsZSArIDE7XG4gICAgICBjb25zdCByaWdodCA9IGxlbmd0aC52YWx1ZSAtIG1pZGRsZTtcbiAgICAgIGlmIChsZWZ0IC0gcGFnZS52YWx1ZSA+PSAwKSB7XG4gICAgICAgIHJldHVybiBbLi4uY3JlYXRlUmFuZ2UoTWF0aC5tYXgoMSwgdG90YWxWaXNpYmxlLnZhbHVlIC0gMSksIHN0YXJ0LnZhbHVlKSwgcHJvcHMuZWxsaXBzaXMsIGxlbmd0aC52YWx1ZV07XG4gICAgICB9IGVsc2UgaWYgKHBhZ2UudmFsdWUgLSByaWdodCA+PSAoZXZlbiA/IDEgOiAwKSkge1xuICAgICAgICBjb25zdCByYW5nZUxlbmd0aCA9IHRvdGFsVmlzaWJsZS52YWx1ZSAtIDE7XG4gICAgICAgIGNvbnN0IHJhbmdlU3RhcnQgPSBsZW5ndGgudmFsdWUgLSByYW5nZUxlbmd0aCArIHN0YXJ0LnZhbHVlO1xuICAgICAgICByZXR1cm4gW3N0YXJ0LnZhbHVlLCBwcm9wcy5lbGxpcHNpcywgLi4uY3JlYXRlUmFuZ2UocmFuZ2VMZW5ndGgsIHJhbmdlU3RhcnQpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJhbmdlTGVuZ3RoID0gTWF0aC5tYXgoMSwgdG90YWxWaXNpYmxlLnZhbHVlIC0gMyk7XG4gICAgICAgIGNvbnN0IHJhbmdlU3RhcnQgPSByYW5nZUxlbmd0aCA9PT0gMSA/IHBhZ2UudmFsdWUgOiBwYWdlLnZhbHVlIC0gTWF0aC5jZWlsKHJhbmdlTGVuZ3RoIC8gMikgKyBzdGFydC52YWx1ZTtcbiAgICAgICAgcmV0dXJuIFtzdGFydC52YWx1ZSwgcHJvcHMuZWxsaXBzaXMsIC4uLmNyZWF0ZVJhbmdlKHJhbmdlTGVuZ3RoLCByYW5nZVN0YXJ0KSwgcHJvcHMuZWxsaXBzaXMsIGxlbmd0aC52YWx1ZV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBUT0RPOiAnZmlyc3QnIHwgJ3ByZXYnIHwgJ25leHQnIHwgJ2xhc3QnIGRvZXMgbm90IHdvcmsgaGVyZT9cbiAgICBmdW5jdGlvbiBzZXRWYWx1ZShlLCB2YWx1ZSwgZXZlbnQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHBhZ2UudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGV2ZW50ICYmIGVtaXQoZXZlbnQsIHZhbHVlKTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgcmVmcyxcbiAgICAgIHVwZGF0ZVJlZlxuICAgIH0gPSB1c2VSZWZzKCk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZQYWdpbmF0aW9uQnRuOiB7XG4gICAgICAgIGNvbG9yOiB0b1JlZihwcm9wcywgJ2NvbG9yJyksXG4gICAgICAgIGJvcmRlcjogdG9SZWYocHJvcHMsICdib3JkZXInKSxcbiAgICAgICAgZGVuc2l0eTogdG9SZWYocHJvcHMsICdkZW5zaXR5JyksXG4gICAgICAgIHNpemU6IHRvUmVmKHByb3BzLCAnc2l6ZScpLFxuICAgICAgICB2YXJpYW50OiB0b1JlZihwcm9wcywgJ3ZhcmlhbnQnKSxcbiAgICAgICAgcm91bmRlZDogdG9SZWYocHJvcHMsICdyb3VuZGVkJyksXG4gICAgICAgIGVsZXZhdGlvbjogdG9SZWYocHJvcHMsICdlbGV2YXRpb24nKVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGl0ZW1zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHJhbmdlLnZhbHVlLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgcmVmID0gZSA9PiB1cGRhdGVSZWYoZSwgaW5kZXgpO1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGtleTogYGVsbGlwc2lzLSR7aW5kZXh9YCxcbiAgICAgICAgICAgIHBhZ2U6IGl0ZW0sXG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICByZWYsXG4gICAgICAgICAgICAgIGVsbGlwc2lzOiB0cnVlLFxuICAgICAgICAgICAgICBpY29uOiB0cnVlLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgaXNBY3RpdmUgPSBpdGVtID09PSBwYWdlLnZhbHVlO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0FjdGl2ZSxcbiAgICAgICAgICAgIGtleTogaXRlbSxcbiAgICAgICAgICAgIHBhZ2U6IG4oaXRlbSksXG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICByZWYsXG4gICAgICAgICAgICAgIGVsbGlwc2lzOiBmYWxzZSxcbiAgICAgICAgICAgICAgaWNvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgZGlzYWJsZWQ6ICEhcHJvcHMuZGlzYWJsZWQgfHwgK3Byb3BzLmxlbmd0aCA8IDIsXG4gICAgICAgICAgICAgIGNvbG9yOiBpc0FjdGl2ZSA/IHByb3BzLmFjdGl2ZUNvbG9yIDogcHJvcHMuY29sb3IsXG4gICAgICAgICAgICAgIGFyaWFDdXJyZW50OiBpc0FjdGl2ZSxcbiAgICAgICAgICAgICAgYXJpYUxhYmVsOiB0KGlzQWN0aXZlID8gcHJvcHMuY3VycmVudFBhZ2VBcmlhTGFiZWwgOiBwcm9wcy5wYWdlQXJpYUxhYmVsLCBpdGVtKSxcbiAgICAgICAgICAgICAgb25DbGljazogZSA9PiBzZXRWYWx1ZShlLCBpdGVtKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbnRyb2xzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgcHJldkRpc2FibGVkID0gISFwcm9wcy5kaXNhYmxlZCB8fCBwYWdlLnZhbHVlIDw9IHN0YXJ0LnZhbHVlO1xuICAgICAgY29uc3QgbmV4dERpc2FibGVkID0gISFwcm9wcy5kaXNhYmxlZCB8fCBwYWdlLnZhbHVlID49IHN0YXJ0LnZhbHVlICsgbGVuZ3RoLnZhbHVlIC0gMTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpcnN0OiBwcm9wcy5zaG93Rmlyc3RMYXN0UGFnZSA/IHtcbiAgICAgICAgICBpY29uOiBpc1J0bC52YWx1ZSA/IHByb3BzLmxhc3RJY29uIDogcHJvcHMuZmlyc3RJY29uLFxuICAgICAgICAgIG9uQ2xpY2s6IGUgPT4gc2V0VmFsdWUoZSwgc3RhcnQudmFsdWUsICdmaXJzdCcpLFxuICAgICAgICAgIGRpc2FibGVkOiBwcmV2RGlzYWJsZWQsXG4gICAgICAgICAgYXJpYUxhYmVsOiB0KHByb3BzLmZpcnN0QXJpYUxhYmVsKSxcbiAgICAgICAgICBhcmlhRGlzYWJsZWQ6IHByZXZEaXNhYmxlZFxuICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICBwcmV2OiB7XG4gICAgICAgICAgaWNvbjogaXNSdGwudmFsdWUgPyBwcm9wcy5uZXh0SWNvbiA6IHByb3BzLnByZXZJY29uLFxuICAgICAgICAgIG9uQ2xpY2s6IGUgPT4gc2V0VmFsdWUoZSwgcGFnZS52YWx1ZSAtIDEsICdwcmV2JyksXG4gICAgICAgICAgZGlzYWJsZWQ6IHByZXZEaXNhYmxlZCxcbiAgICAgICAgICBhcmlhTGFiZWw6IHQocHJvcHMucHJldmlvdXNBcmlhTGFiZWwpLFxuICAgICAgICAgIGFyaWFEaXNhYmxlZDogcHJldkRpc2FibGVkXG4gICAgICAgIH0sXG4gICAgICAgIG5leHQ6IHtcbiAgICAgICAgICBpY29uOiBpc1J0bC52YWx1ZSA/IHByb3BzLnByZXZJY29uIDogcHJvcHMubmV4dEljb24sXG4gICAgICAgICAgb25DbGljazogZSA9PiBzZXRWYWx1ZShlLCBwYWdlLnZhbHVlICsgMSwgJ25leHQnKSxcbiAgICAgICAgICBkaXNhYmxlZDogbmV4dERpc2FibGVkLFxuICAgICAgICAgIGFyaWFMYWJlbDogdChwcm9wcy5uZXh0QXJpYUxhYmVsKSxcbiAgICAgICAgICBhcmlhRGlzYWJsZWQ6IG5leHREaXNhYmxlZFxuICAgICAgICB9LFxuICAgICAgICBsYXN0OiBwcm9wcy5zaG93Rmlyc3RMYXN0UGFnZSA/IHtcbiAgICAgICAgICBpY29uOiBpc1J0bC52YWx1ZSA/IHByb3BzLmZpcnN0SWNvbiA6IHByb3BzLmxhc3RJY29uLFxuICAgICAgICAgIG9uQ2xpY2s6IGUgPT4gc2V0VmFsdWUoZSwgc3RhcnQudmFsdWUgKyBsZW5ndGgudmFsdWUgLSAxLCAnbGFzdCcpLFxuICAgICAgICAgIGRpc2FibGVkOiBuZXh0RGlzYWJsZWQsXG4gICAgICAgICAgYXJpYUxhYmVsOiB0KHByb3BzLmxhc3RBcmlhTGFiZWwpLFxuICAgICAgICAgIGFyaWFEaXNhYmxlZDogbmV4dERpc2FibGVkXG4gICAgICAgIH0gOiB1bmRlZmluZWRcbiAgICAgIH07XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gdXBkYXRlRm9jdXMoKSB7XG4gICAgICBjb25zdCBjdXJyZW50SW5kZXggPSBwYWdlLnZhbHVlIC0gc3RhcnQudmFsdWU7XG4gICAgICByZWZzLnZhbHVlW2N1cnJlbnRJbmRleF0/LiRlbC5mb2N1cygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbktleWRvd24oZSkge1xuICAgICAgaWYgKGUua2V5ID09PSBrZXlWYWx1ZXMubGVmdCAmJiAhcHJvcHMuZGlzYWJsZWQgJiYgcGFnZS52YWx1ZSA+ICtwcm9wcy5zdGFydCkge1xuICAgICAgICBwYWdlLnZhbHVlID0gcGFnZS52YWx1ZSAtIDE7XG4gICAgICAgIG5leHRUaWNrKHVwZGF0ZUZvY3VzKTtcbiAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09IGtleVZhbHVlcy5yaWdodCAmJiAhcHJvcHMuZGlzYWJsZWQgJiYgcGFnZS52YWx1ZSA8IHN0YXJ0LnZhbHVlICsgbGVuZ3RoLnZhbHVlIC0gMSkge1xuICAgICAgICBwYWdlLnZhbHVlID0gcGFnZS52YWx1ZSArIDE7XG4gICAgICAgIG5leHRUaWNrKHVwZGF0ZUZvY3VzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgIFwicmVmXCI6IHJlc2l6ZVJlZixcbiAgICAgIFwiY2xhc3NcIjogWyd2LXBhZ2luYXRpb24nLCB0aGVtZUNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGUsXG4gICAgICBcInJvbGVcIjogXCJuYXZpZ2F0aW9uXCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogdChwcm9wcy5hcmlhTGFiZWwpLFxuICAgICAgXCJvbktleWRvd25cIjogb25LZXlkb3duLFxuICAgICAgXCJkYXRhLXRlc3RcIjogXCJ2LXBhZ2luYXRpb24tcm9vdFwiXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShcInVsXCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtcGFnaW5hdGlvbl9fbGlzdFwiXG4gICAgICB9LCBbcHJvcHMuc2hvd0ZpcnN0TGFzdFBhZ2UgJiYgX2NyZWF0ZVZOb2RlKFwibGlcIiwge1xuICAgICAgICBcImtleVwiOiBcImZpcnN0XCIsXG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LXBhZ2luYXRpb25fX2ZpcnN0XCIsXG4gICAgICAgIFwiZGF0YS10ZXN0XCI6IFwidi1wYWdpbmF0aW9uLWZpcnN0XCJcbiAgICAgIH0sIFtzbG90cy5maXJzdCA/IHNsb3RzLmZpcnN0KGNvbnRyb2xzLnZhbHVlLmZpcnN0KSA6IF9jcmVhdGVWTm9kZShWQnRuLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwiX2FzXCI6IFwiVlBhZ2luYXRpb25CdG5cIlxuICAgICAgfSwgY29udHJvbHMudmFsdWUuZmlyc3QpLCBudWxsKV0pLCBfY3JlYXRlVk5vZGUoXCJsaVwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwicHJldlwiLFxuICAgICAgICBcImNsYXNzXCI6IFwidi1wYWdpbmF0aW9uX19wcmV2XCIsXG4gICAgICAgIFwiZGF0YS10ZXN0XCI6IFwidi1wYWdpbmF0aW9uLXByZXZcIlxuICAgICAgfSwgW3Nsb3RzLnByZXYgPyBzbG90cy5wcmV2KGNvbnRyb2xzLnZhbHVlLnByZXYpIDogX2NyZWF0ZVZOb2RlKFZCdG4sIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJfYXNcIjogXCJWUGFnaW5hdGlvbkJ0blwiXG4gICAgICB9LCBjb250cm9scy52YWx1ZS5wcmV2KSwgbnVsbCldKSwgaXRlbXMudmFsdWUubWFwKChpdGVtLCBpbmRleCkgPT4gX2NyZWF0ZVZOb2RlKFwibGlcIiwge1xuICAgICAgICBcImtleVwiOiBpdGVtLmtleSxcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtcGFnaW5hdGlvbl9faXRlbScsIHtcbiAgICAgICAgICAndi1wYWdpbmF0aW9uX19pdGVtLS1pcy1hY3RpdmUnOiBpdGVtLmlzQWN0aXZlXG4gICAgICAgIH1dLFxuICAgICAgICBcImRhdGEtdGVzdFwiOiBcInYtcGFnaW5hdGlvbi1pdGVtXCJcbiAgICAgIH0sIFtzbG90cy5pdGVtID8gc2xvdHMuaXRlbShpdGVtKSA6IF9jcmVhdGVWTm9kZShWQnRuLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwiX2FzXCI6IFwiVlBhZ2luYXRpb25CdG5cIlxuICAgICAgfSwgaXRlbS5wcm9wcyksIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW2l0ZW0ucGFnZV1cbiAgICAgIH0pXSkpLCBfY3JlYXRlVk5vZGUoXCJsaVwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwibmV4dFwiLFxuICAgICAgICBcImNsYXNzXCI6IFwidi1wYWdpbmF0aW9uX19uZXh0XCIsXG4gICAgICAgIFwiZGF0YS10ZXN0XCI6IFwidi1wYWdpbmF0aW9uLW5leHRcIlxuICAgICAgfSwgW3Nsb3RzLm5leHQgPyBzbG90cy5uZXh0KGNvbnRyb2xzLnZhbHVlLm5leHQpIDogX2NyZWF0ZVZOb2RlKFZCdG4sIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJfYXNcIjogXCJWUGFnaW5hdGlvbkJ0blwiXG4gICAgICB9LCBjb250cm9scy52YWx1ZS5uZXh0KSwgbnVsbCldKSwgcHJvcHMuc2hvd0ZpcnN0TGFzdFBhZ2UgJiYgX2NyZWF0ZVZOb2RlKFwibGlcIiwge1xuICAgICAgICBcImtleVwiOiBcImxhc3RcIixcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtcGFnaW5hdGlvbl9fbGFzdFwiLFxuICAgICAgICBcImRhdGEtdGVzdFwiOiBcInYtcGFnaW5hdGlvbi1sYXN0XCJcbiAgICAgIH0sIFtzbG90cy5sYXN0ID8gc2xvdHMubGFzdChjb250cm9scy52YWx1ZS5sYXN0KSA6IF9jcmVhdGVWTm9kZShWQnRuLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwiX2FzXCI6IFwiVlBhZ2luYXRpb25CdG5cIlxuICAgICAgfSwgY29udHJvbHMudmFsdWUubGFzdCksIG51bGwpXSldKV1cbiAgICB9KSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZQYWdpbmF0aW9uLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlBhcmFsbGF4LmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWSW1nIH0gZnJvbSBcIi4uL1ZJbWcvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VEaXNwbGF5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHVzZUludGVyc2VjdGlvbk9ic2VydmVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ludGVyc2VjdGlvbk9ic2VydmVyLm1qc1wiO1xuaW1wb3J0IHsgdXNlUmVzaXplT2JzZXJ2ZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcmVzaXplT2JzZXJ2ZXIubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG9uQmVmb3JlVW5tb3VudCwgcmVmLCB3YXRjaCwgd2F0Y2hFZmZlY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY2xhbXAsIGdlbmVyaWNDb21wb25lbnQsIGdldFNjcm9sbFBhcmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmZ1bmN0aW9uIGZsb29yKHZhbCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLmFicyh2YWwpKSAqIE1hdGguc2lnbih2YWwpO1xufVxuZXhwb3J0IGNvbnN0IG1ha2VWUGFyYWxsYXhQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHNjYWxlOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAwLjVcbiAgfSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKClcbn0sICdWUGFyYWxsYXgnKTtcbmV4cG9ydCBjb25zdCBWUGFyYWxsYXggPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlBhcmFsbGF4JyxcbiAgcHJvcHM6IG1ha2VWUGFyYWxsYXhQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIGludGVyc2VjdGlvblJlZixcbiAgICAgIGlzSW50ZXJzZWN0aW5nXG4gICAgfSA9IHVzZUludGVyc2VjdGlvbk9ic2VydmVyKCk7XG4gICAgY29uc3Qge1xuICAgICAgcmVzaXplUmVmLFxuICAgICAgY29udGVudFJlY3RcbiAgICB9ID0gdXNlUmVzaXplT2JzZXJ2ZXIoKTtcbiAgICBjb25zdCB7XG4gICAgICBoZWlnaHQ6IGRpc3BsYXlIZWlnaHRcbiAgICB9ID0gdXNlRGlzcGxheSgpO1xuICAgIGNvbnN0IHJvb3QgPSByZWYoKTtcbiAgICB3YXRjaEVmZmVjdCgoKSA9PiB7XG4gICAgICBpbnRlcnNlY3Rpb25SZWYudmFsdWUgPSByZXNpemVSZWYudmFsdWUgPSByb290LnZhbHVlPy4kZWw7XG4gICAgfSk7XG4gICAgbGV0IHNjcm9sbFBhcmVudDtcbiAgICB3YXRjaChpc0ludGVyc2VjdGluZywgdmFsID0+IHtcbiAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGludGVyc2VjdGlvblJlZi52YWx1ZSk7XG4gICAgICAgIHNjcm9sbFBhcmVudCA9IHNjcm9sbFBhcmVudCA9PT0gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCA/IGRvY3VtZW50IDogc2Nyb2xsUGFyZW50O1xuICAgICAgICBzY3JvbGxQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwsIHtcbiAgICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBvblNjcm9sbCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Nyb2xsUGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgc2Nyb2xsUGFyZW50Py5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbCk7XG4gICAgfSk7XG4gICAgd2F0Y2goZGlzcGxheUhlaWdodCwgb25TY3JvbGwpO1xuICAgIHdhdGNoKCgpID0+IGNvbnRlbnRSZWN0LnZhbHVlPy5oZWlnaHQsIG9uU2Nyb2xsKTtcbiAgICBjb25zdCBzY2FsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiAxIC0gY2xhbXAoK3Byb3BzLnNjYWxlKTtcbiAgICB9KTtcbiAgICBsZXQgZnJhbWUgPSAtMTtcbiAgICBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgICAgIGlmICghaXNJbnRlcnNlY3RpbmcudmFsdWUpIHJldHVybjtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGZyYW1lKTtcbiAgICAgIGZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgY29uc3QgZWwgPSAocm9vdC52YWx1ZT8uJGVsKS5xdWVyeVNlbGVjdG9yKCcudi1pbWdfX2ltZycpO1xuICAgICAgICBpZiAoIWVsKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHNjcm9sbEhlaWdodCA9IHNjcm9sbFBhcmVudCBpbnN0YW5jZW9mIERvY3VtZW50ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCA6IHNjcm9sbFBhcmVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIGNvbnN0IHNjcm9sbFBvcyA9IHNjcm9sbFBhcmVudCBpbnN0YW5jZW9mIERvY3VtZW50ID8gd2luZG93LnNjcm9sbFkgOiBzY3JvbGxQYXJlbnQuc2Nyb2xsVG9wO1xuICAgICAgICBjb25zdCB0b3AgPSBpbnRlcnNlY3Rpb25SZWYudmFsdWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgc2Nyb2xsUG9zO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBjb250ZW50UmVjdC52YWx1ZS5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRvcCArIChoZWlnaHQgLSBzY3JvbGxIZWlnaHQpIC8gMjtcbiAgICAgICAgY29uc3QgdHJhbnNsYXRlID0gZmxvb3IoKHNjcm9sbFBvcyAtIGNlbnRlcikgKiBzY2FsZS52YWx1ZSk7XG4gICAgICAgIGNvbnN0IHNpemVTY2FsZSA9IE1hdGgubWF4KDEsIChzY2FsZS52YWx1ZSAqIChzY3JvbGxIZWlnaHQgLSBoZWlnaHQpICsgaGVpZ2h0KSAvIGhlaWdodCk7XG4gICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlWSgke3RyYW5zbGF0ZX1weCkgc2NhbGUoJHtzaXplU2NhbGV9KWApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoVkltZywge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtcGFyYWxsYXgnLCB7XG4gICAgICAgICd2LXBhcmFsbGF4LS1hY3RpdmUnOiBpc0ludGVyc2VjdGluZy52YWx1ZVxuICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZSxcbiAgICAgIFwicmVmXCI6IHJvb3QsXG4gICAgICBcImNvdmVyXCI6IHRydWUsXG4gICAgICBcIm9uTG9hZHN0YXJ0XCI6IG9uU2Nyb2xsLFxuICAgICAgXCJvbkxvYWRcIjogb25TY3JvbGxcbiAgICB9LCBzbG90cykpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WUGFyYWxsYXgubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IG1ha2VWU2VsZWN0aW9uQ29udHJvbFByb3BzLCBWU2VsZWN0aW9uQ29udHJvbCB9IGZyb20gXCIuLi9WU2VsZWN0aW9uQ29udHJvbC9WU2VsZWN0aW9uQ29udHJvbC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWUmFkaW9Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC4uLm1ha2VWU2VsZWN0aW9uQ29udHJvbFByb3BzKHtcbiAgICBmYWxzZUljb246ICckcmFkaW9PZmYnLFxuICAgIHRydWVJY29uOiAnJHJhZGlvT24nXG4gIH0pXG59LCAnVlJhZGlvJyk7XG5leHBvcnQgY29uc3QgVlJhZGlvID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZSYWRpbycsXG4gIHByb3BzOiBtYWtlVlJhZGlvUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFZTZWxlY3Rpb25Db250cm9sLCBfbWVyZ2VQcm9wcyhwcm9wcywge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtcmFkaW8nLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlLFxuICAgICAgXCJ0eXBlXCI6IFwicmFkaW9cIlxuICAgIH0pLCBzbG90cykpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WUmFkaW8ubWpzLm1hcCIsImltcG9ydCB7IG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50IH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZSYWRpb0dyb3VwLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBtYWtlVklucHV0UHJvcHMsIFZJbnB1dCB9IGZyb20gXCIuLi9WSW5wdXQvVklucHV0Lm1qc1wiO1xuaW1wb3J0IHsgVkxhYmVsIH0gZnJvbSBcIi4uL1ZMYWJlbC9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZTZWxlY3Rpb25Db250cm9sIH0gZnJvbSBcIi4uL1ZTZWxlY3Rpb25Db250cm9sL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNlbGVjdGlvbkNvbnRyb2xHcm91cFByb3BzLCBWU2VsZWN0aW9uQ29udHJvbEdyb3VwIH0gZnJvbSBcIi4uL1ZTZWxlY3Rpb25Db250cm9sR3JvdXAvVlNlbGVjdGlvbkNvbnRyb2xHcm91cC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IEljb25WYWx1ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZmlsdGVySW5wdXRBdHRycywgZ2VuZXJpY0NvbXBvbmVudCwgZ2V0VWlkLCBvbWl0LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWUmFkaW9Hcm91cFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgaGVpZ2h0OiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAnYXV0bydcbiAgfSxcbiAgLi4ubWFrZVZJbnB1dFByb3BzKCksXG4gIC4uLm9taXQobWFrZVNlbGVjdGlvbkNvbnRyb2xHcm91cFByb3BzKCksIFsnbXVsdGlwbGUnXSksXG4gIHRydWVJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckcmFkaW9PbidcbiAgfSxcbiAgZmFsc2VJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckcmFkaW9PZmYnXG4gIH0sXG4gIHR5cGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ3JhZGlvJ1xuICB9XG59LCAnVlJhZGlvR3JvdXAnKTtcbmV4cG9ydCBjb25zdCBWUmFkaW9Hcm91cCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWUmFkaW9Hcm91cCcsXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiBtYWtlVlJhZGlvR3JvdXBQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbCA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGF0dHJzLFxuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB1aWQgPSBnZXRVaWQoKTtcbiAgICBjb25zdCBpZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmlkIHx8IGByYWRpby1ncm91cC0ke3VpZH1gKTtcbiAgICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgW3Jvb3RBdHRycywgY29udHJvbEF0dHJzXSA9IGZpbHRlcklucHV0QXR0cnMoYXR0cnMpO1xuICAgICAgY29uc3QgW2lucHV0UHJvcHMsIF8xXSA9IFZJbnB1dC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICBjb25zdCBbY29udHJvbFByb3BzLCBfMl0gPSBWU2VsZWN0aW9uQ29udHJvbC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICBjb25zdCBsYWJlbCA9IHNsb3RzLmxhYmVsID8gc2xvdHMubGFiZWwoe1xuICAgICAgICBsYWJlbDogcHJvcHMubGFiZWwsXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgZm9yOiBpZC52YWx1ZVxuICAgICAgICB9XG4gICAgICB9KSA6IHByb3BzLmxhYmVsO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWSW5wdXQsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtcmFkaW8tZ3JvdXAnLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIHJvb3RBdHRycywgaW5wdXRQcm9wcywge1xuICAgICAgICBcIm1vZGVsVmFsdWVcIjogbW9kZWwudmFsdWUsXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gbW9kZWwudmFsdWUgPSAkZXZlbnQsXG4gICAgICAgIFwiaWRcIjogaWQudmFsdWVcbiAgICAgIH0pLCB7XG4gICAgICAgIC4uLnNsb3RzLFxuICAgICAgICBkZWZhdWx0OiBfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbWVzc2FnZXNJZCxcbiAgICAgICAgICAgIGlzRGlzYWJsZWQsXG4gICAgICAgICAgICBpc1JlYWRvbmx5XG4gICAgICAgICAgfSA9IF9yZWYyO1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbbGFiZWwgJiYgX2NyZWF0ZVZOb2RlKFZMYWJlbCwge1xuICAgICAgICAgICAgXCJpZFwiOiBpZC52YWx1ZVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtsYWJlbF1cbiAgICAgICAgICB9KSwgX2NyZWF0ZVZOb2RlKFZTZWxlY3Rpb25Db250cm9sR3JvdXAsIF9tZXJnZVByb3BzKGNvbnRyb2xQcm9wcywge1xuICAgICAgICAgICAgXCJpZFwiOiBpZC52YWx1ZSxcbiAgICAgICAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBtZXNzYWdlc0lkLnZhbHVlLFxuICAgICAgICAgICAgXCJkZWZhdWx0c1RhcmdldFwiOiBcIlZSYWRpb1wiLFxuICAgICAgICAgICAgXCJ0cnVlSWNvblwiOiBwcm9wcy50cnVlSWNvbixcbiAgICAgICAgICAgIFwiZmFsc2VJY29uXCI6IHByb3BzLmZhbHNlSWNvbixcbiAgICAgICAgICAgIFwidHlwZVwiOiBwcm9wcy50eXBlLFxuICAgICAgICAgICAgXCJkaXNhYmxlZFwiOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgICAgICAgXCJyZWFkb25seVwiOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgICAgICAgICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogbGFiZWwgPyBpZC52YWx1ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIFwibXVsdGlwbGVcIjogZmFsc2VcbiAgICAgICAgICB9LCBjb250cm9sQXR0cnMsIHtcbiAgICAgICAgICAgIFwibW9kZWxWYWx1ZVwiOiBtb2RlbC52YWx1ZSxcbiAgICAgICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gbW9kZWwudmFsdWUgPSAkZXZlbnRcbiAgICAgICAgICB9KSwgc2xvdHMpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WUmFkaW9Hcm91cC5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4uL1ZTbGlkZXIvVlNsaWRlci5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgbWFrZVZJbnB1dFByb3BzLCBWSW5wdXQgfSBmcm9tIFwiLi4vVklucHV0L1ZJbnB1dC5tanNcIjtcbmltcG9ydCB7IFZMYWJlbCB9IGZyb20gXCIuLi9WTGFiZWwvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBnZXRPZmZzZXQsIG1ha2VTbGlkZXJQcm9wcywgdXNlU2xpZGVyLCB1c2VTdGVwcyB9IGZyb20gXCIuLi9WU2xpZGVyL3NsaWRlci5tanNcIjtcbmltcG9ydCB7IFZTbGlkZXJUaHVtYiB9IGZyb20gXCIuLi9WU2xpZGVyL1ZTbGlkZXJUaHVtYi5tanNcIjtcbmltcG9ydCB7IFZTbGlkZXJUcmFjayB9IGZyb20gXCIuLi9WU2xpZGVyL1ZTbGlkZXJUcmFjay5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VGb2N1c1Byb3BzLCB1c2VGb2N1cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb2N1cy5tanNcIjtcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhbGUubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCByZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVlJhbmdlU2xpZGVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICAuLi5tYWtlRm9jdXNQcm9wcygpLFxuICAuLi5tYWtlVklucHV0UHJvcHMoKSxcbiAgLi4ubWFrZVNsaWRlclByb3BzKCksXG4gIHN0cmljdDogQm9vbGVhbixcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6ICgpID0+IFswLCAwXVxuICB9XG59LCAnVlJhbmdlU2xpZGVyJyk7XG5leHBvcnQgY29uc3QgVlJhbmdlU2xpZGVyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZSYW5nZVNsaWRlcicsXG4gIHByb3BzOiBtYWtlVlJhbmdlU2xpZGVyUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOmZvY3VzZWQnOiB2YWx1ZSA9PiB0cnVlLFxuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWUsXG4gICAgZW5kOiB2YWx1ZSA9PiB0cnVlLFxuICAgIHN0YXJ0OiB2YWx1ZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzLFxuICAgICAgZW1pdFxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHN0YXJ0VGh1bWJSZWYgPSByZWYoKTtcbiAgICBjb25zdCBzdG9wVGh1bWJSZWYgPSByZWYoKTtcbiAgICBjb25zdCBpbnB1dFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJ0bENsYXNzZXNcbiAgICB9ID0gdXNlUnRsKCk7XG4gICAgZnVuY3Rpb24gZ2V0QWN0aXZlVGh1bWIoZSkge1xuICAgICAgaWYgKCFzdGFydFRodW1iUmVmLnZhbHVlIHx8ICFzdG9wVGh1bWJSZWYudmFsdWUpIHJldHVybjtcbiAgICAgIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gZ2V0T2Zmc2V0KGUsIHN0YXJ0VGh1bWJSZWYudmFsdWUuJGVsLCBwcm9wcy5kaXJlY3Rpb24pO1xuICAgICAgY29uc3Qgc3RvcE9mZnNldCA9IGdldE9mZnNldChlLCBzdG9wVGh1bWJSZWYudmFsdWUuJGVsLCBwcm9wcy5kaXJlY3Rpb24pO1xuICAgICAgY29uc3QgYSA9IE1hdGguYWJzKHN0YXJ0T2Zmc2V0KTtcbiAgICAgIGNvbnN0IGIgPSBNYXRoLmFicyhzdG9wT2Zmc2V0KTtcbiAgICAgIHJldHVybiBhIDwgYiB8fCBhID09PSBiICYmIHN0YXJ0T2Zmc2V0IDwgMCA/IHN0YXJ0VGh1bWJSZWYudmFsdWUuJGVsIDogc3RvcFRodW1iUmVmLnZhbHVlLiRlbDtcbiAgICB9XG4gICAgY29uc3Qgc3RlcHMgPSB1c2VTdGVwcyhwcm9wcyk7XG4gICAgY29uc3QgbW9kZWwgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJywgdW5kZWZpbmVkLCBhcnIgPT4ge1xuICAgICAgaWYgKCFhcnI/Lmxlbmd0aCkgcmV0dXJuIFswLCAwXTtcbiAgICAgIHJldHVybiBhcnIubWFwKHZhbHVlID0+IHN0ZXBzLnJvdW5kVmFsdWUodmFsdWUpKTtcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBhY3RpdmVUaHVtYlJlZixcbiAgICAgIGhhc0xhYmVscyxcbiAgICAgIG1heCxcbiAgICAgIG1pbixcbiAgICAgIG1vdXNlUHJlc3NlZCxcbiAgICAgIG9uU2xpZGVyTW91c2Vkb3duLFxuICAgICAgb25TbGlkZXJUb3VjaHN0YXJ0LFxuICAgICAgcG9zaXRpb24sXG4gICAgICB0cmFja0NvbnRhaW5lclJlZlxuICAgIH0gPSB1c2VTbGlkZXIoe1xuICAgICAgcHJvcHMsXG4gICAgICBzdGVwcyxcbiAgICAgIG9uU2xpZGVyU3RhcnQ6ICgpID0+IHtcbiAgICAgICAgZW1pdCgnc3RhcnQnLCBtb2RlbC52YWx1ZSk7XG4gICAgICB9LFxuICAgICAgb25TbGlkZXJFbmQ6IF9yZWYyID0+IHtcbiAgICAgICAgbGV0IHtcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gYWN0aXZlVGh1bWJSZWYudmFsdWUgPT09IHN0YXJ0VGh1bWJSZWYudmFsdWU/LiRlbCA/IFt2YWx1ZSwgbW9kZWwudmFsdWVbMV1dIDogW21vZGVsLnZhbHVlWzBdLCB2YWx1ZV07XG4gICAgICAgIGlmICghcHJvcHMuc3RyaWN0ICYmIG5ld1ZhbHVlWzBdIDwgbmV3VmFsdWVbMV0pIHtcbiAgICAgICAgICBtb2RlbC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVtaXQoJ2VuZCcsIG1vZGVsLnZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBvblNsaWRlck1vdmU6IF9yZWYzID0+IHtcbiAgICAgICAgbGV0IHtcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9ID0gX3JlZjM7XG4gICAgICAgIGNvbnN0IFtzdGFydCwgc3RvcF0gPSBtb2RlbC52YWx1ZTtcbiAgICAgICAgaWYgKCFwcm9wcy5zdHJpY3QgJiYgc3RhcnQgPT09IHN0b3AgJiYgc3RhcnQgIT09IG1pbi52YWx1ZSkge1xuICAgICAgICAgIGFjdGl2ZVRodW1iUmVmLnZhbHVlID0gdmFsdWUgPiBzdGFydCA/IHN0b3BUaHVtYlJlZi52YWx1ZT8uJGVsIDogc3RhcnRUaHVtYlJlZi52YWx1ZT8uJGVsO1xuICAgICAgICAgIGFjdGl2ZVRodW1iUmVmLnZhbHVlPy5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3RpdmVUaHVtYlJlZi52YWx1ZSA9PT0gc3RhcnRUaHVtYlJlZi52YWx1ZT8uJGVsKSB7XG4gICAgICAgICAgbW9kZWwudmFsdWUgPSBbTWF0aC5taW4odmFsdWUsIHN0b3ApLCBzdG9wXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb2RlbC52YWx1ZSA9IFtzdGFydCwgTWF0aC5tYXgoc3RhcnQsIHZhbHVlKV07XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBnZXRBY3RpdmVUaHVtYlxuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRm9jdXNlZCxcbiAgICAgIGZvY3VzLFxuICAgICAgYmx1clxuICAgIH0gPSB1c2VGb2N1cyhwcm9wcyk7XG4gICAgY29uc3QgdHJhY2tTdGFydCA9IGNvbXB1dGVkKCgpID0+IHBvc2l0aW9uKG1vZGVsLnZhbHVlWzBdKSk7XG4gICAgY29uc3QgdHJhY2tTdG9wID0gY29tcHV0ZWQoKCkgPT4gcG9zaXRpb24obW9kZWwudmFsdWVbMV0pKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgW2lucHV0UHJvcHMsIF9dID0gVklucHV0LmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIGNvbnN0IGhhc1ByZXBlbmQgPSAhIShwcm9wcy5sYWJlbCB8fCBzbG90cy5sYWJlbCB8fCBzbG90cy5wcmVwZW5kKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVklucHV0LCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXNsaWRlcicsICd2LXJhbmdlLXNsaWRlcicsIHtcbiAgICAgICAgICAndi1zbGlkZXItLWhhcy1sYWJlbHMnOiAhIXNsb3RzWyd0aWNrLWxhYmVsJ10gfHwgaGFzTGFiZWxzLnZhbHVlLFxuICAgICAgICAgICd2LXNsaWRlci0tZm9jdXNlZCc6IGlzRm9jdXNlZC52YWx1ZSxcbiAgICAgICAgICAndi1zbGlkZXItLXByZXNzZWQnOiBtb3VzZVByZXNzZWQudmFsdWUsXG4gICAgICAgICAgJ3Ytc2xpZGVyLS1kaXNhYmxlZCc6IHByb3BzLmRpc2FibGVkXG4gICAgICAgIH0sIHJ0bENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZSxcbiAgICAgICAgXCJyZWZcIjogaW5wdXRSZWZcbiAgICAgIH0sIGlucHV0UHJvcHMsIHtcbiAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZC52YWx1ZVxuICAgICAgfSksIHtcbiAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgIHByZXBlbmQ6IGhhc1ByZXBlbmQgPyBzbG90UHJvcHMgPT4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Nsb3RzLmxhYmVsPy4oc2xvdFByb3BzKSA/PyAocHJvcHMubGFiZWwgPyBfY3JlYXRlVk5vZGUoVkxhYmVsLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtc2xpZGVyX19sYWJlbFwiLFxuICAgICAgICAgIFwidGV4dFwiOiBwcm9wcy5sYWJlbFxuICAgICAgICB9LCBudWxsKSA6IHVuZGVmaW5lZCksIHNsb3RzLnByZXBlbmQ/LihzbG90UHJvcHMpXSkgOiB1bmRlZmluZWQsXG4gICAgICAgIGRlZmF1bHQ6IF9yZWY0ID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBtZXNzYWdlc0lkXG4gICAgICAgICAgfSA9IF9yZWY0O1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtc2xpZGVyX19jb250YWluZXJcIixcbiAgICAgICAgICAgIFwib25Nb3VzZWRvd25cIjogb25TbGlkZXJNb3VzZWRvd24sXG4gICAgICAgICAgICBcIm9uVG91Y2hzdGFydFBhc3NpdmVcIjogb25TbGlkZXJUb3VjaHN0YXJ0XG4gICAgICAgICAgfSwgW19jcmVhdGVWTm9kZShcImlucHV0XCIsIHtcbiAgICAgICAgICAgIFwiaWRcIjogYCR7aWQudmFsdWV9X3N0YXJ0YCxcbiAgICAgICAgICAgIFwibmFtZVwiOiBwcm9wcy5uYW1lIHx8IGlkLnZhbHVlLFxuICAgICAgICAgICAgXCJkaXNhYmxlZFwiOiAhIXByb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgXCJyZWFkb25seVwiOiAhIXByb3BzLnJlYWRvbmx5LFxuICAgICAgICAgICAgXCJ0YWJpbmRleFwiOiBcIi0xXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IG1vZGVsLnZhbHVlWzBdXG4gICAgICAgICAgfSwgbnVsbCksIF9jcmVhdGVWTm9kZShcImlucHV0XCIsIHtcbiAgICAgICAgICAgIFwiaWRcIjogYCR7aWQudmFsdWV9X3N0b3BgLFxuICAgICAgICAgICAgXCJuYW1lXCI6IHByb3BzLm5hbWUgfHwgaWQudmFsdWUsXG4gICAgICAgICAgICBcImRpc2FibGVkXCI6ICEhcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICBcInJlYWRvbmx5XCI6ICEhcHJvcHMucmVhZG9ubHksXG4gICAgICAgICAgICBcInRhYmluZGV4XCI6IFwiLTFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogbW9kZWwudmFsdWVbMV1cbiAgICAgICAgICB9LCBudWxsKSwgX2NyZWF0ZVZOb2RlKFZTbGlkZXJUcmFjaywge1xuICAgICAgICAgICAgXCJyZWZcIjogdHJhY2tDb250YWluZXJSZWYsXG4gICAgICAgICAgICBcInN0YXJ0XCI6IHRyYWNrU3RhcnQudmFsdWUsXG4gICAgICAgICAgICBcInN0b3BcIjogdHJhY2tTdG9wLnZhbHVlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgJ3RpY2stbGFiZWwnOiBzbG90c1sndGljay1sYWJlbCddXG4gICAgICAgICAgfSksIF9jcmVhdGVWTm9kZShWU2xpZGVyVGh1bWIsIHtcbiAgICAgICAgICAgIFwicmVmXCI6IHN0YXJ0VGh1bWJSZWYsXG4gICAgICAgICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogbWVzc2FnZXNJZC52YWx1ZSxcbiAgICAgICAgICAgIFwiZm9jdXNlZFwiOiBpc0ZvY3VzZWQgJiYgYWN0aXZlVGh1bWJSZWYudmFsdWUgPT09IHN0YXJ0VGh1bWJSZWYudmFsdWU/LiRlbCxcbiAgICAgICAgICAgIFwibW9kZWxWYWx1ZVwiOiBtb2RlbC52YWx1ZVswXSxcbiAgICAgICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiB2ID0+IG1vZGVsLnZhbHVlID0gW3YsIG1vZGVsLnZhbHVlWzFdXSxcbiAgICAgICAgICAgIFwib25Gb2N1c1wiOiBlID0+IHtcbiAgICAgICAgICAgICAgZm9jdXMoKTtcbiAgICAgICAgICAgICAgYWN0aXZlVGh1bWJSZWYudmFsdWUgPSBzdGFydFRodW1iUmVmLnZhbHVlPy4kZWw7XG5cbiAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHNlY29uZCB0aHVtYiBpcyBmb2N1c2VkIGlmXG4gICAgICAgICAgICAgIC8vIHRoZSB0aHVtYnMgYXJlIG9uIHRvcCBvZiBlYWNoIG90aGVyXG4gICAgICAgICAgICAgIC8vIGFuZCB0aGV5IGFyZSBib3RoIGF0IG1pbmltdW0gdmFsdWVcbiAgICAgICAgICAgICAgLy8gYnV0IG9ubHkgaWYgZm9jdXNlZCBmcm9tIG91dHNpZGUuXG4gICAgICAgICAgICAgIGlmIChtb2RlbC52YWx1ZVswXSA9PT0gbW9kZWwudmFsdWVbMV0gJiYgbW9kZWwudmFsdWVbMV0gPT09IG1pbi52YWx1ZSAmJiBlLnJlbGF0ZWRUYXJnZXQgIT09IHN0b3BUaHVtYlJlZi52YWx1ZT8uJGVsKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRUaHVtYlJlZi52YWx1ZT8uJGVsLmJsdXIoKTtcbiAgICAgICAgICAgICAgICBzdG9wVGh1bWJSZWYudmFsdWU/LiRlbC5mb2N1cygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJvbkJsdXJcIjogKCkgPT4ge1xuICAgICAgICAgICAgICBibHVyKCk7XG4gICAgICAgICAgICAgIGFjdGl2ZVRodW1iUmVmLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwibWluXCI6IG1pbi52YWx1ZSxcbiAgICAgICAgICAgIFwibWF4XCI6IG1vZGVsLnZhbHVlWzFdLFxuICAgICAgICAgICAgXCJwb3NpdGlvblwiOiB0cmFja1N0YXJ0LnZhbHVlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgJ3RodW1iLWxhYmVsJzogc2xvdHNbJ3RodW1iLWxhYmVsJ11cbiAgICAgICAgICB9KSwgX2NyZWF0ZVZOb2RlKFZTbGlkZXJUaHVtYiwge1xuICAgICAgICAgICAgXCJyZWZcIjogc3RvcFRodW1iUmVmLFxuICAgICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IG1lc3NhZ2VzSWQudmFsdWUsXG4gICAgICAgICAgICBcImZvY3VzZWRcIjogaXNGb2N1c2VkICYmIGFjdGl2ZVRodW1iUmVmLnZhbHVlID09PSBzdG9wVGh1bWJSZWYudmFsdWU/LiRlbCxcbiAgICAgICAgICAgIFwibW9kZWxWYWx1ZVwiOiBtb2RlbC52YWx1ZVsxXSxcbiAgICAgICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiB2ID0+IG1vZGVsLnZhbHVlID0gW21vZGVsLnZhbHVlWzBdLCB2XSxcbiAgICAgICAgICAgIFwib25Gb2N1c1wiOiBlID0+IHtcbiAgICAgICAgICAgICAgZm9jdXMoKTtcbiAgICAgICAgICAgICAgYWN0aXZlVGh1bWJSZWYudmFsdWUgPSBzdG9wVGh1bWJSZWYudmFsdWU/LiRlbDtcblxuICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgZmlyc3QgdGh1bWIgaXMgZm9jdXNlZCBpZlxuICAgICAgICAgICAgICAvLyB0aGUgdGh1bWJzIGFyZSBvbiB0b3Agb2YgZWFjaCBvdGhlclxuICAgICAgICAgICAgICAvLyBhbmQgdGhleSBhcmUgYm90aCBhdCBtYXhpbXVtIHZhbHVlXG4gICAgICAgICAgICAgIC8vIGJ1dCBvbmx5IGlmIGZvY3VzZWQgZnJvbSBvdXRzaWRlLlxuICAgICAgICAgICAgICBpZiAobW9kZWwudmFsdWVbMF0gPT09IG1vZGVsLnZhbHVlWzFdICYmIG1vZGVsLnZhbHVlWzBdID09PSBtYXgudmFsdWUgJiYgZS5yZWxhdGVkVGFyZ2V0ICE9PSBzdGFydFRodW1iUmVmLnZhbHVlPy4kZWwpIHtcbiAgICAgICAgICAgICAgICBzdG9wVGh1bWJSZWYudmFsdWU/LiRlbC5ibHVyKCk7XG4gICAgICAgICAgICAgICAgc3RhcnRUaHVtYlJlZi52YWx1ZT8uJGVsLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIm9uQmx1clwiOiAoKSA9PiB7XG4gICAgICAgICAgICAgIGJsdXIoKTtcbiAgICAgICAgICAgICAgYWN0aXZlVGh1bWJSZWYudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJtaW5cIjogbW9kZWwudmFsdWVbMF0sXG4gICAgICAgICAgICBcIm1heFwiOiBtYXgudmFsdWUsXG4gICAgICAgICAgICBcInBvc2l0aW9uXCI6IHRyYWNrU3RvcC52YWx1ZVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICd0aHVtYi1sYWJlbCc6IHNsb3RzWyd0aHVtYi1sYWJlbCddXG4gICAgICAgICAgfSldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZSYW5nZVNsaWRlci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50IH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZSYXRpbmcuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZCdG4gfSBmcm9tIFwiLi4vVkJ0bi9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IG1ha2VTaXplUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc2l6ZS5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBzaGFsbG93UmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNsYW1wLCBjcmVhdGVSYW5nZSwgZ2VuZXJpY0NvbXBvbmVudCwgZ2V0VWlkLCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWUmF0aW5nUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBuYW1lOiBTdHJpbmcsXG4gIGl0ZW1BcmlhTGFiZWw6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJyR2dWV0aWZ5LnJhdGluZy5hcmlhTGFiZWwuaXRlbSdcbiAgfSxcbiAgYWN0aXZlQ29sb3I6IFN0cmluZyxcbiAgY29sb3I6IFN0cmluZyxcbiAgY2xlYXJhYmxlOiBCb29sZWFuLFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgZW1wdHlJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckcmF0aW5nRW1wdHknXG4gIH0sXG4gIGZ1bGxJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckcmF0aW5nRnVsbCdcbiAgfSxcbiAgaGFsZkluY3JlbWVudHM6IEJvb2xlYW4sXG4gIGhvdmVyOiBCb29sZWFuLFxuICBsZW5ndGg6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDVcbiAgfSxcbiAgcmVhZG9ubHk6IEJvb2xlYW4sXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDBcbiAgfSxcbiAgaXRlbUxhYmVsczogQXJyYXksXG4gIGl0ZW1MYWJlbFBvc2l0aW9uOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICd0b3AnLFxuICAgIHZhbGlkYXRvcjogdiA9PiBbJ3RvcCcsICdib3R0b20nXS5pbmNsdWRlcyh2KVxuICB9LFxuICByaXBwbGU6IEJvb2xlYW4sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGVuc2l0eVByb3BzKCksXG4gIC4uLm1ha2VTaXplUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWUmF0aW5nJyk7XG5leHBvcnQgY29uc3QgVlJhdGluZyA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWUmF0aW5nJyxcbiAgcHJvcHM6IG1ha2VWUmF0aW5nUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWx1ZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdFxuICAgIH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCByYXRpbmcgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgY29uc3Qgbm9ybWFsaXplZFZhbHVlID0gY29tcHV0ZWQoKCkgPT4gY2xhbXAocGFyc2VGbG9hdChyYXRpbmcudmFsdWUpLCAwLCArcHJvcHMubGVuZ3RoKSk7XG4gICAgY29uc3QgcmFuZ2UgPSBjb21wdXRlZCgoKSA9PiBjcmVhdGVSYW5nZShOdW1iZXIocHJvcHMubGVuZ3RoKSwgMSkpO1xuICAgIGNvbnN0IGluY3JlbWVudHMgPSBjb21wdXRlZCgoKSA9PiByYW5nZS52YWx1ZS5mbGF0TWFwKHYgPT4gcHJvcHMuaGFsZkluY3JlbWVudHMgPyBbdiAtIDAuNSwgdl0gOiBbdl0pKTtcbiAgICBjb25zdCBob3ZlckluZGV4ID0gc2hhbGxvd1JlZigtMSk7XG4gICAgY29uc3QgaXRlbVN0YXRlID0gY29tcHV0ZWQoKCkgPT4gaW5jcmVtZW50cy52YWx1ZS5tYXAodmFsdWUgPT4ge1xuICAgICAgY29uc3QgaXNIb3ZlcmluZyA9IHByb3BzLmhvdmVyICYmIGhvdmVySW5kZXgudmFsdWUgPiAtMTtcbiAgICAgIGNvbnN0IGlzRmlsbGVkID0gbm9ybWFsaXplZFZhbHVlLnZhbHVlID49IHZhbHVlO1xuICAgICAgY29uc3QgaXNIb3ZlcmVkID0gaG92ZXJJbmRleC52YWx1ZSA+PSB2YWx1ZTtcbiAgICAgIGNvbnN0IGlzRnVsbEljb24gPSBpc0hvdmVyaW5nID8gaXNIb3ZlcmVkIDogaXNGaWxsZWQ7XG4gICAgICBjb25zdCBpY29uID0gaXNGdWxsSWNvbiA/IHByb3BzLmZ1bGxJY29uIDogcHJvcHMuZW1wdHlJY29uO1xuICAgICAgY29uc3QgYWN0aXZlQ29sb3IgPSBwcm9wcy5hY3RpdmVDb2xvciA/PyBwcm9wcy5jb2xvcjtcbiAgICAgIGNvbnN0IGNvbG9yID0gaXNGaWxsZWQgfHwgaXNIb3ZlcmVkID8gYWN0aXZlQ29sb3IgOiBwcm9wcy5jb2xvcjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzRmlsbGVkLFxuICAgICAgICBpc0hvdmVyZWQsXG4gICAgICAgIGljb24sXG4gICAgICAgIGNvbG9yXG4gICAgICB9O1xuICAgIH0pKTtcbiAgICBjb25zdCBldmVudFN0YXRlID0gY29tcHV0ZWQoKCkgPT4gWzAsIC4uLmluY3JlbWVudHMudmFsdWVdLm1hcCh2YWx1ZSA9PiB7XG4gICAgICBmdW5jdGlvbiBvbk1vdXNlZW50ZXIoKSB7XG4gICAgICAgIGhvdmVySW5kZXgudmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIG9uTW91c2VsZWF2ZSgpIHtcbiAgICAgICAgaG92ZXJJbmRleC52YWx1ZSA9IC0xO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gb25DbGljaygpIHtcbiAgICAgICAgaWYgKHByb3BzLmRpc2FibGVkIHx8IHByb3BzLnJlYWRvbmx5KSByZXR1cm47XG4gICAgICAgIHJhdGluZy52YWx1ZSA9IG5vcm1hbGl6ZWRWYWx1ZS52YWx1ZSA9PT0gdmFsdWUgJiYgcHJvcHMuY2xlYXJhYmxlID8gMCA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb25Nb3VzZWVudGVyOiBwcm9wcy5ob3ZlciA/IG9uTW91c2VlbnRlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgb25Nb3VzZWxlYXZlOiBwcm9wcy5ob3ZlciA/IG9uTW91c2VsZWF2ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgb25DbGlja1xuICAgICAgfTtcbiAgICB9KSk7XG4gICAgY29uc3QgbmFtZSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLm5hbWUgPz8gYHYtcmF0aW5nLSR7Z2V0VWlkKCl9YCk7XG4gICAgZnVuY3Rpb24gVlJhdGluZ0l0ZW0oX3JlZjIpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgc2hvd1N0YXIgPSB0cnVlXG4gICAgICB9ID0gX3JlZjI7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG9uTW91c2VlbnRlcixcbiAgICAgICAgb25Nb3VzZWxlYXZlLFxuICAgICAgICBvbkNsaWNrXG4gICAgICB9ID0gZXZlbnRTdGF0ZS52YWx1ZVtpbmRleCArIDFdO1xuICAgICAgY29uc3QgaWQgPSBgJHtuYW1lLnZhbHVlfS0ke1N0cmluZyh2YWx1ZSkucmVwbGFjZSgnLicsICctJyl9YDtcbiAgICAgIGNvbnN0IGJ0blByb3BzID0ge1xuICAgICAgICBjb2xvcjogaXRlbVN0YXRlLnZhbHVlW2luZGV4XT8uY29sb3IsXG4gICAgICAgIGRlbnNpdHk6IHByb3BzLmRlbnNpdHksXG4gICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgaWNvbjogaXRlbVN0YXRlLnZhbHVlW2luZGV4XT8uaWNvbixcbiAgICAgICAgcmlwcGxlOiBwcm9wcy5yaXBwbGUsXG4gICAgICAgIHNpemU6IHByb3BzLnNpemUsXG4gICAgICAgIHZhcmlhbnQ6ICdwbGFpbidcbiAgICAgIH07XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW19jcmVhdGVWTm9kZShcImxhYmVsXCIsIHtcbiAgICAgICAgXCJmb3JcIjogaWQsXG4gICAgICAgIFwiY2xhc3NcIjoge1xuICAgICAgICAgICd2LXJhdGluZ19faXRlbS0taGFsZic6IHByb3BzLmhhbGZJbmNyZW1lbnRzICYmIHZhbHVlICUgMSA+IDAsXG4gICAgICAgICAgJ3YtcmF0aW5nX19pdGVtLS1mdWxsJzogcHJvcHMuaGFsZkluY3JlbWVudHMgJiYgdmFsdWUgJSAxID09PSAwXG4gICAgICAgIH0sXG4gICAgICAgIFwib25Nb3VzZWVudGVyXCI6IG9uTW91c2VlbnRlcixcbiAgICAgICAgXCJvbk1vdXNlbGVhdmVcIjogb25Nb3VzZWxlYXZlLFxuICAgICAgICBcIm9uQ2xpY2tcIjogb25DbGlja1xuICAgICAgfSwgW19jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi1yYXRpbmdfX2hpZGRlblwiXG4gICAgICB9LCBbdChwcm9wcy5pdGVtQXJpYUxhYmVsLCB2YWx1ZSwgcHJvcHMubGVuZ3RoKV0pLCAhc2hvd1N0YXIgPyB1bmRlZmluZWQgOiBzbG90cy5pdGVtID8gc2xvdHMuaXRlbSh7XG4gICAgICAgIC4uLml0ZW1TdGF0ZS52YWx1ZVtpbmRleF0sXG4gICAgICAgIHByb3BzOiBidG5Qcm9wcyxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGluZGV4LFxuICAgICAgICByYXRpbmc6IG5vcm1hbGl6ZWRWYWx1ZS52YWx1ZVxuICAgICAgfSkgOiBfY3JlYXRlVk5vZGUoVkJ0biwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcImFyaWEtbGFiZWxcIjogdChwcm9wcy5pdGVtQXJpYUxhYmVsLCB2YWx1ZSwgcHJvcHMubGVuZ3RoKVxuICAgICAgfSwgYnRuUHJvcHMpLCBudWxsKV0pLCBfY3JlYXRlVk5vZGUoXCJpbnB1dFwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LXJhdGluZ19faGlkZGVuXCIsXG4gICAgICAgIFwibmFtZVwiOiBuYW1lLnZhbHVlLFxuICAgICAgICBcImlkXCI6IGlkLFxuICAgICAgICBcInR5cGVcIjogXCJyYWRpb1wiLFxuICAgICAgICBcInZhbHVlXCI6IHZhbHVlLFxuICAgICAgICBcImNoZWNrZWRcIjogbm9ybWFsaXplZFZhbHVlLnZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgXCJ0YWJpbmRleFwiOiAtMSxcbiAgICAgICAgXCJyZWFkb25seVwiOiBwcm9wcy5yZWFkb25seSxcbiAgICAgICAgXCJkaXNhYmxlZFwiOiBwcm9wcy5kaXNhYmxlZFxuICAgICAgfSwgbnVsbCldKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlTGFiZWwobGFiZWxQcm9wcykge1xuICAgICAgaWYgKHNsb3RzWydpdGVtLWxhYmVsJ10pIHJldHVybiBzbG90c1snaXRlbS1sYWJlbCddKGxhYmVsUHJvcHMpO1xuICAgICAgaWYgKGxhYmVsUHJvcHMubGFiZWwpIHJldHVybiBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIG51bGwsIFtsYWJlbFByb3BzLmxhYmVsXSk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFwic3BhblwiLCBudWxsLCBbX2NyZWF0ZVRleHRWTm9kZShcIlxceEEwXCIpXSk7XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBoYXNMYWJlbHMgPSAhIXByb3BzLml0ZW1MYWJlbHM/Lmxlbmd0aCB8fCBzbG90c1snaXRlbS1sYWJlbCddO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtcmF0aW5nJywge1xuICAgICAgICAgICd2LXJhdGluZy0taG92ZXInOiBwcm9wcy5ob3ZlcixcbiAgICAgICAgICAndi1yYXRpbmctLXJlYWRvbmx5JzogcHJvcHMucmVhZG9ubHlcbiAgICAgICAgfSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShWUmF0aW5nSXRlbSwge1xuICAgICAgICAgIFwidmFsdWVcIjogMCxcbiAgICAgICAgICBcImluZGV4XCI6IC0xLFxuICAgICAgICAgIFwic2hvd1N0YXJcIjogZmFsc2VcbiAgICAgICAgfSwgbnVsbCksIHJhbmdlLnZhbHVlLm1hcCgodmFsdWUsIGkpID0+IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtcmF0aW5nX193cmFwcGVyXCJcbiAgICAgICAgfSwgW2hhc0xhYmVscyAmJiBwcm9wcy5pdGVtTGFiZWxQb3NpdGlvbiA9PT0gJ3RvcCcgPyBjcmVhdGVMYWJlbCh7XG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgbGFiZWw6IHByb3BzLml0ZW1MYWJlbHM/LltpXVxuICAgICAgICB9KSA6IHVuZGVmaW5lZCwgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1yYXRpbmdfX2l0ZW1cIlxuICAgICAgICB9LCBbcHJvcHMuaGFsZkluY3JlbWVudHMgPyBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKFZSYXRpbmdJdGVtLCB7XG4gICAgICAgICAgXCJ2YWx1ZVwiOiB2YWx1ZSAtIDAuNSxcbiAgICAgICAgICBcImluZGV4XCI6IGkgKiAyXG4gICAgICAgIH0sIG51bGwpLCBfY3JlYXRlVk5vZGUoVlJhdGluZ0l0ZW0sIHtcbiAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlLFxuICAgICAgICAgIFwiaW5kZXhcIjogaSAqIDIgKyAxXG4gICAgICAgIH0sIG51bGwpXSkgOiBfY3JlYXRlVk5vZGUoVlJhdGluZ0l0ZW0sIHtcbiAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlLFxuICAgICAgICAgIFwiaW5kZXhcIjogaVxuICAgICAgICB9LCBudWxsKV0pLCBoYXNMYWJlbHMgJiYgcHJvcHMuaXRlbUxhYmVsUG9zaXRpb24gPT09ICdib3R0b20nID8gY3JlYXRlTGFiZWwoe1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgIGxhYmVsOiBwcm9wcy5pdGVtTGFiZWxzPy5baV1cbiAgICAgICAgfSkgOiB1bmRlZmluZWRdKSldXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlJhdGluZy5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGJpYXModmFsKSB7XG4gIGNvbnN0IGMgPSAwLjUwMTtcbiAgY29uc3QgeCA9IE1hdGguYWJzKHZhbCk7XG4gIHJldHVybiBNYXRoLnNpZ24odmFsKSAqICh4IC8gKCgxIC8gYyAtIDIpICogKDEgLSB4KSArIDEpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVVcGRhdGVkT2Zmc2V0KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzZWxlY3RlZEVsZW1lbnQsXG4gICAgY29udGFpbmVyU2l6ZSxcbiAgICBjb250ZW50U2l6ZSxcbiAgICBpc1J0bCxcbiAgICBjdXJyZW50U2Nyb2xsT2Zmc2V0LFxuICAgIGlzSG9yaXpvbnRhbFxuICB9ID0gX3JlZjtcbiAgY29uc3QgY2xpZW50U2l6ZSA9IGlzSG9yaXpvbnRhbCA/IHNlbGVjdGVkRWxlbWVudC5jbGllbnRXaWR0aCA6IHNlbGVjdGVkRWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIGNvbnN0IG9mZnNldFN0YXJ0ID0gaXNIb3Jpem9udGFsID8gc2VsZWN0ZWRFbGVtZW50Lm9mZnNldExlZnQgOiBzZWxlY3RlZEVsZW1lbnQub2Zmc2V0VG9wO1xuICBjb25zdCBhZGp1c3RlZE9mZnNldFN0YXJ0ID0gaXNSdGwgJiYgaXNIb3Jpem9udGFsID8gY29udGVudFNpemUgLSBvZmZzZXRTdGFydCAtIGNsaWVudFNpemUgOiBvZmZzZXRTdGFydDtcbiAgY29uc3QgdG90YWxTaXplID0gY29udGFpbmVyU2l6ZSArIGN1cnJlbnRTY3JvbGxPZmZzZXQ7XG4gIGNvbnN0IGl0ZW1PZmZzZXQgPSBjbGllbnRTaXplICsgYWRqdXN0ZWRPZmZzZXRTdGFydDtcbiAgY29uc3QgYWRkaXRpb25hbE9mZnNldCA9IGNsaWVudFNpemUgKiAwLjQ7XG4gIGlmIChhZGp1c3RlZE9mZnNldFN0YXJ0IDw9IGN1cnJlbnRTY3JvbGxPZmZzZXQpIHtcbiAgICBjdXJyZW50U2Nyb2xsT2Zmc2V0ID0gTWF0aC5tYXgoYWRqdXN0ZWRPZmZzZXRTdGFydCAtIGFkZGl0aW9uYWxPZmZzZXQsIDApO1xuICB9IGVsc2UgaWYgKHRvdGFsU2l6ZSA8PSBpdGVtT2Zmc2V0KSB7XG4gICAgY3VycmVudFNjcm9sbE9mZnNldCA9IE1hdGgubWluKGN1cnJlbnRTY3JvbGxPZmZzZXQgLSAodG90YWxTaXplIC0gaXRlbU9mZnNldCAtIGFkZGl0aW9uYWxPZmZzZXQpLCBjb250ZW50U2l6ZSAtIGNvbnRhaW5lclNpemUpO1xuICB9XG4gIHJldHVybiBjdXJyZW50U2Nyb2xsT2Zmc2V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUNlbnRlcmVkT2Zmc2V0KF9yZWYyKSB7XG4gIGxldCB7XG4gICAgc2VsZWN0ZWRFbGVtZW50LFxuICAgIGNvbnRhaW5lclNpemUsXG4gICAgY29udGVudFNpemUsXG4gICAgaXNSdGwsXG4gICAgaXNIb3Jpem9udGFsXG4gIH0gPSBfcmVmMjtcbiAgY29uc3QgY2xpZW50U2l6ZSA9IGlzSG9yaXpvbnRhbCA/IHNlbGVjdGVkRWxlbWVudC5jbGllbnRXaWR0aCA6IHNlbGVjdGVkRWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIGNvbnN0IG9mZnNldFN0YXJ0ID0gaXNIb3Jpem9udGFsID8gc2VsZWN0ZWRFbGVtZW50Lm9mZnNldExlZnQgOiBzZWxlY3RlZEVsZW1lbnQub2Zmc2V0VG9wO1xuICBjb25zdCBvZmZzZXRDZW50ZXJlZCA9IGlzUnRsICYmIGlzSG9yaXpvbnRhbCA/IGNvbnRlbnRTaXplIC0gb2Zmc2V0U3RhcnQgLSBjbGllbnRTaXplIC8gMiAtIGNvbnRhaW5lclNpemUgLyAyIDogb2Zmc2V0U3RhcnQgKyBjbGllbnRTaXplIC8gMiAtIGNvbnRhaW5lclNpemUgLyAyO1xuICByZXR1cm4gTWF0aC5taW4oY29udGVudFNpemUgLSBjb250YWluZXJTaXplLCBNYXRoLm1heCgwLCBvZmZzZXRDZW50ZXJlZCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZTbGlkZUdyb3VwLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWRmFkZVRyYW5zaXRpb24gfSBmcm9tIFwiLi4vdHJhbnNpdGlvbnMvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gXCIuLi9WSWNvbi9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZURpc3BsYXkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUdyb3VwUHJvcHMsIHVzZUdyb3VwIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2dyb3VwLm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IHVzZVJlc2l6ZU9ic2VydmVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Jlc2l6ZU9ic2VydmVyLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgc2hhbGxvd1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgYmlhcywgY2FsY3VsYXRlQ2VudGVyZWRPZmZzZXQsIGNhbGN1bGF0ZVVwZGF0ZWRPZmZzZXQgfSBmcm9tIFwiLi9oZWxwZXJzLm1qc1wiO1xuaW1wb3J0IHsgY2xhbXAsIGZvY3VzYWJsZUNoaWxkcmVuLCBnZW5lcmljQ29tcG9uZW50LCBJTl9CUk9XU0VSLCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IFZTbGlkZUdyb3VwU3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTp2LXNsaWRlLWdyb3VwJyk7XG5leHBvcnQgY29uc3QgbWFrZVZTbGlkZUdyb3VwUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjZW50ZXJBY3RpdmU6IEJvb2xlYW4sXG4gIGRpcmVjdGlvbjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnaG9yaXpvbnRhbCdcbiAgfSxcbiAgc3ltYm9sOiB7XG4gICAgdHlwZTogbnVsbCxcbiAgICBkZWZhdWx0OiBWU2xpZGVHcm91cFN5bWJvbFxuICB9LFxuICBuZXh0SWNvbjoge1xuICAgIHR5cGU6IEljb25WYWx1ZSxcbiAgICBkZWZhdWx0OiAnJG5leHQnXG4gIH0sXG4gIHByZXZJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckcHJldidcbiAgfSxcbiAgc2hvd0Fycm93czoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgIHZhbGlkYXRvcjogdiA9PiB0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nIHx8IFsnYWx3YXlzJywgJ2Rlc2t0b3AnLCAnbW9iaWxlJ10uaW5jbHVkZXModilcbiAgfSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpLFxuICAuLi5tYWtlR3JvdXBQcm9wcyh7XG4gICAgc2VsZWN0ZWRDbGFzczogJ3Ytc2xpZGUtZ3JvdXAtaXRlbS0tYWN0aXZlJ1xuICB9KVxufSwgJ1ZTbGlkZUdyb3VwJyk7XG5leHBvcnQgY29uc3QgVlNsaWRlR3JvdXAgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlNsaWRlR3JvdXAnLFxuICBwcm9wczogbWFrZVZTbGlkZUdyb3VwUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWx1ZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgaXNSdGxcbiAgICB9ID0gdXNlUnRsKCk7XG4gICAgY29uc3Qge1xuICAgICAgbW9iaWxlXG4gICAgfSA9IHVzZURpc3BsYXkoKTtcbiAgICBjb25zdCBncm91cCA9IHVzZUdyb3VwKHByb3BzLCBwcm9wcy5zeW1ib2wpO1xuICAgIGNvbnN0IGlzT3ZlcmZsb3dpbmcgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgICBjb25zdCBzY3JvbGxPZmZzZXQgPSBzaGFsbG93UmVmKDApO1xuICAgIGNvbnN0IGNvbnRhaW5lclNpemUgPSBzaGFsbG93UmVmKDApO1xuICAgIGNvbnN0IGNvbnRlbnRTaXplID0gc2hhbGxvd1JlZigwKTtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyk7XG4gICAgY29uc3Qge1xuICAgICAgcmVzaXplUmVmOiBjb250YWluZXJSZWYsXG4gICAgICBjb250ZW50UmVjdDogY29udGFpbmVyUmVjdFxuICAgIH0gPSB1c2VSZXNpemVPYnNlcnZlcigpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJlc2l6ZVJlZjogY29udGVudFJlZixcbiAgICAgIGNvbnRlbnRSZWN0XG4gICAgfSA9IHVzZVJlc2l6ZU9ic2VydmVyKCk7XG4gICAgY29uc3QgZmlyc3RTZWxlY3RlZEluZGV4ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKCFncm91cC5zZWxlY3RlZC52YWx1ZS5sZW5ndGgpIHJldHVybiAtMTtcbiAgICAgIHJldHVybiBncm91cC5pdGVtcy52YWx1ZS5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmlkID09PSBncm91cC5zZWxlY3RlZC52YWx1ZVswXSk7XG4gICAgfSk7XG4gICAgY29uc3QgbGFzdFNlbGVjdGVkSW5kZXggPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAoIWdyb3VwLnNlbGVjdGVkLnZhbHVlLmxlbmd0aCkgcmV0dXJuIC0xO1xuICAgICAgcmV0dXJuIGdyb3VwLml0ZW1zLnZhbHVlLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IGdyb3VwLnNlbGVjdGVkLnZhbHVlW2dyb3VwLnNlbGVjdGVkLnZhbHVlLmxlbmd0aCAtIDFdKTtcbiAgICB9KTtcbiAgICBpZiAoSU5fQlJPV1NFUikge1xuICAgICAgbGV0IGZyYW1lID0gLTE7XG4gICAgICB3YXRjaCgoKSA9PiBbZ3JvdXAuc2VsZWN0ZWQudmFsdWUsIGNvbnRhaW5lclJlY3QudmFsdWUsIGNvbnRlbnRSZWN0LnZhbHVlLCBpc0hvcml6b250YWwudmFsdWVdLCAoKSA9PiB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGZyYW1lKTtcbiAgICAgICAgZnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGlmIChjb250YWluZXJSZWN0LnZhbHVlICYmIGNvbnRlbnRSZWN0LnZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBzaXplUHJvcGVydHkgPSBpc0hvcml6b250YWwudmFsdWUgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gICAgICAgICAgICBjb250YWluZXJTaXplLnZhbHVlID0gY29udGFpbmVyUmVjdC52YWx1ZVtzaXplUHJvcGVydHldO1xuICAgICAgICAgICAgY29udGVudFNpemUudmFsdWUgPSBjb250ZW50UmVjdC52YWx1ZVtzaXplUHJvcGVydHldO1xuICAgICAgICAgICAgaXNPdmVyZmxvd2luZy52YWx1ZSA9IGNvbnRhaW5lclNpemUudmFsdWUgKyAxIDwgY29udGVudFNpemUudmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmaXJzdFNlbGVjdGVkSW5kZXgudmFsdWUgPj0gMCAmJiBjb250ZW50UmVmLnZhbHVlKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBJcyB0aGlzIHRvbyBuYWl2ZT8gU2hvdWxkIHdlIHN0b3JlIGVsZW1lbnQgcmVmZXJlbmNlcyBpbiBncm91cCBjb21wb3NhYmxlP1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRFbGVtZW50ID0gY29udGVudFJlZi52YWx1ZS5jaGlsZHJlbltsYXN0U2VsZWN0ZWRJbmRleC52YWx1ZV07XG4gICAgICAgICAgICBpZiAoZmlyc3RTZWxlY3RlZEluZGV4LnZhbHVlID09PSAwIHx8ICFpc092ZXJmbG93aW5nLnZhbHVlKSB7XG4gICAgICAgICAgICAgIHNjcm9sbE9mZnNldC52YWx1ZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BzLmNlbnRlckFjdGl2ZSkge1xuICAgICAgICAgICAgICBzY3JvbGxPZmZzZXQudmFsdWUgPSBjYWxjdWxhdGVDZW50ZXJlZE9mZnNldCh7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50LFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclNpemU6IGNvbnRhaW5lclNpemUudmFsdWUsXG4gICAgICAgICAgICAgICAgY29udGVudFNpemU6IGNvbnRlbnRTaXplLnZhbHVlLFxuICAgICAgICAgICAgICAgIGlzUnRsOiBpc1J0bC52YWx1ZSxcbiAgICAgICAgICAgICAgICBpc0hvcml6b250YWw6IGlzSG9yaXpvbnRhbC52YWx1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPdmVyZmxvd2luZy52YWx1ZSkge1xuICAgICAgICAgICAgICBzY3JvbGxPZmZzZXQudmFsdWUgPSBjYWxjdWxhdGVVcGRhdGVkT2Zmc2V0KHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyU2l6ZTogY29udGFpbmVyU2l6ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICBjb250ZW50U2l6ZTogY29udGVudFNpemUudmFsdWUsXG4gICAgICAgICAgICAgICAgaXNSdGw6IGlzUnRsLnZhbHVlLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTY3JvbGxPZmZzZXQ6IHNjcm9sbE9mZnNldC52YWx1ZSxcbiAgICAgICAgICAgICAgICBpc0hvcml6b250YWw6IGlzSG9yaXpvbnRhbC52YWx1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGRpc2FibGVUcmFuc2l0aW9uID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAgbGV0IHN0YXJ0VG91Y2ggPSAwO1xuICAgIGxldCBzdGFydE9mZnNldCA9IDA7XG4gICAgZnVuY3Rpb24gb25Ub3VjaHN0YXJ0KGUpIHtcbiAgICAgIGNvbnN0IHNpemVQcm9wZXJ0eSA9IGlzSG9yaXpvbnRhbC52YWx1ZSA/ICdjbGllbnRYJyA6ICdjbGllbnRZJztcbiAgICAgIGNvbnN0IHNpZ24gPSBpc1J0bC52YWx1ZSAmJiBpc0hvcml6b250YWwudmFsdWUgPyAtMSA6IDE7XG4gICAgICBzdGFydE9mZnNldCA9IHNpZ24gKiBzY3JvbGxPZmZzZXQudmFsdWU7XG4gICAgICBzdGFydFRvdWNoID0gZS50b3VjaGVzWzBdW3NpemVQcm9wZXJ0eV07XG4gICAgICBkaXNhYmxlVHJhbnNpdGlvbi52YWx1ZSA9IHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uVG91Y2htb3ZlKGUpIHtcbiAgICAgIGlmICghaXNPdmVyZmxvd2luZy52YWx1ZSkgcmV0dXJuO1xuICAgICAgY29uc3Qgc2l6ZVByb3BlcnR5ID0gaXNIb3Jpem9udGFsLnZhbHVlID8gJ2NsaWVudFgnIDogJ2NsaWVudFknO1xuICAgICAgY29uc3Qgc2lnbiA9IGlzUnRsLnZhbHVlICYmIGlzSG9yaXpvbnRhbC52YWx1ZSA/IC0xIDogMTtcbiAgICAgIHNjcm9sbE9mZnNldC52YWx1ZSA9IHNpZ24gKiAoc3RhcnRPZmZzZXQgKyBzdGFydFRvdWNoIC0gZS50b3VjaGVzWzBdW3NpemVQcm9wZXJ0eV0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblRvdWNoZW5kKGUpIHtcbiAgICAgIGNvbnN0IG1heFNjcm9sbE9mZnNldCA9IGNvbnRlbnRTaXplLnZhbHVlIC0gY29udGFpbmVyU2l6ZS52YWx1ZTtcbiAgICAgIGlmIChzY3JvbGxPZmZzZXQudmFsdWUgPCAwIHx8ICFpc092ZXJmbG93aW5nLnZhbHVlKSB7XG4gICAgICAgIHNjcm9sbE9mZnNldC52YWx1ZSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHNjcm9sbE9mZnNldC52YWx1ZSA+PSBtYXhTY3JvbGxPZmZzZXQpIHtcbiAgICAgICAgc2Nyb2xsT2Zmc2V0LnZhbHVlID0gbWF4U2Nyb2xsT2Zmc2V0O1xuICAgICAgfVxuICAgICAgZGlzYWJsZVRyYW5zaXRpb24udmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gICAgICBpZiAoIWNvbnRhaW5lclJlZi52YWx1ZSkgcmV0dXJuO1xuICAgICAgY29udGFpbmVyUmVmLnZhbHVlW2lzSG9yaXpvbnRhbC52YWx1ZSA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IDA7XG4gICAgfVxuICAgIGNvbnN0IGlzRm9jdXNlZCA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIGZ1bmN0aW9uIG9uRm9jdXNpbihlKSB7XG4gICAgICBpc0ZvY3VzZWQudmFsdWUgPSB0cnVlO1xuICAgICAgaWYgKCFpc092ZXJmbG93aW5nLnZhbHVlIHx8ICFjb250ZW50UmVmLnZhbHVlKSByZXR1cm47XG5cbiAgICAgIC8vIEZvY3VzZWQgZWxlbWVudCBpcyBsaWtlbHkgdG8gYmUgdGhlIHJvb3Qgb2YgYW4gaXRlbSwgc28gYVxuICAgICAgLy8gYnJlYWR0aC1maXJzdCBzZWFyY2ggd2lsbCBwcm9iYWJseSBmaW5kIGl0IGluIHRoZSBmaXJzdCBpdGVyYXRpb25cbiAgICAgIGZvciAoY29uc3QgZWwgb2YgZS5jb21wb3NlZFBhdGgoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgY29udGVudFJlZi52YWx1ZS5jaGlsZHJlbikge1xuICAgICAgICAgIGlmIChpdGVtID09PSBlbCkge1xuICAgICAgICAgICAgc2Nyb2xsT2Zmc2V0LnZhbHVlID0gY2FsY3VsYXRlVXBkYXRlZE9mZnNldCh7XG4gICAgICAgICAgICAgIHNlbGVjdGVkRWxlbWVudDogaXRlbSxcbiAgICAgICAgICAgICAgY29udGFpbmVyU2l6ZTogY29udGFpbmVyU2l6ZS52YWx1ZSxcbiAgICAgICAgICAgICAgY29udGVudFNpemU6IGNvbnRlbnRTaXplLnZhbHVlLFxuICAgICAgICAgICAgICBpc1J0bDogaXNSdGwudmFsdWUsXG4gICAgICAgICAgICAgIGN1cnJlbnRTY3JvbGxPZmZzZXQ6IHNjcm9sbE9mZnNldC52YWx1ZSxcbiAgICAgICAgICAgICAgaXNIb3Jpem9udGFsOiBpc0hvcml6b250YWwudmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkZvY3Vzb3V0KGUpIHtcbiAgICAgIGlzRm9jdXNlZC52YWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkZvY3VzKGUpIHtcbiAgICAgIGlmICghaXNGb2N1c2VkLnZhbHVlICYmICEoZS5yZWxhdGVkVGFyZ2V0ICYmIGNvbnRlbnRSZWYudmFsdWU/LmNvbnRhaW5zKGUucmVsYXRlZFRhcmdldCkpKSBmb2N1cygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbktleWRvd24oZSkge1xuICAgICAgaWYgKCFjb250ZW50UmVmLnZhbHVlKSByZXR1cm47XG4gICAgICBpZiAoaXNIb3Jpem9udGFsLnZhbHVlKSB7XG4gICAgICAgIGlmIChlLmtleSA9PT0gJ0Fycm93UmlnaHQnKSB7XG4gICAgICAgICAgZm9jdXMoaXNSdGwudmFsdWUgPyAncHJldicgOiAnbmV4dCcpO1xuICAgICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnQXJyb3dMZWZ0Jykge1xuICAgICAgICAgIGZvY3VzKGlzUnRsLnZhbHVlID8gJ25leHQnIDogJ3ByZXYnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dEb3duJykge1xuICAgICAgICAgIGZvY3VzKCduZXh0Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdBcnJvd1VwJykge1xuICAgICAgICAgIGZvY3VzKCdwcmV2Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlLmtleSA9PT0gJ0hvbWUnKSB7XG4gICAgICAgIGZvY3VzKCdmaXJzdCcpO1xuICAgICAgfSBlbHNlIGlmIChlLmtleSA9PT0gJ0VuZCcpIHtcbiAgICAgICAgZm9jdXMoJ2xhc3QnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZm9jdXMobG9jYXRpb24pIHtcbiAgICAgIGlmICghY29udGVudFJlZi52YWx1ZSkgcmV0dXJuO1xuICAgICAgaWYgKCFsb2NhdGlvbikge1xuICAgICAgICBjb25zdCBmb2N1c2FibGUgPSBmb2N1c2FibGVDaGlsZHJlbihjb250ZW50UmVmLnZhbHVlKTtcbiAgICAgICAgZm9jdXNhYmxlWzBdPy5mb2N1cygpO1xuICAgICAgfSBlbHNlIGlmIChsb2NhdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIGNvbnN0IGVsID0gY29udGVudFJlZi52YWx1ZS5xdWVyeVNlbGVjdG9yKCc6Zm9jdXMnKT8ubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICBpZiAoZWwpIGVsLmZvY3VzKCk7ZWxzZSBmb2N1cygnZmlyc3QnKTtcbiAgICAgIH0gZWxzZSBpZiAobG9jYXRpb24gPT09ICdwcmV2Jykge1xuICAgICAgICBjb25zdCBlbCA9IGNvbnRlbnRSZWYudmFsdWUucXVlcnlTZWxlY3RvcignOmZvY3VzJyk/LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICAgIGlmIChlbCkgZWwuZm9jdXMoKTtlbHNlIGZvY3VzKCdsYXN0Jyk7XG4gICAgICB9IGVsc2UgaWYgKGxvY2F0aW9uID09PSAnZmlyc3QnKSB7XG4gICAgICAgIGNvbnRlbnRSZWYudmFsdWUuZmlyc3RFbGVtZW50Q2hpbGQ/LmZvY3VzKCk7XG4gICAgICB9IGVsc2UgaWYgKGxvY2F0aW9uID09PSAnbGFzdCcpIHtcbiAgICAgICAgY29udGVudFJlZi52YWx1ZS5sYXN0RWxlbWVudENoaWxkPy5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzY3JvbGxUbyhsb2NhdGlvbikge1xuICAgICAgY29uc3QgbmV3QWJzb2x1dGVPZmZzZXQgPSBzY3JvbGxPZmZzZXQudmFsdWUgKyAobG9jYXRpb24gPT09ICdwcmV2JyA/IC0xIDogMSkgKiBjb250YWluZXJTaXplLnZhbHVlO1xuICAgICAgc2Nyb2xsT2Zmc2V0LnZhbHVlID0gY2xhbXAobmV3QWJzb2x1dGVPZmZzZXQsIDAsIGNvbnRlbnRTaXplLnZhbHVlIC0gY29udGFpbmVyU2l6ZS52YWx1ZSk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRTdHlsZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICAvLyBUaGlzIGFkZHMgZnJpY3Rpb24gd2hlbiBzY3JvbGxpbmcgdGhlICd3cm9uZycgd2F5IHdoZW4gYXQgbWF4IG9mZnNldFxuICAgICAgbGV0IHNjcm9sbEFtb3VudCA9IHNjcm9sbE9mZnNldC52YWx1ZSA+IGNvbnRlbnRTaXplLnZhbHVlIC0gY29udGFpbmVyU2l6ZS52YWx1ZSA/IC0oY29udGVudFNpemUudmFsdWUgLSBjb250YWluZXJTaXplLnZhbHVlKSArIGJpYXMoY29udGVudFNpemUudmFsdWUgLSBjb250YWluZXJTaXplLnZhbHVlIC0gc2Nyb2xsT2Zmc2V0LnZhbHVlKSA6IC1zY3JvbGxPZmZzZXQudmFsdWU7XG5cbiAgICAgIC8vIFRoaXMgYWRkcyBmcmljdGlvbiB3aGVuIHNjcm9sbGluZyB0aGUgJ3dyb25nJyB3YXkgd2hlbiBhdCBtaW4gb2Zmc2V0XG4gICAgICBpZiAoc2Nyb2xsT2Zmc2V0LnZhbHVlIDw9IDApIHtcbiAgICAgICAgc2Nyb2xsQW1vdW50ID0gYmlhcygtc2Nyb2xsT2Zmc2V0LnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNpZ24gPSBpc1J0bC52YWx1ZSAmJiBpc0hvcml6b250YWwudmFsdWUgPyAtMSA6IDE7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUke2lzSG9yaXpvbnRhbC52YWx1ZSA/ICdYJyA6ICdZJ30oJHtzaWduICogc2Nyb2xsQW1vdW50fXB4KWAsXG4gICAgICAgIHRyYW5zaXRpb246IGRpc2FibGVUcmFuc2l0aW9uLnZhbHVlID8gJ25vbmUnIDogJycsXG4gICAgICAgIHdpbGxDaGFuZ2U6IGRpc2FibGVUcmFuc2l0aW9uLnZhbHVlID8gJ3RyYW5zZm9ybScgOiAnJ1xuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBzbG90UHJvcHMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgbmV4dDogZ3JvdXAubmV4dCxcbiAgICAgIHByZXY6IGdyb3VwLnByZXYsXG4gICAgICBzZWxlY3Q6IGdyb3VwLnNlbGVjdCxcbiAgICAgIGlzU2VsZWN0ZWQ6IGdyb3VwLmlzU2VsZWN0ZWRcbiAgICB9KSk7XG4gICAgY29uc3QgaGFzQWZmaXhlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHN3aXRjaCAocHJvcHMuc2hvd0Fycm93cykge1xuICAgICAgICAvLyBBbHdheXMgc2hvdyBhcnJvd3Mgb24gZGVza3RvcCAmIG1vYmlsZVxuICAgICAgICBjYXNlICdhbHdheXMnOlxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIC8vIEFsd2F5cyBzaG93IGFycm93cyBvbiBkZXNrdG9wXG4gICAgICAgIGNhc2UgJ2Rlc2t0b3AnOlxuICAgICAgICAgIHJldHVybiAhbW9iaWxlLnZhbHVlO1xuXG4gICAgICAgIC8vIFNob3cgYXJyb3dzIG9uIG1vYmlsZSB3aGVuIG92ZXJmbG93aW5nLlxuICAgICAgICAvLyBUaGlzIG1hdGNoZXMgdGhlIGRlZmF1bHQgMi4yIGJlaGF2aW9yXG4gICAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgICByZXR1cm4gaXNPdmVyZmxvd2luZy52YWx1ZSB8fCBNYXRoLmFicyhzY3JvbGxPZmZzZXQudmFsdWUpID4gMDtcblxuICAgICAgICAvLyBBbHdheXMgc2hvdyBvbiBtb2JpbGVcbiAgICAgICAgY2FzZSAnbW9iaWxlJzpcbiAgICAgICAgICByZXR1cm4gbW9iaWxlLnZhbHVlIHx8IGlzT3ZlcmZsb3dpbmcudmFsdWUgfHwgTWF0aC5hYnMoc2Nyb2xsT2Zmc2V0LnZhbHVlKSA+IDA7XG5cbiAgICAgICAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9jb21wb25lbnRzL3RhYnMjc2Nyb2xsYWJsZS10YWJzXG4gICAgICAgIC8vIEFsd2F5cyBzaG93IGFycm93cyB3aGVuXG4gICAgICAgIC8vIG92ZXJmbG93ZWQgb24gZGVza3RvcFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAhbW9iaWxlLnZhbHVlICYmIChpc092ZXJmbG93aW5nLnZhbHVlIHx8IE1hdGguYWJzKHNjcm9sbE9mZnNldC52YWx1ZSkgPiAwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBoYXNQcmV2ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIE1hdGguYWJzKHNjcm9sbE9mZnNldC52YWx1ZSkgPiAwO1xuICAgIH0pO1xuICAgIGNvbnN0IGhhc05leHQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICAvLyBDaGVjayBvbmUgc2Nyb2xsIGFoZWFkIHRvIGtub3cgdGhlIHdpZHRoIG9mIHJpZ2h0LW1vc3QgaXRlbVxuICAgICAgcmV0dXJuIGNvbnRlbnRTaXplLnZhbHVlID4gTWF0aC5hYnMoc2Nyb2xsT2Zmc2V0LnZhbHVlKSArIGNvbnRhaW5lclNpemUudmFsdWU7XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LXNsaWRlLWdyb3VwJywge1xuICAgICAgICAndi1zbGlkZS1ncm91cC0tdmVydGljYWwnOiAhaXNIb3Jpem9udGFsLnZhbHVlLFxuICAgICAgICAndi1zbGlkZS1ncm91cC0taGFzLWFmZml4ZXMnOiBoYXNBZmZpeGVzLnZhbHVlLFxuICAgICAgICAndi1zbGlkZS1ncm91cC0taXMtb3ZlcmZsb3dpbmcnOiBpc092ZXJmbG93aW5nLnZhbHVlXG4gICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlLFxuICAgICAgXCJ0YWJpbmRleFwiOiBpc0ZvY3VzZWQudmFsdWUgfHwgZ3JvdXAuc2VsZWN0ZWQudmFsdWUubGVuZ3RoID8gLTEgOiAwLFxuICAgICAgXCJvbkZvY3VzXCI6IG9uRm9jdXNcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbaGFzQWZmaXhlcy52YWx1ZSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImtleVwiOiBcInByZXZcIixcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytc2xpZGUtZ3JvdXBfX3ByZXYnLCB7XG4gICAgICAgICAgJ3Ytc2xpZGUtZ3JvdXBfX3ByZXYtLWRpc2FibGVkJzogIWhhc1ByZXYudmFsdWVcbiAgICAgICAgfV0sXG4gICAgICAgIFwib25DbGlja1wiOiAoKSA9PiBzY3JvbGxUbygncHJldicpXG4gICAgICB9LCBbc2xvdHMucHJldj8uKHNsb3RQcm9wcy52YWx1ZSkgPz8gX2NyZWF0ZVZOb2RlKFZGYWRlVHJhbnNpdGlvbiwgbnVsbCwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgXCJpY29uXCI6IGlzUnRsLnZhbHVlID8gcHJvcHMubmV4dEljb24gOiBwcm9wcy5wcmV2SWNvblxuICAgICAgICB9LCBudWxsKV1cbiAgICAgIH0pXSksIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwiY29udGFpbmVyXCIsXG4gICAgICAgIFwicmVmXCI6IGNvbnRhaW5lclJlZixcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtc2xpZGUtZ3JvdXBfX2NvbnRhaW5lclwiLFxuICAgICAgICBcIm9uU2Nyb2xsXCI6IG9uU2Nyb2xsXG4gICAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJyZWZcIjogY29udGVudFJlZixcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtc2xpZGUtZ3JvdXBfX2NvbnRlbnRcIixcbiAgICAgICAgXCJzdHlsZVwiOiBjb250ZW50U3R5bGVzLnZhbHVlLFxuICAgICAgICBcIm9uVG91Y2hzdGFydFBhc3NpdmVcIjogb25Ub3VjaHN0YXJ0LFxuICAgICAgICBcIm9uVG91Y2htb3ZlUGFzc2l2ZVwiOiBvblRvdWNobW92ZSxcbiAgICAgICAgXCJvblRvdWNoZW5kUGFzc2l2ZVwiOiBvblRvdWNoZW5kLFxuICAgICAgICBcIm9uRm9jdXNpblwiOiBvbkZvY3VzaW4sXG4gICAgICAgIFwib25Gb2N1c291dFwiOiBvbkZvY3Vzb3V0LFxuICAgICAgICBcIm9uS2V5ZG93blwiOiBvbktleWRvd25cbiAgICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oc2xvdFByb3BzLnZhbHVlKV0pXSksIGhhc0FmZml4ZXMudmFsdWUgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJrZXlcIjogXCJuZXh0XCIsXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXNsaWRlLWdyb3VwX19uZXh0Jywge1xuICAgICAgICAgICd2LXNsaWRlLWdyb3VwX19uZXh0LS1kaXNhYmxlZCc6ICFoYXNOZXh0LnZhbHVlXG4gICAgICAgIH1dLFxuICAgICAgICBcIm9uQ2xpY2tcIjogKCkgPT4gc2Nyb2xsVG8oJ25leHQnKVxuICAgICAgfSwgW3Nsb3RzLm5leHQ/LihzbG90UHJvcHMudmFsdWUpID8/IF9jcmVhdGVWTm9kZShWRmFkZVRyYW5zaXRpb24sIG51bGwsIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgIFwiaWNvblwiOiBpc1J0bC52YWx1ZSA/IHByb3BzLnByZXZJY29uIDogcHJvcHMubmV4dEljb25cbiAgICAgICAgfSwgbnVsbCldXG4gICAgICB9KV0pXVxuICAgIH0pKTtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0ZWQ6IGdyb3VwLnNlbGVjdGVkLFxuICAgICAgc2Nyb2xsVG8sXG4gICAgICBzY3JvbGxPZmZzZXQsXG4gICAgICBmb2N1c1xuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlNsaWRlR3JvdXAubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlR3JvdXBJdGVtUHJvcHMsIHVzZUdyb3VwSXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ncm91cC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBWU2xpZGVHcm91cFN5bWJvbCB9IGZyb20gXCIuL1ZTbGlkZUdyb3VwLm1qc1wiO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IFZTbGlkZUdyb3VwSXRlbSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWU2xpZGVHcm91cEl0ZW0nLFxuICBwcm9wczogbWFrZUdyb3VwSXRlbVByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ2dyb3VwOnNlbGVjdGVkJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBzbGlkZUdyb3VwSXRlbSA9IHVzZUdyb3VwSXRlbShwcm9wcywgVlNsaWRlR3JvdXBTeW1ib2wpO1xuICAgIHJldHVybiAoKSA9PiBzbG90cy5kZWZhdWx0Py4oe1xuICAgICAgaXNTZWxlY3RlZDogc2xpZGVHcm91cEl0ZW0uaXNTZWxlY3RlZC52YWx1ZSxcbiAgICAgIHNlbGVjdDogc2xpZGVHcm91cEl0ZW0uc2VsZWN0LFxuICAgICAgdG9nZ2xlOiBzbGlkZUdyb3VwSXRlbS50b2dnbGUsXG4gICAgICBzZWxlY3RlZENsYXNzOiBzbGlkZUdyb3VwSXRlbS5zZWxlY3RlZENsYXNzLnZhbHVlXG4gICAgfSk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlNsaWRlR3JvdXBJdGVtLm1qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlNuYWNrYmFyLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZPdmVybGF5IH0gZnJvbSBcIi4uL1ZPdmVybGF5L2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZPdmVybGF5UHJvcHMgfSBmcm9tIFwiLi4vVk92ZXJsYXkvVk92ZXJsYXkubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBmb3J3YXJkUmVmcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb3J3YXJkUmVmcy5tanNcIjtcbmltcG9ydCB7IG1ha2VMb2NhdGlvblByb3BzLCB1c2VMb2NhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VQb3NpdGlvblByb3BzLCB1c2VQb3NpdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wb3NpdGlvbi5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyB1c2VTY29wZUlkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Njb3BlSWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiO1xuaW1wb3J0IHsgZ2VuT3ZlcmxheXMsIG1ha2VWYXJpYW50UHJvcHMsIHVzZVZhcmlhbnQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdmFyaWFudC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBtZXJnZVByb3BzLCBvbk1vdW50ZWQsIHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgb21pdCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVlNuYWNrYmFyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBtdWx0aUxpbmU6IEJvb2xlYW4sXG4gIHRpbWVvdXQ6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDUwMDBcbiAgfSxcbiAgdmVydGljYWw6IEJvb2xlYW4sXG4gIC4uLm1ha2VMb2NhdGlvblByb3BzKHtcbiAgICBsb2NhdGlvbjogJ2JvdHRvbSdcbiAgfSksXG4gIC4uLm1ha2VQb3NpdGlvblByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVZhcmlhbnRQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpLFxuICAuLi5vbWl0KG1ha2VWT3ZlcmxheVByb3BzKHtcbiAgICB0cmFuc2l0aW9uOiAndi1zbmFja2Jhci10cmFuc2l0aW9uJ1xuICB9KSwgWydwZXJzaXN0ZW50JywgJ25vQ2xpY2tBbmltYXRpb24nLCAnc2NyaW0nLCAnc2Nyb2xsU3RyYXRlZ3knXSlcbn0sICdWU25hY2tiYXInKTtcbmV4cG9ydCBjb25zdCBWU25hY2tiYXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlNuYWNrYmFyJyxcbiAgcHJvcHM6IG1ha2VWU25hY2tiYXJQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHYgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxvY2F0aW9uU3R5bGVzXG4gICAgfSA9IHVzZUxvY2F0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBwb3NpdGlvbkNsYXNzZXNcbiAgICB9ID0gdXNlUG9zaXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjb3BlSWRcbiAgICB9ID0gdXNlU2NvcGVJZCgpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbG9yQ2xhc3NlcyxcbiAgICAgIGNvbG9yU3R5bGVzLFxuICAgICAgdmFyaWFudENsYXNzZXNcbiAgICB9ID0gdXNlVmFyaWFudChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3Qgb3ZlcmxheSA9IHJlZigpO1xuICAgIHdhdGNoKGlzQWN0aXZlLCBzdGFydFRpbWVvdXQpO1xuICAgIHdhdGNoKCgpID0+IHByb3BzLnRpbWVvdXQsIHN0YXJ0VGltZW91dCk7XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIGlmIChpc0FjdGl2ZS52YWx1ZSkgc3RhcnRUaW1lb3V0KCk7XG4gICAgfSk7XG4gICAgbGV0IGFjdGl2ZVRpbWVvdXQgPSAtMTtcbiAgICBmdW5jdGlvbiBzdGFydFRpbWVvdXQoKSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGFjdGl2ZVRpbWVvdXQpO1xuICAgICAgY29uc3QgdGltZW91dCA9IE51bWJlcihwcm9wcy50aW1lb3V0KTtcbiAgICAgIGlmICghaXNBY3RpdmUudmFsdWUgfHwgdGltZW91dCA9PT0gLTEpIHJldHVybjtcbiAgICAgIGFjdGl2ZVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlzQWN0aXZlLnZhbHVlID0gZmFsc2U7XG4gICAgICB9LCB0aW1lb3V0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Qb2ludGVyZW50ZXIoKSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGFjdGl2ZVRpbWVvdXQpO1xuICAgIH1cbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgW292ZXJsYXlQcm9wc10gPSBWT3ZlcmxheS5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZPdmVybGF5LCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwicmVmXCI6IG92ZXJsYXksXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXNuYWNrYmFyJywge1xuICAgICAgICAgICd2LXNuYWNrYmFyLS1hY3RpdmUnOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgICAndi1zbmFja2Jhci0tbXVsdGktbGluZSc6IHByb3BzLm11bHRpTGluZSAmJiAhcHJvcHMudmVydGljYWwsXG4gICAgICAgICAgJ3Ytc25hY2tiYXItLXZlcnRpY2FsJzogcHJvcHMudmVydGljYWxcbiAgICAgICAgfSwgcG9zaXRpb25DbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIG92ZXJsYXlQcm9wcywge1xuICAgICAgICBcIm1vZGVsVmFsdWVcIjogaXNBY3RpdmUudmFsdWUsXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gaXNBY3RpdmUudmFsdWUgPSAkZXZlbnQsXG4gICAgICAgIFwiY29udGVudFByb3BzXCI6IG1lcmdlUHJvcHMoe1xuICAgICAgICAgIGNsYXNzOiBbJ3Ytc25hY2tiYXJfX3dyYXBwZXInLCB0aGVtZUNsYXNzZXMudmFsdWUsIGNvbG9yQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHZhcmlhbnRDbGFzc2VzLnZhbHVlXSxcbiAgICAgICAgICBzdHlsZTogW2xvY2F0aW9uU3R5bGVzLnZhbHVlLCBjb2xvclN0eWxlcy52YWx1ZV0sXG4gICAgICAgICAgb25Qb2ludGVyZW50ZXIsXG4gICAgICAgICAgb25Qb2ludGVybGVhdmU6IHN0YXJ0VGltZW91dFxuICAgICAgICB9LCBvdmVybGF5UHJvcHMuY29udGVudFByb3BzKSxcbiAgICAgICAgXCJwZXJzaXN0ZW50XCI6IHRydWUsXG4gICAgICAgIFwibm9DbGlja0FuaW1hdGlvblwiOiB0cnVlLFxuICAgICAgICBcInNjcmltXCI6IGZhbHNlLFxuICAgICAgICBcInNjcm9sbFN0cmF0ZWd5XCI6IFwibm9uZVwiLFxuICAgICAgICBcIl9kaXNhYmxlR2xvYmFsU3RhY2tcIjogdHJ1ZVxuICAgICAgfSwgc2NvcGVJZCksIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW2dlbk92ZXJsYXlzKGZhbHNlLCAndi1zbmFja2JhcicpLCBzbG90cy5kZWZhdWx0ICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtc25hY2tiYXJfX2NvbnRlbnRcIixcbiAgICAgICAgICBcInJvbGVcIjogXCJzdGF0dXNcIixcbiAgICAgICAgICBcImFyaWEtbGl2ZVwiOiBcInBvbGl0ZVwiXG4gICAgICAgIH0sIFtzbG90cy5kZWZhdWx0KCldKSwgc2xvdHMuYWN0aW9ucyAmJiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZCdG46IHtcbiAgICAgICAgICAgICAgdmFyaWFudDogJ3RleHQnLFxuICAgICAgICAgICAgICByaXBwbGU6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwidi1zbmFja2Jhcl9fYWN0aW9uc1wiXG4gICAgICAgICAgfSwgW3Nsb3RzLmFjdGlvbnMoKV0pXVxuICAgICAgICB9KV0sXG4gICAgICAgIGFjdGl2YXRvcjogc2xvdHMuYWN0aXZhdG9yXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm9yd2FyZFJlZnMoe30sIG92ZXJsYXkpO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZTbmFja2Jhci5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlN3aXRjaC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlNjYWxlVHJhbnNpdGlvbiB9IGZyb20gXCIuLi90cmFuc2l0aW9ucy9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZJY29uIH0gZnJvbSBcIi4uL1ZJY29uL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZJbnB1dFByb3BzLCBWSW5wdXQgfSBmcm9tIFwiLi4vVklucHV0L1ZJbnB1dC5tanNcIjtcbmltcG9ydCB7IFZQcm9ncmVzc0NpcmN1bGFyIH0gZnJvbSBcIi4uL1ZQcm9ncmVzc0NpcmN1bGFyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZTZWxlY3Rpb25Db250cm9sUHJvcHMsIFZTZWxlY3Rpb25Db250cm9sIH0gZnJvbSBcIi4uL1ZTZWxlY3Rpb25Db250cm9sL1ZTZWxlY3Rpb25Db250cm9sLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlRm9jdXMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9jdXMubWpzXCI7XG5pbXBvcnQgeyBMb2FkZXJTbG90LCB1c2VMb2FkZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9hZGVyLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgcmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGZpbHRlcklucHV0QXR0cnMsIGdlbmVyaWNDb21wb25lbnQsIGdldFVpZCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVlN3aXRjaFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgaW5kZXRlcm1pbmF0ZTogQm9vbGVhbixcbiAgaW5zZXQ6IEJvb2xlYW4sXG4gIGZsYXQ6IEJvb2xlYW4sXG4gIGxvYWRpbmc6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICAuLi5tYWtlVklucHV0UHJvcHMoKSxcbiAgLi4ubWFrZVZTZWxlY3Rpb25Db250cm9sUHJvcHMoKVxufSwgJ1ZTd2l0Y2gnKTtcbmV4cG9ydCBjb25zdCBWU3dpdGNoID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZTd2l0Y2gnLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczogbWFrZVZTd2l0Y2hQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6Zm9jdXNlZCc6IGZvY3VzZWQgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiAoKSA9PiB0cnVlLFxuICAgICd1cGRhdGU6aW5kZXRlcm1pbmF0ZSc6IHZhbCA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGF0dHJzLFxuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBpbmRldGVybWluYXRlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnaW5kZXRlcm1pbmF0ZScpO1xuICAgIGNvbnN0IG1vZGVsID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxvYWRlckNsYXNzZXNcbiAgICB9ID0gdXNlTG9hZGVyKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBpc0ZvY3VzZWQsXG4gICAgICBmb2N1cyxcbiAgICAgIGJsdXJcbiAgICB9ID0gdXNlRm9jdXMocHJvcHMpO1xuICAgIGNvbnN0IGNvbnRyb2wgPSByZWYoKTtcbiAgICBjb25zdCBsb2FkZXJDb2xvciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiB0eXBlb2YgcHJvcHMubG9hZGluZyA9PT0gJ3N0cmluZycgJiYgcHJvcHMubG9hZGluZyAhPT0gJycgPyBwcm9wcy5sb2FkaW5nIDogcHJvcHMuY29sb3I7XG4gICAgfSk7XG4gICAgY29uc3QgdWlkID0gZ2V0VWlkKCk7XG4gICAgY29uc3QgaWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5pZCB8fCBgc3dpdGNoLSR7dWlkfWApO1xuICAgIGZ1bmN0aW9uIG9uQ2hhbmdlKCkge1xuICAgICAgaWYgKGluZGV0ZXJtaW5hdGUudmFsdWUpIHtcbiAgICAgICAgaW5kZXRlcm1pbmF0ZS52YWx1ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvblRyYWNrQ2xpY2soZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnRyb2wudmFsdWU/LmlucHV0Py5jbGljaygpO1xuICAgIH1cbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgW3Jvb3RBdHRycywgY29udHJvbEF0dHJzXSA9IGZpbHRlcklucHV0QXR0cnMoYXR0cnMpO1xuICAgICAgY29uc3QgW2lucHV0UHJvcHMsIF8xXSA9IFZJbnB1dC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICBjb25zdCBbY29udHJvbFByb3BzLCBfMl0gPSBWU2VsZWN0aW9uQ29udHJvbC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZJbnB1dCwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcImNsYXNzXCI6IFsndi1zd2l0Y2gnLCB7XG4gICAgICAgICAgJ3Ytc3dpdGNoLS1pbnNldCc6IHByb3BzLmluc2V0XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAndi1zd2l0Y2gtLWluZGV0ZXJtaW5hdGUnOiBpbmRldGVybWluYXRlLnZhbHVlXG4gICAgICAgIH0sIGxvYWRlckNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSwgcm9vdEF0dHJzLCBpbnB1dFByb3BzLCB7XG4gICAgICAgIFwiaWRcIjogaWQudmFsdWUsXG4gICAgICAgIFwiZm9jdXNlZFwiOiBpc0ZvY3VzZWQudmFsdWVcbiAgICAgIH0pLCB7XG4gICAgICAgIC4uLnNsb3RzLFxuICAgICAgICBkZWZhdWx0OiBfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbWVzc2FnZXNJZCxcbiAgICAgICAgICAgIGlzRGlzYWJsZWQsXG4gICAgICAgICAgICBpc1JlYWRvbmx5LFxuICAgICAgICAgICAgaXNWYWxpZFxuICAgICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZTZWxlY3Rpb25Db250cm9sLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgICBcInJlZlwiOiBjb250cm9sXG4gICAgICAgICAgfSwgY29udHJvbFByb3BzLCB7XG4gICAgICAgICAgICBcIm1vZGVsVmFsdWVcIjogbW9kZWwudmFsdWUsXG4gICAgICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogWyRldmVudCA9PiBtb2RlbC52YWx1ZSA9ICRldmVudCwgb25DaGFuZ2VdLFxuICAgICAgICAgICAgXCJpZFwiOiBpZC52YWx1ZSxcbiAgICAgICAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBtZXNzYWdlc0lkLnZhbHVlLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICAgIFwiYXJpYS1jaGVja2VkXCI6IGluZGV0ZXJtaW5hdGUudmFsdWUgPyAnbWl4ZWQnIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgXCJkaXNhYmxlZFwiOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgICAgICAgXCJyZWFkb25seVwiOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgICAgICAgICAgXCJvbkZvY3VzXCI6IGZvY3VzLFxuICAgICAgICAgICAgXCJvbkJsdXJcIjogYmx1clxuICAgICAgICAgIH0sIGNvbnRyb2xBdHRycyksIHtcbiAgICAgICAgICAgIC4uLnNsb3RzLFxuICAgICAgICAgICAgZGVmYXVsdDogX3JlZjMgPT4ge1xuICAgICAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gICAgICAgICAgICAgIH0gPSBfcmVmMztcbiAgICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytc3dpdGNoX190cmFjaycsIC4uLmJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgICAgICAgICAgIFwic3R5bGVcIjogYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlLFxuICAgICAgICAgICAgICAgIFwib25DbGlja1wiOiBvblRyYWNrQ2xpY2tcbiAgICAgICAgICAgICAgfSwgbnVsbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5wdXQ6IF9yZWY0ID0+IHtcbiAgICAgICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgICAgICBpbnB1dE5vZGUsXG4gICAgICAgICAgICAgICAgaWNvbixcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlc1xuICAgICAgICAgICAgICB9ID0gX3JlZjQ7XG4gICAgICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbaW5wdXROb2RlLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogWyd2LXN3aXRjaF9fdGh1bWInLCB7XG4gICAgICAgICAgICAgICAgICAndi1zd2l0Y2hfX3RodW1iLS1maWxsZWQnOiBpY29uIHx8IHByb3BzLmxvYWRpbmdcbiAgICAgICAgICAgICAgICB9LCBwcm9wcy5pbnNldCA/IHVuZGVmaW5lZCA6IGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgICAgICAgICAgIFwic3R5bGVcIjogcHJvcHMuaW5zZXQgPyB1bmRlZmluZWQgOiBiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWVcbiAgICAgICAgICAgICAgfSwgW19jcmVhdGVWTm9kZShWU2NhbGVUcmFuc2l0aW9uLCBudWxsLCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gWyFwcm9wcy5sb2FkaW5nID8gaWNvbiAmJiBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICAgICAgICAgIFwia2V5XCI6IGljb24sXG4gICAgICAgICAgICAgICAgICBcImljb25cIjogaWNvbixcbiAgICAgICAgICAgICAgICAgIFwic2l6ZVwiOiBcIngtc21hbGxcIlxuICAgICAgICAgICAgICAgIH0sIG51bGwpIDogX2NyZWF0ZVZOb2RlKExvYWRlclNsb3QsIHtcbiAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInYtc3dpdGNoXCIsXG4gICAgICAgICAgICAgICAgICBcImFjdGl2ZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgXCJjb2xvclwiOiBpc1ZhbGlkLnZhbHVlID09PSBmYWxzZSA/IHVuZGVmaW5lZCA6IGxvYWRlckNvbG9yLnZhbHVlXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgZGVmYXVsdDogc2xvdFByb3BzID0+IHNsb3RzLmxvYWRlciA/IHNsb3RzLmxvYWRlcihzbG90UHJvcHMpIDogX2NyZWF0ZVZOb2RlKFZQcm9ncmVzc0NpcmN1bGFyLCB7XG4gICAgICAgICAgICAgICAgICAgIFwiYWN0aXZlXCI6IHNsb3RQcm9wcy5pc0FjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJjb2xvclwiOiBzbG90UHJvcHMuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXRlcm1pbmF0ZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcInNpemVcIjogXCIxNlwiLFxuICAgICAgICAgICAgICAgICAgICBcIndpZHRoXCI6IFwiMlwiXG4gICAgICAgICAgICAgICAgICB9LCBudWxsKVxuICAgICAgICAgICAgICAgIH0pXVxuICAgICAgICAgICAgICB9KV0pXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WU3dpdGNoLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlN5c3RlbUJhci5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRWxldmF0aW9uUHJvcHMsIHVzZUVsZXZhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzXCI7XG5pbXBvcnQgeyBtYWtlTGF5b3V0SXRlbVByb3BzLCB1c2VMYXlvdXRJdGVtIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xheW91dC5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IHVzZVNzckJvb3QgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc3NyQm9vdC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBzaGFsbG93UmVmLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWU3lzdGVtQmFyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjb2xvcjogU3RyaW5nLFxuICBoZWlnaHQ6IFtOdW1iZXIsIFN0cmluZ10sXG4gIHdpbmRvdzogQm9vbGVhbixcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlTGF5b3V0SXRlbVByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWU3lzdGVtQmFyJyk7XG5leHBvcnQgY29uc3QgVlN5c3RlbUJhciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWU3lzdGVtQmFyJyxcbiAgcHJvcHM6IG1ha2VWU3lzdGVtQmFyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcih0b1JlZihwcm9wcywgJ2NvbG9yJykpO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbkNsYXNzZXNcbiAgICB9ID0gdXNlRWxldmF0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBzc3JCb290U3R5bGVzXG4gICAgfSA9IHVzZVNzckJvb3QoKTtcbiAgICBjb25zdCBoZWlnaHQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5oZWlnaHQgPz8gKHByb3BzLndpbmRvdyA/IDMyIDogMjQpKTtcbiAgICBjb25zdCB7XG4gICAgICBsYXlvdXRJdGVtU3R5bGVzXG4gICAgfSA9IHVzZUxheW91dEl0ZW0oe1xuICAgICAgaWQ6IHByb3BzLm5hbWUsXG4gICAgICBvcmRlcjogY29tcHV0ZWQoKCkgPT4gcGFyc2VJbnQocHJvcHMub3JkZXIsIDEwKSksXG4gICAgICBwb3NpdGlvbjogc2hhbGxvd1JlZigndG9wJyksXG4gICAgICBsYXlvdXRTaXplOiBoZWlnaHQsXG4gICAgICBlbGVtZW50U2l6ZTogaGVpZ2h0LFxuICAgICAgYWN0aXZlOiBjb21wdXRlZCgoKSA9PiB0cnVlKSxcbiAgICAgIGFic29sdXRlOiB0b1JlZihwcm9wcywgJ2Fic29sdXRlJylcbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJjbGFzc1wiOiBbJ3Ytc3lzdGVtLWJhcicsIHtcbiAgICAgICAgJ3Ytc3lzdGVtLWJhci0td2luZG93JzogcHJvcHMud2luZG93XG4gICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIGVsZXZhdGlvbkNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IFtiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWUsIGxheW91dEl0ZW1TdHlsZXMudmFsdWUsIHNzckJvb3RTdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXVxuICAgIH0sIHNsb3RzKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZTeXN0ZW1CYXIubWpzLm1hcCIsIi8vIFR5cGVzXG5cbmV4cG9ydCBjb25zdCBWVGFic1N5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6di10YWJzJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZWQubWpzLm1hcCIsImltcG9ydCB7IG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WVGFiLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBtYWtlVkJ0blByb3BzLCBWQnRuIH0gZnJvbSBcIi4uL1ZCdG4vVkJ0bi5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVRleHRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgcmVmLCBzaGFsbG93UmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IFZUYWJzU3ltYm9sIH0gZnJvbSBcIi4vc2hhcmVkLm1qc1wiO1xuaW1wb3J0IHsgYW5pbWF0ZSwgZ2VuZXJpY0NvbXBvbmVudCwgb21pdCwgcHJvcHNGYWN0b3J5LCBzdGFuZGFyZEVhc2luZywgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZUYWJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGZpeGVkOiBCb29sZWFuLFxuICBzbGlkZXJDb2xvcjogU3RyaW5nLFxuICBoaWRlU2xpZGVyOiBCb29sZWFuLFxuICBkaXJlY3Rpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2hvcml6b250YWwnXG4gIH0sXG4gIC4uLm9taXQobWFrZVZCdG5Qcm9wcyh7XG4gICAgc2VsZWN0ZWRDbGFzczogJ3YtdGFiLS1zZWxlY3RlZCcsXG4gICAgdmFyaWFudDogJ3RleHQnXG4gIH0pLCBbJ2FjdGl2ZScsICdibG9jaycsICdmbGF0JywgJ2xvY2F0aW9uJywgJ3Bvc2l0aW9uJywgJ3N5bWJvbCddKVxufSwgJ1ZUYWInKTtcbmV4cG9ydCBjb25zdCBWVGFiID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZUYWInLFxuICBwcm9wczogbWFrZVZUYWJQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90cyxcbiAgICAgIGF0dHJzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGV4dENvbG9yQ2xhc3Nlczogc2xpZGVyQ29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzOiBzbGlkZXJDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VUZXh0Q29sb3IocHJvcHMsICdzbGlkZXJDb2xvcicpO1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKTtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAgY29uc3Qgcm9vdEVsID0gcmVmKCk7XG4gICAgY29uc3Qgc2xpZGVyRWwgPSByZWYoKTtcbiAgICBmdW5jdGlvbiB1cGRhdGVTbGlkZXIoX3JlZjIpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIHZhbHVlXG4gICAgICB9ID0gX3JlZjI7XG4gICAgICBpc1NlbGVjdGVkLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgY29uc3QgcHJldkVsID0gcm9vdEVsLnZhbHVlPy4kZWwucGFyZW50RWxlbWVudD8ucXVlcnlTZWxlY3RvcignLnYtdGFiLS1zZWxlY3RlZCAudi10YWJfX3NsaWRlcicpO1xuICAgICAgICBjb25zdCBuZXh0RWwgPSBzbGlkZXJFbC52YWx1ZTtcbiAgICAgICAgaWYgKCFwcmV2RWwgfHwgIW5leHRFbCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBjb2xvciA9IGdldENvbXB1dGVkU3R5bGUocHJldkVsKS5jb2xvcjtcbiAgICAgICAgY29uc3QgcHJldkJveCA9IHByZXZFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3QgbmV4dEJveCA9IG5leHRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3QgeHkgPSBpc0hvcml6b250YWwudmFsdWUgPyAneCcgOiAneSc7XG4gICAgICAgIGNvbnN0IFhZID0gaXNIb3Jpem9udGFsLnZhbHVlID8gJ1gnIDogJ1knO1xuICAgICAgICBjb25zdCByaWdodEJvdHRvbSA9IGlzSG9yaXpvbnRhbC52YWx1ZSA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgICAgICAgY29uc3Qgd2lkdGhIZWlnaHQgPSBpc0hvcml6b250YWwudmFsdWUgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gICAgICAgIGNvbnN0IHByZXZQb3MgPSBwcmV2Qm94W3h5XTtcbiAgICAgICAgY29uc3QgbmV4dFBvcyA9IG5leHRCb3hbeHldO1xuICAgICAgICBjb25zdCBkZWx0YSA9IHByZXZQb3MgPiBuZXh0UG9zID8gcHJldkJveFtyaWdodEJvdHRvbV0gLSBuZXh0Qm94W3JpZ2h0Qm90dG9tXSA6IHByZXZCb3hbeHldIC0gbmV4dEJveFt4eV07XG4gICAgICAgIGNvbnN0IG9yaWdpbiA9IE1hdGguc2lnbihkZWx0YSkgPiAwID8gaXNIb3Jpem9udGFsLnZhbHVlID8gJ3JpZ2h0JyA6ICdib3R0b20nIDogTWF0aC5zaWduKGRlbHRhKSA8IDAgPyBpc0hvcml6b250YWwudmFsdWUgPyAnbGVmdCcgOiAndG9wJyA6ICdjZW50ZXInO1xuICAgICAgICBjb25zdCBzaXplID0gTWF0aC5hYnMoZGVsdGEpICsgKE1hdGguc2lnbihkZWx0YSkgPCAwID8gcHJldkJveFt3aWR0aEhlaWdodF0gOiBuZXh0Qm94W3dpZHRoSGVpZ2h0XSk7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gc2l6ZSAvIE1hdGgubWF4KHByZXZCb3hbd2lkdGhIZWlnaHRdLCBuZXh0Qm94W3dpZHRoSGVpZ2h0XSkgfHwgMDtcbiAgICAgICAgY29uc3QgaW5pdGlhbFNjYWxlID0gcHJldkJveFt3aWR0aEhlaWdodF0gLyBuZXh0Qm94W3dpZHRoSGVpZ2h0XSB8fCAwO1xuICAgICAgICBjb25zdCBzaWdtYSA9IDEuNTtcbiAgICAgICAgYW5pbWF0ZShuZXh0RWwsIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFtjb2xvciwgJ2N1cnJlbnRjb2xvciddLFxuICAgICAgICAgIHRyYW5zZm9ybTogW2B0cmFuc2xhdGUke1hZfSgke2RlbHRhfXB4KSBzY2FsZSR7WFl9KCR7aW5pdGlhbFNjYWxlfSlgLCBgdHJhbnNsYXRlJHtYWX0oJHtkZWx0YSAvIHNpZ21hfXB4KSBzY2FsZSR7WFl9KCR7KHNjYWxlIC0gMSkgLyBzaWdtYSArIDF9KWAsICdub25lJ10sXG4gICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiBBcnJheSgzKS5maWxsKG9yaWdpbilcbiAgICAgICAgfSwge1xuICAgICAgICAgIGR1cmF0aW9uOiAyMjUsXG4gICAgICAgICAgZWFzaW5nOiBzdGFuZGFyZEVhc2luZ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFtidG5Qcm9wc10gPSBWQnRuLmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVkJ0biwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcInN5bWJvbFwiOiBWVGFic1N5bWJvbCxcbiAgICAgICAgXCJyZWZcIjogcm9vdEVsLFxuICAgICAgICBcImNsYXNzXCI6IFsndi10YWInLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGUsXG4gICAgICAgIFwidGFiaW5kZXhcIjogaXNTZWxlY3RlZC52YWx1ZSA/IDAgOiAtMSxcbiAgICAgICAgXCJyb2xlXCI6IFwidGFiXCIsXG4gICAgICAgIFwiYXJpYS1zZWxlY3RlZFwiOiBTdHJpbmcoaXNTZWxlY3RlZC52YWx1ZSksXG4gICAgICAgIFwiYWN0aXZlXCI6IGZhbHNlXG4gICAgICB9LCBidG5Qcm9wcywgYXR0cnMsIHtcbiAgICAgICAgXCJibG9ja1wiOiBwcm9wcy5maXhlZCxcbiAgICAgICAgXCJtYXhXaWR0aFwiOiBwcm9wcy5maXhlZCA/IDMwMCA6IHVuZGVmaW5lZCxcbiAgICAgICAgXCJvbkdyb3VwOnNlbGVjdGVkXCI6IHVwZGF0ZVNsaWRlclxuICAgICAgfSksIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmRlZmF1bHQ/LigpID8/IHByb3BzLnRleHQsICFwcm9wcy5oaWRlU2xpZGVyICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJyZWZcIjogc2xpZGVyRWwsXG4gICAgICAgICAgXCJjbGFzc1wiOiBbJ3YtdGFiX19zbGlkZXInLCBzbGlkZXJDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgICAgIFwic3R5bGVcIjogc2xpZGVyQ29sb3JTdHlsZXMudmFsdWVcbiAgICAgICAgfSwgbnVsbCldXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlRhYi5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZUYWJzLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWVGFiIH0gZnJvbSBcIi4vVlRhYi5tanNcIjtcbmltcG9ydCB7IG1ha2VWU2xpZGVHcm91cFByb3BzLCBWU2xpZGVHcm91cCB9IGZyb20gXCIuLi9WU2xpZGVHcm91cC9WU2xpZGVHcm91cC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjtcbmltcG9ydCB7IG1ha2VEZW5zaXR5UHJvcHMsIHVzZURlbnNpdHkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVuc2l0eS5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBpc09iamVjdCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmltcG9ydCB7IFZUYWJzU3ltYm9sIH0gZnJvbSBcIi4vc2hhcmVkLm1qc1wiO1xuZnVuY3Rpb24gcGFyc2VJdGVtcyhpdGVtcykge1xuICBpZiAoIWl0ZW1zKSByZXR1cm4gW107XG4gIHJldHVybiBpdGVtcy5tYXAoaXRlbSA9PiB7XG4gICAgaWYgKCFpc09iamVjdChpdGVtKSkgcmV0dXJuIHtcbiAgICAgIHRleHQ6IGl0ZW0sXG4gICAgICB2YWx1ZTogaXRlbVxuICAgIH07XG4gICAgcmV0dXJuIGl0ZW07XG4gIH0pO1xufVxuZXhwb3J0IGNvbnN0IG1ha2VWVGFic1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWxpZ25UYWJzOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdzdGFydCdcbiAgfSxcbiAgY29sb3I6IFN0cmluZyxcbiAgZml4ZWRUYWJzOiBCb29sZWFuLFxuICBpdGVtczoge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gIH0sXG4gIHN0YWNrZWQ6IEJvb2xlYW4sXG4gIGJnQ29sb3I6IFN0cmluZyxcbiAgZ3JvdzogQm9vbGVhbixcbiAgaGVpZ2h0OiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgfSxcbiAgaGlkZVNsaWRlcjogQm9vbGVhbixcbiAgc2xpZGVyQ29sb3I6IFN0cmluZyxcbiAgLi4ubWFrZVZTbGlkZUdyb3VwUHJvcHMoe1xuICAgIG1hbmRhdG9yeTogJ2ZvcmNlJ1xuICB9KSxcbiAgLi4ubWFrZURlbnNpdHlQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKVxufSwgJ1ZUYWJzJyk7XG5leHBvcnQgY29uc3QgVlRhYnMgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlRhYnMnLFxuICBwcm9wczogbWFrZVZUYWJzUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2ID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCBwYXJzZWRJdGVtcyA9IGNvbXB1dGVkKCgpID0+IHBhcnNlSXRlbXMocHJvcHMuaXRlbXMpKTtcbiAgICBjb25zdCB7XG4gICAgICBkZW5zaXR5Q2xhc3Nlc1xuICAgIH0gPSB1c2VEZW5zaXR5KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcih0b1JlZihwcm9wcywgJ2JnQ29sb3InKSk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZUYWI6IHtcbiAgICAgICAgY29sb3I6IHRvUmVmKHByb3BzLCAnY29sb3InKSxcbiAgICAgICAgZGlyZWN0aW9uOiB0b1JlZihwcm9wcywgJ2RpcmVjdGlvbicpLFxuICAgICAgICBzdGFja2VkOiB0b1JlZihwcm9wcywgJ3N0YWNrZWQnKSxcbiAgICAgICAgZml4ZWQ6IHRvUmVmKHByb3BzLCAnZml4ZWRUYWJzJyksXG4gICAgICAgIHNsaWRlckNvbG9yOiB0b1JlZihwcm9wcywgJ3NsaWRlckNvbG9yJyksXG4gICAgICAgIGhpZGVTbGlkZXI6IHRvUmVmKHByb3BzLCAnaGlkZVNsaWRlcicpXG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFtzbGlkZUdyb3VwUHJvcHNdID0gVlNsaWRlR3JvdXAuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWU2xpZGVHcm91cCwgX21lcmdlUHJvcHMoc2xpZGVHcm91cFByb3BzLCB7XG4gICAgICAgIFwibW9kZWxWYWx1ZVwiOiBtb2RlbC52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBtb2RlbC52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtdGFicycsIGB2LXRhYnMtLSR7cHJvcHMuZGlyZWN0aW9ufWAsIGB2LXRhYnMtLWFsaWduLXRhYnMtJHtwcm9wcy5hbGlnblRhYnN9YCwge1xuICAgICAgICAgICd2LXRhYnMtLWZpeGVkLXRhYnMnOiBwcm9wcy5maXhlZFRhYnMsXG4gICAgICAgICAgJ3YtdGFicy0tZ3Jvdyc6IHByb3BzLmdyb3csXG4gICAgICAgICAgJ3YtdGFicy0tc3RhY2tlZCc6IHByb3BzLnN0YWNrZWRcbiAgICAgICAgfSwgZGVuc2l0eUNsYXNzZXMudmFsdWUsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbe1xuICAgICAgICAgICctLXYtdGFicy1oZWlnaHQnOiBjb252ZXJ0VG9Vbml0KHByb3BzLmhlaWdodClcbiAgICAgICAgfSwgYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV0sXG4gICAgICAgIFwicm9sZVwiOiBcInRhYmxpc3RcIixcbiAgICAgICAgXCJzeW1ib2xcIjogVlRhYnNTeW1ib2xcbiAgICAgIH0pLCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy5kZWZhdWx0ID8gc2xvdHMuZGVmYXVsdCgpIDogcGFyc2VkSXRlbXMudmFsdWUubWFwKGl0ZW0gPT4gX2NyZWF0ZVZOb2RlKFZUYWIsIF9tZXJnZVByb3BzKGl0ZW0sIHtcbiAgICAgICAgICBcImtleVwiOiBpdGVtLnRleHRcbiAgICAgICAgfSksIG51bGwpKV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WVGFicy5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZUYWJsZS5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzLCB1c2VEZW5zaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWVGFibGVQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGZpeGVkSGVhZGVyOiBCb29sZWFuLFxuICBmaXhlZEZvb3RlcjogQm9vbGVhbixcbiAgaGVpZ2h0OiBbTnVtYmVyLCBTdHJpbmddLFxuICBob3ZlcjogQm9vbGVhbixcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWVGFibGUnKTtcbmV4cG9ydCBjb25zdCBWVGFibGUgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlRhYmxlJyxcbiAgcHJvcHM6IG1ha2VWVGFibGVQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbnNpdHlDbGFzc2VzXG4gICAgfSA9IHVzZURlbnNpdHkocHJvcHMpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi10YWJsZScsIHtcbiAgICAgICAgJ3YtdGFibGUtLWZpeGVkLWhlaWdodCc6ICEhcHJvcHMuaGVpZ2h0LFxuICAgICAgICAndi10YWJsZS0tZml4ZWQtaGVhZGVyJzogcHJvcHMuZml4ZWRIZWFkZXIsXG4gICAgICAgICd2LXRhYmxlLS1maXhlZC1mb290ZXInOiBwcm9wcy5maXhlZEZvb3RlcixcbiAgICAgICAgJ3YtdGFibGUtLWhhcy10b3AnOiAhIXNsb3RzLnRvcCxcbiAgICAgICAgJ3YtdGFibGUtLWhhcy1ib3R0b20nOiAhIXNsb3RzLmJvdHRvbSxcbiAgICAgICAgJ3YtdGFibGUtLWhvdmVyJzogcHJvcHMuaG92ZXJcbiAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgZGVuc2l0eUNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMudG9wPy4oKSwgc2xvdHMuZGVmYXVsdCA/IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LXRhYmxlX193cmFwcGVyXCIsXG4gICAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICAgIGhlaWdodDogY29udmVydFRvVW5pdChwcm9wcy5oZWlnaHQpXG4gICAgICAgIH1cbiAgICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJ0YWJsZVwiLCBudWxsLCBbc2xvdHMuZGVmYXVsdCgpXSldKSA6IHNsb3RzLndyYXBwZXI/LigpLCBzbG90cy5ib3R0b20/LigpXVxuICAgIH0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlRhYmxlLm1qcy5tYXAiLCJpbXBvcnQgeyB2TW9kZWxUZXh0IGFzIF92TW9kZWxUZXh0LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50IH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZUZXh0YXJlYS5jc3NcIjtcbmltcG9ydCBcIi4uL1ZUZXh0RmllbGQvVlRleHRGaWVsZC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkNvdW50ZXIgfSBmcm9tIFwiLi4vVkNvdW50ZXIvVkNvdW50ZXIubWpzXCI7XG5pbXBvcnQgeyBWRmllbGQgfSBmcm9tIFwiLi4vVkZpZWxkL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgZmlsdGVyRmllbGRQcm9wcywgbWFrZVZGaWVsZFByb3BzIH0gZnJvbSBcIi4uL1ZGaWVsZC9WRmllbGQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVklucHV0UHJvcHMsIFZJbnB1dCB9IGZyb20gXCIuLi9WSW5wdXQvVklucHV0Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlRm9jdXMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9jdXMubWpzXCI7XG5pbXBvcnQgeyBmb3J3YXJkUmVmcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb3J3YXJkUmVmcy5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIERpcmVjdGl2ZXNcbmltcG9ydCBJbnRlcnNlY3QgZnJvbSBcIi4uLy4uL2RpcmVjdGl2ZXMvaW50ZXJzZWN0L2luZGV4Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBuZXh0VGljaywgb25CZWZvcmVVbm1vdW50LCBvbk1vdW50ZWQsIHJlZiwgc2hhbGxvd1JlZiwgd2F0Y2gsIHdhdGNoRWZmZWN0IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNhbGxFdmVudCwgY2xhbXAsIGNvbnZlcnRUb1VuaXQsIGZpbHRlcklucHV0QXR0cnMsIGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZUZXh0YXJlYVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYXV0b0dyb3c6IEJvb2xlYW4sXG4gIGF1dG9mb2N1czogQm9vbGVhbixcbiAgY291bnRlcjogW0Jvb2xlYW4sIE51bWJlciwgU3RyaW5nXSxcbiAgY291bnRlclZhbHVlOiBGdW5jdGlvbixcbiAgcHJlZml4OiBTdHJpbmcsXG4gIHBsYWNlaG9sZGVyOiBTdHJpbmcsXG4gIHBlcnNpc3RlbnRQbGFjZWhvbGRlcjogQm9vbGVhbixcbiAgcGVyc2lzdGVudENvdW50ZXI6IEJvb2xlYW4sXG4gIG5vUmVzaXplOiBCb29sZWFuLFxuICByb3dzOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiA1LFxuICAgIHZhbGlkYXRvcjogdiA9PiAhaXNOYU4ocGFyc2VGbG9hdCh2KSlcbiAgfSxcbiAgbWF4Um93czoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgdmFsaWRhdG9yOiB2ID0+ICFpc05hTihwYXJzZUZsb2F0KHYpKVxuICB9LFxuICBzdWZmaXg6IFN0cmluZyxcbiAgbW9kZWxNb2RpZmllcnM6IE9iamVjdCxcbiAgLi4ubWFrZVZJbnB1dFByb3BzKCksXG4gIC4uLm1ha2VWRmllbGRQcm9wcygpXG59LCAnVlRleHRhcmVhJyk7XG5leHBvcnQgY29uc3QgVlRleHRhcmVhID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZUZXh0YXJlYScsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICBJbnRlcnNlY3RcbiAgfSxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IG1ha2VWVGV4dGFyZWFQcm9wcygpLFxuICBlbWl0czoge1xuICAgICdjbGljazpjb250cm9sJzogZSA9PiB0cnVlLFxuICAgICdtb3VzZWRvd246Y29udHJvbCc6IGUgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOmZvY3VzZWQnOiBmb2N1c2VkID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnMsXG4gICAgICBlbWl0LFxuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCB7XG4gICAgICBpc0ZvY3VzZWQsXG4gICAgICBmb2N1cyxcbiAgICAgIGJsdXJcbiAgICB9ID0gdXNlRm9jdXMocHJvcHMpO1xuICAgIGNvbnN0IGNvdW50ZXJWYWx1ZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiB0eXBlb2YgcHJvcHMuY291bnRlclZhbHVlID09PSAnZnVuY3Rpb24nID8gcHJvcHMuY291bnRlclZhbHVlKG1vZGVsLnZhbHVlKSA6IChtb2RlbC52YWx1ZSB8fCAnJykudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgfSk7XG4gICAgY29uc3QgbWF4ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKGF0dHJzLm1heGxlbmd0aCkgcmV0dXJuIGF0dHJzLm1heGxlbmd0aDtcbiAgICAgIGlmICghcHJvcHMuY291bnRlciB8fCB0eXBlb2YgcHJvcHMuY291bnRlciAhPT0gJ251bWJlcicgJiYgdHlwZW9mIHByb3BzLmNvdW50ZXIgIT09ICdzdHJpbmcnKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHByb3BzLmNvdW50ZXI7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gb25JbnRlcnNlY3QoaXNJbnRlcnNlY3RpbmcsIGVudHJpZXMpIHtcbiAgICAgIGlmICghcHJvcHMuYXV0b2ZvY3VzIHx8ICFpc0ludGVyc2VjdGluZykgcmV0dXJuO1xuICAgICAgZW50cmllc1swXS50YXJnZXQ/LmZvY3VzPy4oKTtcbiAgICB9XG4gICAgY29uc3QgdklucHV0UmVmID0gcmVmKCk7XG4gICAgY29uc3QgdkZpZWxkUmVmID0gcmVmKCk7XG4gICAgY29uc3QgY29udHJvbEhlaWdodCA9IHNoYWxsb3dSZWYoJycpO1xuICAgIGNvbnN0IHRleHRhcmVhUmVmID0gcmVmKCk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5wZXJzaXN0ZW50UGxhY2Vob2xkZXIgfHwgaXNGb2N1c2VkLnZhbHVlIHx8IHByb3BzLmFjdGl2ZSk7XG4gICAgZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICAgIGlmICh0ZXh0YXJlYVJlZi52YWx1ZSAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICB0ZXh0YXJlYVJlZi52YWx1ZT8uZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNGb2N1c2VkLnZhbHVlKSBmb2N1cygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkNvbnRyb2xDbGljayhlKSB7XG4gICAgICBvbkZvY3VzKCk7XG4gICAgICBlbWl0KCdjbGljazpjb250cm9sJywgZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQ29udHJvbE1vdXNlZG93bihlKSB7XG4gICAgICBlbWl0KCdtb3VzZWRvd246Y29udHJvbCcsIGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkNsZWFyKGUpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBvbkZvY3VzKCk7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIG1vZGVsLnZhbHVlID0gJyc7XG4gICAgICAgIGNhbGxFdmVudChwcm9wc1snb25DbGljazpjbGVhciddLCBlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbklucHV0KGUpIHtcbiAgICAgIGNvbnN0IGVsID0gZS50YXJnZXQ7XG4gICAgICBtb2RlbC52YWx1ZSA9IGVsLnZhbHVlO1xuICAgICAgaWYgKHByb3BzLm1vZGVsTW9kaWZpZXJzPy50cmltKSB7XG4gICAgICAgIGNvbnN0IGNhcmV0UG9zaXRpb24gPSBbZWwuc2VsZWN0aW9uU3RhcnQsIGVsLnNlbGVjdGlvbkVuZF07XG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBlbC5zZWxlY3Rpb25TdGFydCA9IGNhcmV0UG9zaXRpb25bMF07XG4gICAgICAgICAgZWwuc2VsZWN0aW9uRW5kID0gY2FyZXRQb3NpdGlvblsxXTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNpemVyUmVmID0gcmVmKCk7XG4gICAgY29uc3Qgcm93cyA9IHJlZigrcHJvcHMucm93cyk7XG4gICAgY29uc3QgaXNQbGFpbk9yVW5kZXJsaW5lZCA9IGNvbXB1dGVkKCgpID0+IFsncGxhaW4nLCAndW5kZXJsaW5lZCddLmluY2x1ZGVzKHByb3BzLnZhcmlhbnQpKTtcbiAgICB3YXRjaEVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmF1dG9Hcm93KSByb3dzLnZhbHVlID0gK3Byb3BzLnJvd3M7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlSW5wdXRIZWlnaHQoKSB7XG4gICAgICBpZiAoIXByb3BzLmF1dG9Hcm93KSByZXR1cm47XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGlmICghc2l6ZXJSZWYudmFsdWUgfHwgIXZGaWVsZFJlZi52YWx1ZSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoc2l6ZXJSZWYudmFsdWUpO1xuICAgICAgICBjb25zdCBmaWVsZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSh2RmllbGRSZWYudmFsdWUuJGVsKTtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHBhcnNlRmxvYXQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS12LWZpZWxkLXBhZGRpbmctdG9wJykpICsgcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLXYtaW5wdXQtcGFkZGluZy10b3AnKSkgKyBwYXJzZUZsb2F0KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0tdi1maWVsZC1wYWRkaW5nLWJvdHRvbScpKTtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gc2l6ZXJSZWYudmFsdWUuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gcGFyc2VGbG9hdChzdHlsZS5saW5lSGVpZ2h0KTtcbiAgICAgICAgY29uc3QgbWluSGVpZ2h0ID0gTWF0aC5tYXgocGFyc2VGbG9hdChwcm9wcy5yb3dzKSAqIGxpbmVIZWlnaHQgKyBwYWRkaW5nLCBwYXJzZUZsb2F0KGZpZWxkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS12LWlucHV0LWNvbnRyb2wtaGVpZ2h0JykpKTtcbiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gcGFyc2VGbG9hdChwcm9wcy5tYXhSb3dzKSAqIGxpbmVIZWlnaHQgKyBwYWRkaW5nIHx8IEluZmluaXR5O1xuICAgICAgICBjb25zdCBuZXdIZWlnaHQgPSBjbGFtcChoZWlnaHQgPz8gMCwgbWluSGVpZ2h0LCBtYXhIZWlnaHQpO1xuICAgICAgICByb3dzLnZhbHVlID0gTWF0aC5mbG9vcigobmV3SGVpZ2h0IC0gcGFkZGluZykgLyBsaW5lSGVpZ2h0KTtcbiAgICAgICAgY29udHJvbEhlaWdodC52YWx1ZSA9IGNvbnZlcnRUb1VuaXQobmV3SGVpZ2h0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBvbk1vdW50ZWQoY2FsY3VsYXRlSW5wdXRIZWlnaHQpO1xuICAgIHdhdGNoKG1vZGVsLCBjYWxjdWxhdGVJbnB1dEhlaWdodCk7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMucm93cywgY2FsY3VsYXRlSW5wdXRIZWlnaHQpO1xuICAgIHdhdGNoKCgpID0+IHByb3BzLm1heFJvd3MsIGNhbGN1bGF0ZUlucHV0SGVpZ2h0KTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5kZW5zaXR5LCBjYWxjdWxhdGVJbnB1dEhlaWdodCk7XG4gICAgbGV0IG9ic2VydmVyO1xuICAgIHdhdGNoKHNpemVyUmVmLCB2YWwgPT4ge1xuICAgICAgaWYgKHZhbCkge1xuICAgICAgICBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihjYWxjdWxhdGVJbnB1dEhlaWdodCk7XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoc2l6ZXJSZWYudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JzZXJ2ZXI/LmRpc2Nvbm5lY3QoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgb2JzZXJ2ZXI/LmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaGFzQ291bnRlciA9ICEhKHNsb3RzLmNvdW50ZXIgfHwgcHJvcHMuY291bnRlciB8fCBwcm9wcy5jb3VudGVyVmFsdWUpO1xuICAgICAgY29uc3QgaGFzRGV0YWlscyA9ICEhKGhhc0NvdW50ZXIgfHwgc2xvdHMuZGV0YWlscyk7XG4gICAgICBjb25zdCBbcm9vdEF0dHJzLCBpbnB1dEF0dHJzXSA9IGZpbHRlcklucHV0QXR0cnMoYXR0cnMpO1xuICAgICAgY29uc3QgW3tcbiAgICAgICAgbW9kZWxWYWx1ZTogXyxcbiAgICAgICAgLi4uaW5wdXRQcm9wc1xuICAgICAgfV0gPSBWSW5wdXQuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgY29uc3QgW2ZpZWxkUHJvcHNdID0gZmlsdGVyRmllbGRQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZJbnB1dCwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcInJlZlwiOiB2SW5wdXRSZWYsXG4gICAgICAgIFwibW9kZWxWYWx1ZVwiOiBtb2RlbC52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBtb2RlbC52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtdGV4dGFyZWEgdi10ZXh0LWZpZWxkJywge1xuICAgICAgICAgICd2LXRleHRhcmVhLS1wcmVmaXhlZCc6IHByb3BzLnByZWZpeCxcbiAgICAgICAgICAndi10ZXh0YXJlYS0tc3VmZml4ZWQnOiBwcm9wcy5zdWZmaXgsXG4gICAgICAgICAgJ3YtdGV4dC1maWVsZC0tcHJlZml4ZWQnOiBwcm9wcy5wcmVmaXgsXG4gICAgICAgICAgJ3YtdGV4dC1maWVsZC0tc3VmZml4ZWQnOiBwcm9wcy5zdWZmaXgsXG4gICAgICAgICAgJ3YtdGV4dGFyZWEtLWF1dG8tZ3Jvdyc6IHByb3BzLmF1dG9Hcm93LFxuICAgICAgICAgICd2LXRleHRhcmVhLS1uby1yZXNpemUnOiBwcm9wcy5ub1Jlc2l6ZSB8fCBwcm9wcy5hdXRvR3JvdyxcbiAgICAgICAgICAndi10ZXh0LWZpZWxkLS1wbGFpbi11bmRlcmxpbmVkJzogaXNQbGFpbk9yVW5kZXJsaW5lZC52YWx1ZVxuICAgICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIHJvb3RBdHRycywgaW5wdXRQcm9wcywge1xuICAgICAgICBcImNlbnRlckFmZml4XCI6IHJvd3MudmFsdWUgPT09IDEgJiYgIWlzUGxhaW5PclVuZGVybGluZWQudmFsdWUsXG4gICAgICAgIFwiZm9jdXNlZFwiOiBpc0ZvY3VzZWQudmFsdWVcbiAgICAgIH0pLCB7XG4gICAgICAgIC4uLnNsb3RzLFxuICAgICAgICBkZWZhdWx0OiBfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGlzRGlzYWJsZWQsXG4gICAgICAgICAgICBpc0RpcnR5LFxuICAgICAgICAgICAgaXNSZWFkb25seSxcbiAgICAgICAgICAgIGlzVmFsaWRcbiAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWRmllbGQsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICAgIFwicmVmXCI6IHZGaWVsZFJlZixcbiAgICAgICAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICAgICAgICAnLS12LXRleHRhcmVhLWNvbnRyb2wtaGVpZ2h0JzogY29udHJvbEhlaWdodC52YWx1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwib25DbGlja1wiOiBvbkNvbnRyb2xDbGljayxcbiAgICAgICAgICAgIFwib25Nb3VzZWRvd25cIjogb25Db250cm9sTW91c2Vkb3duLFxuICAgICAgICAgICAgXCJvbkNsaWNrOmNsZWFyXCI6IG9uQ2xlYXIsXG4gICAgICAgICAgICBcIm9uQ2xpY2s6cHJlcGVuZElubmVyXCI6IHByb3BzWydvbkNsaWNrOnByZXBlbmRJbm5lciddLFxuICAgICAgICAgICAgXCJvbkNsaWNrOmFwcGVuZElubmVyXCI6IHByb3BzWydvbkNsaWNrOmFwcGVuZElubmVyJ11cbiAgICAgICAgICB9LCBmaWVsZFByb3BzLCB7XG4gICAgICAgICAgICBcImFjdGl2ZVwiOiBpc0FjdGl2ZS52YWx1ZSB8fCBpc0RpcnR5LnZhbHVlLFxuICAgICAgICAgICAgXCJjZW50ZXJBZmZpeFwiOiByb3dzLnZhbHVlID09PSAxICYmICFpc1BsYWluT3JVbmRlcmxpbmVkLnZhbHVlLFxuICAgICAgICAgICAgXCJkaXJ0eVwiOiBpc0RpcnR5LnZhbHVlIHx8IHByb3BzLmRpcnR5LFxuICAgICAgICAgICAgXCJkaXNhYmxlZFwiOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZC52YWx1ZSxcbiAgICAgICAgICAgIFwiZXJyb3JcIjogaXNWYWxpZC52YWx1ZSA9PT0gZmFsc2VcbiAgICAgICAgICB9KSwge1xuICAgICAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgICAgICBkZWZhdWx0OiBfcmVmMyA9PiB7XG4gICAgICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBmaWVsZENsYXNzLFxuICAgICAgICAgICAgICAgICAgLi4uc2xvdFByb3BzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9ID0gX3JlZjM7XG4gICAgICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbcHJvcHMucHJlZml4ICYmIF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXRleHQtZmllbGRfX3ByZWZpeFwiXG4gICAgICAgICAgICAgIH0sIFtwcm9wcy5wcmVmaXhdKSwgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShcInRleHRhcmVhXCIsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICAgICAgICBcInJlZlwiOiB0ZXh0YXJlYVJlZixcbiAgICAgICAgICAgICAgICBcImNsYXNzXCI6IGZpZWxkQ2xhc3MsXG4gICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBtb2RlbC52YWx1ZSxcbiAgICAgICAgICAgICAgICBcIm9uSW5wdXRcIjogb25JbnB1dCxcbiAgICAgICAgICAgICAgICBcImF1dG9mb2N1c1wiOiBwcm9wcy5hdXRvZm9jdXMsXG4gICAgICAgICAgICAgICAgXCJyZWFkb25seVwiOiBpc1JlYWRvbmx5LnZhbHVlLFxuICAgICAgICAgICAgICAgIFwiZGlzYWJsZWRcIjogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICAgICAgICAgICBcInBsYWNlaG9sZGVyXCI6IHByb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgIFwicm93c1wiOiBwcm9wcy5yb3dzLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBwcm9wcy5uYW1lLFxuICAgICAgICAgICAgICAgIFwib25Gb2N1c1wiOiBvbkZvY3VzLFxuICAgICAgICAgICAgICAgIFwib25CbHVyXCI6IGJsdXJcbiAgICAgICAgICAgICAgfSwgc2xvdFByb3BzLCBpbnB1dEF0dHJzKSwgbnVsbCksIFtbX3Jlc29sdmVEaXJlY3RpdmUoXCJpbnRlcnNlY3RcIiksIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBvbkludGVyc2VjdFxuICAgICAgICAgICAgICB9LCBudWxsLCB7XG4gICAgICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgICAgICB9XV0pLCBwcm9wcy5hdXRvR3JvdyAmJiBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFwidGV4dGFyZWFcIiwge1xuICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogW2ZpZWxkQ2xhc3MsICd2LXRleHRhcmVhX19zaXplciddLFxuICAgICAgICAgICAgICAgIFwiaWRcIjogYCR7c2xvdFByb3BzLmlkfS1zaXplcmAsXG4gICAgICAgICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBtb2RlbC52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgICAgICAgICBcInJlZlwiOiBzaXplclJlZixcbiAgICAgICAgICAgICAgICBcInJlYWRvbmx5XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICAgICAgICAgICAgICB9LCBudWxsKSwgW1tfdk1vZGVsVGV4dCwgbW9kZWwudmFsdWVdXSksIHByb3BzLnN1ZmZpeCAmJiBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwidi10ZXh0LWZpZWxkX19zdWZmaXhcIlxuICAgICAgICAgICAgICB9LCBbcHJvcHMuc3VmZml4XSldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZGV0YWlsczogaGFzRGV0YWlscyA/IHNsb3RQcm9wcyA9PiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbc2xvdHMuZGV0YWlscz8uKHNsb3RQcm9wcyksIGhhc0NvdW50ZXIgJiYgX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW19jcmVhdGVWTm9kZShcInNwYW5cIiwgbnVsbCwgbnVsbCksIF9jcmVhdGVWTm9kZShWQ291bnRlciwge1xuICAgICAgICAgIFwiYWN0aXZlXCI6IHByb3BzLnBlcnNpc3RlbnRDb3VudGVyIHx8IGlzRm9jdXNlZC52YWx1ZSxcbiAgICAgICAgICBcInZhbHVlXCI6IGNvdW50ZXJWYWx1ZS52YWx1ZSxcbiAgICAgICAgICBcIm1heFwiOiBtYXgudmFsdWVcbiAgICAgICAgfSwgc2xvdHMuY291bnRlcildKV0pIDogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm9yd2FyZFJlZnMoe30sIHZJbnB1dFJlZiwgdkZpZWxkUmVmLCB0ZXh0YXJlYVJlZik7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlRleHRhcmVhLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlRoZW1lUHJvdmlkZXIuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZUaGVtZVByb3ZpZGVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICB3aXRoQmFja2dyb3VuZDogQm9vbGVhbixcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpXG59LCAnVlRoZW1lUHJvdmlkZXInKTtcbmV4cG9ydCBjb25zdCBWVGhlbWVQcm92aWRlciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWVGhlbWVQcm92aWRlcicsXG4gIHByb3BzOiBtYWtlVlRoZW1lUHJvdmlkZXJQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLndpdGhCYWNrZ3JvdW5kKSByZXR1cm4gc2xvdHMuZGVmYXVsdD8uKCk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi10aGVtZS1wcm92aWRlcicsIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy5kZWZhdWx0Py4oKV1cbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlRoZW1lUHJvdmlkZXIubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WVGltZWxpbmUuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiO1xuaW1wb3J0IHsgbWFrZURlbnNpdHlQcm9wcywgdXNlRGVuc2l0eSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZW5zaXR5Lm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWVGltZWxpbmVQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGFsaWduOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdjZW50ZXInLFxuICAgIHZhbGlkYXRvcjogdiA9PiBbJ2NlbnRlcicsICdzdGFydCddLmluY2x1ZGVzKHYpXG4gIH0sXG4gIGRpcmVjdGlvbjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAndmVydGljYWwnLFxuICAgIHZhbGlkYXRvcjogdiA9PiBbJ3ZlcnRpY2FsJywgJ2hvcml6b250YWwnXS5pbmNsdWRlcyh2KVxuICB9LFxuICBqdXN0aWZ5OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdhdXRvJyxcbiAgICB2YWxpZGF0b3I6IHYgPT4gWydhdXRvJywgJ2NlbnRlciddLmluY2x1ZGVzKHYpXG4gIH0sXG4gIHNpZGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgdmFsaWRhdG9yOiB2ID0+IHYgPT0gbnVsbCB8fCBbJ3N0YXJ0JywgJ2VuZCddLmluY2x1ZGVzKHYpXG4gIH0sXG4gIGxpbmVJbnNldDoge1xuICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICBsaW5lVGhpY2tuZXNzOiB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiAyXG4gIH0sXG4gIGxpbmVDb2xvcjogU3RyaW5nLFxuICB0cnVuY2F0ZUxpbmU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgdmFsaWRhdG9yOiB2ID0+IFsnc3RhcnQnLCAnZW5kJywgJ2JvdGgnXS5pbmNsdWRlcyh2KVxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURlbnNpdHlQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZUaW1lbGluZScpO1xuZXhwb3J0IGNvbnN0IFZUaW1lbGluZSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWVGltZWxpbmUnLFxuICBwcm9wczogbWFrZVZUaW1lbGluZVByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGVuc2l0eUNsYXNzZXNcbiAgICB9ID0gdXNlRGVuc2l0eShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcnRsQ2xhc3Nlc1xuICAgIH0gPSB1c2VSdGwoKTtcbiAgICBwcm92aWRlRGVmYXVsdHMoe1xuICAgICAgVlRpbWVsaW5lRGl2aWRlcjoge1xuICAgICAgICBsaW5lQ29sb3I6IHRvUmVmKHByb3BzLCAnbGluZUNvbG9yJylcbiAgICAgIH0sXG4gICAgICBWVGltZWxpbmVJdGVtOiB7XG4gICAgICAgIGRlbnNpdHk6IHRvUmVmKHByb3BzLCAnZGVuc2l0eScpLFxuICAgICAgICBsaW5lSW5zZXQ6IHRvUmVmKHByb3BzLCAnbGluZUluc2V0JylcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBzaWRlQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHNpZGUgPSBwcm9wcy5zaWRlID8gcHJvcHMuc2lkZSA6IHByb3BzLmRlbnNpdHkgIT09ICdkZWZhdWx0JyA/ICdlbmQnIDogbnVsbDtcbiAgICAgIHJldHVybiBzaWRlICYmIGB2LXRpbWVsaW5lLS1zaWRlLSR7c2lkZX1gO1xuICAgIH0pO1xuICAgIGNvbnN0IHRydW5jYXRlQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGNsYXNzZXMgPSBbJ3YtdGltZWxpbmUtLXRydW5jYXRlLWxpbmUtc3RhcnQnLCAndi10aW1lbGluZS0tdHJ1bmNhdGUtbGluZS1lbmQnXTtcbiAgICAgIHN3aXRjaCAocHJvcHMudHJ1bmNhdGVMaW5lKSB7XG4gICAgICAgIGNhc2UgJ2JvdGgnOlxuICAgICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgcmV0dXJuIGNsYXNzZXNbMF07XG4gICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgcmV0dXJuIGNsYXNzZXNbMV07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LXRpbWVsaW5lJywgYHYtdGltZWxpbmUtLSR7cHJvcHMuZGlyZWN0aW9ufWAsIGB2LXRpbWVsaW5lLS1hbGlnbi0ke3Byb3BzLmFsaWdufWAsIGB2LXRpbWVsaW5lLS1qdXN0aWZ5LSR7cHJvcHMuanVzdGlmeX1gLCB0cnVuY2F0ZUNsYXNzZXMudmFsdWUsIHtcbiAgICAgICAgJ3YtdGltZWxpbmUtLWluc2V0LWxpbmUnOiAhIXByb3BzLmxpbmVJbnNldFxuICAgICAgfSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBkZW5zaXR5Q2xhc3Nlcy52YWx1ZSwgc2lkZUNsYXNzZXMudmFsdWUsIHJ0bENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW3tcbiAgICAgICAgJy0tdi10aW1lbGluZS1saW5lLXRoaWNrbmVzcyc6IGNvbnZlcnRUb1VuaXQocHJvcHMubGluZVRoaWNrbmVzcylcbiAgICAgIH0sIHByb3BzLnN0eWxlXVxuICAgIH0sIHNsb3RzKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZUaW1lbGluZS5tanMubWFwIiwiaW1wb3J0IHsgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gXCIuLi9WSWNvbi9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRWxldmF0aW9uUHJvcHMsIHVzZUVsZXZhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlU2l6ZVByb3BzLCB1c2VTaXplIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NpemUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVlRpbWVsaW5lRGl2aWRlclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZG90Q29sb3I6IFN0cmluZyxcbiAgZmlsbERvdDogQm9vbGVhbixcbiAgaGlkZURvdDogQm9vbGVhbixcbiAgaWNvbjogSWNvblZhbHVlLFxuICBpY29uQ29sb3I6IFN0cmluZyxcbiAgbGluZUNvbG9yOiBTdHJpbmcsXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VTaXplUHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKClcbn0sICdWVGltZWxpbmVEaXZpZGVyJyk7XG5leHBvcnQgY29uc3QgVlRpbWVsaW5lRGl2aWRlciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWVGltZWxpbmVEaXZpZGVyJyxcbiAgcHJvcHM6IG1ha2VWVGltZWxpbmVEaXZpZGVyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBzaXplQ2xhc3NlcyxcbiAgICAgIHNpemVTdHlsZXNcbiAgICB9ID0gdXNlU2l6ZShwcm9wcywgJ3YtdGltZWxpbmUtZGl2aWRlcl9fZG90Jyk7XG4gICAgY29uc3Qge1xuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzLFxuICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3Nlc1xuICAgIH0gPSB1c2VCYWNrZ3JvdW5kQ29sb3IodG9SZWYocHJvcHMsICdkb3RDb2xvcicpKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzLCAndi10aW1lbGluZS1kaXZpZGVyX19kb3QnKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlczogbGluZUNvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlczogbGluZUNvbG9yU3R5bGVzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcih0b1JlZihwcm9wcywgJ2xpbmVDb2xvcicpKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LXRpbWVsaW5lLWRpdmlkZXInLCB7XG4gICAgICAgICd2LXRpbWVsaW5lLWRpdmlkZXItLWZpbGwtZG90JzogcHJvcHMuZmlsbERvdFxuICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtdGltZWxpbmUtZGl2aWRlcl9fYmVmb3JlJywgbGluZUNvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICBcInN0eWxlXCI6IGxpbmVDb2xvclN0eWxlcy52YWx1ZVxuICAgIH0sIG51bGwpLCAhcHJvcHMuaGlkZURvdCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJrZXlcIjogXCJkb3RcIixcbiAgICAgIFwiY2xhc3NcIjogWyd2LXRpbWVsaW5lLWRpdmlkZXJfX2RvdCcsIGVsZXZhdGlvbkNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCBzaXplQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICBcInN0eWxlXCI6IHNpemVTdHlsZXMudmFsdWVcbiAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LXRpbWVsaW5lLWRpdmlkZXJfX2lubmVyLWRvdCcsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlXSxcbiAgICAgIFwic3R5bGVcIjogYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlXG4gICAgfSwgWyFzbG90cy5kZWZhdWx0ID8gX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICBcImtleVwiOiBcImljb25cIixcbiAgICAgIFwiY29sb3JcIjogcHJvcHMuaWNvbkNvbG9yLFxuICAgICAgXCJpY29uXCI6IHByb3BzLmljb24sXG4gICAgICBcInNpemVcIjogcHJvcHMuc2l6ZVxuICAgIH0sIG51bGwpIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICBcImtleVwiOiBcImljb24tZGVmYXVsdHNcIixcbiAgICAgIFwiZGlzYWJsZWRcIjogIXByb3BzLmljb24sXG4gICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgVkljb246IHtcbiAgICAgICAgICBjb2xvcjogcHJvcHMuaWNvbkNvbG9yLFxuICAgICAgICAgIGljb246IHByb3BzLmljb24sXG4gICAgICAgICAgc2l6ZTogcHJvcHMuc2l6ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgc2xvdHMuZGVmYXVsdCldKV0pLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtdGltZWxpbmUtZGl2aWRlcl9fYWZ0ZXInLCBsaW5lQ29sb3JDbGFzc2VzLnZhbHVlXSxcbiAgICAgIFwic3R5bGVcIjogbGluZUNvbG9yU3R5bGVzLnZhbHVlXG4gICAgfSwgbnVsbCldKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZUaW1lbGluZURpdmlkZXIubWpzLm1hcCIsImltcG9ydCB7IHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZUaW1lbGluZURpdmlkZXIgfSBmcm9tIFwiLi9WVGltZWxpbmVEaXZpZGVyLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VEaW1lbnNpb25Qcm9wcywgdXNlRGltZW5zaW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RpbWVuc2lvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRWxldmF0aW9uUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdW5kZWRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNpemVQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zaXplLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyByZWYsIHNoYWxsb3dSZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQsIGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZUaW1lbGluZUl0ZW1Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGRlbnNpdHk6IFN0cmluZyxcbiAgZG90Q29sb3I6IFN0cmluZyxcbiAgZmlsbERvdDogQm9vbGVhbixcbiAgaGlkZURvdDogQm9vbGVhbixcbiAgaGlkZU9wcG9zaXRlOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgfSxcbiAgaWNvbjogSWNvblZhbHVlLFxuICBpY29uQ29sb3I6IFN0cmluZyxcbiAgbGluZUluc2V0OiBbTnVtYmVyLCBTdHJpbmddLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURpbWVuc2lvblByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VTaXplUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKClcbn0sICdWVGltZWxpbmVJdGVtJyk7XG5leHBvcnQgY29uc3QgVlRpbWVsaW5lSXRlbSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWVGltZWxpbmVJdGVtJyxcbiAgcHJvcHM6IG1ha2VWVGltZWxpbmVJdGVtUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBkaW1lbnNpb25TdHlsZXNcbiAgICB9ID0gdXNlRGltZW5zaW9uKHByb3BzKTtcbiAgICBjb25zdCBkb3RTaXplID0gc2hhbGxvd1JlZigwKTtcbiAgICBjb25zdCBkb3RSZWYgPSByZWYoKTtcbiAgICB3YXRjaChkb3RSZWYsIG5ld1ZhbHVlID0+IHtcbiAgICAgIGlmICghbmV3VmFsdWUpIHJldHVybjtcbiAgICAgIGRvdFNpemUudmFsdWUgPSBuZXdWYWx1ZS4kZWwucXVlcnlTZWxlY3RvcignLnYtdGltZWxpbmUtZGl2aWRlcl9fZG90Jyk/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoID8/IDA7XG4gICAgfSwge1xuICAgICAgZmx1c2g6ICdwb3N0J1xuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtdGltZWxpbmUtaXRlbScsIHtcbiAgICAgICAgJ3YtdGltZWxpbmUtaXRlbS0tZmlsbC1kb3QnOiBwcm9wcy5maWxsRG90XG4gICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IFt7XG4gICAgICAgICctLXYtdGltZWxpbmUtZG90LXNpemUnOiBjb252ZXJ0VG9Vbml0KGRvdFNpemUudmFsdWUpLFxuICAgICAgICAnLS12LXRpbWVsaW5lLWxpbmUtaW5zZXQnOiBwcm9wcy5saW5lSW5zZXQgPyBgY2FsYyh2YXIoLS12LXRpbWVsaW5lLWRvdC1zaXplKSAvIDIgKyAke2NvbnZlcnRUb1VuaXQocHJvcHMubGluZUluc2V0KX0pYCA6IGNvbnZlcnRUb1VuaXQoMClcbiAgICAgIH0sIHByb3BzLnN0eWxlXVxuICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBcInYtdGltZWxpbmUtaXRlbV9fYm9keVwiLFxuICAgICAgXCJzdHlsZVwiOiBkaW1lbnNpb25TdHlsZXMudmFsdWVcbiAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKCldKSwgX2NyZWF0ZVZOb2RlKFZUaW1lbGluZURpdmlkZXIsIHtcbiAgICAgIFwicmVmXCI6IGRvdFJlZixcbiAgICAgIFwiaGlkZURvdFwiOiBwcm9wcy5oaWRlRG90LFxuICAgICAgXCJpY29uXCI6IHByb3BzLmljb24sXG4gICAgICBcImljb25Db2xvclwiOiBwcm9wcy5pY29uQ29sb3IsXG4gICAgICBcInNpemVcIjogcHJvcHMuc2l6ZSxcbiAgICAgIFwiZWxldmF0aW9uXCI6IHByb3BzLmVsZXZhdGlvbixcbiAgICAgIFwiZG90Q29sb3JcIjogcHJvcHMuZG90Q29sb3IsXG4gICAgICBcImZpbGxEb3RcIjogcHJvcHMuZmlsbERvdCxcbiAgICAgIFwicm91bmRlZFwiOiBwcm9wcy5yb3VuZGVkXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogc2xvdHMuaWNvblxuICAgIH0pLCBwcm9wcy5kZW5zaXR5ICE9PSAnY29tcGFjdCcgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJ2LXRpbWVsaW5lLWl0ZW1fX29wcG9zaXRlXCJcbiAgICB9LCBbIXByb3BzLmhpZGVPcHBvc2l0ZSAmJiBzbG90cy5vcHBvc2l0ZT8uKCldKV0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlRpbWVsaW5lSXRlbS5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBwcm92aWRlRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7XG5pbXBvcnQgeyBtYWtlVmFyaWFudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3ZhcmlhbnQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVlRvb2xiYXJJdGVtc1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VWYXJpYW50UHJvcHMoe1xuICAgIHZhcmlhbnQ6ICd0ZXh0J1xuICB9KVxufSwgJ1ZUb29sYmFySXRlbXMnKTtcbmV4cG9ydCBjb25zdCBWVG9vbGJhckl0ZW1zID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZUb29sYmFySXRlbXMnLFxuICBwcm9wczogbWFrZVZUb29sYmFySXRlbXNQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIHByb3ZpZGVEZWZhdWx0cyh7XG4gICAgICBWQnRuOiB7XG4gICAgICAgIGNvbG9yOiB0b1JlZihwcm9wcywgJ2NvbG9yJyksXG4gICAgICAgIGhlaWdodDogJ2luaGVyaXQnLFxuICAgICAgICB2YXJpYW50OiB0b1JlZihwcm9wcywgJ3ZhcmlhbnQnKVxuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtdG9vbGJhci1pdGVtcycsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKCldKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZUb29sYmFySXRlbXMubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcyB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WVG9vbHRpcC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVk92ZXJsYXkgfSBmcm9tIFwiLi4vVk92ZXJsYXkvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBtYWtlVk92ZXJsYXlQcm9wcyB9IGZyb20gXCIuLi9WT3ZlcmxheS9WT3ZlcmxheS5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IGZvcndhcmRSZWZzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvcndhcmRSZWZzLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IHVzZVNjb3BlSWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc2NvcGVJZC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgbWVyZ2VQcm9wcywgcmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIGdldFVpZCwgb21pdCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVlRvb2x0aXBQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGlkOiBTdHJpbmcsXG4gIHRleHQ6IFN0cmluZyxcbiAgLi4ub21pdChtYWtlVk92ZXJsYXlQcm9wcyh7XG4gICAgY2xvc2VPbkJhY2s6IGZhbHNlLFxuICAgIGxvY2F0aW9uOiAnZW5kJyxcbiAgICBsb2NhdGlvblN0cmF0ZWd5OiAnY29ubmVjdGVkJyxcbiAgICBlYWdlcjogdHJ1ZSxcbiAgICBtaW5XaWR0aDogMCxcbiAgICBvZmZzZXQ6IDEwLFxuICAgIG9wZW5PbkNsaWNrOiBmYWxzZSxcbiAgICBvcGVuT25Ib3ZlcjogdHJ1ZSxcbiAgICBvcmlnaW46ICdhdXRvJyxcbiAgICBzY3JpbTogZmFsc2UsXG4gICAgc2Nyb2xsU3RyYXRlZ3k6ICdyZXBvc2l0aW9uJyxcbiAgICB0cmFuc2l0aW9uOiBmYWxzZVxuICB9KSwgWydhYnNvbHV0ZScsICdwZXJzaXN0ZW50J10pXG59LCAnVlRvb2x0aXAnKTtcbmV4cG9ydCBjb25zdCBWVG9vbHRpcCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWVG9vbHRpcCcsXG4gIHByb3BzOiBtYWtlVlRvb2x0aXBQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCB7XG4gICAgICBzY29wZUlkXG4gICAgfSA9IHVzZVNjb3BlSWQoKTtcbiAgICBjb25zdCB1aWQgPSBnZXRVaWQoKTtcbiAgICBjb25zdCBpZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmlkIHx8IGB2LXRvb2x0aXAtJHt1aWR9YCk7XG4gICAgY29uc3Qgb3ZlcmxheSA9IHJlZigpO1xuICAgIGNvbnN0IGxvY2F0aW9uID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLmxvY2F0aW9uLnNwbGl0KCcgJykubGVuZ3RoID4gMSA/IHByb3BzLmxvY2F0aW9uIDogcHJvcHMubG9jYXRpb24gKyAnIGNlbnRlcic7XG4gICAgfSk7XG4gICAgY29uc3Qgb3JpZ2luID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLm9yaWdpbiA9PT0gJ2F1dG8nIHx8IHByb3BzLm9yaWdpbiA9PT0gJ292ZXJsYXAnIHx8IHByb3BzLm9yaWdpbi5zcGxpdCgnICcpLmxlbmd0aCA+IDEgfHwgcHJvcHMubG9jYXRpb24uc3BsaXQoJyAnKS5sZW5ndGggPiAxID8gcHJvcHMub3JpZ2luIDogcHJvcHMub3JpZ2luICsgJyBjZW50ZXInO1xuICAgIH0pO1xuICAgIGNvbnN0IHRyYW5zaXRpb24gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMudHJhbnNpdGlvbikgcmV0dXJuIHByb3BzLnRyYW5zaXRpb247XG4gICAgICByZXR1cm4gaXNBY3RpdmUudmFsdWUgPyAnc2NhbGUtdHJhbnNpdGlvbicgOiAnZmFkZS10cmFuc2l0aW9uJztcbiAgICB9KTtcbiAgICBjb25zdCBhY3RpdmF0b3JQcm9wcyA9IGNvbXB1dGVkKCgpID0+IG1lcmdlUHJvcHMoe1xuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBpZC52YWx1ZVxuICAgIH0sIHByb3BzLmFjdGl2YXRvclByb3BzKSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFtvdmVybGF5UHJvcHNdID0gVk92ZXJsYXkuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWT3ZlcmxheSwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcInJlZlwiOiBvdmVybGF5LFxuICAgICAgICBcImNsYXNzXCI6IFsndi10b29sdGlwJywgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlLFxuICAgICAgICBcImlkXCI6IGlkLnZhbHVlXG4gICAgICB9LCBvdmVybGF5UHJvcHMsIHtcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IGlzQWN0aXZlLnZhbHVlID0gJGV2ZW50LFxuICAgICAgICBcInRyYW5zaXRpb25cIjogdHJhbnNpdGlvbi52YWx1ZSxcbiAgICAgICAgXCJhYnNvbHV0ZVwiOiB0cnVlLFxuICAgICAgICBcImxvY2F0aW9uXCI6IGxvY2F0aW9uLnZhbHVlLFxuICAgICAgICBcIm9yaWdpblwiOiBvcmlnaW4udmFsdWUsXG4gICAgICAgIFwicGVyc2lzdGVudFwiOiB0cnVlLFxuICAgICAgICBcInJvbGVcIjogXCJ0b29sdGlwXCIsXG4gICAgICAgIFwiYWN0aXZhdG9yUHJvcHNcIjogYWN0aXZhdG9yUHJvcHMudmFsdWUsXG4gICAgICAgIFwiX2Rpc2FibGVHbG9iYWxTdGFja1wiOiB0cnVlXG4gICAgICB9LCBzY29wZUlkKSwge1xuICAgICAgICBhY3RpdmF0b3I6IHNsb3RzLmFjdGl2YXRvcixcbiAgICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNsb3RzLmRlZmF1bHQ/LiguLi5hcmdzKSA/PyBwcm9wcy50ZXh0O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm9yd2FyZFJlZnMoe30sIG92ZXJsYXkpO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZUb29sdGlwLm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZVZhbGlkYXRpb25Qcm9wcywgdXNlVmFsaWRhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy92YWxpZGF0aW9uLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBWVmFsaWRhdGlvbiA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWVmFsaWRhdGlvbicsXG4gIHByb3BzOiBtYWtlVmFsaWRhdGlvblByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB2YWxpZGF0aW9uID0gdXNlVmFsaWRhdGlvbihwcm9wcywgJ3ZhbGlkYXRpb24nKTtcbiAgICByZXR1cm4gKCkgPT4gc2xvdHMuZGVmYXVsdD8uKHZhbGlkYXRpb24pO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZWYWxpZGF0aW9uLm1qcy5tYXAiLCIvLyBUeXBlc1xuXG5mdW5jdGlvbiBtb3VudGVkKGVsLCBiaW5kaW5nKSB7XG4gIGNvbnN0IG1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzIHx8IHt9O1xuICBjb25zdCB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIGNvbnN0IHtcbiAgICBvbmNlLFxuICAgIGltbWVkaWF0ZSxcbiAgICAuLi5tb2RpZmllcktleXNcbiAgfSA9IG1vZGlmaWVycztcbiAgY29uc3QgZGVmYXVsdFZhbHVlID0gIU9iamVjdC5rZXlzKG1vZGlmaWVyS2V5cykubGVuZ3RoO1xuICBjb25zdCB7XG4gICAgaGFuZGxlcixcbiAgICBvcHRpb25zXG4gIH0gPSB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gdmFsdWUgOiB7XG4gICAgaGFuZGxlcjogdmFsdWUsXG4gICAgb3B0aW9uczoge1xuICAgICAgYXR0cmlidXRlczogbW9kaWZpZXJLZXlzPy5hdHRyID8/IGRlZmF1bHRWYWx1ZSxcbiAgICAgIGNoYXJhY3RlckRhdGE6IG1vZGlmaWVyS2V5cz8uY2hhciA/PyBkZWZhdWx0VmFsdWUsXG4gICAgICBjaGlsZExpc3Q6IG1vZGlmaWVyS2V5cz8uY2hpbGQgPz8gZGVmYXVsdFZhbHVlLFxuICAgICAgc3VidHJlZTogbW9kaWZpZXJLZXlzPy5zdWIgPz8gZGVmYXVsdFZhbHVlXG4gICAgfVxuICB9O1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgbXV0YXRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgICBsZXQgb2JzZXJ2ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICBoYW5kbGVyPy4obXV0YXRpb25zLCBvYnNlcnZlcik7XG4gICAgaWYgKG9uY2UpIHVubW91bnRlZChlbCwgYmluZGluZyk7XG4gIH0pO1xuICBpZiAoaW1tZWRpYXRlKSBoYW5kbGVyPy4oW10sIG9ic2VydmVyKTtcbiAgZWwuX211dGF0ZSA9IE9iamVjdChlbC5fbXV0YXRlKTtcbiAgZWwuX211dGF0ZVtiaW5kaW5nLmluc3RhbmNlLiQudWlkXSA9IHtcbiAgICBvYnNlcnZlclxuICB9O1xuICBvYnNlcnZlci5vYnNlcnZlKGVsLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHVubW91bnRlZChlbCwgYmluZGluZykge1xuICBpZiAoIWVsLl9tdXRhdGU/LltiaW5kaW5nLmluc3RhbmNlLiQudWlkXSkgcmV0dXJuO1xuICBlbC5fbXV0YXRlW2JpbmRpbmcuaW5zdGFuY2UuJC51aWRdLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgZGVsZXRlIGVsLl9tdXRhdGVbYmluZGluZy5pbnN0YW5jZS4kLnVpZF07XG59XG5leHBvcnQgY29uc3QgTXV0YXRlID0ge1xuICBtb3VudGVkLFxuICB1bm1vdW50ZWRcbn07XG5leHBvcnQgZGVmYXVsdCBNdXRhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIiwiLy8gVHlwZXNcblxuZnVuY3Rpb24gbW91bnRlZChlbCwgYmluZGluZykge1xuICBjb25zdCBoYW5kbGVyID0gYmluZGluZy52YWx1ZTtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBwYXNzaXZlOiAhYmluZGluZy5tb2RpZmllcnM/LmFjdGl2ZVxuICB9O1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlciwgb3B0aW9ucyk7XG4gIGVsLl9vblJlc2l6ZSA9IE9iamVjdChlbC5fb25SZXNpemUpO1xuICBlbC5fb25SZXNpemVbYmluZGluZy5pbnN0YW5jZS4kLnVpZF0gPSB7XG4gICAgaGFuZGxlcixcbiAgICBvcHRpb25zXG4gIH07XG4gIGlmICghYmluZGluZy5tb2RpZmllcnM/LnF1aWV0KSB7XG4gICAgaGFuZGxlcigpO1xuICB9XG59XG5mdW5jdGlvbiB1bm1vdW50ZWQoZWwsIGJpbmRpbmcpIHtcbiAgaWYgKCFlbC5fb25SZXNpemU/LltiaW5kaW5nLmluc3RhbmNlLiQudWlkXSkgcmV0dXJuO1xuICBjb25zdCB7XG4gICAgaGFuZGxlcixcbiAgICBvcHRpb25zXG4gIH0gPSBlbC5fb25SZXNpemVbYmluZGluZy5pbnN0YW5jZS4kLnVpZF07XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgZGVsZXRlIGVsLl9vblJlc2l6ZVtiaW5kaW5nLmluc3RhbmNlLiQudWlkXTtcbn1cbmV4cG9ydCBjb25zdCBSZXNpemUgPSB7XG4gIG1vdW50ZWQsXG4gIHVubW91bnRlZFxufTtcbmV4cG9ydCBkZWZhdWx0IFJlc2l6ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCIvLyBUeXBlc1xuXG5mdW5jdGlvbiBtb3VudGVkKGVsLCBiaW5kaW5nKSB7XG4gIGNvbnN0IHtcbiAgICBzZWxmID0gZmFsc2VcbiAgfSA9IGJpbmRpbmcubW9kaWZpZXJzID8/IHt9O1xuICBjb25zdCB2YWx1ZSA9IGJpbmRpbmcudmFsdWU7XG4gIGNvbnN0IG9wdGlvbnMgPSB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlLm9wdGlvbnMgfHwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfTtcbiAgY29uc3QgaGFuZGxlciA9IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyB8fCAnaGFuZGxlRXZlbnQnIGluIHZhbHVlID8gdmFsdWUgOiB2YWx1ZS5oYW5kbGVyO1xuICBjb25zdCB0YXJnZXQgPSBzZWxmID8gZWwgOiBiaW5kaW5nLmFyZyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYmluZGluZy5hcmcpIDogd2luZG93O1xuICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlciwgb3B0aW9ucyk7XG4gIGVsLl9vblNjcm9sbCA9IE9iamVjdChlbC5fb25TY3JvbGwpO1xuICBlbC5fb25TY3JvbGxbYmluZGluZy5pbnN0YW5jZS4kLnVpZF0gPSB7XG4gICAgaGFuZGxlcixcbiAgICBvcHRpb25zLFxuICAgIC8vIERvbid0IHJlZmVyZW5jZSBzZWxmXG4gICAgdGFyZ2V0OiBzZWxmID8gdW5kZWZpbmVkIDogdGFyZ2V0XG4gIH07XG59XG5mdW5jdGlvbiB1bm1vdW50ZWQoZWwsIGJpbmRpbmcpIHtcbiAgaWYgKCFlbC5fb25TY3JvbGw/LltiaW5kaW5nLmluc3RhbmNlLiQudWlkXSkgcmV0dXJuO1xuICBjb25zdCB7XG4gICAgaGFuZGxlcixcbiAgICBvcHRpb25zLFxuICAgIHRhcmdldCA9IGVsXG4gIH0gPSBlbC5fb25TY3JvbGxbYmluZGluZy5pbnN0YW5jZS4kLnVpZF07XG4gIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgZGVsZXRlIGVsLl9vblNjcm9sbFtiaW5kaW5nLmluc3RhbmNlLiQudWlkXTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZWQoZWwsIGJpbmRpbmcpIHtcbiAgaWYgKGJpbmRpbmcudmFsdWUgPT09IGJpbmRpbmcub2xkVmFsdWUpIHJldHVybjtcbiAgdW5tb3VudGVkKGVsLCBiaW5kaW5nKTtcbiAgbW91bnRlZChlbCwgYmluZGluZyk7XG59XG5leHBvcnQgY29uc3QgU2Nyb2xsID0ge1xuICBtb3VudGVkLFxuICB1bm1vdW50ZWQsXG4gIHVwZGF0ZWRcbn07XG5leHBvcnQgZGVmYXVsdCBTY3JvbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIiwiXHJcbmltcG9ydCB7Y3JlYXRlQXBwfSBmcm9tICd2dWUnO1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vRWxlbWVudFN0eWxlRWRpdG9yQXBwLnZ1ZSc7XHJcblxyXG5pbXBvcnQgVnVlQ2xpY2tBd2F5IGZyb20gXCJ2dWUzLWNsaWNrLWF3YXlcIjtcclxuXHJcbmltcG9ydCBtaXR0IGZyb20gJ21pdHQnO1xyXG5cclxuY29uc3QgZW1pdHRlciA9IG1pdHQoKTtcclxuXHJcbmNvbnN0IGFwcCA9IGNyZWF0ZUFwcChBcHApO1xyXG5hcHAuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuZW1pdHRlciA9IGVtaXR0ZXI7XHJcblxyXG5hcHAuZGlyZWN0aXZlKFwidG9vbHRpcFwiLCB7XHJcbiAgICBtb3VudGVkOiAoZWwsIGJpbmRpbmcpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IGJvb3RzdHJhcC5Ub29sdGlwKGVsLCB7XHJcbiAgICAgICAgICAgIGJvdW5kYXJ5OiBkb2N1bWVudC5ib2R5LFxyXG4gICAgICAgICAgICBjb250YWluZXI6IGVsLnBhcmVudE5vZGUsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLy8gVnVldGlmeVxyXG5pbXBvcnQgJ3Z1ZXRpZnkvc3R5bGVzJztcclxuaW1wb3J0IHsgY3JlYXRlVnVldGlmeSB9IGZyb20gJ3Z1ZXRpZnknO1xyXG5pbXBvcnQgKiBhcyBjb21wb25lbnRzIGZyb20gJ3Z1ZXRpZnkvY29tcG9uZW50cyc7XHJcbmltcG9ydCAqIGFzIGRpcmVjdGl2ZXMgZnJvbSAndnVldGlmeS9kaXJlY3RpdmVzJztcclxuXHJcbmNvbnN0IHZ1ZXRpZnkgPSBjcmVhdGVWdWV0aWZ5KHtcclxuICAgIGNvbXBvbmVudHMsXHJcbiAgICBkaXJlY3RpdmVzLFxyXG59KVxyXG5cclxuYXBwLnVzZSh2dWV0aWZ5KTtcclxuYXBwLnVzZShWdWVDbGlja0F3YXkpO1xyXG5hcHAubW91bnQoJyNtdy1lbGVtZW50LXN0eWxlLWVkaXRvci1hcHAnKTtcclxuIl0sIm5hbWVzIjpbIl9zZmNfbWFpbiIsImFsaWdubWVudCIsIl9ob2lzdGVkXzEiLCJfaG9pc3RlZF8yIiwiX2NyZWF0ZUVsZW1lbnRWTm9kZSIsIl9ob2lzdGVkXzMiLCJfaG9pc3RlZF80IiwiX2hvaXN0ZWRfNSIsIl9ob2lzdGVkXzciLCJfaG9pc3RlZF85IiwiX2hvaXN0ZWRfMTEiLCJfb3BlbkJsb2NrIiwiX2NyZWF0ZUVsZW1lbnRCbG9jayIsIl9ub3JtYWxpemVDbGFzcyIsIiRwcm9wcyIsIiRvcHRpb25zIiwiX19kZWZhdWx0X18iLCJuZXdWYWx1ZSIsIm5ld0ZvbnRGYW1pbHkiLCJmb250RmFtaWx5IiwiZm9udHMiLCIkZGF0YSIsIl9ob2lzdGVkXzYiLCJfRnJhZ21lbnQiLCJfcmVuZGVyTGlzdCIsImZvbnRGYW1pbHlJdGVtIiwiaW5kZXgiLCIkZXZlbnQiLCJfdG9EaXNwbGF5U3RyaW5nIiwiX2NyZWF0ZVZOb2RlIiwiX2NvbXBvbmVudF92X3NsaWRlciIsImFyZ3MiLCJDb2xvclBpY2tlciIsIkZvbnRQaWNrZXIiLCJEcm9wZG93biIsIklucHV0IiwiU2xpZGVyIiwiQWxpZ24iLCJEcm9wZG93blNtYWxsIiwiU2xpZGVyU21hbGwiLCJub2RlIiwiY3NzIiwiYWxpZ24iLCJpcyIsImNvbG9yIiwiZm9udCIsInRleHRUcmFuc2Zvcm0iLCJwcm9wIiwidmFsIiwiZWxlbWVudFN0eWxlRWRpdG9yU2hvdyIsImVsZW1lbnQiLCJvbGRWYWx1ZSIsInNldEF1dG8iLCJfY29tcG9uZW50X0ZvbnRQaWNrZXIiLCJfY29tcG9uZW50X0FsaWduIiwiX2NvbXBvbmVudF9Db2xvclBpY2tlciIsIl9jb21wb25lbnRfU2xpZGVyU21hbGwiLCJfY29tcG9uZW50X0Ryb3Bkb3duU21hbGwiLCJwYWRkaW5nIiwibWFyZ2luIiwiX2hvaXN0ZWRfOCIsIl9ob2lzdGVkXzEwIiwiX2hvaXN0ZWRfMTIiLCJfaG9pc3RlZF8xMyIsIl9ob2lzdGVkXzE0IiwiX2hvaXN0ZWRfMTUiLCJfaG9pc3RlZF8xNiIsIl9ob2lzdGVkXzE3IiwiX2hvaXN0ZWRfMTgiLCJuZXdmaWxlIiwidXJsIiwiZmlsZSIsIkZpbGVQaWNrZXIiLCJJbWFnZVBpY2tlciIsImJnIiwidXJsVmFsIiwiX2NvbXBvbmVudF9JbWFnZVBpY2tlciIsIl9jYWNoZSIsIl92TW9kZWxUZXh0IiwiQm9yZGVyUmFkaXVzIiwiYm9yZGVyIiwiZnJzdCIsImkiLCJzaXplIiwic3R5bGUiLCJib3JkZXJSYWRpdXMiLCJib3JkZXJSYWRpdXNWYWx1ZSIsImJvcmRlckltYWdlVmFsdWUiLCJsaSIsImlzSW5hY2Nlc3NpYmxlIiwiZSIsInRhcmdldCIsImNvbnRhaW5lck5vZGUiLCJFbGVtZW50U3R5bGVBbmltYXRpb25zQXBwbGllciIsImFuaW1hdGlvbiIsIm5vZGVXaW5kb3ciLCJzZWwiLCJpZCIsImNvbmZpZyIsInRhcmdldE13IiwiY3VyciIsImEiLCJpdGVtIiwiY2l0ZW0iLCJhbmltYXRpb25EYXRhIiwic3BlZWQiLCJ3aGVuIiwiZ3JpZE9wdGlvbiIsInNlbGVjdGVkR3JpZE9wdGlvbiIsIm9wdGlvbiIsImNvbW1vbmpzR2xvYmFsIiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJmbiIsImJhc2VkaXIiLCJtb2R1bGUiLCJwYXRoIiwiYmFzZSIsImNvbW1vbmpzUmVxdWlyZSIsInZDbGlja091dHNpZGVfdW1kIiwiZXhwb3J0cyIsIm4iLCJ0IiwiciIsIm8iLCJkIiwiYyIsInUiLCJsIiwidkNsaWNrT3V0c2lkZSIsIl9ob2lzdGVkXzEkMSIsIl9ob2lzdGVkXzIkMSIsImNyZWF0ZUVsZW1lbnRWTm9kZSIsIl9ob2lzdGVkXzMkMSIsIl9ob2lzdGVkXzQkMSIsInJlbmRlciQxIiwiX2N0eCIsIm9wZW5CbG9jayIsImNyZWF0ZUVsZW1lbnRCbG9jayIsInN0eWxlSW5qZWN0IiwicmVmIiwiaW5zZXJ0QXQiLCJoZWFkIiwiY3NzXzI0OHokMSIsInNjcmlwdCQxIiwiTG9hZGluZyIsInNjcmlwdCIsImlzTGltaXQiLCJ2YWx1ZSIsInRhZ3MiLCJuYW1lIiwiZXZlbnQiLCJlbCIsIm1lbnUiLCJFTEVNRU5UX0hFSUdIVCIsIkJPUkRFUl9IRUlHSFQiLCJ0YWdEYXRhIiwidGFnIiwia2V5U2hvdWxkQWRkVGFnIiwidHlwZUlzTm90Qmx1ciIsImlzRHVwbGljYXRlZE9yTWF4TGVuZ3RoIiwidGFnVmFsdWUiLCJyZW5kZXIiLCIkc2V0dXAiLCJfY29tcG9uZW50X0xvYWRpbmciLCJyZXNvbHZlQ29tcG9uZW50IiwiX2RpcmVjdGl2ZV9jbGlja19vdXRzaWRlIiwicmVzb2x2ZURpcmVjdGl2ZSIsIndpdGhEaXJlY3RpdmVzIiwibm9ybWFsaXplQ2xhc3MiLCJGcmFnbWVudCIsInJlbmRlckxpc3QiLCJyZW5kZXJTbG90Iiwibm9ybWFsaXplUHJvcHMiLCJtZXJnZVByb3BzIiwidG9EaXNwbGF5U3RyaW5nIiwiY3JlYXRlQ29tbWVudFZOb2RlIiwid2l0aE1vZGlmaWVycyIsIndpdGhLZXlzIiwidk1vZGVsVGV4dCIsImNyZWF0ZUJsb2NrIiwiZ3VhcmRSZWFjdGl2ZVByb3BzIiwiY3NzXzI0OHoiLCJlbnRyeV9lc20iLCJpbnN0YWxsYWJsZSIsImFwcCIsIlZ1ZTNUYWdzSW5wdXQiLCJyZWdleCIsImNsYXNzTmFtZSIsImNsYXNzZXMiLCJhY3RpdmVOb2RlQ2xhc3NlcyIsImNsYXNzZXNUb0luY2x1ZGUiLCJfY29tcG9uZW50X3Z1ZTNfdGFnc19pbnB1dCIsIl9jb21wb25lbnRfQm9yZGVyUmFkaXVzIiwiRWxlbWVudFN0eWxlRWRpdG9yQmFja2dyb3VuZCIsIkVsZW1lbnRTdHlsZUVkaXRvclJvdW5kZWRDb3JuZXJzIiwiRWxlbWVudFN0eWxlRWRpdG9yRWxlbWVudFNlbGVjdG9yIiwiRWxlbWVudFN0eWxlRWRpdG9yVHlwb2dyYXBoeSIsIkVsZW1lbnRTdHlsZUVkaXRvclNwYWNpbmciLCJFbGVtZW50U3R5bGVFZGl0b3JCb3JkZXIiLCJFbGVtZW50U3R5bGVFZGl0b3JDb250YWluZXIiLCJFbGVtZW50U3R5bGVFZGl0b3JHcmlkIiwiRWxlbWVudFN0eWxlRWRpdG9yQW5pbWF0aW9ucyIsIkVsZW1lbnRTdHlsZUVkaXRvckNsYXNzQXBwbGllciIsInNldHRpbmdzIiwiX3dpdGhEaXJlY3RpdmVzIiwiX2NvbXBvbmVudF9FbGVtZW50U3R5bGVFZGl0b3JFbGVtZW50U2VsZWN0b3IiLCJfY29tcG9uZW50X0VsZW1lbnRTdHlsZUVkaXRvckJhY2tncm91bmQiLCJfY29tcG9uZW50X0VsZW1lbnRTdHlsZUVkaXRvclR5cG9ncmFwaHkiLCJfY29tcG9uZW50X0VsZW1lbnRTdHlsZUVkaXRvclNwYWNpbmciLCJfY29tcG9uZW50X0VsZW1lbnRTdHlsZUVkaXRvckNvbnRhaW5lciIsIl9jb21wb25lbnRfRWxlbWVudFN0eWxlRWRpdG9yR3JpZCIsIl9jb21wb25lbnRfRWxlbWVudFN0eWxlRWRpdG9yQm9yZGVyIiwiX2NvbXBvbmVudF9FbGVtZW50U3R5bGVFZGl0b3JSb3VuZGVkQ29ybmVycyIsIl9jb21wb25lbnRfRWxlbWVudFN0eWxlRWRpdG9yQW5pbWF0aW9ucyIsIl9jb21wb25lbnRfRWxlbWVudFN0eWxlRWRpdG9yQ2xhc3NBcHBsaWVyIiwiSU5fQlJPV1NFUiIsIlNVUFBPUlRTX0lOVEVSU0VDVElPTiIsIlNVUFBPUlRTX1RPVUNIIiwiX2NsYXNzUHJpdmF0ZUZpZWxkSW5pdFNwZWMiLCJvYmoiLCJwcml2YXRlTWFwIiwiX2NoZWNrUHJpdmF0ZVJlZGVjbGFyYXRpb24iLCJwcml2YXRlQ29sbGVjdGlvbiIsIl9jbGFzc1ByaXZhdGVGaWVsZFNldCIsInJlY2VpdmVyIiwiZGVzY3JpcHRvciIsIl9jbGFzc0V4dHJhY3RGaWVsZERlc2NyaXB0b3IiLCJfY2xhc3NBcHBseURlc2NyaXB0b3JTZXQiLCJfY2xhc3NQcml2YXRlRmllbGRHZXQiLCJfY2xhc3NBcHBseURlc2NyaXB0b3JHZXQiLCJhY3Rpb24iLCJnZXROZXN0ZWRWYWx1ZSIsImZhbGxiYWNrIiwibGFzdCIsImRlZXBFcXVhbCIsImIiLCJwcm9wcyIsInAiLCJnZXRPYmplY3RWYWx1ZUJ5UGF0aCIsImdldFByb3BlcnR5RnJvbUl0ZW0iLCJwcm9wZXJ0eSIsImNyZWF0ZVJhbmdlIiwibGVuZ3RoIiwic3RhcnQiLCJ2IiwiayIsImNvbnZlcnRUb1VuaXQiLCJzdHIiLCJ1bml0IiwiaXNPYmplY3QiLCJyZWZFbGVtZW50Iiwia2V5Q29kZXMiLCJrZXlWYWx1ZXMiLCJrZXlzIiwiaGFzIiwia2V5IiwicGljayIsInBhdGhzIiwiZXhjbHVkZSIsImZvdW5kIiwicmVzdCIsIm9taXQiLCJjbG9uZSIsIm9uUkUiLCJpc09uIiwiYnViYmxpbmdFdmVudHMiLCJmaWx0ZXJJbnB1dEF0dHJzIiwiYXR0cnMiLCJldmVudHMiLCJpbnB1dEV2ZW50cyIsInJvb3RBdHRycyIsImlucHV0QXR0cnMiLCJ3cmFwSW5BcnJheSIsImNsYW1wIiwibWluIiwibWF4IiwiZ2V0RGVjaW1hbHMiLCJ0cmltbWVkU3RyIiwicGFkRW5kIiwiY2hhciIsImNodW5rIiwiY2h1bmtlZCIsImh1bWFuUmVhZGFibGVGaWxlU2l6ZSIsImJ5dGVzIiwicHJlZml4IiwibWVyZ2VEZWVwIiwic291cmNlIiwiYXJyYXlGbiIsIm91dCIsInNvdXJjZVByb3BlcnR5IiwidGFyZ2V0UHJvcGVydHkiLCJmbGF0dGVuRnJhZ21lbnRzIiwibm9kZXMiLCJ0b0tlYmFiQ2FzZSIsImtlYmFiIiwiZmluZENoaWxkcmVuV2l0aFByb3ZpZGUiLCJ2bm9kZSIsImNoaWxkIiwiX2FyciIsIl9wb2ludGVyIiwiQ2lyY3VsYXJCdWZmZXIiLCJnZXRFdmVudENvb3JkaW5hdGVzIiwiZGVzdHJ1Y3RDb21wdXRlZCIsImdldHRlciIsInJlZnMiLCJyZWFjdGl2ZSIsImNvbXB1dGVkIiwid2F0Y2hFZmZlY3QiLCJ0b1JlZnMiLCJpbmNsdWRlcyIsImFyciIsImV2ZW50TmFtZSIsInByb3BOYW1lIiwiRXZlbnRQcm9wIiwiaGFzRXZlbnQiLCJjYXBpdGFsaXplIiwiY2FsbEV2ZW50IiwiaGFuZGxlciIsIl9sZW4yIiwiX2tleTIiLCJoIiwiZm9jdXNhYmxlQ2hpbGRyZW4iLCJmaWx0ZXJCeVRhYkluZGV4IiwidGFyZ2V0cyIsInMiLCJnZXROZXh0RWxlbWVudCIsImVsZW1lbnRzIiwibG9jYXRpb24iLCJjb25kaXRpb24iLCJfZWwiLCJpZHgiLCJpbmMiLCJmb2N1c0NoaWxkIiwiZm9jdXNhYmxlIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJub29wIiwibWF0Y2hlc1NlbGVjdG9yIiwic2VsZWN0b3IiLCJibG9jayIsImlubGluZSIsInBhcnNlQW5jaG9yIiwiYW5jaG9yIiwiaXNSdGwiLCJzaWRlIiwidG9QaHlzaWNhbCIsImZsaXBTaWRlIiwiZmxpcEFsaWduIiwiZmxpcENvcm5lciIsImdldEF4aXMiLCJCb3giLCJfcmVmIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsImdldE92ZXJmbG93IiwibnVsbGlmeVRyYW5zZm9ybXMiLCJyZWN0IiwidHgiLCJ0YSIsInN4Iiwic3kiLCJkeCIsImR5IiwidG8iLCJ3IiwiYW5pbWF0ZSIsImtleWZyYW1lcyIsIm9wdGlvbnMiLCJyZXNvbHZlIiwiaGFuZGxlcnMiLCJiaW5kUHJvcHMiLCJfaGFuZGxlciIsInVuYmluZFByb3BzIiwibWFpblRSQyIsIlJjbyIsIkdjbyIsIkJjbyIsIm5vcm1CRyIsIm5vcm1UWFQiLCJyZXZUWFQiLCJyZXZCRyIsImJsa1RocnMiLCJibGtDbG1wIiwiZGVsdGFZbWluIiwic2NhbGVCb1ciLCJzY2FsZVdvQiIsImxvQ29uVGhyZXNoIiwibG9Db25GYWN0b3IiLCJsb0Nvbk9mZnNldCIsImxvQ2xpcCIsIkFQQ0Fjb250cmFzdCIsInRleHQiLCJiYWNrZ3JvdW5kIiwiUnR4dCIsIkd0eHQiLCJCdHh0IiwiUmJnIiwiR2JnIiwiQmJnIiwiWXR4dCIsIlliZyIsIm91dHB1dENvbnRyYXN0IiwiU0FQQyIsImRlcHJlY2F0ZSIsIm9yaWdpbmFsIiwicmVwbGFjZW1lbnQiLCJkZWx0YSIsImNpZWxhYkZvcndhcmRUcmFuc2Zvcm0iLCJjaWVsYWJSZXZlcnNlVHJhbnNmb3JtIiwiZnJvbVhZWiIsInh5eiIsInRyYW5zZm9ybSIsInRyYW5zZm9ybWVkWSIsInRvWFlaIiwibGFiIiwiTG4iLCJzcmdiRm9yd2FyZE1hdHJpeCIsInNyZ2JGb3J3YXJkVHJhbnNmb3JtIiwiQyIsInNyZ2JSZXZlcnNlTWF0cml4Iiwic3JnYlJldmVyc2VUcmFuc2Zvcm0iLCJyZ2IiLCJtYXRyaXgiLCJnIiwiaXNDc3NDb2xvciIsImNzc0NvbG9yUmUiLCJtYXBwZXJzIiwiSFNMdG9SR0IiLCJIU1Z0b1JHQiIsInBhcnNlQ29sb3IiLCJncm91cHMiLCJ2YWx1ZXMiLCJyZWFsVmFsdWVzIiwiaGV4IiwiSGV4VG9SR0IiLCJIU0x0b0hTViIsImhzdmEiLCJmIiwiaHNsYSIsIlJHQnRvSFNWIiwicmdiYSIsImhzdiIsIkhTVnRvSFNMIiwic3ByaW1lIiwiaHNsIiwiUkdCdG9DU1MiLCJIU1Z0b0NTUyIsInRvSGV4IiwiUkdCdG9IZXgiLCJfcmVmMiIsInBhcnNlSGV4IiwiSGV4VG9IU1YiLCJIU1Z0b0hleCIsImxpZ2h0ZW4iLCJhbW91bnQiLCJDSUVMQUIuZnJvbVhZWiIsInNSR0IudG9YWVoiLCJzUkdCLmZyb21YWVoiLCJDSUVMQUIudG9YWVoiLCJkYXJrZW4iLCJnZXRMdW1hIiwiZ2V0Q29udHJhc3QiLCJmaXJzdCIsInNlY29uZCIsImwxIiwibDIiLCJsaWdodCIsImRhcmsiLCJnZXRGb3JlZ3JvdW5kIiwiYmxhY2tDb250cmFzdCIsInByb3BzRmFjdG9yeSIsImRlZmF1bHRzIiwiZGVmaW5pdGlvbiIsIm1ha2VDb21wb25lbnRQcm9wcyIsImRlZmluZUNvbXBvbmVudCIsInByb3BLZXlzIiwiY3R4IiwiaW5qZWN0RGVmYXVsdHMiLCJfcHJvcHMiLCJwcm92aWRlU3ViRGVmYXVsdHMiLCJpbnRlcm5hbFVzZURlZmF1bHRzIiwic2V0dXBCaW5kaW5ncyIsImdlbmVyaWNDb21wb25lbnQiLCJleHBvc2VEZWZhdWx0cyIsIl9kZWZpbmVDb21wb25lbnQiLCJjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIiwia2xhc3MiLCJjYW1lbGl6ZSIsInNsb3RzIiwiYXR0YWNoZWRSb290Iiwicm9vdCIsInN0YW5kYXJkRWFzaW5nIiwiZGVjZWxlcmF0ZWRFYXNpbmciLCJhY2NlbGVyYXRlZEVhc2luZyIsImdldEN1cnJlbnRJbnN0YW5jZSIsIm1lc3NhZ2UiLCJ2bSIsIl9nZXRDdXJyZW50SW5zdGFuY2UiLCJnZXRDdXJyZW50SW5zdGFuY2VOYW1lIiwiX3VpZCIsIl9tYXAiLCJnZXRVaWQiLCJ1aWQiLCJnZXRTY3JvbGxQYXJlbnQiLCJpbmNsdWRlSGlkZGVuIiwiaXNQb3RlbnRpYWxseVNjcm9sbGFibGUiLCJoYXNTY3JvbGxiYXIiLCJnZXRTY3JvbGxQYXJlbnRzIiwic3RvcEF0IiwiaW5qZWN0U2VsZiIsInByb3ZpZGVzIiwiaXNGaXhlZFBvc2l0aW9uIiwidXNlUmVuZGVyIiwiRGVmYXVsdHNTeW1ib2wiLCJjcmVhdGVEZWZhdWx0cyIsImluamVjdCIsInByb3ZpZGVEZWZhdWx0cyIsImluamVjdGVkRGVmYXVsdHMiLCJwcm92aWRlZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJ1bnJlZiIsInNjb3BlZCIsInJlc2V0IiwicHJvcGVydGllcyIsImxlbiIsInByb3ZpZGUiLCJwcm9wSXNEZWZpbmVkIiwiY29tcG9uZW50RGVmYXVsdHMiLCJwcm9wVmFsdWUiLCJfc3ViY29tcG9uZW50RGVmYXVsdHMiLCJzaGFsbG93UmVmIiwic3ViQ29tcG9uZW50cyIsImluamVjdGVkIiwiYnJlYWtwb2ludHMiLCJEaXNwbGF5U3ltYm9sIiwiZGVmYXVsdERpc3BsYXlPcHRpb25zIiwicGFyc2VEaXNwbGF5T3B0aW9ucyIsImdldENsaWVudFdpZHRoIiwic3NyIiwiZ2V0Q2xpZW50SGVpZ2h0IiwiZ2V0UGxhdGZvcm0iLCJ1c2VyQWdlbnQiLCJtYXRjaCIsInJlZ2V4cCIsImFuZHJvaWQiLCJpb3MiLCJjb3Jkb3ZhIiwiZWxlY3Ryb24iLCJjaHJvbWUiLCJlZGdlIiwiZmlyZWZveCIsIm9wZXJhIiwid2luIiwibWFjIiwibGludXgiLCJjcmVhdGVEaXNwbGF5IiwidGhyZXNob2xkcyIsIm1vYmlsZUJyZWFrcG9pbnQiLCJwbGF0Zm9ybSIsInN0YXRlIiwidXBkYXRlU2l6ZSIsInVwZGF0ZSIsInhzIiwic20iLCJtZCIsImxnIiwieGwiLCJ4eGwiLCJicmVha3BvaW50VmFsdWUiLCJtb2JpbGUiLCJ1c2VEaXNwbGF5IiwiZGlzcGxheSIsImFsaWFzZXMiLCJtZGkiLCJWQ2xhc3NJY29uIiwiSWNvblZhbHVlIiwiSWNvblN5bWJvbCIsIm1ha2VJY29uUHJvcHMiLCJWQ29tcG9uZW50SWNvbiIsIkljb24iLCJWU3ZnSWNvbiIsIl9tZXJnZVByb3BzIiwiVkxpZ2F0dXJlSWNvbiIsImRlZmF1bHRTZXRzIiwiY3JlYXRlSWNvbnMiLCJ1c2VJY29uIiwiaWNvbnMiLCJpY29uQWxpYXMiLCJpY29uIiwiaWNvblNldE5hbWUiLCJzZXROYW1lIiwiaWNvbk5hbWUiLCJlbiIsImRlZmF1bHRSdGwiLCJ1c2VUb2dnbGVTY29wZSIsInNjb3BlIiwiZWZmZWN0U2NvcGUiLCJ3YXRjaCIsImFjdGl2ZSIsIm9uU2NvcGVEaXNwb3NlIiwidXNlUHJveGllZE1vZGVsIiwiZGVmYXVsdFZhbHVlIiwidHJhbnNmb3JtSW4iLCJ0cmFuc2Zvcm1PdXQiLCJpbnRlcm5hbCIsImtlYmFiUHJvcCIsImlzQ29udHJvbGxlZCIsIm1vZGVsIiwiZXh0ZXJuYWxWYWx1ZSIsImludGVybmFsVmFsdWUiLCJ0b1JhdyIsIkxBTkdfUFJFRklYIiwicmVwbGFjZSIsInBhcmFtcyIsImNyZWF0ZVRyYW5zbGF0ZUZ1bmN0aW9uIiwiY3VycmVudCIsIm1lc3NhZ2VzIiwiX2xlbiIsIl9rZXkiLCJzaG9ydEtleSIsImN1cnJlbnRMb2NhbGUiLCJmYWxsYmFja0xvY2FsZSIsImNyZWF0ZU51bWJlckZ1bmN0aW9uIiwidXNlUHJvdmlkZWQiLCJwcm92aWRlZCIsImNyZWF0ZVByb3ZpZGVGdW5jdGlvbiIsImNyZWF0ZVZ1ZXRpZnlBZGFwdGVyIiwiTG9jYWxlU3ltYm9sIiwiaXNMb2NhbGVJbnN0YW5jZSIsImNyZWF0ZUxvY2FsZSIsImkxOG4iLCJydGwiLCJjcmVhdGVSdGwiLCJ1c2VMb2NhbGUiLCJsb2NhbGUiLCJwcm92aWRlTG9jYWxlIiwicHJvdmlkZVJ0bCIsImRhdGEiLCJ1c2VSdGwiLCJUaGVtZVN5bWJvbCIsIm1ha2VUaGVtZVByb3BzIiwiZGVmYXVsdFRoZW1lT3B0aW9ucyIsInBhcnNlVGhlbWVPcHRpb25zIiwidGhlbWVzIiwidGhlbWUiLCJkZWZhdWx0VGhlbWUiLCJjcmVhdGVUaGVtZSIsInBhcnNlZE9wdGlvbnMiLCJjb21wdXRlZFRoZW1lcyIsImFjYyIsInZhcmlhdGlvbiIsIm9uQ29sb3IiLCJjb2xvclZhbCIsInN0eWxlcyIsImxpbmVzIiwiY3JlYXRlQ3NzQ2xhc3MiLCJnZW5Dc3NWYXJpYWJsZXMiLCJ0aGVtZU5hbWUiLCJiZ0xpbmVzIiwiZmdMaW5lcyIsImNvbG9ycyIsImdldEhlYWQiLCJpbnN0YWxsIiwiZW50cnkiLCJ1cGRhdGVTdHlsZXMiLCJzdHlsZUVsIiwidGhlbWVDbGFzc2VzIiwicHJvdmlkZVRoZW1lIiwibmV3VGhlbWUiLCJ1c2VUaGVtZSIsImNvbnRlbnQiLCJsaW5lIiwibGlnaHRPdmVybGF5IiwiZGFya092ZXJsYXkiLCJ2YXJpYWJsZXMiLCJmaXJzdERheSIsImdldFdlZWtBcnJheSIsImRhdGUiLCJ3ZWVrcyIsImN1cnJlbnRXZWVrIiwiZmlyc3REYXlPZk1vbnRoIiwic3RhcnRPZk1vbnRoIiwibGFzdERheU9mTW9udGgiLCJlbmRPZk1vbnRoIiwiZmlyc3REYXlXZWVrSW5kZXgiLCJsYXN0RGF5V2Vla0luZGV4IiwiYWRqYWNlbnREYXkiLCJkYXkiLCJwYXJzZUxvY2FsRGF0ZSIsInBhcnRzIiwiX1lZWU1NREQiLCJwYXJzZWQiLCJzdW5kYXlKYW51YXJ5U2Vjb25kMjAwMCIsImdldFdlZWtkYXlzIiwiZGF5c0Zyb21TdW5kYXkiLCJ3ZWVrZGF5IiwiZm9ybWF0IiwiZm9ybWF0U3RyaW5nIiwiYWRkRGF5cyIsImFkZE1vbnRocyIsImdldFllYXIiLCJnZXRNb250aCIsInN0YXJ0T2ZZZWFyIiwiZW5kT2ZZZWFyIiwiaXNXaXRoaW5SYW5nZSIsInJhbmdlIiwiaXNBZnRlciIsImlzQmVmb3JlIiwiaXNWYWxpZCIsImNvbXBhcmluZyIsImlzRXF1YWwiLCJpc1NhbWVEYXkiLCJpc1NhbWVNb250aCIsImdldERpZmYiLCJzZXRZZWFyIiwieWVhciIsInN0YXJ0T2ZEYXkiLCJlbmRPZkRheSIsIlZ1ZXRpZnlEYXRlQWRhcHRlciIsIkRhdGVBZGFwdGVyU3ltYm9sIiwiY3JlYXRlRGF0ZSIsInVzZVJlc2l6ZU9ic2VydmVyIiwiY2FsbGJhY2siLCJib3giLCJyZXNpemVSZWYiLCJjb250ZW50UmVjdCIsIm9ic2VydmVyIiwiZW50cmllcyIsIm9uQmVmb3JlVW5tb3VudCIsInJlYWRvbmx5IiwiVnVldGlmeUxheW91dEtleSIsIlZ1ZXRpZnlMYXlvdXRJdGVtS2V5IiwiUk9PVF9aSU5ERVgiLCJtYWtlTGF5b3V0UHJvcHMiLCJtYWtlTGF5b3V0SXRlbVByb3BzIiwidXNlTGF5b3V0IiwibGF5b3V0IiwidXNlTGF5b3V0SXRlbSIsImlzS2VwdEFsaXZlIiwib25EZWFjdGl2YXRlZCIsIm9uQWN0aXZhdGVkIiwibGF5b3V0SXRlbVN0eWxlcyIsImxheW91dEl0ZW1TY3JpbVN0eWxlcyIsImdlbmVyYXRlTGF5ZXJzIiwicG9zaXRpb25zIiwibGF5b3V0U2l6ZXMiLCJhY3RpdmVJdGVtcyIsInByZXZpb3VzTGF5ZXIiLCJsYXllcnMiLCJwb3NpdGlvbiIsImxheWVyIiwiY3JlYXRlTGF5b3V0IiwicGFyZW50TGF5b3V0Iiwicm9vdFpJbmRleCIsInJlZ2lzdGVyZWQiLCJwcmlvcml0aWVzIiwiZGlzYWJsZWRUcmFuc2l0aW9ucyIsImxheW91dFJlY3QiLCJjb21wdXRlZE92ZXJsYXBzIiwibWFwIiwib3ZlcmxhcHMiLCJvdmVybGFwIiwidG9wIiwiYm90dG9tIiwidG9wUG9zaXRpb24iLCJib3R0b21Qb3NpdGlvbiIsInRvcEFtb3VudCIsImJvdHRvbUFtb3VudCIsInVuaXF1ZVByaW9yaXRpZXMiLCJpdGVtcyIsInRyYW5zaXRpb25zRW5hYmxlZCIsIm1haW5SZWN0IiwibWFpblN0eWxlcyIsImdldExheW91dEl0ZW0iLCJyb290Vm0iLCJpc01vdW50ZWQiLCJvbk1vdW50ZWQiLCJvcmRlciIsImxheW91dFNpemUiLCJlbGVtZW50U2l6ZSIsImRpc2FibGVUcmFuc2l0aW9ucyIsImFic29sdXRlIiwiaW5zdGFuY2VJbmRleCIsInpJbmRleCIsImlzSG9yaXpvbnRhbCIsImlzT3Bwb3NpdGVIb3Jpem9udGFsIiwiaXNPcHBvc2l0ZVZlcnRpY2FsIiwibGF5b3V0Q2xhc3NlcyIsImxheW91dFN0eWxlcyIsImNyZWF0ZVZ1ZXRpZnkiLCJ2dWV0aWZ5IiwiYmx1ZXByaW50IiwiY29tcG9uZW50cyIsImRpcmVjdGl2ZXMiLCJtb3VudCIsIm5leHRUaWNrIiwidmVyc2lvbiIsIm1ha2VWQXBwUHJvcHMiLCJWQXBwIiwibGF5b3V0UmVmIiwicnRsQ2xhc3NlcyIsIm1ha2VUYWdQcm9wcyIsIm1ha2VWVG9vbGJhclRpdGxlUHJvcHMiLCJWVG9vbGJhclRpdGxlIiwiaGFzVGV4dCIsIm1ha2VUcmFuc2l0aW9uUHJvcHMiLCJjcmVhdGVDc3NUcmFuc2l0aW9uIiwib3JpZ2luIiwibW9kZSIsImZ1bmN0aW9ucyIsIm9mZnNldFRvcCIsIm9mZnNldExlZnQiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImxlZnQiLCJUcmFuc2l0aW9uR3JvdXAiLCJUcmFuc2l0aW9uIiwiY3JlYXRlSmF2YXNjcmlwdFRyYW5zaXRpb24iLCJFeHBhbmRUcmFuc2l0aW9uR2VuZXJhdG9yIiwiZXhwYW5kZWRQYXJlbnRDbGFzcyIsInNpemVQcm9wZXJ0eSIsIm9mZnNldFByb3BlcnR5IiwiaW5pdGlhbFN0eWxlIiwib2Zmc2V0IiwicmVzZXRTdHlsZXMiLCJvbkFmdGVyTGVhdmUiLCJtYWtlVkRpYWxvZ1RyYW5zaXRpb25Qcm9wcyIsIlZEaWFsb2dUcmFuc2l0aW9uIiwiZG9uZSIsImdldERpbWVuc2lvbnMiLCJnZXRDaGlsZHJlbiIsImVscyIsInRhcmdldEJveCIsImVsQm94Iiwib3JpZ2luWCIsIm9yaWdpblkiLCJhbmNob3JTaWRlIiwiYW5jaG9yT2Zmc2V0Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ0c3giLCJ0c3kiLCJtYXhzIiwiYXNhIiwiVkZhYlRyYW5zaXRpb24iLCJWRGlhbG9nQm90dG9tVHJhbnNpdGlvbiIsIlZEaWFsb2dUb3BUcmFuc2l0aW9uIiwiVkZhZGVUcmFuc2l0aW9uIiwiVlNjYWxlVHJhbnNpdGlvbiIsIlZTY3JvbGxYVHJhbnNpdGlvbiIsIlZTY3JvbGxYUmV2ZXJzZVRyYW5zaXRpb24iLCJWU2Nyb2xsWVRyYW5zaXRpb24iLCJWU2Nyb2xsWVJldmVyc2VUcmFuc2l0aW9uIiwiVlNsaWRlWFRyYW5zaXRpb24iLCJWU2xpZGVYUmV2ZXJzZVRyYW5zaXRpb24iLCJWU2xpZGVZVHJhbnNpdGlvbiIsIlZTbGlkZVlSZXZlcnNlVHJhbnNpdGlvbiIsIlZFeHBhbmRUcmFuc2l0aW9uIiwiVkV4cGFuZFhUcmFuc2l0aW9uIiwibWFrZVZEZWZhdWx0c1Byb3ZpZGVyUHJvcHMiLCJWRGVmYXVsdHNQcm92aWRlciIsImRpc2FibGVkIiwibWFrZURpbWVuc2lvblByb3BzIiwidXNlRGltZW5zaW9uIiwidXNlQXNwZWN0U3R5bGVzIiwicmF0aW8iLCJtYWtlVlJlc3BvbnNpdmVQcm9wcyIsIlZSZXNwb25zaXZlIiwiYXNwZWN0U3R5bGVzIiwiZGltZW5zaW9uU3R5bGVzIiwiTWF5YmVUcmFuc2l0aW9uIiwidHJhbnNpdGlvbiIsImNvbXBvbmVudCIsImN1c3RvbVByb3BzIiwibW91bnRlZCIsImJpbmRpbmciLCJtb2RpZmllcnMiLCJfb2JzZXJ2ZSIsImlzSW50ZXJzZWN0aW5nIiwidW5tb3VudGVkIiwib2JzZXJ2ZSIsIkludGVyc2VjdCIsIm1ha2VWSW1nUHJvcHMiLCJWSW1nIiwiaW50ZXJzZWN0IiwiZW1pdCIsImN1cnJlbnRTcmMiLCJpbWFnZSIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJub3JtYWxpc2VkU3JjIiwiYXNwZWN0UmF0aW8iLCJpbml0Iiwib2xkVmFsIiwicG9sbEZvclNpemUiLCJvbkJlZm9yZU1vdW50IiwibGF6eUltZyIsIm9uRXJyb3IiLCJvbkxvYWQiLCJnZXRTcmMiLCJpbWciLCJ0aW1lciIsInRpbWVvdXQiLCJwb2xsIiwiaW1nSGVpZ2h0IiwiaW1nV2lkdGgiLCJjb250YWluQ2xhc3NlcyIsIl9faW1hZ2UiLCJzb3VyY2VzIiwidlNob3ciLCJfX3ByZWxvYWRJbWFnZSIsIl9fcGxhY2Vob2xkZXIiLCJfX2Vycm9yIiwiX19ncmFkaWVudCIsImlzQm9vdGVkIiwic3RvcCIsInJlc3BvbnNpdmVQcm9wcyIsIl9yZXNvbHZlRGlyZWN0aXZlIiwibWFrZUJvcmRlclByb3BzIiwidXNlQm9yZGVyIiwiaXNSZWYiLCJ1c2VDb2xvciIsImJhY2tncm91bmRDb2xvciIsInRleHRDb2xvciIsInVzZVRleHRDb2xvciIsInRleHRDb2xvckNsYXNzZXMiLCJ0ZXh0Q29sb3JTdHlsZXMiLCJ1c2VCYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzIiwiYmFja2dyb3VuZENvbG9yU3R5bGVzIiwibWFrZUVsZXZhdGlvblByb3BzIiwidXNlRWxldmF0aW9uIiwiZWxldmF0aW9uIiwibWFrZVJvdW5kZWRQcm9wcyIsInVzZVJvdW5kZWQiLCJyb3VuZGVkIiwiYWxsb3dlZERlbnNpdGllcyIsIm1ha2VWVG9vbGJhclByb3BzIiwiVlRvb2xiYXIiLCJ0b1JlZiIsImJvcmRlckNsYXNzZXMiLCJlbGV2YXRpb25DbGFzc2VzIiwicm91bmRlZENsYXNzZXMiLCJpc0V4dGVuZGVkIiwiY29udGVudEhlaWdodCIsImV4dGVuc2lvbkhlaWdodCIsImhhc1RpdGxlIiwiaGFzSW1hZ2UiLCJleHRlbnNpb24iLCJtYWtlU2Nyb2xsUHJvcHMiLCJ1c2VTY3JvbGwiLCJjYW5TY3JvbGwiLCJwcmV2aW91c1Njcm9sbCIsImN1cnJlbnRTY3JvbGwiLCJzYXZlZFNjcm9sbCIsImN1cnJlbnRUaHJlc2hvbGQiLCJpc1Njcm9sbEFjdGl2ZSIsImlzU2Nyb2xsaW5nVXAiLCJzY3JvbGxUaHJlc2hvbGQiLCJzY3JvbGxSYXRpbyIsIm9uU2Nyb2xsIiwidGFyZ2V0RWwiLCJzY3JvbGxUYXJnZXQiLCJuZXdUYXJnZXQiLCJ1c2VTc3JCb290IiwibWFrZVZBcHBCYXJQcm9wcyIsIlZBcHBCYXIiLCJ2VG9vbGJhclJlZiIsImlzQWN0aXZlIiwic2Nyb2xsQmVoYXZpb3IiLCJiZWhhdmlvciIsImlzQ29sbGFwc2VkIiwiaXNGbGF0Iiwib3BhY2l0eSIsInNzckJvb3RTdHlsZXMiLCJ0b29sYmFyUHJvcHMiLCJtYWtlRGVuc2l0eVByb3BzIiwidXNlRGVuc2l0eSIsImFsbG93ZWRWYXJpYW50cyIsImdlbk92ZXJsYXlzIiwiaXNDbGlja2FibGUiLCJtYWtlVmFyaWFudFByb3BzIiwidXNlVmFyaWFudCIsInZhcmlhbnRDbGFzc2VzIiwidmFyaWFudCIsImNvbG9yQ2xhc3NlcyIsImNvbG9yU3R5bGVzIiwibWFrZVZCdG5Hcm91cFByb3BzIiwiVkJ0bkdyb3VwIiwiZGVuc2l0eUNsYXNzZXMiLCJtYWtlR3JvdXBQcm9wcyIsIm1ha2VHcm91cEl0ZW1Qcm9wcyIsInVzZUdyb3VwSXRlbSIsImluamVjdEtleSIsInJlcXVpcmVkIiwiZ3JvdXAiLCJpc1NlbGVjdGVkIiwic2VsZWN0ZWRDbGFzcyIsInVzZUdyb3VwIiwiaXNVbm1vdW50ZWQiLCJzZWxlY3RlZCIsImdldElkcyIsImdldFZhbHVlcyIsImdyb3VwVm0iLCJyZWdpc3RlciIsInVud3JhcHBlZCIsInVucmVnaXN0ZXIiLCJmb3JjZU1hbmRhdG9yeVZhbHVlIiwic2VsZWN0Iiwic3RlcCIsImN1cnJlbnRJZCIsImN1cnJlbnRJbmRleCIsIm5ld0luZGV4IiwibmV3SXRlbSIsImdldEl0ZW1JbmRleCIsImlkcyIsIm1vZGVsVmFsdWUiLCJpdGVtQnlJbmRleCIsIml0ZW1JbmRleCIsIlZCdG5Ub2dnbGVTeW1ib2wiLCJtYWtlVkJ0blRvZ2dsZVByb3BzIiwiVkJ0blRvZ2dsZSIsIm5leHQiLCJwcmV2IiwiYnRuR3JvdXBQcm9wcyIsInByZWRlZmluZWRTaXplcyIsIm1ha2VTaXplUHJvcHMiLCJ1c2VTaXplIiwic2l6ZUNsYXNzZXMiLCJzaXplU3R5bGVzIiwibWFrZVZJY29uUHJvcHMiLCJWSWNvbiIsInNsb3RJY29uIiwiaWNvbkRhdGEiLCJzbG90VmFsdWUiLCJUZXh0IiwidXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJpbnRlcnNlY3Rpb25SZWYiLCJtYWtlVlByb2dyZXNzQ2lyY3VsYXJQcm9wcyIsIlZQcm9ncmVzc0NpcmN1bGFyIiwiTUFHSUNfUkFESVVTX0NPTlNUQU5UIiwiQ0lSQ1VNRkVSRU5DRSIsInVuZGVybGF5Q29sb3JDbGFzc2VzIiwidW5kZXJsYXlDb2xvclN0eWxlcyIsIm5vcm1hbGl6ZWRWYWx1ZSIsImRpYW1ldGVyIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VEYXNoT2Zmc2V0Iiwib3Bwb3NpdGVNYXAiLCJtYWtlTG9jYXRpb25Qcm9wcyIsInVzZUxvY2F0aW9uIiwib3Bwb3NpdGUiLCJnZXRPZmZzZXQiLCJtYWtlVlByb2dyZXNzTGluZWFyUHJvcHMiLCJWUHJvZ3Jlc3NMaW5lYXIiLCJwcm9ncmVzcyIsImxvY2F0aW9uU3R5bGVzIiwiYmFyQ29sb3JDbGFzc2VzIiwiYmFyQ29sb3JTdHlsZXMiLCJub3JtYWxpemVkQnVmZmVyIiwiaXNSZXZlcnNlZCIsImhhbmRsZUNsaWNrIiwicmlnaHQiLCJiYXIiLCJtYWtlTG9hZGVyUHJvcHMiLCJ1c2VMb2FkZXIiLCJMb2FkZXJTbG90IiwicG9zaXRpb25WYWx1ZXMiLCJtYWtlUG9zaXRpb25Qcm9wcyIsInVzZVBvc2l0aW9uIiwidXNlUm91dGVyIiwidXNlTGluayIsIlJvdXRlckxpbmsiLCJyZXNvbHZlRHluYW1pY0NvbXBvbmVudCIsImlzTGluayIsImxpbmsiLCJtYWtlUm91dGVyUHJvcHMiLCJpblRyYW5zaXRpb24iLCJ1c2VCYWNrQnV0dG9uIiwicm91dGVyIiwiY2IiLCJwb3BwZWQiLCJyZW1vdmVCZWZvcmUiLCJyZW1vdmVBZnRlciIsIm9uUG9wc3RhdGUiLCJmcm9tIiwidXNlU2VsZWN0TGluayIsInN0b3BTeW1ib2wiLCJERUxBWV9SSVBQTEUiLCJpc1RvdWNoRXZlbnQiLCJpc0tleWJvYXJkRXZlbnQiLCJjYWxjdWxhdGUiLCJsb2NhbFgiLCJsb2NhbFkiLCJyYWRpdXMiLCJzY2FsZSIsImNlbnRlclgiLCJjZW50ZXJZIiwicmlwcGxlcyIsImNvbnRhaW5lciIsImRpZmYiLCJkZWxheSIsImlzUmlwcGxlRW5hYmxlZCIsInJpcHBsZVNob3ciLCJyaXBwbGVTdG9wIiwicmlwcGxlSGlkZSIsInJpcHBsZUNhbmNlbFNob3ciLCJrZXlib2FyZFJpcHBsZSIsImtleWJvYXJkUmlwcGxlU2hvdyIsImtleWJvYXJkUmlwcGxlSGlkZSIsImZvY3VzUmlwcGxlSGlkZSIsInVwZGF0ZVJpcHBsZSIsIndhc0VuYWJsZWQiLCJlbmFibGVkIiwicmVtb3ZlTGlzdGVuZXJzIiwidXBkYXRlZCIsIlJpcHBsZSIsIm1ha2VWQnRuUHJvcHMiLCJWQnRuIiwibG9hZGVyQ2xhc3NlcyIsInBvc2l0aW9uQ2xhc3NlcyIsImlzRGlzYWJsZWQiLCJpc0VsZXZhdGVkIiwidmFsdWVBdHRyIiwib25DbGljayIsIlRhZyIsImhhc1ByZXBlbmQiLCJoYXNBcHBlbmQiLCJoYXNJY29uIiwiaGFzQ29sb3IiLCJtYWtlVkFwcEJhck5hdkljb25Qcm9wcyIsIlZBcHBCYXJOYXZJY29uIiwiVkFwcEJhclRpdGxlIiwiVkFsZXJ0VGl0bGUiLCJhbGxvd2VkVHlwZXMiLCJtYWtlVkFsZXJ0UHJvcHMiLCJWQWxlcnQiLCJ2YXJpYW50UHJvcHMiLCJjbG9zZVByb3BzIiwiaGFzQ2xvc2UiLCJtYWtlVkxhYmVsUHJvcHMiLCJWTGFiZWwiLCJWU2VsZWN0aW9uQ29udHJvbEdyb3VwU3ltYm9sIiwibWFrZVNlbGVjdGlvbkNvbnRyb2xHcm91cFByb3BzIiwibWFrZVZTZWxlY3Rpb25Db250cm9sR3JvdXBQcm9wcyIsIlZTZWxlY3Rpb25Db250cm9sR3JvdXAiLCJ1cGRhdGVIYW5kbGVycyIsIm1ha2VWU2VsZWN0aW9uQ29udHJvbFByb3BzIiwidXNlU2VsZWN0aW9uQ29udHJvbCIsInRydWVWYWx1ZSIsImZhbHNlVmFsdWUiLCJpc011bHRpcGxlIiwiY3VycmVudFZhbHVlIiwibmV3VmFsIiwiVlNlbGVjdGlvbkNvbnRyb2wiLCJpc0ZvY3VzZWQiLCJpc0ZvY3VzVmlzaWJsZSIsImlucHV0Iiwib25Gb2N1cyIsIm9uQmx1ciIsIm9uSW5wdXQiLCJsYWJlbCIsImlucHV0Tm9kZSIsIm1ha2VWQ2hlY2tib3hCdG5Qcm9wcyIsIlZDaGVja2JveEJ0biIsImluZGV0ZXJtaW5hdGUiLCJvbkNoYW5nZSIsImZhbHNlSWNvbiIsInRydWVJY29uIiwiY29udHJvbFByb3BzIiwidXNlSW5wdXRJY29uIiwiSW5wdXRJY29uIiwibG9jYWxlS2V5IiwibGlzdGVuZXIiLCJtYWtlVk1lc3NhZ2VzUHJvcHMiLCJWTWVzc2FnZXMiLCJtYWtlRm9jdXNQcm9wcyIsInVzZUZvY3VzIiwiZm9jdXNDbGFzc2VzIiwiZm9jdXMiLCJibHVyIiwiRm9ybUtleSIsIm1ha2VGb3JtUHJvcHMiLCJjcmVhdGVGb3JtIiwiaXNSZWFkb25seSIsImlzVmFsaWRhdGluZyIsImVycm9ycyIsInZhbGlkYXRlIiwicmVzdWx0cyIsInZhbGlkIiwiaXRlbUVycm9yTWVzc2FnZXMiLCJyZXNldFZhbGlkYXRpb24iLCJpbnZhbGlkIiwiZXJyb3JNZXNzYWdlcyIsInVzZUZvcm0iLCJtYWtlVmFsaWRhdGlvblByb3BzIiwidXNlVmFsaWRhdGlvbiIsInZhbGlkYXRpb25Nb2RlbCIsImZvcm0iLCJpbnRlcm5hbEVycm9yTWVzc2FnZXMiLCJpc1ByaXN0aW5lIiwiaXNEaXJ0eSIsInZhbGlkYXRlT24iLCJzZXQiLCJ2YWxpZGF0aW9uQ2xhc3NlcyIsInVud2F0Y2giLCJzaWxlbnQiLCJydWxlIiwicmVzdWx0IiwibWFrZVZJbnB1dFByb3BzIiwiVklucHV0IiwibWVzc2FnZXNJZCIsInNsb3RQcm9wcyIsImhhc01lc3NhZ2VzIiwiaGFzRGV0YWlscyIsIm1ha2VWQ2hlY2tib3hQcm9wcyIsIlZDaGVja2JveCIsImZvY3VzZWQiLCJjb250cm9sQXR0cnMiLCJpbnB1dFByb3BzIiwiXzEiLCJjaGVja2JveFByb3BzIiwiXzIiLCJtYWtlVkF2YXRhclByb3BzIiwiVkF2YXRhciIsIlZDaGlwR3JvdXBTeW1ib2wiLCJtYWtlVkNoaXBHcm91cFByb3BzIiwiVkNoaXBHcm91cCIsIm1ha2VWQ2hpcFByb3BzIiwiVkNoaXAiLCJvbktleURvd24iLCJoYXNBcHBlbmRNZWRpYSIsImhhc0ZpbHRlciIsImhhc1ByZXBlbmRNZWRpYSIsIl92U2hvdyIsIkxpc3RLZXkiLCJjcmVhdGVMaXN0IiwicGFyZW50IiwidXNlTGlzdCIsInNpbmdsZU9wZW5TdHJhdGVneSIsIm9wZW5lZCIsInBhcmVudHMiLCJuZXdPcGVuZWQiLCJtdWx0aXBsZU9wZW5TdHJhdGVneSIsImxpc3RPcGVuU3RyYXRlZ3kiLCJfcmVmMyIsImluZGVwZW5kZW50U2VsZWN0U3RyYXRlZ3kiLCJtYW5kYXRvcnkiLCJzdHJhdGVneSIsIm9uIiwiY2hpbGRyZW4iLCJpbmRlcGVuZGVudFNpbmdsZVNlbGVjdFN0cmF0ZWd5IiwicGFyZW50U3RyYXRlZ3kiLCJzaW5nbGVTZWxlY3RlZCIsImxlYWZTZWxlY3RTdHJhdGVneSIsIl9yZWY0IiwibGVhZlNpbmdsZVNlbGVjdFN0cmF0ZWd5IiwiX3JlZjUiLCJjbGFzc2ljU2VsZWN0U3RyYXRlZ3kiLCJfcmVmNiIsImNoaWxkcmVuSWRzIiwiZXZlcnlTZWxlY3RlZCIsImNpZCIsIm5vbmVTZWxlY3RlZCIsIl9yZWY3IiwiVk5lc3RlZFN5bWJvbCIsImVtcHR5TmVzdGVkIiwibWFrZU5lc3RlZFByb3BzIiwidXNlTmVzdGVkIiwic2VsZWN0U3RyYXRlZ3kiLCJvcGVuU3RyYXRlZ3kiLCJnZXRQYXRoIiwibmVzdGVkIiwicGFyZW50SWQiLCJpc0dyb3VwIiwibGlzdCIsIm5ld1NlbGVjdGVkIiwidXNlTmVzdGVkSXRlbSIsInVpZFN5bWJvbCIsImNvbXB1dGVkSWQiLCJvcGVuIiwidXNlTmVzdGVkR3JvdXBBY3RpdmF0b3IiLCJWTGlzdEdyb3VwQWN0aXZhdG9yIiwiXyIsIm1ha2VWTGlzdEdyb3VwUHJvcHMiLCJWTGlzdEdyb3VwIiwiaXNPcGVuIiwiX2lkIiwiYWN0aXZhdG9yUHJvcHMiLCJ0b2dnbGVJY29uIiwiYWN0aXZhdG9yRGVmYXVsdHMiLCJWTGlzdEl0ZW1TdWJ0aXRsZSIsIlZMaXN0SXRlbVRpdGxlIiwibWFrZVZMaXN0SXRlbVByb3BzIiwiVkxpc3RJdGVtIiwiaXNJbmRldGVybWluYXRlIiwiaXNHcm91cEFjdGl2YXRvciIsIm9wZW5PblNlbGVjdCIsInJvdW5kZWRQcm9wcyIsImxpbmVDbGFzc2VzIiwiaGFzU3VidGl0bGUiLCJtYWtlVkxpc3RTdWJoZWFkZXJQcm9wcyIsIlZMaXN0U3ViaGVhZGVyIiwibWFrZVZEaXZpZGVyUHJvcHMiLCJWRGl2aWRlciIsImRpdmlkZXJTdHlsZXMiLCJtYWtlVkxpc3RDaGlsZHJlblByb3BzIiwiVkxpc3RDaGlsZHJlbiIsIml0ZW1Qcm9wcyIsInR5cGUiLCJzbG90c1dpdGhJdGVtIiwibGlzdEdyb3VwUHJvcHMiLCJsaXN0SXRlbVByb3BzIiwibWFrZUl0ZW1zUHJvcHMiLCJ0cmFuc2Zvcm1JdGVtIiwidGl0bGUiLCJ0cmFuc2Zvcm1JdGVtcyIsImFycmF5IiwidXNlSXRlbXMiLCJoYXNOdWxsSXRlbSIsInJhdyIsImlzUHJpbWl0aXZlIiwidXNlTGlzdEl0ZW1zIiwibWFrZVZMaXN0UHJvcHMiLCJWTGlzdCIsImFjdGl2ZUNvbG9yIiwiYmFzZUNvbG9yIiwiY29udGVudFJlZiIsIm9uRm9jdXNpbiIsIm9uRm9jdXNvdXQiLCJvbktleWRvd24iLCJWTGlzdEltZyIsIm1ha2VWTGlzdEl0ZW1BY3Rpb25Qcm9wcyIsIlZMaXN0SXRlbUFjdGlvbiIsIm1ha2VWTGlzdEl0ZW1NZWRpYVByb3BzIiwiVkxpc3RJdGVtTWVkaWEiLCJlbGVtZW50VG9WaWV3cG9ydCIsInBvaW50IiwiYW5jaG9yVG9Qb2ludCIsImxvY2F0aW9uU3RyYXRlZ2llcyIsInN0YXRpY0xvY2F0aW9uU3RyYXRlZ3kiLCJjb25uZWN0ZWRMb2NhdGlvblN0cmF0ZWd5IiwibWFrZUxvY2F0aW9uU3RyYXRlZ3lQcm9wcyIsInVzZUxvY2F0aW9uU3RyYXRlZ2llcyIsImNvbnRlbnRTdHlsZXMiLCJ1cGRhdGVMb2NhdGlvbiIsIm9uUmVzaXplIiwiZ2V0SW50cmluc2ljU2l6ZSIsImNvbnRlbnRCb3giLCJwcmVmZXJyZWRBbmNob3IiLCJwcmVmZXJyZWRPcmlnaW4iLCJwYXJzZWRBbmNob3IiLCJwYXJzZWRPcmlnaW4iLCJtaW5XaWR0aCIsIm1pbkhlaWdodCIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwibmV3QWN0aXZhdG9yRWwiLCJuZXdDb250ZW50RWwiLCJvbGRBY3RpdmF0b3JFbCIsIm9sZENvbnRlbnRFbCIsInNjcm9sbFBhcmVudHMiLCJ2aWV3cG9ydE1hcmdpbiIsInZpZXdwb3J0Iiwic2Nyb2xsQm94IiwicGxhY2VtZW50IiwiY2hlY2tPdmVyZmxvdyIsIl9wbGFjZW1lbnQiLCJ0YXJnZXRQb2ludCIsImNvbnRlbnRQb2ludCIsImF2YWlsYWJsZSIsImZsaXBwZWQiLCJyZXNldHMiLCJfeCIsIl95Iiwib3ZlcmZsb3dzIiwiYXhpcyIsImhhc092ZXJmbG93WCIsImhhc092ZXJmbG93WSIsIm5ld1BsYWNlbWVudCIsImZsaXAiLCJuZXdPdmVyZmxvd3MiLCJwaXhlbFJvdW5kIiwicGl4ZWxDZWlsIiwiY2xlYW4iLCJmcmFtZXMiLCJyZXF1ZXN0TmV3RnJhbWUiLCJydW4iLCJyYWYiLCJmcmFtZSIsInNjcm9sbFN0cmF0ZWdpZXMiLCJjbG9zZVNjcm9sbFN0cmF0ZWd5IiwiYmxvY2tTY3JvbGxTdHJhdGVneSIsInJlcG9zaXRpb25TY3JvbGxTdHJhdGVneSIsIm1ha2VTY3JvbGxTdHJhdGVneVByb3BzIiwidXNlU2Nyb2xsU3RyYXRlZ2llcyIsImJpbmRTY3JvbGwiLCJvZmZzZXRQYXJlbnQiLCJzY3JvbGxFbGVtZW50cyIsInNjcm9sbGJhcldpZHRoIiwic2Nyb2xsYWJsZVBhcmVudCIsInNsb3ciLCJyaWMiLCJWTWVudVN5bWJvbCIsIm1ha2VEZWxheVByb3BzIiwidXNlRGVsYXkiLCJkZWxheXMiLCJydW5EZWxheUZhY3RvcnkiLCJtYWtlQWN0aXZhdG9yUHJvcHMiLCJ1c2VBY3RpdmF0b3IiLCJpc1RvcCIsImFjdGl2YXRvckVsIiwiaXNIb3ZlcmVkIiwiZmlyc3RFbnRlciIsIm9wZW5PbkZvY3VzIiwib3Blbk9uQ2xpY2siLCJydW5PcGVuRGVsYXkiLCJydW5DbG9zZURlbGF5IiwiYXZhaWxhYmxlRXZlbnRzIiwiYWN0aXZhdG9yRXZlbnRzIiwiY29udGVudEV2ZW50cyIsInNjcmltRXZlbnRzIiwiYWN0aXZhdG9yUmVmIiwiX3VzZUFjdGl2YXRvciIsImFjdGl2YXRvciIsImdldEFjdGl2YXRvciIsInVuYmluZEFjdGl2YXRvclByb3BzIiwiYmluZEFjdGl2YXRvclByb3BzIiwidXNlSHlkcmF0aW9uIiwibWFrZUxhenlQcm9wcyIsInVzZUxhenkiLCJoYXNDb250ZW50IiwidXNlU2NvcGVJZCIsInNjb3BlSWQiLCJTdGFja1N5bWJvbCIsImdsb2JhbFN0YWNrIiwidXNlU3RhY2siLCJkaXNhYmxlR2xvYmFsU3RhY2siLCJjcmVhdGVTdGFja0VudHJ5Iiwic3RhY2siLCJfekluZGV4IiwibGFzdFpJbmRleCIsImdsb2JhbFRvcCIsIl9pc1RvcCIsImxvY2FsVG9wIiwidXNlVGVsZXBvcnQiLCJfdGFyZ2V0IiwidGFyZ2V0RWxlbWVudCIsImRlZmF1bHRDb25kaXRpb25hbCIsImNoZWNrRXZlbnQiLCJjaGVja0lzQWN0aXZlIiwiZGlyZWN0aXZlIiwiaGFuZGxlU2hhZG93IiwiQ2xpY2tPdXRzaWRlIiwib25Nb3VzZWRvd24iLCJTY3JpbSIsIm1ha2VWT3ZlcmxheVByb3BzIiwiVk92ZXJsYXkiLCJ0ZWxlcG9ydFRhcmdldCIsInNjcmltQ29sb3IiLCJzdGFja1N0eWxlcyIsImNvbnRlbnRFbCIsIm9uQ2xpY2tPdXRzaWRlIiwiYW5pbWF0ZUNsaWNrIiwiY2xvc2VDb25kaXRpb25hbCIsInNjcm9sbFBhcmVudCIsIlRlbGVwb3J0IiwiUmVmcyIsImdldERlc2NyaXB0b3IiLCJjdXJyZW50T2JqIiwiZm9yd2FyZFJlZnMiLCJjaGlsZFJlZnMiLCJxdWV1ZSIsIm1ha2VWTWVudVByb3BzIiwiVk1lbnUiLCJvdmVybGF5Iiwib3BlbkNoaWxkcmVuIiwib25Gb2N1c0luIiwiYmVmb3JlIiwiYWZ0ZXIiLCJvbkFjdGl2YXRvcktleWRvd24iLCJvdmVybGF5UHJvcHMiLCJtYWtlVkNvdW50ZXJQcm9wcyIsIlZDb3VudGVyIiwiY291bnRlciIsIm1ha2VWRmllbGRMYWJlbFByb3BzIiwiVkZpZWxkTGFiZWwiLCJtYWtlVkZpZWxkUHJvcHMiLCJWRmllbGQiLCJoYXNMYWJlbCIsImxhYmVsUmVmIiwiZmxvYXRpbmdMYWJlbFJlZiIsImNvbnRyb2xSZWYiLCJpc1BsYWluT3JVbmRlcmxpbmVkIiwidGFyZ2V0UmVjdCIsInRhcmdldFdpZHRoIiwidGFyZ2V0U3R5bGUiLCJkdXJhdGlvbiIsImlzT3V0bGluZWQiLCJoYXNDbGVhciIsImZpbHRlckZpZWxkUHJvcHMiLCJhY3RpdmVUeXBlcyIsIm1ha2VWVGV4dEZpZWxkUHJvcHMiLCJWVGV4dEZpZWxkIiwiY291bnRlclZhbHVlIiwib25JbnRlcnNlY3QiLCJ2SW5wdXRSZWYiLCJ2RmllbGRSZWYiLCJpbnB1dFJlZiIsIm9uQ29udHJvbE1vdXNlZG93biIsIm9uQ29udHJvbENsaWNrIiwib25DbGVhciIsImNhcmV0UG9zaXRpb24iLCJoYXNDb3VudGVyIiwiZmllbGRQcm9wcyIsImZpZWxkQ2xhc3MiLCJjbG9uZVZOb2RlIiwibWFrZVZWaXJ0dWFsU2Nyb2xsSXRlbVByb3BzIiwiVlZpcnR1YWxTY3JvbGxJdGVtIiwiVVAiLCJET1dOIiwibWFrZVZpcnR1YWxQcm9wcyIsInVzZVZpcnR1YWwiLCJiYXNlSXRlbUhlaWdodCIsIml0ZW1IZWlnaHQiLCJjb250YWluZXJSZWYiLCJzaXplTWFwIiwic2l6ZXMiLCJ2aXNpYmxlSXRlbXMiLCJoYW5kbGVJdGVtUmVzaXplIiwiY2FsY3VsYXRlT2Zmc2V0IiwiY2FsY3VsYXRlTWlkUG9pbnRJbmRleCIsInNjcm9sbFRvcCIsImVuZCIsIm1pZGRsZSIsIm1pZGRsZU9mZnNldCIsImxhc3RTY3JvbGxUb3AiLCJoYW5kbGVTY3JvbGwiLCJkaXJlY3Rpb24iLCJtaWRQb2ludEluZGV4IiwiYnVmZmVyIiwiZmlyc3RJbmRleCIsImxhc3RJbmRleCIsInNjcm9sbFRvSW5kZXgiLCJjb21wdXRlZEl0ZW1zIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJtYWtlVlZpcnR1YWxTY3JvbGxQcm9wcyIsIlZWaXJ0dWFsU2Nyb2xsIiwidXNlU2Nyb2xsaW5nIiwibGlzdFJlZiIsInRleHRGaWVsZFJlZiIsImlzU2Nyb2xsaW5nIiwic2Nyb2xsVGltZW91dCIsIm9uTGlzdFNjcm9sbCIsImZpbmlzaFNjcm9sbGluZyIsIm9uTGlzdEtleWRvd24iLCJtYWtlU2VsZWN0UHJvcHMiLCJtYWtlVlNlbGVjdFByb3BzIiwiVlNlbGVjdCIsInZUZXh0RmllbGRSZWYiLCJ2TWVudVJlZiIsInZWaXJ0dWFsU2Nyb2xsUmVmIiwiX21lbnUiLCJ0cmFuc2Zvcm1lZCIsInNlbGVjdGVkVmFsdWVzIiwic2VsZWN0aW9uIiwia2V5Ym9hcmRMb29rdXBQcmVmaXgiLCJrZXlib2FyZExvb2t1cExhc3RUaW1lIiwiZGlzcGxheUl0ZW1zIiwibWVudURpc2FibGVkIiwib25Nb3VzZWRvd25Db250cm9sIiwiS0VZQk9BUkRfTE9PS1VQX1RIUkVTSE9MRCIsImNoZWNrUHJpbnRhYmxlIiwiaXNQcmludGFibGVDaGFyIiwibm9Nb2RpZmllciIsIm5vdyIsIm9uTW9kZWxVcGRhdGUiLCJoYXNDaGlwcyIsImhhc0xpc3QiLCJ0ZXh0RmllbGRQcm9wcyIsInBsYWNlaG9sZGVyIiwiaXRlbVJlZiIsIm9uQ2hpcENsb3NlIiwiX2NyZWF0ZVRleHRWTm9kZSIsImRlZmF1bHRGaWx0ZXIiLCJxdWVyeSIsIm1ha2VGaWx0ZXJQcm9wcyIsImZpbHRlckl0ZW1zIiwiZmlsdGVyIiwiY3VzdG9tRmlsdGVyc0xlbmd0aCIsImxvb3AiLCJjdXN0b21NYXRjaGVzIiwiZGVmYXVsdE1hdGNoZXMiLCJmaWx0ZXJLZXlzIiwia2V5RmlsdGVyIiwiZGVmYXVsdE1hdGNoZXNMZW5ndGgiLCJjdXN0b21NYXRjaGVzTGVuZ3RoIiwidXNlRmlsdGVyIiwiZmlsdGVyZWRJdGVtcyIsImZpbHRlcmVkTWF0Y2hlcyIsInRyYW5zZm9ybWVkSXRlbXMiLCJfcXVlcnkiLCJzdHJRdWVyeSIsIm9yaWdpbmFsSXRlbXMiLCJfZmlsdGVyZWRJdGVtcyIsIl9maWx0ZXJlZE1hdGNoZXMiLCJtYXRjaGVzIiwiZ2V0TWF0Y2hlcyIsImhpZ2hsaWdodFJlc3VsdCIsIm1ha2VWQXV0b2NvbXBsZXRlUHJvcHMiLCJWQXV0b2NvbXBsZXRlIiwibGlzdEhhc0ZvY3VzIiwic2VsZWN0aW9uSW5kZXgiLCJzZWFyY2giLCJmaWx0ZXJlZEl0ZW0iLCJoaWdobGlnaHRGaXJzdCIsIm9uTW91c2Vkb3duTWVudUljb24iLCJzZWxlY3Rpb25TdGFydCIsIm9yaWdpbmFsU2VsZWN0aW9uSW5kZXgiLCJzZWxlY3RlZEl0ZW0iLCJvblVwZGF0ZU1vZGVsVmFsdWUiLCJpc1NlbGVjdGluZyIsIm1ha2VWQmFkZ2VQcm9wcyIsIlZCYWRnZSIsImJhZGdlQXR0cnMiLCJtYWtlVkJhbm5lckFjdGlvbnNQcm9wcyIsIlZCYW5uZXJBY3Rpb25zIiwiVkJhbm5lclRleHQiLCJtYWtlVkJhbm5lclByb3BzIiwiVkJhbm5lciIsImRlbnNpdHkiLCJtYWtlVkJvdHRvbU5hdmlnYXRpb25Qcm9wcyIsIlZCb3R0b21OYXZpZ2F0aW9uIiwibWFrZVZCcmVhZGNydW1ic0RpdmlkZXJQcm9wcyIsIlZCcmVhZGNydW1ic0RpdmlkZXIiLCJtYWtlVkJyZWFkY3J1bWJzSXRlbVByb3BzIiwiVkJyZWFkY3J1bWJzSXRlbSIsIm1ha2VWQnJlYWRjcnVtYnNQcm9wcyIsIlZCcmVhZGNydW1icyIsIlZDYXJkQWN0aW9ucyIsIlZDYXJkU3VidGl0bGUiLCJWQ2FyZFRpdGxlIiwibWFrZUNhcmRJdGVtUHJvcHMiLCJWQ2FyZEl0ZW0iLCJWQ2FyZFRleHQiLCJtYWtlVkNhcmRQcm9wcyIsIlZDYXJkIiwiaGFzSGVhZGVyIiwiaGFzQ2FyZEl0ZW0iLCJoYW5kbGVHZXN0dXJlIiwid3JhcHBlciIsInRvdWNoc3RhcnRYIiwidG91Y2hlbmRYIiwidG91Y2hzdGFydFkiLCJ0b3VjaGVuZFkiLCJkaXJSYXRpbyIsIm1pbkRpc3RhbmNlIiwidG91Y2hzdGFydCIsInRvdWNoIiwidG91Y2hlbmQiLCJ0b3VjaG1vdmUiLCJjcmVhdGVIYW5kbGVycyIsIlRvdWNoIiwiVldpbmRvd1N5bWJvbCIsIlZXaW5kb3dHcm91cFN5bWJvbCIsIm1ha2VWV2luZG93UHJvcHMiLCJWV2luZG93Iiwicm9vdFJlZiIsImlzUnRsUmV2ZXJzZSIsInRyYW5zaXRpb25Db3VudCIsInRyYW5zaXRpb25IZWlnaHQiLCJhY3RpdmVJbmRleCIsIml0ZW1zTGVuZ3RoIiwiY2FuTW92ZUJhY2siLCJjYW5Nb3ZlRm9yd2FyZCIsImFycm93cyIsInByZXZQcm9wcyIsIm5leHRQcm9wcyIsInRvdWNoT3B0aW9ucyIsIm9yaWdpbmFsRXZlbnQiLCJtYWtlVkNhcm91c2VsUHJvcHMiLCJWQ2Fyb3VzZWwiLCJ3aW5kb3dSZWYiLCJzbGlkZVRpbWVvdXQiLCJyZXN0YXJ0VGltZW91dCIsInN0YXJ0VGltZW91dCIsIndpbmRvd1Byb3BzIiwibWFrZVZXaW5kb3dJdGVtUHJvcHMiLCJWV2luZG93SXRlbSIsIndpbmRvdyIsImdyb3VwSXRlbSIsImlzVHJhbnNpdGlvbmluZyIsImhhc1RyYW5zaXRpb24iLCJvbkFmdGVyVHJhbnNpdGlvbiIsIm9uQmVmb3JlVHJhbnNpdGlvbiIsIm9uVHJhbnNpdGlvbkNhbmNlbGxlZCIsIm9uRW50ZXJUcmFuc2l0aW9uIiwibWFrZVZDYXJvdXNlbEl0ZW1Qcm9wcyIsIlZDYXJvdXNlbEl0ZW0iLCJpbWdQcm9wcyIsIndpbmRvd0l0ZW1Qcm9wcyIsIlZDb2RlIiwibWFrZVZDb2xvclBpY2tlckNhbnZhc1Byb3BzIiwiVkNvbG9yUGlja2VyQ2FudmFzIiwiaHVlIiwiaXNJbnRlcmFjdGluZyIsImNhbnZhc1JlZiIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiX2RvdFBvc2l0aW9uIiwiZG90UG9zaXRpb24iLCJkb3RTdHlsZXMiLCJ1cGRhdGVEb3RQb3NpdGlvbiIsImhhbmRsZU1vdXNlRG93biIsImhhbmRsZU1vdXNlTW92ZSIsImhhbmRsZU1vdXNlVXAiLCJjb29yZHMiLCJ1cGRhdGVDYW52YXMiLCJjYW52YXMiLCJzYXR1cmF0aW9uR3JhZGllbnQiLCJ2YWx1ZUdyYWRpZW50Iiwic3RyaXBBbHBoYSIsImV4dHJhY3RDb2xvciIsImNvbnZlcnRlZCIsIm51bGxDb2xvciIsImhleGEiLCJtb2RlcyIsIlZDb2xvclBpY2tlcklucHV0IiwibWFrZVZDb2xvclBpY2tlckVkaXRQcm9wcyIsIm0iLCJWQ29sb3JQaWNrZXJFZGl0IiwiZW5hYmxlZE1vZGVzIiwiaW5wdXRzIiwiZ2V0VmFsdWUiLCJnZXRDb2xvciIsIm1pIiwiVlNsaWRlclN5bWJvbCIsInZlcnRpY2FsIiwiZ2V0UG9zaXRpb24iLCJtYWtlU2xpZGVyUHJvcHMiLCJ1c2VTdGVwcyIsImRlY2ltYWxzIiwicm91bmRWYWx1ZSIsImNsYW1wZWQiLCJ1c2VTbGlkZXIiLCJzdGVwcyIsIm9uU2xpZGVyU3RhcnQiLCJvblNsaWRlck1vdmUiLCJvblNsaWRlckVuZCIsImdldEFjdGl2ZVRodW1iIiwiaG9yaXpvbnRhbERpcmVjdGlvbiIsImhkIiwidGh1bWJTaXplIiwidGlja1NpemUiLCJ0cmFja1NpemUiLCJudW1UaWNrcyIsInRodW1iQ29sb3IiLCJ0cmFja0NvbG9yIiwidHJhY2tGaWxsQ29sb3IiLCJtb3VzZVByZXNzZWQiLCJzdGFydE9mZnNldCIsInRyYWNrQ29udGFpbmVyUmVmIiwiYWN0aXZlVGh1bWJSZWYiLCJwYXJzZU1vdXNlTW92ZSIsInRyYWNrU3RhcnQiLCJ0cmFja0xlbmd0aCIsImNsaWNrT2Zmc2V0IiwiY2xpY2tQb3MiLCJoYW5kbGVTdG9wIiwiaGFuZGxlU3RhcnQiLCJtb3ZlTGlzdGVuZXJPcHRpb25zIiwib25Nb3VzZU1vdmUiLCJvblNsaWRlck1vdXNlVXAiLCJvblNsaWRlclRvdWNoZW5kIiwib25TbGlkZXJUb3VjaHN0YXJ0Iiwib25TbGlkZXJNb3VzZWRvd24iLCJwZXJjZW50YWdlIiwic2hvd1RpY2tzIiwicGFyc2VkVGlja3MiLCJoYXNMYWJlbHMiLCJtYWtlVlNsaWRlclRodW1iUHJvcHMiLCJWU2xpZGVyVGh1bWIiLCJzbGlkZXIiLCJ0aHVtYkxhYmVsIiwicGFnZXVwIiwicGFnZWRvd24iLCJob21lIiwiZG93biIsInVwIiwicmVsZXZhbnRLZXlzIiwibXVsdGlwbGllcnMiLCJwYXJzZUtleWRvd24iLCJfc3RlcCIsIm11bHRpcGxpZXIiLCJwb3NpdGlvblBlcmNlbnRhZ2UiLCJtYWtlVlNsaWRlclRyYWNrUHJvcHMiLCJWU2xpZGVyVHJhY2siLCJ0cmFja0ZpbGxDb2xvckNsYXNzZXMiLCJ0cmFja0ZpbGxDb2xvclN0eWxlcyIsInRyYWNrQ29sb3JDbGFzc2VzIiwidHJhY2tDb2xvclN0eWxlcyIsInN0YXJ0RGlyIiwiZW5kRGlyIiwiYmFja2dyb3VuZFN0eWxlcyIsInRyYWNrRmlsbFdpZHRoIiwidHJhY2tGaWxsU3R5bGVzIiwiY29tcHV0ZWRUaWNrcyIsInRpY2siLCJkaXJlY3Rpb25Qcm9wZXJ0eSIsImRpcmVjdGlvblZhbHVlIiwibWFrZVZTbGlkZXJQcm9wcyIsIlZTbGlkZXIiLCJ0aHVtYkNvbnRhaW5lclJlZiIsInJvdW5kZWRWYWx1ZSIsInRyYWNrU3RvcCIsIm1ha2VWQ29sb3JQaWNrZXJQcmV2aWV3UHJvcHMiLCJWQ29sb3JQaWNrZXJQcmV2aWV3IiwicmVkIiwicGluayIsInB1cnBsZSIsImRlZXBQdXJwbGUiLCJpbmRpZ28iLCJibHVlIiwibGlnaHRCbHVlIiwiY3lhbiIsInRlYWwiLCJncmVlbiIsImxpZ2h0R3JlZW4iLCJsaW1lIiwieWVsbG93IiwiYW1iZXIiLCJvcmFuZ2UiLCJkZWVwT3JhbmdlIiwiYnJvd24iLCJibHVlR3JleSIsImdyZXkiLCJzaGFkZXMiLCJtYWtlVkNvbG9yUGlja2VyU3dhdGNoZXNQcm9wcyIsInBhcnNlRGVmYXVsdENvbG9ycyIsIlZDb2xvclBpY2tlclN3YXRjaGVzIiwic3dhdGNoIiwibWFrZVZTaGVldFByb3BzIiwiVlNoZWV0IiwibWFrZVZDb2xvclBpY2tlclByb3BzIiwiVkNvbG9yUGlja2VyIiwibGFzdFBpY2tlZENvbG9yIiwiY3VycmVudENvbG9yIiwidXBkYXRlQ29sb3IiLCJzaGVldFByb3BzIiwibWFrZVZDb21ib2JveFByb3BzIiwiVkNvbWJvYm94IiwiY2xlYXJlZCIsIl9zZWFyY2giLCJtYWtlVkRpYWxvZ1Byb3BzIiwiVkRpYWxvZyIsImZpcnN0RWxlbWVudCIsImxhc3RFbGVtZW50IiwiVkV4cGFuc2lvblBhbmVsU3ltYm9sIiwibWFrZVZFeHBhbnNpb25QYW5lbHNQcm9wcyIsIlZFeHBhbnNpb25QYW5lbHMiLCJ2YXJpYW50Q2xhc3MiLCJtYWtlVkV4cGFuc2lvblBhbmVsVGV4dFByb3BzIiwiVkV4cGFuc2lvblBhbmVsVGV4dCIsImV4cGFuc2lvblBhbmVsIiwibWFrZVZFeHBhbnNpb25QYW5lbFRpdGxlUHJvcHMiLCJWRXhwYW5zaW9uUGFuZWxUaXRsZSIsIm1ha2VWRXhwYW5zaW9uUGFuZWxQcm9wcyIsIlZFeHBhbnNpb25QYW5lbCIsInNlbGVjdGVkSW5kaWNlcyIsImlzQmVmb3JlU2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiaXNBZnRlclNlbGVjdGVkIiwibWFrZVZGaWxlSW5wdXRQcm9wcyIsIlZGaWxlSW5wdXQiLCJmaWxlcyIsInRvdGFsQnl0ZXMiLCJ0b3RhbEJ5dGVzUmVhZGFibGUiLCJmaWxlTmFtZXMiLCJmaWxlQ291bnQiLCJvbkNsaWNrUHJlcGVuZCIsIm1ha2VWRm9vdGVyUHJvcHMiLCJWRm9vdGVyIiwiYXV0b0hlaWdodCIsIm1ha2VWRm9ybVByb3BzIiwiVkZvcm0iLCJmb3JtUmVmIiwib25SZXNldCIsIm9uU3VibWl0IiwiX2UiLCJyZWFkeSIsIm1ha2VWQ29udGFpbmVyUHJvcHMiLCJWQ29udGFpbmVyIiwiYnJlYWtwb2ludFByb3BzIiwib2Zmc2V0UHJvcHMiLCJvZmZzZXRLZXkiLCJvcmRlclByb3BzIiwib3JkZXJLZXkiLCJwcm9wTWFwIiwiYnJlYWtwb2ludENsYXNzIiwiYnJlYWtwb2ludCIsIkFMSUdOX1NFTEZfVkFMVUVTIiwibWFrZVZDb2xQcm9wcyIsIlZDb2wiLCJjbGFzc0xpc3QiLCJoYXNDb2xDbGFzc2VzIiwiQUxJR05NRU5UIiwiU1BBQ0UiLCJtYWtlUm93UHJvcHMiLCJkZWYiLCJwcmVmaXhLZXkiLCJBTElHTl9WQUxVRVMiLCJhbGlnblZhbGlkYXRvciIsImFsaWduUHJvcHMiLCJKVVNUSUZZX1ZBTFVFUyIsImp1c3RpZnlWYWxpZGF0b3IiLCJqdXN0aWZ5UHJvcHMiLCJBTElHTl9DT05URU5UX1ZBTFVFUyIsImFsaWduQ29udGVudFZhbGlkYXRvciIsImFsaWduQ29udGVudFByb3BzIiwiY2xhc3NNYXAiLCJtYWtlVlJvd1Byb3BzIiwiVlJvdyIsIlZTcGFjZXIiLCJtYWtlVkhvdmVyUHJvcHMiLCJWSG92ZXIiLCJpc0hvdmVyaW5nIiwiVkl0ZW1Hcm91cFN5bWJvbCIsIm1ha2VWSXRlbUdyb3VwUHJvcHMiLCJWSXRlbUdyb3VwIiwiVkl0ZW0iLCJ0b2dnbGUiLCJWS2JkIiwibWFrZVZMYXlvdXRQcm9wcyIsIlZMYXlvdXQiLCJtYWtlVkxheW91dEl0ZW1Qcm9wcyIsIlZMYXlvdXRJdGVtIiwibWFrZVZMYXp5UHJvcHMiLCJWTGF6eSIsIm1ha2VWTG9jYWxlUHJvdmlkZXJQcm9wcyIsIlZMb2NhbGVQcm92aWRlciIsIm1ha2VWTWFpblByb3BzIiwiVk1haW4iLCJ1c2VTdGlja3kiLCJyb290RWwiLCJpc1N0aWNreSIsImlzU3R1Y2siLCJzdHVja1Bvc2l0aW9uIiwic3RpY2t5U3R5bGVzIiwibGF5b3V0VG9wIiwiYm9keVNjcm9sbCIsIkhPUklaT04iLCJISVNUT1JZIiwia2luZXRpY0VuZXJneVRvVmVsb2NpdHkiLCJ3b3JrIiwic3FydDIiLCJjYWxjdWxhdGVJbXB1bHNlVmVsb2NpdHkiLCJzYW1wbGVzIiwidnByZXYiLCJ2Y3VyciIsInVzZVZlbG9jaXR5IiwidG91Y2hlcyIsImFkZE1vdmVtZW50IiwiZW5kVG91Y2giLCJnZXRWZWxvY2l0eSIsIm5ld2VzdCIsImFic1giLCJhYnNZIiwib29wcyIsInVzZVRvdWNoIiwiaXNUZW1wb3JhcnkiLCJ0b3VjaGxlc3MiLCJvblRvdWNoc3RhcnQiLCJvblRvdWNobW92ZSIsIm9uVG91Y2hlbmQiLCJtYXliZURyYWdnaW5nIiwiaXNEcmFnZ2luZyIsImRyYWdQcm9ncmVzcyIsInBvcyIsImdldFByb2dyZXNzIiwibGltaXQiLCJ0b3VjaFgiLCJ0b3VjaFkiLCJ0b3VjaFpvbmUiLCJpblRvdWNoWm9uZSIsImluRWxlbWVudCIsInZlbG9jaXR5IiwidngiLCJ2eSIsImRyYWdTdHlsZXMiLCJsb2NhdGlvbnMiLCJtYWtlVk5hdmlnYXRpb25EcmF3ZXJQcm9wcyIsIlZOYXZpZ2F0aW9uRHJhd2VyIiwic2NyaW1TdHlsZXMiLCJvbk1vdXNlZW50ZXIiLCJvbk1vdXNlbGVhdmUiLCJWTm9Tc3IiLCJzaG93IiwidXNlUmVmcyIsIm9uQmVmb3JlVXBkYXRlIiwidXBkYXRlUmVmIiwibWFrZVZQYWdpbmF0aW9uUHJvcHMiLCJWUGFnaW5hdGlvbiIsInBhZ2UiLCJtYXhCdXR0b25zIiwiZmlyc3RJdGVtIiwidG90YWxXaWR0aCIsIml0ZW1XaWR0aCIsImdldE1heCIsInRvdGFsVmlzaWJsZSIsIm1pbkJ1dHRvbnMiLCJldmVuIiwicmFuZ2VMZW5ndGgiLCJyYW5nZVN0YXJ0Iiwic2V0VmFsdWUiLCJjb250cm9scyIsInByZXZEaXNhYmxlZCIsIm5leHREaXNhYmxlZCIsInVwZGF0ZUZvY3VzIiwiZmxvb3IiLCJtYWtlVlBhcmFsbGF4UHJvcHMiLCJWUGFyYWxsYXgiLCJkaXNwbGF5SGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsUG9zIiwiY2VudGVyIiwidHJhbnNsYXRlIiwic2l6ZVNjYWxlIiwibWFrZVZSYWRpb1Byb3BzIiwiVlJhZGlvIiwibWFrZVZSYWRpb0dyb3VwUHJvcHMiLCJWUmFkaW9Hcm91cCIsIm1ha2VWUmFuZ2VTbGlkZXJQcm9wcyIsIlZSYW5nZVNsaWRlciIsInN0YXJ0VGh1bWJSZWYiLCJzdG9wVGh1bWJSZWYiLCJzdG9wT2Zmc2V0IiwibWFrZVZSYXRpbmdQcm9wcyIsIlZSYXRpbmciLCJyYXRpbmciLCJpbmNyZW1lbnRzIiwiaG92ZXJJbmRleCIsIml0ZW1TdGF0ZSIsImlzRmlsbGVkIiwiZXZlbnRTdGF0ZSIsIlZSYXRpbmdJdGVtIiwic2hvd1N0YXIiLCJidG5Qcm9wcyIsImNyZWF0ZUxhYmVsIiwibGFiZWxQcm9wcyIsImJpYXMiLCJjYWxjdWxhdGVVcGRhdGVkT2Zmc2V0Iiwic2VsZWN0ZWRFbGVtZW50IiwiY29udGFpbmVyU2l6ZSIsImNvbnRlbnRTaXplIiwiY3VycmVudFNjcm9sbE9mZnNldCIsImNsaWVudFNpemUiLCJvZmZzZXRTdGFydCIsImFkanVzdGVkT2Zmc2V0U3RhcnQiLCJ0b3RhbFNpemUiLCJpdGVtT2Zmc2V0IiwiYWRkaXRpb25hbE9mZnNldCIsImNhbGN1bGF0ZUNlbnRlcmVkT2Zmc2V0Iiwib2Zmc2V0Q2VudGVyZWQiLCJWU2xpZGVHcm91cFN5bWJvbCIsIm1ha2VWU2xpZGVHcm91cFByb3BzIiwiVlNsaWRlR3JvdXAiLCJpc092ZXJmbG93aW5nIiwic2Nyb2xsT2Zmc2V0IiwiY29udGFpbmVyUmVjdCIsImZpcnN0U2VsZWN0ZWRJbmRleCIsImxhc3RTZWxlY3RlZEluZGV4IiwiZGlzYWJsZVRyYW5zaXRpb24iLCJzdGFydFRvdWNoIiwic2lnbiIsIm1heFNjcm9sbE9mZnNldCIsInNjcm9sbFRvIiwibmV3QWJzb2x1dGVPZmZzZXQiLCJzY3JvbGxBbW91bnQiLCJoYXNBZmZpeGVzIiwiaGFzUHJldiIsImhhc05leHQiLCJWU2xpZGVHcm91cEl0ZW0iLCJzbGlkZUdyb3VwSXRlbSIsIm1ha2VWU25hY2tiYXJQcm9wcyIsIlZTbmFja2JhciIsImFjdGl2ZVRpbWVvdXQiLCJvblBvaW50ZXJlbnRlciIsIm1ha2VWU3dpdGNoUHJvcHMiLCJWU3dpdGNoIiwiY29udHJvbCIsImxvYWRlckNvbG9yIiwib25UcmFja0NsaWNrIiwibWFrZVZTeXN0ZW1CYXJQcm9wcyIsIlZTeXN0ZW1CYXIiLCJWVGFic1N5bWJvbCIsIm1ha2VWVGFiUHJvcHMiLCJWVGFiIiwic2xpZGVyQ29sb3JDbGFzc2VzIiwic2xpZGVyQ29sb3JTdHlsZXMiLCJzbGlkZXJFbCIsInVwZGF0ZVNsaWRlciIsInByZXZFbCIsIm5leHRFbCIsInByZXZCb3giLCJuZXh0Qm94IiwieHkiLCJYWSIsInJpZ2h0Qm90dG9tIiwid2lkdGhIZWlnaHQiLCJwcmV2UG9zIiwibmV4dFBvcyIsImluaXRpYWxTY2FsZSIsInNpZ21hIiwicGFyc2VJdGVtcyIsIm1ha2VWVGFic1Byb3BzIiwiVlRhYnMiLCJwYXJzZWRJdGVtcyIsInNsaWRlR3JvdXBQcm9wcyIsIm1ha2VWVGFibGVQcm9wcyIsIlZUYWJsZSIsIm1ha2VWVGV4dGFyZWFQcm9wcyIsIlZUZXh0YXJlYSIsImNvbnRyb2xIZWlnaHQiLCJ0ZXh0YXJlYVJlZiIsInNpemVyUmVmIiwicm93cyIsImNhbGN1bGF0ZUlucHV0SGVpZ2h0IiwiZmllbGRTdHlsZSIsImxpbmVIZWlnaHQiLCJuZXdIZWlnaHQiLCJtYWtlVlRoZW1lUHJvdmlkZXJQcm9wcyIsIlZUaGVtZVByb3ZpZGVyIiwibWFrZVZUaW1lbGluZVByb3BzIiwiVlRpbWVsaW5lIiwic2lkZUNsYXNzZXMiLCJ0cnVuY2F0ZUNsYXNzZXMiLCJtYWtlVlRpbWVsaW5lRGl2aWRlclByb3BzIiwiVlRpbWVsaW5lRGl2aWRlciIsImxpbmVDb2xvckNsYXNzZXMiLCJsaW5lQ29sb3JTdHlsZXMiLCJtYWtlVlRpbWVsaW5lSXRlbVByb3BzIiwiVlRpbWVsaW5lSXRlbSIsImRvdFNpemUiLCJkb3RSZWYiLCJtYWtlVlRvb2xiYXJJdGVtc1Byb3BzIiwiVlRvb2xiYXJJdGVtcyIsIm1ha2VWVG9vbHRpcFByb3BzIiwiVlRvb2x0aXAiLCJWVmFsaWRhdGlvbiIsInZhbGlkYXRpb24iLCJvbmNlIiwiaW1tZWRpYXRlIiwibW9kaWZpZXJLZXlzIiwibXV0YXRpb25zIiwiTXV0YXRlIiwiUmVzaXplIiwic2VsZiIsIlNjcm9sbCIsImVtaXR0ZXIiLCJtaXR0IiwiY3JlYXRlQXBwIiwiQXBwIiwiVnVlQ2xpY2tBd2F5Il0sIm1hcHBpbmdzIjoicWtDQTJDS0EsR0FBVSxDQUNYLE1BQU8sQ0FDSCxVQUFXLE1BQ2QsRUFDRCxRQUFTLENBQ0wsaUJBQWlCQyxFQUFXLENBQ3hCLEtBQUssTUFBTSxtQkFBb0JBLENBQVMs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QUNKLEdBQUksRUFDSixpQkFBa0IsRUFDbEIsR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FB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RUFDS0MsR0FBYSxPQUFPLE9BQU8sQ0FDL0IsS0FBTSxVQUNOLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsU0FDWCxDQUFDLEVBQ0tDLEdBQVMsT0FBTyxPQUFPLENBQzNCLEtBQU0sVUFDTixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFNBQ1gsQ0FBQyxFQUNLQyxHQUFPLE9BQU8sT0FBTyxDQUN6QixLQUFNLFVBQ04sU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxTQUNYLENBQUMsRUFDS0MsR0FBWSxPQUFPLE9BQU8sQ0FDOUIsS0FBTSxVQUNOLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsU0FDWCxDQUFDLEVBQ0tDLEdBQU8sT0FBTyxPQUFPLENBQ3pCLEtBQU0sVUFDTixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFNBQ1gsQ0FBQyxFQUNLQyxHQUFPLE9BQU8sT0FBTyxDQUN6QixLQUFNLFVBQ04sU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxTQUNYLENBQUMsRUFDS0MsR0FBUSxPQUFPLE9BQU8sQ0FDMUIsS0FBTSxVQUNOLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsU0FDWCxDQUFDLEVBQ0tDLEdBQWEsT0FBTyxPQUFPLENBQy9CLEtBQU0sVUFDTixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFNBQ1gsQ0FBQyxFQUNLQyxHQUFPLE9BQU8sT0FBTyxDQUN6QixLQUFNLFVBQ04sU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxTQUNYLENBQUMsRUFDS0MsR0FBUyxPQUFPLE9BQU8sQ0FDM0IsS0FBTSxVQUNOLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsU0FDWCxDQUFDLEVBQ0tDLEdBQVEsT0FBTyxPQUFPLENBQzFCLEtBQU0sVUFDTixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FB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dkwsRUFBRyxZQUFILE1BQUF1TCxFQUFlaWlCLEVBQVEsU0FBUyxFQUFFLE1BQU0sT0FDN0MsS0FBTSxDQUNKLFFBQUFsakIsRUFDQSxRQUFBc0QsRUFDQSxPQUFBeFIsRUFBUzRELENBQ2IsRUFBTUEsRUFBRyxVQUFVd3RCLEVBQVEsU0FBUyxFQUFFLEdBQUcsRUFDdkNweEIsRUFBTyxvQkFBb0IsU0FBVWtPLEVBQVNzRCxDQUFPLEVBQ3JELE9BQU81TixFQUFHLFVBQVV3dEIsRUFBUSxTQUFTLEVBQUUsR0FBRyxDQUM1QyxDQUNBLFNBQVNnUCxHQUFReDhCLEVBQUl3dEIsRUFBUyxDQUN4QkEsRUFBUSxRQUFVQSxFQUFRLFdBQzlCSSxHQUFVNXRCLEVBQUl3dEIsQ0FBTyxFQUNyQkQsR0FBUXZ0QixFQUFJd3RCLENBQU8sRUFDckIsQ0FDTyxNQUFNbXdDLEdBQVMsQ0FDcEIsUUFBQXB3QyxHQUNBLFVBQUFLLEdBQ0EsUUFBQTRPLEVBQ0YsOEtDakNNb2hDLEdBQVVDLEdBQUksRUFFZDU3RCxHQUFNNjdELEdBQVVDLEVBQUcsRUFDekI5N0QsR0FBSSxPQUFPLGlCQUFpQixRQUFVMjdELEdBRXRDMzdELEdBQUksVUFBVSxVQUFXLENBQ3JCLFFBQVMsQ0FBQ2pDLEVBQUl3dEIsSUFDSCxJQUFJLFVBQVUsUUFBUXh0QixFQUFJLENBQzdCLFNBQVUsU0FBUyxLQUNuQixVQUFXQSxFQUFHLFVBQzFCLENBQVMsQ0FFVCxDQUFDLEVBUUQsTUFBTW1vQixHQUFVRCxHQUFjLENBQzFCLFdBQUFHLEdBQ0EsV0FBQUMsRUFDSixDQUFDLEVBRURybUIsR0FBSSxJQUFJa21CLEVBQU8sRUFDZmxtQixHQUFJLElBQUkrN0QsRUFBWSxFQUNwQi83RCxHQUFJLE1BQU0sOEJBQThCIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzE2LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDQ4LDQ5LDUwLDUxLDUyLDUzLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLDYyLDYzLDY0LDY1LDY2LDY3LDY4LDY5LDcwLDcxLDcyLDczLDc0LDc1LDc2LDc3LDc4LDc5LDgwLDgxLDgyLDgzLDg0LDg1LDg2LDg3LDg4LDg5LDkwLDkxLDkyLDkzLDk0LDk1LDk2LDk3LDk4LDk5LDEwMCwxMDEsMTAyLDEwMywxMDQsMTA1LDEwNiwxMDcsMTA4LDEwOSwxMTAsMTExLDExMiwxMTMsMTE0LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTIzLDEyNCwxMjUsMTI2LDEyNywxMjgsMTI5LDEzMCwxMzEsMTMyLDEzMywxMzQsMTM1LDEzNiwxMzcsMTM4LDEzOSwxNDAsMTQxLDE0MiwxNDMsMTQ0LDE0NSwxNDYsMTQ3LDE0OCwxNDksMTUwLDE1MSwxNTIsMTUzLDE1NCwxNTUsMTU2LDE1NywxNTgsMTU5LDE2MCwxNjEsMTYyLDE2MywxNjQsMTY1LDE2NiwxNjcsMTY4LDE2OSwxNzAsMTcxLDE3MiwxNzMsMTc0LDE3NSwxNzYsMTc3LDE3OCwxNzksMTgwLDE4MSwxODIsMTgzLDE4NCwxODUsMTg2LDE4NywxODgsMTg5LDE5MCwxOTEsMTkyLDE5MywxOTQsMTk1LDE5NiwxOTcsMTk4LDE5OSwyMDAsMjAxLDIwMiwyMDMsMjA0LDIwNSwyMDYsMjA3LDIwOCwyMDksMjEwLDIxMSwyMTIsMjEzLDIxNCwyMTUsMjE2LDIxNywyMTgsMjE5LDIyMCwyMjEsMjIyLDIyMywyMjQsMjI1LDIyNiwyMjcsMjI4LDIyOSwyMzAsMjMxLDIzMiwyMzMsMjM0LDIzNSwyMzYsMjM3LDIzOCwyMzksMjQwLDI0MSwyNDIsMjQzXX0=
