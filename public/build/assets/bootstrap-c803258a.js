var Ut=Object.defineProperty;var Ft=(n,e,t)=>e in n?Ut(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var E=(n,e,t)=>(Ft(n,typeof e!="symbol"?e+"":e,t),t),fe=(n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)};var f=(n,e,t)=>(fe(n,e,"read from private field"),t?t.call(n):e.get(n)),x=(n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},q=(n,e,t,i)=>(fe(n,e,"write to private field"),i?i.call(n,t):e.set(n,t),t);var H=(n,e,t)=>(fe(n,e,"access private method"),t);var N;class he{constructor(){x(this,N,{})}on(e,t){f(this,N)[e]?f(this,N)[e].push(t):f(this,N)[e]=[t]}off(e,t){if(f(this,N)[e])if(typeof t=="function"){const i=f(this,N)[e].indexOf(t);if(i===-1)return;f(this,N)[e].splice(i,1)}else f(this,N)[e]=[]}dispatch(e,t){f(this,N)[e]&&f(this,N)[e].forEach(function(i){i.call(this,t)})}emit(e,t){return this.dispatch(e,t)}}N=new WeakMap;var k,F,ne;class Wt extends he{constructor(){super(...arguments);x(this,F);x(this,k,{})}call(t,i){for(let s in f(this,k))f(this,k)[s][t]&&H(this,F,ne).call(this,t,f(this,k)[s],i)}get(t){return f(this,k)[t]}getModules(){return f(this,k)}register(t,i){let s;typeof i=="function"?s=new i:s=i,f(this,k)[t]=s,this[t]=s,H(this,F,ne).call(this,"onRegister",s),this.dispatch("register")}remove(t){let i;if(typeof t=="string"&&(i=t,t=this.get(t)),!i){for(let s in f(this,k))if(f(this,k)[s]===t){i=s;break}}delete f(this,k)[i],delete this[i],H(this,F,ne).call(this,"onDestroy",t),this.dispatch("remove")}}k=new WeakMap,F=new WeakSet,ne=function(t,i,s){!t||!i||!i[t]||(t=i[t],t(s))};mw.require("editor.js");mw.require("css_parser.js");const Rs=function(){var n=document.querySelector("#mw-live-edit-editor"),e=function(){var d={};this.on=function(m,u){d[m]?d[m].push(u):d[m]=[u]},this.dispatch=function(m,u){d[m]&&d[m].forEach(function(c){c.call(this,u)})},this.provide=function(m){this.dispatch("change",m.map(function(u){return{label:u,value:u}}))}},t=new e;window.fontFamilyProvider=t;const i=mw.app.get("canvas").getFrame();i.contentWindow.fontFamilyProvider=t;const s=[[{group:{icon:"mdi mdi-format-title",controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],r=mw.Editor({document:i.contentWindow.document,executionDocument:i.contentWindow.document,actionWindow:i.contentWindow,element:n,mode:"document",notEditableClasses:["module"],regions:".edit",skin:"le2",editMode:"liveedit",scopeColor:"white",controls:s,smallEditor:s,smallEditorPositionX:"center",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:t});var o=document.getElementById("toolbar-undo"),a=document.getElementById("toolbar-redo");r.state.on("record",function(){a.disabled=!r.state.hasPrev,o.disabled=!r.state.hasNext}),r.state.on("change",function(){a.disabled=!r.state.hasPrev,o.disabled=!r.state.hasNext}),o&&o.addEventListener("click",function(){r.state.undo()}),a&&a.addEventListener("click",function(){r.state.redo()}),n.innerHTML="",n.appendChild(r.wrapper);var l=r.storage.get(r.settings.id+"-small-editor-pinned");typeof l>"u"&&typeof r.smallEditorApi<"u"&&r.smallEditorApi.pin(),mw.app.register("richTextEditor",r),mw.app.register("richTextEditorAPI",r.api)};function Yt(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var Me={},Xt={get exports(){return Me},set exports(n){Me=n}},le={},Jt={get exports(){return le},set exports(n){le=n}},Lt=function(e,t){return function(){for(var s=new Array(arguments.length),r=0;r<s.length;r++)s[r]=arguments[r];return e.apply(t,s)}},Zt=Lt,V=Object.prototype.toString;function qe(n){return V.call(n)==="[object Array]"}function Oe(n){return typeof n>"u"}function Gt(n){return n!==null&&!Oe(n)&&n.constructor!==null&&!Oe(n.constructor)&&typeof n.constructor.isBuffer=="function"&&n.constructor.isBuffer(n)}function Kt(n){return V.call(n)==="[object ArrayBuffer]"}function Qt(n){return typeof FormData<"u"&&n instanceof FormData}function ei(n){var e;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?e=ArrayBuffer.isView(n):e=n&&n.buffer&&n.buffer instanceof ArrayBuffer,e}function ti(n){return typeof n=="string"}function ii(n){return typeof n=="number"}function Et(n){return n!==null&&typeof n=="object"}function re(n){if(V.call(n)!=="[object Object]")return!1;var e=Object.getPrototypeOf(n);return e===null||e===Object.prototype}function si(n){return V.call(n)==="[object Date]"}function ni(n){return V.call(n)==="[object File]"}function ri(n){return V.call(n)==="[object Blob]"}function Nt(n){return V.call(n)==="[object Function]"}function oi(n){return Et(n)&&Nt(n.pipe)}function ai(n){return typeof URLSearchParams<"u"&&n instanceof URLSearchParams}function li(n){return n.trim?n.trim():n.replace(/^\s+|\s+$/g,"")}function di(){return typeof navigator<"u"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window<"u"&&typeof document<"u"}function je(n,e){if(!(n===null||typeof n>"u"))if(typeof n!="object"&&(n=[n]),qe(n))for(var t=0,i=n.length;t<i;t++)e.call(null,n[t],t,n);else for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&e.call(null,n[s],s,n)}function De(){var n={};function e(s,r){re(n[r])&&re(s)?n[r]=De(n[r],s):re(s)?n[r]=De({},s):qe(s)?n[r]=s.slice():n[r]=s}for(var t=0,i=arguments.length;t<i;t++)je(arguments[t],e);return n}function ui(n,e,t){return je(e,function(s,r){t&&typeof s=="function"?n[r]=Zt(s,t):n[r]=s}),n}function hi(n){return n.charCodeAt(0)===65279&&(n=n.slice(1)),n}var L={isArray:qe,isArrayBuffer:Kt,isBuffer:Gt,isFormData:Qt,isArrayBufferView:ei,isString:ti,isNumber:ii,isObject:Et,isPlainObject:re,isUndefined:Oe,isDate:si,isFile:ni,isBlob:ri,isFunction:Nt,isStream:oi,isURLSearchParams:ai,isStandardBrowserEnv:di,forEach:je,merge:De,extend:ui,trim:li,stripBOM:hi},j=L;function Ze(n){return encodeURIComponent(n).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var kt=function(e,t,i){if(!t)return e;var s;if(i)s=i(t);else if(j.isURLSearchParams(t))s=t.toString();else{var r=[];j.forEach(t,function(l,d){l===null||typeof l>"u"||(j.isArray(l)?d=d+"[]":l=[l],j.forEach(l,function(u){j.isDate(u)?u=u.toISOString():j.isObject(u)&&(u=JSON.stringify(u)),r.push(Ze(d)+"="+Ze(u))}))}),s=r.join("&")}if(s){var o=e.indexOf("#");o!==-1&&(e=e.slice(0,o)),e+=(e.indexOf("?")===-1?"?":"&")+s}return e},ci=L;function ce(){this.handlers=[]}ce.prototype.use=function(e,t,i){return this.handlers.push({fulfilled:e,rejected:t,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1};ce.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)};ce.prototype.forEach=function(e){ci.forEach(this.handlers,function(i){i!==null&&e(i)})};var mi=ce,pi=L,fi=function(e,t){pi.forEach(e,function(s,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=s,delete e[r])})},Ht=function(e,t,i,s,r){return e.config=t,i&&(e.code=i),e.request=s,e.response=r,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e},ge,Ge;function St(){if(Ge)return ge;Ge=1;var n=Ht;return ge=function(t,i,s,r,o){var a=new Error(t);return n(a,i,s,r,o)},ge}var we,Ke;function gi(){if(Ke)return we;Ke=1;var n=St();return we=function(t,i,s){var r=s.config.validateStatus;!s.status||!r||r(s.status)?t(s):i(n("Request failed with status code "+s.status,s.config,null,s.request,s))},we}var ve,Qe;function wi(){if(Qe)return ve;Qe=1;var n=L;return ve=n.isStandardBrowserEnv()?function(){return{write:function(i,s,r,o,a,l){var d=[];d.push(i+"="+encodeURIComponent(s)),n.isNumber(r)&&d.push("expires="+new Date(r).toGMTString()),n.isString(o)&&d.push("path="+o),n.isString(a)&&d.push("domain="+a),l===!0&&d.push("secure"),document.cookie=d.join("; ")},read:function(i){var s=document.cookie.match(new RegExp("(^|;\\s*)("+i+")=([^;]*)"));return s?decodeURIComponent(s[3]):null},remove:function(i){this.write(i,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}(),ve}var ye,et;function vi(){return et||(et=1,ye=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}),ye}var be,tt;function yi(){return tt||(tt=1,be=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}),be}var xe,it;function bi(){if(it)return xe;it=1;var n=vi(),e=yi();return xe=function(i,s){return i&&!n(s)?e(i,s):s},xe}var Ce,st;function xi(){if(st)return Ce;st=1;var n=L,e=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];return Ce=function(i){var s={},r,o,a;return i&&n.forEach(i.split(`
`),function(d){if(a=d.indexOf(":"),r=n.trim(d.substr(0,a)).toLowerCase(),o=n.trim(d.substr(a+1)),r){if(s[r]&&e.indexOf(r)>=0)return;r==="set-cookie"?s[r]=(s[r]?s[r]:[]).concat([o]):s[r]=s[r]?s[r]+", "+o:o}}),s},Ce}var Le,nt;function Ci(){if(nt)return Le;nt=1;var n=L;return Le=n.isStandardBrowserEnv()?function(){var t=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a"),s;function r(o){var a=o;return t&&(i.setAttribute("href",a),a=i.href),i.setAttribute("href",a),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:i.pathname.charAt(0)==="/"?i.pathname:"/"+i.pathname}}return s=r(window.location.href),function(a){var l=n.isString(a)?r(a):a;return l.protocol===s.protocol&&l.host===s.host}}():function(){return function(){return!0}}(),Le}var Ee,rt;function ot(){if(rt)return Ee;rt=1;var n=L,e=gi(),t=wi(),i=kt,s=bi(),r=xi(),o=Ci(),a=St();return Ee=function(d){return new Promise(function(u,c){var h=d.data,w=d.headers,v=d.responseType;n.isFormData(h)&&delete w["Content-Type"];var p=new XMLHttpRequest;if(d.auth){var I=d.auth.username||"",We=d.auth.password?unescape(encodeURIComponent(d.auth.password)):"";w.Authorization="Basic "+btoa(I+":"+We)}var Ye=s(d.baseURL,d.url);p.open(d.method.toUpperCase(),i(Ye,d.params,d.paramsSerializer),!0),p.timeout=d.timeout;function Xe(){if(p){var B="getAllResponseHeaders"in p?r(p.getAllResponseHeaders()):null,_=!v||v==="text"||v==="json"?p.responseText:p.response,J={data:_,status:p.status,statusText:p.statusText,headers:B,config:d,request:p};e(u,c,J),p=null}}if("onloadend"in p?p.onloadend=Xe:p.onreadystatechange=function(){!p||p.readyState!==4||p.status===0&&!(p.responseURL&&p.responseURL.indexOf("file:")===0)||setTimeout(Xe)},p.onabort=function(){p&&(c(a("Request aborted",d,"ECONNABORTED",p)),p=null)},p.onerror=function(){c(a("Network Error",d,null,p)),p=null},p.ontimeout=function(){var _="timeout of "+d.timeout+"ms exceeded";d.timeoutErrorMessage&&(_=d.timeoutErrorMessage),c(a(_,d,d.transitional&&d.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",p)),p=null},n.isStandardBrowserEnv()){var Je=(d.withCredentials||o(Ye))&&d.xsrfCookieName?t.read(d.xsrfCookieName):void 0;Je&&(w[d.xsrfHeaderName]=Je)}"setRequestHeader"in p&&n.forEach(w,function(_,J){typeof h>"u"&&J.toLowerCase()==="content-type"?delete w[J]:p.setRequestHeader(J,_)}),n.isUndefined(d.withCredentials)||(p.withCredentials=!!d.withCredentials),v&&v!=="json"&&(p.responseType=d.responseType),typeof d.onDownloadProgress=="function"&&p.addEventListener("progress",d.onDownloadProgress),typeof d.onUploadProgress=="function"&&p.upload&&p.upload.addEventListener("progress",d.onUploadProgress),d.cancelToken&&d.cancelToken.promise.then(function(_){p&&(p.abort(),c(_),p=null)}),h||(h=null),p.send(h)})},Ee}var y=L,at=fi,Li=Ht,Ei={"Content-Type":"application/x-www-form-urlencoded"};function lt(n,e){!y.isUndefined(n)&&y.isUndefined(n["Content-Type"])&&(n["Content-Type"]=e)}function Ni(){var n;return(typeof XMLHttpRequest<"u"||typeof process<"u"&&Object.prototype.toString.call(process)==="[object process]")&&(n=ot()),n}function ki(n,e,t){if(y.isString(n))try{return(e||JSON.parse)(n),y.trim(n)}catch(i){if(i.name!=="SyntaxError")throw i}return(t||JSON.stringify)(n)}var me={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:Ni(),transformRequest:[function(e,t){return at(t,"Accept"),at(t,"Content-Type"),y.isFormData(e)||y.isArrayBuffer(e)||y.isBuffer(e)||y.isStream(e)||y.isFile(e)||y.isBlob(e)?e:y.isArrayBufferView(e)?e.buffer:y.isURLSearchParams(e)?(lt(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):y.isObject(e)||t&&t["Content-Type"]==="application/json"?(lt(t,"application/json"),ki(e)):e}],transformResponse:[function(e){var t=this.transitional,i=t&&t.silentJSONParsing,s=t&&t.forcedJSONParsing,r=!i&&this.responseType==="json";if(r||s&&y.isString(e)&&e.length)try{return JSON.parse(e)}catch(o){if(r)throw o.name==="SyntaxError"?Li(o,this,"E_JSON_PARSE"):o}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};me.headers={common:{Accept:"application/json, text/plain, */*"}};y.forEach(["delete","get","head"],function(e){me.headers[e]={}});y.forEach(["post","put","patch"],function(e){me.headers[e]=y.merge(Ei)});var $e=me,Hi=L,Si=$e,Ti=function(e,t,i){var s=this||Si;return Hi.forEach(i,function(o){e=o.call(s,e,t)}),e},Ne,dt;function Tt(){return dt||(dt=1,Ne=function(e){return!!(e&&e.__CANCEL__)}),Ne}var ut=L,ke=Ti,Ai=Tt(),_i=$e;function He(n){n.cancelToken&&n.cancelToken.throwIfRequested()}var Mi=function(e){He(e),e.headers=e.headers||{},e.data=ke.call(e,e.data,e.headers,e.transformRequest),e.headers=ut.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),ut.forEach(["delete","get","head","post","put","patch","common"],function(s){delete e.headers[s]});var t=e.adapter||_i.adapter;return t(e).then(function(s){return He(e),s.data=ke.call(e,s.data,s.headers,e.transformResponse),s},function(s){return Ai(s)||(He(e),s&&s.response&&(s.response.data=ke.call(e,s.response.data,s.response.headers,e.transformResponse))),Promise.reject(s)})},b=L,At=function(e,t){t=t||{};var i={},s=["url","method","data"],r=["headers","auth","proxy","params"],o=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],a=["validateStatus"];function l(c,h){return b.isPlainObject(c)&&b.isPlainObject(h)?b.merge(c,h):b.isPlainObject(h)?b.merge({},h):b.isArray(h)?h.slice():h}function d(c){b.isUndefined(t[c])?b.isUndefined(e[c])||(i[c]=l(void 0,e[c])):i[c]=l(e[c],t[c])}b.forEach(s,function(h){b.isUndefined(t[h])||(i[h]=l(void 0,t[h]))}),b.forEach(r,d),b.forEach(o,function(h){b.isUndefined(t[h])?b.isUndefined(e[h])||(i[h]=l(void 0,e[h])):i[h]=l(void 0,t[h])}),b.forEach(a,function(h){h in t?i[h]=l(e[h],t[h]):h in e&&(i[h]=l(void 0,e[h]))});var m=s.concat(r).concat(o).concat(a),u=Object.keys(e).concat(Object.keys(t)).filter(function(h){return m.indexOf(h)===-1});return b.forEach(u,d),i};const Oi="axios",Di="0.21.4",zi="Promise based HTTP client for the browser and node.js",Ii="index.js",Bi={test:"grunt test",start:"node ./sandbox/server.js",build:"NODE_ENV=production grunt build",preversion:"npm test",version:"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",postversion:"git push && git push --tags",examples:"node ./examples/server.js",coveralls:"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",fix:"eslint --fix lib/**/*.js"},Ri={type:"git",url:"https://github.com/axios/axios.git"},Pi=["xhr","http","ajax","promise","node"],Vi="Matt Zabriskie",qi="MIT",ji={url:"https://github.com/axios/axios/issues"},$i="https://axios-http.com",Ui={coveralls:"^3.0.0","es6-promise":"^4.2.4",grunt:"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1",karma:"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2",minimist:"^1.2.0",mocha:"^8.2.1",sinon:"^4.5.0","terser-webpack-plugin":"^4.2.3",typescript:"^4.0.5","url-search-params":"^0.10.0",webpack:"^4.44.2","webpack-dev-server":"^3.11.0"},Fi={"./lib/adapters/http.js":"./lib/adapters/xhr.js"},Wi="dist/axios.min.js",Yi="dist/axios.min.js",Xi="./index.d.ts",Ji={"follow-redirects":"^1.14.0"},Zi=[{path:"./dist/axios.min.js",threshold:"5kB"}],Gi={name:Oi,version:Di,description:zi,main:Ii,scripts:Bi,repository:Ri,keywords:Pi,author:Vi,license:qi,bugs:ji,homepage:$i,devDependencies:Ui,browser:Fi,jsdelivr:Wi,unpkg:Yi,typings:Xi,dependencies:Ji,bundlesize:Zi};var _t=Gi,Ue={};["object","boolean","number","function","string","symbol"].forEach(function(n,e){Ue[n]=function(i){return typeof i===n||"a"+(e<1?"n ":" ")+n}});var ht={},Ki=_t.version.split(".");function Mt(n,e){for(var t=e?e.split("."):Ki,i=n.split("."),s=0;s<3;s++){if(t[s]>i[s])return!0;if(t[s]<i[s])return!1}return!1}Ue.transitional=function(e,t,i){var s=t&&Mt(t);function r(o,a){return"[Axios v"+_t.version+"] Transitional option '"+o+"'"+a+(i?". "+i:"")}return function(o,a,l){if(e===!1)throw new Error(r(a," has been removed in "+t));return s&&!ht[a]&&(ht[a]=!0,console.warn(r(a," has been deprecated since v"+t+" and will be removed in the near future"))),e?e(o,a,l):!0}};function Qi(n,e,t){if(typeof n!="object")throw new TypeError("options must be an object");for(var i=Object.keys(n),s=i.length;s-- >0;){var r=i[s],o=e[r];if(o){var a=n[r],l=a===void 0||o(a,r,n);if(l!==!0)throw new TypeError("option "+r+" must be "+l);continue}if(t!==!0)throw Error("Unknown option "+r)}}var es={isOlderVersion:Mt,assertOptions:Qi,validators:Ue},Ot=L,ts=kt,ct=mi,mt=Mi,pe=At,Dt=es,U=Dt.validators;function ee(n){this.defaults=n,this.interceptors={request:new ct,response:new ct}}ee.prototype.request=function(e){typeof e=="string"?(e=arguments[1]||{},e.url=arguments[0]):e=e||{},e=pe(this.defaults,e),e.method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=e.transitional;t!==void 0&&Dt.assertOptions(t,{silentJSONParsing:U.transitional(U.boolean,"1.0.0"),forcedJSONParsing:U.transitional(U.boolean,"1.0.0"),clarifyTimeoutError:U.transitional(U.boolean,"1.0.0")},!1);var i=[],s=!0;this.interceptors.request.forEach(function(c){typeof c.runWhen=="function"&&c.runWhen(e)===!1||(s=s&&c.synchronous,i.unshift(c.fulfilled,c.rejected))});var r=[];this.interceptors.response.forEach(function(c){r.push(c.fulfilled,c.rejected)});var o;if(!s){var a=[mt,void 0];for(Array.prototype.unshift.apply(a,i),a=a.concat(r),o=Promise.resolve(e);a.length;)o=o.then(a.shift(),a.shift());return o}for(var l=e;i.length;){var d=i.shift(),m=i.shift();try{l=d(l)}catch(u){m(u);break}}try{o=mt(l)}catch(u){return Promise.reject(u)}for(;r.length;)o=o.then(r.shift(),r.shift());return o};ee.prototype.getUri=function(e){return e=pe(this.defaults,e),ts(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")};Ot.forEach(["delete","get","head","options"],function(e){ee.prototype[e]=function(t,i){return this.request(pe(i||{},{method:e,url:t,data:(i||{}).data}))}});Ot.forEach(["post","put","patch"],function(e){ee.prototype[e]=function(t,i,s){return this.request(pe(s||{},{method:e,url:t,data:i}))}});var is=ee,Se,pt;function zt(){if(pt)return Se;pt=1;function n(e){this.message=e}return n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,Se=n,Se}var Te,ft;function ss(){if(ft)return Te;ft=1;var n=zt();function e(t){if(typeof t!="function")throw new TypeError("executor must be a function.");var i;this.promise=new Promise(function(o){i=o});var s=this;t(function(o){s.reason||(s.reason=new n(o),i(s.reason))})}return e.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},e.source=function(){var i,s=new e(function(o){i=o});return{token:s,cancel:i}},Te=e,Te}var Ae,gt;function ns(){return gt||(gt=1,Ae=function(e){return function(i){return e.apply(null,i)}}),Ae}var _e,wt;function rs(){return wt||(wt=1,_e=function(e){return typeof e=="object"&&e.isAxiosError===!0}),_e}var vt=L,os=Lt,oe=is,as=At,ls=$e;function It(n){var e=new oe(n),t=os(oe.prototype.request,e);return vt.extend(t,oe.prototype,e),vt.extend(t,e),t}var S=It(ls);S.Axios=oe;S.create=function(e){return It(as(S.defaults,e))};S.Cancel=zt();S.CancelToken=ss();S.isCancel=Tt();S.all=function(e){return Promise.all(e)};S.spread=ns();S.isAxiosError=rs();Jt.exports=S;le.default=S;(function(n){n.exports=le})(Xt);const de=Yt(Me);class A{static extend(){const e={};let t=!1,i=0;const s=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(t=arguments[0],i++);const r=function(o){for(const a in o)Object.prototype.hasOwnProperty.call(o,a)&&(t&&Object.prototype.toString.call(o[a])==="[object Object]"?e[a]=A.extend(!0,e[a],o[a]):e[a]=o[a])};for(;i<s;i++){const o=arguments[i];r(o)}return e}}var R=function(n,e){var t=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(s,r){this.nodes=(r||document).querySelectorAll(s)},this.each=function(s){if(this.nodes)for(var r=0;r<this.nodes.length;r++)s.call(this.nodes[r],r);else this.node&&s.call(this.node,0);return this},this.encapsulate=function(){};var i=function(s,r){s&&(Array.isArray(s)?s.forEach(function(o){i(o,r)}):s instanceof R?r.append(s):typeof s=="object"&&r.append(new R(s)))};this.create=function(){var s=this.document.createElement(this.settings.tag);if(this.node=s,this.settings.encapsulate===!0){var r=this.settings.encapsulate===!0?"open":this.settings.encapsulate;s.attachShadow({mode:r})}this.nodes=[s],this.settings.content&&i(this.settings.content,this)},this._specialProps=function(s,r){if(s==="tooltip")return this.node.dataset[s]=r,!0},this.setProps=function(){for(var s in this.settings.props)if(s==="dataset")for(var r in this.settings.props[s])this.node.dataset[r]=this.settings.props[s][r];else if(s==="style")for(var o in this.settings.props[s])this.node.style[o]=this.settings.props[s][o];else{var a=this.settings.props[s];this._specialProps(s,a)||(this.node[s]=a)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(s,r){return typeof r=="number"&&this.__.cssNumber.indexOf(s)===-1&&(r=r+"px"),r},this.css=function(s,r){if(typeof s=="string")if(typeof r<"u"){var o=this._normalizeCSSValue(s,r);this.each(function(){this.style[s]=o})}else return this.document.defaultView.getComputedStyle(this.node)[s];if(typeof s=="object")for(var a in s)this.each(function(){this.style[a]=t._normalizeCSSValue(a,s[a])});return this},this.dataset=function(s,r){return typeof r>"u"?this._active()[s]:(this.each(function(){this.dataset[s]=r}),this)},this.attr=function(s,r){return typeof r>"u"?this._active()[s]:(this.each(function(){this.setAttribute(s,r)}),this)},this.val=function(s){return typeof s>"u"?this._active().value:(this.each(function(){this.value=s}),this)},this.prop=function(s,r){var o=this._active();return typeof r>"u"?o[s]:(o[s]!==r&&(o[s]=r,this.trigger("propChange",[s,r])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(s){var r=mw.element("#r"+new Date().getTime());return this.each(function(){for(var o=this.querySelectorAll(s),a=0;a<o.length;a++)r.nodes.indexOf(o[a])===-1&&r.nodes.push(o[a])}),r},this.addClass=function(s){return s=s.trim().split(" "),this.each(function(){var r=this;s.forEach(function(o){r.classList.add(o)})})},this.toggleClass=function(s){return this.each(function(){this.classList.toggle(s.trim())})},this.removeClass=function(s){var r=Array.isArray(s);if(r)return this.each(function(){for(var a=0,l=s.length;a<l;a++)this.classList.remove(s[a])});s=s.trim();var o=s.split(" ");return o.length>1?this.removeClass(o):this.each(function(){this.classList.remove(s)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(s){return typeof s>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=s})},this.text=function(s,r){if(typeof s>"u")return this.node.textContent;typeof r>"u"&&(r=!0),r&&(s=this.document.createRange().createContextualFragment(s).textContent),this.node.innerHTML=s},this._asdom=function(s){return typeof s=="string"?this.document.createRange().createContextualFragment(s):s.node?s.node:s.nodes?s.nodes[s.nodes.length-1]:s},this.offset=function(){var s=this._active(),r=this.getWindow(),o=s.getBoundingClientRect();return o.offsetTop=o.top+r.pageYOffset,o.offsetBottom=o.bottom+r.pageYOffset,o.offsetLeft=o.left+r.pageXOffset,o},this.width=function(s){return s?this.css("width",s):this._active().offsetWidth},this.height=function(s){return s?this.css("height",s):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(s){s=s||"*";var r=this._active(),o=r.parentElement,a=mw.element();for(a.nodes=[];o;)o.matches(s)&&a.nodes.push(o),o=o.parentElement;return a},this.append=function(s){return s&&this.each(function(){this.append(t._asdom(s))}),this},this.before=function(s){return s&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(t._asdom(s),this)}),this},this.after=function(s){s&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(t._asdom(s),this.nextSibling)})},this.prepend=function(s){return s&&this.each(function(){this.prepend(t._asdom(s))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(s){this._disabled=s,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(s,r){return r=r||{},this.each(function(){this.dispatchEvent(new CustomEvent(s,{detail:r,cancelable:!0,bubbles:!0})),t._on[s]&&t._on[s].forEach(function(o){o.call(this,s,r)})}),this},this.get=function(s){return this.nodes[s]},this.wrap=function(s){var r=Fe(s);this.before(r),r.append(this)},this._on={},this.on=function(s,r){return s=s.trim().split(" "),s.forEach(function(o){t._on[o]||(t._on[o]=[]),t._on[o].push(r),t.each(function(){this.addEventListener(o,r,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=e||document,this.root instanceof R&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,n=n||{},n.nodeName&&n.nodeType)this.nodes.push(n),this.node=n,n={},this._asElement=!0;else if(typeof n=="string")if(n.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(n)),n={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof R)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new R(this.settings.content));else{var s=this._asdom(n);this.nodes=[].slice.call(s.children),this._asElement=!0}n=n||{};var r={tag:"div",props:{}};this.settings=A.extend({},r,n),!this._asElement&&(this.create(),this.setProps())},this.init()};const Fe=function(n,e){return new R(n,e)};Fe.module=function(n,e){R.prototype[n]=e};const ze="mw-le-element";window.customElements&&!customElements.get(ze)&&customElements.define(ze,class extends HTMLElement{constructor(){super()}});const g=(n,e)=>(n instanceof Object&&!n.nodeType&&(n=A.extend({},n||{},{tag:n.tag||ze})),Fe(n,e));let Z;const te=document.documentElement;te.matches?Z="matches":te.matchesSelector?Z="matchesSelector":te.mozMatchesSelector?Z="mozMatchesSelector":te.webkitMatchesSelector&&(Z="webkitMatchesSelector");class C{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(e,t){return e[Z](t)}static isBlockLevel(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof this._isBlockCache[t]<"u")return this._isBlockCache[t];var i=document.createElement(t);return this.fragment().appendChild(i),this._isBlockCache[t]=getComputedStyle(i).display==="block",this.fragment().removeChild(i),this._isBlockCache[t]}static firstBlockLevel(e){for(;e&&e.classList;){if(this.isBlockLevel(e))return e;e=e.parentNode}}static firstWithBackgroundImage(e){if(!e)return null;for(;e&&e.nodeName!=="BODY";){if(e.style.backgroundImage)return e;e=e.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(e,t){for(;e&&e.nodeName!=="BODY";){let i=0,s=t.length;for(;i<s;i++)if(e.classList.contains(t[i]))return!0;e=e.parentElement}return!1}static hasParentsWithClass(e,t){if(e){for(var i=e.parentNode;i&&i.nodeName!=="BODY";){if(i.classList.contains(t))return!0;i=i.parentNode}return!1}}static hasParentWithId(e,t){if(e){for(var i=e.parentNode;i&&i.nodeName!=="BODY";){if(i.id===t)return!0;i=i.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(e,t){for(;e&&e.nodeName!=="BODY";){let i=0,s=t.length;for(;i<s;i++)if(e.classList.contains(t[i]))return e;e=e.parentElement}return null}static firstParentOrCurrentWithTag(e,t){if(!(!e||!t)){t=typeof t!="string"?t:[t];for(var i=e;i&&i.nodeName!=="BODY";){if(t.indexOf(i.nodeName.toLowerCase())!==-1)return i;i=i.parentNode}return!1}}static index(e,t,i){i=i||e.tagName.toLowerCase(),t=t||e.parentNode;var s;t.constructor===[].constructor?s=t:s=t.querySelectorAll(i);for(var r=0,o=s.length;r<o;r++)if(e===s[r])return r}static firstParentOrCurrentWithClass(e,t){if(!e)return!1;for(var i=e;i&&i.nodeName!=="BODY";){if(i.classList.contains(t))return i;i=i.parentNode}return!1}static firstParentOrCurrent(e,t){if(!e)return!1;for(var i=e;i&&i.nodeName!=="BODY";){if(i.matches(t))return i;i=i.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(e,t){if(!e)return!1;for(var i=e;i&&i.nodeName!=="BODY";){if(!i)return!1;if(this.hasAnyOfClasses(i,t))return i;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(e,t){let i=e;for(;i&&i.nodeName!=="BODY";){const s=i.classList.contains(t[0]),r=i.classList.contains(t[1]);if(s&&r)return!1;if(s)return!0;if(r)return!1;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(e,t){let i=e;for(;i&&i.nodeName!=="BODY";){const s=i.classList.contains(t[0]),r=i.classList.contains(t[1]);if(s&&r)return!1;if(s)return!0;if(r)return!1;i=i.parentNode}return!0}static hasAnyOfClasses(e,t){if(!e)return;let i=0,s=t.length;for(;i<s;i++)if(e.classList.contains(t[i]))return!0;return!1}static offset(e){if(e){var t=e.getBoundingClientRect(),i={top:t.top,left:t.left,width:t.width,height:t.height,bottom:t.bottom,right:t.right};return i.top+=e.ownerDocument.defaultView.scrollY,i.bottom+=e.ownerDocument.defaultView.scrollY,i.left+=e.ownerDocument.defaultView.scrollX,i.right+=e.ownerDocument.defaultView.scrollX,i}}static parentsOrder(e,t){for(var i=[],s={},r=t.length,o=0,a=-1;o<r;o++)s[t[o]]=-1;if(!e)return s;for(var l=e.parentNode;l&&l.nodeName!=="BODY";){for(a++,o=0;o<r;o++)l.classList.contains(t[o])&&i.indexOf(t[o])===-1&&(s[t[o]]=a,i.push(t[o]));l=l.parentNode}return s}}E(C,"_isBlockCache",{}),E(C,"_fragment");class ds{constructor(e){this.settings=e,this.tools=C}isRow(e){return e.classList.contains(this.settings.rowClass)}isModule(e){return e.classList.contains(this.settings.moduleClass)&&e.dataset.type!=="layouts"}isLayout(e){return e.classList.contains(this.settings.moduleClass)&&e.dataset.type==="layouts"}isInLayout(e){if(!e)return!1;for(e=e.parentNode;e&&e!==this.settings.document.body;){if(e.classList.contains(this.settings.moduleClass)&&e.dataset.type==="layouts")return!0;e=e.parentNode}}isElement(e){return e.classList.contains(this.settings.elementClass)}isEmptyElement(e){return e.classList.contains(this.settings.emptyElementClass)}isEdit(e){return e.classList.contains(this.settings.editClass)}isInEdit(e){var t=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(e.parentNode,t)}isEditOrInEdit(e){return this.isEdit(e)||this.isInEdit(e)}isPlainText(e){return e.classList.contains(this.settings.plainElementClass)}getType(e){if(this.isEdit(e))return"edit";if(this.isElement(e))return"element";if(this.isModule(e))return"module";if(this.isLayout(e))return"layout"}}class Bt extends ds{constructor(e){super(e),this.settings=e,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM","DD"],this.init()}isConfigurable(e){return this.isElement(e)||this.isModule(e)||this.isRow(e)}isEditableLayout(e){return this.this.isLayout(e)&&this.isInEdit(e)}canMoveModule(e){return this.isModule(e)&&this.isInEdit(e)}canAcceptByClass(e){return this.tools.hasAnyOfClasses(e,this.dropableElements())}canAcceptByTag(e){return!e||e.nodeType!==1?!1:this._tagsCanAccept.indexOf(e.nodeName)!==-1}allowDrop(e){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(e,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(e){return this.canAccept(e.parentNode)}canAccept(e){return!!(this.canAcceptByClass(e)&&this.isEditOrInEdit(e)&&this.allowDrop(e))}canReceiveElements(e){return this.isEdit(e)&&this.canAcceptByTag(e)}dropableElements(){return this._dropableElements}getIteractionTarget(e){return this.tools.firstWithAyOfClassesOnNodeOrParent(e,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(e,t){const i=this.getIteractionTarget(e);if(!i||!this.isEditOrInEdit(e)||!this.allowDrop(e))return null;const s={target:i,canInsert:!1,beforeAfter:!1};var r=this.settings.strictLayouts&&this.isLayout(t),o=this.settings.strict&&!this.isLayout(t)&&!this.isInLayout(i);if(o)return null;if(this.isEdit(i))s.canInsert=!r;else if(this.isElement(i)&&!r)this.canAcceptByTag(i)&&(s.canInsert=!r),s.beforeAfter=!0;else if(this.isModule(i)&&!r)if(this.canInsertBeforeOrAfter(i))s.beforeAfter=!0;else return null;else if(this.isLayout(i))if(this.canInsertBeforeOrAfter(i))s.beforeAfter=!0;else return null;return s}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let us=-1;const hs=(n,e)=>{if(!n||!e)return!1;const t=e.target;if(!t||t.nodeType!==1)return!1;n.pageX;const i=n.pageY,s=C.offset(t),r={},o=15;if(us===i||!e||!e.canInsert&&!e.beforeAfter)return!1;if(e.canInsert&&e.beforeAfter)if(i>=s.top-o&&i<=s.top+o)r.position="top",r.action="before";else if(i>=s.top+o&&i<=s.top+s.height/2)r.position="top",r.action="prepend";else if(i>=s.top+s.height/2&&i<=s.bottom-o)r.position="bottom",r.action="append";else if(i>=s.top+s.height/2&&i>=s.bottom-o)r.position="bottom",r.action="after";else return!1;else if(e.beforeAfter)if(i>=s.top-o&&i<=s.top+s.height/2)r.position="top",r.action="before";else if(i>=s.top+s.height/2&&i<=s.bottom+o)r.position="bottom",r.action="after";else return!1;else if(e.canInsert)if(i>=s.top-o&&i<=s.top+s.height/2)r.position="top",r.action="prepend";else if(i>=s.top+s.height/2&&i<=s.bottom+o)r.position="bottom",r.action="append";else return!1;return r},cs=function(n,e){var t={handle:null,element:null,document,helper:!0},i=this,s={};this.on=function(o,a){s[o]?s[o].push(a):s[o]=[a]},this.dispatch=function(o,a){s[o]&&s[o].forEach(function(l){l.call(this,a)})};var r=function(o){i.settings.document.body.style.scrollBehavior="smooth",i.settings.document.defaultView.scrollTo(0,i.settings.document.defaultView.scrollY+o),i.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=A.extend({},t,n),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(o){this.element=g(o).get(0),this.settings.handle||(this.settings.handle=this.settings.element),this.handle=this.settings.handle,this.handle.attr("draggable","true")},this.setTargets=function(o){this.targets=g(o)},this.addTarget=function(o){this.targets.push(o)},this.init=function(){this.config(),this.draggable()},this.$data={},this.helper=function(o,a){if(this._helper||(this._helper=g().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),o==="create"){var l=g(i.element).offset();this.$data._calcMinus={y:a.pageY-l.offsetTop,x:a.pageX-l.offsetLeft},this._helper.style.top=o.pageY+"px",this._helper.style.left=o.pageX+"px",this._helper.style.width=i.element.offsetWidth+"px",this._helper.style.height=i.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"}else o==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&o&&(this._helper.style.top=o.pageY-this.$data._calcMinus.y+"px",this._helper.style.left=o.pageX-this.$data._calcMinus.x+"px",this.settings.document.documentElement.classList.add("le-dragging"));return this._helper.innerHTML=i.element.outerHTML,this._helper},this.isDragging=!1,this.dropableService=new Bt(e),this.dropPosition=hs,this.draggable=function(){g(this.settings.target).on("dragleave",function(o){i.dropIndicator&&i.dropIndicator.hide()}),g(this.settings.target).on("dragover",function(o){if(i.target=null,i.action=null,o.target!==i.element||!i.element.contains(o.target)){var a=i.dropableService.getTarget(o.target,i.element);if(a&&a!==i.element){const l=i.dropPosition(o,a);l?(i.target=a.target,i.action=l.action,i.dropIndicator&&i.dropIndicator.position(i.target,l.action+"-"+l.position)):i.dropIndicator&&i.dropIndicator.hide()}else i.dropIndicator&&i.dropIndicator.hide();i.isDragging&&(i.dispatch("dragOver",{element:i.element,event:o}),o.preventDefault())}}).on("drop",function(o){i.isDragging&&(o.preventDefault(),i.target&&i.action&&g(i.target)[i.action](i.element),i.dropIndicator&&i.dropIndicator.hide(),i.dispatch("drop",{element:i.element,event:o})),i.dropIndicator&&i.dropIndicator.hide()}),this.handle.on("dragstart",function(o){i.isDragging=!0,i.element.id||(i.element.id="mw-element-"+new Date().getTime()),i.element.classList.add("mw-element-is-dragged"),o.dataTransfer.setData("text",i.element.id),o.dataTransfer.effectAllowed="move",i.helper("create",o),i.dispatch("dragStart",{element:i.element,event:o})}).on("drag",function(o){var a=90,l=5;o.clientY<a&&r(-l),o.clientY>innerHeight-(a+(this._helper?this._helper.offsetHeight+10:0))&&r(l),o.dataTransfer.dropEffect="copy",i.dispatch("drag",{element:i.element,event:o}),i.helper(o)}).on("dragend",function(o){i.isDragging=!1,i.element.classList.remove("mw-element-is-dragged"),i.helper("remove"),i.dispatch("dragEnd",{element:i.element,event:o})})},this.init()};var O,W,Y;class Rt{constructor(e={}){E(this,"x",0);E(this,"y",0);E(this,"w",0);E(this,"h",0);E(this,"listeners",{});x(this,O,{});E(this,"activeHandle",null);E(this,"handles",{});x(this,W,!1);x(this,Y,!0);const t={element:null,document,maxHeight:null,maxWidth:null};this.settings=Object.assign({},t,e),this.element=this.settings.element,this.document=this.settings.document,this.element.classList.add("mw-le-resizable")}on(e,t){f(this,O)[e]?f(this,O)[e].push(t):f(this,O)[e]=[t]}dispatch(e,t){f(this,O)[e]&&f(this,O)[e].forEach(i=>{i.call(this,t)})}mouseMoveHandler(e){const t=e.clientX-this.x,i=e.clientY-this.y;let s=this.h+i,r;this.activeHandle===this.handles.left?r=this.w-t:r=this.w+t,this.settings.maxWidth&&(r=Math.min(r,this.settings.maxWidth)),this.settings.maxHeight&&(s=Math.min(s,this.settings.maxHeight)),this.element.style.width=`${r}px`,this.element.style.height=`${s}px`,e.preventDefault(),this.dispatch("resize",{height:this.element.offsetHeight,width:this.element.offsetWidth})}mouseUpHandler(){for(const e in this.listeners)this.document.removeEventListener(e,this.listeners[e]);this.listeners={},this.activeHandle=null,this.dispatch("resizeStop")}mouseDownHandler(e){this.x=e.clientX,this.y=e.clientY;const t=this.document.defaultView.getComputedStyle(this.element);this.w=parseInt(t.width,10),this.h=parseInt(t.height,10),this.listeners.mousemove=i=>this.mouseMoveHandler(i),this.listeners.mouseup=i=>this.mouseUpHandler(i);for(const i in this.listeners)this.document.addEventListener(i,this.listeners[i]);this.dispatch("resizeStart")}disable(){q(this,W,!0),q(this,Y,!1),this.element.classList.add("mw-le-resizable-disabled")}enable(){q(this,W,!1),q(this,Y,!0),this.element.classList.remove("mw-le-resizable-disabled")}disabled(){return f(this,W)}enabled(){return f(this,Y)}build(){const e=this.document.createElement("span"),t=this.document.createElement("span"),i=this.document.createElement("span"),s=this.document.createElement("span");this.handles.top=e,this.handles.right=t,this.handles.bottom=i,this.handles.left=s,e.className="mw-le-resizer mw-le-resizer-t",t.className="mw-le-resizer mw-le-resizer-r",s.className="mw-le-resizer mw-le-resizer-l",i.className="mw-le-resizer mw-le-resizer-b",this.element.appendChild(e),this.element.appendChild(t),this.element.appendChild(i),this.element.appendChild(s)}mount(){if(!this.element)return this;if(this.element.dataset.resizable)return this;this.element.dataset.resizable=!0,this.build();const e=this.element.querySelectorAll(".mw-le-resizer");return Array.from(e).forEach(t=>{t.addEventListener("mousedown",i=>{this.mouseDownHandler(i),this.activeHandle=t})}),this.dispatch("ready",{height:this.element.offsetHeight,width:this.element.offsetWidth}),this}}O=new WeakMap,W=new WeakMap,Y=new WeakMap;globalThis.Resizable=Rt;const ie=function(n){var e={},t=this;this.settings=A.extend({},e,n);const i={};this.on=(u,c)=>{i[u]?i[u].push(c):i[u]=[c]},this.dispatch=(u,c)=>{i[u]&&i[u].forEach(h=>{h.call(this,c)})};var s=!0,r=null;this.getTarget=function(){return r},this.isVisible=function(){return s},this.show=function(){s=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){s=!1,this.wrapper.addClass("mw-handle-item-hidden"),this.wrapper.removeClass("mw-handle-active")};let o=null;this.setContent=function(u){o&&o.remove(),o=u,this.wrapper.append(o)},this.initDraggable=function(){this.draggable=new cs({handle:this.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},n),this.draggable.on("dragStart",function(){t.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){t.wrapper.removeClass("mw-handle-item-dragging")})};const a=()=>{if(this.settings.document.defaultView.pageYOffset!==void 0)return{x:this.settings.document.defaultView.pageXOffset,y:this.settings.document.defaultView.pageYOffset};{let u,c,h=this.settings.document,w=h.documentElement,v=h.body;return u=w.scrollLeft||v.scrollLeft||0,c=w.scrollTop||v.scrollTop||0,{x:u,y:c}}};this.position=function(u){if(!u)return;const c=C.offset(u),h=a(),w=this.wrapper.get(0).querySelector(".mw-le-handle-menu-buttons");let v;h.y>c.top-70&&(v=h.y-(c.top-70),v>c.height&&(v=c.height+10)),w.style.transition="none",w.style.transform=v?`translateY(${v}px)`:"",setTimeout(()=>w.style.transition="",10),this.wrapper.css({top:c.top,left:c.left,width:c.width,height:c.height})},this.set=function(u,c){if(!u){r=null;return}this.position(u),this.show(),this.draggable.setElement(u),(r!==u||c)&&(r=u,this.dispatch("targetChange",u)),setTimeout(()=>this.wrapper.addClass("mw-handle-active"),1)},this.createHandle=function(){if(this.settings.handle==="self"){var u=g({tag:"div",props:{className:"mw-handle-item-draggable-self"}});this.wrapper.append(u),this.settings.document.addEventListener("mousedown",function(){u.addClass("active")}),this.settings.document.addEventListener("mouseup",function(){u.removeClass("active")}),this.settings.handle=u,this.handle=u,this.wrapper.append(u);return}this.settings.handle?(typeof this.settings.handle=="string"&&(this.settings.handle=g(this.handle)),this.handle=this.settings.handle):(this.handle=g({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))};var l=this.settings.document.defaultView.innerWidth,d=this.settings.document.defaultView.innerHeight;this.resizableMaxWidth=function(u){if(typeof u>"u")return l;l=u},this.resizableMaxHeight=function(u){if(typeof u>"u")return d;d=u},this.findClosestElementByClass=function(u,c=200){let h=[],w=u,v=0;for(;w!==document;){const p=w.parentNode.querySelectorAll(".element,.module");if(p.length>0&&(h=[...p].filter(I=>Math.abs(u.getBoundingClientRect().top-I.getBoundingClientRect().top)<=c),h.length>0)||(w=w.parentNode,v++,v>c/10))break}return h};function m(u,c,h,w){var v=Math.min(h/u,w/c);return{width:u*v,height:c*v}}this.resizable=function(){this.settings.resizable&&(this.resizer=new Rt({element:this.wrapper.get(0),document:this.settings.document}),this.resizer.mount(),this.resizer.on("resize",u=>{const c=this.getTarget();c.nodeName==="IMG"?(u=m(c.offsetWidth,c.offsetHeight,u.width,u.height),c.style.height=u.height+"px",c.style.width=u.width+"px"):(c.style.minHeight=u.height+"px",c.style.width=u.width+"px"),this.set(c)}))},this.createWrapper=function(){this.wrapper=g({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),g(document.body).on("mouseup touchend",function(){t.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide(),this.resizable(),this.settings.document.addEventListener("orientationChange",u=>this.position(this.getTarget())),this.settings.document.addEventListener("resize",u=>this.position(this.getTarget())),this.settings.document.addEventListener("scroll",u=>this.position(this.getTarget()))},ms=function(n){n=n||{},this.tools=C;var e=this,t={exceptions:["mw-handle-item"]};this.settings=A.extend({},t,n),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var i=20,s=function(a){return a%5>=2.5?a/5*5+5:a/5*5},r=function(a,l){a=s(a),l=s(l);for(var d=[],m=a-i,u=a+i,c=l-i,h=l+i;m<u;m+=5)for(;c<=h;c+=5)d.push([m,c]);return d},o=function(a,l){a&&a.parentElement&&l.indexOf(a)===-1&&e.body!==a&&l.push(a)};this.fromEvent=function(a){let l,d;return a.pageX?(l=a.pageX,d=a.pageY):a.targetTouches&&a.targetTouches[0]?(l=a.targetTouches[0].pageX,d=a.targetTouches[0].pageY):a.touches&&a.touches[0]&&(l=a.touches[0].pageX,d=a.touches[0].pageY),e.tools.hasAnyOfClassesOnNodeOrParent(a.target,this.settings.exceptions)?[]:(e.document._test||(e.document._test=document.createElement("div"),e.document._test.style.position="absolute",e.document._test.style.left="10px",e.document._test.style.background="red",e.document._test.style.width="10px",e.document._test.style.height="10px",e.document.body.appendChild(e.document._test)),e.document._test.style.top=a.pageY+"px",this.fromPoint(l,d))},this.fromPoint=function(a,l){var d=[];e.document.defaultView.frameElement&&(l-=e.document.defaultView.scrollY);var m=e.document.elementFromPoint(a,l);if(!m)return[];o(m,d);var u=r(a,l);return u.forEach(function(c){o(e.document.elementFromPoint(c[0],c[1]),d)}),d}},ps=function(n){return C.matches(n,'.row,[class*="row-"]')},fs=function(n){return C.matches(n,'.col,[class*="col-"]')};let M;const yt=function(){return M||(M=document.createElement("div"),M.style.visibility="hidden",M.style.position="absolute",M.style.width="1px",M.style.height="1px",document.body.appendChild(M)),M},se={},gs=function(n){if(!n||n.nodeType===3)return!1;var e=n.nodeName;if(typeof se[e]<"u")return se[e];var t=document.createElement(e);return yt().appendChild(t),se[e]=getComputedStyle(t).display==="block",yt().removeChild(t),se[e]},ws=(n,e,t)=>{n=n||"*";for(var i=e.querySelectorAll(n),s=0,r=[];s<i.length;s++)!fs(i[s])&&!ps(i[s])&&!t.elementAnalyzer.isEdit(i[s])&&gs(i[s])&&r.push(i[s]);return r},vs=n=>{const{backgroundImageHolder:e,editClass:t,moduleClass:i,elementClass:s,allowDrop:r}=n.settings,o=n.root;for(var a=o.querySelectorAll("."+t+"."+e+", ."+t+" ."+e+", ."+t+'[style*="background-image"], .'+t+' [style*="background-image"]'),l=o.querySelectorAll("."+i+n.settings.unEditableModules.join(",."+i)),d=o.querySelectorAll("."+t),m=0,u=0,c=0;m<a.length;m++){var h=a[m];n.elementAnalyzer.isInEdit(h)&&(mw.tools.hasClass(h,i)||mw.tools.addClass(h,t),h.style.backgroundImage||(h.style.backgroundImage="none"))}for(;u<l.length;u++)l[m].classList.remove(i);for(;c<d.length;c++){for(var w=ws(":not(."+s+")",d[c],n),v=0,p=d[c].querySelectorAll("img,."+r),I=0;I<p.length;I++)p[I].classList.add(s);for(;v<w.length;v++)w[v].classList.contains(i)||n.elementAnalyzer.isInEdit(w[v])&&w[v].classList.add(s)}},ys=function(n){this.handles=n,this.dragging=!1;var e=this;this.get=function(t){return this.handles[t]},this.set=function(t,i){this.get(t).set(i)},this.hide=function(t){t&&this.handles[t]?this.handles[t].hide():this.each(function(i,s){s.hide()})},this.hideAllBut=function(t){this.each(function(i,s){i!==t&&s.hide()})},this.show=function(t){t&&this.handles[t]?this.handles[t].show():this.each(function(i,s){s.show()})},this.each=function(t){if(t){var i;for(i in this.handles)t.call(e,i,this.handles[i])}},this.targetIsSelected=function(t,i){if(t){t=t.target||t;var s;for(s in this.handles){if(i&&i===this.handles[s])continue;const r=this.handles[s].getTarget();if(r&&r===t)return!0}return!1}},this.targetIsOrInsideHandle=function(t){if(t){t=t.target||t;var i;for(i in this.handles)if(this.handles[i].wrapper.get(0)===t||this.handles[i].wrapper.get(0).contains(t))return!0;return!1}},this.init=function(){this.each(function(t,i){i.draggable.on("dragStart",function(){e.dragging=!0,e.hideAllBut(t)}),i.draggable.on("dragEnd",function(){e.dragging=!1,i.show()})})},this.init()},bs=function(n){n=n||{};const e={template:"default"};let t={};this.settings=A.extend({},e,n),this._indicator=null;const i={};this.on=function(l,d){i[l]?i[l].push(d):i[l]=[d]},this.dispatch=function(l,d){i[l]&&i[l].forEach(function(m){m.call(this,d)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,t={})},this.show=function(){console.log(this.visible),this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const s=["before-top","prepend-top","after-bottom","append-bottom"],r="mw-drop-indicator-position-",o=s.map(function(l){return r+l});let a=null;this.position=function(l,d){if(!(!l||!d)&&!(t.target===l&&t.position===d)){t.target=l,t.position=d,a!==d&&(this._indicator.removeClass(o),a=d,this._indicator.addClass(r+d));var m=C.offset(l);this._indicator.css({height:m.height,left:m.left,top:m.top,width:m.width}),this.show()}},this.make=function(){this._indicator=g(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},xs=(n,e,t)=>{!n||!e||(n=n.isMWElement?n.get(0):n,n.dataset.tooltip=e,n.title=e,n.dataset.tooltipposition=t||"top-center")},X=function(n){this.options=n||{};var e=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=g({props:{className:"mw-le-handle-menu",id:e.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=g({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var t,i,s,r=function(){t=g({props:{className:"mw-le-handle-menu-title"}}),i=g({props:{className:"mw-le-handle-menu-title-text"}}),s=g({props:{className:"mw-le-handle-menu-title-icon"}}),t.append(i),t.append(s),e.root.prepend(t),e.title=t},o=null;this.getTarget=function(){return o},this.setTarget=function(a){o=a;for(var l=0;l<this.buttons.length;l++)this.buttons[l].config.onTarget&&this.buttons[l].config.onTarget(a,this.buttons[l].button.get(0),e.options.rootScope)},this.setTitle=function(a,l){i.html(a||""),s.html(l||"")},this.buttons=[],this.buildButtons=function(a,l){l=l||this.buttonsHolder,a=a||this.options.buttons,a.forEach(function(d){l.append(e.button(d))})},this.button=function(a){var l=g({props:{className:"mw-le-handle-menu-button"+(a.className?" "+a.className:"")}}),d={props:{className:"mw-le-handle-menu-button-content"}},m=g(d);if(a.title&&xs(m,a.title),a.icon){var u=g({props:{className:"mw-le-handle-menu-button-icon",innerHTML:a.icon}});m.append(u)}if(a.text){var c=g({props:{className:"mw-le-handle-menu-button-text",innerHTML:a.text}});m.append(c)}if(l.append(m),this.buttons.push({button:l,config:a}),a.menu){var h=g({props:{className:"mw-le-handle-menu-button-sub-menu"}});l.append(h),e.buildButtons(a.menu,h),l.on("click",function(){this.classList.toggle("sub-menu-active")})}else typeof a.action=="function"&&l.on("click",function(){a.action(e.getTarget(),l.get(0))});return l},this.init=function(){this.create(),r(),this.setTitle(e.options.title,e.options.icon),this.buildButtons(),this.hide()},this.init()},Cs=(n,e)=>{const t=g({props:{className:"le-dialog-footer"}}),i=g({props:{className:"le-btn le-btn-primary le-dialog-footer-ok",innerHTML:n||"OK"}}),s=g({props:{className:"le-btn le-dialog-footer-cancel"}});return t.append(s),t.append(i),{ok:i,cancel:s,footer:t}};var D,G,Ie;class Pt{constructor(e){x(this,G);x(this,D,{});e=e||{};const t={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},t,e),this.build(),setTimeout(i=>this.open())}on(e,t){f(this,D)[e]?f(this,D)[e].push(t):f(this,D)[e]=[t]}dispatch(e,t){f(this,D)[e]&&f(this,D)[e].forEach(i=>{i.call(this,t)})}build(){this.root=g({props:{className:`le-dialog ${typeof this.settings.position=="string"?this.settings.position:""}`}});var e=g({props:{className:"le-dialog-close"}});e.on("click",()=>{this.remove()}),this.container=g({props:{className:"le-dialog-container"},content:this.settings.content}),this.root.append(e),this.root.append(this.container),this.settings.footer&&this.root.append(this.settings.footer.root||this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this.settings.closeOnEscape&&this.settings.document.addEventListener("keydown",H(this,G,Ie)),this.settings.overlay&&this.overlay()}open(){if(this.settings.position.nodeName&&this.settings.position.ownerDocument===this.settings.document){var e=this.settings.position;e.ownerDocument;var t=e.ownerDocument.defaultView,i=e.getBoundingClientRect(),s=i.top+t.scrollY,r=i.left+e.offsetWidth+t.scrollX,o=this.root.get(0);s+o.offsetHeight>t.innerHeight+t.scrollY&&(s-=s+o.offsetHeight-(t.innerHeight+t.scrollY)),r+o.offsetWidth>t.innerWidth&&(r-=r+o.offsetWidth-t.innerWidth),this.root.css({top:s,left:r,position:this.settings.mode})}this.root.addClass("le-dialog-opened")}remove(){this.root.on("transitionend",()=>{this.root.remove(),this.overlay&&this.overlay.remove()}),this.root.removeClass("le-dialog-opened"),this.settings.closeOnEscape&&this.settings.document.removeEventListener("keydown",H(this,G,Ie)),this.dispatch("close")}overlay(){this.overlay=g({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}D=new WeakMap,G=new WeakSet,Ie=function(e){(e.key==="Escape"||e.keyCode===27)&&this.remove()};const Vt=function(n,e){const t=Cs(),i=new Pt({content:n,footer:t.footer.get(0),position:"centered"});return t.cancel.on("click",function(){i.remove()}),t.ok.on("click",function(){e&&e.call(),i.remove()}),i},Ls=function(n){this.root=g({props:{id:"mw-handle-item-element-root"}});const e=[{title:"Duplicate",text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg>',className:"mw-handle-clone-button",onTarget:function(t,i){i.style.display=t.classList.contains("cloneable")?"":"none"},action:function(t){g(t).after(t.outerHTML)}},{title:"Move backward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20 13.5C20 17.09 17.09 20 13.5 20H6V18H13.5C16 18 18 16 18 13.5S16 9 13.5 9H7.83L10.91 12.09L9.5 13.5L4 8L9.5 2.5L10.92 3.91L7.83 7H13.5C17.09 7 20 9.91 20 13.5Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(t,i){const s=t.classList.contains("cloneable"),r=t.previousElementSibling;i.style.display=s&&r?"":"none"},action:function(t){const i=t.previousElementSibling;i&&(i.before(t),n.elementHandle.set(t))}},{title:"Move forward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M10.5 18H18V20H10.5C6.91 20 4 17.09 4 13.5S6.91 7 10.5 7H16.17L13.08 3.91L14.5 2.5L20 8L14.5 13.5L13.09 12.09L16.17 9H10.5C8 9 6 11 6 13.5S8 18 10.5 18Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(t,i){const s=t.classList.contains("cloneable"),r=t.nextElementSibling;i.style.display=s&&r?"":"none"},action:function(t){const i=t.nextElementSibling;i&&(i.after(t),n.elementHandle.set(t))}}];this.menu=new X({id:"mw-handle-item-element-menu",title:"Element",buttons:[{title:"Edit",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',className:"mw-handle-add-button",onTarget:function(t,i){},action:function(t){mw.app.editor.dispatch("editNodeRequest",t)}},{title:"Insert module",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z" /></svg>',className:"mw-handle-add-button",onTarget:function(t,i){},action:function(t){mw.app.editor.dispatch("insertModuleRequest",t)}},{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,i){},action:function(t){n.dialog({})}},...e,{title:n.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(t){Vt(g("<span>Are you sure</span>"),()=>{t.remove(),n.elementHandle.hide()})}}]}),this.menu.show(),this.root.append(this.menu.root)},Es=function(n){this.root=g({props:{id:"mw-handle-item-module-root",contentEditable:!1}});var e=new X({id:"mw-handle-item-element-menu-default",title:"Module",rootScope:n,buttons:[{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',action:()=>{const t=mw.app.get("liveEdit").handles.get("module").getTarget();mw.app.editor.dispatch("onModuleSettingsRequest",t);var i=t.dataset.type||t.getAttribute("type");i=i.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+i,t)}}]});this.menu=new X({id:"mw-handle-item-element-menu",title:"Module",rootScope:n,buttons:[]}),this.menu.show(),e.show(),this.root.append(this.menu.root),this.root.append(e.root)},Ns=function(n){this.root=g({props:{id:"mw-handle-item-layout-root"}});const e={};this.on=(t,i)=>{e[t]?e[t].push(i):e[t]=[i]},this.dispatch=(t,i)=>{e[t]&&e[t].forEach(s=>{s.call(this,i)})},this.menu=new X({id:"mw-handle-item-layout-menu",title:n.lang("Layout"),rootScope:n,buttons:[{title:n.lang("Settings"),text:"",icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 13.3 15.9" xml:space="preserve"><path d="M8.2,2.4L11,5.1l-8.2,8.2H0v-2.8L8.2,2.4z M11.8,4.3L9,1.6l1.4-1.4C10.5,0.1,10.7,0,10.9,0c0.2,0,0.4,0.1,0.5,0.2l1.7,1.7c0.1,0.1,0.2,0.3,0.2,0.5S13.3,2.8,13.1,3L11.8,4.3z"/><rect y="14.5" width="12" height="1.4"/></svg>',className:"mw-handle-insert-button",menu:[{title:n.lang("Add something"),text:n.lang("Add something"),icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" version="1.1" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button"},{title:n.lang("Settings1212"),text:"Do alert",className:"mw-handle-insert-button"}]},{title:n.lang("Clone"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>',className:"mw-handle-insert-button",action:function(t,i,s){var r=document.createElement("div");r.innerHTML=t.outerHTML,g("[id]",r).each(function(){this.id="le-id-"+new Date().getTime()}),g(t).after(r.innerHTML);var o=t.nextElementSibling;mw.reload_module(o,function(){s.statemanager.record({target:mw.tools.firstParentWithClass(t,"edit"),value:parent.innerHTML})}),o.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})}},{title:n.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,i){t.nextElementSibling===null?i.style.display="none":i.style.display=""},action:function(t,i){var s=t.nextElementSibling;if(s){var r=t.getBoundingClientRect(),o=s.getBoundingClientRect(),a=0;r.top<o.top&&(a=-(r.top-o.top)),t.classList.add("mw-le-target-to-animate"),s.classList.add("mw-le-target-to-animate"),t.style.transform="translateY("+a+"px)",s.style.transform="translateY("+-a+"px)",setTimeout(function(){s.parentNode.insertBefore(t,s.nextSibling),t.classList.remove("mw-le-target-to-animate"),s.classList.remove("mw-le-target-to-animate"),t.style.transform="",s.style.transform="",t.scrollIntoView({behavior:"smooth",block:"start",inline:"start"}),n.layoutHandle.set(t,!0)},300)}}},{title:n.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,i,s){t.previousElementSibling===null?i.style.display="none":i.style.display=""},action:function(t,i){var s=t.previousElementSibling;if(s){var r=t.getBoundingClientRect(),o=s.getBoundingClientRect(),a=0;r.top>o.top&&(a=-(r.top-o.top)),t.classList.add("mw-le-target-to-animate"),s.classList.add("mw-le-target-to-animate"),t.style.transform="translateY("+a+"px)",s.style.transform="translateY("+-a+"px)",setTimeout(function(){s.parentNode.insertBefore(t,s),t.classList.remove("mw-le-target-to-animate"),s.classList.remove("mw-le-target-to-animate"),t.style.transform="",s.style.transform="",n.layoutHandle.set(t,!0),t.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})},300)}}},{title:n.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path  d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(t,i,s){Vt("Are you sure",function(){t.remove()})}}]}),this.addButtons=function(){var t="Add Layout",i=s=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+s.charAt(0).toUpperCase()+s.slice(1))};this.plusTop=g({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:n.lang(t)}}),this.plusBottom=g({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:n.lang(t)}}),this.plusTop.on("click",function(){i("top")}),this.plusBottom.on("click",function(){i("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.menu.show(),this.addButtons(),this.root.append(this.menu.root)},bt={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},ks=(n,e)=>((!e||!bt[e])&&(e="en"),bt[e][n]||n),Hs=function(n){this.root=g({props:{id:"mw-handle-interaction-item-element-root"}}),this.menu=new X({id:"mw-handle-item-element-menu",title:"Element",buttons:[]}),this.menu.show(),this.root.append(this.menu.root)};class Ss{constructor(e){const t=this,i={};this.on=(h,w)=>{i[h]?i[h].push(w):i[h]=[w]},this.dispatch=(h,w)=>{i[h]&&i[h].forEach(v=>{v.call(this,w)})},this.paused=!1;var s={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=A.extend({},s,e),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(h){return ks(h,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new Bt(this.settings),this.dropIndicator=new bs(this.settings);const r=new Ls(this),o=new Es(this),a=new Ns(this);this.elementHandleContent=r,this.moduleHandleContent=o,this.layoutHandleContent=a,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.dialog=function(h){h||(h={});var w={document:window.top.document,position:o.menu.getTarget(),mode:"absolute"};t.pause();const v=new Pt(A.extend({},w,h));return v.on("close",function(){t.play()}),v};var l=this.elementHandle=new ie({...this.settings,dropIndicator:this.dropIndicator,content:r.root,handle:g(".mw-handle-drag-button",r.root.get(0)),handle:"self",document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});this.isResizing=!1,l.resizer.on("resizeStart",h=>this.isResizing=!0),l.resizer.on("resizeStop",h=>this.isResizing=!1),l.on("targetChange",function(h){r.menu.setTarget(h),h.className.includes("col-")?l.resizer.disable():l.resizer.enable()}),this.moduleHandle=new ie({...this.settings,dropIndicator:this.dropIndicator,content:o.root,handle:o.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});var d=this.moduleHandle;this.getModuleQuickSettings=h=>new Promise(w=>{w(mw.quickSettings[h]),this.dispatch("moduleQuickSettings",{module:h})}),d.on("targetChange",function(h){t.getModuleQuickSettings(h.dataset.type).then(function(w){o.menu.root.remove(),o.menu=new X({id:"mw-handle-item-element-menu",title:h.dataset.type,rootScope:t,buttons:w?w.mainMenu||[]:[],data:{target:h}}),o.menu.setTarget(h),o.menu.show(),o.root.append(o.menu.root)})}),this.layoutHandle=new ie({...this.settings,dropIndicator:this.dropIndicator,content:a.root,handle:a.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var m=this.layoutHandle,u=t.lang("Layout");a.menu.setTitle(u),m.on("targetChange",function(h){a.menu.setTarget(h),a.menu.setTitle(u),t.elementAnalyzer.isEditOrInEdit(h)?(a.plusTop.show(),a.plusBottom.show()):(a.plusTop.hide(),a.plusBottom.hide())}),a.handle=m,o.handle=d,r.handle=l;const c=new Hs;this.interactionHandle=new ie({...this.settings,content:c.root,document:this.settings.document,resizable:!1,className:"mw-handle-item-interaction-handle"}),this.interactionHandle.menu=c.menu,this.handles=new ys({element:l,module:d,layout:m,interactionHandle:this.interactionHandle}),this.observe=new ms(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}init(){this.settings.mode==="auto"&&setInterval(()=>vs(this),1e3);const e=i=>{if(this.handles.targetIsOrInsideHandle(i))return;const s=this.observe.fromEvent(i);let r=s[0];if(r.nodeName!=="IMG"&&(r=C.firstBlockLevel(s[0])),this.handles.get("element").set(null),this.handles.hide(),r){const o=this.elementAnalyzer.getType(r);o&&o!=="edit"&&(this.handles.set(o,r),o==="element"?this.handles.hide("module"):o==="module"?this.handles.hide("element"):o==="layout"?this.handles.set("layout",layout):this.handles.hide())}else{const o=C.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);o&&this.handles.set("layout",o)}};let t;t="mousedown touchstart",g(this.root).on("mousemove",i=>{if(this.paused||this.isResizing){this.interactionHandle.hide();return}if(this.handles.targetIsOrInsideHandle(i)){this.interactionHandle.hide();return}const s=this.observe.fromEvent(i),r=C.firstParentOrCurrentWithAnyOfClasses(s[0],["element","module","cloneable"]),o=C.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);let a=!1;if(o){const d=this.handles.get("element").getTarget(),m=this.handles.get("module").getTarget();o.contains(d)&&(a=!0),o.contains(m)&&(a=!0),a?this.handles.hide("layout"):this.handles.set("layout",o)}if(r&&!this.handles.targetIsSelected(r,this.interactionHandle)&&!r.classList.contains("module-layouts")){var l="";r.dataset.mwTitle?l=r.dataset.mwTitle:r.dataset.type?l=r.dataset.type:r.nodeName==="P"?l=this.lang("Paragraph"):/(H[1-6])/.test(r.nodeName)?l=this.lang("Title")+" "+r.nodeName.replace(/^\D+/g,""):r.nodeName==="IMG"||r.nodeName==="IMAGE"?l=this.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(r.nodeName)?l=this.lang("Title "+r.nodeName.replace("H","")):["DIV","MAIN","SECTION"].includes(r.nodeName)?l=this.lang("Block"):l=this.lang("Text"),this.interactionHandle.menu.setTitle(l),this.interactionHandle.show(),this.interactionHandle.set(r)}else this.interactionHandle.hide()}),g(this.root).on(t,i=>{this.paused||e(i)})}}globalThis.LiveEdit=Ss;const Ps=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:none}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:999;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:none}.mw-handle-item.mw-le-resizable{position:absolute}.mw-handle-item.mw-handle-item-interaction-handle{pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;pointer-events:none}.mw-draggable-helper .mw-element-is-dragged{opacity:1;pointer-events:none}.mw-le-handle-menu{position:absolute;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;border-radius:7px;border:1px solid transparent;padding:3px 12px;display:inline-flex;align-items:center;background-color:#fff;pointer-events:all;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;position:absolute;top:-40px;left:-3px;transition:.2s;opacity:0;transform:translateY(10px);z-index:2}.mw-le-handle-menu .mw-le-handle-menu-buttons:empty{display:none!important}.mw-le-handle-menu *{vertical-align:middle}.mw-handle-item.mw-handle-active .mw-le-handle-menu .mw-le-handle-menu-buttons{opacity:1;transform:translateY(0)}#mw-handle-item-element-menu{top:-22px;left:-3px}#mw-handle-item-layout-menu{top:5px;right:5px;left:auto}#mw-handle-item-layout-menu .mw-le-handle-menu-buttons{left:auto;right:5px;top:5px}#mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-drag-button{cursor:grab}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:none;align-items:center;justify-content:center;padding:0 5px;height:20px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:grab;background-color:#0078ff;color:#fff}.mw-handle-item-interaction-handle .mw-le-handle-menu-title{display:inline-flex}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#0078ff;color:#fff;border-radius:7px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#016ce6}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}.mw-handle-item-draggable-self{position:absolute;pointer-events:all;inset:0;z-index:10;display:none}.mw-handle-item-draggable-self.active{display:block}.mw-handle-item.mw-le-resizable .mw-le-resizer:before,.mw-handle-item.mw-le-resizable .mw-le-resizer:after{position:absolute;width:9px;height:9px;background-color:#fff;border:2px solid #2a84fb;content:""}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before{top:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{top:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{left:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before{bottom:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{bottom:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{top:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before{left:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{left:calc(50% - 4px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before{right:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{right:calc(50% - 5px)}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizable.mw-le-resizable-disabled .mw-le-resizer{display:none}.mw-le-resizer{position:absolute;pointer-events:all}.mw-le-resizer-r{cursor:e-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-l{cursor:e-resize;height:100%;left:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:n-resize;height:5px;left:0;width:100%}.mw-le-resizer-t{top:0;cursor:n-resize;height:5px;left:0;width:100%}mw-le-element{display:block;line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;font-family:Verdana,sans-serif;box-sizing:border-box}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}
`;var T,z,P,K,Be,Q,Re,ue,jt;class qt{constructor(e={}){x(this,K);x(this,Q);x(this,ue);x(this,T,null);x(this,z,{});E(this,"selectedCategory","");x(this,P,[]);E(this,"root",null);const t={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},t,e),this.document=this.settings.document}on(e,t){f(this,z)[e]?f(this,z)[e].push(t):f(this,z)[e]=[t]}dispatch(e,t){f(this,z)[e]&&f(this,z)[e].forEach(i=>{i.call(this,t)})}getData(){return f(this,T)}setData(e,t=!0){q(this,T,e);let i=0,s=f(this,T).length;for(;i<s;i++)typeof f(this,T)[i].categories=="string"&&(f(this,T)[i].categories=f(this,T)[i].categories.split(",").map(r=>r.trim()));t&&this.dispatch("dataChanged",f(this,T))}prepareCategories(){const e=[],t=this.getData();let i=0,s=t.length;for(;i<s;i++){let o=t[i].categories||"",a=0,l=o.length;for(;a<l;a++){const d=o[a].trim();e.indexOf(d)===-1&&e.push(d)}}e.sort(),this.categories=e}createCategoriesMenu(){const e=this.document.createElement("ul");this.prepareCategories(),e.className="modules-list-categories",e.innerHTML=this.categories.map(t=>`<li data-category="${t}">${t}</li>`).join(""),e.innerHTML=`<li data-category="">All categories</li> ${e.innerHTML}`,e.addEventListener("click",t=>{t.target.nodeName==="LI"&&this.selectCategory(t.target.dataset.category)}),this.categoriesNavigation=e,this.rootShadow.appendChild(e),this.on("categorySelect",t=>{const i=e.querySelectorAll("[data-category]");for(const s of i)s.classList[s.dataset.category===t?"add":"remove"]("active")})}selectCategory(e=""){this.selectedCategory=e,this.search(e),this.dispatch("categorySelect",e)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let e=document.createElement("style");e.textContent=this.settings.css,this.rootShadow.appendChild(e)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const e=this.getData();let t=0,i=e.length;const s={miscellaneous:H(this,Q,Re).call(this,"miscellaneous")};for(;t<i;t++)(e[t].categories||["miscellaneous"]).forEach(o=>{s[o]||(s[o]=H(this,Q,Re).call(this,o));const a=H(this,K,Be).call(this,e[t]);f(this,P).push(a),s[o].appendChild(a),s[o].__$hasNodes=!0});for(const r in s)s[r].__$hasNodes&&this.modulesList.appendChild(s[r]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const e=this.getData();let t=0,i=e.length;for(;t<i;t++){const s=H(this,K,Be).call(this,e[t]);f(this,P).push(s),this.modulesList.appendChild(s)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(e){e.nodeName&&(e.style.display="none")}showItem(e){e.nodeName&&(e.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",e=>this.search(void 0,this.searchField.value)),this.on("categorySelect",e=>{this.searchField.value=""})}async search(e="",t=""){if(this.settings.searchMode==="local")return H(this,ue,jt).call(this,e,t)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(e=>{e(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(e=>{e(this)})}}T=new WeakMap,z=new WeakMap,P=new WeakMap,K=new WeakSet,Be=function(e){e.locked=e.description.includes("a");const t=this.document.createElement("div");return t.className="modules-list-block-item modules-list-block-item-is-locked-"+e.locked,t.__$data=e,t.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${e.icon||e.screenshot||e.image})"></div>
            <div class="modules-list-block-item-title">${e.name||e.title}</div>
            <div class="modules-list-block-item-description">${e.description}</div>
            ${e.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,t.addEventListener("click",i=>{i.stopPropagation(),t.__$data.locked?this.dispatch("lockedModuleSelected",{data:e,element:t}):this.dispatch("moduleSelected",{data:e,element:t})}),t.$data=e,t},Q=new WeakSet,Re=function(e){const t=this.document.createElement("div");return t.className="modules-list-block-category-section",t.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+e+"</h5></div>",t.__$hasNodes=!1,t},ue=new WeakSet,jt=async function(e,t){return e&&(e=e.trim().toLowerCase()),t&&(t=t.trim().toLowerCase()),new Promise(i=>{let s=0,r=f(this,P).length,o=0;for(;s<r;s++){const a=f(this,P)[s],l=a.$data;if(e&&l.categories.indexOf(e)===-1){this.hideItem(a);continue}if(t&&(l.name||l.title).toLowerCase().indexOf(t)===-1){this.hideItem(a);continue}this.showItem(a),o++}console.log(t,e),this.modulesListNoResultsNode.style.display=o===0?"":"none",i()})};const ae=[],$t=function(n){ae.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+n}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",e=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(n){(n.key==="Escape"||n.keyCode===27)&&ae.length>0&&(ae[0].remove(),ae.splice(0,1))});var Pe,xt=function(n){var e=new qt({data:Pe});e.create().then(function(){var t=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),i=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),s=mw.element({props:{className:"mw-le-layouts-dialog-col"}});t.append(i),t.append(s),mw.element(e.root).append(t),i.append(e.searchBlock);var r=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});i.append(r),i.append(e.categoriesNavigation),s.append(e.modulesList),n.append(e.root)})};const Ts=()=>{var n=new $t("mw-le-layouts-dialog"),e=n.dialog;if(Pe){xt(e);return}mw.spinner({element:e.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(t){return t.json()}).then(function(t){Pe=t,xt(e),mw.spinner({element:e.get(0),decorate:!0}).remove()})};var Ve,Ct=function(n){var e=new qt({data:Ve});e.createCategorized().then(function(){n.append(e.root)})};const As=()=>{var n=new $t("mw-le-modules-dialog"),e=n.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var t=mw.$(this).attr("data-module-name"),i={class:this.className};t==="layout"&&(i.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,t,i,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),Ve?Ct(e):(mw.spinner({element:e.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(t){return t.json()}).then(function(t){Ve=t,Ct(e),mw.spinner({element:e.get(0),decorate:!0}).remove()}))},_s={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return As()},insertLayout:function(){return Ts()}},Ms={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await de.get(route("api.module.list")+"?layout_type=module").then(n=>{this.modulesListData=n.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(n){if(this.modulesSkinsData[n])return this.modulesSkinsData[n];if(await de.get(route("api.module.getSkins")+"?module="+n).then(e=>{this.modulesSkinsData[n]=e.data}),this.modulesSkinsData[n])return this.modulesSkinsData[n]}},Os={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await de.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(n=>{this.layoutsListData=n.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var n="layouts";if(this.layoutSkinsData[n])return this.layoutSkinsData[n];if(await de.get(route("api.module.getSkins")+"?module="+n).then(e=>{this.layoutSkinsData[n]=e.data}),this.layoutSkinsData[n])return this.layoutSkinsData[n]}};class Ds extends he{constructor(){super()}onRegister(){}}class zs extends he{selectIcon(e){var t=$(e)[0];mw.iconLoader().init();var i=mw.iconPicker({iconOptions:!1});i.target=document.createElement("i"),i.on("select",function(s){s.render(),t.value=i.target.outerHTML;var r=new Event("input");t.dispatchEvent(r),i.dialog("hide")}),i.dialog()}removeIcon(e){var t=$(e)[0];t.value="";var i=new Event("input");t.dispatchEvent(i)}}class Is extends he{constructor(){super()}selectLink(e){var t=new(mw.top()).LinkEditor({mode:"dialog",controllers:[{type:"url",config:{text:!1,target:!1}},{type:"page",config:{text:!1,target:!1}},{type:"post",config:{text:!1,target:!1}},{type:"file",config:{text:!1,target:!1}},{type:"email",config:{text:!1,target:!1}},{type:"layout",config:{text:!1,target:!1}}]});mw.$(e)&&t.setValue({url:mw.$(e).val()||""});var i=this;t.promise().then(function(s){if(s){var r={},o=s.url;r.url=o,s.data&&s.data.id&&(r.id=s.data.id,s.data.type&&s.data.type==="category"?r.type="category":(s.data.type&&s.data.type==="page"||s.data.content_type)&&(r.type="content")),i.dispatch("selected",r)}})}}mw.app=new Wt;mw.app.register("commands",_s);mw.app.register("modules",Ms);mw.app.register("layouts",Os);mw.app.register("keyboard",Ds);mw.app.register("iconPicker",zs);mw.app.register("linkPicker",Is);export{Rs as E,Ss as L,he as M,de as a,Ps as l};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
