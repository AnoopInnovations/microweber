var Su=Object.defineProperty;var Tu=(e,t,i)=>t in e?Su(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i;var xt=(e,t,i)=>(Tu(e,typeof t!="symbol"?t+"":t,i),i),Lo=(e,t,i)=>{if(!t.has(e))throw TypeError("Cannot "+i)};var ge=(e,t,i)=>(Lo(e,t,"read from private field"),i?i.call(e):t.get(e)),At=(e,t,i)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,i)},Si=(e,t,i,r)=>(Lo(e,t,"write to private field"),r?r.call(e,i):t.set(e,i),i);var Cn=(e,t,i)=>(Lo(e,t,"access private method"),i);var Bt;class Di{constructor(){At(this,Bt,{})}on(t,i){ge(this,Bt)[t]?ge(this,Bt)[t].push(i):ge(this,Bt)[t]=[i]}off(t,i){if(ge(this,Bt)[t])if(typeof i=="function"){const r=ge(this,Bt)[t].indexOf(i);if(r===-1)return;ge(this,Bt)[t].splice(r,1)}else ge(this,Bt)[t]=[]}dispatch(t,i){ge(this,Bt)[t]&&ge(this,Bt)[t].forEach(function(r){r.call(this,i)})}emit(t,i){return this.dispatch(t,i)}}Bt=new WeakMap;var zt,Ti,Rr;class Au extends Di{constructor(){super(...arguments);At(this,Ti);At(this,zt,{})}call(i,r){for(let s in ge(this,zt))ge(this,zt)[s][i]&&Cn(this,Ti,Rr).call(this,i,ge(this,zt)[s],r)}get(i){return ge(this,zt)[i]}getModules(){return ge(this,zt)}register(i,r){let s;typeof r=="function"?s=new r:s=r,ge(this,zt)[i]=s,this[i]=s,Cn(this,Ti,Rr).call(this,"onRegister",s),this.dispatch("register")}remove(i){let r;if(typeof i=="string"&&(r=i,i=this.get(i)),!r){for(let s in ge(this,zt))if(ge(this,zt)[s]===i){r=s;break}}delete ge(this,zt)[r],delete this[r],Cn(this,Ti,Rr).call(this,"onDestroy",i),this.dispatch("remove")}}zt=new WeakMap,Ti=new WeakSet,Rr=function(i,r,s){!i||!r||!r[i]||(i=r[i],i(s))};mw.require("editor.js");mw.require("css_parser.js");const Xh=function(){var e=document.querySelector("#mw-live-edit-editor"),t=function(){var h={};this.on=function(b,w){h[b]?h[b].push(w):h[b]=[w]},this.dispatch=function(b,w){h[b]&&h[b].forEach(function(S){S.call(this,w)})},this.provide=function(b){this.dispatch("change",b.map(function(w){return{label:w,value:w}}))}},i=new t;window.fontFamilyProvider=i;const r=mw.app.get("canvas").getFrame();r.contentWindow.fontFamilyProvider=i;const s=[[{group:{icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5,4V7H10.5V19H13.5V7H19V4H5Z" /></svg>',controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],a=mw.Editor({document:r.contentWindow.document,executionDocument:r.contentWindow.document,actionWindow:r.contentWindow,element:e,mode:"document",notEditableClasses:["module"],regions:".edit",skin:"le2",editMode:"liveedit",controls:null,smallEditor:s,smallEditorPositionX:"left",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:i,forced:!0});e.innerHTML="",e.appendChild(a.wrapper);var u=a.storage.get(a.settings.id+"-small-editor-pinned");typeof u>"u"&&typeof a.smallEditorApi<"u"&&a.smallEditorApi.pin(),mw.app.register("richTextEditor",a),mw.app.register("richTextEditorAPI",a.api)};var wa=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Kh(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Ou={exports:{}};(function(e,t){(function(i,r){e.exports=r()})(wa,function(){return function(i){function r(a){if(s[a])return s[a].exports;var u=s[a]={exports:{},id:a,loaded:!1};return i[a].call(u.exports,u,u.exports,r),u.loaded=!0,u.exports}var s={};return r.m=i,r.c=s,r.p="dist/",r(0)}([function(i,r,s){function a(ue){return ue&&ue.__esModule?ue:{default:ue}}var u=Object.assign||function(ue){for(var Ce=1;Ce<arguments.length;Ce++){var Je=arguments[Ce];for(var nt in Je)Object.prototype.hasOwnProperty.call(Je,nt)&&(ue[nt]=Je[nt])}return ue},h=s(1),b=(a(h),s(6)),w=a(b),S=s(7),D=a(S),P=s(8),O=a(P),T=s(9),I=a(T),j=s(10),H=a(j),he=s(11),Ae=a(he),xe=s(14),Ee=a(xe),V=[],c=!1,re={offset:120,delay:0,easing:"ease",duration:400,disable:!1,once:!1,startEvent:"DOMContentLoaded",throttleDelay:99,debounceDelay:50,disableMutationObserver:!1},ae=function(){var ue=arguments.length>0&&arguments[0]!==void 0&&arguments[0];if(ue&&(c=!0),c)return V=(0,Ae.default)(V,re),(0,H.default)(V,re.once),V},Me=function(){V=(0,Ee.default)(),ae()},Q=function(){V.forEach(function(ue,Ce){ue.node.removeAttribute("data-aos"),ue.node.removeAttribute("data-aos-easing"),ue.node.removeAttribute("data-aos-duration"),ue.node.removeAttribute("data-aos-delay")})},Z=function(ue){return ue===!0||ue==="mobile"&&I.default.mobile()||ue==="phone"&&I.default.phone()||ue==="tablet"&&I.default.tablet()||typeof ue=="function"&&ue()===!0},ne=function(ue){re=u(re,ue),V=(0,Ee.default)();var Ce=document.all&&!window.atob;return Z(re.disable)||Ce?Q():(re.disableMutationObserver||O.default.isSupported()||(console.info(`
      aos: MutationObserver is not supported on this browser,
      code mutations observing has been disabled.
      You may have to call "refreshHard()" by yourself.
    `),re.disableMutationObserver=!0),document.querySelector("body").setAttribute("data-aos-easing",re.easing),document.querySelector("body").setAttribute("data-aos-duration",re.duration),document.querySelector("body").setAttribute("data-aos-delay",re.delay),re.startEvent==="DOMContentLoaded"&&["complete","interactive"].indexOf(document.readyState)>-1?ae(!0):re.startEvent==="load"?window.addEventListener(re.startEvent,function(){ae(!0)}):document.addEventListener(re.startEvent,function(){ae(!0)}),window.addEventListener("resize",(0,D.default)(ae,re.debounceDelay,!0)),window.addEventListener("orientationchange",(0,D.default)(ae,re.debounceDelay,!0)),window.addEventListener("scroll",(0,w.default)(function(){(0,H.default)(V,re.once)},re.throttleDelay)),re.disableMutationObserver||O.default.ready("[data-aos]",Me),V)};i.exports={init:ne,refresh:ae,refreshHard:Me}},function(i,r){},,,,,function(i,r){(function(s){function a(Z,ne,ue){function Ce(ke){var He=ct,Be=_t;return ct=_t=void 0,Ue=ke,tt=Z.apply(Be,He)}function Je(ke){return Ue=ke,Ge=setTimeout(yt,ne),Nt?Ce(ke):tt}function nt(ke){var He=ke-dt,Be=ke-Ue,K=ne-He;return Qe?Me(K,We-Be):K}function it(ke){var He=ke-dt,Be=ke-Ue;return dt===void 0||He>=ne||He<0||Qe&&Be>=We}function yt(){var ke=Q();return it(ke)?$t(ke):void(Ge=setTimeout(yt,nt(ke)))}function $t(ke){return Ge=void 0,je&&ct?Ce(ke):(ct=_t=void 0,tt)}function Pt(){Ge!==void 0&&clearTimeout(Ge),Ue=0,ct=dt=_t=Ge=void 0}function Wt(){return Ge===void 0?tt:$t(Q())}function bt(){var ke=Q(),He=it(ke);if(ct=arguments,_t=this,dt=ke,He){if(Ge===void 0)return Je(dt);if(Qe)return Ge=setTimeout(yt,ne),Ce(dt)}return Ge===void 0&&(Ge=setTimeout(yt,ne)),tt}var ct,_t,We,tt,Ge,dt,Ue=0,Nt=!1,Qe=!1,je=!0;if(typeof Z!="function")throw new TypeError(P);return ne=S(ne)||0,h(ue)&&(Nt=!!ue.leading,Qe="maxWait"in ue,We=Qe?ae(S(ue.maxWait)||0,ne):We,je="trailing"in ue?!!ue.trailing:je),bt.cancel=Pt,bt.flush=Wt,bt}function u(Z,ne,ue){var Ce=!0,Je=!0;if(typeof Z!="function")throw new TypeError(P);return h(ue)&&(Ce="leading"in ue?!!ue.leading:Ce,Je="trailing"in ue?!!ue.trailing:Je),a(Z,ne,{leading:Ce,maxWait:ne,trailing:Je})}function h(Z){var ne=typeof Z>"u"?"undefined":D(Z);return!!Z&&(ne=="object"||ne=="function")}function b(Z){return!!Z&&(typeof Z>"u"?"undefined":D(Z))=="object"}function w(Z){return(typeof Z>"u"?"undefined":D(Z))=="symbol"||b(Z)&&re.call(Z)==T}function S(Z){if(typeof Z=="number")return Z;if(w(Z))return O;if(h(Z)){var ne=typeof Z.valueOf=="function"?Z.valueOf():Z;Z=h(ne)?ne+"":ne}if(typeof Z!="string")return Z===0?Z:+Z;Z=Z.replace(I,"");var ue=H.test(Z);return ue||he.test(Z)?Ae(Z.slice(2),ue?2:8):j.test(Z)?O:+Z}var D=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(Z){return typeof Z}:function(Z){return Z&&typeof Symbol=="function"&&Z.constructor===Symbol&&Z!==Symbol.prototype?"symbol":typeof Z},P="Expected a function",O=NaN,T="[object Symbol]",I=/^\s+|\s+$/g,j=/^[-+]0x[0-9a-f]+$/i,H=/^0b[01]+$/i,he=/^0o[0-7]+$/i,Ae=parseInt,xe=(typeof s>"u"?"undefined":D(s))=="object"&&s&&s.Object===Object&&s,Ee=(typeof self>"u"?"undefined":D(self))=="object"&&self&&self.Object===Object&&self,V=xe||Ee||Function("return this")(),c=Object.prototype,re=c.toString,ae=Math.max,Me=Math.min,Q=function(){return V.Date.now()};i.exports=u}).call(r,function(){return this}())},function(i,r){(function(s){function a(Q,Z,ne){function ue(je){var ke=bt,He=ct;return bt=ct=void 0,dt=je,We=Q.apply(He,ke)}function Ce(je){return dt=je,tt=setTimeout(it,Z),Ue?ue(je):We}function Je(je){var ke=je-Ge,He=je-dt,Be=Z-ke;return Nt?ae(Be,_t-He):Be}function nt(je){var ke=je-Ge,He=je-dt;return Ge===void 0||ke>=Z||ke<0||Nt&&He>=_t}function it(){var je=Me();return nt(je)?yt(je):void(tt=setTimeout(it,Je(je)))}function yt(je){return tt=void 0,Qe&&bt?ue(je):(bt=ct=void 0,We)}function $t(){tt!==void 0&&clearTimeout(tt),dt=0,bt=Ge=ct=tt=void 0}function Pt(){return tt===void 0?We:yt(Me())}function Wt(){var je=Me(),ke=nt(je);if(bt=arguments,ct=this,Ge=je,ke){if(tt===void 0)return Ce(Ge);if(Nt)return tt=setTimeout(it,Z),ue(Ge)}return tt===void 0&&(tt=setTimeout(it,Z)),We}var bt,ct,_t,We,tt,Ge,dt=0,Ue=!1,Nt=!1,Qe=!0;if(typeof Q!="function")throw new TypeError(D);return Z=w(Z)||0,u(ne)&&(Ue=!!ne.leading,Nt="maxWait"in ne,_t=Nt?re(w(ne.maxWait)||0,Z):_t,Qe="trailing"in ne?!!ne.trailing:Qe),Wt.cancel=$t,Wt.flush=Pt,Wt}function u(Q){var Z=typeof Q>"u"?"undefined":S(Q);return!!Q&&(Z=="object"||Z=="function")}function h(Q){return!!Q&&(typeof Q>"u"?"undefined":S(Q))=="object"}function b(Q){return(typeof Q>"u"?"undefined":S(Q))=="symbol"||h(Q)&&c.call(Q)==O}function w(Q){if(typeof Q=="number")return Q;if(b(Q))return P;if(u(Q)){var Z=typeof Q.valueOf=="function"?Q.valueOf():Q;Q=u(Z)?Z+"":Z}if(typeof Q!="string")return Q===0?Q:+Q;Q=Q.replace(T,"");var ne=j.test(Q);return ne||H.test(Q)?he(Q.slice(2),ne?2:8):I.test(Q)?P:+Q}var S=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(Q){return typeof Q}:function(Q){return Q&&typeof Symbol=="function"&&Q.constructor===Symbol&&Q!==Symbol.prototype?"symbol":typeof Q},D="Expected a function",P=NaN,O="[object Symbol]",T=/^\s+|\s+$/g,I=/^[-+]0x[0-9a-f]+$/i,j=/^0b[01]+$/i,H=/^0o[0-7]+$/i,he=parseInt,Ae=(typeof s>"u"?"undefined":S(s))=="object"&&s&&s.Object===Object&&s,xe=(typeof self>"u"?"undefined":S(self))=="object"&&self&&self.Object===Object&&self,Ee=Ae||xe||Function("return this")(),V=Object.prototype,c=V.toString,re=Math.max,ae=Math.min,Me=function(){return Ee.Date.now()};i.exports=a}).call(r,function(){return this}())},function(i,r){function s(S){var D=void 0,P=void 0;for(D=0;D<S.length;D+=1)if(P=S[D],P.dataset&&P.dataset.aos||P.children&&s(P.children))return!0;return!1}function a(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}function u(){return!!a()}function h(S,D){var P=window.document,O=a(),T=new O(b);w=D,T.observe(P.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}function b(S){S&&S.forEach(function(D){var P=Array.prototype.slice.call(D.addedNodes),O=Array.prototype.slice.call(D.removedNodes),T=P.concat(O);if(s(T))return w()})}Object.defineProperty(r,"__esModule",{value:!0});var w=function(){};r.default={isSupported:u,ready:h}},function(i,r){function s(P,O){if(!(P instanceof O))throw new TypeError("Cannot call a class as a function")}function a(){return navigator.userAgent||navigator.vendor||window.opera||""}Object.defineProperty(r,"__esModule",{value:!0});var u=function(){function P(O,T){for(var I=0;I<T.length;I++){var j=T[I];j.enumerable=j.enumerable||!1,j.configurable=!0,"value"in j&&(j.writable=!0),Object.defineProperty(O,j.key,j)}}return function(O,T,I){return T&&P(O.prototype,T),I&&P(O,I),O}}(),h=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,b=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,w=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,S=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,D=function(){function P(){s(this,P)}return u(P,[{key:"phone",value:function(){var O=a();return!(!h.test(O)&&!b.test(O.substr(0,4)))}},{key:"mobile",value:function(){var O=a();return!(!w.test(O)&&!S.test(O.substr(0,4)))}},{key:"tablet",value:function(){return this.mobile()&&!this.phone()}}]),P}();r.default=new D},function(i,r){Object.defineProperty(r,"__esModule",{value:!0});var s=function(u,h,b){var w=u.node.getAttribute("data-aos-once");h>u.position?u.node.classList.add("aos-animate"):typeof w<"u"&&(w==="false"||!b&&w!=="true")&&u.node.classList.remove("aos-animate")},a=function(u,h){var b=window.pageYOffset,w=window.innerHeight;u.forEach(function(S,D){s(S,w+b,h)})};r.default=a},function(i,r,s){function a(w){return w&&w.__esModule?w:{default:w}}Object.defineProperty(r,"__esModule",{value:!0});var u=s(12),h=a(u),b=function(w,S){return w.forEach(function(D,P){D.node.classList.add("aos-init"),D.position=(0,h.default)(D.node,S.offset)}),w};r.default=b},function(i,r,s){function a(w){return w&&w.__esModule?w:{default:w}}Object.defineProperty(r,"__esModule",{value:!0});var u=s(13),h=a(u),b=function(w,S){var D=0,P=0,O=window.innerHeight,T={offset:w.getAttribute("data-aos-offset"),anchor:w.getAttribute("data-aos-anchor"),anchorPlacement:w.getAttribute("data-aos-anchor-placement")};switch(T.offset&&!isNaN(T.offset)&&(P=parseInt(T.offset)),T.anchor&&document.querySelectorAll(T.anchor)&&(w=document.querySelectorAll(T.anchor)[0]),D=(0,h.default)(w).top,T.anchorPlacement){case"top-bottom":break;case"center-bottom":D+=w.offsetHeight/2;break;case"bottom-bottom":D+=w.offsetHeight;break;case"top-center":D+=O/2;break;case"bottom-center":D+=O/2+w.offsetHeight;break;case"center-center":D+=O/2+w.offsetHeight/2;break;case"top-top":D+=O;break;case"bottom-top":D+=w.offsetHeight+O;break;case"center-top":D+=w.offsetHeight/2+O}return T.anchorPlacement||T.offset||isNaN(S)||(P=S),D+P};r.default=b},function(i,r){Object.defineProperty(r,"__esModule",{value:!0});var s=function(a){for(var u=0,h=0;a&&!isNaN(a.offsetLeft)&&!isNaN(a.offsetTop);)u+=a.offsetLeft-(a.tagName!="BODY"?a.scrollLeft:0),h+=a.offsetTop-(a.tagName!="BODY"?a.scrollTop:0),a=a.offsetParent;return{top:h,left:u}};r.default=s},function(i,r){Object.defineProperty(r,"__esModule",{value:!0});var s=function(a){return a=a||document.querySelectorAll("[data-aos]"),Array.prototype.map.call(a,function(u){return{node:u}})};r.default=s}])})})(Ou);function xa(e,t){return function(){return e.apply(t,arguments)}}const{toString:Nu}=Object.prototype,{getPrototypeOf:ps}=Object,Qr=(e=>t=>{const i=Nu.call(t);return e[i]||(e[i]=i.slice(8,-1).toLowerCase())})(Object.create(null)),gn=e=>(e=e.toLowerCase(),t=>Qr(t)===e),Zr=e=>t=>typeof t===e,{isArray:Mi}=Array,or=Zr("undefined");function ku(e){return e!==null&&!or(e)&&e.constructor!==null&&!or(e.constructor)&&qt(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const _a=gn("ArrayBuffer");function Lu(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&_a(e.buffer),t}const Du=Zr("string"),qt=Zr("function"),Ea=Zr("number"),eo=e=>e!==null&&typeof e=="object",Mu=e=>e===!0||e===!1,jr=e=>{if(Qr(e)!=="object")return!1;const t=ps(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},Pu=gn("Date"),Hu=gn("File"),Iu=gn("Blob"),Ru=gn("FileList"),ju=e=>eo(e)&&qt(e.pipe),Fu=e=>{let t;return e&&(typeof FormData=="function"&&e instanceof FormData||qt(e.append)&&((t=Qr(e))==="formdata"||t==="object"&&qt(e.toString)&&e.toString()==="[object FormData]"))},Bu=gn("URLSearchParams"),zu=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function cr(e,t,{allOwnKeys:i=!1}={}){if(e===null||typeof e>"u")return;let r,s;if(typeof e!="object"&&(e=[e]),Mi(e))for(r=0,s=e.length;r<s;r++)t.call(null,e[r],r,e);else{const a=i?Object.getOwnPropertyNames(e):Object.keys(e),u=a.length;let h;for(r=0;r<u;r++)h=a[r],t.call(null,e[h],h,e)}}function Ca(e,t){t=t.toLowerCase();const i=Object.keys(e);let r=i.length,s;for(;r-- >0;)if(s=i[r],t===s.toLowerCase())return s;return null}const Sa=(()=>typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global)(),Ta=e=>!or(e)&&e!==Sa;function zo(){const{caseless:e}=Ta(this)&&this||{},t={},i=(r,s)=>{const a=e&&Ca(t,s)||s;jr(t[a])&&jr(r)?t[a]=zo(t[a],r):jr(r)?t[a]=zo({},r):Mi(r)?t[a]=r.slice():t[a]=r};for(let r=0,s=arguments.length;r<s;r++)arguments[r]&&cr(arguments[r],i);return t}const qu=(e,t,i,{allOwnKeys:r}={})=>(cr(t,(s,a)=>{i&&qt(s)?e[a]=xa(s,i):e[a]=s},{allOwnKeys:r}),e),$u=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),Wu=(e,t,i,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),i&&Object.assign(e.prototype,i)},Uu=(e,t,i,r)=>{let s,a,u;const h={};if(t=t||{},e==null)return t;do{for(s=Object.getOwnPropertyNames(e),a=s.length;a-- >0;)u=s[a],(!r||r(u,e,t))&&!h[u]&&(t[u]=e[u],h[u]=!0);e=i!==!1&&ps(e)}while(e&&(!i||i(e,t))&&e!==Object.prototype);return t},Vu=(e,t,i)=>{e=String(e),(i===void 0||i>e.length)&&(i=e.length),i-=t.length;const r=e.indexOf(t,i);return r!==-1&&r===i},Yu=e=>{if(!e)return null;if(Mi(e))return e;let t=e.length;if(!Ea(t))return null;const i=new Array(t);for(;t-- >0;)i[t]=e[t];return i},Xu=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&ps(Uint8Array)),Ku=(e,t)=>{const r=(e&&e[Symbol.iterator]).call(e);let s;for(;(s=r.next())&&!s.done;){const a=s.value;t.call(e,a[0],a[1])}},Gu=(e,t)=>{let i;const r=[];for(;(i=e.exec(t))!==null;)r.push(i);return r},Ju=gn("HTMLFormElement"),Qu=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(i,r,s){return r.toUpperCase()+s}),Ys=(({hasOwnProperty:e})=>(t,i)=>e.call(t,i))(Object.prototype),Zu=gn("RegExp"),Aa=(e,t)=>{const i=Object.getOwnPropertyDescriptors(e),r={};cr(i,(s,a)=>{t(s,a,e)!==!1&&(r[a]=s)}),Object.defineProperties(e,r)},ec=e=>{Aa(e,(t,i)=>{if(qt(e)&&["arguments","caller","callee"].indexOf(i)!==-1)return!1;const r=e[i];if(qt(r)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+i+"'")})}})},tc=(e,t)=>{const i={},r=s=>{s.forEach(a=>{i[a]=!0})};return Mi(e)?r(e):r(String(e).split(t)),i},nc=()=>{},ic=(e,t)=>(e=+e,Number.isFinite(e)?e:t),Do="abcdefghijklmnopqrstuvwxyz",Xs="0123456789",Oa={DIGIT:Xs,ALPHA:Do,ALPHA_DIGIT:Do+Do.toUpperCase()+Xs},rc=(e=16,t=Oa.ALPHA_DIGIT)=>{let i="";const{length:r}=t;for(;e--;)i+=t[Math.random()*r|0];return i};function oc(e){return!!(e&&qt(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const sc=e=>{const t=new Array(10),i=(r,s)=>{if(eo(r)){if(t.indexOf(r)>=0)return;if(!("toJSON"in r)){t[s]=r;const a=Mi(r)?[]:{};return cr(r,(u,h)=>{const b=i(u,s+1);!or(b)&&(a[h]=b)}),t[s]=void 0,a}}return r};return i(e,0)},ac=gn("AsyncFunction"),lc=e=>e&&(eo(e)||qt(e))&&qt(e.then)&&qt(e.catch),U={isArray:Mi,isArrayBuffer:_a,isBuffer:ku,isFormData:Fu,isArrayBufferView:Lu,isString:Du,isNumber:Ea,isBoolean:Mu,isObject:eo,isPlainObject:jr,isUndefined:or,isDate:Pu,isFile:Hu,isBlob:Iu,isRegExp:Zu,isFunction:qt,isStream:ju,isURLSearchParams:Bu,isTypedArray:Xu,isFileList:Ru,forEach:cr,merge:zo,extend:qu,trim:zu,stripBOM:$u,inherits:Wu,toFlatObject:Uu,kindOf:Qr,kindOfTest:gn,endsWith:Vu,toArray:Yu,forEachEntry:Ku,matchAll:Gu,isHTMLForm:Ju,hasOwnProperty:Ys,hasOwnProp:Ys,reduceDescriptors:Aa,freezeMethods:ec,toObjectSet:tc,toCamelCase:Qu,noop:nc,toFiniteNumber:ic,findKey:Ca,global:Sa,isContextDefined:Ta,ALPHABET:Oa,generateString:rc,isSpecCompliantForm:oc,toJSONObject:sc,isAsyncFn:ac,isThenable:lc};function De(e,t,i,r,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),i&&(this.config=i),r&&(this.request=r),s&&(this.response=s)}U.inherits(De,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:U.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Na=De.prototype,ka={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{ka[e]={value:e}});Object.defineProperties(De,ka);Object.defineProperty(Na,"isAxiosError",{value:!0});De.from=(e,t,i,r,s,a)=>{const u=Object.create(Na);return U.toFlatObject(e,u,function(b){return b!==Error.prototype},h=>h!=="isAxiosError"),De.call(u,e.message,t,i,r,s),u.cause=e,u.name=e.name,a&&Object.assign(u,a),u};const uc=null;function qo(e){return U.isPlainObject(e)||U.isArray(e)}function La(e){return U.endsWith(e,"[]")?e.slice(0,-2):e}function Ks(e,t,i){return e?e.concat(t).map(function(s,a){return s=La(s),!i&&a?"["+s+"]":s}).join(i?".":""):t}function cc(e){return U.isArray(e)&&!e.some(qo)}const dc=U.toFlatObject(U,{},null,function(t){return/^is[A-Z]/.test(t)});function to(e,t,i){if(!U.isObject(e))throw new TypeError("target must be an object");t=t||new FormData,i=U.toFlatObject(i,{metaTokens:!0,dots:!1,indexes:!1},!1,function(I,j){return!U.isUndefined(j[I])});const r=i.metaTokens,s=i.visitor||S,a=i.dots,u=i.indexes,b=(i.Blob||typeof Blob<"u"&&Blob)&&U.isSpecCompliantForm(t);if(!U.isFunction(s))throw new TypeError("visitor must be a function");function w(T){if(T===null)return"";if(U.isDate(T))return T.toISOString();if(!b&&U.isBlob(T))throw new De("Blob is not supported. Use a Buffer instead.");return U.isArrayBuffer(T)||U.isTypedArray(T)?b&&typeof Blob=="function"?new Blob([T]):Buffer.from(T):T}function S(T,I,j){let H=T;if(T&&!j&&typeof T=="object"){if(U.endsWith(I,"{}"))I=r?I:I.slice(0,-2),T=JSON.stringify(T);else if(U.isArray(T)&&cc(T)||(U.isFileList(T)||U.endsWith(I,"[]"))&&(H=U.toArray(T)))return I=La(I),H.forEach(function(Ae,xe){!(U.isUndefined(Ae)||Ae===null)&&t.append(u===!0?Ks([I],xe,a):u===null?I:I+"[]",w(Ae))}),!1}return qo(T)?!0:(t.append(Ks(j,I,a),w(T)),!1)}const D=[],P=Object.assign(dc,{defaultVisitor:S,convertValue:w,isVisitable:qo});function O(T,I){if(!U.isUndefined(T)){if(D.indexOf(T)!==-1)throw Error("Circular reference detected in "+I.join("."));D.push(T),U.forEach(T,function(H,he){(!(U.isUndefined(H)||H===null)&&s.call(t,H,U.isString(he)?he.trim():he,I,P))===!0&&O(H,I?I.concat(he):[he])}),D.pop()}}if(!U.isObject(e))throw new TypeError("data must be an object");return O(e),t}function Gs(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(r){return t[r]})}function ms(e,t){this._pairs=[],e&&to(e,this,t)}const Da=ms.prototype;Da.append=function(t,i){this._pairs.push([t,i])};Da.toString=function(t){const i=t?function(r){return t.call(this,r,Gs)}:Gs;return this._pairs.map(function(s){return i(s[0])+"="+i(s[1])},"").join("&")};function fc(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Ma(e,t,i){if(!t)return e;const r=i&&i.encode||fc,s=i&&i.serialize;let a;if(s?a=s(t,i):a=U.isURLSearchParams(t)?t.toString():new ms(t,i).toString(r),a){const u=e.indexOf("#");u!==-1&&(e=e.slice(0,u)),e+=(e.indexOf("?")===-1?"?":"&")+a}return e}class hc{constructor(){this.handlers=[]}use(t,i,r){return this.handlers.push({fulfilled:t,rejected:i,synchronous:r?r.synchronous:!1,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){U.forEach(this.handlers,function(r){r!==null&&t(r)})}}const Js=hc,Pa={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},pc=typeof URLSearchParams<"u"?URLSearchParams:ms,mc=typeof FormData<"u"?FormData:null,gc=typeof Blob<"u"?Blob:null,vc=(()=>{let e;return typeof navigator<"u"&&((e=navigator.product)==="ReactNative"||e==="NativeScript"||e==="NS")?!1:typeof window<"u"&&typeof document<"u"})(),yc=(()=>typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function")(),pn={isBrowser:!0,classes:{URLSearchParams:pc,FormData:mc,Blob:gc},isStandardBrowserEnv:vc,isStandardBrowserWebWorkerEnv:yc,protocols:["http","https","file","blob","url","data"]};function bc(e,t){return to(e,new pn.classes.URLSearchParams,Object.assign({visitor:function(i,r,s,a){return pn.isNode&&U.isBuffer(i)?(this.append(r,i.toString("base64")),!1):a.defaultVisitor.apply(this,arguments)}},t))}function wc(e){return U.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function xc(e){const t={},i=Object.keys(e);let r;const s=i.length;let a;for(r=0;r<s;r++)a=i[r],t[a]=e[a];return t}function Ha(e){function t(i,r,s,a){let u=i[a++];const h=Number.isFinite(+u),b=a>=i.length;return u=!u&&U.isArray(s)?s.length:u,b?(U.hasOwnProp(s,u)?s[u]=[s[u],r]:s[u]=r,!h):((!s[u]||!U.isObject(s[u]))&&(s[u]=[]),t(i,r,s[u],a)&&U.isArray(s[u])&&(s[u]=xc(s[u])),!h)}if(U.isFormData(e)&&U.isFunction(e.entries)){const i={};return U.forEachEntry(e,(r,s)=>{t(wc(r),s,i,0)}),i}return null}const _c={"Content-Type":void 0};function Ec(e,t,i){if(U.isString(e))try{return(t||JSON.parse)(e),U.trim(e)}catch(r){if(r.name!=="SyntaxError")throw r}return(i||JSON.stringify)(e)}const no={transitional:Pa,adapter:["xhr","http"],transformRequest:[function(t,i){const r=i.getContentType()||"",s=r.indexOf("application/json")>-1,a=U.isObject(t);if(a&&U.isHTMLForm(t)&&(t=new FormData(t)),U.isFormData(t))return s&&s?JSON.stringify(Ha(t)):t;if(U.isArrayBuffer(t)||U.isBuffer(t)||U.isStream(t)||U.isFile(t)||U.isBlob(t))return t;if(U.isArrayBufferView(t))return t.buffer;if(U.isURLSearchParams(t))return i.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let h;if(a){if(r.indexOf("application/x-www-form-urlencoded")>-1)return bc(t,this.formSerializer).toString();if((h=U.isFileList(t))||r.indexOf("multipart/form-data")>-1){const b=this.env&&this.env.FormData;return to(h?{"files[]":t}:t,b&&new b,this.formSerializer)}}return a||s?(i.setContentType("application/json",!1),Ec(t)):t}],transformResponse:[function(t){const i=this.transitional||no.transitional,r=i&&i.forcedJSONParsing,s=this.responseType==="json";if(t&&U.isString(t)&&(r&&!this.responseType||s)){const u=!(i&&i.silentJSONParsing)&&s;try{return JSON.parse(t)}catch(h){if(u)throw h.name==="SyntaxError"?De.from(h,De.ERR_BAD_RESPONSE,this,null,this.response):h}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:pn.classes.FormData,Blob:pn.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};U.forEach(["delete","get","head"],function(t){no.headers[t]={}});U.forEach(["post","put","patch"],function(t){no.headers[t]=U.merge(_c)});const gs=no,Cc=U.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Sc=e=>{const t={};let i,r,s;return e&&e.split(`
`).forEach(function(u){s=u.indexOf(":"),i=u.substring(0,s).trim().toLowerCase(),r=u.substring(s+1).trim(),!(!i||t[i]&&Cc[i])&&(i==="set-cookie"?t[i]?t[i].push(r):t[i]=[r]:t[i]=t[i]?t[i]+", "+r:r)}),t},Qs=Symbol("internals");function Gi(e){return e&&String(e).trim().toLowerCase()}function Fr(e){return e===!1||e==null?e:U.isArray(e)?e.map(Fr):String(e)}function Tc(e){const t=Object.create(null),i=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=i.exec(e);)t[r[1]]=r[2];return t}const Ac=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function Mo(e,t,i,r,s){if(U.isFunction(r))return r.call(this,t,i);if(s&&(t=i),!!U.isString(t)){if(U.isString(r))return t.indexOf(r)!==-1;if(U.isRegExp(r))return r.test(t)}}function Oc(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,i,r)=>i.toUpperCase()+r)}function Nc(e,t){const i=U.toCamelCase(" "+t);["get","set","has"].forEach(r=>{Object.defineProperty(e,r+i,{value:function(s,a,u){return this[r].call(this,t,s,a,u)},configurable:!0})})}class io{constructor(t){t&&this.set(t)}set(t,i,r){const s=this;function a(h,b,w){const S=Gi(b);if(!S)throw new Error("header name must be a non-empty string");const D=U.findKey(s,S);(!D||s[D]===void 0||w===!0||w===void 0&&s[D]!==!1)&&(s[D||b]=Fr(h))}const u=(h,b)=>U.forEach(h,(w,S)=>a(w,S,b));return U.isPlainObject(t)||t instanceof this.constructor?u(t,i):U.isString(t)&&(t=t.trim())&&!Ac(t)?u(Sc(t),i):t!=null&&a(i,t,r),this}get(t,i){if(t=Gi(t),t){const r=U.findKey(this,t);if(r){const s=this[r];if(!i)return s;if(i===!0)return Tc(s);if(U.isFunction(i))return i.call(this,s,r);if(U.isRegExp(i))return i.exec(s);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,i){if(t=Gi(t),t){const r=U.findKey(this,t);return!!(r&&this[r]!==void 0&&(!i||Mo(this,this[r],r,i)))}return!1}delete(t,i){const r=this;let s=!1;function a(u){if(u=Gi(u),u){const h=U.findKey(r,u);h&&(!i||Mo(r,r[h],h,i))&&(delete r[h],s=!0)}}return U.isArray(t)?t.forEach(a):a(t),s}clear(t){const i=Object.keys(this);let r=i.length,s=!1;for(;r--;){const a=i[r];(!t||Mo(this,this[a],a,t,!0))&&(delete this[a],s=!0)}return s}normalize(t){const i=this,r={};return U.forEach(this,(s,a)=>{const u=U.findKey(r,a);if(u){i[u]=Fr(s),delete i[a];return}const h=t?Oc(a):String(a).trim();h!==a&&delete i[a],i[h]=Fr(s),r[h]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const i=Object.create(null);return U.forEach(this,(r,s)=>{r!=null&&r!==!1&&(i[s]=t&&U.isArray(r)?r.join(", "):r)}),i}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,i])=>t+": "+i).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...i){const r=new this(t);return i.forEach(s=>r.set(s)),r}static accessor(t){const r=(this[Qs]=this[Qs]={accessors:{}}).accessors,s=this.prototype;function a(u){const h=Gi(u);r[h]||(Nc(s,u),r[h]=!0)}return U.isArray(t)?t.forEach(a):a(t),this}}io.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);U.freezeMethods(io.prototype);U.freezeMethods(io);const Sn=io;function Po(e,t){const i=this||gs,r=t||i,s=Sn.from(r.headers);let a=r.data;return U.forEach(e,function(h){a=h.call(i,a,s.normalize(),t?t.status:void 0)}),s.normalize(),a}function Ia(e){return!!(e&&e.__CANCEL__)}function dr(e,t,i){De.call(this,e??"canceled",De.ERR_CANCELED,t,i),this.name="CanceledError"}U.inherits(dr,De,{__CANCEL__:!0});function kc(e,t,i){const r=i.config.validateStatus;!i.status||!r||r(i.status)?e(i):t(new De("Request failed with status code "+i.status,[De.ERR_BAD_REQUEST,De.ERR_BAD_RESPONSE][Math.floor(i.status/100)-4],i.config,i.request,i))}const Lc=pn.isStandardBrowserEnv?function(){return{write:function(i,r,s,a,u,h){const b=[];b.push(i+"="+encodeURIComponent(r)),U.isNumber(s)&&b.push("expires="+new Date(s).toGMTString()),U.isString(a)&&b.push("path="+a),U.isString(u)&&b.push("domain="+u),h===!0&&b.push("secure"),document.cookie=b.join("; ")},read:function(i){const r=document.cookie.match(new RegExp("(^|;\\s*)("+i+")=([^;]*)"));return r?decodeURIComponent(r[3]):null},remove:function(i){this.write(i,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}();function Dc(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function Mc(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}function Ra(e,t){return e&&!Dc(t)?Mc(e,t):t}const Pc=pn.isStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a");let r;function s(a){let u=a;return t&&(i.setAttribute("href",u),u=i.href),i.setAttribute("href",u),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:i.pathname.charAt(0)==="/"?i.pathname:"/"+i.pathname}}return r=s(window.location.href),function(u){const h=U.isString(u)?s(u):u;return h.protocol===r.protocol&&h.host===r.host}}():function(){return function(){return!0}}();function Hc(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}function Ic(e,t){e=e||10;const i=new Array(e),r=new Array(e);let s=0,a=0,u;return t=t!==void 0?t:1e3,function(b){const w=Date.now(),S=r[a];u||(u=w),i[s]=b,r[s]=w;let D=a,P=0;for(;D!==s;)P+=i[D++],D=D%e;if(s=(s+1)%e,s===a&&(a=(a+1)%e),w-u<t)return;const O=S&&w-S;return O?Math.round(P*1e3/O):void 0}}function Zs(e,t){let i=0;const r=Ic(50,250);return s=>{const a=s.loaded,u=s.lengthComputable?s.total:void 0,h=a-i,b=r(h),w=a<=u;i=a;const S={loaded:a,total:u,progress:u?a/u:void 0,bytes:h,rate:b||void 0,estimated:b&&u&&w?(u-a)/b:void 0,event:s};S[t?"download":"upload"]=!0,e(S)}}const Rc=typeof XMLHttpRequest<"u",jc=Rc&&function(e){return new Promise(function(i,r){let s=e.data;const a=Sn.from(e.headers).normalize(),u=e.responseType;let h;function b(){e.cancelToken&&e.cancelToken.unsubscribe(h),e.signal&&e.signal.removeEventListener("abort",h)}U.isFormData(s)&&(pn.isStandardBrowserEnv||pn.isStandardBrowserWebWorkerEnv?a.setContentType(!1):a.setContentType("multipart/form-data;",!1));let w=new XMLHttpRequest;if(e.auth){const O=e.auth.username||"",T=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";a.set("Authorization","Basic "+btoa(O+":"+T))}const S=Ra(e.baseURL,e.url);w.open(e.method.toUpperCase(),Ma(S,e.params,e.paramsSerializer),!0),w.timeout=e.timeout;function D(){if(!w)return;const O=Sn.from("getAllResponseHeaders"in w&&w.getAllResponseHeaders()),I={data:!u||u==="text"||u==="json"?w.responseText:w.response,status:w.status,statusText:w.statusText,headers:O,config:e,request:w};kc(function(H){i(H),b()},function(H){r(H),b()},I),w=null}if("onloadend"in w?w.onloadend=D:w.onreadystatechange=function(){!w||w.readyState!==4||w.status===0&&!(w.responseURL&&w.responseURL.indexOf("file:")===0)||setTimeout(D)},w.onabort=function(){w&&(r(new De("Request aborted",De.ECONNABORTED,e,w)),w=null)},w.onerror=function(){r(new De("Network Error",De.ERR_NETWORK,e,w)),w=null},w.ontimeout=function(){let T=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const I=e.transitional||Pa;e.timeoutErrorMessage&&(T=e.timeoutErrorMessage),r(new De(T,I.clarifyTimeoutError?De.ETIMEDOUT:De.ECONNABORTED,e,w)),w=null},pn.isStandardBrowserEnv){const O=(e.withCredentials||Pc(S))&&e.xsrfCookieName&&Lc.read(e.xsrfCookieName);O&&a.set(e.xsrfHeaderName,O)}s===void 0&&a.setContentType(null),"setRequestHeader"in w&&U.forEach(a.toJSON(),function(T,I){w.setRequestHeader(I,T)}),U.isUndefined(e.withCredentials)||(w.withCredentials=!!e.withCredentials),u&&u!=="json"&&(w.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&w.addEventListener("progress",Zs(e.onDownloadProgress,!0)),typeof e.onUploadProgress=="function"&&w.upload&&w.upload.addEventListener("progress",Zs(e.onUploadProgress)),(e.cancelToken||e.signal)&&(h=O=>{w&&(r(!O||O.type?new dr(null,e,w):O),w.abort(),w=null)},e.cancelToken&&e.cancelToken.subscribe(h),e.signal&&(e.signal.aborted?h():e.signal.addEventListener("abort",h)));const P=Hc(S);if(P&&pn.protocols.indexOf(P)===-1){r(new De("Unsupported protocol "+P+":",De.ERR_BAD_REQUEST,e));return}w.send(s||null)})},Br={http:uc,xhr:jc};U.forEach(Br,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});const Fc={getAdapter:e=>{e=U.isArray(e)?e:[e];const{length:t}=e;let i,r;for(let s=0;s<t&&(i=e[s],!(r=U.isString(i)?Br[i.toLowerCase()]:i));s++);if(!r)throw r===!1?new De(`Adapter ${i} is not supported by the environment`,"ERR_NOT_SUPPORT"):new Error(U.hasOwnProp(Br,i)?`Adapter '${i}' is not available in the build`:`Unknown adapter '${i}'`);if(!U.isFunction(r))throw new TypeError("adapter is not a function");return r},adapters:Br};function Ho(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new dr(null,e)}function ea(e){return Ho(e),e.headers=Sn.from(e.headers),e.data=Po.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Fc.getAdapter(e.adapter||gs.adapter)(e).then(function(r){return Ho(e),r.data=Po.call(e,e.transformResponse,r),r.headers=Sn.from(r.headers),r},function(r){return Ia(r)||(Ho(e),r&&r.response&&(r.response.data=Po.call(e,e.transformResponse,r.response),r.response.headers=Sn.from(r.response.headers))),Promise.reject(r)})}const ta=e=>e instanceof Sn?e.toJSON():e;function Ni(e,t){t=t||{};const i={};function r(w,S,D){return U.isPlainObject(w)&&U.isPlainObject(S)?U.merge.call({caseless:D},w,S):U.isPlainObject(S)?U.merge({},S):U.isArray(S)?S.slice():S}function s(w,S,D){if(U.isUndefined(S)){if(!U.isUndefined(w))return r(void 0,w,D)}else return r(w,S,D)}function a(w,S){if(!U.isUndefined(S))return r(void 0,S)}function u(w,S){if(U.isUndefined(S)){if(!U.isUndefined(w))return r(void 0,w)}else return r(void 0,S)}function h(w,S,D){if(D in t)return r(w,S);if(D in e)return r(void 0,w)}const b={url:a,method:a,data:a,baseURL:u,transformRequest:u,transformResponse:u,paramsSerializer:u,timeout:u,timeoutMessage:u,withCredentials:u,adapter:u,responseType:u,xsrfCookieName:u,xsrfHeaderName:u,onUploadProgress:u,onDownloadProgress:u,decompress:u,maxContentLength:u,maxBodyLength:u,beforeRedirect:u,transport:u,httpAgent:u,httpsAgent:u,cancelToken:u,socketPath:u,responseEncoding:u,validateStatus:h,headers:(w,S)=>s(ta(w),ta(S),!0)};return U.forEach(Object.keys(Object.assign({},e,t)),function(S){const D=b[S]||s,P=D(e[S],t[S],S);U.isUndefined(P)&&D!==h||(i[S]=P)}),i}const ja="1.4.0",vs={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{vs[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}});const na={};vs.transitional=function(t,i,r){function s(a,u){return"[Axios v"+ja+"] Transitional option '"+a+"'"+u+(r?". "+r:"")}return(a,u,h)=>{if(t===!1)throw new De(s(u," has been removed"+(i?" in "+i:"")),De.ERR_DEPRECATED);return i&&!na[u]&&(na[u]=!0,console.warn(s(u," has been deprecated since v"+i+" and will be removed in the near future"))),t?t(a,u,h):!0}};function Bc(e,t,i){if(typeof e!="object")throw new De("options must be an object",De.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let s=r.length;for(;s-- >0;){const a=r[s],u=t[a];if(u){const h=e[a],b=h===void 0||u(h,a,e);if(b!==!0)throw new De("option "+a+" must be "+b,De.ERR_BAD_OPTION_VALUE);continue}if(i!==!0)throw new De("Unknown option "+a,De.ERR_BAD_OPTION)}}const $o={assertOptions:Bc,validators:vs},In=$o.validators;class Wr{constructor(t){this.defaults=t,this.interceptors={request:new Js,response:new Js}}request(t,i){typeof t=="string"?(i=i||{},i.url=t):i=t||{},i=Ni(this.defaults,i);const{transitional:r,paramsSerializer:s,headers:a}=i;r!==void 0&&$o.assertOptions(r,{silentJSONParsing:In.transitional(In.boolean),forcedJSONParsing:In.transitional(In.boolean),clarifyTimeoutError:In.transitional(In.boolean)},!1),s!=null&&(U.isFunction(s)?i.paramsSerializer={serialize:s}:$o.assertOptions(s,{encode:In.function,serialize:In.function},!0)),i.method=(i.method||this.defaults.method||"get").toLowerCase();let u;u=a&&U.merge(a.common,a[i.method]),u&&U.forEach(["delete","get","head","post","put","patch","common"],T=>{delete a[T]}),i.headers=Sn.concat(u,a);const h=[];let b=!0;this.interceptors.request.forEach(function(I){typeof I.runWhen=="function"&&I.runWhen(i)===!1||(b=b&&I.synchronous,h.unshift(I.fulfilled,I.rejected))});const w=[];this.interceptors.response.forEach(function(I){w.push(I.fulfilled,I.rejected)});let S,D=0,P;if(!b){const T=[ea.bind(this),void 0];for(T.unshift.apply(T,h),T.push.apply(T,w),P=T.length,S=Promise.resolve(i);D<P;)S=S.then(T[D++],T[D++]);return S}P=h.length;let O=i;for(D=0;D<P;){const T=h[D++],I=h[D++];try{O=T(O)}catch(j){I.call(this,j);break}}try{S=ea.call(this,O)}catch(T){return Promise.reject(T)}for(D=0,P=w.length;D<P;)S=S.then(w[D++],w[D++]);return S}getUri(t){t=Ni(this.defaults,t);const i=Ra(t.baseURL,t.url);return Ma(i,t.params,t.paramsSerializer)}}U.forEach(["delete","get","head","options"],function(t){Wr.prototype[t]=function(i,r){return this.request(Ni(r||{},{method:t,url:i,data:(r||{}).data}))}});U.forEach(["post","put","patch"],function(t){function i(r){return function(a,u,h){return this.request(Ni(h||{},{method:t,headers:r?{"Content-Type":"multipart/form-data"}:{},url:a,data:u}))}}Wr.prototype[t]=i(),Wr.prototype[t+"Form"]=i(!0)});const zr=Wr;class ys{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let i;this.promise=new Promise(function(a){i=a});const r=this;this.promise.then(s=>{if(!r._listeners)return;let a=r._listeners.length;for(;a-- >0;)r._listeners[a](s);r._listeners=null}),this.promise.then=s=>{let a;const u=new Promise(h=>{r.subscribe(h),a=h}).then(s);return u.cancel=function(){r.unsubscribe(a)},u},t(function(a,u,h){r.reason||(r.reason=new dr(a,u,h),i(r.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const i=this._listeners.indexOf(t);i!==-1&&this._listeners.splice(i,1)}static source(){let t;return{token:new ys(function(s){t=s}),cancel:t}}}const zc=ys;function qc(e){return function(i){return e.apply(null,i)}}function $c(e){return U.isObject(e)&&e.isAxiosError===!0}const Wo={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Wo).forEach(([e,t])=>{Wo[t]=e});const Wc=Wo;function Fa(e){const t=new zr(e),i=xa(zr.prototype.request,t);return U.extend(i,zr.prototype,t,{allOwnKeys:!0}),U.extend(i,t,null,{allOwnKeys:!0}),i.create=function(s){return Fa(Ni(e,s))},i}const ut=Fa(gs);ut.Axios=zr;ut.CanceledError=dr;ut.CancelToken=zc;ut.isCancel=Ia;ut.VERSION=ja;ut.toFormData=to;ut.AxiosError=De;ut.Cancel=ut.CanceledError;ut.all=function(t){return Promise.all(t)};ut.spread=qc;ut.isAxiosError=$c;ut.mergeConfig=Ni;ut.AxiosHeaders=Sn;ut.formToJSON=e=>Ha(U.isHTMLForm(e)?new FormData(e):e);ut.HttpStatusCode=Wc;ut.default=ut;const Ur=ut;class mn{static extend(){const t={};let i=!1,r=0;const s=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(i=arguments[0],r++);const a=function(u){for(const h in u)Object.prototype.hasOwnProperty.call(u,h)&&(i&&Object.prototype.toString.call(u[h])==="[object Object]"?t[h]=mn.extend(!0,t[h],u[h]):t[h]=u[h])};for(;r<s;r++){const u=arguments[r];a(u)}return t}}var ui=function(e,t){var i=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(s,a){this.nodes=(a||document).querySelectorAll(s)},this.each=function(s){if(this.nodes)for(var a=0;a<this.nodes.length;a++)s.call(this.nodes[a],a);else this.node&&s.call(this.node,0);return this},this.encapsulate=function(){};var r=function(s,a){s&&(Array.isArray(s)?s.forEach(function(u){r(u,a)}):s instanceof ui?a.append(s):typeof s=="object"&&a.append(new ui(s)))};this.create=function(){var s=this.document.createElement(this.settings.tag);if(this.node=s,this.settings.encapsulate===!0){var a=this.settings.encapsulate===!0?"open":this.settings.encapsulate;s.attachShadow({mode:a})}this.nodes=[s],this.settings.content&&r(this.settings.content,this)},this._specialProps=function(s,a){if(s==="tooltip")return this.node.dataset[s]=a,!0},this.setProps=function(){for(var s in this.settings.props)if(s==="dataset")for(var a in this.settings.props[s])this.node.dataset[a]=this.settings.props[s][a];else if(s==="style")for(var u in this.settings.props[s])this.node.style[u]=this.settings.props[s][u];else{var h=this.settings.props[s];this._specialProps(s,h)||(this.node[s]=h)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(s,a){return typeof a=="number"&&this.__.cssNumber.indexOf(s)===-1&&(a=a+"px"),a},this.css=function(s,a){if(typeof s=="string")if(typeof a<"u"){var u=this._normalizeCSSValue(s,a);this.each(function(){this.style[s]=u})}else return this.document.defaultView.getComputedStyle(this.node)[s];if(typeof s=="object")for(var h in s)this.each(function(){this.style[h]=i._normalizeCSSValue(h,s[h])});return this},this.dataset=function(s,a){return typeof a>"u"?this._active()[s]:(this.each(function(){this.dataset[s]=a}),this)},this.attr=function(s,a){return typeof a>"u"?this._active()[s]:(this.each(function(){this.setAttribute(s,a)}),this)},this.val=function(s){return typeof s>"u"?this._active().value:(this.each(function(){this.value=s}),this)},this.prop=function(s,a){var u=this._active();return typeof a>"u"?u[s]:(u[s]!==a&&(u[s]=a,this.trigger("propChange",[s,a])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(s){var a=mw.element("#r"+new Date().getTime());return this.each(function(){for(var u=this.querySelectorAll(s),h=0;h<u.length;h++)a.nodes.indexOf(u[h])===-1&&a.nodes.push(u[h])}),a},this.addClass=function(s){return s=s.trim().split(" "),this.each(function(){var a=this;s.forEach(function(u){a.classList.add(u)})})},this.toggleClass=function(s){return this.each(function(){this.classList.toggle(s.trim())})},this.removeClass=function(s){var a=Array.isArray(s);if(a)return this.each(function(){for(var h=0,b=s.length;h<b;h++)this.classList.remove(s[h])});s=s.trim();var u=s.split(" ");return u.length>1?this.removeClass(u):this.each(function(){this.classList.remove(s)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(s){return typeof s>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=s})},this.text=function(s,a){if(typeof s>"u")return this.node.textContent;typeof a>"u"&&(a=!0),a&&(s=this.document.createRange().createContextualFragment(s).textContent),this.node.innerHTML=s},this._asdom=function(s){return typeof s=="string"?this.document.createRange().createContextualFragment(s):s.node?s.node:s.nodes?s.nodes[s.nodes.length-1]:s},this.offset=function(){var s=this._active(),a=this.getWindow(),u=s.getBoundingClientRect();return u.offsetTop=u.top+a.pageYOffset,u.offsetBottom=u.bottom+a.pageYOffset,u.offsetLeft=u.left+a.pageXOffset,u},this.width=function(s){return s?this.css("width",s):this._active().offsetWidth},this.height=function(s){return s?this.css("height",s):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(s){s=s||"*";var a=this._active(),u=a.parentElement,h=mw.element();for(h.nodes=[];u;)u.matches(s)&&h.nodes.push(u),u=u.parentElement;return h},this.append=function(s){return s&&this.each(function(){this.append(i._asdom(s))}),this},this.before=function(s){return s&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(i._asdom(s),this)}),this},this.after=function(s){s&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(i._asdom(s),this.nextSibling)})},this.prepend=function(s){return s&&this.each(function(){this.prepend(i._asdom(s))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(s){this._disabled=s,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(s,a){return a=a||{},this.each(function(){this.dispatchEvent(new CustomEvent(s,{detail:a,cancelable:!0,bubbles:!0})),i._on[s]&&i._on[s].forEach(function(u){u.call(this,s,a)})}),this},this.get=function(s){return this.nodes[s]},this.wrap=function(s){var a=bs(s);this.before(a),a.append(this)},this._on={},this.on=function(s,a){return s=s.trim().split(" "),s.forEach(function(u){i._on[u]||(i._on[u]=[]),i._on[u].push(a),i.each(function(){this.addEventListener(u,a,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=t||document,this.root instanceof ui&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,e=e||{},e.nodeName&&e.nodeType)this.nodes.push(e),this.node=e,e={},this._asElement=!0;else if(typeof e=="string")if(e.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(e)),e={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof ui)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new ui(this.settings.content));else{var s=this._asdom(e);this.nodes=[].slice.call(s.children),this._asElement=!0}e=e||{};var a={tag:"div",props:{}};this.settings=mn.extend({},a,e),!this._asElement&&(this.create(),this.setProps())},this.init()};const bs=function(e,t){return new ui(e,t)};bs.module=function(e,t){ui.prototype[e]=t};const Uo="mw-le-element";window.customElements&&!customElements.get(Uo)&&customElements.define(Uo,class extends HTMLElement{constructor(){super()}});const we=(e,t)=>(e instanceof Object&&!e.nodeType&&(e=mn.extend({},e||{},{tag:e.tag||Uo})),bs(e,t));let er;const Mr=document.documentElement;Mr.matches?er="matches":Mr.matchesSelector?er="matchesSelector":Mr.mozMatchesSelector?er="mozMatchesSelector":Mr.webkitMatchesSelector&&(er="webkitMatchesSelector");class st{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(t,i){return t[er](i)}static isBlockLevel(t){if(!t||t.nodeType===3)return!1;var i=t.nodeName;if(typeof this._isBlockCache[i]<"u")return this._isBlockCache[i];var r=document.createElement(i);return this.fragment().appendChild(r),this._isBlockCache[i]=getComputedStyle(r).display==="block",this.fragment().removeChild(r),this._isBlockCache[i]}static firstBlockLevel(t){for(;t&&t.classList;){if(this.isBlockLevel(t))return t;t=t.parentNode}}static firstWithBackgroundImage(t){if(!t)return null;for(;t&&t.nodeName!=="BODY";){if(t.style.backgroundImage)return t;t=t.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(t,i){for(;t&&t.nodeName!=="BODY";){let r=0,s=i.length;for(;r<s;r++)if(t.classList.contains(i[r]))return!0;t=t.parentElement}return!1}static hasParentsWithClass(t,i){if(t){for(var r=t.parentNode;r&&r.nodeName!=="BODY";){if(r.classList.contains(i))return!0;r=r.parentNode}return!1}}static hasParentWithId(t,i){if(t){for(var r=t.parentNode;r&&r.nodeName!=="BODY";){if(r.id===i)return!0;r=r.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(t,i){for(;t&&t.nodeName!=="BODY";){let r=0,s=i.length;for(;r<s;r++)if(t.classList.contains(i[r]))return t;t=t.parentElement}return null}static firstParentOrCurrentWithTag(t,i){if(!(!t||!i)){i=typeof i!="string"?i:[i];for(var r=t;r&&r.nodeName!=="BODY";){if(i.indexOf(r.nodeName.toLowerCase())!==-1)return r;r=r.parentNode}return!1}}static index(t,i,r){r=r||t.tagName.toLowerCase(),i=i||t.parentNode;var s;i.constructor===[].constructor?s=i:s=i.querySelectorAll(r);for(var a=0,u=s.length;a<u;a++)if(t===s[a])return a}static firstParentOrCurrentWithClass(t,i){if(!t)return!1;for(var r=t;r&&r.nodeName!=="BODY";){if(r.classList.contains(i))return r;r=r.parentNode}return!1}static firstParentOrCurrent(t,i){if(!t)return!1;for(var r=t;r&&r.nodeName!=="BODY";){if(r.matches(i))return r;r=r.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(t,i){if(!t)return!1;for(var r=t;r&&r.nodeName!=="BODY";){if(!r)return!1;if(this.hasAnyOfClasses(r,i))return r;r=r.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(t,i){let r=t;for(;r&&r.nodeName!=="BODY";){const s=r.classList.contains(i[0]),a=r.classList.contains(i[1]);if(s&&a)return!1;if(s)return!0;if(a)return!1;r=r.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,i){let r=t;for(;r&&r.nodeName!=="BODY";){const s=r.classList.contains(i[0]),a=r.classList.contains(i[1]);if(s&&a)return!1;if(s)return!0;if(a)return!1;r=r.parentNode}return!0}static hasAnyOfClasses(t,i){if(!t)return;let r=0,s=i.length;for(;r<s;r++)if(t.classList.contains(i[r]))return!0;return!1}static offset(t){if(t){var i=t.getBoundingClientRect(),r={top:i.top,left:i.left,width:i.width,height:i.height,bottom:i.bottom,right:i.right};return r.top+=t.ownerDocument.defaultView.scrollY,r.bottom+=t.ownerDocument.defaultView.scrollY,r.left+=t.ownerDocument.defaultView.scrollX,r.right+=t.ownerDocument.defaultView.scrollX,r}}static parentsOrder(t,i){for(var r=[],s={},a=i.length,u=0,h=-1;u<a;u++)s[i[u]]=-1;if(!t)return s;for(var b=t.parentNode;b&&b.nodeName!=="BODY";){for(h++,u=0;u<a;u++)b.classList.contains(i[u])&&r.indexOf(i[u])===-1&&(s[i[u]]=h,r.push(i[u]));b=b.parentNode}return s}}xt(st,"_isBlockCache",{}),xt(st,"_fragment");class Uc{constructor(t){this.settings=t,this.tools=st}isRow(t){return t.classList.contains(this.settings.rowClass)}isModule(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type!=="layouts"}isLayout(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts"}isInLayout(t){if(!t)return!1;for(t=t.parentNode;t&&t!==this.settings.document.body;){if(t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts")return!0;t=t.parentNode}}isElement(t){return t.classList.contains(this.settings.elementClass)}isEmptyElement(t){return t.classList.contains(this.settings.emptyElementClass)}isEdit(t){return t.classList.contains(this.settings.editClass)}isInEdit(t){var i=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t.parentNode,i)}isEditOrInEdit(t){return this.isEdit(t)||this.isInEdit(t)}isPlainText(t){return t.classList.contains(this.settings.plainElementClass)}getType(t){if(this.isEdit(t))return"edit";if(this.isElement(t))return"element";if(this.isModule(t))return"module";if(this.isLayout(t))return"layout"}}class Ba extends Uc{constructor(t){super(t),this.settings=t,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM","DD"],this.init()}isConfigurable(t){return this.isElement(t)||this.isModule(t)||this.isRow(t)}isEditableLayout(t){return this.this.isLayout(t)&&this.isInEdit(t)}canMoveModule(t){return this.isModule(t)&&this.isInEdit(t)}canAcceptByClass(t){return this.tools.hasAnyOfClasses(t,this.dropableElements())}canAcceptByTag(t){return!t||t.nodeType!==1?!1:this._tagsCanAccept.indexOf(t.nodeName)!==-1}allowDrop(t){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(t){return this.canAccept(t.parentNode)}canAccept(t){return!!(this.canAcceptByClass(t)&&this.isEditOrInEdit(t)&&this.allowDrop(t))}canReceiveElements(t){return this.isEdit(t)&&this.canAcceptByTag(t)}dropableElements(){return this._dropableElements}getIteractionTarget(t){return this.tools.firstWithAyOfClassesOnNodeOrParent(t,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(t,i){const r=this.getIteractionTarget(t);if(!r||!this.isEditOrInEdit(t)||!this.allowDrop(t))return null;const s={target:r,canInsert:!1,beforeAfter:!1};var a=this.settings.strictLayouts&&this.isLayout(i),u=this.settings.strict&&!this.isLayout(i)&&!this.isInLayout(r);if(u)return null;if(this.isEdit(r))s.canInsert=!a;else if(this.isElement(r)&&!a)this.canAcceptByTag(r)&&(s.canInsert=!a),s.beforeAfter=!0;else if(this.isModule(r)&&!a)if(this.canInsertBeforeOrAfter(r))s.beforeAfter=!0;else return null;else if(this.isLayout(r))if(this.canInsertBeforeOrAfter(r))s.beforeAfter=!0;else return null;return s}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let Vc=-1;const Yc=(e,t)=>{if(!e||!t)return!1;const i=t.target;if(!i||i.nodeType!==1)return!1;e.pageX;const r=e.pageY,s=st.offset(i),a={},u=15;if(Vc===r||!t||!t.canInsert&&!t.beforeAfter)return!1;if(t.canInsert&&t.beforeAfter)if(r>=s.top-u&&r<=s.top+u)a.position="top",a.action="before";else if(r>=s.top+u&&r<=s.top+s.height/2)a.position="top",a.action="prepend";else if(r>=s.top+s.height/2&&r<=s.bottom-u)a.position="bottom",a.action="append";else if(r>=s.top+s.height/2&&r>=s.bottom-u)a.position="bottom",a.action="after";else return!1;else if(t.beforeAfter)if(r>=s.top-u&&r<=s.top+s.height/2)a.position="top",a.action="before";else if(r>=s.top+s.height/2&&r<=s.bottom+u)a.position="bottom",a.action="after";else return!1;else if(t.canInsert)if(r>=s.top-u&&r<=s.top+s.height/2)a.position="top",a.action="prepend";else if(r>=s.top+s.height/2&&r<=s.bottom+u)a.position="bottom",a.action="append";else return!1;return a},Xc=function(e,t){var i={handle:null,element:null,document,helper:!0},r=this,s={};this.on=function(u,h){s[u]?s[u].push(h):s[u]=[h]},this.dispatch=function(u,h){s[u]&&s[u].forEach(function(b){b.call(this,h)})};var a=function(u){r.settings.document.body.style.scrollBehavior="smooth",r.settings.document.defaultView.scrollTo(0,r.settings.document.defaultView.scrollY+u),r.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=mn.extend({},i,e),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(u){this.element=we(u).get(0),this.settings.handle||(this.settings.handle=this.settings.element),this.handle=this.settings.handle,this.handle.attr("draggable","true")},this.setTargets=function(u){this.targets=we(u)},this.addTarget=function(u){this.targets.push(u)},this.init=function(){this.config(),this.draggable()},this.$data={},this.helper=function(u,h){if(this._helper||(this._helper=we().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),u==="create"){var b=we(r.element).offset();this.$data._calcMinus={y:h.pageY-b.offsetTop,x:h.pageX-b.offsetLeft},this._helper.style.top=u.pageY+"px",this._helper.style.left=u.pageX+"px",this._helper.style.width=r.element.offsetWidth+"px",this._helper.style.height=r.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"}else u==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&u&&(this._helper.style.top=u.pageY-this.$data._calcMinus.y+"px",this._helper.style.left=u.pageX-this.$data._calcMinus.x+"px",this.settings.document.documentElement.classList.add("le-dragging"));return this._helper.innerHTML=r.element.outerHTML,this._helper},this.isDragging=!1,this.dropableService=new Ba(t),this.dropPosition=Yc,this.draggable=function(){we(this.settings.target).on("dragleave",function(u){r.dropIndicator&&r.dropIndicator.hide()}),we(this.settings.target).on("dragover",function(u){if(r.target=null,r.action=null,u.target!==r.element||!r.element.contains(u.target)){var h=r.dropableService.getTarget(u.target,r.element);if(h&&h!==r.element){const b=r.dropPosition(u,h);b?(r.target=h.target,r.action=b.action,r.dropIndicator&&r.dropIndicator.position(r.target,b.action+"-"+b.position)):r.dropIndicator&&r.dropIndicator.hide()}else r.dropIndicator&&r.dropIndicator.hide();r.isDragging&&(r.dispatch("dragOver",{element:r.element,event:u}),u.preventDefault())}}).on("drop",function(u){r.isDragging&&(u.preventDefault(),r.target&&r.action&&we(r.target)[r.action](r.element),r.dropIndicator&&r.dropIndicator.hide(),r.dispatch("drop",{element:r.element,event:u})),r.dropIndicator&&r.dropIndicator.hide()}),this.handle.on("dragstart",function(u){r.isDragging=!0,r.element.id||(r.element.id="mw-element-"+new Date().getTime()),r.element.classList.add("mw-element-is-dragged"),u.dataTransfer.setData("text",r.element.id),u.dataTransfer.effectAllowed="move",r.helper("create",u),r.dispatch("dragStart",{element:r.element,event:u})}).on("drag",function(u){var h=90,b=5;u.clientY<h&&a(-b),u.clientY>innerHeight-(h+(this._helper?this._helper.offsetHeight+10:0))&&a(b),u.dataTransfer.dropEffect="copy",r.dispatch("drag",{element:r.element,event:u}),r.helper(u)}).on("dragend",function(u){r.isDragging=!1,r.element.classList.remove("mw-element-is-dragged"),r.helper("remove"),r.dispatch("dragEnd",{element:r.element,event:u})})},this.init()};var jn,Ai,Oi;class za{constructor(t={}){xt(this,"x",0);xt(this,"y",0);xt(this,"w",0);xt(this,"h",0);xt(this,"listeners",{});At(this,jn,{});xt(this,"activeHandle",null);xt(this,"handles",{});At(this,Ai,!1);At(this,Oi,!0);const i={element:null,document,maxHeight:null,maxWidth:null};this.settings=Object.assign({},i,t),this.element=this.settings.element,this.document=this.settings.document,this.element.classList.add("mw-le-resizable")}on(t,i){ge(this,jn)[t]?ge(this,jn)[t].push(i):ge(this,jn)[t]=[i]}dispatch(t,i){ge(this,jn)[t]&&ge(this,jn)[t].forEach(r=>{r.call(this,i)})}mouseMoveHandler(t){const i=t.clientX-this.x,r=t.clientY-this.y;let s=this.h+r,a;this.activeHandle===this.handles.left?a=this.w-i:a=this.w+i,this.settings.maxWidth&&(a=Math.min(a,this.settings.maxWidth)),this.settings.maxHeight&&(s=Math.min(s,this.settings.maxHeight)),this.element.style.width=`${a}px`,this.element.style.height=`${s}px`,t.preventDefault(),this.dispatch("resize",{height:this.element.offsetHeight,width:this.element.offsetWidth})}mouseUpHandler(){for(const t in this.listeners)this.document.removeEventListener(t,this.listeners[t]);this.listeners={},this.activeHandle=null,this.dispatch("resizeStop")}mouseDownHandler(t){this.x=t.clientX,this.y=t.clientY;const i=this.document.defaultView.getComputedStyle(this.element);this.w=parseInt(i.width,10),this.h=parseInt(i.height,10),this.listeners.mousemove=r=>this.mouseMoveHandler(r),this.listeners.mouseup=r=>this.mouseUpHandler(r);for(const r in this.listeners)this.document.addEventListener(r,this.listeners[r]);this.dispatch("resizeStart")}disable(){Si(this,Ai,!0),Si(this,Oi,!1),this.element.classList.add("mw-le-resizable-disabled")}enable(){Si(this,Ai,!1),Si(this,Oi,!0),this.element.classList.remove("mw-le-resizable-disabled")}disabled(){return ge(this,Ai)}enabled(){return ge(this,Oi)}build(){const t=this.document.createElement("span"),i=this.document.createElement("span"),r=this.document.createElement("span"),s=this.document.createElement("span");this.handles.top=t,this.handles.right=i,this.handles.bottom=r,this.handles.left=s,t.className="mw-le-resizer mw-le-resizer-t",i.className="mw-le-resizer mw-le-resizer-r",s.className="mw-le-resizer mw-le-resizer-l",r.className="mw-le-resizer mw-le-resizer-b",this.element.appendChild(t),this.element.appendChild(i),this.element.appendChild(r),this.element.appendChild(s)}mount(){if(!this.element)return this;if(this.element.dataset.resizable)return this;this.element.dataset.resizable=!0,this.build();const t=this.element.querySelectorAll(".mw-le-resizer");return Array.from(t).forEach(i=>{i.addEventListener("mousedown",r=>{this.mouseDownHandler(r),this.activeHandle=i})}),this.dispatch("ready",{height:this.element.offsetHeight,width:this.element.offsetWidth}),this}}jn=new WeakMap,Ai=new WeakMap,Oi=new WeakMap;globalThis.Resizable=za;var Kc={exports:{}};/*!
 * jQuery JavaScript Library v3.7.0
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-05-11T18:29Z
 */(function(e){(function(t,i){e.exports=t.document?i(t,!0):function(r){if(!r.document)throw new Error("jQuery requires a window with a document");return i(r)}})(typeof window<"u"?window:wa,function(t,i){var r=[],s=Object.getPrototypeOf,a=r.slice,u=r.flat?function(n){return r.flat.call(n)}:function(n){return r.concat.apply([],n)},h=r.push,b=r.indexOf,w={},S=w.toString,D=w.hasOwnProperty,P=D.toString,O=P.call(Object),T={},I=function(o){return typeof o=="function"&&typeof o.nodeType!="number"&&typeof o.item!="function"},j=function(o){return o!=null&&o===o.window},H=t.document,he={type:!0,src:!0,nonce:!0,noModule:!0};function Ae(n,o,l){l=l||H;var d,p,m=l.createElement("script");if(m.text=n,o)for(d in he)p=o[d]||o.getAttribute&&o.getAttribute(d),p&&m.setAttribute(d,p);l.head.appendChild(m).parentNode.removeChild(m)}function xe(n){return n==null?n+"":typeof n=="object"||typeof n=="function"?w[S.call(n)]||"object":typeof n}var Ee="3.7.0",V=/HTML$/i,c=function(n,o){return new c.fn.init(n,o)};c.fn=c.prototype={jquery:Ee,constructor:c,length:0,toArray:function(){return a.call(this)},get:function(n){return n==null?a.call(this):n<0?this[n+this.length]:this[n]},pushStack:function(n){var o=c.merge(this.constructor(),n);return o.prevObject=this,o},each:function(n){return c.each(this,n)},map:function(n){return this.pushStack(c.map(this,function(o,l){return n.call(o,l,o)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(c.grep(this,function(n,o){return(o+1)%2}))},odd:function(){return this.pushStack(c.grep(this,function(n,o){return o%2}))},eq:function(n){var o=this.length,l=+n+(n<0?o:0);return this.pushStack(l>=0&&l<o?[this[l]]:[])},end:function(){return this.prevObject||this.constructor()},push:h,sort:r.sort,splice:r.splice},c.extend=c.fn.extend=function(){var n,o,l,d,p,m,g=arguments[0]||{},C=1,_=arguments.length,N=!1;for(typeof g=="boolean"&&(N=g,g=arguments[C]||{},C++),typeof g!="object"&&!I(g)&&(g={}),C===_&&(g=this,C--);C<_;C++)if((n=arguments[C])!=null)for(o in n)d=n[o],!(o==="__proto__"||g===d)&&(N&&d&&(c.isPlainObject(d)||(p=Array.isArray(d)))?(l=g[o],p&&!Array.isArray(l)?m=[]:!p&&!c.isPlainObject(l)?m={}:m=l,p=!1,g[o]=c.extend(N,m,d)):d!==void 0&&(g[o]=d));return g},c.extend({expando:"jQuery"+(Ee+Math.random()).replace(/\D/g,""),isReady:!0,error:function(n){throw new Error(n)},noop:function(){},isPlainObject:function(n){var o,l;return!n||S.call(n)!=="[object Object]"?!1:(o=s(n),o?(l=D.call(o,"constructor")&&o.constructor,typeof l=="function"&&P.call(l)===O):!0)},isEmptyObject:function(n){var o;for(o in n)return!1;return!0},globalEval:function(n,o,l){Ae(n,{nonce:o&&o.nonce},l)},each:function(n,o){var l,d=0;if(re(n))for(l=n.length;d<l&&o.call(n[d],d,n[d])!==!1;d++);else for(d in n)if(o.call(n[d],d,n[d])===!1)break;return n},text:function(n){var o,l="",d=0,p=n.nodeType;if(p){if(p===1||p===9||p===11)return n.textContent;if(p===3||p===4)return n.nodeValue}else for(;o=n[d++];)l+=c.text(o);return l},makeArray:function(n,o){var l=o||[];return n!=null&&(re(Object(n))?c.merge(l,typeof n=="string"?[n]:n):h.call(l,n)),l},inArray:function(n,o,l){return o==null?-1:b.call(o,n,l)},isXMLDoc:function(n){var o=n&&n.namespaceURI,l=n&&(n.ownerDocument||n).documentElement;return!V.test(o||l&&l.nodeName||"HTML")},merge:function(n,o){for(var l=+o.length,d=0,p=n.length;d<l;d++)n[p++]=o[d];return n.length=p,n},grep:function(n,o,l){for(var d,p=[],m=0,g=n.length,C=!l;m<g;m++)d=!o(n[m],m),d!==C&&p.push(n[m]);return p},map:function(n,o,l){var d,p,m=0,g=[];if(re(n))for(d=n.length;m<d;m++)p=o(n[m],m,l),p!=null&&g.push(p);else for(m in n)p=o(n[m],m,l),p!=null&&g.push(p);return u(g)},guid:1,support:T}),typeof Symbol=="function"&&(c.fn[Symbol.iterator]=r[Symbol.iterator]),c.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(n,o){w["[object "+o+"]"]=o.toLowerCase()});function re(n){var o=!!n&&"length"in n&&n.length,l=xe(n);return I(n)||j(n)?!1:l==="array"||o===0||typeof o=="number"&&o>0&&o-1 in n}function ae(n,o){return n.nodeName&&n.nodeName.toLowerCase()===o.toLowerCase()}var Me=r.pop,Q=r.sort,Z=r.splice,ne="[\\x20\\t\\r\\n\\f]",ue=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g");c.contains=function(n,o){var l=o&&o.parentNode;return n===l||!!(l&&l.nodeType===1&&(n.contains?n.contains(l):n.compareDocumentPosition&&n.compareDocumentPosition(l)&16))};var Ce=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function Je(n,o){return o?n==="\0"?"�":n.slice(0,-1)+"\\"+n.charCodeAt(n.length-1).toString(16)+" ":"\\"+n}c.escapeSelector=function(n){return(n+"").replace(Ce,Je)};var nt=H,it=h;(function(){var n,o,l,d,p,m=it,g,C,_,N,B,W=c.expando,M=0,X=0,me=Or(),Ne=Or(),_e=Or(),vt=Or(),lt=function(x,A){return x===A&&(p=!0),0},an="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ln="(?:\\\\[\\da-fA-F]{1,6}"+ne+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",Oe="\\["+ne+"*("+ln+")(?:"+ne+"*([*^$|!~]?=)"+ne+`*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(`+ln+"))|)"+ne+"*\\]",si=":("+ln+`)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|`+Oe+")*)|.*)\\)|)",Le=new RegExp(ne+"+","g"),et=new RegExp("^"+ne+"*,"+ne+"*"),Xi=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),Co=new RegExp(ne+"|>"),un=new RegExp(si),Ki=new RegExp("^"+ln+"$"),cn={ID:new RegExp("^#("+ln+")"),CLASS:new RegExp("^\\.("+ln+")"),TAG:new RegExp("^("+ln+"|[*])"),ATTR:new RegExp("^"+Oe),PSEUDO:new RegExp("^"+si),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+an+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},Mn=/^(?:input|select|textarea|button)$/i,Pn=/^h\d$/i,jt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,So=/[+~]/,_n=new RegExp("\\\\[\\da-fA-F]{1,6}"+ne+"?|\\\\([^\\r\\n\\f])","g"),En=function(x,A){var L="0x"+x.slice(1)-65536;return A||(L<0?String.fromCharCode(L+65536):String.fromCharCode(L>>10|55296,L&1023|56320))},yu=function(){Hn()},bu=Lr(function(x){return x.disabled===!0&&ae(x,"fieldset")},{dir:"parentNode",next:"legend"});function wu(){try{return g.activeElement}catch{}}try{m.apply(r=a.call(nt.childNodes),nt.childNodes),r[nt.childNodes.length].nodeType}catch{m={apply:function(A,L){it.apply(A,a.call(L))},call:function(A){it.apply(A,a.call(arguments,1))}}}function qe(x,A,L,R){var q,J,ee,se,te,Se,pe,ve=A&&A.ownerDocument,Te=A?A.nodeType:9;if(L=L||[],typeof x!="string"||!x||Te!==1&&Te!==9&&Te!==11)return L;if(!R&&(Hn(A),A=A||g,_)){if(Te!==11&&(te=jt.exec(x)))if(q=te[1]){if(Te===9)if(ee=A.getElementById(q)){if(ee.id===q)return m.call(L,ee),L}else return L;else if(ve&&(ee=ve.getElementById(q))&&qe.contains(A,ee)&&ee.id===q)return m.call(L,ee),L}else{if(te[2])return m.apply(L,A.getElementsByTagName(x)),L;if((q=te[3])&&A.getElementsByClassName)return m.apply(L,A.getElementsByClassName(q)),L}if(!vt[x+" "]&&(!N||!N.test(x))){if(pe=x,ve=A,Te===1&&(Co.test(x)||Xi.test(x))){for(ve=So.test(x)&&To(A.parentNode)||A,(ve!=A||!T.scope)&&((se=A.getAttribute("id"))?se=c.escapeSelector(se):A.setAttribute("id",se=W)),Se=Nr(x),J=Se.length;J--;)Se[J]=(se?"#"+se:":scope")+" "+kr(Se[J]);pe=Se.join(",")}try{return m.apply(L,ve.querySelectorAll(pe)),L}catch{vt(x,!0)}finally{se===W&&A.removeAttribute("id")}}}return Vs(x.replace(ue,"$1"),A,L,R)}function Or(){var x=[];function A(L,R){return x.push(L+" ")>o.cacheLength&&delete A[x.shift()],A[L+" "]=R}return A}function Gt(x){return x[W]=!0,x}function Ei(x){var A=g.createElement("fieldset");try{return!!x(A)}catch{return!1}finally{A.parentNode&&A.parentNode.removeChild(A),A=null}}function xu(x){return function(A){return ae(A,"input")&&A.type===x}}function _u(x){return function(A){return(ae(A,"input")||ae(A,"button"))&&A.type===x}}function Ws(x){return function(A){return"form"in A?A.parentNode&&A.disabled===!1?"label"in A?"label"in A.parentNode?A.parentNode.disabled===x:A.disabled===x:A.isDisabled===x||A.isDisabled!==!x&&bu(A)===x:A.disabled===x:"label"in A?A.disabled===x:!1}}function ai(x){return Gt(function(A){return A=+A,Gt(function(L,R){for(var q,J=x([],L.length,A),ee=J.length;ee--;)L[q=J[ee]]&&(L[q]=!(R[q]=L[q]))})})}function To(x){return x&&typeof x.getElementsByTagName<"u"&&x}function Hn(x){var A,L=x?x.ownerDocument||x:nt;return L==g||L.nodeType!==9||!L.documentElement||(g=L,C=g.documentElement,_=!c.isXMLDoc(g),B=C.matches||C.webkitMatchesSelector||C.msMatchesSelector,nt!=g&&(A=g.defaultView)&&A.top!==A&&A.addEventListener("unload",yu),T.getById=Ei(function(R){return C.appendChild(R).id=c.expando,!g.getElementsByName||!g.getElementsByName(c.expando).length}),T.disconnectedMatch=Ei(function(R){return B.call(R,"*")}),T.scope=Ei(function(){return g.querySelectorAll(":scope")}),T.cssHas=Ei(function(){try{return g.querySelector(":has(*,:jqfake)"),!1}catch{return!0}}),T.getById?(o.filter.ID=function(R){var q=R.replace(_n,En);return function(J){return J.getAttribute("id")===q}},o.find.ID=function(R,q){if(typeof q.getElementById<"u"&&_){var J=q.getElementById(R);return J?[J]:[]}}):(o.filter.ID=function(R){var q=R.replace(_n,En);return function(J){var ee=typeof J.getAttributeNode<"u"&&J.getAttributeNode("id");return ee&&ee.value===q}},o.find.ID=function(R,q){if(typeof q.getElementById<"u"&&_){var J,ee,se,te=q.getElementById(R);if(te){if(J=te.getAttributeNode("id"),J&&J.value===R)return[te];for(se=q.getElementsByName(R),ee=0;te=se[ee++];)if(J=te.getAttributeNode("id"),J&&J.value===R)return[te]}return[]}}),o.find.TAG=function(R,q){return typeof q.getElementsByTagName<"u"?q.getElementsByTagName(R):q.querySelectorAll(R)},o.find.CLASS=function(R,q){if(typeof q.getElementsByClassName<"u"&&_)return q.getElementsByClassName(R)},N=[],Ei(function(R){var q;C.appendChild(R).innerHTML="<a id='"+W+"' href='' disabled='disabled'></a><select id='"+W+"-\r\\' disabled='disabled'><option selected=''></option></select>",R.querySelectorAll("[selected]").length||N.push("\\["+ne+"*(?:value|"+an+")"),R.querySelectorAll("[id~="+W+"-]").length||N.push("~="),R.querySelectorAll("a#"+W+"+*").length||N.push(".#.+[+~]"),R.querySelectorAll(":checked").length||N.push(":checked"),q=g.createElement("input"),q.setAttribute("type","hidden"),R.appendChild(q).setAttribute("name","D"),C.appendChild(R).disabled=!0,R.querySelectorAll(":disabled").length!==2&&N.push(":enabled",":disabled"),q=g.createElement("input"),q.setAttribute("name",""),R.appendChild(q),R.querySelectorAll("[name='']").length||N.push("\\["+ne+"*name"+ne+"*="+ne+`*(?:''|"")`)}),T.cssHas||N.push(":has"),N=N.length&&new RegExp(N.join("|")),lt=function(R,q){if(R===q)return p=!0,0;var J=!R.compareDocumentPosition-!q.compareDocumentPosition;return J||(J=(R.ownerDocument||R)==(q.ownerDocument||q)?R.compareDocumentPosition(q):1,J&1||!T.sortDetached&&q.compareDocumentPosition(R)===J?R===g||R.ownerDocument==nt&&qe.contains(nt,R)?-1:q===g||q.ownerDocument==nt&&qe.contains(nt,q)?1:d?b.call(d,R)-b.call(d,q):0:J&4?-1:1)}),g}qe.matches=function(x,A){return qe(x,null,null,A)},qe.matchesSelector=function(x,A){if(Hn(x),_&&!vt[A+" "]&&(!N||!N.test(A)))try{var L=B.call(x,A);if(L||T.disconnectedMatch||x.document&&x.document.nodeType!==11)return L}catch{vt(A,!0)}return qe(A,g,null,[x]).length>0},qe.contains=function(x,A){return(x.ownerDocument||x)!=g&&Hn(x),c.contains(x,A)},qe.attr=function(x,A){(x.ownerDocument||x)!=g&&Hn(x);var L=o.attrHandle[A.toLowerCase()],R=L&&D.call(o.attrHandle,A.toLowerCase())?L(x,A,!_):void 0;return R!==void 0?R:x.getAttribute(A)},qe.error=function(x){throw new Error("Syntax error, unrecognized expression: "+x)},c.uniqueSort=function(x){var A,L=[],R=0,q=0;if(p=!T.sortStable,d=!T.sortStable&&a.call(x,0),Q.call(x,lt),p){for(;A=x[q++];)A===x[q]&&(R=L.push(q));for(;R--;)Z.call(x,L[R],1)}return d=null,x},c.fn.uniqueSort=function(){return this.pushStack(c.uniqueSort(a.apply(this)))},o=c.expr={cacheLength:50,createPseudo:Gt,match:cn,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(x){return x[1]=x[1].replace(_n,En),x[3]=(x[3]||x[4]||x[5]||"").replace(_n,En),x[2]==="~="&&(x[3]=" "+x[3]+" "),x.slice(0,4)},CHILD:function(x){return x[1]=x[1].toLowerCase(),x[1].slice(0,3)==="nth"?(x[3]||qe.error(x[0]),x[4]=+(x[4]?x[5]+(x[6]||1):2*(x[3]==="even"||x[3]==="odd")),x[5]=+(x[7]+x[8]||x[3]==="odd")):x[3]&&qe.error(x[0]),x},PSEUDO:function(x){var A,L=!x[6]&&x[2];return cn.CHILD.test(x[0])?null:(x[3]?x[2]=x[4]||x[5]||"":L&&un.test(L)&&(A=Nr(L,!0))&&(A=L.indexOf(")",L.length-A)-L.length)&&(x[0]=x[0].slice(0,A),x[2]=L.slice(0,A)),x.slice(0,3))}},filter:{TAG:function(x){var A=x.replace(_n,En).toLowerCase();return x==="*"?function(){return!0}:function(L){return ae(L,A)}},CLASS:function(x){var A=me[x+" "];return A||(A=new RegExp("(^|"+ne+")"+x+"("+ne+"|$)"))&&me(x,function(L){return A.test(typeof L.className=="string"&&L.className||typeof L.getAttribute<"u"&&L.getAttribute("class")||"")})},ATTR:function(x,A,L){return function(R){var q=qe.attr(R,x);return q==null?A==="!=":A?(q+="",A==="="?q===L:A==="!="?q!==L:A==="^="?L&&q.indexOf(L)===0:A==="*="?L&&q.indexOf(L)>-1:A==="$="?L&&q.slice(-L.length)===L:A==="~="?(" "+q.replace(Le," ")+" ").indexOf(L)>-1:A==="|="?q===L||q.slice(0,L.length+1)===L+"-":!1):!0}},CHILD:function(x,A,L,R,q){var J=x.slice(0,3)!=="nth",ee=x.slice(-4)!=="last",se=A==="of-type";return R===1&&q===0?function(te){return!!te.parentNode}:function(te,Se,pe){var ve,Te,fe,Ye,Dt,wt=J!==ee?"nextSibling":"previousSibling",Ft=te.parentNode,dn=se&&te.nodeName.toLowerCase(),Ci=!pe&&!se,Tt=!1;if(Ft){if(J){for(;wt;){for(fe=te;fe=fe[wt];)if(se?ae(fe,dn):fe.nodeType===1)return!1;Dt=wt=x==="only"&&!Dt&&"nextSibling"}return!0}if(Dt=[ee?Ft.firstChild:Ft.lastChild],ee&&Ci){for(Te=Ft[W]||(Ft[W]={}),ve=Te[x]||[],Ye=ve[0]===M&&ve[1],Tt=Ye&&ve[2],fe=Ye&&Ft.childNodes[Ye];fe=++Ye&&fe&&fe[wt]||(Tt=Ye=0)||Dt.pop();)if(fe.nodeType===1&&++Tt&&fe===te){Te[x]=[M,Ye,Tt];break}}else if(Ci&&(Te=te[W]||(te[W]={}),ve=Te[x]||[],Ye=ve[0]===M&&ve[1],Tt=Ye),Tt===!1)for(;(fe=++Ye&&fe&&fe[wt]||(Tt=Ye=0)||Dt.pop())&&!((se?ae(fe,dn):fe.nodeType===1)&&++Tt&&(Ci&&(Te=fe[W]||(fe[W]={}),Te[x]=[M,Tt]),fe===te)););return Tt-=q,Tt===R||Tt%R===0&&Tt/R>=0}}},PSEUDO:function(x,A){var L,R=o.pseudos[x]||o.setFilters[x.toLowerCase()]||qe.error("unsupported pseudo: "+x);return R[W]?R(A):R.length>1?(L=[x,x,"",A],o.setFilters.hasOwnProperty(x.toLowerCase())?Gt(function(q,J){for(var ee,se=R(q,A),te=se.length;te--;)ee=b.call(q,se[te]),q[ee]=!(J[ee]=se[te])}):function(q){return R(q,0,L)}):R}},pseudos:{not:Gt(function(x){var A=[],L=[],R=ko(x.replace(ue,"$1"));return R[W]?Gt(function(q,J,ee,se){for(var te,Se=R(q,null,se,[]),pe=q.length;pe--;)(te=Se[pe])&&(q[pe]=!(J[pe]=te))}):function(q,J,ee){return A[0]=q,R(A,null,ee,L),A[0]=null,!L.pop()}}),has:Gt(function(x){return function(A){return qe(x,A).length>0}}),contains:Gt(function(x){return x=x.replace(_n,En),function(A){return(A.textContent||c.text(A)).indexOf(x)>-1}}),lang:Gt(function(x){return Ki.test(x||"")||qe.error("unsupported lang: "+x),x=x.replace(_n,En).toLowerCase(),function(A){var L;do if(L=_?A.lang:A.getAttribute("xml:lang")||A.getAttribute("lang"))return L=L.toLowerCase(),L===x||L.indexOf(x+"-")===0;while((A=A.parentNode)&&A.nodeType===1);return!1}}),target:function(x){var A=t.location&&t.location.hash;return A&&A.slice(1)===x.id},root:function(x){return x===C},focus:function(x){return x===wu()&&g.hasFocus()&&!!(x.type||x.href||~x.tabIndex)},enabled:Ws(!1),disabled:Ws(!0),checked:function(x){return ae(x,"input")&&!!x.checked||ae(x,"option")&&!!x.selected},selected:function(x){return x.parentNode&&x.parentNode.selectedIndex,x.selected===!0},empty:function(x){for(x=x.firstChild;x;x=x.nextSibling)if(x.nodeType<6)return!1;return!0},parent:function(x){return!o.pseudos.empty(x)},header:function(x){return Pn.test(x.nodeName)},input:function(x){return Mn.test(x.nodeName)},button:function(x){return ae(x,"input")&&x.type==="button"||ae(x,"button")},text:function(x){var A;return ae(x,"input")&&x.type==="text"&&((A=x.getAttribute("type"))==null||A.toLowerCase()==="text")},first:ai(function(){return[0]}),last:ai(function(x,A){return[A-1]}),eq:ai(function(x,A,L){return[L<0?L+A:L]}),even:ai(function(x,A){for(var L=0;L<A;L+=2)x.push(L);return x}),odd:ai(function(x,A){for(var L=1;L<A;L+=2)x.push(L);return x}),lt:ai(function(x,A,L){var R;for(L<0?R=L+A:L>A?R=A:R=L;--R>=0;)x.push(R);return x}),gt:ai(function(x,A,L){for(var R=L<0?L+A:L;++R<A;)x.push(R);return x})}},o.pseudos.nth=o.pseudos.eq;for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})o.pseudos[n]=xu(n);for(n in{submit:!0,reset:!0})o.pseudos[n]=_u(n);function Us(){}Us.prototype=o.filters=o.pseudos,o.setFilters=new Us;function Nr(x,A){var L,R,q,J,ee,se,te,Se=Ne[x+" "];if(Se)return A?0:Se.slice(0);for(ee=x,se=[],te=o.preFilter;ee;){(!L||(R=et.exec(ee)))&&(R&&(ee=ee.slice(R[0].length)||ee),se.push(q=[])),L=!1,(R=Xi.exec(ee))&&(L=R.shift(),q.push({value:L,type:R[0].replace(ue," ")}),ee=ee.slice(L.length));for(J in o.filter)(R=cn[J].exec(ee))&&(!te[J]||(R=te[J](R)))&&(L=R.shift(),q.push({value:L,type:J,matches:R}),ee=ee.slice(L.length));if(!L)break}return A?ee.length:ee?qe.error(x):Ne(x,se).slice(0)}function kr(x){for(var A=0,L=x.length,R="";A<L;A++)R+=x[A].value;return R}function Lr(x,A,L){var R=A.dir,q=A.next,J=q||R,ee=L&&J==="parentNode",se=X++;return A.first?function(te,Se,pe){for(;te=te[R];)if(te.nodeType===1||ee)return x(te,Se,pe);return!1}:function(te,Se,pe){var ve,Te,fe=[M,se];if(pe){for(;te=te[R];)if((te.nodeType===1||ee)&&x(te,Se,pe))return!0}else for(;te=te[R];)if(te.nodeType===1||ee)if(Te=te[W]||(te[W]={}),q&&ae(te,q))te=te[R]||te;else{if((ve=Te[J])&&ve[0]===M&&ve[1]===se)return fe[2]=ve[2];if(Te[J]=fe,fe[2]=x(te,Se,pe))return!0}return!1}}function Ao(x){return x.length>1?function(A,L,R){for(var q=x.length;q--;)if(!x[q](A,L,R))return!1;return!0}:x[0]}function Eu(x,A,L){for(var R=0,q=A.length;R<q;R++)qe(x,A[R],L);return L}function Dr(x,A,L,R,q){for(var J,ee=[],se=0,te=x.length,Se=A!=null;se<te;se++)(J=x[se])&&(!L||L(J,R,q))&&(ee.push(J),Se&&A.push(se));return ee}function Oo(x,A,L,R,q,J){return R&&!R[W]&&(R=Oo(R)),q&&!q[W]&&(q=Oo(q,J)),Gt(function(ee,se,te,Se){var pe,ve,Te,fe,Ye=[],Dt=[],wt=se.length,Ft=ee||Eu(A||"*",te.nodeType?[te]:te,[]),dn=x&&(ee||!A)?Dr(Ft,Ye,x,te,Se):Ft;if(L?(fe=q||(ee?x:wt||R)?[]:se,L(dn,fe,te,Se)):fe=dn,R)for(pe=Dr(fe,Dt),R(pe,[],te,Se),ve=pe.length;ve--;)(Te=pe[ve])&&(fe[Dt[ve]]=!(dn[Dt[ve]]=Te));if(ee){if(q||x){if(q){for(pe=[],ve=fe.length;ve--;)(Te=fe[ve])&&pe.push(dn[ve]=Te);q(null,fe=[],pe,Se)}for(ve=fe.length;ve--;)(Te=fe[ve])&&(pe=q?b.call(ee,Te):Ye[ve])>-1&&(ee[pe]=!(se[pe]=Te))}}else fe=Dr(fe===se?fe.splice(wt,fe.length):fe),q?q(null,se,fe,Se):m.apply(se,fe)})}function No(x){for(var A,L,R,q=x.length,J=o.relative[x[0].type],ee=J||o.relative[" "],se=J?1:0,te=Lr(function(ve){return ve===A},ee,!0),Se=Lr(function(ve){return b.call(A,ve)>-1},ee,!0),pe=[function(ve,Te,fe){var Ye=!J&&(fe||Te!=l)||((A=Te).nodeType?te(ve,Te,fe):Se(ve,Te,fe));return A=null,Ye}];se<q;se++)if(L=o.relative[x[se].type])pe=[Lr(Ao(pe),L)];else{if(L=o.filter[x[se].type].apply(null,x[se].matches),L[W]){for(R=++se;R<q&&!o.relative[x[R].type];R++);return Oo(se>1&&Ao(pe),se>1&&kr(x.slice(0,se-1).concat({value:x[se-2].type===" "?"*":""})).replace(ue,"$1"),L,se<R&&No(x.slice(se,R)),R<q&&No(x=x.slice(R)),R<q&&kr(x))}pe.push(L)}return Ao(pe)}function Cu(x,A){var L=A.length>0,R=x.length>0,q=function(J,ee,se,te,Se){var pe,ve,Te,fe=0,Ye="0",Dt=J&&[],wt=[],Ft=l,dn=J||R&&o.find.TAG("*",Se),Ci=M+=Ft==null?1:Math.random()||.1,Tt=dn.length;for(Se&&(l=ee==g||ee||Se);Ye!==Tt&&(pe=dn[Ye])!=null;Ye++){if(R&&pe){for(ve=0,!ee&&pe.ownerDocument!=g&&(Hn(pe),se=!_);Te=x[ve++];)if(Te(pe,ee||g,se)){m.call(te,pe);break}Se&&(M=Ci)}L&&((pe=!Te&&pe)&&fe--,J&&Dt.push(pe))}if(fe+=Ye,L&&Ye!==fe){for(ve=0;Te=A[ve++];)Te(Dt,wt,ee,se);if(J){if(fe>0)for(;Ye--;)Dt[Ye]||wt[Ye]||(wt[Ye]=Me.call(te));wt=Dr(wt)}m.apply(te,wt),Se&&!J&&wt.length>0&&fe+A.length>1&&c.uniqueSort(te)}return Se&&(M=Ci,l=Ft),Dt};return L?Gt(q):q}function ko(x,A){var L,R=[],q=[],J=_e[x+" "];if(!J){for(A||(A=Nr(x)),L=A.length;L--;)J=No(A[L]),J[W]?R.push(J):q.push(J);J=_e(x,Cu(q,R)),J.selector=x}return J}function Vs(x,A,L,R){var q,J,ee,se,te,Se=typeof x=="function"&&x,pe=!R&&Nr(x=Se.selector||x);if(L=L||[],pe.length===1){if(J=pe[0]=pe[0].slice(0),J.length>2&&(ee=J[0]).type==="ID"&&A.nodeType===9&&_&&o.relative[J[1].type]){if(A=(o.find.ID(ee.matches[0].replace(_n,En),A)||[])[0],A)Se&&(A=A.parentNode);else return L;x=x.slice(J.shift().value.length)}for(q=cn.needsContext.test(x)?0:J.length;q--&&(ee=J[q],!o.relative[se=ee.type]);)if((te=o.find[se])&&(R=te(ee.matches[0].replace(_n,En),So.test(J[0].type)&&To(A.parentNode)||A))){if(J.splice(q,1),x=R.length&&kr(J),!x)return m.apply(L,R),L;break}}return(Se||ko(x,pe))(R,A,!_,L,!A||So.test(x)&&To(A.parentNode)||A),L}T.sortStable=W.split("").sort(lt).join("")===W,Hn(),T.sortDetached=Ei(function(x){return x.compareDocumentPosition(g.createElement("fieldset"))&1}),c.find=qe,c.expr[":"]=c.expr.pseudos,c.unique=c.uniqueSort,qe.compile=ko,qe.select=Vs,qe.setDocument=Hn,qe.escape=c.escapeSelector,qe.getText=c.text,qe.isXML=c.isXMLDoc,qe.selectors=c.expr,qe.support=c.support,qe.uniqueSort=c.uniqueSort})();var yt=function(n,o,l){for(var d=[],p=l!==void 0;(n=n[o])&&n.nodeType!==9;)if(n.nodeType===1){if(p&&c(n).is(l))break;d.push(n)}return d},$t=function(n,o){for(var l=[];n;n=n.nextSibling)n.nodeType===1&&n!==o&&l.push(n);return l},Pt=c.expr.match.needsContext,Wt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function bt(n,o,l){return I(o)?c.grep(n,function(d,p){return!!o.call(d,p,d)!==l}):o.nodeType?c.grep(n,function(d){return d===o!==l}):typeof o!="string"?c.grep(n,function(d){return b.call(o,d)>-1!==l}):c.filter(o,n,l)}c.filter=function(n,o,l){var d=o[0];return l&&(n=":not("+n+")"),o.length===1&&d.nodeType===1?c.find.matchesSelector(d,n)?[d]:[]:c.find.matches(n,c.grep(o,function(p){return p.nodeType===1}))},c.fn.extend({find:function(n){var o,l,d=this.length,p=this;if(typeof n!="string")return this.pushStack(c(n).filter(function(){for(o=0;o<d;o++)if(c.contains(p[o],this))return!0}));for(l=this.pushStack([]),o=0;o<d;o++)c.find(n,p[o],l);return d>1?c.uniqueSort(l):l},filter:function(n){return this.pushStack(bt(this,n||[],!1))},not:function(n){return this.pushStack(bt(this,n||[],!0))},is:function(n){return!!bt(this,typeof n=="string"&&Pt.test(n)?c(n):n||[],!1).length}});var ct,_t=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,We=c.fn.init=function(n,o,l){var d,p;if(!n)return this;if(l=l||ct,typeof n=="string")if(n[0]==="<"&&n[n.length-1]===">"&&n.length>=3?d=[null,n,null]:d=_t.exec(n),d&&(d[1]||!o))if(d[1]){if(o=o instanceof c?o[0]:o,c.merge(this,c.parseHTML(d[1],o&&o.nodeType?o.ownerDocument||o:H,!0)),Wt.test(d[1])&&c.isPlainObject(o))for(d in o)I(this[d])?this[d](o[d]):this.attr(d,o[d]);return this}else return p=H.getElementById(d[2]),p&&(this[0]=p,this.length=1),this;else return!o||o.jquery?(o||l).find(n):this.constructor(o).find(n);else{if(n.nodeType)return this[0]=n,this.length=1,this;if(I(n))return l.ready!==void 0?l.ready(n):n(c)}return c.makeArray(n,this)};We.prototype=c.fn,ct=c(H);var tt=/^(?:parents|prev(?:Until|All))/,Ge={children:!0,contents:!0,next:!0,prev:!0};c.fn.extend({has:function(n){var o=c(n,this),l=o.length;return this.filter(function(){for(var d=0;d<l;d++)if(c.contains(this,o[d]))return!0})},closest:function(n,o){var l,d=0,p=this.length,m=[],g=typeof n!="string"&&c(n);if(!Pt.test(n)){for(;d<p;d++)for(l=this[d];l&&l!==o;l=l.parentNode)if(l.nodeType<11&&(g?g.index(l)>-1:l.nodeType===1&&c.find.matchesSelector(l,n))){m.push(l);break}}return this.pushStack(m.length>1?c.uniqueSort(m):m)},index:function(n){return n?typeof n=="string"?b.call(c(n),this[0]):b.call(this,n.jquery?n[0]:n):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(n,o){return this.pushStack(c.uniqueSort(c.merge(this.get(),c(n,o))))},addBack:function(n){return this.add(n==null?this.prevObject:this.prevObject.filter(n))}});function dt(n,o){for(;(n=n[o])&&n.nodeType!==1;);return n}c.each({parent:function(n){var o=n.parentNode;return o&&o.nodeType!==11?o:null},parents:function(n){return yt(n,"parentNode")},parentsUntil:function(n,o,l){return yt(n,"parentNode",l)},next:function(n){return dt(n,"nextSibling")},prev:function(n){return dt(n,"previousSibling")},nextAll:function(n){return yt(n,"nextSibling")},prevAll:function(n){return yt(n,"previousSibling")},nextUntil:function(n,o,l){return yt(n,"nextSibling",l)},prevUntil:function(n,o,l){return yt(n,"previousSibling",l)},siblings:function(n){return $t((n.parentNode||{}).firstChild,n)},children:function(n){return $t(n.firstChild)},contents:function(n){return n.contentDocument!=null&&s(n.contentDocument)?n.contentDocument:(ae(n,"template")&&(n=n.content||n),c.merge([],n.childNodes))}},function(n,o){c.fn[n]=function(l,d){var p=c.map(this,o,l);return n.slice(-5)!=="Until"&&(d=l),d&&typeof d=="string"&&(p=c.filter(d,p)),this.length>1&&(Ge[n]||c.uniqueSort(p),tt.test(n)&&p.reverse()),this.pushStack(p)}});var Ue=/[^\x20\t\r\n\f]+/g;function Nt(n){var o={};return c.each(n.match(Ue)||[],function(l,d){o[d]=!0}),o}c.Callbacks=function(n){n=typeof n=="string"?Nt(n):c.extend({},n);var o,l,d,p,m=[],g=[],C=-1,_=function(){for(p=p||n.once,d=o=!0;g.length;C=-1)for(l=g.shift();++C<m.length;)m[C].apply(l[0],l[1])===!1&&n.stopOnFalse&&(C=m.length,l=!1);n.memory||(l=!1),o=!1,p&&(l?m=[]:m="")},N={add:function(){return m&&(l&&!o&&(C=m.length-1,g.push(l)),function B(W){c.each(W,function(M,X){I(X)?(!n.unique||!N.has(X))&&m.push(X):X&&X.length&&xe(X)!=="string"&&B(X)})}(arguments),l&&!o&&_()),this},remove:function(){return c.each(arguments,function(B,W){for(var M;(M=c.inArray(W,m,M))>-1;)m.splice(M,1),M<=C&&C--}),this},has:function(B){return B?c.inArray(B,m)>-1:m.length>0},empty:function(){return m&&(m=[]),this},disable:function(){return p=g=[],m=l="",this},disabled:function(){return!m},lock:function(){return p=g=[],!l&&!o&&(m=l=""),this},locked:function(){return!!p},fireWith:function(B,W){return p||(W=W||[],W=[B,W.slice?W.slice():W],g.push(W),o||_()),this},fire:function(){return N.fireWith(this,arguments),this},fired:function(){return!!d}};return N};function Qe(n){return n}function je(n){throw n}function ke(n,o,l,d){var p;try{n&&I(p=n.promise)?p.call(n).done(o).fail(l):n&&I(p=n.then)?p.call(n,o,l):o.apply(void 0,[n].slice(d))}catch(m){l.apply(void 0,[m])}}c.extend({Deferred:function(n){var o=[["notify","progress",c.Callbacks("memory"),c.Callbacks("memory"),2],["resolve","done",c.Callbacks("once memory"),c.Callbacks("once memory"),0,"resolved"],["reject","fail",c.Callbacks("once memory"),c.Callbacks("once memory"),1,"rejected"]],l="pending",d={state:function(){return l},always:function(){return p.done(arguments).fail(arguments),this},catch:function(m){return d.then(null,m)},pipe:function(){var m=arguments;return c.Deferred(function(g){c.each(o,function(C,_){var N=I(m[_[4]])&&m[_[4]];p[_[1]](function(){var B=N&&N.apply(this,arguments);B&&I(B.promise)?B.promise().progress(g.notify).done(g.resolve).fail(g.reject):g[_[0]+"With"](this,N?[B]:arguments)})}),m=null}).promise()},then:function(m,g,C){var _=0;function N(B,W,M,X){return function(){var me=this,Ne=arguments,_e=function(){var lt,an;if(!(B<_)){if(lt=M.apply(me,Ne),lt===W.promise())throw new TypeError("Thenable self-resolution");an=lt&&(typeof lt=="object"||typeof lt=="function")&&lt.then,I(an)?X?an.call(lt,N(_,W,Qe,X),N(_,W,je,X)):(_++,an.call(lt,N(_,W,Qe,X),N(_,W,je,X),N(_,W,Qe,W.notifyWith))):(M!==Qe&&(me=void 0,Ne=[lt]),(X||W.resolveWith)(me,Ne))}},vt=X?_e:function(){try{_e()}catch(lt){c.Deferred.exceptionHook&&c.Deferred.exceptionHook(lt,vt.error),B+1>=_&&(M!==je&&(me=void 0,Ne=[lt]),W.rejectWith(me,Ne))}};B?vt():(c.Deferred.getErrorHook?vt.error=c.Deferred.getErrorHook():c.Deferred.getStackHook&&(vt.error=c.Deferred.getStackHook()),t.setTimeout(vt))}}return c.Deferred(function(B){o[0][3].add(N(0,B,I(C)?C:Qe,B.notifyWith)),o[1][3].add(N(0,B,I(m)?m:Qe)),o[2][3].add(N(0,B,I(g)?g:je))}).promise()},promise:function(m){return m!=null?c.extend(m,d):d}},p={};return c.each(o,function(m,g){var C=g[2],_=g[5];d[g[1]]=C.add,_&&C.add(function(){l=_},o[3-m][2].disable,o[3-m][3].disable,o[0][2].lock,o[0][3].lock),C.add(g[3].fire),p[g[0]]=function(){return p[g[0]+"With"](this===p?void 0:this,arguments),this},p[g[0]+"With"]=C.fireWith}),d.promise(p),n&&n.call(p,p),p},when:function(n){var o=arguments.length,l=o,d=Array(l),p=a.call(arguments),m=c.Deferred(),g=function(C){return function(_){d[C]=this,p[C]=arguments.length>1?a.call(arguments):_,--o||m.resolveWith(d,p)}};if(o<=1&&(ke(n,m.done(g(l)).resolve,m.reject,!o),m.state()==="pending"||I(p[l]&&p[l].then)))return m.then();for(;l--;)ke(p[l],g(l),m.reject);return m.promise()}});var He=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;c.Deferred.exceptionHook=function(n,o){t.console&&t.console.warn&&n&&He.test(n.name)&&t.console.warn("jQuery.Deferred exception: "+n.message,n.stack,o)},c.readyException=function(n){t.setTimeout(function(){throw n})};var Be=c.Deferred();c.fn.ready=function(n){return Be.then(n).catch(function(o){c.readyException(o)}),this},c.extend({isReady:!1,readyWait:1,ready:function(n){(n===!0?--c.readyWait:c.isReady)||(c.isReady=!0,!(n!==!0&&--c.readyWait>0)&&Be.resolveWith(H,[c]))}}),c.ready.then=Be.then;function K(){H.removeEventListener("DOMContentLoaded",K),t.removeEventListener("load",K),c.ready()}H.readyState==="complete"||H.readyState!=="loading"&&!H.documentElement.doScroll?t.setTimeout(c.ready):(H.addEventListener("DOMContentLoaded",K),t.addEventListener("load",K));var Pe=function(n,o,l,d,p,m,g){var C=0,_=n.length,N=l==null;if(xe(l)==="object"){p=!0;for(C in l)Pe(n,o,C,l[C],!0,m,g)}else if(d!==void 0&&(p=!0,I(d)||(g=!0),N&&(g?(o.call(n,d),o=null):(N=o,o=function(B,W,M){return N.call(c(B),M)})),o))for(;C<_;C++)o(n[C],l,g?d:d.call(n[C],C,o(n[C],l)));return p?n:N?o.call(n):_?o(n[0],l):m},ye=/^-ms-/,Ve=/-([a-z])/g;function vn(n,o){return o.toUpperCase()}function Et(n){return n.replace(ye,"ms-").replace(Ve,vn)}var Fe=function(n){return n.nodeType===1||n.nodeType===9||!+n.nodeType};function kt(){this.expando=c.expando+kt.uid++}kt.uid=1,kt.prototype={cache:function(n){var o=n[this.expando];return o||(o={},Fe(n)&&(n.nodeType?n[this.expando]=o:Object.defineProperty(n,this.expando,{value:o,configurable:!0}))),o},set:function(n,o,l){var d,p=this.cache(n);if(typeof o=="string")p[Et(o)]=l;else for(d in o)p[Et(d)]=o[d];return p},get:function(n,o){return o===void 0?this.cache(n):n[this.expando]&&n[this.expando][Et(o)]},access:function(n,o,l){return o===void 0||o&&typeof o=="string"&&l===void 0?this.get(n,o):(this.set(n,o,l),l!==void 0?l:o)},remove:function(n,o){var l,d=n[this.expando];if(d!==void 0){if(o!==void 0)for(Array.isArray(o)?o=o.map(Et):(o=Et(o),o=o in d?[o]:o.match(Ue)||[]),l=o.length;l--;)delete d[o[l]];(o===void 0||c.isEmptyObject(d))&&(n.nodeType?n[this.expando]=void 0:delete n[this.expando])}},hasData:function(n){var o=n[this.expando];return o!==void 0&&!c.isEmptyObject(o)}};var ie=new kt,ze=new kt,Vn=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Zt=/[A-Z]/g;function gi(n){return n==="true"?!0:n==="false"?!1:n==="null"?null:n===+n+""?+n:Vn.test(n)?JSON.parse(n):n}function rt(n,o,l){var d;if(l===void 0&&n.nodeType===1)if(d="data-"+o.replace(Zt,"-$&").toLowerCase(),l=n.getAttribute(d),typeof l=="string"){try{l=gi(l)}catch{}ze.set(n,o,l)}else l=void 0;return l}c.extend({hasData:function(n){return ze.hasData(n)||ie.hasData(n)},data:function(n,o,l){return ze.access(n,o,l)},removeData:function(n,o){ze.remove(n,o)},_data:function(n,o,l){return ie.access(n,o,l)},_removeData:function(n,o){ie.remove(n,o)}}),c.fn.extend({data:function(n,o){var l,d,p,m=this[0],g=m&&m.attributes;if(n===void 0){if(this.length&&(p=ze.get(m),m.nodeType===1&&!ie.get(m,"hasDataAttrs"))){for(l=g.length;l--;)g[l]&&(d=g[l].name,d.indexOf("data-")===0&&(d=Et(d.slice(5)),rt(m,d,p[d])));ie.set(m,"hasDataAttrs",!0)}return p}return typeof n=="object"?this.each(function(){ze.set(this,n)}):Pe(this,function(C){var _;if(m&&C===void 0)return _=ze.get(m,n),_!==void 0||(_=rt(m,n),_!==void 0)?_:void 0;this.each(function(){ze.set(this,n,C)})},null,o,arguments.length>1,null,!0)},removeData:function(n){return this.each(function(){ze.remove(this,n)})}}),c.extend({queue:function(n,o,l){var d;if(n)return o=(o||"fx")+"queue",d=ie.get(n,o),l&&(!d||Array.isArray(l)?d=ie.access(n,o,c.makeArray(l)):d.push(l)),d||[]},dequeue:function(n,o){o=o||"fx";var l=c.queue(n,o),d=l.length,p=l.shift(),m=c._queueHooks(n,o),g=function(){c.dequeue(n,o)};p==="inprogress"&&(p=l.shift(),d--),p&&(o==="fx"&&l.unshift("inprogress"),delete m.stop,p.call(n,g,m)),!d&&m&&m.empty.fire()},_queueHooks:function(n,o){var l=o+"queueHooks";return ie.get(n,l)||ie.access(n,l,{empty:c.Callbacks("once memory").add(function(){ie.remove(n,[o+"queue",l])})})}}),c.fn.extend({queue:function(n,o){var l=2;return typeof n!="string"&&(o=n,n="fx",l--),arguments.length<l?c.queue(this[0],n):o===void 0?this:this.each(function(){var d=c.queue(this,n,o);c._queueHooks(this,n),n==="fx"&&d[0]!=="inprogress"&&c.dequeue(this,n)})},dequeue:function(n){return this.each(function(){c.dequeue(this,n)})},clearQueue:function(n){return this.queue(n||"fx",[])},promise:function(n,o){var l,d=1,p=c.Deferred(),m=this,g=this.length,C=function(){--d||p.resolveWith(m,[m])};for(typeof n!="string"&&(o=n,n=void 0),n=n||"fx";g--;)l=ie.get(m[g],n+"queueHooks"),l&&l.empty&&(d++,l.empty.add(C));return C(),p.promise(o)}});var yn=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,en=new RegExp("^(?:([+-])=|)("+yn+")([a-z%]*)$","i"),Lt=["Top","Right","Bottom","Left"],Ct=H.documentElement,ft=function(n){return c.contains(n.ownerDocument,n)},Ri={composed:!0};Ct.getRootNode&&(ft=function(n){return c.contains(n.ownerDocument,n)||n.getRootNode(Ri)===n.ownerDocument});var Tn=function(n,o){return n=o||n,n.style.display==="none"||n.style.display===""&&ft(n)&&c.css(n,"display")==="none"};function ji(n,o,l,d){var p,m,g=20,C=d?function(){return d.cur()}:function(){return c.css(n,o,"")},_=C(),N=l&&l[3]||(c.cssNumber[o]?"":"px"),B=n.nodeType&&(c.cssNumber[o]||N!=="px"&&+_)&&en.exec(c.css(n,o));if(B&&B[3]!==N){for(_=_/2,N=N||B[3],B=+_||1;g--;)c.style(n,o,B+N),(1-m)*(1-(m=C()/_||.5))<=0&&(g=0),B=B/m;B=B*2,c.style(n,o,B+N),l=l||[]}return l&&(B=+B||+_||0,p=l[1]?B+(l[1]+1)*l[2]:+l[2],d&&(d.unit=N,d.start=B,d.end=p)),p}var Fi={};function Yn(n){var o,l=n.ownerDocument,d=n.nodeName,p=Fi[d];return p||(o=l.body.appendChild(l.createElement(d)),p=c.css(o,"display"),o.parentNode.removeChild(o),p==="none"&&(p="block"),Fi[d]=p,p)}function Mt(n,o){for(var l,d,p=[],m=0,g=n.length;m<g;m++)d=n[m],d.style&&(l=d.style.display,o?(l==="none"&&(p[m]=ie.get(d,"display")||null,p[m]||(d.style.display="")),d.style.display===""&&Tn(d)&&(p[m]=Yn(d))):l!=="none"&&(p[m]="none",ie.set(d,"display",l)));for(m=0;m<g;m++)p[m]!=null&&(n[m].style.display=p[m]);return n}c.fn.extend({show:function(){return Mt(this,!0)},hide:function(){return Mt(this)},toggle:function(n){return typeof n=="boolean"?n?this.show():this.hide():this.each(function(){Tn(this)?c(this).show():c(this).hide()})}});var Ut=/^(?:checkbox|radio)$/i,An=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Xn=/^$|^module$|\/(?:java|ecma)script/i;(function(){var n=H.createDocumentFragment(),o=n.appendChild(H.createElement("div")),l=H.createElement("input");l.setAttribute("type","radio"),l.setAttribute("checked","checked"),l.setAttribute("name","t"),o.appendChild(l),T.checkClone=o.cloneNode(!0).cloneNode(!0).lastChild.checked,o.innerHTML="<textarea>x</textarea>",T.noCloneChecked=!!o.cloneNode(!0).lastChild.defaultValue,o.innerHTML="<option></option>",T.option=!!o.lastChild})();var gt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};gt.tbody=gt.tfoot=gt.colgroup=gt.caption=gt.thead,gt.th=gt.td,T.option||(gt.optgroup=gt.option=[1,"<select multiple='multiple'>","</select>"]);function Ie(n,o){var l;return typeof n.getElementsByTagName<"u"?l=n.getElementsByTagName(o||"*"):typeof n.querySelectorAll<"u"?l=n.querySelectorAll(o||"*"):l=[],o===void 0||o&&ae(n,o)?c.merge([n],l):l}function Kn(n,o){for(var l=0,d=n.length;l<d;l++)ie.set(n[l],"globalEval",!o||ie.get(o[l],"globalEval"))}var Bi=/<|&#?\w+;/;function Gn(n,o,l,d,p){for(var m,g,C,_,N,B,W=o.createDocumentFragment(),M=[],X=0,me=n.length;X<me;X++)if(m=n[X],m||m===0)if(xe(m)==="object")c.merge(M,m.nodeType?[m]:m);else if(!Bi.test(m))M.push(o.createTextNode(m));else{for(g=g||W.appendChild(o.createElement("div")),C=(An.exec(m)||["",""])[1].toLowerCase(),_=gt[C]||gt._default,g.innerHTML=_[1]+c.htmlPrefilter(m)+_[2],B=_[0];B--;)g=g.lastChild;c.merge(M,g.childNodes),g=W.firstChild,g.textContent=""}for(W.textContent="",X=0;m=M[X++];){if(d&&c.inArray(m,d)>-1){p&&p.push(m);continue}if(N=ft(m),g=Ie(W.appendChild(m),"script"),N&&Kn(g),l)for(B=0;m=g[B++];)Xn.test(m.type||"")&&l.push(m)}return W}var Jn=/^([^.]*)(?:\.(.+)|)/;function Vt(){return!0}function bn(){return!1}function zi(n,o,l,d,p,m){var g,C;if(typeof o=="object"){typeof l!="string"&&(d=d||l,l=void 0);for(C in o)zi(n,C,l,d,o[C],m);return n}if(d==null&&p==null?(p=l,d=l=void 0):p==null&&(typeof l=="string"?(p=d,d=void 0):(p=d,d=l,l=void 0)),p===!1)p=bn;else if(!p)return n;return m===1&&(g=p,p=function(_){return c().off(_),g.apply(this,arguments)},p.guid=g.guid||(g.guid=c.guid++)),n.each(function(){c.event.add(this,o,p,d,l)})}c.event={global:{},add:function(n,o,l,d,p){var m,g,C,_,N,B,W,M,X,me,Ne,_e=ie.get(n);if(Fe(n))for(l.handler&&(m=l,l=m.handler,p=m.selector),p&&c.find.matchesSelector(Ct,p),l.guid||(l.guid=c.guid++),(_=_e.events)||(_=_e.events=Object.create(null)),(g=_e.handle)||(g=_e.handle=function(vt){return typeof c<"u"&&c.event.triggered!==vt.type?c.event.dispatch.apply(n,arguments):void 0}),o=(o||"").match(Ue)||[""],N=o.length;N--;)C=Jn.exec(o[N])||[],X=Ne=C[1],me=(C[2]||"").split(".").sort(),X&&(W=c.event.special[X]||{},X=(p?W.delegateType:W.bindType)||X,W=c.event.special[X]||{},B=c.extend({type:X,origType:Ne,data:d,handler:l,guid:l.guid,selector:p,needsContext:p&&c.expr.match.needsContext.test(p),namespace:me.join(".")},m),(M=_[X])||(M=_[X]=[],M.delegateCount=0,(!W.setup||W.setup.call(n,d,me,g)===!1)&&n.addEventListener&&n.addEventListener(X,g)),W.add&&(W.add.call(n,B),B.handler.guid||(B.handler.guid=l.guid)),p?M.splice(M.delegateCount++,0,B):M.push(B),c.event.global[X]=!0)},remove:function(n,o,l,d,p){var m,g,C,_,N,B,W,M,X,me,Ne,_e=ie.hasData(n)&&ie.get(n);if(!(!_e||!(_=_e.events))){for(o=(o||"").match(Ue)||[""],N=o.length;N--;){if(C=Jn.exec(o[N])||[],X=Ne=C[1],me=(C[2]||"").split(".").sort(),!X){for(X in _)c.event.remove(n,X+o[N],l,d,!0);continue}for(W=c.event.special[X]||{},X=(d?W.delegateType:W.bindType)||X,M=_[X]||[],C=C[2]&&new RegExp("(^|\\.)"+me.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=m=M.length;m--;)B=M[m],(p||Ne===B.origType)&&(!l||l.guid===B.guid)&&(!C||C.test(B.namespace))&&(!d||d===B.selector||d==="**"&&B.selector)&&(M.splice(m,1),B.selector&&M.delegateCount--,W.remove&&W.remove.call(n,B));g&&!M.length&&((!W.teardown||W.teardown.call(n,me,_e.handle)===!1)&&c.removeEvent(n,X,_e.handle),delete _[X])}c.isEmptyObject(_)&&ie.remove(n,"handle events")}},dispatch:function(n){var o,l,d,p,m,g,C=new Array(arguments.length),_=c.event.fix(n),N=(ie.get(this,"events")||Object.create(null))[_.type]||[],B=c.event.special[_.type]||{};for(C[0]=_,o=1;o<arguments.length;o++)C[o]=arguments[o];if(_.delegateTarget=this,!(B.preDispatch&&B.preDispatch.call(this,_)===!1)){for(g=c.event.handlers.call(this,_,N),o=0;(p=g[o++])&&!_.isPropagationStopped();)for(_.currentTarget=p.elem,l=0;(m=p.handlers[l++])&&!_.isImmediatePropagationStopped();)(!_.rnamespace||m.namespace===!1||_.rnamespace.test(m.namespace))&&(_.handleObj=m,_.data=m.data,d=((c.event.special[m.origType]||{}).handle||m.handler).apply(p.elem,C),d!==void 0&&(_.result=d)===!1&&(_.preventDefault(),_.stopPropagation()));return B.postDispatch&&B.postDispatch.call(this,_),_.result}},handlers:function(n,o){var l,d,p,m,g,C=[],_=o.delegateCount,N=n.target;if(_&&N.nodeType&&!(n.type==="click"&&n.button>=1)){for(;N!==this;N=N.parentNode||this)if(N.nodeType===1&&!(n.type==="click"&&N.disabled===!0)){for(m=[],g={},l=0;l<_;l++)d=o[l],p=d.selector+" ",g[p]===void 0&&(g[p]=d.needsContext?c(p,this).index(N)>-1:c.find(p,this,null,[N]).length),g[p]&&m.push(d);m.length&&C.push({elem:N,handlers:m})}}return N=this,_<o.length&&C.push({elem:N,handlers:o.slice(_)}),C},addProp:function(n,o){Object.defineProperty(c.Event.prototype,n,{enumerable:!0,configurable:!0,get:I(o)?function(){if(this.originalEvent)return o(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[n]},set:function(l){Object.defineProperty(this,n,{enumerable:!0,configurable:!0,writable:!0,value:l})}})},fix:function(n){return n[c.expando]?n:new c.Event(n)},special:{load:{noBubble:!0},click:{setup:function(n){var o=this||n;return Ut.test(o.type)&&o.click&&ae(o,"input")&&Qn(o,"click",!0),!1},trigger:function(n){var o=this||n;return Ut.test(o.type)&&o.click&&ae(o,"input")&&Qn(o,"click"),!0},_default:function(n){var o=n.target;return Ut.test(o.type)&&o.click&&ae(o,"input")&&ie.get(o,"click")||ae(o,"a")}},beforeunload:{postDispatch:function(n){n.result!==void 0&&n.originalEvent&&(n.originalEvent.returnValue=n.result)}}}};function Qn(n,o,l){if(!l){ie.get(n,o)===void 0&&c.event.add(n,o,Vt);return}ie.set(n,o,!1),c.event.add(n,o,{namespace:!1,handler:function(d){var p,m=ie.get(this,o);if(d.isTrigger&1&&this[o]){if(m)(c.event.special[o]||{}).delegateType&&d.stopPropagation();else if(m=a.call(arguments),ie.set(this,o,m),this[o](),p=ie.get(this,o),ie.set(this,o,!1),m!==p)return d.stopImmediatePropagation(),d.preventDefault(),p}else m&&(ie.set(this,o,c.event.trigger(m[0],m.slice(1),this)),d.stopPropagation(),d.isImmediatePropagationStopped=Vt)}})}c.removeEvent=function(n,o,l){n.removeEventListener&&n.removeEventListener(o,l)},c.Event=function(n,o){if(!(this instanceof c.Event))return new c.Event(n,o);n&&n.type?(this.originalEvent=n,this.type=n.type,this.isDefaultPrevented=n.defaultPrevented||n.defaultPrevented===void 0&&n.returnValue===!1?Vt:bn,this.target=n.target&&n.target.nodeType===3?n.target.parentNode:n.target,this.currentTarget=n.currentTarget,this.relatedTarget=n.relatedTarget):this.type=n,o&&c.extend(this,o),this.timeStamp=n&&n.timeStamp||Date.now(),this[c.expando]=!0},c.Event.prototype={constructor:c.Event,isDefaultPrevented:bn,isPropagationStopped:bn,isImmediatePropagationStopped:bn,isSimulated:!1,preventDefault:function(){var n=this.originalEvent;this.isDefaultPrevented=Vt,n&&!this.isSimulated&&n.preventDefault()},stopPropagation:function(){var n=this.originalEvent;this.isPropagationStopped=Vt,n&&!this.isSimulated&&n.stopPropagation()},stopImmediatePropagation:function(){var n=this.originalEvent;this.isImmediatePropagationStopped=Vt,n&&!this.isSimulated&&n.stopImmediatePropagation(),this.stopPropagation()}},c.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},c.event.addProp),c.each({focus:"focusin",blur:"focusout"},function(n,o){function l(d){if(H.documentMode){var p=ie.get(this,"handle"),m=c.event.fix(d);m.type=d.type==="focusin"?"focus":"blur",m.isSimulated=!0,p(d),m.target===m.currentTarget&&p(m)}else c.event.simulate(o,d.target,c.event.fix(d))}c.event.special[n]={setup:function(){var d;if(Qn(this,n,!0),H.documentMode)d=ie.get(this,o),d||this.addEventListener(o,l),ie.set(this,o,(d||0)+1);else return!1},trigger:function(){return Qn(this,n),!0},teardown:function(){var d;if(H.documentMode)d=ie.get(this,o)-1,d?ie.set(this,o,d):(this.removeEventListener(o,l),ie.remove(this,o));else return!1},_default:function(d){return ie.get(d.target,n)},delegateType:o},c.event.special[o]={setup:function(){var d=this.ownerDocument||this.document||this,p=H.documentMode?this:d,m=ie.get(p,o);m||(H.documentMode?this.addEventListener(o,l):d.addEventListener(n,l,!0)),ie.set(p,o,(m||0)+1)},teardown:function(){var d=this.ownerDocument||this.document||this,p=H.documentMode?this:d,m=ie.get(p,o)-1;m?ie.set(p,o,m):(H.documentMode?this.removeEventListener(o,l):d.removeEventListener(n,l,!0),ie.remove(p,o))}}}),c.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(n,o){c.event.special[n]={delegateType:o,bindType:o,handle:function(l){var d,p=this,m=l.relatedTarget,g=l.handleObj;return(!m||m!==p&&!c.contains(p,m))&&(l.type=g.origType,d=g.handler.apply(this,arguments),l.type=o),d}}}),c.fn.extend({on:function(n,o,l,d){return zi(this,n,o,l,d)},one:function(n,o,l,d){return zi(this,n,o,l,d,1)},off:function(n,o,l){var d,p;if(n&&n.preventDefault&&n.handleObj)return d=n.handleObj,c(n.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if(typeof n=="object"){for(p in n)this.off(p,o,n[p]);return this}return(o===!1||typeof o=="function")&&(l=o,o=void 0),l===!1&&(l=bn),this.each(function(){c.event.remove(this,n,l,o)})}});var vr=/<script|<style|<link/i,yo=/checked\s*(?:[^=]|=\s*.checked.)/i,bo=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function qi(n,o){return ae(n,"table")&&ae(o.nodeType!==11?o:o.firstChild,"tr")&&c(n).children("tbody")[0]||n}function yr(n){return n.type=(n.getAttribute("type")!==null)+"/"+n.type,n}function br(n){return(n.type||"").slice(0,5)==="true/"?n.type=n.type.slice(5):n.removeAttribute("type"),n}function tn(n,o){var l,d,p,m,g,C,_;if(o.nodeType===1){if(ie.hasData(n)&&(m=ie.get(n),_=m.events,_)){ie.remove(o,"handle events");for(p in _)for(l=0,d=_[p].length;l<d;l++)c.event.add(o,p,_[p][l])}ze.hasData(n)&&(g=ze.access(n),C=c.extend({},g),ze.set(o,C))}}function wo(n,o){var l=o.nodeName.toLowerCase();l==="input"&&Ut.test(n.type)?o.checked=n.checked:(l==="input"||l==="textarea")&&(o.defaultValue=n.defaultValue)}function ce(n,o,l,d){o=u(o);var p,m,g,C,_,N,B=0,W=n.length,M=W-1,X=o[0],me=I(X);if(me||W>1&&typeof X=="string"&&!T.checkClone&&yo.test(X))return n.each(function(Ne){var _e=n.eq(Ne);me&&(o[0]=X.call(this,Ne,_e.html())),ce(_e,o,l,d)});if(W&&(p=Gn(o,n[0].ownerDocument,!1,n,d),m=p.firstChild,p.childNodes.length===1&&(p=m),m||d)){for(g=c.map(Ie(p,"script"),yr),C=g.length;B<W;B++)_=p,B!==M&&(_=c.clone(_,!0,!0),C&&c.merge(g,Ie(_,"script"))),l.call(n[B],_,B);if(C)for(N=g[g.length-1].ownerDocument,c.map(g,br),B=0;B<C;B++)_=g[B],Xn.test(_.type||"")&&!ie.access(_,"globalEval")&&c.contains(N,_)&&(_.src&&(_.type||"").toLowerCase()!=="module"?c._evalUrl&&!_.noModule&&c._evalUrl(_.src,{nonce:_.nonce||_.getAttribute("nonce")},N):Ae(_.textContent.replace(bo,""),_,N))}return n}function wr(n,o,l){for(var d,p=o?c.filter(o,n):n,m=0;(d=p[m])!=null;m++)!l&&d.nodeType===1&&c.cleanData(Ie(d)),d.parentNode&&(l&&ft(d)&&Kn(Ie(d,"script")),d.parentNode.removeChild(d));return n}c.extend({htmlPrefilter:function(n){return n},clone:function(n,o,l){var d,p,m,g,C=n.cloneNode(!0),_=ft(n);if(!T.noCloneChecked&&(n.nodeType===1||n.nodeType===11)&&!c.isXMLDoc(n))for(g=Ie(C),m=Ie(n),d=0,p=m.length;d<p;d++)wo(m[d],g[d]);if(o)if(l)for(m=m||Ie(n),g=g||Ie(C),d=0,p=m.length;d<p;d++)tn(m[d],g[d]);else tn(n,C);return g=Ie(C,"script"),g.length>0&&Kn(g,!_&&Ie(n,"script")),C},cleanData:function(n){for(var o,l,d,p=c.event.special,m=0;(l=n[m])!==void 0;m++)if(Fe(l)){if(o=l[ie.expando]){if(o.events)for(d in o.events)p[d]?c.event.remove(l,d):c.removeEvent(l,d,o.handle);l[ie.expando]=void 0}l[ze.expando]&&(l[ze.expando]=void 0)}}}),c.fn.extend({detach:function(n){return wr(this,n,!0)},remove:function(n){return wr(this,n)},text:function(n){return Pe(this,function(o){return o===void 0?c.text(this):this.empty().each(function(){(this.nodeType===1||this.nodeType===11||this.nodeType===9)&&(this.textContent=o)})},null,n,arguments.length)},append:function(){return ce(this,arguments,function(n){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var o=qi(this,n);o.appendChild(n)}})},prepend:function(){return ce(this,arguments,function(n){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var o=qi(this,n);o.insertBefore(n,o.firstChild)}})},before:function(){return ce(this,arguments,function(n){this.parentNode&&this.parentNode.insertBefore(n,this)})},after:function(){return ce(this,arguments,function(n){this.parentNode&&this.parentNode.insertBefore(n,this.nextSibling)})},empty:function(){for(var n,o=0;(n=this[o])!=null;o++)n.nodeType===1&&(c.cleanData(Ie(n,!1)),n.textContent="");return this},clone:function(n,o){return n=n??!1,o=o??n,this.map(function(){return c.clone(this,n,o)})},html:function(n){return Pe(this,function(o){var l=this[0]||{},d=0,p=this.length;if(o===void 0&&l.nodeType===1)return l.innerHTML;if(typeof o=="string"&&!vr.test(o)&&!gt[(An.exec(o)||["",""])[1].toLowerCase()]){o=c.htmlPrefilter(o);try{for(;d<p;d++)l=this[d]||{},l.nodeType===1&&(c.cleanData(Ie(l,!1)),l.innerHTML=o);l=0}catch{}}l&&this.empty().append(o)},null,n,arguments.length)},replaceWith:function(){var n=[];return ce(this,arguments,function(o){var l=this.parentNode;c.inArray(this,n)<0&&(c.cleanData(Ie(this)),l&&l.replaceChild(o,this))},n)}}),c.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(n,o){c.fn[n]=function(l){for(var d,p=[],m=c(l),g=m.length-1,C=0;C<=g;C++)d=C===g?this:this.clone(!0),c(m[C])[o](d),h.apply(p,d.get());return this.pushStack(p)}});var On=new RegExp("^("+yn+")(?!px)[a-z%]+$","i"),Zn=/^--/,vi=function(n){var o=n.ownerDocument.defaultView;return(!o||!o.opener)&&(o=t),o.getComputedStyle(n)},xr=function(n,o,l){var d,p,m={};for(p in o)m[p]=n.style[p],n.style[p]=o[p];d=l.call(n);for(p in o)n.style[p]=m[p];return d},xo=new RegExp(Lt.join("|"),"i");(function(){function n(){if(N){_.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",N.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Ct.appendChild(_).appendChild(N);var B=t.getComputedStyle(N);l=B.top!=="1%",C=o(B.marginLeft)===12,N.style.right="60%",m=o(B.right)===36,d=o(B.width)===36,N.style.position="absolute",p=o(N.offsetWidth/3)===12,Ct.removeChild(_),N=null}}function o(B){return Math.round(parseFloat(B))}var l,d,p,m,g,C,_=H.createElement("div"),N=H.createElement("div");N.style&&(N.style.backgroundClip="content-box",N.cloneNode(!0).style.backgroundClip="",T.clearCloneStyle=N.style.backgroundClip==="content-box",c.extend(T,{boxSizingReliable:function(){return n(),d},pixelBoxStyles:function(){return n(),m},pixelPosition:function(){return n(),l},reliableMarginLeft:function(){return n(),C},scrollboxSize:function(){return n(),p},reliableTrDimensions:function(){var B,W,M,X;return g==null&&(B=H.createElement("table"),W=H.createElement("tr"),M=H.createElement("div"),B.style.cssText="position:absolute;left:-11111px;border-collapse:separate",W.style.cssText="border:1px solid",W.style.height="1px",M.style.height="9px",M.style.display="block",Ct.appendChild(B).appendChild(W).appendChild(M),X=t.getComputedStyle(W),g=parseInt(X.height,10)+parseInt(X.borderTopWidth,10)+parseInt(X.borderBottomWidth,10)===W.offsetHeight,Ct.removeChild(B)),g}}))})();function ei(n,o,l){var d,p,m,g,C=Zn.test(o),_=n.style;return l=l||vi(n),l&&(g=l.getPropertyValue(o)||l[o],C&&g&&(g=g.replace(ue,"$1")||void 0),g===""&&!ft(n)&&(g=c.style(n,o)),!T.pixelBoxStyles()&&On.test(g)&&xo.test(o)&&(d=_.width,p=_.minWidth,m=_.maxWidth,_.minWidth=_.maxWidth=_.width=g,g=l.width,_.width=d,_.minWidth=p,_.maxWidth=m)),g!==void 0?g+"":g}function _r(n,o){return{get:function(){if(n()){delete this.get;return}return(this.get=o).apply(this,arguments)}}}var Er=["Webkit","Moz","ms"],Cr=H.createElement("div").style,ti={};function $i(n){for(var o=n[0].toUpperCase()+n.slice(1),l=Er.length;l--;)if(n=Er[l]+o,n in Cr)return n}function Xe(n){var o=c.cssProps[n]||ti[n];return o||(n in Cr?n:ti[n]=$i(n)||n)}var ni=/^(none|table(?!-c[ea]).+)/,Wi={position:"absolute",visibility:"hidden",display:"block"},yi={letterSpacing:"0",fontWeight:"400"};function bi(n,o,l){var d=en.exec(o);return d?Math.max(0,d[2]-(l||0))+(d[3]||"px"):o}function ii(n,o,l,d,p,m){var g=o==="width"?1:0,C=0,_=0,N=0;if(l===(d?"border":"content"))return 0;for(;g<4;g+=2)l==="margin"&&(N+=c.css(n,l+Lt[g],!0,p)),d?(l==="content"&&(_-=c.css(n,"padding"+Lt[g],!0,p)),l!=="margin"&&(_-=c.css(n,"border"+Lt[g]+"Width",!0,p))):(_+=c.css(n,"padding"+Lt[g],!0,p),l!=="padding"?_+=c.css(n,"border"+Lt[g]+"Width",!0,p):C+=c.css(n,"border"+Lt[g]+"Width",!0,p));return!d&&m>=0&&(_+=Math.max(0,Math.ceil(n["offset"+o[0].toUpperCase()+o.slice(1)]-m-_-C-.5))||0),_+N}function ri(n,o,l){var d=vi(n),p=!T.boxSizingReliable()||l,m=p&&c.css(n,"boxSizing",!1,d)==="border-box",g=m,C=ei(n,o,d),_="offset"+o[0].toUpperCase()+o.slice(1);if(On.test(C)){if(!l)return C;C="auto"}return(!T.boxSizingReliable()&&m||!T.reliableTrDimensions()&&ae(n,"tr")||C==="auto"||!parseFloat(C)&&c.css(n,"display",!1,d)==="inline")&&n.getClientRects().length&&(m=c.css(n,"boxSizing",!1,d)==="border-box",g=_ in n,g&&(C=n[_])),C=parseFloat(C)||0,C+ii(n,o,l||(m?"border":"content"),g,d,C)+"px"}c.extend({cssHooks:{opacity:{get:function(n,o){if(o){var l=ei(n,"opacity");return l===""?"1":l}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(n,o,l,d){if(!(!n||n.nodeType===3||n.nodeType===8||!n.style)){var p,m,g,C=Et(o),_=Zn.test(o),N=n.style;if(_||(o=Xe(C)),g=c.cssHooks[o]||c.cssHooks[C],l!==void 0){if(m=typeof l,m==="string"&&(p=en.exec(l))&&p[1]&&(l=ji(n,o,p),m="number"),l==null||l!==l)return;m==="number"&&!_&&(l+=p&&p[3]||(c.cssNumber[C]?"":"px")),!T.clearCloneStyle&&l===""&&o.indexOf("background")===0&&(N[o]="inherit"),(!g||!("set"in g)||(l=g.set(n,l,d))!==void 0)&&(_?N.setProperty(o,l):N[o]=l)}else return g&&"get"in g&&(p=g.get(n,!1,d))!==void 0?p:N[o]}},css:function(n,o,l,d){var p,m,g,C=Et(o),_=Zn.test(o);return _||(o=Xe(C)),g=c.cssHooks[o]||c.cssHooks[C],g&&"get"in g&&(p=g.get(n,!0,l)),p===void 0&&(p=ei(n,o,d)),p==="normal"&&o in yi&&(p=yi[o]),l===""||l?(m=parseFloat(p),l===!0||isFinite(m)?m||0:p):p}}),c.each(["height","width"],function(n,o){c.cssHooks[o]={get:function(l,d,p){if(d)return ni.test(c.css(l,"display"))&&(!l.getClientRects().length||!l.getBoundingClientRect().width)?xr(l,Wi,function(){return ri(l,o,p)}):ri(l,o,p)},set:function(l,d,p){var m,g=vi(l),C=!T.scrollboxSize()&&g.position==="absolute",_=C||p,N=_&&c.css(l,"boxSizing",!1,g)==="border-box",B=p?ii(l,o,p,N,g):0;return N&&C&&(B-=Math.ceil(l["offset"+o[0].toUpperCase()+o.slice(1)]-parseFloat(g[o])-ii(l,o,"border",!1,g)-.5)),B&&(m=en.exec(d))&&(m[3]||"px")!=="px"&&(l.style[o]=d,d=c.css(l,o)),bi(l,d,B)}}}),c.cssHooks.marginLeft=_r(T.reliableMarginLeft,function(n,o){if(o)return(parseFloat(ei(n,"marginLeft"))||n.getBoundingClientRect().left-xr(n,{marginLeft:0},function(){return n.getBoundingClientRect().left}))+"px"}),c.each({margin:"",padding:"",border:"Width"},function(n,o){c.cssHooks[n+o]={expand:function(l){for(var d=0,p={},m=typeof l=="string"?l.split(" "):[l];d<4;d++)p[n+Lt[d]+o]=m[d]||m[d-2]||m[0];return p}},n!=="margin"&&(c.cssHooks[n+o].set=bi)}),c.fn.extend({css:function(n,o){return Pe(this,function(l,d,p){var m,g,C={},_=0;if(Array.isArray(d)){for(m=vi(l),g=d.length;_<g;_++)C[d[_]]=c.css(l,d[_],!1,m);return C}return p!==void 0?c.style(l,d,p):c.css(l,d)},n,o,arguments.length>1)}});function ot(n,o,l,d,p){return new ot.prototype.init(n,o,l,d,p)}c.Tween=ot,ot.prototype={constructor:ot,init:function(n,o,l,d,p,m){this.elem=n,this.prop=l,this.easing=p||c.easing._default,this.options=o,this.start=this.now=this.cur(),this.end=d,this.unit=m||(c.cssNumber[l]?"":"px")},cur:function(){var n=ot.propHooks[this.prop];return n&&n.get?n.get(this):ot.propHooks._default.get(this)},run:function(n){var o,l=ot.propHooks[this.prop];return this.options.duration?this.pos=o=c.easing[this.easing](n,this.options.duration*n,0,1,this.options.duration):this.pos=o=n,this.now=(this.end-this.start)*o+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),l&&l.set?l.set(this):ot.propHooks._default.set(this),this}},ot.prototype.init.prototype=ot.prototype,ot.propHooks={_default:{get:function(n){var o;return n.elem.nodeType!==1||n.elem[n.prop]!=null&&n.elem.style[n.prop]==null?n.elem[n.prop]:(o=c.css(n.elem,n.prop,""),!o||o==="auto"?0:o)},set:function(n){c.fx.step[n.prop]?c.fx.step[n.prop](n):n.elem.nodeType===1&&(c.cssHooks[n.prop]||n.elem.style[Xe(n.prop)]!=null)?c.style(n.elem,n.prop,n.now+n.unit):n.elem[n.prop]=n.now}}},ot.propHooks.scrollTop=ot.propHooks.scrollLeft={set:function(n){n.elem.nodeType&&n.elem.parentNode&&(n.elem[n.prop]=n.now)}},c.easing={linear:function(n){return n},swing:function(n){return .5-Math.cos(n*Math.PI)/2},_default:"swing"},c.fx=ot.prototype.init,c.fx.step={};var Nn,wn,Sr=/^(?:toggle|show|hide)$/,Ui=/queueHooks$/;function wi(){wn&&(H.hidden===!1&&t.requestAnimationFrame?t.requestAnimationFrame(wi):t.setTimeout(wi,c.fx.interval),c.fx.tick())}function xi(){return t.setTimeout(function(){Nn=void 0}),Nn=Date.now()}function kn(n,o){var l,d=0,p={height:n};for(o=o?1:0;d<4;d+=2-o)l=Lt[d],p["margin"+l]=p["padding"+l]=n;return o&&(p.opacity=p.width=n),p}function Tr(n,o,l){for(var d,p=(v.tweeners[o]||[]).concat(v.tweeners["*"]),m=0,g=p.length;m<g;m++)if(d=p[m].call(l,o,n))return d}function f(n,o,l){var d,p,m,g,C,_,N,B,W="width"in o||"height"in o,M=this,X={},me=n.style,Ne=n.nodeType&&Tn(n),_e=ie.get(n,"fxshow");l.queue||(g=c._queueHooks(n,"fx"),g.unqueued==null&&(g.unqueued=0,C=g.empty.fire,g.empty.fire=function(){g.unqueued||C()}),g.unqueued++,M.always(function(){M.always(function(){g.unqueued--,c.queue(n,"fx").length||g.empty.fire()})}));for(d in o)if(p=o[d],Sr.test(p)){if(delete o[d],m=m||p==="toggle",p===(Ne?"hide":"show"))if(p==="show"&&_e&&_e[d]!==void 0)Ne=!0;else continue;X[d]=_e&&_e[d]||c.style(n,d)}if(_=!c.isEmptyObject(o),!(!_&&c.isEmptyObject(X))){W&&n.nodeType===1&&(l.overflow=[me.overflow,me.overflowX,me.overflowY],N=_e&&_e.display,N==null&&(N=ie.get(n,"display")),B=c.css(n,"display"),B==="none"&&(N?B=N:(Mt([n],!0),N=n.style.display||N,B=c.css(n,"display"),Mt([n]))),(B==="inline"||B==="inline-block"&&N!=null)&&c.css(n,"float")==="none"&&(_||(M.done(function(){me.display=N}),N==null&&(B=me.display,N=B==="none"?"":B)),me.display="inline-block")),l.overflow&&(me.overflow="hidden",M.always(function(){me.overflow=l.overflow[0],me.overflowX=l.overflow[1],me.overflowY=l.overflow[2]})),_=!1;for(d in X)_||(_e?"hidden"in _e&&(Ne=_e.hidden):_e=ie.access(n,"fxshow",{display:N}),m&&(_e.hidden=!Ne),Ne&&Mt([n],!0),M.done(function(){Ne||Mt([n]),ie.remove(n,"fxshow");for(d in X)c.style(n,d,X[d])})),_=Tr(Ne?_e[d]:0,d,M),d in _e||(_e[d]=_.start,Ne&&(_.end=_.start,_.start=0))}}function y(n,o){var l,d,p,m,g;for(l in n)if(d=Et(l),p=o[d],m=n[l],Array.isArray(m)&&(p=m[1],m=n[l]=m[0]),l!==d&&(n[d]=m,delete n[l]),g=c.cssHooks[d],g&&"expand"in g){m=g.expand(m),delete n[d];for(l in m)l in n||(n[l]=m[l],o[l]=p)}else o[d]=p}function v(n,o,l){var d,p,m=0,g=v.prefilters.length,C=c.Deferred().always(function(){delete _.elem}),_=function(){if(p)return!1;for(var W=Nn||xi(),M=Math.max(0,N.startTime+N.duration-W),X=M/N.duration||0,me=1-X,Ne=0,_e=N.tweens.length;Ne<_e;Ne++)N.tweens[Ne].run(me);return C.notifyWith(n,[N,me,M]),me<1&&_e?M:(_e||C.notifyWith(n,[N,1,0]),C.resolveWith(n,[N]),!1)},N=C.promise({elem:n,props:c.extend({},o),opts:c.extend(!0,{specialEasing:{},easing:c.easing._default},l),originalProperties:o,originalOptions:l,startTime:Nn||xi(),duration:l.duration,tweens:[],createTween:function(W,M){var X=c.Tween(n,N.opts,W,M,N.opts.specialEasing[W]||N.opts.easing);return N.tweens.push(X),X},stop:function(W){var M=0,X=W?N.tweens.length:0;if(p)return this;for(p=!0;M<X;M++)N.tweens[M].run(1);return W?(C.notifyWith(n,[N,1,0]),C.resolveWith(n,[N,W])):C.rejectWith(n,[N,W]),this}}),B=N.props;for(y(B,N.opts.specialEasing);m<g;m++)if(d=v.prefilters[m].call(N,n,B,N.opts),d)return I(d.stop)&&(c._queueHooks(N.elem,N.opts.queue).stop=d.stop.bind(d)),d;return c.map(B,Tr,N),I(N.opts.start)&&N.opts.start.call(n,N),N.progress(N.opts.progress).done(N.opts.done,N.opts.complete).fail(N.opts.fail).always(N.opts.always),c.fx.timer(c.extend(_,{elem:n,anim:N,queue:N.opts.queue})),N}c.Animation=c.extend(v,{tweeners:{"*":[function(n,o){var l=this.createTween(n,o);return ji(l.elem,n,en.exec(o),l),l}]},tweener:function(n,o){I(n)?(o=n,n=["*"]):n=n.match(Ue);for(var l,d=0,p=n.length;d<p;d++)l=n[d],v.tweeners[l]=v.tweeners[l]||[],v.tweeners[l].unshift(o)},prefilters:[f],prefilter:function(n,o){o?v.prefilters.unshift(n):v.prefilters.push(n)}}),c.speed=function(n,o,l){var d=n&&typeof n=="object"?c.extend({},n):{complete:l||!l&&o||I(n)&&n,duration:n,easing:l&&o||o&&!I(o)&&o};return c.fx.off?d.duration=0:typeof d.duration!="number"&&(d.duration in c.fx.speeds?d.duration=c.fx.speeds[d.duration]:d.duration=c.fx.speeds._default),(d.queue==null||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){I(d.old)&&d.old.call(this),d.queue&&c.dequeue(this,d.queue)},d},c.fn.extend({fadeTo:function(n,o,l,d){return this.filter(Tn).css("opacity",0).show().end().animate({opacity:o},n,l,d)},animate:function(n,o,l,d){var p=c.isEmptyObject(n),m=c.speed(o,l,d),g=function(){var C=v(this,c.extend({},n),m);(p||ie.get(this,"finish"))&&C.stop(!0)};return g.finish=g,p||m.queue===!1?this.each(g):this.queue(m.queue,g)},stop:function(n,o,l){var d=function(p){var m=p.stop;delete p.stop,m(l)};return typeof n!="string"&&(l=o,o=n,n=void 0),o&&this.queue(n||"fx",[]),this.each(function(){var p=!0,m=n!=null&&n+"queueHooks",g=c.timers,C=ie.get(this);if(m)C[m]&&C[m].stop&&d(C[m]);else for(m in C)C[m]&&C[m].stop&&Ui.test(m)&&d(C[m]);for(m=g.length;m--;)g[m].elem===this&&(n==null||g[m].queue===n)&&(g[m].anim.stop(l),p=!1,g.splice(m,1));(p||!l)&&c.dequeue(this,n)})},finish:function(n){return n!==!1&&(n=n||"fx"),this.each(function(){var o,l=ie.get(this),d=l[n+"queue"],p=l[n+"queueHooks"],m=c.timers,g=d?d.length:0;for(l.finish=!0,c.queue(this,n,[]),p&&p.stop&&p.stop.call(this,!0),o=m.length;o--;)m[o].elem===this&&m[o].queue===n&&(m[o].anim.stop(!0),m.splice(o,1));for(o=0;o<g;o++)d[o]&&d[o].finish&&d[o].finish.call(this);delete l.finish})}}),c.each(["toggle","show","hide"],function(n,o){var l=c.fn[o];c.fn[o]=function(d,p,m){return d==null||typeof d=="boolean"?l.apply(this,arguments):this.animate(kn(o,!0),d,p,m)}}),c.each({slideDown:kn("show"),slideUp:kn("hide"),slideToggle:kn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(n,o){c.fn[n]=function(l,d,p){return this.animate(o,l,d,p)}}),c.timers=[],c.fx.tick=function(){var n,o=0,l=c.timers;for(Nn=Date.now();o<l.length;o++)n=l[o],!n()&&l[o]===n&&l.splice(o--,1);l.length||c.fx.stop(),Nn=void 0},c.fx.timer=function(n){c.timers.push(n),c.fx.start()},c.fx.interval=13,c.fx.start=function(){wn||(wn=!0,wi())},c.fx.stop=function(){wn=null},c.fx.speeds={slow:600,fast:200,_default:400},c.fn.delay=function(n,o){return n=c.fx&&c.fx.speeds[n]||n,o=o||"fx",this.queue(o,function(l,d){var p=t.setTimeout(l,n);d.stop=function(){t.clearTimeout(p)}})},function(){var n=H.createElement("input"),o=H.createElement("select"),l=o.appendChild(H.createElement("option"));n.type="checkbox",T.checkOn=n.value!=="",T.optSelected=l.selected,n=H.createElement("input"),n.value="t",n.type="radio",T.radioValue=n.value==="t"}();var E,k=c.expr.attrHandle;c.fn.extend({attr:function(n,o){return Pe(this,c.attr,n,o,arguments.length>1)},removeAttr:function(n){return this.each(function(){c.removeAttr(this,n)})}}),c.extend({attr:function(n,o,l){var d,p,m=n.nodeType;if(!(m===3||m===8||m===2)){if(typeof n.getAttribute>"u")return c.prop(n,o,l);if((m!==1||!c.isXMLDoc(n))&&(p=c.attrHooks[o.toLowerCase()]||(c.expr.match.bool.test(o)?E:void 0)),l!==void 0){if(l===null){c.removeAttr(n,o);return}return p&&"set"in p&&(d=p.set(n,l,o))!==void 0?d:(n.setAttribute(o,l+""),l)}return p&&"get"in p&&(d=p.get(n,o))!==null?d:(d=c.find.attr(n,o),d??void 0)}},attrHooks:{type:{set:function(n,o){if(!T.radioValue&&o==="radio"&&ae(n,"input")){var l=n.value;return n.setAttribute("type",o),l&&(n.value=l),o}}}},removeAttr:function(n,o){var l,d=0,p=o&&o.match(Ue);if(p&&n.nodeType===1)for(;l=p[d++];)n.removeAttribute(l)}}),E={set:function(n,o,l){return o===!1?c.removeAttr(n,l):n.setAttribute(l,l),l}},c.each(c.expr.match.bool.source.match(/\w+/g),function(n,o){var l=k[o]||c.find.attr;k[o]=function(d,p,m){var g,C,_=p.toLowerCase();return m||(C=k[_],k[_]=g,g=l(d,p,m)!=null?_:null,k[_]=C),g}});var F=/^(?:input|select|textarea|button)$/i,z=/^(?:a|area)$/i;c.fn.extend({prop:function(n,o){return Pe(this,c.prop,n,o,arguments.length>1)},removeProp:function(n){return this.each(function(){delete this[c.propFix[n]||n]})}}),c.extend({prop:function(n,o,l){var d,p,m=n.nodeType;if(!(m===3||m===8||m===2))return(m!==1||!c.isXMLDoc(n))&&(o=c.propFix[o]||o,p=c.propHooks[o]),l!==void 0?p&&"set"in p&&(d=p.set(n,l,o))!==void 0?d:n[o]=l:p&&"get"in p&&(d=p.get(n,o))!==null?d:n[o]},propHooks:{tabIndex:{get:function(n){var o=c.find.attr(n,"tabindex");return o?parseInt(o,10):F.test(n.nodeName)||z.test(n.nodeName)&&n.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),T.optSelected||(c.propHooks.selected={get:function(n){var o=n.parentNode;return o&&o.parentNode&&o.parentNode.selectedIndex,null},set:function(n){var o=n.parentNode;o&&(o.selectedIndex,o.parentNode&&o.parentNode.selectedIndex)}}),c.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){c.propFix[this.toLowerCase()]=this});function G(n){var o=n.match(Ue)||[];return o.join(" ")}function Y(n){return n.getAttribute&&n.getAttribute("class")||""}function oe(n){return Array.isArray(n)?n:typeof n=="string"?n.match(Ue)||[]:[]}c.fn.extend({addClass:function(n){var o,l,d,p,m,g;return I(n)?this.each(function(C){c(this).addClass(n.call(this,C,Y(this)))}):(o=oe(n),o.length?this.each(function(){if(d=Y(this),l=this.nodeType===1&&" "+G(d)+" ",l){for(m=0;m<o.length;m++)p=o[m],l.indexOf(" "+p+" ")<0&&(l+=p+" ");g=G(l),d!==g&&this.setAttribute("class",g)}}):this)},removeClass:function(n){var o,l,d,p,m,g;return I(n)?this.each(function(C){c(this).removeClass(n.call(this,C,Y(this)))}):arguments.length?(o=oe(n),o.length?this.each(function(){if(d=Y(this),l=this.nodeType===1&&" "+G(d)+" ",l){for(m=0;m<o.length;m++)for(p=o[m];l.indexOf(" "+p+" ")>-1;)l=l.replace(" "+p+" "," ");g=G(l),d!==g&&this.setAttribute("class",g)}}):this):this.attr("class","")},toggleClass:function(n,o){var l,d,p,m,g=typeof n,C=g==="string"||Array.isArray(n);return I(n)?this.each(function(_){c(this).toggleClass(n.call(this,_,Y(this),o),o)}):typeof o=="boolean"&&C?o?this.addClass(n):this.removeClass(n):(l=oe(n),this.each(function(){if(C)for(m=c(this),p=0;p<l.length;p++)d=l[p],m.hasClass(d)?m.removeClass(d):m.addClass(d);else(n===void 0||g==="boolean")&&(d=Y(this),d&&ie.set(this,"__className__",d),this.setAttribute&&this.setAttribute("class",d||n===!1?"":ie.get(this,"__className__")||""))}))},hasClass:function(n){var o,l,d=0;for(o=" "+n+" ";l=this[d++];)if(l.nodeType===1&&(" "+G(Y(l))+" ").indexOf(o)>-1)return!0;return!1}});var le=/\r/g;c.fn.extend({val:function(n){var o,l,d,p=this[0];return arguments.length?(d=I(n),this.each(function(m){var g;this.nodeType===1&&(d?g=n.call(this,m,c(this).val()):g=n,g==null?g="":typeof g=="number"?g+="":Array.isArray(g)&&(g=c.map(g,function(C){return C==null?"":C+""})),o=c.valHooks[this.type]||c.valHooks[this.nodeName.toLowerCase()],(!o||!("set"in o)||o.set(this,g,"value")===void 0)&&(this.value=g))})):p?(o=c.valHooks[p.type]||c.valHooks[p.nodeName.toLowerCase()],o&&"get"in o&&(l=o.get(p,"value"))!==void 0?l:(l=p.value,typeof l=="string"?l.replace(le,""):l??"")):void 0}}),c.extend({valHooks:{option:{get:function(n){var o=c.find.attr(n,"value");return o??G(c.text(n))}},select:{get:function(n){var o,l,d,p=n.options,m=n.selectedIndex,g=n.type==="select-one",C=g?null:[],_=g?m+1:p.length;for(m<0?d=_:d=g?m:0;d<_;d++)if(l=p[d],(l.selected||d===m)&&!l.disabled&&(!l.parentNode.disabled||!ae(l.parentNode,"optgroup"))){if(o=c(l).val(),g)return o;C.push(o)}return C},set:function(n,o){for(var l,d,p=n.options,m=c.makeArray(o),g=p.length;g--;)d=p[g],(d.selected=c.inArray(c.valHooks.option.get(d),m)>-1)&&(l=!0);return l||(n.selectedIndex=-1),m}}}}),c.each(["radio","checkbox"],function(){c.valHooks[this]={set:function(n,o){if(Array.isArray(o))return n.checked=c.inArray(c(n).val(),o)>-1}},T.checkOn||(c.valHooks[this].get=function(n){return n.getAttribute("value")===null?"on":n.value})});var de=t.location,$e={guid:Date.now()},be=/\?/;c.parseXML=function(n){var o,l;if(!n||typeof n!="string")return null;try{o=new t.DOMParser().parseFromString(n,"text/xml")}catch{}return l=o&&o.getElementsByTagName("parsererror")[0],(!o||l)&&c.error("Invalid XML: "+(l?c.map(l.childNodes,function(d){return d.textContent}).join(`
`):n)),o};var Ze=/^(?:focusinfocus|focusoutblur)$/,Re=function(n){n.stopPropagation()};c.extend(c.event,{trigger:function(n,o,l,d){var p,m,g,C,_,N,B,W,M=[l||H],X=D.call(n,"type")?n.type:n,me=D.call(n,"namespace")?n.namespace.split("."):[];if(m=W=g=l=l||H,!(l.nodeType===3||l.nodeType===8)&&!Ze.test(X+c.event.triggered)&&(X.indexOf(".")>-1&&(me=X.split("."),X=me.shift(),me.sort()),_=X.indexOf(":")<0&&"on"+X,n=n[c.expando]?n:new c.Event(X,typeof n=="object"&&n),n.isTrigger=d?2:3,n.namespace=me.join("."),n.rnamespace=n.namespace?new RegExp("(^|\\.)"+me.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,n.result=void 0,n.target||(n.target=l),o=o==null?[n]:c.makeArray(o,[n]),B=c.event.special[X]||{},!(!d&&B.trigger&&B.trigger.apply(l,o)===!1))){if(!d&&!B.noBubble&&!j(l)){for(C=B.delegateType||X,Ze.test(C+X)||(m=m.parentNode);m;m=m.parentNode)M.push(m),g=m;g===(l.ownerDocument||H)&&M.push(g.defaultView||g.parentWindow||t)}for(p=0;(m=M[p++])&&!n.isPropagationStopped();)W=m,n.type=p>1?C:B.bindType||X,N=(ie.get(m,"events")||Object.create(null))[n.type]&&ie.get(m,"handle"),N&&N.apply(m,o),N=_&&m[_],N&&N.apply&&Fe(m)&&(n.result=N.apply(m,o),n.result===!1&&n.preventDefault());return n.type=X,!d&&!n.isDefaultPrevented()&&(!B._default||B._default.apply(M.pop(),o)===!1)&&Fe(l)&&_&&I(l[X])&&!j(l)&&(g=l[_],g&&(l[_]=null),c.event.triggered=X,n.isPropagationStopped()&&W.addEventListener(X,Re),l[X](),n.isPropagationStopped()&&W.removeEventListener(X,Re),c.event.triggered=void 0,g&&(l[_]=g)),n.result}},simulate:function(n,o,l){var d=c.extend(new c.Event,l,{type:n,isSimulated:!0});c.event.trigger(d,null,o)}}),c.fn.extend({trigger:function(n,o){return this.each(function(){c.event.trigger(n,o,this)})},triggerHandler:function(n,o){var l=this[0];if(l)return c.event.trigger(n,o,l,!0)}});var Yt=/\[\]$/,ht=/\r?\n/g,Xt=/^(?:submit|button|image|reset|file)$/i,pt=/^(?:input|select|textarea|keygen)/i;function Kt(n,o,l,d){var p;if(Array.isArray(o))c.each(o,function(m,g){l||Yt.test(n)?d(n,g):Kt(n+"["+(typeof g=="object"&&g!=null?m:"")+"]",g,l,d)});else if(!l&&xe(o)==="object")for(p in o)Kt(n+"["+p+"]",o[p],l,d);else d(n,o)}c.param=function(n,o){var l,d=[],p=function(m,g){var C=I(g)?g():g;d[d.length]=encodeURIComponent(m)+"="+encodeURIComponent(C??"")};if(n==null)return"";if(Array.isArray(n)||n.jquery&&!c.isPlainObject(n))c.each(n,function(){p(this.name,this.value)});else for(l in n)Kt(l,n[l],o,p);return d.join("&")},c.fn.extend({serialize:function(){return c.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var n=c.prop(this,"elements");return n?c.makeArray(n):this}).filter(function(){var n=this.type;return this.name&&!c(this).is(":disabled")&&pt.test(this.nodeName)&&!Xt.test(n)&&(this.checked||!Ut.test(n))}).map(function(n,o){var l=c(this).val();return l==null?null:Array.isArray(l)?c.map(l,function(d){return{name:o.name,value:d.replace(ht,`\r
`)}}):{name:o.name,value:l.replace(ht,`\r
`)}}).get()}});var Ht=/%20/g,xn=/#.*$/,oi=/([?&])_=[^&]*/,Ln=/^(.*?):[ \t]*([^\r\n]*)$/mg,St=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,nn=/^(?:GET|HEAD)$/,_i=/^\/\//,It={},rn={},on="*/".concat("*"),Rt=H.createElement("a");Rt.href=de.href;function sn(n){return function(o,l){typeof o!="string"&&(l=o,o="*");var d,p=0,m=o.toLowerCase().match(Ue)||[];if(I(l))for(;d=m[p++];)d[0]==="+"?(d=d.slice(1)||"*",(n[d]=n[d]||[]).unshift(l)):(n[d]=n[d]||[]).push(l)}}function Dn(n,o,l,d){var p={},m=n===rn;function g(C){var _;return p[C]=!0,c.each(n[C]||[],function(N,B){var W=B(o,l,d);if(typeof W=="string"&&!m&&!p[W])return o.dataTypes.unshift(W),g(W),!1;if(m)return!(_=W)}),_}return g(o.dataTypes[0])||!p["*"]&&g("*")}function Vi(n,o){var l,d,p=c.ajaxSettings.flatOptions||{};for(l in o)o[l]!==void 0&&((p[l]?n:d||(d={}))[l]=o[l]);return d&&c.extend(!0,n,d),n}function Ar(n,o,l){for(var d,p,m,g,C=n.contents,_=n.dataTypes;_[0]==="*";)_.shift(),d===void 0&&(d=n.mimeType||o.getResponseHeader("Content-Type"));if(d){for(p in C)if(C[p]&&C[p].test(d)){_.unshift(p);break}}if(_[0]in l)m=_[0];else{for(p in l){if(!_[0]||n.converters[p+" "+_[0]]){m=p;break}g||(g=p)}m=m||g}if(m)return m!==_[0]&&_.unshift(m),l[m]}function _o(n,o,l,d){var p,m,g,C,_,N={},B=n.dataTypes.slice();if(B[1])for(g in n.converters)N[g.toLowerCase()]=n.converters[g];for(m=B.shift();m;)if(n.responseFields[m]&&(l[n.responseFields[m]]=o),!_&&d&&n.dataFilter&&(o=n.dataFilter(o,n.dataType)),_=m,m=B.shift(),m){if(m==="*")m=_;else if(_!=="*"&&_!==m){if(g=N[_+" "+m]||N["* "+m],!g){for(p in N)if(C=p.split(" "),C[1]===m&&(g=N[_+" "+C[0]]||N["* "+C[0]],g)){g===!0?g=N[p]:N[p]!==!0&&(m=C[0],B.unshift(C[1]));break}}if(g!==!0)if(g&&n.throws)o=g(o);else try{o=g(o)}catch(W){return{state:"parsererror",error:g?W:"No conversion from "+_+" to "+m}}}}return{state:"success",data:o}}c.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:de.href,type:"GET",isLocal:St.test(de.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":on,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":c.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(n,o){return o?Vi(Vi(n,c.ajaxSettings),o):Vi(c.ajaxSettings,n)},ajaxPrefilter:sn(It),ajaxTransport:sn(rn),ajax:function(n,o){typeof n=="object"&&(o=n,n=void 0),o=o||{};var l,d,p,m,g,C,_,N,B,W,M=c.ajaxSetup({},o),X=M.context||M,me=M.context&&(X.nodeType||X.jquery)?c(X):c.event,Ne=c.Deferred(),_e=c.Callbacks("once memory"),vt=M.statusCode||{},lt={},an={},ln="canceled",Oe={readyState:0,getResponseHeader:function(Le){var et;if(_){if(!m)for(m={};et=Ln.exec(p);)m[et[1].toLowerCase()+" "]=(m[et[1].toLowerCase()+" "]||[]).concat(et[2]);et=m[Le.toLowerCase()+" "]}return et==null?null:et.join(", ")},getAllResponseHeaders:function(){return _?p:null},setRequestHeader:function(Le,et){return _==null&&(Le=an[Le.toLowerCase()]=an[Le.toLowerCase()]||Le,lt[Le]=et),this},overrideMimeType:function(Le){return _==null&&(M.mimeType=Le),this},statusCode:function(Le){var et;if(Le)if(_)Oe.always(Le[Oe.status]);else for(et in Le)vt[et]=[vt[et],Le[et]];return this},abort:function(Le){var et=Le||ln;return l&&l.abort(et),si(0,et),this}};if(Ne.promise(Oe),M.url=((n||M.url||de.href)+"").replace(_i,de.protocol+"//"),M.type=o.method||o.type||M.method||M.type,M.dataTypes=(M.dataType||"*").toLowerCase().match(Ue)||[""],M.crossDomain==null){C=H.createElement("a");try{C.href=M.url,C.href=C.href,M.crossDomain=Rt.protocol+"//"+Rt.host!=C.protocol+"//"+C.host}catch{M.crossDomain=!0}}if(M.data&&M.processData&&typeof M.data!="string"&&(M.data=c.param(M.data,M.traditional)),Dn(It,M,o,Oe),_)return Oe;N=c.event&&M.global,N&&c.active++===0&&c.event.trigger("ajaxStart"),M.type=M.type.toUpperCase(),M.hasContent=!nn.test(M.type),d=M.url.replace(xn,""),M.hasContent?M.data&&M.processData&&(M.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&(M.data=M.data.replace(Ht,"+")):(W=M.url.slice(d.length),M.data&&(M.processData||typeof M.data=="string")&&(d+=(be.test(d)?"&":"?")+M.data,delete M.data),M.cache===!1&&(d=d.replace(oi,"$1"),W=(be.test(d)?"&":"?")+"_="+$e.guid+++W),M.url=d+W),M.ifModified&&(c.lastModified[d]&&Oe.setRequestHeader("If-Modified-Since",c.lastModified[d]),c.etag[d]&&Oe.setRequestHeader("If-None-Match",c.etag[d])),(M.data&&M.hasContent&&M.contentType!==!1||o.contentType)&&Oe.setRequestHeader("Content-Type",M.contentType),Oe.setRequestHeader("Accept",M.dataTypes[0]&&M.accepts[M.dataTypes[0]]?M.accepts[M.dataTypes[0]]+(M.dataTypes[0]!=="*"?", "+on+"; q=0.01":""):M.accepts["*"]);for(B in M.headers)Oe.setRequestHeader(B,M.headers[B]);if(M.beforeSend&&(M.beforeSend.call(X,Oe,M)===!1||_))return Oe.abort();if(ln="abort",_e.add(M.complete),Oe.done(M.success),Oe.fail(M.error),l=Dn(rn,M,o,Oe),!l)si(-1,"No Transport");else{if(Oe.readyState=1,N&&me.trigger("ajaxSend",[Oe,M]),_)return Oe;M.async&&M.timeout>0&&(g=t.setTimeout(function(){Oe.abort("timeout")},M.timeout));try{_=!1,l.send(lt,si)}catch(Le){if(_)throw Le;si(-1,Le)}}function si(Le,et,Xi,Co){var un,Ki,cn,Mn,Pn,jt=et;_||(_=!0,g&&t.clearTimeout(g),l=void 0,p=Co||"",Oe.readyState=Le>0?4:0,un=Le>=200&&Le<300||Le===304,Xi&&(Mn=Ar(M,Oe,Xi)),!un&&c.inArray("script",M.dataTypes)>-1&&c.inArray("json",M.dataTypes)<0&&(M.converters["text script"]=function(){}),Mn=_o(M,Mn,Oe,un),un?(M.ifModified&&(Pn=Oe.getResponseHeader("Last-Modified"),Pn&&(c.lastModified[d]=Pn),Pn=Oe.getResponseHeader("etag"),Pn&&(c.etag[d]=Pn)),Le===204||M.type==="HEAD"?jt="nocontent":Le===304?jt="notmodified":(jt=Mn.state,Ki=Mn.data,cn=Mn.error,un=!cn)):(cn=jt,(Le||!jt)&&(jt="error",Le<0&&(Le=0))),Oe.status=Le,Oe.statusText=(et||jt)+"",un?Ne.resolveWith(X,[Ki,jt,Oe]):Ne.rejectWith(X,[Oe,jt,cn]),Oe.statusCode(vt),vt=void 0,N&&me.trigger(un?"ajaxSuccess":"ajaxError",[Oe,M,un?Ki:cn]),_e.fireWith(X,[Oe,jt]),N&&(me.trigger("ajaxComplete",[Oe,M]),--c.active||c.event.trigger("ajaxStop")))}return Oe},getJSON:function(n,o,l){return c.get(n,o,l,"json")},getScript:function(n,o){return c.get(n,void 0,o,"script")}}),c.each(["get","post"],function(n,o){c[o]=function(l,d,p,m){return I(d)&&(m=m||p,p=d,d=void 0),c.ajax(c.extend({url:l,type:o,dataType:m,data:d,success:p},c.isPlainObject(l)&&l))}}),c.ajaxPrefilter(function(n){var o;for(o in n.headers)o.toLowerCase()==="content-type"&&(n.contentType=n.headers[o]||"")}),c._evalUrl=function(n,o,l){return c.ajax({url:n,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(d){c.globalEval(d,o,l)}})},c.fn.extend({wrapAll:function(n){var o;return this[0]&&(I(n)&&(n=n.call(this[0])),o=c(n,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&o.insertBefore(this[0]),o.map(function(){for(var l=this;l.firstElementChild;)l=l.firstElementChild;return l}).append(this)),this},wrapInner:function(n){return I(n)?this.each(function(o){c(this).wrapInner(n.call(this,o))}):this.each(function(){var o=c(this),l=o.contents();l.length?l.wrapAll(n):o.append(n)})},wrap:function(n){var o=I(n);return this.each(function(l){c(this).wrapAll(o?n.call(this,l):n)})},unwrap:function(n){return this.parent(n).not("body").each(function(){c(this).replaceWith(this.childNodes)}),this}}),c.expr.pseudos.hidden=function(n){return!c.expr.pseudos.visible(n)},c.expr.pseudos.visible=function(n){return!!(n.offsetWidth||n.offsetHeight||n.getClientRects().length)},c.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch{}};var pu={0:200,1223:204},Yi=c.ajaxSettings.xhr();T.cors=!!Yi&&"withCredentials"in Yi,T.ajax=Yi=!!Yi,c.ajaxTransport(function(n){var o,l;if(T.cors||Yi&&!n.crossDomain)return{send:function(d,p){var m,g=n.xhr();if(g.open(n.type,n.url,n.async,n.username,n.password),n.xhrFields)for(m in n.xhrFields)g[m]=n.xhrFields[m];n.mimeType&&g.overrideMimeType&&g.overrideMimeType(n.mimeType),!n.crossDomain&&!d["X-Requested-With"]&&(d["X-Requested-With"]="XMLHttpRequest");for(m in d)g.setRequestHeader(m,d[m]);o=function(C){return function(){o&&(o=l=g.onload=g.onerror=g.onabort=g.ontimeout=g.onreadystatechange=null,C==="abort"?g.abort():C==="error"?typeof g.status!="number"?p(0,"error"):p(g.status,g.statusText):p(pu[g.status]||g.status,g.statusText,(g.responseType||"text")!=="text"||typeof g.responseText!="string"?{binary:g.response}:{text:g.responseText},g.getAllResponseHeaders()))}},g.onload=o(),l=g.onerror=g.ontimeout=o("error"),g.onabort!==void 0?g.onabort=l:g.onreadystatechange=function(){g.readyState===4&&t.setTimeout(function(){o&&l()})},o=o("abort");try{g.send(n.hasContent&&n.data||null)}catch(C){if(o)throw C}},abort:function(){o&&o()}}}),c.ajaxPrefilter(function(n){n.crossDomain&&(n.contents.script=!1)}),c.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(n){return c.globalEval(n),n}}}),c.ajaxPrefilter("script",function(n){n.cache===void 0&&(n.cache=!1),n.crossDomain&&(n.type="GET")}),c.ajaxTransport("script",function(n){if(n.crossDomain||n.scriptAttrs){var o,l;return{send:function(d,p){o=c("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",l=function(m){o.remove(),l=null,m&&p(m.type==="error"?404:200,m.type)}),H.head.appendChild(o[0])},abort:function(){l&&l()}}}});var $s=[],Eo=/(=)\?(?=&|$)|\?\?/;c.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var n=$s.pop()||c.expando+"_"+$e.guid++;return this[n]=!0,n}}),c.ajaxPrefilter("json jsonp",function(n,o,l){var d,p,m,g=n.jsonp!==!1&&(Eo.test(n.url)?"url":typeof n.data=="string"&&(n.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&Eo.test(n.data)&&"data");if(g||n.dataTypes[0]==="jsonp")return d=n.jsonpCallback=I(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,g?n[g]=n[g].replace(Eo,"$1"+d):n.jsonp!==!1&&(n.url+=(be.test(n.url)?"&":"?")+n.jsonp+"="+d),n.converters["script json"]=function(){return m||c.error(d+" was not called"),m[0]},n.dataTypes[0]="json",p=t[d],t[d]=function(){m=arguments},l.always(function(){p===void 0?c(t).removeProp(d):t[d]=p,n[d]&&(n.jsonpCallback=o.jsonpCallback,$s.push(d)),m&&I(p)&&p(m[0]),m=p=void 0}),"script"}),T.createHTMLDocument=function(){var n=H.implementation.createHTMLDocument("").body;return n.innerHTML="<form></form><form></form>",n.childNodes.length===2}(),c.parseHTML=function(n,o,l){if(typeof n!="string")return[];typeof o=="boolean"&&(l=o,o=!1);var d,p,m;return o||(T.createHTMLDocument?(o=H.implementation.createHTMLDocument(""),d=o.createElement("base"),d.href=H.location.href,o.head.appendChild(d)):o=H),p=Wt.exec(n),m=!l&&[],p?[o.createElement(p[1])]:(p=Gn([n],o,m),m&&m.length&&c(m).remove(),c.merge([],p.childNodes))},c.fn.load=function(n,o,l){var d,p,m,g=this,C=n.indexOf(" ");return C>-1&&(d=G(n.slice(C)),n=n.slice(0,C)),I(o)?(l=o,o=void 0):o&&typeof o=="object"&&(p="POST"),g.length>0&&c.ajax({url:n,type:p||"GET",dataType:"html",data:o}).done(function(_){m=arguments,g.html(d?c("<div>").append(c.parseHTML(_)).find(d):_)}).always(l&&function(_,N){g.each(function(){l.apply(this,m||[_.responseText,N,_])})}),this},c.expr.pseudos.animated=function(n){return c.grep(c.timers,function(o){return n===o.elem}).length},c.offset={setOffset:function(n,o,l){var d,p,m,g,C,_,N,B=c.css(n,"position"),W=c(n),M={};B==="static"&&(n.style.position="relative"),C=W.offset(),m=c.css(n,"top"),_=c.css(n,"left"),N=(B==="absolute"||B==="fixed")&&(m+_).indexOf("auto")>-1,N?(d=W.position(),g=d.top,p=d.left):(g=parseFloat(m)||0,p=parseFloat(_)||0),I(o)&&(o=o.call(n,l,c.extend({},C))),o.top!=null&&(M.top=o.top-C.top+g),o.left!=null&&(M.left=o.left-C.left+p),"using"in o?o.using.call(n,M):W.css(M)}},c.fn.extend({offset:function(n){if(arguments.length)return n===void 0?this:this.each(function(p){c.offset.setOffset(this,n,p)});var o,l,d=this[0];if(d)return d.getClientRects().length?(o=d.getBoundingClientRect(),l=d.ownerDocument.defaultView,{top:o.top+l.pageYOffset,left:o.left+l.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var n,o,l,d=this[0],p={top:0,left:0};if(c.css(d,"position")==="fixed")o=d.getBoundingClientRect();else{for(o=this.offset(),l=d.ownerDocument,n=d.offsetParent||l.documentElement;n&&(n===l.body||n===l.documentElement)&&c.css(n,"position")==="static";)n=n.parentNode;n&&n!==d&&n.nodeType===1&&(p=c(n).offset(),p.top+=c.css(n,"borderTopWidth",!0),p.left+=c.css(n,"borderLeftWidth",!0))}return{top:o.top-p.top-c.css(d,"marginTop",!0),left:o.left-p.left-c.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var n=this.offsetParent;n&&c.css(n,"position")==="static";)n=n.offsetParent;return n||Ct})}}),c.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(n,o){var l=o==="pageYOffset";c.fn[n]=function(d){return Pe(this,function(p,m,g){var C;if(j(p)?C=p:p.nodeType===9&&(C=p.defaultView),g===void 0)return C?C[o]:p[m];C?C.scrollTo(l?C.pageXOffset:g,l?g:C.pageYOffset):p[m]=g},n,d,arguments.length)}}),c.each(["top","left"],function(n,o){c.cssHooks[o]=_r(T.pixelPosition,function(l,d){if(d)return d=ei(l,o),On.test(d)?c(l).position()[o]+"px":d})}),c.each({Height:"height",Width:"width"},function(n,o){c.each({padding:"inner"+n,content:o,"":"outer"+n},function(l,d){c.fn[d]=function(p,m){var g=arguments.length&&(l||typeof p!="boolean"),C=l||(p===!0||m===!0?"margin":"border");return Pe(this,function(_,N,B){var W;return j(_)?d.indexOf("outer")===0?_["inner"+n]:_.document.documentElement["client"+n]:_.nodeType===9?(W=_.documentElement,Math.max(_.body["scroll"+n],W["scroll"+n],_.body["offset"+n],W["offset"+n],W["client"+n])):B===void 0?c.css(_,N,C):c.style(_,N,B,C)},o,g?p:void 0,g)}})}),c.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(n,o){c.fn[o]=function(l){return this.on(o,l)}}),c.fn.extend({bind:function(n,o,l){return this.on(n,null,o,l)},unbind:function(n,o){return this.off(n,null,o)},delegate:function(n,o,l,d){return this.on(o,n,l,d)},undelegate:function(n,o,l){return arguments.length===1?this.off(n,"**"):this.off(o,n||"**",l)},hover:function(n,o){return this.mouseenter(n).mouseleave(o||n)}}),c.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(n,o){c.fn[o]=function(l,d){return arguments.length>0?this.on(o,null,l,d):this.trigger(o)}});var mu=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;c.proxy=function(n,o){var l,d,p;if(typeof o=="string"&&(l=n[o],o=n,n=l),!!I(n))return d=a.call(arguments,2),p=function(){return n.apply(o||this,d.concat(a.call(arguments)))},p.guid=n.guid=n.guid||c.guid++,p},c.holdReady=function(n){n?c.readyWait++:c.ready(!0)},c.isArray=Array.isArray,c.parseJSON=JSON.parse,c.nodeName=ae,c.isFunction=I,c.isWindow=j,c.camelCase=Et,c.type=xe,c.now=Date.now,c.isNumeric=function(n){var o=c.type(n);return(o==="number"||o==="string")&&!isNaN(n-parseFloat(n))},c.trim=function(n){return n==null?"":(n+"").replace(mu,"$1")};var gu=t.jQuery,vu=t.$;return c.noConflict=function(n){return t.$===c&&(t.$=vu),n&&t.jQuery===c&&(t.jQuery=gu),c},typeof i>"u"&&(t.jQuery=t.$=c),c})})(Kc);const Pr=function(e){var t={automaticMaxWidth:!0,setDraggableTarget:function(O){return!0}},i=this;this.settings=mn.extend({},t,e);const r={};this.on=(O,T)=>{r[O]?r[O].push(T):r[O]=[T]},this.dispatch=(O,T)=>{r[O]&&r[O].forEach(I=>{I.call(this,T)})};var s=!0,a=null;this.getTarget=function(){return a},this.isVisible=function(){return s},this.show=function(){s=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){s=!1,this.wrapper.addClass("mw-handle-item-hidden"),this.wrapper.removeClass("mw-handle-active")};let u=null;this.setContent=function(O){u&&u.remove(),u=O,this.wrapper.append(u)},this.getContent=function(){return u},this.initDraggable=function(){this.draggable=new Xc({handle:this.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},e),this.draggable.on("dragStart",function(){i.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){i.wrapper.removeClass("mw-handle-item-dragging"),i.position(i.getTarget())})};const h=()=>{if(this.settings.document.defaultView.pageYOffset!==void 0)return{x:this.settings.document.defaultView.pageXOffset,y:this.settings.document.defaultView.pageYOffset};{let O,T,I=this.settings.document,j=I.documentElement,H=I.body;return O=j.scrollLeft||H.scrollLeft||0,T=j.scrollTop||H.scrollTop||0,{x:O,y:T}}};this.position=function(O){if(!O)return;const T=st.offset(O),I=h(),j=this.wrapper.get(0).querySelector(".mw-le-handle-menu-buttons");let H;I.y>T.top-70&&(H=I.y-(T.top-70),H>T.height&&(H=T.height+10)),j&&(j.style.transition="none",T.top<50?j.style.top="calc(100% + 60px)":j.style.top="",setTimeout(()=>j.style.transition="",10));var he=T.height;he||(he=O.scrollHeight),this.wrapper.css({top:T.top,left:T.left,width:T.width,height:he})};var b;this.setDraggable=function(O){if(typeof value=="boolean")return b=value,this;typeof this.settings.setDraggableTarget=="function"&&(b=this.settings.setDraggableTarget(O)),this.wrapper.get(0).dataset.draggable=b},this.getDraggable=function(){return b},this.set=function(O,T){if(!O){a=null,this.setDraggable(!1);return}return this.position(O),this.setDraggable(O),this.show(),this.draggable.setElement(O),(a!==O||T)&&(a=O,this.dispatch("targetChange",O)),setTimeout(()=>this.wrapper.addClass("mw-handle-active"),1),this};var w=!1;this.draggablePaused=function(O){return typeof O<"u"&&(w=O),w},this.createHandle=function(){if(this.settings.handle==="self"){var O=we({tag:"div",props:{className:"mw-handle-item-draggable-self"}});this.wrapper.append(O),this.settings.document.addEventListener("mousedown",function(){const T=i.draggablePaused();T!==!0&&T!==i.getTarget()&&O.addClass("active")}),this.settings.document.addEventListener("mouseup",function(){O.removeClass("active")}),this.settings.handle=O,this.handle=O,this.wrapper.append(O);return}this.settings.handle?(typeof this.settings.handle=="string"&&(this.settings.handle=we(this.handle)),this.handle=this.settings.handle):(this.handle=we({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))};var S=this.settings.document.defaultView.innerWidth,D=this.settings.document.defaultView.innerHeight;this.resizableMaxWidth=function(O){if(typeof O>"u")return S;S=O},this.resizableMaxHeight=function(O){if(typeof O>"u")return D;D=O},this.findClosestElementByClass=function(O,T=200){let I=[],j=O,H=0;for(;j!==document;){const he=j.parentNode.querySelectorAll(".element,.module");if(he.length>0&&(I=[...he].filter(Ae=>Math.abs(O.getBoundingClientRect().top-Ae.getBoundingClientRect().top)<=T),I.length>0)||(j=j.parentNode,H++,H>T/10))break}return I};function P(O,T,I,j){var H=Math.min(I/O,j/T);return{width:O*H,height:T*H}}this.resizable=function(){this.settings.resizable&&(this.resizer=new za({element:this.wrapper.get(0),document:this.settings.document}),this.resizer.mount(),this.resizer.on("resize",O=>{const T=this.getTarget();this.settings.automaticMaxWidth&&(T.style.maxWidth="100%"),T.nodeName==="IMG"?(O=P(T.offsetWidth,T.offsetHeight,O.width,O.height),T.style.height=O.height+"px",T.style.width=O.width+"px"):(T.style.minHeight=O.height+"px",T.style.width=O.width+"px"),this.set(T)}))},this.createWrapper=function(){this.wrapper=we({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),we(document.body).on("mouseup touchend",function(){i.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide(),this.resizable(),this.settings.document.addEventListener("orientationChange",O=>this.position(this.getTarget())),this.settings.document.defaultView.addEventListener("resize",O=>this.position(this.getTarget())),this.settings.document.addEventListener("scroll",O=>this.position(this.getTarget()))},Gc=function(e){e=e||{},this.tools=st;var t=this,i={exceptions:["mw-handle-item"]};this.settings=mn.extend({},i,e),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var r=20,s=function(h){return h%5>=2.5?h/5*5+5:h/5*5},a=function(h,b){h=s(h),b=s(b);for(var w=[],S=h-r,D=h+r,P=b-r,O=b+r;S<D;S+=5)for(;P<=O;P+=5)w.push([S,P]);return w},u=function(h,b){h&&h.parentElement&&b.indexOf(h)===-1&&t.body!==h&&b.push(h)};this.fromEvent=function(h){let b,w;return h.pageX?(b=h.pageX,w=h.pageY):h.targetTouches&&h.targetTouches[0]?(b=h.targetTouches[0].pageX,w=h.targetTouches[0].pageY):h.touches&&h.touches[0]&&(b=h.touches[0].pageX,w=h.touches[0].pageY),t.tools.hasAnyOfClassesOnNodeOrParent(h.target,this.settings.exceptions)?[]:this.fromPoint(b,w)},this.fromPoint=function(h,b){var w=[];if(t.document.defaultView.frameElement&&(b-=t.document.defaultView.scrollY),isNaN(h)||isNaN(b))return w;var S=t.document.elementFromPoint(h,b);if(!S)return[];u(S,w);var D=a(h,b);return D.forEach(function(P){u(t.document.elementFromPoint(P[0],P[1]),w)}),w}},Jc=function(e){return st.matches(e,'.row,[class*="row-"]')},Qc=function(e){return st.matches(e,'.col,[class*="col-"]')};let Rn;const ia=function(){return Rn||(Rn=document.createElement("div"),Rn.style.visibility="hidden",Rn.style.position="absolute",Rn.style.width="1px",Rn.style.height="1px",document.body.appendChild(Rn)),Rn},Hr={},Zc=function(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof Hr[t]<"u")return Hr[t];var i=document.createElement(t);return ia().appendChild(i),Hr[t]=getComputedStyle(i).display==="block",ia().removeChild(i),Hr[t]},ed=(e,t,i)=>{e=e||"*";for(var r=t.querySelectorAll(e),s=0,a=[];s<r.length;s++)mw.tools.parentsOrCurrentOrderMatchOrOnlyFirst(r[s],["edit","module"])&&!Qc(r[s])&&!Jc(r[s])&&!i.elementAnalyzer.isEdit(r[s])&&Zc(r[s])&&a.push(r[s]);return a},td=e=>{const{backgroundImageHolder:t,editClass:i,moduleClass:r,elementClass:s,allowDrop:a}=e.settings,u=e.root;for(var h=u.querySelectorAll("."+i+"."+t+", ."+i+" ."+t+", ."+i+'[style*="background-image"], .'+i+' [style*="background-image"]'),b=u.querySelectorAll("."+r+e.settings.unEditableModules.join(",."+r)),w=u.querySelectorAll("."+i),S=0,D=0,P=0;S<h.length;S++){var O=h[S];e.elementAnalyzer.isInEdit(O)&&(mw.tools.hasClass(O,r),O.style.backgroundImage||(O.style.backgroundImage="none"))}for(;D<b.length;D++)b[S].classList.remove(r);for(;P<w.length;P++){for(var T=ed(":not(."+s+")",w[P],e),I=0,j=w[P].querySelectorAll("img,."+a),H=0;H<j.length;H++)e.elementAnalyzer.isInEdit(j[H])&&e.canBeElement(j[H])&&j[H].classList.add(s);for(;I<T.length;I++)T[I].classList.contains(r)||e.elementAnalyzer.isInEdit(T[I])&&e.canBeElement(T[I])&&T[I].classList.add(s)}},nd=function(e){this.handles=e,this.dragging=!1;var t=this;this.get=function(i){return this.handles[i]},this.set=function(i,r){this.get(i).set(r)},this.hide=function(i){i&&this.handles[i]?this.handles[i].hide():this.each(function(r,s){s.hide()})},this.hideAllBut=function(i){this.each(function(r,s){r!==i&&s.hide()})},this.show=function(i){i&&this.handles[i]?this.handles[i].show():this.each(function(r,s){s.show()})},this.each=function(i){if(i){var r;for(r in this.handles)i.call(t,r,this.handles[r])}},this.targetIsSelected=function(i,r){if(i){i=i.target||i;var s;for(s in this.handles){if(r&&r===this.handles[s])continue;const a=this.handles[s].getTarget();if(a&&a===i)return!0}return!1}},this.targetIsSelectedAndHandleIsNotHidden=function(i,r){if(i){i=i.target||i;var s;for(s in this.handles){if(r&&r===this.handles[s])continue;const a=this.handles[s].getTarget();if(a&&a===i)return this.handles[s].isVisible()}return!1}},this.targetIsOrInsideHandle=function(i,r){if(i){i=i.target||i;var s;for(s in this.handles)if(!(r&&r===this.handles[s])&&(this.handles[s].wrapper.get(0)===i||this.handles[s].wrapper.get(0).contains(i)))return!0;return!1}},this.init=function(){this.each(function(i,r){r.draggable.on("dragStart",function(){t.dragging=!0,t.hideAllBut(i)}),r.draggable.on("dragEnd",function(){t.dragging=!1,r.show()})})},this.init()},id=function(e){e=e||{};const t={template:"default"};let i={};this.settings=mn.extend({},t,e),this._indicator=null;const r={};this.on=function(b,w){r[b]?r[b].push(w):r[b]=[w]},this.dispatch=function(b,w){r[b]&&r[b].forEach(function(S){S.call(this,w)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,i={})},this.show=function(){this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const s=["before-top","prepend-top","after-bottom","append-bottom"],a="mw-drop-indicator-position-",u=s.map(function(b){return a+b});let h=null;this.position=function(b,w){if(!(!b||!w)&&!(i.target===b&&i.position===w)){i.target=b,i.position=w,h!==w&&(this._indicator.removeClass(u),h=w,this._indicator.addClass(a+w));var S=st.offset(b);this._indicator.css({height:S.height,left:S.left,top:S.top,width:S.width}),this.show()}},this.make=function(){this._indicator=we(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},rd=(e,t,i)=>{!e||!t||(e=e.isMWElement?e.get(0):e,e.dataset.tooltip=t,e.title=t,e.dataset.tooltipposition=i||"top-center")},ro=function(e){this.options=e||{};var t=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=we({props:{className:"mw-le-handle-menu",id:t.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=we({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var i,r,s,a=function(){i=we({props:{className:"mw-le-handle-menu-title"}}),r=we({props:{className:"mw-le-handle-menu-title-text"}}),s=we({props:{className:"mw-le-handle-menu-title-icon"}}),i.append(r),i.append(s),t.root.prepend(i),t.title=i},u=null;this.getTarget=function(){return u},this.setTarget=function(h){u=h;var b=0;for(this.rebuildButtons();b<this.buttons.length;b++){const w=this.buttons[b].config,S=this.buttons[b].button;w&&w.onTarget&&w.onTarget(h,S.get(0),t.options.rootScope)}},this.setTitle=function(h,b){r.html(h||""),s.html(b||"")},this.buttons=[],this.prepareMenu=function(){this.buttons=[]},this.getMenu=function(h){for(let b=0;b<this.options.menus.length;b++)if(this.options.menus[b].name===h)return this.options.menus[b].name},this.setMenu=function(h,b){let w=!1;for(let S=0;S<this.options.menus.length;S++)this.options.menus[S].name===h&&(this.options.menus[S].nodes=b,w=!0);w||this.options.menus.push({name:h,nodes:b}),this.rebuildButtons()},this.rebuildButtons=function(){this.buttonsHolder.empty(),this.buildButtons()},this.buildButtons=function(h,b){this.prepareMenu(),b=b||this.buttonsHolder,h=h||this.options.menus,h&&h.filter(w=>!!w).forEach(function(w){w.nodes&&w.nodes.forEach?w.nodes.forEach(function(S){b.append(t.button(S))}):(w.title||w.icon)&&t.button(w)})},this.button=function(h){var b=we({props:{className:"mw-le-handle-menu-button"+(h.className?" "+h.className:"")}}),w={props:{className:"mw-le-handle-menu-button-content"}},S=we(w);if(h.title&&rd(S,h.title),h.icon){var D=we({props:{className:"mw-le-handle-menu-button-icon",innerHTML:h.icon}});S.append(D)}if(h.text){var P=we({props:{className:"mw-le-handle-menu-button-text",innerHTML:h.text}});S.append(P)}b.append(S),this.buttons.push({button:b,config:h});const O="mousedown touchstart";if(h.menu){var T=we({props:{className:"mw-le-handle-menu-button-sub-menu"}});b.append(T),t.buildButtons(h.menu,T),b.on(O,function(){this.classList.toggle("sub-menu-active")})}else typeof h.action=="function"&&b.on(O,function(){h.action(t.getTarget(),b.get(0))});return b},this.init=function(){this.create(),a(),this.setTitle(t.options.title,t.options.icon),this.buildButtons(),this.hide()},this.init()},od=(e,t)=>{const i=we({props:{className:"modal-footer"}}),r=we({props:{className:"mw-admin-action-links mw-adm-liveedit-tabs text-danger ms-2",innerHTML:e||"REMOVE"}}),s=we({props:{className:"mw-admin-action-links mw-adm-liveedit-tabs me-2",innerHTML:t||"CANCEL"}});return i.append(s),i.append(r),{ok:r,cancel:s,footer:i}};var Fn,hs,sd;class qa{constructor(t){At(this,hs);At(this,Fn,{});t=t||{};const i={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},i,t),this.settings.id||(this.settings.id="mw-le-dialog-"+Date.now()),this.build(),setTimeout(r=>this.open())}on(t,i){ge(this,Fn)[t]?ge(this,Fn)[t].push(i):ge(this,Fn)[t]=[i]}dispatch(t,i){ge(this,Fn)[t]&&ge(this,Fn)[t].forEach(r=>{r.call(this,i)})}build(){const t=`


                <div class="modal-dialog modal-sm modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Please confirm</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body py-2 mb-2">

                        </div>
                    </div>
                </div>


        `;this.root=we({props:{className:"modal",tabIndex:-1}}),this.root.html(t);var i=this.root.find(".modal-body"),r=this.root.find(".modal-content");this.container=i,i.append(this.settings.content),this.settings.footer&&r.append(this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this._modal=new bootstrap.Modal(this.root.get(0),{}),this.open()}open(){this._modal.show()}show(){this._modal.show()}hide(){this._modal.hide()}close(){this._modal.hide()}toggle(){this._modal.toggle()}remove(){this._modal.hide(),this._modal.dispose()}overlay(){this.overlay=we({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}Fn=new WeakMap,hs=new WeakSet,sd=function(t){(t.key==="Escape"||t.keyCode===27)&&this.remove()};const ws=function(e,t){const i=od(),r=new qa({content:e,footer:i.footer.get(0),title:mw.lang("Remove section")});return i.cancel.on("click",function(){r.remove()}),i.ok.on("click",function(){t&&t.call(),r.remove()}),r},ad=function(e){this.root=we({props:{id:"mw-handle-item-element-root"}});const i=[{title:"Edit",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M181.674-179.761h41.13l441.087-441.565-41.13-41.13-441.087 441.565v41.13Zm613.043-484.326L665.761-793.043l36.978-37.218q19.631-19.63 47.859-19.75 28.228-.119 47.859 19.272l37.782 37.782q18.435 18.196 17.837 44.153-.598 25.956-18.315 43.674l-41.044 41.043Zm-41.76 41.761L247.761-117.13H118.804v-128.957l504.957-504.956 129.196 128.717Zm-109.392-19.565-20.804-20.565 41.13 41.13-20.326-20.565Z"/></svg>',className:"mw-handle-add-button",onTarget:function(a,u){},action:function(a){mw.app.editor.dispatch("editNodeRequest",a)}},{title:"Insert module",text:"",icon:'<svg style="stroke-width: 500;" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M445.935-195.935v-250h-250v-68.13h250v-250h68.13v250h250v68.13h-250v250h-68.13Z"/></svg>',className:"mw-handle-add-button",onTarget:function(a,u){},action:function(a){mw.app.editor.dispatch("insertModuleRequest",a)}},{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(a,u){},action:function(a){mw.app.editor.dispatch("elementSettingsRequest",a)}},...[{title:"Duplicate",text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg>',className:"mw-handle-clone-button",onTarget:function(a,u){u.style.display=a.classList.contains("cloneable")?"":"none"},action:function(a){we(a).after(a.outerHTML)}},{title:"Move backward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20 13.5C20 17.09 17.09 20 13.5 20H6V18H13.5C16 18 18 16 18 13.5S16 9 13.5 9H7.83L10.91 12.09L9.5 13.5L4 8L9.5 2.5L10.92 3.91L7.83 7H13.5C17.09 7 20 9.91 20 13.5Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(a,u){const h=a.classList.contains("cloneable"),b=a.previousElementSibling;u.style.display=h&&b?"":"none"},action:function(a){const u=a.previousElementSibling;u&&(u.before(a),e.elementHandle.set(a))}},{title:"Move forward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M10.5 18H18V20H10.5C6.91 20 4 17.09 4 13.5S6.91 7 10.5 7H16.17L13.08 3.91L14.5 2.5L20 8L14.5 13.5L13.09 12.09L16.17 9H10.5C8 9 6 11 6 13.5S8 18 10.5 18Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(a,u){const h=a.classList.contains("cloneable"),b=a.nextElementSibling;u.style.display=h&&b?"":"none"},action:function(a){const u=a.nextElementSibling;u&&(u.after(a),e.elementHandle.set(a))}}]],r=[{title:e.lang("Delete"),text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" ><path d="M0 0h24v24H0V0z" fill="none"></path><path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"></path></svg>',className:"mw-handle-insert-button",action:function(a){ws(we("<span>Are you sure you want to delete this element?</span>"),()=>{mw.app.registerChangedState(a),a.remove(),e.elementHandle.hide()})}}];this.menu=new ro({id:"mw-handle-item-element-menu",title:"Element",menus:[{name:"primary",nodes:i},{name:"dynamic",nodes:[]},{name:"tail",nodes:r}]}),this.menu.show(),this.menusHolder=document.createElement("div"),this.menusHolder.className="mw-handle-item-menus-holder";var s=mw.element(this.menusHolder);s.append(this.menu.root),this.root.append(this.menusHolder)},ld=function(e){var t=this;this.root=we({props:{id:"mw-handle-item-module-root",contentEditable:!1}}),this.tools=st;const i=[{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M181.674-179.761h41.13l441.087-441.565-41.13-41.13-441.087 441.565v41.13Zm613.043-484.326L665.761-793.043l36.978-37.218q19.631-19.63 47.859-19.75 28.228-.119 47.859 19.272l37.782 37.782q18.435 18.196 17.837 44.153-.598 25.956-18.315 43.674l-41.044 41.043Zm-41.76 41.761L247.761-117.13H118.804v-128.957l504.957-504.956 129.196 128.717Zm-109.392-19.565-20.804-20.565 41.13 41.13-20.326-20.565Z"/></svg>',action:()=>{const s=mw.app.get("liveEdit").handles.get("module").getTarget();mw.app.editor.dispatch("onModuleSettingsRequest",s);var a=s.dataset.type||s.getAttribute("type");a=a.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+a,s)},onTarget:function(s,a){s.classList.contains("no-settings")?a.style.display="none":a.style.display=""}},{title:"Insert module",text:"",icon:'<svg style="stroke-width: 500;" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M445.935-195.935v-250h-250v-68.13h250v-250h68.13v250h250v68.13h-250v250h-68.13Z"/></svg>',className:"mw-handle-add-button",onTarget:function(s,a){t.tools.parentsOrCurrentOrderMatchOrOnlyFirst(s.parentNode,["edit","module"])?a.style.display="":a.style.display="none"},action:function(s){mw.app.editor.dispatch("insertModuleRequest",s)}}],r=[{title:"Delete",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" ><path d="M0 0h24v24H0V0z" fill="none"></path><path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"></path></svg>',action:()=>{ws(we("<span>Are you sure you want to delete this module?</span>"),()=>{const s=mw.app.get("liveEdit").handles.get("module").getTarget();var a=s.dataset.type||s.getAttribute("type");a=a.trim(),mw.app.registerChangedState(s),s.remove(),mw.app.editor.dispatch("moduleRemoved",s),mw.app.editor.dispatch("modulet@"+a+"Removed",s),e.moduleHandle.hide()})},onTarget:(s,a)=>{this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(s.parentNode,["edit","module"])?a.style.display="":a.style.display="none"}}];this.menu=new ro({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,menus:[{name:"primary",nodes:i},{name:"dynamic",nodes:[]},{name:"tail",nodes:r}]}),this.menu.show(),this.menusHolder=document.createElement("div"),this.menusHolder.className="mw-handle-item-menus-holder",this.menusHolder.append(this.menu.root.get(0)),this.root.append(this.menusHolder)},ud=function(e){this.root=we({props:{id:"mw-handle-item-layout-root"}});const t={};this.on=(a,u)=>{t[a]?t[a].push(u):t[a]=[u]},this.dispatch=(a,u)=>{t[a]&&t[a].forEach(h=>{h.call(this,u)})};const i=[{title:e.lang("Settings"),text:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M181.674-179.761h41.13l441.087-441.565-41.13-41.13-441.087 441.565v41.13Zm613.043-484.326L665.761-793.043l36.978-37.218q19.631-19.63 47.859-19.75 28.228-.119 47.859 19.272l37.782 37.782q18.435 18.196 17.837 44.153-.598 25.956-18.315 43.674l-41.044 41.043Zm-41.76 41.761L247.761-117.13H118.804v-128.957l504.957-504.956 129.196 128.717Zm-109.392-19.565-20.804-20.565 41.13 41.13-20.326-20.565Z"/></svg>',className:"mw-handle-button-wide mw-handle-edit-layout-button",action:function(a){}}],r=[{title:e.lang("Clone"),text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M178.087-70.717q-27.698 0-48.034-20.336t-20.336-48.034v-600.848h68.37v600.848h471.848v68.37H178.087Zm128.131-128.37q-27.599 0-47.865-20.266-20.266-20.266-20.266-47.865v-555.695q0-27.698 20.266-48.034t47.865-20.336h435.695q27.698 0 48.034 20.336t20.336 48.034v555.695q0 27.599-20.336 47.865-20.336 20.266-48.034 20.266H306.218Zm0-68.131h435.695v-555.695H306.218v555.695Zm0 0v-555.695 555.695Z"/></svg>',className:"mw-handle-insert-button",action:function(a,u,h){var b=document.createElement("div");b.innerHTML=a.outerHTML,we("[id]",b).each(function(){this.id="le-id-"+new Date().getTime()}),we(a).after(b.innerHTML);var w=a.nextElementSibling;mw.reload_module(w,function(){mw.top().app.state.record({target:mw.tools.firstParentWithClass(a,"edit"),value:parent.innerHTML})}),w.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})}},{title:e.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(a,u){a.nextElementSibling===null?u.style.display="none":u.style.display=""},action:function(a,u){var h=a.nextElementSibling;if(h){var b=a.getBoundingClientRect(),w=h.getBoundingClientRect(),S=0;b.top<w.top&&(S=-(b.top-w.top)),a.classList.add("mw-le-target-to-animate"),h.classList.add("mw-le-target-to-animate"),a.style.transform="translateY("+S+"px)",h.style.transform="translateY("+-S+"px)",setTimeout(function(){h.parentNode.insertBefore(a,h.nextSibling),a.classList.remove("mw-le-target-to-animate"),h.classList.remove("mw-le-target-to-animate"),a.style.transform="",h.style.transform="",a.scrollIntoView({behavior:"smooth",block:"start",inline:"start"}),e.layoutHandle.set(a,!0)},300)}}},{title:e.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(a,u,h){a.previousElementSibling===null?u.style.display="none":u.style.display=""},action:function(a,u){var h=a.previousElementSibling;if(h){var b=a.getBoundingClientRect(),w=h.getBoundingClientRect(),S=0;b.top>w.top&&(S=-(b.top-w.top)),a.classList.add("mw-le-target-to-animate"),h.classList.add("mw-le-target-to-animate"),a.style.transform="translateY("+S+"px)",h.style.transform="translateY("+-S+"px)",setTimeout(function(){h.parentNode.insertBefore(a,h),a.classList.remove("mw-le-target-to-animate"),h.classList.remove("mw-le-target-to-animate"),a.style.transform="",h.style.transform="",e.layoutHandle.set(a,!0),a.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})},300)}}},,],s=[{title:e.lang("Delete"),text:e.lang("Delete"),icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" ><path d="M0 0h24v24H0V0z" fill="none"></path><path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"></path></svg>',className:"mw-handle-button-wide mw-handle-layout-delete-button",action:function(a,u,h){ws("Are you sure you want to delete this layout?",function(){mw.app.registerChange(a),a.remove()})}}];this.addButtons=function(){var a="Add Layout",u=h=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+h.charAt(0).toUpperCase()+h.slice(1))};this.plusTop=we({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:e.lang(a)}}),this.plusBottom=we({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:e.lang(a)}}),this.plusTop.on("click",function(){u("top")}),this.plusBottom.on("click",function(){u("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.addButtons(),this.menusHolder=document.createElement("div"),this.menusHolder.className="mw-handle-item-menus-holder",this.menu=new ro({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,menus:[{name:"editNavigation",nodes:i},{name:"primary",nodes:r},{name:"dynamic",nodes:[]},{name:"tail",nodes:s}]}),this.menu.show(),this.menusHolder.append(this.menu.root.get(0)),this.root.append(this.menusHolder)},ra={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},cd=(e,t)=>((!t||!ra[t])&&(t="en"),ra[t][e]||e),dd=function(e){this.root=we({props:{id:"mw-handle-interaction-item-element-root"}}),this.menu=new ro({id:"mw-handle-item-element-menu",title:"Element",buttons:[]}),this.menu.show(),this.root.append(this.menu.root)};mw.pauseSave=!1;mw.askusertostay=!1;window.top===window&&(window.onbeforeunload=function(){if(mw.askusertostay)return mw.notification.warning(mw.lang("You have unsaved changes")),mw.lang("You have unsaved changes")});window.mwd=document;window.mww=window;window.mwhead=document.head||document.getElementsByTagName("head")[0];mw.doc=document;mw.win=window;mw.head=mwhead;mw.loaded=!1;mw._random=new Date().getTime();mw.random=function(){return mw._random++};mw.id=function(e){return e=e||"mw-",e+mw.random()};mw.onLive=function(e){typeof mw.settings.liveEdit=="boolean"&&mw.settings.liveEdit&&e.call(this)};mw.onAdmin=function(e){window.mwAdmin&&e.call(this)};mw.target={};mw.log=function(e){window.console&&mw.settings.debug&&top.console.log(e)};mw.$=function(e,t){if(typeof e=="object"||typeof e=="string"&&e.indexOf("<")!==-1)return jQuery(e);if(t=t||mwd,typeof document.querySelector<"u")if(typeof e=="string")try{return jQuery(t.querySelectorAll(e))}catch{return jQuery(e,t)}else return jQuery(e,t);else return jQuery(e,t)};mw.parent=function(){return window===top?window.mw:mw.tools.canAccessWindow(parent)&&parent.mw?parent.mw:window.mw};mw.top=function(){if(mw.__top)return mw.__top;var e=function(){for(var t=window,i=window;i&&mw.tools.canAccessWindow(i)&&(i.mw||i.parent.mw);)t=i,i=i.parent;return mw.__top=i.mw,t.mw};return window===top?(mw.__top=window.mw,window.mw):mw.tools.canAccessWindow(top)&&top.mw?(mw.__top=top.mw,top.mw):window.top!==window.parent?e():(mw.__top=window.mw,window.mw)};mw.require("stylesheet.editor.js");class fd{constructor(t){xt(this,"_hoverAndSelectExceptions",t=>{if(t&&t.classList&&t.classList.contains("module-custom-fields")){var i=st.firstParentOrCurrentWithClass(t,"module-contact-form");i&&(t=i)}if(t&&t.parentNode&&t.parentNode.getAttribute("rel")==="module"&&typeof t.parentNode<"u")try{if(t=st.firstParentOrCurrentWithAnyOfClasses(t.parentNode,["element","module","cloneable","layout","edit"]),!t)return t}catch{}return t&&t.parentNode&&t.parentNode.classList.contains("module-layouts")&&(t=t.parentNode),t});xt(this,"canBeElement",function(t){var i=t,r=["mw-ui-col","mw-col-container","mw-ui-col-container","container"],s=["mw-le-spacer","background-image-holder","mw-layout-overlay-container","mw-le-resizer","mw-layout-overlay-container","mw-layout-overlay","mw-layout-overlay-background","mw-layout-overlay-background-image","mw-layout-overlay-wrapper"],a=mw.app.templateSettings.helperClasses.external_grids_col_classes,u=mw.app.templateSettings.helperClasses.external_css_no_element_classes,h=mw.app.templateSettings.helperClasses.external_css_no_element_controll_classes,b=mw.app.templateSettings.helperClasses.section_selectors,w=mw.app.templateSettings.helperClasses.fontIconFamilies;return r=r.concat(s),r=r.concat(a),r=r.concat(u),r=r.concat(h),r=r.concat(b),r=r.concat(w),!mw.tools.hasAnyOfClasses(i,r)});xt(this,"canBeEditable",function(t){return t.isContentEditable||mw.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t,["edit","module"])});xt(this,"getDistance",function(t,i){const r=i.x-t.x,s=i.y-t.y;return Math.sqrt(r*r+s*s)});const i=this,r={};this.on=(O,T)=>{r[O]?r[O].push(T):r[O]=[T]},this.dispatch=(O,T)=>{r[O]&&r[O].forEach(I=>{I.call(this,T)})},this.paused=!1,this.activeNode=!1,this.lastMousePosition=null;var s={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=mn.extend({},s,t),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(O){return cd(O,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new Ba(this.settings),this.dropIndicator=new id(this.settings);const a=new ad(this),u=new ld(this),h=new ud(this);this.elementHandleContent=a,this.moduleHandleContent=u,this.layoutHandleContent=h,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.layoutHandleContent.on("insertLayoutRequestOnTop",()=>{this.dispatch("insertLayoutRequestOnTop")}),this.layoutHandleContent.on("insertLayoutRequestOnBottom",()=>{this.dispatch("insertLayoutRequestOnBottom")}),this.dialog=function(O){O||(O={});var T={document:window.top.document,position:u.menu.getTarget(),mode:"absolute"};i.pause();const I=new qa(mn.extend({},T,O));return I.on("close",function(){i.play()}),I};var b=this.elementHandle=new Pr({...this.settings,dropIndicator:this.dropIndicator,content:a.root,handle:we(".mw-handle-drag-button",a.root.get(0)),handle:"self",document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});this.isResizing=!1,b.resizer.on("resizeStart",O=>{this.isResizing=!0,mw.app.registerChange(b.getTarget())}),b.resizer.on("resizeStop",O=>this.isResizing=!1),b.on("targetChange",function(O){a.menu.setTarget(O),O.className.includes("col-")?b.resizer.disable():b.resizer.enable(),i.handles.set("interactionHandle",null),i.handles.set("layout",null),i.handles.get("layout").hide(),i.handles.get("interactionHandle").hide()}),this.moduleHandle=new Pr({...this.settings,dropIndicator:this.dropIndicator,content:u.root,handle:u.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!1,id:"mw-handle-item-module-menu",handle:"self",setDraggableTarget:function(O){return O.nodeType===1?st.parentsOrCurrentOrderMatchOrOnlyFirst(O.parentElement,["edit","module"]):!1}});var w=this.moduleHandle;this.getModuleQuickSettings=O=>new Promise(T=>{T(mw.quickSettings[O]),this.dispatch("moduleQuickSettings",{module:O})}),this.getLayoutQuickSettings=()=>new Promise(O=>{O(mw.layoutQuickSettings),this.dispatch("layoutQuickSettings",{module:type})}),w.on("targetChange",function(O){i.getModuleQuickSettings(O.dataset.type).then(function(T){mw.app.liveEdit.moduleHandleContent.menu.setMenu("dynamic",T),u.menu.setTarget(O),u.menu.show()}),i.handles.set("layout",null),i.handles.set("interactionHandle",null),i.handles.get("layout").hide(),i.handles.get("interactionHandle").hide()}),this.layoutHandle=new Pr({...this.settings,dropIndicator:this.dropIndicator,content:h.root,handle:h.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var S=this.layoutHandle;S.wrapper.css({zIndex:1e3});var D=i.lang("Layout");h.menu.setTitle(D),S.on("targetChange",function(O){i.getLayoutQuickSettings(O.dataset.type).then(function(T){mw.app.liveEdit.layoutHandleContent.menu.setMenu("dynamic",T)}),h.menu.setTarget(O),h.menu.setTitle(D),i.elementAnalyzer.isEditOrInEdit(O)?(h.plusTop.show(),h.plusBottom.show()):(h.plusTop.hide(),h.plusBottom.hide())}),h.handle=S,u.handle=w,a.handle=b;const P=new dd;this.interactionHandle=new Pr({...this.settings,content:P.root,document:this.settings.document,resizable:!1,className:"mw-handle-item-interaction-handle"}),this.interactionHandle.menu=P.menu,this.handles=new nd({interactionHandle:this.interactionHandle,element:b,module:w,layout:S}),this.observe=new Gc(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}getSelectedNode(){return this.activeNode}selectNode(a){if(this.handles.targetIsOrInsideHandle(a,this.handles.get("layout"))){this.handles.hide(),this.document.querySelectorAll("[contenteditable]").forEach(h=>h.contentEditable=!1);return}this.activeNode=a;const i=[];["IMG"].indexOf(a.nodeName)!==-1?i.push(a):i.push(st.firstBlockLevel(a));let s=i[0];var a=st.firstParentOrCurrentWithAnyOfClasses(i[0],["element","module","cloneable","layout","edit"]);if(s.nodeName!=="IMG"&&(s=st.firstBlockLevel(i[0])),s=a,this.document.querySelectorAll("[contenteditable]").forEach(h=>h.contentEditable=!1),this.document.querySelectorAll("[data-mw-live-edithover]").forEach(h=>delete h.dataset.mwLiveEdithover),this.handles.get("element").set(null),this.handles.get("module").set(null),this.handles.hide(),s){s=this._hoverAndSelectExceptions(s);const h=this.elementAnalyzer.getType(s);if(h!=="layout"){var u=st.firstParentOrCurrentWithClass(s,"module-layouts");u&&this.handles.set("layout",u)}h&&(h==="element"?(this.handles.hide("module"),this.handles.set(h,s)):h==="module"?(this.handles.hide("element"),this.handles.set(h,s)):h==="layout"?this.handles.set("layout",s):h==="edit"?this.handles.set("element",s):this.handles.hide()),this.activeNode=s}else{const h=st.firstParentOrCurrentWithAnyOfClasses(a,["module-layouts"]);h&&(this.handles.set("layout",h),this.activeNode=h)}}init(){this.settings.mode==="auto"&&setInterval(()=>td(this),1e3);const t=u=>{var h=u.target?u.target:u;h&&h.className&&typeof h.className=="string"&&h.className.indexOf("layout-plus")!==-1||this.selectNode(h)};function i(u){if(!u||!u.parentNode)return!1;const h=u.ownerDocument,b=h.defaultView,w=u.getBoundingClientRect(),S=u.offsetHeight,D=u.offsetWidth;return w.top>=-S&&w.left>=-D&&w.right<=(b.innerWidth||h.documentElement.clientWidth)+D&&w.bottom<=(b.innerHeight||h.documentElement.clientHeight)+S}let r,s=[];r="click",we(this.root).on("mousemove",u=>{var h={x:u.pageX,y:u.pageY};if(this.lastMousePosition){var b=this.getDistance(this.lastMousePosition,h);if(b>=3)this.lastMousePosition=h;else return}else{this.lastMousePosition=h;return}if(this.paused||this.isResizing){this.interactionHandle.hide();return}if(this.handles.targetIsOrInsideHandle(u)){this.interactionHandle.hide();return}const w=this.observe.fromEvent(u);let S=this.handles.get("element").getTarget(),D=this.handles.get("module").getTarget();i(S)||(this.handles.get("element").hide(),this.handles.get("element").set(null)),i(D)||(this.handles.get("module").hide(),this.handles.get("module").set(null));let P=st.firstParentOrCurrentWithAnyOfClasses(w[0],["element","module","cloneable","edit"]);const O=st.firstParentOrCurrentWithAnyOfClasses(u.target,["module-layouts"]);let T=!1;if(P=this._hoverAndSelectExceptions(P),P&&s.indexOf(P)===-1&&(s.forEach(j=>delete j.dataset.mwLiveEdithover),s=[],this.handles.targetIsSelected(P,this.interactionHandle)||(P.dataset.mwLiveEdithover=!0,s.push(P))),P===this.interactionHandle.getTarget()){this.interactionHandle.show();return}if(O&&(O.contains(S)&&(T=!0),O.contains(D)&&(T=!0),T?(this.handles.set("layout",null),this.handles.get("layout").hide()):this.handles.set("layout",O)),P&&!this.handles.targetIsSelectedAndHandleIsNotHidden(P,this.interactionHandle)&&!P.classList.contains("module-layouts")){var I="";P.dataset.mwTitle?I=P.dataset.mwTitle:P.dataset.type?I=P.dataset.type:P.nodeName==="P"?I=this.lang("Paragraph"):/(H[1-6])/.test(P.nodeName)?I=this.lang("Title")+" "+P.nodeName.replace(/^\D+/g,""):P.nodeName==="IMG"||P.nodeName==="IMAGE"?I=this.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(P.nodeName)?I=this.lang("Title "+P.nodeName.replace("H","")):["DIV","MAIN","SECTION"].includes(P.nodeName)?I=this.lang("Block"):I=this.lang("Text"),this.interactionHandle.menu.setTitle(I),this.interactionHandle.show(),this.interactionHandle.set(P),this.moduleHandle.draggablePaused(P)}});let a;we(this.root).on("dblclick",u=>{const h=mw.app.liveEdit.elementHandle.getTarget();h&&h.contains(a)&&mw.app.editor.dispatch("editNodeRequest",h),!h&&u.target.classList.contains("edit")&&u.target.style.backgroundImage&&mw.app.editor.dispatch("editNodeRequest",u.target)}),we(this.root).on(r,u=>{if(a=u.target,!this.paused)t(u);else{var h=this.elementHandle.getTarget();h&&!h.contains(u.target)&&this.play()}})}}globalThis.LiveEdit=fd;const Gh=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:none}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:999;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:none}.mw-handle-item.mw-le-resizable{position:absolute}.mw-handle-item.mw-handle-item-interaction-handle{pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden;pointer-events:none;display:none!important}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;pointer-events:none}.mw-draggable-helper .mw-element-is-dragged{opacity:1;pointer-events:none}#mw-handle-item-layout-root .mw-handle-item-menus-holder{top:10px;right:10px;left:auto;position:absolute}.mw-handle-item .mw-handle-item-menus-holder{height:42px;padding:0 12px;display:inline-flex;border-radius:7px;border:1px solid transparent;position:relative;top:-60px;left:-3px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;background-color:#fff}.mw-le-handle-menu{position:relative;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;display:inline-flex;align-items:center;pointer-events:all;position:static;transition:.2s;opacity:0;transform:translateY(10px);z-index:2}.mw-le-handle-menu .mw-le-handle-menu-buttons:empty{display:none!important}.mw-le-handle-menu *{vertical-align:middle}.mw-handle-item.mw-handle-active .mw-le-handle-menu .mw-le-handle-menu-buttons{opacity:1;transform:translateY(0)}#mw-handle-item-layout-root .mw-handle-item-menus-holder,#mw-handle-item-layout-root .mw-le-handle-menu-buttons{height:auto;padding:0}#mw-handle-item-layout-root .mw-le-handle-menu-buttons{left:auto;right:5px;top:5px;display:block}#mw-handle-item-layout-root .mw-le-handle-menu-buttons *{vertical-align:middle}#mw-handle-item-layout-root #mw-handle-item-layout-menu{top:0;right:5px;left:auto}#mw-handle-item-layout-root #mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-button-wide{width:auto;white-space:nowrap;display:block;text-align:left;padding:5px 0;height:auto;border:1px solid #eee;margin:2px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-button-wide *{vertical-align:middle}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-drag-button{cursor:grab}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:none;align-items:center;justify-content:center;padding:0 5px;height:20px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:grab;background-color:#0078ff;color:#fff}.mw-handle-item-interaction-handle .mw-le-handle-menu-title{display:inline-flex;position:absolute;top:-22px;left:-3px}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#0078ff;color:#fff;border-radius:7px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#016ce6}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}[data-mw-live-edithover=true]>*{pointer-events:none}[data-mw-live-edithover=true]>* .module,[data-mw-live-edithover=true]>* .element,[data-mw-live-edithover=true]>* .cloneable,[data-mw-live-edithover=true]>* .edit{pointer-events:all}[data-mw-live-edithover=true]>*.module,[data-mw-live-edithover=true]>*.element,[data-mw-live-edithover=true]>*.cloneable,[data-mw-live-edithover=true]>*.edit{pointer-events:all}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}html.le-dragging iframe{pointer-events:none!important}.mw-handle-item-draggable-self{position:absolute;pointer-events:all;inset:0;z-index:10;display:none;cursor:default}.mw-handle-item-draggable-self.active{display:block}.mw-handle-item[data-draggable=false] .mw-handle-item-draggable-self,.mw-handle-item[data-draggable=false] .mw-handle-item-draggable-self.active{display:none}.mw-handle-item.mw-le-resizable .mw-le-resizer:before,.mw-handle-item.mw-le-resizable .mw-le-resizer:after{position:absolute;width:9px;height:9px;background-color:#fff;border:2px solid #2a84fb;content:""}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before{top:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{top:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{left:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before{bottom:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{bottom:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{top:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before{left:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{left:calc(50% - 4px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before{right:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{right:calc(50% - 5px)}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizable.mw-le-resizable-disabled .mw-le-resizer{display:none}.mw-le-resizer{position:absolute;pointer-events:all}.mw-le-resizer-r{cursor:e-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-l{cursor:e-resize;height:100%;left:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:n-resize;height:5px;left:0;width:100%}.mw-le-resizer-t{top:0;cursor:n-resize;height:5px;left:0;width:100%}mw-le-element{display:block}mw-le-element{line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;box-sizing:border-box}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}body:not(.is_admin) [contenteditable=true]{outline:1px dotted #ccc;outline-offset:7px}.FIE_topbar-save-wrapper,.FIE_topbar-close-button{display:none!important}#sidebar-menu{overflow:auto;max-height:calc(100vh - 20px)}
`;var hn,Bn,di,lr,Vo,ur,Yo,Jr,Wa;class $a{constructor(t={}){At(this,lr);At(this,ur);At(this,Jr);At(this,hn,null);At(this,Bn,{});xt(this,"selectedCategory","");At(this,di,[]);xt(this,"root",null);const i={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},i,t),this.document=this.settings.document}on(t,i){ge(this,Bn)[t]?ge(this,Bn)[t].push(i):ge(this,Bn)[t]=[i]}dispatch(t,i){ge(this,Bn)[t]&&ge(this,Bn)[t].forEach(r=>{r.call(this,i)})}getData(){return ge(this,hn)}setData(t,i=!0){Si(this,hn,t);let r=0,s=ge(this,hn).length;for(;r<s;r++)typeof ge(this,hn)[r].categories=="string"&&(ge(this,hn)[r].categories=ge(this,hn)[r].categories.split(",").map(a=>a.trim()));i&&this.dispatch("dataChanged",ge(this,hn))}prepareCategories(){const t=[],i=this.getData();let r=0,s=i.length;for(;r<s;r++){let u=i[r].categories||"",h=0,b=u.length;for(;h<b;h++){const w=u[h].trim();t.indexOf(w)===-1&&t.push(w)}}t.sort(),this.categories=t}createCategoriesMenu(){const t=this.document.createElement("ul");this.prepareCategories(),t.className="modules-list-categories",t.innerHTML=this.categories.map(i=>`<li data-category="${i}">${i}</li>`).join(""),t.innerHTML=`<li data-category="">All categories</li> ${t.innerHTML}`,t.addEventListener("click",i=>{i.target.nodeName==="LI"&&this.selectCategory(i.target.dataset.category)}),this.categoriesNavigation=t,this.rootShadow.appendChild(t),this.on("categorySelect",i=>{const r=t.querySelectorAll("[data-category]");for(const s of r)s.classList[s.dataset.category===i?"add":"remove"]("active")})}selectCategory(t=""){this.selectedCategory=t,this.search(t),this.dispatch("categorySelect",t)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let t=document.createElement("style");t.textContent=this.settings.css,this.rootShadow.appendChild(t)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let i=0,r=t.length;const s={miscellaneous:Cn(this,ur,Yo).call(this,"miscellaneous")};for(;i<r;i++)(t[i].categories||["miscellaneous"]).forEach(u=>{s[u]||(s[u]=Cn(this,ur,Yo).call(this,u));const h=Cn(this,lr,Vo).call(this,t[i]);ge(this,di).push(h),s[u].appendChild(h),s[u].__$hasNodes=!0});for(const a in s)s[a].__$hasNodes&&this.modulesList.appendChild(s[a]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let i=0,r=t.length;for(;i<r;i++){const s=Cn(this,lr,Vo).call(this,t[i]);ge(this,di).push(s),this.modulesList.appendChild(s)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(t){t.nodeName&&(t.style.display="none")}showItem(t){t.nodeName&&(t.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",t=>this.search(void 0,this.searchField.value)),this.on("categorySelect",t=>{this.searchField.value=""})}async search(t="",i=""){if(this.settings.searchMode==="local")return Cn(this,Jr,Wa).call(this,t,i)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(t=>{t(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(t=>{t(this)})}}hn=new WeakMap,Bn=new WeakMap,di=new WeakMap,lr=new WeakSet,Vo=function(t){t.locked=t.description.includes("a");const i=this.document.createElement("div");return i.className="modules-list-block-item modules-list-block-item-is-locked-"+t.locked,i.__$data=t,i.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${t.icon||t.screenshot||t.image})"></div>
            <div class="modules-list-block-item-title">${t.name||t.title}</div>
            <div class="modules-list-block-item-description">${t.description}</div>
            ${t.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,i.addEventListener("click",r=>{r.stopPropagation(),i.__$data.locked?this.dispatch("lockedModuleSelected",{data:t,element:i}):this.dispatch("moduleSelected",{data:t,element:i})}),i.$data=t,i},ur=new WeakSet,Yo=function(t){const i=this.document.createElement("div");return i.className="modules-list-block-category-section",i.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+t+"</h5></div>",i.__$hasNodes=!1,i},Jr=new WeakSet,Wa=async function(t,i){return t&&(t=t.trim().toLowerCase()),i&&(i=i.trim().toLowerCase()),new Promise(r=>{let s=0,a=ge(this,di).length,u=0;for(;s<a;s++){const h=ge(this,di)[s],b=h.$data;if(t&&b.categories.indexOf(t)===-1){this.hideItem(h);continue}if(i&&(b.name||b.title).toLowerCase().indexOf(i)===-1){this.hideItem(h);continue}this.showItem(h),u++}console.log(i,t),this.modulesListNoResultsNode.style.display=u===0?"":"none",r()})};const qr=[],Ua=function(e){qr.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+e}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",t=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(e){(e.key==="Escape"||e.keyCode===27)&&qr.length>0&&(qr[0].remove(),qr.splice(0,1))});var Xo,oa=function(e){var t=new $a({data:Xo});t.create().then(function(){var i=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),r=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),s=mw.element({props:{className:"mw-le-layouts-dialog-col"}});i.append(r),i.append(s),mw.element(t.root).append(i),r.append(t.searchBlock);var a=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});r.append(a),r.append(t.categoriesNavigation),s.append(t.modulesList),e.append(t.root)})};const hd=()=>{var e=new Ua("mw-le-layouts-dialog"),t=e.dialog;if(Xo){oa(t);return}mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(i){return i.json()}).then(function(i){Xo=i,oa(t),mw.spinner({element:t.get(0),decorate:!0}).remove()})};var Ko,sa=function(e){var t=new $a({data:Ko});t.createCategorized().then(function(){e.append(t.root)})};const pd=()=>{var e=new Ua("mw-le-modules-dialog"),t=e.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var i=mw.$(this).attr("data-module-name"),r={class:this.className};i==="layout"&&(r.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,i,r,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),Ko?sa(t):(mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(i){return i.json()}).then(function(i){Ko=i,sa(t),mw.spinner({element:t.get(0),decorate:!0}).remove()}))},md={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return pd()},insertLayout:function(){return hd()}},gd={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await Ur.get(route("api.module.list")+"?layout_type=module").then(e=>{this.modulesListData=e.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(e){if(this.modulesSkinsData[e])return this.modulesSkinsData[e];if(await Ur.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.modulesSkinsData[e]=t.data}),this.modulesSkinsData[e])return this.modulesSkinsData[e]}},vd={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await Ur.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(e=>{this.layoutsListData=e.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var e="layouts";if(this.layoutSkinsData[e])return this.layoutSkinsData[e];if(await Ur.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.layoutSkinsData[e]=t.data}),this.layoutSkinsData[e])return this.layoutSkinsData[e]}};class yd extends Di{constructor(){super()}onRegister(){}}class bd extends Di{selectIcon(t){var i=$(t)[0];mw.iconLoader().init();var r=mw.iconPicker({iconOptions:!1});r.target=document.createElement("i"),r.on("select",function(s){s.render(),i.value=r.target.outerHTML;var a=new Event("input");i.dispatchEvent(a),r.dialog("hide")}),r.dialog()}removeIcon(t){var i=$(t)[0];i.value="";var r=new Event("input");i.dispatchEvent(r)}}class wd extends Di{constructor(){super()}selectLink(t){var i=new(mw.top()).LinkEditor({mode:"dialog",controllers:[{type:"url",config:{text:!1,target:!1}},{type:"page",config:{text:!1,target:!1}},{type:"post",config:{text:!1,target:!1}},{type:"file",config:{text:!1,target:!1}},{type:"email",config:{text:!1,target:!1}},{type:"layout",config:{text:!1,target:!1}}]});mw.$(t)&&i.setValue({url:mw.$(t).val()||""});var r=this;i.promise().then(function(s){if(s){var a={},u=s.url;a.url=u,s.data&&s.data.id&&(a.id=s.data.id,s.data.type&&s.data.type==="category"?a.type="category":(s.data.type&&s.data.type==="page"||s.data.content_type)&&(a.type="content")),r.dispatch("selected",a)}})}}class xd extends Di{constructor(){super(),this.colorPickerInstances=[],this.positionToElement=!1}setPositionToElement(t){this.positionToElement=t}selectColor(t,i=!1){if(this.colorPickerInstances.length>0)for(let u=0;u<this.colorPickerInstances.length;u++)this.colorPickerInstances[u].remove();var r=$(t)[0];let s=this.generateRandId(10),a=mw.top().dialog({content:'<div id="color-picker-'+s+'" style="width:232px;height:325px;"></div>',title:"Color Picker",footer:!1,width:240,overlayClose:!0});a.dialogContainer&&(a.dialogContainer.style.padding="0px"),a.overlay&&(a.overlay.style.backgroundColor="transparent"),this.colorPickerInstances.push(a),mw.top().colorPicker({element:"#color-picker-"+s,onchange:function(u){r.value=u,r.dispatchEvent(new Event("input")),i&&i(u)}}),a.center()}generateRandId(t){let i="";const r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",s=r.length;let a=0;for(;a<t;)i+=r.charAt(Math.floor(Math.random()*s)),a+=1;return i}}(()=>{function e(f,y){var v=Object.keys(f);if(Object.getOwnPropertySymbols){var E=Object.getOwnPropertySymbols(f);y&&(E=E.filter(function(k){return Object.getOwnPropertyDescriptor(f,k).enumerable})),v.push.apply(v,E)}return v}function t(f){for(var y=1;y<arguments.length;y++){var v=arguments[y]!=null?arguments[y]:{};y%2?e(Object(v),!0).forEach(function(E){r(f,E,v[E])}):Object.getOwnPropertyDescriptors?Object.defineProperties(f,Object.getOwnPropertyDescriptors(v)):e(Object(v)).forEach(function(E){Object.defineProperty(f,E,Object.getOwnPropertyDescriptor(v,E))})}return f}function i(f){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?i=function(y){return typeof y}:i=function(y){return y&&typeof Symbol=="function"&&y.constructor===Symbol&&y!==Symbol.prototype?"symbol":typeof y},i(f)}function r(f,y,v){return y in f?Object.defineProperty(f,y,{value:v,enumerable:!0,configurable:!0,writable:!0}):f[y]=v,f}function s(){return s=Object.assign||function(f){for(var y=1;y<arguments.length;y++){var v=arguments[y];for(var E in v)Object.prototype.hasOwnProperty.call(v,E)&&(f[E]=v[E])}return f},s.apply(this,arguments)}function a(f,y){if(f==null)return{};var v={},E=Object.keys(f),k,F;for(F=0;F<E.length;F++)k=E[F],!(y.indexOf(k)>=0)&&(v[k]=f[k]);return v}function u(f,y){if(f==null)return{};var v=a(f,y),E,k;if(Object.getOwnPropertySymbols){var F=Object.getOwnPropertySymbols(f);for(k=0;k<F.length;k++)E=F[k],!(y.indexOf(E)>=0)&&(!Object.prototype.propertyIsEnumerable.call(f,E)||(v[E]=f[E]))}return v}var h="1.15.0";function b(f){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(f)}var w=b(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),S=b(/Edge/i),D=b(/firefox/i),P=b(/safari/i)&&!b(/chrome/i)&&!b(/android/i),O=b(/iP(ad|od|hone)/i),T=b(/chrome/i)&&b(/android/i),I={capture:!1,passive:!1};function j(f,y,v){f.addEventListener(y,v,!w&&I)}function H(f,y,v){f.removeEventListener(y,v,!w&&I)}function he(f,y){if(y){if(y[0]===">"&&(y=y.substring(1)),f)try{if(f.matches)return f.matches(y);if(f.msMatchesSelector)return f.msMatchesSelector(y);if(f.webkitMatchesSelector)return f.webkitMatchesSelector(y)}catch{return!1}return!1}}function Ae(f){return f.host&&f!==document&&f.host.nodeType?f.host:f.parentNode}function xe(f,y,v,E){if(f){v=v||document;do{if(y!=null&&(y[0]===">"?f.parentNode===v&&he(f,y):he(f,y))||E&&f===v)return f;if(f===v)break}while(f=Ae(f))}return null}var Ee=/\s+/g;function V(f,y,v){if(f&&y)if(f.classList)f.classList[v?"add":"remove"](y);else{var E=(" "+f.className+" ").replace(Ee," ").replace(" "+y+" "," ");f.className=(E+(v?" "+y:"")).replace(Ee," ")}}function c(f,y,v){var E=f&&f.style;if(E){if(v===void 0)return document.defaultView&&document.defaultView.getComputedStyle?v=document.defaultView.getComputedStyle(f,""):f.currentStyle&&(v=f.currentStyle),y===void 0?v:v[y];!(y in E)&&y.indexOf("webkit")===-1&&(y="-webkit-"+y),E[y]=v+(typeof v=="string"?"":"px")}}function re(f,y){var v="";if(typeof f=="string")v=f;else do{var E=c(f,"transform");E&&E!=="none"&&(v=E+" "+v)}while(!y&&(f=f.parentNode));var k=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return k&&new k(v)}function ae(f,y,v){if(f){var E=f.getElementsByTagName(y),k=0,F=E.length;if(v)for(;k<F;k++)v(E[k],k);return E}return[]}function Me(){var f=document.scrollingElement;return f||document.documentElement}function Q(f,y,v,E,k){if(!(!f.getBoundingClientRect&&f!==window)){var F,z,G,Y,oe,le,de;if(f!==window&&f.parentNode&&f!==Me()?(F=f.getBoundingClientRect(),z=F.top,G=F.left,Y=F.bottom,oe=F.right,le=F.height,de=F.width):(z=0,G=0,Y=window.innerHeight,oe=window.innerWidth,le=window.innerHeight,de=window.innerWidth),(y||v)&&f!==window&&(k=k||f.parentNode,!w))do if(k&&k.getBoundingClientRect&&(c(k,"transform")!=="none"||v&&c(k,"position")!=="static")){var $e=k.getBoundingClientRect();z-=$e.top+parseInt(c(k,"border-top-width")),G-=$e.left+parseInt(c(k,"border-left-width")),Y=z+F.height,oe=G+F.width;break}while(k=k.parentNode);if(E&&f!==window){var be=re(k||f),Ze=be&&be.a,Re=be&&be.d;be&&(z/=Re,G/=Ze,de/=Ze,le/=Re,Y=z+le,oe=G+de)}return{top:z,left:G,bottom:Y,right:oe,width:de,height:le}}}function Z(f,y,v){for(var E=it(f,!0),k=Q(f)[y];E;){var F=Q(E)[v],z=void 0;if(v==="top"||v==="left"?z=k>=F:z=k<=F,!z)return E;if(E===Me())break;E=it(E,!1)}return!1}function ne(f,y,v,E){for(var k=0,F=0,z=f.children;F<z.length;){if(z[F].style.display!=="none"&&z[F]!==ce.ghost&&(E||z[F]!==ce.dragged)&&xe(z[F],v.draggable,f,!1)){if(k===y)return z[F];k++}F++}return null}function ue(f,y){for(var v=f.lastElementChild;v&&(v===ce.ghost||c(v,"display")==="none"||y&&!he(v,y));)v=v.previousElementSibling;return v||null}function Ce(f,y){var v=0;if(!f||!f.parentNode)return-1;for(;f=f.previousElementSibling;)f.nodeName.toUpperCase()!=="TEMPLATE"&&f!==ce.clone&&(!y||he(f,y))&&v++;return v}function Je(f){var y=0,v=0,E=Me();if(f)do{var k=re(f),F=k.a,z=k.d;y+=f.scrollLeft*F,v+=f.scrollTop*z}while(f!==E&&(f=f.parentNode));return[y,v]}function nt(f,y){for(var v in f)if(f.hasOwnProperty(v)){for(var E in y)if(y.hasOwnProperty(E)&&y[E]===f[v][E])return Number(v)}return-1}function it(f,y){if(!f||!f.getBoundingClientRect)return Me();var v=f,E=!1;do if(v.clientWidth<v.scrollWidth||v.clientHeight<v.scrollHeight){var k=c(v);if(v.clientWidth<v.scrollWidth&&(k.overflowX=="auto"||k.overflowX=="scroll")||v.clientHeight<v.scrollHeight&&(k.overflowY=="auto"||k.overflowY=="scroll")){if(!v.getBoundingClientRect||v===document.body)return Me();if(E||y)return v;E=!0}}while(v=v.parentNode);return Me()}function yt(f,y){if(f&&y)for(var v in y)y.hasOwnProperty(v)&&(f[v]=y[v]);return f}function $t(f,y){return Math.round(f.top)===Math.round(y.top)&&Math.round(f.left)===Math.round(y.left)&&Math.round(f.height)===Math.round(y.height)&&Math.round(f.width)===Math.round(y.width)}var Pt;function Wt(f,y){return function(){if(!Pt){var v=arguments,E=this;v.length===1?f.call(E,v[0]):f.apply(E,v),Pt=setTimeout(function(){Pt=void 0},y)}}}function bt(){clearTimeout(Pt),Pt=void 0}function ct(f,y,v){f.scrollLeft+=y,f.scrollTop+=v}function _t(f){var y=window.Polymer,v=window.jQuery||window.Zepto;return y&&y.dom?y.dom(f).cloneNode(!0):v?v(f).clone(!0)[0]:f.cloneNode(!0)}var We="Sortable"+new Date().getTime();function tt(){var f=[],y;return{captureAnimationState:function(){if(f=[],!!this.options.animation){var v=[].slice.call(this.el.children);v.forEach(function(E){if(!(c(E,"display")==="none"||E===ce.ghost)){f.push({target:E,rect:Q(E)});var k=t({},f[f.length-1].rect);if(E.thisAnimationDuration){var F=re(E,!0);F&&(k.top-=F.f,k.left-=F.e)}E.fromRect=k}})}},addAnimationState:function(v){f.push(v)},removeAnimationState:function(v){f.splice(nt(f,{target:v}),1)},animateAll:function(v){var E=this;if(!this.options.animation){clearTimeout(y),typeof v=="function"&&v();return}var k=!1,F=0;f.forEach(function(z){var G=0,Y=z.target,oe=Y.fromRect,le=Q(Y),de=Y.prevFromRect,$e=Y.prevToRect,be=z.rect,Ze=re(Y,!0);Ze&&(le.top-=Ze.f,le.left-=Ze.e),Y.toRect=le,Y.thisAnimationDuration&&$t(de,le)&&!$t(oe,le)&&(be.top-le.top)/(be.left-le.left)==(oe.top-le.top)/(oe.left-le.left)&&(G=dt(be,de,$e,E.options)),$t(le,oe)||(Y.prevFromRect=oe,Y.prevToRect=le,G||(G=E.options.animation),E.animate(Y,be,le,G)),G&&(k=!0,F=Math.max(F,G),clearTimeout(Y.animationResetTimer),Y.animationResetTimer=setTimeout(function(){Y.animationTime=0,Y.prevFromRect=null,Y.fromRect=null,Y.prevToRect=null,Y.thisAnimationDuration=null},G),Y.thisAnimationDuration=G)}),clearTimeout(y),k?y=setTimeout(function(){typeof v=="function"&&v()},F):typeof v=="function"&&v(),f=[]},animate:function(v,E,k,F){if(F){c(v,"transition",""),c(v,"transform","");var z=re(this.el),G=z&&z.a,Y=z&&z.d,oe=(E.left-k.left)/(G||1),le=(E.top-k.top)/(Y||1);v.animatingX=!!oe,v.animatingY=!!le,c(v,"transform","translate3d("+oe+"px,"+le+"px,0)"),this.forRepaintDummy=Ge(v),c(v,"transition","transform "+F+"ms"+(this.options.easing?" "+this.options.easing:"")),c(v,"transform","translate3d(0,0,0)"),typeof v.animated=="number"&&clearTimeout(v.animated),v.animated=setTimeout(function(){c(v,"transition",""),c(v,"transform",""),v.animated=!1,v.animatingX=!1,v.animatingY=!1},F)}}}}function Ge(f){return f.offsetWidth}function dt(f,y,v,E){return Math.sqrt(Math.pow(y.top-f.top,2)+Math.pow(y.left-f.left,2))/Math.sqrt(Math.pow(y.top-v.top,2)+Math.pow(y.left-v.left,2))*E.animation}var Ue=[],Nt={initializeByDefault:!0},Qe={mount:function(f){for(var y in Nt)Nt.hasOwnProperty(y)&&!(y in f)&&(f[y]=Nt[y]);Ue.forEach(function(v){if(v.pluginName===f.pluginName)throw"Sortable: Cannot mount plugin ".concat(f.pluginName," more than once")}),Ue.push(f)},pluginEvent:function(f,y,v){var E=this;this.eventCanceled=!1,v.cancel=function(){E.eventCanceled=!0};var k=f+"Global";Ue.forEach(function(F){!y[F.pluginName]||(y[F.pluginName][k]&&y[F.pluginName][k](t({sortable:y},v)),y.options[F.pluginName]&&y[F.pluginName][f]&&y[F.pluginName][f](t({sortable:y},v)))})},initializePlugins:function(f,y,v,E){Ue.forEach(function(z){var G=z.pluginName;if(!(!f.options[G]&&!z.initializeByDefault)){var Y=new z(f,y,f.options);Y.sortable=f,Y.options=f.options,f[G]=Y,s(v,Y.defaults)}});for(var k in f.options)if(f.options.hasOwnProperty(k)){var F=this.modifyOption(f,k,f.options[k]);typeof F<"u"&&(f.options[k]=F)}},getEventProperties:function(f,y){var v={};return Ue.forEach(function(E){typeof E.eventProperties=="function"&&s(v,E.eventProperties.call(y[E.pluginName],f))}),v},modifyOption:function(f,y,v){var E;return Ue.forEach(function(k){!f[k.pluginName]||k.optionListeners&&typeof k.optionListeners[y]=="function"&&(E=k.optionListeners[y].call(f[k.pluginName],v))}),E}};function je(f){var y=f.sortable,v=f.rootEl,E=f.name,k=f.targetEl,F=f.cloneEl,z=f.toEl,G=f.fromEl,Y=f.oldIndex,oe=f.newIndex,le=f.oldDraggableIndex,de=f.newDraggableIndex,$e=f.originalEvent,be=f.putSortable,Ze=f.extraEventProperties;if(y=y||v&&v[We],!!y){var Re,Yt=y.options,ht="on"+E.charAt(0).toUpperCase()+E.substr(1);window.CustomEvent&&!w&&!S?Re=new CustomEvent(E,{bubbles:!0,cancelable:!0}):(Re=document.createEvent("Event"),Re.initEvent(E,!0,!0)),Re.to=z||v,Re.from=G||v,Re.item=k||v,Re.clone=F,Re.oldIndex=Y,Re.newIndex=oe,Re.oldDraggableIndex=le,Re.newDraggableIndex=de,Re.originalEvent=$e,Re.pullMode=be?be.lastPutMode:void 0;var Xt=t(t({},Ze),Qe.getEventProperties(E,y));for(var pt in Xt)Re[pt]=Xt[pt];v&&v.dispatchEvent(Re),Yt[ht]&&Yt[ht].call(y,Re)}}var ke=["evt"],He=function(f,y){var v=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},E=v.evt,k=u(v,ke);Qe.pluginEvent.bind(ce)(f,y,t({dragEl:K,parentEl:Pe,ghostEl:ye,rootEl:Ve,nextEl:vn,lastDownEl:Et,cloneEl:Fe,cloneHidden:kt,dragStarted:Yn,putSortable:rt,activeSortable:ce.active,originalEvent:E,oldIndex:ie,oldDraggableIndex:Vn,newIndex:ze,newDraggableIndex:Zt,hideGhostForTarget:yr,unhideGhostForTarget:br,cloneNowHidden:function(){kt=!0},cloneNowShown:function(){kt=!1},dispatchSortableEvent:function(F){Be({sortable:y,name:F,originalEvent:E})}},k))};function Be(f){je(t({putSortable:rt,cloneEl:Fe,targetEl:K,rootEl:Ve,oldIndex:ie,oldDraggableIndex:Vn,newIndex:ze,newDraggableIndex:Zt},f))}var K,Pe,ye,Ve,vn,Et,Fe,kt,ie,ze,Vn,Zt,gi,rt,yn=!1,en=!1,Lt=[],Ct,ft,Ri,Tn,ji,Fi,Yn,Mt,Ut,An=!1,Xn=!1,gt,Ie,Kn=[],Bi=!1,Gn=[],Jn=typeof document<"u",Vt=O,bn=S||w?"cssFloat":"float",zi=Jn&&!T&&!O&&"draggable"in document.createElement("div"),Qn=function(){if(Jn){if(w)return!1;var f=document.createElement("x");return f.style.cssText="pointer-events:auto",f.style.pointerEvents==="auto"}}(),vr=function(f,y){var v=c(f),E=parseInt(v.width)-parseInt(v.paddingLeft)-parseInt(v.paddingRight)-parseInt(v.borderLeftWidth)-parseInt(v.borderRightWidth),k=ne(f,0,y),F=ne(f,1,y),z=k&&c(k),G=F&&c(F),Y=z&&parseInt(z.marginLeft)+parseInt(z.marginRight)+Q(k).width,oe=G&&parseInt(G.marginLeft)+parseInt(G.marginRight)+Q(F).width;if(v.display==="flex")return v.flexDirection==="column"||v.flexDirection==="column-reverse"?"vertical":"horizontal";if(v.display==="grid")return v.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(k&&z.float&&z.float!=="none"){var le=z.float==="left"?"left":"right";return F&&(G.clear==="both"||G.clear===le)?"vertical":"horizontal"}return k&&(z.display==="block"||z.display==="flex"||z.display==="table"||z.display==="grid"||Y>=E&&v[bn]==="none"||F&&v[bn]==="none"&&Y+oe>E)?"vertical":"horizontal"},yo=function(f,y,v){var E=v?f.left:f.top,k=v?f.right:f.bottom,F=v?f.width:f.height,z=v?y.left:y.top,G=v?y.right:y.bottom,Y=v?y.width:y.height;return E===z||k===G||E+F/2===z+Y/2},bo=function(f,y){var v;return Lt.some(function(E){var k=E[We].options.emptyInsertThreshold;if(!(!k||ue(E))){var F=Q(E),z=f>=F.left-k&&f<=F.right+k,G=y>=F.top-k&&y<=F.bottom+k;if(z&&G)return v=E}}),v},qi=function(f){function y(k,F){return function(z,G,Y,oe){var le=z.options.group.name&&G.options.group.name&&z.options.group.name===G.options.group.name;if(k==null&&(F||le))return!0;if(k==null||k===!1)return!1;if(F&&k==="clone")return k;if(typeof k=="function")return y(k(z,G,Y,oe),F)(z,G,Y,oe);var de=(F?z:G).options.group.name;return k===!0||typeof k=="string"&&k===de||k.join&&k.indexOf(de)>-1}}var v={},E=f.group;(!E||i(E)!="object")&&(E={name:E}),v.name=E.name,v.checkPull=y(E.pull,!0),v.checkPut=y(E.put),v.revertClone=E.revertClone,f.group=v},yr=function(){!Qn&&ye&&c(ye,"display","none")},br=function(){!Qn&&ye&&c(ye,"display","")};Jn&&!T&&document.addEventListener("click",function(f){if(en)return f.preventDefault(),f.stopPropagation&&f.stopPropagation(),f.stopImmediatePropagation&&f.stopImmediatePropagation(),en=!1,!1},!0);var tn=function(f){if(K){f=f.touches?f.touches[0]:f;var y=bo(f.clientX,f.clientY);if(y){var v={};for(var E in f)f.hasOwnProperty(E)&&(v[E]=f[E]);v.target=v.rootEl=y,v.preventDefault=void 0,v.stopPropagation=void 0,y[We]._onDragOver(v)}}},wo=function(f){K&&K.parentNode[We]._isOutsideThisEl(f.target)};function ce(f,y){if(!(f&&f.nodeType&&f.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(f));this.el=f,this.options=y=s({},y),f[We]=this;var v={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(f.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return vr(f,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(F,z){F.setData("Text",z.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:ce.supportPointer!==!1&&"PointerEvent"in window&&!P,emptyInsertThreshold:5};Qe.initializePlugins(this,f,v);for(var E in v)!(E in y)&&(y[E]=v[E]);qi(y);for(var k in this)k.charAt(0)==="_"&&typeof this[k]=="function"&&(this[k]=this[k].bind(this));this.nativeDraggable=y.forceFallback?!1:zi,this.nativeDraggable&&(this.options.touchStartThreshold=1),y.supportPointer?j(f,"pointerdown",this._onTapStart):(j(f,"mousedown",this._onTapStart),j(f,"touchstart",this._onTapStart)),this.nativeDraggable&&(j(f,"dragover",this),j(f,"dragenter",this)),Lt.push(this.el),y.store&&y.store.get&&this.sort(y.store.get(this)||[]),s(this,tt())}ce.prototype={constructor:ce,_isOutsideThisEl:function(f){!this.el.contains(f)&&f!==this.el&&(Mt=null)},_getDirection:function(f,y){return typeof this.options.direction=="function"?this.options.direction.call(this,f,y,K):this.options.direction},_onTapStart:function(f){if(f.cancelable){var y=this,v=this.el,E=this.options,k=E.preventOnFilter,F=f.type,z=f.touches&&f.touches[0]||f.pointerType&&f.pointerType==="touch"&&f,G=(z||f).target,Y=f.target.shadowRoot&&(f.path&&f.path[0]||f.composedPath&&f.composedPath()[0])||G,oe=E.filter;if(Cr(v),!K&&!(/mousedown|pointerdown/.test(F)&&f.button!==0||E.disabled)&&!Y.isContentEditable&&!(!this.nativeDraggable&&P&&G&&G.tagName.toUpperCase()==="SELECT")&&(G=xe(G,E.draggable,v,!1),!(G&&G.animated)&&Et!==G)){if(ie=Ce(G),Vn=Ce(G,E.draggable),typeof oe=="function"){if(oe.call(this,f,G,this)){Be({sortable:y,rootEl:Y,name:"filter",targetEl:G,toEl:v,fromEl:v}),He("filter",y,{evt:f}),k&&f.cancelable&&f.preventDefault();return}}else if(oe&&(oe=oe.split(",").some(function(le){if(le=xe(Y,le.trim(),v,!1),le)return Be({sortable:y,rootEl:le,name:"filter",targetEl:G,fromEl:v,toEl:v}),He("filter",y,{evt:f}),!0}),oe)){k&&f.cancelable&&f.preventDefault();return}E.handle&&!xe(Y,E.handle,v,!1)||this._prepareDragStart(f,z,G)}}},_prepareDragStart:function(f,y,v){var E=this,k=E.el,F=E.options,z=k.ownerDocument,G;if(v&&!K&&v.parentNode===k){var Y=Q(v);if(Ve=k,K=v,Pe=K.parentNode,vn=K.nextSibling,Et=v,gi=F.group,ce.dragged=K,Ct={target:K,clientX:(y||f).clientX,clientY:(y||f).clientY},ji=Ct.clientX-Y.left,Fi=Ct.clientY-Y.top,this._lastX=(y||f).clientX,this._lastY=(y||f).clientY,K.style["will-change"]="all",G=function(){if(He("delayEnded",E,{evt:f}),ce.eventCanceled){E._onDrop();return}E._disableDelayedDragEvents(),!D&&E.nativeDraggable&&(K.draggable=!0),E._triggerDragStart(f,y),Be({sortable:E,name:"choose",originalEvent:f}),V(K,F.chosenClass,!0)},F.ignore.split(",").forEach(function(oe){ae(K,oe.trim(),Zn)}),j(z,"dragover",tn),j(z,"mousemove",tn),j(z,"touchmove",tn),j(z,"mouseup",E._onDrop),j(z,"touchend",E._onDrop),j(z,"touchcancel",E._onDrop),D&&this.nativeDraggable&&(this.options.touchStartThreshold=4,K.draggable=!0),He("delayStart",this,{evt:f}),F.delay&&(!F.delayOnTouchOnly||y)&&(!this.nativeDraggable||!(S||w))){if(ce.eventCanceled){this._onDrop();return}j(z,"mouseup",E._disableDelayedDrag),j(z,"touchend",E._disableDelayedDrag),j(z,"touchcancel",E._disableDelayedDrag),j(z,"mousemove",E._delayedDragTouchMoveHandler),j(z,"touchmove",E._delayedDragTouchMoveHandler),F.supportPointer&&j(z,"pointermove",E._delayedDragTouchMoveHandler),E._dragStartTimer=setTimeout(G,F.delay)}else G()}},_delayedDragTouchMoveHandler:function(f){var y=f.touches?f.touches[0]:f;Math.max(Math.abs(y.clientX-this._lastX),Math.abs(y.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){K&&Zn(K),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var f=this.el.ownerDocument;H(f,"mouseup",this._disableDelayedDrag),H(f,"touchend",this._disableDelayedDrag),H(f,"touchcancel",this._disableDelayedDrag),H(f,"mousemove",this._delayedDragTouchMoveHandler),H(f,"touchmove",this._delayedDragTouchMoveHandler),H(f,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(f,y){y=y||f.pointerType=="touch"&&f,!this.nativeDraggable||y?this.options.supportPointer?j(document,"pointermove",this._onTouchMove):y?j(document,"touchmove",this._onTouchMove):j(document,"mousemove",this._onTouchMove):(j(K,"dragend",this),j(Ve,"dragstart",this._onDragStart));try{document.selection?ti(function(){document.selection.empty()}):window.getSelection().removeAllRanges()}catch{}},_dragStarted:function(f,y){if(yn=!1,Ve&&K){He("dragStarted",this,{evt:y}),this.nativeDraggable&&j(document,"dragover",wo);var v=this.options;!f&&V(K,v.dragClass,!1),V(K,v.ghostClass,!0),ce.active=this,f&&this._appendGhost(),Be({sortable:this,name:"start",originalEvent:y})}else this._nulling()},_emulateDragOver:function(){if(ft){this._lastX=ft.clientX,this._lastY=ft.clientY,yr();for(var f=document.elementFromPoint(ft.clientX,ft.clientY),y=f;f&&f.shadowRoot&&(f=f.shadowRoot.elementFromPoint(ft.clientX,ft.clientY),f!==y);)y=f;if(K.parentNode[We]._isOutsideThisEl(f),y)do{if(y[We]){var v=void 0;if(v=y[We]._onDragOver({clientX:ft.clientX,clientY:ft.clientY,target:f,rootEl:y}),v&&!this.options.dragoverBubble)break}f=y}while(y=y.parentNode);br()}},_onTouchMove:function(f){if(Ct){var y=this.options,v=y.fallbackTolerance,E=y.fallbackOffset,k=f.touches?f.touches[0]:f,F=ye&&re(ye,!0),z=ye&&F&&F.a,G=ye&&F&&F.d,Y=Vt&&Ie&&Je(Ie),oe=(k.clientX-Ct.clientX+E.x)/(z||1)+(Y?Y[0]-Kn[0]:0)/(z||1),le=(k.clientY-Ct.clientY+E.y)/(G||1)+(Y?Y[1]-Kn[1]:0)/(G||1);if(!ce.active&&!yn){if(v&&Math.max(Math.abs(k.clientX-this._lastX),Math.abs(k.clientY-this._lastY))<v)return;this._onDragStart(f,!0)}if(ye){F?(F.e+=oe-(Ri||0),F.f+=le-(Tn||0)):F={a:1,b:0,c:0,d:1,e:oe,f:le};var de="matrix(".concat(F.a,",").concat(F.b,",").concat(F.c,",").concat(F.d,",").concat(F.e,",").concat(F.f,")");c(ye,"webkitTransform",de),c(ye,"mozTransform",de),c(ye,"msTransform",de),c(ye,"transform",de),Ri=oe,Tn=le,ft=k}f.cancelable&&f.preventDefault()}},_appendGhost:function(){if(!ye){var f=this.options.fallbackOnBody?document.body:Ve,y=Q(K,!0,Vt,!0,f),v=this.options;if(Vt){for(Ie=f;c(Ie,"position")==="static"&&c(Ie,"transform")==="none"&&Ie!==document;)Ie=Ie.parentNode;Ie!==document.body&&Ie!==document.documentElement?(Ie===document&&(Ie=Me()),y.top+=Ie.scrollTop,y.left+=Ie.scrollLeft):Ie=Me(),Kn=Je(Ie)}ye=K.cloneNode(!0),V(ye,v.ghostClass,!1),V(ye,v.fallbackClass,!0),V(ye,v.dragClass,!0),c(ye,"transition",""),c(ye,"transform",""),c(ye,"box-sizing","border-box"),c(ye,"margin",0),c(ye,"top",y.top),c(ye,"left",y.left),c(ye,"width",y.width),c(ye,"height",y.height),c(ye,"opacity","0.8"),c(ye,"position",Vt?"absolute":"fixed"),c(ye,"zIndex","100000"),c(ye,"pointerEvents","none"),ce.ghost=ye,f.appendChild(ye),c(ye,"transform-origin",ji/parseInt(ye.style.width)*100+"% "+Fi/parseInt(ye.style.height)*100+"%")}},_onDragStart:function(f,y){var v=this,E=f.dataTransfer,k=v.options;if(He("dragStart",this,{evt:f}),ce.eventCanceled){this._onDrop();return}He("setupClone",this),ce.eventCanceled||(Fe=_t(K),Fe.removeAttribute("id"),Fe.draggable=!1,Fe.style["will-change"]="",this._hideClone(),V(Fe,this.options.chosenClass,!1),ce.clone=Fe),v.cloneId=ti(function(){He("clone",v),!ce.eventCanceled&&(v.options.removeCloneOnHide||Ve.insertBefore(Fe,K),v._hideClone(),Be({sortable:v,name:"clone"}))}),!y&&V(K,k.dragClass,!0),y?(en=!0,v._loopId=setInterval(v._emulateDragOver,50)):(H(document,"mouseup",v._onDrop),H(document,"touchend",v._onDrop),H(document,"touchcancel",v._onDrop),E&&(E.effectAllowed="move",k.setData&&k.setData.call(v,E,K)),j(document,"drop",v),c(K,"transform","translateZ(0)")),yn=!0,v._dragStartId=ti(v._dragStarted.bind(v,y,f)),j(document,"selectstart",v),Yn=!0,P&&c(document.body,"user-select","none")},_onDragOver:function(f){var y=this.el,v=f.target,E,k,F,z=this.options,G=z.group,Y=ce.active,oe=gi===G,le=z.sort,de=rt||Y,$e,be=this,Ze=!1;if(Bi)return;function Re(Dn,Vi){He(Dn,be,t({evt:f,isOwner:oe,axis:$e?"vertical":"horizontal",revert:F,dragRect:E,targetRect:k,canSort:le,fromSortable:de,target:v,completed:ht,onMove:function(Ar,_o){return On(Ve,y,K,E,Ar,Q(Ar),f,_o)},changed:Xt},Vi))}function Yt(){Re("dragOverAnimationCapture"),be.captureAnimationState(),be!==de&&de.captureAnimationState()}function ht(Dn){return Re("dragOverCompleted",{insertion:Dn}),Dn&&(oe?Y._hideClone():Y._showClone(be),be!==de&&(V(K,rt?rt.options.ghostClass:Y.options.ghostClass,!1),V(K,z.ghostClass,!0)),rt!==be&&be!==ce.active?rt=be:be===ce.active&&rt&&(rt=null),de===be&&(be._ignoreWhileAnimating=v),be.animateAll(function(){Re("dragOverAnimationComplete"),be._ignoreWhileAnimating=null}),be!==de&&(de.animateAll(),de._ignoreWhileAnimating=null)),(v===K&&!K.animated||v===y&&!v.animated)&&(Mt=null),!z.dragoverBubble&&!f.rootEl&&v!==document&&(K.parentNode[We]._isOutsideThisEl(f.target),!Dn&&tn(f)),!z.dragoverBubble&&f.stopPropagation&&f.stopPropagation(),Ze=!0}function Xt(){ze=Ce(K),Zt=Ce(K,z.draggable),Be({sortable:be,name:"change",toEl:y,newIndex:ze,newDraggableIndex:Zt,originalEvent:f})}if(f.preventDefault!==void 0&&f.cancelable&&f.preventDefault(),v=xe(v,z.draggable,y,!0),Re("dragOver"),ce.eventCanceled)return Ze;if(K.contains(f.target)||v.animated&&v.animatingX&&v.animatingY||be._ignoreWhileAnimating===v)return ht(!1);if(en=!1,Y&&!z.disabled&&(oe?le||(F=Pe!==Ve):rt===this||(this.lastPutMode=gi.checkPull(this,Y,K,f))&&G.checkPut(this,Y,K,f))){if($e=this._getDirection(f,v)==="vertical",E=Q(K),Re("dragOverValid"),ce.eventCanceled)return Ze;if(F)return Pe=Ve,Yt(),this._hideClone(),Re("revert"),ce.eventCanceled||(vn?Ve.insertBefore(K,vn):Ve.appendChild(K)),ht(!0);var pt=ue(y,z.draggable);if(!pt||xo(f,$e,this)&&!pt.animated){if(pt===K)return ht(!1);if(pt&&y===f.target&&(v=pt),v&&(k=Q(v)),On(Ve,y,K,E,v,k,f,!!v)!==!1)return Yt(),pt&&pt.nextSibling?y.insertBefore(K,pt.nextSibling):y.appendChild(K),Pe=y,Xt(),ht(!0)}else if(pt&&xr(f,$e,this)){var Kt=ne(y,0,z,!0);if(Kt===K)return ht(!1);if(v=Kt,k=Q(v),On(Ve,y,K,E,v,k,f,!1)!==!1)return Yt(),y.insertBefore(K,Kt),Pe=y,Xt(),ht(!0)}else if(v.parentNode===y){k=Q(v);var Ht=0,xn,oi=K.parentNode!==y,Ln=!yo(K.animated&&K.toRect||E,v.animated&&v.toRect||k,$e),St=$e?"top":"left",nn=Z(v,"top","top")||Z(K,"top","top"),_i=nn?nn.scrollTop:void 0;Mt!==v&&(xn=k[St],An=!1,Xn=!Ln&&z.invertSwap||oi),Ht=ei(f,v,k,$e,Ln?1:z.swapThreshold,z.invertedSwapThreshold==null?z.swapThreshold:z.invertedSwapThreshold,Xn,Mt===v);var It;if(Ht!==0){var rn=Ce(K);do rn-=Ht,It=Pe.children[rn];while(It&&(c(It,"display")==="none"||It===ye))}if(Ht===0||It===v)return ht(!1);Mt=v,Ut=Ht;var on=v.nextElementSibling,Rt=!1;Rt=Ht===1;var sn=On(Ve,y,K,E,v,k,f,Rt);if(sn!==!1)return(sn===1||sn===-1)&&(Rt=sn===1),Bi=!0,setTimeout(vi,30),Yt(),Rt&&!on?y.appendChild(K):v.parentNode.insertBefore(K,Rt?on:v),nn&&ct(nn,0,_i-nn.scrollTop),Pe=K.parentNode,xn!==void 0&&!Xn&&(gt=Math.abs(xn-Q(v)[St])),Xt(),ht(!0)}if(y.contains(K))return ht(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){H(document,"mousemove",this._onTouchMove),H(document,"touchmove",this._onTouchMove),H(document,"pointermove",this._onTouchMove),H(document,"dragover",tn),H(document,"mousemove",tn),H(document,"touchmove",tn)},_offUpEvents:function(){var f=this.el.ownerDocument;H(f,"mouseup",this._onDrop),H(f,"touchend",this._onDrop),H(f,"pointerup",this._onDrop),H(f,"touchcancel",this._onDrop),H(document,"selectstart",this)},_onDrop:function(f){var y=this.el,v=this.options;if(ze=Ce(K),Zt=Ce(K,v.draggable),He("drop",this,{evt:f}),Pe=K&&K.parentNode,ze=Ce(K),Zt=Ce(K,v.draggable),ce.eventCanceled){this._nulling();return}yn=!1,Xn=!1,An=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),$i(this.cloneId),$i(this._dragStartId),this.nativeDraggable&&(H(document,"drop",this),H(y,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),P&&c(document.body,"user-select",""),c(K,"transform",""),f&&(Yn&&(f.cancelable&&f.preventDefault(),!v.dropBubble&&f.stopPropagation()),ye&&ye.parentNode&&ye.parentNode.removeChild(ye),(Ve===Pe||rt&&rt.lastPutMode!=="clone")&&Fe&&Fe.parentNode&&Fe.parentNode.removeChild(Fe),K&&(this.nativeDraggable&&H(K,"dragend",this),Zn(K),K.style["will-change"]="",Yn&&!yn&&V(K,rt?rt.options.ghostClass:this.options.ghostClass,!1),V(K,this.options.chosenClass,!1),Be({sortable:this,name:"unchoose",toEl:Pe,newIndex:null,newDraggableIndex:null,originalEvent:f}),Ve!==Pe?(ze>=0&&(Be({rootEl:Pe,name:"add",toEl:Pe,fromEl:Ve,originalEvent:f}),Be({sortable:this,name:"remove",toEl:Pe,originalEvent:f}),Be({rootEl:Pe,name:"sort",toEl:Pe,fromEl:Ve,originalEvent:f}),Be({sortable:this,name:"sort",toEl:Pe,originalEvent:f})),rt&&rt.save()):ze!==ie&&ze>=0&&(Be({sortable:this,name:"update",toEl:Pe,originalEvent:f}),Be({sortable:this,name:"sort",toEl:Pe,originalEvent:f})),ce.active&&((ze==null||ze===-1)&&(ze=ie,Zt=Vn),Be({sortable:this,name:"end",toEl:Pe,originalEvent:f}),this.save()))),this._nulling()},_nulling:function(){He("nulling",this),Ve=K=Pe=ye=vn=Fe=Et=kt=Ct=ft=Yn=ze=Zt=ie=Vn=Mt=Ut=rt=gi=ce.dragged=ce.ghost=ce.clone=ce.active=null,Gn.forEach(function(f){f.checked=!0}),Gn.length=Ri=Tn=0},handleEvent:function(f){switch(f.type){case"drop":case"dragend":this._onDrop(f);break;case"dragenter":case"dragover":K&&(this._onDragOver(f),wr(f));break;case"selectstart":f.preventDefault();break}},toArray:function(){for(var f=[],y,v=this.el.children,E=0,k=v.length,F=this.options;E<k;E++)y=v[E],xe(y,F.draggable,this.el,!1)&&f.push(y.getAttribute(F.dataIdAttr)||Er(y));return f},sort:function(f,y){var v={},E=this.el;this.toArray().forEach(function(k,F){var z=E.children[F];xe(z,this.options.draggable,E,!1)&&(v[k]=z)},this),y&&this.captureAnimationState(),f.forEach(function(k){v[k]&&(E.removeChild(v[k]),E.appendChild(v[k]))}),y&&this.animateAll()},save:function(){var f=this.options.store;f&&f.set&&f.set(this)},closest:function(f,y){return xe(f,y||this.options.draggable,this.el,!1)},option:function(f,y){var v=this.options;if(y===void 0)return v[f];var E=Qe.modifyOption(this,f,y);typeof E<"u"?v[f]=E:v[f]=y,f==="group"&&qi(v)},destroy:function(){He("destroy",this);var f=this.el;f[We]=null,H(f,"mousedown",this._onTapStart),H(f,"touchstart",this._onTapStart),H(f,"pointerdown",this._onTapStart),this.nativeDraggable&&(H(f,"dragover",this),H(f,"dragenter",this)),Array.prototype.forEach.call(f.querySelectorAll("[draggable]"),function(y){y.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),Lt.splice(Lt.indexOf(this.el),1),this.el=f=null},_hideClone:function(){if(!kt){if(He("hideClone",this),ce.eventCanceled)return;c(Fe,"display","none"),this.options.removeCloneOnHide&&Fe.parentNode&&Fe.parentNode.removeChild(Fe),kt=!0}},_showClone:function(f){if(f.lastPutMode!=="clone"){this._hideClone();return}if(kt){if(He("showClone",this),ce.eventCanceled)return;K.parentNode==Ve&&!this.options.group.revertClone?Ve.insertBefore(Fe,K):vn?Ve.insertBefore(Fe,vn):Ve.appendChild(Fe),this.options.group.revertClone&&this.animate(K,Fe),c(Fe,"display",""),kt=!1}}};function wr(f){f.dataTransfer&&(f.dataTransfer.dropEffect="move"),f.cancelable&&f.preventDefault()}function On(f,y,v,E,k,F,z,G){var Y,oe=f[We],le=oe.options.onMove,de;return window.CustomEvent&&!w&&!S?Y=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(Y=document.createEvent("Event"),Y.initEvent("move",!0,!0)),Y.to=y,Y.from=f,Y.dragged=v,Y.draggedRect=E,Y.related=k||y,Y.relatedRect=F||Q(y),Y.willInsertAfter=G,Y.originalEvent=z,f.dispatchEvent(Y),le&&(de=le.call(oe,Y,z)),de}function Zn(f){f.draggable=!1}function vi(){Bi=!1}function xr(f,y,v){var E=Q(ne(v.el,0,v.options,!0)),k=10;return y?f.clientX<E.left-k||f.clientY<E.top&&f.clientX<E.right:f.clientY<E.top-k||f.clientY<E.bottom&&f.clientX<E.left}function xo(f,y,v){var E=Q(ue(v.el,v.options.draggable)),k=10;return y?f.clientX>E.right+k||f.clientX<=E.right&&f.clientY>E.bottom&&f.clientX>=E.left:f.clientX>E.right&&f.clientY>E.top||f.clientX<=E.right&&f.clientY>E.bottom+k}function ei(f,y,v,E,k,F,z,G){var Y=E?f.clientY:f.clientX,oe=E?v.height:v.width,le=E?v.top:v.left,de=E?v.bottom:v.right,$e=!1;if(!z){if(G&&gt<oe*k){if(!An&&(Ut===1?Y>le+oe*F/2:Y<de-oe*F/2)&&(An=!0),An)$e=!0;else if(Ut===1?Y<le+gt:Y>de-gt)return-Ut}else if(Y>le+oe*(1-k)/2&&Y<de-oe*(1-k)/2)return _r(y)}return $e=$e||z,$e&&(Y<le+oe*F/2||Y>de-oe*F/2)?Y>le+oe/2?1:-1:0}function _r(f){return Ce(K)<Ce(f)?1:-1}function Er(f){for(var y=f.tagName+f.className+f.src+f.href+f.textContent,v=y.length,E=0;v--;)E+=y.charCodeAt(v);return E.toString(36)}function Cr(f){Gn.length=0;for(var y=f.getElementsByTagName("input"),v=y.length;v--;){var E=y[v];E.checked&&Gn.push(E)}}function ti(f){return setTimeout(f,0)}function $i(f){return clearTimeout(f)}Jn&&j(document,"touchmove",function(f){(ce.active||yn)&&f.cancelable&&f.preventDefault()}),ce.utils={on:j,off:H,css:c,find:ae,is:function(f,y){return!!xe(f,y,f,!1)},extend:yt,throttle:Wt,closest:xe,toggleClass:V,clone:_t,index:Ce,nextTick:ti,cancelNextTick:$i,detectDirection:vr,getChild:ne},ce.get=function(f){return f[We]},ce.mount=function(){for(var f=arguments.length,y=new Array(f),v=0;v<f;v++)y[v]=arguments[v];y[0].constructor===Array&&(y=y[0]),y.forEach(function(E){if(!E.prototype||!E.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(E));E.utils&&(ce.utils=t(t({},ce.utils),E.utils)),Qe.mount(E)})},ce.create=function(f,y){return new ce(f,y)},ce.version=h;var Xe=[],ni,Wi,yi=!1,bi,ii,ri,ot;function Nn(){function f(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var y in this)y.charAt(0)==="_"&&typeof this[y]=="function"&&(this[y]=this[y].bind(this))}return f.prototype={dragStarted:function(y){var v=y.originalEvent;this.sortable.nativeDraggable?j(document,"dragover",this._handleAutoScroll):this.options.supportPointer?j(document,"pointermove",this._handleFallbackAutoScroll):v.touches?j(document,"touchmove",this._handleFallbackAutoScroll):j(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(y){var v=y.originalEvent;!this.options.dragOverBubble&&!v.rootEl&&this._handleAutoScroll(v)},drop:function(){this.sortable.nativeDraggable?H(document,"dragover",this._handleAutoScroll):(H(document,"pointermove",this._handleFallbackAutoScroll),H(document,"touchmove",this._handleFallbackAutoScroll),H(document,"mousemove",this._handleFallbackAutoScroll)),Sr(),wn(),bt()},nulling:function(){ri=Wi=ni=yi=ot=bi=ii=null,Xe.length=0},_handleFallbackAutoScroll:function(y){this._handleAutoScroll(y,!0)},_handleAutoScroll:function(y,v){var E=this,k=(y.touches?y.touches[0]:y).clientX,F=(y.touches?y.touches[0]:y).clientY,z=document.elementFromPoint(k,F);if(ri=y,v||this.options.forceAutoScrollFallback||S||w||P){Ui(y,this.options,z,v);var G=it(z,!0);yi&&(!ot||k!==bi||F!==ii)&&(ot&&Sr(),ot=setInterval(function(){var Y=it(document.elementFromPoint(k,F),!0);Y!==G&&(G=Y,wn()),Ui(y,E.options,Y,v)},10),bi=k,ii=F)}else{if(!this.options.bubbleScroll||it(z,!0)===Me()){wn();return}Ui(y,this.options,it(z,!1),!1)}}},s(f,{pluginName:"scroll",initializeByDefault:!0})}function wn(){Xe.forEach(function(f){clearInterval(f.pid)}),Xe=[]}function Sr(){clearInterval(ot)}var Ui=Wt(function(f,y,v,E){if(y.scroll){var k=(f.touches?f.touches[0]:f).clientX,F=(f.touches?f.touches[0]:f).clientY,z=y.scrollSensitivity,G=y.scrollSpeed,Y=Me(),oe=!1,le;Wi!==v&&(Wi=v,wn(),ni=y.scroll,le=y.scrollFn,ni===!0&&(ni=it(v,!0)));var de=0,$e=ni;do{var be=$e,Ze=Q(be),Re=Ze.top,Yt=Ze.bottom,ht=Ze.left,Xt=Ze.right,pt=Ze.width,Kt=Ze.height,Ht=void 0,xn=void 0,oi=be.scrollWidth,Ln=be.scrollHeight,St=c(be),nn=be.scrollLeft,_i=be.scrollTop;be===Y?(Ht=pt<oi&&(St.overflowX==="auto"||St.overflowX==="scroll"||St.overflowX==="visible"),xn=Kt<Ln&&(St.overflowY==="auto"||St.overflowY==="scroll"||St.overflowY==="visible")):(Ht=pt<oi&&(St.overflowX==="auto"||St.overflowX==="scroll"),xn=Kt<Ln&&(St.overflowY==="auto"||St.overflowY==="scroll"));var It=Ht&&(Math.abs(Xt-k)<=z&&nn+pt<oi)-(Math.abs(ht-k)<=z&&!!nn),rn=xn&&(Math.abs(Yt-F)<=z&&_i+Kt<Ln)-(Math.abs(Re-F)<=z&&!!_i);if(!Xe[de])for(var on=0;on<=de;on++)Xe[on]||(Xe[on]={});(Xe[de].vx!=It||Xe[de].vy!=rn||Xe[de].el!==be)&&(Xe[de].el=be,Xe[de].vx=It,Xe[de].vy=rn,clearInterval(Xe[de].pid),(It!=0||rn!=0)&&(oe=!0,Xe[de].pid=setInterval((function(){E&&this.layer===0&&ce.active._onTouchMove(ri);var Rt=Xe[this.layer].vy?Xe[this.layer].vy*G:0,sn=Xe[this.layer].vx?Xe[this.layer].vx*G:0;typeof le=="function"&&le.call(ce.dragged.parentNode[We],sn,Rt,f,ri,Xe[this.layer].el)!=="continue"||ct(Xe[this.layer].el,sn,Rt)}).bind({layer:de}),24))),de++}while(y.bubbleScroll&&$e!==Y&&($e=it($e,!1)));yi=oe}},30),wi=function(f){var y=f.originalEvent,v=f.putSortable,E=f.dragEl,k=f.activeSortable,F=f.dispatchSortableEvent,z=f.hideGhostForTarget,G=f.unhideGhostForTarget;if(y){var Y=v||k;z();var oe=y.changedTouches&&y.changedTouches.length?y.changedTouches[0]:y,le=document.elementFromPoint(oe.clientX,oe.clientY);G(),Y&&!Y.el.contains(le)&&(F("spill"),this.onSpill({dragEl:E,putSortable:v}))}};function xi(){}xi.prototype={startIndex:null,dragStart:function(f){var y=f.oldDraggableIndex;this.startIndex=y},onSpill:function(f){var y=f.dragEl,v=f.putSortable;this.sortable.captureAnimationState(),v&&v.captureAnimationState();var E=ne(this.sortable.el,this.startIndex,this.options);E?this.sortable.el.insertBefore(y,E):this.sortable.el.appendChild(y),this.sortable.animateAll(),v&&v.animateAll()},drop:wi},s(xi,{pluginName:"revertOnSpill"});function kn(){}kn.prototype={onSpill:function(f){var y=f.dragEl,v=f.putSortable,E=v||this.sortable;E.captureAnimationState(),y.parentNode&&y.parentNode.removeChild(y),E.animateAll()},drop:wi},s(kn,{pluginName:"removeOnSpill"}),ce.mount(new Nn),ce.mount(kn,xi);var Tr=ce;if(window.Sortable=Tr,typeof window.Livewire>"u")throw"Livewire Sortable.js Plugin: window.Livewire is undefined. Make sure @livewireScripts is placed above this script include";window.Livewire.directive("sortable",(f,y,v)=>{if(y.modifiers.length>0)return;let E={};f.hasAttribute("wire:sortable.options")&&(E=new Function(`return ${f.getAttribute("wire:sortable.options")};`)()),f.livewire_sortable=window.Sortable.create(f,{...E,draggable:"[wire\\:sortable\\.item]",handle:f.querySelector("[wire\\:sortable\\.handle]")?"[wire\\:sortable\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable.item",group:{name:f.getAttribute("wire:sortable"),pull:!1,put:!1},store:{set:function(k){let F=k.toArray().map((z,G)=>({order:G+1,value:z}));v.call(y.method,F)}}})}),window.Livewire.directive("sortable-group",(f,y,v)=>{if(!y.modifiers.includes("item-group"))return;let E={};f.hasAttribute("wire:sortable-group.options")&&(E=new Function(`return ${f.getAttribute("wire:sortable-group.options")};`)()),f.livewire_sortable=window.Sortable.create(f,{...E,draggable:"[wire\\:sortable-group\\.item]",handle:f.querySelector("[wire\\:sortable-group\\.handle]")?"[wire\\:sortable-group\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable-group.item",group:{name:f.closest("[wire\\:sortable-group]").getAttribute("wire:sortable-group"),pull:!0,put:!0},onSort:()=>{let k=f.closest("[wire\\:sortable-group]"),F=Array.from(k.querySelectorAll("[wire\\:sortable-group\\.item-group]")).map((z,G)=>({order:G+1,value:z.getAttribute("wire:sortable-group.item-group"),items:z.livewire_sortable.toArray().map((Y,oe)=>({order:oe+1,value:Y}))}));v.call(k.getAttribute("wire:sortable-group"),F)}})})})();/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */var Go=!1,Jo=!1,fi=[],Qo=-1;function _d(e){Ed(e)}function Ed(e){fi.includes(e)||fi.push(e),Cd()}function Va(e){let t=fi.indexOf(e);t!==-1&&t>Qo&&fi.splice(t,1)}function Cd(){!Jo&&!Go&&(Go=!0,queueMicrotask(Sd))}function Sd(){Go=!1,Jo=!0;for(let e=0;e<fi.length;e++)fi[e](),Qo=e;fi.length=0,Qo=-1,Jo=!1}var Pi,Hi,fr,Ya,Zo=!0;function Td(e){Zo=!1,e(),Zo=!0}function Ad(e){Pi=e.reactive,fr=e.release,Hi=t=>e.effect(t,{scheduler:i=>{Zo?_d(i):i()}}),Ya=e.raw}function aa(e){Hi=e}function Od(e){let t=()=>{};return[r=>{let s=Hi(r);return e._x_effects||(e._x_effects=new Set,e._x_runEffects=()=>{e._x_effects.forEach(a=>a())}),e._x_effects.add(s),t=()=>{s!==void 0&&(e._x_effects.delete(s),fr(s))},s},()=>{t()}]}var Xa=[],Ka=[],Ga=[];function Nd(e){Ga.push(e)}function Ja(e,t){typeof t=="function"?(e._x_cleanups||(e._x_cleanups=[]),e._x_cleanups.push(t)):(t=e,Ka.push(t))}function kd(e){Xa.push(e)}function Ld(e,t,i){e._x_attributeCleanups||(e._x_attributeCleanups={}),e._x_attributeCleanups[t]||(e._x_attributeCleanups[t]=[]),e._x_attributeCleanups[t].push(i)}function Qa(e,t){e._x_attributeCleanups&&Object.entries(e._x_attributeCleanups).forEach(([i,r])=>{(t===void 0||t.includes(i))&&(r.forEach(s=>s()),delete e._x_attributeCleanups[i])})}var xs=new MutationObserver(Ss),_s=!1;function Es(){xs.observe(document,{subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0}),_s=!0}function Za(){Dd(),xs.disconnect(),_s=!1}var nr=[],Io=!1;function Dd(){nr=nr.concat(xs.takeRecords()),nr.length&&!Io&&(Io=!0,queueMicrotask(()=>{Md(),Io=!1}))}function Md(){Ss(nr),nr.length=0}function mt(e){if(!_s)return e();Za();let t=e();return Es(),t}var Cs=!1,Vr=[];function Pd(){Cs=!0}function Hd(){Cs=!1,Ss(Vr),Vr=[]}function Ss(e){if(Cs){Vr=Vr.concat(e);return}let t=[],i=[],r=new Map,s=new Map;for(let a=0;a<e.length;a++)if(!e[a].target._x_ignoreMutationObserver&&(e[a].type==="childList"&&(e[a].addedNodes.forEach(u=>u.nodeType===1&&t.push(u)),e[a].removedNodes.forEach(u=>u.nodeType===1&&i.push(u))),e[a].type==="attributes")){let u=e[a].target,h=e[a].attributeName,b=e[a].oldValue,w=()=>{r.has(u)||r.set(u,[]),r.get(u).push({name:h,value:u.getAttribute(h)})},S=()=>{s.has(u)||s.set(u,[]),s.get(u).push(h)};u.hasAttribute(h)&&b===null?w():u.hasAttribute(h)?(S(),w()):S()}s.forEach((a,u)=>{Qa(u,a)}),r.forEach((a,u)=>{Xa.forEach(h=>h(u,a))});for(let a of i)if(!t.includes(a)&&(Ka.forEach(u=>u(a)),a._x_cleanups))for(;a._x_cleanups.length;)a._x_cleanups.pop()();t.forEach(a=>{a._x_ignoreSelf=!0,a._x_ignore=!0});for(let a of t)i.includes(a)||a.isConnected&&(delete a._x_ignoreSelf,delete a._x_ignore,Ga.forEach(u=>u(a)),a._x_ignore=!0,a._x_ignoreSelf=!0);t.forEach(a=>{delete a._x_ignoreSelf,delete a._x_ignore}),t=null,i=null,r=null,s=null}function el(e){return pr(ki(e))}function hr(e,t,i){return e._x_dataStack=[t,...ki(i||e)],()=>{e._x_dataStack=e._x_dataStack.filter(r=>r!==t)}}function ki(e){return e._x_dataStack?e._x_dataStack:typeof ShadowRoot=="function"&&e instanceof ShadowRoot?ki(e.host):e.parentNode?ki(e.parentNode):[]}function pr(e){let t=new Proxy({},{ownKeys:()=>Array.from(new Set(e.flatMap(i=>Object.keys(i)))),has:(i,r)=>e.some(s=>s.hasOwnProperty(r)),get:(i,r)=>(e.find(s=>{if(s.hasOwnProperty(r)){let a=Object.getOwnPropertyDescriptor(s,r);if(a.get&&a.get._x_alreadyBound||a.set&&a.set._x_alreadyBound)return!0;if((a.get||a.set)&&a.enumerable){let u=a.get,h=a.set,b=a;u=u&&u.bind(t),h=h&&h.bind(t),u&&(u._x_alreadyBound=!0),h&&(h._x_alreadyBound=!0),Object.defineProperty(s,r,{...b,get:u,set:h})}return!0}return!1})||{})[r],set:(i,r,s)=>{let a=e.find(u=>u.hasOwnProperty(r));return a?a[r]=s:e[e.length-1][r]=s,!0}});return t}function tl(e){let t=r=>typeof r=="object"&&!Array.isArray(r)&&r!==null,i=(r,s="")=>{Object.entries(Object.getOwnPropertyDescriptors(r)).forEach(([a,{value:u,enumerable:h}])=>{if(h===!1||u===void 0)return;let b=s===""?a:`${s}.${a}`;typeof u=="object"&&u!==null&&u._x_interceptor?r[a]=u.initialize(e,b,a):t(u)&&u!==r&&!(u instanceof Element)&&i(u,b)})};return i(e)}function nl(e,t=()=>{}){let i={initialValue:void 0,_x_interceptor:!0,initialize(r,s,a){return e(this.initialValue,()=>Id(r,s),u=>es(r,s,u),s,a)}};return t(i),r=>{if(typeof r=="object"&&r!==null&&r._x_interceptor){let s=i.initialize.bind(i);i.initialize=(a,u,h)=>{let b=r.initialize(a,u,h);return i.initialValue=b,s(a,u,h)}}else i.initialValue=r;return i}}function Id(e,t){return t.split(".").reduce((i,r)=>i[r],e)}function es(e,t,i){if(typeof t=="string"&&(t=t.split(".")),t.length===1)e[t[0]]=i;else{if(t.length===0)throw error;return e[t[0]]||(e[t[0]]={}),es(e[t[0]],t.slice(1),i)}}var il={};function Qt(e,t){il[e]=t}function ts(e,t){return Object.entries(il).forEach(([i,r])=>{let s=null;function a(){if(s)return s;{let[u,h]=ul(t);return s={interceptor:nl,...u},Ja(t,h),s}}Object.defineProperty(e,`$${i}`,{get(){return r(t,a())},enumerable:!1})}),e}function Rd(e,t,i,...r){try{return i(...r)}catch(s){sr(s,e,t)}}function sr(e,t,i=void 0){Object.assign(e,{el:t,expression:i}),console.warn(`Alpine Expression Error: ${e.message}

${i?'Expression: "'+i+`"

`:""}`,t),setTimeout(()=>{throw e},0)}var $r=!0;function rl(e){let t=$r;$r=!1;let i=e();return $r=t,i}function hi(e,t,i={}){let r;return Ot(e,t)(s=>r=s,i),r}function Ot(...e){return ol(...e)}var ol=sl;function jd(e){ol=e}function sl(e,t){let i={};ts(i,e);let r=[i,...ki(e)],s=typeof t=="function"?Fd(r,t):zd(r,t,e);return Rd.bind(null,e,t,s)}function Fd(e,t){return(i=()=>{},{scope:r={},params:s=[]}={})=>{let a=t.apply(pr([r,...e]),s);Yr(i,a)}}var Ro={};function Bd(e,t){if(Ro[e])return Ro[e];let i=Object.getPrototypeOf(async function(){}).constructor,r=/^[\n\s]*if.*\(.*\)/.test(e)||/^(let|const)\s/.test(e)?`(async()=>{ ${e} })()`:e,a=(()=>{try{return new i(["__self","scope"],`with (scope) { __self.result = ${r} }; __self.finished = true; return __self.result;`)}catch(u){return sr(u,t,e),Promise.resolve()}})();return Ro[e]=a,a}function zd(e,t,i){let r=Bd(t,i);return(s=()=>{},{scope:a={},params:u=[]}={})=>{r.result=void 0,r.finished=!1;let h=pr([a,...e]);if(typeof r=="function"){let b=r(r,h).catch(w=>sr(w,i,t));r.finished?(Yr(s,r.result,h,u,i),r.result=void 0):b.then(w=>{Yr(s,w,h,u,i)}).catch(w=>sr(w,i,t)).finally(()=>r.result=void 0)}}}function Yr(e,t,i,r,s){if($r&&typeof t=="function"){let a=t.apply(i,r);a instanceof Promise?a.then(u=>Yr(e,u,i,r)).catch(u=>sr(u,s,t)):e(a)}else typeof t=="object"&&t instanceof Promise?t.then(a=>e(a)):e(t)}var Ts="x-";function Ii(e=""){return Ts+e}function qd(e){Ts=e}var ns={};function at(e,t){return ns[e]=t,{before(i){if(!ns[i]){console.warn("Cannot find directive `${directive}`. `${name}` will use the default order of execution");return}const r=ci.indexOf(i);ci.splice(r>=0?r:ci.indexOf("DEFAULT"),0,e)}}}function As(e,t,i){if(t=Array.from(t),e._x_virtualDirectives){let a=Object.entries(e._x_virtualDirectives).map(([h,b])=>({name:h,value:b})),u=al(a);a=a.map(h=>u.find(b=>b.name===h.name)?{name:`x-bind:${h.name}`,value:`"${h.value}"`}:h),t=t.concat(a)}let r={};return t.map(fl((a,u)=>r[a]=u)).filter(pl).map(Ud(r,i)).sort(Vd).map(a=>Wd(e,a))}function al(e){return Array.from(e).map(fl()).filter(t=>!pl(t))}var is=!1,tr=new Map,ll=Symbol();function $d(e){is=!0;let t=Symbol();ll=t,tr.set(t,[]);let i=()=>{for(;tr.get(t).length;)tr.get(t).shift()();tr.delete(t)},r=()=>{is=!1,i()};e(i),r()}function ul(e){let t=[],i=h=>t.push(h),[r,s]=Od(e);return t.push(s),[{Alpine:gr,effect:r,cleanup:i,evaluateLater:Ot.bind(Ot,e),evaluate:hi.bind(hi,e)},()=>t.forEach(h=>h())]}function Wd(e,t){let i=()=>{},r=ns[t.type]||i,[s,a]=ul(e);Ld(e,t.original,a);let u=()=>{e._x_ignore||e._x_ignoreSelf||(r.inline&&r.inline(e,t,s),r=r.bind(r,e,t,s),is?tr.get(ll).push(r):r())};return u.runCleanups=a,u}var cl=(e,t)=>({name:i,value:r})=>(i.startsWith(e)&&(i=i.replace(e,t)),{name:i,value:r}),dl=e=>e;function fl(e=()=>{}){return({name:t,value:i})=>{let{name:r,value:s}=hl.reduce((a,u)=>u(a),{name:t,value:i});return r!==t&&e(r,t),{name:r,value:s}}}var hl=[];function Os(e){hl.push(e)}function pl({name:e}){return ml().test(e)}var ml=()=>new RegExp(`^${Ts}([^:^.]+)\\b`);function Ud(e,t){return({name:i,value:r})=>{let s=i.match(ml()),a=i.match(/:([a-zA-Z0-9\-:]+)/),u=i.match(/\.[^.\]]+(?=[^\]]*$)/g)||[],h=t||e[i]||i;return{type:s?s[1]:null,value:a?a[1]:null,modifiers:u.map(b=>b.replace(".","")),expression:r,original:h}}}var rs="DEFAULT",ci=["ignore","ref","data","id","bind","init","for","model","modelable","transition","show","if",rs,"teleport"];function Vd(e,t){let i=ci.indexOf(e.type)===-1?rs:e.type,r=ci.indexOf(t.type)===-1?rs:t.type;return ci.indexOf(i)-ci.indexOf(r)}function ir(e,t,i={}){e.dispatchEvent(new CustomEvent(t,{detail:i,bubbles:!0,composed:!0,cancelable:!0}))}function qn(e,t){if(typeof ShadowRoot=="function"&&e instanceof ShadowRoot){Array.from(e.children).forEach(s=>qn(s,t));return}let i=!1;if(t(e,()=>i=!0),i)return;let r=e.firstElementChild;for(;r;)qn(r,t),r=r.nextElementSibling}function $n(e,...t){console.warn(`Alpine Warning: ${e}`,...t)}var la=!1;function Yd(){la&&$n("Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems."),la=!0,document.body||$n("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?"),ir(document,"alpine:init"),ir(document,"alpine:initializing"),Es(),Nd(t=>Wn(t,qn)),Ja(t=>_l(t)),kd((t,i)=>{As(t,i).forEach(r=>r())});let e=t=>!oo(t.parentElement,!0);Array.from(document.querySelectorAll(yl())).filter(e).forEach(t=>{Wn(t)}),ir(document,"alpine:initialized")}var Ns=[],gl=[];function vl(){return Ns.map(e=>e())}function yl(){return Ns.concat(gl).map(e=>e())}function bl(e){Ns.push(e)}function wl(e){gl.push(e)}function oo(e,t=!1){return so(e,i=>{if((t?yl():vl()).some(s=>i.matches(s)))return!0})}function so(e,t){if(e){if(t(e))return e;if(e._x_teleportBack&&(e=e._x_teleportBack),!!e.parentElement)return so(e.parentElement,t)}}function Xd(e){return vl().some(t=>e.matches(t))}var xl=[];function Kd(e){xl.push(e)}function Wn(e,t=qn,i=()=>{}){$d(()=>{t(e,(r,s)=>{i(r,s),xl.forEach(a=>a(r,s)),As(r,r.attributes).forEach(a=>a()),r._x_ignore&&s()})})}function _l(e){qn(e,t=>Qa(t))}var os=[],ks=!1;function Ls(e=()=>{}){return queueMicrotask(()=>{ks||setTimeout(()=>{ss()})}),new Promise(t=>{os.push(()=>{e(),t()})})}function ss(){for(ks=!1;os.length;)os.shift()()}function Gd(){ks=!0}function Ds(e,t){return Array.isArray(t)?ua(e,t.join(" ")):typeof t=="object"&&t!==null?Jd(e,t):typeof t=="function"?Ds(e,t()):ua(e,t)}function ua(e,t){let i=s=>s.split(" ").filter(a=>!e.classList.contains(a)).filter(Boolean),r=s=>(e.classList.add(...s),()=>{e.classList.remove(...s)});return t=t===!0?t="":t||"",r(i(t))}function Jd(e,t){let i=h=>h.split(" ").filter(Boolean),r=Object.entries(t).flatMap(([h,b])=>b?i(h):!1).filter(Boolean),s=Object.entries(t).flatMap(([h,b])=>b?!1:i(h)).filter(Boolean),a=[],u=[];return s.forEach(h=>{e.classList.contains(h)&&(e.classList.remove(h),u.push(h))}),r.forEach(h=>{e.classList.contains(h)||(e.classList.add(h),a.push(h))}),()=>{u.forEach(h=>e.classList.add(h)),a.forEach(h=>e.classList.remove(h))}}function ao(e,t){return typeof t=="object"&&t!==null?Qd(e,t):Zd(e,t)}function Qd(e,t){let i={};return Object.entries(t).forEach(([r,s])=>{i[r]=e.style[r],r.startsWith("--")||(r=ef(r)),e.style.setProperty(r,s)}),setTimeout(()=>{e.style.length===0&&e.removeAttribute("style")}),()=>{ao(e,i)}}function Zd(e,t){let i=e.getAttribute("style",t);return e.setAttribute("style",t),()=>{e.setAttribute("style",i||"")}}function ef(e){return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function as(e,t=()=>{}){let i=!1;return function(){i?t.apply(this,arguments):(i=!0,e.apply(this,arguments))}}at("transition",(e,{value:t,modifiers:i,expression:r},{evaluate:s})=>{typeof r=="function"&&(r=s(r)),r!==!1&&(!r||typeof r=="boolean"?nf(e,i,t):tf(e,r,t))});function tf(e,t,i){El(e,Ds,""),{enter:s=>{e._x_transition.enter.during=s},"enter-start":s=>{e._x_transition.enter.start=s},"enter-end":s=>{e._x_transition.enter.end=s},leave:s=>{e._x_transition.leave.during=s},"leave-start":s=>{e._x_transition.leave.start=s},"leave-end":s=>{e._x_transition.leave.end=s}}[i](t)}function nf(e,t,i){El(e,ao);let r=!t.includes("in")&&!t.includes("out")&&!i,s=r||t.includes("in")||["enter"].includes(i),a=r||t.includes("out")||["leave"].includes(i);t.includes("in")&&!r&&(t=t.filter((H,he)=>he<t.indexOf("out"))),t.includes("out")&&!r&&(t=t.filter((H,he)=>he>t.indexOf("out")));let u=!t.includes("opacity")&&!t.includes("scale"),h=u||t.includes("opacity"),b=u||t.includes("scale"),w=h?0:1,S=b?Ji(t,"scale",95)/100:1,D=Ji(t,"delay",0)/1e3,P=Ji(t,"origin","center"),O="opacity, transform",T=Ji(t,"duration",150)/1e3,I=Ji(t,"duration",75)/1e3,j="cubic-bezier(0.4, 0.0, 0.2, 1)";s&&(e._x_transition.enter.during={transformOrigin:P,transitionDelay:`${D}s`,transitionProperty:O,transitionDuration:`${T}s`,transitionTimingFunction:j},e._x_transition.enter.start={opacity:w,transform:`scale(${S})`},e._x_transition.enter.end={opacity:1,transform:"scale(1)"}),a&&(e._x_transition.leave.during={transformOrigin:P,transitionDelay:`${D}s`,transitionProperty:O,transitionDuration:`${I}s`,transitionTimingFunction:j},e._x_transition.leave.start={opacity:1,transform:"scale(1)"},e._x_transition.leave.end={opacity:w,transform:`scale(${S})`})}function El(e,t,i={}){e._x_transition||(e._x_transition={enter:{during:i,start:i,end:i},leave:{during:i,start:i,end:i},in(r=()=>{},s=()=>{}){ls(e,t,{during:this.enter.during,start:this.enter.start,end:this.enter.end},r,s)},out(r=()=>{},s=()=>{}){ls(e,t,{during:this.leave.during,start:this.leave.start,end:this.leave.end},r,s)}})}window.Element.prototype._x_toggleAndCascadeWithTransitions=function(e,t,i,r){const s=document.visibilityState==="visible"?requestAnimationFrame:setTimeout;let a=()=>s(i);if(t){e._x_transition&&(e._x_transition.enter||e._x_transition.leave)?e._x_transition.enter&&(Object.entries(e._x_transition.enter.during).length||Object.entries(e._x_transition.enter.start).length||Object.entries(e._x_transition.enter.end).length)?e._x_transition.in(i):a():e._x_transition?e._x_transition.in(i):a();return}e._x_hidePromise=e._x_transition?new Promise((u,h)=>{e._x_transition.out(()=>{},()=>u(r)),e._x_transitioning.beforeCancel(()=>h({isFromCancelledTransition:!0}))}):Promise.resolve(r),queueMicrotask(()=>{let u=Cl(e);u?(u._x_hideChildren||(u._x_hideChildren=[]),u._x_hideChildren.push(e)):s(()=>{let h=b=>{let w=Promise.all([b._x_hidePromise,...(b._x_hideChildren||[]).map(h)]).then(([S])=>S());return delete b._x_hidePromise,delete b._x_hideChildren,w};h(e).catch(b=>{if(!b.isFromCancelledTransition)throw b})})})};function Cl(e){let t=e.parentNode;if(t)return t._x_hidePromise?t:Cl(t)}function ls(e,t,{during:i,start:r,end:s}={},a=()=>{},u=()=>{}){if(e._x_transitioning&&e._x_transitioning.cancel(),Object.keys(i).length===0&&Object.keys(r).length===0&&Object.keys(s).length===0){a(),u();return}let h,b,w;rf(e,{start(){h=t(e,r)},during(){b=t(e,i)},before:a,end(){h(),w=t(e,s)},after:u,cleanup(){b(),w()}})}function rf(e,t){let i,r,s,a=as(()=>{mt(()=>{i=!0,r||t.before(),s||(t.end(),ss()),t.after(),e.isConnected&&t.cleanup(),delete e._x_transitioning})});e._x_transitioning={beforeCancels:[],beforeCancel(u){this.beforeCancels.push(u)},cancel:as(function(){for(;this.beforeCancels.length;)this.beforeCancels.shift()();a()}),finish:a},mt(()=>{t.start(),t.during()}),Gd(),requestAnimationFrame(()=>{if(i)return;let u=Number(getComputedStyle(e).transitionDuration.replace(/,.*/,"").replace("s",""))*1e3,h=Number(getComputedStyle(e).transitionDelay.replace(/,.*/,"").replace("s",""))*1e3;u===0&&(u=Number(getComputedStyle(e).animationDuration.replace("s",""))*1e3),mt(()=>{t.before()}),r=!0,requestAnimationFrame(()=>{i||(mt(()=>{t.end()}),ss(),setTimeout(e._x_transitioning.finish,u+h),s=!0)})})}function Ji(e,t,i){if(e.indexOf(t)===-1)return i;const r=e[e.indexOf(t)+1];if(!r||t==="scale"&&isNaN(r))return i;if(t==="duration"||t==="delay"){let s=r.match(/([0-9]+)ms/);if(s)return s[1]}return t==="origin"&&["top","right","left","center","bottom"].includes(e[e.indexOf(t)+2])?[r,e[e.indexOf(t)+2]].join(" "):r}var ar=!1;function mr(e,t=()=>{}){return(...i)=>ar?t(...i):e(...i)}function of(e){return(...t)=>ar&&e(...t)}function sf(e,t){t._x_dataStack||(t._x_dataStack=e._x_dataStack),ar=!0,lf(()=>{af(t)}),ar=!1}function af(e){let t=!1;Wn(e,(r,s)=>{qn(r,(a,u)=>{if(t&&Xd(a))return u();t=!0,s(a,u)})})}function lf(e){let t=Hi;aa((i,r)=>{let s=t(i);return fr(s),()=>{}}),e(),aa(t)}function Sl(e,t,i,r=[]){switch(e._x_bindings||(e._x_bindings=Pi({})),e._x_bindings[t]=i,t=r.includes("camel")?gf(t):t,t){case"value":uf(e,i);break;case"style":df(e,i);break;case"class":cf(e,i);break;case"selected":case"checked":ff(e,t,i);break;default:Tl(e,t,i);break}}function uf(e,t){if(e.type==="radio")e.attributes.value===void 0&&(e.value=t),window.fromModel&&(e.checked=ca(e.value,t));else if(e.type==="checkbox")Number.isInteger(t)?e.value=t:!Number.isInteger(t)&&!Array.isArray(t)&&typeof t!="boolean"&&![null,void 0].includes(t)?e.value=String(t):Array.isArray(t)?e.checked=t.some(i=>ca(i,e.value)):e.checked=!!t;else if(e.tagName==="SELECT")mf(e,t);else{if(e.value===t)return;e.value=t}}function cf(e,t){e._x_undoAddedClasses&&e._x_undoAddedClasses(),e._x_undoAddedClasses=Ds(e,t)}function df(e,t){e._x_undoAddedStyles&&e._x_undoAddedStyles(),e._x_undoAddedStyles=ao(e,t)}function ff(e,t,i){Tl(e,t,i),pf(e,t,i)}function Tl(e,t,i){[null,void 0,!1].includes(i)&&vf(t)?e.removeAttribute(t):(Al(t)&&(i=t),hf(e,t,i))}function hf(e,t,i){e.getAttribute(t)!=i&&e.setAttribute(t,i)}function pf(e,t,i){e[t]!==i&&(e[t]=i)}function mf(e,t){const i=[].concat(t).map(r=>r+"");Array.from(e.options).forEach(r=>{r.selected=i.includes(r.value)})}function gf(e){return e.toLowerCase().replace(/-(\w)/g,(t,i)=>i.toUpperCase())}function ca(e,t){return e==t}function Al(e){return["disabled","checked","required","readonly","hidden","open","selected","autofocus","itemscope","multiple","novalidate","allowfullscreen","allowpaymentrequest","formnovalidate","autoplay","controls","loop","muted","playsinline","default","ismap","reversed","async","defer","nomodule"].includes(e)}function vf(e){return!["aria-pressed","aria-checked","aria-expanded","aria-selected"].includes(e)}function yf(e,t,i){return e._x_bindings&&e._x_bindings[t]!==void 0?e._x_bindings[t]:Ol(e,t,i)}function bf(e,t,i,r=!0){if(e._x_bindings&&e._x_bindings[t]!==void 0)return e._x_bindings[t];if(e._x_inlineBindings&&e._x_inlineBindings[t]!==void 0){let s=e._x_inlineBindings[t];return s.extract=r,rl(()=>hi(e,s.expression))}return Ol(e,t,i)}function Ol(e,t,i){let r=e.getAttribute(t);return r===null?typeof i=="function"?i():i:r===""?!0:Al(t)?!![t,"true"].includes(r):r}function Nl(e,t){var i;return function(){var r=this,s=arguments,a=function(){i=null,e.apply(r,s)};clearTimeout(i),i=setTimeout(a,t)}}function kl(e,t){let i;return function(){let r=this,s=arguments;i||(e.apply(r,s),i=!0,setTimeout(()=>i=!1,t))}}function wf(e){(Array.isArray(e)?e:[e]).forEach(i=>i(gr))}var li={},da=!1;function xf(e,t){if(da||(li=Pi(li),da=!0),t===void 0)return li[e];li[e]=t,typeof t=="object"&&t!==null&&t.hasOwnProperty("init")&&typeof t.init=="function"&&li[e].init(),tl(li[e])}function _f(){return li}var Ll={};function Ef(e,t){let i=typeof t!="function"?()=>t:t;e instanceof Element?Dl(e,i()):Ll[e]=i}function Cf(e){return Object.entries(Ll).forEach(([t,i])=>{Object.defineProperty(e,t,{get(){return(...r)=>i(...r)}})}),e}function Dl(e,t,i){let r=[];for(;r.length;)r.pop()();let s=Object.entries(t).map(([u,h])=>({name:u,value:h})),a=al(s);s=s.map(u=>a.find(h=>h.name===u.name)?{name:`x-bind:${u.name}`,value:`"${u.value}"`}:u),As(e,s,i).map(u=>{r.push(u.runCleanups),u()})}var Ml={};function Sf(e,t){Ml[e]=t}function Tf(e,t){return Object.entries(Ml).forEach(([i,r])=>{Object.defineProperty(e,i,{get(){return(...s)=>r.bind(t)(...s)},enumerable:!1})}),e}var Af={get reactive(){return Pi},get release(){return fr},get effect(){return Hi},get raw(){return Ya},version:"3.12.3",flushAndStopDeferringMutations:Hd,dontAutoEvaluateFunctions:rl,disableEffectScheduling:Td,startObservingMutations:Es,stopObservingMutations:Za,setReactivityEngine:Ad,closestDataStack:ki,skipDuringClone:mr,onlyDuringClone:of,addRootSelector:bl,addInitSelector:wl,addScopeToNode:hr,deferMutations:Pd,mapAttributes:Os,evaluateLater:Ot,interceptInit:Kd,setEvaluator:jd,mergeProxies:pr,extractProp:bf,findClosest:so,closestRoot:oo,destroyTree:_l,interceptor:nl,transition:ls,setStyles:ao,mutateDom:mt,directive:at,throttle:kl,debounce:Nl,evaluate:hi,initTree:Wn,nextTick:Ls,prefixed:Ii,prefix:qd,plugin:wf,magic:Qt,store:xf,start:Yd,clone:sf,bound:yf,$data:el,walk:qn,data:Sf,bind:Ef},gr=Af;function Of(e,t){const i=Object.create(null),r=e.split(",");for(let s=0;s<r.length;s++)i[r[s]]=!0;return t?s=>!!i[s.toLowerCase()]:s=>!!i[s]}var Nf=Object.freeze({}),Pl=Object.assign,kf=Object.prototype.hasOwnProperty,lo=(e,t)=>kf.call(e,t),pi=Array.isArray,rr=e=>Hl(e)==="[object Map]",Lf=e=>typeof e=="string",Ms=e=>typeof e=="symbol",uo=e=>e!==null&&typeof e=="object",Df=Object.prototype.toString,Hl=e=>Df.call(e),Il=e=>Hl(e).slice(8,-1),Ps=e=>Lf(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Mf=e=>{const t=Object.create(null);return i=>t[i]||(t[i]=e(i))},Pf=Mf(e=>e.charAt(0).toUpperCase()+e.slice(1)),Rl=(e,t)=>e!==t&&(e===e||t===t),us=new WeakMap,Qi=[],fn,mi=Symbol("iterate"),cs=Symbol("Map key iterate");function Hf(e){return e&&e._isEffect===!0}function If(e,t=Nf){Hf(e)&&(e=e.raw);const i=Ff(e,t);return t.lazy||i(),i}function Rf(e){e.active&&(jl(e),e.options.onStop&&e.options.onStop(),e.active=!1)}var jf=0;function Ff(e,t){const i=function(){if(!i.active)return e();if(!Qi.includes(i)){jl(i);try{return zf(),Qi.push(i),fn=i,e()}finally{Qi.pop(),Fl(),fn=Qi[Qi.length-1]}}};return i.id=jf++,i.allowRecurse=!!t.allowRecurse,i._isEffect=!0,i.active=!0,i.raw=e,i.deps=[],i.options=t,i}function jl(e){const{deps:t}=e;if(t.length){for(let i=0;i<t.length;i++)t[i].delete(e);t.length=0}}var Li=!0,Hs=[];function Bf(){Hs.push(Li),Li=!1}function zf(){Hs.push(Li),Li=!0}function Fl(){const e=Hs.pop();Li=e===void 0?!0:e}function Jt(e,t,i){if(!Li||fn===void 0)return;let r=us.get(e);r||us.set(e,r=new Map);let s=r.get(i);s||r.set(i,s=new Set),s.has(fn)||(s.add(fn),fn.deps.push(s),fn.options.onTrack&&fn.options.onTrack({effect:fn,target:e,type:t,key:i}))}function Un(e,t,i,r,s,a){const u=us.get(e);if(!u)return;const h=new Set,b=S=>{S&&S.forEach(D=>{(D!==fn||D.allowRecurse)&&h.add(D)})};if(t==="clear")u.forEach(b);else if(i==="length"&&pi(e))u.forEach((S,D)=>{(D==="length"||D>=r)&&b(S)});else switch(i!==void 0&&b(u.get(i)),t){case"add":pi(e)?Ps(i)&&b(u.get("length")):(b(u.get(mi)),rr(e)&&b(u.get(cs)));break;case"delete":pi(e)||(b(u.get(mi)),rr(e)&&b(u.get(cs)));break;case"set":rr(e)&&b(u.get(mi));break}const w=S=>{S.options.onTrigger&&S.options.onTrigger({effect:S,target:e,key:i,type:t,newValue:r,oldValue:s,oldTarget:a}),S.options.scheduler?S.options.scheduler(S):S()};h.forEach(w)}var qf=Of("__proto__,__v_isRef,__isVue"),Bl=new Set(Object.getOwnPropertyNames(Symbol).map(e=>Symbol[e]).filter(Ms)),$f=co(),Wf=co(!1,!0),Uf=co(!0),Vf=co(!0,!0),Xr={};["includes","indexOf","lastIndexOf"].forEach(e=>{const t=Array.prototype[e];Xr[e]=function(...i){const r=Ke(this);for(let a=0,u=this.length;a<u;a++)Jt(r,"get",a+"");const s=t.apply(r,i);return s===-1||s===!1?t.apply(r,i.map(Ke)):s}});["push","pop","shift","unshift","splice"].forEach(e=>{const t=Array.prototype[e];Xr[e]=function(...i){Bf();const r=t.apply(this,i);return Fl(),r}});function co(e=!1,t=!1){return function(r,s,a){if(s==="__v_isReactive")return!e;if(s==="__v_isReadonly")return e;if(s==="__v_raw"&&a===(e?t?nh:tu:t?th:eu).get(r))return r;const u=pi(r);if(!e&&u&&lo(Xr,s))return Reflect.get(Xr,s,a);const h=Reflect.get(r,s,a);return(Ms(s)?Bl.has(s):qf(s))||(e||Jt(r,"get",s),t)?h:ds(h)?!u||!Ps(s)?h.value:h:uo(h)?e?nu(h):Fs(h):h}}var Yf=zl(),Xf=zl(!0);function zl(e=!1){return function(i,r,s,a){let u=i[r];if(!e&&(s=Ke(s),u=Ke(u),!pi(i)&&ds(u)&&!ds(s)))return u.value=s,!0;const h=pi(i)&&Ps(r)?Number(r)<i.length:lo(i,r),b=Reflect.set(i,r,s,a);return i===Ke(a)&&(h?Rl(s,u)&&Un(i,"set",r,s,u):Un(i,"add",r,s)),b}}function Kf(e,t){const i=lo(e,t),r=e[t],s=Reflect.deleteProperty(e,t);return s&&i&&Un(e,"delete",t,void 0,r),s}function Gf(e,t){const i=Reflect.has(e,t);return(!Ms(t)||!Bl.has(t))&&Jt(e,"has",t),i}function Jf(e){return Jt(e,"iterate",pi(e)?"length":mi),Reflect.ownKeys(e)}var ql={get:$f,set:Yf,deleteProperty:Kf,has:Gf,ownKeys:Jf},$l={get:Uf,set(e,t){return console.warn(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0},deleteProperty(e,t){return console.warn(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0}};Pl({},ql,{get:Wf,set:Xf});Pl({},$l,{get:Vf});var Is=e=>uo(e)?Fs(e):e,Rs=e=>uo(e)?nu(e):e,js=e=>e,fo=e=>Reflect.getPrototypeOf(e);function ho(e,t,i=!1,r=!1){e=e.__v_raw;const s=Ke(e),a=Ke(t);t!==a&&!i&&Jt(s,"get",t),!i&&Jt(s,"get",a);const{has:u}=fo(s),h=r?js:i?Rs:Is;if(u.call(s,t))return h(e.get(t));if(u.call(s,a))return h(e.get(a));e!==s&&e.get(t)}function po(e,t=!1){const i=this.__v_raw,r=Ke(i),s=Ke(e);return e!==s&&!t&&Jt(r,"has",e),!t&&Jt(r,"has",s),e===s?i.has(e):i.has(e)||i.has(s)}function mo(e,t=!1){return e=e.__v_raw,!t&&Jt(Ke(e),"iterate",mi),Reflect.get(e,"size",e)}function Wl(e){e=Ke(e);const t=Ke(this);return fo(t).has.call(t,e)||(t.add(e),Un(t,"add",e,e)),this}function Ul(e,t){t=Ke(t);const i=Ke(this),{has:r,get:s}=fo(i);let a=r.call(i,e);a?Zl(i,r,e):(e=Ke(e),a=r.call(i,e));const u=s.call(i,e);return i.set(e,t),a?Rl(t,u)&&Un(i,"set",e,t,u):Un(i,"add",e,t),this}function Vl(e){const t=Ke(this),{has:i,get:r}=fo(t);let s=i.call(t,e);s?Zl(t,i,e):(e=Ke(e),s=i.call(t,e));const a=r?r.call(t,e):void 0,u=t.delete(e);return s&&Un(t,"delete",e,void 0,a),u}function Yl(){const e=Ke(this),t=e.size!==0,i=rr(e)?new Map(e):new Set(e),r=e.clear();return t&&Un(e,"clear",void 0,void 0,i),r}function go(e,t){return function(r,s){const a=this,u=a.__v_raw,h=Ke(u),b=t?js:e?Rs:Is;return!e&&Jt(h,"iterate",mi),u.forEach((w,S)=>r.call(s,b(w),b(S),a))}}function Ir(e,t,i){return function(...r){const s=this.__v_raw,a=Ke(s),u=rr(a),h=e==="entries"||e===Symbol.iterator&&u,b=e==="keys"&&u,w=s[e](...r),S=i?js:t?Rs:Is;return!t&&Jt(a,"iterate",b?cs:mi),{next(){const{value:D,done:P}=w.next();return P?{value:D,done:P}:{value:h?[S(D[0]),S(D[1])]:S(D),done:P}},[Symbol.iterator](){return this}}}}function zn(e){return function(...t){{const i=t[0]?`on key "${t[0]}" `:"";console.warn(`${Pf(e)} operation ${i}failed: target is readonly.`,Ke(this))}return e==="delete"?!1:this}}var Xl={get(e){return ho(this,e)},get size(){return mo(this)},has:po,add:Wl,set:Ul,delete:Vl,clear:Yl,forEach:go(!1,!1)},Kl={get(e){return ho(this,e,!1,!0)},get size(){return mo(this)},has:po,add:Wl,set:Ul,delete:Vl,clear:Yl,forEach:go(!1,!0)},Gl={get(e){return ho(this,e,!0)},get size(){return mo(this,!0)},has(e){return po.call(this,e,!0)},add:zn("add"),set:zn("set"),delete:zn("delete"),clear:zn("clear"),forEach:go(!0,!1)},Jl={get(e){return ho(this,e,!0,!0)},get size(){return mo(this,!0)},has(e){return po.call(this,e,!0)},add:zn("add"),set:zn("set"),delete:zn("delete"),clear:zn("clear"),forEach:go(!0,!0)},Qf=["keys","values","entries",Symbol.iterator];Qf.forEach(e=>{Xl[e]=Ir(e,!1,!1),Gl[e]=Ir(e,!0,!1),Kl[e]=Ir(e,!1,!0),Jl[e]=Ir(e,!0,!0)});function Ql(e,t){const i=t?e?Jl:Kl:e?Gl:Xl;return(r,s,a)=>s==="__v_isReactive"?!e:s==="__v_isReadonly"?e:s==="__v_raw"?r:Reflect.get(lo(i,s)&&s in r?i:r,s,a)}var Zf={get:Ql(!1,!1)},eh={get:Ql(!0,!1)};function Zl(e,t,i){const r=Ke(i);if(r!==i&&t.call(e,r)){const s=Il(e);console.warn(`Reactive ${s} contains both the raw and reactive versions of the same object${s==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}var eu=new WeakMap,th=new WeakMap,tu=new WeakMap,nh=new WeakMap;function ih(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function rh(e){return e.__v_skip||!Object.isExtensible(e)?0:ih(Il(e))}function Fs(e){return e&&e.__v_isReadonly?e:iu(e,!1,ql,Zf,eu)}function nu(e){return iu(e,!0,$l,eh,tu)}function iu(e,t,i,r,s){if(!uo(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&!(t&&e.__v_isReactive))return e;const a=s.get(e);if(a)return a;const u=rh(e);if(u===0)return e;const h=new Proxy(e,u===2?r:i);return s.set(e,h),h}function Ke(e){return e&&Ke(e.__v_raw)||e}function ds(e){return!!(e&&e.__v_isRef===!0)}Qt("nextTick",()=>Ls);Qt("dispatch",e=>ir.bind(ir,e));Qt("watch",(e,{evaluateLater:t,effect:i})=>(r,s)=>{let a=t(r),u=!0,h,b=i(()=>a(w=>{JSON.stringify(w),u?h=w:queueMicrotask(()=>{s(w,h),h=w}),u=!1}));e._x_effects.delete(b)});Qt("store",_f);Qt("data",e=>el(e));Qt("root",e=>oo(e));Qt("refs",e=>(e._x_refs_proxy||(e._x_refs_proxy=pr(oh(e))),e._x_refs_proxy));function oh(e){let t=[],i=e;for(;i;)i._x_refs&&t.push(i._x_refs),i=i.parentNode;return t}var jo={};function ru(e){return jo[e]||(jo[e]=0),++jo[e]}function sh(e,t){return so(e,i=>{if(i._x_ids&&i._x_ids[t])return!0})}function ah(e,t){e._x_ids||(e._x_ids={}),e._x_ids[t]||(e._x_ids[t]=ru(t))}Qt("id",e=>(t,i=null)=>{let r=sh(e,t),s=r?r._x_ids[t]:ru(t);return i?`${t}-${s}-${i}`:`${t}-${s}`});Qt("el",e=>e);ou("Focus","focus","focus");ou("Persist","persist","persist");function ou(e,t,i){Qt(t,r=>$n(`You can't use [$${directiveName}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${i}`,r))}function lh({get:e,set:t},{get:i,set:r}){let s=!0,a,u,h=Hi(()=>{let b,w;s?(b=e(),r(b),w=i(),s=!1):(b=e(),w=i(),u=JSON.stringify(b),JSON.stringify(w),u!==a?(w=i(),r(b),w=b):(t(w),b=w)),a=JSON.stringify(b),JSON.stringify(w)});return()=>{fr(h)}}at("modelable",(e,{expression:t},{effect:i,evaluateLater:r,cleanup:s})=>{let a=r(t),u=()=>{let S;return a(D=>S=D),S},h=r(`${t} = __placeholder`),b=S=>h(()=>{},{scope:{__placeholder:S}}),w=u();b(w),queueMicrotask(()=>{if(!e._x_model)return;e._x_removeModelListeners.default();let S=e._x_model.get,D=e._x_model.set,P=lh({get(){return S()},set(O){D(O)}},{get(){return u()},set(O){b(O)}});s(P)})});var uh=document.createElement("div");at("teleport",(e,{modifiers:t,expression:i},{cleanup:r})=>{e.tagName.toLowerCase()!=="template"&&$n("x-teleport can only be used on a <template> tag",e);let s=mr(()=>document.querySelector(i),()=>uh)();s||$n(`Cannot find x-teleport element for selector: "${i}"`);let a=e.content.cloneNode(!0).firstElementChild;e._x_teleport=a,a._x_teleportBack=e,e._x_forwardEvents&&e._x_forwardEvents.forEach(u=>{a.addEventListener(u,h=>{h.stopPropagation(),e.dispatchEvent(new h.constructor(h.type,h))})}),hr(a,{},e),mt(()=>{t.includes("prepend")?s.parentNode.insertBefore(a,s):t.includes("append")?s.parentNode.insertBefore(a,s.nextSibling):s.appendChild(a),Wn(a),a._x_ignore=!0}),r(()=>a.remove())});var su=()=>{};su.inline=(e,{modifiers:t},{cleanup:i})=>{t.includes("self")?e._x_ignoreSelf=!0:e._x_ignore=!0,i(()=>{t.includes("self")?delete e._x_ignoreSelf:delete e._x_ignore})};at("ignore",su);at("effect",(e,{expression:t},{effect:i})=>i(Ot(e,t)));function fs(e,t,i,r){let s=e,a=b=>r(b),u={},h=(b,w)=>S=>w(b,S);if(i.includes("dot")&&(t=ch(t)),i.includes("camel")&&(t=dh(t)),i.includes("passive")&&(u.passive=!0),i.includes("capture")&&(u.capture=!0),i.includes("window")&&(s=window),i.includes("document")&&(s=document),i.includes("debounce")){let b=i[i.indexOf("debounce")+1]||"invalid-wait",w=Kr(b.split("ms")[0])?Number(b.split("ms")[0]):250;a=Nl(a,w)}if(i.includes("throttle")){let b=i[i.indexOf("throttle")+1]||"invalid-wait",w=Kr(b.split("ms")[0])?Number(b.split("ms")[0]):250;a=kl(a,w)}return i.includes("prevent")&&(a=h(a,(b,w)=>{w.preventDefault(),b(w)})),i.includes("stop")&&(a=h(a,(b,w)=>{w.stopPropagation(),b(w)})),i.includes("self")&&(a=h(a,(b,w)=>{w.target===e&&b(w)})),(i.includes("away")||i.includes("outside"))&&(s=document,a=h(a,(b,w)=>{e.contains(w.target)||w.target.isConnected!==!1&&(e.offsetWidth<1&&e.offsetHeight<1||e._x_isShown!==!1&&b(w))})),i.includes("once")&&(a=h(a,(b,w)=>{b(w),s.removeEventListener(t,a,u)})),a=h(a,(b,w)=>{hh(t)&&ph(w,i)||b(w)}),s.addEventListener(t,a,u),()=>{s.removeEventListener(t,a,u)}}function ch(e){return e.replace(/-/g,".")}function dh(e){return e.toLowerCase().replace(/-(\w)/g,(t,i)=>i.toUpperCase())}function Kr(e){return!Array.isArray(e)&&!isNaN(e)}function fh(e){return[" ","_"].includes(e)?e:e.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[_\s]/,"-").toLowerCase()}function hh(e){return["keydown","keyup"].includes(e)}function ph(e,t){let i=t.filter(a=>!["window","document","prevent","stop","once","capture"].includes(a));if(i.includes("debounce")){let a=i.indexOf("debounce");i.splice(a,Kr((i[a+1]||"invalid-wait").split("ms")[0])?2:1)}if(i.includes("throttle")){let a=i.indexOf("throttle");i.splice(a,Kr((i[a+1]||"invalid-wait").split("ms")[0])?2:1)}if(i.length===0||i.length===1&&fa(e.key).includes(i[0]))return!1;const s=["ctrl","shift","alt","meta","cmd","super"].filter(a=>i.includes(a));return i=i.filter(a=>!s.includes(a)),!(s.length>0&&s.filter(u=>((u==="cmd"||u==="super")&&(u="meta"),e[`${u}Key`])).length===s.length&&fa(e.key).includes(i[0]))}function fa(e){if(!e)return[];e=fh(e);let t={ctrl:"control",slash:"/",space:" ",spacebar:" ",cmd:"meta",esc:"escape",up:"arrow-up",down:"arrow-down",left:"arrow-left",right:"arrow-right",period:".",equal:"=",minus:"-",underscore:"_"};return t[e]=e,Object.keys(t).map(i=>{if(t[i]===e)return i}).filter(i=>i)}at("model",(e,{modifiers:t,expression:i},{effect:r,cleanup:s})=>{let a=e;t.includes("parent")&&(a=e.parentNode);let u=Ot(a,i),h;typeof i=="string"?h=Ot(a,`${i} = __placeholder`):typeof i=="function"&&typeof i()=="string"?h=Ot(a,`${i()} = __placeholder`):h=()=>{};let b=()=>{let P;return u(O=>P=O),ha(P)?P.get():P},w=P=>{let O;u(T=>O=T),ha(O)?O.set(P):h(()=>{},{scope:{__placeholder:P}})};typeof i=="string"&&e.type==="radio"&&mt(()=>{e.hasAttribute("name")||e.setAttribute("name",i)});var S=e.tagName.toLowerCase()==="select"||["checkbox","radio"].includes(e.type)||t.includes("lazy")?"change":"input";let D=ar?()=>{}:fs(e,S,t,P=>{w(mh(e,t,P,b()))});if(t.includes("fill")&&[null,""].includes(b())&&e.dispatchEvent(new Event(S,{})),e._x_removeModelListeners||(e._x_removeModelListeners={}),e._x_removeModelListeners.default=D,s(()=>e._x_removeModelListeners.default()),e.form){let P=fs(e.form,"reset",[],O=>{Ls(()=>e._x_model&&e._x_model.set(e.value))});s(()=>P())}e._x_model={get(){return b()},set(P){w(P)}},e._x_forceModelUpdate=P=>{P=P===void 0?b():P,P===void 0&&typeof i=="string"&&i.match(/\./)&&(P=""),window.fromModel=!0,mt(()=>Sl(e,"value",P)),delete window.fromModel},r(()=>{let P=b();t.includes("unintrusive")&&document.activeElement.isSameNode(e)||e._x_forceModelUpdate(P)})});function mh(e,t,i,r){return mt(()=>{if(i instanceof CustomEvent&&i.detail!==void 0)return i.detail??i.target.value;if(e.type==="checkbox")if(Array.isArray(r)){let s=t.includes("number")?Fo(i.target.value):i.target.value;return i.target.checked?r.concat([s]):r.filter(a=>!gh(a,s))}else return i.target.checked;else{if(e.tagName.toLowerCase()==="select"&&e.multiple)return t.includes("number")?Array.from(i.target.selectedOptions).map(s=>{let a=s.value||s.text;return Fo(a)}):Array.from(i.target.selectedOptions).map(s=>s.value||s.text);{let s=i.target.value;return t.includes("number")?Fo(s):t.includes("trim")?s.trim():s}}})}function Fo(e){let t=e?parseFloat(e):null;return vh(t)?t:e}function gh(e,t){return e==t}function vh(e){return!Array.isArray(e)&&!isNaN(e)}function ha(e){return e!==null&&typeof e=="object"&&typeof e.get=="function"&&typeof e.set=="function"}at("cloak",e=>queueMicrotask(()=>mt(()=>e.removeAttribute(Ii("cloak")))));wl(()=>`[${Ii("init")}]`);at("init",mr((e,{expression:t},{evaluate:i})=>typeof t=="string"?!!t.trim()&&i(t,{},!1):i(t,{},!1)));at("text",(e,{expression:t},{effect:i,evaluateLater:r})=>{let s=r(t);i(()=>{s(a=>{mt(()=>{e.textContent=a})})})});at("html",(e,{expression:t},{effect:i,evaluateLater:r})=>{let s=r(t);i(()=>{s(a=>{mt(()=>{e.innerHTML=a,e._x_ignoreSelf=!0,Wn(e),delete e._x_ignoreSelf})})})});Os(cl(":",dl(Ii("bind:"))));var au=(e,{value:t,modifiers:i,expression:r,original:s},{effect:a})=>{if(!t){let h={};Cf(h),Ot(e,r)(w=>{Dl(e,w,s)},{scope:h});return}if(t==="key")return yh(e,r);if(e._x_inlineBindings&&e._x_inlineBindings[t]&&e._x_inlineBindings[t].extract)return;let u=Ot(e,r);a(()=>u(h=>{h===void 0&&typeof r=="string"&&r.match(/\./)&&(h=""),mt(()=>Sl(e,t,h,i))}))};au.inline=(e,{value:t,modifiers:i,expression:r})=>{t&&(e._x_inlineBindings||(e._x_inlineBindings={}),e._x_inlineBindings[t]={expression:r,extract:!1})};at("bind",au);function yh(e,t){e._x_keyExpression=t}bl(()=>`[${Ii("data")}]`);at("data",mr((e,{expression:t},{cleanup:i})=>{t=t===""?"{}":t;let r={};ts(r,e);let s={};Tf(s,r);let a=hi(e,t,{scope:s});(a===void 0||a===!0)&&(a={}),ts(a,e);let u=Pi(a);tl(u);let h=hr(e,u);u.init&&hi(e,u.init),i(()=>{u.destroy&&hi(e,u.destroy),h()})}));at("show",(e,{modifiers:t,expression:i},{effect:r})=>{let s=Ot(e,i);e._x_doHide||(e._x_doHide=()=>{mt(()=>{e.style.setProperty("display","none",t.includes("important")?"important":void 0)})}),e._x_doShow||(e._x_doShow=()=>{mt(()=>{e.style.length===1&&e.style.display==="none"?e.removeAttribute("style"):e.style.removeProperty("display")})});let a=()=>{e._x_doHide(),e._x_isShown=!1},u=()=>{e._x_doShow(),e._x_isShown=!0},h=()=>setTimeout(u),b=as(D=>D?u():a(),D=>{typeof e._x_toggleAndCascadeWithTransitions=="function"?e._x_toggleAndCascadeWithTransitions(e,D,u,a):D?h():a()}),w,S=!0;r(()=>s(D=>{!S&&D===w||(t.includes("immediate")&&(D?h():a()),b(D),w=D,S=!1)}))});at("for",(e,{expression:t},{effect:i,cleanup:r})=>{let s=wh(t),a=Ot(e,s.items),u=Ot(e,e._x_keyExpression||"index");e._x_prevKeys=[],e._x_lookup={},i(()=>bh(e,s,a,u)),r(()=>{Object.values(e._x_lookup).forEach(h=>h.remove()),delete e._x_prevKeys,delete e._x_lookup})});function bh(e,t,i,r){let s=u=>typeof u=="object"&&!Array.isArray(u),a=e;i(u=>{xh(u)&&u>=0&&(u=Array.from(Array(u).keys(),j=>j+1)),u===void 0&&(u=[]);let h=e._x_lookup,b=e._x_prevKeys,w=[],S=[];if(s(u))u=Object.entries(u).map(([j,H])=>{let he=pa(t,H,j,u);r(Ae=>S.push(Ae),{scope:{index:j,...he}}),w.push(he)});else for(let j=0;j<u.length;j++){let H=pa(t,u[j],j,u);r(he=>S.push(he),{scope:{index:j,...H}}),w.push(H)}let D=[],P=[],O=[],T=[];for(let j=0;j<b.length;j++){let H=b[j];S.indexOf(H)===-1&&O.push(H)}b=b.filter(j=>!O.includes(j));let I="template";for(let j=0;j<S.length;j++){let H=S[j],he=b.indexOf(H);if(he===-1)b.splice(j,0,H),D.push([I,j]);else if(he!==j){let Ae=b.splice(j,1)[0],xe=b.splice(he-1,1)[0];b.splice(j,0,xe),b.splice(he,0,Ae),P.push([Ae,xe])}else T.push(H);I=H}for(let j=0;j<O.length;j++){let H=O[j];h[H]._x_effects&&h[H]._x_effects.forEach(Va),h[H].remove(),h[H]=null,delete h[H]}for(let j=0;j<P.length;j++){let[H,he]=P[j],Ae=h[H],xe=h[he],Ee=document.createElement("div");mt(()=>{xe||$n('x-for ":key" is undefined or invalid',a),xe.after(Ee),Ae.after(xe),xe._x_currentIfEl&&xe.after(xe._x_currentIfEl),Ee.before(Ae),Ae._x_currentIfEl&&Ae.after(Ae._x_currentIfEl),Ee.remove()}),xe._x_refreshXForScope(w[S.indexOf(he)])}for(let j=0;j<D.length;j++){let[H,he]=D[j],Ae=H==="template"?a:h[H];Ae._x_currentIfEl&&(Ae=Ae._x_currentIfEl);let xe=w[he],Ee=S[he],V=document.importNode(a.content,!0).firstElementChild,c=Pi(xe);hr(V,c,a),V._x_refreshXForScope=re=>{Object.entries(re).forEach(([ae,Me])=>{c[ae]=Me})},mt(()=>{Ae.after(V),Wn(V)}),typeof Ee=="object"&&$n("x-for key cannot be an object, it must be a string or an integer",a),h[Ee]=V}for(let j=0;j<T.length;j++)h[T[j]]._x_refreshXForScope(w[S.indexOf(T[j])]);a._x_prevKeys=S})}function wh(e){let t=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,i=/^\s*\(|\)\s*$/g,r=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,s=e.match(r);if(!s)return;let a={};a.items=s[2].trim();let u=s[1].replace(i,"").trim(),h=u.match(t);return h?(a.item=u.replace(t,"").trim(),a.index=h[1].trim(),h[2]&&(a.collection=h[2].trim())):a.item=u,a}function pa(e,t,i,r){let s={};return/^\[.*\]$/.test(e.item)&&Array.isArray(t)?e.item.replace("[","").replace("]","").split(",").map(u=>u.trim()).forEach((u,h)=>{s[u]=t[h]}):/^\{.*\}$/.test(e.item)&&!Array.isArray(t)&&typeof t=="object"?e.item.replace("{","").replace("}","").split(",").map(u=>u.trim()).forEach(u=>{s[u]=t[u]}):s[e.item]=t,e.index&&(s[e.index]=i),e.collection&&(s[e.collection]=r),s}function xh(e){return!Array.isArray(e)&&!isNaN(e)}function lu(){}lu.inline=(e,{expression:t},{cleanup:i})=>{let r=oo(e);r._x_refs||(r._x_refs={}),r._x_refs[t]=e,i(()=>delete r._x_refs[t])};at("ref",lu);at("if",(e,{expression:t},{effect:i,cleanup:r})=>{let s=Ot(e,t),a=()=>{if(e._x_currentIfEl)return e._x_currentIfEl;let h=e.content.cloneNode(!0).firstElementChild;return hr(h,{},e),mt(()=>{e.after(h),Wn(h)}),e._x_currentIfEl=h,e._x_undoIf=()=>{qn(h,b=>{b._x_effects&&b._x_effects.forEach(Va)}),h.remove(),delete e._x_currentIfEl},h},u=()=>{e._x_undoIf&&(e._x_undoIf(),delete e._x_undoIf)};i(()=>s(h=>{h?a():u()})),r(()=>e._x_undoIf&&e._x_undoIf())});at("id",(e,{expression:t},{evaluate:i})=>{i(t).forEach(s=>ah(e,s))});Os(cl("@",dl(Ii("on:"))));at("on",mr((e,{value:t,modifiers:i,expression:r},{cleanup:s})=>{let a=r?Ot(e,r):()=>{};e.tagName.toLowerCase()==="template"&&(e._x_forwardEvents||(e._x_forwardEvents=[]),e._x_forwardEvents.includes(t)||e._x_forwardEvents.push(t));let u=fs(e,t,i,h=>{a(()=>{},{scope:{$event:h},params:[h]})});s(()=>u())}));vo("Collapse","collapse","collapse");vo("Intersect","intersect","intersect");vo("Focus","trap","focus");vo("Mask","mask","mask");function vo(e,t,i){at(t,r=>$n(`You can't use [x-${t}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${i}`,r))}gr.setEvaluator(sl);gr.setReactivityEngine({reactive:Fs,effect:If,release:Rf,raw:Ke});var _h=gr,Bs=_h;/*!
* tabbable 5.2.1
* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
*/var uu=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])',"details>summary:first-of-type","details"],ma=uu.join(","),Gr=typeof Element>"u"?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector,cu=function(t,i,r){var s=Array.prototype.slice.apply(t.querySelectorAll(ma));return i&&Gr.call(t,ma)&&s.unshift(t),s=s.filter(r),s},Eh=function(t){return t.contentEditable==="true"},du=function(t){var i=parseInt(t.getAttribute("tabindex"),10);return isNaN(i)?Eh(t)||(t.nodeName==="AUDIO"||t.nodeName==="VIDEO"||t.nodeName==="DETAILS")&&t.getAttribute("tabindex")===null?0:t.tabIndex:i},Ch=function(t,i){return t.tabIndex===i.tabIndex?t.documentOrder-i.documentOrder:t.tabIndex-i.tabIndex},zs=function(t){return t.tagName==="INPUT"},Sh=function(t){return zs(t)&&t.type==="hidden"},Th=function(t){var i=t.tagName==="DETAILS"&&Array.prototype.slice.apply(t.children).some(function(r){return r.tagName==="SUMMARY"});return i},Ah=function(t,i){for(var r=0;r<t.length;r++)if(t[r].checked&&t[r].form===i)return t[r]},Oh=function(t){if(!t.name)return!0;var i=t.form||t.ownerDocument,r=function(h){return i.querySelectorAll('input[type="radio"][name="'+h+'"]')},s;if(typeof window<"u"&&typeof window.CSS<"u"&&typeof window.CSS.escape=="function")s=r(window.CSS.escape(t.name));else try{s=r(t.name)}catch(u){return console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s",u.message),!1}var a=Ah(s,t.form);return!a||a===t},Nh=function(t){return zs(t)&&t.type==="radio"},kh=function(t){return Nh(t)&&!Oh(t)},Lh=function(t,i){if(getComputedStyle(t).visibility==="hidden")return!0;var r=Gr.call(t,"details>summary:first-of-type"),s=r?t.parentElement:t;if(Gr.call(s,"details:not([open]) *"))return!0;if(!i||i==="full")for(;t;){if(getComputedStyle(t).display==="none")return!0;t=t.parentElement}else if(i==="non-zero-area"){var a=t.getBoundingClientRect(),u=a.width,h=a.height;return u===0&&h===0}return!1},Dh=function(t){if(zs(t)||t.tagName==="SELECT"||t.tagName==="TEXTAREA"||t.tagName==="BUTTON")for(var i=t.parentElement;i;){if(i.tagName==="FIELDSET"&&i.disabled){for(var r=0;r<i.children.length;r++){var s=i.children.item(r);if(s.tagName==="LEGEND")return!s.contains(t)}return!0}i=i.parentElement}return!1},qs=function(t,i){return!(i.disabled||Sh(i)||Lh(i,t.displayCheck)||Th(i)||Dh(i))},Mh=function(t,i){return!(!qs(t,i)||kh(i)||du(i)<0)},Ph=function(t,i){i=i||{};var r=[],s=[],a=cu(t,i.includeContainer,Mh.bind(null,i));a.forEach(function(h,b){var w=du(h);w===0?r.push(h):s.push({documentOrder:b,tabIndex:w,node:h})});var u=s.sort(Ch).map(function(h){return h.node}).concat(r);return u},Hh=function(t,i){i=i||{};var r=cu(t,i.includeContainer,qs.bind(null,i));return r},Ih=uu.concat("iframe").join(","),fu=function(t,i){if(i=i||{},!t)throw new Error("No node provided");return Gr.call(t,Ih)===!1?!1:qs(i,t)};/*!
* focus-trap 6.6.1
* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
*/function ga(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable})),i.push.apply(i,r)}return i}function Rh(e){for(var t=1;t<arguments.length;t++){var i=arguments[t]!=null?arguments[t]:{};t%2?ga(Object(i),!0).forEach(function(r){jh(e,r,i[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):ga(Object(i)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(i,r))})}return e}function jh(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var va=function(){var e=[];return{activateTrap:function(i){if(e.length>0){var r=e[e.length-1];r!==i&&r.pause()}var s=e.indexOf(i);s===-1||e.splice(s,1),e.push(i)},deactivateTrap:function(i){var r=e.indexOf(i);r!==-1&&e.splice(r,1),e.length>0&&e[e.length-1].unpause()}}}(),Fh=function(t){return t.tagName&&t.tagName.toLowerCase()==="input"&&typeof t.select=="function"},Bh=function(t){return t.key==="Escape"||t.key==="Esc"||t.keyCode===27},zh=function(t){return t.key==="Tab"||t.keyCode===9},ya=function(t){return setTimeout(t,0)},Bo=function(t,i){var r=-1;return t.every(function(s,a){return i(s)?(r=a,!1):!0}),r},Zi=function(t){for(var i=arguments.length,r=new Array(i>1?i-1:0),s=1;s<i;s++)r[s-1]=arguments[s];return typeof t=="function"?t.apply(void 0,r):t},qh=function(t,i){var r=document,s=Rh({returnFocusOnDeactivate:!0,escapeDeactivates:!0,delayInitialFocus:!0},i),a={containers:[],tabbableGroups:[],nodeFocusedBeforeActivation:null,mostRecentlyFocusedNode:null,active:!1,paused:!1,delayInitialFocusTimer:void 0},u,h=function(V,c,re){return V&&V[c]!==void 0?V[c]:s[re||c]},b=function(V){return a.containers.some(function(c){return c.contains(V)})},w=function(V){var c=s[V];if(!c)return null;var re=c;if(typeof c=="string"&&(re=r.querySelector(c),!re))throw new Error("`".concat(V,"` refers to no known node"));if(typeof c=="function"&&(re=c(),!re))throw new Error("`".concat(V,"` did not return a node"));return re},S=function(){var V;if(h({},"initialFocus")===!1)return!1;if(w("initialFocus")!==null)V=w("initialFocus");else if(b(r.activeElement))V=r.activeElement;else{var c=a.tabbableGroups[0],re=c&&c.firstTabbableNode;V=re||w("fallbackFocus")}if(!V)throw new Error("Your focus-trap needs to have at least one focusable element");return V},D=function(){if(a.tabbableGroups=a.containers.map(function(V){var c=Ph(V);if(c.length>0)return{container:V,firstTabbableNode:c[0],lastTabbableNode:c[c.length-1]}}).filter(function(V){return!!V}),a.tabbableGroups.length<=0&&!w("fallbackFocus"))throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times")},P=function Ee(V){if(V!==!1&&V!==r.activeElement){if(!V||!V.focus){Ee(S());return}V.focus({preventScroll:!!s.preventScroll}),a.mostRecentlyFocusedNode=V,Fh(V)&&V.select()}},O=function(V){var c=w("setReturnFocus");return c||V},T=function(V){if(!b(V.target)){if(Zi(s.clickOutsideDeactivates,V)){u.deactivate({returnFocus:s.returnFocusOnDeactivate&&!fu(V.target)});return}Zi(s.allowOutsideClick,V)||V.preventDefault()}},I=function(V){var c=b(V.target);c||V.target instanceof Document?c&&(a.mostRecentlyFocusedNode=V.target):(V.stopImmediatePropagation(),P(a.mostRecentlyFocusedNode||S()))},j=function(V){D();var c=null;if(a.tabbableGroups.length>0){var re=Bo(a.tabbableGroups,function(Ce){var Je=Ce.container;return Je.contains(V.target)});if(re<0)V.shiftKey?c=a.tabbableGroups[a.tabbableGroups.length-1].lastTabbableNode:c=a.tabbableGroups[0].firstTabbableNode;else if(V.shiftKey){var ae=Bo(a.tabbableGroups,function(Ce){var Je=Ce.firstTabbableNode;return V.target===Je});if(ae<0&&a.tabbableGroups[re].container===V.target&&(ae=re),ae>=0){var Me=ae===0?a.tabbableGroups.length-1:ae-1,Q=a.tabbableGroups[Me];c=Q.lastTabbableNode}}else{var Z=Bo(a.tabbableGroups,function(Ce){var Je=Ce.lastTabbableNode;return V.target===Je});if(Z<0&&a.tabbableGroups[re].container===V.target&&(Z=re),Z>=0){var ne=Z===a.tabbableGroups.length-1?0:Z+1,ue=a.tabbableGroups[ne];c=ue.firstTabbableNode}}}else c=w("fallbackFocus");c&&(V.preventDefault(),P(c))},H=function(V){if(Bh(V)&&Zi(s.escapeDeactivates)!==!1){V.preventDefault(),u.deactivate();return}if(zh(V)){j(V);return}},he=function(V){Zi(s.clickOutsideDeactivates,V)||b(V.target)||Zi(s.allowOutsideClick,V)||(V.preventDefault(),V.stopImmediatePropagation())},Ae=function(){if(a.active)return va.activateTrap(u),a.delayInitialFocusTimer=s.delayInitialFocus?ya(function(){P(S())}):P(S()),r.addEventListener("focusin",I,!0),r.addEventListener("mousedown",T,{capture:!0,passive:!1}),r.addEventListener("touchstart",T,{capture:!0,passive:!1}),r.addEventListener("click",he,{capture:!0,passive:!1}),r.addEventListener("keydown",H,{capture:!0,passive:!1}),u},xe=function(){if(a.active)return r.removeEventListener("focusin",I,!0),r.removeEventListener("mousedown",T,!0),r.removeEventListener("touchstart",T,!0),r.removeEventListener("click",he,!0),r.removeEventListener("keydown",H,!0),u};return u={activate:function(V){if(a.active)return this;var c=h(V,"onActivate"),re=h(V,"onPostActivate"),ae=h(V,"checkCanFocusTrap");ae||D(),a.active=!0,a.paused=!1,a.nodeFocusedBeforeActivation=r.activeElement,c&&c();var Me=function(){ae&&D(),Ae(),re&&re()};return ae?(ae(a.containers.concat()).then(Me,Me),this):(Me(),this)},deactivate:function(V){if(!a.active)return this;clearTimeout(a.delayInitialFocusTimer),a.delayInitialFocusTimer=void 0,xe(),a.active=!1,a.paused=!1,va.deactivateTrap(u);var c=h(V,"onDeactivate"),re=h(V,"onPostDeactivate"),ae=h(V,"checkCanReturnFocus");c&&c();var Me=h(V,"returnFocus","returnFocusOnDeactivate"),Q=function(){ya(function(){Me&&P(O(a.nodeFocusedBeforeActivation)),re&&re()})};return Me&&ae?(ae(O(a.nodeFocusedBeforeActivation)).then(Q,Q),this):(Q(),this)},pause:function(){return a.paused||!a.active?this:(a.paused=!0,xe(),this)},unpause:function(){return!a.paused||!a.active?this:(a.paused=!1,D(),Ae(),this)},updateContainerElements:function(V){var c=[].concat(V).filter(Boolean);return a.containers=c.map(function(re){return typeof re=="string"?r.querySelector(re):re}),a.active&&D(),this}},u.updateContainerElements(t),u};function $h(e){let t,i;window.addEventListener("focusin",()=>{t=i,i=document.activeElement}),e.magic("focus",r=>{let s=r;return{__noscroll:!1,__wrapAround:!1,within(a){return s=a,this},withoutScrolling(){return this.__noscroll=!0,this},noscroll(){return this.__noscroll=!0,this},withWrapAround(){return this.__wrapAround=!0,this},wrap(){return this.withWrapAround()},focusable(a){return fu(a)},previouslyFocused(){return t},lastFocused(){return t},focused(){return i},focusables(){return Array.isArray(s)?s:Hh(s,{displayCheck:"none"})},all(){return this.focusables()},isFirst(a){let u=this.all();return u[0]&&u[0].isSameNode(a)},isLast(a){let u=this.all();return u.length&&u.slice(-1)[0].isSameNode(a)},getFirst(){return this.all()[0]},getLast(){return this.all().slice(-1)[0]},getNext(){let a=this.all(),u=document.activeElement;if(a.indexOf(u)!==-1)return this.__wrapAround&&a.indexOf(u)===a.length-1?a[0]:a[a.indexOf(u)+1]},getPrevious(){let a=this.all(),u=document.activeElement;if(a.indexOf(u)!==-1)return this.__wrapAround&&a.indexOf(u)===0?a.slice(-1)[0]:a[a.indexOf(u)-1]},first(){this.focus(this.getFirst())},last(){this.focus(this.getLast())},next(){this.focus(this.getNext())},previous(){this.focus(this.getPrevious())},prev(){return this.previous()},focus(a){a&&setTimeout(()=>{a.hasAttribute("tabindex")||a.setAttribute("tabindex","0"),a.focus({preventScroll:this._noscroll})})}}}),e.directive("trap",e.skipDuringClone((r,{expression:s,modifiers:a},{effect:u,evaluateLater:h,cleanup:b})=>{let w=h(s),S=!1,D={escapeDeactivates:!1,allowOutsideClick:!0,fallbackFocus:()=>r},P=r.querySelector("[autofocus]");P&&(D.initialFocus=P);let O=qh(r,D),T=()=>{},I=()=>{};const j=()=>{T(),T=()=>{},I(),I=()=>{},O.deactivate({returnFocus:!a.includes("noreturn")})};u(()=>w(H=>{S!==H&&(H&&!S&&setTimeout(()=>{a.includes("inert")&&(T=ba(r)),a.includes("noscroll")&&(I=Wh()),O.activate()}),!H&&S&&j(),S=!!H)})),b(j)},(r,{expression:s,modifiers:a},{evaluate:u})=>{a.includes("inert")&&u(s)&&ba(r)}))}function ba(e){let t=[];return hu(e,i=>{let r=i.hasAttribute("aria-hidden");i.setAttribute("aria-hidden","true"),t.push(()=>r||i.removeAttribute("aria-hidden"))}),()=>{for(;t.length;)t.pop()()}}function hu(e,t){e.isSameNode(document.body)||!e.parentNode||Array.from(e.parentNode.children).forEach(i=>{i.isSameNode(e)?hu(e.parentNode,t):t(i)})}function Wh(){let e=document.documentElement.style.overflow,t=document.documentElement.style.paddingRight,i=window.innerWidth-document.documentElement.clientWidth;return document.documentElement.style.overflow="hidden",document.documentElement.style.paddingRight=`${i}px`,()=>{document.documentElement.style.overflow=e,document.documentElement.style.paddingRight=t}}var Uh=$h;class Vh extends Di{constructor(){super()}addModuleQuickSetting(t,i){if(mw.quickSettings[t]||(mw.quickSettings[t]={}),mw.quickSettings[t].mainMenu||(mw.quickSettings[t].mainMenu=[]),Array.isArray(i))for(let r=0;r<i.length;r++)mw.quickSettings[t].mainMenu.push(i[r]);else mw.quickSettings[t].mainMenu.push(i)}addLayoutQuickSetting(t){if(mw.layoutQuickSettings||(mw.layoutQuickSettings=[]),Array.isArray(t))for(let i=0;i<t.length;i++)mw.layoutQuickSettings.push(t[i]);else mw.layoutQuickSettings.push(t)}}mw.app=new Au;mw.app.register("commands",md);mw.app.register("modules",gd);mw.app.register("layouts",vd);mw.app.register("keyboard",yd);mw.app.register("iconPicker",bd);mw.app.register("linkPicker",wd);mw.app.register("colorPicker",xd);mw.app.register("dynamicTargetMenus",Vh);window.Alpine=Bs;Bs.plugin(Uh);Bs.start();export{st as D,Xh as E,fd as L,Di as M,Ur as a,wa as c,Kh as g,Gh as l};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
