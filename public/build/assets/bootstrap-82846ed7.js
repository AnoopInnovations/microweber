var Tu=Object.defineProperty;var Au=(e,t,i)=>t in e?Tu(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i;var xt=(e,t,i)=>(Au(e,typeof t!="symbol"?t+"":t,i),i),Do=(e,t,i)=>{if(!t.has(e))throw TypeError("Cannot "+i)};var ve=(e,t,i)=>(Do(e,t,"read from private field"),i?i.call(e):t.get(e)),At=(e,t,i)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,i)},Si=(e,t,i,r)=>(Do(e,t,"write to private field"),r?r.call(e,i):t.set(e,i),i);var Cn=(e,t,i)=>(Do(e,t,"access private method"),i);var Bt;class Di{constructor(){At(this,Bt,{})}on(t,i){ve(this,Bt)[t]?ve(this,Bt)[t].push(i):ve(this,Bt)[t]=[i]}off(t,i){if(ve(this,Bt)[t])if(typeof i=="function"){const r=ve(this,Bt)[t].indexOf(i);if(r===-1)return;ve(this,Bt)[t].splice(r,1)}else ve(this,Bt)[t]=[]}dispatch(t,i,r){ve(this,Bt)[t]&&ve(this,Bt)[t].forEach(function(s){s.call(this,i)})}emit(t,i){return this.dispatch(t,i)}}Bt=new WeakMap;var zt,Ti,Ir;class Ou extends Di{constructor(){super(...arguments);At(this,Ti);At(this,zt,{})}call(i,r){for(let s in ve(this,zt))ve(this,zt)[s][i]&&Cn(this,Ti,Ir).call(this,i,ve(this,zt)[s],r)}get(i){return ve(this,zt)[i]}getModules(){return ve(this,zt)}register(i,r){let s;typeof r=="function"?s=new r:s=r,ve(this,zt)[i]=s,this[i]=s,Cn(this,Ti,Ir).call(this,"onRegister",s),this.dispatch("register")}remove(i){let r;if(typeof i=="string"&&(r=i,i=this.get(i)),!r){for(let s in ve(this,zt))if(ve(this,zt)[s]===i){r=s;break}}delete ve(this,zt)[r],delete this[r],Cn(this,Ti,Ir).call(this,"onDestroy",i),this.dispatch("remove")}}zt=new WeakMap,Ti=new WeakSet,Ir=function(i,r,s){!i||!r||!r[i]||(i=r[i],i(s))};mw.require("editor.js");mw.require("css_parser.js");const Kh=function(){var e=document.querySelector("#mw-live-edit-editor"),t=function(){var f={};this.on=function(w,b){f[w]?f[w].push(b):f[w]=[b]},this.dispatch=function(w,b){f[w]&&f[w].forEach(function(S){S.call(this,b)})},this.provide=function(w){this.dispatch("change",w.map(function(b){return{label:b,value:b}}))}},i=new t;window.fontFamilyProvider=i;const r=mw.app.get("canvas").getFrame();r.contentWindow.fontFamilyProvider=i;const s=[["ai",{group:{icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5,4V7H10.5V19H13.5V7H19V4H5Z" /></svg>',controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],a=mw.Editor({document:r.contentWindow.document,executionDocument:r.contentWindow.document,actionWindow:r.contentWindow,element:e,mode:"document",notEditableClasses:["module"],regions:".edit",skin:"le2",editMode:"liveedit",controls:null,smallEditor:s,smallEditorPositionX:"left",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:i,forced:!0});e.innerHTML="",e.appendChild(a.wrapper);var l=a.storage.get(a.settings.id+"-small-editor-pinned");typeof l>"u"&&typeof a.smallEditorApi<"u"&&a.smallEditorApi.pin(),mw.app.register("richTextEditor",a),mw.app.register("richTextEditorAPI",a.api)};var xa=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Gh(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Nu={exports:{}};(function(e,t){(function(i,r){e.exports=r()})(xa,function(){return function(i){function r(a){if(s[a])return s[a].exports;var l=s[a]={exports:{},id:a,loaded:!1};return i[a].call(l.exports,l,l.exports,r),l.loaded=!0,l.exports}var s={};return r.m=i,r.c=s,r.p="dist/",r(0)}([function(i,r,s){function a(se){return se&&se.__esModule?se:{default:se}}var l=Object.assign||function(se){for(var _e=1;_e<arguments.length;_e++){var Qe=arguments[_e];for(var it in Qe)Object.prototype.hasOwnProperty.call(Qe,it)&&(se[it]=Qe[it])}return se},f=s(1),w=(a(f),s(6)),b=a(w),S=s(7),H=a(S),M=s(8),A=a(M),T=s(9),L=a(T),I=s(10),D=a(I),le=s(11),we=a(le),de=s(14),Ce=a(de),U=[],c=!1,ie={offset:120,delay:0,easing:"ease",duration:400,disable:!1,once:!1,startEvent:"DOMContentLoaded",throttleDelay:99,debounceDelay:50,disableMutationObserver:!1},ue=function(){var se=arguments.length>0&&arguments[0]!==void 0&&arguments[0];if(se&&(c=!0),c)return U=(0,we.default)(U,ie),(0,D.default)(U,ie.once),U},Ne=function(){U=(0,Ce.default)(),ue()},Z=function(){U.forEach(function(se,_e){se.node.removeAttribute("data-aos"),se.node.removeAttribute("data-aos-easing"),se.node.removeAttribute("data-aos-duration"),se.node.removeAttribute("data-aos-delay")})},K=function(se){return se===!0||se==="mobile"&&L.default.mobile()||se==="phone"&&L.default.phone()||se==="tablet"&&L.default.tablet()||typeof se=="function"&&se()===!0},ee=function(se){ie=l(ie,se),U=(0,Ce.default)();var _e=document.all&&!window.atob;return K(ie.disable)||_e?Z():(ie.disableMutationObserver||A.default.isSupported()||(console.info(`
      aos: MutationObserver is not supported on this browser,
      code mutations observing has been disabled.
      You may have to call "refreshHard()" by yourself.
    `),ie.disableMutationObserver=!0),document.querySelector("body").setAttribute("data-aos-easing",ie.easing),document.querySelector("body").setAttribute("data-aos-duration",ie.duration),document.querySelector("body").setAttribute("data-aos-delay",ie.delay),ie.startEvent==="DOMContentLoaded"&&["complete","interactive"].indexOf(document.readyState)>-1?ue(!0):ie.startEvent==="load"?window.addEventListener(ie.startEvent,function(){ue(!0)}):document.addEventListener(ie.startEvent,function(){ue(!0)}),window.addEventListener("resize",(0,H.default)(ue,ie.debounceDelay,!0)),window.addEventListener("orientationchange",(0,H.default)(ue,ie.debounceDelay,!0)),window.addEventListener("scroll",(0,b.default)(function(){(0,D.default)(U,ie.once)},ie.throttleDelay)),ie.disableMutationObserver||A.default.ready("[data-aos]",Ne),U)};i.exports={init:ee,refresh:ue,refreshHard:Ne}},function(i,r){},,,,,function(i,r){(function(s){function a(K,ee,se){function _e(Le){var Pe=ct,Be=_t;return ct=_t=void 0,Ve=Le,nt=K.apply(Be,Pe)}function Qe(Le){return Ve=Le,Je=setTimeout(wt,ee),Nt?_e(Le):nt}function it(Le){var Pe=Le-dt,Be=Le-Ve,G=ee-Pe;return Ze?Ne(G,We-Be):G}function rt(Le){var Pe=Le-dt,Be=Le-Ve;return dt===void 0||Pe>=ee||Pe<0||Ze&&Be>=We}function wt(){var Le=Z();return rt(Le)?$t(Le):void(Je=setTimeout(wt,it(Le)))}function $t(Le){return Je=void 0,je&&ct?_e(Le):(ct=_t=void 0,nt)}function Ht(){Je!==void 0&&clearTimeout(Je),Ve=0,ct=dt=_t=Je=void 0}function Wt(){return Je===void 0?nt:$t(Z())}function yt(){var Le=Z(),Pe=rt(Le);if(ct=arguments,_t=this,dt=Le,Pe){if(Je===void 0)return Qe(dt);if(Ze)return Je=setTimeout(wt,ee),_e(dt)}return Je===void 0&&(Je=setTimeout(wt,ee)),nt}var ct,_t,We,nt,Je,dt,Ve=0,Nt=!1,Ze=!1,je=!0;if(typeof K!="function")throw new TypeError(M);return ee=S(ee)||0,f(se)&&(Nt=!!se.leading,Ze="maxWait"in se,We=Ze?ue(S(se.maxWait)||0,ee):We,je="trailing"in se?!!se.trailing:je),yt.cancel=Ht,yt.flush=Wt,yt}function l(K,ee,se){var _e=!0,Qe=!0;if(typeof K!="function")throw new TypeError(M);return f(se)&&(_e="leading"in se?!!se.leading:_e,Qe="trailing"in se?!!se.trailing:Qe),a(K,ee,{leading:_e,maxWait:ee,trailing:Qe})}function f(K){var ee=typeof K>"u"?"undefined":H(K);return!!K&&(ee=="object"||ee=="function")}function w(K){return!!K&&(typeof K>"u"?"undefined":H(K))=="object"}function b(K){return(typeof K>"u"?"undefined":H(K))=="symbol"||w(K)&&ie.call(K)==T}function S(K){if(typeof K=="number")return K;if(b(K))return A;if(f(K)){var ee=typeof K.valueOf=="function"?K.valueOf():K;K=f(ee)?ee+"":ee}if(typeof K!="string")return K===0?K:+K;K=K.replace(L,"");var se=D.test(K);return se||le.test(K)?we(K.slice(2),se?2:8):I.test(K)?A:+K}var H=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(K){return typeof K}:function(K){return K&&typeof Symbol=="function"&&K.constructor===Symbol&&K!==Symbol.prototype?"symbol":typeof K},M="Expected a function",A=NaN,T="[object Symbol]",L=/^\s+|\s+$/g,I=/^[-+]0x[0-9a-f]+$/i,D=/^0b[01]+$/i,le=/^0o[0-7]+$/i,we=parseInt,de=(typeof s>"u"?"undefined":H(s))=="object"&&s&&s.Object===Object&&s,Ce=(typeof self>"u"?"undefined":H(self))=="object"&&self&&self.Object===Object&&self,U=de||Ce||Function("return this")(),c=Object.prototype,ie=c.toString,ue=Math.max,Ne=Math.min,Z=function(){return U.Date.now()};i.exports=l}).call(r,function(){return this}())},function(i,r){(function(s){function a(Z,K,ee){function se(je){var Le=yt,Pe=ct;return yt=ct=void 0,dt=je,We=Z.apply(Pe,Le)}function _e(je){return dt=je,nt=setTimeout(rt,K),Ve?se(je):We}function Qe(je){var Le=je-Je,Pe=je-dt,Be=K-Le;return Nt?ue(Be,_t-Pe):Be}function it(je){var Le=je-Je,Pe=je-dt;return Je===void 0||Le>=K||Le<0||Nt&&Pe>=_t}function rt(){var je=Ne();return it(je)?wt(je):void(nt=setTimeout(rt,Qe(je)))}function wt(je){return nt=void 0,Ze&&yt?se(je):(yt=ct=void 0,We)}function $t(){nt!==void 0&&clearTimeout(nt),dt=0,yt=Je=ct=nt=void 0}function Ht(){return nt===void 0?We:wt(Ne())}function Wt(){var je=Ne(),Le=it(je);if(yt=arguments,ct=this,Je=je,Le){if(nt===void 0)return _e(Je);if(Nt)return nt=setTimeout(rt,K),se(Je)}return nt===void 0&&(nt=setTimeout(rt,K)),We}var yt,ct,_t,We,nt,Je,dt=0,Ve=!1,Nt=!1,Ze=!0;if(typeof Z!="function")throw new TypeError(H);return K=b(K)||0,l(ee)&&(Ve=!!ee.leading,Nt="maxWait"in ee,_t=Nt?ie(b(ee.maxWait)||0,K):_t,Ze="trailing"in ee?!!ee.trailing:Ze),Wt.cancel=$t,Wt.flush=Ht,Wt}function l(Z){var K=typeof Z>"u"?"undefined":S(Z);return!!Z&&(K=="object"||K=="function")}function f(Z){return!!Z&&(typeof Z>"u"?"undefined":S(Z))=="object"}function w(Z){return(typeof Z>"u"?"undefined":S(Z))=="symbol"||f(Z)&&c.call(Z)==A}function b(Z){if(typeof Z=="number")return Z;if(w(Z))return M;if(l(Z)){var K=typeof Z.valueOf=="function"?Z.valueOf():Z;Z=l(K)?K+"":K}if(typeof Z!="string")return Z===0?Z:+Z;Z=Z.replace(T,"");var ee=I.test(Z);return ee||D.test(Z)?le(Z.slice(2),ee?2:8):L.test(Z)?M:+Z}var S=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(Z){return typeof Z}:function(Z){return Z&&typeof Symbol=="function"&&Z.constructor===Symbol&&Z!==Symbol.prototype?"symbol":typeof Z},H="Expected a function",M=NaN,A="[object Symbol]",T=/^\s+|\s+$/g,L=/^[-+]0x[0-9a-f]+$/i,I=/^0b[01]+$/i,D=/^0o[0-7]+$/i,le=parseInt,we=(typeof s>"u"?"undefined":S(s))=="object"&&s&&s.Object===Object&&s,de=(typeof self>"u"?"undefined":S(self))=="object"&&self&&self.Object===Object&&self,Ce=we||de||Function("return this")(),U=Object.prototype,c=U.toString,ie=Math.max,ue=Math.min,Ne=function(){return Ce.Date.now()};i.exports=a}).call(r,function(){return this}())},function(i,r){function s(S){var H=void 0,M=void 0;for(H=0;H<S.length;H+=1)if(M=S[H],M.dataset&&M.dataset.aos||M.children&&s(M.children))return!0;return!1}function a(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}function l(){return!!a()}function f(S,H){var M=window.document,A=a(),T=new A(w);b=H,T.observe(M.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}function w(S){S&&S.forEach(function(H){var M=Array.prototype.slice.call(H.addedNodes),A=Array.prototype.slice.call(H.removedNodes),T=M.concat(A);if(s(T))return b()})}Object.defineProperty(r,"__esModule",{value:!0});var b=function(){};r.default={isSupported:l,ready:f}},function(i,r){function s(M,A){if(!(M instanceof A))throw new TypeError("Cannot call a class as a function")}function a(){return navigator.userAgent||navigator.vendor||window.opera||""}Object.defineProperty(r,"__esModule",{value:!0});var l=function(){function M(A,T){for(var L=0;L<T.length;L++){var I=T[L];I.enumerable=I.enumerable||!1,I.configurable=!0,"value"in I&&(I.writable=!0),Object.defineProperty(A,I.key,I)}}return function(A,T,L){return T&&M(A.prototype,T),L&&M(A,L),A}}(),f=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,w=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,b=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,S=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,H=function(){function M(){s(this,M)}return l(M,[{key:"phone",value:function(){var A=a();return!(!f.test(A)&&!w.test(A.substr(0,4)))}},{key:"mobile",value:function(){var A=a();return!(!b.test(A)&&!S.test(A.substr(0,4)))}},{key:"tablet",value:function(){return this.mobile()&&!this.phone()}}]),M}();r.default=new H},function(i,r){Object.defineProperty(r,"__esModule",{value:!0});var s=function(l,f,w){var b=l.node.getAttribute("data-aos-once");f>l.position?l.node.classList.add("aos-animate"):typeof b<"u"&&(b==="false"||!w&&b!=="true")&&l.node.classList.remove("aos-animate")},a=function(l,f){var w=window.pageYOffset,b=window.innerHeight;l.forEach(function(S,H){s(S,b+w,f)})};r.default=a},function(i,r,s){function a(b){return b&&b.__esModule?b:{default:b}}Object.defineProperty(r,"__esModule",{value:!0});var l=s(12),f=a(l),w=function(b,S){return b.forEach(function(H,M){H.node.classList.add("aos-init"),H.position=(0,f.default)(H.node,S.offset)}),b};r.default=w},function(i,r,s){function a(b){return b&&b.__esModule?b:{default:b}}Object.defineProperty(r,"__esModule",{value:!0});var l=s(13),f=a(l),w=function(b,S){var H=0,M=0,A=window.innerHeight,T={offset:b.getAttribute("data-aos-offset"),anchor:b.getAttribute("data-aos-anchor"),anchorPlacement:b.getAttribute("data-aos-anchor-placement")};switch(T.offset&&!isNaN(T.offset)&&(M=parseInt(T.offset)),T.anchor&&document.querySelectorAll(T.anchor)&&(b=document.querySelectorAll(T.anchor)[0]),H=(0,f.default)(b).top,T.anchorPlacement){case"top-bottom":break;case"center-bottom":H+=b.offsetHeight/2;break;case"bottom-bottom":H+=b.offsetHeight;break;case"top-center":H+=A/2;break;case"bottom-center":H+=A/2+b.offsetHeight;break;case"center-center":H+=A/2+b.offsetHeight/2;break;case"top-top":H+=A;break;case"bottom-top":H+=b.offsetHeight+A;break;case"center-top":H+=b.offsetHeight/2+A}return T.anchorPlacement||T.offset||isNaN(S)||(M=S),H+M};r.default=w},function(i,r){Object.defineProperty(r,"__esModule",{value:!0});var s=function(a){for(var l=0,f=0;a&&!isNaN(a.offsetLeft)&&!isNaN(a.offsetTop);)l+=a.offsetLeft-(a.tagName!="BODY"?a.scrollLeft:0),f+=a.offsetTop-(a.tagName!="BODY"?a.scrollTop:0),a=a.offsetParent;return{top:f,left:l}};r.default=s},function(i,r){Object.defineProperty(r,"__esModule",{value:!0});var s=function(a){return a=a||document.querySelectorAll("[data-aos]"),Array.prototype.map.call(a,function(l){return{node:l}})};r.default=s}])})})(Nu);function _a(e,t){return function(){return e.apply(t,arguments)}}const{toString:ku}=Object.prototype,{getPrototypeOf:ms}=Object,Zr=(e=>t=>{const i=ku.call(t);return e[i]||(e[i]=i.slice(8,-1).toLowerCase())})(Object.create(null)),gn=e=>(e=e.toLowerCase(),t=>Zr(t)===e),eo=e=>t=>typeof t===e,{isArray:Mi}=Array,or=eo("undefined");function Lu(e){return e!==null&&!or(e)&&e.constructor!==null&&!or(e.constructor)&&qt(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const Ea=gn("ArrayBuffer");function Du(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&Ea(e.buffer),t}const Mu=eo("string"),qt=eo("function"),Ca=eo("number"),to=e=>e!==null&&typeof e=="object",Hu=e=>e===!0||e===!1,jr=e=>{if(Zr(e)!=="object")return!1;const t=ms(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},Pu=gn("Date"),Ru=gn("File"),Iu=gn("Blob"),ju=gn("FileList"),Fu=e=>to(e)&&qt(e.pipe),Bu=e=>{let t;return e&&(typeof FormData=="function"&&e instanceof FormData||qt(e.append)&&((t=Zr(e))==="formdata"||t==="object"&&qt(e.toString)&&e.toString()==="[object FormData]"))},zu=gn("URLSearchParams"),qu=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function cr(e,t,{allOwnKeys:i=!1}={}){if(e===null||typeof e>"u")return;let r,s;if(typeof e!="object"&&(e=[e]),Mi(e))for(r=0,s=e.length;r<s;r++)t.call(null,e[r],r,e);else{const a=i?Object.getOwnPropertyNames(e):Object.keys(e),l=a.length;let f;for(r=0;r<l;r++)f=a[r],t.call(null,e[f],f,e)}}function Sa(e,t){t=t.toLowerCase();const i=Object.keys(e);let r=i.length,s;for(;r-- >0;)if(s=i[r],t===s.toLowerCase())return s;return null}const Ta=(()=>typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global)(),Aa=e=>!or(e)&&e!==Ta;function qo(){const{caseless:e}=Aa(this)&&this||{},t={},i=(r,s)=>{const a=e&&Sa(t,s)||s;jr(t[a])&&jr(r)?t[a]=qo(t[a],r):jr(r)?t[a]=qo({},r):Mi(r)?t[a]=r.slice():t[a]=r};for(let r=0,s=arguments.length;r<s;r++)arguments[r]&&cr(arguments[r],i);return t}const $u=(e,t,i,{allOwnKeys:r}={})=>(cr(t,(s,a)=>{i&&qt(s)?e[a]=_a(s,i):e[a]=s},{allOwnKeys:r}),e),Wu=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),Vu=(e,t,i,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),i&&Object.assign(e.prototype,i)},Uu=(e,t,i,r)=>{let s,a,l;const f={};if(t=t||{},e==null)return t;do{for(s=Object.getOwnPropertyNames(e),a=s.length;a-- >0;)l=s[a],(!r||r(l,e,t))&&!f[l]&&(t[l]=e[l],f[l]=!0);e=i!==!1&&ms(e)}while(e&&(!i||i(e,t))&&e!==Object.prototype);return t},Yu=(e,t,i)=>{e=String(e),(i===void 0||i>e.length)&&(i=e.length),i-=t.length;const r=e.indexOf(t,i);return r!==-1&&r===i},Xu=e=>{if(!e)return null;if(Mi(e))return e;let t=e.length;if(!Ca(t))return null;const i=new Array(t);for(;t-- >0;)i[t]=e[t];return i},Ku=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&ms(Uint8Array)),Gu=(e,t)=>{const r=(e&&e[Symbol.iterator]).call(e);let s;for(;(s=r.next())&&!s.done;){const a=s.value;t.call(e,a[0],a[1])}},Ju=(e,t)=>{let i;const r=[];for(;(i=e.exec(t))!==null;)r.push(i);return r},Qu=gn("HTMLFormElement"),Zu=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(i,r,s){return r.toUpperCase()+s}),Xs=(({hasOwnProperty:e})=>(t,i)=>e.call(t,i))(Object.prototype),ec=gn("RegExp"),Oa=(e,t)=>{const i=Object.getOwnPropertyDescriptors(e),r={};cr(i,(s,a)=>{t(s,a,e)!==!1&&(r[a]=s)}),Object.defineProperties(e,r)},tc=e=>{Oa(e,(t,i)=>{if(qt(e)&&["arguments","caller","callee"].indexOf(i)!==-1)return!1;const r=e[i];if(qt(r)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+i+"'")})}})},nc=(e,t)=>{const i={},r=s=>{s.forEach(a=>{i[a]=!0})};return Mi(e)?r(e):r(String(e).split(t)),i},ic=()=>{},rc=(e,t)=>(e=+e,Number.isFinite(e)?e:t),Mo="abcdefghijklmnopqrstuvwxyz",Ks="0123456789",Na={DIGIT:Ks,ALPHA:Mo,ALPHA_DIGIT:Mo+Mo.toUpperCase()+Ks},oc=(e=16,t=Na.ALPHA_DIGIT)=>{let i="";const{length:r}=t;for(;e--;)i+=t[Math.random()*r|0];return i};function sc(e){return!!(e&&qt(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const ac=e=>{const t=new Array(10),i=(r,s)=>{if(to(r)){if(t.indexOf(r)>=0)return;if(!("toJSON"in r)){t[s]=r;const a=Mi(r)?[]:{};return cr(r,(l,f)=>{const w=i(l,s+1);!or(w)&&(a[f]=w)}),t[s]=void 0,a}}return r};return i(e,0)},lc=gn("AsyncFunction"),uc=e=>e&&(to(e)||qt(e))&&qt(e.then)&&qt(e.catch),V={isArray:Mi,isArrayBuffer:Ea,isBuffer:Lu,isFormData:Bu,isArrayBufferView:Du,isString:Mu,isNumber:Ca,isBoolean:Hu,isObject:to,isPlainObject:jr,isUndefined:or,isDate:Pu,isFile:Ru,isBlob:Iu,isRegExp:ec,isFunction:qt,isStream:Fu,isURLSearchParams:zu,isTypedArray:Ku,isFileList:ju,forEach:cr,merge:qo,extend:$u,trim:qu,stripBOM:Wu,inherits:Vu,toFlatObject:Uu,kindOf:Zr,kindOfTest:gn,endsWith:Yu,toArray:Xu,forEachEntry:Gu,matchAll:Ju,isHTMLForm:Qu,hasOwnProperty:Xs,hasOwnProp:Xs,reduceDescriptors:Oa,freezeMethods:tc,toObjectSet:nc,toCamelCase:Zu,noop:ic,toFiniteNumber:rc,findKey:Sa,global:Ta,isContextDefined:Aa,ALPHABET:Na,generateString:oc,isSpecCompliantForm:sc,toJSONObject:ac,isAsyncFn:lc,isThenable:uc};function Me(e,t,i,r,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),i&&(this.config=i),r&&(this.request=r),s&&(this.response=s)}V.inherits(Me,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:V.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const ka=Me.prototype,La={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{La[e]={value:e}});Object.defineProperties(Me,La);Object.defineProperty(ka,"isAxiosError",{value:!0});Me.from=(e,t,i,r,s,a)=>{const l=Object.create(ka);return V.toFlatObject(e,l,function(w){return w!==Error.prototype},f=>f!=="isAxiosError"),Me.call(l,e.message,t,i,r,s),l.cause=e,l.name=e.name,a&&Object.assign(l,a),l};const cc=null;function $o(e){return V.isPlainObject(e)||V.isArray(e)}function Da(e){return V.endsWith(e,"[]")?e.slice(0,-2):e}function Gs(e,t,i){return e?e.concat(t).map(function(s,a){return s=Da(s),!i&&a?"["+s+"]":s}).join(i?".":""):t}function dc(e){return V.isArray(e)&&!e.some($o)}const fc=V.toFlatObject(V,{},null,function(t){return/^is[A-Z]/.test(t)});function no(e,t,i){if(!V.isObject(e))throw new TypeError("target must be an object");t=t||new FormData,i=V.toFlatObject(i,{metaTokens:!0,dots:!1,indexes:!1},!1,function(L,I){return!V.isUndefined(I[L])});const r=i.metaTokens,s=i.visitor||S,a=i.dots,l=i.indexes,w=(i.Blob||typeof Blob<"u"&&Blob)&&V.isSpecCompliantForm(t);if(!V.isFunction(s))throw new TypeError("visitor must be a function");function b(T){if(T===null)return"";if(V.isDate(T))return T.toISOString();if(!w&&V.isBlob(T))throw new Me("Blob is not supported. Use a Buffer instead.");return V.isArrayBuffer(T)||V.isTypedArray(T)?w&&typeof Blob=="function"?new Blob([T]):Buffer.from(T):T}function S(T,L,I){let D=T;if(T&&!I&&typeof T=="object"){if(V.endsWith(L,"{}"))L=r?L:L.slice(0,-2),T=JSON.stringify(T);else if(V.isArray(T)&&dc(T)||(V.isFileList(T)||V.endsWith(L,"[]"))&&(D=V.toArray(T)))return L=Da(L),D.forEach(function(we,de){!(V.isUndefined(we)||we===null)&&t.append(l===!0?Gs([L],de,a):l===null?L:L+"[]",b(we))}),!1}return $o(T)?!0:(t.append(Gs(I,L,a),b(T)),!1)}const H=[],M=Object.assign(fc,{defaultVisitor:S,convertValue:b,isVisitable:$o});function A(T,L){if(!V.isUndefined(T)){if(H.indexOf(T)!==-1)throw Error("Circular reference detected in "+L.join("."));H.push(T),V.forEach(T,function(D,le){(!(V.isUndefined(D)||D===null)&&s.call(t,D,V.isString(le)?le.trim():le,L,M))===!0&&A(D,L?L.concat(le):[le])}),H.pop()}}if(!V.isObject(e))throw new TypeError("data must be an object");return A(e),t}function Js(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(r){return t[r]})}function gs(e,t){this._pairs=[],e&&no(e,this,t)}const Ma=gs.prototype;Ma.append=function(t,i){this._pairs.push([t,i])};Ma.toString=function(t){const i=t?function(r){return t.call(this,r,Js)}:Js;return this._pairs.map(function(s){return i(s[0])+"="+i(s[1])},"").join("&")};function hc(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Ha(e,t,i){if(!t)return e;const r=i&&i.encode||hc,s=i&&i.serialize;let a;if(s?a=s(t,i):a=V.isURLSearchParams(t)?t.toString():new gs(t,i).toString(r),a){const l=e.indexOf("#");l!==-1&&(e=e.slice(0,l)),e+=(e.indexOf("?")===-1?"?":"&")+a}return e}class pc{constructor(){this.handlers=[]}use(t,i,r){return this.handlers.push({fulfilled:t,rejected:i,synchronous:r?r.synchronous:!1,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){V.forEach(this.handlers,function(r){r!==null&&t(r)})}}const Qs=pc,Pa={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},mc=typeof URLSearchParams<"u"?URLSearchParams:gs,gc=typeof FormData<"u"?FormData:null,vc=typeof Blob<"u"?Blob:null,wc=(()=>{let e;return typeof navigator<"u"&&((e=navigator.product)==="ReactNative"||e==="NativeScript"||e==="NS")?!1:typeof window<"u"&&typeof document<"u"})(),yc=(()=>typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function")(),pn={isBrowser:!0,classes:{URLSearchParams:mc,FormData:gc,Blob:vc},isStandardBrowserEnv:wc,isStandardBrowserWebWorkerEnv:yc,protocols:["http","https","file","blob","url","data"]};function bc(e,t){return no(e,new pn.classes.URLSearchParams,Object.assign({visitor:function(i,r,s,a){return pn.isNode&&V.isBuffer(i)?(this.append(r,i.toString("base64")),!1):a.defaultVisitor.apply(this,arguments)}},t))}function xc(e){return V.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function _c(e){const t={},i=Object.keys(e);let r;const s=i.length;let a;for(r=0;r<s;r++)a=i[r],t[a]=e[a];return t}function Ra(e){function t(i,r,s,a){let l=i[a++];const f=Number.isFinite(+l),w=a>=i.length;return l=!l&&V.isArray(s)?s.length:l,w?(V.hasOwnProp(s,l)?s[l]=[s[l],r]:s[l]=r,!f):((!s[l]||!V.isObject(s[l]))&&(s[l]=[]),t(i,r,s[l],a)&&V.isArray(s[l])&&(s[l]=_c(s[l])),!f)}if(V.isFormData(e)&&V.isFunction(e.entries)){const i={};return V.forEachEntry(e,(r,s)=>{t(xc(r),s,i,0)}),i}return null}const Ec={"Content-Type":void 0};function Cc(e,t,i){if(V.isString(e))try{return(t||JSON.parse)(e),V.trim(e)}catch(r){if(r.name!=="SyntaxError")throw r}return(i||JSON.stringify)(e)}const io={transitional:Pa,adapter:["xhr","http"],transformRequest:[function(t,i){const r=i.getContentType()||"",s=r.indexOf("application/json")>-1,a=V.isObject(t);if(a&&V.isHTMLForm(t)&&(t=new FormData(t)),V.isFormData(t))return s&&s?JSON.stringify(Ra(t)):t;if(V.isArrayBuffer(t)||V.isBuffer(t)||V.isStream(t)||V.isFile(t)||V.isBlob(t))return t;if(V.isArrayBufferView(t))return t.buffer;if(V.isURLSearchParams(t))return i.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let f;if(a){if(r.indexOf("application/x-www-form-urlencoded")>-1)return bc(t,this.formSerializer).toString();if((f=V.isFileList(t))||r.indexOf("multipart/form-data")>-1){const w=this.env&&this.env.FormData;return no(f?{"files[]":t}:t,w&&new w,this.formSerializer)}}return a||s?(i.setContentType("application/json",!1),Cc(t)):t}],transformResponse:[function(t){const i=this.transitional||io.transitional,r=i&&i.forcedJSONParsing,s=this.responseType==="json";if(t&&V.isString(t)&&(r&&!this.responseType||s)){const l=!(i&&i.silentJSONParsing)&&s;try{return JSON.parse(t)}catch(f){if(l)throw f.name==="SyntaxError"?Me.from(f,Me.ERR_BAD_RESPONSE,this,null,this.response):f}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:pn.classes.FormData,Blob:pn.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};V.forEach(["delete","get","head"],function(t){io.headers[t]={}});V.forEach(["post","put","patch"],function(t){io.headers[t]=V.merge(Ec)});const vs=io,Sc=V.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Tc=e=>{const t={};let i,r,s;return e&&e.split(`
`).forEach(function(l){s=l.indexOf(":"),i=l.substring(0,s).trim().toLowerCase(),r=l.substring(s+1).trim(),!(!i||t[i]&&Sc[i])&&(i==="set-cookie"?t[i]?t[i].push(r):t[i]=[r]:t[i]=t[i]?t[i]+", "+r:r)}),t},Zs=Symbol("internals");function Gi(e){return e&&String(e).trim().toLowerCase()}function Fr(e){return e===!1||e==null?e:V.isArray(e)?e.map(Fr):String(e)}function Ac(e){const t=Object.create(null),i=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=i.exec(e);)t[r[1]]=r[2];return t}const Oc=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function Ho(e,t,i,r,s){if(V.isFunction(r))return r.call(this,t,i);if(s&&(t=i),!!V.isString(t)){if(V.isString(r))return t.indexOf(r)!==-1;if(V.isRegExp(r))return r.test(t)}}function Nc(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,i,r)=>i.toUpperCase()+r)}function kc(e,t){const i=V.toCamelCase(" "+t);["get","set","has"].forEach(r=>{Object.defineProperty(e,r+i,{value:function(s,a,l){return this[r].call(this,t,s,a,l)},configurable:!0})})}class ro{constructor(t){t&&this.set(t)}set(t,i,r){const s=this;function a(f,w,b){const S=Gi(w);if(!S)throw new Error("header name must be a non-empty string");const H=V.findKey(s,S);(!H||s[H]===void 0||b===!0||b===void 0&&s[H]!==!1)&&(s[H||w]=Fr(f))}const l=(f,w)=>V.forEach(f,(b,S)=>a(b,S,w));return V.isPlainObject(t)||t instanceof this.constructor?l(t,i):V.isString(t)&&(t=t.trim())&&!Oc(t)?l(Tc(t),i):t!=null&&a(i,t,r),this}get(t,i){if(t=Gi(t),t){const r=V.findKey(this,t);if(r){const s=this[r];if(!i)return s;if(i===!0)return Ac(s);if(V.isFunction(i))return i.call(this,s,r);if(V.isRegExp(i))return i.exec(s);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,i){if(t=Gi(t),t){const r=V.findKey(this,t);return!!(r&&this[r]!==void 0&&(!i||Ho(this,this[r],r,i)))}return!1}delete(t,i){const r=this;let s=!1;function a(l){if(l=Gi(l),l){const f=V.findKey(r,l);f&&(!i||Ho(r,r[f],f,i))&&(delete r[f],s=!0)}}return V.isArray(t)?t.forEach(a):a(t),s}clear(t){const i=Object.keys(this);let r=i.length,s=!1;for(;r--;){const a=i[r];(!t||Ho(this,this[a],a,t,!0))&&(delete this[a],s=!0)}return s}normalize(t){const i=this,r={};return V.forEach(this,(s,a)=>{const l=V.findKey(r,a);if(l){i[l]=Fr(s),delete i[a];return}const f=t?Nc(a):String(a).trim();f!==a&&delete i[a],i[f]=Fr(s),r[f]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const i=Object.create(null);return V.forEach(this,(r,s)=>{r!=null&&r!==!1&&(i[s]=t&&V.isArray(r)?r.join(", "):r)}),i}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,i])=>t+": "+i).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...i){const r=new this(t);return i.forEach(s=>r.set(s)),r}static accessor(t){const r=(this[Zs]=this[Zs]={accessors:{}}).accessors,s=this.prototype;function a(l){const f=Gi(l);r[f]||(kc(s,l),r[f]=!0)}return V.isArray(t)?t.forEach(a):a(t),this}}ro.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);V.freezeMethods(ro.prototype);V.freezeMethods(ro);const Sn=ro;function Po(e,t){const i=this||vs,r=t||i,s=Sn.from(r.headers);let a=r.data;return V.forEach(e,function(f){a=f.call(i,a,s.normalize(),t?t.status:void 0)}),s.normalize(),a}function Ia(e){return!!(e&&e.__CANCEL__)}function dr(e,t,i){Me.call(this,e??"canceled",Me.ERR_CANCELED,t,i),this.name="CanceledError"}V.inherits(dr,Me,{__CANCEL__:!0});function Lc(e,t,i){const r=i.config.validateStatus;!i.status||!r||r(i.status)?e(i):t(new Me("Request failed with status code "+i.status,[Me.ERR_BAD_REQUEST,Me.ERR_BAD_RESPONSE][Math.floor(i.status/100)-4],i.config,i.request,i))}const Dc=pn.isStandardBrowserEnv?function(){return{write:function(i,r,s,a,l,f){const w=[];w.push(i+"="+encodeURIComponent(r)),V.isNumber(s)&&w.push("expires="+new Date(s).toGMTString()),V.isString(a)&&w.push("path="+a),V.isString(l)&&w.push("domain="+l),f===!0&&w.push("secure"),document.cookie=w.join("; ")},read:function(i){const r=document.cookie.match(new RegExp("(^|;\\s*)("+i+")=([^;]*)"));return r?decodeURIComponent(r[3]):null},remove:function(i){this.write(i,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}();function Mc(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function Hc(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}function ja(e,t){return e&&!Mc(t)?Hc(e,t):t}const Pc=pn.isStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a");let r;function s(a){let l=a;return t&&(i.setAttribute("href",l),l=i.href),i.setAttribute("href",l),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:i.pathname.charAt(0)==="/"?i.pathname:"/"+i.pathname}}return r=s(window.location.href),function(l){const f=V.isString(l)?s(l):l;return f.protocol===r.protocol&&f.host===r.host}}():function(){return function(){return!0}}();function Rc(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}function Ic(e,t){e=e||10;const i=new Array(e),r=new Array(e);let s=0,a=0,l;return t=t!==void 0?t:1e3,function(w){const b=Date.now(),S=r[a];l||(l=b),i[s]=w,r[s]=b;let H=a,M=0;for(;H!==s;)M+=i[H++],H=H%e;if(s=(s+1)%e,s===a&&(a=(a+1)%e),b-l<t)return;const A=S&&b-S;return A?Math.round(M*1e3/A):void 0}}function ea(e,t){let i=0;const r=Ic(50,250);return s=>{const a=s.loaded,l=s.lengthComputable?s.total:void 0,f=a-i,w=r(f),b=a<=l;i=a;const S={loaded:a,total:l,progress:l?a/l:void 0,bytes:f,rate:w||void 0,estimated:w&&l&&b?(l-a)/w:void 0,event:s};S[t?"download":"upload"]=!0,e(S)}}const jc=typeof XMLHttpRequest<"u",Fc=jc&&function(e){return new Promise(function(i,r){let s=e.data;const a=Sn.from(e.headers).normalize(),l=e.responseType;let f;function w(){e.cancelToken&&e.cancelToken.unsubscribe(f),e.signal&&e.signal.removeEventListener("abort",f)}V.isFormData(s)&&(pn.isStandardBrowserEnv||pn.isStandardBrowserWebWorkerEnv?a.setContentType(!1):a.setContentType("multipart/form-data;",!1));let b=new XMLHttpRequest;if(e.auth){const A=e.auth.username||"",T=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";a.set("Authorization","Basic "+btoa(A+":"+T))}const S=ja(e.baseURL,e.url);b.open(e.method.toUpperCase(),Ha(S,e.params,e.paramsSerializer),!0),b.timeout=e.timeout;function H(){if(!b)return;const A=Sn.from("getAllResponseHeaders"in b&&b.getAllResponseHeaders()),L={data:!l||l==="text"||l==="json"?b.responseText:b.response,status:b.status,statusText:b.statusText,headers:A,config:e,request:b};Lc(function(D){i(D),w()},function(D){r(D),w()},L),b=null}if("onloadend"in b?b.onloadend=H:b.onreadystatechange=function(){!b||b.readyState!==4||b.status===0&&!(b.responseURL&&b.responseURL.indexOf("file:")===0)||setTimeout(H)},b.onabort=function(){b&&(r(new Me("Request aborted",Me.ECONNABORTED,e,b)),b=null)},b.onerror=function(){r(new Me("Network Error",Me.ERR_NETWORK,e,b)),b=null},b.ontimeout=function(){let T=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const L=e.transitional||Pa;e.timeoutErrorMessage&&(T=e.timeoutErrorMessage),r(new Me(T,L.clarifyTimeoutError?Me.ETIMEDOUT:Me.ECONNABORTED,e,b)),b=null},pn.isStandardBrowserEnv){const A=(e.withCredentials||Pc(S))&&e.xsrfCookieName&&Dc.read(e.xsrfCookieName);A&&a.set(e.xsrfHeaderName,A)}s===void 0&&a.setContentType(null),"setRequestHeader"in b&&V.forEach(a.toJSON(),function(T,L){b.setRequestHeader(L,T)}),V.isUndefined(e.withCredentials)||(b.withCredentials=!!e.withCredentials),l&&l!=="json"&&(b.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&b.addEventListener("progress",ea(e.onDownloadProgress,!0)),typeof e.onUploadProgress=="function"&&b.upload&&b.upload.addEventListener("progress",ea(e.onUploadProgress)),(e.cancelToken||e.signal)&&(f=A=>{b&&(r(!A||A.type?new dr(null,e,b):A),b.abort(),b=null)},e.cancelToken&&e.cancelToken.subscribe(f),e.signal&&(e.signal.aborted?f():e.signal.addEventListener("abort",f)));const M=Rc(S);if(M&&pn.protocols.indexOf(M)===-1){r(new Me("Unsupported protocol "+M+":",Me.ERR_BAD_REQUEST,e));return}b.send(s||null)})},Br={http:cc,xhr:Fc};V.forEach(Br,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});const Bc={getAdapter:e=>{e=V.isArray(e)?e:[e];const{length:t}=e;let i,r;for(let s=0;s<t&&(i=e[s],!(r=V.isString(i)?Br[i.toLowerCase()]:i));s++);if(!r)throw r===!1?new Me(`Adapter ${i} is not supported by the environment`,"ERR_NOT_SUPPORT"):new Error(V.hasOwnProp(Br,i)?`Adapter '${i}' is not available in the build`:`Unknown adapter '${i}'`);if(!V.isFunction(r))throw new TypeError("adapter is not a function");return r},adapters:Br};function Ro(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new dr(null,e)}function ta(e){return Ro(e),e.headers=Sn.from(e.headers),e.data=Po.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Bc.getAdapter(e.adapter||vs.adapter)(e).then(function(r){return Ro(e),r.data=Po.call(e,e.transformResponse,r),r.headers=Sn.from(r.headers),r},function(r){return Ia(r)||(Ro(e),r&&r.response&&(r.response.data=Po.call(e,e.transformResponse,r.response),r.response.headers=Sn.from(r.response.headers))),Promise.reject(r)})}const na=e=>e instanceof Sn?e.toJSON():e;function Ni(e,t){t=t||{};const i={};function r(b,S,H){return V.isPlainObject(b)&&V.isPlainObject(S)?V.merge.call({caseless:H},b,S):V.isPlainObject(S)?V.merge({},S):V.isArray(S)?S.slice():S}function s(b,S,H){if(V.isUndefined(S)){if(!V.isUndefined(b))return r(void 0,b,H)}else return r(b,S,H)}function a(b,S){if(!V.isUndefined(S))return r(void 0,S)}function l(b,S){if(V.isUndefined(S)){if(!V.isUndefined(b))return r(void 0,b)}else return r(void 0,S)}function f(b,S,H){if(H in t)return r(b,S);if(H in e)return r(void 0,b)}const w={url:a,method:a,data:a,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,beforeRedirect:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:f,headers:(b,S)=>s(na(b),na(S),!0)};return V.forEach(Object.keys(Object.assign({},e,t)),function(S){const H=w[S]||s,M=H(e[S],t[S],S);V.isUndefined(M)&&H!==f||(i[S]=M)}),i}const Fa="1.4.0",ws={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{ws[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}});const ia={};ws.transitional=function(t,i,r){function s(a,l){return"[Axios v"+Fa+"] Transitional option '"+a+"'"+l+(r?". "+r:"")}return(a,l,f)=>{if(t===!1)throw new Me(s(l," has been removed"+(i?" in "+i:"")),Me.ERR_DEPRECATED);return i&&!ia[l]&&(ia[l]=!0,console.warn(s(l," has been deprecated since v"+i+" and will be removed in the near future"))),t?t(a,l,f):!0}};function zc(e,t,i){if(typeof e!="object")throw new Me("options must be an object",Me.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let s=r.length;for(;s-- >0;){const a=r[s],l=t[a];if(l){const f=e[a],w=f===void 0||l(f,a,e);if(w!==!0)throw new Me("option "+a+" must be "+w,Me.ERR_BAD_OPTION_VALUE);continue}if(i!==!0)throw new Me("Unknown option "+a,Me.ERR_BAD_OPTION)}}const Wo={assertOptions:zc,validators:ws},Rn=Wo.validators;class Wr{constructor(t){this.defaults=t,this.interceptors={request:new Qs,response:new Qs}}request(t,i){typeof t=="string"?(i=i||{},i.url=t):i=t||{},i=Ni(this.defaults,i);const{transitional:r,paramsSerializer:s,headers:a}=i;r!==void 0&&Wo.assertOptions(r,{silentJSONParsing:Rn.transitional(Rn.boolean),forcedJSONParsing:Rn.transitional(Rn.boolean),clarifyTimeoutError:Rn.transitional(Rn.boolean)},!1),s!=null&&(V.isFunction(s)?i.paramsSerializer={serialize:s}:Wo.assertOptions(s,{encode:Rn.function,serialize:Rn.function},!0)),i.method=(i.method||this.defaults.method||"get").toLowerCase();let l;l=a&&V.merge(a.common,a[i.method]),l&&V.forEach(["delete","get","head","post","put","patch","common"],T=>{delete a[T]}),i.headers=Sn.concat(l,a);const f=[];let w=!0;this.interceptors.request.forEach(function(L){typeof L.runWhen=="function"&&L.runWhen(i)===!1||(w=w&&L.synchronous,f.unshift(L.fulfilled,L.rejected))});const b=[];this.interceptors.response.forEach(function(L){b.push(L.fulfilled,L.rejected)});let S,H=0,M;if(!w){const T=[ta.bind(this),void 0];for(T.unshift.apply(T,f),T.push.apply(T,b),M=T.length,S=Promise.resolve(i);H<M;)S=S.then(T[H++],T[H++]);return S}M=f.length;let A=i;for(H=0;H<M;){const T=f[H++],L=f[H++];try{A=T(A)}catch(I){L.call(this,I);break}}try{S=ta.call(this,A)}catch(T){return Promise.reject(T)}for(H=0,M=b.length;H<M;)S=S.then(b[H++],b[H++]);return S}getUri(t){t=Ni(this.defaults,t);const i=ja(t.baseURL,t.url);return Ha(i,t.params,t.paramsSerializer)}}V.forEach(["delete","get","head","options"],function(t){Wr.prototype[t]=function(i,r){return this.request(Ni(r||{},{method:t,url:i,data:(r||{}).data}))}});V.forEach(["post","put","patch"],function(t){function i(r){return function(a,l,f){return this.request(Ni(f||{},{method:t,headers:r?{"Content-Type":"multipart/form-data"}:{},url:a,data:l}))}}Wr.prototype[t]=i(),Wr.prototype[t+"Form"]=i(!0)});const zr=Wr;class ys{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let i;this.promise=new Promise(function(a){i=a});const r=this;this.promise.then(s=>{if(!r._listeners)return;let a=r._listeners.length;for(;a-- >0;)r._listeners[a](s);r._listeners=null}),this.promise.then=s=>{let a;const l=new Promise(f=>{r.subscribe(f),a=f}).then(s);return l.cancel=function(){r.unsubscribe(a)},l},t(function(a,l,f){r.reason||(r.reason=new dr(a,l,f),i(r.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const i=this._listeners.indexOf(t);i!==-1&&this._listeners.splice(i,1)}static source(){let t;return{token:new ys(function(s){t=s}),cancel:t}}}const qc=ys;function $c(e){return function(i){return e.apply(null,i)}}function Wc(e){return V.isObject(e)&&e.isAxiosError===!0}const Vo={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Vo).forEach(([e,t])=>{Vo[t]=e});const Vc=Vo;function Ba(e){const t=new zr(e),i=_a(zr.prototype.request,t);return V.extend(i,zr.prototype,t,{allOwnKeys:!0}),V.extend(i,t,null,{allOwnKeys:!0}),i.create=function(s){return Ba(Ni(e,s))},i}const ut=Ba(vs);ut.Axios=zr;ut.CanceledError=dr;ut.CancelToken=qc;ut.isCancel=Ia;ut.VERSION=Fa;ut.toFormData=no;ut.AxiosError=Me;ut.Cancel=ut.CanceledError;ut.all=function(t){return Promise.all(t)};ut.spread=$c;ut.isAxiosError=Wc;ut.mergeConfig=Ni;ut.AxiosHeaders=Sn;ut.formToJSON=e=>Ra(V.isHTMLForm(e)?new FormData(e):e);ut.HttpStatusCode=Vc;ut.default=ut;const Vr=ut;class mn{static extend(){const t={};let i=!1,r=0;const s=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(i=arguments[0],r++);const a=function(l){for(const f in l)Object.prototype.hasOwnProperty.call(l,f)&&(i&&Object.prototype.toString.call(l[f])==="[object Object]"?t[f]=mn.extend(!0,t[f],l[f]):t[f]=l[f])};for(;r<s;r++){const l=arguments[r];a(l)}return t}}var ui=function(e,t){var i=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(s,a){this.nodes=(a||document).querySelectorAll(s)},this.each=function(s){if(this.nodes)for(var a=0;a<this.nodes.length;a++)s.call(this.nodes[a],a);else this.node&&s.call(this.node,0);return this},this.encapsulate=function(){};var r=function(s,a){s&&(Array.isArray(s)?s.forEach(function(l){r(l,a)}):s instanceof ui?a.append(s):typeof s=="object"&&a.append(new ui(s)))};this.create=function(){var s=this.document.createElement(this.settings.tag);if(this.node=s,this.settings.encapsulate===!0){var a=this.settings.encapsulate===!0?"open":this.settings.encapsulate;s.attachShadow({mode:a})}this.nodes=[s],this.settings.content&&r(this.settings.content,this)},this._specialProps=function(s,a){if(s==="tooltip")return this.node.dataset[s]=a,!0},this.setProps=function(){for(var s in this.settings.props)if(s==="dataset")for(var a in this.settings.props[s])this.node.dataset[a]=this.settings.props[s][a];else if(s==="style")for(var l in this.settings.props[s])this.node.style[l]=this.settings.props[s][l];else{var f=this.settings.props[s];this._specialProps(s,f)||(this.node[s]=f)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(s,a){return typeof a=="number"&&this.__.cssNumber.indexOf(s)===-1&&(a=a+"px"),a},this.css=function(s,a){if(typeof s=="string")if(typeof a<"u"){var l=this._normalizeCSSValue(s,a);this.each(function(){this.style[s]=l})}else return this.document.defaultView.getComputedStyle(this.node)[s];if(typeof s=="object")for(var f in s)this.each(function(){this.style[f]=i._normalizeCSSValue(f,s[f])});return this},this.dataset=function(s,a){return typeof a>"u"?this._active()[s]:(this.each(function(){this.dataset[s]=a}),this)},this.attr=function(s,a){return typeof a>"u"?this._active()[s]:(this.each(function(){this.setAttribute(s,a)}),this)},this.val=function(s){return typeof s>"u"?this._active().value:(this.each(function(){this.value=s}),this)},this.prop=function(s,a){var l=this._active();return typeof a>"u"?l[s]:(l[s]!==a&&(l[s]=a,this.trigger("propChange",[s,a])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(s){var a=mw.element("#r"+new Date().getTime());return this.each(function(){for(var l=this.querySelectorAll(s),f=0;f<l.length;f++)a.nodes.indexOf(l[f])===-1&&a.nodes.push(l[f])}),a},this.addClass=function(s){return s=s.trim().split(" "),this.each(function(){var a=this;s.forEach(function(l){a.classList.add(l)})})},this.toggleClass=function(s){return this.each(function(){this.classList.toggle(s.trim())})},this.removeClass=function(s){var a=Array.isArray(s);if(a)return this.each(function(){for(var f=0,w=s.length;f<w;f++)this.classList.remove(s[f])});s=s.trim();var l=s.split(" ");return l.length>1?this.removeClass(l):this.each(function(){this.classList.remove(s)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(s){return typeof s>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=s})},this.text=function(s,a){if(typeof s>"u")return this.node.textContent;typeof a>"u"&&(a=!0),a&&(s=this.document.createRange().createContextualFragment(s).textContent),this.node.innerHTML=s},this._asdom=function(s){return typeof s=="string"?this.document.createRange().createContextualFragment(s):s.node?s.node:s.nodes?s.nodes[s.nodes.length-1]:s},this.offset=function(){var s=this._active(),a=this.getWindow(),l=s.getBoundingClientRect();return l.offsetTop=l.top+a.pageYOffset,l.offsetBottom=l.bottom+a.pageYOffset,l.offsetLeft=l.left+a.pageXOffset,l},this.width=function(s){return s?this.css("width",s):this._active().offsetWidth},this.height=function(s){return s?this.css("height",s):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(s){s=s||"*";var a=this._active(),l=a.parentElement,f=mw.element();for(f.nodes=[];l;)l.matches(s)&&f.nodes.push(l),l=l.parentElement;return f},this.append=function(s){return s&&this.each(function(){this.append(i._asdom(s))}),this},this.before=function(s){return s&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(i._asdom(s),this)}),this},this.after=function(s){s&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(i._asdom(s),this.nextSibling)})},this.prepend=function(s){return s&&this.each(function(){this.prepend(i._asdom(s))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(s){this._disabled=s,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(s,a){return a=a||{},this.each(function(){this.dispatchEvent(new CustomEvent(s,{detail:a,cancelable:!0,bubbles:!0})),i._on[s]&&i._on[s].forEach(function(l){l.call(this,s,a)})}),this},this.get=function(s){return this.nodes[s]},this.wrap=function(s){var a=bs(s);this.before(a),a.append(this)},this._on={},this.on=function(s,a){return s=s.trim().split(" "),s.forEach(function(l){i._on[l]||(i._on[l]=[]),i._on[l].push(a),i.each(function(){this.addEventListener(l,a,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=t||document,this.root instanceof ui&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,e=e||{},e.nodeName&&e.nodeType)this.nodes.push(e),this.node=e,e={},this._asElement=!0;else if(typeof e=="string")if(e.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(e)),e={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof ui)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new ui(this.settings.content));else{var s=this._asdom(e);this.nodes=[].slice.call(s.children),this._asElement=!0}e=e||{};var a={tag:"div",props:{}};this.settings=mn.extend({},a,e),!this._asElement&&(this.create(),this.setProps())},this.init()};const bs=function(e,t){return new ui(e,t)};bs.module=function(e,t){ui.prototype[e]=t};const Uo="mw-le-element";window.customElements&&!customElements.get(Uo)&&customElements.define(Uo,class extends HTMLElement{constructor(){super()}});const Ee=(e,t)=>(e instanceof Object&&!e.nodeType&&(e=mn.extend({},e||{},{tag:e.tag||Uo})),bs(e,t));let er;const Mr=document.documentElement;Mr.matches?er="matches":Mr.matchesSelector?er="matchesSelector":Mr.mozMatchesSelector?er="mozMatchesSelector":Mr.webkitMatchesSelector&&(er="webkitMatchesSelector");class Xe{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(t,i){return t[er](i)}static isBlockLevel(t){if(!t||t.nodeType===3)return!1;var i=t.nodeName;if(typeof this._isBlockCache[i]<"u")return this._isBlockCache[i];var r=document.createElement(i);return this.fragment().appendChild(r),this._isBlockCache[i]=getComputedStyle(r).display==="block",this.fragment().removeChild(r),this._isBlockCache[i]}static firstBlockLevel(t){for(;t&&t.classList;){if(this.isBlockLevel(t))return t;t=t.parentNode}}static firstWithBackgroundImage(t){if(!t)return null;for(;t&&t.nodeName!=="BODY";){if(t.style.backgroundImage)return t;t=t.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(t,i){for(;t&&t.nodeName!=="BODY";){let r=0,s=i.length;for(;r<s;r++)if(t.classList.contains(i[r]))return!0;t=t.parentElement}return!1}static hasParentsWithClass(t,i){if(t){for(var r=t.parentNode;r&&r.nodeName!=="BODY";){if(r.classList.contains(i))return!0;r=r.parentNode}return!1}}static hasParentWithId(t,i){if(t){for(var r=t.parentNode;r&&r.nodeName!=="BODY";){if(r.id===i)return!0;r=r.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(t,i){for(;t&&t.nodeName!=="BODY";){let r=0,s=i.length;for(;r<s;r++)if(t.classList.contains(i[r]))return t;t=t.parentElement}return null}static firstParentOrCurrentWithTag(t,i){if(!(!t||!i)){i=typeof i!="string"?i:[i];for(var r=t;r&&r.nodeName!=="BODY";){if(i.indexOf(r.nodeName.toLowerCase())!==-1)return r;r=r.parentNode}return!1}}static index(t,i,r){r=r||t.tagName.toLowerCase(),i=i||t.parentNode;var s;i.constructor===[].constructor?s=i:s=i.querySelectorAll(r);for(var a=0,l=s.length;a<l;a++)if(t===s[a])return a}static firstParentOrCurrentWithClass(t,i){if(!t)return!1;for(var r=t;r&&r.nodeName!=="BODY";){if(r.classList.contains(i))return r;r=r.parentNode}return!1}static firstParentOrCurrent(t,i){if(!t)return!1;for(var r=t;r&&r.nodeName!=="BODY";){if(r.matches(i))return r;r=r.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(t,i){if(!t)return!1;for(var r=t;r&&r.nodeName!=="BODY";){if(!r)return!1;if(this.hasAnyOfClasses(r,i))return r;r=r.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(t,i){let r=t;for(;r&&r.nodeName!=="BODY";){const s=r.classList.contains(i[0]),a=r.classList.contains(i[1]);if(s&&a)return!1;if(s)return!0;if(a)return!1;r=r.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,i){let r=t;for(;r&&r.nodeName!=="BODY";){const s=r.classList.contains(i[0]),a=r.classList.contains(i[1]);if(s&&a)return!1;if(s)return!0;if(a)return!1;r=r.parentNode}return!0}static hasAnyOfClasses(t,i){if(!t)return;let r=0,s=i.length;for(;r<s;r++)if(t.classList.contains(i[r]))return!0;return!1}static offset(t){if(t){var i=t.getBoundingClientRect(),r={top:i.top,left:i.left,width:i.width,height:i.height,bottom:i.bottom,right:i.right};return r.top+=t.ownerDocument.defaultView.scrollY,r.bottom+=t.ownerDocument.defaultView.scrollY,r.left+=t.ownerDocument.defaultView.scrollX,r.right+=t.ownerDocument.defaultView.scrollX,r}}static parentsOrder(t,i){for(var r=[],s={},a=i.length,l=0,f=-1;l<a;l++)s[i[l]]=-1;if(!t)return s;for(var w=t.parentNode;w&&w.nodeName!=="BODY";){for(f++,l=0;l<a;l++)w.classList.contains(i[l])&&r.indexOf(i[l])===-1&&(s[i[l]]=f,r.push(i[l]));w=w.parentNode}return s}}xt(Xe,"_isBlockCache",{}),xt(Xe,"_fragment");class Uc{constructor(t){this.settings=t,this.tools=Xe}isRow(t){return t.classList.contains(this.settings.rowClass)}isModule(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type!=="layouts"}isLayout(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts"}isInLayout(t){if(!t)return!1;for(t=t.parentNode;t&&t!==this.settings.document.body;){if(t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts")return!0;t=t.parentNode}}isElement(t){return t.classList.contains(this.settings.elementClass)}isEmptyElement(t){return t.classList.contains(this.settings.emptyElementClass)}isEdit(t){return t.classList.contains(this.settings.editClass)}isInEdit(t){var i=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t.parentNode,i)}isEditOrInEdit(t){return this.isEdit(t)||this.isInEdit(t)}isPlainText(t){return t.classList.contains(this.settings.plainElementClass)}getType(t){if(this.isEdit(t))return"edit";if(this.isElement(t))return"element";if(this.isModule(t))return"module";if(this.isLayout(t))return"layout"}}class za extends Uc{constructor(t){super(t),this.settings=t,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM","DD"],this.init()}isConfigurable(t){return this.isElement(t)||this.isModule(t)||this.isRow(t)}isEditableLayout(t){return this.this.isLayout(t)&&this.isInEdit(t)}canMoveModule(t){return this.isModule(t)&&this.isInEdit(t)}canAcceptByClass(t){return this.tools.hasAnyOfClasses(t,this.dropableElements())}canAcceptByTag(t){return!t||t.nodeType!==1?!1:this._tagsCanAccept.indexOf(t.nodeName)!==-1}allowDrop(t){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(t){return this.canAccept(t.parentNode)}canAccept(t){return!!(this.canAcceptByClass(t)&&this.isEditOrInEdit(t)&&this.allowDrop(t))}canReceiveElements(t){return this.isEdit(t)&&this.canAcceptByTag(t)}dropableElements(){return this._dropableElements}getIteractionTarget(t){return this.tools.firstWithAyOfClassesOnNodeOrParent(t,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(t,i){const r=this.getIteractionTarget(t);if(!r||!this.isEditOrInEdit(t)||!this.allowDrop(t))return null;const s={target:r,canInsert:!1,beforeAfter:!1};var a=this.settings.strictLayouts&&this.isLayout(i),l=this.settings.strict&&!this.isLayout(i)&&!this.isInLayout(r);if(l)return null;if(this.isEdit(r))s.canInsert=!a;else if(this.isElement(r)&&!a)this.canAcceptByTag(r)&&(s.canInsert=!a),s.beforeAfter=!0;else if(this.isModule(r)&&!a)if(this.canInsertBeforeOrAfter(r))s.beforeAfter=!0;else return null;else if(this.isLayout(r))if(this.canInsertBeforeOrAfter(r))s.beforeAfter=!0;else return null;return s}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let Yc=-1;const Xc=(e,t)=>{if(!e||!t)return!1;const i=t.target;if(!i||i.nodeType!==1)return!1;e.pageX;const r=e.pageY,s=Xe.offset(i),a={},l=15;if(Yc===r||!t||!t.canInsert&&!t.beforeAfter)return!1;if(t.canInsert&&t.beforeAfter)if(r>=s.top-l&&r<=s.top+l)a.position="top",a.action="before";else if(r>=s.top+l&&r<=s.top+s.height/2)a.position="top",a.action="prepend";else if(r>=s.top+s.height/2&&r<=s.bottom-l)a.position="bottom",a.action="append";else if(r>=s.top+s.height/2&&r>=s.bottom-l)a.position="bottom",a.action="after";else return!1;else if(t.beforeAfter)if(r>=s.top-l&&r<=s.top+s.height/2)a.position="top",a.action="before";else if(r>=s.top+s.height/2&&r<=s.bottom+l)a.position="bottom",a.action="after";else return!1;else if(t.canInsert)if(r>=s.top-l&&r<=s.top+s.height/2)a.position="top",a.action="prepend";else if(r>=s.top+s.height/2&&r<=s.bottom+l)a.position="bottom",a.action="append";else return!1;return a},Kc=function(e,t){var i={handle:null,element:null,document,helper:!0},r=this,s={};this.on=function(l,f){s[l]?s[l].push(f):s[l]=[f]},this.dispatch=function(l,f){s[l]&&s[l].forEach(function(w){w.call(this,f)})};var a=function(l){r.settings.document.body.style.scrollBehavior="smooth",r.settings.document.defaultView.scrollTo(0,r.settings.document.defaultView.scrollY+l),r.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=mn.extend({},i,e),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(l){this.element=Ee(l).get(0),this.handleInit()},this.setTargets=function(l){this.targets=Ee(l)},this.addTarget=function(l){this.targets.push(l)},this.init=function(){this.config(),this.draggable()},this.$data={},this.helper=function(l,f){if(this._helper||(this._helper=Ee().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),l==="create"){var w=Ee(r.element).offset();this.$data._calcMinus={y:f.pageY-w.offsetTop,x:f.pageX-w.offsetLeft},this._helper.style.top=l.pageY+"px",this._helper.style.left=l.pageX+"px",this._helper.style.width=r.element.offsetWidth+"px",this._helper.style.height=r.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"}else l==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&l&&(this._helper.style.top=l.pageY-this.$data._calcMinus.y+"px",this._helper.style.left=l.pageX-this.$data._calcMinus.x+"px",this.settings.document.documentElement.classList.add("le-dragging"));return this._helper.$$element!==r.element&&(this._helper.$$element=r.element,this._helper.innerHTML=r.element.outerHTML),this._helper},this.isDragging=!1,this.dropableService=new za(t),this.dropPosition=Xc,this.draggable=function(){Ee(this.settings.target).on("dragleave",function(l){r.dropIndicator&&r.dropIndicator.hide()}),Ee(this.settings.target).on("dragover",function(l){if(r.target=null,r.action=null,l.target!==r.element||!r.element.contains(l.target)){var f=r.dropableService.getTarget(l.target,r.element);if(f&&f!==r.element){const w=r.dropPosition(l,f);w?(r.target=f.target,r.action=w.action,r.dropIndicator&&r.dropIndicator.position(r.target,w.action+"-"+w.position)):r.dropIndicator&&r.dropIndicator.hide()}else r.dropIndicator&&r.dropIndicator.hide();r.isDragging&&(r.dispatch("dragOver",{element:r.element,event:l}),l.preventDefault())}}).on("drop",function(l){r.isDragging&&(l.preventDefault(),r.target&&r.action&&Ee(r.target)[r.action](r.element),r.dropIndicator&&r.dropIndicator.hide(),r.dispatch("drop",{element:r.element,event:l})),r.dropIndicator&&r.dropIndicator.hide()}),this.handleInit()},this.handleInit=function(){this.settings.handle||(this.settings.handle=this.settings.element),this.handle=Ee(this.settings.handle,this.settings.document),this.handle.attr("draggable","true");var l=this.handle.get(0);l&&!l.$handleInit&&l.parentElement&&(l.$handleInit=!0,this.handle.attr("draggable","true"),this.handle.on("dragstart",function(f){r.isDragging=!0,r.element.id||(r.element.id="mw-element-"+new Date().getTime()),r.element.classList.add("mw-element-is-dragged"),f.dataTransfer.setData("text",r.element.id),f.dataTransfer.effectAllowed="move",r.helper("create",f),r.dispatch("dragStart",{element:r.element,event:f})}).on("drag",function(f){var w=90,b=5;f.clientY<w&&a(-b),f.clientY>innerHeight-(w+(this._helper?this._helper.offsetHeight+10:0))&&a(b),f.dataTransfer.dropEffect="copy",r.dispatch("drag",{element:r.element,event:f}),r.helper(f)}).on("dragend",function(f){r.isDragging=!1,r.element.classList.remove("mw-element-is-dragged"),r.helper("remove"),r.dispatch("dragEnd",{element:r.element,event:f})}))},this.init()};var jn,Ai,Oi;class qa{constructor(t={}){xt(this,"x",0);xt(this,"y",0);xt(this,"w",0);xt(this,"h",0);xt(this,"listeners",{});At(this,jn,{});xt(this,"activeHandle",null);xt(this,"handles",{});At(this,Ai,!1);At(this,Oi,!0);const i={element:null,document,maxHeight:null,maxWidth:null};this.settings=Object.assign({},i,t),this.element=this.settings.element,this.document=this.settings.document,this.element.classList.add("mw-le-resizable")}on(t,i){ve(this,jn)[t]?ve(this,jn)[t].push(i):ve(this,jn)[t]=[i]}dispatch(t,i){ve(this,jn)[t]&&ve(this,jn)[t].forEach(r=>{r.call(this,i)})}mouseMoveHandler(t){const i=t.clientX-this.x,r=t.clientY-this.y;let s=this.h+r,a;this.activeHandle===this.handles.left?a=this.w-i:a=this.w+i,this.settings.maxWidth&&(a=Math.min(a,this.settings.maxWidth)),this.settings.maxHeight&&(s=Math.min(s,this.settings.maxHeight)),this.element.style.width=`${a}px`,this.element.style.height=`${s}px`,t.preventDefault(),this.dispatch("resize",{height:this.element.offsetHeight,width:this.element.offsetWidth})}mouseUpHandler(){for(const t in this.listeners)this.document.removeEventListener(t,this.listeners[t]);this.listeners={},this.activeHandle=null,this.dispatch("resizeStop")}mouseDownHandler(t){this.x=t.clientX,this.y=t.clientY;const i=this.document.defaultView.getComputedStyle(this.element);this.w=parseInt(i.width,10),this.h=parseInt(i.height,10),this.listeners.mousemove=r=>this.mouseMoveHandler(r),this.listeners.mouseup=r=>this.mouseUpHandler(r);for(const r in this.listeners)this.document.addEventListener(r,this.listeners[r]);this.dispatch("resizeStart")}disable(){Si(this,Ai,!0),Si(this,Oi,!1),this.element.classList.add("mw-le-resizable-disabled")}enable(){Si(this,Ai,!1),Si(this,Oi,!0),this.element.classList.remove("mw-le-resizable-disabled")}disabled(){return ve(this,Ai)}enabled(){return ve(this,Oi)}build(){const t=this.document.createElement("span"),i=this.document.createElement("span"),r=this.document.createElement("span"),s=this.document.createElement("span");this.handles.top=t,this.handles.right=i,this.handles.bottom=r,this.handles.left=s,t.className="mw-le-resizer mw-le-resizer-t",i.className="mw-le-resizer mw-le-resizer-r",s.className="mw-le-resizer mw-le-resizer-l",r.className="mw-le-resizer mw-le-resizer-b",this.element.appendChild(t),this.element.appendChild(i),this.element.appendChild(r),this.element.appendChild(s)}mount(){if(!this.element)return this;if(this.element.dataset.resizable)return this;this.element.dataset.resizable=!0,this.build();const t=this.element.querySelectorAll(".mw-le-resizer");return Array.from(t).forEach(i=>{i.addEventListener("mousedown",r=>{this.mouseDownHandler(r),this.activeHandle=i})}),this.dispatch("ready",{height:this.element.offsetHeight,width:this.element.offsetWidth}),this}}jn=new WeakMap,Ai=new WeakMap,Oi=new WeakMap;globalThis.Resizable=qa;var Gc={exports:{}};/*!
 * jQuery JavaScript Library v3.7.0
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-05-11T18:29Z
 */(function(e){(function(t,i){e.exports=t.document?i(t,!0):function(r){if(!r.document)throw new Error("jQuery requires a window with a document");return i(r)}})(typeof window<"u"?window:xa,function(t,i){var r=[],s=Object.getPrototypeOf,a=r.slice,l=r.flat?function(n){return r.flat.call(n)}:function(n){return r.concat.apply([],n)},f=r.push,w=r.indexOf,b={},S=b.toString,H=b.hasOwnProperty,M=H.toString,A=M.call(Object),T={},L=function(o){return typeof o=="function"&&typeof o.nodeType!="number"&&typeof o.item!="function"},I=function(o){return o!=null&&o===o.window},D=t.document,le={type:!0,src:!0,nonce:!0,noModule:!0};function we(n,o,u){u=u||D;var d,p,m=u.createElement("script");if(m.text=n,o)for(d in le)p=o[d]||o.getAttribute&&o.getAttribute(d),p&&m.setAttribute(d,p);u.head.appendChild(m).parentNode.removeChild(m)}function de(n){return n==null?n+"":typeof n=="object"||typeof n=="function"?b[S.call(n)]||"object":typeof n}var Ce="3.7.0",U=/HTML$/i,c=function(n,o){return new c.fn.init(n,o)};c.fn=c.prototype={jquery:Ce,constructor:c,length:0,toArray:function(){return a.call(this)},get:function(n){return n==null?a.call(this):n<0?this[n+this.length]:this[n]},pushStack:function(n){var o=c.merge(this.constructor(),n);return o.prevObject=this,o},each:function(n){return c.each(this,n)},map:function(n){return this.pushStack(c.map(this,function(o,u){return n.call(o,u,o)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(c.grep(this,function(n,o){return(o+1)%2}))},odd:function(){return this.pushStack(c.grep(this,function(n,o){return o%2}))},eq:function(n){var o=this.length,u=+n+(n<0?o:0);return this.pushStack(u>=0&&u<o?[this[u]]:[])},end:function(){return this.prevObject||this.constructor()},push:f,sort:r.sort,splice:r.splice},c.extend=c.fn.extend=function(){var n,o,u,d,p,m,g=arguments[0]||{},C=1,_=arguments.length,N=!1;for(typeof g=="boolean"&&(N=g,g=arguments[C]||{},C++),typeof g!="object"&&!L(g)&&(g={}),C===_&&(g=this,C--);C<_;C++)if((n=arguments[C])!=null)for(o in n)d=n[o],!(o==="__proto__"||g===d)&&(N&&d&&(c.isPlainObject(d)||(p=Array.isArray(d)))?(u=g[o],p&&!Array.isArray(u)?m=[]:!p&&!c.isPlainObject(u)?m={}:m=u,p=!1,g[o]=c.extend(N,m,d)):d!==void 0&&(g[o]=d));return g},c.extend({expando:"jQuery"+(Ce+Math.random()).replace(/\D/g,""),isReady:!0,error:function(n){throw new Error(n)},noop:function(){},isPlainObject:function(n){var o,u;return!n||S.call(n)!=="[object Object]"?!1:(o=s(n),o?(u=H.call(o,"constructor")&&o.constructor,typeof u=="function"&&M.call(u)===A):!0)},isEmptyObject:function(n){var o;for(o in n)return!1;return!0},globalEval:function(n,o,u){we(n,{nonce:o&&o.nonce},u)},each:function(n,o){var u,d=0;if(ie(n))for(u=n.length;d<u&&o.call(n[d],d,n[d])!==!1;d++);else for(d in n)if(o.call(n[d],d,n[d])===!1)break;return n},text:function(n){var o,u="",d=0,p=n.nodeType;if(p){if(p===1||p===9||p===11)return n.textContent;if(p===3||p===4)return n.nodeValue}else for(;o=n[d++];)u+=c.text(o);return u},makeArray:function(n,o){var u=o||[];return n!=null&&(ie(Object(n))?c.merge(u,typeof n=="string"?[n]:n):f.call(u,n)),u},inArray:function(n,o,u){return o==null?-1:w.call(o,n,u)},isXMLDoc:function(n){var o=n&&n.namespaceURI,u=n&&(n.ownerDocument||n).documentElement;return!U.test(o||u&&u.nodeName||"HTML")},merge:function(n,o){for(var u=+o.length,d=0,p=n.length;d<u;d++)n[p++]=o[d];return n.length=p,n},grep:function(n,o,u){for(var d,p=[],m=0,g=n.length,C=!u;m<g;m++)d=!o(n[m],m),d!==C&&p.push(n[m]);return p},map:function(n,o,u){var d,p,m=0,g=[];if(ie(n))for(d=n.length;m<d;m++)p=o(n[m],m,u),p!=null&&g.push(p);else for(m in n)p=o(n[m],m,u),p!=null&&g.push(p);return l(g)},guid:1,support:T}),typeof Symbol=="function"&&(c.fn[Symbol.iterator]=r[Symbol.iterator]),c.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(n,o){b["[object "+o+"]"]=o.toLowerCase()});function ie(n){var o=!!n&&"length"in n&&n.length,u=de(n);return L(n)||I(n)?!1:u==="array"||o===0||typeof o=="number"&&o>0&&o-1 in n}function ue(n,o){return n.nodeName&&n.nodeName.toLowerCase()===o.toLowerCase()}var Ne=r.pop,Z=r.sort,K=r.splice,ee="[\\x20\\t\\r\\n\\f]",se=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g");c.contains=function(n,o){var u=o&&o.parentNode;return n===u||!!(u&&u.nodeType===1&&(n.contains?n.contains(u):n.compareDocumentPosition&&n.compareDocumentPosition(u)&16))};var _e=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function Qe(n,o){return o?n==="\0"?"�":n.slice(0,-1)+"\\"+n.charCodeAt(n.length-1).toString(16)+" ":"\\"+n}c.escapeSelector=function(n){return(n+"").replace(_e,Qe)};var it=D,rt=f;(function(){var n,o,u,d,p,m=rt,g,C,_,N,B,W=c.expando,R=0,X=0,ge=Or(),ke=Or(),Se=Or(),vt=Or(),lt=function(x,O){return x===O&&(p=!0),0},an="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ln="(?:\\\\[\\da-fA-F]{1,6}"+ee+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",Oe="\\["+ee+"*("+ln+")(?:"+ee+"*([*^$|!~]?=)"+ee+`*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(`+ln+"))|)"+ee+"*\\]",si=":("+ln+`)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|`+Oe+")*)|.*)\\)|)",De=new RegExp(ee+"+","g"),tt=new RegExp("^"+ee+"*,"+ee+"*"),Xi=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),So=new RegExp(ee+"|>"),un=new RegExp(si),Ki=new RegExp("^"+ln+"$"),cn={ID:new RegExp("^#("+ln+")"),CLASS:new RegExp("^\\.("+ln+")"),TAG:new RegExp("^("+ln+"|[*])"),ATTR:new RegExp("^"+Oe),PSEUDO:new RegExp("^"+si),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+an+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},Mn=/^(?:input|select|textarea|button)$/i,Hn=/^h\d$/i,jt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,To=/[+~]/,_n=new RegExp("\\\\[\\da-fA-F]{1,6}"+ee+"?|\\\\([^\\r\\n\\f])","g"),En=function(x,O){var P="0x"+x.slice(1)-65536;return O||(P<0?String.fromCharCode(P+65536):String.fromCharCode(P>>10|55296,P&1023|56320))},yu=function(){Pn()},bu=Lr(function(x){return x.disabled===!0&&ue(x,"fieldset")},{dir:"parentNode",next:"legend"});function xu(){try{return g.activeElement}catch{}}try{m.apply(r=a.call(it.childNodes),it.childNodes),r[it.childNodes.length].nodeType}catch{m={apply:function(O,P){rt.apply(O,a.call(P))},call:function(O){rt.apply(O,a.call(arguments,1))}}}function qe(x,O,P,j){var q,Q,te,ae,ne,Te,me,ye=O&&O.ownerDocument,Ae=O?O.nodeType:9;if(P=P||[],typeof x!="string"||!x||Ae!==1&&Ae!==9&&Ae!==11)return P;if(!j&&(Pn(O),O=O||g,_)){if(Ae!==11&&(ne=jt.exec(x)))if(q=ne[1]){if(Ae===9)if(te=O.getElementById(q)){if(te.id===q)return m.call(P,te),P}else return P;else if(ye&&(te=ye.getElementById(q))&&qe.contains(O,te)&&te.id===q)return m.call(P,te),P}else{if(ne[2])return m.apply(P,O.getElementsByTagName(x)),P;if((q=ne[3])&&O.getElementsByClassName)return m.apply(P,O.getElementsByClassName(q)),P}if(!vt[x+" "]&&(!N||!N.test(x))){if(me=x,ye=O,Ae===1&&(So.test(x)||Xi.test(x))){for(ye=To.test(x)&&Ao(O.parentNode)||O,(ye!=O||!T.scope)&&((ae=O.getAttribute("id"))?ae=c.escapeSelector(ae):O.setAttribute("id",ae=W)),Te=Nr(x),Q=Te.length;Q--;)Te[Q]=(ae?"#"+ae:":scope")+" "+kr(Te[Q]);me=Te.join(",")}try{return m.apply(P,ye.querySelectorAll(me)),P}catch{vt(x,!0)}finally{ae===W&&O.removeAttribute("id")}}}return Ys(x.replace(se,"$1"),O,P,j)}function Or(){var x=[];function O(P,j){return x.push(P+" ")>o.cacheLength&&delete O[x.shift()],O[P+" "]=j}return O}function Gt(x){return x[W]=!0,x}function Ei(x){var O=g.createElement("fieldset");try{return!!x(O)}catch{return!1}finally{O.parentNode&&O.parentNode.removeChild(O),O=null}}function _u(x){return function(O){return ue(O,"input")&&O.type===x}}function Eu(x){return function(O){return(ue(O,"input")||ue(O,"button"))&&O.type===x}}function Vs(x){return function(O){return"form"in O?O.parentNode&&O.disabled===!1?"label"in O?"label"in O.parentNode?O.parentNode.disabled===x:O.disabled===x:O.isDisabled===x||O.isDisabled!==!x&&bu(O)===x:O.disabled===x:"label"in O?O.disabled===x:!1}}function ai(x){return Gt(function(O){return O=+O,Gt(function(P,j){for(var q,Q=x([],P.length,O),te=Q.length;te--;)P[q=Q[te]]&&(P[q]=!(j[q]=P[q]))})})}function Ao(x){return x&&typeof x.getElementsByTagName<"u"&&x}function Pn(x){var O,P=x?x.ownerDocument||x:it;return P==g||P.nodeType!==9||!P.documentElement||(g=P,C=g.documentElement,_=!c.isXMLDoc(g),B=C.matches||C.webkitMatchesSelector||C.msMatchesSelector,it!=g&&(O=g.defaultView)&&O.top!==O&&O.addEventListener("unload",yu),T.getById=Ei(function(j){return C.appendChild(j).id=c.expando,!g.getElementsByName||!g.getElementsByName(c.expando).length}),T.disconnectedMatch=Ei(function(j){return B.call(j,"*")}),T.scope=Ei(function(){return g.querySelectorAll(":scope")}),T.cssHas=Ei(function(){try{return g.querySelector(":has(*,:jqfake)"),!1}catch{return!0}}),T.getById?(o.filter.ID=function(j){var q=j.replace(_n,En);return function(Q){return Q.getAttribute("id")===q}},o.find.ID=function(j,q){if(typeof q.getElementById<"u"&&_){var Q=q.getElementById(j);return Q?[Q]:[]}}):(o.filter.ID=function(j){var q=j.replace(_n,En);return function(Q){var te=typeof Q.getAttributeNode<"u"&&Q.getAttributeNode("id");return te&&te.value===q}},o.find.ID=function(j,q){if(typeof q.getElementById<"u"&&_){var Q,te,ae,ne=q.getElementById(j);if(ne){if(Q=ne.getAttributeNode("id"),Q&&Q.value===j)return[ne];for(ae=q.getElementsByName(j),te=0;ne=ae[te++];)if(Q=ne.getAttributeNode("id"),Q&&Q.value===j)return[ne]}return[]}}),o.find.TAG=function(j,q){return typeof q.getElementsByTagName<"u"?q.getElementsByTagName(j):q.querySelectorAll(j)},o.find.CLASS=function(j,q){if(typeof q.getElementsByClassName<"u"&&_)return q.getElementsByClassName(j)},N=[],Ei(function(j){var q;C.appendChild(j).innerHTML="<a id='"+W+"' href='' disabled='disabled'></a><select id='"+W+"-\r\\' disabled='disabled'><option selected=''></option></select>",j.querySelectorAll("[selected]").length||N.push("\\["+ee+"*(?:value|"+an+")"),j.querySelectorAll("[id~="+W+"-]").length||N.push("~="),j.querySelectorAll("a#"+W+"+*").length||N.push(".#.+[+~]"),j.querySelectorAll(":checked").length||N.push(":checked"),q=g.createElement("input"),q.setAttribute("type","hidden"),j.appendChild(q).setAttribute("name","D"),C.appendChild(j).disabled=!0,j.querySelectorAll(":disabled").length!==2&&N.push(":enabled",":disabled"),q=g.createElement("input"),q.setAttribute("name",""),j.appendChild(q),j.querySelectorAll("[name='']").length||N.push("\\["+ee+"*name"+ee+"*="+ee+`*(?:''|"")`)}),T.cssHas||N.push(":has"),N=N.length&&new RegExp(N.join("|")),lt=function(j,q){if(j===q)return p=!0,0;var Q=!j.compareDocumentPosition-!q.compareDocumentPosition;return Q||(Q=(j.ownerDocument||j)==(q.ownerDocument||q)?j.compareDocumentPosition(q):1,Q&1||!T.sortDetached&&q.compareDocumentPosition(j)===Q?j===g||j.ownerDocument==it&&qe.contains(it,j)?-1:q===g||q.ownerDocument==it&&qe.contains(it,q)?1:d?w.call(d,j)-w.call(d,q):0:Q&4?-1:1)}),g}qe.matches=function(x,O){return qe(x,null,null,O)},qe.matchesSelector=function(x,O){if(Pn(x),_&&!vt[O+" "]&&(!N||!N.test(O)))try{var P=B.call(x,O);if(P||T.disconnectedMatch||x.document&&x.document.nodeType!==11)return P}catch{vt(O,!0)}return qe(O,g,null,[x]).length>0},qe.contains=function(x,O){return(x.ownerDocument||x)!=g&&Pn(x),c.contains(x,O)},qe.attr=function(x,O){(x.ownerDocument||x)!=g&&Pn(x);var P=o.attrHandle[O.toLowerCase()],j=P&&H.call(o.attrHandle,O.toLowerCase())?P(x,O,!_):void 0;return j!==void 0?j:x.getAttribute(O)},qe.error=function(x){throw new Error("Syntax error, unrecognized expression: "+x)},c.uniqueSort=function(x){var O,P=[],j=0,q=0;if(p=!T.sortStable,d=!T.sortStable&&a.call(x,0),Z.call(x,lt),p){for(;O=x[q++];)O===x[q]&&(j=P.push(q));for(;j--;)K.call(x,P[j],1)}return d=null,x},c.fn.uniqueSort=function(){return this.pushStack(c.uniqueSort(a.apply(this)))},o=c.expr={cacheLength:50,createPseudo:Gt,match:cn,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(x){return x[1]=x[1].replace(_n,En),x[3]=(x[3]||x[4]||x[5]||"").replace(_n,En),x[2]==="~="&&(x[3]=" "+x[3]+" "),x.slice(0,4)},CHILD:function(x){return x[1]=x[1].toLowerCase(),x[1].slice(0,3)==="nth"?(x[3]||qe.error(x[0]),x[4]=+(x[4]?x[5]+(x[6]||1):2*(x[3]==="even"||x[3]==="odd")),x[5]=+(x[7]+x[8]||x[3]==="odd")):x[3]&&qe.error(x[0]),x},PSEUDO:function(x){var O,P=!x[6]&&x[2];return cn.CHILD.test(x[0])?null:(x[3]?x[2]=x[4]||x[5]||"":P&&un.test(P)&&(O=Nr(P,!0))&&(O=P.indexOf(")",P.length-O)-P.length)&&(x[0]=x[0].slice(0,O),x[2]=P.slice(0,O)),x.slice(0,3))}},filter:{TAG:function(x){var O=x.replace(_n,En).toLowerCase();return x==="*"?function(){return!0}:function(P){return ue(P,O)}},CLASS:function(x){var O=ge[x+" "];return O||(O=new RegExp("(^|"+ee+")"+x+"("+ee+"|$)"))&&ge(x,function(P){return O.test(typeof P.className=="string"&&P.className||typeof P.getAttribute<"u"&&P.getAttribute("class")||"")})},ATTR:function(x,O,P){return function(j){var q=qe.attr(j,x);return q==null?O==="!=":O?(q+="",O==="="?q===P:O==="!="?q!==P:O==="^="?P&&q.indexOf(P)===0:O==="*="?P&&q.indexOf(P)>-1:O==="$="?P&&q.slice(-P.length)===P:O==="~="?(" "+q.replace(De," ")+" ").indexOf(P)>-1:O==="|="?q===P||q.slice(0,P.length+1)===P+"-":!1):!0}},CHILD:function(x,O,P,j,q){var Q=x.slice(0,3)!=="nth",te=x.slice(-4)!=="last",ae=O==="of-type";return j===1&&q===0?function(ne){return!!ne.parentNode}:function(ne,Te,me){var ye,Ae,pe,Ye,Dt,bt=Q!==te?"nextSibling":"previousSibling",Ft=ne.parentNode,dn=ae&&ne.nodeName.toLowerCase(),Ci=!me&&!ae,Tt=!1;if(Ft){if(Q){for(;bt;){for(pe=ne;pe=pe[bt];)if(ae?ue(pe,dn):pe.nodeType===1)return!1;Dt=bt=x==="only"&&!Dt&&"nextSibling"}return!0}if(Dt=[te?Ft.firstChild:Ft.lastChild],te&&Ci){for(Ae=Ft[W]||(Ft[W]={}),ye=Ae[x]||[],Ye=ye[0]===R&&ye[1],Tt=Ye&&ye[2],pe=Ye&&Ft.childNodes[Ye];pe=++Ye&&pe&&pe[bt]||(Tt=Ye=0)||Dt.pop();)if(pe.nodeType===1&&++Tt&&pe===ne){Ae[x]=[R,Ye,Tt];break}}else if(Ci&&(Ae=ne[W]||(ne[W]={}),ye=Ae[x]||[],Ye=ye[0]===R&&ye[1],Tt=Ye),Tt===!1)for(;(pe=++Ye&&pe&&pe[bt]||(Tt=Ye=0)||Dt.pop())&&!((ae?ue(pe,dn):pe.nodeType===1)&&++Tt&&(Ci&&(Ae=pe[W]||(pe[W]={}),Ae[x]=[R,Tt]),pe===ne)););return Tt-=q,Tt===j||Tt%j===0&&Tt/j>=0}}},PSEUDO:function(x,O){var P,j=o.pseudos[x]||o.setFilters[x.toLowerCase()]||qe.error("unsupported pseudo: "+x);return j[W]?j(O):j.length>1?(P=[x,x,"",O],o.setFilters.hasOwnProperty(x.toLowerCase())?Gt(function(q,Q){for(var te,ae=j(q,O),ne=ae.length;ne--;)te=w.call(q,ae[ne]),q[te]=!(Q[te]=ae[ne])}):function(q){return j(q,0,P)}):j}},pseudos:{not:Gt(function(x){var O=[],P=[],j=Lo(x.replace(se,"$1"));return j[W]?Gt(function(q,Q,te,ae){for(var ne,Te=j(q,null,ae,[]),me=q.length;me--;)(ne=Te[me])&&(q[me]=!(Q[me]=ne))}):function(q,Q,te){return O[0]=q,j(O,null,te,P),O[0]=null,!P.pop()}}),has:Gt(function(x){return function(O){return qe(x,O).length>0}}),contains:Gt(function(x){return x=x.replace(_n,En),function(O){return(O.textContent||c.text(O)).indexOf(x)>-1}}),lang:Gt(function(x){return Ki.test(x||"")||qe.error("unsupported lang: "+x),x=x.replace(_n,En).toLowerCase(),function(O){var P;do if(P=_?O.lang:O.getAttribute("xml:lang")||O.getAttribute("lang"))return P=P.toLowerCase(),P===x||P.indexOf(x+"-")===0;while((O=O.parentNode)&&O.nodeType===1);return!1}}),target:function(x){var O=t.location&&t.location.hash;return O&&O.slice(1)===x.id},root:function(x){return x===C},focus:function(x){return x===xu()&&g.hasFocus()&&!!(x.type||x.href||~x.tabIndex)},enabled:Vs(!1),disabled:Vs(!0),checked:function(x){return ue(x,"input")&&!!x.checked||ue(x,"option")&&!!x.selected},selected:function(x){return x.parentNode&&x.parentNode.selectedIndex,x.selected===!0},empty:function(x){for(x=x.firstChild;x;x=x.nextSibling)if(x.nodeType<6)return!1;return!0},parent:function(x){return!o.pseudos.empty(x)},header:function(x){return Hn.test(x.nodeName)},input:function(x){return Mn.test(x.nodeName)},button:function(x){return ue(x,"input")&&x.type==="button"||ue(x,"button")},text:function(x){var O;return ue(x,"input")&&x.type==="text"&&((O=x.getAttribute("type"))==null||O.toLowerCase()==="text")},first:ai(function(){return[0]}),last:ai(function(x,O){return[O-1]}),eq:ai(function(x,O,P){return[P<0?P+O:P]}),even:ai(function(x,O){for(var P=0;P<O;P+=2)x.push(P);return x}),odd:ai(function(x,O){for(var P=1;P<O;P+=2)x.push(P);return x}),lt:ai(function(x,O,P){var j;for(P<0?j=P+O:P>O?j=O:j=P;--j>=0;)x.push(j);return x}),gt:ai(function(x,O,P){for(var j=P<0?P+O:P;++j<O;)x.push(j);return x})}},o.pseudos.nth=o.pseudos.eq;for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})o.pseudos[n]=_u(n);for(n in{submit:!0,reset:!0})o.pseudos[n]=Eu(n);function Us(){}Us.prototype=o.filters=o.pseudos,o.setFilters=new Us;function Nr(x,O){var P,j,q,Q,te,ae,ne,Te=ke[x+" "];if(Te)return O?0:Te.slice(0);for(te=x,ae=[],ne=o.preFilter;te;){(!P||(j=tt.exec(te)))&&(j&&(te=te.slice(j[0].length)||te),ae.push(q=[])),P=!1,(j=Xi.exec(te))&&(P=j.shift(),q.push({value:P,type:j[0].replace(se," ")}),te=te.slice(P.length));for(Q in o.filter)(j=cn[Q].exec(te))&&(!ne[Q]||(j=ne[Q](j)))&&(P=j.shift(),q.push({value:P,type:Q,matches:j}),te=te.slice(P.length));if(!P)break}return O?te.length:te?qe.error(x):ke(x,ae).slice(0)}function kr(x){for(var O=0,P=x.length,j="";O<P;O++)j+=x[O].value;return j}function Lr(x,O,P){var j=O.dir,q=O.next,Q=q||j,te=P&&Q==="parentNode",ae=X++;return O.first?function(ne,Te,me){for(;ne=ne[j];)if(ne.nodeType===1||te)return x(ne,Te,me);return!1}:function(ne,Te,me){var ye,Ae,pe=[R,ae];if(me){for(;ne=ne[j];)if((ne.nodeType===1||te)&&x(ne,Te,me))return!0}else for(;ne=ne[j];)if(ne.nodeType===1||te)if(Ae=ne[W]||(ne[W]={}),q&&ue(ne,q))ne=ne[j]||ne;else{if((ye=Ae[Q])&&ye[0]===R&&ye[1]===ae)return pe[2]=ye[2];if(Ae[Q]=pe,pe[2]=x(ne,Te,me))return!0}return!1}}function Oo(x){return x.length>1?function(O,P,j){for(var q=x.length;q--;)if(!x[q](O,P,j))return!1;return!0}:x[0]}function Cu(x,O,P){for(var j=0,q=O.length;j<q;j++)qe(x,O[j],P);return P}function Dr(x,O,P,j,q){for(var Q,te=[],ae=0,ne=x.length,Te=O!=null;ae<ne;ae++)(Q=x[ae])&&(!P||P(Q,j,q))&&(te.push(Q),Te&&O.push(ae));return te}function No(x,O,P,j,q,Q){return j&&!j[W]&&(j=No(j)),q&&!q[W]&&(q=No(q,Q)),Gt(function(te,ae,ne,Te){var me,ye,Ae,pe,Ye=[],Dt=[],bt=ae.length,Ft=te||Cu(O||"*",ne.nodeType?[ne]:ne,[]),dn=x&&(te||!O)?Dr(Ft,Ye,x,ne,Te):Ft;if(P?(pe=q||(te?x:bt||j)?[]:ae,P(dn,pe,ne,Te)):pe=dn,j)for(me=Dr(pe,Dt),j(me,[],ne,Te),ye=me.length;ye--;)(Ae=me[ye])&&(pe[Dt[ye]]=!(dn[Dt[ye]]=Ae));if(te){if(q||x){if(q){for(me=[],ye=pe.length;ye--;)(Ae=pe[ye])&&me.push(dn[ye]=Ae);q(null,pe=[],me,Te)}for(ye=pe.length;ye--;)(Ae=pe[ye])&&(me=q?w.call(te,Ae):Ye[ye])>-1&&(te[me]=!(ae[me]=Ae))}}else pe=Dr(pe===ae?pe.splice(bt,pe.length):pe),q?q(null,ae,pe,Te):m.apply(ae,pe)})}function ko(x){for(var O,P,j,q=x.length,Q=o.relative[x[0].type],te=Q||o.relative[" "],ae=Q?1:0,ne=Lr(function(ye){return ye===O},te,!0),Te=Lr(function(ye){return w.call(O,ye)>-1},te,!0),me=[function(ye,Ae,pe){var Ye=!Q&&(pe||Ae!=u)||((O=Ae).nodeType?ne(ye,Ae,pe):Te(ye,Ae,pe));return O=null,Ye}];ae<q;ae++)if(P=o.relative[x[ae].type])me=[Lr(Oo(me),P)];else{if(P=o.filter[x[ae].type].apply(null,x[ae].matches),P[W]){for(j=++ae;j<q&&!o.relative[x[j].type];j++);return No(ae>1&&Oo(me),ae>1&&kr(x.slice(0,ae-1).concat({value:x[ae-2].type===" "?"*":""})).replace(se,"$1"),P,ae<j&&ko(x.slice(ae,j)),j<q&&ko(x=x.slice(j)),j<q&&kr(x))}me.push(P)}return Oo(me)}function Su(x,O){var P=O.length>0,j=x.length>0,q=function(Q,te,ae,ne,Te){var me,ye,Ae,pe=0,Ye="0",Dt=Q&&[],bt=[],Ft=u,dn=Q||j&&o.find.TAG("*",Te),Ci=R+=Ft==null?1:Math.random()||.1,Tt=dn.length;for(Te&&(u=te==g||te||Te);Ye!==Tt&&(me=dn[Ye])!=null;Ye++){if(j&&me){for(ye=0,!te&&me.ownerDocument!=g&&(Pn(me),ae=!_);Ae=x[ye++];)if(Ae(me,te||g,ae)){m.call(ne,me);break}Te&&(R=Ci)}P&&((me=!Ae&&me)&&pe--,Q&&Dt.push(me))}if(pe+=Ye,P&&Ye!==pe){for(ye=0;Ae=O[ye++];)Ae(Dt,bt,te,ae);if(Q){if(pe>0)for(;Ye--;)Dt[Ye]||bt[Ye]||(bt[Ye]=Ne.call(ne));bt=Dr(bt)}m.apply(ne,bt),Te&&!Q&&bt.length>0&&pe+O.length>1&&c.uniqueSort(ne)}return Te&&(R=Ci,u=Ft),Dt};return P?Gt(q):q}function Lo(x,O){var P,j=[],q=[],Q=Se[x+" "];if(!Q){for(O||(O=Nr(x)),P=O.length;P--;)Q=ko(O[P]),Q[W]?j.push(Q):q.push(Q);Q=Se(x,Su(q,j)),Q.selector=x}return Q}function Ys(x,O,P,j){var q,Q,te,ae,ne,Te=typeof x=="function"&&x,me=!j&&Nr(x=Te.selector||x);if(P=P||[],me.length===1){if(Q=me[0]=me[0].slice(0),Q.length>2&&(te=Q[0]).type==="ID"&&O.nodeType===9&&_&&o.relative[Q[1].type]){if(O=(o.find.ID(te.matches[0].replace(_n,En),O)||[])[0],O)Te&&(O=O.parentNode);else return P;x=x.slice(Q.shift().value.length)}for(q=cn.needsContext.test(x)?0:Q.length;q--&&(te=Q[q],!o.relative[ae=te.type]);)if((ne=o.find[ae])&&(j=ne(te.matches[0].replace(_n,En),To.test(Q[0].type)&&Ao(O.parentNode)||O))){if(Q.splice(q,1),x=j.length&&kr(Q),!x)return m.apply(P,j),P;break}}return(Te||Lo(x,me))(j,O,!_,P,!O||To.test(x)&&Ao(O.parentNode)||O),P}T.sortStable=W.split("").sort(lt).join("")===W,Pn(),T.sortDetached=Ei(function(x){return x.compareDocumentPosition(g.createElement("fieldset"))&1}),c.find=qe,c.expr[":"]=c.expr.pseudos,c.unique=c.uniqueSort,qe.compile=Lo,qe.select=Ys,qe.setDocument=Pn,qe.escape=c.escapeSelector,qe.getText=c.text,qe.isXML=c.isXMLDoc,qe.selectors=c.expr,qe.support=c.support,qe.uniqueSort=c.uniqueSort})();var wt=function(n,o,u){for(var d=[],p=u!==void 0;(n=n[o])&&n.nodeType!==9;)if(n.nodeType===1){if(p&&c(n).is(u))break;d.push(n)}return d},$t=function(n,o){for(var u=[];n;n=n.nextSibling)n.nodeType===1&&n!==o&&u.push(n);return u},Ht=c.expr.match.needsContext,Wt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function yt(n,o,u){return L(o)?c.grep(n,function(d,p){return!!o.call(d,p,d)!==u}):o.nodeType?c.grep(n,function(d){return d===o!==u}):typeof o!="string"?c.grep(n,function(d){return w.call(o,d)>-1!==u}):c.filter(o,n,u)}c.filter=function(n,o,u){var d=o[0];return u&&(n=":not("+n+")"),o.length===1&&d.nodeType===1?c.find.matchesSelector(d,n)?[d]:[]:c.find.matches(n,c.grep(o,function(p){return p.nodeType===1}))},c.fn.extend({find:function(n){var o,u,d=this.length,p=this;if(typeof n!="string")return this.pushStack(c(n).filter(function(){for(o=0;o<d;o++)if(c.contains(p[o],this))return!0}));for(u=this.pushStack([]),o=0;o<d;o++)c.find(n,p[o],u);return d>1?c.uniqueSort(u):u},filter:function(n){return this.pushStack(yt(this,n||[],!1))},not:function(n){return this.pushStack(yt(this,n||[],!0))},is:function(n){return!!yt(this,typeof n=="string"&&Ht.test(n)?c(n):n||[],!1).length}});var ct,_t=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,We=c.fn.init=function(n,o,u){var d,p;if(!n)return this;if(u=u||ct,typeof n=="string")if(n[0]==="<"&&n[n.length-1]===">"&&n.length>=3?d=[null,n,null]:d=_t.exec(n),d&&(d[1]||!o))if(d[1]){if(o=o instanceof c?o[0]:o,c.merge(this,c.parseHTML(d[1],o&&o.nodeType?o.ownerDocument||o:D,!0)),Wt.test(d[1])&&c.isPlainObject(o))for(d in o)L(this[d])?this[d](o[d]):this.attr(d,o[d]);return this}else return p=D.getElementById(d[2]),p&&(this[0]=p,this.length=1),this;else return!o||o.jquery?(o||u).find(n):this.constructor(o).find(n);else{if(n.nodeType)return this[0]=n,this.length=1,this;if(L(n))return u.ready!==void 0?u.ready(n):n(c)}return c.makeArray(n,this)};We.prototype=c.fn,ct=c(D);var nt=/^(?:parents|prev(?:Until|All))/,Je={children:!0,contents:!0,next:!0,prev:!0};c.fn.extend({has:function(n){var o=c(n,this),u=o.length;return this.filter(function(){for(var d=0;d<u;d++)if(c.contains(this,o[d]))return!0})},closest:function(n,o){var u,d=0,p=this.length,m=[],g=typeof n!="string"&&c(n);if(!Ht.test(n)){for(;d<p;d++)for(u=this[d];u&&u!==o;u=u.parentNode)if(u.nodeType<11&&(g?g.index(u)>-1:u.nodeType===1&&c.find.matchesSelector(u,n))){m.push(u);break}}return this.pushStack(m.length>1?c.uniqueSort(m):m)},index:function(n){return n?typeof n=="string"?w.call(c(n),this[0]):w.call(this,n.jquery?n[0]:n):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(n,o){return this.pushStack(c.uniqueSort(c.merge(this.get(),c(n,o))))},addBack:function(n){return this.add(n==null?this.prevObject:this.prevObject.filter(n))}});function dt(n,o){for(;(n=n[o])&&n.nodeType!==1;);return n}c.each({parent:function(n){var o=n.parentNode;return o&&o.nodeType!==11?o:null},parents:function(n){return wt(n,"parentNode")},parentsUntil:function(n,o,u){return wt(n,"parentNode",u)},next:function(n){return dt(n,"nextSibling")},prev:function(n){return dt(n,"previousSibling")},nextAll:function(n){return wt(n,"nextSibling")},prevAll:function(n){return wt(n,"previousSibling")},nextUntil:function(n,o,u){return wt(n,"nextSibling",u)},prevUntil:function(n,o,u){return wt(n,"previousSibling",u)},siblings:function(n){return $t((n.parentNode||{}).firstChild,n)},children:function(n){return $t(n.firstChild)},contents:function(n){return n.contentDocument!=null&&s(n.contentDocument)?n.contentDocument:(ue(n,"template")&&(n=n.content||n),c.merge([],n.childNodes))}},function(n,o){c.fn[n]=function(u,d){var p=c.map(this,o,u);return n.slice(-5)!=="Until"&&(d=u),d&&typeof d=="string"&&(p=c.filter(d,p)),this.length>1&&(Je[n]||c.uniqueSort(p),nt.test(n)&&p.reverse()),this.pushStack(p)}});var Ve=/[^\x20\t\r\n\f]+/g;function Nt(n){var o={};return c.each(n.match(Ve)||[],function(u,d){o[d]=!0}),o}c.Callbacks=function(n){n=typeof n=="string"?Nt(n):c.extend({},n);var o,u,d,p,m=[],g=[],C=-1,_=function(){for(p=p||n.once,d=o=!0;g.length;C=-1)for(u=g.shift();++C<m.length;)m[C].apply(u[0],u[1])===!1&&n.stopOnFalse&&(C=m.length,u=!1);n.memory||(u=!1),o=!1,p&&(u?m=[]:m="")},N={add:function(){return m&&(u&&!o&&(C=m.length-1,g.push(u)),function B(W){c.each(W,function(R,X){L(X)?(!n.unique||!N.has(X))&&m.push(X):X&&X.length&&de(X)!=="string"&&B(X)})}(arguments),u&&!o&&_()),this},remove:function(){return c.each(arguments,function(B,W){for(var R;(R=c.inArray(W,m,R))>-1;)m.splice(R,1),R<=C&&C--}),this},has:function(B){return B?c.inArray(B,m)>-1:m.length>0},empty:function(){return m&&(m=[]),this},disable:function(){return p=g=[],m=u="",this},disabled:function(){return!m},lock:function(){return p=g=[],!u&&!o&&(m=u=""),this},locked:function(){return!!p},fireWith:function(B,W){return p||(W=W||[],W=[B,W.slice?W.slice():W],g.push(W),o||_()),this},fire:function(){return N.fireWith(this,arguments),this},fired:function(){return!!d}};return N};function Ze(n){return n}function je(n){throw n}function Le(n,o,u,d){var p;try{n&&L(p=n.promise)?p.call(n).done(o).fail(u):n&&L(p=n.then)?p.call(n,o,u):o.apply(void 0,[n].slice(d))}catch(m){u.apply(void 0,[m])}}c.extend({Deferred:function(n){var o=[["notify","progress",c.Callbacks("memory"),c.Callbacks("memory"),2],["resolve","done",c.Callbacks("once memory"),c.Callbacks("once memory"),0,"resolved"],["reject","fail",c.Callbacks("once memory"),c.Callbacks("once memory"),1,"rejected"]],u="pending",d={state:function(){return u},always:function(){return p.done(arguments).fail(arguments),this},catch:function(m){return d.then(null,m)},pipe:function(){var m=arguments;return c.Deferred(function(g){c.each(o,function(C,_){var N=L(m[_[4]])&&m[_[4]];p[_[1]](function(){var B=N&&N.apply(this,arguments);B&&L(B.promise)?B.promise().progress(g.notify).done(g.resolve).fail(g.reject):g[_[0]+"With"](this,N?[B]:arguments)})}),m=null}).promise()},then:function(m,g,C){var _=0;function N(B,W,R,X){return function(){var ge=this,ke=arguments,Se=function(){var lt,an;if(!(B<_)){if(lt=R.apply(ge,ke),lt===W.promise())throw new TypeError("Thenable self-resolution");an=lt&&(typeof lt=="object"||typeof lt=="function")&&lt.then,L(an)?X?an.call(lt,N(_,W,Ze,X),N(_,W,je,X)):(_++,an.call(lt,N(_,W,Ze,X),N(_,W,je,X),N(_,W,Ze,W.notifyWith))):(R!==Ze&&(ge=void 0,ke=[lt]),(X||W.resolveWith)(ge,ke))}},vt=X?Se:function(){try{Se()}catch(lt){c.Deferred.exceptionHook&&c.Deferred.exceptionHook(lt,vt.error),B+1>=_&&(R!==je&&(ge=void 0,ke=[lt]),W.rejectWith(ge,ke))}};B?vt():(c.Deferred.getErrorHook?vt.error=c.Deferred.getErrorHook():c.Deferred.getStackHook&&(vt.error=c.Deferred.getStackHook()),t.setTimeout(vt))}}return c.Deferred(function(B){o[0][3].add(N(0,B,L(C)?C:Ze,B.notifyWith)),o[1][3].add(N(0,B,L(m)?m:Ze)),o[2][3].add(N(0,B,L(g)?g:je))}).promise()},promise:function(m){return m!=null?c.extend(m,d):d}},p={};return c.each(o,function(m,g){var C=g[2],_=g[5];d[g[1]]=C.add,_&&C.add(function(){u=_},o[3-m][2].disable,o[3-m][3].disable,o[0][2].lock,o[0][3].lock),C.add(g[3].fire),p[g[0]]=function(){return p[g[0]+"With"](this===p?void 0:this,arguments),this},p[g[0]+"With"]=C.fireWith}),d.promise(p),n&&n.call(p,p),p},when:function(n){var o=arguments.length,u=o,d=Array(u),p=a.call(arguments),m=c.Deferred(),g=function(C){return function(_){d[C]=this,p[C]=arguments.length>1?a.call(arguments):_,--o||m.resolveWith(d,p)}};if(o<=1&&(Le(n,m.done(g(u)).resolve,m.reject,!o),m.state()==="pending"||L(p[u]&&p[u].then)))return m.then();for(;u--;)Le(p[u],g(u),m.reject);return m.promise()}});var Pe=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;c.Deferred.exceptionHook=function(n,o){t.console&&t.console.warn&&n&&Pe.test(n.name)&&t.console.warn("jQuery.Deferred exception: "+n.message,n.stack,o)},c.readyException=function(n){t.setTimeout(function(){throw n})};var Be=c.Deferred();c.fn.ready=function(n){return Be.then(n).catch(function(o){c.readyException(o)}),this},c.extend({isReady:!1,readyWait:1,ready:function(n){(n===!0?--c.readyWait:c.isReady)||(c.isReady=!0,!(n!==!0&&--c.readyWait>0)&&Be.resolveWith(D,[c]))}}),c.ready.then=Be.then;function G(){D.removeEventListener("DOMContentLoaded",G),t.removeEventListener("load",G),c.ready()}D.readyState==="complete"||D.readyState!=="loading"&&!D.documentElement.doScroll?t.setTimeout(c.ready):(D.addEventListener("DOMContentLoaded",G),t.addEventListener("load",G));var He=function(n,o,u,d,p,m,g){var C=0,_=n.length,N=u==null;if(de(u)==="object"){p=!0;for(C in u)He(n,o,C,u[C],!0,m,g)}else if(d!==void 0&&(p=!0,L(d)||(g=!0),N&&(g?(o.call(n,d),o=null):(N=o,o=function(B,W,R){return N.call(c(B),R)})),o))for(;C<_;C++)o(n[C],u,g?d:d.call(n[C],C,o(n[C],u)));return p?n:N?o.call(n):_?o(n[0],u):m},be=/^-ms-/,Ue=/-([a-z])/g;function vn(n,o){return o.toUpperCase()}function Et(n){return n.replace(be,"ms-").replace(Ue,vn)}var Fe=function(n){return n.nodeType===1||n.nodeType===9||!+n.nodeType};function kt(){this.expando=c.expando+kt.uid++}kt.uid=1,kt.prototype={cache:function(n){var o=n[this.expando];return o||(o={},Fe(n)&&(n.nodeType?n[this.expando]=o:Object.defineProperty(n,this.expando,{value:o,configurable:!0}))),o},set:function(n,o,u){var d,p=this.cache(n);if(typeof o=="string")p[Et(o)]=u;else for(d in o)p[Et(d)]=o[d];return p},get:function(n,o){return o===void 0?this.cache(n):n[this.expando]&&n[this.expando][Et(o)]},access:function(n,o,u){return o===void 0||o&&typeof o=="string"&&u===void 0?this.get(n,o):(this.set(n,o,u),u!==void 0?u:o)},remove:function(n,o){var u,d=n[this.expando];if(d!==void 0){if(o!==void 0)for(Array.isArray(o)?o=o.map(Et):(o=Et(o),o=o in d?[o]:o.match(Ve)||[]),u=o.length;u--;)delete d[o[u]];(o===void 0||c.isEmptyObject(d))&&(n.nodeType?n[this.expando]=void 0:delete n[this.expando])}},hasData:function(n){var o=n[this.expando];return o!==void 0&&!c.isEmptyObject(o)}};var re=new kt,ze=new kt,Un=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Zt=/[A-Z]/g;function gi(n){return n==="true"?!0:n==="false"?!1:n==="null"?null:n===+n+""?+n:Un.test(n)?JSON.parse(n):n}function ot(n,o,u){var d;if(u===void 0&&n.nodeType===1)if(d="data-"+o.replace(Zt,"-$&").toLowerCase(),u=n.getAttribute(d),typeof u=="string"){try{u=gi(u)}catch{}ze.set(n,o,u)}else u=void 0;return u}c.extend({hasData:function(n){return ze.hasData(n)||re.hasData(n)},data:function(n,o,u){return ze.access(n,o,u)},removeData:function(n,o){ze.remove(n,o)},_data:function(n,o,u){return re.access(n,o,u)},_removeData:function(n,o){re.remove(n,o)}}),c.fn.extend({data:function(n,o){var u,d,p,m=this[0],g=m&&m.attributes;if(n===void 0){if(this.length&&(p=ze.get(m),m.nodeType===1&&!re.get(m,"hasDataAttrs"))){for(u=g.length;u--;)g[u]&&(d=g[u].name,d.indexOf("data-")===0&&(d=Et(d.slice(5)),ot(m,d,p[d])));re.set(m,"hasDataAttrs",!0)}return p}return typeof n=="object"?this.each(function(){ze.set(this,n)}):He(this,function(C){var _;if(m&&C===void 0)return _=ze.get(m,n),_!==void 0||(_=ot(m,n),_!==void 0)?_:void 0;this.each(function(){ze.set(this,n,C)})},null,o,arguments.length>1,null,!0)},removeData:function(n){return this.each(function(){ze.remove(this,n)})}}),c.extend({queue:function(n,o,u){var d;if(n)return o=(o||"fx")+"queue",d=re.get(n,o),u&&(!d||Array.isArray(u)?d=re.access(n,o,c.makeArray(u)):d.push(u)),d||[]},dequeue:function(n,o){o=o||"fx";var u=c.queue(n,o),d=u.length,p=u.shift(),m=c._queueHooks(n,o),g=function(){c.dequeue(n,o)};p==="inprogress"&&(p=u.shift(),d--),p&&(o==="fx"&&u.unshift("inprogress"),delete m.stop,p.call(n,g,m)),!d&&m&&m.empty.fire()},_queueHooks:function(n,o){var u=o+"queueHooks";return re.get(n,u)||re.access(n,u,{empty:c.Callbacks("once memory").add(function(){re.remove(n,[o+"queue",u])})})}}),c.fn.extend({queue:function(n,o){var u=2;return typeof n!="string"&&(o=n,n="fx",u--),arguments.length<u?c.queue(this[0],n):o===void 0?this:this.each(function(){var d=c.queue(this,n,o);c._queueHooks(this,n),n==="fx"&&d[0]!=="inprogress"&&c.dequeue(this,n)})},dequeue:function(n){return this.each(function(){c.dequeue(this,n)})},clearQueue:function(n){return this.queue(n||"fx",[])},promise:function(n,o){var u,d=1,p=c.Deferred(),m=this,g=this.length,C=function(){--d||p.resolveWith(m,[m])};for(typeof n!="string"&&(o=n,n=void 0),n=n||"fx";g--;)u=re.get(m[g],n+"queueHooks"),u&&u.empty&&(d++,u.empty.add(C));return C(),p.promise(o)}});var wn=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,en=new RegExp("^(?:([+-])=|)("+wn+")([a-z%]*)$","i"),Lt=["Top","Right","Bottom","Left"],Ct=D.documentElement,ft=function(n){return c.contains(n.ownerDocument,n)},Ii={composed:!0};Ct.getRootNode&&(ft=function(n){return c.contains(n.ownerDocument,n)||n.getRootNode(Ii)===n.ownerDocument});var Tn=function(n,o){return n=o||n,n.style.display==="none"||n.style.display===""&&ft(n)&&c.css(n,"display")==="none"};function ji(n,o,u,d){var p,m,g=20,C=d?function(){return d.cur()}:function(){return c.css(n,o,"")},_=C(),N=u&&u[3]||(c.cssNumber[o]?"":"px"),B=n.nodeType&&(c.cssNumber[o]||N!=="px"&&+_)&&en.exec(c.css(n,o));if(B&&B[3]!==N){for(_=_/2,N=N||B[3],B=+_||1;g--;)c.style(n,o,B+N),(1-m)*(1-(m=C()/_||.5))<=0&&(g=0),B=B/m;B=B*2,c.style(n,o,B+N),u=u||[]}return u&&(B=+B||+_||0,p=u[1]?B+(u[1]+1)*u[2]:+u[2],d&&(d.unit=N,d.start=B,d.end=p)),p}var Fi={};function Yn(n){var o,u=n.ownerDocument,d=n.nodeName,p=Fi[d];return p||(o=u.body.appendChild(u.createElement(d)),p=c.css(o,"display"),o.parentNode.removeChild(o),p==="none"&&(p="block"),Fi[d]=p,p)}function Mt(n,o){for(var u,d,p=[],m=0,g=n.length;m<g;m++)d=n[m],d.style&&(u=d.style.display,o?(u==="none"&&(p[m]=re.get(d,"display")||null,p[m]||(d.style.display="")),d.style.display===""&&Tn(d)&&(p[m]=Yn(d))):u!=="none"&&(p[m]="none",re.set(d,"display",u)));for(m=0;m<g;m++)p[m]!=null&&(n[m].style.display=p[m]);return n}c.fn.extend({show:function(){return Mt(this,!0)},hide:function(){return Mt(this)},toggle:function(n){return typeof n=="boolean"?n?this.show():this.hide():this.each(function(){Tn(this)?c(this).show():c(this).hide()})}});var Vt=/^(?:checkbox|radio)$/i,An=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Xn=/^$|^module$|\/(?:java|ecma)script/i;(function(){var n=D.createDocumentFragment(),o=n.appendChild(D.createElement("div")),u=D.createElement("input");u.setAttribute("type","radio"),u.setAttribute("checked","checked"),u.setAttribute("name","t"),o.appendChild(u),T.checkClone=o.cloneNode(!0).cloneNode(!0).lastChild.checked,o.innerHTML="<textarea>x</textarea>",T.noCloneChecked=!!o.cloneNode(!0).lastChild.defaultValue,o.innerHTML="<option></option>",T.option=!!o.lastChild})();var gt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};gt.tbody=gt.tfoot=gt.colgroup=gt.caption=gt.thead,gt.th=gt.td,T.option||(gt.optgroup=gt.option=[1,"<select multiple='multiple'>","</select>"]);function Re(n,o){var u;return typeof n.getElementsByTagName<"u"?u=n.getElementsByTagName(o||"*"):typeof n.querySelectorAll<"u"?u=n.querySelectorAll(o||"*"):u=[],o===void 0||o&&ue(n,o)?c.merge([n],u):u}function Kn(n,o){for(var u=0,d=n.length;u<d;u++)re.set(n[u],"globalEval",!o||re.get(o[u],"globalEval"))}var Bi=/<|&#?\w+;/;function Gn(n,o,u,d,p){for(var m,g,C,_,N,B,W=o.createDocumentFragment(),R=[],X=0,ge=n.length;X<ge;X++)if(m=n[X],m||m===0)if(de(m)==="object")c.merge(R,m.nodeType?[m]:m);else if(!Bi.test(m))R.push(o.createTextNode(m));else{for(g=g||W.appendChild(o.createElement("div")),C=(An.exec(m)||["",""])[1].toLowerCase(),_=gt[C]||gt._default,g.innerHTML=_[1]+c.htmlPrefilter(m)+_[2],B=_[0];B--;)g=g.lastChild;c.merge(R,g.childNodes),g=W.firstChild,g.textContent=""}for(W.textContent="",X=0;m=R[X++];){if(d&&c.inArray(m,d)>-1){p&&p.push(m);continue}if(N=ft(m),g=Re(W.appendChild(m),"script"),N&&Kn(g),u)for(B=0;m=g[B++];)Xn.test(m.type||"")&&u.push(m)}return W}var Jn=/^([^.]*)(?:\.(.+)|)/;function Ut(){return!0}function yn(){return!1}function zi(n,o,u,d,p,m){var g,C;if(typeof o=="object"){typeof u!="string"&&(d=d||u,u=void 0);for(C in o)zi(n,C,u,d,o[C],m);return n}if(d==null&&p==null?(p=u,d=u=void 0):p==null&&(typeof u=="string"?(p=d,d=void 0):(p=d,d=u,u=void 0)),p===!1)p=yn;else if(!p)return n;return m===1&&(g=p,p=function(_){return c().off(_),g.apply(this,arguments)},p.guid=g.guid||(g.guid=c.guid++)),n.each(function(){c.event.add(this,o,p,d,u)})}c.event={global:{},add:function(n,o,u,d,p){var m,g,C,_,N,B,W,R,X,ge,ke,Se=re.get(n);if(Fe(n))for(u.handler&&(m=u,u=m.handler,p=m.selector),p&&c.find.matchesSelector(Ct,p),u.guid||(u.guid=c.guid++),(_=Se.events)||(_=Se.events=Object.create(null)),(g=Se.handle)||(g=Se.handle=function(vt){return typeof c<"u"&&c.event.triggered!==vt.type?c.event.dispatch.apply(n,arguments):void 0}),o=(o||"").match(Ve)||[""],N=o.length;N--;)C=Jn.exec(o[N])||[],X=ke=C[1],ge=(C[2]||"").split(".").sort(),X&&(W=c.event.special[X]||{},X=(p?W.delegateType:W.bindType)||X,W=c.event.special[X]||{},B=c.extend({type:X,origType:ke,data:d,handler:u,guid:u.guid,selector:p,needsContext:p&&c.expr.match.needsContext.test(p),namespace:ge.join(".")},m),(R=_[X])||(R=_[X]=[],R.delegateCount=0,(!W.setup||W.setup.call(n,d,ge,g)===!1)&&n.addEventListener&&n.addEventListener(X,g)),W.add&&(W.add.call(n,B),B.handler.guid||(B.handler.guid=u.guid)),p?R.splice(R.delegateCount++,0,B):R.push(B),c.event.global[X]=!0)},remove:function(n,o,u,d,p){var m,g,C,_,N,B,W,R,X,ge,ke,Se=re.hasData(n)&&re.get(n);if(!(!Se||!(_=Se.events))){for(o=(o||"").match(Ve)||[""],N=o.length;N--;){if(C=Jn.exec(o[N])||[],X=ke=C[1],ge=(C[2]||"").split(".").sort(),!X){for(X in _)c.event.remove(n,X+o[N],u,d,!0);continue}for(W=c.event.special[X]||{},X=(d?W.delegateType:W.bindType)||X,R=_[X]||[],C=C[2]&&new RegExp("(^|\\.)"+ge.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=m=R.length;m--;)B=R[m],(p||ke===B.origType)&&(!u||u.guid===B.guid)&&(!C||C.test(B.namespace))&&(!d||d===B.selector||d==="**"&&B.selector)&&(R.splice(m,1),B.selector&&R.delegateCount--,W.remove&&W.remove.call(n,B));g&&!R.length&&((!W.teardown||W.teardown.call(n,ge,Se.handle)===!1)&&c.removeEvent(n,X,Se.handle),delete _[X])}c.isEmptyObject(_)&&re.remove(n,"handle events")}},dispatch:function(n){var o,u,d,p,m,g,C=new Array(arguments.length),_=c.event.fix(n),N=(re.get(this,"events")||Object.create(null))[_.type]||[],B=c.event.special[_.type]||{};for(C[0]=_,o=1;o<arguments.length;o++)C[o]=arguments[o];if(_.delegateTarget=this,!(B.preDispatch&&B.preDispatch.call(this,_)===!1)){for(g=c.event.handlers.call(this,_,N),o=0;(p=g[o++])&&!_.isPropagationStopped();)for(_.currentTarget=p.elem,u=0;(m=p.handlers[u++])&&!_.isImmediatePropagationStopped();)(!_.rnamespace||m.namespace===!1||_.rnamespace.test(m.namespace))&&(_.handleObj=m,_.data=m.data,d=((c.event.special[m.origType]||{}).handle||m.handler).apply(p.elem,C),d!==void 0&&(_.result=d)===!1&&(_.preventDefault(),_.stopPropagation()));return B.postDispatch&&B.postDispatch.call(this,_),_.result}},handlers:function(n,o){var u,d,p,m,g,C=[],_=o.delegateCount,N=n.target;if(_&&N.nodeType&&!(n.type==="click"&&n.button>=1)){for(;N!==this;N=N.parentNode||this)if(N.nodeType===1&&!(n.type==="click"&&N.disabled===!0)){for(m=[],g={},u=0;u<_;u++)d=o[u],p=d.selector+" ",g[p]===void 0&&(g[p]=d.needsContext?c(p,this).index(N)>-1:c.find(p,this,null,[N]).length),g[p]&&m.push(d);m.length&&C.push({elem:N,handlers:m})}}return N=this,_<o.length&&C.push({elem:N,handlers:o.slice(_)}),C},addProp:function(n,o){Object.defineProperty(c.Event.prototype,n,{enumerable:!0,configurable:!0,get:L(o)?function(){if(this.originalEvent)return o(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[n]},set:function(u){Object.defineProperty(this,n,{enumerable:!0,configurable:!0,writable:!0,value:u})}})},fix:function(n){return n[c.expando]?n:new c.Event(n)},special:{load:{noBubble:!0},click:{setup:function(n){var o=this||n;return Vt.test(o.type)&&o.click&&ue(o,"input")&&Qn(o,"click",!0),!1},trigger:function(n){var o=this||n;return Vt.test(o.type)&&o.click&&ue(o,"input")&&Qn(o,"click"),!0},_default:function(n){var o=n.target;return Vt.test(o.type)&&o.click&&ue(o,"input")&&re.get(o,"click")||ue(o,"a")}},beforeunload:{postDispatch:function(n){n.result!==void 0&&n.originalEvent&&(n.originalEvent.returnValue=n.result)}}}};function Qn(n,o,u){if(!u){re.get(n,o)===void 0&&c.event.add(n,o,Ut);return}re.set(n,o,!1),c.event.add(n,o,{namespace:!1,handler:function(d){var p,m=re.get(this,o);if(d.isTrigger&1&&this[o]){if(m)(c.event.special[o]||{}).delegateType&&d.stopPropagation();else if(m=a.call(arguments),re.set(this,o,m),this[o](),p=re.get(this,o),re.set(this,o,!1),m!==p)return d.stopImmediatePropagation(),d.preventDefault(),p}else m&&(re.set(this,o,c.event.trigger(m[0],m.slice(1),this)),d.stopPropagation(),d.isImmediatePropagationStopped=Ut)}})}c.removeEvent=function(n,o,u){n.removeEventListener&&n.removeEventListener(o,u)},c.Event=function(n,o){if(!(this instanceof c.Event))return new c.Event(n,o);n&&n.type?(this.originalEvent=n,this.type=n.type,this.isDefaultPrevented=n.defaultPrevented||n.defaultPrevented===void 0&&n.returnValue===!1?Ut:yn,this.target=n.target&&n.target.nodeType===3?n.target.parentNode:n.target,this.currentTarget=n.currentTarget,this.relatedTarget=n.relatedTarget):this.type=n,o&&c.extend(this,o),this.timeStamp=n&&n.timeStamp||Date.now(),this[c.expando]=!0},c.Event.prototype={constructor:c.Event,isDefaultPrevented:yn,isPropagationStopped:yn,isImmediatePropagationStopped:yn,isSimulated:!1,preventDefault:function(){var n=this.originalEvent;this.isDefaultPrevented=Ut,n&&!this.isSimulated&&n.preventDefault()},stopPropagation:function(){var n=this.originalEvent;this.isPropagationStopped=Ut,n&&!this.isSimulated&&n.stopPropagation()},stopImmediatePropagation:function(){var n=this.originalEvent;this.isImmediatePropagationStopped=Ut,n&&!this.isSimulated&&n.stopImmediatePropagation(),this.stopPropagation()}},c.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},c.event.addProp),c.each({focus:"focusin",blur:"focusout"},function(n,o){function u(d){if(D.documentMode){var p=re.get(this,"handle"),m=c.event.fix(d);m.type=d.type==="focusin"?"focus":"blur",m.isSimulated=!0,p(d),m.target===m.currentTarget&&p(m)}else c.event.simulate(o,d.target,c.event.fix(d))}c.event.special[n]={setup:function(){var d;if(Qn(this,n,!0),D.documentMode)d=re.get(this,o),d||this.addEventListener(o,u),re.set(this,o,(d||0)+1);else return!1},trigger:function(){return Qn(this,n),!0},teardown:function(){var d;if(D.documentMode)d=re.get(this,o)-1,d?re.set(this,o,d):(this.removeEventListener(o,u),re.remove(this,o));else return!1},_default:function(d){return re.get(d.target,n)},delegateType:o},c.event.special[o]={setup:function(){var d=this.ownerDocument||this.document||this,p=D.documentMode?this:d,m=re.get(p,o);m||(D.documentMode?this.addEventListener(o,u):d.addEventListener(n,u,!0)),re.set(p,o,(m||0)+1)},teardown:function(){var d=this.ownerDocument||this.document||this,p=D.documentMode?this:d,m=re.get(p,o)-1;m?re.set(p,o,m):(D.documentMode?this.removeEventListener(o,u):d.removeEventListener(n,u,!0),re.remove(p,o))}}}),c.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(n,o){c.event.special[n]={delegateType:o,bindType:o,handle:function(u){var d,p=this,m=u.relatedTarget,g=u.handleObj;return(!m||m!==p&&!c.contains(p,m))&&(u.type=g.origType,d=g.handler.apply(this,arguments),u.type=o),d}}}),c.fn.extend({on:function(n,o,u,d){return zi(this,n,o,u,d)},one:function(n,o,u,d){return zi(this,n,o,u,d,1)},off:function(n,o,u){var d,p;if(n&&n.preventDefault&&n.handleObj)return d=n.handleObj,c(n.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if(typeof n=="object"){for(p in n)this.off(p,o,n[p]);return this}return(o===!1||typeof o=="function")&&(u=o,o=void 0),u===!1&&(u=yn),this.each(function(){c.event.remove(this,n,u,o)})}});var vr=/<script|<style|<link/i,yo=/checked\s*(?:[^=]|=\s*.checked.)/i,bo=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function qi(n,o){return ue(n,"table")&&ue(o.nodeType!==11?o:o.firstChild,"tr")&&c(n).children("tbody")[0]||n}function wr(n){return n.type=(n.getAttribute("type")!==null)+"/"+n.type,n}function yr(n){return(n.type||"").slice(0,5)==="true/"?n.type=n.type.slice(5):n.removeAttribute("type"),n}function tn(n,o){var u,d,p,m,g,C,_;if(o.nodeType===1){if(re.hasData(n)&&(m=re.get(n),_=m.events,_)){re.remove(o,"handle events");for(p in _)for(u=0,d=_[p].length;u<d;u++)c.event.add(o,p,_[p][u])}ze.hasData(n)&&(g=ze.access(n),C=c.extend({},g),ze.set(o,C))}}function xo(n,o){var u=o.nodeName.toLowerCase();u==="input"&&Vt.test(n.type)?o.checked=n.checked:(u==="input"||u==="textarea")&&(o.defaultValue=n.defaultValue)}function fe(n,o,u,d){o=l(o);var p,m,g,C,_,N,B=0,W=n.length,R=W-1,X=o[0],ge=L(X);if(ge||W>1&&typeof X=="string"&&!T.checkClone&&yo.test(X))return n.each(function(ke){var Se=n.eq(ke);ge&&(o[0]=X.call(this,ke,Se.html())),fe(Se,o,u,d)});if(W&&(p=Gn(o,n[0].ownerDocument,!1,n,d),m=p.firstChild,p.childNodes.length===1&&(p=m),m||d)){for(g=c.map(Re(p,"script"),wr),C=g.length;B<W;B++)_=p,B!==R&&(_=c.clone(_,!0,!0),C&&c.merge(g,Re(_,"script"))),u.call(n[B],_,B);if(C)for(N=g[g.length-1].ownerDocument,c.map(g,yr),B=0;B<C;B++)_=g[B],Xn.test(_.type||"")&&!re.access(_,"globalEval")&&c.contains(N,_)&&(_.src&&(_.type||"").toLowerCase()!=="module"?c._evalUrl&&!_.noModule&&c._evalUrl(_.src,{nonce:_.nonce||_.getAttribute("nonce")},N):we(_.textContent.replace(bo,""),_,N))}return n}function br(n,o,u){for(var d,p=o?c.filter(o,n):n,m=0;(d=p[m])!=null;m++)!u&&d.nodeType===1&&c.cleanData(Re(d)),d.parentNode&&(u&&ft(d)&&Kn(Re(d,"script")),d.parentNode.removeChild(d));return n}c.extend({htmlPrefilter:function(n){return n},clone:function(n,o,u){var d,p,m,g,C=n.cloneNode(!0),_=ft(n);if(!T.noCloneChecked&&(n.nodeType===1||n.nodeType===11)&&!c.isXMLDoc(n))for(g=Re(C),m=Re(n),d=0,p=m.length;d<p;d++)xo(m[d],g[d]);if(o)if(u)for(m=m||Re(n),g=g||Re(C),d=0,p=m.length;d<p;d++)tn(m[d],g[d]);else tn(n,C);return g=Re(C,"script"),g.length>0&&Kn(g,!_&&Re(n,"script")),C},cleanData:function(n){for(var o,u,d,p=c.event.special,m=0;(u=n[m])!==void 0;m++)if(Fe(u)){if(o=u[re.expando]){if(o.events)for(d in o.events)p[d]?c.event.remove(u,d):c.removeEvent(u,d,o.handle);u[re.expando]=void 0}u[ze.expando]&&(u[ze.expando]=void 0)}}}),c.fn.extend({detach:function(n){return br(this,n,!0)},remove:function(n){return br(this,n)},text:function(n){return He(this,function(o){return o===void 0?c.text(this):this.empty().each(function(){(this.nodeType===1||this.nodeType===11||this.nodeType===9)&&(this.textContent=o)})},null,n,arguments.length)},append:function(){return fe(this,arguments,function(n){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var o=qi(this,n);o.appendChild(n)}})},prepend:function(){return fe(this,arguments,function(n){if(this.nodeType===1||this.nodeType===11||this.nodeType===9){var o=qi(this,n);o.insertBefore(n,o.firstChild)}})},before:function(){return fe(this,arguments,function(n){this.parentNode&&this.parentNode.insertBefore(n,this)})},after:function(){return fe(this,arguments,function(n){this.parentNode&&this.parentNode.insertBefore(n,this.nextSibling)})},empty:function(){for(var n,o=0;(n=this[o])!=null;o++)n.nodeType===1&&(c.cleanData(Re(n,!1)),n.textContent="");return this},clone:function(n,o){return n=n??!1,o=o??n,this.map(function(){return c.clone(this,n,o)})},html:function(n){return He(this,function(o){var u=this[0]||{},d=0,p=this.length;if(o===void 0&&u.nodeType===1)return u.innerHTML;if(typeof o=="string"&&!vr.test(o)&&!gt[(An.exec(o)||["",""])[1].toLowerCase()]){o=c.htmlPrefilter(o);try{for(;d<p;d++)u=this[d]||{},u.nodeType===1&&(c.cleanData(Re(u,!1)),u.innerHTML=o);u=0}catch{}}u&&this.empty().append(o)},null,n,arguments.length)},replaceWith:function(){var n=[];return fe(this,arguments,function(o){var u=this.parentNode;c.inArray(this,n)<0&&(c.cleanData(Re(this)),u&&u.replaceChild(o,this))},n)}}),c.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(n,o){c.fn[n]=function(u){for(var d,p=[],m=c(u),g=m.length-1,C=0;C<=g;C++)d=C===g?this:this.clone(!0),c(m[C])[o](d),f.apply(p,d.get());return this.pushStack(p)}});var On=new RegExp("^("+wn+")(?!px)[a-z%]+$","i"),Zn=/^--/,vi=function(n){var o=n.ownerDocument.defaultView;return(!o||!o.opener)&&(o=t),o.getComputedStyle(n)},xr=function(n,o,u){var d,p,m={};for(p in o)m[p]=n.style[p],n.style[p]=o[p];d=u.call(n);for(p in o)n.style[p]=m[p];return d},_o=new RegExp(Lt.join("|"),"i");(function(){function n(){if(N){_.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",N.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Ct.appendChild(_).appendChild(N);var B=t.getComputedStyle(N);u=B.top!=="1%",C=o(B.marginLeft)===12,N.style.right="60%",m=o(B.right)===36,d=o(B.width)===36,N.style.position="absolute",p=o(N.offsetWidth/3)===12,Ct.removeChild(_),N=null}}function o(B){return Math.round(parseFloat(B))}var u,d,p,m,g,C,_=D.createElement("div"),N=D.createElement("div");N.style&&(N.style.backgroundClip="content-box",N.cloneNode(!0).style.backgroundClip="",T.clearCloneStyle=N.style.backgroundClip==="content-box",c.extend(T,{boxSizingReliable:function(){return n(),d},pixelBoxStyles:function(){return n(),m},pixelPosition:function(){return n(),u},reliableMarginLeft:function(){return n(),C},scrollboxSize:function(){return n(),p},reliableTrDimensions:function(){var B,W,R,X;return g==null&&(B=D.createElement("table"),W=D.createElement("tr"),R=D.createElement("div"),B.style.cssText="position:absolute;left:-11111px;border-collapse:separate",W.style.cssText="border:1px solid",W.style.height="1px",R.style.height="9px",R.style.display="block",Ct.appendChild(B).appendChild(W).appendChild(R),X=t.getComputedStyle(W),g=parseInt(X.height,10)+parseInt(X.borderTopWidth,10)+parseInt(X.borderBottomWidth,10)===W.offsetHeight,Ct.removeChild(B)),g}}))})();function ei(n,o,u){var d,p,m,g,C=Zn.test(o),_=n.style;return u=u||vi(n),u&&(g=u.getPropertyValue(o)||u[o],C&&g&&(g=g.replace(se,"$1")||void 0),g===""&&!ft(n)&&(g=c.style(n,o)),!T.pixelBoxStyles()&&On.test(g)&&_o.test(o)&&(d=_.width,p=_.minWidth,m=_.maxWidth,_.minWidth=_.maxWidth=_.width=g,g=u.width,_.width=d,_.minWidth=p,_.maxWidth=m)),g!==void 0?g+"":g}function _r(n,o){return{get:function(){if(n()){delete this.get;return}return(this.get=o).apply(this,arguments)}}}var Er=["Webkit","Moz","ms"],Cr=D.createElement("div").style,ti={};function $i(n){for(var o=n[0].toUpperCase()+n.slice(1),u=Er.length;u--;)if(n=Er[u]+o,n in Cr)return n}function Ke(n){var o=c.cssProps[n]||ti[n];return o||(n in Cr?n:ti[n]=$i(n)||n)}var ni=/^(none|table(?!-c[ea]).+)/,Wi={position:"absolute",visibility:"hidden",display:"block"},wi={letterSpacing:"0",fontWeight:"400"};function yi(n,o,u){var d=en.exec(o);return d?Math.max(0,d[2]-(u||0))+(d[3]||"px"):o}function ii(n,o,u,d,p,m){var g=o==="width"?1:0,C=0,_=0,N=0;if(u===(d?"border":"content"))return 0;for(;g<4;g+=2)u==="margin"&&(N+=c.css(n,u+Lt[g],!0,p)),d?(u==="content"&&(_-=c.css(n,"padding"+Lt[g],!0,p)),u!=="margin"&&(_-=c.css(n,"border"+Lt[g]+"Width",!0,p))):(_+=c.css(n,"padding"+Lt[g],!0,p),u!=="padding"?_+=c.css(n,"border"+Lt[g]+"Width",!0,p):C+=c.css(n,"border"+Lt[g]+"Width",!0,p));return!d&&m>=0&&(_+=Math.max(0,Math.ceil(n["offset"+o[0].toUpperCase()+o.slice(1)]-m-_-C-.5))||0),_+N}function ri(n,o,u){var d=vi(n),p=!T.boxSizingReliable()||u,m=p&&c.css(n,"boxSizing",!1,d)==="border-box",g=m,C=ei(n,o,d),_="offset"+o[0].toUpperCase()+o.slice(1);if(On.test(C)){if(!u)return C;C="auto"}return(!T.boxSizingReliable()&&m||!T.reliableTrDimensions()&&ue(n,"tr")||C==="auto"||!parseFloat(C)&&c.css(n,"display",!1,d)==="inline")&&n.getClientRects().length&&(m=c.css(n,"boxSizing",!1,d)==="border-box",g=_ in n,g&&(C=n[_])),C=parseFloat(C)||0,C+ii(n,o,u||(m?"border":"content"),g,d,C)+"px"}c.extend({cssHooks:{opacity:{get:function(n,o){if(o){var u=ei(n,"opacity");return u===""?"1":u}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(n,o,u,d){if(!(!n||n.nodeType===3||n.nodeType===8||!n.style)){var p,m,g,C=Et(o),_=Zn.test(o),N=n.style;if(_||(o=Ke(C)),g=c.cssHooks[o]||c.cssHooks[C],u!==void 0){if(m=typeof u,m==="string"&&(p=en.exec(u))&&p[1]&&(u=ji(n,o,p),m="number"),u==null||u!==u)return;m==="number"&&!_&&(u+=p&&p[3]||(c.cssNumber[C]?"":"px")),!T.clearCloneStyle&&u===""&&o.indexOf("background")===0&&(N[o]="inherit"),(!g||!("set"in g)||(u=g.set(n,u,d))!==void 0)&&(_?N.setProperty(o,u):N[o]=u)}else return g&&"get"in g&&(p=g.get(n,!1,d))!==void 0?p:N[o]}},css:function(n,o,u,d){var p,m,g,C=Et(o),_=Zn.test(o);return _||(o=Ke(C)),g=c.cssHooks[o]||c.cssHooks[C],g&&"get"in g&&(p=g.get(n,!0,u)),p===void 0&&(p=ei(n,o,d)),p==="normal"&&o in wi&&(p=wi[o]),u===""||u?(m=parseFloat(p),u===!0||isFinite(m)?m||0:p):p}}),c.each(["height","width"],function(n,o){c.cssHooks[o]={get:function(u,d,p){if(d)return ni.test(c.css(u,"display"))&&(!u.getClientRects().length||!u.getBoundingClientRect().width)?xr(u,Wi,function(){return ri(u,o,p)}):ri(u,o,p)},set:function(u,d,p){var m,g=vi(u),C=!T.scrollboxSize()&&g.position==="absolute",_=C||p,N=_&&c.css(u,"boxSizing",!1,g)==="border-box",B=p?ii(u,o,p,N,g):0;return N&&C&&(B-=Math.ceil(u["offset"+o[0].toUpperCase()+o.slice(1)]-parseFloat(g[o])-ii(u,o,"border",!1,g)-.5)),B&&(m=en.exec(d))&&(m[3]||"px")!=="px"&&(u.style[o]=d,d=c.css(u,o)),yi(u,d,B)}}}),c.cssHooks.marginLeft=_r(T.reliableMarginLeft,function(n,o){if(o)return(parseFloat(ei(n,"marginLeft"))||n.getBoundingClientRect().left-xr(n,{marginLeft:0},function(){return n.getBoundingClientRect().left}))+"px"}),c.each({margin:"",padding:"",border:"Width"},function(n,o){c.cssHooks[n+o]={expand:function(u){for(var d=0,p={},m=typeof u=="string"?u.split(" "):[u];d<4;d++)p[n+Lt[d]+o]=m[d]||m[d-2]||m[0];return p}},n!=="margin"&&(c.cssHooks[n+o].set=yi)}),c.fn.extend({css:function(n,o){return He(this,function(u,d,p){var m,g,C={},_=0;if(Array.isArray(d)){for(m=vi(u),g=d.length;_<g;_++)C[d[_]]=c.css(u,d[_],!1,m);return C}return p!==void 0?c.style(u,d,p):c.css(u,d)},n,o,arguments.length>1)}});function st(n,o,u,d,p){return new st.prototype.init(n,o,u,d,p)}c.Tween=st,st.prototype={constructor:st,init:function(n,o,u,d,p,m){this.elem=n,this.prop=u,this.easing=p||c.easing._default,this.options=o,this.start=this.now=this.cur(),this.end=d,this.unit=m||(c.cssNumber[u]?"":"px")},cur:function(){var n=st.propHooks[this.prop];return n&&n.get?n.get(this):st.propHooks._default.get(this)},run:function(n){var o,u=st.propHooks[this.prop];return this.options.duration?this.pos=o=c.easing[this.easing](n,this.options.duration*n,0,1,this.options.duration):this.pos=o=n,this.now=(this.end-this.start)*o+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),u&&u.set?u.set(this):st.propHooks._default.set(this),this}},st.prototype.init.prototype=st.prototype,st.propHooks={_default:{get:function(n){var o;return n.elem.nodeType!==1||n.elem[n.prop]!=null&&n.elem.style[n.prop]==null?n.elem[n.prop]:(o=c.css(n.elem,n.prop,""),!o||o==="auto"?0:o)},set:function(n){c.fx.step[n.prop]?c.fx.step[n.prop](n):n.elem.nodeType===1&&(c.cssHooks[n.prop]||n.elem.style[Ke(n.prop)]!=null)?c.style(n.elem,n.prop,n.now+n.unit):n.elem[n.prop]=n.now}}},st.propHooks.scrollTop=st.propHooks.scrollLeft={set:function(n){n.elem.nodeType&&n.elem.parentNode&&(n.elem[n.prop]=n.now)}},c.easing={linear:function(n){return n},swing:function(n){return .5-Math.cos(n*Math.PI)/2},_default:"swing"},c.fx=st.prototype.init,c.fx.step={};var Nn,bn,Sr=/^(?:toggle|show|hide)$/,Vi=/queueHooks$/;function bi(){bn&&(D.hidden===!1&&t.requestAnimationFrame?t.requestAnimationFrame(bi):t.setTimeout(bi,c.fx.interval),c.fx.tick())}function xi(){return t.setTimeout(function(){Nn=void 0}),Nn=Date.now()}function kn(n,o){var u,d=0,p={height:n};for(o=o?1:0;d<4;d+=2-o)u=Lt[d],p["margin"+u]=p["padding"+u]=n;return o&&(p.opacity=p.width=n),p}function Tr(n,o,u){for(var d,p=(v.tweeners[o]||[]).concat(v.tweeners["*"]),m=0,g=p.length;m<g;m++)if(d=p[m].call(u,o,n))return d}function h(n,o,u){var d,p,m,g,C,_,N,B,W="width"in o||"height"in o,R=this,X={},ge=n.style,ke=n.nodeType&&Tn(n),Se=re.get(n,"fxshow");u.queue||(g=c._queueHooks(n,"fx"),g.unqueued==null&&(g.unqueued=0,C=g.empty.fire,g.empty.fire=function(){g.unqueued||C()}),g.unqueued++,R.always(function(){R.always(function(){g.unqueued--,c.queue(n,"fx").length||g.empty.fire()})}));for(d in o)if(p=o[d],Sr.test(p)){if(delete o[d],m=m||p==="toggle",p===(ke?"hide":"show"))if(p==="show"&&Se&&Se[d]!==void 0)ke=!0;else continue;X[d]=Se&&Se[d]||c.style(n,d)}if(_=!c.isEmptyObject(o),!(!_&&c.isEmptyObject(X))){W&&n.nodeType===1&&(u.overflow=[ge.overflow,ge.overflowX,ge.overflowY],N=Se&&Se.display,N==null&&(N=re.get(n,"display")),B=c.css(n,"display"),B==="none"&&(N?B=N:(Mt([n],!0),N=n.style.display||N,B=c.css(n,"display"),Mt([n]))),(B==="inline"||B==="inline-block"&&N!=null)&&c.css(n,"float")==="none"&&(_||(R.done(function(){ge.display=N}),N==null&&(B=ge.display,N=B==="none"?"":B)),ge.display="inline-block")),u.overflow&&(ge.overflow="hidden",R.always(function(){ge.overflow=u.overflow[0],ge.overflowX=u.overflow[1],ge.overflowY=u.overflow[2]})),_=!1;for(d in X)_||(Se?"hidden"in Se&&(ke=Se.hidden):Se=re.access(n,"fxshow",{display:N}),m&&(Se.hidden=!ke),ke&&Mt([n],!0),R.done(function(){ke||Mt([n]),re.remove(n,"fxshow");for(d in X)c.style(n,d,X[d])})),_=Tr(ke?Se[d]:0,d,R),d in Se||(Se[d]=_.start,ke&&(_.end=_.start,_.start=0))}}function y(n,o){var u,d,p,m,g;for(u in n)if(d=Et(u),p=o[d],m=n[u],Array.isArray(m)&&(p=m[1],m=n[u]=m[0]),u!==d&&(n[d]=m,delete n[u]),g=c.cssHooks[d],g&&"expand"in g){m=g.expand(m),delete n[d];for(u in m)u in n||(n[u]=m[u],o[u]=p)}else o[d]=p}function v(n,o,u){var d,p,m=0,g=v.prefilters.length,C=c.Deferred().always(function(){delete _.elem}),_=function(){if(p)return!1;for(var W=Nn||xi(),R=Math.max(0,N.startTime+N.duration-W),X=R/N.duration||0,ge=1-X,ke=0,Se=N.tweens.length;ke<Se;ke++)N.tweens[ke].run(ge);return C.notifyWith(n,[N,ge,R]),ge<1&&Se?R:(Se||C.notifyWith(n,[N,1,0]),C.resolveWith(n,[N]),!1)},N=C.promise({elem:n,props:c.extend({},o),opts:c.extend(!0,{specialEasing:{},easing:c.easing._default},u),originalProperties:o,originalOptions:u,startTime:Nn||xi(),duration:u.duration,tweens:[],createTween:function(W,R){var X=c.Tween(n,N.opts,W,R,N.opts.specialEasing[W]||N.opts.easing);return N.tweens.push(X),X},stop:function(W){var R=0,X=W?N.tweens.length:0;if(p)return this;for(p=!0;R<X;R++)N.tweens[R].run(1);return W?(C.notifyWith(n,[N,1,0]),C.resolveWith(n,[N,W])):C.rejectWith(n,[N,W]),this}}),B=N.props;for(y(B,N.opts.specialEasing);m<g;m++)if(d=v.prefilters[m].call(N,n,B,N.opts),d)return L(d.stop)&&(c._queueHooks(N.elem,N.opts.queue).stop=d.stop.bind(d)),d;return c.map(B,Tr,N),L(N.opts.start)&&N.opts.start.call(n,N),N.progress(N.opts.progress).done(N.opts.done,N.opts.complete).fail(N.opts.fail).always(N.opts.always),c.fx.timer(c.extend(_,{elem:n,anim:N,queue:N.opts.queue})),N}c.Animation=c.extend(v,{tweeners:{"*":[function(n,o){var u=this.createTween(n,o);return ji(u.elem,n,en.exec(o),u),u}]},tweener:function(n,o){L(n)?(o=n,n=["*"]):n=n.match(Ve);for(var u,d=0,p=n.length;d<p;d++)u=n[d],v.tweeners[u]=v.tweeners[u]||[],v.tweeners[u].unshift(o)},prefilters:[h],prefilter:function(n,o){o?v.prefilters.unshift(n):v.prefilters.push(n)}}),c.speed=function(n,o,u){var d=n&&typeof n=="object"?c.extend({},n):{complete:u||!u&&o||L(n)&&n,duration:n,easing:u&&o||o&&!L(o)&&o};return c.fx.off?d.duration=0:typeof d.duration!="number"&&(d.duration in c.fx.speeds?d.duration=c.fx.speeds[d.duration]:d.duration=c.fx.speeds._default),(d.queue==null||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){L(d.old)&&d.old.call(this),d.queue&&c.dequeue(this,d.queue)},d},c.fn.extend({fadeTo:function(n,o,u,d){return this.filter(Tn).css("opacity",0).show().end().animate({opacity:o},n,u,d)},animate:function(n,o,u,d){var p=c.isEmptyObject(n),m=c.speed(o,u,d),g=function(){var C=v(this,c.extend({},n),m);(p||re.get(this,"finish"))&&C.stop(!0)};return g.finish=g,p||m.queue===!1?this.each(g):this.queue(m.queue,g)},stop:function(n,o,u){var d=function(p){var m=p.stop;delete p.stop,m(u)};return typeof n!="string"&&(u=o,o=n,n=void 0),o&&this.queue(n||"fx",[]),this.each(function(){var p=!0,m=n!=null&&n+"queueHooks",g=c.timers,C=re.get(this);if(m)C[m]&&C[m].stop&&d(C[m]);else for(m in C)C[m]&&C[m].stop&&Vi.test(m)&&d(C[m]);for(m=g.length;m--;)g[m].elem===this&&(n==null||g[m].queue===n)&&(g[m].anim.stop(u),p=!1,g.splice(m,1));(p||!u)&&c.dequeue(this,n)})},finish:function(n){return n!==!1&&(n=n||"fx"),this.each(function(){var o,u=re.get(this),d=u[n+"queue"],p=u[n+"queueHooks"],m=c.timers,g=d?d.length:0;for(u.finish=!0,c.queue(this,n,[]),p&&p.stop&&p.stop.call(this,!0),o=m.length;o--;)m[o].elem===this&&m[o].queue===n&&(m[o].anim.stop(!0),m.splice(o,1));for(o=0;o<g;o++)d[o]&&d[o].finish&&d[o].finish.call(this);delete u.finish})}}),c.each(["toggle","show","hide"],function(n,o){var u=c.fn[o];c.fn[o]=function(d,p,m){return d==null||typeof d=="boolean"?u.apply(this,arguments):this.animate(kn(o,!0),d,p,m)}}),c.each({slideDown:kn("show"),slideUp:kn("hide"),slideToggle:kn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(n,o){c.fn[n]=function(u,d,p){return this.animate(o,u,d,p)}}),c.timers=[],c.fx.tick=function(){var n,o=0,u=c.timers;for(Nn=Date.now();o<u.length;o++)n=u[o],!n()&&u[o]===n&&u.splice(o--,1);u.length||c.fx.stop(),Nn=void 0},c.fx.timer=function(n){c.timers.push(n),c.fx.start()},c.fx.interval=13,c.fx.start=function(){bn||(bn=!0,bi())},c.fx.stop=function(){bn=null},c.fx.speeds={slow:600,fast:200,_default:400},c.fn.delay=function(n,o){return n=c.fx&&c.fx.speeds[n]||n,o=o||"fx",this.queue(o,function(u,d){var p=t.setTimeout(u,n);d.stop=function(){t.clearTimeout(p)}})},function(){var n=D.createElement("input"),o=D.createElement("select"),u=o.appendChild(D.createElement("option"));n.type="checkbox",T.checkOn=n.value!=="",T.optSelected=u.selected,n=D.createElement("input"),n.value="t",n.type="radio",T.radioValue=n.value==="t"}();var E,k=c.expr.attrHandle;c.fn.extend({attr:function(n,o){return He(this,c.attr,n,o,arguments.length>1)},removeAttr:function(n){return this.each(function(){c.removeAttr(this,n)})}}),c.extend({attr:function(n,o,u){var d,p,m=n.nodeType;if(!(m===3||m===8||m===2)){if(typeof n.getAttribute>"u")return c.prop(n,o,u);if((m!==1||!c.isXMLDoc(n))&&(p=c.attrHooks[o.toLowerCase()]||(c.expr.match.bool.test(o)?E:void 0)),u!==void 0){if(u===null){c.removeAttr(n,o);return}return p&&"set"in p&&(d=p.set(n,u,o))!==void 0?d:(n.setAttribute(o,u+""),u)}return p&&"get"in p&&(d=p.get(n,o))!==null?d:(d=c.find.attr(n,o),d??void 0)}},attrHooks:{type:{set:function(n,o){if(!T.radioValue&&o==="radio"&&ue(n,"input")){var u=n.value;return n.setAttribute("type",o),u&&(n.value=u),o}}}},removeAttr:function(n,o){var u,d=0,p=o&&o.match(Ve);if(p&&n.nodeType===1)for(;u=p[d++];)n.removeAttribute(u)}}),E={set:function(n,o,u){return o===!1?c.removeAttr(n,u):n.setAttribute(u,u),u}},c.each(c.expr.match.bool.source.match(/\w+/g),function(n,o){var u=k[o]||c.find.attr;k[o]=function(d,p,m){var g,C,_=p.toLowerCase();return m||(C=k[_],k[_]=g,g=u(d,p,m)!=null?_:null,k[_]=C),g}});var F=/^(?:input|select|textarea|button)$/i,z=/^(?:a|area)$/i;c.fn.extend({prop:function(n,o){return He(this,c.prop,n,o,arguments.length>1)},removeProp:function(n){return this.each(function(){delete this[c.propFix[n]||n]})}}),c.extend({prop:function(n,o,u){var d,p,m=n.nodeType;if(!(m===3||m===8||m===2))return(m!==1||!c.isXMLDoc(n))&&(o=c.propFix[o]||o,p=c.propHooks[o]),u!==void 0?p&&"set"in p&&(d=p.set(n,u,o))!==void 0?d:n[o]=u:p&&"get"in p&&(d=p.get(n,o))!==null?d:n[o]},propHooks:{tabIndex:{get:function(n){var o=c.find.attr(n,"tabindex");return o?parseInt(o,10):F.test(n.nodeName)||z.test(n.nodeName)&&n.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),T.optSelected||(c.propHooks.selected={get:function(n){var o=n.parentNode;return o&&o.parentNode&&o.parentNode.selectedIndex,null},set:function(n){var o=n.parentNode;o&&(o.selectedIndex,o.parentNode&&o.parentNode.selectedIndex)}}),c.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){c.propFix[this.toLowerCase()]=this});function J(n){var o=n.match(Ve)||[];return o.join(" ")}function Y(n){return n.getAttribute&&n.getAttribute("class")||""}function oe(n){return Array.isArray(n)?n:typeof n=="string"?n.match(Ve)||[]:[]}c.fn.extend({addClass:function(n){var o,u,d,p,m,g;return L(n)?this.each(function(C){c(this).addClass(n.call(this,C,Y(this)))}):(o=oe(n),o.length?this.each(function(){if(d=Y(this),u=this.nodeType===1&&" "+J(d)+" ",u){for(m=0;m<o.length;m++)p=o[m],u.indexOf(" "+p+" ")<0&&(u+=p+" ");g=J(u),d!==g&&this.setAttribute("class",g)}}):this)},removeClass:function(n){var o,u,d,p,m,g;return L(n)?this.each(function(C){c(this).removeClass(n.call(this,C,Y(this)))}):arguments.length?(o=oe(n),o.length?this.each(function(){if(d=Y(this),u=this.nodeType===1&&" "+J(d)+" ",u){for(m=0;m<o.length;m++)for(p=o[m];u.indexOf(" "+p+" ")>-1;)u=u.replace(" "+p+" "," ");g=J(u),d!==g&&this.setAttribute("class",g)}}):this):this.attr("class","")},toggleClass:function(n,o){var u,d,p,m,g=typeof n,C=g==="string"||Array.isArray(n);return L(n)?this.each(function(_){c(this).toggleClass(n.call(this,_,Y(this),o),o)}):typeof o=="boolean"&&C?o?this.addClass(n):this.removeClass(n):(u=oe(n),this.each(function(){if(C)for(m=c(this),p=0;p<u.length;p++)d=u[p],m.hasClass(d)?m.removeClass(d):m.addClass(d);else(n===void 0||g==="boolean")&&(d=Y(this),d&&re.set(this,"__className__",d),this.setAttribute&&this.setAttribute("class",d||n===!1?"":re.get(this,"__className__")||""))}))},hasClass:function(n){var o,u,d=0;for(o=" "+n+" ";u=this[d++];)if(u.nodeType===1&&(" "+J(Y(u))+" ").indexOf(o)>-1)return!0;return!1}});var ce=/\r/g;c.fn.extend({val:function(n){var o,u,d,p=this[0];return arguments.length?(d=L(n),this.each(function(m){var g;this.nodeType===1&&(d?g=n.call(this,m,c(this).val()):g=n,g==null?g="":typeof g=="number"?g+="":Array.isArray(g)&&(g=c.map(g,function(C){return C==null?"":C+""})),o=c.valHooks[this.type]||c.valHooks[this.nodeName.toLowerCase()],(!o||!("set"in o)||o.set(this,g,"value")===void 0)&&(this.value=g))})):p?(o=c.valHooks[p.type]||c.valHooks[p.nodeName.toLowerCase()],o&&"get"in o&&(u=o.get(p,"value"))!==void 0?u:(u=p.value,typeof u=="string"?u.replace(ce,""):u??"")):void 0}}),c.extend({valHooks:{option:{get:function(n){var o=c.find.attr(n,"value");return o??J(c.text(n))}},select:{get:function(n){var o,u,d,p=n.options,m=n.selectedIndex,g=n.type==="select-one",C=g?null:[],_=g?m+1:p.length;for(m<0?d=_:d=g?m:0;d<_;d++)if(u=p[d],(u.selected||d===m)&&!u.disabled&&(!u.parentNode.disabled||!ue(u.parentNode,"optgroup"))){if(o=c(u).val(),g)return o;C.push(o)}return C},set:function(n,o){for(var u,d,p=n.options,m=c.makeArray(o),g=p.length;g--;)d=p[g],(d.selected=c.inArray(c.valHooks.option.get(d),m)>-1)&&(u=!0);return u||(n.selectedIndex=-1),m}}}}),c.each(["radio","checkbox"],function(){c.valHooks[this]={set:function(n,o){if(Array.isArray(o))return n.checked=c.inArray(c(n).val(),o)>-1}},T.checkOn||(c.valHooks[this].get=function(n){return n.getAttribute("value")===null?"on":n.value})});var he=t.location,$e={guid:Date.now()},xe=/\?/;c.parseXML=function(n){var o,u;if(!n||typeof n!="string")return null;try{o=new t.DOMParser().parseFromString(n,"text/xml")}catch{}return u=o&&o.getElementsByTagName("parsererror")[0],(!o||u)&&c.error("Invalid XML: "+(u?c.map(u.childNodes,function(d){return d.textContent}).join(`
`):n)),o};var et=/^(?:focusinfocus|focusoutblur)$/,Ie=function(n){n.stopPropagation()};c.extend(c.event,{trigger:function(n,o,u,d){var p,m,g,C,_,N,B,W,R=[u||D],X=H.call(n,"type")?n.type:n,ge=H.call(n,"namespace")?n.namespace.split("."):[];if(m=W=g=u=u||D,!(u.nodeType===3||u.nodeType===8)&&!et.test(X+c.event.triggered)&&(X.indexOf(".")>-1&&(ge=X.split("."),X=ge.shift(),ge.sort()),_=X.indexOf(":")<0&&"on"+X,n=n[c.expando]?n:new c.Event(X,typeof n=="object"&&n),n.isTrigger=d?2:3,n.namespace=ge.join("."),n.rnamespace=n.namespace?new RegExp("(^|\\.)"+ge.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,n.result=void 0,n.target||(n.target=u),o=o==null?[n]:c.makeArray(o,[n]),B=c.event.special[X]||{},!(!d&&B.trigger&&B.trigger.apply(u,o)===!1))){if(!d&&!B.noBubble&&!I(u)){for(C=B.delegateType||X,et.test(C+X)||(m=m.parentNode);m;m=m.parentNode)R.push(m),g=m;g===(u.ownerDocument||D)&&R.push(g.defaultView||g.parentWindow||t)}for(p=0;(m=R[p++])&&!n.isPropagationStopped();)W=m,n.type=p>1?C:B.bindType||X,N=(re.get(m,"events")||Object.create(null))[n.type]&&re.get(m,"handle"),N&&N.apply(m,o),N=_&&m[_],N&&N.apply&&Fe(m)&&(n.result=N.apply(m,o),n.result===!1&&n.preventDefault());return n.type=X,!d&&!n.isDefaultPrevented()&&(!B._default||B._default.apply(R.pop(),o)===!1)&&Fe(u)&&_&&L(u[X])&&!I(u)&&(g=u[_],g&&(u[_]=null),c.event.triggered=X,n.isPropagationStopped()&&W.addEventListener(X,Ie),u[X](),n.isPropagationStopped()&&W.removeEventListener(X,Ie),c.event.triggered=void 0,g&&(u[_]=g)),n.result}},simulate:function(n,o,u){var d=c.extend(new c.Event,u,{type:n,isSimulated:!0});c.event.trigger(d,null,o)}}),c.fn.extend({trigger:function(n,o){return this.each(function(){c.event.trigger(n,o,this)})},triggerHandler:function(n,o){var u=this[0];if(u)return c.event.trigger(n,o,u,!0)}});var Yt=/\[\]$/,ht=/\r?\n/g,Xt=/^(?:submit|button|image|reset|file)$/i,pt=/^(?:input|select|textarea|keygen)/i;function Kt(n,o,u,d){var p;if(Array.isArray(o))c.each(o,function(m,g){u||Yt.test(n)?d(n,g):Kt(n+"["+(typeof g=="object"&&g!=null?m:"")+"]",g,u,d)});else if(!u&&de(o)==="object")for(p in o)Kt(n+"["+p+"]",o[p],u,d);else d(n,o)}c.param=function(n,o){var u,d=[],p=function(m,g){var C=L(g)?g():g;d[d.length]=encodeURIComponent(m)+"="+encodeURIComponent(C??"")};if(n==null)return"";if(Array.isArray(n)||n.jquery&&!c.isPlainObject(n))c.each(n,function(){p(this.name,this.value)});else for(u in n)Kt(u,n[u],o,p);return d.join("&")},c.fn.extend({serialize:function(){return c.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var n=c.prop(this,"elements");return n?c.makeArray(n):this}).filter(function(){var n=this.type;return this.name&&!c(this).is(":disabled")&&pt.test(this.nodeName)&&!Xt.test(n)&&(this.checked||!Vt.test(n))}).map(function(n,o){var u=c(this).val();return u==null?null:Array.isArray(u)?c.map(u,function(d){return{name:o.name,value:d.replace(ht,`\r
`)}}):{name:o.name,value:u.replace(ht,`\r
`)}}).get()}});var Pt=/%20/g,xn=/#.*$/,oi=/([?&])_=[^&]*/,Ln=/^(.*?):[ \t]*([^\r\n]*)$/mg,St=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,nn=/^(?:GET|HEAD)$/,_i=/^\/\//,Rt={},rn={},on="*/".concat("*"),It=D.createElement("a");It.href=he.href;function sn(n){return function(o,u){typeof o!="string"&&(u=o,o="*");var d,p=0,m=o.toLowerCase().match(Ve)||[];if(L(u))for(;d=m[p++];)d[0]==="+"?(d=d.slice(1)||"*",(n[d]=n[d]||[]).unshift(u)):(n[d]=n[d]||[]).push(u)}}function Dn(n,o,u,d){var p={},m=n===rn;function g(C){var _;return p[C]=!0,c.each(n[C]||[],function(N,B){var W=B(o,u,d);if(typeof W=="string"&&!m&&!p[W])return o.dataTypes.unshift(W),g(W),!1;if(m)return!(_=W)}),_}return g(o.dataTypes[0])||!p["*"]&&g("*")}function Ui(n,o){var u,d,p=c.ajaxSettings.flatOptions||{};for(u in o)o[u]!==void 0&&((p[u]?n:d||(d={}))[u]=o[u]);return d&&c.extend(!0,n,d),n}function Ar(n,o,u){for(var d,p,m,g,C=n.contents,_=n.dataTypes;_[0]==="*";)_.shift(),d===void 0&&(d=n.mimeType||o.getResponseHeader("Content-Type"));if(d){for(p in C)if(C[p]&&C[p].test(d)){_.unshift(p);break}}if(_[0]in u)m=_[0];else{for(p in u){if(!_[0]||n.converters[p+" "+_[0]]){m=p;break}g||(g=p)}m=m||g}if(m)return m!==_[0]&&_.unshift(m),u[m]}function Eo(n,o,u,d){var p,m,g,C,_,N={},B=n.dataTypes.slice();if(B[1])for(g in n.converters)N[g.toLowerCase()]=n.converters[g];for(m=B.shift();m;)if(n.responseFields[m]&&(u[n.responseFields[m]]=o),!_&&d&&n.dataFilter&&(o=n.dataFilter(o,n.dataType)),_=m,m=B.shift(),m){if(m==="*")m=_;else if(_!=="*"&&_!==m){if(g=N[_+" "+m]||N["* "+m],!g){for(p in N)if(C=p.split(" "),C[1]===m&&(g=N[_+" "+C[0]]||N["* "+C[0]],g)){g===!0?g=N[p]:N[p]!==!0&&(m=C[0],B.unshift(C[1]));break}}if(g!==!0)if(g&&n.throws)o=g(o);else try{o=g(o)}catch(W){return{state:"parsererror",error:g?W:"No conversion from "+_+" to "+m}}}}return{state:"success",data:o}}c.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:he.href,type:"GET",isLocal:St.test(he.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":on,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":c.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(n,o){return o?Ui(Ui(n,c.ajaxSettings),o):Ui(c.ajaxSettings,n)},ajaxPrefilter:sn(Rt),ajaxTransport:sn(rn),ajax:function(n,o){typeof n=="object"&&(o=n,n=void 0),o=o||{};var u,d,p,m,g,C,_,N,B,W,R=c.ajaxSetup({},o),X=R.context||R,ge=R.context&&(X.nodeType||X.jquery)?c(X):c.event,ke=c.Deferred(),Se=c.Callbacks("once memory"),vt=R.statusCode||{},lt={},an={},ln="canceled",Oe={readyState:0,getResponseHeader:function(De){var tt;if(_){if(!m)for(m={};tt=Ln.exec(p);)m[tt[1].toLowerCase()+" "]=(m[tt[1].toLowerCase()+" "]||[]).concat(tt[2]);tt=m[De.toLowerCase()+" "]}return tt==null?null:tt.join(", ")},getAllResponseHeaders:function(){return _?p:null},setRequestHeader:function(De,tt){return _==null&&(De=an[De.toLowerCase()]=an[De.toLowerCase()]||De,lt[De]=tt),this},overrideMimeType:function(De){return _==null&&(R.mimeType=De),this},statusCode:function(De){var tt;if(De)if(_)Oe.always(De[Oe.status]);else for(tt in De)vt[tt]=[vt[tt],De[tt]];return this},abort:function(De){var tt=De||ln;return u&&u.abort(tt),si(0,tt),this}};if(ke.promise(Oe),R.url=((n||R.url||he.href)+"").replace(_i,he.protocol+"//"),R.type=o.method||o.type||R.method||R.type,R.dataTypes=(R.dataType||"*").toLowerCase().match(Ve)||[""],R.crossDomain==null){C=D.createElement("a");try{C.href=R.url,C.href=C.href,R.crossDomain=It.protocol+"//"+It.host!=C.protocol+"//"+C.host}catch{R.crossDomain=!0}}if(R.data&&R.processData&&typeof R.data!="string"&&(R.data=c.param(R.data,R.traditional)),Dn(Rt,R,o,Oe),_)return Oe;N=c.event&&R.global,N&&c.active++===0&&c.event.trigger("ajaxStart"),R.type=R.type.toUpperCase(),R.hasContent=!nn.test(R.type),d=R.url.replace(xn,""),R.hasContent?R.data&&R.processData&&(R.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&(R.data=R.data.replace(Pt,"+")):(W=R.url.slice(d.length),R.data&&(R.processData||typeof R.data=="string")&&(d+=(xe.test(d)?"&":"?")+R.data,delete R.data),R.cache===!1&&(d=d.replace(oi,"$1"),W=(xe.test(d)?"&":"?")+"_="+$e.guid+++W),R.url=d+W),R.ifModified&&(c.lastModified[d]&&Oe.setRequestHeader("If-Modified-Since",c.lastModified[d]),c.etag[d]&&Oe.setRequestHeader("If-None-Match",c.etag[d])),(R.data&&R.hasContent&&R.contentType!==!1||o.contentType)&&Oe.setRequestHeader("Content-Type",R.contentType),Oe.setRequestHeader("Accept",R.dataTypes[0]&&R.accepts[R.dataTypes[0]]?R.accepts[R.dataTypes[0]]+(R.dataTypes[0]!=="*"?", "+on+"; q=0.01":""):R.accepts["*"]);for(B in R.headers)Oe.setRequestHeader(B,R.headers[B]);if(R.beforeSend&&(R.beforeSend.call(X,Oe,R)===!1||_))return Oe.abort();if(ln="abort",Se.add(R.complete),Oe.done(R.success),Oe.fail(R.error),u=Dn(rn,R,o,Oe),!u)si(-1,"No Transport");else{if(Oe.readyState=1,N&&ge.trigger("ajaxSend",[Oe,R]),_)return Oe;R.async&&R.timeout>0&&(g=t.setTimeout(function(){Oe.abort("timeout")},R.timeout));try{_=!1,u.send(lt,si)}catch(De){if(_)throw De;si(-1,De)}}function si(De,tt,Xi,So){var un,Ki,cn,Mn,Hn,jt=tt;_||(_=!0,g&&t.clearTimeout(g),u=void 0,p=So||"",Oe.readyState=De>0?4:0,un=De>=200&&De<300||De===304,Xi&&(Mn=Ar(R,Oe,Xi)),!un&&c.inArray("script",R.dataTypes)>-1&&c.inArray("json",R.dataTypes)<0&&(R.converters["text script"]=function(){}),Mn=Eo(R,Mn,Oe,un),un?(R.ifModified&&(Hn=Oe.getResponseHeader("Last-Modified"),Hn&&(c.lastModified[d]=Hn),Hn=Oe.getResponseHeader("etag"),Hn&&(c.etag[d]=Hn)),De===204||R.type==="HEAD"?jt="nocontent":De===304?jt="notmodified":(jt=Mn.state,Ki=Mn.data,cn=Mn.error,un=!cn)):(cn=jt,(De||!jt)&&(jt="error",De<0&&(De=0))),Oe.status=De,Oe.statusText=(tt||jt)+"",un?ke.resolveWith(X,[Ki,jt,Oe]):ke.rejectWith(X,[Oe,jt,cn]),Oe.statusCode(vt),vt=void 0,N&&ge.trigger(un?"ajaxSuccess":"ajaxError",[Oe,R,un?Ki:cn]),Se.fireWith(X,[Oe,jt]),N&&(ge.trigger("ajaxComplete",[Oe,R]),--c.active||c.event.trigger("ajaxStop")))}return Oe},getJSON:function(n,o,u){return c.get(n,o,u,"json")},getScript:function(n,o){return c.get(n,void 0,o,"script")}}),c.each(["get","post"],function(n,o){c[o]=function(u,d,p,m){return L(d)&&(m=m||p,p=d,d=void 0),c.ajax(c.extend({url:u,type:o,dataType:m,data:d,success:p},c.isPlainObject(u)&&u))}}),c.ajaxPrefilter(function(n){var o;for(o in n.headers)o.toLowerCase()==="content-type"&&(n.contentType=n.headers[o]||"")}),c._evalUrl=function(n,o,u){return c.ajax({url:n,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(d){c.globalEval(d,o,u)}})},c.fn.extend({wrapAll:function(n){var o;return this[0]&&(L(n)&&(n=n.call(this[0])),o=c(n,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&o.insertBefore(this[0]),o.map(function(){for(var u=this;u.firstElementChild;)u=u.firstElementChild;return u}).append(this)),this},wrapInner:function(n){return L(n)?this.each(function(o){c(this).wrapInner(n.call(this,o))}):this.each(function(){var o=c(this),u=o.contents();u.length?u.wrapAll(n):o.append(n)})},wrap:function(n){var o=L(n);return this.each(function(u){c(this).wrapAll(o?n.call(this,u):n)})},unwrap:function(n){return this.parent(n).not("body").each(function(){c(this).replaceWith(this.childNodes)}),this}}),c.expr.pseudos.hidden=function(n){return!c.expr.pseudos.visible(n)},c.expr.pseudos.visible=function(n){return!!(n.offsetWidth||n.offsetHeight||n.getClientRects().length)},c.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch{}};var mu={0:200,1223:204},Yi=c.ajaxSettings.xhr();T.cors=!!Yi&&"withCredentials"in Yi,T.ajax=Yi=!!Yi,c.ajaxTransport(function(n){var o,u;if(T.cors||Yi&&!n.crossDomain)return{send:function(d,p){var m,g=n.xhr();if(g.open(n.type,n.url,n.async,n.username,n.password),n.xhrFields)for(m in n.xhrFields)g[m]=n.xhrFields[m];n.mimeType&&g.overrideMimeType&&g.overrideMimeType(n.mimeType),!n.crossDomain&&!d["X-Requested-With"]&&(d["X-Requested-With"]="XMLHttpRequest");for(m in d)g.setRequestHeader(m,d[m]);o=function(C){return function(){o&&(o=u=g.onload=g.onerror=g.onabort=g.ontimeout=g.onreadystatechange=null,C==="abort"?g.abort():C==="error"?typeof g.status!="number"?p(0,"error"):p(g.status,g.statusText):p(mu[g.status]||g.status,g.statusText,(g.responseType||"text")!=="text"||typeof g.responseText!="string"?{binary:g.response}:{text:g.responseText},g.getAllResponseHeaders()))}},g.onload=o(),u=g.onerror=g.ontimeout=o("error"),g.onabort!==void 0?g.onabort=u:g.onreadystatechange=function(){g.readyState===4&&t.setTimeout(function(){o&&u()})},o=o("abort");try{g.send(n.hasContent&&n.data||null)}catch(C){if(o)throw C}},abort:function(){o&&o()}}}),c.ajaxPrefilter(function(n){n.crossDomain&&(n.contents.script=!1)}),c.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(n){return c.globalEval(n),n}}}),c.ajaxPrefilter("script",function(n){n.cache===void 0&&(n.cache=!1),n.crossDomain&&(n.type="GET")}),c.ajaxTransport("script",function(n){if(n.crossDomain||n.scriptAttrs){var o,u;return{send:function(d,p){o=c("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",u=function(m){o.remove(),u=null,m&&p(m.type==="error"?404:200,m.type)}),D.head.appendChild(o[0])},abort:function(){u&&u()}}}});var Ws=[],Co=/(=)\?(?=&|$)|\?\?/;c.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var n=Ws.pop()||c.expando+"_"+$e.guid++;return this[n]=!0,n}}),c.ajaxPrefilter("json jsonp",function(n,o,u){var d,p,m,g=n.jsonp!==!1&&(Co.test(n.url)?"url":typeof n.data=="string"&&(n.contentType||"").indexOf("application/x-www-form-urlencoded")===0&&Co.test(n.data)&&"data");if(g||n.dataTypes[0]==="jsonp")return d=n.jsonpCallback=L(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,g?n[g]=n[g].replace(Co,"$1"+d):n.jsonp!==!1&&(n.url+=(xe.test(n.url)?"&":"?")+n.jsonp+"="+d),n.converters["script json"]=function(){return m||c.error(d+" was not called"),m[0]},n.dataTypes[0]="json",p=t[d],t[d]=function(){m=arguments},u.always(function(){p===void 0?c(t).removeProp(d):t[d]=p,n[d]&&(n.jsonpCallback=o.jsonpCallback,Ws.push(d)),m&&L(p)&&p(m[0]),m=p=void 0}),"script"}),T.createHTMLDocument=function(){var n=D.implementation.createHTMLDocument("").body;return n.innerHTML="<form></form><form></form>",n.childNodes.length===2}(),c.parseHTML=function(n,o,u){if(typeof n!="string")return[];typeof o=="boolean"&&(u=o,o=!1);var d,p,m;return o||(T.createHTMLDocument?(o=D.implementation.createHTMLDocument(""),d=o.createElement("base"),d.href=D.location.href,o.head.appendChild(d)):o=D),p=Wt.exec(n),m=!u&&[],p?[o.createElement(p[1])]:(p=Gn([n],o,m),m&&m.length&&c(m).remove(),c.merge([],p.childNodes))},c.fn.load=function(n,o,u){var d,p,m,g=this,C=n.indexOf(" ");return C>-1&&(d=J(n.slice(C)),n=n.slice(0,C)),L(o)?(u=o,o=void 0):o&&typeof o=="object"&&(p="POST"),g.length>0&&c.ajax({url:n,type:p||"GET",dataType:"html",data:o}).done(function(_){m=arguments,g.html(d?c("<div>").append(c.parseHTML(_)).find(d):_)}).always(u&&function(_,N){g.each(function(){u.apply(this,m||[_.responseText,N,_])})}),this},c.expr.pseudos.animated=function(n){return c.grep(c.timers,function(o){return n===o.elem}).length},c.offset={setOffset:function(n,o,u){var d,p,m,g,C,_,N,B=c.css(n,"position"),W=c(n),R={};B==="static"&&(n.style.position="relative"),C=W.offset(),m=c.css(n,"top"),_=c.css(n,"left"),N=(B==="absolute"||B==="fixed")&&(m+_).indexOf("auto")>-1,N?(d=W.position(),g=d.top,p=d.left):(g=parseFloat(m)||0,p=parseFloat(_)||0),L(o)&&(o=o.call(n,u,c.extend({},C))),o.top!=null&&(R.top=o.top-C.top+g),o.left!=null&&(R.left=o.left-C.left+p),"using"in o?o.using.call(n,R):W.css(R)}},c.fn.extend({offset:function(n){if(arguments.length)return n===void 0?this:this.each(function(p){c.offset.setOffset(this,n,p)});var o,u,d=this[0];if(d)return d.getClientRects().length?(o=d.getBoundingClientRect(),u=d.ownerDocument.defaultView,{top:o.top+u.pageYOffset,left:o.left+u.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var n,o,u,d=this[0],p={top:0,left:0};if(c.css(d,"position")==="fixed")o=d.getBoundingClientRect();else{for(o=this.offset(),u=d.ownerDocument,n=d.offsetParent||u.documentElement;n&&(n===u.body||n===u.documentElement)&&c.css(n,"position")==="static";)n=n.parentNode;n&&n!==d&&n.nodeType===1&&(p=c(n).offset(),p.top+=c.css(n,"borderTopWidth",!0),p.left+=c.css(n,"borderLeftWidth",!0))}return{top:o.top-p.top-c.css(d,"marginTop",!0),left:o.left-p.left-c.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var n=this.offsetParent;n&&c.css(n,"position")==="static";)n=n.offsetParent;return n||Ct})}}),c.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(n,o){var u=o==="pageYOffset";c.fn[n]=function(d){return He(this,function(p,m,g){var C;if(I(p)?C=p:p.nodeType===9&&(C=p.defaultView),g===void 0)return C?C[o]:p[m];C?C.scrollTo(u?C.pageXOffset:g,u?g:C.pageYOffset):p[m]=g},n,d,arguments.length)}}),c.each(["top","left"],function(n,o){c.cssHooks[o]=_r(T.pixelPosition,function(u,d){if(d)return d=ei(u,o),On.test(d)?c(u).position()[o]+"px":d})}),c.each({Height:"height",Width:"width"},function(n,o){c.each({padding:"inner"+n,content:o,"":"outer"+n},function(u,d){c.fn[d]=function(p,m){var g=arguments.length&&(u||typeof p!="boolean"),C=u||(p===!0||m===!0?"margin":"border");return He(this,function(_,N,B){var W;return I(_)?d.indexOf("outer")===0?_["inner"+n]:_.document.documentElement["client"+n]:_.nodeType===9?(W=_.documentElement,Math.max(_.body["scroll"+n],W["scroll"+n],_.body["offset"+n],W["offset"+n],W["client"+n])):B===void 0?c.css(_,N,C):c.style(_,N,B,C)},o,g?p:void 0,g)}})}),c.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(n,o){c.fn[o]=function(u){return this.on(o,u)}}),c.fn.extend({bind:function(n,o,u){return this.on(n,null,o,u)},unbind:function(n,o){return this.off(n,null,o)},delegate:function(n,o,u,d){return this.on(o,n,u,d)},undelegate:function(n,o,u){return arguments.length===1?this.off(n,"**"):this.off(o,n||"**",u)},hover:function(n,o){return this.mouseenter(n).mouseleave(o||n)}}),c.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(n,o){c.fn[o]=function(u,d){return arguments.length>0?this.on(o,null,u,d):this.trigger(o)}});var gu=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;c.proxy=function(n,o){var u,d,p;if(typeof o=="string"&&(u=n[o],o=n,n=u),!!L(n))return d=a.call(arguments,2),p=function(){return n.apply(o||this,d.concat(a.call(arguments)))},p.guid=n.guid=n.guid||c.guid++,p},c.holdReady=function(n){n?c.readyWait++:c.ready(!0)},c.isArray=Array.isArray,c.parseJSON=JSON.parse,c.nodeName=ue,c.isFunction=L,c.isWindow=I,c.camelCase=Et,c.type=de,c.now=Date.now,c.isNumeric=function(n){var o=c.type(n);return(o==="number"||o==="string")&&!isNaN(n-parseFloat(n))},c.trim=function(n){return n==null?"":(n+"").replace(gu,"$1")};var vu=t.jQuery,wu=t.$;return c.noConflict=function(n){return t.$===c&&(t.$=wu),n&&t.jQuery===c&&(t.jQuery=vu),c},typeof i>"u"&&(t.jQuery=t.$=c),c})})(Gc);const Hr=function(e){var t={automaticMaxWidth:!0,setDraggableTarget:function(A){return!0}},i=this;this.settings=mn.extend({},t,e);const r={};this.on=(A,T)=>{r[A]?r[A].push(T):r[A]=[T]},this.dispatch=(A,T)=>{r[A]&&r[A].forEach(L=>{L.call(this,T)})};var s=!0,a=null;this.getTarget=function(){return a},this.isVisible=function(){return s},this.show=function(){s=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){s=!1,this.wrapper.addClass("mw-handle-item-hidden"),this.wrapper.removeClass("mw-handle-active")};let l=null;this.setContent=function(A){l&&l.remove(),l=A,this.wrapper.append(l)},this.getContent=function(){return l},this.initDraggable=function(){this.draggable=new Kc({handle:this.settings.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},e),this.draggable.on("dragStart",function(){i.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){i.wrapper.removeClass("mw-handle-item-dragging"),i.position(i.getTarget())})};const f=()=>{if(this.settings.document.defaultView.pageYOffset!==void 0)return{x:this.settings.document.defaultView.pageXOffset,y:this.settings.document.defaultView.pageYOffset};{let A,T,L=this.settings.document,I=L.documentElement,D=L.body;return A=I.scrollLeft||D.scrollLeft||0,T=I.scrollTop||D.scrollTop||0,{x:A,y:T}}};this.position=function(A){if(!A)return;const T=Xe.offset(A),L=f(),I=this.wrapper.get(0).querySelector(".mw-handle-item-menus-holder");if(I){let le;L.y>T.top-10&&(le=L.y-(T.top-10),le+I.offsetHeight+30>T.height&&(le=T.height-(I.offsetHeight+30))),I.style.transition="none",I.style.transform=le?`translateY(${le}px)`:"",typeof this.settings.onPosition=="function"&&this.settings.onPosition(I,le,T),setTimeout(()=>I.style.transition="",10)}var D=T.height;D||(D=A.scrollHeight),this.wrapper.css({top:T.top,left:T.left,width:T.width,height:D})};var w;this.setDraggable=function(A){if(typeof value=="boolean")return w=value,this;typeof this.settings.setDraggableTarget=="function"&&(w=this.settings.setDraggableTarget(A)),this.wrapper.get(0).dataset.draggable=w},this.getDraggable=function(){return w},this.set=function(A,T){if(!A){a=null,this.setDraggable(!1);return}return this.position(A),this.setDraggable(A),this.show(),this.draggable.setElement(A),(a!==A||T)&&(a=A,this.dispatch("targetChange",A)),setTimeout(()=>this.wrapper.addClass("mw-handle-active"),1),this};var b=!1;this.draggablePaused=function(A){return typeof A<"u"&&(b=A),b},this.createHandle=function(){if(this.settings.handle==="self"){var A=Ee({tag:"div",props:{className:"mw-handle-item-draggable-self"}});this.wrapper.append(A),this.settings.document.addEventListener("mousedown",function(){const T=i.draggablePaused();T!==!0&&T!==i.getTarget()&&A.addClass("active")}),this.settings.document.addEventListener("mouseup",function(){A.removeClass("active")}),this.settings.handle=A,this.handle=A,this.wrapper.append(A);return}this.settings.handle?(this.settings.handle,this.handle=this.settings.handle):(this.handle=Ee({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))};var S=this.settings.document.defaultView.innerWidth,H=this.settings.document.defaultView.innerHeight;this.resizableMaxWidth=function(A){if(typeof A>"u")return S;S=A},this.resizableMaxHeight=function(A){if(typeof A>"u")return H;H=A},this.findClosestElementByClass=function(A,T=200){let L=[],I=A,D=0;for(;I!==document;){const le=I.parentNode.querySelectorAll(".element,.module");if(le.length>0&&(L=[...le].filter(we=>Math.abs(A.getBoundingClientRect().top-we.getBoundingClientRect().top)<=T),L.length>0)||(I=I.parentNode,D++,D>T/10))break}return L};function M(A,T,L,I){var D=Math.min(L/A,I/T);return{width:A*D,height:T*D}}this.resizable=function(){this.settings.resizable&&(this.resizer=new qa({element:this.wrapper.get(0),document:this.settings.document}),this.resizer.mount(),this.resizer.on("resize",A=>{const T=this.getTarget(),L=T.$$prevData||A;this.settings.automaticMaxWidth&&(T.style.maxWidth="100%"),T.nodeName==="IMG"?(A=M(T.offsetWidth,T.offsetHeight,A.width,A.height),T.style.height=A.height+"px",T.style.width=A.width+"px"):(T.style.minHeight=A.height+"px",T.style.width=A.width+"px");var I=T.classList.contains("mw-col");if(I){const D=T.nextElementSibling,le=T.previousElementSibling;if(D){const we=D.offsetWidth;L.width>A.width?D.style.width=we+(L.width-A.width)+"px":D.style.width=we-(A.width-L.width)+"px"}else if(le){const we=le.offsetWidth;L.width>A.width?le.style.width=we+(L.width-A.width)+"px":le.style.width=we-(A.width-L.width)+"px"}}this.set(T),T.$$prevData=A}))},this.createWrapper=function(){this.wrapper=Ee({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),Ee(document.body).on("mouseup touchend",function(){i.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide(),this.resizable(),this.settings.document.addEventListener("orientationChange",A=>this.position(this.getTarget())),this.settings.document.defaultView.addEventListener("resize",A=>this.position(this.getTarget())),this.settings.document.addEventListener("scroll",A=>this.position(this.getTarget()))},Jc=function(e){e=e||{},this.tools=Xe;var t=this,i={exceptions:["mw-handle-item"]};this.settings=mn.extend({},i,e),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var r=20,s=function(f){return f%5>=2.5?f/5*5+5:f/5*5},a=function(f,w){f=s(f),w=s(w);for(var b=[],S=f-r,H=f+r,M=w-r,A=w+r;S<H;S+=5)for(;M<=A;M+=5)b.push([S,M]);return b},l=function(f,w){f&&f.parentElement&&w.indexOf(f)===-1&&t.body!==f&&w.push(f)};this.fromEvent=function(f){let w,b;return f.pageX?(w=f.pageX,b=f.pageY):f.targetTouches&&f.targetTouches[0]?(w=f.targetTouches[0].pageX,b=f.targetTouches[0].pageY):f.touches&&f.touches[0]&&(w=f.touches[0].pageX,b=f.touches[0].pageY),t.tools.hasAnyOfClassesOnNodeOrParent(f.target,this.settings.exceptions)?[]:this.fromPoint(w,b)},this.fromPoint=function(f,w){var b=[];if(t.document.defaultView.frameElement&&(w-=t.document.defaultView.scrollY),isNaN(f)||isNaN(w))return b;var S=t.document.elementFromPoint(f,w);if(!S)return[];l(S,b);var H=a(f,w);return H.forEach(function(M){l(t.document.elementFromPoint(M[0],M[1]),b)}),b}},Qc=function(e){return Xe.matches(e,'.row,[class*="row-"]')},Zc=function(e){return Xe.matches(e,'.col,[class*="col-"]')};let In;const ra=function(){return In||(In=document.createElement("div"),In.style.visibility="hidden",In.style.position="absolute",In.style.width="1px",In.style.height="1px",document.body.appendChild(In)),In},Pr={},ed=function(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof Pr[t]<"u")return Pr[t];var i=document.createElement(t);return ra().appendChild(i),Pr[t]=getComputedStyle(i).display==="block",ra().removeChild(i),Pr[t]},td=(e,t,i)=>{e=e||"*";for(var r=t.querySelectorAll(e),s=0,a=[];s<r.length;s++)mw.tools.parentsOrCurrentOrderMatchOrOnlyFirst(r[s],["edit","module"])&&!Zc(r[s])&&!Qc(r[s])&&!i.elementAnalyzer.isEdit(r[s])&&ed(r[s])&&a.push(r[s]);return a},nd=e=>{const{backgroundImageHolder:t,editClass:i,moduleClass:r,elementClass:s,allowDrop:a}=e.settings,l=e.root;for(var f=l.querySelectorAll("."+i+"."+t+", ."+i+" ."+t+", ."+i+'[style*="background-image"], .'+i+' [style*="background-image"]'),w=l.querySelectorAll("."+r+e.settings.unEditableModules.join(",."+r)),b=l.querySelectorAll("."+i),S=0,H=0,M=0;S<f.length;S++){var A=f[S];e.elementAnalyzer.isInEdit(A)&&(mw.tools.hasClass(A,r),A.style.backgroundImage||(A.style.backgroundImage="none"))}for(;H<w.length;H++)w[S].classList.remove(r);for(;M<b.length;M++){for(var T=td(":not(."+s+")",b[M],e),L=0,I=b[M].querySelectorAll("img,."+a),D=0;D<I.length;D++)e.elementAnalyzer.isInEdit(I[D])&&e.canBeElement(I[D])&&I[D].classList.add(s);for(;L<T.length;L++)T[L].classList.contains(r)||e.elementAnalyzer.isInEdit(T[L])&&e.canBeElement(T[L])&&T[L].classList.add(s)}},id=function(e){this.handles=e,this.dragging=!1;var t=this;this.get=function(i){return this.handles[i]},this.set=function(i,r){this.get(i).set(r)},this.hide=function(i){i&&this.handles[i]?this.handles[i].hide():this.each(function(r,s){s.hide()})},this.hideAllBut=function(i){this.each(function(r,s){r!==i&&s.hide()})},this.show=function(i){i&&this.handles[i]?this.handles[i].show():this.each(function(r,s){s.show()})},this.each=function(i){if(i){var r;for(r in this.handles)i.call(t,r,this.handles[r])}},this.targetIsSelected=function(i,r){if(i){i=i.target||i;var s;for(s in this.handles){if(r&&r===this.handles[s])continue;const a=this.handles[s].getTarget();if(a&&a===i)return!0}return!1}},this.targetIsSelectedAndHandleIsNotHidden=function(i,r){if(i){i=i.target||i;var s;for(s in this.handles){if(r&&r===this.handles[s])continue;const a=this.handles[s].getTarget();if(a&&a===i)return this.handles[s].isVisible()}return!1}},this.targetIsOrInsideHandle=function(i,r){if(i){i=i.target||i;var s;for(s in this.handles)if(!(r&&r===this.handles[s])&&(this.handles[s].wrapper.get(0)===i||this.handles[s].wrapper.get(0).contains(i)))return!0;return!1}},this.init=function(){this.each(function(i,r){r.draggable.on("dragStart",function(){t.dragging=!0,t.hideAllBut(i)}),r.draggable.on("dragEnd",function(){t.dragging=!1,r.show()})})},this.init()},rd=function(e){e=e||{};const t={template:"default"};let i={};this.settings=mn.extend({},t,e),this._indicator=null;const r={};this.on=function(w,b){r[w]?r[w].push(b):r[w]=[b]},this.dispatch=function(w,b){r[w]&&r[w].forEach(function(S){S.call(this,b)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,i={})},this.show=function(){this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const s=["before-top","prepend-top","after-bottom","append-bottom"],a="mw-drop-indicator-position-",l=s.map(function(w){return a+w});let f=null;this.position=function(w,b){if(!(!w||!b)&&!(i.target===w&&i.position===b)){i.target=w,i.position=b,f!==b&&(this._indicator.removeClass(l),f=b,this._indicator.addClass(a+b));var S=Xe.offset(w);this._indicator.css({height:S.height,left:S.left,top:S.top,width:S.width}),this.show()}},this.make=function(){this._indicator=Ee(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},od=(e,t,i)=>{!e||!t||(e=e.isMWElement?e.get(0):e,e.dataset.tooltip=t,e.title=t,e.dataset.tooltipposition=i||"top-center")},oo=function(e){this.options=e||{};var t=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=Ee({props:{className:"mw-le-handle-menu",id:t.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=Ee({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var i,r,s,a=function(){i=Ee({props:{className:"mw-le-handle-menu-title"}}),r=Ee({props:{className:"mw-le-handle-menu-title-text"}}),s=Ee({props:{className:"mw-le-handle-menu-title-icon"}}),i.append(r),i.append(s),t.root.prepend(i),t.title=i},l=null;this.getTarget=function(){return l},this.setTarget=function(f){l=f;var w=0;this.rebuildButtons(),setTimeout(()=>{for(;w<this.buttons.length;w++){const b=this.buttons[w].config,S=this.buttons[w].button;b&&b.onTarget&&b.onTarget(f,S.get(0),t.options.rootScope)}e.handleScope&&e.handleScope.handle.draggable.handleInit()})},this.setTitle=function(f,w){r.html(f||""),s.html(w||"")},this.buttons=[],this.prepareMenu=function(){this.buttons=[]},this.getMenu=function(f){for(let w=0;w<this.options.menus.length;w++)if(this.options.menus[w].name===f)return this.options.menus[w].name},this.setMenu=function(f,w){let b=!1;for(let S=0;S<this.options.menus.length;S++)this.options.menus[S].name===f&&(this.options.menus[S].nodes=w,b=!0);b||this.options.menus.push({name:f,nodes:w}),this.rebuildButtons()},this.rebuildButtons=function(){this.buttonsHolder.empty(),this.buildButtons()},this.buildButtons=function(f,w){this.prepareMenu(),w=w||this.buttonsHolder,f=f||this.options.menus,f&&f.filter(b=>!!b).forEach(function(b){b.nodes&&b.nodes.forEach?b.nodes.forEach(function(S){w.append(t.button(S))}):(b.title||b.icon)&&t.button(b)})},this.button=function(f){var w=Ee({props:{className:"mw-le-handle-menu-button"+(f.className?" "+f.className:"")}}),b={props:{className:"mw-le-handle-menu-button-content"}},S=Ee(b);if(f.title&&od(S,f.title),f.icon){var H=Ee({props:{className:"mw-le-handle-menu-button-icon",innerHTML:f.icon}});S.append(H)}if(f.text){var M=Ee({props:{className:"mw-le-handle-menu-button-text",innerHTML:f.text}});S.append(M)}w.append(S),this.buttons.push({button:w,config:f});const A="mousedown touchstart";if(f.menu){var T=Ee({props:{className:"mw-le-handle-menu-button-sub-menu"}});w.append(T),t.buildButtons(f.menu,T),w.on(A,function(){this.classList.toggle("sub-menu-active")})}else typeof f.action=="function"&&w.on(A,function(){f.action(t.getTarget(),w.get(0))});return w},this.init=function(){this.create(),a(),this.setTitle(t.options.title,t.options.icon),this.buildButtons(),this.hide()},this.init()},sd=(e,t)=>{const i=Ee({props:{className:"modal-footer"}}),r=Ee({props:{className:"mw-admin-action-links mw-adm-liveedit-tabs text-danger ms-2",innerHTML:e||"REMOVE"}}),s=Ee({props:{className:"mw-admin-action-links mw-adm-liveedit-tabs me-2",innerHTML:t||"CANCEL"}});return i.append(s),i.append(r),{ok:r,cancel:s,footer:i}};var Fn,ps,ad;class $a{constructor(t){At(this,ps);At(this,Fn,{});t=t||{};const i={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},i,t),this.settings.id||(this.settings.id="mw-le-dialog-"+Date.now()),this.build(),setTimeout(r=>this.open())}on(t,i){ve(this,Fn)[t]?ve(this,Fn)[t].push(i):ve(this,Fn)[t]=[i]}dispatch(t,i){ve(this,Fn)[t]&&ve(this,Fn)[t].forEach(r=>{r.call(this,i)})}build(){const t=`


                <div class="modal-dialog modal-sm modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Please confirm</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body py-2 mb-2">

                        </div>
                    </div>
                </div>


        `;this.root=Ee({props:{className:"modal",tabIndex:-1}}),this.root.html(t);var i=this.root.find(".modal-body"),r=this.root.find(".modal-content");this.container=i,i.append(this.settings.content),this.settings.footer&&r.append(this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this._modal=new bootstrap.Modal(this.root.get(0),{}),this.open()}open(){this._modal.show()}show(){this._modal.show()}hide(){this._modal.hide()}close(){this._modal.hide()}toggle(){this._modal.toggle()}remove(){this._modal.hide(),this._modal.dispose()}overlay(){this.overlay=Ee({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}Fn=new WeakMap,ps=new WeakSet,ad=function(t){(t.key==="Escape"||t.keyCode===27)&&this.remove()};const xs=function(e,t){const i=sd(),r=new $a({content:e,footer:i.footer.get(0),title:mw.lang("Remove section")});return i.cancel.on("click",function(){r.remove()}),i.ok.on("click",function(){t&&t.call(),r.remove()}),r},ld=function(e){this.root=Ee({props:{id:"mw-handle-item-element-root"}});const i=[{title:"Drag",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7,19V17H9V19H7M11,19V17H13V19H11M15,19V17H17V19H15M7,15V13H9V15H7M11,15V13H13V15H11M15,15V13H17V15H15M7,11V9H9V11H7M11,11V9H13V11H11M15,11V9H17V11H15M7,7V5H9V7H7M11,7V5H13V7H11M15,7V5H17V7H15Z" /></svg>',className:"mw-handle-drag-button mw-handle-drag-button-element",onTarget:function(a,l){}},{title:"Edit",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M181.674-179.761h41.13l441.087-441.565-41.13-41.13-441.087 441.565v41.13Zm613.043-484.326L665.761-793.043l36.978-37.218q19.631-19.63 47.859-19.75 28.228-.119 47.859 19.272l37.782 37.782q18.435 18.196 17.837 44.153-.598 25.956-18.315 43.674l-41.044 41.043Zm-41.76 41.761L247.761-117.13H118.804v-128.957l504.957-504.956 129.196 128.717Zm-109.392-19.565-20.804-20.565 41.13 41.13-20.326-20.565Z"/></svg>',className:"mw-handle-add-button",onTarget:function(a,l){},action:function(a){mw.app.editor.dispatch("editNodeRequest",a)}},{title:"Insert module",text:"",icon:'<svg style="stroke-width: 500;" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M445.935-195.935v-250h-250v-68.13h250v-250h68.13v250h250v68.13h-250v250h-68.13Z"/></svg>',className:"mw-handle-add-button",onTarget:function(a,l){},action:function(a){console.log(a),mw.app.editor.dispatch("insertModuleRequest",a)}},{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(a,l){},action:function(a){mw.app.editor.dispatch("elementSettingsRequest",a)}},...[{title:"Duplicate",text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg>',className:"mw-handle-clone-button",onTarget:function(a,l){l.style.display=a.classList.contains("cloneable")||a.classList.contains("mw-col")?"":"none"},action:function(a){Ee(a).after(a.outerHTML);var l=a.nextElementSibling;a.classList.contains("mw-col")&&(a.style.width="",l.style.width=""),e.elementHandle.set(a),mw.app.registerChangedState(a)}},{title:"Move backward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20 13.5C20 17.09 17.09 20 13.5 20H6V18H13.5C16 18 18 16 18 13.5S16 9 13.5 9H7.83L10.91 12.09L9.5 13.5L4 8L9.5 2.5L10.92 3.91L7.83 7H13.5C17.09 7 20 9.91 20 13.5Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(a,l){const f=a.classList.contains("cloneable")||a.classList.contains("mw-col"),w=a.previousElementSibling;l.style.display=f&&w?"":"none"},action:function(a){const l=a.previousElementSibling;l&&(l.before(a),e.elementHandle.set(a),mw.app.registerChangedState(a))}},{title:"Move forward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M10.5 18H18V20H10.5C6.91 20 4 17.09 4 13.5S6.91 7 10.5 7H16.17L13.08 3.91L14.5 2.5L20 8L14.5 13.5L13.09 12.09L16.17 9H10.5C8 9 6 11 6 13.5S8 18 10.5 18Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(a,l){const f=a.classList.contains("cloneable")||a.classList.contains("mw-col"),w=a.nextElementSibling;l.style.display=f&&w?"":"none"},action:function(a){const l=a.nextElementSibling;l&&(l.after(a),e.elementHandle.set(a),mw.app.registerChangedState(a))}}]],r=[{title:e.lang("Delete"),text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" ><path d="M0 0h24v24H0V0z" fill="none"></path><path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"></path></svg>',className:"mw-handle-insert-button",action:function(a){xs(Ee("<span>Are you sure you want to delete this element?</span>"),()=>{mw.app.registerChangedState(a),a.remove(),e.elementHandle.hide()})}}];this.menu=new oo({id:"mw-handle-item-element-menu",title:"Element",handleScope:this,menus:[{name:"primary",nodes:i},{name:"dynamic",nodes:[]},{name:"tail",nodes:r}]}),this.menu.show(),this.menusHolder=document.createElement("div"),this.menusHolder.className="mw-handle-item-menus-holder";var s=mw.element(this.menusHolder);s.append(this.menu.root),this.root.append(this.menusHolder)},Ur=function(e){mw.app.editor.dispatch("onModuleSettingsRequest",e);var t=e.dataset.type||e.getAttribute("type");t=t.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+t,e)},ud=function(e){var t=this;this.root=Ee({props:{id:"mw-handle-item-module-root",contentEditable:!1}}),this.tools=Xe;const i=[{title:"Drag",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7,19V17H9V19H7M11,19V17H13V19H11M15,19V17H17V19H15M7,15V13H9V15H7M11,15V13H13V15H11M15,15V13H17V15H15M7,11V9H9V11H7M11,11V9H13V11H11M15,11V9H17V11H15M7,7V5H9V7H7M11,7V5H13V7H11M15,7V5H17V7H15Z" /></svg>',className:"mw-handle-drag-button mw-handle-drag-button-module",onTarget:function(s,a){}},{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M181.674-179.761h41.13l441.087-441.565-41.13-41.13-441.087 441.565v41.13Zm613.043-484.326L665.761-793.043l36.978-37.218q19.631-19.63 47.859-19.75 28.228-.119 47.859 19.272l37.782 37.782q18.435 18.196 17.837 44.153-.598 25.956-18.315 43.674l-41.044 41.043Zm-41.76 41.761L247.761-117.13H118.804v-128.957l504.957-504.956 129.196 128.717Zm-109.392-19.565-20.804-20.565 41.13 41.13-20.326-20.565Z"/></svg>',action:()=>{const s=mw.app.get("liveEdit").handles.get("module").getTarget();Ur(s)},onTarget:function(s,a){s.classList.contains("no-settings")?a.style.display="none":a.style.display=""}},{title:"Insert module",text:"",icon:'<svg style="stroke-width: 500;" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M445.935-195.935v-250h-250v-68.13h250v-250h68.13v250h250v68.13h-250v250h-68.13Z"/></svg>',className:"mw-handle-add-button",onTarget:function(s,a){t.tools.parentsOrCurrentOrderMatchOrOnlyFirst(s.parentNode,["edit","module"])?a.style.display="":a.style.display="none"},action:function(s){mw.app.editor.dispatch("insertModuleRequest",s)}}],r=[{title:"Delete",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" ><path d="M0 0h24v24H0V0z" fill="none"></path><path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"></path></svg>',action:()=>{xs(Ee("<span>Are you sure you want to delete this module?</span>"),()=>{const s=mw.app.get("liveEdit").handles.get("module").getTarget();var a=s.dataset.type||s.getAttribute("type");a=a.trim(),mw.app.registerChangedState(s),s.remove(),mw.app.editor.dispatch("moduleRemoved",s),mw.app.editor.dispatch("modulet@"+a+"Removed",s),e.moduleHandle.hide()})},onTarget:(s,a)=>{this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(s.parentNode,["edit","module"])?a.style.display="":a.style.display="none"}}];this.menu=new oo({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,handleScope:this,menus:[{name:"primary",nodes:i},{name:"dynamic",nodes:[]},{name:"tail",nodes:r}]}),this.menu.show(),this.menusHolder=document.createElement("div"),this.menusHolder.className="mw-handle-item-menus-holder",this.menusHolder.append(this.menu.root.get(0)),this.root.append(this.menusHolder)},cd=function(e){this.root=Ee({props:{id:"mw-handle-item-layout-root"}});const t={};this.on=(a,l)=>{t[a]?t[a].push(l):t[a]=[l]},this.dispatch=(a,l)=>{t[a]&&t[a].forEach(f=>{f.call(this,l)})};const i=[{title:e.lang("Settings"),text:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M181.674-179.761h41.13l441.087-441.565-41.13-41.13-441.087 441.565v41.13Zm613.043-484.326L665.761-793.043l36.978-37.218q19.631-19.63 47.859-19.75 28.228-.119 47.859 19.272l37.782 37.782q18.435 18.196 17.837 44.153-.598 25.956-18.315 43.674l-41.044 41.043Zm-41.76 41.761L247.761-117.13H118.804v-128.957l504.957-504.956 129.196 128.717Zm-109.392-19.565-20.804-20.565 41.13 41.13-20.326-20.565Z"/></svg>',className:"mw-handle-button-wide mw-handle-edit-layout-button",action:function(a){Ur(a)}}],r=[{title:e.lang("Clone"),text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M178.087-70.717q-27.698 0-48.034-20.336t-20.336-48.034v-600.848h68.37v600.848h471.848v68.37H178.087Zm128.131-128.37q-27.599 0-47.865-20.266-20.266-20.266-20.266-47.865v-555.695q0-27.698 20.266-48.034t47.865-20.336h435.695q27.698 0 48.034 20.336t20.336 48.034v555.695q0 27.599-20.336 47.865-20.336 20.266-48.034 20.266H306.218Zm0-68.131h435.695v-555.695H306.218v555.695Zm0 0v-555.695 555.695Z"/></svg>',className:"mw-handle-insert-button",onTarget:function(a,l){Xe.parentsOrCurrentOrderMatchOrOnlyFirst(a.parentNode,["edit","module"])?l.style.display="":l.style.display="none"},action:function(a,l,f){var w=document.createElement("div");w.innerHTML=a.outerHTML,Ee("[id]",w).each(function(){this.id="le-id-"+new Date().getTime()}),Ee(a).after(w.innerHTML);var b=a.nextElementSibling;mw.reload_module(b,function(){mw.top().app.state.record({target:mw.tools.firstParentWithClass(a,"edit"),value:parent.innerHTML})}),b.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})}},{title:e.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(a,l){Xe.parentsOrCurrentOrderMatchOrOnlyFirst(a.parentNode,["edit","module"])&&a.nextElementSibling!==null?l.style.display="":l.style.display="none"},action:function(a,l){var f=a.nextElementSibling;if(f){var w=a.getBoundingClientRect(),b=f.getBoundingClientRect(),S=0;w.top<b.top&&(S=-(w.top-b.top)),a.classList.add("mw-le-target-to-animate"),f.classList.add("mw-le-target-to-animate"),a.style.transform="translateY("+S+"px)",f.style.transform="translateY("+-S+"px)",setTimeout(function(){f.parentNode.insertBefore(a,f.nextSibling),a.classList.remove("mw-le-target-to-animate"),f.classList.remove("mw-le-target-to-animate"),a.style.transform="",f.style.transform="",a.scrollIntoView({behavior:"smooth",block:"start",inline:"start"}),e.layoutHandle.set(a,!0)},300)}}},{title:e.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(a,l,f){Xe.parentsOrCurrentOrderMatchOrOnlyFirst(a.parentNode,["edit","module"])&&a.previousElementSibling!==null?l.style.display="":l.style.display="none"},action:function(a,l){var f=a.previousElementSibling;if(f){var w=a.getBoundingClientRect(),b=f.getBoundingClientRect(),S=0;w.top>b.top&&(S=-(w.top-b.top)),a.classList.add("mw-le-target-to-animate"),f.classList.add("mw-le-target-to-animate"),a.style.transform="translateY("+S+"px)",f.style.transform="translateY("+-S+"px)",setTimeout(function(){f.parentNode.insertBefore(a,f),a.classList.remove("mw-le-target-to-animate"),f.classList.remove("mw-le-target-to-animate"),a.style.transform="",f.style.transform="",e.layoutHandle.set(a,!0),a.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})},300)}}},,],s=[{title:e.lang("Delete"),text:e.lang("Delete"),icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" ><path d="M0 0h24v24H0V0z" fill="none"></path><path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"></path></svg>',className:"mw-handle-button-wide mw-handle-layout-delete-button",onTarget:function(a,l){Xe.parentsOrCurrentOrderMatchOrOnlyFirst(a.parentNode,["edit","module"])?l.style.display="":l.style.display="none"},action:function(a,l,f){xs("Are you sure you want to delete this layout?",function(){mw.app.registerChange(a),a.remove()})}}];this.addButtons=function(){var a="Add Layout",l=f=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+f.charAt(0).toUpperCase()+f.slice(1))};this.plusTop=Ee({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:e.lang(a)}}),this.plusBottom=Ee({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:e.lang(a)}}),this.plusTop.on("click",function(){l("top")}),this.plusBottom.on("click",function(){l("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.addButtons(),this.menusHolder=document.createElement("div"),this.menusHolder.className="mw-handle-item-menus-holder",this.menu=new oo({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,menus:[{name:"editNavigation",nodes:i},{name:"primary",nodes:r},{name:"dynamic",nodes:[]},{name:"tail",nodes:s}]}),this.menu.show(),this.menusHolder.append(this.menu.root.get(0)),this.root.append(this.menusHolder)},oa={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},dd=(e,t)=>((!t||!oa[t])&&(t="en"),oa[t][e]||e),fd=function(e){this.root=Ee({props:{id:"mw-handle-interaction-item-element-root"}}),this.menu=new oo({id:"mw-handle-item-element-menu",title:"Element",buttons:[]}),this.menu.show(),this.root.append(this.menu.root)};mw.options={saveOption:function(e,t,i){if(typeof e!="object")return!1;var r=e.group||e.option_group,s=e.key||e.option_key,a=typeof e.value<"u"?e.value:e.option_value;if(!r||!s||typeof a>"u")return!1;var l=!1;typeof e.lang<"u"&&(l=e.lang);var f={option_group:r,option_key:s,option_value:a};return l&&(f.lang=l),$.ajax({type:"POST",url:mw.settings.site_url+"api/save_option",data:f,success:function(w){typeof t=="function"&&t.call(w)},error:function(w){typeof i=="function"&&i.call(w)}})},save:function(e,t){e=mw.$(e);var i,r,s;if(e){var a=e.attr("data-id");r=i=e.attr("option-group")||e.attr("option_group")||e.attr("data-option-group");var l=null,f=mw.tools.firstParentWithClass(e[0],"module");f&&(l=f.id,l=mw.$(f).attr("for-module-id")||f.id);var w=e.attr("data-reload")||e.attr("data-refresh"),b=e.attr("data-reload")||e.attr("data-also-reload"),S=mw.$(mw.dialog.get(e).container);if(s==null&&S!==void 0)var H=S.attr("data-settings-for-module");if(s==null)var s=e.attr("data-refresh");var M=0,A=S!==void 0?S.attr("data-type"):void 0,T,L,I;if(e[0].type==="checkbox")if(T="",L=e.attr("data-value-unchecked"),I=e.attr("data-value-checked"),L&&I)T=e[0].checked?I:L;else for(var D=document.getElementsByName(e[0].name),M=0,le=D.length;M<le;M++){var we=D[M].value;T=D[M].checked==!0?T===""?we:T+","+we:T}else T=e.val();typeof i>"u"&&typeof i>"u"&&l&&(i=l);var de={option_key:e.attr("name"),option_group:i,option_value:T};if(A===void 0)if(A===void 0&&f!==void 0&&f&&$(f).attr("data-type")){var Ce=$(f).attr("data-type");A=Ce.replace("/admin",""),de.module=A}else f!==void 0&&f&&$(f).attr("parent-module")&&(de.module=$(f).attr("parent-module"));A!==void 0&&(de.module=A),H!==void 0&&(de.for_module_id=H),i!=null&&(de.id=U);var U=e.attr("data-custom-field-id");U!=null&&(de.id=U);var c=e.attr("data-option-type");if(c!=null)de.option_type=c;else{var c=e.attr("option-type");c!=null&&(de.option_type=c)}var ie=e.attr("parent-reload");a!==void 0&&(de.id=a);var ue=e.attr("lang");typeof ue<"u"&&(de.lang=ue);var Ne=e.attr("module");typeof Ne<"u"&&(de.module=Ne),$.ajax({type:"POST",url:mw.settings.site_url+"api/save_option",data:de,success:function(Z){var K=null;typeof s>"u"?K=r:w&&(K=w),(typeof liveEditSettings<"u"&&liveEditSettings||mw.top().win.liveEditSettings)&&!r&&l&&(K=l);var ee=!1;mw.admin&&mw.top().win.mweditor&&mw.top().win.mweditor.contentWindow&&setTimeout(function(){mw.top().win.mweditor.contentWindow.mw.reload_module("#"+K)},777),window.parent.mw&&(self!==top&&setTimeout(function(){var se=window.parent.document.getElementById(K);if(se){var _e=window.mw.parent().tools.firstMatchesOnNodeOrParent(se,[".edit:not([itemprop=dateModified])"]);_e||(_e=window.mw.parent().tools.firstMatchesOnNodeOrParent(se,[".edit[rel=inherit]"])),_e&&(window.mw.parent().wysiwyg.change(_e),window.mw.parent().askusertostay=!0)}mw.reload_module_parent("#"+K),K!=r&&mw.reload_module_parent("#"+r),typeof mw<"u"&&mw.top().app&&mw.top().app.editor&&mw.top().app.editor.dispatch("onModuleSettingsChanged",{moduleId:K}),ee=1},777),window.mw.parent().reload_module!=null&&(mw.admin?setTimeout(function(){window.mw.parent().reload_module("#"+K),mw.options.___rebindAllFormsAfterReload()},777):(window.parent.mweditor!=null&&window.parent.mweditor.contentWindow.mw.reload_module("#"+K,function(){setTimeout(function(){window.mw.parent().exec("mw.admin.editor.set",window.parent.mweditor),mw.options.___rebindAllFormsAfterReload()},777)}),window.parent.mw!=null&&window.mw.parent().reload_module("#"+K,function(){setTimeout(function(){window.mw.parent().exec("mw.admin.editor.set",window.parent.mweditor),mw.options.___rebindAllFormsAfterReload()},777)})),ee=1)),b!=null&&window.mw!=null&&ie!==!0&&window.mw.reload_module!==void 0&&(window.mw.reload_module(b,function(se){mw.options.___rebindAllFormsAfterReload()}),window.mw.reload_module("#"+b,function(se){mw.options.___rebindAllFormsAfterReload()})),ee==!1&&ie!==!0&&K!=null&&K!=""&&(K=K.toString(),window.mw.reload_module!==void 0&&(mw.reload_module_parent(K),mw.reload_module_parent("#"+K))),typeof t=="function"&&t.call(Z),setTimeout(function(){mw.options.___rebindAllFormsAfterReload()},300)}})}}};mw.options._optionSaved=null;mw.options._bindedRootFormsRegistry=[];mw.options.remove_bindings=function(e){var t=mw.$(e),i=t[0];i&&(i._optionsEvents&&(delete i._optionsEvents,i._optionsEventsClearBidings=!0),i.addClass("mw-options-form-force-rebind"),mw.$("input, select, textarea",i).not(".mw-options-form-binded-custom").each(function(){var r=mw.$(this);r&&r[0]&&r[0]._optionsEventsBinded&&delete r[0]._optionsEventsBinded}))};mw.options.form=function(e,t,i){var r=0,s=!0,a=mw.$(e),l=a[0];if(l&&(l&&a.hasClass("mw-options-form-force-rebind")&&(s=!0),l._optionsEvents||mw.$("input, select, textarea",l).not(".mw-options-form-binded-custom").each(function(){var S=mw.$(this);s&&(S[0]._optionsEventsBinded=null),S&&S[0]&&!S[0]._optionsEventsBinded&&S.hasClass("mw_option_field")&&(r++,S[0]._optionsEventsBinded=!0,l._optionsEventsClearBidings&&S.off("change input paste"),S.addClass("mw-options-form-binded"),S.on("change input paste",function(H){var M=this.name;mw.options.___slowDownEvent(M,this,function(){typeof l._optionsEvents.beforepost=="function"&&l._optionsEvents.beforepost.call(this),top!==self&&window.mw.parent().drag&&window.mw.parent().drag.save&&window.mw.parent().drag.save(),mw.options.save(this,l._optionsEvents.callback)})}))}),r>0)){l._optionsEvents=l._optionsEvents||{},l._optionsEvents=$.extend({},l._optionsEvents,{callback:t,beforepost:i});var f={};typeof l._optionsEvents.beforepost=="function"&&(f.beforepost=l._optionsEvents.beforepost),f.callback=l._optionsEvents.callback,f.binded_selector=e;var w=mw.tools.cloneObject(f),b=mw.options._bindedRootFormsRegistry.filter(function(S){return S.binded_selector===e});b.length||mw.options._bindedRootFormsRegistry.push(w)}};mw.options.___slowDownEvents={};mw.options.___slowDownEvent=function(e,t,i){typeof mw.options.___slowDownEvents[e]>"u"&&(mw.options.___slowDownEvents[e]=null),clearTimeout(mw.options.___slowDownEvents[e]),mw.options.___slowDownEvents[e]=setTimeout(function(){i.call(t)},700)};mw.options.___rebindAllFormsAfterReload=function(){var e="___rebindAllFormsAfterReload";mw.options.___slowDownEvent(e,this,function(){for(var t=0,i=mw.options._bindedRootFormsRegistry.length;t<i;t++){var r=mw.options._bindedRootFormsRegistry[t];if(r.binded_selector){var s=mw.$(r.binded_selector),a=s[0];if(a){var l=null,f=null;if(typeof r.beforepost=="function")var l=r.beforepost;if(typeof r.callback=="function")var f=r.callback;var w=!1;mw.$("input, select, textarea",a).not(".mw-options-form-binded-custom").not(".mw-options-form-binded").each(function(){var b=mw.$(this);b.hasClass("mw_option_field")&&(b[0]._optionsEventsBinded||(w=!0,b.attr("autocomplete","off")))}),a._optionsEvents&&w&&f&&(a._optionsEvents=null,a._optionsEventsClearBidings=!0,mw.options.form(r.binded_selector,f,l))}}}})};mw.pauseSave=!1;mw.askusertostay=!1;window.top===window&&(window.onbeforeunload=function(){if(mw.askusertostay)return mw.notification.warning(mw.lang("You have unsaved changes")),mw.lang("You have unsaved changes")});window.mwd=document;window.mww=window;window.mwhead=document.head||document.getElementsByTagName("head")[0];mw.doc=document;mw.win=window;mw.head=mwhead;mw.loaded=!1;mw._random=new Date().getTime();mw.random=function(){return mw._random++};mw.id=function(e){return e=e||"mw-",e+mw.random()};mw.onLive=function(e){typeof mw.settings.liveEdit=="boolean"&&mw.settings.liveEdit&&e.call(this)};mw.onAdmin=function(e){window.mwAdmin&&e.call(this)};mw.target={};mw.log=function(e){window.console&&mw.settings.debug&&top.console.log(e)};mw.$=function(e,t){if(typeof e=="object"||typeof e=="string"&&e.indexOf("<")!==-1)return jQuery(e);if(t=t||mwd,typeof document.querySelector<"u")if(typeof e=="string")try{return jQuery(t.querySelectorAll(e))}catch{return jQuery(e,t)}else return jQuery(e,t);else return jQuery(e,t)};mw.parent=function(){return window===top?window.mw:mw.tools.canAccessWindow(parent)&&parent.mw?parent.mw:window.mw};mw.top=function(){if(mw.__top)return mw.__top;var e=function(){for(var t=window,i=window;i&&mw.tools.canAccessWindow(i)&&(i.mw||i.parent.mw);)t=i,i=i.parent;return mw.__top=i.mw,t.mw};return window===top?(mw.__top=window.mw,window.mw):mw.tools.canAccessWindow(top)&&top.mw?(mw.__top=top.mw,top.mw):window.top!==window.parent?e():(mw.__top=window.mw,window.mw)};mw.require("stylesheet.editor.js");class hd{constructor(t){xt(this,"_hoverAndSelectExceptions",t=>{if(t&&t.classList&&t.classList.contains("module-custom-fields")){var i=Xe.firstParentOrCurrentWithClass(t,"module-contact-form");i&&(t=i)}if(t&&t.parentNode&&t.parentNode.getAttribute("rel")==="module"&&typeof t.parentNode<"u")try{if(t=Xe.firstParentOrCurrentWithAnyOfClasses(t.parentNode,["element","module","cloneable","layout","edit"]),!t)return t}catch{}if(t&&t.parentNode&&t.parentNode.classList.contains("module-layouts")&&(t=t.parentNode),t&&t.classList.contains("mw-empty-element")||t.classList.contains("mw-col-container")){const r=Xe.firstParentOrCurrentWithClass(t,"mw-col");r&&(t=r)}return t});xt(this,"canBeElement",function(t){var i=t,r=["mw-ui-col","mw-col-container","mw-ui-col-container","container"],s=["mw-le-spacer","background-image-holder","mw-layout-overlay-container","mw-le-resizer","mw-layout-overlay-container","mw-layout-overlay","mw-layout-overlay-background","mw-layout-overlay-background-image","mw-layout-overlay-wrapper"],a=mw.app.templateSettings.helperClasses.external_grids_col_classes,l=mw.app.templateSettings.helperClasses.external_css_no_element_classes,f=mw.app.templateSettings.helperClasses.external_css_no_element_controll_classes,w=mw.app.templateSettings.helperClasses.section_selectors,b=mw.app.templateSettings.helperClasses.fontIconFamilies;return r=r.concat(s),r=r.concat(a),r=r.concat(l),r=r.concat(f),r=r.concat(w),r=r.concat(b),!mw.tools.hasAnyOfClasses(i,r)});xt(this,"canBeEditable",function(t){return t.isContentEditable||mw.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t,["edit","module"])});xt(this,"getDistance",function(t,i){const r=i.x-t.x,s=i.y-t.y;return Math.sqrt(r*r+s*s)});const i=this,r={};this.on=(A,T)=>{r[A]?r[A].push(T):r[A]=[T]},this.dispatch=(A,T)=>{r[A]&&r[A].forEach(L=>{L.call(this,T)})},this.paused=!1,this.activeNode=!1,this.lastMousePosition=null;var s={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=mn.extend({},s,t),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(A){return dd(A,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new za(this.settings),this.dropIndicator=new rd(this.settings);const a=new ld(this),l=new ud(this),f=new cd(this);this.elementHandleContent=a,this.moduleHandleContent=l,this.layoutHandleContent=f,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.layoutHandleContent.on("insertLayoutRequestOnTop",()=>{this.dispatch("insertLayoutRequestOnTop")}),this.layoutHandleContent.on("insertLayoutRequestOnBottom",()=>{this.dispatch("insertLayoutRequestOnBottom")}),this.dialog=function(A){A||(A={});var T={document:window.top.document,position:l.menu.getTarget(),mode:"absolute"};i.pause();const L=new $a(mn.extend({},T,A));return L.on("close",function(){i.play()}),L};var w=this.elementHandle=new Hr({...this.settings,dropIndicator:this.dropIndicator,content:a.root,handle:".mw-handle-drag-button-element",document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0,onPosition:function(A,T,L){L.top<50?A.style.top="calc(100% + 60px)":A.style.top=""}});this.isResizing=!1,w.resizer.on("resizeStart",A=>{this.isResizing=!0,mw.app.registerChange(w.getTarget())}),w.resizer.on("resizeStop",A=>this.isResizing=!1),w.on("targetChange",function(A){a.menu.setTarget(A),A.className.includes("col-")?w.resizer.disable():w.resizer.enable(),i.handles.set("interactionHandle",null),i.handles.set("layout",null),i.handles.get("layout").hide(),i.handles.get("interactionHandle").hide(),mw.app.domTreeSelect(A)}),this.moduleHandle=new Hr({...this.settings,dropIndicator:this.dropIndicator,content:l.root,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!1,id:"mw-handle-item-module-menu",handle:".mw-handle-drag-button-module",setDraggableTarget:function(A){return A.nodeType===1?Xe.parentsOrCurrentOrderMatchOrOnlyFirst(A.parentElement,["edit","module"]):!1},onPosition:function(A,T,L){L.top<50?A.style.top="calc(100% + 60px)":A.style.top=""}});var b=this.moduleHandle;this.getModuleQuickSettings=A=>new Promise(T=>{T(mw.quickSettings[A]),this.dispatch("moduleQuickSettings",{module:A})}),this.getLayoutQuickSettings=()=>new Promise(A=>{A(mw.layoutQuickSettings),this.dispatch("layoutQuickSettings",{module:type})}),b.on("targetChange",function(A){i.getModuleQuickSettings(A.dataset.type).then(function(T){mw.app.liveEdit.moduleHandleContent.menu.setMenu("dynamic",T),l.menu.setTarget(A),l.menu.show()}),i.handles.set("layout",null),i.handles.set("interactionHandle",null),i.handles.get("layout").hide(),i.handles.get("interactionHandle").hide(),mw.app.domTreeSelect(A)}),this.layoutHandle=new Hr({...this.settings,dropIndicator:this.dropIndicator,content:f.root,handle:f.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var S=this.layoutHandle;S.wrapper.css({zIndex:1e3});var H=i.lang("Layout");f.menu.setTitle(H),S.on("targetChange",function(A){i.getLayoutQuickSettings(A.dataset.type).then(function(T){mw.app.liveEdit.layoutHandleContent.menu.setMenu("dynamic",T)}),f.menu.setTarget(A),f.menu.setTitle(H),i.elementAnalyzer.isEditOrInEdit(A)?(f.plusTop.show(),f.plusBottom.show()):(f.plusTop.hide(),f.plusBottom.hide()),mw.app.domTreeSelect(A)}),f.handle=S,l.handle=b,a.handle=w;const M=new fd;this.interactionHandle=new Hr({...this.settings,content:M.root,document:this.settings.document,resizable:!1,className:"mw-handle-item-interaction-handle"}),this.interactionHandle.menu=M.menu,this.handles=new id({interactionHandle:this.interactionHandle,element:w,module:b,layout:S}),this.observe=new Jc(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}getSelectedNode(){return this.activeNode}selectNode(t,i){if(console.log(l,i),l.nodeName==="BODY"||this.handles.targetIsOrInsideHandle(l))return;this.activeNode=l;const r=[];["IMG"].indexOf(l.nodeName)!==-1?r.push(l):r.push(Xe.firstBlockLevel(l));let a=r[0];var l=Xe.firstParentOrCurrentWithAnyOfClasses(r[0],["element","module","cloneable","layout","edit"]);if(a.nodeName!=="IMG"&&(a=Xe.firstBlockLevel(r[0])),a=l,l===mw.app.liveEdit.handles.get("element").getTarget()&&(i.preventDefault(),i.stopImmediatePropagation(),mw.app.editor.dispatch("editNodeRequest",l,i)),this.document.querySelectorAll("[contenteditable]").forEach(w=>w.contentEditable=!1),this.document.querySelectorAll("[data-mw-live-edithover]").forEach(w=>delete w.dataset.mwLiveEdithover),this.handles.get("element").set(null),this.handles.get("module").set(null),this.handles.hide(),a){a=this._hoverAndSelectExceptions(a);const w=this.elementAnalyzer.getType(a);if(w!=="layout"){var f=Xe.firstParentOrCurrentWithClass(a,"module-layouts");f&&this.handles.set("layout",f)}w&&(w==="element"?(this.handles.hide("module"),this.handles.set(w,a)):w==="module"?(this.handles.hide("element"),this.handles.set(w,a)):w==="layout"?this.handles.set("layout",a):w==="edit"?this.handles.set("element",a):this.handles.hide()),this.activeNode=a}else{const w=Xe.firstParentOrCurrentWithAnyOfClasses(l,["module-layouts"]);w&&(this.handles.set("layout",w),this.activeNode=w)}}init(){this.settings.mode==="auto"&&setInterval(()=>nd(this),1e3);const t=l=>{var f=l.target?l.target:l;f&&f.className&&typeof f.className=="string"&&f.className.indexOf("layout-plus")!==-1||this.selectNode(f,l)};function i(l){if(!l||!l.parentNode)return!1;const f=l.ownerDocument,w=f.defaultView,b=l.getBoundingClientRect(),S=l.offsetHeight,H=l.offsetWidth;return b.top>=-S&&b.left>=-H&&b.right<=(w.innerWidth||f.documentElement.clientWidth)+H&&b.bottom<=(w.innerHeight||f.documentElement.clientHeight)+S}let r,s=[];r="mousedown touchstart",Ee(this.root).on("mousemove",l=>{var f={x:l.pageX,y:l.pageY};if(this.lastMousePosition){var w=this.getDistance(this.lastMousePosition,f);if(w>=3)this.lastMousePosition=f;else return}else{this.lastMousePosition=f;return}if(this.paused||this.isResizing){this.interactionHandle.hide();return}if(this.handles.targetIsOrInsideHandle(l)){this.interactionHandle.hide();return}const b=this.observe.fromEvent(l);let S=this.handles.get("element").getTarget(),H=this.handles.get("module").getTarget();i(S)||(this.handles.get("element").hide(),this.handles.get("element").set(null)),i(H)||(this.handles.get("module").hide(),this.handles.get("module").set(null));let M=Xe.firstParentOrCurrentWithAnyOfClasses(b[0],["element","module","cloneable","edit"]);const A=Xe.firstParentOrCurrentWithAnyOfClasses(l.target,["module-layouts"]);let T=!1;if(M=this._hoverAndSelectExceptions(M),M&&s.indexOf(M)===-1&&(s.forEach(I=>delete I.dataset.mwLiveEdithover),s=[],this.handles.targetIsSelected(M,this.interactionHandle)||(M.dataset.mwLiveEdithover=!0,s.push(M))),M===this.interactionHandle.getTarget()){this.interactionHandle.show();return}if(A&&(A.contains(S)&&(T=!0),A.contains(H)&&(T=!0),T?(this.handles.set("layout",null),this.handles.get("layout").hide()):this.handles.set("layout",A)),M&&!this.handles.targetIsSelectedAndHandleIsNotHidden(M,this.interactionHandle)&&!M.classList.contains("module-layouts")){var L="";M.dataset.mwTitle?L=M.dataset.mwTitle:M.dataset.type?L=M.dataset.type:M.nodeName==="P"?L=this.lang("Paragraph"):/(H[1-6])/.test(M.nodeName)?L=this.lang("Title")+" "+M.nodeName.replace(/^\D+/g,""):M.nodeName==="IMG"||M.nodeName==="IMAGE"?L=this.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(M.nodeName)?L=this.lang("Title "+M.nodeName.replace("H","")):["DIV","MAIN","SECTION"].includes(M.nodeName)?L=this.lang("Block"):L=this.lang("Text"),this.interactionHandle.menu.setTitle(L),this.interactionHandle.show(),this.interactionHandle.set(M),this.moduleHandle.draggablePaused(M)}});let a;Ee(this.root).on("dblclick",l=>{const f=mw.app.liveEdit.elementHandle.getTarget(),w=mw.app.liveEdit.moduleHandle.getTarget(),b=mw.app.liveEdit.layoutHandle.getTarget();if(b&&!f&&!w)return Ur(b),!1;if(w&&!f)return Ur(w),l.preventDefault(),l.stopImmediatePropagation(),!1;f&&f.contains(a)&&mw.app.editor.dispatch("editNodeRequest",f),!f&&l.target.classList.contains("edit")&&l.target.style.backgroundImage&&mw.app.editor.dispatch("editNodeRequest",l.target)}),Ee(this.root).on(r,l=>{if(l.which===1)if(a=l.target,!this.paused)t(l);else{if(this.handles.targetIsOrInsideHandle(l.target))return;var f=this.elementHandle.getTarget();(!f||f&&!f.contains(l.target))&&(this.play(),this.handles.get("element").set(null),this.handles.get("module").set(null),mw.app.canvas.getDocument().querySelectorAll('[contenteditable="true"]').forEach(w=>w.contentEditable=!1))}})}}globalThis.LiveEdit=hd;const Jh=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:none}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:999;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:none}.mw-handle-item.mw-le-resizable{position:absolute}.mw-handle-item.mw-handle-item-interaction-handle{pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden;pointer-events:none;display:none!important}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;pointer-events:none}.mw-draggable-helper .mw-element-is-dragged{opacity:1;pointer-events:none}#mw-handle-item-layout-root .mw-handle-item-menus-holder{top:10px;right:10px;left:auto;position:absolute}.mw-handle-item .mw-handle-item-menus-holder{height:42px;padding:0 12px;display:inline-flex;border-radius:7px;border:1px solid transparent;position:relative;top:-60px;left:-3px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;background-color:#fff}.mw-le-handle-menu{position:relative;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;display:inline-flex;align-items:center;pointer-events:all;position:static;transition:.2s;opacity:0;transform:translateY(10px);z-index:2}.mw-le-handle-menu .mw-le-handle-menu-buttons:empty{display:none!important}.mw-le-handle-menu *{vertical-align:middle}.mw-handle-item.mw-handle-active .mw-le-handle-menu .mw-le-handle-menu-buttons{opacity:1;transform:translateY(0)}#mw-handle-item-layout-root .mw-handle-item-menus-holder,#mw-handle-item-layout-root .mw-le-handle-menu-buttons{height:auto;padding:0}#mw-handle-item-layout-root .mw-le-handle-menu-buttons{left:auto;right:5px;top:5px;display:block}#mw-handle-item-layout-root .mw-le-handle-menu-buttons *{vertical-align:middle}#mw-handle-item-layout-root #mw-handle-item-layout-menu{top:0;right:5px;left:auto}#mw-handle-item-layout-root #mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-button-wide{width:auto;white-space:nowrap;display:block;text-align:left;padding:5px 0;height:auto;border:1px solid #eee;margin:2px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-button-wide *{vertical-align:middle}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-drag-button{cursor:grab}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:none;align-items:center;justify-content:center;padding:0 5px;height:20px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:grab;background-color:#0078ff;color:#fff}.mw-handle-item-interaction-handle .mw-le-handle-menu-title{display:inline-flex;position:absolute;top:-22px;left:-3px}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#0078ff;color:#fff;border-radius:7px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#016ce6}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}[data-mw-live-edithover=true]>*{pointer-events:none}[data-mw-live-edithover=true]>* .module,[data-mw-live-edithover=true]>* .element,[data-mw-live-edithover=true]>* .cloneable,[data-mw-live-edithover=true]>* .edit{pointer-events:all}[data-mw-live-edithover=true]>*.module,[data-mw-live-edithover=true]>*.element,[data-mw-live-edithover=true]>*.cloneable,[data-mw-live-edithover=true]>*.edit{pointer-events:all}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}html.le-dragging iframe{pointer-events:none!important}.mw-handle-item-draggable-self{position:absolute;pointer-events:all;inset:0;z-index:10;display:none;cursor:default}.mw-handle-item-draggable-self.active{display:block}.mw-handle-item[data-draggable=false] .mw-handle-item-draggable-self,.mw-handle-item[data-draggable=false] .mw-handle-drag-button,.mw-handle-item[data-draggable=false] .mw-handle-item-draggable-self.active,.mw-handle-item[data-draggable=false] .mw-handle-drag-button.active{display:none}.mw-handle-item.mw-le-resizable .mw-le-resizer:before,.mw-handle-item.mw-le-resizable .mw-le-resizer:after{position:absolute;width:9px;height:9px;background-color:#fff;border:2px solid #2a84fb;content:""}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before{top:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{top:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{left:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before{bottom:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{bottom:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{top:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before{left:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{left:calc(50% - 4px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before{right:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{right:calc(50% - 5px)}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizable.mw-le-resizable-disabled .mw-le-resizer{display:none}.mw-le-resizer{position:absolute;pointer-events:all}.mw-le-resizer-r{cursor:e-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-l{cursor:e-resize;height:100%;left:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:n-resize;height:5px;left:0;width:100%}.mw-le-resizer-t{top:0;cursor:n-resize;height:5px;left:0;width:100%}mw-le-element{display:block}mw-le-element{line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;box-sizing:border-box}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}body:not(.is_admin) [contenteditable=true]{outline:1px dotted #ccc;outline-offset:7px}.FIE_topbar-save-wrapper,.FIE_topbar-close-button{display:none!important}#sidebar-menu{overflow:auto;max-height:calc(100vh - 80px);padding:0!important}.mw-prevent-interaction{cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none}.mw-prevent-interaction *{pointer-events:none!important}
`;var hn,Bn,di,lr,Yo,ur,Xo,Qr,Va;class Wa{constructor(t={}){At(this,lr);At(this,ur);At(this,Qr);At(this,hn,null);At(this,Bn,{});xt(this,"selectedCategory","");At(this,di,[]);xt(this,"root",null);const i={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},i,t),this.document=this.settings.document}on(t,i){ve(this,Bn)[t]?ve(this,Bn)[t].push(i):ve(this,Bn)[t]=[i]}dispatch(t,i){ve(this,Bn)[t]&&ve(this,Bn)[t].forEach(r=>{r.call(this,i)})}getData(){return ve(this,hn)}setData(t,i=!0){Si(this,hn,t);let r=0,s=ve(this,hn).length;for(;r<s;r++)typeof ve(this,hn)[r].categories=="string"&&(ve(this,hn)[r].categories=ve(this,hn)[r].categories.split(",").map(a=>a.trim()));i&&this.dispatch("dataChanged",ve(this,hn))}prepareCategories(){const t=[],i=this.getData();let r=0,s=i.length;for(;r<s;r++){let l=i[r].categories||"",f=0,w=l.length;for(;f<w;f++){const b=l[f].trim();t.indexOf(b)===-1&&t.push(b)}}t.sort(),this.categories=t}createCategoriesMenu(){const t=this.document.createElement("ul");this.prepareCategories(),t.className="modules-list-categories",t.innerHTML=this.categories.map(i=>`<li data-category="${i}">${i}</li>`).join(""),t.innerHTML=`<li data-category="">All categories</li> ${t.innerHTML}`,t.addEventListener("click",i=>{i.target.nodeName==="LI"&&this.selectCategory(i.target.dataset.category)}),this.categoriesNavigation=t,this.rootShadow.appendChild(t),this.on("categorySelect",i=>{const r=t.querySelectorAll("[data-category]");for(const s of r)s.classList[s.dataset.category===i?"add":"remove"]("active")})}selectCategory(t=""){this.selectedCategory=t,this.search(t),this.dispatch("categorySelect",t)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let t=document.createElement("style");t.textContent=this.settings.css,this.rootShadow.appendChild(t)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let i=0,r=t.length;const s={miscellaneous:Cn(this,ur,Xo).call(this,"miscellaneous")};for(;i<r;i++)(t[i].categories||["miscellaneous"]).forEach(l=>{s[l]||(s[l]=Cn(this,ur,Xo).call(this,l));const f=Cn(this,lr,Yo).call(this,t[i]);ve(this,di).push(f),s[l].appendChild(f),s[l].__$hasNodes=!0});for(const a in s)s[a].__$hasNodes&&this.modulesList.appendChild(s[a]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let i=0,r=t.length;for(;i<r;i++){const s=Cn(this,lr,Yo).call(this,t[i]);ve(this,di).push(s),this.modulesList.appendChild(s)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(t){t.nodeName&&(t.style.display="none")}showItem(t){t.nodeName&&(t.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",t=>this.search(void 0,this.searchField.value)),this.on("categorySelect",t=>{this.searchField.value=""})}async search(t="",i=""){if(this.settings.searchMode==="local")return Cn(this,Qr,Va).call(this,t,i)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(t=>{t(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(t=>{t(this)})}}hn=new WeakMap,Bn=new WeakMap,di=new WeakMap,lr=new WeakSet,Yo=function(t){t.locked=t.description.includes("a");const i=this.document.createElement("div");return i.className="modules-list-block-item modules-list-block-item-is-locked-"+t.locked,i.__$data=t,i.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${t.icon||t.screenshot||t.image})"></div>
            <div class="modules-list-block-item-title">${t.name||t.title}</div>
            <div class="modules-list-block-item-description">${t.description}</div>
            ${t.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,i.addEventListener("click",r=>{r.stopPropagation(),i.__$data.locked?this.dispatch("lockedModuleSelected",{data:t,element:i}):this.dispatch("moduleSelected",{data:t,element:i})}),i.$data=t,i},ur=new WeakSet,Xo=function(t){const i=this.document.createElement("div");return i.className="modules-list-block-category-section",i.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+t+"</h5></div>",i.__$hasNodes=!1,i},Qr=new WeakSet,Va=async function(t,i){return t&&(t=t.trim().toLowerCase()),i&&(i=i.trim().toLowerCase()),new Promise(r=>{let s=0,a=ve(this,di).length,l=0;for(;s<a;s++){const f=ve(this,di)[s],w=f.$data;if(t&&w.categories.indexOf(t)===-1){this.hideItem(f);continue}if(i&&(w.name||w.title).toLowerCase().indexOf(i)===-1){this.hideItem(f);continue}this.showItem(f),l++}console.log(i,t),this.modulesListNoResultsNode.style.display=l===0?"":"none",r()})};const qr=[],Ua=function(e){qr.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+e}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",t=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(e){(e.key==="Escape"||e.keyCode===27)&&qr.length>0&&(qr[0].remove(),qr.splice(0,1))});var Ko,sa=function(e){var t=new Wa({data:Ko});t.create().then(function(){var i=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),r=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),s=mw.element({props:{className:"mw-le-layouts-dialog-col"}});i.append(r),i.append(s),mw.element(t.root).append(i),r.append(t.searchBlock);var a=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});r.append(a),r.append(t.categoriesNavigation),s.append(t.modulesList),e.append(t.root)})};const pd=()=>{var e=new Ua("mw-le-layouts-dialog"),t=e.dialog;if(Ko){sa(t);return}mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(i){return i.json()}).then(function(i){Ko=i,sa(t),mw.spinner({element:t.get(0),decorate:!0}).remove()})};var Go,aa=function(e){var t=new Wa({data:Go});t.createCategorized().then(function(){e.append(t.root)})};const md=()=>{var e=new Ua("mw-le-modules-dialog"),t=e.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var i=mw.$(this).attr("data-module-name"),r={class:this.className};i==="layout"&&(r.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,i,r,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),Go?aa(t):(mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(i){return i.json()}).then(function(i){Go=i,aa(t),mw.spinner({element:t.get(0),decorate:!0}).remove()}))},gd={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return md()},insertLayout:function(){return pd()}},vd={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await Vr.get(route("api.module.list")+"?layout_type=module").then(e=>{this.modulesListData=e.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(e){if(this.modulesSkinsData[e])return this.modulesSkinsData[e];if(await Vr.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.modulesSkinsData[e]=t.data}),this.modulesSkinsData[e])return this.modulesSkinsData[e]}},wd={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await Vr.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(e=>{this.layoutsListData=e.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var e="layouts";if(this.layoutSkinsData[e])return this.layoutSkinsData[e];if(await Vr.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.layoutSkinsData[e]=t.data}),this.layoutSkinsData[e])return this.layoutSkinsData[e]}};class yd extends Di{constructor(){super()}onRegister(){}}class bd extends Di{selectIcon(t){var i=$(t)[0];mw.iconLoader().init();var r=mw.iconPicker({iconOptions:!1});r.target=document.createElement("i"),r.on("select",function(s){s.render(),i.value=r.target.outerHTML;var a=new Event("input");i.dispatchEvent(a),r.dialog("hide")}),r.dialog()}removeIcon(t){var i=$(t)[0];i.value="";var r=new Event("input");i.dispatchEvent(r)}}class xd extends Di{constructor(){super()}selectLink(t){var i=new(mw.top()).LinkEditor({mode:"dialog",controllers:[{type:"url",config:{text:!1,target:!1}},{type:"page",config:{text:!1,target:!1}},{type:"post",config:{text:!1,target:!1}},{type:"file",config:{text:!1,target:!1}},{type:"email",config:{text:!1,target:!1}},{type:"layout",config:{text:!1,target:!1}}]});mw.$(t)&&i.setValue({url:mw.$(t).val()||""});var r=this;i.promise().then(function(s){if(s){var a={},l=s.url;a.url=l,s.data&&s.data.id&&(a.id=s.data.id,s.data.type&&s.data.type==="category"?a.type="category":(s.data.type&&s.data.type==="page"||s.data.content_type)&&(a.type="content")),r.dispatch("selected",a)}})}}class _d extends Di{constructor(){super(),this.colorPickerInstances=[],this.positionToElement=!1}setPositionToElement(t){this.positionToElement=t}selectColor(t,i=!1){if(this.colorPickerInstances.length>0)for(let l=0;l<this.colorPickerInstances.length;l++)this.colorPickerInstances[l].remove();var r=$(t)[0];let s=this.generateRandId(10),a=mw.top().dialog({content:'<div id="color-picker-'+s+'" style="width:232px;height:325px;"></div>',title:"Color Picker",footer:!1,width:240,overlayClose:!0});a.dialogContainer&&(a.dialogContainer.style.padding="0px"),a.overlay&&(a.overlay.style.backgroundColor="transparent"),this.colorPickerInstances.push(a),mw.top().colorPicker({element:"#color-picker-"+s,onchange:function(l){r.value=l,r.dispatchEvent(new Event("input")),i&&i(l)}}),a.center()}generateRandId(t){let i="";const r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",s=r.length;let a=0;for(;a<t;)i+=r.charAt(Math.floor(Math.random()*s)),a+=1;return i}}(()=>{function e(h,y){var v=Object.keys(h);if(Object.getOwnPropertySymbols){var E=Object.getOwnPropertySymbols(h);y&&(E=E.filter(function(k){return Object.getOwnPropertyDescriptor(h,k).enumerable})),v.push.apply(v,E)}return v}function t(h){for(var y=1;y<arguments.length;y++){var v=arguments[y]!=null?arguments[y]:{};y%2?e(Object(v),!0).forEach(function(E){r(h,E,v[E])}):Object.getOwnPropertyDescriptors?Object.defineProperties(h,Object.getOwnPropertyDescriptors(v)):e(Object(v)).forEach(function(E){Object.defineProperty(h,E,Object.getOwnPropertyDescriptor(v,E))})}return h}function i(h){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?i=function(y){return typeof y}:i=function(y){return y&&typeof Symbol=="function"&&y.constructor===Symbol&&y!==Symbol.prototype?"symbol":typeof y},i(h)}function r(h,y,v){return y in h?Object.defineProperty(h,y,{value:v,enumerable:!0,configurable:!0,writable:!0}):h[y]=v,h}function s(){return s=Object.assign||function(h){for(var y=1;y<arguments.length;y++){var v=arguments[y];for(var E in v)Object.prototype.hasOwnProperty.call(v,E)&&(h[E]=v[E])}return h},s.apply(this,arguments)}function a(h,y){if(h==null)return{};var v={},E=Object.keys(h),k,F;for(F=0;F<E.length;F++)k=E[F],!(y.indexOf(k)>=0)&&(v[k]=h[k]);return v}function l(h,y){if(h==null)return{};var v=a(h,y),E,k;if(Object.getOwnPropertySymbols){var F=Object.getOwnPropertySymbols(h);for(k=0;k<F.length;k++)E=F[k],!(y.indexOf(E)>=0)&&(!Object.prototype.propertyIsEnumerable.call(h,E)||(v[E]=h[E]))}return v}var f="1.15.0";function w(h){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(h)}var b=w(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),S=w(/Edge/i),H=w(/firefox/i),M=w(/safari/i)&&!w(/chrome/i)&&!w(/android/i),A=w(/iP(ad|od|hone)/i),T=w(/chrome/i)&&w(/android/i),L={capture:!1,passive:!1};function I(h,y,v){h.addEventListener(y,v,!b&&L)}function D(h,y,v){h.removeEventListener(y,v,!b&&L)}function le(h,y){if(y){if(y[0]===">"&&(y=y.substring(1)),h)try{if(h.matches)return h.matches(y);if(h.msMatchesSelector)return h.msMatchesSelector(y);if(h.webkitMatchesSelector)return h.webkitMatchesSelector(y)}catch{return!1}return!1}}function we(h){return h.host&&h!==document&&h.host.nodeType?h.host:h.parentNode}function de(h,y,v,E){if(h){v=v||document;do{if(y!=null&&(y[0]===">"?h.parentNode===v&&le(h,y):le(h,y))||E&&h===v)return h;if(h===v)break}while(h=we(h))}return null}var Ce=/\s+/g;function U(h,y,v){if(h&&y)if(h.classList)h.classList[v?"add":"remove"](y);else{var E=(" "+h.className+" ").replace(Ce," ").replace(" "+y+" "," ");h.className=(E+(v?" "+y:"")).replace(Ce," ")}}function c(h,y,v){var E=h&&h.style;if(E){if(v===void 0)return document.defaultView&&document.defaultView.getComputedStyle?v=document.defaultView.getComputedStyle(h,""):h.currentStyle&&(v=h.currentStyle),y===void 0?v:v[y];!(y in E)&&y.indexOf("webkit")===-1&&(y="-webkit-"+y),E[y]=v+(typeof v=="string"?"":"px")}}function ie(h,y){var v="";if(typeof h=="string")v=h;else do{var E=c(h,"transform");E&&E!=="none"&&(v=E+" "+v)}while(!y&&(h=h.parentNode));var k=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return k&&new k(v)}function ue(h,y,v){if(h){var E=h.getElementsByTagName(y),k=0,F=E.length;if(v)for(;k<F;k++)v(E[k],k);return E}return[]}function Ne(){var h=document.scrollingElement;return h||document.documentElement}function Z(h,y,v,E,k){if(!(!h.getBoundingClientRect&&h!==window)){var F,z,J,Y,oe,ce,he;if(h!==window&&h.parentNode&&h!==Ne()?(F=h.getBoundingClientRect(),z=F.top,J=F.left,Y=F.bottom,oe=F.right,ce=F.height,he=F.width):(z=0,J=0,Y=window.innerHeight,oe=window.innerWidth,ce=window.innerHeight,he=window.innerWidth),(y||v)&&h!==window&&(k=k||h.parentNode,!b))do if(k&&k.getBoundingClientRect&&(c(k,"transform")!=="none"||v&&c(k,"position")!=="static")){var $e=k.getBoundingClientRect();z-=$e.top+parseInt(c(k,"border-top-width")),J-=$e.left+parseInt(c(k,"border-left-width")),Y=z+F.height,oe=J+F.width;break}while(k=k.parentNode);if(E&&h!==window){var xe=ie(k||h),et=xe&&xe.a,Ie=xe&&xe.d;xe&&(z/=Ie,J/=et,he/=et,ce/=Ie,Y=z+ce,oe=J+he)}return{top:z,left:J,bottom:Y,right:oe,width:he,height:ce}}}function K(h,y,v){for(var E=rt(h,!0),k=Z(h)[y];E;){var F=Z(E)[v],z=void 0;if(v==="top"||v==="left"?z=k>=F:z=k<=F,!z)return E;if(E===Ne())break;E=rt(E,!1)}return!1}function ee(h,y,v,E){for(var k=0,F=0,z=h.children;F<z.length;){if(z[F].style.display!=="none"&&z[F]!==fe.ghost&&(E||z[F]!==fe.dragged)&&de(z[F],v.draggable,h,!1)){if(k===y)return z[F];k++}F++}return null}function se(h,y){for(var v=h.lastElementChild;v&&(v===fe.ghost||c(v,"display")==="none"||y&&!le(v,y));)v=v.previousElementSibling;return v||null}function _e(h,y){var v=0;if(!h||!h.parentNode)return-1;for(;h=h.previousElementSibling;)h.nodeName.toUpperCase()!=="TEMPLATE"&&h!==fe.clone&&(!y||le(h,y))&&v++;return v}function Qe(h){var y=0,v=0,E=Ne();if(h)do{var k=ie(h),F=k.a,z=k.d;y+=h.scrollLeft*F,v+=h.scrollTop*z}while(h!==E&&(h=h.parentNode));return[y,v]}function it(h,y){for(var v in h)if(h.hasOwnProperty(v)){for(var E in y)if(y.hasOwnProperty(E)&&y[E]===h[v][E])return Number(v)}return-1}function rt(h,y){if(!h||!h.getBoundingClientRect)return Ne();var v=h,E=!1;do if(v.clientWidth<v.scrollWidth||v.clientHeight<v.scrollHeight){var k=c(v);if(v.clientWidth<v.scrollWidth&&(k.overflowX=="auto"||k.overflowX=="scroll")||v.clientHeight<v.scrollHeight&&(k.overflowY=="auto"||k.overflowY=="scroll")){if(!v.getBoundingClientRect||v===document.body)return Ne();if(E||y)return v;E=!0}}while(v=v.parentNode);return Ne()}function wt(h,y){if(h&&y)for(var v in y)y.hasOwnProperty(v)&&(h[v]=y[v]);return h}function $t(h,y){return Math.round(h.top)===Math.round(y.top)&&Math.round(h.left)===Math.round(y.left)&&Math.round(h.height)===Math.round(y.height)&&Math.round(h.width)===Math.round(y.width)}var Ht;function Wt(h,y){return function(){if(!Ht){var v=arguments,E=this;v.length===1?h.call(E,v[0]):h.apply(E,v),Ht=setTimeout(function(){Ht=void 0},y)}}}function yt(){clearTimeout(Ht),Ht=void 0}function ct(h,y,v){h.scrollLeft+=y,h.scrollTop+=v}function _t(h){var y=window.Polymer,v=window.jQuery||window.Zepto;return y&&y.dom?y.dom(h).cloneNode(!0):v?v(h).clone(!0)[0]:h.cloneNode(!0)}var We="Sortable"+new Date().getTime();function nt(){var h=[],y;return{captureAnimationState:function(){if(h=[],!!this.options.animation){var v=[].slice.call(this.el.children);v.forEach(function(E){if(!(c(E,"display")==="none"||E===fe.ghost)){h.push({target:E,rect:Z(E)});var k=t({},h[h.length-1].rect);if(E.thisAnimationDuration){var F=ie(E,!0);F&&(k.top-=F.f,k.left-=F.e)}E.fromRect=k}})}},addAnimationState:function(v){h.push(v)},removeAnimationState:function(v){h.splice(it(h,{target:v}),1)},animateAll:function(v){var E=this;if(!this.options.animation){clearTimeout(y),typeof v=="function"&&v();return}var k=!1,F=0;h.forEach(function(z){var J=0,Y=z.target,oe=Y.fromRect,ce=Z(Y),he=Y.prevFromRect,$e=Y.prevToRect,xe=z.rect,et=ie(Y,!0);et&&(ce.top-=et.f,ce.left-=et.e),Y.toRect=ce,Y.thisAnimationDuration&&$t(he,ce)&&!$t(oe,ce)&&(xe.top-ce.top)/(xe.left-ce.left)==(oe.top-ce.top)/(oe.left-ce.left)&&(J=dt(xe,he,$e,E.options)),$t(ce,oe)||(Y.prevFromRect=oe,Y.prevToRect=ce,J||(J=E.options.animation),E.animate(Y,xe,ce,J)),J&&(k=!0,F=Math.max(F,J),clearTimeout(Y.animationResetTimer),Y.animationResetTimer=setTimeout(function(){Y.animationTime=0,Y.prevFromRect=null,Y.fromRect=null,Y.prevToRect=null,Y.thisAnimationDuration=null},J),Y.thisAnimationDuration=J)}),clearTimeout(y),k?y=setTimeout(function(){typeof v=="function"&&v()},F):typeof v=="function"&&v(),h=[]},animate:function(v,E,k,F){if(F){c(v,"transition",""),c(v,"transform","");var z=ie(this.el),J=z&&z.a,Y=z&&z.d,oe=(E.left-k.left)/(J||1),ce=(E.top-k.top)/(Y||1);v.animatingX=!!oe,v.animatingY=!!ce,c(v,"transform","translate3d("+oe+"px,"+ce+"px,0)"),this.forRepaintDummy=Je(v),c(v,"transition","transform "+F+"ms"+(this.options.easing?" "+this.options.easing:"")),c(v,"transform","translate3d(0,0,0)"),typeof v.animated=="number"&&clearTimeout(v.animated),v.animated=setTimeout(function(){c(v,"transition",""),c(v,"transform",""),v.animated=!1,v.animatingX=!1,v.animatingY=!1},F)}}}}function Je(h){return h.offsetWidth}function dt(h,y,v,E){return Math.sqrt(Math.pow(y.top-h.top,2)+Math.pow(y.left-h.left,2))/Math.sqrt(Math.pow(y.top-v.top,2)+Math.pow(y.left-v.left,2))*E.animation}var Ve=[],Nt={initializeByDefault:!0},Ze={mount:function(h){for(var y in Nt)Nt.hasOwnProperty(y)&&!(y in h)&&(h[y]=Nt[y]);Ve.forEach(function(v){if(v.pluginName===h.pluginName)throw"Sortable: Cannot mount plugin ".concat(h.pluginName," more than once")}),Ve.push(h)},pluginEvent:function(h,y,v){var E=this;this.eventCanceled=!1,v.cancel=function(){E.eventCanceled=!0};var k=h+"Global";Ve.forEach(function(F){!y[F.pluginName]||(y[F.pluginName][k]&&y[F.pluginName][k](t({sortable:y},v)),y.options[F.pluginName]&&y[F.pluginName][h]&&y[F.pluginName][h](t({sortable:y},v)))})},initializePlugins:function(h,y,v,E){Ve.forEach(function(z){var J=z.pluginName;if(!(!h.options[J]&&!z.initializeByDefault)){var Y=new z(h,y,h.options);Y.sortable=h,Y.options=h.options,h[J]=Y,s(v,Y.defaults)}});for(var k in h.options)if(h.options.hasOwnProperty(k)){var F=this.modifyOption(h,k,h.options[k]);typeof F<"u"&&(h.options[k]=F)}},getEventProperties:function(h,y){var v={};return Ve.forEach(function(E){typeof E.eventProperties=="function"&&s(v,E.eventProperties.call(y[E.pluginName],h))}),v},modifyOption:function(h,y,v){var E;return Ve.forEach(function(k){!h[k.pluginName]||k.optionListeners&&typeof k.optionListeners[y]=="function"&&(E=k.optionListeners[y].call(h[k.pluginName],v))}),E}};function je(h){var y=h.sortable,v=h.rootEl,E=h.name,k=h.targetEl,F=h.cloneEl,z=h.toEl,J=h.fromEl,Y=h.oldIndex,oe=h.newIndex,ce=h.oldDraggableIndex,he=h.newDraggableIndex,$e=h.originalEvent,xe=h.putSortable,et=h.extraEventProperties;if(y=y||v&&v[We],!!y){var Ie,Yt=y.options,ht="on"+E.charAt(0).toUpperCase()+E.substr(1);window.CustomEvent&&!b&&!S?Ie=new CustomEvent(E,{bubbles:!0,cancelable:!0}):(Ie=document.createEvent("Event"),Ie.initEvent(E,!0,!0)),Ie.to=z||v,Ie.from=J||v,Ie.item=k||v,Ie.clone=F,Ie.oldIndex=Y,Ie.newIndex=oe,Ie.oldDraggableIndex=ce,Ie.newDraggableIndex=he,Ie.originalEvent=$e,Ie.pullMode=xe?xe.lastPutMode:void 0;var Xt=t(t({},et),Ze.getEventProperties(E,y));for(var pt in Xt)Ie[pt]=Xt[pt];v&&v.dispatchEvent(Ie),Yt[ht]&&Yt[ht].call(y,Ie)}}var Le=["evt"],Pe=function(h,y){var v=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},E=v.evt,k=l(v,Le);Ze.pluginEvent.bind(fe)(h,y,t({dragEl:G,parentEl:He,ghostEl:be,rootEl:Ue,nextEl:vn,lastDownEl:Et,cloneEl:Fe,cloneHidden:kt,dragStarted:Yn,putSortable:ot,activeSortable:fe.active,originalEvent:E,oldIndex:re,oldDraggableIndex:Un,newIndex:ze,newDraggableIndex:Zt,hideGhostForTarget:wr,unhideGhostForTarget:yr,cloneNowHidden:function(){kt=!0},cloneNowShown:function(){kt=!1},dispatchSortableEvent:function(F){Be({sortable:y,name:F,originalEvent:E})}},k))};function Be(h){je(t({putSortable:ot,cloneEl:Fe,targetEl:G,rootEl:Ue,oldIndex:re,oldDraggableIndex:Un,newIndex:ze,newDraggableIndex:Zt},h))}var G,He,be,Ue,vn,Et,Fe,kt,re,ze,Un,Zt,gi,ot,wn=!1,en=!1,Lt=[],Ct,ft,Ii,Tn,ji,Fi,Yn,Mt,Vt,An=!1,Xn=!1,gt,Re,Kn=[],Bi=!1,Gn=[],Jn=typeof document<"u",Ut=A,yn=S||b?"cssFloat":"float",zi=Jn&&!T&&!A&&"draggable"in document.createElement("div"),Qn=function(){if(Jn){if(b)return!1;var h=document.createElement("x");return h.style.cssText="pointer-events:auto",h.style.pointerEvents==="auto"}}(),vr=function(h,y){var v=c(h),E=parseInt(v.width)-parseInt(v.paddingLeft)-parseInt(v.paddingRight)-parseInt(v.borderLeftWidth)-parseInt(v.borderRightWidth),k=ee(h,0,y),F=ee(h,1,y),z=k&&c(k),J=F&&c(F),Y=z&&parseInt(z.marginLeft)+parseInt(z.marginRight)+Z(k).width,oe=J&&parseInt(J.marginLeft)+parseInt(J.marginRight)+Z(F).width;if(v.display==="flex")return v.flexDirection==="column"||v.flexDirection==="column-reverse"?"vertical":"horizontal";if(v.display==="grid")return v.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(k&&z.float&&z.float!=="none"){var ce=z.float==="left"?"left":"right";return F&&(J.clear==="both"||J.clear===ce)?"vertical":"horizontal"}return k&&(z.display==="block"||z.display==="flex"||z.display==="table"||z.display==="grid"||Y>=E&&v[yn]==="none"||F&&v[yn]==="none"&&Y+oe>E)?"vertical":"horizontal"},yo=function(h,y,v){var E=v?h.left:h.top,k=v?h.right:h.bottom,F=v?h.width:h.height,z=v?y.left:y.top,J=v?y.right:y.bottom,Y=v?y.width:y.height;return E===z||k===J||E+F/2===z+Y/2},bo=function(h,y){var v;return Lt.some(function(E){var k=E[We].options.emptyInsertThreshold;if(!(!k||se(E))){var F=Z(E),z=h>=F.left-k&&h<=F.right+k,J=y>=F.top-k&&y<=F.bottom+k;if(z&&J)return v=E}}),v},qi=function(h){function y(k,F){return function(z,J,Y,oe){var ce=z.options.group.name&&J.options.group.name&&z.options.group.name===J.options.group.name;if(k==null&&(F||ce))return!0;if(k==null||k===!1)return!1;if(F&&k==="clone")return k;if(typeof k=="function")return y(k(z,J,Y,oe),F)(z,J,Y,oe);var he=(F?z:J).options.group.name;return k===!0||typeof k=="string"&&k===he||k.join&&k.indexOf(he)>-1}}var v={},E=h.group;(!E||i(E)!="object")&&(E={name:E}),v.name=E.name,v.checkPull=y(E.pull,!0),v.checkPut=y(E.put),v.revertClone=E.revertClone,h.group=v},wr=function(){!Qn&&be&&c(be,"display","none")},yr=function(){!Qn&&be&&c(be,"display","")};Jn&&!T&&document.addEventListener("click",function(h){if(en)return h.preventDefault(),h.stopPropagation&&h.stopPropagation(),h.stopImmediatePropagation&&h.stopImmediatePropagation(),en=!1,!1},!0);var tn=function(h){if(G){h=h.touches?h.touches[0]:h;var y=bo(h.clientX,h.clientY);if(y){var v={};for(var E in h)h.hasOwnProperty(E)&&(v[E]=h[E]);v.target=v.rootEl=y,v.preventDefault=void 0,v.stopPropagation=void 0,y[We]._onDragOver(v)}}},xo=function(h){G&&G.parentNode[We]._isOutsideThisEl(h.target)};function fe(h,y){if(!(h&&h.nodeType&&h.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(h));this.el=h,this.options=y=s({},y),h[We]=this;var v={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(h.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return vr(h,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(F,z){F.setData("Text",z.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:fe.supportPointer!==!1&&"PointerEvent"in window&&!M,emptyInsertThreshold:5};Ze.initializePlugins(this,h,v);for(var E in v)!(E in y)&&(y[E]=v[E]);qi(y);for(var k in this)k.charAt(0)==="_"&&typeof this[k]=="function"&&(this[k]=this[k].bind(this));this.nativeDraggable=y.forceFallback?!1:zi,this.nativeDraggable&&(this.options.touchStartThreshold=1),y.supportPointer?I(h,"pointerdown",this._onTapStart):(I(h,"mousedown",this._onTapStart),I(h,"touchstart",this._onTapStart)),this.nativeDraggable&&(I(h,"dragover",this),I(h,"dragenter",this)),Lt.push(this.el),y.store&&y.store.get&&this.sort(y.store.get(this)||[]),s(this,nt())}fe.prototype={constructor:fe,_isOutsideThisEl:function(h){!this.el.contains(h)&&h!==this.el&&(Mt=null)},_getDirection:function(h,y){return typeof this.options.direction=="function"?this.options.direction.call(this,h,y,G):this.options.direction},_onTapStart:function(h){if(h.cancelable){var y=this,v=this.el,E=this.options,k=E.preventOnFilter,F=h.type,z=h.touches&&h.touches[0]||h.pointerType&&h.pointerType==="touch"&&h,J=(z||h).target,Y=h.target.shadowRoot&&(h.path&&h.path[0]||h.composedPath&&h.composedPath()[0])||J,oe=E.filter;if(Cr(v),!G&&!(/mousedown|pointerdown/.test(F)&&h.button!==0||E.disabled)&&!Y.isContentEditable&&!(!this.nativeDraggable&&M&&J&&J.tagName.toUpperCase()==="SELECT")&&(J=de(J,E.draggable,v,!1),!(J&&J.animated)&&Et!==J)){if(re=_e(J),Un=_e(J,E.draggable),typeof oe=="function"){if(oe.call(this,h,J,this)){Be({sortable:y,rootEl:Y,name:"filter",targetEl:J,toEl:v,fromEl:v}),Pe("filter",y,{evt:h}),k&&h.cancelable&&h.preventDefault();return}}else if(oe&&(oe=oe.split(",").some(function(ce){if(ce=de(Y,ce.trim(),v,!1),ce)return Be({sortable:y,rootEl:ce,name:"filter",targetEl:J,fromEl:v,toEl:v}),Pe("filter",y,{evt:h}),!0}),oe)){k&&h.cancelable&&h.preventDefault();return}E.handle&&!de(Y,E.handle,v,!1)||this._prepareDragStart(h,z,J)}}},_prepareDragStart:function(h,y,v){var E=this,k=E.el,F=E.options,z=k.ownerDocument,J;if(v&&!G&&v.parentNode===k){var Y=Z(v);if(Ue=k,G=v,He=G.parentNode,vn=G.nextSibling,Et=v,gi=F.group,fe.dragged=G,Ct={target:G,clientX:(y||h).clientX,clientY:(y||h).clientY},ji=Ct.clientX-Y.left,Fi=Ct.clientY-Y.top,this._lastX=(y||h).clientX,this._lastY=(y||h).clientY,G.style["will-change"]="all",J=function(){if(Pe("delayEnded",E,{evt:h}),fe.eventCanceled){E._onDrop();return}E._disableDelayedDragEvents(),!H&&E.nativeDraggable&&(G.draggable=!0),E._triggerDragStart(h,y),Be({sortable:E,name:"choose",originalEvent:h}),U(G,F.chosenClass,!0)},F.ignore.split(",").forEach(function(oe){ue(G,oe.trim(),Zn)}),I(z,"dragover",tn),I(z,"mousemove",tn),I(z,"touchmove",tn),I(z,"mouseup",E._onDrop),I(z,"touchend",E._onDrop),I(z,"touchcancel",E._onDrop),H&&this.nativeDraggable&&(this.options.touchStartThreshold=4,G.draggable=!0),Pe("delayStart",this,{evt:h}),F.delay&&(!F.delayOnTouchOnly||y)&&(!this.nativeDraggable||!(S||b))){if(fe.eventCanceled){this._onDrop();return}I(z,"mouseup",E._disableDelayedDrag),I(z,"touchend",E._disableDelayedDrag),I(z,"touchcancel",E._disableDelayedDrag),I(z,"mousemove",E._delayedDragTouchMoveHandler),I(z,"touchmove",E._delayedDragTouchMoveHandler),F.supportPointer&&I(z,"pointermove",E._delayedDragTouchMoveHandler),E._dragStartTimer=setTimeout(J,F.delay)}else J()}},_delayedDragTouchMoveHandler:function(h){var y=h.touches?h.touches[0]:h;Math.max(Math.abs(y.clientX-this._lastX),Math.abs(y.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){G&&Zn(G),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var h=this.el.ownerDocument;D(h,"mouseup",this._disableDelayedDrag),D(h,"touchend",this._disableDelayedDrag),D(h,"touchcancel",this._disableDelayedDrag),D(h,"mousemove",this._delayedDragTouchMoveHandler),D(h,"touchmove",this._delayedDragTouchMoveHandler),D(h,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(h,y){y=y||h.pointerType=="touch"&&h,!this.nativeDraggable||y?this.options.supportPointer?I(document,"pointermove",this._onTouchMove):y?I(document,"touchmove",this._onTouchMove):I(document,"mousemove",this._onTouchMove):(I(G,"dragend",this),I(Ue,"dragstart",this._onDragStart));try{document.selection?ti(function(){document.selection.empty()}):window.getSelection().removeAllRanges()}catch{}},_dragStarted:function(h,y){if(wn=!1,Ue&&G){Pe("dragStarted",this,{evt:y}),this.nativeDraggable&&I(document,"dragover",xo);var v=this.options;!h&&U(G,v.dragClass,!1),U(G,v.ghostClass,!0),fe.active=this,h&&this._appendGhost(),Be({sortable:this,name:"start",originalEvent:y})}else this._nulling()},_emulateDragOver:function(){if(ft){this._lastX=ft.clientX,this._lastY=ft.clientY,wr();for(var h=document.elementFromPoint(ft.clientX,ft.clientY),y=h;h&&h.shadowRoot&&(h=h.shadowRoot.elementFromPoint(ft.clientX,ft.clientY),h!==y);)y=h;if(G.parentNode[We]._isOutsideThisEl(h),y)do{if(y[We]){var v=void 0;if(v=y[We]._onDragOver({clientX:ft.clientX,clientY:ft.clientY,target:h,rootEl:y}),v&&!this.options.dragoverBubble)break}h=y}while(y=y.parentNode);yr()}},_onTouchMove:function(h){if(Ct){var y=this.options,v=y.fallbackTolerance,E=y.fallbackOffset,k=h.touches?h.touches[0]:h,F=be&&ie(be,!0),z=be&&F&&F.a,J=be&&F&&F.d,Y=Ut&&Re&&Qe(Re),oe=(k.clientX-Ct.clientX+E.x)/(z||1)+(Y?Y[0]-Kn[0]:0)/(z||1),ce=(k.clientY-Ct.clientY+E.y)/(J||1)+(Y?Y[1]-Kn[1]:0)/(J||1);if(!fe.active&&!wn){if(v&&Math.max(Math.abs(k.clientX-this._lastX),Math.abs(k.clientY-this._lastY))<v)return;this._onDragStart(h,!0)}if(be){F?(F.e+=oe-(Ii||0),F.f+=ce-(Tn||0)):F={a:1,b:0,c:0,d:1,e:oe,f:ce};var he="matrix(".concat(F.a,",").concat(F.b,",").concat(F.c,",").concat(F.d,",").concat(F.e,",").concat(F.f,")");c(be,"webkitTransform",he),c(be,"mozTransform",he),c(be,"msTransform",he),c(be,"transform",he),Ii=oe,Tn=ce,ft=k}h.cancelable&&h.preventDefault()}},_appendGhost:function(){if(!be){var h=this.options.fallbackOnBody?document.body:Ue,y=Z(G,!0,Ut,!0,h),v=this.options;if(Ut){for(Re=h;c(Re,"position")==="static"&&c(Re,"transform")==="none"&&Re!==document;)Re=Re.parentNode;Re!==document.body&&Re!==document.documentElement?(Re===document&&(Re=Ne()),y.top+=Re.scrollTop,y.left+=Re.scrollLeft):Re=Ne(),Kn=Qe(Re)}be=G.cloneNode(!0),U(be,v.ghostClass,!1),U(be,v.fallbackClass,!0),U(be,v.dragClass,!0),c(be,"transition",""),c(be,"transform",""),c(be,"box-sizing","border-box"),c(be,"margin",0),c(be,"top",y.top),c(be,"left",y.left),c(be,"width",y.width),c(be,"height",y.height),c(be,"opacity","0.8"),c(be,"position",Ut?"absolute":"fixed"),c(be,"zIndex","100000"),c(be,"pointerEvents","none"),fe.ghost=be,h.appendChild(be),c(be,"transform-origin",ji/parseInt(be.style.width)*100+"% "+Fi/parseInt(be.style.height)*100+"%")}},_onDragStart:function(h,y){var v=this,E=h.dataTransfer,k=v.options;if(Pe("dragStart",this,{evt:h}),fe.eventCanceled){this._onDrop();return}Pe("setupClone",this),fe.eventCanceled||(Fe=_t(G),Fe.removeAttribute("id"),Fe.draggable=!1,Fe.style["will-change"]="",this._hideClone(),U(Fe,this.options.chosenClass,!1),fe.clone=Fe),v.cloneId=ti(function(){Pe("clone",v),!fe.eventCanceled&&(v.options.removeCloneOnHide||Ue.insertBefore(Fe,G),v._hideClone(),Be({sortable:v,name:"clone"}))}),!y&&U(G,k.dragClass,!0),y?(en=!0,v._loopId=setInterval(v._emulateDragOver,50)):(D(document,"mouseup",v._onDrop),D(document,"touchend",v._onDrop),D(document,"touchcancel",v._onDrop),E&&(E.effectAllowed="move",k.setData&&k.setData.call(v,E,G)),I(document,"drop",v),c(G,"transform","translateZ(0)")),wn=!0,v._dragStartId=ti(v._dragStarted.bind(v,y,h)),I(document,"selectstart",v),Yn=!0,M&&c(document.body,"user-select","none")},_onDragOver:function(h){var y=this.el,v=h.target,E,k,F,z=this.options,J=z.group,Y=fe.active,oe=gi===J,ce=z.sort,he=ot||Y,$e,xe=this,et=!1;if(Bi)return;function Ie(Dn,Ui){Pe(Dn,xe,t({evt:h,isOwner:oe,axis:$e?"vertical":"horizontal",revert:F,dragRect:E,targetRect:k,canSort:ce,fromSortable:he,target:v,completed:ht,onMove:function(Ar,Eo){return On(Ue,y,G,E,Ar,Z(Ar),h,Eo)},changed:Xt},Ui))}function Yt(){Ie("dragOverAnimationCapture"),xe.captureAnimationState(),xe!==he&&he.captureAnimationState()}function ht(Dn){return Ie("dragOverCompleted",{insertion:Dn}),Dn&&(oe?Y._hideClone():Y._showClone(xe),xe!==he&&(U(G,ot?ot.options.ghostClass:Y.options.ghostClass,!1),U(G,z.ghostClass,!0)),ot!==xe&&xe!==fe.active?ot=xe:xe===fe.active&&ot&&(ot=null),he===xe&&(xe._ignoreWhileAnimating=v),xe.animateAll(function(){Ie("dragOverAnimationComplete"),xe._ignoreWhileAnimating=null}),xe!==he&&(he.animateAll(),he._ignoreWhileAnimating=null)),(v===G&&!G.animated||v===y&&!v.animated)&&(Mt=null),!z.dragoverBubble&&!h.rootEl&&v!==document&&(G.parentNode[We]._isOutsideThisEl(h.target),!Dn&&tn(h)),!z.dragoverBubble&&h.stopPropagation&&h.stopPropagation(),et=!0}function Xt(){ze=_e(G),Zt=_e(G,z.draggable),Be({sortable:xe,name:"change",toEl:y,newIndex:ze,newDraggableIndex:Zt,originalEvent:h})}if(h.preventDefault!==void 0&&h.cancelable&&h.preventDefault(),v=de(v,z.draggable,y,!0),Ie("dragOver"),fe.eventCanceled)return et;if(G.contains(h.target)||v.animated&&v.animatingX&&v.animatingY||xe._ignoreWhileAnimating===v)return ht(!1);if(en=!1,Y&&!z.disabled&&(oe?ce||(F=He!==Ue):ot===this||(this.lastPutMode=gi.checkPull(this,Y,G,h))&&J.checkPut(this,Y,G,h))){if($e=this._getDirection(h,v)==="vertical",E=Z(G),Ie("dragOverValid"),fe.eventCanceled)return et;if(F)return He=Ue,Yt(),this._hideClone(),Ie("revert"),fe.eventCanceled||(vn?Ue.insertBefore(G,vn):Ue.appendChild(G)),ht(!0);var pt=se(y,z.draggable);if(!pt||_o(h,$e,this)&&!pt.animated){if(pt===G)return ht(!1);if(pt&&y===h.target&&(v=pt),v&&(k=Z(v)),On(Ue,y,G,E,v,k,h,!!v)!==!1)return Yt(),pt&&pt.nextSibling?y.insertBefore(G,pt.nextSibling):y.appendChild(G),He=y,Xt(),ht(!0)}else if(pt&&xr(h,$e,this)){var Kt=ee(y,0,z,!0);if(Kt===G)return ht(!1);if(v=Kt,k=Z(v),On(Ue,y,G,E,v,k,h,!1)!==!1)return Yt(),y.insertBefore(G,Kt),He=y,Xt(),ht(!0)}else if(v.parentNode===y){k=Z(v);var Pt=0,xn,oi=G.parentNode!==y,Ln=!yo(G.animated&&G.toRect||E,v.animated&&v.toRect||k,$e),St=$e?"top":"left",nn=K(v,"top","top")||K(G,"top","top"),_i=nn?nn.scrollTop:void 0;Mt!==v&&(xn=k[St],An=!1,Xn=!Ln&&z.invertSwap||oi),Pt=ei(h,v,k,$e,Ln?1:z.swapThreshold,z.invertedSwapThreshold==null?z.swapThreshold:z.invertedSwapThreshold,Xn,Mt===v);var Rt;if(Pt!==0){var rn=_e(G);do rn-=Pt,Rt=He.children[rn];while(Rt&&(c(Rt,"display")==="none"||Rt===be))}if(Pt===0||Rt===v)return ht(!1);Mt=v,Vt=Pt;var on=v.nextElementSibling,It=!1;It=Pt===1;var sn=On(Ue,y,G,E,v,k,h,It);if(sn!==!1)return(sn===1||sn===-1)&&(It=sn===1),Bi=!0,setTimeout(vi,30),Yt(),It&&!on?y.appendChild(G):v.parentNode.insertBefore(G,It?on:v),nn&&ct(nn,0,_i-nn.scrollTop),He=G.parentNode,xn!==void 0&&!Xn&&(gt=Math.abs(xn-Z(v)[St])),Xt(),ht(!0)}if(y.contains(G))return ht(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){D(document,"mousemove",this._onTouchMove),D(document,"touchmove",this._onTouchMove),D(document,"pointermove",this._onTouchMove),D(document,"dragover",tn),D(document,"mousemove",tn),D(document,"touchmove",tn)},_offUpEvents:function(){var h=this.el.ownerDocument;D(h,"mouseup",this._onDrop),D(h,"touchend",this._onDrop),D(h,"pointerup",this._onDrop),D(h,"touchcancel",this._onDrop),D(document,"selectstart",this)},_onDrop:function(h){var y=this.el,v=this.options;if(ze=_e(G),Zt=_e(G,v.draggable),Pe("drop",this,{evt:h}),He=G&&G.parentNode,ze=_e(G),Zt=_e(G,v.draggable),fe.eventCanceled){this._nulling();return}wn=!1,Xn=!1,An=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),$i(this.cloneId),$i(this._dragStartId),this.nativeDraggable&&(D(document,"drop",this),D(y,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),M&&c(document.body,"user-select",""),c(G,"transform",""),h&&(Yn&&(h.cancelable&&h.preventDefault(),!v.dropBubble&&h.stopPropagation()),be&&be.parentNode&&be.parentNode.removeChild(be),(Ue===He||ot&&ot.lastPutMode!=="clone")&&Fe&&Fe.parentNode&&Fe.parentNode.removeChild(Fe),G&&(this.nativeDraggable&&D(G,"dragend",this),Zn(G),G.style["will-change"]="",Yn&&!wn&&U(G,ot?ot.options.ghostClass:this.options.ghostClass,!1),U(G,this.options.chosenClass,!1),Be({sortable:this,name:"unchoose",toEl:He,newIndex:null,newDraggableIndex:null,originalEvent:h}),Ue!==He?(ze>=0&&(Be({rootEl:He,name:"add",toEl:He,fromEl:Ue,originalEvent:h}),Be({sortable:this,name:"remove",toEl:He,originalEvent:h}),Be({rootEl:He,name:"sort",toEl:He,fromEl:Ue,originalEvent:h}),Be({sortable:this,name:"sort",toEl:He,originalEvent:h})),ot&&ot.save()):ze!==re&&ze>=0&&(Be({sortable:this,name:"update",toEl:He,originalEvent:h}),Be({sortable:this,name:"sort",toEl:He,originalEvent:h})),fe.active&&((ze==null||ze===-1)&&(ze=re,Zt=Un),Be({sortable:this,name:"end",toEl:He,originalEvent:h}),this.save()))),this._nulling()},_nulling:function(){Pe("nulling",this),Ue=G=He=be=vn=Fe=Et=kt=Ct=ft=Yn=ze=Zt=re=Un=Mt=Vt=ot=gi=fe.dragged=fe.ghost=fe.clone=fe.active=null,Gn.forEach(function(h){h.checked=!0}),Gn.length=Ii=Tn=0},handleEvent:function(h){switch(h.type){case"drop":case"dragend":this._onDrop(h);break;case"dragenter":case"dragover":G&&(this._onDragOver(h),br(h));break;case"selectstart":h.preventDefault();break}},toArray:function(){for(var h=[],y,v=this.el.children,E=0,k=v.length,F=this.options;E<k;E++)y=v[E],de(y,F.draggable,this.el,!1)&&h.push(y.getAttribute(F.dataIdAttr)||Er(y));return h},sort:function(h,y){var v={},E=this.el;this.toArray().forEach(function(k,F){var z=E.children[F];de(z,this.options.draggable,E,!1)&&(v[k]=z)},this),y&&this.captureAnimationState(),h.forEach(function(k){v[k]&&(E.removeChild(v[k]),E.appendChild(v[k]))}),y&&this.animateAll()},save:function(){var h=this.options.store;h&&h.set&&h.set(this)},closest:function(h,y){return de(h,y||this.options.draggable,this.el,!1)},option:function(h,y){var v=this.options;if(y===void 0)return v[h];var E=Ze.modifyOption(this,h,y);typeof E<"u"?v[h]=E:v[h]=y,h==="group"&&qi(v)},destroy:function(){Pe("destroy",this);var h=this.el;h[We]=null,D(h,"mousedown",this._onTapStart),D(h,"touchstart",this._onTapStart),D(h,"pointerdown",this._onTapStart),this.nativeDraggable&&(D(h,"dragover",this),D(h,"dragenter",this)),Array.prototype.forEach.call(h.querySelectorAll("[draggable]"),function(y){y.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),Lt.splice(Lt.indexOf(this.el),1),this.el=h=null},_hideClone:function(){if(!kt){if(Pe("hideClone",this),fe.eventCanceled)return;c(Fe,"display","none"),this.options.removeCloneOnHide&&Fe.parentNode&&Fe.parentNode.removeChild(Fe),kt=!0}},_showClone:function(h){if(h.lastPutMode!=="clone"){this._hideClone();return}if(kt){if(Pe("showClone",this),fe.eventCanceled)return;G.parentNode==Ue&&!this.options.group.revertClone?Ue.insertBefore(Fe,G):vn?Ue.insertBefore(Fe,vn):Ue.appendChild(Fe),this.options.group.revertClone&&this.animate(G,Fe),c(Fe,"display",""),kt=!1}}};function br(h){h.dataTransfer&&(h.dataTransfer.dropEffect="move"),h.cancelable&&h.preventDefault()}function On(h,y,v,E,k,F,z,J){var Y,oe=h[We],ce=oe.options.onMove,he;return window.CustomEvent&&!b&&!S?Y=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(Y=document.createEvent("Event"),Y.initEvent("move",!0,!0)),Y.to=y,Y.from=h,Y.dragged=v,Y.draggedRect=E,Y.related=k||y,Y.relatedRect=F||Z(y),Y.willInsertAfter=J,Y.originalEvent=z,h.dispatchEvent(Y),ce&&(he=ce.call(oe,Y,z)),he}function Zn(h){h.draggable=!1}function vi(){Bi=!1}function xr(h,y,v){var E=Z(ee(v.el,0,v.options,!0)),k=10;return y?h.clientX<E.left-k||h.clientY<E.top&&h.clientX<E.right:h.clientY<E.top-k||h.clientY<E.bottom&&h.clientX<E.left}function _o(h,y,v){var E=Z(se(v.el,v.options.draggable)),k=10;return y?h.clientX>E.right+k||h.clientX<=E.right&&h.clientY>E.bottom&&h.clientX>=E.left:h.clientX>E.right&&h.clientY>E.top||h.clientX<=E.right&&h.clientY>E.bottom+k}function ei(h,y,v,E,k,F,z,J){var Y=E?h.clientY:h.clientX,oe=E?v.height:v.width,ce=E?v.top:v.left,he=E?v.bottom:v.right,$e=!1;if(!z){if(J&&gt<oe*k){if(!An&&(Vt===1?Y>ce+oe*F/2:Y<he-oe*F/2)&&(An=!0),An)$e=!0;else if(Vt===1?Y<ce+gt:Y>he-gt)return-Vt}else if(Y>ce+oe*(1-k)/2&&Y<he-oe*(1-k)/2)return _r(y)}return $e=$e||z,$e&&(Y<ce+oe*F/2||Y>he-oe*F/2)?Y>ce+oe/2?1:-1:0}function _r(h){return _e(G)<_e(h)?1:-1}function Er(h){for(var y=h.tagName+h.className+h.src+h.href+h.textContent,v=y.length,E=0;v--;)E+=y.charCodeAt(v);return E.toString(36)}function Cr(h){Gn.length=0;for(var y=h.getElementsByTagName("input"),v=y.length;v--;){var E=y[v];E.checked&&Gn.push(E)}}function ti(h){return setTimeout(h,0)}function $i(h){return clearTimeout(h)}Jn&&I(document,"touchmove",function(h){(fe.active||wn)&&h.cancelable&&h.preventDefault()}),fe.utils={on:I,off:D,css:c,find:ue,is:function(h,y){return!!de(h,y,h,!1)},extend:wt,throttle:Wt,closest:de,toggleClass:U,clone:_t,index:_e,nextTick:ti,cancelNextTick:$i,detectDirection:vr,getChild:ee},fe.get=function(h){return h[We]},fe.mount=function(){for(var h=arguments.length,y=new Array(h),v=0;v<h;v++)y[v]=arguments[v];y[0].constructor===Array&&(y=y[0]),y.forEach(function(E){if(!E.prototype||!E.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(E));E.utils&&(fe.utils=t(t({},fe.utils),E.utils)),Ze.mount(E)})},fe.create=function(h,y){return new fe(h,y)},fe.version=f;var Ke=[],ni,Wi,wi=!1,yi,ii,ri,st;function Nn(){function h(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var y in this)y.charAt(0)==="_"&&typeof this[y]=="function"&&(this[y]=this[y].bind(this))}return h.prototype={dragStarted:function(y){var v=y.originalEvent;this.sortable.nativeDraggable?I(document,"dragover",this._handleAutoScroll):this.options.supportPointer?I(document,"pointermove",this._handleFallbackAutoScroll):v.touches?I(document,"touchmove",this._handleFallbackAutoScroll):I(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(y){var v=y.originalEvent;!this.options.dragOverBubble&&!v.rootEl&&this._handleAutoScroll(v)},drop:function(){this.sortable.nativeDraggable?D(document,"dragover",this._handleAutoScroll):(D(document,"pointermove",this._handleFallbackAutoScroll),D(document,"touchmove",this._handleFallbackAutoScroll),D(document,"mousemove",this._handleFallbackAutoScroll)),Sr(),bn(),yt()},nulling:function(){ri=Wi=ni=wi=st=yi=ii=null,Ke.length=0},_handleFallbackAutoScroll:function(y){this._handleAutoScroll(y,!0)},_handleAutoScroll:function(y,v){var E=this,k=(y.touches?y.touches[0]:y).clientX,F=(y.touches?y.touches[0]:y).clientY,z=document.elementFromPoint(k,F);if(ri=y,v||this.options.forceAutoScrollFallback||S||b||M){Vi(y,this.options,z,v);var J=rt(z,!0);wi&&(!st||k!==yi||F!==ii)&&(st&&Sr(),st=setInterval(function(){var Y=rt(document.elementFromPoint(k,F),!0);Y!==J&&(J=Y,bn()),Vi(y,E.options,Y,v)},10),yi=k,ii=F)}else{if(!this.options.bubbleScroll||rt(z,!0)===Ne()){bn();return}Vi(y,this.options,rt(z,!1),!1)}}},s(h,{pluginName:"scroll",initializeByDefault:!0})}function bn(){Ke.forEach(function(h){clearInterval(h.pid)}),Ke=[]}function Sr(){clearInterval(st)}var Vi=Wt(function(h,y,v,E){if(y.scroll){var k=(h.touches?h.touches[0]:h).clientX,F=(h.touches?h.touches[0]:h).clientY,z=y.scrollSensitivity,J=y.scrollSpeed,Y=Ne(),oe=!1,ce;Wi!==v&&(Wi=v,bn(),ni=y.scroll,ce=y.scrollFn,ni===!0&&(ni=rt(v,!0)));var he=0,$e=ni;do{var xe=$e,et=Z(xe),Ie=et.top,Yt=et.bottom,ht=et.left,Xt=et.right,pt=et.width,Kt=et.height,Pt=void 0,xn=void 0,oi=xe.scrollWidth,Ln=xe.scrollHeight,St=c(xe),nn=xe.scrollLeft,_i=xe.scrollTop;xe===Y?(Pt=pt<oi&&(St.overflowX==="auto"||St.overflowX==="scroll"||St.overflowX==="visible"),xn=Kt<Ln&&(St.overflowY==="auto"||St.overflowY==="scroll"||St.overflowY==="visible")):(Pt=pt<oi&&(St.overflowX==="auto"||St.overflowX==="scroll"),xn=Kt<Ln&&(St.overflowY==="auto"||St.overflowY==="scroll"));var Rt=Pt&&(Math.abs(Xt-k)<=z&&nn+pt<oi)-(Math.abs(ht-k)<=z&&!!nn),rn=xn&&(Math.abs(Yt-F)<=z&&_i+Kt<Ln)-(Math.abs(Ie-F)<=z&&!!_i);if(!Ke[he])for(var on=0;on<=he;on++)Ke[on]||(Ke[on]={});(Ke[he].vx!=Rt||Ke[he].vy!=rn||Ke[he].el!==xe)&&(Ke[he].el=xe,Ke[he].vx=Rt,Ke[he].vy=rn,clearInterval(Ke[he].pid),(Rt!=0||rn!=0)&&(oe=!0,Ke[he].pid=setInterval((function(){E&&this.layer===0&&fe.active._onTouchMove(ri);var It=Ke[this.layer].vy?Ke[this.layer].vy*J:0,sn=Ke[this.layer].vx?Ke[this.layer].vx*J:0;typeof ce=="function"&&ce.call(fe.dragged.parentNode[We],sn,It,h,ri,Ke[this.layer].el)!=="continue"||ct(Ke[this.layer].el,sn,It)}).bind({layer:he}),24))),he++}while(y.bubbleScroll&&$e!==Y&&($e=rt($e,!1)));wi=oe}},30),bi=function(h){var y=h.originalEvent,v=h.putSortable,E=h.dragEl,k=h.activeSortable,F=h.dispatchSortableEvent,z=h.hideGhostForTarget,J=h.unhideGhostForTarget;if(y){var Y=v||k;z();var oe=y.changedTouches&&y.changedTouches.length?y.changedTouches[0]:y,ce=document.elementFromPoint(oe.clientX,oe.clientY);J(),Y&&!Y.el.contains(ce)&&(F("spill"),this.onSpill({dragEl:E,putSortable:v}))}};function xi(){}xi.prototype={startIndex:null,dragStart:function(h){var y=h.oldDraggableIndex;this.startIndex=y},onSpill:function(h){var y=h.dragEl,v=h.putSortable;this.sortable.captureAnimationState(),v&&v.captureAnimationState();var E=ee(this.sortable.el,this.startIndex,this.options);E?this.sortable.el.insertBefore(y,E):this.sortable.el.appendChild(y),this.sortable.animateAll(),v&&v.animateAll()},drop:bi},s(xi,{pluginName:"revertOnSpill"});function kn(){}kn.prototype={onSpill:function(h){var y=h.dragEl,v=h.putSortable,E=v||this.sortable;E.captureAnimationState(),y.parentNode&&y.parentNode.removeChild(y),E.animateAll()},drop:bi},s(kn,{pluginName:"removeOnSpill"}),fe.mount(new Nn),fe.mount(kn,xi);var Tr=fe;if(window.Sortable=Tr,typeof window.Livewire>"u")throw"Livewire Sortable.js Plugin: window.Livewire is undefined. Make sure @livewireScripts is placed above this script include";window.Livewire.directive("sortable",(h,y,v)=>{if(y.modifiers.length>0)return;let E={};h.hasAttribute("wire:sortable.options")&&(E=new Function(`return ${h.getAttribute("wire:sortable.options")};`)()),h.livewire_sortable=window.Sortable.create(h,{...E,draggable:"[wire\\:sortable\\.item]",handle:h.querySelector("[wire\\:sortable\\.handle]")?"[wire\\:sortable\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable.item",group:{name:h.getAttribute("wire:sortable"),pull:!1,put:!1},store:{set:function(k){let F=k.toArray().map((z,J)=>({order:J+1,value:z}));v.call(y.method,F)}}})}),window.Livewire.directive("sortable-group",(h,y,v)=>{if(!y.modifiers.includes("item-group"))return;let E={};h.hasAttribute("wire:sortable-group.options")&&(E=new Function(`return ${h.getAttribute("wire:sortable-group.options")};`)()),h.livewire_sortable=window.Sortable.create(h,{...E,draggable:"[wire\\:sortable-group\\.item]",handle:h.querySelector("[wire\\:sortable-group\\.handle]")?"[wire\\:sortable-group\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable-group.item",group:{name:h.closest("[wire\\:sortable-group]").getAttribute("wire:sortable-group"),pull:!0,put:!0},onSort:()=>{let k=h.closest("[wire\\:sortable-group]"),F=Array.from(k.querySelectorAll("[wire\\:sortable-group\\.item-group]")).map((z,J)=>({order:J+1,value:z.getAttribute("wire:sortable-group.item-group"),items:z.livewire_sortable.toArray().map((Y,oe)=>({order:oe+1,value:Y}))}));v.call(k.getAttribute("wire:sortable-group"),F)}})})})();/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */var Jo=!1,Qo=!1,fi=[],Zo=-1;function Ed(e){Cd(e)}function Cd(e){fi.includes(e)||fi.push(e),Sd()}function Ya(e){let t=fi.indexOf(e);t!==-1&&t>Zo&&fi.splice(t,1)}function Sd(){!Qo&&!Jo&&(Jo=!0,queueMicrotask(Td))}function Td(){Jo=!1,Qo=!0;for(let e=0;e<fi.length;e++)fi[e](),Zo=e;fi.length=0,Zo=-1,Qo=!1}var Hi,Pi,fr,Xa,es=!0;function Ad(e){es=!1,e(),es=!0}function Od(e){Hi=e.reactive,fr=e.release,Pi=t=>e.effect(t,{scheduler:i=>{es?Ed(i):i()}}),Xa=e.raw}function la(e){Pi=e}function Nd(e){let t=()=>{};return[r=>{let s=Pi(r);return e._x_effects||(e._x_effects=new Set,e._x_runEffects=()=>{e._x_effects.forEach(a=>a())}),e._x_effects.add(s),t=()=>{s!==void 0&&(e._x_effects.delete(s),fr(s))},s},()=>{t()}]}var Ka=[],Ga=[],Ja=[];function kd(e){Ja.push(e)}function Qa(e,t){typeof t=="function"?(e._x_cleanups||(e._x_cleanups=[]),e._x_cleanups.push(t)):(t=e,Ga.push(t))}function Ld(e){Ka.push(e)}function Dd(e,t,i){e._x_attributeCleanups||(e._x_attributeCleanups={}),e._x_attributeCleanups[t]||(e._x_attributeCleanups[t]=[]),e._x_attributeCleanups[t].push(i)}function Za(e,t){e._x_attributeCleanups&&Object.entries(e._x_attributeCleanups).forEach(([i,r])=>{(t===void 0||t.includes(i))&&(r.forEach(s=>s()),delete e._x_attributeCleanups[i])})}var _s=new MutationObserver(Ts),Es=!1;function Cs(){_s.observe(document,{subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0}),Es=!0}function el(){Md(),_s.disconnect(),Es=!1}var nr=[],Io=!1;function Md(){nr=nr.concat(_s.takeRecords()),nr.length&&!Io&&(Io=!0,queueMicrotask(()=>{Hd(),Io=!1}))}function Hd(){Ts(nr),nr.length=0}function mt(e){if(!Es)return e();el();let t=e();return Cs(),t}var Ss=!1,Yr=[];function Pd(){Ss=!0}function Rd(){Ss=!1,Ts(Yr),Yr=[]}function Ts(e){if(Ss){Yr=Yr.concat(e);return}let t=[],i=[],r=new Map,s=new Map;for(let a=0;a<e.length;a++)if(!e[a].target._x_ignoreMutationObserver&&(e[a].type==="childList"&&(e[a].addedNodes.forEach(l=>l.nodeType===1&&t.push(l)),e[a].removedNodes.forEach(l=>l.nodeType===1&&i.push(l))),e[a].type==="attributes")){let l=e[a].target,f=e[a].attributeName,w=e[a].oldValue,b=()=>{r.has(l)||r.set(l,[]),r.get(l).push({name:f,value:l.getAttribute(f)})},S=()=>{s.has(l)||s.set(l,[]),s.get(l).push(f)};l.hasAttribute(f)&&w===null?b():l.hasAttribute(f)?(S(),b()):S()}s.forEach((a,l)=>{Za(l,a)}),r.forEach((a,l)=>{Ka.forEach(f=>f(l,a))});for(let a of i)if(!t.includes(a)&&(Ga.forEach(l=>l(a)),a._x_cleanups))for(;a._x_cleanups.length;)a._x_cleanups.pop()();t.forEach(a=>{a._x_ignoreSelf=!0,a._x_ignore=!0});for(let a of t)i.includes(a)||a.isConnected&&(delete a._x_ignoreSelf,delete a._x_ignore,Ja.forEach(l=>l(a)),a._x_ignore=!0,a._x_ignoreSelf=!0);t.forEach(a=>{delete a._x_ignoreSelf,delete a._x_ignore}),t=null,i=null,r=null,s=null}function tl(e){return pr(ki(e))}function hr(e,t,i){return e._x_dataStack=[t,...ki(i||e)],()=>{e._x_dataStack=e._x_dataStack.filter(r=>r!==t)}}function ki(e){return e._x_dataStack?e._x_dataStack:typeof ShadowRoot=="function"&&e instanceof ShadowRoot?ki(e.host):e.parentNode?ki(e.parentNode):[]}function pr(e){let t=new Proxy({},{ownKeys:()=>Array.from(new Set(e.flatMap(i=>Object.keys(i)))),has:(i,r)=>e.some(s=>s.hasOwnProperty(r)),get:(i,r)=>(e.find(s=>{if(s.hasOwnProperty(r)){let a=Object.getOwnPropertyDescriptor(s,r);if(a.get&&a.get._x_alreadyBound||a.set&&a.set._x_alreadyBound)return!0;if((a.get||a.set)&&a.enumerable){let l=a.get,f=a.set,w=a;l=l&&l.bind(t),f=f&&f.bind(t),l&&(l._x_alreadyBound=!0),f&&(f._x_alreadyBound=!0),Object.defineProperty(s,r,{...w,get:l,set:f})}return!0}return!1})||{})[r],set:(i,r,s)=>{let a=e.find(l=>l.hasOwnProperty(r));return a?a[r]=s:e[e.length-1][r]=s,!0}});return t}function nl(e){let t=r=>typeof r=="object"&&!Array.isArray(r)&&r!==null,i=(r,s="")=>{Object.entries(Object.getOwnPropertyDescriptors(r)).forEach(([a,{value:l,enumerable:f}])=>{if(f===!1||l===void 0)return;let w=s===""?a:`${s}.${a}`;typeof l=="object"&&l!==null&&l._x_interceptor?r[a]=l.initialize(e,w,a):t(l)&&l!==r&&!(l instanceof Element)&&i(l,w)})};return i(e)}function il(e,t=()=>{}){let i={initialValue:void 0,_x_interceptor:!0,initialize(r,s,a){return e(this.initialValue,()=>Id(r,s),l=>ts(r,s,l),s,a)}};return t(i),r=>{if(typeof r=="object"&&r!==null&&r._x_interceptor){let s=i.initialize.bind(i);i.initialize=(a,l,f)=>{let w=r.initialize(a,l,f);return i.initialValue=w,s(a,l,f)}}else i.initialValue=r;return i}}function Id(e,t){return t.split(".").reduce((i,r)=>i[r],e)}function ts(e,t,i){if(typeof t=="string"&&(t=t.split(".")),t.length===1)e[t[0]]=i;else{if(t.length===0)throw error;return e[t[0]]||(e[t[0]]={}),ts(e[t[0]],t.slice(1),i)}}var rl={};function Qt(e,t){rl[e]=t}function ns(e,t){return Object.entries(rl).forEach(([i,r])=>{let s=null;function a(){if(s)return s;{let[l,f]=cl(t);return s={interceptor:il,...l},Qa(t,f),s}}Object.defineProperty(e,`$${i}`,{get(){return r(t,a())},enumerable:!1})}),e}function jd(e,t,i,...r){try{return i(...r)}catch(s){sr(s,e,t)}}function sr(e,t,i=void 0){Object.assign(e,{el:t,expression:i}),console.warn(`Alpine Expression Error: ${e.message}

${i?'Expression: "'+i+`"

`:""}`,t),setTimeout(()=>{throw e},0)}var $r=!0;function ol(e){let t=$r;$r=!1;let i=e();return $r=t,i}function hi(e,t,i={}){let r;return Ot(e,t)(s=>r=s,i),r}function Ot(...e){return sl(...e)}var sl=al;function Fd(e){sl=e}function al(e,t){let i={};ns(i,e);let r=[i,...ki(e)],s=typeof t=="function"?Bd(r,t):qd(r,t,e);return jd.bind(null,e,t,s)}function Bd(e,t){return(i=()=>{},{scope:r={},params:s=[]}={})=>{let a=t.apply(pr([r,...e]),s);Xr(i,a)}}var jo={};function zd(e,t){if(jo[e])return jo[e];let i=Object.getPrototypeOf(async function(){}).constructor,r=/^[\n\s]*if.*\(.*\)/.test(e)||/^(let|const)\s/.test(e)?`(async()=>{ ${e} })()`:e,a=(()=>{try{return new i(["__self","scope"],`with (scope) { __self.result = ${r} }; __self.finished = true; return __self.result;`)}catch(l){return sr(l,t,e),Promise.resolve()}})();return jo[e]=a,a}function qd(e,t,i){let r=zd(t,i);return(s=()=>{},{scope:a={},params:l=[]}={})=>{r.result=void 0,r.finished=!1;let f=pr([a,...e]);if(typeof r=="function"){let w=r(r,f).catch(b=>sr(b,i,t));r.finished?(Xr(s,r.result,f,l,i),r.result=void 0):w.then(b=>{Xr(s,b,f,l,i)}).catch(b=>sr(b,i,t)).finally(()=>r.result=void 0)}}}function Xr(e,t,i,r,s){if($r&&typeof t=="function"){let a=t.apply(i,r);a instanceof Promise?a.then(l=>Xr(e,l,i,r)).catch(l=>sr(l,s,t)):e(a)}else typeof t=="object"&&t instanceof Promise?t.then(a=>e(a)):e(t)}var As="x-";function Ri(e=""){return As+e}function $d(e){As=e}var is={};function at(e,t){return is[e]=t,{before(i){if(!is[i]){console.warn("Cannot find directive `${directive}`. `${name}` will use the default order of execution");return}const r=ci.indexOf(i);ci.splice(r>=0?r:ci.indexOf("DEFAULT"),0,e)}}}function Os(e,t,i){if(t=Array.from(t),e._x_virtualDirectives){let a=Object.entries(e._x_virtualDirectives).map(([f,w])=>({name:f,value:w})),l=ll(a);a=a.map(f=>l.find(w=>w.name===f.name)?{name:`x-bind:${f.name}`,value:`"${f.value}"`}:f),t=t.concat(a)}let r={};return t.map(hl((a,l)=>r[a]=l)).filter(ml).map(Ud(r,i)).sort(Yd).map(a=>Vd(e,a))}function ll(e){return Array.from(e).map(hl()).filter(t=>!ml(t))}var rs=!1,tr=new Map,ul=Symbol();function Wd(e){rs=!0;let t=Symbol();ul=t,tr.set(t,[]);let i=()=>{for(;tr.get(t).length;)tr.get(t).shift()();tr.delete(t)},r=()=>{rs=!1,i()};e(i),r()}function cl(e){let t=[],i=f=>t.push(f),[r,s]=Nd(e);return t.push(s),[{Alpine:gr,effect:r,cleanup:i,evaluateLater:Ot.bind(Ot,e),evaluate:hi.bind(hi,e)},()=>t.forEach(f=>f())]}function Vd(e,t){let i=()=>{},r=is[t.type]||i,[s,a]=cl(e);Dd(e,t.original,a);let l=()=>{e._x_ignore||e._x_ignoreSelf||(r.inline&&r.inline(e,t,s),r=r.bind(r,e,t,s),rs?tr.get(ul).push(r):r())};return l.runCleanups=a,l}var dl=(e,t)=>({name:i,value:r})=>(i.startsWith(e)&&(i=i.replace(e,t)),{name:i,value:r}),fl=e=>e;function hl(e=()=>{}){return({name:t,value:i})=>{let{name:r,value:s}=pl.reduce((a,l)=>l(a),{name:t,value:i});return r!==t&&e(r,t),{name:r,value:s}}}var pl=[];function Ns(e){pl.push(e)}function ml({name:e}){return gl().test(e)}var gl=()=>new RegExp(`^${As}([^:^.]+)\\b`);function Ud(e,t){return({name:i,value:r})=>{let s=i.match(gl()),a=i.match(/:([a-zA-Z0-9\-:]+)/),l=i.match(/\.[^.\]]+(?=[^\]]*$)/g)||[],f=t||e[i]||i;return{type:s?s[1]:null,value:a?a[1]:null,modifiers:l.map(w=>w.replace(".","")),expression:r,original:f}}}var os="DEFAULT",ci=["ignore","ref","data","id","bind","init","for","model","modelable","transition","show","if",os,"teleport"];function Yd(e,t){let i=ci.indexOf(e.type)===-1?os:e.type,r=ci.indexOf(t.type)===-1?os:t.type;return ci.indexOf(i)-ci.indexOf(r)}function ir(e,t,i={}){e.dispatchEvent(new CustomEvent(t,{detail:i,bubbles:!0,composed:!0,cancelable:!0}))}function qn(e,t){if(typeof ShadowRoot=="function"&&e instanceof ShadowRoot){Array.from(e.children).forEach(s=>qn(s,t));return}let i=!1;if(t(e,()=>i=!0),i)return;let r=e.firstElementChild;for(;r;)qn(r,t),r=r.nextElementSibling}function $n(e,...t){console.warn(`Alpine Warning: ${e}`,...t)}var ua=!1;function Xd(){ua&&$n("Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems."),ua=!0,document.body||$n("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?"),ir(document,"alpine:init"),ir(document,"alpine:initializing"),Cs(),kd(t=>Wn(t,qn)),Qa(t=>El(t)),Ld((t,i)=>{Os(t,i).forEach(r=>r())});let e=t=>!so(t.parentElement,!0);Array.from(document.querySelectorAll(yl())).filter(e).forEach(t=>{Wn(t)}),ir(document,"alpine:initialized")}var ks=[],vl=[];function wl(){return ks.map(e=>e())}function yl(){return ks.concat(vl).map(e=>e())}function bl(e){ks.push(e)}function xl(e){vl.push(e)}function so(e,t=!1){return ao(e,i=>{if((t?yl():wl()).some(s=>i.matches(s)))return!0})}function ao(e,t){if(e){if(t(e))return e;if(e._x_teleportBack&&(e=e._x_teleportBack),!!e.parentElement)return ao(e.parentElement,t)}}function Kd(e){return wl().some(t=>e.matches(t))}var _l=[];function Gd(e){_l.push(e)}function Wn(e,t=qn,i=()=>{}){Wd(()=>{t(e,(r,s)=>{i(r,s),_l.forEach(a=>a(r,s)),Os(r,r.attributes).forEach(a=>a()),r._x_ignore&&s()})})}function El(e){qn(e,t=>Za(t))}var ss=[],Ls=!1;function Ds(e=()=>{}){return queueMicrotask(()=>{Ls||setTimeout(()=>{as()})}),new Promise(t=>{ss.push(()=>{e(),t()})})}function as(){for(Ls=!1;ss.length;)ss.shift()()}function Jd(){Ls=!0}function Ms(e,t){return Array.isArray(t)?ca(e,t.join(" ")):typeof t=="object"&&t!==null?Qd(e,t):typeof t=="function"?Ms(e,t()):ca(e,t)}function ca(e,t){let i=s=>s.split(" ").filter(a=>!e.classList.contains(a)).filter(Boolean),r=s=>(e.classList.add(...s),()=>{e.classList.remove(...s)});return t=t===!0?t="":t||"",r(i(t))}function Qd(e,t){let i=f=>f.split(" ").filter(Boolean),r=Object.entries(t).flatMap(([f,w])=>w?i(f):!1).filter(Boolean),s=Object.entries(t).flatMap(([f,w])=>w?!1:i(f)).filter(Boolean),a=[],l=[];return s.forEach(f=>{e.classList.contains(f)&&(e.classList.remove(f),l.push(f))}),r.forEach(f=>{e.classList.contains(f)||(e.classList.add(f),a.push(f))}),()=>{l.forEach(f=>e.classList.add(f)),a.forEach(f=>e.classList.remove(f))}}function lo(e,t){return typeof t=="object"&&t!==null?Zd(e,t):ef(e,t)}function Zd(e,t){let i={};return Object.entries(t).forEach(([r,s])=>{i[r]=e.style[r],r.startsWith("--")||(r=tf(r)),e.style.setProperty(r,s)}),setTimeout(()=>{e.style.length===0&&e.removeAttribute("style")}),()=>{lo(e,i)}}function ef(e,t){let i=e.getAttribute("style",t);return e.setAttribute("style",t),()=>{e.setAttribute("style",i||"")}}function tf(e){return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function ls(e,t=()=>{}){let i=!1;return function(){i?t.apply(this,arguments):(i=!0,e.apply(this,arguments))}}at("transition",(e,{value:t,modifiers:i,expression:r},{evaluate:s})=>{typeof r=="function"&&(r=s(r)),r!==!1&&(!r||typeof r=="boolean"?rf(e,i,t):nf(e,r,t))});function nf(e,t,i){Cl(e,Ms,""),{enter:s=>{e._x_transition.enter.during=s},"enter-start":s=>{e._x_transition.enter.start=s},"enter-end":s=>{e._x_transition.enter.end=s},leave:s=>{e._x_transition.leave.during=s},"leave-start":s=>{e._x_transition.leave.start=s},"leave-end":s=>{e._x_transition.leave.end=s}}[i](t)}function rf(e,t,i){Cl(e,lo);let r=!t.includes("in")&&!t.includes("out")&&!i,s=r||t.includes("in")||["enter"].includes(i),a=r||t.includes("out")||["leave"].includes(i);t.includes("in")&&!r&&(t=t.filter((D,le)=>le<t.indexOf("out"))),t.includes("out")&&!r&&(t=t.filter((D,le)=>le>t.indexOf("out")));let l=!t.includes("opacity")&&!t.includes("scale"),f=l||t.includes("opacity"),w=l||t.includes("scale"),b=f?0:1,S=w?Ji(t,"scale",95)/100:1,H=Ji(t,"delay",0)/1e3,M=Ji(t,"origin","center"),A="opacity, transform",T=Ji(t,"duration",150)/1e3,L=Ji(t,"duration",75)/1e3,I="cubic-bezier(0.4, 0.0, 0.2, 1)";s&&(e._x_transition.enter.during={transformOrigin:M,transitionDelay:`${H}s`,transitionProperty:A,transitionDuration:`${T}s`,transitionTimingFunction:I},e._x_transition.enter.start={opacity:b,transform:`scale(${S})`},e._x_transition.enter.end={opacity:1,transform:"scale(1)"}),a&&(e._x_transition.leave.during={transformOrigin:M,transitionDelay:`${H}s`,transitionProperty:A,transitionDuration:`${L}s`,transitionTimingFunction:I},e._x_transition.leave.start={opacity:1,transform:"scale(1)"},e._x_transition.leave.end={opacity:b,transform:`scale(${S})`})}function Cl(e,t,i={}){e._x_transition||(e._x_transition={enter:{during:i,start:i,end:i},leave:{during:i,start:i,end:i},in(r=()=>{},s=()=>{}){us(e,t,{during:this.enter.during,start:this.enter.start,end:this.enter.end},r,s)},out(r=()=>{},s=()=>{}){us(e,t,{during:this.leave.during,start:this.leave.start,end:this.leave.end},r,s)}})}window.Element.prototype._x_toggleAndCascadeWithTransitions=function(e,t,i,r){const s=document.visibilityState==="visible"?requestAnimationFrame:setTimeout;let a=()=>s(i);if(t){e._x_transition&&(e._x_transition.enter||e._x_transition.leave)?e._x_transition.enter&&(Object.entries(e._x_transition.enter.during).length||Object.entries(e._x_transition.enter.start).length||Object.entries(e._x_transition.enter.end).length)?e._x_transition.in(i):a():e._x_transition?e._x_transition.in(i):a();return}e._x_hidePromise=e._x_transition?new Promise((l,f)=>{e._x_transition.out(()=>{},()=>l(r)),e._x_transitioning.beforeCancel(()=>f({isFromCancelledTransition:!0}))}):Promise.resolve(r),queueMicrotask(()=>{let l=Sl(e);l?(l._x_hideChildren||(l._x_hideChildren=[]),l._x_hideChildren.push(e)):s(()=>{let f=w=>{let b=Promise.all([w._x_hidePromise,...(w._x_hideChildren||[]).map(f)]).then(([S])=>S());return delete w._x_hidePromise,delete w._x_hideChildren,b};f(e).catch(w=>{if(!w.isFromCancelledTransition)throw w})})})};function Sl(e){let t=e.parentNode;if(t)return t._x_hidePromise?t:Sl(t)}function us(e,t,{during:i,start:r,end:s}={},a=()=>{},l=()=>{}){if(e._x_transitioning&&e._x_transitioning.cancel(),Object.keys(i).length===0&&Object.keys(r).length===0&&Object.keys(s).length===0){a(),l();return}let f,w,b;of(e,{start(){f=t(e,r)},during(){w=t(e,i)},before:a,end(){f(),b=t(e,s)},after:l,cleanup(){w(),b()}})}function of(e,t){let i,r,s,a=ls(()=>{mt(()=>{i=!0,r||t.before(),s||(t.end(),as()),t.after(),e.isConnected&&t.cleanup(),delete e._x_transitioning})});e._x_transitioning={beforeCancels:[],beforeCancel(l){this.beforeCancels.push(l)},cancel:ls(function(){for(;this.beforeCancels.length;)this.beforeCancels.shift()();a()}),finish:a},mt(()=>{t.start(),t.during()}),Jd(),requestAnimationFrame(()=>{if(i)return;let l=Number(getComputedStyle(e).transitionDuration.replace(/,.*/,"").replace("s",""))*1e3,f=Number(getComputedStyle(e).transitionDelay.replace(/,.*/,"").replace("s",""))*1e3;l===0&&(l=Number(getComputedStyle(e).animationDuration.replace("s",""))*1e3),mt(()=>{t.before()}),r=!0,requestAnimationFrame(()=>{i||(mt(()=>{t.end()}),as(),setTimeout(e._x_transitioning.finish,l+f),s=!0)})})}function Ji(e,t,i){if(e.indexOf(t)===-1)return i;const r=e[e.indexOf(t)+1];if(!r||t==="scale"&&isNaN(r))return i;if(t==="duration"||t==="delay"){let s=r.match(/([0-9]+)ms/);if(s)return s[1]}return t==="origin"&&["top","right","left","center","bottom"].includes(e[e.indexOf(t)+2])?[r,e[e.indexOf(t)+2]].join(" "):r}var ar=!1;function mr(e,t=()=>{}){return(...i)=>ar?t(...i):e(...i)}function sf(e){return(...t)=>ar&&e(...t)}function af(e,t){t._x_dataStack||(t._x_dataStack=e._x_dataStack),ar=!0,uf(()=>{lf(t)}),ar=!1}function lf(e){let t=!1;Wn(e,(r,s)=>{qn(r,(a,l)=>{if(t&&Kd(a))return l();t=!0,s(a,l)})})}function uf(e){let t=Pi;la((i,r)=>{let s=t(i);return fr(s),()=>{}}),e(),la(t)}function Tl(e,t,i,r=[]){switch(e._x_bindings||(e._x_bindings=Hi({})),e._x_bindings[t]=i,t=r.includes("camel")?vf(t):t,t){case"value":cf(e,i);break;case"style":ff(e,i);break;case"class":df(e,i);break;case"selected":case"checked":hf(e,t,i);break;default:Al(e,t,i);break}}function cf(e,t){if(e.type==="radio")e.attributes.value===void 0&&(e.value=t),window.fromModel&&(e.checked=da(e.value,t));else if(e.type==="checkbox")Number.isInteger(t)?e.value=t:!Number.isInteger(t)&&!Array.isArray(t)&&typeof t!="boolean"&&![null,void 0].includes(t)?e.value=String(t):Array.isArray(t)?e.checked=t.some(i=>da(i,e.value)):e.checked=!!t;else if(e.tagName==="SELECT")gf(e,t);else{if(e.value===t)return;e.value=t}}function df(e,t){e._x_undoAddedClasses&&e._x_undoAddedClasses(),e._x_undoAddedClasses=Ms(e,t)}function ff(e,t){e._x_undoAddedStyles&&e._x_undoAddedStyles(),e._x_undoAddedStyles=lo(e,t)}function hf(e,t,i){Al(e,t,i),mf(e,t,i)}function Al(e,t,i){[null,void 0,!1].includes(i)&&wf(t)?e.removeAttribute(t):(Ol(t)&&(i=t),pf(e,t,i))}function pf(e,t,i){e.getAttribute(t)!=i&&e.setAttribute(t,i)}function mf(e,t,i){e[t]!==i&&(e[t]=i)}function gf(e,t){const i=[].concat(t).map(r=>r+"");Array.from(e.options).forEach(r=>{r.selected=i.includes(r.value)})}function vf(e){return e.toLowerCase().replace(/-(\w)/g,(t,i)=>i.toUpperCase())}function da(e,t){return e==t}function Ol(e){return["disabled","checked","required","readonly","hidden","open","selected","autofocus","itemscope","multiple","novalidate","allowfullscreen","allowpaymentrequest","formnovalidate","autoplay","controls","loop","muted","playsinline","default","ismap","reversed","async","defer","nomodule"].includes(e)}function wf(e){return!["aria-pressed","aria-checked","aria-expanded","aria-selected"].includes(e)}function yf(e,t,i){return e._x_bindings&&e._x_bindings[t]!==void 0?e._x_bindings[t]:Nl(e,t,i)}function bf(e,t,i,r=!0){if(e._x_bindings&&e._x_bindings[t]!==void 0)return e._x_bindings[t];if(e._x_inlineBindings&&e._x_inlineBindings[t]!==void 0){let s=e._x_inlineBindings[t];return s.extract=r,ol(()=>hi(e,s.expression))}return Nl(e,t,i)}function Nl(e,t,i){let r=e.getAttribute(t);return r===null?typeof i=="function"?i():i:r===""?!0:Ol(t)?!![t,"true"].includes(r):r}function kl(e,t){var i;return function(){var r=this,s=arguments,a=function(){i=null,e.apply(r,s)};clearTimeout(i),i=setTimeout(a,t)}}function Ll(e,t){let i;return function(){let r=this,s=arguments;i||(e.apply(r,s),i=!0,setTimeout(()=>i=!1,t))}}function xf(e){(Array.isArray(e)?e:[e]).forEach(i=>i(gr))}var li={},fa=!1;function _f(e,t){if(fa||(li=Hi(li),fa=!0),t===void 0)return li[e];li[e]=t,typeof t=="object"&&t!==null&&t.hasOwnProperty("init")&&typeof t.init=="function"&&li[e].init(),nl(li[e])}function Ef(){return li}var Dl={};function Cf(e,t){let i=typeof t!="function"?()=>t:t;e instanceof Element?Ml(e,i()):Dl[e]=i}function Sf(e){return Object.entries(Dl).forEach(([t,i])=>{Object.defineProperty(e,t,{get(){return(...r)=>i(...r)}})}),e}function Ml(e,t,i){let r=[];for(;r.length;)r.pop()();let s=Object.entries(t).map(([l,f])=>({name:l,value:f})),a=ll(s);s=s.map(l=>a.find(f=>f.name===l.name)?{name:`x-bind:${l.name}`,value:`"${l.value}"`}:l),Os(e,s,i).map(l=>{r.push(l.runCleanups),l()})}var Hl={};function Tf(e,t){Hl[e]=t}function Af(e,t){return Object.entries(Hl).forEach(([i,r])=>{Object.defineProperty(e,i,{get(){return(...s)=>r.bind(t)(...s)},enumerable:!1})}),e}var Of={get reactive(){return Hi},get release(){return fr},get effect(){return Pi},get raw(){return Xa},version:"3.12.3",flushAndStopDeferringMutations:Rd,dontAutoEvaluateFunctions:ol,disableEffectScheduling:Ad,startObservingMutations:Cs,stopObservingMutations:el,setReactivityEngine:Od,closestDataStack:ki,skipDuringClone:mr,onlyDuringClone:sf,addRootSelector:bl,addInitSelector:xl,addScopeToNode:hr,deferMutations:Pd,mapAttributes:Ns,evaluateLater:Ot,interceptInit:Gd,setEvaluator:Fd,mergeProxies:pr,extractProp:bf,findClosest:ao,closestRoot:so,destroyTree:El,interceptor:il,transition:us,setStyles:lo,mutateDom:mt,directive:at,throttle:Ll,debounce:kl,evaluate:hi,initTree:Wn,nextTick:Ds,prefixed:Ri,prefix:$d,plugin:xf,magic:Qt,store:_f,start:Xd,clone:af,bound:yf,$data:tl,walk:qn,data:Tf,bind:Cf},gr=Of;function Nf(e,t){const i=Object.create(null),r=e.split(",");for(let s=0;s<r.length;s++)i[r[s]]=!0;return t?s=>!!i[s.toLowerCase()]:s=>!!i[s]}var kf=Object.freeze({}),Pl=Object.assign,Lf=Object.prototype.hasOwnProperty,uo=(e,t)=>Lf.call(e,t),pi=Array.isArray,rr=e=>Rl(e)==="[object Map]",Df=e=>typeof e=="string",Hs=e=>typeof e=="symbol",co=e=>e!==null&&typeof e=="object",Mf=Object.prototype.toString,Rl=e=>Mf.call(e),Il=e=>Rl(e).slice(8,-1),Ps=e=>Df(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Hf=e=>{const t=Object.create(null);return i=>t[i]||(t[i]=e(i))},Pf=Hf(e=>e.charAt(0).toUpperCase()+e.slice(1)),jl=(e,t)=>e!==t&&(e===e||t===t),cs=new WeakMap,Qi=[],fn,mi=Symbol("iterate"),ds=Symbol("Map key iterate");function Rf(e){return e&&e._isEffect===!0}function If(e,t=kf){Rf(e)&&(e=e.raw);const i=Bf(e,t);return t.lazy||i(),i}function jf(e){e.active&&(Fl(e),e.options.onStop&&e.options.onStop(),e.active=!1)}var Ff=0;function Bf(e,t){const i=function(){if(!i.active)return e();if(!Qi.includes(i)){Fl(i);try{return qf(),Qi.push(i),fn=i,e()}finally{Qi.pop(),Bl(),fn=Qi[Qi.length-1]}}};return i.id=Ff++,i.allowRecurse=!!t.allowRecurse,i._isEffect=!0,i.active=!0,i.raw=e,i.deps=[],i.options=t,i}function Fl(e){const{deps:t}=e;if(t.length){for(let i=0;i<t.length;i++)t[i].delete(e);t.length=0}}var Li=!0,Rs=[];function zf(){Rs.push(Li),Li=!1}function qf(){Rs.push(Li),Li=!0}function Bl(){const e=Rs.pop();Li=e===void 0?!0:e}function Jt(e,t,i){if(!Li||fn===void 0)return;let r=cs.get(e);r||cs.set(e,r=new Map);let s=r.get(i);s||r.set(i,s=new Set),s.has(fn)||(s.add(fn),fn.deps.push(s),fn.options.onTrack&&fn.options.onTrack({effect:fn,target:e,type:t,key:i}))}function Vn(e,t,i,r,s,a){const l=cs.get(e);if(!l)return;const f=new Set,w=S=>{S&&S.forEach(H=>{(H!==fn||H.allowRecurse)&&f.add(H)})};if(t==="clear")l.forEach(w);else if(i==="length"&&pi(e))l.forEach((S,H)=>{(H==="length"||H>=r)&&w(S)});else switch(i!==void 0&&w(l.get(i)),t){case"add":pi(e)?Ps(i)&&w(l.get("length")):(w(l.get(mi)),rr(e)&&w(l.get(ds)));break;case"delete":pi(e)||(w(l.get(mi)),rr(e)&&w(l.get(ds)));break;case"set":rr(e)&&w(l.get(mi));break}const b=S=>{S.options.onTrigger&&S.options.onTrigger({effect:S,target:e,key:i,type:t,newValue:r,oldValue:s,oldTarget:a}),S.options.scheduler?S.options.scheduler(S):S()};f.forEach(b)}var $f=Nf("__proto__,__v_isRef,__isVue"),zl=new Set(Object.getOwnPropertyNames(Symbol).map(e=>Symbol[e]).filter(Hs)),Wf=fo(),Vf=fo(!1,!0),Uf=fo(!0),Yf=fo(!0,!0),Kr={};["includes","indexOf","lastIndexOf"].forEach(e=>{const t=Array.prototype[e];Kr[e]=function(...i){const r=Ge(this);for(let a=0,l=this.length;a<l;a++)Jt(r,"get",a+"");const s=t.apply(r,i);return s===-1||s===!1?t.apply(r,i.map(Ge)):s}});["push","pop","shift","unshift","splice"].forEach(e=>{const t=Array.prototype[e];Kr[e]=function(...i){zf();const r=t.apply(this,i);return Bl(),r}});function fo(e=!1,t=!1){return function(r,s,a){if(s==="__v_isReactive")return!e;if(s==="__v_isReadonly")return e;if(s==="__v_raw"&&a===(e?t?ih:nu:t?nh:tu).get(r))return r;const l=pi(r);if(!e&&l&&uo(Kr,s))return Reflect.get(Kr,s,a);const f=Reflect.get(r,s,a);return(Hs(s)?zl.has(s):$f(s))||(e||Jt(r,"get",s),t)?f:fs(f)?!l||!Ps(s)?f.value:f:co(f)?e?iu(f):Bs(f):f}}var Xf=ql(),Kf=ql(!0);function ql(e=!1){return function(i,r,s,a){let l=i[r];if(!e&&(s=Ge(s),l=Ge(l),!pi(i)&&fs(l)&&!fs(s)))return l.value=s,!0;const f=pi(i)&&Ps(r)?Number(r)<i.length:uo(i,r),w=Reflect.set(i,r,s,a);return i===Ge(a)&&(f?jl(s,l)&&Vn(i,"set",r,s,l):Vn(i,"add",r,s)),w}}function Gf(e,t){const i=uo(e,t),r=e[t],s=Reflect.deleteProperty(e,t);return s&&i&&Vn(e,"delete",t,void 0,r),s}function Jf(e,t){const i=Reflect.has(e,t);return(!Hs(t)||!zl.has(t))&&Jt(e,"has",t),i}function Qf(e){return Jt(e,"iterate",pi(e)?"length":mi),Reflect.ownKeys(e)}var $l={get:Wf,set:Xf,deleteProperty:Gf,has:Jf,ownKeys:Qf},Wl={get:Uf,set(e,t){return console.warn(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0},deleteProperty(e,t){return console.warn(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0}};Pl({},$l,{get:Vf,set:Kf});Pl({},Wl,{get:Yf});var Is=e=>co(e)?Bs(e):e,js=e=>co(e)?iu(e):e,Fs=e=>e,ho=e=>Reflect.getPrototypeOf(e);function po(e,t,i=!1,r=!1){e=e.__v_raw;const s=Ge(e),a=Ge(t);t!==a&&!i&&Jt(s,"get",t),!i&&Jt(s,"get",a);const{has:l}=ho(s),f=r?Fs:i?js:Is;if(l.call(s,t))return f(e.get(t));if(l.call(s,a))return f(e.get(a));e!==s&&e.get(t)}function mo(e,t=!1){const i=this.__v_raw,r=Ge(i),s=Ge(e);return e!==s&&!t&&Jt(r,"has",e),!t&&Jt(r,"has",s),e===s?i.has(e):i.has(e)||i.has(s)}function go(e,t=!1){return e=e.__v_raw,!t&&Jt(Ge(e),"iterate",mi),Reflect.get(e,"size",e)}function Vl(e){e=Ge(e);const t=Ge(this);return ho(t).has.call(t,e)||(t.add(e),Vn(t,"add",e,e)),this}function Ul(e,t){t=Ge(t);const i=Ge(this),{has:r,get:s}=ho(i);let a=r.call(i,e);a?eu(i,r,e):(e=Ge(e),a=r.call(i,e));const l=s.call(i,e);return i.set(e,t),a?jl(t,l)&&Vn(i,"set",e,t,l):Vn(i,"add",e,t),this}function Yl(e){const t=Ge(this),{has:i,get:r}=ho(t);let s=i.call(t,e);s?eu(t,i,e):(e=Ge(e),s=i.call(t,e));const a=r?r.call(t,e):void 0,l=t.delete(e);return s&&Vn(t,"delete",e,void 0,a),l}function Xl(){const e=Ge(this),t=e.size!==0,i=rr(e)?new Map(e):new Set(e),r=e.clear();return t&&Vn(e,"clear",void 0,void 0,i),r}function vo(e,t){return function(r,s){const a=this,l=a.__v_raw,f=Ge(l),w=t?Fs:e?js:Is;return!e&&Jt(f,"iterate",mi),l.forEach((b,S)=>r.call(s,w(b),w(S),a))}}function Rr(e,t,i){return function(...r){const s=this.__v_raw,a=Ge(s),l=rr(a),f=e==="entries"||e===Symbol.iterator&&l,w=e==="keys"&&l,b=s[e](...r),S=i?Fs:t?js:Is;return!t&&Jt(a,"iterate",w?ds:mi),{next(){const{value:H,done:M}=b.next();return M?{value:H,done:M}:{value:f?[S(H[0]),S(H[1])]:S(H),done:M}},[Symbol.iterator](){return this}}}}function zn(e){return function(...t){{const i=t[0]?`on key "${t[0]}" `:"";console.warn(`${Pf(e)} operation ${i}failed: target is readonly.`,Ge(this))}return e==="delete"?!1:this}}var Kl={get(e){return po(this,e)},get size(){return go(this)},has:mo,add:Vl,set:Ul,delete:Yl,clear:Xl,forEach:vo(!1,!1)},Gl={get(e){return po(this,e,!1,!0)},get size(){return go(this)},has:mo,add:Vl,set:Ul,delete:Yl,clear:Xl,forEach:vo(!1,!0)},Jl={get(e){return po(this,e,!0)},get size(){return go(this,!0)},has(e){return mo.call(this,e,!0)},add:zn("add"),set:zn("set"),delete:zn("delete"),clear:zn("clear"),forEach:vo(!0,!1)},Ql={get(e){return po(this,e,!0,!0)},get size(){return go(this,!0)},has(e){return mo.call(this,e,!0)},add:zn("add"),set:zn("set"),delete:zn("delete"),clear:zn("clear"),forEach:vo(!0,!0)},Zf=["keys","values","entries",Symbol.iterator];Zf.forEach(e=>{Kl[e]=Rr(e,!1,!1),Jl[e]=Rr(e,!0,!1),Gl[e]=Rr(e,!1,!0),Ql[e]=Rr(e,!0,!0)});function Zl(e,t){const i=t?e?Ql:Gl:e?Jl:Kl;return(r,s,a)=>s==="__v_isReactive"?!e:s==="__v_isReadonly"?e:s==="__v_raw"?r:Reflect.get(uo(i,s)&&s in r?i:r,s,a)}var eh={get:Zl(!1,!1)},th={get:Zl(!0,!1)};function eu(e,t,i){const r=Ge(i);if(r!==i&&t.call(e,r)){const s=Il(e);console.warn(`Reactive ${s} contains both the raw and reactive versions of the same object${s==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}var tu=new WeakMap,nh=new WeakMap,nu=new WeakMap,ih=new WeakMap;function rh(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function oh(e){return e.__v_skip||!Object.isExtensible(e)?0:rh(Il(e))}function Bs(e){return e&&e.__v_isReadonly?e:ru(e,!1,$l,eh,tu)}function iu(e){return ru(e,!0,Wl,th,nu)}function ru(e,t,i,r,s){if(!co(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&!(t&&e.__v_isReactive))return e;const a=s.get(e);if(a)return a;const l=oh(e);if(l===0)return e;const f=new Proxy(e,l===2?r:i);return s.set(e,f),f}function Ge(e){return e&&Ge(e.__v_raw)||e}function fs(e){return!!(e&&e.__v_isRef===!0)}Qt("nextTick",()=>Ds);Qt("dispatch",e=>ir.bind(ir,e));Qt("watch",(e,{evaluateLater:t,effect:i})=>(r,s)=>{let a=t(r),l=!0,f,w=i(()=>a(b=>{JSON.stringify(b),l?f=b:queueMicrotask(()=>{s(b,f),f=b}),l=!1}));e._x_effects.delete(w)});Qt("store",Ef);Qt("data",e=>tl(e));Qt("root",e=>so(e));Qt("refs",e=>(e._x_refs_proxy||(e._x_refs_proxy=pr(sh(e))),e._x_refs_proxy));function sh(e){let t=[],i=e;for(;i;)i._x_refs&&t.push(i._x_refs),i=i.parentNode;return t}var Fo={};function ou(e){return Fo[e]||(Fo[e]=0),++Fo[e]}function ah(e,t){return ao(e,i=>{if(i._x_ids&&i._x_ids[t])return!0})}function lh(e,t){e._x_ids||(e._x_ids={}),e._x_ids[t]||(e._x_ids[t]=ou(t))}Qt("id",e=>(t,i=null)=>{let r=ah(e,t),s=r?r._x_ids[t]:ou(t);return i?`${t}-${s}-${i}`:`${t}-${s}`});Qt("el",e=>e);su("Focus","focus","focus");su("Persist","persist","persist");function su(e,t,i){Qt(t,r=>$n(`You can't use [$${directiveName}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${i}`,r))}function uh({get:e,set:t},{get:i,set:r}){let s=!0,a,l,f=Pi(()=>{let w,b;s?(w=e(),r(w),b=i(),s=!1):(w=e(),b=i(),l=JSON.stringify(w),JSON.stringify(b),l!==a?(b=i(),r(w),b=w):(t(b),w=b)),a=JSON.stringify(w),JSON.stringify(b)});return()=>{fr(f)}}at("modelable",(e,{expression:t},{effect:i,evaluateLater:r,cleanup:s})=>{let a=r(t),l=()=>{let S;return a(H=>S=H),S},f=r(`${t} = __placeholder`),w=S=>f(()=>{},{scope:{__placeholder:S}}),b=l();w(b),queueMicrotask(()=>{if(!e._x_model)return;e._x_removeModelListeners.default();let S=e._x_model.get,H=e._x_model.set,M=uh({get(){return S()},set(A){H(A)}},{get(){return l()},set(A){w(A)}});s(M)})});var ch=document.createElement("div");at("teleport",(e,{modifiers:t,expression:i},{cleanup:r})=>{e.tagName.toLowerCase()!=="template"&&$n("x-teleport can only be used on a <template> tag",e);let s=mr(()=>document.querySelector(i),()=>ch)();s||$n(`Cannot find x-teleport element for selector: "${i}"`);let a=e.content.cloneNode(!0).firstElementChild;e._x_teleport=a,a._x_teleportBack=e,e._x_forwardEvents&&e._x_forwardEvents.forEach(l=>{a.addEventListener(l,f=>{f.stopPropagation(),e.dispatchEvent(new f.constructor(f.type,f))})}),hr(a,{},e),mt(()=>{t.includes("prepend")?s.parentNode.insertBefore(a,s):t.includes("append")?s.parentNode.insertBefore(a,s.nextSibling):s.appendChild(a),Wn(a),a._x_ignore=!0}),r(()=>a.remove())});var au=()=>{};au.inline=(e,{modifiers:t},{cleanup:i})=>{t.includes("self")?e._x_ignoreSelf=!0:e._x_ignore=!0,i(()=>{t.includes("self")?delete e._x_ignoreSelf:delete e._x_ignore})};at("ignore",au);at("effect",(e,{expression:t},{effect:i})=>i(Ot(e,t)));function hs(e,t,i,r){let s=e,a=w=>r(w),l={},f=(w,b)=>S=>b(w,S);if(i.includes("dot")&&(t=dh(t)),i.includes("camel")&&(t=fh(t)),i.includes("passive")&&(l.passive=!0),i.includes("capture")&&(l.capture=!0),i.includes("window")&&(s=window),i.includes("document")&&(s=document),i.includes("debounce")){let w=i[i.indexOf("debounce")+1]||"invalid-wait",b=Gr(w.split("ms")[0])?Number(w.split("ms")[0]):250;a=kl(a,b)}if(i.includes("throttle")){let w=i[i.indexOf("throttle")+1]||"invalid-wait",b=Gr(w.split("ms")[0])?Number(w.split("ms")[0]):250;a=Ll(a,b)}return i.includes("prevent")&&(a=f(a,(w,b)=>{b.preventDefault(),w(b)})),i.includes("stop")&&(a=f(a,(w,b)=>{b.stopPropagation(),w(b)})),i.includes("self")&&(a=f(a,(w,b)=>{b.target===e&&w(b)})),(i.includes("away")||i.includes("outside"))&&(s=document,a=f(a,(w,b)=>{e.contains(b.target)||b.target.isConnected!==!1&&(e.offsetWidth<1&&e.offsetHeight<1||e._x_isShown!==!1&&w(b))})),i.includes("once")&&(a=f(a,(w,b)=>{w(b),s.removeEventListener(t,a,l)})),a=f(a,(w,b)=>{ph(t)&&mh(b,i)||w(b)}),s.addEventListener(t,a,l),()=>{s.removeEventListener(t,a,l)}}function dh(e){return e.replace(/-/g,".")}function fh(e){return e.toLowerCase().replace(/-(\w)/g,(t,i)=>i.toUpperCase())}function Gr(e){return!Array.isArray(e)&&!isNaN(e)}function hh(e){return[" ","_"].includes(e)?e:e.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[_\s]/,"-").toLowerCase()}function ph(e){return["keydown","keyup"].includes(e)}function mh(e,t){let i=t.filter(a=>!["window","document","prevent","stop","once","capture"].includes(a));if(i.includes("debounce")){let a=i.indexOf("debounce");i.splice(a,Gr((i[a+1]||"invalid-wait").split("ms")[0])?2:1)}if(i.includes("throttle")){let a=i.indexOf("throttle");i.splice(a,Gr((i[a+1]||"invalid-wait").split("ms")[0])?2:1)}if(i.length===0||i.length===1&&ha(e.key).includes(i[0]))return!1;const s=["ctrl","shift","alt","meta","cmd","super"].filter(a=>i.includes(a));return i=i.filter(a=>!s.includes(a)),!(s.length>0&&s.filter(l=>((l==="cmd"||l==="super")&&(l="meta"),e[`${l}Key`])).length===s.length&&ha(e.key).includes(i[0]))}function ha(e){if(!e)return[];e=hh(e);let t={ctrl:"control",slash:"/",space:" ",spacebar:" ",cmd:"meta",esc:"escape",up:"arrow-up",down:"arrow-down",left:"arrow-left",right:"arrow-right",period:".",equal:"=",minus:"-",underscore:"_"};return t[e]=e,Object.keys(t).map(i=>{if(t[i]===e)return i}).filter(i=>i)}at("model",(e,{modifiers:t,expression:i},{effect:r,cleanup:s})=>{let a=e;t.includes("parent")&&(a=e.parentNode);let l=Ot(a,i),f;typeof i=="string"?f=Ot(a,`${i} = __placeholder`):typeof i=="function"&&typeof i()=="string"?f=Ot(a,`${i()} = __placeholder`):f=()=>{};let w=()=>{let M;return l(A=>M=A),pa(M)?M.get():M},b=M=>{let A;l(T=>A=T),pa(A)?A.set(M):f(()=>{},{scope:{__placeholder:M}})};typeof i=="string"&&e.type==="radio"&&mt(()=>{e.hasAttribute("name")||e.setAttribute("name",i)});var S=e.tagName.toLowerCase()==="select"||["checkbox","radio"].includes(e.type)||t.includes("lazy")?"change":"input";let H=ar?()=>{}:hs(e,S,t,M=>{b(gh(e,t,M,w()))});if(t.includes("fill")&&[null,""].includes(w())&&e.dispatchEvent(new Event(S,{})),e._x_removeModelListeners||(e._x_removeModelListeners={}),e._x_removeModelListeners.default=H,s(()=>e._x_removeModelListeners.default()),e.form){let M=hs(e.form,"reset",[],A=>{Ds(()=>e._x_model&&e._x_model.set(e.value))});s(()=>M())}e._x_model={get(){return w()},set(M){b(M)}},e._x_forceModelUpdate=M=>{M=M===void 0?w():M,M===void 0&&typeof i=="string"&&i.match(/\./)&&(M=""),window.fromModel=!0,mt(()=>Tl(e,"value",M)),delete window.fromModel},r(()=>{let M=w();t.includes("unintrusive")&&document.activeElement.isSameNode(e)||e._x_forceModelUpdate(M)})});function gh(e,t,i,r){return mt(()=>{if(i instanceof CustomEvent&&i.detail!==void 0)return i.detail??i.target.value;if(e.type==="checkbox")if(Array.isArray(r)){let s=t.includes("number")?Bo(i.target.value):i.target.value;return i.target.checked?r.concat([s]):r.filter(a=>!vh(a,s))}else return i.target.checked;else{if(e.tagName.toLowerCase()==="select"&&e.multiple)return t.includes("number")?Array.from(i.target.selectedOptions).map(s=>{let a=s.value||s.text;return Bo(a)}):Array.from(i.target.selectedOptions).map(s=>s.value||s.text);{let s=i.target.value;return t.includes("number")?Bo(s):t.includes("trim")?s.trim():s}}})}function Bo(e){let t=e?parseFloat(e):null;return wh(t)?t:e}function vh(e,t){return e==t}function wh(e){return!Array.isArray(e)&&!isNaN(e)}function pa(e){return e!==null&&typeof e=="object"&&typeof e.get=="function"&&typeof e.set=="function"}at("cloak",e=>queueMicrotask(()=>mt(()=>e.removeAttribute(Ri("cloak")))));xl(()=>`[${Ri("init")}]`);at("init",mr((e,{expression:t},{evaluate:i})=>typeof t=="string"?!!t.trim()&&i(t,{},!1):i(t,{},!1)));at("text",(e,{expression:t},{effect:i,evaluateLater:r})=>{let s=r(t);i(()=>{s(a=>{mt(()=>{e.textContent=a})})})});at("html",(e,{expression:t},{effect:i,evaluateLater:r})=>{let s=r(t);i(()=>{s(a=>{mt(()=>{e.innerHTML=a,e._x_ignoreSelf=!0,Wn(e),delete e._x_ignoreSelf})})})});Ns(dl(":",fl(Ri("bind:"))));var lu=(e,{value:t,modifiers:i,expression:r,original:s},{effect:a})=>{if(!t){let f={};Sf(f),Ot(e,r)(b=>{Ml(e,b,s)},{scope:f});return}if(t==="key")return yh(e,r);if(e._x_inlineBindings&&e._x_inlineBindings[t]&&e._x_inlineBindings[t].extract)return;let l=Ot(e,r);a(()=>l(f=>{f===void 0&&typeof r=="string"&&r.match(/\./)&&(f=""),mt(()=>Tl(e,t,f,i))}))};lu.inline=(e,{value:t,modifiers:i,expression:r})=>{t&&(e._x_inlineBindings||(e._x_inlineBindings={}),e._x_inlineBindings[t]={expression:r,extract:!1})};at("bind",lu);function yh(e,t){e._x_keyExpression=t}bl(()=>`[${Ri("data")}]`);at("data",mr((e,{expression:t},{cleanup:i})=>{t=t===""?"{}":t;let r={};ns(r,e);let s={};Af(s,r);let a=hi(e,t,{scope:s});(a===void 0||a===!0)&&(a={}),ns(a,e);let l=Hi(a);nl(l);let f=hr(e,l);l.init&&hi(e,l.init),i(()=>{l.destroy&&hi(e,l.destroy),f()})}));at("show",(e,{modifiers:t,expression:i},{effect:r})=>{let s=Ot(e,i);e._x_doHide||(e._x_doHide=()=>{mt(()=>{e.style.setProperty("display","none",t.includes("important")?"important":void 0)})}),e._x_doShow||(e._x_doShow=()=>{mt(()=>{e.style.length===1&&e.style.display==="none"?e.removeAttribute("style"):e.style.removeProperty("display")})});let a=()=>{e._x_doHide(),e._x_isShown=!1},l=()=>{e._x_doShow(),e._x_isShown=!0},f=()=>setTimeout(l),w=ls(H=>H?l():a(),H=>{typeof e._x_toggleAndCascadeWithTransitions=="function"?e._x_toggleAndCascadeWithTransitions(e,H,l,a):H?f():a()}),b,S=!0;r(()=>s(H=>{!S&&H===b||(t.includes("immediate")&&(H?f():a()),w(H),b=H,S=!1)}))});at("for",(e,{expression:t},{effect:i,cleanup:r})=>{let s=xh(t),a=Ot(e,s.items),l=Ot(e,e._x_keyExpression||"index");e._x_prevKeys=[],e._x_lookup={},i(()=>bh(e,s,a,l)),r(()=>{Object.values(e._x_lookup).forEach(f=>f.remove()),delete e._x_prevKeys,delete e._x_lookup})});function bh(e,t,i,r){let s=l=>typeof l=="object"&&!Array.isArray(l),a=e;i(l=>{_h(l)&&l>=0&&(l=Array.from(Array(l).keys(),I=>I+1)),l===void 0&&(l=[]);let f=e._x_lookup,w=e._x_prevKeys,b=[],S=[];if(s(l))l=Object.entries(l).map(([I,D])=>{let le=ma(t,D,I,l);r(we=>S.push(we),{scope:{index:I,...le}}),b.push(le)});else for(let I=0;I<l.length;I++){let D=ma(t,l[I],I,l);r(le=>S.push(le),{scope:{index:I,...D}}),b.push(D)}let H=[],M=[],A=[],T=[];for(let I=0;I<w.length;I++){let D=w[I];S.indexOf(D)===-1&&A.push(D)}w=w.filter(I=>!A.includes(I));let L="template";for(let I=0;I<S.length;I++){let D=S[I],le=w.indexOf(D);if(le===-1)w.splice(I,0,D),H.push([L,I]);else if(le!==I){let we=w.splice(I,1)[0],de=w.splice(le-1,1)[0];w.splice(I,0,de),w.splice(le,0,we),M.push([we,de])}else T.push(D);L=D}for(let I=0;I<A.length;I++){let D=A[I];f[D]._x_effects&&f[D]._x_effects.forEach(Ya),f[D].remove(),f[D]=null,delete f[D]}for(let I=0;I<M.length;I++){let[D,le]=M[I],we=f[D],de=f[le],Ce=document.createElement("div");mt(()=>{de||$n('x-for ":key" is undefined or invalid',a),de.after(Ce),we.after(de),de._x_currentIfEl&&de.after(de._x_currentIfEl),Ce.before(we),we._x_currentIfEl&&we.after(we._x_currentIfEl),Ce.remove()}),de._x_refreshXForScope(b[S.indexOf(le)])}for(let I=0;I<H.length;I++){let[D,le]=H[I],we=D==="template"?a:f[D];we._x_currentIfEl&&(we=we._x_currentIfEl);let de=b[le],Ce=S[le],U=document.importNode(a.content,!0).firstElementChild,c=Hi(de);hr(U,c,a),U._x_refreshXForScope=ie=>{Object.entries(ie).forEach(([ue,Ne])=>{c[ue]=Ne})},mt(()=>{we.after(U),Wn(U)}),typeof Ce=="object"&&$n("x-for key cannot be an object, it must be a string or an integer",a),f[Ce]=U}for(let I=0;I<T.length;I++)f[T[I]]._x_refreshXForScope(b[S.indexOf(T[I])]);a._x_prevKeys=S})}function xh(e){let t=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,i=/^\s*\(|\)\s*$/g,r=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,s=e.match(r);if(!s)return;let a={};a.items=s[2].trim();let l=s[1].replace(i,"").trim(),f=l.match(t);return f?(a.item=l.replace(t,"").trim(),a.index=f[1].trim(),f[2]&&(a.collection=f[2].trim())):a.item=l,a}function ma(e,t,i,r){let s={};return/^\[.*\]$/.test(e.item)&&Array.isArray(t)?e.item.replace("[","").replace("]","").split(",").map(l=>l.trim()).forEach((l,f)=>{s[l]=t[f]}):/^\{.*\}$/.test(e.item)&&!Array.isArray(t)&&typeof t=="object"?e.item.replace("{","").replace("}","").split(",").map(l=>l.trim()).forEach(l=>{s[l]=t[l]}):s[e.item]=t,e.index&&(s[e.index]=i),e.collection&&(s[e.collection]=r),s}function _h(e){return!Array.isArray(e)&&!isNaN(e)}function uu(){}uu.inline=(e,{expression:t},{cleanup:i})=>{let r=so(e);r._x_refs||(r._x_refs={}),r._x_refs[t]=e,i(()=>delete r._x_refs[t])};at("ref",uu);at("if",(e,{expression:t},{effect:i,cleanup:r})=>{let s=Ot(e,t),a=()=>{if(e._x_currentIfEl)return e._x_currentIfEl;let f=e.content.cloneNode(!0).firstElementChild;return hr(f,{},e),mt(()=>{e.after(f),Wn(f)}),e._x_currentIfEl=f,e._x_undoIf=()=>{qn(f,w=>{w._x_effects&&w._x_effects.forEach(Ya)}),f.remove(),delete e._x_currentIfEl},f},l=()=>{e._x_undoIf&&(e._x_undoIf(),delete e._x_undoIf)};i(()=>s(f=>{f?a():l()})),r(()=>e._x_undoIf&&e._x_undoIf())});at("id",(e,{expression:t},{evaluate:i})=>{i(t).forEach(s=>lh(e,s))});Ns(dl("@",fl(Ri("on:"))));at("on",mr((e,{value:t,modifiers:i,expression:r},{cleanup:s})=>{let a=r?Ot(e,r):()=>{};e.tagName.toLowerCase()==="template"&&(e._x_forwardEvents||(e._x_forwardEvents=[]),e._x_forwardEvents.includes(t)||e._x_forwardEvents.push(t));let l=hs(e,t,i,f=>{a(()=>{},{scope:{$event:f},params:[f]})});s(()=>l())}));wo("Collapse","collapse","collapse");wo("Intersect","intersect","intersect");wo("Focus","trap","focus");wo("Mask","mask","mask");function wo(e,t,i){at(t,r=>$n(`You can't use [x-${t}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${i}`,r))}gr.setEvaluator(al);gr.setReactivityEngine({reactive:Bs,effect:If,release:jf,raw:Ge});var Eh=gr,zs=Eh;/*!
* tabbable 5.2.1
* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
*/var cu=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])',"details>summary:first-of-type","details"],ga=cu.join(","),Jr=typeof Element>"u"?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector,du=function(t,i,r){var s=Array.prototype.slice.apply(t.querySelectorAll(ga));return i&&Jr.call(t,ga)&&s.unshift(t),s=s.filter(r),s},Ch=function(t){return t.contentEditable==="true"},fu=function(t){var i=parseInt(t.getAttribute("tabindex"),10);return isNaN(i)?Ch(t)||(t.nodeName==="AUDIO"||t.nodeName==="VIDEO"||t.nodeName==="DETAILS")&&t.getAttribute("tabindex")===null?0:t.tabIndex:i},Sh=function(t,i){return t.tabIndex===i.tabIndex?t.documentOrder-i.documentOrder:t.tabIndex-i.tabIndex},qs=function(t){return t.tagName==="INPUT"},Th=function(t){return qs(t)&&t.type==="hidden"},Ah=function(t){var i=t.tagName==="DETAILS"&&Array.prototype.slice.apply(t.children).some(function(r){return r.tagName==="SUMMARY"});return i},Oh=function(t,i){for(var r=0;r<t.length;r++)if(t[r].checked&&t[r].form===i)return t[r]},Nh=function(t){if(!t.name)return!0;var i=t.form||t.ownerDocument,r=function(f){return i.querySelectorAll('input[type="radio"][name="'+f+'"]')},s;if(typeof window<"u"&&typeof window.CSS<"u"&&typeof window.CSS.escape=="function")s=r(window.CSS.escape(t.name));else try{s=r(t.name)}catch(l){return console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s",l.message),!1}var a=Oh(s,t.form);return!a||a===t},kh=function(t){return qs(t)&&t.type==="radio"},Lh=function(t){return kh(t)&&!Nh(t)},Dh=function(t,i){if(getComputedStyle(t).visibility==="hidden")return!0;var r=Jr.call(t,"details>summary:first-of-type"),s=r?t.parentElement:t;if(Jr.call(s,"details:not([open]) *"))return!0;if(!i||i==="full")for(;t;){if(getComputedStyle(t).display==="none")return!0;t=t.parentElement}else if(i==="non-zero-area"){var a=t.getBoundingClientRect(),l=a.width,f=a.height;return l===0&&f===0}return!1},Mh=function(t){if(qs(t)||t.tagName==="SELECT"||t.tagName==="TEXTAREA"||t.tagName==="BUTTON")for(var i=t.parentElement;i;){if(i.tagName==="FIELDSET"&&i.disabled){for(var r=0;r<i.children.length;r++){var s=i.children.item(r);if(s.tagName==="LEGEND")return!s.contains(t)}return!0}i=i.parentElement}return!1},$s=function(t,i){return!(i.disabled||Th(i)||Dh(i,t.displayCheck)||Ah(i)||Mh(i))},Hh=function(t,i){return!(!$s(t,i)||Lh(i)||fu(i)<0)},Ph=function(t,i){i=i||{};var r=[],s=[],a=du(t,i.includeContainer,Hh.bind(null,i));a.forEach(function(f,w){var b=fu(f);b===0?r.push(f):s.push({documentOrder:w,tabIndex:b,node:f})});var l=s.sort(Sh).map(function(f){return f.node}).concat(r);return l},Rh=function(t,i){i=i||{};var r=du(t,i.includeContainer,$s.bind(null,i));return r},Ih=cu.concat("iframe").join(","),hu=function(t,i){if(i=i||{},!t)throw new Error("No node provided");return Jr.call(t,Ih)===!1?!1:$s(i,t)};/*!
* focus-trap 6.6.1
* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
*/function va(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable})),i.push.apply(i,r)}return i}function jh(e){for(var t=1;t<arguments.length;t++){var i=arguments[t]!=null?arguments[t]:{};t%2?va(Object(i),!0).forEach(function(r){Fh(e,r,i[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):va(Object(i)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(i,r))})}return e}function Fh(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var wa=function(){var e=[];return{activateTrap:function(i){if(e.length>0){var r=e[e.length-1];r!==i&&r.pause()}var s=e.indexOf(i);s===-1||e.splice(s,1),e.push(i)},deactivateTrap:function(i){var r=e.indexOf(i);r!==-1&&e.splice(r,1),e.length>0&&e[e.length-1].unpause()}}}(),Bh=function(t){return t.tagName&&t.tagName.toLowerCase()==="input"&&typeof t.select=="function"},zh=function(t){return t.key==="Escape"||t.key==="Esc"||t.keyCode===27},qh=function(t){return t.key==="Tab"||t.keyCode===9},ya=function(t){return setTimeout(t,0)},zo=function(t,i){var r=-1;return t.every(function(s,a){return i(s)?(r=a,!1):!0}),r},Zi=function(t){for(var i=arguments.length,r=new Array(i>1?i-1:0),s=1;s<i;s++)r[s-1]=arguments[s];return typeof t=="function"?t.apply(void 0,r):t},$h=function(t,i){var r=document,s=jh({returnFocusOnDeactivate:!0,escapeDeactivates:!0,delayInitialFocus:!0},i),a={containers:[],tabbableGroups:[],nodeFocusedBeforeActivation:null,mostRecentlyFocusedNode:null,active:!1,paused:!1,delayInitialFocusTimer:void 0},l,f=function(U,c,ie){return U&&U[c]!==void 0?U[c]:s[ie||c]},w=function(U){return a.containers.some(function(c){return c.contains(U)})},b=function(U){var c=s[U];if(!c)return null;var ie=c;if(typeof c=="string"&&(ie=r.querySelector(c),!ie))throw new Error("`".concat(U,"` refers to no known node"));if(typeof c=="function"&&(ie=c(),!ie))throw new Error("`".concat(U,"` did not return a node"));return ie},S=function(){var U;if(f({},"initialFocus")===!1)return!1;if(b("initialFocus")!==null)U=b("initialFocus");else if(w(r.activeElement))U=r.activeElement;else{var c=a.tabbableGroups[0],ie=c&&c.firstTabbableNode;U=ie||b("fallbackFocus")}if(!U)throw new Error("Your focus-trap needs to have at least one focusable element");return U},H=function(){if(a.tabbableGroups=a.containers.map(function(U){var c=Ph(U);if(c.length>0)return{container:U,firstTabbableNode:c[0],lastTabbableNode:c[c.length-1]}}).filter(function(U){return!!U}),a.tabbableGroups.length<=0&&!b("fallbackFocus"))throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times")},M=function Ce(U){if(U!==!1&&U!==r.activeElement){if(!U||!U.focus){Ce(S());return}U.focus({preventScroll:!!s.preventScroll}),a.mostRecentlyFocusedNode=U,Bh(U)&&U.select()}},A=function(U){var c=b("setReturnFocus");return c||U},T=function(U){if(!w(U.target)){if(Zi(s.clickOutsideDeactivates,U)){l.deactivate({returnFocus:s.returnFocusOnDeactivate&&!hu(U.target)});return}Zi(s.allowOutsideClick,U)||U.preventDefault()}},L=function(U){var c=w(U.target);c||U.target instanceof Document?c&&(a.mostRecentlyFocusedNode=U.target):(U.stopImmediatePropagation(),M(a.mostRecentlyFocusedNode||S()))},I=function(U){H();var c=null;if(a.tabbableGroups.length>0){var ie=zo(a.tabbableGroups,function(_e){var Qe=_e.container;return Qe.contains(U.target)});if(ie<0)U.shiftKey?c=a.tabbableGroups[a.tabbableGroups.length-1].lastTabbableNode:c=a.tabbableGroups[0].firstTabbableNode;else if(U.shiftKey){var ue=zo(a.tabbableGroups,function(_e){var Qe=_e.firstTabbableNode;return U.target===Qe});if(ue<0&&a.tabbableGroups[ie].container===U.target&&(ue=ie),ue>=0){var Ne=ue===0?a.tabbableGroups.length-1:ue-1,Z=a.tabbableGroups[Ne];c=Z.lastTabbableNode}}else{var K=zo(a.tabbableGroups,function(_e){var Qe=_e.lastTabbableNode;return U.target===Qe});if(K<0&&a.tabbableGroups[ie].container===U.target&&(K=ie),K>=0){var ee=K===a.tabbableGroups.length-1?0:K+1,se=a.tabbableGroups[ee];c=se.firstTabbableNode}}}else c=b("fallbackFocus");c&&(U.preventDefault(),M(c))},D=function(U){if(zh(U)&&Zi(s.escapeDeactivates)!==!1){U.preventDefault(),l.deactivate();return}if(qh(U)){I(U);return}},le=function(U){Zi(s.clickOutsideDeactivates,U)||w(U.target)||Zi(s.allowOutsideClick,U)||(U.preventDefault(),U.stopImmediatePropagation())},we=function(){if(a.active)return wa.activateTrap(l),a.delayInitialFocusTimer=s.delayInitialFocus?ya(function(){M(S())}):M(S()),r.addEventListener("focusin",L,!0),r.addEventListener("mousedown",T,{capture:!0,passive:!1}),r.addEventListener("touchstart",T,{capture:!0,passive:!1}),r.addEventListener("click",le,{capture:!0,passive:!1}),r.addEventListener("keydown",D,{capture:!0,passive:!1}),l},de=function(){if(a.active)return r.removeEventListener("focusin",L,!0),r.removeEventListener("mousedown",T,!0),r.removeEventListener("touchstart",T,!0),r.removeEventListener("click",le,!0),r.removeEventListener("keydown",D,!0),l};return l={activate:function(U){if(a.active)return this;var c=f(U,"onActivate"),ie=f(U,"onPostActivate"),ue=f(U,"checkCanFocusTrap");ue||H(),a.active=!0,a.paused=!1,a.nodeFocusedBeforeActivation=r.activeElement,c&&c();var Ne=function(){ue&&H(),we(),ie&&ie()};return ue?(ue(a.containers.concat()).then(Ne,Ne),this):(Ne(),this)},deactivate:function(U){if(!a.active)return this;clearTimeout(a.delayInitialFocusTimer),a.delayInitialFocusTimer=void 0,de(),a.active=!1,a.paused=!1,wa.deactivateTrap(l);var c=f(U,"onDeactivate"),ie=f(U,"onPostDeactivate"),ue=f(U,"checkCanReturnFocus");c&&c();var Ne=f(U,"returnFocus","returnFocusOnDeactivate"),Z=function(){ya(function(){Ne&&M(A(a.nodeFocusedBeforeActivation)),ie&&ie()})};return Ne&&ue?(ue(A(a.nodeFocusedBeforeActivation)).then(Z,Z),this):(Z(),this)},pause:function(){return a.paused||!a.active?this:(a.paused=!0,de(),this)},unpause:function(){return!a.paused||!a.active?this:(a.paused=!1,H(),we(),this)},updateContainerElements:function(U){var c=[].concat(U).filter(Boolean);return a.containers=c.map(function(ie){return typeof ie=="string"?r.querySelector(ie):ie}),a.active&&H(),this}},l.updateContainerElements(t),l};function Wh(e){let t,i;window.addEventListener("focusin",()=>{t=i,i=document.activeElement}),e.magic("focus",r=>{let s=r;return{__noscroll:!1,__wrapAround:!1,within(a){return s=a,this},withoutScrolling(){return this.__noscroll=!0,this},noscroll(){return this.__noscroll=!0,this},withWrapAround(){return this.__wrapAround=!0,this},wrap(){return this.withWrapAround()},focusable(a){return hu(a)},previouslyFocused(){return t},lastFocused(){return t},focused(){return i},focusables(){return Array.isArray(s)?s:Rh(s,{displayCheck:"none"})},all(){return this.focusables()},isFirst(a){let l=this.all();return l[0]&&l[0].isSameNode(a)},isLast(a){let l=this.all();return l.length&&l.slice(-1)[0].isSameNode(a)},getFirst(){return this.all()[0]},getLast(){return this.all().slice(-1)[0]},getNext(){let a=this.all(),l=document.activeElement;if(a.indexOf(l)!==-1)return this.__wrapAround&&a.indexOf(l)===a.length-1?a[0]:a[a.indexOf(l)+1]},getPrevious(){let a=this.all(),l=document.activeElement;if(a.indexOf(l)!==-1)return this.__wrapAround&&a.indexOf(l)===0?a.slice(-1)[0]:a[a.indexOf(l)-1]},first(){this.focus(this.getFirst())},last(){this.focus(this.getLast())},next(){this.focus(this.getNext())},previous(){this.focus(this.getPrevious())},prev(){return this.previous()},focus(a){a&&setTimeout(()=>{a.hasAttribute("tabindex")||a.setAttribute("tabindex","0"),a.focus({preventScroll:this._noscroll})})}}}),e.directive("trap",e.skipDuringClone((r,{expression:s,modifiers:a},{effect:l,evaluateLater:f,cleanup:w})=>{let b=f(s),S=!1,H={escapeDeactivates:!1,allowOutsideClick:!0,fallbackFocus:()=>r},M=r.querySelector("[autofocus]");M&&(H.initialFocus=M);let A=$h(r,H),T=()=>{},L=()=>{};const I=()=>{T(),T=()=>{},L(),L=()=>{},A.deactivate({returnFocus:!a.includes("noreturn")})};l(()=>b(D=>{S!==D&&(D&&!S&&setTimeout(()=>{a.includes("inert")&&(T=ba(r)),a.includes("noscroll")&&(L=Vh()),A.activate()}),!D&&S&&I(),S=!!D)})),w(I)},(r,{expression:s,modifiers:a},{evaluate:l})=>{a.includes("inert")&&l(s)&&ba(r)}))}function ba(e){let t=[];return pu(e,i=>{let r=i.hasAttribute("aria-hidden");i.setAttribute("aria-hidden","true"),t.push(()=>r||i.removeAttribute("aria-hidden"))}),()=>{for(;t.length;)t.pop()()}}function pu(e,t){e.isSameNode(document.body)||!e.parentNode||Array.from(e.parentNode.children).forEach(i=>{i.isSameNode(e)?pu(e.parentNode,t):t(i)})}function Vh(){let e=document.documentElement.style.overflow,t=document.documentElement.style.paddingRight,i=window.innerWidth-document.documentElement.clientWidth;return document.documentElement.style.overflow="hidden",document.documentElement.style.paddingRight=`${i}px`,()=>{document.documentElement.style.overflow=e,document.documentElement.style.paddingRight=t}}var Uh=Wh;class Yh extends Di{constructor(){super()}addModuleQuickSetting(t,i){if(mw.quickSettings[t]||(mw.quickSettings[t]={}),mw.quickSettings[t].mainMenu||(mw.quickSettings[t].mainMenu=[]),Array.isArray(i))for(let r=0;r<i.length;r++)mw.quickSettings[t].mainMenu.push(i[r]);else mw.quickSettings[t].mainMenu.push(i)}addLayoutQuickSetting(t){if(mw.layoutQuickSettings||(mw.layoutQuickSettings=[]),Array.isArray(t))for(let i=0;i<t.length;i++)mw.layoutQuickSettings.push(t[i]);else mw.layoutQuickSettings.push(t)}}mw.app=new Ou;mw.app.register("commands",gd);mw.app.register("modules",vd);mw.app.register("layouts",wd);mw.app.register("keyboard",yd);mw.app.register("iconPicker",bd);mw.app.register("linkPicker",xd);mw.app.register("colorPicker",_d);mw.app.register("dynamicTargetMenus",Yh);mw.app.domTreeSelect=function(e){mw.top().app._liveEditDomTree&&mw.top().app._liveEditDomTree.select(e)};window.Alpine=zs;zs.plugin(Uh);zs.start();export{Xe as D,Kh as E,hd as L,Di as M,Vr as a,xa as c,Gh as g,Jh as l};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
