var Da=Object.defineProperty;var ka=(e,t,n)=>t in e?Da(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var ve=(e,t,n)=>(ka(e,typeof t!="symbol"?t+"":t,n),n),di=(e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)};var D=(e,t,n)=>(di(e,t,"read from private field"),n?n.call(e):t.get(e)),oe=(e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)},pt=(e,t,n,i)=>(di(e,t,"write to private field"),i?i.call(e,n):t.set(e,n),n);var _e=(e,t,n)=>(di(e,t,"access private method"),n);var we;class kn{constructor(){oe(this,we,{})}on(t,n){D(this,we)[t]?D(this,we)[t].push(n):D(this,we)[t]=[n]}off(t,n){if(D(this,we)[t])if(typeof n=="function"){const i=D(this,we)[t].indexOf(n);if(i===-1)return;D(this,we)[t].splice(i,1)}else D(this,we)[t]=[]}dispatch(t,n){D(this,we)[t]&&D(this,we)[t].forEach(function(i){i.call(this,n)})}emit(t,n){return this.dispatch(t,n)}}we=new WeakMap;var be,wt,_n;class Ia extends kn{constructor(){super(...arguments);oe(this,wt);oe(this,be,{})}call(n,i){for(let r in D(this,be))D(this,be)[r][n]&&_e(this,wt,_n).call(this,n,D(this,be)[r],i)}get(n){return D(this,be)[n]}getModules(){return D(this,be)}register(n,i){let r;typeof i=="function"?r=new i:r=i,D(this,be)[n]=r,this[n]=r,_e(this,wt,_n).call(this,"onRegister",r),this.dispatch("register")}remove(n){let i;if(typeof n=="string"&&(i=n,n=this.get(n)),!i){for(let r in D(this,be))if(D(this,be)[r]===n){i=r;break}}delete D(this,be)[i],delete this[i],_e(this,wt,_n).call(this,"onDestroy",n),this.dispatch("remove")}}be=new WeakMap,wt=new WeakSet,_n=function(n,i,r){!n||!i||!i[n]||(n=i[n],n(r))};mw.require("editor.js");mw.require("css_parser.js");const Sd=function(){var e=document.querySelector("#mw-live-edit-editor"),t=function(){var f={};this.on=function(_,g){f[_]?f[_].push(g):f[_]=[g]},this.dispatch=function(_,g){f[_]&&f[_].forEach(function(v){v.call(this,g)})},this.provide=function(_){this.dispatch("change",_.map(function(g){return{label:g,value:g}}))}},n=new t;window.fontFamilyProvider=n;const i=mw.app.get("canvas").getFrame();i.contentWindow.fontFamilyProvider=n;const r=[[{group:{icon:"mdi mdi-format-title",controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],s=mw.Editor({document:i.contentWindow.document,executionDocument:i.contentWindow.document,actionWindow:i.contentWindow,element:e,mode:"document",notEditableClasses:["module"],regions:".edit",skin:"le2",editMode:"liveedit",scopeColor:"#111",controls:r,smallEditor:r,smallEditorPositionX:"center",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:n});var a=document.getElementById("vue-toolbar-undo"),l=document.getElementById("vue-toolbar-redo");s.state.on("record",function(){l.disabled=!s.state.hasPrev,a.disabled=!s.state.hasNext}),s.state.on("change",function(){l.disabled=!s.state.hasPrev,a.disabled=!s.state.hasNext}),a&&a.addEventListener("click",function(){s.state.undo()}),l&&l.addEventListener("click",function(){s.state.redo()}),e.innerHTML="",e.appendChild(s.wrapper);var d=s.storage.get(s.settings.id+"-small-editor-pinned");typeof d>"u"&&typeof s.smallEditorApi<"u"&&s.smallEditorApi.pin(),mw.app.register("richTextEditor",s),mw.app.register("richTextEditorAPI",s.api)};function Ha(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Di={},Pa={get exports(){return Di},set exports(e){Di=e}},Ln={},Ra={get exports(){return Ln},set exports(e){Ln=e}},Ls=function(t,n){return function(){for(var r=new Array(arguments.length),s=0;s<r.length;s++)r[s]=arguments[s];return t.apply(n,r)}},Ba=Ls,ot=Object.prototype.toString;function rr(e){return ot.call(e)==="[object Array]"}function ki(e){return typeof e>"u"}function za(e){return e!==null&&!ki(e)&&e.constructor!==null&&!ki(e.constructor)&&typeof e.constructor.isBuffer=="function"&&e.constructor.isBuffer(e)}function ja(e){return ot.call(e)==="[object ArrayBuffer]"}function $a(e){return typeof FormData<"u"&&e instanceof FormData}function Fa(e){var t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&e.buffer instanceof ArrayBuffer,t}function qa(e){return typeof e=="string"}function Va(e){return typeof e=="number"}function As(e){return e!==null&&typeof e=="object"}function xn(e){if(ot.call(e)!=="[object Object]")return!1;var t=Object.getPrototypeOf(e);return t===null||t===Object.prototype}function Ya(e){return ot.call(e)==="[object Date]"}function Wa(e){return ot.call(e)==="[object File]"}function Ua(e){return ot.call(e)==="[object Blob]"}function Ts(e){return ot.call(e)==="[object Function]"}function Xa(e){return As(e)&&Ts(e.pipe)}function Ka(e){return typeof URLSearchParams<"u"&&e instanceof URLSearchParams}function Ja(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function Za(){return typeof navigator<"u"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window<"u"&&typeof document<"u"}function sr(e,t){if(!(e===null||typeof e>"u"))if(typeof e!="object"&&(e=[e]),rr(e))for(var n=0,i=e.length;n<i;n++)t.call(null,e[n],n,e);else for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.call(null,e[r],r,e)}function Ii(){var e={};function t(r,s){xn(e[s])&&xn(r)?e[s]=Ii(e[s],r):xn(r)?e[s]=Ii({},r):rr(r)?e[s]=r.slice():e[s]=r}for(var n=0,i=arguments.length;n<i;n++)sr(arguments[n],t);return e}function Ga(e,t,n){return sr(t,function(r,s){n&&typeof r=="function"?e[s]=Ba(r,n):e[s]=r}),e}function Qa(e){return e.charCodeAt(0)===65279&&(e=e.slice(1)),e}var fe={isArray:rr,isArrayBuffer:ja,isBuffer:za,isFormData:$a,isArrayBufferView:Fa,isString:qa,isNumber:Va,isObject:As,isPlainObject:xn,isUndefined:ki,isDate:Ya,isFile:Wa,isBlob:Ua,isFunction:Ts,isStream:Xa,isURLSearchParams:Ka,isStandardBrowserEnv:Za,forEach:sr,merge:Ii,extend:Ga,trim:Ja,stripBOM:Qa},mt=fe;function Yr(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var Os=function(t,n,i){if(!n)return t;var r;if(i)r=i(n);else if(mt.isURLSearchParams(n))r=n.toString();else{var s=[];mt.forEach(n,function(d,f){d===null||typeof d>"u"||(mt.isArray(d)?f=f+"[]":d=[d],mt.forEach(d,function(g){mt.isDate(g)?g=g.toISOString():mt.isObject(g)&&(g=JSON.stringify(g)),s.push(Yr(f)+"="+Yr(g))}))}),r=s.join("&")}if(r){var a=t.indexOf("#");a!==-1&&(t=t.slice(0,a)),t+=(t.indexOf("?")===-1?"?":"&")+r}return t},el=fe;function In(){this.handlers=[]}In.prototype.use=function(t,n,i){return this.handlers.push({fulfilled:t,rejected:n,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1};In.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)};In.prototype.forEach=function(t){el.forEach(this.handlers,function(i){i!==null&&t(i)})};var tl=In,nl=fe,il=function(t,n){nl.forEach(t,function(r,s){s!==n&&s.toUpperCase()===n.toUpperCase()&&(t[n]=r,delete t[s])})},Ns=function(t,n,i,r,s){return t.config=n,i&&(t.code=i),t.request=r,t.response=s,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t},hi,Wr;function Ms(){if(Wr)return hi;Wr=1;var e=Ns;return hi=function(n,i,r,s,a){var l=new Error(n);return e(l,i,r,s,a)},hi}var fi,Ur;function rl(){if(Ur)return fi;Ur=1;var e=Ms();return fi=function(n,i,r){var s=r.config.validateStatus;!r.status||!s||s(r.status)?n(r):i(e("Request failed with status code "+r.status,r.config,null,r.request,r))},fi}var pi,Xr;function sl(){if(Xr)return pi;Xr=1;var e=fe;return pi=e.isStandardBrowserEnv()?function(){return{write:function(i,r,s,a,l,d){var f=[];f.push(i+"="+encodeURIComponent(r)),e.isNumber(s)&&f.push("expires="+new Date(s).toGMTString()),e.isString(a)&&f.push("path="+a),e.isString(l)&&f.push("domain="+l),d===!0&&f.push("secure"),document.cookie=f.join("; ")},read:function(i){var r=document.cookie.match(new RegExp("(^|;\\s*)("+i+")=([^;]*)"));return r?decodeURIComponent(r[3]):null},remove:function(i){this.write(i,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}(),pi}var mi,Kr;function ol(){return Kr||(Kr=1,mi=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}),mi}var gi,Jr;function al(){return Jr||(Jr=1,gi=function(t,n){return n?t.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):t}),gi}var vi,Zr;function ll(){if(Zr)return vi;Zr=1;var e=ol(),t=al();return vi=function(i,r){return i&&!e(r)?t(i,r):r},vi}var wi,Gr;function ul(){if(Gr)return wi;Gr=1;var e=fe,t=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];return wi=function(i){var r={},s,a,l;return i&&e.forEach(i.split(`
`),function(f){if(l=f.indexOf(":"),s=e.trim(f.substr(0,l)).toLowerCase(),a=e.trim(f.substr(l+1)),s){if(r[s]&&t.indexOf(s)>=0)return;s==="set-cookie"?r[s]=(r[s]?r[s]:[]).concat([a]):r[s]=r[s]?r[s]+", "+a:a}}),r},wi}var bi,Qr;function cl(){if(Qr)return bi;Qr=1;var e=fe;return bi=e.isStandardBrowserEnv()?function(){var n=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a"),r;function s(a){var l=a;return n&&(i.setAttribute("href",l),l=i.href),i.setAttribute("href",l),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:i.pathname.charAt(0)==="/"?i.pathname:"/"+i.pathname}}return r=s(window.location.href),function(l){var d=e.isString(l)?s(l):l;return d.protocol===r.protocol&&d.host===r.host}}():function(){return function(){return!0}}(),bi}var yi,es;function ts(){if(es)return yi;es=1;var e=fe,t=rl(),n=sl(),i=Os,r=ll(),s=ul(),a=cl(),l=Ms();return yi=function(f){return new Promise(function(g,v){var y=f.data,O=f.headers,P=f.responseType;e.isFormData(y)&&delete O["Content-Type"];var w=new XMLHttpRequest;if(f.auth){var S=f.auth.username||"",B=f.auth.password?unescape(encodeURIComponent(f.auth.password)):"";O.Authorization="Basic "+btoa(S+":"+B)}var U=r(f.baseURL,f.url);w.open(f.method.toUpperCase(),i(U,f.params,f.paramsSerializer),!0),w.timeout=f.timeout;function j(){if(w){var z="getAllResponseHeaders"in w?s(w.getAllResponseHeaders()):null,A=!P||P==="text"||P==="json"?w.responseText:w.response,me={data:A,status:w.status,statusText:w.statusText,headers:z,config:f,request:w};t(g,v,me),w=null}}if("onloadend"in w?w.onloadend=j:w.onreadystatechange=function(){!w||w.readyState!==4||w.status===0&&!(w.responseURL&&w.responseURL.indexOf("file:")===0)||setTimeout(j)},w.onabort=function(){w&&(v(l("Request aborted",f,"ECONNABORTED",w)),w=null)},w.onerror=function(){v(l("Network Error",f,null,w)),w=null},w.ontimeout=function(){var A="timeout of "+f.timeout+"ms exceeded";f.timeoutErrorMessage&&(A=f.timeoutErrorMessage),v(l(A,f,f.transitional&&f.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",w)),w=null},e.isStandardBrowserEnv()){var pe=(f.withCredentials||a(U))&&f.xsrfCookieName?n.read(f.xsrfCookieName):void 0;pe&&(O[f.xsrfHeaderName]=pe)}"setRequestHeader"in w&&e.forEach(O,function(A,me){typeof y>"u"&&me.toLowerCase()==="content-type"?delete O[me]:w.setRequestHeader(me,A)}),e.isUndefined(f.withCredentials)||(w.withCredentials=!!f.withCredentials),P&&P!=="json"&&(w.responseType=f.responseType),typeof f.onDownloadProgress=="function"&&w.addEventListener("progress",f.onDownloadProgress),typeof f.onUploadProgress=="function"&&w.upload&&w.upload.addEventListener("progress",f.onUploadProgress),f.cancelToken&&f.cancelToken.promise.then(function(A){w&&(w.abort(),v(A),w=null)}),y||(y=null),w.send(y)})},yi}var ee=fe,ns=il,dl=Ns,hl={"Content-Type":"application/x-www-form-urlencoded"};function is(e,t){!ee.isUndefined(e)&&ee.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}function fl(){var e;return(typeof XMLHttpRequest<"u"||typeof process<"u"&&Object.prototype.toString.call(process)==="[object process]")&&(e=ts()),e}function pl(e,t,n){if(ee.isString(e))try{return(t||JSON.parse)(e),ee.trim(e)}catch(i){if(i.name!=="SyntaxError")throw i}return(n||JSON.stringify)(e)}var Hn={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:fl(),transformRequest:[function(t,n){return ns(n,"Accept"),ns(n,"Content-Type"),ee.isFormData(t)||ee.isArrayBuffer(t)||ee.isBuffer(t)||ee.isStream(t)||ee.isFile(t)||ee.isBlob(t)?t:ee.isArrayBufferView(t)?t.buffer:ee.isURLSearchParams(t)?(is(n,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):ee.isObject(t)||n&&n["Content-Type"]==="application/json"?(is(n,"application/json"),pl(t)):t}],transformResponse:[function(t){var n=this.transitional,i=n&&n.silentJSONParsing,r=n&&n.forcedJSONParsing,s=!i&&this.responseType==="json";if(s||r&&ee.isString(t)&&t.length)try{return JSON.parse(t)}catch(a){if(s)throw a.name==="SyntaxError"?dl(a,this,"E_JSON_PARSE"):a}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300}};Hn.headers={common:{Accept:"application/json, text/plain, */*"}};ee.forEach(["delete","get","head"],function(t){Hn.headers[t]={}});ee.forEach(["post","put","patch"],function(t){Hn.headers[t]=ee.merge(hl)});var or=Hn,ml=fe,gl=or,vl=function(t,n,i){var r=this||gl;return ml.forEach(i,function(a){t=a.call(r,t,n)}),t},_i,rs;function Ds(){return rs||(rs=1,_i=function(t){return!!(t&&t.__CANCEL__)}),_i}var ss=fe,xi=vl,wl=Ds(),bl=or;function Ei(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var yl=function(t){Ei(t),t.headers=t.headers||{},t.data=xi.call(t,t.data,t.headers,t.transformRequest),t.headers=ss.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),ss.forEach(["delete","get","head","post","put","patch","common"],function(r){delete t.headers[r]});var n=t.adapter||bl.adapter;return n(t).then(function(r){return Ei(t),r.data=xi.call(t,r.data,r.headers,t.transformResponse),r},function(r){return wl(r)||(Ei(t),r&&r.response&&(r.response.data=xi.call(t,r.response.data,r.response.headers,t.transformResponse))),Promise.reject(r)})},ie=fe,ks=function(t,n){n=n||{};var i={},r=["url","method","data"],s=["headers","auth","proxy","params"],a=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],l=["validateStatus"];function d(v,y){return ie.isPlainObject(v)&&ie.isPlainObject(y)?ie.merge(v,y):ie.isPlainObject(y)?ie.merge({},y):ie.isArray(y)?y.slice():y}function f(v){ie.isUndefined(n[v])?ie.isUndefined(t[v])||(i[v]=d(void 0,t[v])):i[v]=d(t[v],n[v])}ie.forEach(r,function(y){ie.isUndefined(n[y])||(i[y]=d(void 0,n[y]))}),ie.forEach(s,f),ie.forEach(a,function(y){ie.isUndefined(n[y])?ie.isUndefined(t[y])||(i[y]=d(void 0,t[y])):i[y]=d(void 0,n[y])}),ie.forEach(l,function(y){y in n?i[y]=d(t[y],n[y]):y in t&&(i[y]=d(void 0,t[y]))});var _=r.concat(s).concat(a).concat(l),g=Object.keys(t).concat(Object.keys(n)).filter(function(y){return _.indexOf(y)===-1});return ie.forEach(g,f),i};const _l="axios",xl="0.21.4",El="Promise based HTTP client for the browser and node.js",Cl="index.js",Sl={test:"grunt test",start:"node ./sandbox/server.js",build:"NODE_ENV=production grunt build",preversion:"npm test",version:"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",postversion:"git push && git push --tags",examples:"node ./examples/server.js",coveralls:"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",fix:"eslint --fix lib/**/*.js"},Ll={type:"git",url:"https://github.com/axios/axios.git"},Al=["xhr","http","ajax","promise","node"],Tl="Matt Zabriskie",Ol="MIT",Nl={url:"https://github.com/axios/axios/issues"},Ml="https://axios-http.com",Dl={coveralls:"^3.0.0","es6-promise":"^4.2.4",grunt:"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1",karma:"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2",minimist:"^1.2.0",mocha:"^8.2.1",sinon:"^4.5.0","terser-webpack-plugin":"^4.2.3",typescript:"^4.0.5","url-search-params":"^0.10.0",webpack:"^4.44.2","webpack-dev-server":"^3.11.0"},kl={"./lib/adapters/http.js":"./lib/adapters/xhr.js"},Il="dist/axios.min.js",Hl="dist/axios.min.js",Pl="./index.d.ts",Rl={"follow-redirects":"^1.14.0"},Bl=[{path:"./dist/axios.min.js",threshold:"5kB"}],zl={name:_l,version:xl,description:El,main:Cl,scripts:Sl,repository:Ll,keywords:Al,author:Tl,license:Ol,bugs:Nl,homepage:Ml,devDependencies:Dl,browser:kl,jsdelivr:Il,unpkg:Hl,typings:Pl,dependencies:Rl,bundlesize:Bl};var Is=zl,ar={};["object","boolean","number","function","string","symbol"].forEach(function(e,t){ar[e]=function(i){return typeof i===e||"a"+(t<1?"n ":" ")+e}});var os={},jl=Is.version.split(".");function Hs(e,t){for(var n=t?t.split("."):jl,i=e.split("."),r=0;r<3;r++){if(n[r]>i[r])return!0;if(n[r]<i[r])return!1}return!1}ar.transitional=function(t,n,i){var r=n&&Hs(n);function s(a,l){return"[Axios v"+Is.version+"] Transitional option '"+a+"'"+l+(i?". "+i:"")}return function(a,l,d){if(t===!1)throw new Error(s(l," has been removed in "+n));return r&&!os[l]&&(os[l]=!0,console.warn(s(l," has been deprecated since v"+n+" and will be removed in the near future"))),t?t(a,l,d):!0}};function $l(e,t,n){if(typeof e!="object")throw new TypeError("options must be an object");for(var i=Object.keys(e),r=i.length;r-- >0;){var s=i[r],a=t[s];if(a){var l=e[s],d=l===void 0||a(l,s,e);if(d!==!0)throw new TypeError("option "+s+" must be "+d);continue}if(n!==!0)throw Error("Unknown option "+s)}}var Fl={isOlderVersion:Hs,assertOptions:$l,validators:ar},Ps=fe,ql=Os,as=tl,ls=yl,Pn=ks,Rs=Fl,gt=Rs.validators;function Jt(e){this.defaults=e,this.interceptors={request:new as,response:new as}}Jt.prototype.request=function(t){typeof t=="string"?(t=arguments[1]||{},t.url=arguments[0]):t=t||{},t=Pn(this.defaults,t),t.method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;n!==void 0&&Rs.assertOptions(n,{silentJSONParsing:gt.transitional(gt.boolean,"1.0.0"),forcedJSONParsing:gt.transitional(gt.boolean,"1.0.0"),clarifyTimeoutError:gt.transitional(gt.boolean,"1.0.0")},!1);var i=[],r=!0;this.interceptors.request.forEach(function(v){typeof v.runWhen=="function"&&v.runWhen(t)===!1||(r=r&&v.synchronous,i.unshift(v.fulfilled,v.rejected))});var s=[];this.interceptors.response.forEach(function(v){s.push(v.fulfilled,v.rejected)});var a;if(!r){var l=[ls,void 0];for(Array.prototype.unshift.apply(l,i),l=l.concat(s),a=Promise.resolve(t);l.length;)a=a.then(l.shift(),l.shift());return a}for(var d=t;i.length;){var f=i.shift(),_=i.shift();try{d=f(d)}catch(g){_(g);break}}try{a=ls(d)}catch(g){return Promise.reject(g)}for(;s.length;)a=a.then(s.shift(),s.shift());return a};Jt.prototype.getUri=function(t){return t=Pn(this.defaults,t),ql(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")};Ps.forEach(["delete","get","head","options"],function(t){Jt.prototype[t]=function(n,i){return this.request(Pn(i||{},{method:t,url:n,data:(i||{}).data}))}});Ps.forEach(["post","put","patch"],function(t){Jt.prototype[t]=function(n,i,r){return this.request(Pn(r||{},{method:t,url:n,data:i}))}});var Vl=Jt,Ci,us;function Bs(){if(us)return Ci;us=1;function e(t){this.message=t}return e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,Ci=e,Ci}var Si,cs;function Yl(){if(cs)return Si;cs=1;var e=Bs();function t(n){if(typeof n!="function")throw new TypeError("executor must be a function.");var i;this.promise=new Promise(function(a){i=a});var r=this;n(function(a){r.reason||(r.reason=new e(a),i(r.reason))})}return t.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},t.source=function(){var i,r=new t(function(a){i=a});return{token:r,cancel:i}},Si=t,Si}var Li,ds;function Wl(){return ds||(ds=1,Li=function(t){return function(i){return t.apply(null,i)}}),Li}var Ai,hs;function Ul(){return hs||(hs=1,Ai=function(t){return typeof t=="object"&&t.isAxiosError===!0}),Ai}var fs=fe,Xl=Ls,En=Vl,Kl=ks,Jl=or;function zs(e){var t=new En(e),n=Xl(En.prototype.request,t);return fs.extend(n,En.prototype,t),fs.extend(n,t),n}var xe=zs(Jl);xe.Axios=En;xe.create=function(t){return zs(Kl(xe.defaults,t))};xe.Cancel=Bs();xe.CancelToken=Yl();xe.isCancel=Ds();xe.all=function(t){return Promise.all(t)};xe.spread=Wl();xe.isAxiosError=Ul();Ra.exports=xe;Ln.default=xe;(function(e){e.exports=Ln})(Pa);const An=Ha(Di);class Oe{static extend(){const t={};let n=!1,i=0;const r=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(n=arguments[0],i++);const s=function(a){for(const l in a)Object.prototype.hasOwnProperty.call(a,l)&&(n&&Object.prototype.toString.call(a[l])==="[object Object]"?t[l]=Oe.extend(!0,t[l],a[l]):t[l]=a[l])};for(;i<r;i++){const a=arguments[i];s(a)}return t}}var et=function(e,t){var n=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(r,s){this.nodes=(s||document).querySelectorAll(r)},this.each=function(r){if(this.nodes)for(var s=0;s<this.nodes.length;s++)r.call(this.nodes[s],s);else this.node&&r.call(this.node,0);return this},this.encapsulate=function(){};var i=function(r,s){r&&(Array.isArray(r)?r.forEach(function(a){i(a,s)}):r instanceof et?s.append(r):typeof r=="object"&&s.append(new et(r)))};this.create=function(){var r=this.document.createElement(this.settings.tag);if(this.node=r,this.settings.encapsulate===!0){var s=this.settings.encapsulate===!0?"open":this.settings.encapsulate;r.attachShadow({mode:s})}this.nodes=[r],this.settings.content&&i(this.settings.content,this)},this._specialProps=function(r,s){if(r==="tooltip")return this.node.dataset[r]=s,!0},this.setProps=function(){for(var r in this.settings.props)if(r==="dataset")for(var s in this.settings.props[r])this.node.dataset[s]=this.settings.props[r][s];else if(r==="style")for(var a in this.settings.props[r])this.node.style[a]=this.settings.props[r][a];else{var l=this.settings.props[r];this._specialProps(r,l)||(this.node[r]=l)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(r,s){return typeof s=="number"&&this.__.cssNumber.indexOf(r)===-1&&(s=s+"px"),s},this.css=function(r,s){if(typeof r=="string")if(typeof s<"u"){var a=this._normalizeCSSValue(r,s);this.each(function(){this.style[r]=a})}else return this.document.defaultView.getComputedStyle(this.node)[r];if(typeof r=="object")for(var l in r)this.each(function(){this.style[l]=n._normalizeCSSValue(l,r[l])});return this},this.dataset=function(r,s){return typeof s>"u"?this._active()[r]:(this.each(function(){this.dataset[r]=s}),this)},this.attr=function(r,s){return typeof s>"u"?this._active()[r]:(this.each(function(){this.setAttribute(r,s)}),this)},this.val=function(r){return typeof r>"u"?this._active().value:(this.each(function(){this.value=r}),this)},this.prop=function(r,s){var a=this._active();return typeof s>"u"?a[r]:(a[r]!==s&&(a[r]=s,this.trigger("propChange",[r,s])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(r){var s=mw.element("#r"+new Date().getTime());return this.each(function(){for(var a=this.querySelectorAll(r),l=0;l<a.length;l++)s.nodes.indexOf(a[l])===-1&&s.nodes.push(a[l])}),s},this.addClass=function(r){return r=r.trim().split(" "),this.each(function(){var s=this;r.forEach(function(a){s.classList.add(a)})})},this.toggleClass=function(r){return this.each(function(){this.classList.toggle(r.trim())})},this.removeClass=function(r){var s=Array.isArray(r);if(s)return this.each(function(){for(var l=0,d=r.length;l<d;l++)this.classList.remove(r[l])});r=r.trim();var a=r.split(" ");return a.length>1?this.removeClass(a):this.each(function(){this.classList.remove(r)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(r){return typeof r>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=r})},this.text=function(r,s){if(typeof r>"u")return this.node.textContent;typeof s>"u"&&(s=!0),s&&(r=this.document.createRange().createContextualFragment(r).textContent),this.node.innerHTML=r},this._asdom=function(r){return typeof r=="string"?this.document.createRange().createContextualFragment(r):r.node?r.node:r.nodes?r.nodes[r.nodes.length-1]:r},this.offset=function(){var r=this._active(),s=this.getWindow(),a=r.getBoundingClientRect();return a.offsetTop=a.top+s.pageYOffset,a.offsetBottom=a.bottom+s.pageYOffset,a.offsetLeft=a.left+s.pageXOffset,a},this.width=function(r){return r?this.css("width",r):this._active().offsetWidth},this.height=function(r){return r?this.css("height",r):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(r){r=r||"*";var s=this._active(),a=s.parentElement,l=mw.element();for(l.nodes=[];a;)a.matches(r)&&l.nodes.push(a),a=a.parentElement;return l},this.append=function(r){return r&&this.each(function(){this.append(n._asdom(r))}),this},this.before=function(r){return r&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(n._asdom(r),this)}),this},this.after=function(r){r&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(n._asdom(r),this.nextSibling)})},this.prepend=function(r){return r&&this.each(function(){this.prepend(n._asdom(r))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(r){this._disabled=r,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(r,s){return s=s||{},this.each(function(){this.dispatchEvent(new CustomEvent(r,{detail:s,cancelable:!0,bubbles:!0})),n._on[r]&&n._on[r].forEach(function(a){a.call(this,r,s)})}),this},this.get=function(r){return this.nodes[r]},this.wrap=function(r){var s=lr(r);this.before(s),s.append(this)},this._on={},this.on=function(r,s){return r=r.trim().split(" "),r.forEach(function(a){n._on[a]||(n._on[a]=[]),n._on[a].push(s),n.each(function(){this.addEventListener(a,s,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=t||document,this.root instanceof et&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,e=e||{},e.nodeName&&e.nodeType)this.nodes.push(e),this.node=e,e={},this._asElement=!0;else if(typeof e=="string")if(e.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(e)),e={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof et)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new et(this.settings.content));else{var r=this._asdom(e);this.nodes=[].slice.call(r.children),this._asElement=!0}e=e||{};var s={tag:"div",props:{}};this.settings=Oe.extend({},s,e),!this._asElement&&(this.create(),this.setProps())},this.init()};const lr=function(e,t){return new et(e,t)};lr.module=function(e,t){et.prototype[e]=t};const Hi="mw-le-element";window.customElements&&!customElements.get(Hi)&&customElements.define(Hi,class extends HTMLElement{constructor(){super()}});const k=(e,t)=>(e instanceof Object&&!e.nodeType&&(e=Oe.extend({},e||{},{tag:e.tag||Hi})),lr(e,t));let jt;const vn=document.documentElement;vn.matches?jt="matches":vn.matchesSelector?jt="matchesSelector":vn.mozMatchesSelector?jt="mozMatchesSelector":vn.webkitMatchesSelector&&(jt="webkitMatchesSelector");class he{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(t,n){return t[jt](n)}static isBlockLevel(t){if(!t||t.nodeType===3)return!1;var n=t.nodeName;if(typeof this._isBlockCache[n]<"u")return this._isBlockCache[n];var i=document.createElement(n);return this.fragment().appendChild(i),this._isBlockCache[n]=getComputedStyle(i).display==="block",this.fragment().removeChild(i),this._isBlockCache[n]}static firstBlockLevel(t){for(;t&&t.classList;){if(this.isBlockLevel(t))return t;t=t.parentNode}}static firstWithBackgroundImage(t){if(!t)return null;for(;t&&t.nodeName!=="BODY";){if(t.style.backgroundImage)return t;t=t.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(t,n){for(;t&&t.nodeName!=="BODY";){let i=0,r=n.length;for(;i<r;i++)if(t.classList.contains(n[i]))return!0;t=t.parentElement}return!1}static hasParentsWithClass(t,n){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.classList.contains(n))return!0;i=i.parentNode}return!1}}static hasParentWithId(t,n){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.id===n)return!0;i=i.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(t,n){for(;t&&t.nodeName!=="BODY";){let i=0,r=n.length;for(;i<r;i++)if(t.classList.contains(n[i]))return t;t=t.parentElement}return null}static firstParentOrCurrentWithTag(t,n){if(!(!t||!n)){n=typeof n!="string"?n:[n];for(var i=t;i&&i.nodeName!=="BODY";){if(n.indexOf(i.nodeName.toLowerCase())!==-1)return i;i=i.parentNode}return!1}}static index(t,n,i){i=i||t.tagName.toLowerCase(),n=n||t.parentNode;var r;n.constructor===[].constructor?r=n:r=n.querySelectorAll(i);for(var s=0,a=r.length;s<a;s++)if(t===r[s])return s}static firstParentOrCurrentWithClass(t,n){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.classList.contains(n))return i;i=i.parentNode}return!1}static firstParentOrCurrent(t,n){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.matches(n))return i;i=i.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(t,n){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(!i)return!1;if(this.hasAnyOfClasses(i,n))return i;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(t,n){let i=t;for(;i&&i.nodeName!=="BODY";){const r=i.classList.contains(n[0]),s=i.classList.contains(n[1]);if(r&&s)return!1;if(r)return!0;if(s)return!1;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,n){let i=t;for(;i&&i.nodeName!=="BODY";){const r=i.classList.contains(n[0]),s=i.classList.contains(n[1]);if(r&&s)return!1;if(r)return!0;if(s)return!1;i=i.parentNode}return!0}static hasAnyOfClasses(t,n){if(!t)return;let i=0,r=n.length;for(;i<r;i++)if(t.classList.contains(n[i]))return!0;return!1}static offset(t){if(t){var n=t.getBoundingClientRect(),i={top:n.top,left:n.left,width:n.width,height:n.height,bottom:n.bottom,right:n.right};return i.top+=t.ownerDocument.defaultView.scrollY,i.bottom+=t.ownerDocument.defaultView.scrollY,i.left+=t.ownerDocument.defaultView.scrollX,i.right+=t.ownerDocument.defaultView.scrollX,i}}static parentsOrder(t,n){for(var i=[],r={},s=n.length,a=0,l=-1;a<s;a++)r[n[a]]=-1;if(!t)return r;for(var d=t.parentNode;d&&d.nodeName!=="BODY";){for(l++,a=0;a<s;a++)d.classList.contains(n[a])&&i.indexOf(n[a])===-1&&(r[n[a]]=l,i.push(n[a]));d=d.parentNode}return r}}ve(he,"_isBlockCache",{}),ve(he,"_fragment");class Zl{constructor(t){this.settings=t,this.tools=he}isRow(t){return t.classList.contains(this.settings.rowClass)}isModule(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type!=="layouts"}isLayout(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts"}isInLayout(t){if(!t)return!1;for(t=t.parentNode;t&&t!==this.settings.document.body;){if(t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts")return!0;t=t.parentNode}}isElement(t){return t.classList.contains(this.settings.elementClass)}isEmptyElement(t){return t.classList.contains(this.settings.emptyElementClass)}isEdit(t){return t.classList.contains(this.settings.editClass)}isInEdit(t){var n=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t.parentNode,n)}isEditOrInEdit(t){return this.isEdit(t)||this.isInEdit(t)}isPlainText(t){return t.classList.contains(this.settings.plainElementClass)}getType(t){if(this.isEdit(t))return"edit";if(this.isElement(t))return"element";if(this.isModule(t))return"module";if(this.isLayout(t))return"layout"}}class js extends Zl{constructor(t){super(t),this.settings=t,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM","DD"],this.init()}isConfigurable(t){return this.isElement(t)||this.isModule(t)||this.isRow(t)}isEditableLayout(t){return this.this.isLayout(t)&&this.isInEdit(t)}canMoveModule(t){return this.isModule(t)&&this.isInEdit(t)}canAcceptByClass(t){return this.tools.hasAnyOfClasses(t,this.dropableElements())}canAcceptByTag(t){return!t||t.nodeType!==1?!1:this._tagsCanAccept.indexOf(t.nodeName)!==-1}allowDrop(t){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(t){return this.canAccept(t.parentNode)}canAccept(t){return!!(this.canAcceptByClass(t)&&this.isEditOrInEdit(t)&&this.allowDrop(t))}canReceiveElements(t){return this.isEdit(t)&&this.canAcceptByTag(t)}dropableElements(){return this._dropableElements}getIteractionTarget(t){return this.tools.firstWithAyOfClassesOnNodeOrParent(t,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(t,n){const i=this.getIteractionTarget(t);if(!i||!this.isEditOrInEdit(t)||!this.allowDrop(t))return null;const r={target:i,canInsert:!1,beforeAfter:!1};var s=this.settings.strictLayouts&&this.isLayout(n),a=this.settings.strict&&!this.isLayout(n)&&!this.isInLayout(i);if(a)return null;if(this.isEdit(i))r.canInsert=!s;else if(this.isElement(i)&&!s)this.canAcceptByTag(i)&&(r.canInsert=!s),r.beforeAfter=!0;else if(this.isModule(i)&&!s)if(this.canInsertBeforeOrAfter(i))r.beforeAfter=!0;else return null;else if(this.isLayout(i))if(this.canInsertBeforeOrAfter(i))r.beforeAfter=!0;else return null;return r}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let Gl=-1;const Ql=(e,t)=>{if(!e||!t)return!1;const n=t.target;if(!n||n.nodeType!==1)return!1;e.pageX;const i=e.pageY,r=he.offset(n),s={},a=15;if(Gl===i||!t||!t.canInsert&&!t.beforeAfter)return!1;if(t.canInsert&&t.beforeAfter)if(i>=r.top-a&&i<=r.top+a)s.position="top",s.action="before";else if(i>=r.top+a&&i<=r.top+r.height/2)s.position="top",s.action="prepend";else if(i>=r.top+r.height/2&&i<=r.bottom-a)s.position="bottom",s.action="append";else if(i>=r.top+r.height/2&&i>=r.bottom-a)s.position="bottom",s.action="after";else return!1;else if(t.beforeAfter)if(i>=r.top-a&&i<=r.top+r.height/2)s.position="top",s.action="before";else if(i>=r.top+r.height/2&&i<=r.bottom+a)s.position="bottom",s.action="after";else return!1;else if(t.canInsert)if(i>=r.top-a&&i<=r.top+r.height/2)s.position="top",s.action="prepend";else if(i>=r.top+r.height/2&&i<=r.bottom+a)s.position="bottom",s.action="append";else return!1;return s},eu=function(e,t){var n={handle:null,element:null,document,helper:!0},i=this,r={};this.on=function(a,l){r[a]?r[a].push(l):r[a]=[l]},this.dispatch=function(a,l){r[a]&&r[a].forEach(function(d){d.call(this,l)})};var s=function(a){i.settings.document.body.style.scrollBehavior="smooth",i.settings.document.defaultView.scrollTo(0,i.settings.document.defaultView.scrollY+a),i.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=Oe.extend({},n,e),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(a){this.element=k(a).get(0),this.settings.handle||(this.settings.handle=this.settings.element),this.handle=this.settings.handle,this.handle.attr("draggable","true")},this.setTargets=function(a){this.targets=k(a)},this.addTarget=function(a){this.targets.push(a)},this.init=function(){this.config(),this.draggable()},this.$data={},this.helper=function(a,l){if(this._helper||(this._helper=k().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),a==="create"){var d=k(i.element).offset();this.$data._calcMinus={y:l.pageY-d.offsetTop,x:l.pageX-d.offsetLeft},this._helper.style.top=a.pageY+"px",this._helper.style.left=a.pageX+"px",this._helper.style.width=i.element.offsetWidth+"px",this._helper.style.height=i.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"}else a==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&a&&(this._helper.style.top=a.pageY-this.$data._calcMinus.y+"px",this._helper.style.left=a.pageX-this.$data._calcMinus.x+"px",this.settings.document.documentElement.classList.add("le-dragging"));return this._helper.innerHTML=i.element.outerHTML,this._helper},this.isDragging=!1,this.dropableService=new js(t),this.dropPosition=Ql,this.draggable=function(){k(this.settings.target).on("dragleave",function(a){i.dropIndicator&&i.dropIndicator.hide()}),k(this.settings.target).on("dragover",function(a){if(i.target=null,i.action=null,a.target!==i.element||!i.element.contains(a.target)){var l=i.dropableService.getTarget(a.target,i.element);if(l&&l!==i.element){const d=i.dropPosition(a,l);d?(i.target=l.target,i.action=d.action,i.dropIndicator&&i.dropIndicator.position(i.target,d.action+"-"+d.position)):i.dropIndicator&&i.dropIndicator.hide()}else i.dropIndicator&&i.dropIndicator.hide();i.isDragging&&(i.dispatch("dragOver",{element:i.element,event:a}),a.preventDefault())}}).on("drop",function(a){i.isDragging&&(a.preventDefault(),i.target&&i.action&&k(i.target)[i.action](i.element),i.dropIndicator&&i.dropIndicator.hide(),i.dispatch("drop",{element:i.element,event:a})),i.dropIndicator&&i.dropIndicator.hide()}),this.handle.on("dragstart",function(a){i.isDragging=!0,i.element.id||(i.element.id="mw-element-"+new Date().getTime()),i.element.classList.add("mw-element-is-dragged"),a.dataTransfer.setData("text",i.element.id),a.dataTransfer.effectAllowed="move",i.helper("create",a),i.dispatch("dragStart",{element:i.element,event:a})}).on("drag",function(a){var l=90,d=5;a.clientY<l&&s(-d),a.clientY>innerHeight-(l+(this._helper?this._helper.offsetHeight+10:0))&&s(d),a.dataTransfer.dropEffect="copy",i.dispatch("drag",{element:i.element,event:a}),i.helper(a)}).on("dragend",function(a){i.isDragging=!1,i.element.classList.remove("mw-element-is-dragged"),i.helper("remove"),i.dispatch("dragEnd",{element:i.element,event:a})})},this.init()};var ze,bt,yt;class $s{constructor(t={}){ve(this,"x",0);ve(this,"y",0);ve(this,"w",0);ve(this,"h",0);ve(this,"listeners",{});oe(this,ze,{});ve(this,"activeHandle",null);ve(this,"handles",{});oe(this,bt,!1);oe(this,yt,!0);const n={element:null,document,maxHeight:null,maxWidth:null};this.settings=Object.assign({},n,t),this.element=this.settings.element,this.document=this.settings.document,this.element.classList.add("mw-le-resizable")}on(t,n){D(this,ze)[t]?D(this,ze)[t].push(n):D(this,ze)[t]=[n]}dispatch(t,n){D(this,ze)[t]&&D(this,ze)[t].forEach(i=>{i.call(this,n)})}mouseMoveHandler(t){const n=t.clientX-this.x,i=t.clientY-this.y;let r=this.h+i,s;this.activeHandle===this.handles.left?s=this.w-n:s=this.w+n,this.settings.maxWidth&&(s=Math.min(s,this.settings.maxWidth)),this.settings.maxHeight&&(r=Math.min(r,this.settings.maxHeight)),this.element.style.width=`${s}px`,this.element.style.height=`${r}px`,t.preventDefault(),this.dispatch("resize",{height:this.element.offsetHeight,width:this.element.offsetWidth})}mouseUpHandler(){for(const t in this.listeners)this.document.removeEventListener(t,this.listeners[t]);this.listeners={},this.activeHandle=null,this.dispatch("resizeStop")}mouseDownHandler(t){this.x=t.clientX,this.y=t.clientY;const n=this.document.defaultView.getComputedStyle(this.element);this.w=parseInt(n.width,10),this.h=parseInt(n.height,10),this.listeners.mousemove=i=>this.mouseMoveHandler(i),this.listeners.mouseup=i=>this.mouseUpHandler(i);for(const i in this.listeners)this.document.addEventListener(i,this.listeners[i]);this.dispatch("resizeStart")}disable(){pt(this,bt,!0),pt(this,yt,!1),this.element.classList.add("mw-le-resizable-disabled")}enable(){pt(this,bt,!1),pt(this,yt,!0),this.element.classList.remove("mw-le-resizable-disabled")}disabled(){return D(this,bt)}enabled(){return D(this,yt)}build(){const t=this.document.createElement("span"),n=this.document.createElement("span"),i=this.document.createElement("span"),r=this.document.createElement("span");this.handles.top=t,this.handles.right=n,this.handles.bottom=i,this.handles.left=r,t.className="mw-le-resizer mw-le-resizer-t",n.className="mw-le-resizer mw-le-resizer-r",r.className="mw-le-resizer mw-le-resizer-l",i.className="mw-le-resizer mw-le-resizer-b",this.element.appendChild(t),this.element.appendChild(n),this.element.appendChild(i),this.element.appendChild(r)}mount(){if(!this.element)return this;if(this.element.dataset.resizable)return this;this.element.dataset.resizable=!0,this.build();const t=this.element.querySelectorAll(".mw-le-resizer");return Array.from(t).forEach(n=>{n.addEventListener("mousedown",i=>{this.mouseDownHandler(i),this.activeHandle=n})}),this.dispatch("ready",{height:this.element.offsetHeight,width:this.element.offsetWidth}),this}}ze=new WeakMap,bt=new WeakMap,yt=new WeakMap;globalThis.Resizable=$s;const wn=function(e){var t={},n=this;this.settings=Oe.extend({},t,e);const i={};this.on=(g,v)=>{i[g]?i[g].push(v):i[g]=[v]},this.dispatch=(g,v)=>{i[g]&&i[g].forEach(y=>{y.call(this,v)})};var r=!0,s=null;this.getTarget=function(){return s},this.isVisible=function(){return r},this.show=function(){r=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){r=!1,this.wrapper.addClass("mw-handle-item-hidden"),this.wrapper.removeClass("mw-handle-active")};let a=null;this.setContent=function(g){a&&a.remove(),a=g,this.wrapper.append(a)},this.initDraggable=function(){this.draggable=new eu({handle:this.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},e),this.draggable.on("dragStart",function(){n.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){n.wrapper.removeClass("mw-handle-item-dragging")})};const l=()=>{if(this.settings.document.defaultView.pageYOffset!==void 0)return{x:this.settings.document.defaultView.pageXOffset,y:this.settings.document.defaultView.pageYOffset};{let g,v,y=this.settings.document,O=y.documentElement,P=y.body;return g=O.scrollLeft||P.scrollLeft||0,v=O.scrollTop||P.scrollTop||0,{x:g,y:v}}};this.position=function(g){if(!g)return;const v=he.offset(g),y=l(),O=this.wrapper.get(0).querySelector(".mw-le-handle-menu-buttons");let P;y.y>v.top-70&&(P=y.y-(v.top-70),P>v.height&&(P=v.height+10)),O.style.transition="none",O.style.transform=P?`translateY(${P}px)`:"",setTimeout(()=>O.style.transition="",10),this.wrapper.css({top:v.top,left:v.left,width:v.width,height:v.height})},this.set=function(g,v){if(!g){s=null;return}this.position(g),this.show(),this.draggable.setElement(g),(s!==g||v)&&(s=g,this.dispatch("targetChange",g)),setTimeout(()=>this.wrapper.addClass("mw-handle-active"),1)},this.createHandle=function(){if(this.settings.handle==="self"){var g=k({tag:"div",props:{className:"mw-handle-item-draggable-self"}});this.wrapper.append(g),this.settings.document.addEventListener("mousedown",function(){g.addClass("active")}),this.settings.document.addEventListener("mouseup",function(){g.removeClass("active")}),this.settings.handle=g,this.handle=g,this.wrapper.append(g);return}this.settings.handle?(typeof this.settings.handle=="string"&&(this.settings.handle=k(this.handle)),this.handle=this.settings.handle):(this.handle=k({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))};var d=this.settings.document.defaultView.innerWidth,f=this.settings.document.defaultView.innerHeight;this.resizableMaxWidth=function(g){if(typeof g>"u")return d;d=g},this.resizableMaxHeight=function(g){if(typeof g>"u")return f;f=g},this.findClosestElementByClass=function(g,v=200){let y=[],O=g,P=0;for(;O!==document;){const w=O.parentNode.querySelectorAll(".element,.module");if(w.length>0&&(y=[...w].filter(S=>Math.abs(g.getBoundingClientRect().top-S.getBoundingClientRect().top)<=v),y.length>0)||(O=O.parentNode,P++,P>v/10))break}return y};function _(g,v,y,O){var P=Math.min(y/g,O/v);return{width:g*P,height:v*P}}this.resizable=function(){this.settings.resizable&&(this.resizer=new $s({element:this.wrapper.get(0),document:this.settings.document}),this.resizer.mount(),this.resizer.on("resize",g=>{const v=this.getTarget();v.nodeName==="IMG"?(g=_(v.offsetWidth,v.offsetHeight,g.width,g.height),v.style.height=g.height+"px",v.style.width=g.width+"px"):(v.style.minHeight=g.height+"px",v.style.width=g.width+"px"),this.set(v)}))},this.createWrapper=function(){this.wrapper=k({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),k(document.body).on("mouseup touchend",function(){n.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide(),this.resizable(),this.settings.document.addEventListener("orientationChange",g=>this.position(this.getTarget())),this.settings.document.addEventListener("resize",g=>this.position(this.getTarget())),this.settings.document.addEventListener("scroll",g=>this.position(this.getTarget()))},tu=function(e){e=e||{},this.tools=he;var t=this,n={exceptions:["mw-handle-item"]};this.settings=Oe.extend({},n,e),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var i=20,r=function(l){return l%5>=2.5?l/5*5+5:l/5*5},s=function(l,d){l=r(l),d=r(d);for(var f=[],_=l-i,g=l+i,v=d-i,y=d+i;_<g;_+=5)for(;v<=y;v+=5)f.push([_,v]);return f},a=function(l,d){l&&l.parentElement&&d.indexOf(l)===-1&&t.body!==l&&d.push(l)};this.fromEvent=function(l){let d,f;return l.pageX?(d=l.pageX,f=l.pageY):l.targetTouches&&l.targetTouches[0]?(d=l.targetTouches[0].pageX,f=l.targetTouches[0].pageY):l.touches&&l.touches[0]&&(d=l.touches[0].pageX,f=l.touches[0].pageY),t.tools.hasAnyOfClassesOnNodeOrParent(l.target,this.settings.exceptions)?[]:(t.document._test||(t.document._test=document.createElement("div"),t.document._test.style.position="absolute",t.document._test.style.left="10px",t.document._test.style.background="red",t.document._test.style.width="10px",t.document._test.style.height="10px",t.document.body.appendChild(t.document._test)),t.document._test.style.top=l.pageY+"px",this.fromPoint(d,f))},this.fromPoint=function(l,d){var f=[];t.document.defaultView.frameElement&&(d-=t.document.defaultView.scrollY);var _=t.document.elementFromPoint(l,d);if(!_)return[];a(_,f);var g=s(l,d);return g.forEach(function(v){a(t.document.elementFromPoint(v[0],v[1]),f)}),f}},nu=function(e){return he.matches(e,'.row,[class*="row-"]')},iu=function(e){return he.matches(e,'.col,[class*="col-"]')};let Be;const ps=function(){return Be||(Be=document.createElement("div"),Be.style.visibility="hidden",Be.style.position="absolute",Be.style.width="1px",Be.style.height="1px",document.body.appendChild(Be)),Be},bn={},ru=function(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof bn[t]<"u")return bn[t];var n=document.createElement(t);return ps().appendChild(n),bn[t]=getComputedStyle(n).display==="block",ps().removeChild(n),bn[t]},su=(e,t,n)=>{e=e||"*";for(var i=t.querySelectorAll(e),r=0,s=[];r<i.length;r++)!iu(i[r])&&!nu(i[r])&&!n.elementAnalyzer.isEdit(i[r])&&ru(i[r])&&s.push(i[r]);return s},ou=e=>{const{backgroundImageHolder:t,editClass:n,moduleClass:i,elementClass:r,allowDrop:s}=e.settings,a=e.root;for(var l=a.querySelectorAll("."+n+"."+t+", ."+n+" ."+t+", ."+n+'[style*="background-image"], .'+n+' [style*="background-image"]'),d=a.querySelectorAll("."+i+e.settings.unEditableModules.join(",."+i)),f=a.querySelectorAll("."+n),_=0,g=0,v=0;_<l.length;_++){var y=l[_];e.elementAnalyzer.isInEdit(y)&&(mw.tools.hasClass(y,i)||mw.tools.addClass(y,n),y.style.backgroundImage||(y.style.backgroundImage="none"))}for(;g<d.length;g++)d[_].classList.remove(i);for(;v<f.length;v++){for(var O=su(":not(."+r+")",f[v],e),P=0,w=f[v].querySelectorAll("img,."+s),S=0;S<w.length;S++)w[S].classList.add(r);for(;P<O.length;P++)O[P].classList.contains(i)||e.elementAnalyzer.isInEdit(O[P])&&O[P].classList.add(r)}},au=function(e){this.handles=e,this.dragging=!1;var t=this;this.get=function(n){return this.handles[n]},this.set=function(n,i){this.get(n).set(i)},this.hide=function(n){n&&this.handles[n]?this.handles[n].hide():this.each(function(i,r){r.hide()})},this.hideAllBut=function(n){this.each(function(i,r){i!==n&&r.hide()})},this.show=function(n){n&&this.handles[n]?this.handles[n].show():this.each(function(i,r){r.show()})},this.each=function(n){if(n){var i;for(i in this.handles)n.call(t,i,this.handles[i])}},this.targetIsSelected=function(n,i){if(n){n=n.target||n;var r;for(r in this.handles){if(i&&i===this.handles[r])continue;const s=this.handles[r].getTarget();if(s&&s===n)return!0}return!1}},this.targetIsOrInsideHandle=function(n){if(n){n=n.target||n;var i;for(i in this.handles)if(this.handles[i].wrapper.get(0)===n||this.handles[i].wrapper.get(0).contains(n))return!0;return!1}},this.init=function(){this.each(function(n,i){i.draggable.on("dragStart",function(){t.dragging=!0,t.hideAllBut(n)}),i.draggable.on("dragEnd",function(){t.dragging=!1,i.show()})})},this.init()},lu=function(e){e=e||{};const t={template:"default"};let n={};this.settings=Oe.extend({},t,e),this._indicator=null;const i={};this.on=function(d,f){i[d]?i[d].push(f):i[d]=[f]},this.dispatch=function(d,f){i[d]&&i[d].forEach(function(_){_.call(this,f)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,n={})},this.show=function(){console.log(this.visible),this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const r=["before-top","prepend-top","after-bottom","append-bottom"],s="mw-drop-indicator-position-",a=r.map(function(d){return s+d});let l=null;this.position=function(d,f){if(!(!d||!f)&&!(n.target===d&&n.position===f)){n.target=d,n.position=f,l!==f&&(this._indicator.removeClass(a),l=f,this._indicator.addClass(s+f));var _=he.offset(d);this._indicator.css({height:_.height,left:_.left,top:_.top,width:_.width}),this.show()}},this.make=function(){this._indicator=k(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},uu=(e,t,n)=>{!e||!t||(e=e.isMWElement?e.get(0):e,e.dataset.tooltip=t,e.title=t,e.dataset.tooltipposition=n||"top-center")},_t=function(e){this.options=e||{};var t=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=k({props:{className:"mw-le-handle-menu",id:t.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=k({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var n,i,r,s=function(){n=k({props:{className:"mw-le-handle-menu-title"}}),i=k({props:{className:"mw-le-handle-menu-title-text"}}),r=k({props:{className:"mw-le-handle-menu-title-icon"}}),n.append(i),n.append(r),t.root.prepend(n),t.title=n},a=null;this.getTarget=function(){return a},this.setTarget=function(l){a=l;for(var d=0;d<this.buttons.length;d++)this.buttons[d].config.onTarget&&this.buttons[d].config.onTarget(l,this.buttons[d].button.get(0),t.options.rootScope)},this.setTitle=function(l,d){i.html(l||""),r.html(d||"")},this.buttons=[],this.buildButtons=function(l,d){d=d||this.buttonsHolder,l=l||this.options.buttons,l.forEach(function(f){d.append(t.button(f))})},this.button=function(l){var d=k({props:{className:"mw-le-handle-menu-button"+(l.className?" "+l.className:"")}}),f={props:{className:"mw-le-handle-menu-button-content"}},_=k(f);if(l.title&&uu(_,l.title),l.icon){var g=k({props:{className:"mw-le-handle-menu-button-icon",innerHTML:l.icon}});_.append(g)}if(l.text){var v=k({props:{className:"mw-le-handle-menu-button-text",innerHTML:l.text}});_.append(v)}if(d.append(_),this.buttons.push({button:d,config:l}),l.menu){var y=k({props:{className:"mw-le-handle-menu-button-sub-menu"}});d.append(y),t.buildButtons(l.menu,y),d.on("click",function(){this.classList.toggle("sub-menu-active")})}else typeof l.action=="function"&&d.on("click",function(){l.action(t.getTarget(),d.get(0))});return d},this.init=function(){this.create(),s(),this.setTitle(t.options.title,t.options.icon),this.buildButtons(),this.hide()},this.init()},cu=(e,t)=>{const n=k({props:{className:"le-dialog-footer"}}),i=k({props:{className:"le-btn le-btn-primary le-dialog-footer-ok",innerHTML:e||"OK"}}),r=k({props:{className:"le-btn le-dialog-footer-cancel"}});return n.append(r),n.append(i),{ok:i,cancel:r,footer:n}};var je,Ut,Pi;class Fs{constructor(t){oe(this,Ut);oe(this,je,{});t=t||{};const n={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},n,t),this.build(),setTimeout(i=>this.open())}on(t,n){D(this,je)[t]?D(this,je)[t].push(n):D(this,je)[t]=[n]}dispatch(t,n){D(this,je)[t]&&D(this,je)[t].forEach(i=>{i.call(this,n)})}build(){this.root=k({props:{className:`le-dialog ${typeof this.settings.position=="string"?this.settings.position:""}`}});var t=k({props:{className:"le-dialog-close"}});t.on("click",()=>{this.remove()}),this.container=k({props:{className:"le-dialog-container"},content:this.settings.content}),this.root.append(t),this.root.append(this.container),this.settings.footer&&this.root.append(this.settings.footer.root||this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this.settings.closeOnEscape&&this.settings.document.addEventListener("keydown",_e(this,Ut,Pi)),this.settings.overlay&&this.overlay()}open(){if(this.settings.position.nodeName&&this.settings.position.ownerDocument===this.settings.document){var t=this.settings.position;t.ownerDocument;var n=t.ownerDocument.defaultView,i=t.getBoundingClientRect(),r=i.top+n.scrollY,s=i.left+t.offsetWidth+n.scrollX,a=this.root.get(0);r+a.offsetHeight>n.innerHeight+n.scrollY&&(r-=r+a.offsetHeight-(n.innerHeight+n.scrollY)),s+a.offsetWidth>n.innerWidth&&(s-=s+a.offsetWidth-n.innerWidth),this.root.css({top:r,left:s,position:this.settings.mode})}this.root.addClass("le-dialog-opened")}remove(){this.root.on("transitionend",()=>{this.root.remove(),this.overlay&&this.overlay.remove()}),this.root.removeClass("le-dialog-opened"),this.settings.closeOnEscape&&this.settings.document.removeEventListener("keydown",_e(this,Ut,Pi)),this.dispatch("close")}overlay(){this.overlay=k({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}je=new WeakMap,Ut=new WeakSet,Pi=function(t){(t.key==="Escape"||t.keyCode===27)&&this.remove()};const qs=function(e,t){const n=cu(),i=new Fs({content:e,footer:n.footer.get(0),position:"centered"});return n.cancel.on("click",function(){i.remove()}),n.ok.on("click",function(){t&&t.call(),i.remove()}),i},du=function(e){this.root=k({props:{id:"mw-handle-item-element-root"}});const t=[{title:"Duplicate",text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg>',className:"mw-handle-clone-button",onTarget:function(n,i){i.style.display=n.classList.contains("cloneable")?"":"none"},action:function(n){k(n).after(n.outerHTML)}},{title:"Move backward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20 13.5C20 17.09 17.09 20 13.5 20H6V18H13.5C16 18 18 16 18 13.5S16 9 13.5 9H7.83L10.91 12.09L9.5 13.5L4 8L9.5 2.5L10.92 3.91L7.83 7H13.5C17.09 7 20 9.91 20 13.5Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(n,i){const r=n.classList.contains("cloneable"),s=n.previousElementSibling;i.style.display=r&&s?"":"none"},action:function(n){const i=n.previousElementSibling;i&&(i.before(n),e.elementHandle.set(n))}},{title:"Move forward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M10.5 18H18V20H10.5C6.91 20 4 17.09 4 13.5S6.91 7 10.5 7H16.17L13.08 3.91L14.5 2.5L20 8L14.5 13.5L13.09 12.09L16.17 9H10.5C8 9 6 11 6 13.5S8 18 10.5 18Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(n,i){const r=n.classList.contains("cloneable"),s=n.nextElementSibling;i.style.display=r&&s?"":"none"},action:function(n){const i=n.nextElementSibling;i&&(i.after(n),e.elementHandle.set(n))}}];this.menu=new _t({id:"mw-handle-item-element-menu",title:"Element",buttons:[{title:"Edit",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',className:"mw-handle-add-button",onTarget:function(n,i){},action:function(n){mw.app.editor.dispatch("editNodeRequest",n)}},{title:"Insert module",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z" /></svg>',className:"mw-handle-add-button",onTarget:function(n,i){},action:function(n){mw.app.editor.dispatch("insertModuleRequest",n)}},{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(n,i){},action:function(n){e.dialog({})}},...t,{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(n){qs(k("<span>Are you sure</span>"),()=>{n.remove(),e.elementHandle.hide()})}}]}),this.menu.show(),this.root.append(this.menu.root)},hu=function(e){this.root=k({props:{id:"mw-handle-item-module-root",contentEditable:!1}});var t=new _t({id:"mw-handle-item-element-menu-default",title:"Module",rootScope:e,buttons:[{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',action:()=>{const n=mw.app.get("liveEdit").handles.get("module").getTarget();mw.app.editor.dispatch("onModuleSettingsRequest",n);var i=n.dataset.type||n.getAttribute("type");i=i.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+i,n)},onTarget:function(n,i){n.classList.contains("no-settings")?i.style.display="none":i.style.display=""}}]});this.menu=new _t({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,buttons:[]}),this.menu.show(),t.show(),this.root.append(this.menu.root),this.root.append(t.root)},fu=function(e){this.root=k({props:{id:"mw-handle-item-layout-root"}});const t={};this.on=(n,i)=>{t[n]?t[n].push(i):t[n]=[i]},this.dispatch=(n,i)=>{t[n]&&t[n].forEach(r=>{r.call(this,i)})},this.menu=new _t({id:"mw-handle-item-layout-menu",title:e.lang("Layout"),rootScope:e,buttons:[{title:e.lang("Settings"),text:"",icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 13.3 15.9" xml:space="preserve"><path d="M8.2,2.4L11,5.1l-8.2,8.2H0v-2.8L8.2,2.4z M11.8,4.3L9,1.6l1.4-1.4C10.5,0.1,10.7,0,10.9,0c0.2,0,0.4,0.1,0.5,0.2l1.7,1.7c0.1,0.1,0.2,0.3,0.2,0.5S13.3,2.8,13.1,3L11.8,4.3z"/><rect y="14.5" width="12" height="1.4"/></svg>',className:"mw-handle-insert-button",menu:[{title:e.lang("Add something"),text:e.lang("Add something"),icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" version="1.1" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button"},{title:e.lang("Settings1212"),text:"Do alert",className:"mw-handle-insert-button"}]},{title:e.lang("Clone"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>',className:"mw-handle-insert-button",action:function(n,i,r){var s=document.createElement("div");s.innerHTML=n.outerHTML,k("[id]",s).each(function(){this.id="le-id-"+new Date().getTime()}),k(n).after(s.innerHTML);var a=n.nextElementSibling;mw.reload_module(a,function(){r.statemanager.record({target:mw.tools.firstParentWithClass(n,"edit"),value:parent.innerHTML})}),a.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})}},{title:e.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(n,i){n.nextElementSibling===null?i.style.display="none":i.style.display=""},action:function(n,i){var r=n.nextElementSibling;if(r){var s=n.getBoundingClientRect(),a=r.getBoundingClientRect(),l=0;s.top<a.top&&(l=-(s.top-a.top)),n.classList.add("mw-le-target-to-animate"),r.classList.add("mw-le-target-to-animate"),n.style.transform="translateY("+l+"px)",r.style.transform="translateY("+-l+"px)",setTimeout(function(){r.parentNode.insertBefore(n,r.nextSibling),n.classList.remove("mw-le-target-to-animate"),r.classList.remove("mw-le-target-to-animate"),n.style.transform="",r.style.transform="",n.scrollIntoView({behavior:"smooth",block:"start",inline:"start"}),e.layoutHandle.set(n,!0)},300)}}},{title:e.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(n,i,r){n.previousElementSibling===null?i.style.display="none":i.style.display=""},action:function(n,i){var r=n.previousElementSibling;if(r){var s=n.getBoundingClientRect(),a=r.getBoundingClientRect(),l=0;s.top>a.top&&(l=-(s.top-a.top)),n.classList.add("mw-le-target-to-animate"),r.classList.add("mw-le-target-to-animate"),n.style.transform="translateY("+l+"px)",r.style.transform="translateY("+-l+"px)",setTimeout(function(){r.parentNode.insertBefore(n,r),n.classList.remove("mw-le-target-to-animate"),r.classList.remove("mw-le-target-to-animate"),n.style.transform="",r.style.transform="",e.layoutHandle.set(n,!0),n.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})},300)}}},{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path  d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(n,i,r){qs("Are you sure",function(){n.remove()})}}]}),this.addButtons=function(){var n="Add Layout",i=r=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+r.charAt(0).toUpperCase()+r.slice(1))};this.plusTop=k({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:e.lang(n)}}),this.plusBottom=k({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:e.lang(n)}}),this.plusTop.on("click",function(){i("top")}),this.plusBottom.on("click",function(){i("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.menu.show(),this.addButtons(),this.root.append(this.menu.root)},ms={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},pu=(e,t)=>((!t||!ms[t])&&(t="en"),ms[t][e]||e),mu=function(e){this.root=k({props:{id:"mw-handle-interaction-item-element-root"}}),this.menu=new _t({id:"mw-handle-item-element-menu",title:"Element",buttons:[]}),this.menu.show(),this.root.append(this.menu.root)};class gu{constructor(t){const n=this,i={};this.on=(y,O)=>{i[y]?i[y].push(O):i[y]=[O]},this.dispatch=(y,O)=>{i[y]&&i[y].forEach(P=>{P.call(this,O)})},this.paused=!1;var r={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=Oe.extend({},r,t),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(y){return pu(y,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new js(this.settings),this.dropIndicator=new lu(this.settings);const s=new du(this),a=new hu(this),l=new fu(this);this.elementHandleContent=s,this.moduleHandleContent=a,this.layoutHandleContent=l,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.dialog=function(y){y||(y={});var O={document:window.top.document,position:a.menu.getTarget(),mode:"absolute"};n.pause();const P=new Fs(Oe.extend({},O,y));return P.on("close",function(){n.play()}),P};var d=this.elementHandle=new wn({...this.settings,dropIndicator:this.dropIndicator,content:s.root,handle:k(".mw-handle-drag-button",s.root.get(0)),handle:"self",document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});this.isResizing=!1,d.resizer.on("resizeStart",y=>this.isResizing=!0),d.resizer.on("resizeStop",y=>this.isResizing=!1),d.on("targetChange",function(y){s.menu.setTarget(y),y.className.includes("col-")?d.resizer.disable():d.resizer.enable()}),this.moduleHandle=new wn({...this.settings,dropIndicator:this.dropIndicator,content:a.root,handle:a.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});var f=this.moduleHandle;this.getModuleQuickSettings=y=>new Promise(O=>{O(mw.quickSettings[y]),this.dispatch("moduleQuickSettings",{module:y})}),f.on("targetChange",function(y){n.getModuleQuickSettings(y.dataset.type).then(function(O){a.menu.root.remove(),a.menu=new _t({id:"mw-handle-item-element-menu",title:y.dataset.type,rootScope:n,buttons:O?O.mainMenu||[]:[],data:{target:y}}),a.menu.setTarget(y),a.menu.show(),a.root.append(a.menu.root)})}),this.layoutHandle=new wn({...this.settings,dropIndicator:this.dropIndicator,content:l.root,handle:l.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var _=this.layoutHandle,g=n.lang("Layout");l.menu.setTitle(g),_.on("targetChange",function(y){l.menu.setTarget(y),l.menu.setTitle(g),n.elementAnalyzer.isEditOrInEdit(y)?(l.plusTop.show(),l.plusBottom.show()):(l.plusTop.hide(),l.plusBottom.hide())}),l.handle=_,a.handle=f,s.handle=d;const v=new mu;this.interactionHandle=new wn({...this.settings,content:v.root,document:this.settings.document,resizable:!1,className:"mw-handle-item-interaction-handle"}),this.interactionHandle.menu=v.menu,this.handles=new au({element:d,module:f,layout:_,interactionHandle:this.interactionHandle}),this.observe=new tu(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}init(){this.settings.mode==="auto"&&setInterval(()=>ou(this),1e3);const t=i=>{if(this.handles.targetIsOrInsideHandle(i))return;const r=this.observe.fromEvent(i);let s=r[0];if(s.nodeName!=="IMG"&&(s=he.firstBlockLevel(r[0])),this.handles.get("element").set(null),this.handles.hide(),s){const a=this.elementAnalyzer.getType(s);a&&a!=="edit"&&(this.handles.set(a,s),a==="element"?this.handles.hide("module"):a==="module"?this.handles.hide("element"):a==="layout"?this.handles.set("layout",layout):this.handles.hide())}else{const a=he.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);a&&this.handles.set("layout",a)}};let n;n="mousedown touchstart",k(this.root).on("mousemove",i=>{if(this.paused||this.isResizing){this.interactionHandle.hide();return}if(this.handles.targetIsOrInsideHandle(i)){this.interactionHandle.hide();return}const r=this.observe.fromEvent(i),s=he.firstParentOrCurrentWithAnyOfClasses(r[0],["element","module","cloneable"]),a=he.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);let l=!1;if(a){const f=this.handles.get("element").getTarget(),_=this.handles.get("module").getTarget();a.contains(f)&&(l=!0),a.contains(_)&&(l=!0),l?this.handles.hide("layout"):this.handles.set("layout",a)}if(s&&!this.handles.targetIsSelected(s,this.interactionHandle)&&!s.classList.contains("module-layouts")){var d="";s.dataset.mwTitle?d=s.dataset.mwTitle:s.dataset.type?d=s.dataset.type:s.nodeName==="P"?d=this.lang("Paragraph"):/(H[1-6])/.test(s.nodeName)?d=this.lang("Title")+" "+s.nodeName.replace(/^\D+/g,""):s.nodeName==="IMG"||s.nodeName==="IMAGE"?d=this.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(s.nodeName)?d=this.lang("Title "+s.nodeName.replace("H","")):["DIV","MAIN","SECTION"].includes(s.nodeName)?d=this.lang("Block"):d=this.lang("Text"),this.interactionHandle.menu.setTitle(d),this.interactionHandle.show(),this.interactionHandle.set(s)}else this.interactionHandle.hide()}),k(this.root).on(n,i=>{if(!this.paused)t(i);else{var r=this.elementHandle.getTarget();r&&!r.contains(i.target)&&this.play()}})}}globalThis.LiveEdit=gu;const Ld=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:none}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:999;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:none}.mw-handle-item.mw-le-resizable{position:absolute}.mw-handle-item.mw-handle-item-interaction-handle{pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;pointer-events:none}.mw-draggable-helper .mw-element-is-dragged{opacity:1;pointer-events:none}.mw-le-handle-menu{position:absolute;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;border-radius:7px;border:1px solid transparent;padding:3px 12px;display:inline-flex;align-items:center;background-color:#fff;pointer-events:all;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;position:absolute;top:-40px;left:-3px;transition:.2s;opacity:0;transform:translateY(10px);z-index:2}.mw-le-handle-menu .mw-le-handle-menu-buttons:empty{display:none!important}.mw-le-handle-menu *{vertical-align:middle}.mw-handle-item.mw-handle-active .mw-le-handle-menu .mw-le-handle-menu-buttons{opacity:1;transform:translateY(0)}#mw-handle-item-element-menu{top:-22px;left:-3px}#mw-handle-item-layout-menu{top:5px;right:5px;left:auto}#mw-handle-item-layout-menu .mw-le-handle-menu-buttons{left:auto;right:5px;top:5px}#mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-drag-button{cursor:grab}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:none;align-items:center;justify-content:center;padding:0 5px;height:20px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:grab;background-color:#0078ff;color:#fff}.mw-handle-item-interaction-handle .mw-le-handle-menu-title{display:inline-flex}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#0078ff;color:#fff;border-radius:7px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#016ce6}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}.mw-handle-item-draggable-self{position:absolute;pointer-events:all;inset:0;z-index:10;display:none}.mw-handle-item-draggable-self.active{display:block}.mw-handle-item.mw-le-resizable .mw-le-resizer:before,.mw-handle-item.mw-le-resizable .mw-le-resizer:after{position:absolute;width:9px;height:9px;background-color:#fff;border:2px solid #2a84fb;content:""}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before{top:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{top:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{left:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before{bottom:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{bottom:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{top:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before{left:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{left:calc(50% - 4px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before{right:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{right:calc(50% - 5px)}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizable.mw-le-resizable-disabled .mw-le-resizer{display:none}.mw-le-resizer{position:absolute;pointer-events:all}.mw-le-resizer-r{cursor:e-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-l{cursor:e-resize;height:100%;left:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:n-resize;height:5px;left:0;width:100%}.mw-le-resizer-t{top:0;cursor:n-resize;height:5px;left:0;width:100%}mw-le-element{display:block;line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;font-family:Verdana,sans-serif;box-sizing:border-box}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}
`;var Te,$e,nt,Xt,Ri,Kt,Bi,Dn,Ys;class Vs{constructor(t={}){oe(this,Xt);oe(this,Kt);oe(this,Dn);oe(this,Te,null);oe(this,$e,{});ve(this,"selectedCategory","");oe(this,nt,[]);ve(this,"root",null);const n={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},n,t),this.document=this.settings.document}on(t,n){D(this,$e)[t]?D(this,$e)[t].push(n):D(this,$e)[t]=[n]}dispatch(t,n){D(this,$e)[t]&&D(this,$e)[t].forEach(i=>{i.call(this,n)})}getData(){return D(this,Te)}setData(t,n=!0){pt(this,Te,t);let i=0,r=D(this,Te).length;for(;i<r;i++)typeof D(this,Te)[i].categories=="string"&&(D(this,Te)[i].categories=D(this,Te)[i].categories.split(",").map(s=>s.trim()));n&&this.dispatch("dataChanged",D(this,Te))}prepareCategories(){const t=[],n=this.getData();let i=0,r=n.length;for(;i<r;i++){let a=n[i].categories||"",l=0,d=a.length;for(;l<d;l++){const f=a[l].trim();t.indexOf(f)===-1&&t.push(f)}}t.sort(),this.categories=t}createCategoriesMenu(){const t=this.document.createElement("ul");this.prepareCategories(),t.className="modules-list-categories",t.innerHTML=this.categories.map(n=>`<li data-category="${n}">${n}</li>`).join(""),t.innerHTML=`<li data-category="">All categories</li> ${t.innerHTML}`,t.addEventListener("click",n=>{n.target.nodeName==="LI"&&this.selectCategory(n.target.dataset.category)}),this.categoriesNavigation=t,this.rootShadow.appendChild(t),this.on("categorySelect",n=>{const i=t.querySelectorAll("[data-category]");for(const r of i)r.classList[r.dataset.category===n?"add":"remove"]("active")})}selectCategory(t=""){this.selectedCategory=t,this.search(t),this.dispatch("categorySelect",t)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let t=document.createElement("style");t.textContent=this.settings.css,this.rootShadow.appendChild(t)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let n=0,i=t.length;const r={miscellaneous:_e(this,Kt,Bi).call(this,"miscellaneous")};for(;n<i;n++)(t[n].categories||["miscellaneous"]).forEach(a=>{r[a]||(r[a]=_e(this,Kt,Bi).call(this,a));const l=_e(this,Xt,Ri).call(this,t[n]);D(this,nt).push(l),r[a].appendChild(l),r[a].__$hasNodes=!0});for(const s in r)r[s].__$hasNodes&&this.modulesList.appendChild(r[s]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let n=0,i=t.length;for(;n<i;n++){const r=_e(this,Xt,Ri).call(this,t[n]);D(this,nt).push(r),this.modulesList.appendChild(r)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(t){t.nodeName&&(t.style.display="none")}showItem(t){t.nodeName&&(t.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",t=>this.search(void 0,this.searchField.value)),this.on("categorySelect",t=>{this.searchField.value=""})}async search(t="",n=""){if(this.settings.searchMode==="local")return _e(this,Dn,Ys).call(this,t,n)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(t=>{t(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(t=>{t(this)})}}Te=new WeakMap,$e=new WeakMap,nt=new WeakMap,Xt=new WeakSet,Ri=function(t){t.locked=t.description.includes("a");const n=this.document.createElement("div");return n.className="modules-list-block-item modules-list-block-item-is-locked-"+t.locked,n.__$data=t,n.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${t.icon||t.screenshot||t.image})"></div>
            <div class="modules-list-block-item-title">${t.name||t.title}</div>
            <div class="modules-list-block-item-description">${t.description}</div>
            ${t.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,n.addEventListener("click",i=>{i.stopPropagation(),n.__$data.locked?this.dispatch("lockedModuleSelected",{data:t,element:n}):this.dispatch("moduleSelected",{data:t,element:n})}),n.$data=t,n},Kt=new WeakSet,Bi=function(t){const n=this.document.createElement("div");return n.className="modules-list-block-category-section",n.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+t+"</h5></div>",n.__$hasNodes=!1,n},Dn=new WeakSet,Ys=async function(t,n){return t&&(t=t.trim().toLowerCase()),n&&(n=n.trim().toLowerCase()),new Promise(i=>{let r=0,s=D(this,nt).length,a=0;for(;r<s;r++){const l=D(this,nt)[r],d=l.$data;if(t&&d.categories.indexOf(t)===-1){this.hideItem(l);continue}if(n&&(d.name||d.title).toLowerCase().indexOf(n)===-1){this.hideItem(l);continue}this.showItem(l),a++}console.log(n,t),this.modulesListNoResultsNode.style.display=a===0?"":"none",i()})};const Cn=[],Ws=function(e){Cn.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+e}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",t=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(e){(e.key==="Escape"||e.keyCode===27)&&Cn.length>0&&(Cn[0].remove(),Cn.splice(0,1))});var zi,gs=function(e){var t=new Vs({data:zi});t.create().then(function(){var n=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),i=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),r=mw.element({props:{className:"mw-le-layouts-dialog-col"}});n.append(i),n.append(r),mw.element(t.root).append(n),i.append(t.searchBlock);var s=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});i.append(s),i.append(t.categoriesNavigation),r.append(t.modulesList),e.append(t.root)})};const vu=()=>{var e=new Ws("mw-le-layouts-dialog"),t=e.dialog;if(zi){gs(t);return}mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(n){return n.json()}).then(function(n){zi=n,gs(t),mw.spinner({element:t.get(0),decorate:!0}).remove()})};var ji,vs=function(e){var t=new Vs({data:ji});t.createCategorized().then(function(){e.append(t.root)})};const wu=()=>{var e=new Ws("mw-le-modules-dialog"),t=e.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var n=mw.$(this).attr("data-module-name"),i={class:this.className};n==="layout"&&(i.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,n,i,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),ji?vs(t):(mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(n){return n.json()}).then(function(n){ji=n,vs(t),mw.spinner({element:t.get(0),decorate:!0}).remove()}))},bu={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return wu()},insertLayout:function(){return vu()}},yu={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await An.get(route("api.module.list")+"?layout_type=module").then(e=>{this.modulesListData=e.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(e){if(this.modulesSkinsData[e])return this.modulesSkinsData[e];if(await An.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.modulesSkinsData[e]=t.data}),this.modulesSkinsData[e])return this.modulesSkinsData[e]}},_u={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await An.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(e=>{this.layoutsListData=e.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var e="layouts";if(this.layoutSkinsData[e])return this.layoutSkinsData[e];if(await An.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.layoutSkinsData[e]=t.data}),this.layoutSkinsData[e])return this.layoutSkinsData[e]}};class xu extends kn{constructor(){super()}onRegister(){}}class Eu extends kn{selectIcon(t){var n=$(t)[0];mw.iconLoader().init();var i=mw.iconPicker({iconOptions:!1});i.target=document.createElement("i"),i.on("select",function(r){r.render(),n.value=i.target.outerHTML;var s=new Event("input");n.dispatchEvent(s),i.dialog("hide")}),i.dialog()}removeIcon(t){var n=$(t)[0];n.value="";var i=new Event("input");n.dispatchEvent(i)}}class Cu extends kn{constructor(){super()}selectLink(t){var n=new(mw.top()).LinkEditor({mode:"dialog",controllers:[{type:"url",config:{text:!1,target:!1}},{type:"page",config:{text:!1,target:!1}},{type:"post",config:{text:!1,target:!1}},{type:"file",config:{text:!1,target:!1}},{type:"email",config:{text:!1,target:!1}},{type:"layout",config:{text:!1,target:!1}}]});mw.$(t)&&n.setValue({url:mw.$(t).val()||""});var i=this;n.promise().then(function(r){if(r){var s={},a=r.url;s.url=a,r.data&&r.data.id&&(s.id=r.data.id,r.data.type&&r.data.type==="category"?s.type="category":(r.data.type&&r.data.type==="page"||r.data.content_type)&&(s.type="content")),i.dispatch("selected",s)}})}}(()=>{function e(o,c){var u=Object.keys(o);if(Object.getOwnPropertySymbols){var h=Object.getOwnPropertySymbols(o);c&&(h=h.filter(function(p){return Object.getOwnPropertyDescriptor(o,p).enumerable})),u.push.apply(u,h)}return u}function t(o){for(var c=1;c<arguments.length;c++){var u=arguments[c]!=null?arguments[c]:{};c%2?e(Object(u),!0).forEach(function(h){i(o,h,u[h])}):Object.getOwnPropertyDescriptors?Object.defineProperties(o,Object.getOwnPropertyDescriptors(u)):e(Object(u)).forEach(function(h){Object.defineProperty(o,h,Object.getOwnPropertyDescriptor(u,h))})}return o}function n(o){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?n=function(c){return typeof c}:n=function(c){return c&&typeof Symbol=="function"&&c.constructor===Symbol&&c!==Symbol.prototype?"symbol":typeof c},n(o)}function i(o,c,u){return c in o?Object.defineProperty(o,c,{value:u,enumerable:!0,configurable:!0,writable:!0}):o[c]=u,o}function r(){return r=Object.assign||function(o){for(var c=1;c<arguments.length;c++){var u=arguments[c];for(var h in u)Object.prototype.hasOwnProperty.call(u,h)&&(o[h]=u[h])}return o},r.apply(this,arguments)}function s(o,c){if(o==null)return{};var u={},h=Object.keys(o),p,m;for(m=0;m<h.length;m++)p=h[m],!(c.indexOf(p)>=0)&&(u[p]=o[p]);return u}function a(o,c){if(o==null)return{};var u=s(o,c),h,p;if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(o);for(p=0;p<m.length;p++)h=m[p],!(c.indexOf(h)>=0)&&(!Object.prototype.propertyIsEnumerable.call(o,h)||(u[h]=o[h]))}return u}var l="1.15.0";function d(o){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(o)}var f=d(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),_=d(/Edge/i),g=d(/firefox/i),v=d(/safari/i)&&!d(/chrome/i)&&!d(/android/i),y=d(/iP(ad|od|hone)/i),O=d(/chrome/i)&&d(/android/i),P={capture:!1,passive:!1};function w(o,c,u){o.addEventListener(c,u,!f&&P)}function S(o,c,u){o.removeEventListener(c,u,!f&&P)}function B(o,c){if(c){if(c[0]===">"&&(c=c.substring(1)),o)try{if(o.matches)return o.matches(c);if(o.msMatchesSelector)return o.msMatchesSelector(c);if(o.webkitMatchesSelector)return o.webkitMatchesSelector(c)}catch{return!1}return!1}}function U(o){return o.host&&o!==document&&o.host.nodeType?o.host:o.parentNode}function j(o,c,u,h){if(o){u=u||document;do{if(c!=null&&(c[0]===">"?o.parentNode===u&&B(o,c):B(o,c))||h&&o===u)return o;if(o===u)break}while(o=U(o))}return null}var pe=/\s+/g;function z(o,c,u){if(o&&c)if(o.classList)o.classList[u?"add":"remove"](c);else{var h=(" "+o.className+" ").replace(pe," ").replace(" "+c+" "," ");o.className=(h+(u?" "+c:"")).replace(pe," ")}}function A(o,c,u){var h=o&&o.style;if(h){if(u===void 0)return document.defaultView&&document.defaultView.getComputedStyle?u=document.defaultView.getComputedStyle(o,""):o.currentStyle&&(u=o.currentStyle),c===void 0?u:u[c];!(c in h)&&c.indexOf("webkit")===-1&&(c="-webkit-"+c),h[c]=u+(typeof u=="string"?"":"px")}}function me(o,c){var u="";if(typeof o=="string")u=o;else do{var h=A(o,"transform");h&&h!=="none"&&(u=h+" "+u)}while(!c&&(o=o.parentNode));var p=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return p&&new p(u)}function Tr(o,c,u){if(o){var h=o.getElementsByTagName(c),p=0,m=h.length;if(u)for(;p<m;p++)u(h[p],p);return h}return[]}function Se(){var o=document.scrollingElement;return o||document.documentElement}function J(o,c,u,h,p){if(!(!o.getBoundingClientRect&&o!==window)){var m,b,C,x,L,T,M;if(o!==window&&o.parentNode&&o!==Se()?(m=o.getBoundingClientRect(),b=m.top,C=m.left,x=m.bottom,L=m.right,T=m.height,M=m.width):(b=0,C=0,x=window.innerHeight,L=window.innerWidth,T=window.innerHeight,M=window.innerWidth),(c||u)&&o!==window&&(p=p||o.parentNode,!f))do if(p&&p.getBoundingClientRect&&(A(p,"transform")!=="none"||u&&A(p,"position")!=="static")){var q=p.getBoundingClientRect();b-=q.top+parseInt(A(p,"border-top-width")),C-=q.left+parseInt(A(p,"border-left-width")),x=b+m.height,L=C+m.width;break}while(p=p.parentNode);if(h&&o!==window){var H=me(p||o),Z=H&&H.a,R=H&&H.d;H&&(b/=R,C/=Z,M/=Z,T/=R,x=b+T,L=C+M)}return{top:b,left:C,bottom:x,right:L,width:M,height:T}}}function Or(o,c,u){for(var h=ke(o,!0),p=J(o)[c];h;){var m=J(h)[u],b=void 0;if(u==="top"||u==="left"?b=p>=m:b=p<=m,!b)return h;if(h===Se())break;h=ke(h,!1)}return!1}function at(o,c,u,h){for(var p=0,m=0,b=o.children;m<b.length;){if(b[m].style.display!=="none"&&b[m]!==N.ghost&&(h||b[m]!==N.dragged)&&j(b[m],u.draggable,o,!1)){if(p===c)return b[m];p++}m++}return null}function Kn(o,c){for(var u=o.lastElementChild;u&&(u===N.ghost||A(u,"display")==="none"||c&&!B(u,c));)u=u.previousElementSibling;return u||null}function ge(o,c){var u=0;if(!o||!o.parentNode)return-1;for(;o=o.previousElementSibling;)o.nodeName.toUpperCase()!=="TEMPLATE"&&o!==N.clone&&(!c||B(o,c))&&u++;return u}function Nr(o){var c=0,u=0,h=Se();if(o)do{var p=me(o),m=p.a,b=p.d;c+=o.scrollLeft*m,u+=o.scrollTop*b}while(o!==h&&(o=o.parentNode));return[c,u]}function la(o,c){for(var u in o)if(o.hasOwnProperty(u)){for(var h in c)if(c.hasOwnProperty(h)&&c[h]===o[u][h])return Number(u)}return-1}function ke(o,c){if(!o||!o.getBoundingClientRect)return Se();var u=o,h=!1;do if(u.clientWidth<u.scrollWidth||u.clientHeight<u.scrollHeight){var p=A(u);if(u.clientWidth<u.scrollWidth&&(p.overflowX=="auto"||p.overflowX=="scroll")||u.clientHeight<u.scrollHeight&&(p.overflowY=="auto"||p.overflowY=="scroll")){if(!u.getBoundingClientRect||u===document.body)return Se();if(h||c)return u;h=!0}}while(u=u.parentNode);return Se()}function ua(o,c){if(o&&c)for(var u in c)c.hasOwnProperty(u)&&(o[u]=c[u]);return o}function Jn(o,c){return Math.round(o.top)===Math.round(c.top)&&Math.round(o.left)===Math.round(c.left)&&Math.round(o.height)===Math.round(c.height)&&Math.round(o.width)===Math.round(c.width)}var Tt;function Mr(o,c){return function(){if(!Tt){var u=arguments,h=this;u.length===1?o.call(h,u[0]):o.apply(h,u),Tt=setTimeout(function(){Tt=void 0},c)}}}function ca(){clearTimeout(Tt),Tt=void 0}function Dr(o,c,u){o.scrollLeft+=c,o.scrollTop+=u}function kr(o){var c=window.Polymer,u=window.jQuery||window.Zepto;return c&&c.dom?c.dom(o).cloneNode(!0):u?u(o).clone(!0)[0]:o.cloneNode(!0)}var ue="Sortable"+new Date().getTime();function da(){var o=[],c;return{captureAnimationState:function(){if(o=[],!!this.options.animation){var u=[].slice.call(this.el.children);u.forEach(function(h){if(!(A(h,"display")==="none"||h===N.ghost)){o.push({target:h,rect:J(h)});var p=t({},o[o.length-1].rect);if(h.thisAnimationDuration){var m=me(h,!0);m&&(p.top-=m.f,p.left-=m.e)}h.fromRect=p}})}},addAnimationState:function(u){o.push(u)},removeAnimationState:function(u){o.splice(la(o,{target:u}),1)},animateAll:function(u){var h=this;if(!this.options.animation){clearTimeout(c),typeof u=="function"&&u();return}var p=!1,m=0;o.forEach(function(b){var C=0,x=b.target,L=x.fromRect,T=J(x),M=x.prevFromRect,q=x.prevToRect,H=b.rect,Z=me(x,!0);Z&&(T.top-=Z.f,T.left-=Z.e),x.toRect=T,x.thisAnimationDuration&&Jn(M,T)&&!Jn(L,T)&&(H.top-T.top)/(H.left-T.left)==(L.top-T.top)/(L.left-T.left)&&(C=fa(H,M,q,h.options)),Jn(T,L)||(x.prevFromRect=L,x.prevToRect=T,C||(C=h.options.animation),h.animate(x,H,T,C)),C&&(p=!0,m=Math.max(m,C),clearTimeout(x.animationResetTimer),x.animationResetTimer=setTimeout(function(){x.animationTime=0,x.prevFromRect=null,x.fromRect=null,x.prevToRect=null,x.thisAnimationDuration=null},C),x.thisAnimationDuration=C)}),clearTimeout(c),p?c=setTimeout(function(){typeof u=="function"&&u()},m):typeof u=="function"&&u(),o=[]},animate:function(u,h,p,m){if(m){A(u,"transition",""),A(u,"transform","");var b=me(this.el),C=b&&b.a,x=b&&b.d,L=(h.left-p.left)/(C||1),T=(h.top-p.top)/(x||1);u.animatingX=!!L,u.animatingY=!!T,A(u,"transform","translate3d("+L+"px,"+T+"px,0)"),this.forRepaintDummy=ha(u),A(u,"transition","transform "+m+"ms"+(this.options.easing?" "+this.options.easing:"")),A(u,"transform","translate3d(0,0,0)"),typeof u.animated=="number"&&clearTimeout(u.animated),u.animated=setTimeout(function(){A(u,"transition",""),A(u,"transform",""),u.animated=!1,u.animatingX=!1,u.animatingY=!1},m)}}}}function ha(o){return o.offsetWidth}function fa(o,c,u,h){return Math.sqrt(Math.pow(c.top-o.top,2)+Math.pow(c.left-o.left,2))/Math.sqrt(Math.pow(c.top-u.top,2)+Math.pow(c.left-u.left,2))*h.animation}var lt=[],Zn={initializeByDefault:!0},Ot={mount:function(o){for(var c in Zn)Zn.hasOwnProperty(c)&&!(c in o)&&(o[c]=Zn[c]);lt.forEach(function(u){if(u.pluginName===o.pluginName)throw"Sortable: Cannot mount plugin ".concat(o.pluginName," more than once")}),lt.push(o)},pluginEvent:function(o,c,u){var h=this;this.eventCanceled=!1,u.cancel=function(){h.eventCanceled=!0};var p=o+"Global";lt.forEach(function(m){!c[m.pluginName]||(c[m.pluginName][p]&&c[m.pluginName][p](t({sortable:c},u)),c.options[m.pluginName]&&c[m.pluginName][o]&&c[m.pluginName][o](t({sortable:c},u)))})},initializePlugins:function(o,c,u,h){lt.forEach(function(b){var C=b.pluginName;if(!(!o.options[C]&&!b.initializeByDefault)){var x=new b(o,c,o.options);x.sortable=o,x.options=o.options,o[C]=x,r(u,x.defaults)}});for(var p in o.options)if(o.options.hasOwnProperty(p)){var m=this.modifyOption(o,p,o.options[p]);typeof m<"u"&&(o.options[p]=m)}},getEventProperties:function(o,c){var u={};return lt.forEach(function(h){typeof h.eventProperties=="function"&&r(u,h.eventProperties.call(c[h.pluginName],o))}),u},modifyOption:function(o,c,u){var h;return lt.forEach(function(p){!o[p.pluginName]||p.optionListeners&&typeof p.optionListeners[c]=="function"&&(h=p.optionListeners[c].call(o[p.pluginName],u))}),h}};function pa(o){var c=o.sortable,u=o.rootEl,h=o.name,p=o.targetEl,m=o.cloneEl,b=o.toEl,C=o.fromEl,x=o.oldIndex,L=o.newIndex,T=o.oldDraggableIndex,M=o.newDraggableIndex,q=o.originalEvent,H=o.putSortable,Z=o.extraEventProperties;if(c=c||u&&u[ue],!!c){var R,Ne=c.options,se="on"+h.charAt(0).toUpperCase()+h.substr(1);window.CustomEvent&&!f&&!_?R=new CustomEvent(h,{bubbles:!0,cancelable:!0}):(R=document.createEvent("Event"),R.initEvent(h,!0,!0)),R.to=b||u,R.from=C||u,R.item=p||u,R.clone=m,R.oldIndex=x,R.newIndex=L,R.oldDraggableIndex=T,R.newDraggableIndex=M,R.originalEvent=q,R.pullMode=H?H.lastPutMode:void 0;var Me=t(t({},Z),Ot.getEventProperties(h,c));for(var ne in Me)R[ne]=Me[ne];u&&u.dispatchEvent(R),Ne[se]&&Ne[se].call(c,R)}}var ma=["evt"],le=function(o,c){var u=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},h=u.evt,p=a(u,ma);Ot.pluginEvent.bind(N)(o,c,t({dragEl:E,parentEl:W,ghostEl:I,rootEl:F,nextEl:We,lastDownEl:nn,cloneEl:Y,cloneHidden:Ie,dragStarted:Mt,putSortable:Q,activeSortable:N.active,originalEvent:h,oldIndex:ut,oldDraggableIndex:Nt,newIndex:ce,newDraggableIndex:He,hideGhostForTarget:jr,unhideGhostForTarget:$r,cloneNowHidden:function(){Ie=!0},cloneNowShown:function(){Ie=!1},dispatchSortableEvent:function(m){re({sortable:c,name:m,originalEvent:h})}},p))};function re(o){pa(t({putSortable:Q,cloneEl:Y,targetEl:E,rootEl:F,oldIndex:ut,oldDraggableIndex:Nt,newIndex:ce,newDraggableIndex:He},o))}var E,W,I,F,We,nn,Y,Ie,ut,ce,Nt,He,rn,Q,ct=!1,sn=!1,on=[],Ue,ye,Gn,Qn,Ir,Hr,Mt,dt,Dt,kt=!1,an=!1,ln,te,ei=[],ti=!1,un=[],cn=typeof document<"u",dn=y,Pr=_||f?"cssFloat":"float",ga=cn&&!O&&!y&&"draggable"in document.createElement("div"),Rr=function(){if(cn){if(f)return!1;var o=document.createElement("x");return o.style.cssText="pointer-events:auto",o.style.pointerEvents==="auto"}}(),Br=function(o,c){var u=A(o),h=parseInt(u.width)-parseInt(u.paddingLeft)-parseInt(u.paddingRight)-parseInt(u.borderLeftWidth)-parseInt(u.borderRightWidth),p=at(o,0,c),m=at(o,1,c),b=p&&A(p),C=m&&A(m),x=b&&parseInt(b.marginLeft)+parseInt(b.marginRight)+J(p).width,L=C&&parseInt(C.marginLeft)+parseInt(C.marginRight)+J(m).width;if(u.display==="flex")return u.flexDirection==="column"||u.flexDirection==="column-reverse"?"vertical":"horizontal";if(u.display==="grid")return u.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(p&&b.float&&b.float!=="none"){var T=b.float==="left"?"left":"right";return m&&(C.clear==="both"||C.clear===T)?"vertical":"horizontal"}return p&&(b.display==="block"||b.display==="flex"||b.display==="table"||b.display==="grid"||x>=h&&u[Pr]==="none"||m&&u[Pr]==="none"&&x+L>h)?"vertical":"horizontal"},va=function(o,c,u){var h=u?o.left:o.top,p=u?o.right:o.bottom,m=u?o.width:o.height,b=u?c.left:c.top,C=u?c.right:c.bottom,x=u?c.width:c.height;return h===b||p===C||h+m/2===b+x/2},wa=function(o,c){var u;return on.some(function(h){var p=h[ue].options.emptyInsertThreshold;if(!(!p||Kn(h))){var m=J(h),b=o>=m.left-p&&o<=m.right+p,C=c>=m.top-p&&c<=m.bottom+p;if(b&&C)return u=h}}),u},zr=function(o){function c(p,m){return function(b,C,x,L){var T=b.options.group.name&&C.options.group.name&&b.options.group.name===C.options.group.name;if(p==null&&(m||T))return!0;if(p==null||p===!1)return!1;if(m&&p==="clone")return p;if(typeof p=="function")return c(p(b,C,x,L),m)(b,C,x,L);var M=(m?b:C).options.group.name;return p===!0||typeof p=="string"&&p===M||p.join&&p.indexOf(M)>-1}}var u={},h=o.group;(!h||n(h)!="object")&&(h={name:h}),u.name=h.name,u.checkPull=c(h.pull,!0),u.checkPut=c(h.put),u.revertClone=h.revertClone,o.group=u},jr=function(){!Rr&&I&&A(I,"display","none")},$r=function(){!Rr&&I&&A(I,"display","")};cn&&!O&&document.addEventListener("click",function(o){if(sn)return o.preventDefault(),o.stopPropagation&&o.stopPropagation(),o.stopImmediatePropagation&&o.stopImmediatePropagation(),sn=!1,!1},!0);var Xe=function(o){if(E){o=o.touches?o.touches[0]:o;var c=wa(o.clientX,o.clientY);if(c){var u={};for(var h in o)o.hasOwnProperty(h)&&(u[h]=o[h]);u.target=u.rootEl=c,u.preventDefault=void 0,u.stopPropagation=void 0,c[ue]._onDragOver(u)}}},ba=function(o){E&&E.parentNode[ue]._isOutsideThisEl(o.target)};function N(o,c){if(!(o&&o.nodeType&&o.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(o));this.el=o,this.options=c=r({},c),o[ue]=this;var u={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(o.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Br(o,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(m,b){m.setData("Text",b.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:N.supportPointer!==!1&&"PointerEvent"in window&&!v,emptyInsertThreshold:5};Ot.initializePlugins(this,o,u);for(var h in u)!(h in c)&&(c[h]=u[h]);zr(c);for(var p in this)p.charAt(0)==="_"&&typeof this[p]=="function"&&(this[p]=this[p].bind(this));this.nativeDraggable=c.forceFallback?!1:ga,this.nativeDraggable&&(this.options.touchStartThreshold=1),c.supportPointer?w(o,"pointerdown",this._onTapStart):(w(o,"mousedown",this._onTapStart),w(o,"touchstart",this._onTapStart)),this.nativeDraggable&&(w(o,"dragover",this),w(o,"dragenter",this)),on.push(this.el),c.store&&c.store.get&&this.sort(c.store.get(this)||[]),r(this,da())}N.prototype={constructor:N,_isOutsideThisEl:function(o){!this.el.contains(o)&&o!==this.el&&(dt=null)},_getDirection:function(o,c){return typeof this.options.direction=="function"?this.options.direction.call(this,o,c,E):this.options.direction},_onTapStart:function(o){if(o.cancelable){var c=this,u=this.el,h=this.options,p=h.preventOnFilter,m=o.type,b=o.touches&&o.touches[0]||o.pointerType&&o.pointerType==="touch"&&o,C=(b||o).target,x=o.target.shadowRoot&&(o.path&&o.path[0]||o.composedPath&&o.composedPath()[0])||C,L=h.filter;if(Aa(u),!E&&!(/mousedown|pointerdown/.test(m)&&o.button!==0||h.disabled)&&!x.isContentEditable&&!(!this.nativeDraggable&&v&&C&&C.tagName.toUpperCase()==="SELECT")&&(C=j(C,h.draggable,u,!1),!(C&&C.animated)&&nn!==C)){if(ut=ge(C),Nt=ge(C,h.draggable),typeof L=="function"){if(L.call(this,o,C,this)){re({sortable:c,rootEl:x,name:"filter",targetEl:C,toEl:u,fromEl:u}),le("filter",c,{evt:o}),p&&o.cancelable&&o.preventDefault();return}}else if(L&&(L=L.split(",").some(function(T){if(T=j(x,T.trim(),u,!1),T)return re({sortable:c,rootEl:T,name:"filter",targetEl:C,fromEl:u,toEl:u}),le("filter",c,{evt:o}),!0}),L)){p&&o.cancelable&&o.preventDefault();return}h.handle&&!j(x,h.handle,u,!1)||this._prepareDragStart(o,b,C)}}},_prepareDragStart:function(o,c,u){var h=this,p=h.el,m=h.options,b=p.ownerDocument,C;if(u&&!E&&u.parentNode===p){var x=J(u);if(F=p,E=u,W=E.parentNode,We=E.nextSibling,nn=u,rn=m.group,N.dragged=E,Ue={target:E,clientX:(c||o).clientX,clientY:(c||o).clientY},Ir=Ue.clientX-x.left,Hr=Ue.clientY-x.top,this._lastX=(c||o).clientX,this._lastY=(c||o).clientY,E.style["will-change"]="all",C=function(){if(le("delayEnded",h,{evt:o}),N.eventCanceled){h._onDrop();return}h._disableDelayedDragEvents(),!g&&h.nativeDraggable&&(E.draggable=!0),h._triggerDragStart(o,c),re({sortable:h,name:"choose",originalEvent:o}),z(E,m.chosenClass,!0)},m.ignore.split(",").forEach(function(L){Tr(E,L.trim(),ni)}),w(b,"dragover",Xe),w(b,"mousemove",Xe),w(b,"touchmove",Xe),w(b,"mouseup",h._onDrop),w(b,"touchend",h._onDrop),w(b,"touchcancel",h._onDrop),g&&this.nativeDraggable&&(this.options.touchStartThreshold=4,E.draggable=!0),le("delayStart",this,{evt:o}),m.delay&&(!m.delayOnTouchOnly||c)&&(!this.nativeDraggable||!(_||f))){if(N.eventCanceled){this._onDrop();return}w(b,"mouseup",h._disableDelayedDrag),w(b,"touchend",h._disableDelayedDrag),w(b,"touchcancel",h._disableDelayedDrag),w(b,"mousemove",h._delayedDragTouchMoveHandler),w(b,"touchmove",h._delayedDragTouchMoveHandler),m.supportPointer&&w(b,"pointermove",h._delayedDragTouchMoveHandler),h._dragStartTimer=setTimeout(C,m.delay)}else C()}},_delayedDragTouchMoveHandler:function(o){var c=o.touches?o.touches[0]:o;Math.max(Math.abs(c.clientX-this._lastX),Math.abs(c.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){E&&ni(E),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var o=this.el.ownerDocument;S(o,"mouseup",this._disableDelayedDrag),S(o,"touchend",this._disableDelayedDrag),S(o,"touchcancel",this._disableDelayedDrag),S(o,"mousemove",this._delayedDragTouchMoveHandler),S(o,"touchmove",this._delayedDragTouchMoveHandler),S(o,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(o,c){c=c||o.pointerType=="touch"&&o,!this.nativeDraggable||c?this.options.supportPointer?w(document,"pointermove",this._onTouchMove):c?w(document,"touchmove",this._onTouchMove):w(document,"mousemove",this._onTouchMove):(w(E,"dragend",this),w(F,"dragstart",this._onDragStart));try{document.selection?fn(function(){document.selection.empty()}):window.getSelection().removeAllRanges()}catch{}},_dragStarted:function(o,c){if(ct=!1,F&&E){le("dragStarted",this,{evt:c}),this.nativeDraggable&&w(document,"dragover",ba);var u=this.options;!o&&z(E,u.dragClass,!1),z(E,u.ghostClass,!0),N.active=this,o&&this._appendGhost(),re({sortable:this,name:"start",originalEvent:c})}else this._nulling()},_emulateDragOver:function(){if(ye){this._lastX=ye.clientX,this._lastY=ye.clientY,jr();for(var o=document.elementFromPoint(ye.clientX,ye.clientY),c=o;o&&o.shadowRoot&&(o=o.shadowRoot.elementFromPoint(ye.clientX,ye.clientY),o!==c);)c=o;if(E.parentNode[ue]._isOutsideThisEl(o),c)do{if(c[ue]){var u=void 0;if(u=c[ue]._onDragOver({clientX:ye.clientX,clientY:ye.clientY,target:o,rootEl:c}),u&&!this.options.dragoverBubble)break}o=c}while(c=c.parentNode);$r()}},_onTouchMove:function(o){if(Ue){var c=this.options,u=c.fallbackTolerance,h=c.fallbackOffset,p=o.touches?o.touches[0]:o,m=I&&me(I,!0),b=I&&m&&m.a,C=I&&m&&m.d,x=dn&&te&&Nr(te),L=(p.clientX-Ue.clientX+h.x)/(b||1)+(x?x[0]-ei[0]:0)/(b||1),T=(p.clientY-Ue.clientY+h.y)/(C||1)+(x?x[1]-ei[1]:0)/(C||1);if(!N.active&&!ct){if(u&&Math.max(Math.abs(p.clientX-this._lastX),Math.abs(p.clientY-this._lastY))<u)return;this._onDragStart(o,!0)}if(I){m?(m.e+=L-(Gn||0),m.f+=T-(Qn||0)):m={a:1,b:0,c:0,d:1,e:L,f:T};var M="matrix(".concat(m.a,",").concat(m.b,",").concat(m.c,",").concat(m.d,",").concat(m.e,",").concat(m.f,")");A(I,"webkitTransform",M),A(I,"mozTransform",M),A(I,"msTransform",M),A(I,"transform",M),Gn=L,Qn=T,ye=p}o.cancelable&&o.preventDefault()}},_appendGhost:function(){if(!I){var o=this.options.fallbackOnBody?document.body:F,c=J(E,!0,dn,!0,o),u=this.options;if(dn){for(te=o;A(te,"position")==="static"&&A(te,"transform")==="none"&&te!==document;)te=te.parentNode;te!==document.body&&te!==document.documentElement?(te===document&&(te=Se()),c.top+=te.scrollTop,c.left+=te.scrollLeft):te=Se(),ei=Nr(te)}I=E.cloneNode(!0),z(I,u.ghostClass,!1),z(I,u.fallbackClass,!0),z(I,u.dragClass,!0),A(I,"transition",""),A(I,"transform",""),A(I,"box-sizing","border-box"),A(I,"margin",0),A(I,"top",c.top),A(I,"left",c.left),A(I,"width",c.width),A(I,"height",c.height),A(I,"opacity","0.8"),A(I,"position",dn?"absolute":"fixed"),A(I,"zIndex","100000"),A(I,"pointerEvents","none"),N.ghost=I,o.appendChild(I),A(I,"transform-origin",Ir/parseInt(I.style.width)*100+"% "+Hr/parseInt(I.style.height)*100+"%")}},_onDragStart:function(o,c){var u=this,h=o.dataTransfer,p=u.options;if(le("dragStart",this,{evt:o}),N.eventCanceled){this._onDrop();return}le("setupClone",this),N.eventCanceled||(Y=kr(E),Y.removeAttribute("id"),Y.draggable=!1,Y.style["will-change"]="",this._hideClone(),z(Y,this.options.chosenClass,!1),N.clone=Y),u.cloneId=fn(function(){le("clone",u),!N.eventCanceled&&(u.options.removeCloneOnHide||F.insertBefore(Y,E),u._hideClone(),re({sortable:u,name:"clone"}))}),!c&&z(E,p.dragClass,!0),c?(sn=!0,u._loopId=setInterval(u._emulateDragOver,50)):(S(document,"mouseup",u._onDrop),S(document,"touchend",u._onDrop),S(document,"touchcancel",u._onDrop),h&&(h.effectAllowed="move",p.setData&&p.setData.call(u,h,E)),w(document,"drop",u),A(E,"transform","translateZ(0)")),ct=!0,u._dragStartId=fn(u._dragStarted.bind(u,c,o)),w(document,"selectstart",u),Mt=!0,v&&A(document.body,"user-select","none")},_onDragOver:function(o){var c=this.el,u=o.target,h,p,m,b=this.options,C=b.group,x=N.active,L=rn===C,T=b.sort,M=Q||x,q,H=this,Z=!1;if(ti)return;function R(Rt,Na){le(Rt,H,t({evt:o,isOwner:L,axis:q?"vertical":"horizontal",revert:m,dragRect:h,targetRect:p,canSort:T,fromSortable:M,target:u,completed:se,onMove:function(Vr,Ma){return hn(F,c,E,h,Vr,J(Vr),o,Ma)},changed:Me},Na))}function Ne(){R("dragOverAnimationCapture"),H.captureAnimationState(),H!==M&&M.captureAnimationState()}function se(Rt){return R("dragOverCompleted",{insertion:Rt}),Rt&&(L?x._hideClone():x._showClone(H),H!==M&&(z(E,Q?Q.options.ghostClass:x.options.ghostClass,!1),z(E,b.ghostClass,!0)),Q!==H&&H!==N.active?Q=H:H===N.active&&Q&&(Q=null),M===H&&(H._ignoreWhileAnimating=u),H.animateAll(function(){R("dragOverAnimationComplete"),H._ignoreWhileAnimating=null}),H!==M&&(M.animateAll(),M._ignoreWhileAnimating=null)),(u===E&&!E.animated||u===c&&!u.animated)&&(dt=null),!b.dragoverBubble&&!o.rootEl&&u!==document&&(E.parentNode[ue]._isOutsideThisEl(o.target),!Rt&&Xe(o)),!b.dragoverBubble&&o.stopPropagation&&o.stopPropagation(),Z=!0}function Me(){ce=ge(E),He=ge(E,b.draggable),re({sortable:H,name:"change",toEl:c,newIndex:ce,newDraggableIndex:He,originalEvent:o})}if(o.preventDefault!==void 0&&o.cancelable&&o.preventDefault(),u=j(u,b.draggable,c,!0),R("dragOver"),N.eventCanceled)return Z;if(E.contains(o.target)||u.animated&&u.animatingX&&u.animatingY||H._ignoreWhileAnimating===u)return se(!1);if(sn=!1,x&&!b.disabled&&(L?T||(m=W!==F):Q===this||(this.lastPutMode=rn.checkPull(this,x,E,o))&&C.checkPut(this,x,E,o))){if(q=this._getDirection(o,u)==="vertical",h=J(E),R("dragOverValid"),N.eventCanceled)return Z;if(m)return W=F,Ne(),this._hideClone(),R("revert"),N.eventCanceled||(We?F.insertBefore(E,We):F.appendChild(E)),se(!0);var ne=Kn(c,b.draggable);if(!ne||Ea(o,q,this)&&!ne.animated){if(ne===E)return se(!1);if(ne&&c===o.target&&(u=ne),u&&(p=J(u)),hn(F,c,E,h,u,p,o,!!u)!==!1)return Ne(),ne&&ne.nextSibling?c.insertBefore(E,ne.nextSibling):c.appendChild(E),W=c,Me(),se(!0)}else if(ne&&xa(o,q,this)){var Ke=at(c,0,b,!0);if(Ke===E)return se(!1);if(u=Ke,p=J(u),hn(F,c,E,h,u,p,o,!1)!==!1)return Ne(),c.insertBefore(E,Ke),W=c,Me(),se(!0)}else if(u.parentNode===c){p=J(u);var Le=0,Je,Pt=E.parentNode!==c,ht=!va(E.animated&&E.toRect||h,u.animated&&u.toRect||p,q),de=q?"top":"left",Pe=Or(u,"top","top")||Or(E,"top","top"),gn=Pe?Pe.scrollTop:void 0;dt!==u&&(Je=p[de],kt=!1,an=!ht&&b.invertSwap||Pt),Le=Ca(o,u,p,q,ht?1:b.swapThreshold,b.invertedSwapThreshold==null?b.swapThreshold:b.invertedSwapThreshold,an,dt===u);var De;if(Le!==0){var ft=ge(E);do ft-=Le,De=W.children[ft];while(De&&(A(De,"display")==="none"||De===I))}if(Le===0||De===u)return se(!1);dt=u,Dt=Le;var Ze=u.nextElementSibling,Re=!1;Re=Le===1;var Ge=hn(F,c,E,h,u,p,o,Re);if(Ge!==!1)return(Ge===1||Ge===-1)&&(Re=Ge===1),ti=!0,setTimeout(_a,30),Ne(),Re&&!Ze?c.appendChild(E):u.parentNode.insertBefore(E,Re?Ze:u),Pe&&Dr(Pe,0,gn-Pe.scrollTop),W=E.parentNode,Je!==void 0&&!an&&(ln=Math.abs(Je-J(u)[de])),Me(),se(!0)}if(c.contains(E))return se(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){S(document,"mousemove",this._onTouchMove),S(document,"touchmove",this._onTouchMove),S(document,"pointermove",this._onTouchMove),S(document,"dragover",Xe),S(document,"mousemove",Xe),S(document,"touchmove",Xe)},_offUpEvents:function(){var o=this.el.ownerDocument;S(o,"mouseup",this._onDrop),S(o,"touchend",this._onDrop),S(o,"pointerup",this._onDrop),S(o,"touchcancel",this._onDrop),S(document,"selectstart",this)},_onDrop:function(o){var c=this.el,u=this.options;if(ce=ge(E),He=ge(E,u.draggable),le("drop",this,{evt:o}),W=E&&E.parentNode,ce=ge(E),He=ge(E,u.draggable),N.eventCanceled){this._nulling();return}ct=!1,an=!1,kt=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),ii(this.cloneId),ii(this._dragStartId),this.nativeDraggable&&(S(document,"drop",this),S(c,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),v&&A(document.body,"user-select",""),A(E,"transform",""),o&&(Mt&&(o.cancelable&&o.preventDefault(),!u.dropBubble&&o.stopPropagation()),I&&I.parentNode&&I.parentNode.removeChild(I),(F===W||Q&&Q.lastPutMode!=="clone")&&Y&&Y.parentNode&&Y.parentNode.removeChild(Y),E&&(this.nativeDraggable&&S(E,"dragend",this),ni(E),E.style["will-change"]="",Mt&&!ct&&z(E,Q?Q.options.ghostClass:this.options.ghostClass,!1),z(E,this.options.chosenClass,!1),re({sortable:this,name:"unchoose",toEl:W,newIndex:null,newDraggableIndex:null,originalEvent:o}),F!==W?(ce>=0&&(re({rootEl:W,name:"add",toEl:W,fromEl:F,originalEvent:o}),re({sortable:this,name:"remove",toEl:W,originalEvent:o}),re({rootEl:W,name:"sort",toEl:W,fromEl:F,originalEvent:o}),re({sortable:this,name:"sort",toEl:W,originalEvent:o})),Q&&Q.save()):ce!==ut&&ce>=0&&(re({sortable:this,name:"update",toEl:W,originalEvent:o}),re({sortable:this,name:"sort",toEl:W,originalEvent:o})),N.active&&((ce==null||ce===-1)&&(ce=ut,He=Nt),re({sortable:this,name:"end",toEl:W,originalEvent:o}),this.save()))),this._nulling()},_nulling:function(){le("nulling",this),F=E=W=I=We=Y=nn=Ie=Ue=ye=Mt=ce=He=ut=Nt=dt=Dt=Q=rn=N.dragged=N.ghost=N.clone=N.active=null,un.forEach(function(o){o.checked=!0}),un.length=Gn=Qn=0},handleEvent:function(o){switch(o.type){case"drop":case"dragend":this._onDrop(o);break;case"dragenter":case"dragover":E&&(this._onDragOver(o),ya(o));break;case"selectstart":o.preventDefault();break}},toArray:function(){for(var o=[],c,u=this.el.children,h=0,p=u.length,m=this.options;h<p;h++)c=u[h],j(c,m.draggable,this.el,!1)&&o.push(c.getAttribute(m.dataIdAttr)||La(c));return o},sort:function(o,c){var u={},h=this.el;this.toArray().forEach(function(p,m){var b=h.children[m];j(b,this.options.draggable,h,!1)&&(u[p]=b)},this),c&&this.captureAnimationState(),o.forEach(function(p){u[p]&&(h.removeChild(u[p]),h.appendChild(u[p]))}),c&&this.animateAll()},save:function(){var o=this.options.store;o&&o.set&&o.set(this)},closest:function(o,c){return j(o,c||this.options.draggable,this.el,!1)},option:function(o,c){var u=this.options;if(c===void 0)return u[o];var h=Ot.modifyOption(this,o,c);typeof h<"u"?u[o]=h:u[o]=c,o==="group"&&zr(u)},destroy:function(){le("destroy",this);var o=this.el;o[ue]=null,S(o,"mousedown",this._onTapStart),S(o,"touchstart",this._onTapStart),S(o,"pointerdown",this._onTapStart),this.nativeDraggable&&(S(o,"dragover",this),S(o,"dragenter",this)),Array.prototype.forEach.call(o.querySelectorAll("[draggable]"),function(c){c.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),on.splice(on.indexOf(this.el),1),this.el=o=null},_hideClone:function(){if(!Ie){if(le("hideClone",this),N.eventCanceled)return;A(Y,"display","none"),this.options.removeCloneOnHide&&Y.parentNode&&Y.parentNode.removeChild(Y),Ie=!0}},_showClone:function(o){if(o.lastPutMode!=="clone"){this._hideClone();return}if(Ie){if(le("showClone",this),N.eventCanceled)return;E.parentNode==F&&!this.options.group.revertClone?F.insertBefore(Y,E):We?F.insertBefore(Y,We):F.appendChild(Y),this.options.group.revertClone&&this.animate(E,Y),A(Y,"display",""),Ie=!1}}};function ya(o){o.dataTransfer&&(o.dataTransfer.dropEffect="move"),o.cancelable&&o.preventDefault()}function hn(o,c,u,h,p,m,b,C){var x,L=o[ue],T=L.options.onMove,M;return window.CustomEvent&&!f&&!_?x=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(x=document.createEvent("Event"),x.initEvent("move",!0,!0)),x.to=c,x.from=o,x.dragged=u,x.draggedRect=h,x.related=p||c,x.relatedRect=m||J(c),x.willInsertAfter=C,x.originalEvent=b,o.dispatchEvent(x),T&&(M=T.call(L,x,b)),M}function ni(o){o.draggable=!1}function _a(){ti=!1}function xa(o,c,u){var h=J(at(u.el,0,u.options,!0)),p=10;return c?o.clientX<h.left-p||o.clientY<h.top&&o.clientX<h.right:o.clientY<h.top-p||o.clientY<h.bottom&&o.clientX<h.left}function Ea(o,c,u){var h=J(Kn(u.el,u.options.draggable)),p=10;return c?o.clientX>h.right+p||o.clientX<=h.right&&o.clientY>h.bottom&&o.clientX>=h.left:o.clientX>h.right&&o.clientY>h.top||o.clientX<=h.right&&o.clientY>h.bottom+p}function Ca(o,c,u,h,p,m,b,C){var x=h?o.clientY:o.clientX,L=h?u.height:u.width,T=h?u.top:u.left,M=h?u.bottom:u.right,q=!1;if(!b){if(C&&ln<L*p){if(!kt&&(Dt===1?x>T+L*m/2:x<M-L*m/2)&&(kt=!0),kt)q=!0;else if(Dt===1?x<T+ln:x>M-ln)return-Dt}else if(x>T+L*(1-p)/2&&x<M-L*(1-p)/2)return Sa(c)}return q=q||b,q&&(x<T+L*m/2||x>M-L*m/2)?x>T+L/2?1:-1:0}function Sa(o){return ge(E)<ge(o)?1:-1}function La(o){for(var c=o.tagName+o.className+o.src+o.href+o.textContent,u=c.length,h=0;u--;)h+=c.charCodeAt(u);return h.toString(36)}function Aa(o){un.length=0;for(var c=o.getElementsByTagName("input"),u=c.length;u--;){var h=c[u];h.checked&&un.push(h)}}function fn(o){return setTimeout(o,0)}function ii(o){return clearTimeout(o)}cn&&w(document,"touchmove",function(o){(N.active||ct)&&o.cancelable&&o.preventDefault()}),N.utils={on:w,off:S,css:A,find:Tr,is:function(o,c){return!!j(o,c,o,!1)},extend:ua,throttle:Mr,closest:j,toggleClass:z,clone:kr,index:ge,nextTick:fn,cancelNextTick:ii,detectDirection:Br,getChild:at},N.get=function(o){return o[ue]},N.mount=function(){for(var o=arguments.length,c=new Array(o),u=0;u<o;u++)c[u]=arguments[u];c[0].constructor===Array&&(c=c[0]),c.forEach(function(h){if(!h.prototype||!h.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(h));h.utils&&(N.utils=t(t({},N.utils),h.utils)),Ot.mount(h)})},N.create=function(o,c){return new N(o,c)},N.version=l;var X=[],It,ri,si=!1,oi,ai,pn,Ht;function Ta(){function o(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var c in this)c.charAt(0)==="_"&&typeof this[c]=="function"&&(this[c]=this[c].bind(this))}return o.prototype={dragStarted:function(c){var u=c.originalEvent;this.sortable.nativeDraggable?w(document,"dragover",this._handleAutoScroll):this.options.supportPointer?w(document,"pointermove",this._handleFallbackAutoScroll):u.touches?w(document,"touchmove",this._handleFallbackAutoScroll):w(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(c){var u=c.originalEvent;!this.options.dragOverBubble&&!u.rootEl&&this._handleAutoScroll(u)},drop:function(){this.sortable.nativeDraggable?S(document,"dragover",this._handleAutoScroll):(S(document,"pointermove",this._handleFallbackAutoScroll),S(document,"touchmove",this._handleFallbackAutoScroll),S(document,"mousemove",this._handleFallbackAutoScroll)),Fr(),mn(),ca()},nulling:function(){pn=ri=It=si=Ht=oi=ai=null,X.length=0},_handleFallbackAutoScroll:function(c){this._handleAutoScroll(c,!0)},_handleAutoScroll:function(c,u){var h=this,p=(c.touches?c.touches[0]:c).clientX,m=(c.touches?c.touches[0]:c).clientY,b=document.elementFromPoint(p,m);if(pn=c,u||this.options.forceAutoScrollFallback||_||f||v){li(c,this.options,b,u);var C=ke(b,!0);si&&(!Ht||p!==oi||m!==ai)&&(Ht&&Fr(),Ht=setInterval(function(){var x=ke(document.elementFromPoint(p,m),!0);x!==C&&(C=x,mn()),li(c,h.options,x,u)},10),oi=p,ai=m)}else{if(!this.options.bubbleScroll||ke(b,!0)===Se()){mn();return}li(c,this.options,ke(b,!1),!1)}}},r(o,{pluginName:"scroll",initializeByDefault:!0})}function mn(){X.forEach(function(o){clearInterval(o.pid)}),X=[]}function Fr(){clearInterval(Ht)}var li=Mr(function(o,c,u,h){if(c.scroll){var p=(o.touches?o.touches[0]:o).clientX,m=(o.touches?o.touches[0]:o).clientY,b=c.scrollSensitivity,C=c.scrollSpeed,x=Se(),L=!1,T;ri!==u&&(ri=u,mn(),It=c.scroll,T=c.scrollFn,It===!0&&(It=ke(u,!0)));var M=0,q=It;do{var H=q,Z=J(H),R=Z.top,Ne=Z.bottom,se=Z.left,Me=Z.right,ne=Z.width,Ke=Z.height,Le=void 0,Je=void 0,Pt=H.scrollWidth,ht=H.scrollHeight,de=A(H),Pe=H.scrollLeft,gn=H.scrollTop;H===x?(Le=ne<Pt&&(de.overflowX==="auto"||de.overflowX==="scroll"||de.overflowX==="visible"),Je=Ke<ht&&(de.overflowY==="auto"||de.overflowY==="scroll"||de.overflowY==="visible")):(Le=ne<Pt&&(de.overflowX==="auto"||de.overflowX==="scroll"),Je=Ke<ht&&(de.overflowY==="auto"||de.overflowY==="scroll"));var De=Le&&(Math.abs(Me-p)<=b&&Pe+ne<Pt)-(Math.abs(se-p)<=b&&!!Pe),ft=Je&&(Math.abs(Ne-m)<=b&&gn+Ke<ht)-(Math.abs(R-m)<=b&&!!gn);if(!X[M])for(var Ze=0;Ze<=M;Ze++)X[Ze]||(X[Ze]={});(X[M].vx!=De||X[M].vy!=ft||X[M].el!==H)&&(X[M].el=H,X[M].vx=De,X[M].vy=ft,clearInterval(X[M].pid),(De!=0||ft!=0)&&(L=!0,X[M].pid=setInterval(function(){h&&this.layer===0&&N.active._onTouchMove(pn);var Re=X[this.layer].vy?X[this.layer].vy*C:0,Ge=X[this.layer].vx?X[this.layer].vx*C:0;typeof T=="function"&&T.call(N.dragged.parentNode[ue],Ge,Re,o,pn,X[this.layer].el)!=="continue"||Dr(X[this.layer].el,Ge,Re)}.bind({layer:M}),24))),M++}while(c.bubbleScroll&&q!==x&&(q=ke(q,!1)));si=L}},30),qr=function(o){var c=o.originalEvent,u=o.putSortable,h=o.dragEl,p=o.activeSortable,m=o.dispatchSortableEvent,b=o.hideGhostForTarget,C=o.unhideGhostForTarget;if(c){var x=u||p;b();var L=c.changedTouches&&c.changedTouches.length?c.changedTouches[0]:c,T=document.elementFromPoint(L.clientX,L.clientY);C(),x&&!x.el.contains(T)&&(m("spill"),this.onSpill({dragEl:h,putSortable:u}))}};function ui(){}ui.prototype={startIndex:null,dragStart:function(o){var c=o.oldDraggableIndex;this.startIndex=c},onSpill:function(o){var c=o.dragEl,u=o.putSortable;this.sortable.captureAnimationState(),u&&u.captureAnimationState();var h=at(this.sortable.el,this.startIndex,this.options);h?this.sortable.el.insertBefore(c,h):this.sortable.el.appendChild(c),this.sortable.animateAll(),u&&u.animateAll()},drop:qr},r(ui,{pluginName:"revertOnSpill"});function ci(){}ci.prototype={onSpill:function(o){var c=o.dragEl,u=o.putSortable,h=u||this.sortable;h.captureAnimationState(),c.parentNode&&c.parentNode.removeChild(c),h.animateAll()},drop:qr},r(ci,{pluginName:"removeOnSpill"}),N.mount(new Ta),N.mount(ci,ui);var Oa=N;if(window.Sortable=Oa,typeof window.Livewire>"u")throw"Livewire Sortable.js Plugin: window.Livewire is undefined. Make sure @livewireScripts is placed above this script include";window.Livewire.directive("sortable",(o,c,u)=>{if(c.modifiers.length>0)return;let h={};o.hasAttribute("wire:sortable.options")&&(h=new Function(`return ${o.getAttribute("wire:sortable.options")};`)()),o.livewire_sortable=window.Sortable.create(o,{...h,draggable:"[wire\\:sortable\\.item]",handle:o.querySelector("[wire\\:sortable\\.handle]")?"[wire\\:sortable\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable.item",group:{name:o.getAttribute("wire:sortable"),pull:!1,put:!1},store:{set:function(p){let m=p.toArray().map((b,C)=>({order:C+1,value:b}));u.call(c.method,m)}}})}),window.Livewire.directive("sortable-group",(o,c,u)=>{if(!c.modifiers.includes("item-group"))return;let h={};o.hasAttribute("wire:sortable-group.options")&&(h=new Function(`return ${o.getAttribute("wire:sortable-group.options")};`)()),o.livewire_sortable=window.Sortable.create(o,{...h,draggable:"[wire\\:sortable-group\\.item]",handle:o.querySelector("[wire\\:sortable-group\\.handle]")?"[wire\\:sortable-group\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable-group.item",group:{name:o.closest("[wire\\:sortable-group]").getAttribute("wire:sortable-group"),pull:!0,put:!0},onSort:()=>{let p=o.closest("[wire\\:sortable-group]"),m=Array.from(p.querySelectorAll("[wire\\:sortable-group\\.item-group]")).map((b,C)=>({order:C+1,value:b.getAttribute("wire:sortable-group.item-group"),items:b.livewire_sortable.toArray().map((x,L)=>({order:L+1,value:x}))}));u.call(p.getAttribute("wire:sortable-group"),m)}})})})();/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */var $i=!1,Fi=!1,it=[],qi=-1;function Su(e){Lu(e)}function Lu(e){it.includes(e)||it.push(e),Au()}function Us(e){let t=it.indexOf(e);t!==-1&&t>qi&&it.splice(t,1)}function Au(){!Fi&&!$i&&($i=!0,queueMicrotask(Tu))}function Tu(){$i=!1,Fi=!0;for(let e=0;e<it.length;e++)it[e](),qi=e;it.length=0,qi=-1,Fi=!1}var St,Lt,Zt,Xs,Vi=!0;function Ou(e){Vi=!1,e(),Vi=!0}function Nu(e){St=e.reactive,Zt=e.release,Lt=t=>e.effect(t,{scheduler:n=>{Vi?Su(n):n()}}),Xs=e.raw}function ws(e){Lt=e}function Mu(e){let t=()=>{};return[i=>{let r=Lt(i);return e._x_effects||(e._x_effects=new Set,e._x_runEffects=()=>{e._x_effects.forEach(s=>s())}),e._x_effects.add(r),t=()=>{r!==void 0&&(e._x_effects.delete(r),Zt(r))},r},()=>{t()}]}var Ks=[],Js=[],Zs=[];function Du(e){Zs.push(e)}function Gs(e,t){typeof t=="function"?(e._x_cleanups||(e._x_cleanups=[]),e._x_cleanups.push(t)):(t=e,Js.push(t))}function ku(e){Ks.push(e)}function Iu(e,t,n){e._x_attributeCleanups||(e._x_attributeCleanups={}),e._x_attributeCleanups[t]||(e._x_attributeCleanups[t]=[]),e._x_attributeCleanups[t].push(n)}function Qs(e,t){e._x_attributeCleanups&&Object.entries(e._x_attributeCleanups).forEach(([n,i])=>{(t===void 0||t.includes(n))&&(i.forEach(r=>r()),delete e._x_attributeCleanups[n])})}var ur=new MutationObserver(fr),cr=!1;function dr(){ur.observe(document,{subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0}),cr=!0}function eo(){Hu(),ur.disconnect(),cr=!1}var Ft=[],Ti=!1;function Hu(){Ft=Ft.concat(ur.takeRecords()),Ft.length&&!Ti&&(Ti=!0,queueMicrotask(()=>{Pu(),Ti=!1}))}function Pu(){fr(Ft),Ft.length=0}function G(e){if(!cr)return e();eo();let t=e();return dr(),t}var hr=!1,Tn=[];function Ru(){hr=!0}function Bu(){hr=!1,fr(Tn),Tn=[]}function fr(e){if(hr){Tn=Tn.concat(e);return}let t=[],n=[],i=new Map,r=new Map;for(let s=0;s<e.length;s++)if(!e[s].target._x_ignoreMutationObserver&&(e[s].type==="childList"&&(e[s].addedNodes.forEach(a=>a.nodeType===1&&t.push(a)),e[s].removedNodes.forEach(a=>a.nodeType===1&&n.push(a))),e[s].type==="attributes")){let a=e[s].target,l=e[s].attributeName,d=e[s].oldValue,f=()=>{i.has(a)||i.set(a,[]),i.get(a).push({name:l,value:a.getAttribute(l)})},_=()=>{r.has(a)||r.set(a,[]),r.get(a).push(l)};a.hasAttribute(l)&&d===null?f():a.hasAttribute(l)?(_(),f()):_()}r.forEach((s,a)=>{Qs(a,s)}),i.forEach((s,a)=>{Ks.forEach(l=>l(a,s))});for(let s of n)if(!t.includes(s)&&(Js.forEach(a=>a(s)),s._x_cleanups))for(;s._x_cleanups.length;)s._x_cleanups.pop()();t.forEach(s=>{s._x_ignoreSelf=!0,s._x_ignore=!0});for(let s of t)n.includes(s)||s.isConnected&&(delete s._x_ignoreSelf,delete s._x_ignore,Zs.forEach(a=>a(s)),s._x_ignore=!0,s._x_ignoreSelf=!0);t.forEach(s=>{delete s._x_ignoreSelf,delete s._x_ignore}),t=null,n=null,i=null,r=null}function to(e){return Qt(xt(e))}function Gt(e,t,n){return e._x_dataStack=[t,...xt(n||e)],()=>{e._x_dataStack=e._x_dataStack.filter(i=>i!==t)}}function bs(e,t){let n=e._x_dataStack[0];Object.entries(t).forEach(([i,r])=>{n[i]=r})}function xt(e){return e._x_dataStack?e._x_dataStack:typeof ShadowRoot=="function"&&e instanceof ShadowRoot?xt(e.host):e.parentNode?xt(e.parentNode):[]}function Qt(e){let t=new Proxy({},{ownKeys:()=>Array.from(new Set(e.flatMap(n=>Object.keys(n)))),has:(n,i)=>e.some(r=>r.hasOwnProperty(i)),get:(n,i)=>(e.find(r=>{if(r.hasOwnProperty(i)){let s=Object.getOwnPropertyDescriptor(r,i);if(s.get&&s.get._x_alreadyBound||s.set&&s.set._x_alreadyBound)return!0;if((s.get||s.set)&&s.enumerable){let a=s.get,l=s.set,d=s;a=a&&a.bind(t),l=l&&l.bind(t),a&&(a._x_alreadyBound=!0),l&&(l._x_alreadyBound=!0),Object.defineProperty(r,i,{...d,get:a,set:l})}return!0}return!1})||{})[i],set:(n,i,r)=>{let s=e.find(a=>a.hasOwnProperty(i));return s?s[i]=r:e[e.length-1][i]=r,!0}});return t}function no(e){let t=i=>typeof i=="object"&&!Array.isArray(i)&&i!==null,n=(i,r="")=>{Object.entries(Object.getOwnPropertyDescriptors(i)).forEach(([s,{value:a,enumerable:l}])=>{if(l===!1||a===void 0)return;let d=r===""?s:`${r}.${s}`;typeof a=="object"&&a!==null&&a._x_interceptor?i[s]=a.initialize(e,d,s):t(a)&&a!==i&&!(a instanceof Element)&&n(a,d)})};return n(e)}function io(e,t=()=>{}){let n={initialValue:void 0,_x_interceptor:!0,initialize(i,r,s){return e(this.initialValue,()=>zu(i,r),a=>Yi(i,r,a),r,s)}};return t(n),i=>{if(typeof i=="object"&&i!==null&&i._x_interceptor){let r=n.initialize.bind(n);n.initialize=(s,a,l)=>{let d=i.initialize(s,a,l);return n.initialValue=d,r(s,a,l)}}else n.initialValue=i;return n}}function zu(e,t){return t.split(".").reduce((n,i)=>n[i],e)}function Yi(e,t,n){if(typeof t=="string"&&(t=t.split(".")),t.length===1)e[t[0]]=n;else{if(t.length===0)throw error;return e[t[0]]||(e[t[0]]={}),Yi(e[t[0]],t.slice(1),n)}}var ro={};function Ce(e,t){ro[e]=t}function Wi(e,t){return Object.entries(ro).forEach(([n,i])=>{Object.defineProperty(e,`$${n}`,{get(){let[r,s]=uo(t);return r={interceptor:io,...r},Gs(t,s),i(t,r)},enumerable:!1})}),e}function ju(e,t,n,...i){try{return n(...i)}catch(r){Yt(r,e,t)}}function Yt(e,t,n=void 0){Object.assign(e,{el:t,expression:n}),console.warn(`Alpine Expression Error: ${e.message}

${n?'Expression: "'+n+`"

`:""}`,t),setTimeout(()=>{throw e},0)}var Sn=!0;function $u(e){let t=Sn;Sn=!1,e(),Sn=t}function vt(e,t,n={}){let i;return ae(e,t)(r=>i=r,n),i}function ae(...e){return so(...e)}var so=oo;function Fu(e){so=e}function oo(e,t){let n={};Wi(n,e);let i=[n,...xt(e)],r=typeof t=="function"?qu(i,t):Yu(i,t,e);return ju.bind(null,e,t,r)}function qu(e,t){return(n=()=>{},{scope:i={},params:r=[]}={})=>{let s=t.apply(Qt([i,...e]),r);On(n,s)}}var Oi={};function Vu(e,t){if(Oi[e])return Oi[e];let n=Object.getPrototypeOf(async function(){}).constructor,i=/^[\n\s]*if.*\(.*\)/.test(e)||/^(let|const)\s/.test(e)?`(async()=>{ ${e} })()`:e,s=(()=>{try{return new n(["__self","scope"],`with (scope) { __self.result = ${i} }; __self.finished = true; return __self.result;`)}catch(a){return Yt(a,t,e),Promise.resolve()}})();return Oi[e]=s,s}function Yu(e,t,n){let i=Vu(t,n);return(r=()=>{},{scope:s={},params:a=[]}={})=>{i.result=void 0,i.finished=!1;let l=Qt([s,...e]);if(typeof i=="function"){let d=i(i,l).catch(f=>Yt(f,n,t));i.finished?(On(r,i.result,l,a,n),i.result=void 0):d.then(f=>{On(r,f,l,a,n)}).catch(f=>Yt(f,n,t)).finally(()=>i.result=void 0)}}}function On(e,t,n,i,r){if(Sn&&typeof t=="function"){let s=t.apply(n,i);s instanceof Promise?s.then(a=>On(e,a,n,i)).catch(a=>Yt(a,r,t)):e(s)}else typeof t=="object"&&t instanceof Promise?t.then(s=>e(s)):e(t)}var pr="x-";function At(e=""){return pr+e}function Wu(e){pr=e}var Ui={};function K(e,t){return Ui[e]=t,{before(n){if(!Ui[n]){console.warn("Cannot find directive `${directive}`. `${name}` will use the default order of execution");return}const i=tt.indexOf(n);tt.splice(i>=0?i:tt.indexOf("DEFAULT"),0,e)}}}function mr(e,t,n){if(t=Array.from(t),e._x_virtualDirectives){let s=Object.entries(e._x_virtualDirectives).map(([l,d])=>({name:l,value:d})),a=ao(s);s=s.map(l=>a.find(d=>d.name===l.name)?{name:`x-bind:${l.name}`,value:`"${l.value}"`}:l),t=t.concat(s)}let i={};return t.map(fo((s,a)=>i[s]=a)).filter(mo).map(Ku(i,n)).sort(Ju).map(s=>Xu(e,s))}function ao(e){return Array.from(e).map(fo()).filter(t=>!mo(t))}var Xi=!1,$t=new Map,lo=Symbol();function Uu(e){Xi=!0;let t=Symbol();lo=t,$t.set(t,[]);let n=()=>{for(;$t.get(t).length;)$t.get(t).shift()();$t.delete(t)},i=()=>{Xi=!1,n()};e(n),i()}function uo(e){let t=[],n=l=>t.push(l),[i,r]=Mu(e);return t.push(r),[{Alpine:tn,effect:i,cleanup:n,evaluateLater:ae.bind(ae,e),evaluate:vt.bind(vt,e)},()=>t.forEach(l=>l())]}function Xu(e,t){let n=()=>{},i=Ui[t.type]||n,[r,s]=uo(e);Iu(e,t.original,s);let a=()=>{e._x_ignore||e._x_ignoreSelf||(i.inline&&i.inline(e,t,r),i=i.bind(i,e,t,r),Xi?$t.get(lo).push(i):i())};return a.runCleanups=s,a}var co=(e,t)=>({name:n,value:i})=>(n.startsWith(e)&&(n=n.replace(e,t)),{name:n,value:i}),ho=e=>e;function fo(e=()=>{}){return({name:t,value:n})=>{let{name:i,value:r}=po.reduce((s,a)=>a(s),{name:t,value:n});return i!==t&&e(i,t),{name:i,value:r}}}var po=[];function gr(e){po.push(e)}function mo({name:e}){return go().test(e)}var go=()=>new RegExp(`^${pr}([^:^.]+)\\b`);function Ku(e,t){return({name:n,value:i})=>{let r=n.match(go()),s=n.match(/:([a-zA-Z0-9\-:]+)/),a=n.match(/\.[^.\]]+(?=[^\]]*$)/g)||[],l=t||e[n]||n;return{type:r?r[1]:null,value:s?s[1]:null,modifiers:a.map(d=>d.replace(".","")),expression:i,original:l}}}var Ki="DEFAULT",tt=["ignore","ref","data","id","bind","init","for","model","modelable","transition","show","if",Ki,"teleport"];function Ju(e,t){let n=tt.indexOf(e.type)===-1?Ki:e.type,i=tt.indexOf(t.type)===-1?Ki:t.type;return tt.indexOf(n)-tt.indexOf(i)}function qt(e,t,n={}){e.dispatchEvent(new CustomEvent(t,{detail:n,bubbles:!0,composed:!0,cancelable:!0}))}function qe(e,t){if(typeof ShadowRoot=="function"&&e instanceof ShadowRoot){Array.from(e.children).forEach(r=>qe(r,t));return}let n=!1;if(t(e,()=>n=!0),n)return;let i=e.firstElementChild;for(;i;)qe(i,t),i=i.nextElementSibling}function Et(e,...t){console.warn(`Alpine Warning: ${e}`,...t)}function Zu(){document.body||Et("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?"),qt(document,"alpine:init"),qt(document,"alpine:initializing"),dr(),Du(t=>Ve(t,qe)),Gs(t=>Eo(t)),ku((t,n)=>{mr(t,n).forEach(i=>i())});let e=t=>!Rn(t.parentElement,!0);Array.from(document.querySelectorAll(bo())).filter(e).forEach(t=>{Ve(t)}),qt(document,"alpine:initialized")}var vr=[],vo=[];function wo(){return vr.map(e=>e())}function bo(){return vr.concat(vo).map(e=>e())}function yo(e){vr.push(e)}function _o(e){vo.push(e)}function Rn(e,t=!1){return Bn(e,n=>{if((t?bo():wo()).some(r=>n.matches(r)))return!0})}function Bn(e,t){if(e){if(t(e))return e;if(e._x_teleportBack&&(e=e._x_teleportBack),!!e.parentElement)return Bn(e.parentElement,t)}}function Gu(e){return wo().some(t=>e.matches(t))}var xo=[];function Qu(e){xo.push(e)}function Ve(e,t=qe,n=()=>{}){Uu(()=>{t(e,(i,r)=>{n(i,r),xo.forEach(s=>s(i,r)),mr(i,i.attributes).forEach(s=>s()),i._x_ignore&&r()})})}function Eo(e){qe(e,t=>Qs(t))}var Ji=[],wr=!1;function br(e=()=>{}){return queueMicrotask(()=>{wr||setTimeout(()=>{Zi()})}),new Promise(t=>{Ji.push(()=>{e(),t()})})}function Zi(){for(wr=!1;Ji.length;)Ji.shift()()}function ec(){wr=!0}function yr(e,t){return Array.isArray(t)?ys(e,t.join(" ")):typeof t=="object"&&t!==null?tc(e,t):typeof t=="function"?yr(e,t()):ys(e,t)}function ys(e,t){let n=r=>r.split(" ").filter(s=>!e.classList.contains(s)).filter(Boolean),i=r=>(e.classList.add(...r),()=>{e.classList.remove(...r)});return t=t===!0?t="":t||"",i(n(t))}function tc(e,t){let n=l=>l.split(" ").filter(Boolean),i=Object.entries(t).flatMap(([l,d])=>d?n(l):!1).filter(Boolean),r=Object.entries(t).flatMap(([l,d])=>d?!1:n(l)).filter(Boolean),s=[],a=[];return r.forEach(l=>{e.classList.contains(l)&&(e.classList.remove(l),a.push(l))}),i.forEach(l=>{e.classList.contains(l)||(e.classList.add(l),s.push(l))}),()=>{a.forEach(l=>e.classList.add(l)),s.forEach(l=>e.classList.remove(l))}}function zn(e,t){return typeof t=="object"&&t!==null?nc(e,t):ic(e,t)}function nc(e,t){let n={};return Object.entries(t).forEach(([i,r])=>{n[i]=e.style[i],i.startsWith("--")||(i=rc(i)),e.style.setProperty(i,r)}),setTimeout(()=>{e.style.length===0&&e.removeAttribute("style")}),()=>{zn(e,n)}}function ic(e,t){let n=e.getAttribute("style",t);return e.setAttribute("style",t),()=>{e.setAttribute("style",n||"")}}function rc(e){return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function Gi(e,t=()=>{}){let n=!1;return function(){n?t.apply(this,arguments):(n=!0,e.apply(this,arguments))}}K("transition",(e,{value:t,modifiers:n,expression:i},{evaluate:r})=>{typeof i=="function"&&(i=r(i)),i?sc(e,i,t):oc(e,n,t)});function sc(e,t,n){Co(e,yr,""),{enter:r=>{e._x_transition.enter.during=r},"enter-start":r=>{e._x_transition.enter.start=r},"enter-end":r=>{e._x_transition.enter.end=r},leave:r=>{e._x_transition.leave.during=r},"leave-start":r=>{e._x_transition.leave.start=r},"leave-end":r=>{e._x_transition.leave.end=r}}[n](t)}function oc(e,t,n){Co(e,zn);let i=!t.includes("in")&&!t.includes("out")&&!n,r=i||t.includes("in")||["enter"].includes(n),s=i||t.includes("out")||["leave"].includes(n);t.includes("in")&&!i&&(t=t.filter((S,B)=>B<t.indexOf("out"))),t.includes("out")&&!i&&(t=t.filter((S,B)=>B>t.indexOf("out")));let a=!t.includes("opacity")&&!t.includes("scale"),l=a||t.includes("opacity"),d=a||t.includes("scale"),f=l?0:1,_=d?Bt(t,"scale",95)/100:1,g=Bt(t,"delay",0),v=Bt(t,"origin","center"),y="opacity, transform",O=Bt(t,"duration",150)/1e3,P=Bt(t,"duration",75)/1e3,w="cubic-bezier(0.4, 0.0, 0.2, 1)";r&&(e._x_transition.enter.during={transformOrigin:v,transitionDelay:g,transitionProperty:y,transitionDuration:`${O}s`,transitionTimingFunction:w},e._x_transition.enter.start={opacity:f,transform:`scale(${_})`},e._x_transition.enter.end={opacity:1,transform:"scale(1)"}),s&&(e._x_transition.leave.during={transformOrigin:v,transitionDelay:g,transitionProperty:y,transitionDuration:`${P}s`,transitionTimingFunction:w},e._x_transition.leave.start={opacity:1,transform:"scale(1)"},e._x_transition.leave.end={opacity:f,transform:`scale(${_})`})}function Co(e,t,n={}){e._x_transition||(e._x_transition={enter:{during:n,start:n,end:n},leave:{during:n,start:n,end:n},in(i=()=>{},r=()=>{}){Qi(e,t,{during:this.enter.during,start:this.enter.start,end:this.enter.end},i,r)},out(i=()=>{},r=()=>{}){Qi(e,t,{during:this.leave.during,start:this.leave.start,end:this.leave.end},i,r)}})}window.Element.prototype._x_toggleAndCascadeWithTransitions=function(e,t,n,i){const r=document.visibilityState==="visible"?requestAnimationFrame:setTimeout;let s=()=>r(n);if(t){e._x_transition&&(e._x_transition.enter||e._x_transition.leave)?e._x_transition.enter&&(Object.entries(e._x_transition.enter.during).length||Object.entries(e._x_transition.enter.start).length||Object.entries(e._x_transition.enter.end).length)?e._x_transition.in(n):s():e._x_transition?e._x_transition.in(n):s();return}e._x_hidePromise=e._x_transition?new Promise((a,l)=>{e._x_transition.out(()=>{},()=>a(i)),e._x_transitioning.beforeCancel(()=>l({isFromCancelledTransition:!0}))}):Promise.resolve(i),queueMicrotask(()=>{let a=So(e);a?(a._x_hideChildren||(a._x_hideChildren=[]),a._x_hideChildren.push(e)):r(()=>{let l=d=>{let f=Promise.all([d._x_hidePromise,...(d._x_hideChildren||[]).map(l)]).then(([_])=>_());return delete d._x_hidePromise,delete d._x_hideChildren,f};l(e).catch(d=>{if(!d.isFromCancelledTransition)throw d})})})};function So(e){let t=e.parentNode;if(t)return t._x_hidePromise?t:So(t)}function Qi(e,t,{during:n,start:i,end:r}={},s=()=>{},a=()=>{}){if(e._x_transitioning&&e._x_transitioning.cancel(),Object.keys(n).length===0&&Object.keys(i).length===0&&Object.keys(r).length===0){s(),a();return}let l,d,f;ac(e,{start(){l=t(e,i)},during(){d=t(e,n)},before:s,end(){l(),f=t(e,r)},after:a,cleanup(){d(),f()}})}function ac(e,t){let n,i,r,s=Gi(()=>{G(()=>{n=!0,i||t.before(),r||(t.end(),Zi()),t.after(),e.isConnected&&t.cleanup(),delete e._x_transitioning})});e._x_transitioning={beforeCancels:[],beforeCancel(a){this.beforeCancels.push(a)},cancel:Gi(function(){for(;this.beforeCancels.length;)this.beforeCancels.shift()();s()}),finish:s},G(()=>{t.start(),t.during()}),ec(),requestAnimationFrame(()=>{if(n)return;let a=Number(getComputedStyle(e).transitionDuration.replace(/,.*/,"").replace("s",""))*1e3,l=Number(getComputedStyle(e).transitionDelay.replace(/,.*/,"").replace("s",""))*1e3;a===0&&(a=Number(getComputedStyle(e).animationDuration.replace("s",""))*1e3),G(()=>{t.before()}),i=!0,requestAnimationFrame(()=>{n||(G(()=>{t.end()}),Zi(),setTimeout(e._x_transitioning.finish,a+l),r=!0)})})}function Bt(e,t,n){if(e.indexOf(t)===-1)return n;const i=e[e.indexOf(t)+1];if(!i||t==="scale"&&isNaN(i))return n;if(t==="duration"){let r=i.match(/([0-9]+)ms/);if(r)return r[1]}return t==="origin"&&["top","right","left","center","bottom"].includes(e[e.indexOf(t)+2])?[i,e[e.indexOf(t)+2]].join(" "):i}var Wt=!1;function en(e,t=()=>{}){return(...n)=>Wt?t(...n):e(...n)}function lc(e){return(...t)=>Wt&&e(...t)}function uc(e,t){t._x_dataStack||(t._x_dataStack=e._x_dataStack),Wt=!0,dc(()=>{cc(t)}),Wt=!1}function cc(e){let t=!1;Ve(e,(i,r)=>{qe(i,(s,a)=>{if(t&&Gu(s))return a();t=!0,r(s,a)})})}function dc(e){let t=Lt;ws((n,i)=>{let r=t(n);return Zt(r),()=>{}}),e(),ws(t)}function Lo(e,t,n,i=[]){switch(e._x_bindings||(e._x_bindings=St({})),e._x_bindings[t]=n,t=i.includes("camel")?wc(t):t,t){case"value":hc(e,n);break;case"style":pc(e,n);break;case"class":fc(e,n);break;default:mc(e,t,n);break}}function hc(e,t){if(e.type==="radio")e.attributes.value===void 0&&(e.value=t),window.fromModel&&(e.checked=_s(e.value,t));else if(e.type==="checkbox")Number.isInteger(t)?e.value=t:!Number.isInteger(t)&&!Array.isArray(t)&&typeof t!="boolean"&&![null,void 0].includes(t)?e.value=String(t):Array.isArray(t)?e.checked=t.some(n=>_s(n,e.value)):e.checked=!!t;else if(e.tagName==="SELECT")vc(e,t);else{if(e.value===t)return;e.value=t}}function fc(e,t){e._x_undoAddedClasses&&e._x_undoAddedClasses(),e._x_undoAddedClasses=yr(e,t)}function pc(e,t){e._x_undoAddedStyles&&e._x_undoAddedStyles(),e._x_undoAddedStyles=zn(e,t)}function mc(e,t,n){[null,void 0,!1].includes(n)&&bc(t)?e.removeAttribute(t):(Ao(t)&&(n=t),gc(e,t,n))}function gc(e,t,n){e.getAttribute(t)!=n&&e.setAttribute(t,n)}function vc(e,t){const n=[].concat(t).map(i=>i+"");Array.from(e.options).forEach(i=>{i.selected=n.includes(i.value)})}function wc(e){return e.toLowerCase().replace(/-(\w)/g,(t,n)=>n.toUpperCase())}function _s(e,t){return e==t}function Ao(e){return["disabled","checked","required","readonly","hidden","open","selected","autofocus","itemscope","multiple","novalidate","allowfullscreen","allowpaymentrequest","formnovalidate","autoplay","controls","loop","muted","playsinline","default","ismap","reversed","async","defer","nomodule"].includes(e)}function bc(e){return!["aria-pressed","aria-checked","aria-expanded","aria-selected"].includes(e)}function yc(e,t,n){if(e._x_bindings&&e._x_bindings[t]!==void 0)return e._x_bindings[t];let i=e.getAttribute(t);return i===null?typeof n=="function"?n():n:i===""?!0:Ao(t)?!![t,"true"].includes(i):i}function To(e,t){var n;return function(){var i=this,r=arguments,s=function(){n=null,e.apply(i,r)};clearTimeout(n),n=setTimeout(s,t)}}function Oo(e,t){let n;return function(){let i=this,r=arguments;n||(e.apply(i,r),n=!0,setTimeout(()=>n=!1,t))}}function _c(e){e(tn)}var Qe={},xs=!1;function xc(e,t){if(xs||(Qe=St(Qe),xs=!0),t===void 0)return Qe[e];Qe[e]=t,typeof t=="object"&&t!==null&&t.hasOwnProperty("init")&&typeof t.init=="function"&&Qe[e].init(),no(Qe[e])}function Ec(){return Qe}var No={};function Cc(e,t){let n=typeof t!="function"?()=>t:t;e instanceof Element?Mo(e,n()):No[e]=n}function Sc(e){return Object.entries(No).forEach(([t,n])=>{Object.defineProperty(e,t,{get(){return(...i)=>n(...i)}})}),e}function Mo(e,t,n){let i=[];for(;i.length;)i.pop()();let r=Object.entries(t).map(([a,l])=>({name:a,value:l})),s=ao(r);r=r.map(a=>s.find(l=>l.name===a.name)?{name:`x-bind:${a.name}`,value:`"${a.value}"`}:a),mr(e,r,n).map(a=>{i.push(a.runCleanups),a()})}var Do={};function Lc(e,t){Do[e]=t}function Ac(e,t){return Object.entries(Do).forEach(([n,i])=>{Object.defineProperty(e,n,{get(){return(...r)=>i.bind(t)(...r)},enumerable:!1})}),e}var Tc={get reactive(){return St},get release(){return Zt},get effect(){return Lt},get raw(){return Xs},version:"3.12.0",flushAndStopDeferringMutations:Bu,dontAutoEvaluateFunctions:$u,disableEffectScheduling:Ou,startObservingMutations:dr,stopObservingMutations:eo,setReactivityEngine:Nu,closestDataStack:xt,skipDuringClone:en,onlyDuringClone:lc,addRootSelector:yo,addInitSelector:_o,addScopeToNode:Gt,deferMutations:Ru,mapAttributes:gr,evaluateLater:ae,interceptInit:Qu,setEvaluator:Fu,mergeProxies:Qt,findClosest:Bn,closestRoot:Rn,destroyTree:Eo,interceptor:io,transition:Qi,setStyles:zn,mutateDom:G,directive:K,throttle:Oo,debounce:To,evaluate:vt,initTree:Ve,nextTick:br,prefixed:At,prefix:Wu,plugin:_c,magic:Ce,store:xc,start:Zu,clone:uc,bound:yc,$data:to,walk:qe,data:Lc,bind:Cc},tn=Tc;function Oc(e,t){const n=Object.create(null),i=e.split(",");for(let r=0;r<i.length;r++)n[i[r]]=!0;return t?r=>!!n[r.toLowerCase()]:r=>!!n[r]}var Nc=Object.freeze({}),ko=Object.assign,Mc=Object.prototype.hasOwnProperty,jn=(e,t)=>Mc.call(e,t),rt=Array.isArray,Vt=e=>Io(e)==="[object Map]",Dc=e=>typeof e=="string",_r=e=>typeof e=="symbol",$n=e=>e!==null&&typeof e=="object",kc=Object.prototype.toString,Io=e=>kc.call(e),Ho=e=>Io(e).slice(8,-1),xr=e=>Dc(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Ic=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Hc=Ic(e=>e.charAt(0).toUpperCase()+e.slice(1)),Po=(e,t)=>e!==t&&(e===e||t===t),er=new WeakMap,zt=[],Ae,st=Symbol("iterate"),tr=Symbol("Map key iterate");function Pc(e){return e&&e._isEffect===!0}function Rc(e,t=Nc){Pc(e)&&(e=e.raw);const n=jc(e,t);return t.lazy||n(),n}function Bc(e){e.active&&(Ro(e),e.options.onStop&&e.options.onStop(),e.active=!1)}var zc=0;function jc(e,t){const n=function(){if(!n.active)return e();if(!zt.includes(n)){Ro(n);try{return Fc(),zt.push(n),Ae=n,e()}finally{zt.pop(),Bo(),Ae=zt[zt.length-1]}}};return n.id=zc++,n.allowRecurse=!!t.allowRecurse,n._isEffect=!0,n.active=!0,n.raw=e,n.deps=[],n.options=t,n}function Ro(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}var Ct=!0,Er=[];function $c(){Er.push(Ct),Ct=!1}function Fc(){Er.push(Ct),Ct=!0}function Bo(){const e=Er.pop();Ct=e===void 0?!0:e}function Ee(e,t,n){if(!Ct||Ae===void 0)return;let i=er.get(e);i||er.set(e,i=new Map);let r=i.get(n);r||i.set(n,r=new Set),r.has(Ae)||(r.add(Ae),Ae.deps.push(r),Ae.options.onTrack&&Ae.options.onTrack({effect:Ae,target:e,type:t,key:n}))}function Ye(e,t,n,i,r,s){const a=er.get(e);if(!a)return;const l=new Set,d=_=>{_&&_.forEach(g=>{(g!==Ae||g.allowRecurse)&&l.add(g)})};if(t==="clear")a.forEach(d);else if(n==="length"&&rt(e))a.forEach((_,g)=>{(g==="length"||g>=i)&&d(_)});else switch(n!==void 0&&d(a.get(n)),t){case"add":rt(e)?xr(n)&&d(a.get("length")):(d(a.get(st)),Vt(e)&&d(a.get(tr)));break;case"delete":rt(e)||(d(a.get(st)),Vt(e)&&d(a.get(tr)));break;case"set":Vt(e)&&d(a.get(st));break}const f=_=>{_.options.onTrigger&&_.options.onTrigger({effect:_,target:e,key:n,type:t,newValue:i,oldValue:r,oldTarget:s}),_.options.scheduler?_.options.scheduler(_):_()};l.forEach(f)}var qc=Oc("__proto__,__v_isRef,__isVue"),zo=new Set(Object.getOwnPropertyNames(Symbol).map(e=>Symbol[e]).filter(_r)),Vc=Fn(),Yc=Fn(!1,!0),Wc=Fn(!0),Uc=Fn(!0,!0),Nn={};["includes","indexOf","lastIndexOf"].forEach(e=>{const t=Array.prototype[e];Nn[e]=function(...n){const i=V(this);for(let s=0,a=this.length;s<a;s++)Ee(i,"get",s+"");const r=t.apply(i,n);return r===-1||r===!1?t.apply(i,n.map(V)):r}});["push","pop","shift","unshift","splice"].forEach(e=>{const t=Array.prototype[e];Nn[e]=function(...n){$c();const i=t.apply(this,n);return Bo(),i}});function Fn(e=!1,t=!1){return function(i,r,s){if(r==="__v_isReactive")return!e;if(r==="__v_isReadonly")return e;if(r==="__v_raw"&&s===(e?t?id:ea:t?nd:Qo).get(i))return i;const a=rt(i);if(!e&&a&&jn(Nn,r))return Reflect.get(Nn,r,s);const l=Reflect.get(i,r,s);return(_r(r)?zo.has(r):qc(r))||(e||Ee(i,"get",r),t)?l:nr(l)?!a||!xr(r)?l.value:l:$n(l)?e?ta(l):Ar(l):l}}var Xc=jo(),Kc=jo(!0);function jo(e=!1){return function(n,i,r,s){let a=n[i];if(!e&&(r=V(r),a=V(a),!rt(n)&&nr(a)&&!nr(r)))return a.value=r,!0;const l=rt(n)&&xr(i)?Number(i)<n.length:jn(n,i),d=Reflect.set(n,i,r,s);return n===V(s)&&(l?Po(r,a)&&Ye(n,"set",i,r,a):Ye(n,"add",i,r)),d}}function Jc(e,t){const n=jn(e,t),i=e[t],r=Reflect.deleteProperty(e,t);return r&&n&&Ye(e,"delete",t,void 0,i),r}function Zc(e,t){const n=Reflect.has(e,t);return(!_r(t)||!zo.has(t))&&Ee(e,"has",t),n}function Gc(e){return Ee(e,"iterate",rt(e)?"length":st),Reflect.ownKeys(e)}var $o={get:Vc,set:Xc,deleteProperty:Jc,has:Zc,ownKeys:Gc},Fo={get:Wc,set(e,t){return console.warn(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0},deleteProperty(e,t){return console.warn(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0}};ko({},$o,{get:Yc,set:Kc});ko({},Fo,{get:Uc});var Cr=e=>$n(e)?Ar(e):e,Sr=e=>$n(e)?ta(e):e,Lr=e=>e,qn=e=>Reflect.getPrototypeOf(e);function Vn(e,t,n=!1,i=!1){e=e.__v_raw;const r=V(e),s=V(t);t!==s&&!n&&Ee(r,"get",t),!n&&Ee(r,"get",s);const{has:a}=qn(r),l=i?Lr:n?Sr:Cr;if(a.call(r,t))return l(e.get(t));if(a.call(r,s))return l(e.get(s));e!==r&&e.get(t)}function Yn(e,t=!1){const n=this.__v_raw,i=V(n),r=V(e);return e!==r&&!t&&Ee(i,"has",e),!t&&Ee(i,"has",r),e===r?n.has(e):n.has(e)||n.has(r)}function Wn(e,t=!1){return e=e.__v_raw,!t&&Ee(V(e),"iterate",st),Reflect.get(e,"size",e)}function qo(e){e=V(e);const t=V(this);return qn(t).has.call(t,e)||(t.add(e),Ye(t,"add",e,e)),this}function Vo(e,t){t=V(t);const n=V(this),{has:i,get:r}=qn(n);let s=i.call(n,e);s?Go(n,i,e):(e=V(e),s=i.call(n,e));const a=r.call(n,e);return n.set(e,t),s?Po(t,a)&&Ye(n,"set",e,t,a):Ye(n,"add",e,t),this}function Yo(e){const t=V(this),{has:n,get:i}=qn(t);let r=n.call(t,e);r?Go(t,n,e):(e=V(e),r=n.call(t,e));const s=i?i.call(t,e):void 0,a=t.delete(e);return r&&Ye(t,"delete",e,void 0,s),a}function Wo(){const e=V(this),t=e.size!==0,n=Vt(e)?new Map(e):new Set(e),i=e.clear();return t&&Ye(e,"clear",void 0,void 0,n),i}function Un(e,t){return function(i,r){const s=this,a=s.__v_raw,l=V(a),d=t?Lr:e?Sr:Cr;return!e&&Ee(l,"iterate",st),a.forEach((f,_)=>i.call(r,d(f),d(_),s))}}function yn(e,t,n){return function(...i){const r=this.__v_raw,s=V(r),a=Vt(s),l=e==="entries"||e===Symbol.iterator&&a,d=e==="keys"&&a,f=r[e](...i),_=n?Lr:t?Sr:Cr;return!t&&Ee(s,"iterate",d?tr:st),{next(){const{value:g,done:v}=f.next();return v?{value:g,done:v}:{value:l?[_(g[0]),_(g[1])]:_(g),done:v}},[Symbol.iterator](){return this}}}}function Fe(e){return function(...t){{const n=t[0]?`on key "${t[0]}" `:"";console.warn(`${Hc(e)} operation ${n}failed: target is readonly.`,V(this))}return e==="delete"?!1:this}}var Uo={get(e){return Vn(this,e)},get size(){return Wn(this)},has:Yn,add:qo,set:Vo,delete:Yo,clear:Wo,forEach:Un(!1,!1)},Xo={get(e){return Vn(this,e,!1,!0)},get size(){return Wn(this)},has:Yn,add:qo,set:Vo,delete:Yo,clear:Wo,forEach:Un(!1,!0)},Ko={get(e){return Vn(this,e,!0)},get size(){return Wn(this,!0)},has(e){return Yn.call(this,e,!0)},add:Fe("add"),set:Fe("set"),delete:Fe("delete"),clear:Fe("clear"),forEach:Un(!0,!1)},Jo={get(e){return Vn(this,e,!0,!0)},get size(){return Wn(this,!0)},has(e){return Yn.call(this,e,!0)},add:Fe("add"),set:Fe("set"),delete:Fe("delete"),clear:Fe("clear"),forEach:Un(!0,!0)},Qc=["keys","values","entries",Symbol.iterator];Qc.forEach(e=>{Uo[e]=yn(e,!1,!1),Ko[e]=yn(e,!0,!1),Xo[e]=yn(e,!1,!0),Jo[e]=yn(e,!0,!0)});function Zo(e,t){const n=t?e?Jo:Xo:e?Ko:Uo;return(i,r,s)=>r==="__v_isReactive"?!e:r==="__v_isReadonly"?e:r==="__v_raw"?i:Reflect.get(jn(n,r)&&r in i?n:i,r,s)}var ed={get:Zo(!1,!1)},td={get:Zo(!0,!1)};function Go(e,t,n){const i=V(n);if(i!==n&&t.call(e,i)){const r=Ho(e);console.warn(`Reactive ${r} contains both the raw and reactive versions of the same object${r==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}var Qo=new WeakMap,nd=new WeakMap,ea=new WeakMap,id=new WeakMap;function rd(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function sd(e){return e.__v_skip||!Object.isExtensible(e)?0:rd(Ho(e))}function Ar(e){return e&&e.__v_isReadonly?e:na(e,!1,$o,ed,Qo)}function ta(e){return na(e,!0,Fo,td,ea)}function na(e,t,n,i,r){if(!$n(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&!(t&&e.__v_isReactive))return e;const s=r.get(e);if(s)return s;const a=sd(e);if(a===0)return e;const l=new Proxy(e,a===2?i:n);return r.set(e,l),l}function V(e){return e&&V(e.__v_raw)||e}function nr(e){return!!(e&&e.__v_isRef===!0)}Ce("nextTick",()=>br);Ce("dispatch",e=>qt.bind(qt,e));Ce("watch",(e,{evaluateLater:t,effect:n})=>(i,r)=>{let s=t(i),a=!0,l,d=n(()=>s(f=>{JSON.stringify(f),a?l=f:queueMicrotask(()=>{r(f,l),l=f}),a=!1}));e._x_effects.delete(d)});Ce("store",Ec);Ce("data",e=>to(e));Ce("root",e=>Rn(e));Ce("refs",e=>(e._x_refs_proxy||(e._x_refs_proxy=Qt(od(e))),e._x_refs_proxy));function od(e){let t=[],n=e;for(;n;)n._x_refs&&t.push(n._x_refs),n=n.parentNode;return t}var Ni={};function ia(e){return Ni[e]||(Ni[e]=0),++Ni[e]}function ad(e,t){return Bn(e,n=>{if(n._x_ids&&n._x_ids[t])return!0})}function ld(e,t){e._x_ids||(e._x_ids={}),e._x_ids[t]||(e._x_ids[t]=ia(t))}Ce("id",e=>(t,n=null)=>{let i=ad(e,t),r=i?i._x_ids[t]:ia(t);return n?`${t}-${r}-${n}`:`${t}-${r}`});Ce("el",e=>e);ra("Focus","focus","focus");ra("Persist","persist","persist");function ra(e,t,n){Ce(t,i=>Et(`You can't use [$${directiveName}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${n}`,i))}function ud({get:e,set:t},{get:n,set:i}){let r=!0,s,a,l=Lt(()=>{let d,f;r?(d=e(),i(d),f=n(),r=!1):(d=e(),f=n(),a=JSON.stringify(d),JSON.stringify(f),a!==s?(f=n(),i(d),f=d):(t(f),d=f)),s=JSON.stringify(d),JSON.stringify(f)});return()=>{Zt(l)}}K("modelable",(e,{expression:t},{effect:n,evaluateLater:i,cleanup:r})=>{let s=i(t),a=()=>{let _;return s(g=>_=g),_},l=i(`${t} = __placeholder`),d=_=>l(()=>{},{scope:{__placeholder:_}}),f=a();d(f),queueMicrotask(()=>{if(!e._x_model)return;e._x_removeModelListeners.default();let _=e._x_model.get,g=e._x_model.set,v=ud({get(){return _()},set(y){g(y)}},{get(){return a()},set(y){d(y)}});r(v)})});var cd=document.createElement("div");K("teleport",(e,{modifiers:t,expression:n},{cleanup:i})=>{e.tagName.toLowerCase()!=="template"&&Et("x-teleport can only be used on a <template> tag",e);let r=en(()=>document.querySelector(n),()=>cd)();r||Et(`Cannot find x-teleport element for selector: "${n}"`);let s=e.content.cloneNode(!0).firstElementChild;e._x_teleport=s,s._x_teleportBack=e,e._x_forwardEvents&&e._x_forwardEvents.forEach(a=>{s.addEventListener(a,l=>{l.stopPropagation(),e.dispatchEvent(new l.constructor(l.type,l))})}),Gt(s,{},e),G(()=>{t.includes("prepend")?r.parentNode.insertBefore(s,r):t.includes("append")?r.parentNode.insertBefore(s,r.nextSibling):r.appendChild(s),Ve(s),s._x_ignore=!0}),i(()=>s.remove())});var sa=()=>{};sa.inline=(e,{modifiers:t},{cleanup:n})=>{t.includes("self")?e._x_ignoreSelf=!0:e._x_ignore=!0,n(()=>{t.includes("self")?delete e._x_ignoreSelf:delete e._x_ignore})};K("ignore",sa);K("effect",(e,{expression:t},{effect:n})=>n(ae(e,t)));function ir(e,t,n,i){let r=e,s=d=>i(d),a={},l=(d,f)=>_=>f(d,_);if(n.includes("dot")&&(t=dd(t)),n.includes("camel")&&(t=hd(t)),n.includes("passive")&&(a.passive=!0),n.includes("capture")&&(a.capture=!0),n.includes("window")&&(r=window),n.includes("document")&&(r=document),n.includes("prevent")&&(s=l(s,(d,f)=>{f.preventDefault(),d(f)})),n.includes("stop")&&(s=l(s,(d,f)=>{f.stopPropagation(),d(f)})),n.includes("self")&&(s=l(s,(d,f)=>{f.target===e&&d(f)})),(n.includes("away")||n.includes("outside"))&&(r=document,s=l(s,(d,f)=>{e.contains(f.target)||f.target.isConnected!==!1&&(e.offsetWidth<1&&e.offsetHeight<1||e._x_isShown!==!1&&d(f))})),n.includes("once")&&(s=l(s,(d,f)=>{d(f),r.removeEventListener(t,s,a)})),s=l(s,(d,f)=>{pd(t)&&md(f,n)||d(f)}),n.includes("debounce")){let d=n[n.indexOf("debounce")+1]||"invalid-wait",f=Mn(d.split("ms")[0])?Number(d.split("ms")[0]):250;s=To(s,f)}if(n.includes("throttle")){let d=n[n.indexOf("throttle")+1]||"invalid-wait",f=Mn(d.split("ms")[0])?Number(d.split("ms")[0]):250;s=Oo(s,f)}return r.addEventListener(t,s,a),()=>{r.removeEventListener(t,s,a)}}function dd(e){return e.replace(/-/g,".")}function hd(e){return e.toLowerCase().replace(/-(\w)/g,(t,n)=>n.toUpperCase())}function Mn(e){return!Array.isArray(e)&&!isNaN(e)}function fd(e){return[" ","_"].includes(e)?e:e.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[_\s]/,"-").toLowerCase()}function pd(e){return["keydown","keyup"].includes(e)}function md(e,t){let n=t.filter(s=>!["window","document","prevent","stop","once","capture"].includes(s));if(n.includes("debounce")){let s=n.indexOf("debounce");n.splice(s,Mn((n[s+1]||"invalid-wait").split("ms")[0])?2:1)}if(n.includes("throttle")){let s=n.indexOf("throttle");n.splice(s,Mn((n[s+1]||"invalid-wait").split("ms")[0])?2:1)}if(n.length===0||n.length===1&&Es(e.key).includes(n[0]))return!1;const r=["ctrl","shift","alt","meta","cmd","super"].filter(s=>n.includes(s));return n=n.filter(s=>!r.includes(s)),!(r.length>0&&r.filter(a=>((a==="cmd"||a==="super")&&(a="meta"),e[`${a}Key`])).length===r.length&&Es(e.key).includes(n[0]))}function Es(e){if(!e)return[];e=fd(e);let t={ctrl:"control",slash:"/",space:" ",spacebar:" ",cmd:"meta",esc:"escape",up:"arrow-up",down:"arrow-down",left:"arrow-left",right:"arrow-right",period:".",equal:"=",minus:"-",underscore:"_"};return t[e]=e,Object.keys(t).map(n=>{if(t[n]===e)return n}).filter(n=>n)}K("model",(e,{modifiers:t,expression:n},{effect:i,cleanup:r})=>{let s=e;t.includes("parent")&&(s=e.parentNode);let a=ae(s,n),l;typeof n=="string"?l=ae(s,`${n} = __placeholder`):typeof n=="function"&&typeof n()=="string"?l=ae(s,`${n()} = __placeholder`):l=()=>{};let d=()=>{let v;return a(y=>v=y),Cs(v)?v.get():v},f=v=>{let y;a(O=>y=O),Cs(y)?y.set(v):l(()=>{},{scope:{__placeholder:v}})};t.includes("fill")&&e.hasAttribute("value")&&(d()===null||d()==="")&&f(e.value),typeof n=="string"&&e.type==="radio"&&G(()=>{e.hasAttribute("name")||e.setAttribute("name",n)});var _=e.tagName.toLowerCase()==="select"||["checkbox","radio"].includes(e.type)||t.includes("lazy")?"change":"input";let g=Wt?()=>{}:ir(e,_,t,v=>{f(gd(e,t,v,d()))});if(e._x_removeModelListeners||(e._x_removeModelListeners={}),e._x_removeModelListeners.default=g,r(()=>e._x_removeModelListeners.default()),e.form){let v=ir(e.form,"reset",[],y=>{br(()=>e._x_model&&e._x_model.set(e.value))});r(()=>v())}e._x_model={get(){return d()},set(v){f(v)}},e._x_forceModelUpdate=v=>{v=v===void 0?d():v,v===void 0&&typeof n=="string"&&n.match(/\./)&&(v=""),window.fromModel=!0,G(()=>Lo(e,"value",v)),delete window.fromModel},i(()=>{let v=d();t.includes("unintrusive")&&document.activeElement.isSameNode(e)||e._x_forceModelUpdate(v)})});function gd(e,t,n,i){return G(()=>{if(n instanceof CustomEvent&&n.detail!==void 0)return typeof n.detail<"u"?n.detail:n.target.value;if(e.type==="checkbox")if(Array.isArray(i)){let r=t.includes("number")?Mi(n.target.value):n.target.value;return n.target.checked?i.concat([r]):i.filter(s=>!vd(s,r))}else return n.target.checked;else{if(e.tagName.toLowerCase()==="select"&&e.multiple)return t.includes("number")?Array.from(n.target.selectedOptions).map(r=>{let s=r.value||r.text;return Mi(s)}):Array.from(n.target.selectedOptions).map(r=>r.value||r.text);{let r=n.target.value;return t.includes("number")?Mi(r):t.includes("trim")?r.trim():r}}})}function Mi(e){let t=e?parseFloat(e):null;return wd(t)?t:e}function vd(e,t){return e==t}function wd(e){return!Array.isArray(e)&&!isNaN(e)}function Cs(e){return e!==null&&typeof e=="object"&&typeof e.get=="function"&&typeof e.set=="function"}K("cloak",e=>queueMicrotask(()=>G(()=>e.removeAttribute(At("cloak")))));_o(()=>`[${At("init")}]`);K("init",en((e,{expression:t},{evaluate:n})=>typeof t=="string"?!!t.trim()&&n(t,{},!1):n(t,{},!1)));K("text",(e,{expression:t},{effect:n,evaluateLater:i})=>{let r=i(t);n(()=>{r(s=>{G(()=>{e.textContent=s})})})});K("html",(e,{expression:t},{effect:n,evaluateLater:i})=>{let r=i(t);n(()=>{r(s=>{G(()=>{e.innerHTML=s,e._x_ignoreSelf=!0,Ve(e),delete e._x_ignoreSelf})})})});gr(co(":",ho(At("bind:"))));K("bind",(e,{value:t,modifiers:n,expression:i,original:r},{effect:s})=>{if(!t){let l={};Sc(l),ae(e,i)(f=>{Mo(e,f,r)},{scope:l});return}if(t==="key")return bd(e,i);let a=ae(e,i);s(()=>a(l=>{l===void 0&&typeof i=="string"&&i.match(/\./)&&(l=""),G(()=>Lo(e,t,l,n))}))});function bd(e,t){e._x_keyExpression=t}yo(()=>`[${At("data")}]`);K("data",en((e,{expression:t},{cleanup:n})=>{t=t===""?"{}":t;let i={};Wi(i,e);let r={};Ac(r,i);let s=vt(e,t,{scope:r});(s===void 0||s===!0)&&(s={}),Wi(s,e);let a=St(s);no(a);let l=Gt(e,a);a.init&&vt(e,a.init),n(()=>{a.destroy&&vt(e,a.destroy),l()})}));K("show",(e,{modifiers:t,expression:n},{effect:i})=>{let r=ae(e,n);e._x_doHide||(e._x_doHide=()=>{G(()=>{e.style.setProperty("display","none",t.includes("important")?"important":void 0)})}),e._x_doShow||(e._x_doShow=()=>{G(()=>{e.style.length===1&&e.style.display==="none"?e.removeAttribute("style"):e.style.removeProperty("display")})});let s=()=>{e._x_doHide(),e._x_isShown=!1},a=()=>{e._x_doShow(),e._x_isShown=!0},l=()=>setTimeout(a),d=Gi(g=>g?a():s(),g=>{typeof e._x_toggleAndCascadeWithTransitions=="function"?e._x_toggleAndCascadeWithTransitions(e,g,a,s):g?l():s()}),f,_=!0;i(()=>r(g=>{!_&&g===f||(t.includes("immediate")&&(g?l():s()),d(g),f=g,_=!1)}))});K("for",(e,{expression:t},{effect:n,cleanup:i})=>{let r=_d(t),s=ae(e,r.items),a=ae(e,e._x_keyExpression||"index");e._x_prevKeys=[],e._x_lookup={},n(()=>yd(e,r,s,a)),i(()=>{Object.values(e._x_lookup).forEach(l=>l.remove()),delete e._x_prevKeys,delete e._x_lookup})});function yd(e,t,n,i){let r=a=>typeof a=="object"&&!Array.isArray(a),s=e;n(a=>{xd(a)&&a>=0&&(a=Array.from(Array(a).keys(),w=>w+1)),a===void 0&&(a=[]);let l=e._x_lookup,d=e._x_prevKeys,f=[],_=[];if(r(a))a=Object.entries(a).map(([w,S])=>{let B=Ss(t,S,w,a);i(U=>_.push(U),{scope:{index:w,...B}}),f.push(B)});else for(let w=0;w<a.length;w++){let S=Ss(t,a[w],w,a);i(B=>_.push(B),{scope:{index:w,...S}}),f.push(S)}let g=[],v=[],y=[],O=[];for(let w=0;w<d.length;w++){let S=d[w];_.indexOf(S)===-1&&y.push(S)}d=d.filter(w=>!y.includes(w));let P="template";for(let w=0;w<_.length;w++){let S=_[w],B=d.indexOf(S);if(B===-1)d.splice(w,0,S),g.push([P,w]);else if(B!==w){let U=d.splice(w,1)[0],j=d.splice(B-1,1)[0];d.splice(w,0,j),d.splice(B,0,U),v.push([U,j])}else O.push(S);P=S}for(let w=0;w<y.length;w++){let S=y[w];l[S]._x_effects&&l[S]._x_effects.forEach(Us),l[S].remove(),l[S]=null,delete l[S]}for(let w=0;w<v.length;w++){let[S,B]=v[w],U=l[S],j=l[B],pe=document.createElement("div");G(()=>{j.after(pe),U.after(j),j._x_currentIfEl&&j.after(j._x_currentIfEl),pe.before(U),U._x_currentIfEl&&U.after(U._x_currentIfEl),pe.remove()}),bs(j,f[_.indexOf(B)])}for(let w=0;w<g.length;w++){let[S,B]=g[w],U=S==="template"?s:l[S];U._x_currentIfEl&&(U=U._x_currentIfEl);let j=f[B],pe=_[B],z=document.importNode(s.content,!0).firstElementChild;Gt(z,St(j),s),G(()=>{U.after(z),Ve(z)}),typeof pe=="object"&&Et("x-for key cannot be an object, it must be a string or an integer",s),l[pe]=z}for(let w=0;w<O.length;w++)bs(l[O[w]],f[_.indexOf(O[w])]);s._x_prevKeys=_})}function _d(e){let t=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,n=/^\s*\(|\)\s*$/g,i=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,r=e.match(i);if(!r)return;let s={};s.items=r[2].trim();let a=r[1].replace(n,"").trim(),l=a.match(t);return l?(s.item=a.replace(t,"").trim(),s.index=l[1].trim(),l[2]&&(s.collection=l[2].trim())):s.item=a,s}function Ss(e,t,n,i){let r={};return/^\[.*\]$/.test(e.item)&&Array.isArray(t)?e.item.replace("[","").replace("]","").split(",").map(a=>a.trim()).forEach((a,l)=>{r[a]=t[l]}):/^\{.*\}$/.test(e.item)&&!Array.isArray(t)&&typeof t=="object"?e.item.replace("{","").replace("}","").split(",").map(a=>a.trim()).forEach(a=>{r[a]=t[a]}):r[e.item]=t,e.index&&(r[e.index]=n),e.collection&&(r[e.collection]=i),r}function xd(e){return!Array.isArray(e)&&!isNaN(e)}function oa(){}oa.inline=(e,{expression:t},{cleanup:n})=>{let i=Rn(e);i._x_refs||(i._x_refs={}),i._x_refs[t]=e,n(()=>delete i._x_refs[t])};K("ref",oa);K("if",(e,{expression:t},{effect:n,cleanup:i})=>{let r=ae(e,t),s=()=>{if(e._x_currentIfEl)return e._x_currentIfEl;let l=e.content.cloneNode(!0).firstElementChild;return Gt(l,{},e),G(()=>{e.after(l),Ve(l)}),e._x_currentIfEl=l,e._x_undoIf=()=>{qe(l,d=>{d._x_effects&&d._x_effects.forEach(Us)}),l.remove(),delete e._x_currentIfEl},l},a=()=>{e._x_undoIf&&(e._x_undoIf(),delete e._x_undoIf)};n(()=>r(l=>{l?s():a()})),i(()=>e._x_undoIf&&e._x_undoIf())});K("id",(e,{expression:t},{evaluate:n})=>{n(t).forEach(r=>ld(e,r))});gr(co("@",ho(At("on:"))));K("on",en((e,{value:t,modifiers:n,expression:i},{cleanup:r})=>{let s=i?ae(e,i):()=>{};e.tagName.toLowerCase()==="template"&&(e._x_forwardEvents||(e._x_forwardEvents=[]),e._x_forwardEvents.includes(t)||e._x_forwardEvents.push(t));let a=ir(e,t,n,l=>{s(()=>{},{scope:{$event:l},params:[l]})});r(()=>a())}));Xn("Collapse","collapse","collapse");Xn("Intersect","intersect","intersect");Xn("Focus","trap","focus");Xn("Mask","mask","mask");function Xn(e,t,n){K(t,i=>Et(`You can't use [x-${t}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${n}`,i))}tn.setEvaluator(oo);tn.setReactivityEngine({reactive:Ar,effect:Rc,release:Bc,raw:V});var Ed=tn,aa=Ed;mw.app=new Ia;mw.app.register("commands",bu);mw.app.register("modules",yu);mw.app.register("layouts",_u);mw.app.register("keyboard",xu);mw.app.register("iconPicker",Eu);mw.app.register("linkPicker",Cu);window.Alpine=aa;aa.start();export{Sd as E,gu as L,kn as M,An as a,Ld as l};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
