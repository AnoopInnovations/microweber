import{o as ee,c as te,a as P,_ as ze,n as Le,e as we,w as ne,v as Pr,t as yt,F as oe,f as Ln,k as Pe,h as sl,r as ke,d as r,C as pa,m as ka,D as je,I as co,g as Rt,j as Ze,l as Qn,J as vo,K as Y,L as Rl,M as Ar,b as Br,N as Rr,O as gt,P as h,Q as tt,q as Sa,R as Hn,p as Er,S as ui,U as Qt,V as Lr,s as W,W as Ve,X as K,Y as $e,z as ot,y as Z,Z as Xe,$ as wa,a0 as Mt,x as nt,a1 as Ca,a2 as $r,a3 as Mr,u as Je,A as xe,a4 as Fr,T as Et,a5 as xa,a6 as jn,a7 as O,a8 as Or,a9 as Dr,aa as Nr,ab as zr,ac as Hr,E as jr,G as Ur,H as Gr}from"./mitt-12ab5c85.js";const Wr=["innerHTML"],Yr={class:"form-control-live-edit-label-wrapper"},Kr=["value"],qr=P("span",{class:"form-control-live-edit-bottom-effect"},null,-1),Va={__name:"Input",props:{modelValue:String,label:String},emits:["update:modelValue"],setup(e){return(t,n)=>(ee(),te("div",null,[P("label",{class:"live-edit-label",innerHTML:e.label},null,8,Wr),P("div",null,[P("label",Yr,[P("input",{value:e.modelValue,onInput:n[0]||(n[0]=l=>t.$emit("update:modelValue",l.target.value)),class:"form-control-live-edit-input"},null,40,Kr),qr])])]))}},Xr={props:{textAlign:String},methods:{setTextAlignment(e){this.$emit("update:textAlign",e)}}},Zr={class:"form-control-live-edit-label-wrapper d-flex align-items-center"},Jr=P("label",{class:"live-edit-label px-0 col-4"},"Align",-1),Qr={class:"s-field-content"},eu={class:"text-align"},tu=P("span",{class:"mdi mdi-format-align-left"},null,-1),nu=[tu],lu=P("span",{class:"mdi mdi-format-align-center"},null,-1),au=[lu],ou=P("span",{class:"mdi mdi-format-align-right"},null,-1),iu=[ou],su=P("span",{class:"mdi mdi-format-align-justify"},null,-1),ru=[su];function uu(e,t,n,l,a,o){return ee(),te("div",Zr,[Jr,P("div",Qr,[P("div",eu,[P("span",{class:Le(["ta-left",{active:n.textAlign==="left"}]),onClick:t[0]||(t[0]=i=>o.setTextAlignment("left")),"data-value":"left"},nu,2),P("span",{class:Le(["ta-center",{active:n.textAlign==="center"}]),onClick:t[1]||(t[1]=i=>o.setTextAlignment("center")),"data-value":"center"},au,2),P("span",{class:Le(["ta-right",{active:n.textAlign==="right"}]),onClick:t[2]||(t[2]=i=>o.setTextAlignment("right")),"data-value":"right"},iu,2),P("span",{class:Le(["ta-justify",{active:n.textAlign==="justify"}]),onClick:t[3]||(t[3]=i=>o.setTextAlignment("justify")),"data-value":"justify"},ru,2)])])])}const cu=ze(Xr,[["render",uu]]),du={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center flex-wrap gap-2"},vu=["innerHTML"],fu=["value"],mu=["selected","value"],gu={props:{modelValue:String,label:String,options:Array},data(){return{selectedOption:this.modelValue}},watch:{modelValue(e){this.selectedOption!==e&&(this.selectedOption=e)}},methods:{handleInput(){this.selectedOption!==this.modelValue&&this.$emit("update:modelValue",this.selectedOption)}}},hn=Object.assign(gu,{__name:"DropdownSmall",emits:["update:modelValue"],setup(e){return(t,n)=>(ee(),te("div",du,[e.label?(ee(),te("label",{key:0,class:"live-edit-label px-0 col-4",innerHTML:e.label},null,8,vu)):we("",!0),ne(P("select",{"onUpdate:modelValue":n[0]||(n[0]=l=>t.selectedOption=l),class:"form-control-live-edit-input form-select",onInput:n[1]||(n[1]=l=>t.$emit("update:modelValue",l.target.value))},[t.selectedOption?(ee(),te("option",{key:0,value:t.selectedOption},yt(t.selectedOption),9,fu)):we("",!0),(ee(!0),te(oe,null,Ln(e.options,l=>(ee(),te("option",{selected:t.selectedOption===l.key,value:l.key},yt(l.value),9,mu))),256))],544),[[Pr,t.selectedOption]])]))}}),hu=["innerHTML"],yu={class:"form-control-live-edit-label-wrapper"},bu=["value"],_a={__name:"Dropdown",props:{modelValue:String,label:String,options:Array},emits:["update:modelValue"],setup(e){return(t,n)=>(ee(),te("div",null,[P("label",{class:"live-edit-label",innerHTML:e.label},null,8,hu),P("div",null,[P("label",yu,[P("select",{class:"form-select form-control-live-edit-input",onInput:n[0]||(n[0]=l=>t.$emit("update:modelValue",l.target.value))},[(ee(!0),te(oe,null,Ln(e.options,l=>(ee(),te("option",{value:l.key},yt(l.value),9,bu))),256))],32)])])]))}},pu={props:{value:String},watch:{value(e){this.fontFamily=e}},methods:{loadMoreFonts(){mw.top().app.fontManager.manageFonts()},selectFont(e){this.fontFamily=e,this.$emit("change",e)}},mounted(){setTimeout(()=>{this.supportedFonts=mw.top().app.fontManager.getFonts(),this.$forceUpdate(),mw.top().app.fontManager.subscribe(e=>{e&&(this.supportedFonts=e),this.$forceUpdate()})},1e3)},data(){return{supportedFonts:[],fontFamily:this.value}}},ku={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center flex-wrap gap-2"},Su=P("label",{class:"live-edit-label px-0 col-4"},"Font",-1),wu={class:"form-control-live-edit-input form-select",type:"button",ref:"dropdownButton",id:"fontDropdown","data-bs-toggle":"dropdown","aria-haspopup":"true","aria-expanded":"false"},Cu=P("span",{class:"font-picker-selected-font"}," Select ",-1),xu=[Cu],Vu={class:"dropdown-menu","aria-labelledby":"fontDropdown"},_u=["onClick"];function Iu(e,t,n,l,a,o){return ee(),te("div",ku,[Su,P("button",wu,[ne(P("div",null,[P("span",{class:"font-picker-selected-font",style:sl({fontFamily:a.fontFamily})},yt(a.fontFamily),5)],512),[[Pe,a.fontFamily]]),ne(P("div",null,xu,512),[[Pe,!a.fontFamily]])],512),P("ul",Vu,[(ee(!0),te(oe,null,Ln(a.supportedFonts,(i,s)=>(ee(),te("li",{key:s,class:Le({active:i===a.fontFamily})},[P("a",{class:"dropdown-item",href:"#",onClick:u=>o.selectFont(i),style:sl({fontFamily:i})},yt(i),13,_u)],2))),128))]),P("small",{class:"cursor-pointer ms-auto",onClick:t[0]||(t[0]=i=>o.loadMoreFonts())},"Load more fonts ")])}const Ia=ze(pu,[["render",Iu]]),Tu={props:{label:String,modelValue:Number,min:Number,max:Number,step:Number,unit:String},data(){return{selectedValue:this.modelValue}},methods:{resetValue(){this.selectedValue=null}},watch:{selectedValue(e){e!==this.modelValue&&this.$emit("update:modelValue",e)},modelValue(e){this.selectedValue=e}}},Pu={class:"form-control-live-edit-label-wrapper d-flex align-items-center"},Au={class:"live-edit-label px-0 col-4"},Bu={class:"col-6","data-size":"medium"},Ru=P("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",height:"16",viewBox:"0 -960 960 960",width:"16"},[P("path",{d:"M440-122q-121-15-200.5-105.5T160-440q0-66 26-126.5T260-672l57 57q-38 34-57.5 79T240-440q0 88 56 155.5T440-202v80Zm80 0v-80q87-16 143.5-83T720-440q0-100-70-170t-170-70h-3l44 44-56 56-140-140 140-140 56 56-44 44h3q134 0 227 93t93 227q0 121-79.5 211.5T520-122Z"})],-1),Eu=[Ru];function Lu(e,t,n,l,a,o){const i=ke("v-slider");return ee(),te("div",Pu,[P("label",Au,yt(n.label)+" "+yt(a.selectedValue)+yt(n.unit),1),P("div",Bu,[r(i,{min:n.min,max:n.max,step:n.step,modelValue:a.selectedValue,"onUpdate:modelValue":t[0]||(t[0]=s=>a.selectedValue=s)},null,8,["min","max","step","modelValue"]),P("span",{onClick:t[1]||(t[1]=(...s)=>o.resetValue&&o.resetValue(...s)),class:"reset-field tip mw-action-buttons-background-circle-on-hover","data-tipposition":"top-right","data-tip":"Restore default value"},Eu)])])}const Ta=ze(Tu,[["render",Lu]]),$u={components:{ColorPicker:pa,FontPicker:Ia,Dropdown:_a,Input:Va,Slider:ka,Align:cu,DropdownSmall:hn,SliderSmall:Ta},data(){return{showTypography:!1,activeNode:null,isReady:!1,textTransformOptions:[{key:"none",value:"None"},{key:"capitalize",value:"Capitalize"},{key:"uppercase",value:"Uppercase"},{key:"lowercase",value:"Lowercase"}],fontWeightOptions:[{key:"normal",value:"Normal"},{key:"bold",value:"Bold"},{key:"bolder",value:"Bolder"},{key:"lighter",value:"Lighter"},{key:"100",value:"100"},{key:"200",value:"200"},{key:"300",value:"300"},{key:"400",value:"400"},{key:"500",value:"500"},{key:"600",value:"600"},{key:"700",value:"700"},{key:"800",value:"800"},{key:"900",value:"900"}],fontStylesOptions:[{key:"normal",value:"Normal"},{key:"italic",value:"Italic"},{key:"oblique",value:"Oblique"}],textAlign:null,fontSize:null,fontWeight:null,fontStyle:null,lineHeight:null,fontFamily:null,color:null,textTransform:"none",textDecorationIsBold:null,textDecorationIsItalic:null,textDecorationIsUnderline:null,textDecorationIsStrikethrough:null}},methods:{toggleTypography(){this.showTypography=!this.showTypography,this.emitter.emit("element-style-editor-show","typography")},resetAllProperties:function(){this.fontSize=null,this.fontWeight=null,this.fontStyle=null,this.lineHeight=null,this.fontFamily=null,this.color=null,this.textTransform="none",this.textDecorationIsBold=null,this.textDecorationIsItalic=null,this.textDecorationIsUnderline=null,this.textDecorationIsStrikethrough=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){mw.top().app.dispatch("mw.elementStyleEditor.closeAllOpenedMenus");var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssTextAlign(t),this.populateCssTextDecoration(t),this.populateCssFont(t),this.populateCssTextTransform(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssTextAlign:function(e){if(!(!e||!e.get)){var t=e.get.alignNormalize();this.textAlign=t}},populateCssTextDecoration:function(e){if(!(!e||!e.get)){var t=e.get.is();this.textDecorationIsBold=t.bold,this.textDecorationIsItalic=t.italic,this.textDecorationIsUnderline=t.underlined,this.textDecorationIsStrikethrough=t.striked}},setTextAlignment:function(e){this.textAlign=e},handleFontChange:function(e){this.fontFamily=e},handleFontColorChange:function(e){typeof e=="string"&&(this.color=e)},populateCssFont:function(e){if(!(!e||!e.get)){var t=e.get.font();t.size&&(t.size=t.size.replace("px","")),t.lineHeight&&(t.lineHeight=t.lineHeight.replace("px","")),this.fontSize=t.size,this.fontWeight=t.weight,this.fontStyle=t.style,this.lineHeight=t.lineHeight,this.fontFamily=t.family,this.color=t.color}},populateCssTextTransform:function(e){if(!(!e||!e.get)){var t=e.get.textTransform();this.textTransform=t}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="typography"&&(this.showTypography=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{fontFamily:function(e,t){this.applyPropertyToActiveNode("fontFamily",e)},fontSize:function(e,t){this.applyPropertyToActiveNode("fontSize",e+"px")},fontWeight:function(e,t){this.applyPropertyToActiveNode("fontWeight",e)},fontStyle:function(e,t){this.applyPropertyToActiveNode("fontStyle",e)},textAlign:function(e,t){this.applyPropertyToActiveNode("textAlign",e)},lineHeight:function(e,t){var n=!1;if(typeof e>"u"&&(n=!0),e==null&&(n=!0),n){this.applyPropertyToActiveNode("lineHeight","auto");return}this.applyPropertyToActiveNode("lineHeight",e+"px")},color:function(e,t){this.applyPropertyToActiveNode("color",e)},textTransform:function(e,t){this.applyPropertyToActiveNode("textTransform",e)}}},Mu={class:"d-flex"},Fu={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Ou=P("path",{d:"M21,7V3h-4v1H7V3H3v4h1v10H3v4h4v-1h10v1h4v-4h-1V7H21 M18,4h2v2h-2V4 M4,4h2v2H4V4 M6,20H4v-2h2V20 M20,20h-2v-2h2V20   M18,17h-1v1H7v-1H6V7h1V6h10v1h1V17 M16,8v2h-3v6h-2v-6H8V8H16z"},null,-1),Du=[Ou],Nu={key:0},zu={class:"my-4 pt-2"};function Hu(e,t,n,l,a,o){const i=ke("FontPicker"),s=ke("Align"),u=ke("ColorPicker"),c=ke("SliderSmall"),d=ke("DropdownSmall");return ee(),te(oe,null,[P("div",Mu,[(ee(),te("svg",Fu,Du)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showTypography}]),onClick:t[0]||(t[0]=(...f)=>o.toggleTypography&&o.toggleTypography(...f))}," Typography ",2)]),a.showTypography?(ee(),te("div",Nu,[P("div",null,[P("div",zu,[r(i,{modelValue:a.fontFamily,"onUpdate:modelValue":t[1]||(t[1]=f=>a.fontFamily=f),value:a.fontFamily,onChange:o.handleFontChange,label:"Family"},null,8,["modelValue","value","onChange"])]),r(s,{textAlign:a.textAlign,"onUpdate:textAlign":o.setTextAlignment},null,8,["textAlign","onUpdate:textAlign"]),r(u,{modelValue:a.color,"onUpdate:modelValue":t[2]||(t[2]=f=>a.color=f),color:a.color,label:"Color",onChange:o.handleFontColorChange},null,8,["modelValue","color","onChange"]),r(c,{label:"Size",modelValue:a.fontSize,"onUpdate:modelValue":t[3]||(t[3]=f=>a.fontSize=f),min:0,max:100,step:5},null,8,["modelValue"]),r(d,{modelValue:a.fontWeight,"onUpdate:modelValue":t[4]||(t[4]=f=>a.fontWeight=f),options:a.fontWeightOptions,label:"Weight"},null,8,["modelValue","options"]),r(d,{modelValue:a.textTransform,"onUpdate:modelValue":t[5]||(t[5]=f=>a.textTransform=f),options:a.textTransformOptions,label:"Transform"},null,8,["modelValue","options"]),r(d,{modelValue:a.fontStyle,"onUpdate:modelValue":t[6]||(t[6]=f=>a.fontStyle=f),options:a.fontStylesOptions,label:"Style"},null,8,["modelValue","options"]),r(c,{label:"Height",modelValue:a.lineHeight,"onUpdate:modelValue":t[7]||(t[7]=f=>a.lineHeight=f),min:0,max:100,step:5},null,8,["modelValue"])])])):we("",!0)],64)}const ju=ze($u,[["render",Hu]]);const Uu={data(){return{showSpacing:!1,activeNode:null,isReady:!1,marginTop:null,marginRight:null,marginBottom:null,marginLeft:null,paddingTop:null,paddingRight:null,paddingBottom:null,paddingLeft:null}},methods:{toggleSpacing:function(){this.showSpacing=!this.showSpacing,this.emitter.emit("element-style-editor-show","spacing")},resetAllProperties:function(){this.marginTop=null,this.marginRight=null,this.marginBottom=null,this.marginLeft=null,this.paddingTop=null,this.paddingRight=null,this.paddingBottom=null,this.paddingLeft=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssPadding(t),this.populateCssMargin(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssPadding:function(e){var t=e.get.padding(void 0,!0);this.paddingTop=parseFloat(t.top),this.paddingRight=parseFloat(t.right),this.paddingBottom=parseFloat(t.bottom),this.paddingLeft=parseFloat(t.left)},populateCssMargin:function(e){if(!(!e||!e.get)){var t=e.get.margin(void 0,!0);this.marginTop=parseFloat(t.top),this.marginRight=parseFloat(t.right),this.marginBottom=parseFloat(t.bottom),this.marginLeft=parseFloat(t.left)}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="spacing"&&(this.showSpacing=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{marginTop:function(e,t){this.applyPropertyToActiveNode("marginTop",e+"px")},marginRight:function(e,t){this.applyPropertyToActiveNode("marginRight",e+"px")},marginBottom:function(e,t){this.applyPropertyToActiveNode("marginBottom",e+"px")},marginLeft:function(e,t){this.applyPropertyToActiveNode("marginLeft",e+"px")},paddingTop:function(e,t){this.applyPropertyToActiveNode("paddingTop",e+"px")},paddingRight:function(e,t){this.applyPropertyToActiveNode("paddingRight",e+"px")},paddingBottom:function(e,t){this.applyPropertyToActiveNode("paddingBottom",e+"px")},paddingLeft:function(e,t){this.applyPropertyToActiveNode("paddingLeft",e+"px")}}},Gu={class:"d-flex"},Wu={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Yu=P("path",{d:"M10.6,12l4-4H11V6h7v7h-2V9.4l-4,4V16h8V4H8v8H10.6 M22,2v16H12v4H2V12h4V2H22 M10,14H4v6h6V14z"},null,-1),Ku=[Yu],qu={key:0},Xu={class:"mw-element-spacing-editor"},Zu=P("span",{class:"mw-ese-label"},"Margin",-1),Ju={class:"mw-ese-holder mw-ese-margin"},Qu={class:"input mw-ese-top"},ec={class:"input mw-ese-right"},tc={class:"input mw-ese-bottom"},nc={class:"input mw-ese-left"},lc={class:"mw-ese-holder mw-ese-padding"},ac={class:"input mw-ese-top"},oc={class:"input mw-ese-right"},ic={class:"input mw-ese-bottom"},sc={class:"input mw-ese-left"},rc=P("span",{class:"mw-ese-label"},"Padding",-1);function uc(e,t,n,l,a,o){return ee(),te(oe,null,[P("div",Gu,[(ee(),te("svg",Wu,Ku)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showSpacing}]),onClick:t[0]||(t[0]=(...i)=>o.toggleSpacing&&o.toggleSpacing(...i))}," Spacing ",2)]),a.showSpacing?(ee(),te("div",qu,[P("div",Xu,[Zu,P("div",Ju,[P("span",Qu,[ne(P("input",{type:"text","onUpdate:modelValue":t[1]||(t[1]=i=>a.marginTop=i)},null,512),[[je,a.marginTop]])]),P("span",ec,[ne(P("input",{type:"text","onUpdate:modelValue":t[2]||(t[2]=i=>a.marginRight=i)},null,512),[[je,a.marginRight]])]),P("span",tc,[ne(P("input",{type:"text","onUpdate:modelValue":t[3]||(t[3]=i=>a.marginBottom=i)},null,512),[[je,a.marginBottom]])]),P("span",nc,[ne(P("input",{type:"text","onUpdate:modelValue":t[4]||(t[4]=i=>a.marginLeft=i)},null,512),[[je,a.marginLeft]])]),P("div",lc,[P("span",ac,[ne(P("input",{type:"text",min:"0","onUpdate:modelValue":t[5]||(t[5]=i=>a.paddingTop=i)},null,512),[[je,a.paddingTop]])]),P("span",oc,[ne(P("input",{type:"text",min:"0","onUpdate:modelValue":t[6]||(t[6]=i=>a.paddingRight=i)},null,512),[[je,a.paddingRight]])]),P("span",ic,[ne(P("input",{type:"text",min:"0","onUpdate:modelValue":t[7]||(t[7]=i=>a.paddingBottom=i)},null,512),[[je,a.paddingBottom]])]),P("span",sc,[ne(P("input",{type:"text",min:"0","onUpdate:modelValue":t[8]||(t[8]=i=>a.paddingLeft=i)},null,512),[[je,a.paddingLeft]])]),rc])])])])):we("",!0)],64)}const cc=ze(Uu,[["render",uc]]);const dc={props:{label:{type:String,default:"Image"},file:{type:String,default:""}},data(){return{selectedFile:this.file}},watch:{file(e){this.selectedFile=e}},methods:{selectBackgroundImage(){mw.filePickerDialog(e=>{this.selectedFile=e,this.$emit("change",this.selectedFile)})},removeBackgroundImage(){this.selectedFile="",this.$emit("change",this.selectedFile)},resetBackgroundImage(){this.$emit("change",this.selectedFile)}}},vc={class:"form-control-live-edit-label-wrapper my-4 background-image-nav d-flex align-items-center gap-2"},fc={class:"live-edit-label px-0 text-start"},mc={class:"d-flex col"},gc=P("svg",{xmlns:"http://www.w3.org/2000/svg",height:"20",viewBox:"0 -960 960 960",width:"20"},[P("path",{d:"M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h560q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H200Zm0-80h560v-560H200v560Zm40-80h480L570-480 450-320l-90-120-120 160Zm-40 80v-560 560Z"})],-1),hc={key:0,class:"background-preview",style:{"background-image":"none"}},yc={class:"d-flex ms-auto justify-content-end pe-4"},bc=P("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",height:"16",viewBox:"0 -960 960 960",width:"16"},[P("path",{d:"M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z"})],-1),pc=[bc];function kc(e,t,n,l,a,o){return ee(),te("div",vc,[P("label",fc,yt(n.label),1),P("div",mc,[P("div",null,[P("span",{class:"mw-ui-btn mw-ui-btn-outline tip background-select-item",style:{border:"1px solid #000"},onClick:t[0]||(t[0]=(...i)=>o.selectBackgroundImage&&o.selectBackgroundImage(...i)),"data-tip":"Select background image"},[gc,a.selectedFile?we("",!0):(ee(),te("span",hc)),a.selectedFile?(ee(),te("span",{key:1,class:"background-preview",style:sl({backgroundImage:`url(${a.selectedFile})`})},null,4)):we("",!0)])]),P("div",yc,[a.selectedFile?(ee(),te("span",{key:0,class:"mw-action-buttons-background-circle-on-hover",onClick:t[1]||(t[1]=(...i)=>o.removeBackgroundImage&&o.removeBackgroundImage(...i)),"data-tip":"Remove background","data-tipposition":"top-right"},pc)):we("",!0)])])])}const Sc=ze(dc,[["render",kc]]);const wc={props:{file:{type:String,default:""},name:{type:String,default:"file"}},data(){return{showPicker:!1,iconDelete:!1,selectedFile:this.$props.file}},mounted(){mw.top().app.on("mw.elementStyleEditor.closeAllOpenedMenus",()=>{this.closePicker()})},watch:{file(e){this.selectedFile=e}},methods:{changefile(e){this.selectedFile=e.hex,this.$props.file=e.hex},triggerChangeSelectedFile(){this.$props.file=this.selectedFile,this.$emit("change",this.$props.file)},triggerChange(){this.$emit("change",this.$props.file)},removeBackgroundImage(){this.selectedFile="",this.$props.file="",this.$emit("change",this.$props.file)},closePicker(){this.showPicker=!1},togglePicker(){mw.filePickerDialog(e=>{this.selectedFile=e,this.$props.file=e,this.$emit("change",this.$props.file)}),this.showPicker=!this.showPicker}}},Cc={class:"d-inline-flex"},xc=P("i",{class:"mdi mdi-delete"},null,-1),Vc=[xc];function _c(e,t,n,l,a,o){return ee(),te("div",Cc,[ne(P("input",{type:"hidden",ref:"filepickerinput","onUpdate:modelValue":t[0]||(t[0]=i=>a.selectedFile=i),onInput:t[1]||(t[1]=(...i)=>o.triggerChangeSelectedFile&&o.triggerChangeSelectedFile(...i))},null,544),[[je,a.selectedFile]]),a.selectedFile?(ee(),te("button",{key:0,type:"button",class:"btn btn-link btn-sm",onClick:t[2]||(t[2]=i=>o.removeBackgroundImage())},Vc)):we("",!0),a.selectedFile?(ee(),te("div",{key:1,class:"file-picker-badge",onClick:t[3]||(t[3]=(...i)=>o.togglePicker&&o.togglePicker(...i)),style:sl({backgroundImage:"url("+a.selectedFile+")"})},null,4)):we("",!0),a.selectedFile?we("",!0):(ee(),te("div",{key:2,class:"file-picker-badge",onClick:t[4]||(t[4]=(...i)=>o.togglePicker&&o.togglePicker(...i))}))])}const Ic=ze(wc,[["render",_c]]),Tc={components:{ColorPicker:pa,FontPicker:Ia,Dropdown:_a,Input:Va,Slider:ka,FilePicker:Ic,ImagePicker:Sc,DropdownSmall:hn},data(){return{showBackground:!1,backgroundPositionOptions:[{key:"none",value:"None"},{key:"0% 0%",value:"Left Top"},{key:"50% 0%",value:"Center Top"},{key:"100% 0%",value:"Right Top"},{key:"0% 50%",value:"Left Center"},{key:"50% 50%",value:"Center Center"},{key:"100% 50%",value:"Right Center"},{key:"0% 100%",value:"Left Bottom"},{key:"50% 100%",value:"Center Bottom"},{key:"100% 100%",value:"Right Bottom"}],backgroundRepeatOptions:[{key:"none",value:"None"},{key:"repeat",value:"repeat"},{key:"no-repeat",value:"no-repeat"},{key:"repeat-x",value:"repeat horizontally"},{key:"repeat-y",value:"repeat vertically"}],backgroundClipOptions:[{key:"border-box",value:"Border Box"},{key:"content-box",value:"Content Box"},{key:"text",value:"Text"}],backgroundSizeOptions:[{key:"none",value:"None"},{key:"auto",value:"Auto"},{key:"contain",value:"Fit"},{key:"cover",value:"Cover"},{key:"100% 100%",value:"Scale"}],activeNode:null,isReady:!1,backgroundImage:null,backgroundColor:null,backgroundPosition:null,backgroundRepeat:null,backgroundSize:null,backgroundImageUrl:null,backgroundClip:null}},methods:{toggleBackground:function(){this.showBackground=!this.showBackground,this.emitter.emit("element-style-editor-show","background")},resetAllProperties:function(){this.backgroundImage=null,this.backgroundImageUrl=null,this.backgroundColor=null,this.backgroundPosition=null,this.backgroundRepeat=null,this.backgroundSize=null,this.backgroundClip=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBackground(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBackground:function(e){if(!(!e||!e.get)){var t=e.get.background();t.image&&t.image.indexOf("url(")!==-1&&(this.backgroundImageUrl=t.image.replace("url(","").replace(")",""),this.backgroundImageUrl=this.backgroundImageUrl.replace(/\"/g,"")),this.backgroundImage=t.image,this.backgroundColor=t.color,this.backgroundPosition=t.position,this.backgroundRepeat=t.repeat,this.backgroundSize=t.size,this.backgroundClip=t.clip}},handleBackgroundColorChange:function(e){typeof e=="string"&&(this.backgroundColor=e)},handleBackgroundImageChange:function(e){var t=e;e&&e!=""&&e!="none"&&e!="inherit"&&e!="initial"?(this.backgroundImageUrl=e,e.indexOf("url(")===-1&&(t="url("+e+")")):this.backgroundImageUrl="",t==null&&(t="none"),this.backgroundImage=t},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="background"&&(this.showBackground=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{backgroundImage:function(e,t){this.applyPropertyToActiveNode("backgroundImage",e)},backgroundClip:function(e,t){e=="text"?(this.applyPropertyToActiveNode("backgroundClip","text"),this.applyPropertyToActiveNode("-webkitBackgroundClip","text"),this.applyPropertyToActiveNode("color","rgba(0,0,0,0)")):(this.applyPropertyToActiveNode("backgroundClip",e),this.applyPropertyToActiveNode("-webkitBackgroundClip",e),this.applyPropertyToActiveNode("color",""))},backgroundColor:function(e,t){this.applyPropertyToActiveNode("backgroundColor",e)},backgroundPosition:function(e,t){this.applyPropertyToActiveNode("backgroundPosition",e)},backgroundRepeat:function(e,t){this.applyPropertyToActiveNode("backgroundRepeat",e)},backgroundSize:function(e,t){this.applyPropertyToActiveNode("backgroundSize",e)}}},Pc={class:"d-flex"},Ac={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},Bc=P("path",{d:"M12.2,3.9c4.5,0,8.1,3.6,8.1,8.1s-3.6,8.1-8.1,8.1S4.1,16.5,4.1,12S7.7,3.9,12.2,3.9"},null,-1),Rc=[Bc],Ec={key:0};function Lc(e,t,n,l,a,o){const i=ke("ColorPicker"),s=ke("ImagePicker"),u=ke("DropdownSmall");return ee(),te(oe,null,[P("div",Pc,[(ee(),te("svg",Ac,Rc)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showBackground}]),onClick:t[0]||(t[0]=(...c)=>o.toggleBackground&&o.toggleBackground(...c))}," Background ",2)]),a.showBackground?(ee(),te("div",Ec,[r(i,{modelValue:a.backgroundColor,"onUpdate:modelValue":t[1]||(t[1]=c=>a.backgroundColor=c),color:a.backgroundColor,label:"Color",onChange:o.handleBackgroundColorChange},null,8,["modelValue","color","onChange"]),r(s,{label:"Image",modelValue:a.backgroundImage,"onUpdate:modelValue":t[2]||(t[2]=c=>a.backgroundImage=c),file:a.backgroundImageUrl,onChange:o.handleBackgroundImageChange},null,8,["modelValue","file","onChange"]),r(u,{modelValue:a.backgroundSize,"onUpdate:modelValue":t[3]||(t[3]=c=>a.backgroundSize=c),options:a.backgroundSizeOptions,label:"Size"},null,8,["modelValue","options"]),r(u,{modelValue:a.backgroundRepeat,"onUpdate:modelValue":t[4]||(t[4]=c=>a.backgroundRepeat=c),options:a.backgroundRepeatOptions,label:"Repeat"},null,8,["modelValue","options"]),r(u,{modelValue:a.backgroundPosition,"onUpdate:modelValue":t[5]||(t[5]=c=>a.backgroundPosition=c),options:a.backgroundPositionOptions,label:"Position"},null,8,["modelValue","options"]),r(u,{modelValue:a.backgroundClip,"onUpdate:modelValue":t[6]||(t[6]=c=>a.backgroundClip=c),options:a.backgroundClipOptions,label:"Clip"},null,8,["modelValue","options"])])):we("",!0)],64)}const $c=ze(Tc,[["render",Lc]]),Mc={props:{modelValue:Object},data(){return{selectedBorderRadius:{borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""}}},watch:{modelValue(e){e&&(this.selectedBorderRadius={...e})}},methods:{updateValues(){this.$emit("update:modelValue",this.selectedBorderRadius)}}},Fc={class:"d-flex justify-content-center align-items-center"},Oc={class:"rounded-corners"},Dc={class:"s-field-content"},Nc={class:"mw-field mw-field-flat"},zc={class:"mw-multiple-fields"},Hc={class:"mw-field mw-field-flat"},jc=P("span",{class:"mw-field mw-field-flat-prepend order-2"},[P("i",{class:"angle angle-top-left"})],-1),Uc={class:"mw-field mw-field-flat"},Gc=P("span",{class:"mw-field mw-field-flat-prepend"},[P("i",{class:"angle angle-top-right"})],-1),Wc={class:"mw-field mw-field-flat"},Yc={class:"mw-multiple-fields"},Kc={class:"mw-field mw-field-flat"},qc=P("span",{class:"mw-field mw-field-flat-prepend order-2"},[P("i",{class:"angle angle-bottom-left"})],-1),Xc={class:"mw-field mw-field-flat"},Zc=P("span",{class:"mw-field mw-field-flat-prepend"},[P("i",{class:"angle angle-bottom-right"})],-1);function Jc(e,t,n,l,a,o){return ee(),te("div",Fc,[P("div",Oc,[P("div",Dc,[P("div",Nc,[P("div",zc,[P("div",Hc,[ne(P("input",{type:"number",class:"regular order-1",name:"borderTopLeftRadius",autocomplete:"off","onUpdate:modelValue":t[0]||(t[0]=i=>a.selectedBorderRadius.borderTopLeftRadius=i),onInput:t[1]||(t[1]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderTopLeftRadius]]),jc]),P("div",Uc,[Gc,ne(P("input",{class:"regular",type:"number",name:"borderTopRightRadius",autocomplete:"off","onUpdate:modelValue":t[2]||(t[2]=i=>a.selectedBorderRadius.borderTopRightRadius=i),onInput:t[3]||(t[3]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderTopRightRadius]])])])]),P("div",Wc,[P("div",Yc,[P("div",Kc,[ne(P("input",{class:"regular order-1",type:"number",name:"borderBottomLeftRadius",autocomplete:"off","onUpdate:modelValue":t[4]||(t[4]=i=>a.selectedBorderRadius.borderBottomLeftRadius=i),onInput:t[5]||(t[5]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderBottomLeftRadius]]),qc]),P("div",Xc,[Zc,ne(P("input",{class:"regular",type:"number",name:"borderBottomRightRadius",autocomplete:"off","onUpdate:modelValue":t[6]||(t[6]=i=>a.selectedBorderRadius.borderBottomRightRadius=i),onInput:t[7]||(t[7]=i=>o.updateValues())},null,544),[[je,a.selectedBorderRadius.borderBottomRightRadius]])])])])])])])}const ci=ze(Mc,[["render",Jc]]);const Qc={components:{Dropdown:_a,Input:Va,FontPicker:Ia,ColorPicker:pa,Slider:ka,DropdownSmall:hn,SliderSmall:Ta,BorderRadius:ci},data(){return{showBorder:!1,activeNode:null,isReady:!1,borderPositionOptions:[{key:"all",value:"All"},{key:"top",value:"Top"},{key:"right",value:"Right"},{key:"bottom",value:"Bottom"},{key:"left",value:"Left"}],borderStylesOptions:[{key:"none",value:"None"},{key:"solid",value:"Solid"},{key:"dotted",value:"Dotted"},{key:"dashed",value:"Dashed"},{key:"double",value:"Double"},{key:"groove",value:"Groove"},{key:"ridge",value:"Ridge"},{key:"inset",value:"Inset"},{key:"outset",value:"Outset"}],borderPosition:null,borderSize:null,borderColor:null,borderImage:null,borderImageUrl:null,borderStyle:null,borderRadius:{borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""},borderTopLeftRadius:null,borderTopRightRadius:null,borderBottomRightRadius:null,borderBottomLeftRadius:null}},methods:{toggleBorder:function(){this.showBorder=!this.showBorder,this.emitter.emit("element-style-editor-show","border")},handleBorderColorChange(e){typeof e=="string"&&(this.borderColor=e)},resetAllProperties:function(){this.borderPosition=null,this.borderSize=null,this.borderColor=null,this.borderStyle=null,this.borderRadius={borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""},this.borderTopLeftRadius=null,this.borderTopRightRadius=null,this.borderBottomRightRadius=null,this.borderBottomLeftRadius=null,this.borderImageUrl=null,this.borderImage=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBorder(t),this.populateCssBorderRadius(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBorder:function(e){if(!(!e||!e.get)){var t=e.get.border(!0),n={};for(var l in t)if(t[l].width!==0){n=t[l];break}var a=n.width||0,o=n.color||"rgba(0,0,0,1)",i=n.style||"none";this.borderSize=a,this.borderColor=o,this.borderStyle=i,this.borderPosition="all"}},populateCssBorderRadius:function(e){if(!(!e||!e.get)){var t=e.get.radius(!0);this.borderTopLeftRadius=t.tl,this.borderTopRightRadius=t.tr,this.borderBottomRightRadius=t.br,this.borderBottomLeftRadius=t.bl,this.borderRadius={borderTopLeftRadius:t.tl,borderTopRightRadius:t.tr,borderBottomLeftRadius:t.bl,borderBottomRightRadius:t.br}}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="border"&&(this.showBorder=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{borderRadius:function(e,t){var n="";e.borderTopLeftRadius?n+=e.borderTopLeftRadius+"px ":n+="0px ",e.borderTopRightRadius?n+=e.borderTopRightRadius+"px ":n+="0px ",e.borderBottomRightRadius?n+=e.borderBottomRightRadius+"px ":n+="0px ",e.borderBottomLeftRadius?n+=e.borderBottomLeftRadius+"px ":n+="0px ",this.applyPropertyToActiveNode("border-radius",n)},borderImageUrl:function(e,t){var n="";n+="url("+e+") ",n+=this.borderSize+" ",n+=" space ",this.borderImage=n},borderImage:function(e,t){this.applyPropertyToActiveNode("border-image",e)},borderPosition:function(e,t){this.applyPropertyToActiveNode("borderPosition",e)},borderSize:function(e,t){this.applyPropertyToActiveNode("border-width",e+"px")},borderColor:function(e,t){this.applyPropertyToActiveNode("border-color",e)},borderStyle:function(e,t){this.applyPropertyToActiveNode("border-style",e)}}},ed={class:"d-flex"},td={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},nd=P("path",{d:"M15,21h2v-2h-2 M19,21h2v-2h-2 M7,21h2v-2H7 M11,21h2v-2h-2 M19,17h2v-2h-2 M19,13h2v-2h-2 M3,3v18h2V5h16V3 M19,9h2V7h-2"},null,-1),ld=[nd],ad={key:0},od={class:"d-flex flex-column gap-3"};function id(e,t,n,l,a,o){const i=ke("DropdownSmall"),s=ke("SliderSmall"),u=ke("ColorPicker");return ee(),te(oe,null,[P("div",ed,[(ee(),te("svg",td,ld)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showBorder}]),onClick:t[0]||(t[0]=(...c)=>o.toggleBorder&&o.toggleBorder(...c))}," Border ",2)]),a.showBorder?(ee(),te("div",ad,[P("div",od,[r(i,{modelValue:a.borderPosition,"onUpdate:modelValue":t[1]||(t[1]=c=>a.borderPosition=c),options:a.borderPositionOptions,label:"Border Position"},null,8,["modelValue","options"]),r(s,{label:"Border Size",modelValue:a.borderSize,"onUpdate:modelValue":t[2]||(t[2]=c=>a.borderSize=c),min:0,max:120,step:5},null,8,["modelValue"]),r(u,{modelValue:a.borderColor,"onUpdate:modelValue":t[3]||(t[3]=c=>a.borderColor=c),color:a.borderColor,label:"Border Color",onChange:o.handleBorderColorChange},null,8,["modelValue","color","onChange"]),P("div",null,[r(i,{modelValue:a.borderStyle,"onUpdate:modelValue":t[4]||(t[4]=c=>a.borderStyle=c),options:a.borderStylesOptions,label:"Border Style"},null,8,["modelValue","options"])])])])):we("",!0)],64)}const sd=ze(Qc,[["render",id]]);const rd={data(){return{nodeTagName:null,displayNodeInfo:null,displayDomTree:null,activeNode:null,domTree:null,isReady:!1}},methods:{toggleDomTree:function(){this.displayDomTree=!this.displayDomTree,this.displayDomTree&&this.populateDomTree(this.activeNode)},populateStyleEditor:function(e){e&&e&&e.nodeType===1&&(this.isReady=!1,this.displayNodeInfo=!1,this.domTree=!1,this.activeNode=e,this.populateSelectedNode(e),this.populateDomTree(e),setTimeout(()=>{this.isReady=!0},100))},populateSelectedNode:function(e){this.nodeTagName=e.tagName,e.id?this.displayNodeInfo=e.tagName:this.displayNodeInfo=e.tagName},populateDomTree:function(e){this.displayDomTree&&(this.domTree=new mw.DomTree({element:"#domtree",resizable:!0,targetDocument:e.ownerDocument,canSelect:function(t,n){mw.top().app.liveEdit.canBeElement(t);var l=mw.top().app.liveEdit.liveEditHelpers.targetIsInacesibleModule(t);return!l},onHover:function(t,n,l,a){},onSelect:(t,n,l,a)=>{mw.top().app.dispatch("mw.elementStyleEditor.selectNode",l),l.ownerDocument.defaultView.mw&&l.ownerDocument.defaultView.mw.tools.scrollTo(l,!1,100)}}),this.domTree.select(e))}},mounted(){mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})}},ud={class:"well"},cd=P("div",{id:"domtree"},null,-1),dd=[cd],vd={class:"d-flex align-items-center justify-content-between gap-2"},fd=P("label",{class:"live-edit-label mb-0"},"Selected element:",-1);function md(e,t,n,l,a,o){return ne((ee(),te("div",null,[P("div",ud,[ne(P("div",null,dd,512),[[Pe,a.displayDomTree]]),P("div",vd,[fd,P("button",{type:"button",class:Le([{"btn-dark":a.displayDomTree,"btn-outline-dark":!a.displayDomTree},"btn btn-sm"]),onClick:t[0]||(t[0]=(...i)=>o.toggleDomTree&&o.toggleDomTree(...i))},yt(a.displayNodeInfo),3)])])],512)),[[Pe,a.displayNodeInfo]])}const gd=ze(rd,[["render",md]]),hd={components:{DropdownSmall:hn},data(){return{showContainer:!1,activeContainerNode:null,isReady:!1,hasContainer:!1,containerType:null}},methods:{toggleContainer:function(){this.showContainer=!this.showContainer,this.emitter.emit("element-style-editor-show","container")},resetAllProperties:function(){this.hasContainer=null,this.containerType=null},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){this.isReady=!1,this.resetAllProperties();var t=mw.tools.firstParentOrCurrentWithAnyOfClasses(e,["container","container-fluid"]);t&&mw.tools.isEditable(t)&&t&&(this.hasContainer=!0,this.activeContainerNode=t,this.populateCssContainerForNode(t)),setTimeout(()=>{this.isReady=!0},100)}},populateCssContainerForNode:function(e){e.classList&&e.classList.contains("container-fluid")?this.containerType="container-fluid":this.containerType="container"},applyClassToActiveContainerNode:function(e){this.isReady&&this.activeContainerNode&&(e==="container-fluid"?(mw.top().app.dispatch("mw.elementStyleEditor.removeClassFromNode",{node:this.activeContainerNode,class:"container"}),mw.top().app.dispatch("mw.elementStyleEditor.addClassToNode",{node:this.activeContainerNode,class:"container-fluid"})):(mw.top().app.dispatch("mw.elementStyleEditor.removeClassFromNode",{node:this.activeContainerNode,class:"container-fluid"}),mw.top().app.dispatch("mw.elementStyleEditor.addClassToNode",{node:this.activeContainerNode,class:"container"})))}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="container"&&(this.showContainer=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{containerType:function(e,t){this.applyClassToActiveContainerNode(e)}}},yd={key:0},bd={class:"mb-4 d-flex"},pd=P("svg",{fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},[P("path",{fill:"currentColor",d:"M19,17H5V7H19M19,5H5A2,2 0 0,0 3,7V17A2,2 0 0,0 5,19H19A2,2 0 0,0 21,17V7C21,5.89 20.1,5 19,5Z"})],-1),kd={key:0},Sd={class:"s-field",id:"field-conatiner-type"},wd=P("label",null,"Container type",-1),Cd={class:"s-field-content"},xd={class:"mw-ui-check"},Vd=P("span",null,null,-1),_d=P("span",null,"Container",-1),Id={class:"mw-ui-check"},Td=P("span",null,null,-1),Pd=P("span",null,"Fluid",-1);function Ad(e,t,n,l,a,o){return a.hasContainer?(ee(),te("div",yd,[P("div",bd,[pd,P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showContainer}]),onClick:t[0]||(t[0]=(...i)=>o.toggleContainer&&o.toggleContainer(...i))}," Container ",2)]),a.showContainer?(ee(),te("div",kd,[P("div",Sd,[wd,P("div",Cd,[P("label",xd,[ne(P("input",{type:"radio",name:"containerType",value:"container","onUpdate:modelValue":t[1]||(t[1]=i=>a.containerType=i)},null,512),[[co,a.containerType]]),Rt(),Vd,Rt(),_d]),P("label",Id,[ne(P("input",{type:"radio",name:"containerType",value:"container-fluid","onUpdate:modelValue":t[2]||(t[2]=i=>a.containerType=i)},null,512),[[co,a.containerType]]),Rt(),Td,Rt(),Pd])])])])):we("",!0)])):we("",!0)}const Bd=ze(hd,[["render",Ad]]);class El{static previewAnimation(t,n){var l=t.ownerDocument.defaultView,a=l.mw.tools.generateSelectorForNode(t),o=l.mw.id("animation"),i=Object.assign({selector:a,id:o},n);l.mw.__animate(i)}static removeAnimations(t){var n=t.ownerDocument.defaultView,l=n.mw,a=n.mw.tools.generateSelectorForNode(t),o=n.mw.__pageAnimations.find(function(u){return u.selector===a});if(o){var i=o,s=Object.assign({},i);l.__pageAnimations.splice(l.__pageAnimations.indexOf(i),1),Array.from(l.doc.querySelectorAll(s.selector)).forEach(function(u){if(u.$$mwAnimations&&u.$$mwAnimations.length){var c=u.$$mwAnimations.findIndex(function(d){return d.id===i.id});c>-1&&u.$$mwAnimations.splice(c,1)}})}}static setAnimation(t,n){var l=t.ownerDocument.defaultView,a=l.mw.tools.generateSelectorForNode(t),o=l.mw.id("animation");t.$$mwAnimations||(t.$$mwAnimations=[]),this.removeAnimations(t),t.$$mwAnimations||(t.$$mwAnimations=[]);var i=Object.assign({selector:a,id:o},n);return t.$$mwAnimations.push(i),l.mw.__pageAnimations.push(i),l.mw.__animate(i),mw.top().app&&mw.top().app.registerChange(t),i}static supportsAnimations(t){return!!(t.ownerDocument&&t.ownerDocument.defaultView&&t.ownerDocument.defaultView.mw&&t.ownerDocument.defaultView.mw.__animate&&t.ownerDocument.defaultView.mw.tools.isEditable(t))}static getAnimation(t){var n=t.ownerDocument.defaultView;if(n.mw.__pageAnimations){var l=n.mw.tools.generateSelectorForNode(t),a=n.mw.__pageAnimations.find(function(o){return o.selector===l});if(a)return a}return!1}}const Rd={components:{DropdownSmall:hn,SliderSmall:Ta},data(){return{showAnimations:!1,activeNode:null,isReady:!1,selectedAnimation:!1,selectedAnimationSpeed:!1,selectedAnimationWhenAppear:!1,supportsAnimations:!1,animationsAppear:[{key:"none",value:"None"},{key:"onAppear",value:"When element appears on screen"},{key:"onHover",value:"When mouse is over"},{key:"onClick",value:"When element is clicked"}],animations:[{key:"none",value:"None"},{key:"bounce",value:"Bounce"},{key:"flash",value:"Flash"},{key:"pulse",value:"Pulse"},{key:"rubberBand",value:"Rubber Band"},{key:"shakeX",value:"Shake X"},{key:"shakeY",value:"Shake Y"},{key:"headShake",value:"Head Shake"},{key:"swing",value:"Swing"},{key:"tada",value:"Tada"},{key:"wobble",value:"Wobble"},{key:"jello",value:"Jello"},{key:"heartBeat",value:"Heart Beat"},{key:"flip",value:"Flip"},{key:"flipInX",value:"Flip In X"},{key:"flipInY",value:"Flip In Y"},{key:"hinge",value:"Hinge"},{key:"jackInTheBox",value:"Jack In The Box"},{key:"rollIn",value:"Roll In"},{key:"backInDown",value:"Back In Down"},{key:"backInLeft",value:"Back In Left"},{key:"backInRight",value:"Back In Right"},{key:"backInUp",value:"Back In Up"},{key:"bounceIn",value:"Bounce In"},{key:"bounceInDown",value:"Bounce In Down"},{key:"bounceInLeft",value:"Bounce In Left"},{key:"bounceInRight",value:"Bounce In Right"},{key:"bounceInUp",value:"Bounce In Up"},{key:"fadeIn",value:"Fade In"},{key:"fadeInDown",value:"Fade In Down"},{key:"fadeInDownBig",value:"Fade In Down Big"},{key:"fadeInLeft",value:"Fade In Left"},{key:"fadeInLeftBig",value:"Fade In Left Big"},{key:"fadeInRight",value:"Fade In Right"},{key:"fadeInRightBig",value:"Fade In Right Big"},{key:"fadeInUp",value:"Fade In Up"},{key:"fadeInUpBig",value:"Fade In Up Big"},{key:"fadeInTopLeft",value:"Fade In Top Left"},{key:"fadeInTopRight",value:"Fade In Top Right"},{key:"fadeInBottomLeft",value:"Fade In Bottom Left"},{key:"fadeInBottomRight",value:"Fade In Bottom Right"},{key:"lightSpeedInRight",value:"LightSpeed In Right"},{key:"lightSpeedInLeft",value:"LightSpeed In Left"},{key:"rotateIn",value:"Rotate In"},{key:"rotateInDownLeft",value:"Rotate In Down Left"},{key:"rotateInDownRight",value:"Rotate In Down Right"},{key:"zoomIn",value:"Zoom In"},{key:"zoomInDown",value:"Zoom In Down"},{key:"zoomInLeft",value:"Zoom In Left"},{key:"zoomInRight",value:"Zoom In Right"},{key:"zoomInUp",value:"Zoom In Up"},{key:"slideInDown",value:"Slide In Down"},{key:"slideInLeft",value:"Slide In Left"},{key:"slideInRight",value:"Slide In Right"},{key:"slideInUp",value:"Slide In Up"}]}},methods:{toggleAnimations:function(){this.showAnimations=!this.showAnimations,this.emitter.emit("element-style-editor-show","animations")},resetAllProperties:function(){this.selectedAnimation=null,this.selectedAnimationSpeed=1,this.selectedAnimationWhenAppear=null},populateActiveAnimation:function(e){var t=El.getAnimation(e);if(!t){this.resetAllProperties();return}t.animation?this.selectedAnimation=t.animation:this.selectedAnimation=null,t.speed?this.selectedAnimationSpeed=t.speed:this.selectedAnimationSpeed=null,t.when?this.selectedAnimationWhenAppear=t.when:this.selectedAnimationWhenAppear=null},setAnimation:function(){if(this.activeNode){var e=this.selectedAnimationSpeed?this.selectedAnimationSpeed:1,t=this.selectedAnimationWhenAppear?this.selectedAnimationWhenAppear:"onAppear",n={animation:this.selectedAnimation,speed:e,when:t};mw.log(n),El.setAnimation(this.activeNode,n)}},populateStyleEditor:function(e){e&&e&&e.nodeType===1&&(this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.supportsAnimations=El.supportsAnimations(e),this.populateActiveAnimation(e),setTimeout(()=>{this.isReady=!0},100))}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="animations"&&(this.showAnimations=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{e.ownerDocument,e.ownerDocument.defaultView,this.populateStyleEditor(e)})},watch:{selectedAnimation:function(e){this.isReady&&this.setAnimation()},selectedAnimationSpeed:function(e){this.isReady&&this.setAnimation()},selectedAnimationWhenAppear:function(e){this.isReady&&this.setAnimation()}}},Ed={key:0},Ld={class:"mb-4 d-flex"},$d=P("svg",{fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg",version:"1.1",viewBox:"0 0 24 24"},[P("path",{fill:"currentColor",d:"M4,2A2,2 0 0,0 2,4V14H4V4H14V2H4M8,6A2,2 0 0,0 6,8V18H8V8H18V6H8M20,12V20H12V12H20M20,10H12A2,2 0 0,0 10,12V20A2,2 0 0,0 12,22H20A2,2 0 0,0 22,20V12A2,2 0 0,0 20,10M14,13V19L18,16L14,13Z"})],-1),Md={key:0},Fd={key:0};function Od(e,t,n,l,a,o){const i=ke("DropdownSmall"),s=ke("SliderSmall");return a.supportsAnimations?(ee(),te("div",Ed,[P("div",Ld,[$d,P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showAnimations}]),onClick:t[0]||(t[0]=(...u)=>o.toggleAnimations&&o.toggleAnimations(...u))}," Animations ",2)]),a.showAnimations?(ee(),te("div",Md,[r(i,{modelValue:a.selectedAnimation,"onUpdate:modelValue":t[1]||(t[1]=u=>a.selectedAnimation=u),options:a.animations,label:"Animation"},null,8,["modelValue","options"]),a.selectedAnimation?(ee(),te("div",Fd,[r(i,{modelValue:a.selectedAnimationWhenAppear,"onUpdate:modelValue":t[2]||(t[2]=u=>a.selectedAnimationWhenAppear=u),options:a.animationsAppear,label:"When"},null,8,["modelValue","options"]),r(s,{modelValue:a.selectedAnimationSpeed,"onUpdate:modelValue":t[3]||(t[3]=u=>a.selectedAnimationSpeed=u),label:"Speed",min:.1,max:5,step:.1,unit:"s"},null,8,["modelValue"])])):we("",!0)])):we("",!0)])):we("",!0)}const Dd=ze(Rd,[["render",Od]]),Nd={components:{DropdownSmall:hn},data(){return{activeGridNode:null,showGridSettings:!1,isReady:!1,hasGrid:!1,colOptionsDesktop:[{key:"col-1",value:"col-1"},{key:"col-2",value:"col-2"},{key:"col-3",value:"col-3"},{key:"col-4",value:"col-4"},{key:"col-5",value:"col-5"},{key:"col-6",value:"col-6"},{key:"col-7",value:"col-7"},{key:"col-8",value:"col-8"},{key:"col-9",value:"col-9"},{key:"col-10",value:"col-10"},{key:"col-11",value:"col-11"},{key:"col-12",value:"col-12"},{key:"col-lg-1",value:"col-lg-1"},{key:"col-lg-2",value:"col-lg-2"},{key:"col-lg-3",value:"col-lg-3"},{key:"col-lg-4",value:"col-lg-4"},{key:"col-lg-5",value:"col-lg-5"},{key:"col-lg-6",value:"col-lg-6"},{key:"col-lg-7",value:"col-lg-7"},{key:"col-lg-8",value:"col-lg-8"},{key:"col-lg-9",value:"col-lg-9"},{key:"col-lg-10",value:"col-lg-10"},{key:"col-lg-11",value:"col-lg-11"},{key:"col-lg-12",value:"col-lg-12"}],colOptionsTablet:[{key:"col-md-1",value:"col-md-1"},{key:"col-md-2",value:"col-md-2"},{key:"col-md-3",value:"col-md-3"},{key:"col-md-4",value:"col-md-4"},{key:"col-md-5",value:"col-md-5"},{key:"col-md-6",value:"col-md-6"},{key:"col-md-7",value:"col-md-7"},{key:"col-md-8",value:"col-md-8"},{key:"col-md-9",value:"col-md-9"},{key:"col-md-10",value:"col-md-10"},{key:"col-md-11",value:"col-md-11"},{key:"col-md-12",value:"col-md-12"},{key:"col-sm-1",value:"col-sm-1"},{key:"col-sm-2",value:"col-sm-2"},{key:"col-sm-3",value:"col-sm-3"},{key:"col-sm-4",value:"col-sm-4"},{key:"col-sm-5",value:"col-sm-5"},{key:"col-sm-6",value:"col-sm-6"},{key:"col-sm-7",value:"col-sm-7"},{key:"col-sm-8",value:"col-sm-8"},{key:"col-sm-9",value:"col-sm-9"},{key:"col-sm-10",value:"col-sm-10"},{key:"col-sm-11",value:"col-sm-11"},{key:"col-sm-12",value:"col-sm-12"}],colOptionsMobile:[{key:"col-xs-1",value:"col-xs-1"},{key:"col-xs-2",value:"col-xs-2"},{key:"col-xs-3",value:"col-xs-3"},{key:"col-xs-4",value:"col-xs-4"},{key:"col-xs-5",value:"col-xs-5"},{key:"col-xs-6",value:"col-xs-6"},{key:"col-xs-7",value:"col-xs-7"},{key:"col-xs-8",value:"col-xs-8"},{key:"col-xs-9",value:"col-xs-9"},{key:"col-xs-10",value:"col-xs-10"},{key:"col-xs-11",value:"col-xs-11"},{key:"col-xs-12",value:"col-xs-12"}],selectedColDesktop:"",selectedColTablet:"",selectedColMobile:""}},methods:{toggleGridSettings:function(){this.showGridSettings=!this.showGridSettings,this.emitter.emit("element-style-editor-show","grid")},resetAllProperties:function(){this.hasGrid=null},populateStyleEditor:function(e){if(e&&e.nodeType===1){this.isReady=!1,this.resetAllProperties();for(const t of this.colOptionsDesktop)if(e.classList.contains(t.key)){this.hasGrid=!0,this.activeGridNode=e,this.selectedColDesktop=t.key;break}for(const t of this.colOptionsTablet)if(e.classList.contains(t.key)){this.hasGrid=!0,this.activeGridNode=e,this.selectedColTablet=t.key;break}for(const t of this.colOptionsMobile)if(e.classList.contains(t.key)){this.hasGrid=!0,this.activeGridNode=e,this.selectedColMobile=t.key;break}setTimeout(()=>{this.isReady=!0},100)}},applyClassToActiveGridNode:function(e){if(this.isReady&&this.activeGridNode){for(const n of this.colOptionsDesktop)this.activeGridNode.classList.remove(n.key);for(const n of this.colOptionsTablet)this.activeGridNode.classList.remove(n.key);for(const n of this.colOptionsMobile)this.activeGridNode.classList.remove(n.key);const t=[...this.colOptionsDesktop,...this.colOptionsTablet,...this.colOptionsMobile].find(n=>n.key===e);t&&this.activeGridNode.classList.add(t.key),mw.top().app&&mw.top().app.registerChangedState(this.activeGridNode)}}},mounted(){mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)}),this.emitter.on("element-style-editor-show",e=>{e!=="grid"&&(this.showGridSettings=!1)})},watch:{selectedColDesktop:function(e,t){this.applyClassToActiveGridNode(e)},selectedColTablet:function(e,t){this.applyClassToActiveGridNode(e)},selectedColMobile:function(e,t){this.applyClassToActiveGridNode(e)}}},zd={key:0},Hd={class:"mb-4 d-flex"},jd=P("svg",{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",width:"24",height:"24",viewBox:"0 0 24 24"},[P("path",{d:"M4,2H20A2,2 0 0,1 22,4V20A2,2 0 0,1 20,22H4C2.92,22 2,21.1 2,20V4A2,2 0 0,1 4,2M4,4V11H11V4H4M4,20H11V13H4V20M20,20V13H13V20H20M20,4H13V11H20V4Z"})],-1),Ud={key:0},Gd={class:"s-field"},Wd={class:"s-field-content"},Yd={class:"mw-field mw-field-flat","data-size":"medium"},Kd=P("label",null,"Desktop",-1),qd=P("i",{class:"mdi mdi-monitor"},null,-1),Xd={class:"mw-field mw-field-flat","data-size":"medium"},Zd=P("label",null,"Tablet",-1),Jd=P("i",{class:"mdi mdi-tablet"},null,-1),Qd={class:"mw-field mw-field-flat","data-size":"medium"},ev=P("label",null,"Mobile",-1),tv=P("i",{class:"mdi mdi-cellphone"},null,-1);function nv(e,t,n,l,a,o){const i=ke("DropdownSmall");return a.hasGrid?(ee(),te("div",zd,[P("div",Hd,[jd,P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showGridSettings}]),onClick:t[0]||(t[0]=(...s)=>o.toggleGridSettings&&o.toggleGridSettings(...s))}," Grid ",2)]),a.showGridSettings?(ee(),te("div",Ud,[P("div",Gd,[P("div",Wd,[P("div",Yd,[Kd,qd,r(i,{options:a.colOptionsDesktop,modelValue:a.selectedColDesktop,"onUpdate:modelValue":t[1]||(t[1]=s=>a.selectedColDesktop=s)},null,8,["options","modelValue"])]),P("div",Xd,[Zd,Jd,r(i,{options:a.colOptionsTablet,modelValue:a.selectedColTablet,"onUpdate:modelValue":t[2]||(t[2]=s=>a.selectedColTablet=s)},null,8,["options","modelValue"])]),P("div",Qd,[ev,tv,r(i,{options:a.colOptionsMobile,modelValue:a.selectedColMobile,"onUpdate:modelValue":t[3]||(t[3]=s=>a.selectedColMobile=s)},null,8,["options","modelValue"])])])])])):we("",!0)])):we("",!0)}const lv=ze(Nd,[["render",nv]]);var av=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function ov(e,t,n){return n={path:t,exports:{},require:function(l,a){return iv(l,a??n.path)}},e(n,n.exports),n.exports}function iv(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}var sv=ov(function(e,t){(function(n,l){e.exports=l()})(av,function(){var n="__v-click-outside",l=typeof window<"u",a=typeof navigator<"u",o=l&&("ontouchstart"in window||a&&navigator.msMaxTouchPoints>0)?["touchstart"]:["click"],i=function(d){var f=d.event,v=d.handler;(0,d.middleware)(f)&&v(f)},s=function(d,f){var v=function(S){var C=typeof S=="function";if(!C&&typeof S!="object")throw new Error("v-click-outside: Binding value must be a function or an object");return{handler:C?S:S.handler,middleware:S.middleware||function(_){return _},events:S.events||o,isActive:S.isActive!==!1,detectIframe:S.detectIframe!==!1,capture:!!S.capture}}(f.value),m=v.handler,g=v.middleware,y=v.detectIframe,b=v.capture;if(v.isActive){if(d[n]=v.events.map(function(S){return{event:S,srcTarget:document.documentElement,handler:function(C){return function(_){var V=_.el,x=_.event,T=_.handler,w=_.middleware,k=x.path||x.composedPath&&x.composedPath();(k?k.indexOf(V)<0:!V.contains(x.target))&&i({event:x,handler:T,middleware:w})}({el:d,event:C,handler:m,middleware:g})},capture:b}}),y){var p={event:"blur",srcTarget:window,handler:function(S){return function(C){var _=C.el,V=C.event,x=C.handler,T=C.middleware;setTimeout(function(){var w=document.activeElement;w&&w.tagName==="IFRAME"&&!_.contains(w)&&i({event:V,handler:x,middleware:T})},0)}({el:d,event:S,handler:m,middleware:g})},capture:b};d[n]=[].concat(d[n],[p])}d[n].forEach(function(S){var C=S.event,_=S.srcTarget,V=S.handler;return setTimeout(function(){d[n]&&_.addEventListener(C,V,b)},0)})}},u=function(d){(d[n]||[]).forEach(function(f){return f.srcTarget.removeEventListener(f.event,f.handler,f.capture)}),delete d[n]},c=l?{beforeMount:s,updated:function(d,f){var v=f.value,m=f.oldValue;JSON.stringify(v)!==JSON.stringify(m)&&(u(d),s(d,{value:v}))},unmounted:u}:{};return{install:function(d){d.directive("click-outside",c)},directive:c}})}),rv=sv;const uv={class:"v3ti-loader-wrapper"},cv=P("div",{class:"v3ti-loader"},null,-1),dv=P("span",null,"Loading",-1),vv=[cv,dv];function fv(e,t){return ee(),te("div",uv,vv)}function di(e,t){t===void 0&&(t={});var n=t.insertAt;if(!(!e||typeof document>"u")){var l=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css",n==="top"&&l.firstChild?l.insertBefore(a,l.firstChild):l.appendChild(a),a.styleSheet?a.styleSheet.cssText=e:a.appendChild(document.createTextNode(e))}}var mv=`.v3ti-loader-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  color: #112B3C;
}
.v3ti-loader-wrapper .v3ti-loader {
  width: 18px;
  height: 18px;
  border-radius: 50%;
  display: inline-block;
  border-top: 2px solid #112B3C;
  border-right: 2px solid transparent;
  box-sizing: border-box;
  animation: rotation 0.8s linear infinite;
  margin-right: 8px;
}
@keyframes rotation {
0% {
    transform: rotate(0deg);
}
100% {
    transform: rotate(360deg);
}
}`;di(mv);const vi={};vi.render=fv;var gv=vi,fi={name:"Vue3TagsInput",emits:["update:modelValue","update:tags","on-limit","on-tags-changed","on-remove","on-error","on-focus","on-blur","on-select","on-select-duplicate-tag","on-new-tag"],props:{readOnly:{type:Boolean,default:!1},modelValue:{type:String,default:""},validate:{type:[String,Function,Object],default:""},addTagOnKeys:{type:Array,default:function(){return[13,",",32]}},placeholder:{type:String,default:""},tags:{type:Array,default:()=>[]},loading:{type:Boolean,default:!1},limit:{type:Number,default:-1},allowDuplicates:{type:Boolean,default:!1},addTagOnBlur:{type:Boolean,default:!1},selectItems:{type:Array,default:()=>[]},select:{type:Boolean,default:!1},duplicateSelectItem:{type:Boolean,default:!0},uniqueSelectField:{type:String,default:"id"},addTagOnKeysWhenSelect:{type:Boolean,default:!1},isShowNoData:{type:Boolean,default:!0}},components:{Loading:gv},directives:{clickOutside:rv.directive},data(){return{isInputActive:!1,isError:!1,newTag:"",innerTags:[],multiple:!1}},computed:{isLimit(){const e=this.limit>0&&Number(this.limit)===this.innerTags.length;return e&&this.$emit("on-limit"),e},selectedItemsIds(){return this.duplicateSelectItem?[]:this.tags.map(e=>e[this.uniqueSelectField]||"")}},watch:{error(){this.isError=this.error},modelValue:{immediate:!0,handler(e){this.newTag=e}},tags:{deep:!0,immediate:!0,handler(e){this.innerTags=[...e]}}},methods:{isShot(e){return!!this.$slots[e]},makeItNormal(e){this.$emit("update:modelValue",e.target.value),this.$refs.inputTag.className="v3ti-new-tag",this.$refs.inputTag.style.textDecoration="none"},resetData(){this.innerTags=[]},resetInputValue(){this.newTag="",this.$emit("update:modelValue","")},setPosition(){const e=this.$refs.inputBox,t=this.$refs.contextMenu;if(e&&t){t.style.display="block";const n=e.clientHeight||32,l=3;t.style.top=n+l+"px"}},closeContextMenu(){this.$refs.contextMenu&&(this.$refs.contextMenu.style={display:"none"})},handleSelect(e){if(this.isShowCheckmark(e)){const t=this.tags.filter(n=>e.id!==n.id);this.$emit("update:tags",t),this.$emit("on-select-duplicate-tag",e),this.resetInputValue()}else this.$emit("on-select",e);this.$nextTick(()=>{this.closeContextMenu()})},isShowCheckmark(e){return this.duplicateSelectItem?!1:this.selectedItemsIds.includes(e[this.uniqueSelectField])},focusNewTag(){this.select&&!this.disabled&&this.setPosition(),!(this.readOnly||!this.$el.querySelector(".v3ti-new-tag"))&&this.$el.querySelector(".v3ti-new-tag").focus()},handleInputFocus(e){this.isInputActive=!0,this.$emit("on-focus",e)},handleInputBlur(e){this.isInputActive=!1,this.addNew(e),this.$emit("on-blur",e)},addNew(e){if(this.select&&!this.addTagOnKeysWhenSelect)return;const t=e?this.addTagOnKeys.indexOf(e.keyCode)!==-1||this.addTagOnKeys.indexOf(e.key)!==-1:!0,n=e&&e.type!=="blur";!t&&(n||!this.addTagOnBlur)||this.isLimit||(this.newTag&&(this.allowDuplicates||this.innerTags.indexOf(this.newTag)===-1)&&this.validateIfNeeded(this.newTag)?(this.innerTags.push(this.newTag),this.addTagOnKeysWhenSelect&&(this.$emit("on-new-tag",this.newTag),this.updatePositionContextMenu()),this.resetInputValue(),this.tagChange(),e&&e.preventDefault()):(this.validateIfNeeded(this.newTag)?this.makeItError(!0):this.makeItError(!1),e&&e.preventDefault()))},updatePositionContextMenu(){this.$nextTick(()=>{this.setPosition()})},makeItError(e){this.newTag!==""&&(this.$refs.inputTag.className="v3ti-new-tag v3ti-new-tag--error",this.$refs.inputTag.style.textDecoration="underline",this.$emit("on-error",e))},validateIfNeeded(e){return this.validate===""||this.validate===void 0?!0:typeof this.validate=="function"?this.validate(e):!0},removeLastTag(){this.newTag||(this.innerTags.pop(),this.tagChange(),this.updatePositionContextMenu())},remove(e){this.innerTags.splice(e,1),this.tagChange(),this.$emit("on-remove",e),this.updatePositionContextMenu()},tagChange(){this.$emit("on-tags-changed",this.innerTags)}}};const hv={key:1,class:"v3ti-tag-content"},yv=["onClick"],bv=["placeholder","disabled"],pv={key:0,class:"v3ti-loading"},kv={key:1,class:"v3ti-no-data"},Sv={key:1},wv={key:2},Cv=["onClick"],xv={class:"v3ti-context-item--label"},Vv={key:0,class:"v3ti-icon-selected-tag",width:"44",height:"44",viewBox:"0 0 24 24","stroke-width":"1.5",fill:"none","stroke-linecap":"round","stroke-linejoin":"round"},_v=P("path",{stroke:"none",d:"M0 0h24v24H0z"},null,-1),Iv=P("path",{d:"M5 12l5 5l10 -10"},null,-1),Tv=[_v,Iv];function Pv(e,t,n,l,a,o){const i=ke("Loading"),s=Ze("click-outside");return ne((ee(),te("div",{onClick:t[6]||(t[6]=u=>o.focusNewTag()),class:Le([{"v3ti--focus":a.isInputActive,"v3ti--error":a.isError},"v3ti"])},[P("div",{class:Le(["v3ti-content",{"v3ti-content--select":n.select}]),ref:"inputBox"},[(ee(!0),te(oe,null,Ln(a.innerTags,(u,c)=>(ee(),te("span",{key:c,class:"v3ti-tag"},[o.isShot("item")?Qn(e.$slots,"item",vo(Y({key:0},{name:u,index:c,tag:u}))):(ee(),te("span",hv,yt(u),1)),n.readOnly?we("",!0):(ee(),te("a",{key:2,onClick:Rl(d=>o.remove(c),["prevent","stop"]),class:"v3ti-remove-tag"},null,8,yv))]))),128)),ne(P("input",{ref:"inputTag",placeholder:n.placeholder,"onUpdate:modelValue":t[0]||(t[0]=u=>a.newTag=u),onKeydown:[t[1]||(t[1]=Ar(Rl(function(){return o.removeLastTag&&o.removeLastTag(...arguments)},["stop"]),["delete"])),t[2]||(t[2]=function(){return o.addNew&&o.addNew(...arguments)})],onBlur:t[3]||(t[3]=function(){return o.handleInputBlur&&o.handleInputBlur(...arguments)}),onFocus:t[4]||(t[4]=function(){return o.handleInputFocus&&o.handleInputFocus(...arguments)}),onInput:t[5]||(t[5]=function(){return o.makeItNormal&&o.makeItNormal(...arguments)}),class:"v3ti-new-tag",disabled:n.readOnly},null,40,bv),[[je,a.newTag]])],2),n.select?(ee(),te("section",{key:0,class:Le(["v3ti-context-menu",{"v3ti-context-menu-no-data":!n.isShowNoData&&n.selectItems.length===0}]),ref:"contextMenu"},[n.loading?(ee(),te("div",pv,[o.isShot("loading")?Qn(e.$slots,"default",{key:0}):(ee(),Br(i,{key:1}))])):we("",!0),!n.loading&&n.selectItems.length===0&&n.isShowNoData?(ee(),te("div",kv,[o.isShot("no-data")?Qn(e.$slots,"no-data",{key:0}):(ee(),te("span",Sv," No data "))])):we("",!0),!n.loading&&n.selectItems.length>0?(ee(),te("div",wv,[(ee(!0),te(oe,null,Ln(n.selectItems,(u,c)=>(ee(),te("div",{key:c,class:Le(["v3ti-context-item",{"v3ti-context-item--active":o.isShowCheckmark(u)}]),onClick:Rl(d=>o.handleSelect(u,c),["stop"])},[P("div",xv,[Qn(e.$slots,"select-item",vo(Rr(u)))]),o.isShowCheckmark(u)?(ee(),te("svg",Vv,Tv)):we("",!0)],10,Cv))),128))])):we("",!0)],2)):we("",!0)],2)),[[s,o.closeContextMenu]])}var Av=`.v3ti {
  border-radius: 5px;
  min-height: 32px;
  line-height: 1.4;
  background-color: #fff;
  border: 1px solid #9ca3af;
  cursor: text;
  text-align: left;
  -webkit-appearance: textfield;
  display: flex;
  flex-wrap: wrap;
  position: relative;
}
.v3ti .v3ti-icon-selected-tag {
  stroke: #19be6b;
  width: 1rem;
  height: 1rem;
  margin-left: 4px;
}
.v3ti--focus {
  outline: 0;
  border-color: #000000;
  box-shadow: 0 0 0 1px #000000;
}
.v3ti--error {
  border-color: #F56C6C;
}
.v3ti .v3ti-no-data {
  color: #d8d8d8;
  text-align: center;
  padding: 4px 7px;
}
.v3ti .v3ti-loading {
  padding: 4px 7px;
  text-align: center;
}
.v3ti .v3ti-context-menu {
  max-height: 150px;
  min-width: 150px;
  overflow: auto;
  display: none;
  outline: none;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  margin: 0;
  padding: 5px 0;
  background: #ffffff;
  z-index: 1050;
  color: #475569;
  box-shadow: 0 3px 8px 2px rgba(0, 0, 0, 0.1);
  border-radius: 0 0 6px 6px;
}
.v3ti .v3ti-context-menu .v3ti-context-item {
  padding: 4px 7px;
  display: flex;
  align-items: center;
}
.v3ti .v3ti-context-menu .v3ti-context-item:hover {
  background: #e8e8e8;
  cursor: pointer;
}
.v3ti .v3ti-context-menu .v3ti-context-item--label {
  flex: 1;
  min-width: 1px;
}
.v3ti .v3ti-context-menu .v3ti-context-item--active {
  color: #317CAF;
}
.v3ti .v3ti-context-menu-no-data {
  padding: 0;
}
.v3ti .v3ti-content {
  width: 100%;
  display: flex;
  flex-wrap: wrap;
}
.v3ti .v3ti-content--select {
  padding-right: 30px;
}
.v3ti .v3ti-tag {
  display: flex;
  font-weight: 400;
  margin: 3px;
  padding: 0 5px;
  background: #317CAF;
  color: #ffffff;
  height: 27px;
  border-radius: 5px;
  align-items: center;
  max-width: calc(100% - 16px);
}
.v3ti .v3ti-tag .v3ti-tag-content {
  flex: 1;
  min-width: 1px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
.v3ti .v3ti-tag .v3ti-remove-tag {
  color: #ffffff;
  transition: opacity 0.3s ease;
  opacity: 0.5;
  cursor: pointer;
  padding: 0 5px 0 7px;
}
.v3ti .v3ti-tag .v3ti-remove-tag::before {
  content: "x";
}
.v3ti .v3ti-tag .v3ti-remove-tag:hover {
  opacity: 1;
}
.v3ti .v3ti-new-tag {
  background: transparent;
  border: 0;
  font-weight: 400;
  margin: 3px;
  outline: none;
  padding: 0 4px;
  flex: 1;
  min-width: 60px;
  height: 27px;
}
.v3ti .v3ti-new-tag--error {
  color: #F56C6C;
}`;di(Av);fi.render=Pv;var Bv=(()=>{const e=fi;return e.install=t=>{t.component("Vue3TagsInput",e)},e})();const Rv={components:{Vue3TagsInput:Bv},data(){return{showClasses:!1,activeNode:null,isReady:!1,classesToKeepInput:"",classesToKeep:["element","no-typing","safe-mode","edit","nodrop","allow-drop","module","module-overlap","module-overlap-on-hover","allow-typing","allow-edit","img-as-background","image-holder"],classes:[]}},methods:{toggleClasses:function(){this.showClasses=!this.showClasses,this.emitter.emit("element-style-editor-show","classes")},customValidateClasses(e){const t=/^[a-zA-Z\s,]*$/;return e.split(",").map(l=>l.trim()).filter(l=>t.test(l)&&this.classesToKeep.includes(l))},handleChangeClasses(e){this.classes=e},updateClassesToKeep(){this.classesToKeep=this.classesToKeepInput.split(",").map(e=>e.trim())},applyClasses(){this.isReady&&this.activeNode&&(this.activeNode.className="",this.classes.forEach(e=>{e&&this.activeNode.classList.add(e)}),this.classesToKeepInput&&this.classesToKeepInput.split(",").map(t=>t.trim()).filter(t=>!!t).forEach(t=>{this.activeNode.classList.contains(t)||this.activeNode.classList.add(t)}),mw.top().app&&mw.top().app.registerChangedState(this.activeNode))},populateStyleEditor(e){if(e&&e.nodeType===1){this.isReady=!1,this.activeNode=e,this.classes=this.activeNode.className.split(" ").filter(l=>!!l).filter(l=>l.startsWith("animate__")?!1:!this.classesToKeep.includes(l));const t=this.activeNode.className.split(" "),n=this.classesToKeep.filter(l=>t.includes(l));this.classesToKeepInput=n.join(", "),setTimeout(()=>{this.isReady=!0},100)}}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="classes"&&(this.showClasses=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{classes(e,t){this.applyClasses()}}},Ev={class:"d-flex"},Lv={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},$v=P("path",{d:"M12.9,3l2,0.4L11.1,21l-2-0.4L12.9,3 M19.6,12L16,8.4V5.6l6.4,6.4L16,18.4v-2.8L19.6,12 M1.6,12L8,5.6v2.8L4.4,12L8,15.6  v2.8L1.6,12z"},null,-1),Mv=[$v],Fv={key:0};function Ov(e,t,n,l,a,o){const i=ke("vue3-tags-input");return ee(),te("div",null,[P("div",Ev,[(ee(),te("svg",Lv,Mv)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showClasses}]),onClick:t[0]||(t[0]=(...s)=>o.toggleClasses&&o.toggleClasses(...s))}," Classes ",2)]),a.showClasses?(ee(),te("div",Fv,[P("div",null,[ne(P("input",{type:"hidden","onUpdate:modelValue":t[1]||(t[1]=s=>a.classesToKeepInput=s),onInput:t[2]||(t[2]=(...s)=>o.updateClassesToKeep&&o.updateClassesToKeep(...s))},null,544),[[je,a.classesToKeepInput]]),r(i,{tags:a.classes,placeholder:"Enter classes separated by commas",validate:o.customValidateClasses,onOnTagsChanged:o.handleChangeClasses},null,8,["tags","validate","onOnTagsChanged"])])])):we("",!0)])}const Dv=ze(Rv,[["render",Ov]]),Nv={components:{BorderRadius:ci},data(){return{showRoundedCorners:!1,activeNode:null,isReady:!1,borderRadius:{borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""}}},methods:{toggleRoundedCorners:function(){this.showRoundedCorners=!this.showRoundedCorners,this.emitter.emit("element-style-editor-show","roundedCorners")},resetAllProperties:function(){this.borderRadius={borderTopLeftRadius:"",borderTopRightRadius:"",borderBottomLeftRadius:"",borderBottomRightRadius:""}},populateStyleEditor:function(e){if(e&&e&&e.nodeType===1){var t=mw.CSSParser(e);this.isReady=!1,this.resetAllProperties(),this.activeNode=e,this.populateCssBorderRadius(t),setTimeout(()=>{this.isReady=!0},100)}},populateCssBorderRadius:function(e){if(!(!e||!e.get)){var t=e.get.radius(!0);this.borderTopLeftRadius=t.tl,this.borderTopRightRadius=t.tr,this.borderBottomRightRadius=t.br,this.borderBottomLeftRadius=t.bl,this.borderRadius={borderTopLeftRadius:t.tl,borderTopRightRadius:t.tr,borderBottomLeftRadius:t.bl,borderBottomRightRadius:t.br}}},applyPropertyToActiveNode:function(e,t){this.isReady&&this.activeNode&&mw.top().app.dispatch("mw.elementStyleEditor.applyCssPropertyToNode",{node:this.activeNode,prop:e,val:t})}},mounted(){this.emitter.on("element-style-editor-show",e=>{e!=="roundedCorners"&&(this.showRoundedCorners=!1)}),mw.top().app.on("mw.elementStyleEditor.selectNode",e=>{this.populateStyleEditor(e)})},watch:{borderRadius:function(e,t){var n="";e.borderTopLeftRadius?n+=e.borderTopLeftRadius+"px ":n+="0px ",e.borderTopRightRadius?n+=e.borderTopRightRadius+"px ":n+="0px ",e.borderBottomRightRadius?n+=e.borderBottomRightRadius+"px ":n+="0px ",e.borderBottomLeftRadius?n+=e.borderBottomLeftRadius+"px ":n+="0px ",this.applyPropertyToActiveNode("border-radius",n)}}},zv={class:"d-flex"},Hv={fill:"currentColor",height:"24",width:"24",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",x:"0px",y:"0px",viewBox:"0 0 24 24",style:{"enable-background":"new 0 0 24 24"},"xml:space":"preserve"},jv=P("path",{d:"M19,19h2v2h-2V19 M19,17h2v-2h-2V17 M3,13h2v-2H3V13 M3,17h2v-2H3V17 M3,9h2V7H3V9 M3,5h2V3H3V5 M7,5h2V3H7V5 M15,21h2v-2  h-2V21 M11,21h2v-2h-2V21 M15,21h2v-2h-2V21 M7,21h2v-2H7V21 M3,21h2v-2H3V21 M21,8c0-2.8-2.2-5-5-5h-5v2h5c1.7,0,3,1.3,3,3v5h2V8z"},null,-1),Uv=[jv],Gv={key:0},Wv={class:"d-flex flex-column gap-3"};function Yv(e,t,n,l,a,o){const i=ke("BorderRadius");return ee(),te(oe,null,[P("div",zv,[(ee(),te("svg",Hv,Uv)),P("b",{class:Le(["mw-admin-action-links ms-3",{active:a.showRoundedCorners}]),onClick:t[0]||(t[0]=(...s)=>o.toggleRoundedCorners&&o.toggleRoundedCorners(...s))}," Rounded corners ",2)]),a.showRoundedCorners?(ee(),te("div",Gv,[P("div",Wv,[r(i,{modelValue:a.borderRadius,"onUpdate:modelValue":t[1]||(t[1]=s=>a.borderRadius=s)},null,8,["modelValue"])])])):we("",!0)],64)}const Kv=ze(Nv,[["render",Yv]]);const qv={components:{ElementStyleEditorBackground:$c,ElementStyleEditorRoundedCorners:Kv,ElementStyleEditorElementSelector:gd,ElementStyleEditorTypography:ju,ElementStyleEditorSpacing:cc,ElementStyleEditorBorder:sd,ElementStyleEditorContainer:Bd,ElementStyleEditorGrid:lv,ElementStyleEditorAnimations:Dd,ElementStyleEditorClassApplier:Dv},data(){return{showElementSelector:!0,showBackground:!0,showTypography:!0,showSpacing:!0,showBorder:!0,showContainer:!0,showGrid:!0,showAnimations:!0,showClassApplier:!0,showRoundedCorners:!0}},methods:{},mounted(){mw.top().app.on("cssEditorSettings",e=>{e.fieldSettings.components&&(this.showBackground=!1,this.showTypography=!1,this.showSpacing=!1,this.showBorder=!1,this.showElementSelector=!1,this.showContainer=!1,this.showAnimations=!1,this.showClassApplier=!1,e.fieldSettings.components.includes("background")&&(this.showBackground=!0),e.fieldSettings.components.includes("elementSelector")&&(this.showElementSelector=!0),e.fieldSettings.components.includes("typography")&&(this.showTypography=!0),e.fieldSettings.components.includes("spacing")&&(this.showSpacing=!0),e.fieldSettings.components.includes("border")&&(this.showBorder=!0),e.fieldSettings.components.includes("container")&&(this.showContainer=!0),e.fieldSettings.components.includes("grid")&&(this.showGrid=!0),e.fieldSettings.components.includes("animations")&&(this.showAnimations=!0),e.fieldSettings.components.includes("roundedCorners")&&(this.showRoundedCorners=!0),e.fieldSettings.components.includes("classes")&&(this.showClassApplier=!0))})}},Xv={class:"d-flex flex-column"},Zv={class:"mb-4"},Jv={class:"mb-4"},Qv={class:"mb-4"},ef={class:"mb-4"},tf={class:"mb-4"},nf={class:"mb-4"},lf={class:"mb-4"};function af(e,t,n,l,a,o){const i=ke("ElementStyleEditorElementSelector"),s=ke("ElementStyleEditorBackground"),u=ke("ElementStyleEditorTypography"),c=ke("ElementStyleEditorSpacing"),d=ke("ElementStyleEditorContainer"),f=ke("ElementStyleEditorGrid"),v=ke("ElementStyleEditorBorder"),m=ke("ElementStyleEditorRoundedCorners"),g=ke("ElementStyleEditorAnimations"),y=ke("ElementStyleEditorClassApplier");return ee(),te("div",Xv,[ne(P("div",Zv,[r(i)],512),[[Pe,a.showElementSelector]]),ne(P("div",Jv,[r(s)],512),[[Pe,a.showBackground]]),ne(P("div",Qv,[r(u)],512),[[Pe,a.showTypography]]),ne(P("div",ef,[r(c)],512),[[Pe,a.showSpacing]]),ne(P("div",null,[r(d)],512),[[Pe,a.showContainer]]),ne(P("div",null,[r(f)],512),[[Pe,a.showGrid]]),ne(P("div",tf,[r(v)],512),[[Pe,a.showBorder]]),ne(P("div",nf,[r(m)],512),[[Pe,a.showRoundedCorners]]),ne(P("div",null,[r(g)],512),[[Pe,a.showAnimations]]),ne(P("div",lf,[r(y)],512),[[Pe,a.showClassApplier]])])}const of=ze(qv,[["render",af]]);const Ce=typeof window<"u",Pa=Ce&&"IntersectionObserver"in window,sf=Ce&&("ontouchstart"in window||window.navigator.maxTouchPoints>0);function fo(e,t,n){rf(e,t),t.set(e,n)}function rf(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function uf(e,t,n){var l=mi(e,t,"set");return cf(e,l,n),n}function cf(e,t,n){if(t.set)t.set.call(e,n);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=n}}function Ht(e,t){var n=mi(e,t,"get");return df(e,n)}function mi(e,t,n){if(!t.has(e))throw new TypeError("attempted to "+n+" private field on non-instance");return t.get(e)}function df(e,t){return t.get?t.get.call(e):t.value}function gi(e,t,n){const l=t.length-1;if(l<0)return e===void 0?n:e;for(let a=0;a<l;a++){if(e==null)return n;e=e[t[a]]}return e==null||e[t[l]]===void 0?n:e[t[l]]}function yn(e,t){if(e===t)return!0;if(e instanceof Date&&t instanceof Date&&e.getTime()!==t.getTime()||e!==Object(e)||t!==Object(t))return!1;const n=Object.keys(e);return n.length!==Object.keys(t).length?!1:n.every(l=>yn(e[l],t[l]))}function Hl(e,t,n){return e==null||!t||typeof t!="string"?n:e[t]!==void 0?e[t]:(t=t.replace(/\[(\w+)\]/g,".$1"),t=t.replace(/^\./,""),gi(e,t.split("."),n))}function kt(e,t,n){if(t===!0)return e===void 0?n:e;if(t==null||typeof t=="boolean")return n;if(e!==Object(e)){if(typeof t!="function")return n;const a=t(e,n);return typeof a>"u"?n:a}if(typeof t=="string")return Hl(e,t,n);if(Array.isArray(t))return gi(e,t,n);if(typeof t!="function")return n;const l=t(e,n);return typeof l>"u"?n:l}function xt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0;return Array.from({length:e},(n,l)=>t+l)}function J(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"px";if(!(e==null||e===""))return isNaN(+e)?String(e):isFinite(+e)?`${Number(e)}${t}`:void 0}function rl(e){return e!==null&&typeof e=="object"&&!Array.isArray(e)}function jl(e){return e&&"$el"in e?e.$el:e}const mo=Object.freeze({enter:13,tab:9,delete:46,esc:27,space:32,up:38,down:40,left:37,right:39,end:35,home:36,del:46,backspace:8,insert:45,pageup:33,pagedown:34,shift:16}),Ul=Object.freeze({enter:"Enter",tab:"Tab",delete:"Delete",esc:"Escape",space:"Space",up:"ArrowUp",down:"ArrowDown",left:"ArrowLeft",right:"ArrowRight",end:"End",home:"Home",del:"Delete",backspace:"Backspace",insert:"Insert",pageup:"PageUp",pagedown:"PageDown",shift:"Shift"});function hi(e){return Object.keys(e)}function Ut(e,t){return t.every(n=>e.hasOwnProperty(n))}function qt(e,t,n){const l=Object.create(null),a=Object.create(null);for(const o in e)t.some(i=>i instanceof RegExp?i.test(o):i===o)&&!(n!=null&&n.some(i=>i===o))?l[o]=e[o]:a[o]=e[o];return[l,a]}function rt(e,t){const n={...e};return t.forEach(l=>delete n[l]),n}const yi=/^on[^a-z]/,Aa=e=>yi.test(e),vf=["onAfterscriptexecute","onAnimationcancel","onAnimationend","onAnimationiteration","onAnimationstart","onAuxclick","onBeforeinput","onBeforescriptexecute","onChange","onClick","onCompositionend","onCompositionstart","onCompositionupdate","onContextmenu","onCopy","onCut","onDblclick","onFocusin","onFocusout","onFullscreenchange","onFullscreenerror","onGesturechange","onGestureend","onGesturestart","onGotpointercapture","onInput","onKeydown","onKeypress","onKeyup","onLostpointercapture","onMousedown","onMousemove","onMouseout","onMouseover","onMouseup","onMousewheel","onPaste","onPointercancel","onPointerdown","onPointerenter","onPointerleave","onPointermove","onPointerout","onPointerover","onPointerup","onReset","onSelect","onSubmit","onTouchcancel","onTouchend","onTouchmove","onTouchstart","onTransitioncancel","onTransitionend","onTransitionrun","onTransitionstart","onWheel"];function en(e){const[t,n]=qt(e,[yi]),l=rt(t,vf),[a,o]=qt(n,["class","style","id",/^data-/]);return Object.assign(a,t),Object.assign(o,l),[a,o]}function et(e){return e==null?[]:Array.isArray(e)?e:[e]}function Ue(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:1;return Math.max(t,Math.min(n,e))}function go(e){const t=e.toString().trim();return t.includes(".")?t.length-t.indexOf(".")-1:0}function ho(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"0";return e+n.repeat(Math.max(0,t-e.length))}function ff(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1;const n=[];let l=0;for(;l<e.length;)n.push(e.substr(l,t)),l+=t;return n}function yo(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1e3;if(e<t)return`${e} B`;const n=t===1024?["Ki","Mi","Gi"]:["k","M","G"];let l=-1;for(;Math.abs(e)>=t&&l<n.length-1;)e/=t,++l;return`${e.toFixed(1)} ${n[l]}B`}function it(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0;const l={};for(const a in e)l[a]=e[a];for(const a in t){const o=e[a],i=t[a];if(rl(o)&&rl(i)){l[a]=it(o,i,n);continue}if(Array.isArray(o)&&Array.isArray(i)&&n){l[a]=n(o,i);continue}l[a]=i}return l}function bi(e){return e.map(t=>t.type===oe?bi(t.children):t).flat()}function Yt(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";if(Yt.cache.has(e))return Yt.cache.get(e);const t=e.replace(/[^a-z]/gi,"-").replace(/\B([A-Z])/g,"-$1").toLowerCase();return Yt.cache.set(e,t),t}Yt.cache=new Map;function Rn(e,t){if(!t||typeof t!="object")return[];if(Array.isArray(t))return t.map(n=>Rn(e,n)).flat(1);if(Array.isArray(t.children))return t.children.map(n=>Rn(e,n)).flat(1);if(t.component){if(Object.getOwnPropertySymbols(t.component.provides).includes(e))return[t.component];if(t.component.subTree)return Rn(e,t.component.subTree).flat(1)}return[]}var el=new WeakMap,sn=new WeakMap;class mf{constructor(t){fo(this,el,{writable:!0,value:[]}),fo(this,sn,{writable:!0,value:0}),this.size=t}push(t){Ht(this,el)[Ht(this,sn)]=t,uf(this,sn,(Ht(this,sn)+1)%this.size)}values(){return Ht(this,el).slice(Ht(this,sn)).concat(Ht(this,el).slice(0,Ht(this,sn)))}}function gf(e){return"touches"in e?{clientX:e.touches[0].clientX,clientY:e.touches[0].clientY}:{clientX:e.clientX,clientY:e.clientY}}function Ba(e){const t=gt({}),n=h(e);return tt(()=>{for(const l in n.value)t[l]=n.value[l]},{flush:"sync"}),Sa(t)}function ul(e,t){return e.includes(t)}function pi(e){return e[2].toLowerCase()+e.slice(3)}const St=()=>[Function,Array];function bo(e,t){return t="on"+Hn(t),!!(e[t]||e[`${t}Once`]||e[`${t}Capture`]||e[`${t}OnceCapture`]||e[`${t}CaptureOnce`])}function Ra(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),l=1;l<t;l++)n[l-1]=arguments[l];if(Array.isArray(e))for(const a of e)a(...n);else typeof e=="function"&&e(...n)}function $n(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;const n=["button","[href]",'input:not([type="hidden"])',"select","textarea","[tabindex]"].map(l=>`${l}${t?':not([tabindex="-1"])':""}:not([disabled])`).join(", ");return[...e.querySelectorAll(n)]}function ki(e,t,n){let l,a=e.indexOf(document.activeElement);const o=t==="next"?1:-1;do a+=o,l=e[a];while((!l||l.offsetParent==null||!((n==null?void 0:n(l))??!0))&&a<e.length&&a>=0);return l}function cl(e,t){var l,a,o,i;const n=$n(e);if(!t)(e===document.activeElement||!e.contains(document.activeElement))&&((l=n[0])==null||l.focus());else if(t==="first")(a=n[0])==null||a.focus();else if(t==="last")(o=n.at(-1))==null||o.focus();else if(typeof t=="number")(i=n[t])==null||i.focus();else{const s=ki(n,t);s?s.focus():cl(e,t==="next"?"first":"last")}}function Si(){}function vn(e,t){if(!(Ce&&typeof CSS<"u"&&typeof CSS.supports<"u"&&CSS.supports(`selector(${t})`)))return null;try{return!!e&&e.matches(t)}catch{return null}}const wi=["top","bottom"],hf=["start","end","left","right"];function Gl(e,t){let[n,l]=e.split(" ");return l||(l=ul(wi,n)?"start":ul(hf,n)?"top":"center"),{side:Wl(n,t),align:Wl(l,t)}}function Wl(e,t){return e==="start"?t?"right":"left":e==="end"?t?"left":"right":e}function Ll(e){return{side:{center:"center",top:"bottom",bottom:"top",left:"right",right:"left"}[e.side],align:e.align}}function $l(e){return{side:e.side,align:{center:"center",top:"bottom",bottom:"top",left:"right",right:"left"}[e.align]}}function po(e){return{side:e.align,align:e.side}}function ko(e){return ul(wi,e.side)?"y":"x"}class dn{constructor(t){let{x:n,y:l,width:a,height:o}=t;this.x=n,this.y=l,this.width=a,this.height=o}get top(){return this.y}get bottom(){return this.y+this.height}get left(){return this.x}get right(){return this.x+this.width}}function So(e,t){return{x:{before:Math.max(0,t.left-e.left),after:Math.max(0,e.right-t.right)},y:{before:Math.max(0,t.top-e.top),after:Math.max(0,e.bottom-t.bottom)}}}function Ea(e){const t=e.getBoundingClientRect(),n=getComputedStyle(e),l=n.transform;if(l){let a,o,i,s,u;if(l.startsWith("matrix3d("))a=l.slice(9,-1).split(/, /),o=+a[0],i=+a[5],s=+a[12],u=+a[13];else if(l.startsWith("matrix("))a=l.slice(7,-1).split(/, /),o=+a[0],i=+a[3],s=+a[4],u=+a[5];else return new dn(t);const c=n.transformOrigin,d=t.x-s-(1-o)*parseFloat(c),f=t.y-u-(1-i)*parseFloat(c.slice(c.indexOf(" ")+1)),v=o?t.width/o:e.offsetWidth+1,m=i?t.height/i:e.offsetHeight+1;return new dn({x:d,y:f,width:v,height:m})}else return new dn(t)}function Gt(e,t,n){if(typeof e.animate>"u")return{finished:Promise.resolve()};let l;try{l=e.animate(t,n)}catch{return{finished:Promise.resolve()}}return typeof l.finished>"u"&&(l.finished=new Promise(a=>{l.onfinish=()=>{a(l)}})),l}const al=new WeakMap;function yf(e,t){Object.keys(t).forEach(n=>{if(Aa(n)){const l=pi(n),a=al.get(e);if(t[n]==null)a==null||a.forEach(o=>{const[i,s]=o;i===l&&(e.removeEventListener(l,s),a.delete(o))});else if(!a||![...a].some(o=>o[0]===l&&o[1]===t[n])){e.addEventListener(l,t[n]);const o=a||new Set;o.add([l,t[n]]),al.has(e)||al.set(e,o)}}else t[n]==null?e.removeAttribute(n):e.setAttribute(n,t[n])})}function bf(e,t){Object.keys(t).forEach(n=>{if(Aa(n)){const l=pi(n),a=al.get(e);a==null||a.forEach(o=>{const[i,s]=o;i===l&&(e.removeEventListener(l,s),a.delete(o))})}else e.removeAttribute(n)})}const rn=2.4,wo=.2126729,Co=.7151522,xo=.072175,pf=.55,kf=.58,Sf=.57,wf=.62,tl=.03,Vo=1.45,Cf=5e-4,xf=1.25,Vf=1.25,_o=.078,Io=12.82051282051282,nl=.06,To=.001;function Po(e,t){const n=(e.r/255)**rn,l=(e.g/255)**rn,a=(e.b/255)**rn,o=(t.r/255)**rn,i=(t.g/255)**rn,s=(t.b/255)**rn;let u=n*wo+l*Co+a*xo,c=o*wo+i*Co+s*xo;if(u<=tl&&(u+=(tl-u)**Vo),c<=tl&&(c+=(tl-c)**Vo),Math.abs(c-u)<Cf)return 0;let d;if(c>u){const f=(c**pf-u**kf)*xf;d=f<To?0:f<_o?f-f*Io*nl:f-nl}else{const f=(c**wf-u**Sf)*Vf;d=f>-To?0:f>-_o?f-f*Io*nl:f+nl}return d*100}function _f(e,t){t=Array.isArray(t)?t.slice(0,-1).map(n=>`'${n}'`).join(", ")+` or '${t.at(-1)}'`:`'${t}'`}const dl=.20689655172413793,If=e=>e>dl**3?Math.cbrt(e):e/(3*dl**2)+4/29,Tf=e=>e>dl?e**3:3*dl**2*(e-4/29);function Ci(e){const t=If,n=t(e[1]);return[116*n-16,500*(t(e[0]/.95047)-n),200*(n-t(e[2]/1.08883))]}function xi(e){const t=Tf,n=(e[0]+16)/116;return[t(n+e[1]/500)*.95047,t(n),t(n-e[2]/200)*1.08883]}const Pf=[[3.2406,-1.5372,-.4986],[-.9689,1.8758,.0415],[.0557,-.204,1.057]],Af=e=>e<=.0031308?e*12.92:1.055*e**(1/2.4)-.055,Bf=[[.4124,.3576,.1805],[.2126,.7152,.0722],[.0193,.1192,.9505]],Rf=e=>e<=.04045?e/12.92:((e+.055)/1.055)**2.4;function Vi(e){const t=Array(3),n=Af,l=Pf;for(let a=0;a<3;++a)t[a]=Math.round(Ue(n(l[a][0]*e[0]+l[a][1]*e[1]+l[a][2]*e[2]))*255);return{r:t[0],g:t[1],b:t[2]}}function La(e){let{r:t,g:n,b:l}=e;const a=[0,0,0],o=Rf,i=Bf;t=o(t/255),n=o(n/255),l=o(l/255);for(let s=0;s<3;++s)a[s]=i[s][0]*t+i[s][1]*n+i[s][2]*l;return a}function Ao(e){return!!e&&/^(#|var\(--|(rgb|hsl)a?\()/.test(e)}const Bo=/^(?<fn>(?:rgb|hsl)a?)\((?<values>.+)\)/,Ef={rgb:(e,t,n,l)=>({r:e,g:t,b:n,a:l}),rgba:(e,t,n,l)=>({r:e,g:t,b:n,a:l}),hsl:(e,t,n,l)=>Ro({h:e,s:t,l:n,a:l}),hsla:(e,t,n,l)=>Ro({h:e,s:t,l:n,a:l}),hsv:(e,t,n,l)=>Vt({h:e,s:t,v:n,a:l}),hsva:(e,t,n,l)=>Vt({h:e,s:t,v:n,a:l})};function st(e){if(typeof e=="number")return{r:(e&16711680)>>16,g:(e&65280)>>8,b:e&255};if(typeof e=="string"&&Bo.test(e)){const{groups:t}=e.match(Bo),{fn:n,values:l}=t,a=l.split(/,\s*/).map(o=>o.endsWith("%")&&["hsl","hsla","hsv","hsva"].includes(n)?parseFloat(o)/100:parseFloat(o));return Ef[n](...a)}else if(typeof e=="string"){let t=e.startsWith("#")?e.slice(1):e;return[3,4].includes(t.length)?t=t.split("").map(n=>n+n).join(""):[6,8].includes(t.length),Ai(t)}else if(typeof e=="object"){if(Ut(e,["r","g","b"]))return e;if(Ut(e,["h","s","l"]))return Vt($a(e));if(Ut(e,["h","s","v"]))return Vt(e)}throw new TypeError(`Invalid color: ${e==null?e:String(e)||e.constructor.name}
Expected #hex, #hexa, rgb(), rgba(), hsl(), hsla(), object or number`)}function Vt(e){const{h:t,s:n,v:l,a}=e,o=s=>{const u=(s+t/60)%6;return l-l*n*Math.max(Math.min(u,4-u,1),0)},i=[o(5),o(3),o(1)].map(s=>Math.round(s*255));return{r:i[0],g:i[1],b:i[2],a}}function Ro(e){return Vt($a(e))}function hl(e){if(!e)return{h:0,s:1,v:1,a:1};const t=e.r/255,n=e.g/255,l=e.b/255,a=Math.max(t,n,l),o=Math.min(t,n,l);let i=0;a!==o&&(a===t?i=60*(0+(n-l)/(a-o)):a===n?i=60*(2+(l-t)/(a-o)):a===l&&(i=60*(4+(t-n)/(a-o)))),i<0&&(i=i+360);const s=a===0?0:(a-o)/a,u=[i,s,a];return{h:u[0],s:u[1],v:u[2],a:e.a}}function _i(e){const{h:t,s:n,v:l,a}=e,o=l-l*n/2,i=o===1||o===0?0:(l-o)/Math.min(o,1-o);return{h:t,s:i,l:o,a}}function $a(e){const{h:t,s:n,l,a}=e,o=l+n*Math.min(l,1-l),i=o===0?0:2-2*l/o;return{h:t,s:i,v:o,a}}function Ii(e){let{r:t,g:n,b:l,a}=e;return a===void 0?`rgb(${t}, ${n}, ${l})`:`rgba(${t}, ${n}, ${l}, ${a})`}function Ti(e){return Ii(Vt(e))}function ll(e){const t=Math.round(e).toString(16);return("00".substr(0,2-t.length)+t).toUpperCase()}function Pi(e){let{r:t,g:n,b:l,a}=e;return`#${[ll(t),ll(n),ll(l),a!==void 0?ll(Math.round(a*255)):""].join("")}`}function Ai(e){e=$f(e);let[t,n,l,a]=ff(e,2).map(o=>parseInt(o,16));return a=a===void 0?a:a/255,{r:t,g:n,b:l,a}}function Lf(e){const t=Ai(e);return hl(t)}function Bi(e){return Pi(Vt(e))}function $f(e){return e.startsWith("#")&&(e=e.slice(1)),e=e.replace(/([^0-9a-f])/gi,"F"),(e.length===3||e.length===4)&&(e=e.split("").map(t=>t+t).join("")),e.length!==6&&(e=ho(ho(e,6),8,"F")),e}function Mf(e,t){const n=Ci(La(e));return n[0]=n[0]+t*10,Vi(xi(n))}function Ff(e,t){const n=Ci(La(e));return n[0]=n[0]-t*10,Vi(xi(n))}function Yl(e){const t=st(e);return La(t)[1]}function Of(e,t){const n=Yl(e),l=Yl(t),a=Math.max(n,l),o=Math.min(n,l);return(a+.05)/(o+.05)}function Ri(e){const t=Math.abs(Po(st(0),st(e)));return Math.abs(Po(st(16777215),st(e)))>Math.min(t,50)?"#fff":"#000"}function R(e,t){return n=>Object.keys(e).reduce((l,a)=>{const i=typeof e[a]=="object"&&e[a]!=null&&!Array.isArray(e[a])?e[a]:{type:e[a]};return n&&a in n?l[a]={...i,default:n[a]}:l[a]=i,t&&!l[a].source&&(l[a].source=t),l},{})}const q=R({class:[String,Array],style:{type:[String,Array,Object],default:null}},"component");function ut(e){if(e._setup=e._setup??e.setup,!e.name)return e;if(e._setup){e.props=R(e.props??{},e.name)();const t=Object.keys(e.props);e.filterProps=function(l){return qt(l,t,["class","style"])},e.props._as=String,e.setup=function(l,a){const o=Oa();if(!o.value)return e._setup(l,a);const{props:i,provideSubDefaults:s}=Wf(l,l._as??e.name,o),u=e._setup(i,a);return s(),u}}return e}function L(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0;return t=>(e?ut:Er)(t)}function bt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"div",n=arguments.length>2?arguments[2]:void 0;return L()({name:n??Hn(ui(e.replace(/__/g,"-"))),props:{tag:{type:String,default:t},...q()},setup(l,a){let{slots:o}=a;return()=>{var i;return Qt(l.tag,{class:[e,l.class],style:l.style},(i=o.default)==null?void 0:i.call(o))}}})}function Ei(e){if(typeof e.getRootNode!="function"){for(;e.parentNode;)e=e.parentNode;return e!==document?null:document}const t=e.getRootNode();return t!==document&&t.getRootNode({composed:!0})!==document?null:t}const Mn="cubic-bezier(0.4, 0, 0.2, 1)",Df="cubic-bezier(0.0, 0, 0.2, 1)",Nf="cubic-bezier(0.4, 0, 1, 1)";function Oe(e,t){const n=Lr();if(!n)throw new Error(`[Vuetify] ${e} ${t||"must be called from inside a setup function"}`);return n}function Tt(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"composables";const t=Oe(e).type;return Yt((t==null?void 0:t.aliasName)||(t==null?void 0:t.name))}let Li=0,ol=new WeakMap;function We(){const e=Oe("getUid");if(ol.has(e))return ol.get(e);{const t=Li++;return ol.set(e,t),t}}We.reset=()=>{Li=0,ol=new WeakMap};function Ma(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;for(;e;){if(t?zf(e):Fa(e))return e;e=e.parentElement}return document.scrollingElement}function vl(e,t){const n=[];if(t&&e&&!t.contains(e))return n;for(;e&&(Fa(e)&&n.push(e),e!==t);)e=e.parentElement;return n}function Fa(e){if(!e||e.nodeType!==Node.ELEMENT_NODE)return!1;const t=window.getComputedStyle(e);return t.overflowY==="scroll"||t.overflowY==="auto"&&e.scrollHeight>e.clientHeight}function zf(e){if(!e||e.nodeType!==Node.ELEMENT_NODE)return!1;const t=window.getComputedStyle(e);return["scroll","auto"].includes(t.overflowY)}function Hf(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Oe("injectSelf");const{provides:n}=t;if(n&&e in n)return n[e]}function jf(e){for(;e;){if(window.getComputedStyle(e).position==="fixed")return!0;e=e.offsetParent}return!1}function j(e){const t=Oe("useRender");t.render=e}const fn=Symbol.for("vuetify:defaults");function Uf(e){return W(e)}function Oa(){const e=Ve(fn);if(!e)throw new Error("[Vuetify] Could not find defaults instance");return e}function Ee(e,t){const n=Oa(),l=W(e),a=h(()=>{if(ot(t==null?void 0:t.disabled))return n.value;const i=ot(t==null?void 0:t.scoped),s=ot(t==null?void 0:t.reset),u=ot(t==null?void 0:t.root);if(l.value==null&&!(i||s||u))return n.value;let c=it(l.value,{prev:n.value});if(i)return c;if(s||u){const d=Number(s||1/0);for(let f=0;f<=d&&!(!c||!("prev"in c));f++)c=c.prev;return c&&typeof u=="string"&&u in c&&(c=it(it(c,{prev:c}),c[u])),c}return c.prev?it(c.prev,c):c});return $e(fn,a),a}function Gf(e,t){var n,l;return typeof((n=e.props)==null?void 0:n[t])<"u"||typeof((l=e.props)==null?void 0:l[Yt(t)])<"u"}function Wf(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:Oa();const l=Oe("useDefaults");if(t=t??l.type.name??l.type.__name,!t)throw new Error("[Vuetify] Could not determine component name");const a=h(()=>{var u;return(u=n.value)==null?void 0:u[e._as??t]}),o=new Proxy(e,{get(u,c){var f,v,m,g;const d=Reflect.get(u,c);return c==="class"||c==="style"?[(f=a.value)==null?void 0:f[c],d].filter(y=>y!=null):typeof c=="string"&&!Gf(l.vnode,c)?((v=a.value)==null?void 0:v[c])??((g=(m=n.value)==null?void 0:m.global)==null?void 0:g[c])??d:d}}),i=K();tt(()=>{if(a.value){const u=Object.entries(a.value).filter(c=>{let[d]=c;return d.startsWith(d[0].toUpperCase())});i.value=u.length?Object.fromEntries(u):void 0}else i.value=void 0});function s(){const u=Hf(fn,l);$e(fn,h(()=>i.value?it((u==null?void 0:u.value)??{},i.value):u==null?void 0:u.value))}return{props:o,provideSubDefaults:s}}const yl=["sm","md","lg","xl","xxl"],Kl=Symbol.for("vuetify:display"),Eo={mobileBreakpoint:"lg",thresholds:{xs:0,sm:600,md:960,lg:1280,xl:1920,xxl:2560}},Yf=function(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Eo;return it(Eo,e)};function Lo(e){return Ce&&!e?window.innerWidth:typeof e=="object"&&e.clientWidth||0}function $o(e){return Ce&&!e?window.innerHeight:typeof e=="object"&&e.clientHeight||0}function Mo(e){const t=Ce&&!e?window.navigator.userAgent:"ssr";function n(g){return!!t.match(g)}const l=n(/android/i),a=n(/iphone|ipad|ipod/i),o=n(/cordova/i),i=n(/electron/i),s=n(/chrome/i),u=n(/edge/i),c=n(/firefox/i),d=n(/opera/i),f=n(/win/i),v=n(/mac/i),m=n(/linux/i);return{android:l,ios:a,cordova:o,electron:i,chrome:s,edge:u,firefox:c,opera:d,win:f,mac:v,linux:m,touch:sf,ssr:t==="ssr"}}function Kf(e,t){const{thresholds:n,mobileBreakpoint:l}=Yf(e),a=K($o(t)),o=K(Mo(t)),i=gt({}),s=K(Lo(t));function u(){a.value=$o(),s.value=Lo()}function c(){u(),o.value=Mo()}return tt(()=>{const d=s.value<n.sm,f=s.value<n.md&&!d,v=s.value<n.lg&&!(f||d),m=s.value<n.xl&&!(v||f||d),g=s.value<n.xxl&&!(m||v||f||d),y=s.value>=n.xxl,b=d?"xs":f?"sm":v?"md":m?"lg":g?"xl":"xxl",p=typeof l=="number"?l:n[l],S=s.value<p;i.xs=d,i.sm=f,i.md=v,i.lg=m,i.xl=g,i.xxl=y,i.smAndUp=!d,i.mdAndUp=!(d||f),i.lgAndUp=!(d||f||v),i.xlAndUp=!(d||f||v||m),i.smAndDown=!(v||m||g||y),i.mdAndDown=!(m||g||y),i.lgAndDown=!(g||y),i.xlAndDown=!y,i.name=b,i.height=a.value,i.width=s.value,i.mobile=S,i.mobileBreakpoint=l,i.platform=o.value,i.thresholds=n}),Ce&&window.addEventListener("resize",u,{passive:!0}),{...Sa(i),update:c,ssr:!!t}}function tn(){const e=Ve(Kl);if(!e)throw new Error("Could not find Vuetify display injection");return e}const qf={collapse:"mdi-chevron-up",complete:"mdi-check",cancel:"mdi-close-circle",close:"mdi-close",delete:"mdi-close-circle",clear:"mdi-close-circle",success:"mdi-check-circle",info:"mdi-information",warning:"mdi-alert-circle",error:"mdi-close-circle",prev:"mdi-chevron-left",next:"mdi-chevron-right",checkboxOn:"mdi-checkbox-marked",checkboxOff:"mdi-checkbox-blank-outline",checkboxIndeterminate:"mdi-minus-box",delimiter:"mdi-circle",sortAsc:"mdi-arrow-up",sortDesc:"mdi-arrow-down",expand:"mdi-chevron-down",menu:"mdi-menu",subgroup:"mdi-menu-down",dropdown:"mdi-menu-down",radioOn:"mdi-radiobox-marked",radioOff:"mdi-radiobox-blank",edit:"mdi-pencil",ratingEmpty:"mdi-star-outline",ratingFull:"mdi-star",ratingHalf:"mdi-star-half-full",loading:"mdi-cached",first:"mdi-page-first",last:"mdi-page-last",unfold:"mdi-unfold-more-horizontal",file:"mdi-paperclip",plus:"mdi-plus",minus:"mdi-minus",calendar:"mdi-calendar"},Xf={component:e=>Qt(Na,{...e,class:"mdi"})},se=[String,Function,Object,Array],ql=Symbol.for("vuetify:icons"),bl=R({icon:{type:se},tag:{type:String,required:!0}},"icon"),Xl=L()({name:"VComponentIcon",props:bl(),setup(e,t){let{slots:n}=t;return()=>{const l=e.icon;return r(e.tag,null,{default:()=>{var a;return[e.icon?r(l,null,null):(a=n.default)==null?void 0:a.call(n)]}})}}}),Da=ut({name:"VSvgIcon",inheritAttrs:!1,props:bl(),setup(e,t){let{attrs:n}=t;return()=>r(e.tag,Y(n,{style:null}),{default:()=>[r("svg",{class:"v-icon__svg",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",role:"img","aria-hidden":"true"},[Array.isArray(e.icon)?e.icon.map(l=>Array.isArray(l)?r("path",{d:l[0],"fill-opacity":l[1]},null):r("path",{d:l},null)):r("path",{d:e.icon},null)])]})}}),Zf=ut({name:"VLigatureIcon",props:bl(),setup(e){return()=>r(e.tag,null,{default:()=>[e.icon]})}}),Na=ut({name:"VClassIcon",props:bl(),setup(e){return()=>r(e.tag,{class:e.icon},null)}}),Jf={svg:{component:Da},class:{component:Na}};function Qf(e){return it({defaultSet:"mdi",sets:{...Jf,mdi:Xf},aliases:{...qf,vuetify:["M8.2241 14.2009L12 21L22 3H14.4459L8.2241 14.2009Z",["M7.26303 12.4733L7.00113 12L2 3H12.5261C12.5261 3 12.5261 3 12.5261 3L7.26303 12.4733Z",.6]],"vuetify-outline":"svg:M7.26 12.47 12.53 3H2L7.26 12.47ZM14.45 3 8.22 14.2 12 21 22 3H14.45ZM18.6 5 12 16.88 10.51 14.2 15.62 5ZM7.26 8.35 5.4 5H9.13L7.26 8.35Z"}},e)}const em=e=>{const t=Ve(ql);if(!t)throw new Error("Missing Vuetify Icons provide!");return{iconData:h(()=>{var u;const l=ot(e);if(!l)return{component:Xl};let a=l;if(typeof a=="string"&&(a=a.trim(),a.startsWith("$")&&(a=(u=t.aliases)==null?void 0:u[a.slice(1)])),!a)throw new Error(`Could not find aliased icon "${l}"`);if(Array.isArray(a))return{component:Da,icon:a};if(typeof a!="string")return{component:Xl,icon:a};const o=Object.keys(t.sets).find(c=>typeof a=="string"&&a.startsWith(`${c}:`)),i=o?a.slice(o.length+1):a;return{component:t.sets[o??t.defaultSet].component,icon:i}})}},tm={badge:"Badge",open:"Open",close:"Close",dataIterator:{noResultsText:"No matching records found",loadingText:"Loading items..."},dataTable:{itemsPerPageText:"Rows per page:",ariaLabel:{sortDescending:"Sorted descending.",sortAscending:"Sorted ascending.",sortNone:"Not sorted.",activateNone:"Activate to remove sorting.",activateDescending:"Activate to sort descending.",activateAscending:"Activate to sort ascending."},sortBy:"Sort by"},dataFooter:{itemsPerPageText:"Items per page:",itemsPerPageAll:"All",nextPage:"Next page",prevPage:"Previous page",firstPage:"First page",lastPage:"Last page",pageText:"{0}-{1} of {2}"},dateRangeInput:{divider:"to"},datePicker:{ok:"OK",cancel:"Cancel",range:{title:"Select dates",header:"Enter dates"},title:"Select date",header:"Enter date",input:{placeholder:"Enter date"}},noDataText:"No data available",carousel:{prev:"Previous visual",next:"Next visual",ariaLabel:{delimiter:"Carousel slide {0} of {1}"}},calendar:{moreEvents:"{0} more"},input:{clear:"Clear {0}",prependAction:"{0} prepended action",appendAction:"{0} appended action",otp:"Please enter OTP character {0}"},fileInput:{counter:"{0} files",counterSize:"{0} files ({1} in total)"},timePicker:{am:"AM",pm:"PM"},pagination:{ariaLabel:{root:"Pagination Navigation",next:"Next page",previous:"Previous page",page:"Go to page {0}",currentPage:"Page {0}, Current page",first:"First page",last:"Last page"}},stepper:{next:"Next",prev:"Previous"},rating:{ariaLabel:{item:"Rating {0} of {1}"}},loading:"Loading...",infiniteScroll:{loadMore:"Load more",empty:"No more"}},nm={af:!1,ar:!0,bg:!1,ca:!1,ckb:!1,cs:!1,de:!1,el:!1,en:!1,es:!1,et:!1,fa:!0,fi:!1,fr:!1,hr:!1,hu:!1,he:!0,id:!1,it:!1,ja:!1,ko:!1,lv:!1,lt:!1,nl:!1,no:!1,pl:!1,pt:!1,ro:!1,ru:!1,sk:!1,sl:!1,srCyrl:!1,srLatn:!1,sv:!1,th:!1,tr:!1,az:!1,uk:!1,vi:!1,zhHans:!1,zhHant:!1};function Lt(e,t){let n;function l(){n=wa(),n.run(()=>t.length?t(()=>{n==null||n.stop(),l()}):t())}Z(e,a=>{a&&!n?l():a||(n==null||n.stop(),n=void 0)},{immediate:!0}),Xe(()=>{n==null||n.stop()})}function ue(e,t,n){let l=arguments.length>3&&arguments[3]!==void 0?arguments[3]:f=>f,a=arguments.length>4&&arguments[4]!==void 0?arguments[4]:f=>f;const o=Oe("useProxiedModel"),i=W(e[t]!==void 0?e[t]:n),s=Yt(t),c=s!==t?h(()=>{var f,v,m,g;return e[t],!!(((f=o.vnode.props)!=null&&f.hasOwnProperty(t)||(v=o.vnode.props)!=null&&v.hasOwnProperty(s))&&((m=o.vnode.props)!=null&&m.hasOwnProperty(`onUpdate:${t}`)||(g=o.vnode.props)!=null&&g.hasOwnProperty(`onUpdate:${s}`)))}):h(()=>{var f,v;return e[t],!!((f=o.vnode.props)!=null&&f.hasOwnProperty(t)&&((v=o.vnode.props)!=null&&v.hasOwnProperty(`onUpdate:${t}`)))});Lt(()=>!c.value,()=>{Z(()=>e[t],f=>{i.value=f})});const d=h({get(){const f=e[t];return l(c.value?f:i.value)},set(f){const v=a(f),m=Mt(c.value?e[t]:i.value);m===v||l(m)===f||(i.value=v,o==null||o.emit(`update:${t}`,v))}});return Object.defineProperty(d,"externalValue",{get:()=>c.value?e[t]:i.value}),d}const Fo="$vuetify.",Oo=(e,t)=>e.replace(/\{(\d+)\}/g,(n,l)=>String(t[+l])),$i=(e,t,n)=>function(l){for(var a=arguments.length,o=new Array(a>1?a-1:0),i=1;i<a;i++)o[i-1]=arguments[i];if(!l.startsWith(Fo))return Oo(l,o);const s=l.replace(Fo,""),u=e.value&&n.value[e.value],c=t.value&&n.value[t.value];let d=Hl(u,s,null);return d||(`${l}${e.value}`,d=Hl(c,s,null)),d||(d=l),typeof d!="string"&&(d=l),Oo(d,o)};function Mi(e,t){return(n,l)=>new Intl.NumberFormat([e.value,t.value],l).format(n)}function Ml(e,t,n){const l=ue(e,t,e[t]??n.value);return l.value=e[t]??n.value,Z(n,a=>{e[t]==null&&(l.value=n.value)}),l}function Fi(e){return t=>{const n=Ml(t,"locale",e.current),l=Ml(t,"fallback",e.fallback),a=Ml(t,"messages",e.messages);return{name:"vuetify",current:n,fallback:l,messages:a,t:$i(n,l,a),n:Mi(n,l),provide:Fi({current:n,fallback:l,messages:a})}}}function lm(e){const t=K((e==null?void 0:e.locale)??"en"),n=K((e==null?void 0:e.fallback)??"en"),l=W({en:tm,...e==null?void 0:e.messages});return{name:"vuetify",current:t,fallback:n,messages:l,t:$i(t,n,l),n:Mi(t,n),provide:Fi({current:t,fallback:n,messages:l})}}const mn=Symbol.for("vuetify:locale");function am(e){return e.name!=null}function om(e){const t=e!=null&&e.adapter&&am(e==null?void 0:e.adapter)?e==null?void 0:e.adapter:lm(e),n=sm(t,e);return{...t,...n}}function ct(){const e=Ve(mn);if(!e)throw new Error("[Vuetify] Could not find injected locale instance");return e}function im(e){const t=Ve(mn);if(!t)throw new Error("[Vuetify] Could not find injected locale instance");const n=t.provide(e),l=rm(n,t.rtl,e),a={...n,...l};return $e(mn,a),a}function sm(e,t){const n=W((t==null?void 0:t.rtl)??nm),l=h(()=>n.value[e.current.value]??!1);return{isRtl:l,rtl:n,rtlClasses:h(()=>`v-locale--is-${l.value?"rtl":"ltr"}`)}}function rm(e,t,n){const l=h(()=>n.rtl??t.value[e.current.value]??!1);return{isRtl:l,rtl:t,rtlClasses:h(()=>`v-locale--is-${l.value?"rtl":"ltr"}`)}}function De(){const e=Ve(mn);if(!e)throw new Error("[Vuetify] Could not find injected rtl instance");return{isRtl:e.isRtl,rtlClasses:e.rtlClasses}}const Fn=Symbol.for("vuetify:theme"),he=R({theme:String},"theme"),Pn={defaultTheme:"light",variations:{colors:[],lighten:0,darken:0},themes:{light:{dark:!1,colors:{background:"#FFFFFF",surface:"#FFFFFF","surface-bright":"#FFFFFF","surface-variant":"#424242","on-surface-variant":"#EEEEEE",primary:"#6200EE","primary-darken-1":"#3700B3",secondary:"#03DAC6","secondary-darken-1":"#018786",error:"#B00020",info:"#2196F3",success:"#4CAF50",warning:"#FB8C00"},variables:{"border-color":"#000000","border-opacity":.12,"high-emphasis-opacity":.87,"medium-emphasis-opacity":.6,"disabled-opacity":.38,"idle-opacity":.04,"hover-opacity":.04,"focus-opacity":.12,"selected-opacity":.08,"activated-opacity":.12,"pressed-opacity":.12,"dragged-opacity":.08,"theme-kbd":"#212529","theme-on-kbd":"#FFFFFF","theme-code":"#F5F5F5","theme-on-code":"#000000"}},dark:{dark:!0,colors:{background:"#121212",surface:"#212121","surface-bright":"#ccbfd6","surface-variant":"#a3a3a3","on-surface-variant":"#424242",primary:"#BB86FC","primary-darken-1":"#3700B3",secondary:"#03DAC5","secondary-darken-1":"#03DAC5",error:"#CF6679",info:"#2196F3",success:"#4CAF50",warning:"#FB8C00"},variables:{"border-color":"#FFFFFF","border-opacity":.12,"high-emphasis-opacity":1,"medium-emphasis-opacity":.7,"disabled-opacity":.5,"idle-opacity":.1,"hover-opacity":.04,"focus-opacity":.12,"selected-opacity":.08,"activated-opacity":.12,"pressed-opacity":.16,"dragged-opacity":.08,"theme-kbd":"#212529","theme-on-kbd":"#FFFFFF","theme-code":"#343434","theme-on-code":"#CCCCCC"}}}};function um(){var n,l;let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Pn;if(!e)return{...Pn,isDisabled:!0};const t={};for(const[a,o]of Object.entries(e.themes??{})){const i=o.dark||a==="dark"?(n=Pn.themes)==null?void 0:n.dark:(l=Pn.themes)==null?void 0:l.light;t[a]=it(i,o)}return it(Pn,{...e,themes:t})}function cm(e){const t=um(e),n=W(t.defaultTheme),l=W(t.themes),a=h(()=>{const d={};for(const[f,v]of Object.entries(l.value)){const m=d[f]={...v,colors:{...v.colors}};if(t.variations)for(const g of t.variations.colors){const y=m.colors[g];if(y)for(const b of["lighten","darken"]){const p=b==="lighten"?Mf:Ff;for(const S of xt(t.variations[b],1))m.colors[`${g}-${b}-${S}`]=Pi(p(st(y),S))}}for(const g of Object.keys(m.colors)){if(/^on-[a-z]/.test(g)||m.colors[`on-${g}`])continue;const y=`on-${g}`,b=st(m.colors[g]);m.colors[y]=Ri(b)}}return d}),o=h(()=>a.value[n.value]),i=h(()=>{const d=[];o.value.dark&&jt(d,":root",["color-scheme: dark"]),jt(d,":root",Do(o.value));for(const[g,y]of Object.entries(a.value))jt(d,`.v-theme--${g}`,[`color-scheme: ${y.dark?"dark":"normal"}`,...Do(y)]);const f=[],v=[],m=new Set(Object.values(a.value).flatMap(g=>Object.keys(g.colors)));for(const g of m)/^on-[a-z]/.test(g)?jt(v,`.${g}`,[`color: rgb(var(--v-theme-${g})) !important`]):(jt(f,`.bg-${g}`,[`--v-theme-overlay-multiplier: var(--v-theme-${g}-overlay-multiplier)`,`background-color: rgb(var(--v-theme-${g})) !important`,`color: rgb(var(--v-theme-on-${g})) !important`]),jt(v,`.text-${g}`,[`color: rgb(var(--v-theme-${g})) !important`]),jt(v,`.border-${g}`,[`--v-border-color: var(--v-theme-${g})`]));return d.push(...f,...v),d.map((g,y)=>y===0?g:`    ${g}`).join("")});function s(){return{style:[{children:i.value,id:"vuetify-theme-stylesheet",nonce:t.cspNonce||!1}]}}function u(d){if(t.isDisabled)return;const f=d._context.provides.usehead;if(f)if(f.push){const v=f.push(s);Ce&&Z(i,()=>{v.patch(s)})}else Ce?(f.addHeadObjs(h(s)),tt(()=>f.updateDOM())):f.addHeadObjs(s());else{let m=function(){if(typeof document<"u"&&!v){const g=document.createElement("style");g.type="text/css",g.id="vuetify-theme-stylesheet",t.cspNonce&&g.setAttribute("nonce",t.cspNonce),v=g,document.head.appendChild(v)}v&&(v.innerHTML=i.value)},v=Ce?document.getElementById("vuetify-theme-stylesheet"):null;Ce?Z(i,m,{immediate:!0}):m()}}const c=h(()=>t.isDisabled?void 0:`v-theme--${n.value}`);return{install:u,isDisabled:t.isDisabled,name:n,themes:l,current:o,computedThemes:a,themeClasses:c,styles:i,global:{name:n,current:o}}}function ye(e){Oe("provideTheme");const t=Ve(Fn,null);if(!t)throw new Error("Could not find Vuetify theme injection");const n=h(()=>e.theme??t.name.value),l=h(()=>t.themes.value[n.value]),a=h(()=>t.isDisabled?void 0:`v-theme--${n.value}`),o={...t,name:n,current:l,themeClasses:a};return $e(Fn,o),o}function Oi(){Oe("useTheme");const e=Ve(Fn,null);if(!e)throw new Error("Could not find Vuetify theme injection");return e}function jt(e,t,n){e.push(`${t} {
`,...n.map(l=>`  ${l};
`),`}
`)}function Do(e){const t=e.dark?2:1,n=e.dark?1:2,l=[];for(const[a,o]of Object.entries(e.colors)){const i=st(o);l.push(`--v-theme-${a}: ${i.r},${i.g},${i.b}`),a.startsWith("on-")||l.push(`--v-theme-${a}-overlay-multiplier: ${Yl(o)>.18?t:n}`)}for(const[a,o]of Object.entries(e.variables)){const i=typeof o=="string"&&o.startsWith("#")?st(o):void 0,s=i?`${i.r}, ${i.g}, ${i.b}`:void 0;l.push(`--v-${a}: ${s??o}`)}return l}const Zl={"001":1,AD:1,AE:6,AF:6,AG:0,AI:1,AL:1,AM:1,AN:1,AR:1,AS:0,AT:1,AU:1,AX:1,AZ:1,BA:1,BD:0,BE:1,BG:1,BH:6,BM:1,BN:1,BR:0,BS:0,BT:0,BW:0,BY:1,BZ:0,CA:0,CH:1,CL:1,CM:1,CN:1,CO:0,CR:1,CY:1,CZ:1,DE:1,DJ:6,DK:1,DM:0,DO:0,DZ:6,EC:1,EE:1,EG:6,ES:1,ET:0,FI:1,FJ:1,FO:1,FR:1,GB:1,"GB-alt-variant":0,GE:1,GF:1,GP:1,GR:1,GT:0,GU:0,HK:0,HN:0,HR:1,HU:1,ID:0,IE:1,IL:0,IN:0,IQ:6,IR:6,IS:1,IT:1,JM:0,JO:6,JP:0,KE:0,KG:1,KH:0,KR:0,KW:6,KZ:1,LA:0,LB:1,LI:1,LK:1,LT:1,LU:1,LV:1,LY:6,MC:1,MD:1,ME:1,MH:0,MK:1,MM:0,MN:1,MO:0,MQ:1,MT:0,MV:5,MX:0,MY:1,MZ:0,NI:0,NL:1,NO:1,NP:0,NZ:1,OM:6,PA:0,PE:0,PH:0,PK:0,PL:1,PR:0,PT:0,PY:0,QA:6,RE:1,RO:1,RS:1,RU:1,SA:0,SD:6,SE:1,SG:0,SI:1,SK:1,SM:1,SV:0,SY:6,TH:0,TJ:1,TM:1,TR:1,TT:0,TW:0,UA:1,UM:0,US:0,UY:1,UZ:1,VA:1,VE:0,VI:0,VN:1,WS:0,XK:1,YE:0,ZA:0,ZW:0};function dm(e,t){const n=[];let l=[];const a=Di(e),o=Ni(e),i=(a.getDay()-Zl[t.slice(-2).toUpperCase()]+7)%7,s=(o.getDay()-Zl[t.slice(-2).toUpperCase()]+7)%7;for(let u=0;u<i;u++){const c=new Date(a);c.setDate(c.getDate()-(i-u)),l.push(c)}for(let u=1;u<=o.getDate();u++){const c=new Date(e.getFullYear(),e.getMonth(),u);l.push(c),l.length===7&&(n.push(l),l=[])}for(let u=1;u<7-s;u++){const c=new Date(o);c.setDate(c.getDate()+u),l.push(c)}return n.push(l),n}function Di(e){return new Date(e.getFullYear(),e.getMonth(),1)}function Ni(e){return new Date(e.getFullYear(),e.getMonth()+1,0)}function vm(e){const t=e.split("-").map(Number);return new Date(t[0],t[1]-1,t[2])}const fm=/([12]\d{3}-([1-9]|0[1-9]|1[0-2])-([1-9]|0[1-9]|[12]\d|3[01]))/;function mm(e){if(e==null)return new Date;if(e instanceof Date)return e;if(typeof e=="string"){let t;if(fm.test(e))return vm(e);if(t=Date.parse(e),!isNaN(t))return new Date(t)}return null}const No=new Date(2e3,0,2);function gm(e){const t=Zl[e.slice(-2).toUpperCase()];return xt(7).map(n=>{const l=new Date(No);return l.setDate(No.getDate()+t+n),new Intl.DateTimeFormat(e,{weekday:"narrow"}).format(l)})}function hm(e,t,n){const l=new Date(e);let a={};switch(t){case"fullDateWithWeekday":a={weekday:"long",day:"numeric",month:"long",year:"numeric"};break;case"normalDateWithWeekday":a={weekday:"short",day:"numeric",month:"short"};break;case"keyboardDate":a={};break;case"monthAndDate":a={month:"long",day:"numeric"};break;case"monthAndYear":a={month:"long",year:"numeric"};break;case"dayOfMonth":a={day:"numeric"};break;case"shortDate":a={year:"numeric"};break;default:a={timeZone:"UTC",timeZoneName:"short"}}return new Intl.DateTimeFormat(n,a).format(l)}function ym(e,t){const n=new Date(e);return n.setDate(n.getDate()+t),n}function bm(e,t){const n=new Date(e);return n.setMonth(n.getMonth()+t),n}function pm(e){return e.getFullYear()}function km(e){return e.getMonth()}function Sm(e){return new Date(e.getFullYear(),0,1)}function wm(e){return new Date(e.getFullYear(),11,31)}function Cm(e,t){return Jl(e,t[0])&&Vm(e,t[1])}function xm(e){if(!e||e==null)return!1;const t=new Date(e);return t instanceof Date&&!isNaN(t.getTime())}function Jl(e,t){return e.getTime()>t.getTime()}function Vm(e,t){return e.getTime()<t.getTime()}function zo(e,t){return e.getTime()===t.getTime()}function _m(e,t){return e.getDate()===t.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function Im(e,t){return e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function Tm(e,t,n){const l=new Date(e),a=new Date(t);return n==="month"?l.getMonth()-a.getMonth()+(l.getFullYear()-a.getFullYear())*12:Math.floor((l.getTime()-a.getTime())/(1e3*60*60*24))}function Pm(e,t){const n=new Date(e);return n.setFullYear(t),n}function Am(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate())}function Bm(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate(),23,59,59,999)}class Rm{constructor(t){this.locale=t.locale}date(t){return mm(t)}toJsDate(t){return t}addDays(t,n){return ym(t,n)}addMonths(t,n){return bm(t,n)}getWeekArray(t){return dm(t,this.locale)}startOfMonth(t){return Di(t)}endOfMonth(t){return Ni(t)}format(t,n){return hm(t,n,this.locale)}isEqual(t,n){return zo(t,n)}isValid(t){return xm(t)}isWithinRange(t,n){return Cm(t,n)}isAfter(t,n){return Jl(t,n)}isBefore(t,n){return!Jl(t,n)&&!zo(t,n)}isSameDay(t,n){return _m(t,n)}isSameMonth(t,n){return Im(t,n)}setYear(t,n){return Pm(t,n)}getDiff(t,n,l){return Tm(t,n,l)}getWeekdays(){return gm(this.locale)}getYear(t){return pm(t)}getMonth(t){return km(t)}startOfDay(t){return Am(t)}endOfDay(t){return Bm(t)}startOfYear(t){return Sm(t)}endOfYear(t){return wm(t)}}const Ho=Symbol.for("vuetify:date-adapter");function Em(e){return it({adapter:Rm,locale:{af:"af-ZA",bg:"bg-BG",ca:"ca-ES",ckb:"",cs:"",de:"de-DE",el:"el-GR",en:"en-US",et:"et-EE",fa:"fa-IR",fi:"fi-FI",hr:"hr-HR",hu:"hu-HU",he:"he-IL",id:"id-ID",it:"it-IT",ja:"ja-JP",ko:"ko-KR",lv:"lv-LV",lt:"lt-LT",nl:"nl-NL",no:"nn-NO",pl:"pl-PL",pt:"pt-PT",ro:"ro-RO",ru:"ru-RU",sk:"sk-SK",sl:"sl-SI",srCyrl:"sr-SP",srLatn:"sr-SP",sv:"sv-SE",th:"th-TH",tr:"tr-TR",az:"az-AZ",uk:"uk-UA",vi:"vi-VN",zhHans:"zh-CN",zhHant:"zh-TW"}},e)}function wt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"content";const n=W(),l=W();if(Ce){const a=new ResizeObserver(o=>{e==null||e(o,a),o.length&&(t==="content"?l.value=o[0].contentRect:l.value=o[0].target.getBoundingClientRect())});nt(()=>{a.disconnect()}),Z(n,(o,i)=>{i&&(a.unobserve(jl(i)),l.value=void 0),o&&a.observe(jl(o))},{flush:"post"})}return{resizeRef:n,contentRect:Ca(l)}}const fl=Symbol.for("vuetify:layout"),zi=Symbol.for("vuetify:layout-item"),jo=1e3,Hi=R({overlaps:{type:Array,default:()=>[]},fullHeight:Boolean},"layout"),bn=R({name:{type:String},order:{type:[Number,String],default:0},absolute:Boolean},"layout-item");function Lm(){const e=Ve(fl);if(!e)throw new Error("[Vuetify] Could not find injected layout");return{getLayoutItem:e.getLayoutItem,mainRect:e.mainRect,mainStyles:e.mainStyles}}function pn(e){const t=Ve(fl);if(!t)throw new Error("[Vuetify] Could not find injected layout");const n=e.id??`layout-item-${We()}`,l=Oe("useLayoutItem");$e(zi,{id:n});const a=K(!1);$r(()=>a.value=!0),Mr(()=>a.value=!1);const{layoutItemStyles:o,layoutItemScrimStyles:i}=t.register(l,{...e,active:h(()=>a.value?!1:e.active.value),id:n});return nt(()=>t.unregister(n)),{layoutItemStyles:o,layoutRect:t.layoutRect,layoutItemScrimStyles:i}}const $m=(e,t,n,l)=>{let a={top:0,left:0,right:0,bottom:0};const o=[{id:"",layer:{...a}}];for(const i of e){const s=t.get(i),u=n.get(i),c=l.get(i);if(!s||!u||!c)continue;const d={...a,[s.value]:parseInt(a[s.value],10)+(c.value?parseInt(u.value,10):0)};o.push({id:i,layer:d}),a=d}return o};function ji(e){const t=Ve(fl,null),n=h(()=>t?t.rootZIndex.value-100:jo),l=W([]),a=gt(new Map),o=gt(new Map),i=gt(new Map),s=gt(new Map),u=gt(new Map),{resizeRef:c,contentRect:d}=wt(),f=h(()=>{const x=new Map,T=e.overlaps??[];for(const w of T.filter(k=>k.includes(":"))){const[k,I]=w.split(":");if(!l.value.includes(k)||!l.value.includes(I))continue;const A=a.get(k),B=a.get(I),E=o.get(k),F=o.get(I);!A||!B||!E||!F||(x.set(I,{position:A.value,amount:parseInt(E.value,10)}),x.set(k,{position:B.value,amount:-parseInt(F.value,10)}))}return x}),v=h(()=>{const x=[...new Set([...i.values()].map(w=>w.value))].sort((w,k)=>w-k),T=[];for(const w of x){const k=l.value.filter(I=>{var A;return((A=i.get(I))==null?void 0:A.value)===w});T.push(...k)}return $m(T,a,o,s)}),m=h(()=>!Array.from(u.values()).some(x=>x.value)),g=h(()=>v.value[v.value.length-1].layer),y=h(()=>({"--v-layout-left":J(g.value.left),"--v-layout-right":J(g.value.right),"--v-layout-top":J(g.value.top),"--v-layout-bottom":J(g.value.bottom),...m.value?void 0:{transition:"none"}})),b=h(()=>v.value.slice(1).map((x,T)=>{let{id:w}=x;const{layer:k}=v.value[T],I=o.get(w),A=a.get(w);return{id:w,...k,size:Number(I.value),position:A.value}})),p=x=>b.value.find(T=>T.id===x),S=Oe("createLayout"),C=K(!1);Je(()=>{C.value=!0}),$e(fl,{register:(x,T)=>{let{id:w,order:k,position:I,layoutSize:A,elementSize:B,active:E,disableTransitions:F,absolute:X}=T;i.set(w,k),a.set(w,I),o.set(w,A),s.set(w,E),F&&u.set(w,F);const N=Rn(zi,S==null?void 0:S.vnode).indexOf(x);N>-1?l.value.splice(N,0,w):l.value.push(w);const M=h(()=>b.value.findIndex(ae=>ae.id===w)),G=h(()=>n.value+v.value.length*2-M.value*2),U=h(()=>{const ae=I.value==="left"||I.value==="right",re=I.value==="right",ve=I.value==="bottom",ge={[I.value]:0,zIndex:G.value,transform:`translate${ae?"X":"Y"}(${(E.value?0:-110)*(re||ve?-1:1)}%)`,position:X.value||n.value!==jo?"absolute":"fixed",...m.value?void 0:{transition:"none"}};if(!C.value)return ge;const D=b.value[M.value];if(!D)throw new Error(`[Vuetify] Could not find layout item "${w}"`);const me=f.value.get(w);return me&&(D[me.position]+=me.amount),{...ge,height:ae?`calc(100% - ${D.top}px - ${D.bottom}px)`:B.value?`${B.value}px`:void 0,left:re?void 0:`${D.left}px`,right:re?`${D.right}px`:void 0,top:I.value!=="bottom"?`${D.top}px`:void 0,bottom:I.value!=="top"?`${D.bottom}px`:void 0,width:ae?B.value?`${B.value}px`:void 0:`calc(100% - ${D.left}px - ${D.right}px)`}}),z=h(()=>({zIndex:G.value-1}));return{layoutItemStyles:U,layoutItemScrimStyles:z,zIndex:G}},unregister:x=>{i.delete(x),a.delete(x),o.delete(x),s.delete(x),u.delete(x),l.value=l.value.filter(T=>T!==x)},mainRect:g,mainStyles:y,getLayoutItem:p,items:b,layoutRect:d,rootZIndex:n});const _=h(()=>["v-layout",{"v-layout--full-height":e.fullHeight}]),V=h(()=>({zIndex:t?n.value:void 0,position:t?"relative":void 0,overflow:t?"hidden":void 0}));return{layoutClasses:_,layoutStyles:V,getLayoutItem:p,items:b,layoutRect:d,layoutRef:c}}function Ui(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const{blueprint:t,...n}=e,l=it(t,n),{aliases:a={},components:o={},directives:i={}}=l,s=Uf(l.defaults),u=Kf(l.display,l.ssr),c=cm(l.theme),d=Qf(l.icons),f=om(l.locale),v=Em(l.date);return{install:g=>{for(const y in i)g.directive(y,i[y]);for(const y in o)g.component(y,o[y]);for(const y in a)g.component(y,ut({...a[y],name:y,aliasName:a[y].name}));if(c.install(g),g.provide(fn,s),g.provide(Kl,u),g.provide(Fn,c),g.provide(ql,d),g.provide(mn,f),g.provide(Ho,v),Ce&&l.ssr)if(g.$nuxt)g.$nuxt.hook("app:suspense:resolve",()=>{u.update()});else{const{mount:y}=g;g.mount=function(){const b=y(...arguments);return xe(()=>u.update()),g.mount=y,b}}We.reset(),g.mixin({computed:{$vuetify(){return gt({defaults:un.call(this,fn),display:un.call(this,Kl),theme:un.call(this,Fn),icons:un.call(this,ql),locale:un.call(this,mn),date:un.call(this,Ho)})}}})},defaults:s,display:u,theme:c,icons:d,locale:f,date:v}}const Mm="3.3.19";Ui.version=Mm;function un(e){var l,a;const t=this.$,n=((l=t.parent)==null?void 0:l.provides)??((a=t.vnode.appContext)==null?void 0:a.provides);if(n&&e in n)return n[e]}const Fm=R({...q(),...Hi({fullHeight:!0}),...he()},"VApp"),Om=L()({name:"VApp",props:Fm(),setup(e,t){let{slots:n}=t;const l=ye(e),{layoutClasses:a,getLayoutItem:o,items:i,layoutRef:s}=ji(e),{rtlClasses:u}=De();return j(()=>{var c;return r("div",{ref:s,class:["v-application",l.themeClasses.value,a.value,u.value,e.class],style:[e.style]},[r("div",{class:"v-application__wrap"},[(c=n.default)==null?void 0:c.call(n)])])}),{getLayoutItem:o,items:i,theme:l}}});const ce=R({tag:{type:String,default:"div"}},"tag"),Gi=R({text:String,...q(),...ce()},"VToolbarTitle"),za=L()({name:"VToolbarTitle",props:Gi(),setup(e,t){let{slots:n}=t;return j(()=>{const l=!!(n.default||n.text||e.text);return r(e.tag,{class:["v-toolbar-title",e.class],style:e.style},{default:()=>{var a;return[l&&r("div",{class:"v-toolbar-title__placeholder"},[n.text?n.text():e.text,(a=n.default)==null?void 0:a.call(n)])]}})}),{}}}),Dm=R({disabled:Boolean,group:Boolean,hideOnLeave:Boolean,leaveAbsolute:Boolean,mode:String,origin:String},"transition");function lt(e,t,n){return L()({name:e,props:Dm({mode:n,origin:t}),setup(l,a){let{slots:o}=a;const i={onBeforeEnter(s){l.origin&&(s.style.transformOrigin=l.origin)},onLeave(s){if(l.leaveAbsolute){const{offsetTop:u,offsetLeft:c,offsetWidth:d,offsetHeight:f}=s;s._transitionInitialStyles={position:s.style.position,top:s.style.top,left:s.style.left,width:s.style.width,height:s.style.height},s.style.position="absolute",s.style.top=`${u}px`,s.style.left=`${c}px`,s.style.width=`${d}px`,s.style.height=`${f}px`}l.hideOnLeave&&s.style.setProperty("display","none","important")},onAfterLeave(s){if(l.leaveAbsolute&&(s!=null&&s._transitionInitialStyles)){const{position:u,top:c,left:d,width:f,height:v}=s._transitionInitialStyles;delete s._transitionInitialStyles,s.style.position=u||"",s.style.top=c||"",s.style.left=d||"",s.style.width=f||"",s.style.height=v||""}}};return()=>{const s=l.group?Fr:Et;return Qt(s,{name:l.disabled?"":e,css:!l.disabled,...l.group?void 0:{mode:l.mode},...l.disabled?{}:i},o.default)}}})}function Wi(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"in-out";return L()({name:e,props:{mode:{type:String,default:n},disabled:Boolean},setup(l,a){let{slots:o}=a;return()=>Qt(Et,{name:l.disabled?"":e,css:!l.disabled,...l.disabled?{}:t},o.default)}})}function Yi(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"";const n=(arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1)?"width":"height",l=ui(`offset-${n}`);return{onBeforeEnter(i){i._parent=i.parentNode,i._initialStyle={transition:i.style.transition,overflow:i.style.overflow,[n]:i.style[n]}},onEnter(i){const s=i._initialStyle;i.style.setProperty("transition","none","important"),i.style.overflow="hidden";const u=`${i[l]}px`;i.style[n]="0",i.offsetHeight,i.style.transition=s.transition,e&&i._parent&&i._parent.classList.add(e),requestAnimationFrame(()=>{i.style[n]=u})},onAfterEnter:o,onEnterCancelled:o,onLeave(i){i._initialStyle={transition:"",overflow:i.style.overflow,[n]:i.style[n]},i.style.overflow="hidden",i.style[n]=`${i[l]}px`,i.offsetHeight,requestAnimationFrame(()=>i.style[n]="0")},onAfterLeave:a,onLeaveCancelled:a};function a(i){e&&i._parent&&i._parent.classList.remove(e),o(i)}function o(i){const s=i._initialStyle[n];i.style.overflow=i._initialStyle.overflow,s!=null&&(i.style[n]=s),delete i._initialStyle}}const Nm=R({target:Object},"v-dialog-transition"),pl=L()({name:"VDialogTransition",props:Nm(),setup(e,t){let{slots:n}=t;const l={onBeforeEnter(a){a.style.pointerEvents="none",a.style.visibility="hidden"},async onEnter(a,o){var v;await new Promise(m=>requestAnimationFrame(m)),await new Promise(m=>requestAnimationFrame(m)),a.style.visibility="";const{x:i,y:s,sx:u,sy:c,speed:d}=Go(e.target,a),f=Gt(a,[{transform:`translate(${i}px, ${s}px) scale(${u}, ${c})`,opacity:0},{}],{duration:225*d,easing:Df});(v=Uo(a))==null||v.forEach(m=>{Gt(m,[{opacity:0},{opacity:0,offset:.33},{}],{duration:225*2*d,easing:Mn})}),f.finished.then(()=>o())},onAfterEnter(a){a.style.removeProperty("pointer-events")},onBeforeLeave(a){a.style.pointerEvents="none"},async onLeave(a,o){var v;await new Promise(m=>requestAnimationFrame(m));const{x:i,y:s,sx:u,sy:c,speed:d}=Go(e.target,a);Gt(a,[{},{transform:`translate(${i}px, ${s}px) scale(${u}, ${c})`,opacity:0}],{duration:125*d,easing:Nf}).finished.then(()=>o()),(v=Uo(a))==null||v.forEach(m=>{Gt(m,[{},{opacity:0,offset:.2},{opacity:0}],{duration:125*2*d,easing:Mn})})},onAfterLeave(a){a.style.removeProperty("pointer-events")}};return()=>e.target?r(Et,Y({name:"dialog-transition"},l,{css:!1}),n):r(Et,{name:"dialog-transition"},n)}});function Uo(e){var n;const t=(n=e.querySelector(":scope > .v-card, :scope > .v-sheet, :scope > .v-list"))==null?void 0:n.children;return t&&[...t]}function Go(e,t){const n=e.getBoundingClientRect(),l=Ea(t),[a,o]=getComputedStyle(t).transformOrigin.split(" ").map(p=>parseFloat(p)),[i,s]=getComputedStyle(t).getPropertyValue("--v-overlay-anchor-origin").split(" ");let u=n.left+n.width/2;i==="left"||s==="left"?u-=n.width/2:(i==="right"||s==="right")&&(u+=n.width/2);let c=n.top+n.height/2;i==="top"||s==="top"?c-=n.height/2:(i==="bottom"||s==="bottom")&&(c+=n.height/2);const d=n.width/l.width,f=n.height/l.height,v=Math.max(1,d,f),m=d/v||0,g=f/v||0,y=l.width*l.height/(window.innerWidth*window.innerHeight),b=y>.12?Math.min(1.5,(y-.12)*10+1):1;return{x:u-(a+l.left),y:c-(o+l.top),sx:m,sy:g,speed:b}}const zm=lt("fab-transition","center center","out-in"),Hm=lt("dialog-bottom-transition"),jm=lt("dialog-top-transition"),Ql=lt("fade-transition"),Ha=lt("scale-transition"),Um=lt("scroll-x-transition"),Gm=lt("scroll-x-reverse-transition"),Wm=lt("scroll-y-transition"),Ym=lt("scroll-y-reverse-transition"),Km=lt("slide-x-transition"),qm=lt("slide-x-reverse-transition"),ja=lt("slide-y-transition"),Xm=lt("slide-y-reverse-transition"),kl=Wi("expand-transition",Yi()),Ua=Wi("expand-x-transition",Yi("",!0)),Zm=R({defaults:Object,disabled:Boolean,reset:[Number,String],root:[Boolean,String],scoped:Boolean},"VDefaultsProvider"),pe=L(!1)({name:"VDefaultsProvider",props:Zm(),setup(e,t){let{slots:n}=t;const{defaults:l,disabled:a,reset:o,root:i,scoped:s}=Sa(e);return Ee(l,{reset:o,root:i,scoped:s,disabled:a}),()=>{var u;return(u=n.default)==null?void 0:u.call(n)}}});const dt=R({height:[Number,String],maxHeight:[Number,String],maxWidth:[Number,String],minHeight:[Number,String],minWidth:[Number,String],width:[Number,String]},"dimension");function vt(e){return{dimensionStyles:h(()=>({height:J(e.height),maxHeight:J(e.maxHeight),maxWidth:J(e.maxWidth),minHeight:J(e.minHeight),minWidth:J(e.minWidth),width:J(e.width)}))}}function Jm(e){return{aspectStyles:h(()=>{const t=Number(e.aspectRatio);return t?{paddingBottom:String(1/t*100)+"%"}:void 0})}}const Ki=R({aspectRatio:[String,Number],contentClass:String,inline:Boolean,...q(),...dt()},"VResponsive"),ea=L()({name:"VResponsive",props:Ki(),setup(e,t){let{slots:n}=t;const{aspectStyles:l}=Jm(e),{dimensionStyles:a}=vt(e);return j(()=>{var o;return r("div",{class:["v-responsive",{"v-responsive--inline":e.inline},e.class],style:[a.value,e.style]},[r("div",{class:"v-responsive__sizer",style:l.value},null),(o=n.additional)==null?void 0:o.call(n),n.default&&r("div",{class:["v-responsive__content",e.contentClass]},[n.default()])])}),{}}}),Pt=R({transition:{type:[Boolean,String,Object],default:"fade-transition",validator:e=>e!==!0}},"transition"),ht=(e,t)=>{let{slots:n}=t;const{transition:l,disabled:a,...o}=e,{component:i=Et,...s}=typeof l=="object"?l:{};return Qt(i,Y(typeof l=="string"?{name:a?"":l}:s,o,{disabled:a}),n)};function Qm(e,t){if(!Pa)return;const n=t.modifiers||{},l=t.value,{handler:a,options:o}=typeof l=="object"?l:{handler:l,options:{}},i=new IntersectionObserver(function(){var f;let s=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],u=arguments.length>1?arguments[1]:void 0;const c=(f=e._observe)==null?void 0:f[t.instance.$.uid];if(!c)return;const d=s.some(v=>v.isIntersecting);a&&(!n.quiet||c.init)&&(!n.once||d||c.init)&&a(d,s,u),d&&n.once?qi(e,t):c.init=!0},o);e._observe=Object(e._observe),e._observe[t.instance.$.uid]={init:!1,observer:i},i.observe(e)}function qi(e,t){var l;const n=(l=e._observe)==null?void 0:l[t.instance.$.uid];n&&(n.observer.unobserve(e),delete e._observe[t.instance.$.uid])}const Un={mounted:Qm,unmounted:qi},Xi=R({alt:String,cover:Boolean,eager:Boolean,gradient:String,lazySrc:String,options:{type:Object,default:()=>({root:void 0,rootMargin:void 0,threshold:void 0})},sizes:String,src:{type:[String,Object],default:""},srcset:String,...Ki(),...q(),...Pt()},"VImg"),Xt=L()({name:"VImg",directives:{intersect:Un},props:Xi(),emits:{loadstart:e=>!0,load:e=>!0,error:e=>!0},setup(e,t){let{emit:n,slots:l}=t;const a=K(""),o=W(),i=K(e.eager?"loading":"idle"),s=K(),u=K(),c=h(()=>e.src&&typeof e.src=="object"?{src:e.src.src,srcset:e.srcset||e.src.srcset,lazySrc:e.lazySrc||e.src.lazySrc,aspect:Number(e.aspectRatio||e.src.aspect||0)}:{src:e.src,srcset:e.srcset,lazySrc:e.lazySrc,aspect:Number(e.aspectRatio||0)}),d=h(()=>c.value.aspect||s.value/u.value||0);Z(()=>e.src,()=>{f(i.value!=="idle")}),Z(d,(w,k)=>{!w&&k&&o.value&&b(o.value)}),xa(()=>f());function f(w){if(!(e.eager&&w)&&!(Pa&&!w&&!e.eager)){if(i.value="loading",c.value.lazySrc){const k=new Image;k.src=c.value.lazySrc,b(k,null)}c.value.src&&xe(()=>{var k,I;if(n("loadstart",((k=o.value)==null?void 0:k.currentSrc)||c.value.src),(I=o.value)!=null&&I.complete){if(o.value.naturalWidth||m(),i.value==="error")return;d.value||b(o.value,null),v()}else d.value||b(o.value),g()})}}function v(){var w;g(),i.value="loaded",n("load",((w=o.value)==null?void 0:w.currentSrc)||c.value.src)}function m(){var w;i.value="error",n("error",((w=o.value)==null?void 0:w.currentSrc)||c.value.src)}function g(){const w=o.value;w&&(a.value=w.currentSrc||w.src)}let y=-1;function b(w){let k=arguments.length>1&&arguments[1]!==void 0?arguments[1]:100;const I=()=>{clearTimeout(y);const{naturalHeight:A,naturalWidth:B}=w;A||B?(s.value=B,u.value=A):!w.complete&&i.value==="loading"&&k!=null?y=window.setTimeout(I,k):(w.currentSrc.endsWith(".svg")||w.currentSrc.startsWith("data:image/svg+xml"))&&(s.value=1,u.value=1)};I()}const p=h(()=>({"v-img__img--cover":e.cover,"v-img__img--contain":!e.cover})),S=()=>{var I;if(!c.value.src||i.value==="idle")return null;const w=r("img",{class:["v-img__img",p.value],src:c.value.src,srcset:c.value.srcset,alt:e.alt,sizes:e.sizes,ref:o,onLoad:v,onError:m},null),k=(I=l.sources)==null?void 0:I.call(l);return r(ht,{transition:e.transition,appear:!0},{default:()=>[ne(k?r("picture",{class:"v-img__picture"},[k,w]):w,[[Pe,i.value==="loaded"]])]})},C=()=>r(ht,{transition:e.transition},{default:()=>[c.value.lazySrc&&i.value!=="loaded"&&r("img",{class:["v-img__img","v-img__img--preload",p.value],src:c.value.lazySrc,alt:e.alt},null)]}),_=()=>l.placeholder?r(ht,{transition:e.transition,appear:!0},{default:()=>[(i.value==="loading"||i.value==="error"&&!l.error)&&r("div",{class:"v-img__placeholder"},[l.placeholder()])]}):null,V=()=>l.error?r(ht,{transition:e.transition,appear:!0},{default:()=>[i.value==="error"&&r("div",{class:"v-img__error"},[l.error()])]}):null,x=()=>e.gradient?r("div",{class:"v-img__gradient",style:{backgroundImage:`linear-gradient(${e.gradient})`}},null):null,T=K(!1);{const w=Z(d,k=>{k&&(requestAnimationFrame(()=>{requestAnimationFrame(()=>{T.value=!0})}),w())})}return j(()=>{const[w]=ea.filterProps(e);return ne(r(ea,Y({class:["v-img",{"v-img--booting":!T.value},e.class],style:[{width:J(e.width==="auto"?s.value:e.width)},e.style]},w,{aspectRatio:d.value,"aria-label":e.alt,role:e.alt?"img":void 0}),{additional:()=>r(oe,null,[r(S,null,null),r(C,null,null),r(x,null,null),r(_,null,null),r(V,null,null)]),default:l.default}),[[Ze("intersect"),{handler:f,options:e.options},null,{once:!0}]])}),{currentSrc:a,image:o,state:i,naturalWidth:s,naturalHeight:u}}}),at=R({border:[Boolean,Number,String]},"border");function ft(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{borderClasses:h(()=>{const l=jn(e)?e.value:e.border,a=[];if(l===!0||l==="")a.push(`${t}--border`);else if(typeof l=="string"||l===0)for(const o of String(l).split(" "))a.push(`border-${o}`);return a})}}function Ga(e){return Ba(()=>{const t=[],n={};if(e.value.background)if(Ao(e.value.background)){if(n.backgroundColor=e.value.background,!e.value.text){const l=st(e.value.background);if(l.a==null||l.a===1){const a=Ri(l);n.color=a,n.caretColor=a}}}else t.push(`bg-${e.value.background}`);return e.value.text&&(Ao(e.value.text)?(n.color=e.value.text,n.caretColor=e.value.text):t.push(`text-${e.value.text}`)),{colorClasses:t,colorStyles:n}})}function Ge(e,t){const n=h(()=>({text:jn(e)?e.value:t?e[t]:null})),{colorClasses:l,colorStyles:a}=Ga(n);return{textColorClasses:l,textColorStyles:a}}function Be(e,t){const n=h(()=>({background:jn(e)?e.value:t?e[t]:null})),{colorClasses:l,colorStyles:a}=Ga(n);return{backgroundColorClasses:l,backgroundColorStyles:a}}const Me=R({elevation:{type:[Number,String],validator(e){const t=parseInt(e);return!isNaN(t)&&t>=0&&t<=24}}},"elevation");function He(e){return{elevationClasses:h(()=>{const n=jn(e)?e.value:e.elevation,l=[];return n==null||l.push(`elevation-${n}`),l})}}const Ie=R({rounded:{type:[Boolean,Number,String],default:void 0}},"rounded");function Ae(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{roundedClasses:h(()=>{const l=jn(e)?e.value:e.rounded,a=[];if(l===!0||l==="")a.push(`${t}--rounded`);else if(typeof l=="string"||l===0)for(const o of String(l).split(" "))a.push(`rounded-${o}`);return a})}}const eg=[null,"prominent","default","comfortable","compact"],Zi=R({absolute:Boolean,collapse:Boolean,color:String,density:{type:String,default:"default",validator:e=>eg.includes(e)},extended:Boolean,extensionHeight:{type:[Number,String],default:48},flat:Boolean,floating:Boolean,height:{type:[Number,String],default:64},image:String,title:String,...at(),...q(),...Me(),...Ie(),...ce({tag:"header"}),...he()},"VToolbar"),ta=L()({name:"VToolbar",props:Zi(),setup(e,t){var m;let{slots:n}=t;const{backgroundColorClasses:l,backgroundColorStyles:a}=Be(O(e,"color")),{borderClasses:o}=ft(e),{elevationClasses:i}=He(e),{roundedClasses:s}=Ae(e),{themeClasses:u}=ye(e),{rtlClasses:c}=De(),d=K(!!(e.extended||(m=n.extension)!=null&&m.call(n))),f=h(()=>parseInt(Number(e.height)+(e.density==="prominent"?Number(e.height):0)-(e.density==="comfortable"?8:0)-(e.density==="compact"?16:0),10)),v=h(()=>d.value?parseInt(Number(e.extensionHeight)+(e.density==="prominent"?Number(e.extensionHeight):0)-(e.density==="comfortable"?4:0)-(e.density==="compact"?8:0),10):0);return Ee({VBtn:{variant:"text"}}),j(()=>{var p;const g=!!(e.title||n.title),y=!!(n.image||e.image),b=(p=n.extension)==null?void 0:p.call(n);return d.value=!!(e.extended||b),r(e.tag,{class:["v-toolbar",{"v-toolbar--absolute":e.absolute,"v-toolbar--collapse":e.collapse,"v-toolbar--flat":e.flat,"v-toolbar--floating":e.floating,[`v-toolbar--density-${e.density}`]:!0},l.value,o.value,i.value,s.value,u.value,c.value,e.class],style:[a.value,e.style]},{default:()=>[y&&r("div",{key:"image",class:"v-toolbar__image"},[n.image?r(pe,{key:"image-defaults",disabled:!e.image,defaults:{VImg:{cover:!0,src:e.image}}},n.image):r(Xt,{key:"image-img",cover:!0,src:e.image},null)]),r(pe,{defaults:{VTabs:{height:J(f.value)}}},{default:()=>{var S,C,_;return[r("div",{class:"v-toolbar__content",style:{height:J(f.value)}},[n.prepend&&r("div",{class:"v-toolbar__prepend"},[(S=n.prepend)==null?void 0:S.call(n)]),g&&r(za,{key:"title",text:e.title},{text:n.title}),(C=n.default)==null?void 0:C.call(n),n.append&&r("div",{class:"v-toolbar__append"},[(_=n.append)==null?void 0:_.call(n)])])]}}),r(pe,{defaults:{VTabs:{height:J(v.value)}}},{default:()=>[r(kl,null,{default:()=>[d.value&&r("div",{class:"v-toolbar__extension",style:{height:J(v.value)}},[b])]})]})]})}),{contentHeight:f,extensionHeight:v}}}),tg=R({scrollTarget:{type:String},scrollThreshold:{type:[String,Number],default:300}},"scroll");function ng(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};const{canScroll:n}=t;let l=0;const a=W(null),o=K(0),i=K(0),s=K(0),u=K(!1),c=K(!1),d=h(()=>Number(e.scrollThreshold)),f=h(()=>Ue((d.value-o.value)/d.value||0)),v=()=>{const m=a.value;!m||n&&!n.value||(l=o.value,o.value="window"in m?m.pageYOffset:m.scrollTop,c.value=o.value<l,s.value=Math.abs(o.value-d.value))};return Z(c,()=>{i.value=i.value||o.value}),Z(u,()=>{i.value=0}),Je(()=>{Z(()=>e.scrollTarget,m=>{var y;const g=m?document.querySelector(m):window;g&&g!==a.value&&((y=a.value)==null||y.removeEventListener("scroll",v),a.value=g,a.value.addEventListener("scroll",v,{passive:!0}))},{immediate:!0})}),nt(()=>{var m;(m=a.value)==null||m.removeEventListener("scroll",v)}),n&&Z(n,v,{immediate:!0}),{scrollThreshold:d,currentScroll:o,currentThreshold:s,isScrollActive:u,scrollRatio:f,isScrollingUp:c,savedScroll:i}}function nn(){const e=K(!1);return Je(()=>{window.requestAnimationFrame(()=>{e.value=!0})}),{ssrBootStyles:h(()=>e.value?void 0:{transition:"none !important"}),isBooted:Ca(e)}}const lg=R({scrollBehavior:String,modelValue:{type:Boolean,default:!0},location:{type:String,default:"top",validator:e=>["top","bottom"].includes(e)},...Zi(),...bn(),...tg(),height:{type:[Number,String],default:64}},"VAppBar"),ag=L()({name:"VAppBar",props:lg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=W(),a=ue(e,"modelValue"),o=h(()=>{var S;const p=new Set(((S=e.scrollBehavior)==null?void 0:S.split(" "))??[]);return{hide:p.has("hide"),inverted:p.has("inverted"),collapse:p.has("collapse"),elevate:p.has("elevate"),fadeImage:p.has("fade-image")}}),i=h(()=>{const p=o.value;return p.hide||p.inverted||p.collapse||p.elevate||p.fadeImage||!a.value}),{currentScroll:s,scrollThreshold:u,isScrollingUp:c,scrollRatio:d}=ng(e,{canScroll:i}),f=h(()=>e.collapse||o.value.collapse&&(o.value.inverted?d.value>0:d.value===0)),v=h(()=>e.flat||o.value.elevate&&(o.value.inverted?s.value>0:s.value===0)),m=h(()=>o.value.fadeImage?o.value.inverted?1-d.value:d.value:void 0),g=h(()=>{var C,_;if(o.value.hide&&o.value.inverted)return 0;const p=((C=l.value)==null?void 0:C.contentHeight)??0,S=((_=l.value)==null?void 0:_.extensionHeight)??0;return p+S});Lt(h(()=>!!e.scrollBehavior),()=>{tt(()=>{o.value.hide?o.value.inverted?a.value=s.value>u.value:a.value=c.value||s.value<u.value:a.value=!0})});const{ssrBootStyles:y}=nn(),{layoutItemStyles:b}=pn({id:e.name,order:h(()=>parseInt(e.order,10)),position:O(e,"location"),layoutSize:g,elementSize:K(void 0),active:a,absolute:O(e,"absolute")});return j(()=>{const[p]=ta.filterProps(e);return r(ta,Y({ref:l,class:["v-app-bar",{"v-app-bar--bottom":e.location==="bottom"},e.class],style:[{...b.value,"--v-toolbar-image-opacity":m.value,height:void 0,...y.value},e.style]},p,{collapse:f.value,flat:v.value}),n)}),{}}});const og=[null,"default","comfortable","compact"],Fe=R({density:{type:String,default:"default",validator:e=>og.includes(e)}},"density");function Ye(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{densityClasses:h(()=>`${t}--density-${e.density}`)}}const ig=["elevated","flat","tonal","outlined","text","plain"];function ln(e,t){return r(oe,null,[e&&r("span",{key:"overlay",class:`${t}__overlay`},null),r("span",{key:"underlay",class:`${t}__underlay`},null)])}const mt=R({color:String,variant:{type:String,default:"elevated",validator:e=>ig.includes(e)}},"variant");function an(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();const n=h(()=>{const{variant:o}=ot(e);return`${t}--variant-${o}`}),{colorClasses:l,colorStyles:a}=Ga(h(()=>{const{variant:o,color:i}=ot(e);return{[["elevated","flat"].includes(o)?"background":"text"]:i}}));return{colorClasses:l,colorStyles:a,variantClasses:n}}const Ji=R({divided:Boolean,...at(),...q(),...Fe(),...Me(),...Ie(),...ce(),...he(),...mt()},"VBtnGroup"),na=L()({name:"VBtnGroup",props:Ji(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{densityClasses:a}=Ye(e),{borderClasses:o}=ft(e),{elevationClasses:i}=He(e),{roundedClasses:s}=Ae(e);Ee({VBtn:{height:"auto",color:O(e,"color"),density:O(e,"density"),flat:!0,variant:O(e,"variant")}}),j(()=>r(e.tag,{class:["v-btn-group",{"v-btn-group--divided":e.divided},l.value,o.value,a.value,i.value,s.value,e.class],style:e.style},n))}}),kn=R({modelValue:{type:null,default:void 0},multiple:Boolean,mandatory:[Boolean,String],max:Number,selectedClass:String,disabled:Boolean},"group"),Sn=R({value:null,disabled:Boolean,selectedClass:String},"group-item");function wn(e,t){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;const l=Oe("useGroupItem");if(!l)throw new Error("[Vuetify] useGroupItem composable must be used inside a component setup function");const a=We();$e(Symbol.for(`${t.description}:id`),a);const o=Ve(t,null);if(!o){if(!n)return o;throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${t.description}`)}const i=O(e,"value"),s=h(()=>!!(o.disabled.value||e.disabled));o.register({id:a,value:i,disabled:s},l),nt(()=>{o.unregister(a)});const u=h(()=>o.isSelected(a)),c=h(()=>u.value&&[o.selectedClass.value,e.selectedClass]);return Z(u,d=>{l.emit("group:selected",{value:d})}),{id:a,isSelected:u,toggle:()=>o.select(a,!u.value),select:d=>o.select(a,d),selectedClass:c,value:i,disabled:s,group:o}}function on(e,t){let n=!1;const l=gt([]),a=ue(e,"modelValue",[],v=>v==null?[]:Qi(l,et(v)),v=>{const m=rg(l,v);return e.multiple?m:m[0]}),o=Oe("useGroup");function i(v,m){const g=v,y=Symbol.for(`${t.description}:id`),p=Rn(y,o==null?void 0:o.vnode).indexOf(m);p>-1?l.splice(p,0,g):l.push(g)}function s(v){if(n)return;u();const m=l.findIndex(g=>g.id===v);l.splice(m,1)}function u(){const v=l.find(m=>!m.disabled);v&&e.mandatory==="force"&&!a.value.length&&(a.value=[v.id])}Je(()=>{u()}),nt(()=>{n=!0});function c(v,m){const g=l.find(y=>y.id===v);if(!(m&&(g!=null&&g.disabled)))if(e.multiple){const y=a.value.slice(),b=y.findIndex(S=>S===v),p=~b;if(m=m??!p,p&&e.mandatory&&y.length<=1||!p&&e.max!=null&&y.length+1>e.max)return;b<0&&m?y.push(v):b>=0&&!m&&y.splice(b,1),a.value=y}else{const y=a.value.includes(v);if(e.mandatory&&y)return;a.value=m??!y?[v]:[]}}function d(v){if(e.multiple,a.value.length){const m=a.value[0],g=l.findIndex(p=>p.id===m);let y=(g+v)%l.length,b=l[y];for(;b.disabled&&y!==g;)y=(y+v)%l.length,b=l[y];if(b.disabled)return;a.value=[l[y].id]}else{const m=l.find(g=>!g.disabled);m&&(a.value=[m.id])}}const f={register:i,unregister:s,selected:a,select:c,disabled:O(e,"disabled"),prev:()=>d(l.length-1),next:()=>d(1),isSelected:v=>a.value.includes(v),selectedClass:h(()=>e.selectedClass),items:h(()=>l),getItemIndex:v=>sg(l,v)};return $e(t,f),f}function sg(e,t){const n=Qi(e,[t]);return n.length?e.findIndex(l=>l.id===n[0]):-1}function Qi(e,t){const n=[];return t.forEach(l=>{const a=e.find(i=>yn(l,i.value)),o=e[l];(a==null?void 0:a.value)!=null?n.push(a.id):o!=null&&n.push(o.id)}),n}function rg(e,t){const n=[];return t.forEach(l=>{const a=e.findIndex(o=>o.id===l);if(~a){const o=e[a];n.push(o.value!=null?o.value:a)}}),n}const Wa=Symbol.for("vuetify:v-btn-toggle"),ug=R({...Ji(),...kn()},"VBtnToggle"),cg=L()({name:"VBtnToggle",props:ug(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{isSelected:l,next:a,prev:o,select:i,selected:s}=on(e,Wa);return j(()=>{const[u]=na.filterProps(e);return r(na,Y({class:["v-btn-toggle",e.class]},u,{style:e.style}),{default:()=>{var c;return[(c=n.default)==null?void 0:c.call(n,{isSelected:l,next:a,prev:o,select:i,selected:s})]}})}),{next:a,prev:o,select:i}}});const dg=["x-small","small","default","large","x-large"],At=R({size:{type:[String,Number],default:"default"}},"size");function Cn(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return Ba(()=>{let n,l;return ul(dg,e.size)?n=`${t}--size-${e.size}`:e.size&&(l={width:J(e.size),height:J(e.size)}),{sizeClasses:n,sizeStyles:l}})}const vg=R({color:String,start:Boolean,end:Boolean,icon:se,...q(),...At(),...ce({tag:"i"}),...he()},"VIcon"),Se=L()({name:"VIcon",props:vg(),setup(e,t){let{attrs:n,slots:l}=t;const a=W(),{themeClasses:o}=ye(e),{iconData:i}=em(h(()=>a.value||e.icon)),{sizeClasses:s}=Cn(e),{textColorClasses:u,textColorStyles:c}=Ge(O(e,"color"));return j(()=>{var f,v;const d=(f=l.default)==null?void 0:f.call(l);return d&&(a.value=(v=bi(d).filter(m=>m.type===Or&&m.children&&typeof m.children=="string")[0])==null?void 0:v.children),r(i.value.component,{tag:e.tag,icon:i.value.icon,class:["v-icon","notranslate",o.value,s.value,u.value,{"v-icon--clickable":!!n.onClick,"v-icon--start":e.start,"v-icon--end":e.end},e.class],style:[s.value?void 0:{fontSize:J(e.size),height:J(e.size),width:J(e.size)},c.value,e.style],role:n.onClick?"button":void 0,"aria-hidden":!n.onClick},{default:()=>[d]})}),{}}});function Ya(e,t){const n=W(),l=K(!1);if(Pa){const a=new IntersectionObserver(o=>{e==null||e(o,a),l.value=!!o.find(i=>i.isIntersecting)},t);nt(()=>{a.disconnect()}),Z(n,(o,i)=>{i&&(a.unobserve(i),l.value=!1),o&&a.observe(o)},{flush:"post"})}return{intersectionRef:n,isIntersecting:l}}const fg=R({bgColor:String,color:String,indeterminate:[Boolean,String],modelValue:{type:[Number,String],default:0},rotate:{type:[Number,String],default:0},width:{type:[Number,String],default:4},...q(),...At(),...ce({tag:"div"}),...he()},"VProgressCircular"),Ka=L()({name:"VProgressCircular",props:fg(),setup(e,t){let{slots:n}=t;const l=20,a=2*Math.PI*l,o=W(),{themeClasses:i}=ye(e),{sizeClasses:s,sizeStyles:u}=Cn(e),{textColorClasses:c,textColorStyles:d}=Ge(O(e,"color")),{textColorClasses:f,textColorStyles:v}=Ge(O(e,"bgColor")),{intersectionRef:m,isIntersecting:g}=Ya(),{resizeRef:y,contentRect:b}=wt(),p=h(()=>Math.max(0,Math.min(100,parseFloat(e.modelValue)))),S=h(()=>Number(e.width)),C=h(()=>u.value?Number(e.size):b.value?b.value.width:Math.max(S.value,32)),_=h(()=>l/(1-S.value/C.value)*2),V=h(()=>S.value/C.value*_.value),x=h(()=>J((100-p.value)/100*a));return tt(()=>{m.value=o.value,y.value=o.value}),j(()=>r(e.tag,{ref:o,class:["v-progress-circular",{"v-progress-circular--indeterminate":!!e.indeterminate,"v-progress-circular--visible":g.value,"v-progress-circular--disable-shrink":e.indeterminate==="disable-shrink"},i.value,s.value,c.value,e.class],style:[u.value,d.value,e.style],role:"progressbar","aria-valuemin":"0","aria-valuemax":"100","aria-valuenow":e.indeterminate?void 0:p.value},{default:()=>[r("svg",{style:{transform:`rotate(calc(-90deg + ${Number(e.rotate)}deg))`},xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${_.value} ${_.value}`},[r("circle",{class:["v-progress-circular__underlay",f.value],style:v.value,fill:"transparent",cx:"50%",cy:"50%",r:l,"stroke-width":V.value,"stroke-dasharray":a,"stroke-dashoffset":0},null),r("circle",{class:"v-progress-circular__overlay",fill:"transparent",cx:"50%",cy:"50%",r:l,"stroke-width":V.value,"stroke-dasharray":a,"stroke-dashoffset":x.value},null)]),n.default&&r("div",{class:"v-progress-circular__content"},[n.default({value:p.value})])]})),{}}});const Wo={center:"center",top:"bottom",bottom:"top",left:"right",right:"left"},Ft=R({location:String},"location");function Ot(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,n=arguments.length>2?arguments[2]:void 0;const{isRtl:l}=De();return{locationStyles:h(()=>{if(!e.location)return{};const{side:o,align:i}=Gl(e.location.split(" ").length>1?e.location:`${e.location} center`,l.value);function s(c){return n?n(c):0}const u={};return o!=="center"&&(t?u[Wo[o]]=`calc(100% - ${s(o)}px)`:u[o]=0),i!=="center"?t?u[Wo[i]]=`calc(100% - ${s(i)}px)`:u[i]=0:(o==="center"?u.top=u.left="50%":u[{top:"left",bottom:"left",left:"top",right:"top"}[o]]="50%",u.transform={top:"translateX(-50%)",bottom:"translateX(-50%)",left:"translateY(-50%)",right:"translateY(-50%)",center:"translate(-50%, -50%)"}[o]),u})}}const mg=R({absolute:Boolean,active:{type:Boolean,default:!0},bgColor:String,bgOpacity:[Number,String],bufferValue:{type:[Number,String],default:0},clickable:Boolean,color:String,height:{type:[Number,String],default:4},indeterminate:Boolean,max:{type:[Number,String],default:100},modelValue:{type:[Number,String],default:0},reverse:Boolean,stream:Boolean,striped:Boolean,roundedBar:Boolean,...q(),...Ft({location:"top"}),...Ie(),...ce(),...he()},"VProgressLinear"),qa=L()({name:"VProgressLinear",props:mg(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{isRtl:a,rtlClasses:o}=De(),{themeClasses:i}=ye(e),{locationStyles:s}=Ot(e),{textColorClasses:u,textColorStyles:c}=Ge(e,"color"),{backgroundColorClasses:d,backgroundColorStyles:f}=Be(h(()=>e.bgColor||e.color)),{backgroundColorClasses:v,backgroundColorStyles:m}=Be(e,"color"),{roundedClasses:g}=Ae(e),{intersectionRef:y,isIntersecting:b}=Ya(),p=h(()=>parseInt(e.max,10)),S=h(()=>parseInt(e.height,10)),C=h(()=>parseFloat(e.bufferValue)/p.value*100),_=h(()=>parseFloat(l.value)/p.value*100),V=h(()=>a.value!==e.reverse),x=h(()=>e.indeterminate?"fade-transition":"slide-x-transition"),T=h(()=>e.bgOpacity==null?e.bgOpacity:parseFloat(e.bgOpacity));function w(k){if(!y.value)return;const{left:I,right:A,width:B}=y.value.getBoundingClientRect(),E=V.value?B-k.clientX+(A-B):k.clientX-I;l.value=Math.round(E/B*p.value)}return j(()=>r(e.tag,{ref:y,class:["v-progress-linear",{"v-progress-linear--absolute":e.absolute,"v-progress-linear--active":e.active&&b.value,"v-progress-linear--reverse":V.value,"v-progress-linear--rounded":e.rounded,"v-progress-linear--rounded-bar":e.roundedBar,"v-progress-linear--striped":e.striped},g.value,i.value,o.value,e.class],style:[{bottom:e.location==="bottom"?0:void 0,top:e.location==="top"?0:void 0,height:e.active?J(S.value):0,"--v-progress-linear-height":J(S.value),...s.value},e.style],role:"progressbar","aria-hidden":e.active?"false":"true","aria-valuemin":"0","aria-valuemax":e.max,"aria-valuenow":e.indeterminate?void 0:_.value,onClick:e.clickable&&w},{default:()=>[e.stream&&r("div",{key:"stream",class:["v-progress-linear__stream",u.value],style:{...c.value,[V.value?"left":"right"]:J(-S.value),borderTop:`${J(S.value/2)} dotted`,opacity:T.value,top:`calc(50% - ${J(S.value/4)})`,width:J(100-C.value,"%"),"--v-progress-linear-stream-to":J(S.value*(V.value?1:-1))}},null),r("div",{class:["v-progress-linear__background",d.value],style:[f.value,{opacity:T.value,width:J(e.stream?C.value:100,"%")}]},null),r(Et,{name:x.value},{default:()=>[e.indeterminate?r("div",{class:"v-progress-linear__indeterminate"},[["long","short"].map(k=>r("div",{key:k,class:["v-progress-linear__indeterminate",k,v.value],style:m.value},null))]):r("div",{class:["v-progress-linear__determinate",v.value],style:[m.value,{width:J(_.value,"%")}]},null)]}),n.default&&r("div",{class:"v-progress-linear__content"},[n.default({value:_.value,buffer:C.value})])]})),{}}}),Xa=R({loading:[Boolean,String]},"loader");function Sl(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{loaderClasses:h(()=>({[`${t}--loading`]:e.loading}))}}function Za(e,t){var l;let{slots:n}=t;return r("div",{class:`${e.name}__loader`},[((l=n.default)==null?void 0:l.call(n,{color:e.color,isActive:e.active}))||r(qa,{active:e.active,color:e.color,height:"2",indeterminate:!0},null)])}const gg=["static","relative","fixed","absolute","sticky"],xn=R({position:{type:String,validator:e=>gg.includes(e)}},"position");function Vn(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();return{positionClasses:h(()=>e.position?`${t}--${e.position}`:void 0)}}function es(){var e,t;return(t=(e=Oe("useRouter"))==null?void 0:e.proxy)==null?void 0:t.$router}function Gn(e,t){const n=Dr("RouterLink"),l=h(()=>!!(e.href||e.to)),a=h(()=>(l==null?void 0:l.value)||bo(t,"click")||bo(e,"click"));if(typeof n=="string")return{isLink:l,isClickable:a,href:O(e,"href")};const o=e.to?n.useLink(e):void 0;return{isLink:l,isClickable:a,route:o==null?void 0:o.route,navigate:o==null?void 0:o.navigate,isActive:o&&h(()=>{var i,s;return e.exact?(i=o.isExactActive)==null?void 0:i.value:(s=o.isActive)==null?void 0:s.value}),href:h(()=>e.to?o==null?void 0:o.route.value.href:e.href)}}const Wn=R({href:String,replace:Boolean,to:[String,Object],exact:Boolean},"router");let Fl=!1;function hg(e,t){let n=!1,l,a;Ce&&(xe(()=>{window.addEventListener("popstate",o),l=e==null?void 0:e.beforeEach((i,s,u)=>{Fl?n?t(u):u():setTimeout(()=>n?t(u):u()),Fl=!0}),a=e==null?void 0:e.afterEach(()=>{Fl=!1})}),Xe(()=>{window.removeEventListener("popstate",o),l==null||l(),a==null||a()}));function o(i){var s;(s=i.state)!=null&&s.replaced||(n=!0,setTimeout(()=>n=!1))}}function yg(e,t){Z(()=>{var n;return(n=e.isActive)==null?void 0:n.value},n=>{e.isLink.value&&n&&t&&xe(()=>{t(!0)})},{immediate:!0})}const la=Symbol("rippleStop"),bg=80;function Yo(e,t){e.style.transform=t,e.style.webkitTransform=t}function aa(e){return e.constructor.name==="TouchEvent"}function ts(e){return e.constructor.name==="KeyboardEvent"}const pg=function(e,t){var f;let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},l=0,a=0;if(!ts(e)){const v=t.getBoundingClientRect(),m=aa(e)?e.touches[e.touches.length-1]:e;l=m.clientX-v.left,a=m.clientY-v.top}let o=0,i=.3;(f=t._ripple)!=null&&f.circle?(i=.15,o=t.clientWidth/2,o=n.center?o:o+Math.sqrt((l-o)**2+(a-o)**2)/4):o=Math.sqrt(t.clientWidth**2+t.clientHeight**2)/2;const s=`${(t.clientWidth-o*2)/2}px`,u=`${(t.clientHeight-o*2)/2}px`,c=n.center?s:`${l-o}px`,d=n.center?u:`${a-o}px`;return{radius:o,scale:i,x:c,y:d,centerX:s,centerY:u}},ml={show(e,t){var m;let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};if(!((m=t==null?void 0:t._ripple)!=null&&m.enabled))return;const l=document.createElement("span"),a=document.createElement("span");l.appendChild(a),l.className="v-ripple__container",n.class&&(l.className+=` ${n.class}`);const{radius:o,scale:i,x:s,y:u,centerX:c,centerY:d}=pg(e,t,n),f=`${o*2}px`;a.className="v-ripple__animation",a.style.width=f,a.style.height=f,t.appendChild(l);const v=window.getComputedStyle(t);v&&v.position==="static"&&(t.style.position="relative",t.dataset.previousPosition="static"),a.classList.add("v-ripple__animation--enter"),a.classList.add("v-ripple__animation--visible"),Yo(a,`translate(${s}, ${u}) scale3d(${i},${i},${i})`),a.dataset.activated=String(performance.now()),setTimeout(()=>{a.classList.remove("v-ripple__animation--enter"),a.classList.add("v-ripple__animation--in"),Yo(a,`translate(${c}, ${d}) scale3d(1,1,1)`)},0)},hide(e){var o;if(!((o=e==null?void 0:e._ripple)!=null&&o.enabled))return;const t=e.getElementsByClassName("v-ripple__animation");if(t.length===0)return;const n=t[t.length-1];if(n.dataset.isHiding)return;n.dataset.isHiding="true";const l=performance.now()-Number(n.dataset.activated),a=Math.max(250-l,0);setTimeout(()=>{n.classList.remove("v-ripple__animation--in"),n.classList.add("v-ripple__animation--out"),setTimeout(()=>{var s;e.getElementsByClassName("v-ripple__animation").length===1&&e.dataset.previousPosition&&(e.style.position=e.dataset.previousPosition,delete e.dataset.previousPosition),((s=n.parentNode)==null?void 0:s.parentNode)===e&&e.removeChild(n.parentNode)},300)},a)}};function ns(e){return typeof e>"u"||!!e}function On(e){const t={},n=e.currentTarget;if(!(!(n!=null&&n._ripple)||n._ripple.touched||e[la])){if(e[la]=!0,aa(e))n._ripple.touched=!0,n._ripple.isTouch=!0;else if(n._ripple.isTouch)return;if(t.center=n._ripple.centered||ts(e),n._ripple.class&&(t.class=n._ripple.class),aa(e)){if(n._ripple.showTimerCommit)return;n._ripple.showTimerCommit=()=>{ml.show(e,n,t)},n._ripple.showTimer=window.setTimeout(()=>{var l;(l=n==null?void 0:n._ripple)!=null&&l.showTimerCommit&&(n._ripple.showTimerCommit(),n._ripple.showTimerCommit=null)},bg)}else ml.show(e,n,t)}}function Ko(e){e[la]=!0}function Qe(e){const t=e.currentTarget;if(t!=null&&t._ripple){if(window.clearTimeout(t._ripple.showTimer),e.type==="touchend"&&t._ripple.showTimerCommit){t._ripple.showTimerCommit(),t._ripple.showTimerCommit=null,t._ripple.showTimer=window.setTimeout(()=>{Qe(e)});return}window.setTimeout(()=>{t._ripple&&(t._ripple.touched=!1)}),ml.hide(t)}}function ls(e){const t=e.currentTarget;t!=null&&t._ripple&&(t._ripple.showTimerCommit&&(t._ripple.showTimerCommit=null),window.clearTimeout(t._ripple.showTimer))}let Dn=!1;function as(e){!Dn&&(e.keyCode===mo.enter||e.keyCode===mo.space)&&(Dn=!0,On(e))}function os(e){Dn=!1,Qe(e)}function is(e){Dn&&(Dn=!1,Qe(e))}function ss(e,t,n){const{value:l,modifiers:a}=t,o=ns(l);if(o||ml.hide(e),e._ripple=e._ripple??{},e._ripple.enabled=o,e._ripple.centered=a.center,e._ripple.circle=a.circle,rl(l)&&l.class&&(e._ripple.class=l.class),o&&!n){if(a.stop){e.addEventListener("touchstart",Ko,{passive:!0}),e.addEventListener("mousedown",Ko);return}e.addEventListener("touchstart",On,{passive:!0}),e.addEventListener("touchend",Qe,{passive:!0}),e.addEventListener("touchmove",ls,{passive:!0}),e.addEventListener("touchcancel",Qe),e.addEventListener("mousedown",On),e.addEventListener("mouseup",Qe),e.addEventListener("mouseleave",Qe),e.addEventListener("keydown",as),e.addEventListener("keyup",os),e.addEventListener("blur",is),e.addEventListener("dragstart",Qe,{passive:!0})}else!o&&n&&rs(e)}function rs(e){e.removeEventListener("mousedown",On),e.removeEventListener("touchstart",On),e.removeEventListener("touchend",Qe),e.removeEventListener("touchmove",ls),e.removeEventListener("touchcancel",Qe),e.removeEventListener("mouseup",Qe),e.removeEventListener("mouseleave",Qe),e.removeEventListener("keydown",as),e.removeEventListener("keyup",os),e.removeEventListener("dragstart",Qe),e.removeEventListener("blur",is)}function kg(e,t){ss(e,t,!1)}function Sg(e){delete e._ripple,rs(e)}function wg(e,t){if(t.value===t.oldValue)return;const n=ns(t.oldValue);ss(e,t,n)}const Dt={mounted:kg,unmounted:Sg,updated:wg},Ja=R({active:{type:Boolean,default:void 0},symbol:{type:null,default:Wa},flat:Boolean,icon:[Boolean,String,Function,Object],prependIcon:se,appendIcon:se,block:Boolean,stacked:Boolean,ripple:{type:[Boolean,Object],default:!0},text:String,...at(),...q(),...Fe(),...dt(),...Me(),...Sn(),...Xa(),...Ft(),...xn(),...Ie(),...Wn(),...At(),...ce({tag:"button"}),...he(),...mt({variant:"elevated"})},"VBtn"),Ke=L()({name:"VBtn",directives:{Ripple:Dt},props:Ja(),emits:{"group:selected":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const{themeClasses:a}=ye(e),{borderClasses:o}=ft(e),{colorClasses:i,colorStyles:s,variantClasses:u}=an(e),{densityClasses:c}=Ye(e),{dimensionStyles:d}=vt(e),{elevationClasses:f}=He(e),{loaderClasses:v}=Sl(e),{locationStyles:m}=Ot(e),{positionClasses:g}=Vn(e),{roundedClasses:y}=Ae(e),{sizeClasses:b,sizeStyles:p}=Cn(e),S=wn(e,e.symbol,!1),C=Gn(e,n),_=h(()=>{var k;return e.active!==void 0?e.active:C.isLink.value?(k=C.isActive)==null?void 0:k.value:S==null?void 0:S.isSelected.value}),V=h(()=>(S==null?void 0:S.disabled.value)||e.disabled),x=h(()=>e.variant==="elevated"&&!(e.disabled||e.flat||e.border)),T=h(()=>{if(e.value!==void 0)return Object(e.value)===e.value?JSON.stringify(e.value,null,0):e.value});function w(k){var I;V.value||C.isLink.value&&(k.metaKey||k.ctrlKey||k.shiftKey||k.button!==0||n.target==="_blank")||((I=C.navigate)==null||I.call(C,k),S==null||S.toggle())}return yg(C,S==null?void 0:S.select),j(()=>{var F,X;const k=C.isLink.value?"a":e.tag,I=!!(e.prependIcon||l.prepend),A=!!(e.appendIcon||l.append),B=!!(e.icon&&e.icon!==!0),E=(S==null?void 0:S.isSelected.value)&&(!C.isLink.value||((F=C.isActive)==null?void 0:F.value))||!S||((X=C.isActive)==null?void 0:X.value);return ne(r(k,{type:k==="a"?void 0:"button",class:["v-btn",S==null?void 0:S.selectedClass.value,{"v-btn--active":_.value,"v-btn--block":e.block,"v-btn--disabled":V.value,"v-btn--elevated":x.value,"v-btn--flat":e.flat,"v-btn--icon":!!e.icon,"v-btn--loading":e.loading,"v-btn--stacked":e.stacked},a.value,o.value,E?i.value:void 0,c.value,f.value,v.value,g.value,y.value,b.value,u.value,e.class],style:[E?s.value:void 0,d.value,m.value,p.value,e.style],disabled:V.value||void 0,href:C.href.value,onClick:w,value:T.value},{default:()=>{var $;return[ln(!0,"v-btn"),!e.icon&&I&&r("span",{key:"prepend",class:"v-btn__prepend"},[l.prepend?r(pe,{key:"prepend-defaults",disabled:!e.prependIcon,defaults:{VIcon:{icon:e.prependIcon}}},l.prepend):r(Se,{key:"prepend-icon",icon:e.prependIcon},null)]),r("span",{class:"v-btn__content","data-no-activator":""},[!l.default&&B?r(Se,{key:"content-icon",icon:e.icon},null):r(pe,{key:"content-defaults",disabled:!B,defaults:{VIcon:{icon:e.icon}}},{default:()=>{var N;return[((N=l.default)==null?void 0:N.call(l))??e.text]}})]),!e.icon&&A&&r("span",{key:"append",class:"v-btn__append"},[l.append?r(pe,{key:"append-defaults",disabled:!e.appendIcon,defaults:{VIcon:{icon:e.appendIcon}}},l.append):r(Se,{key:"append-icon",icon:e.appendIcon},null)]),!!e.loading&&r("span",{key:"loader",class:"v-btn__loader"},[(($=l.loader)==null?void 0:$.call(l))??r(Ka,{color:typeof e.loading=="boolean"?void 0:e.loading,indeterminate:!0,size:"23",width:"2"},null)])]}}),[[Ze("ripple"),!V.value&&e.ripple,null]])}),{}}}),Cg=R({...Ja({icon:"$menu",variant:"text"})},"VAppBarNavIcon"),xg=L()({name:"VAppBarNavIcon",props:Cg(),setup(e,t){let{slots:n}=t;return j(()=>r(Ke,Y(e,{class:["v-app-bar-nav-icon"]}),n)),{}}}),Vg=L()({name:"VAppBarTitle",props:Gi(),setup(e,t){let{slots:n}=t;return j(()=>r(za,Y(e,{class:"v-app-bar-title"}),n)),{}}});const us=bt("v-alert-title"),_g=["success","info","warning","error"],Ig=R({border:{type:[Boolean,String],validator:e=>typeof e=="boolean"||["top","end","bottom","start"].includes(e)},borderColor:String,closable:Boolean,closeIcon:{type:se,default:"$close"},closeLabel:{type:String,default:"$vuetify.close"},icon:{type:[Boolean,String,Function,Object],default:null},modelValue:{type:Boolean,default:!0},prominent:Boolean,title:String,text:String,type:{type:String,validator:e=>_g.includes(e)},...q(),...Fe(),...dt(),...Me(),...Ft(),...xn(),...Ie(),...ce(),...he(),...mt({variant:"flat"})},"VAlert"),Tg=L()({name:"VAlert",props:Ig(),emits:{"click:close":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{emit:n,slots:l}=t;const a=ue(e,"modelValue"),o=h(()=>{if(e.icon!==!1)return e.type?e.icon??`$${e.type}`:e.icon}),i=h(()=>({color:e.color??e.type,variant:e.variant})),{themeClasses:s}=ye(e),{colorClasses:u,colorStyles:c,variantClasses:d}=an(i),{densityClasses:f}=Ye(e),{dimensionStyles:v}=vt(e),{elevationClasses:m}=He(e),{locationStyles:g}=Ot(e),{positionClasses:y}=Vn(e),{roundedClasses:b}=Ae(e),{textColorClasses:p,textColorStyles:S}=Ge(O(e,"borderColor")),{t:C}=ct(),_=h(()=>({"aria-label":C(e.closeLabel),onClick(V){a.value=!1,n("click:close",V)}}));return()=>{const V=!!(l.prepend||o.value),x=!!(l.title||e.title),T=!!(l.close||e.closable);return a.value&&r(e.tag,{class:["v-alert",e.border&&{"v-alert--border":!!e.border,[`v-alert--border-${e.border===!0?"start":e.border}`]:!0},{"v-alert--prominent":e.prominent},s.value,u.value,f.value,m.value,y.value,b.value,d.value,e.class],style:[c.value,v.value,g.value,e.style],role:"alert"},{default:()=>{var w,k;return[ln(!1,"v-alert"),e.border&&r("div",{key:"border",class:["v-alert__border",p.value],style:S.value},null),V&&r("div",{key:"prepend",class:"v-alert__prepend"},[l.prepend?r(pe,{key:"prepend-defaults",disabled:!o.value,defaults:{VIcon:{density:e.density,icon:o.value,size:e.prominent?44:28}}},l.prepend):r(Se,{key:"prepend-icon",density:e.density,icon:o.value,size:e.prominent?44:28},null)]),r("div",{class:"v-alert__content"},[x&&r(us,{key:"title"},{default:()=>{var I;return[((I=l.title)==null?void 0:I.call(l))??e.title]}}),((w=l.text)==null?void 0:w.call(l))??e.text,(k=l.default)==null?void 0:k.call(l)]),l.append&&r("div",{key:"append",class:"v-alert__append"},[l.append()]),T&&r("div",{key:"close",class:"v-alert__close"},[l.close?r(pe,{key:"close-defaults",defaults:{VBtn:{icon:e.closeIcon,size:"x-small",variant:"text"}}},{default:()=>{var I;return[(I=l.close)==null?void 0:I.call(l,{props:_.value})]}}):r(Ke,Y({key:"close-btn",icon:e.closeIcon,size:"x-small",variant:"text"},_.value),null)])]}})}}});const Pg=R({text:String,clickable:Boolean,...q(),...he()},"VLabel"),_n=L()({name:"VLabel",props:Pg(),setup(e,t){let{slots:n}=t;return j(()=>{var l;return r("label",{class:["v-label",{"v-label--clickable":e.clickable},e.class],style:e.style},[e.text,(l=n.default)==null?void 0:l.call(n)])}),{}}});const cs=Symbol.for("vuetify:selection-control-group"),Qa=R({color:String,disabled:{type:Boolean,default:null},defaultsTarget:String,error:Boolean,id:String,inline:Boolean,falseIcon:se,trueIcon:se,ripple:{type:Boolean,default:!0},multiple:{type:Boolean,default:null},name:String,readonly:Boolean,modelValue:null,type:String,valueComparator:{type:Function,default:yn},...q(),...Fe(),...he()},"SelectionControlGroup"),Ag=R({...Qa({defaultsTarget:"VSelectionControl"})},"VSelectionControlGroup"),ds=L()({name:"VSelectionControlGroup",props:Ag(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),a=We(),o=h(()=>e.id||`v-selection-control-group-${a}`),i=h(()=>e.name||o.value),s=new Set;return $e(cs,{modelValue:l,forceUpdate:()=>{s.forEach(u=>u())},onForceUpdate:u=>{s.add(u),Xe(()=>{s.delete(u)})}}),Ee({[e.defaultsTarget]:{color:O(e,"color"),disabled:O(e,"disabled"),density:O(e,"density"),error:O(e,"error"),inline:O(e,"inline"),modelValue:l,multiple:h(()=>!!e.multiple||e.multiple==null&&Array.isArray(l.value)),name:i,falseIcon:O(e,"falseIcon"),trueIcon:O(e,"trueIcon"),readonly:O(e,"readonly"),ripple:O(e,"ripple"),type:O(e,"type"),valueComparator:O(e,"valueComparator")}}),j(()=>{var u;return r("div",{class:["v-selection-control-group",{"v-selection-control-group--inline":e.inline},e.class],style:e.style,role:e.type==="radio"?"radiogroup":void 0},[(u=n.default)==null?void 0:u.call(n)])}),{}}}),wl=R({label:String,trueValue:null,falseValue:null,value:null,...q(),...Qa()},"VSelectionControl");function Bg(e){const t=Ve(cs,void 0),{densityClasses:n}=Ye(e),l=ue(e,"modelValue"),a=h(()=>e.trueValue!==void 0?e.trueValue:e.value!==void 0?e.value:!0),o=h(()=>e.falseValue!==void 0?e.falseValue:!1),i=h(()=>!!e.multiple||e.multiple==null&&Array.isArray(l.value)),s=h({get(){const m=t?t.modelValue.value:l.value;return i.value?m.some(g=>e.valueComparator(g,a.value)):e.valueComparator(m,a.value)},set(m){if(e.readonly)return;const g=m?a.value:o.value;let y=g;i.value&&(y=m?[...et(l.value),g]:et(l.value).filter(b=>!e.valueComparator(b,a.value))),t?t.modelValue.value=y:l.value=y}}),{textColorClasses:u,textColorStyles:c}=Ge(h(()=>s.value&&!e.error&&!e.disabled?e.color:void 0)),{backgroundColorClasses:d,backgroundColorStyles:f}=Be(h(()=>s.value&&!e.error&&!e.disabled?e.color:void 0)),v=h(()=>s.value?e.trueIcon:e.falseIcon);return{group:t,densityClasses:n,trueValue:a,falseValue:o,model:s,textColorClasses:u,textColorStyles:c,backgroundColorClasses:d,backgroundColorStyles:f,icon:v}}const Zt=L()({name:"VSelectionControl",directives:{Ripple:Dt},inheritAttrs:!1,props:wl(),emits:{"update:modelValue":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const{group:a,densityClasses:o,icon:i,model:s,textColorClasses:u,textColorStyles:c,backgroundColorClasses:d,backgroundColorStyles:f,trueValue:v}=Bg(e),m=We(),g=h(()=>e.id||`input-${m}`),y=K(!1),b=K(!1),p=W();a==null||a.onForceUpdate(()=>{p.value&&(p.value.checked=s.value)});function S(V){y.value=!0,vn(V.target,":focus-visible")!==!1&&(b.value=!0)}function C(){y.value=!1,b.value=!1}function _(V){e.readonly&&a&&xe(()=>a.forceUpdate()),s.value=V.target.checked}return j(()=>{var k,I;const V=l.label?l.label({label:e.label,props:{for:g.value}}):e.label,[x,T]=en(n),w=r("input",Y({ref:p,checked:s.value,disabled:!!(e.readonly||e.disabled),id:g.value,onBlur:C,onFocus:S,onInput:_,"aria-disabled":!!(e.readonly||e.disabled),type:e.type,value:v.value,name:e.name,"aria-checked":e.type==="checkbox"?s.value:void 0},T),null);return r("div",Y({class:["v-selection-control",{"v-selection-control--dirty":s.value,"v-selection-control--disabled":e.disabled,"v-selection-control--error":e.error,"v-selection-control--focused":y.value,"v-selection-control--focus-visible":b.value,"v-selection-control--inline":e.inline},o.value,e.class]},x,{style:e.style}),[r("div",{class:["v-selection-control__wrapper",u.value],style:c.value},[(k=l.default)==null?void 0:k.call(l,{backgroundColorClasses:d,backgroundColorStyles:f}),ne(r("div",{class:["v-selection-control__input"]},[((I=l.input)==null?void 0:I.call(l,{model:s,textColorClasses:u,textColorStyles:c,backgroundColorClasses:d,backgroundColorStyles:f,inputNode:w,icon:i.value,props:{onFocus:S,onBlur:C,id:g.value}}))??r(oe,null,[i.value&&r(Se,{key:"icon",icon:i.value},null),w])]),[[Ze("ripple"),e.ripple&&[!e.disabled&&!e.readonly,null,["center","circle"]]]])]),V&&r(_n,{for:g.value,clickable:!0,onClick:A=>A.stopPropagation()},{default:()=>[V]})])}),{isFocused:y,input:p}}}),vs=R({indeterminate:Boolean,indeterminateIcon:{type:se,default:"$checkboxIndeterminate"},...wl({falseIcon:"$checkboxOff",trueIcon:"$checkboxOn"})},"VCheckboxBtn"),gn=L()({name:"VCheckboxBtn",props:vs(),emits:{"update:modelValue":e=>!0,"update:indeterminate":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"indeterminate"),a=ue(e,"modelValue");function o(u){l.value&&(l.value=!1)}const i=h(()=>l.value?e.indeterminateIcon:e.falseIcon),s=h(()=>l.value?e.indeterminateIcon:e.trueIcon);return j(()=>{const u=rt(Zt.filterProps(e)[0],["modelValue"]);return r(Zt,Y(u,{modelValue:a.value,"onUpdate:modelValue":[c=>a.value=c,o],class:["v-checkbox-btn",e.class],style:e.style,type:"checkbox",falseIcon:i.value,trueIcon:s.value,"aria-checked":l.value?"mixed":void 0}),n)}),{}}});function fs(e){const{t}=ct();function n(l){let{name:a}=l;const o={prepend:"prependAction",prependInner:"prependAction",append:"appendAction",appendInner:"appendAction",clear:"clear"}[a],i=e[`onClick:${a}`],s=i&&o?t(`$vuetify.input.${o}`,e.label??""):void 0;return r(Se,{icon:e[`${a}Icon`],"aria-label":s,onClick:i},null)}return{InputIcon:n}}const Rg=R({active:Boolean,color:String,messages:{type:[Array,String],default:()=>[]},...q(),...Pt({transition:{component:ja,leaveAbsolute:!0,group:!0}})},"VMessages"),ms=L()({name:"VMessages",props:Rg(),setup(e,t){let{slots:n}=t;const l=h(()=>et(e.messages)),{textColorClasses:a,textColorStyles:o}=Ge(h(()=>e.color));return j(()=>r(ht,{transition:e.transition,tag:"div",class:["v-messages",a.value,e.class],style:[o.value,e.style],role:"alert","aria-live":"polite"},{default:()=>[e.active&&l.value.map((i,s)=>r("div",{class:"v-messages__message",key:`${s}-${l.value}`},[n.message?n.message({message:i}):i]))]})),{}}}),Cl=R({focused:Boolean,"onUpdate:focused":St()},"focus");function Nt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt();const n=ue(e,"focused"),l=h(()=>({[`${t}--focused`]:n.value}));function a(){n.value=!0}function o(){n.value=!1}return{focusClasses:l,isFocused:n,focus:a,blur:o}}const gs=Symbol.for("vuetify:form"),Eg=R({disabled:Boolean,fastFail:Boolean,readonly:Boolean,modelValue:{type:Boolean,default:null},validateOn:{type:String,default:"input"}},"form");function Lg(e){const t=ue(e,"modelValue"),n=h(()=>e.disabled),l=h(()=>e.readonly),a=K(!1),o=W([]),i=W([]);async function s(){const d=[];let f=!0;i.value=[],a.value=!0;for(const v of o.value){const m=await v.validate();if(m.length>0&&(f=!1,d.push({id:v.id,errorMessages:m})),!f&&e.fastFail)break}return i.value=d,a.value=!1,{valid:f,errors:i.value}}function u(){o.value.forEach(d=>d.reset())}function c(){o.value.forEach(d=>d.resetValidation())}return Z(o,()=>{let d=0,f=0;const v=[];for(const m of o.value)m.isValid===!1?(f++,v.push({id:m.id,errorMessages:m.errorMessages})):m.isValid===!0&&d++;i.value=v,t.value=f>0?!1:d===o.value.length?!0:null},{deep:!0}),$e(gs,{register:d=>{let{id:f,validate:v,reset:m,resetValidation:g}=d;o.value.some(y=>y.id===f),o.value.push({id:f,validate:v,reset:m,resetValidation:g,isValid:null,errorMessages:[]})},unregister:d=>{o.value=o.value.filter(f=>f.id!==d)},update:(d,f,v)=>{const m=o.value.find(g=>g.id===d);m&&(m.isValid=f,m.errorMessages=v)},isDisabled:n,isReadonly:l,isValidating:a,isValid:t,items:o,validateOn:O(e,"validateOn")}),{errors:i,isDisabled:n,isReadonly:l,isValidating:a,isValid:t,items:o,validate:s,reset:u,resetValidation:c}}function xl(){return Ve(gs,null)}const hs=R({disabled:{type:Boolean,default:null},error:Boolean,errorMessages:{type:[Array,String],default:()=>[]},maxErrors:{type:[Number,String],default:1},name:String,label:String,readonly:{type:Boolean,default:null},rules:{type:Array,default:()=>[]},modelValue:null,validateOn:String,validationValue:null,...Cl()},"validation");function ys(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Tt(),n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:We();const l=ue(e,"modelValue"),a=h(()=>e.validationValue===void 0?l.value:e.validationValue),o=xl(),i=W([]),s=K(!0),u=h(()=>!!(et(l.value===""?null:l.value).length||et(a.value===""?null:a.value).length)),c=h(()=>!!(e.disabled??(o==null?void 0:o.isDisabled.value))),d=h(()=>!!(e.readonly??(o==null?void 0:o.isReadonly.value))),f=h(()=>e.errorMessages.length?et(e.errorMessages).slice(0,Math.max(0,+e.maxErrors)):i.value),v=h(()=>{let _=(e.validateOn??(o==null?void 0:o.validateOn.value))||"input";_==="lazy"&&(_="input lazy");const V=new Set((_==null?void 0:_.split(" "))??[]);return{blur:V.has("blur")||V.has("input"),input:V.has("input"),submit:V.has("submit"),lazy:V.has("lazy")}}),m=h(()=>e.error||e.errorMessages.length?!1:e.rules.length?s.value?i.value.length||v.value.lazy?null:!0:!i.value.length:!0),g=K(!1),y=h(()=>({[`${t}--error`]:m.value===!1,[`${t}--dirty`]:u.value,[`${t}--disabled`]:c.value,[`${t}--readonly`]:d.value})),b=h(()=>e.name??ot(n));xa(()=>{o==null||o.register({id:b.value,validate:C,reset:p,resetValidation:S})}),nt(()=>{o==null||o.unregister(b.value)}),Je(async()=>{v.value.lazy||await C(!0),o==null||o.update(b.value,m.value,f.value)}),Lt(()=>v.value.input,()=>{Z(a,()=>{if(a.value!=null)C();else if(e.focused){const _=Z(()=>e.focused,V=>{V||C(),_()})}})}),Lt(()=>v.value.blur,()=>{Z(()=>e.focused,_=>{_||C()})}),Z(m,()=>{o==null||o.update(b.value,m.value,f.value)});function p(){l.value=null,xe(S)}function S(){s.value=!0,v.value.lazy?i.value=[]:C(!0)}async function C(){let _=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;const V=[];g.value=!0;for(const x of e.rules){if(V.length>=+(e.maxErrors??1))break;const w=await(typeof x=="function"?x:()=>x)(a.value);if(w!==!0){if(w!==!1&&typeof w!="string"){console.warn(`${w} is not a valid value. Rule functions must return boolean true or a string.`);continue}V.push(w||"")}}return i.value=V,g.value=!1,s.value=_,i.value}return{errorMessages:f,isDirty:u,isDisabled:c,isReadonly:d,isPristine:s,isValid:m,isValidating:g,reset:p,resetValidation:S,validate:C,validationClasses:y}}const Bt=R({id:String,appendIcon:se,centerAffix:{type:Boolean,default:!0},prependIcon:se,hideDetails:[Boolean,String],hint:String,persistentHint:Boolean,messages:{type:[Array,String],default:()=>[]},direction:{type:String,default:"horizontal",validator:e=>["horizontal","vertical"].includes(e)},"onClick:prepend":St(),"onClick:append":St(),...q(),...Fe(),...hs()},"VInput"),Ne=L()({name:"VInput",props:{...Bt()},emits:{"update:modelValue":e=>!0},setup(e,t){let{attrs:n,slots:l,emit:a}=t;const{densityClasses:o}=Ye(e),{rtlClasses:i}=De(),{InputIcon:s}=fs(e),u=We(),c=h(()=>e.id||`input-${u}`),d=h(()=>`${c.value}-messages`),{errorMessages:f,isDirty:v,isDisabled:m,isReadonly:g,isPristine:y,isValid:b,isValidating:p,reset:S,resetValidation:C,validate:_,validationClasses:V}=ys(e,"v-input",c),x=h(()=>({id:c,messagesId:d,isDirty:v,isDisabled:m,isReadonly:g,isPristine:y,isValid:b,isValidating:p,reset:S,resetValidation:C,validate:_})),T=h(()=>{var w;return(w=e.errorMessages)!=null&&w.length||!y.value&&f.value.length?f.value:e.hint&&(e.persistentHint||e.focused)?e.hint:e.messages});return j(()=>{var B,E,F,X;const w=!!(l.prepend||e.prependIcon),k=!!(l.append||e.appendIcon),I=T.value.length>0,A=!e.hideDetails||e.hideDetails==="auto"&&(I||!!l.details);return r("div",{class:["v-input",`v-input--${e.direction}`,{"v-input--center-affix":e.centerAffix},o.value,i.value,V.value,e.class],style:e.style},[w&&r("div",{key:"prepend",class:"v-input__prepend"},[(B=l.prepend)==null?void 0:B.call(l,x.value),e.prependIcon&&r(s,{key:"prepend-icon",name:"prepend"},null)]),l.default&&r("div",{class:"v-input__control"},[(E=l.default)==null?void 0:E.call(l,x.value)]),k&&r("div",{key:"append",class:"v-input__append"},[e.appendIcon&&r(s,{key:"append-icon",name:"append"},null),(F=l.append)==null?void 0:F.call(l,x.value)]),A&&r("div",{class:"v-input__details"},[r(ms,{id:d.value,active:I,messages:T.value},{message:l.message}),(X=l.details)==null?void 0:X.call(l,x.value)])])}),{reset:S,resetValidation:C,validate:_}}}),$g=R({...Bt(),...rt(vs(),["inline"])},"VCheckbox"),Mg=L()({name:"VCheckbox",inheritAttrs:!1,props:$g(),emits:{"update:modelValue":e=>!0,"update:focused":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const a=ue(e,"modelValue"),{isFocused:o,focus:i,blur:s}=Nt(e),u=We(),c=h(()=>e.id||`checkbox-${u}`);return j(()=>{const[d,f]=en(n),[v,m]=Ne.filterProps(e),[g,y]=gn.filterProps(e);return r(Ne,Y({class:["v-checkbox",e.class]},d,v,{modelValue:a.value,"onUpdate:modelValue":b=>a.value=b,id:c.value,focused:o.value,style:e.style}),{...l,default:b=>{let{id:p,messagesId:S,isDisabled:C,isReadonly:_}=b;return r(gn,Y(g,{id:p.value,"aria-describedby":S.value,disabled:C.value,readonly:_.value},f,{modelValue:a.value,"onUpdate:modelValue":V=>a.value=V,onFocus:i,onBlur:s}),l)}})}),{}}});const Fg=R({start:Boolean,end:Boolean,icon:se,image:String,...q(),...Fe(),...Ie(),...At(),...ce(),...he(),...mt({variant:"flat"})},"VAvatar"),$t=L()({name:"VAvatar",props:Fg(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{colorClasses:a,colorStyles:o,variantClasses:i}=an(e),{densityClasses:s}=Ye(e),{roundedClasses:u}=Ae(e),{sizeClasses:c,sizeStyles:d}=Cn(e);return j(()=>r(e.tag,{class:["v-avatar",{"v-avatar--start":e.start,"v-avatar--end":e.end},l.value,a.value,s.value,u.value,c.value,i.value,e.class],style:[o.value,d.value,e.style]},{default:()=>{var f;return[e.image?r(Xt,{key:"image",src:e.image,alt:"",cover:!0},null):e.icon?r(Se,{key:"icon",icon:e.icon},null):(f=n.default)==null?void 0:f.call(n),ln(!1,"v-avatar")]}})),{}}});const bs=Symbol.for("vuetify:v-chip-group"),Og=R({column:Boolean,filter:Boolean,valueComparator:{type:Function,default:yn},...q(),...kn({selectedClass:"v-chip--selected"}),...ce(),...he(),...mt({variant:"tonal"})},"VChipGroup"),Dg=L()({name:"VChipGroup",props:Og(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{isSelected:a,select:o,next:i,prev:s,selected:u}=on(e,bs);return Ee({VChip:{color:O(e,"color"),disabled:O(e,"disabled"),filter:O(e,"filter"),variant:O(e,"variant")}}),j(()=>r(e.tag,{class:["v-chip-group",{"v-chip-group--column":e.column},l.value,e.class],style:e.style},{default:()=>{var c;return[(c=n.default)==null?void 0:c.call(n,{isSelected:a,select:o,next:i,prev:s,selected:u.value})]}})),{}}}),Ng=R({activeClass:String,appendAvatar:String,appendIcon:se,closable:Boolean,closeIcon:{type:se,default:"$delete"},closeLabel:{type:String,default:"$vuetify.close"},draggable:Boolean,filter:Boolean,filterIcon:{type:String,default:"$complete"},label:Boolean,link:{type:Boolean,default:void 0},pill:Boolean,prependAvatar:String,prependIcon:se,ripple:{type:[Boolean,Object],default:!0},text:String,modelValue:{type:Boolean,default:!0},onClick:St(),onClickOnce:St(),...at(),...q(),...Fe(),...Me(),...Sn(),...Ie(),...Wn(),...At(),...ce({tag:"span"}),...he(),...mt({variant:"tonal"})},"VChip"),Yn=L()({name:"VChip",directives:{Ripple:Dt},props:Ng(),emits:{"click:close":e=>!0,"update:modelValue":e=>!0,"group:selected":e=>!0,click:e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{t:o}=ct(),{borderClasses:i}=ft(e),{colorClasses:s,colorStyles:u,variantClasses:c}=an(e),{densityClasses:d}=Ye(e),{elevationClasses:f}=He(e),{roundedClasses:v}=Ae(e),{sizeClasses:m}=Cn(e),{themeClasses:g}=ye(e),y=ue(e,"modelValue"),b=wn(e,bs,!1),p=Gn(e,n),S=h(()=>e.link!==!1&&p.isLink.value),C=h(()=>!e.disabled&&e.link!==!1&&(!!b||e.link||p.isClickable.value)),_=h(()=>({"aria-label":o(e.closeLabel),onClick(T){T.stopPropagation(),y.value=!1,l("click:close",T)}}));function V(T){var w;l("click",T),C.value&&((w=p.navigate)==null||w.call(p,T),b==null||b.toggle())}function x(T){(T.key==="Enter"||T.key===" ")&&(T.preventDefault(),V(T))}return()=>{const T=p.isLink.value?"a":e.tag,w=!!(e.appendIcon||e.appendAvatar),k=!!(w||a.append),I=!!(a.close||e.closable),A=!!(a.filter||e.filter)&&b,B=!!(e.prependIcon||e.prependAvatar),E=!!(B||a.prepend),F=!b||b.isSelected.value;return y.value&&ne(r(T,{class:["v-chip",{"v-chip--disabled":e.disabled,"v-chip--label":e.label,"v-chip--link":C.value,"v-chip--filter":A,"v-chip--pill":e.pill},g.value,i.value,F?s.value:void 0,d.value,f.value,v.value,m.value,c.value,b==null?void 0:b.selectedClass.value,e.class],style:[F?u.value:void 0,e.style],disabled:e.disabled||void 0,draggable:e.draggable,href:p.href.value,tabindex:C.value?0:void 0,onClick:V,onKeydown:C.value&&!S.value&&x},{default:()=>{var X;return[ln(C.value,"v-chip"),A&&r(Ua,{key:"filter"},{default:()=>[ne(r("div",{class:"v-chip__filter"},[a.filter?r(pe,{key:"filter-defaults",disabled:!e.filterIcon,defaults:{VIcon:{icon:e.filterIcon}}},a.filter):r(Se,{key:"filter-icon",icon:e.filterIcon},null)]),[[Pe,b.isSelected.value]])]}),E&&r("div",{key:"prepend",class:"v-chip__prepend"},[a.prepend?r(pe,{key:"prepend-defaults",disabled:!B,defaults:{VAvatar:{image:e.prependAvatar,start:!0},VIcon:{icon:e.prependIcon,start:!0}}},a.prepend):r(oe,null,[e.prependIcon&&r(Se,{key:"prepend-icon",icon:e.prependIcon,start:!0},null),e.prependAvatar&&r($t,{key:"prepend-avatar",image:e.prependAvatar,start:!0},null)])]),r("div",{class:"v-chip__content"},[((X=a.default)==null?void 0:X.call(a,{isSelected:b==null?void 0:b.isSelected.value,selectedClass:b==null?void 0:b.selectedClass.value,select:b==null?void 0:b.select,toggle:b==null?void 0:b.toggle,value:b==null?void 0:b.value.value,disabled:e.disabled}))??e.text]),k&&r("div",{key:"append",class:"v-chip__append"},[a.append?r(pe,{key:"append-defaults",disabled:!w,defaults:{VAvatar:{end:!0,image:e.appendAvatar},VIcon:{end:!0,icon:e.appendIcon}}},a.append):r(oe,null,[e.appendIcon&&r(Se,{key:"append-icon",end:!0,icon:e.appendIcon},null),e.appendAvatar&&r($t,{key:"append-avatar",end:!0,image:e.appendAvatar},null)])]),I&&r("div",Y({key:"close",class:"v-chip__close"},_.value),[a.close?r(pe,{key:"close-defaults",defaults:{VIcon:{icon:e.closeIcon,size:"x-small"}}},a.close):r(Se,{key:"close-icon",icon:e.closeIcon,size:"x-small"},null)])]}}),[[Ze("ripple"),C.value&&e.ripple,null]])}}});const oa=Symbol.for("vuetify:list");function ps(){const e=Ve(oa,{hasPrepend:K(!1),updateHasPrepend:()=>null}),t={hasPrepend:K(!1),updateHasPrepend:n=>{n&&(t.hasPrepend.value=n)}};return $e(oa,t),e}function ks(){return Ve(oa,null)}const zg={open:e=>{let{id:t,value:n,opened:l,parents:a}=e;if(n){const o=new Set;o.add(t);let i=a.get(t);for(;i!=null;)o.add(i),i=a.get(i);return o}else return l.delete(t),l},select:()=>null},Ss={open:e=>{let{id:t,value:n,opened:l,parents:a}=e;if(n){let o=a.get(t);for(l.add(t);o!=null&&o!==t;)l.add(o),o=a.get(o);return l}else l.delete(t);return l},select:()=>null},Hg={open:Ss.open,select:e=>{let{id:t,value:n,opened:l,parents:a}=e;if(!n)return l;const o=[];let i=a.get(t);for(;i!=null;)o.push(i),i=a.get(i);return new Set(o)}},eo=e=>{const t={select:n=>{let{id:l,value:a,selected:o}=n;if(l=Mt(l),e&&!a){const i=Array.from(o.entries()).reduce((s,u)=>{let[c,d]=u;return d==="on"?[...s,c]:s},[]);if(i.length===1&&i[0]===l)return o}return o.set(l,a?"on":"off"),o},in:(n,l,a)=>{let o=new Map;for(const i of n||[])o=t.select({id:i,value:!0,selected:new Map(o),children:l,parents:a});return o},out:n=>{const l=[];for(const[a,o]of n.entries())o==="on"&&l.push(a);return l}};return t},ws=e=>{const t=eo(e);return{select:l=>{let{selected:a,id:o,...i}=l;o=Mt(o);const s=a.has(o)?new Map([[o,a.get(o)]]):new Map;return t.select({...i,id:o,selected:s})},in:(l,a,o)=>{let i=new Map;return l!=null&&l.length&&(i=t.in(l.slice(0,1),a,o)),i},out:(l,a,o)=>t.out(l,a,o)}},jg=e=>{const t=eo(e);return{select:l=>{let{id:a,selected:o,children:i,...s}=l;return a=Mt(a),i.has(a)?o:t.select({id:a,selected:o,children:i,...s})},in:t.in,out:t.out}},Ug=e=>{const t=ws(e);return{select:l=>{let{id:a,selected:o,children:i,...s}=l;return a=Mt(a),i.has(a)?o:t.select({id:a,selected:o,children:i,...s})},in:t.in,out:t.out}},Gg=e=>{const t={select:n=>{let{id:l,value:a,selected:o,children:i,parents:s}=n;l=Mt(l);const u=new Map(o),c=[l];for(;c.length;){const f=c.shift();o.set(f,a?"on":"off"),i.has(f)&&c.push(...i.get(f))}let d=s.get(l);for(;d;){const f=i.get(d),v=f.every(g=>o.get(g)==="on"),m=f.every(g=>!o.has(g)||o.get(g)==="off");o.set(d,v?"on":m?"off":"indeterminate"),d=s.get(d)}return e&&!a&&Array.from(o.entries()).reduce((v,m)=>{let[g,y]=m;return y==="on"?[...v,g]:v},[]).length===0?u:o},in:(n,l,a)=>{let o=new Map;for(const i of n||[])o=t.select({id:i,value:!0,selected:new Map(o),children:l,parents:a});return o},out:(n,l)=>{const a=[];for(const[o,i]of n.entries())i==="on"&&!l.has(o)&&a.push(o);return a}};return t},Nn=Symbol.for("vuetify:nested"),Cs={id:K(),root:{register:()=>null,unregister:()=>null,parents:W(new Map),children:W(new Map),open:()=>null,openOnSelect:()=>null,select:()=>null,opened:W(new Set),selected:W(new Map),selectedValues:W([])}},Wg=R({selectStrategy:[String,Function],openStrategy:[String,Object],opened:Array,selected:Array,mandatory:Boolean},"nested"),Yg=e=>{let t=!1;const n=W(new Map),l=W(new Map),a=ue(e,"opened",e.opened,f=>new Set(f),f=>[...f.values()]),o=h(()=>{if(typeof e.selectStrategy=="object")return e.selectStrategy;switch(e.selectStrategy){case"single-leaf":return Ug(e.mandatory);case"leaf":return jg(e.mandatory);case"independent":return eo(e.mandatory);case"single-independent":return ws(e.mandatory);case"classic":default:return Gg(e.mandatory)}}),i=h(()=>{if(typeof e.openStrategy=="object")return e.openStrategy;switch(e.openStrategy){case"list":return Hg;case"single":return zg;case"multiple":default:return Ss}}),s=ue(e,"selected",e.selected,f=>o.value.in(f,n.value,l.value),f=>o.value.out(f,n.value,l.value));nt(()=>{t=!0});function u(f){const v=[];let m=f;for(;m!=null;)v.unshift(m),m=l.value.get(m);return v}const c=Oe("nested"),d={id:K(),root:{opened:a,selected:s,selectedValues:h(()=>{const f=[];for(const[v,m]of s.value.entries())m==="on"&&f.push(v);return f}),register:(f,v,m)=>{v&&f!==v&&l.value.set(f,v),m&&n.value.set(f,[]),v!=null&&n.value.set(v,[...n.value.get(v)||[],f])},unregister:f=>{if(t)return;n.value.delete(f);const v=l.value.get(f);if(v){const m=n.value.get(v)??[];n.value.set(v,m.filter(g=>g!==f))}l.value.delete(f),a.value.delete(f)},open:(f,v,m)=>{c.emit("click:open",{id:f,value:v,path:u(f),event:m});const g=i.value.open({id:f,value:v,opened:new Set(a.value),children:n.value,parents:l.value,event:m});g&&(a.value=g)},openOnSelect:(f,v,m)=>{const g=i.value.select({id:f,value:v,selected:new Map(s.value),opened:new Set(a.value),children:n.value,parents:l.value,event:m});g&&(a.value=g)},select:(f,v,m)=>{c.emit("click:select",{id:f,value:v,path:u(f),event:m});const g=o.value.select({id:f,value:v,selected:new Map(s.value),children:n.value,parents:l.value,event:m});g&&(s.value=g),d.root.openOnSelect(f,v,m)},children:n,parents:l}};return $e(Nn,d),d.root},xs=(e,t)=>{const n=Ve(Nn,Cs),l=Symbol(We()),a=h(()=>e.value!==void 0?e.value:l),o={...n,id:a,open:(i,s)=>n.root.open(a.value,i,s),openOnSelect:(i,s)=>n.root.openOnSelect(a.value,i,s),isOpen:h(()=>n.root.opened.value.has(a.value)),parent:h(()=>n.root.parents.value.get(a.value)),select:(i,s)=>n.root.select(a.value,i,s),isSelected:h(()=>n.root.selected.value.get(Mt(a.value))==="on"),isIndeterminate:h(()=>n.root.selected.value.get(a.value)==="indeterminate"),isLeaf:h(()=>!n.root.children.value.get(a.value)),isGroupActivator:n.isGroupActivator};return!n.isGroupActivator&&n.root.register(a.value,n.id.value,t),nt(()=>{!n.isGroupActivator&&n.root.unregister(a.value)}),t&&$e(Nn,o),o},Kg=()=>{const e=Ve(Nn,Cs);$e(Nn,{...e,isGroupActivator:!0})},qg=ut({name:"VListGroupActivator",setup(e,t){let{slots:n}=t;return Kg(),()=>{var l;return(l=n.default)==null?void 0:l.call(n)}}}),Xg=R({activeColor:String,baseColor:String,color:String,collapseIcon:{type:se,default:"$collapse"},expandIcon:{type:se,default:"$expand"},prependIcon:se,appendIcon:se,fluid:Boolean,subgroup:Boolean,title:String,value:null,...q(),...ce()},"VListGroup"),ia=L()({name:"VListGroup",props:Xg(),setup(e,t){let{slots:n}=t;const{isOpen:l,open:a,id:o}=xs(O(e,"value"),!0),i=h(()=>`v-list-group--id-${String(o.value)}`),s=ks(),{isBooted:u}=nn();function c(m){a(!l.value,m)}const d=h(()=>({onClick:c,class:"v-list-group__header",id:i.value})),f=h(()=>l.value?e.collapseIcon:e.expandIcon),v=h(()=>({VListItem:{active:l.value,activeColor:e.activeColor,baseColor:e.baseColor,color:e.color,prependIcon:e.prependIcon||e.subgroup&&f.value,appendIcon:e.appendIcon||!e.subgroup&&f.value,title:e.title,value:e.value}}));return j(()=>r(e.tag,{class:["v-list-group",{"v-list-group--prepend":s==null?void 0:s.hasPrepend.value,"v-list-group--fluid":e.fluid,"v-list-group--subgroup":e.subgroup,"v-list-group--open":l.value},e.class],style:e.style},{default:()=>[n.activator&&r(pe,{defaults:v.value},{default:()=>[r(qg,null,{default:()=>[n.activator({props:d.value,isOpen:l.value})]})]}),r(ht,{transition:{component:kl},disabled:!u.value},{default:()=>{var m;return[ne(r("div",{class:"v-list-group__items",role:"group","aria-labelledby":i.value},[(m=n.default)==null?void 0:m.call(n)]),[[Pe,l.value]])]}})]})),{}}});const Vs=bt("v-list-item-subtitle"),_s=bt("v-list-item-title"),Zg=R({active:{type:Boolean,default:void 0},activeClass:String,activeColor:String,appendAvatar:String,appendIcon:se,baseColor:String,disabled:Boolean,lines:String,link:{type:Boolean,default:void 0},nav:Boolean,prependAvatar:String,prependIcon:se,ripple:{type:[Boolean,Object],default:!0},subtitle:[String,Number,Boolean],title:[String,Number,Boolean],value:null,onClick:St(),onClickOnce:St(),...at(),...q(),...Fe(),...dt(),...Me(),...Ie(),...Wn(),...ce(),...he(),...mt({variant:"text"})},"VListItem"),_t=L()({name:"VListItem",directives:{Ripple:Dt},props:Zg(),emits:{click:e=>!0},setup(e,t){let{attrs:n,slots:l,emit:a}=t;const o=Gn(e,n),i=h(()=>e.value===void 0?o.href.value:e.value),{select:s,isSelected:u,isIndeterminate:c,isGroupActivator:d,root:f,parent:v,openOnSelect:m}=xs(i,!1),g=ks(),y=h(()=>{var M;return e.active!==!1&&(e.active||((M=o.isActive)==null?void 0:M.value)||u.value)}),b=h(()=>e.link!==!1&&o.isLink.value),p=h(()=>!e.disabled&&e.link!==!1&&(e.link||o.isClickable.value||e.value!=null&&!!g)),S=h(()=>e.rounded||e.nav),C=h(()=>e.color??e.activeColor),_=h(()=>({color:y.value?C.value??e.baseColor:e.baseColor,variant:e.variant}));Z(()=>{var M;return(M=o.isActive)==null?void 0:M.value},M=>{M&&v.value!=null&&f.open(v.value,!0),M&&m(M)},{immediate:!0});const{themeClasses:V}=ye(e),{borderClasses:x}=ft(e),{colorClasses:T,colorStyles:w,variantClasses:k}=an(_),{densityClasses:I}=Ye(e),{dimensionStyles:A}=vt(e),{elevationClasses:B}=He(e),{roundedClasses:E}=Ae(S),F=h(()=>e.lines?`v-list-item--${e.lines}-line`:void 0),X=h(()=>({isActive:y.value,select:s,isSelected:u.value,isIndeterminate:c.value}));function $(M){var G;a("click",M),!(d||!p.value)&&((G=o.navigate)==null||G.call(o,M),e.value!=null&&s(!u.value,M))}function N(M){(M.key==="Enter"||M.key===" ")&&(M.preventDefault(),$(M))}return j(()=>{const M=b.value?"a":e.tag,G=l.title||e.title,U=l.subtitle||e.subtitle,z=!!(e.appendAvatar||e.appendIcon),ae=!!(z||l.append),re=!!(e.prependAvatar||e.prependIcon),ve=!!(re||l.prepend);return g==null||g.updateHasPrepend(ve),e.activeColor&&_f("active-color",["color","base-color"]),ne(r(M,{class:["v-list-item",{"v-list-item--active":y.value,"v-list-item--disabled":e.disabled,"v-list-item--link":p.value,"v-list-item--nav":e.nav,"v-list-item--prepend":!ve&&(g==null?void 0:g.hasPrepend.value),[`${e.activeClass}`]:e.activeClass&&y.value},V.value,x.value,T.value,I.value,B.value,F.value,E.value,k.value,e.class],style:[w.value,A.value,e.style],href:o.href.value,tabindex:p.value?g?-2:0:void 0,onClick:$,onKeydown:p.value&&!b.value&&N},{default:()=>{var ge;return[ln(p.value||y.value,"v-list-item"),ve&&r("div",{key:"prepend",class:"v-list-item__prepend"},[l.prepend?r(pe,{key:"prepend-defaults",disabled:!re,defaults:{VAvatar:{density:e.density,image:e.prependAvatar},VIcon:{density:e.density,icon:e.prependIcon},VListItemAction:{start:!0}}},{default:()=>{var D;return[(D=l.prepend)==null?void 0:D.call(l,X.value)]}}):r(oe,null,[e.prependAvatar&&r($t,{key:"prepend-avatar",density:e.density,image:e.prependAvatar},null),e.prependIcon&&r(Se,{key:"prepend-icon",density:e.density,icon:e.prependIcon},null)]),r("div",{class:"v-list-item__spacer"},null)]),r("div",{class:"v-list-item__content","data-no-activator":""},[G&&r(_s,{key:"title"},{default:()=>{var D;return[((D=l.title)==null?void 0:D.call(l,{title:e.title}))??e.title]}}),U&&r(Vs,{key:"subtitle"},{default:()=>{var D;return[((D=l.subtitle)==null?void 0:D.call(l,{subtitle:e.subtitle}))??e.subtitle]}}),(ge=l.default)==null?void 0:ge.call(l,X.value)]),ae&&r("div",{key:"append",class:"v-list-item__append"},[l.append?r(pe,{key:"append-defaults",disabled:!z,defaults:{VAvatar:{density:e.density,image:e.appendAvatar},VIcon:{density:e.density,icon:e.appendIcon},VListItemAction:{end:!0}}},{default:()=>{var D;return[(D=l.append)==null?void 0:D.call(l,X.value)]}}):r(oe,null,[e.appendIcon&&r(Se,{key:"append-icon",density:e.density,icon:e.appendIcon},null),e.appendAvatar&&r($t,{key:"append-avatar",density:e.density,image:e.appendAvatar},null)]),r("div",{class:"v-list-item__spacer"},null)])]}}),[[Ze("ripple"),p.value&&e.ripple]])}),{}}}),Jg=R({color:String,inset:Boolean,sticky:Boolean,title:String,...q(),...ce()},"VListSubheader"),Is=L()({name:"VListSubheader",props:Jg(),setup(e,t){let{slots:n}=t;const{textColorClasses:l,textColorStyles:a}=Ge(O(e,"color"));return j(()=>{const o=!!(n.default||e.title);return r(e.tag,{class:["v-list-subheader",{"v-list-subheader--inset":e.inset,"v-list-subheader--sticky":e.sticky},l.value,e.class],style:[{textColorStyles:a},e.style]},{default:()=>{var i;return[o&&r("div",{class:"v-list-subheader__text"},[((i=n.default)==null?void 0:i.call(n))??e.title])]}})}),{}}});const Qg=R({color:String,inset:Boolean,length:[Number,String],thickness:[Number,String],vertical:Boolean,...q(),...he()},"VDivider"),Ts=L()({name:"VDivider",props:Qg(),setup(e,t){let{attrs:n}=t;const{themeClasses:l}=ye(e),{textColorClasses:a,textColorStyles:o}=Ge(O(e,"color")),i=h(()=>{const s={};return e.length&&(s[e.vertical?"maxHeight":"maxWidth"]=J(e.length)),e.thickness&&(s[e.vertical?"borderRightWidth":"borderTopWidth"]=J(e.thickness)),s});return j(()=>r("hr",{class:[{"v-divider":!0,"v-divider--inset":e.inset,"v-divider--vertical":e.vertical},l.value,a.value,e.class],style:[i.value,o.value,e.style],"aria-orientation":!n.role||n.role==="separator"?e.vertical?"vertical":"horizontal":void 0,role:`${n.role||"separator"}`},null)),{}}}),eh=R({items:Array,returnObject:Boolean},"VListChildren"),Ps=L()({name:"VListChildren",props:eh(),setup(e,t){let{slots:n}=t;return ps(),()=>{var l,a;return((l=n.default)==null?void 0:l.call(n))??((a=e.items)==null?void 0:a.map(o=>{var m,g;let{children:i,props:s,type:u,raw:c}=o;if(u==="divider")return((m=n.divider)==null?void 0:m.call(n,{props:s}))??r(Ts,s,null);if(u==="subheader")return((g=n.subheader)==null?void 0:g.call(n,{props:s}))??r(Is,s,null);const d={subtitle:n.subtitle?y=>{var b;return(b=n.subtitle)==null?void 0:b.call(n,{...y,item:c})}:void 0,prepend:n.prepend?y=>{var b;return(b=n.prepend)==null?void 0:b.call(n,{...y,item:c})}:void 0,append:n.append?y=>{var b;return(b=n.append)==null?void 0:b.call(n,{...y,item:c})}:void 0,title:n.title?y=>{var b;return(b=n.title)==null?void 0:b.call(n,{...y,item:c})}:void 0},[f,v]=ia.filterProps(s);return i?r(ia,Y({value:s==null?void 0:s.value},f),{activator:y=>{let{props:b}=y;const p={...s,...b,value:e.returnObject?c:s.value};return n.header?n.header({props:p}):r(_t,p,d)},default:()=>r(Ps,{items:i},n)}):n.item?n.item({props:s}):r(_t,Y(s,{value:e.returnObject?c:s.value}),d)}))}}}),As=R({items:{type:Array,default:()=>[]},itemTitle:{type:[String,Array,Function],default:"title"},itemValue:{type:[String,Array,Function],default:"value"},itemChildren:{type:[Boolean,String,Array,Function],default:"children"},itemProps:{type:[Boolean,String,Array,Function],default:"props"},returnObject:Boolean,valueComparator:{type:Function,default:yn}},"list-items");function Wt(e,t){const n=kt(t,e.itemTitle,t),l=kt(t,e.itemValue,n),a=kt(t,e.itemChildren),o=e.itemProps===!0?typeof t=="object"&&t!=null&&!Array.isArray(t)?"children"in t?qt(t,["children"])[1]:t:void 0:kt(t,e.itemProps),i={title:n,value:l,...o};return{title:String(i.title??""),value:i.value,props:i,children:Array.isArray(a)?Bs(e,a):void 0,raw:t}}function Bs(e,t){const n=[];for(const l of t)n.push(Wt(e,l));return n}function to(e){const t=h(()=>Bs(e,e.items)),n=h(()=>t.value.some(o=>o.value===null));function l(o){return n.value||(o=o.filter(i=>i!==null)),o.map(i=>e.returnObject&&typeof i=="string"?Wt(e,i):t.value.find(s=>e.valueComparator(i,s.value))||Wt(e,i))}function a(o){return e.returnObject?o.map(i=>{let{raw:s}=i;return s}):o.map(i=>{let{value:s}=i;return s})}return{items:t,transformIn:l,transformOut:a}}function th(e){return typeof e=="string"||typeof e=="number"||typeof e=="boolean"}function nh(e,t){const n=kt(t,e.itemType,"item"),l=th(t)?t:kt(t,e.itemTitle),a=kt(t,e.itemValue,void 0),o=kt(t,e.itemChildren),i=e.itemProps===!0?qt(t,["children"])[1]:kt(t,e.itemProps),s={title:l,value:a,...i};return{type:n,title:s.title,value:s.value,props:s,children:n==="item"&&o?Rs(e,o):void 0,raw:t}}function Rs(e,t){const n=[];for(const l of t)n.push(nh(e,l));return n}function lh(e){return{items:h(()=>Rs(e,e.items))}}const ah=R({baseColor:String,activeColor:String,activeClass:String,bgColor:String,disabled:Boolean,lines:{type:[Boolean,String],default:"one"},nav:Boolean,...Wg({selectStrategy:"single-leaf",openStrategy:"list"}),...at(),...q(),...Fe(),...dt(),...Me(),itemType:{type:String,default:"type"},...As(),...Ie(),...ce(),...he(),...mt({variant:"text"})},"VList"),Vl=L()({name:"VList",props:ah(),emits:{"update:selected":e=>!0,"update:opened":e=>!0,"click:open":e=>!0,"click:select":e=>!0},setup(e,t){let{slots:n}=t;const{items:l}=lh(e),{themeClasses:a}=ye(e),{backgroundColorClasses:o,backgroundColorStyles:i}=Be(O(e,"bgColor")),{borderClasses:s}=ft(e),{densityClasses:u}=Ye(e),{dimensionStyles:c}=vt(e),{elevationClasses:d}=He(e),{roundedClasses:f}=Ae(e),{open:v,select:m}=Yg(e),g=h(()=>e.lines?`v-list--${e.lines}-line`:void 0),y=O(e,"activeColor"),b=O(e,"baseColor"),p=O(e,"color");ps(),Ee({VListGroup:{activeColor:y,baseColor:b,color:p},VListItem:{activeClass:O(e,"activeClass"),activeColor:y,baseColor:b,color:p,density:O(e,"density"),disabled:O(e,"disabled"),lines:O(e,"lines"),nav:O(e,"nav"),variant:O(e,"variant")}});const S=K(!1),C=W();function _(k){S.value=!0}function V(k){S.value=!1}function x(k){var I;!S.value&&!(k.relatedTarget&&((I=C.value)!=null&&I.contains(k.relatedTarget)))&&w()}function T(k){if(C.value){if(k.key==="ArrowDown")w("next");else if(k.key==="ArrowUp")w("prev");else if(k.key==="Home")w("first");else if(k.key==="End")w("last");else return;k.preventDefault()}}function w(k){if(C.value)return cl(C.value,k)}return j(()=>r(e.tag,{ref:C,class:["v-list",{"v-list--disabled":e.disabled,"v-list--nav":e.nav},a.value,o.value,s.value,u.value,d.value,g.value,f.value,e.class],style:[i.value,c.value,e.style],tabindex:e.disabled||S.value?-1:0,role:"listbox","aria-activedescendant":void 0,onFocusin:_,onFocusout:V,onFocus:x,onKeydown:T},{default:()=>[r(Ps,{items:l.value,returnObject:e.returnObject},n)]})),{open:v,select:m,focus:w}}}),oh=bt("v-list-img"),ih=R({start:Boolean,end:Boolean,...q(),...ce()},"VListItemAction"),sh=L()({name:"VListItemAction",props:ih(),setup(e,t){let{slots:n}=t;return j(()=>r(e.tag,{class:["v-list-item-action",{"v-list-item-action--start":e.start,"v-list-item-action--end":e.end},e.class],style:e.style},n)),{}}}),rh=R({start:Boolean,end:Boolean,...q(),...ce()},"VListItemMedia"),uh=L()({name:"VListItemMedia",props:rh(),setup(e,t){let{slots:n}=t;return j(()=>r(e.tag,{class:["v-list-item-media",{"v-list-item-media--start":e.start,"v-list-item-media--end":e.end},e.class],style:e.style},n)),{}}});function Ol(e,t){return{x:e.x+t.x,y:e.y+t.y}}function ch(e,t){return{x:e.x-t.x,y:e.y-t.y}}function qo(e,t){if(e.side==="top"||e.side==="bottom"){const{side:n,align:l}=e,a=l==="left"?0:l==="center"?t.width/2:l==="right"?t.width:l,o=n==="top"?0:n==="bottom"?t.height:n;return Ol({x:a,y:o},t)}else if(e.side==="left"||e.side==="right"){const{side:n,align:l}=e,a=n==="left"?0:n==="right"?t.width:n,o=l==="top"?0:l==="center"?t.height/2:l==="bottom"?t.height:l;return Ol({x:a,y:o},t)}return Ol({x:t.width/2,y:t.height/2},t)}const Es={static:fh,connected:gh},dh=R({locationStrategy:{type:[String,Function],default:"static",validator:e=>typeof e=="function"||e in Es},location:{type:String,default:"bottom"},origin:{type:String,default:"auto"},offset:[Number,String,Array]},"VOverlay-location-strategies");function vh(e,t){const n=W({}),l=W();Ce&&(Lt(()=>!!(t.isActive.value&&e.locationStrategy),o=>{var i,s;Z(()=>e.locationStrategy,o),Xe(()=>{l.value=void 0}),typeof e.locationStrategy=="function"?l.value=(i=e.locationStrategy(t,e,n))==null?void 0:i.updateLocation:l.value=(s=Es[e.locationStrategy](t,e,n))==null?void 0:s.updateLocation}),window.addEventListener("resize",a,{passive:!0}),Xe(()=>{window.removeEventListener("resize",a),l.value=void 0}));function a(o){var i;(i=l.value)==null||i.call(l,o)}return{contentStyles:n,updateLocation:l}}function fh(){}function mh(e,t){t?e.style.removeProperty("left"):e.style.removeProperty("right");const n=Ea(e);return t?n.x+=parseFloat(e.style.right||0):n.x-=parseFloat(e.style.left||0),n.y-=parseFloat(e.style.top||0),n}function gh(e,t,n){jf(e.activatorEl.value)&&Object.assign(n.value,{position:"fixed",top:0,[e.isRtl.value?"right":"left"]:0});const{preferredAnchor:a,preferredOrigin:o}=Ba(()=>{const g=Gl(t.location,e.isRtl.value),y=t.origin==="overlap"?g:t.origin==="auto"?Ll(g):Gl(t.origin,e.isRtl.value);return g.side===y.side&&g.align===$l(y).align?{preferredAnchor:po(g),preferredOrigin:po(y)}:{preferredAnchor:g,preferredOrigin:y}}),[i,s,u,c]=["minWidth","minHeight","maxWidth","maxHeight"].map(g=>h(()=>{const y=parseFloat(t[g]);return isNaN(y)?1/0:y})),d=h(()=>{if(Array.isArray(t.offset))return t.offset;if(typeof t.offset=="string"){const g=t.offset.split(" ").map(parseFloat);return g.length<2&&g.push(0),g}return typeof t.offset=="number"?[t.offset,0]:[0,0]});let f=!1;const v=new ResizeObserver(()=>{f&&m()});Z([e.activatorEl,e.contentEl],(g,y)=>{let[b,p]=g,[S,C]=y;S&&v.unobserve(S),b&&v.observe(b),C&&v.unobserve(C),p&&v.observe(p)},{immediate:!0}),Xe(()=>{v.disconnect()});function m(){if(f=!1,requestAnimationFrame(()=>{requestAnimationFrame(()=>f=!0)}),!e.activatorEl.value||!e.contentEl.value)return;const g=e.activatorEl.value.getBoundingClientRect(),y=mh(e.contentEl.value,e.isRtl.value),b=vl(e.contentEl.value),p=12;b.length||(b.push(document.documentElement),e.contentEl.value.style.top&&e.contentEl.value.style.left||(y.x-=parseFloat(document.documentElement.style.getPropertyValue("--v-body-scroll-x")||0),y.y-=parseFloat(document.documentElement.style.getPropertyValue("--v-body-scroll-y")||0)));const S=b.reduce((A,B)=>{const E=B.getBoundingClientRect(),F=new dn({x:B===document.documentElement?0:E.x,y:B===document.documentElement?0:E.y,width:B.clientWidth,height:B.clientHeight});return A?new dn({x:Math.max(A.left,F.left),y:Math.max(A.top,F.top),width:Math.min(A.right,F.right)-Math.max(A.left,F.left),height:Math.min(A.bottom,F.bottom)-Math.max(A.top,F.top)}):F},void 0);S.x+=p,S.y+=p,S.width-=p*2,S.height-=p*2;let C={anchor:a.value,origin:o.value};function _(A){const B=new dn(y),E=qo(A.anchor,g),F=qo(A.origin,B);let{x:X,y:$}=ch(E,F);switch(A.anchor.side){case"top":$-=d.value[0];break;case"bottom":$+=d.value[0];break;case"left":X-=d.value[0];break;case"right":X+=d.value[0];break}switch(A.anchor.align){case"top":$-=d.value[1];break;case"bottom":$+=d.value[1];break;case"left":X-=d.value[1];break;case"right":X+=d.value[1];break}return B.x+=X,B.y+=$,B.width=Math.min(B.width,u.value),B.height=Math.min(B.height,c.value),{overflows:So(B,S),x:X,y:$}}let V=0,x=0;const T={x:0,y:0},w={x:!1,y:!1};let k=-1;for(;!(k++>10);){const{x:A,y:B,overflows:E}=_(C);V+=A,x+=B,y.x+=A,y.y+=B;{const F=ko(C.anchor),X=E.x.before||E.x.after,$=E.y.before||E.y.after;let N=!1;if(["x","y"].forEach(M=>{if(M==="x"&&X&&!w.x||M==="y"&&$&&!w.y){const G={anchor:{...C.anchor},origin:{...C.origin}},U=M==="x"?F==="y"?$l:Ll:F==="y"?Ll:$l;G.anchor=U(G.anchor),G.origin=U(G.origin);const{overflows:z}=_(G);(z[M].before<=E[M].before&&z[M].after<=E[M].after||z[M].before+z[M].after<(E[M].before+E[M].after)/2)&&(C=G,N=w[M]=!0)}}),N)continue}E.x.before&&(V+=E.x.before,y.x+=E.x.before),E.x.after&&(V-=E.x.after,y.x-=E.x.after),E.y.before&&(x+=E.y.before,y.y+=E.y.before),E.y.after&&(x-=E.y.after,y.y-=E.y.after);{const F=So(y,S);T.x=S.width-F.x.before-F.x.after,T.y=S.height-F.y.before-F.y.after,V+=F.x.before,y.x+=F.x.before,x+=F.y.before,y.y+=F.y.before}break}const I=ko(C.anchor);return Object.assign(n.value,{"--v-overlay-anchor-origin":`${C.anchor.side} ${C.anchor.align}`,transformOrigin:`${C.origin.side} ${C.origin.align}`,top:J(Dl(x)),left:e.isRtl.value?void 0:J(Dl(V)),right:e.isRtl.value?J(Dl(-V)):void 0,minWidth:J(I==="y"?Math.min(i.value,g.width):i.value),maxWidth:J(Xo(Ue(T.x,i.value===1/0?0:i.value,u.value))),maxHeight:J(Xo(Ue(T.y,s.value===1/0?0:s.value,c.value)))}),{available:T,contentBox:y}}return Z(()=>[a.value,o.value,t.offset,t.minWidth,t.minHeight,t.maxWidth,t.maxHeight],()=>m()),xe(()=>{const g=m();if(!g)return;const{available:y,contentBox:b}=g;b.height>y.y&&requestAnimationFrame(()=>{m(),requestAnimationFrame(()=>{m()})})}),{updateLocation:m}}function Dl(e){return Math.round(e*devicePixelRatio)/devicePixelRatio}function Xo(e){return Math.ceil(e*devicePixelRatio)/devicePixelRatio}let sa=!0;const gl=[];function hh(e){!sa||gl.length?(gl.push(e),ra()):(sa=!1,e(),ra())}let Zo=-1;function ra(){cancelAnimationFrame(Zo),Zo=requestAnimationFrame(()=>{const e=gl.shift();e&&e(),gl.length?ra():sa=!0})}const il={none:null,close:ph,block:kh,reposition:Sh},yh=R({scrollStrategy:{type:[String,Function],default:"block",validator:e=>typeof e=="function"||e in il}},"VOverlay-scroll-strategies");function bh(e,t){if(!Ce)return;let n;tt(async()=>{n==null||n.stop(),t.isActive.value&&e.scrollStrategy&&(n=wa(),await xe(),n.active&&n.run(()=>{var l;typeof e.scrollStrategy=="function"?e.scrollStrategy(t,e,n):(l=il[e.scrollStrategy])==null||l.call(il,t,e,n)}))}),Xe(()=>{n==null||n.stop()})}function ph(e){function t(n){e.isActive.value=!1}Ls(e.activatorEl.value??e.contentEl.value,t)}function kh(e,t){var i;const n=(i=e.root.value)==null?void 0:i.offsetParent,l=[...new Set([...vl(e.activatorEl.value,t.contained?n:void 0),...vl(e.contentEl.value,t.contained?n:void 0)])].filter(s=>!s.classList.contains("v-overlay-scroll-blocked")),a=window.innerWidth-document.documentElement.offsetWidth,o=(s=>Fa(s)&&s)(n||document.documentElement);o&&e.root.value.classList.add("v-overlay--scroll-blocked"),l.forEach((s,u)=>{s.style.setProperty("--v-body-scroll-x",J(-s.scrollLeft)),s.style.setProperty("--v-body-scroll-y",J(-s.scrollTop)),s!==document.documentElement&&s.style.setProperty("--v-scrollbar-offset",J(a)),s.classList.add("v-overlay-scroll-blocked")}),Xe(()=>{l.forEach((s,u)=>{const c=parseFloat(s.style.getPropertyValue("--v-body-scroll-x")),d=parseFloat(s.style.getPropertyValue("--v-body-scroll-y"));s.style.removeProperty("--v-body-scroll-x"),s.style.removeProperty("--v-body-scroll-y"),s.style.removeProperty("--v-scrollbar-offset"),s.classList.remove("v-overlay-scroll-blocked"),s.scrollLeft=-c,s.scrollTop=-d}),o&&e.root.value.classList.remove("v-overlay--scroll-blocked")})}function Sh(e,t,n){let l=!1,a=-1,o=-1;function i(s){hh(()=>{var d,f;const u=performance.now();(f=(d=e.updateLocation).value)==null||f.call(d,s),l=(performance.now()-u)/(1e3/60)>2})}o=(typeof requestIdleCallback>"u"?s=>s():requestIdleCallback)(()=>{n.run(()=>{Ls(e.activatorEl.value??e.contentEl.value,s=>{l?(cancelAnimationFrame(a),a=requestAnimationFrame(()=>{a=requestAnimationFrame(()=>{i(s)})})):i(s)})})}),Xe(()=>{typeof cancelIdleCallback<"u"&&cancelIdleCallback(o),cancelAnimationFrame(a)})}function Ls(e,t){const n=[document,...vl(e)];n.forEach(l=>{l.addEventListener("scroll",t,{passive:!0})}),Xe(()=>{n.forEach(l=>{l.removeEventListener("scroll",t)})})}const ua=Symbol.for("vuetify:v-menu"),$s=R({closeDelay:[Number,String],openDelay:[Number,String]},"delay");function Ms(e,t){const n={},l=a=>()=>{if(!Ce)return Promise.resolve(!0);const o=a==="openDelay";return n.closeDelay&&window.clearTimeout(n.closeDelay),delete n.closeDelay,n.openDelay&&window.clearTimeout(n.openDelay),delete n.openDelay,new Promise(i=>{const s=parseInt(e[a]??0,10);n[a]=window.setTimeout(()=>{t==null||t(o),i(o)},s)})};return{runCloseDelay:l("closeDelay"),runOpenDelay:l("openDelay")}}const wh=R({activator:[String,Object],activatorProps:{type:Object,default:()=>({})},openOnClick:{type:Boolean,default:void 0},openOnHover:Boolean,openOnFocus:{type:Boolean,default:void 0},closeOnContentClick:Boolean,...$s()},"VOverlay-activator");function Ch(e,t){let{isActive:n,isTop:l}=t;const a=W();let o=!1,i=!1,s=!0;const u=h(()=>e.openOnFocus||e.openOnFocus==null&&e.openOnHover),c=h(()=>e.openOnClick||e.openOnClick==null&&!e.openOnHover&&!u.value),{runOpenDelay:d,runCloseDelay:f}=Ms(e,C=>{C===(e.openOnHover&&o||u.value&&i)&&!(e.openOnHover&&n.value&&!l.value)&&(n.value!==C&&(s=!0),n.value=C)}),v={onClick:C=>{C.stopPropagation(),a.value=C.currentTarget||C.target,n.value=!n.value},onMouseenter:C=>{var _;(_=C.sourceCapabilities)!=null&&_.firesTouchEvents||(o=!0,a.value=C.currentTarget||C.target,d())},onMouseleave:C=>{o=!1,f()},onFocus:C=>{vn(C.target,":focus-visible")!==!1&&(i=!0,C.stopPropagation(),a.value=C.currentTarget||C.target,d())},onBlur:C=>{i=!1,C.stopPropagation(),f()}},m=h(()=>{const C={};return c.value&&(C.onClick=v.onClick),e.openOnHover&&(C.onMouseenter=v.onMouseenter,C.onMouseleave=v.onMouseleave),u.value&&(C.onFocus=v.onFocus,C.onBlur=v.onBlur),C}),g=h(()=>{const C={};if(e.openOnHover&&(C.onMouseenter=()=>{o=!0,d()},C.onMouseleave=()=>{o=!1,f()}),u.value&&(C.onFocusin=()=>{i=!0,d()},C.onFocusout=()=>{i=!1,f()}),e.closeOnContentClick){const _=Ve(ua,null);C.onClick=()=>{n.value=!1,_==null||_.closeParents()}}return C}),y=h(()=>{const C={};return e.openOnHover&&(C.onMouseenter=()=>{s&&(o=!0,s=!1,d())},C.onMouseleave=()=>{o=!1,f()}),C});Z(l,C=>{C&&(e.openOnHover&&!o&&(!u.value||!i)||u.value&&!i&&(!e.openOnHover||!o))&&(n.value=!1)});const b=W();tt(()=>{b.value&&xe(()=>{a.value=jl(b.value)})});const p=Oe("useActivator");let S;return Z(()=>!!e.activator,C=>{C&&Ce?(S=wa(),S.run(()=>{xh(e,p,{activatorEl:a,activatorEvents:m})})):S&&S.stop()},{flush:"post",immediate:!0}),Xe(()=>{S==null||S.stop()}),{activatorEl:a,activatorRef:b,activatorEvents:m,contentEvents:g,scrimEvents:y}}function xh(e,t,n){let{activatorEl:l,activatorEvents:a}=n;Z(()=>e.activator,(u,c)=>{if(c&&u!==c){const d=s(c);d&&i(d)}u&&xe(()=>o())},{immediate:!0}),Z(()=>e.activatorProps,()=>{o()}),Xe(()=>{i()});function o(){let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:s(),c=arguments.length>1&&arguments[1]!==void 0?arguments[1]:e.activatorProps;u&&yf(u,Y(a.value,c))}function i(){let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:s(),c=arguments.length>1&&arguments[1]!==void 0?arguments[1]:e.activatorProps;u&&bf(u,Y(a.value,c))}function s(){var d,f;let u=arguments.length>0&&arguments[0]!==void 0?arguments[0]:e.activator,c;if(u)if(u==="parent"){let v=(f=(d=t==null?void 0:t.proxy)==null?void 0:d.$el)==null?void 0:f.parentNode;for(;v!=null&&v.hasAttribute("data-no-activator");)v=v.parentNode;c=v}else typeof u=="string"?c=document.querySelector(u):"$el"in u?c=u.$el:c=u;return l.value=(c==null?void 0:c.nodeType)===Node.ELEMENT_NODE?c:null,l.value}}function Fs(){if(!Ce)return K(!1);const{ssr:e}=tn();if(e){const t=K(!1);return Je(()=>{t.value=!0}),t}else return K(!0)}const _l=R({eager:Boolean},"lazy");function no(e,t){const n=K(!1),l=h(()=>n.value||e.eager||t.value);Z(t,()=>n.value=!0);function a(){e.eager||(n.value=!1)}return{isBooted:n,hasContent:l,onAfterLeave:a}}function In(){const t=Oe("useScopeId").vnode.scopeId;return{scopeId:t?{[t]:""}:void 0}}const Jo=Symbol.for("vuetify:stack"),An=gt([]);function Vh(e,t,n){const l=Oe("useStack"),a=!n,o=Ve(Jo,void 0),i=gt({activeChildren:new Set});$e(Jo,i);const s=K(+t.value);Lt(e,()=>{var f;const d=(f=An.at(-1))==null?void 0:f[1];s.value=d?d+10:+t.value,a&&An.push([l.uid,s.value]),o==null||o.activeChildren.add(l.uid),Xe(()=>{if(a){const v=Mt(An).findIndex(m=>m[0]===l.uid);An.splice(v,1)}o==null||o.activeChildren.delete(l.uid)})});const u=K(!0);a&&tt(()=>{var f;const d=((f=An.at(-1))==null?void 0:f[0])===l.uid;setTimeout(()=>u.value=d)});const c=h(()=>!i.activeChildren.size);return{globalTop:Ca(u),localTop:c,stackStyles:h(()=>({zIndex:s.value}))}}function _h(e){return{teleportTarget:h(()=>{const n=e.value;if(n===!0||!Ce)return;const l=n===!1?document.body:typeof n=="string"?document.querySelector(n):n;if(l==null)return;let a=l.querySelector(":scope > .v-overlay-container");return a||(a=document.createElement("div"),a.className="v-overlay-container",l.appendChild(a)),a})}}function Ih(){return!0}function Os(e,t,n){if(!e||Ds(e,n)===!1)return!1;const l=Ei(t);if(typeof ShadowRoot<"u"&&l instanceof ShadowRoot&&l.host===e.target)return!1;const a=(typeof n.value=="object"&&n.value.include||(()=>[]))();return a.push(t),!a.some(o=>o==null?void 0:o.contains(e.target))}function Ds(e,t){return(typeof t.value=="object"&&t.value.closeConditional||Ih)(e)}function Th(e,t,n){const l=typeof n.value=="function"?n.value:n.value.handler;t._clickOutside.lastMousedownWasOutside&&Os(e,t,n)&&setTimeout(()=>{Ds(e,n)&&l&&l(e)},0)}function Qo(e,t){const n=Ei(e);t(document),typeof ShadowRoot<"u"&&n instanceof ShadowRoot&&t(n)}const Ns={mounted(e,t){const n=a=>Th(a,e,t),l=a=>{e._clickOutside.lastMousedownWasOutside=Os(a,e,t)};Qo(e,a=>{a.addEventListener("click",n,!0),a.addEventListener("mousedown",l,!0)}),e._clickOutside||(e._clickOutside={lastMousedownWasOutside:!1}),e._clickOutside[t.instance.$.uid]={onClick:n,onMousedown:l}},unmounted(e,t){e._clickOutside&&(Qo(e,n=>{var o;if(!n||!((o=e._clickOutside)!=null&&o[t.instance.$.uid]))return;const{onClick:l,onMousedown:a}=e._clickOutside[t.instance.$.uid];n.removeEventListener("click",l,!0),n.removeEventListener("mousedown",a,!0)}),delete e._clickOutside[t.instance.$.uid])}};function Ph(e){const{modelValue:t,color:n,...l}=e;return r(Et,{name:"fade-transition",appear:!0},{default:()=>[e.modelValue&&r("div",Y({class:["v-overlay__scrim",e.color.backgroundColorClasses.value],style:e.color.backgroundColorStyles.value},l),null)]})}const Kn=R({absolute:Boolean,attach:[Boolean,String,Object],closeOnBack:{type:Boolean,default:!0},contained:Boolean,contentClass:null,contentProps:null,disabled:Boolean,noClickAnimation:Boolean,modelValue:Boolean,persistent:Boolean,scrim:{type:[Boolean,String],default:!0},zIndex:{type:[Number,String],default:2e3},...wh(),...q(),...dt(),..._l(),...dh(),...yh(),...he(),...Pt()},"VOverlay"),It=L()({name:"VOverlay",directives:{ClickOutside:Ns},inheritAttrs:!1,props:{_disableGlobalStack:Boolean,...Kn()},emits:{"click:outside":e=>!0,"update:modelValue":e=>!0,afterLeave:()=>!0},setup(e,t){let{slots:n,attrs:l,emit:a}=t;const o=ue(e,"modelValue"),i=h({get:()=>o.value,set:G=>{G&&e.disabled||(o.value=G)}}),{teleportTarget:s}=_h(h(()=>e.attach||e.contained)),{themeClasses:u}=ye(e),{rtlClasses:c,isRtl:d}=De(),{hasContent:f,onAfterLeave:v}=no(e,i),m=Be(h(()=>typeof e.scrim=="string"?e.scrim:null)),{globalTop:g,localTop:y,stackStyles:b}=Vh(i,O(e,"zIndex"),e._disableGlobalStack),{activatorEl:p,activatorRef:S,activatorEvents:C,contentEvents:_,scrimEvents:V}=Ch(e,{isActive:i,isTop:y}),{dimensionStyles:x}=vt(e),T=Fs(),{scopeId:w}=In();Z(()=>e.disabled,G=>{G&&(i.value=!1)});const k=W(),I=W(),{contentStyles:A,updateLocation:B}=vh(e,{isRtl:d,contentEl:I,activatorEl:p,isActive:i});bh(e,{root:k,contentEl:I,activatorEl:p,isActive:i,updateLocation:B});function E(G){a("click:outside",G),e.persistent?M():i.value=!1}function F(){return i.value&&g.value}Ce&&Z(i,G=>{G?window.addEventListener("keydown",X):window.removeEventListener("keydown",X)},{immediate:!0});function X(G){var U,z;G.key==="Escape"&&g.value&&(e.persistent?M():(i.value=!1,(U=I.value)!=null&&U.contains(document.activeElement)&&((z=p.value)==null||z.focus())))}const $=es();Lt(()=>e.closeOnBack,()=>{hg($,G=>{g.value&&i.value?(G(!1),e.persistent?M():i.value=!1):G()})});const N=W();Z(()=>i.value&&(e.absolute||e.contained)&&s.value==null,G=>{if(G){const U=Ma(k.value);U&&U!==document.scrollingElement&&(N.value=U.scrollTop)}});function M(){e.noClickAnimation||I.value&&Gt(I.value,[{transformOrigin:"center"},{transform:"scale(1.03)"},{transformOrigin:"center"}],{duration:150,easing:Mn})}return j(()=>{var G;return r(oe,null,[(G=n.activator)==null?void 0:G.call(n,{isActive:i.value,props:Y({ref:S},C.value,e.activatorProps)}),T.value&&f.value&&r(Nr,{disabled:!s.value,to:s.value},{default:()=>[r("div",Y({class:["v-overlay",{"v-overlay--absolute":e.absolute||e.contained,"v-overlay--active":i.value,"v-overlay--contained":e.contained},u.value,c.value,e.class],style:[b.value,{top:J(N.value)},e.style],ref:k},w,l),[r(Ph,Y({color:m,modelValue:i.value&&!!e.scrim},V.value),null),r(ht,{appear:!0,persisted:!0,transition:e.transition,target:p.value,onAfterLeave:()=>{v(),a("afterLeave")}},{default:()=>{var U;return[ne(r("div",Y({ref:I,class:["v-overlay__content",e.contentClass],style:[x.value,A.value]},_.value,e.contentProps),[(U=n.default)==null?void 0:U.call(n,{isActive:i})]),[[Pe,i.value],[Ze("click-outside"),{handler:E,closeConditional:F,include:()=>[p.value]}]])]}})])]})])}),{activatorEl:p,animateClick:M,contentEl:I,globalTop:g,localTop:y,updateLocation:B}}}),Nl=Symbol("Forwarded refs");function zl(e,t){let n=e;for(;n;){const l=Reflect.getOwnPropertyDescriptor(n,t);if(l)return l;n=Object.getPrototypeOf(n)}}function pt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),l=1;l<t;l++)n[l-1]=arguments[l];return e[Nl]=n,new Proxy(e,{get(a,o){if(Reflect.has(a,o))return Reflect.get(a,o);if(!(typeof o=="symbol"||o.startsWith("__"))){for(const i of n)if(i.value&&Reflect.has(i.value,o)){const s=Reflect.get(i.value,o);return typeof s=="function"?s.bind(i.value):s}}},has(a,o){if(Reflect.has(a,o))return!0;if(typeof o=="symbol"||o.startsWith("__"))return!1;for(const i of n)if(i.value&&Reflect.has(i.value,o))return!0;return!1},set(a,o,i){if(Reflect.has(a,o))return Reflect.set(a,o,i);if(typeof o=="symbol"||o.startsWith("__"))return!1;for(const s of n)if(s.value&&Reflect.has(s.value,o))return Reflect.set(s.value,o,i);return!1},getOwnPropertyDescriptor(a,o){var s;const i=Reflect.getOwnPropertyDescriptor(a,o);if(i)return i;if(!(typeof o=="symbol"||o.startsWith("__"))){for(const u of n){if(!u.value)continue;const c=zl(u.value,o)??("_"in u.value?zl((s=u.value._)==null?void 0:s.setupState,o):void 0);if(c)return c}for(const u of n){const c=u.value&&u.value[Nl];if(!c)continue;const d=c.slice();for(;d.length;){const f=d.shift(),v=zl(f.value,o);if(v)return v;const m=f.value&&f.value[Nl];m&&d.push(...m)}}}}})}const Ah=R({id:String,...rt(Kn({closeDelay:250,closeOnContentClick:!0,locationStrategy:"connected",openDelay:300,scrim:!1,scrollStrategy:"reposition",transition:{component:pl}}),["absolute"])},"VMenu"),Il=L()({name:"VMenu",props:Ah(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{scopeId:a}=In(),o=We(),i=h(()=>e.id||`v-menu-${o}`),s=W(),u=Ve(ua,null),c=K(0);$e(ua,{register(){++c.value},unregister(){--c.value},closeParents(){setTimeout(()=>{c.value||(l.value=!1,u==null||u.closeParents())},40)}});async function d(y){var S,C,_;const b=y.relatedTarget,p=y.target;await xe(),l.value&&b!==p&&((S=s.value)!=null&&S.contentEl)&&((C=s.value)!=null&&C.globalTop)&&![document,s.value.contentEl].includes(p)&&!s.value.contentEl.contains(p)&&((_=$n(s.value.contentEl)[0])==null||_.focus())}Z(l,y=>{y?(u==null||u.register(),document.addEventListener("focusin",d,{once:!0})):(u==null||u.unregister(),document.removeEventListener("focusin",d))});function f(){u==null||u.closeParents()}function v(y){var b,p,S;e.disabled||y.key==="Tab"&&(ki($n((b=s.value)==null?void 0:b.contentEl,!1),y.shiftKey?"prev":"next",_=>_.tabIndex>=0)||(l.value=!1,(S=(p=s.value)==null?void 0:p.activatorEl)==null||S.focus()))}function m(y){var p;if(e.disabled)return;const b=(p=s.value)==null?void 0:p.contentEl;b&&l.value?y.key==="ArrowDown"?(y.preventDefault(),cl(b,"next")):y.key==="ArrowUp"&&(y.preventDefault(),cl(b,"prev")):["ArrowDown","ArrowUp"].includes(y.key)&&(l.value=!0,y.preventDefault(),setTimeout(()=>setTimeout(()=>m(y))))}const g=h(()=>Y({"aria-haspopup":"menu","aria-expanded":String(l.value),"aria-owns":i.value,onKeydown:m},e.activatorProps));return j(()=>{const[y]=It.filterProps(e);return r(It,Y({ref:s,class:["v-menu",e.class],style:e.style},y,{modelValue:l.value,"onUpdate:modelValue":b=>l.value=b,absolute:!0,activatorProps:g.value,"onClick:outside":f,onKeydown:v},a),{activator:n.activator,default:function(){for(var b=arguments.length,p=new Array(b),S=0;S<b;S++)p[S]=arguments[S];return r(pe,{root:"VMenu"},{default:()=>{var C;return[(C=n.default)==null?void 0:C.call(n,...p)]}})}})}),pt({id:i,ΨopenChildren:c},s)}});const Bh=R({active:Boolean,max:[Number,String],value:{type:[Number,String],default:0},...q(),...Pt({transition:{component:ja}})},"VCounter"),Tl=L()({name:"VCounter",functional:!0,props:Bh(),setup(e,t){let{slots:n}=t;const l=h(()=>e.max?`${e.value} / ${e.max}`:String(e.value));return j(()=>r(ht,{transition:e.transition},{default:()=>[ne(r("div",{class:["v-counter",e.class],style:e.style},[n.default?n.default({counter:l.value,max:e.max,value:e.value}):l.value]),[[Pe,e.active]])]})),{}}});const Rh=R({floating:Boolean,...q()},"VFieldLabel"),Bn=L()({name:"VFieldLabel",props:Rh(),setup(e,t){let{slots:n}=t;return j(()=>r(_n,{class:["v-field-label",{"v-field-label--floating":e.floating},e.class],style:e.style,"aria-hidden":e.floating||void 0},n)),{}}}),Eh=["underlined","outlined","filled","solo","solo-inverted","solo-filled","plain"],Pl=R({appendInnerIcon:se,bgColor:String,clearable:Boolean,clearIcon:{type:se,default:"$clear"},active:Boolean,centerAffix:{type:Boolean,default:void 0},color:String,baseColor:String,dirty:Boolean,disabled:{type:Boolean,default:null},error:Boolean,flat:Boolean,label:String,persistentClear:Boolean,prependInnerIcon:se,reverse:Boolean,singleLine:Boolean,variant:{type:String,default:"filled",validator:e=>Eh.includes(e)},"onClick:clear":St(),"onClick:appendInner":St(),"onClick:prependInner":St(),...q(),...Xa(),...Ie(),...he()},"VField"),qn=L()({name:"VField",inheritAttrs:!1,props:{id:String,...Cl(),...Pl()},emits:{"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{themeClasses:o}=ye(e),{loaderClasses:i}=Sl(e),{focusClasses:s,isFocused:u,focus:c,blur:d}=Nt(e),{InputIcon:f}=fs(e),{roundedClasses:v}=Ae(e),{rtlClasses:m}=De(),g=h(()=>e.dirty||e.active),y=h(()=>!e.singleLine&&!!(e.label||a.label)),b=We(),p=h(()=>e.id||`input-${b}`),S=h(()=>`${p.value}-messages`),C=W(),_=W(),V=W(),x=h(()=>["plain","underlined"].includes(e.variant)),{backgroundColorClasses:T,backgroundColorStyles:w}=Be(O(e,"bgColor")),{textColorClasses:k,textColorStyles:I}=Ge(h(()=>e.error||e.disabled?void 0:g.value&&u.value?e.color:e.baseColor));Z(g,E=>{if(y.value){const F=C.value.$el,X=_.value.$el;requestAnimationFrame(()=>{const $=Ea(F),N=X.getBoundingClientRect(),M=N.x-$.x,G=N.y-$.y-($.height/2-N.height/2),U=N.width/.75,z=Math.abs(U-$.width)>1?{maxWidth:J(U)}:void 0,ae=getComputedStyle(F),re=getComputedStyle(X),ve=parseFloat(ae.transitionDuration)*1e3||150,ge=parseFloat(re.getPropertyValue("--v-field-label-scale")),D=re.getPropertyValue("color");F.style.visibility="visible",X.style.visibility="hidden",Gt(F,{transform:`translate(${M}px, ${G}px) scale(${ge})`,color:D,...z},{duration:ve,easing:Mn,direction:E?"normal":"reverse"}).finished.then(()=>{F.style.removeProperty("visibility"),X.style.removeProperty("visibility")})})}},{flush:"post"});const A=h(()=>({isActive:g,isFocused:u,controlRef:V,blur:d,focus:c}));function B(E){E.target!==document.activeElement&&E.preventDefault()}return j(()=>{var M,G,U;const E=e.variant==="outlined",F=a["prepend-inner"]||e.prependInnerIcon,X=!!(e.clearable||a.clear),$=!!(a["append-inner"]||e.appendInnerIcon||X),N=a.label?a.label({...A.value,label:e.label,props:{for:p.value}}):e.label;return r("div",Y({class:["v-field",{"v-field--active":g.value,"v-field--appended":$,"v-field--center-affix":e.centerAffix??!x.value,"v-field--disabled":e.disabled,"v-field--dirty":e.dirty,"v-field--error":e.error,"v-field--flat":e.flat,"v-field--has-background":!!e.bgColor,"v-field--persistent-clear":e.persistentClear,"v-field--prepended":F,"v-field--reverse":e.reverse,"v-field--single-line":e.singleLine,"v-field--no-label":!N,[`v-field--variant-${e.variant}`]:!0},o.value,T.value,s.value,i.value,v.value,m.value,e.class],style:[w.value,e.style],onClick:B},n),[r("div",{class:"v-field__overlay"},null),r(Za,{name:"v-field",active:!!e.loading,color:e.error?"error":typeof e.loading=="string"?e.loading:e.color},{default:a.loader}),F&&r("div",{key:"prepend",class:"v-field__prepend-inner"},[e.prependInnerIcon&&r(f,{key:"prepend-icon",name:"prependInner"},null),(M=a["prepend-inner"])==null?void 0:M.call(a,A.value)]),r("div",{class:"v-field__field","data-no-activator":""},[["filled","solo","solo-inverted","solo-filled"].includes(e.variant)&&y.value&&r(Bn,{key:"floating-label",ref:_,class:[k.value],floating:!0,for:p.value,style:I.value},{default:()=>[N]}),r(Bn,{ref:C,for:p.value},{default:()=>[N]}),(G=a.default)==null?void 0:G.call(a,{...A.value,props:{id:p.value,class:"v-field__input","aria-describedby":S.value},focus:c,blur:d})]),X&&r(Ua,{key:"clear"},{default:()=>[ne(r("div",{class:"v-field__clearable",onMousedown:z=>{z.preventDefault(),z.stopPropagation()}},[a.clear?a.clear():r(f,{name:"clear"},null)]),[[Pe,e.dirty]])]}),$&&r("div",{key:"append",class:"v-field__append-inner"},[(U=a["append-inner"])==null?void 0:U.call(a,A.value),e.appendInnerIcon&&r(f,{key:"append-icon",name:"appendInner"},null)]),r("div",{class:["v-field__outline",k.value],style:I.value},[E&&r(oe,null,[r("div",{class:"v-field__outline__start"},null),y.value&&r("div",{class:"v-field__outline__notch"},[r(Bn,{ref:_,floating:!0,for:p.value},{default:()=>[N]})]),r("div",{class:"v-field__outline__end"},null)]),x.value&&y.value&&r(Bn,{ref:_,floating:!0,for:p.value},{default:()=>[N]})])])}),{controlRef:V}}});function lo(e){const t=Object.keys(qn.props).filter(n=>!Aa(n)&&n!=="class"&&n!=="style");return qt(e,t)}const Lh=["color","file","time","date","datetime-local","week","month"],Al=R({autofocus:Boolean,counter:[Boolean,Number,String],counterValue:[Number,Function],prefix:String,placeholder:String,persistentPlaceholder:Boolean,persistentCounter:Boolean,suffix:String,role:String,type:{type:String,default:"text"},modelModifiers:Object,...Bt(),...Pl()},"VTextField"),Jt=L()({name:"VTextField",directives:{Intersect:Un},inheritAttrs:!1,props:Al(),emits:{"click:control":e=>!0,"mousedown:control":e=>!0,"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const o=ue(e,"modelValue"),{isFocused:i,focus:s,blur:u}=Nt(e),c=h(()=>typeof e.counterValue=="function"?e.counterValue(o.value):typeof e.counterValue=="number"?e.counterValue:(o.value??"").toString().length),d=h(()=>{if(n.maxlength)return n.maxlength;if(!(!e.counter||typeof e.counter!="number"&&typeof e.counter!="string"))return e.counter}),f=h(()=>["plain","underlined"].includes(e.variant));function v(x,T){var w,k;!e.autofocus||!x||(k=(w=T[0].target)==null?void 0:w.focus)==null||k.call(w)}const m=W(),g=W(),y=W(),b=h(()=>Lh.includes(e.type)||e.persistentPlaceholder||i.value||e.active);function p(){var x;y.value!==document.activeElement&&((x=y.value)==null||x.focus()),i.value||s()}function S(x){l("mousedown:control",x),x.target!==y.value&&(p(),x.preventDefault())}function C(x){p(),l("click:control",x)}function _(x){x.stopPropagation(),p(),xe(()=>{o.value=null,Ra(e["onClick:clear"],x)})}function V(x){var w;const T=x.target;if(o.value=T.value,(w=e.modelModifiers)!=null&&w.trim&&["text","search","password","tel","url"].includes(e.type)){const k=[T.selectionStart,T.selectionEnd];xe(()=>{T.selectionStart=k[0],T.selectionEnd=k[1]})}}return j(()=>{const x=!!(a.counter||e.counter||e.counterValue),T=!!(x||a.details),[w,k]=en(n),[{modelValue:I,...A}]=Ne.filterProps(e),[B]=lo(e);return r(Ne,Y({ref:m,modelValue:o.value,"onUpdate:modelValue":E=>o.value=E,class:["v-text-field",{"v-text-field--prefixed":e.prefix,"v-text-field--suffixed":e.suffix,"v-text-field--plain-underlined":["plain","underlined"].includes(e.variant)},e.class],style:e.style},w,A,{centerAffix:!f.value,focused:i.value}),{...a,default:E=>{let{id:F,isDisabled:X,isDirty:$,isReadonly:N,isValid:M}=E;return r(qn,Y({ref:g,onMousedown:S,onClick:C,"onClick:clear":_,"onClick:prependInner":e["onClick:prependInner"],"onClick:appendInner":e["onClick:appendInner"],role:e.role},B,{id:F.value,active:b.value||$.value,dirty:$.value||e.dirty,disabled:X.value,focused:i.value,error:M.value===!1}),{...a,default:G=>{let{props:{class:U,...z}}=G;const ae=ne(r("input",Y({ref:y,value:o.value,onInput:V,autofocus:e.autofocus,readonly:N.value,disabled:X.value,name:e.name,placeholder:e.placeholder,size:1,type:e.type,onFocus:p,onBlur:u},z,k),null),[[Ze("intersect"),{handler:v},null,{once:!0}]]);return r(oe,null,[e.prefix&&r("span",{class:"v-text-field__prefix"},[r("span",{class:"v-text-field__prefix__text"},[e.prefix])]),a.default?r("div",{class:U,"data-no-activator":""},[a.default(),ae]):zr(ae,{class:U}),e.suffix&&r("span",{class:"v-text-field__suffix"},[r("span",{class:"v-text-field__suffix__text"},[e.suffix])])])}})},details:T?E=>{var F;return r(oe,null,[(F=a.details)==null?void 0:F.call(a,E),x&&r(oe,null,[r("span",null,null),r(Tl,{active:e.persistentCounter||i.value,value:c.value,max:d.value},a.counter)])])}:void 0})}),pt({},m,g,y)}});const $h=R({renderless:Boolean,...q()},"VVirtualScrollItem"),Mh=L()({name:"VVirtualScrollItem",inheritAttrs:!1,props:$h(),emits:{"update:height":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{resizeRef:o,contentRect:i}=wt(void 0,"border");Z(()=>{var s;return(s=i.value)==null?void 0:s.height},s=>{s!=null&&l("update:height",s)}),j(()=>{var s,u;return e.renderless?r(oe,null,[(s=a.default)==null?void 0:s.call(a,{itemRef:o})]):r("div",Y({ref:o,class:["v-virtual-scroll__item",e.class],style:e.style},n),[(u=a.default)==null?void 0:u.call(a)])})}}),ei=-1,ti=1,Fh=R({itemHeight:{type:[Number,String],default:48}},"virtual");function Oh(e,t,n){const l=K(0),a=K(e.itemHeight),o=h({get:()=>parseInt(a.value??0,10),set(T){a.value=T}}),i=W(),{resizeRef:s,contentRect:u}=wt();tt(()=>{s.value=i.value});const c=tn(),d=new Map;let f=Array.from({length:t.value.length});const v=h(()=>{const T=(!u.value||i.value===document.documentElement?c.height.value:u.value.height)-((n==null?void 0:n.value)??0);return Math.ceil(T/o.value*1.7+1)});function m(T,w){o.value=Math.max(o.value,w),f[T]=w,d.set(t.value[T],w)}function g(T){return f.slice(0,T).reduce((w,k)=>w+(k||o.value),0)}function y(T){const w=t.value.length;let k=0,I=0;for(;I<T&&k<w;)I+=f[k++]||o.value;return k-1}let b=0;function p(){if(!i.value||!u.value)return;const T=u.value.height-56,w=i.value.scrollTop,k=w<b?ei:ti,I=y(w+T/2),A=Math.round(v.value/3),B=I-A,E=l.value+A*2-1;k===ei&&I<=E?l.value=Ue(B,0,t.value.length):k===ti&&I>=E&&(l.value=Ue(B,0,t.value.length-v.value)),b=w}function S(T){if(!i.value)return;const w=g(T);i.value.scrollTop=w}const C=h(()=>Math.min(t.value.length,l.value+v.value)),_=h(()=>t.value.slice(l.value,C.value).map((T,w)=>({raw:T,index:w+l.value}))),V=h(()=>g(l.value)),x=h(()=>g(t.value.length)-g(C.value));return Z(()=>t.value.length,()=>{f=xt(t.value.length).map(()=>o.value),d.forEach((T,w)=>{const k=t.value.indexOf(w);k===-1?d.delete(w):f[k]=T})}),{containerRef:i,computedItems:_,itemHeight:o,paddingTop:V,paddingBottom:x,scrollToIndex:S,handleScroll:p,handleItemResize:m}}const Dh=R({items:{type:Array,default:()=>[]},renderless:Boolean,...Fh(),...q(),...dt()},"VVirtualScroll"),Bl=L()({name:"VVirtualScroll",props:Dh(),setup(e,t){let{slots:n}=t;const l=Oe("VVirtualScroll"),{dimensionStyles:a}=vt(e),{containerRef:o,handleScroll:i,handleItemResize:s,scrollToIndex:u,paddingTop:c,paddingBottom:d,computedItems:f}=Oh(e,O(e,"items"));return Lt(()=>e.renderless,()=>{Je(()=>{var v;o.value=Ma(l.vnode.el,!0),(v=o.value)==null||v.addEventListener("scroll",i)}),Xe(()=>{var v;(v=o.value)==null||v.removeEventListener("scroll",i)})}),j(()=>{const v=f.value.map(m=>r(Mh,{key:m.index,renderless:e.renderless,"onUpdate:height":g=>s(m.index,g)},{default:g=>{var y;return(y=n.default)==null?void 0:y.call(n,{item:m.raw,index:m.index,...g})}}));return e.renderless?r(oe,null,[r("div",{class:"v-virtual-scroll__spacer",style:{paddingTop:J(c.value)}},null),v,r("div",{class:"v-virtual-scroll__spacer",style:{paddingBottom:J(d.value)}},null)]):r("div",{ref:o,class:["v-virtual-scroll",e.class],onScroll:i,style:[a.value,e.style]},[r("div",{class:"v-virtual-scroll__container",style:{paddingTop:J(c.value),paddingBottom:J(d.value)}},[v])])}),{scrollToIndex:u}}});function ao(e,t){const n=K(!1);let l;function a(s){cancelAnimationFrame(l),n.value=!0,l=requestAnimationFrame(()=>{l=requestAnimationFrame(()=>{n.value=!1})})}async function o(){await new Promise(s=>requestAnimationFrame(s)),await new Promise(s=>requestAnimationFrame(s)),await new Promise(s=>requestAnimationFrame(s)),await new Promise(s=>{if(n.value){const u=Z(n,()=>{u(),s()})}else s()})}async function i(s){var d,f;if(s.key==="Tab"&&((d=t.value)==null||d.focus()),!["PageDown","PageUp","Home","End"].includes(s.key))return;const u=(f=e.value)==null?void 0:f.$el;if(!u)return;(s.key==="Home"||s.key==="End")&&u.scrollTo({top:s.key==="Home"?0:u.scrollHeight,behavior:"smooth"}),await o();const c=u.querySelectorAll(":scope > :not(.v-virtual-scroll__spacer)");if(s.key==="PageDown"||s.key==="Home"){const v=u.getBoundingClientRect().top;for(const m of c)if(m.getBoundingClientRect().top>=v){m.focus();break}}else{const v=u.getBoundingClientRect().bottom;for(const m of[...c].reverse())if(m.getBoundingClientRect().bottom<=v){m.focus();break}}}return{onListScroll:a,onListKeydown:i}}const oo=R({chips:Boolean,closableChips:Boolean,closeText:{type:String,default:"$vuetify.close"},openText:{type:String,default:"$vuetify.open"},eager:Boolean,hideNoData:Boolean,hideSelected:Boolean,menu:Boolean,menuIcon:{type:se,default:"$dropdown"},menuProps:{type:Object},multiple:Boolean,noDataText:{type:String,default:"$vuetify.noDataText"},openOnClear:Boolean,itemColor:String,...As({itemChildren:!1})},"Select"),Nh=R({...oo(),...rt(Al({modelValue:null,role:"button"}),["validationValue","dirty","appendInnerIcon"]),...Pt({transition:{component:pl}})},"VSelect"),zh=L()({name:"VSelect",props:Nh(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,"update:menu":e=>!0},setup(e,t){let{slots:n}=t;const{t:l}=ct(),a=W(),o=W(),i=W(),s=ue(e,"menu"),u=h({get:()=>s.value,set:$=>{var N;s.value&&!$&&((N=o.value)!=null&&N.ΨopenChildren)||(s.value=$)}}),{items:c,transformIn:d,transformOut:f}=to(e),v=ue(e,"modelValue",[],$=>d($===null?[null]:et($)),$=>{const N=f($);return e.multiple?N:N[0]??null}),m=xl(),g=h(()=>v.value.map($=>$.value)),y=K(!1),b=h(()=>u.value?e.closeText:e.openText);let p="",S;const C=h(()=>e.hideSelected?c.value.filter($=>!v.value.some(N=>N===$)):c.value),_=h(()=>e.hideNoData&&!c.value.length||e.readonly||(m==null?void 0:m.isReadonly.value)),V=W(),{onListScroll:x,onListKeydown:T}=ao(V,a);function w($){e.openOnClear&&(u.value=!0)}function k(){_.value||(u.value=!u.value)}function I($){var z,ae;if(!$.key||e.readonly||m!=null&&m.isReadonly.value)return;["Enter"," ","ArrowDown","ArrowUp","Home","End"].includes($.key)&&$.preventDefault(),["Enter","ArrowDown"," "].includes($.key)&&(u.value=!0),["Escape","Tab"].includes($.key)&&(u.value=!1),$.key==="Home"?(z=V.value)==null||z.focus("first"):$.key==="End"&&((ae=V.value)==null||ae.focus("last"));const N=1e3;function M(re){const ve=re.key.length===1,ge=!re.ctrlKey&&!re.metaKey&&!re.altKey;return ve&&ge}if(e.multiple||!M($))return;const G=performance.now();G-S>N&&(p=""),p+=$.key.toLowerCase(),S=G;const U=c.value.find(re=>re.title.toLowerCase().startsWith(p));U!==void 0&&(v.value=[U])}function A($){if(e.multiple){const N=v.value.findIndex(M=>e.valueComparator(M.value,$.value));if(N===-1)v.value=[...v.value,$];else{const M=[...v.value];M.splice(N,1),v.value=M}}else v.value=[$],u.value=!1}function B($){var N;(N=V.value)!=null&&N.$el.contains($.relatedTarget)||(u.value=!1)}function E(){var $;y.value&&(($=a.value)==null||$.focus())}function F($){y.value=!0}function X($){if($==null)v.value=[];else if(vn(a.value,":autofill")||vn(a.value,":-webkit-autofill")){const N=c.value.find(M=>M.title===$);N&&A(N)}else a.value&&(a.value.value="")}return Z(u,()=>{if(!e.hideSelected&&u.value&&v.value.length){const $=C.value.findIndex(N=>v.value.some(M=>e.valueComparator(M.value,N.value)));Ce&&window.requestAnimationFrame(()=>{var N;$>=0&&((N=i.value)==null||N.scrollToIndex($))})}}),j(()=>{const $=!!(e.chips||n.chip),N=!!(!e.hideNoData||C.value.length||n["prepend-item"]||n["append-item"]||n["no-data"]),M=v.value.length>0,[G]=Jt.filterProps(e),U=M||!y.value&&e.label&&!e.persistentPlaceholder?void 0:e.placeholder;return r(Jt,Y({ref:a},G,{modelValue:v.value.map(z=>z.props.value).join(", "),"onUpdate:modelValue":X,focused:y.value,"onUpdate:focused":z=>y.value=z,validationValue:v.externalValue,counterValue:v.value.length,dirty:M,class:["v-select",{"v-select--active-menu":u.value,"v-select--chips":!!e.chips,[`v-select--${e.multiple?"multiple":"single"}`]:!0,"v-select--selected":v.value.length,"v-select--selection-slot":!!n.selection},e.class],style:e.style,inputmode:"none",placeholder:U,"onClick:clear":w,"onMousedown:control":k,onBlur:B,onKeydown:I,"aria-label":l(b.value),title:l(b.value)}),{...n,default:()=>r(oe,null,[r(Il,Y({ref:o,modelValue:u.value,"onUpdate:modelValue":z=>u.value=z,activator:"parent",contentClass:"v-select__content",disabled:_.value,eager:e.eager,maxHeight:310,openOnClick:!1,closeOnContentClick:!1,transition:e.transition,onAfterLeave:E},e.menuProps),{default:()=>[N&&r(Vl,{ref:V,selected:g.value,selectStrategy:e.multiple?"independent":"single-independent",onMousedown:z=>z.preventDefault(),onKeydown:T,onFocusin:F,onScrollPassive:x,tabindex:"-1",color:e.itemColor??e.color},{default:()=>{var z,ae,re;return[(z=n["prepend-item"])==null?void 0:z.call(n),!C.value.length&&!e.hideNoData&&(((ae=n["no-data"])==null?void 0:ae.call(n))??r(_t,{title:l(e.noDataText)},null)),r(Bl,{ref:i,renderless:!0,items:C.value},{default:ve=>{var H;let{item:ge,index:D,itemRef:me}=ve;const Q=Y(ge.props,{ref:me,key:D,onClick:()=>A(ge)});return((H=n.item)==null?void 0:H.call(n,{item:ge,index:D,props:Q}))??r(_t,Q,{prepend:le=>{let{isSelected:be}=le;return r(oe,null,[e.multiple&&!e.hideSelected?r(gn,{key:ge.value,modelValue:be,ripple:!1,tabindex:"-1"},null):void 0,ge.props.prependIcon&&r(Se,{icon:ge.props.prependIcon},null)])}})}}),(re=n["append-item"])==null?void 0:re.call(n)]}})]}),v.value.map((z,ae)=>{var ge;function re(D){D.stopPropagation(),D.preventDefault(),A(z)}const ve={"onClick:close":re,onMousedown(D){D.preventDefault(),D.stopPropagation()},modelValue:!0,"onUpdate:modelValue":void 0};return r("div",{key:z.value,class:"v-select__selection"},[$?n.chip?r(pe,{key:"chip-defaults",defaults:{VChip:{closable:e.closableChips,size:"small",text:z.title}}},{default:()=>{var D;return[(D=n.chip)==null?void 0:D.call(n,{item:z,index:ae,props:ve})]}}):r(Yn,Y({key:"chip",closable:e.closableChips,size:"small",text:z.title,disabled:z.props.disabled},ve),null):((ge=n.selection)==null?void 0:ge.call(n,{item:z,index:ae}))??r("span",{class:"v-select__selection-text"},[z.title,e.multiple&&ae<v.value.length-1&&r("span",{class:"v-select__selection-comma"},[Rt(",")])])])})]),"append-inner":function(){var ve;for(var z=arguments.length,ae=new Array(z),re=0;re<z;re++)ae[re]=arguments[re];return r(oe,null,[(ve=n["append-inner"])==null?void 0:ve.call(n,...ae),e.menuIcon?r(Se,{class:"v-select__menu-icon",icon:e.menuIcon},null):void 0])}})}),pt({isFocused:y,menu:u,select:A},a)}}),Hh=(e,t,n)=>e==null||t==null?-1:e.toString().toLocaleLowerCase().indexOf(t.toString().toLocaleLowerCase()),zs=R({customFilter:Function,customKeyFilter:Object,filterKeys:[Array,String],filterMode:{type:String,default:"intersection"},noFilter:Boolean},"filter");function jh(e,t,n){var s;const l=[],a=(n==null?void 0:n.default)??Hh,o=n!=null&&n.filterKeys?et(n.filterKeys):!1,i=Object.keys((n==null?void 0:n.customKeyFilter)??{}).length;if(!(e!=null&&e.length))return l;e:for(let u=0;u<e.length;u++){const[c,d=c]=et(e[u]),f={},v={};let m=-1;if(t&&!(n!=null&&n.noFilter)){if(typeof c=="object"){const b=o||Object.keys(d);for(const p of b){const S=kt(d,p,d),C=(s=n==null?void 0:n.customKeyFilter)==null?void 0:s[p];if(m=C?C(S,t,c):a(S,t,c),m!==-1&&m!==!1)C?f[p]=m:v[p]=m;else if((n==null?void 0:n.filterMode)==="every")continue e}}else m=a(c,t,c),m!==-1&&m!==!1&&(v.title=m);const g=Object.keys(v).length,y=Object.keys(f).length;if(!g&&!y||(n==null?void 0:n.filterMode)==="union"&&y!==i&&!g||(n==null?void 0:n.filterMode)==="intersection"&&(y!==i||!g))continue}l.push({index:u,matches:{...v,...f}})}return l}function Hs(e,t,n,l){const a=W([]),o=W(new Map),i=h(()=>l!=null&&l.transform?ot(t).map(u=>[u,l.transform(u)]):ot(t));tt(()=>{const u=typeof n=="function"?n():ot(n),c=typeof u!="string"&&typeof u!="number"?"":String(u),d=jh(i.value,c,{customKeyFilter:e.customKeyFilter,default:e.customFilter,filterKeys:e.filterKeys,filterMode:e.filterMode,noFilter:e.noFilter}),f=ot(t),v=[],m=new Map;d.forEach(g=>{let{index:y,matches:b}=g;const p=f[y];v.push(p),m.set(p.value,b)}),a.value=v,o.value=m});function s(u){return o.value.get(u.value)}return{filteredItems:a,filteredMatches:o,getMatches:s}}function Uh(e,t,n){if(t==null)return e;if(Array.isArray(t))throw new Error("Multiple matches is not implemented");return typeof t=="number"&&~t?r(oe,null,[r("span",{class:"v-autocomplete__unmask"},[e.substr(0,t)]),r("span",{class:"v-autocomplete__mask"},[e.substr(t,n)]),r("span",{class:"v-autocomplete__unmask"},[e.substr(t+n)])]):e}const Gh=R({autoSelectFirst:{type:[Boolean,String]},search:String,...zs({filterKeys:["title"]}),...oo(),...rt(Al({modelValue:null,role:"combobox"}),["validationValue","dirty","appendInnerIcon"]),...Pt({transition:!1})},"VAutocomplete"),Wh=L()({name:"VAutocomplete",props:Gh(),emits:{"update:focused":e=>!0,"update:search":e=>!0,"update:modelValue":e=>!0,"update:menu":e=>!0},setup(e,t){let{slots:n}=t;const{t:l}=ct(),a=W(),o=K(!1),i=K(!0),s=K(!1),u=W(),c=W(),d=ue(e,"menu"),f=h({get:()=>d.value,set:Q=>{var H;d.value&&!Q&&((H=u.value)!=null&&H.ΨopenChildren)||(d.value=Q)}}),v=K(-1),m=h(()=>{var Q;return(Q=a.value)==null?void 0:Q.color}),g=h(()=>f.value?e.closeText:e.openText),{items:y,transformIn:b,transformOut:p}=to(e),{textColorClasses:S,textColorStyles:C}=Ge(m),_=ue(e,"search",""),V=ue(e,"modelValue",[],Q=>b(Q===null?[null]:et(Q)),Q=>{const H=p(Q);return e.multiple?H:H[0]??null}),x=xl(),{filteredItems:T,getMatches:w}=Hs(e,y,()=>i.value?"":_.value),k=h(()=>e.hideSelected?T.value.filter(Q=>!V.value.some(H=>H.value===Q.value)):T.value),I=h(()=>V.value.map(Q=>Q.props.value)),A=h(()=>{var H;return(e.autoSelectFirst===!0||e.autoSelectFirst==="exact"&&_.value===((H=k.value[0])==null?void 0:H.title))&&k.value.length>0&&!i.value&&!s.value}),B=h(()=>e.hideNoData&&!y.value.length||e.readonly||(x==null?void 0:x.isReadonly.value)),E=W(),{onListScroll:F,onListKeydown:X}=ao(E,a);function $(Q){e.openOnClear&&(f.value=!0),_.value=""}function N(){B.value||(f.value=!0)}function M(Q){B.value||(o.value&&(Q.preventDefault(),Q.stopPropagation()),f.value=!f.value)}function G(Q){var be,de,ie;if(e.readonly||x!=null&&x.isReadonly.value)return;const H=a.value.selectionStart,le=V.value.length;if((v.value>-1||["Enter","ArrowDown","ArrowUp"].includes(Q.key))&&Q.preventDefault(),["Enter","ArrowDown"].includes(Q.key)&&(f.value=!0),["Escape"].includes(Q.key)&&(f.value=!1),A.value&&["Enter","Tab"].includes(Q.key)&&me(k.value[0]),Q.key==="ArrowDown"&&A.value&&((be=E.value)==null||be.focus("next")),!!e.multiple){if(["Backspace","Delete"].includes(Q.key)){if(v.value<0){Q.key==="Backspace"&&!_.value&&(v.value=le-1);return}const fe=v.value,Te=V.value[v.value];Te&&!Te.props.disabled&&me(Te),v.value=fe>=le-1?le-2:fe}if(Q.key==="ArrowLeft"){if(v.value<0&&H>0)return;const fe=v.value>-1?v.value-1:le-1;V.value[fe]?v.value=fe:(v.value=-1,a.value.setSelectionRange((de=_.value)==null?void 0:de.length,(ie=_.value)==null?void 0:ie.length))}if(Q.key==="ArrowRight"){if(v.value<0)return;const fe=v.value+1;V.value[fe]?v.value=fe:(v.value=-1,a.value.setSelectionRange(0,0))}}}function U(Q){_.value=Q.target.value}function z(Q){if(vn(a.value,":autofill")||vn(a.value,":-webkit-autofill")){const H=y.value.find(le=>le.title===Q.target.value);H&&me(H)}}function ae(){var Q;o.value&&(i.value=!0,(Q=a.value)==null||Q.focus())}function re(Q){o.value=!0,setTimeout(()=>{s.value=!0})}function ve(Q){s.value=!1}function ge(Q){(Q==null||Q===""&&!e.multiple)&&(V.value=[])}const D=K(!1);function me(Q){if(e.multiple){const H=V.value.findIndex(le=>e.valueComparator(le.value,Q.value));if(H===-1)V.value=[...V.value,Q];else{const le=[...V.value];le.splice(H,1),V.value=le}}else V.value=[Q],D.value=!0,_.value=Q.title,f.value=!1,i.value=!0,xe(()=>D.value=!1)}return Z(o,(Q,H)=>{var le;Q!==H&&(Q?(D.value=!0,_.value=e.multiple?"":String(((le=V.value.at(-1))==null?void 0:le.props.title)??""),i.value=!0,xe(()=>D.value=!1)):(!e.multiple&&!_.value?V.value=[]:A.value&&!s.value&&!V.value.some(be=>{let{value:de}=be;return de===k.value[0].value})&&me(k.value[0]),f.value=!1,_.value="",v.value=-1))}),Z(_,Q=>{!o.value||D.value||(Q&&(f.value=!0),i.value=!Q)}),Z(f,()=>{if(!e.hideSelected&&f.value&&V.value.length){const Q=k.value.findIndex(H=>V.value.some(le=>H.value===le.value));Ce&&window.requestAnimationFrame(()=>{var H;Q>=0&&((H=c.value)==null||H.scrollToIndex(Q))})}}),j(()=>{const Q=!!(e.chips||n.chip),H=!!(!e.hideNoData||k.value.length||n["prepend-item"]||n["append-item"]||n["no-data"]),le=V.value.length>0,[be]=Jt.filterProps(e);return r(Jt,Y({ref:a},be,{modelValue:_.value,"onUpdate:modelValue":ge,focused:o.value,"onUpdate:focused":de=>o.value=de,validationValue:V.externalValue,counterValue:V.value.length,dirty:le,onInput:U,onChange:z,class:["v-autocomplete",`v-autocomplete--${e.multiple?"multiple":"single"}`,{"v-autocomplete--active-menu":f.value,"v-autocomplete--chips":!!e.chips,"v-autocomplete--selection-slot":!!n.selection,"v-autocomplete--selecting-index":v.value>-1},e.class],style:e.style,readonly:e.readonly,placeholder:le?void 0:e.placeholder,"onClick:clear":$,"onMousedown:control":N,onKeydown:G}),{...n,default:()=>r(oe,null,[r(Il,Y({ref:u,modelValue:f.value,"onUpdate:modelValue":de=>f.value=de,activator:"parent",contentClass:"v-autocomplete__content",disabled:B.value,eager:e.eager,maxHeight:310,openOnClick:!1,closeOnContentClick:!1,transition:e.transition,onAfterLeave:ae},e.menuProps),{default:()=>[H&&r(Vl,{ref:E,selected:I.value,selectStrategy:e.multiple?"independent":"single-independent",onMousedown:de=>de.preventDefault(),onKeydown:X,onFocusin:re,onFocusout:ve,onScrollPassive:F,tabindex:"-1",color:e.itemColor??e.color},{default:()=>{var de,ie,fe;return[(de=n["prepend-item"])==null?void 0:de.call(n),!k.value.length&&!e.hideNoData&&(((ie=n["no-data"])==null?void 0:ie.call(n))??r(_t,{title:l(e.noDataText)},null)),r(Bl,{ref:c,renderless:!0,items:k.value},{default:Te=>{var Tn;let{item:Re,index:_e,itemRef:qe}=Te;const Zn=Y(Re.props,{ref:qe,key:_e,active:A.value&&_e===0?!0:void 0,onClick:()=>me(Re)});return((Tn=n.item)==null?void 0:Tn.call(n,{item:Re,index:_e,props:Zn}))??r(_t,Zn,{prepend:zt=>{let{isSelected:Ct}=zt;return r(oe,null,[e.multiple&&!e.hideSelected?r(gn,{key:Re.value,modelValue:Ct,ripple:!1,tabindex:"-1"},null):void 0,Re.props.prependIcon&&r(Se,{icon:Re.props.prependIcon},null)])},title:()=>{var zt,Ct;return i.value?Re.title:Uh(Re.title,(zt=w(Re))==null?void 0:zt.title,((Ct=_.value)==null?void 0:Ct.length)??0)}})}}),(fe=n["append-item"])==null?void 0:fe.call(n)]}})]}),V.value.map((de,ie)=>{var Re;function fe(_e){_e.stopPropagation(),_e.preventDefault(),me(de)}const Te={"onClick:close":fe,onMousedown(_e){_e.preventDefault(),_e.stopPropagation()},modelValue:!0,"onUpdate:modelValue":void 0};return r("div",{key:de.value,class:["v-autocomplete__selection",ie===v.value&&["v-autocomplete__selection--selected",S.value]],style:ie===v.value?C.value:{}},[Q?n.chip?r(pe,{key:"chip-defaults",defaults:{VChip:{closable:e.closableChips,size:"small",text:de.title}}},{default:()=>{var _e;return[(_e=n.chip)==null?void 0:_e.call(n,{item:de,index:ie,props:Te})]}}):r(Yn,Y({key:"chip",closable:e.closableChips,size:"small",text:de.title,disabled:de.props.disabled},Te),null):((Re=n.selection)==null?void 0:Re.call(n,{item:de,index:ie}))??r("span",{class:"v-autocomplete__selection-text"},[de.title,e.multiple&&ie<V.value.length-1&&r("span",{class:"v-autocomplete__selection-comma"},[Rt(",")])])])})]),"append-inner":function(){var Te;for(var de=arguments.length,ie=new Array(de),fe=0;fe<de;fe++)ie[fe]=arguments[fe];return r(oe,null,[(Te=n["append-inner"])==null?void 0:Te.call(n,...ie),e.menuIcon?r(Se,{class:"v-autocomplete__menu-icon",icon:e.menuIcon,onMousedown:M,onClick:Si,"aria-label":l(g.value),title:l(g.value)},null):void 0])}})}),pt({isFocused:o,isPristine:i,menu:f,search:_,filteredItems:T,select:me},a)}});const Yh=R({bordered:Boolean,color:String,content:[Number,String],dot:Boolean,floating:Boolean,icon:se,inline:Boolean,label:{type:String,default:"$vuetify.badge"},max:[Number,String],modelValue:{type:Boolean,default:!0},offsetX:[Number,String],offsetY:[Number,String],textColor:String,...q(),...Ft({location:"top end"}),...Ie(),...ce(),...he(),...Pt({transition:"scale-rotate-transition"})},"VBadge"),Kh=L()({name:"VBadge",inheritAttrs:!1,props:Yh(),setup(e,t){const{backgroundColorClasses:n,backgroundColorStyles:l}=Be(O(e,"color")),{roundedClasses:a}=Ae(e),{t:o}=ct(),{textColorClasses:i,textColorStyles:s}=Ge(O(e,"textColor")),{themeClasses:u}=Oi(),{locationStyles:c}=Ot(e,!0,d=>(e.floating?e.dot?2:4:e.dot?8:12)+(["top","bottom"].includes(d)?+(e.offsetY??0):["left","right"].includes(d)?+(e.offsetX??0):0));return j(()=>{const d=Number(e.content),f=!e.max||isNaN(d)?e.content:d<=+e.max?d:`${e.max}+`,[v,m]=qt(t.attrs,["aria-atomic","aria-label","aria-live","role","title"]);return r(e.tag,Y({class:["v-badge",{"v-badge--bordered":e.bordered,"v-badge--dot":e.dot,"v-badge--floating":e.floating,"v-badge--inline":e.inline},e.class]},m,{style:e.style}),{default:()=>{var g,y;return[r("div",{class:"v-badge__wrapper"},[(y=(g=t.slots).default)==null?void 0:y.call(g),r(ht,{transition:e.transition},{default:()=>{var b,p;return[ne(r("span",Y({class:["v-badge__badge",u.value,n.value,a.value,i.value],style:[l.value,s.value,e.inline?{}:c.value],"aria-atomic":"true","aria-label":o(e.label,d),"aria-live":"polite",role:"status"},v),[e.dot?void 0:t.slots.badge?(p=(b=t.slots).badge)==null?void 0:p.call(b):e.icon?r(Se,{icon:e.icon},null):f]),[[Pe,e.modelValue]])]}})])]}})}),{}}});const qh=R({color:String,density:String,...q()},"VBannerActions"),js=L()({name:"VBannerActions",props:qh(),setup(e,t){let{slots:n}=t;return Ee({VBtn:{color:e.color,density:e.density,variant:"text"}}),j(()=>{var l;return r("div",{class:["v-banner-actions",e.class],style:e.style},[(l=n.default)==null?void 0:l.call(n)])}),{}}}),Us=bt("v-banner-text"),Xh=R({avatar:String,color:String,icon:se,lines:String,stacked:Boolean,sticky:Boolean,text:String,...at(),...q(),...Fe(),...dt(),...Me(),...Ft(),...xn(),...Ie(),...ce(),...he()},"VBanner"),Zh=L()({name:"VBanner",props:Xh(),setup(e,t){let{slots:n}=t;const{borderClasses:l}=ft(e),{densityClasses:a}=Ye(e),{mobile:o}=tn(),{dimensionStyles:i}=vt(e),{elevationClasses:s}=He(e),{locationStyles:u}=Ot(e),{positionClasses:c}=Vn(e),{roundedClasses:d}=Ae(e),{themeClasses:f}=ye(e),v=O(e,"color"),m=O(e,"density");Ee({VBannerActions:{color:v,density:m}}),j(()=>{const g=!!(e.text||n.text),y=!!(e.avatar||e.icon),b=!!(y||n.prepend);return r(e.tag,{class:["v-banner",{"v-banner--stacked":e.stacked||o.value,"v-banner--sticky":e.sticky,[`v-banner--${e.lines}-line`]:!!e.lines},l.value,a.value,s.value,c.value,d.value,f.value,e.class],style:[i.value,u.value,e.style],role:"banner"},{default:()=>{var p;return[b&&r("div",{key:"prepend",class:"v-banner__prepend"},[n.prepend?r(pe,{key:"prepend-defaults",disabled:!y,defaults:{VAvatar:{color:v.value,density:m.value,icon:e.icon,image:e.avatar}}},n.prepend):r($t,{key:"prepend-avatar",color:v.value,density:m.value,icon:e.icon,image:e.avatar},null)]),r("div",{class:"v-banner__content"},[g&&r(Us,{key:"text"},{default:()=>{var S;return[((S=n.text)==null?void 0:S.call(n))??e.text]}}),(p=n.default)==null?void 0:p.call(n)]),n.actions&&r(js,{key:"actions"},n.actions)]}})})}});const Jh=R({bgColor:String,color:String,grow:Boolean,mode:{type:String,validator:e=>!e||["horizontal","shift"].includes(e)},height:{type:[Number,String],default:56},active:{type:Boolean,default:!0},...at(),...q(),...Fe(),...Me(),...Ie(),...bn({name:"bottom-navigation"}),...ce({tag:"header"}),...kn({modelValue:!0,selectedClass:"v-btn--selected"}),...he()},"VBottomNavigation"),Qh=L()({name:"VBottomNavigation",props:Jh(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=Oi(),{borderClasses:a}=ft(e),{backgroundColorClasses:o,backgroundColorStyles:i}=Be(O(e,"bgColor")),{densityClasses:s}=Ye(e),{elevationClasses:u}=He(e),{roundedClasses:c}=Ae(e),{ssrBootStyles:d}=nn(),f=h(()=>Number(e.height)-(e.density==="comfortable"?8:0)-(e.density==="compact"?16:0)),v=O(e,"active"),{layoutItemStyles:m}=pn({id:e.name,order:h(()=>parseInt(e.order,10)),position:h(()=>"bottom"),layoutSize:h(()=>v.value?f.value:0),elementSize:f,active:v,absolute:O(e,"absolute")});return on(e,Wa),Ee({VBtn:{color:O(e,"color"),density:O(e,"density"),stacked:h(()=>e.mode!=="horizontal"),variant:"text"}},{scoped:!0}),j(()=>r(e.tag,{class:["v-bottom-navigation",{"v-bottom-navigation--active":v.value,"v-bottom-navigation--grow":e.grow,"v-bottom-navigation--shift":e.mode==="shift"},l.value,o.value,a.value,s.value,u.value,c.value,e.class],style:[i.value,m.value,{height:J(f.value),transform:`translateY(${J(v.value?0:100,"%")})`},d.value,e.style]},{default:()=>[n.default&&r("div",{class:"v-bottom-navigation__content"},[n.default()])]})),{}}});const ey=R({divider:[Number,String],...q()},"VBreadcrumbsDivider"),Gs=L()({name:"VBreadcrumbsDivider",props:ey(),setup(e,t){let{slots:n}=t;return j(()=>{var l;return r("li",{class:["v-breadcrumbs-divider",e.class],style:e.style},[((l=n==null?void 0:n.default)==null?void 0:l.call(n))??e.divider])}),{}}}),ty=R({active:Boolean,activeClass:String,activeColor:String,color:String,disabled:Boolean,title:String,...q(),...Wn(),...ce({tag:"li"})},"VBreadcrumbsItem"),Ws=L()({name:"VBreadcrumbsItem",props:ty(),setup(e,t){let{slots:n,attrs:l}=t;const a=Gn(e,l),o=h(()=>{var c;return e.active||((c=a.isActive)==null?void 0:c.value)}),i=h(()=>o.value?e.activeColor:e.color),{textColorClasses:s,textColorStyles:u}=Ge(i);return j(()=>r(e.tag,{class:["v-breadcrumbs-item",{"v-breadcrumbs-item--active":o.value,"v-breadcrumbs-item--disabled":e.disabled,[`${e.activeClass}`]:o.value&&e.activeClass},s.value,e.class],style:[u.value,e.style],"aria-current":o.value?"page":void 0},{default:()=>{var c,d;return[a.isLink.value?r("a",{class:"v-breadcrumbs-item--link",href:a.href.value,"aria-current":o.value?"page":void 0,onClick:a.navigate},[((d=n.default)==null?void 0:d.call(n))??e.title]):((c=n.default)==null?void 0:c.call(n))??e.title]}})),{}}}),ny=R({activeClass:String,activeColor:String,bgColor:String,color:String,disabled:Boolean,divider:{type:String,default:"/"},icon:se,items:{type:Array,default:()=>[]},...q(),...Fe(),...Ie(),...ce({tag:"ul"})},"VBreadcrumbs"),ly=L()({name:"VBreadcrumbs",props:ny(),setup(e,t){let{slots:n}=t;const{backgroundColorClasses:l,backgroundColorStyles:a}=Be(O(e,"bgColor")),{densityClasses:o}=Ye(e),{roundedClasses:i}=Ae(e);Ee({VBreadcrumbsDivider:{divider:O(e,"divider")},VBreadcrumbsItem:{activeClass:O(e,"activeClass"),activeColor:O(e,"activeColor"),color:O(e,"color"),disabled:O(e,"disabled")}});const s=h(()=>e.items.map(u=>typeof u=="string"?{item:{title:u},raw:u}:{item:u,raw:u}));return j(()=>{const u=!!(n.prepend||e.icon);return r(e.tag,{class:["v-breadcrumbs",l.value,o.value,i.value,e.class],style:[a.value,e.style]},{default:()=>{var c;return[u&&r("li",{key:"prepend",class:"v-breadcrumbs__prepend"},[n.prepend?r(pe,{key:"prepend-defaults",disabled:!e.icon,defaults:{VIcon:{icon:e.icon,start:!0}}},n.prepend):r(Se,{key:"prepend-icon",start:!0,icon:e.icon},null)]),s.value.map((d,f,v)=>{let{item:m,raw:g}=d;return r(oe,null,[r(Ws,Y({key:m.title,disabled:f>=v.length-1},m),{default:n.title?()=>{var y;return(y=n.title)==null?void 0:y.call(n,{item:g,index:f})}:void 0}),f<v.length-1&&r(Gs,null,{default:n.divider?()=>{var y;return(y=n.divider)==null?void 0:y.call(n,{item:g,index:f})}:void 0})])}),(c=n.default)==null?void 0:c.call(n)]}})}),{}}});const Ys=L()({name:"VCardActions",props:q(),setup(e,t){let{slots:n}=t;return Ee({VBtn:{variant:"text"}}),j(()=>{var l;return r("div",{class:["v-card-actions",e.class],style:e.style},[(l=n.default)==null?void 0:l.call(n)])}),{}}}),Ks=bt("v-card-subtitle"),qs=bt("v-card-title"),ay=R({appendAvatar:String,appendIcon:se,prependAvatar:String,prependIcon:se,subtitle:String,title:String,...q(),...Fe()},"VCardItem"),Xs=L()({name:"VCardItem",props:ay(),setup(e,t){let{slots:n}=t;return j(()=>{var c;const l=!!(e.prependAvatar||e.prependIcon),a=!!(l||n.prepend),o=!!(e.appendAvatar||e.appendIcon),i=!!(o||n.append),s=!!(e.title||n.title),u=!!(e.subtitle||n.subtitle);return r("div",{class:["v-card-item",e.class],style:e.style},[a&&r("div",{key:"prepend",class:"v-card-item__prepend"},[n.prepend?r(pe,{key:"prepend-defaults",disabled:!l,defaults:{VAvatar:{density:e.density,icon:e.prependIcon,image:e.prependAvatar}}},n.prepend):l&&r($t,{key:"prepend-avatar",density:e.density,icon:e.prependIcon,image:e.prependAvatar},null)]),r("div",{class:"v-card-item__content"},[s&&r(qs,{key:"title"},{default:()=>{var d;return[((d=n.title)==null?void 0:d.call(n))??e.title]}}),u&&r(Ks,{key:"subtitle"},{default:()=>{var d;return[((d=n.subtitle)==null?void 0:d.call(n))??e.subtitle]}}),(c=n.default)==null?void 0:c.call(n)]),i&&r("div",{key:"append",class:"v-card-item__append"},[n.append?r(pe,{key:"append-defaults",disabled:!o,defaults:{VAvatar:{density:e.density,icon:e.appendIcon,image:e.appendAvatar}}},n.append):o&&r($t,{key:"append-avatar",density:e.density,icon:e.appendIcon,image:e.appendAvatar},null)])])}),{}}}),Zs=bt("v-card-text"),oy=R({appendAvatar:String,appendIcon:se,disabled:Boolean,flat:Boolean,hover:Boolean,image:String,link:{type:Boolean,default:void 0},prependAvatar:String,prependIcon:se,ripple:{type:[Boolean,Object],default:!0},subtitle:String,text:String,title:String,...at(),...q(),...Fe(),...dt(),...Me(),...Xa(),...Ft(),...xn(),...Ie(),...Wn(),...ce(),...he(),...mt({variant:"elevated"})},"VCard"),iy=L()({name:"VCard",directives:{Ripple:Dt},props:oy(),setup(e,t){let{attrs:n,slots:l}=t;const{themeClasses:a}=ye(e),{borderClasses:o}=ft(e),{colorClasses:i,colorStyles:s,variantClasses:u}=an(e),{densityClasses:c}=Ye(e),{dimensionStyles:d}=vt(e),{elevationClasses:f}=He(e),{loaderClasses:v}=Sl(e),{locationStyles:m}=Ot(e),{positionClasses:g}=Vn(e),{roundedClasses:y}=Ae(e),b=Gn(e,n),p=h(()=>e.link!==!1&&b.isLink.value),S=h(()=>!e.disabled&&e.link!==!1&&(e.link||b.isClickable.value));return j(()=>{const C=p.value?"a":e.tag,_=!!(l.title||e.title),V=!!(l.subtitle||e.subtitle),x=_||V,T=!!(l.append||e.appendAvatar||e.appendIcon),w=!!(l.prepend||e.prependAvatar||e.prependIcon),k=!!(l.image||e.image),I=x||w||T,A=!!(l.text||e.text);return ne(r(C,{class:["v-card",{"v-card--disabled":e.disabled,"v-card--flat":e.flat,"v-card--hover":e.hover&&!(e.disabled||e.flat),"v-card--link":S.value},a.value,o.value,i.value,c.value,f.value,v.value,g.value,y.value,u.value,e.class],style:[s.value,d.value,m.value,e.style],href:b.href.value,onClick:S.value&&b.navigate,tabindex:e.disabled?-1:void 0},{default:()=>{var B;return[k&&r("div",{key:"image",class:"v-card__image"},[l.image?r(pe,{key:"image-defaults",disabled:!e.image,defaults:{VImg:{cover:!0,src:e.image}}},l.image):r(Xt,{key:"image-img",cover:!0,src:e.image},null)]),r(Za,{name:"v-card",active:!!e.loading,color:typeof e.loading=="boolean"?void 0:e.loading},{default:l.loader}),I&&r(Xs,{key:"item",prependAvatar:e.prependAvatar,prependIcon:e.prependIcon,title:e.title,subtitle:e.subtitle,appendAvatar:e.appendAvatar,appendIcon:e.appendIcon},{default:l.item,prepend:l.prepend,title:l.title,subtitle:l.subtitle,append:l.append}),A&&r(Zs,{key:"text"},{default:()=>{var E;return[((E=l.text)==null?void 0:E.call(l))??e.text]}}),(B=l.default)==null?void 0:B.call(l),l.actions&&r(Ys,null,{default:l.actions}),ln(S.value,"v-card")]}}),[[Ze("ripple"),S.value&&e.ripple]])}),{}}});const sy=e=>{const{touchstartX:t,touchendX:n,touchstartY:l,touchendY:a}=e,o=.5,i=16;e.offsetX=n-t,e.offsetY=a-l,Math.abs(e.offsetY)<o*Math.abs(e.offsetX)&&(e.left&&n<t-i&&e.left(e),e.right&&n>t+i&&e.right(e)),Math.abs(e.offsetX)<o*Math.abs(e.offsetY)&&(e.up&&a<l-i&&e.up(e),e.down&&a>l+i&&e.down(e))};function ry(e,t){var l;const n=e.changedTouches[0];t.touchstartX=n.clientX,t.touchstartY=n.clientY,(l=t.start)==null||l.call(t,{originalEvent:e,...t})}function uy(e,t){var l;const n=e.changedTouches[0];t.touchendX=n.clientX,t.touchendY=n.clientY,(l=t.end)==null||l.call(t,{originalEvent:e,...t}),sy(t)}function cy(e,t){var l;const n=e.changedTouches[0];t.touchmoveX=n.clientX,t.touchmoveY=n.clientY,(l=t.move)==null||l.call(t,{originalEvent:e,...t})}function dy(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const t={touchstartX:0,touchstartY:0,touchendX:0,touchendY:0,touchmoveX:0,touchmoveY:0,offsetX:0,offsetY:0,left:e.left,right:e.right,up:e.up,down:e.down,start:e.start,move:e.move,end:e.end};return{touchstart:n=>ry(n,t),touchend:n=>uy(n,t),touchmove:n=>cy(n,t)}}function vy(e,t){var s;const n=t.value,l=n!=null&&n.parent?e.parentElement:e,a=(n==null?void 0:n.options)??{passive:!0},o=(s=t.instance)==null?void 0:s.$.uid;if(!l||!o)return;const i=dy(t.value);l._touchHandlers=l._touchHandlers??Object.create(null),l._touchHandlers[o]=i,hi(i).forEach(u=>{l.addEventListener(u,i[u],a)})}function fy(e,t){var o,i;const n=(o=t.value)!=null&&o.parent?e.parentElement:e,l=(i=t.instance)==null?void 0:i.$.uid;if(!(n!=null&&n._touchHandlers)||!l)return;const a=n._touchHandlers[l];hi(a).forEach(s=>{n.removeEventListener(s,a[s])}),delete n._touchHandlers[l]}const io={mounted:vy,unmounted:fy},Js=Symbol.for("vuetify:v-window"),Qs=Symbol.for("vuetify:v-window-group"),er=R({continuous:Boolean,nextIcon:{type:[Boolean,String,Function,Object],default:"$next"},prevIcon:{type:[Boolean,String,Function,Object],default:"$prev"},reverse:Boolean,showArrows:{type:[Boolean,String],validator:e=>typeof e=="boolean"||e==="hover"},touch:{type:[Object,Boolean],default:void 0},direction:{type:String,default:"horizontal"},modelValue:null,disabled:Boolean,selectedClass:{type:String,default:"v-window-item--active"},mandatory:{type:[Boolean,String],default:"force"},...q(),...ce(),...he()},"VWindow"),ca=L()({name:"VWindow",directives:{Touch:io},props:er(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{isRtl:a}=De(),{t:o}=ct(),i=on(e,Qs),s=W(),u=h(()=>a.value?!e.reverse:e.reverse),c=K(!1),d=h(()=>{const _=e.direction==="vertical"?"y":"x",x=(u.value?!c.value:c.value)?"-reverse":"";return`v-window-${_}${x}-transition`}),f=K(0),v=W(void 0),m=h(()=>i.items.value.findIndex(_=>i.selected.value.includes(_.id)));Z(m,(_,V)=>{const x=i.items.value.length,T=x-1;x<=2?c.value=_<V:_===T&&V===0?c.value=!0:_===0&&V===T?c.value=!1:c.value=_<V}),$e(Js,{transition:d,isReversed:c,transitionCount:f,transitionHeight:v,rootRef:s});const g=h(()=>e.continuous||m.value!==0),y=h(()=>e.continuous||m.value!==i.items.value.length-1);function b(){g.value&&i.prev()}function p(){y.value&&i.next()}const S=h(()=>{const _=[],V={icon:a.value?e.nextIcon:e.prevIcon,class:`v-window__${u.value?"right":"left"}`,onClick:i.prev,ariaLabel:o("$vuetify.carousel.prev")};_.push(g.value?n.prev?n.prev({props:V}):r(Ke,V,null):r("div",null,null));const x={icon:a.value?e.prevIcon:e.nextIcon,class:`v-window__${u.value?"left":"right"}`,onClick:i.next,ariaLabel:o("$vuetify.carousel.next")};return _.push(y.value?n.next?n.next({props:x}):r(Ke,x,null):r("div",null,null)),_}),C=h(()=>e.touch===!1?e.touch:{...{left:()=>{u.value?b():p()},right:()=>{u.value?p():b()},start:V=>{let{originalEvent:x}=V;x.stopPropagation()}},...e.touch===!0?{}:e.touch});return j(()=>ne(r(e.tag,{ref:s,class:["v-window",{"v-window--show-arrows-on-hover":e.showArrows==="hover"},l.value,e.class],style:e.style},{default:()=>{var _,V;return[r("div",{class:"v-window__container",style:{height:v.value}},[(_=n.default)==null?void 0:_.call(n,{group:i}),e.showArrows!==!1&&r("div",{class:"v-window__controls"},[S.value])]),(V=n.additional)==null?void 0:V.call(n,{group:i})]}}),[[Ze("touch"),C.value]])),{group:i}}}),my=R({color:String,cycle:Boolean,delimiterIcon:{type:se,default:"$delimiter"},height:{type:[Number,String],default:500},hideDelimiters:Boolean,hideDelimiterBackground:Boolean,interval:{type:[Number,String],default:6e3,validator:e=>Number(e)>0},progress:[Boolean,String],verticalDelimiters:[Boolean,String],...er({continuous:!0,mandatory:"force",showArrows:!0})},"VCarousel"),gy=L()({name:"VCarousel",props:my(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{t:a}=ct(),o=W();let i=-1;Z(l,u),Z(()=>e.interval,u),Z(()=>e.cycle,c=>{c?u():window.clearTimeout(i)}),Je(s);function s(){!e.cycle||!o.value||(i=window.setTimeout(o.value.group.next,+e.interval>0?+e.interval:6e3))}function u(){window.clearTimeout(i),window.requestAnimationFrame(s)}return j(()=>{const[c]=ca.filterProps(e);return r(ca,Y({ref:o},c,{modelValue:l.value,"onUpdate:modelValue":d=>l.value=d,class:["v-carousel",{"v-carousel--hide-delimiter-background":e.hideDelimiterBackground,"v-carousel--vertical-delimiters":e.verticalDelimiters},e.class],style:[{height:J(e.height)},e.style]}),{default:n.default,additional:d=>{let{group:f}=d;return r(oe,null,[!e.hideDelimiters&&r("div",{class:"v-carousel__controls",style:{left:e.verticalDelimiters==="left"&&e.verticalDelimiters?0:"auto",right:e.verticalDelimiters==="right"?0:"auto"}},[f.items.value.length>0&&r(pe,{defaults:{VBtn:{color:e.color,icon:e.delimiterIcon,size:"x-small",variant:"text"}},scoped:!0},{default:()=>[f.items.value.map((v,m)=>{const g={id:`carousel-item-${v.id}`,"aria-label":a("$vuetify.carousel.ariaLabel.delimiter",m+1,f.items.value.length),class:[f.isSelected(v.id)&&"v-btn--active"],onClick:()=>f.select(v.id,!0)};return n.item?n.item({props:g,item:v}):r(Ke,Y(v,g),null)})]})]),e.progress&&r(qa,{class:"v-carousel__progress",color:typeof e.progress=="string"?e.progress:void 0,modelValue:(f.getItemIndex(l.value)+1)/f.items.value.length*100},null)])},prev:n.prev,next:n.next})}),{}}}),tr=R({reverseTransition:{type:[Boolean,String],default:void 0},transition:{type:[Boolean,String],default:void 0},...q(),...Sn(),..._l()},"VWindowItem"),da=L()({name:"VWindowItem",directives:{Touch:io},props:tr(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const l=Ve(Js),a=wn(e,Qs),{isBooted:o}=nn();if(!l||!a)throw new Error("[Vuetify] VWindowItem must be used inside VWindow");const i=K(!1),s=h(()=>o.value&&(l.isReversed.value?e.reverseTransition!==!1:e.transition!==!1));function u(){!i.value||!l||(i.value=!1,l.transitionCount.value>0&&(l.transitionCount.value-=1,l.transitionCount.value===0&&(l.transitionHeight.value=void 0)))}function c(){var g;i.value||!l||(i.value=!0,l.transitionCount.value===0&&(l.transitionHeight.value=J((g=l.rootRef.value)==null?void 0:g.clientHeight)),l.transitionCount.value+=1)}function d(){u()}function f(g){i.value&&xe(()=>{!s.value||!i.value||!l||(l.transitionHeight.value=J(g.clientHeight))})}const v=h(()=>{const g=l.isReversed.value?e.reverseTransition:e.transition;return s.value?{name:typeof g!="string"?l.transition.value:g,onBeforeEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:c,onAfterLeave:u,onLeaveCancelled:d,onEnter:f}:!1}),{hasContent:m}=no(e,a.isSelected);return j(()=>r(ht,{transition:v.value,disabled:!o.value},{default:()=>{var g;return[ne(r("div",{class:["v-window-item",a.selectedClass.value,e.class],style:e.style},[m.value&&((g=n.default)==null?void 0:g.call(n))]),[[Pe,a.isSelected.value]])]}})),{groupItem:a}}}),hy=R({...Xi(),...tr()},"VCarouselItem"),yy=L()({name:"VCarouselItem",inheritAttrs:!1,props:hy(),setup(e,t){let{slots:n,attrs:l}=t;j(()=>{const[a]=Xt.filterProps(e),[o]=da.filterProps(e);return r(da,Y({class:"v-carousel-item"},o),{default:()=>[r(Xt,Y(l,a),n)]})})}});const by=bt("v-code");const py=R({color:{type:Object},disabled:Boolean,dotSize:{type:[Number,String],default:10},height:{type:[Number,String],default:150},width:{type:[Number,String],default:300},...q()},"VColorPickerCanvas"),ky=ut({name:"VColorPickerCanvas",props:py(),emits:{"update:color":e=>!0,"update:position":e=>!0},setup(e,t){let{emit:n}=t;const l=K(!1),a=W(),o=K(parseFloat(e.width)),i=K(parseFloat(e.height)),s=W({x:0,y:0}),u=h({get:()=>s.value,set(b){var C,_;if(!a.value)return;const{x:p,y:S}=b;n("update:color",{h:((C=e.color)==null?void 0:C.h)??0,s:Ue(p,0,o.value)/o.value,v:1-Ue(S,0,i.value)/i.value,a:((_=e.color)==null?void 0:_.a)??1})}}),c=h(()=>{const{x:b,y:p}=u.value,S=parseInt(e.dotSize,10)/2;return{width:J(e.dotSize),height:J(e.dotSize),transform:`translate(${J(b-S)}, ${J(p-S)})`}}),{resizeRef:d}=wt(b=>{var C;if(!((C=d.value)!=null&&C.offsetParent))return;const{width:p,height:S}=b[0].contentRect;o.value=p,i.value=S});function f(b,p,S){const{left:C,top:_,width:V,height:x}=S;u.value={x:Ue(b-C,0,V),y:Ue(p-_,0,x)}}function v(b){b.type==="mousedown"&&b.preventDefault(),!e.disabled&&(m(b),window.addEventListener("mousemove",m),window.addEventListener("mouseup",g),window.addEventListener("touchmove",m),window.addEventListener("touchend",g))}function m(b){if(e.disabled||!a.value)return;l.value=!0;const p=gf(b);f(p.clientX,p.clientY,a.value.getBoundingClientRect())}function g(){window.removeEventListener("mousemove",m),window.removeEventListener("mouseup",g),window.removeEventListener("touchmove",m),window.removeEventListener("touchend",g)}function y(){var _;if(!a.value)return;const b=a.value,p=b.getContext("2d");if(!p)return;const S=p.createLinearGradient(0,0,b.width,0);S.addColorStop(0,"hsla(0, 0%, 100%, 1)"),S.addColorStop(1,`hsla(${((_=e.color)==null?void 0:_.h)??0}, 100%, 50%, 1)`),p.fillStyle=S,p.fillRect(0,0,b.width,b.height);const C=p.createLinearGradient(0,0,0,b.height);C.addColorStop(0,"hsla(0, 0%, 100%, 0)"),C.addColorStop(1,"hsla(0, 0%, 0%, 1)"),p.fillStyle=C,p.fillRect(0,0,b.width,b.height)}return Z(()=>{var b;return(b=e.color)==null?void 0:b.h},y,{immediate:!0}),Z(()=>[o.value,i.value],(b,p)=>{y(),s.value={x:u.value.x*b[0]/p[0],y:u.value.y*b[1]/p[1]}},{flush:"post"}),Z(()=>e.color,()=>{if(l.value){l.value=!1;return}s.value=e.color?{x:e.color.s*o.value,y:(1-e.color.v)*i.value}:{x:0,y:0}},{deep:!0,immediate:!0}),Je(()=>y()),j(()=>r("div",{ref:d,class:["v-color-picker-canvas",e.class],style:e.style,onMousedown:v,onTouchstartPassive:v},[r("canvas",{ref:a,width:o.value,height:i.value},null),e.color&&r("div",{class:["v-color-picker-canvas__dot",{"v-color-picker-canvas__dot--disabled":e.disabled}],style:c.value},null)])),{}}});function Sy(e,t){if(t){const{a:n,...l}=e;return l}return e}function wy(e,t){if(t==null||typeof t=="string"){const n=Bi(e);return e.a===1?n.slice(0,7):n}if(typeof t=="object"){let n;return Ut(t,["r","g","b"])?n=Vt(e):Ut(t,["h","s","l"])?n=_i(e):Ut(t,["h","s","v"])&&(n=e),Sy(n,!Ut(t,["a"])&&e.a===1)}return e}const En={h:0,s:0,v:1,a:1},va={inputProps:{type:"number",min:0},inputs:[{label:"R",max:255,step:1,getValue:e=>Math.round(e.r),getColor:(e,t)=>({...e,r:Number(t)})},{label:"G",max:255,step:1,getValue:e=>Math.round(e.g),getColor:(e,t)=>({...e,g:Number(t)})},{label:"B",max:255,step:1,getValue:e=>Math.round(e.b),getColor:(e,t)=>({...e,b:Number(t)})},{label:"A",max:1,step:.01,getValue:e=>{let{a:t}=e;return t!=null?Math.round(t*100)/100:1},getColor:(e,t)=>({...e,a:Number(t)})}],to:Vt,from:hl};var ri;const Cy={...va,inputs:(ri=va.inputs)==null?void 0:ri.slice(0,3)},fa={inputProps:{type:"number",min:0},inputs:[{label:"H",max:360,step:1,getValue:e=>Math.round(e.h),getColor:(e,t)=>({...e,h:Number(t)})},{label:"S",max:1,step:.01,getValue:e=>Math.round(e.s*100)/100,getColor:(e,t)=>({...e,s:Number(t)})},{label:"L",max:1,step:.01,getValue:e=>Math.round(e.l*100)/100,getColor:(e,t)=>({...e,l:Number(t)})},{label:"A",max:1,step:.01,getValue:e=>{let{a:t}=e;return t!=null?Math.round(t*100)/100:1},getColor:(e,t)=>({...e,a:Number(t)})}],to:_i,from:$a},xy={...fa,inputs:fa.inputs.slice(0,3)},nr={inputProps:{type:"text"},inputs:[{label:"HEXA",getValue:e=>e,getColor:(e,t)=>t}],to:Bi,from:Lf},Vy={...nr,inputs:[{label:"HEX",getValue:e=>e.slice(0,7),getColor:(e,t)=>t}]},Kt={rgb:Cy,rgba:va,hsl:xy,hsla:fa,hex:Vy,hexa:nr},_y=e=>{let{label:t,...n}=e;return r("div",{class:"v-color-picker-edit__input"},[r("input",n,null),r("span",null,[t])])},Iy=R({color:Object,disabled:Boolean,mode:{type:String,default:"rgba",validator:e=>Object.keys(Kt).includes(e)},modes:{type:Array,default:()=>Object.keys(Kt),validator:e=>Array.isArray(e)&&e.every(t=>Object.keys(Kt).includes(t))},...q()},"VColorPickerEdit"),Ty=ut({name:"VColorPickerEdit",props:Iy(),emits:{"update:color":e=>!0,"update:mode":e=>!0},setup(e,t){let{emit:n}=t;const l=h(()=>e.modes.map(o=>({...Kt[o],name:o}))),a=h(()=>{var s;const o=l.value.find(u=>u.name===e.mode);if(!o)return[];const i=e.color?o.to(e.color):null;return(s=o.inputs)==null?void 0:s.map(u=>{let{getValue:c,getColor:d,...f}=u;return{...o.inputProps,...f,disabled:e.disabled,value:i&&c(i),onChange:v=>{const m=v.target;m&&n("update:color",o.from(d(i??En,m.value)))}}})});return j(()=>{var o;return r("div",{class:["v-color-picker-edit",e.class],style:e.style},[(o=a.value)==null?void 0:o.map(i=>r(_y,i,null)),l.value.length>1&&r(Ke,{icon:"$unfold",size:"x-small",variant:"plain",onClick:()=>{const i=l.value.findIndex(s=>s.name===e.mode);n("update:mode",l.value[(i+1)%l.value.length].name)}},null)])}),{}}});const so=Symbol.for("vuetify:v-slider");function ma(e,t,n){const l=n==="vertical",a=t.getBoundingClientRect(),o="touches"in e?e.touches[0]:e;return l?o.clientY-(a.top+a.height/2):o.clientX-(a.left+a.width/2)}function Py(e,t){return"touches"in e&&e.touches.length?e.touches[0][t]:"changedTouches"in e&&e.changedTouches.length?e.changedTouches[0][t]:e[t]}const lr=R({disabled:{type:Boolean,default:null},error:Boolean,readonly:{type:Boolean,default:null},max:{type:[Number,String],default:100},min:{type:[Number,String],default:0},step:{type:[Number,String],default:0},thumbColor:String,thumbLabel:{type:[Boolean,String],default:void 0,validator:e=>typeof e=="boolean"||e==="always"},thumbSize:{type:[Number,String],default:20},showTicks:{type:[Boolean,String],default:!1,validator:e=>typeof e=="boolean"||e==="always"},ticks:{type:[Array,Object]},tickSize:{type:[Number,String],default:2},color:String,trackColor:String,trackFillColor:String,trackSize:{type:[Number,String],default:4},direction:{type:String,default:"horizontal",validator:e=>["vertical","horizontal"].includes(e)},reverse:Boolean,...Ie(),...Me({elevation:2})},"Slider"),ar=e=>{const t=h(()=>parseFloat(e.min)),n=h(()=>parseFloat(e.max)),l=h(()=>+e.step>0?parseFloat(e.step):0),a=h(()=>Math.max(go(l.value),go(t.value)));function o(i){if(i=parseFloat(i),l.value<=0)return i;const s=Ue(i,t.value,n.value),u=t.value%l.value,c=Math.round((s-u)/l.value)*l.value+u;return parseFloat(Math.min(c,n.value).toFixed(a.value))}return{min:t,max:n,step:l,decimals:a,roundValue:o}},or=e=>{let{props:t,steps:n,onSliderStart:l,onSliderMove:a,onSliderEnd:o,getActiveThumb:i}=e;const{isRtl:s}=De(),u=O(t,"reverse"),c=h(()=>{let D=s.value?"rtl":"ltr";return t.reverse&&(D=D==="rtl"?"ltr":"rtl"),D}),{min:d,max:f,step:v,decimals:m,roundValue:g}=n,y=h(()=>parseInt(t.thumbSize,10)),b=h(()=>parseInt(t.tickSize,10)),p=h(()=>parseInt(t.trackSize,10)),S=h(()=>(f.value-d.value)/v.value),C=O(t,"disabled"),_=h(()=>t.direction==="vertical"),V=h(()=>t.error||t.disabled?void 0:t.thumbColor??t.color),x=h(()=>t.error||t.disabled?void 0:t.trackColor??t.color),T=h(()=>t.error||t.disabled?void 0:t.trackFillColor??t.color),w=K(!1),k=K(0),I=W(),A=W();function B(D){var Te;const me=t.direction==="vertical",Q=me?"top":"left",H=me?"height":"width",le=me?"clientY":"clientX",{[Q]:be,[H]:de}=(Te=I.value)==null?void 0:Te.$el.getBoundingClientRect(),ie=Py(D,le);let fe=Math.min(Math.max((ie-be-k.value)/de,0),1)||0;return(me||c.value==="rtl")&&(fe=1-fe),g(d.value+fe*(f.value-d.value))}const E=D=>{o({value:B(D)}),w.value=!1,k.value=0},F=D=>{A.value=i(D),A.value&&(A.value.focus(),w.value=!0,A.value.contains(D.target)?k.value=ma(D,A.value,t.direction):(k.value=0,a({value:B(D)})),l({value:B(D)}))},X={passive:!0,capture:!0};function $(D){a({value:B(D)})}function N(D){D.stopPropagation(),D.preventDefault(),E(D),window.removeEventListener("mousemove",$,X),window.removeEventListener("mouseup",N)}function M(D){var me;E(D),window.removeEventListener("touchmove",$,X),(me=D.target)==null||me.removeEventListener("touchend",M)}function G(D){var me;F(D),window.addEventListener("touchmove",$,X),(me=D.target)==null||me.addEventListener("touchend",M,{passive:!1})}function U(D){D.preventDefault(),F(D),window.addEventListener("mousemove",$,X),window.addEventListener("mouseup",N,{passive:!1})}const z=D=>{const me=(D-d.value)/(f.value-d.value)*100;return Ue(isNaN(me)?0:me,0,100)},ae=O(t,"showTicks"),re=h(()=>ae.value?t.ticks?Array.isArray(t.ticks)?t.ticks.map(D=>({value:D,position:z(D),label:D.toString()})):Object.keys(t.ticks).map(D=>({value:parseFloat(D),position:z(parseFloat(D)),label:t.ticks[D]})):S.value!==1/0?xt(S.value+1).map(D=>{const me=d.value+D*v.value;return{value:me,position:z(me)}}):[]:[]),ve=h(()=>re.value.some(D=>{let{label:me}=D;return!!me})),ge={activeThumbRef:A,color:O(t,"color"),decimals:m,disabled:C,direction:O(t,"direction"),elevation:O(t,"elevation"),hasLabels:ve,horizontalDirection:c,isReversed:u,min:d,max:f,mousePressed:w,numTicks:S,onSliderMousedown:U,onSliderTouchstart:G,parsedTicks:re,parseMouseMove:B,position:z,readonly:O(t,"readonly"),rounded:O(t,"rounded"),roundValue:g,showTicks:ae,startOffset:k,step:v,thumbSize:y,thumbColor:V,thumbLabel:O(t,"thumbLabel"),ticks:O(t,"ticks"),tickSize:b,trackColor:x,trackContainerRef:I,trackFillColor:T,trackSize:p,vertical:_};return $e(so,ge),ge},Ay=R({focused:Boolean,max:{type:Number,required:!0},min:{type:Number,required:!0},modelValue:{type:Number,required:!0},position:{type:Number,required:!0},ripple:{type:[Boolean,Object],default:!0},...q()},"VSliderThumb"),ga=L()({name:"VSliderThumb",directives:{Ripple:Dt},props:Ay(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=Ve(so),{rtlClasses:o}=De();if(!a)throw new Error("[Vuetify] v-slider-thumb must be used inside v-slider or v-range-slider");const{thumbColor:i,step:s,vertical:u,disabled:c,thumbSize:d,thumbLabel:f,direction:v,readonly:m,elevation:g,isReversed:y,horizontalDirection:b,mousePressed:p,decimals:S}=a,{textColorClasses:C,textColorStyles:_}=Ge(i),{pageup:V,pagedown:x,end:T,home:w,left:k,right:I,down:A,up:B}=Ul,E=[V,x,T,w,k,I,A,B],F=h(()=>s.value?[1,2,3]:[1,5,10]);function X(N,M){if(!E.includes(N.key))return;N.preventDefault();const G=s.value||.1,U=(e.max-e.min)/G;if([k,I,A,B].includes(N.key)){const ae=(b.value==="rtl"?[k,B]:[I,B]).includes(N.key)?1:-1,re=N.shiftKey?2:N.ctrlKey?1:0;M=M+ae*G*F.value[re]}else if(N.key===w)M=e.min;else if(N.key===T)M=e.max;else{const z=N.key===x?1:-1;M=M-z*G*(U>100?U/10:10)}return Math.max(e.min,Math.min(e.max,M))}function $(N){const M=X(N,e.modelValue);M!=null&&l("update:modelValue",M)}return j(()=>{const N=J(u.value||y.value?100-e.position:e.position,"%"),{elevationClasses:M}=He(h(()=>c.value?void 0:g.value));return r("div",{class:["v-slider-thumb",{"v-slider-thumb--focused":e.focused,"v-slider-thumb--pressed":e.focused&&p.value},e.class,o.value],style:[{"--v-slider-thumb-position":N,"--v-slider-thumb-size":J(d.value)},e.style],role:"slider",tabindex:c.value?-1:0,"aria-valuemin":e.min,"aria-valuemax":e.max,"aria-valuenow":e.modelValue,"aria-readonly":!!m.value,"aria-orientation":v.value,onKeydown:m.value?void 0:$},[r("div",{class:["v-slider-thumb__surface",C.value,M.value],style:{..._.value}},null),ne(r("div",{class:["v-slider-thumb__ripple",C.value],style:_.value},null),[[Ze("ripple"),e.ripple,null,{circle:!0,center:!0}]]),r(Ha,{origin:"bottom center"},{default:()=>{var G;return[ne(r("div",{class:"v-slider-thumb__label-container"},[r("div",{class:["v-slider-thumb__label"]},[r("div",null,[((G=n["thumb-label"])==null?void 0:G.call(n,{modelValue:e.modelValue}))??e.modelValue.toFixed(s.value?S.value:1)])])]),[[Pe,f.value&&e.focused||f.value==="always"]])]}})])}),{}}});const By=R({start:{type:Number,required:!0},stop:{type:Number,required:!0},...q()},"VSliderTrack"),ir=L()({name:"VSliderTrack",props:By(),emits:{},setup(e,t){let{slots:n}=t;const l=Ve(so);if(!l)throw new Error("[Vuetify] v-slider-track must be inside v-slider or v-range-slider");const{color:a,horizontalDirection:o,parsedTicks:i,rounded:s,showTicks:u,tickSize:c,trackColor:d,trackFillColor:f,trackSize:v,vertical:m,min:g,max:y}=l,{roundedClasses:b}=Ae(s),{backgroundColorClasses:p,backgroundColorStyles:S}=Be(f),{backgroundColorClasses:C,backgroundColorStyles:_}=Be(d),V=h(()=>`inset-${m.value?"block-end":"inline-start"}`),x=h(()=>m.value?"height":"width"),T=h(()=>({[V.value]:"0%",[x.value]:"100%"})),w=h(()=>e.stop-e.start),k=h(()=>({[V.value]:J(e.start,"%"),[x.value]:J(w.value,"%")})),I=h(()=>u.value?(m.value?i.value.slice().reverse():i.value).map((B,E)=>{var $;const F=m.value?"bottom":"margin-inline-start",X=B.value!==g.value&&B.value!==y.value?J(B.position,"%"):void 0;return r("div",{key:B.value,class:["v-slider-track__tick",{"v-slider-track__tick--filled":B.position>=e.start&&B.position<=e.stop,"v-slider-track__tick--first":B.value===g.value,"v-slider-track__tick--last":B.value===y.value}],style:{[F]:X}},[(B.label||n["tick-label"])&&r("div",{class:"v-slider-track__tick-label"},[(($=n["tick-label"])==null?void 0:$.call(n,{tick:B,index:E}))??B.label])])}):[]);return j(()=>r("div",{class:["v-slider-track",b.value,e.class],style:[{"--v-slider-track-size":J(v.value),"--v-slider-tick-size":J(c.value),direction:m.value?void 0:o.value},e.style]},[r("div",{class:["v-slider-track__background",C.value,{"v-slider-track__background--opacity":!!a.value||!f.value}],style:{...T.value,..._.value}},null),r("div",{class:["v-slider-track__fill",p.value],style:{...k.value,...S.value}},null),u.value&&r("div",{class:["v-slider-track__ticks",{"v-slider-track__ticks--always-show":u.value==="always"}]},[I.value])])),{}}}),Ry=R({...Cl(),...lr(),...Bt(),modelValue:{type:[Number,String],default:0}},"VSlider"),ha=L()({name:"VSlider",props:Ry(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,start:e=>!0,end:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=W(),{rtlClasses:o}=De(),i=ar(e),s=ue(e,"modelValue",void 0,x=>i.roundValue(x??i.min.value)),{min:u,max:c,mousePressed:d,roundValue:f,onSliderMousedown:v,onSliderTouchstart:m,trackContainerRef:g,position:y,hasLabels:b,readonly:p}=or({props:e,steps:i,onSliderStart:()=>{l("start",s.value)},onSliderEnd:x=>{let{value:T}=x;const w=f(T);s.value=w,l("end",w)},onSliderMove:x=>{let{value:T}=x;return s.value=f(T)},getActiveThumb:()=>{var x;return(x=a.value)==null?void 0:x.$el}}),{isFocused:S,focus:C,blur:_}=Nt(e),V=h(()=>y(s.value));return j(()=>{const[x,T]=Ne.filterProps(e),w=!!(e.label||n.label||n.prepend);return r(Ne,Y({class:["v-slider",{"v-slider--has-labels":!!n["tick-label"]||b.value,"v-slider--focused":S.value,"v-slider--pressed":d.value,"v-slider--disabled":e.disabled},o.value,e.class],style:e.style},x,{focused:S.value}),{...n,prepend:w?k=>{var I,A;return r(oe,null,[((I=n.label)==null?void 0:I.call(n,k))??(e.label?r(_n,{id:k.id.value,class:"v-slider__label",text:e.label},null):void 0),(A=n.prepend)==null?void 0:A.call(n,k)])}:void 0,default:k=>{let{id:I,messagesId:A}=k;return r("div",{class:"v-slider__container",onMousedown:p.value?void 0:v,onTouchstartPassive:p.value?void 0:m},[r("input",{id:I.value,name:e.name||I.value,disabled:!!e.disabled,readonly:!!e.readonly,tabindex:"-1",value:s.value},null),r(ir,{ref:g,start:0,stop:V.value},{"tick-label":n["tick-label"]}),r(ga,{ref:a,"aria-describedby":A.value,focused:S.value,min:u.value,max:c.value,modelValue:s.value,"onUpdate:modelValue":B=>s.value=B,position:V.value,elevation:e.elevation,onFocus:C,onBlur:_},{"thumb-label":n["thumb-label"]})])}})}),{}}}),Ey=R({color:{type:Object},disabled:Boolean,hideAlpha:Boolean,...q()},"VColorPickerPreview"),Ly=ut({name:"VColorPickerPreview",props:Ey(),emits:{"update:color":e=>!0},setup(e,t){let{emit:n}=t;return j(()=>{var l,a;return r("div",{class:["v-color-picker-preview",{"v-color-picker-preview--hide-alpha":e.hideAlpha},e.class],style:e.style},[r("div",{class:"v-color-picker-preview__dot"},[r("div",{style:{background:Ti(e.color??En)}},null)]),r("div",{class:"v-color-picker-preview__sliders"},[r(ha,{class:"v-color-picker-preview__track v-color-picker-preview__hue",modelValue:(l=e.color)==null?void 0:l.h,"onUpdate:modelValue":o=>n("update:color",{...e.color??En,h:o}),step:0,min:0,max:360,disabled:e.disabled,thumbSize:14,trackSize:8,trackFillColor:"white",hideDetails:!0},null),!e.hideAlpha&&r(ha,{class:"v-color-picker-preview__track v-color-picker-preview__alpha",modelValue:((a=e.color)==null?void 0:a.a)??1,"onUpdate:modelValue":o=>n("update:color",{...e.color??En,a:o}),step:1/256,min:0,max:1,disabled:e.disabled,thumbSize:14,trackSize:8,trackFillColor:"white",hideDetails:!0},null)])])}),{}}});const $y=Object.freeze({base:"#f44336",lighten5:"#ffebee",lighten4:"#ffcdd2",lighten3:"#ef9a9a",lighten2:"#e57373",lighten1:"#ef5350",darken1:"#e53935",darken2:"#d32f2f",darken3:"#c62828",darken4:"#b71c1c",accent1:"#ff8a80",accent2:"#ff5252",accent3:"#ff1744",accent4:"#d50000"}),My=Object.freeze({base:"#e91e63",lighten5:"#fce4ec",lighten4:"#f8bbd0",lighten3:"#f48fb1",lighten2:"#f06292",lighten1:"#ec407a",darken1:"#d81b60",darken2:"#c2185b",darken3:"#ad1457",darken4:"#880e4f",accent1:"#ff80ab",accent2:"#ff4081",accent3:"#f50057",accent4:"#c51162"}),Fy=Object.freeze({base:"#9c27b0",lighten5:"#f3e5f5",lighten4:"#e1bee7",lighten3:"#ce93d8",lighten2:"#ba68c8",lighten1:"#ab47bc",darken1:"#8e24aa",darken2:"#7b1fa2",darken3:"#6a1b9a",darken4:"#4a148c",accent1:"#ea80fc",accent2:"#e040fb",accent3:"#d500f9",accent4:"#aa00ff"}),Oy=Object.freeze({base:"#673ab7",lighten5:"#ede7f6",lighten4:"#d1c4e9",lighten3:"#b39ddb",lighten2:"#9575cd",lighten1:"#7e57c2",darken1:"#5e35b1",darken2:"#512da8",darken3:"#4527a0",darken4:"#311b92",accent1:"#b388ff",accent2:"#7c4dff",accent3:"#651fff",accent4:"#6200ea"}),Dy=Object.freeze({base:"#3f51b5",lighten5:"#e8eaf6",lighten4:"#c5cae9",lighten3:"#9fa8da",lighten2:"#7986cb",lighten1:"#5c6bc0",darken1:"#3949ab",darken2:"#303f9f",darken3:"#283593",darken4:"#1a237e",accent1:"#8c9eff",accent2:"#536dfe",accent3:"#3d5afe",accent4:"#304ffe"}),Ny=Object.freeze({base:"#2196f3",lighten5:"#e3f2fd",lighten4:"#bbdefb",lighten3:"#90caf9",lighten2:"#64b5f6",lighten1:"#42a5f5",darken1:"#1e88e5",darken2:"#1976d2",darken3:"#1565c0",darken4:"#0d47a1",accent1:"#82b1ff",accent2:"#448aff",accent3:"#2979ff",accent4:"#2962ff"}),zy=Object.freeze({base:"#03a9f4",lighten5:"#e1f5fe",lighten4:"#b3e5fc",lighten3:"#81d4fa",lighten2:"#4fc3f7",lighten1:"#29b6f6",darken1:"#039be5",darken2:"#0288d1",darken3:"#0277bd",darken4:"#01579b",accent1:"#80d8ff",accent2:"#40c4ff",accent3:"#00b0ff",accent4:"#0091ea"}),Hy=Object.freeze({base:"#00bcd4",lighten5:"#e0f7fa",lighten4:"#b2ebf2",lighten3:"#80deea",lighten2:"#4dd0e1",lighten1:"#26c6da",darken1:"#00acc1",darken2:"#0097a7",darken3:"#00838f",darken4:"#006064",accent1:"#84ffff",accent2:"#18ffff",accent3:"#00e5ff",accent4:"#00b8d4"}),jy=Object.freeze({base:"#009688",lighten5:"#e0f2f1",lighten4:"#b2dfdb",lighten3:"#80cbc4",lighten2:"#4db6ac",lighten1:"#26a69a",darken1:"#00897b",darken2:"#00796b",darken3:"#00695c",darken4:"#004d40",accent1:"#a7ffeb",accent2:"#64ffda",accent3:"#1de9b6",accent4:"#00bfa5"}),Uy=Object.freeze({base:"#4caf50",lighten5:"#e8f5e9",lighten4:"#c8e6c9",lighten3:"#a5d6a7",lighten2:"#81c784",lighten1:"#66bb6a",darken1:"#43a047",darken2:"#388e3c",darken3:"#2e7d32",darken4:"#1b5e20",accent1:"#b9f6ca",accent2:"#69f0ae",accent3:"#00e676",accent4:"#00c853"}),Gy=Object.freeze({base:"#8bc34a",lighten5:"#f1f8e9",lighten4:"#dcedc8",lighten3:"#c5e1a5",lighten2:"#aed581",lighten1:"#9ccc65",darken1:"#7cb342",darken2:"#689f38",darken3:"#558b2f",darken4:"#33691e",accent1:"#ccff90",accent2:"#b2ff59",accent3:"#76ff03",accent4:"#64dd17"}),Wy=Object.freeze({base:"#cddc39",lighten5:"#f9fbe7",lighten4:"#f0f4c3",lighten3:"#e6ee9c",lighten2:"#dce775",lighten1:"#d4e157",darken1:"#c0ca33",darken2:"#afb42b",darken3:"#9e9d24",darken4:"#827717",accent1:"#f4ff81",accent2:"#eeff41",accent3:"#c6ff00",accent4:"#aeea00"}),Yy=Object.freeze({base:"#ffeb3b",lighten5:"#fffde7",lighten4:"#fff9c4",lighten3:"#fff59d",lighten2:"#fff176",lighten1:"#ffee58",darken1:"#fdd835",darken2:"#fbc02d",darken3:"#f9a825",darken4:"#f57f17",accent1:"#ffff8d",accent2:"#ffff00",accent3:"#ffea00",accent4:"#ffd600"}),Ky=Object.freeze({base:"#ffc107",lighten5:"#fff8e1",lighten4:"#ffecb3",lighten3:"#ffe082",lighten2:"#ffd54f",lighten1:"#ffca28",darken1:"#ffb300",darken2:"#ffa000",darken3:"#ff8f00",darken4:"#ff6f00",accent1:"#ffe57f",accent2:"#ffd740",accent3:"#ffc400",accent4:"#ffab00"}),qy=Object.freeze({base:"#ff9800",lighten5:"#fff3e0",lighten4:"#ffe0b2",lighten3:"#ffcc80",lighten2:"#ffb74d",lighten1:"#ffa726",darken1:"#fb8c00",darken2:"#f57c00",darken3:"#ef6c00",darken4:"#e65100",accent1:"#ffd180",accent2:"#ffab40",accent3:"#ff9100",accent4:"#ff6d00"}),Xy=Object.freeze({base:"#ff5722",lighten5:"#fbe9e7",lighten4:"#ffccbc",lighten3:"#ffab91",lighten2:"#ff8a65",lighten1:"#ff7043",darken1:"#f4511e",darken2:"#e64a19",darken3:"#d84315",darken4:"#bf360c",accent1:"#ff9e80",accent2:"#ff6e40",accent3:"#ff3d00",accent4:"#dd2c00"}),Zy=Object.freeze({base:"#795548",lighten5:"#efebe9",lighten4:"#d7ccc8",lighten3:"#bcaaa4",lighten2:"#a1887f",lighten1:"#8d6e63",darken1:"#6d4c41",darken2:"#5d4037",darken3:"#4e342e",darken4:"#3e2723"}),Jy=Object.freeze({base:"#607d8b",lighten5:"#eceff1",lighten4:"#cfd8dc",lighten3:"#b0bec5",lighten2:"#90a4ae",lighten1:"#78909c",darken1:"#546e7a",darken2:"#455a64",darken3:"#37474f",darken4:"#263238"}),Qy=Object.freeze({base:"#9e9e9e",lighten5:"#fafafa",lighten4:"#f5f5f5",lighten3:"#eeeeee",lighten2:"#e0e0e0",lighten1:"#bdbdbd",darken1:"#757575",darken2:"#616161",darken3:"#424242",darken4:"#212121"}),eb=Object.freeze({black:"#000000",white:"#ffffff",transparent:"#ffffff00"}),tb=Object.freeze({red:$y,pink:My,purple:Fy,deepPurple:Oy,indigo:Dy,blue:Ny,lightBlue:zy,cyan:Hy,teal:jy,green:Uy,lightGreen:Gy,lime:Wy,yellow:Yy,amber:Ky,orange:qy,deepOrange:Xy,brown:Zy,blueGrey:Jy,grey:Qy,shades:eb}),nb=R({swatches:{type:Array,default:()=>lb(tb)},disabled:Boolean,color:Object,maxHeight:[Number,String],...q()},"VColorPickerSwatches");function lb(e){return Object.keys(e).map(t=>{const n=e[t];return n.base?[n.base,n.darken4,n.darken3,n.darken2,n.darken1,n.lighten1,n.lighten2,n.lighten3,n.lighten4,n.lighten5]:[n.black,n.white,n.transparent]})}const ab=ut({name:"VColorPickerSwatches",props:nb(),emits:{"update:color":e=>!0},setup(e,t){let{emit:n}=t;return j(()=>r("div",{class:["v-color-picker-swatches",e.class],style:[{maxHeight:J(e.maxHeight)},e.style]},[r("div",null,[e.swatches.map(l=>r("div",{class:"v-color-picker-swatches__swatch"},[l.map(a=>{const o=st(a),i=hl(o),s=Ii(o);return r("div",{class:"v-color-picker-swatches__color",onClick:()=>i&&n("update:color",i)},[r("div",{style:{background:s}},[e.color&&yn(e.color,i)?r(Se,{size:"x-small",icon:"$success",color:Of(a,"#FFFFFF")>2?"white":"black"},null):void 0])])})]))])])),{}}});const sr=R({color:String,...at(),...q(),...dt(),...Me(),...Ft(),...xn(),...Ie(),...ce(),...he()},"VSheet"),ya=L()({name:"VSheet",props:sr(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{backgroundColorClasses:a,backgroundColorStyles:o}=Be(O(e,"color")),{borderClasses:i}=ft(e),{dimensionStyles:s}=vt(e),{elevationClasses:u}=He(e),{locationStyles:c}=Ot(e),{positionClasses:d}=Vn(e),{roundedClasses:f}=Ae(e);return j(()=>r(e.tag,{class:["v-sheet",l.value,a.value,i.value,u.value,d.value,f.value,e.class],style:[o.value,s.value,c.value,e.style]},n)),{}}}),ob=R({canvasHeight:{type:[String,Number],default:150},disabled:Boolean,dotSize:{type:[Number,String],default:10},hideCanvas:Boolean,hideSliders:Boolean,hideInputs:Boolean,mode:{type:String,default:"rgba",validator:e=>Object.keys(Kt).includes(e)},modes:{type:Array,default:()=>Object.keys(Kt),validator:e=>Array.isArray(e)&&e.every(t=>Object.keys(Kt).includes(t))},showSwatches:Boolean,swatches:Array,swatchesMaxHeight:{type:[Number,String],default:150},modelValue:{type:[Object,String]},...rt(sr({width:300}),["height","location","minHeight","maxHeight","minWidth","maxWidth"])},"VColorPicker"),ib=ut({name:"VColorPicker",props:ob(),emits:{"update:modelValue":e=>!0,"update:mode":e=>!0},setup(e){const t=ue(e,"mode"),n=W(null),l=ue(e,"modelValue",void 0,i=>{if(i==null||i==="")return null;let s;try{s=hl(st(i))}catch{return null}return n.value&&(s={...s,h:n.value.h},n.value=null),s},i=>i?wy(i,e.modelValue):null),{rtlClasses:a}=De(),o=i=>{l.value=i,n.value=i};return Je(()=>{e.modes.includes(t.value)||(t.value=e.modes[0])}),Ee({VSlider:{color:void 0,trackColor:void 0,trackFillColor:void 0}}),j(()=>{const[i]=ya.filterProps(e);return r(ya,Y({rounded:e.rounded,elevation:e.elevation,theme:e.theme,class:["v-color-picker",a.value,e.class],style:[{"--v-color-picker-color-hsv":Ti({...l.value??En,a:1})},e.style]},i,{maxWidth:e.width}),{default:()=>[!e.hideCanvas&&r(ky,{key:"canvas",color:l.value,"onUpdate:color":o,disabled:e.disabled,dotSize:e.dotSize,width:e.width,height:e.canvasHeight},null),(!e.hideSliders||!e.hideInputs)&&r("div",{key:"controls",class:"v-color-picker__controls"},[!e.hideSliders&&r(Ly,{key:"preview",color:l.value,"onUpdate:color":o,hideAlpha:!t.value.endsWith("a"),disabled:e.disabled},null),!e.hideInputs&&r(Ty,{key:"edit",modes:e.modes,mode:t.value,"onUpdate:mode":s=>t.value=s,color:l.value,"onUpdate:color":o,disabled:e.disabled},null)]),e.showSwatches&&r(ab,{key:"swatches",color:l.value,"onUpdate:color":o,maxHeight:e.swatchesMaxHeight,swatches:e.swatches,disabled:e.disabled},null)]})}),{}}});function sb(e,t,n){if(t==null)return e;if(Array.isArray(t))throw new Error("Multiple matches is not implemented");return typeof t=="number"&&~t?r(oe,null,[r("span",{class:"v-combobox__unmask"},[e.substr(0,t)]),r("span",{class:"v-combobox__mask"},[e.substr(t,n)]),r("span",{class:"v-combobox__unmask"},[e.substr(t+n)])]):e}const rb=R({autoSelectFirst:{type:[Boolean,String]},delimiters:Array,...zs({filterKeys:["title"]}),...oo({hideNoData:!0,returnObject:!0}),...rt(Al({modelValue:null,role:"combobox"}),["validationValue","dirty","appendInnerIcon"]),...Pt({transition:!1})},"VCombobox"),ub=L()({name:"VCombobox",props:rb(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,"update:search":e=>!0,"update:menu":e=>!0},setup(e,t){var Q;let{emit:n,slots:l}=t;const{t:a}=ct(),o=W(),i=K(!1),s=K(!0),u=K(!1),c=W(),d=W(),f=ue(e,"menu"),v=h({get:()=>f.value,set:H=>{var le;f.value&&!H&&((le=c.value)!=null&&le.ΨopenChildren)||(f.value=H)}}),m=K(-1);let g=!1;const y=h(()=>{var H;return(H=o.value)==null?void 0:H.color}),b=h(()=>v.value?e.closeText:e.openText),{items:p,transformIn:S,transformOut:C}=to(e),{textColorClasses:_,textColorStyles:V}=Ge(y),x=ue(e,"modelValue",[],H=>S(et(H)),H=>{const le=C(H);return e.multiple?le:le[0]??null}),T=xl(),w=K(e.multiple?"":((Q=x.value[0])==null?void 0:Q.title)??""),k=h({get:()=>w.value,set:H=>{var le;if(w.value=H,e.multiple||(x.value=[Wt(e,H)]),H&&e.multiple&&((le=e.delimiters)!=null&&le.length)){const be=H.split(new RegExp(`(?:${e.delimiters.join("|")})+`));be.length>1&&(be.forEach(de=>{de=de.trim(),de&&ve(Wt(e,de))}),w.value="")}H||(m.value=-1),s.value=!H}});Z(w,H=>{g?xe(()=>g=!1):i.value&&!v.value&&(v.value=!0),n("update:search",H)}),Z(x,H=>{var le;e.multiple||(w.value=((le=H[0])==null?void 0:le.title)??"")});const{filteredItems:I,getMatches:A}=Hs(e,p,()=>s.value?"":k.value),B=h(()=>e.hideSelected?I.value.filter(H=>!x.value.some(le=>le.value===H.value)):I.value),E=h(()=>x.value.map(H=>H.value)),F=h(()=>{var le;return(e.autoSelectFirst===!0||e.autoSelectFirst==="exact"&&k.value===((le=B.value[0])==null?void 0:le.title))&&B.value.length>0&&!s.value&&!u.value}),X=h(()=>e.hideNoData&&!p.value.length||e.readonly||(T==null?void 0:T.isReadonly.value)),$=W(),{onListScroll:N,onListKeydown:M}=ao($,o);function G(H){g=!0,e.openOnClear&&(v.value=!0)}function U(){X.value||(v.value=!0)}function z(H){X.value||(i.value&&(H.preventDefault(),H.stopPropagation()),v.value=!v.value)}function ae(H){var de;if(e.readonly||T!=null&&T.isReadonly.value)return;const le=o.value.selectionStart,be=x.value.length;if((m.value>-1||["Enter","ArrowDown","ArrowUp"].includes(H.key))&&H.preventDefault(),["Enter","ArrowDown"].includes(H.key)&&(v.value=!0),["Escape"].includes(H.key)&&(v.value=!1),["Enter","Escape","Tab"].includes(H.key)&&(F.value&&["Enter","Tab"].includes(H.key)&&ve(I.value[0]),s.value=!0),H.key==="ArrowDown"&&F.value&&((de=$.value)==null||de.focus("next")),!!e.multiple){if(["Backspace","Delete"].includes(H.key)){if(m.value<0){H.key==="Backspace"&&!k.value&&(m.value=be-1);return}const ie=m.value,fe=x.value[m.value];fe&&!fe.props.disabled&&ve(fe),m.value=ie>=be-1?be-2:ie}if(H.key==="ArrowLeft"){if(m.value<0&&le>0)return;const ie=m.value>-1?m.value-1:be-1;x.value[ie]?m.value=ie:(m.value=-1,o.value.setSelectionRange(k.value.length,k.value.length))}if(H.key==="ArrowRight"){if(m.value<0)return;const ie=m.value+1;x.value[ie]?m.value=ie:(m.value=-1,o.value.setSelectionRange(0,0))}H.key==="Enter"&&k.value&&(ve(Wt(e,k.value)),k.value="")}}function re(){var H;i.value&&(s.value=!0,(H=o.value)==null||H.focus())}function ve(H){if(e.multiple){const le=x.value.findIndex(be=>e.valueComparator(be.value,H.value));if(le===-1)x.value=[...x.value,H];else{const be=[...x.value];be.splice(le,1),x.value=be}k.value=""}else x.value=[H],w.value=H.title,xe(()=>{v.value=!1,s.value=!0})}function ge(H){i.value=!0,setTimeout(()=>{u.value=!0})}function D(H){u.value=!1}function me(H){(H==null||H===""&&!e.multiple)&&(x.value=[])}return Z(I,H=>{!H.length&&e.hideNoData&&(v.value=!1)}),Z(i,(H,le)=>{H||H===le||(m.value=-1,v.value=!1,F.value&&!u.value&&!x.value.some(be=>{let{value:de}=be;return de===B.value[0].value})?ve(B.value[0]):e.multiple&&k.value&&(x.value=[...x.value,Wt(e,k.value)],k.value=""))}),Z(v,()=>{if(!e.hideSelected&&v.value&&x.value.length){const H=B.value.findIndex(le=>x.value.some(be=>e.valueComparator(be.value,le.value)));Ce&&window.requestAnimationFrame(()=>{var le;H>=0&&((le=d.value)==null||le.scrollToIndex(H))})}}),j(()=>{const H=!!(e.chips||l.chip),le=!!(!e.hideNoData||B.value.length||l["prepend-item"]||l["append-item"]||l["no-data"]),be=x.value.length>0,[de]=Jt.filterProps(e);return r(Jt,Y({ref:o},de,{modelValue:k.value,"onUpdate:modelValue":[ie=>k.value=ie,me],focused:i.value,"onUpdate:focused":ie=>i.value=ie,validationValue:x.externalValue,counterValue:e.multiple?x.value.length:k.value.length,dirty:be,class:["v-combobox",{"v-combobox--active-menu":v.value,"v-combobox--chips":!!e.chips,"v-combobox--selection-slot":!!l.selection,"v-combobox--selecting-index":m.value>-1,[`v-combobox--${e.multiple?"multiple":"single"}`]:!0},e.class],style:e.style,readonly:e.readonly,placeholder:be?void 0:e.placeholder,"onClick:clear":G,"onMousedown:control":U,onKeydown:ae}),{...l,default:()=>r(oe,null,[r(Il,Y({ref:c,modelValue:v.value,"onUpdate:modelValue":ie=>v.value=ie,activator:"parent",contentClass:"v-combobox__content",disabled:X.value,eager:e.eager,maxHeight:310,openOnClick:!1,closeOnContentClick:!1,transition:e.transition,onAfterLeave:re},e.menuProps),{default:()=>[le&&r(Vl,{ref:$,selected:E.value,selectStrategy:e.multiple?"independent":"single-independent",onMousedown:ie=>ie.preventDefault(),onKeydown:M,onFocusin:ge,onFocusout:D,onScrollPassive:N,tabindex:"-1",color:e.itemColor??e.color},{default:()=>{var ie,fe,Te;return[(ie=l["prepend-item"])==null?void 0:ie.call(l),!B.value.length&&!e.hideNoData&&(((fe=l["no-data"])==null?void 0:fe.call(l))??r(_t,{title:a(e.noDataText)},null)),r(Bl,{ref:d,renderless:!0,items:B.value},{default:Re=>{var zt;let{item:_e,index:qe,itemRef:Zn}=Re;const Tn=Y(_e.props,{ref:Zn,key:qe,active:F.value&&qe===0?!0:void 0,onClick:()=>ve(_e)});return((zt=l.item)==null?void 0:zt.call(l,{item:_e,index:qe,props:Tn}))??r(_t,Tn,{prepend:Ct=>{let{isSelected:Jn}=Ct;return r(oe,null,[e.multiple&&!e.hideSelected?r(gn,{key:_e.value,modelValue:Jn,ripple:!1,tabindex:"-1"},null):void 0,_e.props.prependIcon&&r(Se,{icon:_e.props.prependIcon},null)])},title:()=>{var Ct,Jn;return s.value?_e.title:sb(_e.title,(Ct=A(_e))==null?void 0:Ct.title,((Jn=k.value)==null?void 0:Jn.length)??0)}})}}),(Te=l["append-item"])==null?void 0:Te.call(l)]}})]}),x.value.map((ie,fe)=>{var _e;function Te(qe){qe.stopPropagation(),qe.preventDefault(),ve(ie)}const Re={"onClick:close":Te,onMousedown(qe){qe.preventDefault(),qe.stopPropagation()},modelValue:!0,"onUpdate:modelValue":void 0};return r("div",{key:ie.value,class:["v-combobox__selection",fe===m.value&&["v-combobox__selection--selected",_.value]],style:fe===m.value?V.value:{}},[H?l.chip?r(pe,{key:"chip-defaults",defaults:{VChip:{closable:e.closableChips,size:"small",text:ie.title}}},{default:()=>{var qe;return[(qe=l.chip)==null?void 0:qe.call(l,{item:ie,index:fe,props:Re})]}}):r(Yn,Y({key:"chip",closable:e.closableChips,size:"small",text:ie.title,disabled:ie.props.disabled},Re),null):((_e=l.selection)==null?void 0:_e.call(l,{item:ie,index:fe}))??r("span",{class:"v-combobox__selection-text"},[ie.title,e.multiple&&fe<x.value.length-1&&r("span",{class:"v-combobox__selection-comma"},[Rt(",")])])])})]),"append-inner":function(){var Re;for(var ie=arguments.length,fe=new Array(ie),Te=0;Te<ie;Te++)fe[Te]=arguments[Te];return r(oe,null,[(Re=l["append-inner"])==null?void 0:Re.call(l,...fe),(!e.hideNoData||e.items.length)&&e.menuIcon?r(Se,{class:"v-combobox__menu-icon",icon:e.menuIcon,onMousedown:z,onClick:Si,"aria-label":a(b.value),title:a(b.value)},null):void 0])}})}),pt({isFocused:i,isPristine:s,menu:v,search:k,selectionIndex:m,filteredItems:I,select:ve},o)}});const cb=R({fullscreen:Boolean,retainFocus:{type:Boolean,default:!0},scrollable:Boolean,...Kn({origin:"center center",scrollStrategy:"block",transition:{component:pl},zIndex:2400})},"VDialog"),db=L()({name:"VDialog",props:cb(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{scopeId:a}=In(),o=W();function i(u){var f,v;const c=u.relatedTarget,d=u.target;if(c!==d&&((f=o.value)!=null&&f.contentEl)&&((v=o.value)!=null&&v.globalTop)&&![document,o.value.contentEl].includes(d)&&!o.value.contentEl.contains(d)){const m=$n(o.value.contentEl);if(!m.length)return;const g=m[0],y=m[m.length-1];c===g?y.focus():g.focus()}}Ce&&Z(()=>l.value&&e.retainFocus,u=>{u?document.addEventListener("focusin",i):document.removeEventListener("focusin",i)},{immediate:!0}),Z(l,async u=>{var c,d;await xe(),u?(c=o.value.contentEl)==null||c.focus({preventScroll:!0}):(d=o.value.activatorEl)==null||d.focus({preventScroll:!0})});const s=h(()=>Y({"aria-haspopup":"dialog","aria-expanded":String(l.value)},e.activatorProps));return j(()=>{const[u]=It.filterProps(e);return r(It,Y({ref:o,class:["v-dialog",{"v-dialog--fullscreen":e.fullscreen,"v-dialog--scrollable":e.scrollable},e.class],style:e.style},u,{modelValue:l.value,"onUpdate:modelValue":c=>l.value=c,"aria-modal":"true",activatorProps:s.value,role:"dialog"},a),{activator:n.activator,default:function(){for(var c=arguments.length,d=new Array(c),f=0;f<c;f++)d[f]=arguments[f];return r(pe,{root:"VDialog"},{default:()=>{var v;return[(v=n.default)==null?void 0:v.call(n,...d)]}})}})}),pt({},o)}});const zn=Symbol.for("vuetify:v-expansion-panel"),vb=["default","accordion","inset","popout"],fb=R({color:String,variant:{type:String,default:"default",validator:e=>vb.includes(e)},readonly:Boolean,...q(),...kn(),...ce(),...he()},"VExpansionPanels"),mb=L()({name:"VExpansionPanels",props:fb(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;on(e,zn);const{themeClasses:l}=ye(e),a=h(()=>e.variant&&`v-expansion-panels--variant-${e.variant}`);return Ee({VExpansionPanel:{color:O(e,"color")},VExpansionPanelTitle:{readonly:O(e,"readonly")}}),j(()=>r(e.tag,{class:["v-expansion-panels",l.value,a.value,e.class],style:e.style},n)),{}}}),gb=R({...q(),..._l()},"VExpansionPanelText"),rr=L()({name:"VExpansionPanelText",props:gb(),setup(e,t){let{slots:n}=t;const l=Ve(zn);if(!l)throw new Error("[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel");const{hasContent:a,onAfterLeave:o}=no(e,l.isSelected);return j(()=>r(kl,{onAfterLeave:o},{default:()=>{var i;return[ne(r("div",{class:["v-expansion-panel-text",e.class],style:e.style},[n.default&&a.value&&r("div",{class:"v-expansion-panel-text__wrapper"},[(i=n.default)==null?void 0:i.call(n)])]),[[Pe,l.isSelected.value]])]}})),{}}}),ur=R({color:String,expandIcon:{type:se,default:"$expand"},collapseIcon:{type:se,default:"$collapse"},hideActions:Boolean,ripple:{type:[Boolean,Object],default:!1},readonly:Boolean,...q()},"VExpansionPanelTitle"),cr=L()({name:"VExpansionPanelTitle",directives:{Ripple:Dt},props:ur(),setup(e,t){let{slots:n}=t;const l=Ve(zn);if(!l)throw new Error("[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel");const{backgroundColorClasses:a,backgroundColorStyles:o}=Be(e,"color"),i=h(()=>({collapseIcon:e.collapseIcon,disabled:l.disabled.value,expanded:l.isSelected.value,expandIcon:e.expandIcon,readonly:e.readonly}));return j(()=>{var s;return ne(r("button",{class:["v-expansion-panel-title",{"v-expansion-panel-title--active":l.isSelected.value},a.value,e.class],style:[o.value,e.style],type:"button",tabindex:l.disabled.value?-1:void 0,disabled:l.disabled.value,"aria-expanded":l.isSelected.value,onClick:e.readonly?void 0:l.toggle},[r("span",{class:"v-expansion-panel-title__overlay"},null),(s=n.default)==null?void 0:s.call(n,i.value),!e.hideActions&&r("span",{class:"v-expansion-panel-title__icon"},[n.actions?n.actions(i.value):r(Se,{icon:l.isSelected.value?e.collapseIcon:e.expandIcon},null)])]),[[Ze("ripple"),e.ripple]])}),{}}}),hb=R({title:String,text:String,bgColor:String,...q(),...Me(),...Sn(),..._l(),...Ie(),...ce(),...ur()},"VExpansionPanel"),yb=L()({name:"VExpansionPanel",props:hb(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const l=wn(e,zn),{backgroundColorClasses:a,backgroundColorStyles:o}=Be(e,"bgColor"),{elevationClasses:i}=He(e),{roundedClasses:s}=Ae(e),u=h(()=>(l==null?void 0:l.disabled.value)||e.disabled),c=h(()=>l.group.items.value.reduce((v,m,g)=>(l.group.selected.value.includes(m.id)&&v.push(g),v),[])),d=h(()=>{const v=l.group.items.value.findIndex(m=>m.id===l.id);return!l.isSelected.value&&c.value.some(m=>m-v===1)}),f=h(()=>{const v=l.group.items.value.findIndex(m=>m.id===l.id);return!l.isSelected.value&&c.value.some(m=>m-v===-1)});return $e(zn,l),Ee({VExpansionPanelText:{eager:O(e,"eager")}}),j(()=>{const v=!!(n.text||e.text),m=!!(n.title||e.title);return r(e.tag,{class:["v-expansion-panel",{"v-expansion-panel--active":l.isSelected.value,"v-expansion-panel--before-active":d.value,"v-expansion-panel--after-active":f.value,"v-expansion-panel--disabled":u.value},s.value,a.value,e.class],style:[o.value,e.style]},{default:()=>{var g;return[r("div",{class:["v-expansion-panel__shadow",...i.value]},null),m&&r(cr,{key:"title",collapseIcon:e.collapseIcon,color:e.color,expandIcon:e.expandIcon,hideActions:e.hideActions,ripple:e.ripple},{default:()=>[n.title?n.title():e.title]}),v&&r(rr,{key:"text"},{default:()=>[n.text?n.text():e.text]}),(g=n.default)==null?void 0:g.call(n)]}})}),{}}});const bb=R({chips:Boolean,counter:Boolean,counterSizeString:{type:String,default:"$vuetify.fileInput.counterSize"},counterString:{type:String,default:"$vuetify.fileInput.counter"},multiple:Boolean,showSize:{type:[Boolean,Number],default:!1,validator:e=>typeof e=="boolean"||[1e3,1024].includes(e)},...Bt({prependIcon:"$file"}),modelValue:{type:Array,default:()=>[],validator:e=>et(e).every(t=>t!=null&&typeof t=="object")},...Pl({clearable:!0})},"VFileInput"),pb=L()({name:"VFileInput",inheritAttrs:!1,props:bb(),emits:{"click:control":e=>!0,"mousedown:control":e=>!0,"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{t:o}=ct(),i=ue(e,"modelValue"),{isFocused:s,focus:u,blur:c}=Nt(e),d=h(()=>typeof e.showSize!="boolean"?e.showSize:void 0),f=h(()=>(i.value??[]).reduce((k,I)=>{let{size:A=0}=I;return k+A},0)),v=h(()=>yo(f.value,d.value)),m=h(()=>(i.value??[]).map(k=>{const{name:I="",size:A=0}=k;return e.showSize?`${I} (${yo(A,d.value)})`:I})),g=h(()=>{var I;const k=((I=i.value)==null?void 0:I.length)??0;return e.showSize?o(e.counterSizeString,k,v.value):o(e.counterString,k)}),y=W(),b=W(),p=W(),S=h(()=>s.value||e.active),C=h(()=>["plain","underlined"].includes(e.variant));function _(){var k;p.value!==document.activeElement&&((k=p.value)==null||k.focus()),s.value||u()}function V(k){T(k)}function x(k){l("mousedown:control",k)}function T(k){var I;(I=p.value)==null||I.click(),l("click:control",k)}function w(k){k.stopPropagation(),_(),xe(()=>{i.value=[],Ra(e["onClick:clear"],k)})}return Z(i,k=>{(!Array.isArray(k)||!k.length)&&p.value&&(p.value.value="")}),j(()=>{const k=!!(a.counter||e.counter),I=!!(k||a.details),[A,B]=en(n),[{modelValue:E,...F}]=Ne.filterProps(e),[X]=lo(e);return r(Ne,Y({ref:y,modelValue:i.value,"onUpdate:modelValue":$=>i.value=$,class:["v-file-input",{"v-text-field--plain-underlined":C.value},e.class],style:e.style,"onClick:prepend":V},A,F,{centerAffix:!C.value,focused:s.value}),{...a,default:$=>{let{id:N,isDisabled:M,isDirty:G,isReadonly:U,isValid:z}=$;return r(qn,Y({ref:b,"prepend-icon":e.prependIcon,onMousedown:x,onClick:T,"onClick:clear":w,"onClick:prependInner":e["onClick:prependInner"],"onClick:appendInner":e["onClick:appendInner"]},X,{id:N.value,active:S.value||G.value,dirty:G.value,disabled:M.value,focused:s.value,error:z.value===!1}),{...a,default:ae=>{var ge;let{props:{class:re,...ve}}=ae;return r(oe,null,[r("input",Y({ref:p,type:"file",readonly:U.value,disabled:M.value,multiple:e.multiple,name:e.name,onClick:D=>{D.stopPropagation(),U.value&&D.preventDefault(),_()},onChange:D=>{if(!D.target)return;const me=D.target;i.value=[...me.files??[]]},onFocus:_,onBlur:c},ve,B),null),r("div",{class:re},[!!((ge=i.value)!=null&&ge.length)&&(a.selection?a.selection({fileNames:m.value,totalBytes:f.value,totalBytesReadable:v.value}):e.chips?m.value.map(D=>r(Yn,{key:D,size:"small",color:e.color},{default:()=>[D]})):m.value.join(", "))])])}})},details:I?$=>{var N,M;return r(oe,null,[(N=a.details)==null?void 0:N.call(a,$),k&&r(oe,null,[r("span",null,null),r(Tl,{active:!!((M=i.value)!=null&&M.length),value:g.value},a.counter)])])}:void 0})}),pt({},y,b,p)}});const kb=R({app:Boolean,color:String,height:{type:[Number,String],default:"auto"},...at(),...q(),...Me(),...bn(),...Ie(),...ce({tag:"footer"}),...he()},"VFooter"),Sb=L()({name:"VFooter",props:kb(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{backgroundColorClasses:a,backgroundColorStyles:o}=Be(O(e,"color")),{borderClasses:i}=ft(e),{elevationClasses:s}=He(e),{roundedClasses:u}=Ae(e),c=K(32),{resizeRef:d}=wt(m=>{m.length&&(c.value=m[0].target.clientHeight)}),f=h(()=>e.height==="auto"?c.value:parseInt(e.height,10)),{layoutItemStyles:v}=pn({id:e.name,order:h(()=>parseInt(e.order,10)),position:h(()=>"bottom"),layoutSize:f,elementSize:h(()=>e.height==="auto"?void 0:f.value),active:h(()=>e.app),absolute:O(e,"absolute")});return j(()=>r(e.tag,{ref:d,class:["v-footer",l.value,a.value,i.value,s.value,u.value,e.class],style:[o.value,e.app?v.value:{height:J(e.height)},e.style]},n)),{}}}),wb=R({...q(),...Eg()},"VForm"),Cb=L()({name:"VForm",props:wb(),emits:{"update:modelValue":e=>!0,submit:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=Lg(e),o=W();function i(u){u.preventDefault(),a.reset()}function s(u){const c=u,d=a.validate();c.then=d.then.bind(d),c.catch=d.catch.bind(d),c.finally=d.finally.bind(d),l("submit",c),c.defaultPrevented||d.then(f=>{var m;let{valid:v}=f;v&&((m=o.value)==null||m.submit())}),c.preventDefault()}return j(()=>{var u;return r("form",{ref:o,class:["v-form",e.class],style:e.style,novalidate:!0,onReset:i,onSubmit:s},[(u=n.default)==null?void 0:u.call(n,a)])}),pt(a,o)}});const xb=R({fluid:{type:Boolean,default:!1},...q(),...ce()},"VContainer"),Vb=L()({name:"VContainer",props:xb(),setup(e,t){let{slots:n}=t;const{rtlClasses:l}=De();return j(()=>r(e.tag,{class:["v-container",{"v-container--fluid":e.fluid},l.value,e.class],style:e.style},n)),{}}}),dr=(()=>yl.reduce((e,t)=>(e[t]={type:[Boolean,String,Number],default:!1},e),{}))(),vr=(()=>yl.reduce((e,t)=>{const n="offset"+Hn(t);return e[n]={type:[String,Number],default:null},e},{}))(),fr=(()=>yl.reduce((e,t)=>{const n="order"+Hn(t);return e[n]={type:[String,Number],default:null},e},{}))(),ni={col:Object.keys(dr),offset:Object.keys(vr),order:Object.keys(fr)};function _b(e,t,n){let l=e;if(!(n==null||n===!1)){if(t){const a=t.replace(e,"");l+=`-${a}`}return e==="col"&&(l="v-"+l),e==="col"&&(n===""||n===!0)||(l+=`-${n}`),l.toLowerCase()}}const Ib=["auto","start","end","center","baseline","stretch"],Tb=R({cols:{type:[Boolean,String,Number],default:!1},...dr,offset:{type:[String,Number],default:null},...vr,order:{type:[String,Number],default:null},...fr,alignSelf:{type:String,default:null,validator:e=>Ib.includes(e)},...q(),...ce()},"VCol"),Pb=L()({name:"VCol",props:Tb(),setup(e,t){let{slots:n}=t;const l=h(()=>{const a=[];let o;for(o in ni)ni[o].forEach(s=>{const u=e[s],c=_b(o,s,u);c&&a.push(c)});const i=a.some(s=>s.startsWith("v-col-"));return a.push({"v-col":!i||!e.cols,[`v-col-${e.cols}`]:e.cols,[`offset-${e.offset}`]:e.offset,[`order-${e.order}`]:e.order,[`align-self-${e.alignSelf}`]:e.alignSelf}),a});return()=>{var a;return Qt(e.tag,{class:[l.value,e.class],style:e.style},(a=n.default)==null?void 0:a.call(n))}}}),ro=["start","end","center"],mr=["space-between","space-around","space-evenly"];function uo(e,t){return yl.reduce((n,l)=>{const a=e+Hn(l);return n[a]=t(),n},{})}const Ab=[...ro,"baseline","stretch"],gr=e=>Ab.includes(e),hr=uo("align",()=>({type:String,default:null,validator:gr})),Bb=[...ro,...mr],yr=e=>Bb.includes(e),br=uo("justify",()=>({type:String,default:null,validator:yr})),Rb=[...ro,...mr,"stretch"],pr=e=>Rb.includes(e),kr=uo("alignContent",()=>({type:String,default:null,validator:pr})),li={align:Object.keys(hr),justify:Object.keys(br),alignContent:Object.keys(kr)},Eb={align:"align",justify:"justify",alignContent:"align-content"};function Lb(e,t,n){let l=Eb[e];if(n!=null){if(t){const a=t.replace(e,"");l+=`-${a}`}return l+=`-${n}`,l.toLowerCase()}}const $b=R({dense:Boolean,noGutters:Boolean,align:{type:String,default:null,validator:gr},...hr,justify:{type:String,default:null,validator:yr},...br,alignContent:{type:String,default:null,validator:pr},...kr,...q(),...ce()},"VRow"),Mb=L()({name:"VRow",props:$b(),setup(e,t){let{slots:n}=t;const l=h(()=>{const a=[];let o;for(o in li)li[o].forEach(i=>{const s=e[i],u=Lb(o,i,s);u&&a.push(u)});return a.push({"v-row--no-gutters":e.noGutters,"v-row--dense":e.dense,[`align-${e.align}`]:e.align,[`justify-${e.justify}`]:e.justify,[`align-content-${e.alignContent}`]:e.alignContent}),a});return()=>{var a;return Qt(e.tag,{class:["v-row",l.value,e.class],style:e.style},(a=n.default)==null?void 0:a.call(n))}}}),Fb=bt("v-spacer","div","VSpacer"),Ob=R({disabled:Boolean,modelValue:{type:Boolean,default:void 0},...$s()},"VHover"),Db=L()({name:"VHover",props:Ob(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{runOpenDelay:a,runCloseDelay:o}=Ms(e,i=>!e.disabled&&(l.value=i));return()=>{var i;return(i=n.default)==null?void 0:i.call(n,{isHovering:l.value,props:{onMouseenter:a,onMouseleave:o}})}}});const Sr=Symbol.for("vuetify:v-item-group"),Nb=R({...q(),...kn({selectedClass:"v-item--selected"}),...ce(),...he()},"VItemGroup"),zb=L()({name:"VItemGroup",props:Nb(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{isSelected:a,select:o,next:i,prev:s,selected:u}=on(e,Sr);return()=>r(e.tag,{class:["v-item-group",l.value,e.class],style:e.style},{default:()=>{var c;return[(c=n.default)==null?void 0:c.call(n,{isSelected:a,select:o,next:i,prev:s,selected:u.value})]}})}}),Hb=L()({name:"VItem",props:Sn(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const{isSelected:l,select:a,toggle:o,selectedClass:i,value:s,disabled:u}=wn(e,Sr);return()=>{var c;return(c=n.default)==null?void 0:c.call(n,{isSelected:l.value,selectedClass:i.value,select:a,toggle:o,value:s.value,disabled:u.value})}}});const jb=bt("v-kbd");const Ub=R({...q(),...Hi()},"VLayout"),Gb=L()({name:"VLayout",props:Ub(),setup(e,t){let{slots:n}=t;const{layoutClasses:l,layoutStyles:a,getLayoutItem:o,items:i,layoutRef:s}=ji(e);return j(()=>{var u;return r("div",{ref:s,class:[l.value,e.class],style:[a.value,e.style]},[(u=n.default)==null?void 0:u.call(n)])}),{getLayoutItem:o,items:i}}});const Wb=R({position:{type:String,required:!0},size:{type:[Number,String],default:300},modelValue:Boolean,...q(),...bn()},"VLayoutItem"),Yb=L()({name:"VLayoutItem",props:Wb(),setup(e,t){let{slots:n}=t;const{layoutItemStyles:l}=pn({id:e.name,order:h(()=>parseInt(e.order,10)),position:O(e,"position"),elementSize:O(e,"size"),layoutSize:O(e,"size"),active:O(e,"modelValue"),absolute:O(e,"absolute")});return()=>{var a;return r("div",{class:["v-layout-item",e.class],style:[l.value,e.style]},[(a=n.default)==null?void 0:a.call(n)])}}}),Kb=R({modelValue:Boolean,options:{type:Object,default:()=>({root:void 0,rootMargin:void 0,threshold:void 0})},...q(),...dt(),...ce(),...Pt({transition:"fade-transition"})},"VLazy"),qb=L()({name:"VLazy",directives:{intersect:Un},props:Kb(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{dimensionStyles:l}=vt(e),a=ue(e,"modelValue");function o(i){a.value||(a.value=i)}return j(()=>ne(r(e.tag,{class:["v-lazy",e.class],style:[l.value,e.style]},{default:()=>[a.value&&r(ht,{transition:e.transition,appear:!0},{default:()=>{var i;return[(i=n.default)==null?void 0:i.call(n)]}})]}),[[Ze("intersect"),{handler:o,options:e.options},null]])),{}}});const Xb=R({locale:String,fallbackLocale:String,messages:Object,rtl:{type:Boolean,default:void 0},...q()},"VLocaleProvider"),Zb=L()({name:"VLocaleProvider",props:Xb(),setup(e,t){let{slots:n}=t;const{rtlClasses:l}=im(e);return j(()=>{var a;return r("div",{class:["v-locale-provider",l.value,e.class],style:e.style},[(a=n.default)==null?void 0:a.call(n)])}),{}}});const Jb=R({scrollable:Boolean,...q(),...ce({tag:"main"})},"VMain"),Qb=L()({name:"VMain",props:Jb(),setup(e,t){let{slots:n}=t;const{mainStyles:l}=Lm(),{ssrBootStyles:a}=nn();return j(()=>r(e.tag,{class:["v-main",{"v-main--scrollable":e.scrollable},e.class],style:[l.value,a.value,e.style]},{default:()=>{var o,i;return[e.scrollable?r("div",{class:"v-main__scroller"},[(o=n.default)==null?void 0:o.call(n)]):(i=n.default)==null?void 0:i.call(n)]}})),{}}});function ep(e){let{rootEl:t,isSticky:n,layoutItemStyles:l}=e;const a=K(!1),o=K(0),i=h(()=>{const c=typeof a.value=="boolean"?"top":a.value;return[n.value?{top:"auto",bottom:"auto",height:void 0}:void 0,a.value?{[c]:J(o.value)}:{top:l.value.top}]});Je(()=>{Z(n,c=>{c?window.addEventListener("scroll",u,{passive:!0}):window.removeEventListener("scroll",u)},{immediate:!0})}),nt(()=>{window.removeEventListener("scroll",u)});let s=0;function u(){const c=s>window.scrollY?"up":"down",d=t.value.getBoundingClientRect(),f=parseFloat(l.value.top??0),v=window.scrollY-Math.max(0,o.value-f),m=d.height+Math.max(o.value,f)-window.scrollY-window.innerHeight,g=parseFloat(getComputedStyle(t.value).getPropertyValue("--v-body-scroll-y"))||0;d.height<window.innerHeight-f?(a.value="top",o.value=f):c==="up"&&a.value==="bottom"||c==="down"&&a.value==="top"?(o.value=window.scrollY+d.top-g,a.value=!0):c==="down"&&m<=0?(o.value=0,a.value="bottom"):c==="up"&&v<=0&&(g?a.value!=="top"&&(o.value=-v+g+f,a.value="top"):(o.value=d.top+v,a.value="top")),s=window.scrollY}return{isStuck:a,stickyStyles:i}}const tp=100,np=20;function ai(e){const t=1.41421356237;return(e<0?-1:1)*Math.sqrt(Math.abs(e))*t}function oi(e){if(e.length<2)return 0;if(e.length===2)return e[1].t===e[0].t?0:(e[1].d-e[0].d)/(e[1].t-e[0].t);let t=0;for(let n=e.length-1;n>0;n--){if(e[n].t===e[n-1].t)continue;const l=ai(t),a=(e[n].d-e[n-1].d)/(e[n].t-e[n-1].t);t+=(a-l)*Math.abs(a),n===e.length-1&&(t*=.5)}return ai(t)*1e3}function lp(){const e={};function t(a){Array.from(a.changedTouches).forEach(o=>{(e[o.identifier]??(e[o.identifier]=new mf(np))).push([a.timeStamp,o])})}function n(a){Array.from(a.changedTouches).forEach(o=>{delete e[o.identifier]})}function l(a){var c;const o=(c=e[a])==null?void 0:c.values().reverse();if(!o)throw new Error(`No samples for touch id ${a}`);const i=o[0],s=[],u=[];for(const d of o){if(i[0]-d[0]>tp)break;s.push({t:d[0],d:d[1].clientX}),u.push({t:d[0],d:d[1].clientY})}return{x:oi(s),y:oi(u),get direction(){const{x:d,y:f}=this,[v,m]=[Math.abs(d),Math.abs(f)];return v>m&&d>=0?"right":v>m&&d<=0?"left":m>v&&f>=0?"down":m>v&&f<=0?"up":ap()}}}return{addMovement:t,endTouch:n,getVelocity:l}}function ap(){throw new Error}function op(e){let{isActive:t,isTemporary:n,width:l,touchless:a,position:o}=e;Je(()=>{window.addEventListener("touchstart",p,{passive:!0}),window.addEventListener("touchmove",S,{passive:!1}),window.addEventListener("touchend",C,{passive:!0})}),nt(()=>{window.removeEventListener("touchstart",p),window.removeEventListener("touchmove",S),window.removeEventListener("touchend",C)});const i=h(()=>["left","right"].includes(o.value)),{addMovement:s,endTouch:u,getVelocity:c}=lp();let d=!1;const f=K(!1),v=K(0),m=K(0);let g;function y(V,x){return(o.value==="left"?V:o.value==="right"?document.documentElement.clientWidth-V:o.value==="top"?V:o.value==="bottom"?document.documentElement.clientHeight-V:cn())-(x?l.value:0)}function b(V){let x=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;const T=o.value==="left"?(V-m.value)/l.value:o.value==="right"?(document.documentElement.clientWidth-V-m.value)/l.value:o.value==="top"?(V-m.value)/l.value:o.value==="bottom"?(document.documentElement.clientHeight-V-m.value)/l.value:cn();return x?Math.max(0,Math.min(1,T)):T}function p(V){if(a.value)return;const x=V.changedTouches[0].clientX,T=V.changedTouches[0].clientY,w=25,k=o.value==="left"?x<w:o.value==="right"?x>document.documentElement.clientWidth-w:o.value==="top"?T<w:o.value==="bottom"?T>document.documentElement.clientHeight-w:cn(),I=t.value&&(o.value==="left"?x<l.value:o.value==="right"?x>document.documentElement.clientWidth-l.value:o.value==="top"?T<l.value:o.value==="bottom"?T>document.documentElement.clientHeight-l.value:cn());(k||I||t.value&&n.value)&&(d=!0,g=[x,T],m.value=y(i.value?x:T,t.value),v.value=b(i.value?x:T),u(V),s(V))}function S(V){const x=V.changedTouches[0].clientX,T=V.changedTouches[0].clientY;if(d){if(!V.cancelable){d=!1;return}const k=Math.abs(x-g[0]),I=Math.abs(T-g[1]);(i.value?k>I&&k>3:I>k&&I>3)?(f.value=!0,d=!1):(i.value?I:k)>3&&(d=!1)}if(!f.value)return;V.preventDefault(),s(V);const w=b(i.value?x:T,!1);v.value=Math.max(0,Math.min(1,w)),w>1?m.value=y(i.value?x:T,!0):w<0&&(m.value=y(i.value?x:T,!1))}function C(V){if(d=!1,!f.value)return;s(V),f.value=!1;const x=c(V.changedTouches[0].identifier),T=Math.abs(x.x),w=Math.abs(x.y);(i.value?T>w&&T>400:w>T&&w>3)?t.value=x.direction===({left:"right",right:"left",top:"down",bottom:"up"}[o.value]||cn()):t.value=v.value>.5}const _=h(()=>f.value?{transform:o.value==="left"?`translateX(calc(-100% + ${v.value*l.value}px))`:o.value==="right"?`translateX(calc(100% - ${v.value*l.value}px))`:o.value==="top"?`translateY(calc(-100% + ${v.value*l.value}px))`:o.value==="bottom"?`translateY(calc(100% - ${v.value*l.value}px))`:cn(),transition:"none"}:void 0);return{isDragging:f,dragProgress:v,dragStyles:_}}function cn(){throw new Error}const ip=["start","end","left","right","top","bottom"],sp=R({color:String,disableResizeWatcher:Boolean,disableRouteWatcher:Boolean,expandOnHover:Boolean,floating:Boolean,modelValue:{type:Boolean,default:null},permanent:Boolean,rail:{type:Boolean,default:null},railWidth:{type:[Number,String],default:56},scrim:{type:[Boolean,String],default:!0},image:String,temporary:Boolean,touchless:Boolean,width:{type:[Number,String],default:256},location:{type:String,default:"start",validator:e=>ip.includes(e)},sticky:Boolean,...at(),...q(),...Me(),...bn(),...Ie(),...ce({tag:"nav"}),...he()},"VNavigationDrawer"),rp=L()({name:"VNavigationDrawer",props:sp(),emits:{"update:modelValue":e=>!0,"update:rail":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const{isRtl:o}=De(),{themeClasses:i}=ye(e),{borderClasses:s}=ft(e),{backgroundColorClasses:u,backgroundColorStyles:c}=Be(O(e,"color")),{elevationClasses:d}=He(e),{mobile:f}=tn(),{roundedClasses:v}=Ae(e),m=es(),g=ue(e,"modelValue",null,G=>!!G),{ssrBootStyles:y}=nn(),{scopeId:b}=In(),p=W(),S=K(!1),C=h(()=>e.rail&&e.expandOnHover&&S.value?Number(e.width):Number(e.rail?e.railWidth:e.width)),_=h(()=>Wl(e.location,o.value)),V=h(()=>!e.permanent&&(f.value||e.temporary)),x=h(()=>e.sticky&&!V.value&&_.value!=="bottom");e.expandOnHover&&e.rail!=null&&Z(S,G=>l("update:rail",!G)),e.disableResizeWatcher||Z(V,G=>!e.permanent&&xe(()=>g.value=!G)),!e.disableRouteWatcher&&m&&Z(m.currentRoute,()=>V.value&&(g.value=!1)),Z(()=>e.permanent,G=>{G&&(g.value=!0)}),xa(()=>{e.modelValue!=null||V.value||(g.value=e.permanent||!f.value)});const{isDragging:T,dragProgress:w,dragStyles:k}=op({isActive:g,isTemporary:V,width:C,touchless:O(e,"touchless"),position:_}),I=h(()=>{const G=V.value?0:e.rail&&e.expandOnHover?Number(e.railWidth):C.value;return T.value?G*w.value:G}),{layoutItemStyles:A,layoutItemScrimStyles:B}=pn({id:e.name,order:h(()=>parseInt(e.order,10)),position:_,layoutSize:I,elementSize:C,active:h(()=>g.value||T.value),disableTransitions:h(()=>T.value),absolute:h(()=>e.absolute||x.value&&typeof E.value!="string")}),{isStuck:E,stickyStyles:F}=ep({rootEl:p,isSticky:x,layoutItemStyles:A}),X=Be(h(()=>typeof e.scrim=="string"?e.scrim:null)),$=h(()=>({...T.value?{opacity:w.value*.2,transition:"none"}:void 0,...B.value}));Ee({VList:{bgColor:"transparent"}});function N(){S.value=!0}function M(){S.value=!1}return j(()=>{const G=a.image||e.image;return r(oe,null,[r(e.tag,Y({ref:p,onMouseenter:N,onMouseleave:M,class:["v-navigation-drawer",`v-navigation-drawer--${_.value}`,{"v-navigation-drawer--expand-on-hover":e.expandOnHover,"v-navigation-drawer--floating":e.floating,"v-navigation-drawer--is-hovering":S.value,"v-navigation-drawer--rail":e.rail,"v-navigation-drawer--temporary":V.value,"v-navigation-drawer--active":g.value,"v-navigation-drawer--sticky":x.value},i.value,u.value,s.value,d.value,v.value,e.class],style:[c.value,A.value,k.value,y.value,F.value,e.style]},b,n),{default:()=>{var U,z,ae,re;return[G&&r("div",{key:"image",class:"v-navigation-drawer__img"},[a.image?(U=a.image)==null?void 0:U.call(a,{image:e.image}):r("img",{src:e.image,alt:""},null)]),a.prepend&&r("div",{class:"v-navigation-drawer__prepend"},[(z=a.prepend)==null?void 0:z.call(a)]),r("div",{class:"v-navigation-drawer__content"},[(ae=a.default)==null?void 0:ae.call(a)]),a.append&&r("div",{class:"v-navigation-drawer__append"},[(re=a.append)==null?void 0:re.call(a)])]}}),r(Et,{name:"fade-transition"},{default:()=>[V.value&&(T.value||g.value)&&!!e.scrim&&r("div",Y({class:["v-navigation-drawer__scrim",X.backgroundColorClasses.value],style:[$.value,X.backgroundColorStyles.value],onClick:()=>g.value=!1},b),null)]})])}),{isStuck:E}}}),up=ut({name:"VNoSsr",setup(e,t){let{slots:n}=t;const l=Fs();return()=>{var a;return l.value&&((a=n.default)==null?void 0:a.call(n))}}});function cp(){const e=W([]);Hr(()=>e.value=[]);function t(n,l){e.value[l]=n}return{refs:e,updateRef:t}}const dp=R({activeColor:String,start:{type:[Number,String],default:1},modelValue:{type:Number,default:e=>e.start},disabled:Boolean,length:{type:[Number,String],default:1,validator:e=>e%1===0},totalVisible:[Number,String],firstIcon:{type:se,default:"$first"},prevIcon:{type:se,default:"$prev"},nextIcon:{type:se,default:"$next"},lastIcon:{type:se,default:"$last"},ariaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.root"},pageAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.page"},currentPageAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.currentPage"},firstAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.first"},previousAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.previous"},nextAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.next"},lastAriaLabel:{type:String,default:"$vuetify.pagination.ariaLabel.last"},ellipsis:{type:String,default:"..."},showFirstLastPage:Boolean,...at(),...q(),...Fe(),...Me(),...Ie(),...At(),...ce({tag:"nav"}),...he(),...mt({variant:"text"})},"VPagination"),vp=L()({name:"VPagination",props:dp(),emits:{"update:modelValue":e=>!0,first:e=>!0,prev:e=>!0,next:e=>!0,last:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=ue(e,"modelValue"),{t:o,n:i}=ct(),{isRtl:s}=De(),{themeClasses:u}=ye(e),{width:c}=tn(),d=K(-1);Ee(void 0,{scoped:!0});const{resizeRef:f}=wt(w=>{if(!w.length)return;const{target:k,contentRect:I}=w[0],A=k.querySelector(".v-pagination__list > *");if(!A)return;const B=I.width,E=A.offsetWidth+parseFloat(getComputedStyle(A).marginRight)*2;d.value=y(B,E)}),v=h(()=>parseInt(e.length,10)),m=h(()=>parseInt(e.start,10)),g=h(()=>e.totalVisible?parseInt(e.totalVisible,10):d.value>=0?d.value:y(c.value,58));function y(w,k){const I=e.showFirstLastPage?5:3;return Math.max(0,Math.floor(+((w-k*I)/k).toFixed(2)))}const b=h(()=>{if(v.value<=0||isNaN(v.value)||v.value>Number.MAX_SAFE_INTEGER)return[];if(g.value<=1)return[a.value];if(v.value<=g.value)return xt(v.value,m.value);const w=g.value%2===0,k=w?g.value/2:Math.floor(g.value/2),I=w?k:k+1,A=v.value-k;if(I-a.value>=0)return[...xt(Math.max(1,g.value-1),m.value),e.ellipsis,v.value];if(a.value-A>=(w?1:0)){const B=g.value-1,E=v.value-B+m.value;return[m.value,e.ellipsis,...xt(B,E)]}else{const B=Math.max(1,g.value-3),E=B===1?a.value:a.value-Math.ceil(B/2)+m.value;return[m.value,e.ellipsis,...xt(B,E),e.ellipsis,v.value]}});function p(w,k,I){w.preventDefault(),a.value=k,I&&l(I,k)}const{refs:S,updateRef:C}=cp();Ee({VPaginationBtn:{color:O(e,"color"),border:O(e,"border"),density:O(e,"density"),size:O(e,"size"),variant:O(e,"variant"),rounded:O(e,"rounded"),elevation:O(e,"elevation")}});const _=h(()=>b.value.map((w,k)=>{const I=A=>C(A,k);if(typeof w=="string")return{isActive:!1,key:`ellipsis-${k}`,page:w,props:{ref:I,ellipsis:!0,icon:!0,disabled:!0}};{const A=w===a.value;return{isActive:A,key:w,page:i(w),props:{ref:I,ellipsis:!1,icon:!0,disabled:!!e.disabled||+e.length<2,color:A?e.activeColor:e.color,ariaCurrent:A,ariaLabel:o(A?e.currentPageAriaLabel:e.pageAriaLabel,w),onClick:B=>p(B,w)}}}})),V=h(()=>{const w=!!e.disabled||a.value<=m.value,k=!!e.disabled||a.value>=m.value+v.value-1;return{first:e.showFirstLastPage?{icon:s.value?e.lastIcon:e.firstIcon,onClick:I=>p(I,m.value,"first"),disabled:w,ariaLabel:o(e.firstAriaLabel),ariaDisabled:w}:void 0,prev:{icon:s.value?e.nextIcon:e.prevIcon,onClick:I=>p(I,a.value-1,"prev"),disabled:w,ariaLabel:o(e.previousAriaLabel),ariaDisabled:w},next:{icon:s.value?e.prevIcon:e.nextIcon,onClick:I=>p(I,a.value+1,"next"),disabled:k,ariaLabel:o(e.nextAriaLabel),ariaDisabled:k},last:e.showFirstLastPage?{icon:s.value?e.firstIcon:e.lastIcon,onClick:I=>p(I,m.value+v.value-1,"last"),disabled:k,ariaLabel:o(e.lastAriaLabel),ariaDisabled:k}:void 0}});function x(){var k;const w=a.value-m.value;(k=S.value[w])==null||k.$el.focus()}function T(w){w.key===Ul.left&&!e.disabled&&a.value>+e.start?(a.value=a.value-1,xe(x)):w.key===Ul.right&&!e.disabled&&a.value<m.value+v.value-1&&(a.value=a.value+1,xe(x))}return j(()=>r(e.tag,{ref:f,class:["v-pagination",u.value,e.class],style:e.style,role:"navigation","aria-label":o(e.ariaLabel),onKeydown:T,"data-test":"v-pagination-root"},{default:()=>[r("ul",{class:"v-pagination__list"},[e.showFirstLastPage&&r("li",{key:"first",class:"v-pagination__first","data-test":"v-pagination-first"},[n.first?n.first(V.value.first):r(Ke,Y({_as:"VPaginationBtn"},V.value.first),null)]),r("li",{key:"prev",class:"v-pagination__prev","data-test":"v-pagination-prev"},[n.prev?n.prev(V.value.prev):r(Ke,Y({_as:"VPaginationBtn"},V.value.prev),null)]),_.value.map((w,k)=>r("li",{key:w.key,class:["v-pagination__item",{"v-pagination__item--is-active":w.isActive}],"data-test":"v-pagination-item"},[n.item?n.item(w):r(Ke,Y({_as:"VPaginationBtn"},w.props),{default:()=>[w.page]})])),r("li",{key:"next",class:"v-pagination__next","data-test":"v-pagination-next"},[n.next?n.next(V.value.next):r(Ke,Y({_as:"VPaginationBtn"},V.value.next),null)]),e.showFirstLastPage&&r("li",{key:"last",class:"v-pagination__last","data-test":"v-pagination-last"},[n.last?n.last(V.value.last):r(Ke,Y({_as:"VPaginationBtn"},V.value.last),null)])])]})),{}}});function fp(e){return Math.floor(Math.abs(e))*Math.sign(e)}const mp=R({scale:{type:[Number,String],default:.5},...q()},"VParallax"),gp=L()({name:"VParallax",props:mp(),setup(e,t){let{slots:n}=t;const{intersectionRef:l,isIntersecting:a}=Ya(),{resizeRef:o,contentRect:i}=wt(),{height:s}=tn(),u=W();tt(()=>{var m;l.value=o.value=(m=u.value)==null?void 0:m.$el});let c;Z(a,m=>{m?(c=Ma(l.value),c=c===document.scrollingElement?document:c,c.addEventListener("scroll",v,{passive:!0}),v()):c.removeEventListener("scroll",v)}),nt(()=>{c==null||c.removeEventListener("scroll",v)}),Z(s,v),Z(()=>{var m;return(m=i.value)==null?void 0:m.height},v);const d=h(()=>1-Ue(+e.scale));let f=-1;function v(){a.value&&(cancelAnimationFrame(f),f=requestAnimationFrame(()=>{var V;const m=((V=u.value)==null?void 0:V.$el).querySelector(".v-img__img");if(!m)return;const g=c instanceof Document?document.documentElement.clientHeight:c.clientHeight,y=c instanceof Document?window.scrollY:c.scrollTop,b=l.value.getBoundingClientRect().top+y,p=i.value.height,S=b+(p-g)/2,C=fp((y-S)*d.value),_=Math.max(1,(d.value*(g-p)+p)/p);m.style.setProperty("transform",`translateY(${C}px) scale(${_})`)}))}return j(()=>r(Xt,{class:["v-parallax",{"v-parallax--active":a.value},e.class],style:e.style,ref:u,cover:!0,onLoadstart:v,onLoad:v},n)),{}}}),hp=R({...wl({falseIcon:"$radioOff",trueIcon:"$radioOn"})},"VRadio"),yp=L()({name:"VRadio",props:hp(),setup(e,t){let{slots:n}=t;return j(()=>r(Zt,Y(e,{class:["v-radio",e.class],style:e.style,type:"radio"}),n)),{}}});const bp=R({height:{type:[Number,String],default:"auto"},...Bt(),...rt(Qa(),["multiple"]),trueIcon:{type:se,default:"$radioOn"},falseIcon:{type:se,default:"$radioOff"},type:{type:String,default:"radio"}},"VRadioGroup"),pp=L()({name:"VRadioGroup",inheritAttrs:!1,props:bp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const a=We(),o=h(()=>e.id||`radio-group-${a}`),i=ue(e,"modelValue");return j(()=>{const[s,u]=en(n),[c,d]=Ne.filterProps(e),[f,v]=Zt.filterProps(e),m=l.label?l.label({label:e.label,props:{for:o.value}}):e.label;return r(Ne,Y({class:["v-radio-group",e.class],style:e.style},s,c,{modelValue:i.value,"onUpdate:modelValue":g=>i.value=g,id:o.value}),{...l,default:g=>{let{id:y,messagesId:b,isDisabled:p,isReadonly:S}=g;return r(oe,null,[m&&r(_n,{id:y.value},{default:()=>[m]}),r(ds,Y(f,{id:y.value,"aria-describedby":b.value,defaultsTarget:"VRadio",trueIcon:e.trueIcon,falseIcon:e.falseIcon,type:e.type,disabled:p.value,readonly:S.value,"aria-labelledby":m?y.value:void 0,multiple:!1},u,{modelValue:i.value,"onUpdate:modelValue":C=>i.value=C}),l)])}})}),{}}}),kp=R({...Cl(),...Bt(),...lr(),strict:Boolean,modelValue:{type:Array,default:()=>[0,0]}},"VRangeSlider"),Sp=L()({name:"VRangeSlider",props:kp(),emits:{"update:focused":e=>!0,"update:modelValue":e=>!0,end:e=>!0,start:e=>!0},setup(e,t){let{slots:n,emit:l}=t;const a=W(),o=W(),i=W(),{rtlClasses:s}=De();function u(k){if(!a.value||!o.value)return;const I=ma(k,a.value.$el,e.direction),A=ma(k,o.value.$el,e.direction),B=Math.abs(I),E=Math.abs(A);return B<E||B===E&&I<0?a.value.$el:o.value.$el}const c=ar(e),d=ue(e,"modelValue",void 0,k=>k!=null&&k.length?k.map(I=>c.roundValue(I)):[0,0]),{activeThumbRef:f,hasLabels:v,max:m,min:g,mousePressed:y,onSliderMousedown:b,onSliderTouchstart:p,position:S,trackContainerRef:C}=or({props:e,steps:c,onSliderStart:()=>{l("start",d.value)},onSliderEnd:k=>{var B;let{value:I}=k;const A=f.value===((B=a.value)==null?void 0:B.$el)?[I,d.value[1]]:[d.value[0],I];!e.strict&&A[0]<A[1]&&(d.value=A),l("end",d.value)},onSliderMove:k=>{var E,F,X,$;let{value:I}=k;const[A,B]=d.value;!e.strict&&A===B&&A!==g.value&&(f.value=I>A?(E=o.value)==null?void 0:E.$el:(F=a.value)==null?void 0:F.$el,(X=f.value)==null||X.focus()),f.value===(($=a.value)==null?void 0:$.$el)?d.value=[Math.min(I,B),B]:d.value=[A,Math.max(A,I)]},getActiveThumb:u}),{isFocused:_,focus:V,blur:x}=Nt(e),T=h(()=>S(d.value[0])),w=h(()=>S(d.value[1]));return j(()=>{const[k,I]=Ne.filterProps(e),A=!!(e.label||n.label||n.prepend);return r(Ne,Y({class:["v-slider","v-range-slider",{"v-slider--has-labels":!!n["tick-label"]||v.value,"v-slider--focused":_.value,"v-slider--pressed":y.value,"v-slider--disabled":e.disabled},s.value,e.class],style:e.style,ref:i},k,{focused:_.value}),{...n,prepend:A?B=>{var E,F;return r(oe,null,[((E=n.label)==null?void 0:E.call(n,B))??(e.label?r(_n,{class:"v-slider__label",text:e.label},null):void 0),(F=n.prepend)==null?void 0:F.call(n,B)])}:void 0,default:B=>{var X,$;let{id:E,messagesId:F}=B;return r("div",{class:"v-slider__container",onMousedown:b,onTouchstartPassive:p},[r("input",{id:`${E.value}_start`,name:e.name||E.value,disabled:!!e.disabled,readonly:!!e.readonly,tabindex:"-1",value:d.value[0]},null),r("input",{id:`${E.value}_stop`,name:e.name||E.value,disabled:!!e.disabled,readonly:!!e.readonly,tabindex:"-1",value:d.value[1]},null),r(ir,{ref:C,start:T.value,stop:w.value},{"tick-label":n["tick-label"]}),r(ga,{ref:a,"aria-describedby":F.value,focused:_&&f.value===((X=a.value)==null?void 0:X.$el),modelValue:d.value[0],"onUpdate:modelValue":N=>d.value=[N,d.value[1]],onFocus:N=>{var M,G,U,z;V(),f.value=(M=a.value)==null?void 0:M.$el,d.value[0]===d.value[1]&&d.value[1]===g.value&&N.relatedTarget!==((G=o.value)==null?void 0:G.$el)&&((U=a.value)==null||U.$el.blur(),(z=o.value)==null||z.$el.focus())},onBlur:()=>{x(),f.value=void 0},min:g.value,max:d.value[1],position:T.value},{"thumb-label":n["thumb-label"]}),r(ga,{ref:o,"aria-describedby":F.value,focused:_&&f.value===(($=o.value)==null?void 0:$.$el),modelValue:d.value[1],"onUpdate:modelValue":N=>d.value=[d.value[0],N],onFocus:N=>{var M,G,U,z;V(),f.value=(M=o.value)==null?void 0:M.$el,d.value[0]===d.value[1]&&d.value[0]===m.value&&N.relatedTarget!==((G=a.value)==null?void 0:G.$el)&&((U=o.value)==null||U.$el.blur(),(z=a.value)==null||z.$el.focus())},onBlur:()=>{x(),f.value=void 0},min:d.value[0],max:m.value,position:w.value},{"thumb-label":n["thumb-label"]})])}})}),{}}});const wp=R({name:String,itemAriaLabel:{type:String,default:"$vuetify.rating.ariaLabel.item"},activeColor:String,color:String,clearable:Boolean,disabled:Boolean,emptyIcon:{type:se,default:"$ratingEmpty"},fullIcon:{type:se,default:"$ratingFull"},halfIncrements:Boolean,hover:Boolean,length:{type:[Number,String],default:5},readonly:Boolean,modelValue:{type:[Number,String],default:0},itemLabels:Array,itemLabelPosition:{type:String,default:"top",validator:e=>["top","bottom"].includes(e)},ripple:Boolean,...q(),...Fe(),...At(),...ce(),...he()},"VRating"),Cp=L()({name:"VRating",props:wp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{t:l}=ct(),{themeClasses:a}=ye(e),o=ue(e,"modelValue"),i=h(()=>Ue(parseFloat(o.value),0,+e.length)),s=h(()=>xt(Number(e.length),1)),u=h(()=>s.value.flatMap(y=>e.halfIncrements?[y-.5,y]:[y])),c=K(-1),d=h(()=>u.value.map(y=>{const b=e.hover&&c.value>-1,p=i.value>=y,S=c.value>=y,_=(b?S:p)?e.fullIcon:e.emptyIcon,V=e.activeColor??e.color,x=p||S?V:e.color;return{isFilled:p,isHovered:S,icon:_,color:x}})),f=h(()=>[0,...u.value].map(y=>{function b(){c.value=y}function p(){c.value=-1}function S(){e.disabled||e.readonly||(o.value=i.value===y&&e.clearable?0:y)}return{onMouseenter:e.hover?b:void 0,onMouseleave:e.hover?p:void 0,onClick:S}})),v=h(()=>e.name??`v-rating-${We()}`);function m(y){var w,k;let{value:b,index:p,showStar:S=!0}=y;const{onMouseenter:C,onMouseleave:_,onClick:V}=f.value[p+1],x=`${v.value}-${String(b).replace(".","-")}`,T={color:(w=d.value[p])==null?void 0:w.color,density:e.density,disabled:e.disabled,icon:(k=d.value[p])==null?void 0:k.icon,ripple:e.ripple,size:e.size,variant:"plain"};return r(oe,null,[r("label",{for:x,class:{"v-rating__item--half":e.halfIncrements&&b%1>0,"v-rating__item--full":e.halfIncrements&&b%1===0},onMouseenter:C,onMouseleave:_,onClick:V},[r("span",{class:"v-rating__hidden"},[l(e.itemAriaLabel,b,e.length)]),S?n.item?n.item({...d.value[p],props:T,value:b,index:p,rating:i.value}):r(Ke,Y({"aria-label":l(e.itemAriaLabel,b,e.length)},T),null):void 0]),r("input",{class:"v-rating__hidden",name:v.value,id:x,type:"radio",value:b,checked:i.value===b,tabindex:-1,readonly:e.readonly,disabled:e.disabled},null)])}function g(y){return n["item-label"]?n["item-label"](y):y.label?r("span",null,[y.label]):r("span",null,[Rt(" ")])}return j(()=>{var b;const y=!!((b=e.itemLabels)!=null&&b.length)||n["item-label"];return r(e.tag,{class:["v-rating",{"v-rating--hover":e.hover,"v-rating--readonly":e.readonly},a.value,e.class],style:e.style},{default:()=>[r(m,{value:0,index:-1,showStar:!1},null),s.value.map((p,S)=>{var C,_;return r("div",{class:"v-rating__wrapper"},[y&&e.itemLabelPosition==="top"?g({value:p,index:S,label:(C=e.itemLabels)==null?void 0:C[S]}):void 0,r("div",{class:"v-rating__item"},[e.halfIncrements?r(oe,null,[r(m,{value:p-.5,index:S*2},null),r(m,{value:p,index:S*2+1},null)]):r(m,{value:p,index:S},null)]),y&&e.itemLabelPosition==="bottom"?g({value:p,index:S,label:(_=e.itemLabels)==null?void 0:_[S]}):void 0])})]})}),{}}});function ii(e){const n=Math.abs(e);return Math.sign(e)*(n/((1/.501-2)*(1-n)+1))}function si(e){let{selectedElement:t,containerSize:n,contentSize:l,isRtl:a,currentScrollOffset:o,isHorizontal:i}=e;const s=i?t.clientWidth:t.clientHeight,u=i?t.offsetLeft:t.offsetTop,c=a&&i?l-u-s:u,d=n+o,f=s+c,v=s*.4;return c<=o?o=Math.max(c-v,0):d<=f&&(o=Math.min(o-(d-f-v),l-n)),o}function xp(e){let{selectedElement:t,containerSize:n,contentSize:l,isRtl:a,isHorizontal:o}=e;const i=o?t.clientWidth:t.clientHeight,s=o?t.offsetLeft:t.offsetTop,u=a&&o?l-s-i/2-n/2:s+i/2-n/2;return Math.min(l-n,Math.max(0,u))}const wr=Symbol.for("vuetify:v-slide-group"),Cr=R({centerActive:Boolean,direction:{type:String,default:"horizontal"},symbol:{type:null,default:wr},nextIcon:{type:se,default:"$next"},prevIcon:{type:se,default:"$prev"},showArrows:{type:[Boolean,String],validator:e=>typeof e=="boolean"||["always","desktop","mobile"].includes(e)},...q(),...ce(),...kn({selectedClass:"v-slide-group-item--active"})},"VSlideGroup"),ba=L()({name:"VSlideGroup",props:Cr(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const{isRtl:l}=De(),{mobile:a}=tn(),o=on(e,e.symbol),i=K(!1),s=K(0),u=K(0),c=K(0),d=h(()=>e.direction==="horizontal"),{resizeRef:f,contentRect:v}=wt(),{resizeRef:m,contentRect:g}=wt(),y=h(()=>o.selected.value.length?o.items.value.findIndex(U=>U.id===o.selected.value[0]):-1),b=h(()=>o.selected.value.length?o.items.value.findIndex(U=>U.id===o.selected.value[o.selected.value.length-1]):-1);if(Ce){let U=-1;Z(()=>[o.selected.value,v.value,g.value,d.value],()=>{cancelAnimationFrame(U),U=requestAnimationFrame(()=>{if(v.value&&g.value){const z=d.value?"width":"height";u.value=v.value[z],c.value=g.value[z],i.value=u.value+1<c.value}if(y.value>=0&&m.value){const z=m.value.children[b.value];y.value===0||!i.value?s.value=0:e.centerActive?s.value=xp({selectedElement:z,containerSize:u.value,contentSize:c.value,isRtl:l.value,isHorizontal:d.value}):i.value&&(s.value=si({selectedElement:z,containerSize:u.value,contentSize:c.value,isRtl:l.value,currentScrollOffset:s.value,isHorizontal:d.value}))}})})}const p=K(!1);let S=0,C=0;function _(U){const z=d.value?"clientX":"clientY";C=(l.value&&d.value?-1:1)*s.value,S=U.touches[0][z],p.value=!0}function V(U){if(!i.value)return;const z=d.value?"clientX":"clientY",ae=l.value&&d.value?-1:1;s.value=ae*(C+S-U.touches[0][z])}function x(U){const z=c.value-u.value;s.value<0||!i.value?s.value=0:s.value>=z&&(s.value=z),p.value=!1}function T(){f.value&&(f.value[d.value?"scrollLeft":"scrollTop"]=0)}const w=K(!1);function k(U){if(w.value=!0,!(!i.value||!m.value)){for(const z of U.composedPath())for(const ae of m.value.children)if(ae===z){s.value=si({selectedElement:ae,containerSize:u.value,contentSize:c.value,isRtl:l.value,currentScrollOffset:s.value,isHorizontal:d.value});return}}}function I(U){w.value=!1}function A(U){var z;!w.value&&!(U.relatedTarget&&((z=m.value)!=null&&z.contains(U.relatedTarget)))&&E()}function B(U){m.value&&(d.value?U.key==="ArrowRight"?E(l.value?"prev":"next"):U.key==="ArrowLeft"&&E(l.value?"next":"prev"):U.key==="ArrowDown"?E("next"):U.key==="ArrowUp"&&E("prev"),U.key==="Home"?E("first"):U.key==="End"&&E("last"))}function E(U){var z,ae,re,ve,ge;if(m.value)if(!U)(z=$n(m.value)[0])==null||z.focus();else if(U==="next"){const D=(ae=m.value.querySelector(":focus"))==null?void 0:ae.nextElementSibling;D?D.focus():E("first")}else if(U==="prev"){const D=(re=m.value.querySelector(":focus"))==null?void 0:re.previousElementSibling;D?D.focus():E("last")}else U==="first"?(ve=m.value.firstElementChild)==null||ve.focus():U==="last"&&((ge=m.value.lastElementChild)==null||ge.focus())}function F(U){const z=s.value+(U==="prev"?-1:1)*u.value;s.value=Ue(z,0,c.value-u.value)}const X=h(()=>{let U=s.value>c.value-u.value?-(c.value-u.value)+ii(c.value-u.value-s.value):-s.value;s.value<=0&&(U=ii(-s.value));const z=l.value&&d.value?-1:1;return{transform:`translate${d.value?"X":"Y"}(${z*U}px)`,transition:p.value?"none":"",willChange:p.value?"transform":""}}),$=h(()=>({next:o.next,prev:o.prev,select:o.select,isSelected:o.isSelected})),N=h(()=>{switch(e.showArrows){case"always":return!0;case"desktop":return!a.value;case!0:return i.value||Math.abs(s.value)>0;case"mobile":return a.value||i.value||Math.abs(s.value)>0;default:return!a.value&&(i.value||Math.abs(s.value)>0)}}),M=h(()=>Math.abs(s.value)>0),G=h(()=>c.value>Math.abs(s.value)+u.value);return j(()=>r(e.tag,{class:["v-slide-group",{"v-slide-group--vertical":!d.value,"v-slide-group--has-affixes":N.value,"v-slide-group--is-overflowing":i.value},e.class],style:e.style,tabindex:w.value||o.selected.value.length?-1:0,onFocus:A},{default:()=>{var U,z,ae;return[N.value&&r("div",{key:"prev",class:["v-slide-group__prev",{"v-slide-group__prev--disabled":!M.value}],onClick:()=>F("prev")},[((U=n.prev)==null?void 0:U.call(n,$.value))??r(Ql,null,{default:()=>[r(Se,{icon:l.value?e.nextIcon:e.prevIcon},null)]})]),r("div",{key:"container",ref:f,class:"v-slide-group__container",onScroll:T},[r("div",{ref:m,class:"v-slide-group__content",style:X.value,onTouchstartPassive:_,onTouchmovePassive:V,onTouchendPassive:x,onFocusin:k,onFocusout:I,onKeydown:B},[(z=n.default)==null?void 0:z.call(n,$.value)])]),N.value&&r("div",{key:"next",class:["v-slide-group__next",{"v-slide-group__next--disabled":!G.value}],onClick:()=>F("next")},[((ae=n.next)==null?void 0:ae.call(n,$.value))??r(Ql,null,{default:()=>[r(Se,{icon:l.value?e.prevIcon:e.nextIcon},null)]})])]}})),{selected:o.selected,scrollTo:F,scrollOffset:s,focus:E}}}),Vp=L()({name:"VSlideGroupItem",props:Sn(),emits:{"group:selected":e=>!0},setup(e,t){let{slots:n}=t;const l=wn(e,wr);return()=>{var a;return(a=n.default)==null?void 0:a.call(n,{isSelected:l.isSelected.value,select:l.select,toggle:l.toggle,selectedClass:l.selectedClass.value})}}});const _p=R({multiLine:Boolean,timeout:{type:[Number,String],default:5e3},vertical:Boolean,...Ft({location:"bottom"}),...xn(),...Ie(),...mt(),...he(),...rt(Kn({transition:"v-snackbar-transition"}),["persistent","noClickAnimation","scrim","scrollStrategy"])},"VSnackbar"),Ip=L()({name:"VSnackbar",props:_p(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{locationStyles:a}=Ot(e),{positionClasses:o}=Vn(e),{scopeId:i}=In(),{themeClasses:s}=ye(e),{colorClasses:u,colorStyles:c,variantClasses:d}=an(e),{roundedClasses:f}=Ae(e),v=W();Z(l,g),Z(()=>e.timeout,g),Je(()=>{l.value&&g()});let m=-1;function g(){window.clearTimeout(m);const b=Number(e.timeout);!l.value||b===-1||(m=window.setTimeout(()=>{l.value=!1},b))}function y(){window.clearTimeout(m)}return j(()=>{const[b]=It.filterProps(e);return r(It,Y({ref:v,class:["v-snackbar",{"v-snackbar--active":l.value,"v-snackbar--multi-line":e.multiLine&&!e.vertical,"v-snackbar--vertical":e.vertical},o.value,e.class],style:e.style},b,{modelValue:l.value,"onUpdate:modelValue":p=>l.value=p,contentProps:Y({class:["v-snackbar__wrapper",s.value,u.value,f.value,d.value],style:[a.value,c.value],onPointerenter:y,onPointerleave:g},b.contentProps),persistent:!0,noClickAnimation:!0,scrim:!1,scrollStrategy:"none",_disableGlobalStack:!0},i),{default:()=>[ln(!1,"v-snackbar"),n.default&&r("div",{class:"v-snackbar__content",role:"status","aria-live":"polite"},[n.default()]),n.actions&&r(pe,{defaults:{VBtn:{variant:"text",ripple:!1}}},{default:()=>[r("div",{class:"v-snackbar__actions"},[n.actions()])]})],activator:n.activator})}),pt({},v)}});const Tp=R({indeterminate:Boolean,inset:Boolean,flat:Boolean,loading:{type:[Boolean,String],default:!1},...Bt(),...wl()},"VSwitch"),Pp=L()({name:"VSwitch",inheritAttrs:!1,props:Tp(),emits:{"update:focused":e=>!0,"update:modelValue":()=>!0,"update:indeterminate":e=>!0},setup(e,t){let{attrs:n,slots:l}=t;const a=ue(e,"indeterminate"),o=ue(e,"modelValue"),{loaderClasses:i}=Sl(e),{isFocused:s,focus:u,blur:c}=Nt(e),d=W(),f=h(()=>typeof e.loading=="string"&&e.loading!==""?e.loading:e.color),v=We(),m=h(()=>e.id||`switch-${v}`);function g(){a.value&&(a.value=!1)}function y(b){var p,S;b.stopPropagation(),b.preventDefault(),(S=(p=d.value)==null?void 0:p.input)==null||S.click()}return j(()=>{const[b,p]=en(n),[S,C]=Ne.filterProps(e),[_,V]=Zt.filterProps(e);return r(Ne,Y({class:["v-switch",{"v-switch--inset":e.inset},{"v-switch--indeterminate":a.value},i.value,e.class],style:e.style},b,S,{id:m.value,focused:s.value}),{...l,default:x=>{let{id:T,messagesId:w,isDisabled:k,isReadonly:I,isValid:A}=x;return r(Zt,Y({ref:d},_,{modelValue:o.value,"onUpdate:modelValue":[B=>o.value=B,g],id:T.value,"aria-describedby":w.value,type:"checkbox","aria-checked":a.value?"mixed":void 0,disabled:k.value,readonly:I.value,onFocus:u,onBlur:c},p),{...l,default:B=>{let{backgroundColorClasses:E,backgroundColorStyles:F}=B;return r("div",{class:["v-switch__track",...E.value],style:F.value,onClick:y},null)},input:B=>{let{inputNode:E,icon:F,backgroundColorClasses:X,backgroundColorStyles:$}=B;return r(oe,null,[E,r("div",{class:["v-switch__thumb",{"v-switch__thumb--filled":F||e.loading},e.inset?void 0:X.value],style:e.inset?void 0:$.value},[r(Ha,null,{default:()=>[e.loading?r(Za,{name:"v-switch",active:!0,color:A.value===!1?void 0:f.value},{default:N=>l.loader?l.loader(N):r(Ka,{active:N.isActive,color:N.color,indeterminate:!0,size:"16",width:"2"},null)}):F&&r(Se,{key:F,icon:F,size:"x-small"},null)]})])])}})}})}),{}}});const Ap=R({color:String,height:[Number,String],window:Boolean,...q(),...Me(),...bn(),...Ie(),...ce(),...he()},"VSystemBar"),Bp=L()({name:"VSystemBar",props:Ap(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{backgroundColorClasses:a,backgroundColorStyles:o}=Be(O(e,"color")),{elevationClasses:i}=He(e),{roundedClasses:s}=Ae(e),{ssrBootStyles:u}=nn(),c=h(()=>e.height??(e.window?32:24)),{layoutItemStyles:d}=pn({id:e.name,order:h(()=>parseInt(e.order,10)),position:K("top"),layoutSize:c,elementSize:c,active:h(()=>!0),absolute:O(e,"absolute")});return j(()=>r(e.tag,{class:["v-system-bar",{"v-system-bar--window":e.window},l.value,a.value,i.value,s.value,e.class],style:[o.value,d.value,u.value,e.style]},n)),{}}});const xr=Symbol.for("vuetify:v-tabs"),Rp=R({fixed:Boolean,sliderColor:String,hideSlider:Boolean,direction:{type:String,default:"horizontal"},...rt(Ja({selectedClass:"v-tab--selected",variant:"text"}),["active","block","flat","location","position","symbol"])},"VTab"),Vr=L()({name:"VTab",props:Rp(),setup(e,t){let{slots:n,attrs:l}=t;const{textColorClasses:a,textColorStyles:o}=Ge(e,"sliderColor"),i=h(()=>e.direction==="horizontal"),s=K(!1),u=W(),c=W();function d(f){var m,g;let{value:v}=f;if(s.value=v,v){const y=(g=(m=u.value)==null?void 0:m.$el.parentElement)==null?void 0:g.querySelector(".v-tab--selected .v-tab__slider"),b=c.value;if(!y||!b)return;const p=getComputedStyle(y).color,S=y.getBoundingClientRect(),C=b.getBoundingClientRect(),_=i.value?"x":"y",V=i.value?"X":"Y",x=i.value?"right":"bottom",T=i.value?"width":"height",w=S[_],k=C[_],I=w>k?S[x]-C[x]:S[_]-C[_],A=Math.sign(I)>0?i.value?"right":"bottom":Math.sign(I)<0?i.value?"left":"top":"center",E=(Math.abs(I)+(Math.sign(I)<0?S[T]:C[T]))/Math.max(S[T],C[T])||0,F=S[T]/C[T]||0,X=1.5;Gt(b,{backgroundColor:[p,"currentcolor"],transform:[`translate${V}(${I}px) scale${V}(${F})`,`translate${V}(${I/X}px) scale${V}(${(E-1)/X+1})`,"none"],transformOrigin:Array(3).fill(A)},{duration:225,easing:Mn})}}return j(()=>{const[f]=Ke.filterProps(e);return r(Ke,Y({symbol:xr,ref:u,class:["v-tab",e.class],style:e.style,tabindex:s.value?0:-1,role:"tab","aria-selected":String(s.value),active:!1},f,l,{block:e.fixed,maxWidth:e.fixed?300:void 0,"onGroup:selected":d}),{default:()=>{var v;return[((v=n.default)==null?void 0:v.call(n))??e.text,!e.hideSlider&&r("div",{ref:c,class:["v-tab__slider",a.value],style:o.value},null)]}})}),{}}});function Ep(e){return e?e.map(t=>rl(t)?t:{text:t,value:t}):[]}const Lp=R({alignTabs:{type:String,default:"start"},color:String,fixedTabs:Boolean,items:{type:Array,default:()=>[]},stacked:Boolean,bgColor:String,grow:Boolean,height:{type:[Number,String],default:void 0},hideSlider:Boolean,sliderColor:String,...Cr({mandatory:"force"}),...Fe(),...ce()},"VTabs"),$p=L()({name:"VTabs",props:Lp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),a=h(()=>Ep(e.items)),{densityClasses:o}=Ye(e),{backgroundColorClasses:i,backgroundColorStyles:s}=Be(O(e,"bgColor"));return Ee({VTab:{color:O(e,"color"),direction:O(e,"direction"),stacked:O(e,"stacked"),fixed:O(e,"fixedTabs"),sliderColor:O(e,"sliderColor"),hideSlider:O(e,"hideSlider")}}),j(()=>{const[u]=ba.filterProps(e);return r(ba,Y(u,{modelValue:l.value,"onUpdate:modelValue":c=>l.value=c,class:["v-tabs",`v-tabs--${e.direction}`,`v-tabs--align-tabs-${e.alignTabs}`,{"v-tabs--fixed-tabs":e.fixedTabs,"v-tabs--grow":e.grow,"v-tabs--stacked":e.stacked},o.value,i.value,e.class],style:[{"--v-tabs-height":J(e.height)},s.value,e.style],role:"tablist",symbol:xr}),{default:()=>[n.default?n.default():a.value.map(c=>r(Vr,Y(c,{key:c.text}),null))]})}),{}}});const Mp=R({fixedHeader:Boolean,fixedFooter:Boolean,height:[Number,String],hover:Boolean,...q(),...Fe(),...ce(),...he()},"VTable"),Fp=L()({name:"VTable",props:Mp(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{densityClasses:a}=Ye(e);return j(()=>r(e.tag,{class:["v-table",{"v-table--fixed-height":!!e.height,"v-table--fixed-header":e.fixedHeader,"v-table--fixed-footer":e.fixedFooter,"v-table--has-top":!!n.top,"v-table--has-bottom":!!n.bottom,"v-table--hover":e.hover},l.value,a.value,e.class],style:e.style},{default:()=>{var o,i,s;return[(o=n.top)==null?void 0:o.call(n),n.default?r("div",{class:"v-table__wrapper",style:{height:J(e.height)}},[r("table",null,[n.default()])]):(i=n.wrapper)==null?void 0:i.call(n),(s=n.bottom)==null?void 0:s.call(n)]}})),{}}});const Op=R({autoGrow:Boolean,autofocus:Boolean,counter:[Boolean,Number,String],counterValue:Function,prefix:String,placeholder:String,persistentPlaceholder:Boolean,persistentCounter:Boolean,noResize:Boolean,rows:{type:[Number,String],default:5,validator:e=>!isNaN(parseFloat(e))},maxRows:{type:[Number,String],validator:e=>!isNaN(parseFloat(e))},suffix:String,modelModifiers:Object,...Bt(),...Pl()},"VTextarea"),Dp=L()({name:"VTextarea",directives:{Intersect:Un},inheritAttrs:!1,props:Op(),emits:{"click:control":e=>!0,"mousedown:control":e=>!0,"update:focused":e=>!0,"update:modelValue":e=>!0},setup(e,t){let{attrs:n,emit:l,slots:a}=t;const o=ue(e,"modelValue"),{isFocused:i,focus:s,blur:u}=Nt(e),c=h(()=>typeof e.counterValue=="function"?e.counterValue(o.value):(o.value||"").toString().length),d=h(()=>{if(n.maxlength)return n.maxlength;if(!(!e.counter||typeof e.counter!="number"&&typeof e.counter!="string"))return e.counter});function f(A,B){var E,F;!e.autofocus||!A||(F=(E=B[0].target)==null?void 0:E.focus)==null||F.call(E)}const v=W(),m=W(),g=K(""),y=W(),b=h(()=>e.persistentPlaceholder||i.value||e.active);function p(){var A;y.value!==document.activeElement&&((A=y.value)==null||A.focus()),i.value||s()}function S(A){p(),l("click:control",A)}function C(A){l("mousedown:control",A)}function _(A){A.stopPropagation(),p(),xe(()=>{o.value="",Ra(e["onClick:clear"],A)})}function V(A){var E;const B=A.target;if(o.value=B.value,(E=e.modelModifiers)!=null&&E.trim){const F=[B.selectionStart,B.selectionEnd];xe(()=>{B.selectionStart=F[0],B.selectionEnd=F[1]})}}const x=W(),T=W(+e.rows),w=h(()=>["plain","underlined"].includes(e.variant));tt(()=>{e.autoGrow||(T.value=+e.rows)});function k(){e.autoGrow&&xe(()=>{if(!x.value||!m.value)return;const A=getComputedStyle(x.value),B=getComputedStyle(m.value.$el),E=parseFloat(A.getPropertyValue("--v-field-padding-top"))+parseFloat(A.getPropertyValue("--v-input-padding-top"))+parseFloat(A.getPropertyValue("--v-field-padding-bottom")),F=x.value.scrollHeight,X=parseFloat(A.lineHeight),$=Math.max(parseFloat(e.rows)*X+E,parseFloat(B.getPropertyValue("--v-input-control-height"))),N=parseFloat(e.maxRows)*X+E||1/0,M=Ue(F??0,$,N);T.value=Math.floor((M-E)/X),g.value=J(M)})}Je(k),Z(o,k),Z(()=>e.rows,k),Z(()=>e.maxRows,k),Z(()=>e.density,k);let I;return Z(x,A=>{A?(I=new ResizeObserver(k),I.observe(x.value)):I==null||I.disconnect()}),nt(()=>{I==null||I.disconnect()}),j(()=>{const A=!!(a.counter||e.counter||e.counterValue),B=!!(A||a.details),[E,F]=en(n),[{modelValue:X,...$}]=Ne.filterProps(e),[N]=lo(e);return r(Ne,Y({ref:v,modelValue:o.value,"onUpdate:modelValue":M=>o.value=M,class:["v-textarea v-text-field",{"v-textarea--prefixed":e.prefix,"v-textarea--suffixed":e.suffix,"v-text-field--prefixed":e.prefix,"v-text-field--suffixed":e.suffix,"v-textarea--auto-grow":e.autoGrow,"v-textarea--no-resize":e.noResize||e.autoGrow,"v-text-field--plain-underlined":w.value},e.class],style:e.style},E,$,{centerAffix:T.value===1&&!w.value,focused:i.value}),{...a,default:M=>{let{isDisabled:G,isDirty:U,isReadonly:z,isValid:ae}=M;return r(qn,Y({ref:m,style:{"--v-textarea-control-height":g.value},onClick:S,onMousedown:C,"onClick:clear":_,"onClick:prependInner":e["onClick:prependInner"],"onClick:appendInner":e["onClick:appendInner"]},N,{active:b.value||U.value,centerAffix:T.value===1&&!w.value,dirty:U.value||e.dirty,disabled:G.value,focused:i.value,error:ae.value===!1}),{...a,default:re=>{let{props:{class:ve,...ge}}=re;return r(oe,null,[e.prefix&&r("span",{class:"v-text-field__prefix"},[e.prefix]),ne(r("textarea",Y({ref:y,class:ve,value:o.value,onInput:V,autofocus:e.autofocus,readonly:z.value,disabled:G.value,placeholder:e.placeholder,rows:e.rows,name:e.name,onFocus:p,onBlur:u},ge,F),null),[[Ze("intersect"),{handler:f},null,{once:!0}]]),e.autoGrow&&ne(r("textarea",{class:[ve,"v-textarea__sizer"],id:`${ge.id}-sizer`,"onUpdate:modelValue":D=>o.value=D,ref:x,readonly:!0,"aria-hidden":"true"},null),[[je,o.value]]),e.suffix&&r("span",{class:"v-text-field__suffix"},[e.suffix])])}})},details:B?M=>{var G;return r(oe,null,[(G=a.details)==null?void 0:G.call(a,M),A&&r(oe,null,[r("span",null,null),r(Tl,{active:e.persistentCounter||i.value,value:c.value,max:d.value},a.counter)])])}:void 0})}),pt({},v,m,y)}});const Np=R({withBackground:Boolean,...q(),...he(),...ce()},"VThemeProvider"),zp=L()({name:"VThemeProvider",props:Np(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e);return()=>{var a;return e.withBackground?r(e.tag,{class:["v-theme-provider",l.value,e.class],style:e.style},{default:()=>{var o;return[(o=n.default)==null?void 0:o.call(n)]}}):(a=n.default)==null?void 0:a.call(n)}}});const Hp=R({align:{type:String,default:"center",validator:e=>["center","start"].includes(e)},direction:{type:String,default:"vertical",validator:e=>["vertical","horizontal"].includes(e)},justify:{type:String,default:"auto",validator:e=>["auto","center"].includes(e)},side:{type:String,validator:e=>e==null||["start","end"].includes(e)},lineInset:{type:[String,Number],default:0},lineThickness:{type:[String,Number],default:2},lineColor:String,truncateLine:{type:String,validator:e=>["start","end","both"].includes(e)},...q(),...Fe(),...ce(),...he()},"VTimeline"),jp=L()({name:"VTimeline",props:Hp(),setup(e,t){let{slots:n}=t;const{themeClasses:l}=ye(e),{densityClasses:a}=Ye(e),{rtlClasses:o}=De();Ee({VTimelineDivider:{lineColor:O(e,"lineColor")},VTimelineItem:{density:O(e,"density"),lineInset:O(e,"lineInset")}});const i=h(()=>{const u=e.side?e.side:e.density!=="default"?"end":null;return u&&`v-timeline--side-${u}`}),s=h(()=>{const u=["v-timeline--truncate-line-start","v-timeline--truncate-line-end"];switch(e.truncateLine){case"both":return u;case"start":return u[0];case"end":return u[1];default:return null}});return j(()=>r(e.tag,{class:["v-timeline",`v-timeline--${e.direction}`,`v-timeline--align-${e.align}`,`v-timeline--justify-${e.justify}`,s.value,{"v-timeline--inset-line":!!e.lineInset},l.value,a.value,i.value,o.value,e.class],style:[{"--v-timeline-line-thickness":J(e.lineThickness)},e.style]},n)),{}}}),Up=R({dotColor:String,fillDot:Boolean,hideDot:Boolean,icon:se,iconColor:String,lineColor:String,...q(),...Ie(),...At(),...Me()},"VTimelineDivider"),Gp=L()({name:"VTimelineDivider",props:Up(),setup(e,t){let{slots:n}=t;const{sizeClasses:l,sizeStyles:a}=Cn(e,"v-timeline-divider__dot"),{backgroundColorStyles:o,backgroundColorClasses:i}=Be(O(e,"dotColor")),{roundedClasses:s}=Ae(e,"v-timeline-divider__dot"),{elevationClasses:u}=He(e),{backgroundColorClasses:c,backgroundColorStyles:d}=Be(O(e,"lineColor"));return j(()=>r("div",{class:["v-timeline-divider",{"v-timeline-divider--fill-dot":e.fillDot},e.class],style:e.style},[r("div",{class:["v-timeline-divider__before",c.value],style:d.value},null),!e.hideDot&&r("div",{key:"dot",class:["v-timeline-divider__dot",u.value,s.value,l.value],style:a.value},[r("div",{class:["v-timeline-divider__inner-dot",i.value,s.value],style:o.value},[n.default?r(pe,{key:"icon-defaults",disabled:!e.icon,defaults:{VIcon:{color:e.iconColor,icon:e.icon,size:e.size}}},n.default):r(Se,{key:"icon",color:e.iconColor,icon:e.icon,size:e.size},null)])]),r("div",{class:["v-timeline-divider__after",c.value],style:d.value},null)])),{}}}),Wp=R({density:String,dotColor:String,fillDot:Boolean,hideDot:Boolean,hideOpposite:{type:Boolean,default:void 0},icon:se,iconColor:String,lineInset:[Number,String],...q(),...dt(),...Me(),...Ie(),...At(),...ce()},"VTimelineItem"),Yp=L()({name:"VTimelineItem",props:Wp(),setup(e,t){let{slots:n}=t;const{dimensionStyles:l}=vt(e),a=K(0),o=W();return Z(o,i=>{var s;i&&(a.value=((s=i.$el.querySelector(".v-timeline-divider__dot"))==null?void 0:s.getBoundingClientRect().width)??0)},{flush:"post"}),j(()=>{var i,s;return r("div",{class:["v-timeline-item",{"v-timeline-item--fill-dot":e.fillDot},e.class],style:[{"--v-timeline-dot-size":J(a.value),"--v-timeline-line-inset":e.lineInset?`calc(var(--v-timeline-dot-size) / 2 + ${J(e.lineInset)})`:J(0)},e.style]},[r("div",{class:"v-timeline-item__body",style:l.value},[(i=n.default)==null?void 0:i.call(n)]),r(Gp,{ref:o,hideDot:e.hideDot,icon:e.icon,iconColor:e.iconColor,size:e.size,elevation:e.elevation,dotColor:e.dotColor,fillDot:e.fillDot,rounded:e.rounded},{default:n.icon}),e.density!=="compact"&&r("div",{class:"v-timeline-item__opposite"},[!e.hideOpposite&&((s=n.opposite)==null?void 0:s.call(n))])])}),{}}}),Kp=R({...q(),...mt({variant:"text"})},"VToolbarItems"),qp=L()({name:"VToolbarItems",props:Kp(),setup(e,t){let{slots:n}=t;return Ee({VBtn:{color:O(e,"color"),height:"inherit",variant:O(e,"variant")}}),j(()=>{var l;return r("div",{class:["v-toolbar-items",e.class],style:e.style},[(l=n.default)==null?void 0:l.call(n)])}),{}}});const Xp=R({id:String,text:String,...rt(Kn({closeOnBack:!1,location:"end",locationStrategy:"connected",eager:!0,minWidth:0,offset:10,openOnClick:!1,openOnHover:!0,origin:"auto",scrim:!1,scrollStrategy:"reposition",transition:!1}),["absolute","persistent"])},"VTooltip"),Zp=L()({name:"VTooltip",props:Xp(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ue(e,"modelValue"),{scopeId:a}=In(),o=We(),i=h(()=>e.id||`v-tooltip-${o}`),s=W(),u=h(()=>e.location.split(" ").length>1?e.location:e.location+" center"),c=h(()=>e.origin==="auto"||e.origin==="overlap"||e.origin.split(" ").length>1||e.location.split(" ").length>1?e.origin:e.origin+" center"),d=h(()=>e.transition?e.transition:l.value?"scale-transition":"fade-transition"),f=h(()=>Y({"aria-describedby":i.value},e.activatorProps));return j(()=>{const[v]=It.filterProps(e);return r(It,Y({ref:s,class:["v-tooltip",e.class],style:e.style,id:i.value},v,{modelValue:l.value,"onUpdate:modelValue":m=>l.value=m,transition:d.value,absolute:!0,location:u.value,origin:c.value,persistent:!0,role:"tooltip",activatorProps:f.value,_disableGlobalStack:!0},a),{activator:n.activator,default:function(){var b;for(var m=arguments.length,g=new Array(m),y=0;y<m;y++)g[y]=arguments[y];return((b=n.default)==null?void 0:b.call(n,...g))??e.text}})}),pt({},s)}}),Jp=L()({name:"VValidation",props:hs(),emits:{"update:modelValue":e=>!0},setup(e,t){let{slots:n}=t;const l=ys(e,"validation");return()=>{var a;return(a=n.default)==null?void 0:a.call(n,l)}}}),Qp=Object.freeze(Object.defineProperty({__proto__:null,VAlert:Tg,VAlertTitle:us,VApp:Om,VAppBar:ag,VAppBarNavIcon:xg,VAppBarTitle:Vg,VAutocomplete:Wh,VAvatar:$t,VBadge:Kh,VBanner:Zh,VBannerActions:js,VBannerText:Us,VBottomNavigation:Qh,VBreadcrumbs:ly,VBreadcrumbsDivider:Gs,VBreadcrumbsItem:Ws,VBtn:Ke,VBtnGroup:na,VBtnToggle:cg,VCard:iy,VCardActions:Ys,VCardItem:Xs,VCardSubtitle:Ks,VCardText:Zs,VCardTitle:qs,VCarousel:gy,VCarouselItem:yy,VCheckbox:Mg,VCheckboxBtn:gn,VChip:Yn,VChipGroup:Dg,VClassIcon:Na,VCode:by,VCol:Pb,VColorPicker:ib,VCombobox:ub,VComponentIcon:Xl,VContainer:Vb,VCounter:Tl,VDefaultsProvider:pe,VDialog:db,VDialogBottomTransition:Hm,VDialogTopTransition:jm,VDialogTransition:pl,VDivider:Ts,VExpandTransition:kl,VExpandXTransition:Ua,VExpansionPanel:yb,VExpansionPanelText:rr,VExpansionPanelTitle:cr,VExpansionPanels:mb,VFabTransition:zm,VFadeTransition:Ql,VField:qn,VFieldLabel:Bn,VFileInput:pb,VFooter:Sb,VForm:Cb,VHover:Db,VIcon:Se,VImg:Xt,VInput:Ne,VItem:Hb,VItemGroup:zb,VKbd:jb,VLabel:_n,VLayout:Gb,VLayoutItem:Yb,VLazy:qb,VLigatureIcon:Zf,VList:Vl,VListGroup:ia,VListImg:oh,VListItem:_t,VListItemAction:sh,VListItemMedia:uh,VListItemSubtitle:Vs,VListItemTitle:_s,VListSubheader:Is,VLocaleProvider:Zb,VMain:Qb,VMenu:Il,VMessages:ms,VNavigationDrawer:rp,VNoSsr:up,VOverlay:It,VPagination:vp,VParallax:gp,VProgressCircular:Ka,VProgressLinear:qa,VRadio:yp,VRadioGroup:pp,VRangeSlider:Sp,VRating:Cp,VResponsive:ea,VRow:Mb,VScaleTransition:Ha,VScrollXReverseTransition:Gm,VScrollXTransition:Um,VScrollYReverseTransition:Ym,VScrollYTransition:Wm,VSelect:zh,VSelectionControl:Zt,VSelectionControlGroup:ds,VSheet:ya,VSlideGroup:ba,VSlideGroupItem:Vp,VSlideXReverseTransition:qm,VSlideXTransition:Km,VSlideYReverseTransition:Xm,VSlideYTransition:ja,VSlider:ha,VSnackbar:Ip,VSpacer:Fb,VSvgIcon:Da,VSwitch:Pp,VSystemBar:Bp,VTab:Vr,VTable:Fp,VTabs:$p,VTextField:Jt,VTextarea:Dp,VThemeProvider:zp,VTimeline:jp,VTimelineItem:Yp,VToolbar:ta,VToolbarItems:qp,VToolbarTitle:za,VTooltip:Zp,VValidation:Jp,VVirtualScroll:Bl,VWindow:ca,VWindowItem:da},Symbol.toStringTag,{value:"Module"}));function e0(e,t){const n=t.modifiers||{},l=t.value,{once:a,immediate:o,...i}=n,s=!Object.keys(i).length,{handler:u,options:c}=typeof l=="object"?l:{handler:l,options:{attributes:(i==null?void 0:i.attr)??s,characterData:(i==null?void 0:i.char)??s,childList:(i==null?void 0:i.child)??s,subtree:(i==null?void 0:i.sub)??s}},d=new MutationObserver(function(){let f=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],v=arguments.length>1?arguments[1]:void 0;u==null||u(f,v),a&&_r(e,t)});o&&(u==null||u([],d)),e._mutate=Object(e._mutate),e._mutate[t.instance.$.uid]={observer:d},d.observe(e,c)}function _r(e,t){var n;(n=e._mutate)!=null&&n[t.instance.$.uid]&&(e._mutate[t.instance.$.uid].observer.disconnect(),delete e._mutate[t.instance.$.uid])}const t0={mounted:e0,unmounted:_r};function n0(e,t){var a,o;const n=t.value,l={passive:!((a=t.modifiers)!=null&&a.active)};window.addEventListener("resize",n,l),e._onResize=Object(e._onResize),e._onResize[t.instance.$.uid]={handler:n,options:l},(o=t.modifiers)!=null&&o.quiet||n()}function l0(e,t){var a;if(!((a=e._onResize)!=null&&a[t.instance.$.uid]))return;const{handler:n,options:l}=e._onResize[t.instance.$.uid];window.removeEventListener("resize",n,l),delete e._onResize[t.instance.$.uid]}const a0={mounted:n0,unmounted:l0};function Ir(e,t){const{self:n=!1}=t.modifiers??{},l=t.value,a=typeof l=="object"&&l.options||{passive:!0},o=typeof l=="function"||"handleEvent"in l?l:l.handler,i=n?e:t.arg?document.querySelector(t.arg):window;i&&(i.addEventListener("scroll",o,a),e._onScroll=Object(e._onScroll),e._onScroll[t.instance.$.uid]={handler:o,options:a,target:n?void 0:i})}function Tr(e,t){var o;if(!((o=e._onScroll)!=null&&o[t.instance.$.uid]))return;const{handler:n,options:l,target:a=e}=e._onScroll[t.instance.$.uid];a.removeEventListener("scroll",n,l),delete e._onScroll[t.instance.$.uid]}function o0(e,t){t.value!==t.oldValue&&(Tr(e,t),Ir(e,t))}const i0={mounted:Ir,unmounted:Tr,updated:o0},s0=Object.freeze(Object.defineProperty({__proto__:null,ClickOutside:Ns,Intersect:Un,Mutate:t0,Resize:a0,Ripple:Dt,Scroll:i0,Touch:io},Symbol.toStringTag,{value:"Module"})),r0=Gr(),Xn=jr(of);Xn.config.globalProperties.emitter=r0;Xn.directive("tooltip",{mounted:(e,t)=>new bootstrap.Tooltip(e,{boundary:document.body,container:e.parentNode})});const u0=Ui({components:Qp,directives:s0});Xn.use(u0);Xn.use(Ur);Xn.mount("#mw-element-style-editor-app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC1zdHlsZS1lZGl0b3ItYXBwLTMzYWFmZjNmLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9hcHBzL0VsZW1lbnRTdHlsZUVkaXRvci9jb21wb25lbnRzL0FsaWduLnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL2NvbXBvbmVudHMvRHJvcGRvd25TbWFsbC52dWUiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9hcHBzL0VsZW1lbnRTdHlsZUVkaXRvci9jb21wb25lbnRzL0ZvbnRQaWNrZXIudnVlIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvdWkvYXBwcy9FbGVtZW50U3R5bGVFZGl0b3IvY29tcG9uZW50cy9TbGlkZXJTbWFsbC52dWUiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9hcHBzL0VsZW1lbnRTdHlsZUVkaXRvci9FbGVtZW50U3R5bGVFZGl0b3JUeXBvZ3JhcGh5LnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL0VsZW1lbnRTdHlsZUVkaXRvclNwYWNpbmcudnVlIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvdWkvYXBwcy9FbGVtZW50U3R5bGVFZGl0b3IvY29tcG9uZW50cy9JbWFnZVBpY2tlci52dWUiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9jb21wb25lbnRzL0Zvcm0vRmlsZVBpY2tlci52dWUiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9hcHBzL0VsZW1lbnRTdHlsZUVkaXRvci9FbGVtZW50U3R5bGVFZGl0b3JCYWNrZ3JvdW5kLnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL2NvbXBvbmVudHMvQm9yZGVyUmFkaXVzLnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL0VsZW1lbnRTdHlsZUVkaXRvckJvcmRlci52dWUiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9hcHBzL0VsZW1lbnRTdHlsZUVkaXRvci9FbGVtZW50U3R5bGVFZGl0b3JFbGVtZW50U2VsZWN0b3IudnVlIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvdWkvYXBwcy9FbGVtZW50U3R5bGVFZGl0b3IvRWxlbWVudFN0eWxlRWRpdG9yQ29udGFpbmVyLnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL0VsZW1lbnRTdHlsZUFuaW1hdGlvbnNBcHBsaWVyLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvdWkvYXBwcy9FbGVtZW50U3R5bGVFZGl0b3IvRWxlbWVudFN0eWxlRWRpdG9yQW5pbWF0aW9ucy52dWUiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy91aS9hcHBzL0VsZW1lbnRTdHlsZUVkaXRvci9FbGVtZW50U3R5bGVFZGl0b3JHcmlkLnZ1ZSIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUzLXRhZ3MtaW5wdXQvZGlzdC92dWUzLXRhZ3MtaW5wdXQuZXNtLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvdWkvYXBwcy9FbGVtZW50U3R5bGVFZGl0b3IvRWxlbWVudFN0eWxlRWRpdG9yQ2xhc3NBcHBsaWVyLnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL0VsZW1lbnRTdHlsZUVkaXRvclJvdW5kZWRDb3JuZXJzLnZ1ZSIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL3VpL2FwcHMvRWxlbWVudFN0eWxlRWRpdG9yL0VsZW1lbnRTdHlsZUVkaXRvckFwcC52dWUiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9nbG9iYWxzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2hlbHBlcnMubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL3V0aWwvYW5jaG9yLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2JveC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9hbmltYXRpb24ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL3V0aWwvYmluZFByb3BzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2NvbG9yL0FQQ0EubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL3V0aWwvY29uc29sZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9jb2xvci90cmFuc2Zvcm1DSUVMQUIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL3V0aWwvY29sb3IvdHJhbnNmb3JtU1JHQi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9jb2xvclV0aWxzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL3Byb3BzRmFjdG9yeS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2RlZmluZUNvbXBvbmVudC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9jcmVhdGVTaW1wbGVGdW5jdGlvbmFsLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2RvbS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9lYXNpbmcubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL3V0aWwvZ2V0Q3VycmVudEluc3RhbmNlLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2dldFNjcm9sbFBhcmVudC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC9pbmplY3RTZWxmLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi91dGlsL2lzRml4ZWRQb3NpdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvdXRpbC91c2VSZW5kZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9kaXNwbGF5Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9pY29uc2V0cy9tZGkubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2ljb25zLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9sb2NhbGUvZW4ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2xvY2FsZS9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdG9nZ2xlU2NvcGUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvbG9jYWxlL2FkYXB0ZXJzL3Z1ZXRpZnkubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2xvY2FsZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdGhlbWUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2xhYnMvZGF0ZS9hZGFwdGVycy92dWV0aWZ5Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9sYWJzL2RhdGUvZGF0ZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvcmVzaXplT2JzZXJ2ZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2xheW91dC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvZnJhbWV3b3JrLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZBcHAvVkFwcC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdGFnLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUb29sYmFyL1ZUb29sYmFyVGl0bGUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvdHJhbnNpdGlvbnMvY3JlYXRlVHJhbnNpdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy90cmFuc2l0aW9ucy9leHBhbmQtdHJhbnNpdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy90cmFuc2l0aW9ucy9kaWFsb2ctdHJhbnNpdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy90cmFuc2l0aW9ucy9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WRGVmYXVsdHNQcm92aWRlci9WRGVmYXVsdHNQcm92aWRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvZGltZW5zaW9ucy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WUmVzcG9uc2l2ZS9WUmVzcG9uc2l2ZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdHJhbnNpdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvZGlyZWN0aXZlcy9pbnRlcnNlY3QvaW5kZXgubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkltZy9WSW1nLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9ib3JkZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2NvbG9yLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlRvb2xiYXIvVlRvb2xiYXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL3Njcm9sbC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvc3NyQm9vdC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQXBwQmFyL1ZBcHBCYXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL3ZhcmlhbnQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkJ0bkdyb3VwL1ZCdG5Hcm91cC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvZ3JvdXAubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkJ0blRvZ2dsZS9WQnRuVG9nZ2xlLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9zaXplLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZJY29uL1ZJY29uLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9pbnRlcnNlY3Rpb25PYnNlcnZlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WUHJvZ3Jlc3NDaXJjdWxhci9WUHJvZ3Jlc3NDaXJjdWxhci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvbG9jYXRpb24ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlByb2dyZXNzTGluZWFyL1ZQcm9ncmVzc0xpbmVhci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvbG9hZGVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9wb3NpdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvcm91dGVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9zZWxlY3RMaW5rLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9kaXJlY3RpdmVzL3JpcHBsZS9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQnRuL1ZCdG4ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkFwcEJhci9WQXBwQmFyTmF2SWNvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQXBwQmFyL1ZBcHBCYXJUaXRsZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQWxlcnQvVkFsZXJ0VGl0bGUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkFsZXJ0L1ZBbGVydC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGFiZWwvVkxhYmVsLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZTZWxlY3Rpb25Db250cm9sR3JvdXAvVlNlbGVjdGlvbkNvbnRyb2xHcm91cC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2VsZWN0aW9uQ29udHJvbC9WU2VsZWN0aW9uQ29udHJvbC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ2hlY2tib3gvVkNoZWNrYm94QnRuLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZJbnB1dC9JbnB1dEljb24ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVk1lc3NhZ2VzL1ZNZXNzYWdlcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvZm9jdXMubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2Zvcm0ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL3ZhbGlkYXRpb24ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVklucHV0L1ZJbnB1dC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ2hlY2tib3gvVkNoZWNrYm94Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZBdmF0YXIvVkF2YXRhci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ2hpcEdyb3VwL1ZDaGlwR3JvdXAubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNoaXAvVkNoaXAubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkxpc3QvbGlzdC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvbmVzdGVkL29wZW5TdHJhdGVnaWVzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9uZXN0ZWQvc2VsZWN0U3RyYXRlZ2llcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvbmVzdGVkL25lc3RlZC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGlzdC9WTGlzdEdyb3VwLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SXRlbVN1YnRpdGxlLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SXRlbVRpdGxlLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SXRlbS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGlzdC9WTGlzdFN1YmhlYWRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WRGl2aWRlci9WRGl2aWRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGlzdC9WTGlzdENoaWxkcmVuLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9saXN0LWl0ZW1zLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SW1nLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZMaXN0L1ZMaXN0SXRlbUFjdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGlzdC9WTGlzdEl0ZW1NZWRpYS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WT3ZlcmxheS91dGlsL3BvaW50Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZPdmVybGF5L2xvY2F0aW9uU3RyYXRlZ2llcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WT3ZlcmxheS9yZXF1ZXN0TmV3RnJhbWUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVk92ZXJsYXkvc2Nyb2xsU3RyYXRlZ2llcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTWVudS9zaGFyZWQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2RlbGF5Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZPdmVybGF5L3VzZUFjdGl2YXRvci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvaHlkcmF0aW9uLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9sYXp5Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9zY29wZUlkLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb3NhYmxlcy9zdGFjay5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdGVsZXBvcnQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2RpcmVjdGl2ZXMvY2xpY2stb3V0c2lkZS9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WT3ZlcmxheS9WT3ZlcmxheS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvZm9yd2FyZFJlZnMubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVk1lbnUvVk1lbnUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNvdW50ZXIvVkNvdW50ZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkZpZWxkL1ZGaWVsZExhYmVsLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZGaWVsZC9WRmllbGQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlRleHRGaWVsZC9WVGV4dEZpZWxkLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZWaXJ0dWFsU2Nyb2xsL1ZWaXJ0dWFsU2Nyb2xsSXRlbS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdmlydHVhbC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WVmlydHVhbFNjcm9sbC9WVmlydHVhbFNjcm9sbC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2VsZWN0L3VzZVNjcm9sbGluZy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2VsZWN0L1ZTZWxlY3QubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvc2FibGVzL2ZpbHRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQXV0b2NvbXBsZXRlL1ZBdXRvY29tcGxldGUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkJhZGdlL1ZCYWRnZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQmFubmVyL1ZCYW5uZXJBY3Rpb25zLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZCYW5uZXIvVkJhbm5lclRleHQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkJhbm5lci9WQmFubmVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZCb3R0b21OYXZpZ2F0aW9uL1ZCb3R0b21OYXZpZ2F0aW9uLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZCcmVhZGNydW1icy9WQnJlYWRjcnVtYnNEaXZpZGVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZCcmVhZGNydW1icy9WQnJlYWRjcnVtYnNJdGVtLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZCcmVhZGNydW1icy9WQnJlYWRjcnVtYnMubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNhcmQvVkNhcmRBY3Rpb25zLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZDYXJkL1ZDYXJkU3VidGl0bGUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNhcmQvVkNhcmRUaXRsZS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ2FyZC9WQ2FyZEl0ZW0ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNhcmQvVkNhcmRUZXh0Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZDYXJkL1ZDYXJkLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9kaXJlY3RpdmVzL3RvdWNoL2luZGV4Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZXaW5kb3cvVldpbmRvdy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ2Fyb3VzZWwvVkNhcm91c2VsLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZXaW5kb3cvVldpbmRvd0l0ZW0ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNhcm91c2VsL1ZDYXJvdXNlbEl0ZW0ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNvZGUvaW5kZXgubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNvbG9yUGlja2VyL1ZDb2xvclBpY2tlckNhbnZhcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ29sb3JQaWNrZXIvdXRpbC9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WQ29sb3JQaWNrZXIvVkNvbG9yUGlja2VyRWRpdC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2xpZGVyL3NsaWRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2xpZGVyL1ZTbGlkZXJUaHVtYi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2xpZGVyL1ZTbGlkZXJUcmFjay5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2xpZGVyL1ZTbGlkZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNvbG9yUGlja2VyL1ZDb2xvclBpY2tlclByZXZpZXcubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL3V0aWwvY29sb3JzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZDb2xvclBpY2tlci9WQ29sb3JQaWNrZXJTd2F0Y2hlcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2hlZXQvVlNoZWV0Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZDb2xvclBpY2tlci9WQ29sb3JQaWNrZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkNvbWJvYm94L1ZDb21ib2JveC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WRGlhbG9nL1ZEaWFsb2cubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkV4cGFuc2lvblBhbmVsL1ZFeHBhbnNpb25QYW5lbHMubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkV4cGFuc2lvblBhbmVsL1ZFeHBhbnNpb25QYW5lbFRleHQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkV4cGFuc2lvblBhbmVsL1ZFeHBhbnNpb25QYW5lbFRpdGxlLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZFeHBhbnNpb25QYW5lbC9WRXhwYW5zaW9uUGFuZWwubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkZpbGVJbnB1dC9WRmlsZUlucHV0Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZGb290ZXIvVkZvb3Rlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WRm9ybS9WRm9ybS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WR3JpZC9WQ29udGFpbmVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZHcmlkL1ZDb2wubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkdyaWQvVlJvdy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WR3JpZC9WU3BhY2VyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZIb3Zlci9WSG92ZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkl0ZW1Hcm91cC9WSXRlbUdyb3VwLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZJdGVtR3JvdXAvVkl0ZW0ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVktiZC9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGF5b3V0L1ZMYXlvdXQubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVkxheW91dC9WTGF5b3V0SXRlbS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTGF6eS9WTGF6eS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WTG9jYWxlUHJvdmlkZXIvVkxvY2FsZVByb3ZpZGVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZNYWluL1ZNYWluLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZOYXZpZ2F0aW9uRHJhd2VyL3N0aWNreS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvdG91Y2gubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVk5hdmlnYXRpb25EcmF3ZXIvdG91Y2gubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVk5hdmlnYXRpb25EcmF3ZXIvVk5hdmlnYXRpb25EcmF3ZXIubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVk5vU3NyL1ZOb1Nzci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9zYWJsZXMvcmVmcy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WUGFnaW5hdGlvbi9WUGFnaW5hdGlvbi5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WUGFyYWxsYXgvVlBhcmFsbGF4Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZSYWRpby9WUmFkaW8ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlJhZGlvR3JvdXAvVlJhZGlvR3JvdXAubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlJhbmdlU2xpZGVyL1ZSYW5nZVNsaWRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WUmF0aW5nL1ZSYXRpbmcubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlNsaWRlR3JvdXAvaGVscGVycy5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2xpZGVHcm91cC9WU2xpZGVHcm91cC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU2xpZGVHcm91cC9WU2xpZGVHcm91cEl0ZW0ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlNuYWNrYmFyL1ZTbmFja2Jhci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WU3dpdGNoL1ZTd2l0Y2gubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlN5c3RlbUJhci9WU3lzdGVtQmFyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUYWJzL3NoYXJlZC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WVGFicy9WVGFiLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUYWJzL1ZUYWJzLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUYWJsZS9WVGFibGUubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlRleHRhcmVhL1ZUZXh0YXJlYS5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WVGhlbWVQcm92aWRlci9WVGhlbWVQcm92aWRlci5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvY29tcG9uZW50cy9WVGltZWxpbmUvVlRpbWVsaW5lLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUaW1lbGluZS9WVGltZWxpbmVEaXZpZGVyLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUaW1lbGluZS9WVGltZWxpbmVJdGVtLm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9jb21wb25lbnRzL1ZUb29sYmFyL1ZUb29sYmFySXRlbXMubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlRvb2x0aXAvVlRvb2x0aXAubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2NvbXBvbmVudHMvVlZhbGlkYXRpb24vVlZhbGlkYXRpb24ubWpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZXRpZnkvbGliL2RpcmVjdGl2ZXMvbXV0YXRlL2luZGV4Lm1qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWV0aWZ5L2xpYi9kaXJlY3RpdmVzL3Jlc2l6ZS9pbmRleC5tanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVldGlmeS9saWIvZGlyZWN0aXZlcy9zY3JvbGwvaW5kZXgubWpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvdWkvYXBwcy9FbGVtZW50U3R5bGVFZGl0b3IvZWxlbWVudC1zdHlsZS1lZGl0b3ItYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jb250cm9sLWxpdmUtZWRpdC1sYWJlbC13cmFwcGVyIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwibGl2ZS1lZGl0LWxhYmVsIHB4LTAgY29sLTRcIj5BbGlnbjwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzLWZpZWxkLWNvbnRlbnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWFsaWduXCI+XG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjbGFzcz1cInRhLWxlZnRcIlxuICAgICAgICAgICAgOmNsYXNzPVwieyBhY3RpdmU6IHRleHRBbGlnbiA9PT0gJ2xlZnQnIH1cIlxuICAgICAgICAgICAgQGNsaWNrPVwic2V0VGV4dEFsaWdubWVudCgnbGVmdCcpXCJcbiAgICAgICAgICAgIGRhdGEtdmFsdWU9XCJsZWZ0XCJcbiAgICAgICAgPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRpIG1kaS1mb3JtYXQtYWxpZ24tbGVmdFwiPjwvc3Bhbj5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwidGEtY2VudGVyXCJcbiAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieyBhY3RpdmU6IHRleHRBbGlnbiA9PT0gJ2NlbnRlcicgfVwiXG4gICAgICAgICAgICAgICAgICAgIEBjbGljaz1cInNldFRleHRBbGlnbm1lbnQoJ2NlbnRlcicpXCJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT1cImNlbnRlclwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRpIG1kaS1mb3JtYXQtYWxpZ24tY2VudGVyXCI+PC9zcGFuPlxuICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJ0YS1yaWdodFwiXG4gICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsgYWN0aXZlOiB0ZXh0QWxpZ24gPT09ICdyaWdodCcgfVwiXG4gICAgICAgICAgICAgICAgICAgIEBjbGljaz1cInNldFRleHRBbGlnbm1lbnQoJ3JpZ2h0JylcIlxuICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPVwicmlnaHRcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kaSBtZGktZm9ybWF0LWFsaWduLXJpZ2h0XCI+PC9zcGFuPlxuICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJ0YS1qdXN0aWZ5XCJcbiAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieyBhY3RpdmU6IHRleHRBbGlnbiA9PT0gJ2p1c3RpZnknIH1cIlxuICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJzZXRUZXh0QWxpZ25tZW50KCdqdXN0aWZ5JylcIlxuICAgICAgICAgICAgICAgICAgICBkYXRhLXZhbHVlPVwianVzdGlmeVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRpIG1kaS1mb3JtYXQtYWxpZ24tanVzdGlmeVwiPjwvc3Bhbj5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuICAgICAgICB0ZXh0QWxpZ246IFN0cmluZywgLy8gUGFzcyB0aGUgdGV4dCBhbGlnbm1lbnQgcHJvcGVydHkgYXMgYSBwcm9wXG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHNldFRleHRBbGlnbm1lbnQoYWxpZ25tZW50KSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6dGV4dEFsaWduJywgYWxpZ25tZW50KTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbjwvc2NyaXB0PlxuIiwiPHNjcmlwdCBzZXR1cD5cblxuXG4vLyBkZWZpbmVzIHdoYXQgZXZlbnRzIG91ciBjb21wb25lbnQgZW1pdHNcbmRlZmluZUVtaXRzKFsndXBkYXRlOm1vZGVsVmFsdWUnXSlcbjwvc2NyaXB0PlxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHtcbiAgICBtb2RlbFZhbHVlOiBTdHJpbmcsXG4gICAgbGFiZWw6IFN0cmluZyxcbiAgICBvcHRpb25zOiBBcnJheSxcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0ZWRPcHRpb246IHRoaXMubW9kZWxWYWx1ZSxcbiAgICB9O1xuICB9LFxuICB3YXRjaDoge1xuICAgIG1vZGVsVmFsdWUobmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRPcHRpb24gIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkT3B0aW9uID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICB9LFxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICAgIGhhbmRsZUlucHV0KCkge1xuICAgICAgICAgIC8vIEVtaXQgdGhlIGV2ZW50IG9ubHkgaWYgc2VsZWN0ZWRPcHRpb24gaXMgZGlmZmVyZW50IGZyb20gbW9kZWxWYWx1ZVxuICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkT3B0aW9uICE9PSB0aGlzLm1vZGVsVmFsdWUpIHtcbiAgICAgICAgICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB0aGlzLnNlbGVjdGVkT3B0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICB9LFxuICB9LFxufTtcbjwvc2NyaXB0PlxuXG5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jb250cm9sLWxpdmUtZWRpdC1sYWJlbC13cmFwcGVyIG15LTQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBmbGV4LXdyYXAgZ2FwLTJcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwibGl2ZS1lZGl0LWxhYmVsIHB4LTAgY29sLTRcIiB2LWlmPVwibGFiZWxcIiB2LWh0bWw9XCJsYWJlbFwiPjwvbGFiZWw+XG4gICAgICAgICAgPHNlbGVjdCB2LW1vZGVsPVwic2VsZWN0ZWRPcHRpb25cIiBjbGFzcz1cImZvcm0tY29udHJvbC1saXZlLWVkaXQtaW5wdXQgZm9ybS1zZWxlY3RcIiBAaW5wdXQ9XCIkZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVwiPlxuICAgICAgICAgICAgICAgIDxvcHRpb24gdi1pZj1cInNlbGVjdGVkT3B0aW9uXCIgOnZhbHVlPVwic2VsZWN0ZWRPcHRpb25cIj57eyBzZWxlY3RlZE9wdGlvbiB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgIDxvcHRpb24gdi1mb3I9XCJvcHRpb24gaW4gb3B0aW9uc1wiIDpzZWxlY3RlZD1cInNlbGVjdGVkT3B0aW9uID09PSBvcHRpb24ua2V5XCIgOnZhbHVlPVwib3B0aW9uLmtleVwiPlxuICAgICAgICAgICAgICAgICAge3sgb3B0aW9uLnZhbHVlIH19XG4gICAgICAgICAgICAgICAgPC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImZvcm0tY29udHJvbC1saXZlLWVkaXQtbGFiZWwtd3JhcHBlciBteS00IGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgZmxleC13cmFwIGdhcC0yXCI+XG5cbiAgICA8bGFiZWwgY2xhc3M9XCJsaXZlLWVkaXQtbGFiZWwgcHgtMCBjb2wtNFwiPkZvbnQ8L2xhYmVsPlxuICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sLWxpdmUtZWRpdC1pbnB1dCBmb3JtLXNlbGVjdFwiXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgcmVmPVwiZHJvcGRvd25CdXR0b25cIlxuICAgICAgICAgIGlkPVwiZm9udERyb3Bkb3duXCJcbiAgICAgICAgICBkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCJcblxuICAgICAgICAgIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCJcbiAgICAgICAgICBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj5cbiAgICAgICAgPGRpdiB2LXNob3c9XCJmb250RmFtaWx5XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJmb250LXBpY2tlci1zZWxlY3RlZC1mb250XCIgOnN0eWxlPVwieyBmb250RmFtaWx5OiBmb250RmFtaWx5IH1cIj5cbiAgICAgICAgICAgIHt7IGZvbnRGYW1pbHkgfX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHYtc2hvdz1cIiFmb250RmFtaWx5XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJmb250LXBpY2tlci1zZWxlY3RlZC1mb250XCI+XG4gICAgICAgICAgICBTZWxlY3RcbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9idXR0b24+XG4gICAgICA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCIgYXJpYS1sYWJlbGxlZGJ5PVwiZm9udERyb3Bkb3duXCI+XG4gICAgICAgIDxsaVxuICAgICAgICAgICAgdi1mb3I9XCIoZm9udEZhbWlseUl0ZW0sIGluZGV4KSBpbiBzdXBwb3J0ZWRGb250c1wiXG4gICAgICAgICAgICA6a2V5PVwiaW5kZXhcIlxuICAgICAgICAgICAgOmNsYXNzPVwieyAnYWN0aXZlJzogZm9udEZhbWlseUl0ZW0gPT09IGZvbnRGYW1pbHkgfVwiPlxuICAgICAgICAgIDxhIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIGhyZWY9XCIjXCIgQGNsaWNrPVwic2VsZWN0Rm9udChmb250RmFtaWx5SXRlbSlcIiA6c3R5bGU9XCJ7IGZvbnRGYW1pbHk6IGZvbnRGYW1pbHlJdGVtIH1cIj5cbiAgICAgICAgICAgIHt7IGZvbnRGYW1pbHlJdGVtIH19XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD5cbiAgICAgICAgPHNtYWxsIGNsYXNzPVwiY3Vyc29yLXBvaW50ZXIgbXMtYXV0b1wiIHYtb246Y2xpY2s9XCJsb2FkTW9yZUZvbnRzKClcIj5Mb2FkIG1vcmUgZm9udHMgPC9zbWFsbD5cblxuICA8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZTogU3RyaW5nXG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgdmFsdWUobmV3Rm9udEZhbWlseSkge1xuICAgICAgdGhpcy5mb250RmFtaWx5ID0gbmV3Rm9udEZhbWlseTtcbiAgICB9LFxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBsb2FkTW9yZUZvbnRzKCkge1xuICAgICAgbXcudG9wKCkuYXBwLmZvbnRNYW5hZ2VyLm1hbmFnZUZvbnRzKCk7XG4gICAgfSxcblxuICAgIHNlbGVjdEZvbnQoZm9udEZhbWlseSkge1xuICAgICAgdGhpcy5mb250RmFtaWx5ID0gZm9udEZhbWlseTtcbiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIGZvbnRGYW1pbHkpO1xuICAgIH0sXG4gIH0sXG5cbiAgbW91bnRlZCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc3VwcG9ydGVkRm9udHMgPSBtdy50b3AoKS5hcHAuZm9udE1hbmFnZXIuZ2V0Rm9udHMoKTtcbiAgICAgIHRoaXMuJGZvcmNlVXBkYXRlKCk7XG5cbiAgICAgIG13LnRvcCgpLmFwcC5mb250TWFuYWdlci5zdWJzY3JpYmUoKGZvbnRzKSA9PiB7XG4gICAgICAgIGlmIChmb250cykge1xuICAgICAgICAgIHRoaXMuc3VwcG9ydGVkRm9udHMgPSBmb250cztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfSwgMTAwMCk7XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1cHBvcnRlZEZvbnRzOiBbXSxcbiAgICAgIGZvbnRGYW1pbHk6IHRoaXMudmFsdWUsXG4gICAgfTtcbiAgfSxcbn07XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImZvcm0tY29udHJvbC1saXZlLWVkaXQtbGFiZWwtd3JhcHBlciBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG4gICAgPGxhYmVsIGNsYXNzPVwibGl2ZS1lZGl0LWxhYmVsIHB4LTAgY29sLTRcIj57eyBsYWJlbCB9fSB7eyBzZWxlY3RlZFZhbHVlIH19e3sgdW5pdCB9fTwvbGFiZWw+XG4gICAgPGRpdiBjbGFzcz1cImNvbC02XCIgZGF0YS1zaXplPVwibWVkaXVtXCI+XG4gICAgICA8di1zbGlkZXIgOm1pbj1cIm1pblwiIDptYXg9XCJtYXhcIiA6c3RlcD1cInN0ZXBcIiB2LW1vZGVsPVwic2VsZWN0ZWRWYWx1ZVwiPjwvdi1zbGlkZXI+XG4gICAgICA8c3BhbiBAY2xpY2s9XCJyZXNldFZhbHVlXCIgY2xhc3M9XCJyZXNldC1maWVsZCB0aXAgIG13LWFjdGlvbi1idXR0b25zLWJhY2tncm91bmQtY2lyY2xlLW9uLWhvdmVyXCIgZGF0YS10aXBwb3NpdGlvbj1cInRvcC1yaWdodFwiIGRhdGEtdGlwPVwiUmVzdG9yZSBkZWZhdWx0IHZhbHVlXCI+XG4gICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAtOTYwIDk2MCA5NjBcIiB3aWR0aD1cIjE2XCI+PHBhdGggZD1cIk00NDAtMTIycS0xMjEtMTUtMjAwLjUtMTA1LjVUMTYwLTQ0MHEwLTY2IDI2LTEyNi41VDI2MC02NzJsNTcgNTdxLTM4IDM0LTU3LjUgNzlUMjQwLTQ0MHEwIDg4IDU2IDE1NS41VDQ0MC0yMDJ2ODBabTgwIDB2LTgwcTg3LTE2IDE0My41LTgzVDcyMC00NDBxMC0xMDAtNzAtMTcwdC0xNzAtNzBoLTNsNDQgNDQtNTYgNTYtMTQwLTE0MCAxNDAtMTQwIDU2IDU2LTQ0IDQ0aDNxMTM0IDAgMjI3IDkzdDkzIDIyN3EwIDEyMS03OS41IDIxMS41VDUyMC0xMjJaXCI+PC9wYXRoPjwvc3ZnPlxuICAgICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHtcbiAgICBsYWJlbDogU3RyaW5nLFxuICAgIG1vZGVsVmFsdWU6IE51bWJlciwgLy8gUmVuYW1lIHRoZSBwcm9wIHRvIG1vZGVsVmFsdWVcbiAgICBtaW46IE51bWJlcixcbiAgICBtYXg6IE51bWJlcixcbiAgICBzdGVwOiBOdW1iZXIsXG4gICAgdW5pdDogU3RyaW5nLCAvLyBBZGQgdGhlIHVuaXQgcHJvcFxuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RlZFZhbHVlOiB0aGlzLm1vZGVsVmFsdWUsIC8vIFVzZSBtb2RlbFZhbHVlIGFzIHRoZSBpbml0aWFsIHZhbHVlXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHJlc2V0VmFsdWUoKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkVmFsdWUgPSBudWxsO1xuICAgIH0sXG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgc2VsZWN0ZWRWYWx1ZShuZXdWYWx1ZSkge1xuICAgICAgLy8gT25seSBlbWl0IHRoZSAndXBkYXRlOm1vZGVsVmFsdWUnIGV2ZW50IGlmIHNlbGVjdGVkVmFsdWUgaXMgZGlmZmVyZW50IGZyb20gbW9kZWxWYWx1ZVxuICAgICAgaWYgKG5ld1ZhbHVlICE9PSB0aGlzLm1vZGVsVmFsdWUpIHtcbiAgICAgICAgdGhpcy4kZW1pdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsIG5ld1ZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1vZGVsVmFsdWUobmV3VmFsdWUpIHtcbiAgICAgIC8vIFVwZGF0ZSBzZWxlY3RlZFZhbHVlIHdoZW4gdGhlIHBhcmVudCdzIHYtbW9kZWwgY2hhbmdlc1xuICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlID0gbmV3VmFsdWU7XG4gICAgfSxcbiAgfSxcbn07XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJkLWZsZXhcIj5cbiAgICAgICAgPHN2ZyBmaWxsPVwiY3VycmVudENvbG9yXCIgaGVpZ2h0PVwiMjRcIiB3aWR0aD1cIjI0XCIgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB2ZXJzaW9uPVwiMS4xXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDI0IDI0O1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+XG4gICAgICAgICAgICA8cGF0aCBkPVwiTTIxLDdWM2gtNHYxSDdWM0gzdjRoMXYxMEgzdjRoNHYtMWgxMHYxaDR2LTRoLTFWN0gyMSBNMTgsNGgydjJoLTJWNCBNNCw0aDJ2Mkg0VjQgTTYsMjBINHYtMmgyVjIwIE0yMCwyMGgtMnYtMmgyVjIwICAgTTE4LDE3aC0xdjFIN3YtMUg2VjdoMVY2aDEwdjFoMVYxNyBNMTYsOHYyaC0zdjZoLTJ2LTZIOFY4SDE2elwiPjwvcGF0aD5cbiAgICAgICAgPC9zdmc+XG5cbiAgICAgICAgPGIgY2xhc3M9XCJtdy1hZG1pbi1hY3Rpb24tbGlua3MgbXMtM1wiIDpjbGFzcz1cInsnYWN0aXZlJzogc2hvd1R5cG9ncmFwaHkgfVwiIHYtb246Y2xpY2s9XCJ0b2dnbGVUeXBvZ3JhcGh5XCI+XG4gICAgICAgICAgICBUeXBvZ3JhcGh5XG4gICAgICAgIDwvYj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IHYtaWY9XCJzaG93VHlwb2dyYXBoeVwiPlxuICAgICA8ZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJteS00IHB0LTJcIj5cbiAgICAgICAgICAgIDxGb250UGlja2VyIHYtbW9kZWw9XCJmb250RmFtaWx5XCIgdi1iaW5kOnZhbHVlPWZvbnRGYW1pbHkgQGNoYW5nZT1cImhhbmRsZUZvbnRDaGFuZ2VcIiA6bGFiZWw9XCInRmFtaWx5J1wiLz5cbiAgICAgICAgPC9kaXY+XG5cblxuICAgICAgICA8QWxpZ24gOnRleHRBbGlnbj1cInRleHRBbGlnblwiIEB1cGRhdGU6dGV4dEFsaWduPVwic2V0VGV4dEFsaWdubWVudFwiLz5cblxuXG4gICAgICAgIDxDb2xvclBpY2tlciB2LW1vZGVsPVwiY29sb3JcIiB2LWJpbmQ6Y29sb3I9Y29sb3IgOmxhYmVsPVwiJ0NvbG9yJ1wiIEBjaGFuZ2U9XCJoYW5kbGVGb250Q29sb3JDaGFuZ2VcIi8+XG5cbiAgICAgICAgPFNsaWRlclNtYWxsXG4gICAgICAgICAgICBsYWJlbD1cIlNpemVcIlxuICAgICAgICAgICAgdi1tb2RlbD1cImZvbnRTaXplXCJcbiAgICAgICAgICAgIDptaW49XCIwXCJcbiAgICAgICAgICAgIDptYXg9XCIxMDBcIlxuICAgICAgICAgICAgOnN0ZXA9XCI1XCJcbiAgICAgICAgPjwvU2xpZGVyU21hbGw+XG5cblxuICAgICAgICA8RHJvcGRvd25TbWFsbCB2LW1vZGVsPVwiZm9udFdlaWdodFwiIDpvcHRpb25zPVwiZm9udFdlaWdodE9wdGlvbnNcIiA6bGFiZWw9XCInV2VpZ2h0J1wiLz5cbiAgICAgICAgPERyb3Bkb3duU21hbGwgdi1tb2RlbD1cInRleHRUcmFuc2Zvcm1cIiA6b3B0aW9ucz1cInRleHRUcmFuc2Zvcm1PcHRpb25zXCIgOmxhYmVsPVwiJ1RyYW5zZm9ybSdcIi8+XG4gICAgICAgIDxEcm9wZG93blNtYWxsIHYtbW9kZWw9XCJmb250U3R5bGVcIiA6b3B0aW9ucz1cImZvbnRTdHlsZXNPcHRpb25zXCIgOmxhYmVsPVwiJ1N0eWxlJ1wiLz5cblxuXG4gICAgICAgIDxTbGlkZXJTbWFsbFxuICAgICAgICAgICAgbGFiZWw9XCJIZWlnaHRcIlxuICAgICAgICAgICAgdi1tb2RlbD1cImxpbmVIZWlnaHRcIlxuICAgICAgICAgICAgOm1pbj1cIjBcIlxuICAgICAgICAgICAgOm1heD1cIjEwMFwiXG4gICAgICAgICAgICA6c3RlcD1cIjVcIlxuICAgICAgICA+PC9TbGlkZXJTbWFsbD5cblxuXG4gICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cbmltcG9ydCBJbnB1dCBmcm9tICcuLi8uLi9jb21wb25lbnRzL0Zvcm0vSW5wdXQudnVlJztcbmltcG9ydCBBbGlnbiBmcm9tICcuL2NvbXBvbmVudHMvQWxpZ24udnVlJztcbmltcG9ydCBEcm9wZG93blNtYWxsIGZyb20gJy4vY29tcG9uZW50cy9Ecm9wZG93blNtYWxsLnZ1ZSc7XG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Gb3JtL0Ryb3Bkb3duLnZ1ZSc7XG5pbXBvcnQgRm9udFBpY2tlciBmcm9tIFwiLi9jb21wb25lbnRzL0ZvbnRQaWNrZXIudnVlXCI7XG5pbXBvcnQgQ29sb3JQaWNrZXIgZnJvbSBcIi4vY29tcG9uZW50cy9Db2xvclBpY2tlci52dWVcIjtcbmltcG9ydCBTbGlkZXJTbWFsbCBmcm9tIFwiLi9jb21wb25lbnRzL1NsaWRlclNtYWxsLnZ1ZVwiO1xuaW1wb3J0IFNsaWRlciBmcm9tICdAdnVlZm9ybS9zbGlkZXInO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge0NvbG9yUGlja2VyLCBGb250UGlja2VyLCBEcm9wZG93biwgSW5wdXQsIFNsaWRlciwgQWxpZ24sIERyb3Bkb3duU21hbGwsIFNsaWRlclNtYWxsfSxcbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3Nob3dUeXBvZ3JhcGh5JzogZmFsc2UsXG4gICAgICAgICAgICAnYWN0aXZlTm9kZSc6IG51bGwsXG4gICAgICAgICAgICAnaXNSZWFkeSc6IGZhbHNlLFxuICAgICAgICAgICAgJ3RleHRUcmFuc2Zvcm1PcHRpb25zJzogW1xuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcIm5vbmVcIiwgXCJ2YWx1ZVwiOiBcIk5vbmVcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwiY2FwaXRhbGl6ZVwiLCBcInZhbHVlXCI6IFwiQ2FwaXRhbGl6ZVwifSxcbiAgICAgICAgICAgICAgICB7XCJrZXlcIjogXCJ1cHBlcmNhc2VcIiwgXCJ2YWx1ZVwiOiBcIlVwcGVyY2FzZVwifSxcbiAgICAgICAgICAgICAgICB7XCJrZXlcIjogXCJsb3dlcmNhc2VcIiwgXCJ2YWx1ZVwiOiBcIkxvd2VyY2FzZVwifVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdmb250V2VpZ2h0T3B0aW9ucyc6IFtcbiAgICAgICAgICAgICAgICB7XCJrZXlcIjogXCJub3JtYWxcIiwgXCJ2YWx1ZVwiOiBcIk5vcm1hbFwifSxcbiAgICAgICAgICAgICAgICB7XCJrZXlcIjogXCJib2xkXCIsIFwidmFsdWVcIjogXCJCb2xkXCJ9LFxuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcImJvbGRlclwiLCBcInZhbHVlXCI6IFwiQm9sZGVyXCJ9LFxuICAgICAgICAgICAgICAgIHtcImtleVwiOiBcImxpZ2h0ZXJcIiwgXCJ2YWx1ZVwiOiBcIkxpZ2h0ZXJcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwiMTAwXCIsIFwidmFsdWVcIjogXCIxMDBcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwiMjAwXCIsIFwidmFsdWVcIjogXCIyMDBcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwiMzAwXCIsIFwidmFsdWVcIjogXCIzMDBcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwiNDAwXCIsIFwidmFsdWVcIjogXCI0MDBcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwiNTAwXCIsIFwidmFsdWVcIjogXCI1MDBcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwiNjAwXCIsIFwidmFsdWVcIjogXCI2MDBcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwiNzAwXCIsIFwidmFsdWVcIjogXCI3MDBcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwiODAwXCIsIFwidmFsdWVcIjogXCI4MDBcIn0sXG4gICAgICAgICAgICAgICAge1wia2V5XCI6IFwiOTAwXCIsIFwidmFsdWVcIjogXCI5MDBcIn1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImZvbnRTdHlsZXNPcHRpb25zXCI6IFtcbiAgICAgICAgICAgICAgICB7XCJrZXlcIjogXCJub3JtYWxcIiwgXCJ2YWx1ZVwiOiBcIk5vcm1hbFwifSxcbiAgICAgICAgICAgICAgICB7XCJrZXlcIjogXCJpdGFsaWNcIiwgXCJ2YWx1ZVwiOiBcIkl0YWxpY1wifSxcbiAgICAgICAgICAgICAgICB7XCJrZXlcIjogXCJvYmxpcXVlXCIsIFwidmFsdWVcIjogXCJPYmxpcXVlXCJ9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ3RleHRBbGlnbic6IG51bGwsXG4gICAgICAgICAgICAnZm9udFNpemUnOiBudWxsLFxuICAgICAgICAgICAgJ2ZvbnRXZWlnaHQnOiBudWxsLFxuICAgICAgICAgICAgJ2ZvbnRTdHlsZSc6IG51bGwsXG4gICAgICAgICAgICAnbGluZUhlaWdodCc6IG51bGwsXG4gICAgICAgICAgICAnZm9udEZhbWlseSc6IG51bGwsXG4gICAgICAgICAgICAnY29sb3InOiBudWxsLFxuICAgICAgICAgICAgJ3RleHRUcmFuc2Zvcm0nOiAnbm9uZScsXG4gICAgICAgICAgICAndGV4dERlY29yYXRpb25Jc0JvbGQnOiBudWxsLFxuICAgICAgICAgICAgJ3RleHREZWNvcmF0aW9uSXNJdGFsaWMnOiBudWxsLFxuICAgICAgICAgICAgJ3RleHREZWNvcmF0aW9uSXNVbmRlcmxpbmUnOiBudWxsLFxuICAgICAgICAgICAgJ3RleHREZWNvcmF0aW9uSXNTdHJpa2V0aHJvdWdoJzogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICB0b2dnbGVUeXBvZ3JhcGh5KCkge1xuICAgICAgICAgICAgdGhpcy5zaG93VHlwb2dyYXBoeSA9ICF0aGlzLnNob3dUeXBvZ3JhcGh5O1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2VsZW1lbnQtc3R5bGUtZWRpdG9yLXNob3cnLCAndHlwb2dyYXBoeScpO1xuICAgICAgICB9LFxuICAgICAgICByZXNldEFsbFByb3BlcnRpZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuZm9udFNpemUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5mb250V2VpZ2h0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuZm9udFN0eWxlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMubGluZUhlaWdodCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmZvbnRGYW1pbHkgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5jb2xvciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnRleHRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICAgICAgICB0aGlzLnRleHREZWNvcmF0aW9uSXNCb2xkID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudGV4dERlY29yYXRpb25Jc0l0YWxpYyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnRleHREZWNvcmF0aW9uSXNVbmRlcmxpbmUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy50ZXh0RGVjb3JhdGlvbklzU3RyaWtldGhyb3VnaCA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcG9wdWxhdGVTdHlsZUVkaXRvcjogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlICYmIG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuXG4gICAgICAgICAgICAgICAgbXcudG9wKCkuYXBwLmRpc3BhdGNoKCdtdy5lbGVtZW50U3R5bGVFZGl0b3IuY2xvc2VBbGxPcGVuZWRNZW51cycpO1xuICAgICAgICAgICAgICAgIHZhciBjc3MgPSBtdy5DU1NQYXJzZXIobm9kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldEFsbFByb3BlcnRpZXMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZU5vZGUgPSBub2RlO1xuXG5cbiAgICAgICAgICAgICAgICB0aGlzLnBvcHVsYXRlQ3NzVGV4dEFsaWduKGNzcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZUNzc1RleHREZWNvcmF0aW9uKGNzcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZUNzc0ZvbnQoY3NzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcHVsYXRlQ3NzVGV4dFRyYW5zZm9ybShjc3MpO1xuXG5cblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cblxuICAgICAgICBwb3B1bGF0ZUNzc1RleHRBbGlnbjogZnVuY3Rpb24gKGNzcykge1xuICAgICAgICAgICAgaWYgKCFjc3MgfHwgIWNzcy5nZXQpIHJldHVybjtcbiAgICAgICAgICAgIHZhciBhbGlnbiA9IGNzcy5nZXQuYWxpZ25Ob3JtYWxpemUoKTtcbiAgICAgICAgICAgIHRoaXMudGV4dEFsaWduID0gYWxpZ247XG4gICAgICAgIH0sXG4gICAgICAgIHBvcHVsYXRlQ3NzVGV4dERlY29yYXRpb246IGZ1bmN0aW9uIChjc3MpIHtcbiAgICAgICAgICAgIGlmICghY3NzIHx8ICFjc3MuZ2V0KSByZXR1cm47XG4gICAgICAgICAgICB2YXIgaXMgPSBjc3MuZ2V0LmlzKCk7XG5cbiAgICAgICAgICAgIHRoaXMudGV4dERlY29yYXRpb25Jc0JvbGQgPSBpcy5ib2xkO1xuICAgICAgICAgICAgdGhpcy50ZXh0RGVjb3JhdGlvbklzSXRhbGljID0gaXMuaXRhbGljO1xuICAgICAgICAgICAgdGhpcy50ZXh0RGVjb3JhdGlvbklzVW5kZXJsaW5lID0gaXMudW5kZXJsaW5lZDtcbiAgICAgICAgICAgIHRoaXMudGV4dERlY29yYXRpb25Jc1N0cmlrZXRocm91Z2ggPSBpcy5zdHJpa2VkO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0VGV4dEFsaWdubWVudDogZnVuY3Rpb24gKGFsaWdubWVudCkge1xuICAgICAgICAgICAgdGhpcy50ZXh0QWxpZ24gPSBhbGlnbm1lbnQ7XG5cbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlRm9udENoYW5nZTogZnVuY3Rpb24gKGZvbnRGYW1pbHkpIHtcbiAgICAgICAgICAgIHRoaXMuZm9udEZhbWlseSA9IGZvbnRGYW1pbHk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFuZGxlRm9udENvbG9yQ2hhbmdlOiBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGNvbG9yKSAhPSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBvcHVsYXRlQ3NzRm9udDogZnVuY3Rpb24gKGNzcykge1xuICAgICAgICAgICAgaWYgKCFjc3MgfHwgIWNzcy5nZXQpIHJldHVybjtcbiAgICAgICAgICAgIHZhciBmb250ID0gY3NzLmdldC5mb250KCk7XG5cblxuICAgICAgICAgICAgLy9yZXBhbGNlIHB4XG4gICAgICAgICAgICBpZiAoZm9udC5zaXplKSB7XG4gICAgICAgICAgICAgICAgZm9udC5zaXplID0gZm9udC5zaXplLnJlcGxhY2UoJ3B4JywgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZvbnQubGluZUhlaWdodCkge1xuICAgICAgICAgICAgICAgIGZvbnQubGluZUhlaWdodCA9IGZvbnQubGluZUhlaWdodC5yZXBsYWNlKCdweCcsICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZm9udFNpemUgPSBmb250LnNpemU7XG5cbiAgICAgICAgICAgIHRoaXMuZm9udFdlaWdodCA9IGZvbnQud2VpZ2h0O1xuICAgICAgICAgICAgdGhpcy5mb250U3R5bGUgPSBmb250LnN0eWxlO1xuICAgICAgICAgICAgdGhpcy5saW5lSGVpZ2h0ID0gZm9udC5saW5lSGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5mb250RmFtaWx5ID0gZm9udC5mYW1pbHk7XG4gICAgICAgICAgICB0aGlzLmNvbG9yID0gZm9udC5jb2xvcjtcbiAgICAgICAgfSxcbiAgICAgICAgcG9wdWxhdGVDc3NUZXh0VHJhbnNmb3JtOiBmdW5jdGlvbiAoY3NzKSB7XG4gICAgICAgICAgICBpZiAoIWNzcyB8fCAhY3NzLmdldCkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHRleHRUcmFuc2Zvcm0gPSBjc3MuZ2V0LnRleHRUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIHRoaXMudGV4dFRyYW5zZm9ybSA9IHRleHRUcmFuc2Zvcm07XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZTogZnVuY3Rpb24gKHByb3AsIHZhbCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZU5vZGUpIHtcbiAgICAgICAgICAgICAgICBtdy50b3AoKS5hcHAuZGlzcGF0Y2goJ213LmVsZW1lbnRTdHlsZUVkaXRvci5hcHBseUNzc1Byb3BlcnR5VG9Ob2RlJywge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiB0aGlzLmFjdGl2ZU5vZGUsXG4gICAgICAgICAgICAgICAgICAgIHByb3A6IHByb3AsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogdmFsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICB9LFxuXG4gICAgbW91bnRlZCgpIHtcblxuICAgICAgICB0aGlzLmVtaXR0ZXIub24oXCJlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93XCIsIGVsZW1lbnRTdHlsZUVkaXRvclNob3cgPT4ge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRTdHlsZUVkaXRvclNob3cgIT09ICd0eXBvZ3JhcGh5Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1R5cG9ncmFwaHkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbXcudG9wKCkuYXBwLm9uKCdtdy5lbGVtZW50U3R5bGVFZGl0b3Iuc2VsZWN0Tm9kZScsIChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBvcHVsYXRlU3R5bGVFZGl0b3IoZWxlbWVudClcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHdhdGNoOiB7XG4gICAgICAgIGZvbnRGYW1pbHk6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnZm9udEZhbWlseScsIG5ld1ZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9udFNpemU6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnZm9udFNpemUnLCBuZXdWYWx1ZSArICdweCcpO1xuICAgICAgICB9LFxuICAgICAgICBmb250V2VpZ2h0OiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2ZvbnRXZWlnaHQnLCBuZXdWYWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZvbnRTdHlsZTogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdmb250U3R5bGUnLCBuZXdWYWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRleHRBbGlnbjogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCd0ZXh0QWxpZ24nLCBuZXdWYWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGxpbmVIZWlnaHQ6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBzZXRBdXRvID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodHlwZW9mIChuZXdWYWx1ZSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgc2V0QXV0byA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldEF1dG8gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNldEF1dG8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2xpbmVIZWlnaHQnLCAnYXV0bycpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnbGluZUhlaWdodCcsIG5ld1ZhbHVlICsgJ3B4Jyk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbG9yOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2NvbG9yJywgbmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ3RleHRUcmFuc2Zvcm0nLCBuZXdWYWx1ZSk7XG4gICAgICAgIH0sXG4gICAgfSxcblxuXG59XG48L3NjcmlwdD5cblxuXG4iLCJcblxuPHN0eWxlPlxuXG4ubXctZXNlLWhvbGRlcntcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjZmNmY2Y7XG4gICAgdHJhbnNpdGlvbjogLjJzO1xufVxuXG4ubXctZXNlLWhvbGRlci5hY3RpdmV7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMDA4NmRiO1xuICAgIGJveC1zaGFkb3c6IDAgMCAzcHggcmdiYSgwLCAxMzQsIDIxOSwgLjQpO1xufVxuXG5cblxuICAgIC5tdy1lc2UtbWFyZ2lue1xuXG4gICAgICAgIHBhZGRpbmc6ICAzNXB4IDUwcHg7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIH1cblxuICAgIC5tdy1lc2UtcGFkZGluZ3tcbiAgICAgICAgd2lkdGg6IDEwMHB4O1xuICAgICAgICBoZWlnaHQ6IDY1cHg7XG4gICAgICAgIHBhZGRpbmc6IDUwcHggMzVweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIH1cbiAgICAubXctZWxlbWVudC1zcGFjaW5nLWVkaXRvcntcbiAgICAgICAgcGFkZGluZzogMTBweCAyMHB4O1xuICAgIH1cblxuICAgIC5tdy1lbGVtZW50LXNwYWNpbmctZWRpdG9yIC5pbnB1dCBpbnB1dHtcbiAgICAgICAgd2lkdGg6IDQwcHg7XG4gICAgICAgIGhlaWdodDogMjJweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2NmY2ZjZjtcbiAgICAgICAgcGFkZGluZzogMCAzcHg7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgIH1cbiAgICAubXctZWxlbWVudC1zcGFjaW5nLWVkaXRvciAuaW5wdXR7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcblxuICAgICAgICB6LWluZGV4OiAxO1xuICAgIH1cbiAgICAubXctZXNlLXRvcHtcbiAgICAgICAgdG9wOiAtMTBweDtcbiAgICAgICAgbGVmdDogNTAlO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gICAgfVxuICAgIC5tdy1lc2UtcmlnaHR7XG4gICAgICAgIHRvcDogNTAlO1xuICAgICAgICByaWdodDogLTIwcHg7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICB9XG4gICAgLm13LWVzZS1ib3R0b217XG4gICAgICAgIGJvdHRvbTogLTEwcHg7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICAgIH1cbiAgICAubXctZXNlLWxlZnR7XG4gICAgICAgIHRvcDogNTAlO1xuICAgICAgICBsZWZ0OiAtMjBweDtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAgIH1cbiAgICAubXctZXNlLWxhYmVse1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgZm9udC1zaXplOiAxMHB4O1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIH1cbiAgICAubXctZXNlLXBhZGRpbmcgLm13LWVzZS1sYWJlbHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogNTAlO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAgIH1cbiAgPC9zdHlsZT5cblxuPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cImQtZmxleFwiPlxuICAgICAgICA8c3ZnIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBoZWlnaHQ9XCIyNFwiIHdpZHRoPVwiMjRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgdmVyc2lvbj1cIjEuMVwiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAyNCAyNDtcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPlxuICAgICAgICAgICAgPHBhdGggZD1cIk0xMC42LDEybDQtNEgxMVY2aDd2N2gtMlY5LjRsLTQsNFYxNmg4VjRIOHY4SDEwLjYgTTIyLDJ2MTZIMTJ2NEgyVjEyaDRWMkgyMiBNMTAsMTRINHY2aDZWMTR6XCI+PC9wYXRoPlxuICAgICAgICA8L3N2Zz5cblxuICAgICAgICA8YiBjbGFzcz1cIm13LWFkbWluLWFjdGlvbi1saW5rcyBtcy0zXCIgOmNsYXNzPVwieydhY3RpdmUnOiBzaG93U3BhY2luZyB9XCIgdi1vbjpjbGljaz1cInRvZ2dsZVNwYWNpbmdcIj5cbiAgICAgICAgICAgIFNwYWNpbmdcbiAgICAgICAgPC9iPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiB2LWlmPVwic2hvd1NwYWNpbmdcIj5cblxuXG4gICAgPGRpdiBjbGFzcz1cIm13LWVsZW1lbnQtc3BhY2luZy1lZGl0b3JcIj5cbiAgICA8c3BhbiBjbGFzcz1cIm13LWVzZS1sYWJlbFwiPk1hcmdpbjwvc3Bhbj5cbiAgICA8ZGl2IGNsYXNzPVwibXctZXNlLWhvbGRlciBtdy1lc2UtbWFyZ2luXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQgbXctZXNlLXRvcFwiPjxpbnB1dCB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJtYXJnaW5Ub3BcIj48L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQgbXctZXNlLXJpZ2h0XCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgdi1tb2RlbD1cIm1hcmdpblJpZ2h0XCI+PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0IG13LWVzZS1ib3R0b21cIj48aW5wdXQgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwibWFyZ2luQm90dG9tXCI+PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0IG13LWVzZS1sZWZ0XCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgdi1tb2RlbD1cIm1hcmdpbkxlZnRcIj48L3NwYW4+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtdy1lc2UtaG9sZGVyIG13LWVzZS1wYWRkaW5nXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0IG13LWVzZS10b3BcIj48aW5wdXQgdHlwZT1cInRleHRcIiBtaW49XCIwXCIgdi1tb2RlbD1cInBhZGRpbmdUb3BcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0IG13LWVzZS1yaWdodFwiPjxpbnB1dCB0eXBlPVwidGV4dFwiIG1pbj1cIjBcIiB2LW1vZGVsPVwicGFkZGluZ1JpZ2h0XCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dCBtdy1lc2UtYm90dG9tXCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbWluPVwiMFwiIHYtbW9kZWw9XCJwYWRkaW5nQm90dG9tXCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dCBtdy1lc2UtbGVmdFwiPjxpbnB1dCB0eXBlPVwidGV4dFwiIG1pbj1cIjBcIiB2LW1vZGVsPVwicGFkZGluZ0xlZnRcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm13LWVzZS1sYWJlbFwiPlBhZGRpbmc8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+XG48L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cblxuZXhwb3J0IGRlZmF1bHQge1xuXG5cbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAnc2hvd1NwYWNpbmcnOiBmYWxzZSxcbiAgICAgICdhY3RpdmVOb2RlJzogbnVsbCxcbiAgICAgICdpc1JlYWR5JzogZmFsc2UsXG5cbiAgICAgICdtYXJnaW5Ub3AnOiBudWxsLFxuICAgICAgJ21hcmdpblJpZ2h0JzogbnVsbCxcbiAgICAgICdtYXJnaW5Cb3R0b20nOiBudWxsLFxuICAgICAgJ21hcmdpbkxlZnQnOiBudWxsLFxuXG4gICAgICAncGFkZGluZ1RvcCc6IG51bGwsXG4gICAgICAncGFkZGluZ1JpZ2h0JzogbnVsbCxcbiAgICAgICdwYWRkaW5nQm90dG9tJzogbnVsbCxcbiAgICAgICdwYWRkaW5nTGVmdCc6IG51bGwsXG5cbiAgICB9O1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICAgIHRvZ2dsZVNwYWNpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zaG93U3BhY2luZyA9ICF0aGlzLnNob3dTcGFjaW5nO1xuICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93JywgJ3NwYWNpbmcnKTtcbiAgICB9LFxuICAgIHJlc2V0QWxsUHJvcGVydGllczogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tYXJnaW5Ub3AgPSBudWxsO1xuICAgICAgdGhpcy5tYXJnaW5SaWdodCA9IG51bGw7XG4gICAgICB0aGlzLm1hcmdpbkJvdHRvbSA9IG51bGw7XG4gICAgICB0aGlzLm1hcmdpbkxlZnQgPSBudWxsO1xuXG4gICAgICB0aGlzLnBhZGRpbmdUb3AgPSBudWxsO1xuICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSBudWxsO1xuICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gbnVsbDtcbiAgICAgIHRoaXMucGFkZGluZ0xlZnQgPSBudWxsO1xuICAgIH0sXG5cbiAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKG5vZGUgJiYgbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIHZhciBjc3MgPSBtdy5DU1NQYXJzZXIobm9kZSk7XG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc2V0QWxsUHJvcGVydGllcygpO1xuICAgICAgICB0aGlzLmFjdGl2ZU5vZGUgPSBub2RlO1xuXG4gICAgICAgIHRoaXMucG9wdWxhdGVDc3NQYWRkaW5nKGNzcyk7XG4gICAgICAgIHRoaXMucG9wdWxhdGVDc3NNYXJnaW4oY3NzKTtcblxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICAgIH0sIDEwMCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHBvcHVsYXRlQ3NzUGFkZGluZzogZnVuY3Rpb24gKGNzcykge1xuICAgICAgdmFyIHBhZGRpbmcgPSBjc3MuZ2V0LnBhZGRpbmcodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIHRoaXMucGFkZGluZ1RvcCA9IHBhcnNlRmxvYXQocGFkZGluZy50b3ApO1xuICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSBwYXJzZUZsb2F0KHBhZGRpbmcucmlnaHQpO1xuICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gcGFyc2VGbG9hdChwYWRkaW5nLmJvdHRvbSk7XG4gICAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gcGFyc2VGbG9hdChwYWRkaW5nLmxlZnQpO1xuICAgIH0sXG5cbiAgICBwb3B1bGF0ZUNzc01hcmdpbjogZnVuY3Rpb24gKGNzcykge1xuICAgICAgaWYgKCFjc3MgfHwgIWNzcy5nZXQpIHJldHVybjtcbiAgICAgIHZhciBtYXJnaW4gPSBjc3MuZ2V0Lm1hcmdpbih1bmRlZmluZWQsIHRydWUpO1xuICAgICAgdGhpcy5tYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KG1hcmdpbi50b3ApO1xuICAgICAgdGhpcy5tYXJnaW5SaWdodCA9IHBhcnNlRmxvYXQobWFyZ2luLnJpZ2h0KTtcbiAgICAgIHRoaXMubWFyZ2luQm90dG9tID0gcGFyc2VGbG9hdChtYXJnaW4uYm90dG9tKTtcbiAgICAgIHRoaXMubWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQobWFyZ2luLmxlZnQpO1xuICAgIH0sXG5cblxuICAgIGFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGU6IGZ1bmN0aW9uIChwcm9wLCB2YWwpIHtcbiAgICAgIGlmICghdGhpcy5pc1JlYWR5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuXG4gICAgICBpZiAodGhpcy5hY3RpdmVOb2RlKSB7XG4gICAgICAgIG13LnRvcCgpLmFwcC5kaXNwYXRjaCgnbXcuZWxlbWVudFN0eWxlRWRpdG9yLmFwcGx5Q3NzUHJvcGVydHlUb05vZGUnLCB7XG4gICAgICAgICAgbm9kZTogdGhpcy5hY3RpdmVOb2RlLFxuICAgICAgICAgIHByb3A6IHByb3AsXG4gICAgICAgICAgdmFsOiB2YWxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICB9LFxuICBtb3VudGVkKCkge1xuXG4gICAgICB0aGlzLmVtaXR0ZXIub24oXCJlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93XCIsIGVsZW1lbnRTdHlsZUVkaXRvclNob3cgPT4ge1xuICAgICAgICAgIGlmIChlbGVtZW50U3R5bGVFZGl0b3JTaG93ICE9PSAnc3BhY2luZycpIHtcbiAgICAgICAgICAgICAgdGhpcy5zaG93U3BhY2luZyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgbXcudG9wKCkuYXBwLm9uKCdtdy5lbGVtZW50U3R5bGVFZGl0b3Iuc2VsZWN0Tm9kZScsIChlbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLnBvcHVsYXRlU3R5bGVFZGl0b3IoZWxlbWVudClcbiAgICB9KTtcblxuICB9LFxuXG4gIHdhdGNoOiB7XG4gICAgLy8gTWFyZ2luLXJlbGF0ZWQgcHJvcGVydHkgd2F0Y2hlcnNcbiAgICBtYXJnaW5Ub3A6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnbWFyZ2luVG9wJywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICB9LFxuICAgIG1hcmdpblJpZ2h0OiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ21hcmdpblJpZ2h0JywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICB9LFxuICAgIG1hcmdpbkJvdHRvbTogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdtYXJnaW5Cb3R0b20nLCBuZXdWYWx1ZSArICdweCcpO1xuICAgIH0sXG4gICAgbWFyZ2luTGVmdDogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdtYXJnaW5MZWZ0JywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICB9LFxuXG4gICAgLy8gUGFkZGluZy1yZWxhdGVkIHByb3BlcnR5IHdhdGNoZXJzXG4gICAgIHBhZGRpbmdUb3A6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgncGFkZGluZ1RvcCcsIG5ld1ZhbHVlICsgJ3B4Jyk7XG4gICAgfSxcbiAgICBwYWRkaW5nUmlnaHQ6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgncGFkZGluZ1JpZ2h0JywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICB9LFxuICAgIHBhZGRpbmdCb3R0b206IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgncGFkZGluZ0JvdHRvbScsIG5ld1ZhbHVlICsgJ3B4Jyk7XG4gICAgfSxcbiAgICBwYWRkaW5nTGVmdDogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdwYWRkaW5nTGVmdCcsIG5ld1ZhbHVlICsgJ3B4Jyk7XG4gICAgfSxcblxuICB9LFxuXG5cbn1cbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuIDxkaXYgY2xhc3M9XCJmb3JtLWNvbnRyb2wtbGl2ZS1lZGl0LWxhYmVsLXdyYXBwZXIgbXktNCBiYWNrZ3JvdW5kLWltYWdlLW5hdiBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgPGxhYmVsIGNsYXNzPVwibGl2ZS1lZGl0LWxhYmVsIHB4LTAgdGV4dC1zdGFydFwiPnt7IGxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBjb2xcIj5cbiAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIm13LXVpLWJ0biBtdy11aS1idG4tb3V0bGluZSB0aXAgYmFja2dyb3VuZC1zZWxlY3QtaXRlbVwiIHN0eWxlPVwiYm9yZGVyOiAxcHggc29saWQgIzAwMDtcIlxuICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJzZWxlY3RCYWNrZ3JvdW5kSW1hZ2VcIlxuICAgICAgICAgICAgICAgICAgICBkYXRhLXRpcD1cIlNlbGVjdCBiYWNrZ3JvdW5kIGltYWdlXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgaGVpZ2h0PVwiMjBcIiB2aWV3Qm94PVwiMCAtOTYwIDk2MCA5NjBcIiB3aWR0aD1cIjIwXCI+PHBhdGggZD1cIk0yMDAtMTIwcS0zMyAwLTU2LjUtMjMuNVQxMjAtMjAwdi01NjBxMC0zMyAyMy41LTU2LjVUMjAwLTg0MGg1NjBxMzMgMCA1Ni41IDIzLjVUODQwLTc2MHY1NjBxMCAzMy0yMy41IDU2LjVUNzYwLTEyMEgyMDBabTAtODBoNTYwdi01NjBIMjAwdjU2MFptNDAtODBoNDgwTDU3MC00ODAgNDUwLTMyMGwtOTAtMTIwLTEyMCAxNjBabS00MCA4MHYtNTYwIDU2MFpcIi8+PC9zdmc+XG4gICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPVwiIXNlbGVjdGVkRmlsZVwiIGNsYXNzPVwiYmFja2dyb3VuZC1wcmV2aWV3XCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiBub25lO1wiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9XCJzZWxlY3RlZEZpbGVcIiBjbGFzcz1cImJhY2tncm91bmQtcHJldmlld1wiIDpzdHlsZT1cInsgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7c2VsZWN0ZWRGaWxlfSlgIH1cIj48L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuXG5cbiAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvIGp1c3RpZnktY29udGVudC1lbmQgcGUtNFwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibXctYWN0aW9uLWJ1dHRvbnMtYmFja2dyb3VuZC1jaXJjbGUtb24taG92ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cInJlbW92ZUJhY2tncm91bmRJbWFnZVwiXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YS10aXA9XCJSZW1vdmUgYmFja2dyb3VuZFwiXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YS10aXBwb3NpdGlvbj1cInRvcC1yaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgdi1pZj1cInNlbGVjdGVkRmlsZVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIC05NjAgOTYwIDk2MFwiIHdpZHRoPVwiMTZcIj48cGF0aCBkPVwiTTI4MC0xMjBxLTMzIDAtNTYuNS0yMy41VDIwMC0yMDB2LTUyMGgtNDB2LTgwaDIwMHYtNDBoMjQwdjQwaDIwMHY4MGgtNDB2NTIwcTAgMzMtMjMuNSA1Ni41VDY4MC0xMjBIMjgwWm00MDAtNjAwSDI4MHY1MjBoNDAwdi01MjBaTTM2MC0yODBoODB2LTM2MGgtODB2MzYwWm0xNjAgMGg4MHYtMzYwaC04MHYzNjBaTTI4MC03MjB2NTIwLTUyMFpcIi8+PC9zdmc+XG4gICAgICAgICAgICA8L3NwYW4+XG48IS0tICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtdy1hY3Rpb24tYnV0dG9ucy1iYWNrZ3JvdW5kLWNpcmNsZS1vbi1ob3ZlclwiLS0+XG48IS0tICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwicmVzZXRCYWNrZ3JvdW5kSW1hZ2VcIi0tPlxuPCEtLSAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGlwPVwiUmVzZXQgYmFja2dyb3VuZFwiLS0+XG48IS0tICAgICAgICAgICAgICAgICAgICAgZGF0YS10aXBwb3NpdGlvbj1cInRvcC1yaWdodFwiLS0+XG48IS0tICAgICAgICAgICAgICAgICAgICAgdi1pZj1cInNlbGVjdGVkRmlsZVwiLS0+XG48IS0tICAgICAgICAgICAgICAgPi0tPlxuPCEtLSAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAtOTYwIDk2MCA5NjBcIiB3aWR0aD1cIjE2XCI+PHBhdGggZD1cIk00NDAtMTIycS0xMjEtMTUtMjAwLjUtMTA1LjVUMTYwLTQ0MHEwLTY2IDI2LTEyNi41VDI2MC02NzJsNTcgNTdxLTM4IDM0LTU3LjUgNzlUMjQwLTQ0MHEwIDg4IDU2IDE1NS41VDQ0MC0yMDJ2ODBabTgwIDB2LTgwcTg3LTE2IDE0My41LTgzVDcyMC00NDBxMC0xMDAtNzAtMTcwdC0xNzAtNzBoLTNsNDQgNDQtNTYgNTYtMTQwLTE0MCAxNDAtMTQwIDU2IDU2LTQ0IDQ0aDNxMTM0IDAgMjI3IDkzdDkzIDIyN3EwIDEyMS03OS41IDIxMS41VDUyMC0xMjJaXCI+PC9wYXRoPjwvc3ZnPi0tPlxuPCEtLSAgICAgICAgICAgIDwvc3Bhbj4tLT5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogJ0ltYWdlJywgLy8gRGVmYXVsdCBsYWJlbCB0ZXh0XG4gICAgICAgIH0sXG4gICAgICAgIGZpbGU6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcnLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlbGVjdGVkRmlsZTogdGhpcy5maWxlLFxuICAgICAgICB9O1xuICAgIH0sXG4gIHdhdGNoOiB7XG4gICAgZmlsZShuZXdmaWxlKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkRmlsZSA9IG5ld2ZpbGU7XG4gICAgfSxcbiAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHNlbGVjdEJhY2tncm91bmRJbWFnZSgpIHtcbiAgICAgICAgICAgIG13LmZpbGVQaWNrZXJEaWFsb2coICh1cmwpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRmlsZSA9IHVybDtcblxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuc2VsZWN0ZWRGaWxlKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlQmFja2dyb3VuZEltYWdlKCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpbGUgPSAnJztcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuc2VsZWN0ZWRGaWxlKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXRCYWNrZ3JvdW5kSW1hZ2UoKSB7XG4gICAgICAgICAgICAvLyBJbXBsZW1lbnQgeW91ciByZXNldCBsb2dpYyBoZXJlLCBlLmcuLCBzZXQgJ3NlbGVjdGVkRmlsZScgdG8gYSBkZWZhdWx0IGltYWdlLlxuICAgICAgICAgICAgLy8gRXhhbXBsZTogdGhpcy5zZWxlY3RlZEZpbGUgPSAnZGVmYXVsdC1pbWFnZS11cmwuanBnJztcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuc2VsZWN0ZWRGaWxlKTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4vKiBBZGQgeW91ciBDU1Mgc3R5bGVzIGhlcmUgKi9cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbjxkaXYgY2xhc3M9XCJkLWlubGluZS1mbGV4XCI+XHJcblxyXG4gIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgcmVmPVwiZmlsZXBpY2tlcmlucHV0XCIgdi1tb2RlbD1cInNlbGVjdGVkRmlsZVwiIEBpbnB1dD1cInRyaWdnZXJDaGFuZ2VTZWxlY3RlZEZpbGVcIi8+XHJcblxyXG5cclxuXHJcblxyXG5cclxuICA8YnV0dG9uIHYtaWY9XCJzZWxlY3RlZEZpbGVcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdi1vbjpjbGljaz1cInJlbW92ZUJhY2tncm91bmRJbWFnZSgpXCI+XHJcbiAgICAgPGkgY2xhc3M9XCJtZGkgbWRpLWRlbGV0ZVwiPjwvaT5cclxuICA8L2J1dHRvbj5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gIDxkaXYgdi1pZj1cInNlbGVjdGVkRmlsZVwiIGNsYXNzPVwiZmlsZS1waWNrZXItYmFkZ2VcIlxyXG5cclxuICAgICAgIEBjbGljaz1cInRvZ2dsZVBpY2tlclwiXHJcbiAgICAgICA6c3R5bGU9XCJ7IGJhY2tncm91bmRJbWFnZTogJ3VybCgnICsgc2VsZWN0ZWRGaWxlICsgJyknIH1cIj48L2Rpdj5cclxuXHJcbiAgPGRpdiB2LWlmPVwiIXNlbGVjdGVkRmlsZVwiIGNsYXNzPVwiZmlsZS1waWNrZXItYmFkZ2VcIlxyXG5cclxuICAgICAgIEBjbGljaz1cInRvZ2dsZVBpY2tlclwiPjwvZGl2PlxyXG5cclxuXHJcblxyXG48L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzdHlsZT5cclxuLmh1LWZpbGUtcGlja2VyIHtcclxuICB3aWR0aDogMjAwcHggIWltcG9ydGFudDtcclxuICByaWdodDogMHB4O1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBtYXJnaW4tdG9wOiAycHg7XHJcbiAgei1pbmRleDogOTk7XHJcbn1cclxuXHJcbi5maWxlLXBpY2tlci1iYWRnZSB7XHJcbiAgd2lkdGg6IDMwcHg7XHJcbiAgaGVpZ2h0OiAzMHB4O1xyXG4gIGJhY2tncm91bmQ6ICNkZGQ7XHJcbiAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBsaW5lLWhlaWdodDogMzBweDtcclxuICBib3JkZXItcmFkaXVzOiAxMDAlO1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjZTBlMGUwO1xyXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xyXG5cclxuXHJcbn1cclxuPC9zdHlsZT5cclxuXHJcbjxzY3JpcHQ+XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblxyXG4gIHByb3BzOiB7XHJcbiAgICBmaWxlOiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgZGVmYXVsdDogJydcclxuICAgIH0sXHJcbiAgICBuYW1lOiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgZGVmYXVsdDogJ2ZpbGUnXHJcbiAgICB9XHJcbiAgfSxcclxuICBkYXRhKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc2hvd1BpY2tlcjogZmFsc2UsXHJcbiAgICAgIGljb25EZWxldGU6IGZhbHNlLFxyXG5cclxuICAgICAgc2VsZWN0ZWRGaWxlOiB0aGlzLiRwcm9wcy5maWxlXHJcbiAgICB9XHJcbiAgfSxcclxuICBtb3VudGVkKCkge1xyXG5cclxuXHJcbiAgICBtdy50b3AoKS5hcHAub24oJ213LmVsZW1lbnRTdHlsZUVkaXRvci5jbG9zZUFsbE9wZW5lZE1lbnVzJywgKCkgPT4ge1xyXG4gICAgICB0aGlzLmNsb3NlUGlja2VyKClcclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIHdhdGNoOiB7XHJcbiAgICBmaWxlKG5ld2ZpbGUpIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZEZpbGUgPSBuZXdmaWxlO1xyXG4gICAgfSxcclxuICB9LFxyXG5cclxuICBtZXRob2RzOiB7XHJcbiAgICBjaGFuZ2VmaWxlKGZpbGUpIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZEZpbGUgPSBmaWxlLmhleDtcclxuICAgICAgdGhpcy4kcHJvcHMuZmlsZSA9IGZpbGUuaGV4O1xyXG4gICAgfSxcclxuICAgIHRyaWdnZXJDaGFuZ2VTZWxlY3RlZEZpbGUoKSB7XHJcblxyXG4gICAgICB0aGlzLiRwcm9wcy5maWxlID0gdGhpcy5zZWxlY3RlZEZpbGU7XHJcblxyXG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLiRwcm9wcy5maWxlKTtcclxuICAgIH0sXHJcbiAgICB0cmlnZ2VyQ2hhbmdlKCkge1xyXG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLiRwcm9wcy5maWxlKTtcclxuICAgIH0sXHJcblxyXG4gICAgcmVtb3ZlQmFja2dyb3VuZEltYWdlKCkge1xyXG4gICAgICB0aGlzLnNlbGVjdGVkRmlsZSA9ICcnO1xyXG4gICAgICB0aGlzLiRwcm9wcy5maWxlID0gJyc7XHJcbiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuJHByb3BzLmZpbGUpO1xyXG4gICAgfSxcclxuICAgIGNsb3NlUGlja2VyKCkge1xyXG4gICAgICB0aGlzLnNob3dQaWNrZXIgPSBmYWxzZTtcclxuICAgIH0sXHJcbiAgICAgIHRvZ2dsZVBpY2tlcigpIHtcclxuXHJcblxyXG5cclxuICAgICAgbXcuZmlsZVBpY2tlckRpYWxvZyggKHVybCkgPT4ge1xyXG4gICAgICAgICB0aGlzLnNlbGVjdGVkRmlsZSA9IHVybDtcclxuICAgICAgICB0aGlzLiRwcm9wcy5maWxlID0gdXJsO1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuJHByb3BzLmZpbGUpO1xyXG4gICAgICB9KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgdGhpcy5zaG93UGlja2VyID0gIXRoaXMuc2hvd1BpY2tlcjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuPC9zY3JpcHQ+XHJcbiIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJkLWZsZXhcIj5cbiAgICAgICAgPHN2ZyBmaWxsPVwiY3VycmVudENvbG9yXCIgaGVpZ2h0PVwiMjRcIiB3aWR0aD1cIjI0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHZlcnNpb249XCIxLjFcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMjQgMjQ7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTIuMiwzLjljNC41LDAsOC4xLDMuNiw4LjEsOC4xcy0zLjYsOC4xLTguMSw4LjFTNC4xLDE2LjUsNC4xLDEyUzcuNywzLjksMTIuMiwzLjlcIj48L3BhdGg+XG4gICAgICAgIDwvc3ZnPlxuICAgICAgICA8YiBjbGFzcz1cIm13LWFkbWluLWFjdGlvbi1saW5rcyBtcy0zXCIgOmNsYXNzPVwieydhY3RpdmUnOiBzaG93QmFja2dyb3VuZCB9XCIgdi1vbjpjbGljaz1cInRvZ2dsZUJhY2tncm91bmRcIj5cbiAgICAgICAgICAgIEJhY2tncm91bmRcbiAgICAgICAgPC9iPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiB2LWlmPVwic2hvd0JhY2tncm91bmRcIj5cblxuICAgICAgICA8Q29sb3JQaWNrZXIgdi1tb2RlbD1cImJhY2tncm91bmRDb2xvclwiIHYtYmluZDpjb2xvcj1iYWNrZ3JvdW5kQ29sb3IgOmxhYmVsPVwiJ0NvbG9yJ1wiXG4gICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPVwiaGFuZGxlQmFja2dyb3VuZENvbG9yQ2hhbmdlXCIvPlxuXG5cbiAgICAgICAgPEltYWdlUGlja2VyIGxhYmVsPVwiSW1hZ2VcIiB2LW1vZGVsPVwiYmFja2dyb3VuZEltYWdlXCIgdi1iaW5kOmZpbGU9XCJiYWNrZ3JvdW5kSW1hZ2VVcmxcIlxuICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT1cImhhbmRsZUJhY2tncm91bmRJbWFnZUNoYW5nZVwiLz5cblxuICAgICAgICA8RHJvcGRvd25TbWFsbCB2LW1vZGVsPVwiYmFja2dyb3VuZFNpemVcIiA6b3B0aW9ucz1cImJhY2tncm91bmRTaXplT3B0aW9uc1wiIDpsYWJlbD1cIidTaXplJ1wiLz5cblxuXG4gICAgICAgIDxEcm9wZG93blNtYWxsIHYtbW9kZWw9XCJiYWNrZ3JvdW5kUmVwZWF0XCIgOm9wdGlvbnM9XCJiYWNrZ3JvdW5kUmVwZWF0T3B0aW9uc1wiIDpsYWJlbD1cIidSZXBlYXQnXCIvPlxuXG5cbiAgICAgICAgPERyb3Bkb3duU21hbGwgdi1tb2RlbD1cImJhY2tncm91bmRQb3NpdGlvblwiIDpvcHRpb25zPVwiYmFja2dyb3VuZFBvc2l0aW9uT3B0aW9uc1wiXG4gICAgICAgICAgICAgICAgICAgICAgIDpsYWJlbD1cIidQb3NpdGlvbidcIi8+XG5cblxuICAgICAgICA8RHJvcGRvd25TbWFsbCB2LW1vZGVsPVwiYmFja2dyb3VuZENsaXBcIiA6b3B0aW9ucz1cImJhY2tncm91bmRDbGlwT3B0aW9uc1wiXG4gICAgICAgICAgICAgICAgICAgICAgIDpsYWJlbD1cIidDbGlwJ1wiLz5cblxuXG5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Gb3JtL0lucHV0LnZ1ZSc7XG5pbXBvcnQgSW1hZ2VQaWNrZXIgZnJvbSAnLi9jb21wb25lbnRzL0ltYWdlUGlja2VyLnZ1ZSc7XG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Gb3JtL0Ryb3Bkb3duLnZ1ZSc7XG5pbXBvcnQgRm9udFBpY2tlciBmcm9tIFwiLi9jb21wb25lbnRzL0ZvbnRQaWNrZXIudnVlXCI7XG5pbXBvcnQgQ29sb3JQaWNrZXIgZnJvbSBcIi4vY29tcG9uZW50cy9Db2xvclBpY2tlci52dWVcIjtcbmltcG9ydCBEcm9wZG93blNtYWxsIGZyb20gXCIuL2NvbXBvbmVudHMvRHJvcGRvd25TbWFsbC52dWVcIjtcbmltcG9ydCBTbGlkZXIgZnJvbSAnQHZ1ZWZvcm0vc2xpZGVyJztcbmltcG9ydCBGaWxlUGlja2VyIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0Zvcm0vRmlsZVBpY2tlci52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgY29tcG9uZW50czoge0NvbG9yUGlja2VyLCBGb250UGlja2VyLCBEcm9wZG93biwgSW5wdXQsIFNsaWRlciwgRmlsZVBpY2tlciwgSW1hZ2VQaWNrZXIsIERyb3Bkb3duU21hbGx9LFxuXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdzaG93QmFja2dyb3VuZCc6IGZhbHNlLFxuICAgICAgICAgICAgJ2JhY2tncm91bmRQb3NpdGlvbk9wdGlvbnMnOiBbXG4gICAgICAgICAgICAgICAge2tleTogXCJub25lXCIsIHZhbHVlOiBcIk5vbmVcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCIwJSAwJVwiLCB2YWx1ZTogXCJMZWZ0IFRvcFwifSxcbiAgICAgICAgICAgICAgICB7a2V5OiBcIjUwJSAwJVwiLCB2YWx1ZTogXCJDZW50ZXIgVG9wXCJ9LFxuICAgICAgICAgICAgICAgIHtrZXk6IFwiMTAwJSAwJVwiLCB2YWx1ZTogXCJSaWdodCBUb3BcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCIwJSA1MCVcIiwgdmFsdWU6IFwiTGVmdCBDZW50ZXJcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCI1MCUgNTAlXCIsIHZhbHVlOiBcIkNlbnRlciBDZW50ZXJcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCIxMDAlIDUwJVwiLCB2YWx1ZTogXCJSaWdodCBDZW50ZXJcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCIwJSAxMDAlXCIsIHZhbHVlOiBcIkxlZnQgQm90dG9tXCJ9LFxuICAgICAgICAgICAgICAgIHtrZXk6IFwiNTAlIDEwMCVcIiwgdmFsdWU6IFwiQ2VudGVyIEJvdHRvbVwifSxcbiAgICAgICAgICAgICAgICB7a2V5OiBcIjEwMCUgMTAwJVwiLCB2YWx1ZTogXCJSaWdodCBCb3R0b21cIn1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAnYmFja2dyb3VuZFJlcGVhdE9wdGlvbnMnOiBbXG4gICAgICAgICAgICAgICAge2tleTogXCJub25lXCIsIHZhbHVlOiBcIk5vbmVcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCJyZXBlYXRcIiwgdmFsdWU6IFwicmVwZWF0XCJ9LFxuICAgICAgICAgICAgICAgIHtrZXk6IFwibm8tcmVwZWF0XCIsIHZhbHVlOiBcIm5vLXJlcGVhdFwifSxcbiAgICAgICAgICAgICAgICB7a2V5OiBcInJlcGVhdC14XCIsIHZhbHVlOiBcInJlcGVhdCBob3Jpem9udGFsbHlcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCJyZXBlYXQteVwiLCB2YWx1ZTogXCJyZXBlYXQgdmVydGljYWxseVwifVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kQ2xpcE9wdGlvbnMnOiBbXG4gICAgICAgICAgICAgICAge2tleTogXCJib3JkZXItYm94XCIsIHZhbHVlOiBcIkJvcmRlciBCb3hcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCJjb250ZW50LWJveFwiLCB2YWx1ZTogXCJDb250ZW50IEJveFwifSxcbiAgICAgICAgICAgICAgICB7a2V5OiBcInRleHRcIiwgdmFsdWU6IFwiVGV4dFwifVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kU2l6ZU9wdGlvbnMnOiBbXG4gICAgICAgICAgICAgICAge2tleTogXCJub25lXCIsIHZhbHVlOiBcIk5vbmVcIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCJhdXRvXCIsIHZhbHVlOiBcIkF1dG9cIn0sXG4gICAgICAgICAgICAgICAge2tleTogXCJjb250YWluXCIsIHZhbHVlOiBcIkZpdFwifSxcbiAgICAgICAgICAgICAgICB7a2V5OiBcImNvdmVyXCIsIHZhbHVlOiBcIkNvdmVyXCJ9LFxuICAgICAgICAgICAgICAgIHtrZXk6IFwiMTAwJSAxMDAlXCIsIHZhbHVlOiBcIlNjYWxlXCJ9XG4gICAgICAgICAgICBdLFxuXG4gICAgICAgICAgICAnYWN0aXZlTm9kZSc6IG51bGwsXG4gICAgICAgICAgICAnaXNSZWFkeSc6IGZhbHNlLFxuICAgICAgICAgICAgJ2JhY2tncm91bmRJbWFnZSc6IG51bGwsXG4gICAgICAgICAgICAnYmFja2dyb3VuZENvbG9yJzogbnVsbCxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kUG9zaXRpb24nOiBudWxsLFxuICAgICAgICAgICAgJ2JhY2tncm91bmRSZXBlYXQnOiBudWxsLFxuICAgICAgICAgICAgJ2JhY2tncm91bmRTaXplJzogbnVsbCxcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kSW1hZ2VVcmwnOiBudWxsLFxuICAgICAgICAgICAgJ2JhY2tncm91bmRDbGlwJzogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICB0b2dnbGVCYWNrZ3JvdW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dCYWNrZ3JvdW5kID0gIXRoaXMuc2hvd0JhY2tncm91bmQ7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZWxlbWVudC1zdHlsZS1lZGl0b3Itc2hvdycsICdiYWNrZ3JvdW5kJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVzZXRBbGxQcm9wZXJ0aWVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZVVybCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRSZXBlYXQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kU2l6ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRDbGlwID0gbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUgJiYgbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNzcyA9IG13LkNTU1BhcnNlcihub2RlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0QWxsUHJvcGVydGllcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlTm9kZSA9IG5vZGU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBvcHVsYXRlQ3NzQmFja2dyb3VuZChjc3MpO1xuXG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwb3B1bGF0ZUNzc0JhY2tncm91bmQ6IGZ1bmN0aW9uIChjc3MpIHtcbiAgICAgICAgICAgIGlmICghY3NzIHx8ICFjc3MuZ2V0KSByZXR1cm47XG4gICAgICAgICAgICB2YXIgYmcgPSBjc3MuZ2V0LmJhY2tncm91bmQoKTtcblxuICAgICAgICAgICAgaWYgKGJnLmltYWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJnLmltYWdlLmluZGV4T2YoJ3VybCgnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2VVcmwgPSBiZy5pbWFnZS5yZXBsYWNlKCd1cmwoJywgJycpLnJlcGxhY2UoJyknLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vYWxzbyByZXBsYWNlIFwiXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlVXJsID0gdGhpcy5iYWNrZ3JvdW5kSW1hZ2VVcmwucmVwbGFjZSgvXFxcIi9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZSA9IGJnLmltYWdlO1xuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBiZy5jb2xvcjtcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZFBvc2l0aW9uID0gYmcucG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRSZXBlYXQgPSBiZy5yZXBlYXQ7XG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRTaXplID0gYmcuc2l6ZTtcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZENsaXAgPSBiZy5jbGlwO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhhbmRsZUJhY2tncm91bmRDb2xvckNoYW5nZTogZnVuY3Rpb24gKGNvbG9yKSB7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGNvbG9yKSAhPSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gY29sb3JcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlQmFja2dyb3VuZEltYWdlQ2hhbmdlOiBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICB2YXIgdXJsVmFsID0gdXJsO1xuICAgICAgICAgICAgaWYgKHVybCAmJiB1cmwgIT0gJycgJiYgdXJsICE9ICdub25lJyAmJiB1cmwgIT0gJ2luaGVyaXQnICYmIHVybCAhPSAnaW5pdGlhbCcpIHtcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGNvbnRhaW4gdXJsKFxuICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlVXJsID0gdXJsO1xuICAgICAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZigndXJsKCcpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB1cmxWYWwgPSAndXJsKCcgKyB1cmwgKyAnKSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZVVybCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVybFZhbCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdXJsVmFsID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2UgPSB1cmxWYWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZTogZnVuY3Rpb24gKHByb3AsIHZhbCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZU5vZGUpIHtcbiAgICAgICAgICAgICAgICBtdy50b3AoKS5hcHAuZGlzcGF0Y2goJ213LmVsZW1lbnRTdHlsZUVkaXRvci5hcHBseUNzc1Byb3BlcnR5VG9Ob2RlJywge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiB0aGlzLmFjdGl2ZU5vZGUsXG4gICAgICAgICAgICAgICAgICAgIHByb3A6IHByb3AsXG4gICAgICAgICAgICAgICAgICAgIHZhbDogdmFsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICB9LFxuICAgIG1vdW50ZWQoKSB7XG5cbiAgICAgICAgdGhpcy5lbWl0dGVyLm9uKFwiZWxlbWVudC1zdHlsZS1lZGl0b3Itc2hvd1wiLCBlbGVtZW50U3R5bGVFZGl0b3JTaG93ID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50U3R5bGVFZGl0b3JTaG93ICE9PSAnYmFja2dyb3VuZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dCYWNrZ3JvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG13LnRvcCgpLmFwcC5vbignbXcuZWxlbWVudFN0eWxlRWRpdG9yLnNlbGVjdE5vZGUnLCAoZWxlbWVudCkgPT4ge1xuXG4gICAgICAgICAgICB0aGlzLnBvcHVsYXRlU3R5bGVFZGl0b3IoZWxlbWVudClcblxuICAgICAgICB9KTtcblxuICAgIH0sXG5cbiAgICB3YXRjaDoge1xuICAgICAgICAvLyBCYWNrZ3JvdW5kLXJlbGF0ZWQgcHJvcGVydHkgd2F0Y2hlcnNcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JhY2tncm91bmRJbWFnZScsIG5ld1ZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgYmFja2dyb3VuZENsaXA6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JhY2tncm91bmRDbGlwJywgJ3RleHQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJy13ZWJraXRCYWNrZ3JvdW5kQ2xpcCcsICd0ZXh0Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdjb2xvcicsICdyZ2JhKDAsMCwwLDApJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnYmFja2dyb3VuZENsaXAnLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCctd2Via2l0QmFja2dyb3VuZENsaXAnLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdjb2xvcicsICcnKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnYmFja2dyb3VuZENvbG9yJywgbmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnYmFja2dyb3VuZFBvc2l0aW9uJywgbmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JhY2tncm91bmRSZXBlYXQnLCBuZXdWYWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGJhY2tncm91bmRTaXplOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JhY2tncm91bmRTaXplJywgbmV3VmFsdWUpO1xuICAgICAgICB9LFxuICAgIH0sXG59XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cclxuICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwicm91bmRlZC1jb3JuZXJzXCI+XHJcblxyXG4gICAgICA8ZGl2IGNsYXNzPVwicy1maWVsZC1jb250ZW50XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm13LWZpZWxkIG13LWZpZWxkLWZsYXRcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtdy1tdWx0aXBsZS1maWVsZHNcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm13LWZpZWxkIG13LWZpZWxkLWZsYXRcIj5cclxuICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwicmVndWxhciBvcmRlci0xXCJcclxuICAgICAgICAgICAgICAgICAgbmFtZT1cImJvcmRlclRvcExlZnRSYWRpdXNcIlxyXG4gICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU9XCJvZmZcIlxyXG4gICAgICAgICAgICAgICAgICB2LW1vZGVsPVwic2VsZWN0ZWRCb3JkZXJSYWRpdXMuYm9yZGVyVG9wTGVmdFJhZGl1c1wiXHJcbiAgICAgICAgICAgICAgICAgIEBpbnB1dD1cInVwZGF0ZVZhbHVlcygpXCJcclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibXctZmllbGQgbXctZmllbGQtZmxhdC1wcmVwZW5kIG9yZGVyLTJcIj5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiYW5nbGUgYW5nbGUtdG9wLWxlZnRcIj48L2k+XHJcbiAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm13LWZpZWxkIG13LWZpZWxkLWZsYXRcIj5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm13LWZpZWxkIG13LWZpZWxkLWZsYXQtcHJlcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhbmdsZSBhbmdsZS10b3AtcmlnaHRcIj48L2k+XHJcbiAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cInJlZ3VsYXJcIlxyXG4gICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgbmFtZT1cImJvcmRlclRvcFJpZ2h0UmFkaXVzXCJcclxuICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlPVwib2ZmXCJcclxuICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInNlbGVjdGVkQm9yZGVyUmFkaXVzLmJvcmRlclRvcFJpZ2h0UmFkaXVzXCJcclxuICAgICAgICAgICAgICAgICAgQGlucHV0PVwidXBkYXRlVmFsdWVzKClcIlxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm13LWZpZWxkIG13LWZpZWxkLWZsYXRcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtdy1tdWx0aXBsZS1maWVsZHNcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm13LWZpZWxkIG13LWZpZWxkLWZsYXRcIj5cclxuICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJyZWd1bGFyIG9yZGVyLTFcIlxyXG4gICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgbmFtZT1cImJvcmRlckJvdHRvbUxlZnRSYWRpdXNcIlxyXG4gICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU9XCJvZmZcIlxyXG4gICAgICAgICAgICAgICAgICB2LW1vZGVsPVwic2VsZWN0ZWRCb3JkZXJSYWRpdXMuYm9yZGVyQm90dG9tTGVmdFJhZGl1c1wiXHJcbiAgICAgICAgICAgICAgICAgIEBpbnB1dD1cInVwZGF0ZVZhbHVlcygpXCJcclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibXctZmllbGQgbXctZmllbGQtZmxhdC1wcmVwZW5kIG9yZGVyLTJcIj5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiYW5nbGUgYW5nbGUtYm90dG9tLWxlZnRcIj48L2k+XHJcbiAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm13LWZpZWxkIG13LWZpZWxkLWZsYXRcIj5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm13LWZpZWxkIG13LWZpZWxkLWZsYXQtcHJlcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhbmdsZSBhbmdsZS1ib3R0b20tcmlnaHRcIj48L2k+XHJcbiAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cInJlZ3VsYXJcIlxyXG4gICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgbmFtZT1cImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXCJcclxuICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlPVwib2ZmXCJcclxuICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInNlbGVjdGVkQm9yZGVyUmFkaXVzLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXCJcclxuICAgICAgICAgICAgICAgICAgQGlucHV0PVwidXBkYXRlVmFsdWVzKClcIlxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgcHJvcHM6IHtcclxuICAgIG1vZGVsVmFsdWU6IE9iamVjdCwgLy8gUmVjZWl2ZSBhbiBvYmplY3Qgd2l0aCByYWRpdXMgdmFsdWVzIGFzIGEgcHJvcFxyXG4gIH0sXHJcbiAgZGF0YSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNlbGVjdGVkQm9yZGVyUmFkaXVzOiB7XHJcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJycsXHJcbiAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICcnLFxyXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6ICcnLFxyXG4gICAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAnJyxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuICB3YXRjaDoge1xyXG4gICAgbW9kZWxWYWx1ZShuZXdWYWx1ZSkge1xyXG4gICAgICBpZiAobmV3VmFsdWUpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkQm9yZGVyUmFkaXVzID0geyAuLi5uZXdWYWx1ZSB9O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgbWV0aG9kczoge1xyXG4gICAgdXBkYXRlVmFsdWVzKCkge1xyXG4gICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsIHRoaXMuc2VsZWN0ZWRCb3JkZXJSYWRpdXMpO1xyXG4gICAgfSxcclxuICB9LFxyXG59O1xyXG48L3NjcmlwdD5cclxuIiwiPHN0eWxlPlxuLm13LWZpZWxkIHtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi5tdy1maWVsZC51bml0IGlucHV0ICsgaW5wdXQge1xuICB3aWR0aDogNDBweDtcbiAgcGFkZGluZy1pbmxpbmUtc3RhcnQ6IDA7XG4gIHBhZGRpbmctaW5saW5lLWVuZDogMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4ucm91ZGVkLWNvcm5lcnMge1xuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcbn1cblxuLnJvdWRlZC1jb3JuZXJzIC5tdy1maWVsZCAubXctZmllbGQge1xuICB3aWR0aDogNzBweDtcbiAgbWFyZ2luOiAxMHB4IDAgNXB4O1xufVxuXG4ucm91ZGVkLWNvcm5lcnMgLm13LWZpZWxkIC5tdy1maWVsZCArIC5tdy1maWVsZCB7XG4gIG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDEwcHg7XG59XG5cbi5hbmdsZSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IDE1cHg7XG4gIGhlaWdodDogMTVweDtcbiAgYm9yZGVyOiAxcHggZG90dGVkICNjY2M7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG59XG5cbi5hbmdsZS10b3AtbGVmdCB7XG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDdweDtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjMDAwO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgIzAwMDtcbn1cblxuLmFuZ2xlLXRvcC1yaWdodCB7XG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA3cHg7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICMwMDA7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjMDAwO1xufVxuXG4uYW5nbGUtYm90dG9tLWxlZnQge1xuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA3cHg7XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgIzAwMDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMwMDA7XG59XG5cbi5hbmdsZS1ib3R0b20tcmlnaHQge1xuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogN3B4O1xuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjMDAwO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzAwMDtcbn1cblxuLnMtZmllbGQtY29udGVudCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG48L3N0eWxlPlxuXG48dGVtcGxhdGU+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4XCI+XG4gICAgICAgIDxzdmcgZmlsbD1cImN1cnJlbnRDb2xvclwiIGhlaWdodD1cIjI0XCIgd2lkdGg9XCIyNFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB2ZXJzaW9uPVwiMS4xXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDI0IDI0O1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+XG4gICAgICAgICAgICA8cGF0aCBkPVwiTTE1LDIxaDJ2LTJoLTIgTTE5LDIxaDJ2LTJoLTIgTTcsMjFoMnYtMkg3IE0xMSwyMWgydi0yaC0yIE0xOSwxN2gydi0yaC0yIE0xOSwxM2gydi0yaC0yIE0zLDN2MThoMlY1aDE2VjMgTTE5LDloMlY3aC0yXCI+PC9wYXRoPlxuICAgICAgICA8L3N2Zz5cblxuICAgICAgICA8YiBjbGFzcz1cIm13LWFkbWluLWFjdGlvbi1saW5rcyBtcy0zXCIgOmNsYXNzPVwieydhY3RpdmUnOiBzaG93Qm9yZGVyIH1cIiB2LW9uOmNsaWNrPVwidG9nZ2xlQm9yZGVyXCI+XG4gICAgICAgICAgICBCb3JkZXJcbiAgICAgICAgPC9iPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiB2LWlmPVwic2hvd0JvcmRlclwiPlxuXG4gIDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW4gZ2FwLTNcIj5cblxuPCEtLSAgICAgIDxCb3JkZXJSYWRpdXMgdi1tb2RlbD1cImJvcmRlclJhZGl1c1wiPjwvQm9yZGVyUmFkaXVzPi0tPlxuXG4gICAgPERyb3Bkb3duU21hbGwgdi1tb2RlbD1cImJvcmRlclBvc2l0aW9uXCIgOm9wdGlvbnM9XCJib3JkZXJQb3NpdGlvbk9wdGlvbnNcIiBsYWJlbD1cIkJvcmRlciBQb3NpdGlvblwiLz5cblxuICAgIDxTbGlkZXJTbWFsbCBsYWJlbD1cIkJvcmRlciBTaXplXCIgdi1tb2RlbD1cImJvcmRlclNpemVcIiA6bWluPVwiMFwiIDptYXg9XCIxMjBcIiA6c3RlcD1cIjVcIj48L1NsaWRlclNtYWxsPlxuXG4gICAgPENvbG9yUGlja2VyIHYtbW9kZWw9XCJib3JkZXJDb2xvclwiIHYtYmluZDpjb2xvcj1ib3JkZXJDb2xvciA6bGFiZWw9XCInQm9yZGVyIENvbG9yJ1wiXG4gICAgICAgICAgICAgICAgIEBjaGFuZ2U9XCJoYW5kbGVCb3JkZXJDb2xvckNoYW5nZVwiLz5cblxuICAgIDxkaXY+XG4gICAgICA8RHJvcGRvd25TbWFsbCB2LW1vZGVsPVwiYm9yZGVyU3R5bGVcIiA6b3B0aW9ucz1cImJvcmRlclN0eWxlc09wdGlvbnNcIiBsYWJlbD1cIkJvcmRlciBTdHlsZVwiLz5cbiAgICA8L2Rpdj5cblxuICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBJbnB1dCBmcm9tICcuLi8uLi9jb21wb25lbnRzL0Zvcm0vSW5wdXQudnVlJztcbmltcG9ydCBEcm9wZG93biBmcm9tICcuLi8uLi9jb21wb25lbnRzL0Zvcm0vRHJvcGRvd24udnVlJztcbmltcG9ydCBGb250UGlja2VyIGZyb20gXCIuL2NvbXBvbmVudHMvRm9udFBpY2tlci52dWVcIjtcbmltcG9ydCBDb2xvclBpY2tlciBmcm9tIFwiLi9jb21wb25lbnRzL0NvbG9yUGlja2VyLnZ1ZVwiO1xuaW1wb3J0IERyb3Bkb3duU21hbGwgZnJvbSBcIi4vY29tcG9uZW50cy9Ecm9wZG93blNtYWxsLnZ1ZVwiO1xuaW1wb3J0IFNsaWRlclNtYWxsIGZyb20gXCIuL2NvbXBvbmVudHMvU2xpZGVyU21hbGwudnVlXCI7XG5pbXBvcnQgQm9yZGVyUmFkaXVzIGZyb20gXCIuL2NvbXBvbmVudHMvQm9yZGVyUmFkaXVzLnZ1ZVwiO1xuXG5pbXBvcnQgU2xpZGVyIGZyb20gJ0B2dWVmb3JtL3NsaWRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICBjb21wb25lbnRzOiB7RHJvcGRvd24sIElucHV0LCBGb250UGlja2VyLCBDb2xvclBpY2tlciwgU2xpZGVyLCBEcm9wZG93blNtYWxsLCBTbGlkZXJTbWFsbCwgQm9yZGVyUmFkaXVzfSxcblxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgICdzaG93Qm9yZGVyJzogZmFsc2UsXG4gICAgICAnYWN0aXZlTm9kZSc6IG51bGwsXG4gICAgICAnaXNSZWFkeSc6IGZhbHNlLFxuXG4gICAgICAnYm9yZGVyUG9zaXRpb25PcHRpb25zJzogW1xuICAgICAgICB7XCJrZXlcIjogXCJhbGxcIiwgXCJ2YWx1ZVwiOiBcIkFsbFwifSxcbiAgICAgICAge1wia2V5XCI6IFwidG9wXCIsIFwidmFsdWVcIjogXCJUb3BcIn0sXG4gICAgICAgIHtcImtleVwiOiBcInJpZ2h0XCIsIFwidmFsdWVcIjogXCJSaWdodFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiYm90dG9tXCIsIFwidmFsdWVcIjogXCJCb3R0b21cIn0sXG4gICAgICAgIHtcImtleVwiOiBcImxlZnRcIiwgXCJ2YWx1ZVwiOiBcIkxlZnRcIn0sXG4gICAgICBdLFxuXG4gICAgICAnYm9yZGVyU3R5bGVzT3B0aW9ucyc6IFtcbiAgICAgICAge1wia2V5XCI6IFwibm9uZVwiLCBcInZhbHVlXCI6IFwiTm9uZVwifSxcbiAgICAgICAge1wia2V5XCI6IFwic29saWRcIiwgXCJ2YWx1ZVwiOiBcIlNvbGlkXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJkb3R0ZWRcIiwgXCJ2YWx1ZVwiOiBcIkRvdHRlZFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiZGFzaGVkXCIsIFwidmFsdWVcIjogXCJEYXNoZWRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImRvdWJsZVwiLCBcInZhbHVlXCI6IFwiRG91YmxlXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJncm9vdmVcIiwgXCJ2YWx1ZVwiOiBcIkdyb292ZVwifSxcbiAgICAgICAge1wia2V5XCI6IFwicmlkZ2VcIiwgXCJ2YWx1ZVwiOiBcIlJpZGdlXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJpbnNldFwiLCBcInZhbHVlXCI6IFwiSW5zZXRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcIm91dHNldFwiLCBcInZhbHVlXCI6IFwiT3V0c2V0XCJ9XG4gICAgICBdLFxuXG4gICAgICAnYm9yZGVyUG9zaXRpb24nOiBudWxsLFxuICAgICAgJ2JvcmRlclNpemUnOiBudWxsLFxuICAgICAgJ2JvcmRlckNvbG9yJzogbnVsbCxcbiAgICAgICdib3JkZXJJbWFnZSc6IG51bGwsXG4gICAgICAnYm9yZGVySW1hZ2VVcmwnOiBudWxsLFxuICAgICAgJ2JvcmRlclN0eWxlJzogbnVsbCxcbiAgICAgICdib3JkZXJSYWRpdXMnOiB7XG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6ICcnLFxuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJycsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6ICcnLFxuICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogJycsXG4gICAgICB9LFxuICAgICAgJ2JvcmRlclRvcExlZnRSYWRpdXMnOiBudWxsLFxuICAgICAgJ2JvcmRlclRvcFJpZ2h0UmFkaXVzJzogbnVsbCxcbiAgICAgICdib3JkZXJCb3R0b21SaWdodFJhZGl1cyc6IG51bGwsXG4gICAgICAnYm9yZGVyQm90dG9tTGVmdFJhZGl1cyc6IG51bGwsXG4gICAgfTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgdG9nZ2xlQm9yZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnNob3dCb3JkZXIgPSAhdGhpcy5zaG93Qm9yZGVyO1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZWxlbWVudC1zdHlsZS1lZGl0b3Itc2hvdycsICdib3JkZXInKTtcbiAgICB9LFxuICAgIGhhbmRsZUJvcmRlckNvbG9yQ2hhbmdlKGNvbG9yKSB7XG4gICAgICBpZiAodHlwZW9mIChjb2xvcikgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5ib3JkZXJDb2xvciA9IGNvbG9yO1xuICAgIH0sXG4gICAgcmVzZXRBbGxQcm9wZXJ0aWVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmJvcmRlclBvc2l0aW9uID0gbnVsbDtcbiAgICAgIHRoaXMuYm9yZGVyU2l6ZSA9IG51bGw7XG4gICAgICB0aGlzLmJvcmRlckNvbG9yID0gbnVsbDtcbiAgICAgIHRoaXMuYm9yZGVyU3R5bGUgPSBudWxsO1xuICAgICAgdGhpcy5ib3JkZXJSYWRpdXMgPSB7XG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6ICcnLFxuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJycsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6ICcnLFxuICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogJycsXG4gICAgICB9XG4gICAgICB0aGlzLmJvcmRlclRvcExlZnRSYWRpdXMgPSBudWxsO1xuICAgICAgdGhpcy5ib3JkZXJUb3BSaWdodFJhZGl1cyA9IG51bGw7XG4gICAgICB0aGlzLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzID0gbnVsbDtcbiAgICAgIHRoaXMuYm9yZGVyQm90dG9tTGVmdFJhZGl1cyA9IG51bGw7XG4gICAgICB0aGlzLmJvcmRlckltYWdlVXJsID0gbnVsbDtcbiAgICAgIHRoaXMuYm9yZGVySW1hZ2UgPSBudWxsO1xuICAgIH0sXG5cbiAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKG5vZGUgJiYgbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIHZhciBjc3MgPSBtdy5DU1NQYXJzZXIobm9kZSk7XG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc2V0QWxsUHJvcGVydGllcygpO1xuICAgICAgICB0aGlzLmFjdGl2ZU5vZGUgPSBub2RlO1xuXG4gICAgICAgIHRoaXMucG9wdWxhdGVDc3NCb3JkZXIoY3NzKTtcbiAgICAgICAgdGhpcy5wb3B1bGF0ZUNzc0JvcmRlclJhZGl1cyhjc3MpO1xuXG5cbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICB9LCAxMDApO1xuICAgICAgfVxuICAgIH0sXG4gICAgcG9wdWxhdGVDc3NCb3JkZXI6IGZ1bmN0aW9uIChjc3MpIHtcbiAgICAgIGlmICghY3NzIHx8ICFjc3MuZ2V0KSByZXR1cm47XG4gICAgICB2YXIgYm9yZGVyID0gY3NzLmdldC5ib3JkZXIodHJ1ZSk7XG5cbiAgICAgIHZhciBmcnN0ID0ge307XG4gICAgICBmb3IgKHZhciBpIGluIGJvcmRlcikge1xuICAgICAgICBpZiAoYm9yZGVyW2ldLndpZHRoICE9PSAwKSB7XG4gICAgICAgICAgZnJzdCA9IGJvcmRlcltpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHNpemUgPSBmcnN0LndpZHRoIHx8IDA7XG4gICAgICB2YXIgY29sb3IgPSBmcnN0LmNvbG9yIHx8ICdyZ2JhKDAsMCwwLDEpJztcbiAgICAgIHZhciBzdHlsZSA9IGZyc3Quc3R5bGUgfHwgJ25vbmUnO1xuXG5cbiAgICAgIHRoaXMuYm9yZGVyU2l6ZSA9IHNpemU7XG4gICAgICB0aGlzLmJvcmRlckNvbG9yID0gY29sb3I7XG4gICAgICB0aGlzLmJvcmRlclN0eWxlID0gc3R5bGU7XG4gICAgICB0aGlzLmJvcmRlclBvc2l0aW9uID0gJ2FsbCc7XG4gICAgfSxcbiAgICBwb3B1bGF0ZUNzc0JvcmRlclJhZGl1czogZnVuY3Rpb24gKGNzcykge1xuICAgICAgaWYgKCFjc3MgfHwgIWNzcy5nZXQpIHJldHVybjtcbiAgICAgIHZhciBib3JkZXJSYWRpdXMgPSBjc3MuZ2V0LnJhZGl1cyh0cnVlKTtcblxuICAgICAgdGhpcy5ib3JkZXJUb3BMZWZ0UmFkaXVzID0gYm9yZGVyUmFkaXVzLnRsO1xuICAgICAgdGhpcy5ib3JkZXJUb3BSaWdodFJhZGl1cyA9IGJvcmRlclJhZGl1cy50cjtcbiAgICAgIHRoaXMuYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMgPSBib3JkZXJSYWRpdXMuYnI7XG4gICAgICB0aGlzLmJvcmRlckJvdHRvbUxlZnRSYWRpdXMgPSBib3JkZXJSYWRpdXMuYmw7XG5cbiAgICAgIHRoaXMuYm9yZGVyUmFkaXVzID0ge1xuICAgICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMudGwsXG4gICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBib3JkZXJSYWRpdXMudHIsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IGJvcmRlclJhZGl1cy5ibCxcbiAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IGJvcmRlclJhZGl1cy5icixcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZTogZnVuY3Rpb24gKHByb3AsIHZhbCkge1xuICAgICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5hY3RpdmVOb2RlKSB7XG4gICAgICAgIG13LnRvcCgpLmFwcC5kaXNwYXRjaCgnbXcuZWxlbWVudFN0eWxlRWRpdG9yLmFwcGx5Q3NzUHJvcGVydHlUb05vZGUnLCB7XG4gICAgICAgICAgbm9kZTogdGhpcy5hY3RpdmVOb2RlLFxuICAgICAgICAgIHByb3A6IHByb3AsXG4gICAgICAgICAgdmFsOiB2YWxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICB9LFxuICBtb3VudGVkKCkge1xuXG4gICAgICB0aGlzLmVtaXR0ZXIub24oXCJlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93XCIsIGVsZW1lbnRTdHlsZUVkaXRvclNob3cgPT4ge1xuICAgICAgICAgIGlmIChlbGVtZW50U3R5bGVFZGl0b3JTaG93ICE9PSAnYm9yZGVyJykge1xuICAgICAgICAgICAgICB0aGlzLnNob3dCb3JkZXIgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIG13LnRvcCgpLmFwcC5vbignbXcuZWxlbWVudFN0eWxlRWRpdG9yLnNlbGVjdE5vZGUnLCAoZWxlbWVudCkgPT4ge1xuXG4gICAgICB0aGlzLnBvcHVsYXRlU3R5bGVFZGl0b3IoZWxlbWVudClcblxuICAgIH0pO1xuXG4gIH0sXG5cbiAgd2F0Y2g6IHtcbiAgICBib3JkZXJSYWRpdXM6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcblxuICAgICAgLy9Qcm94eShPYmplY3QpwqB7Ym9yZGVyVG9wTGVmdFJhZGl1czogJycsIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnJywgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogJycsIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAnJ31cblxuICAgICAgdmFyIGJvcmRlclJhZGl1c1ZhbHVlID0gJyc7XG4gICAgICBpZiAobmV3VmFsdWUuYm9yZGVyVG9wTGVmdFJhZGl1cykge1xuICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSBuZXdWYWx1ZS5ib3JkZXJUb3BMZWZ0UmFkaXVzICsgJ3B4ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSAnMHB4ICc7XG4gICAgICB9XG4gICAgICBpZiAobmV3VmFsdWUuYm9yZGVyVG9wUmlnaHRSYWRpdXMpIHtcbiAgICAgICAgYm9yZGVyUmFkaXVzVmFsdWUgKz0gbmV3VmFsdWUuYm9yZGVyVG9wUmlnaHRSYWRpdXMgKyAncHggJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJvcmRlclJhZGl1c1ZhbHVlICs9ICcwcHggJztcbiAgICAgIH1cbiAgICAgIGlmIChuZXdWYWx1ZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1cykge1xuICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSBuZXdWYWx1ZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1cyArICdweCAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYm9yZGVyUmFkaXVzVmFsdWUgKz0gJzBweCAnO1xuICAgICAgfVxuICAgICAgaWYgKG5ld1ZhbHVlLmJvcmRlckJvdHRvbUxlZnRSYWRpdXMpIHtcbiAgICAgICAgYm9yZGVyUmFkaXVzVmFsdWUgKz0gbmV3VmFsdWUuYm9yZGVyQm90dG9tTGVmdFJhZGl1cyArICdweCAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYm9yZGVyUmFkaXVzVmFsdWUgKz0gJzBweCAnO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JvcmRlci1yYWRpdXMnLCBib3JkZXJSYWRpdXNWYWx1ZSk7XG5cblxuICAgIH0sXG4gICAgLy8gQm9yZGVyLXJlbGF0ZWQgcHJvcGVydHkgd2F0Y2hlcnNcbiAgICBib3JkZXJJbWFnZVVybDogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdmFyIGJvcmRlckltYWdlVmFsdWUgPSAnJztcbiAgICAgIGJvcmRlckltYWdlVmFsdWUgKz0gJ3VybCgnICsgbmV3VmFsdWUgKyAnKSAnO1xuICAgICAgYm9yZGVySW1hZ2VWYWx1ZSArPSB0aGlzLmJvcmRlclNpemUgKyAnICc7XG4gICAgICAvLyAgICBib3JkZXJJbWFnZVZhbHVlICs9ICB0aGlzLmJvcmRlclN0eWxlICsgJyAnO1xuICAgICAgYm9yZGVySW1hZ2VWYWx1ZSArPSAnIHNwYWNlICc7XG4gICAgICB0aGlzLmJvcmRlckltYWdlID0gYm9yZGVySW1hZ2VWYWx1ZTtcbiAgICB9LFxuICAgIGJvcmRlckltYWdlOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JvcmRlci1pbWFnZScsIG5ld1ZhbHVlKTtcbiAgICB9LFxuXG4gICAgYm9yZGVyUG9zaXRpb246IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnYm9yZGVyUG9zaXRpb24nLCBuZXdWYWx1ZSk7XG4gICAgfSxcbiAgICBib3JkZXJTaXplOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JvcmRlci13aWR0aCcsIG5ld1ZhbHVlICsgJ3B4Jyk7XG4gICAgfSxcbiAgICBib3JkZXJDb2xvcjogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdib3JkZXItY29sb3InLCBuZXdWYWx1ZSk7XG4gICAgfSxcbiAgICBib3JkZXJTdHlsZTogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdib3JkZXItc3R5bGUnLCBuZXdWYWx1ZSk7XG4gICAgfSxcblxuXG4gICAgLy8gYm9yZGVyVG9wTGVmdFJhZGl1czogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgIC8vICAgdGhpcy5hcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlKCdib3JkZXJUb3BMZWZ0UmFkaXVzJywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICAvLyB9LFxuICAgIC8vIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgLy8gICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JvcmRlclRvcFJpZ2h0UmFkaXVzJywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICAvLyB9LFxuICAgIC8vIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgLy8gICB0aGlzLmFwcGx5UHJvcGVydHlUb0FjdGl2ZU5vZGUoJ2JvcmRlckJvdHRvbVJpZ2h0UmFkaXVzJywgbmV3VmFsdWUgKyAncHgnKTtcbiAgICAvLyB9LFxuICAgIC8vIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAvLyAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnYm9yZGVyQm90dG9tTGVmdFJhZGl1cycsIG5ld1ZhbHVlICsgJ3B4Jyk7XG4gICAgLy8gfSxcbiAgfSxcbn1cbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuXG4gIDxkaXYgdi1zaG93PVwiZGlzcGxheU5vZGVJbmZvXCI+XG5cbiAgICA8ZGl2IGNsYXNzPVwid2VsbFwiPlxuXG4gICAgPGRpdiB2LXNob3c9XCJkaXNwbGF5RG9tVHJlZVwiPlxuICAgICAgPGRpdiBpZD1cImRvbXRyZWVcIj5cblxuXG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuXG5cbiAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGdhcC0yXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJsaXZlLWVkaXQtbGFiZWwgbWItMFwiPlNlbGVjdGVkIGVsZW1lbnQ6PC9sYWJlbD5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiICA6Y2xhc3M9XCJ7J2J0bi1kYXJrJzogZGlzcGxheURvbVRyZWUsICdidG4tb3V0bGluZS1kYXJrJzogIWRpc3BsYXlEb21UcmVlIH1cIiBjbGFzcz1cImJ0biBidG4tc20gXCIgQGNsaWNrPVwidG9nZ2xlRG9tVHJlZVwiPnt7IGRpc3BsYXlOb2RlSW5mbyB9fTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuXG5pbXBvcnQgJy4vZG9tLXRyZWUuY3NzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICAnbm9kZVRhZ05hbWUnOiBudWxsLFxuICAgICAgJ2Rpc3BsYXlOb2RlSW5mbyc6IG51bGwsXG4gICAgICAnZGlzcGxheURvbVRyZWUnOiBudWxsLFxuICAgICAgJ2FjdGl2ZU5vZGUnOiBudWxsLFxuICAgICAgJ2RvbVRyZWUnOiBudWxsLFxuICAgICAgJ2lzUmVhZHknOiBmYWxzZSxcbiAgICB9O1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcblxuICAgIHRvZ2dsZURvbVRyZWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuZGlzcGxheURvbVRyZWUgPSAhdGhpcy5kaXNwbGF5RG9tVHJlZTtcbiAgICAgIGlmICh0aGlzLmRpc3BsYXlEb21UcmVlKSB7XG4gICAgICAgIHRoaXMucG9wdWxhdGVEb21UcmVlKHRoaXMuYWN0aXZlTm9kZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKG5vZGUgJiYgbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG5cbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGlzcGxheU5vZGVJbmZvID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZG9tVHJlZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFjdGl2ZU5vZGUgPSBub2RlO1xuICAgICAgICB0aGlzLnBvcHVsYXRlU2VsZWN0ZWROb2RlKG5vZGUpO1xuICAgICAgICB0aGlzLnBvcHVsYXRlRG9tVHJlZShub2RlKTtcblxuXG5cbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICB9LCAxMDApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBwb3B1bGF0ZVNlbGVjdGVkTm9kZTogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHRoaXMubm9kZVRhZ05hbWUgPSBub2RlLnRhZ05hbWU7XG4gICAgICBpZiAobm9kZS5pZCkge1xuICAgICAgICAgIHRoaXMuZGlzcGxheU5vZGVJbmZvID0gbm9kZS50YWdOYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5Tm9kZUluZm8gPSBub2RlLnRhZ05hbWU7XG4gICAgICB9XG5cbiAgICB9LFxuXG4gICAgcG9wdWxhdGVEb21UcmVlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYoIXRoaXMuZGlzcGxheURvbVRyZWUpe1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cblxuICAgICAgdGhpcy5kb21UcmVlID0gbmV3IG13LkRvbVRyZWUoe1xuICAgICAgICBlbGVtZW50OiAnI2RvbXRyZWUnLFxuICAgICAgICByZXNpemFibGU6IHRydWUsXG4gICAgICAgIC8vIGNvbXBhY3RUcmVlVmlldzogdHJ1ZSxcbiAgICAgICAgLy8gIHRhcmdldERvY3VtZW50OiB0YXJnZXRNdy53aW4uZG9jdW1lbnQsXG4gICAgICAgIHRhcmdldERvY3VtZW50OiBlbGVtZW50Lm93bmVyRG9jdW1lbnQsXG4gICAgICAgIGNhblNlbGVjdDogZnVuY3Rpb24gKG5vZGUsIGxpKSB7XG4gICAgICAgICAgdmFyIGNhbiA9IG13LnRvcCgpLmFwcC5saXZlRWRpdC5jYW5CZUVsZW1lbnQobm9kZSlcbiAgICAgICAgICB2YXIgaXNJbmFjY2Vzc2libGUgPSBtdy50b3AoKS5hcHAubGl2ZUVkaXQubGl2ZUVkaXRIZWxwZXJzLnRhcmdldElzSW5hY2VzaWJsZU1vZHVsZShub2RlKTtcbiAgICAgICAgICBpZiAoaXNJbmFjY2Vzc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cblxuICAgICAgICAgIC8vIGlmICghbm9kZS5pZCkge1xuICAgICAgICAgIC8vICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgICAvLyAgIHJldHVybiBjYW47XG4gICAgICAgICAvLyB2YXIgY2FudCA9ICghbXcudG9vbHMuaXNFZGl0YWJsZShub2RlKSAmJiAhbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2VkaXQnKSAmJiAhbm9kZS5pZCk7XG4gICAgICAgICAgLy9yZXR1cm4gIWNhbnQ7XG4gICAgICAgICAgLy8gcmV0dXJuIG13LnRvb2xzLmlzRWRpdGFibGUobm9kZSkgfHwgbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoJ2VkaXQnKTtcblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBvbkhvdmVyOiBmdW5jdGlvbiAoZSwgdGFyZ2V0LCBub2RlLCBlbGVtZW50KSB7XG5cbiAgICAgICAgfSxcbiAgICAgICAgb25TZWxlY3Q6IChlLCB0YXJnZXQsIG5vZGUsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICBtdy50b3AoKS5hcHAuZGlzcGF0Y2goJ213LmVsZW1lbnRTdHlsZUVkaXRvci5zZWxlY3ROb2RlJywgbm9kZSk7XG4gICAgICAgICAgaWYgKG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5tdykge1xuICAgICAgICAgICAgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lm13LnRvb2xzLnNjcm9sbFRvKG5vZGUsIGZhbHNlLCAxMDApO1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICB9KTtcblxuXG4gICAgICB0aGlzLmRvbVRyZWUuc2VsZWN0KGVsZW1lbnQpXG4gICAgfVxuXG5cbiAgfSxcblxuXG4gIG1vdW50ZWQoKSB7XG4gICAgbXcudG9wKCkuYXBwLm9uKCdtdy5lbGVtZW50U3R5bGVFZGl0b3Iuc2VsZWN0Tm9kZScsIChlbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLnBvcHVsYXRlU3R5bGVFZGl0b3IoZWxlbWVudClcbiAgICB9KTtcbiAgfSxcblxuXG59XG48L3NjcmlwdD5cblxuXG4iLCI8dGVtcGxhdGU+XG4gICAgPGRpdiB2LWlmPVwiaGFzQ29udGFpbmVyXCI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1iLTQgZC1mbGV4XCI+XG4gICAgICAgICAgICA8c3ZnIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBoZWlnaHQ9XCIyNFwiIHdpZHRoPVwiMjRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPlxuICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTE5LDE3SDVWN0gxOU0xOSw1SDVBMiwyIDAgMCwwIDMsN1YxN0EyLDIgMCAwLDAgNSwxOUgxOUEyLDIgMCAwLDAgMjEsMTdWN0MyMSw1Ljg5IDIwLjEsNSAxOSw1WlwiPjwvcGF0aD5cbiAgICAgICAgICAgIDwvc3ZnPlxuXG4gICAgICAgICAgICA8YiBjbGFzcz1cIm13LWFkbWluLWFjdGlvbi1saW5rcyBtcy0zXCIgOmNsYXNzPVwieydhY3RpdmUnOiBzaG93Q29udGFpbmVyIH1cIiB2LW9uOmNsaWNrPVwidG9nZ2xlQ29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgQ29udGFpbmVyXG4gICAgICAgICAgICA8L2I+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgdi1pZj1cInNob3dDb250YWluZXJcIj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwicy1maWVsZFwiIGlkPVwiZmllbGQtY29uYXRpbmVyLXR5cGVcIj5cbiAgICAgICAgICAgIDxsYWJlbD5Db250YWluZXIgdHlwZTwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicy1maWVsZC1jb250ZW50XCI+XG5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJtdy11aS1jaGVja1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImNvbnRhaW5lclR5cGVcIiB2YWx1ZT1cImNvbnRhaW5lclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwiY29udGFpbmVyVHlwZVwiPiA8c3Bhbj48L3NwYW4+IDxzcGFuPkNvbnRhaW5lcjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm13LXVpLWNoZWNrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiY29udGFpbmVyVHlwZVwiIHZhbHVlPVwiY29udGFpbmVyLWZsdWlkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJjb250YWluZXJUeXBlXCI+IDxzcGFuPjwvc3Bhbj4gPHNwYW4+Rmx1aWQ8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cblxuXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPC9kaXY+XG5cbiAgICA8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuXG5pbXBvcnQgRHJvcGRvd25TbWFsbCBmcm9tICcuL2NvbXBvbmVudHMvRHJvcGRvd25TbWFsbC52dWUnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7RHJvcGRvd25TbWFsbH0sXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdzaG93Q29udGFpbmVyJzogZmFsc2UsXG4gICAgICAgICAgICAnYWN0aXZlQ29udGFpbmVyTm9kZSc6IG51bGwsXG4gICAgICAgICAgICAnaXNSZWFkeSc6IGZhbHNlLFxuICAgICAgICAgICAgJ2hhc0NvbnRhaW5lcic6IGZhbHNlLFxuICAgICAgICAgICAgJ2NvbnRhaW5lclR5cGUnOiBudWxsLFxuXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgdG9nZ2xlQ29udGFpbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dDb250YWluZXIgPSAhdGhpcy5zaG93Q29udGFpbmVyO1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2VsZW1lbnQtc3R5bGUtZWRpdG9yLXNob3cnLCAnY29udGFpbmVyJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0QWxsUHJvcGVydGllczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5oYXNDb250YWluZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJUeXBlID0gbnVsbDtcblxuICAgICAgICB9LFxuXG4gICAgICAgIHBvcHVsYXRlU3R5bGVFZGl0b3I6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBpZiAobm9kZSAmJiBub2RlICYmIG5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0QWxsUHJvcGVydGllcygpO1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJOb2RlID0gbXcudG9vbHMuZmlyc3RQYXJlbnRPckN1cnJlbnRXaXRoQW55T2ZDbGFzc2VzKG5vZGUsIFsnY29udGFpbmVyJywgJ2NvbnRhaW5lci1mbHVpZCddKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb250YWluZXJOb2RlICYmIG13LnRvb2xzLmlzRWRpdGFibGUoY29udGFpbmVyTm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lck5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFzQ29udGFpbmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlQ29udGFpbmVyTm9kZSA9IGNvbnRhaW5lck5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcHVsYXRlQ3NzQ29udGFpbmVyRm9yTm9kZShjb250YWluZXJOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuXG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHBvcHVsYXRlQ3NzQ29udGFpbmVyRm9yTm9kZTogZnVuY3Rpb24gKG5vZGUpIHtcblxuICAgICAgICAgICAgaWYgKG5vZGUuY2xhc3NMaXN0ICYmIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb250YWluZXItZmx1aWQnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyVHlwZSA9ICdjb250YWluZXItZmx1aWQnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lclR5cGUgPSAnY29udGFpbmVyJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuXG4gICAgICAgIGFwcGx5Q2xhc3NUb0FjdGl2ZUNvbnRhaW5lck5vZGU6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1JlYWR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlQ29udGFpbmVyTm9kZSkge1xuXG5cblxuICAgICAgICAgICAgICAgIGlmICh2YWwgPT09ICdjb250YWluZXItZmx1aWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIG13LnRvcCgpLmFwcC5kaXNwYXRjaCgnbXcuZWxlbWVudFN0eWxlRWRpdG9yLnJlbW92ZUNsYXNzRnJvbU5vZGUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlOiB0aGlzLmFjdGl2ZUNvbnRhaW5lck5vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2NvbnRhaW5lcidcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG13LnRvcCgpLmFwcC5kaXNwYXRjaCgnbXcuZWxlbWVudFN0eWxlRWRpdG9yLmFkZENsYXNzVG9Ob2RlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogdGhpcy5hY3RpdmVDb250YWluZXJOb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb250YWluZXItZmx1aWQnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG13LnRvcCgpLmFwcC5kaXNwYXRjaCgnbXcuZWxlbWVudFN0eWxlRWRpdG9yLnJlbW92ZUNsYXNzRnJvbU5vZGUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlOiB0aGlzLmFjdGl2ZUNvbnRhaW5lck5vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2NvbnRhaW5lci1mbHVpZCdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG13LnRvcCgpLmFwcC5kaXNwYXRjaCgnbXcuZWxlbWVudFN0eWxlRWRpdG9yLmFkZENsYXNzVG9Ob2RlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogdGhpcy5hY3RpdmVDb250YWluZXJOb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6ICdjb250YWluZXInXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgfSxcblxuICAgIG1vdW50ZWQoKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5vbihcImVsZW1lbnQtc3R5bGUtZWRpdG9yLXNob3dcIiwgZWxlbWVudFN0eWxlRWRpdG9yU2hvdyA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudFN0eWxlRWRpdG9yU2hvdyAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dDb250YWluZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG13LnRvcCgpLmFwcC5vbignbXcuZWxlbWVudFN0eWxlRWRpdG9yLnNlbGVjdE5vZGUnLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZVN0eWxlRWRpdG9yKGVsZW1lbnQpXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICB3YXRjaDoge1xuICAgICAgICBjb250YWluZXJUeXBlOiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5Q2xhc3NUb0FjdGl2ZUNvbnRhaW5lck5vZGUobmV3VmFsdWUpO1xuXG4gICAgICAgIH0sXG5cbiAgICB9LFxuXG5cbn1cbjwvc2NyaXB0PlxuXG5cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZW1lbnRTdHlsZUFuaW1hdGlvbnNBcHBsaWVyIHtcclxuXHJcblxyXG4gICAgc3RhdGljIHByZXZpZXdBbmltYXRpb24obm9kZSwgYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgdmFyIG5vZGVXaW5kb3cgPSBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XHJcblxyXG4gICAgICAgIHZhciBzZWwgPSBub2RlV2luZG93Lm13LnRvb2xzLmdlbmVyYXRlU2VsZWN0b3JGb3JOb2RlKG5vZGUpO1xyXG4gICAgICAgIHZhciBpZCA9IG5vZGVXaW5kb3cubXcuaWQoJ2FuaW1hdGlvbicpO1xyXG5cclxuICAgICAgICB2YXIgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7c2VsZWN0b3I6IHNlbCwgaWQ6IGlkfSwgYW5pbWF0aW9uKTtcclxuICAgICAgICBub2RlV2luZG93Lm13Ll9fYW5pbWF0ZShjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZW1vdmVBbmltYXRpb25zKG5vZGUpIHtcclxuICAgICAgICB2YXIgbm9kZVdpbmRvdyA9IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcclxuICAgICAgICB2YXIgdGFyZ2V0TXcgPSBub2RlV2luZG93Lm13O1xyXG4gICAgICAgIHZhciBzZWwgPSBub2RlV2luZG93Lm13LnRvb2xzLmdlbmVyYXRlU2VsZWN0b3JGb3JOb2RlKG5vZGUpO1xyXG5cclxuICAgICAgICB2YXIgY3VyciA9IG5vZGVXaW5kb3cubXcuX19wYWdlQW5pbWF0aW9ucy5maW5kKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLnNlbGVjdG9yID09PSBzZWw7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKCFjdXJyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB2YXIgaXRlbSA9IGN1cnI7XHJcbiAgICAgICAgdmFyIGNpdGVtID0gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSk7XHJcbiAgICAgICAgdGFyZ2V0TXcuX19wYWdlQW5pbWF0aW9ucy5zcGxpY2UodGFyZ2V0TXcuX19wYWdlQW5pbWF0aW9ucy5pbmRleE9mKGl0ZW0pLCAxKTtcclxuICAgICAgICBBcnJheS5mcm9tKHRhcmdldE13LmRvYy5xdWVyeVNlbGVjdG9yQWxsKGNpdGVtLnNlbGVjdG9yKSkuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgICAgICBpZiAobm9kZS4kJG13QW5pbWF0aW9ucyAmJiBub2RlLiQkbXdBbmltYXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGkgPSBub2RlLiQkbXdBbmltYXRpb25zLmZpbmRJbmRleChmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmlkID09PSBpdGVtLmlkO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS4kJG13QW5pbWF0aW9ucy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNldEFuaW1hdGlvbihub2RlLCBhbmltYXRpb24pIHtcclxuXHJcblxyXG4gICAgICAgIHZhciBub2RlV2luZG93ID0gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xyXG5cclxuICAgICAgICB2YXIgc2VsID0gbm9kZVdpbmRvdy5tdy50b29scy5nZW5lcmF0ZVNlbGVjdG9yRm9yTm9kZShub2RlKTtcclxuICAgICAgICB2YXIgaWQgPSBub2RlV2luZG93Lm13LmlkKCdhbmltYXRpb24nKTtcclxuXHJcbiAgICAgICAgaWYgKCFub2RlLiQkbXdBbmltYXRpb25zKSB7XHJcbiAgICAgICAgICAgIG5vZGUuJCRtd0FuaW1hdGlvbnMgPSBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVtb3ZlQW5pbWF0aW9ucyhub2RlKTtcclxuXHJcbiAgICAgICAgaWYgKCFub2RlLiQkbXdBbmltYXRpb25zKSB7XHJcbiAgICAgICAgICAgIG5vZGUuJCRtd0FuaW1hdGlvbnMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe3NlbGVjdG9yOiBzZWwsIGlkOiBpZH0sIGFuaW1hdGlvbik7XHJcbiAgICAgICAgbm9kZS4kJG13QW5pbWF0aW9ucy5wdXNoKGNvbmZpZylcclxuICAgICAgICBub2RlV2luZG93Lm13Ll9fcGFnZUFuaW1hdGlvbnMucHVzaChjb25maWcpXHJcblxyXG4gICAgICAgIG5vZGVXaW5kb3cubXcuX19hbmltYXRlKGNvbmZpZyk7XHJcblxyXG5cclxuICAgICAgICBpZihtdy50b3AoKS5hcHApe1xyXG4gICAgICAgICAgICBtdy50b3AoKS5hcHAucmVnaXN0ZXJDaGFuZ2Uobm9kZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzdGF0aWMgc3VwcG9ydHNBbmltYXRpb25zKG5vZGUpIHtcclxuICAgICAgICBpZiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcubXcgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lm13Ll9fYW5pbWF0ZSkge1xyXG4gICAgICAgICAgICBpZiAobm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lm13LnRvb2xzLmlzRWRpdGFibGUobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0QW5pbWF0aW9uKG5vZGUpIHtcclxuICAgICAgICB2YXIgbm9kZVdpbmRvdyA9IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcclxuICAgICAgICBpZiAobm9kZVdpbmRvdy5tdy5fX3BhZ2VBbmltYXRpb25zKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgdmFyIHNlbCA9IG5vZGVXaW5kb3cubXcudG9vbHMuZ2VuZXJhdGVTZWxlY3RvckZvck5vZGUobm9kZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgY3VyciA9IG5vZGVXaW5kb3cubXcuX19wYWdlQW5pbWF0aW9ucy5maW5kKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5zZWxlY3RvciA9PT0gc2VsO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGN1cnIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiB2LWlmPVwic3VwcG9ydHNBbmltYXRpb25zXCI+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJtYi00IGQtZmxleFwiPlxuXG4gICAgICAgICAgPHN2ZyBmaWxsPVwiY3VycmVudENvbG9yXCIgaGVpZ2h0PVwiMjRcIiB3aWR0aD1cIjI0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZlcnNpb249XCIxLjFcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+XG4gICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTQsMkEyLDIgMCAwLDAgMiw0VjE0SDRWNEgxNFYySDRNOCw2QTIsMiAwIDAsMCA2LDhWMThIOFY4SDE4VjZIOE0yMCwxMlYyMEgxMlYxMkgyME0yMCwxMEgxMkEyLDIgMCAwLDAgMTAsMTJWMjBBMiwyIDAgMCwwIDEyLDIySDIwQTIsMiAwIDAsMCAyMiwyMFYxMkEyLDIgMCAwLDAgMjAsMTBNMTQsMTNWMTlMMTgsMTZMMTQsMTNaXCI+PC9wYXRoPlxuICAgICAgICAgIDwvc3ZnPlxuXG4gICAgICAgICAgPGIgY2xhc3M9XCJtdy1hZG1pbi1hY3Rpb24tbGlua3MgbXMtM1wiIDpjbGFzcz1cInsnYWN0aXZlJzogc2hvd0FuaW1hdGlvbnMgfVwiIHYtb246Y2xpY2s9XCJ0b2dnbGVBbmltYXRpb25zXCI+XG4gICAgICAgICAgICAgIEFuaW1hdGlvbnNcbiAgICAgICAgICA8L2I+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiB2LWlmPVwic2hvd0FuaW1hdGlvbnNcIj5cblxuICAgICAgPERyb3Bkb3duU21hbGwgdi1tb2RlbD1cInNlbGVjdGVkQW5pbWF0aW9uXCIgOm9wdGlvbnM9XCJhbmltYXRpb25zXCIgOmxhYmVsPVwiJ0FuaW1hdGlvbidcIi8+XG5cbiAgICA8ZGl2IHYtaWY9XCJzZWxlY3RlZEFuaW1hdGlvblwiPlxuICAgICAgPERyb3Bkb3duU21hbGwgdi1tb2RlbD1cInNlbGVjdGVkQW5pbWF0aW9uV2hlbkFwcGVhclwiIDpvcHRpb25zPVwiYW5pbWF0aW9uc0FwcGVhclwiIDpsYWJlbD1cIidXaGVuJ1wiLz5cblxuICAgICAgPFNsaWRlclNtYWxsIHYtbW9kZWw9XCJzZWxlY3RlZEFuaW1hdGlvblNwZWVkXCIgOmxhYmVsPVwiJ1NwZWVkJ1wiIDptaW49XCIwLjFcIiA6bWF4PVwiNVwiIDpzdGVwPVwiMC4xXCIgOnVuaXQ9XCIncydcIi8+XG5cblxuICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cblxuaW1wb3J0IERyb3Bkb3duU21hbGwgZnJvbSBcIi4vY29tcG9uZW50cy9Ecm9wZG93blNtYWxsLnZ1ZVwiO1xuaW1wb3J0IFNsaWRlclNtYWxsIGZyb20gXCIuL2NvbXBvbmVudHMvU2xpZGVyU21hbGwudnVlXCI7XG5pbXBvcnQgRWxlbWVudFN0eWxlQW5pbWF0aW9uc0FwcGxpZXIgZnJvbSBcIi4vRWxlbWVudFN0eWxlQW5pbWF0aW9uc0FwcGxpZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7RHJvcGRvd25TbWFsbCwgU2xpZGVyU21hbGx9LFxuXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ3Nob3dBbmltYXRpb25zJzogZmFsc2UsXG4gICAgICAnYWN0aXZlTm9kZSc6IG51bGwsXG4gICAgICAnaXNSZWFkeSc6IGZhbHNlLFxuICAgICAgJ3NlbGVjdGVkQW5pbWF0aW9uJzogZmFsc2UsXG4gICAgICAnc2VsZWN0ZWRBbmltYXRpb25TcGVlZCc6IGZhbHNlLFxuICAgICAgJ3NlbGVjdGVkQW5pbWF0aW9uV2hlbkFwcGVhcic6IGZhbHNlLFxuICAgICAgJ3N1cHBvcnRzQW5pbWF0aW9ucyc6IGZhbHNlLFxuXG4gICAgICAnYW5pbWF0aW9uc0FwcGVhcic6IFtcbiAgICAgICAge1wia2V5XCI6IFwibm9uZVwiLCBcInZhbHVlXCI6IFwiTm9uZVwifSxcbiAgICAgICAge1wia2V5XCI6IFwib25BcHBlYXJcIiwgXCJ2YWx1ZVwiOiBcIldoZW4gZWxlbWVudCBhcHBlYXJzIG9uIHNjcmVlblwifSxcbiAgICAgICAge1wia2V5XCI6IFwib25Ib3ZlclwiLCBcInZhbHVlXCI6IFwiV2hlbiBtb3VzZSBpcyBvdmVyXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJvbkNsaWNrXCIsIFwidmFsdWVcIjogXCJXaGVuIGVsZW1lbnQgaXMgY2xpY2tlZFwifSxcbiAgICAgIF0sXG5cbiAgICAgICdhbmltYXRpb25zJzogW1xuICAgICAgICB7XCJrZXlcIjogXCJub25lXCIsIFwidmFsdWVcIjogXCJOb25lXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJib3VuY2VcIiwgXCJ2YWx1ZVwiOiBcIkJvdW5jZVwifSxcbiAgICAgICAge1wia2V5XCI6IFwiZmxhc2hcIiwgXCJ2YWx1ZVwiOiBcIkZsYXNoXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJwdWxzZVwiLCBcInZhbHVlXCI6IFwiUHVsc2VcIn0sXG4gICAgICAgIHtcImtleVwiOiBcInJ1YmJlckJhbmRcIiwgXCJ2YWx1ZVwiOiBcIlJ1YmJlciBCYW5kXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJzaGFrZVhcIiwgXCJ2YWx1ZVwiOiBcIlNoYWtlIFhcIn0sXG4gICAgICAgIHtcImtleVwiOiBcInNoYWtlWVwiLCBcInZhbHVlXCI6IFwiU2hha2UgWVwifSxcbiAgICAgICAge1wia2V5XCI6IFwiaGVhZFNoYWtlXCIsIFwidmFsdWVcIjogXCJIZWFkIFNoYWtlXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJzd2luZ1wiLCBcInZhbHVlXCI6IFwiU3dpbmdcIn0sXG4gICAgICAgIHtcImtleVwiOiBcInRhZGFcIiwgXCJ2YWx1ZVwiOiBcIlRhZGFcIn0sXG4gICAgICAgIHtcImtleVwiOiBcIndvYmJsZVwiLCBcInZhbHVlXCI6IFwiV29iYmxlXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJqZWxsb1wiLCBcInZhbHVlXCI6IFwiSmVsbG9cIn0sXG4gICAgICAgIHtcImtleVwiOiBcImhlYXJ0QmVhdFwiLCBcInZhbHVlXCI6IFwiSGVhcnQgQmVhdFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiZmxpcFwiLCBcInZhbHVlXCI6IFwiRmxpcFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiZmxpcEluWFwiLCBcInZhbHVlXCI6IFwiRmxpcCBJbiBYXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJmbGlwSW5ZXCIsIFwidmFsdWVcIjogXCJGbGlwIEluIFlcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImhpbmdlXCIsIFwidmFsdWVcIjogXCJIaW5nZVwifSxcbiAgICAgICAge1wia2V5XCI6IFwiamFja0luVGhlQm94XCIsIFwidmFsdWVcIjogXCJKYWNrIEluIFRoZSBCb3hcIn0sXG4gICAgICAgIHtcImtleVwiOiBcInJvbGxJblwiLCBcInZhbHVlXCI6IFwiUm9sbCBJblwifSxcbiAgICAgICAge1wia2V5XCI6IFwiYmFja0luRG93blwiLCBcInZhbHVlXCI6IFwiQmFjayBJbiBEb3duXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJiYWNrSW5MZWZ0XCIsIFwidmFsdWVcIjogXCJCYWNrIEluIExlZnRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImJhY2tJblJpZ2h0XCIsIFwidmFsdWVcIjogXCJCYWNrIEluIFJpZ2h0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJiYWNrSW5VcFwiLCBcInZhbHVlXCI6IFwiQmFjayBJbiBVcFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiYm91bmNlSW5cIiwgXCJ2YWx1ZVwiOiBcIkJvdW5jZSBJblwifSxcbiAgICAgICAge1wia2V5XCI6IFwiYm91bmNlSW5Eb3duXCIsIFwidmFsdWVcIjogXCJCb3VuY2UgSW4gRG93blwifSxcbiAgICAgICAge1wia2V5XCI6IFwiYm91bmNlSW5MZWZ0XCIsIFwidmFsdWVcIjogXCJCb3VuY2UgSW4gTGVmdFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiYm91bmNlSW5SaWdodFwiLCBcInZhbHVlXCI6IFwiQm91bmNlIEluIFJpZ2h0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJib3VuY2VJblVwXCIsIFwidmFsdWVcIjogXCJCb3VuY2UgSW4gVXBcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImZhZGVJblwiLCBcInZhbHVlXCI6IFwiRmFkZSBJblwifSxcbiAgICAgICAge1wia2V5XCI6IFwiZmFkZUluRG93blwiLCBcInZhbHVlXCI6IFwiRmFkZSBJbiBEb3duXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJmYWRlSW5Eb3duQmlnXCIsIFwidmFsdWVcIjogXCJGYWRlIEluIERvd24gQmlnXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJmYWRlSW5MZWZ0XCIsIFwidmFsdWVcIjogXCJGYWRlIEluIExlZnRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImZhZGVJbkxlZnRCaWdcIiwgXCJ2YWx1ZVwiOiBcIkZhZGUgSW4gTGVmdCBCaWdcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImZhZGVJblJpZ2h0XCIsIFwidmFsdWVcIjogXCJGYWRlIEluIFJpZ2h0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJmYWRlSW5SaWdodEJpZ1wiLCBcInZhbHVlXCI6IFwiRmFkZSBJbiBSaWdodCBCaWdcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImZhZGVJblVwXCIsIFwidmFsdWVcIjogXCJGYWRlIEluIFVwXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJmYWRlSW5VcEJpZ1wiLCBcInZhbHVlXCI6IFwiRmFkZSBJbiBVcCBCaWdcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImZhZGVJblRvcExlZnRcIiwgXCJ2YWx1ZVwiOiBcIkZhZGUgSW4gVG9wIExlZnRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcImZhZGVJblRvcFJpZ2h0XCIsIFwidmFsdWVcIjogXCJGYWRlIEluIFRvcCBSaWdodFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiZmFkZUluQm90dG9tTGVmdFwiLCBcInZhbHVlXCI6IFwiRmFkZSBJbiBCb3R0b20gTGVmdFwifSxcbiAgICAgICAge1wia2V5XCI6IFwiZmFkZUluQm90dG9tUmlnaHRcIiwgXCJ2YWx1ZVwiOiBcIkZhZGUgSW4gQm90dG9tIFJpZ2h0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJsaWdodFNwZWVkSW5SaWdodFwiLCBcInZhbHVlXCI6IFwiTGlnaHRTcGVlZCBJbiBSaWdodFwifSxcbiAgICAgICAge1wia2V5XCI6IFwibGlnaHRTcGVlZEluTGVmdFwiLCBcInZhbHVlXCI6IFwiTGlnaHRTcGVlZCBJbiBMZWZ0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJyb3RhdGVJblwiLCBcInZhbHVlXCI6IFwiUm90YXRlIEluXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJyb3RhdGVJbkRvd25MZWZ0XCIsIFwidmFsdWVcIjogXCJSb3RhdGUgSW4gRG93biBMZWZ0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJyb3RhdGVJbkRvd25SaWdodFwiLCBcInZhbHVlXCI6IFwiUm90YXRlIEluIERvd24gUmlnaHRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcInpvb21JblwiLCBcInZhbHVlXCI6IFwiWm9vbSBJblwifSxcbiAgICAgICAge1wia2V5XCI6IFwiem9vbUluRG93blwiLCBcInZhbHVlXCI6IFwiWm9vbSBJbiBEb3duXCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJ6b29tSW5MZWZ0XCIsIFwidmFsdWVcIjogXCJab29tIEluIExlZnRcIn0sXG4gICAgICAgIHtcImtleVwiOiBcInpvb21JblJpZ2h0XCIsIFwidmFsdWVcIjogXCJab29tIEluIFJpZ2h0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJ6b29tSW5VcFwiLCBcInZhbHVlXCI6IFwiWm9vbSBJbiBVcFwifSxcbiAgICAgICAge1wia2V5XCI6IFwic2xpZGVJbkRvd25cIiwgXCJ2YWx1ZVwiOiBcIlNsaWRlIEluIERvd25cIn0sXG4gICAgICAgIHtcImtleVwiOiBcInNsaWRlSW5MZWZ0XCIsIFwidmFsdWVcIjogXCJTbGlkZSBJbiBMZWZ0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJzbGlkZUluUmlnaHRcIiwgXCJ2YWx1ZVwiOiBcIlNsaWRlIEluIFJpZ2h0XCJ9LFxuICAgICAgICB7XCJrZXlcIjogXCJzbGlkZUluVXBcIiwgXCJ2YWx1ZVwiOiBcIlNsaWRlIEluIFVwXCJ9LFxuICAgICAgXSxcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAgIHRvZ2dsZUFuaW1hdGlvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLnNob3dBbmltYXRpb25zID0gIXRoaXMuc2hvd0FuaW1hdGlvbnM7XG4gICAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2VsZW1lbnQtc3R5bGUtZWRpdG9yLXNob3cnLCAnYW5pbWF0aW9ucycpO1xuICAgICAgfSxcbiAgICByZXNldEFsbFByb3BlcnRpZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRBbmltYXRpb24gPSBudWxsO1xuICAgICAgdGhpcy5zZWxlY3RlZEFuaW1hdGlvblNwZWVkID0gMTtcbiAgICAgIHRoaXMuc2VsZWN0ZWRBbmltYXRpb25XaGVuQXBwZWFyID0gbnVsbDtcbiAgICB9LFxuXG4gICAgcG9wdWxhdGVBY3RpdmVBbmltYXRpb246IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgYW5pbWF0aW9uRGF0YSA9IEVsZW1lbnRTdHlsZUFuaW1hdGlvbnNBcHBsaWVyLmdldEFuaW1hdGlvbihub2RlKTtcbiAgICAgIGlmICghYW5pbWF0aW9uRGF0YSkge1xuICAgICAgICB0aGlzLnJlc2V0QWxsUHJvcGVydGllcygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRpb25EYXRhLmFuaW1hdGlvbikge1xuICAgICAgICB0aGlzLnNlbGVjdGVkQW5pbWF0aW9uID0gYW5pbWF0aW9uRGF0YS5hbmltYXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlbGVjdGVkQW5pbWF0aW9uID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChhbmltYXRpb25EYXRhLnNwZWVkKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRBbmltYXRpb25TcGVlZCA9IGFuaW1hdGlvbkRhdGEuc3BlZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlbGVjdGVkQW5pbWF0aW9uU3BlZWQgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGFuaW1hdGlvbkRhdGEud2hlbikge1xuICAgICAgICB0aGlzLnNlbGVjdGVkQW5pbWF0aW9uV2hlbkFwcGVhciA9IGFuaW1hdGlvbkRhdGEud2hlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRBbmltYXRpb25XaGVuQXBwZWFyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldEFuaW1hdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuYWN0aXZlTm9kZSkge1xuXG4gICAgICAgIHZhciBzcGVlZCA9IHRoaXMuc2VsZWN0ZWRBbmltYXRpb25TcGVlZCA/IHRoaXMuc2VsZWN0ZWRBbmltYXRpb25TcGVlZCA6IDE7XG4gICAgICAgIHZhciB3aGVuID0gdGhpcy5zZWxlY3RlZEFuaW1hdGlvbldoZW5BcHBlYXIgPyB0aGlzLnNlbGVjdGVkQW5pbWF0aW9uV2hlbkFwcGVhciA6ICdvbkFwcGVhcic7XG4gICAgICAgIHZhciBhbmltYXRpb24gPSB7XG4gICAgICAgICAgYW5pbWF0aW9uOiB0aGlzLnNlbGVjdGVkQW5pbWF0aW9uLFxuICAgICAgICAgIHNwZWVkOiBzcGVlZCxcbiAgICAgICAgICB3aGVuOiB3aGVuLFxuICAgICAgICB9XG5cbiAgICAgICAgbXcubG9nKGFuaW1hdGlvbilcbiAgICAgICAgRWxlbWVudFN0eWxlQW5pbWF0aW9uc0FwcGxpZXIuc2V0QW5pbWF0aW9uKHRoaXMuYWN0aXZlTm9kZSwgYW5pbWF0aW9uKTtcblxuICAgICAgfVxuICAgIH0sXG5cbiAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKG5vZGUgJiYgbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMucmVzZXRBbGxQcm9wZXJ0aWVzKCk7XG4gICAgICAgIHRoaXMuYWN0aXZlTm9kZSA9IG5vZGU7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNBbmltYXRpb25zID0gRWxlbWVudFN0eWxlQW5pbWF0aW9uc0FwcGxpZXIuc3VwcG9ydHNBbmltYXRpb25zKG5vZGUpO1xuICAgICAgICB0aGlzLnBvcHVsYXRlQWN0aXZlQW5pbWF0aW9uKG5vZGUpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuaXNSZWFkeSA9IHRydWU7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcblxuICBtb3VudGVkKCkge1xuXG4gICAgICB0aGlzLmVtaXR0ZXIub24oXCJlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93XCIsIGVsZW1lbnRTdHlsZUVkaXRvclNob3cgPT4ge1xuICAgICAgICAgIGlmIChlbGVtZW50U3R5bGVFZGl0b3JTaG93ICE9PSAnYW5pbWF0aW9ucycpIHtcbiAgICAgICAgICAgICAgdGhpcy5zaG93QW5pbWF0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgbXcudG9wKCkuYXBwLm9uKCdtdy5lbGVtZW50U3R5bGVFZGl0b3Iuc2VsZWN0Tm9kZScsIChlbGVtZW50KSA9PiB7XG4gICAgICB2YXIgZG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgICB2YXIgZG9jdW1lbnRXaW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblxuICAgICAgdGhpcy5wb3B1bGF0ZVN0eWxlRWRpdG9yKGVsZW1lbnQpXG4gICAgfSk7XG4gIH0sXG5cblxuICB3YXRjaDoge1xuICAgIHNlbGVjdGVkQW5pbWF0aW9uOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBpZiAoIXRoaXMuaXNSZWFkeSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnNldEFuaW1hdGlvbigpXG4gICAgfSxcblxuICAgIHNlbGVjdGVkQW5pbWF0aW9uU3BlZWQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIGlmICghdGhpcy5pc1JlYWR5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0QW5pbWF0aW9uKClcbiAgICB9LFxuICAgIHNlbGVjdGVkQW5pbWF0aW9uV2hlbkFwcGVhcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRBbmltYXRpb24oKVxuICAgIH1cbiAgfVxuXG5cbn1cblxuXG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiB2LWlmPVwiaGFzR3JpZFwiPlxuXG5cbiAgICA8ZGl2IGNsYXNzPVwibWItNCBkLWZsZXhcIj5cbiAgICAgICAgPHN2ZyBmaWxsPVwiY3VycmVudENvbG9yXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHZlcnNpb249XCIxLjFcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk00LDJIMjBBMiwyIDAgMCwxIDIyLDRWMjBBMiwyIDAgMCwxIDIwLDIySDRDMi45MiwyMiAyLDIxLjEgMiwyMFY0QTIsMiAwIDAsMSA0LDJNNCw0VjExSDExVjRINE00LDIwSDExVjEzSDRWMjBNMjAsMjBWMTNIMTNWMjBIMjBNMjAsNEgxM1YxMUgyMFY0WlwiPjwvcGF0aD48L3N2Zz5cblxuICAgICAgICA8YiBjbGFzcz1cIm13LWFkbWluLWFjdGlvbi1saW5rcyBtcy0zXCIgOmNsYXNzPVwieydhY3RpdmUnOiBzaG93R3JpZFNldHRpbmdzIH1cIiB2LW9uOmNsaWNrPVwidG9nZ2xlR3JpZFNldHRpbmdzXCI+XG4gICAgICAgIEdyaWRcbiAgICAgIDwvYj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgdi1pZj1cInNob3dHcmlkU2V0dGluZ3NcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJzLWZpZWxkXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzLWZpZWxkLWNvbnRlbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibXctZmllbGQgbXctZmllbGQtZmxhdFwiIGRhdGEtc2l6ZT1cIm1lZGl1bVwiPlxuICAgICAgICAgICAgPGxhYmVsPkRlc2t0b3A8L2xhYmVsPlxuICAgICAgICAgICAgPGkgY2xhc3M9XCJtZGkgbWRpLW1vbml0b3JcIj48L2k+XG4gICAgICAgICAgICA8RHJvcGRvd25TbWFsbFxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwiY29sT3B0aW9uc0Rlc2t0b3BcIlxuICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJzZWxlY3RlZENvbERlc2t0b3BcIlxuICAgICAgICAgICAgPjwvRHJvcGRvd25TbWFsbD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibXctZmllbGQgbXctZmllbGQtZmxhdFwiIGRhdGEtc2l6ZT1cIm1lZGl1bVwiPlxuICAgICAgICAgICAgPGxhYmVsPlRhYmxldDwvbGFiZWw+XG4gICAgICAgICAgICA8aSBjbGFzcz1cIm1kaSBtZGktdGFibGV0XCI+PC9pPlxuICAgICAgICAgICAgPERyb3Bkb3duU21hbGxcbiAgICAgICAgICAgICAgICA6b3B0aW9ucz1cImNvbE9wdGlvbnNUYWJsZXRcIlxuICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJzZWxlY3RlZENvbFRhYmxldFwiXG4gICAgICAgICAgICA+PC9Ecm9wZG93blNtYWxsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtdy1maWVsZCBtdy1maWVsZC1mbGF0XCIgZGF0YS1zaXplPVwibWVkaXVtXCI+XG4gICAgICAgICAgICA8bGFiZWw+TW9iaWxlPC9sYWJlbD5cbiAgICAgICAgICAgIDxpIGNsYXNzPVwibWRpIG1kaS1jZWxscGhvbmVcIj48L2k+XG4gICAgICAgICAgICA8RHJvcGRvd25TbWFsbFxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwiY29sT3B0aW9uc01vYmlsZVwiXG4gICAgICAgICAgICAgICAgdi1tb2RlbD1cInNlbGVjdGVkQ29sTW9iaWxlXCJcbiAgICAgICAgICAgID48L0Ryb3Bkb3duU21hbGw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBEcm9wZG93blNtYWxsIGZyb20gJy4vY29tcG9uZW50cy9Ecm9wZG93blNtYWxsLnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge0Ryb3Bkb3duU21hbGx9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhY3RpdmVHcmlkTm9kZTogbnVsbCxcbiAgICAgIHNob3dHcmlkU2V0dGluZ3M6IGZhbHNlLFxuICAgICAgaXNSZWFkeTogZmFsc2UsXG4gICAgICBoYXNHcmlkOiBmYWxzZSxcblxuICAgICAgY29sT3B0aW9uc0Rlc2t0b3A6IFtcbiAgICAgICAge2tleTogJ2NvbC0xJywgdmFsdWU6ICdjb2wtMSd9LFxuICAgICAgICB7a2V5OiAnY29sLTInLCB2YWx1ZTogJ2NvbC0yJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtMycsIHZhbHVlOiAnY29sLTMnfSxcbiAgICAgICAge2tleTogJ2NvbC00JywgdmFsdWU6ICdjb2wtNCd9LFxuICAgICAgICB7a2V5OiAnY29sLTUnLCB2YWx1ZTogJ2NvbC01J30sXG4gICAgICAgIHtrZXk6ICdjb2wtNicsIHZhbHVlOiAnY29sLTYnfSxcbiAgICAgICAge2tleTogJ2NvbC03JywgdmFsdWU6ICdjb2wtNyd9LFxuICAgICAgICB7a2V5OiAnY29sLTgnLCB2YWx1ZTogJ2NvbC04J30sXG4gICAgICAgIHtrZXk6ICdjb2wtOScsIHZhbHVlOiAnY29sLTknfSxcbiAgICAgICAge2tleTogJ2NvbC0xMCcsIHZhbHVlOiAnY29sLTEwJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtMTEnLCB2YWx1ZTogJ2NvbC0xMSd9LFxuICAgICAgICB7a2V5OiAnY29sLTEyJywgdmFsdWU6ICdjb2wtMTInfSxcbiAgICAgICAge2tleTogJ2NvbC1sZy0xJywgdmFsdWU6ICdjb2wtbGctMSd9LFxuICAgICAgICB7a2V5OiAnY29sLWxnLTInLCB2YWx1ZTogJ2NvbC1sZy0yJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtbGctMycsIHZhbHVlOiAnY29sLWxnLTMnfSxcbiAgICAgICAge2tleTogJ2NvbC1sZy00JywgdmFsdWU6ICdjb2wtbGctNCd9LFxuICAgICAgICB7a2V5OiAnY29sLWxnLTUnLCB2YWx1ZTogJ2NvbC1sZy01J30sXG4gICAgICAgIHtrZXk6ICdjb2wtbGctNicsIHZhbHVlOiAnY29sLWxnLTYnfSxcbiAgICAgICAge2tleTogJ2NvbC1sZy03JywgdmFsdWU6ICdjb2wtbGctNyd9LFxuICAgICAgICB7a2V5OiAnY29sLWxnLTgnLCB2YWx1ZTogJ2NvbC1sZy04J30sXG4gICAgICAgIHtrZXk6ICdjb2wtbGctOScsIHZhbHVlOiAnY29sLWxnLTknfSxcbiAgICAgICAge2tleTogJ2NvbC1sZy0xMCcsIHZhbHVlOiAnY29sLWxnLTEwJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtbGctMTEnLCB2YWx1ZTogJ2NvbC1sZy0xMSd9LFxuICAgICAgICB7a2V5OiAnY29sLWxnLTEyJywgdmFsdWU6ICdjb2wtbGctMTInfSxcbiAgICAgIF0sXG5cbiAgICAgIGNvbE9wdGlvbnNUYWJsZXQ6IFtcbiAgICAgICAge2tleTogJ2NvbC1tZC0xJywgdmFsdWU6ICdjb2wtbWQtMSd9LFxuICAgICAgICB7a2V5OiAnY29sLW1kLTInLCB2YWx1ZTogJ2NvbC1tZC0yJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtbWQtMycsIHZhbHVlOiAnY29sLW1kLTMnfSxcbiAgICAgICAge2tleTogJ2NvbC1tZC00JywgdmFsdWU6ICdjb2wtbWQtNCd9LFxuICAgICAgICB7a2V5OiAnY29sLW1kLTUnLCB2YWx1ZTogJ2NvbC1tZC01J30sXG4gICAgICAgIHtrZXk6ICdjb2wtbWQtNicsIHZhbHVlOiAnY29sLW1kLTYnfSxcbiAgICAgICAge2tleTogJ2NvbC1tZC03JywgdmFsdWU6ICdjb2wtbWQtNyd9LFxuICAgICAgICB7a2V5OiAnY29sLW1kLTgnLCB2YWx1ZTogJ2NvbC1tZC04J30sXG4gICAgICAgIHtrZXk6ICdjb2wtbWQtOScsIHZhbHVlOiAnY29sLW1kLTknfSxcbiAgICAgICAge2tleTogJ2NvbC1tZC0xMCcsIHZhbHVlOiAnY29sLW1kLTEwJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtbWQtMTEnLCB2YWx1ZTogJ2NvbC1tZC0xMSd9LFxuICAgICAgICB7a2V5OiAnY29sLW1kLTEyJywgdmFsdWU6ICdjb2wtbWQtMTInfSxcbiAgICAgICAge2tleTogJ2NvbC1zbS0xJywgdmFsdWU6ICdjb2wtc20tMSd9LFxuICAgICAgICB7a2V5OiAnY29sLXNtLTInLCB2YWx1ZTogJ2NvbC1zbS0yJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtc20tMycsIHZhbHVlOiAnY29sLXNtLTMnfSxcbiAgICAgICAge2tleTogJ2NvbC1zbS00JywgdmFsdWU6ICdjb2wtc20tNCd9LFxuICAgICAgICB7a2V5OiAnY29sLXNtLTUnLCB2YWx1ZTogJ2NvbC1zbS01J30sXG4gICAgICAgIHtrZXk6ICdjb2wtc20tNicsIHZhbHVlOiAnY29sLXNtLTYnfSxcbiAgICAgICAge2tleTogJ2NvbC1zbS03JywgdmFsdWU6ICdjb2wtc20tNyd9LFxuICAgICAgICB7a2V5OiAnY29sLXNtLTgnLCB2YWx1ZTogJ2NvbC1zbS04J30sXG4gICAgICAgIHtrZXk6ICdjb2wtc20tOScsIHZhbHVlOiAnY29sLXNtLTknfSxcbiAgICAgICAge2tleTogJ2NvbC1zbS0xMCcsIHZhbHVlOiAnY29sLXNtLTEwJ30sXG4gICAgICAgIHtrZXk6ICdjb2wtc20tMTEnLCB2YWx1ZTogJ2NvbC1zbS0xMSd9LFxuICAgICAgICB7a2V5OiAnY29sLXNtLTEyJywgdmFsdWU6ICdjb2wtc20tMTInfSxcbiAgICAgIF0sXG5cbiAgICAgIGNvbE9wdGlvbnNNb2JpbGU6IFtcbiAgICAgICAge2tleTogJ2NvbC14cy0xJywgdmFsdWU6ICdjb2wteHMtMSd9LFxuICAgICAgICB7a2V5OiAnY29sLXhzLTInLCB2YWx1ZTogJ2NvbC14cy0yJ30sXG4gICAgICAgIHtrZXk6ICdjb2wteHMtMycsIHZhbHVlOiAnY29sLXhzLTMnfSxcbiAgICAgICAge2tleTogJ2NvbC14cy00JywgdmFsdWU6ICdjb2wteHMtNCd9LFxuICAgICAgICB7a2V5OiAnY29sLXhzLTUnLCB2YWx1ZTogJ2NvbC14cy01J30sXG4gICAgICAgIHtrZXk6ICdjb2wteHMtNicsIHZhbHVlOiAnY29sLXhzLTYnfSxcbiAgICAgICAge2tleTogJ2NvbC14cy03JywgdmFsdWU6ICdjb2wteHMtNyd9LFxuICAgICAgICB7a2V5OiAnY29sLXhzLTgnLCB2YWx1ZTogJ2NvbC14cy04J30sXG4gICAgICAgIHtrZXk6ICdjb2wteHMtOScsIHZhbHVlOiAnY29sLXhzLTknfSxcbiAgICAgICAge2tleTogJ2NvbC14cy0xMCcsIHZhbHVlOiAnY29sLXhzLTEwJ30sXG4gICAgICAgIHtrZXk6ICdjb2wteHMtMTEnLCB2YWx1ZTogJ2NvbC14cy0xMSd9LFxuICAgICAgICB7a2V5OiAnY29sLXhzLTEyJywgdmFsdWU6ICdjb2wteHMtMTInfSxcbiAgICAgIF0sXG5cbiAgICAgIHNlbGVjdGVkQ29sRGVza3RvcDogJycsXG4gICAgICBzZWxlY3RlZENvbFRhYmxldDogJycsXG4gICAgICBzZWxlY3RlZENvbE1vYmlsZTogJycsXG4gICAgfTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgdG9nZ2xlR3JpZFNldHRpbmdzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnNob3dHcmlkU2V0dGluZ3MgPSAhdGhpcy5zaG93R3JpZFNldHRpbmdzO1xuICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2VsZW1lbnQtc3R5bGUtZWRpdG9yLXNob3cnLCAnZ3JpZCcpO1xuICAgIH0sXG4gICAgcmVzZXRBbGxQcm9wZXJ0aWVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmhhc0dyaWQgPSBudWxsO1xuICAgIH0sXG5cbiAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXNldEFsbFByb3BlcnRpZXMoKTtcblxuICAgICAgICAvLyBDaGVjayBmb3IgZ3JpZCBjbGFzc2VzIGluIHRoZSBhY3RpdmUgbm9kZVxuICAgICAgICBmb3IgKGNvbnN0IGdyaWRPcHRpb24gb2YgdGhpcy5jb2xPcHRpb25zRGVza3RvcCkge1xuICAgICAgICAgIGlmIChub2RlLmNsYXNzTGlzdC5jb250YWlucyhncmlkT3B0aW9uLmtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzR3JpZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZUdyaWROb2RlID0gbm9kZTtcbiAgICAgICAgICAgIC8vIFNldCB0aGUgc2VsZWN0ZWQgY2xhc3MgbmFtZSBmb3IgRGVza3RvcCBicmVha3BvaW50XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkQ29sRGVza3RvcCA9IGdyaWRPcHRpb24ua2V5O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgZ3JpZE9wdGlvbiBvZiB0aGlzLmNvbE9wdGlvbnNUYWJsZXQpIHtcbiAgICAgICAgICBpZiAobm9kZS5jbGFzc0xpc3QuY29udGFpbnMoZ3JpZE9wdGlvbi5rZXkpKSB7XG4gICAgICAgICAgICB0aGlzLmhhc0dyaWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVHcmlkTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAvLyBTZXQgdGhlIHNlbGVjdGVkIGNsYXNzIG5hbWUgZm9yIFRhYmxldCBicmVha3BvaW50XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkQ29sVGFibGV0ID0gZ3JpZE9wdGlvbi5rZXk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBncmlkT3B0aW9uIG9mIHRoaXMuY29sT3B0aW9uc01vYmlsZSkge1xuICAgICAgICAgIGlmIChub2RlLmNsYXNzTGlzdC5jb250YWlucyhncmlkT3B0aW9uLmtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzR3JpZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZUdyaWROb2RlID0gbm9kZTtcbiAgICAgICAgICAgIC8vIFNldCB0aGUgc2VsZWN0ZWQgY2xhc3MgbmFtZSBmb3IgTW9iaWxlIGJyZWFrcG9pbnRcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDb2xNb2JpbGUgPSBncmlkT3B0aW9uLmtleTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuaXNSZWFkeSA9IHRydWU7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFwcGx5Q2xhc3NUb0FjdGl2ZUdyaWROb2RlOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBpZiAoIXRoaXMuaXNSZWFkeSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5hY3RpdmVHcmlkTm9kZSkge1xuICAgICAgICAvLyBSZW1vdmUgYW55IGV4aXN0aW5nIGdyaWQgY2xhc3NlcyBmcm9tIHRoZSBub2RlXG4gICAgICAgIGZvciAoY29uc3QgZ3JpZE9wdGlvbiBvZiB0aGlzLmNvbE9wdGlvbnNEZXNrdG9wKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVHcmlkTm9kZS5jbGFzc0xpc3QucmVtb3ZlKGdyaWRPcHRpb24ua2V5KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGdyaWRPcHRpb24gb2YgdGhpcy5jb2xPcHRpb25zVGFibGV0KSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVHcmlkTm9kZS5jbGFzc0xpc3QucmVtb3ZlKGdyaWRPcHRpb24ua2V5KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGdyaWRPcHRpb24gb2YgdGhpcy5jb2xPcHRpb25zTW9iaWxlKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVHcmlkTm9kZS5jbGFzc0xpc3QucmVtb3ZlKGdyaWRPcHRpb24ua2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFwcGx5IHRoZSBzZWxlY3RlZCBncmlkIGNsYXNzIGZvciB0aGUgY29ycmVzcG9uZGluZyBicmVha3BvaW50XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkR3JpZE9wdGlvbiA9IFsuLi50aGlzLmNvbE9wdGlvbnNEZXNrdG9wLCAuLi50aGlzLmNvbE9wdGlvbnNUYWJsZXQsIC4uLnRoaXMuY29sT3B0aW9uc01vYmlsZV0uZmluZChvcHRpb24gPT4gb3B0aW9uLmtleSA9PT0gdmFsKTtcbiAgICAgICAgaWYgKHNlbGVjdGVkR3JpZE9wdGlvbikge1xuICAgICAgICAgIHRoaXMuYWN0aXZlR3JpZE5vZGUuY2xhc3NMaXN0LmFkZChzZWxlY3RlZEdyaWRPcHRpb24ua2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtdy50b3AoKS5hcHApIHtcbiAgICAgICAgICBtdy50b3AoKS5hcHAucmVnaXN0ZXJDaGFuZ2VkU3RhdGUodGhpcy5hY3RpdmVHcmlkTm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICB9LFxuXG4gIG1vdW50ZWQoKSB7XG4gICAgbXcudG9wKCkuYXBwLm9uKCdtdy5lbGVtZW50U3R5bGVFZGl0b3Iuc2VsZWN0Tm9kZScsIChlbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLnBvcHVsYXRlU3R5bGVFZGl0b3IoZWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmVtaXR0ZXIub24oXCJlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93XCIsIGVsZW1lbnRTdHlsZUVkaXRvclNob3cgPT4ge1xuICAgICAgaWYgKGVsZW1lbnRTdHlsZUVkaXRvclNob3cgIT09ICdncmlkJykge1xuICAgICAgICB0aGlzLnNob3dHcmlkU2V0dGluZ3MgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICB3YXRjaDoge1xuICAgIHNlbGVjdGVkQ29sRGVza3RvcDogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5hcHBseUNsYXNzVG9BY3RpdmVHcmlkTm9kZShuZXdWYWx1ZSk7XG4gICAgfSxcblxuICAgIHNlbGVjdGVkQ29sVGFibGV0OiBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICB0aGlzLmFwcGx5Q2xhc3NUb0FjdGl2ZUdyaWROb2RlKG5ld1ZhbHVlKTtcbiAgICB9LFxuXG4gICAgc2VsZWN0ZWRDb2xNb2JpbGU6IGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuYXBwbHlDbGFzc1RvQWN0aXZlR3JpZE5vZGUobmV3VmFsdWUpO1xuICAgIH0sXG4gIH0sXG59O1xuPC9zY3JpcHQ+XG4iLCJpbXBvcnQgeyBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlRWxlbWVudFZOb2RlLCByZXNvbHZlQ29tcG9uZW50LCByZXNvbHZlRGlyZWN0aXZlLCB3aXRoRGlyZWN0aXZlcywgbm9ybWFsaXplQ2xhc3MsIEZyYWdtZW50LCByZW5kZXJMaXN0LCByZW5kZXJTbG90LCBub3JtYWxpemVQcm9wcywgbWVyZ2VQcm9wcywgdG9EaXNwbGF5U3RyaW5nLCB3aXRoTW9kaWZpZXJzLCBjcmVhdGVDb21tZW50Vk5vZGUsIHdpdGhLZXlzLCB2TW9kZWxUZXh0LCBjcmVhdGVCbG9jaywgZ3VhcmRSZWFjdGl2ZVByb3BzIH0gZnJvbSAndnVlJztcblxudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBiYXNlZGlyLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHtcblx0ICBwYXRoOiBiYXNlZGlyLFxuXHQgIGV4cG9ydHM6IHt9LFxuXHQgIHJlcXVpcmU6IGZ1bmN0aW9uIChwYXRoLCBiYXNlKSB7XG4gICAgICByZXR1cm4gY29tbW9uanNSZXF1aXJlKHBhdGgsIChiYXNlID09PSB1bmRlZmluZWQgfHwgYmFzZSA9PT0gbnVsbCkgPyBtb2R1bGUucGF0aCA6IGJhc2UpO1xuICAgIH1cblx0fSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG5mdW5jdGlvbiBjb21tb25qc1JlcXVpcmUgKCkge1xuXHR0aHJvdyBuZXcgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZXMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGJ5IEByb2xsdXAvcGx1Z2luLWNvbW1vbmpzJyk7XG59XG5cbnZhciB2Q2xpY2tPdXRzaWRlX3VtZCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiFmdW5jdGlvbihlLG4pe21vZHVsZS5leHBvcnRzPW4oKTt9KGNvbW1vbmpzR2xvYmFsLGZ1bmN0aW9uKCl7dmFyIGU9XCJfX3YtY2xpY2stb3V0c2lkZVwiLG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyx0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3Iscj1uJiYoXCJvbnRvdWNoc3RhcnRcImluIHdpbmRvd3x8dCYmbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHM+MCk/W1widG91Y2hzdGFydFwiXTpbXCJjbGlja1wiXSxpPWZ1bmN0aW9uKGUpe3ZhciBuPWUuZXZlbnQsdD1lLmhhbmRsZXI7KDAsIGUubWlkZGxld2FyZSkobikmJnQobik7fSxhPWZ1bmN0aW9uKG4sdCl7dmFyIGE9ZnVuY3Rpb24oZSl7dmFyIG49XCJmdW5jdGlvblwiPT10eXBlb2YgZTtpZighbiYmXCJvYmplY3RcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwidi1jbGljay1vdXRzaWRlOiBCaW5kaW5nIHZhbHVlIG11c3QgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3RcIik7cmV0dXJuIHtoYW5kbGVyOm4/ZTplLmhhbmRsZXIsbWlkZGxld2FyZTplLm1pZGRsZXdhcmV8fGZ1bmN0aW9uKGUpe3JldHVybiBlfSxldmVudHM6ZS5ldmVudHN8fHIsaXNBY3RpdmU6ISghMT09PWUuaXNBY3RpdmUpLGRldGVjdElmcmFtZTohKCExPT09ZS5kZXRlY3RJZnJhbWUpLGNhcHR1cmU6Qm9vbGVhbihlLmNhcHR1cmUpfX0odC52YWx1ZSksbz1hLmhhbmRsZXIsZD1hLm1pZGRsZXdhcmUsYz1hLmRldGVjdElmcmFtZSx1PWEuY2FwdHVyZTtpZihhLmlzQWN0aXZlKXtpZihuW2VdPWEuZXZlbnRzLm1hcChmdW5jdGlvbihlKXtyZXR1cm4ge2V2ZW50OmUsc3JjVGFyZ2V0OmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxoYW5kbGVyOmZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgbj1lLmVsLHQ9ZS5ldmVudCxyPWUuaGFuZGxlcixhPWUubWlkZGxld2FyZSxvPXQucGF0aHx8dC5jb21wb3NlZFBhdGgmJnQuY29tcG9zZWRQYXRoKCk7KG8/by5pbmRleE9mKG4pPDA6IW4uY29udGFpbnModC50YXJnZXQpKSYmaSh7ZXZlbnQ6dCxoYW5kbGVyOnIsbWlkZGxld2FyZTphfSk7fSh7ZWw6bixldmVudDplLGhhbmRsZXI6byxtaWRkbGV3YXJlOmR9KX0sY2FwdHVyZTp1fX0pLGMpe3ZhciBsPXtldmVudDpcImJsdXJcIixzcmNUYXJnZXQ6d2luZG93LGhhbmRsZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciBuPWUuZWwsdD1lLmV2ZW50LHI9ZS5oYW5kbGVyLGE9ZS5taWRkbGV3YXJlO3NldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgZT1kb2N1bWVudC5hY3RpdmVFbGVtZW50O2UmJlwiSUZSQU1FXCI9PT1lLnRhZ05hbWUmJiFuLmNvbnRhaW5zKGUpJiZpKHtldmVudDp0LGhhbmRsZXI6cixtaWRkbGV3YXJlOmF9KTt9LDApO30oe2VsOm4sZXZlbnQ6ZSxoYW5kbGVyOm8sbWlkZGxld2FyZTpkfSl9LGNhcHR1cmU6dX07bltlXT1bXS5jb25jYXQobltlXSxbbF0pO31uW2VdLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIHI9dC5ldmVudCxpPXQuc3JjVGFyZ2V0LGE9dC5oYW5kbGVyO3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bltlXSYmaS5hZGRFdmVudExpc3RlbmVyKHIsYSx1KTt9LDApfSk7fX0sbz1mdW5jdGlvbihuKXsobltlXXx8W10pLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3JjVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZS5ldmVudCxlLmhhbmRsZXIsZS5jYXB0dXJlKX0pLGRlbGV0ZSBuW2VdO30sZD1uP3tiZWZvcmVNb3VudDphLHVwZGF0ZWQ6ZnVuY3Rpb24oZSxuKXt2YXIgdD1uLnZhbHVlLHI9bi5vbGRWYWx1ZTtKU09OLnN0cmluZ2lmeSh0KSE9PUpTT04uc3RyaW5naWZ5KHIpJiYobyhlKSxhKGUse3ZhbHVlOnR9KSk7fSx1bm1vdW50ZWQ6b306e307cmV0dXJuIHtpbnN0YWxsOmZ1bmN0aW9uKGUpe2UuZGlyZWN0aXZlKFwiY2xpY2stb3V0c2lkZVwiLGQpO30sZGlyZWN0aXZlOmR9fSk7XG5cbn0pO1xuXG52YXIgdkNsaWNrT3V0c2lkZSA9IHZDbGlja091dHNpZGVfdW1kO1xuXG5jb25zdCBfaG9pc3RlZF8xJDEgPSB7XG4gIGNsYXNzOiBcInYzdGktbG9hZGVyLXdyYXBwZXJcIlxufTtcblxuY29uc3QgX2hvaXN0ZWRfMiQxID0gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gIGNsYXNzOiBcInYzdGktbG9hZGVyXCJcbn0sIG51bGwsIC0xKTtcblxuY29uc3QgX2hvaXN0ZWRfMyQxID0gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnRWTm9kZShcInNwYW5cIiwgbnVsbCwgXCJMb2FkaW5nXCIsIC0xKTtcblxuY29uc3QgX2hvaXN0ZWRfNCQxID0gW19ob2lzdGVkXzIkMSwgX2hvaXN0ZWRfMyQxXTtcbmZ1bmN0aW9uIHJlbmRlciQxKF9jdHgsIF9jYWNoZSkge1xuICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCBfaG9pc3RlZF8xJDEsIF9ob2lzdGVkXzQkMSk7XG59XG5cbmZ1bmN0aW9uIHN0eWxlSW5qZWN0KGNzcywgcmVmKSB7XG4gIGlmICggcmVmID09PSB2b2lkIDAgKSByZWYgPSB7fTtcbiAgdmFyIGluc2VydEF0ID0gcmVmLmluc2VydEF0O1xuXG4gIGlmICghY3NzIHx8IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuOyB9XG5cbiAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xuXG4gIGlmIChpbnNlcnRBdCA9PT0gJ3RvcCcpIHtcbiAgICBpZiAoaGVhZC5maXJzdENoaWxkKSB7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZSwgaGVhZC5maXJzdENoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIGNzc18yNDh6JDEgPSBcIi52M3RpLWxvYWRlci13cmFwcGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBjb2xvcjogIzExMkIzQztcXG59XFxuLnYzdGktbG9hZGVyLXdyYXBwZXIgLnYzdGktbG9hZGVyIHtcXG4gIHdpZHRoOiAxOHB4O1xcbiAgaGVpZ2h0OiAxOHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkICMxMTJCM0M7XFxuICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBhbmltYXRpb246IHJvdGF0aW9uIDAuOHMgbGluZWFyIGluZmluaXRlO1xcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XFxufVxcbkBrZXlmcmFtZXMgcm90YXRpb24ge1xcbjAlIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxufVxcbjEwMCUge1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbn1cXG59XCI7XG5zdHlsZUluamVjdChjc3NfMjQ4eiQxKTtcblxuY29uc3Qgc2NyaXB0JDEgPSB7fTtcbnNjcmlwdCQxLnJlbmRlciA9IHJlbmRlciQxO1xudmFyIExvYWRpbmcgPSBzY3JpcHQkMTtcblxudmFyIHNjcmlwdCA9IHtcbiAgbmFtZTogXCJWdWUzVGFnc0lucHV0XCIsXG4gIGVtaXRzOiBbJ3VwZGF0ZTptb2RlbFZhbHVlJywgJ3VwZGF0ZTp0YWdzJywgJ29uLWxpbWl0JywgJ29uLXRhZ3MtY2hhbmdlZCcsICdvbi1yZW1vdmUnLCAnb24tZXJyb3InLCAnb24tZm9jdXMnLCAnb24tYmx1cicsICdvbi1zZWxlY3QnLCAnb24tc2VsZWN0LWR1cGxpY2F0ZS10YWcnLCAnb24tbmV3LXRhZyddLFxuICBwcm9wczoge1xuICAgIHJlYWRPbmx5OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIG1vZGVsVmFsdWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICB2YWxpZGF0ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgRnVuY3Rpb24sIE9iamVjdF0sXG4gICAgICBkZWZhdWx0OiBcIlwiXG4gICAgfSxcbiAgICBhZGRUYWdPbktleXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gWzEzLCAvLyBFbnRlclxuICAgICAgICAnLCcsIC8vIENvbW1hICcsJ1xuICAgICAgICAzMiAvLyBTcGFjZVxuICAgICAgICBdO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGxhY2Vob2xkZXI6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnXG4gICAgfSxcbiAgICB0YWdzOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gICAgfSxcbiAgICBsb2FkaW5nOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGxpbWl0OiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAtMVxuICAgIH0sXG4gICAgYWxsb3dEdXBsaWNhdGVzOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGFkZFRhZ09uQmx1cjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBzZWxlY3RJdGVtczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICAgIH0sXG4gICAgc2VsZWN0OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGR1cGxpY2F0ZVNlbGVjdEl0ZW06IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICB1bmlxdWVTZWxlY3RGaWVsZDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2lkJ1xuICAgIH0sXG4gICAgYWRkVGFnT25LZXlzV2hlblNlbGVjdDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBpc1Nob3dOb0RhdGE6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSAvLyBtdWx0aXBsZToge1xuICAgIC8vICAgdHlwZTogQm9vbGVhbixcbiAgICAvLyAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgLy8gfSxcblxuICB9LFxuICBjb21wb25lbnRzOiB7XG4gICAgTG9hZGluZ1xuICB9LFxuICBkaXJlY3RpdmVzOiB7XG4gICAgY2xpY2tPdXRzaWRlOiB2Q2xpY2tPdXRzaWRlLmRpcmVjdGl2ZVxuICB9LFxuXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzSW5wdXRBY3RpdmU6IGZhbHNlLFxuICAgICAgaXNFcnJvcjogZmFsc2UsXG4gICAgICBuZXdUYWc6ICcnLFxuICAgICAgaW5uZXJUYWdzOiBbXSxcbiAgICAgIG11bHRpcGxlOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICBpc0xpbWl0KCkge1xuICAgICAgY29uc3QgaXNMaW1pdCA9IHRoaXMubGltaXQgPiAwICYmIE51bWJlcih0aGlzLmxpbWl0KSA9PT0gdGhpcy5pbm5lclRhZ3MubGVuZ3RoO1xuXG4gICAgICBpZiAoaXNMaW1pdCkge1xuICAgICAgICB0aGlzLiRlbWl0KCdvbi1saW1pdCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNMaW1pdDtcbiAgICB9LFxuXG4gICAgc2VsZWN0ZWRJdGVtc0lkcygpIHtcbiAgICAgIGlmICghdGhpcy5kdXBsaWNhdGVTZWxlY3RJdGVtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhZ3MubWFwKG8gPT4gb1t0aGlzLnVuaXF1ZVNlbGVjdEZpZWxkXSB8fCAnJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBlcnJvcigpIHtcbiAgICAgIHRoaXMuaXNFcnJvciA9IHRoaXMuZXJyb3I7XG4gICAgfSxcblxuICAgIG1vZGVsVmFsdWU6IHtcbiAgICAgIGltbWVkaWF0ZTogdHJ1ZSxcblxuICAgICAgaGFuZGxlcih2YWx1ZSkge1xuICAgICAgICB0aGlzLm5ld1RhZyA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgfSxcbiAgICB0YWdzOiB7XG4gICAgICBkZWVwOiB0cnVlLFxuICAgICAgaW1tZWRpYXRlOiB0cnVlLFxuXG4gICAgICBoYW5kbGVyKHRhZ3MpIHtcbiAgICAgICAgdGhpcy5pbm5lclRhZ3MgPSBbLi4udGFnc107XG4gICAgICB9XG5cbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBpc1Nob3QobmFtZSkge1xuICAgICAgcmV0dXJuICEhdGhpcy4kc2xvdHNbbmFtZV07XG4gICAgfSxcblxuICAgIG1ha2VJdE5vcm1hbChldmVudCkge1xuICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgdGhpcy4kcmVmcy5pbnB1dFRhZy5jbGFzc05hbWUgPSAndjN0aS1uZXctdGFnJztcbiAgICAgIHRoaXMuJHJlZnMuaW5wdXRUYWcuc3R5bGUudGV4dERlY29yYXRpb24gPSBcIm5vbmVcIjtcbiAgICB9LFxuXG4gICAgcmVzZXREYXRhKCkge1xuICAgICAgdGhpcy5pbm5lclRhZ3MgPSBbXTtcbiAgICB9LFxuXG4gICAgcmVzZXRJbnB1dFZhbHVlKCkge1xuICAgICAgdGhpcy5uZXdUYWcgPSAnJztcbiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTptb2RlbFZhbHVlJywgJycpO1xuICAgIH0sXG5cbiAgICBzZXRQb3NpdGlvbigpIHtcbiAgICAgIGNvbnN0IGVsID0gdGhpcy4kcmVmcy5pbnB1dEJveDtcbiAgICAgIGNvbnN0IG1lbnUgPSB0aGlzLiRyZWZzLmNvbnRleHRNZW51O1xuXG4gICAgICBpZiAoZWwgJiYgbWVudSkge1xuICAgICAgICBtZW51LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7IC8vIG1lbnUuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuXG4gICAgICAgIGNvbnN0IEVMRU1FTlRfSEVJR0hUID0gZWwuY2xpZW50SGVpZ2h0IHx8IDMyO1xuICAgICAgICBjb25zdCBCT1JERVJfSEVJR0hUID0gMztcbiAgICAgICAgbWVudS5zdHlsZS50b3AgPSBFTEVNRU5UX0hFSUdIVCArIEJPUkRFUl9IRUlHSFQgKyBcInB4XCI7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGNsb3NlQ29udGV4dE1lbnUoKSB7XG4gICAgICBpZiAodGhpcy4kcmVmcy5jb250ZXh0TWVudSkge1xuICAgICAgICB0aGlzLiRyZWZzLmNvbnRleHRNZW51LnN0eWxlID0ge1xuICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBoYW5kbGVTZWxlY3QodGFnRGF0YSkge1xuICAgICAgaWYgKHRoaXMuaXNTaG93Q2hlY2ttYXJrKHRhZ0RhdGEpKSB7XG4gICAgICAgIGNvbnN0IHRhZ3MgPSB0aGlzLnRhZ3MuZmlsdGVyKG8gPT4gdGFnRGF0YS5pZCAhPT0gby5pZCk7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTp0YWdzJywgdGFncyk7XG4gICAgICAgIHRoaXMuJGVtaXQoJ29uLXNlbGVjdC1kdXBsaWNhdGUtdGFnJywgdGFnRGF0YSk7XG4gICAgICAgIHRoaXMucmVzZXRJbnB1dFZhbHVlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbWl0KCdvbi1zZWxlY3QnLCB0YWdEYXRhKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICB0aGlzLmNsb3NlQ29udGV4dE1lbnUoKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBpc1Nob3dDaGVja21hcmsodGFnKSB7XG4gICAgICBpZiAoIXRoaXMuZHVwbGljYXRlU2VsZWN0SXRlbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEl0ZW1zSWRzLmluY2x1ZGVzKHRhZ1t0aGlzLnVuaXF1ZVNlbGVjdEZpZWxkXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgZm9jdXNOZXdUYWcoKSB7XG4gICAgICBpZiAodGhpcy5zZWxlY3QgJiYgIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5zZXRQb3NpdGlvbigpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yZWFkT25seSB8fCAhdGhpcy4kZWwucXVlcnlTZWxlY3RvcihcIi52M3RpLW5ldy10YWdcIikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiRlbC5xdWVyeVNlbGVjdG9yKFwiLnYzdGktbmV3LXRhZ1wiKS5mb2N1cygpO1xuICAgIH0sXG5cbiAgICBoYW5kbGVJbnB1dEZvY3VzKGV2ZW50KSB7XG4gICAgICB0aGlzLmlzSW5wdXRBY3RpdmUgPSB0cnVlO1xuICAgICAgdGhpcy4kZW1pdCgnb24tZm9jdXMnLCBldmVudCk7XG4gICAgfSxcblxuICAgIGhhbmRsZUlucHV0Qmx1cihlKSB7XG4gICAgICB0aGlzLmlzSW5wdXRBY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuYWRkTmV3KGUpO1xuICAgICAgdGhpcy4kZW1pdCgnb24tYmx1cicsIGUpO1xuICAgIH0sXG5cbiAgICBhZGROZXcoZSkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0ICYmICF0aGlzLmFkZFRhZ09uS2V5c1doZW5TZWxlY3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXlTaG91bGRBZGRUYWcgPSBlID8gdGhpcy5hZGRUYWdPbktleXMuaW5kZXhPZihlLmtleUNvZGUpICE9PSAtMSB8fCB0aGlzLmFkZFRhZ09uS2V5cy5pbmRleE9mKGUua2V5KSAhPT0gLTEgOiB0cnVlO1xuICAgICAgY29uc3QgdHlwZUlzTm90Qmx1ciA9IGUgJiYgZS50eXBlICE9PSBcImJsdXJcIjtcblxuICAgICAgaWYgKCFrZXlTaG91bGRBZGRUYWcgJiYgKHR5cGVJc05vdEJsdXIgfHwgIXRoaXMuYWRkVGFnT25CbHVyKSB8fCB0aGlzLmlzTGltaXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5uZXdUYWcgJiYgKHRoaXMuYWxsb3dEdXBsaWNhdGVzIHx8IHRoaXMuaW5uZXJUYWdzLmluZGV4T2YodGhpcy5uZXdUYWcpID09PSAtMSkgJiYgdGhpcy52YWxpZGF0ZUlmTmVlZGVkKHRoaXMubmV3VGFnKSkge1xuICAgICAgICB0aGlzLmlubmVyVGFncy5wdXNoKHRoaXMubmV3VGFnKTtcblxuICAgICAgICBpZiAodGhpcy5hZGRUYWdPbktleXNXaGVuU2VsZWN0KSB7XG4gICAgICAgICAgdGhpcy4kZW1pdCgnb24tbmV3LXRhZycsIHRoaXMubmV3VGFnKTtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uQ29udGV4dE1lbnUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzZXRJbnB1dFZhbHVlKCk7XG4gICAgICAgIHRoaXMudGFnQ2hhbmdlKCk7XG4gICAgICAgIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMudmFsaWRhdGVJZk5lZWRlZCh0aGlzLm5ld1RhZykpIHtcbiAgICAgICAgICB0aGlzLm1ha2VJdEVycm9yKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubWFrZUl0RXJyb3IoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZSAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHVwZGF0ZVBvc2l0aW9uQ29udGV4dE1lbnUoKSB7XG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb24oKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBtYWtlSXRFcnJvcihpc0R1cGxpY2F0ZWRPck1heExlbmd0aCkge1xuICAgICAgaWYgKHRoaXMubmV3VGFnICE9PSAnJykge1xuICAgICAgICB0aGlzLiRyZWZzLmlucHV0VGFnLmNsYXNzTmFtZSA9ICd2M3RpLW5ldy10YWcgdjN0aS1uZXctdGFnLS1lcnJvcic7XG4gICAgICAgIHRoaXMuJHJlZnMuaW5wdXRUYWcuc3R5bGUudGV4dERlY29yYXRpb24gPSBcInVuZGVybGluZVwiO1xuICAgICAgICB0aGlzLiRlbWl0KCdvbi1lcnJvcicsIGlzRHVwbGljYXRlZE9yTWF4TGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdmFsaWRhdGVJZk5lZWRlZCh0YWdWYWx1ZSkge1xuICAgICAgaWYgKHRoaXMudmFsaWRhdGUgPT09IFwiXCIgfHwgdGhpcy52YWxpZGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMudmFsaWRhdGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZSh0YWdWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICByZW1vdmVMYXN0VGFnKCkge1xuICAgICAgaWYgKHRoaXMubmV3VGFnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbm5lclRhZ3MucG9wKCk7XG4gICAgICB0aGlzLnRhZ0NoYW5nZSgpO1xuICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbkNvbnRleHRNZW51KCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShpbmRleCkge1xuICAgICAgdGhpcy5pbm5lclRhZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHRoaXMudGFnQ2hhbmdlKCk7XG4gICAgICB0aGlzLiRlbWl0KFwib24tcmVtb3ZlXCIsIGluZGV4KTtcbiAgICAgIHRoaXMudXBkYXRlUG9zaXRpb25Db250ZXh0TWVudSgpO1xuICAgIH0sXG5cbiAgICB0YWdDaGFuZ2UoKSB7XG4gICAgICB0aGlzLiRlbWl0KFwib24tdGFncy1jaGFuZ2VkXCIsIHRoaXMuaW5uZXJUYWdzKTtcbiAgICB9XG5cbiAgfVxufTtcblxuY29uc3QgX2hvaXN0ZWRfMSA9IHtcbiAga2V5OiAxLFxuICBjbGFzczogXCJ2M3RpLXRhZy1jb250ZW50XCJcbn07XG5jb25zdCBfaG9pc3RlZF8yID0gW1wib25DbGlja1wiXTtcbmNvbnN0IF9ob2lzdGVkXzMgPSBbXCJwbGFjZWhvbGRlclwiLCBcImRpc2FibGVkXCJdO1xuY29uc3QgX2hvaXN0ZWRfNCA9IHtcbiAga2V5OiAwLFxuICBjbGFzczogXCJ2M3RpLWxvYWRpbmdcIlxufTtcbmNvbnN0IF9ob2lzdGVkXzUgPSB7XG4gIGtleTogMSxcbiAgY2xhc3M6IFwidjN0aS1uby1kYXRhXCJcbn07XG5jb25zdCBfaG9pc3RlZF82ID0ge1xuICBrZXk6IDFcbn07XG5jb25zdCBfaG9pc3RlZF83ID0ge1xuICBrZXk6IDJcbn07XG5jb25zdCBfaG9pc3RlZF84ID0gW1wib25DbGlja1wiXTtcbmNvbnN0IF9ob2lzdGVkXzkgPSB7XG4gIGNsYXNzOiBcInYzdGktY29udGV4dC1pdGVtLS1sYWJlbFwiXG59O1xuY29uc3QgX2hvaXN0ZWRfMTAgPSB7XG4gIGtleTogMCxcbiAgY2xhc3M6IFwidjN0aS1pY29uLXNlbGVjdGVkLXRhZ1wiLFxuICB3aWR0aDogXCI0NFwiLFxuICBoZWlnaHQ6IFwiNDRcIixcbiAgdmlld0JveDogXCIwIDAgMjQgMjRcIixcbiAgXCJzdHJva2Utd2lkdGhcIjogXCIxLjVcIixcbiAgZmlsbDogXCJub25lXCIsXG4gIFwic3Ryb2tlLWxpbmVjYXBcIjogXCJyb3VuZFwiLFxuICBcInN0cm9rZS1saW5lam9pblwiOiBcInJvdW5kXCJcbn07XG5cbmNvbnN0IF9ob2lzdGVkXzExID0gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnRWTm9kZShcInBhdGhcIiwge1xuICBzdHJva2U6IFwibm9uZVwiLFxuICBkOiBcIk0wIDBoMjR2MjRIMHpcIlxufSwgbnVsbCwgLTEpO1xuXG5jb25zdCBfaG9pc3RlZF8xMiA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50Vk5vZGUoXCJwYXRoXCIsIHtcbiAgZDogXCJNNSAxMmw1IDVsMTAgLTEwXCJcbn0sIG51bGwsIC0xKTtcblxuY29uc3QgX2hvaXN0ZWRfMTMgPSBbX2hvaXN0ZWRfMTEsIF9ob2lzdGVkXzEyXTtcbmZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHtcbiAgY29uc3QgX2NvbXBvbmVudF9Mb2FkaW5nID0gcmVzb2x2ZUNvbXBvbmVudChcIkxvYWRpbmdcIik7XG5cbiAgY29uc3QgX2RpcmVjdGl2ZV9jbGlja19vdXRzaWRlID0gcmVzb2x2ZURpcmVjdGl2ZShcImNsaWNrLW91dHNpZGVcIik7XG5cbiAgcmV0dXJuIHdpdGhEaXJlY3RpdmVzKChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIHtcbiAgICBvbkNsaWNrOiBfY2FjaGVbNl0gfHwgKF9jYWNoZVs2XSA9ICRldmVudCA9PiAkb3B0aW9ucy5mb2N1c05ld1RhZygpKSxcbiAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW3tcbiAgICAgICd2M3RpLS1mb2N1cyc6ICRkYXRhLmlzSW5wdXRBY3RpdmUsXG4gICAgICAndjN0aS0tZXJyb3InOiAkZGF0YS5pc0Vycm9yXG4gICAgfSwgXCJ2M3RpXCJdKVxuICB9LCBbY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHtcbiAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1widjN0aS1jb250ZW50XCIsIHtcbiAgICAgICd2M3RpLWNvbnRlbnQtLXNlbGVjdCc6ICRwcm9wcy5zZWxlY3RcbiAgICB9XSksXG4gICAgcmVmOiBcImlucHV0Qm94XCJcbiAgfSwgWyhvcGVuQmxvY2sodHJ1ZSksIGNyZWF0ZUVsZW1lbnRCbG9jayhGcmFnbWVudCwgbnVsbCwgcmVuZGVyTGlzdCgkZGF0YS5pbm5lclRhZ3MsICh0YWcsIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJzcGFuXCIsIHtcbiAgICAgIGtleTogaW5kZXgsXG4gICAgICBjbGFzczogXCJ2M3RpLXRhZ1wiXG4gICAgfSwgWyRvcHRpb25zLmlzU2hvdCgnaXRlbScpID8gcmVuZGVyU2xvdChfY3R4LiRzbG90cywgXCJpdGVtXCIsIG5vcm1hbGl6ZVByb3BzKG1lcmdlUHJvcHMoe1xuICAgICAga2V5OiAwXG4gICAgfSwge1xuICAgICAgbmFtZTogdGFnLFxuICAgICAgaW5kZXgsXG4gICAgICB0YWdcbiAgICB9KSkpIDogKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJzcGFuXCIsIF9ob2lzdGVkXzEsIHRvRGlzcGxheVN0cmluZyh0YWcpLCAxKSksICEkcHJvcHMucmVhZE9ubHkgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImFcIiwge1xuICAgICAga2V5OiAyLFxuICAgICAgb25DbGljazogd2l0aE1vZGlmaWVycygkZXZlbnQgPT4gJG9wdGlvbnMucmVtb3ZlKGluZGV4KSwgW1wicHJldmVudFwiLCBcInN0b3BcIl0pLFxuICAgICAgY2xhc3M6IFwidjN0aS1yZW1vdmUtdGFnXCJcbiAgICB9LCBudWxsLCA4LCBfaG9pc3RlZF8yKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJcIiwgdHJ1ZSldKTtcbiAgfSksIDEyOCkpLCB3aXRoRGlyZWN0aXZlcyhjcmVhdGVFbGVtZW50Vk5vZGUoXCJpbnB1dFwiLCB7XG4gICAgcmVmOiBcImlucHV0VGFnXCIsXG4gICAgcGxhY2Vob2xkZXI6ICRwcm9wcy5wbGFjZWhvbGRlcixcbiAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSAkZXZlbnQgPT4gJGRhdGEubmV3VGFnID0gJGV2ZW50KSxcbiAgICBvbktleWRvd246IFtfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IHdpdGhLZXlzKHdpdGhNb2RpZmllcnMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICRvcHRpb25zLnJlbW92ZUxhc3RUYWcgJiYgJG9wdGlvbnMucmVtb3ZlTGFzdFRhZyguLi5hcmd1bWVudHMpO1xuICAgIH0sIFtcInN0b3BcIl0pLCBbXCJkZWxldGVcIl0pKSwgX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gJG9wdGlvbnMuYWRkTmV3ICYmICRvcHRpb25zLmFkZE5ldyguLi5hcmd1bWVudHMpO1xuICAgIH0pXSxcbiAgICBvbkJsdXI6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICRvcHRpb25zLmhhbmRsZUlucHV0Qmx1ciAmJiAkb3B0aW9ucy5oYW5kbGVJbnB1dEJsdXIoLi4uYXJndW1lbnRzKTtcbiAgICB9KSxcbiAgICBvbkZvY3VzOiBfY2FjaGVbNF0gfHwgKF9jYWNoZVs0XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAkb3B0aW9ucy5oYW5kbGVJbnB1dEZvY3VzICYmICRvcHRpb25zLmhhbmRsZUlucHV0Rm9jdXMoLi4uYXJndW1lbnRzKTtcbiAgICB9KSxcbiAgICBvbklucHV0OiBfY2FjaGVbNV0gfHwgKF9jYWNoZVs1XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAkb3B0aW9ucy5tYWtlSXROb3JtYWwgJiYgJG9wdGlvbnMubWFrZUl0Tm9ybWFsKC4uLmFyZ3VtZW50cyk7XG4gICAgfSksXG4gICAgY2xhc3M6IFwidjN0aS1uZXctdGFnXCIsXG4gICAgZGlzYWJsZWQ6ICRwcm9wcy5yZWFkT25seVxuICB9LCBudWxsLCA0MCwgX2hvaXN0ZWRfMyksIFtbdk1vZGVsVGV4dCwgJGRhdGEubmV3VGFnXV0pXSwgMiksICRwcm9wcy5zZWxlY3QgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInNlY3Rpb25cIiwge1xuICAgIGtleTogMCxcbiAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoW1widjN0aS1jb250ZXh0LW1lbnVcIiwge1xuICAgICAgJ3YzdGktY29udGV4dC1tZW51LW5vLWRhdGEnOiAhJHByb3BzLmlzU2hvd05vRGF0YSAmJiAkcHJvcHMuc2VsZWN0SXRlbXMubGVuZ3RoID09PSAwXG4gICAgfV0pLFxuICAgIHJlZjogXCJjb250ZXh0TWVudVwiXG4gIH0sIFskcHJvcHMubG9hZGluZyA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIF9ob2lzdGVkXzQsIFskb3B0aW9ucy5pc1Nob3QoJ2xvYWRpbmcnKSA/IHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiLCB7XG4gICAga2V5OiAwXG4gIH0pIDogKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhfY29tcG9uZW50X0xvYWRpbmcsIHtcbiAgICBrZXk6IDFcbiAgfSkpXSkpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwiXCIsIHRydWUpLCAhJHByb3BzLmxvYWRpbmcgJiYgJHByb3BzLnNlbGVjdEl0ZW1zLmxlbmd0aCA9PT0gMCAmJiAkcHJvcHMuaXNTaG93Tm9EYXRhID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwgX2hvaXN0ZWRfNSwgWyRvcHRpb25zLmlzU2hvdCgnbm8tZGF0YScpID8gcmVuZGVyU2xvdChfY3R4LiRzbG90cywgXCJuby1kYXRhXCIsIHtcbiAgICBrZXk6IDBcbiAgfSkgOiAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInNwYW5cIiwgX2hvaXN0ZWRfNiwgXCIgTm8gZGF0YSBcIikpXSkpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwiXCIsIHRydWUpLCAhJHByb3BzLmxvYWRpbmcgJiYgJHByb3BzLnNlbGVjdEl0ZW1zLmxlbmd0aCA+IDAgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCBfaG9pc3RlZF83LCBbKG9wZW5CbG9jayh0cnVlKSwgY3JlYXRlRWxlbWVudEJsb2NrKEZyYWdtZW50LCBudWxsLCByZW5kZXJMaXN0KCRwcm9wcy5zZWxlY3RJdGVtcywgKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwge1xuICAgICAga2V5OiBpbmRleCxcbiAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbXCJ2M3RpLWNvbnRleHQtaXRlbVwiLCB7XG4gICAgICAgICd2M3RpLWNvbnRleHQtaXRlbS0tYWN0aXZlJzogJG9wdGlvbnMuaXNTaG93Q2hlY2ttYXJrKGl0ZW0pXG4gICAgICB9XSksXG4gICAgICBvbkNsaWNrOiB3aXRoTW9kaWZpZXJzKCRldmVudCA9PiAkb3B0aW9ucy5oYW5kbGVTZWxlY3QoaXRlbSwgaW5kZXgpLCBbXCJzdG9wXCJdKVxuICAgIH0sIFtjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwgX2hvaXN0ZWRfOSwgW3JlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwic2VsZWN0LWl0ZW1cIiwgbm9ybWFsaXplUHJvcHMoZ3VhcmRSZWFjdGl2ZVByb3BzKGl0ZW0pKSldKSwgJG9wdGlvbnMuaXNTaG93Q2hlY2ttYXJrKGl0ZW0pID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJzdmdcIiwgX2hvaXN0ZWRfMTAsIF9ob2lzdGVkXzEzKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJcIiwgdHJ1ZSldLCAxMCwgX2hvaXN0ZWRfOCk7XG4gIH0pLCAxMjgpKV0pKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcIlwiLCB0cnVlKV0sIDIpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcIlwiLCB0cnVlKV0sIDIpKSwgW1tfZGlyZWN0aXZlX2NsaWNrX291dHNpZGUsICRvcHRpb25zLmNsb3NlQ29udGV4dE1lbnVdXSk7XG59XG5cbnZhciBjc3NfMjQ4eiA9IFwiLnYzdGkge1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgbWluLWhlaWdodDogMzJweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzljYTNhZjtcXG4gIGN1cnNvcjogdGV4dDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi52M3RpIC52M3RpLWljb24tc2VsZWN0ZWQtdGFnIHtcXG4gIHN0cm9rZTogIzE5YmU2YjtcXG4gIHdpZHRoOiAxcmVtO1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgbWFyZ2luLWxlZnQ6IDRweDtcXG59XFxuLnYzdGktLWZvY3VzIHtcXG4gIG91dGxpbmU6IDA7XFxuICBib3JkZXItY29sb3I6ICMwMDAwMDA7XFxuICBib3gtc2hhZG93OiAwIDAgMCAxcHggIzAwMDAwMDtcXG59XFxuLnYzdGktLWVycm9yIHtcXG4gIGJvcmRlci1jb2xvcjogI0Y1NkM2QztcXG59XFxuLnYzdGkgLnYzdGktbm8tZGF0YSB7XFxuICBjb2xvcjogI2Q4ZDhkODtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDRweCA3cHg7XFxufVxcbi52M3RpIC52M3RpLWxvYWRpbmcge1xcbiAgcGFkZGluZzogNHB4IDdweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLnYzdGkgLnYzdGktY29udGV4dC1tZW51IHtcXG4gIG1heC1oZWlnaHQ6IDE1MHB4O1xcbiAgbWluLXdpZHRoOiAxNTBweDtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiA1cHggMDtcXG4gIGJhY2tncm91bmQ6ICNmZmZmZmY7XFxuICB6LWluZGV4OiAxMDUwO1xcbiAgY29sb3I6ICM0NzU1Njk7XFxuICBib3gtc2hhZG93OiAwIDNweCA4cHggMnB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcXG4gIGJvcmRlci1yYWRpdXM6IDAgMCA2cHggNnB4O1xcbn1cXG4udjN0aSAudjN0aS1jb250ZXh0LW1lbnUgLnYzdGktY29udGV4dC1pdGVtIHtcXG4gIHBhZGRpbmc6IDRweCA3cHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuLnYzdGkgLnYzdGktY29udGV4dC1tZW51IC52M3RpLWNvbnRleHQtaXRlbTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjZThlOGU4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4udjN0aSAudjN0aS1jb250ZXh0LW1lbnUgLnYzdGktY29udGV4dC1pdGVtLS1sYWJlbCB7XFxuICBmbGV4OiAxO1xcbiAgbWluLXdpZHRoOiAxcHg7XFxufVxcbi52M3RpIC52M3RpLWNvbnRleHQtbWVudSAudjN0aS1jb250ZXh0LWl0ZW0tLWFjdGl2ZSB7XFxuICBjb2xvcjogIzMxN0NBRjtcXG59XFxuLnYzdGkgLnYzdGktY29udGV4dC1tZW51LW5vLWRhdGEge1xcbiAgcGFkZGluZzogMDtcXG59XFxuLnYzdGkgLnYzdGktY29udGVudCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcbi52M3RpIC52M3RpLWNvbnRlbnQtLXNlbGVjdCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xcbn1cXG4udjN0aSAudjN0aS10YWcge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBtYXJnaW46IDNweDtcXG4gIHBhZGRpbmc6IDAgNXB4O1xcbiAgYmFja2dyb3VuZDogIzMxN0NBRjtcXG4gIGNvbG9yOiAjZmZmZmZmO1xcbiAgaGVpZ2h0OiAyN3B4O1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIG1heC13aWR0aDogY2FsYygxMDAlIC0gMTZweCk7XFxufVxcbi52M3RpIC52M3RpLXRhZyAudjN0aS10YWctY29udGVudCB7XFxuICBmbGV4OiAxO1xcbiAgbWluLXdpZHRoOiAxcHg7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbn1cXG4udjN0aSAudjN0aS10YWcgLnYzdGktcmVtb3ZlLXRhZyB7XFxuICBjb2xvcjogI2ZmZmZmZjtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyBlYXNlO1xcbiAgb3BhY2l0eTogMC41O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcGFkZGluZzogMCA1cHggMCA3cHg7XFxufVxcbi52M3RpIC52M3RpLXRhZyAudjN0aS1yZW1vdmUtdGFnOjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcInhcXFwiO1xcbn1cXG4udjN0aSAudjN0aS10YWcgLnYzdGktcmVtb3ZlLXRhZzpob3ZlciB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4udjN0aSAudjN0aS1uZXctdGFnIHtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiAwO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIG1hcmdpbjogM3B4O1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIHBhZGRpbmc6IDAgNHB4O1xcbiAgZmxleDogMTtcXG4gIG1pbi13aWR0aDogNjBweDtcXG4gIGhlaWdodDogMjdweDtcXG59XFxuLnYzdGkgLnYzdGktbmV3LXRhZy0tZXJyb3Ige1xcbiAgY29sb3I6ICNGNTZDNkM7XFxufVwiO1xuc3R5bGVJbmplY3QoY3NzXzI0OHopO1xuXG5zY3JpcHQucmVuZGVyID0gcmVuZGVyO1xuXG4vLyBJbXBvcnQgdnVlIGNvbXBvbmVudFxuLy8gSUlGRSBpbmplY3RzIGluc3RhbGwgZnVuY3Rpb24gaW50byBjb21wb25lbnQsIGFsbG93aW5nIGNvbXBvbmVudFxuLy8gdG8gYmUgcmVnaXN0ZXJlZCB2aWEgVnVlLnVzZSgpIGFzIHdlbGwgYXMgVnVlLmNvbXBvbmVudCgpLFxuXG52YXIgZW50cnlfZXNtID0gLyojX19QVVJFX18qLygoKSA9PiB7XG4gIC8vIEdldCBjb21wb25lbnQgaW5zdGFuY2VcbiAgY29uc3QgaW5zdGFsbGFibGUgPSBzY3JpcHQ7IC8vIEF0dGFjaCBpbnN0YWxsIGZ1bmN0aW9uIGV4ZWN1dGVkIGJ5IFZ1ZS51c2UoKVxuXG4gIGluc3RhbGxhYmxlLmluc3RhbGwgPSBhcHAgPT4ge1xuICAgIGFwcC5jb21wb25lbnQoJ1Z1ZTNUYWdzSW5wdXQnLCBpbnN0YWxsYWJsZSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbGxhYmxlO1xufSkoKTsgLy8gSXQncyBwb3NzaWJsZSB0byBleHBvc2UgbmFtZWQgZXhwb3J0cyB3aGVuIHdyaXRpbmcgY29tcG9uZW50cyB0aGF0IGNhblxuLy8gYWxzbyBiZSB1c2VkIGFzIGRpcmVjdGl2ZXMsIGV0Yy4gLSBlZy4gaW1wb3J0IHsgUm9sbHVwRGVtb0RpcmVjdGl2ZSB9IGZyb20gJ3JvbGx1cC1kZW1vJztcbi8vIGV4cG9ydCBjb25zdCBSb2xsdXBEZW1vRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuXG5leHBvcnQgeyBlbnRyeV9lc20gYXMgZGVmYXVsdCB9O1xuIiwiPHRlbXBsYXRlPlxuICA8ZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4XCI+XG4gICAgICAgICAgPHN2ZyBmaWxsPVwiY3VycmVudENvbG9yXCIgaGVpZ2h0PVwiMjRcIiB3aWR0aD1cIjI0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHZlcnNpb249XCIxLjFcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMjQgMjQ7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj5cbiAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTEyLjksM2wyLDAuNEwxMS4xLDIxbC0yLTAuNEwxMi45LDMgTTE5LjYsMTJMMTYsOC40VjUuNmw2LjQsNi40TDE2LDE4LjR2LTIuOEwxOS42LDEyIE0xLjYsMTJMOCw1LjZ2Mi44TDQuNCwxMkw4LDE1LjYgIHYyLjhMMS42LDEyelwiPjwvcGF0aD5cbiAgICAgICAgICA8L3N2Zz5cblxuICAgICAgICAgIDxiIGNsYXNzPVwibXctYWRtaW4tYWN0aW9uLWxpbmtzIG1zLTNcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IHNob3dDbGFzc2VzIH1cIiB2LW9uOmNsaWNrPVwidG9nZ2xlQ2xhc3Nlc1wiPlxuICAgICAgICAgICAgICBDbGFzc2VzXG4gICAgICAgICAgPC9iPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgdi1pZj1cInNob3dDbGFzc2VzXCI+XG5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIHYtbW9kZWw9XCJjbGFzc2VzVG9LZWVwSW5wdXRcIiBAaW5wdXQ9XCJ1cGRhdGVDbGFzc2VzVG9LZWVwXCIvPlxuXG4gICAgICAgICAgICAgIDx2dWUzLXRhZ3MtaW5wdXQgOnRhZ3M9XCJjbGFzc2VzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIGNsYXNzZXMgc2VwYXJhdGVkIGJ5IGNvbW1hc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnZhbGlkYXRlPVwiY3VzdG9tVmFsaWRhdGVDbGFzc2VzXCJcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBvbi10YWdzLWNoYW5nZWQ9XCJoYW5kbGVDaGFuZ2VDbGFzc2VzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cblxuXG4gICAgIDwvZGl2PlxuXG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBWdWUzVGFnc0lucHV0IGZyb20gJ3Z1ZTMtdGFncy1pbnB1dCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgIFZ1ZTNUYWdzSW5wdXRcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgIHNob3dDbGFzc2VzOiBmYWxzZSxcbiAgICAgIGFjdGl2ZU5vZGU6IG51bGwsXG4gICAgICBpc1JlYWR5OiBmYWxzZSxcbiAgICAgIGNsYXNzZXNUb0tlZXBJbnB1dDogJycsXG4gICAgICBjbGFzc2VzVG9LZWVwOiBbXG4gICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgJ25vLXR5cGluZycsXG4gICAgICAgICdzYWZlLW1vZGUnLFxuICAgICAgICAnZWRpdCcsXG4gICAgICAgICdub2Ryb3AnLFxuICAgICAgICAnYWxsb3ctZHJvcCcsXG4gICAgICAgICdtb2R1bGUnLFxuICAgICAgICAnbW9kdWxlLW92ZXJsYXAnLFxuICAgICAgICAnbW9kdWxlLW92ZXJsYXAtb24taG92ZXInLFxuICAgICAgICAnYWxsb3ctdHlwaW5nJyxcbiAgICAgICAgJ2FsbG93LWVkaXQnLFxuICAgICAgICAnaW1nLWFzLWJhY2tncm91bmQnLFxuICAgICAgICAnaW1hZ2UtaG9sZGVyJyxcbiAgICAgIF0sXG4gICAgICBjbGFzc2VzOiBbXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAgIHRvZ2dsZUNsYXNzZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLnNob3dDbGFzc2VzID0gIXRoaXMuc2hvd0NsYXNzZXM7XG4gICAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2VsZW1lbnQtc3R5bGUtZWRpdG9yLXNob3cnLCAnY2xhc3NlcycpO1xuICAgICAgfSxcbiAgICBjdXN0b21WYWxpZGF0ZUNsYXNzZXModmFsdWUpIHtcbiAgICAgIC8vIFVzZSByZWdleCB0byB2YWxpZGF0ZSBpbnB1dCBjbGFzc2VzXG4gICAgICBjb25zdCByZWdleCA9IC9eW2EtekEtWlxccyxdKiQvO1xuICAgICAgY29uc3QgdmFsaWRDbGFzc2VzID0gdmFsdWVcbiAgICAgICAgICAuc3BsaXQoJywnKVxuICAgICAgICAgIC5tYXAoY2xhc3NOYW1lID0+IGNsYXNzTmFtZS50cmltKCkpXG4gICAgICAgICAgLmZpbHRlcihjbGFzc05hbWUgPT4gcmVnZXgudGVzdChjbGFzc05hbWUpICYmIHRoaXMuY2xhc3Nlc1RvS2VlcC5pbmNsdWRlcyhjbGFzc05hbWUpKTtcbiAgICAgIHJldHVybiB2YWxpZENsYXNzZXM7XG4gICAgfSxcbiAgICBoYW5kbGVDaGFuZ2VDbGFzc2VzKGNsYXNzZXMpIHtcbiAgICAgIHRoaXMuY2xhc3NlcyA9IGNsYXNzZXM7XG4gICAgfSxcbiAgICB1cGRhdGVDbGFzc2VzVG9LZWVwKCkge1xuICAgICAgdGhpcy5jbGFzc2VzVG9LZWVwID0gdGhpcy5jbGFzc2VzVG9LZWVwSW5wdXQuc3BsaXQoJywnKS5tYXAoY2xhc3NOYW1lID0+IGNsYXNzTmFtZS50cmltKCkpO1xuICAgIH0sXG4gICAgYXBwbHlDbGFzc2VzKCkge1xuICAgICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYWN0aXZlTm9kZSkge1xuICAgICAgICAvLyBSZW1vdmUgYW55IGV4aXN0aW5nIGNsYXNzZXMgZnJvbSB0aGUgYWN0aXZlIG5vZGVcbiAgICAgICAgdGhpcy5hY3RpdmVOb2RlLmNsYXNzTmFtZSA9ICcnO1xuXG4gICAgICAgIC8vIEFkZCB0aGUgbmV3IGNsYXNzZXMgdG8gdGhlIGFjdGl2ZSBub2RlIGZyb20gY2xhc3NlcyBhcnJheVxuICAgICAgICB0aGlzLmNsYXNzZXMuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlTm9kZS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBZGQgdGhlIG5ldyBjbGFzc2VzIGZyb20gY2xhc3Nlc1RvS2VlcElucHV0XG4gICAgICAgIGlmICh0aGlzLmNsYXNzZXNUb0tlZXBJbnB1dCkge1xuICAgICAgICAgIGNvbnN0IGFkZGl0aW9uYWxDbGFzc2VzID0gdGhpcy5jbGFzc2VzVG9LZWVwSW5wdXQuc3BsaXQoJywnKVxuICAgICAgICAgICAgICAubWFwKGNsYXNzTmFtZSA9PiBjbGFzc05hbWUudHJpbSgpKVxuICAgICAgICAgICAgICAuZmlsdGVyKGNsYXNzTmFtZSA9PiAhIWNsYXNzTmFtZSk7XG5cbiAgICAgICAgICBhZGRpdGlvbmFsQ2xhc3Nlcy5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYWN0aXZlTm9kZS5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICB0aGlzLmFjdGl2ZU5vZGUuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYobXcudG9wKCkuYXBwKXtcbiAgICAgICAgICBtdy50b3AoKS5hcHAucmVnaXN0ZXJDaGFuZ2VkU3RhdGUodGhpcy5hY3RpdmVOb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yKGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWN0aXZlTm9kZSA9IGVsZW1lbnQ7XG5cbiAgICAgICAgLy8gUG9wdWxhdGUgdGhlIGNsYXNzZXMgYXJyYXkgd2l0aCB0aGUgZXhpc3RpbmcgY2xhc3NlcyBvZiB0aGUgYWN0aXZlIG5vZGVcbiAgICAgICAgdGhpcy5jbGFzc2VzID0gdGhpcy5hY3RpdmVOb2RlLmNsYXNzTmFtZVxuICAgICAgICAgICAgLnNwbGl0KCcgJylcbiAgICAgICAgICAgIC5maWx0ZXIoY2xhc3NOYW1lID0+ICEhY2xhc3NOYW1lKVxuICAgICAgICAgICAgLmZpbHRlcihjbGFzc05hbWUgPT4ge1xuICAgICAgICAgICAgICAvLyBGaWx0ZXIgb3V0IGNsYXNzZXMgdGhhdCBzdGFydCB3aXRoIFwiYW5pbWF0ZV9fXCJcbiAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZS5zdGFydHNXaXRoKCdhbmltYXRlX18nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuY2xhc3Nlc1RvS2VlcC5pbmNsdWRlcyhjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgYWN0aXZlTm9kZSBoYXMgYW55IGNsYXNzZXMgdG8gaW5jbHVkZSBpbiBjbGFzc2VzVG9LZWVwSW5wdXRcbiAgICAgICAgY29uc3QgYWN0aXZlTm9kZUNsYXNzZXMgPSB0aGlzLmFjdGl2ZU5vZGUuY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gICAgICAgIGNvbnN0IGNsYXNzZXNUb0luY2x1ZGUgPSB0aGlzLmNsYXNzZXNUb0tlZXAuZmlsdGVyKGNsYXNzTmFtZSA9PlxuICAgICAgICAgICAgYWN0aXZlTm9kZUNsYXNzZXMuaW5jbHVkZXMoY2xhc3NOYW1lKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNsYXNzZXNUb0tlZXBJbnB1dCA9IGNsYXNzZXNUb0luY2x1ZGUuam9pbignLCAnKTtcblxuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuaXNSZWFkeSA9IHRydWU7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgICB9XG4gICAgfVxuXG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgICB0aGlzLmVtaXR0ZXIub24oXCJlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93XCIsIGVsZW1lbnRTdHlsZUVkaXRvclNob3cgPT4ge1xuICAgICAgICAgIGlmIChlbGVtZW50U3R5bGVFZGl0b3JTaG93ICE9PSAnY2xhc3NlcycpIHtcbiAgICAgICAgICAgICAgdGhpcy5zaG93Q2xhc3NlcyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgIH0pO1xuICAgIG13LnRvcCgpLmFwcC5vbignbXcuZWxlbWVudFN0eWxlRWRpdG9yLnNlbGVjdE5vZGUnLCAoZWxlbWVudCkgPT4ge1xuICAgICAgdGhpcy5wb3B1bGF0ZVN0eWxlRWRpdG9yKGVsZW1lbnQpO1xuICAgIH0pO1xuICB9LFxuICB3YXRjaDoge1xuICAgIGNsYXNzZXMobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAvLyBBcHBseSB0aGUgY2xhc3NlcyB3aGVuZXZlciB0aGUgY2xhc3NlcyBhcnJheSBjaGFuZ2VzXG4gICAgICB0aGlzLmFwcGx5Q2xhc3NlcygpO1xuICAgIH0sXG4gIH0sXG59O1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4XCI+XG5cbiAgICAgICAgPHN2ZyBmaWxsPVwiY3VycmVudENvbG9yXCIgaGVpZ2h0PVwiMjRcIiB3aWR0aD1cIjI0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHZlcnNpb249XCIxLjFcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBzdHlsZT1cImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMjQgMjQ7XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTksMTloMnYyaC0yVjE5IE0xOSwxN2gydi0yaC0yVjE3IE0zLDEzaDJ2LTJIM1YxMyBNMywxN2gydi0ySDNWMTcgTTMsOWgyVjdIM1Y5IE0zLDVoMlYzSDNWNSBNNyw1aDJWM0g3VjUgTTE1LDIxaDJ2LTIgIGgtMlYyMSBNMTEsMjFoMnYtMmgtMlYyMSBNMTUsMjFoMnYtMmgtMlYyMSBNNywyMWgydi0ySDdWMjEgTTMsMjFoMnYtMkgzVjIxIE0yMSw4YzAtMi44LTIuMi01LTUtNWgtNXYyaDVjMS43LDAsMywxLjMsMywzdjVoMlY4elwiPjwvcGF0aD5cbiAgICAgICAgPC9zdmc+XG5cbiAgICAgICAgPGIgY2xhc3M9XCJtdy1hZG1pbi1hY3Rpb24tbGlua3MgbXMtM1wiIDpjbGFzcz1cInsnYWN0aXZlJzogc2hvd1JvdW5kZWRDb3JuZXJzIH1cIiB2LW9uOmNsaWNrPVwidG9nZ2xlUm91bmRlZENvcm5lcnNcIj5cbiAgICAgICAgICAgIFJvdW5kZWQgY29ybmVyc1xuICAgICAgICA8L2I+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IHYtaWY9XCJzaG93Um91bmRlZENvcm5lcnNcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LWNvbHVtbiBnYXAtM1wiPlxuXG4gICAgICAgICAgICA8Qm9yZGVyUmFkaXVzIHYtbW9kZWw9XCJib3JkZXJSYWRpdXNcIj48L0JvcmRlclJhZGl1cz5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IEJvcmRlclJhZGl1cyBmcm9tIFwiLi9jb21wb25lbnRzL0JvcmRlclJhZGl1cy52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtCb3JkZXJSYWRpdXN9LFxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnc2hvd1JvdW5kZWRDb3JuZXJzJzogZmFsc2UsXG4gICAgICAgICAgICAnYWN0aXZlTm9kZSc6IG51bGwsXG4gICAgICAgICAgICAnaXNSZWFkeSc6IGZhbHNlLFxuICAgICAgICAgICAgJ2JvcmRlclJhZGl1cyc6IHtcbiAgICAgICAgICAgICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiAnJyxcbiAgICAgICAgICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJycsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogJycsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6ICcnLFxuICAgICAgICAgICAgfSxcblxuXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHRvZ2dsZVJvdW5kZWRDb3JuZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dSb3VuZGVkQ29ybmVycyA9ICF0aGlzLnNob3dSb3VuZGVkQ29ybmVycztcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93JywgJ3JvdW5kZWRDb3JuZXJzJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVzZXRBbGxQcm9wZXJ0aWVzOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIHRoaXMuYm9yZGVyUmFkaXVzID0ge1xuICAgICAgICAgICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6ICcnLFxuICAgICAgICAgICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnJyxcbiAgICAgICAgICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAnJyxcbiAgICAgICAgICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogJycsXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBwb3B1bGF0ZVN0eWxlRWRpdG9yOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUgJiYgbm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNzcyA9IG13LkNTU1BhcnNlcihub2RlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0QWxsUHJvcGVydGllcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlTm9kZSA9IG5vZGU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBvcHVsYXRlQ3NzQm9yZGVyUmFkaXVzKGNzcyk7XG5cblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcG9wdWxhdGVDc3NCb3JkZXJSYWRpdXM6IGZ1bmN0aW9uIChjc3MpIHtcbiAgICAgICAgICAgIGlmICghY3NzIHx8ICFjc3MuZ2V0KSByZXR1cm47XG4gICAgICAgICAgICB2YXIgYm9yZGVyUmFkaXVzID0gY3NzLmdldC5yYWRpdXModHJ1ZSk7XG5cbiAgICAgICAgICAgIHRoaXMuYm9yZGVyVG9wTGVmdFJhZGl1cyA9IGJvcmRlclJhZGl1cy50bDtcbiAgICAgICAgICAgIHRoaXMuYm9yZGVyVG9wUmlnaHRSYWRpdXMgPSBib3JkZXJSYWRpdXMudHI7XG4gICAgICAgICAgICB0aGlzLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzID0gYm9yZGVyUmFkaXVzLmJyO1xuICAgICAgICAgICAgdGhpcy5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzID0gYm9yZGVyUmFkaXVzLmJsO1xuXG4gICAgICAgICAgICB0aGlzLmJvcmRlclJhZGl1cyA9IHtcbiAgICAgICAgICAgICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMudGwsXG4gICAgICAgICAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IGJvcmRlclJhZGl1cy50cixcbiAgICAgICAgICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMuYmwsXG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IGJvcmRlclJhZGl1cy5icixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhcHBseVByb3BlcnR5VG9BY3RpdmVOb2RlOiBmdW5jdGlvbiAocHJvcCwgdmFsKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSZWFkeSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlTm9kZSkge1xuICAgICAgICAgICAgICAgIG13LnRvcCgpLmFwcC5kaXNwYXRjaCgnbXcuZWxlbWVudFN0eWxlRWRpdG9yLmFwcGx5Q3NzUHJvcGVydHlUb05vZGUnLCB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGU6IHRoaXMuYWN0aXZlTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcDogcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgdmFsOiB2YWxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgIH0sXG4gICAgbW91bnRlZCgpIHtcblxuICAgICAgICB0aGlzLmVtaXR0ZXIub24oXCJlbGVtZW50LXN0eWxlLWVkaXRvci1zaG93XCIsIGVsZW1lbnRTdHlsZUVkaXRvclNob3cgPT4ge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRTdHlsZUVkaXRvclNob3cgIT09ICdyb3VuZGVkQ29ybmVycycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dSb3VuZGVkQ29ybmVycyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBtdy50b3AoKS5hcHAub24oJ213LmVsZW1lbnRTdHlsZUVkaXRvci5zZWxlY3ROb2RlJywgKGVsZW1lbnQpID0+IHtcblxuICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZVN0eWxlRWRpdG9yKGVsZW1lbnQpXG5cbiAgICAgICAgfSk7XG5cbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICAgIGJvcmRlclJhZGl1czogZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuXG5cbiAgICAgICAgICAgIHZhciBib3JkZXJSYWRpdXNWYWx1ZSA9ICcnO1xuICAgICAgICAgICAgaWYgKG5ld1ZhbHVlLmJvcmRlclRvcExlZnRSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSBuZXdWYWx1ZS5ib3JkZXJUb3BMZWZ0UmFkaXVzICsgJ3B4ICc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1c1ZhbHVlICs9ICcwcHggJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZS5ib3JkZXJUb3BSaWdodFJhZGl1cykge1xuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1c1ZhbHVlICs9IG5ld1ZhbHVlLmJvcmRlclRvcFJpZ2h0UmFkaXVzICsgJ3B4ICc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1c1ZhbHVlICs9ICcwcHggJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1cykge1xuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1c1ZhbHVlICs9IG5ld1ZhbHVlLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzICsgJ3B4ICc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1c1ZhbHVlICs9ICcwcHggJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZS5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzVmFsdWUgKz0gbmV3VmFsdWUuYm9yZGVyQm90dG9tTGVmdFJhZGl1cyArICdweCAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXNWYWx1ZSArPSAnMHB4ICc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYXBwbHlQcm9wZXJ0eVRvQWN0aXZlTm9kZSgnYm9yZGVyLXJhZGl1cycsIGJvcmRlclJhZGl1c1ZhbHVlKTtcblxuXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG48L3NjcmlwdD5cblxuXG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW5cIj5cbiAgICA8ZGl2IGNsYXNzPVwibWItNFwiIHYtc2hvdz1cInNob3dFbGVtZW50U2VsZWN0b3JcIj5cbiAgICAgIDxFbGVtZW50U3R5bGVFZGl0b3JFbGVtZW50U2VsZWN0b3I+PC9FbGVtZW50U3R5bGVFZGl0b3JFbGVtZW50U2VsZWN0b3I+XG4gICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJtYi00XCIgdi1zaG93PVwic2hvd0JhY2tncm91bmRcIj5cbiAgICAgICAgICA8RWxlbWVudFN0eWxlRWRpdG9yQmFja2dyb3VuZD48L0VsZW1lbnRTdHlsZUVkaXRvckJhY2tncm91bmQ+XG4gICAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwibWItNFwiIHYtc2hvdz1cInNob3dUeXBvZ3JhcGh5XCI+XG4gICAgICA8RWxlbWVudFN0eWxlRWRpdG9yVHlwb2dyYXBoeT48L0VsZW1lbnRTdHlsZUVkaXRvclR5cG9ncmFwaHk+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cIm1iLTRcIiB2LXNob3c9XCJzaG93U3BhY2luZ1wiPlxuICAgICAgPEVsZW1lbnRTdHlsZUVkaXRvclNwYWNpbmc+PC9FbGVtZW50U3R5bGVFZGl0b3JTcGFjaW5nPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiB2LXNob3c9XCJzaG93Q29udGFpbmVyXCI+XG4gICAgICA8RWxlbWVudFN0eWxlRWRpdG9yQ29udGFpbmVyPjwvRWxlbWVudFN0eWxlRWRpdG9yQ29udGFpbmVyPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiB2LXNob3c9XCJzaG93R3JpZFwiPlxuICAgICAgPEVsZW1lbnRTdHlsZUVkaXRvckdyaWQ+PC9FbGVtZW50U3R5bGVFZGl0b3JHcmlkPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cIm1iLTRcIiB2LXNob3c9XCJzaG93Qm9yZGVyXCI+XG4gICAgICA8RWxlbWVudFN0eWxlRWRpdG9yQm9yZGVyPjwvRWxlbWVudFN0eWxlRWRpdG9yQm9yZGVyPlxuICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwibWItNFwiIHYtc2hvdz1cInNob3dSb3VuZGVkQ29ybmVyc1wiPlxuICAgICAgPEVsZW1lbnRTdHlsZUVkaXRvclJvdW5kZWRDb3JuZXJzPjwvRWxlbWVudFN0eWxlRWRpdG9yUm91bmRlZENvcm5lcnM+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IHYtc2hvdz1cInNob3dBbmltYXRpb25zXCI+XG4gICAgICA8RWxlbWVudFN0eWxlRWRpdG9yQW5pbWF0aW9ucz48L0VsZW1lbnRTdHlsZUVkaXRvckFuaW1hdGlvbnM+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwibWItNFwiIHYtc2hvdz1cInNob3dDbGFzc0FwcGxpZXJcIj5cbiAgICAgIDxFbGVtZW50U3R5bGVFZGl0b3JDbGFzc0FwcGxpZXI+PC9FbGVtZW50U3R5bGVFZGl0b3JDbGFzc0FwcGxpZXI+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuPHN0eWxlIHNyYz1cIi4vRWxlbWVudFN0eWxlRWRpdG9yLmNzc1wiPjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgRWxlbWVudFN0eWxlRWRpdG9yVHlwb2dyYXBoeSBmcm9tICcuL0VsZW1lbnRTdHlsZUVkaXRvclR5cG9ncmFwaHkudnVlJztcbmltcG9ydCBFbGVtZW50U3R5bGVFZGl0b3JTcGFjaW5nIGZyb20gJy4vRWxlbWVudFN0eWxlRWRpdG9yU3BhY2luZy52dWUnO1xuaW1wb3J0IEVsZW1lbnRTdHlsZUVkaXRvckJhY2tncm91bmQgZnJvbSAnLi9FbGVtZW50U3R5bGVFZGl0b3JCYWNrZ3JvdW5kLnZ1ZSc7XG5pbXBvcnQgRWxlbWVudFN0eWxlRWRpdG9yQm9yZGVyIGZyb20gJy4vRWxlbWVudFN0eWxlRWRpdG9yQm9yZGVyLnZ1ZSc7XG5pbXBvcnQgRWxlbWVudFN0eWxlRWRpdG9yRWxlbWVudFNlbGVjdG9yIGZyb20gJy4vRWxlbWVudFN0eWxlRWRpdG9yRWxlbWVudFNlbGVjdG9yLnZ1ZSc7XG5pbXBvcnQgRWxlbWVudFN0eWxlRWRpdG9yQ29udGFpbmVyIGZyb20gJy4vRWxlbWVudFN0eWxlRWRpdG9yQ29udGFpbmVyLnZ1ZSc7XG5pbXBvcnQgRWxlbWVudFN0eWxlRWRpdG9yQW5pbWF0aW9ucyBmcm9tICcuL0VsZW1lbnRTdHlsZUVkaXRvckFuaW1hdGlvbnMudnVlJztcbmltcG9ydCBFbGVtZW50U3R5bGVFZGl0b3JHcmlkIGZyb20gJy4vRWxlbWVudFN0eWxlRWRpdG9yR3JpZC52dWUnO1xuaW1wb3J0IEVsZW1lbnRTdHlsZUVkaXRvckNsYXNzQXBwbGllciBmcm9tICcuL0VsZW1lbnRTdHlsZUVkaXRvckNsYXNzQXBwbGllci52dWUnO1xuaW1wb3J0IEVsZW1lbnRTdHlsZUVkaXRvclJvdW5kZWRDb3JuZXJzIGZyb20gXCIuL0VsZW1lbnRTdHlsZUVkaXRvclJvdW5kZWRDb3JuZXJzLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICAgIEVsZW1lbnRTdHlsZUVkaXRvckJhY2tncm91bmQsXG4gICAgICBFbGVtZW50U3R5bGVFZGl0b3JSb3VuZGVkQ29ybmVycyxcbiAgICBFbGVtZW50U3R5bGVFZGl0b3JFbGVtZW50U2VsZWN0b3IsXG4gICAgRWxlbWVudFN0eWxlRWRpdG9yVHlwb2dyYXBoeSxcbiAgICBFbGVtZW50U3R5bGVFZGl0b3JTcGFjaW5nLFxuICAgIEVsZW1lbnRTdHlsZUVkaXRvckJvcmRlcixcbiAgICBFbGVtZW50U3R5bGVFZGl0b3JDb250YWluZXIsXG4gICAgRWxlbWVudFN0eWxlRWRpdG9yR3JpZCxcbiAgICBFbGVtZW50U3R5bGVFZGl0b3JBbmltYXRpb25zLFxuICAgIEVsZW1lbnRTdHlsZUVkaXRvckNsYXNzQXBwbGllcixcbiAgfSxcblxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzaG93RWxlbWVudFNlbGVjdG9yOiB0cnVlLFxuICAgICAgICBzaG93QmFja2dyb3VuZDogdHJ1ZSxcbiAgICAgICAgc2hvd1R5cG9ncmFwaHk6IHRydWUsXG4gICAgICAgIHNob3dTcGFjaW5nOiB0cnVlLFxuICAgICAgICBzaG93Qm9yZGVyOiB0cnVlLFxuICAgICAgICBzaG93Q29udGFpbmVyOiB0cnVlLFxuICAgICAgICBzaG93R3JpZDogdHJ1ZSxcbiAgICAgICAgc2hvd0FuaW1hdGlvbnM6IHRydWUsXG4gICAgICAgIHNob3dDbGFzc0FwcGxpZXI6IHRydWUsXG4gICAgICAgIHNob3dSb3VuZGVkQ29ybmVyczogdHJ1ZSxcbiAgICB9XG4gIH0sXG5cbiAgbWV0aG9kczoge30sXG4gIG1vdW50ZWQoKSB7XG5cbiAgICBtdy50b3AoKS5hcHAub24oJ2Nzc0VkaXRvclNldHRpbmdzJywgKHNldHRpbmdzKSA9PiB7XG5cbiAgICAgIGlmIChzZXR0aW5ncy5maWVsZFNldHRpbmdzLmNvbXBvbmVudHMpIHtcblxuICAgICAgICB0aGlzLnNob3dCYWNrZ3JvdW5kID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hvd1R5cG9ncmFwaHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zaG93U3BhY2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNob3dCb3JkZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zaG93RWxlbWVudFNlbGVjdG9yID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hvd0NvbnRhaW5lciA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNob3dBbmltYXRpb25zID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hvd0NsYXNzQXBwbGllciA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKHNldHRpbmdzLmZpZWxkU2V0dGluZ3MuY29tcG9uZW50cy5pbmNsdWRlcygnYmFja2dyb3VuZCcpKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2hvd0JhY2tncm91bmQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgaWYgKHNldHRpbmdzLmZpZWxkU2V0dGluZ3MuY29tcG9uZW50cy5pbmNsdWRlcygnZWxlbWVudFNlbGVjdG9yJykpIHtcbiAgICAgICAgICB0aGlzLnNob3dFbGVtZW50U2VsZWN0b3IgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXR0aW5ncy5maWVsZFNldHRpbmdzLmNvbXBvbmVudHMuaW5jbHVkZXMoJ3R5cG9ncmFwaHknKSkge1xuICAgICAgICAgIHRoaXMuc2hvd1R5cG9ncmFwaHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXR0aW5ncy5maWVsZFNldHRpbmdzLmNvbXBvbmVudHMuaW5jbHVkZXMoJ3NwYWNpbmcnKSkge1xuICAgICAgICAgIHRoaXMuc2hvd1NwYWNpbmcgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLmZpZWxkU2V0dGluZ3MuY29tcG9uZW50cy5pbmNsdWRlcygnYm9yZGVyJykpIHtcbiAgICAgICAgICB0aGlzLnNob3dCb3JkZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXR0aW5ncy5maWVsZFNldHRpbmdzLmNvbXBvbmVudHMuaW5jbHVkZXMoJ2NvbnRhaW5lcicpKSB7XG4gICAgICAgICAgdGhpcy5zaG93Q29udGFpbmVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0dGluZ3MuZmllbGRTZXR0aW5ncy5jb21wb25lbnRzLmluY2x1ZGVzKCdncmlkJykpIHtcbiAgICAgICAgICB0aGlzLnNob3dHcmlkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXR0aW5ncy5maWVsZFNldHRpbmdzLmNvbXBvbmVudHMuaW5jbHVkZXMoJ2FuaW1hdGlvbnMnKSkge1xuICAgICAgICAgIHRoaXMuc2hvd0FuaW1hdGlvbnMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLmZpZWxkU2V0dGluZ3MuY29tcG9uZW50cy5pbmNsdWRlcygncm91bmRlZENvcm5lcnMnKSkge1xuICAgICAgICAgIHRoaXMuc2hvd1JvdW5kZWRDb3JuZXJzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXR0aW5ncy5maWVsZFNldHRpbmdzLmNvbXBvbmVudHMuaW5jbHVkZXMoJ2NsYXNzZXMnKSkge1xuICAgICAgICAgIHRoaXMuc2hvd0NsYXNzQXBwbGllciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICB9LFxuXG5cbn1cbjwvc2NyaXB0PlxuXG5cbiIsImV4cG9ydCBjb25zdCBJTl9CUk9XU0VSID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5leHBvcnQgY29uc3QgU1VQUE9SVFNfSU5URVJTRUNUSU9OID0gSU5fQlJPV1NFUiAmJiAnSW50ZXJzZWN0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdztcbmV4cG9ydCBjb25zdCBTVVBQT1JUU19UT1VDSCA9IElOX0JST1dTRVIgJiYgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cubmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWxzLm1qcy5tYXAiLCJmdW5jdGlvbiBfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyhvYmosIHByaXZhdGVNYXAsIHZhbHVlKSB7IF9jaGVja1ByaXZhdGVSZWRlY2xhcmF0aW9uKG9iaiwgcHJpdmF0ZU1hcCk7IHByaXZhdGVNYXAuc2V0KG9iaiwgdmFsdWUpOyB9XG5mdW5jdGlvbiBfY2hlY2tQcml2YXRlUmVkZWNsYXJhdGlvbihvYmosIHByaXZhdGVDb2xsZWN0aW9uKSB7IGlmIChwcml2YXRlQ29sbGVjdGlvbi5oYXMob2JqKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGluaXRpYWxpemUgdGhlIHNhbWUgcHJpdmF0ZSBlbGVtZW50cyB0d2ljZSBvbiBhbiBvYmplY3RcIik7IH0gfVxuZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkgeyB2YXIgZGVzY3JpcHRvciA9IF9jbGFzc0V4dHJhY3RGaWVsZERlc2NyaXB0b3IocmVjZWl2ZXIsIHByaXZhdGVNYXAsIFwic2V0XCIpOyBfY2xhc3NBcHBseURlc2NyaXB0b3JTZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IsIHZhbHVlKTsgcmV0dXJuIHZhbHVlOyB9XG5mdW5jdGlvbiBfY2xhc3NBcHBseURlc2NyaXB0b3JTZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IsIHZhbHVlKSB7IGlmIChkZXNjcmlwdG9yLnNldCkgeyBkZXNjcmlwdG9yLnNldC5jYWxsKHJlY2VpdmVyLCB2YWx1ZSk7IH0gZWxzZSB7IGlmICghZGVzY3JpcHRvci53cml0YWJsZSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCByZWFkIG9ubHkgcHJpdmF0ZSBmaWVsZFwiKTsgfSBkZXNjcmlwdG9yLnZhbHVlID0gdmFsdWU7IH0gfVxuZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7IHZhciBkZXNjcmlwdG9yID0gX2NsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvcihyZWNlaXZlciwgcHJpdmF0ZU1hcCwgXCJnZXRcIik7IHJldHVybiBfY2xhc3NBcHBseURlc2NyaXB0b3JHZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IpOyB9XG5mdW5jdGlvbiBfY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yKHJlY2VpdmVyLCBwcml2YXRlTWFwLCBhY3Rpb24pIHsgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBcIiArIGFjdGlvbiArIFwiIHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpOyB9IHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7IH1cbmZ1bmN0aW9uIF9jbGFzc0FwcGx5RGVzY3JpcHRvckdldChyZWNlaXZlciwgZGVzY3JpcHRvcikgeyBpZiAoZGVzY3JpcHRvci5nZXQpIHsgcmV0dXJuIGRlc2NyaXB0b3IuZ2V0LmNhbGwocmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjcmlwdG9yLnZhbHVlOyB9XG4vLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNhbWVsaXplLCBjYXBpdGFsaXplLCBjb21wdXRlZCwgRnJhZ21lbnQsIHJlYWN0aXZlLCB0b1JlZnMsIHdhdGNoRWZmZWN0IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IElOX0JST1dTRVIgfSBmcm9tIFwiLi9nbG9iYWxzLm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGdldE5lc3RlZFZhbHVlKG9iaiwgcGF0aCwgZmFsbGJhY2spIHtcbiAgY29uc3QgbGFzdCA9IHBhdGgubGVuZ3RoIC0gMTtcbiAgaWYgKGxhc3QgPCAwKSByZXR1cm4gb2JqID09PSB1bmRlZmluZWQgPyBmYWxsYmFjayA6IG9iajtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXN0OyBpKyspIHtcbiAgICBpZiAob2JqID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICB9XG4gICAgb2JqID0gb2JqW3BhdGhbaV1dO1xuICB9XG4gIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIGZhbGxiYWNrO1xuICByZXR1cm4gb2JqW3BhdGhbbGFzdF1dID09PSB1bmRlZmluZWQgPyBmYWxsYmFjayA6IG9ialtwYXRoW2xhc3RdXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG4gIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSAmJiBhLmdldFRpbWUoKSAhPT0gYi5nZXRUaW1lKCkpIHtcbiAgICAvLyBJZiB0aGUgdmFsdWVzIGFyZSBEYXRlLCBjb21wYXJlIHRoZW0gYXMgdGltZXN0YW1wc1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYSAhPT0gT2JqZWN0KGEpIHx8IGIgIT09IE9iamVjdChiKSkge1xuICAgIC8vIElmIHRoZSB2YWx1ZXMgYXJlbid0IG9iamVjdHMsIHRoZXkgd2VyZSBhbHJlYWR5IGNoZWNrZWQgZm9yIGVxdWFsaXR5XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHByb3BzID0gT2JqZWN0LmtleXMoYSk7XG4gIGlmIChwcm9wcy5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkge1xuICAgIC8vIERpZmZlcmVudCBudW1iZXIgb2YgcHJvcHMsIGRvbid0IGJvdGhlciB0byBjaGVja1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gcHJvcHMuZXZlcnkocCA9PiBkZWVwRXF1YWwoYVtwXSwgYltwXSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE9iamVjdFZhbHVlQnlQYXRoKG9iaiwgcGF0aCwgZmFsbGJhY2spIHtcbiAgLy8gY3JlZGl0OiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzY0OTE0NjMvYWNjZXNzaW5nLW5lc3RlZC1qYXZhc2NyaXB0LW9iamVjdHMtd2l0aC1zdHJpbmcta2V5I2NvbW1lbnQ1NTI3ODQxM182NDkxNjIxXG4gIGlmIChvYmogPT0gbnVsbCB8fCAhcGF0aCB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxsYmFjaztcbiAgaWYgKG9ialtwYXRoXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gb2JqW3BhdGhdO1xuICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXFsoXFx3KylcXF0vZywgJy4kMScpOyAvLyBjb252ZXJ0IGluZGV4ZXMgdG8gcHJvcGVydGllc1xuICBwYXRoID0gcGF0aC5yZXBsYWNlKC9eXFwuLywgJycpOyAvLyBzdHJpcCBhIGxlYWRpbmcgZG90XG4gIHJldHVybiBnZXROZXN0ZWRWYWx1ZShvYmosIHBhdGguc3BsaXQoJy4nKSwgZmFsbGJhY2spO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFByb3BlcnR5RnJvbUl0ZW0oaXRlbSwgcHJvcGVydHksIGZhbGxiYWNrKSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gdHJ1ZSkgcmV0dXJuIGl0ZW0gPT09IHVuZGVmaW5lZCA/IGZhbGxiYWNrIDogaXRlbTtcbiAgaWYgKHByb3BlcnR5ID09IG51bGwgfHwgdHlwZW9mIHByb3BlcnR5ID09PSAnYm9vbGVhbicpIHJldHVybiBmYWxsYmFjaztcbiAgaWYgKGl0ZW0gIT09IE9iamVjdChpdGVtKSkge1xuICAgIGlmICh0eXBlb2YgcHJvcGVydHkgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxsYmFjaztcbiAgICBjb25zdCB2YWx1ZSA9IHByb3BlcnR5KGl0ZW0sIGZhbGxiYWNrKTtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/IGZhbGxiYWNrIDogdmFsdWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ3N0cmluZycpIHJldHVybiBnZXRPYmplY3RWYWx1ZUJ5UGF0aChpdGVtLCBwcm9wZXJ0eSwgZmFsbGJhY2spO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wZXJ0eSkpIHJldHVybiBnZXROZXN0ZWRWYWx1ZShpdGVtLCBwcm9wZXJ0eSwgZmFsbGJhY2spO1xuICBpZiAodHlwZW9mIHByb3BlcnR5ICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gZmFsbGJhY2s7XG4gIGNvbnN0IHZhbHVlID0gcHJvcGVydHkoaXRlbSwgZmFsbGJhY2spO1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/IGZhbGxiYWNrIDogdmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmFuZ2UobGVuZ3RoKSB7XG4gIGxldCBzdGFydCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgcmV0dXJuIEFycmF5LmZyb20oe1xuICAgIGxlbmd0aFxuICB9LCAodiwgaykgPT4gc3RhcnQgKyBrKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRaSW5kZXgoZWwpIHtcbiAgaWYgKCFlbCB8fCBlbC5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHJldHVybiAwO1xuICBjb25zdCBpbmRleCA9ICt3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZSgnei1pbmRleCcpO1xuICBpZiAoIWluZGV4KSByZXR1cm4gZ2V0WkluZGV4KGVsLnBhcmVudE5vZGUpO1xuICByZXR1cm4gaW5kZXg7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvVW5pdChzdHIpIHtcbiAgbGV0IHVuaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdweCc7XG4gIGlmIChzdHIgPT0gbnVsbCB8fCBzdHIgPT09ICcnKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmIChpc05hTigrc3RyKSkge1xuICAgIHJldHVybiBTdHJpbmcoc3RyKTtcbiAgfSBlbHNlIGlmICghaXNGaW5pdGUoK3N0cikpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBgJHtOdW1iZXIoc3RyKX0ke3VuaXR9YDtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KG9iaik7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVmRWxlbWVudChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiAnJGVsJyBpbiBvYmogPyBvYmouJGVsIDogb2JqO1xufVxuXG4vLyBLZXlib2FyZEV2ZW50LmtleUNvZGUgYWxpYXNlc1xuZXhwb3J0IGNvbnN0IGtleUNvZGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGVudGVyOiAxMyxcbiAgdGFiOiA5LFxuICBkZWxldGU6IDQ2LFxuICBlc2M6IDI3LFxuICBzcGFjZTogMzIsXG4gIHVwOiAzOCxcbiAgZG93bjogNDAsXG4gIGxlZnQ6IDM3LFxuICByaWdodDogMzksXG4gIGVuZDogMzUsXG4gIGhvbWU6IDM2LFxuICBkZWw6IDQ2LFxuICBiYWNrc3BhY2U6IDgsXG4gIGluc2VydDogNDUsXG4gIHBhZ2V1cDogMzMsXG4gIHBhZ2Vkb3duOiAzNCxcbiAgc2hpZnQ6IDE2XG59KTtcbmV4cG9ydCBjb25zdCBrZXlWYWx1ZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgZW50ZXI6ICdFbnRlcicsXG4gIHRhYjogJ1RhYicsXG4gIGRlbGV0ZTogJ0RlbGV0ZScsXG4gIGVzYzogJ0VzY2FwZScsXG4gIHNwYWNlOiAnU3BhY2UnLFxuICB1cDogJ0Fycm93VXAnLFxuICBkb3duOiAnQXJyb3dEb3duJyxcbiAgbGVmdDogJ0Fycm93TGVmdCcsXG4gIHJpZ2h0OiAnQXJyb3dSaWdodCcsXG4gIGVuZDogJ0VuZCcsXG4gIGhvbWU6ICdIb21lJyxcbiAgZGVsOiAnRGVsZXRlJyxcbiAgYmFja3NwYWNlOiAnQmFja3NwYWNlJyxcbiAgaW5zZXJ0OiAnSW5zZXJ0JyxcbiAgcGFnZXVwOiAnUGFnZVVwJyxcbiAgcGFnZWRvd246ICdQYWdlRG93bicsXG4gIHNoaWZ0OiAnU2hpZnQnXG59KTtcbmV4cG9ydCBmdW5jdGlvbiBrZXlzKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG8pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhcyhvYmosIGtleSkge1xuICByZXR1cm4ga2V5LmV2ZXJ5KGsgPT4gb2JqLmhhc093blByb3BlcnR5KGspKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwaWNrKG9iaiwgcGF0aHMsIGV4Y2x1ZGUpIHtcbiAgY29uc3QgZm91bmQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCByZXN0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKHBhdGhzLnNvbWUocGF0aCA9PiBwYXRoIGluc3RhbmNlb2YgUmVnRXhwID8gcGF0aC50ZXN0KGtleSkgOiBwYXRoID09PSBrZXkpICYmICFleGNsdWRlPy5zb21lKHBhdGggPT4gcGF0aCA9PT0ga2V5KSkge1xuICAgICAgZm91bmRba2V5XSA9IG9ialtrZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN0W2tleV0gPSBvYmpba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtmb3VuZCwgcmVzdF07XG59XG5leHBvcnQgZnVuY3Rpb24gb21pdChvYmosIGV4Y2x1ZGUpIHtcbiAgY29uc3QgY2xvbmUgPSB7XG4gICAgLi4ub2JqXG4gIH07XG4gIGV4Y2x1ZGUuZm9yRWFjaChwcm9wID0+IGRlbGV0ZSBjbG9uZVtwcm9wXSk7XG4gIHJldHVybiBjbG9uZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvbmx5KG9iaiwgaW5jbHVkZSkge1xuICBjb25zdCBjbG9uZSA9IHt9O1xuICBpbmNsdWRlLmZvckVhY2gocHJvcCA9PiBjbG9uZVtwcm9wXSA9IG9ialtwcm9wXSk7XG4gIHJldHVybiBjbG9uZTtcbn1cbmNvbnN0IG9uUkUgPSAvXm9uW15hLXpdLztcbmV4cG9ydCBjb25zdCBpc09uID0ga2V5ID0+IG9uUkUudGVzdChrZXkpO1xuY29uc3QgYnViYmxpbmdFdmVudHMgPSBbJ29uQWZ0ZXJzY3JpcHRleGVjdXRlJywgJ29uQW5pbWF0aW9uY2FuY2VsJywgJ29uQW5pbWF0aW9uZW5kJywgJ29uQW5pbWF0aW9uaXRlcmF0aW9uJywgJ29uQW5pbWF0aW9uc3RhcnQnLCAnb25BdXhjbGljaycsICdvbkJlZm9yZWlucHV0JywgJ29uQmVmb3Jlc2NyaXB0ZXhlY3V0ZScsICdvbkNoYW5nZScsICdvbkNsaWNrJywgJ29uQ29tcG9zaXRpb25lbmQnLCAnb25Db21wb3NpdGlvbnN0YXJ0JywgJ29uQ29tcG9zaXRpb251cGRhdGUnLCAnb25Db250ZXh0bWVudScsICdvbkNvcHknLCAnb25DdXQnLCAnb25EYmxjbGljaycsICdvbkZvY3VzaW4nLCAnb25Gb2N1c291dCcsICdvbkZ1bGxzY3JlZW5jaGFuZ2UnLCAnb25GdWxsc2NyZWVuZXJyb3InLCAnb25HZXN0dXJlY2hhbmdlJywgJ29uR2VzdHVyZWVuZCcsICdvbkdlc3R1cmVzdGFydCcsICdvbkdvdHBvaW50ZXJjYXB0dXJlJywgJ29uSW5wdXQnLCAnb25LZXlkb3duJywgJ29uS2V5cHJlc3MnLCAnb25LZXl1cCcsICdvbkxvc3Rwb2ludGVyY2FwdHVyZScsICdvbk1vdXNlZG93bicsICdvbk1vdXNlbW92ZScsICdvbk1vdXNlb3V0JywgJ29uTW91c2VvdmVyJywgJ29uTW91c2V1cCcsICdvbk1vdXNld2hlZWwnLCAnb25QYXN0ZScsICdvblBvaW50ZXJjYW5jZWwnLCAnb25Qb2ludGVyZG93bicsICdvblBvaW50ZXJlbnRlcicsICdvblBvaW50ZXJsZWF2ZScsICdvblBvaW50ZXJtb3ZlJywgJ29uUG9pbnRlcm91dCcsICdvblBvaW50ZXJvdmVyJywgJ29uUG9pbnRlcnVwJywgJ29uUmVzZXQnLCAnb25TZWxlY3QnLCAnb25TdWJtaXQnLCAnb25Ub3VjaGNhbmNlbCcsICdvblRvdWNoZW5kJywgJ29uVG91Y2htb3ZlJywgJ29uVG91Y2hzdGFydCcsICdvblRyYW5zaXRpb25jYW5jZWwnLCAnb25UcmFuc2l0aW9uZW5kJywgJ29uVHJhbnNpdGlvbnJ1bicsICdvblRyYW5zaXRpb25zdGFydCcsICdvbldoZWVsJ107XG5cbi8qKlxuICogRmlsdGVyIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgYXBwbGllZCB0b1xuICogdGhlIHJvb3QgZWxlbWVudCBvZiBhbiBpbnB1dCBjb21wb25lbnQuIFJlbWFpbmluZ1xuICogYXR0cmlidXRlcyBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSA8aW5wdXQ+IGVsZW1lbnQgaW5zaWRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVySW5wdXRBdHRycyhhdHRycykge1xuICBjb25zdCBbZXZlbnRzLCBwcm9wc10gPSBwaWNrKGF0dHJzLCBbb25SRV0pO1xuICBjb25zdCBpbnB1dEV2ZW50cyA9IG9taXQoZXZlbnRzLCBidWJibGluZ0V2ZW50cyk7XG4gIGNvbnN0IFtyb290QXR0cnMsIGlucHV0QXR0cnNdID0gcGljayhwcm9wcywgWydjbGFzcycsICdzdHlsZScsICdpZCcsIC9eZGF0YS0vXSk7XG4gIE9iamVjdC5hc3NpZ24ocm9vdEF0dHJzLCBldmVudHMpO1xuICBPYmplY3QuYXNzaWduKGlucHV0QXR0cnMsIGlucHV0RXZlbnRzKTtcbiAgcmV0dXJuIFtyb290QXR0cnMsIGlucHV0QXR0cnNdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNldCBkaWZmZXJlbmNlIG9mIEIgYW5kIEEsIGkuZS4gdGhlIHNldCBvZiBlbGVtZW50cyBpbiBCIGJ1dCBub3QgaW4gQVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlEaWZmKGEsIGIpIHtcbiAgY29uc3QgZGlmZiA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWEuaW5jbHVkZXMoYltpXSkpIGRpZmYucHVzaChiW2ldKTtcbiAgfVxuICByZXR1cm4gZGlmZjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwSW5BcnJheSh2KSB7XG4gIHJldHVybiB2ID09IG51bGwgPyBbXSA6IEFycmF5LmlzQXJyYXkodikgPyB2IDogW3ZdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIodmFsdWUsIHNlYXJjaCwgaXRlbSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBzZWFyY2ggIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJyAmJiB2YWx1ZS50b1N0cmluZygpLnRvTG9jYWxlTG93ZXJDYXNlKCkuaW5kZXhPZihzZWFyY2gudG9Mb2NhbGVMb3dlckNhc2UoKSkgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlYXJjaEl0ZW1zKGl0ZW1zLCBzZWFyY2gpIHtcbiAgaWYgKCFzZWFyY2gpIHJldHVybiBpdGVtcztcbiAgc2VhcmNoID0gc2VhcmNoLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcbiAgaWYgKHNlYXJjaC50cmltKCkgPT09ICcnKSByZXR1cm4gaXRlbXM7XG4gIHJldHVybiBpdGVtcy5maWx0ZXIoaXRlbSA9PiBPYmplY3Qua2V5cyhpdGVtKS5zb21lKGtleSA9PiBkZWZhdWx0RmlsdGVyKGdldE9iamVjdFZhbHVlQnlQYXRoKGl0ZW0sIGtleSksIHNlYXJjaCwgaXRlbSkpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShmbiwgZGVsYXkpIHtcbiAgbGV0IHRpbWVvdXRJZCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IGZuKC4uLmFyZ3MpLCBkZWxheSk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGUoZm4sIGxpbWl0KSB7XG4gIGxldCB0aHJvdHRsaW5nID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aHJvdHRsaW5nKSB7XG4gICAgICB0aHJvdHRsaW5nID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhyb3R0bGluZyA9IGZhbHNlLCBsaW1pdCk7XG4gICAgICByZXR1cm4gZm4oLi4uYXJndW1lbnRzKTtcbiAgICB9XG4gIH07XG59XG4vKipcbiAqIEZpbHRlcnMgc2xvdHMgdG8gb25seSB0aG9zZSBzdGFydGluZyB3aXRoIGBwcmVmaXhgLCByZW1vdmluZyB0aGUgcHJlZml4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmVmaXhlZFNsb3RzKHByZWZpeCwgc2xvdHMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNsb3RzKS5maWx0ZXIoayA9PiBrLnN0YXJ0c1dpdGgocHJlZml4KSkucmVkdWNlKChvYmosIGspID0+IHtcbiAgICBvYmpbay5yZXBsYWNlKHByZWZpeCwgJycpXSA9IHNsb3RzW2tdO1xuICAgIHJldHVybiBvYmo7XG4gIH0sIHt9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcCh2YWx1ZSkge1xuICBsZXQgbWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICBsZXQgbWF4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxO1xuICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHZhbHVlKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVjaW1hbHModmFsdWUpIHtcbiAgY29uc3QgdHJpbW1lZFN0ciA9IHZhbHVlLnRvU3RyaW5nKCkudHJpbSgpO1xuICByZXR1cm4gdHJpbW1lZFN0ci5pbmNsdWRlcygnLicpID8gdHJpbW1lZFN0ci5sZW5ndGggLSB0cmltbWVkU3RyLmluZGV4T2YoJy4nKSAtIDEgOiAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhZEVuZChzdHIsIGxlbmd0aCkge1xuICBsZXQgY2hhciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJzAnO1xuICByZXR1cm4gc3RyICsgY2hhci5yZXBlYXQoTWF0aC5tYXgoMCwgbGVuZ3RoIC0gc3RyLmxlbmd0aCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhZFN0YXJ0KHN0ciwgbGVuZ3RoKSB7XG4gIGxldCBjaGFyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnMCc7XG4gIHJldHVybiBjaGFyLnJlcGVhdChNYXRoLm1heCgwLCBsZW5ndGggLSBzdHIubGVuZ3RoKSkgKyBzdHI7XG59XG5leHBvcnQgZnVuY3Rpb24gY2h1bmsoc3RyKSB7XG4gIGxldCBzaXplID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuICBjb25zdCBjaHVua2VkID0gW107XG4gIGxldCBpbmRleCA9IDA7XG4gIHdoaWxlIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBjaHVua2VkLnB1c2goc3RyLnN1YnN0cihpbmRleCwgc2l6ZSkpO1xuICAgIGluZGV4ICs9IHNpemU7XG4gIH1cbiAgcmV0dXJuIGNodW5rZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaHVtYW5SZWFkYWJsZUZpbGVTaXplKGJ5dGVzKSB7XG4gIGxldCBiYXNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxMDAwO1xuICBpZiAoYnl0ZXMgPCBiYXNlKSB7XG4gICAgcmV0dXJuIGAke2J5dGVzfSBCYDtcbiAgfVxuICBjb25zdCBwcmVmaXggPSBiYXNlID09PSAxMDI0ID8gWydLaScsICdNaScsICdHaSddIDogWydrJywgJ00nLCAnRyddO1xuICBsZXQgdW5pdCA9IC0xO1xuICB3aGlsZSAoTWF0aC5hYnMoYnl0ZXMpID49IGJhc2UgJiYgdW5pdCA8IHByZWZpeC5sZW5ndGggLSAxKSB7XG4gICAgYnl0ZXMgLz0gYmFzZTtcbiAgICArK3VuaXQ7XG4gIH1cbiAgcmV0dXJuIGAke2J5dGVzLnRvRml4ZWQoMSl9ICR7cHJlZml4W3VuaXRdfUJgO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsaXplT2JqZWN0S2V5cyhvYmopIHtcbiAgaWYgKCFvYmopIHJldHVybiB7fTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKChvLCBrZXkpID0+IHtcbiAgICBvW2NhbWVsaXplKGtleSldID0gb2JqW2tleV07XG4gICAgcmV0dXJuIG87XG4gIH0sIHt9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZURlZXAoKSB7XG4gIGxldCBzb3VyY2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICBsZXQgdGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgbGV0IGFycmF5Rm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgY29uc3Qgb3V0ID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgIG91dFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgY29uc3Qgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBjb25zdCB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuXG4gICAgLy8gT25seSBjb250aW51ZSBkZWVwIG1lcmdpbmcgaWZcbiAgICAvLyBib3RoIHByb3BlcnRpZXMgYXJlIG9iamVjdHNcbiAgICBpZiAoaXNPYmplY3Qoc291cmNlUHJvcGVydHkpICYmIGlzT2JqZWN0KHRhcmdldFByb3BlcnR5KSkge1xuICAgICAgb3V0W2tleV0gPSBtZXJnZURlZXAoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5LCBhcnJheUZuKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzb3VyY2VQcm9wZXJ0eSkgJiYgQXJyYXkuaXNBcnJheSh0YXJnZXRQcm9wZXJ0eSkgJiYgYXJyYXlGbikge1xuICAgICAgb3V0W2tleV0gPSBhcnJheUZuKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgb3V0W2tleV0gPSB0YXJnZXRQcm9wZXJ0eTtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxBcnJheShsZW5ndGgsIG9iaikge1xuICByZXR1cm4gQXJyYXkobGVuZ3RoKS5maWxsKG9iaik7XG59XG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbkZyYWdtZW50cyhub2Rlcykge1xuICByZXR1cm4gbm9kZXMubWFwKG5vZGUgPT4ge1xuICAgIGlmIChub2RlLnR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICByZXR1cm4gZmxhdHRlbkZyYWdtZW50cyhub2RlLmNoaWxkcmVuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9KS5mbGF0KCk7XG59XG5leHBvcnQgY29uc3QgcmFuZG9tSGV4Q29sb3IgPSAoKSA9PiB7XG4gIGNvbnN0IG4gPSAoTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmYgKiAxMDAwMDAwKS50b1N0cmluZygxNik7XG4gIHJldHVybiAnIycgKyBuLnNsaWNlKDAsIDYpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiB0b0tlYmFiQ2FzZSgpIHtcbiAgbGV0IHN0ciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XG4gIGlmICh0b0tlYmFiQ2FzZS5jYWNoZS5oYXMoc3RyKSkgcmV0dXJuIHRvS2ViYWJDYXNlLmNhY2hlLmdldChzdHIpO1xuICBjb25zdCBrZWJhYiA9IHN0ci5yZXBsYWNlKC9bXmEtel0vZ2ksICctJykucmVwbGFjZSgvXFxCKFtBLVpdKS9nLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbiAgdG9LZWJhYkNhc2UuY2FjaGUuc2V0KHN0ciwga2ViYWIpO1xuICByZXR1cm4ga2ViYWI7XG59XG50b0tlYmFiQ2FzZS5jYWNoZSA9IG5ldyBNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ2hpbGRyZW4odm5vZGUpIHtcbiAgaWYgKCF2bm9kZSB8fCB0eXBlb2Ygdm5vZGUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHJldHVybiB2bm9kZS5tYXAoY2hpbGQgPT4gZmluZENoaWxkcmVuKGNoaWxkKSkuZmlsdGVyKHYgPT4gdikuZmxhdCgxKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlLmNoaWxkcmVuKSkge1xuICAgIHJldHVybiB2bm9kZS5jaGlsZHJlbi5tYXAoY2hpbGQgPT4gZmluZENoaWxkcmVuKGNoaWxkKSkuZmlsdGVyKHYgPT4gdikuZmxhdCgxKTtcbiAgfSBlbHNlIGlmICh2bm9kZS5jb21wb25lbnQpIHtcbiAgICByZXR1cm4gW3Zub2RlLmNvbXBvbmVudCwgLi4uZmluZENoaWxkcmVuKHZub2RlLmNvbXBvbmVudD8uc3ViVHJlZSldLmZpbHRlcih2ID0+IHYpLmZsYXQoMSk7XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRDaGlsZHJlbldpdGhQcm92aWRlKGtleSwgdm5vZGUpIHtcbiAgaWYgKCF2bm9kZSB8fCB0eXBlb2Ygdm5vZGUgIT09ICdvYmplY3QnKSByZXR1cm4gW107XG4gIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHJldHVybiB2bm9kZS5tYXAoY2hpbGQgPT4gZmluZENoaWxkcmVuV2l0aFByb3ZpZGUoa2V5LCBjaGlsZCkpLmZsYXQoMSk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZS5jaGlsZHJlbikpIHtcbiAgICByZXR1cm4gdm5vZGUuY2hpbGRyZW4ubWFwKGNoaWxkID0+IGZpbmRDaGlsZHJlbldpdGhQcm92aWRlKGtleSwgY2hpbGQpKS5mbGF0KDEpO1xuICB9IGVsc2UgaWYgKHZub2RlLmNvbXBvbmVudCkge1xuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHZub2RlLmNvbXBvbmVudC5wcm92aWRlcykuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgcmV0dXJuIFt2bm9kZS5jb21wb25lbnRdO1xuICAgIH0gZWxzZSBpZiAodm5vZGUuY29tcG9uZW50LnN1YlRyZWUpIHtcbiAgICAgIHJldHVybiBmaW5kQ2hpbGRyZW5XaXRoUHJvdmlkZShrZXksIHZub2RlLmNvbXBvbmVudC5zdWJUcmVlKS5mbGF0KDEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW107XG59XG52YXIgX2FyciA9IC8qI19fUFVSRV9fKi9uZXcgV2Vha01hcCgpO1xudmFyIF9wb2ludGVyID0gLyojX19QVVJFX18qL25ldyBXZWFrTWFwKCk7XG5leHBvcnQgY2xhc3MgQ2lyY3VsYXJCdWZmZXIge1xuICBjb25zdHJ1Y3RvcihzaXplKSB7XG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkSW5pdFNwZWModGhpcywgX2Fyciwge1xuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogW11cbiAgICB9KTtcbiAgICBfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyh0aGlzLCBfcG9pbnRlciwge1xuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogMFxuICAgIH0pO1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gIH1cbiAgcHVzaCh2YWwpIHtcbiAgICBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX2FycilbX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9wb2ludGVyKV0gPSB2YWw7XG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9wb2ludGVyLCAoX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9wb2ludGVyKSArIDEpICUgdGhpcy5zaXplKTtcbiAgfVxuICB2YWx1ZXMoKSB7XG4gICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfYXJyKS5zbGljZShfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX3BvaW50ZXIpKS5jb25jYXQoX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9hcnIpLnNsaWNlKDAsIF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfcG9pbnRlcikpKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEV2ZW50Q29vcmRpbmF0ZXMoZSkge1xuICBpZiAoJ3RvdWNoZXMnIGluIGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xpZW50WDogZS50b3VjaGVzWzBdLmNsaWVudFgsXG4gICAgICBjbGllbnRZOiBlLnRvdWNoZXNbMF0uY2xpZW50WVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjbGllbnRYOiBlLmNsaWVudFgsXG4gICAgY2xpZW50WTogZS5jbGllbnRZXG4gIH07XG59XG5cbi8vIE9ubHkgYWxsb3cgYSBzaW5nbGUgcmV0dXJuIHR5cGVcblxuZXhwb3J0IGZ1bmN0aW9uIGRlc3RydWN0Q29tcHV0ZWQoZ2V0dGVyKSB7XG4gIGNvbnN0IHJlZnMgPSByZWFjdGl2ZSh7fSk7XG4gIGNvbnN0IGJhc2UgPSBjb21wdXRlZChnZXR0ZXIpO1xuICB3YXRjaEVmZmVjdCgoKSA9PiB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYmFzZS52YWx1ZSkge1xuICAgICAgcmVmc1trZXldID0gYmFzZS52YWx1ZVtrZXldO1xuICAgIH1cbiAgfSwge1xuICAgIGZsdXNoOiAnc3luYydcbiAgfSk7XG4gIHJldHVybiB0b1JlZnMocmVmcyk7XG59XG5cbi8qKiBBcnJheS5pbmNsdWRlcyBidXQgdmFsdWUgY2FuIGJlIGFueSB0eXBlICovXG5leHBvcnQgZnVuY3Rpb24gaW5jbHVkZXMoYXJyLCB2YWwpIHtcbiAgcmV0dXJuIGFyci5pbmNsdWRlcyh2YWwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50TmFtZShwcm9wTmFtZSkge1xuICByZXR1cm4gcHJvcE5hbWVbMl0udG9Mb3dlckNhc2UoKSArIHByb3BOYW1lLnNsaWNlKDMpO1xufVxuZXhwb3J0IGNvbnN0IEV2ZW50UHJvcCA9ICgpID0+IFtGdW5jdGlvbiwgQXJyYXldO1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0V2ZW50KHByb3BzLCBuYW1lKSB7XG4gIG5hbWUgPSAnb24nICsgY2FwaXRhbGl6ZShuYW1lKTtcbiAgcmV0dXJuICEhKHByb3BzW25hbWVdIHx8IHByb3BzW2Ake25hbWV9T25jZWBdIHx8IHByb3BzW2Ake25hbWV9Q2FwdHVyZWBdIHx8IHByb3BzW2Ake25hbWV9T25jZUNhcHR1cmVgXSB8fCBwcm9wc1tgJHtuYW1lfUNhcHR1cmVPbmNlYF0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbGxFdmVudChoYW5kbGVyKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgIGZvciAoY29uc3QgaCBvZiBoYW5kbGVyKSB7XG4gICAgICBoKC4uLmFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGhhbmRsZXIoLi4uYXJncyk7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBmb2N1c2FibGVDaGlsZHJlbihlbCkge1xuICBsZXQgZmlsdGVyQnlUYWJJbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcbiAgY29uc3QgdGFyZ2V0cyA9IFsnYnV0dG9uJywgJ1tocmVmXScsICdpbnB1dDpub3QoW3R5cGU9XCJoaWRkZW5cIl0pJywgJ3NlbGVjdCcsICd0ZXh0YXJlYScsICdbdGFiaW5kZXhdJ10ubWFwKHMgPT4gYCR7c30ke2ZpbHRlckJ5VGFiSW5kZXggPyAnOm5vdChbdGFiaW5kZXg9XCItMVwiXSknIDogJyd9Om5vdChbZGlzYWJsZWRdKWApLmpvaW4oJywgJyk7XG4gIHJldHVybiBbLi4uZWwucXVlcnlTZWxlY3RvckFsbCh0YXJnZXRzKV07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dEVsZW1lbnQoZWxlbWVudHMsIGxvY2F0aW9uLCBjb25kaXRpb24pIHtcbiAgbGV0IF9lbDtcbiAgbGV0IGlkeCA9IGVsZW1lbnRzLmluZGV4T2YoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gIGNvbnN0IGluYyA9IGxvY2F0aW9uID09PSAnbmV4dCcgPyAxIDogLTE7XG4gIGRvIHtcbiAgICBpZHggKz0gaW5jO1xuICAgIF9lbCA9IGVsZW1lbnRzW2lkeF07XG4gIH0gd2hpbGUgKCghX2VsIHx8IF9lbC5vZmZzZXRQYXJlbnQgPT0gbnVsbCB8fCAhKGNvbmRpdGlvbj8uKF9lbCkgPz8gdHJ1ZSkpICYmIGlkeCA8IGVsZW1lbnRzLmxlbmd0aCAmJiBpZHggPj0gMCk7XG4gIHJldHVybiBfZWw7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9jdXNDaGlsZChlbCwgbG9jYXRpb24pIHtcbiAgY29uc3QgZm9jdXNhYmxlID0gZm9jdXNhYmxlQ2hpbGRyZW4oZWwpO1xuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgaWYgKGVsID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8ICFlbC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgZm9jdXNhYmxlWzBdPy5mb2N1cygpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChsb2NhdGlvbiA9PT0gJ2ZpcnN0Jykge1xuICAgIGZvY3VzYWJsZVswXT8uZm9jdXMoKTtcbiAgfSBlbHNlIGlmIChsb2NhdGlvbiA9PT0gJ2xhc3QnKSB7XG4gICAgZm9jdXNhYmxlLmF0KC0xKT8uZm9jdXMoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdudW1iZXInKSB7XG4gICAgZm9jdXNhYmxlW2xvY2F0aW9uXT8uZm9jdXMoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBfZWwgPSBnZXROZXh0RWxlbWVudChmb2N1c2FibGUsIGxvY2F0aW9uKTtcbiAgICBpZiAoX2VsKSBfZWwuZm9jdXMoKTtlbHNlIGZvY3VzQ2hpbGQoZWwsIGxvY2F0aW9uID09PSAnbmV4dCcgPyAnZmlyc3QnIDogJ2xhc3QnKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkodmFsKSB7XG4gIHJldHVybiB2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgJiYgdmFsLnRyaW0oKSA9PT0gJyc7XG59XG5leHBvcnQgZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8qKiBSZXR1cm5zIG51bGwgaWYgdGhlIHNlbGVjdG9yIGlzIG5vdCBzdXBwb3J0ZWQgb3Igd2UgY2FuJ3QgY2hlY2sgKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaGVzU2VsZWN0b3IoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IHN1cHBvcnRzU2VsZWN0b3IgPSBJTl9CUk9XU0VSICYmIHR5cGVvZiBDU1MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBDU1Muc3VwcG9ydHMgIT09ICd1bmRlZmluZWQnICYmIENTUy5zdXBwb3J0cyhgc2VsZWN0b3IoJHtzZWxlY3Rvcn0pYCk7XG4gIGlmICghc3VwcG9ydHNTZWxlY3RvcikgcmV0dXJuIG51bGw7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZWwgJiYgZWwubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGluY2x1ZGVzIH0gZnJvbSBcIi4vaGVscGVycy5tanNcIjtcbmNvbnN0IGJsb2NrID0gWyd0b3AnLCAnYm90dG9tJ107XG5jb25zdCBpbmxpbmUgPSBbJ3N0YXJ0JywgJ2VuZCcsICdsZWZ0JywgJ3JpZ2h0J107XG4vKiogUGFyc2UgYSByYXcgYW5jaG9yIHN0cmluZyBpbnRvIGFuIG9iamVjdCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQW5jaG9yKGFuY2hvciwgaXNSdGwpIHtcbiAgbGV0IFtzaWRlLCBhbGlnbl0gPSBhbmNob3Iuc3BsaXQoJyAnKTtcbiAgaWYgKCFhbGlnbikge1xuICAgIGFsaWduID0gaW5jbHVkZXMoYmxvY2ssIHNpZGUpID8gJ3N0YXJ0JyA6IGluY2x1ZGVzKGlubGluZSwgc2lkZSkgPyAndG9wJyA6ICdjZW50ZXInO1xuICB9XG4gIHJldHVybiB7XG4gICAgc2lkZTogdG9QaHlzaWNhbChzaWRlLCBpc1J0bCksXG4gICAgYWxpZ246IHRvUGh5c2ljYWwoYWxpZ24sIGlzUnRsKVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvUGh5c2ljYWwoc3RyLCBpc1J0bCkge1xuICBpZiAoc3RyID09PSAnc3RhcnQnKSByZXR1cm4gaXNSdGwgPyAncmlnaHQnIDogJ2xlZnQnO1xuICBpZiAoc3RyID09PSAnZW5kJykgcmV0dXJuIGlzUnRsID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgcmV0dXJuIHN0cjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmbGlwU2lkZShhbmNob3IpIHtcbiAgcmV0dXJuIHtcbiAgICBzaWRlOiB7XG4gICAgICBjZW50ZXI6ICdjZW50ZXInLFxuICAgICAgdG9wOiAnYm90dG9tJyxcbiAgICAgIGJvdHRvbTogJ3RvcCcsXG4gICAgICBsZWZ0OiAncmlnaHQnLFxuICAgICAgcmlnaHQ6ICdsZWZ0J1xuICAgIH1bYW5jaG9yLnNpZGVdLFxuICAgIGFsaWduOiBhbmNob3IuYWxpZ25cbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmbGlwQWxpZ24oYW5jaG9yKSB7XG4gIHJldHVybiB7XG4gICAgc2lkZTogYW5jaG9yLnNpZGUsXG4gICAgYWxpZ246IHtcbiAgICAgIGNlbnRlcjogJ2NlbnRlcicsXG4gICAgICB0b3A6ICdib3R0b20nLFxuICAgICAgYm90dG9tOiAndG9wJyxcbiAgICAgIGxlZnQ6ICdyaWdodCcsXG4gICAgICByaWdodDogJ2xlZnQnXG4gICAgfVthbmNob3IuYWxpZ25dXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZmxpcENvcm5lcihhbmNob3IpIHtcbiAgcmV0dXJuIHtcbiAgICBzaWRlOiBhbmNob3IuYWxpZ24sXG4gICAgYWxpZ246IGFuY2hvci5zaWRlXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0QXhpcyhhbmNob3IpIHtcbiAgcmV0dXJuIGluY2x1ZGVzKGJsb2NrLCBhbmNob3Iuc2lkZSkgPyAneScgOiAneCc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmNob3IubWpzLm1hcCIsImV4cG9ydCBjbGFzcyBCb3gge1xuICBjb25zdHJ1Y3RvcihfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHRcbiAgICB9ID0gX3JlZjtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICB9XG4gIGdldCB0b3AoKSB7XG4gICAgcmV0dXJuIHRoaXMueTtcbiAgfVxuICBnZXQgYm90dG9tKCkge1xuICAgIHJldHVybiB0aGlzLnkgKyB0aGlzLmhlaWdodDtcbiAgfVxuICBnZXQgbGVmdCgpIHtcbiAgICByZXR1cm4gdGhpcy54O1xuICB9XG4gIGdldCByaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy54ICsgdGhpcy53aWR0aDtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE92ZXJmbG93KGEsIGIpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiB7XG4gICAgICBiZWZvcmU6IE1hdGgubWF4KDAsIGIubGVmdCAtIGEubGVmdCksXG4gICAgICBhZnRlcjogTWF0aC5tYXgoMCwgYS5yaWdodCAtIGIucmlnaHQpXG4gICAgfSxcbiAgICB5OiB7XG4gICAgICBiZWZvcmU6IE1hdGgubWF4KDAsIGIudG9wIC0gYS50b3ApLFxuICAgICAgYWZ0ZXI6IE1hdGgubWF4KDAsIGEuYm90dG9tIC0gYi5ib3R0b20pXG4gICAgfVxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym94Lm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IEJveCB9IGZyb20gXCIuL2JveC5tanNcIjtcbi8qKiBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81Nzg3NjYwMS8yMDc0NzM2ICovXG5leHBvcnQgZnVuY3Rpb24gbnVsbGlmeVRyYW5zZm9ybXMoZWwpIHtcbiAgY29uc3QgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICBjb25zdCB0eCA9IHN0eWxlLnRyYW5zZm9ybTtcbiAgaWYgKHR4KSB7XG4gICAgbGV0IHRhLCBzeCwgc3ksIGR4LCBkeTtcbiAgICBpZiAodHguc3RhcnRzV2l0aCgnbWF0cml4M2QoJykpIHtcbiAgICAgIHRhID0gdHguc2xpY2UoOSwgLTEpLnNwbGl0KC8sIC8pO1xuICAgICAgc3ggPSArdGFbMF07XG4gICAgICBzeSA9ICt0YVs1XTtcbiAgICAgIGR4ID0gK3RhWzEyXTtcbiAgICAgIGR5ID0gK3RhWzEzXTtcbiAgICB9IGVsc2UgaWYgKHR4LnN0YXJ0c1dpdGgoJ21hdHJpeCgnKSkge1xuICAgICAgdGEgPSB0eC5zbGljZSg3LCAtMSkuc3BsaXQoLywgLyk7XG4gICAgICBzeCA9ICt0YVswXTtcbiAgICAgIHN5ID0gK3RhWzNdO1xuICAgICAgZHggPSArdGFbNF07XG4gICAgICBkeSA9ICt0YVs1XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBCb3gocmVjdCk7XG4gICAgfVxuICAgIGNvbnN0IHRvID0gc3R5bGUudHJhbnNmb3JtT3JpZ2luO1xuICAgIGNvbnN0IHggPSByZWN0LnggLSBkeCAtICgxIC0gc3gpICogcGFyc2VGbG9hdCh0byk7XG4gICAgY29uc3QgeSA9IHJlY3QueSAtIGR5IC0gKDEgLSBzeSkgKiBwYXJzZUZsb2F0KHRvLnNsaWNlKHRvLmluZGV4T2YoJyAnKSArIDEpKTtcbiAgICBjb25zdCB3ID0gc3ggPyByZWN0LndpZHRoIC8gc3ggOiBlbC5vZmZzZXRXaWR0aCArIDE7XG4gICAgY29uc3QgaCA9IHN5ID8gcmVjdC5oZWlnaHQgLyBzeSA6IGVsLm9mZnNldEhlaWdodCArIDE7XG4gICAgcmV0dXJuIG5ldyBCb3goe1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB3aWR0aDogdyxcbiAgICAgIGhlaWdodDogaFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgQm94KHJlY3QpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYW5pbWF0ZShlbCwga2V5ZnJhbWVzLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZWwuYW5pbWF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB7XG4gICAgZmluaXNoZWQ6IFByb21pc2UucmVzb2x2ZSgpXG4gIH07XG4gIGxldCBhbmltYXRpb247XG4gIHRyeSB7XG4gICAgYW5pbWF0aW9uID0gZWwuYW5pbWF0ZShrZXlmcmFtZXMsIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmluaXNoZWQ6IFByb21pc2UucmVzb2x2ZSgpXG4gICAgfTtcbiAgfVxuICBpZiAodHlwZW9mIGFuaW1hdGlvbi5maW5pc2hlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhbmltYXRpb24uZmluaXNoZWQgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGFuaW1hdGlvbi5vbmZpbmlzaCA9ICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZShhbmltYXRpb24pO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gYW5pbWF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5pbWF0aW9uLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGV2ZW50TmFtZSwgaXNPbiB9IGZyb20gXCIuL2hlbHBlcnMubWpzXCI7XG5jb25zdCBoYW5kbGVycyA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQgZnVuY3Rpb24gYmluZFByb3BzKGVsLCBwcm9wcykge1xuICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChrID0+IHtcbiAgICBpZiAoaXNPbihrKSkge1xuICAgICAgY29uc3QgbmFtZSA9IGV2ZW50TmFtZShrKTtcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVycy5nZXQoZWwpO1xuICAgICAgaWYgKHByb3BzW2tdID09IG51bGwpIHtcbiAgICAgICAgaGFuZGxlcj8uZm9yRWFjaCh2ID0+IHtcbiAgICAgICAgICBjb25zdCBbbiwgZm5dID0gdjtcbiAgICAgICAgICBpZiAobiA9PT0gbmFtZSkge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBmbik7XG4gICAgICAgICAgICBoYW5kbGVyLmRlbGV0ZSh2KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICghaGFuZGxlciB8fCAhWy4uLmhhbmRsZXJdPy5zb21lKHYgPT4gdlswXSA9PT0gbmFtZSAmJiB2WzFdID09PSBwcm9wc1trXSkpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBwcm9wc1trXSk7XG4gICAgICAgIGNvbnN0IF9oYW5kbGVyID0gaGFuZGxlciB8fCBuZXcgU2V0KCk7XG4gICAgICAgIF9oYW5kbGVyLmFkZChbbmFtZSwgcHJvcHNba11dKTtcbiAgICAgICAgaWYgKCFoYW5kbGVycy5oYXMoZWwpKSBoYW5kbGVycy5zZXQoZWwsIF9oYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzW2tdID09IG51bGwpIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGspO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKGssIHByb3BzW2tdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVuYmluZFByb3BzKGVsLCBwcm9wcykge1xuICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChrID0+IHtcbiAgICBpZiAoaXNPbihrKSkge1xuICAgICAgY29uc3QgbmFtZSA9IGV2ZW50TmFtZShrKTtcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVycy5nZXQoZWwpO1xuICAgICAgaGFuZGxlcj8uZm9yRWFjaCh2ID0+IHtcbiAgICAgICAgY29uc3QgW24sIGZuXSA9IHY7XG4gICAgICAgIGlmIChuID09PSBuYW1lKSB7XG4gICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBmbik7XG4gICAgICAgICAgaGFuZGxlci5kZWxldGUodik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoayk7XG4gICAgfVxuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpbmRQcm9wcy5tanMubWFwIiwiLyoqXG4gKiBXQ0FHIDMuMCBBUENBIHBlcmNlcHR1YWwgY29udHJhc3QgYWxnb3JpdGhtIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL015bmRleC9TQVBDLUFQQ0FcbiAqIEBsaWNlbmNlIGh0dHBzOi8vd3d3LnczLm9yZy9Db25zb3J0aXVtL0xlZ2FsLzIwMTUvY29weXJpZ2h0LXNvZnR3YXJlLWFuZC1kb2N1bWVudFxuICogQHNlZSBodHRwczovL3d3dy53My5vcmcvV0FJL0dML3Rhc2stZm9yY2VzL3NpbHZlci93aWtpL1Zpc3VhbF9Db250cmFzdF9vZl9UZXh0X1N1Ymdyb3VwXG4gKi9cbi8vIFR5cGVzXG5cbi8vIE1BR0lDQUwgTlVNQkVSU1xuXG4vLyBzUkdCIENvbnZlcnNpb24gdG8gUmVsYXRpdmUgTHVtaW5hbmNlIChZKVxuXG4vLyBUcmFuc2ZlciBDdXJ2ZSAoYWthIFwiR2FtbWFcIikgZm9yIHNSR0IgbGluZWFyaXphdGlvblxuLy8gU2ltcGxlIHBvd2VyIGN1cnZlIHZzIHBpZWNld2lzZSBkZXNjcmliZWQgaW4gZG9jc1xuLy8gRXNzZW50aWFsbHksIDIuNCBiZXN0IG1vZGVscyBhY3R1YWwgZGlzcGxheVxuLy8gY2hhcmFjdGVyaXN0aWNzIGluIGNvbWJpbmF0aW9uIHdpdGggdGhlIHRvdGFsIG1ldGhvZFxuY29uc3QgbWFpblRSQyA9IDIuNDtcbmNvbnN0IFJjbyA9IDAuMjEyNjcyOTsgLy8gc1JHQiBSZWQgQ29lZmZpY2llbnQgKGZyb20gbWF0cml4KVxuY29uc3QgR2NvID0gMC43MTUxNTIyOyAvLyBzUkdCIEdyZWVuIENvZWZmaWNpZW50IChmcm9tIG1hdHJpeClcbmNvbnN0IEJjbyA9IDAuMDcyMTc1MDsgLy8gc1JHQiBCbHVlIENvZWZmaWNpZW50IChmcm9tIG1hdHJpeClcblxuLy8gRm9yIEZpbmRpbmcgUmF3IFNBUEMgQ29udHJhc3QgZnJvbSBSZWxhdGl2ZSBMdW1pbmFuY2UgKFkpXG5cbi8vIENvbnN0YW50cyBmb3IgU0FQQyBQb3dlciBDdXJ2ZSBFeHBvbmVudHNcbi8vIE9uZSBwYWlyIGZvciBub3JtYWwgdGV4dCwgYW5kIG9uZSBmb3IgcmV2ZXJzZVxuLy8gVGhlc2UgYXJlIHRoZSBcImJlYXRpbmcgaGVhcnRcIiBvZiBTQVBDXG5jb25zdCBub3JtQkcgPSAwLjU1O1xuY29uc3Qgbm9ybVRYVCA9IDAuNTg7XG5jb25zdCByZXZUWFQgPSAwLjU3O1xuY29uc3QgcmV2QkcgPSAwLjYyO1xuXG4vLyBGb3IgQ2xhbXBpbmcgYW5kIFNjYWxpbmcgVmFsdWVzXG5cbmNvbnN0IGJsa1RocnMgPSAwLjAzOyAvLyBMZXZlbCB0aGF0IHRyaWdnZXJzIHRoZSBzb2Z0IGJsYWNrIGNsYW1wXG5jb25zdCBibGtDbG1wID0gMS40NTsgLy8gRXhwb25lbnQgZm9yIHRoZSBzb2Z0IGJsYWNrIGNsYW1wIGN1cnZlXG5jb25zdCBkZWx0YVltaW4gPSAwLjAwMDU7IC8vIExpbnQgdHJhcFxuY29uc3Qgc2NhbGVCb1cgPSAxLjI1OyAvLyBTY2FsaW5nIGZvciBkYXJrIHRleHQgb24gbGlnaHRcbmNvbnN0IHNjYWxlV29CID0gMS4yNTsgLy8gU2NhbGluZyBmb3IgbGlnaHQgdGV4dCBvbiBkYXJrXG5jb25zdCBsb0NvblRocmVzaCA9IDAuMDc4OyAvLyBUaHJlc2hvbGQgZm9yIG5ldyBzaW1wbGUgb2Zmc2V0IHNjYWxlXG5jb25zdCBsb0NvbkZhY3RvciA9IDEyLjgyMDUxMjgyMDUxMjgyOyAvLyA9IDEvMC4wNzgsXG5jb25zdCBsb0Nvbk9mZnNldCA9IDAuMDY7IC8vIFRoZSBzaW1wbGUgb2Zmc2V0XG5jb25zdCBsb0NsaXAgPSAwLjAwMTsgLy8gT3V0cHV0IGNsaXAgKGxpbnQgdHJhcCAjMilcblxuZXhwb3J0IGZ1bmN0aW9uIEFQQ0Fjb250cmFzdCh0ZXh0LCBiYWNrZ3JvdW5kKSB7XG4gIC8vIExpbmVhcml6ZSBzUkdCXG4gIGNvbnN0IFJ0eHQgPSAodGV4dC5yIC8gMjU1KSAqKiBtYWluVFJDO1xuICBjb25zdCBHdHh0ID0gKHRleHQuZyAvIDI1NSkgKiogbWFpblRSQztcbiAgY29uc3QgQnR4dCA9ICh0ZXh0LmIgLyAyNTUpICoqIG1haW5UUkM7XG4gIGNvbnN0IFJiZyA9IChiYWNrZ3JvdW5kLnIgLyAyNTUpICoqIG1haW5UUkM7XG4gIGNvbnN0IEdiZyA9IChiYWNrZ3JvdW5kLmcgLyAyNTUpICoqIG1haW5UUkM7XG4gIGNvbnN0IEJiZyA9IChiYWNrZ3JvdW5kLmIgLyAyNTUpICoqIG1haW5UUkM7XG5cbiAgLy8gQXBwbHkgdGhlIHN0YW5kYXJkIGNvZWZmaWNpZW50cyBhbmQgc3VtIHRvIFlcbiAgbGV0IFl0eHQgPSBSdHh0ICogUmNvICsgR3R4dCAqIEdjbyArIEJ0eHQgKiBCY287XG4gIGxldCBZYmcgPSBSYmcgKiBSY28gKyBHYmcgKiBHY28gKyBCYmcgKiBCY287XG5cbiAgLy8gU29mdCBjbGFtcCBZIHdoZW4gbmVhciBibGFjay5cbiAgLy8gTm93IGNsYW1waW5nIGFsbCBjb2xvcnMgdG8gcHJldmVudCBjcm9zc292ZXIgZXJyb3JzXG4gIGlmIChZdHh0IDw9IGJsa1RocnMpIFl0eHQgKz0gKGJsa1RocnMgLSBZdHh0KSAqKiBibGtDbG1wO1xuICBpZiAoWWJnIDw9IGJsa1RocnMpIFliZyArPSAoYmxrVGhycyAtIFliZykgKiogYmxrQ2xtcDtcblxuICAvLyBSZXR1cm4gMCBFYXJseSBmb3IgZXh0cmVtZWx5IGxvdyDiiIZZIChsaW50IHRyYXAgIzEpXG4gIGlmIChNYXRoLmFicyhZYmcgLSBZdHh0KSA8IGRlbHRhWW1pbikgcmV0dXJuIDAuMDtcblxuICAvLyBTQVBDIENPTlRSQVNUXG5cbiAgbGV0IG91dHB1dENvbnRyYXN0OyAvLyBGb3Igd2VpZ2h0ZWQgZmluYWwgdmFsdWVzXG4gIGlmIChZYmcgPiBZdHh0KSB7XG4gICAgLy8gRm9yIG5vcm1hbCBwb2xhcml0eSwgYmxhY2sgdGV4dCBvbiB3aGl0ZVxuICAgIC8vIENhbGN1bGF0ZSB0aGUgU0FQQyBjb250cmFzdCB2YWx1ZSBhbmQgc2NhbGVcblxuICAgIGNvbnN0IFNBUEMgPSAoWWJnICoqIG5vcm1CRyAtIFl0eHQgKiogbm9ybVRYVCkgKiBzY2FsZUJvVztcblxuICAgIC8vIE5FVyEgU0FQQyBTbW9vdGhTY2FsZeKEolxuICAgIC8vIExvdyBDb250cmFzdCBTbW9vdGggU2NhbGUgUm9sbG91dCB0byBwcmV2ZW50IHBvbGFyaXR5IHJldmVyc2FsXG4gICAgLy8gYW5kIGFsc28gYSBsb3cgY2xpcCBmb3IgdmVyeSBsb3cgY29udHJhc3RzIChsaW50IHRyYXAgIzIpXG4gICAgLy8gbXVjaCBvZiB0aGlzIGlzIGZvciB2ZXJ5IGxvdyBjb250cmFzdHMsIGxlc3MgdGhhbiAxMFxuICAgIC8vIHRoZXJlZm9yZSBmb3IgbW9zdCByZXZlcnNpbmcgbmVlZHMsIG9ubHkgbG9Db25PZmZzZXQgaXMgaW1wb3J0YW50XG4gICAgb3V0cHV0Q29udHJhc3QgPSBTQVBDIDwgbG9DbGlwID8gMC4wIDogU0FQQyA8IGxvQ29uVGhyZXNoID8gU0FQQyAtIFNBUEMgKiBsb0NvbkZhY3RvciAqIGxvQ29uT2Zmc2V0IDogU0FQQyAtIGxvQ29uT2Zmc2V0O1xuICB9IGVsc2Uge1xuICAgIC8vIEZvciByZXZlcnNlIHBvbGFyaXR5LCBsaWdodCB0ZXh0IG9uIGRhcmtcbiAgICAvLyBXb0Igc2hvdWxkIGFsd2F5cyByZXR1cm4gbmVnYXRpdmUgdmFsdWUuXG5cbiAgICBjb25zdCBTQVBDID0gKFliZyAqKiByZXZCRyAtIFl0eHQgKiogcmV2VFhUKSAqIHNjYWxlV29CO1xuICAgIG91dHB1dENvbnRyYXN0ID0gU0FQQyA+IC1sb0NsaXAgPyAwLjAgOiBTQVBDID4gLWxvQ29uVGhyZXNoID8gU0FQQyAtIFNBUEMgKiBsb0NvbkZhY3RvciAqIGxvQ29uT2Zmc2V0IDogU0FQQyArIGxvQ29uT2Zmc2V0O1xuICB9XG4gIHJldHVybiBvdXRwdXRDb250cmFzdCAqIDEwMDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFQQ0EubWpzLm1hcCIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cblxuLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyB3YXJuIH0gZnJvbSAndnVlJztcbmV4cG9ydCBmdW5jdGlvbiBjb25zb2xlV2FybihtZXNzYWdlKSB7XG4gIHdhcm4oYFZ1ZXRpZnk6ICR7bWVzc2FnZX1gKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb25zb2xlRXJyb3IobWVzc2FnZSkge1xuICB3YXJuKGBWdWV0aWZ5IGVycm9yOiAke21lc3NhZ2V9YCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVwcmVjYXRlKG9yaWdpbmFsLCByZXBsYWNlbWVudCkge1xuICByZXBsYWNlbWVudCA9IEFycmF5LmlzQXJyYXkocmVwbGFjZW1lbnQpID8gcmVwbGFjZW1lbnQuc2xpY2UoMCwgLTEpLm1hcChzID0+IGAnJHtzfSdgKS5qb2luKCcsICcpICsgYCBvciAnJHtyZXBsYWNlbWVudC5hdCgtMSl9J2AgOiBgJyR7cmVwbGFjZW1lbnR9J2A7XG4gIHdhcm4oYFtWdWV0aWZ5IFVQR1JBREVdICcke29yaWdpbmFsfScgaXMgZGVwcmVjYXRlZCwgdXNlICR7cmVwbGFjZW1lbnR9IGluc3RlYWQuYCk7XG59XG5leHBvcnQgZnVuY3Rpb24gYnJlYWtpbmcob3JpZ2luYWwsIHJlcGxhY2VtZW50KSB7XG4gIC8vIHdhcm4oYFtWdWV0aWZ5IEJSRUFLSU5HXSAnJHtvcmlnaW5hbH0nIGhhcyBiZWVuIHJlbW92ZWQsIHVzZSAnJHtyZXBsYWNlbWVudH0nIGluc3RlYWQuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIHVwZ3JhZGUgZ3VpZGUgaHR0cHM6Ly9naXRodWIuY29tL3Z1ZXRpZnlqcy92dWV0aWZ5L3JlbGVhc2VzL3RhZy92Mi4wLjAjdXNlci1jb250ZW50LXVwZ3JhZGUtZ3VpZGVgKVxufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZWQob3JpZ2luYWwpIHtcbiAgLy8gd2FybihgW1Z1ZXRpZnkgUkVNT1ZFRF0gJyR7b3JpZ2luYWx9JyBoYXMgYmVlbiByZW1vdmVkLiBZb3UgY2FuIHNhZmVseSBvbWl0IGl0LmApXG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zb2xlLm1qcy5tYXAiLCIvLyBUeXBlc1xuXG5jb25zdCBkZWx0YSA9IDAuMjA2ODk2NTUxNzI0MTM3OTM7IC8vIDbDtzI5XG5cbmNvbnN0IGNpZWxhYkZvcndhcmRUcmFuc2Zvcm0gPSB0ID0+IHQgPiBkZWx0YSAqKiAzID8gTWF0aC5jYnJ0KHQpIDogdCAvICgzICogZGVsdGEgKiogMikgKyA0IC8gMjk7XG5jb25zdCBjaWVsYWJSZXZlcnNlVHJhbnNmb3JtID0gdCA9PiB0ID4gZGVsdGEgPyB0ICoqIDMgOiAzICogZGVsdGEgKiogMiAqICh0IC0gNCAvIDI5KTtcbmV4cG9ydCBmdW5jdGlvbiBmcm9tWFlaKHh5eikge1xuICBjb25zdCB0cmFuc2Zvcm0gPSBjaWVsYWJGb3J3YXJkVHJhbnNmb3JtO1xuICBjb25zdCB0cmFuc2Zvcm1lZFkgPSB0cmFuc2Zvcm0oeHl6WzFdKTtcbiAgcmV0dXJuIFsxMTYgKiB0cmFuc2Zvcm1lZFkgLSAxNiwgNTAwICogKHRyYW5zZm9ybSh4eXpbMF0gLyAwLjk1MDQ3KSAtIHRyYW5zZm9ybWVkWSksIDIwMCAqICh0cmFuc2Zvcm1lZFkgLSB0cmFuc2Zvcm0oeHl6WzJdIC8gMS4wODg4MykpXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b1hZWihsYWIpIHtcbiAgY29uc3QgdHJhbnNmb3JtID0gY2llbGFiUmV2ZXJzZVRyYW5zZm9ybTtcbiAgY29uc3QgTG4gPSAobGFiWzBdICsgMTYpIC8gMTE2O1xuICByZXR1cm4gW3RyYW5zZm9ybShMbiArIGxhYlsxXSAvIDUwMCkgKiAwLjk1MDQ3LCB0cmFuc2Zvcm0oTG4pLCB0cmFuc2Zvcm0oTG4gLSBsYWJbMl0gLyAyMDApICogMS4wODg4M107XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2Zvcm1DSUVMQUIubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tIFwiLi4vaGVscGVycy5tanNcIjsgLy8gVHlwZXNcbi8vIEZvciBjb252ZXJ0aW5nIFhZWiB0byBzUkdCXG5jb25zdCBzcmdiRm9yd2FyZE1hdHJpeCA9IFtbMy4yNDA2LCAtMS41MzcyLCAtMC40OTg2XSwgWy0wLjk2ODksIDEuODc1OCwgMC4wNDE1XSwgWzAuMDU1NywgLTAuMjA0MCwgMS4wNTcwXV07XG5cbi8vIEZvcndhcmQgZ2FtbWEgYWRqdXN0XG5jb25zdCBzcmdiRm9yd2FyZFRyYW5zZm9ybSA9IEMgPT4gQyA8PSAwLjAwMzEzMDggPyBDICogMTIuOTIgOiAxLjA1NSAqIEMgKiogKDEgLyAyLjQpIC0gMC4wNTU7XG5cbi8vIEZvciBjb252ZXJ0aW5nIHNSR0IgdG8gWFlaXG5jb25zdCBzcmdiUmV2ZXJzZU1hdHJpeCA9IFtbMC40MTI0LCAwLjM1NzYsIDAuMTgwNV0sIFswLjIxMjYsIDAuNzE1MiwgMC4wNzIyXSwgWzAuMDE5MywgMC4xMTkyLCAwLjk1MDVdXTtcblxuLy8gUmV2ZXJzZSBnYW1tYSBhZGp1c3RcbmNvbnN0IHNyZ2JSZXZlcnNlVHJhbnNmb3JtID0gQyA9PiBDIDw9IDAuMDQwNDUgPyBDIC8gMTIuOTIgOiAoKEMgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40O1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21YWVooeHl6KSB7XG4gIGNvbnN0IHJnYiA9IEFycmF5KDMpO1xuICBjb25zdCB0cmFuc2Zvcm0gPSBzcmdiRm9yd2FyZFRyYW5zZm9ybTtcbiAgY29uc3QgbWF0cml4ID0gc3JnYkZvcndhcmRNYXRyaXg7XG5cbiAgLy8gTWF0cml4IHRyYW5zZm9ybSwgdGhlbiBnYW1tYSBhZGp1c3RtZW50XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgKytpKSB7XG4gICAgLy8gUmVzY2FsZSBiYWNrIHRvIFswLCAyNTVdXG4gICAgcmdiW2ldID0gTWF0aC5yb3VuZChjbGFtcCh0cmFuc2Zvcm0obWF0cml4W2ldWzBdICogeHl6WzBdICsgbWF0cml4W2ldWzFdICogeHl6WzFdICsgbWF0cml4W2ldWzJdICogeHl6WzJdKSkgKiAyNTUpO1xuICB9XG4gIHJldHVybiB7XG4gICAgcjogcmdiWzBdLFxuICAgIGc6IHJnYlsxXSxcbiAgICBiOiByZ2JbMl1cbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b1hZWihfcmVmKSB7XG4gIGxldCB7XG4gICAgcixcbiAgICBnLFxuICAgIGJcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHh5eiA9IFswLCAwLCAwXTtcbiAgY29uc3QgdHJhbnNmb3JtID0gc3JnYlJldmVyc2VUcmFuc2Zvcm07XG4gIGNvbnN0IG1hdHJpeCA9IHNyZ2JSZXZlcnNlTWF0cml4O1xuXG4gIC8vIFJlc2NhbGUgZnJvbSBbMCwgMjU1XSB0byBbMCwgMV0gdGhlbiBhZGp1c3Qgc1JHQiBnYW1tYSB0byBsaW5lYXIgUkdCXG4gIHIgPSB0cmFuc2Zvcm0ociAvIDI1NSk7XG4gIGcgPSB0cmFuc2Zvcm0oZyAvIDI1NSk7XG4gIGIgPSB0cmFuc2Zvcm0oYiAvIDI1NSk7XG5cbiAgLy8gTWF0cml4IGNvbG9yIHNwYWNlIHRyYW5zZm9ybVxuICBmb3IgKGxldCBpID0gMDsgaSA8IDM7ICsraSkge1xuICAgIHh5eltpXSA9IG1hdHJpeFtpXVswXSAqIHIgKyBtYXRyaXhbaV1bMV0gKiBnICsgbWF0cml4W2ldWzJdICogYjtcbiAgfVxuICByZXR1cm4geHl6O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNmb3JtU1JHQi5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBBUENBY29udHJhc3QgfSBmcm9tIFwiLi9jb2xvci9BUENBLm1qc1wiO1xuaW1wb3J0IHsgY29uc29sZVdhcm4gfSBmcm9tIFwiLi9jb25zb2xlLm1qc1wiO1xuaW1wb3J0IHsgY2h1bmssIGhhcywgcGFkRW5kIH0gZnJvbSBcIi4vaGVscGVycy5tanNcIjtcbmltcG9ydCAqIGFzIENJRUxBQiBmcm9tIFwiLi9jb2xvci90cmFuc2Zvcm1DSUVMQUIubWpzXCI7XG5pbXBvcnQgKiBhcyBzUkdCIGZyb20gXCIuL2NvbG9yL3RyYW5zZm9ybVNSR0IubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgZnVuY3Rpb24gaXNDc3NDb2xvcihjb2xvcikge1xuICByZXR1cm4gISFjb2xvciAmJiAvXigjfHZhclxcKC0tfChyZ2J8aHNsKWE/XFwoKS8udGVzdChjb2xvcik7XG59XG5jb25zdCBjc3NDb2xvclJlID0gL14oPzxmbj4oPzpyZ2J8aHNsKWE/KVxcKCg/PHZhbHVlcz4uKylcXCkvO1xuY29uc3QgbWFwcGVycyA9IHtcbiAgcmdiOiAociwgZywgYiwgYSkgPT4gKHtcbiAgICByLFxuICAgIGcsXG4gICAgYixcbiAgICBhXG4gIH0pLFxuICByZ2JhOiAociwgZywgYiwgYSkgPT4gKHtcbiAgICByLFxuICAgIGcsXG4gICAgYixcbiAgICBhXG4gIH0pLFxuICBoc2w6IChoLCBzLCBsLCBhKSA9PiBIU0x0b1JHQih7XG4gICAgaCxcbiAgICBzLFxuICAgIGwsXG4gICAgYVxuICB9KSxcbiAgaHNsYTogKGgsIHMsIGwsIGEpID0+IEhTTHRvUkdCKHtcbiAgICBoLFxuICAgIHMsXG4gICAgbCxcbiAgICBhXG4gIH0pLFxuICBoc3Y6IChoLCBzLCB2LCBhKSA9PiBIU1Z0b1JHQih7XG4gICAgaCxcbiAgICBzLFxuICAgIHYsXG4gICAgYVxuICB9KSxcbiAgaHN2YTogKGgsIHMsIHYsIGEpID0+IEhTVnRvUkdCKHtcbiAgICBoLFxuICAgIHMsXG4gICAgdixcbiAgICBhXG4gIH0pXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29sb3IoY29sb3IpIHtcbiAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoaXNOYU4oY29sb3IpIHx8IGNvbG9yIDwgMCB8fCBjb2xvciA+IDB4RkZGRkZGKSB7XG4gICAgICAvLyBpbnQgY2FuJ3QgaGF2ZSBvcGFjaXR5XG4gICAgICBjb25zb2xlV2FybihgJyR7Y29sb3J9JyBpcyBub3QgYSB2YWxpZCBoZXggY29sb3JgKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHI6IChjb2xvciAmIDB4RkYwMDAwKSA+PiAxNixcbiAgICAgIGc6IChjb2xvciAmIDB4RkYwMCkgPj4gOCxcbiAgICAgIGI6IGNvbG9yICYgMHhGRlxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNvbG9yID09PSAnc3RyaW5nJyAmJiBjc3NDb2xvclJlLnRlc3QoY29sb3IpKSB7XG4gICAgY29uc3Qge1xuICAgICAgZ3JvdXBzXG4gICAgfSA9IGNvbG9yLm1hdGNoKGNzc0NvbG9yUmUpO1xuICAgIGNvbnN0IHtcbiAgICAgIGZuLFxuICAgICAgdmFsdWVzXG4gICAgfSA9IGdyb3VwcztcbiAgICBjb25zdCByZWFsVmFsdWVzID0gdmFsdWVzLnNwbGl0KC8sXFxzKi8pLm1hcCh2ID0+IHtcbiAgICAgIGlmICh2LmVuZHNXaXRoKCclJykgJiYgWydoc2wnLCAnaHNsYScsICdoc3YnLCAnaHN2YSddLmluY2x1ZGVzKGZuKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2KSAvIDEwMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHYpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtYXBwZXJzW2ZuXSguLi5yZWFsVmFsdWVzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgbGV0IGhleCA9IGNvbG9yLnN0YXJ0c1dpdGgoJyMnKSA/IGNvbG9yLnNsaWNlKDEpIDogY29sb3I7XG4gICAgaWYgKFszLCA0XS5pbmNsdWRlcyhoZXgubGVuZ3RoKSkge1xuICAgICAgaGV4ID0gaGV4LnNwbGl0KCcnKS5tYXAoY2hhciA9PiBjaGFyICsgY2hhcikuam9pbignJyk7XG4gICAgfSBlbHNlIGlmICghWzYsIDhdLmluY2x1ZGVzKGhleC5sZW5ndGgpKSB7XG4gICAgICBjb25zb2xlV2FybihgJyR7Y29sb3J9JyBpcyBub3QgYSB2YWxpZCBoZXgoYSkgY29sb3JgKTtcbiAgICB9XG4gICAgY29uc3QgaW50ID0gcGFyc2VJbnQoaGV4LCAxNik7XG4gICAgaWYgKGlzTmFOKGludCkgfHwgaW50IDwgMCB8fCBpbnQgPiAweEZGRkZGRkZGKSB7XG4gICAgICBjb25zb2xlV2FybihgJyR7Y29sb3J9JyBpcyBub3QgYSB2YWxpZCBoZXgoYSkgY29sb3JgKTtcbiAgICB9XG4gICAgcmV0dXJuIEhleFRvUkdCKGhleCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNvbG9yID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChoYXMoY29sb3IsIFsncicsICdnJywgJ2InXSkpIHtcbiAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9IGVsc2UgaWYgKGhhcyhjb2xvciwgWydoJywgJ3MnLCAnbCddKSkge1xuICAgICAgcmV0dXJuIEhTVnRvUkdCKEhTTHRvSFNWKGNvbG9yKSk7XG4gICAgfSBlbHNlIGlmIChoYXMoY29sb3IsIFsnaCcsICdzJywgJ3YnXSkpIHtcbiAgICAgIHJldHVybiBIU1Z0b1JHQihjb2xvcik7XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgY29sb3I6ICR7Y29sb3IgPT0gbnVsbCA/IGNvbG9yIDogU3RyaW5nKGNvbG9yKSB8fCBjb2xvci5jb25zdHJ1Y3Rvci5uYW1lfVxcbkV4cGVjdGVkICNoZXgsICNoZXhhLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBvYmplY3Qgb3IgbnVtYmVyYCk7XG59XG5leHBvcnQgZnVuY3Rpb24gUkdCVG9JbnQoY29sb3IpIHtcbiAgcmV0dXJuIChjb2xvci5yIDw8IDE2KSArIChjb2xvci5nIDw8IDgpICsgY29sb3IuYjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbGFzc1RvSGV4KGNvbG9yLCBjb2xvcnMsIGN1cnJlbnRUaGVtZSkge1xuICBjb25zdCBbY29sb3JOYW1lLCBjb2xvck1vZGlmaWVyXSA9IGNvbG9yLnRvU3RyaW5nKCkudHJpbSgpLnJlcGxhY2UoJy0nLCAnJykuc3BsaXQoJyAnLCAyKTtcbiAgbGV0IGhleENvbG9yID0gJyc7XG4gIGlmIChjb2xvck5hbWUgJiYgY29sb3JOYW1lIGluIGNvbG9ycykge1xuICAgIGlmIChjb2xvck1vZGlmaWVyICYmIGNvbG9yTW9kaWZpZXIgaW4gY29sb3JzW2NvbG9yTmFtZV0pIHtcbiAgICAgIGhleENvbG9yID0gY29sb3JzW2NvbG9yTmFtZV1bY29sb3JNb2RpZmllcl07XG4gICAgfSBlbHNlIGlmICgnYmFzZScgaW4gY29sb3JzW2NvbG9yTmFtZV0pIHtcbiAgICAgIGhleENvbG9yID0gY29sb3JzW2NvbG9yTmFtZV0uYmFzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29sb3JOYW1lICYmIGNvbG9yTmFtZSBpbiBjdXJyZW50VGhlbWUpIHtcbiAgICBoZXhDb2xvciA9IGN1cnJlbnRUaGVtZVtjb2xvck5hbWVdO1xuICB9XG4gIHJldHVybiBoZXhDb2xvcjtcbn1cblxuLyoqIENvbnZlcnRzIEhTVkEgdG8gUkdCQS4gQmFzZWQgb24gZm9ybXVsYSBmcm9tIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTTF9hbmRfSFNWICovXG5leHBvcnQgZnVuY3Rpb24gSFNWdG9SR0IoaHN2YSkge1xuICBjb25zdCB7XG4gICAgaCxcbiAgICBzLFxuICAgIHYsXG4gICAgYVxuICB9ID0gaHN2YTtcbiAgY29uc3QgZiA9IG4gPT4ge1xuICAgIGNvbnN0IGsgPSAobiArIGggLyA2MCkgJSA2O1xuICAgIHJldHVybiB2IC0gdiAqIHMgKiBNYXRoLm1heChNYXRoLm1pbihrLCA0IC0gaywgMSksIDApO1xuICB9O1xuICBjb25zdCByZ2IgPSBbZig1KSwgZigzKSwgZigxKV0ubWFwKHYgPT4gTWF0aC5yb3VuZCh2ICogMjU1KSk7XG4gIHJldHVybiB7XG4gICAgcjogcmdiWzBdLFxuICAgIGc6IHJnYlsxXSxcbiAgICBiOiByZ2JbMl0sXG4gICAgYVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIEhTTHRvUkdCKGhzbGEpIHtcbiAgcmV0dXJuIEhTVnRvUkdCKEhTTHRvSFNWKGhzbGEpKTtcbn1cblxuLyoqIENvbnZlcnRzIFJHQkEgdG8gSFNWQS4gQmFzZWQgb24gZm9ybXVsYSBmcm9tIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTTF9hbmRfSFNWICovXG5leHBvcnQgZnVuY3Rpb24gUkdCdG9IU1YocmdiYSkge1xuICBpZiAoIXJnYmEpIHJldHVybiB7XG4gICAgaDogMCxcbiAgICBzOiAxLFxuICAgIHY6IDEsXG4gICAgYTogMVxuICB9O1xuICBjb25zdCByID0gcmdiYS5yIC8gMjU1O1xuICBjb25zdCBnID0gcmdiYS5nIC8gMjU1O1xuICBjb25zdCBiID0gcmdiYS5iIC8gMjU1O1xuICBjb25zdCBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgY29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gIGxldCBoID0gMDtcbiAgaWYgKG1heCAhPT0gbWluKSB7XG4gICAgaWYgKG1heCA9PT0gcikge1xuICAgICAgaCA9IDYwICogKDAgKyAoZyAtIGIpIC8gKG1heCAtIG1pbikpO1xuICAgIH0gZWxzZSBpZiAobWF4ID09PSBnKSB7XG4gICAgICBoID0gNjAgKiAoMiArIChiIC0gcikgLyAobWF4IC0gbWluKSk7XG4gICAgfSBlbHNlIGlmIChtYXggPT09IGIpIHtcbiAgICAgIGggPSA2MCAqICg0ICsgKHIgLSBnKSAvIChtYXggLSBtaW4pKTtcbiAgICB9XG4gIH1cbiAgaWYgKGggPCAwKSBoID0gaCArIDM2MDtcbiAgY29uc3QgcyA9IG1heCA9PT0gMCA/IDAgOiAobWF4IC0gbWluKSAvIG1heDtcbiAgY29uc3QgaHN2ID0gW2gsIHMsIG1heF07XG4gIHJldHVybiB7XG4gICAgaDogaHN2WzBdLFxuICAgIHM6IGhzdlsxXSxcbiAgICB2OiBoc3ZbMl0sXG4gICAgYTogcmdiYS5hXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gSFNWdG9IU0woaHN2YSkge1xuICBjb25zdCB7XG4gICAgaCxcbiAgICBzLFxuICAgIHYsXG4gICAgYVxuICB9ID0gaHN2YTtcbiAgY29uc3QgbCA9IHYgLSB2ICogcyAvIDI7XG4gIGNvbnN0IHNwcmltZSA9IGwgPT09IDEgfHwgbCA9PT0gMCA/IDAgOiAodiAtIGwpIC8gTWF0aC5taW4obCwgMSAtIGwpO1xuICByZXR1cm4ge1xuICAgIGgsXG4gICAgczogc3ByaW1lLFxuICAgIGwsXG4gICAgYVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIEhTTHRvSFNWKGhzbCkge1xuICBjb25zdCB7XG4gICAgaCxcbiAgICBzLFxuICAgIGwsXG4gICAgYVxuICB9ID0gaHNsO1xuICBjb25zdCB2ID0gbCArIHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG4gIGNvbnN0IHNwcmltZSA9IHYgPT09IDAgPyAwIDogMiAtIDIgKiBsIC8gdjtcbiAgcmV0dXJuIHtcbiAgICBoLFxuICAgIHM6IHNwcmltZSxcbiAgICB2LFxuICAgIGFcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBSR0J0b0NTUyhfcmVmKSB7XG4gIGxldCB7XG4gICAgcixcbiAgICBnLFxuICAgIGIsXG4gICAgYVxuICB9ID0gX3JlZjtcbiAgcmV0dXJuIGEgPT09IHVuZGVmaW5lZCA/IGByZ2IoJHtyfSwgJHtnfSwgJHtifSlgIDogYHJnYmEoJHtyfSwgJHtnfSwgJHtifSwgJHthfSlgO1xufVxuZXhwb3J0IGZ1bmN0aW9uIEhTVnRvQ1NTKGhzdmEpIHtcbiAgcmV0dXJuIFJHQnRvQ1NTKEhTVnRvUkdCKGhzdmEpKTtcbn1cbmZ1bmN0aW9uIHRvSGV4KHYpIHtcbiAgY29uc3QgaCA9IE1hdGgucm91bmQodikudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gKCcwMCcuc3Vic3RyKDAsIDIgLSBoLmxlbmd0aCkgKyBoKS50b1VwcGVyQ2FzZSgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIFJHQnRvSGV4KF9yZWYyKSB7XG4gIGxldCB7XG4gICAgcixcbiAgICBnLFxuICAgIGIsXG4gICAgYVxuICB9ID0gX3JlZjI7XG4gIHJldHVybiBgIyR7W3RvSGV4KHIpLCB0b0hleChnKSwgdG9IZXgoYiksIGEgIT09IHVuZGVmaW5lZCA/IHRvSGV4KE1hdGgucm91bmQoYSAqIDI1NSkpIDogJyddLmpvaW4oJycpfWA7XG59XG5leHBvcnQgZnVuY3Rpb24gSGV4VG9SR0IoaGV4KSB7XG4gIGhleCA9IHBhcnNlSGV4KGhleCk7XG4gIGxldCBbciwgZywgYiwgYV0gPSBjaHVuayhoZXgsIDIpLm1hcChjID0+IHBhcnNlSW50KGMsIDE2KSk7XG4gIGEgPSBhID09PSB1bmRlZmluZWQgPyBhIDogYSAvIDI1NTtcbiAgcmV0dXJuIHtcbiAgICByLFxuICAgIGcsXG4gICAgYixcbiAgICBhXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gSGV4VG9IU1YoaGV4KSB7XG4gIGNvbnN0IHJnYiA9IEhleFRvUkdCKGhleCk7XG4gIHJldHVybiBSR0J0b0hTVihyZ2IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIEhTVnRvSGV4KGhzdmEpIHtcbiAgcmV0dXJuIFJHQnRvSGV4KEhTVnRvUkdCKGhzdmEpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUhleChoZXgpIHtcbiAgaWYgKGhleC5zdGFydHNXaXRoKCcjJykpIHtcbiAgICBoZXggPSBoZXguc2xpY2UoMSk7XG4gIH1cbiAgaGV4ID0gaGV4LnJlcGxhY2UoLyhbXjAtOWEtZl0pL2dpLCAnRicpO1xuICBpZiAoaGV4Lmxlbmd0aCA9PT0gMyB8fCBoZXgubGVuZ3RoID09PSA0KSB7XG4gICAgaGV4ID0gaGV4LnNwbGl0KCcnKS5tYXAoeCA9PiB4ICsgeCkuam9pbignJyk7XG4gIH1cbiAgaWYgKGhleC5sZW5ndGggIT09IDYpIHtcbiAgICBoZXggPSBwYWRFbmQocGFkRW5kKGhleCwgNiksIDgsICdGJyk7XG4gIH1cbiAgcmV0dXJuIGhleDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdyYWRpZW50KGdyYWRpZW50LCBjb2xvcnMsIGN1cnJlbnRUaGVtZSkge1xuICByZXR1cm4gZ3JhZGllbnQucmVwbGFjZSgvKFthLXpdKyhcXHNbYS16XSstWzEtNV0pPykoPz0kfCwpL2dpLCB4ID0+IHtcbiAgICByZXR1cm4gY2xhc3NUb0hleCh4LCBjb2xvcnMsIGN1cnJlbnRUaGVtZSkgfHwgeDtcbiAgfSkucmVwbGFjZSgvKHJnYmFcXCgpI1swLTlhLWZdKyg/PSwpL2dpLCB4ID0+IHtcbiAgICByZXR1cm4gJ3JnYmEoJyArIE9iamVjdC52YWx1ZXMoSGV4VG9SR0IocGFyc2VIZXgoeC5yZXBsYWNlKC9yZ2JhXFwoLywgJycpKSkpLnNsaWNlKDAsIDMpLmpvaW4oJywnKTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbih2YWx1ZSwgYW1vdW50KSB7XG4gIGNvbnN0IGxhYiA9IENJRUxBQi5mcm9tWFlaKHNSR0IudG9YWVoodmFsdWUpKTtcbiAgbGFiWzBdID0gbGFiWzBdICsgYW1vdW50ICogMTA7XG4gIHJldHVybiBzUkdCLmZyb21YWVooQ0lFTEFCLnRvWFlaKGxhYikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRhcmtlbih2YWx1ZSwgYW1vdW50KSB7XG4gIGNvbnN0IGxhYiA9IENJRUxBQi5mcm9tWFlaKHNSR0IudG9YWVoodmFsdWUpKTtcbiAgbGFiWzBdID0gbGFiWzBdIC0gYW1vdW50ICogMTA7XG4gIHJldHVybiBzUkdCLmZyb21YWVooQ0lFTEFCLnRvWFlaKGxhYikpO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgcmVsYXRpdmUgbHVtaW5hbmNlIG9mIGEgZ2l2ZW4gY29sb3JcbiAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC8jcmVsYXRpdmVsdW1pbmFuY2VkZWZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEx1bWEoY29sb3IpIHtcbiAgY29uc3QgcmdiID0gcGFyc2VDb2xvcihjb2xvcik7XG4gIHJldHVybiBzUkdCLnRvWFlaKHJnYilbMV07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY29udHJhc3QgcmF0aW8gKDEtMjEpIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC8jY29udHJhc3QtcmF0aW9kZWZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRyYXN0KGZpcnN0LCBzZWNvbmQpIHtcbiAgY29uc3QgbDEgPSBnZXRMdW1hKGZpcnN0KTtcbiAgY29uc3QgbDIgPSBnZXRMdW1hKHNlY29uZCk7XG4gIGNvbnN0IGxpZ2h0ID0gTWF0aC5tYXgobDEsIGwyKTtcbiAgY29uc3QgZGFyayA9IE1hdGgubWluKGwxLCBsMik7XG4gIHJldHVybiAobGlnaHQgKyAwLjA1KSAvIChkYXJrICsgMC4wNSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9yZWdyb3VuZChjb2xvcikge1xuICBjb25zdCBibGFja0NvbnRyYXN0ID0gTWF0aC5hYnMoQVBDQWNvbnRyYXN0KHBhcnNlQ29sb3IoMCksIHBhcnNlQ29sb3IoY29sb3IpKSk7XG4gIGNvbnN0IHdoaXRlQ29udHJhc3QgPSBNYXRoLmFicyhBUENBY29udHJhc3QocGFyc2VDb2xvcigweGZmZmZmZiksIHBhcnNlQ29sb3IoY29sb3IpKSk7XG5cbiAgLy8gVE9ETzogd2FybiBhYm91dCBwb29yIGNvbG9yIHNlbGVjdGlvbnNcbiAgLy8gY29uc3QgY29udHJhc3RBc1RleHQgPSBNYXRoLmFicyhBUENBY29udHJhc3QoY29sb3JWYWwsIGNvbG9yVG9JbnQodGhlbWUuY29sb3JzLmJhY2tncm91bmQpKSlcbiAgLy8gY29uc3QgbWluQ29udHJhc3QgPSBNYXRoLm1heChibGFja0NvbnRyYXN0LCB3aGl0ZUNvbnRyYXN0KVxuICAvLyBpZiAobWluQ29udHJhc3QgPCA2MCkge1xuICAvLyAgIGNvbnNvbGVJbmZvKGAke2tleX0gdGhlbWUgY29sb3IgJHtjb2xvcn0gaGFzIHBvb3IgY29udHJhc3QgKCR7bWluQ29udHJhc3QudG9GaXhlZCgpfSUpYClcbiAgLy8gfSBlbHNlIGlmIChjb250cmFzdEFzVGV4dCA8IDYwICYmICFbJ2JhY2tncm91bmQnLCAnc3VyZmFjZSddLmluY2x1ZGVzKGNvbG9yKSkge1xuICAvLyAgIGNvbnNvbGVJbmZvKGAke2tleX0gdGhlbWUgY29sb3IgJHtjb2xvcn0gaGFzIHBvb3IgY29udHJhc3QgYXMgdGV4dCAoJHtjb250cmFzdEFzVGV4dC50b0ZpeGVkKCl9JSlgKVxuICAvLyB9XG5cbiAgLy8gUHJlZmVyIHdoaXRlIHRleHQgaWYgYm90aCBoYXZlIGFuIGFjY2VwdGFibGUgY29udHJhc3QgcmF0aW9cbiAgcmV0dXJuIHdoaXRlQ29udHJhc3QgPiBNYXRoLm1pbihibGFja0NvbnRyYXN0LCA1MCkgPyAnI2ZmZicgOiAnIzAwMCc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvclV0aWxzLm1qcy5tYXAiLCIvLyBUeXBlc1xuLy8gZXNsaW50LWRpc2FibGUtbGluZSB2dWUvcHJlZmVyLWltcG9ydC1mcm9tLXZ1ZVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmYWN0b3J5IGZ1bmN0aW9uIGZvciBwcm9wcyBkZWZpbml0aW9ucy5cbiAqIFRoaXMgaXMgdXNlZCB0byBkZWZpbmUgcHJvcHMgaW4gYSBjb21wb3NhYmxlIHRoZW4gb3ZlcnJpZGVcbiAqIGRlZmF1bHQgdmFsdWVzIGluIGFuIGltcGxlbWVudGluZyBjb21wb25lbnQuXG4gKlxuICogQGV4YW1wbGUgU2ltcGxpZmllZCBzaWduYXR1cmVcbiAqIChwcm9wczogUHJvcHMpID0+IChkZWZhdWx0cz86IFJlY29yZDxrZXlvZiBwcm9wcywgYW55PikgPT4gUHJvcHNcbiAqXG4gKiBAZXhhbXBsZSBVc2FnZVxuICogY29uc3QgbWFrZVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAqICAgZm9vOiBTdHJpbmcsXG4gKiB9KVxuICpcbiAqIGRlZmluZUNvbXBvbmVudCh7XG4gKiAgIHByb3BzOiB7XG4gKiAgICAgLi4ubWFrZVByb3BzKHtcbiAqICAgICAgIGZvbzogJ2EnLFxuICogICAgIH0pLFxuICogICB9LFxuICogICBzZXR1cCAocHJvcHMpIHtcbiAqICAgICAvLyB3b3VsZCBiZSBcInN0cmluZyB8IHVuZGVmaW5lZFwiLCBub3cgXCJzdHJpbmdcIiBiZWNhdXNlIGEgZGVmYXVsdCBoYXMgYmVlbiBwcm92aWRlZFxuICogICAgIHByb3BzLmZvb1xuICogICB9LFxuICogfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9wc0ZhY3RvcnkocHJvcHMsIHNvdXJjZSkge1xuICByZXR1cm4gZGVmYXVsdHMgPT4ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKChvYmosIHByb3ApID0+IHtcbiAgICAgIGNvbnN0IGlzT2JqZWN0RGVmaW5pdGlvbiA9IHR5cGVvZiBwcm9wc1twcm9wXSA9PT0gJ29iamVjdCcgJiYgcHJvcHNbcHJvcF0gIT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShwcm9wc1twcm9wXSk7XG4gICAgICBjb25zdCBkZWZpbml0aW9uID0gaXNPYmplY3REZWZpbml0aW9uID8gcHJvcHNbcHJvcF0gOiB7XG4gICAgICAgIHR5cGU6IHByb3BzW3Byb3BdXG4gICAgICB9O1xuICAgICAgaWYgKGRlZmF1bHRzICYmIHByb3AgaW4gZGVmYXVsdHMpIHtcbiAgICAgICAgb2JqW3Byb3BdID0ge1xuICAgICAgICAgIC4uLmRlZmluaXRpb24sXG4gICAgICAgICAgZGVmYXVsdDogZGVmYXVsdHNbcHJvcF1cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialtwcm9wXSA9IGRlZmluaXRpb247XG4gICAgICB9XG4gICAgICBpZiAoc291cmNlICYmICFvYmpbcHJvcF0uc291cmNlKSB7XG4gICAgICAgIG9ialtwcm9wXS5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sIHt9KTtcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BzRmFjdG9yeS5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9wcm9wc0ZhY3RvcnkubWpzXCI7IC8vIFR5cGVzXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VDb21wb25lbnRQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNsYXNzOiBbU3RyaW5nLCBBcnJheV0sXG4gIHN0eWxlOiB7XG4gICAgdHlwZTogW1N0cmluZywgQXJyYXksIE9iamVjdF0sXG4gICAgZGVmYXVsdDogbnVsbFxuICB9XG59LCAnY29tcG9uZW50Jyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb25lbnQubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBpbmplY3REZWZhdWx0cywgaW50ZXJuYWxVc2VEZWZhdWx0cyB9IGZyb20gXCIuLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgYXMgX2RlZmluZUNvbXBvbmVudCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtaW1wb3J0c1xufSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29uc29sZVdhcm4gfSBmcm9tIFwiLi9jb25zb2xlLm1qc1wiO1xuaW1wb3J0IHsgcGljayB9IGZyb20gXCIuL2hlbHBlcnMubWpzXCI7XG5pbXBvcnQgeyBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi9wcm9wc0ZhY3RvcnkubWpzXCI7IC8vIFR5cGVzXG4vLyBJbXBsZW1lbnRhdGlvblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZUNvbXBvbmVudChvcHRpb25zKSB7XG4gIG9wdGlvbnMuX3NldHVwID0gb3B0aW9ucy5fc2V0dXAgPz8gb3B0aW9ucy5zZXR1cDtcbiAgaWYgKCFvcHRpb25zLm5hbWUpIHtcbiAgICBjb25zb2xlV2FybignVGhlIGNvbXBvbmVudCBpcyBtaXNzaW5nIGFuIGV4cGxpY2l0IG5hbWUsIHVuYWJsZSB0byBnZW5lcmF0ZSBkZWZhdWx0IHByb3AgdmFsdWUnKTtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuICBpZiAob3B0aW9ucy5fc2V0dXApIHtcbiAgICBvcHRpb25zLnByb3BzID0gcHJvcHNGYWN0b3J5KG9wdGlvbnMucHJvcHMgPz8ge30sIG9wdGlvbnMubmFtZSkoKTtcbiAgICBjb25zdCBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMucHJvcHMpO1xuICAgIG9wdGlvbnMuZmlsdGVyUHJvcHMgPSBmdW5jdGlvbiBmaWx0ZXJQcm9wcyhwcm9wcykge1xuICAgICAgcmV0dXJuIHBpY2socHJvcHMsIHByb3BLZXlzLCBbJ2NsYXNzJywgJ3N0eWxlJ10pO1xuICAgIH07XG4gICAgb3B0aW9ucy5wcm9wcy5fYXMgPSBTdHJpbmc7XG4gICAgb3B0aW9ucy5zZXR1cCA9IGZ1bmN0aW9uIHNldHVwKHByb3BzLCBjdHgpIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRzID0gaW5qZWN0RGVmYXVsdHMoKTtcblxuICAgICAgLy8gU2tpcCBwcm9wcyBwcm94eSBpZiBkZWZhdWx0cyBhcmUgbm90IHByb3ZpZGVkXG4gICAgICBpZiAoIWRlZmF1bHRzLnZhbHVlKSByZXR1cm4gb3B0aW9ucy5fc2V0dXAocHJvcHMsIGN0eCk7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHByb3BzOiBfcHJvcHMsXG4gICAgICAgIHByb3ZpZGVTdWJEZWZhdWx0c1xuICAgICAgfSA9IGludGVybmFsVXNlRGVmYXVsdHMocHJvcHMsIHByb3BzLl9hcyA/PyBvcHRpb25zLm5hbWUsIGRlZmF1bHRzKTtcbiAgICAgIGNvbnN0IHNldHVwQmluZGluZ3MgPSBvcHRpb25zLl9zZXR1cChfcHJvcHMsIGN0eCk7XG4gICAgICBwcm92aWRlU3ViRGVmYXVsdHMoKTtcbiAgICAgIHJldHVybiBzZXR1cEJpbmRpbmdzO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG4vLyBJbXBsZW1lbnRhdGlvblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyaWNDb21wb25lbnQoKSB7XG4gIGxldCBleHBvc2VEZWZhdWx0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTtcbiAgcmV0dXJuIG9wdGlvbnMgPT4gKGV4cG9zZURlZmF1bHRzID8gZGVmaW5lQ29tcG9uZW50IDogX2RlZmluZUNvbXBvbmVudCkob3B0aW9ucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lRnVuY3Rpb25hbENvbXBvbmVudChwcm9wcywgcmVuZGVyKSB7XG4gIHJlbmRlci5wcm9wcyA9IHByb3BzO1xuICByZXR1cm4gcmVuZGVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmaW5lQ29tcG9uZW50Lm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50IH0gZnJvbSBcIi4vZGVmaW5lQ29tcG9uZW50Lm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoa2xhc3MpIHtcbiAgbGV0IHRhZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2Rpdic7XG4gIGxldCBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHJldHVybiBnZW5lcmljQ29tcG9uZW50KCkoe1xuICAgIG5hbWU6IG5hbWUgPz8gY2FwaXRhbGl6ZShjYW1lbGl6ZShrbGFzcy5yZXBsYWNlKC9fXy9nLCAnLScpKSksXG4gICAgcHJvcHM6IHtcbiAgICAgIHRhZzoge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGRlZmF1bHQ6IHRhZ1xuICAgICAgfSxcbiAgICAgIC4uLm1ha2VDb21wb25lbnRQcm9wcygpXG4gICAgfSxcbiAgICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgICAgbGV0IHtcbiAgICAgICAgc2xvdHNcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGgocHJvcHMudGFnLCB7XG4gICAgICAgICAgY2xhc3M6IFtrbGFzcywgcHJvcHMuY2xhc3NdLFxuICAgICAgICAgIHN0eWxlOiBwcm9wcy5zdHlsZVxuICAgICAgICB9LCBzbG90cy5kZWZhdWx0Py4oKSk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVTaW1wbGVGdW5jdGlvbmFsLm1qcy5tYXAiLCIvKipcbiAqIFJldHVybnM6XG4gKiAgLSAnbnVsbCcgaWYgdGhlIG5vZGUgaXMgbm90IGF0dGFjaGVkIHRvIHRoZSBET01cbiAqICAtIHRoZSByb290IG5vZGUgKEhUTUxEb2N1bWVudCB8IFNoYWRvd1Jvb3QpIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXR0YWNoZWRSb290KG5vZGUpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKHR5cGVvZiBub2RlLmdldFJvb3ROb2RlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gU2hhZG93IERPTSBub3Qgc3VwcG9ydGVkIChJRTExKSwgbGV0cyBmaW5kIHRoZSByb290IG9mIHRoaXMgbm9kZVxuICAgIHdoaWxlIChub2RlLnBhcmVudE5vZGUpIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG5cbiAgICAvLyBUaGUgcm9vdCBwYXJlbnQgaXMgdGhlIGRvY3VtZW50IGlmIHRoZSBub2RlIGlzIGF0dGFjaGVkIHRvIHRoZSBET01cbiAgICBpZiAobm9kZSAhPT0gZG9jdW1lbnQpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBkb2N1bWVudDtcbiAgfVxuICBjb25zdCByb290ID0gbm9kZS5nZXRSb290Tm9kZSgpO1xuXG4gIC8vIFRoZSBjb21wb3NlZCByb290IG5vZGUgaXMgdGhlIGRvY3VtZW50IGlmIHRoZSBub2RlIGlzIGF0dGFjaGVkIHRvIHRoZSBET01cbiAgaWYgKHJvb3QgIT09IGRvY3VtZW50ICYmIHJvb3QuZ2V0Um9vdE5vZGUoe1xuICAgIGNvbXBvc2VkOiB0cnVlXG4gIH0pICE9PSBkb2N1bWVudCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiByb290O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9tLm1qcy5tYXAiLCJleHBvcnQgY29uc3Qgc3RhbmRhcmRFYXNpbmcgPSAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSc7XG5leHBvcnQgY29uc3QgZGVjZWxlcmF0ZWRFYXNpbmcgPSAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKSc7IC8vIEVudGVyaW5nXG5leHBvcnQgY29uc3QgYWNjZWxlcmF0ZWRFYXNpbmcgPSAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknOyAvLyBMZWF2aW5nXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lYXNpbmcubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlIGFzIF9nZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgdG9LZWJhYkNhc2UgfSBmcm9tIFwiLi9oZWxwZXJzLm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRJbnN0YW5jZShuYW1lLCBtZXNzYWdlKSB7XG4gIGNvbnN0IHZtID0gX2dldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoIXZtKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBbVnVldGlmeV0gJHtuYW1lfSAke21lc3NhZ2UgfHwgJ211c3QgYmUgY2FsbGVkIGZyb20gaW5zaWRlIGEgc2V0dXAgZnVuY3Rpb24nfWApO1xuICB9XG4gIHJldHVybiB2bTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50SW5zdGFuY2VOYW1lKCkge1xuICBsZXQgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2NvbXBvc2FibGVzJztcbiAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UobmFtZSkudHlwZTtcbiAgcmV0dXJuIHRvS2ViYWJDYXNlKHZtPy5hbGlhc05hbWUgfHwgdm0/Lm5hbWUpO1xufVxubGV0IF91aWQgPSAwO1xubGV0IF9tYXAgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVpZCgpIHtcbiAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoJ2dldFVpZCcpO1xuICBpZiAoX21hcC5oYXModm0pKSByZXR1cm4gX21hcC5nZXQodm0pO2Vsc2Uge1xuICAgIGNvbnN0IHVpZCA9IF91aWQrKztcbiAgICBfbWFwLnNldCh2bSwgdWlkKTtcbiAgICByZXR1cm4gdWlkO1xuICB9XG59XG5nZXRVaWQucmVzZXQgPSAoKSA9PiB7XG4gIF91aWQgPSAwO1xuICBfbWFwID0gbmV3IFdlYWtNYXAoKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRDdXJyZW50SW5zdGFuY2UubWpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWwpIHtcbiAgbGV0IGluY2x1ZGVIaWRkZW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICB3aGlsZSAoZWwpIHtcbiAgICBpZiAoaW5jbHVkZUhpZGRlbiA/IGlzUG90ZW50aWFsbHlTY3JvbGxhYmxlKGVsKSA6IGhhc1Njcm9sbGJhcihlbCkpIHJldHVybiBlbDtcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50cyhlbCwgc3RvcEF0KSB7XG4gIGNvbnN0IGVsZW1lbnRzID0gW107XG4gIGlmIChzdG9wQXQgJiYgZWwgJiYgIXN0b3BBdC5jb250YWlucyhlbCkpIHJldHVybiBlbGVtZW50cztcbiAgd2hpbGUgKGVsKSB7XG4gICAgaWYgKGhhc1Njcm9sbGJhcihlbCkpIGVsZW1lbnRzLnB1c2goZWwpO1xuICAgIGlmIChlbCA9PT0gc3RvcEF0KSBicmVhaztcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1Njcm9sbGJhcihlbCkge1xuICBpZiAoIWVsIHx8IGVsLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgcmV0dXJuIHN0eWxlLm92ZXJmbG93WSA9PT0gJ3Njcm9sbCcgfHwgc3R5bGUub3ZlcmZsb3dZID09PSAnYXV0bycgJiYgZWwuc2Nyb2xsSGVpZ2h0ID4gZWwuY2xpZW50SGVpZ2h0O1xufVxuZnVuY3Rpb24gaXNQb3RlbnRpYWxseVNjcm9sbGFibGUoZWwpIHtcbiAgaWYgKCFlbCB8fCBlbC5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHJldHVybiBmYWxzZTtcbiAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIHJldHVybiBbJ3Njcm9sbCcsICdhdXRvJ10uaW5jbHVkZXMoc3R5bGUub3ZlcmZsb3dZKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFNjcm9sbFBhcmVudC5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tIFwiLi9nZXRDdXJyZW50SW5zdGFuY2UubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0U2VsZihrZXkpIHtcbiAgbGV0IHZtID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBnZXRDdXJyZW50SW5zdGFuY2UoJ2luamVjdFNlbGYnKTtcbiAgY29uc3Qge1xuICAgIHByb3ZpZGVzXG4gIH0gPSB2bTtcbiAgaWYgKHByb3ZpZGVzICYmIGtleSBpbiBwcm92aWRlcykge1xuICAgIC8vIFRTIGRvZXNuJ3QgYWxsb3cgc3ltYm9sIGFzIGluZGV4IHR5cGVcbiAgICByZXR1cm4gcHJvdmlkZXNba2V5XTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5qZWN0U2VsZi5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzRml4ZWRQb3NpdGlvbihlbCkge1xuICB3aGlsZSAoZWwpIHtcbiAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWwgPSBlbC5vZmZzZXRQYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGaXhlZFBvc2l0aW9uLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZSB9IGZyb20gXCIuL2dldEN1cnJlbnRJbnN0YW5jZS5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBmdW5jdGlvbiB1c2VSZW5kZXIocmVuZGVyKSB7XG4gIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKCd1c2VSZW5kZXInKTtcbiAgdm0ucmVuZGVyID0gcmVuZGVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlUmVuZGVyLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBpbmplY3QsIHByb3ZpZGUsIHJlZiwgc2hhbGxvd1JlZiwgdW5yZWYsIHdhdGNoRWZmZWN0IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZSwgaW5qZWN0U2VsZiwgbWVyZ2VEZWVwLCB0b0tlYmFiQ2FzZSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IERlZmF1bHRzU3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTpkZWZhdWx0cycpO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRzKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHJlZihvcHRpb25zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbmplY3REZWZhdWx0cygpIHtcbiAgY29uc3QgZGVmYXVsdHMgPSBpbmplY3QoRGVmYXVsdHNTeW1ib2wpO1xuICBpZiAoIWRlZmF1bHRzKSB0aHJvdyBuZXcgRXJyb3IoJ1tWdWV0aWZ5XSBDb3VsZCBub3QgZmluZCBkZWZhdWx0cyBpbnN0YW5jZScpO1xuICByZXR1cm4gZGVmYXVsdHM7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZURlZmF1bHRzKGRlZmF1bHRzLCBvcHRpb25zKSB7XG4gIGNvbnN0IGluamVjdGVkRGVmYXVsdHMgPSBpbmplY3REZWZhdWx0cygpO1xuICBjb25zdCBwcm92aWRlZERlZmF1bHRzID0gcmVmKGRlZmF1bHRzKTtcbiAgY29uc3QgbmV3RGVmYXVsdHMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgZGlzYWJsZWQgPSB1bnJlZihvcHRpb25zPy5kaXNhYmxlZCk7XG4gICAgaWYgKGRpc2FibGVkKSByZXR1cm4gaW5qZWN0ZWREZWZhdWx0cy52YWx1ZTtcbiAgICBjb25zdCBzY29wZWQgPSB1bnJlZihvcHRpb25zPy5zY29wZWQpO1xuICAgIGNvbnN0IHJlc2V0ID0gdW5yZWYob3B0aW9ucz8ucmVzZXQpO1xuICAgIGNvbnN0IHJvb3QgPSB1bnJlZihvcHRpb25zPy5yb290KTtcbiAgICBpZiAocHJvdmlkZWREZWZhdWx0cy52YWx1ZSA9PSBudWxsICYmICEoc2NvcGVkIHx8IHJlc2V0IHx8IHJvb3QpKSByZXR1cm4gaW5qZWN0ZWREZWZhdWx0cy52YWx1ZTtcbiAgICBsZXQgcHJvcGVydGllcyA9IG1lcmdlRGVlcChwcm92aWRlZERlZmF1bHRzLnZhbHVlLCB7XG4gICAgICBwcmV2OiBpbmplY3RlZERlZmF1bHRzLnZhbHVlXG4gICAgfSk7XG4gICAgaWYgKHNjb3BlZCkgcmV0dXJuIHByb3BlcnRpZXM7XG4gICAgaWYgKHJlc2V0IHx8IHJvb3QpIHtcbiAgICAgIGNvbnN0IGxlbiA9IE51bWJlcihyZXNldCB8fCBJbmZpbml0eSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBsZW47IGkrKykge1xuICAgICAgICBpZiAoIXByb3BlcnRpZXMgfHwgISgncHJldicgaW4gcHJvcGVydGllcykpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBwcm9wZXJ0aWVzID0gcHJvcGVydGllcy5wcmV2O1xuICAgICAgfVxuICAgICAgaWYgKHByb3BlcnRpZXMgJiYgdHlwZW9mIHJvb3QgPT09ICdzdHJpbmcnICYmIHJvb3QgaW4gcHJvcGVydGllcykge1xuICAgICAgICBwcm9wZXJ0aWVzID0gbWVyZ2VEZWVwKG1lcmdlRGVlcChwcm9wZXJ0aWVzLCB7XG4gICAgICAgICAgcHJldjogcHJvcGVydGllc1xuICAgICAgICB9KSwgcHJvcGVydGllc1tyb290XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydGllcztcbiAgICB9XG4gICAgcmV0dXJuIHByb3BlcnRpZXMucHJldiA/IG1lcmdlRGVlcChwcm9wZXJ0aWVzLnByZXYsIHByb3BlcnRpZXMpIDogcHJvcGVydGllcztcbiAgfSk7XG4gIHByb3ZpZGUoRGVmYXVsdHNTeW1ib2wsIG5ld0RlZmF1bHRzKTtcbiAgcmV0dXJuIG5ld0RlZmF1bHRzO1xufVxuZnVuY3Rpb24gcHJvcElzRGVmaW5lZCh2bm9kZSwgcHJvcCkge1xuICByZXR1cm4gdHlwZW9mIHZub2RlLnByb3BzPy5bcHJvcF0gIT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiB2bm9kZS5wcm9wcz8uW3RvS2ViYWJDYXNlKHByb3ApXSAhPT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnQgZnVuY3Rpb24gaW50ZXJuYWxVc2VEZWZhdWx0cygpIHtcbiAgbGV0IHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgbGV0IG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGRlZmF1bHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBpbmplY3REZWZhdWx0cygpO1xuICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgndXNlRGVmYXVsdHMnKTtcbiAgbmFtZSA9IG5hbWUgPz8gdm0udHlwZS5uYW1lID8/IHZtLnR5cGUuX19uYW1lO1xuICBpZiAoIW5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tWdWV0aWZ5XSBDb3VsZCBub3QgZGV0ZXJtaW5lIGNvbXBvbmVudCBuYW1lJyk7XG4gIH1cbiAgY29uc3QgY29tcG9uZW50RGVmYXVsdHMgPSBjb21wdXRlZCgoKSA9PiBkZWZhdWx0cy52YWx1ZT8uW3Byb3BzLl9hcyA/PyBuYW1lXSk7XG4gIGNvbnN0IF9wcm9wcyA9IG5ldyBQcm94eShwcm9wcywge1xuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGNvbnN0IHByb3BWYWx1ZSA9IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCk7XG4gICAgICBpZiAocHJvcCA9PT0gJ2NsYXNzJyB8fCBwcm9wID09PSAnc3R5bGUnKSB7XG4gICAgICAgIHJldHVybiBbY29tcG9uZW50RGVmYXVsdHMudmFsdWU/Lltwcm9wXSwgcHJvcFZhbHVlXS5maWx0ZXIodiA9PiB2ICE9IG51bGwpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgIXByb3BJc0RlZmluZWQodm0udm5vZGUsIHByb3ApKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnREZWZhdWx0cy52YWx1ZT8uW3Byb3BdID8/IGRlZmF1bHRzLnZhbHVlPy5nbG9iYWw/Lltwcm9wXSA/PyBwcm9wVmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcFZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IF9zdWJjb21wb25lbnREZWZhdWx0cyA9IHNoYWxsb3dSZWYoKTtcbiAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjb21wb25lbnREZWZhdWx0cy52YWx1ZSkge1xuICAgICAgY29uc3Qgc3ViQ29tcG9uZW50cyA9IE9iamVjdC5lbnRyaWVzKGNvbXBvbmVudERlZmF1bHRzLnZhbHVlKS5maWx0ZXIoX3JlZiA9PiB7XG4gICAgICAgIGxldCBba2V5XSA9IF9yZWY7XG4gICAgICAgIHJldHVybiBrZXkuc3RhcnRzV2l0aChrZXlbMF0udG9VcHBlckNhc2UoKSk7XG4gICAgICB9KTtcbiAgICAgIF9zdWJjb21wb25lbnREZWZhdWx0cy52YWx1ZSA9IHN1YkNvbXBvbmVudHMubGVuZ3RoID8gT2JqZWN0LmZyb21FbnRyaWVzKHN1YkNvbXBvbmVudHMpIDogdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBfc3ViY29tcG9uZW50RGVmYXVsdHMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9KTtcbiAgZnVuY3Rpb24gcHJvdmlkZVN1YkRlZmF1bHRzKCkge1xuICAgIGNvbnN0IGluamVjdGVkID0gaW5qZWN0U2VsZihEZWZhdWx0c1N5bWJvbCwgdm0pO1xuICAgIHByb3ZpZGUoRGVmYXVsdHNTeW1ib2wsIGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBfc3ViY29tcG9uZW50RGVmYXVsdHMudmFsdWUgPyBtZXJnZURlZXAoaW5qZWN0ZWQ/LnZhbHVlID8/IHt9LCBfc3ViY29tcG9uZW50RGVmYXVsdHMudmFsdWUpIDogaW5qZWN0ZWQ/LnZhbHVlO1xuICAgIH0pKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHByb3BzOiBfcHJvcHMsXG4gICAgcHJvdmlkZVN1YkRlZmF1bHRzXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlRGVmYXVsdHMoKSB7XG4gIGxldCBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIGxldCBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIGNvbnN0IHtcbiAgICBwcm9wczogX3Byb3BzLFxuICAgIHByb3ZpZGVTdWJEZWZhdWx0c1xuICB9ID0gaW50ZXJuYWxVc2VEZWZhdWx0cyhwcm9wcywgbmFtZSk7XG4gIHByb3ZpZGVTdWJEZWZhdWx0cygpO1xuICByZXR1cm4gX3Byb3BzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdHMubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgaW5qZWN0LCByZWFjdGl2ZSwgc2hhbGxvd1JlZiwgdG9SZWZzLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBtZXJnZURlZXAgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjtcbmltcG9ydCB7IElOX0JST1dTRVIsIFNVUFBPUlRTX1RPVUNIIH0gZnJvbSBcIi4uL3V0aWwvZ2xvYmFscy5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBicmVha3BvaW50cyA9IFsnc20nLCAnbWQnLCAnbGcnLCAneGwnLCAneHhsJ107IC8vIG5vIHhzXG5cbmV4cG9ydCBjb25zdCBEaXNwbGF5U3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTpkaXNwbGF5Jyk7XG5jb25zdCBkZWZhdWx0RGlzcGxheU9wdGlvbnMgPSB7XG4gIG1vYmlsZUJyZWFrcG9pbnQ6ICdsZycsXG4gIHRocmVzaG9sZHM6IHtcbiAgICB4czogMCxcbiAgICBzbTogNjAwLFxuICAgIG1kOiA5NjAsXG4gICAgbGc6IDEyODAsXG4gICAgeGw6IDE5MjAsXG4gICAgeHhsOiAyNTYwXG4gIH1cbn07XG5jb25zdCBwYXJzZURpc3BsYXlPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZGVmYXVsdERpc3BsYXlPcHRpb25zO1xuICByZXR1cm4gbWVyZ2VEZWVwKGRlZmF1bHREaXNwbGF5T3B0aW9ucywgb3B0aW9ucyk7XG59O1xuZnVuY3Rpb24gZ2V0Q2xpZW50V2lkdGgoc3NyKSB7XG4gIHJldHVybiBJTl9CUk9XU0VSICYmICFzc3IgPyB3aW5kb3cuaW5uZXJXaWR0aCA6IHR5cGVvZiBzc3IgPT09ICdvYmplY3QnICYmIHNzci5jbGllbnRXaWR0aCB8fCAwO1xufVxuZnVuY3Rpb24gZ2V0Q2xpZW50SGVpZ2h0KHNzcikge1xuICByZXR1cm4gSU5fQlJPV1NFUiAmJiAhc3NyID8gd2luZG93LmlubmVySGVpZ2h0IDogdHlwZW9mIHNzciA9PT0gJ29iamVjdCcgJiYgc3NyLmNsaWVudEhlaWdodCB8fCAwO1xufVxuZnVuY3Rpb24gZ2V0UGxhdGZvcm0oc3NyKSB7XG4gIGNvbnN0IHVzZXJBZ2VudCA9IElOX0JST1dTRVIgJiYgIXNzciA/IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50IDogJ3Nzcic7XG4gIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgIHJldHVybiBCb29sZWFuKHVzZXJBZ2VudC5tYXRjaChyZWdleHApKTtcbiAgfVxuICBjb25zdCBhbmRyb2lkID0gbWF0Y2goL2FuZHJvaWQvaSk7XG4gIGNvbnN0IGlvcyA9IG1hdGNoKC9pcGhvbmV8aXBhZHxpcG9kL2kpO1xuICBjb25zdCBjb3Jkb3ZhID0gbWF0Y2goL2NvcmRvdmEvaSk7XG4gIGNvbnN0IGVsZWN0cm9uID0gbWF0Y2goL2VsZWN0cm9uL2kpO1xuICBjb25zdCBjaHJvbWUgPSBtYXRjaCgvY2hyb21lL2kpO1xuICBjb25zdCBlZGdlID0gbWF0Y2goL2VkZ2UvaSk7XG4gIGNvbnN0IGZpcmVmb3ggPSBtYXRjaCgvZmlyZWZveC9pKTtcbiAgY29uc3Qgb3BlcmEgPSBtYXRjaCgvb3BlcmEvaSk7XG4gIGNvbnN0IHdpbiA9IG1hdGNoKC93aW4vaSk7XG4gIGNvbnN0IG1hYyA9IG1hdGNoKC9tYWMvaSk7XG4gIGNvbnN0IGxpbnV4ID0gbWF0Y2goL2xpbnV4L2kpO1xuICByZXR1cm4ge1xuICAgIGFuZHJvaWQsXG4gICAgaW9zLFxuICAgIGNvcmRvdmEsXG4gICAgZWxlY3Ryb24sXG4gICAgY2hyb21lLFxuICAgIGVkZ2UsXG4gICAgZmlyZWZveCxcbiAgICBvcGVyYSxcbiAgICB3aW4sXG4gICAgbWFjLFxuICAgIGxpbnV4LFxuICAgIHRvdWNoOiBTVVBQT1JUU19UT1VDSCxcbiAgICBzc3I6IHVzZXJBZ2VudCA9PT0gJ3NzcidcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwbGF5KG9wdGlvbnMsIHNzcikge1xuICBjb25zdCB7XG4gICAgdGhyZXNob2xkcyxcbiAgICBtb2JpbGVCcmVha3BvaW50XG4gIH0gPSBwYXJzZURpc3BsYXlPcHRpb25zKG9wdGlvbnMpO1xuICBjb25zdCBoZWlnaHQgPSBzaGFsbG93UmVmKGdldENsaWVudEhlaWdodChzc3IpKTtcbiAgY29uc3QgcGxhdGZvcm0gPSBzaGFsbG93UmVmKGdldFBsYXRmb3JtKHNzcikpO1xuICBjb25zdCBzdGF0ZSA9IHJlYWN0aXZlKHt9KTtcbiAgY29uc3Qgd2lkdGggPSBzaGFsbG93UmVmKGdldENsaWVudFdpZHRoKHNzcikpO1xuICBmdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICAgIGhlaWdodC52YWx1ZSA9IGdldENsaWVudEhlaWdodCgpO1xuICAgIHdpZHRoLnZhbHVlID0gZ2V0Q2xpZW50V2lkdGgoKTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdXBkYXRlU2l6ZSgpO1xuICAgIHBsYXRmb3JtLnZhbHVlID0gZ2V0UGxhdGZvcm0oKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50c1xuICB3YXRjaEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgeHMgPSB3aWR0aC52YWx1ZSA8IHRocmVzaG9sZHMuc207XG4gICAgY29uc3Qgc20gPSB3aWR0aC52YWx1ZSA8IHRocmVzaG9sZHMubWQgJiYgIXhzO1xuICAgIGNvbnN0IG1kID0gd2lkdGgudmFsdWUgPCB0aHJlc2hvbGRzLmxnICYmICEoc20gfHwgeHMpO1xuICAgIGNvbnN0IGxnID0gd2lkdGgudmFsdWUgPCB0aHJlc2hvbGRzLnhsICYmICEobWQgfHwgc20gfHwgeHMpO1xuICAgIGNvbnN0IHhsID0gd2lkdGgudmFsdWUgPCB0aHJlc2hvbGRzLnh4bCAmJiAhKGxnIHx8IG1kIHx8IHNtIHx8IHhzKTtcbiAgICBjb25zdCB4eGwgPSB3aWR0aC52YWx1ZSA+PSB0aHJlc2hvbGRzLnh4bDtcbiAgICBjb25zdCBuYW1lID0geHMgPyAneHMnIDogc20gPyAnc20nIDogbWQgPyAnbWQnIDogbGcgPyAnbGcnIDogeGwgPyAneGwnIDogJ3h4bCc7XG4gICAgY29uc3QgYnJlYWtwb2ludFZhbHVlID0gdHlwZW9mIG1vYmlsZUJyZWFrcG9pbnQgPT09ICdudW1iZXInID8gbW9iaWxlQnJlYWtwb2ludCA6IHRocmVzaG9sZHNbbW9iaWxlQnJlYWtwb2ludF07XG4gICAgY29uc3QgbW9iaWxlID0gd2lkdGgudmFsdWUgPCBicmVha3BvaW50VmFsdWU7XG4gICAgc3RhdGUueHMgPSB4cztcbiAgICBzdGF0ZS5zbSA9IHNtO1xuICAgIHN0YXRlLm1kID0gbWQ7XG4gICAgc3RhdGUubGcgPSBsZztcbiAgICBzdGF0ZS54bCA9IHhsO1xuICAgIHN0YXRlLnh4bCA9IHh4bDtcbiAgICBzdGF0ZS5zbUFuZFVwID0gIXhzO1xuICAgIHN0YXRlLm1kQW5kVXAgPSAhKHhzIHx8IHNtKTtcbiAgICBzdGF0ZS5sZ0FuZFVwID0gISh4cyB8fCBzbSB8fCBtZCk7XG4gICAgc3RhdGUueGxBbmRVcCA9ICEoeHMgfHwgc20gfHwgbWQgfHwgbGcpO1xuICAgIHN0YXRlLnNtQW5kRG93biA9ICEobWQgfHwgbGcgfHwgeGwgfHwgeHhsKTtcbiAgICBzdGF0ZS5tZEFuZERvd24gPSAhKGxnIHx8IHhsIHx8IHh4bCk7XG4gICAgc3RhdGUubGdBbmREb3duID0gISh4bCB8fCB4eGwpO1xuICAgIHN0YXRlLnhsQW5kRG93biA9ICF4eGw7XG4gICAgc3RhdGUubmFtZSA9IG5hbWU7XG4gICAgc3RhdGUuaGVpZ2h0ID0gaGVpZ2h0LnZhbHVlO1xuICAgIHN0YXRlLndpZHRoID0gd2lkdGgudmFsdWU7XG4gICAgc3RhdGUubW9iaWxlID0gbW9iaWxlO1xuICAgIHN0YXRlLm1vYmlsZUJyZWFrcG9pbnQgPSBtb2JpbGVCcmVha3BvaW50O1xuICAgIHN0YXRlLnBsYXRmb3JtID0gcGxhdGZvcm0udmFsdWU7XG4gICAgc3RhdGUudGhyZXNob2xkcyA9IHRocmVzaG9sZHM7XG4gIH0pO1xuICBpZiAoSU5fQlJPV1NFUikge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGVTaXplLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICAuLi50b1JlZnMoc3RhdGUpLFxuICAgIHVwZGF0ZSxcbiAgICBzc3I6ICEhc3NyXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlRGlzcGxheSgpIHtcbiAgY29uc3QgZGlzcGxheSA9IGluamVjdChEaXNwbGF5U3ltYm9sKTtcbiAgaWYgKCFkaXNwbGF5KSB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIFZ1ZXRpZnkgZGlzcGxheSBpbmplY3Rpb24nKTtcbiAgcmV0dXJuIGRpc3BsYXk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXNwbGF5Lm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgVkNsYXNzSWNvbiB9IGZyb20gXCIuLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBoIH0gZnJvbSAndnVlJztcblxuLy8gVHlwZXNcblxuY29uc3QgYWxpYXNlcyA9IHtcbiAgY29sbGFwc2U6ICdtZGktY2hldnJvbi11cCcsXG4gIGNvbXBsZXRlOiAnbWRpLWNoZWNrJyxcbiAgY2FuY2VsOiAnbWRpLWNsb3NlLWNpcmNsZScsXG4gIGNsb3NlOiAnbWRpLWNsb3NlJyxcbiAgZGVsZXRlOiAnbWRpLWNsb3NlLWNpcmNsZScsXG4gIC8vIGRlbGV0ZSAoZS5nLiB2LWNoaXAgY2xvc2UpXG4gIGNsZWFyOiAnbWRpLWNsb3NlLWNpcmNsZScsXG4gIHN1Y2Nlc3M6ICdtZGktY2hlY2stY2lyY2xlJyxcbiAgaW5mbzogJ21kaS1pbmZvcm1hdGlvbicsXG4gIHdhcm5pbmc6ICdtZGktYWxlcnQtY2lyY2xlJyxcbiAgZXJyb3I6ICdtZGktY2xvc2UtY2lyY2xlJyxcbiAgcHJldjogJ21kaS1jaGV2cm9uLWxlZnQnLFxuICBuZXh0OiAnbWRpLWNoZXZyb24tcmlnaHQnLFxuICBjaGVja2JveE9uOiAnbWRpLWNoZWNrYm94LW1hcmtlZCcsXG4gIGNoZWNrYm94T2ZmOiAnbWRpLWNoZWNrYm94LWJsYW5rLW91dGxpbmUnLFxuICBjaGVja2JveEluZGV0ZXJtaW5hdGU6ICdtZGktbWludXMtYm94JyxcbiAgZGVsaW1pdGVyOiAnbWRpLWNpcmNsZScsXG4gIC8vIGZvciBjYXJvdXNlbFxuICBzb3J0QXNjOiAnbWRpLWFycm93LXVwJyxcbiAgc29ydERlc2M6ICdtZGktYXJyb3ctZG93bicsXG4gIGV4cGFuZDogJ21kaS1jaGV2cm9uLWRvd24nLFxuICBtZW51OiAnbWRpLW1lbnUnLFxuICBzdWJncm91cDogJ21kaS1tZW51LWRvd24nLFxuICBkcm9wZG93bjogJ21kaS1tZW51LWRvd24nLFxuICByYWRpb09uOiAnbWRpLXJhZGlvYm94LW1hcmtlZCcsXG4gIHJhZGlvT2ZmOiAnbWRpLXJhZGlvYm94LWJsYW5rJyxcbiAgZWRpdDogJ21kaS1wZW5jaWwnLFxuICByYXRpbmdFbXB0eTogJ21kaS1zdGFyLW91dGxpbmUnLFxuICByYXRpbmdGdWxsOiAnbWRpLXN0YXInLFxuICByYXRpbmdIYWxmOiAnbWRpLXN0YXItaGFsZi1mdWxsJyxcbiAgbG9hZGluZzogJ21kaS1jYWNoZWQnLFxuICBmaXJzdDogJ21kaS1wYWdlLWZpcnN0JyxcbiAgbGFzdDogJ21kaS1wYWdlLWxhc3QnLFxuICB1bmZvbGQ6ICdtZGktdW5mb2xkLW1vcmUtaG9yaXpvbnRhbCcsXG4gIGZpbGU6ICdtZGktcGFwZXJjbGlwJyxcbiAgcGx1czogJ21kaS1wbHVzJyxcbiAgbWludXM6ICdtZGktbWludXMnLFxuICBjYWxlbmRhcjogJ21kaS1jYWxlbmRhcidcbn07XG5jb25zdCBtZGkgPSB7XG4gIC8vIE5vdCB1c2luZyBtZXJnZVByb3BzIGhlcmUsIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBtZXJnZSBwcm9wcyBieSBkZWZhdWx0ICg/KVxuICBjb21wb25lbnQ6IHByb3BzID0+IGgoVkNsYXNzSWNvbiwge1xuICAgIC4uLnByb3BzLFxuICAgIGNsYXNzOiAnbWRpJ1xuICB9KVxufTtcbmV4cG9ydCB7IGFsaWFzZXMsIG1kaSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWRpLm1qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBJY29uc1xuaW1wb3J0IHsgYWxpYXNlcywgbWRpIH0gZnJvbSBcIi4uL2ljb25zZXRzL21kaS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaW5qZWN0LCB1bnJlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGdlbmVyaWNDb21wb25lbnQsIG1lcmdlRGVlcCwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgSWNvblZhbHVlID0gW1N0cmluZywgRnVuY3Rpb24sIE9iamVjdCwgQXJyYXldO1xuZXhwb3J0IGNvbnN0IEljb25TeW1ib2wgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5Omljb25zJyk7XG5leHBvcnQgY29uc3QgbWFrZUljb25Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWVcbiAgfSxcbiAgLy8gQ291bGQgbm90IHJlbW92ZSB0aGlzIGFuZCB1c2UgbWFrZVRhZ1Byb3BzLCB0eXBlcyBjb21wbGFpbmVkIGJlY2F1c2UgaXQgaXMgbm90IHJlcXVpcmVkXG4gIHRhZzoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZVxuICB9XG59LCAnaWNvbicpO1xuZXhwb3J0IGNvbnN0IFZDb21wb25lbnRJY29uID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZDb21wb25lbnRJY29uJyxcbiAgcHJvcHM6IG1ha2VJY29uUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgSWNvbiA9IHByb3BzLmljb247XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywgbnVsbCwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbcHJvcHMuaWNvbiA/IF9jcmVhdGVWTm9kZShJY29uLCBudWxsLCBudWxsKSA6IHNsb3RzLmRlZmF1bHQ/LigpXVxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxufSk7XG5leHBvcnQgY29uc3QgVlN2Z0ljb24gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnVlN2Z0ljb24nLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczogbWFrZUljb25Qcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZjIpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnNcbiAgICB9ID0gX3JlZjI7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCBfbWVyZ2VQcm9wcyhhdHRycywge1xuICAgICAgICBcInN0eWxlXCI6IG51bGxcbiAgICAgIH0pLCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtfY3JlYXRlVk5vZGUoXCJzdmdcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWljb25fX3N2Z1wiLFxuICAgICAgICAgIFwieG1sbnNcIjogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgICAgICAgIFwidmlld0JveFwiOiBcIjAgMCAyNCAyNFwiLFxuICAgICAgICAgIFwicm9sZVwiOiBcImltZ1wiLFxuICAgICAgICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgICAgICAgfSwgW0FycmF5LmlzQXJyYXkocHJvcHMuaWNvbikgPyBwcm9wcy5pY29uLm1hcChwYXRoID0+IEFycmF5LmlzQXJyYXkocGF0aCkgPyBfY3JlYXRlVk5vZGUoXCJwYXRoXCIsIHtcbiAgICAgICAgICBcImRcIjogcGF0aFswXSxcbiAgICAgICAgICBcImZpbGwtb3BhY2l0eVwiOiBwYXRoWzFdXG4gICAgICAgIH0sIG51bGwpIDogX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICAgICAgXCJkXCI6IHBhdGhcbiAgICAgICAgfSwgbnVsbCkpIDogX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICAgICAgXCJkXCI6IHByb3BzLmljb25cbiAgICAgICAgfSwgbnVsbCldKV1cbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbn0pO1xuZXhwb3J0IGNvbnN0IFZMaWdhdHVyZUljb24gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnVkxpZ2F0dXJlSWNvbicsXG4gIHByb3BzOiBtYWtlSWNvblByb3BzKCksXG4gIHNldHVwKHByb3BzKSB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCBudWxsLCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtwcm9wcy5pY29uXVxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxufSk7XG5leHBvcnQgY29uc3QgVkNsYXNzSWNvbiA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdWQ2xhc3NJY29uJyxcbiAgcHJvcHM6IG1ha2VJY29uUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMpIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBwcm9wcy5pY29uXG4gICAgICB9LCBudWxsKTtcbiAgICB9O1xuICB9XG59KTtcbmV4cG9ydCBjb25zdCBkZWZhdWx0U2V0cyA9IHtcbiAgc3ZnOiB7XG4gICAgY29tcG9uZW50OiBWU3ZnSWNvblxuICB9LFxuICBjbGFzczoge1xuICAgIGNvbXBvbmVudDogVkNsYXNzSWNvblxuICB9XG59O1xuXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUljb25zKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG1lcmdlRGVlcCh7XG4gICAgZGVmYXVsdFNldDogJ21kaScsXG4gICAgc2V0czoge1xuICAgICAgLi4uZGVmYXVsdFNldHMsXG4gICAgICBtZGlcbiAgICB9LFxuICAgIGFsaWFzZXM6IHtcbiAgICAgIC4uLmFsaWFzZXMsXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgICB2dWV0aWZ5OiBbJ004LjIyNDEgMTQuMjAwOUwxMiAyMUwyMiAzSDE0LjQ0NTlMOC4yMjQxIDE0LjIwMDlaJywgWydNNy4yNjMwMyAxMi40NzMzTDcuMDAxMTMgMTJMMiAzSDEyLjUyNjFDMTIuNTI2MSAzIDEyLjUyNjEgMyAxMi41MjYxIDNMNy4yNjMwMyAxMi40NzMzWicsIDAuNl1dLFxuICAgICAgJ3Z1ZXRpZnktb3V0bGluZSc6ICdzdmc6TTcuMjYgMTIuNDcgMTIuNTMgM0gyTDcuMjYgMTIuNDdaTTE0LjQ1IDMgOC4yMiAxNC4yIDEyIDIxIDIyIDNIMTQuNDVaTTE4LjYgNSAxMiAxNi44OCAxMC41MSAxNC4yIDE1LjYyIDVaTTcuMjYgOC4zNSA1LjQgNUg5LjEzTDcuMjYgOC4zNVonXG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cbiAgICB9XG4gIH0sIG9wdGlvbnMpO1xufVxuZXhwb3J0IGNvbnN0IHVzZUljb24gPSBwcm9wcyA9PiB7XG4gIGNvbnN0IGljb25zID0gaW5qZWN0KEljb25TeW1ib2wpO1xuICBpZiAoIWljb25zKSB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgVnVldGlmeSBJY29ucyBwcm92aWRlIScpO1xuICBjb25zdCBpY29uRGF0YSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBpY29uQWxpYXMgPSB1bnJlZihwcm9wcyk7XG4gICAgaWYgKCFpY29uQWxpYXMpIHJldHVybiB7XG4gICAgICBjb21wb25lbnQ6IFZDb21wb25lbnRJY29uXG4gICAgfTtcbiAgICBsZXQgaWNvbiA9IGljb25BbGlhcztcbiAgICBpZiAodHlwZW9mIGljb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICBpY29uID0gaWNvbi50cmltKCk7XG4gICAgICBpZiAoaWNvbi5zdGFydHNXaXRoKCckJykpIHtcbiAgICAgICAgaWNvbiA9IGljb25zLmFsaWFzZXM/LltpY29uLnNsaWNlKDEpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpY29uKSB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIGFsaWFzZWQgaWNvbiBcIiR7aWNvbkFsaWFzfVwiYCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaWNvbikpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbXBvbmVudDogVlN2Z0ljb24sXG4gICAgICAgIGljb25cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaWNvbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbXBvbmVudDogVkNvbXBvbmVudEljb24sXG4gICAgICAgIGljb25cbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGljb25TZXROYW1lID0gT2JqZWN0LmtleXMoaWNvbnMuc2V0cykuZmluZChzZXROYW1lID0+IHR5cGVvZiBpY29uID09PSAnc3RyaW5nJyAmJiBpY29uLnN0YXJ0c1dpdGgoYCR7c2V0TmFtZX06YCkpO1xuICAgIGNvbnN0IGljb25OYW1lID0gaWNvblNldE5hbWUgPyBpY29uLnNsaWNlKGljb25TZXROYW1lLmxlbmd0aCArIDEpIDogaWNvbjtcbiAgICBjb25zdCBpY29uU2V0ID0gaWNvbnMuc2V0c1tpY29uU2V0TmFtZSA/PyBpY29ucy5kZWZhdWx0U2V0XTtcbiAgICByZXR1cm4ge1xuICAgICAgY29tcG9uZW50OiBpY29uU2V0LmNvbXBvbmVudCxcbiAgICAgIGljb246IGljb25OYW1lXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgaWNvbkRhdGFcbiAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pY29ucy5tanMubWFwIiwiZXhwb3J0IGRlZmF1bHQge1xuICBiYWRnZTogJ0JhZGdlJyxcbiAgb3BlbjogJ09wZW4nLFxuICBjbG9zZTogJ0Nsb3NlJyxcbiAgZGF0YUl0ZXJhdG9yOiB7XG4gICAgbm9SZXN1bHRzVGV4dDogJ05vIG1hdGNoaW5nIHJlY29yZHMgZm91bmQnLFxuICAgIGxvYWRpbmdUZXh0OiAnTG9hZGluZyBpdGVtcy4uLidcbiAgfSxcbiAgZGF0YVRhYmxlOiB7XG4gICAgaXRlbXNQZXJQYWdlVGV4dDogJ1Jvd3MgcGVyIHBhZ2U6JyxcbiAgICBhcmlhTGFiZWw6IHtcbiAgICAgIHNvcnREZXNjZW5kaW5nOiAnU29ydGVkIGRlc2NlbmRpbmcuJyxcbiAgICAgIHNvcnRBc2NlbmRpbmc6ICdTb3J0ZWQgYXNjZW5kaW5nLicsXG4gICAgICBzb3J0Tm9uZTogJ05vdCBzb3J0ZWQuJyxcbiAgICAgIGFjdGl2YXRlTm9uZTogJ0FjdGl2YXRlIHRvIHJlbW92ZSBzb3J0aW5nLicsXG4gICAgICBhY3RpdmF0ZURlc2NlbmRpbmc6ICdBY3RpdmF0ZSB0byBzb3J0IGRlc2NlbmRpbmcuJyxcbiAgICAgIGFjdGl2YXRlQXNjZW5kaW5nOiAnQWN0aXZhdGUgdG8gc29ydCBhc2NlbmRpbmcuJ1xuICAgIH0sXG4gICAgc29ydEJ5OiAnU29ydCBieSdcbiAgfSxcbiAgZGF0YUZvb3Rlcjoge1xuICAgIGl0ZW1zUGVyUGFnZVRleHQ6ICdJdGVtcyBwZXIgcGFnZTonLFxuICAgIGl0ZW1zUGVyUGFnZUFsbDogJ0FsbCcsXG4gICAgbmV4dFBhZ2U6ICdOZXh0IHBhZ2UnLFxuICAgIHByZXZQYWdlOiAnUHJldmlvdXMgcGFnZScsXG4gICAgZmlyc3RQYWdlOiAnRmlyc3QgcGFnZScsXG4gICAgbGFzdFBhZ2U6ICdMYXN0IHBhZ2UnLFxuICAgIHBhZ2VUZXh0OiAnezB9LXsxfSBvZiB7Mn0nXG4gIH0sXG4gIGRhdGVSYW5nZUlucHV0OiB7XG4gICAgZGl2aWRlcjogJ3RvJ1xuICB9LFxuICBkYXRlUGlja2VyOiB7XG4gICAgb2s6ICdPSycsXG4gICAgY2FuY2VsOiAnQ2FuY2VsJyxcbiAgICByYW5nZToge1xuICAgICAgdGl0bGU6ICdTZWxlY3QgZGF0ZXMnLFxuICAgICAgaGVhZGVyOiAnRW50ZXIgZGF0ZXMnXG4gICAgfSxcbiAgICB0aXRsZTogJ1NlbGVjdCBkYXRlJyxcbiAgICBoZWFkZXI6ICdFbnRlciBkYXRlJyxcbiAgICBpbnB1dDoge1xuICAgICAgcGxhY2Vob2xkZXI6ICdFbnRlciBkYXRlJ1xuICAgIH1cbiAgfSxcbiAgbm9EYXRhVGV4dDogJ05vIGRhdGEgYXZhaWxhYmxlJyxcbiAgY2Fyb3VzZWw6IHtcbiAgICBwcmV2OiAnUHJldmlvdXMgdmlzdWFsJyxcbiAgICBuZXh0OiAnTmV4dCB2aXN1YWwnLFxuICAgIGFyaWFMYWJlbDoge1xuICAgICAgZGVsaW1pdGVyOiAnQ2Fyb3VzZWwgc2xpZGUgezB9IG9mIHsxfSdcbiAgICB9XG4gIH0sXG4gIGNhbGVuZGFyOiB7XG4gICAgbW9yZUV2ZW50czogJ3swfSBtb3JlJ1xuICB9LFxuICBpbnB1dDoge1xuICAgIGNsZWFyOiAnQ2xlYXIgezB9JyxcbiAgICBwcmVwZW5kQWN0aW9uOiAnezB9IHByZXBlbmRlZCBhY3Rpb24nLFxuICAgIGFwcGVuZEFjdGlvbjogJ3swfSBhcHBlbmRlZCBhY3Rpb24nLFxuICAgIG90cDogJ1BsZWFzZSBlbnRlciBPVFAgY2hhcmFjdGVyIHswfSdcbiAgfSxcbiAgZmlsZUlucHV0OiB7XG4gICAgY291bnRlcjogJ3swfSBmaWxlcycsXG4gICAgY291bnRlclNpemU6ICd7MH0gZmlsZXMgKHsxfSBpbiB0b3RhbCknXG4gIH0sXG4gIHRpbWVQaWNrZXI6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJ1xuICB9LFxuICBwYWdpbmF0aW9uOiB7XG4gICAgYXJpYUxhYmVsOiB7XG4gICAgICByb290OiAnUGFnaW5hdGlvbiBOYXZpZ2F0aW9uJyxcbiAgICAgIG5leHQ6ICdOZXh0IHBhZ2UnLFxuICAgICAgcHJldmlvdXM6ICdQcmV2aW91cyBwYWdlJyxcbiAgICAgIHBhZ2U6ICdHbyB0byBwYWdlIHswfScsXG4gICAgICBjdXJyZW50UGFnZTogJ1BhZ2UgezB9LCBDdXJyZW50IHBhZ2UnLFxuICAgICAgZmlyc3Q6ICdGaXJzdCBwYWdlJyxcbiAgICAgIGxhc3Q6ICdMYXN0IHBhZ2UnXG4gICAgfVxuICB9LFxuICBzdGVwcGVyOiB7XG4gICAgbmV4dDogJ05leHQnLFxuICAgIHByZXY6ICdQcmV2aW91cydcbiAgfSxcbiAgcmF0aW5nOiB7XG4gICAgYXJpYUxhYmVsOiB7XG4gICAgICBpdGVtOiAnUmF0aW5nIHswfSBvZiB7MX0nXG4gICAgfVxuICB9LFxuICBsb2FkaW5nOiAnTG9hZGluZy4uLicsXG4gIGluZmluaXRlU2Nyb2xsOiB7XG4gICAgbG9hZE1vcmU6ICdMb2FkIG1vcmUnLFxuICAgIGVtcHR5OiAnTm8gbW9yZSdcbiAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuLm1qcy5tYXAiLCJleHBvcnQgeyBkZWZhdWx0IGFzIGFmIH0gZnJvbSBcIi4vYWYubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFyIH0gZnJvbSBcIi4vYXIubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGJnIH0gZnJvbSBcIi4vYmcubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNhIH0gZnJvbSBcIi4vY2EubWpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNrYiB9IGZyb20gXCIuL2NrYi5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY3MgfSBmcm9tIFwiLi9jcy5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGEgfSBmcm9tIFwiLi9kYS5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGUgfSBmcm9tIFwiLi9kZS5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZWwgfSBmcm9tIFwiLi9lbC5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZW4gfSBmcm9tIFwiLi9lbi5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZXMgfSBmcm9tIFwiLi9lcy5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZXQgfSBmcm9tIFwiLi9ldC5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmEgfSBmcm9tIFwiLi9mYS5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmkgfSBmcm9tIFwiLi9maS5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZnIgfSBmcm9tIFwiLi9mci5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaHIgfSBmcm9tIFwiLi9oci5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaHUgfSBmcm9tIFwiLi9odS5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaGUgfSBmcm9tIFwiLi9oZS5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaWQgfSBmcm9tIFwiLi9pZC5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXQgfSBmcm9tIFwiLi9pdC5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgamEgfSBmcm9tIFwiLi9qYS5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMga28gfSBmcm9tIFwiLi9rby5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbHYgfSBmcm9tIFwiLi9sdi5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbHQgfSBmcm9tIFwiLi9sdC5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbmwgfSBmcm9tIFwiLi9ubC5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbm8gfSBmcm9tIFwiLi9uby5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGwgfSBmcm9tIFwiLi9wbC5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcHQgfSBmcm9tIFwiLi9wdC5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcm8gfSBmcm9tIFwiLi9yby5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcnUgfSBmcm9tIFwiLi9ydS5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2sgfSBmcm9tIFwiLi9zay5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2wgfSBmcm9tIFwiLi9zbC5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3JDeXJsIH0gZnJvbSBcIi4vc3ItQ3lybC5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3JMYXRuIH0gZnJvbSBcIi4vc3ItTGF0bi5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3YgfSBmcm9tIFwiLi9zdi5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGggfSBmcm9tIFwiLi90aC5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdHIgfSBmcm9tIFwiLi90ci5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYXogfSBmcm9tIFwiLi9hei5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdWsgfSBmcm9tIFwiLi91ay5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmkgfSBmcm9tIFwiLi92aS5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgemhIYW5zIH0gZnJvbSBcIi4vemgtSGFucy5tanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgemhIYW50IH0gZnJvbSBcIi4vemgtSGFudC5tanNcIjtcbmV4cG9ydCBjb25zdCBkZWZhdWx0UnRsID0ge1xuICBhZjogZmFsc2UsXG4gIGFyOiB0cnVlLFxuICBiZzogZmFsc2UsXG4gIGNhOiBmYWxzZSxcbiAgY2tiOiBmYWxzZSxcbiAgY3M6IGZhbHNlLFxuICBkZTogZmFsc2UsXG4gIGVsOiBmYWxzZSxcbiAgZW46IGZhbHNlLFxuICBlczogZmFsc2UsXG4gIGV0OiBmYWxzZSxcbiAgZmE6IHRydWUsXG4gIGZpOiBmYWxzZSxcbiAgZnI6IGZhbHNlLFxuICBocjogZmFsc2UsXG4gIGh1OiBmYWxzZSxcbiAgaGU6IHRydWUsXG4gIGlkOiBmYWxzZSxcbiAgaXQ6IGZhbHNlLFxuICBqYTogZmFsc2UsXG4gIGtvOiBmYWxzZSxcbiAgbHY6IGZhbHNlLFxuICBsdDogZmFsc2UsXG4gIG5sOiBmYWxzZSxcbiAgbm86IGZhbHNlLFxuICBwbDogZmFsc2UsXG4gIHB0OiBmYWxzZSxcbiAgcm86IGZhbHNlLFxuICBydTogZmFsc2UsXG4gIHNrOiBmYWxzZSxcbiAgc2w6IGZhbHNlLFxuICBzckN5cmw6IGZhbHNlLFxuICBzckxhdG46IGZhbHNlLFxuICBzdjogZmFsc2UsXG4gIHRoOiBmYWxzZSxcbiAgdHI6IGZhbHNlLFxuICBhejogZmFsc2UsXG4gIHVrOiBmYWxzZSxcbiAgdmk6IGZhbHNlLFxuICB6aEhhbnM6IGZhbHNlLFxuICB6aEhhbnQ6IGZhbHNlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZWZmZWN0U2NvcGUsIG9uU2NvcGVEaXNwb3NlLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5cbi8vIFR5cGVzXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VUb2dnbGVTY29wZShzb3VyY2UsIGZuKSB7XG4gIGxldCBzY29wZTtcbiAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgc2NvcGUgPSBlZmZlY3RTY29wZSgpO1xuICAgIHNjb3BlLnJ1bigoKSA9PiBmbi5sZW5ndGggPyBmbigoKSA9PiB7XG4gICAgICBzY29wZT8uc3RvcCgpO1xuICAgICAgc3RhcnQoKTtcbiAgICB9KSA6IGZuKCkpO1xuICB9XG4gIHdhdGNoKHNvdXJjZSwgYWN0aXZlID0+IHtcbiAgICBpZiAoYWN0aXZlICYmICFzY29wZSkge1xuICAgICAgc3RhcnQoKTtcbiAgICB9IGVsc2UgaWYgKCFhY3RpdmUpIHtcbiAgICAgIHNjb3BlPy5zdG9wKCk7XG4gICAgICBzY29wZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sIHtcbiAgICBpbW1lZGlhdGU6IHRydWVcbiAgfSk7XG4gIG9uU2NvcGVEaXNwb3NlKCgpID0+IHtcbiAgICBzY29wZT8uc3RvcCgpO1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvZ2dsZVNjb3BlLm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlVG9nZ2xlU2NvcGUgfSBmcm9tIFwiLi90b2dnbGVTY29wZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgcmVmLCB0b1Jhdywgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlLCB0b0tlYmFiQ2FzZSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuLy8gQ29tcG9zYWJsZXNcbmV4cG9ydCBmdW5jdGlvbiB1c2VQcm94aWVkTW9kZWwocHJvcHMsIHByb3AsIGRlZmF1bHRWYWx1ZSkge1xuICBsZXQgdHJhbnNmb3JtSW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHYgPT4gdjtcbiAgbGV0IHRyYW5zZm9ybU91dCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogdiA9PiB2O1xuICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgndXNlUHJveGllZE1vZGVsJyk7XG4gIGNvbnN0IGludGVybmFsID0gcmVmKHByb3BzW3Byb3BdICE9PSB1bmRlZmluZWQgPyBwcm9wc1twcm9wXSA6IGRlZmF1bHRWYWx1ZSk7XG4gIGNvbnN0IGtlYmFiUHJvcCA9IHRvS2ViYWJDYXNlKHByb3ApO1xuICBjb25zdCBjaGVja0tlYmFiID0ga2ViYWJQcm9wICE9PSBwcm9wO1xuICBjb25zdCBpc0NvbnRyb2xsZWQgPSBjaGVja0tlYmFiID8gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHZvaWQgcHJvcHNbcHJvcF07XG4gICAgcmV0dXJuICEhKCh2bS52bm9kZS5wcm9wcz8uaGFzT3duUHJvcGVydHkocHJvcCkgfHwgdm0udm5vZGUucHJvcHM/Lmhhc093blByb3BlcnR5KGtlYmFiUHJvcCkpICYmICh2bS52bm9kZS5wcm9wcz8uaGFzT3duUHJvcGVydHkoYG9uVXBkYXRlOiR7cHJvcH1gKSB8fCB2bS52bm9kZS5wcm9wcz8uaGFzT3duUHJvcGVydHkoYG9uVXBkYXRlOiR7a2ViYWJQcm9wfWApKSk7XG4gIH0pIDogY29tcHV0ZWQoKCkgPT4ge1xuICAgIHZvaWQgcHJvcHNbcHJvcF07XG4gICAgcmV0dXJuICEhKHZtLnZub2RlLnByb3BzPy5oYXNPd25Qcm9wZXJ0eShwcm9wKSAmJiB2bS52bm9kZS5wcm9wcz8uaGFzT3duUHJvcGVydHkoYG9uVXBkYXRlOiR7cHJvcH1gKSk7XG4gIH0pO1xuICB1c2VUb2dnbGVTY29wZSgoKSA9PiAhaXNDb250cm9sbGVkLnZhbHVlLCAoKSA9PiB7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHNbcHJvcF0sIHZhbCA9PiB7XG4gICAgICBpbnRlcm5hbC52YWx1ZSA9IHZhbDtcbiAgICB9KTtcbiAgfSk7XG4gIGNvbnN0IG1vZGVsID0gY29tcHV0ZWQoe1xuICAgIGdldCgpIHtcbiAgICAgIGNvbnN0IGV4dGVybmFsVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1Jbihpc0NvbnRyb2xsZWQudmFsdWUgPyBleHRlcm5hbFZhbHVlIDogaW50ZXJuYWwudmFsdWUpO1xuICAgIH0sXG4gICAgc2V0KGludGVybmFsVmFsdWUpIHtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdHJhbnNmb3JtT3V0KGludGVybmFsVmFsdWUpO1xuICAgICAgY29uc3QgdmFsdWUgPSB0b1Jhdyhpc0NvbnRyb2xsZWQudmFsdWUgPyBwcm9wc1twcm9wXSA6IGludGVybmFsLnZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbmV3VmFsdWUgfHwgdHJhbnNmb3JtSW4odmFsdWUpID09PSBpbnRlcm5hbFZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGludGVybmFsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICB2bT8uZW1pdChgdXBkYXRlOiR7cHJvcH1gLCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZGVsLCAnZXh0ZXJuYWxWYWx1ZScsIHtcbiAgICBnZXQ6ICgpID0+IGlzQ29udHJvbGxlZC52YWx1ZSA/IHByb3BzW3Byb3BdIDogaW50ZXJuYWwudmFsdWVcbiAgfSk7XG4gIHJldHVybiBtb2RlbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3hpZWRNb2RlbC5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgcmVmLCBzaGFsbG93UmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb25zb2xlRXJyb3IsIGNvbnNvbGVXYXJuLCBnZXRPYmplY3RWYWx1ZUJ5UGF0aCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBMb2NhbGVzXG5pbXBvcnQgZW4gZnJvbSBcIi4uL2VuLm1qc1wiOyAvLyBUeXBlc1xuY29uc3QgTEFOR19QUkVGSVggPSAnJHZ1ZXRpZnkuJztcbmNvbnN0IHJlcGxhY2UgPSAoc3RyLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHsoXFxkKylcXH0vZywgKG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBTdHJpbmcocGFyYW1zWytpbmRleF0pO1xuICB9KTtcbn07XG5jb25zdCBjcmVhdGVUcmFuc2xhdGVGdW5jdGlvbiA9IChjdXJyZW50LCBmYWxsYmFjaywgbWVzc2FnZXMpID0+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGFyYW1zID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHBhcmFtc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIGlmICgha2V5LnN0YXJ0c1dpdGgoTEFOR19QUkVGSVgpKSB7XG4gICAgICByZXR1cm4gcmVwbGFjZShrZXksIHBhcmFtcyk7XG4gICAgfVxuICAgIGNvbnN0IHNob3J0S2V5ID0ga2V5LnJlcGxhY2UoTEFOR19QUkVGSVgsICcnKTtcbiAgICBjb25zdCBjdXJyZW50TG9jYWxlID0gY3VycmVudC52YWx1ZSAmJiBtZXNzYWdlcy52YWx1ZVtjdXJyZW50LnZhbHVlXTtcbiAgICBjb25zdCBmYWxsYmFja0xvY2FsZSA9IGZhbGxiYWNrLnZhbHVlICYmIG1lc3NhZ2VzLnZhbHVlW2ZhbGxiYWNrLnZhbHVlXTtcbiAgICBsZXQgc3RyID0gZ2V0T2JqZWN0VmFsdWVCeVBhdGgoY3VycmVudExvY2FsZSwgc2hvcnRLZXksIG51bGwpO1xuICAgIGlmICghc3RyKSB7XG4gICAgICBjb25zb2xlV2FybihgVHJhbnNsYXRpb24ga2V5IFwiJHtrZXl9XCIgbm90IGZvdW5kIGluIFwiJHtjdXJyZW50LnZhbHVlfVwiLCB0cnlpbmcgZmFsbGJhY2sgbG9jYWxlYCk7XG4gICAgICBzdHIgPSBnZXRPYmplY3RWYWx1ZUJ5UGF0aChmYWxsYmFja0xvY2FsZSwgc2hvcnRLZXksIG51bGwpO1xuICAgIH1cbiAgICBpZiAoIXN0cikge1xuICAgICAgY29uc29sZUVycm9yKGBUcmFuc2xhdGlvbiBrZXkgXCIke2tleX1cIiBub3QgZm91bmQgaW4gZmFsbGJhY2tgKTtcbiAgICAgIHN0ciA9IGtleTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zb2xlRXJyb3IoYFRyYW5zbGF0aW9uIGtleSBcIiR7a2V5fVwiIGhhcyBhIG5vbi1zdHJpbmcgdmFsdWVgKTtcbiAgICAgIHN0ciA9IGtleTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcGxhY2Uoc3RyLCBwYXJhbXMpO1xuICB9O1xufTtcbmZ1bmN0aW9uIGNyZWF0ZU51bWJlckZ1bmN0aW9uKGN1cnJlbnQsIGZhbGxiYWNrKSB7XG4gIHJldHVybiAodmFsdWUsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBudW1iZXJGb3JtYXQgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQoW2N1cnJlbnQudmFsdWUsIGZhbGxiYWNrLnZhbHVlXSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG51bWJlckZvcm1hdC5mb3JtYXQodmFsdWUpO1xuICB9O1xufVxuZnVuY3Rpb24gdXNlUHJvdmlkZWQocHJvcHMsIHByb3AsIHByb3ZpZGVkKSB7XG4gIGNvbnN0IGludGVybmFsID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCBwcm9wLCBwcm9wc1twcm9wXSA/PyBwcm92aWRlZC52YWx1ZSk7XG5cbiAgLy8gVE9ETzogUmVtb3ZlIHdoZW4gZGVmYXVsdFZhbHVlIHdvcmtzXG4gIGludGVybmFsLnZhbHVlID0gcHJvcHNbcHJvcF0gPz8gcHJvdmlkZWQudmFsdWU7XG4gIHdhdGNoKHByb3ZpZGVkLCB2ID0+IHtcbiAgICBpZiAocHJvcHNbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgaW50ZXJuYWwudmFsdWUgPSBwcm92aWRlZC52YWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaW50ZXJuYWw7XG59XG5mdW5jdGlvbiBjcmVhdGVQcm92aWRlRnVuY3Rpb24oc3RhdGUpIHtcbiAgcmV0dXJuIHByb3BzID0+IHtcbiAgICBjb25zdCBjdXJyZW50ID0gdXNlUHJvdmlkZWQocHJvcHMsICdsb2NhbGUnLCBzdGF0ZS5jdXJyZW50KTtcbiAgICBjb25zdCBmYWxsYmFjayA9IHVzZVByb3ZpZGVkKHByb3BzLCAnZmFsbGJhY2snLCBzdGF0ZS5mYWxsYmFjayk7XG4gICAgY29uc3QgbWVzc2FnZXMgPSB1c2VQcm92aWRlZChwcm9wcywgJ21lc3NhZ2VzJywgc3RhdGUubWVzc2FnZXMpO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAndnVldGlmeScsXG4gICAgICBjdXJyZW50LFxuICAgICAgZmFsbGJhY2ssXG4gICAgICBtZXNzYWdlcyxcbiAgICAgIHQ6IGNyZWF0ZVRyYW5zbGF0ZUZ1bmN0aW9uKGN1cnJlbnQsIGZhbGxiYWNrLCBtZXNzYWdlcyksXG4gICAgICBuOiBjcmVhdGVOdW1iZXJGdW5jdGlvbihjdXJyZW50LCBmYWxsYmFjayksXG4gICAgICBwcm92aWRlOiBjcmVhdGVQcm92aWRlRnVuY3Rpb24oe1xuICAgICAgICBjdXJyZW50LFxuICAgICAgICBmYWxsYmFjayxcbiAgICAgICAgbWVzc2FnZXNcbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWdWV0aWZ5QWRhcHRlcihvcHRpb25zKSB7XG4gIGNvbnN0IGN1cnJlbnQgPSBzaGFsbG93UmVmKG9wdGlvbnM/LmxvY2FsZSA/PyAnZW4nKTtcbiAgY29uc3QgZmFsbGJhY2sgPSBzaGFsbG93UmVmKG9wdGlvbnM/LmZhbGxiYWNrID8/ICdlbicpO1xuICBjb25zdCBtZXNzYWdlcyA9IHJlZih7XG4gICAgZW4sXG4gICAgLi4ub3B0aW9ucz8ubWVzc2FnZXNcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3Z1ZXRpZnknLFxuICAgIGN1cnJlbnQsXG4gICAgZmFsbGJhY2ssXG4gICAgbWVzc2FnZXMsXG4gICAgdDogY3JlYXRlVHJhbnNsYXRlRnVuY3Rpb24oY3VycmVudCwgZmFsbGJhY2ssIG1lc3NhZ2VzKSxcbiAgICBuOiBjcmVhdGVOdW1iZXJGdW5jdGlvbihjdXJyZW50LCBmYWxsYmFjayksXG4gICAgcHJvdmlkZTogY3JlYXRlUHJvdmlkZUZ1bmN0aW9uKHtcbiAgICAgIGN1cnJlbnQsXG4gICAgICBmYWxsYmFjayxcbiAgICAgIG1lc3NhZ2VzXG4gICAgfSlcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZ1ZXRpZnkubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCwgcHJvdmlkZSwgcmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlZmF1bHRSdGwgfSBmcm9tIFwiLi4vbG9jYWxlL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgY3JlYXRlVnVldGlmeUFkYXB0ZXIgfSBmcm9tIFwiLi4vbG9jYWxlL2FkYXB0ZXJzL3Z1ZXRpZnkubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgTG9jYWxlU3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTpsb2NhbGUnKTtcbmZ1bmN0aW9uIGlzTG9jYWxlSW5zdGFuY2Uob2JqKSB7XG4gIHJldHVybiBvYmoubmFtZSAhPSBudWxsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxvY2FsZShvcHRpb25zKSB7XG4gIGNvbnN0IGkxOG4gPSBvcHRpb25zPy5hZGFwdGVyICYmIGlzTG9jYWxlSW5zdGFuY2Uob3B0aW9ucz8uYWRhcHRlcikgPyBvcHRpb25zPy5hZGFwdGVyIDogY3JlYXRlVnVldGlmeUFkYXB0ZXIob3B0aW9ucyk7XG4gIGNvbnN0IHJ0bCA9IGNyZWF0ZVJ0bChpMThuLCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5pMThuLFxuICAgIC4uLnJ0bFxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZUxvY2FsZSgpIHtcbiAgY29uc3QgbG9jYWxlID0gaW5qZWN0KExvY2FsZVN5bWJvbCk7XG4gIGlmICghbG9jYWxlKSB0aHJvdyBuZXcgRXJyb3IoJ1tWdWV0aWZ5XSBDb3VsZCBub3QgZmluZCBpbmplY3RlZCBsb2NhbGUgaW5zdGFuY2UnKTtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlTG9jYWxlKHByb3BzKSB7XG4gIGNvbnN0IGxvY2FsZSA9IGluamVjdChMb2NhbGVTeW1ib2wpO1xuICBpZiAoIWxvY2FsZSkgdGhyb3cgbmV3IEVycm9yKCdbVnVldGlmeV0gQ291bGQgbm90IGZpbmQgaW5qZWN0ZWQgbG9jYWxlIGluc3RhbmNlJyk7XG4gIGNvbnN0IGkxOG4gPSBsb2NhbGUucHJvdmlkZShwcm9wcyk7XG4gIGNvbnN0IHJ0bCA9IHByb3ZpZGVSdGwoaTE4biwgbG9jYWxlLnJ0bCwgcHJvcHMpO1xuICBjb25zdCBkYXRhID0ge1xuICAgIC4uLmkxOG4sXG4gICAgLi4ucnRsXG4gIH07XG4gIHByb3ZpZGUoTG9jYWxlU3ltYm9sLCBkYXRhKTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8vIFJUTFxuXG5leHBvcnQgY29uc3QgUnRsU3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTpydGwnKTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSdGwoaTE4biwgb3B0aW9ucykge1xuICBjb25zdCBydGwgPSByZWYob3B0aW9ucz8ucnRsID8/IGRlZmF1bHRSdGwpO1xuICBjb25zdCBpc1J0bCA9IGNvbXB1dGVkKCgpID0+IHJ0bC52YWx1ZVtpMThuLmN1cnJlbnQudmFsdWVdID8/IGZhbHNlKTtcbiAgcmV0dXJuIHtcbiAgICBpc1J0bCxcbiAgICBydGwsXG4gICAgcnRsQ2xhc3NlczogY29tcHV0ZWQoKCkgPT4gYHYtbG9jYWxlLS1pcy0ke2lzUnRsLnZhbHVlID8gJ3J0bCcgOiAnbHRyJ31gKVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVSdGwobG9jYWxlLCBydGwsIHByb3BzKSB7XG4gIGNvbnN0IGlzUnRsID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMucnRsID8/IHJ0bC52YWx1ZVtsb2NhbGUuY3VycmVudC52YWx1ZV0gPz8gZmFsc2UpO1xuICByZXR1cm4ge1xuICAgIGlzUnRsLFxuICAgIHJ0bCxcbiAgICBydGxDbGFzc2VzOiBjb21wdXRlZCgoKSA9PiBgdi1sb2NhbGUtLWlzLSR7aXNSdGwudmFsdWUgPyAncnRsJyA6ICdsdHInfWApXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlUnRsKCkge1xuICBjb25zdCBsb2NhbGUgPSBpbmplY3QoTG9jYWxlU3ltYm9sKTtcbiAgaWYgKCFsb2NhbGUpIHRocm93IG5ldyBFcnJvcignW1Z1ZXRpZnldIENvdWxkIG5vdCBmaW5kIGluamVjdGVkIHJ0bCBpbnN0YW5jZScpO1xuICByZXR1cm4ge1xuICAgIGlzUnRsOiBsb2NhbGUuaXNSdGwsXG4gICAgcnRsQ2xhc3NlczogbG9jYWxlLnJ0bENsYXNzZXNcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2FsZS5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaW5qZWN0LCBwcm92aWRlLCByZWYsIHdhdGNoLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjcmVhdGVSYW5nZSwgZGFya2VuLCBnZXRDdXJyZW50SW5zdGFuY2UsIGdldEZvcmVncm91bmQsIGdldEx1bWEsIElOX0JST1dTRVIsIGxpZ2h0ZW4sIG1lcmdlRGVlcCwgcGFyc2VDb2xvciwgcHJvcHNGYWN0b3J5LCBSR0J0b0hleCB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IFRoZW1lU3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTp0aGVtZScpO1xuZXhwb3J0IGNvbnN0IG1ha2VUaGVtZVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgdGhlbWU6IFN0cmluZ1xufSwgJ3RoZW1lJyk7XG5jb25zdCBkZWZhdWx0VGhlbWVPcHRpb25zID0ge1xuICBkZWZhdWx0VGhlbWU6ICdsaWdodCcsXG4gIHZhcmlhdGlvbnM6IHtcbiAgICBjb2xvcnM6IFtdLFxuICAgIGxpZ2h0ZW46IDAsXG4gICAgZGFya2VuOiAwXG4gIH0sXG4gIHRoZW1lczoge1xuICAgIGxpZ2h0OiB7XG4gICAgICBkYXJrOiBmYWxzZSxcbiAgICAgIGNvbG9yczoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnI0ZGRkZGRicsXG4gICAgICAgIHN1cmZhY2U6ICcjRkZGRkZGJyxcbiAgICAgICAgJ3N1cmZhY2UtYnJpZ2h0JzogJyNGRkZGRkYnLFxuICAgICAgICAnc3VyZmFjZS12YXJpYW50JzogJyM0MjQyNDInLFxuICAgICAgICAnb24tc3VyZmFjZS12YXJpYW50JzogJyNFRUVFRUUnLFxuICAgICAgICBwcmltYXJ5OiAnIzYyMDBFRScsXG4gICAgICAgICdwcmltYXJ5LWRhcmtlbi0xJzogJyMzNzAwQjMnLFxuICAgICAgICBzZWNvbmRhcnk6ICcjMDNEQUM2JyxcbiAgICAgICAgJ3NlY29uZGFyeS1kYXJrZW4tMSc6ICcjMDE4Nzg2JyxcbiAgICAgICAgZXJyb3I6ICcjQjAwMDIwJyxcbiAgICAgICAgaW5mbzogJyMyMTk2RjMnLFxuICAgICAgICBzdWNjZXNzOiAnIzRDQUY1MCcsXG4gICAgICAgIHdhcm5pbmc6ICcjRkI4QzAwJ1xuICAgICAgfSxcbiAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICAnYm9yZGVyLWNvbG9yJzogJyMwMDAwMDAnLFxuICAgICAgICAnYm9yZGVyLW9wYWNpdHknOiAwLjEyLFxuICAgICAgICAnaGlnaC1lbXBoYXNpcy1vcGFjaXR5JzogMC44NyxcbiAgICAgICAgJ21lZGl1bS1lbXBoYXNpcy1vcGFjaXR5JzogMC42MCxcbiAgICAgICAgJ2Rpc2FibGVkLW9wYWNpdHknOiAwLjM4LFxuICAgICAgICAnaWRsZS1vcGFjaXR5JzogMC4wNCxcbiAgICAgICAgJ2hvdmVyLW9wYWNpdHknOiAwLjA0LFxuICAgICAgICAnZm9jdXMtb3BhY2l0eSc6IDAuMTIsXG4gICAgICAgICdzZWxlY3RlZC1vcGFjaXR5JzogMC4wOCxcbiAgICAgICAgJ2FjdGl2YXRlZC1vcGFjaXR5JzogMC4xMixcbiAgICAgICAgJ3ByZXNzZWQtb3BhY2l0eSc6IDAuMTIsXG4gICAgICAgICdkcmFnZ2VkLW9wYWNpdHknOiAwLjA4LFxuICAgICAgICAndGhlbWUta2JkJzogJyMyMTI1MjknLFxuICAgICAgICAndGhlbWUtb24ta2JkJzogJyNGRkZGRkYnLFxuICAgICAgICAndGhlbWUtY29kZSc6ICcjRjVGNUY1JyxcbiAgICAgICAgJ3RoZW1lLW9uLWNvZGUnOiAnIzAwMDAwMCdcbiAgICAgIH1cbiAgICB9LFxuICAgIGRhcms6IHtcbiAgICAgIGRhcms6IHRydWUsXG4gICAgICBjb2xvcnM6IHtcbiAgICAgICAgYmFja2dyb3VuZDogJyMxMjEyMTInLFxuICAgICAgICBzdXJmYWNlOiAnIzIxMjEyMScsXG4gICAgICAgICdzdXJmYWNlLWJyaWdodCc6ICcjY2NiZmQ2JyxcbiAgICAgICAgJ3N1cmZhY2UtdmFyaWFudCc6ICcjYTNhM2EzJyxcbiAgICAgICAgJ29uLXN1cmZhY2UtdmFyaWFudCc6ICcjNDI0MjQyJyxcbiAgICAgICAgcHJpbWFyeTogJyNCQjg2RkMnLFxuICAgICAgICAncHJpbWFyeS1kYXJrZW4tMSc6ICcjMzcwMEIzJyxcbiAgICAgICAgc2Vjb25kYXJ5OiAnIzAzREFDNScsXG4gICAgICAgICdzZWNvbmRhcnktZGFya2VuLTEnOiAnIzAzREFDNScsXG4gICAgICAgIGVycm9yOiAnI0NGNjY3OScsXG4gICAgICAgIGluZm86ICcjMjE5NkYzJyxcbiAgICAgICAgc3VjY2VzczogJyM0Q0FGNTAnLFxuICAgICAgICB3YXJuaW5nOiAnI0ZCOEMwMCdcbiAgICAgIH0sXG4gICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgJ2JvcmRlci1jb2xvcic6ICcjRkZGRkZGJyxcbiAgICAgICAgJ2JvcmRlci1vcGFjaXR5JzogMC4xMixcbiAgICAgICAgJ2hpZ2gtZW1waGFzaXMtb3BhY2l0eSc6IDEsXG4gICAgICAgICdtZWRpdW0tZW1waGFzaXMtb3BhY2l0eSc6IDAuNzAsXG4gICAgICAgICdkaXNhYmxlZC1vcGFjaXR5JzogMC41MCxcbiAgICAgICAgJ2lkbGUtb3BhY2l0eSc6IDAuMTAsXG4gICAgICAgICdob3Zlci1vcGFjaXR5JzogMC4wNCxcbiAgICAgICAgJ2ZvY3VzLW9wYWNpdHknOiAwLjEyLFxuICAgICAgICAnc2VsZWN0ZWQtb3BhY2l0eSc6IDAuMDgsXG4gICAgICAgICdhY3RpdmF0ZWQtb3BhY2l0eSc6IDAuMTIsXG4gICAgICAgICdwcmVzc2VkLW9wYWNpdHknOiAwLjE2LFxuICAgICAgICAnZHJhZ2dlZC1vcGFjaXR5JzogMC4wOCxcbiAgICAgICAgJ3RoZW1lLWtiZCc6ICcjMjEyNTI5JyxcbiAgICAgICAgJ3RoZW1lLW9uLWtiZCc6ICcjRkZGRkZGJyxcbiAgICAgICAgJ3RoZW1lLWNvZGUnOiAnIzM0MzQzNCcsXG4gICAgICAgICd0aGVtZS1vbi1jb2RlJzogJyNDQ0NDQ0MnXG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuZnVuY3Rpb24gcGFyc2VUaGVtZU9wdGlvbnMoKSB7XG4gIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkZWZhdWx0VGhlbWVPcHRpb25zO1xuICBpZiAoIW9wdGlvbnMpIHJldHVybiB7XG4gICAgLi4uZGVmYXVsdFRoZW1lT3B0aW9ucyxcbiAgICBpc0Rpc2FibGVkOiB0cnVlXG4gIH07XG4gIGNvbnN0IHRoZW1lcyA9IHt9O1xuICBmb3IgKGNvbnN0IFtrZXksIHRoZW1lXSBvZiBPYmplY3QuZW50cmllcyhvcHRpb25zLnRoZW1lcyA/PyB7fSkpIHtcbiAgICBjb25zdCBkZWZhdWx0VGhlbWUgPSB0aGVtZS5kYXJrIHx8IGtleSA9PT0gJ2RhcmsnID8gZGVmYXVsdFRoZW1lT3B0aW9ucy50aGVtZXM/LmRhcmsgOiBkZWZhdWx0VGhlbWVPcHRpb25zLnRoZW1lcz8ubGlnaHQ7XG4gICAgdGhlbWVzW2tleV0gPSBtZXJnZURlZXAoZGVmYXVsdFRoZW1lLCB0aGVtZSk7XG4gIH1cbiAgcmV0dXJuIG1lcmdlRGVlcChkZWZhdWx0VGhlbWVPcHRpb25zLCB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICB0aGVtZXNcbiAgfSk7XG59XG5cbi8vIENvbXBvc2FibGVzXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGhlbWUob3B0aW9ucykge1xuICBjb25zdCBwYXJzZWRPcHRpb25zID0gcGFyc2VUaGVtZU9wdGlvbnMob3B0aW9ucyk7XG4gIGNvbnN0IG5hbWUgPSByZWYocGFyc2VkT3B0aW9ucy5kZWZhdWx0VGhlbWUpO1xuICBjb25zdCB0aGVtZXMgPSByZWYocGFyc2VkT3B0aW9ucy50aGVtZXMpO1xuICBjb25zdCBjb21wdXRlZFRoZW1lcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBhY2MgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBvcmlnaW5hbF0gb2YgT2JqZWN0LmVudHJpZXModGhlbWVzLnZhbHVlKSkge1xuICAgICAgY29uc3QgdGhlbWUgPSBhY2NbbmFtZV0gPSB7XG4gICAgICAgIC4uLm9yaWdpbmFsLFxuICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAuLi5vcmlnaW5hbC5jb2xvcnNcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGlmIChwYXJzZWRPcHRpb25zLnZhcmlhdGlvbnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIHBhcnNlZE9wdGlvbnMudmFyaWF0aW9ucy5jb2xvcnMpIHtcbiAgICAgICAgICBjb25zdCBjb2xvciA9IHRoZW1lLmNvbG9yc1tuYW1lXTtcbiAgICAgICAgICBpZiAoIWNvbG9yKSBjb250aW51ZTtcbiAgICAgICAgICBmb3IgKGNvbnN0IHZhcmlhdGlvbiBvZiBbJ2xpZ2h0ZW4nLCAnZGFya2VuJ10pIHtcbiAgICAgICAgICAgIGNvbnN0IGZuID0gdmFyaWF0aW9uID09PSAnbGlnaHRlbicgPyBsaWdodGVuIDogZGFya2VuO1xuICAgICAgICAgICAgZm9yIChjb25zdCBhbW91bnQgb2YgY3JlYXRlUmFuZ2UocGFyc2VkT3B0aW9ucy52YXJpYXRpb25zW3ZhcmlhdGlvbl0sIDEpKSB7XG4gICAgICAgICAgICAgIHRoZW1lLmNvbG9yc1tgJHtuYW1lfS0ke3ZhcmlhdGlvbn0tJHthbW91bnR9YF0gPSBSR0J0b0hleChmbihwYXJzZUNvbG9yKGNvbG9yKSwgYW1vdW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGNvbG9yIG9mIE9iamVjdC5rZXlzKHRoZW1lLmNvbG9ycykpIHtcbiAgICAgICAgaWYgKC9eb24tW2Etel0vLnRlc3QoY29sb3IpIHx8IHRoZW1lLmNvbG9yc1tgb24tJHtjb2xvcn1gXSkgY29udGludWU7XG4gICAgICAgIGNvbnN0IG9uQ29sb3IgPSBgb24tJHtjb2xvcn1gO1xuICAgICAgICBjb25zdCBjb2xvclZhbCA9IHBhcnNlQ29sb3IodGhlbWUuY29sb3JzW2NvbG9yXSk7XG4gICAgICAgIHRoZW1lLmNvbG9yc1tvbkNvbG9yXSA9IGdldEZvcmVncm91bmQoY29sb3JWYWwpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9KTtcbiAgY29uc3QgY3VycmVudCA9IGNvbXB1dGVkKCgpID0+IGNvbXB1dGVkVGhlbWVzLnZhbHVlW25hbWUudmFsdWVdKTtcbiAgY29uc3Qgc3R5bGVzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IGxpbmVzID0gW107XG4gICAgaWYgKGN1cnJlbnQudmFsdWUuZGFyaykge1xuICAgICAgY3JlYXRlQ3NzQ2xhc3MobGluZXMsICc6cm9vdCcsIFsnY29sb3Itc2NoZW1lOiBkYXJrJ10pO1xuICAgIH1cbiAgICBjcmVhdGVDc3NDbGFzcyhsaW5lcywgJzpyb290JywgZ2VuQ3NzVmFyaWFibGVzKGN1cnJlbnQudmFsdWUpKTtcbiAgICBmb3IgKGNvbnN0IFt0aGVtZU5hbWUsIHRoZW1lXSBvZiBPYmplY3QuZW50cmllcyhjb21wdXRlZFRoZW1lcy52YWx1ZSkpIHtcbiAgICAgIGNyZWF0ZUNzc0NsYXNzKGxpbmVzLCBgLnYtdGhlbWUtLSR7dGhlbWVOYW1lfWAsIFtgY29sb3Itc2NoZW1lOiAke3RoZW1lLmRhcmsgPyAnZGFyaycgOiAnbm9ybWFsJ31gLCAuLi5nZW5Dc3NWYXJpYWJsZXModGhlbWUpXSk7XG4gICAgfVxuICAgIGNvbnN0IGJnTGluZXMgPSBbXTtcbiAgICBjb25zdCBmZ0xpbmVzID0gW107XG4gICAgY29uc3QgY29sb3JzID0gbmV3IFNldChPYmplY3QudmFsdWVzKGNvbXB1dGVkVGhlbWVzLnZhbHVlKS5mbGF0TWFwKHRoZW1lID0+IE9iamVjdC5rZXlzKHRoZW1lLmNvbG9ycykpKTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBjb2xvcnMpIHtcbiAgICAgIGlmICgvXm9uLVthLXpdLy50ZXN0KGtleSkpIHtcbiAgICAgICAgY3JlYXRlQ3NzQ2xhc3MoZmdMaW5lcywgYC4ke2tleX1gLCBbYGNvbG9yOiByZ2IodmFyKC0tdi10aGVtZS0ke2tleX0pKSAhaW1wb3J0YW50YF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3JlYXRlQ3NzQ2xhc3MoYmdMaW5lcywgYC5iZy0ke2tleX1gLCBbYC0tdi10aGVtZS1vdmVybGF5LW11bHRpcGxpZXI6IHZhcigtLXYtdGhlbWUtJHtrZXl9LW92ZXJsYXktbXVsdGlwbGllcilgLCBgYmFja2dyb3VuZC1jb2xvcjogcmdiKHZhcigtLXYtdGhlbWUtJHtrZXl9KSkgIWltcG9ydGFudGAsIGBjb2xvcjogcmdiKHZhcigtLXYtdGhlbWUtb24tJHtrZXl9KSkgIWltcG9ydGFudGBdKTtcbiAgICAgICAgY3JlYXRlQ3NzQ2xhc3MoZmdMaW5lcywgYC50ZXh0LSR7a2V5fWAsIFtgY29sb3I6IHJnYih2YXIoLS12LXRoZW1lLSR7a2V5fSkpICFpbXBvcnRhbnRgXSk7XG4gICAgICAgIGNyZWF0ZUNzc0NsYXNzKGZnTGluZXMsIGAuYm9yZGVyLSR7a2V5fWAsIFtgLS12LWJvcmRlci1jb2xvcjogdmFyKC0tdi10aGVtZS0ke2tleX0pYF0pO1xuICAgICAgfVxuICAgIH1cbiAgICBsaW5lcy5wdXNoKC4uLmJnTGluZXMsIC4uLmZnTGluZXMpO1xuICAgIHJldHVybiBsaW5lcy5tYXAoKHN0ciwgaSkgPT4gaSA9PT0gMCA/IHN0ciA6IGAgICAgJHtzdHJ9YCkuam9pbignJyk7XG4gIH0pO1xuICBmdW5jdGlvbiBnZXRIZWFkKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdHlsZTogW3tcbiAgICAgICAgY2hpbGRyZW46IHN0eWxlcy52YWx1ZSxcbiAgICAgICAgaWQ6ICd2dWV0aWZ5LXRoZW1lLXN0eWxlc2hlZXQnLFxuICAgICAgICBub25jZTogcGFyc2VkT3B0aW9ucy5jc3BOb25jZSB8fCBmYWxzZVxuICAgICAgfV1cbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGluc3RhbGwoYXBwKSB7XG4gICAgaWYgKHBhcnNlZE9wdGlvbnMuaXNEaXNhYmxlZCkgcmV0dXJuO1xuICAgIGNvbnN0IGhlYWQgPSBhcHAuX2NvbnRleHQucHJvdmlkZXMudXNlaGVhZDtcbiAgICBpZiAoaGVhZCkge1xuICAgICAgaWYgKGhlYWQucHVzaCkge1xuICAgICAgICBjb25zdCBlbnRyeSA9IGhlYWQucHVzaChnZXRIZWFkKTtcbiAgICAgICAgaWYgKElOX0JST1dTRVIpIHtcbiAgICAgICAgICB3YXRjaChzdHlsZXMsICgpID0+IHtcbiAgICAgICAgICAgIGVudHJ5LnBhdGNoKGdldEhlYWQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoSU5fQlJPV1NFUikge1xuICAgICAgICAgIGhlYWQuYWRkSGVhZE9ianMoY29tcHV0ZWQoZ2V0SGVhZCkpO1xuICAgICAgICAgIHdhdGNoRWZmZWN0KCgpID0+IGhlYWQudXBkYXRlRE9NKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhlYWQuYWRkSGVhZE9ianMoZ2V0SGVhZCgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgc3R5bGVFbCA9IElOX0JST1dTRVIgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndnVldGlmeS10aGVtZS1zdHlsZXNoZWV0JykgOiBudWxsO1xuICAgICAgaWYgKElOX0JST1dTRVIpIHtcbiAgICAgICAgd2F0Y2goc3R5bGVzLCB1cGRhdGVTdHlsZXMsIHtcbiAgICAgICAgICBpbW1lZGlhdGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVTdHlsZXMoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlcygpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgIXN0eWxlRWwpIHtcbiAgICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgZWwudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgICAgICAgZWwuaWQgPSAndnVldGlmeS10aGVtZS1zdHlsZXNoZWV0JztcbiAgICAgICAgICBpZiAocGFyc2VkT3B0aW9ucy5jc3BOb25jZSkgZWwuc2V0QXR0cmlidXRlKCdub25jZScsIHBhcnNlZE9wdGlvbnMuY3NwTm9uY2UpO1xuICAgICAgICAgIHN0eWxlRWwgPSBlbDtcbiAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlRWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHlsZUVsKSBzdHlsZUVsLmlubmVySFRNTCA9IHN0eWxlcy52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgdGhlbWVDbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VkT3B0aW9ucy5pc0Rpc2FibGVkID8gdW5kZWZpbmVkIDogYHYtdGhlbWUtLSR7bmFtZS52YWx1ZX1gKTtcbiAgcmV0dXJuIHtcbiAgICBpbnN0YWxsLFxuICAgIGlzRGlzYWJsZWQ6IHBhcnNlZE9wdGlvbnMuaXNEaXNhYmxlZCxcbiAgICBuYW1lLFxuICAgIHRoZW1lcyxcbiAgICBjdXJyZW50LFxuICAgIGNvbXB1dGVkVGhlbWVzLFxuICAgIHRoZW1lQ2xhc3NlcyxcbiAgICBzdHlsZXMsXG4gICAgZ2xvYmFsOiB7XG4gICAgICBuYW1lLFxuICAgICAgY3VycmVudFxuICAgIH1cbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlVGhlbWUocHJvcHMpIHtcbiAgZ2V0Q3VycmVudEluc3RhbmNlKCdwcm92aWRlVGhlbWUnKTtcbiAgY29uc3QgdGhlbWUgPSBpbmplY3QoVGhlbWVTeW1ib2wsIG51bGwpO1xuICBpZiAoIXRoZW1lKSB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIFZ1ZXRpZnkgdGhlbWUgaW5qZWN0aW9uJyk7XG4gIGNvbnN0IG5hbWUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHByb3BzLnRoZW1lID8/IHRoZW1lLm5hbWUudmFsdWU7XG4gIH0pO1xuICBjb25zdCBjdXJyZW50ID0gY29tcHV0ZWQoKCkgPT4gdGhlbWUudGhlbWVzLnZhbHVlW25hbWUudmFsdWVdKTtcbiAgY29uc3QgdGhlbWVDbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4gdGhlbWUuaXNEaXNhYmxlZCA/IHVuZGVmaW5lZCA6IGB2LXRoZW1lLS0ke25hbWUudmFsdWV9YCk7XG4gIGNvbnN0IG5ld1RoZW1lID0ge1xuICAgIC4uLnRoZW1lLFxuICAgIG5hbWUsXG4gICAgY3VycmVudCxcbiAgICB0aGVtZUNsYXNzZXNcbiAgfTtcbiAgcHJvdmlkZShUaGVtZVN5bWJvbCwgbmV3VGhlbWUpO1xuICByZXR1cm4gbmV3VGhlbWU7XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIGdldEN1cnJlbnRJbnN0YW5jZSgndXNlVGhlbWUnKTtcbiAgY29uc3QgdGhlbWUgPSBpbmplY3QoVGhlbWVTeW1ib2wsIG51bGwpO1xuICBpZiAoIXRoZW1lKSB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIFZ1ZXRpZnkgdGhlbWUgaW5qZWN0aW9uJyk7XG4gIHJldHVybiB0aGVtZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNzc0NsYXNzKGxpbmVzLCBzZWxlY3RvciwgY29udGVudCkge1xuICBsaW5lcy5wdXNoKGAke3NlbGVjdG9yfSB7XFxuYCwgLi4uY29udGVudC5tYXAobGluZSA9PiBgICAke2xpbmV9O1xcbmApLCAnfVxcbicpO1xufVxuZnVuY3Rpb24gZ2VuQ3NzVmFyaWFibGVzKHRoZW1lKSB7XG4gIGNvbnN0IGxpZ2h0T3ZlcmxheSA9IHRoZW1lLmRhcmsgPyAyIDogMTtcbiAgY29uc3QgZGFya092ZXJsYXkgPSB0aGVtZS5kYXJrID8gMSA6IDI7XG4gIGNvbnN0IHZhcmlhYmxlcyA9IFtdO1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGVtZS5jb2xvcnMpKSB7XG4gICAgY29uc3QgcmdiID0gcGFyc2VDb2xvcih2YWx1ZSk7XG4gICAgdmFyaWFibGVzLnB1c2goYC0tdi10aGVtZS0ke2tleX06ICR7cmdiLnJ9LCR7cmdiLmd9LCR7cmdiLmJ9YCk7XG4gICAgaWYgKCFrZXkuc3RhcnRzV2l0aCgnb24tJykpIHtcbiAgICAgIHZhcmlhYmxlcy5wdXNoKGAtLXYtdGhlbWUtJHtrZXl9LW92ZXJsYXktbXVsdGlwbGllcjogJHtnZXRMdW1hKHZhbHVlKSA+IDAuMTggPyBsaWdodE92ZXJsYXkgOiBkYXJrT3ZlcmxheX1gKTtcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhlbWUudmFyaWFibGVzKSkge1xuICAgIGNvbnN0IGNvbG9yID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5zdGFydHNXaXRoKCcjJykgPyBwYXJzZUNvbG9yKHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCByZ2IgPSBjb2xvciA/IGAke2NvbG9yLnJ9LCAke2NvbG9yLmd9LCAke2NvbG9yLmJ9YCA6IHVuZGVmaW5lZDtcbiAgICB2YXJpYWJsZXMucHVzaChgLS12LSR7a2V5fTogJHtyZ2IgPz8gdmFsdWV9YCk7XG4gIH1cbiAgcmV0dXJuIHZhcmlhYmxlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRoZW1lLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNyZWF0ZVJhbmdlIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5jb25zdCBmaXJzdERheSA9IHtcbiAgJzAwMSc6IDEsXG4gIEFEOiAxLFxuICBBRTogNixcbiAgQUY6IDYsXG4gIEFHOiAwLFxuICBBSTogMSxcbiAgQUw6IDEsXG4gIEFNOiAxLFxuICBBTjogMSxcbiAgQVI6IDEsXG4gIEFTOiAwLFxuICBBVDogMSxcbiAgQVU6IDEsXG4gIEFYOiAxLFxuICBBWjogMSxcbiAgQkE6IDEsXG4gIEJEOiAwLFxuICBCRTogMSxcbiAgQkc6IDEsXG4gIEJIOiA2LFxuICBCTTogMSxcbiAgQk46IDEsXG4gIEJSOiAwLFxuICBCUzogMCxcbiAgQlQ6IDAsXG4gIEJXOiAwLFxuICBCWTogMSxcbiAgQlo6IDAsXG4gIENBOiAwLFxuICBDSDogMSxcbiAgQ0w6IDEsXG4gIENNOiAxLFxuICBDTjogMSxcbiAgQ086IDAsXG4gIENSOiAxLFxuICBDWTogMSxcbiAgQ1o6IDEsXG4gIERFOiAxLFxuICBESjogNixcbiAgREs6IDEsXG4gIERNOiAwLFxuICBETzogMCxcbiAgRFo6IDYsXG4gIEVDOiAxLFxuICBFRTogMSxcbiAgRUc6IDYsXG4gIEVTOiAxLFxuICBFVDogMCxcbiAgRkk6IDEsXG4gIEZKOiAxLFxuICBGTzogMSxcbiAgRlI6IDEsXG4gIEdCOiAxLFxuICAnR0ItYWx0LXZhcmlhbnQnOiAwLFxuICBHRTogMSxcbiAgR0Y6IDEsXG4gIEdQOiAxLFxuICBHUjogMSxcbiAgR1Q6IDAsXG4gIEdVOiAwLFxuICBISzogMCxcbiAgSE46IDAsXG4gIEhSOiAxLFxuICBIVTogMSxcbiAgSUQ6IDAsXG4gIElFOiAxLFxuICBJTDogMCxcbiAgSU46IDAsXG4gIElROiA2LFxuICBJUjogNixcbiAgSVM6IDEsXG4gIElUOiAxLFxuICBKTTogMCxcbiAgSk86IDYsXG4gIEpQOiAwLFxuICBLRTogMCxcbiAgS0c6IDEsXG4gIEtIOiAwLFxuICBLUjogMCxcbiAgS1c6IDYsXG4gIEtaOiAxLFxuICBMQTogMCxcbiAgTEI6IDEsXG4gIExJOiAxLFxuICBMSzogMSxcbiAgTFQ6IDEsXG4gIExVOiAxLFxuICBMVjogMSxcbiAgTFk6IDYsXG4gIE1DOiAxLFxuICBNRDogMSxcbiAgTUU6IDEsXG4gIE1IOiAwLFxuICBNSzogMSxcbiAgTU06IDAsXG4gIE1OOiAxLFxuICBNTzogMCxcbiAgTVE6IDEsXG4gIE1UOiAwLFxuICBNVjogNSxcbiAgTVg6IDAsXG4gIE1ZOiAxLFxuICBNWjogMCxcbiAgTkk6IDAsXG4gIE5MOiAxLFxuICBOTzogMSxcbiAgTlA6IDAsXG4gIE5aOiAxLFxuICBPTTogNixcbiAgUEE6IDAsXG4gIFBFOiAwLFxuICBQSDogMCxcbiAgUEs6IDAsXG4gIFBMOiAxLFxuICBQUjogMCxcbiAgUFQ6IDAsXG4gIFBZOiAwLFxuICBRQTogNixcbiAgUkU6IDEsXG4gIFJPOiAxLFxuICBSUzogMSxcbiAgUlU6IDEsXG4gIFNBOiAwLFxuICBTRDogNixcbiAgU0U6IDEsXG4gIFNHOiAwLFxuICBTSTogMSxcbiAgU0s6IDEsXG4gIFNNOiAxLFxuICBTVjogMCxcbiAgU1k6IDYsXG4gIFRIOiAwLFxuICBUSjogMSxcbiAgVE06IDEsXG4gIFRSOiAxLFxuICBUVDogMCxcbiAgVFc6IDAsXG4gIFVBOiAxLFxuICBVTTogMCxcbiAgVVM6IDAsXG4gIFVZOiAxLFxuICBVWjogMSxcbiAgVkE6IDEsXG4gIFZFOiAwLFxuICBWSTogMCxcbiAgVk46IDEsXG4gIFdTOiAwLFxuICBYSzogMSxcbiAgWUU6IDAsXG4gIFpBOiAwLFxuICBaVzogMFxufTtcbmZ1bmN0aW9uIGdldFdlZWtBcnJheShkYXRlLCBsb2NhbGUpIHtcbiAgY29uc3Qgd2Vla3MgPSBbXTtcbiAgbGV0IGN1cnJlbnRXZWVrID0gW107XG4gIGNvbnN0IGZpcnN0RGF5T2ZNb250aCA9IHN0YXJ0T2ZNb250aChkYXRlKTtcbiAgY29uc3QgbGFzdERheU9mTW9udGggPSBlbmRPZk1vbnRoKGRhdGUpO1xuICBjb25zdCBmaXJzdERheVdlZWtJbmRleCA9IChmaXJzdERheU9mTW9udGguZ2V0RGF5KCkgLSBmaXJzdERheVtsb2NhbGUuc2xpY2UoLTIpLnRvVXBwZXJDYXNlKCldICsgNykgJSA3O1xuICBjb25zdCBsYXN0RGF5V2Vla0luZGV4ID0gKGxhc3REYXlPZk1vbnRoLmdldERheSgpIC0gZmlyc3REYXlbbG9jYWxlLnNsaWNlKC0yKS50b1VwcGVyQ2FzZSgpXSArIDcpICUgNztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdERheVdlZWtJbmRleDsgaSsrKSB7XG4gICAgY29uc3QgYWRqYWNlbnREYXkgPSBuZXcgRGF0ZShmaXJzdERheU9mTW9udGgpO1xuICAgIGFkamFjZW50RGF5LnNldERhdGUoYWRqYWNlbnREYXkuZ2V0RGF0ZSgpIC0gKGZpcnN0RGF5V2Vla0luZGV4IC0gaSkpO1xuICAgIGN1cnJlbnRXZWVrLnB1c2goYWRqYWNlbnREYXkpO1xuICB9XG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IGxhc3REYXlPZk1vbnRoLmdldERhdGUoKTsgaSsrKSB7XG4gICAgY29uc3QgZGF5ID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGkpO1xuXG4gICAgLy8gQWRkIHRoZSBkYXkgdG8gdGhlIGN1cnJlbnQgd2Vla1xuICAgIGN1cnJlbnRXZWVrLnB1c2goZGF5KTtcblxuICAgIC8vIElmIHRoZSBjdXJyZW50IHdlZWsgaGFzIDcgZGF5cywgYWRkIGl0IHRvIHRoZSB3ZWVrcyBhcnJheSBhbmQgc3RhcnQgYSBuZXcgd2Vla1xuICAgIGlmIChjdXJyZW50V2Vlay5sZW5ndGggPT09IDcpIHtcbiAgICAgIHdlZWtzLnB1c2goY3VycmVudFdlZWspO1xuICAgICAgY3VycmVudFdlZWsgPSBbXTtcbiAgICB9XG4gIH1cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCA3IC0gbGFzdERheVdlZWtJbmRleDsgaSsrKSB7XG4gICAgY29uc3QgYWRqYWNlbnREYXkgPSBuZXcgRGF0ZShsYXN0RGF5T2ZNb250aCk7XG4gICAgYWRqYWNlbnREYXkuc2V0RGF0ZShhZGphY2VudERheS5nZXREYXRlKCkgKyBpKTtcbiAgICBjdXJyZW50V2Vlay5wdXNoKGFkamFjZW50RGF5KTtcbiAgfVxuICB3ZWVrcy5wdXNoKGN1cnJlbnRXZWVrKTtcbiAgcmV0dXJuIHdlZWtzO1xufVxuZnVuY3Rpb24gc3RhcnRPZk1vbnRoKGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCAxKTtcbn1cbmZ1bmN0aW9uIGVuZE9mTW9udGgoZGF0ZSkge1xuICByZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkgKyAxLCAwKTtcbn1cbmZ1bmN0aW9uIHBhcnNlTG9jYWxEYXRlKHZhbHVlKSB7XG4gIGNvbnN0IHBhcnRzID0gdmFsdWUuc3BsaXQoJy0nKS5tYXAoTnVtYmVyKTtcblxuICAvLyBuZXcgRGF0ZSgpIHVzZXMgbG9jYWwgdGltZSB6b25lIHdoZW4gcGFzc2luZyBpbmRpdmlkdWFsIGRhdGUgY29tcG9uZW50IHZhbHVlc1xuICByZXR1cm4gbmV3IERhdGUocGFydHNbMF0sIHBhcnRzWzFdIC0gMSwgcGFydHNbMl0pO1xufVxuY29uc3QgX1lZWU1NREQgPSAvKFsxMl1cXGR7M30tKFsxLTldfDBbMS05XXwxWzAtMl0pLShbMS05XXwwWzEtOV18WzEyXVxcZHwzWzAxXSkpLztcbmZ1bmN0aW9uIGRhdGUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBuZXcgRGF0ZSgpO1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSByZXR1cm4gdmFsdWU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgbGV0IHBhcnNlZDtcbiAgICBpZiAoX1lZWU1NREQudGVzdCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBwYXJzZUxvY2FsRGF0ZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZCA9IERhdGUucGFyc2UodmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWlzTmFOKHBhcnNlZCkpIHJldHVybiBuZXcgRGF0ZShwYXJzZWQpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuY29uc3Qgc3VuZGF5SmFudWFyeVNlY29uZDIwMDAgPSBuZXcgRGF0ZSgyMDAwLCAwLCAyKTtcbmZ1bmN0aW9uIGdldFdlZWtkYXlzKGxvY2FsZSkge1xuICBjb25zdCBkYXlzRnJvbVN1bmRheSA9IGZpcnN0RGF5W2xvY2FsZS5zbGljZSgtMikudG9VcHBlckNhc2UoKV07XG4gIHJldHVybiBjcmVhdGVSYW5nZSg3KS5tYXAoaSA9PiB7XG4gICAgY29uc3Qgd2Vla2RheSA9IG5ldyBEYXRlKHN1bmRheUphbnVhcnlTZWNvbmQyMDAwKTtcbiAgICB3ZWVrZGF5LnNldERhdGUoc3VuZGF5SmFudWFyeVNlY29uZDIwMDAuZ2V0RGF0ZSgpICsgZGF5c0Zyb21TdW5kYXkgKyBpKTtcbiAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7XG4gICAgICB3ZWVrZGF5OiAnbmFycm93J1xuICAgIH0pLmZvcm1hdCh3ZWVrZGF5KTtcbiAgfSk7XG59XG5mdW5jdGlvbiBmb3JtYXQodmFsdWUsIGZvcm1hdFN0cmluZywgbG9jYWxlKSB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gIGxldCBvcHRpb25zID0ge307XG4gIHN3aXRjaCAoZm9ybWF0U3RyaW5nKSB7XG4gICAgY2FzZSAnZnVsbERhdGVXaXRoV2Vla2RheSc6XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICB3ZWVrZGF5OiAnbG9uZycsXG4gICAgICAgIGRheTogJ251bWVyaWMnLFxuICAgICAgICBtb250aDogJ2xvbmcnLFxuICAgICAgICB5ZWFyOiAnbnVtZXJpYydcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdub3JtYWxEYXRlV2l0aFdlZWtkYXknOlxuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgd2Vla2RheTogJ3Nob3J0JyxcbiAgICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICAgIG1vbnRoOiAnc2hvcnQnXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAna2V5Ym9hcmREYXRlJzpcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ21vbnRoQW5kRGF0ZSc6XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBtb250aDogJ2xvbmcnLFxuICAgICAgICBkYXk6ICdudW1lcmljJ1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ21vbnRoQW5kWWVhcic6XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBtb250aDogJ2xvbmcnLFxuICAgICAgICB5ZWFyOiAnbnVtZXJpYydcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdkYXlPZk1vbnRoJzpcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIGRheTogJ251bWVyaWMnXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2hvcnREYXRlJzpcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHllYXI6ICdudW1lcmljJ1xuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICB0aW1lWm9uZTogJ1VUQycsXG4gICAgICAgIHRpbWVab25lTmFtZTogJ3Nob3J0J1xuICAgICAgfTtcbiAgfVxuICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBvcHRpb25zKS5mb3JtYXQoZGF0ZSk7XG59XG5mdW5jdGlvbiBhZGREYXlzKGRhdGUsIGFtb3VudCkge1xuICBjb25zdCBkID0gbmV3IERhdGUoZGF0ZSk7XG4gIGQuc2V0RGF0ZShkLmdldERhdGUoKSArIGFtb3VudCk7XG4gIHJldHVybiBkO1xufVxuZnVuY3Rpb24gYWRkTW9udGhzKGRhdGUsIGFtb3VudCkge1xuICBjb25zdCBkID0gbmV3IERhdGUoZGF0ZSk7XG4gIGQuc2V0TW9udGgoZC5nZXRNb250aCgpICsgYW1vdW50KTtcbiAgcmV0dXJuIGQ7XG59XG5mdW5jdGlvbiBnZXRZZWFyKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn1cbmZ1bmN0aW9uIGdldE1vbnRoKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbn1cbmZ1bmN0aW9uIHN0YXJ0T2ZZZWFyKGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG59XG5mdW5jdGlvbiBlbmRPZlllYXIoZGF0ZSkge1xuICByZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCAxMSwgMzEpO1xufVxuZnVuY3Rpb24gaXNXaXRoaW5SYW5nZShkYXRlLCByYW5nZSkge1xuICByZXR1cm4gaXNBZnRlcihkYXRlLCByYW5nZVswXSkgJiYgaXNCZWZvcmUoZGF0ZSwgcmFuZ2VbMV0pO1xufVxuZnVuY3Rpb24gaXNWYWxpZChkYXRlKSB7XG4gIGlmICghZGF0ZSB8fCBkYXRlID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKGRhdGUpO1xuICByZXR1cm4gZCBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKGQuZ2V0VGltZSgpKTtcbn1cbmZ1bmN0aW9uIGlzQWZ0ZXIoZGF0ZSwgY29tcGFyaW5nKSB7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSA+IGNvbXBhcmluZy5nZXRUaW1lKCk7XG59XG5mdW5jdGlvbiBpc0JlZm9yZShkYXRlLCBjb21wYXJpbmcpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIDwgY29tcGFyaW5nLmdldFRpbWUoKTtcbn1cbmZ1bmN0aW9uIGlzRXF1YWwoZGF0ZSwgY29tcGFyaW5nKSB7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSA9PT0gY29tcGFyaW5nLmdldFRpbWUoKTtcbn1cbmZ1bmN0aW9uIGlzU2FtZURheShkYXRlLCBjb21wYXJpbmcpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpID09PSBjb21wYXJpbmcuZ2V0RGF0ZSgpICYmIGRhdGUuZ2V0TW9udGgoKSA9PT0gY29tcGFyaW5nLmdldE1vbnRoKCkgJiYgZGF0ZS5nZXRGdWxsWWVhcigpID09PSBjb21wYXJpbmcuZ2V0RnVsbFllYXIoKTtcbn1cbmZ1bmN0aW9uIGlzU2FtZU1vbnRoKGRhdGUsIGNvbXBhcmluZykge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpID09PSBjb21wYXJpbmcuZ2V0TW9udGgoKSAmJiBkYXRlLmdldEZ1bGxZZWFyKCkgPT09IGNvbXBhcmluZy5nZXRGdWxsWWVhcigpO1xufVxuZnVuY3Rpb24gZ2V0RGlmZihkYXRlLCBjb21wYXJpbmcsIHVuaXQpIHtcbiAgY29uc3QgZCA9IG5ldyBEYXRlKGRhdGUpO1xuICBjb25zdCBjID0gbmV3IERhdGUoY29tcGFyaW5nKTtcbiAgaWYgKHVuaXQgPT09ICdtb250aCcpIHtcbiAgICByZXR1cm4gZC5nZXRNb250aCgpIC0gYy5nZXRNb250aCgpICsgKGQuZ2V0RnVsbFllYXIoKSAtIGMuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbiAgfVxuICByZXR1cm4gTWF0aC5mbG9vcigoZC5nZXRUaW1lKCkgLSBjLmdldFRpbWUoKSkgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xufVxuZnVuY3Rpb24gc2V0WWVhcihkYXRlLCB5ZWFyKSB7XG4gIGNvbnN0IGQgPSBuZXcgRGF0ZShkYXRlKTtcbiAgZC5zZXRGdWxsWWVhcih5ZWFyKTtcbiAgcmV0dXJuIGQ7XG59XG5mdW5jdGlvbiBzdGFydE9mRGF5KGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSk7XG59XG5mdW5jdGlvbiBlbmRPZkRheShkYXRlKSB7XG4gIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIDIzLCA1OSwgNTksIDk5OSk7XG59XG5leHBvcnQgY2xhc3MgVnVldGlmeURhdGVBZGFwdGVyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMubG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIH1cbiAgZGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiBkYXRlKHZhbHVlKTtcbiAgfVxuICB0b0pzRGF0ZShkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgYWRkRGF5cyhkYXRlLCBhbW91bnQpIHtcbiAgICByZXR1cm4gYWRkRGF5cyhkYXRlLCBhbW91bnQpO1xuICB9XG4gIGFkZE1vbnRocyhkYXRlLCBhbW91bnQpIHtcbiAgICByZXR1cm4gYWRkTW9udGhzKGRhdGUsIGFtb3VudCk7XG4gIH1cbiAgZ2V0V2Vla0FycmF5KGRhdGUpIHtcbiAgICByZXR1cm4gZ2V0V2Vla0FycmF5KGRhdGUsIHRoaXMubG9jYWxlKTtcbiAgfVxuICBzdGFydE9mTW9udGgoZGF0ZSkge1xuICAgIHJldHVybiBzdGFydE9mTW9udGgoZGF0ZSk7XG4gIH1cbiAgZW5kT2ZNb250aChkYXRlKSB7XG4gICAgcmV0dXJuIGVuZE9mTW9udGgoZGF0ZSk7XG4gIH1cbiAgZm9ybWF0KGRhdGUsIGZvcm1hdFN0cmluZykge1xuICAgIHJldHVybiBmb3JtYXQoZGF0ZSwgZm9ybWF0U3RyaW5nLCB0aGlzLmxvY2FsZSk7XG4gIH1cbiAgaXNFcXVhbChkYXRlLCBjb21wYXJpbmcpIHtcbiAgICByZXR1cm4gaXNFcXVhbChkYXRlLCBjb21wYXJpbmcpO1xuICB9XG4gIGlzVmFsaWQoZGF0ZSkge1xuICAgIHJldHVybiBpc1ZhbGlkKGRhdGUpO1xuICB9XG4gIGlzV2l0aGluUmFuZ2UoZGF0ZSwgcmFuZ2UpIHtcbiAgICByZXR1cm4gaXNXaXRoaW5SYW5nZShkYXRlLCByYW5nZSk7XG4gIH1cbiAgaXNBZnRlcihkYXRlLCBjb21wYXJpbmcpIHtcbiAgICByZXR1cm4gaXNBZnRlcihkYXRlLCBjb21wYXJpbmcpO1xuICB9XG4gIGlzQmVmb3JlKGRhdGUsIGNvbXBhcmluZykge1xuICAgIHJldHVybiAhaXNBZnRlcihkYXRlLCBjb21wYXJpbmcpICYmICFpc0VxdWFsKGRhdGUsIGNvbXBhcmluZyk7XG4gIH1cbiAgaXNTYW1lRGF5KGRhdGUsIGNvbXBhcmluZykge1xuICAgIHJldHVybiBpc1NhbWVEYXkoZGF0ZSwgY29tcGFyaW5nKTtcbiAgfVxuICBpc1NhbWVNb250aChkYXRlLCBjb21wYXJpbmcpIHtcbiAgICByZXR1cm4gaXNTYW1lTW9udGgoZGF0ZSwgY29tcGFyaW5nKTtcbiAgfVxuICBzZXRZZWFyKGRhdGUsIHllYXIpIHtcbiAgICByZXR1cm4gc2V0WWVhcihkYXRlLCB5ZWFyKTtcbiAgfVxuICBnZXREaWZmKGRhdGUsIGNvbXBhcmluZywgdW5pdCkge1xuICAgIHJldHVybiBnZXREaWZmKGRhdGUsIGNvbXBhcmluZywgdW5pdCk7XG4gIH1cbiAgZ2V0V2Vla2RheXMoKSB7XG4gICAgcmV0dXJuIGdldFdlZWtkYXlzKHRoaXMubG9jYWxlKTtcbiAgfVxuICBnZXRZZWFyKGRhdGUpIHtcbiAgICByZXR1cm4gZ2V0WWVhcihkYXRlKTtcbiAgfVxuICBnZXRNb250aChkYXRlKSB7XG4gICAgcmV0dXJuIGdldE1vbnRoKGRhdGUpO1xuICB9XG4gIHN0YXJ0T2ZEYXkoZGF0ZSkge1xuICAgIHJldHVybiBzdGFydE9mRGF5KGRhdGUpO1xuICB9XG4gIGVuZE9mRGF5KGRhdGUpIHtcbiAgICByZXR1cm4gZW5kT2ZEYXkoZGF0ZSk7XG4gIH1cbiAgc3RhcnRPZlllYXIoZGF0ZSkge1xuICAgIHJldHVybiBzdGFydE9mWWVhcihkYXRlKTtcbiAgfVxuICBlbmRPZlllYXIoZGF0ZSkge1xuICAgIHJldHVybiBlbmRPZlllYXIoZGF0ZSk7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZ1ZXRpZnkubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGluamVjdCwgcmVhY3RpdmUsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IG1lcmdlRGVlcCwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIEFkYXB0ZXJzXG5pbXBvcnQgeyBWdWV0aWZ5RGF0ZUFkYXB0ZXIgfSBmcm9tIFwiLi9hZGFwdGVycy92dWV0aWZ5Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IERhdGVBZGFwdGVyU3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTpkYXRlLWFkYXB0ZXInKTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG1lcmdlRGVlcCh7XG4gICAgYWRhcHRlcjogVnVldGlmeURhdGVBZGFwdGVyLFxuICAgIGxvY2FsZToge1xuICAgICAgYWY6ICdhZi1aQScsXG4gICAgICAvLyBhcjogJycsICMgbm90IHRoZSBzYW1lIHZhbHVlIGZvciBhbGwgdmFyaWFudHNcbiAgICAgIGJnOiAnYmctQkcnLFxuICAgICAgY2E6ICdjYS1FUycsXG4gICAgICBja2I6ICcnLFxuICAgICAgY3M6ICcnLFxuICAgICAgZGU6ICdkZS1ERScsXG4gICAgICBlbDogJ2VsLUdSJyxcbiAgICAgIGVuOiAnZW4tVVMnLFxuICAgICAgLy8gZXM6ICcnLCAjIG5vdCB0aGUgc2FtZSB2YWx1ZSBmb3IgYWxsIHZhcmlhbnRzXG4gICAgICBldDogJ2V0LUVFJyxcbiAgICAgIGZhOiAnZmEtSVInLFxuICAgICAgZmk6ICdmaS1GSScsXG4gICAgICAvLyBmcjogJycsICNub3QgdGhlIHNhbWUgdmFsdWUgZm9yIGFsbCB2YXJpYW50c1xuICAgICAgaHI6ICdoci1IUicsXG4gICAgICBodTogJ2h1LUhVJyxcbiAgICAgIGhlOiAnaGUtSUwnLFxuICAgICAgaWQ6ICdpZC1JRCcsXG4gICAgICBpdDogJ2l0LUlUJyxcbiAgICAgIGphOiAnamEtSlAnLFxuICAgICAga286ICdrby1LUicsXG4gICAgICBsdjogJ2x2LUxWJyxcbiAgICAgIGx0OiAnbHQtTFQnLFxuICAgICAgbmw6ICdubC1OTCcsXG4gICAgICBubzogJ25uLU5PJyxcbiAgICAgIHBsOiAncGwtUEwnLFxuICAgICAgcHQ6ICdwdC1QVCcsXG4gICAgICBybzogJ3JvLVJPJyxcbiAgICAgIHJ1OiAncnUtUlUnLFxuICAgICAgc2s6ICdzay1TSycsXG4gICAgICBzbDogJ3NsLVNJJyxcbiAgICAgIHNyQ3lybDogJ3NyLVNQJyxcbiAgICAgIHNyTGF0bjogJ3NyLVNQJyxcbiAgICAgIHN2OiAnc3YtU0UnLFxuICAgICAgdGg6ICd0aC1USCcsXG4gICAgICB0cjogJ3RyLVRSJyxcbiAgICAgIGF6OiAnYXotQVonLFxuICAgICAgdWs6ICd1ay1VQScsXG4gICAgICB2aTogJ3ZpLVZOJyxcbiAgICAgIHpoSGFuczogJ3poLUNOJyxcbiAgICAgIHpoSGFudDogJ3poLVRXJ1xuICAgIH1cbiAgfSwgb3B0aW9ucyk7XG59XG5cbi8vIFRPRE86IHJldmlzaXQgdGhpcyBhZnRlciBpdCBzdGFydHMgYmVpbmcgaW1wbGVtZW50ZWRcbmV4cG9ydCBjb25zdCBtYWtlRGF0ZVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZGlzcGxheURhdGU6IHtcbiAgICB0eXBlOiBPYmplY3QsXG4gICAgZGVmYXVsdDogbmV3IERhdGUoKVxuICB9LFxuICBoaWRlQWRqYWNlbnRNb250aHM6IEJvb2xlYW4sXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBudWxsLFxuICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gIH1cbn0sICdkYXRlJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlRGF0ZSgpIHtcbiAgY29uc3QgZGF0ZSA9IGluamVjdChEYXRlQWRhcHRlclN5bWJvbCk7XG4gIGNvbnN0IGxvY2FsZSA9IHVzZUxvY2FsZSgpO1xuICBpZiAoIWRhdGUpIHRocm93IG5ldyBFcnJvcignW1Z1ZXRpZnldIENvdWxkIG5vdCBmaW5kIGluamVjdGVkIGRhdGUnKTtcbiAgY29uc3QgaW5zdGFuY2UgPSByZWFjdGl2ZSh0eXBlb2YgZGF0ZS5hZGFwdGVyID09PSAnZnVuY3Rpb24nXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gID8gbmV3IGRhdGUuYWRhcHRlcih7XG4gICAgbG9jYWxlOiBkYXRlLmxvY2FsZT8uW2xvY2FsZS5jdXJyZW50LnZhbHVlXSA/PyBsb2NhbGUuY3VycmVudC52YWx1ZVxuICB9KSA6IGRhdGUuYWRhcHRlcik7XG4gIHdhdGNoKGxvY2FsZS5jdXJyZW50LCB2YWx1ZSA9PiB7XG4gICAgY29uc3QgbmV3TG9jYWxlID0gZGF0ZS5sb2NhbGUgPyBkYXRlLmxvY2FsZVt2YWx1ZV0gOiB2YWx1ZTtcbiAgICBpbnN0YW5jZS5sb2NhbGUgPSBuZXdMb2NhbGUgPz8gaW5zdGFuY2UubG9jYWxlO1xuICB9KTtcbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvSXNvKGFkYXB0ZXIsIHZhbHVlKSB7XG4gIGNvbnN0IGRhdGUgPSBhZGFwdGVyLnRvSnNEYXRlKHZhbHVlKTtcbiAgcmV0dXJuIGAke2RhdGUuZ2V0RnVsbFllYXIoKX0tJHtkYXRlLmdldE1vbnRoKCkgKyAxfS0ke2RhdGUuZ2V0RGF0ZSgpfWA7XG59XG5mdW5jdGlvbiBnZXRNb25kYXlPZkZpcnN0V2Vla09mWWVhcih5ZWFyKSB7XG4gIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCAwLCAxKTtcbn1cblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjc0ODYxL2hvdy1kby1pLWNhbGN1bGF0ZS10aGUtd2Vlay1udW1iZXItZ2l2ZW4tYS1kYXRlLzI3NTAyNCMyNzUwMjRcbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrKGFkYXB0ZXIsIHZhbHVlKSB7XG4gIGNvbnN0IGRhdGUgPSBhZGFwdGVyLnRvSnNEYXRlKHZhbHVlKTtcbiAgbGV0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gIGxldCBkMXcxID0gZ2V0TW9uZGF5T2ZGaXJzdFdlZWtPZlllYXIoeWVhcik7XG4gIGlmIChkYXRlIDwgZDF3MSkge1xuICAgIHllYXIgPSB5ZWFyIC0gMTtcbiAgICBkMXcxID0gZ2V0TW9uZGF5T2ZGaXJzdFdlZWtPZlllYXIoeWVhcik7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdHYgPSBnZXRNb25kYXlPZkZpcnN0V2Vla09mWWVhcih5ZWFyICsgMSk7XG4gICAgaWYgKGRhdGUgPj0gdHYpIHtcbiAgICAgIHllYXIgPSB5ZWFyICsgMTtcbiAgICAgIGQxdzEgPSB0djtcbiAgICB9XG4gIH1cbiAgY29uc3QgZGlmZlRpbWUgPSBNYXRoLmFicyhkYXRlLmdldFRpbWUoKSAtIGQxdzEuZ2V0VGltZSgpKTtcbiAgY29uc3QgZGlmZkRheXMgPSBNYXRoLmNlaWwoZGlmZlRpbWUgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmRGF5cyAvIDcpICsgMTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGUubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgb25CZWZvcmVVbm1vdW50LCByZWFkb25seSwgcmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyByZWZFbGVtZW50IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBJTl9CUk9XU0VSIH0gZnJvbSBcIi4uL3V0aWwvZ2xvYmFscy5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBmdW5jdGlvbiB1c2VSZXNpemVPYnNlcnZlcihjYWxsYmFjaykge1xuICBsZXQgYm94ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnY29udGVudCc7XG4gIGNvbnN0IHJlc2l6ZVJlZiA9IHJlZigpO1xuICBjb25zdCBjb250ZW50UmVjdCA9IHJlZigpO1xuICBpZiAoSU5fQlJPV1NFUikge1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgY2FsbGJhY2s/LihlbnRyaWVzLCBvYnNlcnZlcik7XG4gICAgICBpZiAoIWVudHJpZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICBpZiAoYm94ID09PSAnY29udGVudCcpIHtcbiAgICAgICAgY29udGVudFJlY3QudmFsdWUgPSBlbnRyaWVzWzBdLmNvbnRlbnRSZWN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGVudFJlY3QudmFsdWUgPSBlbnRyaWVzWzBdLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0pO1xuICAgIHdhdGNoKHJlc2l6ZVJlZiwgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG9sZFZhbHVlKSB7XG4gICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShyZWZFbGVtZW50KG9sZFZhbHVlKSk7XG4gICAgICAgIGNvbnRlbnRSZWN0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKG5ld1ZhbHVlKSBvYnNlcnZlci5vYnNlcnZlKHJlZkVsZW1lbnQobmV3VmFsdWUpKTtcbiAgICB9LCB7XG4gICAgICBmbHVzaDogJ3Bvc3QnXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByZXNpemVSZWYsXG4gICAgY29udGVudFJlY3Q6IHJlYWRvbmx5KGNvbnRlbnRSZWN0KVxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzaXplT2JzZXJ2ZXIubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VSZXNpemVPYnNlcnZlciB9IGZyb20gXCIuL3Jlc2l6ZU9ic2VydmVyLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBpbmplY3QsIG9uQWN0aXZhdGVkLCBvbkJlZm9yZVVubW91bnQsIG9uRGVhY3RpdmF0ZWQsIG9uTW91bnRlZCwgcHJvdmlkZSwgcmVhY3RpdmUsIHJlZiwgc2hhbGxvd1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBmaW5kQ2hpbGRyZW5XaXRoUHJvdmlkZSwgZ2V0Q3VycmVudEluc3RhbmNlLCBnZXRVaWQsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IFZ1ZXRpZnlMYXlvdXRLZXkgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5OmxheW91dCcpO1xuZXhwb3J0IGNvbnN0IFZ1ZXRpZnlMYXlvdXRJdGVtS2V5ID0gU3ltYm9sLmZvcigndnVldGlmeTpsYXlvdXQtaXRlbScpO1xuY29uc3QgUk9PVF9aSU5ERVggPSAxMDAwO1xuZXhwb3J0IGNvbnN0IG1ha2VMYXlvdXRQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIG92ZXJsYXBzOiB7XG4gICAgdHlwZTogQXJyYXksXG4gICAgZGVmYXVsdDogKCkgPT4gW11cbiAgfSxcbiAgZnVsbEhlaWdodDogQm9vbGVhblxufSwgJ2xheW91dCcpO1xuXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VMYXlvdXRJdGVtUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBuYW1lOiB7XG4gICAgdHlwZTogU3RyaW5nXG4gIH0sXG4gIG9yZGVyOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAwXG4gIH0sXG4gIGFic29sdXRlOiBCb29sZWFuXG59LCAnbGF5b3V0LWl0ZW0nKTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VMYXlvdXQoKSB7XG4gIGNvbnN0IGxheW91dCA9IGluamVjdChWdWV0aWZ5TGF5b3V0S2V5KTtcbiAgaWYgKCFsYXlvdXQpIHRocm93IG5ldyBFcnJvcignW1Z1ZXRpZnldIENvdWxkIG5vdCBmaW5kIGluamVjdGVkIGxheW91dCcpO1xuICByZXR1cm4ge1xuICAgIGdldExheW91dEl0ZW06IGxheW91dC5nZXRMYXlvdXRJdGVtLFxuICAgIG1haW5SZWN0OiBsYXlvdXQubWFpblJlY3QsXG4gICAgbWFpblN0eWxlczogbGF5b3V0Lm1haW5TdHlsZXNcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VMYXlvdXRJdGVtKG9wdGlvbnMpIHtcbiAgY29uc3QgbGF5b3V0ID0gaW5qZWN0KFZ1ZXRpZnlMYXlvdXRLZXkpO1xuICBpZiAoIWxheW91dCkgdGhyb3cgbmV3IEVycm9yKCdbVnVldGlmeV0gQ291bGQgbm90IGZpbmQgaW5qZWN0ZWQgbGF5b3V0Jyk7XG4gIGNvbnN0IGlkID0gb3B0aW9ucy5pZCA/PyBgbGF5b3V0LWl0ZW0tJHtnZXRVaWQoKX1gO1xuICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgndXNlTGF5b3V0SXRlbScpO1xuICBwcm92aWRlKFZ1ZXRpZnlMYXlvdXRJdGVtS2V5LCB7XG4gICAgaWRcbiAgfSk7XG4gIGNvbnN0IGlzS2VwdEFsaXZlID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gIG9uRGVhY3RpdmF0ZWQoKCkgPT4gaXNLZXB0QWxpdmUudmFsdWUgPSB0cnVlKTtcbiAgb25BY3RpdmF0ZWQoKCkgPT4gaXNLZXB0QWxpdmUudmFsdWUgPSBmYWxzZSk7XG4gIGNvbnN0IHtcbiAgICBsYXlvdXRJdGVtU3R5bGVzLFxuICAgIGxheW91dEl0ZW1TY3JpbVN0eWxlc1xuICB9ID0gbGF5b3V0LnJlZ2lzdGVyKHZtLCB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBhY3RpdmU6IGNvbXB1dGVkKCgpID0+IGlzS2VwdEFsaXZlLnZhbHVlID8gZmFsc2UgOiBvcHRpb25zLmFjdGl2ZS52YWx1ZSksXG4gICAgaWRcbiAgfSk7XG4gIG9uQmVmb3JlVW5tb3VudCgoKSA9PiBsYXlvdXQudW5yZWdpc3RlcihpZCkpO1xuICByZXR1cm4ge1xuICAgIGxheW91dEl0ZW1TdHlsZXMsXG4gICAgbGF5b3V0UmVjdDogbGF5b3V0LmxheW91dFJlY3QsXG4gICAgbGF5b3V0SXRlbVNjcmltU3R5bGVzXG4gIH07XG59XG5jb25zdCBnZW5lcmF0ZUxheWVycyA9IChsYXlvdXQsIHBvc2l0aW9ucywgbGF5b3V0U2l6ZXMsIGFjdGl2ZUl0ZW1zKSA9PiB7XG4gIGxldCBwcmV2aW91c0xheWVyID0ge1xuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMFxuICB9O1xuICBjb25zdCBsYXllcnMgPSBbe1xuICAgIGlkOiAnJyxcbiAgICBsYXllcjoge1xuICAgICAgLi4ucHJldmlvdXNMYXllclxuICAgIH1cbiAgfV07XG4gIGZvciAoY29uc3QgaWQgb2YgbGF5b3V0KSB7XG4gICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbnMuZ2V0KGlkKTtcbiAgICBjb25zdCBhbW91bnQgPSBsYXlvdXRTaXplcy5nZXQoaWQpO1xuICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUl0ZW1zLmdldChpZCk7XG4gICAgaWYgKCFwb3NpdGlvbiB8fCAhYW1vdW50IHx8ICFhY3RpdmUpIGNvbnRpbnVlO1xuICAgIGNvbnN0IGxheWVyID0ge1xuICAgICAgLi4ucHJldmlvdXNMYXllcixcbiAgICAgIFtwb3NpdGlvbi52YWx1ZV06IHBhcnNlSW50KHByZXZpb3VzTGF5ZXJbcG9zaXRpb24udmFsdWVdLCAxMCkgKyAoYWN0aXZlLnZhbHVlID8gcGFyc2VJbnQoYW1vdW50LnZhbHVlLCAxMCkgOiAwKVxuICAgIH07XG4gICAgbGF5ZXJzLnB1c2goe1xuICAgICAgaWQsXG4gICAgICBsYXllclxuICAgIH0pO1xuICAgIHByZXZpb3VzTGF5ZXIgPSBsYXllcjtcbiAgfVxuICByZXR1cm4gbGF5ZXJzO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMYXlvdXQocHJvcHMpIHtcbiAgY29uc3QgcGFyZW50TGF5b3V0ID0gaW5qZWN0KFZ1ZXRpZnlMYXlvdXRLZXksIG51bGwpO1xuICBjb25zdCByb290WkluZGV4ID0gY29tcHV0ZWQoKCkgPT4gcGFyZW50TGF5b3V0ID8gcGFyZW50TGF5b3V0LnJvb3RaSW5kZXgudmFsdWUgLSAxMDAgOiBST09UX1pJTkRFWCk7XG4gIGNvbnN0IHJlZ2lzdGVyZWQgPSByZWYoW10pO1xuICBjb25zdCBwb3NpdGlvbnMgPSByZWFjdGl2ZShuZXcgTWFwKCkpO1xuICBjb25zdCBsYXlvdXRTaXplcyA9IHJlYWN0aXZlKG5ldyBNYXAoKSk7XG4gIGNvbnN0IHByaW9yaXRpZXMgPSByZWFjdGl2ZShuZXcgTWFwKCkpO1xuICBjb25zdCBhY3RpdmVJdGVtcyA9IHJlYWN0aXZlKG5ldyBNYXAoKSk7XG4gIGNvbnN0IGRpc2FibGVkVHJhbnNpdGlvbnMgPSByZWFjdGl2ZShuZXcgTWFwKCkpO1xuICBjb25zdCB7XG4gICAgcmVzaXplUmVmLFxuICAgIGNvbnRlbnRSZWN0OiBsYXlvdXRSZWN0XG4gIH0gPSB1c2VSZXNpemVPYnNlcnZlcigpO1xuICBjb25zdCBjb21wdXRlZE92ZXJsYXBzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBvdmVybGFwcyA9IHByb3BzLm92ZXJsYXBzID8/IFtdO1xuICAgIGZvciAoY29uc3Qgb3ZlcmxhcCBvZiBvdmVybGFwcy5maWx0ZXIoaXRlbSA9PiBpdGVtLmluY2x1ZGVzKCc6JykpKSB7XG4gICAgICBjb25zdCBbdG9wLCBib3R0b21dID0gb3ZlcmxhcC5zcGxpdCgnOicpO1xuICAgICAgaWYgKCFyZWdpc3RlcmVkLnZhbHVlLmluY2x1ZGVzKHRvcCkgfHwgIXJlZ2lzdGVyZWQudmFsdWUuaW5jbHVkZXMoYm90dG9tKSkgY29udGludWU7XG4gICAgICBjb25zdCB0b3BQb3NpdGlvbiA9IHBvc2l0aW9ucy5nZXQodG9wKTtcbiAgICAgIGNvbnN0IGJvdHRvbVBvc2l0aW9uID0gcG9zaXRpb25zLmdldChib3R0b20pO1xuICAgICAgY29uc3QgdG9wQW1vdW50ID0gbGF5b3V0U2l6ZXMuZ2V0KHRvcCk7XG4gICAgICBjb25zdCBib3R0b21BbW91bnQgPSBsYXlvdXRTaXplcy5nZXQoYm90dG9tKTtcbiAgICAgIGlmICghdG9wUG9zaXRpb24gfHwgIWJvdHRvbVBvc2l0aW9uIHx8ICF0b3BBbW91bnQgfHwgIWJvdHRvbUFtb3VudCkgY29udGludWU7XG4gICAgICBtYXAuc2V0KGJvdHRvbSwge1xuICAgICAgICBwb3NpdGlvbjogdG9wUG9zaXRpb24udmFsdWUsXG4gICAgICAgIGFtb3VudDogcGFyc2VJbnQodG9wQW1vdW50LnZhbHVlLCAxMClcbiAgICAgIH0pO1xuICAgICAgbWFwLnNldCh0b3AsIHtcbiAgICAgICAgcG9zaXRpb246IGJvdHRvbVBvc2l0aW9uLnZhbHVlLFxuICAgICAgICBhbW91bnQ6IC1wYXJzZUludChib3R0b21BbW91bnQudmFsdWUsIDEwKVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG4gIH0pO1xuICBjb25zdCBsYXllcnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgdW5pcXVlUHJpb3JpdGllcyA9IFsuLi5uZXcgU2V0KFsuLi5wcmlvcml0aWVzLnZhbHVlcygpXS5tYXAocCA9PiBwLnZhbHVlKSldLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICBjb25zdCBsYXlvdXQgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHAgb2YgdW5pcXVlUHJpb3JpdGllcykge1xuICAgICAgY29uc3QgaXRlbXMgPSByZWdpc3RlcmVkLnZhbHVlLmZpbHRlcihpZCA9PiBwcmlvcml0aWVzLmdldChpZCk/LnZhbHVlID09PSBwKTtcbiAgICAgIGxheW91dC5wdXNoKC4uLml0ZW1zKTtcbiAgICB9XG4gICAgcmV0dXJuIGdlbmVyYXRlTGF5ZXJzKGxheW91dCwgcG9zaXRpb25zLCBsYXlvdXRTaXplcywgYWN0aXZlSXRlbXMpO1xuICB9KTtcbiAgY29uc3QgdHJhbnNpdGlvbnNFbmFibGVkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiAhQXJyYXkuZnJvbShkaXNhYmxlZFRyYW5zaXRpb25zLnZhbHVlcygpKS5zb21lKHJlZiA9PiByZWYudmFsdWUpO1xuICB9KTtcbiAgY29uc3QgbWFpblJlY3QgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIGxheWVycy52YWx1ZVtsYXllcnMudmFsdWUubGVuZ3RoIC0gMV0ubGF5ZXI7XG4gIH0pO1xuICBjb25zdCBtYWluU3R5bGVzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAnLS12LWxheW91dC1sZWZ0JzogY29udmVydFRvVW5pdChtYWluUmVjdC52YWx1ZS5sZWZ0KSxcbiAgICAgICctLXYtbGF5b3V0LXJpZ2h0JzogY29udmVydFRvVW5pdChtYWluUmVjdC52YWx1ZS5yaWdodCksXG4gICAgICAnLS12LWxheW91dC10b3AnOiBjb252ZXJ0VG9Vbml0KG1haW5SZWN0LnZhbHVlLnRvcCksXG4gICAgICAnLS12LWxheW91dC1ib3R0b20nOiBjb252ZXJ0VG9Vbml0KG1haW5SZWN0LnZhbHVlLmJvdHRvbSksXG4gICAgICAuLi4odHJhbnNpdGlvbnNFbmFibGVkLnZhbHVlID8gdW5kZWZpbmVkIDoge1xuICAgICAgICB0cmFuc2l0aW9uOiAnbm9uZSdcbiAgICAgIH0pXG4gICAgfTtcbiAgfSk7XG4gIGNvbnN0IGl0ZW1zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBsYXllcnMudmFsdWUuc2xpY2UoMSkubWFwKChfcmVmLCBpbmRleCkgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgaWRcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgY29uc3Qge1xuICAgICAgICBsYXllclxuICAgICAgfSA9IGxheWVycy52YWx1ZVtpbmRleF07XG4gICAgICBjb25zdCBzaXplID0gbGF5b3V0U2l6ZXMuZ2V0KGlkKTtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25zLmdldChpZCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZCxcbiAgICAgICAgLi4ubGF5ZXIsXG4gICAgICAgIHNpemU6IE51bWJlcihzaXplLnZhbHVlKSxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLnZhbHVlXG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcbiAgY29uc3QgZ2V0TGF5b3V0SXRlbSA9IGlkID0+IHtcbiAgICByZXR1cm4gaXRlbXMudmFsdWUuZmluZChpdGVtID0+IGl0ZW0uaWQgPT09IGlkKTtcbiAgfTtcbiAgY29uc3Qgcm9vdFZtID0gZ2V0Q3VycmVudEluc3RhbmNlKCdjcmVhdGVMYXlvdXQnKTtcbiAgY29uc3QgaXNNb3VudGVkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgaXNNb3VudGVkLnZhbHVlID0gdHJ1ZTtcbiAgfSk7XG4gIHByb3ZpZGUoVnVldGlmeUxheW91dEtleSwge1xuICAgIHJlZ2lzdGVyOiAodm0sIF9yZWYyKSA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBpZCxcbiAgICAgICAgb3JkZXIsXG4gICAgICAgIHBvc2l0aW9uLFxuICAgICAgICBsYXlvdXRTaXplLFxuICAgICAgICBlbGVtZW50U2l6ZSxcbiAgICAgICAgYWN0aXZlLFxuICAgICAgICBkaXNhYmxlVHJhbnNpdGlvbnMsXG4gICAgICAgIGFic29sdXRlXG4gICAgICB9ID0gX3JlZjI7XG4gICAgICBwcmlvcml0aWVzLnNldChpZCwgb3JkZXIpO1xuICAgICAgcG9zaXRpb25zLnNldChpZCwgcG9zaXRpb24pO1xuICAgICAgbGF5b3V0U2l6ZXMuc2V0KGlkLCBsYXlvdXRTaXplKTtcbiAgICAgIGFjdGl2ZUl0ZW1zLnNldChpZCwgYWN0aXZlKTtcbiAgICAgIGRpc2FibGVUcmFuc2l0aW9ucyAmJiBkaXNhYmxlZFRyYW5zaXRpb25zLnNldChpZCwgZGlzYWJsZVRyYW5zaXRpb25zKTtcbiAgICAgIGNvbnN0IGluc3RhbmNlcyA9IGZpbmRDaGlsZHJlbldpdGhQcm92aWRlKFZ1ZXRpZnlMYXlvdXRJdGVtS2V5LCByb290Vm0/LnZub2RlKTtcbiAgICAgIGNvbnN0IGluc3RhbmNlSW5kZXggPSBpbnN0YW5jZXMuaW5kZXhPZih2bSk7XG4gICAgICBpZiAoaW5zdGFuY2VJbmRleCA+IC0xKSByZWdpc3RlcmVkLnZhbHVlLnNwbGljZShpbnN0YW5jZUluZGV4LCAwLCBpZCk7ZWxzZSByZWdpc3RlcmVkLnZhbHVlLnB1c2goaWQpO1xuICAgICAgY29uc3QgaW5kZXggPSBjb21wdXRlZCgoKSA9PiBpdGVtcy52YWx1ZS5maW5kSW5kZXgoaSA9PiBpLmlkID09PSBpZCkpO1xuICAgICAgY29uc3QgekluZGV4ID0gY29tcHV0ZWQoKCkgPT4gcm9vdFpJbmRleC52YWx1ZSArIGxheWVycy52YWx1ZS5sZW5ndGggKiAyIC0gaW5kZXgudmFsdWUgKiAyKTtcbiAgICAgIGNvbnN0IGxheW91dEl0ZW1TdHlsZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHBvc2l0aW9uLnZhbHVlID09PSAnbGVmdCcgfHwgcG9zaXRpb24udmFsdWUgPT09ICdyaWdodCc7XG4gICAgICAgIGNvbnN0IGlzT3Bwb3NpdGVIb3Jpem9udGFsID0gcG9zaXRpb24udmFsdWUgPT09ICdyaWdodCc7XG4gICAgICAgIGNvbnN0IGlzT3Bwb3NpdGVWZXJ0aWNhbCA9IHBvc2l0aW9uLnZhbHVlID09PSAnYm90dG9tJztcbiAgICAgICAgY29uc3Qgc3R5bGVzID0ge1xuICAgICAgICAgIFtwb3NpdGlvbi52YWx1ZV06IDAsXG4gICAgICAgICAgekluZGV4OiB6SW5kZXgudmFsdWUsXG4gICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlJHtpc0hvcml6b250YWwgPyAnWCcgOiAnWSd9KCR7KGFjdGl2ZS52YWx1ZSA/IDAgOiAtMTEwKSAqIChpc09wcG9zaXRlSG9yaXpvbnRhbCB8fCBpc09wcG9zaXRlVmVydGljYWwgPyAtMSA6IDEpfSUpYCxcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGUudmFsdWUgfHwgcm9vdFpJbmRleC52YWx1ZSAhPT0gUk9PVF9aSU5ERVggPyAnYWJzb2x1dGUnIDogJ2ZpeGVkJyxcbiAgICAgICAgICAuLi4odHJhbnNpdGlvbnNFbmFibGVkLnZhbHVlID8gdW5kZWZpbmVkIDoge1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogJ25vbmUnXG4gICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFpc01vdW50ZWQudmFsdWUpIHJldHVybiBzdHlsZXM7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtcy52YWx1ZVtpbmRleC52YWx1ZV07XG4gICAgICAgIGlmICghaXRlbSkgdGhyb3cgbmV3IEVycm9yKGBbVnVldGlmeV0gQ291bGQgbm90IGZpbmQgbGF5b3V0IGl0ZW0gXCIke2lkfVwiYCk7XG4gICAgICAgIGNvbnN0IG92ZXJsYXAgPSBjb21wdXRlZE92ZXJsYXBzLnZhbHVlLmdldChpZCk7XG4gICAgICAgIGlmIChvdmVybGFwKSB7XG4gICAgICAgICAgaXRlbVtvdmVybGFwLnBvc2l0aW9uXSArPSBvdmVybGFwLmFtb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0eWxlcyxcbiAgICAgICAgICBoZWlnaHQ6IGlzSG9yaXpvbnRhbCA/IGBjYWxjKDEwMCUgLSAke2l0ZW0udG9wfXB4IC0gJHtpdGVtLmJvdHRvbX1weClgIDogZWxlbWVudFNpemUudmFsdWUgPyBgJHtlbGVtZW50U2l6ZS52YWx1ZX1weGAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbGVmdDogaXNPcHBvc2l0ZUhvcml6b250YWwgPyB1bmRlZmluZWQgOiBgJHtpdGVtLmxlZnR9cHhgLFxuICAgICAgICAgIHJpZ2h0OiBpc09wcG9zaXRlSG9yaXpvbnRhbCA/IGAke2l0ZW0ucmlnaHR9cHhgIDogdW5kZWZpbmVkLFxuICAgICAgICAgIHRvcDogcG9zaXRpb24udmFsdWUgIT09ICdib3R0b20nID8gYCR7aXRlbS50b3B9cHhgIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGJvdHRvbTogcG9zaXRpb24udmFsdWUgIT09ICd0b3AnID8gYCR7aXRlbS5ib3R0b219cHhgIDogdW5kZWZpbmVkLFxuICAgICAgICAgIHdpZHRoOiAhaXNIb3Jpem9udGFsID8gYGNhbGMoMTAwJSAtICR7aXRlbS5sZWZ0fXB4IC0gJHtpdGVtLnJpZ2h0fXB4KWAgOiBlbGVtZW50U2l6ZS52YWx1ZSA/IGAke2VsZW1lbnRTaXplLnZhbHVlfXB4YCA6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICBjb25zdCBsYXlvdXRJdGVtU2NyaW1TdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgICB6SW5kZXg6IHpJbmRleC52YWx1ZSAtIDFcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxheW91dEl0ZW1TdHlsZXMsXG4gICAgICAgIGxheW91dEl0ZW1TY3JpbVN0eWxlcyxcbiAgICAgICAgekluZGV4XG4gICAgICB9O1xuICAgIH0sXG4gICAgdW5yZWdpc3RlcjogaWQgPT4ge1xuICAgICAgcHJpb3JpdGllcy5kZWxldGUoaWQpO1xuICAgICAgcG9zaXRpb25zLmRlbGV0ZShpZCk7XG4gICAgICBsYXlvdXRTaXplcy5kZWxldGUoaWQpO1xuICAgICAgYWN0aXZlSXRlbXMuZGVsZXRlKGlkKTtcbiAgICAgIGRpc2FibGVkVHJhbnNpdGlvbnMuZGVsZXRlKGlkKTtcbiAgICAgIHJlZ2lzdGVyZWQudmFsdWUgPSByZWdpc3RlcmVkLnZhbHVlLmZpbHRlcih2ID0+IHYgIT09IGlkKTtcbiAgICB9LFxuICAgIG1haW5SZWN0LFxuICAgIG1haW5TdHlsZXMsXG4gICAgZ2V0TGF5b3V0SXRlbSxcbiAgICBpdGVtcyxcbiAgICBsYXlvdXRSZWN0LFxuICAgIHJvb3RaSW5kZXhcbiAgfSk7XG4gIGNvbnN0IGxheW91dENsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiBbJ3YtbGF5b3V0Jywge1xuICAgICd2LWxheW91dC0tZnVsbC1oZWlnaHQnOiBwcm9wcy5mdWxsSGVpZ2h0XG4gIH1dKTtcbiAgY29uc3QgbGF5b3V0U3R5bGVzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICB6SW5kZXg6IHBhcmVudExheW91dCA/IHJvb3RaSW5kZXgudmFsdWUgOiB1bmRlZmluZWQsXG4gICAgcG9zaXRpb246IHBhcmVudExheW91dCA/ICdyZWxhdGl2ZScgOiB1bmRlZmluZWQsXG4gICAgb3ZlcmZsb3c6IHBhcmVudExheW91dCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gIH0pKTtcbiAgcmV0dXJuIHtcbiAgICBsYXlvdXRDbGFzc2VzLFxuICAgIGxheW91dFN0eWxlcyxcbiAgICBnZXRMYXlvdXRJdGVtLFxuICAgIGl0ZW1zLFxuICAgIGxheW91dFJlY3QsXG4gICAgbGF5b3V0UmVmOiByZXNpemVSZWZcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxheW91dC5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IGNyZWF0ZURlZmF1bHRzLCBEZWZhdWx0c1N5bWJvbCB9IGZyb20gXCIuL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiO1xuaW1wb3J0IHsgY3JlYXRlRGlzcGxheSwgRGlzcGxheVN5bWJvbCB9IGZyb20gXCIuL2NvbXBvc2FibGVzL2Rpc3BsYXkubWpzXCI7XG5pbXBvcnQgeyBjcmVhdGVJY29ucywgSWNvblN5bWJvbCB9IGZyb20gXCIuL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYWxlLCBMb2NhbGVTeW1ib2wgfSBmcm9tIFwiLi9jb21wb3NhYmxlcy9sb2NhbGUubWpzXCI7XG5pbXBvcnQgeyBjcmVhdGVUaGVtZSwgVGhlbWVTeW1ib2wgfSBmcm9tIFwiLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjtcbmltcG9ydCB7IGNyZWF0ZURhdGUsIERhdGVBZGFwdGVyU3ltYm9sIH0gZnJvbSBcIi4vbGFicy9kYXRlL2RhdGUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgbmV4dFRpY2ssIHJlYWN0aXZlIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgZ2V0VWlkLCBJTl9CUk9XU0VSLCBtZXJnZURlZXAgfSBmcm9tIFwiLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0ICogZnJvbSBcIi4vY29tcG9zYWJsZXMvaW5kZXgubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVnVldGlmeSgpIHtcbiAgbGV0IHZ1ZXRpZnkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICBjb25zdCB7XG4gICAgYmx1ZXByaW50LFxuICAgIC4uLnJlc3RcbiAgfSA9IHZ1ZXRpZnk7XG4gIGNvbnN0IG9wdGlvbnMgPSBtZXJnZURlZXAoYmx1ZXByaW50LCByZXN0KTtcbiAgY29uc3Qge1xuICAgIGFsaWFzZXMgPSB7fSxcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgZGlyZWN0aXZlcyA9IHt9XG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBkZWZhdWx0cyA9IGNyZWF0ZURlZmF1bHRzKG9wdGlvbnMuZGVmYXVsdHMpO1xuICBjb25zdCBkaXNwbGF5ID0gY3JlYXRlRGlzcGxheShvcHRpb25zLmRpc3BsYXksIG9wdGlvbnMuc3NyKTtcbiAgY29uc3QgdGhlbWUgPSBjcmVhdGVUaGVtZShvcHRpb25zLnRoZW1lKTtcbiAgY29uc3QgaWNvbnMgPSBjcmVhdGVJY29ucyhvcHRpb25zLmljb25zKTtcbiAgY29uc3QgbG9jYWxlID0gY3JlYXRlTG9jYWxlKG9wdGlvbnMubG9jYWxlKTtcbiAgY29uc3QgZGF0ZSA9IGNyZWF0ZURhdGUob3B0aW9ucy5kYXRlKTtcbiAgY29uc3QgaW5zdGFsbCA9IGFwcCA9PiB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGlyZWN0aXZlcykge1xuICAgICAgYXBwLmRpcmVjdGl2ZShrZXksIGRpcmVjdGl2ZXNba2V5XSk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIGNvbXBvbmVudHMpIHtcbiAgICAgIGFwcC5jb21wb25lbnQoa2V5LCBjb21wb25lbnRzW2tleV0pO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhbGlhc2VzKSB7XG4gICAgICBhcHAuY29tcG9uZW50KGtleSwgZGVmaW5lQ29tcG9uZW50KHtcbiAgICAgICAgLi4uYWxpYXNlc1trZXldLFxuICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgIGFsaWFzTmFtZTogYWxpYXNlc1trZXldLm5hbWVcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgdGhlbWUuaW5zdGFsbChhcHApO1xuICAgIGFwcC5wcm92aWRlKERlZmF1bHRzU3ltYm9sLCBkZWZhdWx0cyk7XG4gICAgYXBwLnByb3ZpZGUoRGlzcGxheVN5bWJvbCwgZGlzcGxheSk7XG4gICAgYXBwLnByb3ZpZGUoVGhlbWVTeW1ib2wsIHRoZW1lKTtcbiAgICBhcHAucHJvdmlkZShJY29uU3ltYm9sLCBpY29ucyk7XG4gICAgYXBwLnByb3ZpZGUoTG9jYWxlU3ltYm9sLCBsb2NhbGUpO1xuICAgIGFwcC5wcm92aWRlKERhdGVBZGFwdGVyU3ltYm9sLCBkYXRlKTtcbiAgICBpZiAoSU5fQlJPV1NFUiAmJiBvcHRpb25zLnNzcikge1xuICAgICAgaWYgKGFwcC4kbnV4dCkge1xuICAgICAgICBhcHAuJG51eHQuaG9vaygnYXBwOnN1c3BlbnNlOnJlc29sdmUnLCAoKSA9PiB7XG4gICAgICAgICAgZGlzcGxheS51cGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgbW91bnRcbiAgICAgICAgfSA9IGFwcDtcbiAgICAgICAgYXBwLm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnN0IHZtID0gbW91bnQoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgICBuZXh0VGljaygoKSA9PiBkaXNwbGF5LnVwZGF0ZSgpKTtcbiAgICAgICAgICBhcHAubW91bnQgPSBtb3VudDtcbiAgICAgICAgICByZXR1cm4gdm07XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIGdldFVpZC5yZXNldCgpO1xuICAgIGlmICh0eXBlb2YgX19WVUVfT1BUSU9OU19BUElfXyAhPT0gJ2Jvb2xlYW4nIHx8IF9fVlVFX09QVElPTlNfQVBJX18pIHtcbiAgICAgIGFwcC5taXhpbih7XG4gICAgICAgIGNvbXB1dGVkOiB7XG4gICAgICAgICAgJHZ1ZXRpZnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhY3RpdmUoe1xuICAgICAgICAgICAgICBkZWZhdWx0czogaW5qZWN0LmNhbGwodGhpcywgRGVmYXVsdHNTeW1ib2wpLFxuICAgICAgICAgICAgICBkaXNwbGF5OiBpbmplY3QuY2FsbCh0aGlzLCBEaXNwbGF5U3ltYm9sKSxcbiAgICAgICAgICAgICAgdGhlbWU6IGluamVjdC5jYWxsKHRoaXMsIFRoZW1lU3ltYm9sKSxcbiAgICAgICAgICAgICAgaWNvbnM6IGluamVjdC5jYWxsKHRoaXMsIEljb25TeW1ib2wpLFxuICAgICAgICAgICAgICBsb2NhbGU6IGluamVjdC5jYWxsKHRoaXMsIExvY2FsZVN5bWJvbCksXG4gICAgICAgICAgICAgIGRhdGU6IGluamVjdC5jYWxsKHRoaXMsIERhdGVBZGFwdGVyU3ltYm9sKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgaW5zdGFsbCxcbiAgICBkZWZhdWx0cyxcbiAgICBkaXNwbGF5LFxuICAgIHRoZW1lLFxuICAgIGljb25zLFxuICAgIGxvY2FsZSxcbiAgICBkYXRlXG4gIH07XG59XG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiMy4zLjE5XCI7XG5jcmVhdGVWdWV0aWZ5LnZlcnNpb24gPSB2ZXJzaW9uO1xuXG4vLyBWdWUncyBpbmplY3QoKSBjYW4gb25seSBiZSB1c2VkIGluIHNldHVwXG5mdW5jdGlvbiBpbmplY3Qoa2V5KSB7XG4gIGNvbnN0IHZtID0gdGhpcy4kO1xuICBjb25zdCBwcm92aWRlcyA9IHZtLnBhcmVudD8ucHJvdmlkZXMgPz8gdm0udm5vZGUuYXBwQ29udGV4dD8ucHJvdmlkZXM7XG4gIGlmIChwcm92aWRlcyAmJiBrZXkgaW4gcHJvdmlkZXMpIHtcbiAgICByZXR1cm4gcHJvdmlkZXNba2V5XTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJhbWV3b3JrLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkFwcC5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBjcmVhdGVMYXlvdXQsIG1ha2VMYXlvdXRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sYXlvdXQubWpzXCI7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWQXBwUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUxheW91dFByb3BzKHtcbiAgICBmdWxsSGVpZ2h0OiB0cnVlXG4gIH0pLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpXG59LCAnVkFwcCcpO1xuZXhwb3J0IGNvbnN0IFZBcHAgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkFwcCcsXG4gIHByb3BzOiBtYWtlVkFwcFByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgdGhlbWUgPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxheW91dENsYXNzZXMsXG4gICAgICBnZXRMYXlvdXRJdGVtLFxuICAgICAgaXRlbXMsXG4gICAgICBsYXlvdXRSZWZcbiAgICB9ID0gY3JlYXRlTGF5b3V0KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBydGxDbGFzc2VzXG4gICAgfSA9IHVzZVJ0bCgpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJyZWZcIjogbGF5b3V0UmVmLFxuICAgICAgXCJjbGFzc1wiOiBbJ3YtYXBwbGljYXRpb24nLCB0aGVtZS50aGVtZUNsYXNzZXMudmFsdWUsIGxheW91dENsYXNzZXMudmFsdWUsIHJ0bENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW3Byb3BzLnN0eWxlXVxuICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBcInYtYXBwbGljYXRpb25fX3dyYXBcIlxuICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKV0pXSkpO1xuICAgIHJldHVybiB7XG4gICAgICBnZXRMYXlvdXRJdGVtLFxuICAgICAgaXRlbXMsXG4gICAgICB0aGVtZVxuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkFwcC5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbi8vIENvbXBvc2FibGVzXG5leHBvcnQgY29uc3QgbWFrZVRhZ1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgdGFnOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdkaXYnXG4gIH1cbn0sICd0YWcnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRhZy5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZUb29sYmFyVGl0bGVQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHRleHQ6IFN0cmluZyxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpXG59LCAnVlRvb2xiYXJUaXRsZScpO1xuZXhwb3J0IGNvbnN0IFZUb29sYmFyVGl0bGUgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlRvb2xiYXJUaXRsZScsXG4gIHByb3BzOiBtYWtlVlRvb2xiYXJUaXRsZVByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IGhhc1RleHQgPSAhIShzbG90cy5kZWZhdWx0IHx8IHNsb3RzLnRleHQgfHwgcHJvcHMudGV4dCk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi10b29sYmFyLXRpdGxlJywgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtoYXNUZXh0ICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtdG9vbGJhci10aXRsZV9fcGxhY2Vob2xkZXJcIlxuICAgICAgICB9LCBbc2xvdHMudGV4dCA/IHNsb3RzLnRleHQoKSA6IHByb3BzLnRleHQsIHNsb3RzLmRlZmF1bHQ/LigpXSldXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlRvb2xiYXJUaXRsZS5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBoLCBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVRyYW5zaXRpb25Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICBncm91cDogQm9vbGVhbixcbiAgaGlkZU9uTGVhdmU6IEJvb2xlYW4sXG4gIGxlYXZlQWJzb2x1dGU6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgb3JpZ2luOiBTdHJpbmdcbn0sICd0cmFuc2l0aW9uJyk7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ3NzVHJhbnNpdGlvbihuYW1lLCBvcmlnaW4sIG1vZGUpIHtcbiAgcmV0dXJuIGdlbmVyaWNDb21wb25lbnQoKSh7XG4gICAgbmFtZSxcbiAgICBwcm9wczogbWFrZVRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBtb2RlLFxuICAgICAgb3JpZ2luXG4gICAgfSksXG4gICAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIHNsb3RzXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIGNvbnN0IGZ1bmN0aW9ucyA9IHtcbiAgICAgICAgb25CZWZvcmVFbnRlcihlbCkge1xuICAgICAgICAgIGlmIChwcm9wcy5vcmlnaW4pIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IHByb3BzLm9yaWdpbjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uTGVhdmUoZWwpIHtcbiAgICAgICAgICBpZiAocHJvcHMubGVhdmVBYnNvbHV0ZSkge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICBvZmZzZXRUb3AsXG4gICAgICAgICAgICAgIG9mZnNldExlZnQsXG4gICAgICAgICAgICAgIG9mZnNldFdpZHRoLFxuICAgICAgICAgICAgICBvZmZzZXRIZWlnaHRcbiAgICAgICAgICAgIH0gPSBlbDtcbiAgICAgICAgICAgIGVsLl90cmFuc2l0aW9uSW5pdGlhbFN0eWxlcyA9IHtcbiAgICAgICAgICAgICAgcG9zaXRpb246IGVsLnN0eWxlLnBvc2l0aW9uLFxuICAgICAgICAgICAgICB0b3A6IGVsLnN0eWxlLnRvcCxcbiAgICAgICAgICAgICAgbGVmdDogZWwuc3R5bGUubGVmdCxcbiAgICAgICAgICAgICAgd2lkdGg6IGVsLnN0eWxlLndpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHQ6IGVsLnN0eWxlLmhlaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGVsLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICAgIGVsLnN0eWxlLnRvcCA9IGAke29mZnNldFRvcH1weGA7XG4gICAgICAgICAgICBlbC5zdHlsZS5sZWZ0ID0gYCR7b2Zmc2V0TGVmdH1weGA7XG4gICAgICAgICAgICBlbC5zdHlsZS53aWR0aCA9IGAke29mZnNldFdpZHRofXB4YDtcbiAgICAgICAgICAgIGVsLnN0eWxlLmhlaWdodCA9IGAke29mZnNldEhlaWdodH1weGA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcm9wcy5oaWRlT25MZWF2ZSkge1xuICAgICAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnbm9uZScsICdpbXBvcnRhbnQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uQWZ0ZXJMZWF2ZShlbCkge1xuICAgICAgICAgIGlmIChwcm9wcy5sZWF2ZUFic29sdXRlICYmIGVsPy5fdHJhbnNpdGlvbkluaXRpYWxTdHlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgICAgfSA9IGVsLl90cmFuc2l0aW9uSW5pdGlhbFN0eWxlcztcbiAgICAgICAgICAgIGRlbGV0ZSBlbC5fdHJhbnNpdGlvbkluaXRpYWxTdHlsZXM7XG4gICAgICAgICAgICBlbC5zdHlsZS5wb3NpdGlvbiA9IHBvc2l0aW9uIHx8ICcnO1xuICAgICAgICAgICAgZWwuc3R5bGUudG9wID0gdG9wIHx8ICcnO1xuICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IGxlZnQgfHwgJyc7XG4gICAgICAgICAgICBlbC5zdHlsZS53aWR0aCA9IHdpZHRoIHx8ICcnO1xuICAgICAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0IHx8ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhZyA9IHByb3BzLmdyb3VwID8gVHJhbnNpdGlvbkdyb3VwIDogVHJhbnNpdGlvbjtcbiAgICAgICAgcmV0dXJuIGgodGFnLCB7XG4gICAgICAgICAgbmFtZTogcHJvcHMuZGlzYWJsZWQgPyAnJyA6IG5hbWUsXG4gICAgICAgICAgY3NzOiAhcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgLi4uKHByb3BzLmdyb3VwID8gdW5kZWZpbmVkIDoge1xuICAgICAgICAgICAgbW9kZTogcHJvcHMubW9kZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIC4uLihwcm9wcy5kaXNhYmxlZCA/IHt9IDogZnVuY3Rpb25zKVxuICAgICAgICB9LCBzbG90cy5kZWZhdWx0KTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVKYXZhc2NyaXB0VHJhbnNpdGlvbihuYW1lLCBmdW5jdGlvbnMpIHtcbiAgbGV0IG1vZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdpbi1vdXQnO1xuICByZXR1cm4gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgICBuYW1lLFxuICAgIHByb3BzOiB7XG4gICAgICBtb2RlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogbW9kZVxuICAgICAgfSxcbiAgICAgIGRpc2FibGVkOiBCb29sZWFuXG4gICAgfSxcbiAgICBzZXR1cChwcm9wcywgX3JlZjIpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIHNsb3RzXG4gICAgICB9ID0gX3JlZjI7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICByZXR1cm4gaChUcmFuc2l0aW9uLCB7XG4gICAgICAgICAgbmFtZTogcHJvcHMuZGlzYWJsZWQgPyAnJyA6IG5hbWUsXG4gICAgICAgICAgY3NzOiAhcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgLy8gbW9kZTogcHJvcHMubW9kZSwgLy8gVE9ETzogdnVlanMvdnVlLW5leHQjMzEwNFxuICAgICAgICAgIC4uLihwcm9wcy5kaXNhYmxlZCA/IHt9IDogZnVuY3Rpb25zKVxuICAgICAgICB9LCBzbG90cy5kZWZhdWx0KTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVRyYW5zaXRpb24ubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY2FtZWxpemUgfSBmcm9tICd2dWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICBsZXQgZXhwYW5kZWRQYXJlbnRDbGFzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XG4gIGxldCB4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgY29uc3Qgc2l6ZVByb3BlcnR5ID0geCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgY29uc3Qgb2Zmc2V0UHJvcGVydHkgPSBjYW1lbGl6ZShgb2Zmc2V0LSR7c2l6ZVByb3BlcnR5fWApO1xuICByZXR1cm4ge1xuICAgIG9uQmVmb3JlRW50ZXIoZWwpIHtcbiAgICAgIGVsLl9wYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgZWwuX2luaXRpYWxTdHlsZSA9IHtcbiAgICAgICAgdHJhbnNpdGlvbjogZWwuc3R5bGUudHJhbnNpdGlvbixcbiAgICAgICAgb3ZlcmZsb3c6IGVsLnN0eWxlLm92ZXJmbG93LFxuICAgICAgICBbc2l6ZVByb3BlcnR5XTogZWwuc3R5bGVbc2l6ZVByb3BlcnR5XVxuICAgICAgfTtcbiAgICB9LFxuICAgIG9uRW50ZXIoZWwpIHtcbiAgICAgIGNvbnN0IGluaXRpYWxTdHlsZSA9IGVsLl9pbml0aWFsU3R5bGU7XG4gICAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgndHJhbnNpdGlvbicsICdub25lJywgJ2ltcG9ydGFudCcpO1xuICAgICAgLy8gSGlkZSBvdmVyZmxvdyB0byBhY2NvdW50IGZvciBjb2xsYXBzZWQgbWFyZ2lucyBpbiB0aGUgY2FsY3VsYXRlZCBoZWlnaHRcbiAgICAgIGVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICBjb25zdCBvZmZzZXQgPSBgJHtlbFtvZmZzZXRQcm9wZXJ0eV19cHhgO1xuICAgICAgZWwuc3R5bGVbc2l6ZVByb3BlcnR5XSA9ICcwJztcbiAgICAgIHZvaWQgZWwub2Zmc2V0SGVpZ2h0OyAvLyBmb3JjZSByZWZsb3dcblxuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbiA9IGluaXRpYWxTdHlsZS50cmFuc2l0aW9uO1xuICAgICAgaWYgKGV4cGFuZGVkUGFyZW50Q2xhc3MgJiYgZWwuX3BhcmVudCkge1xuICAgICAgICBlbC5fcGFyZW50LmNsYXNzTGlzdC5hZGQoZXhwYW5kZWRQYXJlbnRDbGFzcyk7XG4gICAgICB9XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBlbC5zdHlsZVtzaXplUHJvcGVydHldID0gb2Zmc2V0O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbkFmdGVyRW50ZXI6IHJlc2V0U3R5bGVzLFxuICAgIG9uRW50ZXJDYW5jZWxsZWQ6IHJlc2V0U3R5bGVzLFxuICAgIG9uTGVhdmUoZWwpIHtcbiAgICAgIGVsLl9pbml0aWFsU3R5bGUgPSB7XG4gICAgICAgIHRyYW5zaXRpb246ICcnLFxuICAgICAgICBvdmVyZmxvdzogZWwuc3R5bGUub3ZlcmZsb3csXG4gICAgICAgIFtzaXplUHJvcGVydHldOiBlbC5zdHlsZVtzaXplUHJvcGVydHldXG4gICAgICB9O1xuICAgICAgZWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgIGVsLnN0eWxlW3NpemVQcm9wZXJ0eV0gPSBgJHtlbFtvZmZzZXRQcm9wZXJ0eV19cHhgO1xuICAgICAgdm9pZCBlbC5vZmZzZXRIZWlnaHQ7IC8vIGZvcmNlIHJlZmxvd1xuXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gZWwuc3R5bGVbc2l6ZVByb3BlcnR5XSA9ICcwJyk7XG4gICAgfSxcbiAgICBvbkFmdGVyTGVhdmUsXG4gICAgb25MZWF2ZUNhbmNlbGxlZDogb25BZnRlckxlYXZlXG4gIH07XG4gIGZ1bmN0aW9uIG9uQWZ0ZXJMZWF2ZShlbCkge1xuICAgIGlmIChleHBhbmRlZFBhcmVudENsYXNzICYmIGVsLl9wYXJlbnQpIHtcbiAgICAgIGVsLl9wYXJlbnQuY2xhc3NMaXN0LnJlbW92ZShleHBhbmRlZFBhcmVudENsYXNzKTtcbiAgICB9XG4gICAgcmVzZXRTdHlsZXMoZWwpO1xuICB9XG4gIGZ1bmN0aW9uIHJlc2V0U3R5bGVzKGVsKSB7XG4gICAgY29uc3Qgc2l6ZSA9IGVsLl9pbml0aWFsU3R5bGVbc2l6ZVByb3BlcnR5XTtcbiAgICBlbC5zdHlsZS5vdmVyZmxvdyA9IGVsLl9pbml0aWFsU3R5bGUub3ZlcmZsb3c7XG4gICAgaWYgKHNpemUgIT0gbnVsbCkgZWwuc3R5bGVbc2l6ZVByb3BlcnR5XSA9IHNpemU7XG4gICAgZGVsZXRlIGVsLl9pbml0aWFsU3R5bGU7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cGFuZC10cmFuc2l0aW9uLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBVdGlsaXRpZXNcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgYWNjZWxlcmF0ZWRFYXNpbmcsIGFuaW1hdGUsIGRlY2VsZXJhdGVkRWFzaW5nLCBnZW5lcmljQ29tcG9uZW50LCBudWxsaWZ5VHJhbnNmb3JtcywgcHJvcHNGYWN0b3J5LCBzdGFuZGFyZEVhc2luZyB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWRGlhbG9nVHJhbnNpdGlvblByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgdGFyZ2V0OiBPYmplY3Rcbn0sICd2LWRpYWxvZy10cmFuc2l0aW9uJyk7XG5leHBvcnQgY29uc3QgVkRpYWxvZ1RyYW5zaXRpb24gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkRpYWxvZ1RyYW5zaXRpb24nLFxuICBwcm9wczogbWFrZVZEaWFsb2dUcmFuc2l0aW9uUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBmdW5jdGlvbnMgPSB7XG4gICAgICBvbkJlZm9yZUVudGVyKGVsKSB7XG4gICAgICAgIGVsLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgICAgIGVsLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgIH0sXG4gICAgICBhc3luYyBvbkVudGVyKGVsLCBkb25lKSB7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc29sdmUpKTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzb2x2ZSkpO1xuICAgICAgICBlbC5zdHlsZS52aXNpYmlsaXR5ID0gJyc7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB4LFxuICAgICAgICAgIHksXG4gICAgICAgICAgc3gsXG4gICAgICAgICAgc3ksXG4gICAgICAgICAgc3BlZWRcbiAgICAgICAgfSA9IGdldERpbWVuc2lvbnMocHJvcHMudGFyZ2V0LCBlbCk7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IGFuaW1hdGUoZWwsIFt7XG4gICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7eH1weCwgJHt5fXB4KSBzY2FsZSgke3N4fSwgJHtzeX0pYCxcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH0sIHt9XSwge1xuICAgICAgICAgIGR1cmF0aW9uOiAyMjUgKiBzcGVlZCxcbiAgICAgICAgICBlYXNpbmc6IGRlY2VsZXJhdGVkRWFzaW5nXG4gICAgICAgIH0pO1xuICAgICAgICBnZXRDaGlsZHJlbihlbCk/LmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgIGFuaW1hdGUoZWwsIFt7XG4gICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgIG9mZnNldDogMC4zM1xuICAgICAgICAgIH0sIHt9XSwge1xuICAgICAgICAgICAgZHVyYXRpb246IDIyNSAqIDIgKiBzcGVlZCxcbiAgICAgICAgICAgIGVhc2luZzogc3RhbmRhcmRFYXNpbmdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFuaW1hdGlvbi5maW5pc2hlZC50aGVuKCgpID0+IGRvbmUoKSk7XG4gICAgICB9LFxuICAgICAgb25BZnRlckVudGVyKGVsKSB7XG4gICAgICAgIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdwb2ludGVyLWV2ZW50cycpO1xuICAgICAgfSxcbiAgICAgIG9uQmVmb3JlTGVhdmUoZWwpIHtcbiAgICAgICAgZWwuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcbiAgICAgIH0sXG4gICAgICBhc3luYyBvbkxlYXZlKGVsLCBkb25lKSB7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc29sdmUpKTtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHgsXG4gICAgICAgICAgeSxcbiAgICAgICAgICBzeCxcbiAgICAgICAgICBzeSxcbiAgICAgICAgICBzcGVlZFxuICAgICAgICB9ID0gZ2V0RGltZW5zaW9ucyhwcm9wcy50YXJnZXQsIGVsKTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uID0gYW5pbWF0ZShlbCwgW3t9LCB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7eH1weCwgJHt5fXB4KSBzY2FsZSgke3N4fSwgJHtzeX0pYCxcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH1dLCB7XG4gICAgICAgICAgZHVyYXRpb246IDEyNSAqIHNwZWVkLFxuICAgICAgICAgIGVhc2luZzogYWNjZWxlcmF0ZWRFYXNpbmdcbiAgICAgICAgfSk7XG4gICAgICAgIGFuaW1hdGlvbi5maW5pc2hlZC50aGVuKCgpID0+IGRvbmUoKSk7XG4gICAgICAgIGdldENoaWxkcmVuKGVsKT8uZm9yRWFjaChlbCA9PiB7XG4gICAgICAgICAgYW5pbWF0ZShlbCwgW3t9LCB7XG4gICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgb2Zmc2V0OiAwLjJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgfV0sIHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxMjUgKiAyICogc3BlZWQsXG4gICAgICAgICAgICBlYXNpbmc6IHN0YW5kYXJkRWFzaW5nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uQWZ0ZXJMZWF2ZShlbCkge1xuICAgICAgICBlbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncG9pbnRlci1ldmVudHMnKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMudGFyZ2V0ID8gX2NyZWF0ZVZOb2RlKFRyYW5zaXRpb24sIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJuYW1lXCI6IFwiZGlhbG9nLXRyYW5zaXRpb25cIlxuICAgICAgfSwgZnVuY3Rpb25zLCB7XG4gICAgICAgIFwiY3NzXCI6IGZhbHNlXG4gICAgICB9KSwgc2xvdHMpIDogX2NyZWF0ZVZOb2RlKFRyYW5zaXRpb24sIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiZGlhbG9nLXRyYW5zaXRpb25cIlxuICAgICAgfSwgc2xvdHMpO1xuICAgIH07XG4gIH1cbn0pO1xuXG4vKiogQW5pbWF0YWJsZSBjaGlsZHJlbiAoY2FyZCwgc2hlZXQsIGxpc3QpICovXG5mdW5jdGlvbiBnZXRDaGlsZHJlbihlbCkge1xuICBjb25zdCBlbHMgPSBlbC5xdWVyeVNlbGVjdG9yKCc6c2NvcGUgPiAudi1jYXJkLCA6c2NvcGUgPiAudi1zaGVldCwgOnNjb3BlID4gLnYtbGlzdCcpPy5jaGlsZHJlbjtcbiAgcmV0dXJuIGVscyAmJiBbLi4uZWxzXTtcbn1cbmZ1bmN0aW9uIGdldERpbWVuc2lvbnModGFyZ2V0LCBlbCkge1xuICBjb25zdCB0YXJnZXRCb3ggPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGVsQm94ID0gbnVsbGlmeVRyYW5zZm9ybXMoZWwpO1xuICBjb25zdCBbb3JpZ2luWCwgb3JpZ2luWV0gPSBnZXRDb21wdXRlZFN0eWxlKGVsKS50cmFuc2Zvcm1PcmlnaW4uc3BsaXQoJyAnKS5tYXAodiA9PiBwYXJzZUZsb2F0KHYpKTtcbiAgY29uc3QgW2FuY2hvclNpZGUsIGFuY2hvck9mZnNldF0gPSBnZXRDb21wdXRlZFN0eWxlKGVsKS5nZXRQcm9wZXJ0eVZhbHVlKCctLXYtb3ZlcmxheS1hbmNob3Itb3JpZ2luJykuc3BsaXQoJyAnKTtcbiAgbGV0IG9mZnNldFggPSB0YXJnZXRCb3gubGVmdCArIHRhcmdldEJveC53aWR0aCAvIDI7XG4gIGlmIChhbmNob3JTaWRlID09PSAnbGVmdCcgfHwgYW5jaG9yT2Zmc2V0ID09PSAnbGVmdCcpIHtcbiAgICBvZmZzZXRYIC09IHRhcmdldEJveC53aWR0aCAvIDI7XG4gIH0gZWxzZSBpZiAoYW5jaG9yU2lkZSA9PT0gJ3JpZ2h0JyB8fCBhbmNob3JPZmZzZXQgPT09ICdyaWdodCcpIHtcbiAgICBvZmZzZXRYICs9IHRhcmdldEJveC53aWR0aCAvIDI7XG4gIH1cbiAgbGV0IG9mZnNldFkgPSB0YXJnZXRCb3gudG9wICsgdGFyZ2V0Qm94LmhlaWdodCAvIDI7XG4gIGlmIChhbmNob3JTaWRlID09PSAndG9wJyB8fCBhbmNob3JPZmZzZXQgPT09ICd0b3AnKSB7XG4gICAgb2Zmc2V0WSAtPSB0YXJnZXRCb3guaGVpZ2h0IC8gMjtcbiAgfSBlbHNlIGlmIChhbmNob3JTaWRlID09PSAnYm90dG9tJyB8fCBhbmNob3JPZmZzZXQgPT09ICdib3R0b20nKSB7XG4gICAgb2Zmc2V0WSArPSB0YXJnZXRCb3guaGVpZ2h0IC8gMjtcbiAgfVxuICBjb25zdCB0c3ggPSB0YXJnZXRCb3gud2lkdGggLyBlbEJveC53aWR0aDtcbiAgY29uc3QgdHN5ID0gdGFyZ2V0Qm94LmhlaWdodCAvIGVsQm94LmhlaWdodDtcbiAgY29uc3QgbWF4cyA9IE1hdGgubWF4KDEsIHRzeCwgdHN5KTtcbiAgY29uc3Qgc3ggPSB0c3ggLyBtYXhzIHx8IDA7XG4gIGNvbnN0IHN5ID0gdHN5IC8gbWF4cyB8fCAwO1xuXG4gIC8vIEFuaW1hdGUgZWxlbWVudHMgbGFyZ2VyIHRoYW4gMTIlIG9mIHRoZSBzY3JlZW4gYXJlYSB1cCB0byAxLjV4IHNsb3dlclxuICBjb25zdCBhc2EgPSBlbEJveC53aWR0aCAqIGVsQm94LmhlaWdodCAvICh3aW5kb3cuaW5uZXJXaWR0aCAqIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gIGNvbnN0IHNwZWVkID0gYXNhID4gMC4xMiA/IE1hdGgubWluKDEuNSwgKGFzYSAtIDAuMTIpICogMTAgKyAxKSA6IDE7XG4gIHJldHVybiB7XG4gICAgeDogb2Zmc2V0WCAtIChvcmlnaW5YICsgZWxCb3gubGVmdCksXG4gICAgeTogb2Zmc2V0WSAtIChvcmlnaW5ZICsgZWxCb3gudG9wKSxcbiAgICBzeCxcbiAgICBzeSxcbiAgICBzcGVlZFxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlhbG9nLXRyYW5zaXRpb24ubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUNzc1RyYW5zaXRpb24sIGNyZWF0ZUphdmFzY3JpcHRUcmFuc2l0aW9uIH0gZnJvbSBcIi4vY3JlYXRlVHJhbnNpdGlvbi5tanNcIjtcbmltcG9ydCBFeHBhbmRUcmFuc2l0aW9uR2VuZXJhdG9yIGZyb20gXCIuL2V4cGFuZC10cmFuc2l0aW9uLm1qc1wiOyAvLyBDb21wb25lbnQgc3BlY2lmaWMgdHJhbnNpdGlvbnNcbmV4cG9ydCBjb25zdCBWRmFiVHJhbnNpdGlvbiA9IGNyZWF0ZUNzc1RyYW5zaXRpb24oJ2ZhYi10cmFuc2l0aW9uJywgJ2NlbnRlciBjZW50ZXInLCAnb3V0LWluJyk7XG5cbi8vIEdlbmVyaWMgdHJhbnNpdGlvbnNcbmV4cG9ydCBjb25zdCBWRGlhbG9nQm90dG9tVHJhbnNpdGlvbiA9IGNyZWF0ZUNzc1RyYW5zaXRpb24oJ2RpYWxvZy1ib3R0b20tdHJhbnNpdGlvbicpO1xuZXhwb3J0IGNvbnN0IFZEaWFsb2dUb3BUcmFuc2l0aW9uID0gY3JlYXRlQ3NzVHJhbnNpdGlvbignZGlhbG9nLXRvcC10cmFuc2l0aW9uJyk7XG5leHBvcnQgY29uc3QgVkZhZGVUcmFuc2l0aW9uID0gY3JlYXRlQ3NzVHJhbnNpdGlvbignZmFkZS10cmFuc2l0aW9uJyk7XG5leHBvcnQgY29uc3QgVlNjYWxlVHJhbnNpdGlvbiA9IGNyZWF0ZUNzc1RyYW5zaXRpb24oJ3NjYWxlLXRyYW5zaXRpb24nKTtcbmV4cG9ydCBjb25zdCBWU2Nyb2xsWFRyYW5zaXRpb24gPSBjcmVhdGVDc3NUcmFuc2l0aW9uKCdzY3JvbGwteC10cmFuc2l0aW9uJyk7XG5leHBvcnQgY29uc3QgVlNjcm9sbFhSZXZlcnNlVHJhbnNpdGlvbiA9IGNyZWF0ZUNzc1RyYW5zaXRpb24oJ3Njcm9sbC14LXJldmVyc2UtdHJhbnNpdGlvbicpO1xuZXhwb3J0IGNvbnN0IFZTY3JvbGxZVHJhbnNpdGlvbiA9IGNyZWF0ZUNzc1RyYW5zaXRpb24oJ3Njcm9sbC15LXRyYW5zaXRpb24nKTtcbmV4cG9ydCBjb25zdCBWU2Nyb2xsWVJldmVyc2VUcmFuc2l0aW9uID0gY3JlYXRlQ3NzVHJhbnNpdGlvbignc2Nyb2xsLXktcmV2ZXJzZS10cmFuc2l0aW9uJyk7XG5leHBvcnQgY29uc3QgVlNsaWRlWFRyYW5zaXRpb24gPSBjcmVhdGVDc3NUcmFuc2l0aW9uKCdzbGlkZS14LXRyYW5zaXRpb24nKTtcbmV4cG9ydCBjb25zdCBWU2xpZGVYUmV2ZXJzZVRyYW5zaXRpb24gPSBjcmVhdGVDc3NUcmFuc2l0aW9uKCdzbGlkZS14LXJldmVyc2UtdHJhbnNpdGlvbicpO1xuZXhwb3J0IGNvbnN0IFZTbGlkZVlUcmFuc2l0aW9uID0gY3JlYXRlQ3NzVHJhbnNpdGlvbignc2xpZGUteS10cmFuc2l0aW9uJyk7XG5leHBvcnQgY29uc3QgVlNsaWRlWVJldmVyc2VUcmFuc2l0aW9uID0gY3JlYXRlQ3NzVHJhbnNpdGlvbignc2xpZGUteS1yZXZlcnNlLXRyYW5zaXRpb24nKTtcblxuLy8gSmF2YXNjcmlwdCB0cmFuc2l0aW9uc1xuZXhwb3J0IGNvbnN0IFZFeHBhbmRUcmFuc2l0aW9uID0gY3JlYXRlSmF2YXNjcmlwdFRyYW5zaXRpb24oJ2V4cGFuZC10cmFuc2l0aW9uJywgRXhwYW5kVHJhbnNpdGlvbkdlbmVyYXRvcigpKTtcbmV4cG9ydCBjb25zdCBWRXhwYW5kWFRyYW5zaXRpb24gPSBjcmVhdGVKYXZhc2NyaXB0VHJhbnNpdGlvbignZXhwYW5kLXgtdHJhbnNpdGlvbicsIEV4cGFuZFRyYW5zaXRpb25HZW5lcmF0b3IoJycsIHRydWUpKTtcbmV4cG9ydCB7IFZEaWFsb2dUcmFuc2l0aW9uIH0gZnJvbSBcIi4vZGlhbG9nLXRyYW5zaXRpb24ubWpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyB0b1JlZnMgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZEZWZhdWx0c1Byb3ZpZGVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBkZWZhdWx0czogT2JqZWN0LFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgcmVzZXQ6IFtOdW1iZXIsIFN0cmluZ10sXG4gIHJvb3Q6IFtCb29sZWFuLCBTdHJpbmddLFxuICBzY29wZWQ6IEJvb2xlYW5cbn0sICdWRGVmYXVsdHNQcm92aWRlcicpO1xuZXhwb3J0IGNvbnN0IFZEZWZhdWx0c1Byb3ZpZGVyID0gZ2VuZXJpY0NvbXBvbmVudChmYWxzZSkoe1xuICBuYW1lOiAnVkRlZmF1bHRzUHJvdmlkZXInLFxuICBwcm9wczogbWFrZVZEZWZhdWx0c1Byb3ZpZGVyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBkZWZhdWx0cyxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgcmVzZXQsXG4gICAgICByb290LFxuICAgICAgc2NvcGVkXG4gICAgfSA9IHRvUmVmcyhwcm9wcyk7XG4gICAgcHJvdmlkZURlZmF1bHRzKGRlZmF1bHRzLCB7XG4gICAgICByZXNldCxcbiAgICAgIHJvb3QsXG4gICAgICBzY29wZWQsXG4gICAgICBkaXNhYmxlZFxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiBzbG90cy5kZWZhdWx0Py4oKTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WRGVmYXVsdHNQcm92aWRlci5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbi8vIENvbXBvc2FibGVzXG5leHBvcnQgY29uc3QgbWFrZURpbWVuc2lvblByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgaGVpZ2h0OiBbTnVtYmVyLCBTdHJpbmddLFxuICBtYXhIZWlnaHQ6IFtOdW1iZXIsIFN0cmluZ10sXG4gIG1heFdpZHRoOiBbTnVtYmVyLCBTdHJpbmddLFxuICBtaW5IZWlnaHQ6IFtOdW1iZXIsIFN0cmluZ10sXG4gIG1pbldpZHRoOiBbTnVtYmVyLCBTdHJpbmddLFxuICB3aWR0aDogW051bWJlciwgU3RyaW5nXVxufSwgJ2RpbWVuc2lvbicpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURpbWVuc2lvbihwcm9wcykge1xuICBjb25zdCBkaW1lbnNpb25TdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgIGhlaWdodDogY29udmVydFRvVW5pdChwcm9wcy5oZWlnaHQpLFxuICAgIG1heEhlaWdodDogY29udmVydFRvVW5pdChwcm9wcy5tYXhIZWlnaHQpLFxuICAgIG1heFdpZHRoOiBjb252ZXJ0VG9Vbml0KHByb3BzLm1heFdpZHRoKSxcbiAgICBtaW5IZWlnaHQ6IGNvbnZlcnRUb1VuaXQocHJvcHMubWluSGVpZ2h0KSxcbiAgICBtaW5XaWR0aDogY29udmVydFRvVW5pdChwcm9wcy5taW5XaWR0aCksXG4gICAgd2lkdGg6IGNvbnZlcnRUb1VuaXQocHJvcHMud2lkdGgpXG4gIH0pKTtcbiAgcmV0dXJuIHtcbiAgICBkaW1lbnNpb25TdHlsZXNcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpbWVuc2lvbnMubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WUmVzcG9uc2l2ZS5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGltZW5zaW9uUHJvcHMsIHVzZURpbWVuc2lvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaW1lbnNpb25zLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlQXNwZWN0U3R5bGVzKHByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgYXNwZWN0U3R5bGVzOiBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCByYXRpbyA9IE51bWJlcihwcm9wcy5hc3BlY3RSYXRpbyk7XG4gICAgICByZXR1cm4gcmF0aW8gPyB7XG4gICAgICAgIHBhZGRpbmdCb3R0b206IFN0cmluZygxIC8gcmF0aW8gKiAxMDApICsgJyUnXG4gICAgICB9IDogdW5kZWZpbmVkO1xuICAgIH0pXG4gIH07XG59XG5leHBvcnQgY29uc3QgbWFrZVZSZXNwb25zaXZlUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhc3BlY3RSYXRpbzogW1N0cmluZywgTnVtYmVyXSxcbiAgY29udGVudENsYXNzOiBTdHJpbmcsXG4gIGlubGluZTogQm9vbGVhbixcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEaW1lbnNpb25Qcm9wcygpXG59LCAnVlJlc3BvbnNpdmUnKTtcbmV4cG9ydCBjb25zdCBWUmVzcG9uc2l2ZSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWUmVzcG9uc2l2ZScsXG4gIHByb3BzOiBtYWtlVlJlc3BvbnNpdmVQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIGFzcGVjdFN0eWxlc1xuICAgIH0gPSB1c2VBc3BlY3RTdHlsZXMocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRpbWVuc2lvblN0eWxlc1xuICAgIH0gPSB1c2VEaW1lbnNpb24ocHJvcHMpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtcmVzcG9uc2l2ZScsIHtcbiAgICAgICAgJ3YtcmVzcG9uc2l2ZS0taW5saW5lJzogcHJvcHMuaW5saW5lXG4gICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IFtkaW1lbnNpb25TdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXVxuICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBcInYtcmVzcG9uc2l2ZV9fc2l6ZXJcIixcbiAgICAgIFwic3R5bGVcIjogYXNwZWN0U3R5bGVzLnZhbHVlXG4gICAgfSwgbnVsbCksIHNsb3RzLmFkZGl0aW9uYWw/LigpLCBzbG90cy5kZWZhdWx0ICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1yZXNwb25zaXZlX19jb250ZW50JywgcHJvcHMuY29udGVudENsYXNzXVxuICAgIH0sIFtzbG90cy5kZWZhdWx0KCldKV0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlJlc3BvbnNpdmUubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgaCwgbWVyZ2VQcm9wcywgVHJhbnNpdGlvbiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVHJhbnNpdGlvblByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgdHJhbnNpdGlvbjoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmcsIE9iamVjdF0sXG4gICAgZGVmYXVsdDogJ2ZhZGUtdHJhbnNpdGlvbicsXG4gICAgdmFsaWRhdG9yOiB2YWwgPT4gdmFsICE9PSB0cnVlXG4gIH1cbn0sICd0cmFuc2l0aW9uJyk7XG5leHBvcnQgY29uc3QgTWF5YmVUcmFuc2l0aW9uID0gKHByb3BzLCBfcmVmKSA9PiB7XG4gIGxldCB7XG4gICAgc2xvdHNcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHtcbiAgICB0cmFuc2l0aW9uLFxuICAgIGRpc2FibGVkLFxuICAgIC4uLnJlc3RcbiAgfSA9IHByb3BzO1xuICBjb25zdCB7XG4gICAgY29tcG9uZW50ID0gVHJhbnNpdGlvbixcbiAgICAuLi5jdXN0b21Qcm9wc1xuICB9ID0gdHlwZW9mIHRyYW5zaXRpb24gPT09ICdvYmplY3QnID8gdHJhbnNpdGlvbiA6IHt9O1xuICByZXR1cm4gaChjb21wb25lbnQsIG1lcmdlUHJvcHModHlwZW9mIHRyYW5zaXRpb24gPT09ICdzdHJpbmcnID8ge1xuICAgIG5hbWU6IGRpc2FibGVkID8gJycgOiB0cmFuc2l0aW9uXG4gIH0gOiBjdXN0b21Qcm9wcywgcmVzdCwge1xuICAgIGRpc2FibGVkXG4gIH0pLCBzbG90cyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNpdGlvbi5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBTVVBQT1JUU19JTlRFUlNFQ1RJT04gfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmZ1bmN0aW9uIG1vdW50ZWQoZWwsIGJpbmRpbmcpIHtcbiAgaWYgKCFTVVBQT1JUU19JTlRFUlNFQ1RJT04pIHJldHVybjtcbiAgY29uc3QgbW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnMgfHwge307XG4gIGNvbnN0IHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgY29uc3Qge1xuICAgIGhhbmRsZXIsXG4gICAgb3B0aW9uc1xuICB9ID0gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IHZhbHVlIDoge1xuICAgIGhhbmRsZXI6IHZhbHVlLFxuICAgIG9wdGlvbnM6IHt9XG4gIH07XG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZW50cmllcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gICAgbGV0IG9ic2VydmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgX29ic2VydmUgPSBlbC5fb2JzZXJ2ZT8uW2JpbmRpbmcuaW5zdGFuY2UuJC51aWRdO1xuICAgIGlmICghX29ic2VydmUpIHJldHVybjsgLy8gSnVzdCBpbiBjYXNlLCBzaG91bGQgbmV2ZXIgZmlyZVxuXG4gICAgY29uc3QgaXNJbnRlcnNlY3RpbmcgPSBlbnRyaWVzLnNvbWUoZW50cnkgPT4gZW50cnkuaXNJbnRlcnNlY3RpbmcpO1xuXG4gICAgLy8gSWYgaXMgbm90IHF1aWV0IG9yIGhhcyBhbHJlYWR5IGJlZW5cbiAgICAvLyBpbml0dGVkLCBpbnZva2UgdGhlIHVzZXIgY2FsbGJhY2tcbiAgICBpZiAoaGFuZGxlciAmJiAoIW1vZGlmaWVycy5xdWlldCB8fCBfb2JzZXJ2ZS5pbml0KSAmJiAoIW1vZGlmaWVycy5vbmNlIHx8IGlzSW50ZXJzZWN0aW5nIHx8IF9vYnNlcnZlLmluaXQpKSB7XG4gICAgICBoYW5kbGVyKGlzSW50ZXJzZWN0aW5nLCBlbnRyaWVzLCBvYnNlcnZlcik7XG4gICAgfVxuICAgIGlmIChpc0ludGVyc2VjdGluZyAmJiBtb2RpZmllcnMub25jZSkgdW5tb3VudGVkKGVsLCBiaW5kaW5nKTtlbHNlIF9vYnNlcnZlLmluaXQgPSB0cnVlO1xuICB9LCBvcHRpb25zKTtcbiAgZWwuX29ic2VydmUgPSBPYmplY3QoZWwuX29ic2VydmUpO1xuICBlbC5fb2JzZXJ2ZVtiaW5kaW5nLmluc3RhbmNlLiQudWlkXSA9IHtcbiAgICBpbml0OiBmYWxzZSxcbiAgICBvYnNlcnZlclxuICB9O1xuICBvYnNlcnZlci5vYnNlcnZlKGVsKTtcbn1cbmZ1bmN0aW9uIHVubW91bnRlZChlbCwgYmluZGluZykge1xuICBjb25zdCBvYnNlcnZlID0gZWwuX29ic2VydmU/LltiaW5kaW5nLmluc3RhbmNlLiQudWlkXTtcbiAgaWYgKCFvYnNlcnZlKSByZXR1cm47XG4gIG9ic2VydmUub2JzZXJ2ZXIudW5vYnNlcnZlKGVsKTtcbiAgZGVsZXRlIGVsLl9vYnNlcnZlW2JpbmRpbmcuaW5zdGFuY2UuJC51aWRdO1xufVxuZXhwb3J0IGNvbnN0IEludGVyc2VjdCA9IHtcbiAgbW91bnRlZCxcbiAgdW5tb3VudGVkXG59O1xuZXhwb3J0IGRlZmF1bHQgSW50ZXJzZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCIsImltcG9ydCB7IHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkltZy5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgbWFrZVZSZXNwb25zaXZlUHJvcHMsIFZSZXNwb25zaXZlIH0gZnJvbSBcIi4uL1ZSZXNwb25zaXZlL1ZSZXNwb25zaXZlLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VUcmFuc2l0aW9uUHJvcHMsIE1heWJlVHJhbnNpdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90cmFuc2l0aW9uLm1qc1wiOyAvLyBEaXJlY3RpdmVzXG5pbXBvcnQgaW50ZXJzZWN0IGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL2ludGVyc2VjdC9pbmRleC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgbmV4dFRpY2ssIG9uQmVmb3JlTW91bnQsIHJlZiwgc2hhbGxvd1JlZiwgdlNob3csIHdhdGNoLCB3aXRoRGlyZWN0aXZlcyB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIFNVUFBPUlRTX0lOVEVSU0VDVElPTiwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZJbWdQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGFsdDogU3RyaW5nLFxuICBjb3ZlcjogQm9vbGVhbixcbiAgZWFnZXI6IEJvb2xlYW4sXG4gIGdyYWRpZW50OiBTdHJpbmcsXG4gIGxhenlTcmM6IFN0cmluZyxcbiAgb3B0aW9uczoge1xuICAgIHR5cGU6IE9iamVjdCxcbiAgICAvLyBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0eXBlcywgbmF2aWdhdGUgdG86XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ludGVyc2VjdGlvbl9PYnNlcnZlcl9BUElcbiAgICBkZWZhdWx0OiAoKSA9PiAoe1xuICAgICAgcm9vdDogdW5kZWZpbmVkLFxuICAgICAgcm9vdE1hcmdpbjogdW5kZWZpbmVkLFxuICAgICAgdGhyZXNob2xkOiB1bmRlZmluZWRcbiAgICB9KVxuICB9LFxuICBzaXplczogU3RyaW5nLFxuICBzcmM6IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBPYmplY3RdLFxuICAgIGRlZmF1bHQ6ICcnXG4gIH0sXG4gIHNyY3NldDogU3RyaW5nLFxuICAuLi5tYWtlVlJlc3BvbnNpdmVQcm9wcygpLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRyYW5zaXRpb25Qcm9wcygpXG59LCAnVkltZycpO1xuZXhwb3J0IGNvbnN0IFZJbWcgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkltZycsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICBpbnRlcnNlY3RcbiAgfSxcbiAgcHJvcHM6IG1ha2VWSW1nUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICBsb2Fkc3RhcnQ6IHZhbHVlID0+IHRydWUsXG4gICAgbG9hZDogdmFsdWUgPT4gdHJ1ZSxcbiAgICBlcnJvcjogdmFsdWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBlbWl0LFxuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBjdXJyZW50U3JjID0gc2hhbGxvd1JlZignJyk7IC8vIFNldCBmcm9tIHNyY3NldFxuICAgIGNvbnN0IGltYWdlID0gcmVmKCk7XG4gICAgY29uc3Qgc3RhdGUgPSBzaGFsbG93UmVmKHByb3BzLmVhZ2VyID8gJ2xvYWRpbmcnIDogJ2lkbGUnKTtcbiAgICBjb25zdCBuYXR1cmFsV2lkdGggPSBzaGFsbG93UmVmKCk7XG4gICAgY29uc3QgbmF0dXJhbEhlaWdodCA9IHNoYWxsb3dSZWYoKTtcbiAgICBjb25zdCBub3JtYWxpc2VkU3JjID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnNyYyAmJiB0eXBlb2YgcHJvcHMuc3JjID09PSAnb2JqZWN0JyA/IHtcbiAgICAgICAgc3JjOiBwcm9wcy5zcmMuc3JjLFxuICAgICAgICBzcmNzZXQ6IHByb3BzLnNyY3NldCB8fCBwcm9wcy5zcmMuc3Jjc2V0LFxuICAgICAgICBsYXp5U3JjOiBwcm9wcy5sYXp5U3JjIHx8IHByb3BzLnNyYy5sYXp5U3JjLFxuICAgICAgICBhc3BlY3Q6IE51bWJlcihwcm9wcy5hc3BlY3RSYXRpbyB8fCBwcm9wcy5zcmMuYXNwZWN0IHx8IDApXG4gICAgICB9IDoge1xuICAgICAgICBzcmM6IHByb3BzLnNyYyxcbiAgICAgICAgc3Jjc2V0OiBwcm9wcy5zcmNzZXQsXG4gICAgICAgIGxhenlTcmM6IHByb3BzLmxhenlTcmMsXG4gICAgICAgIGFzcGVjdDogTnVtYmVyKHByb3BzLmFzcGVjdFJhdGlvIHx8IDApXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IGFzcGVjdFJhdGlvID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIG5vcm1hbGlzZWRTcmMudmFsdWUuYXNwZWN0IHx8IG5hdHVyYWxXaWR0aC52YWx1ZSAvIG5hdHVyYWxIZWlnaHQudmFsdWUgfHwgMDtcbiAgICB9KTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5zcmMsICgpID0+IHtcbiAgICAgIGluaXQoc3RhdGUudmFsdWUgIT09ICdpZGxlJyk7XG4gICAgfSk7XG4gICAgd2F0Y2goYXNwZWN0UmF0aW8sICh2YWwsIG9sZFZhbCkgPT4ge1xuICAgICAgaWYgKCF2YWwgJiYgb2xkVmFsICYmIGltYWdlLnZhbHVlKSB7XG4gICAgICAgIHBvbGxGb3JTaXplKGltYWdlLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRPRE86IGdldFNyYyB3aGVuIHdpbmRvdyB3aWR0aCBjaGFuZ2VzXG5cbiAgICBvbkJlZm9yZU1vdW50KCgpID0+IGluaXQoKSk7XG4gICAgZnVuY3Rpb24gaW5pdChpc0ludGVyc2VjdGluZykge1xuICAgICAgaWYgKHByb3BzLmVhZ2VyICYmIGlzSW50ZXJzZWN0aW5nKSByZXR1cm47XG4gICAgICBpZiAoU1VQUE9SVFNfSU5URVJTRUNUSU9OICYmICFpc0ludGVyc2VjdGluZyAmJiAhcHJvcHMuZWFnZXIpIHJldHVybjtcbiAgICAgIHN0YXRlLnZhbHVlID0gJ2xvYWRpbmcnO1xuICAgICAgaWYgKG5vcm1hbGlzZWRTcmMudmFsdWUubGF6eVNyYykge1xuICAgICAgICBjb25zdCBsYXp5SW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGxhenlJbWcuc3JjID0gbm9ybWFsaXNlZFNyYy52YWx1ZS5sYXp5U3JjO1xuICAgICAgICBwb2xsRm9yU2l6ZShsYXp5SW1nLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGlmICghbm9ybWFsaXNlZFNyYy52YWx1ZS5zcmMpIHJldHVybjtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgZW1pdCgnbG9hZHN0YXJ0JywgaW1hZ2UudmFsdWU/LmN1cnJlbnRTcmMgfHwgbm9ybWFsaXNlZFNyYy52YWx1ZS5zcmMpO1xuICAgICAgICBpZiAoaW1hZ2UudmFsdWU/LmNvbXBsZXRlKSB7XG4gICAgICAgICAgaWYgKCFpbWFnZS52YWx1ZS5uYXR1cmFsV2lkdGgpIHtcbiAgICAgICAgICAgIG9uRXJyb3IoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlLnZhbHVlID09PSAnZXJyb3InKSByZXR1cm47XG4gICAgICAgICAgaWYgKCFhc3BlY3RSYXRpby52YWx1ZSkgcG9sbEZvclNpemUoaW1hZ2UudmFsdWUsIG51bGwpO1xuICAgICAgICAgIG9uTG9hZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghYXNwZWN0UmF0aW8udmFsdWUpIHBvbGxGb3JTaXplKGltYWdlLnZhbHVlKTtcbiAgICAgICAgICBnZXRTcmMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uTG9hZCgpIHtcbiAgICAgIGdldFNyYygpO1xuICAgICAgc3RhdGUudmFsdWUgPSAnbG9hZGVkJztcbiAgICAgIGVtaXQoJ2xvYWQnLCBpbWFnZS52YWx1ZT8uY3VycmVudFNyYyB8fCBub3JtYWxpc2VkU3JjLnZhbHVlLnNyYyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRXJyb3IoKSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9ICdlcnJvcic7XG4gICAgICBlbWl0KCdlcnJvcicsIGltYWdlLnZhbHVlPy5jdXJyZW50U3JjIHx8IG5vcm1hbGlzZWRTcmMudmFsdWUuc3JjKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U3JjKCkge1xuICAgICAgY29uc3QgaW1nID0gaW1hZ2UudmFsdWU7XG4gICAgICBpZiAoaW1nKSBjdXJyZW50U3JjLnZhbHVlID0gaW1nLmN1cnJlbnRTcmMgfHwgaW1nLnNyYztcbiAgICB9XG4gICAgbGV0IHRpbWVyID0gLTE7XG4gICAgZnVuY3Rpb24gcG9sbEZvclNpemUoaW1nKSB7XG4gICAgICBsZXQgdGltZW91dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTAwO1xuICAgICAgY29uc3QgcG9sbCA9ICgpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIG5hdHVyYWxIZWlnaHQ6IGltZ0hlaWdodCxcbiAgICAgICAgICBuYXR1cmFsV2lkdGg6IGltZ1dpZHRoXG4gICAgICAgIH0gPSBpbWc7XG4gICAgICAgIGlmIChpbWdIZWlnaHQgfHwgaW1nV2lkdGgpIHtcbiAgICAgICAgICBuYXR1cmFsV2lkdGgudmFsdWUgPSBpbWdXaWR0aDtcbiAgICAgICAgICBuYXR1cmFsSGVpZ2h0LnZhbHVlID0gaW1nSGVpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKCFpbWcuY29tcGxldGUgJiYgc3RhdGUudmFsdWUgPT09ICdsb2FkaW5nJyAmJiB0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgICAgICB0aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KHBvbGwsIHRpbWVvdXQpO1xuICAgICAgICB9IGVsc2UgaWYgKGltZy5jdXJyZW50U3JjLmVuZHNXaXRoKCcuc3ZnJykgfHwgaW1nLmN1cnJlbnRTcmMuc3RhcnRzV2l0aCgnZGF0YTppbWFnZS9zdmcreG1sJykpIHtcbiAgICAgICAgICBuYXR1cmFsV2lkdGgudmFsdWUgPSAxO1xuICAgICAgICAgIG5hdHVyYWxIZWlnaHQudmFsdWUgPSAxO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcG9sbCgpO1xuICAgIH1cbiAgICBjb25zdCBjb250YWluQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAndi1pbWdfX2ltZy0tY292ZXInOiBwcm9wcy5jb3ZlcixcbiAgICAgICd2LWltZ19faW1nLS1jb250YWluJzogIXByb3BzLmNvdmVyXG4gICAgfSkpO1xuICAgIGNvbnN0IF9faW1hZ2UgPSAoKSA9PiB7XG4gICAgICBpZiAoIW5vcm1hbGlzZWRTcmMudmFsdWUuc3JjIHx8IHN0YXRlLnZhbHVlID09PSAnaWRsZScpIHJldHVybiBudWxsO1xuICAgICAgY29uc3QgaW1nID0gX2NyZWF0ZVZOb2RlKFwiaW1nXCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtaW1nX19pbWcnLCBjb250YWluQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgIFwic3JjXCI6IG5vcm1hbGlzZWRTcmMudmFsdWUuc3JjLFxuICAgICAgICBcInNyY3NldFwiOiBub3JtYWxpc2VkU3JjLnZhbHVlLnNyY3NldCxcbiAgICAgICAgXCJhbHRcIjogcHJvcHMuYWx0LFxuICAgICAgICBcInNpemVzXCI6IHByb3BzLnNpemVzLFxuICAgICAgICBcInJlZlwiOiBpbWFnZSxcbiAgICAgICAgXCJvbkxvYWRcIjogb25Mb2FkLFxuICAgICAgICBcIm9uRXJyb3JcIjogb25FcnJvclxuICAgICAgfSwgbnVsbCk7XG4gICAgICBjb25zdCBzb3VyY2VzID0gc2xvdHMuc291cmNlcz8uKCk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKE1heWJlVHJhbnNpdGlvbiwge1xuICAgICAgICBcInRyYW5zaXRpb25cIjogcHJvcHMudHJhbnNpdGlvbixcbiAgICAgICAgXCJhcHBlYXJcIjogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbd2l0aERpcmVjdGl2ZXMoc291cmNlcyA/IF9jcmVhdGVWTm9kZShcInBpY3R1cmVcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWltZ19fcGljdHVyZVwiXG4gICAgICAgIH0sIFtzb3VyY2VzLCBpbWddKSA6IGltZywgW1t2U2hvdywgc3RhdGUudmFsdWUgPT09ICdsb2FkZWQnXV0pXVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBfX3ByZWxvYWRJbWFnZSA9ICgpID0+IF9jcmVhdGVWTm9kZShNYXliZVRyYW5zaXRpb24sIHtcbiAgICAgIFwidHJhbnNpdGlvblwiOiBwcm9wcy50cmFuc2l0aW9uXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gW25vcm1hbGlzZWRTcmMudmFsdWUubGF6eVNyYyAmJiBzdGF0ZS52YWx1ZSAhPT0gJ2xvYWRlZCcgJiYgX2NyZWF0ZVZOb2RlKFwiaW1nXCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtaW1nX19pbWcnLCAndi1pbWdfX2ltZy0tcHJlbG9hZCcsIGNvbnRhaW5DbGFzc2VzLnZhbHVlXSxcbiAgICAgICAgXCJzcmNcIjogbm9ybWFsaXNlZFNyYy52YWx1ZS5sYXp5U3JjLFxuICAgICAgICBcImFsdFwiOiBwcm9wcy5hbHRcbiAgICAgIH0sIG51bGwpXVxuICAgIH0pO1xuICAgIGNvbnN0IF9fcGxhY2Vob2xkZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoIXNsb3RzLnBsYWNlaG9sZGVyKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoTWF5YmVUcmFuc2l0aW9uLCB7XG4gICAgICAgIFwidHJhbnNpdGlvblwiOiBwcm9wcy50cmFuc2l0aW9uLFxuICAgICAgICBcImFwcGVhclwiOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFsoc3RhdGUudmFsdWUgPT09ICdsb2FkaW5nJyB8fCBzdGF0ZS52YWx1ZSA9PT0gJ2Vycm9yJyAmJiAhc2xvdHMuZXJyb3IpICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtaW1nX19wbGFjZWhvbGRlclwiXG4gICAgICAgIH0sIFtzbG90cy5wbGFjZWhvbGRlcigpXSldXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IF9fZXJyb3IgPSAoKSA9PiB7XG4gICAgICBpZiAoIXNsb3RzLmVycm9yKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoTWF5YmVUcmFuc2l0aW9uLCB7XG4gICAgICAgIFwidHJhbnNpdGlvblwiOiBwcm9wcy50cmFuc2l0aW9uLFxuICAgICAgICBcImFwcGVhclwiOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzdGF0ZS52YWx1ZSA9PT0gJ2Vycm9yJyAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWltZ19fZXJyb3JcIlxuICAgICAgICB9LCBbc2xvdHMuZXJyb3IoKV0pXVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBfX2dyYWRpZW50ID0gKCkgPT4ge1xuICAgICAgaWYgKCFwcm9wcy5ncmFkaWVudCkgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtaW1nX19ncmFkaWVudFwiLFxuICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGBsaW5lYXItZ3JhZGllbnQoJHtwcm9wcy5ncmFkaWVudH0pYFxuICAgICAgICB9XG4gICAgICB9LCBudWxsKTtcbiAgICB9O1xuICAgIGNvbnN0IGlzQm9vdGVkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAge1xuICAgICAgY29uc3Qgc3RvcCA9IHdhdGNoKGFzcGVjdFJhdGlvLCB2YWwgPT4ge1xuICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgLy8gRG9lc24ndCB3b3JrIHdpdGggbmV4dFRpY2ssIGlkayB3aHlcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgaXNCb290ZWQudmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFtyZXNwb25zaXZlUHJvcHNdID0gVlJlc3BvbnNpdmUuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoVlJlc3BvbnNpdmUsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtaW1nJywge1xuICAgICAgICAgICd2LWltZy0tYm9vdGluZyc6ICFpc0Jvb3RlZC52YWx1ZVxuICAgICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW3tcbiAgICAgICAgICB3aWR0aDogY29udmVydFRvVW5pdChwcm9wcy53aWR0aCA9PT0gJ2F1dG8nID8gbmF0dXJhbFdpZHRoLnZhbHVlIDogcHJvcHMud2lkdGgpXG4gICAgICAgIH0sIHByb3BzLnN0eWxlXVxuICAgICAgfSwgcmVzcG9uc2l2ZVByb3BzLCB7XG4gICAgICAgIFwiYXNwZWN0UmF0aW9cIjogYXNwZWN0UmF0aW8udmFsdWUsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBwcm9wcy5hbHQsXG4gICAgICAgIFwicm9sZVwiOiBwcm9wcy5hbHQgPyAnaW1nJyA6IHVuZGVmaW5lZFxuICAgICAgfSksIHtcbiAgICAgICAgYWRkaXRpb25hbDogKCkgPT4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW19jcmVhdGVWTm9kZShfX2ltYWdlLCBudWxsLCBudWxsKSwgX2NyZWF0ZVZOb2RlKF9fcHJlbG9hZEltYWdlLCBudWxsLCBudWxsKSwgX2NyZWF0ZVZOb2RlKF9fZ3JhZGllbnQsIG51bGwsIG51bGwpLCBfY3JlYXRlVk5vZGUoX19wbGFjZWhvbGRlciwgbnVsbCwgbnVsbCksIF9jcmVhdGVWTm9kZShfX2Vycm9yLCBudWxsLCBudWxsKV0pLFxuICAgICAgICBkZWZhdWx0OiBzbG90cy5kZWZhdWx0XG4gICAgICB9KSwgW1tfcmVzb2x2ZURpcmVjdGl2ZShcImludGVyc2VjdFwiKSwge1xuICAgICAgICBoYW5kbGVyOiBpbml0LFxuICAgICAgICBvcHRpb25zOiBwcm9wcy5vcHRpb25zXG4gICAgICB9LCBudWxsLCB7XG4gICAgICAgIG9uY2U6IHRydWVcbiAgICAgIH1dXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnRTcmMsXG4gICAgICBpbWFnZSxcbiAgICAgIHN0YXRlLFxuICAgICAgbmF0dXJhbFdpZHRoLFxuICAgICAgbmF0dXJhbEhlaWdodFxuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkltZy5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaXNSZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlTmFtZSwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VCb3JkZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGJvcmRlcjogW0Jvb2xlYW4sIE51bWJlciwgU3RyaW5nXVxufSwgJ2JvcmRlcicpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUJvcmRlcihwcm9wcykge1xuICBsZXQgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZ2V0Q3VycmVudEluc3RhbmNlTmFtZSgpO1xuICBjb25zdCBib3JkZXJDbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IGJvcmRlciA9IGlzUmVmKHByb3BzKSA/IHByb3BzLnZhbHVlIDogcHJvcHMuYm9yZGVyO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBbXTtcbiAgICBpZiAoYm9yZGVyID09PSB0cnVlIHx8IGJvcmRlciA9PT0gJycpIHtcbiAgICAgIGNsYXNzZXMucHVzaChgJHtuYW1lfS0tYm9yZGVyYCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYm9yZGVyID09PSAnc3RyaW5nJyB8fCBib3JkZXIgPT09IDApIHtcbiAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgU3RyaW5nKGJvcmRlcikuc3BsaXQoJyAnKSkge1xuICAgICAgICBjbGFzc2VzLnB1c2goYGJvcmRlci0ke3ZhbHVlfWApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYm9yZGVyQ2xhc3Nlc1xuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9yZGVyLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBpc1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBkZXN0cnVjdENvbXB1dGVkLCBnZXRGb3JlZ3JvdW5kLCBpc0Nzc0NvbG9yLCBwYXJzZUNvbG9yIH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbG9yKGNvbG9ycykge1xuICByZXR1cm4gZGVzdHJ1Y3RDb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgY2xhc3NlcyA9IFtdO1xuICAgIGNvbnN0IHN0eWxlcyA9IHt9O1xuICAgIGlmIChjb2xvcnMudmFsdWUuYmFja2dyb3VuZCkge1xuICAgICAgaWYgKGlzQ3NzQ29sb3IoY29sb3JzLnZhbHVlLmJhY2tncm91bmQpKSB7XG4gICAgICAgIHN0eWxlcy5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcnMudmFsdWUuYmFja2dyb3VuZDtcbiAgICAgICAgaWYgKCFjb2xvcnMudmFsdWUudGV4dCkge1xuICAgICAgICAgIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IHBhcnNlQ29sb3IoY29sb3JzLnZhbHVlLmJhY2tncm91bmQpO1xuICAgICAgICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IuYSA9PSBudWxsIHx8IGJhY2tncm91bmRDb2xvci5hID09PSAxKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0Q29sb3IgPSBnZXRGb3JlZ3JvdW5kKGJhY2tncm91bmRDb2xvcik7XG4gICAgICAgICAgICBzdHlsZXMuY29sb3IgPSB0ZXh0Q29sb3I7XG4gICAgICAgICAgICBzdHlsZXMuY2FyZXRDb2xvciA9IHRleHRDb2xvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChgYmctJHtjb2xvcnMudmFsdWUuYmFja2dyb3VuZH1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbG9ycy52YWx1ZS50ZXh0KSB7XG4gICAgICBpZiAoaXNDc3NDb2xvcihjb2xvcnMudmFsdWUudGV4dCkpIHtcbiAgICAgICAgc3R5bGVzLmNvbG9yID0gY29sb3JzLnZhbHVlLnRleHQ7XG4gICAgICAgIHN0eWxlcy5jYXJldENvbG9yID0gY29sb3JzLnZhbHVlLnRleHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGFzc2VzLnB1c2goYHRleHQtJHtjb2xvcnMudmFsdWUudGV4dH1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbG9yQ2xhc3NlczogY2xhc3NlcyxcbiAgICAgIGNvbG9yU3R5bGVzOiBzdHlsZXNcbiAgICB9O1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VUZXh0Q29sb3IocHJvcHMsIG5hbWUpIHtcbiAgY29uc3QgY29sb3JzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICB0ZXh0OiBpc1JlZihwcm9wcykgPyBwcm9wcy52YWx1ZSA6IG5hbWUgPyBwcm9wc1tuYW1lXSA6IG51bGxcbiAgfSkpO1xuICBjb25zdCB7XG4gICAgY29sb3JDbGFzc2VzOiB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgIGNvbG9yU3R5bGVzOiB0ZXh0Q29sb3JTdHlsZXNcbiAgfSA9IHVzZUNvbG9yKGNvbG9ycyk7XG4gIHJldHVybiB7XG4gICAgdGV4dENvbG9yQ2xhc3NlcyxcbiAgICB0ZXh0Q29sb3JTdHlsZXNcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VCYWNrZ3JvdW5kQ29sb3IocHJvcHMsIG5hbWUpIHtcbiAgY29uc3QgY29sb3JzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICBiYWNrZ3JvdW5kOiBpc1JlZihwcm9wcykgPyBwcm9wcy52YWx1ZSA6IG5hbWUgPyBwcm9wc1tuYW1lXSA6IG51bGxcbiAgfSkpO1xuICBjb25zdCB7XG4gICAgY29sb3JDbGFzc2VzOiBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgIGNvbG9yU3R5bGVzOiBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgfSA9IHVzZUNvbG9yKGNvbG9ycyk7XG4gIHJldHVybiB7XG4gICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbG9yLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBpc1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbi8vIENvbXBvc2FibGVzXG5leHBvcnQgY29uc3QgbWFrZUVsZXZhdGlvblByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZWxldmF0aW9uOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICB2YWxpZGF0b3Iodikge1xuICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZUludCh2KTtcbiAgICAgIHJldHVybiAhaXNOYU4odmFsdWUpICYmIHZhbHVlID49IDAgJiZcbiAgICAgIC8vIE1hdGVyaWFsIERlc2lnbiBoYXMgYSBtYXhpbXVtIGVsZXZhdGlvbiBvZiAyNFxuICAgICAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vZW52aXJvbm1lbnQvZWxldmF0aW9uLmh0bWwjZGVmYXVsdC1lbGV2YXRpb25zXG4gICAgICB2YWx1ZSA8PSAyNDtcbiAgICB9XG4gIH1cbn0sICdlbGV2YXRpb24nKTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VFbGV2YXRpb24ocHJvcHMpIHtcbiAgY29uc3QgZWxldmF0aW9uQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBlbGV2YXRpb24gPSBpc1JlZihwcm9wcykgPyBwcm9wcy52YWx1ZSA6IHByb3BzLmVsZXZhdGlvbjtcbiAgICBjb25zdCBjbGFzc2VzID0gW107XG4gICAgaWYgKGVsZXZhdGlvbiA9PSBudWxsKSByZXR1cm4gY2xhc3NlcztcbiAgICBjbGFzc2VzLnB1c2goYGVsZXZhdGlvbi0ke2VsZXZhdGlvbn1gKTtcbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZWxldmF0aW9uQ2xhc3Nlc1xuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWxldmF0aW9uLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBpc1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2VOYW1lLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbi8vIENvbXBvc2FibGVzXG5leHBvcnQgY29uc3QgbWFrZVJvdW5kZWRQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHJvdW5kZWQ6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9XG59LCAncm91bmRlZCcpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJvdW5kZWQocHJvcHMpIHtcbiAgbGV0IG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGdldEN1cnJlbnRJbnN0YW5jZU5hbWUoKTtcbiAgY29uc3Qgcm91bmRlZENsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3Qgcm91bmRlZCA9IGlzUmVmKHByb3BzKSA/IHByb3BzLnZhbHVlIDogcHJvcHMucm91bmRlZDtcbiAgICBjb25zdCBjbGFzc2VzID0gW107XG4gICAgaWYgKHJvdW5kZWQgPT09IHRydWUgfHwgcm91bmRlZCA9PT0gJycpIHtcbiAgICAgIGNsYXNzZXMucHVzaChgJHtuYW1lfS0tcm91bmRlZGApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHJvdW5kZWQgPT09ICdzdHJpbmcnIHx8IHJvdW5kZWQgPT09IDApIHtcbiAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgU3RyaW5nKHJvdW5kZWQpLnNwbGl0KCcgJykpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKGByb3VuZGVkLSR7dmFsdWV9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjbGFzc2VzO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICByb3VuZGVkQ2xhc3Nlc1xuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91bmRlZC5tanMubWFwIiwiaW1wb3J0IHsgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZUb29sYmFyLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWVG9vbGJhclRpdGxlIH0gZnJvbSBcIi4vVlRvb2xiYXJUaXRsZS5tanNcIjtcbmltcG9ydCB7IFZFeHBhbmRUcmFuc2l0aW9uIH0gZnJvbSBcIi4uL3RyYW5zaXRpb25zL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWSW1nIH0gZnJvbSBcIi4uL1ZJbWcvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQm9yZGVyUHJvcHMsIHVzZUJvcmRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ib3JkZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VCYWNrZ3JvdW5kQ29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBzaGFsbG93UmVmLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3QgYWxsb3dlZERlbnNpdGllcyA9IFtudWxsLCAncHJvbWluZW50JywgJ2RlZmF1bHQnLCAnY29tZm9ydGFibGUnLCAnY29tcGFjdCddO1xuZXhwb3J0IGNvbnN0IG1ha2VWVG9vbGJhclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWJzb2x1dGU6IEJvb2xlYW4sXG4gIGNvbGxhcHNlOiBCb29sZWFuLFxuICBjb2xvcjogU3RyaW5nLFxuICBkZW5zaXR5OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdkZWZhdWx0JyxcbiAgICB2YWxpZGF0b3I6IHYgPT4gYWxsb3dlZERlbnNpdGllcy5pbmNsdWRlcyh2KVxuICB9LFxuICBleHRlbmRlZDogQm9vbGVhbixcbiAgZXh0ZW5zaW9uSGVpZ2h0OiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiA0OFxuICB9LFxuICBmbGF0OiBCb29sZWFuLFxuICBmbG9hdGluZzogQm9vbGVhbixcbiAgaGVpZ2h0OiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiA2NFxuICB9LFxuICBpbWFnZTogU3RyaW5nLFxuICB0aXRsZTogU3RyaW5nLFxuICAuLi5tYWtlQm9yZGVyUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcyh7XG4gICAgdGFnOiAnaGVhZGVyJ1xuICB9KSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZUb29sYmFyJyk7XG5leHBvcnQgY29uc3QgVlRvb2xiYXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlRvb2xiYXInLFxuICBwcm9wczogbWFrZVZUb29sYmFyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcih0b1JlZihwcm9wcywgJ2NvbG9yJykpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJvcmRlckNsYXNzZXNcbiAgICB9ID0gdXNlQm9yZGVyKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcnRsQ2xhc3Nlc1xuICAgIH0gPSB1c2VSdGwoKTtcbiAgICBjb25zdCBpc0V4dGVuZGVkID0gc2hhbGxvd1JlZighIShwcm9wcy5leHRlbmRlZCB8fCBzbG90cy5leHRlbnNpb24/LigpKSk7XG4gICAgY29uc3QgY29udGVudEhlaWdodCA9IGNvbXB1dGVkKCgpID0+IHBhcnNlSW50KE51bWJlcihwcm9wcy5oZWlnaHQpICsgKHByb3BzLmRlbnNpdHkgPT09ICdwcm9taW5lbnQnID8gTnVtYmVyKHByb3BzLmhlaWdodCkgOiAwKSAtIChwcm9wcy5kZW5zaXR5ID09PSAnY29tZm9ydGFibGUnID8gOCA6IDApIC0gKHByb3BzLmRlbnNpdHkgPT09ICdjb21wYWN0JyA/IDE2IDogMCksIDEwKSk7XG4gICAgY29uc3QgZXh0ZW5zaW9uSGVpZ2h0ID0gY29tcHV0ZWQoKCkgPT4gaXNFeHRlbmRlZC52YWx1ZSA/IHBhcnNlSW50KE51bWJlcihwcm9wcy5leHRlbnNpb25IZWlnaHQpICsgKHByb3BzLmRlbnNpdHkgPT09ICdwcm9taW5lbnQnID8gTnVtYmVyKHByb3BzLmV4dGVuc2lvbkhlaWdodCkgOiAwKSAtIChwcm9wcy5kZW5zaXR5ID09PSAnY29tZm9ydGFibGUnID8gNCA6IDApIC0gKHByb3BzLmRlbnNpdHkgPT09ICdjb21wYWN0JyA/IDggOiAwKSwgMTApIDogMCk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZCdG46IHtcbiAgICAgICAgdmFyaWFudDogJ3RleHQnXG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IGhhc1RpdGxlID0gISEocHJvcHMudGl0bGUgfHwgc2xvdHMudGl0bGUpO1xuICAgICAgY29uc3QgaGFzSW1hZ2UgPSAhIShzbG90cy5pbWFnZSB8fCBwcm9wcy5pbWFnZSk7XG4gICAgICBjb25zdCBleHRlbnNpb24gPSBzbG90cy5leHRlbnNpb24/LigpO1xuICAgICAgaXNFeHRlbmRlZC52YWx1ZSA9ICEhKHByb3BzLmV4dGVuZGVkIHx8IGV4dGVuc2lvbik7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi10b29sYmFyJywge1xuICAgICAgICAgICd2LXRvb2xiYXItLWFic29sdXRlJzogcHJvcHMuYWJzb2x1dGUsXG4gICAgICAgICAgJ3YtdG9vbGJhci0tY29sbGFwc2UnOiBwcm9wcy5jb2xsYXBzZSxcbiAgICAgICAgICAndi10b29sYmFyLS1mbGF0JzogcHJvcHMuZmxhdCxcbiAgICAgICAgICAndi10b29sYmFyLS1mbG9hdGluZyc6IHByb3BzLmZsb2F0aW5nLFxuICAgICAgICAgIFtgdi10b29sYmFyLS1kZW5zaXR5LSR7cHJvcHMuZGVuc2l0eX1gXTogdHJ1ZVxuICAgICAgICB9LCBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLnZhbHVlLCBib3JkZXJDbGFzc2VzLnZhbHVlLCBlbGV2YXRpb25DbGFzc2VzLnZhbHVlLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBydGxDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW2JhY2tncm91bmRDb2xvclN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtoYXNJbWFnZSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwiaW1hZ2VcIixcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi10b29sYmFyX19pbWFnZVwiXG4gICAgICAgIH0sIFshc2xvdHMuaW1hZ2UgPyBfY3JlYXRlVk5vZGUoVkltZywge1xuICAgICAgICAgIFwia2V5XCI6IFwiaW1hZ2UtaW1nXCIsXG4gICAgICAgICAgXCJjb3ZlclwiOiB0cnVlLFxuICAgICAgICAgIFwic3JjXCI6IHByb3BzLmltYWdlXG4gICAgICAgIH0sIG51bGwpIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJpbWFnZS1kZWZhdWx0c1wiLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogIXByb3BzLmltYWdlLFxuICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgVkltZzoge1xuICAgICAgICAgICAgICBjb3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgc3JjOiBwcm9wcy5pbWFnZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgc2xvdHMuaW1hZ2UpXSksIF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgVlRhYnM6IHtcbiAgICAgICAgICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KGNvbnRlbnRIZWlnaHQudmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwidi10b29sYmFyX19jb250ZW50XCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KGNvbnRlbnRIZWlnaHQudmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgW3Nsb3RzLnByZXBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXRvb2xiYXJfX3ByZXBlbmRcIlxuICAgICAgICAgIH0sIFtzbG90cy5wcmVwZW5kPy4oKV0pLCBoYXNUaXRsZSAmJiBfY3JlYXRlVk5vZGUoVlRvb2xiYXJUaXRsZSwge1xuICAgICAgICAgICAgXCJrZXlcIjogXCJ0aXRsZVwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IHByb3BzLnRpdGxlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgdGV4dDogc2xvdHMudGl0bGVcbiAgICAgICAgICB9KSwgc2xvdHMuZGVmYXVsdD8uKCksIHNsb3RzLmFwcGVuZCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtdG9vbGJhcl9fYXBwZW5kXCJcbiAgICAgICAgICB9LCBbc2xvdHMuYXBwZW5kPy4oKV0pXSldXG4gICAgICAgIH0pLCBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZUYWJzOiB7XG4gICAgICAgICAgICAgIGhlaWdodDogY29udmVydFRvVW5pdChleHRlbnNpb25IZWlnaHQudmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShWRXhwYW5kVHJhbnNpdGlvbiwgbnVsbCwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW2lzRXh0ZW5kZWQudmFsdWUgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtdG9vbGJhcl9fZXh0ZW5zaW9uXCIsXG4gICAgICAgICAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICAgICAgICAgIGhlaWdodDogY29udmVydFRvVW5pdChleHRlbnNpb25IZWlnaHQudmFsdWUpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIFtleHRlbnNpb25dKV1cbiAgICAgICAgICB9KV1cbiAgICAgICAgfSldXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGVudEhlaWdodCxcbiAgICAgIGV4dGVuc2lvbkhlaWdodFxuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlRvb2xiYXIubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG9uQmVmb3JlVW5tb3VudCwgb25Nb3VudGVkLCByZWYsIHNoYWxsb3dSZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNsYW1wLCBjb25zb2xlV2FybiwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VTY3JvbGxQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHNjcm9sbFRhcmdldDoge1xuICAgIHR5cGU6IFN0cmluZ1xuICB9LFxuICBzY3JvbGxUaHJlc2hvbGQ6IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGRlZmF1bHQ6IDMwMFxuICB9XG59LCAnc2Nyb2xsJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlU2Nyb2xsKHByb3BzKSB7XG4gIGxldCBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgY29uc3Qge1xuICAgIGNhblNjcm9sbFxuICB9ID0gYXJncztcbiAgbGV0IHByZXZpb3VzU2Nyb2xsID0gMDtcbiAgY29uc3QgdGFyZ2V0ID0gcmVmKG51bGwpO1xuICBjb25zdCBjdXJyZW50U2Nyb2xsID0gc2hhbGxvd1JlZigwKTtcbiAgY29uc3Qgc2F2ZWRTY3JvbGwgPSBzaGFsbG93UmVmKDApO1xuICBjb25zdCBjdXJyZW50VGhyZXNob2xkID0gc2hhbGxvd1JlZigwKTtcbiAgY29uc3QgaXNTY3JvbGxBY3RpdmUgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgY29uc3QgaXNTY3JvbGxpbmdVcCA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICBjb25zdCBzY3JvbGxUaHJlc2hvbGQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIE51bWJlcihwcm9wcy5zY3JvbGxUaHJlc2hvbGQpO1xuICB9KTtcblxuICAvKipcbiAgICogMTogYXQgdG9wXG4gICAqIDA6IGF0IHRocmVzaG9sZFxuICAgKi9cbiAgY29uc3Qgc2Nyb2xsUmF0aW8gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIGNsYW1wKChzY3JvbGxUaHJlc2hvbGQudmFsdWUgLSBjdXJyZW50U2Nyb2xsLnZhbHVlKSAvIHNjcm9sbFRocmVzaG9sZC52YWx1ZSB8fCAwKTtcbiAgfSk7XG4gIGNvbnN0IG9uU2Nyb2xsID0gKCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEVsID0gdGFyZ2V0LnZhbHVlO1xuICAgIGlmICghdGFyZ2V0RWwgfHwgY2FuU2Nyb2xsICYmICFjYW5TY3JvbGwudmFsdWUpIHJldHVybjtcbiAgICBwcmV2aW91c1Njcm9sbCA9IGN1cnJlbnRTY3JvbGwudmFsdWU7XG4gICAgY3VycmVudFNjcm9sbC52YWx1ZSA9ICd3aW5kb3cnIGluIHRhcmdldEVsID8gdGFyZ2V0RWwucGFnZVlPZmZzZXQgOiB0YXJnZXRFbC5zY3JvbGxUb3A7XG4gICAgaXNTY3JvbGxpbmdVcC52YWx1ZSA9IGN1cnJlbnRTY3JvbGwudmFsdWUgPCBwcmV2aW91c1Njcm9sbDtcbiAgICBjdXJyZW50VGhyZXNob2xkLnZhbHVlID0gTWF0aC5hYnMoY3VycmVudFNjcm9sbC52YWx1ZSAtIHNjcm9sbFRocmVzaG9sZC52YWx1ZSk7XG4gIH07XG4gIHdhdGNoKGlzU2Nyb2xsaW5nVXAsICgpID0+IHtcbiAgICBzYXZlZFNjcm9sbC52YWx1ZSA9IHNhdmVkU2Nyb2xsLnZhbHVlIHx8IGN1cnJlbnRTY3JvbGwudmFsdWU7XG4gIH0pO1xuICB3YXRjaChpc1Njcm9sbEFjdGl2ZSwgKCkgPT4ge1xuICAgIHNhdmVkU2Nyb2xsLnZhbHVlID0gMDtcbiAgfSk7XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuc2Nyb2xsVGFyZ2V0LCBzY3JvbGxUYXJnZXQgPT4ge1xuICAgICAgY29uc3QgbmV3VGFyZ2V0ID0gc2Nyb2xsVGFyZ2V0ID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzY3JvbGxUYXJnZXQpIDogd2luZG93O1xuICAgICAgaWYgKCFuZXdUYXJnZXQpIHtcbiAgICAgICAgY29uc29sZVdhcm4oYFVuYWJsZSB0byBsb2NhdGUgZWxlbWVudCB3aXRoIGlkZW50aWZpZXIgJHtzY3JvbGxUYXJnZXR9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdUYXJnZXQgPT09IHRhcmdldC52YWx1ZSkgcmV0dXJuO1xuICAgICAgdGFyZ2V0LnZhbHVlPy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbCk7XG4gICAgICB0YXJnZXQudmFsdWUgPSBuZXdUYXJnZXQ7XG4gICAgICB0YXJnZXQudmFsdWUuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwsIHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSwge1xuICAgICAgaW1tZWRpYXRlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xuICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgIHRhcmdldC52YWx1ZT8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwpO1xuICB9KTtcblxuICAvLyBEbyB3ZSBuZWVkIHRoaXM/IElmIHllcyAtIHNlZW1zIHRoYXRcbiAgLy8gdGhlcmUncyBubyBuZWVkIHRvIGV4cG9zZSBvblNjcm9sbFxuICBjYW5TY3JvbGwgJiYgd2F0Y2goY2FuU2Nyb2xsLCBvblNjcm9sbCwge1xuICAgIGltbWVkaWF0ZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxUaHJlc2hvbGQsXG4gICAgY3VycmVudFNjcm9sbCxcbiAgICBjdXJyZW50VGhyZXNob2xkLFxuICAgIGlzU2Nyb2xsQWN0aXZlLFxuICAgIHNjcm9sbFJhdGlvLFxuICAgIC8vIHJlcXVpcmVkIG9ubHkgZm9yIHRlc3RpbmdcbiAgICAvLyBwcm9iYWJseSBjYW4gYmUgcmVtb3ZlZFxuICAgIC8vIGxhdGVyICgyIGNoYXJzIGNobG5nKVxuICAgIGlzU2Nyb2xsaW5nVXAsXG4gICAgc2F2ZWRTY3JvbGxcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjcm9sbC5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgb25Nb3VudGVkLCByZWFkb25seSwgc2hhbGxvd1JlZiB9IGZyb20gJ3Z1ZSc7XG5cbi8vIENvbXBvc2FibGVzXG5leHBvcnQgZnVuY3Rpb24gdXNlU3NyQm9vdCgpIHtcbiAgY29uc3QgaXNCb290ZWQgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgb25Nb3VudGVkKCgpID0+IHtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGlzQm9vdGVkLnZhbHVlID0gdHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIGNvbnN0IHNzckJvb3RTdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAhaXNCb290ZWQudmFsdWUgPyB7XG4gICAgdHJhbnNpdGlvbjogJ25vbmUgIWltcG9ydGFudCdcbiAgfSA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiB7XG4gICAgc3NyQm9vdFN0eWxlcyxcbiAgICBpc0Jvb3RlZDogcmVhZG9ubHkoaXNCb290ZWQpXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zc3JCb290Lm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkFwcEJhci5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgbWFrZVZUb29sYmFyUHJvcHMsIFZUb29sYmFyIH0gZnJvbSBcIi4uL1ZUb29sYmFyL1ZUb29sYmFyLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUxheW91dEl0ZW1Qcm9wcywgdXNlTGF5b3V0SXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sYXlvdXQubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNjcm9sbFByb3BzLCB1c2VTY3JvbGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc2Nyb2xsLm1qc1wiO1xuaW1wb3J0IHsgdXNlU3NyQm9vdCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zc3JCb290Lm1qc1wiO1xuaW1wb3J0IHsgdXNlVG9nZ2xlU2NvcGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdG9nZ2xlU2NvcGUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHJlZiwgc2hhbGxvd1JlZiwgdG9SZWYsIHdhdGNoRWZmZWN0IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZBcHBCYXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHNjcm9sbEJlaGF2aW9yOiBTdHJpbmcsXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ3RvcCcsXG4gICAgdmFsaWRhdG9yOiB2YWx1ZSA9PiBbJ3RvcCcsICdib3R0b20nXS5pbmNsdWRlcyh2YWx1ZSlcbiAgfSxcbiAgLi4ubWFrZVZUb29sYmFyUHJvcHMoKSxcbiAgLi4ubWFrZUxheW91dEl0ZW1Qcm9wcygpLFxuICAuLi5tYWtlU2Nyb2xsUHJvcHMoKSxcbiAgaGVpZ2h0OiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiA2NFxuICB9XG59LCAnVkFwcEJhcicpO1xuZXhwb3J0IGNvbnN0IFZBcHBCYXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkFwcEJhcicsXG4gIHByb3BzOiBtYWtlVkFwcEJhclByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHZUb29sYmFyUmVmID0gcmVmKCk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgY29uc3Qgc2Nyb2xsQmVoYXZpb3IgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBiZWhhdmlvciA9IG5ldyBTZXQocHJvcHMuc2Nyb2xsQmVoYXZpb3I/LnNwbGl0KCcgJykgPz8gW10pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGlkZTogYmVoYXZpb3IuaGFzKCdoaWRlJyksXG4gICAgICAgIC8vIGZ1bGx5SGlkZTogYmVoYXZpb3IuaGFzKCdmdWxseS1oaWRlJyksXG4gICAgICAgIGludmVydGVkOiBiZWhhdmlvci5oYXMoJ2ludmVydGVkJyksXG4gICAgICAgIGNvbGxhcHNlOiBiZWhhdmlvci5oYXMoJ2NvbGxhcHNlJyksXG4gICAgICAgIGVsZXZhdGU6IGJlaGF2aW9yLmhhcygnZWxldmF0ZScpLFxuICAgICAgICBmYWRlSW1hZ2U6IGJlaGF2aW9yLmhhcygnZmFkZS1pbWFnZScpXG4gICAgICAgIC8vIHNocmluazogYmVoYXZpb3IuaGFzKCdzaHJpbmsnKSxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBjb25zdCBjYW5TY3JvbGwgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBiZWhhdmlvciA9IHNjcm9sbEJlaGF2aW9yLnZhbHVlO1xuICAgICAgcmV0dXJuIGJlaGF2aW9yLmhpZGUgfHxcbiAgICAgIC8vIGJlaGF2aW9yLmZ1bGx5SGlkZSB8fFxuICAgICAgYmVoYXZpb3IuaW52ZXJ0ZWQgfHwgYmVoYXZpb3IuY29sbGFwc2UgfHwgYmVoYXZpb3IuZWxldmF0ZSB8fCBiZWhhdmlvci5mYWRlSW1hZ2UgfHxcbiAgICAgIC8vIGJlaGF2aW9yLnNocmluayB8fFxuICAgICAgIWlzQWN0aXZlLnZhbHVlO1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGN1cnJlbnRTY3JvbGwsXG4gICAgICBzY3JvbGxUaHJlc2hvbGQsXG4gICAgICBpc1Njcm9sbGluZ1VwLFxuICAgICAgc2Nyb2xsUmF0aW9cbiAgICB9ID0gdXNlU2Nyb2xsKHByb3BzLCB7XG4gICAgICBjYW5TY3JvbGxcbiAgICB9KTtcbiAgICBjb25zdCBpc0NvbGxhcHNlZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmNvbGxhcHNlIHx8IHNjcm9sbEJlaGF2aW9yLnZhbHVlLmNvbGxhcHNlICYmIChzY3JvbGxCZWhhdmlvci52YWx1ZS5pbnZlcnRlZCA/IHNjcm9sbFJhdGlvLnZhbHVlID4gMCA6IHNjcm9sbFJhdGlvLnZhbHVlID09PSAwKSk7XG4gICAgY29uc3QgaXNGbGF0ID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuZmxhdCB8fCBzY3JvbGxCZWhhdmlvci52YWx1ZS5lbGV2YXRlICYmIChzY3JvbGxCZWhhdmlvci52YWx1ZS5pbnZlcnRlZCA/IGN1cnJlbnRTY3JvbGwudmFsdWUgPiAwIDogY3VycmVudFNjcm9sbC52YWx1ZSA9PT0gMCkpO1xuICAgIGNvbnN0IG9wYWNpdHkgPSBjb21wdXRlZCgoKSA9PiBzY3JvbGxCZWhhdmlvci52YWx1ZS5mYWRlSW1hZ2UgPyBzY3JvbGxCZWhhdmlvci52YWx1ZS5pbnZlcnRlZCA/IDEgLSBzY3JvbGxSYXRpby52YWx1ZSA6IHNjcm9sbFJhdGlvLnZhbHVlIDogdW5kZWZpbmVkKTtcbiAgICBjb25zdCBoZWlnaHQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAoc2Nyb2xsQmVoYXZpb3IudmFsdWUuaGlkZSAmJiBzY3JvbGxCZWhhdmlvci52YWx1ZS5pbnZlcnRlZCkgcmV0dXJuIDA7XG4gICAgICBjb25zdCBoZWlnaHQgPSB2VG9vbGJhclJlZi52YWx1ZT8uY29udGVudEhlaWdodCA/PyAwO1xuICAgICAgY29uc3QgZXh0ZW5zaW9uSGVpZ2h0ID0gdlRvb2xiYXJSZWYudmFsdWU/LmV4dGVuc2lvbkhlaWdodCA/PyAwO1xuICAgICAgcmV0dXJuIGhlaWdodCArIGV4dGVuc2lvbkhlaWdodDtcbiAgICB9KTtcbiAgICB1c2VUb2dnbGVTY29wZShjb21wdXRlZCgoKSA9PiAhIXByb3BzLnNjcm9sbEJlaGF2aW9yKSwgKCkgPT4ge1xuICAgICAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoc2Nyb2xsQmVoYXZpb3IudmFsdWUuaGlkZSkge1xuICAgICAgICAgIGlmIChzY3JvbGxCZWhhdmlvci52YWx1ZS5pbnZlcnRlZCkge1xuICAgICAgICAgICAgaXNBY3RpdmUudmFsdWUgPSBjdXJyZW50U2Nyb2xsLnZhbHVlID4gc2Nyb2xsVGhyZXNob2xkLnZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpc0FjdGl2ZS52YWx1ZSA9IGlzU2Nyb2xsaW5nVXAudmFsdWUgfHwgY3VycmVudFNjcm9sbC52YWx1ZSA8IHNjcm9sbFRocmVzaG9sZC52YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNBY3RpdmUudmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBzc3JCb290U3R5bGVzXG4gICAgfSA9IHVzZVNzckJvb3QoKTtcbiAgICBjb25zdCB7XG4gICAgICBsYXlvdXRJdGVtU3R5bGVzXG4gICAgfSA9IHVzZUxheW91dEl0ZW0oe1xuICAgICAgaWQ6IHByb3BzLm5hbWUsXG4gICAgICBvcmRlcjogY29tcHV0ZWQoKCkgPT4gcGFyc2VJbnQocHJvcHMub3JkZXIsIDEwKSksXG4gICAgICBwb3NpdGlvbjogdG9SZWYocHJvcHMsICdsb2NhdGlvbicpLFxuICAgICAgbGF5b3V0U2l6ZTogaGVpZ2h0LFxuICAgICAgZWxlbWVudFNpemU6IHNoYWxsb3dSZWYodW5kZWZpbmVkKSxcbiAgICAgIGFjdGl2ZTogaXNBY3RpdmUsXG4gICAgICBhYnNvbHV0ZTogdG9SZWYocHJvcHMsICdhYnNvbHV0ZScpXG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFt0b29sYmFyUHJvcHNdID0gVlRvb2xiYXIuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWVG9vbGJhciwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcInJlZlwiOiB2VG9vbGJhclJlZixcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtYXBwLWJhcicsIHtcbiAgICAgICAgICAndi1hcHAtYmFyLS1ib3R0b20nOiBwcm9wcy5sb2NhdGlvbiA9PT0gJ2JvdHRvbSdcbiAgICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFt7XG4gICAgICAgICAgLi4ubGF5b3V0SXRlbVN0eWxlcy52YWx1ZSxcbiAgICAgICAgICAnLS12LXRvb2xiYXItaW1hZ2Utb3BhY2l0eSc6IG9wYWNpdHkudmFsdWUsXG4gICAgICAgICAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICAgICAgLi4uc3NyQm9vdFN0eWxlcy52YWx1ZVxuICAgICAgICB9LCBwcm9wcy5zdHlsZV1cbiAgICAgIH0sIHRvb2xiYXJQcm9wcywge1xuICAgICAgICBcImNvbGxhcHNlXCI6IGlzQ29sbGFwc2VkLnZhbHVlLFxuICAgICAgICBcImZsYXRcIjogaXNGbGF0LnZhbHVlXG4gICAgICB9KSwgc2xvdHMpO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQXBwQmFyLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZU5hbWUsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3QgYWxsb3dlZERlbnNpdGllcyA9IFtudWxsLCAnZGVmYXVsdCcsICdjb21mb3J0YWJsZScsICdjb21wYWN0J107XG5cbi8vIHR5cGVvZiBhbGxvd2VkRGVuc2l0aWVzW251bWJlcl0gZXZhbHV0ZXMgdG8gYW55XG4vLyB3aGVuIGdlbmVyYXRpbmcgYXBpIHR5cGVzIGZvciB3aGF0ZXZlciByZWFzb24uXG5cbi8vIENvbXBvc2FibGVzXG5leHBvcnQgY29uc3QgbWFrZURlbnNpdHlQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGRlbnNpdHk6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2RlZmF1bHQnLFxuICAgIHZhbGlkYXRvcjogdiA9PiBhbGxvd2VkRGVuc2l0aWVzLmluY2x1ZGVzKHYpXG4gIH1cbn0sICdkZW5zaXR5Jyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlRGVuc2l0eShwcm9wcykge1xuICBsZXQgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZ2V0Q3VycmVudEluc3RhbmNlTmFtZSgpO1xuICBjb25zdCBkZW5zaXR5Q2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gYCR7bmFtZX0tLWRlbnNpdHktJHtwcm9wcy5kZW5zaXR5fWA7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGRlbnNpdHlDbGFzc2VzXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZW5zaXR5Lm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIEZyYWdtZW50IGFzIF9GcmFnbWVudCB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VDb2xvciB9IGZyb20gXCIuL2NvbG9yLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCB1bnJlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2VOYW1lLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBhbGxvd2VkVmFyaWFudHMgPSBbJ2VsZXZhdGVkJywgJ2ZsYXQnLCAndG9uYWwnLCAnb3V0bGluZWQnLCAndGV4dCcsICdwbGFpbiddO1xuZXhwb3J0IGZ1bmN0aW9uIGdlbk92ZXJsYXlzKGlzQ2xpY2thYmxlLCBuYW1lKSB7XG4gIHJldHVybiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbaXNDbGlja2FibGUgJiYgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgXCJrZXlcIjogXCJvdmVybGF5XCIsXG4gICAgXCJjbGFzc1wiOiBgJHtuYW1lfV9fb3ZlcmxheWBcbiAgfSwgbnVsbCksIF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgIFwia2V5XCI6IFwidW5kZXJsYXlcIixcbiAgICBcImNsYXNzXCI6IGAke25hbWV9X191bmRlcmxheWBcbiAgfSwgbnVsbCldKTtcbn1cbmV4cG9ydCBjb25zdCBtYWtlVmFyaWFudFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29sb3I6IFN0cmluZyxcbiAgdmFyaWFudDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnZWxldmF0ZWQnLFxuICAgIHZhbGlkYXRvcjogdiA9PiBhbGxvd2VkVmFyaWFudHMuaW5jbHVkZXModilcbiAgfVxufSwgJ3ZhcmlhbnQnKTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VWYXJpYW50KHByb3BzKSB7XG4gIGxldCBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBnZXRDdXJyZW50SW5zdGFuY2VOYW1lKCk7XG4gIGNvbnN0IHZhcmlhbnRDbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHZhcmlhbnRcbiAgICB9ID0gdW5yZWYocHJvcHMpO1xuICAgIHJldHVybiBgJHtuYW1lfS0tdmFyaWFudC0ke3ZhcmlhbnR9YDtcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICBjb2xvckNsYXNzZXMsXG4gICAgY29sb3JTdHlsZXNcbiAgfSA9IHVzZUNvbG9yKGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB2YXJpYW50LFxuICAgICAgY29sb3JcbiAgICB9ID0gdW5yZWYocHJvcHMpO1xuICAgIHJldHVybiB7XG4gICAgICBbWydlbGV2YXRlZCcsICdmbGF0J10uaW5jbHVkZXModmFyaWFudCkgPyAnYmFja2dyb3VuZCcgOiAndGV4dCddOiBjb2xvclxuICAgIH07XG4gIH0pKTtcbiAgcmV0dXJuIHtcbiAgICBjb2xvckNsYXNzZXMsXG4gICAgY29sb3JTdHlsZXMsXG4gICAgdmFyaWFudENsYXNzZXNcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhcmlhbnQubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQnRuR3JvdXAuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQm9yZGVyUHJvcHMsIHVzZUJvcmRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ib3JkZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiO1xuaW1wb3J0IHsgbWFrZURlbnNpdHlQcm9wcywgdXNlRGVuc2l0eSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZW5zaXR5Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdW5kZWRQcm9wcywgdXNlUm91bmRlZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVmFyaWFudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3ZhcmlhbnQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkJ0bkdyb3VwUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBkaXZpZGVkOiBCb29sZWFuLFxuICAuLi5tYWtlQm9yZGVyUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKCksXG4gIC4uLm1ha2VWYXJpYW50UHJvcHMoKVxufSwgJ1ZCdG5Hcm91cCcpO1xuZXhwb3J0IGNvbnN0IFZCdG5Hcm91cCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQnRuR3JvdXAnLFxuICBwcm9wczogbWFrZVZCdG5Hcm91cFByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGVuc2l0eUNsYXNzZXNcbiAgICB9ID0gdXNlRGVuc2l0eShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgYm9yZGVyQ2xhc3Nlc1xuICAgIH0gPSB1c2VCb3JkZXIocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbkNsYXNzZXNcbiAgICB9ID0gdXNlRWxldmF0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzKTtcbiAgICBwcm92aWRlRGVmYXVsdHMoe1xuICAgICAgVkJ0bjoge1xuICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgICAgY29sb3I6IHRvUmVmKHByb3BzLCAnY29sb3InKSxcbiAgICAgICAgZGVuc2l0eTogdG9SZWYocHJvcHMsICdkZW5zaXR5JyksXG4gICAgICAgIGZsYXQ6IHRydWUsXG4gICAgICAgIHZhcmlhbnQ6IHRvUmVmKHByb3BzLCAndmFyaWFudCcpXG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWJ0bi1ncm91cCcsIHtcbiAgICAgICAgICAndi1idG4tZ3JvdXAtLWRpdmlkZWQnOiBwcm9wcy5kaXZpZGVkXG4gICAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgYm9yZGVyQ2xhc3Nlcy52YWx1ZSwgZGVuc2l0eUNsYXNzZXMudmFsdWUsIGVsZXZhdGlvbkNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIHNsb3RzKTtcbiAgICB9KTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQnRuR3JvdXAubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCwgb25CZWZvcmVVbm1vdW50LCBvbk1vdW50ZWQsIHByb3ZpZGUsIHJlYWN0aXZlLCB0b1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29uc29sZVdhcm4sIGRlZXBFcXVhbCwgZmluZENoaWxkcmVuV2l0aFByb3ZpZGUsIGdldEN1cnJlbnRJbnN0YW5jZSwgZ2V0VWlkLCBwcm9wc0ZhY3RvcnksIHdyYXBJbkFycmF5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZUdyb3VwUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBtb2RlbFZhbHVlOiB7XG4gICAgdHlwZTogbnVsbCxcbiAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgfSxcbiAgbXVsdGlwbGU6IEJvb2xlYW4sXG4gIG1hbmRhdG9yeTogW0Jvb2xlYW4sIFN0cmluZ10sXG4gIG1heDogTnVtYmVyLFxuICBzZWxlY3RlZENsYXNzOiBTdHJpbmcsXG4gIGRpc2FibGVkOiBCb29sZWFuXG59LCAnZ3JvdXAnKTtcbmV4cG9ydCBjb25zdCBtYWtlR3JvdXBJdGVtUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICB2YWx1ZTogbnVsbCxcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIHNlbGVjdGVkQ2xhc3M6IFN0cmluZ1xufSwgJ2dyb3VwLWl0ZW0nKTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VHcm91cEl0ZW0ocHJvcHMsIGluamVjdEtleSkge1xuICBsZXQgcmVxdWlyZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG4gIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKCd1c2VHcm91cEl0ZW0nKTtcbiAgaWYgKCF2bSkge1xuICAgIHRocm93IG5ldyBFcnJvcignW1Z1ZXRpZnldIHVzZUdyb3VwSXRlbSBjb21wb3NhYmxlIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBjb21wb25lbnQgc2V0dXAgZnVuY3Rpb24nKTtcbiAgfVxuICBjb25zdCBpZCA9IGdldFVpZCgpO1xuICBwcm92aWRlKFN5bWJvbC5mb3IoYCR7aW5qZWN0S2V5LmRlc2NyaXB0aW9ufTppZGApLCBpZCk7XG4gIGNvbnN0IGdyb3VwID0gaW5qZWN0KGluamVjdEtleSwgbnVsbCk7XG4gIGlmICghZ3JvdXApIHtcbiAgICBpZiAoIXJlcXVpcmVkKSByZXR1cm4gZ3JvdXA7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBbVnVldGlmeV0gQ291bGQgbm90IGZpbmQgdXNlR3JvdXAgaW5qZWN0aW9uIHdpdGggc3ltYm9sICR7aW5qZWN0S2V5LmRlc2NyaXB0aW9ufWApO1xuICB9XG4gIGNvbnN0IHZhbHVlID0gdG9SZWYocHJvcHMsICd2YWx1ZScpO1xuICBjb25zdCBkaXNhYmxlZCA9IGNvbXB1dGVkKCgpID0+ICEhKGdyb3VwLmRpc2FibGVkLnZhbHVlIHx8IHByb3BzLmRpc2FibGVkKSk7XG4gIGdyb3VwLnJlZ2lzdGVyKHtcbiAgICBpZCxcbiAgICB2YWx1ZSxcbiAgICBkaXNhYmxlZFxuICB9LCB2bSk7XG4gIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgZ3JvdXAudW5yZWdpc3RlcihpZCk7XG4gIH0pO1xuICBjb25zdCBpc1NlbGVjdGVkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBncm91cC5pc1NlbGVjdGVkKGlkKTtcbiAgfSk7XG4gIGNvbnN0IHNlbGVjdGVkQ2xhc3MgPSBjb21wdXRlZCgoKSA9PiBpc1NlbGVjdGVkLnZhbHVlICYmIFtncm91cC5zZWxlY3RlZENsYXNzLnZhbHVlLCBwcm9wcy5zZWxlY3RlZENsYXNzXSk7XG4gIHdhdGNoKGlzU2VsZWN0ZWQsIHZhbHVlID0+IHtcbiAgICB2bS5lbWl0KCdncm91cDpzZWxlY3RlZCcsIHtcbiAgICAgIHZhbHVlXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGlkLFxuICAgIGlzU2VsZWN0ZWQsXG4gICAgdG9nZ2xlOiAoKSA9PiBncm91cC5zZWxlY3QoaWQsICFpc1NlbGVjdGVkLnZhbHVlKSxcbiAgICBzZWxlY3Q6IHZhbHVlID0+IGdyb3VwLnNlbGVjdChpZCwgdmFsdWUpLFxuICAgIHNlbGVjdGVkQ2xhc3MsXG4gICAgdmFsdWUsXG4gICAgZGlzYWJsZWQsXG4gICAgZ3JvdXBcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VHcm91cChwcm9wcywgaW5qZWN0S2V5KSB7XG4gIGxldCBpc1VubW91bnRlZCA9IGZhbHNlO1xuICBjb25zdCBpdGVtcyA9IHJlYWN0aXZlKFtdKTtcbiAgY29uc3Qgc2VsZWN0ZWQgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJywgW10sIHYgPT4ge1xuICAgIGlmICh2ID09IG51bGwpIHJldHVybiBbXTtcbiAgICByZXR1cm4gZ2V0SWRzKGl0ZW1zLCB3cmFwSW5BcnJheSh2KSk7XG4gIH0sIHYgPT4ge1xuICAgIGNvbnN0IGFyciA9IGdldFZhbHVlcyhpdGVtcywgdik7XG4gICAgcmV0dXJuIHByb3BzLm11bHRpcGxlID8gYXJyIDogYXJyWzBdO1xuICB9KTtcbiAgY29uc3QgZ3JvdXBWbSA9IGdldEN1cnJlbnRJbnN0YW5jZSgndXNlR3JvdXAnKTtcbiAgZnVuY3Rpb24gcmVnaXN0ZXIoaXRlbSwgdm0pIHtcbiAgICAvLyBJcyB0aGVyZSBhIGJldHRlciB3YXkgdG8gZml4IHRoaXMgdHlwaW5nP1xuICAgIGNvbnN0IHVud3JhcHBlZCA9IGl0ZW07XG4gICAgY29uc3Qga2V5ID0gU3ltYm9sLmZvcihgJHtpbmplY3RLZXkuZGVzY3JpcHRpb259OmlkYCk7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBmaW5kQ2hpbGRyZW5XaXRoUHJvdmlkZShrZXksIGdyb3VwVm0/LnZub2RlKTtcbiAgICBjb25zdCBpbmRleCA9IGNoaWxkcmVuLmluZGV4T2Yodm0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICBpdGVtcy5zcGxpY2UoaW5kZXgsIDAsIHVud3JhcHBlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW1zLnB1c2godW53cmFwcGVkKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdW5yZWdpc3RlcihpZCkge1xuICAgIGlmIChpc1VubW91bnRlZCkgcmV0dXJuO1xuXG4gICAgLy8gVE9ETzogcmUtZXZhbHVhdGUgdGhpcyBsaW5lJ3MgaW1wb3J0YW5jZSBpbiB0aGUgZnV0dXJlXG4gICAgLy8gc2hvdWxkIHdlIG9ubHkgbW9kaWZ5IHRoZSBtb2RlbCBpZiBtYW5kYXRvcnkgaXMgc2V0LlxuICAgIC8vIHNlbGVjdGVkLnZhbHVlID0gc2VsZWN0ZWQudmFsdWUuZmlsdGVyKHYgPT4gdiAhPT0gaWQpXG5cbiAgICBmb3JjZU1hbmRhdG9yeVZhbHVlKCk7XG4gICAgY29uc3QgaW5kZXggPSBpdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmlkID09PSBpZCk7XG4gICAgaXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIC8vIElmIG1hbmRhdG9yeSBhbmQgbm90aGluZyBpcyBzZWxlY3RlZCwgdGhlbiBzZWxlY3QgZmlyc3Qgbm9uLWRpc2FibGVkIGl0ZW1cbiAgZnVuY3Rpb24gZm9yY2VNYW5kYXRvcnlWYWx1ZSgpIHtcbiAgICBjb25zdCBpdGVtID0gaXRlbXMuZmluZChpdGVtID0+ICFpdGVtLmRpc2FibGVkKTtcbiAgICBpZiAoaXRlbSAmJiBwcm9wcy5tYW5kYXRvcnkgPT09ICdmb3JjZScgJiYgIXNlbGVjdGVkLnZhbHVlLmxlbmd0aCkge1xuICAgICAgc2VsZWN0ZWQudmFsdWUgPSBbaXRlbS5pZF07XG4gICAgfVxuICB9XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgZm9yY2VNYW5kYXRvcnlWYWx1ZSgpO1xuICB9KTtcbiAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICBpc1VubW91bnRlZCA9IHRydWU7XG4gIH0pO1xuICBmdW5jdGlvbiBzZWxlY3QoaWQsIHZhbHVlKSB7XG4gICAgY29uc3QgaXRlbSA9IGl0ZW1zLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSBpZCk7XG4gICAgaWYgKHZhbHVlICYmIGl0ZW0/LmRpc2FibGVkKSByZXR1cm47XG4gICAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG4gICAgICBjb25zdCBpbnRlcm5hbFZhbHVlID0gc2VsZWN0ZWQudmFsdWUuc2xpY2UoKTtcbiAgICAgIGNvbnN0IGluZGV4ID0gaW50ZXJuYWxWYWx1ZS5maW5kSW5kZXgodiA9PiB2ID09PSBpZCk7XG4gICAgICBjb25zdCBpc1NlbGVjdGVkID0gfmluZGV4O1xuICAgICAgdmFsdWUgPSB2YWx1ZSA/PyAhaXNTZWxlY3RlZDtcblxuICAgICAgLy8gV2UgY2FuJ3QgcmVtb3ZlIHZhbHVlIGlmIGdyb3VwIGlzXG4gICAgICAvLyBtYW5kYXRvcnksIHZhbHVlIGFscmVhZHkgZXhpc3RzLFxuICAgICAgLy8gYW5kIGl0IGlzIHRoZSBvbmx5IHZhbHVlXG4gICAgICBpZiAoaXNTZWxlY3RlZCAmJiBwcm9wcy5tYW5kYXRvcnkgJiYgaW50ZXJuYWxWYWx1ZS5sZW5ndGggPD0gMSkgcmV0dXJuO1xuXG4gICAgICAvLyBXZSBjYW4ndCBhZGQgdmFsdWUgaWYgaXQgd291bGRcbiAgICAgIC8vIGNhdXNlIG1heCBsaW1pdCB0byBiZSBleGNlZWRlZFxuICAgICAgaWYgKCFpc1NlbGVjdGVkICYmIHByb3BzLm1heCAhPSBudWxsICYmIGludGVybmFsVmFsdWUubGVuZ3RoICsgMSA+IHByb3BzLm1heCkgcmV0dXJuO1xuICAgICAgaWYgKGluZGV4IDwgMCAmJiB2YWx1ZSkgaW50ZXJuYWxWYWx1ZS5wdXNoKGlkKTtlbHNlIGlmIChpbmRleCA+PSAwICYmICF2YWx1ZSkgaW50ZXJuYWxWYWx1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgc2VsZWN0ZWQudmFsdWUgPSBpbnRlcm5hbFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpc1NlbGVjdGVkID0gc2VsZWN0ZWQudmFsdWUuaW5jbHVkZXMoaWQpO1xuICAgICAgaWYgKHByb3BzLm1hbmRhdG9yeSAmJiBpc1NlbGVjdGVkKSByZXR1cm47XG4gICAgICBzZWxlY3RlZC52YWx1ZSA9IHZhbHVlID8/ICFpc1NlbGVjdGVkID8gW2lkXSA6IFtdO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzdGVwKG9mZnNldCkge1xuICAgIC8vIGdldHRpbmcgYW4gb2Zmc2V0IGZyb20gc2VsZWN0ZWQgdmFsdWUgb2J2aW91c2x5IHdvbid0IHdvcmsgd2l0aCBtdWx0aXBsZSB2YWx1ZXNcbiAgICBpZiAocHJvcHMubXVsdGlwbGUpIGNvbnNvbGVXYXJuKCdUaGlzIG1ldGhvZCBpcyBub3Qgc3VwcG9ydGVkIHdoZW4gdXNpbmcgXCJtdWx0aXBsZVwiIHByb3AnKTtcbiAgICBpZiAoIXNlbGVjdGVkLnZhbHVlLmxlbmd0aCkge1xuICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zLmZpbmQoaXRlbSA9PiAhaXRlbS5kaXNhYmxlZCk7XG4gICAgICBpdGVtICYmIChzZWxlY3RlZC52YWx1ZSA9IFtpdGVtLmlkXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRJZCA9IHNlbGVjdGVkLnZhbHVlWzBdO1xuICAgICAgY29uc3QgY3VycmVudEluZGV4ID0gaXRlbXMuZmluZEluZGV4KGkgPT4gaS5pZCA9PT0gY3VycmVudElkKTtcbiAgICAgIGxldCBuZXdJbmRleCA9IChjdXJyZW50SW5kZXggKyBvZmZzZXQpICUgaXRlbXMubGVuZ3RoO1xuICAgICAgbGV0IG5ld0l0ZW0gPSBpdGVtc1tuZXdJbmRleF07XG4gICAgICB3aGlsZSAobmV3SXRlbS5kaXNhYmxlZCAmJiBuZXdJbmRleCAhPT0gY3VycmVudEluZGV4KSB7XG4gICAgICAgIG5ld0luZGV4ID0gKG5ld0luZGV4ICsgb2Zmc2V0KSAlIGl0ZW1zLmxlbmd0aDtcbiAgICAgICAgbmV3SXRlbSA9IGl0ZW1zW25ld0luZGV4XTtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdJdGVtLmRpc2FibGVkKSByZXR1cm47XG4gICAgICBzZWxlY3RlZC52YWx1ZSA9IFtpdGVtc1tuZXdJbmRleF0uaWRdO1xuICAgIH1cbiAgfVxuICBjb25zdCBzdGF0ZSA9IHtcbiAgICByZWdpc3RlcixcbiAgICB1bnJlZ2lzdGVyLFxuICAgIHNlbGVjdGVkLFxuICAgIHNlbGVjdCxcbiAgICBkaXNhYmxlZDogdG9SZWYocHJvcHMsICdkaXNhYmxlZCcpLFxuICAgIHByZXY6ICgpID0+IHN0ZXAoaXRlbXMubGVuZ3RoIC0gMSksXG4gICAgbmV4dDogKCkgPT4gc3RlcCgxKSxcbiAgICBpc1NlbGVjdGVkOiBpZCA9PiBzZWxlY3RlZC52YWx1ZS5pbmNsdWRlcyhpZCksXG4gICAgc2VsZWN0ZWRDbGFzczogY29tcHV0ZWQoKCkgPT4gcHJvcHMuc2VsZWN0ZWRDbGFzcyksXG4gICAgaXRlbXM6IGNvbXB1dGVkKCgpID0+IGl0ZW1zKSxcbiAgICBnZXRJdGVtSW5kZXg6IHZhbHVlID0+IGdldEl0ZW1JbmRleChpdGVtcywgdmFsdWUpXG4gIH07XG4gIHByb3ZpZGUoaW5qZWN0S2V5LCBzdGF0ZSk7XG4gIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIGdldEl0ZW1JbmRleChpdGVtcywgdmFsdWUpIHtcbiAgY29uc3QgaWRzID0gZ2V0SWRzKGl0ZW1zLCBbdmFsdWVdKTtcbiAgaWYgKCFpZHMubGVuZ3RoKSByZXR1cm4gLTE7XG4gIHJldHVybiBpdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmlkID09PSBpZHNbMF0pO1xufVxuZnVuY3Rpb24gZ2V0SWRzKGl0ZW1zLCBtb2RlbFZhbHVlKSB7XG4gIGNvbnN0IGlkcyA9IFtdO1xuICBtb2RlbFZhbHVlLmZvckVhY2godmFsdWUgPT4ge1xuICAgIGNvbnN0IGl0ZW0gPSBpdGVtcy5maW5kKGl0ZW0gPT4gZGVlcEVxdWFsKHZhbHVlLCBpdGVtLnZhbHVlKSk7XG4gICAgY29uc3QgaXRlbUJ5SW5kZXggPSBpdGVtc1t2YWx1ZV07XG4gICAgaWYgKGl0ZW0/LnZhbHVlICE9IG51bGwpIHtcbiAgICAgIGlkcy5wdXNoKGl0ZW0uaWQpO1xuICAgIH0gZWxzZSBpZiAoaXRlbUJ5SW5kZXggIT0gbnVsbCkge1xuICAgICAgaWRzLnB1c2goaXRlbUJ5SW5kZXguaWQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpZHM7XG59XG5mdW5jdGlvbiBnZXRWYWx1ZXMoaXRlbXMsIGlkcykge1xuICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgaWRzLmZvckVhY2goaWQgPT4ge1xuICAgIGNvbnN0IGl0ZW1JbmRleCA9IGl0ZW1zLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IGlkKTtcbiAgICBpZiAofml0ZW1JbmRleCkge1xuICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2l0ZW1JbmRleF07XG4gICAgICB2YWx1ZXMucHVzaChpdGVtLnZhbHVlICE9IG51bGwgPyBpdGVtLnZhbHVlIDogaXRlbUluZGV4KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdmFsdWVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JvdXAubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcyB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQnRuVG9nZ2xlLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBtYWtlVkJ0bkdyb3VwUHJvcHMsIFZCdG5Hcm91cCB9IGZyb20gXCIuLi9WQnRuR3JvdXAvVkJ0bkdyb3VwLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUdyb3VwUHJvcHMsIHVzZUdyb3VwIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2dyb3VwLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgVkJ0blRvZ2dsZVN5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6di1idG4tdG9nZ2xlJyk7XG5leHBvcnQgY29uc3QgbWFrZVZCdG5Ub2dnbGVQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC4uLm1ha2VWQnRuR3JvdXBQcm9wcygpLFxuICAuLi5tYWtlR3JvdXBQcm9wcygpXG59LCAnVkJ0blRvZ2dsZScpO1xuZXhwb3J0IGNvbnN0IFZCdG5Ub2dnbGUgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkJ0blRvZ2dsZScsXG4gIHByb3BzOiBtYWtlVkJ0blRvZ2dsZVByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzU2VsZWN0ZWQsXG4gICAgICBuZXh0LFxuICAgICAgcHJldixcbiAgICAgIHNlbGVjdCxcbiAgICAgIHNlbGVjdGVkXG4gICAgfSA9IHVzZUdyb3VwKHByb3BzLCBWQnRuVG9nZ2xlU3ltYm9sKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgW2J0bkdyb3VwUHJvcHNdID0gVkJ0bkdyb3VwLmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVkJ0bkdyb3VwLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWJ0bi10b2dnbGUnLCBwcm9wcy5jbGFzc11cbiAgICAgIH0sIGJ0bkdyb3VwUHJvcHMsIHtcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSksIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmRlZmF1bHQ/Lih7XG4gICAgICAgICAgaXNTZWxlY3RlZCxcbiAgICAgICAgICBuZXh0LFxuICAgICAgICAgIHByZXYsXG4gICAgICAgICAgc2VsZWN0LFxuICAgICAgICAgIHNlbGVjdGVkXG4gICAgICAgIH0pXVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQsXG4gICAgICBwcmV2LFxuICAgICAgc2VsZWN0XG4gICAgfTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQnRuVG9nZ2xlLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQsIGRlc3RydWN0Q29tcHV0ZWQsIGdldEN1cnJlbnRJbnN0YW5jZU5hbWUsIGluY2x1ZGVzLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IHByZWRlZmluZWRTaXplcyA9IFsneC1zbWFsbCcsICdzbWFsbCcsICdkZWZhdWx0JywgJ2xhcmdlJywgJ3gtbGFyZ2UnXTtcbi8vIENvbXBvc2FibGVzXG5leHBvcnQgY29uc3QgbWFrZVNpemVQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHNpemU6IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGRlZmF1bHQ6ICdkZWZhdWx0J1xuICB9XG59LCAnc2l6ZScpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNpemUocHJvcHMpIHtcbiAgbGV0IG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGdldEN1cnJlbnRJbnN0YW5jZU5hbWUoKTtcbiAgcmV0dXJuIGRlc3RydWN0Q29tcHV0ZWQoKCkgPT4ge1xuICAgIGxldCBzaXplQ2xhc3NlcztcbiAgICBsZXQgc2l6ZVN0eWxlcztcbiAgICBpZiAoaW5jbHVkZXMocHJlZGVmaW5lZFNpemVzLCBwcm9wcy5zaXplKSkge1xuICAgICAgc2l6ZUNsYXNzZXMgPSBgJHtuYW1lfS0tc2l6ZS0ke3Byb3BzLnNpemV9YDtcbiAgICB9IGVsc2UgaWYgKHByb3BzLnNpemUpIHtcbiAgICAgIHNpemVTdHlsZXMgPSB7XG4gICAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KHByb3BzLnNpemUpLFxuICAgICAgICBoZWlnaHQ6IGNvbnZlcnRUb1VuaXQocHJvcHMuc2l6ZSlcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzaXplQ2xhc3NlcyxcbiAgICAgIHNpemVTdHlsZXNcbiAgICB9O1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpemUubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WSWNvbi5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVRleHRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUsIHVzZUljb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlU2l6ZVByb3BzLCB1c2VTaXplIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NpemUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgcmVmLCBUZXh0LCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBmbGF0dGVuRnJhZ21lbnRzLCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWSWNvblByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29sb3I6IFN0cmluZyxcbiAgc3RhcnQ6IEJvb2xlYW4sXG4gIGVuZDogQm9vbGVhbixcbiAgaWNvbjogSWNvblZhbHVlLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVNpemVQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoe1xuICAgIHRhZzogJ2knXG4gIH0pLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpXG59LCAnVkljb24nKTtcbmV4cG9ydCBjb25zdCBWSWNvbiA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWSWNvbicsXG4gIHByb3BzOiBtYWtlVkljb25Qcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBhdHRycyxcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qgc2xvdEljb24gPSByZWYoKTtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBpY29uRGF0YVxuICAgIH0gPSB1c2VJY29uKGNvbXB1dGVkKCgpID0+IHNsb3RJY29uLnZhbHVlIHx8IHByb3BzLmljb24pKTtcbiAgICBjb25zdCB7XG4gICAgICBzaXplQ2xhc3Nlc1xuICAgIH0gPSB1c2VTaXplKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcih0b1JlZihwcm9wcywgJ2NvbG9yJykpO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBzbG90VmFsdWUgPSBzbG90cy5kZWZhdWx0Py4oKTtcbiAgICAgIGlmIChzbG90VmFsdWUpIHtcbiAgICAgICAgc2xvdEljb24udmFsdWUgPSBmbGF0dGVuRnJhZ21lbnRzKHNsb3RWYWx1ZSkuZmlsdGVyKG5vZGUgPT4gbm9kZS50eXBlID09PSBUZXh0ICYmIG5vZGUuY2hpbGRyZW4gJiYgdHlwZW9mIG5vZGUuY2hpbGRyZW4gPT09ICdzdHJpbmcnKVswXT8uY2hpbGRyZW47XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKGljb25EYXRhLnZhbHVlLmNvbXBvbmVudCwge1xuICAgICAgICBcInRhZ1wiOiBwcm9wcy50YWcsXG4gICAgICAgIFwiaWNvblwiOiBpY29uRGF0YS52YWx1ZS5pY29uLFxuICAgICAgICBcImNsYXNzXCI6IFsndi1pY29uJywgJ25vdHJhbnNsYXRlJywgdGhlbWVDbGFzc2VzLnZhbHVlLCBzaXplQ2xhc3Nlcy52YWx1ZSwgdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZSwge1xuICAgICAgICAgICd2LWljb24tLWNsaWNrYWJsZSc6ICEhYXR0cnMub25DbGljayxcbiAgICAgICAgICAndi1pY29uLS1zdGFydCc6IHByb3BzLnN0YXJ0LFxuICAgICAgICAgICd2LWljb24tLWVuZCc6IHByb3BzLmVuZFxuICAgICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogWyFzaXplQ2xhc3Nlcy52YWx1ZSA/IHtcbiAgICAgICAgICBmb250U2l6ZTogY29udmVydFRvVW5pdChwcm9wcy5zaXplKSxcbiAgICAgICAgICBoZWlnaHQ6IGNvbnZlcnRUb1VuaXQocHJvcHMuc2l6ZSksXG4gICAgICAgICAgd2lkdGg6IGNvbnZlcnRUb1VuaXQocHJvcHMuc2l6ZSlcbiAgICAgICAgfSA6IHVuZGVmaW5lZCwgdGV4dENvbG9yU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV0sXG4gICAgICAgIFwicm9sZVwiOiBhdHRycy5vbkNsaWNrID8gJ2J1dHRvbicgOiB1bmRlZmluZWQsXG4gICAgICAgIFwiYXJpYS1oaWRkZW5cIjogIWF0dHJzLm9uQ2xpY2tcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RWYWx1ZV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WSWNvbi5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBvbkJlZm9yZVVubW91bnQsIHJlZiwgc2hhbGxvd1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgU1VQUE9SVFNfSU5URVJTRUNUSU9OIH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgY29uc3QgaW50ZXJzZWN0aW9uUmVmID0gcmVmKCk7XG4gIGNvbnN0IGlzSW50ZXJzZWN0aW5nID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gIGlmIChTVVBQT1JUU19JTlRFUlNFQ1RJT04pIHtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgIGNhbGxiYWNrPy4oZW50cmllcywgb2JzZXJ2ZXIpO1xuICAgICAgaXNJbnRlcnNlY3RpbmcudmFsdWUgPSAhIWVudHJpZXMuZmluZChlbnRyeSA9PiBlbnRyeS5pc0ludGVyc2VjdGluZyk7XG4gICAgfSwgb3B0aW9ucyk7XG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICB3YXRjaChpbnRlcnNlY3Rpb25SZWYsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChvbGRWYWx1ZSkge1xuICAgICAgICBvYnNlcnZlci51bm9ic2VydmUob2xkVmFsdWUpO1xuICAgICAgICBpc0ludGVyc2VjdGluZy52YWx1ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5ld1ZhbHVlKSBvYnNlcnZlci5vYnNlcnZlKG5ld1ZhbHVlKTtcbiAgICB9LCB7XG4gICAgICBmbHVzaDogJ3Bvc3QnXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBpbnRlcnNlY3Rpb25SZWYsXG4gICAgaXNJbnRlcnNlY3RpbmdcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyc2VjdGlvbk9ic2VydmVyLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlByb2dyZXNzQ2lyY3VsYXIuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VUZXh0Q29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaW50ZXJzZWN0aW9uT2JzZXJ2ZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VSZXNpemVPYnNlcnZlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yZXNpemVPYnNlcnZlci5tanNcIjtcbmltcG9ydCB7IG1ha2VTaXplUHJvcHMsIHVzZVNpemUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc2l6ZS5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCByZWYsIHRvUmVmLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWUHJvZ3Jlc3NDaXJjdWxhclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYmdDb2xvcjogU3RyaW5nLFxuICBjb2xvcjogU3RyaW5nLFxuICBpbmRldGVybWluYXRlOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICByb3RhdGU6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDBcbiAgfSxcbiAgd2lkdGg6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDRcbiAgfSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VTaXplUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKHtcbiAgICB0YWc6ICdkaXYnXG4gIH0pLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpXG59LCAnVlByb2dyZXNzQ2lyY3VsYXInKTtcbmV4cG9ydCBjb25zdCBWUHJvZ3Jlc3NDaXJjdWxhciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWUHJvZ3Jlc3NDaXJjdWxhcicsXG4gIHByb3BzOiBtYWtlVlByb2dyZXNzQ2lyY3VsYXJQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IE1BR0lDX1JBRElVU19DT05TVEFOVCA9IDIwO1xuICAgIGNvbnN0IENJUkNVTUZFUkVOQ0UgPSAyICogTWF0aC5QSSAqIE1BR0lDX1JBRElVU19DT05TVEFOVDtcbiAgICBjb25zdCByb290ID0gcmVmKCk7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgc2l6ZUNsYXNzZXMsXG4gICAgICBzaXplU3R5bGVzXG4gICAgfSA9IHVzZVNpemUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRleHRDb2xvckNsYXNzZXMsXG4gICAgICB0ZXh0Q29sb3JTdHlsZXNcbiAgICB9ID0gdXNlVGV4dENvbG9yKHRvUmVmKHByb3BzLCAnY29sb3InKSk7XG4gICAgY29uc3Qge1xuICAgICAgdGV4dENvbG9yQ2xhc3NlczogdW5kZXJsYXlDb2xvckNsYXNzZXMsXG4gICAgICB0ZXh0Q29sb3JTdHlsZXM6IHVuZGVybGF5Q29sb3JTdHlsZXNcbiAgICB9ID0gdXNlVGV4dENvbG9yKHRvUmVmKHByb3BzLCAnYmdDb2xvcicpKTtcbiAgICBjb25zdCB7XG4gICAgICBpbnRlcnNlY3Rpb25SZWYsXG4gICAgICBpc0ludGVyc2VjdGluZ1xuICAgIH0gPSB1c2VJbnRlcnNlY3Rpb25PYnNlcnZlcigpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJlc2l6ZVJlZixcbiAgICAgIGNvbnRlbnRSZWN0XG4gICAgfSA9IHVzZVJlc2l6ZU9ic2VydmVyKCk7XG4gICAgY29uc3Qgbm9ybWFsaXplZFZhbHVlID0gY29tcHV0ZWQoKCkgPT4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCBwYXJzZUZsb2F0KHByb3BzLm1vZGVsVmFsdWUpKSkpO1xuICAgIGNvbnN0IHdpZHRoID0gY29tcHV0ZWQoKCkgPT4gTnVtYmVyKHByb3BzLndpZHRoKSk7XG4gICAgY29uc3Qgc2l6ZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIC8vIEdldCBzaXplIGZyb20gZWxlbWVudCBpZiBzaXplIHByb3AgdmFsdWUgaXMgc21hbGwsIGxhcmdlIGV0Y1xuICAgICAgcmV0dXJuIHNpemVTdHlsZXMudmFsdWUgPyBOdW1iZXIocHJvcHMuc2l6ZSkgOiBjb250ZW50UmVjdC52YWx1ZSA/IGNvbnRlbnRSZWN0LnZhbHVlLndpZHRoIDogTWF0aC5tYXgod2lkdGgudmFsdWUsIDMyKTtcbiAgICB9KTtcbiAgICBjb25zdCBkaWFtZXRlciA9IGNvbXB1dGVkKCgpID0+IE1BR0lDX1JBRElVU19DT05TVEFOVCAvICgxIC0gd2lkdGgudmFsdWUgLyBzaXplLnZhbHVlKSAqIDIpO1xuICAgIGNvbnN0IHN0cm9rZVdpZHRoID0gY29tcHV0ZWQoKCkgPT4gd2lkdGgudmFsdWUgLyBzaXplLnZhbHVlICogZGlhbWV0ZXIudmFsdWUpO1xuICAgIGNvbnN0IHN0cm9rZURhc2hPZmZzZXQgPSBjb21wdXRlZCgoKSA9PiBjb252ZXJ0VG9Vbml0KCgxMDAgLSBub3JtYWxpemVkVmFsdWUudmFsdWUpIC8gMTAwICogQ0lSQ1VNRkVSRU5DRSkpO1xuICAgIHdhdGNoRWZmZWN0KCgpID0+IHtcbiAgICAgIGludGVyc2VjdGlvblJlZi52YWx1ZSA9IHJvb3QudmFsdWU7XG4gICAgICByZXNpemVSZWYudmFsdWUgPSByb290LnZhbHVlO1xuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcInJlZlwiOiByb290LFxuICAgICAgXCJjbGFzc1wiOiBbJ3YtcHJvZ3Jlc3MtY2lyY3VsYXInLCB7XG4gICAgICAgICd2LXByb2dyZXNzLWNpcmN1bGFyLS1pbmRldGVybWluYXRlJzogISFwcm9wcy5pbmRldGVybWluYXRlLFxuICAgICAgICAndi1wcm9ncmVzcy1jaXJjdWxhci0tdmlzaWJsZSc6IGlzSW50ZXJzZWN0aW5nLnZhbHVlLFxuICAgICAgICAndi1wcm9ncmVzcy1jaXJjdWxhci0tZGlzYWJsZS1zaHJpbmsnOiBwcm9wcy5pbmRldGVybWluYXRlID09PSAnZGlzYWJsZS1zaHJpbmsnXG4gICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIHNpemVDbGFzc2VzLnZhbHVlLCB0ZXh0Q29sb3JDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IFtzaXplU3R5bGVzLnZhbHVlLCB0ZXh0Q29sb3JTdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXSxcbiAgICAgIFwicm9sZVwiOiBcInByb2dyZXNzYmFyXCIsXG4gICAgICBcImFyaWEtdmFsdWVtaW5cIjogXCIwXCIsXG4gICAgICBcImFyaWEtdmFsdWVtYXhcIjogXCIxMDBcIixcbiAgICAgIFwiYXJpYS12YWx1ZW5vd1wiOiBwcm9wcy5pbmRldGVybWluYXRlID8gdW5kZWZpbmVkIDogbm9ybWFsaXplZFZhbHVlLnZhbHVlXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShcInN2Z1wiLCB7XG4gICAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICAgIHRyYW5zZm9ybTogYHJvdGF0ZShjYWxjKC05MGRlZyArICR7TnVtYmVyKHByb3BzLnJvdGF0ZSl9ZGVnKSlgXG4gICAgICAgIH0sXG4gICAgICAgIFwieG1sbnNcIjogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgICAgICBcInZpZXdCb3hcIjogYDAgMCAke2RpYW1ldGVyLnZhbHVlfSAke2RpYW1ldGVyLnZhbHVlfWBcbiAgICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJjaXJjbGVcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1wcm9ncmVzcy1jaXJjdWxhcl9fdW5kZXJsYXknLCB1bmRlcmxheUNvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgIFwic3R5bGVcIjogdW5kZXJsYXlDb2xvclN0eWxlcy52YWx1ZSxcbiAgICAgICAgXCJmaWxsXCI6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgICAgXCJjeFwiOiBcIjUwJVwiLFxuICAgICAgICBcImN5XCI6IFwiNTAlXCIsXG4gICAgICAgIFwiclwiOiBNQUdJQ19SQURJVVNfQ09OU1RBTlQsXG4gICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IHN0cm9rZVdpZHRoLnZhbHVlLFxuICAgICAgICBcInN0cm9rZS1kYXNoYXJyYXlcIjogQ0lSQ1VNRkVSRU5DRSxcbiAgICAgICAgXCJzdHJva2UtZGFzaG9mZnNldFwiOiAwXG4gICAgICB9LCBudWxsKSwgX2NyZWF0ZVZOb2RlKFwiY2lyY2xlXCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtcHJvZ3Jlc3MtY2lyY3VsYXJfX292ZXJsYXlcIixcbiAgICAgICAgXCJmaWxsXCI6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgICAgXCJjeFwiOiBcIjUwJVwiLFxuICAgICAgICBcImN5XCI6IFwiNTAlXCIsXG4gICAgICAgIFwiclwiOiBNQUdJQ19SQURJVVNfQ09OU1RBTlQsXG4gICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IHN0cm9rZVdpZHRoLnZhbHVlLFxuICAgICAgICBcInN0cm9rZS1kYXNoYXJyYXlcIjogQ0lSQ1VNRkVSRU5DRSxcbiAgICAgICAgXCJzdHJva2UtZGFzaG9mZnNldFwiOiBzdHJva2VEYXNoT2Zmc2V0LnZhbHVlXG4gICAgICB9LCBudWxsKV0pLCBzbG90cy5kZWZhdWx0ICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LXByb2dyZXNzLWNpcmN1bGFyX19jb250ZW50XCJcbiAgICAgIH0sIFtzbG90cy5kZWZhdWx0KHtcbiAgICAgICAgdmFsdWU6IG5vcm1hbGl6ZWRWYWx1ZS52YWx1ZVxuICAgICAgfSldKV1cbiAgICB9KSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZQcm9ncmVzc0NpcmN1bGFyLm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4vbG9jYWxlLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHBhcnNlQW5jaG9yLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IG9wcG9zaXRlTWFwID0ge1xuICBjZW50ZXI6ICdjZW50ZXInLFxuICB0b3A6ICdib3R0b20nLFxuICBib3R0b206ICd0b3AnLFxuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnXG59O1xuZXhwb3J0IGNvbnN0IG1ha2VMb2NhdGlvblByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgbG9jYXRpb246IFN0cmluZ1xufSwgJ2xvY2F0aW9uJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlTG9jYXRpb24ocHJvcHMpIHtcbiAgbGV0IG9wcG9zaXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgbGV0IG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICBjb25zdCB7XG4gICAgaXNSdGxcbiAgfSA9IHVzZVJ0bCgpO1xuICBjb25zdCBsb2NhdGlvblN0eWxlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAoIXByb3BzLmxvY2F0aW9uKSByZXR1cm4ge307XG4gICAgY29uc3Qge1xuICAgICAgc2lkZSxcbiAgICAgIGFsaWduXG4gICAgfSA9IHBhcnNlQW5jaG9yKHByb3BzLmxvY2F0aW9uLnNwbGl0KCcgJykubGVuZ3RoID4gMSA/IHByb3BzLmxvY2F0aW9uIDogYCR7cHJvcHMubG9jYXRpb259IGNlbnRlcmAsIGlzUnRsLnZhbHVlKTtcbiAgICBmdW5jdGlvbiBnZXRPZmZzZXQoc2lkZSkge1xuICAgICAgcmV0dXJuIG9mZnNldCA/IG9mZnNldChzaWRlKSA6IDA7XG4gICAgfVxuICAgIGNvbnN0IHN0eWxlcyA9IHt9O1xuICAgIGlmIChzaWRlICE9PSAnY2VudGVyJykge1xuICAgICAgaWYgKG9wcG9zaXRlKSBzdHlsZXNbb3Bwb3NpdGVNYXBbc2lkZV1dID0gYGNhbGMoMTAwJSAtICR7Z2V0T2Zmc2V0KHNpZGUpfXB4KWA7ZWxzZSBzdHlsZXNbc2lkZV0gPSAwO1xuICAgIH1cbiAgICBpZiAoYWxpZ24gIT09ICdjZW50ZXInKSB7XG4gICAgICBpZiAob3Bwb3NpdGUpIHN0eWxlc1tvcHBvc2l0ZU1hcFthbGlnbl1dID0gYGNhbGMoMTAwJSAtICR7Z2V0T2Zmc2V0KGFsaWduKX1weClgO2Vsc2Ugc3R5bGVzW2FsaWduXSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzaWRlID09PSAnY2VudGVyJykgc3R5bGVzLnRvcCA9IHN0eWxlcy5sZWZ0ID0gJzUwJSc7ZWxzZSB7XG4gICAgICAgIHN0eWxlc1t7XG4gICAgICAgICAgdG9wOiAnbGVmdCcsXG4gICAgICAgICAgYm90dG9tOiAnbGVmdCcsXG4gICAgICAgICAgbGVmdDogJ3RvcCcsXG4gICAgICAgICAgcmlnaHQ6ICd0b3AnXG4gICAgICAgIH1bc2lkZV1dID0gJzUwJSc7XG4gICAgICB9XG4gICAgICBzdHlsZXMudHJhbnNmb3JtID0ge1xuICAgICAgICB0b3A6ICd0cmFuc2xhdGVYKC01MCUpJyxcbiAgICAgICAgYm90dG9tOiAndHJhbnNsYXRlWCgtNTAlKScsXG4gICAgICAgIGxlZnQ6ICd0cmFuc2xhdGVZKC01MCUpJyxcbiAgICAgICAgcmlnaHQ6ICd0cmFuc2xhdGVZKC01MCUpJyxcbiAgICAgICAgY2VudGVyOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJ1xuICAgICAgfVtzaWRlXTtcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgbG9jYXRpb25TdHlsZXNcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2F0aW9uLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlByb2dyZXNzTGluZWFyLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQmFja2dyb3VuZENvbG9yLCB1c2VUZXh0Q29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaW50ZXJzZWN0aW9uT2JzZXJ2ZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUxvY2F0aW9uUHJvcHMsIHVzZUxvY2F0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2F0aW9uLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBUcmFuc2l0aW9uIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQsIGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZQcm9ncmVzc0xpbmVhclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWJzb2x1dGU6IEJvb2xlYW4sXG4gIGFjdGl2ZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBiZ0NvbG9yOiBTdHJpbmcsXG4gIGJnT3BhY2l0eTogW051bWJlciwgU3RyaW5nXSxcbiAgYnVmZmVyVmFsdWU6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDBcbiAgfSxcbiAgY2xpY2thYmxlOiBCb29sZWFuLFxuICBjb2xvcjogU3RyaW5nLFxuICBoZWlnaHQ6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDRcbiAgfSxcbiAgaW5kZXRlcm1pbmF0ZTogQm9vbGVhbixcbiAgbWF4OiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAxMDBcbiAgfSxcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICByZXZlcnNlOiBCb29sZWFuLFxuICBzdHJlYW06IEJvb2xlYW4sXG4gIHN0cmlwZWQ6IEJvb2xlYW4sXG4gIHJvdW5kZWRCYXI6IEJvb2xlYW4sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlTG9jYXRpb25Qcm9wcyh7XG4gICAgbG9jYXRpb246ICd0b3AnXG4gIH0pLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpXG59LCAnVlByb2dyZXNzTGluZWFyJyk7XG5leHBvcnQgY29uc3QgVlByb2dyZXNzTGluZWFyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZQcm9ncmVzc0xpbmVhcicsXG4gIHByb3BzOiBtYWtlVlByb2dyZXNzTGluZWFyUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWx1ZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgY29uc3Qge1xuICAgICAgaXNSdGwsXG4gICAgICBydGxDbGFzc2VzXG4gICAgfSA9IHVzZVJ0bCgpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxvY2F0aW9uU3R5bGVzXG4gICAgfSA9IHVzZUxvY2F0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcihwcm9wcywgJ2NvbG9yJyk7XG4gICAgY29uc3Qge1xuICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VCYWNrZ3JvdW5kQ29sb3IoY29tcHV0ZWQoKCkgPT4gcHJvcHMuYmdDb2xvciB8fCBwcm9wcy5jb2xvcikpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXM6IGJhckNvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlczogYmFyQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHByb3BzLCAnY29sb3InKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBpbnRlcnNlY3Rpb25SZWYsXG4gICAgICBpc0ludGVyc2VjdGluZ1xuICAgIH0gPSB1c2VJbnRlcnNlY3Rpb25PYnNlcnZlcigpO1xuICAgIGNvbnN0IG1heCA9IGNvbXB1dGVkKCgpID0+IHBhcnNlSW50KHByb3BzLm1heCwgMTApKTtcbiAgICBjb25zdCBoZWlnaHQgPSBjb21wdXRlZCgoKSA9PiBwYXJzZUludChwcm9wcy5oZWlnaHQsIDEwKSk7XG4gICAgY29uc3Qgbm9ybWFsaXplZEJ1ZmZlciA9IGNvbXB1dGVkKCgpID0+IHBhcnNlRmxvYXQocHJvcHMuYnVmZmVyVmFsdWUpIC8gbWF4LnZhbHVlICogMTAwKTtcbiAgICBjb25zdCBub3JtYWxpemVkVmFsdWUgPSBjb21wdXRlZCgoKSA9PiBwYXJzZUZsb2F0KHByb2dyZXNzLnZhbHVlKSAvIG1heC52YWx1ZSAqIDEwMCk7XG4gICAgY29uc3QgaXNSZXZlcnNlZCA9IGNvbXB1dGVkKCgpID0+IGlzUnRsLnZhbHVlICE9PSBwcm9wcy5yZXZlcnNlKTtcbiAgICBjb25zdCB0cmFuc2l0aW9uID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuaW5kZXRlcm1pbmF0ZSA/ICdmYWRlLXRyYW5zaXRpb24nIDogJ3NsaWRlLXgtdHJhbnNpdGlvbicpO1xuICAgIGNvbnN0IG9wYWNpdHkgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMuYmdPcGFjaXR5ID09IG51bGwgPyBwcm9wcy5iZ09wYWNpdHkgOiBwYXJzZUZsb2F0KHByb3BzLmJnT3BhY2l0eSk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZSkge1xuICAgICAgaWYgKCFpbnRlcnNlY3Rpb25SZWYudmFsdWUpIHJldHVybjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbGVmdCxcbiAgICAgICAgcmlnaHQsXG4gICAgICAgIHdpZHRoXG4gICAgICB9ID0gaW50ZXJzZWN0aW9uUmVmLnZhbHVlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgdmFsdWUgPSBpc1JldmVyc2VkLnZhbHVlID8gd2lkdGggLSBlLmNsaWVudFggKyAocmlnaHQgLSB3aWR0aCkgOiBlLmNsaWVudFggLSBsZWZ0O1xuICAgICAgcHJvZ3Jlc3MudmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlIC8gd2lkdGggKiBtYXgudmFsdWUpO1xuICAgIH1cbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJyZWZcIjogaW50ZXJzZWN0aW9uUmVmLFxuICAgICAgXCJjbGFzc1wiOiBbJ3YtcHJvZ3Jlc3MtbGluZWFyJywge1xuICAgICAgICAndi1wcm9ncmVzcy1saW5lYXItLWFic29sdXRlJzogcHJvcHMuYWJzb2x1dGUsXG4gICAgICAgICd2LXByb2dyZXNzLWxpbmVhci0tYWN0aXZlJzogcHJvcHMuYWN0aXZlICYmIGlzSW50ZXJzZWN0aW5nLnZhbHVlLFxuICAgICAgICAndi1wcm9ncmVzcy1saW5lYXItLXJldmVyc2UnOiBpc1JldmVyc2VkLnZhbHVlLFxuICAgICAgICAndi1wcm9ncmVzcy1saW5lYXItLXJvdW5kZWQnOiBwcm9wcy5yb3VuZGVkLFxuICAgICAgICAndi1wcm9ncmVzcy1saW5lYXItLXJvdW5kZWQtYmFyJzogcHJvcHMucm91bmRlZEJhcixcbiAgICAgICAgJ3YtcHJvZ3Jlc3MtbGluZWFyLS1zdHJpcGVkJzogcHJvcHMuc3RyaXBlZFxuICAgICAgfSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgcnRsQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBbe1xuICAgICAgICBib3R0b206IHByb3BzLmxvY2F0aW9uID09PSAnYm90dG9tJyA/IDAgOiB1bmRlZmluZWQsXG4gICAgICAgIHRvcDogcHJvcHMubG9jYXRpb24gPT09ICd0b3AnID8gMCA6IHVuZGVmaW5lZCxcbiAgICAgICAgaGVpZ2h0OiBwcm9wcy5hY3RpdmUgPyBjb252ZXJ0VG9Vbml0KGhlaWdodC52YWx1ZSkgOiAwLFxuICAgICAgICAnLS12LXByb2dyZXNzLWxpbmVhci1oZWlnaHQnOiBjb252ZXJ0VG9Vbml0KGhlaWdodC52YWx1ZSksXG4gICAgICAgIC4uLmxvY2F0aW9uU3R5bGVzLnZhbHVlXG4gICAgICB9LCBwcm9wcy5zdHlsZV0sXG4gICAgICBcInJvbGVcIjogXCJwcm9ncmVzc2JhclwiLFxuICAgICAgXCJhcmlhLWhpZGRlblwiOiBwcm9wcy5hY3RpdmUgPyAnZmFsc2UnIDogJ3RydWUnLFxuICAgICAgXCJhcmlhLXZhbHVlbWluXCI6IFwiMFwiLFxuICAgICAgXCJhcmlhLXZhbHVlbWF4XCI6IHByb3BzLm1heCxcbiAgICAgIFwiYXJpYS12YWx1ZW5vd1wiOiBwcm9wcy5pbmRldGVybWluYXRlID8gdW5kZWZpbmVkIDogbm9ybWFsaXplZFZhbHVlLnZhbHVlLFxuICAgICAgXCJvbkNsaWNrXCI6IHByb3BzLmNsaWNrYWJsZSAmJiBoYW5kbGVDbGlja1xuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtwcm9wcy5zdHJlYW0gJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJrZXlcIjogXCJzdHJlYW1cIixcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtcHJvZ3Jlc3MtbGluZWFyX19zdHJlYW0nLCB0ZXh0Q29sb3JDbGFzc2VzLnZhbHVlXSxcbiAgICAgICAgXCJzdHlsZVwiOiB7XG4gICAgICAgICAgLi4udGV4dENvbG9yU3R5bGVzLnZhbHVlLFxuICAgICAgICAgIFtpc1JldmVyc2VkLnZhbHVlID8gJ2xlZnQnIDogJ3JpZ2h0J106IGNvbnZlcnRUb1VuaXQoLWhlaWdodC52YWx1ZSksXG4gICAgICAgICAgYm9yZGVyVG9wOiBgJHtjb252ZXJ0VG9Vbml0KGhlaWdodC52YWx1ZSAvIDIpfSBkb3R0ZWRgLFxuICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdHkudmFsdWUsXG4gICAgICAgICAgdG9wOiBgY2FsYyg1MCUgLSAke2NvbnZlcnRUb1VuaXQoaGVpZ2h0LnZhbHVlIC8gNCl9KWAsXG4gICAgICAgICAgd2lkdGg6IGNvbnZlcnRUb1VuaXQoMTAwIC0gbm9ybWFsaXplZEJ1ZmZlci52YWx1ZSwgJyUnKSxcbiAgICAgICAgICAnLS12LXByb2dyZXNzLWxpbmVhci1zdHJlYW0tdG8nOiBjb252ZXJ0VG9Vbml0KGhlaWdodC52YWx1ZSAqIChpc1JldmVyc2VkLnZhbHVlID8gMSA6IC0xKSlcbiAgICAgICAgfVxuICAgICAgfSwgbnVsbCksIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXByb2dyZXNzLWxpbmVhcl9fYmFja2dyb3VuZCcsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgICBcInN0eWxlXCI6IFtiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWUsIHtcbiAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5LnZhbHVlLFxuICAgICAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KCFwcm9wcy5zdHJlYW0gPyAxMDAgOiBub3JtYWxpemVkQnVmZmVyLnZhbHVlLCAnJScpXG4gICAgICAgIH1dXG4gICAgICB9LCBudWxsKSwgX2NyZWF0ZVZOb2RlKFRyYW5zaXRpb24sIHtcbiAgICAgICAgXCJuYW1lXCI6IHRyYW5zaXRpb24udmFsdWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gWyFwcm9wcy5pbmRldGVybWluYXRlID8gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFsndi1wcm9ncmVzcy1saW5lYXJfX2RldGVybWluYXRlJywgYmFyQ29sb3JDbGFzc2VzLnZhbHVlXSxcbiAgICAgICAgICBcInN0eWxlXCI6IFtiYXJDb2xvclN0eWxlcy52YWx1ZSwge1xuICAgICAgICAgICAgd2lkdGg6IGNvbnZlcnRUb1VuaXQobm9ybWFsaXplZFZhbHVlLnZhbHVlLCAnJScpXG4gICAgICAgICAgfV1cbiAgICAgICAgfSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXByb2dyZXNzLWxpbmVhcl9faW5kZXRlcm1pbmF0ZVwiXG4gICAgICAgIH0sIFtbJ2xvbmcnLCAnc2hvcnQnXS5tYXAoYmFyID0+IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJrZXlcIjogYmFyLFxuICAgICAgICAgIFwiY2xhc3NcIjogWyd2LXByb2dyZXNzLWxpbmVhcl9faW5kZXRlcm1pbmF0ZScsIGJhciwgYmFyQ29sb3JDbGFzc2VzLnZhbHVlXSxcbiAgICAgICAgICBcInN0eWxlXCI6IGJhckNvbG9yU3R5bGVzLnZhbHVlXG4gICAgICAgIH0sIG51bGwpKV0pXVxuICAgICAgfSksIHNsb3RzLmRlZmF1bHQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtcHJvZ3Jlc3MtbGluZWFyX19jb250ZW50XCJcbiAgICAgIH0sIFtzbG90cy5kZWZhdWx0KHtcbiAgICAgICAgdmFsdWU6IG5vcm1hbGl6ZWRWYWx1ZS52YWx1ZSxcbiAgICAgICAgYnVmZmVyOiBub3JtYWxpemVkQnVmZmVyLnZhbHVlXG4gICAgICB9KV0pXVxuICAgIH0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlByb2dyZXNzTGluZWFyLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWUHJvZ3Jlc3NMaW5lYXIgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9WUHJvZ3Jlc3NMaW5lYXIvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlTmFtZSwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IG1ha2VMb2FkZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGxvYWRpbmc6IFtCb29sZWFuLCBTdHJpbmddXG59LCAnbG9hZGVyJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlTG9hZGVyKHByb3BzKSB7XG4gIGxldCBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBnZXRDdXJyZW50SW5zdGFuY2VOYW1lKCk7XG4gIGNvbnN0IGxvYWRlckNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgIFtgJHtuYW1lfS0tbG9hZGluZ2BdOiBwcm9wcy5sb2FkaW5nXG4gIH0pKTtcbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJDbGFzc2VzXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gTG9hZGVyU2xvdChwcm9wcywgX3JlZikge1xuICBsZXQge1xuICAgIHNsb3RzXG4gIH0gPSBfcmVmO1xuICByZXR1cm4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICBcImNsYXNzXCI6IGAke3Byb3BzLm5hbWV9X19sb2FkZXJgXG4gIH0sIFtzbG90cy5kZWZhdWx0Py4oe1xuICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICBpc0FjdGl2ZTogcHJvcHMuYWN0aXZlXG4gIH0pIHx8IF9jcmVhdGVWTm9kZShWUHJvZ3Jlc3NMaW5lYXIsIHtcbiAgICBcImFjdGl2ZVwiOiBwcm9wcy5hY3RpdmUsXG4gICAgXCJjb2xvclwiOiBwcm9wcy5jb2xvcixcbiAgICBcImhlaWdodFwiOiBcIjJcIixcbiAgICBcImluZGV0ZXJtaW5hdGVcIjogdHJ1ZVxuICB9LCBudWxsKV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9hZGVyLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZU5hbWUsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3QgcG9zaXRpb25WYWx1ZXMgPSBbJ3N0YXRpYycsICdyZWxhdGl2ZScsICdmaXhlZCcsICdhYnNvbHV0ZScsICdzdGlja3knXTtcbi8vIENvbXBvc2FibGVzXG5leHBvcnQgY29uc3QgbWFrZVBvc2l0aW9uUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBwb3NpdGlvbjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICB2YWxpZGF0b3I6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovdiA9PiBwb3NpdGlvblZhbHVlcy5pbmNsdWRlcyh2KVxuICB9XG59LCAncG9zaXRpb24nKTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VQb3NpdGlvbihwcm9wcykge1xuICBsZXQgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZ2V0Q3VycmVudEluc3RhbmNlTmFtZSgpO1xuICBjb25zdCBwb3NpdGlvbkNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHByb3BzLnBvc2l0aW9uID8gYCR7bmFtZX0tLSR7cHJvcHMucG9zaXRpb259YCA6IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgcG9zaXRpb25DbGFzc2VzXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3NpdGlvbi5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgbmV4dFRpY2ssIG9uU2NvcGVEaXNwb3NlLCByZXNvbHZlRHluYW1pY0NvbXBvbmVudCwgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlLCBoYXNFdmVudCwgSU5fQlJPV1NFUiwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGUoKSB7XG4gIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKCd1c2VSb3V0ZScpO1xuICByZXR1cm4gY29tcHV0ZWQoKCkgPT4gdm0/LnByb3h5Py4kcm91dGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJvdXRlcigpIHtcbiAgcmV0dXJuIGdldEN1cnJlbnRJbnN0YW5jZSgndXNlUm91dGVyJyk/LnByb3h5Py4kcm91dGVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZUxpbmsocHJvcHMsIGF0dHJzKSB7XG4gIGNvbnN0IFJvdXRlckxpbmsgPSByZXNvbHZlRHluYW1pY0NvbXBvbmVudCgnUm91dGVyTGluaycpO1xuICBjb25zdCBpc0xpbmsgPSBjb21wdXRlZCgoKSA9PiAhIShwcm9wcy5ocmVmIHx8IHByb3BzLnRvKSk7XG4gIGNvbnN0IGlzQ2xpY2thYmxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBpc0xpbms/LnZhbHVlIHx8IGhhc0V2ZW50KGF0dHJzLCAnY2xpY2snKSB8fCBoYXNFdmVudChwcm9wcywgJ2NsaWNrJyk7XG4gIH0pO1xuICBpZiAodHlwZW9mIFJvdXRlckxpbmsgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzTGluayxcbiAgICAgIGlzQ2xpY2thYmxlLFxuICAgICAgaHJlZjogdG9SZWYocHJvcHMsICdocmVmJylcbiAgICB9O1xuICB9XG4gIGNvbnN0IGxpbmsgPSBwcm9wcy50byA/IFJvdXRlckxpbmsudXNlTGluayhwcm9wcykgOiB1bmRlZmluZWQ7XG4gIHJldHVybiB7XG4gICAgaXNMaW5rLFxuICAgIGlzQ2xpY2thYmxlLFxuICAgIHJvdXRlOiBsaW5rPy5yb3V0ZSxcbiAgICBuYXZpZ2F0ZTogbGluaz8ubmF2aWdhdGUsXG4gICAgaXNBY3RpdmU6IGxpbmsgJiYgY29tcHV0ZWQoKCkgPT4gcHJvcHMuZXhhY3QgPyBsaW5rLmlzRXhhY3RBY3RpdmU/LnZhbHVlIDogbGluay5pc0FjdGl2ZT8udmFsdWUpLFxuICAgIGhyZWY6IGNvbXB1dGVkKCgpID0+IHByb3BzLnRvID8gbGluaz8ucm91dGUudmFsdWUuaHJlZiA6IHByb3BzLmhyZWYpXG4gIH07XG59XG5leHBvcnQgY29uc3QgbWFrZVJvdXRlclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgaHJlZjogU3RyaW5nLFxuICByZXBsYWNlOiBCb29sZWFuLFxuICB0bzogW1N0cmluZywgT2JqZWN0XSxcbiAgZXhhY3Q6IEJvb2xlYW5cbn0sICdyb3V0ZXInKTtcbmxldCBpblRyYW5zaXRpb24gPSBmYWxzZTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VCYWNrQnV0dG9uKHJvdXRlciwgY2IpIHtcbiAgbGV0IHBvcHBlZCA9IGZhbHNlO1xuICBsZXQgcmVtb3ZlQmVmb3JlO1xuICBsZXQgcmVtb3ZlQWZ0ZXI7XG4gIGlmIChJTl9CUk9XU0VSKSB7XG4gICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgb25Qb3BzdGF0ZSk7XG4gICAgICByZW1vdmVCZWZvcmUgPSByb3V0ZXI/LmJlZm9yZUVhY2goKHRvLCBmcm9tLCBuZXh0KSA9PiB7XG4gICAgICAgIGlmICghaW5UcmFuc2l0aW9uKSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBwb3BwZWQgPyBjYihuZXh0KSA6IG5leHQoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9wcGVkID8gY2IobmV4dCkgOiBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaW5UcmFuc2l0aW9uID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgcmVtb3ZlQWZ0ZXIgPSByb3V0ZXI/LmFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICAgIGluVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgb25TY29wZURpc3Bvc2UoKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgb25Qb3BzdGF0ZSk7XG4gICAgICByZW1vdmVCZWZvcmU/LigpO1xuICAgICAgcmVtb3ZlQWZ0ZXI/LigpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9uUG9wc3RhdGUoZSkge1xuICAgIGlmIChlLnN0YXRlPy5yZXBsYWNlZCkgcmV0dXJuO1xuICAgIHBvcHBlZCA9IHRydWU7XG4gICAgc2V0VGltZW91dCgoKSA9PiBwb3BwZWQgPSBmYWxzZSk7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlci5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBuZXh0VGljaywgd2F0Y2ggfSBmcm9tICd2dWUnO1xuXG4vLyBUeXBlc1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VsZWN0TGluayhsaW5rLCBzZWxlY3QpIHtcbiAgd2F0Y2goKCkgPT4gbGluay5pc0FjdGl2ZT8udmFsdWUsIGlzQWN0aXZlID0+IHtcbiAgICBpZiAobGluay5pc0xpbmsudmFsdWUgJiYgaXNBY3RpdmUgJiYgc2VsZWN0KSB7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHNlbGVjdCh0cnVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGltbWVkaWF0ZTogdHJ1ZVxuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbGVjdExpbmsubWpzLm1hcCIsIi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WUmlwcGxlLmNzc1wiO1xuXG4vLyBVdGlsaXRpZXNcbmltcG9ydCB7IGlzT2JqZWN0LCBrZXlDb2RlcyB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3Qgc3RvcFN5bWJvbCA9IFN5bWJvbCgncmlwcGxlU3RvcCcpO1xuY29uc3QgREVMQVlfUklQUExFID0gODA7XG5mdW5jdGlvbiB0cmFuc2Zvcm0oZWwsIHZhbHVlKSB7XG4gIGVsLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICBlbC5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGlzVG91Y2hFdmVudChlKSB7XG4gIHJldHVybiBlLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdUb3VjaEV2ZW50Jztcbn1cbmZ1bmN0aW9uIGlzS2V5Ym9hcmRFdmVudChlKSB7XG4gIHJldHVybiBlLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdLZXlib2FyZEV2ZW50Jztcbn1cbmNvbnN0IGNhbGN1bGF0ZSA9IGZ1bmN0aW9uIChlLCBlbCkge1xuICBsZXQgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICBsZXQgbG9jYWxYID0gMDtcbiAgbGV0IGxvY2FsWSA9IDA7XG4gIGlmICghaXNLZXlib2FyZEV2ZW50KGUpKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgdGFyZ2V0ID0gaXNUb3VjaEV2ZW50KGUpID8gZS50b3VjaGVzW2UudG91Y2hlcy5sZW5ndGggLSAxXSA6IGU7XG4gICAgbG9jYWxYID0gdGFyZ2V0LmNsaWVudFggLSBvZmZzZXQubGVmdDtcbiAgICBsb2NhbFkgPSB0YXJnZXQuY2xpZW50WSAtIG9mZnNldC50b3A7XG4gIH1cbiAgbGV0IHJhZGl1cyA9IDA7XG4gIGxldCBzY2FsZSA9IDAuMztcbiAgaWYgKGVsLl9yaXBwbGU/LmNpcmNsZSkge1xuICAgIHNjYWxlID0gMC4xNTtcbiAgICByYWRpdXMgPSBlbC5jbGllbnRXaWR0aCAvIDI7XG4gICAgcmFkaXVzID0gdmFsdWUuY2VudGVyID8gcmFkaXVzIDogcmFkaXVzICsgTWF0aC5zcXJ0KChsb2NhbFggLSByYWRpdXMpICoqIDIgKyAobG9jYWxZIC0gcmFkaXVzKSAqKiAyKSAvIDQ7XG4gIH0gZWxzZSB7XG4gICAgcmFkaXVzID0gTWF0aC5zcXJ0KGVsLmNsaWVudFdpZHRoICoqIDIgKyBlbC5jbGllbnRIZWlnaHQgKiogMikgLyAyO1xuICB9XG4gIGNvbnN0IGNlbnRlclggPSBgJHsoZWwuY2xpZW50V2lkdGggLSByYWRpdXMgKiAyKSAvIDJ9cHhgO1xuICBjb25zdCBjZW50ZXJZID0gYCR7KGVsLmNsaWVudEhlaWdodCAtIHJhZGl1cyAqIDIpIC8gMn1weGA7XG4gIGNvbnN0IHggPSB2YWx1ZS5jZW50ZXIgPyBjZW50ZXJYIDogYCR7bG9jYWxYIC0gcmFkaXVzfXB4YDtcbiAgY29uc3QgeSA9IHZhbHVlLmNlbnRlciA/IGNlbnRlclkgOiBgJHtsb2NhbFkgLSByYWRpdXN9cHhgO1xuICByZXR1cm4ge1xuICAgIHJhZGl1cyxcbiAgICBzY2FsZSxcbiAgICB4LFxuICAgIHksXG4gICAgY2VudGVyWCxcbiAgICBjZW50ZXJZXG4gIH07XG59O1xuY29uc3QgcmlwcGxlcyA9IHtcbiAgLyogZXNsaW50LWRpc2FibGUgbWF4LXN0YXRlbWVudHMgKi9cbiAgc2hvdyhlLCBlbCkge1xuICAgIGxldCB2YWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgaWYgKCFlbD8uX3JpcHBsZT8uZW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgY29uc3QgYW5pbWF0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChhbmltYXRpb24pO1xuICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSAndi1yaXBwbGVfX2NvbnRhaW5lcic7XG4gICAgaWYgKHZhbHVlLmNsYXNzKSB7XG4gICAgICBjb250YWluZXIuY2xhc3NOYW1lICs9IGAgJHt2YWx1ZS5jbGFzc31gO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICByYWRpdXMsXG4gICAgICBzY2FsZSxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgY2VudGVyWCxcbiAgICAgIGNlbnRlcllcbiAgICB9ID0gY2FsY3VsYXRlKGUsIGVsLCB2YWx1ZSk7XG4gICAgY29uc3Qgc2l6ZSA9IGAke3JhZGl1cyAqIDJ9cHhgO1xuICAgIGFuaW1hdGlvbi5jbGFzc05hbWUgPSAndi1yaXBwbGVfX2FuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uLnN0eWxlLndpZHRoID0gc2l6ZTtcbiAgICBhbmltYXRpb24uc3R5bGUuaGVpZ2h0ID0gc2l6ZTtcbiAgICBlbC5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgIGNvbnN0IGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgIGlmIChjb21wdXRlZCAmJiBjb21wdXRlZC5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICAgIGVsLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgIGVsLmRhdGFzZXQucHJldmlvdXNQb3NpdGlvbiA9ICdzdGF0aWMnO1xuICAgIH1cbiAgICBhbmltYXRpb24uY2xhc3NMaXN0LmFkZCgndi1yaXBwbGVfX2FuaW1hdGlvbi0tZW50ZXInKTtcbiAgICBhbmltYXRpb24uY2xhc3NMaXN0LmFkZCgndi1yaXBwbGVfX2FuaW1hdGlvbi0tdmlzaWJsZScpO1xuICAgIHRyYW5zZm9ybShhbmltYXRpb24sIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSkgc2NhbGUzZCgke3NjYWxlfSwke3NjYWxlfSwke3NjYWxlfSlgKTtcbiAgICBhbmltYXRpb24uZGF0YXNldC5hY3RpdmF0ZWQgPSBTdHJpbmcocGVyZm9ybWFuY2Uubm93KCkpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgYW5pbWF0aW9uLmNsYXNzTGlzdC5yZW1vdmUoJ3YtcmlwcGxlX19hbmltYXRpb24tLWVudGVyJyk7XG4gICAgICBhbmltYXRpb24uY2xhc3NMaXN0LmFkZCgndi1yaXBwbGVfX2FuaW1hdGlvbi0taW4nKTtcbiAgICAgIHRyYW5zZm9ybShhbmltYXRpb24sIGB0cmFuc2xhdGUoJHtjZW50ZXJYfSwgJHtjZW50ZXJZfSkgc2NhbGUzZCgxLDEsMSlgKTtcbiAgICB9LCAwKTtcbiAgfSxcbiAgaGlkZShlbCkge1xuICAgIGlmICghZWw/Ll9yaXBwbGU/LmVuYWJsZWQpIHJldHVybjtcbiAgICBjb25zdCByaXBwbGVzID0gZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndi1yaXBwbGVfX2FuaW1hdGlvbicpO1xuICAgIGlmIChyaXBwbGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGNvbnN0IGFuaW1hdGlvbiA9IHJpcHBsZXNbcmlwcGxlcy5sZW5ndGggLSAxXTtcbiAgICBpZiAoYW5pbWF0aW9uLmRhdGFzZXQuaXNIaWRpbmcpIHJldHVybjtlbHNlIGFuaW1hdGlvbi5kYXRhc2V0LmlzSGlkaW5nID0gJ3RydWUnO1xuICAgIGNvbnN0IGRpZmYgPSBwZXJmb3JtYW5jZS5ub3coKSAtIE51bWJlcihhbmltYXRpb24uZGF0YXNldC5hY3RpdmF0ZWQpO1xuICAgIGNvbnN0IGRlbGF5ID0gTWF0aC5tYXgoMjUwIC0gZGlmZiwgMCk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBhbmltYXRpb24uY2xhc3NMaXN0LnJlbW92ZSgndi1yaXBwbGVfX2FuaW1hdGlvbi0taW4nKTtcbiAgICAgIGFuaW1hdGlvbi5jbGFzc0xpc3QuYWRkKCd2LXJpcHBsZV9fYW5pbWF0aW9uLS1vdXQnKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCByaXBwbGVzID0gZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndi1yaXBwbGVfX2FuaW1hdGlvbicpO1xuICAgICAgICBpZiAocmlwcGxlcy5sZW5ndGggPT09IDEgJiYgZWwuZGF0YXNldC5wcmV2aW91c1Bvc2l0aW9uKSB7XG4gICAgICAgICAgZWwuc3R5bGUucG9zaXRpb24gPSBlbC5kYXRhc2V0LnByZXZpb3VzUG9zaXRpb247XG4gICAgICAgICAgZGVsZXRlIGVsLmRhdGFzZXQucHJldmlvdXNQb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5pbWF0aW9uLnBhcmVudE5vZGU/LnBhcmVudE5vZGUgPT09IGVsKSBlbC5yZW1vdmVDaGlsZChhbmltYXRpb24ucGFyZW50Tm9kZSk7XG4gICAgICB9LCAzMDApO1xuICAgIH0sIGRlbGF5KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGlzUmlwcGxlRW5hYmxlZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCAhIXZhbHVlO1xufVxuZnVuY3Rpb24gcmlwcGxlU2hvdyhlKSB7XG4gIGNvbnN0IHZhbHVlID0ge307XG4gIGNvbnN0IGVsZW1lbnQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gIGlmICghZWxlbWVudD8uX3JpcHBsZSB8fCBlbGVtZW50Ll9yaXBwbGUudG91Y2hlZCB8fCBlW3N0b3BTeW1ib2xdKSByZXR1cm47XG5cbiAgLy8gRG9uJ3QgYWxsb3cgdGhlIGV2ZW50IHRvIHRyaWdnZXIgcmlwcGxlcyBvbiBhbnkgb3RoZXIgZWxlbWVudHNcbiAgZVtzdG9wU3ltYm9sXSA9IHRydWU7XG4gIGlmIChpc1RvdWNoRXZlbnQoZSkpIHtcbiAgICBlbGVtZW50Ll9yaXBwbGUudG91Y2hlZCA9IHRydWU7XG4gICAgZWxlbWVudC5fcmlwcGxlLmlzVG91Y2ggPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIC8vIEl0J3MgcG9zc2libGUgZm9yIHRvdWNoIGV2ZW50cyB0byBmaXJlXG4gICAgLy8gYXMgbW91c2UgZXZlbnRzIG9uIEFuZHJvaWQvaU9TLCB0aGlzXG4gICAgLy8gd2lsbCBza2lwIHRoZSBldmVudCBjYWxsIGlmIGl0IGhhc1xuICAgIC8vIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIGFzIHRvdWNoXG4gICAgaWYgKGVsZW1lbnQuX3JpcHBsZS5pc1RvdWNoKSByZXR1cm47XG4gIH1cbiAgdmFsdWUuY2VudGVyID0gZWxlbWVudC5fcmlwcGxlLmNlbnRlcmVkIHx8IGlzS2V5Ym9hcmRFdmVudChlKTtcbiAgaWYgKGVsZW1lbnQuX3JpcHBsZS5jbGFzcykge1xuICAgIHZhbHVlLmNsYXNzID0gZWxlbWVudC5fcmlwcGxlLmNsYXNzO1xuICB9XG4gIGlmIChpc1RvdWNoRXZlbnQoZSkpIHtcbiAgICAvLyBhbHJlYWR5IHF1ZXVlZCB0aGF0IHNob3dzIG9yIGhpZGVzIHRoZSByaXBwbGVcbiAgICBpZiAoZWxlbWVudC5fcmlwcGxlLnNob3dUaW1lckNvbW1pdCkgcmV0dXJuO1xuICAgIGVsZW1lbnQuX3JpcHBsZS5zaG93VGltZXJDb21taXQgPSAoKSA9PiB7XG4gICAgICByaXBwbGVzLnNob3coZSwgZWxlbWVudCwgdmFsdWUpO1xuICAgIH07XG4gICAgZWxlbWVudC5fcmlwcGxlLnNob3dUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChlbGVtZW50Py5fcmlwcGxlPy5zaG93VGltZXJDb21taXQpIHtcbiAgICAgICAgZWxlbWVudC5fcmlwcGxlLnNob3dUaW1lckNvbW1pdCgpO1xuICAgICAgICBlbGVtZW50Ll9yaXBwbGUuc2hvd1RpbWVyQ29tbWl0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LCBERUxBWV9SSVBQTEUpO1xuICB9IGVsc2Uge1xuICAgIHJpcHBsZXMuc2hvdyhlLCBlbGVtZW50LCB2YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJpcHBsZVN0b3AoZSkge1xuICBlW3N0b3BTeW1ib2xdID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJpcHBsZUhpZGUoZSkge1xuICBjb25zdCBlbGVtZW50ID0gZS5jdXJyZW50VGFyZ2V0O1xuICBpZiAoIWVsZW1lbnQ/Ll9yaXBwbGUpIHJldHVybjtcbiAgd2luZG93LmNsZWFyVGltZW91dChlbGVtZW50Ll9yaXBwbGUuc2hvd1RpbWVyKTtcblxuICAvLyBUaGUgdG91Y2ggaW50ZXJhY3Rpb24gb2NjdXJzIGJlZm9yZSB0aGUgc2hvdyB0aW1lciBpcyB0cmlnZ2VyZWQuXG4gIC8vIFdlIHN0aWxsIHdhbnQgdG8gc2hvdyByaXBwbGUgZWZmZWN0LlxuICBpZiAoZS50eXBlID09PSAndG91Y2hlbmQnICYmIGVsZW1lbnQuX3JpcHBsZS5zaG93VGltZXJDb21taXQpIHtcbiAgICBlbGVtZW50Ll9yaXBwbGUuc2hvd1RpbWVyQ29tbWl0KCk7XG4gICAgZWxlbWVudC5fcmlwcGxlLnNob3dUaW1lckNvbW1pdCA9IG51bGw7XG5cbiAgICAvLyByZS1xdWV1ZSByaXBwbGUgaGlkaW5nXG4gICAgZWxlbWVudC5fcmlwcGxlLnNob3dUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHJpcHBsZUhpZGUoZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAoZWxlbWVudC5fcmlwcGxlKSB7XG4gICAgICBlbGVtZW50Ll9yaXBwbGUudG91Y2hlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSk7XG4gIHJpcHBsZXMuaGlkZShlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIHJpcHBsZUNhbmNlbFNob3coZSkge1xuICBjb25zdCBlbGVtZW50ID0gZS5jdXJyZW50VGFyZ2V0O1xuICBpZiAoIWVsZW1lbnQ/Ll9yaXBwbGUpIHJldHVybjtcbiAgaWYgKGVsZW1lbnQuX3JpcHBsZS5zaG93VGltZXJDb21taXQpIHtcbiAgICBlbGVtZW50Ll9yaXBwbGUuc2hvd1RpbWVyQ29tbWl0ID0gbnVsbDtcbiAgfVxuICB3aW5kb3cuY2xlYXJUaW1lb3V0KGVsZW1lbnQuX3JpcHBsZS5zaG93VGltZXIpO1xufVxubGV0IGtleWJvYXJkUmlwcGxlID0gZmFsc2U7XG5mdW5jdGlvbiBrZXlib2FyZFJpcHBsZVNob3coZSkge1xuICBpZiAoIWtleWJvYXJkUmlwcGxlICYmIChlLmtleUNvZGUgPT09IGtleUNvZGVzLmVudGVyIHx8IGUua2V5Q29kZSA9PT0ga2V5Q29kZXMuc3BhY2UpKSB7XG4gICAga2V5Ym9hcmRSaXBwbGUgPSB0cnVlO1xuICAgIHJpcHBsZVNob3coZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGtleWJvYXJkUmlwcGxlSGlkZShlKSB7XG4gIGtleWJvYXJkUmlwcGxlID0gZmFsc2U7XG4gIHJpcHBsZUhpZGUoZSk7XG59XG5mdW5jdGlvbiBmb2N1c1JpcHBsZUhpZGUoZSkge1xuICBpZiAoa2V5Ym9hcmRSaXBwbGUpIHtcbiAgICBrZXlib2FyZFJpcHBsZSA9IGZhbHNlO1xuICAgIHJpcHBsZUhpZGUoZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZVJpcHBsZShlbCwgYmluZGluZywgd2FzRW5hYmxlZCkge1xuICBjb25zdCB7XG4gICAgdmFsdWUsXG4gICAgbW9kaWZpZXJzXG4gIH0gPSBiaW5kaW5nO1xuICBjb25zdCBlbmFibGVkID0gaXNSaXBwbGVFbmFibGVkKHZhbHVlKTtcbiAgaWYgKCFlbmFibGVkKSB7XG4gICAgcmlwcGxlcy5oaWRlKGVsKTtcbiAgfVxuICBlbC5fcmlwcGxlID0gZWwuX3JpcHBsZSA/PyB7fTtcbiAgZWwuX3JpcHBsZS5lbmFibGVkID0gZW5hYmxlZDtcbiAgZWwuX3JpcHBsZS5jZW50ZXJlZCA9IG1vZGlmaWVycy5jZW50ZXI7XG4gIGVsLl9yaXBwbGUuY2lyY2xlID0gbW9kaWZpZXJzLmNpcmNsZTtcbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSAmJiB2YWx1ZS5jbGFzcykge1xuICAgIGVsLl9yaXBwbGUuY2xhc3MgPSB2YWx1ZS5jbGFzcztcbiAgfVxuICBpZiAoZW5hYmxlZCAmJiAhd2FzRW5hYmxlZCkge1xuICAgIGlmIChtb2RpZmllcnMuc3RvcCkge1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHJpcHBsZVN0b3AsIHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCByaXBwbGVTdG9wKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHJpcHBsZVNob3csIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHJpcHBsZUhpZGUsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCByaXBwbGVDYW5jZWxTaG93LCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCByaXBwbGVIaWRlKTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCByaXBwbGVTaG93KTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgcmlwcGxlSGlkZSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHJpcHBsZUhpZGUpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlib2FyZFJpcHBsZVNob3cpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywga2V5Ym9hcmRSaXBwbGVIaWRlKTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZm9jdXNSaXBwbGVIaWRlKTtcblxuICAgIC8vIEFuY2hvciB0YWdzIGNhbiBiZSBkcmFnZ2VkLCBjYXVzZXMgb3RoZXIgaGlkZXMgdG8gZmFpbCAtICMxNTM3XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgcmlwcGxlSGlkZSwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKCFlbmFibGVkICYmIHdhc0VuYWJsZWQpIHtcbiAgICByZW1vdmVMaXN0ZW5lcnMoZWwpO1xuICB9XG59XG5mdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoZWwpIHtcbiAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgcmlwcGxlU2hvdyk7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCByaXBwbGVTaG93KTtcbiAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCByaXBwbGVIaWRlKTtcbiAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgcmlwcGxlQ2FuY2VsU2hvdyk7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgcmlwcGxlSGlkZSk7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCByaXBwbGVIaWRlKTtcbiAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHJpcHBsZUhpZGUpO1xuICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywga2V5Ym9hcmRSaXBwbGVTaG93KTtcbiAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBrZXlib2FyZFJpcHBsZUhpZGUpO1xuICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCByaXBwbGVIaWRlKTtcbiAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIGZvY3VzUmlwcGxlSGlkZSk7XG59XG5mdW5jdGlvbiBtb3VudGVkKGVsLCBiaW5kaW5nKSB7XG4gIHVwZGF0ZVJpcHBsZShlbCwgYmluZGluZywgZmFsc2UpO1xufVxuZnVuY3Rpb24gdW5tb3VudGVkKGVsKSB7XG4gIGRlbGV0ZSBlbC5fcmlwcGxlO1xuICByZW1vdmVMaXN0ZW5lcnMoZWwpO1xufVxuZnVuY3Rpb24gdXBkYXRlZChlbCwgYmluZGluZykge1xuICBpZiAoYmluZGluZy52YWx1ZSA9PT0gYmluZGluZy5vbGRWYWx1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB3YXNFbmFibGVkID0gaXNSaXBwbGVFbmFibGVkKGJpbmRpbmcub2xkVmFsdWUpO1xuICB1cGRhdGVSaXBwbGUoZWwsIGJpbmRpbmcsIHdhc0VuYWJsZWQpO1xufVxuZXhwb3J0IGNvbnN0IFJpcHBsZSA9IHtcbiAgbW91bnRlZCxcbiAgdW5tb3VudGVkLFxuICB1cGRhdGVkXG59O1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCIsImltcG9ydCB7IHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZCdG4uY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZCdG5Ub2dnbGVTeW1ib2wgfSBmcm9tIFwiLi4vVkJ0blRvZ2dsZS9WQnRuVG9nZ2xlLm1qc1wiO1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gXCIuLi9WSWNvbi9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZQcm9ncmVzc0NpcmN1bGFyIH0gZnJvbSBcIi4uL1ZQcm9ncmVzc0NpcmN1bGFyL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUJvcmRlclByb3BzLCB1c2VCb3JkZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvYm9yZGVyLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VEZW5zaXR5UHJvcHMsIHVzZURlbnNpdHkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVuc2l0eS5tanNcIjtcbmltcG9ydCB7IG1ha2VEaW1lbnNpb25Qcm9wcywgdXNlRGltZW5zaW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RpbWVuc2lvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRWxldmF0aW9uUHJvcHMsIHVzZUVsZXZhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzXCI7XG5pbXBvcnQgeyBtYWtlR3JvdXBJdGVtUHJvcHMsIHVzZUdyb3VwSXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ncm91cC5tanNcIjtcbmltcG9ydCB7IEljb25WYWx1ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IG1ha2VMb2FkZXJQcm9wcywgdXNlTG9hZGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvYWRlci5tanNcIjtcbmltcG9ydCB7IG1ha2VMb2NhdGlvblByb3BzLCB1c2VMb2NhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VQb3NpdGlvblByb3BzLCB1c2VQb3NpdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wb3NpdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3V0ZXJQcm9wcywgdXNlTGluayB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3V0ZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RMaW5rIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NlbGVjdExpbmsubWpzXCI7XG5pbXBvcnQgeyBtYWtlU2l6ZVByb3BzLCB1c2VTaXplIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NpemUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjtcbmltcG9ydCB7IGdlbk92ZXJsYXlzLCBtYWtlVmFyaWFudFByb3BzLCB1c2VWYXJpYW50IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3ZhcmlhbnQubWpzXCI7IC8vIERpcmVjdGl2ZXNcbmltcG9ydCB7IFJpcHBsZSB9IGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL3JpcHBsZS9pbmRleC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWQnRuUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhY3RpdmU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICBzeW1ib2w6IHtcbiAgICB0eXBlOiBudWxsLFxuICAgIGRlZmF1bHQ6IFZCdG5Ub2dnbGVTeW1ib2xcbiAgfSxcbiAgZmxhdDogQm9vbGVhbixcbiAgaWNvbjogW0Jvb2xlYW4sIFN0cmluZywgRnVuY3Rpb24sIE9iamVjdF0sXG4gIHByZXBlbmRJY29uOiBJY29uVmFsdWUsXG4gIGFwcGVuZEljb246IEljb25WYWx1ZSxcbiAgYmxvY2s6IEJvb2xlYW4sXG4gIHN0YWNrZWQ6IEJvb2xlYW4sXG4gIHJpcHBsZToge1xuICAgIHR5cGU6IFtCb29sZWFuLCBPYmplY3RdLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgdGV4dDogU3RyaW5nLFxuICAuLi5tYWtlQm9yZGVyUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZURpbWVuc2lvblByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlR3JvdXBJdGVtUHJvcHMoKSxcbiAgLi4ubWFrZUxvYWRlclByb3BzKCksXG4gIC4uLm1ha2VMb2NhdGlvblByb3BzKCksXG4gIC4uLm1ha2VQb3NpdGlvblByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVJvdXRlclByb3BzKCksXG4gIC4uLm1ha2VTaXplUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKHtcbiAgICB0YWc6ICdidXR0b24nXG4gIH0pLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpLFxuICAuLi5tYWtlVmFyaWFudFByb3BzKHtcbiAgICB2YXJpYW50OiAnZWxldmF0ZWQnXG4gIH0pXG59LCAnVkJ0bicpO1xuZXhwb3J0IGNvbnN0IFZCdG4gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkJ0bicsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICBSaXBwbGVcbiAgfSxcbiAgcHJvcHM6IG1ha2VWQnRuUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAnZ3JvdXA6c2VsZWN0ZWQnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBhdHRycyxcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgYm9yZGVyQ2xhc3Nlc1xuICAgIH0gPSB1c2VCb3JkZXIocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbG9yQ2xhc3NlcyxcbiAgICAgIGNvbG9yU3R5bGVzLFxuICAgICAgdmFyaWFudENsYXNzZXNcbiAgICB9ID0gdXNlVmFyaWFudChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGVuc2l0eUNsYXNzZXNcbiAgICB9ID0gdXNlRGVuc2l0eShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGltZW5zaW9uU3R5bGVzXG4gICAgfSA9IHVzZURpbWVuc2lvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxvYWRlckNsYXNzZXNcbiAgICB9ID0gdXNlTG9hZGVyKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBsb2NhdGlvblN0eWxlc1xuICAgIH0gPSB1c2VMb2NhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcG9zaXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZVBvc2l0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBzaXplQ2xhc3NlcyxcbiAgICAgIHNpemVTdHlsZXNcbiAgICB9ID0gdXNlU2l6ZShwcm9wcyk7XG4gICAgY29uc3QgZ3JvdXAgPSB1c2VHcm91cEl0ZW0ocHJvcHMsIHByb3BzLnN5bWJvbCwgZmFsc2UpO1xuICAgIGNvbnN0IGxpbmsgPSB1c2VMaW5rKHByb3BzLCBhdHRycyk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMuYWN0aXZlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmFjdGl2ZTtcbiAgICAgIH1cbiAgICAgIGlmIChsaW5rLmlzTGluay52YWx1ZSkge1xuICAgICAgICByZXR1cm4gbGluay5pc0FjdGl2ZT8udmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZ3JvdXA/LmlzU2VsZWN0ZWQudmFsdWU7XG4gICAgfSk7XG4gICAgY29uc3QgaXNEaXNhYmxlZCA9IGNvbXB1dGVkKCgpID0+IGdyb3VwPy5kaXNhYmxlZC52YWx1ZSB8fCBwcm9wcy5kaXNhYmxlZCk7XG4gICAgY29uc3QgaXNFbGV2YXRlZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy52YXJpYW50ID09PSAnZWxldmF0ZWQnICYmICEocHJvcHMuZGlzYWJsZWQgfHwgcHJvcHMuZmxhdCB8fCBwcm9wcy5ib3JkZXIpO1xuICAgIH0pO1xuICAgIGNvbnN0IHZhbHVlQXR0ciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy52YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIE9iamVjdChwcm9wcy52YWx1ZSkgPT09IHByb3BzLnZhbHVlID8gSlNPTi5zdHJpbmdpZnkocHJvcHMudmFsdWUsIG51bGwsIDApIDogcHJvcHMudmFsdWU7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICBpZiAoaXNEaXNhYmxlZC52YWx1ZSB8fCBsaW5rLmlzTGluay52YWx1ZSAmJiAoZS5tZXRhS2V5IHx8IGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5IHx8IGUuYnV0dG9uICE9PSAwIHx8IGF0dHJzLnRhcmdldCA9PT0gJ19ibGFuaycpKSByZXR1cm47XG4gICAgICBsaW5rLm5hdmlnYXRlPy4oZSk7XG4gICAgICBncm91cD8udG9nZ2xlKCk7XG4gICAgfVxuICAgIHVzZVNlbGVjdExpbmsobGluaywgZ3JvdXA/LnNlbGVjdCk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFRhZyA9IGxpbmsuaXNMaW5rLnZhbHVlID8gJ2EnIDogcHJvcHMudGFnO1xuICAgICAgY29uc3QgaGFzUHJlcGVuZCA9ICEhKHByb3BzLnByZXBlbmRJY29uIHx8IHNsb3RzLnByZXBlbmQpO1xuICAgICAgY29uc3QgaGFzQXBwZW5kID0gISEocHJvcHMuYXBwZW5kSWNvbiB8fCBzbG90cy5hcHBlbmQpO1xuICAgICAgY29uc3QgaGFzSWNvbiA9ICEhKHByb3BzLmljb24gJiYgcHJvcHMuaWNvbiAhPT0gdHJ1ZSk7XG4gICAgICBjb25zdCBoYXNDb2xvciA9IGdyb3VwPy5pc1NlbGVjdGVkLnZhbHVlICYmICghbGluay5pc0xpbmsudmFsdWUgfHwgbGluay5pc0FjdGl2ZT8udmFsdWUpIHx8ICFncm91cCB8fCBsaW5rLmlzQWN0aXZlPy52YWx1ZTtcbiAgICAgIHJldHVybiBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFRhZywge1xuICAgICAgICBcInR5cGVcIjogVGFnID09PSAnYScgPyB1bmRlZmluZWQgOiAnYnV0dG9uJyxcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtYnRuJywgZ3JvdXA/LnNlbGVjdGVkQ2xhc3MudmFsdWUsIHtcbiAgICAgICAgICAndi1idG4tLWFjdGl2ZSc6IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICAgICd2LWJ0bi0tYmxvY2snOiBwcm9wcy5ibG9jayxcbiAgICAgICAgICAndi1idG4tLWRpc2FibGVkJzogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgICAgICAndi1idG4tLWVsZXZhdGVkJzogaXNFbGV2YXRlZC52YWx1ZSxcbiAgICAgICAgICAndi1idG4tLWZsYXQnOiBwcm9wcy5mbGF0LFxuICAgICAgICAgICd2LWJ0bi0taWNvbic6ICEhcHJvcHMuaWNvbixcbiAgICAgICAgICAndi1idG4tLWxvYWRpbmcnOiBwcm9wcy5sb2FkaW5nLFxuICAgICAgICAgICd2LWJ0bi0tc3RhY2tlZCc6IHByb3BzLnN0YWNrZWRcbiAgICAgICAgfSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBib3JkZXJDbGFzc2VzLnZhbHVlLCBoYXNDb2xvciA/IGNvbG9yQ2xhc3Nlcy52YWx1ZSA6IHVuZGVmaW5lZCwgZGVuc2l0eUNsYXNzZXMudmFsdWUsIGVsZXZhdGlvbkNsYXNzZXMudmFsdWUsIGxvYWRlckNsYXNzZXMudmFsdWUsIHBvc2l0aW9uQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHNpemVDbGFzc2VzLnZhbHVlLCB2YXJpYW50Q2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFtoYXNDb2xvciA/IGNvbG9yU3R5bGVzLnZhbHVlIDogdW5kZWZpbmVkLCBkaW1lbnNpb25TdHlsZXMudmFsdWUsIGxvY2F0aW9uU3R5bGVzLnZhbHVlLCBzaXplU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV0sXG4gICAgICAgIFwiZGlzYWJsZWRcIjogaXNEaXNhYmxlZC52YWx1ZSB8fCB1bmRlZmluZWQsXG4gICAgICAgIFwiaHJlZlwiOiBsaW5rLmhyZWYudmFsdWUsXG4gICAgICAgIFwib25DbGlja1wiOiBvbkNsaWNrLFxuICAgICAgICBcInZhbHVlXCI6IHZhbHVlQXR0ci52YWx1ZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbZ2VuT3ZlcmxheXModHJ1ZSwgJ3YtYnRuJyksICFwcm9wcy5pY29uICYmIGhhc1ByZXBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kXCIsXG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtYnRuX19wcmVwZW5kXCJcbiAgICAgICAgfSwgWyFzbG90cy5wcmVwZW5kID8gX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWljb25cIixcbiAgICAgICAgICBcImljb25cIjogcHJvcHMucHJlcGVuZEljb25cbiAgICAgICAgfSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcInByZXBlbmQtZGVmYXVsdHNcIixcbiAgICAgICAgICBcImRpc2FibGVkXCI6ICFwcm9wcy5wcmVwZW5kSWNvbixcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZJY29uOiB7XG4gICAgICAgICAgICAgIGljb246IHByb3BzLnByZXBlbmRJY29uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBzbG90cy5wcmVwZW5kKV0pLCBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1idG5fX2NvbnRlbnRcIixcbiAgICAgICAgICBcImRhdGEtbm8tYWN0aXZhdG9yXCI6IFwiXCJcbiAgICAgICAgfSwgWyFzbG90cy5kZWZhdWx0ICYmIGhhc0ljb24gPyBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICBcImtleVwiOiBcImNvbnRlbnQtaWNvblwiLFxuICAgICAgICAgIFwiaWNvblwiOiBwcm9wcy5pY29uXG4gICAgICAgIH0sIG51bGwpIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJjb250ZW50LWRlZmF1bHRzXCIsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiAhaGFzSWNvbixcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZJY29uOiB7XG4gICAgICAgICAgICAgIGljb246IHByb3BzLmljb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMuZGVmYXVsdD8uKCkgPz8gcHJvcHMudGV4dF1cbiAgICAgICAgfSldKSwgIXByb3BzLmljb24gJiYgaGFzQXBwZW5kICYmIF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwiYXBwZW5kXCIsXG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtYnRuX19hcHBlbmRcIlxuICAgICAgICB9LCBbIXNsb3RzLmFwcGVuZCA/IF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgIFwia2V5XCI6IFwiYXBwZW5kLWljb25cIixcbiAgICAgICAgICBcImljb25cIjogcHJvcHMuYXBwZW5kSWNvblxuICAgICAgICB9LCBudWxsKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgIFwia2V5XCI6IFwiYXBwZW5kLWRlZmF1bHRzXCIsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiAhcHJvcHMuYXBwZW5kSWNvbixcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZJY29uOiB7XG4gICAgICAgICAgICAgIGljb246IHByb3BzLmFwcGVuZEljb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHNsb3RzLmFwcGVuZCldKSwgISFwcm9wcy5sb2FkaW5nICYmIF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwibG9hZGVyXCIsXG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtYnRuX19sb2FkZXJcIlxuICAgICAgICB9LCBbc2xvdHMubG9hZGVyPy4oKSA/PyBfY3JlYXRlVk5vZGUoVlByb2dyZXNzQ2lyY3VsYXIsIHtcbiAgICAgICAgICBcImNvbG9yXCI6IHR5cGVvZiBwcm9wcy5sb2FkaW5nID09PSAnYm9vbGVhbicgPyB1bmRlZmluZWQgOiBwcm9wcy5sb2FkaW5nLFxuICAgICAgICAgIFwiaW5kZXRlcm1pbmF0ZVwiOiB0cnVlLFxuICAgICAgICAgIFwic2l6ZVwiOiBcIjIzXCIsXG4gICAgICAgICAgXCJ3aWR0aFwiOiBcIjJcIlxuICAgICAgICB9LCBudWxsKV0pXVxuICAgICAgfSksIFtbX3Jlc29sdmVEaXJlY3RpdmUoXCJyaXBwbGVcIiksICFpc0Rpc2FibGVkLnZhbHVlICYmIHByb3BzLnJpcHBsZSwgbnVsbF1dKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkJ0bi5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgbWFrZVZCdG5Qcm9wcywgVkJ0biB9IGZyb20gXCIuLi9WQnRuL1ZCdG4ubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkFwcEJhck5hdkljb25Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC4uLm1ha2VWQnRuUHJvcHMoe1xuICAgIGljb246ICckbWVudScsXG4gICAgdmFyaWFudDogJ3RleHQnXG4gIH0pXG59LCAnVkFwcEJhck5hdkljb24nKTtcbmV4cG9ydCBjb25zdCBWQXBwQmFyTmF2SWNvbiA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQXBwQmFyTmF2SWNvbicsXG4gIHByb3BzOiBtYWtlVkFwcEJhck5hdkljb25Qcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoVkJ0biwgX21lcmdlUHJvcHMocHJvcHMsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWFwcC1iYXItbmF2LWljb24nXVxuICAgIH0pLCBzbG90cykpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQXBwQmFyTmF2SWNvbi5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgbWFrZVZUb29sYmFyVGl0bGVQcm9wcywgVlRvb2xiYXJUaXRsZSB9IGZyb20gXCIuLi9WVG9vbGJhci9WVG9vbGJhclRpdGxlLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IFZBcHBCYXJUaXRsZSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQXBwQmFyVGl0bGUnLFxuICBwcm9wczogbWFrZVZUb29sYmFyVGl0bGVQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoVlRvb2xiYXJUaXRsZSwgX21lcmdlUHJvcHMocHJvcHMsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJ2LWFwcC1iYXItdGl0bGVcIlxuICAgIH0pLCBzbG90cykpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQXBwQmFyVGl0bGUubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZBbGVydFRpdGxlID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1hbGVydC10aXRsZScpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkFsZXJ0VGl0bGUubWpzLm1hcCIsImltcG9ydCB7IG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQWxlcnQuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZBbGVydFRpdGxlIH0gZnJvbSBcIi4vVkFsZXJ0VGl0bGUubWpzXCI7XG5pbXBvcnQgeyBWQnRuIH0gZnJvbSBcIi4uL1ZCdG4vaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZJY29uIH0gZnJvbSBcIi4uL1ZJY29uL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlVGV4dENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VEZW5zaXR5UHJvcHMsIHVzZURlbnNpdHkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVuc2l0eS5tanNcIjtcbmltcG9ydCB7IG1ha2VEaW1lbnNpb25Qcm9wcywgdXNlRGltZW5zaW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RpbWVuc2lvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRWxldmF0aW9uUHJvcHMsIHVzZUVsZXZhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUxvY2F0aW9uUHJvcHMsIHVzZUxvY2F0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2F0aW9uLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVBvc2l0aW9uUHJvcHMsIHVzZVBvc2l0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Bvc2l0aW9uLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiO1xuaW1wb3J0IHsgZ2VuT3ZlcmxheXMsIG1ha2VWYXJpYW50UHJvcHMsIHVzZVZhcmlhbnQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdmFyaWFudC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5jb25zdCBhbGxvd2VkVHlwZXMgPSBbJ3N1Y2Nlc3MnLCAnaW5mbycsICd3YXJuaW5nJywgJ2Vycm9yJ107XG5leHBvcnQgY29uc3QgbWFrZVZBbGVydFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYm9yZGVyOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ10sXG4gICAgdmFsaWRhdG9yOiB2YWwgPT4ge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdib29sZWFuJyB8fCBbJ3RvcCcsICdlbmQnLCAnYm90dG9tJywgJ3N0YXJ0J10uaW5jbHVkZXModmFsKTtcbiAgICB9XG4gIH0sXG4gIGJvcmRlckNvbG9yOiBTdHJpbmcsXG4gIGNsb3NhYmxlOiBCb29sZWFuLFxuICBjbG9zZUljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRjbG9zZSdcbiAgfSxcbiAgY2xvc2VMYWJlbDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkuY2xvc2UnXG4gIH0sXG4gIGljb246IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nLCBGdW5jdGlvbiwgT2JqZWN0XSxcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgcHJvbWluZW50OiBCb29sZWFuLFxuICB0aXRsZTogU3RyaW5nLFxuICB0ZXh0OiBTdHJpbmcsXG4gIHR5cGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgdmFsaWRhdG9yOiB2YWwgPT4gYWxsb3dlZFR5cGVzLmluY2x1ZGVzKHZhbClcbiAgfSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZURpbWVuc2lvblByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlTG9jYXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUG9zaXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpLFxuICAuLi5tYWtlVmFyaWFudFByb3BzKHtcbiAgICB2YXJpYW50OiAnZmxhdCdcbiAgfSlcbn0sICdWQWxlcnQnKTtcbmV4cG9ydCBjb25zdCBWQWxlcnQgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkFsZXJ0JyxcbiAgcHJvcHM6IG1ha2VWQWxlcnRQcm9wcygpLFxuICBlbWl0czoge1xuICAgICdjbGljazpjbG9zZSc6IGUgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWx1ZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGVtaXQsXG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IGljb24gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMuaWNvbiA9PT0gZmFsc2UpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICBpZiAoIXByb3BzLnR5cGUpIHJldHVybiBwcm9wcy5pY29uO1xuICAgICAgcmV0dXJuIHByb3BzLmljb24gPz8gYCQke3Byb3BzLnR5cGV9YDtcbiAgICB9KTtcbiAgICBjb25zdCB2YXJpYW50UHJvcHMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgY29sb3I6IHByb3BzLmNvbG9yID8/IHByb3BzLnR5cGUsXG4gICAgICB2YXJpYW50OiBwcm9wcy52YXJpYW50XG4gICAgfSkpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbG9yQ2xhc3NlcyxcbiAgICAgIGNvbG9yU3R5bGVzLFxuICAgICAgdmFyaWFudENsYXNzZXNcbiAgICB9ID0gdXNlVmFyaWFudCh2YXJpYW50UHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbnNpdHlDbGFzc2VzXG4gICAgfSA9IHVzZURlbnNpdHkocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRpbWVuc2lvblN0eWxlc1xuICAgIH0gPSB1c2VEaW1lbnNpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbkNsYXNzZXNcbiAgICB9ID0gdXNlRWxldmF0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBsb2NhdGlvblN0eWxlc1xuICAgIH0gPSB1c2VMb2NhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcG9zaXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZVBvc2l0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcih0b1JlZihwcm9wcywgJ2JvcmRlckNvbG9yJykpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRcbiAgICB9ID0gdXNlTG9jYWxlKCk7XG4gICAgY29uc3QgY2xvc2VQcm9wcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAnYXJpYS1sYWJlbCc6IHQocHJvcHMuY2xvc2VMYWJlbCksXG4gICAgICBvbkNsaWNrKGUpIHtcbiAgICAgICAgaXNBY3RpdmUudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgZW1pdCgnY2xpY2s6Y2xvc2UnLCBlKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IGhhc1ByZXBlbmQgPSAhIShzbG90cy5wcmVwZW5kIHx8IGljb24udmFsdWUpO1xuICAgICAgY29uc3QgaGFzVGl0bGUgPSAhIShzbG90cy50aXRsZSB8fCBwcm9wcy50aXRsZSk7XG4gICAgICBjb25zdCBoYXNDbG9zZSA9ICEhKHNsb3RzLmNsb3NlIHx8IHByb3BzLmNsb3NhYmxlKTtcbiAgICAgIHJldHVybiBpc0FjdGl2ZS52YWx1ZSAmJiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWFsZXJ0JywgcHJvcHMuYm9yZGVyICYmIHtcbiAgICAgICAgICAndi1hbGVydC0tYm9yZGVyJzogISFwcm9wcy5ib3JkZXIsXG4gICAgICAgICAgW2B2LWFsZXJ0LS1ib3JkZXItJHtwcm9wcy5ib3JkZXIgPT09IHRydWUgPyAnc3RhcnQnIDogcHJvcHMuYm9yZGVyfWBdOiB0cnVlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAndi1hbGVydC0tcHJvbWluZW50JzogcHJvcHMucHJvbWluZW50XG4gICAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgY29sb3JDbGFzc2VzLnZhbHVlLCBkZW5zaXR5Q2xhc3Nlcy52YWx1ZSwgZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSwgcG9zaXRpb25DbGFzc2VzLnZhbHVlLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgdmFyaWFudENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbY29sb3JTdHlsZXMudmFsdWUsIGRpbWVuc2lvblN0eWxlcy52YWx1ZSwgbG9jYXRpb25TdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXSxcbiAgICAgICAgXCJyb2xlXCI6IFwiYWxlcnRcIlxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbZ2VuT3ZlcmxheXMoZmFsc2UsICd2LWFsZXJ0JyksIHByb3BzLmJvcmRlciAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwiYm9yZGVyXCIsXG4gICAgICAgICAgXCJjbGFzc1wiOiBbJ3YtYWxlcnRfX2JvcmRlcicsIHRleHRDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgICAgIFwic3R5bGVcIjogdGV4dENvbG9yU3R5bGVzLnZhbHVlXG4gICAgICAgIH0sIG51bGwpLCBoYXNQcmVwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kXCIsXG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtYWxlcnRfX3ByZXBlbmRcIlxuICAgICAgICB9LCBbIXNsb3RzLnByZXBlbmQgPyBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICBcImtleVwiOiBcInByZXBlbmQtaWNvblwiLFxuICAgICAgICAgIFwiZGVuc2l0eVwiOiBwcm9wcy5kZW5zaXR5LFxuICAgICAgICAgIFwiaWNvblwiOiBpY29uLnZhbHVlLFxuICAgICAgICAgIFwic2l6ZVwiOiBwcm9wcy5wcm9taW5lbnQgPyA0NCA6IDI4XG4gICAgICAgIH0sIG51bGwpIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWRlZmF1bHRzXCIsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiAhaWNvbi52YWx1ZSxcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZJY29uOiB7XG4gICAgICAgICAgICAgIGRlbnNpdHk6IHByb3BzLmRlbnNpdHksXG4gICAgICAgICAgICAgIGljb246IGljb24udmFsdWUsXG4gICAgICAgICAgICAgIHNpemU6IHByb3BzLnByb21pbmVudCA/IDQ0IDogMjhcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHNsb3RzLnByZXBlbmQpXSksIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtYWxlcnRfX2NvbnRlbnRcIlxuICAgICAgICB9LCBbaGFzVGl0bGUgJiYgX2NyZWF0ZVZOb2RlKFZBbGVydFRpdGxlLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJ0aXRsZVwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMudGl0bGU/LigpID8/IHByb3BzLnRpdGxlXVxuICAgICAgICB9KSwgc2xvdHMudGV4dD8uKCkgPz8gcHJvcHMudGV4dCwgc2xvdHMuZGVmYXVsdD8uKCldKSwgc2xvdHMuYXBwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJhcHBlbmRcIixcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1hbGVydF9fYXBwZW5kXCJcbiAgICAgICAgfSwgW3Nsb3RzLmFwcGVuZCgpXSksIGhhc0Nsb3NlICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJjbG9zZVwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWFsZXJ0X19jbG9zZVwiXG4gICAgICAgIH0sIFshc2xvdHMuY2xvc2UgPyBfY3JlYXRlVk5vZGUoVkJ0biwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgIFwia2V5XCI6IFwiY2xvc2UtYnRuXCIsXG4gICAgICAgICAgXCJpY29uXCI6IHByb3BzLmNsb3NlSWNvbixcbiAgICAgICAgICBcInNpemVcIjogXCJ4LXNtYWxsXCIsXG4gICAgICAgICAgXCJ2YXJpYW50XCI6IFwidGV4dFwiXG4gICAgICAgIH0sIGNsb3NlUHJvcHMudmFsdWUpLCBudWxsKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgIFwia2V5XCI6IFwiY2xvc2UtZGVmYXVsdHNcIixcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZCdG46IHtcbiAgICAgICAgICAgICAgaWNvbjogcHJvcHMuY2xvc2VJY29uLFxuICAgICAgICAgICAgICBzaXplOiAneC1zbWFsbCcsXG4gICAgICAgICAgICAgIHZhcmlhbnQ6ICd0ZXh0J1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy5jbG9zZT8uKHtcbiAgICAgICAgICAgIHByb3BzOiBjbG9zZVByb3BzLnZhbHVlXG4gICAgICAgICAgfSldXG4gICAgICAgIH0pXSldXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZBbGVydC5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZMYWJlbC5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWTGFiZWxQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHRleHQ6IFN0cmluZyxcbiAgY2xpY2thYmxlOiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZMYWJlbCcpO1xuZXhwb3J0IGNvbnN0IFZMYWJlbCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTGFiZWwnLFxuICBwcm9wczogbWFrZVZMYWJlbFByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShcImxhYmVsXCIsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWxhYmVsJywge1xuICAgICAgICAndi1sYWJlbC0tY2xpY2thYmxlJzogcHJvcHMuY2xpY2thYmxlXG4gICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgfSwgW3Byb3BzLnRleHQsIHNsb3RzLmRlZmF1bHQ/LigpXSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTGFiZWwubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WU2VsZWN0aW9uQ29udHJvbEdyb3VwLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjtcbmltcG9ydCB7IG1ha2VEZW5zaXR5UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVuc2l0eS5tanNcIjtcbmltcG9ydCB7IEljb25WYWx1ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgb25TY29wZURpc3Bvc2UsIHByb3ZpZGUsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlZXBFcXVhbCwgZ2VuZXJpY0NvbXBvbmVudCwgZ2V0VWlkLCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IFZTZWxlY3Rpb25Db250cm9sR3JvdXBTeW1ib2wgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5OnNlbGVjdGlvbi1jb250cm9sLWdyb3VwJyk7XG5leHBvcnQgY29uc3QgbWFrZVNlbGVjdGlvbkNvbnRyb2xHcm91cFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29sb3I6IFN0cmluZyxcbiAgZGlzYWJsZWQ6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgZGVmYXVsdHNUYXJnZXQ6IFN0cmluZyxcbiAgZXJyb3I6IEJvb2xlYW4sXG4gIGlkOiBTdHJpbmcsXG4gIGlubGluZTogQm9vbGVhbixcbiAgZmFsc2VJY29uOiBJY29uVmFsdWUsXG4gIHRydWVJY29uOiBJY29uVmFsdWUsXG4gIHJpcHBsZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBtdWx0aXBsZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICBuYW1lOiBTdHJpbmcsXG4gIHJlYWRvbmx5OiBCb29sZWFuLFxuICBtb2RlbFZhbHVlOiBudWxsLFxuICB0eXBlOiBTdHJpbmcsXG4gIHZhbHVlQ29tcGFyYXRvcjoge1xuICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgIGRlZmF1bHQ6IGRlZXBFcXVhbFxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURlbnNpdHlQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpXG59LCAnU2VsZWN0aW9uQ29udHJvbEdyb3VwJyk7XG5leHBvcnQgY29uc3QgbWFrZVZTZWxlY3Rpb25Db250cm9sR3JvdXBQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC4uLm1ha2VTZWxlY3Rpb25Db250cm9sR3JvdXBQcm9wcyh7XG4gICAgZGVmYXVsdHNUYXJnZXQ6ICdWU2VsZWN0aW9uQ29udHJvbCdcbiAgfSlcbn0sICdWU2VsZWN0aW9uQ29udHJvbEdyb3VwJyk7XG5leHBvcnQgY29uc3QgVlNlbGVjdGlvbkNvbnRyb2xHcm91cCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWU2VsZWN0aW9uQ29udHJvbEdyb3VwJyxcbiAgcHJvcHM6IG1ha2VWU2VsZWN0aW9uQ29udHJvbEdyb3VwUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IG1vZGVsVmFsdWUgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgY29uc3QgdWlkID0gZ2V0VWlkKCk7XG4gICAgY29uc3QgaWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5pZCB8fCBgdi1zZWxlY3Rpb24tY29udHJvbC1ncm91cC0ke3VpZH1gKTtcbiAgICBjb25zdCBuYW1lID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMubmFtZSB8fCBpZC52YWx1ZSk7XG4gICAgY29uc3QgdXBkYXRlSGFuZGxlcnMgPSBuZXcgU2V0KCk7XG4gICAgcHJvdmlkZShWU2VsZWN0aW9uQ29udHJvbEdyb3VwU3ltYm9sLCB7XG4gICAgICBtb2RlbFZhbHVlLFxuICAgICAgZm9yY2VVcGRhdGU6ICgpID0+IHtcbiAgICAgICAgdXBkYXRlSGFuZGxlcnMuZm9yRWFjaChmbiA9PiBmbigpKTtcbiAgICAgIH0sXG4gICAgICBvbkZvcmNlVXBkYXRlOiBjYiA9PiB7XG4gICAgICAgIHVwZGF0ZUhhbmRsZXJzLmFkZChjYik7XG4gICAgICAgIG9uU2NvcGVEaXNwb3NlKCgpID0+IHtcbiAgICAgICAgICB1cGRhdGVIYW5kbGVycy5kZWxldGUoY2IpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwcm92aWRlRGVmYXVsdHMoe1xuICAgICAgW3Byb3BzLmRlZmF1bHRzVGFyZ2V0XToge1xuICAgICAgICBjb2xvcjogdG9SZWYocHJvcHMsICdjb2xvcicpLFxuICAgICAgICBkaXNhYmxlZDogdG9SZWYocHJvcHMsICdkaXNhYmxlZCcpLFxuICAgICAgICBkZW5zaXR5OiB0b1JlZihwcm9wcywgJ2RlbnNpdHknKSxcbiAgICAgICAgZXJyb3I6IHRvUmVmKHByb3BzLCAnZXJyb3InKSxcbiAgICAgICAgaW5saW5lOiB0b1JlZihwcm9wcywgJ2lubGluZScpLFxuICAgICAgICBtb2RlbFZhbHVlLFxuICAgICAgICBtdWx0aXBsZTogY29tcHV0ZWQoKCkgPT4gISFwcm9wcy5tdWx0aXBsZSB8fCBwcm9wcy5tdWx0aXBsZSA9PSBudWxsICYmIEFycmF5LmlzQXJyYXkobW9kZWxWYWx1ZS52YWx1ZSkpLFxuICAgICAgICBuYW1lLFxuICAgICAgICBmYWxzZUljb246IHRvUmVmKHByb3BzLCAnZmFsc2VJY29uJyksXG4gICAgICAgIHRydWVJY29uOiB0b1JlZihwcm9wcywgJ3RydWVJY29uJyksXG4gICAgICAgIHJlYWRvbmx5OiB0b1JlZihwcm9wcywgJ3JlYWRvbmx5JyksXG4gICAgICAgIHJpcHBsZTogdG9SZWYocHJvcHMsICdyaXBwbGUnKSxcbiAgICAgICAgdHlwZTogdG9SZWYocHJvcHMsICd0eXBlJyksXG4gICAgICAgIHZhbHVlQ29tcGFyYXRvcjogdG9SZWYocHJvcHMsICd2YWx1ZUNvbXBhcmF0b3InKVxuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3Ytc2VsZWN0aW9uLWNvbnRyb2wtZ3JvdXAnLCB7XG4gICAgICAgICd2LXNlbGVjdGlvbi1jb250cm9sLWdyb3VwLS1pbmxpbmUnOiBwcm9wcy5pbmxpbmVcbiAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGUsXG4gICAgICBcInJvbGVcIjogcHJvcHMudHlwZSA9PT0gJ3JhZGlvJyA/ICdyYWRpb2dyb3VwJyA6IHVuZGVmaW5lZFxuICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKV0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlNlbGVjdGlvbkNvbnRyb2xHcm91cC5tanMubWFwIiwiaW1wb3J0IHsgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcyB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WU2VsZWN0aW9uQ29udHJvbC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkljb24gfSBmcm9tIFwiLi4vVkljb24vaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWTGFiZWwgfSBmcm9tIFwiLi4vVkxhYmVsL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNlbGVjdGlvbkNvbnRyb2xHcm91cFByb3BzLCBWU2VsZWN0aW9uQ29udHJvbEdyb3VwU3ltYm9sIH0gZnJvbSBcIi4uL1ZTZWxlY3Rpb25Db250cm9sR3JvdXAvVlNlbGVjdGlvbkNvbnRyb2xHcm91cC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciwgdXNlVGV4dENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHVzZURlbnNpdHkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVuc2l0eS5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIERpcmVjdGl2ZXNcbmltcG9ydCB7IFJpcHBsZSB9IGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL3JpcHBsZS9pbmRleC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaW5qZWN0LCBuZXh0VGljaywgcmVmLCBzaGFsbG93UmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGZpbHRlcklucHV0QXR0cnMsIGdlbmVyaWNDb21wb25lbnQsIGdldFVpZCwgbWF0Y2hlc1NlbGVjdG9yLCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciwgd3JhcEluQXJyYXkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVlNlbGVjdGlvbkNvbnRyb2xQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGxhYmVsOiBTdHJpbmcsXG4gIHRydWVWYWx1ZTogbnVsbCxcbiAgZmFsc2VWYWx1ZTogbnVsbCxcbiAgdmFsdWU6IG51bGwsXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlU2VsZWN0aW9uQ29udHJvbEdyb3VwUHJvcHMoKVxufSwgJ1ZTZWxlY3Rpb25Db250cm9sJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlU2VsZWN0aW9uQ29udHJvbChwcm9wcykge1xuICBjb25zdCBncm91cCA9IGluamVjdChWU2VsZWN0aW9uQ29udHJvbEdyb3VwU3ltYm9sLCB1bmRlZmluZWQpO1xuICBjb25zdCB7XG4gICAgZGVuc2l0eUNsYXNzZXNcbiAgfSA9IHVzZURlbnNpdHkocHJvcHMpO1xuICBjb25zdCBtb2RlbFZhbHVlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICBjb25zdCB0cnVlVmFsdWUgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy50cnVlVmFsdWUgIT09IHVuZGVmaW5lZCA/IHByb3BzLnRydWVWYWx1ZSA6IHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgPyBwcm9wcy52YWx1ZSA6IHRydWUpO1xuICBjb25zdCBmYWxzZVZhbHVlID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuZmFsc2VWYWx1ZSAhPT0gdW5kZWZpbmVkID8gcHJvcHMuZmFsc2VWYWx1ZSA6IGZhbHNlKTtcbiAgY29uc3QgaXNNdWx0aXBsZSA9IGNvbXB1dGVkKCgpID0+ICEhcHJvcHMubXVsdGlwbGUgfHwgcHJvcHMubXVsdGlwbGUgPT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KG1vZGVsVmFsdWUudmFsdWUpKTtcbiAgY29uc3QgbW9kZWwgPSBjb21wdXRlZCh7XG4gICAgZ2V0KCkge1xuICAgICAgY29uc3QgdmFsID0gZ3JvdXAgPyBncm91cC5tb2RlbFZhbHVlLnZhbHVlIDogbW9kZWxWYWx1ZS52YWx1ZTtcbiAgICAgIHJldHVybiBpc011bHRpcGxlLnZhbHVlID8gdmFsLnNvbWUodiA9PiBwcm9wcy52YWx1ZUNvbXBhcmF0b3IodiwgdHJ1ZVZhbHVlLnZhbHVlKSkgOiBwcm9wcy52YWx1ZUNvbXBhcmF0b3IodmFsLCB0cnVlVmFsdWUudmFsdWUpO1xuICAgIH0sXG4gICAgc2V0KHZhbCkge1xuICAgICAgaWYgKHByb3BzLnJlYWRvbmx5KSByZXR1cm47XG4gICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB2YWwgPyB0cnVlVmFsdWUudmFsdWUgOiBmYWxzZVZhbHVlLnZhbHVlO1xuICAgICAgbGV0IG5ld1ZhbCA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgIGlmIChpc011bHRpcGxlLnZhbHVlKSB7XG4gICAgICAgIG5ld1ZhbCA9IHZhbCA/IFsuLi53cmFwSW5BcnJheShtb2RlbFZhbHVlLnZhbHVlKSwgY3VycmVudFZhbHVlXSA6IHdyYXBJbkFycmF5KG1vZGVsVmFsdWUudmFsdWUpLmZpbHRlcihpdGVtID0+ICFwcm9wcy52YWx1ZUNvbXBhcmF0b3IoaXRlbSwgdHJ1ZVZhbHVlLnZhbHVlKSk7XG4gICAgICB9XG4gICAgICBpZiAoZ3JvdXApIHtcbiAgICAgICAgZ3JvdXAubW9kZWxWYWx1ZS52YWx1ZSA9IG5ld1ZhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGVsVmFsdWUudmFsdWUgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3Qge1xuICAgIHRleHRDb2xvckNsYXNzZXMsXG4gICAgdGV4dENvbG9yU3R5bGVzXG4gIH0gPSB1c2VUZXh0Q29sb3IoY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBtb2RlbC52YWx1ZSAmJiAhcHJvcHMuZXJyb3IgJiYgIXByb3BzLmRpc2FibGVkID8gcHJvcHMuY29sb3IgOiB1bmRlZmluZWQ7XG4gIH0pKTtcbiAgY29uc3Qge1xuICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gIH0gPSB1c2VCYWNrZ3JvdW5kQ29sb3IoY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBtb2RlbC52YWx1ZSAmJiAhcHJvcHMuZXJyb3IgJiYgIXByb3BzLmRpc2FibGVkID8gcHJvcHMuY29sb3IgOiB1bmRlZmluZWQ7XG4gIH0pKTtcbiAgY29uc3QgaWNvbiA9IGNvbXB1dGVkKCgpID0+IG1vZGVsLnZhbHVlID8gcHJvcHMudHJ1ZUljb24gOiBwcm9wcy5mYWxzZUljb24pO1xuICByZXR1cm4ge1xuICAgIGdyb3VwLFxuICAgIGRlbnNpdHlDbGFzc2VzLFxuICAgIHRydWVWYWx1ZSxcbiAgICBmYWxzZVZhbHVlLFxuICAgIG1vZGVsLFxuICAgIHRleHRDb2xvckNsYXNzZXMsXG4gICAgdGV4dENvbG9yU3R5bGVzLFxuICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgYmFja2dyb3VuZENvbG9yU3R5bGVzLFxuICAgIGljb25cbiAgfTtcbn1cbmV4cG9ydCBjb25zdCBWU2VsZWN0aW9uQ29udHJvbCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWU2VsZWN0aW9uQ29udHJvbCcsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICBSaXBwbGVcbiAgfSxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IG1ha2VWU2VsZWN0aW9uQ29udHJvbFByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnMsXG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIGdyb3VwLFxuICAgICAgZGVuc2l0eUNsYXNzZXMsXG4gICAgICBpY29uLFxuICAgICAgbW9kZWwsXG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzLFxuICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlcyxcbiAgICAgIHRydWVWYWx1ZVxuICAgIH0gPSB1c2VTZWxlY3Rpb25Db250cm9sKHByb3BzKTtcbiAgICBjb25zdCB1aWQgPSBnZXRVaWQoKTtcbiAgICBjb25zdCBpZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmlkIHx8IGBpbnB1dC0ke3VpZH1gKTtcbiAgICBjb25zdCBpc0ZvY3VzZWQgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgICBjb25zdCBpc0ZvY3VzVmlzaWJsZSA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIGNvbnN0IGlucHV0ID0gcmVmKCk7XG4gICAgZ3JvdXA/Lm9uRm9yY2VVcGRhdGUoKCkgPT4ge1xuICAgICAgaWYgKGlucHV0LnZhbHVlKSB7XG4gICAgICAgIGlucHV0LnZhbHVlLmNoZWNrZWQgPSBtb2RlbC52YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBvbkZvY3VzKGUpIHtcbiAgICAgIGlzRm9jdXNlZC52YWx1ZSA9IHRydWU7XG4gICAgICBpZiAobWF0Y2hlc1NlbGVjdG9yKGUudGFyZ2V0LCAnOmZvY3VzLXZpc2libGUnKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgaXNGb2N1c1Zpc2libGUudmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkJsdXIoKSB7XG4gICAgICBpc0ZvY3VzZWQudmFsdWUgPSBmYWxzZTtcbiAgICAgIGlzRm9jdXNWaXNpYmxlLnZhbHVlID0gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uSW5wdXQoZSkge1xuICAgICAgaWYgKHByb3BzLnJlYWRvbmx5ICYmIGdyb3VwKSB7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IGdyb3VwLmZvcmNlVXBkYXRlKCkpO1xuICAgICAgfVxuICAgICAgbW9kZWwudmFsdWUgPSBlLnRhcmdldC5jaGVja2VkO1xuICAgIH1cbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgbGFiZWwgPSBzbG90cy5sYWJlbCA/IHNsb3RzLmxhYmVsKHtcbiAgICAgICAgbGFiZWw6IHByb3BzLmxhYmVsLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIGZvcjogaWQudmFsdWVcbiAgICAgICAgfVxuICAgICAgfSkgOiBwcm9wcy5sYWJlbDtcbiAgICAgIGNvbnN0IFtyb290QXR0cnMsIGlucHV0QXR0cnNdID0gZmlsdGVySW5wdXRBdHRycyhhdHRycyk7XG4gICAgICBjb25zdCBpbnB1dE5vZGUgPSBfY3JlYXRlVk5vZGUoXCJpbnB1dFwiLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwicmVmXCI6IGlucHV0LFxuICAgICAgICBcImNoZWNrZWRcIjogbW9kZWwudmFsdWUsXG4gICAgICAgIFwiZGlzYWJsZWRcIjogISEocHJvcHMucmVhZG9ubHkgfHwgcHJvcHMuZGlzYWJsZWQpLFxuICAgICAgICBcImlkXCI6IGlkLnZhbHVlLFxuICAgICAgICBcIm9uQmx1clwiOiBvbkJsdXIsXG4gICAgICAgIFwib25Gb2N1c1wiOiBvbkZvY3VzLFxuICAgICAgICBcIm9uSW5wdXRcIjogb25JbnB1dCxcbiAgICAgICAgXCJhcmlhLWRpc2FibGVkXCI6ICEhKHByb3BzLnJlYWRvbmx5IHx8IHByb3BzLmRpc2FibGVkKSxcbiAgICAgICAgXCJ0eXBlXCI6IHByb3BzLnR5cGUsXG4gICAgICAgIFwidmFsdWVcIjogdHJ1ZVZhbHVlLnZhbHVlLFxuICAgICAgICBcIm5hbWVcIjogcHJvcHMubmFtZSxcbiAgICAgICAgXCJhcmlhLWNoZWNrZWRcIjogcHJvcHMudHlwZSA9PT0gJ2NoZWNrYm94JyA/IG1vZGVsLnZhbHVlIDogdW5kZWZpbmVkXG4gICAgICB9LCBpbnB1dEF0dHJzKSwgbnVsbCk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytc2VsZWN0aW9uLWNvbnRyb2wnLCB7XG4gICAgICAgICAgJ3Ytc2VsZWN0aW9uLWNvbnRyb2wtLWRpcnR5JzogbW9kZWwudmFsdWUsXG4gICAgICAgICAgJ3Ytc2VsZWN0aW9uLWNvbnRyb2wtLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgJ3Ytc2VsZWN0aW9uLWNvbnRyb2wtLWVycm9yJzogcHJvcHMuZXJyb3IsXG4gICAgICAgICAgJ3Ytc2VsZWN0aW9uLWNvbnRyb2wtLWZvY3VzZWQnOiBpc0ZvY3VzZWQudmFsdWUsXG4gICAgICAgICAgJ3Ytc2VsZWN0aW9uLWNvbnRyb2wtLWZvY3VzLXZpc2libGUnOiBpc0ZvY3VzVmlzaWJsZS52YWx1ZSxcbiAgICAgICAgICAndi1zZWxlY3Rpb24tY29udHJvbC0taW5saW5lJzogcHJvcHMuaW5saW5lXG4gICAgICAgIH0sIGRlbnNpdHlDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc11cbiAgICAgIH0sIHJvb3RBdHRycywge1xuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9KSwgW19jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXNlbGVjdGlvbi1jb250cm9sX193cmFwcGVyJywgdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgIFwic3R5bGVcIjogdGV4dENvbG9yU3R5bGVzLnZhbHVlXG4gICAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gICAgICB9KSwgX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXNlbGVjdGlvbi1jb250cm9sX19pbnB1dCddXG4gICAgICB9LCBbc2xvdHMuaW5wdXQ/Lih7XG4gICAgICAgIG1vZGVsLFxuICAgICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgICB0ZXh0Q29sb3JTdHlsZXMsXG4gICAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlcyxcbiAgICAgICAgaW5wdXROb2RlLFxuICAgICAgICBpY29uOiBpY29uLnZhbHVlLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIG9uRm9jdXMsXG4gICAgICAgICAgb25CbHVyLFxuICAgICAgICAgIGlkOiBpZC52YWx1ZVxuICAgICAgICB9XG4gICAgICB9KSA/PyBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbaWNvbi52YWx1ZSAmJiBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgXCJrZXlcIjogXCJpY29uXCIsXG4gICAgICAgIFwiaWNvblwiOiBpY29uLnZhbHVlXG4gICAgICB9LCBudWxsKSwgaW5wdXROb2RlXSldKSwgW1tfcmVzb2x2ZURpcmVjdGl2ZShcInJpcHBsZVwiKSwgcHJvcHMucmlwcGxlICYmIFshcHJvcHMuZGlzYWJsZWQgJiYgIXByb3BzLnJlYWRvbmx5LCBudWxsLCBbJ2NlbnRlcicsICdjaXJjbGUnXV1dXSldKSwgbGFiZWwgJiYgX2NyZWF0ZVZOb2RlKFZMYWJlbCwge1xuICAgICAgICBcImZvclwiOiBpZC52YWx1ZSxcbiAgICAgICAgXCJjbGlja2FibGVcIjogdHJ1ZSxcbiAgICAgICAgXCJvbkNsaWNrXCI6IGUgPT4gZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbbGFiZWxdXG4gICAgICB9KV0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBpc0ZvY3VzZWQsXG4gICAgICBpbnB1dFxuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlNlbGVjdGlvbkNvbnRyb2wubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IG1ha2VWU2VsZWN0aW9uQ29udHJvbFByb3BzLCBWU2VsZWN0aW9uQ29udHJvbCB9IGZyb20gXCIuLi9WU2VsZWN0aW9uQ29udHJvbC9WU2VsZWN0aW9uQ29udHJvbC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IEljb25WYWx1ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgb21pdCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkNoZWNrYm94QnRuUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBpbmRldGVybWluYXRlOiBCb29sZWFuLFxuICBpbmRldGVybWluYXRlSWNvbjoge1xuICAgIHR5cGU6IEljb25WYWx1ZSxcbiAgICBkZWZhdWx0OiAnJGNoZWNrYm94SW5kZXRlcm1pbmF0ZSdcbiAgfSxcbiAgLi4ubWFrZVZTZWxlY3Rpb25Db250cm9sUHJvcHMoe1xuICAgIGZhbHNlSWNvbjogJyRjaGVja2JveE9mZicsXG4gICAgdHJ1ZUljb246ICckY2hlY2tib3hPbidcbiAgfSlcbn0sICdWQ2hlY2tib3hCdG4nKTtcbmV4cG9ydCBjb25zdCBWQ2hlY2tib3hCdG4gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkNoZWNrYm94QnRuJyxcbiAgcHJvcHM6IG1ha2VWQ2hlY2tib3hCdG5Qcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWUsXG4gICAgJ3VwZGF0ZTppbmRldGVybWluYXRlJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBpbmRldGVybWluYXRlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnaW5kZXRlcm1pbmF0ZScpO1xuICAgIGNvbnN0IG1vZGVsID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGZ1bmN0aW9uIG9uQ2hhbmdlKHYpIHtcbiAgICAgIGlmIChpbmRldGVybWluYXRlLnZhbHVlKSB7XG4gICAgICAgIGluZGV0ZXJtaW5hdGUudmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZmFsc2VJY29uID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIGluZGV0ZXJtaW5hdGUudmFsdWUgPyBwcm9wcy5pbmRldGVybWluYXRlSWNvbiA6IHByb3BzLmZhbHNlSWNvbjtcbiAgICB9KTtcbiAgICBjb25zdCB0cnVlSWNvbiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBpbmRldGVybWluYXRlLnZhbHVlID8gcHJvcHMuaW5kZXRlcm1pbmF0ZUljb24gOiBwcm9wcy50cnVlSWNvbjtcbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgY29udHJvbFByb3BzID0gb21pdChWU2VsZWN0aW9uQ29udHJvbC5maWx0ZXJQcm9wcyhwcm9wcylbMF0sIFsnbW9kZWxWYWx1ZSddKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVlNlbGVjdGlvbkNvbnRyb2wsIF9tZXJnZVByb3BzKGNvbnRyb2xQcm9wcywge1xuICAgICAgICBcIm1vZGVsVmFsdWVcIjogbW9kZWwudmFsdWUsXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBbJGV2ZW50ID0+IG1vZGVsLnZhbHVlID0gJGV2ZW50LCBvbkNoYW5nZV0sXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWNoZWNrYm94LWJ0bicsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZSxcbiAgICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgICAgXCJmYWxzZUljb25cIjogZmFsc2VJY29uLnZhbHVlLFxuICAgICAgICBcInRydWVJY29uXCI6IHRydWVJY29uLnZhbHVlLFxuICAgICAgICBcImFyaWEtY2hlY2tlZFwiOiBpbmRldGVybWluYXRlLnZhbHVlID8gJ21peGVkJyA6IHVuZGVmaW5lZFxuICAgICAgfSksIHNsb3RzKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNoZWNrYm94QnRuLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gXCIuLi9WSWNvbi9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUxvY2FsZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhbGUubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgZnVuY3Rpb24gdXNlSW5wdXRJY29uKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICB0XG4gIH0gPSB1c2VMb2NhbGUoKTtcbiAgZnVuY3Rpb24gSW5wdXRJY29uKF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgbmFtZVxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGxvY2FsZUtleSA9IHtcbiAgICAgIHByZXBlbmQ6ICdwcmVwZW5kQWN0aW9uJyxcbiAgICAgIHByZXBlbmRJbm5lcjogJ3ByZXBlbmRBY3Rpb24nLFxuICAgICAgYXBwZW5kOiAnYXBwZW5kQWN0aW9uJyxcbiAgICAgIGFwcGVuZElubmVyOiAnYXBwZW5kQWN0aW9uJyxcbiAgICAgIGNsZWFyOiAnY2xlYXInXG4gICAgfVtuYW1lXTtcbiAgICBjb25zdCBsaXN0ZW5lciA9IHByb3BzW2BvbkNsaWNrOiR7bmFtZX1gXTtcbiAgICBjb25zdCBsYWJlbCA9IGxpc3RlbmVyICYmIGxvY2FsZUtleSA/IHQoYCR2dWV0aWZ5LmlucHV0LiR7bG9jYWxlS2V5fWAsIHByb3BzLmxhYmVsID8/ICcnKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICBcImljb25cIjogcHJvcHNbYCR7bmFtZX1JY29uYF0sXG4gICAgICBcImFyaWEtbGFiZWxcIjogbGFiZWwsXG4gICAgICBcIm9uQ2xpY2tcIjogbGlzdGVuZXJcbiAgICB9LCBudWxsKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIElucHV0SWNvblxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5wdXRJY29uLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVk1lc3NhZ2VzLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWU2xpZGVZVHJhbnNpdGlvbiB9IGZyb20gXCIuLi90cmFuc2l0aW9ucy9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVRleHRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVHJhbnNpdGlvblByb3BzLCBNYXliZVRyYW5zaXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdHJhbnNpdGlvbi5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciwgd3JhcEluQXJyYXkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVk1lc3NhZ2VzUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhY3RpdmU6IEJvb2xlYW4sXG4gIGNvbG9yOiBTdHJpbmcsXG4gIG1lc3NhZ2VzOiB7XG4gICAgdHlwZTogW0FycmF5LCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlVHJhbnNpdGlvblByb3BzKHtcbiAgICB0cmFuc2l0aW9uOiB7XG4gICAgICBjb21wb25lbnQ6IFZTbGlkZVlUcmFuc2l0aW9uLFxuICAgICAgbGVhdmVBYnNvbHV0ZTogdHJ1ZSxcbiAgICAgIGdyb3VwOiB0cnVlXG4gICAgfVxuICB9KVxufSwgJ1ZNZXNzYWdlcycpO1xuZXhwb3J0IGNvbnN0IFZNZXNzYWdlcyA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTWVzc2FnZXMnLFxuICBwcm9wczogbWFrZVZNZXNzYWdlc1Byb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBjb21wdXRlZCgoKSA9PiB3cmFwSW5BcnJheShwcm9wcy5tZXNzYWdlcykpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRleHRDb2xvckNsYXNzZXMsXG4gICAgICB0ZXh0Q29sb3JTdHlsZXNcbiAgICB9ID0gdXNlVGV4dENvbG9yKGNvbXB1dGVkKCgpID0+IHByb3BzLmNvbG9yKSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShNYXliZVRyYW5zaXRpb24sIHtcbiAgICAgIFwidHJhbnNpdGlvblwiOiBwcm9wcy50cmFuc2l0aW9uLFxuICAgICAgXCJ0YWdcIjogXCJkaXZcIixcbiAgICAgIFwiY2xhc3NcIjogWyd2LW1lc3NhZ2VzJywgdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBbdGV4dENvbG9yU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV0sXG4gICAgICBcInJvbGVcIjogXCJhbGVydFwiLFxuICAgICAgXCJhcmlhLWxpdmVcIjogXCJwb2xpdGVcIlxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtwcm9wcy5hY3RpdmUgJiYgbWVzc2FnZXMudmFsdWUubWFwKChtZXNzYWdlLCBpKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi1tZXNzYWdlc19fbWVzc2FnZVwiLFxuICAgICAgICBcImtleVwiOiBgJHtpfS0ke21lc3NhZ2VzLnZhbHVlfWBcbiAgICAgIH0sIFtzbG90cy5tZXNzYWdlID8gc2xvdHMubWVzc2FnZSh7XG4gICAgICAgIG1lc3NhZ2VcbiAgICAgIH0pIDogbWVzc2FnZV0pKV1cbiAgICB9KSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZNZXNzYWdlcy5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuL3Byb3hpZWRNb2RlbC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBFdmVudFByb3AsIGdldEN1cnJlbnRJbnN0YW5jZU5hbWUsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuLy8gQ29tcG9zYWJsZXNcbmV4cG9ydCBjb25zdCBtYWtlRm9jdXNQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGZvY3VzZWQ6IEJvb2xlYW4sXG4gICdvblVwZGF0ZTpmb2N1c2VkJzogRXZlbnRQcm9wKClcbn0sICdmb2N1cycpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUZvY3VzKHByb3BzKSB7XG4gIGxldCBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBnZXRDdXJyZW50SW5zdGFuY2VOYW1lKCk7XG4gIGNvbnN0IGlzRm9jdXNlZCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ2ZvY3VzZWQnKTtcbiAgY29uc3QgZm9jdXNDbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBbYCR7bmFtZX0tLWZvY3VzZWRgXTogaXNGb2N1c2VkLnZhbHVlXG4gICAgfTtcbiAgfSk7XG4gIGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgIGlzRm9jdXNlZC52YWx1ZSA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gYmx1cigpIHtcbiAgICBpc0ZvY3VzZWQudmFsdWUgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGZvY3VzQ2xhc3NlcyxcbiAgICBpc0ZvY3VzZWQsXG4gICAgZm9jdXMsXG4gICAgYmx1clxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9jdXMubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCwgcHJvdmlkZSwgcmVmLCBzaGFsbG93UmVmLCB0b1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29uc29sZVdhcm4sIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IEZvcm1LZXkgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5OmZvcm0nKTtcbmV4cG9ydCBjb25zdCBtYWtlRm9ybVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIGZhc3RGYWlsOiBCb29sZWFuLFxuICByZWFkb25seTogQm9vbGVhbixcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICB2YWxpZGF0ZU9uOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdpbnB1dCdcbiAgfVxufSwgJ2Zvcm0nKTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGb3JtKHByb3BzKSB7XG4gIGNvbnN0IG1vZGVsID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICBjb25zdCBpc0Rpc2FibGVkID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuZGlzYWJsZWQpO1xuICBjb25zdCBpc1JlYWRvbmx5ID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMucmVhZG9ubHkpO1xuICBjb25zdCBpc1ZhbGlkYXRpbmcgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgY29uc3QgaXRlbXMgPSByZWYoW10pO1xuICBjb25zdCBlcnJvcnMgPSByZWYoW10pO1xuICBhc3luYyBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgbGV0IHZhbGlkID0gdHJ1ZTtcbiAgICBlcnJvcnMudmFsdWUgPSBbXTtcbiAgICBpc1ZhbGlkYXRpbmcudmFsdWUgPSB0cnVlO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcy52YWx1ZSkge1xuICAgICAgY29uc3QgaXRlbUVycm9yTWVzc2FnZXMgPSBhd2FpdCBpdGVtLnZhbGlkYXRlKCk7XG4gICAgICBpZiAoaXRlbUVycm9yTWVzc2FnZXMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICAgIGVycm9yTWVzc2FnZXM6IGl0ZW1FcnJvck1lc3NhZ2VzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCF2YWxpZCAmJiBwcm9wcy5mYXN0RmFpbCkgYnJlYWs7XG4gICAgfVxuICAgIGVycm9ycy52YWx1ZSA9IHJlc3VsdHM7XG4gICAgaXNWYWxpZGF0aW5nLnZhbHVlID0gZmFsc2U7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbGlkLFxuICAgICAgZXJyb3JzOiBlcnJvcnMudmFsdWVcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGl0ZW1zLnZhbHVlLmZvckVhY2goaXRlbSA9PiBpdGVtLnJlc2V0KCkpO1xuICB9XG4gIGZ1bmN0aW9uIHJlc2V0VmFsaWRhdGlvbigpIHtcbiAgICBpdGVtcy52YWx1ZS5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5yZXNldFZhbGlkYXRpb24oKSk7XG4gIH1cbiAgd2F0Y2goaXRlbXMsICgpID0+IHtcbiAgICBsZXQgdmFsaWQgPSAwO1xuICAgIGxldCBpbnZhbGlkID0gMDtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zLnZhbHVlKSB7XG4gICAgICBpZiAoaXRlbS5pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICBpbnZhbGlkKys7XG4gICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgICAgZXJyb3JNZXNzYWdlczogaXRlbS5lcnJvck1lc3NhZ2VzXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpdGVtLmlzVmFsaWQgPT09IHRydWUpIHZhbGlkKys7XG4gICAgfVxuICAgIGVycm9ycy52YWx1ZSA9IHJlc3VsdHM7XG4gICAgbW9kZWwudmFsdWUgPSBpbnZhbGlkID4gMCA/IGZhbHNlIDogdmFsaWQgPT09IGl0ZW1zLnZhbHVlLmxlbmd0aCA/IHRydWUgOiBudWxsO1xuICB9LCB7XG4gICAgZGVlcDogdHJ1ZVxuICB9KTtcbiAgcHJvdmlkZShGb3JtS2V5LCB7XG4gICAgcmVnaXN0ZXI6IF9yZWYgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgaWQsXG4gICAgICAgIHZhbGlkYXRlLFxuICAgICAgICByZXNldCxcbiAgICAgICAgcmVzZXRWYWxpZGF0aW9uXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIGlmIChpdGVtcy52YWx1ZS5zb21lKGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWQpKSB7XG4gICAgICAgIGNvbnNvbGVXYXJuKGBEdXBsaWNhdGUgaW5wdXQgbmFtZSBcIiR7aWR9XCJgKTtcbiAgICAgIH1cbiAgICAgIGl0ZW1zLnZhbHVlLnB1c2goe1xuICAgICAgICBpZCxcbiAgICAgICAgdmFsaWRhdGUsXG4gICAgICAgIHJlc2V0LFxuICAgICAgICByZXNldFZhbGlkYXRpb24sXG4gICAgICAgIGlzVmFsaWQ6IG51bGwsXG4gICAgICAgIGVycm9yTWVzc2FnZXM6IFtdXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVucmVnaXN0ZXI6IGlkID0+IHtcbiAgICAgIGl0ZW1zLnZhbHVlID0gaXRlbXMudmFsdWUuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICByZXR1cm4gaXRlbS5pZCAhPT0gaWQ7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZTogKGlkLCBpc1ZhbGlkLCBlcnJvck1lc3NhZ2VzKSA9PiB7XG4gICAgICBjb25zdCBmb3VuZCA9IGl0ZW1zLnZhbHVlLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSBpZCk7XG4gICAgICBpZiAoIWZvdW5kKSByZXR1cm47XG4gICAgICBmb3VuZC5pc1ZhbGlkID0gaXNWYWxpZDtcbiAgICAgIGZvdW5kLmVycm9yTWVzc2FnZXMgPSBlcnJvck1lc3NhZ2VzO1xuICAgIH0sXG4gICAgaXNEaXNhYmxlZCxcbiAgICBpc1JlYWRvbmx5LFxuICAgIGlzVmFsaWRhdGluZyxcbiAgICBpc1ZhbGlkOiBtb2RlbCxcbiAgICBpdGVtcyxcbiAgICB2YWxpZGF0ZU9uOiB0b1JlZihwcm9wcywgJ3ZhbGlkYXRlT24nKVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBlcnJvcnMsXG4gICAgaXNEaXNhYmxlZCxcbiAgICBpc1JlYWRvbmx5LFxuICAgIGlzVmFsaWRhdGluZyxcbiAgICBpc1ZhbGlkOiBtb2RlbCxcbiAgICBpdGVtcyxcbiAgICB2YWxpZGF0ZSxcbiAgICByZXNldCxcbiAgICByZXNldFZhbGlkYXRpb25cbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3JtKCkge1xuICByZXR1cm4gaW5qZWN0KEZvcm1LZXksIG51bGwpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybS5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VGb2N1c1Byb3BzIH0gZnJvbSBcIi4vZm9jdXMubWpzXCI7XG5pbXBvcnQgeyB1c2VGb3JtIH0gZnJvbSBcIi4vZm9ybS5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IHVzZVRvZ2dsZVNjb3BlIH0gZnJvbSBcIi4vdG9nZ2xlU2NvcGUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG5leHRUaWNrLCBvbkJlZm9yZU1vdW50LCBvbkJlZm9yZVVubW91bnQsIG9uTW91bnRlZCwgcmVmLCBzaGFsbG93UmVmLCB1bnJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlTmFtZSwgZ2V0VWlkLCBwcm9wc0ZhY3RvcnksIHdyYXBJbkFycmF5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZhbGlkYXRpb25Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGRpc2FibGVkOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIGVycm9yOiBCb29sZWFuLFxuICBlcnJvck1lc3NhZ2VzOiB7XG4gICAgdHlwZTogW0FycmF5LCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gIH0sXG4gIG1heEVycm9yczoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMVxuICB9LFxuICBuYW1lOiBTdHJpbmcsXG4gIGxhYmVsOiBTdHJpbmcsXG4gIHJlYWRvbmx5OiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIHJ1bGVzOiB7XG4gICAgdHlwZTogQXJyYXksXG4gICAgZGVmYXVsdDogKCkgPT4gW11cbiAgfSxcbiAgbW9kZWxWYWx1ZTogbnVsbCxcbiAgdmFsaWRhdGVPbjogU3RyaW5nLFxuICB2YWxpZGF0aW9uVmFsdWU6IG51bGwsXG4gIC4uLm1ha2VGb2N1c1Byb3BzKClcbn0sICd2YWxpZGF0aW9uJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlVmFsaWRhdGlvbihwcm9wcykge1xuICBsZXQgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZ2V0Q3VycmVudEluc3RhbmNlTmFtZSgpO1xuICBsZXQgaWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGdldFVpZCgpO1xuICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgY29uc3QgdmFsaWRhdGlvbk1vZGVsID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMudmFsaWRhdGlvblZhbHVlID09PSB1bmRlZmluZWQgPyBtb2RlbC52YWx1ZSA6IHByb3BzLnZhbGlkYXRpb25WYWx1ZSk7XG4gIGNvbnN0IGZvcm0gPSB1c2VGb3JtKCk7XG4gIGNvbnN0IGludGVybmFsRXJyb3JNZXNzYWdlcyA9IHJlZihbXSk7XG4gIGNvbnN0IGlzUHJpc3RpbmUgPSBzaGFsbG93UmVmKHRydWUpO1xuICBjb25zdCBpc0RpcnR5ID0gY29tcHV0ZWQoKCkgPT4gISEod3JhcEluQXJyYXkobW9kZWwudmFsdWUgPT09ICcnID8gbnVsbCA6IG1vZGVsLnZhbHVlKS5sZW5ndGggfHwgd3JhcEluQXJyYXkodmFsaWRhdGlvbk1vZGVsLnZhbHVlID09PSAnJyA/IG51bGwgOiB2YWxpZGF0aW9uTW9kZWwudmFsdWUpLmxlbmd0aCkpO1xuICBjb25zdCBpc0Rpc2FibGVkID0gY29tcHV0ZWQoKCkgPT4gISEocHJvcHMuZGlzYWJsZWQgPz8gZm9ybT8uaXNEaXNhYmxlZC52YWx1ZSkpO1xuICBjb25zdCBpc1JlYWRvbmx5ID0gY29tcHV0ZWQoKCkgPT4gISEocHJvcHMucmVhZG9ubHkgPz8gZm9ybT8uaXNSZWFkb25seS52YWx1ZSkpO1xuICBjb25zdCBlcnJvck1lc3NhZ2VzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy5lcnJvck1lc3NhZ2VzLmxlbmd0aCA/IHdyYXBJbkFycmF5KHByb3BzLmVycm9yTWVzc2FnZXMpLnNsaWNlKDAsIE1hdGgubWF4KDAsICtwcm9wcy5tYXhFcnJvcnMpKSA6IGludGVybmFsRXJyb3JNZXNzYWdlcy52YWx1ZTtcbiAgfSk7XG4gIGNvbnN0IHZhbGlkYXRlT24gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gKHByb3BzLnZhbGlkYXRlT24gPz8gZm9ybT8udmFsaWRhdGVPbi52YWx1ZSkgfHwgJ2lucHV0JztcbiAgICBpZiAodmFsdWUgPT09ICdsYXp5JykgdmFsdWUgPSAnaW5wdXQgbGF6eSc7XG4gICAgY29uc3Qgc2V0ID0gbmV3IFNldCh2YWx1ZT8uc3BsaXQoJyAnKSA/PyBbXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJsdXI6IHNldC5oYXMoJ2JsdXInKSB8fCBzZXQuaGFzKCdpbnB1dCcpLFxuICAgICAgaW5wdXQ6IHNldC5oYXMoJ2lucHV0JyksXG4gICAgICBzdWJtaXQ6IHNldC5oYXMoJ3N1Ym1pdCcpLFxuICAgICAgbGF6eTogc2V0LmhhcygnbGF6eScpXG4gICAgfTtcbiAgfSk7XG4gIGNvbnN0IGlzVmFsaWQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHByb3BzLmVycm9yIHx8IHByb3BzLmVycm9yTWVzc2FnZXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFwcm9wcy5ydWxlcy5sZW5ndGgpIHJldHVybiB0cnVlO1xuICAgIGlmIChpc1ByaXN0aW5lLnZhbHVlKSB7XG4gICAgICByZXR1cm4gaW50ZXJuYWxFcnJvck1lc3NhZ2VzLnZhbHVlLmxlbmd0aCB8fCB2YWxpZGF0ZU9uLnZhbHVlLmxhenkgPyBudWxsIDogdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICFpbnRlcm5hbEVycm9yTWVzc2FnZXMudmFsdWUubGVuZ3RoO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGlzVmFsaWRhdGluZyA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICBjb25zdCB2YWxpZGF0aW9uQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgW2Ake25hbWV9LS1lcnJvcmBdOiBpc1ZhbGlkLnZhbHVlID09PSBmYWxzZSxcbiAgICAgIFtgJHtuYW1lfS0tZGlydHlgXTogaXNEaXJ0eS52YWx1ZSxcbiAgICAgIFtgJHtuYW1lfS0tZGlzYWJsZWRgXTogaXNEaXNhYmxlZC52YWx1ZSxcbiAgICAgIFtgJHtuYW1lfS0tcmVhZG9ubHlgXTogaXNSZWFkb25seS52YWx1ZVxuICAgIH07XG4gIH0pO1xuICBjb25zdCB1aWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5uYW1lID8/IHVucmVmKGlkKSk7XG4gIG9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgIGZvcm0/LnJlZ2lzdGVyKHtcbiAgICAgIGlkOiB1aWQudmFsdWUsXG4gICAgICB2YWxpZGF0ZSxcbiAgICAgIHJlc2V0LFxuICAgICAgcmVzZXRWYWxpZGF0aW9uXG4gICAgfSk7XG4gIH0pO1xuICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgIGZvcm0/LnVucmVnaXN0ZXIodWlkLnZhbHVlKTtcbiAgfSk7XG4gIG9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgaWYgKCF2YWxpZGF0ZU9uLnZhbHVlLmxhenkpIHtcbiAgICAgIGF3YWl0IHZhbGlkYXRlKHRydWUpO1xuICAgIH1cbiAgICBmb3JtPy51cGRhdGUodWlkLnZhbHVlLCBpc1ZhbGlkLnZhbHVlLCBlcnJvck1lc3NhZ2VzLnZhbHVlKTtcbiAgfSk7XG4gIHVzZVRvZ2dsZVNjb3BlKCgpID0+IHZhbGlkYXRlT24udmFsdWUuaW5wdXQsICgpID0+IHtcbiAgICB3YXRjaCh2YWxpZGF0aW9uTW9kZWwsICgpID0+IHtcbiAgICAgIGlmICh2YWxpZGF0aW9uTW9kZWwudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICB2YWxpZGF0ZSgpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wcy5mb2N1c2VkKSB7XG4gICAgICAgIGNvbnN0IHVud2F0Y2ggPSB3YXRjaCgoKSA9PiBwcm9wcy5mb2N1c2VkLCB2YWwgPT4ge1xuICAgICAgICAgIGlmICghdmFsKSB2YWxpZGF0ZSgpO1xuICAgICAgICAgIHVud2F0Y2goKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICB1c2VUb2dnbGVTY29wZSgoKSA9PiB2YWxpZGF0ZU9uLnZhbHVlLmJsdXIsICgpID0+IHtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5mb2N1c2VkLCB2YWwgPT4ge1xuICAgICAgaWYgKCF2YWwpIHZhbGlkYXRlKCk7XG4gICAgfSk7XG4gIH0pO1xuICB3YXRjaChpc1ZhbGlkLCAoKSA9PiB7XG4gICAgZm9ybT8udXBkYXRlKHVpZC52YWx1ZSwgaXNWYWxpZC52YWx1ZSwgZXJyb3JNZXNzYWdlcy52YWx1ZSk7XG4gIH0pO1xuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBtb2RlbC52YWx1ZSA9IG51bGw7XG4gICAgbmV4dFRpY2socmVzZXRWYWxpZGF0aW9uKTtcbiAgfVxuICBmdW5jdGlvbiByZXNldFZhbGlkYXRpb24oKSB7XG4gICAgaXNQcmlzdGluZS52YWx1ZSA9IHRydWU7XG4gICAgaWYgKCF2YWxpZGF0ZU9uLnZhbHVlLmxhenkpIHtcbiAgICAgIHZhbGlkYXRlKHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbEVycm9yTWVzc2FnZXMudmFsdWUgPSBbXTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gICAgbGV0IHNpbGVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGlzVmFsaWRhdGluZy52YWx1ZSA9IHRydWU7XG4gICAgZm9yIChjb25zdCBydWxlIG9mIHByb3BzLnJ1bGVzKSB7XG4gICAgICBpZiAocmVzdWx0cy5sZW5ndGggPj0gKyhwcm9wcy5tYXhFcnJvcnMgPz8gMSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjb25zdCBoYW5kbGVyID0gdHlwZW9mIHJ1bGUgPT09ICdmdW5jdGlvbicgPyBydWxlIDogKCkgPT4gcnVsZTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGhhbmRsZXIodmFsaWRhdGlvbk1vZGVsLnZhbHVlKTtcbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIGNvbnRpbnVlO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UgJiYgdHlwZW9mIHJlc3VsdCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKGAke3Jlc3VsdH0gaXMgbm90IGEgdmFsaWQgdmFsdWUuIFJ1bGUgZnVuY3Rpb25zIG11c3QgcmV0dXJuIGJvb2xlYW4gdHJ1ZSBvciBhIHN0cmluZy5gKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHRzLnB1c2gocmVzdWx0IHx8ICcnKTtcbiAgICB9XG4gICAgaW50ZXJuYWxFcnJvck1lc3NhZ2VzLnZhbHVlID0gcmVzdWx0cztcbiAgICBpc1ZhbGlkYXRpbmcudmFsdWUgPSBmYWxzZTtcbiAgICBpc1ByaXN0aW5lLnZhbHVlID0gc2lsZW50O1xuICAgIHJldHVybiBpbnRlcm5hbEVycm9yTWVzc2FnZXMudmFsdWU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBlcnJvck1lc3NhZ2VzLFxuICAgIGlzRGlydHksXG4gICAgaXNEaXNhYmxlZCxcbiAgICBpc1JlYWRvbmx5LFxuICAgIGlzUHJpc3RpbmUsXG4gICAgaXNWYWxpZCxcbiAgICBpc1ZhbGlkYXRpbmcsXG4gICAgcmVzZXQsXG4gICAgcmVzZXRWYWxpZGF0aW9uLFxuICAgIHZhbGlkYXRlLFxuICAgIHZhbGlkYXRpb25DbGFzc2VzXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0aW9uLm1qcy5tYXAiLCJpbXBvcnQgeyByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVklucHV0LmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyB1c2VJbnB1dEljb24gfSBmcm9tIFwiLi9JbnB1dEljb24ubWpzXCI7XG5pbXBvcnQgeyBWTWVzc2FnZXMgfSBmcm9tIFwiLi4vVk1lc3NhZ2VzL1ZNZXNzYWdlcy5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzLCB1c2VEZW5zaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZhbGlkYXRpb25Qcm9wcywgdXNlVmFsaWRhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy92YWxpZGF0aW9uLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IEV2ZW50UHJvcCwgZ2VuZXJpY0NvbXBvbmVudCwgZ2V0VWlkLCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWSW5wdXRQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGlkOiBTdHJpbmcsXG4gIGFwcGVuZEljb246IEljb25WYWx1ZSxcbiAgY2VudGVyQWZmaXg6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgcHJlcGVuZEljb246IEljb25WYWx1ZSxcbiAgaGlkZURldGFpbHM6IFtCb29sZWFuLCBTdHJpbmddLFxuICBoaW50OiBTdHJpbmcsXG4gIHBlcnNpc3RlbnRIaW50OiBCb29sZWFuLFxuICBtZXNzYWdlczoge1xuICAgIHR5cGU6IFtBcnJheSwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICB9LFxuICBkaXJlY3Rpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2hvcml6b250YWwnLFxuICAgIHZhbGlkYXRvcjogdiA9PiBbJ2hvcml6b250YWwnLCAndmVydGljYWwnXS5pbmNsdWRlcyh2KVxuICB9LFxuICAnb25DbGljazpwcmVwZW5kJzogRXZlbnRQcm9wKCksXG4gICdvbkNsaWNrOmFwcGVuZCc6IEV2ZW50UHJvcCgpLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURlbnNpdHlQcm9wcygpLFxuICAuLi5tYWtlVmFsaWRhdGlvblByb3BzKClcbn0sICdWSW5wdXQnKTtcbmV4cG9ydCBjb25zdCBWSW5wdXQgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVklucHV0JyxcbiAgcHJvcHM6IHtcbiAgICAuLi5tYWtlVklucHV0UHJvcHMoKVxuICB9LFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbCA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGF0dHJzLFxuICAgICAgc2xvdHMsXG4gICAgICBlbWl0XG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgZGVuc2l0eUNsYXNzZXNcbiAgICB9ID0gdXNlRGVuc2l0eShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcnRsQ2xhc3Nlc1xuICAgIH0gPSB1c2VSdGwoKTtcbiAgICBjb25zdCB7XG4gICAgICBJbnB1dEljb25cbiAgICB9ID0gdXNlSW5wdXRJY29uKHByb3BzKTtcbiAgICBjb25zdCB1aWQgPSBnZXRVaWQoKTtcbiAgICBjb25zdCBpZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmlkIHx8IGBpbnB1dC0ke3VpZH1gKTtcbiAgICBjb25zdCBtZXNzYWdlc0lkID0gY29tcHV0ZWQoKCkgPT4gYCR7aWQudmFsdWV9LW1lc3NhZ2VzYCk7XG4gICAgY29uc3Qge1xuICAgICAgZXJyb3JNZXNzYWdlcyxcbiAgICAgIGlzRGlydHksXG4gICAgICBpc0Rpc2FibGVkLFxuICAgICAgaXNSZWFkb25seSxcbiAgICAgIGlzUHJpc3RpbmUsXG4gICAgICBpc1ZhbGlkLFxuICAgICAgaXNWYWxpZGF0aW5nLFxuICAgICAgcmVzZXQsXG4gICAgICByZXNldFZhbGlkYXRpb24sXG4gICAgICB2YWxpZGF0ZSxcbiAgICAgIHZhbGlkYXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZVZhbGlkYXRpb24ocHJvcHMsICd2LWlucHV0JywgaWQpO1xuICAgIGNvbnN0IHNsb3RQcm9wcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICBpZCxcbiAgICAgIG1lc3NhZ2VzSWQsXG4gICAgICBpc0RpcnR5LFxuICAgICAgaXNEaXNhYmxlZCxcbiAgICAgIGlzUmVhZG9ubHksXG4gICAgICBpc1ByaXN0aW5lLFxuICAgICAgaXNWYWxpZCxcbiAgICAgIGlzVmFsaWRhdGluZyxcbiAgICAgIHJlc2V0LFxuICAgICAgcmVzZXRWYWxpZGF0aW9uLFxuICAgICAgdmFsaWRhdGVcbiAgICB9KSk7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMuZXJyb3JNZXNzYWdlcz8ubGVuZ3RoIHx8ICFpc1ByaXN0aW5lLnZhbHVlICYmIGVycm9yTWVzc2FnZXMudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBlcnJvck1lc3NhZ2VzLnZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChwcm9wcy5oaW50ICYmIChwcm9wcy5wZXJzaXN0ZW50SGludCB8fCBwcm9wcy5mb2N1c2VkKSkge1xuICAgICAgICByZXR1cm4gcHJvcHMuaGludDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5tZXNzYWdlcztcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaGFzUHJlcGVuZCA9ICEhKHNsb3RzLnByZXBlbmQgfHwgcHJvcHMucHJlcGVuZEljb24pO1xuICAgICAgY29uc3QgaGFzQXBwZW5kID0gISEoc2xvdHMuYXBwZW5kIHx8IHByb3BzLmFwcGVuZEljb24pO1xuICAgICAgY29uc3QgaGFzTWVzc2FnZXMgPSBtZXNzYWdlcy52YWx1ZS5sZW5ndGggPiAwO1xuICAgICAgY29uc3QgaGFzRGV0YWlscyA9ICFwcm9wcy5oaWRlRGV0YWlscyB8fCBwcm9wcy5oaWRlRGV0YWlscyA9PT0gJ2F1dG8nICYmIChoYXNNZXNzYWdlcyB8fCAhIXNsb3RzLmRldGFpbHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWlucHV0JywgYHYtaW5wdXQtLSR7cHJvcHMuZGlyZWN0aW9ufWAsIHtcbiAgICAgICAgICAndi1pbnB1dC0tY2VudGVyLWFmZml4JzogcHJvcHMuY2VudGVyQWZmaXhcbiAgICAgICAgfSwgZGVuc2l0eUNsYXNzZXMudmFsdWUsIHJ0bENsYXNzZXMudmFsdWUsIHZhbGlkYXRpb25DbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIFtoYXNQcmVwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwicHJlcGVuZFwiLFxuICAgICAgICBcImNsYXNzXCI6IFwidi1pbnB1dF9fcHJlcGVuZFwiXG4gICAgICB9LCBbc2xvdHMucHJlcGVuZD8uKHNsb3RQcm9wcy52YWx1ZSksIHByb3BzLnByZXBlbmRJY29uICYmIF9jcmVhdGVWTm9kZShJbnB1dEljb24sIHtcbiAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWljb25cIixcbiAgICAgICAgXCJuYW1lXCI6IFwicHJlcGVuZFwiXG4gICAgICB9LCBudWxsKV0pLCBzbG90cy5kZWZhdWx0ICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWlucHV0X19jb250cm9sXCJcbiAgICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oc2xvdFByb3BzLnZhbHVlKV0pLCBoYXNBcHBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJrZXlcIjogXCJhcHBlbmRcIixcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtaW5wdXRfX2FwcGVuZFwiXG4gICAgICB9LCBbcHJvcHMuYXBwZW5kSWNvbiAmJiBfY3JlYXRlVk5vZGUoSW5wdXRJY29uLCB7XG4gICAgICAgIFwia2V5XCI6IFwiYXBwZW5kLWljb25cIixcbiAgICAgICAgXCJuYW1lXCI6IFwiYXBwZW5kXCJcbiAgICAgIH0sIG51bGwpLCBzbG90cy5hcHBlbmQ/LihzbG90UHJvcHMudmFsdWUpXSksIGhhc0RldGFpbHMgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtaW5wdXRfX2RldGFpbHNcIlxuICAgICAgfSwgW19jcmVhdGVWTm9kZShWTWVzc2FnZXMsIHtcbiAgICAgICAgXCJpZFwiOiBtZXNzYWdlc0lkLnZhbHVlLFxuICAgICAgICBcImFjdGl2ZVwiOiBoYXNNZXNzYWdlcyxcbiAgICAgICAgXCJtZXNzYWdlc1wiOiBtZXNzYWdlcy52YWx1ZVxuICAgICAgfSwge1xuICAgICAgICBtZXNzYWdlOiBzbG90cy5tZXNzYWdlXG4gICAgICB9KSwgc2xvdHMuZGV0YWlscz8uKHNsb3RQcm9wcy52YWx1ZSldKV0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXNldCxcbiAgICAgIHJlc2V0VmFsaWRhdGlvbixcbiAgICAgIHZhbGlkYXRlXG4gICAgfTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WSW5wdXQubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQ2hlY2tib3guY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IG1ha2VWQ2hlY2tib3hCdG5Qcm9wcywgVkNoZWNrYm94QnRuIH0gZnJvbSBcIi4vVkNoZWNrYm94QnRuLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZJbnB1dFByb3BzLCBWSW5wdXQgfSBmcm9tIFwiLi4vVklucHV0L1ZJbnB1dC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUZvY3VzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvY3VzLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBmaWx0ZXJJbnB1dEF0dHJzLCBnZW5lcmljQ29tcG9uZW50LCBnZXRVaWQsIG9taXQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZDaGVja2JveFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgLi4ubWFrZVZJbnB1dFByb3BzKCksXG4gIC4uLm9taXQobWFrZVZDaGVja2JveEJ0blByb3BzKCksIFsnaW5saW5lJ10pXG59LCAnVkNoZWNrYm94Jyk7XG5leHBvcnQgY29uc3QgVkNoZWNrYm94ID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZDaGVja2JveCcsXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiBtYWtlVkNoZWNrYm94UHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWx1ZSA9PiB0cnVlLFxuICAgICd1cGRhdGU6Zm9jdXNlZCc6IGZvY3VzZWQgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBhdHRycyxcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgbW9kZWwgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgY29uc3Qge1xuICAgICAgaXNGb2N1c2VkLFxuICAgICAgZm9jdXMsXG4gICAgICBibHVyXG4gICAgfSA9IHVzZUZvY3VzKHByb3BzKTtcbiAgICBjb25zdCB1aWQgPSBnZXRVaWQoKTtcbiAgICBjb25zdCBpZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmlkIHx8IGBjaGVja2JveC0ke3VpZH1gKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgW3Jvb3RBdHRycywgY29udHJvbEF0dHJzXSA9IGZpbHRlcklucHV0QXR0cnMoYXR0cnMpO1xuICAgICAgY29uc3QgW2lucHV0UHJvcHMsIF8xXSA9IFZJbnB1dC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICBjb25zdCBbY2hlY2tib3hQcm9wcywgXzJdID0gVkNoZWNrYm94QnRuLmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVklucHV0LCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWNoZWNrYm94JywgcHJvcHMuY2xhc3NdXG4gICAgICB9LCByb290QXR0cnMsIGlucHV0UHJvcHMsIHtcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IG1vZGVsLnZhbHVlID0gJGV2ZW50LFxuICAgICAgICBcImlkXCI6IGlkLnZhbHVlLFxuICAgICAgICBcImZvY3VzZWRcIjogaXNGb2N1c2VkLnZhbHVlLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9KSwge1xuICAgICAgICAuLi5zbG90cyxcbiAgICAgICAgZGVmYXVsdDogX3JlZjIgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG1lc3NhZ2VzSWQsXG4gICAgICAgICAgICBpc0Rpc2FibGVkLFxuICAgICAgICAgICAgaXNSZWFkb25seVxuICAgICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZDaGVja2JveEJ0biwgX21lcmdlUHJvcHMoY2hlY2tib3hQcm9wcywge1xuICAgICAgICAgICAgXCJpZFwiOiBpZC52YWx1ZSxcbiAgICAgICAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBtZXNzYWdlc0lkLnZhbHVlLFxuICAgICAgICAgICAgXCJkaXNhYmxlZFwiOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgICAgICAgXCJyZWFkb25seVwiOiBpc1JlYWRvbmx5LnZhbHVlXG4gICAgICAgICAgfSwgY29udHJvbEF0dHJzLCB7XG4gICAgICAgICAgICBcIm1vZGVsVmFsdWVcIjogbW9kZWwudmFsdWUsXG4gICAgICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IG1vZGVsLnZhbHVlID0gJGV2ZW50LFxuICAgICAgICAgICAgXCJvbkZvY3VzXCI6IGZvY3VzLFxuICAgICAgICAgICAgXCJvbkJsdXJcIjogYmx1clxuICAgICAgICAgIH0pLCBzbG90cyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ2hlY2tib3gubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQXZhdGFyLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gXCIuLi9WSWNvbi9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZJbWcgfSBmcm9tIFwiLi4vVkltZy9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzLCB1c2VEZW5zaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlU2l6ZVByb3BzLCB1c2VTaXplIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NpemUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjtcbmltcG9ydCB7IGdlbk92ZXJsYXlzLCBtYWtlVmFyaWFudFByb3BzLCB1c2VWYXJpYW50IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3ZhcmlhbnQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkF2YXRhclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgc3RhcnQ6IEJvb2xlYW4sXG4gIGVuZDogQm9vbGVhbixcbiAgaWNvbjogSWNvblZhbHVlLFxuICBpbWFnZTogU3RyaW5nLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURlbnNpdHlQcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VTaXplUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKCksXG4gIC4uLm1ha2VWYXJpYW50UHJvcHMoe1xuICAgIHZhcmlhbnQ6ICdmbGF0J1xuICB9KVxufSwgJ1ZBdmF0YXInKTtcbmV4cG9ydCBjb25zdCBWQXZhdGFyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZBdmF0YXInLFxuICBwcm9wczogbWFrZVZBdmF0YXJQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbG9yQ2xhc3NlcyxcbiAgICAgIGNvbG9yU3R5bGVzLFxuICAgICAgdmFyaWFudENsYXNzZXNcbiAgICB9ID0gdXNlVmFyaWFudChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGVuc2l0eUNsYXNzZXNcbiAgICB9ID0gdXNlRGVuc2l0eShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgc2l6ZUNsYXNzZXMsXG4gICAgICBzaXplU3R5bGVzXG4gICAgfSA9IHVzZVNpemUocHJvcHMpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1hdmF0YXInLCB7XG4gICAgICAgICd2LWF2YXRhci0tc3RhcnQnOiBwcm9wcy5zdGFydCxcbiAgICAgICAgJ3YtYXZhdGFyLS1lbmQnOiBwcm9wcy5lbmRcbiAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgY29sb3JDbGFzc2VzLnZhbHVlLCBkZW5zaXR5Q2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHNpemVDbGFzc2VzLnZhbHVlLCB2YXJpYW50Q2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBbY29sb3JTdHlsZXMudmFsdWUsIHNpemVTdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtwcm9wcy5pbWFnZSA/IF9jcmVhdGVWTm9kZShWSW1nLCB7XG4gICAgICAgIFwia2V5XCI6IFwiaW1hZ2VcIixcbiAgICAgICAgXCJzcmNcIjogcHJvcHMuaW1hZ2UsXG4gICAgICAgIFwiYWx0XCI6IFwiXCIsXG4gICAgICAgIFwiY292ZXJcIjogdHJ1ZVxuICAgICAgfSwgbnVsbCkgOiBwcm9wcy5pY29uID8gX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgIFwia2V5XCI6IFwiaWNvblwiLFxuICAgICAgICBcImljb25cIjogcHJvcHMuaWNvblxuICAgICAgfSwgbnVsbCkgOiBzbG90cy5kZWZhdWx0Py4oKSwgZ2VuT3ZlcmxheXMoZmFsc2UsICd2LWF2YXRhcicpXVxuICAgIH0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkF2YXRhci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZDaGlwR3JvdXAuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUdyb3VwUHJvcHMsIHVzZUdyb3VwIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2dyb3VwLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVmFyaWFudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3ZhcmlhbnQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZGVlcEVxdWFsLCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IFZDaGlwR3JvdXBTeW1ib2wgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5OnYtY2hpcC1ncm91cCcpO1xuZXhwb3J0IGNvbnN0IG1ha2VWQ2hpcEdyb3VwUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjb2x1bW46IEJvb2xlYW4sXG4gIGZpbHRlcjogQm9vbGVhbixcbiAgdmFsdWVDb21wYXJhdG9yOiB7XG4gICAgdHlwZTogRnVuY3Rpb24sXG4gICAgZGVmYXVsdDogZGVlcEVxdWFsXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlR3JvdXBQcm9wcyh7XG4gICAgc2VsZWN0ZWRDbGFzczogJ3YtY2hpcC0tc2VsZWN0ZWQnXG4gIH0pLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKSxcbiAgLi4ubWFrZVZhcmlhbnRQcm9wcyh7XG4gICAgdmFyaWFudDogJ3RvbmFsJ1xuICB9KVxufSwgJ1ZDaGlwR3JvdXAnKTtcbmV4cG9ydCBjb25zdCBWQ2hpcEdyb3VwID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZDaGlwR3JvdXAnLFxuICBwcm9wczogbWFrZVZDaGlwR3JvdXBQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBpc1NlbGVjdGVkLFxuICAgICAgc2VsZWN0LFxuICAgICAgbmV4dCxcbiAgICAgIHByZXYsXG4gICAgICBzZWxlY3RlZFxuICAgIH0gPSB1c2VHcm91cChwcm9wcywgVkNoaXBHcm91cFN5bWJvbCk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZDaGlwOiB7XG4gICAgICAgIGNvbG9yOiB0b1JlZihwcm9wcywgJ2NvbG9yJyksXG4gICAgICAgIGRpc2FibGVkOiB0b1JlZihwcm9wcywgJ2Rpc2FibGVkJyksXG4gICAgICAgIGZpbHRlcjogdG9SZWYocHJvcHMsICdmaWx0ZXInKSxcbiAgICAgICAgdmFyaWFudDogdG9SZWYocHJvcHMsICd2YXJpYW50JylcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtY2hpcC1ncm91cCcsIHtcbiAgICAgICAgJ3YtY2hpcC1ncm91cC0tY29sdW1uJzogcHJvcHMuY29sdW1uXG4gICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMuZGVmYXVsdD8uKHtcbiAgICAgICAgaXNTZWxlY3RlZCxcbiAgICAgICAgc2VsZWN0LFxuICAgICAgICBuZXh0LFxuICAgICAgICBwcmV2LFxuICAgICAgICBzZWxlY3RlZDogc2VsZWN0ZWQudmFsdWVcbiAgICAgIH0pXVxuICAgIH0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNoaXBHcm91cC5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHZTaG93IGFzIF92U2hvdywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLyogZXNsaW50LWRpc2FibGUgY29tcGxleGl0eSAqL1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZDaGlwLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWRXhwYW5kWFRyYW5zaXRpb24gfSBmcm9tIFwiLi4vdHJhbnNpdGlvbnMvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWQXZhdGFyIH0gZnJvbSBcIi4uL1ZBdmF0YXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWQ2hpcEdyb3VwU3ltYm9sIH0gZnJvbSBcIi4uL1ZDaGlwR3JvdXAvVkNoaXBHcm91cC5tanNcIjtcbmltcG9ydCB7IFZEZWZhdWx0c1Byb3ZpZGVyIH0gZnJvbSBcIi4uL1ZEZWZhdWx0c1Byb3ZpZGVyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkljb24gfSBmcm9tIFwiLi4vVkljb24vaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQm9yZGVyUHJvcHMsIHVzZUJvcmRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ib3JkZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURlbnNpdHlQcm9wcywgdXNlRGVuc2l0eSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZW5zaXR5Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUdyb3VwSXRlbVByb3BzLCB1c2VHcm91cEl0ZW0gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZ3JvdXAubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3V0ZXJQcm9wcywgdXNlTGluayB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3V0ZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlU2l6ZVByb3BzLCB1c2VTaXplIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NpemUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjtcbmltcG9ydCB7IGdlbk92ZXJsYXlzLCBtYWtlVmFyaWFudFByb3BzLCB1c2VWYXJpYW50IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3ZhcmlhbnQubWpzXCI7IC8vIERpcmVjdGl2ZXNcbmltcG9ydCB7IFJpcHBsZSB9IGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL3JpcHBsZS9pbmRleC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBFdmVudFByb3AsIGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWQ2hpcFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZW5kQXZhdGFyOiBTdHJpbmcsXG4gIGFwcGVuZEljb246IEljb25WYWx1ZSxcbiAgY2xvc2FibGU6IEJvb2xlYW4sXG4gIGNsb3NlSWNvbjoge1xuICAgIHR5cGU6IEljb25WYWx1ZSxcbiAgICBkZWZhdWx0OiAnJGRlbGV0ZSdcbiAgfSxcbiAgY2xvc2VMYWJlbDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkuY2xvc2UnXG4gIH0sXG4gIGRyYWdnYWJsZTogQm9vbGVhbixcbiAgZmlsdGVyOiBCb29sZWFuLFxuICBmaWx0ZXJJY29uOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICckY29tcGxldGUnXG4gIH0sXG4gIGxhYmVsOiBCb29sZWFuLFxuICBsaW5rOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgfSxcbiAgcGlsbDogQm9vbGVhbixcbiAgcHJlcGVuZEF2YXRhcjogU3RyaW5nLFxuICBwcmVwZW5kSWNvbjogSWNvblZhbHVlLFxuICByaXBwbGU6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgT2JqZWN0XSxcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIHRleHQ6IFN0cmluZyxcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBvbkNsaWNrOiBFdmVudFByb3AoKSxcbiAgb25DbGlja09uY2U6IEV2ZW50UHJvcCgpLFxuICAuLi5tYWtlQm9yZGVyUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKCksXG4gIC4uLm1ha2VHcm91cEl0ZW1Qcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VSb3V0ZXJQcm9wcygpLFxuICAuLi5tYWtlU2l6ZVByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcyh7XG4gICAgdGFnOiAnc3BhbidcbiAgfSksXG4gIC4uLm1ha2VUaGVtZVByb3BzKCksXG4gIC4uLm1ha2VWYXJpYW50UHJvcHMoe1xuICAgIHZhcmlhbnQ6ICd0b25hbCdcbiAgfSlcbn0sICdWQ2hpcCcpO1xuZXhwb3J0IGNvbnN0IFZDaGlwID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZDaGlwJyxcbiAgZGlyZWN0aXZlczoge1xuICAgIFJpcHBsZVxuICB9LFxuICBwcm9wczogbWFrZVZDaGlwUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAnY2xpY2s6Y2xvc2UnOiBlID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZSxcbiAgICAnZ3JvdXA6c2VsZWN0ZWQnOiB2YWwgPT4gdHJ1ZSxcbiAgICBjbGljazogZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGF0dHJzLFxuICAgICAgZW1pdCxcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdFxuICAgIH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCB7XG4gICAgICBib3JkZXJDbGFzc2VzXG4gICAgfSA9IHVzZUJvcmRlcihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgY29sb3JDbGFzc2VzLFxuICAgICAgY29sb3JTdHlsZXMsXG4gICAgICB2YXJpYW50Q2xhc3Nlc1xuICAgIH0gPSB1c2VWYXJpYW50KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBkZW5zaXR5Q2xhc3Nlc1xuICAgIH0gPSB1c2VEZW5zaXR5KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgc2l6ZUNsYXNzZXNcbiAgICB9ID0gdXNlU2l6ZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgY29uc3QgZ3JvdXAgPSB1c2VHcm91cEl0ZW0ocHJvcHMsIFZDaGlwR3JvdXBTeW1ib2wsIGZhbHNlKTtcbiAgICBjb25zdCBsaW5rID0gdXNlTGluayhwcm9wcywgYXR0cnMpO1xuICAgIGNvbnN0IGlzTGluayA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmxpbmsgIT09IGZhbHNlICYmIGxpbmsuaXNMaW5rLnZhbHVlKTtcbiAgICBjb25zdCBpc0NsaWNrYWJsZSA9IGNvbXB1dGVkKCgpID0+ICFwcm9wcy5kaXNhYmxlZCAmJiBwcm9wcy5saW5rICE9PSBmYWxzZSAmJiAoISFncm91cCB8fCBwcm9wcy5saW5rIHx8IGxpbmsuaXNDbGlja2FibGUudmFsdWUpKTtcbiAgICBjb25zdCBjbG9zZVByb3BzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgICdhcmlhLWxhYmVsJzogdChwcm9wcy5jbG9zZUxhYmVsKSxcbiAgICAgIG9uQ2xpY2soZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBpc0FjdGl2ZS52YWx1ZSA9IGZhbHNlO1xuICAgICAgICBlbWl0KCdjbGljazpjbG9zZScsIGUpO1xuICAgICAgfVxuICAgIH0pKTtcbiAgICBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgIGVtaXQoJ2NsaWNrJywgZSk7XG4gICAgICBpZiAoIWlzQ2xpY2thYmxlLnZhbHVlKSByZXR1cm47XG4gICAgICBsaW5rLm5hdmlnYXRlPy4oZSk7XG4gICAgICBncm91cD8udG9nZ2xlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXkgPT09ICcgJykge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uQ2xpY2soZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBUYWcgPSBsaW5rLmlzTGluay52YWx1ZSA/ICdhJyA6IHByb3BzLnRhZztcbiAgICAgIGNvbnN0IGhhc0FwcGVuZE1lZGlhID0gISEocHJvcHMuYXBwZW5kSWNvbiB8fCBwcm9wcy5hcHBlbmRBdmF0YXIpO1xuICAgICAgY29uc3QgaGFzQXBwZW5kID0gISEoaGFzQXBwZW5kTWVkaWEgfHwgc2xvdHMuYXBwZW5kKTtcbiAgICAgIGNvbnN0IGhhc0Nsb3NlID0gISEoc2xvdHMuY2xvc2UgfHwgcHJvcHMuY2xvc2FibGUpO1xuICAgICAgY29uc3QgaGFzRmlsdGVyID0gISEoc2xvdHMuZmlsdGVyIHx8IHByb3BzLmZpbHRlcikgJiYgZ3JvdXA7XG4gICAgICBjb25zdCBoYXNQcmVwZW5kTWVkaWEgPSAhIShwcm9wcy5wcmVwZW5kSWNvbiB8fCBwcm9wcy5wcmVwZW5kQXZhdGFyKTtcbiAgICAgIGNvbnN0IGhhc1ByZXBlbmQgPSAhIShoYXNQcmVwZW5kTWVkaWEgfHwgc2xvdHMucHJlcGVuZCk7XG4gICAgICBjb25zdCBoYXNDb2xvciA9ICFncm91cCB8fCBncm91cC5pc1NlbGVjdGVkLnZhbHVlO1xuICAgICAgcmV0dXJuIGlzQWN0aXZlLnZhbHVlICYmIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoVGFnLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWNoaXAnLCB7XG4gICAgICAgICAgJ3YtY2hpcC0tZGlzYWJsZWQnOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICAndi1jaGlwLS1sYWJlbCc6IHByb3BzLmxhYmVsLFxuICAgICAgICAgICd2LWNoaXAtLWxpbmsnOiBpc0NsaWNrYWJsZS52YWx1ZSxcbiAgICAgICAgICAndi1jaGlwLS1maWx0ZXInOiBoYXNGaWx0ZXIsXG4gICAgICAgICAgJ3YtY2hpcC0tcGlsbCc6IHByb3BzLnBpbGxcbiAgICAgICAgfSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBib3JkZXJDbGFzc2VzLnZhbHVlLCBoYXNDb2xvciA/IGNvbG9yQ2xhc3Nlcy52YWx1ZSA6IHVuZGVmaW5lZCwgZGVuc2l0eUNsYXNzZXMudmFsdWUsIGVsZXZhdGlvbkNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCBzaXplQ2xhc3Nlcy52YWx1ZSwgdmFyaWFudENsYXNzZXMudmFsdWUsIGdyb3VwPy5zZWxlY3RlZENsYXNzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW2hhc0NvbG9yID8gY29sb3JTdHlsZXMudmFsdWUgOiB1bmRlZmluZWQsIHByb3BzLnN0eWxlXSxcbiAgICAgICAgXCJkaXNhYmxlZFwiOiBwcm9wcy5kaXNhYmxlZCB8fCB1bmRlZmluZWQsXG4gICAgICAgIFwiZHJhZ2dhYmxlXCI6IHByb3BzLmRyYWdnYWJsZSxcbiAgICAgICAgXCJocmVmXCI6IGxpbmsuaHJlZi52YWx1ZSxcbiAgICAgICAgXCJ0YWJpbmRleFwiOiBpc0NsaWNrYWJsZS52YWx1ZSA/IDAgOiB1bmRlZmluZWQsXG4gICAgICAgIFwib25DbGlja1wiOiBvbkNsaWNrLFxuICAgICAgICBcIm9uS2V5ZG93blwiOiBpc0NsaWNrYWJsZS52YWx1ZSAmJiAhaXNMaW5rLnZhbHVlICYmIG9uS2V5RG93blxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbZ2VuT3ZlcmxheXMoaXNDbGlja2FibGUudmFsdWUsICd2LWNoaXAnKSwgaGFzRmlsdGVyICYmIF9jcmVhdGVWTm9kZShWRXhwYW5kWFRyYW5zaXRpb24sIHtcbiAgICAgICAgICBcImtleVwiOiBcImZpbHRlclwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwidi1jaGlwX19maWx0ZXJcIlxuICAgICAgICAgIH0sIFshc2xvdHMuZmlsdGVyID8gX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgICBcImtleVwiOiBcImZpbHRlci1pY29uXCIsXG4gICAgICAgICAgICBcImljb25cIjogcHJvcHMuZmlsdGVySWNvblxuICAgICAgICAgIH0sIG51bGwpIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgICBcImtleVwiOiBcImZpbHRlci1kZWZhdWx0c1wiLFxuICAgICAgICAgICAgXCJkaXNhYmxlZFwiOiAhcHJvcHMuZmlsdGVySWNvbixcbiAgICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgICBWSWNvbjoge1xuICAgICAgICAgICAgICAgIGljb246IHByb3BzLmZpbHRlckljb25cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHNsb3RzLmZpbHRlcildKSwgW1tfdlNob3csIGdyb3VwLmlzU2VsZWN0ZWQudmFsdWVdXSldXG4gICAgICAgIH0pLCBoYXNQcmVwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kXCIsXG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtY2hpcF9fcHJlcGVuZFwiXG4gICAgICAgIH0sIFshc2xvdHMucHJlcGVuZCA/IF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtwcm9wcy5wcmVwZW5kSWNvbiAmJiBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICBcImtleVwiOiBcInByZXBlbmQtaWNvblwiLFxuICAgICAgICAgIFwiaWNvblwiOiBwcm9wcy5wcmVwZW5kSWNvbixcbiAgICAgICAgICBcInN0YXJ0XCI6IHRydWVcbiAgICAgICAgfSwgbnVsbCksIHByb3BzLnByZXBlbmRBdmF0YXIgJiYgX2NyZWF0ZVZOb2RlKFZBdmF0YXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcInByZXBlbmQtYXZhdGFyXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBwcm9wcy5wcmVwZW5kQXZhdGFyLFxuICAgICAgICAgIFwic3RhcnRcIjogdHJ1ZVxuICAgICAgICB9LCBudWxsKV0pIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWRlZmF1bHRzXCIsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiAhaGFzUHJlcGVuZE1lZGlhLFxuICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgVkF2YXRhcjoge1xuICAgICAgICAgICAgICBpbWFnZTogcHJvcHMucHJlcGVuZEF2YXRhcixcbiAgICAgICAgICAgICAgc3RhcnQ6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBWSWNvbjoge1xuICAgICAgICAgICAgICBpY29uOiBwcm9wcy5wcmVwZW5kSWNvbixcbiAgICAgICAgICAgICAgc3RhcnQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHNsb3RzLnByZXBlbmQpXSksIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtY2hpcF9fY29udGVudFwiXG4gICAgICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oe1xuICAgICAgICAgIGlzU2VsZWN0ZWQ6IGdyb3VwPy5pc1NlbGVjdGVkLnZhbHVlLFxuICAgICAgICAgIHNlbGVjdGVkQ2xhc3M6IGdyb3VwPy5zZWxlY3RlZENsYXNzLnZhbHVlLFxuICAgICAgICAgIHNlbGVjdDogZ3JvdXA/LnNlbGVjdCxcbiAgICAgICAgICB0b2dnbGU6IGdyb3VwPy50b2dnbGUsXG4gICAgICAgICAgdmFsdWU6IGdyb3VwPy52YWx1ZS52YWx1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWRcbiAgICAgICAgfSkgPz8gcHJvcHMudGV4dF0pLCBoYXNBcHBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImFwcGVuZFwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWNoaXBfX2FwcGVuZFwiXG4gICAgICAgIH0sIFshc2xvdHMuYXBwZW5kID8gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Byb3BzLmFwcGVuZEljb24gJiYgX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJhcHBlbmQtaWNvblwiLFxuICAgICAgICAgIFwiZW5kXCI6IHRydWUsXG4gICAgICAgICAgXCJpY29uXCI6IHByb3BzLmFwcGVuZEljb25cbiAgICAgICAgfSwgbnVsbCksIHByb3BzLmFwcGVuZEF2YXRhciAmJiBfY3JlYXRlVk5vZGUoVkF2YXRhciwge1xuICAgICAgICAgIFwia2V5XCI6IFwiYXBwZW5kLWF2YXRhclwiLFxuICAgICAgICAgIFwiZW5kXCI6IHRydWUsXG4gICAgICAgICAgXCJpbWFnZVwiOiBwcm9wcy5hcHBlbmRBdmF0YXJcbiAgICAgICAgfSwgbnVsbCldKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgIFwia2V5XCI6IFwiYXBwZW5kLWRlZmF1bHRzXCIsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiAhaGFzQXBwZW5kTWVkaWEsXG4gICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICBWQXZhdGFyOiB7XG4gICAgICAgICAgICAgIGVuZDogdHJ1ZSxcbiAgICAgICAgICAgICAgaW1hZ2U6IHByb3BzLmFwcGVuZEF2YXRhclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFZJY29uOiB7XG4gICAgICAgICAgICAgIGVuZDogdHJ1ZSxcbiAgICAgICAgICAgICAgaWNvbjogcHJvcHMuYXBwZW5kSWNvblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgc2xvdHMuYXBwZW5kKV0pLCBoYXNDbG9zZSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgIFwia2V5XCI6IFwiY2xvc2VcIixcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1jaGlwX19jbG9zZVwiXG4gICAgICAgIH0sIGNsb3NlUHJvcHMudmFsdWUpLCBbIXNsb3RzLmNsb3NlID8gX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJjbG9zZS1pY29uXCIsXG4gICAgICAgICAgXCJpY29uXCI6IHByb3BzLmNsb3NlSWNvbixcbiAgICAgICAgICBcInNpemVcIjogXCJ4LXNtYWxsXCJcbiAgICAgICAgfSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImNsb3NlLWRlZmF1bHRzXCIsXG4gICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICBWSWNvbjoge1xuICAgICAgICAgICAgICBpY29uOiBwcm9wcy5jbG9zZUljb24sXG4gICAgICAgICAgICAgIHNpemU6ICd4LXNtYWxsJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgc2xvdHMuY2xvc2UpXSldXG4gICAgICB9KSwgW1tfcmVzb2x2ZURpcmVjdGl2ZShcInJpcHBsZVwiKSwgaXNDbGlja2FibGUudmFsdWUgJiYgcHJvcHMucmlwcGxlLCBudWxsXV0pO1xuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNoaXAubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCwgcHJvdmlkZSwgc2hhbGxvd1JlZiB9IGZyb20gJ3Z1ZSc7XG5cbi8vIFR5cGVzXG5cbi8vIERlcHRoXG5leHBvcnQgY29uc3QgRGVwdGhLZXkgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5OmRlcHRoJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlRGVwdGgoaGFzUHJlcGVuZCkge1xuICBjb25zdCBwYXJlbnQgPSBpbmplY3QoRGVwdGhLZXksIHNoYWxsb3dSZWYoLTEpKTtcbiAgY29uc3QgZGVwdGggPSBjb21wdXRlZCgoKSA9PiBwYXJlbnQudmFsdWUgKyAxICsgKGhhc1ByZXBlbmQ/LnZhbHVlID8gMSA6IDApKTtcbiAgcHJvdmlkZShEZXB0aEtleSwgZGVwdGgpO1xuICByZXR1cm4gZGVwdGg7XG59XG5cbi8vIExpc3RcbmV4cG9ydCBjb25zdCBMaXN0S2V5ID0gU3ltYm9sLmZvcigndnVldGlmeTpsaXN0Jyk7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTGlzdCgpIHtcbiAgY29uc3QgcGFyZW50ID0gaW5qZWN0KExpc3RLZXksIHtcbiAgICBoYXNQcmVwZW5kOiBzaGFsbG93UmVmKGZhbHNlKSxcbiAgICB1cGRhdGVIYXNQcmVwZW5kOiAoKSA9PiBudWxsXG4gIH0pO1xuICBjb25zdCBkYXRhID0ge1xuICAgIGhhc1ByZXBlbmQ6IHNoYWxsb3dSZWYoZmFsc2UpLFxuICAgIHVwZGF0ZUhhc1ByZXBlbmQ6IHZhbHVlID0+IHtcbiAgICAgIGlmICh2YWx1ZSkgZGF0YS5oYXNQcmVwZW5kLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9O1xuICBwcm92aWRlKExpc3RLZXksIGRhdGEpO1xuICByZXR1cm4gcGFyZW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZUxpc3QoKSB7XG4gIHJldHVybiBpbmplY3QoTGlzdEtleSwgbnVsbCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0Lm1qcy5tYXAiLCJleHBvcnQgY29uc3Qgc2luZ2xlT3BlblN0cmF0ZWd5ID0ge1xuICBvcGVuOiBfcmVmID0+IHtcbiAgICBsZXQge1xuICAgICAgaWQsXG4gICAgICB2YWx1ZSxcbiAgICAgIG9wZW5lZCxcbiAgICAgIHBhcmVudHNcbiAgICB9ID0gX3JlZjtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGNvbnN0IG5ld09wZW5lZCA9IG5ldyBTZXQoKTtcbiAgICAgIG5ld09wZW5lZC5hZGQoaWQpO1xuICAgICAgbGV0IHBhcmVudCA9IHBhcmVudHMuZ2V0KGlkKTtcbiAgICAgIHdoaWxlIChwYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICBuZXdPcGVuZWQuYWRkKHBhcmVudCk7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudHMuZ2V0KHBhcmVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3T3BlbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcGVuZWQuZGVsZXRlKGlkKTtcbiAgICAgIHJldHVybiBvcGVuZWQ7XG4gICAgfVxuICB9LFxuICBzZWxlY3Q6ICgpID0+IG51bGxcbn07XG5leHBvcnQgY29uc3QgbXVsdGlwbGVPcGVuU3RyYXRlZ3kgPSB7XG4gIG9wZW46IF9yZWYyID0+IHtcbiAgICBsZXQge1xuICAgICAgaWQsXG4gICAgICB2YWx1ZSxcbiAgICAgIG9wZW5lZCxcbiAgICAgIHBhcmVudHNcbiAgICB9ID0gX3JlZjI7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBsZXQgcGFyZW50ID0gcGFyZW50cy5nZXQoaWQpO1xuICAgICAgb3BlbmVkLmFkZChpZCk7XG4gICAgICB3aGlsZSAocGFyZW50ICE9IG51bGwgJiYgcGFyZW50ICE9PSBpZCkge1xuICAgICAgICBvcGVuZWQuYWRkKHBhcmVudCk7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudHMuZ2V0KHBhcmVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3BlbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcGVuZWQuZGVsZXRlKGlkKTtcbiAgICB9XG4gICAgcmV0dXJuIG9wZW5lZDtcbiAgfSxcbiAgc2VsZWN0OiAoKSA9PiBudWxsXG59O1xuZXhwb3J0IGNvbnN0IGxpc3RPcGVuU3RyYXRlZ3kgPSB7XG4gIG9wZW46IG11bHRpcGxlT3BlblN0cmF0ZWd5Lm9wZW4sXG4gIHNlbGVjdDogX3JlZjMgPT4ge1xuICAgIGxldCB7XG4gICAgICBpZCxcbiAgICAgIHZhbHVlLFxuICAgICAgb3BlbmVkLFxuICAgICAgcGFyZW50c1xuICAgIH0gPSBfcmVmMztcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gb3BlbmVkO1xuICAgIGNvbnN0IHBhdGggPSBbXTtcbiAgICBsZXQgcGFyZW50ID0gcGFyZW50cy5nZXQoaWQpO1xuICAgIHdoaWxlIChwYXJlbnQgIT0gbnVsbCkge1xuICAgICAgcGF0aC5wdXNoKHBhcmVudCk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnRzLmdldChwYXJlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFNldChwYXRoKTtcbiAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5TdHJhdGVnaWVzLm1qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSBzb25hcmpzL25vLWlkZW50aWNhbC1mdW5jdGlvbnMgKi9cbi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgdG9SYXcgfSBmcm9tICd2dWUnO1xuZXhwb3J0IGNvbnN0IGluZGVwZW5kZW50U2VsZWN0U3RyYXRlZ3kgPSBtYW5kYXRvcnkgPT4ge1xuICBjb25zdCBzdHJhdGVneSA9IHtcbiAgICBzZWxlY3Q6IF9yZWYgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgaWQsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBzZWxlY3RlZFxuICAgICAgfSA9IF9yZWY7XG4gICAgICBpZCA9IHRvUmF3KGlkKTtcblxuICAgICAgLy8gV2hlbiBtYW5kYXRvcnkgYW5kIHdlJ3JlIHRyeWluZyB0byBkZXNlbGVjdCB3aGVuIGlkXG4gICAgICAvLyBpcyB0aGUgb25seSBjdXJyZW50bHkgc2VsZWN0ZWQgaXRlbSB0aGVuIGRvIG5vdGhpbmdcbiAgICAgIGlmIChtYW5kYXRvcnkgJiYgIXZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9uID0gQXJyYXkuZnJvbShzZWxlY3RlZC5lbnRyaWVzKCkpLnJlZHVjZSgoYXJyLCBfcmVmMikgPT4ge1xuICAgICAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmMjtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPT09ICdvbicgPyBbLi4uYXJyLCBrZXldIDogYXJyO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIGlmIChvbi5sZW5ndGggPT09IDEgJiYgb25bMF0gPT09IGlkKSByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgICBzZWxlY3RlZC5zZXQoaWQsIHZhbHVlID8gJ29uJyA6ICdvZmYnKTtcbiAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICB9LFxuICAgIGluOiAodiwgY2hpbGRyZW4sIHBhcmVudHMpID0+IHtcbiAgICAgIGxldCBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICBmb3IgKGNvbnN0IGlkIG9mIHYgfHwgW10pIHtcbiAgICAgICAgbWFwID0gc3RyYXRlZ3kuc2VsZWN0KHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgICAgICBzZWxlY3RlZDogbmV3IE1hcChtYXApLFxuICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgIHBhcmVudHNcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH0sXG4gICAgb3V0OiB2ID0+IHtcbiAgICAgIGNvbnN0IGFyciA9IFtdO1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygdi5lbnRyaWVzKCkpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnb24nKSBhcnIucHVzaChrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gIH07XG4gIHJldHVybiBzdHJhdGVneTtcbn07XG5leHBvcnQgY29uc3QgaW5kZXBlbmRlbnRTaW5nbGVTZWxlY3RTdHJhdGVneSA9IG1hbmRhdG9yeSA9PiB7XG4gIGNvbnN0IHBhcmVudFN0cmF0ZWd5ID0gaW5kZXBlbmRlbnRTZWxlY3RTdHJhdGVneShtYW5kYXRvcnkpO1xuICBjb25zdCBzdHJhdGVneSA9IHtcbiAgICBzZWxlY3Q6IF9yZWYzID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIHNlbGVjdGVkLFxuICAgICAgICBpZCxcbiAgICAgICAgLi4ucmVzdFxuICAgICAgfSA9IF9yZWYzO1xuICAgICAgaWQgPSB0b1JhdyhpZCk7XG4gICAgICBjb25zdCBzaW5nbGVTZWxlY3RlZCA9IHNlbGVjdGVkLmhhcyhpZCkgPyBuZXcgTWFwKFtbaWQsIHNlbGVjdGVkLmdldChpZCldXSkgOiBuZXcgTWFwKCk7XG4gICAgICByZXR1cm4gcGFyZW50U3RyYXRlZ3kuc2VsZWN0KHtcbiAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgaWQsXG4gICAgICAgIHNlbGVjdGVkOiBzaW5nbGVTZWxlY3RlZFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBpbjogKHYsIGNoaWxkcmVuLCBwYXJlbnRzKSA9PiB7XG4gICAgICBsZXQgbWFwID0gbmV3IE1hcCgpO1xuICAgICAgaWYgKHY/Lmxlbmd0aCkge1xuICAgICAgICBtYXAgPSBwYXJlbnRTdHJhdGVneS5pbih2LnNsaWNlKDAsIDEpLCBjaGlsZHJlbiwgcGFyZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH0sXG4gICAgb3V0OiAodiwgY2hpbGRyZW4sIHBhcmVudHMpID0+IHtcbiAgICAgIHJldHVybiBwYXJlbnRTdHJhdGVneS5vdXQodiwgY2hpbGRyZW4sIHBhcmVudHMpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHN0cmF0ZWd5O1xufTtcbmV4cG9ydCBjb25zdCBsZWFmU2VsZWN0U3RyYXRlZ3kgPSBtYW5kYXRvcnkgPT4ge1xuICBjb25zdCBwYXJlbnRTdHJhdGVneSA9IGluZGVwZW5kZW50U2VsZWN0U3RyYXRlZ3kobWFuZGF0b3J5KTtcbiAgY29uc3Qgc3RyYXRlZ3kgPSB7XG4gICAgc2VsZWN0OiBfcmVmNCA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBpZCxcbiAgICAgICAgc2VsZWN0ZWQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAuLi5yZXN0XG4gICAgICB9ID0gX3JlZjQ7XG4gICAgICBpZCA9IHRvUmF3KGlkKTtcbiAgICAgIGlmIChjaGlsZHJlbi5oYXMoaWQpKSByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICByZXR1cm4gcGFyZW50U3RyYXRlZ3kuc2VsZWN0KHtcbiAgICAgICAgaWQsXG4gICAgICAgIHNlbGVjdGVkLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgLi4ucmVzdFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBpbjogcGFyZW50U3RyYXRlZ3kuaW4sXG4gICAgb3V0OiBwYXJlbnRTdHJhdGVneS5vdXRcbiAgfTtcbiAgcmV0dXJuIHN0cmF0ZWd5O1xufTtcbmV4cG9ydCBjb25zdCBsZWFmU2luZ2xlU2VsZWN0U3RyYXRlZ3kgPSBtYW5kYXRvcnkgPT4ge1xuICBjb25zdCBwYXJlbnRTdHJhdGVneSA9IGluZGVwZW5kZW50U2luZ2xlU2VsZWN0U3RyYXRlZ3kobWFuZGF0b3J5KTtcbiAgY29uc3Qgc3RyYXRlZ3kgPSB7XG4gICAgc2VsZWN0OiBfcmVmNSA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBpZCxcbiAgICAgICAgc2VsZWN0ZWQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAuLi5yZXN0XG4gICAgICB9ID0gX3JlZjU7XG4gICAgICBpZCA9IHRvUmF3KGlkKTtcbiAgICAgIGlmIChjaGlsZHJlbi5oYXMoaWQpKSByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICByZXR1cm4gcGFyZW50U3RyYXRlZ3kuc2VsZWN0KHtcbiAgICAgICAgaWQsXG4gICAgICAgIHNlbGVjdGVkLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgLi4ucmVzdFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBpbjogcGFyZW50U3RyYXRlZ3kuaW4sXG4gICAgb3V0OiBwYXJlbnRTdHJhdGVneS5vdXRcbiAgfTtcbiAgcmV0dXJuIHN0cmF0ZWd5O1xufTtcbmV4cG9ydCBjb25zdCBjbGFzc2ljU2VsZWN0U3RyYXRlZ3kgPSBtYW5kYXRvcnkgPT4ge1xuICBjb25zdCBzdHJhdGVneSA9IHtcbiAgICBzZWxlY3Q6IF9yZWY2ID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGlkLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgc2VsZWN0ZWQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBwYXJlbnRzXG4gICAgICB9ID0gX3JlZjY7XG4gICAgICBpZCA9IHRvUmF3KGlkKTtcbiAgICAgIGNvbnN0IG9yaWdpbmFsID0gbmV3IE1hcChzZWxlY3RlZCk7XG4gICAgICBjb25zdCBpdGVtcyA9IFtpZF07XG4gICAgICB3aGlsZSAoaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtcy5zaGlmdCgpO1xuICAgICAgICBzZWxlY3RlZC5zZXQoaXRlbSwgdmFsdWUgPyAnb24nIDogJ29mZicpO1xuICAgICAgICBpZiAoY2hpbGRyZW4uaGFzKGl0ZW0pKSB7XG4gICAgICAgICAgaXRlbXMucHVzaCguLi5jaGlsZHJlbi5nZXQoaXRlbSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgcGFyZW50ID0gcGFyZW50cy5nZXQoaWQpO1xuICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBjb25zdCBjaGlsZHJlbklkcyA9IGNoaWxkcmVuLmdldChwYXJlbnQpO1xuICAgICAgICBjb25zdCBldmVyeVNlbGVjdGVkID0gY2hpbGRyZW5JZHMuZXZlcnkoY2lkID0+IHNlbGVjdGVkLmdldChjaWQpID09PSAnb24nKTtcbiAgICAgICAgY29uc3Qgbm9uZVNlbGVjdGVkID0gY2hpbGRyZW5JZHMuZXZlcnkoY2lkID0+ICFzZWxlY3RlZC5oYXMoY2lkKSB8fCBzZWxlY3RlZC5nZXQoY2lkKSA9PT0gJ29mZicpO1xuICAgICAgICBzZWxlY3RlZC5zZXQocGFyZW50LCBldmVyeVNlbGVjdGVkID8gJ29uJyA6IG5vbmVTZWxlY3RlZCA/ICdvZmYnIDogJ2luZGV0ZXJtaW5hdGUnKTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50cy5nZXQocGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgbWFuZGF0b3J5IGFuZCBwbGFubmVkIGRlc2VsZWN0IHJlc3VsdHMgaW4gbm8gc2VsZWN0ZWRcbiAgICAgIC8vIGl0ZW1zIHRoZW4gd2UgY2FuJ3QgZG8gaXQsIHNvIHJldHVybiBvcmlnaW5hbCBzdGF0ZVxuICAgICAgaWYgKG1hbmRhdG9yeSAmJiAhdmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb24gPSBBcnJheS5mcm9tKHNlbGVjdGVkLmVudHJpZXMoKSkucmVkdWNlKChhcnIsIF9yZWY3KSA9PiB7XG4gICAgICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWY3O1xuICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gJ29uJyA/IFsuLi5hcnIsIGtleV0gOiBhcnI7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgaWYgKG9uLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG9yaWdpbmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGVjdGVkO1xuICAgIH0sXG4gICAgaW46ICh2LCBjaGlsZHJlbiwgcGFyZW50cykgPT4ge1xuICAgICAgbGV0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgIGZvciAoY29uc3QgaWQgb2YgdiB8fCBbXSkge1xuICAgICAgICBtYXAgPSBzdHJhdGVneS5zZWxlY3Qoe1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIHZhbHVlOiB0cnVlLFxuICAgICAgICAgIHNlbGVjdGVkOiBuZXcgTWFwKG1hcCksXG4gICAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgICAgcGFyZW50c1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXA7XG4gICAgfSxcbiAgICBvdXQ6ICh2LCBjaGlsZHJlbikgPT4ge1xuICAgICAgY29uc3QgYXJyID0gW107XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB2LmVudHJpZXMoKSkge1xuICAgICAgICBpZiAodmFsdWUgPT09ICdvbicgJiYgIWNoaWxkcmVuLmhhcyhrZXkpKSBhcnIucHVzaChrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gIH07XG4gIHJldHVybiBzdHJhdGVneTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3RTdHJhdGVnaWVzLm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uL3Byb3hpZWRNb2RlbC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaW5qZWN0LCBvbkJlZm9yZVVubW91bnQsIHByb3ZpZGUsIHJlZiwgc2hhbGxvd1JlZiwgdG9SYXcgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgbGlzdE9wZW5TdHJhdGVneSwgbXVsdGlwbGVPcGVuU3RyYXRlZ3ksIHNpbmdsZU9wZW5TdHJhdGVneSB9IGZyb20gXCIuL29wZW5TdHJhdGVnaWVzLm1qc1wiO1xuaW1wb3J0IHsgY2xhc3NpY1NlbGVjdFN0cmF0ZWd5LCBpbmRlcGVuZGVudFNlbGVjdFN0cmF0ZWd5LCBpbmRlcGVuZGVudFNpbmdsZVNlbGVjdFN0cmF0ZWd5LCBsZWFmU2VsZWN0U3RyYXRlZ3ksIGxlYWZTaW5nbGVTZWxlY3RTdHJhdGVneSB9IGZyb20gXCIuL3NlbGVjdFN0cmF0ZWdpZXMubWpzXCI7XG5pbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2UsIGdldFVpZCwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgVk5lc3RlZFN5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6bmVzdGVkJyk7XG5leHBvcnQgY29uc3QgZW1wdHlOZXN0ZWQgPSB7XG4gIGlkOiBzaGFsbG93UmVmKCksXG4gIHJvb3Q6IHtcbiAgICByZWdpc3RlcjogKCkgPT4gbnVsbCxcbiAgICB1bnJlZ2lzdGVyOiAoKSA9PiBudWxsLFxuICAgIHBhcmVudHM6IHJlZihuZXcgTWFwKCkpLFxuICAgIGNoaWxkcmVuOiByZWYobmV3IE1hcCgpKSxcbiAgICBvcGVuOiAoKSA9PiBudWxsLFxuICAgIG9wZW5PblNlbGVjdDogKCkgPT4gbnVsbCxcbiAgICBzZWxlY3Q6ICgpID0+IG51bGwsXG4gICAgb3BlbmVkOiByZWYobmV3IFNldCgpKSxcbiAgICBzZWxlY3RlZDogcmVmKG5ldyBNYXAoKSksXG4gICAgc2VsZWN0ZWRWYWx1ZXM6IHJlZihbXSlcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBtYWtlTmVzdGVkUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBzZWxlY3RTdHJhdGVneTogW1N0cmluZywgRnVuY3Rpb25dLFxuICBvcGVuU3RyYXRlZ3k6IFtTdHJpbmcsIE9iamVjdF0sXG4gIG9wZW5lZDogQXJyYXksXG4gIHNlbGVjdGVkOiBBcnJheSxcbiAgbWFuZGF0b3J5OiBCb29sZWFuXG59LCAnbmVzdGVkJyk7XG5leHBvcnQgY29uc3QgdXNlTmVzdGVkID0gcHJvcHMgPT4ge1xuICBsZXQgaXNVbm1vdW50ZWQgPSBmYWxzZTtcbiAgY29uc3QgY2hpbGRyZW4gPSByZWYobmV3IE1hcCgpKTtcbiAgY29uc3QgcGFyZW50cyA9IHJlZihuZXcgTWFwKCkpO1xuICBjb25zdCBvcGVuZWQgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdvcGVuZWQnLCBwcm9wcy5vcGVuZWQsIHYgPT4gbmV3IFNldCh2KSwgdiA9PiBbLi4udi52YWx1ZXMoKV0pO1xuICBjb25zdCBzZWxlY3RTdHJhdGVneSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIHByb3BzLnNlbGVjdFN0cmF0ZWd5ID09PSAnb2JqZWN0JykgcmV0dXJuIHByb3BzLnNlbGVjdFN0cmF0ZWd5O1xuICAgIHN3aXRjaCAocHJvcHMuc2VsZWN0U3RyYXRlZ3kpIHtcbiAgICAgIGNhc2UgJ3NpbmdsZS1sZWFmJzpcbiAgICAgICAgcmV0dXJuIGxlYWZTaW5nbGVTZWxlY3RTdHJhdGVneShwcm9wcy5tYW5kYXRvcnkpO1xuICAgICAgY2FzZSAnbGVhZic6XG4gICAgICAgIHJldHVybiBsZWFmU2VsZWN0U3RyYXRlZ3kocHJvcHMubWFuZGF0b3J5KTtcbiAgICAgIGNhc2UgJ2luZGVwZW5kZW50JzpcbiAgICAgICAgcmV0dXJuIGluZGVwZW5kZW50U2VsZWN0U3RyYXRlZ3kocHJvcHMubWFuZGF0b3J5KTtcbiAgICAgIGNhc2UgJ3NpbmdsZS1pbmRlcGVuZGVudCc6XG4gICAgICAgIHJldHVybiBpbmRlcGVuZGVudFNpbmdsZVNlbGVjdFN0cmF0ZWd5KHByb3BzLm1hbmRhdG9yeSk7XG4gICAgICBjYXNlICdjbGFzc2ljJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBjbGFzc2ljU2VsZWN0U3RyYXRlZ3kocHJvcHMubWFuZGF0b3J5KTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBvcGVuU3RyYXRlZ3kgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBwcm9wcy5vcGVuU3RyYXRlZ3kgPT09ICdvYmplY3QnKSByZXR1cm4gcHJvcHMub3BlblN0cmF0ZWd5O1xuICAgIHN3aXRjaCAocHJvcHMub3BlblN0cmF0ZWd5KSB7XG4gICAgICBjYXNlICdsaXN0JzpcbiAgICAgICAgcmV0dXJuIGxpc3RPcGVuU3RyYXRlZ3k7XG4gICAgICBjYXNlICdzaW5nbGUnOlxuICAgICAgICByZXR1cm4gc2luZ2xlT3BlblN0cmF0ZWd5O1xuICAgICAgY2FzZSAnbXVsdGlwbGUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG11bHRpcGxlT3BlblN0cmF0ZWd5O1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHNlbGVjdGVkID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnc2VsZWN0ZWQnLCBwcm9wcy5zZWxlY3RlZCwgdiA9PiBzZWxlY3RTdHJhdGVneS52YWx1ZS5pbih2LCBjaGlsZHJlbi52YWx1ZSwgcGFyZW50cy52YWx1ZSksIHYgPT4gc2VsZWN0U3RyYXRlZ3kudmFsdWUub3V0KHYsIGNoaWxkcmVuLnZhbHVlLCBwYXJlbnRzLnZhbHVlKSk7XG4gIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgaXNVbm1vdW50ZWQgPSB0cnVlO1xuICB9KTtcbiAgZnVuY3Rpb24gZ2V0UGF0aChpZCkge1xuICAgIGNvbnN0IHBhdGggPSBbXTtcbiAgICBsZXQgcGFyZW50ID0gaWQ7XG4gICAgd2hpbGUgKHBhcmVudCAhPSBudWxsKSB7XG4gICAgICBwYXRoLnVuc2hpZnQocGFyZW50KTtcbiAgICAgIHBhcmVudCA9IHBhcmVudHMudmFsdWUuZ2V0KHBhcmVudCk7XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xuICB9XG4gIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKCduZXN0ZWQnKTtcbiAgY29uc3QgbmVzdGVkID0ge1xuICAgIGlkOiBzaGFsbG93UmVmKCksXG4gICAgcm9vdDoge1xuICAgICAgb3BlbmVkLFxuICAgICAgc2VsZWN0ZWQsXG4gICAgICBzZWxlY3RlZFZhbHVlczogY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgICBjb25zdCBhcnIgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygc2VsZWN0ZWQudmFsdWUuZW50cmllcygpKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSAnb24nKSBhcnIucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9KSxcbiAgICAgIHJlZ2lzdGVyOiAoaWQsIHBhcmVudElkLCBpc0dyb3VwKSA9PiB7XG4gICAgICAgIHBhcmVudElkICYmIGlkICE9PSBwYXJlbnRJZCAmJiBwYXJlbnRzLnZhbHVlLnNldChpZCwgcGFyZW50SWQpO1xuICAgICAgICBpc0dyb3VwICYmIGNoaWxkcmVuLnZhbHVlLnNldChpZCwgW10pO1xuICAgICAgICBpZiAocGFyZW50SWQgIT0gbnVsbCkge1xuICAgICAgICAgIGNoaWxkcmVuLnZhbHVlLnNldChwYXJlbnRJZCwgWy4uLihjaGlsZHJlbi52YWx1ZS5nZXQocGFyZW50SWQpIHx8IFtdKSwgaWRdKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHVucmVnaXN0ZXI6IGlkID0+IHtcbiAgICAgICAgaWYgKGlzVW5tb3VudGVkKSByZXR1cm47XG4gICAgICAgIGNoaWxkcmVuLnZhbHVlLmRlbGV0ZShpZCk7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHBhcmVudHMudmFsdWUuZ2V0KGlkKTtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIGNvbnN0IGxpc3QgPSBjaGlsZHJlbi52YWx1ZS5nZXQocGFyZW50KSA/PyBbXTtcbiAgICAgICAgICBjaGlsZHJlbi52YWx1ZS5zZXQocGFyZW50LCBsaXN0LmZpbHRlcihjaGlsZCA9PiBjaGlsZCAhPT0gaWQpKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnRzLnZhbHVlLmRlbGV0ZShpZCk7XG4gICAgICAgIG9wZW5lZC52YWx1ZS5kZWxldGUoaWQpO1xuICAgICAgfSxcbiAgICAgIG9wZW46IChpZCwgdmFsdWUsIGV2ZW50KSA9PiB7XG4gICAgICAgIHZtLmVtaXQoJ2NsaWNrOm9wZW4nLCB7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgcGF0aDogZ2V0UGF0aChpZCksXG4gICAgICAgICAgZXZlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG5ld09wZW5lZCA9IG9wZW5TdHJhdGVneS52YWx1ZS5vcGVuKHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBvcGVuZWQ6IG5ldyBTZXQob3BlbmVkLnZhbHVlKSxcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4udmFsdWUsXG4gICAgICAgICAgcGFyZW50czogcGFyZW50cy52YWx1ZSxcbiAgICAgICAgICBldmVudFxuICAgICAgICB9KTtcbiAgICAgICAgbmV3T3BlbmVkICYmIChvcGVuZWQudmFsdWUgPSBuZXdPcGVuZWQpO1xuICAgICAgfSxcbiAgICAgIG9wZW5PblNlbGVjdDogKGlkLCB2YWx1ZSwgZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgbmV3T3BlbmVkID0gb3BlblN0cmF0ZWd5LnZhbHVlLnNlbGVjdCh7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgc2VsZWN0ZWQ6IG5ldyBNYXAoc2VsZWN0ZWQudmFsdWUpLFxuICAgICAgICAgIG9wZW5lZDogbmV3IFNldChvcGVuZWQudmFsdWUpLFxuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbi52YWx1ZSxcbiAgICAgICAgICBwYXJlbnRzOiBwYXJlbnRzLnZhbHVlLFxuICAgICAgICAgIGV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgICBuZXdPcGVuZWQgJiYgKG9wZW5lZC52YWx1ZSA9IG5ld09wZW5lZCk7XG4gICAgICB9LFxuICAgICAgc2VsZWN0OiAoaWQsIHZhbHVlLCBldmVudCkgPT4ge1xuICAgICAgICB2bS5lbWl0KCdjbGljazpzZWxlY3QnLCB7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgcGF0aDogZ2V0UGF0aChpZCksXG4gICAgICAgICAgZXZlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG5ld1NlbGVjdGVkID0gc2VsZWN0U3RyYXRlZ3kudmFsdWUuc2VsZWN0KHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBzZWxlY3RlZDogbmV3IE1hcChzZWxlY3RlZC52YWx1ZSksXG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLnZhbHVlLFxuICAgICAgICAgIHBhcmVudHM6IHBhcmVudHMudmFsdWUsXG4gICAgICAgICAgZXZlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIG5ld1NlbGVjdGVkICYmIChzZWxlY3RlZC52YWx1ZSA9IG5ld1NlbGVjdGVkKTtcbiAgICAgICAgbmVzdGVkLnJvb3Qub3Blbk9uU2VsZWN0KGlkLCB2YWx1ZSwgZXZlbnQpO1xuICAgICAgfSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgcGFyZW50c1xuICAgIH1cbiAgfTtcbiAgcHJvdmlkZShWTmVzdGVkU3ltYm9sLCBuZXN0ZWQpO1xuICByZXR1cm4gbmVzdGVkLnJvb3Q7XG59O1xuZXhwb3J0IGNvbnN0IHVzZU5lc3RlZEl0ZW0gPSAoaWQsIGlzR3JvdXApID0+IHtcbiAgY29uc3QgcGFyZW50ID0gaW5qZWN0KFZOZXN0ZWRTeW1ib2wsIGVtcHR5TmVzdGVkKTtcbiAgY29uc3QgdWlkU3ltYm9sID0gU3ltYm9sKGdldFVpZCgpKTtcbiAgY29uc3QgY29tcHV0ZWRJZCA9IGNvbXB1dGVkKCgpID0+IGlkLnZhbHVlICE9PSB1bmRlZmluZWQgPyBpZC52YWx1ZSA6IHVpZFN5bWJvbCk7XG4gIGNvbnN0IGl0ZW0gPSB7XG4gICAgLi4ucGFyZW50LFxuICAgIGlkOiBjb21wdXRlZElkLFxuICAgIG9wZW46IChvcGVuLCBlKSA9PiBwYXJlbnQucm9vdC5vcGVuKGNvbXB1dGVkSWQudmFsdWUsIG9wZW4sIGUpLFxuICAgIG9wZW5PblNlbGVjdDogKG9wZW4sIGUpID0+IHBhcmVudC5yb290Lm9wZW5PblNlbGVjdChjb21wdXRlZElkLnZhbHVlLCBvcGVuLCBlKSxcbiAgICBpc09wZW46IGNvbXB1dGVkKCgpID0+IHBhcmVudC5yb290Lm9wZW5lZC52YWx1ZS5oYXMoY29tcHV0ZWRJZC52YWx1ZSkpLFxuICAgIHBhcmVudDogY29tcHV0ZWQoKCkgPT4gcGFyZW50LnJvb3QucGFyZW50cy52YWx1ZS5nZXQoY29tcHV0ZWRJZC52YWx1ZSkpLFxuICAgIHNlbGVjdDogKHNlbGVjdGVkLCBlKSA9PiBwYXJlbnQucm9vdC5zZWxlY3QoY29tcHV0ZWRJZC52YWx1ZSwgc2VsZWN0ZWQsIGUpLFxuICAgIGlzU2VsZWN0ZWQ6IGNvbXB1dGVkKCgpID0+IHBhcmVudC5yb290LnNlbGVjdGVkLnZhbHVlLmdldCh0b1Jhdyhjb21wdXRlZElkLnZhbHVlKSkgPT09ICdvbicpLFxuICAgIGlzSW5kZXRlcm1pbmF0ZTogY29tcHV0ZWQoKCkgPT4gcGFyZW50LnJvb3Quc2VsZWN0ZWQudmFsdWUuZ2V0KGNvbXB1dGVkSWQudmFsdWUpID09PSAnaW5kZXRlcm1pbmF0ZScpLFxuICAgIGlzTGVhZjogY29tcHV0ZWQoKCkgPT4gIXBhcmVudC5yb290LmNoaWxkcmVuLnZhbHVlLmdldChjb21wdXRlZElkLnZhbHVlKSksXG4gICAgaXNHcm91cEFjdGl2YXRvcjogcGFyZW50LmlzR3JvdXBBY3RpdmF0b3JcbiAgfTtcbiAgIXBhcmVudC5pc0dyb3VwQWN0aXZhdG9yICYmIHBhcmVudC5yb290LnJlZ2lzdGVyKGNvbXB1dGVkSWQudmFsdWUsIHBhcmVudC5pZC52YWx1ZSwgaXNHcm91cCk7XG4gIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgIXBhcmVudC5pc0dyb3VwQWN0aXZhdG9yICYmIHBhcmVudC5yb290LnVucmVnaXN0ZXIoY29tcHV0ZWRJZC52YWx1ZSk7XG4gIH0pO1xuICBpc0dyb3VwICYmIHByb3ZpZGUoVk5lc3RlZFN5bWJvbCwgaXRlbSk7XG4gIHJldHVybiBpdGVtO1xufTtcbmV4cG9ydCBjb25zdCB1c2VOZXN0ZWRHcm91cEFjdGl2YXRvciA9ICgpID0+IHtcbiAgY29uc3QgcGFyZW50ID0gaW5qZWN0KFZOZXN0ZWRTeW1ib2wsIGVtcHR5TmVzdGVkKTtcbiAgcHJvdmlkZShWTmVzdGVkU3ltYm9sLCB7XG4gICAgLi4ucGFyZW50LFxuICAgIGlzR3JvdXBBY3RpdmF0b3I6IHRydWVcbiAgfSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmVzdGVkLm1qcy5tYXAiLCJpbXBvcnQgeyB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHZTaG93IGFzIF92U2hvdywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkV4cGFuZFRyYW5zaXRpb24gfSBmcm9tIFwiLi4vdHJhbnNpdGlvbnMvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUxpc3QgfSBmcm9tIFwiLi9saXN0Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IEljb25WYWx1ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IHVzZU5lc3RlZEdyb3VwQWN0aXZhdG9yLCB1c2VOZXN0ZWRJdGVtIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL25lc3RlZC9uZXN0ZWQubWpzXCI7XG5pbXBvcnQgeyB1c2VTc3JCb290IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NzckJvb3QubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgTWF5YmVUcmFuc2l0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RyYW5zaXRpb24ubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmNvbnN0IFZMaXN0R3JvdXBBY3RpdmF0b3IgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnVkxpc3RHcm91cEFjdGl2YXRvcicsXG4gIHNldHVwKF8sIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICB1c2VOZXN0ZWRHcm91cEFjdGl2YXRvcigpO1xuICAgIHJldHVybiAoKSA9PiBzbG90cy5kZWZhdWx0Py4oKTtcbiAgfVxufSk7XG5leHBvcnQgY29uc3QgbWFrZVZMaXN0R3JvdXBQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC8qIEBkZXByZWNhdGVkICovXG4gIGFjdGl2ZUNvbG9yOiBTdHJpbmcsXG4gIGJhc2VDb2xvcjogU3RyaW5nLFxuICBjb2xvcjogU3RyaW5nLFxuICBjb2xsYXBzZUljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRjb2xsYXBzZSdcbiAgfSxcbiAgZXhwYW5kSWNvbjoge1xuICAgIHR5cGU6IEljb25WYWx1ZSxcbiAgICBkZWZhdWx0OiAnJGV4cGFuZCdcbiAgfSxcbiAgcHJlcGVuZEljb246IEljb25WYWx1ZSxcbiAgYXBwZW5kSWNvbjogSWNvblZhbHVlLFxuICBmbHVpZDogQm9vbGVhbixcbiAgc3ViZ3JvdXA6IEJvb2xlYW4sXG4gIHRpdGxlOiBTdHJpbmcsXG4gIHZhbHVlOiBudWxsLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKClcbn0sICdWTGlzdEdyb3VwJyk7XG5leHBvcnQgY29uc3QgVkxpc3RHcm91cCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTGlzdEdyb3VwJyxcbiAgcHJvcHM6IG1ha2VWTGlzdEdyb3VwUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYyKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWYyO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzT3BlbixcbiAgICAgIG9wZW4sXG4gICAgICBpZDogX2lkXG4gICAgfSA9IHVzZU5lc3RlZEl0ZW0odG9SZWYocHJvcHMsICd2YWx1ZScpLCB0cnVlKTtcbiAgICBjb25zdCBpZCA9IGNvbXB1dGVkKCgpID0+IGB2LWxpc3QtZ3JvdXAtLWlkLSR7U3RyaW5nKF9pZC52YWx1ZSl9YCk7XG4gICAgY29uc3QgbGlzdCA9IHVzZUxpc3QoKTtcbiAgICBjb25zdCB7XG4gICAgICBpc0Jvb3RlZFxuICAgIH0gPSB1c2VTc3JCb290KCk7XG4gICAgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICBvcGVuKCFpc09wZW4udmFsdWUsIGUpO1xuICAgIH1cbiAgICBjb25zdCBhY3RpdmF0b3JQcm9wcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICBvbkNsaWNrLFxuICAgICAgY2xhc3M6ICd2LWxpc3QtZ3JvdXBfX2hlYWRlcicsXG4gICAgICBpZDogaWQudmFsdWVcbiAgICB9KSk7XG4gICAgY29uc3QgdG9nZ2xlSWNvbiA9IGNvbXB1dGVkKCgpID0+IGlzT3Blbi52YWx1ZSA/IHByb3BzLmNvbGxhcHNlSWNvbiA6IHByb3BzLmV4cGFuZEljb24pO1xuICAgIGNvbnN0IGFjdGl2YXRvckRlZmF1bHRzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIFZMaXN0SXRlbToge1xuICAgICAgICBhY3RpdmU6IGlzT3Blbi52YWx1ZSxcbiAgICAgICAgYWN0aXZlQ29sb3I6IHByb3BzLmFjdGl2ZUNvbG9yLFxuICAgICAgICBiYXNlQ29sb3I6IHByb3BzLmJhc2VDb2xvcixcbiAgICAgICAgY29sb3I6IHByb3BzLmNvbG9yLFxuICAgICAgICBwcmVwZW5kSWNvbjogcHJvcHMucHJlcGVuZEljb24gfHwgcHJvcHMuc3ViZ3JvdXAgJiYgdG9nZ2xlSWNvbi52YWx1ZSxcbiAgICAgICAgYXBwZW5kSWNvbjogcHJvcHMuYXBwZW5kSWNvbiB8fCAhcHJvcHMuc3ViZ3JvdXAgJiYgdG9nZ2xlSWNvbi52YWx1ZSxcbiAgICAgICAgdGl0bGU6IHByb3BzLnRpdGxlLFxuICAgICAgICB2YWx1ZTogcHJvcHMudmFsdWVcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWxpc3QtZ3JvdXAnLCB7XG4gICAgICAgICd2LWxpc3QtZ3JvdXAtLXByZXBlbmQnOiBsaXN0Py5oYXNQcmVwZW5kLnZhbHVlLFxuICAgICAgICAndi1saXN0LWdyb3VwLS1mbHVpZCc6IHByb3BzLmZsdWlkLFxuICAgICAgICAndi1saXN0LWdyb3VwLS1zdWJncm91cCc6IHByb3BzLnN1Ymdyb3VwLFxuICAgICAgICAndi1saXN0LWdyb3VwLS1vcGVuJzogaXNPcGVuLnZhbHVlXG4gICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmFjdGl2YXRvciAmJiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgXCJkZWZhdWx0c1wiOiBhY3RpdmF0b3JEZWZhdWx0cy52YWx1ZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX2NyZWF0ZVZOb2RlKFZMaXN0R3JvdXBBY3RpdmF0b3IsIG51bGwsIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMuYWN0aXZhdG9yKHtcbiAgICAgICAgICAgIHByb3BzOiBhY3RpdmF0b3JQcm9wcy52YWx1ZSxcbiAgICAgICAgICAgIGlzT3BlbjogaXNPcGVuLnZhbHVlXG4gICAgICAgICAgfSldXG4gICAgICAgIH0pXVxuICAgICAgfSksIF9jcmVhdGVWTm9kZShNYXliZVRyYW5zaXRpb24sIHtcbiAgICAgICAgXCJ0cmFuc2l0aW9uXCI6IHtcbiAgICAgICAgICBjb21wb25lbnQ6IFZFeHBhbmRUcmFuc2l0aW9uXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGlzYWJsZWRcIjogIWlzQm9vdGVkLnZhbHVlXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1saXN0LWdyb3VwX19pdGVtc1wiLFxuICAgICAgICAgIFwicm9sZVwiOiBcImdyb3VwXCIsXG4gICAgICAgICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogaWQudmFsdWVcbiAgICAgICAgfSwgW3Nsb3RzLmRlZmF1bHQ/LigpXSksIFtbX3ZTaG93LCBpc09wZW4udmFsdWVdXSldXG4gICAgICB9KV1cbiAgICB9KSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZMaXN0R3JvdXAubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZMaXN0SXRlbVN1YnRpdGxlID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1saXN0LWl0ZW0tc3VidGl0bGUnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZMaXN0SXRlbVN1YnRpdGxlLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBWTGlzdEl0ZW1UaXRsZSA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtbGlzdC1pdGVtLXRpdGxlJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTGlzdEl0ZW1UaXRsZS5tanMubWFwIiwiaW1wb3J0IHsgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIEZyYWdtZW50IGFzIF9GcmFnbWVudCB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WTGlzdEl0ZW0uY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZMaXN0SXRlbVN1YnRpdGxlIH0gZnJvbSBcIi4vVkxpc3RJdGVtU3VidGl0bGUubWpzXCI7XG5pbXBvcnQgeyBWTGlzdEl0ZW1UaXRsZSB9IGZyb20gXCIuL1ZMaXN0SXRlbVRpdGxlLm1qc1wiO1xuaW1wb3J0IHsgVkF2YXRhciB9IGZyb20gXCIuLi9WQXZhdGFyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gXCIuLi9WSWNvbi9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUxpc3QgfSBmcm9tIFwiLi9saXN0Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUJvcmRlclByb3BzLCB1c2VCb3JkZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvYm9yZGVyLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VEZW5zaXR5UHJvcHMsIHVzZURlbnNpdHkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVuc2l0eS5tanNcIjtcbmltcG9ydCB7IG1ha2VEaW1lbnNpb25Qcm9wcywgdXNlRGltZW5zaW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RpbWVuc2lvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRWxldmF0aW9uUHJvcHMsIHVzZUVsZXZhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyB1c2VOZXN0ZWRJdGVtIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL25lc3RlZC9uZXN0ZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91dGVyUHJvcHMsIHVzZUxpbmsgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91dGVyLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7XG5pbXBvcnQgeyBnZW5PdmVybGF5cywgbWFrZVZhcmlhbnRQcm9wcywgdXNlVmFyaWFudCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy92YXJpYW50Lm1qc1wiOyAvLyBEaXJlY3RpdmVzXG5pbXBvcnQgeyBSaXBwbGUgfSBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9yaXBwbGUvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGRlcHJlY2F0ZSwgRXZlbnRQcm9wLCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWTGlzdEl0ZW1Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGFjdGl2ZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gIH0sXG4gIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIC8qIEBkZXByZWNhdGVkICovXG4gIGFjdGl2ZUNvbG9yOiBTdHJpbmcsXG4gIGFwcGVuZEF2YXRhcjogU3RyaW5nLFxuICBhcHBlbmRJY29uOiBJY29uVmFsdWUsXG4gIGJhc2VDb2xvcjogU3RyaW5nLFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgbGluZXM6IFN0cmluZyxcbiAgbGluazoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gIH0sXG4gIG5hdjogQm9vbGVhbixcbiAgcHJlcGVuZEF2YXRhcjogU3RyaW5nLFxuICBwcmVwZW5kSWNvbjogSWNvblZhbHVlLFxuICByaXBwbGU6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgT2JqZWN0XSxcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIHN1YnRpdGxlOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW5dLFxuICB0aXRsZTogW1N0cmluZywgTnVtYmVyLCBCb29sZWFuXSxcbiAgdmFsdWU6IG51bGwsXG4gIG9uQ2xpY2s6IEV2ZW50UHJvcCgpLFxuICBvbkNsaWNrT25jZTogRXZlbnRQcm9wKCksXG4gIC4uLm1ha2VCb3JkZXJQcm9wcygpLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURlbnNpdHlQcm9wcygpLFxuICAuLi5tYWtlRGltZW5zaW9uUHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVJvdXRlclByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpLFxuICAuLi5tYWtlVmFyaWFudFByb3BzKHtcbiAgICB2YXJpYW50OiAndGV4dCdcbiAgfSlcbn0sICdWTGlzdEl0ZW0nKTtcbmV4cG9ydCBjb25zdCBWTGlzdEl0ZW0gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkxpc3RJdGVtJyxcbiAgZGlyZWN0aXZlczoge1xuICAgIFJpcHBsZVxuICB9LFxuICBwcm9wczogbWFrZVZMaXN0SXRlbVByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgY2xpY2s6IGUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBhdHRycyxcbiAgICAgIHNsb3RzLFxuICAgICAgZW1pdFxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGxpbmsgPSB1c2VMaW5rKHByb3BzLCBhdHRycyk7XG4gICAgY29uc3QgaWQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy52YWx1ZSA9PT0gdW5kZWZpbmVkID8gbGluay5ocmVmLnZhbHVlIDogcHJvcHMudmFsdWUpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNlbGVjdCxcbiAgICAgIGlzU2VsZWN0ZWQsXG4gICAgICBpc0luZGV0ZXJtaW5hdGUsXG4gICAgICBpc0dyb3VwQWN0aXZhdG9yLFxuICAgICAgcm9vdCxcbiAgICAgIHBhcmVudCxcbiAgICAgIG9wZW5PblNlbGVjdFxuICAgIH0gPSB1c2VOZXN0ZWRJdGVtKGlkLCBmYWxzZSk7XG4gICAgY29uc3QgbGlzdCA9IHVzZUxpc3QoKTtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmFjdGl2ZSAhPT0gZmFsc2UgJiYgKHByb3BzLmFjdGl2ZSB8fCBsaW5rLmlzQWN0aXZlPy52YWx1ZSB8fCBpc1NlbGVjdGVkLnZhbHVlKSk7XG4gICAgY29uc3QgaXNMaW5rID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMubGluayAhPT0gZmFsc2UgJiYgbGluay5pc0xpbmsudmFsdWUpO1xuICAgIGNvbnN0IGlzQ2xpY2thYmxlID0gY29tcHV0ZWQoKCkgPT4gIXByb3BzLmRpc2FibGVkICYmIHByb3BzLmxpbmsgIT09IGZhbHNlICYmIChwcm9wcy5saW5rIHx8IGxpbmsuaXNDbGlja2FibGUudmFsdWUgfHwgcHJvcHMudmFsdWUgIT0gbnVsbCAmJiAhIWxpc3QpKTtcbiAgICBjb25zdCByb3VuZGVkUHJvcHMgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5yb3VuZGVkIHx8IHByb3BzLm5hdik7XG4gICAgY29uc3QgY29sb3IgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5jb2xvciA/PyBwcm9wcy5hY3RpdmVDb2xvcik7XG4gICAgY29uc3QgdmFyaWFudFByb3BzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIGNvbG9yOiBpc0FjdGl2ZS52YWx1ZSA/IGNvbG9yLnZhbHVlID8/IHByb3BzLmJhc2VDb2xvciA6IHByb3BzLmJhc2VDb2xvcixcbiAgICAgIHZhcmlhbnQ6IHByb3BzLnZhcmlhbnRcbiAgICB9KSk7XG4gICAgd2F0Y2goKCkgPT4gbGluay5pc0FjdGl2ZT8udmFsdWUsIHZhbCA9PiB7XG4gICAgICBpZiAodmFsICYmIHBhcmVudC52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHJvb3Qub3BlbihwYXJlbnQudmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbCkge1xuICAgICAgICBvcGVuT25TZWxlY3QodmFsKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBpbW1lZGlhdGU6IHRydWVcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBib3JkZXJDbGFzc2VzXG4gICAgfSA9IHVzZUJvcmRlcihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgY29sb3JDbGFzc2VzLFxuICAgICAgY29sb3JTdHlsZXMsXG4gICAgICB2YXJpYW50Q2xhc3Nlc1xuICAgIH0gPSB1c2VWYXJpYW50KHZhcmlhbnRQcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGVuc2l0eUNsYXNzZXNcbiAgICB9ID0gdXNlRGVuc2l0eShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGltZW5zaW9uU3R5bGVzXG4gICAgfSA9IHVzZURpbWVuc2lvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocm91bmRlZFByb3BzKTtcbiAgICBjb25zdCBsaW5lQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmxpbmVzID8gYHYtbGlzdC1pdGVtLS0ke3Byb3BzLmxpbmVzfS1saW5lYCA6IHVuZGVmaW5lZCk7XG4gICAgY29uc3Qgc2xvdFByb3BzID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIGlzQWN0aXZlOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgIHNlbGVjdCxcbiAgICAgIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQudmFsdWUsXG4gICAgICBpc0luZGV0ZXJtaW5hdGU6IGlzSW5kZXRlcm1pbmF0ZS52YWx1ZVxuICAgIH0pKTtcbiAgICBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgIGVtaXQoJ2NsaWNrJywgZSk7XG4gICAgICBpZiAoaXNHcm91cEFjdGl2YXRvciB8fCAhaXNDbGlja2FibGUudmFsdWUpIHJldHVybjtcbiAgICAgIGxpbmsubmF2aWdhdGU/LihlKTtcbiAgICAgIHByb3BzLnZhbHVlICE9IG51bGwgJiYgc2VsZWN0KCFpc1NlbGVjdGVkLnZhbHVlLCBlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleSA9PT0gJyAnKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb25DbGljayhlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFRhZyA9IGlzTGluay52YWx1ZSA/ICdhJyA6IHByb3BzLnRhZztcbiAgICAgIGNvbnN0IGhhc1RpdGxlID0gc2xvdHMudGl0bGUgfHwgcHJvcHMudGl0bGU7XG4gICAgICBjb25zdCBoYXNTdWJ0aXRsZSA9IHNsb3RzLnN1YnRpdGxlIHx8IHByb3BzLnN1YnRpdGxlO1xuICAgICAgY29uc3QgaGFzQXBwZW5kTWVkaWEgPSAhIShwcm9wcy5hcHBlbmRBdmF0YXIgfHwgcHJvcHMuYXBwZW5kSWNvbik7XG4gICAgICBjb25zdCBoYXNBcHBlbmQgPSAhIShoYXNBcHBlbmRNZWRpYSB8fCBzbG90cy5hcHBlbmQpO1xuICAgICAgY29uc3QgaGFzUHJlcGVuZE1lZGlhID0gISEocHJvcHMucHJlcGVuZEF2YXRhciB8fCBwcm9wcy5wcmVwZW5kSWNvbik7XG4gICAgICBjb25zdCBoYXNQcmVwZW5kID0gISEoaGFzUHJlcGVuZE1lZGlhIHx8IHNsb3RzLnByZXBlbmQpO1xuICAgICAgbGlzdD8udXBkYXRlSGFzUHJlcGVuZChoYXNQcmVwZW5kKTtcbiAgICAgIGlmIChwcm9wcy5hY3RpdmVDb2xvcikge1xuICAgICAgICBkZXByZWNhdGUoJ2FjdGl2ZS1jb2xvcicsIFsnY29sb3InLCAnYmFzZS1jb2xvciddKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1saXN0LWl0ZW0nLCB7XG4gICAgICAgICAgJ3YtbGlzdC1pdGVtLS1hY3RpdmUnOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgICAndi1saXN0LWl0ZW0tLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgJ3YtbGlzdC1pdGVtLS1saW5rJzogaXNDbGlja2FibGUudmFsdWUsXG4gICAgICAgICAgJ3YtbGlzdC1pdGVtLS1uYXYnOiBwcm9wcy5uYXYsXG4gICAgICAgICAgJ3YtbGlzdC1pdGVtLS1wcmVwZW5kJzogIWhhc1ByZXBlbmQgJiYgbGlzdD8uaGFzUHJlcGVuZC52YWx1ZSxcbiAgICAgICAgICBbYCR7cHJvcHMuYWN0aXZlQ2xhc3N9YF06IHByb3BzLmFjdGl2ZUNsYXNzICYmIGlzQWN0aXZlLnZhbHVlXG4gICAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgYm9yZGVyQ2xhc3Nlcy52YWx1ZSwgY29sb3JDbGFzc2VzLnZhbHVlLCBkZW5zaXR5Q2xhc3Nlcy52YWx1ZSwgZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSwgbGluZUNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCB2YXJpYW50Q2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFtjb2xvclN0eWxlcy52YWx1ZSwgZGltZW5zaW9uU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV0sXG4gICAgICAgIFwiaHJlZlwiOiBsaW5rLmhyZWYudmFsdWUsXG4gICAgICAgIFwidGFiaW5kZXhcIjogaXNDbGlja2FibGUudmFsdWUgPyBsaXN0ID8gLTIgOiAwIDogdW5kZWZpbmVkLFxuICAgICAgICBcIm9uQ2xpY2tcIjogb25DbGljayxcbiAgICAgICAgXCJvbktleWRvd25cIjogaXNDbGlja2FibGUudmFsdWUgJiYgIWlzTGluay52YWx1ZSAmJiBvbktleURvd25cbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW2dlbk92ZXJsYXlzKGlzQ2xpY2thYmxlLnZhbHVlIHx8IGlzQWN0aXZlLnZhbHVlLCAndi1saXN0LWl0ZW0nKSwgaGFzUHJlcGVuZCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZFwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWxpc3QtaXRlbV9fcHJlcGVuZFwiXG4gICAgICAgIH0sIFshc2xvdHMucHJlcGVuZCA/IF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtwcm9wcy5wcmVwZW5kQXZhdGFyICYmIF9jcmVhdGVWTm9kZShWQXZhdGFyLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWF2YXRhclwiLFxuICAgICAgICAgIFwiZGVuc2l0eVwiOiBwcm9wcy5kZW5zaXR5LFxuICAgICAgICAgIFwiaW1hZ2VcIjogcHJvcHMucHJlcGVuZEF2YXRhclxuICAgICAgICB9LCBudWxsKSwgcHJvcHMucHJlcGVuZEljb24gJiYgX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWljb25cIixcbiAgICAgICAgICBcImRlbnNpdHlcIjogcHJvcHMuZGVuc2l0eSxcbiAgICAgICAgICBcImljb25cIjogcHJvcHMucHJlcGVuZEljb25cbiAgICAgICAgfSwgbnVsbCldKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZC1kZWZhdWx0c1wiLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogIWhhc1ByZXBlbmRNZWRpYSxcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZBdmF0YXI6IHtcbiAgICAgICAgICAgICAgZGVuc2l0eTogcHJvcHMuZGVuc2l0eSxcbiAgICAgICAgICAgICAgaW1hZ2U6IHByb3BzLnByZXBlbmRBdmF0YXJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBWSWNvbjoge1xuICAgICAgICAgICAgICBkZW5zaXR5OiBwcm9wcy5kZW5zaXR5LFxuICAgICAgICAgICAgICBpY29uOiBwcm9wcy5wcmVwZW5kSWNvblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFZMaXN0SXRlbUFjdGlvbjoge1xuICAgICAgICAgICAgICBzdGFydDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy5wcmVwZW5kPy4oc2xvdFByb3BzLnZhbHVlKV1cbiAgICAgICAgfSksIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtbGlzdC1pdGVtX19zcGFjZXJcIlxuICAgICAgICB9LCBudWxsKV0pLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWxpc3QtaXRlbV9fY29udGVudFwiLFxuICAgICAgICAgIFwiZGF0YS1uby1hY3RpdmF0b3JcIjogXCJcIlxuICAgICAgICB9LCBbaGFzVGl0bGUgJiYgX2NyZWF0ZVZOb2RlKFZMaXN0SXRlbVRpdGxlLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJ0aXRsZVwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMudGl0bGU/Lih7XG4gICAgICAgICAgICB0aXRsZTogcHJvcHMudGl0bGVcbiAgICAgICAgICB9KSA/PyBwcm9wcy50aXRsZV1cbiAgICAgICAgfSksIGhhc1N1YnRpdGxlICYmIF9jcmVhdGVWTm9kZShWTGlzdEl0ZW1TdWJ0aXRsZSwge1xuICAgICAgICAgIFwia2V5XCI6IFwic3VidGl0bGVcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLnN1YnRpdGxlPy4oe1xuICAgICAgICAgICAgc3VidGl0bGU6IHByb3BzLnN1YnRpdGxlXG4gICAgICAgICAgfSkgPz8gcHJvcHMuc3VidGl0bGVdXG4gICAgICAgIH0pLCBzbG90cy5kZWZhdWx0Py4oc2xvdFByb3BzLnZhbHVlKV0pLCBoYXNBcHBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImFwcGVuZFwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWxpc3QtaXRlbV9fYXBwZW5kXCJcbiAgICAgICAgfSwgWyFzbG90cy5hcHBlbmQgPyBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbcHJvcHMuYXBwZW5kSWNvbiAmJiBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICBcImtleVwiOiBcImFwcGVuZC1pY29uXCIsXG4gICAgICAgICAgXCJkZW5zaXR5XCI6IHByb3BzLmRlbnNpdHksXG4gICAgICAgICAgXCJpY29uXCI6IHByb3BzLmFwcGVuZEljb25cbiAgICAgICAgfSwgbnVsbCksIHByb3BzLmFwcGVuZEF2YXRhciAmJiBfY3JlYXRlVk5vZGUoVkF2YXRhciwge1xuICAgICAgICAgIFwia2V5XCI6IFwiYXBwZW5kLWF2YXRhclwiLFxuICAgICAgICAgIFwiZGVuc2l0eVwiOiBwcm9wcy5kZW5zaXR5LFxuICAgICAgICAgIFwiaW1hZ2VcIjogcHJvcHMuYXBwZW5kQXZhdGFyXG4gICAgICAgIH0sIG51bGwpXSkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImFwcGVuZC1kZWZhdWx0c1wiLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogIWhhc0FwcGVuZE1lZGlhLFxuICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgVkF2YXRhcjoge1xuICAgICAgICAgICAgICBkZW5zaXR5OiBwcm9wcy5kZW5zaXR5LFxuICAgICAgICAgICAgICBpbWFnZTogcHJvcHMuYXBwZW5kQXZhdGFyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgVkljb246IHtcbiAgICAgICAgICAgICAgZGVuc2l0eTogcHJvcHMuZGVuc2l0eSxcbiAgICAgICAgICAgICAgaWNvbjogcHJvcHMuYXBwZW5kSWNvblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFZMaXN0SXRlbUFjdGlvbjoge1xuICAgICAgICAgICAgICBlbmQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMuYXBwZW5kPy4oc2xvdFByb3BzLnZhbHVlKV1cbiAgICAgICAgfSksIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtbGlzdC1pdGVtX19zcGFjZXJcIlxuICAgICAgICB9LCBudWxsKV0pXVxuICAgICAgfSksIFtbX3Jlc29sdmVEaXJlY3RpdmUoXCJyaXBwbGVcIiksIGlzQ2xpY2thYmxlLnZhbHVlICYmIHByb3BzLnJpcHBsZV1dKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vkxpc3RJdGVtLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlVGV4dENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkxpc3RTdWJoZWFkZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbG9yOiBTdHJpbmcsXG4gIGluc2V0OiBCb29sZWFuLFxuICBzdGlja3k6IEJvb2xlYW4sXG4gIHRpdGxlOiBTdHJpbmcsXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKVxufSwgJ1ZMaXN0U3ViaGVhZGVyJyk7XG5leHBvcnQgY29uc3QgVkxpc3RTdWJoZWFkZXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkxpc3RTdWJoZWFkZXInLFxuICBwcm9wczogbWFrZVZMaXN0U3ViaGVhZGVyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcih0b1JlZihwcm9wcywgJ2NvbG9yJykpO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBoYXNUZXh0ID0gISEoc2xvdHMuZGVmYXVsdCB8fCBwcm9wcy50aXRsZSk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1saXN0LXN1YmhlYWRlcicsIHtcbiAgICAgICAgICAndi1saXN0LXN1YmhlYWRlci0taW5zZXQnOiBwcm9wcy5pbnNldCxcbiAgICAgICAgICAndi1saXN0LXN1YmhlYWRlci0tc3RpY2t5JzogcHJvcHMuc3RpY2t5XG4gICAgICAgIH0sIHRleHRDb2xvckNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbe1xuICAgICAgICAgIHRleHRDb2xvclN0eWxlc1xuICAgICAgICB9LCBwcm9wcy5zdHlsZV1cbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW2hhc1RleHQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1saXN0LXN1YmhlYWRlcl9fdGV4dFwiXG4gICAgICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKSA/PyBwcm9wcy50aXRsZV0pXVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZMaXN0U3ViaGVhZGVyLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkRpdmlkZXIuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VUZXh0Q29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkRpdmlkZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbG9yOiBTdHJpbmcsXG4gIGluc2V0OiBCb29sZWFuLFxuICBsZW5ndGg6IFtOdW1iZXIsIFN0cmluZ10sXG4gIHRoaWNrbmVzczogW051bWJlciwgU3RyaW5nXSxcbiAgdmVydGljYWw6IEJvb2xlYW4sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpXG59LCAnVkRpdmlkZXInKTtcbmV4cG9ydCBjb25zdCBWRGl2aWRlciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWRGl2aWRlcicsXG4gIHByb3BzOiBtYWtlVkRpdmlkZXJQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBhdHRyc1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRleHRDb2xvckNsYXNzZXMsXG4gICAgICB0ZXh0Q29sb3JTdHlsZXNcbiAgICB9ID0gdXNlVGV4dENvbG9yKHRvUmVmKHByb3BzLCAnY29sb3InKSk7XG4gICAgY29uc3QgZGl2aWRlclN0eWxlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlcyA9IHt9O1xuICAgICAgaWYgKHByb3BzLmxlbmd0aCkge1xuICAgICAgICBzdHlsZXNbcHJvcHMudmVydGljYWwgPyAnbWF4SGVpZ2h0JyA6ICdtYXhXaWR0aCddID0gY29udmVydFRvVW5pdChwcm9wcy5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLnRoaWNrbmVzcykge1xuICAgICAgICBzdHlsZXNbcHJvcHMudmVydGljYWwgPyAnYm9yZGVyUmlnaHRXaWR0aCcgOiAnYm9yZGVyVG9wV2lkdGgnXSA9IGNvbnZlcnRUb1VuaXQocHJvcHMudGhpY2tuZXNzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShcImhyXCIsIHtcbiAgICAgIFwiY2xhc3NcIjogW3tcbiAgICAgICAgJ3YtZGl2aWRlcic6IHRydWUsXG4gICAgICAgICd2LWRpdmlkZXItLWluc2V0JzogcHJvcHMuaW5zZXQsXG4gICAgICAgICd2LWRpdmlkZXItLXZlcnRpY2FsJzogcHJvcHMudmVydGljYWxcbiAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBbZGl2aWRlclN0eWxlcy52YWx1ZSwgdGV4dENvbG9yU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV0sXG4gICAgICBcImFyaWEtb3JpZW50YXRpb25cIjogIWF0dHJzLnJvbGUgfHwgYXR0cnMucm9sZSA9PT0gJ3NlcGFyYXRvcicgPyBwcm9wcy52ZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCcgOiB1bmRlZmluZWQsXG4gICAgICBcInJvbGVcIjogYCR7YXR0cnMucm9sZSB8fCAnc2VwYXJhdG9yJ31gXG4gICAgfSwgbnVsbCkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WRGl2aWRlci5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkxpc3RHcm91cCB9IGZyb20gXCIuL1ZMaXN0R3JvdXAubWpzXCI7XG5pbXBvcnQgeyBWTGlzdEl0ZW0gfSBmcm9tIFwiLi9WTGlzdEl0ZW0ubWpzXCI7XG5pbXBvcnQgeyBWTGlzdFN1YmhlYWRlciB9IGZyb20gXCIuL1ZMaXN0U3ViaGVhZGVyLm1qc1wiO1xuaW1wb3J0IHsgVkRpdmlkZXIgfSBmcm9tIFwiLi4vVkRpdmlkZXIvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY3JlYXRlTGlzdCB9IGZyb20gXCIuL2xpc3QubWpzXCI7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkxpc3RDaGlsZHJlblByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgaXRlbXM6IEFycmF5LFxuICByZXR1cm5PYmplY3Q6IEJvb2xlYW5cbn0sICdWTGlzdENoaWxkcmVuJyk7XG5leHBvcnQgY29uc3QgVkxpc3RDaGlsZHJlbiA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTGlzdENoaWxkcmVuJyxcbiAgcHJvcHM6IG1ha2VWTGlzdENoaWxkcmVuUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjcmVhdGVMaXN0KCk7XG4gICAgcmV0dXJuICgpID0+IHNsb3RzLmRlZmF1bHQ/LigpID8/IHByb3BzLml0ZW1zPy5tYXAoX3JlZjIgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHByb3BzOiBpdGVtUHJvcHMsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHJhdzogaXRlbVxuICAgICAgfSA9IF9yZWYyO1xuICAgICAgaWYgKHR5cGUgPT09ICdkaXZpZGVyJykge1xuICAgICAgICByZXR1cm4gc2xvdHMuZGl2aWRlcj8uKHtcbiAgICAgICAgICBwcm9wczogaXRlbVByb3BzXG4gICAgICAgIH0pID8/IF9jcmVhdGVWTm9kZShWRGl2aWRlciwgaXRlbVByb3BzLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSAnc3ViaGVhZGVyJykge1xuICAgICAgICByZXR1cm4gc2xvdHMuc3ViaGVhZGVyPy4oe1xuICAgICAgICAgIHByb3BzOiBpdGVtUHJvcHNcbiAgICAgICAgfSkgPz8gX2NyZWF0ZVZOb2RlKFZMaXN0U3ViaGVhZGVyLCBpdGVtUHJvcHMsIG51bGwpO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xvdHNXaXRoSXRlbSA9IHtcbiAgICAgICAgc3VidGl0bGU6IHNsb3RzLnN1YnRpdGxlID8gc2xvdFByb3BzID0+IHNsb3RzLnN1YnRpdGxlPy4oe1xuICAgICAgICAgIC4uLnNsb3RQcm9wcyxcbiAgICAgICAgICBpdGVtXG4gICAgICAgIH0pIDogdW5kZWZpbmVkLFxuICAgICAgICBwcmVwZW5kOiBzbG90cy5wcmVwZW5kID8gc2xvdFByb3BzID0+IHNsb3RzLnByZXBlbmQ/Lih7XG4gICAgICAgICAgLi4uc2xvdFByb3BzLFxuICAgICAgICAgIGl0ZW1cbiAgICAgICAgfSkgOiB1bmRlZmluZWQsXG4gICAgICAgIGFwcGVuZDogc2xvdHMuYXBwZW5kID8gc2xvdFByb3BzID0+IHNsb3RzLmFwcGVuZD8uKHtcbiAgICAgICAgICAuLi5zbG90UHJvcHMsXG4gICAgICAgICAgaXRlbVxuICAgICAgICB9KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgdGl0bGU6IHNsb3RzLnRpdGxlID8gc2xvdFByb3BzID0+IHNsb3RzLnRpdGxlPy4oe1xuICAgICAgICAgIC4uLnNsb3RQcm9wcyxcbiAgICAgICAgICBpdGVtXG4gICAgICAgIH0pIDogdW5kZWZpbmVkXG4gICAgICB9O1xuICAgICAgY29uc3QgW2xpc3RHcm91cFByb3BzLCBfMV0gPSBWTGlzdEdyb3VwLmZpbHRlclByb3BzKGl0ZW1Qcm9wcyk7XG4gICAgICByZXR1cm4gY2hpbGRyZW4gPyBfY3JlYXRlVk5vZGUoVkxpc3RHcm91cCwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcInZhbHVlXCI6IGl0ZW1Qcm9wcz8udmFsdWVcbiAgICAgIH0sIGxpc3RHcm91cFByb3BzKSwge1xuICAgICAgICBhY3RpdmF0b3I6IF9yZWYzID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgcHJvcHM6IGFjdGl2YXRvclByb3BzXG4gICAgICAgICAgfSA9IF9yZWYzO1xuICAgICAgICAgIGNvbnN0IGxpc3RJdGVtUHJvcHMgPSB7XG4gICAgICAgICAgICAuLi5pdGVtUHJvcHMsXG4gICAgICAgICAgICAuLi5hY3RpdmF0b3JQcm9wcyxcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wcy5yZXR1cm5PYmplY3QgPyBpdGVtIDogaXRlbVByb3BzLnZhbHVlXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gc2xvdHMuaGVhZGVyID8gc2xvdHMuaGVhZGVyKHtcbiAgICAgICAgICAgIHByb3BzOiBsaXN0SXRlbVByb3BzXG4gICAgICAgICAgfSkgOiBfY3JlYXRlVk5vZGUoVkxpc3RJdGVtLCBsaXN0SXRlbVByb3BzLCBzbG90c1dpdGhJdGVtKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gX2NyZWF0ZVZOb2RlKFZMaXN0Q2hpbGRyZW4sIHtcbiAgICAgICAgICBcIml0ZW1zXCI6IGNoaWxkcmVuXG4gICAgICAgIH0sIHNsb3RzKVxuICAgICAgfSkgOiBzbG90cy5pdGVtID8gc2xvdHMuaXRlbSh7XG4gICAgICAgIHByb3BzOiBpdGVtUHJvcHNcbiAgICAgIH0pIDogX2NyZWF0ZVZOb2RlKFZMaXN0SXRlbSwgX21lcmdlUHJvcHMoaXRlbVByb3BzLCB7XG4gICAgICAgIFwidmFsdWVcIjogcHJvcHMucmV0dXJuT2JqZWN0ID8gaXRlbSA6IGl0ZW1Qcm9wcy52YWx1ZVxuICAgICAgfSksIHNsb3RzV2l0aEl0ZW0pO1xuICAgIH0pO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZMaXN0Q2hpbGRyZW4ubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZGVlcEVxdWFsLCBnZXRQcm9wZXJ0eUZyb21JdGVtLCBwaWNrLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbi8vIENvbXBvc2FibGVzXG5leHBvcnQgY29uc3QgbWFrZUl0ZW1zUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBpdGVtczoge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gIH0sXG4gIGl0ZW1UaXRsZToge1xuICAgIHR5cGU6IFtTdHJpbmcsIEFycmF5LCBGdW5jdGlvbl0sXG4gICAgZGVmYXVsdDogJ3RpdGxlJ1xuICB9LFxuICBpdGVtVmFsdWU6IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBBcnJheSwgRnVuY3Rpb25dLFxuICAgIGRlZmF1bHQ6ICd2YWx1ZSdcbiAgfSxcbiAgaXRlbUNoaWxkcmVuOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZywgQXJyYXksIEZ1bmN0aW9uXSxcbiAgICBkZWZhdWx0OiAnY2hpbGRyZW4nXG4gIH0sXG4gIGl0ZW1Qcm9wczoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmcsIEFycmF5LCBGdW5jdGlvbl0sXG4gICAgZGVmYXVsdDogJ3Byb3BzJ1xuICB9LFxuICByZXR1cm5PYmplY3Q6IEJvb2xlYW4sXG4gIHZhbHVlQ29tcGFyYXRvcjoge1xuICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgIGRlZmF1bHQ6IGRlZXBFcXVhbFxuICB9XG59LCAnbGlzdC1pdGVtcycpO1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUl0ZW0ocHJvcHMsIGl0ZW0pIHtcbiAgY29uc3QgdGl0bGUgPSBnZXRQcm9wZXJ0eUZyb21JdGVtKGl0ZW0sIHByb3BzLml0ZW1UaXRsZSwgaXRlbSk7XG4gIGNvbnN0IHZhbHVlID0gZ2V0UHJvcGVydHlGcm9tSXRlbShpdGVtLCBwcm9wcy5pdGVtVmFsdWUsIHRpdGxlKTtcbiAgY29uc3QgY2hpbGRyZW4gPSBnZXRQcm9wZXJ0eUZyb21JdGVtKGl0ZW0sIHByb3BzLml0ZW1DaGlsZHJlbik7XG4gIGNvbnN0IGl0ZW1Qcm9wcyA9IHByb3BzLml0ZW1Qcm9wcyA9PT0gdHJ1ZSA/IHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICE9IG51bGwgJiYgIUFycmF5LmlzQXJyYXkoaXRlbSkgPyAnY2hpbGRyZW4nIGluIGl0ZW0gPyBwaWNrKGl0ZW0sIFsnY2hpbGRyZW4nXSlbMV0gOiBpdGVtIDogdW5kZWZpbmVkIDogZ2V0UHJvcGVydHlGcm9tSXRlbShpdGVtLCBwcm9wcy5pdGVtUHJvcHMpO1xuICBjb25zdCBfcHJvcHMgPSB7XG4gICAgdGl0bGUsXG4gICAgdmFsdWUsXG4gICAgLi4uaXRlbVByb3BzXG4gIH07XG4gIHJldHVybiB7XG4gICAgdGl0bGU6IFN0cmluZyhfcHJvcHMudGl0bGUgPz8gJycpLFxuICAgIHZhbHVlOiBfcHJvcHMudmFsdWUsXG4gICAgcHJvcHM6IF9wcm9wcyxcbiAgICBjaGlsZHJlbjogQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyB0cmFuc2Zvcm1JdGVtcyhwcm9wcywgY2hpbGRyZW4pIDogdW5kZWZpbmVkLFxuICAgIHJhdzogaXRlbVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUl0ZW1zKHByb3BzLCBpdGVtcykge1xuICBjb25zdCBhcnJheSA9IFtdO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICBhcnJheS5wdXNoKHRyYW5zZm9ybUl0ZW0ocHJvcHMsIGl0ZW0pKTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlSXRlbXMocHJvcHMpIHtcbiAgY29uc3QgaXRlbXMgPSBjb21wdXRlZCgoKSA9PiB0cmFuc2Zvcm1JdGVtcyhwcm9wcywgcHJvcHMuaXRlbXMpKTtcbiAgY29uc3QgaGFzTnVsbEl0ZW0gPSBjb21wdXRlZCgoKSA9PiBpdGVtcy52YWx1ZS5zb21lKGl0ZW0gPT4gaXRlbS52YWx1ZSA9PT0gbnVsbCkpO1xuICBmdW5jdGlvbiB0cmFuc2Zvcm1Jbih2YWx1ZSkge1xuICAgIGlmICghaGFzTnVsbEl0ZW0udmFsdWUpIHtcbiAgICAgIC8vIFdoZW4gdGhlIG1vZGVsIHZhbHVlIGlzIG51bGwsIHJldHVybiBhbiBJbnRlcm5hbEl0ZW1cbiAgICAgIC8vIGJhc2VkIG9uIG51bGwgb25seSBpZiBudWxsIGlzIG9uZSBvZiB0aGUgaXRlbXNcbiAgICAgIHZhbHVlID0gdmFsdWUuZmlsdGVyKHYgPT4gdiAhPT0gbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS5tYXAodiA9PiB7XG4gICAgICBpZiAocHJvcHMucmV0dXJuT2JqZWN0ICYmIHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBTdHJpbmcgbW9kZWwgdmFsdWUgbWVhbnMgdmFsdWUgaXMgYSBjdXN0b20gaW5wdXQgdmFsdWUgZnJvbSBjb21ib2JveFxuICAgICAgICAvLyBEb24ndCBsb29rIHVwIGV4aXN0aW5nIGl0ZW1zIGlmIHRoZSBtb2RlbCB2YWx1ZSBpcyBhIHN0cmluZ1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtSXRlbShwcm9wcywgdik7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlbXMudmFsdWUuZmluZChpdGVtID0+IHByb3BzLnZhbHVlQ29tcGFyYXRvcih2LCBpdGVtLnZhbHVlKSkgfHwgdHJhbnNmb3JtSXRlbShwcm9wcywgdik7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdHJhbnNmb3JtT3V0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHByb3BzLnJldHVybk9iamVjdCA/IHZhbHVlLm1hcChfcmVmID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIHJhd1xuICAgICAgfSA9IF9yZWY7XG4gICAgICByZXR1cm4gcmF3O1xuICAgIH0pIDogdmFsdWUubWFwKF9yZWYyID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIHZhbHVlXG4gICAgICB9ID0gX3JlZjI7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBpdGVtcyxcbiAgICB0cmFuc2Zvcm1JbixcbiAgICB0cmFuc2Zvcm1PdXRcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3QtaXRlbXMubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WTGlzdC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkxpc3RDaGlsZHJlbiB9IGZyb20gXCIuL1ZMaXN0Q2hpbGRyZW4ubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBjcmVhdGVMaXN0IH0gZnJvbSBcIi4vbGlzdC5tanNcIjtcbmltcG9ydCB7IG1ha2VCb3JkZXJQcm9wcywgdXNlQm9yZGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2JvcmRlci5tanNcIjtcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBwcm92aWRlRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzLCB1c2VEZW5zaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGltZW5zaW9uUHJvcHMsIHVzZURpbWVuc2lvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaW1lbnNpb25zLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUl0ZW1zUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGlzdC1pdGVtcy5tanNcIjtcbmltcG9ydCB7IG1ha2VOZXN0ZWRQcm9wcywgdXNlTmVzdGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL25lc3RlZC9uZXN0ZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzLCB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjtcbmltcG9ydCB7IG1ha2VWYXJpYW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdmFyaWFudC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgcmVmLCBzaGFsbG93UmVmLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBmb2N1c0NoaWxkLCBnZW5lcmljQ29tcG9uZW50LCBnZXRQcm9wZXJ0eUZyb21JdGVtLCBwaWNrLCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUl0ZW0ocHJvcHMsIGl0ZW0pIHtcbiAgY29uc3QgdHlwZSA9IGdldFByb3BlcnR5RnJvbUl0ZW0oaXRlbSwgcHJvcHMuaXRlbVR5cGUsICdpdGVtJyk7XG4gIGNvbnN0IHRpdGxlID0gaXNQcmltaXRpdmUoaXRlbSkgPyBpdGVtIDogZ2V0UHJvcGVydHlGcm9tSXRlbShpdGVtLCBwcm9wcy5pdGVtVGl0bGUpO1xuICBjb25zdCB2YWx1ZSA9IGdldFByb3BlcnR5RnJvbUl0ZW0oaXRlbSwgcHJvcHMuaXRlbVZhbHVlLCB1bmRlZmluZWQpO1xuICBjb25zdCBjaGlsZHJlbiA9IGdldFByb3BlcnR5RnJvbUl0ZW0oaXRlbSwgcHJvcHMuaXRlbUNoaWxkcmVuKTtcbiAgY29uc3QgaXRlbVByb3BzID0gcHJvcHMuaXRlbVByb3BzID09PSB0cnVlID8gcGljayhpdGVtLCBbJ2NoaWxkcmVuJ10pWzFdIDogZ2V0UHJvcGVydHlGcm9tSXRlbShpdGVtLCBwcm9wcy5pdGVtUHJvcHMpO1xuICBjb25zdCBfcHJvcHMgPSB7XG4gICAgdGl0bGUsXG4gICAgdmFsdWUsXG4gICAgLi4uaXRlbVByb3BzXG4gIH07XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICB0aXRsZTogX3Byb3BzLnRpdGxlLFxuICAgIHZhbHVlOiBfcHJvcHMudmFsdWUsXG4gICAgcHJvcHM6IF9wcm9wcyxcbiAgICBjaGlsZHJlbjogdHlwZSA9PT0gJ2l0ZW0nICYmIGNoaWxkcmVuID8gdHJhbnNmb3JtSXRlbXMocHJvcHMsIGNoaWxkcmVuKSA6IHVuZGVmaW5lZCxcbiAgICByYXc6IGl0ZW1cbiAgfTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUl0ZW1zKHByb3BzLCBpdGVtcykge1xuICBjb25zdCBhcnJheSA9IFtdO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICBhcnJheS5wdXNoKHRyYW5zZm9ybUl0ZW0ocHJvcHMsIGl0ZW0pKTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiB1c2VMaXN0SXRlbXMocHJvcHMpIHtcbiAgY29uc3QgaXRlbXMgPSBjb21wdXRlZCgoKSA9PiB0cmFuc2Zvcm1JdGVtcyhwcm9wcywgcHJvcHMuaXRlbXMpKTtcbiAgcmV0dXJuIHtcbiAgICBpdGVtc1xuICB9O1xufVxuZXhwb3J0IGNvbnN0IG1ha2VWTGlzdFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYmFzZUNvbG9yOiBTdHJpbmcsXG4gIC8qIEBkZXByZWNhdGVkICovXG4gIGFjdGl2ZUNvbG9yOiBTdHJpbmcsXG4gIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGJnQ29sb3I6IFN0cmluZyxcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIGxpbmVzOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ10sXG4gICAgZGVmYXVsdDogJ29uZSdcbiAgfSxcbiAgbmF2OiBCb29sZWFuLFxuICAuLi5tYWtlTmVzdGVkUHJvcHMoe1xuICAgIHNlbGVjdFN0cmF0ZWd5OiAnc2luZ2xlLWxlYWYnLFxuICAgIG9wZW5TdHJhdGVneTogJ2xpc3QnXG4gIH0pLFxuICAuLi5tYWtlQm9yZGVyUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZURpbWVuc2lvblByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICBpdGVtVHlwZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAndHlwZSdcbiAgfSxcbiAgLi4ubWFrZUl0ZW1zUHJvcHMoKSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKSxcbiAgLi4ubWFrZVZhcmlhbnRQcm9wcyh7XG4gICAgdmFyaWFudDogJ3RleHQnXG4gIH0pXG59LCAnVkxpc3QnKTtcbmV4cG9ydCBjb25zdCBWTGlzdCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTGlzdCcsXG4gIHByb3BzOiBtYWtlVkxpc3RQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6c2VsZWN0ZWQnOiB2YWwgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm9wZW5lZCc6IHZhbCA9PiB0cnVlLFxuICAgICdjbGljazpvcGVuJzogdmFsdWUgPT4gdHJ1ZSxcbiAgICAnY2xpY2s6c2VsZWN0JzogdmFsdWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIGl0ZW1zXG4gICAgfSA9IHVzZUxpc3RJdGVtcyhwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VCYWNrZ3JvdW5kQ29sb3IodG9SZWYocHJvcHMsICdiZ0NvbG9yJykpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJvcmRlckNsYXNzZXNcbiAgICB9ID0gdXNlQm9yZGVyKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBkZW5zaXR5Q2xhc3Nlc1xuICAgIH0gPSB1c2VEZW5zaXR5KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBkaW1lbnNpb25TdHlsZXNcbiAgICB9ID0gdXNlRGltZW5zaW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgb3BlbixcbiAgICAgIHNlbGVjdFxuICAgIH0gPSB1c2VOZXN0ZWQocHJvcHMpO1xuICAgIGNvbnN0IGxpbmVDbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMubGluZXMgPyBgdi1saXN0LS0ke3Byb3BzLmxpbmVzfS1saW5lYCA6IHVuZGVmaW5lZCk7XG4gICAgY29uc3QgYWN0aXZlQ29sb3IgPSB0b1JlZihwcm9wcywgJ2FjdGl2ZUNvbG9yJyk7XG4gICAgY29uc3QgYmFzZUNvbG9yID0gdG9SZWYocHJvcHMsICdiYXNlQ29sb3InKTtcbiAgICBjb25zdCBjb2xvciA9IHRvUmVmKHByb3BzLCAnY29sb3InKTtcbiAgICBjcmVhdGVMaXN0KCk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZMaXN0R3JvdXA6IHtcbiAgICAgICAgYWN0aXZlQ29sb3IsXG4gICAgICAgIGJhc2VDb2xvcixcbiAgICAgICAgY29sb3JcbiAgICAgIH0sXG4gICAgICBWTGlzdEl0ZW06IHtcbiAgICAgICAgYWN0aXZlQ2xhc3M6IHRvUmVmKHByb3BzLCAnYWN0aXZlQ2xhc3MnKSxcbiAgICAgICAgYWN0aXZlQ29sb3IsXG4gICAgICAgIGJhc2VDb2xvcixcbiAgICAgICAgY29sb3IsXG4gICAgICAgIGRlbnNpdHk6IHRvUmVmKHByb3BzLCAnZGVuc2l0eScpLFxuICAgICAgICBkaXNhYmxlZDogdG9SZWYocHJvcHMsICdkaXNhYmxlZCcpLFxuICAgICAgICBsaW5lczogdG9SZWYocHJvcHMsICdsaW5lcycpLFxuICAgICAgICBuYXY6IHRvUmVmKHByb3BzLCAnbmF2JyksXG4gICAgICAgIHZhcmlhbnQ6IHRvUmVmKHByb3BzLCAndmFyaWFudCcpXG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgaXNGb2N1c2VkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAgY29uc3QgY29udGVudFJlZiA9IHJlZigpO1xuICAgIGZ1bmN0aW9uIG9uRm9jdXNpbihlKSB7XG4gICAgICBpc0ZvY3VzZWQudmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkZvY3Vzb3V0KGUpIHtcbiAgICAgIGlzRm9jdXNlZC52YWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkZvY3VzKGUpIHtcbiAgICAgIGlmICghaXNGb2N1c2VkLnZhbHVlICYmICEoZS5yZWxhdGVkVGFyZ2V0ICYmIGNvbnRlbnRSZWYudmFsdWU/LmNvbnRhaW5zKGUucmVsYXRlZFRhcmdldCkpKSBmb2N1cygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbktleWRvd24oZSkge1xuICAgICAgaWYgKCFjb250ZW50UmVmLnZhbHVlKSByZXR1cm47XG4gICAgICBpZiAoZS5rZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAgIGZvY3VzKCduZXh0Jyk7XG4gICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgICAgZm9jdXMoJ3ByZXYnKTtcbiAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdIb21lJykge1xuICAgICAgICBmb2N1cygnZmlyc3QnKTtcbiAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdFbmQnKSB7XG4gICAgICAgIGZvY3VzKCdsYXN0Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvY3VzKGxvY2F0aW9uKSB7XG4gICAgICBpZiAoY29udGVudFJlZi52YWx1ZSkge1xuICAgICAgICByZXR1cm4gZm9jdXNDaGlsZChjb250ZW50UmVmLnZhbHVlLCBsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcInJlZlwiOiBjb250ZW50UmVmLFxuICAgICAgICBcImNsYXNzXCI6IFsndi1saXN0Jywge1xuICAgICAgICAgICd2LWxpc3QtLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgJ3YtbGlzdC0tbmF2JzogcHJvcHMubmF2XG4gICAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgYmFja2dyb3VuZENvbG9yQ2xhc3Nlcy52YWx1ZSwgYm9yZGVyQ2xhc3Nlcy52YWx1ZSwgZGVuc2l0eUNsYXNzZXMudmFsdWUsIGVsZXZhdGlvbkNsYXNzZXMudmFsdWUsIGxpbmVDbGFzc2VzLnZhbHVlLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFtiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWUsIGRpbWVuc2lvblN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdLFxuICAgICAgICBcInRhYmluZGV4XCI6IHByb3BzLmRpc2FibGVkIHx8IGlzRm9jdXNlZC52YWx1ZSA/IC0xIDogMCxcbiAgICAgICAgXCJyb2xlXCI6IFwibGlzdGJveFwiLFxuICAgICAgICBcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiOiB1bmRlZmluZWQsXG4gICAgICAgIFwib25Gb2N1c2luXCI6IG9uRm9jdXNpbixcbiAgICAgICAgXCJvbkZvY3Vzb3V0XCI6IG9uRm9jdXNvdXQsXG4gICAgICAgIFwib25Gb2N1c1wiOiBvbkZvY3VzLFxuICAgICAgICBcIm9uS2V5ZG93blwiOiBvbktleWRvd25cbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShWTGlzdENoaWxkcmVuLCB7XG4gICAgICAgICAgXCJpdGVtc1wiOiBpdGVtcy52YWx1ZSxcbiAgICAgICAgICBcInJldHVybk9iamVjdFwiOiBwcm9wcy5yZXR1cm5PYmplY3RcbiAgICAgICAgfSwgc2xvdHMpXVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZW4sXG4gICAgICBzZWxlY3QsXG4gICAgICBmb2N1c1xuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vkxpc3QubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZMaXN0SW1nID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1saXN0LWltZycpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vkxpc3RJbWcubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWTGlzdEl0ZW1BY3Rpb25Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHN0YXJ0OiBCb29sZWFuLFxuICBlbmQ6IEJvb2xlYW4sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKVxufSwgJ1ZMaXN0SXRlbUFjdGlvbicpO1xuZXhwb3J0IGNvbnN0IFZMaXN0SXRlbUFjdGlvbiA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTGlzdEl0ZW1BY3Rpb24nLFxuICBwcm9wczogbWFrZVZMaXN0SXRlbUFjdGlvblByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWxpc3QtaXRlbS1hY3Rpb24nLCB7XG4gICAgICAgICd2LWxpc3QtaXRlbS1hY3Rpb24tLXN0YXJ0JzogcHJvcHMuc3RhcnQsXG4gICAgICAgICd2LWxpc3QtaXRlbS1hY3Rpb24tLWVuZCc6IHByb3BzLmVuZFxuICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIHNsb3RzKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZMaXN0SXRlbUFjdGlvbi5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZMaXN0SXRlbU1lZGlhUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBzdGFydDogQm9vbGVhbixcbiAgZW5kOiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKClcbn0sICdWTGlzdEl0ZW1NZWRpYScpO1xuZXhwb3J0IGNvbnN0IFZMaXN0SXRlbU1lZGlhID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZMaXN0SXRlbU1lZGlhJyxcbiAgcHJvcHM6IG1ha2VWTGlzdEl0ZW1NZWRpYVByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWxpc3QtaXRlbS1tZWRpYScsIHtcbiAgICAgICAgICAndi1saXN0LWl0ZW0tbWVkaWEtLXN0YXJ0JzogcHJvcHMuc3RhcnQsXG4gICAgICAgICAgJ3YtbGlzdC1pdGVtLW1lZGlhLS1lbmQnOiBwcm9wcy5lbmRcbiAgICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9LCBzbG90cyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZMaXN0SXRlbU1lZGlhLm1qcy5tYXAiLCIvLyBUeXBlc1xuXG4vKiogQ29udmVydCBhIHBvaW50IGluIGxvY2FsIHNwYWNlIHRvIHZpZXdwb3J0IHNwYWNlICovXG5leHBvcnQgZnVuY3Rpb24gZWxlbWVudFRvVmlld3BvcnQocG9pbnQsIG9mZnNldCkge1xuICByZXR1cm4ge1xuICAgIHg6IHBvaW50LnggKyBvZmZzZXQueCxcbiAgICB5OiBwb2ludC55ICsgb2Zmc2V0LnlcbiAgfTtcbn1cblxuLyoqIENvbnZlcnQgYSBwb2ludCBpbiB2aWV3cG9ydCBzcGFjZSB0byBsb2NhbCBzcGFjZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZpZXdwb3J0VG9FbGVtZW50KHBvaW50LCBvZmZzZXQpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwb2ludC54IC0gb2Zmc2V0LngsXG4gICAgeTogcG9pbnQueSAtIG9mZnNldC55XG4gIH07XG59XG5cbi8qKiBHZXQgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gcG9pbnRzICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T2Zmc2V0KGEsIGIpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBhLnggLSBiLngsXG4gICAgeTogYS55IC0gYi55XG4gIH07XG59XG5cbi8qKiBDb252ZXJ0IGFuIGFuY2hvciBvYmplY3QgdG8gYSBwb2ludCBpbiBsb2NhbCBzcGFjZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFuY2hvclRvUG9pbnQoYW5jaG9yLCBib3gpIHtcbiAgaWYgKGFuY2hvci5zaWRlID09PSAndG9wJyB8fCBhbmNob3Iuc2lkZSA9PT0gJ2JvdHRvbScpIHtcbiAgICBjb25zdCB7XG4gICAgICBzaWRlLFxuICAgICAgYWxpZ25cbiAgICB9ID0gYW5jaG9yO1xuICAgIGNvbnN0IHggPSBhbGlnbiA9PT0gJ2xlZnQnID8gMCA6IGFsaWduID09PSAnY2VudGVyJyA/IGJveC53aWR0aCAvIDIgOiBhbGlnbiA9PT0gJ3JpZ2h0JyA/IGJveC53aWR0aCA6IGFsaWduO1xuICAgIGNvbnN0IHkgPSBzaWRlID09PSAndG9wJyA/IDAgOiBzaWRlID09PSAnYm90dG9tJyA/IGJveC5oZWlnaHQgOiBzaWRlO1xuICAgIHJldHVybiBlbGVtZW50VG9WaWV3cG9ydCh7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH0sIGJveCk7XG4gIH0gZWxzZSBpZiAoYW5jaG9yLnNpZGUgPT09ICdsZWZ0JyB8fCBhbmNob3Iuc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgIGNvbnN0IHtcbiAgICAgIHNpZGUsXG4gICAgICBhbGlnblxuICAgIH0gPSBhbmNob3I7XG4gICAgY29uc3QgeCA9IHNpZGUgPT09ICdsZWZ0JyA/IDAgOiBzaWRlID09PSAncmlnaHQnID8gYm94LndpZHRoIDogc2lkZTtcbiAgICBjb25zdCB5ID0gYWxpZ24gPT09ICd0b3AnID8gMCA6IGFsaWduID09PSAnY2VudGVyJyA/IGJveC5oZWlnaHQgLyAyIDogYWxpZ24gPT09ICdib3R0b20nID8gYm94LmhlaWdodCA6IGFsaWduO1xuICAgIHJldHVybiBlbGVtZW50VG9WaWV3cG9ydCh7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH0sIGJveCk7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnRUb1ZpZXdwb3J0KHtcbiAgICB4OiBib3gud2lkdGggLyAyLFxuICAgIHk6IGJveC5oZWlnaHQgLyAyXG4gIH0sIGJveCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb2ludC5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVRvZ2dsZVNjb3BlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RvZ2dsZVNjb3BlLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBuZXh0VGljaywgb25TY29wZURpc3Bvc2UsIHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgYW5jaG9yVG9Qb2ludCwgZ2V0T2Zmc2V0IH0gZnJvbSBcIi4vdXRpbC9wb2ludC5tanNcIjtcbmltcG9ydCB7IGNsYW1wLCBjb25zb2xlRXJyb3IsIGNvbnZlcnRUb1VuaXQsIGRlc3RydWN0Q29tcHV0ZWQsIGZsaXBBbGlnbiwgZmxpcENvcm5lciwgZmxpcFNpZGUsIGdldEF4aXMsIGdldFNjcm9sbFBhcmVudHMsIElOX0JST1dTRVIsIGlzRml4ZWRQb3NpdGlvbiwgbnVsbGlmeVRyYW5zZm9ybXMsIHBhcnNlQW5jaG9yLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmltcG9ydCB7IEJveCwgZ2V0T3ZlcmZsb3cgfSBmcm9tIFwiLi4vLi4vdXRpbC9ib3gubWpzXCI7IC8vIFR5cGVzXG5jb25zdCBsb2NhdGlvblN0cmF0ZWdpZXMgPSB7XG4gIHN0YXRpYzogc3RhdGljTG9jYXRpb25TdHJhdGVneSxcbiAgLy8gc3BlY2lmaWMgdmlld3BvcnQgcG9zaXRpb24sIHVzdWFsbHkgY2VudGVyZWRcbiAgY29ubmVjdGVkOiBjb25uZWN0ZWRMb2NhdGlvblN0cmF0ZWd5IC8vIGNvbm5lY3RlZCB0byBhIGNlcnRhaW4gZWxlbWVudFxufTtcblxuZXhwb3J0IGNvbnN0IG1ha2VMb2NhdGlvblN0cmF0ZWd5UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBsb2NhdGlvblN0cmF0ZWd5OiB7XG4gICAgdHlwZTogW1N0cmluZywgRnVuY3Rpb25dLFxuICAgIGRlZmF1bHQ6ICdzdGF0aWMnLFxuICAgIHZhbGlkYXRvcjogdmFsID0+IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicgfHwgdmFsIGluIGxvY2F0aW9uU3RyYXRlZ2llc1xuICB9LFxuICBsb2NhdGlvbjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnYm90dG9tJ1xuICB9LFxuICBvcmlnaW46IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2F1dG8nXG4gIH0sXG4gIG9mZnNldDogW051bWJlciwgU3RyaW5nLCBBcnJheV1cbn0sICdWT3ZlcmxheS1sb2NhdGlvbi1zdHJhdGVnaWVzJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlTG9jYXRpb25TdHJhdGVnaWVzKHByb3BzLCBkYXRhKSB7XG4gIGNvbnN0IGNvbnRlbnRTdHlsZXMgPSByZWYoe30pO1xuICBjb25zdCB1cGRhdGVMb2NhdGlvbiA9IHJlZigpO1xuICBpZiAoSU5fQlJPV1NFUikge1xuICAgIHVzZVRvZ2dsZVNjb3BlKCgpID0+ICEhKGRhdGEuaXNBY3RpdmUudmFsdWUgJiYgcHJvcHMubG9jYXRpb25TdHJhdGVneSksIHJlc2V0ID0+IHtcbiAgICAgIHdhdGNoKCgpID0+IHByb3BzLmxvY2F0aW9uU3RyYXRlZ3ksIHJlc2V0KTtcbiAgICAgIG9uU2NvcGVEaXNwb3NlKCgpID0+IHtcbiAgICAgICAgdXBkYXRlTG9jYXRpb24udmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHMubG9jYXRpb25TdHJhdGVneSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB1cGRhdGVMb2NhdGlvbi52YWx1ZSA9IHByb3BzLmxvY2F0aW9uU3RyYXRlZ3koZGF0YSwgcHJvcHMsIGNvbnRlbnRTdHlsZXMpPy51cGRhdGVMb2NhdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVwZGF0ZUxvY2F0aW9uLnZhbHVlID0gbG9jYXRpb25TdHJhdGVnaWVzW3Byb3BzLmxvY2F0aW9uU3RyYXRlZ3ldKGRhdGEsIHByb3BzLCBjb250ZW50U3R5bGVzKT8udXBkYXRlTG9jYXRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgb25TY29wZURpc3Bvc2UoKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKTtcbiAgICAgIHVwZGF0ZUxvY2F0aW9uLnZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9uUmVzaXplKGUpIHtcbiAgICB1cGRhdGVMb2NhdGlvbi52YWx1ZT8uKGUpO1xuICB9XG4gIHJldHVybiB7XG4gICAgY29udGVudFN0eWxlcyxcbiAgICB1cGRhdGVMb2NhdGlvblxuICB9O1xufVxuZnVuY3Rpb24gc3RhdGljTG9jYXRpb25TdHJhdGVneSgpIHtcbiAgLy8gVE9ET1xufVxuXG4vKiogR2V0IHNpemUgb2YgZWxlbWVudCBpZ25vcmluZyBtYXgtd2lkdGgvbWF4LWhlaWdodCAqL1xuZnVuY3Rpb24gZ2V0SW50cmluc2ljU2l6ZShlbCwgaXNSdGwpIHtcbiAgLy8gY29uc3Qgc2Nyb2xsYWJsZXMgPSBuZXcgTWFwPEVsZW1lbnQsIFtudW1iZXIsIG51bWJlcl0+KClcbiAgLy8gZWwucXVlcnlTZWxlY3RvckFsbCgnKicpLmZvckVhY2goZWwgPT4ge1xuICAvLyAgIGNvbnN0IHggPSBlbC5zY3JvbGxMZWZ0XG4gIC8vICAgY29uc3QgeSA9IGVsLnNjcm9sbFRvcFxuICAvLyAgIGlmICh4IHx8IHkpIHtcbiAgLy8gICAgIHNjcm9sbGFibGVzLnNldChlbCwgW3gsIHldKVxuICAvLyAgIH1cbiAgLy8gfSlcblxuICAvLyBjb25zdCBpbml0aWFsTWF4V2lkdGggPSBlbC5zdHlsZS5tYXhXaWR0aFxuICAvLyBjb25zdCBpbml0aWFsTWF4SGVpZ2h0ID0gZWwuc3R5bGUubWF4SGVpZ2h0XG4gIC8vIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdtYXgtd2lkdGgnKVxuICAvLyBlbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnbWF4LWhlaWdodCcpXG5cbiAgaWYgKGlzUnRsKSB7XG4gICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2xlZnQnKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncmlnaHQnKTtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzb25hcmpzL3ByZWZlci1pbW1lZGlhdGUtcmV0dXJuICovXG4gIGNvbnN0IGNvbnRlbnRCb3ggPSBudWxsaWZ5VHJhbnNmb3JtcyhlbCk7XG4gIGlmIChpc1J0bCkge1xuICAgIGNvbnRlbnRCb3gueCArPSBwYXJzZUZsb2F0KGVsLnN0eWxlLnJpZ2h0IHx8IDApO1xuICB9IGVsc2Uge1xuICAgIGNvbnRlbnRCb3gueCAtPSBwYXJzZUZsb2F0KGVsLnN0eWxlLmxlZnQgfHwgMCk7XG4gIH1cbiAgY29udGVudEJveC55IC09IHBhcnNlRmxvYXQoZWwuc3R5bGUudG9wIHx8IDApO1xuXG4gIC8vIGVsLnN0eWxlLm1heFdpZHRoID0gaW5pdGlhbE1heFdpZHRoXG4gIC8vIGVsLnN0eWxlLm1heEhlaWdodCA9IGluaXRpYWxNYXhIZWlnaHRcbiAgLy8gc2Nyb2xsYWJsZXMuZm9yRWFjaCgocG9zaXRpb24sIGVsKSA9PiB7XG4gIC8vICAgZWwuc2Nyb2xsVG8oLi4ucG9zaXRpb24pXG4gIC8vIH0pXG5cbiAgcmV0dXJuIGNvbnRlbnRCb3g7XG59XG5mdW5jdGlvbiBjb25uZWN0ZWRMb2NhdGlvblN0cmF0ZWd5KGRhdGEsIHByb3BzLCBjb250ZW50U3R5bGVzKSB7XG4gIGNvbnN0IGFjdGl2YXRvckZpeGVkID0gaXNGaXhlZFBvc2l0aW9uKGRhdGEuYWN0aXZhdG9yRWwudmFsdWUpO1xuICBpZiAoYWN0aXZhdG9yRml4ZWQpIHtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRTdHlsZXMudmFsdWUsIHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgdG9wOiAwLFxuICAgICAgW2RhdGEuaXNSdGwudmFsdWUgPyAncmlnaHQnIDogJ2xlZnQnXTogMFxuICAgIH0pO1xuICB9XG4gIGNvbnN0IHtcbiAgICBwcmVmZXJyZWRBbmNob3IsXG4gICAgcHJlZmVycmVkT3JpZ2luXG4gIH0gPSBkZXN0cnVjdENvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBwYXJzZWRBbmNob3IgPSBwYXJzZUFuY2hvcihwcm9wcy5sb2NhdGlvbiwgZGF0YS5pc1J0bC52YWx1ZSk7XG4gICAgY29uc3QgcGFyc2VkT3JpZ2luID0gcHJvcHMub3JpZ2luID09PSAnb3ZlcmxhcCcgPyBwYXJzZWRBbmNob3IgOiBwcm9wcy5vcmlnaW4gPT09ICdhdXRvJyA/IGZsaXBTaWRlKHBhcnNlZEFuY2hvcikgOiBwYXJzZUFuY2hvcihwcm9wcy5vcmlnaW4sIGRhdGEuaXNSdGwudmFsdWUpO1xuXG4gICAgLy8gU29tZSBjb21iaW5hdGlvbnMgb2YgcHJvcHMgbWF5IHByb2R1Y2UgYW4gaW52YWxpZCBvcmlnaW5cbiAgICBpZiAocGFyc2VkQW5jaG9yLnNpZGUgPT09IHBhcnNlZE9yaWdpbi5zaWRlICYmIHBhcnNlZEFuY2hvci5hbGlnbiA9PT0gZmxpcEFsaWduKHBhcnNlZE9yaWdpbikuYWxpZ24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZWZlcnJlZEFuY2hvcjogZmxpcENvcm5lcihwYXJzZWRBbmNob3IpLFxuICAgICAgICBwcmVmZXJyZWRPcmlnaW46IGZsaXBDb3JuZXIocGFyc2VkT3JpZ2luKVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJlZmVycmVkQW5jaG9yOiBwYXJzZWRBbmNob3IsXG4gICAgICAgIHByZWZlcnJlZE9yaWdpbjogcGFyc2VkT3JpZ2luXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IFttaW5XaWR0aCwgbWluSGVpZ2h0LCBtYXhXaWR0aCwgbWF4SGVpZ2h0XSA9IFsnbWluV2lkdGgnLCAnbWluSGVpZ2h0JywgJ21heFdpZHRoJywgJ21heEhlaWdodCddLm1hcChrZXkgPT4ge1xuICAgIHJldHVybiBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCB2YWwgPSBwYXJzZUZsb2F0KHByb3BzW2tleV0pO1xuICAgICAgcmV0dXJuIGlzTmFOKHZhbCkgPyBJbmZpbml0eSA6IHZhbDtcbiAgICB9KTtcbiAgfSk7XG4gIGNvbnN0IG9mZnNldCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcy5vZmZzZXQpKSB7XG4gICAgICByZXR1cm4gcHJvcHMub2Zmc2V0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb3BzLm9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IG9mZnNldCA9IHByb3BzLm9mZnNldC5zcGxpdCgnICcpLm1hcChwYXJzZUZsb2F0KTtcbiAgICAgIGlmIChvZmZzZXQubGVuZ3RoIDwgMikgb2Zmc2V0LnB1c2goMCk7XG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHByb3BzLm9mZnNldCA9PT0gJ251bWJlcicgPyBbcHJvcHMub2Zmc2V0LCAwXSA6IFswLCAwXTtcbiAgfSk7XG4gIGxldCBvYnNlcnZlID0gZmFsc2U7XG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKCgpID0+IHtcbiAgICBpZiAob2JzZXJ2ZSkgdXBkYXRlTG9jYXRpb24oKTtcbiAgfSk7XG4gIHdhdGNoKFtkYXRhLmFjdGl2YXRvckVsLCBkYXRhLmNvbnRlbnRFbF0sIChfcmVmLCBfcmVmMikgPT4ge1xuICAgIGxldCBbbmV3QWN0aXZhdG9yRWwsIG5ld0NvbnRlbnRFbF0gPSBfcmVmO1xuICAgIGxldCBbb2xkQWN0aXZhdG9yRWwsIG9sZENvbnRlbnRFbF0gPSBfcmVmMjtcbiAgICBpZiAob2xkQWN0aXZhdG9yRWwpIG9ic2VydmVyLnVub2JzZXJ2ZShvbGRBY3RpdmF0b3JFbCk7XG4gICAgaWYgKG5ld0FjdGl2YXRvckVsKSBvYnNlcnZlci5vYnNlcnZlKG5ld0FjdGl2YXRvckVsKTtcbiAgICBpZiAob2xkQ29udGVudEVsKSBvYnNlcnZlci51bm9ic2VydmUob2xkQ29udGVudEVsKTtcbiAgICBpZiAobmV3Q29udGVudEVsKSBvYnNlcnZlci5vYnNlcnZlKG5ld0NvbnRlbnRFbCk7XG4gIH0sIHtcbiAgICBpbW1lZGlhdGU6IHRydWVcbiAgfSk7XG4gIG9uU2NvcGVEaXNwb3NlKCgpID0+IHtcbiAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50c1xuICBmdW5jdGlvbiB1cGRhdGVMb2NhdGlvbigpIHtcbiAgICBvYnNlcnZlID0gZmFsc2U7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBvYnNlcnZlID0gdHJ1ZSk7XG4gICAgfSk7XG4gICAgaWYgKCFkYXRhLmFjdGl2YXRvckVsLnZhbHVlIHx8ICFkYXRhLmNvbnRlbnRFbC52YWx1ZSkgcmV0dXJuO1xuICAgIGNvbnN0IHRhcmdldEJveCA9IGRhdGEuYWN0aXZhdG9yRWwudmFsdWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgY29udGVudEJveCA9IGdldEludHJpbnNpY1NpemUoZGF0YS5jb250ZW50RWwudmFsdWUsIGRhdGEuaXNSdGwudmFsdWUpO1xuICAgIGNvbnN0IHNjcm9sbFBhcmVudHMgPSBnZXRTY3JvbGxQYXJlbnRzKGRhdGEuY29udGVudEVsLnZhbHVlKTtcbiAgICBjb25zdCB2aWV3cG9ydE1hcmdpbiA9IDEyO1xuICAgIGlmICghc2Nyb2xsUGFyZW50cy5sZW5ndGgpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMucHVzaChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICAgICAgaWYgKCEoZGF0YS5jb250ZW50RWwudmFsdWUuc3R5bGUudG9wICYmIGRhdGEuY29udGVudEVsLnZhbHVlLnN0eWxlLmxlZnQpKSB7XG4gICAgICAgIGNvbnRlbnRCb3gueCAtPSBwYXJzZUZsb2F0KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLXYtYm9keS1zY3JvbGwteCcpIHx8IDApO1xuICAgICAgICBjb250ZW50Qm94LnkgLT0gcGFyc2VGbG9hdChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS12LWJvZHktc2Nyb2xsLXknKSB8fCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgdmlld3BvcnQgPSBzY3JvbGxQYXJlbnRzLnJlZHVjZSgoYm94LCBlbCkgPT4ge1xuICAgICAgY29uc3QgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3Qgc2Nyb2xsQm94ID0gbmV3IEJveCh7XG4gICAgICAgIHg6IGVsID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyAwIDogcmVjdC54LFxuICAgICAgICB5OiBlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID8gMCA6IHJlY3QueSxcbiAgICAgICAgd2lkdGg6IGVsLmNsaWVudFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGVsLmNsaWVudEhlaWdodFxuICAgICAgfSk7XG4gICAgICBpZiAoYm94KSB7XG4gICAgICAgIHJldHVybiBuZXcgQm94KHtcbiAgICAgICAgICB4OiBNYXRoLm1heChib3gubGVmdCwgc2Nyb2xsQm94LmxlZnQpLFxuICAgICAgICAgIHk6IE1hdGgubWF4KGJveC50b3AsIHNjcm9sbEJveC50b3ApLFxuICAgICAgICAgIHdpZHRoOiBNYXRoLm1pbihib3gucmlnaHQsIHNjcm9sbEJveC5yaWdodCkgLSBNYXRoLm1heChib3gubGVmdCwgc2Nyb2xsQm94LmxlZnQpLFxuICAgICAgICAgIGhlaWdodDogTWF0aC5taW4oYm94LmJvdHRvbSwgc2Nyb2xsQm94LmJvdHRvbSkgLSBNYXRoLm1heChib3gudG9wLCBzY3JvbGxCb3gudG9wKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzY3JvbGxCb3g7XG4gICAgfSwgdW5kZWZpbmVkKTtcbiAgICB2aWV3cG9ydC54ICs9IHZpZXdwb3J0TWFyZ2luO1xuICAgIHZpZXdwb3J0LnkgKz0gdmlld3BvcnRNYXJnaW47XG4gICAgdmlld3BvcnQud2lkdGggLT0gdmlld3BvcnRNYXJnaW4gKiAyO1xuICAgIHZpZXdwb3J0LmhlaWdodCAtPSB2aWV3cG9ydE1hcmdpbiAqIDI7XG4gICAgbGV0IHBsYWNlbWVudCA9IHtcbiAgICAgIGFuY2hvcjogcHJlZmVycmVkQW5jaG9yLnZhbHVlLFxuICAgICAgb3JpZ2luOiBwcmVmZXJyZWRPcmlnaW4udmFsdWVcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3coX3BsYWNlbWVudCkge1xuICAgICAgY29uc3QgYm94ID0gbmV3IEJveChjb250ZW50Qm94KTtcbiAgICAgIGNvbnN0IHRhcmdldFBvaW50ID0gYW5jaG9yVG9Qb2ludChfcGxhY2VtZW50LmFuY2hvciwgdGFyZ2V0Qm94KTtcbiAgICAgIGNvbnN0IGNvbnRlbnRQb2ludCA9IGFuY2hvclRvUG9pbnQoX3BsYWNlbWVudC5vcmlnaW4sIGJveCk7XG4gICAgICBsZXQge1xuICAgICAgICB4LFxuICAgICAgICB5XG4gICAgICB9ID0gZ2V0T2Zmc2V0KHRhcmdldFBvaW50LCBjb250ZW50UG9pbnQpO1xuICAgICAgc3dpdGNoIChfcGxhY2VtZW50LmFuY2hvci5zaWRlKSB7XG4gICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgeSAtPSBvZmZzZXQudmFsdWVbMF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgeSArPSBvZmZzZXQudmFsdWVbMF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgIHggLT0gb2Zmc2V0LnZhbHVlWzBdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgeCArPSBvZmZzZXQudmFsdWVbMF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKF9wbGFjZW1lbnQuYW5jaG9yLmFsaWduKSB7XG4gICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgeSAtPSBvZmZzZXQudmFsdWVbMV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgeSArPSBvZmZzZXQudmFsdWVbMV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgIHggLT0gb2Zmc2V0LnZhbHVlWzFdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgeCArPSBvZmZzZXQudmFsdWVbMV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBib3gueCArPSB4O1xuICAgICAgYm94LnkgKz0geTtcbiAgICAgIGJveC53aWR0aCA9IE1hdGgubWluKGJveC53aWR0aCwgbWF4V2lkdGgudmFsdWUpO1xuICAgICAgYm94LmhlaWdodCA9IE1hdGgubWluKGJveC5oZWlnaHQsIG1heEhlaWdodC52YWx1ZSk7XG4gICAgICBjb25zdCBvdmVyZmxvd3MgPSBnZXRPdmVyZmxvdyhib3gsIHZpZXdwb3J0KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG92ZXJmbG93cyxcbiAgICAgICAgeCxcbiAgICAgICAgeVxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHggPSAwO1xuICAgIGxldCB5ID0gMDtcbiAgICBjb25zdCBhdmFpbGFibGUgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG4gICAgY29uc3QgZmxpcHBlZCA9IHtcbiAgICAgIHg6IGZhbHNlLFxuICAgICAgeTogZmFsc2VcbiAgICB9O1xuICAgIGxldCByZXNldHMgPSAtMTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKHJlc2V0cysrID4gMTApIHtcbiAgICAgICAgY29uc29sZUVycm9yKCdJbmZpbml0ZSBsb29wIGRldGVjdGVkIGluIGNvbm5lY3RlZExvY2F0aW9uU3RyYXRlZ3knKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjb25zdCB7XG4gICAgICAgIHg6IF94LFxuICAgICAgICB5OiBfeSxcbiAgICAgICAgb3ZlcmZsb3dzXG4gICAgICB9ID0gY2hlY2tPdmVyZmxvdyhwbGFjZW1lbnQpO1xuICAgICAgeCArPSBfeDtcbiAgICAgIHkgKz0gX3k7XG4gICAgICBjb250ZW50Qm94LnggKz0gX3g7XG4gICAgICBjb250ZW50Qm94LnkgKz0gX3k7XG5cbiAgICAgIC8vIGZsaXBcbiAgICAgIHtcbiAgICAgICAgY29uc3QgYXhpcyA9IGdldEF4aXMocGxhY2VtZW50LmFuY2hvcik7XG4gICAgICAgIGNvbnN0IGhhc092ZXJmbG93WCA9IG92ZXJmbG93cy54LmJlZm9yZSB8fCBvdmVyZmxvd3MueC5hZnRlcjtcbiAgICAgICAgY29uc3QgaGFzT3ZlcmZsb3dZID0gb3ZlcmZsb3dzLnkuYmVmb3JlIHx8IG92ZXJmbG93cy55LmFmdGVyO1xuICAgICAgICBsZXQgcmVzZXQgPSBmYWxzZTtcbiAgICAgICAgWyd4JywgJ3knXS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3gnICYmIGhhc092ZXJmbG93WCAmJiAhZmxpcHBlZC54IHx8IGtleSA9PT0gJ3knICYmIGhhc092ZXJmbG93WSAmJiAhZmxpcHBlZC55KSB7XG4gICAgICAgICAgICBjb25zdCBuZXdQbGFjZW1lbnQgPSB7XG4gICAgICAgICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgICAgICAgIC4uLnBsYWNlbWVudC5hbmNob3JcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb3JpZ2luOiB7XG4gICAgICAgICAgICAgICAgLi4ucGxhY2VtZW50Lm9yaWdpblxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZmxpcCA9IGtleSA9PT0gJ3gnID8gYXhpcyA9PT0gJ3knID8gZmxpcEFsaWduIDogZmxpcFNpZGUgOiBheGlzID09PSAneScgPyBmbGlwU2lkZSA6IGZsaXBBbGlnbjtcbiAgICAgICAgICAgIG5ld1BsYWNlbWVudC5hbmNob3IgPSBmbGlwKG5ld1BsYWNlbWVudC5hbmNob3IpO1xuICAgICAgICAgICAgbmV3UGxhY2VtZW50Lm9yaWdpbiA9IGZsaXAobmV3UGxhY2VtZW50Lm9yaWdpbik7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgIG92ZXJmbG93czogbmV3T3ZlcmZsb3dzXG4gICAgICAgICAgICB9ID0gY2hlY2tPdmVyZmxvdyhuZXdQbGFjZW1lbnQpO1xuICAgICAgICAgICAgaWYgKG5ld092ZXJmbG93c1trZXldLmJlZm9yZSA8PSBvdmVyZmxvd3Nba2V5XS5iZWZvcmUgJiYgbmV3T3ZlcmZsb3dzW2tleV0uYWZ0ZXIgPD0gb3ZlcmZsb3dzW2tleV0uYWZ0ZXIgfHwgbmV3T3ZlcmZsb3dzW2tleV0uYmVmb3JlICsgbmV3T3ZlcmZsb3dzW2tleV0uYWZ0ZXIgPCAob3ZlcmZsb3dzW2tleV0uYmVmb3JlICsgb3ZlcmZsb3dzW2tleV0uYWZ0ZXIpIC8gMikge1xuICAgICAgICAgICAgICBwbGFjZW1lbnQgPSBuZXdQbGFjZW1lbnQ7XG4gICAgICAgICAgICAgIHJlc2V0ID0gZmxpcHBlZFtrZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzZXQpIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBzaGlmdFxuICAgICAgaWYgKG92ZXJmbG93cy54LmJlZm9yZSkge1xuICAgICAgICB4ICs9IG92ZXJmbG93cy54LmJlZm9yZTtcbiAgICAgICAgY29udGVudEJveC54ICs9IG92ZXJmbG93cy54LmJlZm9yZTtcbiAgICAgIH1cbiAgICAgIGlmIChvdmVyZmxvd3MueC5hZnRlcikge1xuICAgICAgICB4IC09IG92ZXJmbG93cy54LmFmdGVyO1xuICAgICAgICBjb250ZW50Qm94LnggLT0gb3ZlcmZsb3dzLnguYWZ0ZXI7XG4gICAgICB9XG4gICAgICBpZiAob3ZlcmZsb3dzLnkuYmVmb3JlKSB7XG4gICAgICAgIHkgKz0gb3ZlcmZsb3dzLnkuYmVmb3JlO1xuICAgICAgICBjb250ZW50Qm94LnkgKz0gb3ZlcmZsb3dzLnkuYmVmb3JlO1xuICAgICAgfVxuICAgICAgaWYgKG92ZXJmbG93cy55LmFmdGVyKSB7XG4gICAgICAgIHkgLT0gb3ZlcmZsb3dzLnkuYWZ0ZXI7XG4gICAgICAgIGNvbnRlbnRCb3gueSAtPSBvdmVyZmxvd3MueS5hZnRlcjtcbiAgICAgIH1cblxuICAgICAgLy8gc2l6ZVxuICAgICAge1xuICAgICAgICBjb25zdCBvdmVyZmxvd3MgPSBnZXRPdmVyZmxvdyhjb250ZW50Qm94LCB2aWV3cG9ydCk7XG4gICAgICAgIGF2YWlsYWJsZS54ID0gdmlld3BvcnQud2lkdGggLSBvdmVyZmxvd3MueC5iZWZvcmUgLSBvdmVyZmxvd3MueC5hZnRlcjtcbiAgICAgICAgYXZhaWxhYmxlLnkgPSB2aWV3cG9ydC5oZWlnaHQgLSBvdmVyZmxvd3MueS5iZWZvcmUgLSBvdmVyZmxvd3MueS5hZnRlcjtcbiAgICAgICAgeCArPSBvdmVyZmxvd3MueC5iZWZvcmU7XG4gICAgICAgIGNvbnRlbnRCb3gueCArPSBvdmVyZmxvd3MueC5iZWZvcmU7XG4gICAgICAgIHkgKz0gb3ZlcmZsb3dzLnkuYmVmb3JlO1xuICAgICAgICBjb250ZW50Qm94LnkgKz0gb3ZlcmZsb3dzLnkuYmVmb3JlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IGF4aXMgPSBnZXRBeGlzKHBsYWNlbWVudC5hbmNob3IpO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudFN0eWxlcy52YWx1ZSwge1xuICAgICAgJy0tdi1vdmVybGF5LWFuY2hvci1vcmlnaW4nOiBgJHtwbGFjZW1lbnQuYW5jaG9yLnNpZGV9ICR7cGxhY2VtZW50LmFuY2hvci5hbGlnbn1gLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiBgJHtwbGFjZW1lbnQub3JpZ2luLnNpZGV9ICR7cGxhY2VtZW50Lm9yaWdpbi5hbGlnbn1gLFxuICAgICAgLy8gdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7cGl4ZWxSb3VuZCh4KX1weCwgJHtwaXhlbFJvdW5kKHkpfXB4KWAsXG4gICAgICB0b3A6IGNvbnZlcnRUb1VuaXQocGl4ZWxSb3VuZCh5KSksXG4gICAgICBsZWZ0OiBkYXRhLmlzUnRsLnZhbHVlID8gdW5kZWZpbmVkIDogY29udmVydFRvVW5pdChwaXhlbFJvdW5kKHgpKSxcbiAgICAgIHJpZ2h0OiBkYXRhLmlzUnRsLnZhbHVlID8gY29udmVydFRvVW5pdChwaXhlbFJvdW5kKC14KSkgOiB1bmRlZmluZWQsXG4gICAgICBtaW5XaWR0aDogY29udmVydFRvVW5pdChheGlzID09PSAneScgPyBNYXRoLm1pbihtaW5XaWR0aC52YWx1ZSwgdGFyZ2V0Qm94LndpZHRoKSA6IG1pbldpZHRoLnZhbHVlKSxcbiAgICAgIG1heFdpZHRoOiBjb252ZXJ0VG9Vbml0KHBpeGVsQ2VpbChjbGFtcChhdmFpbGFibGUueCwgbWluV2lkdGgudmFsdWUgPT09IEluZmluaXR5ID8gMCA6IG1pbldpZHRoLnZhbHVlLCBtYXhXaWR0aC52YWx1ZSkpKSxcbiAgICAgIG1heEhlaWdodDogY29udmVydFRvVW5pdChwaXhlbENlaWwoY2xhbXAoYXZhaWxhYmxlLnksIG1pbkhlaWdodC52YWx1ZSA9PT0gSW5maW5pdHkgPyAwIDogbWluSGVpZ2h0LnZhbHVlLCBtYXhIZWlnaHQudmFsdWUpKSlcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgYXZhaWxhYmxlLFxuICAgICAgY29udGVudEJveFxuICAgIH07XG4gIH1cbiAgd2F0Y2goKCkgPT4gW3ByZWZlcnJlZEFuY2hvci52YWx1ZSwgcHJlZmVycmVkT3JpZ2luLnZhbHVlLCBwcm9wcy5vZmZzZXQsIHByb3BzLm1pbldpZHRoLCBwcm9wcy5taW5IZWlnaHQsIHByb3BzLm1heFdpZHRoLCBwcm9wcy5tYXhIZWlnaHRdLCAoKSA9PiB1cGRhdGVMb2NhdGlvbigpKTtcbiAgbmV4dFRpY2soKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHVwZGF0ZUxvY2F0aW9uKCk7XG5cbiAgICAvLyBUT0RPOiBvdmVyZmxvd2luZyBjb250ZW50IHNob3VsZCBvbmx5IHJlcXVpcmUgYSBzaW5nbGUgdXBkYXRlTG9jYXRpb24gY2FsbFxuICAgIC8vIElja3kgaGFjayB0byBtYWtlIHN1cmUgdGhlIGNvbnRlbnQgaXMgcG9zaXRpb25lZCBjb25zaXN0ZW50bHlcbiAgICBpZiAoIXJlc3VsdCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIGF2YWlsYWJsZSxcbiAgICAgIGNvbnRlbnRCb3hcbiAgICB9ID0gcmVzdWx0O1xuICAgIGlmIChjb250ZW50Qm94LmhlaWdodCA+IGF2YWlsYWJsZS55KSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB1cGRhdGVMb2NhdGlvbigpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHVwZGF0ZUxvY2F0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGVMb2NhdGlvblxuICB9O1xufVxuZnVuY3Rpb24gcGl4ZWxSb3VuZCh2YWwpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsICogZGV2aWNlUGl4ZWxSYXRpbykgLyBkZXZpY2VQaXhlbFJhdGlvO1xufVxuZnVuY3Rpb24gcGl4ZWxDZWlsKHZhbCkge1xuICByZXR1cm4gTWF0aC5jZWlsKHZhbCAqIGRldmljZVBpeGVsUmF0aW8pIC8gZGV2aWNlUGl4ZWxSYXRpbztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2F0aW9uU3RyYXRlZ2llcy5tanMubWFwIiwibGV0IGNsZWFuID0gdHJ1ZTtcbmNvbnN0IGZyYW1lcyA9IFtdO1xuXG4vKipcbiAqIFNjaGVkdWxlIGEgdGFzayB0byBydW4gaW4gYW4gYW5pbWF0aW9uIGZyYW1lIG9uIGl0cyBvd25cbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBoZWF2eSB0YXNrcyB0aGF0IG1heSBjYXVzZSBqYW5rIGlmIGFsbCByYW4gdG9nZXRoZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3ROZXdGcmFtZShjYikge1xuICBpZiAoIWNsZWFuIHx8IGZyYW1lcy5sZW5ndGgpIHtcbiAgICBmcmFtZXMucHVzaChjYik7XG4gICAgcnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgY2xlYW4gPSBmYWxzZTtcbiAgICBjYigpO1xuICAgIHJ1bigpO1xuICB9XG59XG5sZXQgcmFmID0gLTE7XG5mdW5jdGlvbiBydW4oKSB7XG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZik7XG4gIHJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgY29uc3QgZnJhbWUgPSBmcmFtZXMuc2hpZnQoKTtcbiAgICBpZiAoZnJhbWUpIGZyYW1lKCk7XG4gICAgaWYgKGZyYW1lcy5sZW5ndGgpIHJ1bigpO2Vsc2UgY2xlYW4gPSB0cnVlO1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3ROZXdGcmFtZS5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBlZmZlY3RTY29wZSwgbmV4dFRpY2ssIG9uU2NvcGVEaXNwb3NlLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyByZXF1ZXN0TmV3RnJhbWUgfSBmcm9tIFwiLi9yZXF1ZXN0TmV3RnJhbWUubWpzXCI7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZXRTY3JvbGxQYXJlbnRzLCBoYXNTY3JvbGxiYXIsIElOX0JST1dTRVIsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3Qgc2Nyb2xsU3RyYXRlZ2llcyA9IHtcbiAgbm9uZTogbnVsbCxcbiAgY2xvc2U6IGNsb3NlU2Nyb2xsU3RyYXRlZ3ksXG4gIGJsb2NrOiBibG9ja1Njcm9sbFN0cmF0ZWd5LFxuICByZXBvc2l0aW9uOiByZXBvc2l0aW9uU2Nyb2xsU3RyYXRlZ3lcbn07XG5leHBvcnQgY29uc3QgbWFrZVNjcm9sbFN0cmF0ZWd5UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBzY3JvbGxTdHJhdGVneToge1xuICAgIHR5cGU6IFtTdHJpbmcsIEZ1bmN0aW9uXSxcbiAgICBkZWZhdWx0OiAnYmxvY2snLFxuICAgIHZhbGlkYXRvcjogdmFsID0+IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicgfHwgdmFsIGluIHNjcm9sbFN0cmF0ZWdpZXNcbiAgfVxufSwgJ1ZPdmVybGF5LXNjcm9sbC1zdHJhdGVnaWVzJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlU2Nyb2xsU3RyYXRlZ2llcyhwcm9wcywgZGF0YSkge1xuICBpZiAoIUlOX0JST1dTRVIpIHJldHVybjtcbiAgbGV0IHNjb3BlO1xuICB3YXRjaEVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgc2NvcGU/LnN0b3AoKTtcbiAgICBpZiAoIShkYXRhLmlzQWN0aXZlLnZhbHVlICYmIHByb3BzLnNjcm9sbFN0cmF0ZWd5KSkgcmV0dXJuO1xuICAgIHNjb3BlID0gZWZmZWN0U2NvcGUoKTtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIHNjb3BlLmFjdGl2ZSAmJiBzY29wZS5ydW4oKCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5zY3JvbGxTdHJhdGVneSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm9wcy5zY3JvbGxTdHJhdGVneShkYXRhLCBwcm9wcywgc2NvcGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Nyb2xsU3RyYXRlZ2llc1twcm9wcy5zY3JvbGxTdHJhdGVneV0/LihkYXRhLCBwcm9wcywgc2NvcGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgb25TY29wZURpc3Bvc2UoKCkgPT4ge1xuICAgIHNjb3BlPy5zdG9wKCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gY2xvc2VTY3JvbGxTdHJhdGVneShkYXRhKSB7XG4gIGZ1bmN0aW9uIG9uU2Nyb2xsKGUpIHtcbiAgICBkYXRhLmlzQWN0aXZlLnZhbHVlID0gZmFsc2U7XG4gIH1cbiAgYmluZFNjcm9sbChkYXRhLmFjdGl2YXRvckVsLnZhbHVlID8/IGRhdGEuY29udGVudEVsLnZhbHVlLCBvblNjcm9sbCk7XG59XG5mdW5jdGlvbiBibG9ja1Njcm9sbFN0cmF0ZWd5KGRhdGEsIHByb3BzKSB7XG4gIGNvbnN0IG9mZnNldFBhcmVudCA9IGRhdGEucm9vdC52YWx1ZT8ub2Zmc2V0UGFyZW50O1xuICBjb25zdCBzY3JvbGxFbGVtZW50cyA9IFsuLi5uZXcgU2V0KFsuLi5nZXRTY3JvbGxQYXJlbnRzKGRhdGEuYWN0aXZhdG9yRWwudmFsdWUsIHByb3BzLmNvbnRhaW5lZCA/IG9mZnNldFBhcmVudCA6IHVuZGVmaW5lZCksIC4uLmdldFNjcm9sbFBhcmVudHMoZGF0YS5jb250ZW50RWwudmFsdWUsIHByb3BzLmNvbnRhaW5lZCA/IG9mZnNldFBhcmVudCA6IHVuZGVmaW5lZCldKV0uZmlsdGVyKGVsID0+ICFlbC5jbGFzc0xpc3QuY29udGFpbnMoJ3Ytb3ZlcmxheS1zY3JvbGwtYmxvY2tlZCcpKTtcbiAgY29uc3Qgc2Nyb2xsYmFyV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgY29uc3Qgc2Nyb2xsYWJsZVBhcmVudCA9IChlbCA9PiBoYXNTY3JvbGxiYXIoZWwpICYmIGVsKShvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgaWYgKHNjcm9sbGFibGVQYXJlbnQpIHtcbiAgICBkYXRhLnJvb3QudmFsdWUuY2xhc3NMaXN0LmFkZCgndi1vdmVybGF5LS1zY3JvbGwtYmxvY2tlZCcpO1xuICB9XG4gIHNjcm9sbEVsZW1lbnRzLmZvckVhY2goKGVsLCBpKSA9PiB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tdi1ib2R5LXNjcm9sbC14JywgY29udmVydFRvVW5pdCgtZWwuc2Nyb2xsTGVmdCkpO1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KCctLXYtYm9keS1zY3JvbGwteScsIGNvbnZlcnRUb1VuaXQoLWVsLnNjcm9sbFRvcCkpO1xuICAgIGlmIChlbCAhPT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS12LXNjcm9sbGJhci1vZmZzZXQnLCBjb252ZXJ0VG9Vbml0KHNjcm9sbGJhcldpZHRoKSk7XG4gICAgfVxuICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3Ytb3ZlcmxheS1zY3JvbGwtYmxvY2tlZCcpO1xuICB9KTtcbiAgb25TY29wZURpc3Bvc2UoKCkgPT4ge1xuICAgIHNjcm9sbEVsZW1lbnRzLmZvckVhY2goKGVsLCBpKSA9PiB7XG4gICAgICBjb25zdCB4ID0gcGFyc2VGbG9hdChlbC5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLXYtYm9keS1zY3JvbGwteCcpKTtcbiAgICAgIGNvbnN0IHkgPSBwYXJzZUZsb2F0KGVsLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0tdi1ib2R5LXNjcm9sbC15JykpO1xuICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJy0tdi1ib2R5LXNjcm9sbC14Jyk7XG4gICAgICBlbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnLS12LWJvZHktc2Nyb2xsLXknKTtcbiAgICAgIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCctLXYtc2Nyb2xsYmFyLW9mZnNldCcpO1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgndi1vdmVybGF5LXNjcm9sbC1ibG9ja2VkJyk7XG4gICAgICBlbC5zY3JvbGxMZWZ0ID0gLXg7XG4gICAgICBlbC5zY3JvbGxUb3AgPSAteTtcbiAgICB9KTtcbiAgICBpZiAoc2Nyb2xsYWJsZVBhcmVudCkge1xuICAgICAgZGF0YS5yb290LnZhbHVlLmNsYXNzTGlzdC5yZW1vdmUoJ3Ytb3ZlcmxheS0tc2Nyb2xsLWJsb2NrZWQnKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVwb3NpdGlvblNjcm9sbFN0cmF0ZWd5KGRhdGEsIHByb3BzLCBzY29wZSkge1xuICBsZXQgc2xvdyA9IGZhbHNlO1xuICBsZXQgcmFmID0gLTE7XG4gIGxldCByaWMgPSAtMTtcbiAgZnVuY3Rpb24gdXBkYXRlKGUpIHtcbiAgICByZXF1ZXN0TmV3RnJhbWUoKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGRhdGEudXBkYXRlTG9jYXRpb24udmFsdWU/LihlKTtcbiAgICAgIGNvbnN0IHRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0O1xuICAgICAgc2xvdyA9IHRpbWUgLyAoMTAwMCAvIDYwKSA+IDI7XG4gICAgfSk7XG4gIH1cbiAgcmljID0gKHR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrID09PSAndW5kZWZpbmVkJyA/IGNiID0+IGNiKCkgOiByZXF1ZXN0SWRsZUNhbGxiYWNrKSgoKSA9PiB7XG4gICAgc2NvcGUucnVuKCgpID0+IHtcbiAgICAgIGJpbmRTY3JvbGwoZGF0YS5hY3RpdmF0b3JFbC52YWx1ZSA/PyBkYXRhLmNvbnRlbnRFbC52YWx1ZSwgZSA9PiB7XG4gICAgICAgIGlmIChzbG93KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIHBvc2l0aW9uIGNhbGN1bGF0aW9uIGlzIHNsb3csXG4gICAgICAgICAgLy8gZGVmZXIgdXBkYXRlcyB1bnRpbCBzY3JvbGxpbmcgaXMgZmluaXNoZWQuXG4gICAgICAgICAgLy8gQnJvd3NlcnMgdXN1YWxseSBmaXJlIG9uZSBzY3JvbGwgZXZlbnQgcGVyIGZyYW1lIHNvXG4gICAgICAgICAgLy8gd2UganVzdCB3YWl0IHVudGlsIHdlJ3ZlIGdvdCB0d28gZnJhbWVzIHdpdGhvdXQgYW4gZXZlbnRcbiAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuICAgICAgICAgIHJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICByYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICB1cGRhdGUoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cGRhdGUoZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbiAgb25TY29wZURpc3Bvc2UoKCkgPT4ge1xuICAgIHR5cGVvZiBjYW5jZWxJZGxlQ2FsbGJhY2sgIT09ICd1bmRlZmluZWQnICYmIGNhbmNlbElkbGVDYWxsYmFjayhyaWMpO1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZik7XG4gIH0pO1xufVxuXG4vKiogQHByaXZhdGUgKi9cbmZ1bmN0aW9uIGJpbmRTY3JvbGwoZWwsIG9uU2Nyb2xsKSB7XG4gIGNvbnN0IHNjcm9sbEVsZW1lbnRzID0gW2RvY3VtZW50LCAuLi5nZXRTY3JvbGxQYXJlbnRzKGVsKV07XG4gIHNjcm9sbEVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xuICBvblNjb3BlRGlzcG9zZSgoKSA9PiB7XG4gICAgc2Nyb2xsRWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbCk7XG4gICAgfSk7XG4gIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2Nyb2xsU3RyYXRlZ2llcy5tanMubWFwIiwiLy8gVHlwZXNcblxuZXhwb3J0IGNvbnN0IFZNZW51U3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTp2LW1lbnUnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlZC5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBJTl9CUk9XU0VSLCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbi8vIENvbXBvc2FibGVzXG5leHBvcnQgY29uc3QgbWFrZURlbGF5UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjbG9zZURlbGF5OiBbTnVtYmVyLCBTdHJpbmddLFxuICBvcGVuRGVsYXk6IFtOdW1iZXIsIFN0cmluZ11cbn0sICdkZWxheScpO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURlbGF5KHByb3BzLCBjYikge1xuICBjb25zdCBkZWxheXMgPSB7fTtcbiAgY29uc3QgcnVuRGVsYXlGYWN0b3J5ID0gcHJvcCA9PiAoKSA9PiB7XG4gICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICBpZiAoIUlOX0JST1dTRVIpIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgY29uc3QgYWN0aXZlID0gcHJvcCA9PT0gJ29wZW5EZWxheSc7XG4gICAgZGVsYXlzLmNsb3NlRGVsYXkgJiYgd2luZG93LmNsZWFyVGltZW91dChkZWxheXMuY2xvc2VEZWxheSk7XG4gICAgZGVsZXRlIGRlbGF5cy5jbG9zZURlbGF5O1xuICAgIGRlbGF5cy5vcGVuRGVsYXkgJiYgd2luZG93LmNsZWFyVGltZW91dChkZWxheXMub3BlbkRlbGF5KTtcbiAgICBkZWxldGUgZGVsYXlzLm9wZW5EZWxheTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBjb25zdCBkZWxheSA9IHBhcnNlSW50KHByb3BzW3Byb3BdID8/IDAsIDEwKTtcbiAgICAgIGRlbGF5c1twcm9wXSA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY2I/LihhY3RpdmUpO1xuICAgICAgICByZXNvbHZlKGFjdGl2ZSk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgcnVuQ2xvc2VEZWxheTogcnVuRGVsYXlGYWN0b3J5KCdjbG9zZURlbGF5JyksXG4gICAgcnVuT3BlbkRlbGF5OiBydW5EZWxheUZhY3RvcnkoJ29wZW5EZWxheScpXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheS5tanMubWFwIiwiLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVk1lbnVTeW1ib2wgfSBmcm9tIFwiLi4vVk1lbnUvc2hhcmVkLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZURlbGF5UHJvcHMsIHVzZURlbGF5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbGF5Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBlZmZlY3RTY29wZSwgaW5qZWN0LCBtZXJnZVByb3BzLCBuZXh0VGljaywgb25TY29wZURpc3Bvc2UsIHJlZiwgd2F0Y2gsIHdhdGNoRWZmZWN0IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGJpbmRQcm9wcywgZ2V0Q3VycmVudEluc3RhbmNlLCBJTl9CUk9XU0VSLCBtYXRjaGVzU2VsZWN0b3IsIHByb3BzRmFjdG9yeSwgcmVmRWxlbWVudCwgdW5iaW5kUHJvcHMgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlQWN0aXZhdG9yUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhY3RpdmF0b3I6IFtTdHJpbmcsIE9iamVjdF0sXG4gIGFjdGl2YXRvclByb3BzOiB7XG4gICAgdHlwZTogT2JqZWN0LFxuICAgIGRlZmF1bHQ6ICgpID0+ICh7fSlcbiAgfSxcbiAgb3Blbk9uQ2xpY2s6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICBvcGVuT25Ib3ZlcjogQm9vbGVhbixcbiAgb3Blbk9uRm9jdXM6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICBjbG9zZU9uQ29udGVudENsaWNrOiBCb29sZWFuLFxuICAuLi5tYWtlRGVsYXlQcm9wcygpXG59LCAnVk92ZXJsYXktYWN0aXZhdG9yJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlQWN0aXZhdG9yKHByb3BzLCBfcmVmKSB7XG4gIGxldCB7XG4gICAgaXNBY3RpdmUsXG4gICAgaXNUb3BcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IGFjdGl2YXRvckVsID0gcmVmKCk7XG4gIGxldCBpc0hvdmVyZWQgPSBmYWxzZTtcbiAgbGV0IGlzRm9jdXNlZCA9IGZhbHNlO1xuICBsZXQgZmlyc3RFbnRlciA9IHRydWU7XG4gIGNvbnN0IG9wZW5PbkZvY3VzID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMub3Blbk9uRm9jdXMgfHwgcHJvcHMub3Blbk9uRm9jdXMgPT0gbnVsbCAmJiBwcm9wcy5vcGVuT25Ib3Zlcik7XG4gIGNvbnN0IG9wZW5PbkNsaWNrID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMub3Blbk9uQ2xpY2sgfHwgcHJvcHMub3Blbk9uQ2xpY2sgPT0gbnVsbCAmJiAhcHJvcHMub3Blbk9uSG92ZXIgJiYgIW9wZW5PbkZvY3VzLnZhbHVlKTtcbiAgY29uc3Qge1xuICAgIHJ1bk9wZW5EZWxheSxcbiAgICBydW5DbG9zZURlbGF5XG4gIH0gPSB1c2VEZWxheShwcm9wcywgdmFsdWUgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gKHByb3BzLm9wZW5PbkhvdmVyICYmIGlzSG92ZXJlZCB8fCBvcGVuT25Gb2N1cy52YWx1ZSAmJiBpc0ZvY3VzZWQpICYmICEocHJvcHMub3Blbk9uSG92ZXIgJiYgaXNBY3RpdmUudmFsdWUgJiYgIWlzVG9wLnZhbHVlKSkge1xuICAgICAgaWYgKGlzQWN0aXZlLnZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICBmaXJzdEVudGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlzQWN0aXZlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgYXZhaWxhYmxlRXZlbnRzID0ge1xuICAgIG9uQ2xpY2s6IGUgPT4ge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGFjdGl2YXRvckVsLnZhbHVlID0gZS5jdXJyZW50VGFyZ2V0IHx8IGUudGFyZ2V0O1xuICAgICAgaXNBY3RpdmUudmFsdWUgPSAhaXNBY3RpdmUudmFsdWU7XG4gICAgfSxcbiAgICBvbk1vdXNlZW50ZXI6IGUgPT4ge1xuICAgICAgaWYgKGUuc291cmNlQ2FwYWJpbGl0aWVzPy5maXJlc1RvdWNoRXZlbnRzKSByZXR1cm47XG4gICAgICBpc0hvdmVyZWQgPSB0cnVlO1xuICAgICAgYWN0aXZhdG9yRWwudmFsdWUgPSBlLmN1cnJlbnRUYXJnZXQgfHwgZS50YXJnZXQ7XG4gICAgICBydW5PcGVuRGVsYXkoKTtcbiAgICB9LFxuICAgIG9uTW91c2VsZWF2ZTogZSA9PiB7XG4gICAgICBpc0hvdmVyZWQgPSBmYWxzZTtcbiAgICAgIHJ1bkNsb3NlRGVsYXkoKTtcbiAgICB9LFxuICAgIG9uRm9jdXM6IGUgPT4ge1xuICAgICAgaWYgKG1hdGNoZXNTZWxlY3RvcihlLnRhcmdldCwgJzpmb2N1cy12aXNpYmxlJykgPT09IGZhbHNlKSByZXR1cm47XG4gICAgICBpc0ZvY3VzZWQgPSB0cnVlO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGFjdGl2YXRvckVsLnZhbHVlID0gZS5jdXJyZW50VGFyZ2V0IHx8IGUudGFyZ2V0O1xuICAgICAgcnVuT3BlbkRlbGF5KCk7XG4gICAgfSxcbiAgICBvbkJsdXI6IGUgPT4ge1xuICAgICAgaXNGb2N1c2VkID0gZmFsc2U7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcnVuQ2xvc2VEZWxheSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgYWN0aXZhdG9yRXZlbnRzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50cyA9IHt9O1xuICAgIGlmIChvcGVuT25DbGljay52YWx1ZSkge1xuICAgICAgZXZlbnRzLm9uQ2xpY2sgPSBhdmFpbGFibGVFdmVudHMub25DbGljaztcbiAgICB9XG4gICAgaWYgKHByb3BzLm9wZW5PbkhvdmVyKSB7XG4gICAgICBldmVudHMub25Nb3VzZWVudGVyID0gYXZhaWxhYmxlRXZlbnRzLm9uTW91c2VlbnRlcjtcbiAgICAgIGV2ZW50cy5vbk1vdXNlbGVhdmUgPSBhdmFpbGFibGVFdmVudHMub25Nb3VzZWxlYXZlO1xuICAgIH1cbiAgICBpZiAob3Blbk9uRm9jdXMudmFsdWUpIHtcbiAgICAgIGV2ZW50cy5vbkZvY3VzID0gYXZhaWxhYmxlRXZlbnRzLm9uRm9jdXM7XG4gICAgICBldmVudHMub25CbHVyID0gYXZhaWxhYmxlRXZlbnRzLm9uQmx1cjtcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50cztcbiAgfSk7XG4gIGNvbnN0IGNvbnRlbnRFdmVudHMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgZXZlbnRzID0ge307XG4gICAgaWYgKHByb3BzLm9wZW5PbkhvdmVyKSB7XG4gICAgICBldmVudHMub25Nb3VzZWVudGVyID0gKCkgPT4ge1xuICAgICAgICBpc0hvdmVyZWQgPSB0cnVlO1xuICAgICAgICBydW5PcGVuRGVsYXkoKTtcbiAgICAgIH07XG4gICAgICBldmVudHMub25Nb3VzZWxlYXZlID0gKCkgPT4ge1xuICAgICAgICBpc0hvdmVyZWQgPSBmYWxzZTtcbiAgICAgICAgcnVuQ2xvc2VEZWxheSgpO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG9wZW5PbkZvY3VzLnZhbHVlKSB7XG4gICAgICBldmVudHMub25Gb2N1c2luID0gKCkgPT4ge1xuICAgICAgICBpc0ZvY3VzZWQgPSB0cnVlO1xuICAgICAgICBydW5PcGVuRGVsYXkoKTtcbiAgICAgIH07XG4gICAgICBldmVudHMub25Gb2N1c291dCA9ICgpID0+IHtcbiAgICAgICAgaXNGb2N1c2VkID0gZmFsc2U7XG4gICAgICAgIHJ1bkNsb3NlRGVsYXkoKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChwcm9wcy5jbG9zZU9uQ29udGVudENsaWNrKSB7XG4gICAgICBjb25zdCBtZW51ID0gaW5qZWN0KFZNZW51U3ltYm9sLCBudWxsKTtcbiAgICAgIGV2ZW50cy5vbkNsaWNrID0gKCkgPT4ge1xuICAgICAgICBpc0FjdGl2ZS52YWx1ZSA9IGZhbHNlO1xuICAgICAgICBtZW51Py5jbG9zZVBhcmVudHMoKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBldmVudHM7XG4gIH0pO1xuICBjb25zdCBzY3JpbUV2ZW50cyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBldmVudHMgPSB7fTtcbiAgICBpZiAocHJvcHMub3Blbk9uSG92ZXIpIHtcbiAgICAgIGV2ZW50cy5vbk1vdXNlZW50ZXIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChmaXJzdEVudGVyKSB7XG4gICAgICAgICAgaXNIb3ZlcmVkID0gdHJ1ZTtcbiAgICAgICAgICBmaXJzdEVudGVyID0gZmFsc2U7XG4gICAgICAgICAgcnVuT3BlbkRlbGF5KCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBldmVudHMub25Nb3VzZWxlYXZlID0gKCkgPT4ge1xuICAgICAgICBpc0hvdmVyZWQgPSBmYWxzZTtcbiAgICAgICAgcnVuQ2xvc2VEZWxheSgpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50cztcbiAgfSk7XG4gIHdhdGNoKGlzVG9wLCB2YWwgPT4ge1xuICAgIGlmICh2YWwgJiYgKHByb3BzLm9wZW5PbkhvdmVyICYmICFpc0hvdmVyZWQgJiYgKCFvcGVuT25Gb2N1cy52YWx1ZSB8fCAhaXNGb2N1c2VkKSB8fCBvcGVuT25Gb2N1cy52YWx1ZSAmJiAhaXNGb2N1c2VkICYmICghcHJvcHMub3Blbk9uSG92ZXIgfHwgIWlzSG92ZXJlZCkpKSB7XG4gICAgICBpc0FjdGl2ZS52YWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGFjdGl2YXRvclJlZiA9IHJlZigpO1xuICB3YXRjaEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFhY3RpdmF0b3JSZWYudmFsdWUpIHJldHVybjtcbiAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICBhY3RpdmF0b3JFbC52YWx1ZSA9IHJlZkVsZW1lbnQoYWN0aXZhdG9yUmVmLnZhbHVlKTtcbiAgICB9KTtcbiAgfSk7XG4gIGNvbnN0IHZtID0gZ2V0Q3VycmVudEluc3RhbmNlKCd1c2VBY3RpdmF0b3InKTtcbiAgbGV0IHNjb3BlO1xuICB3YXRjaCgoKSA9PiAhIXByb3BzLmFjdGl2YXRvciwgdmFsID0+IHtcbiAgICBpZiAodmFsICYmIElOX0JST1dTRVIpIHtcbiAgICAgIHNjb3BlID0gZWZmZWN0U2NvcGUoKTtcbiAgICAgIHNjb3BlLnJ1bigoKSA9PiB7XG4gICAgICAgIF91c2VBY3RpdmF0b3IocHJvcHMsIHZtLCB7XG4gICAgICAgICAgYWN0aXZhdG9yRWwsXG4gICAgICAgICAgYWN0aXZhdG9yRXZlbnRzXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChzY29wZSkge1xuICAgICAgc2NvcGUuc3RvcCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGZsdXNoOiAncG9zdCcsXG4gICAgaW1tZWRpYXRlOiB0cnVlXG4gIH0pO1xuICBvblNjb3BlRGlzcG9zZSgoKSA9PiB7XG4gICAgc2NvcGU/LnN0b3AoKTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYWN0aXZhdG9yRWwsXG4gICAgYWN0aXZhdG9yUmVmLFxuICAgIGFjdGl2YXRvckV2ZW50cyxcbiAgICBjb250ZW50RXZlbnRzLFxuICAgIHNjcmltRXZlbnRzXG4gIH07XG59XG5mdW5jdGlvbiBfdXNlQWN0aXZhdG9yKHByb3BzLCB2bSwgX3JlZjIpIHtcbiAgbGV0IHtcbiAgICBhY3RpdmF0b3JFbCxcbiAgICBhY3RpdmF0b3JFdmVudHNcbiAgfSA9IF9yZWYyO1xuICB3YXRjaCgoKSA9PiBwcm9wcy5hY3RpdmF0b3IsICh2YWwsIG9sZFZhbCkgPT4ge1xuICAgIGlmIChvbGRWYWwgJiYgdmFsICE9PSBvbGRWYWwpIHtcbiAgICAgIGNvbnN0IGFjdGl2YXRvciA9IGdldEFjdGl2YXRvcihvbGRWYWwpO1xuICAgICAgYWN0aXZhdG9yICYmIHVuYmluZEFjdGl2YXRvclByb3BzKGFjdGl2YXRvcik7XG4gICAgfVxuICAgIGlmICh2YWwpIHtcbiAgICAgIG5leHRUaWNrKCgpID0+IGJpbmRBY3RpdmF0b3JQcm9wcygpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBpbW1lZGlhdGU6IHRydWVcbiAgfSk7XG4gIHdhdGNoKCgpID0+IHByb3BzLmFjdGl2YXRvclByb3BzLCAoKSA9PiB7XG4gICAgYmluZEFjdGl2YXRvclByb3BzKCk7XG4gIH0pO1xuICBvblNjb3BlRGlzcG9zZSgoKSA9PiB7XG4gICAgdW5iaW5kQWN0aXZhdG9yUHJvcHMoKTtcbiAgfSk7XG4gIGZ1bmN0aW9uIGJpbmRBY3RpdmF0b3JQcm9wcygpIHtcbiAgICBsZXQgZWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGdldEFjdGl2YXRvcigpO1xuICAgIGxldCBfcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHByb3BzLmFjdGl2YXRvclByb3BzO1xuICAgIGlmICghZWwpIHJldHVybjtcbiAgICBiaW5kUHJvcHMoZWwsIG1lcmdlUHJvcHMoYWN0aXZhdG9yRXZlbnRzLnZhbHVlLCBfcHJvcHMpKTtcbiAgfVxuICBmdW5jdGlvbiB1bmJpbmRBY3RpdmF0b3JQcm9wcygpIHtcbiAgICBsZXQgZWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGdldEFjdGl2YXRvcigpO1xuICAgIGxldCBfcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHByb3BzLmFjdGl2YXRvclByb3BzO1xuICAgIGlmICghZWwpIHJldHVybjtcbiAgICB1bmJpbmRQcm9wcyhlbCwgbWVyZ2VQcm9wcyhhY3RpdmF0b3JFdmVudHMudmFsdWUsIF9wcm9wcykpO1xuICB9XG4gIGZ1bmN0aW9uIGdldEFjdGl2YXRvcigpIHtcbiAgICBsZXQgc2VsZWN0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHByb3BzLmFjdGl2YXRvcjtcbiAgICBsZXQgYWN0aXZhdG9yO1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSAncGFyZW50Jykge1xuICAgICAgICBsZXQgZWwgPSB2bT8ucHJveHk/LiRlbD8ucGFyZW50Tm9kZTtcbiAgICAgICAgd2hpbGUgKGVsPy5oYXNBdHRyaWJ1dGUoJ2RhdGEtbm8tYWN0aXZhdG9yJykpIHtcbiAgICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgYWN0aXZhdG9yID0gZWw7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gU2VsZWN0b3JcbiAgICAgICAgYWN0aXZhdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9IGVsc2UgaWYgKCckZWwnIGluIHNlbGVjdG9yKSB7XG4gICAgICAgIC8vIENvbXBvbmVudCAocmVmKVxuICAgICAgICBhY3RpdmF0b3IgPSBzZWxlY3Rvci4kZWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBIVE1MRWxlbWVudCB8IEVsZW1lbnRcbiAgICAgICAgYWN0aXZhdG9yID0gc2VsZWN0b3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhlIGFjdGl2YXRvciBzaG91bGQgb25seSBiZSBhIHZhbGlkIGVsZW1lbnQgKElnbm9yZSBjb21tZW50cyBhbmQgdGV4dCBub2RlcylcbiAgICBhY3RpdmF0b3JFbC52YWx1ZSA9IGFjdGl2YXRvcj8ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFID8gYWN0aXZhdG9yIDogbnVsbDtcbiAgICByZXR1cm4gYWN0aXZhdG9yRWwudmFsdWU7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZUFjdGl2YXRvci5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZURpc3BsYXkgfSBmcm9tIFwiLi9kaXNwbGF5Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IG9uTW91bnRlZCwgc2hhbGxvd1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBJTl9CUk9XU0VSIH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlSHlkcmF0aW9uKCkge1xuICBpZiAoIUlOX0JST1dTRVIpIHJldHVybiBzaGFsbG93UmVmKGZhbHNlKTtcbiAgY29uc3Qge1xuICAgIHNzclxuICB9ID0gdXNlRGlzcGxheSgpO1xuICBpZiAoc3NyKSB7XG4gICAgY29uc3QgaXNNb3VudGVkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIGlzTW91bnRlZC52YWx1ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGlzTW91bnRlZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc2hhbGxvd1JlZih0cnVlKTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHlkcmF0aW9uLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBzaGFsbG93UmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlTGF6eVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZWFnZXI6IEJvb2xlYW5cbn0sICdsYXp5Jyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlTGF6eShwcm9wcywgYWN0aXZlKSB7XG4gIGNvbnN0IGlzQm9vdGVkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gIGNvbnN0IGhhc0NvbnRlbnQgPSBjb21wdXRlZCgoKSA9PiBpc0Jvb3RlZC52YWx1ZSB8fCBwcm9wcy5lYWdlciB8fCBhY3RpdmUudmFsdWUpO1xuICB3YXRjaChhY3RpdmUsICgpID0+IGlzQm9vdGVkLnZhbHVlID0gdHJ1ZSk7XG4gIGZ1bmN0aW9uIG9uQWZ0ZXJMZWF2ZSgpIHtcbiAgICBpZiAoIXByb3BzLmVhZ2VyKSBpc0Jvb3RlZC52YWx1ZSA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB7XG4gICAgaXNCb290ZWQsXG4gICAgaGFzQ29udGVudCxcbiAgICBvbkFmdGVyTGVhdmVcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhenkubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlU2NvcGVJZCgpIHtcbiAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoJ3VzZVNjb3BlSWQnKTtcbiAgY29uc3Qgc2NvcGVJZCA9IHZtLnZub2RlLnNjb3BlSWQ7XG4gIHJldHVybiB7XG4gICAgc2NvcGVJZDogc2NvcGVJZCA/IHtcbiAgICAgIFtzY29wZUlkXTogJydcbiAgICB9IDogdW5kZWZpbmVkXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29wZUlkLm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlVG9nZ2xlU2NvcGUgfSBmcm9tIFwiLi90b2dnbGVTY29wZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaW5qZWN0LCBvblNjb3BlRGlzcG9zZSwgcHJvdmlkZSwgcmVhY3RpdmUsIHJlYWRvbmx5LCBzaGFsbG93UmVmLCB0b1Jhdywgd2F0Y2hFZmZlY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5jb25zdCBTdGFja1N5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6c3RhY2snKTtcbmNvbnN0IGdsb2JhbFN0YWNrID0gcmVhY3RpdmUoW10pO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN0YWNrKGlzQWN0aXZlLCB6SW5kZXgsIGRpc2FibGVHbG9iYWxTdGFjaykge1xuICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgndXNlU3RhY2snKTtcbiAgY29uc3QgY3JlYXRlU3RhY2tFbnRyeSA9ICFkaXNhYmxlR2xvYmFsU3RhY2s7XG4gIGNvbnN0IHBhcmVudCA9IGluamVjdChTdGFja1N5bWJvbCwgdW5kZWZpbmVkKTtcbiAgY29uc3Qgc3RhY2sgPSByZWFjdGl2ZSh7XG4gICAgYWN0aXZlQ2hpbGRyZW46IG5ldyBTZXQoKVxuICB9KTtcbiAgcHJvdmlkZShTdGFja1N5bWJvbCwgc3RhY2spO1xuICBjb25zdCBfekluZGV4ID0gc2hhbGxvd1JlZigrekluZGV4LnZhbHVlKTtcbiAgdXNlVG9nZ2xlU2NvcGUoaXNBY3RpdmUsICgpID0+IHtcbiAgICBjb25zdCBsYXN0WkluZGV4ID0gZ2xvYmFsU3RhY2suYXQoLTEpPy5bMV07XG4gICAgX3pJbmRleC52YWx1ZSA9IGxhc3RaSW5kZXggPyBsYXN0WkluZGV4ICsgMTAgOiArekluZGV4LnZhbHVlO1xuICAgIGlmIChjcmVhdGVTdGFja0VudHJ5KSB7XG4gICAgICBnbG9iYWxTdGFjay5wdXNoKFt2bS51aWQsIF96SW5kZXgudmFsdWVdKTtcbiAgICB9XG4gICAgcGFyZW50Py5hY3RpdmVDaGlsZHJlbi5hZGQodm0udWlkKTtcbiAgICBvblNjb3BlRGlzcG9zZSgoKSA9PiB7XG4gICAgICBpZiAoY3JlYXRlU3RhY2tFbnRyeSkge1xuICAgICAgICBjb25zdCBpZHggPSB0b1JhdyhnbG9iYWxTdGFjaykuZmluZEluZGV4KHYgPT4gdlswXSA9PT0gdm0udWlkKTtcbiAgICAgICAgZ2xvYmFsU3RhY2suc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgICBwYXJlbnQ/LmFjdGl2ZUNoaWxkcmVuLmRlbGV0ZSh2bS51aWQpO1xuICAgIH0pO1xuICB9KTtcbiAgY29uc3QgZ2xvYmFsVG9wID0gc2hhbGxvd1JlZih0cnVlKTtcbiAgaWYgKGNyZWF0ZVN0YWNrRW50cnkpIHtcbiAgICB3YXRjaEVmZmVjdCgoKSA9PiB7XG4gICAgICBjb25zdCBfaXNUb3AgPSBnbG9iYWxTdGFjay5hdCgtMSk/LlswXSA9PT0gdm0udWlkO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiBnbG9iYWxUb3AudmFsdWUgPSBfaXNUb3ApO1xuICAgIH0pO1xuICB9XG4gIGNvbnN0IGxvY2FsVG9wID0gY29tcHV0ZWQoKCkgPT4gIXN0YWNrLmFjdGl2ZUNoaWxkcmVuLnNpemUpO1xuICByZXR1cm4ge1xuICAgIGdsb2JhbFRvcDogcmVhZG9ubHkoZ2xvYmFsVG9wKSxcbiAgICBsb2NhbFRvcCxcbiAgICBzdGFja1N0eWxlczogY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIHpJbmRleDogX3pJbmRleC52YWx1ZVxuICAgIH0pKVxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhY2subWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHdhcm4gfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgSU5fQlJPV1NFUiB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVRlbGVwb3J0KHRhcmdldCkge1xuICBjb25zdCB0ZWxlcG9ydFRhcmdldCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBfdGFyZ2V0ID0gdGFyZ2V0LnZhbHVlO1xuICAgIGlmIChfdGFyZ2V0ID09PSB0cnVlIHx8ICFJTl9CUk9XU0VSKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSBfdGFyZ2V0ID09PSBmYWxzZSA/IGRvY3VtZW50LmJvZHkgOiB0eXBlb2YgX3RhcmdldCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKF90YXJnZXQpIDogX3RhcmdldDtcbiAgICBpZiAodGFyZ2V0RWxlbWVudCA9PSBudWxsKSB7XG4gICAgICB3YXJuKGBVbmFibGUgdG8gbG9jYXRlIHRhcmdldCAke190YXJnZXR9YCk7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBsZXQgY29udGFpbmVyID0gdGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yKCc6c2NvcGUgPiAudi1vdmVybGF5LWNvbnRhaW5lcicpO1xuICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSAndi1vdmVybGF5LWNvbnRhaW5lcic7XG4gICAgICB0YXJnZXRFbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgfVxuICAgIHJldHVybiBjb250YWluZXI7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRlbGVwb3J0VGFyZ2V0XG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZWxlcG9ydC5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBhdHRhY2hlZFJvb3QgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmZ1bmN0aW9uIGRlZmF1bHRDb25kaXRpb25hbCgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBjaGVja0V2ZW50KGUsIGVsLCBiaW5kaW5nKSB7XG4gIC8vIFRoZSBpbmNsdWRlIGVsZW1lbnQgY2FsbGJhY2tzIGJlbG93IGNhbiBiZSBleHBlbnNpdmVcbiAgLy8gc28gd2Ugc2hvdWxkIGF2b2lkIGNhbGxpbmcgdGhlbSB3aGVuIHdlJ3JlIG5vdCBhY3RpdmUuXG4gIC8vIEV4cGxpY2l0bHkgY2hlY2sgZm9yIGZhbHNlIHRvIGFsbG93IGZhbGxiYWNrIGNvbXBhdGliaWxpdHlcbiAgLy8gd2l0aCBub24tdG9nZ2xlYWJsZSBjb21wb25lbnRzXG4gIGlmICghZSB8fCBjaGVja0lzQWN0aXZlKGUsIGJpbmRpbmcpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHdlJ3JlIGNsaWNraW5nIGluc2lkZSB0aGUgc2hhZG93cm9vdCwgdGhlbiB0aGUgYXBwIHJvb3QgZG9lc24ndCBnZXQgdGhlIHNhbWVcbiAgLy8gbGV2ZWwgb2YgaW50cm9zcGVjdGlvbiBhcyB0byBfd2hhdF8gd2UncmUgY2xpY2tpbmcuIFdlIHdhbnQgdG8gY2hlY2sgdG8gc2VlIGlmXG4gIC8vIG91ciB0YXJnZXQgaXMgdGhlIHNoYWRvd3Jvb3QgcGFyZW50IGNvbnRhaW5lciwgYW5kIGlmIGl0IGlzLCBpZ25vcmUuXG4gIGNvbnN0IHJvb3QgPSBhdHRhY2hlZFJvb3QoZWwpO1xuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgIT09ICd1bmRlZmluZWQnICYmIHJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290ICYmIHJvb3QuaG9zdCA9PT0gZS50YXJnZXQpIHJldHVybiBmYWxzZTtcblxuICAvLyBDaGVjayBpZiBhZGRpdGlvbmFsIGVsZW1lbnRzIHdlcmUgcGFzc2VkIHRvIGJlIGluY2x1ZGVkIGluIGNoZWNrXG4gIC8vIChjbGljayBtdXN0IGJlIG91dHNpZGUgYWxsIGluY2x1ZGVkIGVsZW1lbnRzLCBpZiBhbnkpXG4gIGNvbnN0IGVsZW1lbnRzID0gKHR5cGVvZiBiaW5kaW5nLnZhbHVlID09PSAnb2JqZWN0JyAmJiBiaW5kaW5nLnZhbHVlLmluY2x1ZGUgfHwgKCgpID0+IFtdKSkoKTtcbiAgLy8gQWRkIHRoZSByb290IGVsZW1lbnQgZm9yIHRoZSBjb21wb25lbnQgdGhpcyBkaXJlY3RpdmUgd2FzIGRlZmluZWQgb25cbiAgZWxlbWVudHMucHVzaChlbCk7XG5cbiAgLy8gQ2hlY2sgaWYgaXQncyBhIGNsaWNrIG91dHNpZGUgb3VyIGVsZW1lbnRzLCBhbmQgdGhlbiBpZiBvdXIgY2FsbGJhY2sgcmV0dXJucyB0cnVlLlxuICAvLyBOb24tdG9nZ2xlYWJsZSBjb21wb25lbnRzIHNob3VsZCB0YWtlIGFjdGlvbiBpbiB0aGVpciBjYWxsYmFjayBhbmQgcmV0dXJuIGZhbHN5LlxuICAvLyBUb2dnbGVhYmxlIGNhbiByZXR1cm4gdHJ1ZSBpZiBpdCB3YW50cyB0byBkZWFjdGl2YXRlLlxuICAvLyBOb3RlIHRoYXQsIGJlY2F1c2Ugd2UncmUgaW4gdGhlIGNhcHR1cmUgcGhhc2UsIHRoaXMgY2FsbGJhY2sgd2lsbCBvY2N1ciBiZWZvcmVcbiAgLy8gdGhlIGJ1YmJsaW5nIGNsaWNrIGV2ZW50IG9uIGFueSBvdXRzaWRlIGVsZW1lbnRzLlxuICByZXR1cm4gIWVsZW1lbnRzLnNvbWUoZWwgPT4gZWw/LmNvbnRhaW5zKGUudGFyZ2V0KSk7XG59XG5mdW5jdGlvbiBjaGVja0lzQWN0aXZlKGUsIGJpbmRpbmcpIHtcbiAgY29uc3QgaXNBY3RpdmUgPSB0eXBlb2YgYmluZGluZy52YWx1ZSA9PT0gJ29iamVjdCcgJiYgYmluZGluZy52YWx1ZS5jbG9zZUNvbmRpdGlvbmFsIHx8IGRlZmF1bHRDb25kaXRpb25hbDtcbiAgcmV0dXJuIGlzQWN0aXZlKGUpO1xufVxuZnVuY3Rpb24gZGlyZWN0aXZlKGUsIGVsLCBiaW5kaW5nKSB7XG4gIGNvbnN0IGhhbmRsZXIgPSB0eXBlb2YgYmluZGluZy52YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGJpbmRpbmcudmFsdWUgOiBiaW5kaW5nLnZhbHVlLmhhbmRsZXI7XG4gIGVsLl9jbGlja091dHNpZGUubGFzdE1vdXNlZG93bldhc091dHNpZGUgJiYgY2hlY2tFdmVudChlLCBlbCwgYmluZGluZykgJiYgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgY2hlY2tJc0FjdGl2ZShlLCBiaW5kaW5nKSAmJiBoYW5kbGVyICYmIGhhbmRsZXIoZSk7XG4gIH0sIDApO1xufVxuZnVuY3Rpb24gaGFuZGxlU2hhZG93KGVsLCBjYWxsYmFjaykge1xuICBjb25zdCByb290ID0gYXR0YWNoZWRSb290KGVsKTtcbiAgY2FsbGJhY2soZG9jdW1lbnQpO1xuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgIT09ICd1bmRlZmluZWQnICYmIHJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290KSB7XG4gICAgY2FsbGJhY2socm9vdCk7XG4gIH1cbn1cbmV4cG9ydCBjb25zdCBDbGlja091dHNpZGUgPSB7XG4gIC8vIFtkYXRhLWFwcF0gbWF5IG5vdCBiZSBmb3VuZFxuICAvLyBpZiB1c2luZyBiaW5kLCBpbnNlcnRlZCBtYWtlc1xuICAvLyBzdXJlIHRoYXQgdGhlIHJvb3QgZWxlbWVudCBpc1xuICAvLyBhdmFpbGFibGUsIGlPUyBkb2VzIG5vdCBzdXBwb3J0XG4gIC8vIGNsaWNrcyBvbiBib2R5XG4gIG1vdW50ZWQoZWwsIGJpbmRpbmcpIHtcbiAgICBjb25zdCBvbkNsaWNrID0gZSA9PiBkaXJlY3RpdmUoZSwgZWwsIGJpbmRpbmcpO1xuICAgIGNvbnN0IG9uTW91c2Vkb3duID0gZSA9PiB7XG4gICAgICBlbC5fY2xpY2tPdXRzaWRlLmxhc3RNb3VzZWRvd25XYXNPdXRzaWRlID0gY2hlY2tFdmVudChlLCBlbCwgYmluZGluZyk7XG4gICAgfTtcbiAgICBoYW5kbGVTaGFkb3coZWwsIGFwcCA9PiB7XG4gICAgICBhcHAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrLCB0cnVlKTtcbiAgICAgIGFwcC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbk1vdXNlZG93biwgdHJ1ZSk7XG4gICAgfSk7XG4gICAgaWYgKCFlbC5fY2xpY2tPdXRzaWRlKSB7XG4gICAgICBlbC5fY2xpY2tPdXRzaWRlID0ge1xuICAgICAgICBsYXN0TW91c2Vkb3duV2FzT3V0c2lkZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICAgIGVsLl9jbGlja091dHNpZGVbYmluZGluZy5pbnN0YW5jZS4kLnVpZF0gPSB7XG4gICAgICBvbkNsaWNrLFxuICAgICAgb25Nb3VzZWRvd25cbiAgICB9O1xuICB9LFxuICB1bm1vdW50ZWQoZWwsIGJpbmRpbmcpIHtcbiAgICBpZiAoIWVsLl9jbGlja091dHNpZGUpIHJldHVybjtcbiAgICBoYW5kbGVTaGFkb3coZWwsIGFwcCA9PiB7XG4gICAgICBpZiAoIWFwcCB8fCAhZWwuX2NsaWNrT3V0c2lkZT8uW2JpbmRpbmcuaW5zdGFuY2UuJC51aWRdKSByZXR1cm47XG4gICAgICBjb25zdCB7XG4gICAgICAgIG9uQ2xpY2ssXG4gICAgICAgIG9uTW91c2Vkb3duXG4gICAgICB9ID0gZWwuX2NsaWNrT3V0c2lkZVtiaW5kaW5nLmluc3RhbmNlLiQudWlkXTtcbiAgICAgIGFwcC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xpY2ssIHRydWUpO1xuICAgICAgYXBwLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uTW91c2Vkb3duLCB0cnVlKTtcbiAgICB9KTtcbiAgICBkZWxldGUgZWwuX2NsaWNrT3V0c2lkZVtiaW5kaW5nLmluc3RhbmNlLiQudWlkXTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IENsaWNrT3V0c2lkZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCJpbXBvcnQgeyB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIHZTaG93IGFzIF92U2hvdywgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVk92ZXJsYXkuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlTG9jYXRpb25TdHJhdGVneVByb3BzLCB1c2VMb2NhdGlvblN0cmF0ZWdpZXMgfSBmcm9tIFwiLi9sb2NhdGlvblN0cmF0ZWdpZXMubWpzXCI7XG5pbXBvcnQgeyBtYWtlU2Nyb2xsU3RyYXRlZ3lQcm9wcywgdXNlU2Nyb2xsU3RyYXRlZ2llcyB9IGZyb20gXCIuL3Njcm9sbFN0cmF0ZWdpZXMubWpzXCI7XG5pbXBvcnQgeyBtYWtlQWN0aXZhdG9yUHJvcHMsIHVzZUFjdGl2YXRvciB9IGZyb20gXCIuL3VzZUFjdGl2YXRvci5tanNcIjtcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGltZW5zaW9uUHJvcHMsIHVzZURpbWVuc2lvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaW1lbnNpb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlSHlkcmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2h5ZHJhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VMYXp5UHJvcHMsIHVzZUxhenkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGF6eS5tanNcIjtcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhbGUubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiO1xuaW1wb3J0IHsgdXNlQmFja0J1dHRvbiwgdXNlUm91dGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdXRlci5tanNcIjtcbmltcG9ydCB7IHVzZVNjb3BlSWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc2NvcGVJZC5tanNcIjtcbmltcG9ydCB7IHVzZVN0YWNrIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3N0YWNrLm1qc1wiO1xuaW1wb3J0IHsgdXNlVGVsZXBvcnQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGVsZXBvcnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiO1xuaW1wb3J0IHsgdXNlVG9nZ2xlU2NvcGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdG9nZ2xlU2NvcGUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVHJhbnNpdGlvblByb3BzLCBNYXliZVRyYW5zaXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdHJhbnNpdGlvbi5tanNcIjsgLy8gRGlyZWN0aXZlc1xuaW1wb3J0IHsgQ2xpY2tPdXRzaWRlIH0gZnJvbSBcIi4uLy4uL2RpcmVjdGl2ZXMvY2xpY2stb3V0c2lkZS9pbmRleC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgbWVyZ2VQcm9wcywgcmVmLCBUZWxlcG9ydCwgdG9SZWYsIFRyYW5zaXRpb24sIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGFuaW1hdGUsIGNvbnZlcnRUb1VuaXQsIGdlbmVyaWNDb21wb25lbnQsIGdldFNjcm9sbFBhcmVudCwgSU5fQlJPV1NFUiwgcHJvcHNGYWN0b3J5LCBzdGFuZGFyZEVhc2luZywgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5mdW5jdGlvbiBTY3JpbShwcm9wcykge1xuICBjb25zdCB7XG4gICAgbW9kZWxWYWx1ZSxcbiAgICBjb2xvcixcbiAgICAuLi5yZXN0XG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIF9jcmVhdGVWTm9kZShUcmFuc2l0aW9uLCB7XG4gICAgXCJuYW1lXCI6IFwiZmFkZS10cmFuc2l0aW9uXCIsXG4gICAgXCJhcHBlYXJcIjogdHJ1ZVxuICB9LCB7XG4gICAgZGVmYXVsdDogKCkgPT4gW3Byb3BzLm1vZGVsVmFsdWUgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIF9tZXJnZVByb3BzKHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LW92ZXJsYXlfX3NjcmltJywgcHJvcHMuY29sb3IuYmFja2dyb3VuZENvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLmNvbG9yLmJhY2tncm91bmRDb2xvclN0eWxlcy52YWx1ZVxuICAgIH0sIHJlc3QpLCBudWxsKV1cbiAgfSk7XG59XG5leHBvcnQgY29uc3QgbWFrZVZPdmVybGF5UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhYnNvbHV0ZTogQm9vbGVhbixcbiAgYXR0YWNoOiBbQm9vbGVhbiwgU3RyaW5nLCBPYmplY3RdLFxuICBjbG9zZU9uQmFjazoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBjb250YWluZWQ6IEJvb2xlYW4sXG4gIGNvbnRlbnRDbGFzczogbnVsbCxcbiAgY29udGVudFByb3BzOiBudWxsLFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgbm9DbGlja0FuaW1hdGlvbjogQm9vbGVhbixcbiAgbW9kZWxWYWx1ZTogQm9vbGVhbixcbiAgcGVyc2lzdGVudDogQm9vbGVhbixcbiAgc2NyaW06IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIHpJbmRleDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMjAwMFxuICB9LFxuICAuLi5tYWtlQWN0aXZhdG9yUHJvcHMoKSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEaW1lbnNpb25Qcm9wcygpLFxuICAuLi5tYWtlTGF6eVByb3BzKCksXG4gIC4uLm1ha2VMb2NhdGlvblN0cmF0ZWd5UHJvcHMoKSxcbiAgLi4ubWFrZVNjcm9sbFN0cmF0ZWd5UHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKSxcbiAgLi4ubWFrZVRyYW5zaXRpb25Qcm9wcygpXG59LCAnVk92ZXJsYXknKTtcbmV4cG9ydCBjb25zdCBWT3ZlcmxheSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWT3ZlcmxheScsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICBDbGlja091dHNpZGVcbiAgfSxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IHtcbiAgICBfZGlzYWJsZUdsb2JhbFN0YWNrOiBCb29sZWFuLFxuICAgIC4uLm1ha2VWT3ZlcmxheVByb3BzKClcbiAgfSxcbiAgZW1pdHM6IHtcbiAgICAnY2xpY2s6b3V0c2lkZSc6IGUgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWx1ZSA9PiB0cnVlLFxuICAgIGFmdGVyTGVhdmU6ICgpID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHMsXG4gICAgICBhdHRycyxcbiAgICAgIGVtaXRcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGNvbXB1dGVkKHtcbiAgICAgIGdldDogKCkgPT4gbW9kZWwudmFsdWUsXG4gICAgICBzZXQ6IHYgPT4ge1xuICAgICAgICBpZiAoISh2ICYmIHByb3BzLmRpc2FibGVkKSkgbW9kZWwudmFsdWUgPSB2O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIHRlbGVwb3J0VGFyZ2V0XG4gICAgfSA9IHVzZVRlbGVwb3J0KGNvbXB1dGVkKCgpID0+IHByb3BzLmF0dGFjaCB8fCBwcm9wcy5jb250YWluZWQpKTtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBydGxDbGFzc2VzLFxuICAgICAgaXNSdGxcbiAgICB9ID0gdXNlUnRsKCk7XG4gICAgY29uc3Qge1xuICAgICAgaGFzQ29udGVudCxcbiAgICAgIG9uQWZ0ZXJMZWF2ZVxuICAgIH0gPSB1c2VMYXp5KHByb3BzLCBpc0FjdGl2ZSk7XG4gICAgY29uc3Qgc2NyaW1Db2xvciA9IHVzZUJhY2tncm91bmRDb2xvcihjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gdHlwZW9mIHByb3BzLnNjcmltID09PSAnc3RyaW5nJyA/IHByb3BzLnNjcmltIDogbnVsbDtcbiAgICB9KSk7XG4gICAgY29uc3Qge1xuICAgICAgZ2xvYmFsVG9wLFxuICAgICAgbG9jYWxUb3AsXG4gICAgICBzdGFja1N0eWxlc1xuICAgIH0gPSB1c2VTdGFjayhpc0FjdGl2ZSwgdG9SZWYocHJvcHMsICd6SW5kZXgnKSwgcHJvcHMuX2Rpc2FibGVHbG9iYWxTdGFjayk7XG4gICAgY29uc3Qge1xuICAgICAgYWN0aXZhdG9yRWwsXG4gICAgICBhY3RpdmF0b3JSZWYsXG4gICAgICBhY3RpdmF0b3JFdmVudHMsXG4gICAgICBjb250ZW50RXZlbnRzLFxuICAgICAgc2NyaW1FdmVudHNcbiAgICB9ID0gdXNlQWN0aXZhdG9yKHByb3BzLCB7XG4gICAgICBpc0FjdGl2ZSxcbiAgICAgIGlzVG9wOiBsb2NhbFRvcFxuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGRpbWVuc2lvblN0eWxlc1xuICAgIH0gPSB1c2VEaW1lbnNpb24ocHJvcHMpO1xuICAgIGNvbnN0IGlzTW91bnRlZCA9IHVzZUh5ZHJhdGlvbigpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjb3BlSWRcbiAgICB9ID0gdXNlU2NvcGVJZCgpO1xuICAgIHdhdGNoKCgpID0+IHByb3BzLmRpc2FibGVkLCB2ID0+IHtcbiAgICAgIGlmICh2KSBpc0FjdGl2ZS52YWx1ZSA9IGZhbHNlO1xuICAgIH0pO1xuICAgIGNvbnN0IHJvb3QgPSByZWYoKTtcbiAgICBjb25zdCBjb250ZW50RWwgPSByZWYoKTtcbiAgICBjb25zdCB7XG4gICAgICBjb250ZW50U3R5bGVzLFxuICAgICAgdXBkYXRlTG9jYXRpb25cbiAgICB9ID0gdXNlTG9jYXRpb25TdHJhdGVnaWVzKHByb3BzLCB7XG4gICAgICBpc1J0bCxcbiAgICAgIGNvbnRlbnRFbCxcbiAgICAgIGFjdGl2YXRvckVsLFxuICAgICAgaXNBY3RpdmVcbiAgICB9KTtcbiAgICB1c2VTY3JvbGxTdHJhdGVnaWVzKHByb3BzLCB7XG4gICAgICByb290LFxuICAgICAgY29udGVudEVsLFxuICAgICAgYWN0aXZhdG9yRWwsXG4gICAgICBpc0FjdGl2ZSxcbiAgICAgIHVwZGF0ZUxvY2F0aW9uXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gb25DbGlja091dHNpZGUoZSkge1xuICAgICAgZW1pdCgnY2xpY2s6b3V0c2lkZScsIGUpO1xuICAgICAgaWYgKCFwcm9wcy5wZXJzaXN0ZW50KSBpc0FjdGl2ZS52YWx1ZSA9IGZhbHNlO2Vsc2UgYW5pbWF0ZUNsaWNrKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsb3NlQ29uZGl0aW9uYWwoKSB7XG4gICAgICByZXR1cm4gaXNBY3RpdmUudmFsdWUgJiYgZ2xvYmFsVG9wLnZhbHVlO1xuICAgIH1cbiAgICBJTl9CUk9XU0VSICYmIHdhdGNoKGlzQWN0aXZlLCB2YWwgPT4ge1xuICAgICAgaWYgKHZhbCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5ZG93bik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5ZG93bik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaW1tZWRpYXRlOiB0cnVlXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gb25LZXlkb3duKGUpIHtcbiAgICAgIGlmIChlLmtleSA9PT0gJ0VzY2FwZScgJiYgZ2xvYmFsVG9wLnZhbHVlKSB7XG4gICAgICAgIGlmICghcHJvcHMucGVyc2lzdGVudCkge1xuICAgICAgICAgIGlzQWN0aXZlLnZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgaWYgKGNvbnRlbnRFbC52YWx1ZT8uY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICAgIGFjdGl2YXRvckVsLnZhbHVlPy5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGFuaW1hdGVDbGljaygpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgICB1c2VUb2dnbGVTY29wZSgoKSA9PiBwcm9wcy5jbG9zZU9uQmFjaywgKCkgPT4ge1xuICAgICAgdXNlQmFja0J1dHRvbihyb3V0ZXIsIG5leHQgPT4ge1xuICAgICAgICBpZiAoZ2xvYmFsVG9wLnZhbHVlICYmIGlzQWN0aXZlLnZhbHVlKSB7XG4gICAgICAgICAgbmV4dChmYWxzZSk7XG4gICAgICAgICAgaWYgKCFwcm9wcy5wZXJzaXN0ZW50KSBpc0FjdGl2ZS52YWx1ZSA9IGZhbHNlO2Vsc2UgYW5pbWF0ZUNsaWNrKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBjb25zdCB0b3AgPSByZWYoKTtcbiAgICB3YXRjaCgoKSA9PiBpc0FjdGl2ZS52YWx1ZSAmJiAocHJvcHMuYWJzb2x1dGUgfHwgcHJvcHMuY29udGFpbmVkKSAmJiB0ZWxlcG9ydFRhcmdldC52YWx1ZSA9PSBudWxsLCB2YWwgPT4ge1xuICAgICAgaWYgKHZhbCkge1xuICAgICAgICBjb25zdCBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQocm9vdC52YWx1ZSk7XG4gICAgICAgIGlmIChzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50ICE9PSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50KSB7XG4gICAgICAgICAgdG9wLnZhbHVlID0gc2Nyb2xsUGFyZW50LnNjcm9sbFRvcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQWRkIGEgcXVpY2sgXCJib3VuY2VcIiBhbmltYXRpb24gdG8gdGhlIGNvbnRlbnRcbiAgICBmdW5jdGlvbiBhbmltYXRlQ2xpY2soKSB7XG4gICAgICBpZiAocHJvcHMubm9DbGlja0FuaW1hdGlvbikgcmV0dXJuO1xuICAgICAgY29udGVudEVsLnZhbHVlICYmIGFuaW1hdGUoY29udGVudEVsLnZhbHVlLCBbe1xuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXInXG4gICAgICB9LCB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEuMDMpJ1xuICAgICAgfSwge1xuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXInXG4gICAgICB9XSwge1xuICAgICAgICBkdXJhdGlvbjogMTUwLFxuICAgICAgICBlYXNpbmc6IHN0YW5kYXJkRWFzaW5nXG4gICAgICB9KTtcbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtzbG90cy5hY3RpdmF0b3I/Lih7XG4gICAgICBpc0FjdGl2ZTogaXNBY3RpdmUudmFsdWUsXG4gICAgICBwcm9wczogbWVyZ2VQcm9wcyh7XG4gICAgICAgIHJlZjogYWN0aXZhdG9yUmVmXG4gICAgICB9LCBhY3RpdmF0b3JFdmVudHMudmFsdWUsIHByb3BzLmFjdGl2YXRvclByb3BzKVxuICAgIH0pLCBpc01vdW50ZWQudmFsdWUgJiYgaGFzQ29udGVudC52YWx1ZSAmJiBfY3JlYXRlVk5vZGUoVGVsZXBvcnQsIHtcbiAgICAgIFwiZGlzYWJsZWRcIjogIXRlbGVwb3J0VGFyZ2V0LnZhbHVlLFxuICAgICAgXCJ0b1wiOiB0ZWxlcG9ydFRhcmdldC52YWx1ZVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcImNsYXNzXCI6IFsndi1vdmVybGF5Jywge1xuICAgICAgICAgICd2LW92ZXJsYXktLWFic29sdXRlJzogcHJvcHMuYWJzb2x1dGUgfHwgcHJvcHMuY29udGFpbmVkLFxuICAgICAgICAgICd2LW92ZXJsYXktLWFjdGl2ZSc6IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICAgICd2LW92ZXJsYXktLWNvbnRhaW5lZCc6IHByb3BzLmNvbnRhaW5lZFxuICAgICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIHJ0bENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbc3RhY2tTdHlsZXMudmFsdWUsIHtcbiAgICAgICAgICB0b3A6IGNvbnZlcnRUb1VuaXQodG9wLnZhbHVlKVxuICAgICAgICB9LCBwcm9wcy5zdHlsZV0sXG4gICAgICAgIFwicmVmXCI6IHJvb3RcbiAgICAgIH0sIHNjb3BlSWQsIGF0dHJzKSwgW19jcmVhdGVWTm9kZShTY3JpbSwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcImNvbG9yXCI6IHNjcmltQ29sb3IsXG4gICAgICAgIFwibW9kZWxWYWx1ZVwiOiBpc0FjdGl2ZS52YWx1ZSAmJiAhIXByb3BzLnNjcmltXG4gICAgICB9LCBzY3JpbUV2ZW50cy52YWx1ZSksIG51bGwpLCBfY3JlYXRlVk5vZGUoTWF5YmVUcmFuc2l0aW9uLCB7XG4gICAgICAgIFwiYXBwZWFyXCI6IHRydWUsXG4gICAgICAgIFwicGVyc2lzdGVkXCI6IHRydWUsXG4gICAgICAgIFwidHJhbnNpdGlvblwiOiBwcm9wcy50cmFuc2l0aW9uLFxuICAgICAgICBcInRhcmdldFwiOiBhY3RpdmF0b3JFbC52YWx1ZSxcbiAgICAgICAgXCJvbkFmdGVyTGVhdmVcIjogKCkgPT4ge1xuICAgICAgICAgIG9uQWZ0ZXJMZWF2ZSgpO1xuICAgICAgICAgIGVtaXQoJ2FmdGVyTGVhdmUnKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShcImRpdlwiLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgXCJyZWZcIjogY29udGVudEVsLFxuICAgICAgICAgIFwiY2xhc3NcIjogWyd2LW92ZXJsYXlfX2NvbnRlbnQnLCBwcm9wcy5jb250ZW50Q2xhc3NdLFxuICAgICAgICAgIFwic3R5bGVcIjogW2RpbWVuc2lvblN0eWxlcy52YWx1ZSwgY29udGVudFN0eWxlcy52YWx1ZV1cbiAgICAgICAgfSwgY29udGVudEV2ZW50cy52YWx1ZSwgcHJvcHMuY29udGVudFByb3BzKSwgW3Nsb3RzLmRlZmF1bHQ/Lih7XG4gICAgICAgICAgaXNBY3RpdmVcbiAgICAgICAgfSldKSwgW1tfdlNob3csIGlzQWN0aXZlLnZhbHVlXSwgW19yZXNvbHZlRGlyZWN0aXZlKFwiY2xpY2stb3V0c2lkZVwiKSwge1xuICAgICAgICAgIGhhbmRsZXI6IG9uQ2xpY2tPdXRzaWRlLFxuICAgICAgICAgIGNsb3NlQ29uZGl0aW9uYWwsXG4gICAgICAgICAgaW5jbHVkZTogKCkgPT4gW2FjdGl2YXRvckVsLnZhbHVlXVxuICAgICAgICB9XV0pXVxuICAgICAgfSldKV1cbiAgICB9KV0pKTtcbiAgICByZXR1cm4ge1xuICAgICAgYWN0aXZhdG9yRWwsXG4gICAgICBhbmltYXRlQ2xpY2ssXG4gICAgICBjb250ZW50RWwsXG4gICAgICBnbG9iYWxUb3AsXG4gICAgICBsb2NhbFRvcCxcbiAgICAgIHVwZGF0ZUxvY2F0aW9uXG4gICAgfTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WT3ZlcmxheS5tanMubWFwIiwiLy8gVHlwZXNcblxuY29uc3QgUmVmcyA9IFN5bWJvbCgnRm9yd2FyZGVkIHJlZnMnKTtcblxuLyoqIE9taXQgcHJvcGVydGllcyBzdGFydGluZyB3aXRoIFAgKi9cblxuZnVuY3Rpb24gZ2V0RGVzY3JpcHRvcihvYmosIGtleSkge1xuICBsZXQgY3VycmVudE9iaiA9IG9iajtcbiAgd2hpbGUgKGN1cnJlbnRPYmopIHtcbiAgICBjb25zdCBkZXNjcmlwdG9yID0gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY3VycmVudE9iaiwga2V5KTtcbiAgICBpZiAoZGVzY3JpcHRvcikgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgY3VycmVudE9iaiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihjdXJyZW50T2JqKTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmRSZWZzKHRhcmdldCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVmcyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcmVmc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cbiAgdGFyZ2V0W1JlZnNdID0gcmVmcztcbiAgcmV0dXJuIG5ldyBQcm94eSh0YXJnZXQsIHtcbiAgICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmIChSZWZsZWN0Lmhhcyh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5KTtcbiAgICAgIH1cblxuICAgICAgLy8gU2tpcCBpbnRlcm5hbCBwcm9wZXJ0aWVzXG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N5bWJvbCcgfHwga2V5LnN0YXJ0c1dpdGgoJ19fJykpIHJldHVybjtcbiAgICAgIGZvciAoY29uc3QgcmVmIG9mIHJlZnMpIHtcbiAgICAgICAgaWYgKHJlZi52YWx1ZSAmJiBSZWZsZWN0LmhhcyhyZWYudmFsdWUsIGtleSkpIHtcbiAgICAgICAgICBjb25zdCB2YWwgPSBSZWZsZWN0LmdldChyZWYudmFsdWUsIGtleSk7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicgPyB2YWwuYmluZChyZWYudmFsdWUpIDogdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBoYXModGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmIChSZWZsZWN0Lmhhcyh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIFNraXAgaW50ZXJuYWwgcHJvcGVydGllc1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzeW1ib2wnIHx8IGtleS5zdGFydHNXaXRoKCdfXycpKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGNvbnN0IHJlZiBvZiByZWZzKSB7XG4gICAgICAgIGlmIChyZWYudmFsdWUgJiYgUmVmbGVjdC5oYXMocmVmLnZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChSZWZsZWN0Lmhhcyh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3Quc2V0KHRhcmdldCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNraXAgaW50ZXJuYWwgcHJvcGVydGllc1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzeW1ib2wnIHx8IGtleS5zdGFydHNXaXRoKCdfXycpKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGNvbnN0IHJlZiBvZiByZWZzKSB7XG4gICAgICAgIGlmIChyZWYudmFsdWUgJiYgUmVmbGVjdC5oYXMocmVmLnZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIFJlZmxlY3Quc2V0KHJlZi52YWx1ZSwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgICAgY29uc3QgZGVzY3JpcHRvciA9IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIGlmIChkZXNjcmlwdG9yKSByZXR1cm4gZGVzY3JpcHRvcjtcblxuICAgICAgLy8gU2tpcCBpbnRlcm5hbCBwcm9wZXJ0aWVzXG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N5bWJvbCcgfHwga2V5LnN0YXJ0c1dpdGgoJ19fJykpIHJldHVybjtcblxuICAgICAgLy8gQ2hlY2sgZWFjaCByZWYncyBvd24gcHJvcGVydGllc1xuICAgICAgZm9yIChjb25zdCByZWYgb2YgcmVmcykge1xuICAgICAgICBpZiAoIXJlZi52YWx1ZSkgY29udGludWU7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBnZXREZXNjcmlwdG9yKHJlZi52YWx1ZSwga2V5KSA/PyAoJ18nIGluIHJlZi52YWx1ZSA/IGdldERlc2NyaXB0b3IocmVmLnZhbHVlLl8/LnNldHVwU3RhdGUsIGtleSkgOiB1bmRlZmluZWQpO1xuICAgICAgICBpZiAoZGVzY3JpcHRvcikgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZSBzZWFyY2ggdXAgZWFjaCByZWYncyBwcm90b3R5cGVcbiAgICAgIGZvciAoY29uc3QgcmVmIG9mIHJlZnMpIHtcbiAgICAgICAgY29uc3QgY2hpbGRSZWZzID0gcmVmLnZhbHVlICYmIHJlZi52YWx1ZVtSZWZzXTtcbiAgICAgICAgaWYgKCFjaGlsZFJlZnMpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBxdWV1ZSA9IGNoaWxkUmVmcy5zbGljZSgpO1xuICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgcmVmID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gZ2V0RGVzY3JpcHRvcihyZWYudmFsdWUsIGtleSk7XG4gICAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICAgIGNvbnN0IGNoaWxkUmVmcyA9IHJlZi52YWx1ZSAmJiByZWYudmFsdWVbUmVmc107XG4gICAgICAgICAgaWYgKGNoaWxkUmVmcykgcXVldWUucHVzaCguLi5jaGlsZFJlZnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3J3YXJkUmVmcy5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZNZW51LmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWRGlhbG9nVHJhbnNpdGlvbiB9IGZyb20gXCIuLi90cmFuc2l0aW9ucy9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZEZWZhdWx0c1Byb3ZpZGVyIH0gZnJvbSBcIi4uL1ZEZWZhdWx0c1Byb3ZpZGVyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVk92ZXJsYXkgfSBmcm9tIFwiLi4vVk92ZXJsYXkvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBtYWtlVk92ZXJsYXlQcm9wcyB9IGZyb20gXCIuLi9WT3ZlcmxheS9WT3ZlcmxheS5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IGZvcndhcmRSZWZzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvcndhcmRSZWZzLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IHVzZVNjb3BlSWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc2NvcGVJZC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaW5qZWN0LCBtZXJnZVByb3BzLCBuZXh0VGljaywgcHJvdmlkZSwgcmVmLCBzaGFsbG93UmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBWTWVudVN5bWJvbCB9IGZyb20gXCIuL3NoYXJlZC5tanNcIjtcbmltcG9ydCB7IGZvY3VzYWJsZUNoaWxkcmVuLCBmb2N1c0NoaWxkLCBnZW5lcmljQ29tcG9uZW50LCBnZXROZXh0RWxlbWVudCwgZ2V0VWlkLCBvbWl0LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWTWVudVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgLy8gVE9ET1xuICAvLyBkaXNhYmxlS2V5czogQm9vbGVhbixcbiAgaWQ6IFN0cmluZyxcbiAgLi4ub21pdChtYWtlVk92ZXJsYXlQcm9wcyh7XG4gICAgY2xvc2VEZWxheTogMjUwLFxuICAgIGNsb3NlT25Db250ZW50Q2xpY2s6IHRydWUsXG4gICAgbG9jYXRpb25TdHJhdGVneTogJ2Nvbm5lY3RlZCcsXG4gICAgb3BlbkRlbGF5OiAzMDAsXG4gICAgc2NyaW06IGZhbHNlLFxuICAgIHNjcm9sbFN0cmF0ZWd5OiAncmVwb3NpdGlvbicsXG4gICAgdHJhbnNpdGlvbjoge1xuICAgICAgY29tcG9uZW50OiBWRGlhbG9nVHJhbnNpdGlvblxuICAgIH1cbiAgfSksIFsnYWJzb2x1dGUnXSlcbn0sICdWTWVudScpO1xuZXhwb3J0IGNvbnN0IFZNZW51ID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZNZW51JyxcbiAgcHJvcHM6IG1ha2VWTWVudVByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjb3BlSWRcbiAgICB9ID0gdXNlU2NvcGVJZCgpO1xuICAgIGNvbnN0IHVpZCA9IGdldFVpZCgpO1xuICAgIGNvbnN0IGlkID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuaWQgfHwgYHYtbWVudS0ke3VpZH1gKTtcbiAgICBjb25zdCBvdmVybGF5ID0gcmVmKCk7XG4gICAgY29uc3QgcGFyZW50ID0gaW5qZWN0KFZNZW51U3ltYm9sLCBudWxsKTtcbiAgICBjb25zdCBvcGVuQ2hpbGRyZW4gPSBzaGFsbG93UmVmKDApO1xuICAgIHByb3ZpZGUoVk1lbnVTeW1ib2wsIHtcbiAgICAgIHJlZ2lzdGVyKCkge1xuICAgICAgICArK29wZW5DaGlsZHJlbi52YWx1ZTtcbiAgICAgIH0sXG4gICAgICB1bnJlZ2lzdGVyKCkge1xuICAgICAgICAtLW9wZW5DaGlsZHJlbi52YWx1ZTtcbiAgICAgIH0sXG4gICAgICBjbG9zZVBhcmVudHMoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICghb3BlbkNoaWxkcmVuLnZhbHVlKSB7XG4gICAgICAgICAgICBpc0FjdGl2ZS52YWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcGFyZW50Py5jbG9zZVBhcmVudHMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDQwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhc3luYyBmdW5jdGlvbiBvbkZvY3VzSW4oZSkge1xuICAgICAgY29uc3QgYmVmb3JlID0gZS5yZWxhdGVkVGFyZ2V0O1xuICAgICAgY29uc3QgYWZ0ZXIgPSBlLnRhcmdldDtcbiAgICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICBpZiAoaXNBY3RpdmUudmFsdWUgJiYgYmVmb3JlICE9PSBhZnRlciAmJiBvdmVybGF5LnZhbHVlPy5jb250ZW50RWwgJiZcbiAgICAgIC8vIFdlJ3JlIHRoZSB0b3Btb3N0IG1lbnVcbiAgICAgIG92ZXJsYXkudmFsdWU/Lmdsb2JhbFRvcCAmJlxuICAgICAgLy8gSXQgaXNuJ3QgdGhlIGRvY3VtZW50IG9yIHRoZSBtZW51IGJvZHlcbiAgICAgICFbZG9jdW1lbnQsIG92ZXJsYXkudmFsdWUuY29udGVudEVsXS5pbmNsdWRlcyhhZnRlcikgJiZcbiAgICAgIC8vIEl0IGlzbid0IGluc2lkZSB0aGUgbWVudSBib2R5XG4gICAgICAhb3ZlcmxheS52YWx1ZS5jb250ZW50RWwuY29udGFpbnMoYWZ0ZXIpKSB7XG4gICAgICAgIGNvbnN0IGZvY3VzYWJsZSA9IGZvY3VzYWJsZUNoaWxkcmVuKG92ZXJsYXkudmFsdWUuY29udGVudEVsKTtcbiAgICAgICAgZm9jdXNhYmxlWzBdPy5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgICB3YXRjaChpc0FjdGl2ZSwgdmFsID0+IHtcbiAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgcGFyZW50Py5yZWdpc3RlcigpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgb25Gb2N1c0luLCB7XG4gICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudD8udW5yZWdpc3RlcigpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1c2luJywgb25Gb2N1c0luKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBvbkNsaWNrT3V0c2lkZSgpIHtcbiAgICAgIHBhcmVudD8uY2xvc2VQYXJlbnRzKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uS2V5ZG93bihlKSB7XG4gICAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgIGlmIChlLmtleSA9PT0gJ1RhYicpIHtcbiAgICAgICAgY29uc3QgbmV4dEVsZW1lbnQgPSBnZXROZXh0RWxlbWVudChmb2N1c2FibGVDaGlsZHJlbihvdmVybGF5LnZhbHVlPy5jb250ZW50RWwsIGZhbHNlKSwgZS5zaGlmdEtleSA/ICdwcmV2JyA6ICduZXh0JywgZWwgPT4gZWwudGFiSW5kZXggPj0gMCk7XG4gICAgICAgIGlmICghbmV4dEVsZW1lbnQpIHtcbiAgICAgICAgICBpc0FjdGl2ZS52YWx1ZSA9IGZhbHNlO1xuICAgICAgICAgIG92ZXJsYXkudmFsdWU/LmFjdGl2YXRvckVsPy5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQWN0aXZhdG9yS2V5ZG93bihlKSB7XG4gICAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgIGNvbnN0IGVsID0gb3ZlcmxheS52YWx1ZT8uY29udGVudEVsO1xuICAgICAgaWYgKGVsICYmIGlzQWN0aXZlLnZhbHVlKSB7XG4gICAgICAgIGlmIChlLmtleSA9PT0gJ0Fycm93RG93bicpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZm9jdXNDaGlsZChlbCwgJ25leHQnKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLmtleSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGZvY3VzQ2hpbGQoZWwsICdwcmV2Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoWydBcnJvd0Rvd24nLCAnQXJyb3dVcCddLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICBpc0FjdGl2ZS52YWx1ZSA9IHRydWU7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzZXRUaW1lb3V0KCgpID0+IG9uQWN0aXZhdG9yS2V5ZG93bihlKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhY3RpdmF0b3JQcm9wcyA9IGNvbXB1dGVkKCgpID0+IG1lcmdlUHJvcHMoe1xuICAgICAgJ2FyaWEtaGFzcG9wdXAnOiAnbWVudScsXG4gICAgICAnYXJpYS1leHBhbmRlZCc6IFN0cmluZyhpc0FjdGl2ZS52YWx1ZSksXG4gICAgICAnYXJpYS1vd25zJzogaWQudmFsdWUsXG4gICAgICBvbktleWRvd246IG9uQWN0aXZhdG9yS2V5ZG93blxuICAgIH0sIHByb3BzLmFjdGl2YXRvclByb3BzKSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFtvdmVybGF5UHJvcHNdID0gVk92ZXJsYXkuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWT3ZlcmxheSwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcInJlZlwiOiBvdmVybGF5LFxuICAgICAgICBcImNsYXNzXCI6IFsndi1tZW51JywgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9LCBvdmVybGF5UHJvcHMsIHtcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IGlzQWN0aXZlLnZhbHVlID0gJGV2ZW50LFxuICAgICAgICBcImFic29sdXRlXCI6IHRydWUsXG4gICAgICAgIFwiYWN0aXZhdG9yUHJvcHNcIjogYWN0aXZhdG9yUHJvcHMudmFsdWUsXG4gICAgICAgIFwib25DbGljazpvdXRzaWRlXCI6IG9uQ2xpY2tPdXRzaWRlLFxuICAgICAgICBcIm9uS2V5ZG93blwiOiBvbktleWRvd25cbiAgICAgIH0sIHNjb3BlSWQpLCB7XG4gICAgICAgIGFjdGl2YXRvcjogc2xvdHMuYWN0aXZhdG9yLFxuICAgICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgICBcInJvb3RcIjogXCJWTWVudVwiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmRlZmF1bHQ/LiguLi5hcmdzKV1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvcndhcmRSZWZzKHtcbiAgICAgIGlkLFxuICAgICAgzqhvcGVuQ2hpbGRyZW46IG9wZW5DaGlsZHJlblxuICAgIH0sIG92ZXJsYXkpO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZNZW51Lm1qcy5tYXAiLCJpbXBvcnQgeyB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgdlNob3cgYXMgX3ZTaG93IH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZDb3VudGVyLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWU2xpZGVZVHJhbnNpdGlvbiB9IGZyb20gXCIuLi90cmFuc2l0aW9ucy9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVHJhbnNpdGlvblByb3BzLCBNYXliZVRyYW5zaXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdHJhbnNpdGlvbi5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWQ291bnRlclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWN0aXZlOiBCb29sZWFuLFxuICBtYXg6IFtOdW1iZXIsIFN0cmluZ10sXG4gIHZhbHVlOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAwXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlVHJhbnNpdGlvblByb3BzKHtcbiAgICB0cmFuc2l0aW9uOiB7XG4gICAgICBjb21wb25lbnQ6IFZTbGlkZVlUcmFuc2l0aW9uXG4gICAgfVxuICB9KVxufSwgJ1ZDb3VudGVyJyk7XG5leHBvcnQgY29uc3QgVkNvdW50ZXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkNvdW50ZXInLFxuICBmdW5jdGlvbmFsOiB0cnVlLFxuICBwcm9wczogbWFrZVZDb3VudGVyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBjb3VudGVyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLm1heCA/IGAke3Byb3BzLnZhbHVlfSAvICR7cHJvcHMubWF4fWAgOiBTdHJpbmcocHJvcHMudmFsdWUpO1xuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoTWF5YmVUcmFuc2l0aW9uLCB7XG4gICAgICBcInRyYW5zaXRpb25cIjogcHJvcHMudHJhbnNpdGlvblxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtY291bnRlcicsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSwgW3Nsb3RzLmRlZmF1bHQgPyBzbG90cy5kZWZhdWx0KHtcbiAgICAgICAgY291bnRlcjogY291bnRlci52YWx1ZSxcbiAgICAgICAgbWF4OiBwcm9wcy5tYXgsXG4gICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZVxuICAgICAgfSkgOiBjb3VudGVyLnZhbHVlXSksIFtbX3ZTaG93LCBwcm9wcy5hY3RpdmVdXSldXG4gICAgfSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ291bnRlci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkxhYmVsIH0gZnJvbSBcIi4uL1ZMYWJlbC9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkZpZWxkTGFiZWxQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGZsb2F0aW5nOiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKVxufSwgJ1ZGaWVsZExhYmVsJyk7XG5leHBvcnQgY29uc3QgVkZpZWxkTGFiZWwgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkZpZWxkTGFiZWwnLFxuICBwcm9wczogbWFrZVZGaWVsZExhYmVsUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFZMYWJlbCwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtZmllbGQtbGFiZWwnLCB7XG4gICAgICAgICd2LWZpZWxkLWxhYmVsLS1mbG9hdGluZyc6IHByb3BzLmZsb2F0aW5nXG4gICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlLFxuICAgICAgXCJhcmlhLWhpZGRlblwiOiBwcm9wcy5mbG9hdGluZyB8fCB1bmRlZmluZWRcbiAgICB9LCBzbG90cykpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WRmllbGRMYWJlbC5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHZTaG93IGFzIF92U2hvdywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZGaWVsZC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkZpZWxkTGFiZWwgfSBmcm9tIFwiLi9WRmllbGRMYWJlbC5tanNcIjtcbmltcG9ydCB7IFZFeHBhbmRYVHJhbnNpdGlvbiB9IGZyb20gXCIuLi90cmFuc2l0aW9ucy9pbmRleC5tanNcIjtcbmltcG9ydCB7IHVzZUlucHV0SWNvbiB9IGZyb20gXCIuLi9WSW5wdXQvSW5wdXRJY29uLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQmFja2dyb3VuZENvbG9yLCB1c2VUZXh0Q29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUZvY3VzUHJvcHMsIHVzZUZvY3VzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvY3VzLm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgTG9hZGVyU2xvdCwgbWFrZUxvYWRlclByb3BzLCB1c2VMb2FkZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9hZGVyLm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHJlZiwgdG9SZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGFuaW1hdGUsIGNvbnZlcnRUb1VuaXQsIEV2ZW50UHJvcCwgZ2VuZXJpY0NvbXBvbmVudCwgZ2V0VWlkLCBpc09uLCBudWxsaWZ5VHJhbnNmb3JtcywgcGljaywgcHJvcHNGYWN0b3J5LCBzdGFuZGFyZEVhc2luZywgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5jb25zdCBhbGxvd2VkVmFyaWFudHMgPSBbJ3VuZGVybGluZWQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJywgJ3NvbG8nLCAnc29sby1pbnZlcnRlZCcsICdzb2xvLWZpbGxlZCcsICdwbGFpbiddO1xuZXhwb3J0IGNvbnN0IG1ha2VWRmllbGRQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGFwcGVuZElubmVySWNvbjogSWNvblZhbHVlLFxuICBiZ0NvbG9yOiBTdHJpbmcsXG4gIGNsZWFyYWJsZTogQm9vbGVhbixcbiAgY2xlYXJJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckY2xlYXInXG4gIH0sXG4gIGFjdGl2ZTogQm9vbGVhbixcbiAgY2VudGVyQWZmaXg6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICBjb2xvcjogU3RyaW5nLFxuICBiYXNlQ29sb3I6IFN0cmluZyxcbiAgZGlydHk6IEJvb2xlYW4sXG4gIGRpc2FibGVkOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIGVycm9yOiBCb29sZWFuLFxuICBmbGF0OiBCb29sZWFuLFxuICBsYWJlbDogU3RyaW5nLFxuICBwZXJzaXN0ZW50Q2xlYXI6IEJvb2xlYW4sXG4gIHByZXBlbmRJbm5lckljb246IEljb25WYWx1ZSxcbiAgcmV2ZXJzZTogQm9vbGVhbixcbiAgc2luZ2xlTGluZTogQm9vbGVhbixcbiAgdmFyaWFudDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnZmlsbGVkJyxcbiAgICB2YWxpZGF0b3I6IHYgPT4gYWxsb3dlZFZhcmlhbnRzLmluY2x1ZGVzKHYpXG4gIH0sXG4gICdvbkNsaWNrOmNsZWFyJzogRXZlbnRQcm9wKCksXG4gICdvbkNsaWNrOmFwcGVuZElubmVyJzogRXZlbnRQcm9wKCksXG4gICdvbkNsaWNrOnByZXBlbmRJbm5lcic6IEV2ZW50UHJvcCgpLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUxvYWRlclByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZGaWVsZCcpO1xuZXhwb3J0IGNvbnN0IFZGaWVsZCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWRmllbGQnLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczoge1xuICAgIGlkOiBTdHJpbmcsXG4gICAgLi4ubWFrZUZvY3VzUHJvcHMoKSxcbiAgICAuLi5tYWtlVkZpZWxkUHJvcHMoKVxuICB9LFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6Zm9jdXNlZCc6IGZvY3VzZWQgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBhdHRycyxcbiAgICAgIGVtaXQsXG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxvYWRlckNsYXNzZXNcbiAgICB9ID0gdXNlTG9hZGVyKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBmb2N1c0NsYXNzZXMsXG4gICAgICBpc0ZvY3VzZWQsXG4gICAgICBmb2N1cyxcbiAgICAgIGJsdXJcbiAgICB9ID0gdXNlRm9jdXMocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIElucHV0SWNvblxuICAgIH0gPSB1c2VJbnB1dEljb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJ0bENsYXNzZXNcbiAgICB9ID0gdXNlUnRsKCk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5kaXJ0eSB8fCBwcm9wcy5hY3RpdmUpO1xuICAgIGNvbnN0IGhhc0xhYmVsID0gY29tcHV0ZWQoKCkgPT4gIXByb3BzLnNpbmdsZUxpbmUgJiYgISEocHJvcHMubGFiZWwgfHwgc2xvdHMubGFiZWwpKTtcbiAgICBjb25zdCB1aWQgPSBnZXRVaWQoKTtcbiAgICBjb25zdCBpZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmlkIHx8IGBpbnB1dC0ke3VpZH1gKTtcbiAgICBjb25zdCBtZXNzYWdlc0lkID0gY29tcHV0ZWQoKCkgPT4gYCR7aWQudmFsdWV9LW1lc3NhZ2VzYCk7XG4gICAgY29uc3QgbGFiZWxSZWYgPSByZWYoKTtcbiAgICBjb25zdCBmbG9hdGluZ0xhYmVsUmVmID0gcmVmKCk7XG4gICAgY29uc3QgY29udHJvbFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGlzUGxhaW5PclVuZGVybGluZWQgPSBjb21wdXRlZCgoKSA9PiBbJ3BsYWluJywgJ3VuZGVybGluZWQnXS5pbmNsdWRlcyhwcm9wcy52YXJpYW50KSk7XG4gICAgY29uc3Qge1xuICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VCYWNrZ3JvdW5kQ29sb3IodG9SZWYocHJvcHMsICdiZ0NvbG9yJykpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRleHRDb2xvckNsYXNzZXMsXG4gICAgICB0ZXh0Q29sb3JTdHlsZXNcbiAgICB9ID0gdXNlVGV4dENvbG9yKGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5lcnJvciB8fCBwcm9wcy5kaXNhYmxlZCA/IHVuZGVmaW5lZCA6IGlzQWN0aXZlLnZhbHVlICYmIGlzRm9jdXNlZC52YWx1ZSA/IHByb3BzLmNvbG9yIDogcHJvcHMuYmFzZUNvbG9yO1xuICAgIH0pKTtcbiAgICB3YXRjaChpc0FjdGl2ZSwgdmFsID0+IHtcbiAgICAgIGlmIChoYXNMYWJlbC52YWx1ZSkge1xuICAgICAgICBjb25zdCBlbCA9IGxhYmVsUmVmLnZhbHVlLiRlbDtcbiAgICAgICAgY29uc3QgdGFyZ2V0RWwgPSBmbG9hdGluZ0xhYmVsUmVmLnZhbHVlLiRlbDtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBjb25zdCByZWN0ID0gbnVsbGlmeVRyYW5zZm9ybXMoZWwpO1xuICAgICAgICAgIGNvbnN0IHRhcmdldFJlY3QgPSB0YXJnZXRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICBjb25zdCB4ID0gdGFyZ2V0UmVjdC54IC0gcmVjdC54O1xuICAgICAgICAgIGNvbnN0IHkgPSB0YXJnZXRSZWN0LnkgLSByZWN0LnkgLSAocmVjdC5oZWlnaHQgLyAyIC0gdGFyZ2V0UmVjdC5oZWlnaHQgLyAyKTtcbiAgICAgICAgICBjb25zdCB0YXJnZXRXaWR0aCA9IHRhcmdldFJlY3Qud2lkdGggLyAwLjc1O1xuICAgICAgICAgIGNvbnN0IHdpZHRoID0gTWF0aC5hYnModGFyZ2V0V2lkdGggLSByZWN0LndpZHRoKSA+IDEgPyB7XG4gICAgICAgICAgICBtYXhXaWR0aDogY29udmVydFRvVW5pdCh0YXJnZXRXaWR0aClcbiAgICAgICAgICB9IDogdW5kZWZpbmVkO1xuICAgICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgICAgICAgY29uc3QgdGFyZ2V0U3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldEVsKTtcbiAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IHBhcnNlRmxvYXQoc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uKSAqIDEwMDAgfHwgMTUwO1xuICAgICAgICAgIGNvbnN0IHNjYWxlID0gcGFyc2VGbG9hdCh0YXJnZXRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLXYtZmllbGQtbGFiZWwtc2NhbGUnKSk7XG4gICAgICAgICAgY29uc3QgY29sb3IgPSB0YXJnZXRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdjb2xvcicpO1xuICAgICAgICAgIGVsLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgICAgdGFyZ2V0RWwuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgIGFuaW1hdGUoZWwsIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke3h9cHgsICR7eX1weCkgc2NhbGUoJHtzY2FsZX0pYCxcbiAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgLi4ud2lkdGhcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIGVhc2luZzogc3RhbmRhcmRFYXNpbmcsXG4gICAgICAgICAgICBkaXJlY3Rpb246IHZhbCA/ICdub3JtYWwnIDogJ3JldmVyc2UnXG4gICAgICAgICAgfSkuZmluaXNoZWQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBlbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgndmlzaWJpbGl0eScpO1xuICAgICAgICAgICAgdGFyZ2V0RWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3Zpc2liaWxpdHknKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZmx1c2g6ICdwb3N0J1xuICAgIH0pO1xuICAgIGNvbnN0IHNsb3RQcm9wcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICBpc0FjdGl2ZSxcbiAgICAgIGlzRm9jdXNlZCxcbiAgICAgIGNvbnRyb2xSZWYsXG4gICAgICBibHVyLFxuICAgICAgZm9jdXNcbiAgICB9KSk7XG4gICAgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICBpZiAoZS50YXJnZXQgIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH1cbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaXNPdXRsaW5lZCA9IHByb3BzLnZhcmlhbnQgPT09ICdvdXRsaW5lZCc7XG4gICAgICBjb25zdCBoYXNQcmVwZW5kID0gc2xvdHNbJ3ByZXBlbmQtaW5uZXInXSB8fCBwcm9wcy5wcmVwZW5kSW5uZXJJY29uO1xuICAgICAgY29uc3QgaGFzQ2xlYXIgPSAhIShwcm9wcy5jbGVhcmFibGUgfHwgc2xvdHMuY2xlYXIpO1xuICAgICAgY29uc3QgaGFzQXBwZW5kID0gISEoc2xvdHNbJ2FwcGVuZC1pbm5lciddIHx8IHByb3BzLmFwcGVuZElubmVySWNvbiB8fCBoYXNDbGVhcik7XG4gICAgICBjb25zdCBsYWJlbCA9IHNsb3RzLmxhYmVsID8gc2xvdHMubGFiZWwoe1xuICAgICAgICAuLi5zbG90UHJvcHMudmFsdWUsXG4gICAgICAgIGxhYmVsOiBwcm9wcy5sYWJlbCxcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICBmb3I6IGlkLnZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0pIDogcHJvcHMubGFiZWw7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtZmllbGQnLCB7XG4gICAgICAgICAgJ3YtZmllbGQtLWFjdGl2ZSc6IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICAgICd2LWZpZWxkLS1hcHBlbmRlZCc6IGhhc0FwcGVuZCxcbiAgICAgICAgICAndi1maWVsZC0tY2VudGVyLWFmZml4JzogcHJvcHMuY2VudGVyQWZmaXggPz8gIWlzUGxhaW5PclVuZGVybGluZWQudmFsdWUsXG4gICAgICAgICAgJ3YtZmllbGQtLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgJ3YtZmllbGQtLWRpcnR5JzogcHJvcHMuZGlydHksXG4gICAgICAgICAgJ3YtZmllbGQtLWVycm9yJzogcHJvcHMuZXJyb3IsXG4gICAgICAgICAgJ3YtZmllbGQtLWZsYXQnOiBwcm9wcy5mbGF0LFxuICAgICAgICAgICd2LWZpZWxkLS1oYXMtYmFja2dyb3VuZCc6ICEhcHJvcHMuYmdDb2xvcixcbiAgICAgICAgICAndi1maWVsZC0tcGVyc2lzdGVudC1jbGVhcic6IHByb3BzLnBlcnNpc3RlbnRDbGVhcixcbiAgICAgICAgICAndi1maWVsZC0tcHJlcGVuZGVkJzogaGFzUHJlcGVuZCxcbiAgICAgICAgICAndi1maWVsZC0tcmV2ZXJzZSc6IHByb3BzLnJldmVyc2UsXG4gICAgICAgICAgJ3YtZmllbGQtLXNpbmdsZS1saW5lJzogcHJvcHMuc2luZ2xlTGluZSxcbiAgICAgICAgICAndi1maWVsZC0tbm8tbGFiZWwnOiAhbGFiZWwsXG4gICAgICAgICAgW2B2LWZpZWxkLS12YXJpYW50LSR7cHJvcHMudmFyaWFudH1gXTogdHJ1ZVxuICAgICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIGZvY3VzQ2xhc3Nlcy52YWx1ZSwgbG9hZGVyQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHJ0bENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV0sXG4gICAgICAgIFwib25DbGlja1wiOiBvbkNsaWNrXG4gICAgICB9LCBhdHRycyksIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi1maWVsZF9fb3ZlcmxheVwiXG4gICAgICB9LCBudWxsKSwgX2NyZWF0ZVZOb2RlKExvYWRlclNsb3QsIHtcbiAgICAgICAgXCJuYW1lXCI6IFwidi1maWVsZFwiLFxuICAgICAgICBcImFjdGl2ZVwiOiAhIXByb3BzLmxvYWRpbmcsXG4gICAgICAgIFwiY29sb3JcIjogcHJvcHMuZXJyb3IgPyAnZXJyb3InIDogdHlwZW9mIHByb3BzLmxvYWRpbmcgPT09ICdzdHJpbmcnID8gcHJvcHMubG9hZGluZyA6IHByb3BzLmNvbG9yXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6IHNsb3RzLmxvYWRlclxuICAgICAgfSksIGhhc1ByZXBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kXCIsXG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWZpZWxkX19wcmVwZW5kLWlubmVyXCJcbiAgICAgIH0sIFtwcm9wcy5wcmVwZW5kSW5uZXJJY29uICYmIF9jcmVhdGVWTm9kZShJbnB1dEljb24sIHtcbiAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWljb25cIixcbiAgICAgICAgXCJuYW1lXCI6IFwicHJlcGVuZElubmVyXCJcbiAgICAgIH0sIG51bGwpLCBzbG90c1sncHJlcGVuZC1pbm5lciddPy4oc2xvdFByb3BzLnZhbHVlKV0pLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi1maWVsZF9fZmllbGRcIixcbiAgICAgICAgXCJkYXRhLW5vLWFjdGl2YXRvclwiOiBcIlwiXG4gICAgICB9LCBbWydmaWxsZWQnLCAnc29sbycsICdzb2xvLWludmVydGVkJywgJ3NvbG8tZmlsbGVkJ10uaW5jbHVkZXMocHJvcHMudmFyaWFudCkgJiYgaGFzTGFiZWwudmFsdWUgJiYgX2NyZWF0ZVZOb2RlKFZGaWVsZExhYmVsLCB7XG4gICAgICAgIFwia2V5XCI6IFwiZmxvYXRpbmctbGFiZWxcIixcbiAgICAgICAgXCJyZWZcIjogZmxvYXRpbmdMYWJlbFJlZixcbiAgICAgICAgXCJjbGFzc1wiOiBbdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgIFwiZmxvYXRpbmdcIjogdHJ1ZSxcbiAgICAgICAgXCJmb3JcIjogaWQudmFsdWUsXG4gICAgICAgIFwic3R5bGVcIjogdGV4dENvbG9yU3R5bGVzLnZhbHVlXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtsYWJlbF1cbiAgICAgIH0pLCBfY3JlYXRlVk5vZGUoVkZpZWxkTGFiZWwsIHtcbiAgICAgICAgXCJyZWZcIjogbGFiZWxSZWYsXG4gICAgICAgIFwiZm9yXCI6IGlkLnZhbHVlXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtsYWJlbF1cbiAgICAgIH0pLCBzbG90cy5kZWZhdWx0Py4oe1xuICAgICAgICAuLi5zbG90UHJvcHMudmFsdWUsXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgaWQ6IGlkLnZhbHVlLFxuICAgICAgICAgIGNsYXNzOiAndi1maWVsZF9faW5wdXQnLFxuICAgICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogbWVzc2FnZXNJZC52YWx1ZVxuICAgICAgICB9LFxuICAgICAgICBmb2N1cyxcbiAgICAgICAgYmx1clxuICAgICAgfSldKSwgaGFzQ2xlYXIgJiYgX2NyZWF0ZVZOb2RlKFZFeHBhbmRYVHJhbnNpdGlvbiwge1xuICAgICAgICBcImtleVwiOiBcImNsZWFyXCJcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW193aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWZpZWxkX19jbGVhcmFibGVcIixcbiAgICAgICAgICBcIm9uTW91c2Vkb3duXCI6IGUgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIFtzbG90cy5jbGVhciA/IHNsb3RzLmNsZWFyKCkgOiBfY3JlYXRlVk5vZGUoSW5wdXRJY29uLCB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY2xlYXJcIlxuICAgICAgICB9LCBudWxsKV0pLCBbW192U2hvdywgcHJvcHMuZGlydHldXSldXG4gICAgICB9KSwgaGFzQXBwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwiYXBwZW5kXCIsXG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWZpZWxkX19hcHBlbmQtaW5uZXJcIlxuICAgICAgfSwgW3Nsb3RzWydhcHBlbmQtaW5uZXInXT8uKHNsb3RQcm9wcy52YWx1ZSksIHByb3BzLmFwcGVuZElubmVySWNvbiAmJiBfY3JlYXRlVk5vZGUoSW5wdXRJY29uLCB7XG4gICAgICAgIFwia2V5XCI6IFwiYXBwZW5kLWljb25cIixcbiAgICAgICAgXCJuYW1lXCI6IFwiYXBwZW5kSW5uZXJcIlxuICAgICAgfSwgbnVsbCldKSwgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtZmllbGRfX291dGxpbmUnLCB0ZXh0Q29sb3JDbGFzc2VzLnZhbHVlXSxcbiAgICAgICAgXCJzdHlsZVwiOiB0ZXh0Q29sb3JTdHlsZXMudmFsdWVcbiAgICAgIH0sIFtpc091dGxpbmVkICYmIF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi1maWVsZF9fb3V0bGluZV9fc3RhcnRcIlxuICAgICAgfSwgbnVsbCksIGhhc0xhYmVsLnZhbHVlICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWZpZWxkX19vdXRsaW5lX19ub3RjaFwiXG4gICAgICB9LCBbX2NyZWF0ZVZOb2RlKFZGaWVsZExhYmVsLCB7XG4gICAgICAgIFwicmVmXCI6IGZsb2F0aW5nTGFiZWxSZWYsXG4gICAgICAgIFwiZmxvYXRpbmdcIjogdHJ1ZSxcbiAgICAgICAgXCJmb3JcIjogaWQudmFsdWVcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW2xhYmVsXVxuICAgICAgfSldKSwgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtZmllbGRfX291dGxpbmVfX2VuZFwiXG4gICAgICB9LCBudWxsKV0pLCBpc1BsYWluT3JVbmRlcmxpbmVkLnZhbHVlICYmIGhhc0xhYmVsLnZhbHVlICYmIF9jcmVhdGVWTm9kZShWRmllbGRMYWJlbCwge1xuICAgICAgICBcInJlZlwiOiBmbG9hdGluZ0xhYmVsUmVmLFxuICAgICAgICBcImZsb2F0aW5nXCI6IHRydWUsXG4gICAgICAgIFwiZm9yXCI6IGlkLnZhbHVlXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtsYWJlbF1cbiAgICAgIH0pXSldKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgY29udHJvbFJlZlxuICAgIH07XG4gIH1cbn0pO1xuLy8gVE9ETzogdGhpcyBpcyBraW5kYSBzbG93LCBtaWdodCBiZSBiZXR0ZXIgdG8gaW1wbGljaXRseSBpbmhlcml0IHByb3BzIGluc3RlYWRcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJGaWVsZFByb3BzKGF0dHJzKSB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhWRmllbGQucHJvcHMpLmZpbHRlcihrID0+ICFpc09uKGspICYmIGsgIT09ICdjbGFzcycgJiYgayAhPT0gJ3N0eWxlJyk7XG4gIHJldHVybiBwaWNrKGF0dHJzLCBrZXlzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZGaWVsZC5tanMubWFwIiwiaW1wb3J0IHsgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WVGV4dEZpZWxkLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQ291bnRlciB9IGZyb20gXCIuLi9WQ291bnRlci9WQ291bnRlci5tanNcIjtcbmltcG9ydCB7IGZpbHRlckZpZWxkUHJvcHMsIG1ha2VWRmllbGRQcm9wcywgVkZpZWxkIH0gZnJvbSBcIi4uL1ZGaWVsZC9WRmllbGQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVklucHV0UHJvcHMsIFZJbnB1dCB9IGZyb20gXCIuLi9WSW5wdXQvVklucHV0Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlRm9jdXMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9jdXMubWpzXCI7XG5pbXBvcnQgeyBmb3J3YXJkUmVmcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb3J3YXJkUmVmcy5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIERpcmVjdGl2ZXNcbmltcG9ydCBJbnRlcnNlY3QgZnJvbSBcIi4uLy4uL2RpcmVjdGl2ZXMvaW50ZXJzZWN0L2luZGV4Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNsb25lVk5vZGUsIGNvbXB1dGVkLCBuZXh0VGljaywgcmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNhbGxFdmVudCwgZmlsdGVySW5wdXRBdHRycywgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IGFjdGl2ZVR5cGVzID0gWydjb2xvcicsICdmaWxlJywgJ3RpbWUnLCAnZGF0ZScsICdkYXRldGltZS1sb2NhbCcsICd3ZWVrJywgJ21vbnRoJ107XG5leHBvcnQgY29uc3QgbWFrZVZUZXh0RmllbGRQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGF1dG9mb2N1czogQm9vbGVhbixcbiAgY291bnRlcjogW0Jvb2xlYW4sIE51bWJlciwgU3RyaW5nXSxcbiAgY291bnRlclZhbHVlOiBbTnVtYmVyLCBGdW5jdGlvbl0sXG4gIHByZWZpeDogU3RyaW5nLFxuICBwbGFjZWhvbGRlcjogU3RyaW5nLFxuICBwZXJzaXN0ZW50UGxhY2Vob2xkZXI6IEJvb2xlYW4sXG4gIHBlcnNpc3RlbnRDb3VudGVyOiBCb29sZWFuLFxuICBzdWZmaXg6IFN0cmluZyxcbiAgcm9sZTogU3RyaW5nLFxuICB0eXBlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICd0ZXh0J1xuICB9LFxuICBtb2RlbE1vZGlmaWVyczogT2JqZWN0LFxuICAuLi5tYWtlVklucHV0UHJvcHMoKSxcbiAgLi4ubWFrZVZGaWVsZFByb3BzKClcbn0sICdWVGV4dEZpZWxkJyk7XG5leHBvcnQgY29uc3QgVlRleHRGaWVsZCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWVGV4dEZpZWxkJyxcbiAgZGlyZWN0aXZlczoge1xuICAgIEludGVyc2VjdFxuICB9LFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczogbWFrZVZUZXh0RmllbGRQcm9wcygpLFxuICBlbWl0czoge1xuICAgICdjbGljazpjb250cm9sJzogZSA9PiB0cnVlLFxuICAgICdtb3VzZWRvd246Y29udHJvbCc6IGUgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOmZvY3VzZWQnOiBmb2N1c2VkID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnMsXG4gICAgICBlbWl0LFxuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCB7XG4gICAgICBpc0ZvY3VzZWQsXG4gICAgICBmb2N1cyxcbiAgICAgIGJsdXJcbiAgICB9ID0gdXNlRm9jdXMocHJvcHMpO1xuICAgIGNvbnN0IGNvdW50ZXJWYWx1ZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiB0eXBlb2YgcHJvcHMuY291bnRlclZhbHVlID09PSAnZnVuY3Rpb24nID8gcHJvcHMuY291bnRlclZhbHVlKG1vZGVsLnZhbHVlKSA6IHR5cGVvZiBwcm9wcy5jb3VudGVyVmFsdWUgPT09ICdudW1iZXInID8gcHJvcHMuY291bnRlclZhbHVlIDogKG1vZGVsLnZhbHVlID8/ICcnKS50b1N0cmluZygpLmxlbmd0aDtcbiAgICB9KTtcbiAgICBjb25zdCBtYXggPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAoYXR0cnMubWF4bGVuZ3RoKSByZXR1cm4gYXR0cnMubWF4bGVuZ3RoO1xuICAgICAgaWYgKCFwcm9wcy5jb3VudGVyIHx8IHR5cGVvZiBwcm9wcy5jb3VudGVyICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgcHJvcHMuY291bnRlciAhPT0gJ3N0cmluZycpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcHJvcHMuY291bnRlcjtcbiAgICB9KTtcbiAgICBjb25zdCBpc1BsYWluT3JVbmRlcmxpbmVkID0gY29tcHV0ZWQoKCkgPT4gWydwbGFpbicsICd1bmRlcmxpbmVkJ10uaW5jbHVkZXMocHJvcHMudmFyaWFudCkpO1xuICAgIGZ1bmN0aW9uIG9uSW50ZXJzZWN0KGlzSW50ZXJzZWN0aW5nLCBlbnRyaWVzKSB7XG4gICAgICBpZiAoIXByb3BzLmF1dG9mb2N1cyB8fCAhaXNJbnRlcnNlY3RpbmcpIHJldHVybjtcbiAgICAgIGVudHJpZXNbMF0udGFyZ2V0Py5mb2N1cz8uKCk7XG4gICAgfVxuICAgIGNvbnN0IHZJbnB1dFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHZGaWVsZFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGlucHV0UmVmID0gcmVmKCk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSBjb21wdXRlZCgoKSA9PiBhY3RpdmVUeXBlcy5pbmNsdWRlcyhwcm9wcy50eXBlKSB8fCBwcm9wcy5wZXJzaXN0ZW50UGxhY2Vob2xkZXIgfHwgaXNGb2N1c2VkLnZhbHVlIHx8IHByb3BzLmFjdGl2ZSk7XG4gICAgZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICAgIGlmIChpbnB1dFJlZi52YWx1ZSAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICBpbnB1dFJlZi52YWx1ZT8uZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNGb2N1c2VkLnZhbHVlKSBmb2N1cygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkNvbnRyb2xNb3VzZWRvd24oZSkge1xuICAgICAgZW1pdCgnbW91c2Vkb3duOmNvbnRyb2wnLCBlKTtcbiAgICAgIGlmIChlLnRhcmdldCA9PT0gaW5wdXRSZWYudmFsdWUpIHJldHVybjtcbiAgICAgIG9uRm9jdXMoKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Db250cm9sQ2xpY2soZSkge1xuICAgICAgb25Gb2N1cygpO1xuICAgICAgZW1pdCgnY2xpY2s6Y29udHJvbCcsIGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkNsZWFyKGUpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBvbkZvY3VzKCk7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIG1vZGVsLnZhbHVlID0gbnVsbDtcbiAgICAgICAgY2FsbEV2ZW50KHByb3BzWydvbkNsaWNrOmNsZWFyJ10sIGUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uSW5wdXQoZSkge1xuICAgICAgY29uc3QgZWwgPSBlLnRhcmdldDtcbiAgICAgIG1vZGVsLnZhbHVlID0gZWwudmFsdWU7XG4gICAgICBpZiAocHJvcHMubW9kZWxNb2RpZmllcnM/LnRyaW0gJiYgWyd0ZXh0JywgJ3NlYXJjaCcsICdwYXNzd29yZCcsICd0ZWwnLCAndXJsJ10uaW5jbHVkZXMocHJvcHMudHlwZSkpIHtcbiAgICAgICAgY29uc3QgY2FyZXRQb3NpdGlvbiA9IFtlbC5zZWxlY3Rpb25TdGFydCwgZWwuc2VsZWN0aW9uRW5kXTtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIGVsLnNlbGVjdGlvblN0YXJ0ID0gY2FyZXRQb3NpdGlvblswXTtcbiAgICAgICAgICBlbC5zZWxlY3Rpb25FbmQgPSBjYXJldFBvc2l0aW9uWzFdO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IGhhc0NvdW50ZXIgPSAhIShzbG90cy5jb3VudGVyIHx8IHByb3BzLmNvdW50ZXIgfHwgcHJvcHMuY291bnRlclZhbHVlKTtcbiAgICAgIGNvbnN0IGhhc0RldGFpbHMgPSAhIShoYXNDb3VudGVyIHx8IHNsb3RzLmRldGFpbHMpO1xuICAgICAgY29uc3QgW3Jvb3RBdHRycywgaW5wdXRBdHRyc10gPSBmaWx0ZXJJbnB1dEF0dHJzKGF0dHJzKTtcbiAgICAgIGNvbnN0IFt7XG4gICAgICAgIG1vZGVsVmFsdWU6IF8sXG4gICAgICAgIC4uLmlucHV0UHJvcHNcbiAgICAgIH1dID0gVklucHV0LmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIGNvbnN0IFtmaWVsZFByb3BzXSA9IGZpbHRlckZpZWxkUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWSW5wdXQsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJyZWZcIjogdklucHV0UmVmLFxuICAgICAgICBcIm1vZGVsVmFsdWVcIjogbW9kZWwudmFsdWUsXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gbW9kZWwudmFsdWUgPSAkZXZlbnQsXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXRleHQtZmllbGQnLCB7XG4gICAgICAgICAgJ3YtdGV4dC1maWVsZC0tcHJlZml4ZWQnOiBwcm9wcy5wcmVmaXgsXG4gICAgICAgICAgJ3YtdGV4dC1maWVsZC0tc3VmZml4ZWQnOiBwcm9wcy5zdWZmaXgsXG4gICAgICAgICAgJ3YtdGV4dC1maWVsZC0tcGxhaW4tdW5kZXJsaW5lZCc6IFsncGxhaW4nLCAndW5kZXJsaW5lZCddLmluY2x1ZGVzKHByb3BzLnZhcmlhbnQpXG4gICAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSwgcm9vdEF0dHJzLCBpbnB1dFByb3BzLCB7XG4gICAgICAgIFwiY2VudGVyQWZmaXhcIjogIWlzUGxhaW5PclVuZGVybGluZWQudmFsdWUsXG4gICAgICAgIFwiZm9jdXNlZFwiOiBpc0ZvY3VzZWQudmFsdWVcbiAgICAgIH0pLCB7XG4gICAgICAgIC4uLnNsb3RzLFxuICAgICAgICBkZWZhdWx0OiBfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgaXNEaXNhYmxlZCxcbiAgICAgICAgICAgIGlzRGlydHksXG4gICAgICAgICAgICBpc1JlYWRvbmx5LFxuICAgICAgICAgICAgaXNWYWxpZFxuICAgICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZGaWVsZCwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgICAgXCJyZWZcIjogdkZpZWxkUmVmLFxuICAgICAgICAgICAgXCJvbk1vdXNlZG93blwiOiBvbkNvbnRyb2xNb3VzZWRvd24sXG4gICAgICAgICAgICBcIm9uQ2xpY2tcIjogb25Db250cm9sQ2xpY2ssXG4gICAgICAgICAgICBcIm9uQ2xpY2s6Y2xlYXJcIjogb25DbGVhcixcbiAgICAgICAgICAgIFwib25DbGljazpwcmVwZW5kSW5uZXJcIjogcHJvcHNbJ29uQ2xpY2s6cHJlcGVuZElubmVyJ10sXG4gICAgICAgICAgICBcIm9uQ2xpY2s6YXBwZW5kSW5uZXJcIjogcHJvcHNbJ29uQ2xpY2s6YXBwZW5kSW5uZXInXSxcbiAgICAgICAgICAgIFwicm9sZVwiOiBwcm9wcy5yb2xlXG4gICAgICAgICAgfSwgZmllbGRQcm9wcywge1xuICAgICAgICAgICAgXCJpZFwiOiBpZC52YWx1ZSxcbiAgICAgICAgICAgIFwiYWN0aXZlXCI6IGlzQWN0aXZlLnZhbHVlIHx8IGlzRGlydHkudmFsdWUsXG4gICAgICAgICAgICBcImRpcnR5XCI6IGlzRGlydHkudmFsdWUgfHwgcHJvcHMuZGlydHksXG4gICAgICAgICAgICBcImRpc2FibGVkXCI6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICAgICAgICBcImZvY3VzZWRcIjogaXNGb2N1c2VkLnZhbHVlLFxuICAgICAgICAgICAgXCJlcnJvclwiOiBpc1ZhbGlkLnZhbHVlID09PSBmYWxzZVxuICAgICAgICAgIH0pLCB7XG4gICAgICAgICAgICAuLi5zbG90cyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IF9yZWYzID0+IHtcbiAgICAgICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgICAgY2xhc3M6IGZpZWxkQ2xhc3MsXG4gICAgICAgICAgICAgICAgICAuLi5zbG90UHJvcHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gPSBfcmVmMztcbiAgICAgICAgICAgICAgY29uc3QgaW5wdXROb2RlID0gX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShcImlucHV0XCIsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICAgICAgICBcInJlZlwiOiBpbnB1dFJlZixcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICAgICAgICAgIFwib25JbnB1dFwiOiBvbklucHV0LFxuICAgICAgICAgICAgICAgIFwiYXV0b2ZvY3VzXCI6IHByb3BzLmF1dG9mb2N1cyxcbiAgICAgICAgICAgICAgICBcInJlYWRvbmx5XCI6IGlzUmVhZG9ubHkudmFsdWUsXG4gICAgICAgICAgICAgICAgXCJkaXNhYmxlZFwiOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBwcm9wcy5uYW1lLFxuICAgICAgICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjogcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgXCJzaXplXCI6IDEsXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IHByb3BzLnR5cGUsXG4gICAgICAgICAgICAgICAgXCJvbkZvY3VzXCI6IG9uRm9jdXMsXG4gICAgICAgICAgICAgICAgXCJvbkJsdXJcIjogYmx1clxuICAgICAgICAgICAgICB9LCBzbG90UHJvcHMsIGlucHV0QXR0cnMpLCBudWxsKSwgW1tfcmVzb2x2ZURpcmVjdGl2ZShcImludGVyc2VjdFwiKSwge1xuICAgICAgICAgICAgICAgIGhhbmRsZXI6IG9uSW50ZXJzZWN0XG4gICAgICAgICAgICAgIH0sIG51bGwsIHtcbiAgICAgICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgICAgIH1dXSk7XG4gICAgICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbcHJvcHMucHJlZml4ICYmIF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXRleHQtZmllbGRfX3ByZWZpeFwiXG4gICAgICAgICAgICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwidi10ZXh0LWZpZWxkX19wcmVmaXhfX3RleHRcIlxuICAgICAgICAgICAgICB9LCBbcHJvcHMucHJlZml4XSldKSwgc2xvdHMuZGVmYXVsdCA/IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBmaWVsZENsYXNzLFxuICAgICAgICAgICAgICAgIFwiZGF0YS1uby1hY3RpdmF0b3JcIjogXCJcIlxuICAgICAgICAgICAgICB9LCBbc2xvdHMuZGVmYXVsdCgpLCBpbnB1dE5vZGVdKSA6IGNsb25lVk5vZGUoaW5wdXROb2RlLCB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IGZpZWxkQ2xhc3NcbiAgICAgICAgICAgICAgfSksIHByb3BzLnN1ZmZpeCAmJiBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwidi10ZXh0LWZpZWxkX19zdWZmaXhcIlxuICAgICAgICAgICAgICB9LCBbX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtdGV4dC1maWVsZF9fc3VmZml4X190ZXh0XCJcbiAgICAgICAgICAgICAgfSwgW3Byb3BzLnN1ZmZpeF0pXSldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZGV0YWlsczogaGFzRGV0YWlscyA/IHNsb3RQcm9wcyA9PiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbc2xvdHMuZGV0YWlscz8uKHNsb3RQcm9wcyksIGhhc0NvdW50ZXIgJiYgX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW19jcmVhdGVWTm9kZShcInNwYW5cIiwgbnVsbCwgbnVsbCksIF9jcmVhdGVWTm9kZShWQ291bnRlciwge1xuICAgICAgICAgIFwiYWN0aXZlXCI6IHByb3BzLnBlcnNpc3RlbnRDb3VudGVyIHx8IGlzRm9jdXNlZC52YWx1ZSxcbiAgICAgICAgICBcInZhbHVlXCI6IGNvdW50ZXJWYWx1ZS52YWx1ZSxcbiAgICAgICAgICBcIm1heFwiOiBtYXgudmFsdWVcbiAgICAgICAgfSwgc2xvdHMuY291bnRlcildKV0pIDogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm9yd2FyZFJlZnMoe30sIHZJbnB1dFJlZiwgdkZpZWxkUmVmLCBpbnB1dFJlZik7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlRleHRGaWVsZC5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHVzZVJlc2l6ZU9ic2VydmVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Jlc2l6ZU9ic2VydmVyLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZWaXJ0dWFsU2Nyb2xsSXRlbVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgcmVuZGVybGVzczogQm9vbGVhbixcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKClcbn0sICdWVmlydHVhbFNjcm9sbEl0ZW0nKTtcbmV4cG9ydCBjb25zdCBWVmlydHVhbFNjcm9sbEl0ZW0gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlZpcnR1YWxTY3JvbGxJdGVtJyxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IG1ha2VWVmlydHVhbFNjcm9sbEl0ZW1Qcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6aGVpZ2h0JzogaGVpZ2h0ID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnMsXG4gICAgICBlbWl0LFxuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICByZXNpemVSZWYsXG4gICAgICBjb250ZW50UmVjdFxuICAgIH0gPSB1c2VSZXNpemVPYnNlcnZlcih1bmRlZmluZWQsICdib3JkZXInKTtcbiAgICB3YXRjaCgoKSA9PiBjb250ZW50UmVjdC52YWx1ZT8uaGVpZ2h0LCBoZWlnaHQgPT4ge1xuICAgICAgaWYgKGhlaWdodCAhPSBudWxsKSBlbWl0KCd1cGRhdGU6aGVpZ2h0JywgaGVpZ2h0KTtcbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gcHJvcHMucmVuZGVybGVzcyA/IF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtzbG90cy5kZWZhdWx0Py4oe1xuICAgICAgaXRlbVJlZjogcmVzaXplUmVmXG4gICAgfSldKSA6IF9jcmVhdGVWTm9kZShcImRpdlwiLCBfbWVyZ2VQcm9wcyh7XG4gICAgICBcInJlZlwiOiByZXNpemVSZWYsXG4gICAgICBcImNsYXNzXCI6IFsndi12aXJ0dWFsLXNjcm9sbF9faXRlbScsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICB9LCBhdHRycyksIFtzbG90cy5kZWZhdWx0Py4oKV0pKTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WVmlydHVhbFNjcm9sbEl0ZW0ubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VEaXNwbGF5IH0gZnJvbSBcIi4vZGlzcGxheS5tanNcIjtcbmltcG9ydCB7IHVzZVJlc2l6ZU9ic2VydmVyIH0gZnJvbSBcIi4vcmVzaXplT2JzZXJ2ZXIubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHJlZiwgc2hhbGxvd1JlZiwgd2F0Y2gsIHdhdGNoRWZmZWN0IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNsYW1wLCBjcmVhdGVSYW5nZSwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5jb25zdCBVUCA9IC0xO1xuY29uc3QgRE9XTiA9IDE7XG5leHBvcnQgY29uc3QgbWFrZVZpcnR1YWxQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGl0ZW1IZWlnaHQ6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDQ4XG4gIH1cbn0sICd2aXJ0dWFsJyk7XG5leHBvcnQgZnVuY3Rpb24gdXNlVmlydHVhbChwcm9wcywgaXRlbXMsIG9mZnNldCkge1xuICBjb25zdCBmaXJzdCA9IHNoYWxsb3dSZWYoMCk7XG4gIGNvbnN0IGJhc2VJdGVtSGVpZ2h0ID0gc2hhbGxvd1JlZihwcm9wcy5pdGVtSGVpZ2h0KTtcbiAgY29uc3QgaXRlbUhlaWdodCA9IGNvbXB1dGVkKHtcbiAgICBnZXQ6ICgpID0+IHBhcnNlSW50KGJhc2VJdGVtSGVpZ2h0LnZhbHVlID8/IDAsIDEwKSxcbiAgICBzZXQodmFsKSB7XG4gICAgICBiYXNlSXRlbUhlaWdodC52YWx1ZSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBjb250YWluZXJSZWYgPSByZWYoKTtcbiAgY29uc3Qge1xuICAgIHJlc2l6ZVJlZixcbiAgICBjb250ZW50UmVjdFxuICB9ID0gdXNlUmVzaXplT2JzZXJ2ZXIoKTtcbiAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xuICAgIHJlc2l6ZVJlZi52YWx1ZSA9IGNvbnRhaW5lclJlZi52YWx1ZTtcbiAgfSk7XG4gIGNvbnN0IGRpc3BsYXkgPSB1c2VEaXNwbGF5KCk7XG4gIGNvbnN0IHNpemVNYXAgPSBuZXcgTWFwKCk7XG4gIGxldCBzaXplcyA9IEFycmF5LmZyb20oe1xuICAgIGxlbmd0aDogaXRlbXMudmFsdWUubGVuZ3RoXG4gIH0pO1xuICBjb25zdCB2aXNpYmxlSXRlbXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgaGVpZ2h0ID0gKCFjb250ZW50UmVjdC52YWx1ZSB8fCBjb250YWluZXJSZWYudmFsdWUgPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA/IGRpc3BsYXkuaGVpZ2h0LnZhbHVlIDogY29udGVudFJlY3QudmFsdWUuaGVpZ2h0KSAtIChvZmZzZXQ/LnZhbHVlID8/IDApO1xuICAgIHJldHVybiBNYXRoLmNlaWwoaGVpZ2h0IC8gaXRlbUhlaWdodC52YWx1ZSAqIDEuNyArIDEpO1xuICB9KTtcbiAgZnVuY3Rpb24gaGFuZGxlSXRlbVJlc2l6ZShpbmRleCwgaGVpZ2h0KSB7XG4gICAgaXRlbUhlaWdodC52YWx1ZSA9IE1hdGgubWF4KGl0ZW1IZWlnaHQudmFsdWUsIGhlaWdodCk7XG4gICAgc2l6ZXNbaW5kZXhdID0gaGVpZ2h0O1xuICAgIHNpemVNYXAuc2V0KGl0ZW1zLnZhbHVlW2luZGV4XSwgaGVpZ2h0KTtcbiAgfVxuICBmdW5jdGlvbiBjYWxjdWxhdGVPZmZzZXQoaW5kZXgpIHtcbiAgICByZXR1cm4gc2l6ZXMuc2xpY2UoMCwgaW5kZXgpLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYyArICh2YWwgfHwgaXRlbUhlaWdodC52YWx1ZSksIDApO1xuICB9XG4gIGZ1bmN0aW9uIGNhbGN1bGF0ZU1pZFBvaW50SW5kZXgoc2Nyb2xsVG9wKSB7XG4gICAgY29uc3QgZW5kID0gaXRlbXMudmFsdWUubGVuZ3RoO1xuICAgIGxldCBtaWRkbGUgPSAwO1xuICAgIGxldCBtaWRkbGVPZmZzZXQgPSAwO1xuICAgIHdoaWxlIChtaWRkbGVPZmZzZXQgPCBzY3JvbGxUb3AgJiYgbWlkZGxlIDwgZW5kKSB7XG4gICAgICBtaWRkbGVPZmZzZXQgKz0gc2l6ZXNbbWlkZGxlKytdIHx8IGl0ZW1IZWlnaHQudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBtaWRkbGUgLSAxO1xuICB9XG4gIGxldCBsYXN0U2Nyb2xsVG9wID0gMDtcbiAgZnVuY3Rpb24gaGFuZGxlU2Nyb2xsKCkge1xuICAgIGlmICghY29udGFpbmVyUmVmLnZhbHVlIHx8ICFjb250ZW50UmVjdC52YWx1ZSkgcmV0dXJuO1xuICAgIGNvbnN0IGhlaWdodCA9IGNvbnRlbnRSZWN0LnZhbHVlLmhlaWdodCAtIDU2O1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IGNvbnRhaW5lclJlZi52YWx1ZS5zY3JvbGxUb3A7XG4gICAgY29uc3QgZGlyZWN0aW9uID0gc2Nyb2xsVG9wIDwgbGFzdFNjcm9sbFRvcCA/IFVQIDogRE9XTjtcbiAgICBjb25zdCBtaWRQb2ludEluZGV4ID0gY2FsY3VsYXRlTWlkUG9pbnRJbmRleChzY3JvbGxUb3AgKyBoZWlnaHQgLyAyKTtcbiAgICBjb25zdCBidWZmZXIgPSBNYXRoLnJvdW5kKHZpc2libGVJdGVtcy52YWx1ZSAvIDMpO1xuICAgIGNvbnN0IGZpcnN0SW5kZXggPSBtaWRQb2ludEluZGV4IC0gYnVmZmVyO1xuICAgIGNvbnN0IGxhc3RJbmRleCA9IGZpcnN0LnZhbHVlICsgYnVmZmVyICogMiAtIDE7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gVVAgJiYgbWlkUG9pbnRJbmRleCA8PSBsYXN0SW5kZXgpIHtcbiAgICAgIGZpcnN0LnZhbHVlID0gY2xhbXAoZmlyc3RJbmRleCwgMCwgaXRlbXMudmFsdWUubGVuZ3RoKTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gRE9XTiAmJiBtaWRQb2ludEluZGV4ID49IGxhc3RJbmRleCkge1xuICAgICAgZmlyc3QudmFsdWUgPSBjbGFtcChmaXJzdEluZGV4LCAwLCBpdGVtcy52YWx1ZS5sZW5ndGggLSB2aXNpYmxlSXRlbXMudmFsdWUpO1xuICAgIH1cbiAgICBsYXN0U2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICB9XG4gIGZ1bmN0aW9uIHNjcm9sbFRvSW5kZXgoaW5kZXgpIHtcbiAgICBpZiAoIWNvbnRhaW5lclJlZi52YWx1ZSkgcmV0dXJuO1xuICAgIGNvbnN0IG9mZnNldCA9IGNhbGN1bGF0ZU9mZnNldChpbmRleCk7XG4gICAgY29udGFpbmVyUmVmLnZhbHVlLnNjcm9sbFRvcCA9IG9mZnNldDtcbiAgfVxuICBjb25zdCBsYXN0ID0gY29tcHV0ZWQoKCkgPT4gTWF0aC5taW4oaXRlbXMudmFsdWUubGVuZ3RoLCBmaXJzdC52YWx1ZSArIHZpc2libGVJdGVtcy52YWx1ZSkpO1xuICBjb25zdCBjb21wdXRlZEl0ZW1zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBpdGVtcy52YWx1ZS5zbGljZShmaXJzdC52YWx1ZSwgbGFzdC52YWx1ZSkubWFwKChpdGVtLCBpbmRleCkgPT4gKHtcbiAgICAgIHJhdzogaXRlbSxcbiAgICAgIGluZGV4OiBpbmRleCArIGZpcnN0LnZhbHVlXG4gICAgfSkpO1xuICB9KTtcbiAgY29uc3QgcGFkZGluZ1RvcCA9IGNvbXB1dGVkKCgpID0+IGNhbGN1bGF0ZU9mZnNldChmaXJzdC52YWx1ZSkpO1xuICBjb25zdCBwYWRkaW5nQm90dG9tID0gY29tcHV0ZWQoKCkgPT4gY2FsY3VsYXRlT2Zmc2V0KGl0ZW1zLnZhbHVlLmxlbmd0aCkgLSBjYWxjdWxhdGVPZmZzZXQobGFzdC52YWx1ZSkpO1xuICB3YXRjaCgoKSA9PiBpdGVtcy52YWx1ZS5sZW5ndGgsICgpID0+IHtcbiAgICBzaXplcyA9IGNyZWF0ZVJhbmdlKGl0ZW1zLnZhbHVlLmxlbmd0aCkubWFwKCgpID0+IGl0ZW1IZWlnaHQudmFsdWUpO1xuICAgIHNpemVNYXAuZm9yRWFjaCgoaGVpZ2h0LCBpdGVtKSA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IGl0ZW1zLnZhbHVlLmluZGV4T2YoaXRlbSk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIHNpemVNYXAuZGVsZXRlKGl0ZW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZXNbaW5kZXhdID0gaGVpZ2h0O1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjb250YWluZXJSZWYsXG4gICAgY29tcHV0ZWRJdGVtcyxcbiAgICBpdGVtSGVpZ2h0LFxuICAgIHBhZGRpbmdUb3AsXG4gICAgcGFkZGluZ0JvdHRvbSxcbiAgICBzY3JvbGxUb0luZGV4LFxuICAgIGhhbmRsZVNjcm9sbCxcbiAgICBoYW5kbGVJdGVtUmVzaXplXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12aXJ0dWFsLm1qcy5tYXAiLCJpbXBvcnQgeyBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WVmlydHVhbFNjcm9sbC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlZpcnR1YWxTY3JvbGxJdGVtIH0gZnJvbSBcIi4vVlZpcnR1YWxTY3JvbGxJdGVtLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VEaW1lbnNpb25Qcm9wcywgdXNlRGltZW5zaW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RpbWVuc2lvbnMubWpzXCI7XG5pbXBvcnQgeyB1c2VUb2dnbGVTY29wZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90b2dnbGVTY29wZS5tanNcIjtcbmltcG9ydCB7IG1ha2VWaXJ0dWFsUHJvcHMsIHVzZVZpcnR1YWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdmlydHVhbC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBvbk1vdW50ZWQsIG9uU2NvcGVEaXNwb3NlLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBnZXRDdXJyZW50SW5zdGFuY2UsIGdldFNjcm9sbFBhcmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVlZpcnR1YWxTY3JvbGxQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGl0ZW1zOiB7XG4gICAgdHlwZTogQXJyYXksXG4gICAgZGVmYXVsdDogKCkgPT4gW11cbiAgfSxcbiAgcmVuZGVybGVzczogQm9vbGVhbixcbiAgLi4ubWFrZVZpcnR1YWxQcm9wcygpLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURpbWVuc2lvblByb3BzKClcbn0sICdWVmlydHVhbFNjcm9sbCcpO1xuZXhwb3J0IGNvbnN0IFZWaXJ0dWFsU2Nyb2xsID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZWaXJ0dWFsU2Nyb2xsJyxcbiAgcHJvcHM6IG1ha2VWVmlydHVhbFNjcm9sbFByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qgdm0gPSBnZXRDdXJyZW50SW5zdGFuY2UoJ1ZWaXJ0dWFsU2Nyb2xsJyk7XG4gICAgY29uc3Qge1xuICAgICAgZGltZW5zaW9uU3R5bGVzXG4gICAgfSA9IHVzZURpbWVuc2lvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgY29udGFpbmVyUmVmLFxuICAgICAgaGFuZGxlU2Nyb2xsLFxuICAgICAgaGFuZGxlSXRlbVJlc2l6ZSxcbiAgICAgIHNjcm9sbFRvSW5kZXgsXG4gICAgICBwYWRkaW5nVG9wLFxuICAgICAgcGFkZGluZ0JvdHRvbSxcbiAgICAgIGNvbXB1dGVkSXRlbXNcbiAgICB9ID0gdXNlVmlydHVhbChwcm9wcywgdG9SZWYocHJvcHMsICdpdGVtcycpKTtcbiAgICB1c2VUb2dnbGVTY29wZSgoKSA9PiBwcm9wcy5yZW5kZXJsZXNzLCAoKSA9PiB7XG4gICAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgICBjb250YWluZXJSZWYudmFsdWUgPSBnZXRTY3JvbGxQYXJlbnQodm0udm5vZGUuZWwsIHRydWUpO1xuICAgICAgICBjb250YWluZXJSZWYudmFsdWU/LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCk7XG4gICAgICB9KTtcbiAgICAgIG9uU2NvcGVEaXNwb3NlKCgpID0+IHtcbiAgICAgICAgY29udGFpbmVyUmVmLnZhbHVlPy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYW5kbGVTY3JvbGwpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gY29tcHV0ZWRJdGVtcy52YWx1ZS5tYXAoaXRlbSA9PiBfY3JlYXRlVk5vZGUoVlZpcnR1YWxTY3JvbGxJdGVtLCB7XG4gICAgICAgIFwia2V5XCI6IGl0ZW0uaW5kZXgsXG4gICAgICAgIFwicmVuZGVybGVzc1wiOiBwcm9wcy5yZW5kZXJsZXNzLFxuICAgICAgICBcIm9uVXBkYXRlOmhlaWdodFwiOiBoZWlnaHQgPT4gaGFuZGxlSXRlbVJlc2l6ZShpdGVtLmluZGV4LCBoZWlnaHQpXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6IHNsb3RQcm9wcyA9PiBzbG90cy5kZWZhdWx0Py4oe1xuICAgICAgICAgIGl0ZW06IGl0ZW0ucmF3LFxuICAgICAgICAgIGluZGV4OiBpdGVtLmluZGV4LFxuICAgICAgICAgIC4uLnNsb3RQcm9wc1xuICAgICAgICB9KVxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIHByb3BzLnJlbmRlcmxlc3MgPyBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtdmlydHVhbC1zY3JvbGxfX3NwYWNlclwiLFxuICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICBwYWRkaW5nVG9wOiBjb252ZXJ0VG9Vbml0KHBhZGRpbmdUb3AudmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH0sIG51bGwpLCBjaGlsZHJlbiwgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtdmlydHVhbC1zY3JvbGxfX3NwYWNlclwiLFxuICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICBwYWRkaW5nQm90dG9tOiBjb252ZXJ0VG9Vbml0KHBhZGRpbmdCb3R0b20udmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH0sIG51bGwpXSkgOiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcInJlZlwiOiBjb250YWluZXJSZWYsXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXZpcnR1YWwtc2Nyb2xsJywgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcIm9uU2Nyb2xsXCI6IGhhbmRsZVNjcm9sbCxcbiAgICAgICAgXCJzdHlsZVwiOiBbZGltZW5zaW9uU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV1cbiAgICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi12aXJ0dWFsLXNjcm9sbF9fY29udGFpbmVyXCIsXG4gICAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICAgIHBhZGRpbmdUb3A6IGNvbnZlcnRUb1VuaXQocGFkZGluZ1RvcC52YWx1ZSksXG4gICAgICAgICAgcGFkZGluZ0JvdHRvbTogY29udmVydFRvVW5pdChwYWRkaW5nQm90dG9tLnZhbHVlKVxuICAgICAgICB9XG4gICAgICB9LCBbY2hpbGRyZW5dKV0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBzY3JvbGxUb0luZGV4XG4gICAgfTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WVmlydHVhbFNjcm9sbC5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBzaGFsbG93UmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5cbi8vIFR5cGVzXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTY3JvbGxpbmcobGlzdFJlZiwgdGV4dEZpZWxkUmVmKSB7XG4gIGNvbnN0IGlzU2Nyb2xsaW5nID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gIGxldCBzY3JvbGxUaW1lb3V0O1xuICBmdW5jdGlvbiBvbkxpc3RTY3JvbGwoZSkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHNjcm9sbFRpbWVvdXQpO1xuICAgIGlzU2Nyb2xsaW5nLnZhbHVlID0gdHJ1ZTtcbiAgICBzY3JvbGxUaW1lb3V0ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHNjcm9sbFRpbWVvdXQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBpc1Njcm9sbGluZy52YWx1ZSA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gZmluaXNoU2Nyb2xsaW5nKCkge1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc29sdmUpKTtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShyZXNvbHZlKSk7XG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzb2x2ZSkpO1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgaWYgKGlzU2Nyb2xsaW5nLnZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHN0b3AgPSB3YXRjaChpc1Njcm9sbGluZywgKCkgPT4ge1xuICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBvbkxpc3RLZXlkb3duKGUpIHtcbiAgICBpZiAoZS5rZXkgPT09ICdUYWInKSB7XG4gICAgICB0ZXh0RmllbGRSZWYudmFsdWU/LmZvY3VzKCk7XG4gICAgfVxuICAgIGlmICghWydQYWdlRG93bicsICdQYWdlVXAnLCAnSG9tZScsICdFbmQnXS5pbmNsdWRlcyhlLmtleSkpIHJldHVybjtcbiAgICBjb25zdCBlbCA9IGxpc3RSZWYudmFsdWU/LiRlbDtcbiAgICBpZiAoIWVsKSByZXR1cm47XG4gICAgaWYgKGUua2V5ID09PSAnSG9tZScgfHwgZS5rZXkgPT09ICdFbmQnKSB7XG4gICAgICBlbC5zY3JvbGxUbyh7XG4gICAgICAgIHRvcDogZS5rZXkgPT09ICdIb21lJyA/IDAgOiBlbC5zY3JvbGxIZWlnaHQsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIGF3YWl0IGZpbmlzaFNjcm9sbGluZygpO1xuICAgIGNvbnN0IGNoaWxkcmVuID0gZWwucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gOm5vdCgudi12aXJ0dWFsLXNjcm9sbF9fc3BhY2VyKScpO1xuICAgIGlmIChlLmtleSA9PT0gJ1BhZ2VEb3duJyB8fCBlLmtleSA9PT0gJ0hvbWUnKSB7XG4gICAgICBjb25zdCB0b3AgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChjaGlsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPj0gdG9wKSB7XG4gICAgICAgICAgY2hpbGQuZm9jdXMoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBib3R0b20gPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIFsuLi5jaGlsZHJlbl0ucmV2ZXJzZSgpKSB7XG4gICAgICAgIGlmIChjaGlsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gPD0gYm90dG9tKSB7XG4gICAgICAgICAgY2hpbGQuZm9jdXMoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIG9uTGlzdFNjcm9sbCxcbiAgICBvbkxpc3RLZXlkb3duXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VTY3JvbGxpbmcubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIEZyYWdtZW50IGFzIF9GcmFnbWVudCB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WU2VsZWN0LmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWRGlhbG9nVHJhbnNpdGlvbiB9IGZyb20gXCIuLi90cmFuc2l0aW9ucy9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZDaGVja2JveEJ0biB9IGZyb20gXCIuLi9WQ2hlY2tib3gvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWQ2hpcCB9IGZyb20gXCIuLi9WQ2hpcC9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZEZWZhdWx0c1Byb3ZpZGVyIH0gZnJvbSBcIi4uL1ZEZWZhdWx0c1Byb3ZpZGVyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkljb24gfSBmcm9tIFwiLi4vVkljb24vaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWTGlzdCwgVkxpc3RJdGVtIH0gZnJvbSBcIi4uL1ZMaXN0L2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVk1lbnUgfSBmcm9tIFwiLi4vVk1lbnUvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBtYWtlVlRleHRGaWVsZFByb3BzLCBWVGV4dEZpZWxkIH0gZnJvbSBcIi4uL1ZUZXh0RmllbGQvVlRleHRGaWVsZC5tanNcIjtcbmltcG9ydCB7IFZWaXJ0dWFsU2Nyb2xsIH0gZnJvbSBcIi4uL1ZWaXJ0dWFsU2Nyb2xsL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlU2Nyb2xsaW5nIH0gZnJvbSBcIi4vdXNlU2Nyb2xsaW5nLm1qc1wiO1xuaW1wb3J0IHsgdXNlRm9ybSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb3JtLm1qc1wiO1xuaW1wb3J0IHsgZm9yd2FyZFJlZnMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9yd2FyZFJlZnMubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlSXRlbXNQcm9wcywgdXNlSXRlbXMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGlzdC1pdGVtcy5tanNcIjtcbmltcG9ydCB7IHVzZUxvY2FsZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhbGUubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRyYW5zaXRpb25Qcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90cmFuc2l0aW9uLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBtZXJnZVByb3BzLCByZWYsIHNoYWxsb3dSZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIElOX0JST1dTRVIsIG1hdGNoZXNTZWxlY3Rvciwgb21pdCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIsIHdyYXBJbkFycmF5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVNlbGVjdFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY2hpcHM6IEJvb2xlYW4sXG4gIGNsb3NhYmxlQ2hpcHM6IEJvb2xlYW4sXG4gIGNsb3NlVGV4dDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkuY2xvc2UnXG4gIH0sXG4gIG9wZW5UZXh0OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICckdnVldGlmeS5vcGVuJ1xuICB9LFxuICBlYWdlcjogQm9vbGVhbixcbiAgaGlkZU5vRGF0YTogQm9vbGVhbixcbiAgaGlkZVNlbGVjdGVkOiBCb29sZWFuLFxuICBtZW51OiBCb29sZWFuLFxuICBtZW51SWNvbjoge1xuICAgIHR5cGU6IEljb25WYWx1ZSxcbiAgICBkZWZhdWx0OiAnJGRyb3Bkb3duJ1xuICB9LFxuICBtZW51UHJvcHM6IHtcbiAgICB0eXBlOiBPYmplY3RcbiAgfSxcbiAgbXVsdGlwbGU6IEJvb2xlYW4sXG4gIG5vRGF0YVRleHQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJyR2dWV0aWZ5Lm5vRGF0YVRleHQnXG4gIH0sXG4gIG9wZW5PbkNsZWFyOiBCb29sZWFuLFxuICBpdGVtQ29sb3I6IFN0cmluZyxcbiAgLi4ubWFrZUl0ZW1zUHJvcHMoe1xuICAgIGl0ZW1DaGlsZHJlbjogZmFsc2VcbiAgfSlcbn0sICdTZWxlY3QnKTtcbmV4cG9ydCBjb25zdCBtYWtlVlNlbGVjdFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgLi4ubWFrZVNlbGVjdFByb3BzKCksXG4gIC4uLm9taXQobWFrZVZUZXh0RmllbGRQcm9wcyh7XG4gICAgbW9kZWxWYWx1ZTogbnVsbCxcbiAgICByb2xlOiAnYnV0dG9uJ1xuICB9KSwgWyd2YWxpZGF0aW9uVmFsdWUnLCAnZGlydHknLCAnYXBwZW5kSW5uZXJJY29uJ10pLFxuICAuLi5tYWtlVHJhbnNpdGlvblByb3BzKHtcbiAgICB0cmFuc2l0aW9uOiB7XG4gICAgICBjb21wb25lbnQ6IFZEaWFsb2dUcmFuc2l0aW9uXG4gICAgfVxuICB9KVxufSwgJ1ZTZWxlY3QnKTtcbmV4cG9ydCBjb25zdCBWU2VsZWN0ID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZTZWxlY3QnLFxuICBwcm9wczogbWFrZVZTZWxlY3RQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6Zm9jdXNlZCc6IGZvY3VzZWQgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWwgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1lbnUnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRcbiAgICB9ID0gdXNlTG9jYWxlKCk7XG4gICAgY29uc3QgdlRleHRGaWVsZFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHZNZW51UmVmID0gcmVmKCk7XG4gICAgY29uc3QgdlZpcnR1YWxTY3JvbGxSZWYgPSByZWYoKTtcbiAgICBjb25zdCBfbWVudSA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21lbnUnKTtcbiAgICBjb25zdCBtZW51ID0gY29tcHV0ZWQoe1xuICAgICAgZ2V0OiAoKSA9PiBfbWVudS52YWx1ZSxcbiAgICAgIHNldDogdiA9PiB7XG4gICAgICAgIGlmIChfbWVudS52YWx1ZSAmJiAhdiAmJiB2TWVudVJlZi52YWx1ZT8uzqhvcGVuQ2hpbGRyZW4pIHJldHVybjtcbiAgICAgICAgX21lbnUudmFsdWUgPSB2O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGl0ZW1zLFxuICAgICAgdHJhbnNmb3JtSW4sXG4gICAgICB0cmFuc2Zvcm1PdXRcbiAgICB9ID0gdXNlSXRlbXMocHJvcHMpO1xuICAgIGNvbnN0IG1vZGVsID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScsIFtdLCB2ID0+IHRyYW5zZm9ybUluKHYgPT09IG51bGwgPyBbbnVsbF0gOiB3cmFwSW5BcnJheSh2KSksIHYgPT4ge1xuICAgICAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1PdXQodik7XG4gICAgICByZXR1cm4gcHJvcHMubXVsdGlwbGUgPyB0cmFuc2Zvcm1lZCA6IHRyYW5zZm9ybWVkWzBdID8/IG51bGw7XG4gICAgfSk7XG4gICAgY29uc3QgZm9ybSA9IHVzZUZvcm0oKTtcbiAgICBjb25zdCBzZWxlY3RlZFZhbHVlcyA9IGNvbXB1dGVkKCgpID0+IG1vZGVsLnZhbHVlLm1hcChzZWxlY3Rpb24gPT4gc2VsZWN0aW9uLnZhbHVlKSk7XG4gICAgY29uc3QgaXNGb2N1c2VkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAgY29uc3QgbGFiZWwgPSBjb21wdXRlZCgoKSA9PiBtZW51LnZhbHVlID8gcHJvcHMuY2xvc2VUZXh0IDogcHJvcHMub3BlblRleHQpO1xuICAgIGxldCBrZXlib2FyZExvb2t1cFByZWZpeCA9ICcnO1xuICAgIGxldCBrZXlib2FyZExvb2t1cExhc3RUaW1lO1xuICAgIGNvbnN0IGRpc3BsYXlJdGVtcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5oaWRlU2VsZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLnZhbHVlLmZpbHRlcihpdGVtID0+ICFtb2RlbC52YWx1ZS5zb21lKHMgPT4gcyA9PT0gaXRlbSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZW1zLnZhbHVlO1xuICAgIH0pO1xuICAgIGNvbnN0IG1lbnVEaXNhYmxlZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmhpZGVOb0RhdGEgJiYgIWl0ZW1zLnZhbHVlLmxlbmd0aCB8fCBwcm9wcy5yZWFkb25seSB8fCBmb3JtPy5pc1JlYWRvbmx5LnZhbHVlKTtcbiAgICBjb25zdCBsaXN0UmVmID0gcmVmKCk7XG4gICAgY29uc3Qge1xuICAgICAgb25MaXN0U2Nyb2xsLFxuICAgICAgb25MaXN0S2V5ZG93blxuICAgIH0gPSB1c2VTY3JvbGxpbmcobGlzdFJlZiwgdlRleHRGaWVsZFJlZik7XG4gICAgZnVuY3Rpb24gb25DbGVhcihlKSB7XG4gICAgICBpZiAocHJvcHMub3Blbk9uQ2xlYXIpIHtcbiAgICAgICAgbWVudS52YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uTW91c2Vkb3duQ29udHJvbCgpIHtcbiAgICAgIGlmIChtZW51RGlzYWJsZWQudmFsdWUpIHJldHVybjtcbiAgICAgIG1lbnUudmFsdWUgPSAhbWVudS52YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25LZXlkb3duKGUpIHtcbiAgICAgIGlmICghZS5rZXkgfHwgcHJvcHMucmVhZG9ubHkgfHwgZm9ybT8uaXNSZWFkb25seS52YWx1ZSkgcmV0dXJuO1xuICAgICAgaWYgKFsnRW50ZXInLCAnICcsICdBcnJvd0Rvd24nLCAnQXJyb3dVcCcsICdIb21lJywgJ0VuZCddLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBpZiAoWydFbnRlcicsICdBcnJvd0Rvd24nLCAnICddLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICBtZW51LnZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChbJ0VzY2FwZScsICdUYWInXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgbWVudS52YWx1ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGUua2V5ID09PSAnSG9tZScpIHtcbiAgICAgICAgbGlzdFJlZi52YWx1ZT8uZm9jdXMoJ2ZpcnN0Jyk7XG4gICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnRW5kJykge1xuICAgICAgICBsaXN0UmVmLnZhbHVlPy5mb2N1cygnbGFzdCcpO1xuICAgICAgfVxuXG4gICAgICAvLyBodG1sIHNlbGVjdCBob3RrZXlzXG4gICAgICBjb25zdCBLRVlCT0FSRF9MT09LVVBfVEhSRVNIT0xEID0gMTAwMDsgLy8gbWlsbGlzZWNvbmRzXG5cbiAgICAgIGZ1bmN0aW9uIGNoZWNrUHJpbnRhYmxlKGUpIHtcbiAgICAgICAgY29uc3QgaXNQcmludGFibGVDaGFyID0gZS5rZXkubGVuZ3RoID09PSAxO1xuICAgICAgICBjb25zdCBub01vZGlmaWVyID0gIWUuY3RybEtleSAmJiAhZS5tZXRhS2V5ICYmICFlLmFsdEtleTtcbiAgICAgICAgcmV0dXJuIGlzUHJpbnRhYmxlQ2hhciAmJiBub01vZGlmaWVyO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLm11bHRpcGxlIHx8ICFjaGVja1ByaW50YWJsZShlKSkgcmV0dXJuO1xuICAgICAgY29uc3Qgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBpZiAobm93IC0ga2V5Ym9hcmRMb29rdXBMYXN0VGltZSA+IEtFWUJPQVJEX0xPT0tVUF9USFJFU0hPTEQpIHtcbiAgICAgICAga2V5Ym9hcmRMb29rdXBQcmVmaXggPSAnJztcbiAgICAgIH1cbiAgICAgIGtleWJvYXJkTG9va3VwUHJlZml4ICs9IGUua2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICBrZXlib2FyZExvb2t1cExhc3RUaW1lID0gbm93O1xuICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zLnZhbHVlLmZpbmQoaXRlbSA9PiBpdGVtLnRpdGxlLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChrZXlib2FyZExvb2t1cFByZWZpeCkpO1xuICAgICAgaWYgKGl0ZW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtb2RlbC52YWx1ZSA9IFtpdGVtXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc2VsZWN0KGl0ZW0pIHtcbiAgICAgIGlmIChwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IG1vZGVsLnZhbHVlLmZpbmRJbmRleChzZWxlY3Rpb24gPT4gcHJvcHMudmFsdWVDb21wYXJhdG9yKHNlbGVjdGlvbi52YWx1ZSwgaXRlbS52YWx1ZSkpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgbW9kZWwudmFsdWUgPSBbLi4ubW9kZWwudmFsdWUsIGl0ZW1dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gWy4uLm1vZGVsLnZhbHVlXTtcbiAgICAgICAgICB2YWx1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIG1vZGVsLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGVsLnZhbHVlID0gW2l0ZW1dO1xuICAgICAgICBtZW51LnZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQmx1cihlKSB7XG4gICAgICBpZiAoIWxpc3RSZWYudmFsdWU/LiRlbC5jb250YWlucyhlLnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICAgIG1lbnUudmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25BZnRlckxlYXZlKCkge1xuICAgICAgaWYgKGlzRm9jdXNlZC52YWx1ZSkge1xuICAgICAgICB2VGV4dEZpZWxkUmVmLnZhbHVlPy5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkZvY3VzaW4oZSkge1xuICAgICAgaXNGb2N1c2VkLnZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Nb2RlbFVwZGF0ZSh2KSB7XG4gICAgICBpZiAodiA9PSBudWxsKSBtb2RlbC52YWx1ZSA9IFtdO2Vsc2UgaWYgKG1hdGNoZXNTZWxlY3Rvcih2VGV4dEZpZWxkUmVmLnZhbHVlLCAnOmF1dG9maWxsJykgfHwgbWF0Y2hlc1NlbGVjdG9yKHZUZXh0RmllbGRSZWYudmFsdWUsICc6LXdlYmtpdC1hdXRvZmlsbCcpKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtcy52YWx1ZS5maW5kKGl0ZW0gPT4gaXRlbS50aXRsZSA9PT0gdik7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgc2VsZWN0KGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZUZXh0RmllbGRSZWYudmFsdWUpIHtcbiAgICAgICAgdlRleHRGaWVsZFJlZi52YWx1ZS52YWx1ZSA9ICcnO1xuICAgICAgfVxuICAgIH1cbiAgICB3YXRjaChtZW51LCAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmhpZGVTZWxlY3RlZCAmJiBtZW51LnZhbHVlICYmIG1vZGVsLnZhbHVlLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IGRpc3BsYXlJdGVtcy52YWx1ZS5maW5kSW5kZXgoaXRlbSA9PiBtb2RlbC52YWx1ZS5zb21lKHMgPT4gcHJvcHMudmFsdWVDb21wYXJhdG9yKHMudmFsdWUsIGl0ZW0udmFsdWUpKSk7XG4gICAgICAgIElOX0JST1dTRVIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaW5kZXggPj0gMCAmJiB2VmlydHVhbFNjcm9sbFJlZi52YWx1ZT8uc2Nyb2xsVG9JbmRleChpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBoYXNDaGlwcyA9ICEhKHByb3BzLmNoaXBzIHx8IHNsb3RzLmNoaXApO1xuICAgICAgY29uc3QgaGFzTGlzdCA9ICEhKCFwcm9wcy5oaWRlTm9EYXRhIHx8IGRpc3BsYXlJdGVtcy52YWx1ZS5sZW5ndGggfHwgc2xvdHNbJ3ByZXBlbmQtaXRlbSddIHx8IHNsb3RzWydhcHBlbmQtaXRlbSddIHx8IHNsb3RzWyduby1kYXRhJ10pO1xuICAgICAgY29uc3QgaXNEaXJ0eSA9IG1vZGVsLnZhbHVlLmxlbmd0aCA+IDA7XG4gICAgICBjb25zdCBbdGV4dEZpZWxkUHJvcHNdID0gVlRleHRGaWVsZC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICBjb25zdCBwbGFjZWhvbGRlciA9IGlzRGlydHkgfHwgIWlzRm9jdXNlZC52YWx1ZSAmJiBwcm9wcy5sYWJlbCAmJiAhcHJvcHMucGVyc2lzdGVudFBsYWNlaG9sZGVyID8gdW5kZWZpbmVkIDogcHJvcHMucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZUZXh0RmllbGQsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJyZWZcIjogdlRleHRGaWVsZFJlZlxuICAgICAgfSwgdGV4dEZpZWxkUHJvcHMsIHtcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlLm1hcCh2ID0+IHYucHJvcHMudmFsdWUpLmpvaW4oJywgJyksXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBvbk1vZGVsVXBkYXRlLFxuICAgICAgICBcImZvY3VzZWRcIjogaXNGb2N1c2VkLnZhbHVlLFxuICAgICAgICBcIm9uVXBkYXRlOmZvY3VzZWRcIjogJGV2ZW50ID0+IGlzRm9jdXNlZC52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgXCJ2YWxpZGF0aW9uVmFsdWVcIjogbW9kZWwuZXh0ZXJuYWxWYWx1ZSxcbiAgICAgICAgXCJjb3VudGVyVmFsdWVcIjogbW9kZWwudmFsdWUubGVuZ3RoLFxuICAgICAgICBcImRpcnR5XCI6IGlzRGlydHksXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXNlbGVjdCcsIHtcbiAgICAgICAgICAndi1zZWxlY3QtLWFjdGl2ZS1tZW51JzogbWVudS52YWx1ZSxcbiAgICAgICAgICAndi1zZWxlY3QtLWNoaXBzJzogISFwcm9wcy5jaGlwcyxcbiAgICAgICAgICBbYHYtc2VsZWN0LS0ke3Byb3BzLm11bHRpcGxlID8gJ211bHRpcGxlJyA6ICdzaW5nbGUnfWBdOiB0cnVlLFxuICAgICAgICAgICd2LXNlbGVjdC0tc2VsZWN0ZWQnOiBtb2RlbC52YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgJ3Ytc2VsZWN0LS1zZWxlY3Rpb24tc2xvdCc6ICEhc2xvdHMuc2VsZWN0aW9uXG4gICAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZSxcbiAgICAgICAgXCJpbnB1dG1vZGVcIjogXCJub25lXCIsXG4gICAgICAgIFwicGxhY2Vob2xkZXJcIjogcGxhY2Vob2xkZXIsXG4gICAgICAgIFwib25DbGljazpjbGVhclwiOiBvbkNsZWFyLFxuICAgICAgICBcIm9uTW91c2Vkb3duOmNvbnRyb2xcIjogb25Nb3VzZWRvd25Db250cm9sLFxuICAgICAgICBcIm9uQmx1clwiOiBvbkJsdXIsXG4gICAgICAgIFwib25LZXlkb3duXCI6IG9uS2V5ZG93bixcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHQobGFiZWwudmFsdWUpLFxuICAgICAgICBcInRpdGxlXCI6IHQobGFiZWwudmFsdWUpXG4gICAgICB9KSwge1xuICAgICAgICAuLi5zbG90cyxcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW19jcmVhdGVWTm9kZShWTWVudSwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgIFwicmVmXCI6IHZNZW51UmVmLFxuICAgICAgICAgIFwibW9kZWxWYWx1ZVwiOiBtZW51LnZhbHVlLFxuICAgICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gbWVudS52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgICBcImFjdGl2YXRvclwiOiBcInBhcmVudFwiLFxuICAgICAgICAgIFwiY29udGVudENsYXNzXCI6IFwidi1zZWxlY3RfX2NvbnRlbnRcIixcbiAgICAgICAgICBcImRpc2FibGVkXCI6IG1lbnVEaXNhYmxlZC52YWx1ZSxcbiAgICAgICAgICBcImVhZ2VyXCI6IHByb3BzLmVhZ2VyLFxuICAgICAgICAgIFwibWF4SGVpZ2h0XCI6IDMxMCxcbiAgICAgICAgICBcIm9wZW5PbkNsaWNrXCI6IGZhbHNlLFxuICAgICAgICAgIFwiY2xvc2VPbkNvbnRlbnRDbGlja1wiOiBmYWxzZSxcbiAgICAgICAgICBcInRyYW5zaXRpb25cIjogcHJvcHMudHJhbnNpdGlvbixcbiAgICAgICAgICBcIm9uQWZ0ZXJMZWF2ZVwiOiBvbkFmdGVyTGVhdmVcbiAgICAgICAgfSwgcHJvcHMubWVudVByb3BzKSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtoYXNMaXN0ICYmIF9jcmVhdGVWTm9kZShWTGlzdCwge1xuICAgICAgICAgICAgXCJyZWZcIjogbGlzdFJlZixcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogc2VsZWN0ZWRWYWx1ZXMudmFsdWUsXG4gICAgICAgICAgICBcInNlbGVjdFN0cmF0ZWd5XCI6IHByb3BzLm11bHRpcGxlID8gJ2luZGVwZW5kZW50JyA6ICdzaW5nbGUtaW5kZXBlbmRlbnQnLFxuICAgICAgICAgICAgXCJvbk1vdXNlZG93blwiOiBlID0+IGUucHJldmVudERlZmF1bHQoKSxcbiAgICAgICAgICAgIFwib25LZXlkb3duXCI6IG9uTGlzdEtleWRvd24sXG4gICAgICAgICAgICBcIm9uRm9jdXNpblwiOiBvbkZvY3VzaW4sXG4gICAgICAgICAgICBcIm9uU2Nyb2xsUGFzc2l2ZVwiOiBvbkxpc3RTY3JvbGwsXG4gICAgICAgICAgICBcInRhYmluZGV4XCI6IFwiLTFcIixcbiAgICAgICAgICAgIFwiY29sb3JcIjogcHJvcHMuaXRlbUNvbG9yID8/IHByb3BzLmNvbG9yXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzWydwcmVwZW5kLWl0ZW0nXT8uKCksICFkaXNwbGF5SXRlbXMudmFsdWUubGVuZ3RoICYmICFwcm9wcy5oaWRlTm9EYXRhICYmIChzbG90c1snbm8tZGF0YSddPy4oKSA/PyBfY3JlYXRlVk5vZGUoVkxpc3RJdGVtLCB7XG4gICAgICAgICAgICAgIFwidGl0bGVcIjogdChwcm9wcy5ub0RhdGFUZXh0KVxuICAgICAgICAgICAgfSwgbnVsbCkpLCBfY3JlYXRlVk5vZGUoVlZpcnR1YWxTY3JvbGwsIHtcbiAgICAgICAgICAgICAgXCJyZWZcIjogdlZpcnR1YWxTY3JvbGxSZWYsXG4gICAgICAgICAgICAgIFwicmVuZGVybGVzc1wiOiB0cnVlLFxuICAgICAgICAgICAgICBcIml0ZW1zXCI6IGRpc3BsYXlJdGVtcy52YWx1ZVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBkZWZhdWx0OiBfcmVmMiA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgIGl0ZW1SZWZcbiAgICAgICAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbVByb3BzID0gbWVyZ2VQcm9wcyhpdGVtLnByb3BzLCB7XG4gICAgICAgICAgICAgICAgICByZWY6IGl0ZW1SZWYsXG4gICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgICAgICAgICAgb25DbGljazogKCkgPT4gc2VsZWN0KGl0ZW0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNsb3RzLml0ZW0/Lih7XG4gICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICBwcm9wczogaXRlbVByb3BzXG4gICAgICAgICAgICAgICAgfSkgPz8gX2NyZWF0ZVZOb2RlKFZMaXN0SXRlbSwgaXRlbVByb3BzLCB7XG4gICAgICAgICAgICAgICAgICBwcmVwZW5kOiBfcmVmMyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICB9ID0gX3JlZjM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbcHJvcHMubXVsdGlwbGUgJiYgIXByb3BzLmhpZGVTZWxlY3RlZCA/IF9jcmVhdGVWTm9kZShWQ2hlY2tib3hCdG4sIHtcbiAgICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBpdGVtLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgIFwibW9kZWxWYWx1ZVwiOiBpc1NlbGVjdGVkLFxuICAgICAgICAgICAgICAgICAgICAgIFwicmlwcGxlXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgIFwidGFiaW5kZXhcIjogXCItMVwiXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpIDogdW5kZWZpbmVkLCBpdGVtLnByb3BzLnByZXBlbmRJY29uICYmIF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBpdGVtLnByb3BzLnByZXBlbmRJY29uXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLCBzbG90c1snYXBwZW5kLWl0ZW0nXT8uKCldXG4gICAgICAgICAgfSldXG4gICAgICAgIH0pLCBtb2RlbC52YWx1ZS5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgZnVuY3Rpb24gb25DaGlwQ2xvc2UoZSkge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHNlbGVjdChpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc2xvdFByb3BzID0ge1xuICAgICAgICAgICAgJ29uQ2xpY2s6Y2xvc2UnOiBvbkNoaXBDbG9zZSxcbiAgICAgICAgICAgIG9uTW91c2Vkb3duKGUpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vZGVsVmFsdWU6IHRydWUsXG4gICAgICAgICAgICAnb25VcGRhdGU6bW9kZWxWYWx1ZSc6IHVuZGVmaW5lZFxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICBcImtleVwiOiBpdGVtLnZhbHVlLFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtc2VsZWN0X19zZWxlY3Rpb25cIlxuICAgICAgICAgIH0sIFtoYXNDaGlwcyA/ICFzbG90cy5jaGlwID8gX2NyZWF0ZVZOb2RlKFZDaGlwLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgICBcImtleVwiOiBcImNoaXBcIixcbiAgICAgICAgICAgIFwiY2xvc2FibGVcIjogcHJvcHMuY2xvc2FibGVDaGlwcyxcbiAgICAgICAgICAgIFwic2l6ZVwiOiBcInNtYWxsXCIsXG4gICAgICAgICAgICBcInRleHRcIjogaXRlbS50aXRsZSxcbiAgICAgICAgICAgIFwiZGlzYWJsZWRcIjogaXRlbS5wcm9wcy5kaXNhYmxlZFxuICAgICAgICAgIH0sIHNsb3RQcm9wcyksIG51bGwpIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgICBcImtleVwiOiBcImNoaXAtZGVmYXVsdHNcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgICBWQ2hpcDoge1xuICAgICAgICAgICAgICAgIGNsb3NhYmxlOiBwcm9wcy5jbG9zYWJsZUNoaXBzLFxuICAgICAgICAgICAgICAgIHNpemU6ICdzbWFsbCcsXG4gICAgICAgICAgICAgICAgdGV4dDogaXRlbS50aXRsZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmNoaXA/Lih7XG4gICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICBwcm9wczogc2xvdFByb3BzXG4gICAgICAgICAgICB9KV1cbiAgICAgICAgICB9KSA6IHNsb3RzLnNlbGVjdGlvbj8uKHtcbiAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgIH0pID8/IF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtc2VsZWN0X19zZWxlY3Rpb24tdGV4dFwiXG4gICAgICAgICAgfSwgW2l0ZW0udGl0bGUsIHByb3BzLm11bHRpcGxlICYmIGluZGV4IDwgbW9kZWwudmFsdWUubGVuZ3RoIC0gMSAmJiBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXNlbGVjdF9fc2VsZWN0aW9uLWNvbW1hXCJcbiAgICAgICAgICB9LCBbX2NyZWF0ZVRleHRWTm9kZShcIixcIildKV0pXSk7XG4gICAgICAgIH0pXSksXG4gICAgICAgICdhcHBlbmQtaW5uZXInOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Nsb3RzWydhcHBlbmQtaW5uZXInXT8uKC4uLmFyZ3MpLCBwcm9wcy5tZW51SWNvbiA/IF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtc2VsZWN0X19tZW51LWljb25cIixcbiAgICAgICAgICAgIFwiaWNvblwiOiBwcm9wcy5tZW51SWNvblxuICAgICAgICAgIH0sIG51bGwpIDogdW5kZWZpbmVkXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3J3YXJkUmVmcyh7XG4gICAgICBpc0ZvY3VzZWQsXG4gICAgICBtZW51LFxuICAgICAgc2VsZWN0XG4gICAgfSwgdlRleHRGaWVsZFJlZik7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlNlbGVjdC5tanMubWFwIiwiLyogZXNsaW50LWRpc2FibGUgbWF4LXN0YXRlbWVudHMgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLWxhYmVscyAqL1xuXG4vLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCByZWYsIHVucmVmLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZXRQcm9wZXJ0eUZyb21JdGVtLCBwcm9wc0ZhY3RvcnksIHdyYXBJbkFycmF5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG4vLyBDb21wb3NhYmxlc1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRGaWx0ZXIgPSAodmFsdWUsIHF1ZXJ5LCBpdGVtKSA9PiB7XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IHF1ZXJ5ID09IG51bGwpIHJldHVybiAtMTtcbiAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCkudG9Mb2NhbGVMb3dlckNhc2UoKS5pbmRleE9mKHF1ZXJ5LnRvU3RyaW5nKCkudG9Mb2NhbGVMb3dlckNhc2UoKSk7XG59O1xuZXhwb3J0IGNvbnN0IG1ha2VGaWx0ZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGN1c3RvbUZpbHRlcjogRnVuY3Rpb24sXG4gIGN1c3RvbUtleUZpbHRlcjogT2JqZWN0LFxuICBmaWx0ZXJLZXlzOiBbQXJyYXksIFN0cmluZ10sXG4gIGZpbHRlck1vZGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2ludGVyc2VjdGlvbidcbiAgfSxcbiAgbm9GaWx0ZXI6IEJvb2xlYW5cbn0sICdmaWx0ZXInKTtcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJJdGVtcyhpdGVtcywgcXVlcnksIG9wdGlvbnMpIHtcbiAgY29uc3QgYXJyYXkgPSBbXTtcbiAgLy8gYWx3YXlzIGVuc3VyZSB3ZSBmYWxsIGJhY2sgdG8gYSBmdW5jdGlvbmluZyBmaWx0ZXJcbiAgY29uc3QgZmlsdGVyID0gb3B0aW9ucz8uZGVmYXVsdCA/PyBkZWZhdWx0RmlsdGVyO1xuICBjb25zdCBrZXlzID0gb3B0aW9ucz8uZmlsdGVyS2V5cyA/IHdyYXBJbkFycmF5KG9wdGlvbnMuZmlsdGVyS2V5cykgOiBmYWxzZTtcbiAgY29uc3QgY3VzdG9tRmlsdGVyc0xlbmd0aCA9IE9iamVjdC5rZXlzKG9wdGlvbnM/LmN1c3RvbUtleUZpbHRlciA/PyB7fSkubGVuZ3RoO1xuICBpZiAoIWl0ZW1zPy5sZW5ndGgpIHJldHVybiBhcnJheTtcbiAgbG9vcDogZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IFtpdGVtLCB0cmFuc2Zvcm1lZCA9IGl0ZW1dID0gd3JhcEluQXJyYXkoaXRlbXNbaV0pO1xuICAgIGNvbnN0IGN1c3RvbU1hdGNoZXMgPSB7fTtcbiAgICBjb25zdCBkZWZhdWx0TWF0Y2hlcyA9IHt9O1xuICAgIGxldCBtYXRjaCA9IC0xO1xuICAgIGlmIChxdWVyeSAmJiAhb3B0aW9ucz8ubm9GaWx0ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyS2V5cyA9IGtleXMgfHwgT2JqZWN0LmtleXModHJhbnNmb3JtZWQpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBmaWx0ZXJLZXlzKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBnZXRQcm9wZXJ0eUZyb21JdGVtKHRyYW5zZm9ybWVkLCBrZXksIHRyYW5zZm9ybWVkKTtcbiAgICAgICAgICBjb25zdCBrZXlGaWx0ZXIgPSBvcHRpb25zPy5jdXN0b21LZXlGaWx0ZXI/LltrZXldO1xuICAgICAgICAgIG1hdGNoID0ga2V5RmlsdGVyID8ga2V5RmlsdGVyKHZhbHVlLCBxdWVyeSwgaXRlbSkgOiBmaWx0ZXIodmFsdWUsIHF1ZXJ5LCBpdGVtKTtcbiAgICAgICAgICBpZiAobWF0Y2ggIT09IC0xICYmIG1hdGNoICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKGtleUZpbHRlcikgY3VzdG9tTWF0Y2hlc1trZXldID0gbWF0Y2g7ZWxzZSBkZWZhdWx0TWF0Y2hlc1trZXldID0gbWF0Y2g7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zPy5maWx0ZXJNb2RlID09PSAnZXZlcnknKSB7XG4gICAgICAgICAgICBjb250aW51ZSBsb29wO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF0Y2ggPSBmaWx0ZXIoaXRlbSwgcXVlcnksIGl0ZW0pO1xuICAgICAgICBpZiAobWF0Y2ggIT09IC0xICYmIG1hdGNoICE9PSBmYWxzZSkge1xuICAgICAgICAgIGRlZmF1bHRNYXRjaGVzLnRpdGxlID0gbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGRlZmF1bHRNYXRjaGVzTGVuZ3RoID0gT2JqZWN0LmtleXMoZGVmYXVsdE1hdGNoZXMpLmxlbmd0aDtcbiAgICAgIGNvbnN0IGN1c3RvbU1hdGNoZXNMZW5ndGggPSBPYmplY3Qua2V5cyhjdXN0b21NYXRjaGVzKS5sZW5ndGg7XG4gICAgICBpZiAoIWRlZmF1bHRNYXRjaGVzTGVuZ3RoICYmICFjdXN0b21NYXRjaGVzTGVuZ3RoKSBjb250aW51ZTtcbiAgICAgIGlmIChvcHRpb25zPy5maWx0ZXJNb2RlID09PSAndW5pb24nICYmIGN1c3RvbU1hdGNoZXNMZW5ndGggIT09IGN1c3RvbUZpbHRlcnNMZW5ndGggJiYgIWRlZmF1bHRNYXRjaGVzTGVuZ3RoKSBjb250aW51ZTtcbiAgICAgIGlmIChvcHRpb25zPy5maWx0ZXJNb2RlID09PSAnaW50ZXJzZWN0aW9uJyAmJiAoY3VzdG9tTWF0Y2hlc0xlbmd0aCAhPT0gY3VzdG9tRmlsdGVyc0xlbmd0aCB8fCAhZGVmYXVsdE1hdGNoZXNMZW5ndGgpKSBjb250aW51ZTtcbiAgICB9XG4gICAgYXJyYXkucHVzaCh7XG4gICAgICBpbmRleDogaSxcbiAgICAgIG1hdGNoZXM6IHtcbiAgICAgICAgLi4uZGVmYXVsdE1hdGNoZXMsXG4gICAgICAgIC4uLmN1c3RvbU1hdGNoZXNcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlRmlsdGVyKHByb3BzLCBpdGVtcywgcXVlcnksIG9wdGlvbnMpIHtcbiAgY29uc3QgZmlsdGVyZWRJdGVtcyA9IHJlZihbXSk7XG4gIGNvbnN0IGZpbHRlcmVkTWF0Y2hlcyA9IHJlZihuZXcgTWFwKCkpO1xuICBjb25zdCB0cmFuc2Zvcm1lZEl0ZW1zID0gY29tcHV0ZWQoKCkgPT4gb3B0aW9ucz8udHJhbnNmb3JtID8gdW5yZWYoaXRlbXMpLm1hcChpdGVtID0+IFtpdGVtLCBvcHRpb25zLnRyYW5zZm9ybShpdGVtKV0pIDogdW5yZWYoaXRlbXMpKTtcbiAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IF9xdWVyeSA9IHR5cGVvZiBxdWVyeSA9PT0gJ2Z1bmN0aW9uJyA/IHF1ZXJ5KCkgOiB1bnJlZihxdWVyeSk7XG4gICAgY29uc3Qgc3RyUXVlcnkgPSB0eXBlb2YgX3F1ZXJ5ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgX3F1ZXJ5ICE9PSAnbnVtYmVyJyA/ICcnIDogU3RyaW5nKF9xdWVyeSk7XG4gICAgY29uc3QgcmVzdWx0cyA9IGZpbHRlckl0ZW1zKHRyYW5zZm9ybWVkSXRlbXMudmFsdWUsIHN0clF1ZXJ5LCB7XG4gICAgICBjdXN0b21LZXlGaWx0ZXI6IHByb3BzLmN1c3RvbUtleUZpbHRlcixcbiAgICAgIGRlZmF1bHQ6IHByb3BzLmN1c3RvbUZpbHRlcixcbiAgICAgIGZpbHRlcktleXM6IHByb3BzLmZpbHRlcktleXMsXG4gICAgICBmaWx0ZXJNb2RlOiBwcm9wcy5maWx0ZXJNb2RlLFxuICAgICAgbm9GaWx0ZXI6IHByb3BzLm5vRmlsdGVyXG4gICAgfSk7XG4gICAgY29uc3Qgb3JpZ2luYWxJdGVtcyA9IHVucmVmKGl0ZW1zKTtcbiAgICBjb25zdCBfZmlsdGVyZWRJdGVtcyA9IFtdO1xuICAgIGNvbnN0IF9maWx0ZXJlZE1hdGNoZXMgPSBuZXcgTWFwKCk7XG4gICAgcmVzdWx0cy5mb3JFYWNoKF9yZWYgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIG1hdGNoZXNcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgY29uc3QgaXRlbSA9IG9yaWdpbmFsSXRlbXNbaW5kZXhdO1xuICAgICAgX2ZpbHRlcmVkSXRlbXMucHVzaChpdGVtKTtcbiAgICAgIF9maWx0ZXJlZE1hdGNoZXMuc2V0KGl0ZW0udmFsdWUsIG1hdGNoZXMpO1xuICAgIH0pO1xuICAgIGZpbHRlcmVkSXRlbXMudmFsdWUgPSBfZmlsdGVyZWRJdGVtcztcbiAgICBmaWx0ZXJlZE1hdGNoZXMudmFsdWUgPSBfZmlsdGVyZWRNYXRjaGVzO1xuICB9KTtcbiAgZnVuY3Rpb24gZ2V0TWF0Y2hlcyhpdGVtKSB7XG4gICAgcmV0dXJuIGZpbHRlcmVkTWF0Y2hlcy52YWx1ZS5nZXQoaXRlbS52YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBmaWx0ZXJlZEl0ZW1zLFxuICAgIGZpbHRlcmVkTWF0Y2hlcyxcbiAgICBnZXRNYXRjaGVzXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIEZyYWdtZW50IGFzIF9GcmFnbWVudCB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQXV0b2NvbXBsZXRlLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQ2hlY2tib3hCdG4gfSBmcm9tIFwiLi4vVkNoZWNrYm94L2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkNoaXAgfSBmcm9tIFwiLi4vVkNoaXAvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZJY29uIH0gZnJvbSBcIi4uL1ZJY29uL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkxpc3QsIFZMaXN0SXRlbSB9IGZyb20gXCIuLi9WTGlzdC9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZNZW51IH0gZnJvbSBcIi4uL1ZNZW51L2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNlbGVjdFByb3BzIH0gZnJvbSBcIi4uL1ZTZWxlY3QvVlNlbGVjdC5tanNcIjtcbmltcG9ydCB7IG1ha2VWVGV4dEZpZWxkUHJvcHMsIFZUZXh0RmllbGQgfSBmcm9tIFwiLi4vVlRleHRGaWVsZC9WVGV4dEZpZWxkLm1qc1wiO1xuaW1wb3J0IHsgVlZpcnR1YWxTY3JvbGwgfSBmcm9tIFwiLi4vVlZpcnR1YWxTY3JvbGwvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VTY3JvbGxpbmcgfSBmcm9tIFwiLi4vVlNlbGVjdC91c2VTY3JvbGxpbmcubWpzXCI7XG5pbXBvcnQgeyB1c2VUZXh0Q29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlRmlsdGVyUHJvcHMsIHVzZUZpbHRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9maWx0ZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VGb3JtIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2Zvcm0ubWpzXCI7XG5pbXBvcnQgeyBmb3J3YXJkUmVmcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb3J3YXJkUmVmcy5tanNcIjtcbmltcG9ydCB7IHVzZUl0ZW1zIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xpc3QtaXRlbXMubWpzXCI7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IG1ha2VUcmFuc2l0aW9uUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdHJhbnNpdGlvbi5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgbWVyZ2VQcm9wcywgbmV4dFRpY2ssIHJlZiwgc2hhbGxvd1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgSU5fQlJPV1NFUiwgbWF0Y2hlc1NlbGVjdG9yLCBub29wLCBvbWl0LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciwgd3JhcEluQXJyYXkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmZ1bmN0aW9uIGhpZ2hsaWdodFJlc3VsdCh0ZXh0LCBtYXRjaGVzLCBsZW5ndGgpIHtcbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkgcmV0dXJuIHRleHQ7XG4gIGlmIChBcnJheS5pc0FycmF5KG1hdGNoZXMpKSB0aHJvdyBuZXcgRXJyb3IoJ011bHRpcGxlIG1hdGNoZXMgaXMgbm90IGltcGxlbWVudGVkJyk7XG4gIHJldHVybiB0eXBlb2YgbWF0Y2hlcyA9PT0gJ251bWJlcicgJiYgfm1hdGNoZXMgPyBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgXCJjbGFzc1wiOiBcInYtYXV0b2NvbXBsZXRlX191bm1hc2tcIlxuICB9LCBbdGV4dC5zdWJzdHIoMCwgbWF0Y2hlcyldKSwgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgXCJjbGFzc1wiOiBcInYtYXV0b2NvbXBsZXRlX19tYXNrXCJcbiAgfSwgW3RleHQuc3Vic3RyKG1hdGNoZXMsIGxlbmd0aCldKSwgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgXCJjbGFzc1wiOiBcInYtYXV0b2NvbXBsZXRlX191bm1hc2tcIlxuICB9LCBbdGV4dC5zdWJzdHIobWF0Y2hlcyArIGxlbmd0aCldKV0pIDogdGV4dDtcbn1cbmV4cG9ydCBjb25zdCBtYWtlVkF1dG9jb21wbGV0ZVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYXV0b1NlbGVjdEZpcnN0OiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ11cbiAgfSxcbiAgc2VhcmNoOiBTdHJpbmcsXG4gIC4uLm1ha2VGaWx0ZXJQcm9wcyh7XG4gICAgZmlsdGVyS2V5czogWyd0aXRsZSddXG4gIH0pLFxuICAuLi5tYWtlU2VsZWN0UHJvcHMoKSxcbiAgLi4ub21pdChtYWtlVlRleHRGaWVsZFByb3BzKHtcbiAgICBtb2RlbFZhbHVlOiBudWxsLFxuICAgIHJvbGU6ICdjb21ib2JveCdcbiAgfSksIFsndmFsaWRhdGlvblZhbHVlJywgJ2RpcnR5JywgJ2FwcGVuZElubmVySWNvbiddKSxcbiAgLi4ubWFrZVRyYW5zaXRpb25Qcm9wcyh7XG4gICAgdHJhbnNpdGlvbjogZmFsc2VcbiAgfSlcbn0sICdWQXV0b2NvbXBsZXRlJyk7XG5leHBvcnQgY29uc3QgVkF1dG9jb21wbGV0ZSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQXV0b2NvbXBsZXRlJyxcbiAgcHJvcHM6IG1ha2VWQXV0b2NvbXBsZXRlUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOmZvY3VzZWQnOiBmb2N1c2VkID0+IHRydWUsXG4gICAgJ3VwZGF0ZTpzZWFyY2gnOiB2YWwgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWwgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1lbnUnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRcbiAgICB9ID0gdXNlTG9jYWxlKCk7XG4gICAgY29uc3QgdlRleHRGaWVsZFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGlzRm9jdXNlZCA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIGNvbnN0IGlzUHJpc3RpbmUgPSBzaGFsbG93UmVmKHRydWUpO1xuICAgIGNvbnN0IGxpc3RIYXNGb2N1cyA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIGNvbnN0IHZNZW51UmVmID0gcmVmKCk7XG4gICAgY29uc3QgdlZpcnR1YWxTY3JvbGxSZWYgPSByZWYoKTtcbiAgICBjb25zdCBfbWVudSA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21lbnUnKTtcbiAgICBjb25zdCBtZW51ID0gY29tcHV0ZWQoe1xuICAgICAgZ2V0OiAoKSA9PiBfbWVudS52YWx1ZSxcbiAgICAgIHNldDogdiA9PiB7XG4gICAgICAgIGlmIChfbWVudS52YWx1ZSAmJiAhdiAmJiB2TWVudVJlZi52YWx1ZT8uzqhvcGVuQ2hpbGRyZW4pIHJldHVybjtcbiAgICAgICAgX21lbnUudmFsdWUgPSB2O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHNlbGVjdGlvbkluZGV4ID0gc2hhbGxvd1JlZigtMSk7XG4gICAgY29uc3QgY29sb3IgPSBjb21wdXRlZCgoKSA9PiB2VGV4dEZpZWxkUmVmLnZhbHVlPy5jb2xvcik7XG4gICAgY29uc3QgbGFiZWwgPSBjb21wdXRlZCgoKSA9PiBtZW51LnZhbHVlID8gcHJvcHMuY2xvc2VUZXh0IDogcHJvcHMub3BlblRleHQpO1xuICAgIGNvbnN0IHtcbiAgICAgIGl0ZW1zLFxuICAgICAgdHJhbnNmb3JtSW4sXG4gICAgICB0cmFuc2Zvcm1PdXRcbiAgICB9ID0gdXNlSXRlbXMocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRleHRDb2xvckNsYXNzZXMsXG4gICAgICB0ZXh0Q29sb3JTdHlsZXNcbiAgICB9ID0gdXNlVGV4dENvbG9yKGNvbG9yKTtcbiAgICBjb25zdCBzZWFyY2ggPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdzZWFyY2gnLCAnJyk7XG4gICAgY29uc3QgbW9kZWwgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJywgW10sIHYgPT4gdHJhbnNmb3JtSW4odiA9PT0gbnVsbCA/IFtudWxsXSA6IHdyYXBJbkFycmF5KHYpKSwgdiA9PiB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybU91dCh2KTtcbiAgICAgIHJldHVybiBwcm9wcy5tdWx0aXBsZSA/IHRyYW5zZm9ybWVkIDogdHJhbnNmb3JtZWRbMF0gPz8gbnVsbDtcbiAgICB9KTtcbiAgICBjb25zdCBmb3JtID0gdXNlRm9ybSgpO1xuICAgIGNvbnN0IHtcbiAgICAgIGZpbHRlcmVkSXRlbXMsXG4gICAgICBnZXRNYXRjaGVzXG4gICAgfSA9IHVzZUZpbHRlcihwcm9wcywgaXRlbXMsICgpID0+IGlzUHJpc3RpbmUudmFsdWUgPyAnJyA6IHNlYXJjaC52YWx1ZSk7XG4gICAgY29uc3QgZGlzcGxheUl0ZW1zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmhpZGVTZWxlY3RlZCkge1xuICAgICAgICByZXR1cm4gZmlsdGVyZWRJdGVtcy52YWx1ZS5maWx0ZXIoZmlsdGVyZWRJdGVtID0+ICFtb2RlbC52YWx1ZS5zb21lKHMgPT4gcy52YWx1ZSA9PT0gZmlsdGVyZWRJdGVtLnZhbHVlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlsdGVyZWRJdGVtcy52YWx1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBzZWxlY3RlZFZhbHVlcyA9IGNvbXB1dGVkKCgpID0+IG1vZGVsLnZhbHVlLm1hcChzZWxlY3Rpb24gPT4gc2VsZWN0aW9uLnByb3BzLnZhbHVlKSk7XG4gICAgY29uc3QgaGlnaGxpZ2h0Rmlyc3QgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBzZWxlY3RGaXJzdCA9IHByb3BzLmF1dG9TZWxlY3RGaXJzdCA9PT0gdHJ1ZSB8fCBwcm9wcy5hdXRvU2VsZWN0Rmlyc3QgPT09ICdleGFjdCcgJiYgc2VhcmNoLnZhbHVlID09PSBkaXNwbGF5SXRlbXMudmFsdWVbMF0/LnRpdGxlO1xuICAgICAgcmV0dXJuIHNlbGVjdEZpcnN0ICYmIGRpc3BsYXlJdGVtcy52YWx1ZS5sZW5ndGggPiAwICYmICFpc1ByaXN0aW5lLnZhbHVlICYmICFsaXN0SGFzRm9jdXMudmFsdWU7XG4gICAgfSk7XG4gICAgY29uc3QgbWVudURpc2FibGVkID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuaGlkZU5vRGF0YSAmJiAhaXRlbXMudmFsdWUubGVuZ3RoIHx8IHByb3BzLnJlYWRvbmx5IHx8IGZvcm0/LmlzUmVhZG9ubHkudmFsdWUpO1xuICAgIGNvbnN0IGxpc3RSZWYgPSByZWYoKTtcbiAgICBjb25zdCB7XG4gICAgICBvbkxpc3RTY3JvbGwsXG4gICAgICBvbkxpc3RLZXlkb3duXG4gICAgfSA9IHVzZVNjcm9sbGluZyhsaXN0UmVmLCB2VGV4dEZpZWxkUmVmKTtcbiAgICBmdW5jdGlvbiBvbkNsZWFyKGUpIHtcbiAgICAgIGlmIChwcm9wcy5vcGVuT25DbGVhcikge1xuICAgICAgICBtZW51LnZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHNlYXJjaC52YWx1ZSA9ICcnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbk1vdXNlZG93bkNvbnRyb2woKSB7XG4gICAgICBpZiAobWVudURpc2FibGVkLnZhbHVlKSByZXR1cm47XG4gICAgICBtZW51LnZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Nb3VzZWRvd25NZW51SWNvbihlKSB7XG4gICAgICBpZiAobWVudURpc2FibGVkLnZhbHVlKSByZXR1cm47XG4gICAgICBpZiAoaXNGb2N1c2VkLnZhbHVlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICAgIG1lbnUudmFsdWUgPSAhbWVudS52YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25LZXlkb3duKGUpIHtcbiAgICAgIGlmIChwcm9wcy5yZWFkb25seSB8fCBmb3JtPy5pc1JlYWRvbmx5LnZhbHVlKSByZXR1cm47XG4gICAgICBjb25zdCBzZWxlY3Rpb25TdGFydCA9IHZUZXh0RmllbGRSZWYudmFsdWUuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICBjb25zdCBsZW5ndGggPSBtb2RlbC52YWx1ZS5sZW5ndGg7XG4gICAgICBpZiAoc2VsZWN0aW9uSW5kZXgudmFsdWUgPiAtMSB8fCBbJ0VudGVyJywgJ0Fycm93RG93bicsICdBcnJvd1VwJ10uaW5jbHVkZXMoZS5rZXkpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChbJ0VudGVyJywgJ0Fycm93RG93biddLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICBtZW51LnZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChbJ0VzY2FwZSddLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICBtZW51LnZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaGlnaGxpZ2h0Rmlyc3QudmFsdWUgJiYgWydFbnRlcicsICdUYWInXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgc2VsZWN0KGRpc3BsYXlJdGVtcy52YWx1ZVswXSk7XG4gICAgICB9XG4gICAgICBpZiAoZS5rZXkgPT09ICdBcnJvd0Rvd24nICYmIGhpZ2hsaWdodEZpcnN0LnZhbHVlKSB7XG4gICAgICAgIGxpc3RSZWYudmFsdWU/LmZvY3VzKCduZXh0Jyk7XG4gICAgICB9XG4gICAgICBpZiAoIXByb3BzLm11bHRpcGxlKSByZXR1cm47XG4gICAgICBpZiAoWydCYWNrc3BhY2UnLCAnRGVsZXRlJ10uaW5jbHVkZXMoZS5rZXkpKSB7XG4gICAgICAgIGlmIChzZWxlY3Rpb25JbmRleC52YWx1ZSA8IDApIHtcbiAgICAgICAgICBpZiAoZS5rZXkgPT09ICdCYWNrc3BhY2UnICYmICFzZWFyY2gudmFsdWUpIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbkluZGV4LnZhbHVlID0gbGVuZ3RoIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsU2VsZWN0aW9uSW5kZXggPSBzZWxlY3Rpb25JbmRleC52YWx1ZTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRJdGVtID0gbW9kZWwudmFsdWVbc2VsZWN0aW9uSW5kZXgudmFsdWVdO1xuICAgICAgICBpZiAoc2VsZWN0ZWRJdGVtICYmICFzZWxlY3RlZEl0ZW0ucHJvcHMuZGlzYWJsZWQpIHNlbGVjdChzZWxlY3RlZEl0ZW0pO1xuICAgICAgICBzZWxlY3Rpb25JbmRleC52YWx1ZSA9IG9yaWdpbmFsU2VsZWN0aW9uSW5kZXggPj0gbGVuZ3RoIC0gMSA/IGxlbmd0aCAtIDIgOiBvcmlnaW5hbFNlbGVjdGlvbkluZGV4O1xuICAgICAgfVxuICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dMZWZ0Jykge1xuICAgICAgICBpZiAoc2VsZWN0aW9uSW5kZXgudmFsdWUgPCAwICYmIHNlbGVjdGlvblN0YXJ0ID4gMCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBwcmV2ID0gc2VsZWN0aW9uSW5kZXgudmFsdWUgPiAtMSA/IHNlbGVjdGlvbkluZGV4LnZhbHVlIC0gMSA6IGxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChtb2RlbC52YWx1ZVtwcmV2XSkge1xuICAgICAgICAgIHNlbGVjdGlvbkluZGV4LnZhbHVlID0gcHJldjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxlY3Rpb25JbmRleC52YWx1ZSA9IC0xO1xuICAgICAgICAgIHZUZXh0RmllbGRSZWYudmFsdWUuc2V0U2VsZWN0aW9uUmFuZ2Uoc2VhcmNoLnZhbHVlPy5sZW5ndGgsIHNlYXJjaC52YWx1ZT8ubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dSaWdodCcpIHtcbiAgICAgICAgaWYgKHNlbGVjdGlvbkluZGV4LnZhbHVlIDwgMCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBuZXh0ID0gc2VsZWN0aW9uSW5kZXgudmFsdWUgKyAxO1xuICAgICAgICBpZiAobW9kZWwudmFsdWVbbmV4dF0pIHtcbiAgICAgICAgICBzZWxlY3Rpb25JbmRleC52YWx1ZSA9IG5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZWN0aW9uSW5kZXgudmFsdWUgPSAtMTtcbiAgICAgICAgICB2VGV4dEZpZWxkUmVmLnZhbHVlLnNldFNlbGVjdGlvblJhbmdlKDAsIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uSW5wdXQoZSkge1xuICAgICAgc2VhcmNoLnZhbHVlID0gZS50YXJnZXQudmFsdWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHtcbiAgICAgIGlmIChtYXRjaGVzU2VsZWN0b3IodlRleHRGaWVsZFJlZi52YWx1ZSwgJzphdXRvZmlsbCcpIHx8IG1hdGNoZXNTZWxlY3Rvcih2VGV4dEZpZWxkUmVmLnZhbHVlLCAnOi13ZWJraXQtYXV0b2ZpbGwnKSkge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbXMudmFsdWUuZmluZChpdGVtID0+IGl0ZW0udGl0bGUgPT09IGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICBzZWxlY3QoaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25BZnRlckxlYXZlKCkge1xuICAgICAgaWYgKGlzRm9jdXNlZC52YWx1ZSkge1xuICAgICAgICBpc1ByaXN0aW5lLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgdlRleHRGaWVsZFJlZi52YWx1ZT8uZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25Gb2N1c2luKGUpIHtcbiAgICAgIGlzRm9jdXNlZC52YWx1ZSA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgbGlzdEhhc0ZvY3VzLnZhbHVlID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkZvY3Vzb3V0KGUpIHtcbiAgICAgIGxpc3RIYXNGb2N1cy52YWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblVwZGF0ZU1vZGVsVmFsdWUodikge1xuICAgICAgaWYgKHYgPT0gbnVsbCB8fCB2ID09PSAnJyAmJiAhcHJvcHMubXVsdGlwbGUpIG1vZGVsLnZhbHVlID0gW107XG4gICAgfVxuICAgIGNvbnN0IGlzU2VsZWN0aW5nID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAgZnVuY3Rpb24gc2VsZWN0KGl0ZW0pIHtcbiAgICAgIGlmIChwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IG1vZGVsLnZhbHVlLmZpbmRJbmRleChzZWxlY3Rpb24gPT4gcHJvcHMudmFsdWVDb21wYXJhdG9yKHNlbGVjdGlvbi52YWx1ZSwgaXRlbS52YWx1ZSkpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgbW9kZWwudmFsdWUgPSBbLi4ubW9kZWwudmFsdWUsIGl0ZW1dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gWy4uLm1vZGVsLnZhbHVlXTtcbiAgICAgICAgICB2YWx1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIG1vZGVsLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZGVsLnZhbHVlID0gW2l0ZW1dO1xuICAgICAgICBpc1NlbGVjdGluZy52YWx1ZSA9IHRydWU7XG4gICAgICAgIHNlYXJjaC52YWx1ZSA9IGl0ZW0udGl0bGU7XG4gICAgICAgIG1lbnUudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgaXNQcmlzdGluZS52YWx1ZSA9IHRydWU7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IGlzU2VsZWN0aW5nLnZhbHVlID0gZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICB3YXRjaChpc0ZvY3VzZWQsICh2YWwsIG9sZFZhbCkgPT4ge1xuICAgICAgaWYgKHZhbCA9PT0gb2xkVmFsKSByZXR1cm47XG4gICAgICBpZiAodmFsKSB7XG4gICAgICAgIGlzU2VsZWN0aW5nLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgc2VhcmNoLnZhbHVlID0gcHJvcHMubXVsdGlwbGUgPyAnJyA6IFN0cmluZyhtb2RlbC52YWx1ZS5hdCgtMSk/LnByb3BzLnRpdGxlID8/ICcnKTtcbiAgICAgICAgaXNQcmlzdGluZS52YWx1ZSA9IHRydWU7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IGlzU2VsZWN0aW5nLnZhbHVlID0gZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFwcm9wcy5tdWx0aXBsZSAmJiAhc2VhcmNoLnZhbHVlKSBtb2RlbC52YWx1ZSA9IFtdO2Vsc2UgaWYgKGhpZ2hsaWdodEZpcnN0LnZhbHVlICYmICFsaXN0SGFzRm9jdXMudmFsdWUgJiYgIW1vZGVsLnZhbHVlLnNvbWUoX3JlZjIgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IGRpc3BsYXlJdGVtcy52YWx1ZVswXS52YWx1ZTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICBzZWxlY3QoZGlzcGxheUl0ZW1zLnZhbHVlWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBtZW51LnZhbHVlID0gZmFsc2U7XG4gICAgICAgIHNlYXJjaC52YWx1ZSA9ICcnO1xuICAgICAgICBzZWxlY3Rpb25JbmRleC52YWx1ZSA9IC0xO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHdhdGNoKHNlYXJjaCwgdmFsID0+IHtcbiAgICAgIGlmICghaXNGb2N1c2VkLnZhbHVlIHx8IGlzU2VsZWN0aW5nLnZhbHVlKSByZXR1cm47XG4gICAgICBpZiAodmFsKSBtZW51LnZhbHVlID0gdHJ1ZTtcbiAgICAgIGlzUHJpc3RpbmUudmFsdWUgPSAhdmFsO1xuICAgIH0pO1xuICAgIHdhdGNoKG1lbnUsICgpID0+IHtcbiAgICAgIGlmICghcHJvcHMuaGlkZVNlbGVjdGVkICYmIG1lbnUudmFsdWUgJiYgbW9kZWwudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gZGlzcGxheUl0ZW1zLnZhbHVlLmZpbmRJbmRleChpdGVtID0+IG1vZGVsLnZhbHVlLnNvbWUocyA9PiBpdGVtLnZhbHVlID09PSBzLnZhbHVlKSk7XG4gICAgICAgIElOX0JST1dTRVIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaW5kZXggPj0gMCAmJiB2VmlydHVhbFNjcm9sbFJlZi52YWx1ZT8uc2Nyb2xsVG9JbmRleChpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBoYXNDaGlwcyA9ICEhKHByb3BzLmNoaXBzIHx8IHNsb3RzLmNoaXApO1xuICAgICAgY29uc3QgaGFzTGlzdCA9ICEhKCFwcm9wcy5oaWRlTm9EYXRhIHx8IGRpc3BsYXlJdGVtcy52YWx1ZS5sZW5ndGggfHwgc2xvdHNbJ3ByZXBlbmQtaXRlbSddIHx8IHNsb3RzWydhcHBlbmQtaXRlbSddIHx8IHNsb3RzWyduby1kYXRhJ10pO1xuICAgICAgY29uc3QgaXNEaXJ0eSA9IG1vZGVsLnZhbHVlLmxlbmd0aCA+IDA7XG4gICAgICBjb25zdCBbdGV4dEZpZWxkUHJvcHNdID0gVlRleHRGaWVsZC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZUZXh0RmllbGQsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJyZWZcIjogdlRleHRGaWVsZFJlZlxuICAgICAgfSwgdGV4dEZpZWxkUHJvcHMsIHtcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IHNlYXJjaC52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IG9uVXBkYXRlTW9kZWxWYWx1ZSxcbiAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZC52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTpmb2N1c2VkXCI6ICRldmVudCA9PiBpc0ZvY3VzZWQudmFsdWUgPSAkZXZlbnQsXG4gICAgICAgIFwidmFsaWRhdGlvblZhbHVlXCI6IG1vZGVsLmV4dGVybmFsVmFsdWUsXG4gICAgICAgIFwiY291bnRlclZhbHVlXCI6IG1vZGVsLnZhbHVlLmxlbmd0aCxcbiAgICAgICAgXCJkaXJ0eVwiOiBpc0RpcnR5LFxuICAgICAgICBcIm9uSW5wdXRcIjogb25JbnB1dCxcbiAgICAgICAgXCJvbkNoYW5nZVwiOiBvbkNoYW5nZSxcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtYXV0b2NvbXBsZXRlJywgYHYtYXV0b2NvbXBsZXRlLS0ke3Byb3BzLm11bHRpcGxlID8gJ211bHRpcGxlJyA6ICdzaW5nbGUnfWAsIHtcbiAgICAgICAgICAndi1hdXRvY29tcGxldGUtLWFjdGl2ZS1tZW51JzogbWVudS52YWx1ZSxcbiAgICAgICAgICAndi1hdXRvY29tcGxldGUtLWNoaXBzJzogISFwcm9wcy5jaGlwcyxcbiAgICAgICAgICAndi1hdXRvY29tcGxldGUtLXNlbGVjdGlvbi1zbG90JzogISFzbG90cy5zZWxlY3Rpb24sXG4gICAgICAgICAgJ3YtYXV0b2NvbXBsZXRlLS1zZWxlY3RpbmctaW5kZXgnOiBzZWxlY3Rpb25JbmRleC52YWx1ZSA+IC0xXG4gICAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZSxcbiAgICAgICAgXCJyZWFkb25seVwiOiBwcm9wcy5yZWFkb25seSxcbiAgICAgICAgXCJwbGFjZWhvbGRlclwiOiBpc0RpcnR5ID8gdW5kZWZpbmVkIDogcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICAgIFwib25DbGljazpjbGVhclwiOiBvbkNsZWFyLFxuICAgICAgICBcIm9uTW91c2Vkb3duOmNvbnRyb2xcIjogb25Nb3VzZWRvd25Db250cm9sLFxuICAgICAgICBcIm9uS2V5ZG93blwiOiBvbktleWRvd25cbiAgICAgIH0pLCB7XG4gICAgICAgIC4uLnNsb3RzLFxuICAgICAgICBkZWZhdWx0OiAoKSA9PiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKFZNZW51LCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgXCJyZWZcIjogdk1lbnVSZWYsXG4gICAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1lbnUudmFsdWUsXG4gICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBtZW51LnZhbHVlID0gJGV2ZW50LFxuICAgICAgICAgIFwiYWN0aXZhdG9yXCI6IFwicGFyZW50XCIsXG4gICAgICAgICAgXCJjb250ZW50Q2xhc3NcIjogXCJ2LWF1dG9jb21wbGV0ZV9fY29udGVudFwiLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogbWVudURpc2FibGVkLnZhbHVlLFxuICAgICAgICAgIFwiZWFnZXJcIjogcHJvcHMuZWFnZXIsXG4gICAgICAgICAgXCJtYXhIZWlnaHRcIjogMzEwLFxuICAgICAgICAgIFwib3Blbk9uQ2xpY2tcIjogZmFsc2UsXG4gICAgICAgICAgXCJjbG9zZU9uQ29udGVudENsaWNrXCI6IGZhbHNlLFxuICAgICAgICAgIFwidHJhbnNpdGlvblwiOiBwcm9wcy50cmFuc2l0aW9uLFxuICAgICAgICAgIFwib25BZnRlckxlYXZlXCI6IG9uQWZ0ZXJMZWF2ZVxuICAgICAgICB9LCBwcm9wcy5tZW51UHJvcHMpLCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW2hhc0xpc3QgJiYgX2NyZWF0ZVZOb2RlKFZMaXN0LCB7XG4gICAgICAgICAgICBcInJlZlwiOiBsaXN0UmVmLFxuICAgICAgICAgICAgXCJzZWxlY3RlZFwiOiBzZWxlY3RlZFZhbHVlcy52YWx1ZSxcbiAgICAgICAgICAgIFwic2VsZWN0U3RyYXRlZ3lcIjogcHJvcHMubXVsdGlwbGUgPyAnaW5kZXBlbmRlbnQnIDogJ3NpbmdsZS1pbmRlcGVuZGVudCcsXG4gICAgICAgICAgICBcIm9uTW91c2Vkb3duXCI6IGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpLFxuICAgICAgICAgICAgXCJvbktleWRvd25cIjogb25MaXN0S2V5ZG93bixcbiAgICAgICAgICAgIFwib25Gb2N1c2luXCI6IG9uRm9jdXNpbixcbiAgICAgICAgICAgIFwib25Gb2N1c291dFwiOiBvbkZvY3Vzb3V0LFxuICAgICAgICAgICAgXCJvblNjcm9sbFBhc3NpdmVcIjogb25MaXN0U2Nyb2xsLFxuICAgICAgICAgICAgXCJ0YWJpbmRleFwiOiBcIi0xXCIsXG4gICAgICAgICAgICBcImNvbG9yXCI6IHByb3BzLml0ZW1Db2xvciA/PyBwcm9wcy5jb2xvclxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90c1sncHJlcGVuZC1pdGVtJ10/LigpLCAhZGlzcGxheUl0ZW1zLnZhbHVlLmxlbmd0aCAmJiAhcHJvcHMuaGlkZU5vRGF0YSAmJiAoc2xvdHNbJ25vLWRhdGEnXT8uKCkgPz8gX2NyZWF0ZVZOb2RlKFZMaXN0SXRlbSwge1xuICAgICAgICAgICAgICBcInRpdGxlXCI6IHQocHJvcHMubm9EYXRhVGV4dClcbiAgICAgICAgICAgIH0sIG51bGwpKSwgX2NyZWF0ZVZOb2RlKFZWaXJ0dWFsU2Nyb2xsLCB7XG4gICAgICAgICAgICAgIFwicmVmXCI6IHZWaXJ0dWFsU2Nyb2xsUmVmLFxuICAgICAgICAgICAgICBcInJlbmRlcmxlc3NcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgXCJpdGVtc1wiOiBkaXNwbGF5SXRlbXMudmFsdWVcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgZGVmYXVsdDogX3JlZjMgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICBpdGVtUmVmXG4gICAgICAgICAgICAgICAgfSA9IF9yZWYzO1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1Qcm9wcyA9IG1lcmdlUHJvcHMoaXRlbS5wcm9wcywge1xuICAgICAgICAgICAgICAgICAgcmVmOiBpdGVtUmVmLFxuICAgICAgICAgICAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZTogaGlnaGxpZ2h0Rmlyc3QudmFsdWUgJiYgaW5kZXggPT09IDAgPyB0cnVlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgb25DbGljazogKCkgPT4gc2VsZWN0KGl0ZW0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNsb3RzLml0ZW0/Lih7XG4gICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICBwcm9wczogaXRlbVByb3BzXG4gICAgICAgICAgICAgICAgfSkgPz8gX2NyZWF0ZVZOb2RlKFZMaXN0SXRlbSwgaXRlbVByb3BzLCB7XG4gICAgICAgICAgICAgICAgICBwcmVwZW5kOiBfcmVmNCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICB9ID0gX3JlZjQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbcHJvcHMubXVsdGlwbGUgJiYgIXByb3BzLmhpZGVTZWxlY3RlZCA/IF9jcmVhdGVWTm9kZShWQ2hlY2tib3hCdG4sIHtcbiAgICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBpdGVtLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgIFwibW9kZWxWYWx1ZVwiOiBpc1NlbGVjdGVkLFxuICAgICAgICAgICAgICAgICAgICAgIFwicmlwcGxlXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgIFwidGFiaW5kZXhcIjogXCItMVwiXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpIDogdW5kZWZpbmVkLCBpdGVtLnByb3BzLnByZXBlbmRJY29uICYmIF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBpdGVtLnByb3BzLnByZXBlbmRJY29uXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpXSk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgdGl0bGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzUHJpc3RpbmUudmFsdWUgPyBpdGVtLnRpdGxlIDogaGlnaGxpZ2h0UmVzdWx0KGl0ZW0udGl0bGUsIGdldE1hdGNoZXMoaXRlbSk/LnRpdGxlLCBzZWFyY2gudmFsdWU/Lmxlbmd0aCA/PyAwKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIHNsb3RzWydhcHBlbmQtaXRlbSddPy4oKV1cbiAgICAgICAgICB9KV1cbiAgICAgICAgfSksIG1vZGVsLnZhbHVlLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICBmdW5jdGlvbiBvbkNoaXBDbG9zZShlKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgc2VsZWN0KGl0ZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBzbG90UHJvcHMgPSB7XG4gICAgICAgICAgICAnb25DbGljazpjbG9zZSc6IG9uQ2hpcENsb3NlLFxuICAgICAgICAgICAgb25Nb3VzZWRvd24oZSkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbW9kZWxWYWx1ZTogdHJ1ZSxcbiAgICAgICAgICAgICdvblVwZGF0ZTptb2RlbFZhbHVlJzogdW5kZWZpbmVkXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwia2V5XCI6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgICBcImNsYXNzXCI6IFsndi1hdXRvY29tcGxldGVfX3NlbGVjdGlvbicsIGluZGV4ID09PSBzZWxlY3Rpb25JbmRleC52YWx1ZSAmJiBbJ3YtYXV0b2NvbXBsZXRlX19zZWxlY3Rpb24tLXNlbGVjdGVkJywgdGV4dENvbG9yQ2xhc3Nlcy52YWx1ZV1dLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBpbmRleCA9PT0gc2VsZWN0aW9uSW5kZXgudmFsdWUgPyB0ZXh0Q29sb3JTdHlsZXMudmFsdWUgOiB7fVxuICAgICAgICAgIH0sIFtoYXNDaGlwcyA/ICFzbG90cy5jaGlwID8gX2NyZWF0ZVZOb2RlKFZDaGlwLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgICBcImtleVwiOiBcImNoaXBcIixcbiAgICAgICAgICAgIFwiY2xvc2FibGVcIjogcHJvcHMuY2xvc2FibGVDaGlwcyxcbiAgICAgICAgICAgIFwic2l6ZVwiOiBcInNtYWxsXCIsXG4gICAgICAgICAgICBcInRleHRcIjogaXRlbS50aXRsZSxcbiAgICAgICAgICAgIFwiZGlzYWJsZWRcIjogaXRlbS5wcm9wcy5kaXNhYmxlZFxuICAgICAgICAgIH0sIHNsb3RQcm9wcyksIG51bGwpIDogX2NyZWF0ZVZOb2RlKFZEZWZhdWx0c1Byb3ZpZGVyLCB7XG4gICAgICAgICAgICBcImtleVwiOiBcImNoaXAtZGVmYXVsdHNcIixcbiAgICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgICBWQ2hpcDoge1xuICAgICAgICAgICAgICAgIGNsb3NhYmxlOiBwcm9wcy5jbG9zYWJsZUNoaXBzLFxuICAgICAgICAgICAgICAgIHNpemU6ICdzbWFsbCcsXG4gICAgICAgICAgICAgICAgdGV4dDogaXRlbS50aXRsZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmNoaXA/Lih7XG4gICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICBwcm9wczogc2xvdFByb3BzXG4gICAgICAgICAgICB9KV1cbiAgICAgICAgICB9KSA6IHNsb3RzLnNlbGVjdGlvbj8uKHtcbiAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgIH0pID8/IF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtYXV0b2NvbXBsZXRlX19zZWxlY3Rpb24tdGV4dFwiXG4gICAgICAgICAgfSwgW2l0ZW0udGl0bGUsIHByb3BzLm11bHRpcGxlICYmIGluZGV4IDwgbW9kZWwudmFsdWUubGVuZ3RoIC0gMSAmJiBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWF1dG9jb21wbGV0ZV9fc2VsZWN0aW9uLWNvbW1hXCJcbiAgICAgICAgICB9LCBbX2NyZWF0ZVRleHRWTm9kZShcIixcIildKV0pXSk7XG4gICAgICAgIH0pXSksXG4gICAgICAgICdhcHBlbmQtaW5uZXInOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Nsb3RzWydhcHBlbmQtaW5uZXInXT8uKC4uLmFyZ3MpLCBwcm9wcy5tZW51SWNvbiA/IF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtYXV0b2NvbXBsZXRlX19tZW51LWljb25cIixcbiAgICAgICAgICAgIFwiaWNvblwiOiBwcm9wcy5tZW51SWNvbixcbiAgICAgICAgICAgIFwib25Nb3VzZWRvd25cIjogb25Nb3VzZWRvd25NZW51SWNvbixcbiAgICAgICAgICAgIFwib25DbGlja1wiOiBub29wLFxuICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IHQobGFiZWwudmFsdWUpLFxuICAgICAgICAgICAgXCJ0aXRsZVwiOiB0KGxhYmVsLnZhbHVlKVxuICAgICAgICAgIH0sIG51bGwpIDogdW5kZWZpbmVkXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3J3YXJkUmVmcyh7XG4gICAgICBpc0ZvY3VzZWQsXG4gICAgICBpc1ByaXN0aW5lLFxuICAgICAgbWVudSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGZpbHRlcmVkSXRlbXMsXG4gICAgICBzZWxlY3RcbiAgICB9LCB2VGV4dEZpZWxkUmVmKTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQXV0b2NvbXBsZXRlLm1qcy5tYXAiLCJpbXBvcnQgeyB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHZTaG93IGFzIF92U2hvdywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZCYWRnZS5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkljb24gfSBmcm9tIFwiLi4vVkljb24vaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VCYWNrZ3JvdW5kQ29sb3IsIHVzZVRleHRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUxvY2F0aW9uUHJvcHMsIHVzZUxvY2F0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2F0aW9uLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdW5kZWRQcm9wcywgdXNlUm91bmRlZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCB1c2VUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjtcbmltcG9ydCB7IG1ha2VUcmFuc2l0aW9uUHJvcHMsIE1heWJlVHJhbnNpdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90cmFuc2l0aW9uLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHBpY2ssIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZCYWRnZVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYm9yZGVyZWQ6IEJvb2xlYW4sXG4gIGNvbG9yOiBTdHJpbmcsXG4gIGNvbnRlbnQ6IFtOdW1iZXIsIFN0cmluZ10sXG4gIGRvdDogQm9vbGVhbixcbiAgZmxvYXRpbmc6IEJvb2xlYW4sXG4gIGljb246IEljb25WYWx1ZSxcbiAgaW5saW5lOiBCb29sZWFuLFxuICBsYWJlbDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkuYmFkZ2UnXG4gIH0sXG4gIG1heDogW051bWJlciwgU3RyaW5nXSxcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBvZmZzZXRYOiBbTnVtYmVyLCBTdHJpbmddLFxuICBvZmZzZXRZOiBbTnVtYmVyLCBTdHJpbmddLFxuICB0ZXh0Q29sb3I6IFN0cmluZyxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VMb2NhdGlvblByb3BzKHtcbiAgICBsb2NhdGlvbjogJ3RvcCBlbmQnXG4gIH0pLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpLFxuICAuLi5tYWtlVHJhbnNpdGlvblByb3BzKHtcbiAgICB0cmFuc2l0aW9uOiAnc2NhbGUtcm90YXRlLXRyYW5zaXRpb24nXG4gIH0pXG59LCAnVkJhZGdlJyk7XG5leHBvcnQgY29uc3QgVkJhZGdlID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZCYWRnZScsXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiBtYWtlVkJhZGdlUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIGN0eCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHRvUmVmKHByb3BzLCAnY29sb3InKSk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgdFxuICAgIH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcih0b1JlZihwcm9wcywgJ3RleHRDb2xvcicpKTtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gdXNlVGhlbWUoKTtcbiAgICBjb25zdCB7XG4gICAgICBsb2NhdGlvblN0eWxlc1xuICAgIH0gPSB1c2VMb2NhdGlvbihwcm9wcywgdHJ1ZSwgc2lkZSA9PiB7XG4gICAgICBjb25zdCBiYXNlID0gcHJvcHMuZmxvYXRpbmcgPyBwcm9wcy5kb3QgPyAyIDogNCA6IHByb3BzLmRvdCA/IDggOiAxMjtcbiAgICAgIHJldHVybiBiYXNlICsgKFsndG9wJywgJ2JvdHRvbSddLmluY2x1ZGVzKHNpZGUpID8gKyhwcm9wcy5vZmZzZXRZID8/IDApIDogWydsZWZ0JywgJ3JpZ2h0J10uaW5jbHVkZXMoc2lkZSkgPyArKHByb3BzLm9mZnNldFggPz8gMCkgOiAwKTtcbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBOdW1iZXIocHJvcHMuY29udGVudCk7XG4gICAgICBjb25zdCBjb250ZW50ID0gIXByb3BzLm1heCB8fCBpc05hTih2YWx1ZSkgPyBwcm9wcy5jb250ZW50IDogdmFsdWUgPD0gK3Byb3BzLm1heCA/IHZhbHVlIDogYCR7cHJvcHMubWF4fStgO1xuICAgICAgY29uc3QgW2JhZGdlQXR0cnMsIGF0dHJzXSA9IHBpY2soY3R4LmF0dHJzLCBbJ2FyaWEtYXRvbWljJywgJ2FyaWEtbGFiZWwnLCAnYXJpYS1saXZlJywgJ3JvbGUnLCAndGl0bGUnXSk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywgX21lcmdlUHJvcHMoe1xuICAgICAgICBcImNsYXNzXCI6IFsndi1iYWRnZScsIHtcbiAgICAgICAgICAndi1iYWRnZS0tYm9yZGVyZWQnOiBwcm9wcy5ib3JkZXJlZCxcbiAgICAgICAgICAndi1iYWRnZS0tZG90JzogcHJvcHMuZG90LFxuICAgICAgICAgICd2LWJhZGdlLS1mbG9hdGluZyc6IHByb3BzLmZsb2F0aW5nLFxuICAgICAgICAgICd2LWJhZGdlLS1pbmxpbmUnOiBwcm9wcy5pbmxpbmVcbiAgICAgICAgfSwgcHJvcHMuY2xhc3NdXG4gICAgICB9LCBhdHRycywge1xuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9KSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1iYWRnZV9fd3JhcHBlclwiXG4gICAgICAgIH0sIFtjdHguc2xvdHMuZGVmYXVsdD8uKCksIF9jcmVhdGVWTm9kZShNYXliZVRyYW5zaXRpb24sIHtcbiAgICAgICAgICBcInRyYW5zaXRpb25cIjogcHJvcHMudHJhbnNpdGlvblxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW193aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogWyd2LWJhZGdlX19iYWRnZScsIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgYmFja2dyb3VuZENvbG9yQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHRleHRDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBbYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlLCB0ZXh0Q29sb3JTdHlsZXMudmFsdWUsIHByb3BzLmlubGluZSA/IHt9IDogbG9jYXRpb25TdHlsZXMudmFsdWVdLFxuICAgICAgICAgICAgXCJhcmlhLWF0b21pY1wiOiBcInRydWVcIixcbiAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0KHByb3BzLmxhYmVsLCB2YWx1ZSksXG4gICAgICAgICAgICBcImFyaWEtbGl2ZVwiOiBcInBvbGl0ZVwiLFxuICAgICAgICAgICAgXCJyb2xlXCI6IFwic3RhdHVzXCJcbiAgICAgICAgICB9LCBiYWRnZUF0dHJzKSwgW3Byb3BzLmRvdCA/IHVuZGVmaW5lZCA6IGN0eC5zbG90cy5iYWRnZSA/IGN0eC5zbG90cy5iYWRnZT8uKCkgOiBwcm9wcy5pY29uID8gX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgICBcImljb25cIjogcHJvcHMuaWNvblxuICAgICAgICAgIH0sIG51bGwpIDogY29udGVudF0pLCBbW192U2hvdywgcHJvcHMubW9kZWxWYWx1ZV1dKV1cbiAgICAgICAgfSldKV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQmFkZ2UubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZCYW5uZXJBY3Rpb25zUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjb2xvcjogU3RyaW5nLFxuICBkZW5zaXR5OiBTdHJpbmcsXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpXG59LCAnVkJhbm5lckFjdGlvbnMnKTtcbmV4cG9ydCBjb25zdCBWQmFubmVyQWN0aW9ucyA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQmFubmVyQWN0aW9ucycsXG4gIHByb3BzOiBtYWtlVkJhbm5lckFjdGlvbnNQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIHByb3ZpZGVEZWZhdWx0cyh7XG4gICAgICBWQnRuOiB7XG4gICAgICAgIGNvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgZGVuc2l0eTogcHJvcHMuZGVuc2l0eSxcbiAgICAgICAgdmFyaWFudDogJ3RleHQnXG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1iYW5uZXItYWN0aW9ucycsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKCldKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZCYW5uZXJBY3Rpb25zLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBWQmFubmVyVGV4dCA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3YtYmFubmVyLXRleHQnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZCYW5uZXJUZXh0Lm1qcy5tYXAiLCJpbXBvcnQgeyByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkJhbm5lci5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkJhbm5lckFjdGlvbnMgfSBmcm9tIFwiLi9WQmFubmVyQWN0aW9ucy5tanNcIjtcbmltcG9ydCB7IFZCYW5uZXJUZXh0IH0gZnJvbSBcIi4vVkJhbm5lclRleHQubWpzXCI7XG5pbXBvcnQgeyBWQXZhdGFyIH0gZnJvbSBcIi4uL1ZBdmF0YXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VCb3JkZXJQcm9wcywgdXNlQm9yZGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2JvcmRlci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBwcm92aWRlRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzLCB1c2VEZW5zaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGltZW5zaW9uUHJvcHMsIHVzZURpbWVuc2lvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaW1lbnNpb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlRGlzcGxheSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaXNwbGF5Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUxvY2F0aW9uUHJvcHMsIHVzZUxvY2F0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2F0aW9uLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVBvc2l0aW9uUHJvcHMsIHVzZVBvc2l0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Bvc2l0aW9uLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdW5kZWRQcm9wcywgdXNlUm91bmRlZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkJhbm5lclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYXZhdGFyOiBTdHJpbmcsXG4gIGNvbG9yOiBTdHJpbmcsXG4gIGljb246IEljb25WYWx1ZSxcbiAgbGluZXM6IFN0cmluZyxcbiAgc3RhY2tlZDogQm9vbGVhbixcbiAgc3RpY2t5OiBCb29sZWFuLFxuICB0ZXh0OiBTdHJpbmcsXG4gIC4uLm1ha2VCb3JkZXJQcm9wcygpLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURlbnNpdHlQcm9wcygpLFxuICAuLi5tYWtlRGltZW5zaW9uUHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKCksXG4gIC4uLm1ha2VMb2NhdGlvblByb3BzKCksXG4gIC4uLm1ha2VQb3NpdGlvblByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWQmFubmVyJyk7XG5leHBvcnQgY29uc3QgVkJhbm5lciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQmFubmVyJyxcbiAgcHJvcHM6IG1ha2VWQmFubmVyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBib3JkZXJDbGFzc2VzXG4gICAgfSA9IHVzZUJvcmRlcihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGVuc2l0eUNsYXNzZXNcbiAgICB9ID0gdXNlRGVuc2l0eShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgbW9iaWxlXG4gICAgfSA9IHVzZURpc3BsYXkoKTtcbiAgICBjb25zdCB7XG4gICAgICBkaW1lbnNpb25TdHlsZXNcbiAgICB9ID0gdXNlRGltZW5zaW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgbG9jYXRpb25TdHlsZXNcbiAgICB9ID0gdXNlTG9jYXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHBvc2l0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VQb3NpdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3QgY29sb3IgPSB0b1JlZihwcm9wcywgJ2NvbG9yJyk7XG4gICAgY29uc3QgZGVuc2l0eSA9IHRvUmVmKHByb3BzLCAnZGVuc2l0eScpO1xuICAgIHByb3ZpZGVEZWZhdWx0cyh7XG4gICAgICBWQmFubmVyQWN0aW9uczoge1xuICAgICAgICBjb2xvcixcbiAgICAgICAgZGVuc2l0eVxuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBoYXNUZXh0ID0gISEocHJvcHMudGV4dCB8fCBzbG90cy50ZXh0KTtcbiAgICAgIGNvbnN0IGhhc1ByZXBlbmRNZWRpYSA9ICEhKHByb3BzLmF2YXRhciB8fCBwcm9wcy5pY29uKTtcbiAgICAgIGNvbnN0IGhhc1ByZXBlbmQgPSAhIShoYXNQcmVwZW5kTWVkaWEgfHwgc2xvdHMucHJlcGVuZCk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1iYW5uZXInLCB7XG4gICAgICAgICAgJ3YtYmFubmVyLS1zdGFja2VkJzogcHJvcHMuc3RhY2tlZCB8fCBtb2JpbGUudmFsdWUsXG4gICAgICAgICAgJ3YtYmFubmVyLS1zdGlja3knOiBwcm9wcy5zdGlja3ksXG4gICAgICAgICAgW2B2LWJhbm5lci0tJHtwcm9wcy5saW5lc30tbGluZWBdOiAhIXByb3BzLmxpbmVzXG4gICAgICAgIH0sIGJvcmRlckNsYXNzZXMudmFsdWUsIGRlbnNpdHlDbGFzc2VzLnZhbHVlLCBlbGV2YXRpb25DbGFzc2VzLnZhbHVlLCBwb3NpdGlvbkNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCB0aGVtZUNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbZGltZW5zaW9uU3R5bGVzLnZhbHVlLCBsb2NhdGlvblN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdLFxuICAgICAgICBcInJvbGVcIjogXCJiYW5uZXJcIlxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbaGFzUHJlcGVuZCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZFwiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWJhbm5lcl9fcHJlcGVuZFwiXG4gICAgICAgIH0sIFshc2xvdHMucHJlcGVuZCA/IF9jcmVhdGVWTm9kZShWQXZhdGFyLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kLWF2YXRhclwiLFxuICAgICAgICAgIFwiY29sb3JcIjogY29sb3IudmFsdWUsXG4gICAgICAgICAgXCJkZW5zaXR5XCI6IGRlbnNpdHkudmFsdWUsXG4gICAgICAgICAgXCJpY29uXCI6IHByb3BzLmljb24sXG4gICAgICAgICAgXCJpbWFnZVwiOiBwcm9wcy5hdmF0YXJcbiAgICAgICAgfSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICBcImtleVwiOiBcInByZXBlbmQtZGVmYXVsdHNcIixcbiAgICAgICAgICBcImRpc2FibGVkXCI6ICFoYXNQcmVwZW5kTWVkaWEsXG4gICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICBWQXZhdGFyOiB7XG4gICAgICAgICAgICAgIGNvbG9yOiBjb2xvci52YWx1ZSxcbiAgICAgICAgICAgICAgZGVuc2l0eTogZGVuc2l0eS52YWx1ZSxcbiAgICAgICAgICAgICAgaWNvbjogcHJvcHMuaWNvbixcbiAgICAgICAgICAgICAgaW1hZ2U6IHByb3BzLmF2YXRhclxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgc2xvdHMucHJlcGVuZCldKSwgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1iYW5uZXJfX2NvbnRlbnRcIlxuICAgICAgICB9LCBbaGFzVGV4dCAmJiBfY3JlYXRlVk5vZGUoVkJhbm5lclRleHQsIHtcbiAgICAgICAgICBcImtleVwiOiBcInRleHRcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLnRleHQ/LigpID8/IHByb3BzLnRleHRdXG4gICAgICAgIH0pLCBzbG90cy5kZWZhdWx0Py4oKV0pLCBzbG90cy5hY3Rpb25zICYmIF9jcmVhdGVWTm9kZShWQmFubmVyQWN0aW9ucywge1xuICAgICAgICAgIFwia2V5XCI6IFwiYWN0aW9uc1wiXG4gICAgICAgIH0sIHNsb3RzLmFjdGlvbnMpXVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkJhbm5lci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZCb3R0b21OYXZpZ2F0aW9uLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQnRuVG9nZ2xlU3ltYm9sIH0gZnJvbSBcIi4uL1ZCdG5Ub2dnbGUvVkJ0blRvZ2dsZS5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VCb3JkZXJQcm9wcywgdXNlQm9yZGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2JvcmRlci5tanNcIjtcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBwcm92aWRlRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzLCB1c2VEZW5zaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBtYWtlRWxldmF0aW9uUHJvcHMsIHVzZUVsZXZhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzXCI7XG5pbXBvcnQgeyBtYWtlR3JvdXBQcm9wcywgdXNlR3JvdXAgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZ3JvdXAubWpzXCI7XG5pbXBvcnQgeyBtYWtlTGF5b3V0SXRlbVByb3BzLCB1c2VMYXlvdXRJdGVtIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xheW91dC5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IHVzZVNzckJvb3QgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc3NyQm9vdC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgdXNlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQsIGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZCb3R0b21OYXZpZ2F0aW9uUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBiZ0NvbG9yOiBTdHJpbmcsXG4gIGNvbG9yOiBTdHJpbmcsXG4gIGdyb3c6IEJvb2xlYW4sXG4gIG1vZGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgdmFsaWRhdG9yOiB2ID0+ICF2IHx8IFsnaG9yaXpvbnRhbCcsICdzaGlmdCddLmluY2x1ZGVzKHYpXG4gIH0sXG4gIGhlaWdodDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogNTZcbiAgfSxcbiAgYWN0aXZlOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIC4uLm1ha2VCb3JkZXJQcm9wcygpLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURlbnNpdHlQcm9wcygpLFxuICAuLi5tYWtlRWxldmF0aW9uUHJvcHMoKSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlTGF5b3V0SXRlbVByb3BzKHtcbiAgICBuYW1lOiAnYm90dG9tLW5hdmlnYXRpb24nXG4gIH0pLFxuICAuLi5tYWtlVGFnUHJvcHMoe1xuICAgIHRhZzogJ2hlYWRlcidcbiAgfSksXG4gIC4uLm1ha2VHcm91cFByb3BzKHtcbiAgICBtb2RlbFZhbHVlOiB0cnVlLFxuICAgIHNlbGVjdGVkQ2xhc3M6ICd2LWJ0bi0tc2VsZWN0ZWQnXG4gIH0pLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpXG59LCAnVkJvdHRvbU5hdmlnYXRpb24nKTtcbmV4cG9ydCBjb25zdCBWQm90dG9tTmF2aWdhdGlvbiA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQm90dG9tTmF2aWdhdGlvbicsXG4gIHByb3BzOiBtYWtlVkJvdHRvbU5hdmlnYXRpb25Qcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gdXNlVGhlbWUoKTtcbiAgICBjb25zdCB7XG4gICAgICBib3JkZXJDbGFzc2VzXG4gICAgfSA9IHVzZUJvcmRlcihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VCYWNrZ3JvdW5kQ29sb3IodG9SZWYocHJvcHMsICdiZ0NvbG9yJykpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbnNpdHlDbGFzc2VzXG4gICAgfSA9IHVzZURlbnNpdHkocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbkNsYXNzZXNcbiAgICB9ID0gdXNlRWxldmF0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBzc3JCb290U3R5bGVzXG4gICAgfSA9IHVzZVNzckJvb3QoKTtcbiAgICBjb25zdCBoZWlnaHQgPSBjb21wdXRlZCgoKSA9PiBOdW1iZXIocHJvcHMuaGVpZ2h0KSAtIChwcm9wcy5kZW5zaXR5ID09PSAnY29tZm9ydGFibGUnID8gOCA6IDApIC0gKHByb3BzLmRlbnNpdHkgPT09ICdjb21wYWN0JyA/IDE2IDogMCkpO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gdG9SZWYocHJvcHMsICdhY3RpdmUnKTtcbiAgICBjb25zdCB7XG4gICAgICBsYXlvdXRJdGVtU3R5bGVzXG4gICAgfSA9IHVzZUxheW91dEl0ZW0oe1xuICAgICAgaWQ6IHByb3BzLm5hbWUsXG4gICAgICBvcmRlcjogY29tcHV0ZWQoKCkgPT4gcGFyc2VJbnQocHJvcHMub3JkZXIsIDEwKSksXG4gICAgICBwb3NpdGlvbjogY29tcHV0ZWQoKCkgPT4gJ2JvdHRvbScpLFxuICAgICAgbGF5b3V0U2l6ZTogY29tcHV0ZWQoKCkgPT4gaXNBY3RpdmUudmFsdWUgPyBoZWlnaHQudmFsdWUgOiAwKSxcbiAgICAgIGVsZW1lbnRTaXplOiBoZWlnaHQsXG4gICAgICBhY3RpdmU6IGlzQWN0aXZlLFxuICAgICAgYWJzb2x1dGU6IHRvUmVmKHByb3BzLCAnYWJzb2x1dGUnKVxuICAgIH0pO1xuICAgIHVzZUdyb3VwKHByb3BzLCBWQnRuVG9nZ2xlU3ltYm9sKTtcbiAgICBwcm92aWRlRGVmYXVsdHMoe1xuICAgICAgVkJ0bjoge1xuICAgICAgICBjb2xvcjogdG9SZWYocHJvcHMsICdjb2xvcicpLFxuICAgICAgICBkZW5zaXR5OiB0b1JlZihwcm9wcywgJ2RlbnNpdHknKSxcbiAgICAgICAgc3RhY2tlZDogY29tcHV0ZWQoKCkgPT4gcHJvcHMubW9kZSAhPT0gJ2hvcml6b250YWwnKSxcbiAgICAgICAgdmFyaWFudDogJ3RleHQnXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgc2NvcGVkOiB0cnVlXG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWJvdHRvbS1uYXZpZ2F0aW9uJywge1xuICAgICAgICAgICd2LWJvdHRvbS1uYXZpZ2F0aW9uLS1hY3RpdmUnOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgICAndi1ib3R0b20tbmF2aWdhdGlvbi0tZ3Jvdyc6IHByb3BzLmdyb3csXG4gICAgICAgICAgJ3YtYm90dG9tLW5hdmlnYXRpb24tLXNoaWZ0JzogcHJvcHMubW9kZSA9PT0gJ3NoaWZ0J1xuICAgICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIGJvcmRlckNsYXNzZXMudmFsdWUsIGRlbnNpdHlDbGFzc2VzLnZhbHVlLCBlbGV2YXRpb25DbGFzc2VzLnZhbHVlLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFtiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWUsIGxheW91dEl0ZW1TdHlsZXMudmFsdWUsIHtcbiAgICAgICAgICBoZWlnaHQ6IGNvbnZlcnRUb1VuaXQoaGVpZ2h0LnZhbHVlKSxcbiAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGVZKCR7Y29udmVydFRvVW5pdCghaXNBY3RpdmUudmFsdWUgPyAxMDAgOiAwLCAnJScpfSlgXG4gICAgICAgIH0sIHNzckJvb3RTdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMuZGVmYXVsdCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWJvdHRvbS1uYXZpZ2F0aW9uX19jb250ZW50XCJcbiAgICAgICAgfSwgW3Nsb3RzLmRlZmF1bHQoKV0pXVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZCb3R0b21OYXZpZ2F0aW9uLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWQnJlYWRjcnVtYnNEaXZpZGVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBkaXZpZGVyOiBbTnVtYmVyLCBTdHJpbmddLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKVxufSwgJ1ZCcmVhZGNydW1ic0RpdmlkZXInKTtcbmV4cG9ydCBjb25zdCBWQnJlYWRjcnVtYnNEaXZpZGVyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZCcmVhZGNydW1ic0RpdmlkZXInLFxuICBwcm9wczogbWFrZVZCcmVhZGNydW1ic0RpdmlkZXJQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJsaVwiLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1icmVhZGNydW1icy1kaXZpZGVyJywgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIFtzbG90cz8uZGVmYXVsdD8uKCkgPz8gcHJvcHMuZGl2aWRlcl0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkJyZWFkY3J1bWJzRGl2aWRlci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVRleHRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91dGVyUHJvcHMsIHVzZUxpbmsgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91dGVyLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWQnJlYWRjcnVtYnNJdGVtUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhY3RpdmU6IEJvb2xlYW4sXG4gIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFjdGl2ZUNvbG9yOiBTdHJpbmcsXG4gIGNvbG9yOiBTdHJpbmcsXG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICB0aXRsZTogU3RyaW5nLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVJvdXRlclByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcyh7XG4gICAgdGFnOiAnbGknXG4gIH0pXG59LCAnVkJyZWFkY3J1bWJzSXRlbScpO1xuZXhwb3J0IGNvbnN0IFZCcmVhZGNydW1ic0l0ZW0gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkJyZWFkY3J1bWJzSXRlbScsXG4gIHByb3BzOiBtYWtlVkJyZWFkY3J1bWJzSXRlbVByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzLFxuICAgICAgYXR0cnNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBsaW5rID0gdXNlTGluayhwcm9wcywgYXR0cnMpO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuYWN0aXZlIHx8IGxpbmsuaXNBY3RpdmU/LnZhbHVlKTtcbiAgICBjb25zdCBjb2xvciA9IGNvbXB1dGVkKCgpID0+IGlzQWN0aXZlLnZhbHVlID8gcHJvcHMuYWN0aXZlQ29sb3IgOiBwcm9wcy5jb2xvcik7XG4gICAgY29uc3Qge1xuICAgICAgdGV4dENvbG9yQ2xhc3NlcyxcbiAgICAgIHRleHRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VUZXh0Q29sb3IoY29sb3IpO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1icmVhZGNydW1icy1pdGVtJywge1xuICAgICAgICAgICd2LWJyZWFkY3J1bWJzLWl0ZW0tLWFjdGl2ZSc6IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICAgICd2LWJyZWFkY3J1bWJzLWl0ZW0tLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgW2Ake3Byb3BzLmFjdGl2ZUNsYXNzfWBdOiBpc0FjdGl2ZS52YWx1ZSAmJiBwcm9wcy5hY3RpdmVDbGFzc1xuICAgICAgICB9LCB0ZXh0Q29sb3JDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW3RleHRDb2xvclN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdLFxuICAgICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZS52YWx1ZSA/ICdwYWdlJyA6IHVuZGVmaW5lZFxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbIWxpbmsuaXNMaW5rLnZhbHVlID8gc2xvdHMuZGVmYXVsdD8uKCkgPz8gcHJvcHMudGl0bGUgOiBfY3JlYXRlVk5vZGUoXCJhXCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1icmVhZGNydW1icy1pdGVtLS1saW5rXCIsXG4gICAgICAgICAgXCJocmVmXCI6IGxpbmsuaHJlZi52YWx1ZSxcbiAgICAgICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZS52YWx1ZSA/ICdwYWdlJyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBcIm9uQ2xpY2tcIjogbGluay5uYXZpZ2F0ZVxuICAgICAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKCkgPz8gcHJvcHMudGl0bGVdKV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQnJlYWRjcnVtYnNJdGVtLm1qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQnJlYWRjcnVtYnMuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZCcmVhZGNydW1ic0RpdmlkZXIgfSBmcm9tIFwiLi9WQnJlYWRjcnVtYnNEaXZpZGVyLm1qc1wiO1xuaW1wb3J0IHsgVkJyZWFkY3J1bWJzSXRlbSB9IGZyb20gXCIuL1ZCcmVhZGNydW1ic0l0ZW0ubWpzXCI7XG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZJY29uIH0gZnJvbSBcIi4uL1ZJY29uL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQmFja2dyb3VuZENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjtcbmltcG9ydCB7IG1ha2VEZW5zaXR5UHJvcHMsIHVzZURlbnNpdHkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVuc2l0eS5tanNcIjtcbmltcG9ydCB7IEljb25WYWx1ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZCcmVhZGNydW1ic1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYWN0aXZlQ29sb3I6IFN0cmluZyxcbiAgYmdDb2xvcjogU3RyaW5nLFxuICBjb2xvcjogU3RyaW5nLFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgZGl2aWRlcjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnLydcbiAgfSxcbiAgaWNvbjogSWNvblZhbHVlLFxuICBpdGVtczoge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGVuc2l0eVByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKHtcbiAgICB0YWc6ICd1bCdcbiAgfSlcbn0sICdWQnJlYWRjcnVtYnMnKTtcbmV4cG9ydCBjb25zdCBWQnJlYWRjcnVtYnMgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkJyZWFkY3J1bWJzJyxcbiAgcHJvcHM6IG1ha2VWQnJlYWRjcnVtYnNQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHRvUmVmKHByb3BzLCAnYmdDb2xvcicpKTtcbiAgICBjb25zdCB7XG4gICAgICBkZW5zaXR5Q2xhc3Nlc1xuICAgIH0gPSB1c2VEZW5zaXR5KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzKTtcbiAgICBwcm92aWRlRGVmYXVsdHMoe1xuICAgICAgVkJyZWFkY3J1bWJzRGl2aWRlcjoge1xuICAgICAgICBkaXZpZGVyOiB0b1JlZihwcm9wcywgJ2RpdmlkZXInKVxuICAgICAgfSxcbiAgICAgIFZCcmVhZGNydW1ic0l0ZW06IHtcbiAgICAgICAgYWN0aXZlQ2xhc3M6IHRvUmVmKHByb3BzLCAnYWN0aXZlQ2xhc3MnKSxcbiAgICAgICAgYWN0aXZlQ29sb3I6IHRvUmVmKHByb3BzLCAnYWN0aXZlQ29sb3InKSxcbiAgICAgICAgY29sb3I6IHRvUmVmKHByb3BzLCAnY29sb3InKSxcbiAgICAgICAgZGlzYWJsZWQ6IHRvUmVmKHByb3BzLCAnZGlzYWJsZWQnKVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGl0ZW1zID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuaXRlbXMubWFwKGl0ZW0gPT4ge1xuICAgICAgcmV0dXJuIHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJyA/IHtcbiAgICAgICAgaXRlbToge1xuICAgICAgICAgIHRpdGxlOiBpdGVtXG4gICAgICAgIH0sXG4gICAgICAgIHJhdzogaXRlbVxuICAgICAgfSA6IHtcbiAgICAgICAgaXRlbSxcbiAgICAgICAgcmF3OiBpdGVtXG4gICAgICB9O1xuICAgIH0pKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaGFzUHJlcGVuZCA9ICEhKHNsb3RzLnByZXBlbmQgfHwgcHJvcHMuaWNvbik7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1icmVhZGNydW1icycsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIGRlbnNpdHlDbGFzc2VzLnZhbHVlLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFtiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbaGFzUHJlcGVuZCAmJiBfY3JlYXRlVk5vZGUoXCJsaVwiLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmVwZW5kXCIsXG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtYnJlYWRjcnVtYnNfX3ByZXBlbmRcIlxuICAgICAgICB9LCBbIXNsb3RzLnByZXBlbmQgPyBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICBcImtleVwiOiBcInByZXBlbmQtaWNvblwiLFxuICAgICAgICAgIFwic3RhcnRcIjogdHJ1ZSxcbiAgICAgICAgICBcImljb25cIjogcHJvcHMuaWNvblxuICAgICAgICB9LCBudWxsKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgIFwia2V5XCI6IFwicHJlcGVuZC1kZWZhdWx0c1wiLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogIXByb3BzLmljb24sXG4gICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICBWSWNvbjoge1xuICAgICAgICAgICAgICBpY29uOiBwcm9wcy5pY29uLFxuICAgICAgICAgICAgICBzdGFydDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgc2xvdHMucHJlcGVuZCldKSwgaXRlbXMudmFsdWUubWFwKChfcmVmMiwgaW5kZXgsIGFycmF5KSA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICByYXdcbiAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtfY3JlYXRlVk5vZGUoVkJyZWFkY3J1bWJzSXRlbSwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgICAgXCJrZXlcIjogaXRlbS50aXRsZSxcbiAgICAgICAgICAgIFwiZGlzYWJsZWRcIjogaW5kZXggPj0gYXJyYXkubGVuZ3RoIC0gMVxuICAgICAgICAgIH0sIGl0ZW0pLCB7XG4gICAgICAgICAgICBkZWZhdWx0OiBzbG90cy50aXRsZSA/ICgpID0+IHNsb3RzLnRpdGxlPy4oe1xuICAgICAgICAgICAgICBpdGVtOiByYXcsXG4gICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9KSA6IHVuZGVmaW5lZFxuICAgICAgICAgIH0pLCBpbmRleCA8IGFycmF5Lmxlbmd0aCAtIDEgJiYgX2NyZWF0ZVZOb2RlKFZCcmVhZGNydW1ic0RpdmlkZXIsIG51bGwsIHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHNsb3RzLmRpdmlkZXIgPyAoKSA9PiBzbG90cy5kaXZpZGVyPy4oe1xuICAgICAgICAgICAgICBpdGVtOiByYXcsXG4gICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9KSA6IHVuZGVmaW5lZFxuICAgICAgICAgIH0pXSk7XG4gICAgICAgIH0pLCBzbG90cy5kZWZhdWx0Py4oKV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQnJlYWRjcnVtYnMubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZDYXJkQWN0aW9ucyA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQ2FyZEFjdGlvbnMnLFxuICBwcm9wczogbWFrZUNvbXBvbmVudFByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZCdG46IHtcbiAgICAgICAgdmFyaWFudDogJ3RleHQnXG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1jYXJkLWFjdGlvbnMnLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgfSwgW3Nsb3RzLmRlZmF1bHQ/LigpXSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ2FyZEFjdGlvbnMubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZDYXJkU3VidGl0bGUgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWNhcmQtc3VidGl0bGUnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDYXJkU3VidGl0bGUubWpzLm1hcCIsIi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZDYXJkVGl0bGUgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWNhcmQtdGl0bGUnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDYXJkVGl0bGUubWpzLm1hcCIsImltcG9ydCB7IHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZDYXJkU3VidGl0bGUgfSBmcm9tIFwiLi9WQ2FyZFN1YnRpdGxlLm1qc1wiO1xuaW1wb3J0IHsgVkNhcmRUaXRsZSB9IGZyb20gXCIuL1ZDYXJkVGl0bGUubWpzXCI7XG5pbXBvcnQgeyBWQXZhdGFyIH0gZnJvbSBcIi4uL1ZBdmF0YXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlQ2FyZEl0ZW1Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGFwcGVuZEF2YXRhcjogU3RyaW5nLFxuICBhcHBlbmRJY29uOiBJY29uVmFsdWUsXG4gIHByZXBlbmRBdmF0YXI6IFN0cmluZyxcbiAgcHJlcGVuZEljb246IEljb25WYWx1ZSxcbiAgc3VidGl0bGU6IFN0cmluZyxcbiAgdGl0bGU6IFN0cmluZyxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKVxufSwgJ1ZDYXJkSXRlbScpO1xuZXhwb3J0IGNvbnN0IFZDYXJkSXRlbSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQ2FyZEl0ZW0nLFxuICBwcm9wczogbWFrZUNhcmRJdGVtUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaGFzUHJlcGVuZE1lZGlhID0gISEocHJvcHMucHJlcGVuZEF2YXRhciB8fCBwcm9wcy5wcmVwZW5kSWNvbik7XG4gICAgICBjb25zdCBoYXNQcmVwZW5kID0gISEoaGFzUHJlcGVuZE1lZGlhIHx8IHNsb3RzLnByZXBlbmQpO1xuICAgICAgY29uc3QgaGFzQXBwZW5kTWVkaWEgPSAhIShwcm9wcy5hcHBlbmRBdmF0YXIgfHwgcHJvcHMuYXBwZW5kSWNvbik7XG4gICAgICBjb25zdCBoYXNBcHBlbmQgPSAhIShoYXNBcHBlbmRNZWRpYSB8fCBzbG90cy5hcHBlbmQpO1xuICAgICAgY29uc3QgaGFzVGl0bGUgPSAhIShwcm9wcy50aXRsZSB8fCBzbG90cy50aXRsZSk7XG4gICAgICBjb25zdCBoYXNTdWJ0aXRsZSA9ICEhKHByb3BzLnN1YnRpdGxlIHx8IHNsb3RzLnN1YnRpdGxlKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1jYXJkLWl0ZW0nLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIFtoYXNQcmVwZW5kICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwicHJlcGVuZFwiLFxuICAgICAgICBcImNsYXNzXCI6IFwidi1jYXJkLWl0ZW1fX3ByZXBlbmRcIlxuICAgICAgfSwgWyFzbG90cy5wcmVwZW5kID8gaGFzUHJlcGVuZE1lZGlhICYmIF9jcmVhdGVWTm9kZShWQXZhdGFyLCB7XG4gICAgICAgIFwia2V5XCI6IFwicHJlcGVuZC1hdmF0YXJcIixcbiAgICAgICAgXCJkZW5zaXR5XCI6IHByb3BzLmRlbnNpdHksXG4gICAgICAgIFwiaWNvblwiOiBwcm9wcy5wcmVwZW5kSWNvbixcbiAgICAgICAgXCJpbWFnZVwiOiBwcm9wcy5wcmVwZW5kQXZhdGFyXG4gICAgICB9LCBudWxsKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICBcImtleVwiOiBcInByZXBlbmQtZGVmYXVsdHNcIixcbiAgICAgICAgXCJkaXNhYmxlZFwiOiAhaGFzUHJlcGVuZE1lZGlhLFxuICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICBWQXZhdGFyOiB7XG4gICAgICAgICAgICBkZW5zaXR5OiBwcm9wcy5kZW5zaXR5LFxuICAgICAgICAgICAgaWNvbjogcHJvcHMucHJlcGVuZEljb24sXG4gICAgICAgICAgICBpbWFnZTogcHJvcHMucHJlcGVuZEF2YXRhclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgc2xvdHMucHJlcGVuZCldKSwgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtY2FyZC1pdGVtX19jb250ZW50XCJcbiAgICAgIH0sIFtoYXNUaXRsZSAmJiBfY3JlYXRlVk5vZGUoVkNhcmRUaXRsZSwge1xuICAgICAgICBcImtleVwiOiBcInRpdGxlXCJcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLnRpdGxlPy4oKSA/PyBwcm9wcy50aXRsZV1cbiAgICAgIH0pLCBoYXNTdWJ0aXRsZSAmJiBfY3JlYXRlVk5vZGUoVkNhcmRTdWJ0aXRsZSwge1xuICAgICAgICBcImtleVwiOiBcInN1YnRpdGxlXCJcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLnN1YnRpdGxlPy4oKSA/PyBwcm9wcy5zdWJ0aXRsZV1cbiAgICAgIH0pLCBzbG90cy5kZWZhdWx0Py4oKV0pLCBoYXNBcHBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJrZXlcIjogXCJhcHBlbmRcIixcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtY2FyZC1pdGVtX19hcHBlbmRcIlxuICAgICAgfSwgWyFzbG90cy5hcHBlbmQgPyBoYXNBcHBlbmRNZWRpYSAmJiBfY3JlYXRlVk5vZGUoVkF2YXRhciwge1xuICAgICAgICBcImtleVwiOiBcImFwcGVuZC1hdmF0YXJcIixcbiAgICAgICAgXCJkZW5zaXR5XCI6IHByb3BzLmRlbnNpdHksXG4gICAgICAgIFwiaWNvblwiOiBwcm9wcy5hcHBlbmRJY29uLFxuICAgICAgICBcImltYWdlXCI6IHByb3BzLmFwcGVuZEF2YXRhclxuICAgICAgfSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgXCJrZXlcIjogXCJhcHBlbmQtZGVmYXVsdHNcIixcbiAgICAgICAgXCJkaXNhYmxlZFwiOiAhaGFzQXBwZW5kTWVkaWEsXG4gICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgIFZBdmF0YXI6IHtcbiAgICAgICAgICAgIGRlbnNpdHk6IHByb3BzLmRlbnNpdHksXG4gICAgICAgICAgICBpY29uOiBwcm9wcy5hcHBlbmRJY29uLFxuICAgICAgICAgICAgaW1hZ2U6IHByb3BzLmFwcGVuZEF2YXRhclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgc2xvdHMuYXBwZW5kKV0pXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDYXJkSXRlbS5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgVkNhcmRUZXh0ID0gY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCgndi1jYXJkLXRleHQnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDYXJkVGV4dC5tanMubWFwIiwiaW1wb3J0IHsgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBjb21wbGV4aXR5ICovXG5cbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQ2FyZC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkNhcmRBY3Rpb25zIH0gZnJvbSBcIi4vVkNhcmRBY3Rpb25zLm1qc1wiO1xuaW1wb3J0IHsgVkNhcmRJdGVtIH0gZnJvbSBcIi4vVkNhcmRJdGVtLm1qc1wiO1xuaW1wb3J0IHsgVkNhcmRUZXh0IH0gZnJvbSBcIi4vVkNhcmRUZXh0Lm1qc1wiO1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWSW1nIH0gZnJvbSBcIi4uL1ZJbWcvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQm9yZGVyUHJvcHMsIHVzZUJvcmRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ib3JkZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURlbnNpdHlQcm9wcywgdXNlRGVuc2l0eSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZW5zaXR5Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURpbWVuc2lvblByb3BzLCB1c2VEaW1lbnNpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGltZW5zaW9ucy5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IEljb25WYWx1ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IExvYWRlclNsb3QsIG1ha2VMb2FkZXJQcm9wcywgdXNlTG9hZGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvYWRlci5tanNcIjtcbmltcG9ydCB7IG1ha2VMb2NhdGlvblByb3BzLCB1c2VMb2NhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VQb3NpdGlvblByb3BzLCB1c2VQb3NpdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wb3NpdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3V0ZXJQcm9wcywgdXNlTGluayB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3V0ZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjtcbmltcG9ydCB7IGdlbk92ZXJsYXlzLCBtYWtlVmFyaWFudFByb3BzLCB1c2VWYXJpYW50IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3ZhcmlhbnQubWpzXCI7IC8vIERpcmVjdGl2ZXNcbmltcG9ydCB7IFJpcHBsZSB9IGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL3JpcHBsZS9pbmRleC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWQ2FyZFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYXBwZW5kQXZhdGFyOiBTdHJpbmcsXG4gIGFwcGVuZEljb246IEljb25WYWx1ZSxcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIGZsYXQ6IEJvb2xlYW4sXG4gIGhvdmVyOiBCb29sZWFuLFxuICBpbWFnZTogU3RyaW5nLFxuICBsaW5rOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgfSxcbiAgcHJlcGVuZEF2YXRhcjogU3RyaW5nLFxuICBwcmVwZW5kSWNvbjogSWNvblZhbHVlLFxuICByaXBwbGU6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgT2JqZWN0XSxcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIHN1YnRpdGxlOiBTdHJpbmcsXG4gIHRleHQ6IFN0cmluZyxcbiAgdGl0bGU6IFN0cmluZyxcbiAgLi4ubWFrZUJvcmRlclByb3BzKCksXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGVuc2l0eVByb3BzKCksXG4gIC4uLm1ha2VEaW1lbnNpb25Qcm9wcygpLFxuICAuLi5tYWtlRWxldmF0aW9uUHJvcHMoKSxcbiAgLi4ubWFrZUxvYWRlclByb3BzKCksXG4gIC4uLm1ha2VMb2NhdGlvblByb3BzKCksXG4gIC4uLm1ha2VQb3NpdGlvblByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVJvdXRlclByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpLFxuICAuLi5tYWtlVmFyaWFudFByb3BzKHtcbiAgICB2YXJpYW50OiAnZWxldmF0ZWQnXG4gIH0pXG59LCAnVkNhcmQnKTtcbmV4cG9ydCBjb25zdCBWQ2FyZCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQ2FyZCcsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICBSaXBwbGVcbiAgfSxcbiAgcHJvcHM6IG1ha2VWQ2FyZFByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGF0dHJzLFxuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBib3JkZXJDbGFzc2VzXG4gICAgfSA9IHVzZUJvcmRlcihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgY29sb3JDbGFzc2VzLFxuICAgICAgY29sb3JTdHlsZXMsXG4gICAgICB2YXJpYW50Q2xhc3Nlc1xuICAgIH0gPSB1c2VWYXJpYW50KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBkZW5zaXR5Q2xhc3Nlc1xuICAgIH0gPSB1c2VEZW5zaXR5KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBkaW1lbnNpb25TdHlsZXNcbiAgICB9ID0gdXNlRGltZW5zaW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgbG9hZGVyQ2xhc3Nlc1xuICAgIH0gPSB1c2VMb2FkZXIocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxvY2F0aW9uU3R5bGVzXG4gICAgfSA9IHVzZUxvY2F0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBwb3NpdGlvbkNsYXNzZXNcbiAgICB9ID0gdXNlUG9zaXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocHJvcHMpO1xuICAgIGNvbnN0IGxpbmsgPSB1c2VMaW5rKHByb3BzLCBhdHRycyk7XG4gICAgY29uc3QgaXNMaW5rID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMubGluayAhPT0gZmFsc2UgJiYgbGluay5pc0xpbmsudmFsdWUpO1xuICAgIGNvbnN0IGlzQ2xpY2thYmxlID0gY29tcHV0ZWQoKCkgPT4gIXByb3BzLmRpc2FibGVkICYmIHByb3BzLmxpbmsgIT09IGZhbHNlICYmIChwcm9wcy5saW5rIHx8IGxpbmsuaXNDbGlja2FibGUudmFsdWUpKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgVGFnID0gaXNMaW5rLnZhbHVlID8gJ2EnIDogcHJvcHMudGFnO1xuICAgICAgY29uc3QgaGFzVGl0bGUgPSAhIShzbG90cy50aXRsZSB8fCBwcm9wcy50aXRsZSk7XG4gICAgICBjb25zdCBoYXNTdWJ0aXRsZSA9ICEhKHNsb3RzLnN1YnRpdGxlIHx8IHByb3BzLnN1YnRpdGxlKTtcbiAgICAgIGNvbnN0IGhhc0hlYWRlciA9IGhhc1RpdGxlIHx8IGhhc1N1YnRpdGxlO1xuICAgICAgY29uc3QgaGFzQXBwZW5kID0gISEoc2xvdHMuYXBwZW5kIHx8IHByb3BzLmFwcGVuZEF2YXRhciB8fCBwcm9wcy5hcHBlbmRJY29uKTtcbiAgICAgIGNvbnN0IGhhc1ByZXBlbmQgPSAhIShzbG90cy5wcmVwZW5kIHx8IHByb3BzLnByZXBlbmRBdmF0YXIgfHwgcHJvcHMucHJlcGVuZEljb24pO1xuICAgICAgY29uc3QgaGFzSW1hZ2UgPSAhIShzbG90cy5pbWFnZSB8fCBwcm9wcy5pbWFnZSk7XG4gICAgICBjb25zdCBoYXNDYXJkSXRlbSA9IGhhc0hlYWRlciB8fCBoYXNQcmVwZW5kIHx8IGhhc0FwcGVuZDtcbiAgICAgIGNvbnN0IGhhc1RleHQgPSAhIShzbG90cy50ZXh0IHx8IHByb3BzLnRleHQpO1xuICAgICAgcmV0dXJuIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoVGFnLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWNhcmQnLCB7XG4gICAgICAgICAgJ3YtY2FyZC0tZGlzYWJsZWQnOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICAndi1jYXJkLS1mbGF0JzogcHJvcHMuZmxhdCxcbiAgICAgICAgICAndi1jYXJkLS1ob3Zlcic6IHByb3BzLmhvdmVyICYmICEocHJvcHMuZGlzYWJsZWQgfHwgcHJvcHMuZmxhdCksXG4gICAgICAgICAgJ3YtY2FyZC0tbGluayc6IGlzQ2xpY2thYmxlLnZhbHVlXG4gICAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgYm9yZGVyQ2xhc3Nlcy52YWx1ZSwgY29sb3JDbGFzc2VzLnZhbHVlLCBkZW5zaXR5Q2xhc3Nlcy52YWx1ZSwgZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSwgbG9hZGVyQ2xhc3Nlcy52YWx1ZSwgcG9zaXRpb25DbGFzc2VzLnZhbHVlLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgdmFyaWFudENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbY29sb3JTdHlsZXMudmFsdWUsIGRpbWVuc2lvblN0eWxlcy52YWx1ZSwgbG9jYXRpb25TdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXSxcbiAgICAgICAgXCJocmVmXCI6IGxpbmsuaHJlZi52YWx1ZSxcbiAgICAgICAgXCJvbkNsaWNrXCI6IGlzQ2xpY2thYmxlLnZhbHVlICYmIGxpbmsubmF2aWdhdGUsXG4gICAgICAgIFwidGFiaW5kZXhcIjogcHJvcHMuZGlzYWJsZWQgPyAtMSA6IHVuZGVmaW5lZFxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbaGFzSW1hZ2UgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImtleVwiOiBcImltYWdlXCIsXG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtY2FyZF9faW1hZ2VcIlxuICAgICAgICB9LCBbIXNsb3RzLmltYWdlID8gX2NyZWF0ZVZOb2RlKFZJbWcsIHtcbiAgICAgICAgICBcImtleVwiOiBcImltYWdlLWltZ1wiLFxuICAgICAgICAgIFwiY292ZXJcIjogdHJ1ZSxcbiAgICAgICAgICBcInNyY1wiOiBwcm9wcy5pbWFnZVxuICAgICAgICB9LCBudWxsKSA6IF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgIFwia2V5XCI6IFwiaW1hZ2UtZGVmYXVsdHNcIixcbiAgICAgICAgICBcImRpc2FibGVkXCI6ICFwcm9wcy5pbWFnZSxcbiAgICAgICAgICBcImRlZmF1bHRzXCI6IHtcbiAgICAgICAgICAgIFZJbWc6IHtcbiAgICAgICAgICAgICAgY292ZXI6IHRydWUsXG4gICAgICAgICAgICAgIHNyYzogcHJvcHMuaW1hZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHNsb3RzLmltYWdlKV0pLCBfY3JlYXRlVk5vZGUoTG9hZGVyU2xvdCwge1xuICAgICAgICAgIFwibmFtZVwiOiBcInYtY2FyZFwiLFxuICAgICAgICAgIFwiYWN0aXZlXCI6ICEhcHJvcHMubG9hZGluZyxcbiAgICAgICAgICBcImNvbG9yXCI6IHR5cGVvZiBwcm9wcy5sb2FkaW5nID09PSAnYm9vbGVhbicgPyB1bmRlZmluZWQgOiBwcm9wcy5sb2FkaW5nXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiBzbG90cy5sb2FkZXJcbiAgICAgICAgfSksIGhhc0NhcmRJdGVtICYmIF9jcmVhdGVWTm9kZShWQ2FyZEl0ZW0sIHtcbiAgICAgICAgICBcImtleVwiOiBcIml0ZW1cIixcbiAgICAgICAgICBcInByZXBlbmRBdmF0YXJcIjogcHJvcHMucHJlcGVuZEF2YXRhcixcbiAgICAgICAgICBcInByZXBlbmRJY29uXCI6IHByb3BzLnByZXBlbmRJY29uLFxuICAgICAgICAgIFwidGl0bGVcIjogcHJvcHMudGl0bGUsXG4gICAgICAgICAgXCJzdWJ0aXRsZVwiOiBwcm9wcy5zdWJ0aXRsZSxcbiAgICAgICAgICBcImFwcGVuZEF2YXRhclwiOiBwcm9wcy5hcHBlbmRBdmF0YXIsXG4gICAgICAgICAgXCJhcHBlbmRJY29uXCI6IHByb3BzLmFwcGVuZEljb25cbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6IHNsb3RzLml0ZW0sXG4gICAgICAgICAgcHJlcGVuZDogc2xvdHMucHJlcGVuZCxcbiAgICAgICAgICB0aXRsZTogc2xvdHMudGl0bGUsXG4gICAgICAgICAgc3VidGl0bGU6IHNsb3RzLnN1YnRpdGxlLFxuICAgICAgICAgIGFwcGVuZDogc2xvdHMuYXBwZW5kXG4gICAgICAgIH0pLCBoYXNUZXh0ICYmIF9jcmVhdGVWTm9kZShWQ2FyZFRleHQsIHtcbiAgICAgICAgICBcImtleVwiOiBcInRleHRcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLnRleHQ/LigpID8/IHByb3BzLnRleHRdXG4gICAgICAgIH0pLCBzbG90cy5kZWZhdWx0Py4oKSwgc2xvdHMuYWN0aW9ucyAmJiBfY3JlYXRlVk5vZGUoVkNhcmRBY3Rpb25zLCBudWxsLCB7XG4gICAgICAgICAgZGVmYXVsdDogc2xvdHMuYWN0aW9uc1xuICAgICAgICB9KSwgZ2VuT3ZlcmxheXMoaXNDbGlja2FibGUudmFsdWUsICd2LWNhcmQnKV1cbiAgICAgIH0pLCBbW19yZXNvbHZlRGlyZWN0aXZlKFwicmlwcGxlXCIpLCBpc0NsaWNrYWJsZS52YWx1ZSAmJiBwcm9wcy5yaXBwbGVdXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDYXJkLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGtleXMgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IGhhbmRsZUdlc3R1cmUgPSB3cmFwcGVyID0+IHtcbiAgY29uc3Qge1xuICAgIHRvdWNoc3RhcnRYLFxuICAgIHRvdWNoZW5kWCxcbiAgICB0b3VjaHN0YXJ0WSxcbiAgICB0b3VjaGVuZFlcbiAgfSA9IHdyYXBwZXI7XG4gIGNvbnN0IGRpclJhdGlvID0gMC41O1xuICBjb25zdCBtaW5EaXN0YW5jZSA9IDE2O1xuICB3cmFwcGVyLm9mZnNldFggPSB0b3VjaGVuZFggLSB0b3VjaHN0YXJ0WDtcbiAgd3JhcHBlci5vZmZzZXRZID0gdG91Y2hlbmRZIC0gdG91Y2hzdGFydFk7XG4gIGlmIChNYXRoLmFicyh3cmFwcGVyLm9mZnNldFkpIDwgZGlyUmF0aW8gKiBNYXRoLmFicyh3cmFwcGVyLm9mZnNldFgpKSB7XG4gICAgd3JhcHBlci5sZWZ0ICYmIHRvdWNoZW5kWCA8IHRvdWNoc3RhcnRYIC0gbWluRGlzdGFuY2UgJiYgd3JhcHBlci5sZWZ0KHdyYXBwZXIpO1xuICAgIHdyYXBwZXIucmlnaHQgJiYgdG91Y2hlbmRYID4gdG91Y2hzdGFydFggKyBtaW5EaXN0YW5jZSAmJiB3cmFwcGVyLnJpZ2h0KHdyYXBwZXIpO1xuICB9XG4gIGlmIChNYXRoLmFicyh3cmFwcGVyLm9mZnNldFgpIDwgZGlyUmF0aW8gKiBNYXRoLmFicyh3cmFwcGVyLm9mZnNldFkpKSB7XG4gICAgd3JhcHBlci51cCAmJiB0b3VjaGVuZFkgPCB0b3VjaHN0YXJ0WSAtIG1pbkRpc3RhbmNlICYmIHdyYXBwZXIudXAod3JhcHBlcik7XG4gICAgd3JhcHBlci5kb3duICYmIHRvdWNoZW5kWSA+IHRvdWNoc3RhcnRZICsgbWluRGlzdGFuY2UgJiYgd3JhcHBlci5kb3duKHdyYXBwZXIpO1xuICB9XG59O1xuZnVuY3Rpb24gdG91Y2hzdGFydChldmVudCwgd3JhcHBlcikge1xuICBjb25zdCB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICB3cmFwcGVyLnRvdWNoc3RhcnRYID0gdG91Y2guY2xpZW50WDtcbiAgd3JhcHBlci50b3VjaHN0YXJ0WSA9IHRvdWNoLmNsaWVudFk7XG4gIHdyYXBwZXIuc3RhcnQ/Lih7XG4gICAgb3JpZ2luYWxFdmVudDogZXZlbnQsXG4gICAgLi4ud3JhcHBlclxuICB9KTtcbn1cbmZ1bmN0aW9uIHRvdWNoZW5kKGV2ZW50LCB3cmFwcGVyKSB7XG4gIGNvbnN0IHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gIHdyYXBwZXIudG91Y2hlbmRYID0gdG91Y2guY2xpZW50WDtcbiAgd3JhcHBlci50b3VjaGVuZFkgPSB0b3VjaC5jbGllbnRZO1xuICB3cmFwcGVyLmVuZD8uKHtcbiAgICBvcmlnaW5hbEV2ZW50OiBldmVudCxcbiAgICAuLi53cmFwcGVyXG4gIH0pO1xuICBoYW5kbGVHZXN0dXJlKHdyYXBwZXIpO1xufVxuZnVuY3Rpb24gdG91Y2htb3ZlKGV2ZW50LCB3cmFwcGVyKSB7XG4gIGNvbnN0IHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gIHdyYXBwZXIudG91Y2htb3ZlWCA9IHRvdWNoLmNsaWVudFg7XG4gIHdyYXBwZXIudG91Y2htb3ZlWSA9IHRvdWNoLmNsaWVudFk7XG4gIHdyYXBwZXIubW92ZT8uKHtcbiAgICBvcmlnaW5hbEV2ZW50OiBldmVudCxcbiAgICAuLi53cmFwcGVyXG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlSGFuZGxlcnMoKSB7XG4gIGxldCB2YWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIGNvbnN0IHdyYXBwZXIgPSB7XG4gICAgdG91Y2hzdGFydFg6IDAsXG4gICAgdG91Y2hzdGFydFk6IDAsXG4gICAgdG91Y2hlbmRYOiAwLFxuICAgIHRvdWNoZW5kWTogMCxcbiAgICB0b3VjaG1vdmVYOiAwLFxuICAgIHRvdWNobW92ZVk6IDAsXG4gICAgb2Zmc2V0WDogMCxcbiAgICBvZmZzZXRZOiAwLFxuICAgIGxlZnQ6IHZhbHVlLmxlZnQsXG4gICAgcmlnaHQ6IHZhbHVlLnJpZ2h0LFxuICAgIHVwOiB2YWx1ZS51cCxcbiAgICBkb3duOiB2YWx1ZS5kb3duLFxuICAgIHN0YXJ0OiB2YWx1ZS5zdGFydCxcbiAgICBtb3ZlOiB2YWx1ZS5tb3ZlLFxuICAgIGVuZDogdmFsdWUuZW5kXG4gIH07XG4gIHJldHVybiB7XG4gICAgdG91Y2hzdGFydDogZSA9PiB0b3VjaHN0YXJ0KGUsIHdyYXBwZXIpLFxuICAgIHRvdWNoZW5kOiBlID0+IHRvdWNoZW5kKGUsIHdyYXBwZXIpLFxuICAgIHRvdWNobW92ZTogZSA9PiB0b3VjaG1vdmUoZSwgd3JhcHBlcilcbiAgfTtcbn1cbmZ1bmN0aW9uIG1vdW50ZWQoZWwsIGJpbmRpbmcpIHtcbiAgY29uc3QgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICBjb25zdCB0YXJnZXQgPSB2YWx1ZT8ucGFyZW50ID8gZWwucGFyZW50RWxlbWVudCA6IGVsO1xuICBjb25zdCBvcHRpb25zID0gdmFsdWU/Lm9wdGlvbnMgPz8ge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfTtcbiAgY29uc3QgdWlkID0gYmluZGluZy5pbnN0YW5jZT8uJC51aWQ7IC8vIFRPRE86IHVzZSBjdXN0b20gdWlkIGdlbmVyYXRvclxuXG4gIGlmICghdGFyZ2V0IHx8ICF1aWQpIHJldHVybjtcbiAgY29uc3QgaGFuZGxlcnMgPSBjcmVhdGVIYW5kbGVycyhiaW5kaW5nLnZhbHVlKTtcbiAgdGFyZ2V0Ll90b3VjaEhhbmRsZXJzID0gdGFyZ2V0Ll90b3VjaEhhbmRsZXJzID8/IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRhcmdldC5fdG91Y2hIYW5kbGVyc1t1aWRdID0gaGFuZGxlcnM7XG4gIGtleXMoaGFuZGxlcnMpLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXJzW2V2ZW50TmFtZV0sIG9wdGlvbnMpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVubW91bnRlZChlbCwgYmluZGluZykge1xuICBjb25zdCB0YXJnZXQgPSBiaW5kaW5nLnZhbHVlPy5wYXJlbnQgPyBlbC5wYXJlbnRFbGVtZW50IDogZWw7XG4gIGNvbnN0IHVpZCA9IGJpbmRpbmcuaW5zdGFuY2U/LiQudWlkO1xuICBpZiAoIXRhcmdldD8uX3RvdWNoSGFuZGxlcnMgfHwgIXVpZCkgcmV0dXJuO1xuICBjb25zdCBoYW5kbGVycyA9IHRhcmdldC5fdG91Y2hIYW5kbGVyc1t1aWRdO1xuICBrZXlzKGhhbmRsZXJzKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyc1tldmVudE5hbWVdKTtcbiAgfSk7XG4gIGRlbGV0ZSB0YXJnZXQuX3RvdWNoSGFuZGxlcnNbdWlkXTtcbn1cbmV4cG9ydCBjb25zdCBUb3VjaCA9IHtcbiAgbW91bnRlZCxcbiAgdW5tb3VudGVkXG59O1xuZXhwb3J0IGRlZmF1bHQgVG91Y2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIiwiaW1wb3J0IHsgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVldpbmRvdy5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkJ0biB9IGZyb20gXCIuLi9WQnRuL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHVzZUdyb3VwIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2dyb3VwLm1qc1wiO1xuaW1wb3J0IHsgdXNlTG9jYWxlLCB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIERpcmVjdGl2ZXNcbmltcG9ydCB7IFRvdWNoIH0gZnJvbSBcIi4uLy4uL2RpcmVjdGl2ZXMvdG91Y2gvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHByb3ZpZGUsIHJlZiwgc2hhbGxvd1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBWV2luZG93U3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTp2LXdpbmRvdycpO1xuZXhwb3J0IGNvbnN0IFZXaW5kb3dHcm91cFN5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6di13aW5kb3ctZ3JvdXAnKTtcbmV4cG9ydCBjb25zdCBtYWtlVldpbmRvd1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29udGludW91czogQm9vbGVhbixcbiAgbmV4dEljb246IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nLCBGdW5jdGlvbiwgT2JqZWN0XSxcbiAgICBkZWZhdWx0OiAnJG5leHQnXG4gIH0sXG4gIHByZXZJY29uOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZywgRnVuY3Rpb24sIE9iamVjdF0sXG4gICAgZGVmYXVsdDogJyRwcmV2J1xuICB9LFxuICByZXZlcnNlOiBCb29sZWFuLFxuICBzaG93QXJyb3dzOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ10sXG4gICAgdmFsaWRhdG9yOiB2ID0+IHR5cGVvZiB2ID09PSAnYm9vbGVhbicgfHwgdiA9PT0gJ2hvdmVyJ1xuICB9LFxuICB0b3VjaDoge1xuICAgIHR5cGU6IFtPYmplY3QsIEJvb2xlYW5dLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICBkaXJlY3Rpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2hvcml6b250YWwnXG4gIH0sXG4gIG1vZGVsVmFsdWU6IG51bGwsXG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICBzZWxlY3RlZENsYXNzOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICd2LXdpbmRvdy1pdGVtLS1hY3RpdmUnXG4gIH0sXG4gIC8vIFRPRE86IG1hbmRhdG9yeSBzaG91bGQgcHJvYmFibHkgbm90IGJlIGV4cG9zZWQgYnV0IGRvIHRoaXMgZm9yIG5vd1xuICBtYW5kYXRvcnk6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAnZm9yY2UnXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZXaW5kb3cnKTtcbmV4cG9ydCBjb25zdCBWV2luZG93ID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZXaW5kb3cnLFxuICBkaXJlY3RpdmVzOiB7XG4gICAgVG91Y2hcbiAgfSxcbiAgcHJvcHM6IG1ha2VWV2luZG93UHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2ID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBpc1J0bFxuICAgIH0gPSB1c2VSdGwoKTtcbiAgICBjb25zdCB7XG4gICAgICB0XG4gICAgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IGdyb3VwID0gdXNlR3JvdXAocHJvcHMsIFZXaW5kb3dHcm91cFN5bWJvbCk7XG4gICAgY29uc3Qgcm9vdFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGlzUnRsUmV2ZXJzZSA9IGNvbXB1dGVkKCgpID0+IGlzUnRsLnZhbHVlID8gIXByb3BzLnJldmVyc2UgOiBwcm9wcy5yZXZlcnNlKTtcbiAgICBjb25zdCBpc1JldmVyc2VkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAgY29uc3QgdHJhbnNpdGlvbiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGF4aXMgPSBwcm9wcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcgPyAneScgOiAneCc7XG4gICAgICBjb25zdCByZXZlcnNlID0gaXNSdGxSZXZlcnNlLnZhbHVlID8gIWlzUmV2ZXJzZWQudmFsdWUgOiBpc1JldmVyc2VkLnZhbHVlO1xuICAgICAgY29uc3QgZGlyZWN0aW9uID0gcmV2ZXJzZSA/ICctcmV2ZXJzZScgOiAnJztcbiAgICAgIHJldHVybiBgdi13aW5kb3ctJHtheGlzfSR7ZGlyZWN0aW9ufS10cmFuc2l0aW9uYDtcbiAgICB9KTtcbiAgICBjb25zdCB0cmFuc2l0aW9uQ291bnQgPSBzaGFsbG93UmVmKDApO1xuICAgIGNvbnN0IHRyYW5zaXRpb25IZWlnaHQgPSByZWYodW5kZWZpbmVkKTtcbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBncm91cC5pdGVtcy52YWx1ZS5maW5kSW5kZXgoaXRlbSA9PiBncm91cC5zZWxlY3RlZC52YWx1ZS5pbmNsdWRlcyhpdGVtLmlkKSk7XG4gICAgfSk7XG4gICAgd2F0Y2goYWN0aXZlSW5kZXgsIChuZXdWYWwsIG9sZFZhbCkgPT4ge1xuICAgICAgY29uc3QgaXRlbXNMZW5ndGggPSBncm91cC5pdGVtcy52YWx1ZS5sZW5ndGg7XG4gICAgICBjb25zdCBsYXN0SW5kZXggPSBpdGVtc0xlbmd0aCAtIDE7XG4gICAgICBpZiAoaXRlbXNMZW5ndGggPD0gMikge1xuICAgICAgICBpc1JldmVyc2VkLnZhbHVlID0gbmV3VmFsIDwgb2xkVmFsO1xuICAgICAgfSBlbHNlIGlmIChuZXdWYWwgPT09IGxhc3RJbmRleCAmJiBvbGRWYWwgPT09IDApIHtcbiAgICAgICAgaXNSZXZlcnNlZC52YWx1ZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG5ld1ZhbCA9PT0gMCAmJiBvbGRWYWwgPT09IGxhc3RJbmRleCkge1xuICAgICAgICBpc1JldmVyc2VkLnZhbHVlID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpc1JldmVyc2VkLnZhbHVlID0gbmV3VmFsIDwgb2xkVmFsO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHByb3ZpZGUoVldpbmRvd1N5bWJvbCwge1xuICAgICAgdHJhbnNpdGlvbixcbiAgICAgIGlzUmV2ZXJzZWQsXG4gICAgICB0cmFuc2l0aW9uQ291bnQsXG4gICAgICB0cmFuc2l0aW9uSGVpZ2h0LFxuICAgICAgcm9vdFJlZlxuICAgIH0pO1xuICAgIGNvbnN0IGNhbk1vdmVCYWNrID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuY29udGludW91cyB8fCBhY3RpdmVJbmRleC52YWx1ZSAhPT0gMCk7XG4gICAgY29uc3QgY2FuTW92ZUZvcndhcmQgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5jb250aW51b3VzIHx8IGFjdGl2ZUluZGV4LnZhbHVlICE9PSBncm91cC5pdGVtcy52YWx1ZS5sZW5ndGggLSAxKTtcbiAgICBmdW5jdGlvbiBwcmV2KCkge1xuICAgICAgY2FuTW92ZUJhY2sudmFsdWUgJiYgZ3JvdXAucHJldigpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgY2FuTW92ZUZvcndhcmQudmFsdWUgJiYgZ3JvdXAubmV4dCgpO1xuICAgIH1cbiAgICBjb25zdCBhcnJvd3MgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBhcnJvd3MgPSBbXTtcbiAgICAgIGNvbnN0IHByZXZQcm9wcyA9IHtcbiAgICAgICAgaWNvbjogaXNSdGwudmFsdWUgPyBwcm9wcy5uZXh0SWNvbiA6IHByb3BzLnByZXZJY29uLFxuICAgICAgICBjbGFzczogYHYtd2luZG93X18ke2lzUnRsUmV2ZXJzZS52YWx1ZSA/ICdyaWdodCcgOiAnbGVmdCd9YCxcbiAgICAgICAgb25DbGljazogZ3JvdXAucHJldixcbiAgICAgICAgYXJpYUxhYmVsOiB0KCckdnVldGlmeS5jYXJvdXNlbC5wcmV2JylcbiAgICAgIH07XG4gICAgICBhcnJvd3MucHVzaChjYW5Nb3ZlQmFjay52YWx1ZSA/IHNsb3RzLnByZXYgPyBzbG90cy5wcmV2KHtcbiAgICAgICAgcHJvcHM6IHByZXZQcm9wc1xuICAgICAgfSkgOiBfY3JlYXRlVk5vZGUoVkJ0biwgcHJldlByb3BzLCBudWxsKSA6IF9jcmVhdGVWTm9kZShcImRpdlwiLCBudWxsLCBudWxsKSk7XG4gICAgICBjb25zdCBuZXh0UHJvcHMgPSB7XG4gICAgICAgIGljb246IGlzUnRsLnZhbHVlID8gcHJvcHMucHJldkljb24gOiBwcm9wcy5uZXh0SWNvbixcbiAgICAgICAgY2xhc3M6IGB2LXdpbmRvd19fJHtpc1J0bFJldmVyc2UudmFsdWUgPyAnbGVmdCcgOiAncmlnaHQnfWAsXG4gICAgICAgIG9uQ2xpY2s6IGdyb3VwLm5leHQsXG4gICAgICAgIGFyaWFMYWJlbDogdCgnJHZ1ZXRpZnkuY2Fyb3VzZWwubmV4dCcpXG4gICAgICB9O1xuICAgICAgYXJyb3dzLnB1c2goY2FuTW92ZUZvcndhcmQudmFsdWUgPyBzbG90cy5uZXh0ID8gc2xvdHMubmV4dCh7XG4gICAgICAgIHByb3BzOiBuZXh0UHJvcHNcbiAgICAgIH0pIDogX2NyZWF0ZVZOb2RlKFZCdG4sIG5leHRQcm9wcywgbnVsbCkgOiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwgbnVsbCwgbnVsbCkpO1xuICAgICAgcmV0dXJuIGFycm93cztcbiAgICB9KTtcbiAgICBjb25zdCB0b3VjaE9wdGlvbnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMudG91Y2ggPT09IGZhbHNlKSByZXR1cm4gcHJvcHMudG91Y2g7XG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBsZWZ0OiAoKSA9PiB7XG4gICAgICAgICAgaXNSdGxSZXZlcnNlLnZhbHVlID8gcHJldigpIDogbmV4dCgpO1xuICAgICAgICB9LFxuICAgICAgICByaWdodDogKCkgPT4ge1xuICAgICAgICAgIGlzUnRsUmV2ZXJzZS52YWx1ZSA/IG5leHQoKSA6IHByZXYoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RhcnQ6IF9yZWYyID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgb3JpZ2luYWxFdmVudFxuICAgICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgICBvcmlnaW5hbEV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgLi4uKHByb3BzLnRvdWNoID09PSB0cnVlID8ge30gOiBwcm9wcy50b3VjaClcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcInJlZlwiOiByb290UmVmLFxuICAgICAgXCJjbGFzc1wiOiBbJ3Ytd2luZG93Jywge1xuICAgICAgICAndi13aW5kb3ctLXNob3ctYXJyb3dzLW9uLWhvdmVyJzogcHJvcHMuc2hvd0Fycm93cyA9PT0gJ2hvdmVyJ1xuICAgICAgfSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gW19jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LXdpbmRvd19fY29udGFpbmVyXCIsXG4gICAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICAgIGhlaWdodDogdHJhbnNpdGlvbkhlaWdodC52YWx1ZVxuICAgICAgICB9XG4gICAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKHtcbiAgICAgICAgZ3JvdXBcbiAgICAgIH0pLCBwcm9wcy5zaG93QXJyb3dzICE9PSBmYWxzZSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi13aW5kb3dfX2NvbnRyb2xzXCJcbiAgICAgIH0sIFthcnJvd3MudmFsdWVdKV0pLCBzbG90cy5hZGRpdGlvbmFsPy4oe1xuICAgICAgICBncm91cFxuICAgICAgfSldXG4gICAgfSksIFtbX3Jlc29sdmVEaXJlY3RpdmUoXCJ0b3VjaFwiKSwgdG91Y2hPcHRpb25zLnZhbHVlXV0pKTtcbiAgICByZXR1cm4ge1xuICAgICAgZ3JvdXBcbiAgICB9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZXaW5kb3cubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgRnJhZ21lbnQgYXMgX0ZyYWdtZW50IH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZDYXJvdXNlbC5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkJ0biB9IGZyb20gXCIuLi9WQnRuL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkRlZmF1bHRzUHJvdmlkZXIgfSBmcm9tIFwiLi4vVkRlZmF1bHRzUHJvdmlkZXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWUHJvZ3Jlc3NMaW5lYXIgfSBmcm9tIFwiLi4vVlByb2dyZXNzTGluZWFyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZXaW5kb3dQcm9wcywgVldpbmRvdyB9IGZyb20gXCIuLi9WV2luZG93L1ZXaW5kb3cubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBvbk1vdW50ZWQsIHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkNhcm91c2VsUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjb2xvcjogU3RyaW5nLFxuICBjeWNsZTogQm9vbGVhbixcbiAgZGVsaW1pdGVySWNvbjoge1xuICAgIHR5cGU6IEljb25WYWx1ZSxcbiAgICBkZWZhdWx0OiAnJGRlbGltaXRlcidcbiAgfSxcbiAgaGVpZ2h0OiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiA1MDBcbiAgfSxcbiAgaGlkZURlbGltaXRlcnM6IEJvb2xlYW4sXG4gIGhpZGVEZWxpbWl0ZXJCYWNrZ3JvdW5kOiBCb29sZWFuLFxuICBpbnRlcnZhbDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogNjAwMCxcbiAgICB2YWxpZGF0b3I6IHZhbHVlID0+IE51bWJlcih2YWx1ZSkgPiAwXG4gIH0sXG4gIHByb2dyZXNzOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgdmVydGljYWxEZWxpbWl0ZXJzOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgLi4ubWFrZVZXaW5kb3dQcm9wcyh7XG4gICAgY29udGludW91czogdHJ1ZSxcbiAgICBtYW5kYXRvcnk6ICdmb3JjZScsXG4gICAgc2hvd0Fycm93czogdHJ1ZVxuICB9KVxufSwgJ1ZDYXJvdXNlbCcpO1xuZXhwb3J0IGNvbnN0IFZDYXJvdXNlbCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQ2Fyb3VzZWwnLFxuICBwcm9wczogbWFrZVZDYXJvdXNlbFByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCB7XG4gICAgICB0XG4gICAgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IHdpbmRvd1JlZiA9IHJlZigpO1xuICAgIGxldCBzbGlkZVRpbWVvdXQgPSAtMTtcbiAgICB3YXRjaChtb2RlbCwgcmVzdGFydFRpbWVvdXQpO1xuICAgIHdhdGNoKCgpID0+IHByb3BzLmludGVydmFsLCByZXN0YXJ0VGltZW91dCk7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuY3ljbGUsIHZhbCA9PiB7XG4gICAgICBpZiAodmFsKSByZXN0YXJ0VGltZW91dCgpO2Vsc2Ugd2luZG93LmNsZWFyVGltZW91dChzbGlkZVRpbWVvdXQpO1xuICAgIH0pO1xuICAgIG9uTW91bnRlZChzdGFydFRpbWVvdXQpO1xuICAgIGZ1bmN0aW9uIHN0YXJ0VGltZW91dCgpIHtcbiAgICAgIGlmICghcHJvcHMuY3ljbGUgfHwgIXdpbmRvd1JlZi52YWx1ZSkgcmV0dXJuO1xuICAgICAgc2xpZGVUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQod2luZG93UmVmLnZhbHVlLmdyb3VwLm5leHQsICtwcm9wcy5pbnRlcnZhbCA+IDAgPyArcHJvcHMuaW50ZXJ2YWwgOiA2MDAwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzdGFydFRpbWVvdXQoKSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHNsaWRlVGltZW91dCk7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0YXJ0VGltZW91dCk7XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBbd2luZG93UHJvcHNdID0gVldpbmRvdy5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZXaW5kb3csIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJyZWZcIjogd2luZG93UmVmXG4gICAgICB9LCB3aW5kb3dQcm9wcywge1xuICAgICAgICBcIm1vZGVsVmFsdWVcIjogbW9kZWwudmFsdWUsXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gbW9kZWwudmFsdWUgPSAkZXZlbnQsXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWNhcm91c2VsJywge1xuICAgICAgICAgICd2LWNhcm91c2VsLS1oaWRlLWRlbGltaXRlci1iYWNrZ3JvdW5kJzogcHJvcHMuaGlkZURlbGltaXRlckJhY2tncm91bmQsXG4gICAgICAgICAgJ3YtY2Fyb3VzZWwtLXZlcnRpY2FsLWRlbGltaXRlcnMnOiBwcm9wcy52ZXJ0aWNhbERlbGltaXRlcnNcbiAgICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFt7XG4gICAgICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KHByb3BzLmhlaWdodClcbiAgICAgICAgfSwgcHJvcHMuc3R5bGVdXG4gICAgICB9KSwge1xuICAgICAgICBkZWZhdWx0OiBzbG90cy5kZWZhdWx0LFxuICAgICAgICBhZGRpdGlvbmFsOiBfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGdyb3VwXG4gICAgICAgICAgfSA9IF9yZWYyO1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbIXByb3BzLmhpZGVEZWxpbWl0ZXJzICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwidi1jYXJvdXNlbF9fY29udHJvbHNcIixcbiAgICAgICAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICAgICAgICBsZWZ0OiBwcm9wcy52ZXJ0aWNhbERlbGltaXRlcnMgPT09ICdsZWZ0JyAmJiBwcm9wcy52ZXJ0aWNhbERlbGltaXRlcnMgPyAwIDogJ2F1dG8nLFxuICAgICAgICAgICAgICByaWdodDogcHJvcHMudmVydGljYWxEZWxpbWl0ZXJzID09PSAncmlnaHQnID8gMCA6ICdhdXRvJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIFtncm91cC5pdGVtcy52YWx1ZS5sZW5ndGggPiAwICYmIF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICAgIFZCdG46IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgICAgICAgICAgaWNvbjogcHJvcHMuZGVsaW1pdGVySWNvbixcbiAgICAgICAgICAgICAgICBzaXplOiAneC1zbWFsbCcsXG4gICAgICAgICAgICAgICAgdmFyaWFudDogJ3RleHQnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInNjb3BlZFwiOiB0cnVlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW2dyb3VwLml0ZW1zLnZhbHVlLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IGBjYXJvdXNlbC1pdGVtLSR7aXRlbS5pZH1gLFxuICAgICAgICAgICAgICAgICdhcmlhLWxhYmVsJzogdCgnJHZ1ZXRpZnkuY2Fyb3VzZWwuYXJpYUxhYmVsLmRlbGltaXRlcicsIGluZGV4ICsgMSwgZ3JvdXAuaXRlbXMudmFsdWUubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICBjbGFzczogW2dyb3VwLmlzU2VsZWN0ZWQoaXRlbS5pZCkgJiYgJ3YtYnRuLS1hY3RpdmUnXSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBncm91cC5zZWxlY3QoaXRlbS5pZCwgdHJ1ZSlcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgcmV0dXJuIHNsb3RzLml0ZW0gPyBzbG90cy5pdGVtKHtcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgIH0pIDogX2NyZWF0ZVZOb2RlKFZCdG4sIF9tZXJnZVByb3BzKGl0ZW0sIHByb3BzKSwgbnVsbCk7XG4gICAgICAgICAgICB9KV1cbiAgICAgICAgICB9KV0pLCBwcm9wcy5wcm9ncmVzcyAmJiBfY3JlYXRlVk5vZGUoVlByb2dyZXNzTGluZWFyLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwidi1jYXJvdXNlbF9fcHJvZ3Jlc3NcIixcbiAgICAgICAgICAgIFwiY29sb3JcIjogdHlwZW9mIHByb3BzLnByb2dyZXNzID09PSAnc3RyaW5nJyA/IHByb3BzLnByb2dyZXNzIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgXCJtb2RlbFZhbHVlXCI6IChncm91cC5nZXRJdGVtSW5kZXgobW9kZWwudmFsdWUpICsgMSkgLyBncm91cC5pdGVtcy52YWx1ZS5sZW5ndGggKiAxMDBcbiAgICAgICAgICB9LCBudWxsKV0pO1xuICAgICAgICB9LFxuICAgICAgICBwcmV2OiBzbG90cy5wcmV2LFxuICAgICAgICBuZXh0OiBzbG90cy5uZXh0XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNhcm91c2VsLm1qcy5tYXAiLCJpbXBvcnQgeyB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgdlNob3cgYXMgX3ZTaG93IH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlR3JvdXBJdGVtUHJvcHMsIHVzZUdyb3VwSXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ncm91cC5tanNcIjtcbmltcG9ydCB7IG1ha2VMYXp5UHJvcHMsIHVzZUxhenkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGF6eS5tanNcIjtcbmltcG9ydCB7IHVzZVNzckJvb3QgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc3NyQm9vdC5tanNcIjtcbmltcG9ydCB7IE1heWJlVHJhbnNpdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90cmFuc2l0aW9uLm1qc1wiOyAvLyBEaXJlY3RpdmVzXG5pbXBvcnQgVG91Y2ggZnJvbSBcIi4uLy4uL2RpcmVjdGl2ZXMvdG91Y2gvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCwgbmV4dFRpY2ssIHNoYWxsb3dSZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmltcG9ydCB7IFZXaW5kb3dHcm91cFN5bWJvbCwgVldpbmRvd1N5bWJvbCB9IGZyb20gXCIuL1ZXaW5kb3cubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZXaW5kb3dJdGVtUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICByZXZlcnNlVHJhbnNpdGlvbjoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICB0cmFuc2l0aW9uOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ10sXG4gICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlR3JvdXBJdGVtUHJvcHMoKSxcbiAgLi4ubWFrZUxhenlQcm9wcygpXG59LCAnVldpbmRvd0l0ZW0nKTtcbmV4cG9ydCBjb25zdCBWV2luZG93SXRlbSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWV2luZG93SXRlbScsXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICBUb3VjaFxuICB9LFxuICBwcm9wczogbWFrZVZXaW5kb3dJdGVtUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAnZ3JvdXA6c2VsZWN0ZWQnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHdpbmRvdyA9IGluamVjdChWV2luZG93U3ltYm9sKTtcbiAgICBjb25zdCBncm91cEl0ZW0gPSB1c2VHcm91cEl0ZW0ocHJvcHMsIFZXaW5kb3dHcm91cFN5bWJvbCk7XG4gICAgY29uc3Qge1xuICAgICAgaXNCb290ZWRcbiAgICB9ID0gdXNlU3NyQm9vdCgpO1xuICAgIGlmICghd2luZG93IHx8ICFncm91cEl0ZW0pIHRocm93IG5ldyBFcnJvcignW1Z1ZXRpZnldIFZXaW5kb3dJdGVtIG11c3QgYmUgdXNlZCBpbnNpZGUgVldpbmRvdycpO1xuICAgIGNvbnN0IGlzVHJhbnNpdGlvbmluZyA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIGNvbnN0IGhhc1RyYW5zaXRpb24gPSBjb21wdXRlZCgoKSA9PiBpc0Jvb3RlZC52YWx1ZSAmJiAod2luZG93LmlzUmV2ZXJzZWQudmFsdWUgPyBwcm9wcy5yZXZlcnNlVHJhbnNpdGlvbiAhPT0gZmFsc2UgOiBwcm9wcy50cmFuc2l0aW9uICE9PSBmYWxzZSkpO1xuICAgIGZ1bmN0aW9uIG9uQWZ0ZXJUcmFuc2l0aW9uKCkge1xuICAgICAgaWYgKCFpc1RyYW5zaXRpb25pbmcudmFsdWUgfHwgIXdpbmRvdykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmFsaXplIHRyYW5zaXRpb24gc3RhdGUuXG4gICAgICBpc1RyYW5zaXRpb25pbmcudmFsdWUgPSBmYWxzZTtcbiAgICAgIGlmICh3aW5kb3cudHJhbnNpdGlvbkNvdW50LnZhbHVlID4gMCkge1xuICAgICAgICB3aW5kb3cudHJhbnNpdGlvbkNvdW50LnZhbHVlIC09IDE7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGNvbnRhaW5lciBoZWlnaHQgaWYgd2UgYXJlIG91dCBvZiB0cmFuc2l0aW9uLlxuICAgICAgICBpZiAod2luZG93LnRyYW5zaXRpb25Db3VudC52YWx1ZSA9PT0gMCkge1xuICAgICAgICAgIHdpbmRvdy50cmFuc2l0aW9uSGVpZ2h0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQmVmb3JlVHJhbnNpdGlvbigpIHtcbiAgICAgIGlmIChpc1RyYW5zaXRpb25pbmcudmFsdWUgfHwgIXdpbmRvdykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEluaXRpYWxpemUgdHJhbnNpdGlvbiBzdGF0ZSBoZXJlLlxuICAgICAgaXNUcmFuc2l0aW9uaW5nLnZhbHVlID0gdHJ1ZTtcbiAgICAgIGlmICh3aW5kb3cudHJhbnNpdGlvbkNvdW50LnZhbHVlID09PSAwKSB7XG4gICAgICAgIC8vIFNldCBpbml0aWFsIGhlaWdodCBmb3IgaGVpZ2h0IHRyYW5zaXRpb24uXG4gICAgICAgIHdpbmRvdy50cmFuc2l0aW9uSGVpZ2h0LnZhbHVlID0gY29udmVydFRvVW5pdCh3aW5kb3cucm9vdFJlZi52YWx1ZT8uY2xpZW50SGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIHdpbmRvdy50cmFuc2l0aW9uQ291bnQudmFsdWUgKz0gMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25UcmFuc2l0aW9uQ2FuY2VsbGVkKCkge1xuICAgICAgb25BZnRlclRyYW5zaXRpb24oKTsgLy8gVGhpcyBzaG91bGQgaGF2ZSB0aGUgc2FtZSBwYXRoIGFzIG5vcm1hbCB0cmFuc2l0aW9uIGVuZC5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkVudGVyVHJhbnNpdGlvbihlbCkge1xuICAgICAgaWYgKCFpc1RyYW5zaXRpb25pbmcudmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAvLyBEbyBub3Qgc2V0IGhlaWdodCBpZiBubyB0cmFuc2l0aW9uIG9yIGNhbmNlbGxlZC5cbiAgICAgICAgaWYgKCFoYXNUcmFuc2l0aW9uLnZhbHVlIHx8ICFpc1RyYW5zaXRpb25pbmcudmFsdWUgfHwgIXdpbmRvdykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0cmFuc2l0aW9uIHRhcmdldCBoZWlnaHQuXG4gICAgICAgIHdpbmRvdy50cmFuc2l0aW9uSGVpZ2h0LnZhbHVlID0gY29udmVydFRvVW5pdChlbC5jbGllbnRIZWlnaHQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHRyYW5zaXRpb24gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBuYW1lID0gd2luZG93LmlzUmV2ZXJzZWQudmFsdWUgPyBwcm9wcy5yZXZlcnNlVHJhbnNpdGlvbiA6IHByb3BzLnRyYW5zaXRpb247XG4gICAgICByZXR1cm4gIWhhc1RyYW5zaXRpb24udmFsdWUgPyBmYWxzZSA6IHtcbiAgICAgICAgbmFtZTogdHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnID8gd2luZG93LnRyYW5zaXRpb24udmFsdWUgOiBuYW1lLFxuICAgICAgICBvbkJlZm9yZUVudGVyOiBvbkJlZm9yZVRyYW5zaXRpb24sXG4gICAgICAgIG9uQWZ0ZXJFbnRlcjogb25BZnRlclRyYW5zaXRpb24sXG4gICAgICAgIG9uRW50ZXJDYW5jZWxsZWQ6IG9uVHJhbnNpdGlvbkNhbmNlbGxlZCxcbiAgICAgICAgb25CZWZvcmVMZWF2ZTogb25CZWZvcmVUcmFuc2l0aW9uLFxuICAgICAgICBvbkFmdGVyTGVhdmU6IG9uQWZ0ZXJUcmFuc2l0aW9uLFxuICAgICAgICBvbkxlYXZlQ2FuY2VsbGVkOiBvblRyYW5zaXRpb25DYW5jZWxsZWQsXG4gICAgICAgIG9uRW50ZXI6IG9uRW50ZXJUcmFuc2l0aW9uXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGhhc0NvbnRlbnRcbiAgICB9ID0gdXNlTGF6eShwcm9wcywgZ3JvdXBJdGVtLmlzU2VsZWN0ZWQpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoTWF5YmVUcmFuc2l0aW9uLCB7XG4gICAgICBcInRyYW5zaXRpb25cIjogdHJhbnNpdGlvbi52YWx1ZSxcbiAgICAgIFwiZGlzYWJsZWRcIjogIWlzQm9vdGVkLnZhbHVlXG4gICAgfSwge1xuICAgICAgZGVmYXVsdDogKCkgPT4gW193aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi13aW5kb3ctaXRlbScsIGdyb3VwSXRlbS5zZWxlY3RlZENsYXNzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIFtoYXNDb250ZW50LnZhbHVlICYmIHNsb3RzLmRlZmF1bHQ/LigpXSksIFtbX3ZTaG93LCBncm91cEl0ZW0uaXNTZWxlY3RlZC52YWx1ZV1dKV1cbiAgICB9KSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdyb3VwSXRlbVxuICAgIH07XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VldpbmRvd0l0ZW0ubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IG1ha2VWSW1nUHJvcHMsIFZJbWcgfSBmcm9tIFwiLi4vVkltZy9WSW1nLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZXaW5kb3dJdGVtUHJvcHMsIFZXaW5kb3dJdGVtIH0gZnJvbSBcIi4uL1ZXaW5kb3cvVldpbmRvd0l0ZW0ubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkNhcm91c2VsSXRlbVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgLi4ubWFrZVZJbWdQcm9wcygpLFxuICAuLi5tYWtlVldpbmRvd0l0ZW1Qcm9wcygpXG59LCAnVkNhcm91c2VsSXRlbScpO1xuZXhwb3J0IGNvbnN0IFZDYXJvdXNlbEl0ZW0gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkNhcm91c2VsSXRlbScsXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiBtYWtlVkNhcm91c2VsSXRlbVByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzLFxuICAgICAgYXR0cnNcbiAgICB9ID0gX3JlZjtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgW2ltZ1Byb3BzXSA9IFZJbWcuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgY29uc3QgW3dpbmRvd0l0ZW1Qcm9wc10gPSBWV2luZG93SXRlbS5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZXaW5kb3dJdGVtLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LWNhcm91c2VsLWl0ZW1cIlxuICAgICAgfSwgd2luZG93SXRlbVByb3BzKSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX2NyZWF0ZVZOb2RlKFZJbWcsIF9tZXJnZVByb3BzKGF0dHJzLCBpbWdQcm9wcyksIHNsb3RzKV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDYXJvdXNlbEl0ZW0ubWpzLm1hcCIsIi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQ29kZS5jc3NcIjtcblxuLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgVkNvZGUgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWNvZGUnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkNvbG9yUGlja2VyQ2FudmFzLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHVzZVJlc2l6ZU9ic2VydmVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Jlc2l6ZU9ic2VydmVyLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBvbk1vdW50ZWQsIHJlZiwgc2hhbGxvd1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY2xhbXAsIGNvbnZlcnRUb1VuaXQsIGRlZmluZUNvbXBvbmVudCwgZ2V0RXZlbnRDb29yZGluYXRlcywgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkNvbG9yUGlja2VyQ2FudmFzUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjb2xvcjoge1xuICAgIHR5cGU6IE9iamVjdFxuICB9LFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgZG90U2l6ZToge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMTBcbiAgfSxcbiAgaGVpZ2h0OiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAxNTBcbiAgfSxcbiAgd2lkdGg6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDMwMFxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKVxufSwgJ1ZDb2xvclBpY2tlckNhbnZhcycpO1xuZXhwb3J0IGNvbnN0IFZDb2xvclBpY2tlckNhbnZhcyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdWQ29sb3JQaWNrZXJDYW52YXMnLFxuICBwcm9wczogbWFrZVZDb2xvclBpY2tlckNhbnZhc1Byb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTpjb2xvcic6IGNvbG9yID0+IHRydWUsXG4gICAgJ3VwZGF0ZTpwb3NpdGlvbic6IGh1ZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGVtaXRcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBpc0ludGVyYWN0aW5nID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAgY29uc3QgY2FudmFzUmVmID0gcmVmKCk7XG4gICAgY29uc3QgY2FudmFzV2lkdGggPSBzaGFsbG93UmVmKHBhcnNlRmxvYXQocHJvcHMud2lkdGgpKTtcbiAgICBjb25zdCBjYW52YXNIZWlnaHQgPSBzaGFsbG93UmVmKHBhcnNlRmxvYXQocHJvcHMuaGVpZ2h0KSk7XG4gICAgY29uc3QgX2RvdFBvc2l0aW9uID0gcmVmKHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfSk7XG4gICAgY29uc3QgZG90UG9zaXRpb24gPSBjb21wdXRlZCh7XG4gICAgICBnZXQ6ICgpID0+IF9kb3RQb3NpdGlvbi52YWx1ZSxcbiAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgaWYgKCFjYW52YXNSZWYudmFsdWUpIHJldHVybjtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHgsXG4gICAgICAgICAgeVxuICAgICAgICB9ID0gdmFsO1xuICAgICAgICBlbWl0KCd1cGRhdGU6Y29sb3InLCB7XG4gICAgICAgICAgaDogcHJvcHMuY29sb3I/LmggPz8gMCxcbiAgICAgICAgICBzOiBjbGFtcCh4LCAwLCBjYW52YXNXaWR0aC52YWx1ZSkgLyBjYW52YXNXaWR0aC52YWx1ZSxcbiAgICAgICAgICB2OiAxIC0gY2xhbXAoeSwgMCwgY2FudmFzSGVpZ2h0LnZhbHVlKSAvIGNhbnZhc0hlaWdodC52YWx1ZSxcbiAgICAgICAgICBhOiBwcm9wcy5jb2xvcj8uYSA/PyAxXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGRvdFN0eWxlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgeCxcbiAgICAgICAgeVxuICAgICAgfSA9IGRvdFBvc2l0aW9uLnZhbHVlO1xuICAgICAgY29uc3QgcmFkaXVzID0gcGFyc2VJbnQocHJvcHMuZG90U2l6ZSwgMTApIC8gMjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiBjb252ZXJ0VG9Vbml0KHByb3BzLmRvdFNpemUpLFxuICAgICAgICBoZWlnaHQ6IGNvbnZlcnRUb1VuaXQocHJvcHMuZG90U2l6ZSksXG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke2NvbnZlcnRUb1VuaXQoeCAtIHJhZGl1cyl9LCAke2NvbnZlcnRUb1VuaXQoeSAtIHJhZGl1cyl9KWBcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgcmVzaXplUmVmXG4gICAgfSA9IHVzZVJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgaWYgKCFyZXNpemVSZWYudmFsdWU/Lm9mZnNldFBhcmVudCkgcmV0dXJuO1xuICAgICAgY29uc3Qge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0XG4gICAgICB9ID0gZW50cmllc1swXS5jb250ZW50UmVjdDtcbiAgICAgIGNhbnZhc1dpZHRoLnZhbHVlID0gd2lkdGg7XG4gICAgICBjYW52YXNIZWlnaHQudmFsdWUgPSBoZWlnaHQ7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gdXBkYXRlRG90UG9zaXRpb24oeCwgeSwgcmVjdCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBsZWZ0LFxuICAgICAgICB0b3AsXG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHRcbiAgICAgIH0gPSByZWN0O1xuICAgICAgZG90UG9zaXRpb24udmFsdWUgPSB7XG4gICAgICAgIHg6IGNsYW1wKHggLSBsZWZ0LCAwLCB3aWR0aCksXG4gICAgICAgIHk6IGNsYW1wKHkgLSB0b3AsIDAsIGhlaWdodClcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgICBpZiAoZS50eXBlID09PSAnbW91c2Vkb3duJykge1xuICAgICAgICAvLyBQcmV2ZW50IHRleHQgc2VsZWN0aW9uIHdoaWxlIGRyYWdnaW5nXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgaGFuZGxlTW91c2VNb3ZlKGUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZU1vdXNlTW92ZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGhhbmRsZU1vdXNlVXApO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZU1vdXNlTW92ZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBoYW5kbGVNb3VzZVVwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlKGUpIHtcbiAgICAgIGlmIChwcm9wcy5kaXNhYmxlZCB8fCAhY2FudmFzUmVmLnZhbHVlKSByZXR1cm47XG4gICAgICBpc0ludGVyYWN0aW5nLnZhbHVlID0gdHJ1ZTtcbiAgICAgIGNvbnN0IGNvb3JkcyA9IGdldEV2ZW50Q29vcmRpbmF0ZXMoZSk7XG4gICAgICB1cGRhdGVEb3RQb3NpdGlvbihjb29yZHMuY2xpZW50WCwgY29vcmRzLmNsaWVudFksIGNhbnZhc1JlZi52YWx1ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZU1vdXNlVXAoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaGFuZGxlTW91c2VNb3ZlKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlTW91c2VVcCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlTW91c2VNb3ZlKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGhhbmRsZU1vdXNlVXApO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVDYW52YXMoKSB7XG4gICAgICBpZiAoIWNhbnZhc1JlZi52YWx1ZSkgcmV0dXJuO1xuICAgICAgY29uc3QgY2FudmFzID0gY2FudmFzUmVmLnZhbHVlO1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBpZiAoIWN0eCkgcmV0dXJuO1xuICAgICAgY29uc3Qgc2F0dXJhdGlvbkdyYWRpZW50ID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIDAsIGNhbnZhcy53aWR0aCwgMCk7XG4gICAgICBzYXR1cmF0aW9uR3JhZGllbnQuYWRkQ29sb3JTdG9wKDAsICdoc2xhKDAsIDAlLCAxMDAlLCAxKScpOyAvLyB3aGl0ZVxuICAgICAgc2F0dXJhdGlvbkdyYWRpZW50LmFkZENvbG9yU3RvcCgxLCBgaHNsYSgke3Byb3BzLmNvbG9yPy5oID8/IDB9LCAxMDAlLCA1MCUsIDEpYCk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gc2F0dXJhdGlvbkdyYWRpZW50O1xuICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICBjb25zdCB2YWx1ZUdyYWRpZW50ID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIDAsIDAsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgdmFsdWVHcmFkaWVudC5hZGRDb2xvclN0b3AoMCwgJ2hzbGEoMCwgMCUsIDEwMCUsIDApJyk7IC8vIHRyYW5zcGFyZW50XG4gICAgICB2YWx1ZUdyYWRpZW50LmFkZENvbG9yU3RvcCgxLCAnaHNsYSgwLCAwJSwgMCUsIDEpJyk7IC8vIGJsYWNrXG4gICAgICBjdHguZmlsbFN0eWxlID0gdmFsdWVHcmFkaWVudDtcbiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIH1cbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5jb2xvcj8uaCwgdXBkYXRlQ2FudmFzLCB7XG4gICAgICBpbW1lZGlhdGU6IHRydWVcbiAgICB9KTtcbiAgICB3YXRjaCgoKSA9PiBbY2FudmFzV2lkdGgudmFsdWUsIGNhbnZhc0hlaWdodC52YWx1ZV0sIChuZXdWYWwsIG9sZFZhbCkgPT4ge1xuICAgICAgdXBkYXRlQ2FudmFzKCk7XG4gICAgICBfZG90UG9zaXRpb24udmFsdWUgPSB7XG4gICAgICAgIHg6IGRvdFBvc2l0aW9uLnZhbHVlLnggKiBuZXdWYWxbMF0gLyBvbGRWYWxbMF0sXG4gICAgICAgIHk6IGRvdFBvc2l0aW9uLnZhbHVlLnkgKiBuZXdWYWxbMV0gLyBvbGRWYWxbMV1cbiAgICAgIH07XG4gICAgfSwge1xuICAgICAgZmx1c2g6ICdwb3N0J1xuICAgIH0pO1xuICAgIHdhdGNoKCgpID0+IHByb3BzLmNvbG9yLCAoKSA9PiB7XG4gICAgICBpZiAoaXNJbnRlcmFjdGluZy52YWx1ZSkge1xuICAgICAgICBpc0ludGVyYWN0aW5nLnZhbHVlID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIF9kb3RQb3NpdGlvbi52YWx1ZSA9IHByb3BzLmNvbG9yID8ge1xuICAgICAgICB4OiBwcm9wcy5jb2xvci5zICogY2FudmFzV2lkdGgudmFsdWUsXG4gICAgICAgIHk6ICgxIC0gcHJvcHMuY29sb3IudikgKiBjYW52YXNIZWlnaHQudmFsdWVcbiAgICAgIH0gOiB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDBcbiAgICAgIH07XG4gICAgfSwge1xuICAgICAgZGVlcDogdHJ1ZSxcbiAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuICAgIH0pO1xuICAgIG9uTW91bnRlZCgoKSA9PiB1cGRhdGVDYW52YXMoKSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcInJlZlwiOiByZXNpemVSZWYsXG4gICAgICBcImNsYXNzXCI6IFsndi1jb2xvci1waWNrZXItY2FudmFzJywgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZSxcbiAgICAgIFwib25Nb3VzZWRvd25cIjogaGFuZGxlTW91c2VEb3duLFxuICAgICAgXCJvblRvdWNoc3RhcnRQYXNzaXZlXCI6IGhhbmRsZU1vdXNlRG93blxuICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJjYW52YXNcIiwge1xuICAgICAgXCJyZWZcIjogY2FudmFzUmVmLFxuICAgICAgXCJ3aWR0aFwiOiBjYW52YXNXaWR0aC52YWx1ZSxcbiAgICAgIFwiaGVpZ2h0XCI6IGNhbnZhc0hlaWdodC52YWx1ZVxuICAgIH0sIG51bGwpLCBwcm9wcy5jb2xvciAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtY29sb3ItcGlja2VyLWNhbnZhc19fZG90Jywge1xuICAgICAgICAndi1jb2xvci1waWNrZXItY2FudmFzX19kb3QtLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWRcbiAgICAgIH1dLFxuICAgICAgXCJzdHlsZVwiOiBkb3RTdHlsZXMudmFsdWVcbiAgICB9LCBudWxsKV0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNvbG9yUGlja2VyQ2FudmFzLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IEhleFRvSFNWLCBIU0x0b0hTViwgSFNWdG9IZXgsIEhTVnRvSFNMLCBIU1Z0b1JHQiwgUkdCdG9IU1YgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbC9jb2xvclV0aWxzLm1qc1wiO1xuaW1wb3J0IHsgaGFzIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWwvaGVscGVycy5tanNcIjsgLy8gVHlwZXNcbmZ1bmN0aW9uIHN0cmlwQWxwaGEoY29sb3IsIHN0cmlwQWxwaGEpIHtcbiAgaWYgKHN0cmlwQWxwaGEpIHtcbiAgICBjb25zdCB7XG4gICAgICBhLFxuICAgICAgLi4ucmVzdFxuICAgIH0gPSBjb2xvcjtcbiAgICByZXR1cm4gcmVzdDtcbiAgfVxuICByZXR1cm4gY29sb3I7XG59XG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdENvbG9yKGNvbG9yLCBpbnB1dCkge1xuICBpZiAoaW5wdXQgPT0gbnVsbCB8fCB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgaGV4ID0gSFNWdG9IZXgoY29sb3IpO1xuICAgIGlmIChjb2xvci5hID09PSAxKSByZXR1cm4gaGV4LnNsaWNlKDAsIDcpO2Vsc2UgcmV0dXJuIGhleDtcbiAgfVxuICBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0Jykge1xuICAgIGxldCBjb252ZXJ0ZWQ7XG4gICAgaWYgKGhhcyhpbnB1dCwgWydyJywgJ2cnLCAnYiddKSkgY29udmVydGVkID0gSFNWdG9SR0IoY29sb3IpO2Vsc2UgaWYgKGhhcyhpbnB1dCwgWydoJywgJ3MnLCAnbCddKSkgY29udmVydGVkID0gSFNWdG9IU0woY29sb3IpO2Vsc2UgaWYgKGhhcyhpbnB1dCwgWydoJywgJ3MnLCAndiddKSkgY29udmVydGVkID0gY29sb3I7XG4gICAgcmV0dXJuIHN0cmlwQWxwaGEoY29udmVydGVkLCAhaGFzKGlucHV0LCBbJ2EnXSkgJiYgY29sb3IuYSA9PT0gMSk7XG4gIH1cbiAgcmV0dXJuIGNvbG9yO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc0FscGhhKGNvbG9yKSB7XG4gIGlmICghY29sb3IpIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gY29sb3IubGVuZ3RoID4gNztcbiAgfVxuICBpZiAodHlwZW9mIGNvbG9yID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBoYXMoY29sb3IsIFsnYSddKSB8fCBoYXMoY29sb3IsIFsnYWxwaGEnXSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGNvbnN0IG51bGxDb2xvciA9IHtcbiAgaDogMCxcbiAgczogMCxcbiAgdjogMSxcbiAgYTogMVxufTtcbmNvbnN0IHJnYmEgPSB7XG4gIGlucHV0UHJvcHM6IHtcbiAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICBtaW46IDBcbiAgfSxcbiAgaW5wdXRzOiBbe1xuICAgIGxhYmVsOiAnUicsXG4gICAgbWF4OiAyNTUsXG4gICAgc3RlcDogMSxcbiAgICBnZXRWYWx1ZTogYyA9PiBNYXRoLnJvdW5kKGMuciksXG4gICAgZ2V0Q29sb3I6IChjLCB2KSA9PiAoe1xuICAgICAgLi4uYyxcbiAgICAgIHI6IE51bWJlcih2KVxuICAgIH0pXG4gIH0sIHtcbiAgICBsYWJlbDogJ0cnLFxuICAgIG1heDogMjU1LFxuICAgIHN0ZXA6IDEsXG4gICAgZ2V0VmFsdWU6IGMgPT4gTWF0aC5yb3VuZChjLmcpLFxuICAgIGdldENvbG9yOiAoYywgdikgPT4gKHtcbiAgICAgIC4uLmMsXG4gICAgICBnOiBOdW1iZXIodilcbiAgICB9KVxuICB9LCB7XG4gICAgbGFiZWw6ICdCJyxcbiAgICBtYXg6IDI1NSxcbiAgICBzdGVwOiAxLFxuICAgIGdldFZhbHVlOiBjID0+IE1hdGgucm91bmQoYy5iKSxcbiAgICBnZXRDb2xvcjogKGMsIHYpID0+ICh7XG4gICAgICAuLi5jLFxuICAgICAgYjogTnVtYmVyKHYpXG4gICAgfSlcbiAgfSwge1xuICAgIGxhYmVsOiAnQScsXG4gICAgbWF4OiAxLFxuICAgIHN0ZXA6IDAuMDEsXG4gICAgZ2V0VmFsdWU6IF9yZWYgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgYVxuICAgICAgfSA9IF9yZWY7XG4gICAgICByZXR1cm4gYSAhPSBudWxsID8gTWF0aC5yb3VuZChhICogMTAwKSAvIDEwMCA6IDE7XG4gICAgfSxcbiAgICBnZXRDb2xvcjogKGMsIHYpID0+ICh7XG4gICAgICAuLi5jLFxuICAgICAgYTogTnVtYmVyKHYpXG4gICAgfSlcbiAgfV0sXG4gIHRvOiBIU1Z0b1JHQixcbiAgZnJvbTogUkdCdG9IU1Zcbn07XG5jb25zdCByZ2IgPSB7XG4gIC4uLnJnYmEsXG4gIGlucHV0czogcmdiYS5pbnB1dHM/LnNsaWNlKDAsIDMpXG59O1xuY29uc3QgaHNsYSA9IHtcbiAgaW5wdXRQcm9wczoge1xuICAgIHR5cGU6ICdudW1iZXInLFxuICAgIG1pbjogMFxuICB9LFxuICBpbnB1dHM6IFt7XG4gICAgbGFiZWw6ICdIJyxcbiAgICBtYXg6IDM2MCxcbiAgICBzdGVwOiAxLFxuICAgIGdldFZhbHVlOiBjID0+IE1hdGgucm91bmQoYy5oKSxcbiAgICBnZXRDb2xvcjogKGMsIHYpID0+ICh7XG4gICAgICAuLi5jLFxuICAgICAgaDogTnVtYmVyKHYpXG4gICAgfSlcbiAgfSwge1xuICAgIGxhYmVsOiAnUycsXG4gICAgbWF4OiAxLFxuICAgIHN0ZXA6IDAuMDEsXG4gICAgZ2V0VmFsdWU6IGMgPT4gTWF0aC5yb3VuZChjLnMgKiAxMDApIC8gMTAwLFxuICAgIGdldENvbG9yOiAoYywgdikgPT4gKHtcbiAgICAgIC4uLmMsXG4gICAgICBzOiBOdW1iZXIodilcbiAgICB9KVxuICB9LCB7XG4gICAgbGFiZWw6ICdMJyxcbiAgICBtYXg6IDEsXG4gICAgc3RlcDogMC4wMSxcbiAgICBnZXRWYWx1ZTogYyA9PiBNYXRoLnJvdW5kKGMubCAqIDEwMCkgLyAxMDAsXG4gICAgZ2V0Q29sb3I6IChjLCB2KSA9PiAoe1xuICAgICAgLi4uYyxcbiAgICAgIGw6IE51bWJlcih2KVxuICAgIH0pXG4gIH0sIHtcbiAgICBsYWJlbDogJ0EnLFxuICAgIG1heDogMSxcbiAgICBzdGVwOiAwLjAxLFxuICAgIGdldFZhbHVlOiBfcmVmMiA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBhXG4gICAgICB9ID0gX3JlZjI7XG4gICAgICByZXR1cm4gYSAhPSBudWxsID8gTWF0aC5yb3VuZChhICogMTAwKSAvIDEwMCA6IDE7XG4gICAgfSxcbiAgICBnZXRDb2xvcjogKGMsIHYpID0+ICh7XG4gICAgICAuLi5jLFxuICAgICAgYTogTnVtYmVyKHYpXG4gICAgfSlcbiAgfV0sXG4gIHRvOiBIU1Z0b0hTTCxcbiAgZnJvbTogSFNMdG9IU1Zcbn07XG5jb25zdCBoc2wgPSB7XG4gIC4uLmhzbGEsXG4gIGlucHV0czogaHNsYS5pbnB1dHMuc2xpY2UoMCwgMylcbn07XG5jb25zdCBoZXhhID0ge1xuICBpbnB1dFByb3BzOiB7XG4gICAgdHlwZTogJ3RleHQnXG4gIH0sXG4gIGlucHV0czogW3tcbiAgICBsYWJlbDogJ0hFWEEnLFxuICAgIGdldFZhbHVlOiBjID0+IGMsXG4gICAgZ2V0Q29sb3I6IChjLCB2KSA9PiB2XG4gIH1dLFxuICB0bzogSFNWdG9IZXgsXG4gIGZyb206IEhleFRvSFNWXG59O1xuY29uc3QgaGV4ID0ge1xuICAuLi5oZXhhLFxuICBpbnB1dHM6IFt7XG4gICAgbGFiZWw6ICdIRVgnLFxuICAgIGdldFZhbHVlOiBjID0+IGMuc2xpY2UoMCwgNyksXG4gICAgZ2V0Q29sb3I6IChjLCB2KSA9PiB2XG4gIH1dXG59O1xuZXhwb3J0IGNvbnN0IG1vZGVzID0ge1xuICByZ2IsXG4gIHJnYmEsXG4gIGhzbCxcbiAgaHNsYSxcbiAgaGV4LFxuICBoZXhhXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQ29sb3JQaWNrZXJFZGl0LmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQnRuIH0gZnJvbSBcIi4uL1ZCdG4vaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IG1vZGVzLCBudWxsQ29sb3IgfSBmcm9tIFwiLi91dGlsL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3QgVkNvbG9yUGlja2VySW5wdXQgPSBfcmVmID0+IHtcbiAgbGV0IHtcbiAgICBsYWJlbCxcbiAgICAuLi5yZXN0XG4gIH0gPSBfcmVmO1xuICByZXR1cm4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICBcImNsYXNzXCI6IFwidi1jb2xvci1waWNrZXItZWRpdF9faW5wdXRcIlxuICB9LCBbX2NyZWF0ZVZOb2RlKFwiaW5wdXRcIiwgcmVzdCwgbnVsbCksIF9jcmVhdGVWTm9kZShcInNwYW5cIiwgbnVsbCwgW2xhYmVsXSldKTtcbn07XG5leHBvcnQgY29uc3QgbWFrZVZDb2xvclBpY2tlckVkaXRQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbG9yOiBPYmplY3QsXG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICBtb2RlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdyZ2JhJyxcbiAgICB2YWxpZGF0b3I6IHYgPT4gT2JqZWN0LmtleXMobW9kZXMpLmluY2x1ZGVzKHYpXG4gIH0sXG4gIG1vZGVzOiB7XG4gICAgdHlwZTogQXJyYXksXG4gICAgZGVmYXVsdDogKCkgPT4gT2JqZWN0LmtleXMobW9kZXMpLFxuICAgIHZhbGlkYXRvcjogdiA9PiBBcnJheS5pc0FycmF5KHYpICYmIHYuZXZlcnkobSA9PiBPYmplY3Qua2V5cyhtb2RlcykuaW5jbHVkZXMobSkpXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpXG59LCAnVkNvbG9yUGlja2VyRWRpdCcpO1xuZXhwb3J0IGNvbnN0IFZDb2xvclBpY2tlckVkaXQgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnVkNvbG9yUGlja2VyRWRpdCcsXG4gIHByb3BzOiBtYWtlVkNvbG9yUGlja2VyRWRpdFByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTpjb2xvcic6IGNvbG9yID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlJzogbW9kZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmMikge1xuICAgIGxldCB7XG4gICAgICBlbWl0XG4gICAgfSA9IF9yZWYyO1xuICAgIGNvbnN0IGVuYWJsZWRNb2RlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5tb2Rlcy5tYXAoa2V5ID0+ICh7XG4gICAgICAgIC4uLm1vZGVzW2tleV0sXG4gICAgICAgIG5hbWU6IGtleVxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIGNvbnN0IGlucHV0cyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IG1vZGUgPSBlbmFibGVkTW9kZXMudmFsdWUuZmluZChtID0+IG0ubmFtZSA9PT0gcHJvcHMubW9kZSk7XG4gICAgICBpZiAoIW1vZGUpIHJldHVybiBbXTtcbiAgICAgIGNvbnN0IGNvbG9yID0gcHJvcHMuY29sb3IgPyBtb2RlLnRvKHByb3BzLmNvbG9yKSA6IG51bGw7XG4gICAgICByZXR1cm4gbW9kZS5pbnB1dHM/Lm1hcChfcmVmMyA9PiB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgZ2V0VmFsdWUsXG4gICAgICAgICAgZ2V0Q29sb3IsXG4gICAgICAgICAgLi4uaW5wdXRQcm9wc1xuICAgICAgICB9ID0gX3JlZjM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4ubW9kZS5pbnB1dFByb3BzLFxuICAgICAgICAgIC4uLmlucHV0UHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIHZhbHVlOiBjb2xvciAmJiBnZXRWYWx1ZShjb2xvciksXG4gICAgICAgICAgb25DaGFuZ2U6IGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICAgICAgICAgICAgZW1pdCgndXBkYXRlOmNvbG9yJywgbW9kZS5mcm9tKGdldENvbG9yKGNvbG9yID8/IG51bGxDb2xvciwgdGFyZ2V0LnZhbHVlKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtY29sb3ItcGlja2VyLWVkaXQnLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgfSwgW2lucHV0cy52YWx1ZT8ubWFwKHByb3BzID0+IF9jcmVhdGVWTm9kZShWQ29sb3JQaWNrZXJJbnB1dCwgcHJvcHMsIG51bGwpKSwgZW5hYmxlZE1vZGVzLnZhbHVlLmxlbmd0aCA+IDEgJiYgX2NyZWF0ZVZOb2RlKFZCdG4sIHtcbiAgICAgIFwiaWNvblwiOiBcIiR1bmZvbGRcIixcbiAgICAgIFwic2l6ZVwiOiBcIngtc21hbGxcIixcbiAgICAgIFwidmFyaWFudFwiOiBcInBsYWluXCIsXG4gICAgICBcIm9uQ2xpY2tcIjogKCkgPT4ge1xuICAgICAgICBjb25zdCBtaSA9IGVuYWJsZWRNb2Rlcy52YWx1ZS5maW5kSW5kZXgobSA9PiBtLm5hbWUgPT09IHByb3BzLm1vZGUpO1xuICAgICAgICBlbWl0KCd1cGRhdGU6bW9kZScsIGVuYWJsZWRNb2Rlcy52YWx1ZVsobWkgKyAxKSAlIGVuYWJsZWRNb2Rlcy52YWx1ZS5sZW5ndGhdLm5hbWUpO1xuICAgICAgfVxuICAgIH0sIG51bGwpXSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ29sb3JQaWNrZXJFZGl0Lm1qcy5tYXAiLCIvKiBlc2xpbnQtZGlzYWJsZSBtYXgtc3RhdGVtZW50cyAqL1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzXCI7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdW5kZWRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBwcm92aWRlLCByZWYsIHNoYWxsb3dSZWYsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNsYW1wLCBjcmVhdGVSYW5nZSwgZ2V0RGVjaW1hbHMsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IFZTbGlkZXJTeW1ib2wgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5OnYtc2xpZGVyJyk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0T2Zmc2V0KGUsIGVsLCBkaXJlY3Rpb24pIHtcbiAgY29uc3QgdmVydGljYWwgPSBkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgdG91Y2ggPSAndG91Y2hlcycgaW4gZSA/IGUudG91Y2hlc1swXSA6IGU7XG4gIHJldHVybiB2ZXJ0aWNhbCA/IHRvdWNoLmNsaWVudFkgLSAocmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDIpIDogdG91Y2guY2xpZW50WCAtIChyZWN0LmxlZnQgKyByZWN0LndpZHRoIC8gMik7XG59XG5mdW5jdGlvbiBnZXRQb3NpdGlvbihlLCBwb3NpdGlvbikge1xuICBpZiAoJ3RvdWNoZXMnIGluIGUgJiYgZS50b3VjaGVzLmxlbmd0aCkgcmV0dXJuIGUudG91Y2hlc1swXVtwb3NpdGlvbl07ZWxzZSBpZiAoJ2NoYW5nZWRUb3VjaGVzJyBpbiBlICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoKSByZXR1cm4gZS5jaGFuZ2VkVG91Y2hlc1swXVtwb3NpdGlvbl07ZWxzZSByZXR1cm4gZVtwb3NpdGlvbl07XG59XG5leHBvcnQgY29uc3QgbWFrZVNsaWRlclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZGlzYWJsZWQ6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgZXJyb3I6IEJvb2xlYW4sXG4gIHJlYWRvbmx5OiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIG1heDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMTAwXG4gIH0sXG4gIG1pbjoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICBzdGVwOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAwXG4gIH0sXG4gIHRodW1iQ29sb3I6IFN0cmluZyxcbiAgdGh1bWJMYWJlbDoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZCxcbiAgICB2YWxpZGF0b3I6IHYgPT4gdHlwZW9mIHYgPT09ICdib29sZWFuJyB8fCB2ID09PSAnYWx3YXlzJ1xuICB9LFxuICB0aHVtYlNpemU6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDIwXG4gIH0sXG4gIHNob3dUaWNrczoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHZhbGlkYXRvcjogdiA9PiB0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nIHx8IHYgPT09ICdhbHdheXMnXG4gIH0sXG4gIHRpY2tzOiB7XG4gICAgdHlwZTogW0FycmF5LCBPYmplY3RdXG4gIH0sXG4gIHRpY2tTaXplOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAyXG4gIH0sXG4gIGNvbG9yOiBTdHJpbmcsXG4gIHRyYWNrQ29sb3I6IFN0cmluZyxcbiAgdHJhY2tGaWxsQ29sb3I6IFN0cmluZyxcbiAgdHJhY2tTaXplOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiA0XG4gIH0sXG4gIGRpcmVjdGlvbjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnaG9yaXpvbnRhbCcsXG4gICAgdmFsaWRhdG9yOiB2ID0+IFsndmVydGljYWwnLCAnaG9yaXpvbnRhbCddLmluY2x1ZGVzKHYpXG4gIH0sXG4gIHJldmVyc2U6IEJvb2xlYW4sXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKHtcbiAgICBlbGV2YXRpb246IDJcbiAgfSlcbn0sICdTbGlkZXInKTtcbmV4cG9ydCBjb25zdCB1c2VTdGVwcyA9IHByb3BzID0+IHtcbiAgY29uc3QgbWluID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VGbG9hdChwcm9wcy5taW4pKTtcbiAgY29uc3QgbWF4ID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VGbG9hdChwcm9wcy5tYXgpKTtcbiAgY29uc3Qgc3RlcCA9IGNvbXB1dGVkKCgpID0+ICtwcm9wcy5zdGVwID4gMCA/IHBhcnNlRmxvYXQocHJvcHMuc3RlcCkgOiAwKTtcbiAgY29uc3QgZGVjaW1hbHMgPSBjb21wdXRlZCgoKSA9PiBNYXRoLm1heChnZXREZWNpbWFscyhzdGVwLnZhbHVlKSwgZ2V0RGVjaW1hbHMobWluLnZhbHVlKSkpO1xuICBmdW5jdGlvbiByb3VuZFZhbHVlKHZhbHVlKSB7XG4gICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICBpZiAoc3RlcC52YWx1ZSA8PSAwKSByZXR1cm4gdmFsdWU7XG4gICAgY29uc3QgY2xhbXBlZCA9IGNsYW1wKHZhbHVlLCBtaW4udmFsdWUsIG1heC52YWx1ZSk7XG4gICAgY29uc3Qgb2Zmc2V0ID0gbWluLnZhbHVlICUgc3RlcC52YWx1ZTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IE1hdGgucm91bmQoKGNsYW1wZWQgLSBvZmZzZXQpIC8gc3RlcC52YWx1ZSkgKiBzdGVwLnZhbHVlICsgb2Zmc2V0O1xuICAgIHJldHVybiBwYXJzZUZsb2F0KE1hdGgubWluKG5ld1ZhbHVlLCBtYXgudmFsdWUpLnRvRml4ZWQoZGVjaW1hbHMudmFsdWUpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1pbixcbiAgICBtYXgsXG4gICAgc3RlcCxcbiAgICBkZWNpbWFscyxcbiAgICByb3VuZFZhbHVlXG4gIH07XG59O1xuZXhwb3J0IGNvbnN0IHVzZVNsaWRlciA9IF9yZWYgPT4ge1xuICBsZXQge1xuICAgIHByb3BzLFxuICAgIHN0ZXBzLFxuICAgIG9uU2xpZGVyU3RhcnQsXG4gICAgb25TbGlkZXJNb3ZlLFxuICAgIG9uU2xpZGVyRW5kLFxuICAgIGdldEFjdGl2ZVRodW1iXG4gIH0gPSBfcmVmO1xuICBjb25zdCB7XG4gICAgaXNSdGxcbiAgfSA9IHVzZVJ0bCgpO1xuICBjb25zdCBpc1JldmVyc2VkID0gdG9SZWYocHJvcHMsICdyZXZlcnNlJyk7XG4gIGNvbnN0IGhvcml6b250YWxEaXJlY3Rpb24gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IGhkID0gaXNSdGwudmFsdWUgPyAncnRsJyA6ICdsdHInO1xuICAgIGlmIChwcm9wcy5yZXZlcnNlKSB7XG4gICAgICBoZCA9IGhkID09PSAncnRsJyA/ICdsdHInIDogJ3J0bCc7XG4gICAgfVxuICAgIHJldHVybiBoZDtcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICBtaW4sXG4gICAgbWF4LFxuICAgIHN0ZXAsXG4gICAgZGVjaW1hbHMsXG4gICAgcm91bmRWYWx1ZVxuICB9ID0gc3RlcHM7XG4gIGNvbnN0IHRodW1iU2l6ZSA9IGNvbXB1dGVkKCgpID0+IHBhcnNlSW50KHByb3BzLnRodW1iU2l6ZSwgMTApKTtcbiAgY29uc3QgdGlja1NpemUgPSBjb21wdXRlZCgoKSA9PiBwYXJzZUludChwcm9wcy50aWNrU2l6ZSwgMTApKTtcbiAgY29uc3QgdHJhY2tTaXplID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VJbnQocHJvcHMudHJhY2tTaXplLCAxMCkpO1xuICBjb25zdCBudW1UaWNrcyA9IGNvbXB1dGVkKCgpID0+IChtYXgudmFsdWUgLSBtaW4udmFsdWUpIC8gc3RlcC52YWx1ZSk7XG4gIGNvbnN0IGRpc2FibGVkID0gdG9SZWYocHJvcHMsICdkaXNhYmxlZCcpO1xuICBjb25zdCB2ZXJ0aWNhbCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJyk7XG4gIGNvbnN0IHRodW1iQ29sb3IgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5lcnJvciB8fCBwcm9wcy5kaXNhYmxlZCA/IHVuZGVmaW5lZCA6IHByb3BzLnRodW1iQ29sb3IgPz8gcHJvcHMuY29sb3IpO1xuICBjb25zdCB0cmFja0NvbG9yID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuZXJyb3IgfHwgcHJvcHMuZGlzYWJsZWQgPyB1bmRlZmluZWQgOiBwcm9wcy50cmFja0NvbG9yID8/IHByb3BzLmNvbG9yKTtcbiAgY29uc3QgdHJhY2tGaWxsQ29sb3IgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5lcnJvciB8fCBwcm9wcy5kaXNhYmxlZCA/IHVuZGVmaW5lZCA6IHByb3BzLnRyYWNrRmlsbENvbG9yID8/IHByb3BzLmNvbG9yKTtcbiAgY29uc3QgbW91c2VQcmVzc2VkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gc2hhbGxvd1JlZigwKTtcbiAgY29uc3QgdHJhY2tDb250YWluZXJSZWYgPSByZWYoKTtcbiAgY29uc3QgYWN0aXZlVGh1bWJSZWYgPSByZWYoKTtcbiAgZnVuY3Rpb24gcGFyc2VNb3VzZU1vdmUoZSkge1xuICAgIGNvbnN0IHZlcnRpY2FsID0gcHJvcHMuZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICAgIGNvbnN0IHN0YXJ0ID0gdmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JztcbiAgICBjb25zdCBsZW5ndGggPSB2ZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICBjb25zdCBwb3NpdGlvbiA9IHZlcnRpY2FsID8gJ2NsaWVudFknIDogJ2NsaWVudFgnO1xuICAgIGNvbnN0IHtcbiAgICAgIFtzdGFydF06IHRyYWNrU3RhcnQsXG4gICAgICBbbGVuZ3RoXTogdHJhY2tMZW5ndGhcbiAgICB9ID0gdHJhY2tDb250YWluZXJSZWYudmFsdWU/LiRlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBjbGlja09mZnNldCA9IGdldFBvc2l0aW9uKGUsIHBvc2l0aW9uKTtcblxuICAgIC8vIEl0IGlzIHBvc3NpYmxlIGZvciBsZWZ0IHRvIGJlIE5hTiwgZm9yY2UgdG8gbnVtYmVyXG4gICAgbGV0IGNsaWNrUG9zID0gTWF0aC5taW4oTWF0aC5tYXgoKGNsaWNrT2Zmc2V0IC0gdHJhY2tTdGFydCAtIHN0YXJ0T2Zmc2V0LnZhbHVlKSAvIHRyYWNrTGVuZ3RoLCAwKSwgMSkgfHwgMDtcbiAgICBpZiAodmVydGljYWwgfHwgaG9yaXpvbnRhbERpcmVjdGlvbi52YWx1ZSA9PT0gJ3J0bCcpIGNsaWNrUG9zID0gMSAtIGNsaWNrUG9zO1xuICAgIHJldHVybiByb3VuZFZhbHVlKG1pbi52YWx1ZSArIGNsaWNrUG9zICogKG1heC52YWx1ZSAtIG1pbi52YWx1ZSkpO1xuICB9XG4gIGNvbnN0IGhhbmRsZVN0b3AgPSBlID0+IHtcbiAgICBvblNsaWRlckVuZCh7XG4gICAgICB2YWx1ZTogcGFyc2VNb3VzZU1vdmUoZSlcbiAgICB9KTtcbiAgICBtb3VzZVByZXNzZWQudmFsdWUgPSBmYWxzZTtcbiAgICBzdGFydE9mZnNldC52YWx1ZSA9IDA7XG4gIH07XG4gIGNvbnN0IGhhbmRsZVN0YXJ0ID0gZSA9PiB7XG4gICAgYWN0aXZlVGh1bWJSZWYudmFsdWUgPSBnZXRBY3RpdmVUaHVtYihlKTtcbiAgICBpZiAoIWFjdGl2ZVRodW1iUmVmLnZhbHVlKSByZXR1cm47XG4gICAgYWN0aXZlVGh1bWJSZWYudmFsdWUuZm9jdXMoKTtcbiAgICBtb3VzZVByZXNzZWQudmFsdWUgPSB0cnVlO1xuICAgIGlmIChhY3RpdmVUaHVtYlJlZi52YWx1ZS5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgIHN0YXJ0T2Zmc2V0LnZhbHVlID0gZ2V0T2Zmc2V0KGUsIGFjdGl2ZVRodW1iUmVmLnZhbHVlLCBwcm9wcy5kaXJlY3Rpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydE9mZnNldC52YWx1ZSA9IDA7XG4gICAgICBvblNsaWRlck1vdmUoe1xuICAgICAgICB2YWx1ZTogcGFyc2VNb3VzZU1vdmUoZSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBvblNsaWRlclN0YXJ0KHtcbiAgICAgIHZhbHVlOiBwYXJzZU1vdXNlTW92ZShlKVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBtb3ZlTGlzdGVuZXJPcHRpb25zID0ge1xuICAgIHBhc3NpdmU6IHRydWUsXG4gICAgY2FwdHVyZTogdHJ1ZVxuICB9O1xuICBmdW5jdGlvbiBvbk1vdXNlTW92ZShlKSB7XG4gICAgb25TbGlkZXJNb3ZlKHtcbiAgICAgIHZhbHVlOiBwYXJzZU1vdXNlTW92ZShlKVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9uU2xpZGVyTW91c2VVcChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaGFuZGxlU3RvcChlKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUsIG1vdmVMaXN0ZW5lck9wdGlvbnMpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25TbGlkZXJNb3VzZVVwKTtcbiAgfVxuICBmdW5jdGlvbiBvblNsaWRlclRvdWNoZW5kKGUpIHtcbiAgICBoYW5kbGVTdG9wKGUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvbk1vdXNlTW92ZSwgbW92ZUxpc3RlbmVyT3B0aW9ucyk7XG4gICAgZS50YXJnZXQ/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25TbGlkZXJUb3VjaGVuZCk7XG4gIH1cbiAgZnVuY3Rpb24gb25TbGlkZXJUb3VjaHN0YXJ0KGUpIHtcbiAgICBoYW5kbGVTdGFydChlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Nb3VzZU1vdmUsIG1vdmVMaXN0ZW5lck9wdGlvbnMpO1xuICAgIGUudGFyZ2V0Py5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uU2xpZGVyVG91Y2hlbmQsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gb25TbGlkZXJNb3VzZWRvd24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBoYW5kbGVTdGFydChlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUsIG1vdmVMaXN0ZW5lck9wdGlvbnMpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25TbGlkZXJNb3VzZVVwLCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIGNvbnN0IHBvc2l0aW9uID0gdmFsID0+IHtcbiAgICBjb25zdCBwZXJjZW50YWdlID0gKHZhbCAtIG1pbi52YWx1ZSkgLyAobWF4LnZhbHVlIC0gbWluLnZhbHVlKSAqIDEwMDtcbiAgICByZXR1cm4gY2xhbXAoaXNOYU4ocGVyY2VudGFnZSkgPyAwIDogcGVyY2VudGFnZSwgMCwgMTAwKTtcbiAgfTtcbiAgY29uc3Qgc2hvd1RpY2tzID0gdG9SZWYocHJvcHMsICdzaG93VGlja3MnKTtcbiAgY29uc3QgcGFyc2VkVGlja3MgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKCFzaG93VGlja3MudmFsdWUpIHJldHVybiBbXTtcbiAgICBpZiAoIXByb3BzLnRpY2tzKSB7XG4gICAgICByZXR1cm4gbnVtVGlja3MudmFsdWUgIT09IEluZmluaXR5ID8gY3JlYXRlUmFuZ2UobnVtVGlja3MudmFsdWUgKyAxKS5tYXAodCA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gbWluLnZhbHVlICsgdCAqIHN0ZXAudmFsdWU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKHZhbHVlKVxuICAgICAgICB9O1xuICAgICAgfSkgOiBbXTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMudGlja3MpKSByZXR1cm4gcHJvcHMudGlja3MubWFwKHQgPT4gKHtcbiAgICAgIHZhbHVlOiB0LFxuICAgICAgcG9zaXRpb246IHBvc2l0aW9uKHQpLFxuICAgICAgbGFiZWw6IHQudG9TdHJpbmcoKVxuICAgIH0pKTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMudGlja3MpLm1hcChrZXkgPT4gKHtcbiAgICAgIHZhbHVlOiBwYXJzZUZsb2F0KGtleSksXG4gICAgICBwb3NpdGlvbjogcG9zaXRpb24ocGFyc2VGbG9hdChrZXkpKSxcbiAgICAgIGxhYmVsOiBwcm9wcy50aWNrc1trZXldXG4gICAgfSkpO1xuICB9KTtcbiAgY29uc3QgaGFzTGFiZWxzID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VkVGlja3MudmFsdWUuc29tZShfcmVmMiA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGxhYmVsXG4gICAgfSA9IF9yZWYyO1xuICAgIHJldHVybiAhIWxhYmVsO1xuICB9KSk7XG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgYWN0aXZlVGh1bWJSZWYsXG4gICAgY29sb3I6IHRvUmVmKHByb3BzLCAnY29sb3InKSxcbiAgICBkZWNpbWFscyxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXJlY3Rpb246IHRvUmVmKHByb3BzLCAnZGlyZWN0aW9uJyksXG4gICAgZWxldmF0aW9uOiB0b1JlZihwcm9wcywgJ2VsZXZhdGlvbicpLFxuICAgIGhhc0xhYmVscyxcbiAgICBob3Jpem9udGFsRGlyZWN0aW9uLFxuICAgIGlzUmV2ZXJzZWQsXG4gICAgbWluLFxuICAgIG1heCxcbiAgICBtb3VzZVByZXNzZWQsXG4gICAgbnVtVGlja3MsXG4gICAgb25TbGlkZXJNb3VzZWRvd24sXG4gICAgb25TbGlkZXJUb3VjaHN0YXJ0LFxuICAgIHBhcnNlZFRpY2tzLFxuICAgIHBhcnNlTW91c2VNb3ZlLFxuICAgIHBvc2l0aW9uLFxuICAgIHJlYWRvbmx5OiB0b1JlZihwcm9wcywgJ3JlYWRvbmx5JyksXG4gICAgcm91bmRlZDogdG9SZWYocHJvcHMsICdyb3VuZGVkJyksXG4gICAgcm91bmRWYWx1ZSxcbiAgICBzaG93VGlja3MsXG4gICAgc3RhcnRPZmZzZXQsXG4gICAgc3RlcCxcbiAgICB0aHVtYlNpemUsXG4gICAgdGh1bWJDb2xvcixcbiAgICB0aHVtYkxhYmVsOiB0b1JlZihwcm9wcywgJ3RodW1iTGFiZWwnKSxcbiAgICB0aWNrczogdG9SZWYocHJvcHMsICd0aWNrcycpLFxuICAgIHRpY2tTaXplLFxuICAgIHRyYWNrQ29sb3IsXG4gICAgdHJhY2tDb250YWluZXJSZWYsXG4gICAgdHJhY2tGaWxsQ29sb3IsXG4gICAgdHJhY2tTaXplLFxuICAgIHZlcnRpY2FsXG4gIH07XG4gIHByb3ZpZGUoVlNsaWRlclN5bWJvbCwgZGF0YSk7XG4gIHJldHVybiBkYXRhO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNsaWRlci5tanMubWFwIiwiaW1wb3J0IHsgdlNob3cgYXMgX3ZTaG93LCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WU2xpZGVyVGh1bWIuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZTbGlkZXJTeW1ib2wgfSBmcm9tIFwiLi9zbGlkZXIubWpzXCI7XG5pbXBvcnQgeyBWU2NhbGVUcmFuc2l0aW9uIH0gZnJvbSBcIi4uL3RyYW5zaXRpb25zL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlVGV4dENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHVzZUVsZXZhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzXCI7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiOyAvLyBEaXJlY3RpdmVzXG5pbXBvcnQgUmlwcGxlIGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL3JpcHBsZS9pbmRleC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaW5qZWN0IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQsIGdlbmVyaWNDb21wb25lbnQsIGtleVZhbHVlcywgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVlNsaWRlclRodW1iUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBmb2N1c2VkOiBCb29sZWFuLFxuICBtYXg6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgbWluOiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIHJlcXVpcmVkOiB0cnVlXG4gIH0sXG4gIG1vZGVsVmFsdWU6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgcG9zaXRpb246IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgcmlwcGxlOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIE9iamVjdF0sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKVxufSwgJ1ZTbGlkZXJUaHVtYicpO1xuZXhwb3J0IGNvbnN0IFZTbGlkZXJUaHVtYiA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWU2xpZGVyVGh1bWInLFxuICBkaXJlY3RpdmVzOiB7XG4gICAgUmlwcGxlXG4gIH0sXG4gIHByb3BzOiBtYWtlVlNsaWRlclRodW1iUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2ID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHMsXG4gICAgICBlbWl0XG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qgc2xpZGVyID0gaW5qZWN0KFZTbGlkZXJTeW1ib2wpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJ0bENsYXNzZXNcbiAgICB9ID0gdXNlUnRsKCk7XG4gICAgaWYgKCFzbGlkZXIpIHRocm93IG5ldyBFcnJvcignW1Z1ZXRpZnldIHYtc2xpZGVyLXRodW1iIG11c3QgYmUgdXNlZCBpbnNpZGUgdi1zbGlkZXIgb3Igdi1yYW5nZS1zbGlkZXInKTtcbiAgICBjb25zdCB7XG4gICAgICB0aHVtYkNvbG9yLFxuICAgICAgc3RlcCxcbiAgICAgIHZlcnRpY2FsLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICB0aHVtYlNpemUsXG4gICAgICB0aHVtYkxhYmVsLFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgcmVhZG9ubHksXG4gICAgICBlbGV2YXRpb24sXG4gICAgICBpc1JldmVyc2VkLFxuICAgICAgaG9yaXpvbnRhbERpcmVjdGlvbixcbiAgICAgIG1vdXNlUHJlc3NlZCxcbiAgICAgIGRlY2ltYWxzXG4gICAgfSA9IHNsaWRlcjtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzLFxuICAgICAgdGV4dENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcih0aHVtYkNvbG9yKTtcbiAgICBjb25zdCB7XG4gICAgICBwYWdldXAsXG4gICAgICBwYWdlZG93bixcbiAgICAgIGVuZCxcbiAgICAgIGhvbWUsXG4gICAgICBsZWZ0LFxuICAgICAgcmlnaHQsXG4gICAgICBkb3duLFxuICAgICAgdXBcbiAgICB9ID0ga2V5VmFsdWVzO1xuICAgIGNvbnN0IHJlbGV2YW50S2V5cyA9IFtwYWdldXAsIHBhZ2Vkb3duLCBlbmQsIGhvbWUsIGxlZnQsIHJpZ2h0LCBkb3duLCB1cF07XG4gICAgY29uc3QgbXVsdGlwbGllcnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAoc3RlcC52YWx1ZSkgcmV0dXJuIFsxLCAyLCAzXTtlbHNlIHJldHVybiBbMSwgNSwgMTBdO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIHBhcnNlS2V5ZG93bihlLCB2YWx1ZSkge1xuICAgICAgaWYgKCFyZWxldmFudEtleXMuaW5jbHVkZXMoZS5rZXkpKSByZXR1cm47XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBfc3RlcCA9IHN0ZXAudmFsdWUgfHwgMC4xO1xuICAgICAgY29uc3Qgc3RlcHMgPSAocHJvcHMubWF4IC0gcHJvcHMubWluKSAvIF9zdGVwO1xuICAgICAgaWYgKFtsZWZ0LCByaWdodCwgZG93biwgdXBdLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICBjb25zdCBpbmNyZWFzZSA9IGhvcml6b250YWxEaXJlY3Rpb24udmFsdWUgPT09ICdydGwnID8gW2xlZnQsIHVwXSA6IFtyaWdodCwgdXBdO1xuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBpbmNyZWFzZS5pbmNsdWRlcyhlLmtleSkgPyAxIDogLTE7XG4gICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSBlLnNoaWZ0S2V5ID8gMiA6IGUuY3RybEtleSA/IDEgOiAwO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlICsgZGlyZWN0aW9uICogX3N0ZXAgKiBtdWx0aXBsaWVycy52YWx1ZVttdWx0aXBsaWVyXTtcbiAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09IGhvbWUpIHtcbiAgICAgICAgdmFsdWUgPSBwcm9wcy5taW47XG4gICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSBlbmQpIHtcbiAgICAgICAgdmFsdWUgPSBwcm9wcy5tYXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBlLmtleSA9PT0gcGFnZWRvd24gPyAxIDogLTE7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgLSBkaXJlY3Rpb24gKiBfc3RlcCAqIChzdGVwcyA+IDEwMCA/IHN0ZXBzIC8gMTAgOiAxMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gTWF0aC5tYXgocHJvcHMubWluLCBNYXRoLm1pbihwcm9wcy5tYXgsIHZhbHVlKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uS2V5ZG93bihlKSB7XG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IHBhcnNlS2V5ZG93bihlLCBwcm9wcy5tb2RlbFZhbHVlKTtcbiAgICAgIG5ld1ZhbHVlICE9IG51bGwgJiYgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBuZXdWYWx1ZSk7XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBwb3NpdGlvblBlcmNlbnRhZ2UgPSBjb252ZXJ0VG9Vbml0KHZlcnRpY2FsLnZhbHVlIHx8IGlzUmV2ZXJzZWQudmFsdWUgPyAxMDAgLSBwcm9wcy5wb3NpdGlvbiA6IHByb3BzLnBvc2l0aW9uLCAnJScpO1xuICAgICAgY29uc3Qge1xuICAgICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgICB9ID0gdXNlRWxldmF0aW9uKGNvbXB1dGVkKCgpID0+ICFkaXNhYmxlZC52YWx1ZSA/IGVsZXZhdGlvbi52YWx1ZSA6IHVuZGVmaW5lZCkpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXNsaWRlci10aHVtYicsIHtcbiAgICAgICAgICAndi1zbGlkZXItdGh1bWItLWZvY3VzZWQnOiBwcm9wcy5mb2N1c2VkLFxuICAgICAgICAgICd2LXNsaWRlci10aHVtYi0tcHJlc3NlZCc6IHByb3BzLmZvY3VzZWQgJiYgbW91c2VQcmVzc2VkLnZhbHVlXG4gICAgICAgIH0sIHByb3BzLmNsYXNzLCBydGxDbGFzc2VzLnZhbHVlXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbe1xuICAgICAgICAgICctLXYtc2xpZGVyLXRodW1iLXBvc2l0aW9uJzogcG9zaXRpb25QZXJjZW50YWdlLFxuICAgICAgICAgICctLXYtc2xpZGVyLXRodW1iLXNpemUnOiBjb252ZXJ0VG9Vbml0KHRodW1iU2l6ZS52YWx1ZSlcbiAgICAgICAgfSwgcHJvcHMuc3R5bGVdLFxuICAgICAgICBcInJvbGVcIjogXCJzbGlkZXJcIixcbiAgICAgICAgXCJ0YWJpbmRleFwiOiBkaXNhYmxlZC52YWx1ZSA/IC0xIDogMCxcbiAgICAgICAgXCJhcmlhLXZhbHVlbWluXCI6IHByb3BzLm1pbixcbiAgICAgICAgXCJhcmlhLXZhbHVlbWF4XCI6IHByb3BzLm1heCxcbiAgICAgICAgXCJhcmlhLXZhbHVlbm93XCI6IHByb3BzLm1vZGVsVmFsdWUsXG4gICAgICAgIFwiYXJpYS1yZWFkb25seVwiOiAhIXJlYWRvbmx5LnZhbHVlLFxuICAgICAgICBcImFyaWEtb3JpZW50YXRpb25cIjogZGlyZWN0aW9uLnZhbHVlLFxuICAgICAgICBcIm9uS2V5ZG93blwiOiAhcmVhZG9ubHkudmFsdWUgPyBvbktleWRvd24gOiB1bmRlZmluZWRcbiAgICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1zbGlkZXItdGh1bWJfX3N1cmZhY2UnLCB0ZXh0Q29sb3JDbGFzc2VzLnZhbHVlLCBlbGV2YXRpb25DbGFzc2VzLnZhbHVlXSxcbiAgICAgICAgXCJzdHlsZVwiOiB7XG4gICAgICAgICAgLi4udGV4dENvbG9yU3R5bGVzLnZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0sIG51bGwpLCBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytc2xpZGVyLXRodW1iX19yaXBwbGUnLCB0ZXh0Q29sb3JDbGFzc2VzLnZhbHVlXSxcbiAgICAgICAgXCJzdHlsZVwiOiB0ZXh0Q29sb3JTdHlsZXMudmFsdWVcbiAgICAgIH0sIG51bGwpLCBbW19yZXNvbHZlRGlyZWN0aXZlKFwicmlwcGxlXCIpLCBwcm9wcy5yaXBwbGUsIG51bGwsIHtcbiAgICAgICAgY2lyY2xlOiB0cnVlLFxuICAgICAgICBjZW50ZXI6IHRydWVcbiAgICAgIH1dXSksIF9jcmVhdGVWTm9kZShWU2NhbGVUcmFuc2l0aW9uLCB7XG4gICAgICAgIFwib3JpZ2luXCI6IFwiYm90dG9tIGNlbnRlclwiXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1zbGlkZXItdGh1bWJfX2xhYmVsLWNvbnRhaW5lclwiXG4gICAgICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogWyd2LXNsaWRlci10aHVtYl9fbGFiZWwnXVxuICAgICAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIG51bGwsIFtzbG90c1sndGh1bWItbGFiZWwnXT8uKHtcbiAgICAgICAgICBtb2RlbFZhbHVlOiBwcm9wcy5tb2RlbFZhbHVlXG4gICAgICAgIH0pID8/IHByb3BzLm1vZGVsVmFsdWUudG9GaXhlZChzdGVwLnZhbHVlID8gZGVjaW1hbHMudmFsdWUgOiAxKV0pXSldKSwgW1tfdlNob3csIHRodW1iTGFiZWwudmFsdWUgJiYgcHJvcHMuZm9jdXNlZCB8fCB0aHVtYkxhYmVsLnZhbHVlID09PSAnYWx3YXlzJ11dKV1cbiAgICAgIH0pXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZTbGlkZXJUaHVtYi5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZTbGlkZXJUcmFjay5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlNsaWRlclN5bWJvbCB9IGZyb20gXCIuL3NsaWRlci5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyB1c2VSb3VuZGVkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIGluamVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWU2xpZGVyVHJhY2tQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHN0YXJ0OiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIHJlcXVpcmVkOiB0cnVlXG4gIH0sXG4gIHN0b3A6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKClcbn0sICdWU2xpZGVyVHJhY2snKTtcbmV4cG9ydCBjb25zdCBWU2xpZGVyVHJhY2sgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlNsaWRlclRyYWNrJyxcbiAgcHJvcHM6IG1ha2VWU2xpZGVyVHJhY2tQcm9wcygpLFxuICBlbWl0czoge30sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qgc2xpZGVyID0gaW5qZWN0KFZTbGlkZXJTeW1ib2wpO1xuICAgIGlmICghc2xpZGVyKSB0aHJvdyBuZXcgRXJyb3IoJ1tWdWV0aWZ5XSB2LXNsaWRlci10cmFjayBtdXN0IGJlIGluc2lkZSB2LXNsaWRlciBvciB2LXJhbmdlLXNsaWRlcicpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbG9yLFxuICAgICAgaG9yaXpvbnRhbERpcmVjdGlvbixcbiAgICAgIHBhcnNlZFRpY2tzLFxuICAgICAgcm91bmRlZCxcbiAgICAgIHNob3dUaWNrcyxcbiAgICAgIHRpY2tTaXplLFxuICAgICAgdHJhY2tDb2xvcixcbiAgICAgIHRyYWNrRmlsbENvbG9yLFxuICAgICAgdHJhY2tTaXplLFxuICAgICAgdmVydGljYWwsXG4gICAgICBtaW4sXG4gICAgICBtYXhcbiAgICB9ID0gc2xpZGVyO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocm91bmRlZCk7XG4gICAgY29uc3Qge1xuICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlczogdHJhY2tGaWxsQ29sb3JDbGFzc2VzLFxuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzOiB0cmFja0ZpbGxDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VCYWNrZ3JvdW5kQ29sb3IodHJhY2tGaWxsQ29sb3IpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXM6IHRyYWNrQ29sb3JDbGFzc2VzLFxuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzOiB0cmFja0NvbG9yU3R5bGVzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcih0cmFja0NvbG9yKTtcbiAgICBjb25zdCBzdGFydERpciA9IGNvbXB1dGVkKCgpID0+IGBpbnNldC0ke3ZlcnRpY2FsLnZhbHVlID8gJ2Jsb2NrLWVuZCcgOiAnaW5saW5lLXN0YXJ0J31gKTtcbiAgICBjb25zdCBlbmREaXIgPSBjb21wdXRlZCgoKSA9PiB2ZXJ0aWNhbC52YWx1ZSA/ICdoZWlnaHQnIDogJ3dpZHRoJyk7XG4gICAgY29uc3QgYmFja2dyb3VuZFN0eWxlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtzdGFydERpci52YWx1ZV06ICcwJScsXG4gICAgICAgIFtlbmREaXIudmFsdWVdOiAnMTAwJSdcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgdHJhY2tGaWxsV2lkdGggPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5zdG9wIC0gcHJvcHMuc3RhcnQpO1xuICAgIGNvbnN0IHRyYWNrRmlsbFN0eWxlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtzdGFydERpci52YWx1ZV06IGNvbnZlcnRUb1VuaXQocHJvcHMuc3RhcnQsICclJyksXG4gICAgICAgIFtlbmREaXIudmFsdWVdOiBjb252ZXJ0VG9Vbml0KHRyYWNrRmlsbFdpZHRoLnZhbHVlLCAnJScpXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbXB1dGVkVGlja3MgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAoIXNob3dUaWNrcy52YWx1ZSkgcmV0dXJuIFtdO1xuICAgICAgY29uc3QgdGlja3MgPSB2ZXJ0aWNhbC52YWx1ZSA/IHBhcnNlZFRpY2tzLnZhbHVlLnNsaWNlKCkucmV2ZXJzZSgpIDogcGFyc2VkVGlja3MudmFsdWU7XG4gICAgICByZXR1cm4gdGlja3MubWFwKCh0aWNrLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb25Qcm9wZXJ0eSA9IHZlcnRpY2FsLnZhbHVlID8gJ2JvdHRvbScgOiAnbWFyZ2luLWlubGluZS1zdGFydCc7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvblZhbHVlID0gdGljay52YWx1ZSAhPT0gbWluLnZhbHVlICYmIHRpY2sudmFsdWUgIT09IG1heC52YWx1ZSA/IGNvbnZlcnRUb1VuaXQodGljay5wb3NpdGlvbiwgJyUnKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJrZXlcIjogdGljay52YWx1ZSxcbiAgICAgICAgICBcImNsYXNzXCI6IFsndi1zbGlkZXItdHJhY2tfX3RpY2snLCB7XG4gICAgICAgICAgICAndi1zbGlkZXItdHJhY2tfX3RpY2stLWZpbGxlZCc6IHRpY2sucG9zaXRpb24gPj0gcHJvcHMuc3RhcnQgJiYgdGljay5wb3NpdGlvbiA8PSBwcm9wcy5zdG9wLFxuICAgICAgICAgICAgJ3Ytc2xpZGVyLXRyYWNrX190aWNrLS1maXJzdCc6IHRpY2sudmFsdWUgPT09IG1pbi52YWx1ZSxcbiAgICAgICAgICAgICd2LXNsaWRlci10cmFja19fdGljay0tbGFzdCc6IHRpY2sudmFsdWUgPT09IG1heC52YWx1ZVxuICAgICAgICAgIH1dLFxuICAgICAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICAgICAgW2RpcmVjdGlvblByb3BlcnR5XTogZGlyZWN0aW9uVmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sIFsodGljay5sYWJlbCB8fCBzbG90c1sndGljay1sYWJlbCddKSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXNsaWRlci10cmFja19fdGljay1sYWJlbFwiXG4gICAgICAgIH0sIFtzbG90c1sndGljay1sYWJlbCddPy4oe1xuICAgICAgICAgIHRpY2ssXG4gICAgICAgICAgaW5kZXhcbiAgICAgICAgfSkgPz8gdGljay5sYWJlbF0pXSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXNsaWRlci10cmFjaycsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW3tcbiAgICAgICAgICAnLS12LXNsaWRlci10cmFjay1zaXplJzogY29udmVydFRvVW5pdCh0cmFja1NpemUudmFsdWUpLFxuICAgICAgICAgICctLXYtc2xpZGVyLXRpY2stc2l6ZSc6IGNvbnZlcnRUb1VuaXQodGlja1NpemUudmFsdWUpLFxuICAgICAgICAgIGRpcmVjdGlvbjogIXZlcnRpY2FsLnZhbHVlID8gaG9yaXpvbnRhbERpcmVjdGlvbi52YWx1ZSA6IHVuZGVmaW5lZFxuICAgICAgICB9LCBwcm9wcy5zdHlsZV1cbiAgICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1zbGlkZXItdHJhY2tfX2JhY2tncm91bmQnLCB0cmFja0NvbG9yQ2xhc3Nlcy52YWx1ZSwge1xuICAgICAgICAgICd2LXNsaWRlci10cmFja19fYmFja2dyb3VuZC0tb3BhY2l0eSc6ICEhY29sb3IudmFsdWUgfHwgIXRyYWNrRmlsbENvbG9yLnZhbHVlXG4gICAgICAgIH1dLFxuICAgICAgICBcInN0eWxlXCI6IHtcbiAgICAgICAgICAuLi5iYWNrZ3JvdW5kU3R5bGVzLnZhbHVlLFxuICAgICAgICAgIC4uLnRyYWNrQ29sb3JTdHlsZXMudmFsdWVcbiAgICAgICAgfVxuICAgICAgfSwgbnVsbCksIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXNsaWRlci10cmFja19fZmlsbCcsIHRyYWNrRmlsbENvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICAgIC4uLnRyYWNrRmlsbFN0eWxlcy52YWx1ZSxcbiAgICAgICAgICAuLi50cmFja0ZpbGxDb2xvclN0eWxlcy52YWx1ZVxuICAgICAgICB9XG4gICAgICB9LCBudWxsKSwgc2hvd1RpY2tzLnZhbHVlICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXNsaWRlci10cmFja19fdGlja3MnLCB7XG4gICAgICAgICAgJ3Ytc2xpZGVyLXRyYWNrX190aWNrcy0tYWx3YXlzLXNob3cnOiBzaG93VGlja3MudmFsdWUgPT09ICdhbHdheXMnXG4gICAgICAgIH1dXG4gICAgICB9LCBbY29tcHV0ZWRUaWNrcy52YWx1ZV0pXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZTbGlkZXJUcmFjay5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlNsaWRlci5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlNsaWRlclRodW1iIH0gZnJvbSBcIi4vVlNsaWRlclRodW1iLm1qc1wiO1xuaW1wb3J0IHsgVlNsaWRlclRyYWNrIH0gZnJvbSBcIi4vVlNsaWRlclRyYWNrLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZJbnB1dFByb3BzLCBWSW5wdXQgfSBmcm9tIFwiLi4vVklucHV0L1ZJbnB1dC5tanNcIjtcbmltcG9ydCB7IFZMYWJlbCB9IGZyb20gXCIuLi9WTGFiZWwvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlU2xpZGVyUHJvcHMsIHVzZVNsaWRlciwgdXNlU3RlcHMgfSBmcm9tIFwiLi9zbGlkZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlRm9jdXNQcm9wcywgdXNlRm9jdXMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9jdXMubWpzXCI7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgcmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZTbGlkZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC4uLm1ha2VGb2N1c1Byb3BzKCksXG4gIC4uLm1ha2VTbGlkZXJQcm9wcygpLFxuICAuLi5tYWtlVklucHV0UHJvcHMoKSxcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMFxuICB9XG59LCAnVlNsaWRlcicpO1xuZXhwb3J0IGNvbnN0IFZTbGlkZXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlNsaWRlcicsXG4gIHByb3BzOiBtYWtlVlNsaWRlclByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTpmb2N1c2VkJzogdmFsdWUgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2ID0+IHRydWUsXG4gICAgc3RhcnQ6IHZhbHVlID0+IHRydWUsXG4gICAgZW5kOiB2YWx1ZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzLFxuICAgICAgZW1pdFxuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHRodW1iQ29udGFpbmVyUmVmID0gcmVmKCk7XG4gICAgY29uc3Qge1xuICAgICAgcnRsQ2xhc3Nlc1xuICAgIH0gPSB1c2VSdGwoKTtcbiAgICBjb25zdCBzdGVwcyA9IHVzZVN0ZXBzKHByb3BzKTtcbiAgICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnLCB1bmRlZmluZWQsIHZhbHVlID0+IHtcbiAgICAgIHJldHVybiBzdGVwcy5yb3VuZFZhbHVlKHZhbHVlID09IG51bGwgPyBzdGVwcy5taW4udmFsdWUgOiB2YWx1ZSk7XG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgbWluLFxuICAgICAgbWF4LFxuICAgICAgbW91c2VQcmVzc2VkLFxuICAgICAgcm91bmRWYWx1ZSxcbiAgICAgIG9uU2xpZGVyTW91c2Vkb3duLFxuICAgICAgb25TbGlkZXJUb3VjaHN0YXJ0LFxuICAgICAgdHJhY2tDb250YWluZXJSZWYsXG4gICAgICBwb3NpdGlvbixcbiAgICAgIGhhc0xhYmVscyxcbiAgICAgIHJlYWRvbmx5XG4gICAgfSA9IHVzZVNsaWRlcih7XG4gICAgICBwcm9wcyxcbiAgICAgIHN0ZXBzLFxuICAgICAgb25TbGlkZXJTdGFydDogKCkgPT4ge1xuICAgICAgICBlbWl0KCdzdGFydCcsIG1vZGVsLnZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBvblNsaWRlckVuZDogX3JlZjIgPT4ge1xuICAgICAgICBsZXQge1xuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgY29uc3Qgcm91bmRlZFZhbHVlID0gcm91bmRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIG1vZGVsLnZhbHVlID0gcm91bmRlZFZhbHVlO1xuICAgICAgICBlbWl0KCdlbmQnLCByb3VuZGVkVmFsdWUpO1xuICAgICAgfSxcbiAgICAgIG9uU2xpZGVyTW92ZTogX3JlZjMgPT4ge1xuICAgICAgICBsZXQge1xuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0gPSBfcmVmMztcbiAgICAgICAgcmV0dXJuIG1vZGVsLnZhbHVlID0gcm91bmRWYWx1ZSh2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgZ2V0QWN0aXZlVGh1bWI6ICgpID0+IHRodW1iQ29udGFpbmVyUmVmLnZhbHVlPy4kZWxcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBpc0ZvY3VzZWQsXG4gICAgICBmb2N1cyxcbiAgICAgIGJsdXJcbiAgICB9ID0gdXNlRm9jdXMocHJvcHMpO1xuICAgIGNvbnN0IHRyYWNrU3RvcCA9IGNvbXB1dGVkKCgpID0+IHBvc2l0aW9uKG1vZGVsLnZhbHVlKSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFtpbnB1dFByb3BzLCBfXSA9IFZJbnB1dC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICBjb25zdCBoYXNQcmVwZW5kID0gISEocHJvcHMubGFiZWwgfHwgc2xvdHMubGFiZWwgfHwgc2xvdHMucHJlcGVuZCk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZJbnB1dCwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcImNsYXNzXCI6IFsndi1zbGlkZXInLCB7XG4gICAgICAgICAgJ3Ytc2xpZGVyLS1oYXMtbGFiZWxzJzogISFzbG90c1sndGljay1sYWJlbCddIHx8IGhhc0xhYmVscy52YWx1ZSxcbiAgICAgICAgICAndi1zbGlkZXItLWZvY3VzZWQnOiBpc0ZvY3VzZWQudmFsdWUsXG4gICAgICAgICAgJ3Ytc2xpZGVyLS1wcmVzc2VkJzogbW91c2VQcmVzc2VkLnZhbHVlLFxuICAgICAgICAgICd2LXNsaWRlci0tZGlzYWJsZWQnOiBwcm9wcy5kaXNhYmxlZFxuICAgICAgICB9LCBydGxDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIGlucHV0UHJvcHMsIHtcbiAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZC52YWx1ZVxuICAgICAgfSksIHtcbiAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgIHByZXBlbmQ6IGhhc1ByZXBlbmQgPyBzbG90UHJvcHMgPT4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Nsb3RzLmxhYmVsPy4oc2xvdFByb3BzKSA/PyAocHJvcHMubGFiZWwgPyBfY3JlYXRlVk5vZGUoVkxhYmVsLCB7XG4gICAgICAgICAgXCJpZFwiOiBzbG90UHJvcHMuaWQudmFsdWUsXG4gICAgICAgICAgXCJjbGFzc1wiOiBcInYtc2xpZGVyX19sYWJlbFwiLFxuICAgICAgICAgIFwidGV4dFwiOiBwcm9wcy5sYWJlbFxuICAgICAgICB9LCBudWxsKSA6IHVuZGVmaW5lZCksIHNsb3RzLnByZXBlbmQ/LihzbG90UHJvcHMpXSkgOiB1bmRlZmluZWQsXG4gICAgICAgIGRlZmF1bHQ6IF9yZWY0ID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBtZXNzYWdlc0lkXG4gICAgICAgICAgfSA9IF9yZWY0O1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtc2xpZGVyX19jb250YWluZXJcIixcbiAgICAgICAgICAgIFwib25Nb3VzZWRvd25cIjogIXJlYWRvbmx5LnZhbHVlID8gb25TbGlkZXJNb3VzZWRvd24gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBcIm9uVG91Y2hzdGFydFBhc3NpdmVcIjogIXJlYWRvbmx5LnZhbHVlID8gb25TbGlkZXJUb3VjaHN0YXJ0IDogdW5kZWZpbmVkXG4gICAgICAgICAgfSwgW19jcmVhdGVWTm9kZShcImlucHV0XCIsIHtcbiAgICAgICAgICAgIFwiaWRcIjogaWQudmFsdWUsXG4gICAgICAgICAgICBcIm5hbWVcIjogcHJvcHMubmFtZSB8fCBpZC52YWx1ZSxcbiAgICAgICAgICAgIFwiZGlzYWJsZWRcIjogISFwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICAgIFwicmVhZG9ubHlcIjogISFwcm9wcy5yZWFkb25seSxcbiAgICAgICAgICAgIFwidGFiaW5kZXhcIjogXCItMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBtb2RlbC52YWx1ZVxuICAgICAgICAgIH0sIG51bGwpLCBfY3JlYXRlVk5vZGUoVlNsaWRlclRyYWNrLCB7XG4gICAgICAgICAgICBcInJlZlwiOiB0cmFja0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgICAgIFwic3RvcFwiOiB0cmFja1N0b3AudmFsdWVcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAndGljay1sYWJlbCc6IHNsb3RzWyd0aWNrLWxhYmVsJ11cbiAgICAgICAgICB9KSwgX2NyZWF0ZVZOb2RlKFZTbGlkZXJUaHVtYiwge1xuICAgICAgICAgICAgXCJyZWZcIjogdGh1bWJDb250YWluZXJSZWYsXG4gICAgICAgICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogbWVzc2FnZXNJZC52YWx1ZSxcbiAgICAgICAgICAgIFwiZm9jdXNlZFwiOiBpc0ZvY3VzZWQudmFsdWUsXG4gICAgICAgICAgICBcIm1pblwiOiBtaW4udmFsdWUsXG4gICAgICAgICAgICBcIm1heFwiOiBtYXgudmFsdWUsXG4gICAgICAgICAgICBcIm1vZGVsVmFsdWVcIjogbW9kZWwudmFsdWUsXG4gICAgICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogdiA9PiBtb2RlbC52YWx1ZSA9IHYsXG4gICAgICAgICAgICBcInBvc2l0aW9uXCI6IHRyYWNrU3RvcC52YWx1ZSxcbiAgICAgICAgICAgIFwiZWxldmF0aW9uXCI6IHByb3BzLmVsZXZhdGlvbixcbiAgICAgICAgICAgIFwib25Gb2N1c1wiOiBmb2N1cyxcbiAgICAgICAgICAgIFwib25CbHVyXCI6IGJsdXJcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAndGh1bWItbGFiZWwnOiBzbG90c1sndGh1bWItbGFiZWwnXVxuICAgICAgICAgIH0pXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WU2xpZGVyLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkNvbG9yUGlja2VyUHJldmlldy5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlNsaWRlciB9IGZyb20gXCIuLi9WU2xpZGVyL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBudWxsQ29sb3IgfSBmcm9tIFwiLi91dGlsL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBIU1Z0b0NTUywgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkNvbG9yUGlja2VyUHJldmlld1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29sb3I6IHtcbiAgICB0eXBlOiBPYmplY3RcbiAgfSxcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIGhpZGVBbHBoYTogQm9vbGVhbixcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKClcbn0sICdWQ29sb3JQaWNrZXJQcmV2aWV3Jyk7XG5leHBvcnQgY29uc3QgVkNvbG9yUGlja2VyUHJldmlldyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdWQ29sb3JQaWNrZXJQcmV2aWV3JyxcbiAgcHJvcHM6IG1ha2VWQ29sb3JQaWNrZXJQcmV2aWV3UHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOmNvbG9yJzogY29sb3IgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBlbWl0XG4gICAgfSA9IF9yZWY7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1jb2xvci1waWNrZXItcHJldmlldycsIHtcbiAgICAgICAgJ3YtY29sb3ItcGlja2VyLXByZXZpZXctLWhpZGUtYWxwaGEnOiBwcm9wcy5oaWRlQWxwaGFcbiAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJ2LWNvbG9yLXBpY2tlci1wcmV2aWV3X19kb3RcIlxuICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJzdHlsZVwiOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IEhTVnRvQ1NTKHByb3BzLmNvbG9yID8/IG51bGxDb2xvcilcbiAgICAgIH1cbiAgICB9LCBudWxsKV0pLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBcInYtY29sb3ItcGlja2VyLXByZXZpZXdfX3NsaWRlcnNcIlxuICAgIH0sIFtfY3JlYXRlVk5vZGUoVlNsaWRlciwge1xuICAgICAgXCJjbGFzc1wiOiBcInYtY29sb3ItcGlja2VyLXByZXZpZXdfX3RyYWNrIHYtY29sb3ItcGlja2VyLXByZXZpZXdfX2h1ZVwiLFxuICAgICAgXCJtb2RlbFZhbHVlXCI6IHByb3BzLmNvbG9yPy5oLFxuICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IGggPT4gZW1pdCgndXBkYXRlOmNvbG9yJywge1xuICAgICAgICAuLi4ocHJvcHMuY29sb3IgPz8gbnVsbENvbG9yKSxcbiAgICAgICAgaFxuICAgICAgfSksXG4gICAgICBcInN0ZXBcIjogMCxcbiAgICAgIFwibWluXCI6IDAsXG4gICAgICBcIm1heFwiOiAzNjAsXG4gICAgICBcImRpc2FibGVkXCI6IHByb3BzLmRpc2FibGVkLFxuICAgICAgXCJ0aHVtYlNpemVcIjogMTQsXG4gICAgICBcInRyYWNrU2l6ZVwiOiA4LFxuICAgICAgXCJ0cmFja0ZpbGxDb2xvclwiOiBcIndoaXRlXCIsXG4gICAgICBcImhpZGVEZXRhaWxzXCI6IHRydWVcbiAgICB9LCBudWxsKSwgIXByb3BzLmhpZGVBbHBoYSAmJiBfY3JlYXRlVk5vZGUoVlNsaWRlciwge1xuICAgICAgXCJjbGFzc1wiOiBcInYtY29sb3ItcGlja2VyLXByZXZpZXdfX3RyYWNrIHYtY29sb3ItcGlja2VyLXByZXZpZXdfX2FscGhhXCIsXG4gICAgICBcIm1vZGVsVmFsdWVcIjogcHJvcHMuY29sb3I/LmEgPz8gMSxcbiAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBhID0+IGVtaXQoJ3VwZGF0ZTpjb2xvcicsIHtcbiAgICAgICAgLi4uKHByb3BzLmNvbG9yID8/IG51bGxDb2xvciksXG4gICAgICAgIGFcbiAgICAgIH0pLFxuICAgICAgXCJzdGVwXCI6IDEgLyAyNTYsXG4gICAgICBcIm1pblwiOiAwLFxuICAgICAgXCJtYXhcIjogMSxcbiAgICAgIFwiZGlzYWJsZWRcIjogcHJvcHMuZGlzYWJsZWQsXG4gICAgICBcInRodW1iU2l6ZVwiOiAxNCxcbiAgICAgIFwidHJhY2tTaXplXCI6IDgsXG4gICAgICBcInRyYWNrRmlsbENvbG9yXCI6IFwid2hpdGVcIixcbiAgICAgIFwiaGlkZURldGFpbHNcIjogdHJ1ZVxuICAgIH0sIG51bGwpXSldKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDb2xvclBpY2tlclByZXZpZXcubWpzLm1hcCIsImNvbnN0IHJlZCA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnI2Y0NDMzNicsXG4gIGxpZ2h0ZW41OiAnI2ZmZWJlZScsXG4gIGxpZ2h0ZW40OiAnI2ZmY2RkMicsXG4gIGxpZ2h0ZW4zOiAnI2VmOWE5YScsXG4gIGxpZ2h0ZW4yOiAnI2U1NzM3MycsXG4gIGxpZ2h0ZW4xOiAnI2VmNTM1MCcsXG4gIGRhcmtlbjE6ICcjZTUzOTM1JyxcbiAgZGFya2VuMjogJyNkMzJmMmYnLFxuICBkYXJrZW4zOiAnI2M2MjgyOCcsXG4gIGRhcmtlbjQ6ICcjYjcxYzFjJyxcbiAgYWNjZW50MTogJyNmZjhhODAnLFxuICBhY2NlbnQyOiAnI2ZmNTI1MicsXG4gIGFjY2VudDM6ICcjZmYxNzQ0JyxcbiAgYWNjZW50NDogJyNkNTAwMDAnXG59KTtcbmNvbnN0IHBpbmsgPSBPYmplY3QuZnJlZXplKHtcbiAgYmFzZTogJyNlOTFlNjMnLFxuICBsaWdodGVuNTogJyNmY2U0ZWMnLFxuICBsaWdodGVuNDogJyNmOGJiZDAnLFxuICBsaWdodGVuMzogJyNmNDhmYjEnLFxuICBsaWdodGVuMjogJyNmMDYyOTInLFxuICBsaWdodGVuMTogJyNlYzQwN2EnLFxuICBkYXJrZW4xOiAnI2Q4MWI2MCcsXG4gIGRhcmtlbjI6ICcjYzIxODViJyxcbiAgZGFya2VuMzogJyNhZDE0NTcnLFxuICBkYXJrZW40OiAnIzg4MGU0ZicsXG4gIGFjY2VudDE6ICcjZmY4MGFiJyxcbiAgYWNjZW50MjogJyNmZjQwODEnLFxuICBhY2NlbnQzOiAnI2Y1MDA1NycsXG4gIGFjY2VudDQ6ICcjYzUxMTYyJ1xufSk7XG5jb25zdCBwdXJwbGUgPSBPYmplY3QuZnJlZXplKHtcbiAgYmFzZTogJyM5YzI3YjAnLFxuICBsaWdodGVuNTogJyNmM2U1ZjUnLFxuICBsaWdodGVuNDogJyNlMWJlZTcnLFxuICBsaWdodGVuMzogJyNjZTkzZDgnLFxuICBsaWdodGVuMjogJyNiYTY4YzgnLFxuICBsaWdodGVuMTogJyNhYjQ3YmMnLFxuICBkYXJrZW4xOiAnIzhlMjRhYScsXG4gIGRhcmtlbjI6ICcjN2IxZmEyJyxcbiAgZGFya2VuMzogJyM2YTFiOWEnLFxuICBkYXJrZW40OiAnIzRhMTQ4YycsXG4gIGFjY2VudDE6ICcjZWE4MGZjJyxcbiAgYWNjZW50MjogJyNlMDQwZmInLFxuICBhY2NlbnQzOiAnI2Q1MDBmOScsXG4gIGFjY2VudDQ6ICcjYWEwMGZmJ1xufSk7XG5jb25zdCBkZWVwUHVycGxlID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjNjczYWI3JyxcbiAgbGlnaHRlbjU6ICcjZWRlN2Y2JyxcbiAgbGlnaHRlbjQ6ICcjZDFjNGU5JyxcbiAgbGlnaHRlbjM6ICcjYjM5ZGRiJyxcbiAgbGlnaHRlbjI6ICcjOTU3NWNkJyxcbiAgbGlnaHRlbjE6ICcjN2U1N2MyJyxcbiAgZGFya2VuMTogJyM1ZTM1YjEnLFxuICBkYXJrZW4yOiAnIzUxMmRhOCcsXG4gIGRhcmtlbjM6ICcjNDUyN2EwJyxcbiAgZGFya2VuNDogJyMzMTFiOTInLFxuICBhY2NlbnQxOiAnI2IzODhmZicsXG4gIGFjY2VudDI6ICcjN2M0ZGZmJyxcbiAgYWNjZW50MzogJyM2NTFmZmYnLFxuICBhY2NlbnQ0OiAnIzYyMDBlYSdcbn0pO1xuY29uc3QgaW5kaWdvID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjM2Y1MWI1JyxcbiAgbGlnaHRlbjU6ICcjZThlYWY2JyxcbiAgbGlnaHRlbjQ6ICcjYzVjYWU5JyxcbiAgbGlnaHRlbjM6ICcjOWZhOGRhJyxcbiAgbGlnaHRlbjI6ICcjNzk4NmNiJyxcbiAgbGlnaHRlbjE6ICcjNWM2YmMwJyxcbiAgZGFya2VuMTogJyMzOTQ5YWInLFxuICBkYXJrZW4yOiAnIzMwM2Y5ZicsXG4gIGRhcmtlbjM6ICcjMjgzNTkzJyxcbiAgZGFya2VuNDogJyMxYTIzN2UnLFxuICBhY2NlbnQxOiAnIzhjOWVmZicsXG4gIGFjY2VudDI6ICcjNTM2ZGZlJyxcbiAgYWNjZW50MzogJyMzZDVhZmUnLFxuICBhY2NlbnQ0OiAnIzMwNGZmZSdcbn0pO1xuY29uc3QgYmx1ZSA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnIzIxOTZmMycsXG4gIGxpZ2h0ZW41OiAnI2UzZjJmZCcsXG4gIGxpZ2h0ZW40OiAnI2JiZGVmYicsXG4gIGxpZ2h0ZW4zOiAnIzkwY2FmOScsXG4gIGxpZ2h0ZW4yOiAnIzY0YjVmNicsXG4gIGxpZ2h0ZW4xOiAnIzQyYTVmNScsXG4gIGRhcmtlbjE6ICcjMWU4OGU1JyxcbiAgZGFya2VuMjogJyMxOTc2ZDInLFxuICBkYXJrZW4zOiAnIzE1NjVjMCcsXG4gIGRhcmtlbjQ6ICcjMGQ0N2ExJyxcbiAgYWNjZW50MTogJyM4MmIxZmYnLFxuICBhY2NlbnQyOiAnIzQ0OGFmZicsXG4gIGFjY2VudDM6ICcjMjk3OWZmJyxcbiAgYWNjZW50NDogJyMyOTYyZmYnXG59KTtcbmNvbnN0IGxpZ2h0Qmx1ZSA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnIzAzYTlmNCcsXG4gIGxpZ2h0ZW41OiAnI2UxZjVmZScsXG4gIGxpZ2h0ZW40OiAnI2IzZTVmYycsXG4gIGxpZ2h0ZW4zOiAnIzgxZDRmYScsXG4gIGxpZ2h0ZW4yOiAnIzRmYzNmNycsXG4gIGxpZ2h0ZW4xOiAnIzI5YjZmNicsXG4gIGRhcmtlbjE6ICcjMDM5YmU1JyxcbiAgZGFya2VuMjogJyMwMjg4ZDEnLFxuICBkYXJrZW4zOiAnIzAyNzdiZCcsXG4gIGRhcmtlbjQ6ICcjMDE1NzliJyxcbiAgYWNjZW50MTogJyM4MGQ4ZmYnLFxuICBhY2NlbnQyOiAnIzQwYzRmZicsXG4gIGFjY2VudDM6ICcjMDBiMGZmJyxcbiAgYWNjZW50NDogJyMwMDkxZWEnXG59KTtcbmNvbnN0IGN5YW4gPSBPYmplY3QuZnJlZXplKHtcbiAgYmFzZTogJyMwMGJjZDQnLFxuICBsaWdodGVuNTogJyNlMGY3ZmEnLFxuICBsaWdodGVuNDogJyNiMmViZjInLFxuICBsaWdodGVuMzogJyM4MGRlZWEnLFxuICBsaWdodGVuMjogJyM0ZGQwZTEnLFxuICBsaWdodGVuMTogJyMyNmM2ZGEnLFxuICBkYXJrZW4xOiAnIzAwYWNjMScsXG4gIGRhcmtlbjI6ICcjMDA5N2E3JyxcbiAgZGFya2VuMzogJyMwMDgzOGYnLFxuICBkYXJrZW40OiAnIzAwNjA2NCcsXG4gIGFjY2VudDE6ICcjODRmZmZmJyxcbiAgYWNjZW50MjogJyMxOGZmZmYnLFxuICBhY2NlbnQzOiAnIzAwZTVmZicsXG4gIGFjY2VudDQ6ICcjMDBiOGQ0J1xufSk7XG5jb25zdCB0ZWFsID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjMDA5Njg4JyxcbiAgbGlnaHRlbjU6ICcjZTBmMmYxJyxcbiAgbGlnaHRlbjQ6ICcjYjJkZmRiJyxcbiAgbGlnaHRlbjM6ICcjODBjYmM0JyxcbiAgbGlnaHRlbjI6ICcjNGRiNmFjJyxcbiAgbGlnaHRlbjE6ICcjMjZhNjlhJyxcbiAgZGFya2VuMTogJyMwMDg5N2InLFxuICBkYXJrZW4yOiAnIzAwNzk2YicsXG4gIGRhcmtlbjM6ICcjMDA2OTVjJyxcbiAgZGFya2VuNDogJyMwMDRkNDAnLFxuICBhY2NlbnQxOiAnI2E3ZmZlYicsXG4gIGFjY2VudDI6ICcjNjRmZmRhJyxcbiAgYWNjZW50MzogJyMxZGU5YjYnLFxuICBhY2NlbnQ0OiAnIzAwYmZhNSdcbn0pO1xuY29uc3QgZ3JlZW4gPSBPYmplY3QuZnJlZXplKHtcbiAgYmFzZTogJyM0Y2FmNTAnLFxuICBsaWdodGVuNTogJyNlOGY1ZTknLFxuICBsaWdodGVuNDogJyNjOGU2YzknLFxuICBsaWdodGVuMzogJyNhNWQ2YTcnLFxuICBsaWdodGVuMjogJyM4MWM3ODQnLFxuICBsaWdodGVuMTogJyM2NmJiNmEnLFxuICBkYXJrZW4xOiAnIzQzYTA0NycsXG4gIGRhcmtlbjI6ICcjMzg4ZTNjJyxcbiAgZGFya2VuMzogJyMyZTdkMzInLFxuICBkYXJrZW40OiAnIzFiNWUyMCcsXG4gIGFjY2VudDE6ICcjYjlmNmNhJyxcbiAgYWNjZW50MjogJyM2OWYwYWUnLFxuICBhY2NlbnQzOiAnIzAwZTY3NicsXG4gIGFjY2VudDQ6ICcjMDBjODUzJ1xufSk7XG5jb25zdCBsaWdodEdyZWVuID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjOGJjMzRhJyxcbiAgbGlnaHRlbjU6ICcjZjFmOGU5JyxcbiAgbGlnaHRlbjQ6ICcjZGNlZGM4JyxcbiAgbGlnaHRlbjM6ICcjYzVlMWE1JyxcbiAgbGlnaHRlbjI6ICcjYWVkNTgxJyxcbiAgbGlnaHRlbjE6ICcjOWNjYzY1JyxcbiAgZGFya2VuMTogJyM3Y2IzNDInLFxuICBkYXJrZW4yOiAnIzY4OWYzOCcsXG4gIGRhcmtlbjM6ICcjNTU4YjJmJyxcbiAgZGFya2VuNDogJyMzMzY5MWUnLFxuICBhY2NlbnQxOiAnI2NjZmY5MCcsXG4gIGFjY2VudDI6ICcjYjJmZjU5JyxcbiAgYWNjZW50MzogJyM3NmZmMDMnLFxuICBhY2NlbnQ0OiAnIzY0ZGQxNydcbn0pO1xuY29uc3QgbGltZSA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnI2NkZGMzOScsXG4gIGxpZ2h0ZW41OiAnI2Y5ZmJlNycsXG4gIGxpZ2h0ZW40OiAnI2YwZjRjMycsXG4gIGxpZ2h0ZW4zOiAnI2U2ZWU5YycsXG4gIGxpZ2h0ZW4yOiAnI2RjZTc3NScsXG4gIGxpZ2h0ZW4xOiAnI2Q0ZTE1NycsXG4gIGRhcmtlbjE6ICcjYzBjYTMzJyxcbiAgZGFya2VuMjogJyNhZmI0MmInLFxuICBkYXJrZW4zOiAnIzllOWQyNCcsXG4gIGRhcmtlbjQ6ICcjODI3NzE3JyxcbiAgYWNjZW50MTogJyNmNGZmODEnLFxuICBhY2NlbnQyOiAnI2VlZmY0MScsXG4gIGFjY2VudDM6ICcjYzZmZjAwJyxcbiAgYWNjZW50NDogJyNhZWVhMDAnXG59KTtcbmNvbnN0IHllbGxvdyA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnI2ZmZWIzYicsXG4gIGxpZ2h0ZW41OiAnI2ZmZmRlNycsXG4gIGxpZ2h0ZW40OiAnI2ZmZjljNCcsXG4gIGxpZ2h0ZW4zOiAnI2ZmZjU5ZCcsXG4gIGxpZ2h0ZW4yOiAnI2ZmZjE3NicsXG4gIGxpZ2h0ZW4xOiAnI2ZmZWU1OCcsXG4gIGRhcmtlbjE6ICcjZmRkODM1JyxcbiAgZGFya2VuMjogJyNmYmMwMmQnLFxuICBkYXJrZW4zOiAnI2Y5YTgyNScsXG4gIGRhcmtlbjQ6ICcjZjU3ZjE3JyxcbiAgYWNjZW50MTogJyNmZmZmOGQnLFxuICBhY2NlbnQyOiAnI2ZmZmYwMCcsXG4gIGFjY2VudDM6ICcjZmZlYTAwJyxcbiAgYWNjZW50NDogJyNmZmQ2MDAnXG59KTtcbmNvbnN0IGFtYmVyID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjZmZjMTA3JyxcbiAgbGlnaHRlbjU6ICcjZmZmOGUxJyxcbiAgbGlnaHRlbjQ6ICcjZmZlY2IzJyxcbiAgbGlnaHRlbjM6ICcjZmZlMDgyJyxcbiAgbGlnaHRlbjI6ICcjZmZkNTRmJyxcbiAgbGlnaHRlbjE6ICcjZmZjYTI4JyxcbiAgZGFya2VuMTogJyNmZmIzMDAnLFxuICBkYXJrZW4yOiAnI2ZmYTAwMCcsXG4gIGRhcmtlbjM6ICcjZmY4ZjAwJyxcbiAgZGFya2VuNDogJyNmZjZmMDAnLFxuICBhY2NlbnQxOiAnI2ZmZTU3ZicsXG4gIGFjY2VudDI6ICcjZmZkNzQwJyxcbiAgYWNjZW50MzogJyNmZmM0MDAnLFxuICBhY2NlbnQ0OiAnI2ZmYWIwMCdcbn0pO1xuY29uc3Qgb3JhbmdlID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjZmY5ODAwJyxcbiAgbGlnaHRlbjU6ICcjZmZmM2UwJyxcbiAgbGlnaHRlbjQ6ICcjZmZlMGIyJyxcbiAgbGlnaHRlbjM6ICcjZmZjYzgwJyxcbiAgbGlnaHRlbjI6ICcjZmZiNzRkJyxcbiAgbGlnaHRlbjE6ICcjZmZhNzI2JyxcbiAgZGFya2VuMTogJyNmYjhjMDAnLFxuICBkYXJrZW4yOiAnI2Y1N2MwMCcsXG4gIGRhcmtlbjM6ICcjZWY2YzAwJyxcbiAgZGFya2VuNDogJyNlNjUxMDAnLFxuICBhY2NlbnQxOiAnI2ZmZDE4MCcsXG4gIGFjY2VudDI6ICcjZmZhYjQwJyxcbiAgYWNjZW50MzogJyNmZjkxMDAnLFxuICBhY2NlbnQ0OiAnI2ZmNmQwMCdcbn0pO1xuY29uc3QgZGVlcE9yYW5nZSA9IE9iamVjdC5mcmVlemUoe1xuICBiYXNlOiAnI2ZmNTcyMicsXG4gIGxpZ2h0ZW41OiAnI2ZiZTllNycsXG4gIGxpZ2h0ZW40OiAnI2ZmY2NiYycsXG4gIGxpZ2h0ZW4zOiAnI2ZmYWI5MScsXG4gIGxpZ2h0ZW4yOiAnI2ZmOGE2NScsXG4gIGxpZ2h0ZW4xOiAnI2ZmNzA0MycsXG4gIGRhcmtlbjE6ICcjZjQ1MTFlJyxcbiAgZGFya2VuMjogJyNlNjRhMTknLFxuICBkYXJrZW4zOiAnI2Q4NDMxNScsXG4gIGRhcmtlbjQ6ICcjYmYzNjBjJyxcbiAgYWNjZW50MTogJyNmZjllODAnLFxuICBhY2NlbnQyOiAnI2ZmNmU0MCcsXG4gIGFjY2VudDM6ICcjZmYzZDAwJyxcbiAgYWNjZW50NDogJyNkZDJjMDAnXG59KTtcbmNvbnN0IGJyb3duID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjNzk1NTQ4JyxcbiAgbGlnaHRlbjU6ICcjZWZlYmU5JyxcbiAgbGlnaHRlbjQ6ICcjZDdjY2M4JyxcbiAgbGlnaHRlbjM6ICcjYmNhYWE0JyxcbiAgbGlnaHRlbjI6ICcjYTE4ODdmJyxcbiAgbGlnaHRlbjE6ICcjOGQ2ZTYzJyxcbiAgZGFya2VuMTogJyM2ZDRjNDEnLFxuICBkYXJrZW4yOiAnIzVkNDAzNycsXG4gIGRhcmtlbjM6ICcjNGUzNDJlJyxcbiAgZGFya2VuNDogJyMzZTI3MjMnXG59KTtcbmNvbnN0IGJsdWVHcmV5ID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJhc2U6ICcjNjA3ZDhiJyxcbiAgbGlnaHRlbjU6ICcjZWNlZmYxJyxcbiAgbGlnaHRlbjQ6ICcjY2ZkOGRjJyxcbiAgbGlnaHRlbjM6ICcjYjBiZWM1JyxcbiAgbGlnaHRlbjI6ICcjOTBhNGFlJyxcbiAgbGlnaHRlbjE6ICcjNzg5MDljJyxcbiAgZGFya2VuMTogJyM1NDZlN2EnLFxuICBkYXJrZW4yOiAnIzQ1NWE2NCcsXG4gIGRhcmtlbjM6ICcjMzc0NzRmJyxcbiAgZGFya2VuNDogJyMyNjMyMzgnXG59KTtcbmNvbnN0IGdyZXkgPSBPYmplY3QuZnJlZXplKHtcbiAgYmFzZTogJyM5ZTllOWUnLFxuICBsaWdodGVuNTogJyNmYWZhZmEnLFxuICBsaWdodGVuNDogJyNmNWY1ZjUnLFxuICBsaWdodGVuMzogJyNlZWVlZWUnLFxuICBsaWdodGVuMjogJyNlMGUwZTAnLFxuICBsaWdodGVuMTogJyNiZGJkYmQnLFxuICBkYXJrZW4xOiAnIzc1NzU3NScsXG4gIGRhcmtlbjI6ICcjNjE2MTYxJyxcbiAgZGFya2VuMzogJyM0MjQyNDInLFxuICBkYXJrZW40OiAnIzIxMjEyMSdcbn0pO1xuY29uc3Qgc2hhZGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGJsYWNrOiAnIzAwMDAwMCcsXG4gIHdoaXRlOiAnI2ZmZmZmZicsXG4gIHRyYW5zcGFyZW50OiAnI2ZmZmZmZjAwJ1xufSk7XG5leHBvcnQgZGVmYXVsdCBPYmplY3QuZnJlZXplKHtcbiAgcmVkLFxuICBwaW5rLFxuICBwdXJwbGUsXG4gIGRlZXBQdXJwbGUsXG4gIGluZGlnbyxcbiAgYmx1ZSxcbiAgbGlnaHRCbHVlLFxuICBjeWFuLFxuICB0ZWFsLFxuICBncmVlbixcbiAgbGlnaHRHcmVlbixcbiAgbGltZSxcbiAgeWVsbG93LFxuICBhbWJlcixcbiAgb3JhbmdlLFxuICBkZWVwT3JhbmdlLFxuICBicm93bixcbiAgYmx1ZUdyZXksXG4gIGdyZXksXG4gIHNoYWRlc1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvcnMubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQ29sb3JQaWNrZXJTd2F0Y2hlcy5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkljb24gfSBmcm9tIFwiLi4vVkljb24vaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQsIGRlZXBFcXVhbCwgZGVmaW5lQ29tcG9uZW50LCBnZXRDb250cmFzdCwgcGFyc2VDb2xvciwgcHJvcHNGYWN0b3J5LCBSR0J0b0NTUywgUkdCdG9IU1YsIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vLi4vdXRpbC9jb2xvcnMubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZDb2xvclBpY2tlclN3YXRjaGVzUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBzd2F0Y2hlczoge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6ICgpID0+IHBhcnNlRGVmYXVsdENvbG9ycyhjb2xvcnMpXG4gIH0sXG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICBjb2xvcjogT2JqZWN0LFxuICBtYXhIZWlnaHQ6IFtOdW1iZXIsIFN0cmluZ10sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpXG59LCAnVkNvbG9yUGlja2VyU3dhdGNoZXMnKTtcbmZ1bmN0aW9uIHBhcnNlRGVmYXVsdENvbG9ycyhjb2xvcnMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGNvbG9ycykubWFwKGtleSA9PiB7XG4gICAgY29uc3QgY29sb3IgPSBjb2xvcnNba2V5XTtcbiAgICByZXR1cm4gY29sb3IuYmFzZSA/IFtjb2xvci5iYXNlLCBjb2xvci5kYXJrZW40LCBjb2xvci5kYXJrZW4zLCBjb2xvci5kYXJrZW4yLCBjb2xvci5kYXJrZW4xLCBjb2xvci5saWdodGVuMSwgY29sb3IubGlnaHRlbjIsIGNvbG9yLmxpZ2h0ZW4zLCBjb2xvci5saWdodGVuNCwgY29sb3IubGlnaHRlbjVdIDogW2NvbG9yLmJsYWNrLCBjb2xvci53aGl0ZSwgY29sb3IudHJhbnNwYXJlbnRdO1xuICB9KTtcbn1cbmV4cG9ydCBjb25zdCBWQ29sb3JQaWNrZXJTd2F0Y2hlcyA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdWQ29sb3JQaWNrZXJTd2F0Y2hlcycsXG4gIHByb3BzOiBtYWtlVkNvbG9yUGlja2VyU3dhdGNoZXNQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6Y29sb3InOiBjb2xvciA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGVtaXRcbiAgICB9ID0gX3JlZjtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWNvbG9yLXBpY2tlci1zd2F0Y2hlcycsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW3tcbiAgICAgICAgbWF4SGVpZ2h0OiBjb252ZXJ0VG9Vbml0KHByb3BzLm1heEhlaWdodClcbiAgICAgIH0sIHByb3BzLnN0eWxlXVxuICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwgbnVsbCwgW3Byb3BzLnN3YXRjaGVzLm1hcChzd2F0Y2ggPT4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJ2LWNvbG9yLXBpY2tlci1zd2F0Y2hlc19fc3dhdGNoXCJcbiAgICB9LCBbc3dhdGNoLm1hcChjb2xvciA9PiB7XG4gICAgICBjb25zdCByZ2JhID0gcGFyc2VDb2xvcihjb2xvcik7XG4gICAgICBjb25zdCBoc3ZhID0gUkdCdG9IU1YocmdiYSk7XG4gICAgICBjb25zdCBiYWNrZ3JvdW5kID0gUkdCdG9DU1MocmdiYSk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtY29sb3ItcGlja2VyLXN3YXRjaGVzX19jb2xvclwiLFxuICAgICAgICBcIm9uQ2xpY2tcIjogKCkgPT4gaHN2YSAmJiBlbWl0KCd1cGRhdGU6Y29sb3InLCBoc3ZhKVxuICAgICAgfSwgW19jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwic3R5bGVcIjoge1xuICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgfVxuICAgICAgfSwgW3Byb3BzLmNvbG9yICYmIGRlZXBFcXVhbChwcm9wcy5jb2xvciwgaHN2YSkgPyBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgXCJzaXplXCI6IFwieC1zbWFsbFwiLFxuICAgICAgICBcImljb25cIjogXCIkc3VjY2Vzc1wiLFxuICAgICAgICBcImNvbG9yXCI6IGdldENvbnRyYXN0KGNvbG9yLCAnI0ZGRkZGRicpID4gMiA/ICd3aGl0ZScgOiAnYmxhY2snXG4gICAgICB9LCBudWxsKSA6IHVuZGVmaW5lZF0pXSk7XG4gICAgfSldKSldKV0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNvbG9yUGlja2VyU3dhdGNoZXMubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WU2hlZXQuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQm9yZGVyUHJvcHMsIHVzZUJvcmRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ib3JkZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VCYWNrZ3JvdW5kQ29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURpbWVuc2lvblByb3BzLCB1c2VEaW1lbnNpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGltZW5zaW9ucy5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VMb2NhdGlvblByb3BzLCB1c2VMb2NhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VQb3NpdGlvblByb3BzLCB1c2VQb3NpdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wb3NpdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZTaGVldFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29sb3I6IFN0cmluZyxcbiAgLi4ubWFrZUJvcmRlclByb3BzKCksXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGltZW5zaW9uUHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKCksXG4gIC4uLm1ha2VMb2NhdGlvblByb3BzKCksXG4gIC4uLm1ha2VQb3NpdGlvblByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWU2hlZXQnKTtcbmV4cG9ydCBjb25zdCBWU2hlZXQgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlNoZWV0JyxcbiAgcHJvcHM6IG1ha2VWU2hlZXRQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHRvUmVmKHByb3BzLCAnY29sb3InKSk7XG4gICAgY29uc3Qge1xuICAgICAgYm9yZGVyQ2xhc3Nlc1xuICAgIH0gPSB1c2VCb3JkZXIocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRpbWVuc2lvblN0eWxlc1xuICAgIH0gPSB1c2VEaW1lbnNpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbkNsYXNzZXNcbiAgICB9ID0gdXNlRWxldmF0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBsb2NhdGlvblN0eWxlc1xuICAgIH0gPSB1c2VMb2NhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcG9zaXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZVBvc2l0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJjbGFzc1wiOiBbJ3Ytc2hlZXQnLCB0aGVtZUNsYXNzZXMudmFsdWUsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIGJvcmRlckNsYXNzZXMudmFsdWUsIGVsZXZhdGlvbkNsYXNzZXMudmFsdWUsIHBvc2l0aW9uQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW2JhY2tncm91bmRDb2xvclN0eWxlcy52YWx1ZSwgZGltZW5zaW9uU3R5bGVzLnZhbHVlLCBsb2NhdGlvblN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdXG4gICAgfSwgc2xvdHMpKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlNoZWV0Lm1qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkNvbG9yUGlja2VyLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQ29sb3JQaWNrZXJDYW52YXMgfSBmcm9tIFwiLi9WQ29sb3JQaWNrZXJDYW52YXMubWpzXCI7XG5pbXBvcnQgeyBWQ29sb3JQaWNrZXJFZGl0IH0gZnJvbSBcIi4vVkNvbG9yUGlja2VyRWRpdC5tanNcIjtcbmltcG9ydCB7IFZDb2xvclBpY2tlclByZXZpZXcgfSBmcm9tIFwiLi9WQ29sb3JQaWNrZXJQcmV2aWV3Lm1qc1wiO1xuaW1wb3J0IHsgVkNvbG9yUGlja2VyU3dhdGNoZXMgfSBmcm9tIFwiLi9WQ29sb3JQaWNrZXJTd2F0Y2hlcy5tanNcIjtcbmltcG9ydCB7IG1ha2VWU2hlZXRQcm9wcywgVlNoZWV0IH0gZnJvbSBcIi4uL1ZTaGVldC9WU2hlZXQubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBwcm92aWRlRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBvbk1vdW50ZWQsIHJlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBleHRyYWN0Q29sb3IsIG1vZGVzLCBudWxsQ29sb3IgfSBmcm9tIFwiLi91dGlsL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgY29uc29sZVdhcm4sIGRlZmluZUNvbXBvbmVudCwgSFNWdG9DU1MsIG9taXQsIHBhcnNlQ29sb3IsIHByb3BzRmFjdG9yeSwgUkdCdG9IU1YsIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWQ29sb3JQaWNrZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNhbnZhc0hlaWdodDoge1xuICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgZGVmYXVsdDogMTUwXG4gIH0sXG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICBkb3RTaXplOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAxMFxuICB9LFxuICBoaWRlQ2FudmFzOiBCb29sZWFuLFxuICBoaWRlU2xpZGVyczogQm9vbGVhbixcbiAgaGlkZUlucHV0czogQm9vbGVhbixcbiAgbW9kZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAncmdiYScsXG4gICAgdmFsaWRhdG9yOiB2ID0+IE9iamVjdC5rZXlzKG1vZGVzKS5pbmNsdWRlcyh2KVxuICB9LFxuICBtb2Rlczoge1xuICAgIHR5cGU6IEFycmF5LFxuICAgIGRlZmF1bHQ6ICgpID0+IE9iamVjdC5rZXlzKG1vZGVzKSxcbiAgICB2YWxpZGF0b3I6IHYgPT4gQXJyYXkuaXNBcnJheSh2KSAmJiB2LmV2ZXJ5KG0gPT4gT2JqZWN0LmtleXMobW9kZXMpLmluY2x1ZGVzKG0pKVxuICB9LFxuICBzaG93U3dhdGNoZXM6IEJvb2xlYW4sXG4gIHN3YXRjaGVzOiBBcnJheSxcbiAgc3dhdGNoZXNNYXhIZWlnaHQ6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDE1MFxuICB9LFxuICBtb2RlbFZhbHVlOiB7XG4gICAgdHlwZTogW09iamVjdCwgU3RyaW5nXVxuICB9LFxuICAuLi5vbWl0KG1ha2VWU2hlZXRQcm9wcyh7XG4gICAgd2lkdGg6IDMwMFxuICB9KSwgWydoZWlnaHQnLCAnbG9jYXRpb24nLCAnbWluSGVpZ2h0JywgJ21heEhlaWdodCcsICdtaW5XaWR0aCcsICdtYXhXaWR0aCddKVxufSwgJ1ZDb2xvclBpY2tlcicpO1xuZXhwb3J0IGNvbnN0IFZDb2xvclBpY2tlciA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdWQ29sb3JQaWNrZXInLFxuICBwcm9wczogbWFrZVZDb2xvclBpY2tlclByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogY29sb3IgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1vZGUnOiBtb2RlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMpIHtcbiAgICBjb25zdCBtb2RlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZScpO1xuICAgIGNvbnN0IGxhc3RQaWNrZWRDb2xvciA9IHJlZihudWxsKTtcbiAgICBjb25zdCBjdXJyZW50Q29sb3IgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJywgdW5kZWZpbmVkLCB2ID0+IHtcbiAgICAgIGlmICh2ID09IG51bGwgfHwgdiA9PT0gJycpIHJldHVybiBudWxsO1xuICAgICAgbGV0IGM7XG4gICAgICB0cnkge1xuICAgICAgICBjID0gUkdCdG9IU1YocGFyc2VDb2xvcih2KSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZVdhcm4oZXJyKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAobGFzdFBpY2tlZENvbG9yLnZhbHVlKSB7XG4gICAgICAgIGMgPSB7XG4gICAgICAgICAgLi4uYyxcbiAgICAgICAgICBoOiBsYXN0UGlja2VkQ29sb3IudmFsdWUuaFxuICAgICAgICB9O1xuICAgICAgICBsYXN0UGlja2VkQ29sb3IudmFsdWUgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGM7XG4gICAgfSwgdiA9PiB7XG4gICAgICBpZiAoIXYpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIGV4dHJhY3RDb2xvcih2LCBwcm9wcy5tb2RlbFZhbHVlKTtcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBydGxDbGFzc2VzXG4gICAgfSA9IHVzZVJ0bCgpO1xuICAgIGNvbnN0IHVwZGF0ZUNvbG9yID0gaHN2YSA9PiB7XG4gICAgICBjdXJyZW50Q29sb3IudmFsdWUgPSBoc3ZhO1xuICAgICAgbGFzdFBpY2tlZENvbG9yLnZhbHVlID0gaHN2YTtcbiAgICB9O1xuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLm1vZGVzLmluY2x1ZGVzKG1vZGUudmFsdWUpKSBtb2RlLnZhbHVlID0gcHJvcHMubW9kZXNbMF07XG4gICAgfSk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZTbGlkZXI6IHtcbiAgICAgICAgY29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgdHJhY2tDb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICB0cmFja0ZpbGxDb2xvcjogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IFtzaGVldFByb3BzXSA9IFZTaGVldC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZTaGVldCwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcInJvdW5kZWRcIjogcHJvcHMucm91bmRlZCxcbiAgICAgICAgXCJlbGV2YXRpb25cIjogcHJvcHMuZWxldmF0aW9uLFxuICAgICAgICBcInRoZW1lXCI6IHByb3BzLnRoZW1lLFxuICAgICAgICBcImNsYXNzXCI6IFsndi1jb2xvci1waWNrZXInLCBydGxDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogW3tcbiAgICAgICAgICAnLS12LWNvbG9yLXBpY2tlci1jb2xvci1oc3YnOiBIU1Z0b0NTUyh7XG4gICAgICAgICAgICAuLi4oY3VycmVudENvbG9yLnZhbHVlID8/IG51bGxDb2xvciksXG4gICAgICAgICAgICBhOiAxXG4gICAgICAgICAgfSlcbiAgICAgICAgfSwgcHJvcHMuc3R5bGVdXG4gICAgICB9LCBzaGVldFByb3BzLCB7XG4gICAgICAgIFwibWF4V2lkdGhcIjogcHJvcHMud2lkdGhcbiAgICAgIH0pLCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFshcHJvcHMuaGlkZUNhbnZhcyAmJiBfY3JlYXRlVk5vZGUoVkNvbG9yUGlja2VyQ2FudmFzLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJjYW52YXNcIixcbiAgICAgICAgICBcImNvbG9yXCI6IGN1cnJlbnRDb2xvci52YWx1ZSxcbiAgICAgICAgICBcIm9uVXBkYXRlOmNvbG9yXCI6IHVwZGF0ZUNvbG9yLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgXCJkb3RTaXplXCI6IHByb3BzLmRvdFNpemUsXG4gICAgICAgICAgXCJ3aWR0aFwiOiBwcm9wcy53aWR0aCxcbiAgICAgICAgICBcImhlaWdodFwiOiBwcm9wcy5jYW52YXNIZWlnaHRcbiAgICAgICAgfSwgbnVsbCksICghcHJvcHMuaGlkZVNsaWRlcnMgfHwgIXByb3BzLmhpZGVJbnB1dHMpICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJjb250cm9sc1wiLFxuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LWNvbG9yLXBpY2tlcl9fY29udHJvbHNcIlxuICAgICAgICB9LCBbIXByb3BzLmhpZGVTbGlkZXJzICYmIF9jcmVhdGVWTm9kZShWQ29sb3JQaWNrZXJQcmV2aWV3LCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwcmV2aWV3XCIsXG4gICAgICAgICAgXCJjb2xvclwiOiBjdXJyZW50Q29sb3IudmFsdWUsXG4gICAgICAgICAgXCJvblVwZGF0ZTpjb2xvclwiOiB1cGRhdGVDb2xvcixcbiAgICAgICAgICBcImhpZGVBbHBoYVwiOiAhbW9kZS52YWx1ZS5lbmRzV2l0aCgnYScpLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogcHJvcHMuZGlzYWJsZWRcbiAgICAgICAgfSwgbnVsbCksICFwcm9wcy5oaWRlSW5wdXRzICYmIF9jcmVhdGVWTm9kZShWQ29sb3JQaWNrZXJFZGl0LCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJlZGl0XCIsXG4gICAgICAgICAgXCJtb2Rlc1wiOiBwcm9wcy5tb2RlcyxcbiAgICAgICAgICBcIm1vZGVcIjogbW9kZS52YWx1ZSxcbiAgICAgICAgICBcIm9uVXBkYXRlOm1vZGVcIjogbSA9PiBtb2RlLnZhbHVlID0gbSxcbiAgICAgICAgICBcImNvbG9yXCI6IGN1cnJlbnRDb2xvci52YWx1ZSxcbiAgICAgICAgICBcIm9uVXBkYXRlOmNvbG9yXCI6IHVwZGF0ZUNvbG9yLFxuICAgICAgICAgIFwiZGlzYWJsZWRcIjogcHJvcHMuZGlzYWJsZWRcbiAgICAgICAgfSwgbnVsbCldKSwgcHJvcHMuc2hvd1N3YXRjaGVzICYmIF9jcmVhdGVWTm9kZShWQ29sb3JQaWNrZXJTd2F0Y2hlcywge1xuICAgICAgICAgIFwia2V5XCI6IFwic3dhdGNoZXNcIixcbiAgICAgICAgICBcImNvbG9yXCI6IGN1cnJlbnRDb2xvci52YWx1ZSxcbiAgICAgICAgICBcIm9uVXBkYXRlOmNvbG9yXCI6IHVwZGF0ZUNvbG9yLFxuICAgICAgICAgIFwibWF4SGVpZ2h0XCI6IHByb3BzLnN3YXRjaGVzTWF4SGVpZ2h0LFxuICAgICAgICAgIFwic3dhdGNoZXNcIjogcHJvcHMuc3dhdGNoZXMsXG4gICAgICAgICAgXCJkaXNhYmxlZFwiOiBwcm9wcy5kaXNhYmxlZFxuICAgICAgICB9LCBudWxsKV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WQ29sb3JQaWNrZXIubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIEZyYWdtZW50IGFzIF9GcmFnbWVudCB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WQ29tYm9ib3guY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZDaGVja2JveEJ0biB9IGZyb20gXCIuLi9WQ2hlY2tib3gvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWQ2hpcCB9IGZyb20gXCIuLi9WQ2hpcC9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZEZWZhdWx0c1Byb3ZpZGVyIH0gZnJvbSBcIi4uL1ZEZWZhdWx0c1Byb3ZpZGVyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkljb24gfSBmcm9tIFwiLi4vVkljb24vaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWTGlzdCwgVkxpc3RJdGVtIH0gZnJvbSBcIi4uL1ZMaXN0L2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVk1lbnUgfSBmcm9tIFwiLi4vVk1lbnUvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBtYWtlU2VsZWN0UHJvcHMgfSBmcm9tIFwiLi4vVlNlbGVjdC9WU2VsZWN0Lm1qc1wiO1xuaW1wb3J0IHsgVlRleHRGaWVsZCB9IGZyb20gXCIuLi9WVGV4dEZpZWxkL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZUZXh0RmllbGRQcm9wcyB9IGZyb20gXCIuLi9WVGV4dEZpZWxkL1ZUZXh0RmllbGQubWpzXCI7XG5pbXBvcnQgeyBWVmlydHVhbFNjcm9sbCB9IGZyb20gXCIuLi9WVmlydHVhbFNjcm9sbC9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVNjcm9sbGluZyB9IGZyb20gXCIuLi9WU2VsZWN0L3VzZVNjcm9sbGluZy5tanNcIjtcbmltcG9ydCB7IHVzZVRleHRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VGaWx0ZXJQcm9wcywgdXNlRmlsdGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZpbHRlci5tanNcIjtcbmltcG9ydCB7IHVzZUZvcm0gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9ybS5tanNcIjtcbmltcG9ydCB7IGZvcndhcmRSZWZzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvcndhcmRSZWZzLm1qc1wiO1xuaW1wb3J0IHsgdHJhbnNmb3JtSXRlbSwgdXNlSXRlbXMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGlzdC1pdGVtcy5tanNcIjtcbmltcG9ydCB7IHVzZUxvY2FsZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhbGUubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRyYW5zaXRpb25Qcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90cmFuc2l0aW9uLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBtZXJnZVByb3BzLCBuZXh0VGljaywgcmVmLCBzaGFsbG93UmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBJTl9CUk9XU0VSLCBub29wLCBvbWl0LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciwgd3JhcEluQXJyYXkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmZ1bmN0aW9uIGhpZ2hsaWdodFJlc3VsdCh0ZXh0LCBtYXRjaGVzLCBsZW5ndGgpIHtcbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkgcmV0dXJuIHRleHQ7XG4gIGlmIChBcnJheS5pc0FycmF5KG1hdGNoZXMpKSB0aHJvdyBuZXcgRXJyb3IoJ011bHRpcGxlIG1hdGNoZXMgaXMgbm90IGltcGxlbWVudGVkJyk7XG4gIHJldHVybiB0eXBlb2YgbWF0Y2hlcyA9PT0gJ251bWJlcicgJiYgfm1hdGNoZXMgPyBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgXCJjbGFzc1wiOiBcInYtY29tYm9ib3hfX3VubWFza1wiXG4gIH0sIFt0ZXh0LnN1YnN0cigwLCBtYXRjaGVzKV0pLCBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICBcImNsYXNzXCI6IFwidi1jb21ib2JveF9fbWFza1wiXG4gIH0sIFt0ZXh0LnN1YnN0cihtYXRjaGVzLCBsZW5ndGgpXSksIF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgIFwiY2xhc3NcIjogXCJ2LWNvbWJvYm94X191bm1hc2tcIlxuICB9LCBbdGV4dC5zdWJzdHIobWF0Y2hlcyArIGxlbmd0aCldKV0pIDogdGV4dDtcbn1cbmV4cG9ydCBjb25zdCBtYWtlVkNvbWJvYm94UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhdXRvU2VsZWN0Rmlyc3Q6IHtcbiAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nXVxuICB9LFxuICBkZWxpbWl0ZXJzOiBBcnJheSxcbiAgLi4ubWFrZUZpbHRlclByb3BzKHtcbiAgICBmaWx0ZXJLZXlzOiBbJ3RpdGxlJ11cbiAgfSksXG4gIC4uLm1ha2VTZWxlY3RQcm9wcyh7XG4gICAgaGlkZU5vRGF0YTogdHJ1ZSxcbiAgICByZXR1cm5PYmplY3Q6IHRydWVcbiAgfSksXG4gIC4uLm9taXQobWFrZVZUZXh0RmllbGRQcm9wcyh7XG4gICAgbW9kZWxWYWx1ZTogbnVsbCxcbiAgICByb2xlOiAnY29tYm9ib3gnXG4gIH0pLCBbJ3ZhbGlkYXRpb25WYWx1ZScsICdkaXJ0eScsICdhcHBlbmRJbm5lckljb24nXSksXG4gIC4uLm1ha2VUcmFuc2l0aW9uUHJvcHMoe1xuICAgIHRyYW5zaXRpb246IGZhbHNlXG4gIH0pXG59LCAnVkNvbWJvYm94Jyk7XG5leHBvcnQgY29uc3QgVkNvbWJvYm94ID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZDb21ib2JveCcsXG4gIHByb3BzOiBtYWtlVkNvbWJvYm94UHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOmZvY3VzZWQnOiBmb2N1c2VkID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWUsXG4gICAgJ3VwZGF0ZTpzZWFyY2gnOiB2YWwgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1lbnUnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBlbWl0LFxuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0XG4gICAgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IHZUZXh0RmllbGRSZWYgPSByZWYoKTtcbiAgICBjb25zdCBpc0ZvY3VzZWQgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgICBjb25zdCBpc1ByaXN0aW5lID0gc2hhbGxvd1JlZih0cnVlKTtcbiAgICBjb25zdCBsaXN0SGFzRm9jdXMgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgICBjb25zdCB2TWVudVJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHZWaXJ0dWFsU2Nyb2xsUmVmID0gcmVmKCk7XG4gICAgY29uc3QgX21lbnUgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtZW51Jyk7XG4gICAgY29uc3QgbWVudSA9IGNvbXB1dGVkKHtcbiAgICAgIGdldDogKCkgPT4gX21lbnUudmFsdWUsXG4gICAgICBzZXQ6IHYgPT4ge1xuICAgICAgICBpZiAoX21lbnUudmFsdWUgJiYgIXYgJiYgdk1lbnVSZWYudmFsdWU/Ls6ob3BlbkNoaWxkcmVuKSByZXR1cm47XG4gICAgICAgIF9tZW51LnZhbHVlID0gdjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBzZWxlY3Rpb25JbmRleCA9IHNoYWxsb3dSZWYoLTEpO1xuICAgIGxldCBjbGVhcmVkID0gZmFsc2U7XG4gICAgY29uc3QgY29sb3IgPSBjb21wdXRlZCgoKSA9PiB2VGV4dEZpZWxkUmVmLnZhbHVlPy5jb2xvcik7XG4gICAgY29uc3QgbGFiZWwgPSBjb21wdXRlZCgoKSA9PiBtZW51LnZhbHVlID8gcHJvcHMuY2xvc2VUZXh0IDogcHJvcHMub3BlblRleHQpO1xuICAgIGNvbnN0IHtcbiAgICAgIGl0ZW1zLFxuICAgICAgdHJhbnNmb3JtSW4sXG4gICAgICB0cmFuc2Zvcm1PdXRcbiAgICB9ID0gdXNlSXRlbXMocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRleHRDb2xvckNsYXNzZXMsXG4gICAgICB0ZXh0Q29sb3JTdHlsZXNcbiAgICB9ID0gdXNlVGV4dENvbG9yKGNvbG9yKTtcbiAgICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnLCBbXSwgdiA9PiB0cmFuc2Zvcm1Jbih3cmFwSW5BcnJheSh2KSksIHYgPT4ge1xuICAgICAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1PdXQodik7XG4gICAgICByZXR1cm4gcHJvcHMubXVsdGlwbGUgPyB0cmFuc2Zvcm1lZCA6IHRyYW5zZm9ybWVkWzBdID8/IG51bGw7XG4gICAgfSk7XG4gICAgY29uc3QgZm9ybSA9IHVzZUZvcm0oKTtcbiAgICBjb25zdCBfc2VhcmNoID0gc2hhbGxvd1JlZighcHJvcHMubXVsdGlwbGUgPyBtb2RlbC52YWx1ZVswXT8udGl0bGUgPz8gJycgOiAnJyk7XG4gICAgY29uc3Qgc2VhcmNoID0gY29tcHV0ZWQoe1xuICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBfc2VhcmNoLnZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldDogdmFsID0+IHtcbiAgICAgICAgX3NlYXJjaC52YWx1ZSA9IHZhbDtcbiAgICAgICAgaWYgKCFwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgICAgIG1vZGVsLnZhbHVlID0gW3RyYW5zZm9ybUl0ZW0ocHJvcHMsIHZhbCldO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwgJiYgcHJvcHMubXVsdGlwbGUgJiYgcHJvcHMuZGVsaW1pdGVycz8ubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWVzID0gdmFsLnNwbGl0KG5ldyBSZWdFeHAoYCg/OiR7cHJvcHMuZGVsaW1pdGVycy5qb2luKCd8Jyl9KStgKSk7XG4gICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YWx1ZXMuZm9yRWFjaCh2ID0+IHtcbiAgICAgICAgICAgICAgdiA9IHYudHJpbSgpO1xuICAgICAgICAgICAgICBpZiAodikgc2VsZWN0KHRyYW5zZm9ybUl0ZW0ocHJvcHMsIHYpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3NlYXJjaC52YWx1ZSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbCkgc2VsZWN0aW9uSW5kZXgudmFsdWUgPSAtMTtcbiAgICAgICAgaXNQcmlzdGluZS52YWx1ZSA9ICF2YWw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgd2F0Y2goX3NlYXJjaCwgdmFsdWUgPT4ge1xuICAgICAgaWYgKGNsZWFyZWQpIHtcbiAgICAgICAgLy8gd2FpdCBmb3IgY2xlYXIgdG8gZmluaXNoLCBWVGV4dEZpZWxkIHNldHMgX3NlYXJjaCB0byBudWxsXG4gICAgICAgIC8vIHRoZW4gc2VhcmNoIGNvbXB1dGVkIHRyaWdnZXJzIGFuZCB1cGRhdGVzIF9zZWFyY2ggdG8gJydcbiAgICAgICAgbmV4dFRpY2soKCkgPT4gY2xlYXJlZCA9IGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNGb2N1c2VkLnZhbHVlICYmICFtZW51LnZhbHVlKSB7XG4gICAgICAgIG1lbnUudmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgZW1pdCgndXBkYXRlOnNlYXJjaCcsIHZhbHVlKTtcbiAgICB9KTtcbiAgICB3YXRjaChtb2RlbCwgdmFsdWUgPT4ge1xuICAgICAgaWYgKCFwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgICBfc2VhcmNoLnZhbHVlID0gdmFsdWVbMF0/LnRpdGxlID8/ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGZpbHRlcmVkSXRlbXMsXG4gICAgICBnZXRNYXRjaGVzXG4gICAgfSA9IHVzZUZpbHRlcihwcm9wcywgaXRlbXMsICgpID0+IGlzUHJpc3RpbmUudmFsdWUgPyAnJyA6IHNlYXJjaC52YWx1ZSk7XG4gICAgY29uc3QgZGlzcGxheUl0ZW1zID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmhpZGVTZWxlY3RlZCkge1xuICAgICAgICByZXR1cm4gZmlsdGVyZWRJdGVtcy52YWx1ZS5maWx0ZXIoZmlsdGVyZWRJdGVtID0+ICFtb2RlbC52YWx1ZS5zb21lKHMgPT4gcy52YWx1ZSA9PT0gZmlsdGVyZWRJdGVtLnZhbHVlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlsdGVyZWRJdGVtcy52YWx1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBzZWxlY3RlZFZhbHVlcyA9IGNvbXB1dGVkKCgpID0+IG1vZGVsLnZhbHVlLm1hcChzZWxlY3Rpb24gPT4gc2VsZWN0aW9uLnZhbHVlKSk7XG4gICAgY29uc3QgaGlnaGxpZ2h0Rmlyc3QgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBzZWxlY3RGaXJzdCA9IHByb3BzLmF1dG9TZWxlY3RGaXJzdCA9PT0gdHJ1ZSB8fCBwcm9wcy5hdXRvU2VsZWN0Rmlyc3QgPT09ICdleGFjdCcgJiYgc2VhcmNoLnZhbHVlID09PSBkaXNwbGF5SXRlbXMudmFsdWVbMF0/LnRpdGxlO1xuICAgICAgcmV0dXJuIHNlbGVjdEZpcnN0ICYmIGRpc3BsYXlJdGVtcy52YWx1ZS5sZW5ndGggPiAwICYmICFpc1ByaXN0aW5lLnZhbHVlICYmICFsaXN0SGFzRm9jdXMudmFsdWU7XG4gICAgfSk7XG4gICAgY29uc3QgbWVudURpc2FibGVkID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuaGlkZU5vRGF0YSAmJiAhaXRlbXMudmFsdWUubGVuZ3RoIHx8IHByb3BzLnJlYWRvbmx5IHx8IGZvcm0/LmlzUmVhZG9ubHkudmFsdWUpO1xuICAgIGNvbnN0IGxpc3RSZWYgPSByZWYoKTtcbiAgICBjb25zdCB7XG4gICAgICBvbkxpc3RTY3JvbGwsXG4gICAgICBvbkxpc3RLZXlkb3duXG4gICAgfSA9IHVzZVNjcm9sbGluZyhsaXN0UmVmLCB2VGV4dEZpZWxkUmVmKTtcbiAgICBmdW5jdGlvbiBvbkNsZWFyKGUpIHtcbiAgICAgIGNsZWFyZWQgPSB0cnVlO1xuICAgICAgaWYgKHByb3BzLm9wZW5PbkNsZWFyKSB7XG4gICAgICAgIG1lbnUudmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbk1vdXNlZG93bkNvbnRyb2woKSB7XG4gICAgICBpZiAobWVudURpc2FibGVkLnZhbHVlKSByZXR1cm47XG4gICAgICBtZW51LnZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Nb3VzZWRvd25NZW51SWNvbihlKSB7XG4gICAgICBpZiAobWVudURpc2FibGVkLnZhbHVlKSByZXR1cm47XG4gICAgICBpZiAoaXNGb2N1c2VkLnZhbHVlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICAgIG1lbnUudmFsdWUgPSAhbWVudS52YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25LZXlkb3duKGUpIHtcbiAgICAgIGlmIChwcm9wcy5yZWFkb25seSB8fCBmb3JtPy5pc1JlYWRvbmx5LnZhbHVlKSByZXR1cm47XG4gICAgICBjb25zdCBzZWxlY3Rpb25TdGFydCA9IHZUZXh0RmllbGRSZWYudmFsdWUuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICBjb25zdCBsZW5ndGggPSBtb2RlbC52YWx1ZS5sZW5ndGg7XG4gICAgICBpZiAoc2VsZWN0aW9uSW5kZXgudmFsdWUgPiAtMSB8fCBbJ0VudGVyJywgJ0Fycm93RG93bicsICdBcnJvd1VwJ10uaW5jbHVkZXMoZS5rZXkpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChbJ0VudGVyJywgJ0Fycm93RG93biddLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICBtZW51LnZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChbJ0VzY2FwZSddLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICBtZW51LnZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoWydFbnRlcicsICdFc2NhcGUnLCAnVGFiJ10uaW5jbHVkZXMoZS5rZXkpKSB7XG4gICAgICAgIGlmIChoaWdobGlnaHRGaXJzdC52YWx1ZSAmJiBbJ0VudGVyJywgJ1RhYiddLmluY2x1ZGVzKGUua2V5KSkge1xuICAgICAgICAgIHNlbGVjdChmaWx0ZXJlZEl0ZW1zLnZhbHVlWzBdKTtcbiAgICAgICAgfVxuICAgICAgICBpc1ByaXN0aW5lLnZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChlLmtleSA9PT0gJ0Fycm93RG93bicgJiYgaGlnaGxpZ2h0Rmlyc3QudmFsdWUpIHtcbiAgICAgICAgbGlzdFJlZi52YWx1ZT8uZm9jdXMoJ25leHQnKTtcbiAgICAgIH1cbiAgICAgIGlmICghcHJvcHMubXVsdGlwbGUpIHJldHVybjtcbiAgICAgIGlmIChbJ0JhY2tzcGFjZScsICdEZWxldGUnXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgaWYgKHNlbGVjdGlvbkluZGV4LnZhbHVlIDwgMCkge1xuICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0JhY2tzcGFjZScgJiYgIXNlYXJjaC52YWx1ZSkge1xuICAgICAgICAgICAgc2VsZWN0aW9uSW5kZXgudmFsdWUgPSBsZW5ndGggLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3JpZ2luYWxTZWxlY3Rpb25JbmRleCA9IHNlbGVjdGlvbkluZGV4LnZhbHVlO1xuICAgICAgICBjb25zdCBzZWxlY3RlZEl0ZW0gPSBtb2RlbC52YWx1ZVtzZWxlY3Rpb25JbmRleC52YWx1ZV07XG4gICAgICAgIGlmIChzZWxlY3RlZEl0ZW0gJiYgIXNlbGVjdGVkSXRlbS5wcm9wcy5kaXNhYmxlZCkgc2VsZWN0KHNlbGVjdGVkSXRlbSk7XG4gICAgICAgIHNlbGVjdGlvbkluZGV4LnZhbHVlID0gb3JpZ2luYWxTZWxlY3Rpb25JbmRleCA+PSBsZW5ndGggLSAxID8gbGVuZ3RoIC0gMiA6IG9yaWdpbmFsU2VsZWN0aW9uSW5kZXg7XG4gICAgICB9XG4gICAgICBpZiAoZS5rZXkgPT09ICdBcnJvd0xlZnQnKSB7XG4gICAgICAgIGlmIChzZWxlY3Rpb25JbmRleC52YWx1ZSA8IDAgJiYgc2VsZWN0aW9uU3RhcnQgPiAwKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHByZXYgPSBzZWxlY3Rpb25JbmRleC52YWx1ZSA+IC0xID8gc2VsZWN0aW9uSW5kZXgudmFsdWUgLSAxIDogbGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKG1vZGVsLnZhbHVlW3ByZXZdKSB7XG4gICAgICAgICAgc2VsZWN0aW9uSW5kZXgudmFsdWUgPSBwcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGVjdGlvbkluZGV4LnZhbHVlID0gLTE7XG4gICAgICAgICAgdlRleHRGaWVsZFJlZi52YWx1ZS5zZXRTZWxlY3Rpb25SYW5nZShzZWFyY2gudmFsdWUubGVuZ3RoLCBzZWFyY2gudmFsdWUubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dSaWdodCcpIHtcbiAgICAgICAgaWYgKHNlbGVjdGlvbkluZGV4LnZhbHVlIDwgMCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBuZXh0ID0gc2VsZWN0aW9uSW5kZXgudmFsdWUgKyAxO1xuICAgICAgICBpZiAobW9kZWwudmFsdWVbbmV4dF0pIHtcbiAgICAgICAgICBzZWxlY3Rpb25JbmRleC52YWx1ZSA9IG5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZWN0aW9uSW5kZXgudmFsdWUgPSAtMTtcbiAgICAgICAgICB2VGV4dEZpZWxkUmVmLnZhbHVlLnNldFNlbGVjdGlvblJhbmdlKDAsIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgJiYgc2VhcmNoLnZhbHVlKSB7XG4gICAgICAgIHNlbGVjdCh0cmFuc2Zvcm1JdGVtKHByb3BzLCBzZWFyY2gudmFsdWUpKTtcbiAgICAgICAgc2VhcmNoLnZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQWZ0ZXJMZWF2ZSgpIHtcbiAgICAgIGlmIChpc0ZvY3VzZWQudmFsdWUpIHtcbiAgICAgICAgaXNQcmlzdGluZS52YWx1ZSA9IHRydWU7XG4gICAgICAgIHZUZXh0RmllbGRSZWYudmFsdWU/LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNlbGVjdChpdGVtKSB7XG4gICAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBtb2RlbC52YWx1ZS5maW5kSW5kZXgoc2VsZWN0aW9uID0+IHByb3BzLnZhbHVlQ29tcGFyYXRvcihzZWxlY3Rpb24udmFsdWUsIGl0ZW0udmFsdWUpKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgIG1vZGVsLnZhbHVlID0gWy4uLm1vZGVsLnZhbHVlLCBpdGVtXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IFsuLi5tb2RlbC52YWx1ZV07XG4gICAgICAgICAgdmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICBtb2RlbC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHNlYXJjaC52YWx1ZSA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbW9kZWwudmFsdWUgPSBbaXRlbV07XG4gICAgICAgIF9zZWFyY2gudmFsdWUgPSBpdGVtLnRpdGxlO1xuXG4gICAgICAgIC8vIHdhdGNoIGZvciBzZWFyY2ggd2F0Y2hlciB0byB0cmlnZ2VyXG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBtZW51LnZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgaXNQcmlzdGluZS52YWx1ZSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkZvY3VzaW4oZSkge1xuICAgICAgaXNGb2N1c2VkLnZhbHVlID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBsaXN0SGFzRm9jdXMudmFsdWUgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRm9jdXNvdXQoZSkge1xuICAgICAgbGlzdEhhc0ZvY3VzLnZhbHVlID0gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uVXBkYXRlTW9kZWxWYWx1ZSh2KSB7XG4gICAgICBpZiAodiA9PSBudWxsIHx8IHYgPT09ICcnICYmICFwcm9wcy5tdWx0aXBsZSkgbW9kZWwudmFsdWUgPSBbXTtcbiAgICB9XG4gICAgd2F0Y2goZmlsdGVyZWRJdGVtcywgdmFsID0+IHtcbiAgICAgIGlmICghdmFsLmxlbmd0aCAmJiBwcm9wcy5oaWRlTm9EYXRhKSBtZW51LnZhbHVlID0gZmFsc2U7XG4gICAgfSk7XG4gICAgd2F0Y2goaXNGb2N1c2VkLCAodmFsLCBvbGRWYWwpID0+IHtcbiAgICAgIGlmICh2YWwgfHwgdmFsID09PSBvbGRWYWwpIHJldHVybjtcbiAgICAgIHNlbGVjdGlvbkluZGV4LnZhbHVlID0gLTE7XG4gICAgICBtZW51LnZhbHVlID0gZmFsc2U7XG4gICAgICBpZiAoaGlnaGxpZ2h0Rmlyc3QudmFsdWUgJiYgIWxpc3RIYXNGb2N1cy52YWx1ZSAmJiAhbW9kZWwudmFsdWUuc29tZShfcmVmMiA9PiB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSA9IF9yZWYyO1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IGRpc3BsYXlJdGVtcy52YWx1ZVswXS52YWx1ZTtcbiAgICAgIH0pKSB7XG4gICAgICAgIHNlbGVjdChkaXNwbGF5SXRlbXMudmFsdWVbMF0pO1xuICAgICAgfSBlbHNlIGlmIChwcm9wcy5tdWx0aXBsZSAmJiBzZWFyY2gudmFsdWUpIHtcbiAgICAgICAgbW9kZWwudmFsdWUgPSBbLi4ubW9kZWwudmFsdWUsIHRyYW5zZm9ybUl0ZW0ocHJvcHMsIHNlYXJjaC52YWx1ZSldO1xuICAgICAgICBzZWFyY2gudmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICB9KTtcbiAgICB3YXRjaChtZW51LCAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLmhpZGVTZWxlY3RlZCAmJiBtZW51LnZhbHVlICYmIG1vZGVsLnZhbHVlLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IGRpc3BsYXlJdGVtcy52YWx1ZS5maW5kSW5kZXgoaXRlbSA9PiBtb2RlbC52YWx1ZS5zb21lKHMgPT4gcHJvcHMudmFsdWVDb21wYXJhdG9yKHMudmFsdWUsIGl0ZW0udmFsdWUpKSk7XG4gICAgICAgIElOX0JST1dTRVIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaW5kZXggPj0gMCAmJiB2VmlydHVhbFNjcm9sbFJlZi52YWx1ZT8uc2Nyb2xsVG9JbmRleChpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBoYXNDaGlwcyA9ICEhKHByb3BzLmNoaXBzIHx8IHNsb3RzLmNoaXApO1xuICAgICAgY29uc3QgaGFzTGlzdCA9ICEhKCFwcm9wcy5oaWRlTm9EYXRhIHx8IGRpc3BsYXlJdGVtcy52YWx1ZS5sZW5ndGggfHwgc2xvdHNbJ3ByZXBlbmQtaXRlbSddIHx8IHNsb3RzWydhcHBlbmQtaXRlbSddIHx8IHNsb3RzWyduby1kYXRhJ10pO1xuICAgICAgY29uc3QgaXNEaXJ0eSA9IG1vZGVsLnZhbHVlLmxlbmd0aCA+IDA7XG4gICAgICBjb25zdCBbdGV4dEZpZWxkUHJvcHNdID0gVlRleHRGaWVsZC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZUZXh0RmllbGQsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJyZWZcIjogdlRleHRGaWVsZFJlZlxuICAgICAgfSwgdGV4dEZpZWxkUHJvcHMsIHtcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IHNlYXJjaC52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IFskZXZlbnQgPT4gc2VhcmNoLnZhbHVlID0gJGV2ZW50LCBvblVwZGF0ZU1vZGVsVmFsdWVdLFxuICAgICAgICBcImZvY3VzZWRcIjogaXNGb2N1c2VkLnZhbHVlLFxuICAgICAgICBcIm9uVXBkYXRlOmZvY3VzZWRcIjogJGV2ZW50ID0+IGlzRm9jdXNlZC52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgXCJ2YWxpZGF0aW9uVmFsdWVcIjogbW9kZWwuZXh0ZXJuYWxWYWx1ZSxcbiAgICAgICAgXCJjb3VudGVyVmFsdWVcIjogcHJvcHMubXVsdGlwbGUgPyBtb2RlbC52YWx1ZS5sZW5ndGggOiBzZWFyY2gudmFsdWUubGVuZ3RoLFxuICAgICAgICBcImRpcnR5XCI6IGlzRGlydHksXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWNvbWJvYm94Jywge1xuICAgICAgICAgICd2LWNvbWJvYm94LS1hY3RpdmUtbWVudSc6IG1lbnUudmFsdWUsXG4gICAgICAgICAgJ3YtY29tYm9ib3gtLWNoaXBzJzogISFwcm9wcy5jaGlwcyxcbiAgICAgICAgICAndi1jb21ib2JveC0tc2VsZWN0aW9uLXNsb3QnOiAhIXNsb3RzLnNlbGVjdGlvbixcbiAgICAgICAgICAndi1jb21ib2JveC0tc2VsZWN0aW5nLWluZGV4Jzogc2VsZWN0aW9uSW5kZXgudmFsdWUgPiAtMSxcbiAgICAgICAgICBbYHYtY29tYm9ib3gtLSR7cHJvcHMubXVsdGlwbGUgPyAnbXVsdGlwbGUnIDogJ3NpbmdsZSd9YF06IHRydWVcbiAgICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlLFxuICAgICAgICBcInJlYWRvbmx5XCI6IHByb3BzLnJlYWRvbmx5LFxuICAgICAgICBcInBsYWNlaG9sZGVyXCI6IGlzRGlydHkgPyB1bmRlZmluZWQgOiBwcm9wcy5wbGFjZWhvbGRlcixcbiAgICAgICAgXCJvbkNsaWNrOmNsZWFyXCI6IG9uQ2xlYXIsXG4gICAgICAgIFwib25Nb3VzZWRvd246Y29udHJvbFwiOiBvbk1vdXNlZG93bkNvbnRyb2wsXG4gICAgICAgIFwib25LZXlkb3duXCI6IG9uS2V5ZG93blxuICAgICAgfSksIHtcbiAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtfY3JlYXRlVk5vZGUoVk1lbnUsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICBcInJlZlwiOiB2TWVudVJlZixcbiAgICAgICAgICBcIm1vZGVsVmFsdWVcIjogbWVudS52YWx1ZSxcbiAgICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IG1lbnUudmFsdWUgPSAkZXZlbnQsXG4gICAgICAgICAgXCJhY3RpdmF0b3JcIjogXCJwYXJlbnRcIixcbiAgICAgICAgICBcImNvbnRlbnRDbGFzc1wiOiBcInYtY29tYm9ib3hfX2NvbnRlbnRcIixcbiAgICAgICAgICBcImRpc2FibGVkXCI6IG1lbnVEaXNhYmxlZC52YWx1ZSxcbiAgICAgICAgICBcImVhZ2VyXCI6IHByb3BzLmVhZ2VyLFxuICAgICAgICAgIFwibWF4SGVpZ2h0XCI6IDMxMCxcbiAgICAgICAgICBcIm9wZW5PbkNsaWNrXCI6IGZhbHNlLFxuICAgICAgICAgIFwiY2xvc2VPbkNvbnRlbnRDbGlja1wiOiBmYWxzZSxcbiAgICAgICAgICBcInRyYW5zaXRpb25cIjogcHJvcHMudHJhbnNpdGlvbixcbiAgICAgICAgICBcIm9uQWZ0ZXJMZWF2ZVwiOiBvbkFmdGVyTGVhdmVcbiAgICAgICAgfSwgcHJvcHMubWVudVByb3BzKSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtoYXNMaXN0ICYmIF9jcmVhdGVWTm9kZShWTGlzdCwge1xuICAgICAgICAgICAgXCJyZWZcIjogbGlzdFJlZixcbiAgICAgICAgICAgIFwic2VsZWN0ZWRcIjogc2VsZWN0ZWRWYWx1ZXMudmFsdWUsXG4gICAgICAgICAgICBcInNlbGVjdFN0cmF0ZWd5XCI6IHByb3BzLm11bHRpcGxlID8gJ2luZGVwZW5kZW50JyA6ICdzaW5nbGUtaW5kZXBlbmRlbnQnLFxuICAgICAgICAgICAgXCJvbk1vdXNlZG93blwiOiBlID0+IGUucHJldmVudERlZmF1bHQoKSxcbiAgICAgICAgICAgIFwib25LZXlkb3duXCI6IG9uTGlzdEtleWRvd24sXG4gICAgICAgICAgICBcIm9uRm9jdXNpblwiOiBvbkZvY3VzaW4sXG4gICAgICAgICAgICBcIm9uRm9jdXNvdXRcIjogb25Gb2N1c291dCxcbiAgICAgICAgICAgIFwib25TY3JvbGxQYXNzaXZlXCI6IG9uTGlzdFNjcm9sbCxcbiAgICAgICAgICAgIFwidGFiaW5kZXhcIjogXCItMVwiLFxuICAgICAgICAgICAgXCJjb2xvclwiOiBwcm9wcy5pdGVtQ29sb3IgPz8gcHJvcHMuY29sb3JcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHNbJ3ByZXBlbmQtaXRlbSddPy4oKSwgIWRpc3BsYXlJdGVtcy52YWx1ZS5sZW5ndGggJiYgIXByb3BzLmhpZGVOb0RhdGEgJiYgKHNsb3RzWyduby1kYXRhJ10/LigpID8/IF9jcmVhdGVWTm9kZShWTGlzdEl0ZW0sIHtcbiAgICAgICAgICAgICAgXCJ0aXRsZVwiOiB0KHByb3BzLm5vRGF0YVRleHQpXG4gICAgICAgICAgICB9LCBudWxsKSksIF9jcmVhdGVWTm9kZShWVmlydHVhbFNjcm9sbCwge1xuICAgICAgICAgICAgICBcInJlZlwiOiB2VmlydHVhbFNjcm9sbFJlZixcbiAgICAgICAgICAgICAgXCJyZW5kZXJsZXNzXCI6IHRydWUsXG4gICAgICAgICAgICAgIFwiaXRlbXNcIjogZGlzcGxheUl0ZW1zLnZhbHVlXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6IF9yZWYzID0+IHtcbiAgICAgICAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgaXRlbVJlZlxuICAgICAgICAgICAgICAgIH0gPSBfcmVmMztcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtUHJvcHMgPSBtZXJnZVByb3BzKGl0ZW0ucHJvcHMsIHtcbiAgICAgICAgICAgICAgICAgIHJlZjogaXRlbVJlZixcbiAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgICAgICAgICBhY3RpdmU6IGhpZ2hsaWdodEZpcnN0LnZhbHVlICYmIGluZGV4ID09PSAwID8gdHJ1ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHNlbGVjdChpdGVtKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBzbG90cy5pdGVtPy4oe1xuICAgICAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgcHJvcHM6IGl0ZW1Qcm9wc1xuICAgICAgICAgICAgICAgIH0pID8/IF9jcmVhdGVWTm9kZShWTGlzdEl0ZW0sIGl0ZW1Qcm9wcywge1xuICAgICAgICAgICAgICAgICAgcHJlcGVuZDogX3JlZjQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgfSA9IF9yZWY0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Byb3BzLm11bHRpcGxlICYmICFwcm9wcy5oaWRlU2VsZWN0ZWQgPyBfY3JlYXRlVk5vZGUoVkNoZWNrYm94QnRuLCB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjogaXRlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBcIm1vZGVsVmFsdWVcIjogaXNTZWxlY3RlZCxcbiAgICAgICAgICAgICAgICAgICAgICBcInJpcHBsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICBcInRhYmluZGV4XCI6IFwiLTFcIlxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKSA6IHVuZGVmaW5lZCwgaXRlbS5wcm9wcy5wcmVwZW5kSWNvbiAmJiBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogaXRlbS5wcm9wcy5wcmVwZW5kSWNvblxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKV0pO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ByaXN0aW5lLnZhbHVlID8gaXRlbS50aXRsZSA6IGhpZ2hsaWdodFJlc3VsdChpdGVtLnRpdGxlLCBnZXRNYXRjaGVzKGl0ZW0pPy50aXRsZSwgc2VhcmNoLnZhbHVlPy5sZW5ndGggPz8gMCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLCBzbG90c1snYXBwZW5kLWl0ZW0nXT8uKCldXG4gICAgICAgICAgfSldXG4gICAgICAgIH0pLCBtb2RlbC52YWx1ZS5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgZnVuY3Rpb24gb25DaGlwQ2xvc2UoZSkge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHNlbGVjdChpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc2xvdFByb3BzID0ge1xuICAgICAgICAgICAgJ29uQ2xpY2s6Y2xvc2UnOiBvbkNoaXBDbG9zZSxcbiAgICAgICAgICAgIG9uTW91c2Vkb3duKGUpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vZGVsVmFsdWU6IHRydWUsXG4gICAgICAgICAgICAnb25VcGRhdGU6bW9kZWxWYWx1ZSc6IHVuZGVmaW5lZFxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICBcImtleVwiOiBpdGVtLnZhbHVlLFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBbJ3YtY29tYm9ib3hfX3NlbGVjdGlvbicsIGluZGV4ID09PSBzZWxlY3Rpb25JbmRleC52YWx1ZSAmJiBbJ3YtY29tYm9ib3hfX3NlbGVjdGlvbi0tc2VsZWN0ZWQnLCB0ZXh0Q29sb3JDbGFzc2VzLnZhbHVlXV0sXG4gICAgICAgICAgICBcInN0eWxlXCI6IGluZGV4ID09PSBzZWxlY3Rpb25JbmRleC52YWx1ZSA/IHRleHRDb2xvclN0eWxlcy52YWx1ZSA6IHt9XG4gICAgICAgICAgfSwgW2hhc0NoaXBzID8gIXNsb3RzLmNoaXAgPyBfY3JlYXRlVk5vZGUoVkNoaXAsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICAgIFwia2V5XCI6IFwiY2hpcFwiLFxuICAgICAgICAgICAgXCJjbG9zYWJsZVwiOiBwcm9wcy5jbG9zYWJsZUNoaXBzLFxuICAgICAgICAgICAgXCJzaXplXCI6IFwic21hbGxcIixcbiAgICAgICAgICAgIFwidGV4dFwiOiBpdGVtLnRpdGxlLFxuICAgICAgICAgICAgXCJkaXNhYmxlZFwiOiBpdGVtLnByb3BzLmRpc2FibGVkXG4gICAgICAgICAgfSwgc2xvdFByb3BzKSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIFwia2V5XCI6IFwiY2hpcC1kZWZhdWx0c1wiLFxuICAgICAgICAgICAgXCJkZWZhdWx0c1wiOiB7XG4gICAgICAgICAgICAgIFZDaGlwOiB7XG4gICAgICAgICAgICAgICAgY2xvc2FibGU6IHByb3BzLmNsb3NhYmxlQ2hpcHMsXG4gICAgICAgICAgICAgICAgc2l6ZTogJ3NtYWxsJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiBpdGVtLnRpdGxlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMuY2hpcD8uKHtcbiAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgIHByb3BzOiBzbG90UHJvcHNcbiAgICAgICAgICAgIH0pXVxuICAgICAgICAgIH0pIDogc2xvdHMuc2VsZWN0aW9uPy4oe1xuICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgfSkgPz8gX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwidi1jb21ib2JveF9fc2VsZWN0aW9uLXRleHRcIlxuICAgICAgICAgIH0sIFtpdGVtLnRpdGxlLCBwcm9wcy5tdWx0aXBsZSAmJiBpbmRleCA8IG1vZGVsLnZhbHVlLmxlbmd0aCAtIDEgJiYgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwidi1jb21ib2JveF9fc2VsZWN0aW9uLWNvbW1hXCJcbiAgICAgICAgICB9LCBbX2NyZWF0ZVRleHRWTm9kZShcIixcIildKV0pXSk7XG4gICAgICAgIH0pXSksXG4gICAgICAgICdhcHBlbmQtaW5uZXInOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Nsb3RzWydhcHBlbmQtaW5uZXInXT8uKC4uLmFyZ3MpLCAoIXByb3BzLmhpZGVOb0RhdGEgfHwgcHJvcHMuaXRlbXMubGVuZ3RoKSAmJiBwcm9wcy5tZW51SWNvbiA/IF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtY29tYm9ib3hfX21lbnUtaWNvblwiLFxuICAgICAgICAgICAgXCJpY29uXCI6IHByb3BzLm1lbnVJY29uLFxuICAgICAgICAgICAgXCJvbk1vdXNlZG93blwiOiBvbk1vdXNlZG93bk1lbnVJY29uLFxuICAgICAgICAgICAgXCJvbkNsaWNrXCI6IG5vb3AsXG4gICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogdChsYWJlbC52YWx1ZSksXG4gICAgICAgICAgICBcInRpdGxlXCI6IHQobGFiZWwudmFsdWUpXG4gICAgICAgICAgfSwgbnVsbCkgOiB1bmRlZmluZWRdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvcndhcmRSZWZzKHtcbiAgICAgIGlzRm9jdXNlZCxcbiAgICAgIGlzUHJpc3RpbmUsXG4gICAgICBtZW51LFxuICAgICAgc2VhcmNoLFxuICAgICAgc2VsZWN0aW9uSW5kZXgsXG4gICAgICBmaWx0ZXJlZEl0ZW1zLFxuICAgICAgc2VsZWN0XG4gICAgfSwgdlRleHRGaWVsZFJlZik7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNvbWJvYm94Lm1qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkRpYWxvZy5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkRpYWxvZ1RyYW5zaXRpb24gfSBmcm9tIFwiLi4vdHJhbnNpdGlvbnMvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZPdmVybGF5IH0gZnJvbSBcIi4uL1ZPdmVybGF5L2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZPdmVybGF5UHJvcHMgfSBmcm9tIFwiLi4vVk92ZXJsYXkvVk92ZXJsYXkubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBmb3J3YXJkUmVmcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb3J3YXJkUmVmcy5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7XG5pbXBvcnQgeyB1c2VTY29wZUlkIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Njb3BlSWQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG1lcmdlUHJvcHMsIG5leHRUaWNrLCByZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGZvY3VzYWJsZUNoaWxkcmVuLCBnZW5lcmljQ29tcG9uZW50LCBJTl9CUk9XU0VSLCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWRGlhbG9nUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBmdWxsc2NyZWVuOiBCb29sZWFuLFxuICByZXRhaW5Gb2N1czoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBzY3JvbGxhYmxlOiBCb29sZWFuLFxuICAuLi5tYWtlVk92ZXJsYXlQcm9wcyh7XG4gICAgb3JpZ2luOiAnY2VudGVyIGNlbnRlcicsXG4gICAgc2Nyb2xsU3RyYXRlZ3k6ICdibG9jaycsXG4gICAgdHJhbnNpdGlvbjoge1xuICAgICAgY29tcG9uZW50OiBWRGlhbG9nVHJhbnNpdGlvblxuICAgIH0sXG4gICAgekluZGV4OiAyNDAwXG4gIH0pXG59LCAnVkRpYWxvZycpO1xuZXhwb3J0IGNvbnN0IFZEaWFsb2cgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkRpYWxvZycsXG4gIHByb3BzOiBtYWtlVkRpYWxvZ1Byb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjb3BlSWRcbiAgICB9ID0gdXNlU2NvcGVJZCgpO1xuICAgIGNvbnN0IG92ZXJsYXkgPSByZWYoKTtcbiAgICBmdW5jdGlvbiBvbkZvY3VzaW4oZSkge1xuICAgICAgY29uc3QgYmVmb3JlID0gZS5yZWxhdGVkVGFyZ2V0O1xuICAgICAgY29uc3QgYWZ0ZXIgPSBlLnRhcmdldDtcbiAgICAgIGlmIChiZWZvcmUgIT09IGFmdGVyICYmIG92ZXJsYXkudmFsdWU/LmNvbnRlbnRFbCAmJlxuICAgICAgLy8gV2UncmUgdGhlIHRvcG1vc3QgZGlhbG9nXG4gICAgICBvdmVybGF5LnZhbHVlPy5nbG9iYWxUb3AgJiZcbiAgICAgIC8vIEl0IGlzbid0IHRoZSBkb2N1bWVudCBvciB0aGUgZGlhbG9nIGJvZHlcbiAgICAgICFbZG9jdW1lbnQsIG92ZXJsYXkudmFsdWUuY29udGVudEVsXS5pbmNsdWRlcyhhZnRlcikgJiZcbiAgICAgIC8vIEl0IGlzbid0IGluc2lkZSB0aGUgZGlhbG9nIGJvZHlcbiAgICAgICFvdmVybGF5LnZhbHVlLmNvbnRlbnRFbC5jb250YWlucyhhZnRlcikpIHtcbiAgICAgICAgY29uc3QgZm9jdXNhYmxlID0gZm9jdXNhYmxlQ2hpbGRyZW4ob3ZlcmxheS52YWx1ZS5jb250ZW50RWwpO1xuICAgICAgICBpZiAoIWZvY3VzYWJsZS5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgY29uc3QgZmlyc3RFbGVtZW50ID0gZm9jdXNhYmxlWzBdO1xuICAgICAgICBjb25zdCBsYXN0RWxlbWVudCA9IGZvY3VzYWJsZVtmb2N1c2FibGUubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChiZWZvcmUgPT09IGZpcnN0RWxlbWVudCkge1xuICAgICAgICAgIGxhc3RFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3RFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKElOX0JST1dTRVIpIHtcbiAgICAgIHdhdGNoKCgpID0+IGlzQWN0aXZlLnZhbHVlICYmIHByb3BzLnJldGFpbkZvY3VzLCB2YWwgPT4ge1xuICAgICAgICB2YWwgPyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgb25Gb2N1c2luKSA6IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBvbkZvY3VzaW4pO1xuICAgICAgfSwge1xuICAgICAgICBpbW1lZGlhdGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICB3YXRjaChpc0FjdGl2ZSwgYXN5bmMgdmFsID0+IHtcbiAgICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICBpZiAodmFsKSB7XG4gICAgICAgIG92ZXJsYXkudmFsdWUuY29udGVudEVsPy5mb2N1cyh7XG4gICAgICAgICAgcHJldmVudFNjcm9sbDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG92ZXJsYXkudmFsdWUuYWN0aXZhdG9yRWw/LmZvY3VzKHtcbiAgICAgICAgICBwcmV2ZW50U2Nyb2xsOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGFjdGl2YXRvclByb3BzID0gY29tcHV0ZWQoKCkgPT4gbWVyZ2VQcm9wcyh7XG4gICAgICAnYXJpYS1oYXNwb3B1cCc6ICdkaWFsb2cnLFxuICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBTdHJpbmcoaXNBY3RpdmUudmFsdWUpXG4gICAgfSwgcHJvcHMuYWN0aXZhdG9yUHJvcHMpKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgW292ZXJsYXlQcm9wc10gPSBWT3ZlcmxheS5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZPdmVybGF5LCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwicmVmXCI6IG92ZXJsYXksXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LWRpYWxvZycsIHtcbiAgICAgICAgICAndi1kaWFsb2ctLWZ1bGxzY3JlZW4nOiBwcm9wcy5mdWxsc2NyZWVuLFxuICAgICAgICAgICd2LWRpYWxvZy0tc2Nyb2xsYWJsZSc6IHByb3BzLnNjcm9sbGFibGVcbiAgICAgICAgfSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9LCBvdmVybGF5UHJvcHMsIHtcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IGlzQWN0aXZlLnZhbHVlID0gJGV2ZW50LFxuICAgICAgICBcImFyaWEtbW9kYWxcIjogXCJ0cnVlXCIsXG4gICAgICAgIFwiYWN0aXZhdG9yUHJvcHNcIjogYWN0aXZhdG9yUHJvcHMudmFsdWUsXG4gICAgICAgIFwicm9sZVwiOiBcImRpYWxvZ1wiXG4gICAgICB9LCBzY29wZUlkKSwge1xuICAgICAgICBhY3RpdmF0b3I6IHNsb3RzLmFjdGl2YXRvcixcbiAgICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgICAgXCJyb290XCI6IFwiVkRpYWxvZ1wiXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmRlZmF1bHQ/LiguLi5hcmdzKV1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvcndhcmRSZWZzKHt9LCBvdmVybGF5KTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WRGlhbG9nLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkV4cGFuc2lvblBhbmVsLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjtcbmltcG9ydCB7IG1ha2VHcm91cFByb3BzLCB1c2VHcm91cCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ncm91cC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IFZFeHBhbnNpb25QYW5lbFN5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6di1leHBhbnNpb24tcGFuZWwnKTtcbmNvbnN0IGFsbG93ZWRWYXJpYW50cyA9IFsnZGVmYXVsdCcsICdhY2NvcmRpb24nLCAnaW5zZXQnLCAncG9wb3V0J107XG5leHBvcnQgY29uc3QgbWFrZVZFeHBhbnNpb25QYW5lbHNQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbG9yOiBTdHJpbmcsXG4gIHZhcmlhbnQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2RlZmF1bHQnLFxuICAgIHZhbGlkYXRvcjogdiA9PiBhbGxvd2VkVmFyaWFudHMuaW5jbHVkZXModilcbiAgfSxcbiAgcmVhZG9ubHk6IEJvb2xlYW4sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlR3JvdXBQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZFeHBhbnNpb25QYW5lbHMnKTtcbmV4cG9ydCBjb25zdCBWRXhwYW5zaW9uUGFuZWxzID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZFeHBhbnNpb25QYW5lbHMnLFxuICBwcm9wczogbWFrZVZFeHBhbnNpb25QYW5lbHNQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbCA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgdXNlR3JvdXAocHJvcHMsIFZFeHBhbnNpb25QYW5lbFN5bWJvbCk7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3QgdmFyaWFudENsYXNzID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMudmFyaWFudCAmJiBgdi1leHBhbnNpb24tcGFuZWxzLS12YXJpYW50LSR7cHJvcHMudmFyaWFudH1gKTtcbiAgICBwcm92aWRlRGVmYXVsdHMoe1xuICAgICAgVkV4cGFuc2lvblBhbmVsOiB7XG4gICAgICAgIGNvbG9yOiB0b1JlZihwcm9wcywgJ2NvbG9yJylcbiAgICAgIH0sXG4gICAgICBWRXhwYW5zaW9uUGFuZWxUaXRsZToge1xuICAgICAgICByZWFkb25seTogdG9SZWYocHJvcHMsICdyZWFkb25seScpXG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWV4cGFuc2lvbi1wYW5lbHMnLCB0aGVtZUNsYXNzZXMudmFsdWUsIHZhcmlhbnRDbGFzcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIHNsb3RzKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZFeHBhbnNpb25QYW5lbHMubWpzLm1hcCIsImltcG9ydCB7IHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgdlNob3cgYXMgX3ZTaG93LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWRXhwYW5zaW9uUGFuZWxTeW1ib2wgfSBmcm9tIFwiLi9WRXhwYW5zaW9uUGFuZWxzLm1qc1wiO1xuaW1wb3J0IHsgVkV4cGFuZFRyYW5zaXRpb24gfSBmcm9tIFwiLi4vdHJhbnNpdGlvbnMvaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUxhenlQcm9wcywgdXNlTGF6eSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sYXp5Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGluamVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWRXhwYW5zaW9uUGFuZWxUZXh0UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUxhenlQcm9wcygpXG59LCAnVkV4cGFuc2lvblBhbmVsVGV4dCcpO1xuZXhwb3J0IGNvbnN0IFZFeHBhbnNpb25QYW5lbFRleHQgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkV4cGFuc2lvblBhbmVsVGV4dCcsXG4gIHByb3BzOiBtYWtlVkV4cGFuc2lvblBhbmVsVGV4dFByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgZXhwYW5zaW9uUGFuZWwgPSBpbmplY3QoVkV4cGFuc2lvblBhbmVsU3ltYm9sKTtcbiAgICBpZiAoIWV4cGFuc2lvblBhbmVsKSB0aHJvdyBuZXcgRXJyb3IoJ1tWdWV0aWZ5XSB2LWV4cGFuc2lvbi1wYW5lbC10ZXh0IG5lZWRzIHRvIGJlIHBsYWNlZCBpbnNpZGUgdi1leHBhbnNpb24tcGFuZWwnKTtcbiAgICBjb25zdCB7XG4gICAgICBoYXNDb250ZW50LFxuICAgICAgb25BZnRlckxlYXZlXG4gICAgfSA9IHVzZUxhenkocHJvcHMsIGV4cGFuc2lvblBhbmVsLmlzU2VsZWN0ZWQpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoVkV4cGFuZFRyYW5zaXRpb24sIHtcbiAgICAgIFwib25BZnRlckxlYXZlXCI6IG9uQWZ0ZXJMZWF2ZVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtZXhwYW5zaW9uLXBhbmVsLXRleHQnLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIFtzbG90cy5kZWZhdWx0ICYmIGhhc0NvbnRlbnQudmFsdWUgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtZXhwYW5zaW9uLXBhbmVsLXRleHRfX3dyYXBwZXJcIlxuICAgICAgfSwgW3Nsb3RzLmRlZmF1bHQ/LigpXSldKSwgW1tfdlNob3csIGV4cGFuc2lvblBhbmVsLmlzU2VsZWN0ZWQudmFsdWVdXSldXG4gICAgfSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WRXhwYW5zaW9uUGFuZWxUZXh0Lm1qcy5tYXAiLCJpbXBvcnQgeyB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZFeHBhbnNpb25QYW5lbFN5bWJvbCB9IGZyb20gXCIuL1ZFeHBhbnNpb25QYW5lbHMubWpzXCI7XG5pbXBvcnQgeyBWSWNvbiB9IGZyb20gXCIuLi9WSWNvbi9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUJhY2tncm91bmRDb2xvciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb2xvci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7IC8vIERpcmVjdGl2ZXNcbmltcG9ydCB7IFJpcHBsZSB9IGZyb20gXCIuLi8uLi9kaXJlY3RpdmVzL3JpcHBsZS9pbmRleC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgaW5qZWN0IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZFeHBhbnNpb25QYW5lbFRpdGxlUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjb2xvcjogU3RyaW5nLFxuICBleHBhbmRJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckZXhwYW5kJ1xuICB9LFxuICBjb2xsYXBzZUljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRjb2xsYXBzZSdcbiAgfSxcbiAgaGlkZUFjdGlvbnM6IEJvb2xlYW4sXG4gIHJpcHBsZToge1xuICAgIHR5cGU6IFtCb29sZWFuLCBPYmplY3RdLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0sXG4gIHJlYWRvbmx5OiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKVxufSwgJ1ZFeHBhbnNpb25QYW5lbFRpdGxlJyk7XG5leHBvcnQgY29uc3QgVkV4cGFuc2lvblBhbmVsVGl0bGUgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkV4cGFuc2lvblBhbmVsVGl0bGUnLFxuICBkaXJlY3RpdmVzOiB7XG4gICAgUmlwcGxlXG4gIH0sXG4gIHByb3BzOiBtYWtlVkV4cGFuc2lvblBhbmVsVGl0bGVQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGV4cGFuc2lvblBhbmVsID0gaW5qZWN0KFZFeHBhbnNpb25QYW5lbFN5bWJvbCk7XG4gICAgaWYgKCFleHBhbnNpb25QYW5lbCkgdGhyb3cgbmV3IEVycm9yKCdbVnVldGlmeV0gdi1leHBhbnNpb24tcGFuZWwtdGl0bGUgbmVlZHMgdG8gYmUgcGxhY2VkIGluc2lkZSB2LWV4cGFuc2lvbi1wYW5lbCcpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHByb3BzLCAnY29sb3InKTtcbiAgICBjb25zdCBzbG90UHJvcHMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgY29sbGFwc2VJY29uOiBwcm9wcy5jb2xsYXBzZUljb24sXG4gICAgICBkaXNhYmxlZDogZXhwYW5zaW9uUGFuZWwuZGlzYWJsZWQudmFsdWUsXG4gICAgICBleHBhbmRlZDogZXhwYW5zaW9uUGFuZWwuaXNTZWxlY3RlZC52YWx1ZSxcbiAgICAgIGV4cGFuZEljb246IHByb3BzLmV4cGFuZEljb24sXG4gICAgICByZWFkb25seTogcHJvcHMucmVhZG9ubHlcbiAgICB9KSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoXCJidXR0b25cIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtZXhwYW5zaW9uLXBhbmVsLXRpdGxlJywge1xuICAgICAgICAndi1leHBhbnNpb24tcGFuZWwtdGl0bGUtLWFjdGl2ZSc6IGV4cGFuc2lvblBhbmVsLmlzU2VsZWN0ZWQudmFsdWVcbiAgICAgIH0sIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW2JhY2tncm91bmRDb2xvclN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdLFxuICAgICAgXCJ0eXBlXCI6IFwiYnV0dG9uXCIsXG4gICAgICBcInRhYmluZGV4XCI6IGV4cGFuc2lvblBhbmVsLmRpc2FibGVkLnZhbHVlID8gLTEgOiB1bmRlZmluZWQsXG4gICAgICBcImRpc2FibGVkXCI6IGV4cGFuc2lvblBhbmVsLmRpc2FibGVkLnZhbHVlLFxuICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IGV4cGFuc2lvblBhbmVsLmlzU2VsZWN0ZWQudmFsdWUsXG4gICAgICBcIm9uQ2xpY2tcIjogIXByb3BzLnJlYWRvbmx5ID8gZXhwYW5zaW9uUGFuZWwudG9nZ2xlIDogdW5kZWZpbmVkXG4gICAgfSwgW19jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgXCJjbGFzc1wiOiBcInYtZXhwYW5zaW9uLXBhbmVsLXRpdGxlX19vdmVybGF5XCJcbiAgICB9LCBudWxsKSwgc2xvdHMuZGVmYXVsdD8uKHNsb3RQcm9wcy52YWx1ZSksICFwcm9wcy5oaWRlQWN0aW9ucyAmJiBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJ2LWV4cGFuc2lvbi1wYW5lbC10aXRsZV9faWNvblwiXG4gICAgfSwgW3Nsb3RzLmFjdGlvbnMgPyBzbG90cy5hY3Rpb25zKHNsb3RQcm9wcy52YWx1ZSkgOiBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgIFwiaWNvblwiOiBleHBhbnNpb25QYW5lbC5pc1NlbGVjdGVkLnZhbHVlID8gcHJvcHMuY29sbGFwc2VJY29uIDogcHJvcHMuZXhwYW5kSWNvblxuICAgIH0sIG51bGwpXSldKSwgW1tfcmVzb2x2ZURpcmVjdGl2ZShcInJpcHBsZVwiKSwgcHJvcHMucmlwcGxlXV0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkV4cGFuc2lvblBhbmVsVGl0bGUubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZFeHBhbnNpb25QYW5lbFN5bWJvbCB9IGZyb20gXCIuL1ZFeHBhbnNpb25QYW5lbHMubWpzXCI7XG5pbXBvcnQgeyBWRXhwYW5zaW9uUGFuZWxUZXh0IH0gZnJvbSBcIi4vVkV4cGFuc2lvblBhbmVsVGV4dC5tanNcIjtcbmltcG9ydCB7IG1ha2VWRXhwYW5zaW9uUGFuZWxUaXRsZVByb3BzLCBWRXhwYW5zaW9uUGFuZWxUaXRsZSB9IGZyb20gXCIuL1ZFeHBhbnNpb25QYW5lbFRpdGxlLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQmFja2dyb3VuZENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VHcm91cEl0ZW1Qcm9wcywgdXNlR3JvdXBJdGVtIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2dyb3VwLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUxhenlQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sYXp5Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdW5kZWRQcm9wcywgdXNlUm91bmRlZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgcHJvdmlkZSwgdG9SZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkV4cGFuc2lvblBhbmVsUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICB0aXRsZTogU3RyaW5nLFxuICB0ZXh0OiBTdHJpbmcsXG4gIGJnQ29sb3I6IFN0cmluZyxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlR3JvdXBJdGVtUHJvcHMoKSxcbiAgLi4ubWFrZUxhenlQcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpLFxuICAuLi5tYWtlVkV4cGFuc2lvblBhbmVsVGl0bGVQcm9wcygpXG59LCAnVkV4cGFuc2lvblBhbmVsJyk7XG5leHBvcnQgY29uc3QgVkV4cGFuc2lvblBhbmVsID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZFeHBhbnNpb25QYW5lbCcsXG4gIHByb3BzOiBtYWtlVkV4cGFuc2lvblBhbmVsUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAnZ3JvdXA6c2VsZWN0ZWQnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGdyb3VwSXRlbSA9IHVzZUdyb3VwSXRlbShwcm9wcywgVkV4cGFuc2lvblBhbmVsU3ltYm9sKTtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcihwcm9wcywgJ2JnQ29sb3InKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3QgaXNEaXNhYmxlZCA9IGNvbXB1dGVkKCgpID0+IGdyb3VwSXRlbT8uZGlzYWJsZWQudmFsdWUgfHwgcHJvcHMuZGlzYWJsZWQpO1xuICAgIGNvbnN0IHNlbGVjdGVkSW5kaWNlcyA9IGNvbXB1dGVkKCgpID0+IGdyb3VwSXRlbS5ncm91cC5pdGVtcy52YWx1ZS5yZWR1Y2UoKGFyciwgaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChncm91cEl0ZW0uZ3JvdXAuc2VsZWN0ZWQudmFsdWUuaW5jbHVkZXMoaXRlbS5pZCkpIGFyci5wdXNoKGluZGV4KTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfSwgW10pKTtcbiAgICBjb25zdCBpc0JlZm9yZVNlbGVjdGVkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSBncm91cEl0ZW0uZ3JvdXAuaXRlbXMudmFsdWUuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gZ3JvdXBJdGVtLmlkKTtcbiAgICAgIHJldHVybiAhZ3JvdXBJdGVtLmlzU2VsZWN0ZWQudmFsdWUgJiYgc2VsZWN0ZWRJbmRpY2VzLnZhbHVlLnNvbWUoc2VsZWN0ZWRJbmRleCA9PiBzZWxlY3RlZEluZGV4IC0gaW5kZXggPT09IDEpO1xuICAgIH0pO1xuICAgIGNvbnN0IGlzQWZ0ZXJTZWxlY3RlZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gZ3JvdXBJdGVtLmdyb3VwLml0ZW1zLnZhbHVlLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IGdyb3VwSXRlbS5pZCk7XG4gICAgICByZXR1cm4gIWdyb3VwSXRlbS5pc1NlbGVjdGVkLnZhbHVlICYmIHNlbGVjdGVkSW5kaWNlcy52YWx1ZS5zb21lKHNlbGVjdGVkSW5kZXggPT4gc2VsZWN0ZWRJbmRleCAtIGluZGV4ID09PSAtMSk7XG4gICAgfSk7XG4gICAgcHJvdmlkZShWRXhwYW5zaW9uUGFuZWxTeW1ib2wsIGdyb3VwSXRlbSk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZFeHBhbnNpb25QYW5lbFRleHQ6IHtcbiAgICAgICAgZWFnZXI6IHRvUmVmKHByb3BzLCAnZWFnZXInKVxuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBoYXNUZXh0ID0gISEoc2xvdHMudGV4dCB8fCBwcm9wcy50ZXh0KTtcbiAgICAgIGNvbnN0IGhhc1RpdGxlID0gISEoc2xvdHMudGl0bGUgfHwgcHJvcHMudGl0bGUpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3YtZXhwYW5zaW9uLXBhbmVsJywge1xuICAgICAgICAgICd2LWV4cGFuc2lvbi1wYW5lbC0tYWN0aXZlJzogZ3JvdXBJdGVtLmlzU2VsZWN0ZWQudmFsdWUsXG4gICAgICAgICAgJ3YtZXhwYW5zaW9uLXBhbmVsLS1iZWZvcmUtYWN0aXZlJzogaXNCZWZvcmVTZWxlY3RlZC52YWx1ZSxcbiAgICAgICAgICAndi1leHBhbnNpb24tcGFuZWwtLWFmdGVyLWFjdGl2ZSc6IGlzQWZ0ZXJTZWxlY3RlZC52YWx1ZSxcbiAgICAgICAgICAndi1leHBhbnNpb24tcGFuZWwtLWRpc2FibGVkJzogaXNEaXNhYmxlZC52YWx1ZVxuICAgICAgICB9LCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgYmFja2dyb3VuZENvbG9yQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFtiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFsndi1leHBhbnNpb24tcGFuZWxfX3NoYWRvdycsIC4uLmVsZXZhdGlvbkNsYXNzZXMudmFsdWVdXG4gICAgICAgIH0sIG51bGwpLCBoYXNUaXRsZSAmJiBfY3JlYXRlVk5vZGUoVkV4cGFuc2lvblBhbmVsVGl0bGUsIHtcbiAgICAgICAgICBcImtleVwiOiBcInRpdGxlXCIsXG4gICAgICAgICAgXCJjb2xsYXBzZUljb25cIjogcHJvcHMuY29sbGFwc2VJY29uLFxuICAgICAgICAgIFwiY29sb3JcIjogcHJvcHMuY29sb3IsXG4gICAgICAgICAgXCJleHBhbmRJY29uXCI6IHByb3BzLmV4cGFuZEljb24sXG4gICAgICAgICAgXCJoaWRlQWN0aW9uc1wiOiBwcm9wcy5oaWRlQWN0aW9ucyxcbiAgICAgICAgICBcInJpcHBsZVwiOiBwcm9wcy5yaXBwbGVcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy50aXRsZSA/IHNsb3RzLnRpdGxlKCkgOiBwcm9wcy50aXRsZV1cbiAgICAgICAgfSksIGhhc1RleHQgJiYgX2NyZWF0ZVZOb2RlKFZFeHBhbnNpb25QYW5lbFRleHQsIHtcbiAgICAgICAgICBcImtleVwiOiBcInRleHRcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLnRleHQgPyBzbG90cy50ZXh0KCkgOiBwcm9wcy50ZXh0XVxuICAgICAgICB9KSwgc2xvdHMuZGVmYXVsdD8uKCldXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkV4cGFuc2lvblBhbmVsLm1qcy5tYXAiLCJpbXBvcnQgeyByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIEZyYWdtZW50IGFzIF9GcmFnbWVudCB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WRmlsZUlucHV0LmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQ2hpcCB9IGZyb20gXCIuLi9WQ2hpcC9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZDb3VudGVyIH0gZnJvbSBcIi4uL1ZDb3VudGVyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkZpZWxkIH0gZnJvbSBcIi4uL1ZGaWVsZC9pbmRleC5tanNcIjtcbmltcG9ydCB7IGZpbHRlckZpZWxkUHJvcHMsIG1ha2VWRmllbGRQcm9wcyB9IGZyb20gXCIuLi9WRmllbGQvVkZpZWxkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZJbnB1dFByb3BzLCBWSW5wdXQgfSBmcm9tIFwiLi4vVklucHV0L1ZJbnB1dC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUZvY3VzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvY3VzLm1qc1wiO1xuaW1wb3J0IHsgZm9yd2FyZFJlZnMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9yd2FyZFJlZnMubWpzXCI7XG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgbmV4dFRpY2ssIHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY2FsbEV2ZW50LCBmaWx0ZXJJbnB1dEF0dHJzLCBnZW5lcmljQ29tcG9uZW50LCBodW1hblJlYWRhYmxlRmlsZVNpemUsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyLCB3cmFwSW5BcnJheSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWRmlsZUlucHV0UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBjaGlwczogQm9vbGVhbixcbiAgY291bnRlcjogQm9vbGVhbixcbiAgY291bnRlclNpemVTdHJpbmc6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJyR2dWV0aWZ5LmZpbGVJbnB1dC5jb3VudGVyU2l6ZSdcbiAgfSxcbiAgY291bnRlclN0cmluZzoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkuZmlsZUlucHV0LmNvdW50ZXInXG4gIH0sXG4gIG11bHRpcGxlOiBCb29sZWFuLFxuICBzaG93U2l6ZToge1xuICAgIHR5cGU6IFtCb29sZWFuLCBOdW1iZXJdLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHZhbGlkYXRvcjogdiA9PiB7XG4gICAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdib29sZWFuJyB8fCBbMTAwMCwgMTAyNF0uaW5jbHVkZXModik7XG4gICAgfVxuICB9LFxuICAuLi5tYWtlVklucHV0UHJvcHMoe1xuICAgIHByZXBlbmRJY29uOiAnJGZpbGUnXG4gIH0pLFxuICBtb2RlbFZhbHVlOiB7XG4gICAgdHlwZTogQXJyYXksXG4gICAgZGVmYXVsdDogKCkgPT4gW10sXG4gICAgdmFsaWRhdG9yOiB2YWwgPT4ge1xuICAgICAgcmV0dXJuIHdyYXBJbkFycmF5KHZhbCkuZXZlcnkodiA9PiB2ICE9IG51bGwgJiYgdHlwZW9mIHYgPT09ICdvYmplY3QnKTtcbiAgICB9XG4gIH0sXG4gIC4uLm1ha2VWRmllbGRQcm9wcyh7XG4gICAgY2xlYXJhYmxlOiB0cnVlXG4gIH0pXG59LCAnVkZpbGVJbnB1dCcpO1xuZXhwb3J0IGNvbnN0IFZGaWxlSW5wdXQgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkZpbGVJbnB1dCcsXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiBtYWtlVkZpbGVJbnB1dFByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ2NsaWNrOmNvbnRyb2wnOiBlID0+IHRydWUsXG4gICAgJ21vdXNlZG93bjpjb250cm9sJzogZSA9PiB0cnVlLFxuICAgICd1cGRhdGU6Zm9jdXNlZCc6IGZvY3VzZWQgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiBmaWxlcyA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIGF0dHJzLFxuICAgICAgZW1pdCxcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdFxuICAgIH0gPSB1c2VMb2NhbGUoKTtcbiAgICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCB7XG4gICAgICBpc0ZvY3VzZWQsXG4gICAgICBmb2N1cyxcbiAgICAgIGJsdXJcbiAgICB9ID0gdXNlRm9jdXMocHJvcHMpO1xuICAgIGNvbnN0IGJhc2UgPSBjb21wdXRlZCgoKSA9PiB0eXBlb2YgcHJvcHMuc2hvd1NpemUgIT09ICdib29sZWFuJyA/IHByb3BzLnNob3dTaXplIDogdW5kZWZpbmVkKTtcbiAgICBjb25zdCB0b3RhbEJ5dGVzID0gY29tcHV0ZWQoKCkgPT4gKG1vZGVsLnZhbHVlID8/IFtdKS5yZWR1Y2UoKGJ5dGVzLCBfcmVmMikgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgc2l6ZSA9IDBcbiAgICAgIH0gPSBfcmVmMjtcbiAgICAgIHJldHVybiBieXRlcyArIHNpemU7XG4gICAgfSwgMCkpO1xuICAgIGNvbnN0IHRvdGFsQnl0ZXNSZWFkYWJsZSA9IGNvbXB1dGVkKCgpID0+IGh1bWFuUmVhZGFibGVGaWxlU2l6ZSh0b3RhbEJ5dGVzLnZhbHVlLCBiYXNlLnZhbHVlKSk7XG4gICAgY29uc3QgZmlsZU5hbWVzID0gY29tcHV0ZWQoKCkgPT4gKG1vZGVsLnZhbHVlID8/IFtdKS5tYXAoZmlsZSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG5hbWUgPSAnJyxcbiAgICAgICAgc2l6ZSA9IDBcbiAgICAgIH0gPSBmaWxlO1xuICAgICAgcmV0dXJuICFwcm9wcy5zaG93U2l6ZSA/IG5hbWUgOiBgJHtuYW1lfSAoJHtodW1hblJlYWRhYmxlRmlsZVNpemUoc2l6ZSwgYmFzZS52YWx1ZSl9KWA7XG4gICAgfSkpO1xuICAgIGNvbnN0IGNvdW50ZXJWYWx1ZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGZpbGVDb3VudCA9IG1vZGVsLnZhbHVlPy5sZW5ndGggPz8gMDtcbiAgICAgIGlmIChwcm9wcy5zaG93U2l6ZSkgcmV0dXJuIHQocHJvcHMuY291bnRlclNpemVTdHJpbmcsIGZpbGVDb3VudCwgdG90YWxCeXRlc1JlYWRhYmxlLnZhbHVlKTtlbHNlIHJldHVybiB0KHByb3BzLmNvdW50ZXJTdHJpbmcsIGZpbGVDb3VudCk7XG4gICAgfSk7XG4gICAgY29uc3QgdklucHV0UmVmID0gcmVmKCk7XG4gICAgY29uc3QgdkZpZWxkUmVmID0gcmVmKCk7XG4gICAgY29uc3QgaW5wdXRSZWYgPSByZWYoKTtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGNvbXB1dGVkKCgpID0+IGlzRm9jdXNlZC52YWx1ZSB8fCBwcm9wcy5hY3RpdmUpO1xuICAgIGNvbnN0IGlzUGxhaW5PclVuZGVybGluZWQgPSBjb21wdXRlZCgoKSA9PiBbJ3BsYWluJywgJ3VuZGVybGluZWQnXS5pbmNsdWRlcyhwcm9wcy52YXJpYW50KSk7XG4gICAgZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICAgIGlmIChpbnB1dFJlZi52YWx1ZSAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICBpbnB1dFJlZi52YWx1ZT8uZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNGb2N1c2VkLnZhbHVlKSBmb2N1cygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkNsaWNrUHJlcGVuZChlKSB7XG4gICAgICBvbkNvbnRyb2xDbGljayhlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Db250cm9sTW91c2Vkb3duKGUpIHtcbiAgICAgIGVtaXQoJ21vdXNlZG93bjpjb250cm9sJywgZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQ29udHJvbENsaWNrKGUpIHtcbiAgICAgIGlucHV0UmVmLnZhbHVlPy5jbGljaygpO1xuICAgICAgZW1pdCgnY2xpY2s6Y29udHJvbCcsIGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkNsZWFyKGUpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBvbkZvY3VzKCk7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIG1vZGVsLnZhbHVlID0gW107XG4gICAgICAgIGNhbGxFdmVudChwcm9wc1snb25DbGljazpjbGVhciddLCBlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB3YXRjaChtb2RlbCwgbmV3VmFsdWUgPT4ge1xuICAgICAgY29uc3QgaGFzTW9kZWxSZXNldCA9ICFBcnJheS5pc0FycmF5KG5ld1ZhbHVlKSB8fCAhbmV3VmFsdWUubGVuZ3RoO1xuICAgICAgaWYgKGhhc01vZGVsUmVzZXQgJiYgaW5wdXRSZWYudmFsdWUpIHtcbiAgICAgICAgaW5wdXRSZWYudmFsdWUudmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgaGFzQ291bnRlciA9ICEhKHNsb3RzLmNvdW50ZXIgfHwgcHJvcHMuY291bnRlcik7XG4gICAgICBjb25zdCBoYXNEZXRhaWxzID0gISEoaGFzQ291bnRlciB8fCBzbG90cy5kZXRhaWxzKTtcbiAgICAgIGNvbnN0IFtyb290QXR0cnMsIGlucHV0QXR0cnNdID0gZmlsdGVySW5wdXRBdHRycyhhdHRycyk7XG4gICAgICBjb25zdCBbe1xuICAgICAgICBtb2RlbFZhbHVlOiBfLFxuICAgICAgICAuLi5pbnB1dFByb3BzXG4gICAgICB9XSA9IFZJbnB1dC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICBjb25zdCBbZmllbGRQcm9wc10gPSBmaWx0ZXJGaWVsZFByb3BzKHByb3BzKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVklucHV0LCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwicmVmXCI6IHZJbnB1dFJlZixcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IG1vZGVsLnZhbHVlID0gJGV2ZW50LFxuICAgICAgICBcImNsYXNzXCI6IFsndi1maWxlLWlucHV0Jywge1xuICAgICAgICAgICd2LXRleHQtZmllbGQtLXBsYWluLXVuZGVybGluZWQnOiBpc1BsYWluT3JVbmRlcmxpbmVkLnZhbHVlXG4gICAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZSxcbiAgICAgICAgXCJvbkNsaWNrOnByZXBlbmRcIjogb25DbGlja1ByZXBlbmRcbiAgICAgIH0sIHJvb3RBdHRycywgaW5wdXRQcm9wcywge1xuICAgICAgICBcImNlbnRlckFmZml4XCI6ICFpc1BsYWluT3JVbmRlcmxpbmVkLnZhbHVlLFxuICAgICAgICBcImZvY3VzZWRcIjogaXNGb2N1c2VkLnZhbHVlXG4gICAgICB9KSwge1xuICAgICAgICAuLi5zbG90cyxcbiAgICAgICAgZGVmYXVsdDogX3JlZjMgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIGlzRGlzYWJsZWQsXG4gICAgICAgICAgICBpc0RpcnR5LFxuICAgICAgICAgICAgaXNSZWFkb25seSxcbiAgICAgICAgICAgIGlzVmFsaWRcbiAgICAgICAgICB9ID0gX3JlZjM7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWRmllbGQsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICAgIFwicmVmXCI6IHZGaWVsZFJlZixcbiAgICAgICAgICAgIFwicHJlcGVuZC1pY29uXCI6IHByb3BzLnByZXBlbmRJY29uLFxuICAgICAgICAgICAgXCJvbk1vdXNlZG93blwiOiBvbkNvbnRyb2xNb3VzZWRvd24sXG4gICAgICAgICAgICBcIm9uQ2xpY2tcIjogb25Db250cm9sQ2xpY2ssXG4gICAgICAgICAgICBcIm9uQ2xpY2s6Y2xlYXJcIjogb25DbGVhcixcbiAgICAgICAgICAgIFwib25DbGljazpwcmVwZW5kSW5uZXJcIjogcHJvcHNbJ29uQ2xpY2s6cHJlcGVuZElubmVyJ10sXG4gICAgICAgICAgICBcIm9uQ2xpY2s6YXBwZW5kSW5uZXJcIjogcHJvcHNbJ29uQ2xpY2s6YXBwZW5kSW5uZXInXVxuICAgICAgICAgIH0sIGZpZWxkUHJvcHMsIHtcbiAgICAgICAgICAgIFwiaWRcIjogaWQudmFsdWUsXG4gICAgICAgICAgICBcImFjdGl2ZVwiOiBpc0FjdGl2ZS52YWx1ZSB8fCBpc0RpcnR5LnZhbHVlLFxuICAgICAgICAgICAgXCJkaXJ0eVwiOiBpc0RpcnR5LnZhbHVlLFxuICAgICAgICAgICAgXCJkaXNhYmxlZFwiOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZC52YWx1ZSxcbiAgICAgICAgICAgIFwiZXJyb3JcIjogaXNWYWxpZC52YWx1ZSA9PT0gZmFsc2VcbiAgICAgICAgICB9KSwge1xuICAgICAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgICAgICBkZWZhdWx0OiBfcmVmNCA9PiB7XG4gICAgICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBmaWVsZENsYXNzLFxuICAgICAgICAgICAgICAgICAgLi4uc2xvdFByb3BzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9ID0gX3JlZjQ7XG4gICAgICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKFwiaW5wdXRcIiwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgICAgICAgIFwicmVmXCI6IGlucHV0UmVmLFxuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImZpbGVcIixcbiAgICAgICAgICAgICAgICBcInJlYWRvbmx5XCI6IGlzUmVhZG9ubHkudmFsdWUsXG4gICAgICAgICAgICAgICAgXCJkaXNhYmxlZFwiOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgICAgICAgICAgIFwibXVsdGlwbGVcIjogcHJvcHMubXVsdGlwbGUsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IHByb3BzLm5hbWUsXG4gICAgICAgICAgICAgICAgXCJvbkNsaWNrXCI6IGUgPT4ge1xuICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgIGlmIChpc1JlYWRvbmx5LnZhbHVlKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICBvbkZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIm9uQ2hhbmdlXCI6IGUgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKCFlLnRhcmdldCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICBtb2RlbC52YWx1ZSA9IFsuLi4odGFyZ2V0LmZpbGVzID8/IFtdKV07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIm9uRm9jdXNcIjogb25Gb2N1cyxcbiAgICAgICAgICAgICAgICBcIm9uQmx1clwiOiBibHVyXG4gICAgICAgICAgICAgIH0sIHNsb3RQcm9wcywgaW5wdXRBdHRycyksIG51bGwpLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogZmllbGRDbGFzc1xuICAgICAgICAgICAgICB9LCBbISFtb2RlbC52YWx1ZT8ubGVuZ3RoICYmIChzbG90cy5zZWxlY3Rpb24gPyBzbG90cy5zZWxlY3Rpb24oe1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lczogZmlsZU5hbWVzLnZhbHVlLFxuICAgICAgICAgICAgICAgIHRvdGFsQnl0ZXM6IHRvdGFsQnl0ZXMudmFsdWUsXG4gICAgICAgICAgICAgICAgdG90YWxCeXRlc1JlYWRhYmxlOiB0b3RhbEJ5dGVzUmVhZGFibGUudmFsdWVcbiAgICAgICAgICAgICAgfSkgOiBwcm9wcy5jaGlwcyA/IGZpbGVOYW1lcy52YWx1ZS5tYXAodGV4dCA9PiBfY3JlYXRlVk5vZGUoVkNoaXAsIHtcbiAgICAgICAgICAgICAgICBcImtleVwiOiB0ZXh0LFxuICAgICAgICAgICAgICAgIFwic2l6ZVwiOiBcInNtYWxsXCIsXG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBwcm9wcy5jb2xvclxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW3RleHRdXG4gICAgICAgICAgICAgIH0pKSA6IGZpbGVOYW1lcy52YWx1ZS5qb2luKCcsICcpKV0pXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRldGFpbHM6IGhhc0RldGFpbHMgPyBzbG90UHJvcHMgPT4gX2NyZWF0ZVZOb2RlKF9GcmFnbWVudCwgbnVsbCwgW3Nsb3RzLmRldGFpbHM/LihzbG90UHJvcHMpLCBoYXNDb3VudGVyICYmIF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIG51bGwsIG51bGwpLCBfY3JlYXRlVk5vZGUoVkNvdW50ZXIsIHtcbiAgICAgICAgICBcImFjdGl2ZVwiOiAhIW1vZGVsLnZhbHVlPy5sZW5ndGgsXG4gICAgICAgICAgXCJ2YWx1ZVwiOiBjb3VudGVyVmFsdWUudmFsdWVcbiAgICAgICAgfSwgc2xvdHMuY291bnRlcildKV0pIDogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm9yd2FyZFJlZnMoe30sIHZJbnB1dFJlZiwgdkZpZWxkUmVmLCBpbnB1dFJlZik7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkZpbGVJbnB1dC5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZGb290ZXIuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQm9yZGVyUHJvcHMsIHVzZUJvcmRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ib3JkZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VCYWNrZ3JvdW5kQ29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUxheW91dEl0ZW1Qcm9wcywgdXNlTGF5b3V0SXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sYXlvdXQubWpzXCI7XG5pbXBvcnQgeyB1c2VSZXNpemVPYnNlcnZlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yZXNpemVPYnNlcnZlci5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBzaGFsbG93UmVmLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWRm9vdGVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhcHA6IEJvb2xlYW4sXG4gIGNvbG9yOiBTdHJpbmcsXG4gIGhlaWdodDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogJ2F1dG8nXG4gIH0sXG4gIC4uLm1ha2VCb3JkZXJQcm9wcygpLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKCksXG4gIC4uLm1ha2VMYXlvdXRJdGVtUHJvcHMoKSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoe1xuICAgIHRhZzogJ2Zvb3RlcidcbiAgfSksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWRm9vdGVyJyk7XG5leHBvcnQgY29uc3QgVkZvb3RlciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWRm9vdGVyJyxcbiAgcHJvcHM6IG1ha2VWRm9vdGVyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzLFxuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcih0b1JlZihwcm9wcywgJ2NvbG9yJykpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJvcmRlckNsYXNzZXNcbiAgICB9ID0gdXNlQm9yZGVyKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgcm91bmRlZENsYXNzZXNcbiAgICB9ID0gdXNlUm91bmRlZChwcm9wcyk7XG4gICAgY29uc3QgYXV0b0hlaWdodCA9IHNoYWxsb3dSZWYoMzIpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJlc2l6ZVJlZlxuICAgIH0gPSB1c2VSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgIGlmICghZW50cmllcy5sZW5ndGgpIHJldHVybjtcbiAgICAgIGF1dG9IZWlnaHQudmFsdWUgPSBlbnRyaWVzWzBdLnRhcmdldC5jbGllbnRIZWlnaHQ7XG4gICAgfSk7XG4gICAgY29uc3QgaGVpZ2h0ID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuaGVpZ2h0ID09PSAnYXV0bycgPyBhdXRvSGVpZ2h0LnZhbHVlIDogcGFyc2VJbnQocHJvcHMuaGVpZ2h0LCAxMCkpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxheW91dEl0ZW1TdHlsZXNcbiAgICB9ID0gdXNlTGF5b3V0SXRlbSh7XG4gICAgICBpZDogcHJvcHMubmFtZSxcbiAgICAgIG9yZGVyOiBjb21wdXRlZCgoKSA9PiBwYXJzZUludChwcm9wcy5vcmRlciwgMTApKSxcbiAgICAgIHBvc2l0aW9uOiBjb21wdXRlZCgoKSA9PiAnYm90dG9tJyksXG4gICAgICBsYXlvdXRTaXplOiBoZWlnaHQsXG4gICAgICBlbGVtZW50U2l6ZTogY29tcHV0ZWQoKCkgPT4gcHJvcHMuaGVpZ2h0ID09PSAnYXV0bycgPyB1bmRlZmluZWQgOiBoZWlnaHQudmFsdWUpLFxuICAgICAgYWN0aXZlOiBjb21wdXRlZCgoKSA9PiBwcm9wcy5hcHApLFxuICAgICAgYWJzb2x1dGU6IHRvUmVmKHByb3BzLCAnYWJzb2x1dGUnKVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcInJlZlwiOiByZXNpemVSZWYsXG4gICAgICBcImNsYXNzXCI6IFsndi1mb290ZXInLCB0aGVtZUNsYXNzZXMudmFsdWUsIGJhY2tncm91bmRDb2xvckNsYXNzZXMudmFsdWUsIGJvcmRlckNsYXNzZXMudmFsdWUsIGVsZXZhdGlvbkNsYXNzZXMudmFsdWUsIHJvdW5kZWRDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IFtiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWUsIHByb3BzLmFwcCA/IGxheW91dEl0ZW1TdHlsZXMudmFsdWUgOiB7XG4gICAgICAgIGhlaWdodDogY29udmVydFRvVW5pdChwcm9wcy5oZWlnaHQpXG4gICAgICB9LCBwcm9wcy5zdHlsZV1cbiAgICB9LCBzbG90cykpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WRm9vdGVyLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IGNyZWF0ZUZvcm0sIG1ha2VGb3JtUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9ybS5tanNcIjtcbmltcG9ydCB7IGZvcndhcmRSZWZzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvcndhcmRSZWZzLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWRm9ybVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VGb3JtUHJvcHMoKVxufSwgJ1ZGb3JtJyk7XG5leHBvcnQgY29uc3QgVkZvcm0gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkZvcm0nLFxuICBwcm9wczogbWFrZVZGb3JtUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWwgPT4gdHJ1ZSxcbiAgICBzdWJtaXQ6IGUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90cyxcbiAgICAgIGVtaXRcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBmb3JtID0gY3JlYXRlRm9ybShwcm9wcyk7XG4gICAgY29uc3QgZm9ybVJlZiA9IHJlZigpO1xuICAgIGZ1bmN0aW9uIG9uUmVzZXQoZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZm9ybS5yZXNldCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblN1Ym1pdChfZSkge1xuICAgICAgY29uc3QgZSA9IF9lO1xuICAgICAgY29uc3QgcmVhZHkgPSBmb3JtLnZhbGlkYXRlKCk7XG4gICAgICBlLnRoZW4gPSByZWFkeS50aGVuLmJpbmQocmVhZHkpO1xuICAgICAgZS5jYXRjaCA9IHJlYWR5LmNhdGNoLmJpbmQocmVhZHkpO1xuICAgICAgZS5maW5hbGx5ID0gcmVhZHkuZmluYWxseS5iaW5kKHJlYWR5KTtcbiAgICAgIGVtaXQoJ3N1Ym1pdCcsIGUpO1xuICAgICAgaWYgKCFlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgcmVhZHkudGhlbihfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIHZhbGlkXG4gICAgICAgICAgfSA9IF9yZWYyO1xuICAgICAgICAgIGlmICh2YWxpZCkge1xuICAgICAgICAgICAgZm9ybVJlZi52YWx1ZT8uc3VibWl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShcImZvcm1cIiwge1xuICAgICAgXCJyZWZcIjogZm9ybVJlZixcbiAgICAgIFwiY2xhc3NcIjogWyd2LWZvcm0nLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlLFxuICAgICAgXCJub3ZhbGlkYXRlXCI6IHRydWUsXG4gICAgICBcIm9uUmVzZXRcIjogb25SZXNldCxcbiAgICAgIFwib25TdWJtaXRcIjogb25TdWJtaXRcbiAgICB9LCBbc2xvdHMuZGVmYXVsdD8uKGZvcm0pXSkpO1xuICAgIHJldHVybiBmb3J3YXJkUmVmcyhmb3JtLCBmb3JtUmVmKTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WRm9ybS5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZHcmlkLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhbGUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZDb250YWluZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGZsdWlkOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKClcbn0sICdWQ29udGFpbmVyJyk7XG5leHBvcnQgY29uc3QgVkNvbnRhaW5lciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWQ29udGFpbmVyJyxcbiAgcHJvcHM6IG1ha2VWQ29udGFpbmVyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBydGxDbGFzc2VzXG4gICAgfSA9IHVzZVJ0bCgpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1jb250YWluZXInLCB7XG4gICAgICAgICd2LWNvbnRhaW5lci0tZmx1aWQnOiBwcm9wcy5mbHVpZFxuICAgICAgfSwgcnRsQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIHNsb3RzKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZDb250YWluZXIubWpzLm1hcCIsIi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WR3JpZC5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBicmVha3BvaW50cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaXNwbGF5Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjYXBpdGFsaXplLCBjb21wdXRlZCwgaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IGJyZWFrcG9pbnRQcm9wcyA9ICgoKSA9PiB7XG4gIHJldHVybiBicmVha3BvaW50cy5yZWR1Y2UoKHByb3BzLCB2YWwpID0+IHtcbiAgICBwcm9wc1t2YWxdID0ge1xuICAgICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfTtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH0sIHt9KTtcbn0pKCk7XG5jb25zdCBvZmZzZXRQcm9wcyA9ICgoKSA9PiB7XG4gIHJldHVybiBicmVha3BvaW50cy5yZWR1Y2UoKHByb3BzLCB2YWwpID0+IHtcbiAgICBjb25zdCBvZmZzZXRLZXkgPSAnb2Zmc2V0JyArIGNhcGl0YWxpemUodmFsKTtcbiAgICBwcm9wc1tvZmZzZXRLZXldID0ge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9O1xuICAgIHJldHVybiBwcm9wcztcbiAgfSwge30pO1xufSkoKTtcbmNvbnN0IG9yZGVyUHJvcHMgPSAoKCkgPT4ge1xuICByZXR1cm4gYnJlYWtwb2ludHMucmVkdWNlKChwcm9wcywgdmFsKSA9PiB7XG4gICAgY29uc3Qgb3JkZXJLZXkgPSAnb3JkZXInICsgY2FwaXRhbGl6ZSh2YWwpO1xuICAgIHByb3BzW29yZGVyS2V5XSA9IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICBkZWZhdWx0OiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH0sIHt9KTtcbn0pKCk7XG5jb25zdCBwcm9wTWFwID0ge1xuICBjb2w6IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRQcm9wcyksXG4gIG9mZnNldDogT2JqZWN0LmtleXMob2Zmc2V0UHJvcHMpLFxuICBvcmRlcjogT2JqZWN0LmtleXMob3JkZXJQcm9wcylcbn07XG5mdW5jdGlvbiBicmVha3BvaW50Q2xhc3ModHlwZSwgcHJvcCwgdmFsKSB7XG4gIGxldCBjbGFzc05hbWUgPSB0eXBlO1xuICBpZiAodmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKHByb3ApIHtcbiAgICBjb25zdCBicmVha3BvaW50ID0gcHJvcC5yZXBsYWNlKHR5cGUsICcnKTtcbiAgICBjbGFzc05hbWUgKz0gYC0ke2JyZWFrcG9pbnR9YDtcbiAgfVxuICBpZiAodHlwZSA9PT0gJ2NvbCcpIHtcbiAgICBjbGFzc05hbWUgPSAndi0nICsgY2xhc3NOYW1lO1xuICB9XG4gIC8vIEhhbmRsaW5nIHRoZSBib29sZWFuIHN0eWxlIHByb3Agd2hlbiBhY2NlcHRpbmcgW0Jvb2xlYW4sIFN0cmluZywgTnVtYmVyXVxuICAvLyBtZWFucyBWdWUgd2lsbCBub3QgY29udmVydCA8di1jb2wgc20+PC92LWNvbD4gdG8gc206IHRydWUgZm9yIHVzLlxuICAvLyBTaW5jZSB0aGUgZGVmYXVsdCBpcyBmYWxzZSwgYW4gZW1wdHkgc3RyaW5nIGluZGljYXRlcyB0aGUgcHJvcCdzIHByZXNlbmNlLlxuICBpZiAodHlwZSA9PT0gJ2NvbCcgJiYgKHZhbCA9PT0gJycgfHwgdmFsID09PSB0cnVlKSkge1xuICAgIC8vIC52LWNvbC1tZFxuICAgIHJldHVybiBjbGFzc05hbWUudG9Mb3dlckNhc2UoKTtcbiAgfVxuICAvLyAub3JkZXItbWQtNlxuICBjbGFzc05hbWUgKz0gYC0ke3ZhbH1gO1xuICByZXR1cm4gY2xhc3NOYW1lLnRvTG93ZXJDYXNlKCk7XG59XG5jb25zdCBBTElHTl9TRUxGX1ZBTFVFUyA9IFsnYXV0bycsICdzdGFydCcsICdlbmQnLCAnY2VudGVyJywgJ2Jhc2VsaW5lJywgJ3N0cmV0Y2gnXTtcbmV4cG9ydCBjb25zdCBtYWtlVkNvbFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29sczoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmcsIE51bWJlcl0sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgLi4uYnJlYWtwb2ludFByb3BzLFxuICBvZmZzZXQ6IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgLi4ub2Zmc2V0UHJvcHMsXG4gIG9yZGVyOiB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIC4uLm9yZGVyUHJvcHMsXG4gIGFsaWduU2VsZjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBudWxsLFxuICAgIHZhbGlkYXRvcjogc3RyID0+IEFMSUdOX1NFTEZfVkFMVUVTLmluY2x1ZGVzKHN0cilcbiAgfSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpXG59LCAnVkNvbCcpO1xuZXhwb3J0IGNvbnN0IFZDb2wgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkNvbCcsXG4gIHByb3BzOiBtYWtlVkNvbFByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGNsYXNzTGlzdCA9IFtdO1xuXG4gICAgICAvLyBMb29wIHRocm91Z2ggYGNvbGAsIGBvZmZzZXRgLCBgb3JkZXJgIGJyZWFrcG9pbnQgcHJvcHNcbiAgICAgIGxldCB0eXBlO1xuICAgICAgZm9yICh0eXBlIGluIHByb3BNYXApIHtcbiAgICAgICAgcHJvcE1hcFt0eXBlXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gcHJvcHNbcHJvcF07XG4gICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gYnJlYWtwb2ludENsYXNzKHR5cGUsIHByb3AsIHZhbHVlKTtcbiAgICAgICAgICBpZiAoY2xhc3NOYW1lKSBjbGFzc0xpc3QucHVzaChjbGFzc05hbWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGhhc0NvbENsYXNzZXMgPSBjbGFzc0xpc3Quc29tZShjbGFzc05hbWUgPT4gY2xhc3NOYW1lLnN0YXJ0c1dpdGgoJ3YtY29sLScpKTtcbiAgICAgIGNsYXNzTGlzdC5wdXNoKHtcbiAgICAgICAgLy8gRGVmYXVsdCB0byAudi1jb2wgaWYgbm8gb3RoZXIgY29sLXticH0tKiBjbGFzc2VzIGdlbmVyYXRlZCBub3IgYGNvbHNgIHNwZWNpZmllZC5cbiAgICAgICAgJ3YtY29sJzogIWhhc0NvbENsYXNzZXMgfHwgIXByb3BzLmNvbHMsXG4gICAgICAgIFtgdi1jb2wtJHtwcm9wcy5jb2xzfWBdOiBwcm9wcy5jb2xzLFxuICAgICAgICBbYG9mZnNldC0ke3Byb3BzLm9mZnNldH1gXTogcHJvcHMub2Zmc2V0LFxuICAgICAgICBbYG9yZGVyLSR7cHJvcHMub3JkZXJ9YF06IHByb3BzLm9yZGVyLFxuICAgICAgICBbYGFsaWduLXNlbGYtJHtwcm9wcy5hbGlnblNlbGZ9YF06IHByb3BzLmFsaWduU2VsZlxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2xhc3NMaXN0O1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiBoKHByb3BzLnRhZywge1xuICAgICAgY2xhc3M6IFtjbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICBzdHlsZTogcHJvcHMuc3R5bGVcbiAgICB9LCBzbG90cy5kZWZhdWx0Py4oKSk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkNvbC5tanMubWFwIiwiLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZHcmlkLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IGJyZWFrcG9pbnRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2Rpc3BsYXkubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNhcGl0YWxpemUsIGNvbXB1dGVkLCBoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuY29uc3QgQUxJR05NRU5UID0gWydzdGFydCcsICdlbmQnLCAnY2VudGVyJ107XG5jb25zdCBTUEFDRSA9IFsnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnLCAnc3BhY2UtZXZlbmx5J107XG5mdW5jdGlvbiBtYWtlUm93UHJvcHMocHJlZml4LCBkZWYpIHtcbiAgcmV0dXJuIGJyZWFrcG9pbnRzLnJlZHVjZSgocHJvcHMsIHZhbCkgPT4ge1xuICAgIGNvbnN0IHByZWZpeEtleSA9IHByZWZpeCArIGNhcGl0YWxpemUodmFsKTtcbiAgICBwcm9wc1twcmVmaXhLZXldID0gZGVmKCk7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9LCB7fSk7XG59XG5jb25zdCBBTElHTl9WQUxVRVMgPSBbLi4uQUxJR05NRU5ULCAnYmFzZWxpbmUnLCAnc3RyZXRjaCddO1xuY29uc3QgYWxpZ25WYWxpZGF0b3IgPSBzdHIgPT4gQUxJR05fVkFMVUVTLmluY2x1ZGVzKHN0cik7XG5jb25zdCBhbGlnblByb3BzID0gbWFrZVJvd1Byb3BzKCdhbGlnbicsICgpID0+ICh7XG4gIHR5cGU6IFN0cmluZyxcbiAgZGVmYXVsdDogbnVsbCxcbiAgdmFsaWRhdG9yOiBhbGlnblZhbGlkYXRvclxufSkpO1xuY29uc3QgSlVTVElGWV9WQUxVRVMgPSBbLi4uQUxJR05NRU5ULCAuLi5TUEFDRV07XG5jb25zdCBqdXN0aWZ5VmFsaWRhdG9yID0gc3RyID0+IEpVU1RJRllfVkFMVUVTLmluY2x1ZGVzKHN0cik7XG5jb25zdCBqdXN0aWZ5UHJvcHMgPSBtYWtlUm93UHJvcHMoJ2p1c3RpZnknLCAoKSA9PiAoe1xuICB0eXBlOiBTdHJpbmcsXG4gIGRlZmF1bHQ6IG51bGwsXG4gIHZhbGlkYXRvcjoganVzdGlmeVZhbGlkYXRvclxufSkpO1xuY29uc3QgQUxJR05fQ09OVEVOVF9WQUxVRVMgPSBbLi4uQUxJR05NRU5ULCAuLi5TUEFDRSwgJ3N0cmV0Y2gnXTtcbmNvbnN0IGFsaWduQ29udGVudFZhbGlkYXRvciA9IHN0ciA9PiBBTElHTl9DT05URU5UX1ZBTFVFUy5pbmNsdWRlcyhzdHIpO1xuY29uc3QgYWxpZ25Db250ZW50UHJvcHMgPSBtYWtlUm93UHJvcHMoJ2FsaWduQ29udGVudCcsICgpID0+ICh7XG4gIHR5cGU6IFN0cmluZyxcbiAgZGVmYXVsdDogbnVsbCxcbiAgdmFsaWRhdG9yOiBhbGlnbkNvbnRlbnRWYWxpZGF0b3Jcbn0pKTtcbmNvbnN0IHByb3BNYXAgPSB7XG4gIGFsaWduOiBPYmplY3Qua2V5cyhhbGlnblByb3BzKSxcbiAganVzdGlmeTogT2JqZWN0LmtleXMoanVzdGlmeVByb3BzKSxcbiAgYWxpZ25Db250ZW50OiBPYmplY3Qua2V5cyhhbGlnbkNvbnRlbnRQcm9wcylcbn07XG5jb25zdCBjbGFzc01hcCA9IHtcbiAgYWxpZ246ICdhbGlnbicsXG4gIGp1c3RpZnk6ICdqdXN0aWZ5JyxcbiAgYWxpZ25Db250ZW50OiAnYWxpZ24tY29udGVudCdcbn07XG5mdW5jdGlvbiBicmVha3BvaW50Q2xhc3ModHlwZSwgcHJvcCwgdmFsKSB7XG4gIGxldCBjbGFzc05hbWUgPSBjbGFzc01hcFt0eXBlXTtcbiAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBpZiAocHJvcCkge1xuICAgIC8vIGFsaWduU20gLT4gU21cbiAgICBjb25zdCBicmVha3BvaW50ID0gcHJvcC5yZXBsYWNlKHR5cGUsICcnKTtcbiAgICBjbGFzc05hbWUgKz0gYC0ke2JyZWFrcG9pbnR9YDtcbiAgfVxuICAvLyAuYWxpZ24taXRlbXMtc20tY2VudGVyXG4gIGNsYXNzTmFtZSArPSBgLSR7dmFsfWA7XG4gIHJldHVybiBjbGFzc05hbWUudG9Mb3dlckNhc2UoKTtcbn1cbmV4cG9ydCBjb25zdCBtYWtlVlJvd1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZGVuc2U6IEJvb2xlYW4sXG4gIG5vR3V0dGVyczogQm9vbGVhbixcbiAgYWxpZ246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogbnVsbCxcbiAgICB2YWxpZGF0b3I6IGFsaWduVmFsaWRhdG9yXG4gIH0sXG4gIC4uLmFsaWduUHJvcHMsXG4gIGp1c3RpZnk6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogbnVsbCxcbiAgICB2YWxpZGF0b3I6IGp1c3RpZnlWYWxpZGF0b3JcbiAgfSxcbiAgLi4uanVzdGlmeVByb3BzLFxuICBhbGlnbkNvbnRlbnQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogbnVsbCxcbiAgICB2YWxpZGF0b3I6IGFsaWduQ29udGVudFZhbGlkYXRvclxuICB9LFxuICAuLi5hbGlnbkNvbnRlbnRQcm9wcyxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpXG59LCAnVlJvdycpO1xuZXhwb3J0IGNvbnN0IFZSb3cgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlJvdycsXG4gIHByb3BzOiBtYWtlVlJvd1Byb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGNsYXNzTGlzdCA9IFtdO1xuXG4gICAgICAvLyBMb29wIHRocm91Z2ggYGFsaWduYCwgYGp1c3RpZnlgLCBgYWxpZ25Db250ZW50YCBicmVha3BvaW50IHByb3BzXG4gICAgICBsZXQgdHlwZTtcbiAgICAgIGZvciAodHlwZSBpbiBwcm9wTWFwKSB7XG4gICAgICAgIHByb3BNYXBbdHlwZV0uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGJyZWFrcG9pbnRDbGFzcyh0eXBlLCBwcm9wLCB2YWx1ZSk7XG4gICAgICAgICAgaWYgKGNsYXNzTmFtZSkgY2xhc3NMaXN0LnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjbGFzc0xpc3QucHVzaCh7XG4gICAgICAgICd2LXJvdy0tbm8tZ3V0dGVycyc6IHByb3BzLm5vR3V0dGVycyxcbiAgICAgICAgJ3Ytcm93LS1kZW5zZSc6IHByb3BzLmRlbnNlLFxuICAgICAgICBbYGFsaWduLSR7cHJvcHMuYWxpZ259YF06IHByb3BzLmFsaWduLFxuICAgICAgICBbYGp1c3RpZnktJHtwcm9wcy5qdXN0aWZ5fWBdOiBwcm9wcy5qdXN0aWZ5LFxuICAgICAgICBbYGFsaWduLWNvbnRlbnQtJHtwcm9wcy5hbGlnbkNvbnRlbnR9YF06IHByb3BzLmFsaWduQ29udGVudFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2xhc3NMaXN0O1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiBoKHByb3BzLnRhZywge1xuICAgICAgY2xhc3M6IFsndi1yb3cnLCBjbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICBzdHlsZTogcHJvcHMuc3R5bGVcbiAgICB9LCBzbG90cy5kZWZhdWx0Py4oKSk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlJvdy5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgVlNwYWNlciA9IGNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwoJ3Ytc3BhY2VyJywgJ2RpdicsICdWU3BhY2VyJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WU3BhY2VyLm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZURlbGF5UHJvcHMsIHVzZURlbGF5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbGF5Lm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVkhvdmVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gIH0sXG4gIC4uLm1ha2VEZWxheVByb3BzKClcbn0sICdWSG92ZXInKTtcbmV4cG9ydCBjb25zdCBWSG92ZXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVkhvdmVyJyxcbiAgcHJvcHM6IG1ha2VWSG92ZXJQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBpc0hvdmVyaW5nID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJ1bk9wZW5EZWxheSxcbiAgICAgIHJ1bkNsb3NlRGVsYXlcbiAgICB9ID0gdXNlRGVsYXkocHJvcHMsIHZhbHVlID0+ICFwcm9wcy5kaXNhYmxlZCAmJiAoaXNIb3ZlcmluZy52YWx1ZSA9IHZhbHVlKSk7XG4gICAgcmV0dXJuICgpID0+IHNsb3RzLmRlZmF1bHQ/Lih7XG4gICAgICBpc0hvdmVyaW5nOiBpc0hvdmVyaW5nLnZhbHVlLFxuICAgICAgcHJvcHM6IHtcbiAgICAgICAgb25Nb3VzZWVudGVyOiBydW5PcGVuRGVsYXksXG4gICAgICAgIG9uTW91c2VsZWF2ZTogcnVuQ2xvc2VEZWxheVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZIb3Zlci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZJdGVtR3JvdXAuY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUdyb3VwUHJvcHMsIHVzZUdyb3VwIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2dyb3VwLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgVkl0ZW1Hcm91cFN5bWJvbCA9IFN5bWJvbC5mb3IoJ3Z1ZXRpZnk6di1pdGVtLWdyb3VwJyk7XG5leHBvcnQgY29uc3QgbWFrZVZJdGVtR3JvdXBQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlR3JvdXBQcm9wcyh7XG4gICAgc2VsZWN0ZWRDbGFzczogJ3YtaXRlbS0tc2VsZWN0ZWQnXG4gIH0pLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZJdGVtR3JvdXAnKTtcbmV4cG9ydCBjb25zdCBWSXRlbUdyb3VwID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZJdGVtR3JvdXAnLFxuICBwcm9wczogbWFrZVZJdGVtR3JvdXBQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBpc1NlbGVjdGVkLFxuICAgICAgc2VsZWN0LFxuICAgICAgbmV4dCxcbiAgICAgIHByZXYsXG4gICAgICBzZWxlY3RlZFxuICAgIH0gPSB1c2VHcm91cChwcm9wcywgVkl0ZW1Hcm91cFN5bWJvbCk7XG4gICAgcmV0dXJuICgpID0+IF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWl0ZW0tZ3JvdXAnLCB0aGVtZUNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMuZGVmYXVsdD8uKHtcbiAgICAgICAgaXNTZWxlY3RlZCxcbiAgICAgICAgc2VsZWN0LFxuICAgICAgICBuZXh0LFxuICAgICAgICBwcmV2LFxuICAgICAgICBzZWxlY3RlZDogc2VsZWN0ZWQudmFsdWVcbiAgICAgIH0pXVxuICAgIH0pO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZJdGVtR3JvdXAubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBWSXRlbUdyb3VwU3ltYm9sIH0gZnJvbSBcIi4vVkl0ZW1Hcm91cC5tanNcIjtcbmltcG9ydCB7IG1ha2VHcm91cEl0ZW1Qcm9wcywgdXNlR3JvdXBJdGVtIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2dyb3VwLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBWSXRlbSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWSXRlbScsXG4gIHByb3BzOiBtYWtlR3JvdXBJdGVtUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAnZ3JvdXA6c2VsZWN0ZWQnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzU2VsZWN0ZWQsXG4gICAgICBzZWxlY3QsXG4gICAgICB0b2dnbGUsXG4gICAgICBzZWxlY3RlZENsYXNzLFxuICAgICAgdmFsdWUsXG4gICAgICBkaXNhYmxlZFxuICAgIH0gPSB1c2VHcm91cEl0ZW0ocHJvcHMsIFZJdGVtR3JvdXBTeW1ib2wpO1xuICAgIHJldHVybiAoKSA9PiBzbG90cy5kZWZhdWx0Py4oe1xuICAgICAgaXNTZWxlY3RlZDogaXNTZWxlY3RlZC52YWx1ZSxcbiAgICAgIHNlbGVjdGVkQ2xhc3M6IHNlbGVjdGVkQ2xhc3MudmFsdWUsXG4gICAgICBzZWxlY3QsXG4gICAgICB0b2dnbGUsXG4gICAgICB2YWx1ZTogdmFsdWUudmFsdWUsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQudmFsdWVcbiAgICB9KTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WSXRlbS5tanMubWFwIiwiLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZLYmQuY3NzXCI7XG5cbi8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY3JlYXRlU2ltcGxlRnVuY3Rpb25hbCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZLYmQgPSBjcmVhdGVTaW1wbGVGdW5jdGlvbmFsKCd2LWtiZCcpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WTGF5b3V0LmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IGNyZWF0ZUxheW91dCwgbWFrZUxheW91dFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xheW91dC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWTGF5b3V0UHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUxheW91dFByb3BzKClcbn0sICdWTGF5b3V0Jyk7XG5leHBvcnQgY29uc3QgVkxheW91dCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTGF5b3V0JyxcbiAgcHJvcHM6IG1ha2VWTGF5b3V0UHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBsYXlvdXRDbGFzc2VzLFxuICAgICAgbGF5b3V0U3R5bGVzLFxuICAgICAgZ2V0TGF5b3V0SXRlbSxcbiAgICAgIGl0ZW1zLFxuICAgICAgbGF5b3V0UmVmXG4gICAgfSA9IGNyZWF0ZUxheW91dChwcm9wcyk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcInJlZlwiOiBsYXlvdXRSZWYsXG4gICAgICBcImNsYXNzXCI6IFtsYXlvdXRDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IFtsYXlvdXRTdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXVxuICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKV0pKTtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0TGF5b3V0SXRlbSxcbiAgICAgIGl0ZW1zXG4gICAgfTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTGF5b3V0Lm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkxheW91dEl0ZW0uY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUxheW91dEl0ZW1Qcm9wcywgdXNlTGF5b3V0SXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sYXlvdXQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWTGF5b3V0SXRlbVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgcG9zaXRpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgc2l6ZToge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMzAwXG4gIH0sXG4gIG1vZGVsVmFsdWU6IEJvb2xlYW4sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlTGF5b3V0SXRlbVByb3BzKClcbn0sICdWTGF5b3V0SXRlbScpO1xuZXhwb3J0IGNvbnN0IFZMYXlvdXRJdGVtID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZMYXlvdXRJdGVtJyxcbiAgcHJvcHM6IG1ha2VWTGF5b3V0SXRlbVByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgbGF5b3V0SXRlbVN0eWxlc1xuICAgIH0gPSB1c2VMYXlvdXRJdGVtKHtcbiAgICAgIGlkOiBwcm9wcy5uYW1lLFxuICAgICAgb3JkZXI6IGNvbXB1dGVkKCgpID0+IHBhcnNlSW50KHByb3BzLm9yZGVyLCAxMCkpLFxuICAgICAgcG9zaXRpb246IHRvUmVmKHByb3BzLCAncG9zaXRpb24nKSxcbiAgICAgIGVsZW1lbnRTaXplOiB0b1JlZihwcm9wcywgJ3NpemUnKSxcbiAgICAgIGxheW91dFNpemU6IHRvUmVmKHByb3BzLCAnc2l6ZScpLFxuICAgICAgYWN0aXZlOiB0b1JlZihwcm9wcywgJ21vZGVsVmFsdWUnKSxcbiAgICAgIGFic29sdXRlOiB0b1JlZihwcm9wcywgJ2Fic29sdXRlJylcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LWxheW91dC1pdGVtJywgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBbbGF5b3V0SXRlbVN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdXG4gICAgfSwgW3Nsb3RzLmRlZmF1bHQ/LigpXSk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkxheW91dEl0ZW0ubWpzLm1hcCIsImltcG9ydCB7IHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGltZW5zaW9uUHJvcHMsIHVzZURpbWVuc2lvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaW1lbnNpb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVHJhbnNpdGlvblByb3BzLCBNYXliZVRyYW5zaXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdHJhbnNpdGlvbi5tanNcIjsgLy8gRGlyZWN0aXZlc1xuaW1wb3J0IGludGVyc2VjdCBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9pbnRlcnNlY3QvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVkxhenlQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIG1vZGVsVmFsdWU6IEJvb2xlYW4sXG4gIG9wdGlvbnM6IHtcbiAgICB0eXBlOiBPYmplY3QsXG4gICAgLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdHlwZXMsIG5hdmlnYXRlIHRvOlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JbnRlcnNlY3Rpb25fT2JzZXJ2ZXJfQVBJXG4gICAgZGVmYXVsdDogKCkgPT4gKHtcbiAgICAgIHJvb3Q6IHVuZGVmaW5lZCxcbiAgICAgIHJvb3RNYXJnaW46IHVuZGVmaW5lZCxcbiAgICAgIHRocmVzaG9sZDogdW5kZWZpbmVkXG4gICAgfSlcbiAgfSxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEaW1lbnNpb25Qcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRyYW5zaXRpb25Qcm9wcyh7XG4gICAgdHJhbnNpdGlvbjogJ2ZhZGUtdHJhbnNpdGlvbidcbiAgfSlcbn0sICdWTGF6eScpO1xuZXhwb3J0IGNvbnN0IFZMYXp5ID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZMYXp5JyxcbiAgZGlyZWN0aXZlczoge1xuICAgIGludGVyc2VjdFxuICB9LFxuICBwcm9wczogbWFrZVZMYXp5UHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWx1ZSA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgZGltZW5zaW9uU3R5bGVzXG4gICAgfSA9IHVzZURpbWVuc2lvbihwcm9wcyk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgZnVuY3Rpb24gb25JbnRlcnNlY3QoaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgIGlmIChpc0FjdGl2ZS52YWx1ZSkgcmV0dXJuO1xuICAgICAgaXNBY3RpdmUudmFsdWUgPSBpc0ludGVyc2VjdGluZztcbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1sYXp5JywgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBbZGltZW5zaW9uU3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV1cbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbaXNBY3RpdmUudmFsdWUgJiYgX2NyZWF0ZVZOb2RlKE1heWJlVHJhbnNpdGlvbiwge1xuICAgICAgICBcInRyYW5zaXRpb25cIjogcHJvcHMudHJhbnNpdGlvbixcbiAgICAgICAgXCJhcHBlYXJcIjogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMuZGVmYXVsdD8uKCldXG4gICAgICB9KV1cbiAgICB9KSwgW1tfcmVzb2x2ZURpcmVjdGl2ZShcImludGVyc2VjdFwiKSwge1xuICAgICAgaGFuZGxlcjogb25JbnRlcnNlY3QsXG4gICAgICBvcHRpb25zOiBwcm9wcy5vcHRpb25zXG4gICAgfSwgbnVsbF1dKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZMYXp5Lm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVkxvY2FsZVByb3ZpZGVyLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVMb2NhbGUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZMb2NhbGVQcm92aWRlclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgbG9jYWxlOiBTdHJpbmcsXG4gIGZhbGxiYWNrTG9jYWxlOiBTdHJpbmcsXG4gIG1lc3NhZ2VzOiBPYmplY3QsXG4gIHJ0bDoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpXG59LCAnVkxvY2FsZVByb3ZpZGVyJyk7XG5leHBvcnQgY29uc3QgVkxvY2FsZVByb3ZpZGVyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZMb2NhbGVQcm92aWRlcicsXG4gIHByb3BzOiBtYWtlVkxvY2FsZVByb3ZpZGVyUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBydGxDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVMb2NhbGUocHJvcHMpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtbG9jYWxlLXByb3ZpZGVyJywgcnRsQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKV0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VkxvY2FsZVByb3ZpZGVyLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVk1haW4uY3NzXCI7XG5cbi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgdXNlTGF5b3V0IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xheW91dC5tanNcIjtcbmltcG9ydCB7IHVzZVNzckJvb3QgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc3NyQm9vdC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVk1haW5Qcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHNjcm9sbGFibGU6IEJvb2xlYW4sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoe1xuICAgIHRhZzogJ21haW4nXG4gIH0pXG59LCAnVk1haW4nKTtcbmV4cG9ydCBjb25zdCBWTWFpbiA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWTWFpbicsXG4gIHByb3BzOiBtYWtlVk1haW5Qcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIG1haW5TdHlsZXNcbiAgICB9ID0gdXNlTGF5b3V0KCk7XG4gICAgY29uc3Qge1xuICAgICAgc3NyQm9vdFN0eWxlc1xuICAgIH0gPSB1c2VTc3JCb290KCk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LW1haW4nLCB7XG4gICAgICAgICd2LW1haW4tLXNjcm9sbGFibGUnOiBwcm9wcy5zY3JvbGxhYmxlXG4gICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IFttYWluU3R5bGVzLnZhbHVlLCBzc3JCb290U3R5bGVzLnZhbHVlLCBwcm9wcy5zdHlsZV1cbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbcHJvcHMuc2Nyb2xsYWJsZSA/IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LW1haW5fX3Njcm9sbGVyXCJcbiAgICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKV0pIDogc2xvdHMuZGVmYXVsdD8uKCldXG4gICAgfSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTWFpbi5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgb25CZWZvcmVVbm1vdW50LCBvbk1vdW50ZWQsIHNoYWxsb3dSZWYsIHdhdGNoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBmdW5jdGlvbiB1c2VTdGlja3koX3JlZikge1xuICBsZXQge1xuICAgIHJvb3RFbCxcbiAgICBpc1N0aWNreSxcbiAgICBsYXlvdXRJdGVtU3R5bGVzXG4gIH0gPSBfcmVmO1xuICBjb25zdCBpc1N0dWNrID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gIGNvbnN0IHN0dWNrUG9zaXRpb24gPSBzaGFsbG93UmVmKDApO1xuICBjb25zdCBzdGlja3lTdHlsZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3Qgc2lkZSA9IHR5cGVvZiBpc1N0dWNrLnZhbHVlID09PSAnYm9vbGVhbicgPyAndG9wJyA6IGlzU3R1Y2sudmFsdWU7XG4gICAgcmV0dXJuIFtpc1N0aWNreS52YWx1ZSA/IHtcbiAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgYm90dG9tOiAnYXV0bycsXG4gICAgICBoZWlnaHQ6IHVuZGVmaW5lZFxuICAgIH0gOiB1bmRlZmluZWQsIGlzU3R1Y2sudmFsdWUgPyB7XG4gICAgICBbc2lkZV06IGNvbnZlcnRUb1VuaXQoc3R1Y2tQb3NpdGlvbi52YWx1ZSlcbiAgICB9IDoge1xuICAgICAgdG9wOiBsYXlvdXRJdGVtU3R5bGVzLnZhbHVlLnRvcFxuICAgIH1dO1xuICB9KTtcbiAgb25Nb3VudGVkKCgpID0+IHtcbiAgICB3YXRjaChpc1N0aWNreSwgdmFsID0+IHtcbiAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsLCB7XG4gICAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgaW1tZWRpYXRlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xuICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbCk7XG4gIH0pO1xuICBsZXQgbGFzdFNjcm9sbFRvcCA9IDA7XG4gIGZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGxhc3RTY3JvbGxUb3AgPiB3aW5kb3cuc2Nyb2xsWSA/ICd1cCcgOiAnZG93bic7XG4gICAgY29uc3QgcmVjdCA9IHJvb3RFbC52YWx1ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBsYXlvdXRUb3AgPSBwYXJzZUZsb2F0KGxheW91dEl0ZW1TdHlsZXMudmFsdWUudG9wID8/IDApO1xuICAgIGNvbnN0IHRvcCA9IHdpbmRvdy5zY3JvbGxZIC0gTWF0aC5tYXgoMCwgc3R1Y2tQb3NpdGlvbi52YWx1ZSAtIGxheW91dFRvcCk7XG4gICAgY29uc3QgYm90dG9tID0gcmVjdC5oZWlnaHQgKyBNYXRoLm1heChzdHVja1Bvc2l0aW9uLnZhbHVlLCBsYXlvdXRUb3ApIC0gd2luZG93LnNjcm9sbFkgLSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgY29uc3QgYm9keVNjcm9sbCA9IHBhcnNlRmxvYXQoZ2V0Q29tcHV0ZWRTdHlsZShyb290RWwudmFsdWUpLmdldFByb3BlcnR5VmFsdWUoJy0tdi1ib2R5LXNjcm9sbC15JykpIHx8IDA7XG4gICAgaWYgKHJlY3QuaGVpZ2h0IDwgd2luZG93LmlubmVySGVpZ2h0IC0gbGF5b3V0VG9wKSB7XG4gICAgICBpc1N0dWNrLnZhbHVlID0gJ3RvcCc7XG4gICAgICBzdHVja1Bvc2l0aW9uLnZhbHVlID0gbGF5b3V0VG9wO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAndXAnICYmIGlzU3R1Y2sudmFsdWUgPT09ICdib3R0b20nIHx8IGRpcmVjdGlvbiA9PT0gJ2Rvd24nICYmIGlzU3R1Y2sudmFsdWUgPT09ICd0b3AnKSB7XG4gICAgICBzdHVja1Bvc2l0aW9uLnZhbHVlID0gd2luZG93LnNjcm9sbFkgKyByZWN0LnRvcCAtIGJvZHlTY3JvbGw7XG4gICAgICBpc1N0dWNrLnZhbHVlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2Rvd24nICYmIGJvdHRvbSA8PSAwKSB7XG4gICAgICBzdHVja1Bvc2l0aW9uLnZhbHVlID0gMDtcbiAgICAgIGlzU3R1Y2sudmFsdWUgPSAnYm90dG9tJztcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJyAmJiB0b3AgPD0gMCkge1xuICAgICAgaWYgKCFib2R5U2Nyb2xsKSB7XG4gICAgICAgIHN0dWNrUG9zaXRpb24udmFsdWUgPSByZWN0LnRvcCArIHRvcDtcbiAgICAgICAgaXNTdHVjay52YWx1ZSA9ICd0b3AnO1xuICAgICAgfSBlbHNlIGlmIChpc1N0dWNrLnZhbHVlICE9PSAndG9wJykge1xuICAgICAgICBzdHVja1Bvc2l0aW9uLnZhbHVlID0gLXRvcCArIGJvZHlTY3JvbGwgKyBsYXlvdXRUb3A7XG4gICAgICAgIGlzU3R1Y2sudmFsdWUgPSAndG9wJztcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdFNjcm9sbFRvcCA9IHdpbmRvdy5zY3JvbGxZO1xuICB9XG4gIHJldHVybiB7XG4gICAgaXNTdHVjayxcbiAgICBzdGlja3lTdHlsZXNcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0aWNreS5tanMubWFwIiwiLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBDaXJjdWxhckJ1ZmZlciB9IGZyb20gXCIuLi91dGlsL2luZGV4Lm1qc1wiO1xuY29uc3QgSE9SSVpPTiA9IDEwMDsgLy8gbXNcbmNvbnN0IEhJU1RPUlkgPSAyMDsgLy8gbnVtYmVyIG9mIHNhbXBsZXMgdG8ga2VlcFxuXG4vKiogQHNlZSBodHRwczovL2FuZHJvaWQuZ29vZ2xlc291cmNlLmNvbS9wbGF0Zm9ybS9mcmFtZXdvcmtzL25hdGl2ZS8rL21hc3Rlci9saWJzL2lucHV0L1ZlbG9jaXR5VHJhY2tlci5jcHAgKi9cbmZ1bmN0aW9uIGtpbmV0aWNFbmVyZ3lUb1ZlbG9jaXR5KHdvcmspIHtcbiAgY29uc3Qgc3FydDIgPSAxLjQxNDIxMzU2MjM3O1xuICByZXR1cm4gKHdvcmsgPCAwID8gLTEuMCA6IDEuMCkgKiBNYXRoLnNxcnQoTWF0aC5hYnMod29yaykpICogc3FydDI7XG59XG5cbi8qKlxuICogUmV0dXJucyBwb2ludGVyIHZlbG9jaXR5IGluIHB4L3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUltcHVsc2VWZWxvY2l0eShzYW1wbGVzKSB7XG4gIC8vIFRoZSBpbnB1dCBzaG91bGQgYmUgaW4gcmV2ZXJzZWQgdGltZSBvcmRlciAobW9zdCByZWNlbnQgc2FtcGxlIGF0IGluZGV4IGk9MClcbiAgaWYgKHNhbXBsZXMubGVuZ3RoIDwgMikge1xuICAgIC8vIGlmIDAgb3IgMSBwb2ludHMsIHZlbG9jaXR5IGlzIHplcm9cbiAgICByZXR1cm4gMDtcbiAgfVxuICAvLyBpZiAoc2FtcGxlc1sxXS50ID4gc2FtcGxlc1swXS50KSB7XG4gIC8vICAgLy8gQWxnb3JpdGhtIHdpbGwgc3RpbGwgd29yaywgYnV0IG5vdCBwZXJmZWN0bHlcbiAgLy8gICBjb25zb2xlV2FybignU2FtcGxlcyBwcm92aWRlZCB0byBjYWxjdWxhdGVJbXB1bHNlVmVsb2NpdHkgaW4gdGhlIHdyb25nIG9yZGVyJylcbiAgLy8gfVxuICBpZiAoc2FtcGxlcy5sZW5ndGggPT09IDIpIHtcbiAgICAvLyBpZiAyIHBvaW50cywgYmFzaWMgbGluZWFyIGNhbGN1bGF0aW9uXG4gICAgaWYgKHNhbXBsZXNbMV0udCA9PT0gc2FtcGxlc1swXS50KSB7XG4gICAgICAvLyBjb25zb2xlV2FybihgRXZlbnRzIGhhdmUgaWRlbnRpY2FsIHRpbWUgc3RhbXBzIHQ9JHtzYW1wbGVzWzBdLnR9LCBzZXR0aW5nIHZlbG9jaXR5ID0gMGApXG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIChzYW1wbGVzWzFdLmQgLSBzYW1wbGVzWzBdLmQpIC8gKHNhbXBsZXNbMV0udCAtIHNhbXBsZXNbMF0udCk7XG4gIH1cbiAgLy8gR3VhcmFudGVlZCB0byBoYXZlIGF0IGxlYXN0IDMgcG9pbnRzIGhlcmVcbiAgLy8gc3RhcnQgd2l0aCB0aGUgb2xkZXN0IHNhbXBsZSBhbmQgZ28gZm9yd2FyZCBpbiB0aW1lXG4gIGxldCB3b3JrID0gMDtcbiAgZm9yIChsZXQgaSA9IHNhbXBsZXMubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgIGlmIChzYW1wbGVzW2ldLnQgPT09IHNhbXBsZXNbaSAtIDFdLnQpIHtcbiAgICAgIC8vIGNvbnNvbGVXYXJuKGBFdmVudHMgaGF2ZSBpZGVudGljYWwgdGltZSBzdGFtcHMgdD0ke3NhbXBsZXNbaV0udH0sIHNraXBwaW5nIHNhbXBsZWApXG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgdnByZXYgPSBraW5ldGljRW5lcmd5VG9WZWxvY2l0eSh3b3JrKTsgLy8gdltpLTFdXG4gICAgY29uc3QgdmN1cnIgPSAoc2FtcGxlc1tpXS5kIC0gc2FtcGxlc1tpIC0gMV0uZCkgLyAoc2FtcGxlc1tpXS50IC0gc2FtcGxlc1tpIC0gMV0udCk7IC8vIHZbaV1cbiAgICB3b3JrICs9ICh2Y3VyciAtIHZwcmV2KSAqIE1hdGguYWJzKHZjdXJyKTtcbiAgICBpZiAoaSA9PT0gc2FtcGxlcy5sZW5ndGggLSAxKSB7XG4gICAgICB3b3JrICo9IDAuNTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGtpbmV0aWNFbmVyZ3lUb1ZlbG9jaXR5KHdvcmspICogMTAwMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1c2VWZWxvY2l0eSgpIHtcbiAgY29uc3QgdG91Y2hlcyA9IHt9O1xuICBmdW5jdGlvbiBhZGRNb3ZlbWVudChlKSB7XG4gICAgQXJyYXkuZnJvbShlLmNoYW5nZWRUb3VjaGVzKS5mb3JFYWNoKHRvdWNoID0+IHtcbiAgICAgIGNvbnN0IHNhbXBsZXMgPSB0b3VjaGVzW3RvdWNoLmlkZW50aWZpZXJdID8/ICh0b3VjaGVzW3RvdWNoLmlkZW50aWZpZXJdID0gbmV3IENpcmN1bGFyQnVmZmVyKEhJU1RPUlkpKTtcbiAgICAgIHNhbXBsZXMucHVzaChbZS50aW1lU3RhbXAsIHRvdWNoXSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZW5kVG91Y2goZSkge1xuICAgIEFycmF5LmZyb20oZS5jaGFuZ2VkVG91Y2hlcykuZm9yRWFjaCh0b3VjaCA9PiB7XG4gICAgICBkZWxldGUgdG91Y2hlc1t0b3VjaC5pZGVudGlmaWVyXTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBnZXRWZWxvY2l0eShpZCkge1xuICAgIGNvbnN0IHNhbXBsZXMgPSB0b3VjaGVzW2lkXT8udmFsdWVzKCkucmV2ZXJzZSgpO1xuICAgIGlmICghc2FtcGxlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBzYW1wbGVzIGZvciB0b3VjaCBpZCAke2lkfWApO1xuICAgIH1cbiAgICBjb25zdCBuZXdlc3QgPSBzYW1wbGVzWzBdO1xuICAgIGNvbnN0IHggPSBbXTtcbiAgICBjb25zdCB5ID0gW107XG4gICAgZm9yIChjb25zdCB2YWwgb2Ygc2FtcGxlcykge1xuICAgICAgaWYgKG5ld2VzdFswXSAtIHZhbFswXSA+IEhPUklaT04pIGJyZWFrO1xuICAgICAgeC5wdXNoKHtcbiAgICAgICAgdDogdmFsWzBdLFxuICAgICAgICBkOiB2YWxbMV0uY2xpZW50WFxuICAgICAgfSk7XG4gICAgICB5LnB1c2goe1xuICAgICAgICB0OiB2YWxbMF0sXG4gICAgICAgIGQ6IHZhbFsxXS5jbGllbnRZXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGNhbGN1bGF0ZUltcHVsc2VWZWxvY2l0eSh4KSxcbiAgICAgIHk6IGNhbGN1bGF0ZUltcHVsc2VWZWxvY2l0eSh5KSxcbiAgICAgIGdldCBkaXJlY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB4LFxuICAgICAgICAgIHlcbiAgICAgICAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IFthYnNYLCBhYnNZXSA9IFtNYXRoLmFicyh4KSwgTWF0aC5hYnMoeSldO1xuICAgICAgICByZXR1cm4gYWJzWCA+IGFic1kgJiYgeCA+PSAwID8gJ3JpZ2h0JyA6IGFic1ggPiBhYnNZICYmIHggPD0gMCA/ICdsZWZ0JyA6IGFic1kgPiBhYnNYICYmIHkgPj0gMCA/ICdkb3duJyA6IGFic1kgPiBhYnNYICYmIHkgPD0gMCA/ICd1cCcgOiBvb3BzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGFkZE1vdmVtZW50LFxuICAgIGVuZFRvdWNoLFxuICAgIGdldFZlbG9jaXR5XG4gIH07XG59XG5mdW5jdGlvbiBvb3BzKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvdWNoLm1qcy5tYXAiLCIvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlVmVsb2NpdHkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdG91Y2gubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG9uQmVmb3JlVW5tb3VudCwgb25Nb3VudGVkLCBzaGFsbG93UmVmIH0gZnJvbSAndnVlJztcblxuLy8gVHlwZXNcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRvdWNoKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBpc0FjdGl2ZSxcbiAgICBpc1RlbXBvcmFyeSxcbiAgICB3aWR0aCxcbiAgICB0b3VjaGxlc3MsXG4gICAgcG9zaXRpb25cbiAgfSA9IF9yZWY7XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoc3RhcnQsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Ub3VjaG1vdmUsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaGVuZCwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcbiAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hzdGFydCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2htb3ZlKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoZW5kKTtcbiAgfSk7XG4gIGNvbnN0IGlzSG9yaXpvbnRhbCA9IGNvbXB1dGVkKCgpID0+IFsnbGVmdCcsICdyaWdodCddLmluY2x1ZGVzKHBvc2l0aW9uLnZhbHVlKSk7XG4gIGNvbnN0IHtcbiAgICBhZGRNb3ZlbWVudCxcbiAgICBlbmRUb3VjaCxcbiAgICBnZXRWZWxvY2l0eVxuICB9ID0gdXNlVmVsb2NpdHkoKTtcbiAgbGV0IG1heWJlRHJhZ2dpbmcgPSBmYWxzZTtcbiAgY29uc3QgaXNEcmFnZ2luZyA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICBjb25zdCBkcmFnUHJvZ3Jlc3MgPSBzaGFsbG93UmVmKDApO1xuICBjb25zdCBvZmZzZXQgPSBzaGFsbG93UmVmKDApO1xuICBsZXQgc3RhcnQ7XG4gIGZ1bmN0aW9uIGdldE9mZnNldChwb3MsIGFjdGl2ZSkge1xuICAgIHJldHVybiAocG9zaXRpb24udmFsdWUgPT09ICdsZWZ0JyA/IHBvcyA6IHBvc2l0aW9uLnZhbHVlID09PSAncmlnaHQnID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIC0gcG9zIDogcG9zaXRpb24udmFsdWUgPT09ICd0b3AnID8gcG9zIDogcG9zaXRpb24udmFsdWUgPT09ICdib3R0b20nID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCAtIHBvcyA6IG9vcHMoKSkgLSAoYWN0aXZlID8gd2lkdGgudmFsdWUgOiAwKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRQcm9ncmVzcyhwb3MpIHtcbiAgICBsZXQgbGltaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBwb3NpdGlvbi52YWx1ZSA9PT0gJ2xlZnQnID8gKHBvcyAtIG9mZnNldC52YWx1ZSkgLyB3aWR0aC52YWx1ZSA6IHBvc2l0aW9uLnZhbHVlID09PSAncmlnaHQnID8gKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAtIHBvcyAtIG9mZnNldC52YWx1ZSkgLyB3aWR0aC52YWx1ZSA6IHBvc2l0aW9uLnZhbHVlID09PSAndG9wJyA/IChwb3MgLSBvZmZzZXQudmFsdWUpIC8gd2lkdGgudmFsdWUgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ2JvdHRvbScgPyAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCAtIHBvcyAtIG9mZnNldC52YWx1ZSkgLyB3aWR0aC52YWx1ZSA6IG9vcHMoKTtcbiAgICByZXR1cm4gbGltaXQgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBwcm9ncmVzcykpIDogcHJvZ3Jlc3M7XG4gIH1cbiAgZnVuY3Rpb24gb25Ub3VjaHN0YXJ0KGUpIHtcbiAgICBpZiAodG91Y2hsZXNzLnZhbHVlKSByZXR1cm47XG4gICAgY29uc3QgdG91Y2hYID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYO1xuICAgIGNvbnN0IHRvdWNoWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICBjb25zdCB0b3VjaFpvbmUgPSAyNTtcbiAgICBjb25zdCBpblRvdWNoWm9uZSA9IHBvc2l0aW9uLnZhbHVlID09PSAnbGVmdCcgPyB0b3VjaFggPCB0b3VjaFpvbmUgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ3JpZ2h0JyA/IHRvdWNoWCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAtIHRvdWNoWm9uZSA6IHBvc2l0aW9uLnZhbHVlID09PSAndG9wJyA/IHRvdWNoWSA8IHRvdWNoWm9uZSA6IHBvc2l0aW9uLnZhbHVlID09PSAnYm90dG9tJyA/IHRvdWNoWSA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgLSB0b3VjaFpvbmUgOiBvb3BzKCk7XG4gICAgY29uc3QgaW5FbGVtZW50ID0gaXNBY3RpdmUudmFsdWUgJiYgKHBvc2l0aW9uLnZhbHVlID09PSAnbGVmdCcgPyB0b3VjaFggPCB3aWR0aC52YWx1ZSA6IHBvc2l0aW9uLnZhbHVlID09PSAncmlnaHQnID8gdG91Y2hYID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIC0gd2lkdGgudmFsdWUgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ3RvcCcgPyB0b3VjaFkgPCB3aWR0aC52YWx1ZSA6IHBvc2l0aW9uLnZhbHVlID09PSAnYm90dG9tJyA/IHRvdWNoWSA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgLSB3aWR0aC52YWx1ZSA6IG9vcHMoKSk7XG4gICAgaWYgKGluVG91Y2hab25lIHx8IGluRWxlbWVudCB8fCBpc0FjdGl2ZS52YWx1ZSAmJiBpc1RlbXBvcmFyeS52YWx1ZSkge1xuICAgICAgbWF5YmVEcmFnZ2luZyA9IHRydWU7XG4gICAgICBzdGFydCA9IFt0b3VjaFgsIHRvdWNoWV07XG4gICAgICBvZmZzZXQudmFsdWUgPSBnZXRPZmZzZXQoaXNIb3Jpem9udGFsLnZhbHVlID8gdG91Y2hYIDogdG91Y2hZLCBpc0FjdGl2ZS52YWx1ZSk7XG4gICAgICBkcmFnUHJvZ3Jlc3MudmFsdWUgPSBnZXRQcm9ncmVzcyhpc0hvcml6b250YWwudmFsdWUgPyB0b3VjaFggOiB0b3VjaFkpO1xuICAgICAgZW5kVG91Y2goZSk7XG4gICAgICBhZGRNb3ZlbWVudChlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb25Ub3VjaG1vdmUoZSkge1xuICAgIGNvbnN0IHRvdWNoWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICBjb25zdCB0b3VjaFkgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFk7XG4gICAgaWYgKG1heWJlRHJhZ2dpbmcpIHtcbiAgICAgIGlmICghZS5jYW5jZWxhYmxlKSB7XG4gICAgICAgIG1heWJlRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgZHggPSBNYXRoLmFicyh0b3VjaFggLSBzdGFydFswXSk7XG4gICAgICBjb25zdCBkeSA9IE1hdGguYWJzKHRvdWNoWSAtIHN0YXJ0WzFdKTtcbiAgICAgIGNvbnN0IHRocmVzaG9sZE1ldCA9IGlzSG9yaXpvbnRhbC52YWx1ZSA/IGR4ID4gZHkgJiYgZHggPiAzIDogZHkgPiBkeCAmJiBkeSA+IDM7XG4gICAgICBpZiAodGhyZXNob2xkTWV0KSB7XG4gICAgICAgIGlzRHJhZ2dpbmcudmFsdWUgPSB0cnVlO1xuICAgICAgICBtYXliZURyYWdnaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKChpc0hvcml6b250YWwudmFsdWUgPyBkeSA6IGR4KSA+IDMpIHtcbiAgICAgICAgbWF5YmVEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzRHJhZ2dpbmcudmFsdWUpIHJldHVybjtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgYWRkTW92ZW1lbnQoZSk7XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBnZXRQcm9ncmVzcyhpc0hvcml6b250YWwudmFsdWUgPyB0b3VjaFggOiB0b3VjaFksIGZhbHNlKTtcbiAgICBkcmFnUHJvZ3Jlc3MudmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBwcm9ncmVzcykpO1xuICAgIGlmIChwcm9ncmVzcyA+IDEpIHtcbiAgICAgIG9mZnNldC52YWx1ZSA9IGdldE9mZnNldChpc0hvcml6b250YWwudmFsdWUgPyB0b3VjaFggOiB0b3VjaFksIHRydWUpO1xuICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MgPCAwKSB7XG4gICAgICBvZmZzZXQudmFsdWUgPSBnZXRPZmZzZXQoaXNIb3Jpem9udGFsLnZhbHVlID8gdG91Y2hYIDogdG91Y2hZLCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uVG91Y2hlbmQoZSkge1xuICAgIG1heWJlRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICBpZiAoIWlzRHJhZ2dpbmcudmFsdWUpIHJldHVybjtcbiAgICBhZGRNb3ZlbWVudChlKTtcbiAgICBpc0RyYWdnaW5nLnZhbHVlID0gZmFsc2U7XG4gICAgY29uc3QgdmVsb2NpdHkgPSBnZXRWZWxvY2l0eShlLmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXIpO1xuICAgIGNvbnN0IHZ4ID0gTWF0aC5hYnModmVsb2NpdHkueCk7XG4gICAgY29uc3QgdnkgPSBNYXRoLmFicyh2ZWxvY2l0eS55KTtcbiAgICBjb25zdCB0aHJlc2hvbGRNZXQgPSBpc0hvcml6b250YWwudmFsdWUgPyB2eCA+IHZ5ICYmIHZ4ID4gNDAwIDogdnkgPiB2eCAmJiB2eSA+IDM7XG4gICAgaWYgKHRocmVzaG9sZE1ldCkge1xuICAgICAgaXNBY3RpdmUudmFsdWUgPSB2ZWxvY2l0eS5kaXJlY3Rpb24gPT09ICh7XG4gICAgICAgIGxlZnQ6ICdyaWdodCcsXG4gICAgICAgIHJpZ2h0OiAnbGVmdCcsXG4gICAgICAgIHRvcDogJ2Rvd24nLFxuICAgICAgICBib3R0b206ICd1cCdcbiAgICAgIH1bcG9zaXRpb24udmFsdWVdIHx8IG9vcHMoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzQWN0aXZlLnZhbHVlID0gZHJhZ1Byb2dyZXNzLnZhbHVlID4gMC41O1xuICAgIH1cbiAgfVxuICBjb25zdCBkcmFnU3R5bGVzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBpc0RyYWdnaW5nLnZhbHVlID8ge1xuICAgICAgdHJhbnNmb3JtOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ2xlZnQnID8gYHRyYW5zbGF0ZVgoY2FsYygtMTAwJSArICR7ZHJhZ1Byb2dyZXNzLnZhbHVlICogd2lkdGgudmFsdWV9cHgpKWAgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ3JpZ2h0JyA/IGB0cmFuc2xhdGVYKGNhbGMoMTAwJSAtICR7ZHJhZ1Byb2dyZXNzLnZhbHVlICogd2lkdGgudmFsdWV9cHgpKWAgOiBwb3NpdGlvbi52YWx1ZSA9PT0gJ3RvcCcgPyBgdHJhbnNsYXRlWShjYWxjKC0xMDAlICsgJHtkcmFnUHJvZ3Jlc3MudmFsdWUgKiB3aWR0aC52YWx1ZX1weCkpYCA6IHBvc2l0aW9uLnZhbHVlID09PSAnYm90dG9tJyA/IGB0cmFuc2xhdGVZKGNhbGMoMTAwJSAtICR7ZHJhZ1Byb2dyZXNzLnZhbHVlICogd2lkdGgudmFsdWV9cHgpKWAgOiBvb3BzKCksXG4gICAgICB0cmFuc2l0aW9uOiAnbm9uZSdcbiAgICB9IDogdW5kZWZpbmVkO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBpc0RyYWdnaW5nLFxuICAgIGRyYWdQcm9ncmVzcyxcbiAgICBkcmFnU3R5bGVzXG4gIH07XG59XG5mdW5jdGlvbiBvb3BzKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvdWNoLm1qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIEZyYWdtZW50IGFzIF9GcmFnbWVudCB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WTmF2aWdhdGlvbkRyYXdlci5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZVN0aWNreSB9IGZyb20gXCIuL3N0aWNreS5tanNcIjtcbmltcG9ydCB7IHVzZVRvdWNoIH0gZnJvbSBcIi4vdG91Y2gubWpzXCI7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBtYWtlQm9yZGVyUHJvcHMsIHVzZUJvcmRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9ib3JkZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VCYWNrZ3JvdW5kQ29sb3IgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29sb3IubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiO1xuaW1wb3J0IHsgdXNlRGlzcGxheSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kaXNwbGF5Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUVsZXZhdGlvblByb3BzLCB1c2VFbGV2YXRpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUxheW91dEl0ZW1Qcm9wcywgdXNlTGF5b3V0SXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sYXlvdXQubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdW5kZWRQcm9wcywgdXNlUm91bmRlZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdXRlci5tanNcIjtcbmltcG9ydCB7IHVzZVNjb3BlSWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc2NvcGVJZC5tanNcIjtcbmltcG9ydCB7IHVzZVNzckJvb3QgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc3NyQm9vdC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBuZXh0VGljaywgb25CZWZvcmVNb3VudCwgcmVmLCBzaGFsbG93UmVmLCB0b1JlZiwgVHJhbnNpdGlvbiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB0b1BoeXNpY2FsLCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmNvbnN0IGxvY2F0aW9ucyA9IFsnc3RhcnQnLCAnZW5kJywgJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddO1xuZXhwb3J0IGNvbnN0IG1ha2VWTmF2aWdhdGlvbkRyYXdlclByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgY29sb3I6IFN0cmluZyxcbiAgZGlzYWJsZVJlc2l6ZVdhdGNoZXI6IEJvb2xlYW4sXG4gIGRpc2FibGVSb3V0ZVdhdGNoZXI6IEJvb2xlYW4sXG4gIGV4cGFuZE9uSG92ZXI6IEJvb2xlYW4sXG4gIGZsb2F0aW5nOiBCb29sZWFuLFxuICBtb2RlbFZhbHVlOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBudWxsXG4gIH0sXG4gIHBlcm1hbmVudDogQm9vbGVhbixcbiAgcmFpbDoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICByYWlsV2lkdGg6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDU2XG4gIH0sXG4gIHNjcmltOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ10sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBpbWFnZTogU3RyaW5nLFxuICB0ZW1wb3Jhcnk6IEJvb2xlYW4sXG4gIHRvdWNobGVzczogQm9vbGVhbixcbiAgd2lkdGg6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDI1NlxuICB9LFxuICBsb2NhdGlvbjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnc3RhcnQnLFxuICAgIHZhbGlkYXRvcjogdmFsdWUgPT4gbG9jYXRpb25zLmluY2x1ZGVzKHZhbHVlKVxuICB9LFxuICBzdGlja3k6IEJvb2xlYW4sXG4gIC4uLm1ha2VCb3JkZXJQcm9wcygpLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKCksXG4gIC4uLm1ha2VMYXlvdXRJdGVtUHJvcHMoKSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoe1xuICAgIHRhZzogJ25hdidcbiAgfSksXG4gIC4uLm1ha2VUaGVtZVByb3BzKClcbn0sICdWTmF2aWdhdGlvbkRyYXdlcicpO1xuZXhwb3J0IGNvbnN0IFZOYXZpZ2F0aW9uRHJhd2VyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZOYXZpZ2F0aW9uRHJhd2VyJyxcbiAgcHJvcHM6IG1ha2VWTmF2aWdhdGlvbkRyYXdlclByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWUsXG4gICAgJ3VwZGF0ZTpyYWlsJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnMsXG4gICAgICBlbWl0LFxuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBpc1J0bFxuICAgIH0gPSB1c2VSdGwoKTtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBib3JkZXJDbGFzc2VzXG4gICAgfSA9IHVzZUJvcmRlcihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICAgIGJhY2tncm91bmRDb2xvclN0eWxlc1xuICAgIH0gPSB1c2VCYWNrZ3JvdW5kQ29sb3IodG9SZWYocHJvcHMsICdjb2xvcicpKTtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb25DbGFzc2VzXG4gICAgfSA9IHVzZUVsZXZhdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgbW9iaWxlXG4gICAgfSA9IHVzZURpc3BsYXkoKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzKTtcbiAgICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnLCBudWxsLCB2ID0+ICEhdik7XG4gICAgY29uc3Qge1xuICAgICAgc3NyQm9vdFN0eWxlc1xuICAgIH0gPSB1c2VTc3JCb290KCk7XG4gICAgY29uc3Qge1xuICAgICAgc2NvcGVJZFxuICAgIH0gPSB1c2VTY29wZUlkKCk7XG4gICAgY29uc3Qgcm9vdEVsID0gcmVmKCk7XG4gICAgY29uc3QgaXNIb3ZlcmluZyA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIGNvbnN0IHdpZHRoID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnJhaWwgJiYgcHJvcHMuZXhwYW5kT25Ib3ZlciAmJiBpc0hvdmVyaW5nLnZhbHVlID8gTnVtYmVyKHByb3BzLndpZHRoKSA6IE51bWJlcihwcm9wcy5yYWlsID8gcHJvcHMucmFpbFdpZHRoIDogcHJvcHMud2lkdGgpO1xuICAgIH0pO1xuICAgIGNvbnN0IGxvY2F0aW9uID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHRvUGh5c2ljYWwocHJvcHMubG9jYXRpb24sIGlzUnRsLnZhbHVlKTtcbiAgICB9KTtcbiAgICBjb25zdCBpc1RlbXBvcmFyeSA9IGNvbXB1dGVkKCgpID0+ICFwcm9wcy5wZXJtYW5lbnQgJiYgKG1vYmlsZS52YWx1ZSB8fCBwcm9wcy50ZW1wb3JhcnkpKTtcbiAgICBjb25zdCBpc1N0aWNreSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLnN0aWNreSAmJiAhaXNUZW1wb3JhcnkudmFsdWUgJiYgbG9jYXRpb24udmFsdWUgIT09ICdib3R0b20nKTtcbiAgICBpZiAocHJvcHMuZXhwYW5kT25Ib3ZlciAmJiBwcm9wcy5yYWlsICE9IG51bGwpIHtcbiAgICAgIHdhdGNoKGlzSG92ZXJpbmcsIHZhbCA9PiBlbWl0KCd1cGRhdGU6cmFpbCcsICF2YWwpKTtcbiAgICB9XG4gICAgaWYgKCFwcm9wcy5kaXNhYmxlUmVzaXplV2F0Y2hlcikge1xuICAgICAgd2F0Y2goaXNUZW1wb3JhcnksIHZhbCA9PiAhcHJvcHMucGVybWFuZW50ICYmIG5leHRUaWNrKCgpID0+IGlzQWN0aXZlLnZhbHVlID0gIXZhbCkpO1xuICAgIH1cbiAgICBpZiAoIXByb3BzLmRpc2FibGVSb3V0ZVdhdGNoZXIgJiYgcm91dGVyKSB7XG4gICAgICB3YXRjaChyb3V0ZXIuY3VycmVudFJvdXRlLCAoKSA9PiBpc1RlbXBvcmFyeS52YWx1ZSAmJiAoaXNBY3RpdmUudmFsdWUgPSBmYWxzZSkpO1xuICAgIH1cbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5wZXJtYW5lbnQsIHZhbCA9PiB7XG4gICAgICBpZiAodmFsKSBpc0FjdGl2ZS52YWx1ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgb25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgICBpZiAocHJvcHMubW9kZWxWYWx1ZSAhPSBudWxsIHx8IGlzVGVtcG9yYXJ5LnZhbHVlKSByZXR1cm47XG4gICAgICBpc0FjdGl2ZS52YWx1ZSA9IHByb3BzLnBlcm1hbmVudCB8fCAhbW9iaWxlLnZhbHVlO1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRHJhZ2dpbmcsXG4gICAgICBkcmFnUHJvZ3Jlc3MsXG4gICAgICBkcmFnU3R5bGVzXG4gICAgfSA9IHVzZVRvdWNoKHtcbiAgICAgIGlzQWN0aXZlLFxuICAgICAgaXNUZW1wb3JhcnksXG4gICAgICB3aWR0aCxcbiAgICAgIHRvdWNobGVzczogdG9SZWYocHJvcHMsICd0b3VjaGxlc3MnKSxcbiAgICAgIHBvc2l0aW9uOiBsb2NhdGlvblxuICAgIH0pO1xuICAgIGNvbnN0IGxheW91dFNpemUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBzaXplID0gaXNUZW1wb3JhcnkudmFsdWUgPyAwIDogcHJvcHMucmFpbCAmJiBwcm9wcy5leHBhbmRPbkhvdmVyID8gTnVtYmVyKHByb3BzLnJhaWxXaWR0aCkgOiB3aWR0aC52YWx1ZTtcbiAgICAgIHJldHVybiBpc0RyYWdnaW5nLnZhbHVlID8gc2l6ZSAqIGRyYWdQcm9ncmVzcy52YWx1ZSA6IHNpemU7XG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgbGF5b3V0SXRlbVN0eWxlcyxcbiAgICAgIGxheW91dEl0ZW1TY3JpbVN0eWxlc1xuICAgIH0gPSB1c2VMYXlvdXRJdGVtKHtcbiAgICAgIGlkOiBwcm9wcy5uYW1lLFxuICAgICAgb3JkZXI6IGNvbXB1dGVkKCgpID0+IHBhcnNlSW50KHByb3BzLm9yZGVyLCAxMCkpLFxuICAgICAgcG9zaXRpb246IGxvY2F0aW9uLFxuICAgICAgbGF5b3V0U2l6ZSxcbiAgICAgIGVsZW1lbnRTaXplOiB3aWR0aCxcbiAgICAgIGFjdGl2ZTogY29tcHV0ZWQoKCkgPT4gaXNBY3RpdmUudmFsdWUgfHwgaXNEcmFnZ2luZy52YWx1ZSksXG4gICAgICBkaXNhYmxlVHJhbnNpdGlvbnM6IGNvbXB1dGVkKCgpID0+IGlzRHJhZ2dpbmcudmFsdWUpLFxuICAgICAgYWJzb2x1dGU6IGNvbXB1dGVkKCgpID0+XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICBwcm9wcy5hYnNvbHV0ZSB8fCBpc1N0aWNreS52YWx1ZSAmJiB0eXBlb2YgaXNTdHVjay52YWx1ZSAhPT0gJ3N0cmluZycpXG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgaXNTdHVjayxcbiAgICAgIHN0aWNreVN0eWxlc1xuICAgIH0gPSB1c2VTdGlja3koe1xuICAgICAgcm9vdEVsLFxuICAgICAgaXNTdGlja3ksXG4gICAgICBsYXlvdXRJdGVtU3R5bGVzXG4gICAgfSk7XG4gICAgY29uc3Qgc2NyaW1Db2xvciA9IHVzZUJhY2tncm91bmRDb2xvcihjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gdHlwZW9mIHByb3BzLnNjcmltID09PSAnc3RyaW5nJyA/IHByb3BzLnNjcmltIDogbnVsbDtcbiAgICB9KSk7XG4gICAgY29uc3Qgc2NyaW1TdHlsZXMgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgLi4uKGlzRHJhZ2dpbmcudmFsdWUgPyB7XG4gICAgICAgIG9wYWNpdHk6IGRyYWdQcm9ncmVzcy52YWx1ZSAqIDAuMixcbiAgICAgICAgdHJhbnNpdGlvbjogJ25vbmUnXG4gICAgICB9IDogdW5kZWZpbmVkKSxcbiAgICAgIC4uLmxheW91dEl0ZW1TY3JpbVN0eWxlcy52YWx1ZVxuICAgIH0pKTtcbiAgICBwcm92aWRlRGVmYXVsdHMoe1xuICAgICAgVkxpc3Q6IHtcbiAgICAgICAgYmdDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIG9uTW91c2VlbnRlcigpIHtcbiAgICAgIGlzSG92ZXJpbmcudmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbk1vdXNlbGVhdmUoKSB7XG4gICAgICBpc0hvdmVyaW5nLnZhbHVlID0gZmFsc2U7XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBoYXNJbWFnZSA9IHNsb3RzLmltYWdlIHx8IHByb3BzLmltYWdlO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtfY3JlYXRlVk5vZGUocHJvcHMudGFnLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwicmVmXCI6IHJvb3RFbCxcbiAgICAgICAgXCJvbk1vdXNlZW50ZXJcIjogb25Nb3VzZWVudGVyLFxuICAgICAgICBcIm9uTW91c2VsZWF2ZVwiOiBvbk1vdXNlbGVhdmUsXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LW5hdmlnYXRpb24tZHJhd2VyJywgYHYtbmF2aWdhdGlvbi1kcmF3ZXItLSR7bG9jYXRpb24udmFsdWV9YCwge1xuICAgICAgICAgICd2LW5hdmlnYXRpb24tZHJhd2VyLS1leHBhbmQtb24taG92ZXInOiBwcm9wcy5leHBhbmRPbkhvdmVyLFxuICAgICAgICAgICd2LW5hdmlnYXRpb24tZHJhd2VyLS1mbG9hdGluZyc6IHByb3BzLmZsb2F0aW5nLFxuICAgICAgICAgICd2LW5hdmlnYXRpb24tZHJhd2VyLS1pcy1ob3ZlcmluZyc6IGlzSG92ZXJpbmcudmFsdWUsXG4gICAgICAgICAgJ3YtbmF2aWdhdGlvbi1kcmF3ZXItLXJhaWwnOiBwcm9wcy5yYWlsLFxuICAgICAgICAgICd2LW5hdmlnYXRpb24tZHJhd2VyLS10ZW1wb3JhcnknOiBpc1RlbXBvcmFyeS52YWx1ZSxcbiAgICAgICAgICAndi1uYXZpZ2F0aW9uLWRyYXdlci0tYWN0aXZlJzogaXNBY3RpdmUudmFsdWUsXG4gICAgICAgICAgJ3YtbmF2aWdhdGlvbi1kcmF3ZXItLXN0aWNreSc6IGlzU3RpY2t5LnZhbHVlXG4gICAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgYmFja2dyb3VuZENvbG9yQ2xhc3Nlcy52YWx1ZSwgYm9yZGVyQ2xhc3Nlcy52YWx1ZSwgZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBbYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlLCBsYXlvdXRJdGVtU3R5bGVzLnZhbHVlLCBkcmFnU3R5bGVzLnZhbHVlLCBzc3JCb290U3R5bGVzLnZhbHVlLCBzdGlja3lTdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXVxuICAgICAgfSwgc2NvcGVJZCwgYXR0cnMpLCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtoYXNJbWFnZSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwia2V5XCI6IFwiaW1hZ2VcIixcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1uYXZpZ2F0aW9uLWRyYXdlcl9faW1nXCJcbiAgICAgICAgfSwgW3Nsb3RzLmltYWdlID8gc2xvdHMuaW1hZ2U/Lih7XG4gICAgICAgICAgaW1hZ2U6IHByb3BzLmltYWdlXG4gICAgICAgIH0pIDogX2NyZWF0ZVZOb2RlKFwiaW1nXCIsIHtcbiAgICAgICAgICBcInNyY1wiOiBwcm9wcy5pbWFnZSxcbiAgICAgICAgICBcImFsdFwiOiBcIlwiXG4gICAgICAgIH0sIG51bGwpXSksIHNsb3RzLnByZXBlbmQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1uYXZpZ2F0aW9uLWRyYXdlcl9fcHJlcGVuZFwiXG4gICAgICAgIH0sIFtzbG90cy5wcmVwZW5kPy4oKV0pLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LW5hdmlnYXRpb24tZHJhd2VyX19jb250ZW50XCJcbiAgICAgICAgfSwgW3Nsb3RzLmRlZmF1bHQ/LigpXSksIHNsb3RzLmFwcGVuZCAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LW5hdmlnYXRpb24tZHJhd2VyX19hcHBlbmRcIlxuICAgICAgICB9LCBbc2xvdHMuYXBwZW5kPy4oKV0pXVxuICAgICAgfSksIF9jcmVhdGVWTm9kZShUcmFuc2l0aW9uLCB7XG4gICAgICAgIFwibmFtZVwiOiBcImZhZGUtdHJhbnNpdGlvblwiXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtpc1RlbXBvcmFyeS52YWx1ZSAmJiAoaXNEcmFnZ2luZy52YWx1ZSB8fCBpc0FjdGl2ZS52YWx1ZSkgJiYgISFwcm9wcy5zY3JpbSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgIFwiY2xhc3NcIjogWyd2LW5hdmlnYXRpb24tZHJhd2VyX19zY3JpbScsIHNjcmltQ29sb3IuYmFja2dyb3VuZENvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgICAgXCJzdHlsZVwiOiBbc2NyaW1TdHlsZXMudmFsdWUsIHNjcmltQ29sb3IuYmFja2dyb3VuZENvbG9yU3R5bGVzLnZhbHVlXSxcbiAgICAgICAgICBcIm9uQ2xpY2tcIjogKCkgPT4gaXNBY3RpdmUudmFsdWUgPSBmYWxzZVxuICAgICAgICB9LCBzY29wZUlkKSwgbnVsbCldXG4gICAgICB9KV0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBpc1N0dWNrXG4gICAgfTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WTmF2aWdhdGlvbkRyYXdlci5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZUh5ZHJhdGlvbiB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9oeWRyYXRpb24ubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgVk5vU3NyID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ1ZOb1NzcicsXG4gIHNldHVwKF8sIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBzaG93ID0gdXNlSHlkcmF0aW9uKCk7XG4gICAgcmV0dXJuICgpID0+IHNob3cudmFsdWUgJiYgc2xvdHMuZGVmYXVsdD8uKCk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vk5vU3NyLm1qcy5tYXAiLCIvLyBVdGlsaXRpZXNcbmltcG9ydCB7IG9uQmVmb3JlVXBkYXRlLCByZWYgfSBmcm9tICd2dWUnO1xuXG4vLyBUeXBlc1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVmcygpIHtcbiAgY29uc3QgcmVmcyA9IHJlZihbXSk7XG4gIG9uQmVmb3JlVXBkYXRlKCgpID0+IHJlZnMudmFsdWUgPSBbXSk7XG4gIGZ1bmN0aW9uIHVwZGF0ZVJlZihlLCBpKSB7XG4gICAgcmVmcy52YWx1ZVtpXSA9IGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByZWZzLFxuICAgIHVwZGF0ZVJlZlxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVmcy5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZQYWdpbmF0aW9uLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQnRuIH0gZnJvbSBcIi4uL1ZCdG4vaW5kZXgubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VEaXNwbGF5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZUJvcmRlclByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2JvcmRlci5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBwcm92aWRlRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyBtYWtlRWxldmF0aW9uUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZWxldmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlTG9jYWxlLCB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IHVzZVJlZnMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcmVmcy5tanNcIjtcbmltcG9ydCB7IHVzZVJlc2l6ZU9ic2VydmVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Jlc2l6ZU9ic2VydmVyLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdW5kZWRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNpemVQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zaXplLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVmFyaWFudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3ZhcmlhbnQubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG5leHRUaWNrLCBzaGFsbG93UmVmLCB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjcmVhdGVSYW5nZSwgZ2VuZXJpY0NvbXBvbmVudCwga2V5VmFsdWVzLCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWUGFnaW5hdGlvblByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWN0aXZlQ29sb3I6IFN0cmluZyxcbiAgc3RhcnQ6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDFcbiAgfSxcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiBwcm9wcyA9PiBwcm9wcy5zdGFydFxuICB9LFxuICBkaXNhYmxlZDogQm9vbGVhbixcbiAgbGVuZ3RoOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICBkZWZhdWx0OiAxLFxuICAgIHZhbGlkYXRvcjogdmFsID0+IHZhbCAlIDEgPT09IDBcbiAgfSxcbiAgdG90YWxWaXNpYmxlOiBbTnVtYmVyLCBTdHJpbmddLFxuICBmaXJzdEljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRmaXJzdCdcbiAgfSxcbiAgcHJldkljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRwcmV2J1xuICB9LFxuICBuZXh0SWNvbjoge1xuICAgIHR5cGU6IEljb25WYWx1ZSxcbiAgICBkZWZhdWx0OiAnJG5leHQnXG4gIH0sXG4gIGxhc3RJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckbGFzdCdcbiAgfSxcbiAgYXJpYUxhYmVsOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICckdnVldGlmeS5wYWdpbmF0aW9uLmFyaWFMYWJlbC5yb290J1xuICB9LFxuICBwYWdlQXJpYUxhYmVsOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICckdnVldGlmeS5wYWdpbmF0aW9uLmFyaWFMYWJlbC5wYWdlJ1xuICB9LFxuICBjdXJyZW50UGFnZUFyaWFMYWJlbDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkucGFnaW5hdGlvbi5hcmlhTGFiZWwuY3VycmVudFBhZ2UnXG4gIH0sXG4gIGZpcnN0QXJpYUxhYmVsOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICckdnVldGlmeS5wYWdpbmF0aW9uLmFyaWFMYWJlbC5maXJzdCdcbiAgfSxcbiAgcHJldmlvdXNBcmlhTGFiZWw6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJyR2dWV0aWZ5LnBhZ2luYXRpb24uYXJpYUxhYmVsLnByZXZpb3VzJ1xuICB9LFxuICBuZXh0QXJpYUxhYmVsOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICckdnVldGlmeS5wYWdpbmF0aW9uLmFyaWFMYWJlbC5uZXh0J1xuICB9LFxuICBsYXN0QXJpYUxhYmVsOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICckdnVldGlmeS5wYWdpbmF0aW9uLmFyaWFMYWJlbC5sYXN0J1xuICB9LFxuICBlbGxpcHNpczoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnLi4uJ1xuICB9LFxuICBzaG93Rmlyc3RMYXN0UGFnZTogQm9vbGVhbixcbiAgLi4ubWFrZUJvcmRlclByb3BzKCksXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGVuc2l0eVByb3BzKCksXG4gIC4uLm1ha2VFbGV2YXRpb25Qcm9wcygpLFxuICAuLi5tYWtlUm91bmRlZFByb3BzKCksXG4gIC4uLm1ha2VTaXplUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKHtcbiAgICB0YWc6ICduYXYnXG4gIH0pLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpLFxuICAuLi5tYWtlVmFyaWFudFByb3BzKHtcbiAgICB2YXJpYW50OiAndGV4dCdcbiAgfSlcbn0sICdWUGFnaW5hdGlvbicpO1xuZXhwb3J0IGNvbnN0IFZQYWdpbmF0aW9uID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZQYWdpbmF0aW9uJyxcbiAgcHJvcHM6IG1ha2VWUGFnaW5hdGlvblByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZSxcbiAgICBmaXJzdDogdmFsdWUgPT4gdHJ1ZSxcbiAgICBwcmV2OiB2YWx1ZSA9PiB0cnVlLFxuICAgIG5leHQ6IHZhbHVlID0+IHRydWUsXG4gICAgbGFzdDogdmFsdWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90cyxcbiAgICAgIGVtaXRcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBwYWdlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHtcbiAgICAgIHQsXG4gICAgICBuXG4gICAgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzUnRsXG4gICAgfSA9IHVzZVJ0bCgpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoXG4gICAgfSA9IHVzZURpc3BsYXkoKTtcbiAgICBjb25zdCBtYXhCdXR0b25zID0gc2hhbGxvd1JlZigtMSk7XG4gICAgcHJvdmlkZURlZmF1bHRzKHVuZGVmaW5lZCwge1xuICAgICAgc2NvcGVkOiB0cnVlXG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgcmVzaXplUmVmXG4gICAgfSA9IHVzZVJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgaWYgKCFlbnRyaWVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgY29uc3Qge1xuICAgICAgICB0YXJnZXQsXG4gICAgICAgIGNvbnRlbnRSZWN0XG4gICAgICB9ID0gZW50cmllc1swXTtcbiAgICAgIGNvbnN0IGZpcnN0SXRlbSA9IHRhcmdldC5xdWVyeVNlbGVjdG9yKCcudi1wYWdpbmF0aW9uX19saXN0ID4gKicpO1xuICAgICAgaWYgKCFmaXJzdEl0ZW0pIHJldHVybjtcbiAgICAgIGNvbnN0IHRvdGFsV2lkdGggPSBjb250ZW50UmVjdC53aWR0aDtcbiAgICAgIGNvbnN0IGl0ZW1XaWR0aCA9IGZpcnN0SXRlbS5vZmZzZXRXaWR0aCArIHBhcnNlRmxvYXQoZ2V0Q29tcHV0ZWRTdHlsZShmaXJzdEl0ZW0pLm1hcmdpblJpZ2h0KSAqIDI7XG4gICAgICBtYXhCdXR0b25zLnZhbHVlID0gZ2V0TWF4KHRvdGFsV2lkdGgsIGl0ZW1XaWR0aCk7XG4gICAgfSk7XG4gICAgY29uc3QgbGVuZ3RoID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VJbnQocHJvcHMubGVuZ3RoLCAxMCkpO1xuICAgIGNvbnN0IHN0YXJ0ID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VJbnQocHJvcHMuc3RhcnQsIDEwKSk7XG4gICAgY29uc3QgdG90YWxWaXNpYmxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLnRvdGFsVmlzaWJsZSkgcmV0dXJuIHBhcnNlSW50KHByb3BzLnRvdGFsVmlzaWJsZSwgMTApO2Vsc2UgaWYgKG1heEJ1dHRvbnMudmFsdWUgPj0gMCkgcmV0dXJuIG1heEJ1dHRvbnMudmFsdWU7XG4gICAgICByZXR1cm4gZ2V0TWF4KHdpZHRoLnZhbHVlLCA1OCk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZ2V0TWF4KHRvdGFsV2lkdGgsIGl0ZW1XaWR0aCkge1xuICAgICAgY29uc3QgbWluQnV0dG9ucyA9IHByb3BzLnNob3dGaXJzdExhc3RQYWdlID8gNSA6IDM7XG4gICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcihcbiAgICAgIC8vIFJvdW5kIHRvIHR3byBkZWNpbWFsIHBsYWNlcyB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnNcbiAgICAgICsoKHRvdGFsV2lkdGggLSBpdGVtV2lkdGggKiBtaW5CdXR0b25zKSAvIGl0ZW1XaWR0aCkudG9GaXhlZCgyKSkpO1xuICAgIH1cbiAgICBjb25zdCByYW5nZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChsZW5ndGgudmFsdWUgPD0gMCB8fCBpc05hTihsZW5ndGgudmFsdWUpIHx8IGxlbmd0aC52YWx1ZSA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSByZXR1cm4gW107XG4gICAgICBpZiAodG90YWxWaXNpYmxlLnZhbHVlIDw9IDEpIHJldHVybiBbcGFnZS52YWx1ZV07XG4gICAgICBpZiAobGVuZ3RoLnZhbHVlIDw9IHRvdGFsVmlzaWJsZS52YWx1ZSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlUmFuZ2UobGVuZ3RoLnZhbHVlLCBzdGFydC52YWx1ZSk7XG4gICAgICB9XG4gICAgICBjb25zdCBldmVuID0gdG90YWxWaXNpYmxlLnZhbHVlICUgMiA9PT0gMDtcbiAgICAgIGNvbnN0IG1pZGRsZSA9IGV2ZW4gPyB0b3RhbFZpc2libGUudmFsdWUgLyAyIDogTWF0aC5mbG9vcih0b3RhbFZpc2libGUudmFsdWUgLyAyKTtcbiAgICAgIGNvbnN0IGxlZnQgPSBldmVuID8gbWlkZGxlIDogbWlkZGxlICsgMTtcbiAgICAgIGNvbnN0IHJpZ2h0ID0gbGVuZ3RoLnZhbHVlIC0gbWlkZGxlO1xuICAgICAgaWYgKGxlZnQgLSBwYWdlLnZhbHVlID49IDApIHtcbiAgICAgICAgcmV0dXJuIFsuLi5jcmVhdGVSYW5nZShNYXRoLm1heCgxLCB0b3RhbFZpc2libGUudmFsdWUgLSAxKSwgc3RhcnQudmFsdWUpLCBwcm9wcy5lbGxpcHNpcywgbGVuZ3RoLnZhbHVlXTtcbiAgICAgIH0gZWxzZSBpZiAocGFnZS52YWx1ZSAtIHJpZ2h0ID49IChldmVuID8gMSA6IDApKSB7XG4gICAgICAgIGNvbnN0IHJhbmdlTGVuZ3RoID0gdG90YWxWaXNpYmxlLnZhbHVlIC0gMTtcbiAgICAgICAgY29uc3QgcmFuZ2VTdGFydCA9IGxlbmd0aC52YWx1ZSAtIHJhbmdlTGVuZ3RoICsgc3RhcnQudmFsdWU7XG4gICAgICAgIHJldHVybiBbc3RhcnQudmFsdWUsIHByb3BzLmVsbGlwc2lzLCAuLi5jcmVhdGVSYW5nZShyYW5nZUxlbmd0aCwgcmFuZ2VTdGFydCldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcmFuZ2VMZW5ndGggPSBNYXRoLm1heCgxLCB0b3RhbFZpc2libGUudmFsdWUgLSAzKTtcbiAgICAgICAgY29uc3QgcmFuZ2VTdGFydCA9IHJhbmdlTGVuZ3RoID09PSAxID8gcGFnZS52YWx1ZSA6IHBhZ2UudmFsdWUgLSBNYXRoLmNlaWwocmFuZ2VMZW5ndGggLyAyKSArIHN0YXJ0LnZhbHVlO1xuICAgICAgICByZXR1cm4gW3N0YXJ0LnZhbHVlLCBwcm9wcy5lbGxpcHNpcywgLi4uY3JlYXRlUmFuZ2UocmFuZ2VMZW5ndGgsIHJhbmdlU3RhcnQpLCBwcm9wcy5lbGxpcHNpcywgbGVuZ3RoLnZhbHVlXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRPRE86ICdmaXJzdCcgfCAncHJldicgfCAnbmV4dCcgfCAnbGFzdCcgZG9lcyBub3Qgd29yayBoZXJlP1xuICAgIGZ1bmN0aW9uIHNldFZhbHVlKGUsIHZhbHVlLCBldmVudCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcGFnZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgZXZlbnQgJiYgZW1pdChldmVudCwgdmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICByZWZzLFxuICAgICAgdXBkYXRlUmVmXG4gICAgfSA9IHVzZVJlZnMoKTtcbiAgICBwcm92aWRlRGVmYXVsdHMoe1xuICAgICAgVlBhZ2luYXRpb25CdG46IHtcbiAgICAgICAgY29sb3I6IHRvUmVmKHByb3BzLCAnY29sb3InKSxcbiAgICAgICAgYm9yZGVyOiB0b1JlZihwcm9wcywgJ2JvcmRlcicpLFxuICAgICAgICBkZW5zaXR5OiB0b1JlZihwcm9wcywgJ2RlbnNpdHknKSxcbiAgICAgICAgc2l6ZTogdG9SZWYocHJvcHMsICdzaXplJyksXG4gICAgICAgIHZhcmlhbnQ6IHRvUmVmKHByb3BzLCAndmFyaWFudCcpLFxuICAgICAgICByb3VuZGVkOiB0b1JlZihwcm9wcywgJ3JvdW5kZWQnKSxcbiAgICAgICAgZWxldmF0aW9uOiB0b1JlZihwcm9wcywgJ2VsZXZhdGlvbicpXG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgaXRlbXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcmFuZ2UudmFsdWUubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCByZWYgPSBlID0+IHVwZGF0ZVJlZihlLCBpbmRleCk7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNBY3RpdmU6IGZhbHNlLFxuICAgICAgICAgICAga2V5OiBgZWxsaXBzaXMtJHtpbmRleH1gLFxuICAgICAgICAgICAgcGFnZTogaXRlbSxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgIHJlZixcbiAgICAgICAgICAgICAgZWxsaXBzaXM6IHRydWUsXG4gICAgICAgICAgICAgIGljb246IHRydWUsXG4gICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBpc0FjdGl2ZSA9IGl0ZW0gPT09IHBhZ2UudmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzQWN0aXZlLFxuICAgICAgICAgICAga2V5OiBpdGVtLFxuICAgICAgICAgICAgcGFnZTogbihpdGVtKSxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgIHJlZixcbiAgICAgICAgICAgICAgZWxsaXBzaXM6IGZhbHNlLFxuICAgICAgICAgICAgICBpY29uOiB0cnVlLFxuICAgICAgICAgICAgICBkaXNhYmxlZDogISFwcm9wcy5kaXNhYmxlZCB8fCArcHJvcHMubGVuZ3RoIDwgMixcbiAgICAgICAgICAgICAgY29sb3I6IGlzQWN0aXZlID8gcHJvcHMuYWN0aXZlQ29sb3IgOiBwcm9wcy5jb2xvcixcbiAgICAgICAgICAgICAgYXJpYUN1cnJlbnQ6IGlzQWN0aXZlLFxuICAgICAgICAgICAgICBhcmlhTGFiZWw6IHQoaXNBY3RpdmUgPyBwcm9wcy5jdXJyZW50UGFnZUFyaWFMYWJlbCA6IHByb3BzLnBhZ2VBcmlhTGFiZWwsIGl0ZW0pLFxuICAgICAgICAgICAgICBvbkNsaWNrOiBlID0+IHNldFZhbHVlKGUsIGl0ZW0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY29uc3QgY29udHJvbHMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBwcmV2RGlzYWJsZWQgPSAhIXByb3BzLmRpc2FibGVkIHx8IHBhZ2UudmFsdWUgPD0gc3RhcnQudmFsdWU7XG4gICAgICBjb25zdCBuZXh0RGlzYWJsZWQgPSAhIXByb3BzLmRpc2FibGVkIHx8IHBhZ2UudmFsdWUgPj0gc3RhcnQudmFsdWUgKyBsZW5ndGgudmFsdWUgLSAxO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlyc3Q6IHByb3BzLnNob3dGaXJzdExhc3RQYWdlID8ge1xuICAgICAgICAgIGljb246IGlzUnRsLnZhbHVlID8gcHJvcHMubGFzdEljb24gOiBwcm9wcy5maXJzdEljb24sXG4gICAgICAgICAgb25DbGljazogZSA9PiBzZXRWYWx1ZShlLCBzdGFydC52YWx1ZSwgJ2ZpcnN0JyksXG4gICAgICAgICAgZGlzYWJsZWQ6IHByZXZEaXNhYmxlZCxcbiAgICAgICAgICBhcmlhTGFiZWw6IHQocHJvcHMuZmlyc3RBcmlhTGFiZWwpLFxuICAgICAgICAgIGFyaWFEaXNhYmxlZDogcHJldkRpc2FibGVkXG4gICAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICAgIHByZXY6IHtcbiAgICAgICAgICBpY29uOiBpc1J0bC52YWx1ZSA/IHByb3BzLm5leHRJY29uIDogcHJvcHMucHJldkljb24sXG4gICAgICAgICAgb25DbGljazogZSA9PiBzZXRWYWx1ZShlLCBwYWdlLnZhbHVlIC0gMSwgJ3ByZXYnKSxcbiAgICAgICAgICBkaXNhYmxlZDogcHJldkRpc2FibGVkLFxuICAgICAgICAgIGFyaWFMYWJlbDogdChwcm9wcy5wcmV2aW91c0FyaWFMYWJlbCksXG4gICAgICAgICAgYXJpYURpc2FibGVkOiBwcmV2RGlzYWJsZWRcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDoge1xuICAgICAgICAgIGljb246IGlzUnRsLnZhbHVlID8gcHJvcHMucHJldkljb24gOiBwcm9wcy5uZXh0SWNvbixcbiAgICAgICAgICBvbkNsaWNrOiBlID0+IHNldFZhbHVlKGUsIHBhZ2UudmFsdWUgKyAxLCAnbmV4dCcpLFxuICAgICAgICAgIGRpc2FibGVkOiBuZXh0RGlzYWJsZWQsXG4gICAgICAgICAgYXJpYUxhYmVsOiB0KHByb3BzLm5leHRBcmlhTGFiZWwpLFxuICAgICAgICAgIGFyaWFEaXNhYmxlZDogbmV4dERpc2FibGVkXG4gICAgICAgIH0sXG4gICAgICAgIGxhc3Q6IHByb3BzLnNob3dGaXJzdExhc3RQYWdlID8ge1xuICAgICAgICAgIGljb246IGlzUnRsLnZhbHVlID8gcHJvcHMuZmlyc3RJY29uIDogcHJvcHMubGFzdEljb24sXG4gICAgICAgICAgb25DbGljazogZSA9PiBzZXRWYWx1ZShlLCBzdGFydC52YWx1ZSArIGxlbmd0aC52YWx1ZSAtIDEsICdsYXN0JyksXG4gICAgICAgICAgZGlzYWJsZWQ6IG5leHREaXNhYmxlZCxcbiAgICAgICAgICBhcmlhTGFiZWw6IHQocHJvcHMubGFzdEFyaWFMYWJlbCksXG4gICAgICAgICAgYXJpYURpc2FibGVkOiBuZXh0RGlzYWJsZWRcbiAgICAgICAgfSA6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiB1cGRhdGVGb2N1cygpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHBhZ2UudmFsdWUgLSBzdGFydC52YWx1ZTtcbiAgICAgIHJlZnMudmFsdWVbY3VycmVudEluZGV4XT8uJGVsLmZvY3VzKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uS2V5ZG93bihlKSB7XG4gICAgICBpZiAoZS5rZXkgPT09IGtleVZhbHVlcy5sZWZ0ICYmICFwcm9wcy5kaXNhYmxlZCAmJiBwYWdlLnZhbHVlID4gK3Byb3BzLnN0YXJ0KSB7XG4gICAgICAgIHBhZ2UudmFsdWUgPSBwYWdlLnZhbHVlIC0gMTtcbiAgICAgICAgbmV4dFRpY2sodXBkYXRlRm9jdXMpO1xuICAgICAgfSBlbHNlIGlmIChlLmtleSA9PT0ga2V5VmFsdWVzLnJpZ2h0ICYmICFwcm9wcy5kaXNhYmxlZCAmJiBwYWdlLnZhbHVlIDwgc3RhcnQudmFsdWUgKyBsZW5ndGgudmFsdWUgLSAxKSB7XG4gICAgICAgIHBhZ2UudmFsdWUgPSBwYWdlLnZhbHVlICsgMTtcbiAgICAgICAgbmV4dFRpY2sodXBkYXRlRm9jdXMpO1xuICAgICAgfVxuICAgIH1cbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJyZWZcIjogcmVzaXplUmVmLFxuICAgICAgXCJjbGFzc1wiOiBbJ3YtcGFnaW5hdGlvbicsIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZSxcbiAgICAgIFwicm9sZVwiOiBcIm5hdmlnYXRpb25cIixcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiB0KHByb3BzLmFyaWFMYWJlbCksXG4gICAgICBcIm9uS2V5ZG93blwiOiBvbktleWRvd24sXG4gICAgICBcImRhdGEtdGVzdFwiOiBcInYtcGFnaW5hdGlvbi1yb290XCJcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiAoKSA9PiBbX2NyZWF0ZVZOb2RlKFwidWxcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwidi1wYWdpbmF0aW9uX19saXN0XCJcbiAgICAgIH0sIFtwcm9wcy5zaG93Rmlyc3RMYXN0UGFnZSAmJiBfY3JlYXRlVk5vZGUoXCJsaVwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwiZmlyc3RcIixcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtcGFnaW5hdGlvbl9fZmlyc3RcIixcbiAgICAgICAgXCJkYXRhLXRlc3RcIjogXCJ2LXBhZ2luYXRpb24tZmlyc3RcIlxuICAgICAgfSwgW3Nsb3RzLmZpcnN0ID8gc2xvdHMuZmlyc3QoY29udHJvbHMudmFsdWUuZmlyc3QpIDogX2NyZWF0ZVZOb2RlKFZCdG4sIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJfYXNcIjogXCJWUGFnaW5hdGlvbkJ0blwiXG4gICAgICB9LCBjb250cm9scy52YWx1ZS5maXJzdCksIG51bGwpXSksIF9jcmVhdGVWTm9kZShcImxpXCIsIHtcbiAgICAgICAgXCJrZXlcIjogXCJwcmV2XCIsXG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LXBhZ2luYXRpb25fX3ByZXZcIixcbiAgICAgICAgXCJkYXRhLXRlc3RcIjogXCJ2LXBhZ2luYXRpb24tcHJldlwiXG4gICAgICB9LCBbc2xvdHMucHJldiA/IHNsb3RzLnByZXYoY29udHJvbHMudmFsdWUucHJldikgOiBfY3JlYXRlVk5vZGUoVkJ0biwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcIl9hc1wiOiBcIlZQYWdpbmF0aW9uQnRuXCJcbiAgICAgIH0sIGNvbnRyb2xzLnZhbHVlLnByZXYpLCBudWxsKV0pLCBpdGVtcy52YWx1ZS5tYXAoKGl0ZW0sIGluZGV4KSA9PiBfY3JlYXRlVk5vZGUoXCJsaVwiLCB7XG4gICAgICAgIFwia2V5XCI6IGl0ZW0ua2V5LFxuICAgICAgICBcImNsYXNzXCI6IFsndi1wYWdpbmF0aW9uX19pdGVtJywge1xuICAgICAgICAgICd2LXBhZ2luYXRpb25fX2l0ZW0tLWlzLWFjdGl2ZSc6IGl0ZW0uaXNBY3RpdmVcbiAgICAgICAgfV0sXG4gICAgICAgIFwiZGF0YS10ZXN0XCI6IFwidi1wYWdpbmF0aW9uLWl0ZW1cIlxuICAgICAgfSwgW3Nsb3RzLml0ZW0gPyBzbG90cy5pdGVtKGl0ZW0pIDogX2NyZWF0ZVZOb2RlKFZCdG4sIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJfYXNcIjogXCJWUGFnaW5hdGlvbkJ0blwiXG4gICAgICB9LCBpdGVtLnByb3BzKSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbaXRlbS5wYWdlXVxuICAgICAgfSldKSksIF9jcmVhdGVWTm9kZShcImxpXCIsIHtcbiAgICAgICAgXCJrZXlcIjogXCJuZXh0XCIsXG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LXBhZ2luYXRpb25fX25leHRcIixcbiAgICAgICAgXCJkYXRhLXRlc3RcIjogXCJ2LXBhZ2luYXRpb24tbmV4dFwiXG4gICAgICB9LCBbc2xvdHMubmV4dCA/IHNsb3RzLm5leHQoY29udHJvbHMudmFsdWUubmV4dCkgOiBfY3JlYXRlVk5vZGUoVkJ0biwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcIl9hc1wiOiBcIlZQYWdpbmF0aW9uQnRuXCJcbiAgICAgIH0sIGNvbnRyb2xzLnZhbHVlLm5leHQpLCBudWxsKV0pLCBwcm9wcy5zaG93Rmlyc3RMYXN0UGFnZSAmJiBfY3JlYXRlVk5vZGUoXCJsaVwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwibGFzdFwiLFxuICAgICAgICBcImNsYXNzXCI6IFwidi1wYWdpbmF0aW9uX19sYXN0XCIsXG4gICAgICAgIFwiZGF0YS10ZXN0XCI6IFwidi1wYWdpbmF0aW9uLWxhc3RcIlxuICAgICAgfSwgW3Nsb3RzLmxhc3QgPyBzbG90cy5sYXN0KGNvbnRyb2xzLnZhbHVlLmxhc3QpIDogX2NyZWF0ZVZOb2RlKFZCdG4sIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJfYXNcIjogXCJWUGFnaW5hdGlvbkJ0blwiXG4gICAgICB9LCBjb250cm9scy52YWx1ZS5sYXN0KSwgbnVsbCldKV0pXVxuICAgIH0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlBhZ2luYXRpb24ubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WUGFyYWxsYXguY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZJbWcgfSBmcm9tIFwiLi4vVkltZy9pbmRleC5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IHVzZURpc3BsYXkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaW50ZXJzZWN0aW9uT2JzZXJ2ZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VSZXNpemVPYnNlcnZlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yZXNpemVPYnNlcnZlci5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCwgb25CZWZvcmVVbm1vdW50LCByZWYsIHdhdGNoLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjbGFtcCwgZ2VuZXJpY0NvbXBvbmVudCwgZ2V0U2Nyb2xsUGFyZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZnVuY3Rpb24gZmxvb3IodmFsKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGguYWJzKHZhbCkpICogTWF0aC5zaWduKHZhbCk7XG59XG5leHBvcnQgY29uc3QgbWFrZVZQYXJhbGxheFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgc2NhbGU6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDAuNVxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKVxufSwgJ1ZQYXJhbGxheCcpO1xuZXhwb3J0IGNvbnN0IFZQYXJhbGxheCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWUGFyYWxsYXgnLFxuICBwcm9wczogbWFrZVZQYXJhbGxheFByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgaW50ZXJzZWN0aW9uUmVmLFxuICAgICAgaXNJbnRlcnNlY3RpbmdcbiAgICB9ID0gdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKTtcbiAgICBjb25zdCB7XG4gICAgICByZXNpemVSZWYsXG4gICAgICBjb250ZW50UmVjdFxuICAgIH0gPSB1c2VSZXNpemVPYnNlcnZlcigpO1xuICAgIGNvbnN0IHtcbiAgICAgIGhlaWdodDogZGlzcGxheUhlaWdodFxuICAgIH0gPSB1c2VEaXNwbGF5KCk7XG4gICAgY29uc3Qgcm9vdCA9IHJlZigpO1xuICAgIHdhdGNoRWZmZWN0KCgpID0+IHtcbiAgICAgIGludGVyc2VjdGlvblJlZi52YWx1ZSA9IHJlc2l6ZVJlZi52YWx1ZSA9IHJvb3QudmFsdWU/LiRlbDtcbiAgICB9KTtcbiAgICBsZXQgc2Nyb2xsUGFyZW50O1xuICAgIHdhdGNoKGlzSW50ZXJzZWN0aW5nLCB2YWwgPT4ge1xuICAgICAgaWYgKHZhbCkge1xuICAgICAgICBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoaW50ZXJzZWN0aW9uUmVmLnZhbHVlKTtcbiAgICAgICAgc2Nyb2xsUGFyZW50ID0gc2Nyb2xsUGFyZW50ID09PSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50ID8gZG9jdW1lbnQgOiBzY3JvbGxQYXJlbnQ7XG4gICAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbCwge1xuICAgICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIG9uU2Nyb2xsKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBzY3JvbGxQYXJlbnQ/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsKTtcbiAgICB9KTtcbiAgICB3YXRjaChkaXNwbGF5SGVpZ2h0LCBvblNjcm9sbCk7XG4gICAgd2F0Y2goKCkgPT4gY29udGVudFJlY3QudmFsdWU/LmhlaWdodCwgb25TY3JvbGwpO1xuICAgIGNvbnN0IHNjYWxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIDEgLSBjbGFtcCgrcHJvcHMuc2NhbGUpO1xuICAgIH0pO1xuICAgIGxldCBmcmFtZSA9IC0xO1xuICAgIGZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICAgICAgaWYgKCFpc0ludGVyc2VjdGluZy52YWx1ZSkgcmV0dXJuO1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWUpO1xuICAgICAgZnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IChyb290LnZhbHVlPy4kZWwpLnF1ZXJ5U2VsZWN0b3IoJy52LWltZ19faW1nJyk7XG4gICAgICAgIGlmICghZWwpIHJldHVybjtcbiAgICAgICAgY29uc3Qgc2Nyb2xsSGVpZ2h0ID0gc2Nyb2xsUGFyZW50IGluc3RhbmNlb2YgRG9jdW1lbnQgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IDogc2Nyb2xsUGFyZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgY29uc3Qgc2Nyb2xsUG9zID0gc2Nyb2xsUGFyZW50IGluc3RhbmNlb2YgRG9jdW1lbnQgPyB3aW5kb3cuc2Nyb2xsWSA6IHNjcm9sbFBhcmVudC5zY3JvbGxUb3A7XG4gICAgICAgIGNvbnN0IHRvcCA9IGludGVyc2VjdGlvblJlZi52YWx1ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBzY3JvbGxQb3M7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGNvbnRlbnRSZWN0LnZhbHVlLmhlaWdodDtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdG9wICsgKGhlaWdodCAtIHNjcm9sbEhlaWdodCkgLyAyO1xuICAgICAgICBjb25zdCB0cmFuc2xhdGUgPSBmbG9vcigoc2Nyb2xsUG9zIC0gY2VudGVyKSAqIHNjYWxlLnZhbHVlKTtcbiAgICAgICAgY29uc3Qgc2l6ZVNjYWxlID0gTWF0aC5tYXgoMSwgKHNjYWxlLnZhbHVlICogKHNjcm9sbEhlaWdodCAtIGhlaWdodCkgKyBoZWlnaHQpIC8gaGVpZ2h0KTtcbiAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGVZKCR7dHJhbnNsYXRlfXB4KSBzY2FsZSgke3NpemVTY2FsZX0pYCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShWSW1nLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1wYXJhbGxheCcsIHtcbiAgICAgICAgJ3YtcGFyYWxsYXgtLWFjdGl2ZSc6IGlzSW50ZXJzZWN0aW5nLnZhbHVlXG4gICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlLFxuICAgICAgXCJyZWZcIjogcm9vdCxcbiAgICAgIFwiY292ZXJcIjogdHJ1ZSxcbiAgICAgIFwib25Mb2Fkc3RhcnRcIjogb25TY3JvbGwsXG4gICAgICBcIm9uTG9hZFwiOiBvblNjcm9sbFxuICAgIH0sIHNsb3RzKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZQYXJhbGxheC5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgbWFrZVZTZWxlY3Rpb25Db250cm9sUHJvcHMsIFZTZWxlY3Rpb25Db250cm9sIH0gZnJvbSBcIi4uL1ZTZWxlY3Rpb25Db250cm9sL1ZTZWxlY3Rpb25Db250cm9sLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZSYWRpb1Byb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgLi4ubWFrZVZTZWxlY3Rpb25Db250cm9sUHJvcHMoe1xuICAgIGZhbHNlSWNvbjogJyRyYWRpb09mZicsXG4gICAgdHJ1ZUljb246ICckcmFkaW9PbidcbiAgfSlcbn0sICdWUmFkaW8nKTtcbmV4cG9ydCBjb25zdCBWUmFkaW8gPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlJhZGlvJyxcbiAgcHJvcHM6IG1ha2VWUmFkaW9Qcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoVlNlbGVjdGlvbkNvbnRyb2wsIF9tZXJnZVByb3BzKHByb3BzLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1yYWRpbycsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGUsXG4gICAgICBcInR5cGVcIjogXCJyYWRpb1wiXG4gICAgfSksIHNsb3RzKSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZSYWRpby5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlJhZGlvR3JvdXAuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IG1ha2VWSW5wdXRQcm9wcywgVklucHV0IH0gZnJvbSBcIi4uL1ZJbnB1dC9WSW5wdXQubWpzXCI7XG5pbXBvcnQgeyBWTGFiZWwgfSBmcm9tIFwiLi4vVkxhYmVsL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVlNlbGVjdGlvbkNvbnRyb2wgfSBmcm9tIFwiLi4vVlNlbGVjdGlvbkNvbnRyb2wvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBtYWtlU2VsZWN0aW9uQ29udHJvbEdyb3VwUHJvcHMsIFZTZWxlY3Rpb25Db250cm9sR3JvdXAgfSBmcm9tIFwiLi4vVlNlbGVjdGlvbkNvbnRyb2xHcm91cC9WU2VsZWN0aW9uQ29udHJvbEdyb3VwLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgSWNvblZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ljb25zLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBmaWx0ZXJJbnB1dEF0dHJzLCBnZW5lcmljQ29tcG9uZW50LCBnZXRVaWQsIG9taXQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZSYWRpb0dyb3VwUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBoZWlnaHQ6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6ICdhdXRvJ1xuICB9LFxuICAuLi5tYWtlVklucHV0UHJvcHMoKSxcbiAgLi4ub21pdChtYWtlU2VsZWN0aW9uQ29udHJvbEdyb3VwUHJvcHMoKSwgWydtdWx0aXBsZSddKSxcbiAgdHJ1ZUljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRyYWRpb09uJ1xuICB9LFxuICBmYWxzZUljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRyYWRpb09mZidcbiAgfSxcbiAgdHlwZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAncmFkaW8nXG4gIH1cbn0sICdWUmFkaW9Hcm91cCcpO1xuZXhwb3J0IGNvbnN0IFZSYWRpb0dyb3VwID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZSYWRpb0dyb3VwJyxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IG1ha2VWUmFkaW9Hcm91cFByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnMsXG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHVpZCA9IGdldFVpZCgpO1xuICAgIGNvbnN0IGlkID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuaWQgfHwgYHJhZGlvLWdyb3VwLSR7dWlkfWApO1xuICAgIGNvbnN0IG1vZGVsID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBbcm9vdEF0dHJzLCBjb250cm9sQXR0cnNdID0gZmlsdGVySW5wdXRBdHRycyhhdHRycyk7XG4gICAgICBjb25zdCBbaW5wdXRQcm9wcywgXzFdID0gVklucHV0LmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIGNvbnN0IFtjb250cm9sUHJvcHMsIF8yXSA9IFZTZWxlY3Rpb25Db250cm9sLmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIGNvbnN0IGxhYmVsID0gc2xvdHMubGFiZWwgPyBzbG90cy5sYWJlbCh7XG4gICAgICAgIGxhYmVsOiBwcm9wcy5sYWJlbCxcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICBmb3I6IGlkLnZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0pIDogcHJvcHMubGFiZWw7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZJbnB1dCwgX21lcmdlUHJvcHMoe1xuICAgICAgICBcImNsYXNzXCI6IFsndi1yYWRpby1ncm91cCcsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSwgcm9vdEF0dHJzLCBpbnB1dFByb3BzLCB7XG4gICAgICAgIFwibW9kZWxWYWx1ZVwiOiBtb2RlbC52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBtb2RlbC52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgXCJpZFwiOiBpZC52YWx1ZVxuICAgICAgfSksIHtcbiAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgIGRlZmF1bHQ6IF9yZWYyID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBtZXNzYWdlc0lkLFxuICAgICAgICAgICAgaXNEaXNhYmxlZCxcbiAgICAgICAgICAgIGlzUmVhZG9ubHlcbiAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtsYWJlbCAmJiBfY3JlYXRlVk5vZGUoVkxhYmVsLCB7XG4gICAgICAgICAgICBcImlkXCI6IGlkLnZhbHVlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW2xhYmVsXVxuICAgICAgICAgIH0pLCBfY3JlYXRlVk5vZGUoVlNlbGVjdGlvbkNvbnRyb2xHcm91cCwgX21lcmdlUHJvcHMoY29udHJvbFByb3BzLCB7XG4gICAgICAgICAgICBcImlkXCI6IGlkLnZhbHVlLFxuICAgICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IG1lc3NhZ2VzSWQudmFsdWUsXG4gICAgICAgICAgICBcImRlZmF1bHRzVGFyZ2V0XCI6IFwiVlJhZGlvXCIsXG4gICAgICAgICAgICBcInRydWVJY29uXCI6IHByb3BzLnRydWVJY29uLFxuICAgICAgICAgICAgXCJmYWxzZUljb25cIjogcHJvcHMuZmFsc2VJY29uLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IHByb3BzLnR5cGUsXG4gICAgICAgICAgICBcImRpc2FibGVkXCI6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICAgICAgICBcInJlYWRvbmx5XCI6IGlzUmVhZG9ubHkudmFsdWUsXG4gICAgICAgICAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBsYWJlbCA/IGlkLnZhbHVlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgXCJtdWx0aXBsZVwiOiBmYWxzZVxuICAgICAgICAgIH0sIGNvbnRyb2xBdHRycywge1xuICAgICAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBtb2RlbC52YWx1ZSA9ICRldmVudFxuICAgICAgICAgIH0pLCBzbG90cyldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZSYWRpb0dyb3VwLm1qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIEZyYWdtZW50IGFzIF9GcmFnbWVudCB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi4vVlNsaWRlci9WU2xpZGVyLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBtYWtlVklucHV0UHJvcHMsIFZJbnB1dCB9IGZyb20gXCIuLi9WSW5wdXQvVklucHV0Lm1qc1wiO1xuaW1wb3J0IHsgVkxhYmVsIH0gZnJvbSBcIi4uL1ZMYWJlbC9pbmRleC5tanNcIjtcbmltcG9ydCB7IGdldE9mZnNldCwgbWFrZVNsaWRlclByb3BzLCB1c2VTbGlkZXIsIHVzZVN0ZXBzIH0gZnJvbSBcIi4uL1ZTbGlkZXIvc2xpZGVyLm1qc1wiO1xuaW1wb3J0IHsgVlNsaWRlclRodW1iIH0gZnJvbSBcIi4uL1ZTbGlkZXIvVlNsaWRlclRodW1iLm1qc1wiO1xuaW1wb3J0IHsgVlNsaWRlclRyYWNrIH0gZnJvbSBcIi4uL1ZTbGlkZXIvVlNsaWRlclRyYWNrLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUZvY3VzUHJvcHMsIHVzZUZvY3VzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvY3VzLm1qc1wiO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2FsZS5tanNcIjtcbmltcG9ydCB7IHVzZVByb3hpZWRNb2RlbCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9wcm94aWVkTW9kZWwubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHJlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWUmFuZ2VTbGlkZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIC4uLm1ha2VGb2N1c1Byb3BzKCksXG4gIC4uLm1ha2VWSW5wdXRQcm9wcygpLFxuICAuLi5tYWtlU2xpZGVyUHJvcHMoKSxcbiAgc3RyaWN0OiBCb29sZWFuLFxuICBtb2RlbFZhbHVlOiB7XG4gICAgdHlwZTogQXJyYXksXG4gICAgZGVmYXVsdDogKCkgPT4gWzAsIDBdXG4gIH1cbn0sICdWUmFuZ2VTbGlkZXInKTtcbmV4cG9ydCBjb25zdCBWUmFuZ2VTbGlkZXIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlJhbmdlU2xpZGVyJyxcbiAgcHJvcHM6IG1ha2VWUmFuZ2VTbGlkZXJQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6Zm9jdXNlZCc6IHZhbHVlID0+IHRydWUsXG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZSxcbiAgICBlbmQ6IHZhbHVlID0+IHRydWUsXG4gICAgc3RhcnQ6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHMsXG4gICAgICBlbWl0XG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qgc3RhcnRUaHVtYlJlZiA9IHJlZigpO1xuICAgIGNvbnN0IHN0b3BUaHVtYlJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGlucHV0UmVmID0gcmVmKCk7XG4gICAgY29uc3Qge1xuICAgICAgcnRsQ2xhc3Nlc1xuICAgIH0gPSB1c2VSdGwoKTtcbiAgICBmdW5jdGlvbiBnZXRBY3RpdmVUaHVtYihlKSB7XG4gICAgICBpZiAoIXN0YXJ0VGh1bWJSZWYudmFsdWUgfHwgIXN0b3BUaHVtYlJlZi52YWx1ZSkgcmV0dXJuO1xuICAgICAgY29uc3Qgc3RhcnRPZmZzZXQgPSBnZXRPZmZzZXQoZSwgc3RhcnRUaHVtYlJlZi52YWx1ZS4kZWwsIHByb3BzLmRpcmVjdGlvbik7XG4gICAgICBjb25zdCBzdG9wT2Zmc2V0ID0gZ2V0T2Zmc2V0KGUsIHN0b3BUaHVtYlJlZi52YWx1ZS4kZWwsIHByb3BzLmRpcmVjdGlvbik7XG4gICAgICBjb25zdCBhID0gTWF0aC5hYnMoc3RhcnRPZmZzZXQpO1xuICAgICAgY29uc3QgYiA9IE1hdGguYWJzKHN0b3BPZmZzZXQpO1xuICAgICAgcmV0dXJuIGEgPCBiIHx8IGEgPT09IGIgJiYgc3RhcnRPZmZzZXQgPCAwID8gc3RhcnRUaHVtYlJlZi52YWx1ZS4kZWwgOiBzdG9wVGh1bWJSZWYudmFsdWUuJGVsO1xuICAgIH1cbiAgICBjb25zdCBzdGVwcyA9IHVzZVN0ZXBzKHByb3BzKTtcbiAgICBjb25zdCBtb2RlbCA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnLCB1bmRlZmluZWQsIGFyciA9PiB7XG4gICAgICBpZiAoIWFycj8ubGVuZ3RoKSByZXR1cm4gWzAsIDBdO1xuICAgICAgcmV0dXJuIGFyci5tYXAodmFsdWUgPT4gc3RlcHMucm91bmRWYWx1ZSh2YWx1ZSkpO1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGFjdGl2ZVRodW1iUmVmLFxuICAgICAgaGFzTGFiZWxzLFxuICAgICAgbWF4LFxuICAgICAgbWluLFxuICAgICAgbW91c2VQcmVzc2VkLFxuICAgICAgb25TbGlkZXJNb3VzZWRvd24sXG4gICAgICBvblNsaWRlclRvdWNoc3RhcnQsXG4gICAgICBwb3NpdGlvbixcbiAgICAgIHRyYWNrQ29udGFpbmVyUmVmXG4gICAgfSA9IHVzZVNsaWRlcih7XG4gICAgICBwcm9wcyxcbiAgICAgIHN0ZXBzLFxuICAgICAgb25TbGlkZXJTdGFydDogKCkgPT4ge1xuICAgICAgICBlbWl0KCdzdGFydCcsIG1vZGVsLnZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBvblNsaWRlckVuZDogX3JlZjIgPT4ge1xuICAgICAgICBsZXQge1xuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBhY3RpdmVUaHVtYlJlZi52YWx1ZSA9PT0gc3RhcnRUaHVtYlJlZi52YWx1ZT8uJGVsID8gW3ZhbHVlLCBtb2RlbC52YWx1ZVsxXV0gOiBbbW9kZWwudmFsdWVbMF0sIHZhbHVlXTtcbiAgICAgICAgaWYgKCFwcm9wcy5zdHJpY3QgJiYgbmV3VmFsdWVbMF0gPCBuZXdWYWx1ZVsxXSkge1xuICAgICAgICAgIG1vZGVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZW1pdCgnZW5kJywgbW9kZWwudmFsdWUpO1xuICAgICAgfSxcbiAgICAgIG9uU2xpZGVyTW92ZTogX3JlZjMgPT4ge1xuICAgICAgICBsZXQge1xuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0gPSBfcmVmMztcbiAgICAgICAgY29uc3QgW3N0YXJ0LCBzdG9wXSA9IG1vZGVsLnZhbHVlO1xuICAgICAgICBpZiAoIXByb3BzLnN0cmljdCAmJiBzdGFydCA9PT0gc3RvcCAmJiBzdGFydCAhPT0gbWluLnZhbHVlKSB7XG4gICAgICAgICAgYWN0aXZlVGh1bWJSZWYudmFsdWUgPSB2YWx1ZSA+IHN0YXJ0ID8gc3RvcFRodW1iUmVmLnZhbHVlPy4kZWwgOiBzdGFydFRodW1iUmVmLnZhbHVlPy4kZWw7XG4gICAgICAgICAgYWN0aXZlVGh1bWJSZWYudmFsdWU/LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGl2ZVRodW1iUmVmLnZhbHVlID09PSBzdGFydFRodW1iUmVmLnZhbHVlPy4kZWwpIHtcbiAgICAgICAgICBtb2RlbC52YWx1ZSA9IFtNYXRoLm1pbih2YWx1ZSwgc3RvcCksIHN0b3BdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZGVsLnZhbHVlID0gW3N0YXJ0LCBNYXRoLm1heChzdGFydCwgdmFsdWUpXTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdldEFjdGl2ZVRodW1iXG4gICAgfSk7XG4gICAgY29uc3Qge1xuICAgICAgaXNGb2N1c2VkLFxuICAgICAgZm9jdXMsXG4gICAgICBibHVyXG4gICAgfSA9IHVzZUZvY3VzKHByb3BzKTtcbiAgICBjb25zdCB0cmFja1N0YXJ0ID0gY29tcHV0ZWQoKCkgPT4gcG9zaXRpb24obW9kZWwudmFsdWVbMF0pKTtcbiAgICBjb25zdCB0cmFja1N0b3AgPSBjb21wdXRlZCgoKSA9PiBwb3NpdGlvbihtb2RlbC52YWx1ZVsxXSkpO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBbaW5wdXRQcm9wcywgX10gPSBWSW5wdXQuZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgY29uc3QgaGFzUHJlcGVuZCA9ICEhKHByb3BzLmxhYmVsIHx8IHNsb3RzLmxhYmVsIHx8IHNsb3RzLnByZXBlbmQpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWSW5wdXQsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytc2xpZGVyJywgJ3YtcmFuZ2Utc2xpZGVyJywge1xuICAgICAgICAgICd2LXNsaWRlci0taGFzLWxhYmVscyc6ICEhc2xvdHNbJ3RpY2stbGFiZWwnXSB8fCBoYXNMYWJlbHMudmFsdWUsXG4gICAgICAgICAgJ3Ytc2xpZGVyLS1mb2N1c2VkJzogaXNGb2N1c2VkLnZhbHVlLFxuICAgICAgICAgICd2LXNsaWRlci0tcHJlc3NlZCc6IG1vdXNlUHJlc3NlZC52YWx1ZSxcbiAgICAgICAgICAndi1zbGlkZXItLWRpc2FibGVkJzogcHJvcHMuZGlzYWJsZWRcbiAgICAgICAgfSwgcnRsQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlLFxuICAgICAgICBcInJlZlwiOiBpbnB1dFJlZlxuICAgICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgICBcImZvY3VzZWRcIjogaXNGb2N1c2VkLnZhbHVlXG4gICAgICB9KSwge1xuICAgICAgICAuLi5zbG90cyxcbiAgICAgICAgcHJlcGVuZDogaGFzUHJlcGVuZCA/IHNsb3RQcm9wcyA9PiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbc2xvdHMubGFiZWw/LihzbG90UHJvcHMpID8/IChwcm9wcy5sYWJlbCA/IF9jcmVhdGVWTm9kZShWTGFiZWwsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1zbGlkZXJfX2xhYmVsXCIsXG4gICAgICAgICAgXCJ0ZXh0XCI6IHByb3BzLmxhYmVsXG4gICAgICAgIH0sIG51bGwpIDogdW5kZWZpbmVkKSwgc2xvdHMucHJlcGVuZD8uKHNsb3RQcm9wcyldKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZGVmYXVsdDogX3JlZjQgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG1lc3NhZ2VzSWRcbiAgICAgICAgICB9ID0gX3JlZjQ7XG4gICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwidi1zbGlkZXJfX2NvbnRhaW5lclwiLFxuICAgICAgICAgICAgXCJvbk1vdXNlZG93blwiOiBvblNsaWRlck1vdXNlZG93bixcbiAgICAgICAgICAgIFwib25Ub3VjaHN0YXJ0UGFzc2l2ZVwiOiBvblNsaWRlclRvdWNoc3RhcnRcbiAgICAgICAgICB9LCBbX2NyZWF0ZVZOb2RlKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgXCJpZFwiOiBgJHtpZC52YWx1ZX1fc3RhcnRgLFxuICAgICAgICAgICAgXCJuYW1lXCI6IHByb3BzLm5hbWUgfHwgaWQudmFsdWUsXG4gICAgICAgICAgICBcImRpc2FibGVkXCI6ICEhcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgICBcInJlYWRvbmx5XCI6ICEhcHJvcHMucmVhZG9ubHksXG4gICAgICAgICAgICBcInRhYmluZGV4XCI6IFwiLTFcIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogbW9kZWwudmFsdWVbMF1cbiAgICAgICAgICB9LCBudWxsKSwgX2NyZWF0ZVZOb2RlKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgXCJpZFwiOiBgJHtpZC52YWx1ZX1fc3RvcGAsXG4gICAgICAgICAgICBcIm5hbWVcIjogcHJvcHMubmFtZSB8fCBpZC52YWx1ZSxcbiAgICAgICAgICAgIFwiZGlzYWJsZWRcIjogISFwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICAgIFwicmVhZG9ubHlcIjogISFwcm9wcy5yZWFkb25seSxcbiAgICAgICAgICAgIFwidGFiaW5kZXhcIjogXCItMVwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBtb2RlbC52YWx1ZVsxXVxuICAgICAgICAgIH0sIG51bGwpLCBfY3JlYXRlVk5vZGUoVlNsaWRlclRyYWNrLCB7XG4gICAgICAgICAgICBcInJlZlwiOiB0cmFja0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgIFwic3RhcnRcIjogdHJhY2tTdGFydC52YWx1ZSxcbiAgICAgICAgICAgIFwic3RvcFwiOiB0cmFja1N0b3AudmFsdWVcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAndGljay1sYWJlbCc6IHNsb3RzWyd0aWNrLWxhYmVsJ11cbiAgICAgICAgICB9KSwgX2NyZWF0ZVZOb2RlKFZTbGlkZXJUaHVtYiwge1xuICAgICAgICAgICAgXCJyZWZcIjogc3RhcnRUaHVtYlJlZixcbiAgICAgICAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBtZXNzYWdlc0lkLnZhbHVlLFxuICAgICAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZCAmJiBhY3RpdmVUaHVtYlJlZi52YWx1ZSA9PT0gc3RhcnRUaHVtYlJlZi52YWx1ZT8uJGVsLFxuICAgICAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlWzBdLFxuICAgICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IHYgPT4gbW9kZWwudmFsdWUgPSBbdiwgbW9kZWwudmFsdWVbMV1dLFxuICAgICAgICAgICAgXCJvbkZvY3VzXCI6IGUgPT4ge1xuICAgICAgICAgICAgICBmb2N1cygpO1xuICAgICAgICAgICAgICBhY3RpdmVUaHVtYlJlZi52YWx1ZSA9IHN0YXJ0VGh1bWJSZWYudmFsdWU/LiRlbDtcblxuICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgc2Vjb25kIHRodW1iIGlzIGZvY3VzZWQgaWZcbiAgICAgICAgICAgICAgLy8gdGhlIHRodW1icyBhcmUgb24gdG9wIG9mIGVhY2ggb3RoZXJcbiAgICAgICAgICAgICAgLy8gYW5kIHRoZXkgYXJlIGJvdGggYXQgbWluaW11bSB2YWx1ZVxuICAgICAgICAgICAgICAvLyBidXQgb25seSBpZiBmb2N1c2VkIGZyb20gb3V0c2lkZS5cbiAgICAgICAgICAgICAgaWYgKG1vZGVsLnZhbHVlWzBdID09PSBtb2RlbC52YWx1ZVsxXSAmJiBtb2RlbC52YWx1ZVsxXSA9PT0gbWluLnZhbHVlICYmIGUucmVsYXRlZFRhcmdldCAhPT0gc3RvcFRodW1iUmVmLnZhbHVlPy4kZWwpIHtcbiAgICAgICAgICAgICAgICBzdGFydFRodW1iUmVmLnZhbHVlPy4kZWwuYmx1cigpO1xuICAgICAgICAgICAgICAgIHN0b3BUaHVtYlJlZi52YWx1ZT8uJGVsLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIm9uQmx1clwiOiAoKSA9PiB7XG4gICAgICAgICAgICAgIGJsdXIoKTtcbiAgICAgICAgICAgICAgYWN0aXZlVGh1bWJSZWYudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJtaW5cIjogbWluLnZhbHVlLFxuICAgICAgICAgICAgXCJtYXhcIjogbW9kZWwudmFsdWVbMV0sXG4gICAgICAgICAgICBcInBvc2l0aW9uXCI6IHRyYWNrU3RhcnQudmFsdWVcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAndGh1bWItbGFiZWwnOiBzbG90c1sndGh1bWItbGFiZWwnXVxuICAgICAgICAgIH0pLCBfY3JlYXRlVk5vZGUoVlNsaWRlclRodW1iLCB7XG4gICAgICAgICAgICBcInJlZlwiOiBzdG9wVGh1bWJSZWYsXG4gICAgICAgICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogbWVzc2FnZXNJZC52YWx1ZSxcbiAgICAgICAgICAgIFwiZm9jdXNlZFwiOiBpc0ZvY3VzZWQgJiYgYWN0aXZlVGh1bWJSZWYudmFsdWUgPT09IHN0b3BUaHVtYlJlZi52YWx1ZT8uJGVsLFxuICAgICAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlWzFdLFxuICAgICAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6IHYgPT4gbW9kZWwudmFsdWUgPSBbbW9kZWwudmFsdWVbMF0sIHZdLFxuICAgICAgICAgICAgXCJvbkZvY3VzXCI6IGUgPT4ge1xuICAgICAgICAgICAgICBmb2N1cygpO1xuICAgICAgICAgICAgICBhY3RpdmVUaHVtYlJlZi52YWx1ZSA9IHN0b3BUaHVtYlJlZi52YWx1ZT8uJGVsO1xuXG4gICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBmaXJzdCB0aHVtYiBpcyBmb2N1c2VkIGlmXG4gICAgICAgICAgICAgIC8vIHRoZSB0aHVtYnMgYXJlIG9uIHRvcCBvZiBlYWNoIG90aGVyXG4gICAgICAgICAgICAgIC8vIGFuZCB0aGV5IGFyZSBib3RoIGF0IG1heGltdW0gdmFsdWVcbiAgICAgICAgICAgICAgLy8gYnV0IG9ubHkgaWYgZm9jdXNlZCBmcm9tIG91dHNpZGUuXG4gICAgICAgICAgICAgIGlmIChtb2RlbC52YWx1ZVswXSA9PT0gbW9kZWwudmFsdWVbMV0gJiYgbW9kZWwudmFsdWVbMF0gPT09IG1heC52YWx1ZSAmJiBlLnJlbGF0ZWRUYXJnZXQgIT09IHN0YXJ0VGh1bWJSZWYudmFsdWU/LiRlbCkge1xuICAgICAgICAgICAgICAgIHN0b3BUaHVtYlJlZi52YWx1ZT8uJGVsLmJsdXIoKTtcbiAgICAgICAgICAgICAgICBzdGFydFRodW1iUmVmLnZhbHVlPy4kZWwuZm9jdXMoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwib25CbHVyXCI6ICgpID0+IHtcbiAgICAgICAgICAgICAgYmx1cigpO1xuICAgICAgICAgICAgICBhY3RpdmVUaHVtYlJlZi52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIm1pblwiOiBtb2RlbC52YWx1ZVswXSxcbiAgICAgICAgICAgIFwibWF4XCI6IG1heC52YWx1ZSxcbiAgICAgICAgICAgIFwicG9zaXRpb25cIjogdHJhY2tTdG9wLnZhbHVlXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgJ3RodW1iLWxhYmVsJzogc2xvdHNbJ3RodW1iLWxhYmVsJ11cbiAgICAgICAgICB9KV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlJhbmdlU2xpZGVyLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlJhdGluZy5jc3NcIjtcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVkJ0biB9IGZyb20gXCIuLi9WQnRuL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VEZW5zaXR5UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVuc2l0eS5tanNcIjtcbmltcG9ydCB7IEljb25WYWx1ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IHVzZUxvY2FsZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2NhbGUubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVNpemVQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zaXplLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHNoYWxsb3dSZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY2xhbXAsIGNyZWF0ZVJhbmdlLCBnZW5lcmljQ29tcG9uZW50LCBnZXRVaWQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZSYXRpbmdQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIG5hbWU6IFN0cmluZyxcbiAgaXRlbUFyaWFMYWJlbDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJHZ1ZXRpZnkucmF0aW5nLmFyaWFMYWJlbC5pdGVtJ1xuICB9LFxuICBhY3RpdmVDb2xvcjogU3RyaW5nLFxuICBjb2xvcjogU3RyaW5nLFxuICBjbGVhcmFibGU6IEJvb2xlYW4sXG4gIGRpc2FibGVkOiBCb29sZWFuLFxuICBlbXB0eUljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRyYXRpbmdFbXB0eSdcbiAgfSxcbiAgZnVsbEljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRyYXRpbmdGdWxsJ1xuICB9LFxuICBoYWxmSW5jcmVtZW50czogQm9vbGVhbixcbiAgaG92ZXI6IEJvb2xlYW4sXG4gIGxlbmd0aDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogNVxuICB9LFxuICByZWFkb25seTogQm9vbGVhbixcbiAgbW9kZWxWYWx1ZToge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICBpdGVtTGFiZWxzOiBBcnJheSxcbiAgaXRlbUxhYmVsUG9zaXRpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ3RvcCcsXG4gICAgdmFsaWRhdG9yOiB2ID0+IFsndG9wJywgJ2JvdHRvbSddLmluY2x1ZGVzKHYpXG4gIH0sXG4gIHJpcHBsZTogQm9vbGVhbixcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VEZW5zaXR5UHJvcHMoKSxcbiAgLi4ubWFrZVNpemVQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZSYXRpbmcnKTtcbmV4cG9ydCBjb25zdCBWUmF0aW5nID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZSYXRpbmcnLFxuICBwcm9wczogbWFrZVZSYXRpbmdQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0XG4gICAgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHJhdGluZyA9IHVzZVByb3hpZWRNb2RlbChwcm9wcywgJ21vZGVsVmFsdWUnKTtcbiAgICBjb25zdCBub3JtYWxpemVkVmFsdWUgPSBjb21wdXRlZCgoKSA9PiBjbGFtcChwYXJzZUZsb2F0KHJhdGluZy52YWx1ZSksIDAsICtwcm9wcy5sZW5ndGgpKTtcbiAgICBjb25zdCByYW5nZSA9IGNvbXB1dGVkKCgpID0+IGNyZWF0ZVJhbmdlKE51bWJlcihwcm9wcy5sZW5ndGgpLCAxKSk7XG4gICAgY29uc3QgaW5jcmVtZW50cyA9IGNvbXB1dGVkKCgpID0+IHJhbmdlLnZhbHVlLmZsYXRNYXAodiA9PiBwcm9wcy5oYWxmSW5jcmVtZW50cyA/IFt2IC0gMC41LCB2XSA6IFt2XSkpO1xuICAgIGNvbnN0IGhvdmVySW5kZXggPSBzaGFsbG93UmVmKC0xKTtcbiAgICBjb25zdCBpdGVtU3RhdGUgPSBjb21wdXRlZCgoKSA9PiBpbmNyZW1lbnRzLnZhbHVlLm1hcCh2YWx1ZSA9PiB7XG4gICAgICBjb25zdCBpc0hvdmVyaW5nID0gcHJvcHMuaG92ZXIgJiYgaG92ZXJJbmRleC52YWx1ZSA+IC0xO1xuICAgICAgY29uc3QgaXNGaWxsZWQgPSBub3JtYWxpemVkVmFsdWUudmFsdWUgPj0gdmFsdWU7XG4gICAgICBjb25zdCBpc0hvdmVyZWQgPSBob3ZlckluZGV4LnZhbHVlID49IHZhbHVlO1xuICAgICAgY29uc3QgaXNGdWxsSWNvbiA9IGlzSG92ZXJpbmcgPyBpc0hvdmVyZWQgOiBpc0ZpbGxlZDtcbiAgICAgIGNvbnN0IGljb24gPSBpc0Z1bGxJY29uID8gcHJvcHMuZnVsbEljb24gOiBwcm9wcy5lbXB0eUljb247XG4gICAgICBjb25zdCBhY3RpdmVDb2xvciA9IHByb3BzLmFjdGl2ZUNvbG9yID8/IHByb3BzLmNvbG9yO1xuICAgICAgY29uc3QgY29sb3IgPSBpc0ZpbGxlZCB8fCBpc0hvdmVyZWQgPyBhY3RpdmVDb2xvciA6IHByb3BzLmNvbG9yO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNGaWxsZWQsXG4gICAgICAgIGlzSG92ZXJlZCxcbiAgICAgICAgaWNvbixcbiAgICAgICAgY29sb3JcbiAgICAgIH07XG4gICAgfSkpO1xuICAgIGNvbnN0IGV2ZW50U3RhdGUgPSBjb21wdXRlZCgoKSA9PiBbMCwgLi4uaW5jcmVtZW50cy52YWx1ZV0ubWFwKHZhbHVlID0+IHtcbiAgICAgIGZ1bmN0aW9uIG9uTW91c2VlbnRlcigpIHtcbiAgICAgICAgaG92ZXJJbmRleC52YWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gb25Nb3VzZWxlYXZlKCkge1xuICAgICAgICBob3ZlckluZGV4LnZhbHVlID0gLTE7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBvbkNsaWNrKCkge1xuICAgICAgICBpZiAocHJvcHMuZGlzYWJsZWQgfHwgcHJvcHMucmVhZG9ubHkpIHJldHVybjtcbiAgICAgICAgcmF0aW5nLnZhbHVlID0gbm9ybWFsaXplZFZhbHVlLnZhbHVlID09PSB2YWx1ZSAmJiBwcm9wcy5jbGVhcmFibGUgPyAwIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbk1vdXNlZW50ZXI6IHByb3BzLmhvdmVyID8gb25Nb3VzZWVudGVyIDogdW5kZWZpbmVkLFxuICAgICAgICBvbk1vdXNlbGVhdmU6IHByb3BzLmhvdmVyID8gb25Nb3VzZWxlYXZlIDogdW5kZWZpbmVkLFxuICAgICAgICBvbkNsaWNrXG4gICAgICB9O1xuICAgIH0pKTtcbiAgICBjb25zdCBuYW1lID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMubmFtZSA/PyBgdi1yYXRpbmctJHtnZXRVaWQoKX1gKTtcbiAgICBmdW5jdGlvbiBWUmF0aW5nSXRlbShfcmVmMikge1xuICAgICAgbGV0IHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGluZGV4LFxuICAgICAgICBzaG93U3RhciA9IHRydWVcbiAgICAgIH0gPSBfcmVmMjtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgb25Nb3VzZWVudGVyLFxuICAgICAgICBvbk1vdXNlbGVhdmUsXG4gICAgICAgIG9uQ2xpY2tcbiAgICAgIH0gPSBldmVudFN0YXRlLnZhbHVlW2luZGV4ICsgMV07XG4gICAgICBjb25zdCBpZCA9IGAke25hbWUudmFsdWV9LSR7U3RyaW5nKHZhbHVlKS5yZXBsYWNlKCcuJywgJy0nKX1gO1xuICAgICAgY29uc3QgYnRuUHJvcHMgPSB7XG4gICAgICAgIGNvbG9yOiBpdGVtU3RhdGUudmFsdWVbaW5kZXhdPy5jb2xvcixcbiAgICAgICAgZGVuc2l0eTogcHJvcHMuZGVuc2l0eSxcbiAgICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgICBpY29uOiBpdGVtU3RhdGUudmFsdWVbaW5kZXhdPy5pY29uLFxuICAgICAgICByaXBwbGU6IHByb3BzLnJpcHBsZSxcbiAgICAgICAgc2l6ZTogcHJvcHMuc2l6ZSxcbiAgICAgICAgdmFyaWFudDogJ3BsYWluJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKFwibGFiZWxcIiwge1xuICAgICAgICBcImZvclwiOiBpZCxcbiAgICAgICAgXCJjbGFzc1wiOiB7XG4gICAgICAgICAgJ3YtcmF0aW5nX19pdGVtLS1oYWxmJzogcHJvcHMuaGFsZkluY3JlbWVudHMgJiYgdmFsdWUgJSAxID4gMCxcbiAgICAgICAgICAndi1yYXRpbmdfX2l0ZW0tLWZ1bGwnOiBwcm9wcy5oYWxmSW5jcmVtZW50cyAmJiB2YWx1ZSAlIDEgPT09IDBcbiAgICAgICAgfSxcbiAgICAgICAgXCJvbk1vdXNlZW50ZXJcIjogb25Nb3VzZWVudGVyLFxuICAgICAgICBcIm9uTW91c2VsZWF2ZVwiOiBvbk1vdXNlbGVhdmUsXG4gICAgICAgIFwib25DbGlja1wiOiBvbkNsaWNrXG4gICAgICB9LCBbX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJ2LXJhdGluZ19faGlkZGVuXCJcbiAgICAgIH0sIFt0KHByb3BzLml0ZW1BcmlhTGFiZWwsIHZhbHVlLCBwcm9wcy5sZW5ndGgpXSksICFzaG93U3RhciA/IHVuZGVmaW5lZCA6IHNsb3RzLml0ZW0gPyBzbG90cy5pdGVtKHtcbiAgICAgICAgLi4uaXRlbVN0YXRlLnZhbHVlW2luZGV4XSxcbiAgICAgICAgcHJvcHM6IGJ0blByb3BzLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHJhdGluZzogbm9ybWFsaXplZFZhbHVlLnZhbHVlXG4gICAgICB9KSA6IF9jcmVhdGVWTm9kZShWQnRuLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiB0KHByb3BzLml0ZW1BcmlhTGFiZWwsIHZhbHVlLCBwcm9wcy5sZW5ndGgpXG4gICAgICB9LCBidG5Qcm9wcyksIG51bGwpXSksIF9jcmVhdGVWTm9kZShcImlucHV0XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtcmF0aW5nX19oaWRkZW5cIixcbiAgICAgICAgXCJuYW1lXCI6IG5hbWUudmFsdWUsXG4gICAgICAgIFwiaWRcIjogaWQsXG4gICAgICAgIFwidHlwZVwiOiBcInJhZGlvXCIsXG4gICAgICAgIFwidmFsdWVcIjogdmFsdWUsXG4gICAgICAgIFwiY2hlY2tlZFwiOiBub3JtYWxpemVkVmFsdWUudmFsdWUgPT09IHZhbHVlLFxuICAgICAgICBcInRhYmluZGV4XCI6IC0xLFxuICAgICAgICBcInJlYWRvbmx5XCI6IHByb3BzLnJlYWRvbmx5LFxuICAgICAgICBcImRpc2FibGVkXCI6IHByb3BzLmRpc2FibGVkXG4gICAgICB9LCBudWxsKV0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVMYWJlbChsYWJlbFByb3BzKSB7XG4gICAgICBpZiAoc2xvdHNbJ2l0ZW0tbGFiZWwnXSkgcmV0dXJuIHNsb3RzWydpdGVtLWxhYmVsJ10obGFiZWxQcm9wcyk7XG4gICAgICBpZiAobGFiZWxQcm9wcy5sYWJlbCkgcmV0dXJuIF9jcmVhdGVWTm9kZShcInNwYW5cIiwgbnVsbCwgW2xhYmVsUHJvcHMubGFiZWxdKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoXCJzcGFuXCIsIG51bGwsIFtfY3JlYXRlVGV4dFZOb2RlKFwiXFx4QTBcIildKTtcbiAgICB9XG4gICAgdXNlUmVuZGVyKCgpID0+IHtcbiAgICAgIGNvbnN0IGhhc0xhYmVscyA9ICEhcHJvcHMuaXRlbUxhYmVscz8ubGVuZ3RoIHx8IHNsb3RzWydpdGVtLWxhYmVsJ107XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgICBcImNsYXNzXCI6IFsndi1yYXRpbmcnLCB7XG4gICAgICAgICAgJ3YtcmF0aW5nLS1ob3Zlcic6IHByb3BzLmhvdmVyLFxuICAgICAgICAgICd2LXJhdGluZy0tcmVhZG9ubHknOiBwcm9wcy5yZWFkb25seVxuICAgICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX2NyZWF0ZVZOb2RlKFZSYXRpbmdJdGVtLCB7XG4gICAgICAgICAgXCJ2YWx1ZVwiOiAwLFxuICAgICAgICAgIFwiaW5kZXhcIjogLTEsXG4gICAgICAgICAgXCJzaG93U3RhclwiOiBmYWxzZVxuICAgICAgICB9LCBudWxsKSwgcmFuZ2UudmFsdWUubWFwKCh2YWx1ZSwgaSkgPT4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1yYXRpbmdfX3dyYXBwZXJcIlxuICAgICAgICB9LCBbaGFzTGFiZWxzICYmIHByb3BzLml0ZW1MYWJlbFBvc2l0aW9uID09PSAndG9wJyA/IGNyZWF0ZUxhYmVsKHtcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICBsYWJlbDogcHJvcHMuaXRlbUxhYmVscz8uW2ldXG4gICAgICAgIH0pIDogdW5kZWZpbmVkLCBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXJhdGluZ19faXRlbVwiXG4gICAgICAgIH0sIFtwcm9wcy5oYWxmSW5jcmVtZW50cyA/IF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtfY3JlYXRlVk5vZGUoVlJhdGluZ0l0ZW0sIHtcbiAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlIC0gMC41LFxuICAgICAgICAgIFwiaW5kZXhcIjogaSAqIDJcbiAgICAgICAgfSwgbnVsbCksIF9jcmVhdGVWTm9kZShWUmF0aW5nSXRlbSwge1xuICAgICAgICAgIFwidmFsdWVcIjogdmFsdWUsXG4gICAgICAgICAgXCJpbmRleFwiOiBpICogMiArIDFcbiAgICAgICAgfSwgbnVsbCldKSA6IF9jcmVhdGVWTm9kZShWUmF0aW5nSXRlbSwge1xuICAgICAgICAgIFwidmFsdWVcIjogdmFsdWUsXG4gICAgICAgICAgXCJpbmRleFwiOiBpXG4gICAgICAgIH0sIG51bGwpXSksIGhhc0xhYmVscyAmJiBwcm9wcy5pdGVtTGFiZWxQb3NpdGlvbiA9PT0gJ2JvdHRvbScgPyBjcmVhdGVMYWJlbCh7XG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgbGFiZWw6IHByb3BzLml0ZW1MYWJlbHM/LltpXVxuICAgICAgICB9KSA6IHVuZGVmaW5lZF0pKV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WUmF0aW5nLm1qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYmlhcyh2YWwpIHtcbiAgY29uc3QgYyA9IDAuNTAxO1xuICBjb25zdCB4ID0gTWF0aC5hYnModmFsKTtcbiAgcmV0dXJuIE1hdGguc2lnbih2YWwpICogKHggLyAoKDEgLyBjIC0gMikgKiAoMSAtIHgpICsgMSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVVwZGF0ZWRPZmZzZXQoX3JlZikge1xuICBsZXQge1xuICAgIHNlbGVjdGVkRWxlbWVudCxcbiAgICBjb250YWluZXJTaXplLFxuICAgIGNvbnRlbnRTaXplLFxuICAgIGlzUnRsLFxuICAgIGN1cnJlbnRTY3JvbGxPZmZzZXQsXG4gICAgaXNIb3Jpem9udGFsXG4gIH0gPSBfcmVmO1xuICBjb25zdCBjbGllbnRTaXplID0gaXNIb3Jpem9udGFsID8gc2VsZWN0ZWRFbGVtZW50LmNsaWVudFdpZHRoIDogc2VsZWN0ZWRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgY29uc3Qgb2Zmc2V0U3RhcnQgPSBpc0hvcml6b250YWwgPyBzZWxlY3RlZEVsZW1lbnQub2Zmc2V0TGVmdCA6IHNlbGVjdGVkRWxlbWVudC5vZmZzZXRUb3A7XG4gIGNvbnN0IGFkanVzdGVkT2Zmc2V0U3RhcnQgPSBpc1J0bCAmJiBpc0hvcml6b250YWwgPyBjb250ZW50U2l6ZSAtIG9mZnNldFN0YXJ0IC0gY2xpZW50U2l6ZSA6IG9mZnNldFN0YXJ0O1xuICBjb25zdCB0b3RhbFNpemUgPSBjb250YWluZXJTaXplICsgY3VycmVudFNjcm9sbE9mZnNldDtcbiAgY29uc3QgaXRlbU9mZnNldCA9IGNsaWVudFNpemUgKyBhZGp1c3RlZE9mZnNldFN0YXJ0O1xuICBjb25zdCBhZGRpdGlvbmFsT2Zmc2V0ID0gY2xpZW50U2l6ZSAqIDAuNDtcbiAgaWYgKGFkanVzdGVkT2Zmc2V0U3RhcnQgPD0gY3VycmVudFNjcm9sbE9mZnNldCkge1xuICAgIGN1cnJlbnRTY3JvbGxPZmZzZXQgPSBNYXRoLm1heChhZGp1c3RlZE9mZnNldFN0YXJ0IC0gYWRkaXRpb25hbE9mZnNldCwgMCk7XG4gIH0gZWxzZSBpZiAodG90YWxTaXplIDw9IGl0ZW1PZmZzZXQpIHtcbiAgICBjdXJyZW50U2Nyb2xsT2Zmc2V0ID0gTWF0aC5taW4oY3VycmVudFNjcm9sbE9mZnNldCAtICh0b3RhbFNpemUgLSBpdGVtT2Zmc2V0IC0gYWRkaXRpb25hbE9mZnNldCksIGNvbnRlbnRTaXplIC0gY29udGFpbmVyU2l6ZSk7XG4gIH1cbiAgcmV0dXJuIGN1cnJlbnRTY3JvbGxPZmZzZXQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlQ2VudGVyZWRPZmZzZXQoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICBzZWxlY3RlZEVsZW1lbnQsXG4gICAgY29udGFpbmVyU2l6ZSxcbiAgICBjb250ZW50U2l6ZSxcbiAgICBpc1J0bCxcbiAgICBpc0hvcml6b250YWxcbiAgfSA9IF9yZWYyO1xuICBjb25zdCBjbGllbnRTaXplID0gaXNIb3Jpem9udGFsID8gc2VsZWN0ZWRFbGVtZW50LmNsaWVudFdpZHRoIDogc2VsZWN0ZWRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgY29uc3Qgb2Zmc2V0U3RhcnQgPSBpc0hvcml6b250YWwgPyBzZWxlY3RlZEVsZW1lbnQub2Zmc2V0TGVmdCA6IHNlbGVjdGVkRWxlbWVudC5vZmZzZXRUb3A7XG4gIGNvbnN0IG9mZnNldENlbnRlcmVkID0gaXNSdGwgJiYgaXNIb3Jpem9udGFsID8gY29udGVudFNpemUgLSBvZmZzZXRTdGFydCAtIGNsaWVudFNpemUgLyAyIC0gY29udGFpbmVyU2l6ZSAvIDIgOiBvZmZzZXRTdGFydCArIGNsaWVudFNpemUgLyAyIC0gY29udGFpbmVyU2l6ZSAvIDI7XG4gIHJldHVybiBNYXRoLm1pbihjb250ZW50U2l6ZSAtIGNvbnRhaW5lclNpemUsIE1hdGgubWF4KDAsIG9mZnNldENlbnRlcmVkKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlNsaWRlR3JvdXAuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZGYWRlVHJhbnNpdGlvbiB9IGZyb20gXCIuLi90cmFuc2l0aW9ucy9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZJY29uIH0gZnJvbSBcIi4uL1ZJY29uL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlRGlzcGxheSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pbmRleC5tanNcIjtcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlR3JvdXBQcm9wcywgdXNlR3JvdXAgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZ3JvdXAubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgdXNlUmVzaXplT2JzZXJ2ZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcmVzaXplT2JzZXJ2ZXIubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBzaGFsbG93UmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBiaWFzLCBjYWxjdWxhdGVDZW50ZXJlZE9mZnNldCwgY2FsY3VsYXRlVXBkYXRlZE9mZnNldCB9IGZyb20gXCIuL2hlbHBlcnMubWpzXCI7XG5pbXBvcnQgeyBjbGFtcCwgZm9jdXNhYmxlQ2hpbGRyZW4sIGdlbmVyaWNDb21wb25lbnQsIElOX0JST1dTRVIsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgVlNsaWRlR3JvdXBTeW1ib2wgPSBTeW1ib2wuZm9yKCd2dWV0aWZ5OnYtc2xpZGUtZ3JvdXAnKTtcbmV4cG9ydCBjb25zdCBtYWtlVlNsaWRlR3JvdXBQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNlbnRlckFjdGl2ZTogQm9vbGVhbixcbiAgZGlyZWN0aW9uOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdob3Jpem9udGFsJ1xuICB9LFxuICBzeW1ib2w6IHtcbiAgICB0eXBlOiBudWxsLFxuICAgIGRlZmF1bHQ6IFZTbGlkZUdyb3VwU3ltYm9sXG4gIH0sXG4gIG5leHRJY29uOiB7XG4gICAgdHlwZTogSWNvblZhbHVlLFxuICAgIGRlZmF1bHQ6ICckbmV4dCdcbiAgfSxcbiAgcHJldkljb246IHtcbiAgICB0eXBlOiBJY29uVmFsdWUsXG4gICAgZGVmYXVsdDogJyRwcmV2J1xuICB9LFxuICBzaG93QXJyb3dzOiB7XG4gICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ10sXG4gICAgdmFsaWRhdG9yOiB2ID0+IHR5cGVvZiB2ID09PSAnYm9vbGVhbicgfHwgWydhbHdheXMnLCAnZGVza3RvcCcsICdtb2JpbGUnXS5pbmNsdWRlcyh2KVxuICB9LFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKCksXG4gIC4uLm1ha2VHcm91cFByb3BzKHtcbiAgICBzZWxlY3RlZENsYXNzOiAndi1zbGlkZS1ncm91cC1pdGVtLS1hY3RpdmUnXG4gIH0pXG59LCAnVlNsaWRlR3JvdXAnKTtcbmV4cG9ydCBjb25zdCBWU2xpZGVHcm91cCA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWU2xpZGVHcm91cCcsXG4gIHByb3BzOiBtYWtlVlNsaWRlR3JvdXBQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHZhbHVlID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICBpc1J0bFxuICAgIH0gPSB1c2VSdGwoKTtcbiAgICBjb25zdCB7XG4gICAgICBtb2JpbGVcbiAgICB9ID0gdXNlRGlzcGxheSgpO1xuICAgIGNvbnN0IGdyb3VwID0gdXNlR3JvdXAocHJvcHMsIHByb3BzLnN5bWJvbCk7XG4gICAgY29uc3QgaXNPdmVyZmxvd2luZyA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICAgIGNvbnN0IHNjcm9sbE9mZnNldCA9IHNoYWxsb3dSZWYoMCk7XG4gICAgY29uc3QgY29udGFpbmVyU2l6ZSA9IHNoYWxsb3dSZWYoMCk7XG4gICAgY29uc3QgY29udGVudFNpemUgPSBzaGFsbG93UmVmKDApO1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKTtcbiAgICBjb25zdCB7XG4gICAgICByZXNpemVSZWY6IGNvbnRhaW5lclJlZixcbiAgICAgIGNvbnRlbnRSZWN0OiBjb250YWluZXJSZWN0XG4gICAgfSA9IHVzZVJlc2l6ZU9ic2VydmVyKCk7XG4gICAgY29uc3Qge1xuICAgICAgcmVzaXplUmVmOiBjb250ZW50UmVmLFxuICAgICAgY29udGVudFJlY3RcbiAgICB9ID0gdXNlUmVzaXplT2JzZXJ2ZXIoKTtcbiAgICBjb25zdCBmaXJzdFNlbGVjdGVkSW5kZXggPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAoIWdyb3VwLnNlbGVjdGVkLnZhbHVlLmxlbmd0aCkgcmV0dXJuIC0xO1xuICAgICAgcmV0dXJuIGdyb3VwLml0ZW1zLnZhbHVlLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IGdyb3VwLnNlbGVjdGVkLnZhbHVlWzBdKTtcbiAgICB9KTtcbiAgICBjb25zdCBsYXN0U2VsZWN0ZWRJbmRleCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmICghZ3JvdXAuc2VsZWN0ZWQudmFsdWUubGVuZ3RoKSByZXR1cm4gLTE7XG4gICAgICByZXR1cm4gZ3JvdXAuaXRlbXMudmFsdWUuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gZ3JvdXAuc2VsZWN0ZWQudmFsdWVbZ3JvdXAuc2VsZWN0ZWQudmFsdWUubGVuZ3RoIC0gMV0pO1xuICAgIH0pO1xuICAgIGlmIChJTl9CUk9XU0VSKSB7XG4gICAgICBsZXQgZnJhbWUgPSAtMTtcbiAgICAgIHdhdGNoKCgpID0+IFtncm91cC5zZWxlY3RlZC52YWx1ZSwgY29udGFpbmVyUmVjdC52YWx1ZSwgY29udGVudFJlY3QudmFsdWUsIGlzSG9yaXpvbnRhbC52YWx1ZV0sICgpID0+IHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWUpO1xuICAgICAgICBmcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKGNvbnRhaW5lclJlY3QudmFsdWUgJiYgY29udGVudFJlY3QudmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNpemVQcm9wZXJ0eSA9IGlzSG9yaXpvbnRhbC52YWx1ZSA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICAgICAgICAgIGNvbnRhaW5lclNpemUudmFsdWUgPSBjb250YWluZXJSZWN0LnZhbHVlW3NpemVQcm9wZXJ0eV07XG4gICAgICAgICAgICBjb250ZW50U2l6ZS52YWx1ZSA9IGNvbnRlbnRSZWN0LnZhbHVlW3NpemVQcm9wZXJ0eV07XG4gICAgICAgICAgICBpc092ZXJmbG93aW5nLnZhbHVlID0gY29udGFpbmVyU2l6ZS52YWx1ZSArIDEgPCBjb250ZW50U2l6ZS52YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZpcnN0U2VsZWN0ZWRJbmRleC52YWx1ZSA+PSAwICYmIGNvbnRlbnRSZWYudmFsdWUpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IElzIHRoaXMgdG9vIG5haXZlPyBTaG91bGQgd2Ugc3RvcmUgZWxlbWVudCByZWZlcmVuY2VzIGluIGdyb3VwIGNvbXBvc2FibGU/XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZEVsZW1lbnQgPSBjb250ZW50UmVmLnZhbHVlLmNoaWxkcmVuW2xhc3RTZWxlY3RlZEluZGV4LnZhbHVlXTtcbiAgICAgICAgICAgIGlmIChmaXJzdFNlbGVjdGVkSW5kZXgudmFsdWUgPT09IDAgfHwgIWlzT3ZlcmZsb3dpbmcudmFsdWUpIHtcbiAgICAgICAgICAgICAgc2Nyb2xsT2Zmc2V0LnZhbHVlID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcHMuY2VudGVyQWN0aXZlKSB7XG4gICAgICAgICAgICAgIHNjcm9sbE9mZnNldC52YWx1ZSA9IGNhbGN1bGF0ZUNlbnRlcmVkT2Zmc2V0KHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyU2l6ZTogY29udGFpbmVyU2l6ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICBjb250ZW50U2l6ZTogY29udGVudFNpemUudmFsdWUsXG4gICAgICAgICAgICAgICAgaXNSdGw6IGlzUnRsLnZhbHVlLFxuICAgICAgICAgICAgICAgIGlzSG9yaXpvbnRhbDogaXNIb3Jpem9udGFsLnZhbHVlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc092ZXJmbG93aW5nLnZhbHVlKSB7XG4gICAgICAgICAgICAgIHNjcm9sbE9mZnNldC52YWx1ZSA9IGNhbGN1bGF0ZVVwZGF0ZWRPZmZzZXQoe1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkRWxlbWVudCxcbiAgICAgICAgICAgICAgICBjb250YWluZXJTaXplOiBjb250YWluZXJTaXplLnZhbHVlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRTaXplOiBjb250ZW50U2l6ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICBpc1J0bDogaXNSdGwudmFsdWUsXG4gICAgICAgICAgICAgICAgY3VycmVudFNjcm9sbE9mZnNldDogc2Nyb2xsT2Zmc2V0LnZhbHVlLFxuICAgICAgICAgICAgICAgIGlzSG9yaXpvbnRhbDogaXNIb3Jpem9udGFsLnZhbHVlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgZGlzYWJsZVRyYW5zaXRpb24gPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgICBsZXQgc3RhcnRUb3VjaCA9IDA7XG4gICAgbGV0IHN0YXJ0T2Zmc2V0ID0gMDtcbiAgICBmdW5jdGlvbiBvblRvdWNoc3RhcnQoZSkge1xuICAgICAgY29uc3Qgc2l6ZVByb3BlcnR5ID0gaXNIb3Jpem9udGFsLnZhbHVlID8gJ2NsaWVudFgnIDogJ2NsaWVudFknO1xuICAgICAgY29uc3Qgc2lnbiA9IGlzUnRsLnZhbHVlICYmIGlzSG9yaXpvbnRhbC52YWx1ZSA/IC0xIDogMTtcbiAgICAgIHN0YXJ0T2Zmc2V0ID0gc2lnbiAqIHNjcm9sbE9mZnNldC52YWx1ZTtcbiAgICAgIHN0YXJ0VG91Y2ggPSBlLnRvdWNoZXNbMF1bc2l6ZVByb3BlcnR5XTtcbiAgICAgIGRpc2FibGVUcmFuc2l0aW9uLnZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Ub3VjaG1vdmUoZSkge1xuICAgICAgaWYgKCFpc092ZXJmbG93aW5nLnZhbHVlKSByZXR1cm47XG4gICAgICBjb25zdCBzaXplUHJvcGVydHkgPSBpc0hvcml6b250YWwudmFsdWUgPyAnY2xpZW50WCcgOiAnY2xpZW50WSc7XG4gICAgICBjb25zdCBzaWduID0gaXNSdGwudmFsdWUgJiYgaXNIb3Jpem9udGFsLnZhbHVlID8gLTEgOiAxO1xuICAgICAgc2Nyb2xsT2Zmc2V0LnZhbHVlID0gc2lnbiAqIChzdGFydE9mZnNldCArIHN0YXJ0VG91Y2ggLSBlLnRvdWNoZXNbMF1bc2l6ZVByb3BlcnR5XSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uVG91Y2hlbmQoZSkge1xuICAgICAgY29uc3QgbWF4U2Nyb2xsT2Zmc2V0ID0gY29udGVudFNpemUudmFsdWUgLSBjb250YWluZXJTaXplLnZhbHVlO1xuICAgICAgaWYgKHNjcm9sbE9mZnNldC52YWx1ZSA8IDAgfHwgIWlzT3ZlcmZsb3dpbmcudmFsdWUpIHtcbiAgICAgICAgc2Nyb2xsT2Zmc2V0LnZhbHVlID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsT2Zmc2V0LnZhbHVlID49IG1heFNjcm9sbE9mZnNldCkge1xuICAgICAgICBzY3JvbGxPZmZzZXQudmFsdWUgPSBtYXhTY3JvbGxPZmZzZXQ7XG4gICAgICB9XG4gICAgICBkaXNhYmxlVHJhbnNpdGlvbi52YWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgICAgIGlmICghY29udGFpbmVyUmVmLnZhbHVlKSByZXR1cm47XG4gICAgICBjb250YWluZXJSZWYudmFsdWVbaXNIb3Jpem9udGFsLnZhbHVlID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gMDtcbiAgICB9XG4gICAgY29uc3QgaXNGb2N1c2VkID0gc2hhbGxvd1JlZihmYWxzZSk7XG4gICAgZnVuY3Rpb24gb25Gb2N1c2luKGUpIHtcbiAgICAgIGlzRm9jdXNlZC52YWx1ZSA9IHRydWU7XG4gICAgICBpZiAoIWlzT3ZlcmZsb3dpbmcudmFsdWUgfHwgIWNvbnRlbnRSZWYudmFsdWUpIHJldHVybjtcblxuICAgICAgLy8gRm9jdXNlZCBlbGVtZW50IGlzIGxpa2VseSB0byBiZSB0aGUgcm9vdCBvZiBhbiBpdGVtLCBzbyBhXG4gICAgICAvLyBicmVhZHRoLWZpcnN0IHNlYXJjaCB3aWxsIHByb2JhYmx5IGZpbmQgaXQgaW4gdGhlIGZpcnN0IGl0ZXJhdGlvblxuICAgICAgZm9yIChjb25zdCBlbCBvZiBlLmNvbXBvc2VkUGF0aCgpKSB7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBjb250ZW50UmVmLnZhbHVlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKGl0ZW0gPT09IGVsKSB7XG4gICAgICAgICAgICBzY3JvbGxPZmZzZXQudmFsdWUgPSBjYWxjdWxhdGVVcGRhdGVkT2Zmc2V0KHtcbiAgICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50OiBpdGVtLFxuICAgICAgICAgICAgICBjb250YWluZXJTaXplOiBjb250YWluZXJTaXplLnZhbHVlLFxuICAgICAgICAgICAgICBjb250ZW50U2l6ZTogY29udGVudFNpemUudmFsdWUsXG4gICAgICAgICAgICAgIGlzUnRsOiBpc1J0bC52YWx1ZSxcbiAgICAgICAgICAgICAgY3VycmVudFNjcm9sbE9mZnNldDogc2Nyb2xsT2Zmc2V0LnZhbHVlLFxuICAgICAgICAgICAgICBpc0hvcml6b250YWw6IGlzSG9yaXpvbnRhbC52YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRm9jdXNvdXQoZSkge1xuICAgICAgaXNGb2N1c2VkLnZhbHVlID0gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRm9jdXMoZSkge1xuICAgICAgaWYgKCFpc0ZvY3VzZWQudmFsdWUgJiYgIShlLnJlbGF0ZWRUYXJnZXQgJiYgY29udGVudFJlZi52YWx1ZT8uY29udGFpbnMoZS5yZWxhdGVkVGFyZ2V0KSkpIGZvY3VzKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uS2V5ZG93bihlKSB7XG4gICAgICBpZiAoIWNvbnRlbnRSZWYudmFsdWUpIHJldHVybjtcbiAgICAgIGlmIChpc0hvcml6b250YWwudmFsdWUpIHtcbiAgICAgICAgaWYgKGUua2V5ID09PSAnQXJyb3dSaWdodCcpIHtcbiAgICAgICAgICBmb2N1cyhpc1J0bC52YWx1ZSA/ICdwcmV2JyA6ICduZXh0Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdBcnJvd0xlZnQnKSB7XG4gICAgICAgICAgZm9jdXMoaXNSdGwudmFsdWUgPyAnbmV4dCcgOiAncHJldicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZS5rZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAgICAgZm9jdXMoJ25leHQnKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLmtleSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICAgICAgZm9jdXMoJ3ByZXYnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGUua2V5ID09PSAnSG9tZScpIHtcbiAgICAgICAgZm9jdXMoJ2ZpcnN0Jyk7XG4gICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnRW5kJykge1xuICAgICAgICBmb2N1cygnbGFzdCcpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBmb2N1cyhsb2NhdGlvbikge1xuICAgICAgaWYgKCFjb250ZW50UmVmLnZhbHVlKSByZXR1cm47XG4gICAgICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgICAgIGNvbnN0IGZvY3VzYWJsZSA9IGZvY3VzYWJsZUNoaWxkcmVuKGNvbnRlbnRSZWYudmFsdWUpO1xuICAgICAgICBmb2N1c2FibGVbMF0/LmZvY3VzKCk7XG4gICAgICB9IGVsc2UgaWYgKGxvY2F0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgY29uc3QgZWwgPSBjb250ZW50UmVmLnZhbHVlLnF1ZXJ5U2VsZWN0b3IoJzpmb2N1cycpPy5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgIGlmIChlbCkgZWwuZm9jdXMoKTtlbHNlIGZvY3VzKCdmaXJzdCcpO1xuICAgICAgfSBlbHNlIGlmIChsb2NhdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIGNvbnN0IGVsID0gY29udGVudFJlZi52YWx1ZS5xdWVyeVNlbGVjdG9yKCc6Zm9jdXMnKT8ucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgICAgaWYgKGVsKSBlbC5mb2N1cygpO2Vsc2UgZm9jdXMoJ2xhc3QnKTtcbiAgICAgIH0gZWxzZSBpZiAobG9jYXRpb24gPT09ICdmaXJzdCcpIHtcbiAgICAgICAgY29udGVudFJlZi52YWx1ZS5maXJzdEVsZW1lbnRDaGlsZD8uZm9jdXMoKTtcbiAgICAgIH0gZWxzZSBpZiAobG9jYXRpb24gPT09ICdsYXN0Jykge1xuICAgICAgICBjb250ZW50UmVmLnZhbHVlLmxhc3RFbGVtZW50Q2hpbGQ/LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvKGxvY2F0aW9uKSB7XG4gICAgICBjb25zdCBuZXdBYnNvbHV0ZU9mZnNldCA9IHNjcm9sbE9mZnNldC52YWx1ZSArIChsb2NhdGlvbiA9PT0gJ3ByZXYnID8gLTEgOiAxKSAqIGNvbnRhaW5lclNpemUudmFsdWU7XG4gICAgICBzY3JvbGxPZmZzZXQudmFsdWUgPSBjbGFtcChuZXdBYnNvbHV0ZU9mZnNldCwgMCwgY29udGVudFNpemUudmFsdWUgLSBjb250YWluZXJTaXplLnZhbHVlKTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudFN0eWxlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIC8vIFRoaXMgYWRkcyBmcmljdGlvbiB3aGVuIHNjcm9sbGluZyB0aGUgJ3dyb25nJyB3YXkgd2hlbiBhdCBtYXggb2Zmc2V0XG4gICAgICBsZXQgc2Nyb2xsQW1vdW50ID0gc2Nyb2xsT2Zmc2V0LnZhbHVlID4gY29udGVudFNpemUudmFsdWUgLSBjb250YWluZXJTaXplLnZhbHVlID8gLShjb250ZW50U2l6ZS52YWx1ZSAtIGNvbnRhaW5lclNpemUudmFsdWUpICsgYmlhcyhjb250ZW50U2l6ZS52YWx1ZSAtIGNvbnRhaW5lclNpemUudmFsdWUgLSBzY3JvbGxPZmZzZXQudmFsdWUpIDogLXNjcm9sbE9mZnNldC52YWx1ZTtcblxuICAgICAgLy8gVGhpcyBhZGRzIGZyaWN0aW9uIHdoZW4gc2Nyb2xsaW5nIHRoZSAnd3JvbmcnIHdheSB3aGVuIGF0IG1pbiBvZmZzZXRcbiAgICAgIGlmIChzY3JvbGxPZmZzZXQudmFsdWUgPD0gMCkge1xuICAgICAgICBzY3JvbGxBbW91bnQgPSBiaWFzKC1zY3JvbGxPZmZzZXQudmFsdWUpO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2lnbiA9IGlzUnRsLnZhbHVlICYmIGlzSG9yaXpvbnRhbC52YWx1ZSA/IC0xIDogMTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSR7aXNIb3Jpem9udGFsLnZhbHVlID8gJ1gnIDogJ1knfSgke3NpZ24gKiBzY3JvbGxBbW91bnR9cHgpYCxcbiAgICAgICAgdHJhbnNpdGlvbjogZGlzYWJsZVRyYW5zaXRpb24udmFsdWUgPyAnbm9uZScgOiAnJyxcbiAgICAgICAgd2lsbENoYW5nZTogZGlzYWJsZVRyYW5zaXRpb24udmFsdWUgPyAndHJhbnNmb3JtJyA6ICcnXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IHNsb3RQcm9wcyA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICBuZXh0OiBncm91cC5uZXh0LFxuICAgICAgcHJldjogZ3JvdXAucHJldixcbiAgICAgIHNlbGVjdDogZ3JvdXAuc2VsZWN0LFxuICAgICAgaXNTZWxlY3RlZDogZ3JvdXAuaXNTZWxlY3RlZFxuICAgIH0pKTtcbiAgICBjb25zdCBoYXNBZmZpeGVzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgc3dpdGNoIChwcm9wcy5zaG93QXJyb3dzKSB7XG4gICAgICAgIC8vIEFsd2F5cyBzaG93IGFycm93cyBvbiBkZXNrdG9wICYgbW9iaWxlXG4gICAgICAgIGNhc2UgJ2Fsd2F5cyc6XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgLy8gQWx3YXlzIHNob3cgYXJyb3dzIG9uIGRlc2t0b3BcbiAgICAgICAgY2FzZSAnZGVza3RvcCc6XG4gICAgICAgICAgcmV0dXJuICFtb2JpbGUudmFsdWU7XG5cbiAgICAgICAgLy8gU2hvdyBhcnJvd3Mgb24gbW9iaWxlIHdoZW4gb3ZlcmZsb3dpbmcuXG4gICAgICAgIC8vIFRoaXMgbWF0Y2hlcyB0aGUgZGVmYXVsdCAyLjIgYmVoYXZpb3JcbiAgICAgICAgY2FzZSB0cnVlOlxuICAgICAgICAgIHJldHVybiBpc092ZXJmbG93aW5nLnZhbHVlIHx8IE1hdGguYWJzKHNjcm9sbE9mZnNldC52YWx1ZSkgPiAwO1xuXG4gICAgICAgIC8vIEFsd2F5cyBzaG93IG9uIG1vYmlsZVxuICAgICAgICBjYXNlICdtb2JpbGUnOlxuICAgICAgICAgIHJldHVybiBtb2JpbGUudmFsdWUgfHwgaXNPdmVyZmxvd2luZy52YWx1ZSB8fCBNYXRoLmFicyhzY3JvbGxPZmZzZXQudmFsdWUpID4gMDtcblxuICAgICAgICAvLyBodHRwczovL21hdGVyaWFsLmlvL2NvbXBvbmVudHMvdGFicyNzY3JvbGxhYmxlLXRhYnNcbiAgICAgICAgLy8gQWx3YXlzIHNob3cgYXJyb3dzIHdoZW5cbiAgICAgICAgLy8gb3ZlcmZsb3dlZCBvbiBkZXNrdG9wXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuICFtb2JpbGUudmFsdWUgJiYgKGlzT3ZlcmZsb3dpbmcudmFsdWUgfHwgTWF0aC5hYnMoc2Nyb2xsT2Zmc2V0LnZhbHVlKSA+IDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGhhc1ByZXYgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gTWF0aC5hYnMoc2Nyb2xsT2Zmc2V0LnZhbHVlKSA+IDA7XG4gICAgfSk7XG4gICAgY29uc3QgaGFzTmV4dCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIC8vIENoZWNrIG9uZSBzY3JvbGwgYWhlYWQgdG8ga25vdyB0aGUgd2lkdGggb2YgcmlnaHQtbW9zdCBpdGVtXG4gICAgICByZXR1cm4gY29udGVudFNpemUudmFsdWUgPiBNYXRoLmFicyhzY3JvbGxPZmZzZXQudmFsdWUpICsgY29udGFpbmVyU2l6ZS52YWx1ZTtcbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJjbGFzc1wiOiBbJ3Ytc2xpZGUtZ3JvdXAnLCB7XG4gICAgICAgICd2LXNsaWRlLWdyb3VwLS12ZXJ0aWNhbCc6ICFpc0hvcml6b250YWwudmFsdWUsXG4gICAgICAgICd2LXNsaWRlLWdyb3VwLS1oYXMtYWZmaXhlcyc6IGhhc0FmZml4ZXMudmFsdWUsXG4gICAgICAgICd2LXNsaWRlLWdyb3VwLS1pcy1vdmVyZmxvd2luZyc6IGlzT3ZlcmZsb3dpbmcudmFsdWVcbiAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGUsXG4gICAgICBcInRhYmluZGV4XCI6IGlzRm9jdXNlZC52YWx1ZSB8fCBncm91cC5zZWxlY3RlZC52YWx1ZS5sZW5ndGggPyAtMSA6IDAsXG4gICAgICBcIm9uRm9jdXNcIjogb25Gb2N1c1xuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtoYXNBZmZpeGVzLnZhbHVlICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgIFwia2V5XCI6IFwicHJldlwiLFxuICAgICAgICBcImNsYXNzXCI6IFsndi1zbGlkZS1ncm91cF9fcHJldicsIHtcbiAgICAgICAgICAndi1zbGlkZS1ncm91cF9fcHJldi0tZGlzYWJsZWQnOiAhaGFzUHJldi52YWx1ZVxuICAgICAgICB9XSxcbiAgICAgICAgXCJvbkNsaWNrXCI6ICgpID0+IHNjcm9sbFRvKCdwcmV2JylcbiAgICAgIH0sIFtzbG90cy5wcmV2Py4oc2xvdFByb3BzLnZhbHVlKSA/PyBfY3JlYXRlVk5vZGUoVkZhZGVUcmFuc2l0aW9uLCBudWxsLCB7XG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IFtfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgICAgICBcImljb25cIjogaXNSdGwudmFsdWUgPyBwcm9wcy5uZXh0SWNvbiA6IHByb3BzLnByZXZJY29uXG4gICAgICAgIH0sIG51bGwpXVxuICAgICAgfSldKSwgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJrZXlcIjogXCJjb250YWluZXJcIixcbiAgICAgICAgXCJyZWZcIjogY29udGFpbmVyUmVmLFxuICAgICAgICBcImNsYXNzXCI6IFwidi1zbGlkZS1ncm91cF9fY29udGFpbmVyXCIsXG4gICAgICAgIFwib25TY3JvbGxcIjogb25TY3JvbGxcbiAgICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcInJlZlwiOiBjb250ZW50UmVmLFxuICAgICAgICBcImNsYXNzXCI6IFwidi1zbGlkZS1ncm91cF9fY29udGVudFwiLFxuICAgICAgICBcInN0eWxlXCI6IGNvbnRlbnRTdHlsZXMudmFsdWUsXG4gICAgICAgIFwib25Ub3VjaHN0YXJ0UGFzc2l2ZVwiOiBvblRvdWNoc3RhcnQsXG4gICAgICAgIFwib25Ub3VjaG1vdmVQYXNzaXZlXCI6IG9uVG91Y2htb3ZlLFxuICAgICAgICBcIm9uVG91Y2hlbmRQYXNzaXZlXCI6IG9uVG91Y2hlbmQsXG4gICAgICAgIFwib25Gb2N1c2luXCI6IG9uRm9jdXNpbixcbiAgICAgICAgXCJvbkZvY3Vzb3V0XCI6IG9uRm9jdXNvdXQsXG4gICAgICAgIFwib25LZXlkb3duXCI6IG9uS2V5ZG93blxuICAgICAgfSwgW3Nsb3RzLmRlZmF1bHQ/LihzbG90UHJvcHMudmFsdWUpXSldKSwgaGFzQWZmaXhlcy52YWx1ZSAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgICBcImtleVwiOiBcIm5leHRcIixcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytc2xpZGUtZ3JvdXBfX25leHQnLCB7XG4gICAgICAgICAgJ3Ytc2xpZGUtZ3JvdXBfX25leHQtLWRpc2FibGVkJzogIWhhc05leHQudmFsdWVcbiAgICAgICAgfV0sXG4gICAgICAgIFwib25DbGlja1wiOiAoKSA9PiBzY3JvbGxUbygnbmV4dCcpXG4gICAgICB9LCBbc2xvdHMubmV4dD8uKHNsb3RQcm9wcy52YWx1ZSkgPz8gX2NyZWF0ZVZOb2RlKFZGYWRlVHJhbnNpdGlvbiwgbnVsbCwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX2NyZWF0ZVZOb2RlKFZJY29uLCB7XG4gICAgICAgICAgXCJpY29uXCI6IGlzUnRsLnZhbHVlID8gcHJvcHMucHJldkljb24gOiBwcm9wcy5uZXh0SWNvblxuICAgICAgICB9LCBudWxsKV1cbiAgICAgIH0pXSldXG4gICAgfSkpO1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RlZDogZ3JvdXAuc2VsZWN0ZWQsXG4gICAgICBzY3JvbGxUbyxcbiAgICAgIHNjcm9sbE9mZnNldCxcbiAgICAgIGZvY3VzXG4gICAgfTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WU2xpZGVHcm91cC5tanMubWFwIiwiLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VHcm91cEl0ZW1Qcm9wcywgdXNlR3JvdXBJdGVtIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2dyb3VwLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IFZTbGlkZUdyb3VwU3ltYm9sIH0gZnJvbSBcIi4vVlNsaWRlR3JvdXAubWpzXCI7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgVlNsaWRlR3JvdXBJdGVtID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZTbGlkZUdyb3VwSXRlbScsXG4gIHByb3BzOiBtYWtlR3JvdXBJdGVtUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAnZ3JvdXA6c2VsZWN0ZWQnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHNsaWRlR3JvdXBJdGVtID0gdXNlR3JvdXBJdGVtKHByb3BzLCBWU2xpZGVHcm91cFN5bWJvbCk7XG4gICAgcmV0dXJuICgpID0+IHNsb3RzLmRlZmF1bHQ/Lih7XG4gICAgICBpc1NlbGVjdGVkOiBzbGlkZUdyb3VwSXRlbS5pc1NlbGVjdGVkLnZhbHVlLFxuICAgICAgc2VsZWN0OiBzbGlkZUdyb3VwSXRlbS5zZWxlY3QsXG4gICAgICB0b2dnbGU6IHNsaWRlR3JvdXBJdGVtLnRvZ2dsZSxcbiAgICAgIHNlbGVjdGVkQ2xhc3M6IHNsaWRlR3JvdXBJdGVtLnNlbGVjdGVkQ2xhc3MudmFsdWVcbiAgICB9KTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WU2xpZGVHcm91cEl0ZW0ubWpzLm1hcCIsImltcG9ydCB7IG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMsIHJlc29sdmVEaXJlY3RpdmUgYXMgX3Jlc29sdmVEaXJlY3RpdmUsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WU25hY2tiYXIuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZEZWZhdWx0c1Byb3ZpZGVyIH0gZnJvbSBcIi4uL1ZEZWZhdWx0c1Byb3ZpZGVyL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVk92ZXJsYXkgfSBmcm9tIFwiLi4vVk92ZXJsYXkvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBtYWtlVk92ZXJsYXlQcm9wcyB9IGZyb20gXCIuLi9WT3ZlcmxheS9WT3ZlcmxheS5tanNcIjsgLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IGZvcndhcmRSZWZzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvcndhcmRSZWZzLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUxvY2F0aW9uUHJvcHMsIHVzZUxvY2F0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2xvY2F0aW9uLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVBvc2l0aW9uUHJvcHMsIHVzZVBvc2l0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Bvc2l0aW9uLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IHVzZVNjb3BlSWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc2NvcGVJZC5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7XG5pbXBvcnQgeyBnZW5PdmVybGF5cywgbWFrZVZhcmlhbnRQcm9wcywgdXNlVmFyaWFudCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy92YXJpYW50Lm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IG1lcmdlUHJvcHMsIG9uTW91bnRlZCwgcmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBvbWl0LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWU25hY2tiYXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIG11bHRpTGluZTogQm9vbGVhbixcbiAgdGltZW91dDoge1xuICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgZGVmYXVsdDogNTAwMFxuICB9LFxuICB2ZXJ0aWNhbDogQm9vbGVhbixcbiAgLi4ubWFrZUxvY2F0aW9uUHJvcHMoe1xuICAgIGxvY2F0aW9uOiAnYm90dG9tJ1xuICB9KSxcbiAgLi4ubWFrZVBvc2l0aW9uUHJvcHMoKSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlVmFyaWFudFByb3BzKCksXG4gIC4uLm1ha2VUaGVtZVByb3BzKCksXG4gIC4uLm9taXQobWFrZVZPdmVybGF5UHJvcHMoe1xuICAgIHRyYW5zaXRpb246ICd2LXNuYWNrYmFyLXRyYW5zaXRpb24nXG4gIH0pLCBbJ3BlcnNpc3RlbnQnLCAnbm9DbGlja0FuaW1hdGlvbicsICdzY3JpbScsICdzY3JvbGxTdHJhdGVneSddKVxufSwgJ1ZTbmFja2JhcicpO1xuZXhwb3J0IGNvbnN0IFZTbmFja2JhciA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWU25hY2tiYXInLFxuICBwcm9wczogbWFrZVZTbmFja2JhclByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdiA9PiB0cnVlXG4gIH0sXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3QgaXNBY3RpdmUgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgY29uc3Qge1xuICAgICAgbG9jYXRpb25TdHlsZXNcbiAgICB9ID0gdXNlTG9jYXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHBvc2l0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VQb3NpdGlvbihwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgc2NvcGVJZFxuICAgIH0gPSB1c2VTY29wZUlkKCk7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgY29sb3JDbGFzc2VzLFxuICAgICAgY29sb3JTdHlsZXMsXG4gICAgICB2YXJpYW50Q2xhc3Nlc1xuICAgIH0gPSB1c2VWYXJpYW50KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICByb3VuZGVkQ2xhc3Nlc1xuICAgIH0gPSB1c2VSb3VuZGVkKHByb3BzKTtcbiAgICBjb25zdCBvdmVybGF5ID0gcmVmKCk7XG4gICAgd2F0Y2goaXNBY3RpdmUsIHN0YXJ0VGltZW91dCk7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMudGltZW91dCwgc3RhcnRUaW1lb3V0KTtcbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgaWYgKGlzQWN0aXZlLnZhbHVlKSBzdGFydFRpbWVvdXQoKTtcbiAgICB9KTtcbiAgICBsZXQgYWN0aXZlVGltZW91dCA9IC0xO1xuICAgIGZ1bmN0aW9uIHN0YXJ0VGltZW91dCgpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoYWN0aXZlVGltZW91dCk7XG4gICAgICBjb25zdCB0aW1lb3V0ID0gTnVtYmVyKHByb3BzLnRpbWVvdXQpO1xuICAgICAgaWYgKCFpc0FjdGl2ZS52YWx1ZSB8fCB0aW1lb3V0ID09PSAtMSkgcmV0dXJuO1xuICAgICAgYWN0aXZlVGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaXNBY3RpdmUudmFsdWUgPSBmYWxzZTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblBvaW50ZXJlbnRlcigpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoYWN0aXZlVGltZW91dCk7XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBbb3ZlcmxheVByb3BzXSA9IFZPdmVybGF5LmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVk92ZXJsYXksIF9tZXJnZVByb3BzKHtcbiAgICAgICAgXCJyZWZcIjogb3ZlcmxheSxcbiAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytc25hY2tiYXInLCB7XG4gICAgICAgICAgJ3Ytc25hY2tiYXItLWFjdGl2ZSc6IGlzQWN0aXZlLnZhbHVlLFxuICAgICAgICAgICd2LXNuYWNrYmFyLS1tdWx0aS1saW5lJzogcHJvcHMubXVsdGlMaW5lICYmICFwcm9wcy52ZXJ0aWNhbCxcbiAgICAgICAgICAndi1zbmFja2Jhci0tdmVydGljYWwnOiBwcm9wcy52ZXJ0aWNhbFxuICAgICAgICB9LCBwb3NpdGlvbkNsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSwgb3ZlcmxheVByb3BzLCB7XG4gICAgICAgIFwibW9kZWxWYWx1ZVwiOiBpc0FjdGl2ZS52YWx1ZSxcbiAgICAgICAgXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiBpc0FjdGl2ZS52YWx1ZSA9ICRldmVudCxcbiAgICAgICAgXCJjb250ZW50UHJvcHNcIjogbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgY2xhc3M6IFsndi1zbmFja2Jhcl9fd3JhcHBlcicsIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgY29sb3JDbGFzc2VzLnZhbHVlLCByb3VuZGVkQ2xhc3Nlcy52YWx1ZSwgdmFyaWFudENsYXNzZXMudmFsdWVdLFxuICAgICAgICAgIHN0eWxlOiBbbG9jYXRpb25TdHlsZXMudmFsdWUsIGNvbG9yU3R5bGVzLnZhbHVlXSxcbiAgICAgICAgICBvblBvaW50ZXJlbnRlcixcbiAgICAgICAgICBvblBvaW50ZXJsZWF2ZTogc3RhcnRUaW1lb3V0XG4gICAgICAgIH0sIG92ZXJsYXlQcm9wcy5jb250ZW50UHJvcHMpLFxuICAgICAgICBcInBlcnNpc3RlbnRcIjogdHJ1ZSxcbiAgICAgICAgXCJub0NsaWNrQW5pbWF0aW9uXCI6IHRydWUsXG4gICAgICAgIFwic2NyaW1cIjogZmFsc2UsXG4gICAgICAgIFwic2Nyb2xsU3RyYXRlZ3lcIjogXCJub25lXCIsXG4gICAgICAgIFwiX2Rpc2FibGVHbG9iYWxTdGFja1wiOiB0cnVlXG4gICAgICB9LCBzY29wZUlkKSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbZ2VuT3ZlcmxheXMoZmFsc2UsICd2LXNuYWNrYmFyJyksIHNsb3RzLmRlZmF1bHQgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcImNsYXNzXCI6IFwidi1zbmFja2Jhcl9fY29udGVudFwiLFxuICAgICAgICAgIFwicm9sZVwiOiBcInN0YXR1c1wiLFxuICAgICAgICAgIFwiYXJpYS1saXZlXCI6IFwicG9saXRlXCJcbiAgICAgICAgfSwgW3Nsb3RzLmRlZmF1bHQoKV0pLCBzbG90cy5hY3Rpb25zICYmIF9jcmVhdGVWTm9kZShWRGVmYXVsdHNQcm92aWRlciwge1xuICAgICAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICAgICAgVkJ0bjoge1xuICAgICAgICAgICAgICB2YXJpYW50OiAndGV4dCcsXG4gICAgICAgICAgICAgIHJpcHBsZTogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXNuYWNrYmFyX19hY3Rpb25zXCJcbiAgICAgICAgICB9LCBbc2xvdHMuYWN0aW9ucygpXSldXG4gICAgICAgIH0pXSxcbiAgICAgICAgYWN0aXZhdG9yOiBzbG90cy5hY3RpdmF0b3JcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3J3YXJkUmVmcyh7fSwgb3ZlcmxheSk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlNuYWNrYmFyLm1qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WU3dpdGNoLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWU2NhbGVUcmFuc2l0aW9uIH0gZnJvbSBcIi4uL3RyYW5zaXRpb25zL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVkljb24gfSBmcm9tIFwiLi4vVkljb24vaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBtYWtlVklucHV0UHJvcHMsIFZJbnB1dCB9IGZyb20gXCIuLi9WSW5wdXQvVklucHV0Lm1qc1wiO1xuaW1wb3J0IHsgVlByb2dyZXNzQ2lyY3VsYXIgfSBmcm9tIFwiLi4vVlByb2dyZXNzQ2lyY3VsYXIvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBtYWtlVlNlbGVjdGlvbkNvbnRyb2xQcm9wcywgVlNlbGVjdGlvbkNvbnRyb2wgfSBmcm9tIFwiLi4vVlNlbGVjdGlvbkNvbnRyb2wvVlNlbGVjdGlvbkNvbnRyb2wubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VGb2N1cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb2N1cy5tanNcIjtcbmltcG9ydCB7IExvYWRlclNsb3QsIHVzZUxvYWRlciB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9sb2FkZXIubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCByZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZmlsdGVySW5wdXRBdHRycywgZ2VuZXJpY0NvbXBvbmVudCwgZ2V0VWlkLCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWU3dpdGNoUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBpbmRldGVybWluYXRlOiBCb29sZWFuLFxuICBpbnNldDogQm9vbGVhbixcbiAgZmxhdDogQm9vbGVhbixcbiAgbG9hZGluZzoge1xuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0sXG4gIC4uLm1ha2VWSW5wdXRQcm9wcygpLFxuICAuLi5tYWtlVlNlbGVjdGlvbkNvbnRyb2xQcm9wcygpXG59LCAnVlN3aXRjaCcpO1xuZXhwb3J0IGNvbnN0IFZTd2l0Y2ggPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlN3aXRjaCcsXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG4gIHByb3BzOiBtYWtlVlN3aXRjaFByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTpmb2N1c2VkJzogZm9jdXNlZCA9PiB0cnVlLFxuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6ICgpID0+IHRydWUsXG4gICAgJ3VwZGF0ZTppbmRldGVybWluYXRlJzogdmFsID0+IHRydWVcbiAgfSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgYXR0cnMsXG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGluZGV0ZXJtaW5hdGUgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdpbmRldGVybWluYXRlJyk7XG4gICAgY29uc3QgbW9kZWwgPSB1c2VQcm94aWVkTW9kZWwocHJvcHMsICdtb2RlbFZhbHVlJyk7XG4gICAgY29uc3Qge1xuICAgICAgbG9hZGVyQ2xhc3Nlc1xuICAgIH0gPSB1c2VMb2FkZXIocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRm9jdXNlZCxcbiAgICAgIGZvY3VzLFxuICAgICAgYmx1clxuICAgIH0gPSB1c2VGb2N1cyhwcm9wcyk7XG4gICAgY29uc3QgY29udHJvbCA9IHJlZigpO1xuICAgIGNvbnN0IGxvYWRlckNvbG9yID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHR5cGVvZiBwcm9wcy5sb2FkaW5nID09PSAnc3RyaW5nJyAmJiBwcm9wcy5sb2FkaW5nICE9PSAnJyA/IHByb3BzLmxvYWRpbmcgOiBwcm9wcy5jb2xvcjtcbiAgICB9KTtcbiAgICBjb25zdCB1aWQgPSBnZXRVaWQoKTtcbiAgICBjb25zdCBpZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmlkIHx8IGBzd2l0Y2gtJHt1aWR9YCk7XG4gICAgZnVuY3Rpb24gb25DaGFuZ2UoKSB7XG4gICAgICBpZiAoaW5kZXRlcm1pbmF0ZS52YWx1ZSkge1xuICAgICAgICBpbmRldGVybWluYXRlLnZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uVHJhY2tDbGljayhlKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29udHJvbC52YWx1ZT8uaW5wdXQ/LmNsaWNrKCk7XG4gICAgfVxuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBbcm9vdEF0dHJzLCBjb250cm9sQXR0cnNdID0gZmlsdGVySW5wdXRBdHRycyhhdHRycyk7XG4gICAgICBjb25zdCBbaW5wdXRQcm9wcywgXzFdID0gVklucHV0LmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIGNvbnN0IFtjb250cm9sUHJvcHMsIF8yXSA9IFZTZWxlY3Rpb25Db250cm9sLmZpbHRlclByb3BzKHByb3BzKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVklucHV0LCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXN3aXRjaCcsIHtcbiAgICAgICAgICAndi1zd2l0Y2gtLWluc2V0JzogcHJvcHMuaW5zZXRcbiAgICAgICAgfSwge1xuICAgICAgICAgICd2LXN3aXRjaC0taW5kZXRlcm1pbmF0ZSc6IGluZGV0ZXJtaW5hdGUudmFsdWVcbiAgICAgICAgfSwgbG9hZGVyQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgICB9LCByb290QXR0cnMsIGlucHV0UHJvcHMsIHtcbiAgICAgICAgXCJpZFwiOiBpZC52YWx1ZSxcbiAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZC52YWx1ZVxuICAgICAgfSksIHtcbiAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgIGRlZmF1bHQ6IF9yZWYyID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBtZXNzYWdlc0lkLFxuICAgICAgICAgICAgaXNEaXNhYmxlZCxcbiAgICAgICAgICAgIGlzUmVhZG9ubHksXG4gICAgICAgICAgICBpc1ZhbGlkXG4gICAgICAgICAgfSA9IF9yZWYyO1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVlNlbGVjdGlvbkNvbnRyb2wsIF9tZXJnZVByb3BzKHtcbiAgICAgICAgICAgIFwicmVmXCI6IGNvbnRyb2xcbiAgICAgICAgICB9LCBjb250cm9sUHJvcHMsIHtcbiAgICAgICAgICAgIFwibW9kZWxWYWx1ZVwiOiBtb2RlbC52YWx1ZSxcbiAgICAgICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBbJGV2ZW50ID0+IG1vZGVsLnZhbHVlID0gJGV2ZW50LCBvbkNoYW5nZV0sXG4gICAgICAgICAgICBcImlkXCI6IGlkLnZhbHVlLFxuICAgICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IG1lc3NhZ2VzSWQudmFsdWUsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJjaGVja2JveFwiLFxuICAgICAgICAgICAgXCJhcmlhLWNoZWNrZWRcIjogaW5kZXRlcm1pbmF0ZS52YWx1ZSA/ICdtaXhlZCcgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBcImRpc2FibGVkXCI6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICAgICAgICBcInJlYWRvbmx5XCI6IGlzUmVhZG9ubHkudmFsdWUsXG4gICAgICAgICAgICBcIm9uRm9jdXNcIjogZm9jdXMsXG4gICAgICAgICAgICBcIm9uQmx1clwiOiBibHVyXG4gICAgICAgICAgfSwgY29udHJvbEF0dHJzKSwge1xuICAgICAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgICAgICBkZWZhdWx0OiBfcmVmMyA9PiB7XG4gICAgICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yQ2xhc3NlcyxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgICAgICAgICAgICAgfSA9IF9yZWYzO1xuICAgICAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFsndi1zd2l0Y2hfX3RyYWNrJywgLi4uYmFja2dyb3VuZENvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgICAgICAgICAgXCJzdHlsZVwiOiBiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWUsXG4gICAgICAgICAgICAgICAgXCJvbkNsaWNrXCI6IG9uVHJhY2tDbGlja1xuICAgICAgICAgICAgICB9LCBudWxsKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnB1dDogX3JlZjQgPT4ge1xuICAgICAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgICAgIGlucHV0Tm9kZSxcbiAgICAgICAgICAgICAgICBpY29uLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzXG4gICAgICAgICAgICAgIH0gPSBfcmVmNDtcbiAgICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtpbnB1dE5vZGUsIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBbJ3Ytc3dpdGNoX190aHVtYicsIHtcbiAgICAgICAgICAgICAgICAgICd2LXN3aXRjaF9fdGh1bWItLWZpbGxlZCc6IGljb24gfHwgcHJvcHMubG9hZGluZ1xuICAgICAgICAgICAgICAgIH0sIHByb3BzLmluc2V0ID8gdW5kZWZpbmVkIDogYmFja2dyb3VuZENvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgICAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5pbnNldCA/IHVuZGVmaW5lZCA6IGJhY2tncm91bmRDb2xvclN0eWxlcy52YWx1ZVxuICAgICAgICAgICAgICB9LCBbX2NyZWF0ZVZOb2RlKFZTY2FsZVRyYW5zaXRpb24sIG51bGwsIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbIXByb3BzLmxvYWRpbmcgPyBpY29uICYmIF9jcmVhdGVWTm9kZShWSWNvbiwge1xuICAgICAgICAgICAgICAgICAgXCJrZXlcIjogaWNvbixcbiAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBpY29uLFxuICAgICAgICAgICAgICAgICAgXCJzaXplXCI6IFwieC1zbWFsbFwiXG4gICAgICAgICAgICAgICAgfSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoTG9hZGVyU2xvdCwge1xuICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidi1zd2l0Y2hcIixcbiAgICAgICAgICAgICAgICAgIFwiYWN0aXZlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICBcImNvbG9yXCI6IGlzVmFsaWQudmFsdWUgPT09IGZhbHNlID8gdW5kZWZpbmVkIDogbG9hZGVyQ29sb3IudmFsdWVcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OiBzbG90UHJvcHMgPT4gc2xvdHMubG9hZGVyID8gc2xvdHMubG9hZGVyKHNsb3RQcm9wcykgOiBfY3JlYXRlVk5vZGUoVlByb2dyZXNzQ2lyY3VsYXIsIHtcbiAgICAgICAgICAgICAgICAgICAgXCJhY3RpdmVcIjogc2xvdFByb3BzLmlzQWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICBcImNvbG9yXCI6IHNsb3RQcm9wcy5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRldGVybWluYXRlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwic2l6ZVwiOiBcIjE2XCIsXG4gICAgICAgICAgICAgICAgICAgIFwid2lkdGhcIjogXCIyXCJcbiAgICAgICAgICAgICAgICAgIH0sIG51bGwpXG4gICAgICAgICAgICAgICAgfSldXG4gICAgICAgICAgICAgIH0pXSldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZTd2l0Y2gubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WU3lzdGVtQmFyLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQmFja2dyb3VuZENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IG1ha2VMYXlvdXRJdGVtUHJvcHMsIHVzZUxheW91dEl0ZW0gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbGF5b3V0Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVJvdW5kZWRQcm9wcywgdXNlUm91bmRlZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9yb3VuZGVkLm1qc1wiO1xuaW1wb3J0IHsgdXNlU3NyQm9vdCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zc3JCb290Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHNoYWxsb3dSZWYsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZTeXN0ZW1CYXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIGNvbG9yOiBTdHJpbmcsXG4gIGhlaWdodDogW051bWJlciwgU3RyaW5nXSxcbiAgd2luZG93OiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKCksXG4gIC4uLm1ha2VMYXlvdXRJdGVtUHJvcHMoKSxcbiAgLi4ubWFrZVJvdW5kZWRQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZTeXN0ZW1CYXInKTtcbmV4cG9ydCBjb25zdCBWU3lzdGVtQmFyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZTeXN0ZW1CYXInLFxuICBwcm9wczogbWFrZVZTeXN0ZW1CYXJQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lQ2xhc3Nlc1xuICAgIH0gPSBwcm92aWRlVGhlbWUocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHRvUmVmKHByb3BzLCAnY29sb3InKSk7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uQ2xhc3Nlc1xuICAgIH0gPSB1c2VFbGV2YXRpb24ocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNzckJvb3RTdHlsZXNcbiAgICB9ID0gdXNlU3NyQm9vdCgpO1xuICAgIGNvbnN0IGhlaWdodCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmhlaWdodCA/PyAocHJvcHMud2luZG93ID8gMzIgOiAyNCkpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxheW91dEl0ZW1TdHlsZXNcbiAgICB9ID0gdXNlTGF5b3V0SXRlbSh7XG4gICAgICBpZDogcHJvcHMubmFtZSxcbiAgICAgIG9yZGVyOiBjb21wdXRlZCgoKSA9PiBwYXJzZUludChwcm9wcy5vcmRlciwgMTApKSxcbiAgICAgIHBvc2l0aW9uOiBzaGFsbG93UmVmKCd0b3AnKSxcbiAgICAgIGxheW91dFNpemU6IGhlaWdodCxcbiAgICAgIGVsZW1lbnRTaXplOiBoZWlnaHQsXG4gICAgICBhY3RpdmU6IGNvbXB1dGVkKCgpID0+IHRydWUpLFxuICAgICAgYWJzb2x1dGU6IHRvUmVmKHByb3BzLCAnYWJzb2x1dGUnKVxuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi1zeXN0ZW0tYmFyJywge1xuICAgICAgICAndi1zeXN0ZW0tYmFyLS13aW5kb3cnOiBwcm9wcy53aW5kb3dcbiAgICAgIH0sIHRoZW1lQ2xhc3Nlcy52YWx1ZSwgYmFja2dyb3VuZENvbG9yQ2xhc3Nlcy52YWx1ZSwgZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW2JhY2tncm91bmRDb2xvclN0eWxlcy52YWx1ZSwgbGF5b3V0SXRlbVN0eWxlcy52YWx1ZSwgc3NyQm9vdFN0eWxlcy52YWx1ZSwgcHJvcHMuc3R5bGVdXG4gICAgfSwgc2xvdHMpKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlN5c3RlbUJhci5tanMubWFwIiwiLy8gVHlwZXNcblxuZXhwb3J0IGNvbnN0IFZUYWJzU3ltYm9sID0gU3ltYm9sLmZvcigndnVldGlmeTp2LXRhYnMnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlZC5tanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZUYWIuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IG1ha2VWQnRuUHJvcHMsIFZCdG4gfSBmcm9tIFwiLi4vVkJ0bi9WQnRuLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlVGV4dENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCByZWYsIHNoYWxsb3dSZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgVlRhYnNTeW1ib2wgfSBmcm9tIFwiLi9zaGFyZWQubWpzXCI7XG5pbXBvcnQgeyBhbmltYXRlLCBnZW5lcmljQ29tcG9uZW50LCBvbWl0LCBwcm9wc0ZhY3RvcnksIHN0YW5kYXJkRWFzaW5nLCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVlRhYlByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZml4ZWQ6IEJvb2xlYW4sXG4gIHNsaWRlckNvbG9yOiBTdHJpbmcsXG4gIGhpZGVTbGlkZXI6IEJvb2xlYW4sXG4gIGRpcmVjdGlvbjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnaG9yaXpvbnRhbCdcbiAgfSxcbiAgLi4ub21pdChtYWtlVkJ0blByb3BzKHtcbiAgICBzZWxlY3RlZENsYXNzOiAndi10YWItLXNlbGVjdGVkJyxcbiAgICB2YXJpYW50OiAndGV4dCdcbiAgfSksIFsnYWN0aXZlJywgJ2Jsb2NrJywgJ2ZsYXQnLCAnbG9jYXRpb24nLCAncG9zaXRpb24nLCAnc3ltYm9sJ10pXG59LCAnVlRhYicpO1xuZXhwb3J0IGNvbnN0IFZUYWIgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlRhYicsXG4gIHByb3BzOiBtYWtlVlRhYlByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzLFxuICAgICAgYXR0cnNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0ZXh0Q29sb3JDbGFzc2VzOiBzbGlkZXJDb2xvckNsYXNzZXMsXG4gICAgICB0ZXh0Q29sb3JTdHlsZXM6IHNsaWRlckNvbG9yU3R5bGVzXG4gICAgfSA9IHVzZVRleHRDb2xvcihwcm9wcywgJ3NsaWRlckNvbG9yJyk7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpO1xuICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgICBjb25zdCByb290RWwgPSByZWYoKTtcbiAgICBjb25zdCBzbGlkZXJFbCA9IHJlZigpO1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlcihfcmVmMikge1xuICAgICAgbGV0IHtcbiAgICAgICAgdmFsdWVcbiAgICAgIH0gPSBfcmVmMjtcbiAgICAgIGlzU2VsZWN0ZWQudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBjb25zdCBwcmV2RWwgPSByb290RWwudmFsdWU/LiRlbC5wYXJlbnRFbGVtZW50Py5xdWVyeVNlbGVjdG9yKCcudi10YWItLXNlbGVjdGVkIC52LXRhYl9fc2xpZGVyJyk7XG4gICAgICAgIGNvbnN0IG5leHRFbCA9IHNsaWRlckVsLnZhbHVlO1xuICAgICAgICBpZiAoIXByZXZFbCB8fCAhbmV4dEVsKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGNvbG9yID0gZ2V0Q29tcHV0ZWRTdHlsZShwcmV2RWwpLmNvbG9yO1xuICAgICAgICBjb25zdCBwcmV2Qm94ID0gcHJldkVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBuZXh0Qm94ID0gbmV4dEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCB4eSA9IGlzSG9yaXpvbnRhbC52YWx1ZSA/ICd4JyA6ICd5JztcbiAgICAgICAgY29uc3QgWFkgPSBpc0hvcml6b250YWwudmFsdWUgPyAnWCcgOiAnWSc7XG4gICAgICAgIGNvbnN0IHJpZ2h0Qm90dG9tID0gaXNIb3Jpem9udGFsLnZhbHVlID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICAgICAgICBjb25zdCB3aWR0aEhlaWdodCA9IGlzSG9yaXpvbnRhbC52YWx1ZSA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICAgICAgY29uc3QgcHJldlBvcyA9IHByZXZCb3hbeHldO1xuICAgICAgICBjb25zdCBuZXh0UG9zID0gbmV4dEJveFt4eV07XG4gICAgICAgIGNvbnN0IGRlbHRhID0gcHJldlBvcyA+IG5leHRQb3MgPyBwcmV2Qm94W3JpZ2h0Qm90dG9tXSAtIG5leHRCb3hbcmlnaHRCb3R0b21dIDogcHJldkJveFt4eV0gLSBuZXh0Qm94W3h5XTtcbiAgICAgICAgY29uc3Qgb3JpZ2luID0gTWF0aC5zaWduKGRlbHRhKSA+IDAgPyBpc0hvcml6b250YWwudmFsdWUgPyAncmlnaHQnIDogJ2JvdHRvbScgOiBNYXRoLnNpZ24oZGVsdGEpIDwgMCA/IGlzSG9yaXpvbnRhbC52YWx1ZSA/ICdsZWZ0JyA6ICd0b3AnIDogJ2NlbnRlcic7XG4gICAgICAgIGNvbnN0IHNpemUgPSBNYXRoLmFicyhkZWx0YSkgKyAoTWF0aC5zaWduKGRlbHRhKSA8IDAgPyBwcmV2Qm94W3dpZHRoSGVpZ2h0XSA6IG5leHRCb3hbd2lkdGhIZWlnaHRdKTtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBzaXplIC8gTWF0aC5tYXgocHJldkJveFt3aWR0aEhlaWdodF0sIG5leHRCb3hbd2lkdGhIZWlnaHRdKSB8fCAwO1xuICAgICAgICBjb25zdCBpbml0aWFsU2NhbGUgPSBwcmV2Qm94W3dpZHRoSGVpZ2h0XSAvIG5leHRCb3hbd2lkdGhIZWlnaHRdIHx8IDA7XG4gICAgICAgIGNvbnN0IHNpZ21hID0gMS41O1xuICAgICAgICBhbmltYXRlKG5leHRFbCwge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogW2NvbG9yLCAnY3VycmVudGNvbG9yJ10sXG4gICAgICAgICAgdHJhbnNmb3JtOiBbYHRyYW5zbGF0ZSR7WFl9KCR7ZGVsdGF9cHgpIHNjYWxlJHtYWX0oJHtpbml0aWFsU2NhbGV9KWAsIGB0cmFuc2xhdGUke1hZfSgke2RlbHRhIC8gc2lnbWF9cHgpIHNjYWxlJHtYWX0oJHsoc2NhbGUgLSAxKSAvIHNpZ21hICsgMX0pYCwgJ25vbmUnXSxcbiAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46IEFycmF5KDMpLmZpbGwob3JpZ2luKVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZHVyYXRpb246IDIyNSxcbiAgICAgICAgICBlYXNpbmc6IHN0YW5kYXJkRWFzaW5nXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgW2J0blByb3BzXSA9IFZCdG4uZmlsdGVyUHJvcHMocHJvcHMpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShWQnRuLCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwic3ltYm9sXCI6IFZUYWJzU3ltYm9sLFxuICAgICAgICBcInJlZlwiOiByb290RWwsXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXRhYicsIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZSxcbiAgICAgICAgXCJ0YWJpbmRleFwiOiBpc1NlbGVjdGVkLnZhbHVlID8gMCA6IC0xLFxuICAgICAgICBcInJvbGVcIjogXCJ0YWJcIixcbiAgICAgICAgXCJhcmlhLXNlbGVjdGVkXCI6IFN0cmluZyhpc1NlbGVjdGVkLnZhbHVlKSxcbiAgICAgICAgXCJhY3RpdmVcIjogZmFsc2VcbiAgICAgIH0sIGJ0blByb3BzLCBhdHRycywge1xuICAgICAgICBcImJsb2NrXCI6IHByb3BzLmZpeGVkLFxuICAgICAgICBcIm1heFdpZHRoXCI6IHByb3BzLmZpeGVkID8gMzAwIDogdW5kZWZpbmVkLFxuICAgICAgICBcIm9uR3JvdXA6c2VsZWN0ZWRcIjogdXBkYXRlU2xpZGVyXG4gICAgICB9KSwge1xuICAgICAgICBkZWZhdWx0OiAoKSA9PiBbc2xvdHMuZGVmYXVsdD8uKCkgPz8gcHJvcHMudGV4dCwgIXByb3BzLmhpZGVTbGlkZXIgJiYgX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICBcInJlZlwiOiBzbGlkZXJFbCxcbiAgICAgICAgICBcImNsYXNzXCI6IFsndi10YWJfX3NsaWRlcicsIHNsaWRlckNvbG9yQ2xhc3Nlcy52YWx1ZV0sXG4gICAgICAgICAgXCJzdHlsZVwiOiBzbGlkZXJDb2xvclN0eWxlcy52YWx1ZVxuICAgICAgICB9LCBudWxsKV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WVGFiLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG1lcmdlUHJvcHMgYXMgX21lcmdlUHJvcHMgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlRhYnMuY3NzXCI7XG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFZUYWIgfSBmcm9tIFwiLi9WVGFiLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVZTbGlkZUdyb3VwUHJvcHMsIFZTbGlkZUdyb3VwIH0gZnJvbSBcIi4uL1ZTbGlkZUdyb3VwL1ZTbGlkZUdyb3VwLm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQmFja2dyb3VuZENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZURlZmF1bHRzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlZmF1bHRzLm1qc1wiO1xuaW1wb3J0IHsgbWFrZURlbnNpdHlQcm9wcywgdXNlRGVuc2l0eSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZW5zaXR5Lm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQsIGdlbmVyaWNDb21wb25lbnQsIGlzT2JqZWN0LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuaW1wb3J0IHsgVlRhYnNTeW1ib2wgfSBmcm9tIFwiLi9zaGFyZWQubWpzXCI7XG5mdW5jdGlvbiBwYXJzZUl0ZW1zKGl0ZW1zKSB7XG4gIGlmICghaXRlbXMpIHJldHVybiBbXTtcbiAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IHtcbiAgICBpZiAoIWlzT2JqZWN0KGl0ZW0pKSByZXR1cm4ge1xuICAgICAgdGV4dDogaXRlbSxcbiAgICAgIHZhbHVlOiBpdGVtXG4gICAgfTtcbiAgICByZXR1cm4gaXRlbTtcbiAgfSk7XG59XG5leHBvcnQgY29uc3QgbWFrZVZUYWJzUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhbGlnblRhYnM6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ3N0YXJ0J1xuICB9LFxuICBjb2xvcjogU3RyaW5nLFxuICBmaXhlZFRhYnM6IEJvb2xlYW4sXG4gIGl0ZW1zOiB7XG4gICAgdHlwZTogQXJyYXksXG4gICAgZGVmYXVsdDogKCkgPT4gW11cbiAgfSxcbiAgc3RhY2tlZDogQm9vbGVhbixcbiAgYmdDb2xvcjogU3RyaW5nLFxuICBncm93OiBCb29sZWFuLFxuICBoZWlnaHQ6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICBoaWRlU2xpZGVyOiBCb29sZWFuLFxuICBzbGlkZXJDb2xvcjogU3RyaW5nLFxuICAuLi5tYWtlVlNsaWRlR3JvdXBQcm9wcyh7XG4gICAgbWFuZGF0b3J5OiAnZm9yY2UnXG4gIH0pLFxuICAuLi5tYWtlRGVuc2l0eVByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpXG59LCAnVlRhYnMnKTtcbmV4cG9ydCBjb25zdCBWVGFicyA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWVGFicycsXG4gIHByb3BzOiBtYWtlVlRhYnNQcm9wcygpLFxuICBlbWl0czoge1xuICAgICd1cGRhdGU6bW9kZWxWYWx1ZSc6IHYgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IG1vZGVsID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHBhcnNlZEl0ZW1zID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VJdGVtcyhwcm9wcy5pdGVtcykpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRlbnNpdHlDbGFzc2VzXG4gICAgfSA9IHVzZURlbnNpdHkocHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJhY2tncm91bmRDb2xvckNsYXNzZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHRvUmVmKHByb3BzLCAnYmdDb2xvcicpKTtcbiAgICBwcm92aWRlRGVmYXVsdHMoe1xuICAgICAgVlRhYjoge1xuICAgICAgICBjb2xvcjogdG9SZWYocHJvcHMsICdjb2xvcicpLFxuICAgICAgICBkaXJlY3Rpb246IHRvUmVmKHByb3BzLCAnZGlyZWN0aW9uJyksXG4gICAgICAgIHN0YWNrZWQ6IHRvUmVmKHByb3BzLCAnc3RhY2tlZCcpLFxuICAgICAgICBmaXhlZDogdG9SZWYocHJvcHMsICdmaXhlZFRhYnMnKSxcbiAgICAgICAgc2xpZGVyQ29sb3I6IHRvUmVmKHByb3BzLCAnc2xpZGVyQ29sb3InKSxcbiAgICAgICAgaGlkZVNsaWRlcjogdG9SZWYocHJvcHMsICdoaWRlU2xpZGVyJylcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgW3NsaWRlR3JvdXBQcm9wc10gPSBWU2xpZGVHcm91cC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZTbGlkZUdyb3VwLCBfbWVyZ2VQcm9wcyhzbGlkZUdyb3VwUHJvcHMsIHtcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IG1vZGVsLnZhbHVlID0gJGV2ZW50LFxuICAgICAgICBcImNsYXNzXCI6IFsndi10YWJzJywgYHYtdGFicy0tJHtwcm9wcy5kaXJlY3Rpb259YCwgYHYtdGFicy0tYWxpZ24tdGFicy0ke3Byb3BzLmFsaWduVGFic31gLCB7XG4gICAgICAgICAgJ3YtdGFicy0tZml4ZWQtdGFicyc6IHByb3BzLmZpeGVkVGFicyxcbiAgICAgICAgICAndi10YWJzLS1ncm93JzogcHJvcHMuZ3JvdyxcbiAgICAgICAgICAndi10YWJzLS1zdGFja2VkJzogcHJvcHMuc3RhY2tlZFxuICAgICAgICB9LCBkZW5zaXR5Q2xhc3Nlcy52YWx1ZSwgYmFja2dyb3VuZENvbG9yQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgICBcInN0eWxlXCI6IFt7XG4gICAgICAgICAgJy0tdi10YWJzLWhlaWdodCc6IGNvbnZlcnRUb1VuaXQocHJvcHMuaGVpZ2h0KVxuICAgICAgICB9LCBiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWUsIHByb3BzLnN0eWxlXSxcbiAgICAgICAgXCJyb2xlXCI6IFwidGFibGlzdFwiLFxuICAgICAgICBcInN5bWJvbFwiOiBWVGFic1N5bWJvbFxuICAgICAgfSksIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmRlZmF1bHQgPyBzbG90cy5kZWZhdWx0KCkgOiBwYXJzZWRJdGVtcy52YWx1ZS5tYXAoaXRlbSA9PiBfY3JlYXRlVk5vZGUoVlRhYiwgX21lcmdlUHJvcHMoaXRlbSwge1xuICAgICAgICAgIFwia2V5XCI6IGl0ZW0udGV4dFxuICAgICAgICB9KSwgbnVsbCkpXVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZUYWJzLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlRhYmxlLmNzc1wiO1xuXG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VEZW5zaXR5UHJvcHMsIHVzZURlbnNpdHkgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVuc2l0eS5tanNcIjtcbmltcG9ydCB7IG1ha2VUYWdQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90YWcubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGhlbWVQcm9wcywgcHJvdmlkZVRoZW1lIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RoZW1lLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQsIGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgbWFrZVZUYWJsZVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZml4ZWRIZWFkZXI6IEJvb2xlYW4sXG4gIGZpeGVkRm9vdGVyOiBCb29sZWFuLFxuICBoZWlnaHQ6IFtOdW1iZXIsIFN0cmluZ10sXG4gIGhvdmVyOiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZURlbnNpdHlQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKVxufSwgJ1ZUYWJsZScpO1xuZXhwb3J0IGNvbnN0IFZUYWJsZSA9IGdlbmVyaWNDb21wb25lbnQoKSh7XG4gIG5hbWU6ICdWVGFibGUnLFxuICBwcm9wczogbWFrZVZUYWJsZVByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgZGVuc2l0eUNsYXNzZXNcbiAgICB9ID0gdXNlRGVuc2l0eShwcm9wcyk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShwcm9wcy50YWcsIHtcbiAgICAgIFwiY2xhc3NcIjogWyd2LXRhYmxlJywge1xuICAgICAgICAndi10YWJsZS0tZml4ZWQtaGVpZ2h0JzogISFwcm9wcy5oZWlnaHQsXG4gICAgICAgICd2LXRhYmxlLS1maXhlZC1oZWFkZXInOiBwcm9wcy5maXhlZEhlYWRlcixcbiAgICAgICAgJ3YtdGFibGUtLWZpeGVkLWZvb3Rlcic6IHByb3BzLmZpeGVkRm9vdGVyLFxuICAgICAgICAndi10YWJsZS0taGFzLXRvcCc6ICEhc2xvdHMudG9wLFxuICAgICAgICAndi10YWJsZS0taGFzLWJvdHRvbSc6ICEhc2xvdHMuYm90dG9tLFxuICAgICAgICAndi10YWJsZS0taG92ZXInOiBwcm9wcy5ob3ZlclxuICAgICAgfSwgdGhlbWVDbGFzc2VzLnZhbHVlLCBkZW5zaXR5Q2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtzbG90cy50b3A/LigpLCBzbG90cy5kZWZhdWx0ID8gX2NyZWF0ZVZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInYtdGFibGVfX3dyYXBwZXJcIixcbiAgICAgICAgXCJzdHlsZVwiOiB7XG4gICAgICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KHByb3BzLmhlaWdodClcbiAgICAgICAgfVxuICAgICAgfSwgW19jcmVhdGVWTm9kZShcInRhYmxlXCIsIG51bGwsIFtzbG90cy5kZWZhdWx0KCldKV0pIDogc2xvdHMud3JhcHBlcj8uKCksIHNsb3RzLmJvdHRvbT8uKCldXG4gICAgfSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WVGFibGUubWpzLm1hcCIsImltcG9ydCB7IHZNb2RlbFRleHQgYXMgX3ZNb2RlbFRleHQsIHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwidnVlXCI7XG4vLyBTdHlsZXNcbmltcG9ydCBcIi4vVlRleHRhcmVhLmNzc1wiO1xuaW1wb3J0IFwiLi4vVlRleHRGaWVsZC9WVGV4dEZpZWxkLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWQ291bnRlciB9IGZyb20gXCIuLi9WQ291bnRlci9WQ291bnRlci5tanNcIjtcbmltcG9ydCB7IFZGaWVsZCB9IGZyb20gXCIuLi9WRmllbGQvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBmaWx0ZXJGaWVsZFByb3BzLCBtYWtlVkZpZWxkUHJvcHMgfSBmcm9tIFwiLi4vVkZpZWxkL1ZGaWVsZC5tanNcIjtcbmltcG9ydCB7IG1ha2VWSW5wdXRQcm9wcywgVklucHV0IH0gZnJvbSBcIi4uL1ZJbnB1dC9WSW5wdXQubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyB1c2VGb2N1cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9mb2N1cy5tanNcIjtcbmltcG9ydCB7IGZvcndhcmRSZWZzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2ZvcndhcmRSZWZzLm1qc1wiO1xuaW1wb3J0IHsgdXNlUHJveGllZE1vZGVsIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3Byb3hpZWRNb2RlbC5tanNcIjsgLy8gRGlyZWN0aXZlc1xuaW1wb3J0IEludGVyc2VjdCBmcm9tIFwiLi4vLi4vZGlyZWN0aXZlcy9pbnRlcnNlY3QvaW5kZXgubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIG5leHRUaWNrLCBvbkJlZm9yZVVubW91bnQsIG9uTW91bnRlZCwgcmVmLCBzaGFsbG93UmVmLCB3YXRjaCwgd2F0Y2hFZmZlY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY2FsbEV2ZW50LCBjbGFtcCwgY29udmVydFRvVW5pdCwgZmlsdGVySW5wdXRBdHRycywgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVlRleHRhcmVhUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBhdXRvR3JvdzogQm9vbGVhbixcbiAgYXV0b2ZvY3VzOiBCb29sZWFuLFxuICBjb3VudGVyOiBbQm9vbGVhbiwgTnVtYmVyLCBTdHJpbmddLFxuICBjb3VudGVyVmFsdWU6IEZ1bmN0aW9uLFxuICBwcmVmaXg6IFN0cmluZyxcbiAgcGxhY2Vob2xkZXI6IFN0cmluZyxcbiAgcGVyc2lzdGVudFBsYWNlaG9sZGVyOiBCb29sZWFuLFxuICBwZXJzaXN0ZW50Q291bnRlcjogQm9vbGVhbixcbiAgbm9SZXNpemU6IEJvb2xlYW4sXG4gIHJvd3M6IHtcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgIGRlZmF1bHQ6IDUsXG4gICAgdmFsaWRhdG9yOiB2ID0+ICFpc05hTihwYXJzZUZsb2F0KHYpKVxuICB9LFxuICBtYXhSb3dzOiB7XG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICB2YWxpZGF0b3I6IHYgPT4gIWlzTmFOKHBhcnNlRmxvYXQodikpXG4gIH0sXG4gIHN1ZmZpeDogU3RyaW5nLFxuICBtb2RlbE1vZGlmaWVyczogT2JqZWN0LFxuICAuLi5tYWtlVklucHV0UHJvcHMoKSxcbiAgLi4ubWFrZVZGaWVsZFByb3BzKClcbn0sICdWVGV4dGFyZWEnKTtcbmV4cG9ydCBjb25zdCBWVGV4dGFyZWEgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlRleHRhcmVhJyxcbiAgZGlyZWN0aXZlczoge1xuICAgIEludGVyc2VjdFxuICB9LFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczogbWFrZVZUZXh0YXJlYVByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ2NsaWNrOmNvbnRyb2wnOiBlID0+IHRydWUsXG4gICAgJ21vdXNlZG93bjpjb250cm9sJzogZSA9PiB0cnVlLFxuICAgICd1cGRhdGU6Zm9jdXNlZCc6IGZvY3VzZWQgPT4gdHJ1ZSxcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBhdHRycyxcbiAgICAgIGVtaXQsXG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IG1vZGVsID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRm9jdXNlZCxcbiAgICAgIGZvY3VzLFxuICAgICAgYmx1clxuICAgIH0gPSB1c2VGb2N1cyhwcm9wcyk7XG4gICAgY29uc3QgY291bnRlclZhbHVlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHR5cGVvZiBwcm9wcy5jb3VudGVyVmFsdWUgPT09ICdmdW5jdGlvbicgPyBwcm9wcy5jb3VudGVyVmFsdWUobW9kZWwudmFsdWUpIDogKG1vZGVsLnZhbHVlIHx8ICcnKS50b1N0cmluZygpLmxlbmd0aDtcbiAgICB9KTtcbiAgICBjb25zdCBtYXggPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBpZiAoYXR0cnMubWF4bGVuZ3RoKSByZXR1cm4gYXR0cnMubWF4bGVuZ3RoO1xuICAgICAgaWYgKCFwcm9wcy5jb3VudGVyIHx8IHR5cGVvZiBwcm9wcy5jb3VudGVyICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgcHJvcHMuY291bnRlciAhPT0gJ3N0cmluZycpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcHJvcHMuY291bnRlcjtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBvbkludGVyc2VjdChpc0ludGVyc2VjdGluZywgZW50cmllcykge1xuICAgICAgaWYgKCFwcm9wcy5hdXRvZm9jdXMgfHwgIWlzSW50ZXJzZWN0aW5nKSByZXR1cm47XG4gICAgICBlbnRyaWVzWzBdLnRhcmdldD8uZm9jdXM/LigpO1xuICAgIH1cbiAgICBjb25zdCB2SW5wdXRSZWYgPSByZWYoKTtcbiAgICBjb25zdCB2RmllbGRSZWYgPSByZWYoKTtcbiAgICBjb25zdCBjb250cm9sSGVpZ2h0ID0gc2hhbGxvd1JlZignJyk7XG4gICAgY29uc3QgdGV4dGFyZWFSZWYgPSByZWYoKTtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLnBlcnNpc3RlbnRQbGFjZWhvbGRlciB8fCBpc0ZvY3VzZWQudmFsdWUgfHwgcHJvcHMuYWN0aXZlKTtcbiAgICBmdW5jdGlvbiBvbkZvY3VzKCkge1xuICAgICAgaWYgKHRleHRhcmVhUmVmLnZhbHVlICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgIHRleHRhcmVhUmVmLnZhbHVlPy5mb2N1cygpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0ZvY3VzZWQudmFsdWUpIGZvY3VzKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQ29udHJvbENsaWNrKGUpIHtcbiAgICAgIG9uRm9jdXMoKTtcbiAgICAgIGVtaXQoJ2NsaWNrOmNvbnRyb2wnLCBlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Db250cm9sTW91c2Vkb3duKGUpIHtcbiAgICAgIGVtaXQoJ21vdXNlZG93bjpjb250cm9sJywgZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQ2xlYXIoZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIG9uRm9jdXMoKTtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgbW9kZWwudmFsdWUgPSAnJztcbiAgICAgICAgY2FsbEV2ZW50KHByb3BzWydvbkNsaWNrOmNsZWFyJ10sIGUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uSW5wdXQoZSkge1xuICAgICAgY29uc3QgZWwgPSBlLnRhcmdldDtcbiAgICAgIG1vZGVsLnZhbHVlID0gZWwudmFsdWU7XG4gICAgICBpZiAocHJvcHMubW9kZWxNb2RpZmllcnM/LnRyaW0pIHtcbiAgICAgICAgY29uc3QgY2FyZXRQb3NpdGlvbiA9IFtlbC5zZWxlY3Rpb25TdGFydCwgZWwuc2VsZWN0aW9uRW5kXTtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIGVsLnNlbGVjdGlvblN0YXJ0ID0gY2FyZXRQb3NpdGlvblswXTtcbiAgICAgICAgICBlbC5zZWxlY3Rpb25FbmQgPSBjYXJldFBvc2l0aW9uWzFdO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc2l6ZXJSZWYgPSByZWYoKTtcbiAgICBjb25zdCByb3dzID0gcmVmKCtwcm9wcy5yb3dzKTtcbiAgICBjb25zdCBpc1BsYWluT3JVbmRlcmxpbmVkID0gY29tcHV0ZWQoKCkgPT4gWydwbGFpbicsICd1bmRlcmxpbmVkJ10uaW5jbHVkZXMocHJvcHMudmFyaWFudCkpO1xuICAgIHdhdGNoRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmICghcHJvcHMuYXV0b0dyb3cpIHJvd3MudmFsdWUgPSArcHJvcHMucm93cztcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVJbnB1dEhlaWdodCgpIHtcbiAgICAgIGlmICghcHJvcHMuYXV0b0dyb3cpIHJldHVybjtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgaWYgKCFzaXplclJlZi52YWx1ZSB8fCAhdkZpZWxkUmVmLnZhbHVlKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShzaXplclJlZi52YWx1ZSk7XG4gICAgICAgIGNvbnN0IGZpZWxkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHZGaWVsZFJlZi52YWx1ZS4kZWwpO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLXYtZmllbGQtcGFkZGluZy10b3AnKSkgKyBwYXJzZUZsb2F0KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy0tdi1pbnB1dC1wYWRkaW5nLXRvcCcpKSArIHBhcnNlRmxvYXQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS12LWZpZWxkLXBhZGRpbmctYm90dG9tJykpO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBzaXplclJlZi52YWx1ZS5zY3JvbGxIZWlnaHQ7XG4gICAgICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBwYXJzZUZsb2F0KHN0eWxlLmxpbmVIZWlnaHQpO1xuICAgICAgICBjb25zdCBtaW5IZWlnaHQgPSBNYXRoLm1heChwYXJzZUZsb2F0KHByb3BzLnJvd3MpICogbGluZUhlaWdodCArIHBhZGRpbmcsIHBhcnNlRmxvYXQoZmllbGRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLXYtaW5wdXQtY29udHJvbC1oZWlnaHQnKSkpO1xuICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSBwYXJzZUZsb2F0KHByb3BzLm1heFJvd3MpICogbGluZUhlaWdodCArIHBhZGRpbmcgfHwgSW5maW5pdHk7XG4gICAgICAgIGNvbnN0IG5ld0hlaWdodCA9IGNsYW1wKGhlaWdodCA/PyAwLCBtaW5IZWlnaHQsIG1heEhlaWdodCk7XG4gICAgICAgIHJvd3MudmFsdWUgPSBNYXRoLmZsb29yKChuZXdIZWlnaHQgLSBwYWRkaW5nKSAvIGxpbmVIZWlnaHQpO1xuICAgICAgICBjb250cm9sSGVpZ2h0LnZhbHVlID0gY29udmVydFRvVW5pdChuZXdIZWlnaHQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIG9uTW91bnRlZChjYWxjdWxhdGVJbnB1dEhlaWdodCk7XG4gICAgd2F0Y2gobW9kZWwsIGNhbGN1bGF0ZUlucHV0SGVpZ2h0KTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5yb3dzLCBjYWxjdWxhdGVJbnB1dEhlaWdodCk7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMubWF4Um93cywgY2FsY3VsYXRlSW5wdXRIZWlnaHQpO1xuICAgIHdhdGNoKCgpID0+IHByb3BzLmRlbnNpdHksIGNhbGN1bGF0ZUlucHV0SGVpZ2h0KTtcbiAgICBsZXQgb2JzZXJ2ZXI7XG4gICAgd2F0Y2goc2l6ZXJSZWYsIHZhbCA9PiB7XG4gICAgICBpZiAodmFsKSB7XG4gICAgICAgIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGNhbGN1bGF0ZUlucHV0SGVpZ2h0KTtcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShzaXplclJlZi52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYnNlcnZlcj8uZGlzY29ubmVjdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBvYnNlcnZlcj8uZGlzY29ubmVjdCgpO1xuICAgIH0pO1xuICAgIHVzZVJlbmRlcigoKSA9PiB7XG4gICAgICBjb25zdCBoYXNDb3VudGVyID0gISEoc2xvdHMuY291bnRlciB8fCBwcm9wcy5jb3VudGVyIHx8IHByb3BzLmNvdW50ZXJWYWx1ZSk7XG4gICAgICBjb25zdCBoYXNEZXRhaWxzID0gISEoaGFzQ291bnRlciB8fCBzbG90cy5kZXRhaWxzKTtcbiAgICAgIGNvbnN0IFtyb290QXR0cnMsIGlucHV0QXR0cnNdID0gZmlsdGVySW5wdXRBdHRycyhhdHRycyk7XG4gICAgICBjb25zdCBbe1xuICAgICAgICBtb2RlbFZhbHVlOiBfLFxuICAgICAgICAuLi5pbnB1dFByb3BzXG4gICAgICB9XSA9IFZJbnB1dC5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICBjb25zdCBbZmllbGRQcm9wc10gPSBmaWx0ZXJGaWVsZFByb3BzKHByb3BzKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUoVklucHV0LCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwicmVmXCI6IHZJbnB1dFJlZixcbiAgICAgICAgXCJtb2RlbFZhbHVlXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IG1vZGVsLnZhbHVlID0gJGV2ZW50LFxuICAgICAgICBcImNsYXNzXCI6IFsndi10ZXh0YXJlYSB2LXRleHQtZmllbGQnLCB7XG4gICAgICAgICAgJ3YtdGV4dGFyZWEtLXByZWZpeGVkJzogcHJvcHMucHJlZml4LFxuICAgICAgICAgICd2LXRleHRhcmVhLS1zdWZmaXhlZCc6IHByb3BzLnN1ZmZpeCxcbiAgICAgICAgICAndi10ZXh0LWZpZWxkLS1wcmVmaXhlZCc6IHByb3BzLnByZWZpeCxcbiAgICAgICAgICAndi10ZXh0LWZpZWxkLS1zdWZmaXhlZCc6IHByb3BzLnN1ZmZpeCxcbiAgICAgICAgICAndi10ZXh0YXJlYS0tYXV0by1ncm93JzogcHJvcHMuYXV0b0dyb3csXG4gICAgICAgICAgJ3YtdGV4dGFyZWEtLW5vLXJlc2l6ZSc6IHByb3BzLm5vUmVzaXplIHx8IHByb3BzLmF1dG9Hcm93LFxuICAgICAgICAgICd2LXRleHQtZmllbGQtLXBsYWluLXVuZGVybGluZWQnOiBpc1BsYWluT3JVbmRlcmxpbmVkLnZhbHVlXG4gICAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgICAgfSwgcm9vdEF0dHJzLCBpbnB1dFByb3BzLCB7XG4gICAgICAgIFwiY2VudGVyQWZmaXhcIjogcm93cy52YWx1ZSA9PT0gMSAmJiAhaXNQbGFpbk9yVW5kZXJsaW5lZC52YWx1ZSxcbiAgICAgICAgXCJmb2N1c2VkXCI6IGlzRm9jdXNlZC52YWx1ZVxuICAgICAgfSksIHtcbiAgICAgICAgLi4uc2xvdHMsXG4gICAgICAgIGRlZmF1bHQ6IF9yZWYyID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgaXNEaXNhYmxlZCxcbiAgICAgICAgICAgIGlzRGlydHksXG4gICAgICAgICAgICBpc1JlYWRvbmx5LFxuICAgICAgICAgICAgaXNWYWxpZFxuICAgICAgICAgIH0gPSBfcmVmMjtcbiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZGaWVsZCwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgICAgXCJyZWZcIjogdkZpZWxkUmVmLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiB7XG4gICAgICAgICAgICAgICctLXYtdGV4dGFyZWEtY29udHJvbC1oZWlnaHQnOiBjb250cm9sSGVpZ2h0LnZhbHVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJvbkNsaWNrXCI6IG9uQ29udHJvbENsaWNrLFxuICAgICAgICAgICAgXCJvbk1vdXNlZG93blwiOiBvbkNvbnRyb2xNb3VzZWRvd24sXG4gICAgICAgICAgICBcIm9uQ2xpY2s6Y2xlYXJcIjogb25DbGVhcixcbiAgICAgICAgICAgIFwib25DbGljazpwcmVwZW5kSW5uZXJcIjogcHJvcHNbJ29uQ2xpY2s6cHJlcGVuZElubmVyJ10sXG4gICAgICAgICAgICBcIm9uQ2xpY2s6YXBwZW5kSW5uZXJcIjogcHJvcHNbJ29uQ2xpY2s6YXBwZW5kSW5uZXInXVxuICAgICAgICAgIH0sIGZpZWxkUHJvcHMsIHtcbiAgICAgICAgICAgIFwiYWN0aXZlXCI6IGlzQWN0aXZlLnZhbHVlIHx8IGlzRGlydHkudmFsdWUsXG4gICAgICAgICAgICBcImNlbnRlckFmZml4XCI6IHJvd3MudmFsdWUgPT09IDEgJiYgIWlzUGxhaW5PclVuZGVybGluZWQudmFsdWUsXG4gICAgICAgICAgICBcImRpcnR5XCI6IGlzRGlydHkudmFsdWUgfHwgcHJvcHMuZGlydHksXG4gICAgICAgICAgICBcImRpc2FibGVkXCI6IGlzRGlzYWJsZWQudmFsdWUsXG4gICAgICAgICAgICBcImZvY3VzZWRcIjogaXNGb2N1c2VkLnZhbHVlLFxuICAgICAgICAgICAgXCJlcnJvclwiOiBpc1ZhbGlkLnZhbHVlID09PSBmYWxzZVxuICAgICAgICAgIH0pLCB7XG4gICAgICAgICAgICAuLi5zbG90cyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IF9yZWYzID0+IHtcbiAgICAgICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgICAgY2xhc3M6IGZpZWxkQ2xhc3MsXG4gICAgICAgICAgICAgICAgICAuLi5zbG90UHJvcHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gPSBfcmVmMztcbiAgICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtwcm9wcy5wcmVmaXggJiYgX2NyZWF0ZVZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcInYtdGV4dC1maWVsZF9fcHJlZml4XCJcbiAgICAgICAgICAgICAgfSwgW3Byb3BzLnByZWZpeF0pLCBfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKFwidGV4dGFyZWFcIiwgX21lcmdlUHJvcHMoe1xuICAgICAgICAgICAgICAgIFwicmVmXCI6IHRleHRhcmVhUmVmLFxuICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogZmllbGRDbGFzcyxcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6IG1vZGVsLnZhbHVlLFxuICAgICAgICAgICAgICAgIFwib25JbnB1dFwiOiBvbklucHV0LFxuICAgICAgICAgICAgICAgIFwiYXV0b2ZvY3VzXCI6IHByb3BzLmF1dG9mb2N1cyxcbiAgICAgICAgICAgICAgICBcInJlYWRvbmx5XCI6IGlzUmVhZG9ubHkudmFsdWUsXG4gICAgICAgICAgICAgICAgXCJkaXNhYmxlZFwiOiBpc0Rpc2FibGVkLnZhbHVlLFxuICAgICAgICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjogcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgXCJyb3dzXCI6IHByb3BzLnJvd3MsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IHByb3BzLm5hbWUsXG4gICAgICAgICAgICAgICAgXCJvbkZvY3VzXCI6IG9uRm9jdXMsXG4gICAgICAgICAgICAgICAgXCJvbkJsdXJcIjogYmx1clxuICAgICAgICAgICAgICB9LCBzbG90UHJvcHMsIGlucHV0QXR0cnMpLCBudWxsKSwgW1tfcmVzb2x2ZURpcmVjdGl2ZShcImludGVyc2VjdFwiKSwge1xuICAgICAgICAgICAgICAgIGhhbmRsZXI6IG9uSW50ZXJzZWN0XG4gICAgICAgICAgICAgIH0sIG51bGwsIHtcbiAgICAgICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgICAgIH1dXSksIHByb3BzLmF1dG9Hcm93ICYmIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoXCJ0ZXh0YXJlYVwiLCB7XG4gICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBbZmllbGRDbGFzcywgJ3YtdGV4dGFyZWFfX3NpemVyJ10sXG4gICAgICAgICAgICAgICAgXCJpZFwiOiBgJHtzbG90UHJvcHMuaWR9LXNpemVyYCxcbiAgICAgICAgICAgICAgICBcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjogJGV2ZW50ID0+IG1vZGVsLnZhbHVlID0gJGV2ZW50LFxuICAgICAgICAgICAgICAgIFwicmVmXCI6IHNpemVyUmVmLFxuICAgICAgICAgICAgICAgIFwicmVhZG9ubHlcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gICAgICAgICAgICAgIH0sIG51bGwpLCBbW192TW9kZWxUZXh0LCBtb2RlbC52YWx1ZV1dKSwgcHJvcHMuc3VmZml4ICYmIF9jcmVhdGVWTm9kZShcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJ2LXRleHQtZmllbGRfX3N1ZmZpeFwiXG4gICAgICAgICAgICAgIH0sIFtwcm9wcy5zdWZmaXhdKV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBkZXRhaWxzOiBoYXNEZXRhaWxzID8gc2xvdFByb3BzID0+IF9jcmVhdGVWTm9kZShfRnJhZ21lbnQsIG51bGwsIFtzbG90cy5kZXRhaWxzPy4oc2xvdFByb3BzKSwgaGFzQ291bnRlciAmJiBfY3JlYXRlVk5vZGUoX0ZyYWdtZW50LCBudWxsLCBbX2NyZWF0ZVZOb2RlKFwic3BhblwiLCBudWxsLCBudWxsKSwgX2NyZWF0ZVZOb2RlKFZDb3VudGVyLCB7XG4gICAgICAgICAgXCJhY3RpdmVcIjogcHJvcHMucGVyc2lzdGVudENvdW50ZXIgfHwgaXNGb2N1c2VkLnZhbHVlLFxuICAgICAgICAgIFwidmFsdWVcIjogY291bnRlclZhbHVlLnZhbHVlLFxuICAgICAgICAgIFwibWF4XCI6IG1heC52YWx1ZVxuICAgICAgICB9LCBzbG90cy5jb3VudGVyKV0pXSkgOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3J3YXJkUmVmcyh7fSwgdklucHV0UmVmLCB2RmllbGRSZWYsIHRleHRhcmVhUmVmKTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WVGV4dGFyZWEubWpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSB9IGZyb20gXCJ2dWVcIjtcbi8vIFN0eWxlc1xuaW1wb3J0IFwiLi9WVGhlbWVQcm92aWRlci5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRoZW1lUHJvcHMsIHByb3ZpZGVUaGVtZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy90aGVtZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnkgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjtcbmV4cG9ydCBjb25zdCBtYWtlVlRoZW1lUHJvdmlkZXJQcm9wcyA9IHByb3BzRmFjdG9yeSh7XG4gIHdpdGhCYWNrZ3JvdW5kOiBCb29sZWFuLFxuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVRoZW1lUHJvcHMoKSxcbiAgLi4ubWFrZVRhZ1Byb3BzKClcbn0sICdWVGhlbWVQcm92aWRlcicpO1xuZXhwb3J0IGNvbnN0IFZUaGVtZVByb3ZpZGVyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZUaGVtZVByb3ZpZGVyJyxcbiAgcHJvcHM6IG1ha2VWVGhlbWVQcm92aWRlclByb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWVDbGFzc2VzXG4gICAgfSA9IHByb3ZpZGVUaGVtZShwcm9wcyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICghcHJvcHMud2l0aEJhY2tncm91bmQpIHJldHVybiBzbG90cy5kZWZhdWx0Py4oKTtcbiAgICAgIHJldHVybiBfY3JlYXRlVk5vZGUocHJvcHMudGFnLCB7XG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXRoZW1lLXByb3ZpZGVyJywgdGhlbWVDbGFzc2VzLnZhbHVlLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGVcbiAgICAgIH0sIHtcbiAgICAgICAgZGVmYXVsdDogKCkgPT4gW3Nsb3RzLmRlZmF1bHQ/LigpXVxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WVGhlbWVQcm92aWRlci5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZUaW1lbGluZS5jc3NcIjtcblxuLy8gQ29tcG9zYWJsZXNcbmltcG9ydCB7IG1ha2VDb21wb25lbnRQcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9jb21wb25lbnQubWpzXCI7XG5pbXBvcnQgeyBwcm92aWRlRGVmYXVsdHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGVmYXVsdHMubWpzXCI7XG5pbXBvcnQgeyBtYWtlRGVuc2l0eVByb3BzLCB1c2VEZW5zaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2RlbnNpdHkubWpzXCI7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvbG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgbWFrZVRhZ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3RhZy5tanNcIjtcbmltcG9ydCB7IG1ha2VUaGVtZVByb3BzLCBwcm92aWRlVGhlbWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGhlbWUubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgY29tcHV0ZWQsIHRvUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGNvbnZlcnRUb1VuaXQsIGdlbmVyaWNDb21wb25lbnQsIHByb3BzRmFjdG9yeSwgdXNlUmVuZGVyIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXgubWpzXCI7IC8vIFR5cGVzXG5leHBvcnQgY29uc3QgbWFrZVZUaW1lbGluZVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgYWxpZ246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2NlbnRlcicsXG4gICAgdmFsaWRhdG9yOiB2ID0+IFsnY2VudGVyJywgJ3N0YXJ0J10uaW5jbHVkZXModilcbiAgfSxcbiAgZGlyZWN0aW9uOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICd2ZXJ0aWNhbCcsXG4gICAgdmFsaWRhdG9yOiB2ID0+IFsndmVydGljYWwnLCAnaG9yaXpvbnRhbCddLmluY2x1ZGVzKHYpXG4gIH0sXG4gIGp1c3RpZnk6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2F1dG8nLFxuICAgIHZhbGlkYXRvcjogdiA9PiBbJ2F1dG8nLCAnY2VudGVyJ10uaW5jbHVkZXModilcbiAgfSxcbiAgc2lkZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICB2YWxpZGF0b3I6IHYgPT4gdiA9PSBudWxsIHx8IFsnc3RhcnQnLCAnZW5kJ10uaW5jbHVkZXModilcbiAgfSxcbiAgbGluZUluc2V0OiB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiAwXG4gIH0sXG4gIGxpbmVUaGlja25lc3M6IHtcbiAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgIGRlZmF1bHQ6IDJcbiAgfSxcbiAgbGluZUNvbG9yOiBTdHJpbmcsXG4gIHRydW5jYXRlTGluZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICB2YWxpZGF0b3I6IHYgPT4gWydzdGFydCcsICdlbmQnLCAnYm90aCddLmluY2x1ZGVzKHYpXG4gIH0sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGVuc2l0eVByb3BzKCksXG4gIC4uLm1ha2VUYWdQcm9wcygpLFxuICAuLi5tYWtlVGhlbWVQcm9wcygpXG59LCAnVlRpbWVsaW5lJyk7XG5leHBvcnQgY29uc3QgVlRpbWVsaW5lID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZUaW1lbGluZScsXG4gIHByb3BzOiBtYWtlVlRpbWVsaW5lUHJvcHMoKSxcbiAgc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgc2xvdHNcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCB7XG4gICAgICB0aGVtZUNsYXNzZXNcbiAgICB9ID0gcHJvdmlkZVRoZW1lKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBkZW5zaXR5Q2xhc3Nlc1xuICAgIH0gPSB1c2VEZW5zaXR5KHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBydGxDbGFzc2VzXG4gICAgfSA9IHVzZVJ0bCgpO1xuICAgIHByb3ZpZGVEZWZhdWx0cyh7XG4gICAgICBWVGltZWxpbmVEaXZpZGVyOiB7XG4gICAgICAgIGxpbmVDb2xvcjogdG9SZWYocHJvcHMsICdsaW5lQ29sb3InKVxuICAgICAgfSxcbiAgICAgIFZUaW1lbGluZUl0ZW06IHtcbiAgICAgICAgZGVuc2l0eTogdG9SZWYocHJvcHMsICdkZW5zaXR5JyksXG4gICAgICAgIGxpbmVJbnNldDogdG9SZWYocHJvcHMsICdsaW5lSW5zZXQnKVxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHNpZGVDbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3Qgc2lkZSA9IHByb3BzLnNpZGUgPyBwcm9wcy5zaWRlIDogcHJvcHMuZGVuc2l0eSAhPT0gJ2RlZmF1bHQnID8gJ2VuZCcgOiBudWxsO1xuICAgICAgcmV0dXJuIHNpZGUgJiYgYHYtdGltZWxpbmUtLXNpZGUtJHtzaWRlfWA7XG4gICAgfSk7XG4gICAgY29uc3QgdHJ1bmNhdGVDbGFzc2VzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgY2xhc3NlcyA9IFsndi10aW1lbGluZS0tdHJ1bmNhdGUtbGluZS1zdGFydCcsICd2LXRpbWVsaW5lLS10cnVuY2F0ZS1saW5lLWVuZCddO1xuICAgICAgc3dpdGNoIChwcm9wcy50cnVuY2F0ZUxpbmUpIHtcbiAgICAgICAgY2FzZSAnYm90aCc6XG4gICAgICAgICAgcmV0dXJuIGNsYXNzZXM7XG4gICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICByZXR1cm4gY2xhc3Nlc1swXTtcbiAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICByZXR1cm4gY2xhc3Nlc1sxXTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VSZW5kZXIoKCkgPT4gX2NyZWF0ZVZOb2RlKHByb3BzLnRhZywge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtdGltZWxpbmUnLCBgdi10aW1lbGluZS0tJHtwcm9wcy5kaXJlY3Rpb259YCwgYHYtdGltZWxpbmUtLWFsaWduLSR7cHJvcHMuYWxpZ259YCwgYHYtdGltZWxpbmUtLWp1c3RpZnktJHtwcm9wcy5qdXN0aWZ5fWAsIHRydW5jYXRlQ2xhc3Nlcy52YWx1ZSwge1xuICAgICAgICAndi10aW1lbGluZS0taW5zZXQtbGluZSc6ICEhcHJvcHMubGluZUluc2V0XG4gICAgICB9LCB0aGVtZUNsYXNzZXMudmFsdWUsIGRlbnNpdHlDbGFzc2VzLnZhbHVlLCBzaWRlQ2xhc3Nlcy52YWx1ZSwgcnRsQ2xhc3Nlcy52YWx1ZSwgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBbe1xuICAgICAgICAnLS12LXRpbWVsaW5lLWxpbmUtdGhpY2tuZXNzJzogY29udmVydFRvVW5pdChwcm9wcy5saW5lVGhpY2tuZXNzKVxuICAgICAgfSwgcHJvcHMuc3R5bGVdXG4gICAgfSwgc2xvdHMpKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlRpbWVsaW5lLm1qcy5tYXAiLCJpbXBvcnQgeyByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWRGVmYXVsdHNQcm92aWRlciB9IGZyb20gXCIuLi9WRGVmYXVsdHNQcm92aWRlci9pbmRleC5tanNcIjtcbmltcG9ydCB7IFZJY29uIH0gZnJvbSBcIi4uL1ZJY29uL2luZGV4Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgdXNlQmFja2dyb3VuZENvbG9yIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbG9yLm1qc1wiO1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcywgdXNlRWxldmF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2VsZXZhdGlvbi5tanNcIjtcbmltcG9ydCB7IEljb25WYWx1ZSB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9pY29ucy5tanNcIjtcbmltcG9ydCB7IG1ha2VSb3VuZGVkUHJvcHMsIHVzZVJvdW5kZWQgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcm91bmRlZC5tanNcIjtcbmltcG9ydCB7IG1ha2VTaXplUHJvcHMsIHVzZVNpemUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvc2l6ZS5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWVGltZWxpbmVEaXZpZGVyUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICBkb3RDb2xvcjogU3RyaW5nLFxuICBmaWxsRG90OiBCb29sZWFuLFxuICBoaWRlRG90OiBCb29sZWFuLFxuICBpY29uOiBJY29uVmFsdWUsXG4gIGljb25Db2xvcjogU3RyaW5nLFxuICBsaW5lQ29sb3I6IFN0cmluZyxcbiAgLi4ubWFrZUNvbXBvbmVudFByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVNpemVQcm9wcygpLFxuICAuLi5tYWtlRWxldmF0aW9uUHJvcHMoKVxufSwgJ1ZUaW1lbGluZURpdmlkZXInKTtcbmV4cG9ydCBjb25zdCBWVGltZWxpbmVEaXZpZGVyID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZUaW1lbGluZURpdmlkZXInLFxuICBwcm9wczogbWFrZVZUaW1lbGluZURpdmlkZXJQcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHNpemVDbGFzc2VzLFxuICAgICAgc2l6ZVN0eWxlc1xuICAgIH0gPSB1c2VTaXplKHByb3BzLCAndi10aW1lbGluZS1kaXZpZGVyX19kb3QnKTtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JTdHlsZXMsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzXG4gICAgfSA9IHVzZUJhY2tncm91bmRDb2xvcih0b1JlZihwcm9wcywgJ2RvdENvbG9yJykpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvdW5kZWRDbGFzc2VzXG4gICAgfSA9IHVzZVJvdW5kZWQocHJvcHMsICd2LXRpbWVsaW5lLWRpdmlkZXJfX2RvdCcpO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbkNsYXNzZXNcbiAgICB9ID0gdXNlRWxldmF0aW9uKHByb3BzKTtcbiAgICBjb25zdCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JDbGFzc2VzOiBsaW5lQ29sb3JDbGFzc2VzLFxuICAgICAgYmFja2dyb3VuZENvbG9yU3R5bGVzOiBsaW5lQ29sb3JTdHlsZXNcbiAgICB9ID0gdXNlQmFja2dyb3VuZENvbG9yKHRvUmVmKHByb3BzLCAnbGluZUNvbG9yJykpO1xuICAgIHVzZVJlbmRlcigoKSA9PiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtdGltZWxpbmUtZGl2aWRlcicsIHtcbiAgICAgICAgJ3YtdGltZWxpbmUtZGl2aWRlci0tZmlsbC1kb3QnOiBwcm9wcy5maWxsRG90XG4gICAgICB9LCBwcm9wcy5jbGFzc10sXG4gICAgICBcInN0eWxlXCI6IHByb3BzLnN0eWxlXG4gICAgfSwgW19jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi10aW1lbGluZS1kaXZpZGVyX19iZWZvcmUnLCBsaW5lQ29sb3JDbGFzc2VzLnZhbHVlXSxcbiAgICAgIFwic3R5bGVcIjogbGluZUNvbG9yU3R5bGVzLnZhbHVlXG4gICAgfSwgbnVsbCksICFwcm9wcy5oaWRlRG90ICYmIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImtleVwiOiBcImRvdFwiLFxuICAgICAgXCJjbGFzc1wiOiBbJ3YtdGltZWxpbmUtZGl2aWRlcl9fZG90JywgZWxldmF0aW9uQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWUsIHNpemVDbGFzc2VzLnZhbHVlXSxcbiAgICAgIFwic3R5bGVcIjogc2l6ZVN0eWxlcy52YWx1ZVxuICAgIH0sIFtfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBbJ3YtdGltZWxpbmUtZGl2aWRlcl9faW5uZXItZG90JywgYmFja2dyb3VuZENvbG9yQ2xhc3Nlcy52YWx1ZSwgcm91bmRlZENsYXNzZXMudmFsdWVdLFxuICAgICAgXCJzdHlsZVwiOiBiYWNrZ3JvdW5kQ29sb3JTdHlsZXMudmFsdWVcbiAgICB9LCBbIXNsb3RzLmRlZmF1bHQgPyBfY3JlYXRlVk5vZGUoVkljb24sIHtcbiAgICAgIFwia2V5XCI6IFwiaWNvblwiLFxuICAgICAgXCJjb2xvclwiOiBwcm9wcy5pY29uQ29sb3IsXG4gICAgICBcImljb25cIjogcHJvcHMuaWNvbixcbiAgICAgIFwic2l6ZVwiOiBwcm9wcy5zaXplXG4gICAgfSwgbnVsbCkgOiBfY3JlYXRlVk5vZGUoVkRlZmF1bHRzUHJvdmlkZXIsIHtcbiAgICAgIFwia2V5XCI6IFwiaWNvbi1kZWZhdWx0c1wiLFxuICAgICAgXCJkaXNhYmxlZFwiOiAhcHJvcHMuaWNvbixcbiAgICAgIFwiZGVmYXVsdHNcIjoge1xuICAgICAgICBWSWNvbjoge1xuICAgICAgICAgIGNvbG9yOiBwcm9wcy5pY29uQ29sb3IsXG4gICAgICAgICAgaWNvbjogcHJvcHMuaWNvbixcbiAgICAgICAgICBzaXplOiBwcm9wcy5zaXplXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBzbG90cy5kZWZhdWx0KV0pXSksIF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi10aW1lbGluZS1kaXZpZGVyX19hZnRlcicsIGxpbmVDb2xvckNsYXNzZXMudmFsdWVdLFxuICAgICAgXCJzdHlsZVwiOiBsaW5lQ29sb3JTdHlsZXMudmFsdWVcbiAgICB9LCBudWxsKV0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlRpbWVsaW5lRGl2aWRlci5tanMubWFwIiwiaW1wb3J0IHsgcmVzb2x2ZURpcmVjdGl2ZSBhcyBfcmVzb2x2ZURpcmVjdGl2ZSwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlIH0gZnJvbSBcInZ1ZVwiO1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHsgVlRpbWVsaW5lRGl2aWRlciB9IGZyb20gXCIuL1ZUaW1lbGluZURpdmlkZXIubWpzXCI7IC8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvY29tcG9uZW50Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZURpbWVuc2lvblByb3BzLCB1c2VEaW1lbnNpb24gfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZGltZW5zaW9ucy5tanNcIjtcbmltcG9ydCB7IG1ha2VFbGV2YXRpb25Qcm9wcyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9lbGV2YXRpb24ubWpzXCI7XG5pbXBvcnQgeyBJY29uVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvaWNvbnMubWpzXCI7XG5pbXBvcnQgeyBtYWtlUm91bmRlZFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3JvdW5kZWQubWpzXCI7XG5pbXBvcnQgeyBtYWtlU2l6ZVByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3NpemUubWpzXCI7XG5pbXBvcnQgeyBtYWtlVGFnUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdGFnLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IHJlZiwgc2hhbGxvd1JlZiwgd2F0Y2ggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgY29udmVydFRvVW5pdCwgZ2VuZXJpY0NvbXBvbmVudCwgcHJvcHNGYWN0b3J5LCB1c2VSZW5kZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleC5tanNcIjsgLy8gVHlwZXNcbmV4cG9ydCBjb25zdCBtYWtlVlRpbWVsaW5lSXRlbVByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgZGVuc2l0eTogU3RyaW5nLFxuICBkb3RDb2xvcjogU3RyaW5nLFxuICBmaWxsRG90OiBCb29sZWFuLFxuICBoaWRlRG90OiBCb29sZWFuLFxuICBoaWRlT3Bwb3NpdGU6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICB9LFxuICBpY29uOiBJY29uVmFsdWUsXG4gIGljb25Db2xvcjogU3RyaW5nLFxuICBsaW5lSW5zZXQ6IFtOdW1iZXIsIFN0cmluZ10sXG4gIC4uLm1ha2VDb21wb25lbnRQcm9wcygpLFxuICAuLi5tYWtlRGltZW5zaW9uUHJvcHMoKSxcbiAgLi4ubWFrZUVsZXZhdGlvblByb3BzKCksXG4gIC4uLm1ha2VSb3VuZGVkUHJvcHMoKSxcbiAgLi4ubWFrZVNpemVQcm9wcygpLFxuICAuLi5tYWtlVGFnUHJvcHMoKVxufSwgJ1ZUaW1lbGluZUl0ZW0nKTtcbmV4cG9ydCBjb25zdCBWVGltZWxpbmVJdGVtID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZUaW1lbGluZUl0ZW0nLFxuICBwcm9wczogbWFrZVZUaW1lbGluZUl0ZW1Qcm9wcygpLFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIGRpbWVuc2lvblN0eWxlc1xuICAgIH0gPSB1c2VEaW1lbnNpb24ocHJvcHMpO1xuICAgIGNvbnN0IGRvdFNpemUgPSBzaGFsbG93UmVmKDApO1xuICAgIGNvbnN0IGRvdFJlZiA9IHJlZigpO1xuICAgIHdhdGNoKGRvdFJlZiwgbmV3VmFsdWUgPT4ge1xuICAgICAgaWYgKCFuZXdWYWx1ZSkgcmV0dXJuO1xuICAgICAgZG90U2l6ZS52YWx1ZSA9IG5ld1ZhbHVlLiRlbC5xdWVyeVNlbGVjdG9yKCcudi10aW1lbGluZS1kaXZpZGVyX19kb3QnKT8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggPz8gMDtcbiAgICB9LCB7XG4gICAgICBmbHVzaDogJ3Bvc3QnXG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi10aW1lbGluZS1pdGVtJywge1xuICAgICAgICAndi10aW1lbGluZS1pdGVtLS1maWxsLWRvdCc6IHByb3BzLmZpbGxEb3RcbiAgICAgIH0sIHByb3BzLmNsYXNzXSxcbiAgICAgIFwic3R5bGVcIjogW3tcbiAgICAgICAgJy0tdi10aW1lbGluZS1kb3Qtc2l6ZSc6IGNvbnZlcnRUb1VuaXQoZG90U2l6ZS52YWx1ZSksXG4gICAgICAgICctLXYtdGltZWxpbmUtbGluZS1pbnNldCc6IHByb3BzLmxpbmVJbnNldCA/IGBjYWxjKHZhcigtLXYtdGltZWxpbmUtZG90LXNpemUpIC8gMiArICR7Y29udmVydFRvVW5pdChwcm9wcy5saW5lSW5zZXQpfSlgIDogY29udmVydFRvVW5pdCgwKVxuICAgICAgfSwgcHJvcHMuc3R5bGVdXG4gICAgfSwgW19jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFwidi10aW1lbGluZS1pdGVtX19ib2R5XCIsXG4gICAgICBcInN0eWxlXCI6IGRpbWVuc2lvblN0eWxlcy52YWx1ZVxuICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKV0pLCBfY3JlYXRlVk5vZGUoVlRpbWVsaW5lRGl2aWRlciwge1xuICAgICAgXCJyZWZcIjogZG90UmVmLFxuICAgICAgXCJoaWRlRG90XCI6IHByb3BzLmhpZGVEb3QsXG4gICAgICBcImljb25cIjogcHJvcHMuaWNvbixcbiAgICAgIFwiaWNvbkNvbG9yXCI6IHByb3BzLmljb25Db2xvcixcbiAgICAgIFwic2l6ZVwiOiBwcm9wcy5zaXplLFxuICAgICAgXCJlbGV2YXRpb25cIjogcHJvcHMuZWxldmF0aW9uLFxuICAgICAgXCJkb3RDb2xvclwiOiBwcm9wcy5kb3RDb2xvcixcbiAgICAgIFwiZmlsbERvdFwiOiBwcm9wcy5maWxsRG90LFxuICAgICAgXCJyb3VuZGVkXCI6IHByb3BzLnJvdW5kZWRcbiAgICB9LCB7XG4gICAgICBkZWZhdWx0OiBzbG90cy5pY29uXG4gICAgfSksIHByb3BzLmRlbnNpdHkgIT09ICdjb21wYWN0JyAmJiBfY3JlYXRlVk5vZGUoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBcInYtdGltZWxpbmUtaXRlbV9fb3Bwb3NpdGVcIlxuICAgIH0sIFshcHJvcHMuaGlkZU9wcG9zaXRlICYmIHNsb3RzLm9wcG9zaXRlPy4oKV0pXSkpO1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WVGltZWxpbmVJdGVtLm1qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUgfSBmcm9tIFwidnVlXCI7XG4vLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgbWFrZUNvbXBvbmVudFByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL2NvbXBvbmVudC5tanNcIjtcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0cyB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9kZWZhdWx0cy5tanNcIjtcbmltcG9ydCB7IG1ha2VWYXJpYW50UHJvcHMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvdmFyaWFudC5tanNcIjsgLy8gVXRpbGl0aWVzXG5pbXBvcnQgeyB0b1JlZiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBnZW5lcmljQ29tcG9uZW50LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VWVG9vbGJhckl0ZW1zUHJvcHMgPSBwcm9wc0ZhY3Rvcnkoe1xuICAuLi5tYWtlQ29tcG9uZW50UHJvcHMoKSxcbiAgLi4ubWFrZVZhcmlhbnRQcm9wcyh7XG4gICAgdmFyaWFudDogJ3RleHQnXG4gIH0pXG59LCAnVlRvb2xiYXJJdGVtcycpO1xuZXhwb3J0IGNvbnN0IFZUb29sYmFySXRlbXMgPSBnZW5lcmljQ29tcG9uZW50KCkoe1xuICBuYW1lOiAnVlRvb2xiYXJJdGVtcycsXG4gIHByb3BzOiBtYWtlVlRvb2xiYXJJdGVtc1Byb3BzKCksXG4gIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHNsb3RzXG4gICAgfSA9IF9yZWY7XG4gICAgcHJvdmlkZURlZmF1bHRzKHtcbiAgICAgIFZCdG46IHtcbiAgICAgICAgY29sb3I6IHRvUmVmKHByb3BzLCAnY29sb3InKSxcbiAgICAgICAgaGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICAgIHZhcmlhbnQ6IHRvUmVmKHByb3BzLCAndmFyaWFudCcpXG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlUmVuZGVyKCgpID0+IF9jcmVhdGVWTm9kZShcImRpdlwiLCB7XG4gICAgICBcImNsYXNzXCI6IFsndi10b29sYmFyLWl0ZW1zJywgcHJvcHMuY2xhc3NdLFxuICAgICAgXCJzdHlsZVwiOiBwcm9wcy5zdHlsZVxuICAgIH0sIFtzbG90cy5kZWZhdWx0Py4oKV0pKTtcbiAgICByZXR1cm4ge307XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlRvb2xiYXJJdGVtcy5tanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzIH0gZnJvbSBcInZ1ZVwiO1xuLy8gU3R5bGVzXG5pbXBvcnQgXCIuL1ZUb29sdGlwLmNzc1wiO1xuXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBWT3ZlcmxheSB9IGZyb20gXCIuLi9WT3ZlcmxheS9pbmRleC5tanNcIjtcbmltcG9ydCB7IG1ha2VWT3ZlcmxheVByb3BzIH0gZnJvbSBcIi4uL1ZPdmVybGF5L1ZPdmVybGF5Lm1qc1wiOyAvLyBDb21wb3NhYmxlc1xuaW1wb3J0IHsgZm9yd2FyZFJlZnMgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvZm9yd2FyZFJlZnMubWpzXCI7XG5pbXBvcnQgeyB1c2VQcm94aWVkTW9kZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9zYWJsZXMvcHJveGllZE1vZGVsLm1qc1wiO1xuaW1wb3J0IHsgdXNlU2NvcGVJZCB9IGZyb20gXCIuLi8uLi9jb21wb3NhYmxlcy9zY29wZUlkLm1qc1wiOyAvLyBVdGlsaXRpZXNcbmltcG9ydCB7IGNvbXB1dGVkLCBtZXJnZVByb3BzLCByZWYgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCwgZ2V0VWlkLCBvbWl0LCBwcm9wc0ZhY3RvcnksIHVzZVJlbmRlciB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiOyAvLyBUeXBlc1xuZXhwb3J0IGNvbnN0IG1ha2VWVG9vbHRpcFByb3BzID0gcHJvcHNGYWN0b3J5KHtcbiAgaWQ6IFN0cmluZyxcbiAgdGV4dDogU3RyaW5nLFxuICAuLi5vbWl0KG1ha2VWT3ZlcmxheVByb3BzKHtcbiAgICBjbG9zZU9uQmFjazogZmFsc2UsXG4gICAgbG9jYXRpb246ICdlbmQnLFxuICAgIGxvY2F0aW9uU3RyYXRlZ3k6ICdjb25uZWN0ZWQnLFxuICAgIGVhZ2VyOiB0cnVlLFxuICAgIG1pbldpZHRoOiAwLFxuICAgIG9mZnNldDogMTAsXG4gICAgb3Blbk9uQ2xpY2s6IGZhbHNlLFxuICAgIG9wZW5PbkhvdmVyOiB0cnVlLFxuICAgIG9yaWdpbjogJ2F1dG8nLFxuICAgIHNjcmltOiBmYWxzZSxcbiAgICBzY3JvbGxTdHJhdGVneTogJ3JlcG9zaXRpb24nLFxuICAgIHRyYW5zaXRpb246IGZhbHNlXG4gIH0pLCBbJ2Fic29sdXRlJywgJ3BlcnNpc3RlbnQnXSlcbn0sICdWVG9vbHRpcCcpO1xuZXhwb3J0IGNvbnN0IFZUb29sdGlwID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZUb29sdGlwJyxcbiAgcHJvcHM6IG1ha2VWVG9vbHRpcFByb3BzKCksXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogdmFsdWUgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gdXNlUHJveGllZE1vZGVsKHByb3BzLCAnbW9kZWxWYWx1ZScpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjb3BlSWRcbiAgICB9ID0gdXNlU2NvcGVJZCgpO1xuICAgIGNvbnN0IHVpZCA9IGdldFVpZCgpO1xuICAgIGNvbnN0IGlkID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMuaWQgfHwgYHYtdG9vbHRpcC0ke3VpZH1gKTtcbiAgICBjb25zdCBvdmVybGF5ID0gcmVmKCk7XG4gICAgY29uc3QgbG9jYXRpb24gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMubG9jYXRpb24uc3BsaXQoJyAnKS5sZW5ndGggPiAxID8gcHJvcHMubG9jYXRpb24gOiBwcm9wcy5sb2NhdGlvbiArICcgY2VudGVyJztcbiAgICB9KTtcbiAgICBjb25zdCBvcmlnaW4gPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcHMub3JpZ2luID09PSAnYXV0bycgfHwgcHJvcHMub3JpZ2luID09PSAnb3ZlcmxhcCcgfHwgcHJvcHMub3JpZ2luLnNwbGl0KCcgJykubGVuZ3RoID4gMSB8fCBwcm9wcy5sb2NhdGlvbi5zcGxpdCgnICcpLmxlbmd0aCA+IDEgPyBwcm9wcy5vcmlnaW4gOiBwcm9wcy5vcmlnaW4gKyAnIGNlbnRlcic7XG4gICAgfSk7XG4gICAgY29uc3QgdHJhbnNpdGlvbiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy50cmFuc2l0aW9uKSByZXR1cm4gcHJvcHMudHJhbnNpdGlvbjtcbiAgICAgIHJldHVybiBpc0FjdGl2ZS52YWx1ZSA/ICdzY2FsZS10cmFuc2l0aW9uJyA6ICdmYWRlLXRyYW5zaXRpb24nO1xuICAgIH0pO1xuICAgIGNvbnN0IGFjdGl2YXRvclByb3BzID0gY29tcHV0ZWQoKCkgPT4gbWVyZ2VQcm9wcyh7XG4gICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGlkLnZhbHVlXG4gICAgfSwgcHJvcHMuYWN0aXZhdG9yUHJvcHMpKTtcbiAgICB1c2VSZW5kZXIoKCkgPT4ge1xuICAgICAgY29uc3QgW292ZXJsYXlQcm9wc10gPSBWT3ZlcmxheS5maWx0ZXJQcm9wcyhwcm9wcyk7XG4gICAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKFZPdmVybGF5LCBfbWVyZ2VQcm9wcyh7XG4gICAgICAgIFwicmVmXCI6IG92ZXJsYXksXG4gICAgICAgIFwiY2xhc3NcIjogWyd2LXRvb2x0aXAnLCBwcm9wcy5jbGFzc10sXG4gICAgICAgIFwic3R5bGVcIjogcHJvcHMuc3R5bGUsXG4gICAgICAgIFwiaWRcIjogaWQudmFsdWVcbiAgICAgIH0sIG92ZXJsYXlQcm9wcywge1xuICAgICAgICBcIm1vZGVsVmFsdWVcIjogaXNBY3RpdmUudmFsdWUsXG4gICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gaXNBY3RpdmUudmFsdWUgPSAkZXZlbnQsXG4gICAgICAgIFwidHJhbnNpdGlvblwiOiB0cmFuc2l0aW9uLnZhbHVlLFxuICAgICAgICBcImFic29sdXRlXCI6IHRydWUsXG4gICAgICAgIFwibG9jYXRpb25cIjogbG9jYXRpb24udmFsdWUsXG4gICAgICAgIFwib3JpZ2luXCI6IG9yaWdpbi52YWx1ZSxcbiAgICAgICAgXCJwZXJzaXN0ZW50XCI6IHRydWUsXG4gICAgICAgIFwicm9sZVwiOiBcInRvb2x0aXBcIixcbiAgICAgICAgXCJhY3RpdmF0b3JQcm9wc1wiOiBhY3RpdmF0b3JQcm9wcy52YWx1ZSxcbiAgICAgICAgXCJfZGlzYWJsZUdsb2JhbFN0YWNrXCI6IHRydWVcbiAgICAgIH0sIHNjb3BlSWQpLCB7XG4gICAgICAgIGFjdGl2YXRvcjogc2xvdHMuYWN0aXZhdG9yLFxuICAgICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc2xvdHMuZGVmYXVsdD8uKC4uLmFyZ3MpID8/IHByb3BzLnRleHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3J3YXJkUmVmcyh7fSwgb3ZlcmxheSk7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlRvb2x0aXAubWpzLm1hcCIsIi8vIENvbXBvc2FibGVzXG5pbXBvcnQgeyBtYWtlVmFsaWRhdGlvblByb3BzLCB1c2VWYWxpZGF0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvc2FibGVzL3ZhbGlkYXRpb24ubWpzXCI7IC8vIFV0aWxpdGllc1xuaW1wb3J0IHsgZ2VuZXJpY0NvbXBvbmVudCB9IGZyb20gXCIuLi8uLi91dGlsL2luZGV4Lm1qc1wiO1xuZXhwb3J0IGNvbnN0IFZWYWxpZGF0aW9uID0gZ2VuZXJpY0NvbXBvbmVudCgpKHtcbiAgbmFtZTogJ1ZWYWxpZGF0aW9uJyxcbiAgcHJvcHM6IG1ha2VWYWxpZGF0aW9uUHJvcHMoKSxcbiAgZW1pdHM6IHtcbiAgICAndXBkYXRlOm1vZGVsVmFsdWUnOiB2YWwgPT4gdHJ1ZVxuICB9LFxuICBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIGxldCB7XG4gICAgICBzbG90c1xuICAgIH0gPSBfcmVmO1xuICAgIGNvbnN0IHZhbGlkYXRpb24gPSB1c2VWYWxpZGF0aW9uKHByb3BzLCAndmFsaWRhdGlvbicpO1xuICAgIHJldHVybiAoKSA9PiBzbG90cy5kZWZhdWx0Py4odmFsaWRhdGlvbik7XG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VlZhbGlkYXRpb24ubWpzLm1hcCIsIi8vIFR5cGVzXG5cbmZ1bmN0aW9uIG1vdW50ZWQoZWwsIGJpbmRpbmcpIHtcbiAgY29uc3QgbW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnMgfHwge307XG4gIGNvbnN0IHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgY29uc3Qge1xuICAgIG9uY2UsXG4gICAgaW1tZWRpYXRlLFxuICAgIC4uLm1vZGlmaWVyS2V5c1xuICB9ID0gbW9kaWZpZXJzO1xuICBjb25zdCBkZWZhdWx0VmFsdWUgPSAhT2JqZWN0LmtleXMobW9kaWZpZXJLZXlzKS5sZW5ndGg7XG4gIGNvbnN0IHtcbiAgICBoYW5kbGVyLFxuICAgIG9wdGlvbnNcbiAgfSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyB2YWx1ZSA6IHtcbiAgICBoYW5kbGVyOiB2YWx1ZSxcbiAgICBvcHRpb25zOiB7XG4gICAgICBhdHRyaWJ1dGVzOiBtb2RpZmllcktleXM/LmF0dHIgPz8gZGVmYXVsdFZhbHVlLFxuICAgICAgY2hhcmFjdGVyRGF0YTogbW9kaWZpZXJLZXlzPy5jaGFyID8/IGRlZmF1bHRWYWx1ZSxcbiAgICAgIGNoaWxkTGlzdDogbW9kaWZpZXJLZXlzPy5jaGlsZCA/PyBkZWZhdWx0VmFsdWUsXG4gICAgICBzdWJ0cmVlOiBtb2RpZmllcktleXM/LnN1YiA/PyBkZWZhdWx0VmFsdWVcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKCkge1xuICAgIGxldCBtdXRhdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICAgIGxldCBvYnNlcnZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIGhhbmRsZXI/LihtdXRhdGlvbnMsIG9ic2VydmVyKTtcbiAgICBpZiAob25jZSkgdW5tb3VudGVkKGVsLCBiaW5kaW5nKTtcbiAgfSk7XG4gIGlmIChpbW1lZGlhdGUpIGhhbmRsZXI/LihbXSwgb2JzZXJ2ZXIpO1xuICBlbC5fbXV0YXRlID0gT2JqZWN0KGVsLl9tdXRhdGUpO1xuICBlbC5fbXV0YXRlW2JpbmRpbmcuaW5zdGFuY2UuJC51aWRdID0ge1xuICAgIG9ic2VydmVyXG4gIH07XG4gIG9ic2VydmVyLm9ic2VydmUoZWwsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gdW5tb3VudGVkKGVsLCBiaW5kaW5nKSB7XG4gIGlmICghZWwuX211dGF0ZT8uW2JpbmRpbmcuaW5zdGFuY2UuJC51aWRdKSByZXR1cm47XG4gIGVsLl9tdXRhdGVbYmluZGluZy5pbnN0YW5jZS4kLnVpZF0ub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICBkZWxldGUgZWwuX211dGF0ZVtiaW5kaW5nLmluc3RhbmNlLiQudWlkXTtcbn1cbmV4cG9ydCBjb25zdCBNdXRhdGUgPSB7XG4gIG1vdW50ZWQsXG4gIHVubW91bnRlZFxufTtcbmV4cG9ydCBkZWZhdWx0IE11dGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCIvLyBUeXBlc1xuXG5mdW5jdGlvbiBtb3VudGVkKGVsLCBiaW5kaW5nKSB7XG4gIGNvbnN0IGhhbmRsZXIgPSBiaW5kaW5nLnZhbHVlO1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIHBhc3NpdmU6ICFiaW5kaW5nLm1vZGlmaWVycz8uYWN0aXZlXG4gIH07XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgZWwuX29uUmVzaXplID0gT2JqZWN0KGVsLl9vblJlc2l6ZSk7XG4gIGVsLl9vblJlc2l6ZVtiaW5kaW5nLmluc3RhbmNlLiQudWlkXSA9IHtcbiAgICBoYW5kbGVyLFxuICAgIG9wdGlvbnNcbiAgfTtcbiAgaWYgKCFiaW5kaW5nLm1vZGlmaWVycz8ucXVpZXQpIHtcbiAgICBoYW5kbGVyKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVubW91bnRlZChlbCwgYmluZGluZykge1xuICBpZiAoIWVsLl9vblJlc2l6ZT8uW2JpbmRpbmcuaW5zdGFuY2UuJC51aWRdKSByZXR1cm47XG4gIGNvbnN0IHtcbiAgICBoYW5kbGVyLFxuICAgIG9wdGlvbnNcbiAgfSA9IGVsLl9vblJlc2l6ZVtiaW5kaW5nLmluc3RhbmNlLiQudWlkXTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICBkZWxldGUgZWwuX29uUmVzaXplW2JpbmRpbmcuaW5zdGFuY2UuJC51aWRdO1xufVxuZXhwb3J0IGNvbnN0IFJlc2l6ZSA9IHtcbiAgbW91bnRlZCxcbiAgdW5tb3VudGVkXG59O1xuZXhwb3J0IGRlZmF1bHQgUmVzaXplO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCIsIi8vIFR5cGVzXG5cbmZ1bmN0aW9uIG1vdW50ZWQoZWwsIGJpbmRpbmcpIHtcbiAgY29uc3Qge1xuICAgIHNlbGYgPSBmYWxzZVxuICB9ID0gYmluZGluZy5tb2RpZmllcnMgPz8ge307XG4gIGNvbnN0IHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgY29uc3Qgb3B0aW9ucyA9IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUub3B0aW9ucyB8fCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9O1xuICBjb25zdCBoYW5kbGVyID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8ICdoYW5kbGVFdmVudCcgaW4gdmFsdWUgPyB2YWx1ZSA6IHZhbHVlLmhhbmRsZXI7XG4gIGNvbnN0IHRhcmdldCA9IHNlbGYgPyBlbCA6IGJpbmRpbmcuYXJnID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihiaW5kaW5nLmFyZykgOiB3aW5kb3c7XG4gIGlmICghdGFyZ2V0KSByZXR1cm47XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgZWwuX29uU2Nyb2xsID0gT2JqZWN0KGVsLl9vblNjcm9sbCk7XG4gIGVsLl9vblNjcm9sbFtiaW5kaW5nLmluc3RhbmNlLiQudWlkXSA9IHtcbiAgICBoYW5kbGVyLFxuICAgIG9wdGlvbnMsXG4gICAgLy8gRG9uJ3QgcmVmZXJlbmNlIHNlbGZcbiAgICB0YXJnZXQ6IHNlbGYgPyB1bmRlZmluZWQgOiB0YXJnZXRcbiAgfTtcbn1cbmZ1bmN0aW9uIHVubW91bnRlZChlbCwgYmluZGluZykge1xuICBpZiAoIWVsLl9vblNjcm9sbD8uW2JpbmRpbmcuaW5zdGFuY2UuJC51aWRdKSByZXR1cm47XG4gIGNvbnN0IHtcbiAgICBoYW5kbGVyLFxuICAgIG9wdGlvbnMsXG4gICAgdGFyZ2V0ID0gZWxcbiAgfSA9IGVsLl9vblNjcm9sbFtiaW5kaW5nLmluc3RhbmNlLiQudWlkXTtcbiAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICBkZWxldGUgZWwuX29uU2Nyb2xsW2JpbmRpbmcuaW5zdGFuY2UuJC51aWRdO1xufVxuZnVuY3Rpb24gdXBkYXRlZChlbCwgYmluZGluZykge1xuICBpZiAoYmluZGluZy52YWx1ZSA9PT0gYmluZGluZy5vbGRWYWx1ZSkgcmV0dXJuO1xuICB1bm1vdW50ZWQoZWwsIGJpbmRpbmcpO1xuICBtb3VudGVkKGVsLCBiaW5kaW5nKTtcbn1cbmV4cG9ydCBjb25zdCBTY3JvbGwgPSB7XG4gIG1vdW50ZWQsXG4gIHVubW91bnRlZCxcbiAgdXBkYXRlZFxufTtcbmV4cG9ydCBkZWZhdWx0IFNjcm9sbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCJcclxuaW1wb3J0IHtjcmVhdGVBcHB9IGZyb20gJ3Z1ZSc7XHJcbmltcG9ydCBBcHAgZnJvbSAnLi9FbGVtZW50U3R5bGVFZGl0b3JBcHAudnVlJztcclxuXHJcbmltcG9ydCBWdWVDbGlja0F3YXkgZnJvbSBcInZ1ZTMtY2xpY2stYXdheVwiO1xyXG5cclxuaW1wb3J0IG1pdHQgZnJvbSAnbWl0dCc7XHJcblxyXG5jb25zdCBlbWl0dGVyID0gbWl0dCgpO1xyXG5cclxuY29uc3QgYXBwID0gY3JlYXRlQXBwKEFwcCk7XHJcbmFwcC5jb25maWcuZ2xvYmFsUHJvcGVydGllcy5lbWl0dGVyID0gZW1pdHRlcjtcclxuXHJcbmFwcC5kaXJlY3RpdmUoXCJ0b29sdGlwXCIsIHtcclxuICAgIG1vdW50ZWQ6IChlbCwgYmluZGluZykgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgYm9vdHN0cmFwLlRvb2x0aXAoZWwsIHtcclxuICAgICAgICAgICAgYm91bmRhcnk6IGRvY3VtZW50LmJvZHksXHJcbiAgICAgICAgICAgIGNvbnRhaW5lcjogZWwucGFyZW50Tm9kZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSk7XHJcblxyXG4vLyBWdWV0aWZ5XHJcbmltcG9ydCAndnVldGlmeS9zdHlsZXMnO1xyXG5pbXBvcnQgeyBjcmVhdGVWdWV0aWZ5IH0gZnJvbSAndnVldGlmeSc7XHJcbmltcG9ydCAqIGFzIGNvbXBvbmVudHMgZnJvbSAndnVldGlmeS9jb21wb25lbnRzJztcclxuaW1wb3J0ICogYXMgZGlyZWN0aXZlcyBmcm9tICd2dWV0aWZ5L2RpcmVjdGl2ZXMnO1xyXG5cclxuY29uc3QgdnVldGlmeSA9IGNyZWF0ZVZ1ZXRpZnkoe1xyXG4gICAgY29tcG9uZW50cyxcclxuICAgIGRpcmVjdGl2ZXMsXHJcbn0pXHJcblxyXG5hcHAudXNlKHZ1ZXRpZnkpO1xyXG5hcHAudXNlKFZ1ZUNsaWNrQXdheSk7XHJcbmFwcC5tb3VudCgnI213LWVsZW1lbnQtc3R5bGUtZWRpdG9yLWFwcCcpO1xyXG4iXSwibmFtZXMiOlsiX3NmY19tYWluIiwiYWxpZ25tZW50IiwiX2hvaXN0ZWRfMSIsIl9ob2lzdGVkXzIiLCJfY3JlYXRlRWxlbWVudFZOb2RlIiwiX2hvaXN0ZWRfMyIsIl9ob2lzdGVkXzQiLCJfaG9pc3RlZF81IiwiX2hvaXN0ZWRfNyIsIl9ob2lzdGVkXzkiLCJfaG9pc3RlZF8xMSIsIl9vcGVuQmxvY2siLCJfY3JlYXRlRWxlbWVudEJsb2NrIiwiX25vcm1hbGl6ZUNsYXNzIiwiJHByb3BzIiwiJG9wdGlvbnMiLCJfX2RlZmF1bHRfXyIsIm5ld1ZhbHVlIiwibmV3Rm9udEZhbWlseSIsImZvbnRGYW1pbHkiLCJmb250cyIsIiRkYXRhIiwiX2hvaXN0ZWRfNiIsIl9GcmFnbWVudCIsIl9yZW5kZXJMaXN0IiwiZm9udEZhbWlseUl0ZW0iLCJpbmRleCIsIiRldmVudCIsIl90b0Rpc3BsYXlTdHJpbmciLCJfY3JlYXRlVk5vZGUiLCJfY29tcG9uZW50X3Zfc2xpZGVyIiwiYXJncyIsIkNvbG9yUGlja2VyIiwiRm9udFBpY2tlciIsIkRyb3Bkb3duIiwiSW5wdXQiLCJTbGlkZXIiLCJBbGlnbiIsIkRyb3Bkb3duU21hbGwiLCJTbGlkZXJTbWFsbCIsIm5vZGUiLCJjc3MiLCJhbGlnbiIsImlzIiwiY29sb3IiLCJmb250IiwidGV4dFRyYW5zZm9ybSIsInByb3AiLCJ2YWwiLCJlbGVtZW50U3R5bGVFZGl0b3JTaG93IiwiZWxlbWVudCIsIm9sZFZhbHVlIiwic2V0QXV0byIsIl9jb21wb25lbnRfRm9udFBpY2tlciIsIl9jb21wb25lbnRfQWxpZ24iLCJfY29tcG9uZW50X0NvbG9yUGlja2VyIiwiX2NvbXBvbmVudF9TbGlkZXJTbWFsbCIsIl9jb21wb25lbnRfRHJvcGRvd25TbWFsbCIsInBhZGRpbmciLCJtYXJnaW4iLCJfaG9pc3RlZF84IiwiX2hvaXN0ZWRfMTAiLCJfaG9pc3RlZF8xMiIsIl9ob2lzdGVkXzEzIiwiX2hvaXN0ZWRfMTQiLCJfaG9pc3RlZF8xNSIsIl9ob2lzdGVkXzE2IiwiX2hvaXN0ZWRfMTciLCJfaG9pc3RlZF8xOCIsIm5ld2ZpbGUiLCJ1cmwiLCJmaWxlIiwiRmlsZVBpY2tlciIsIkltYWdlUGlja2VyIiwiYmciLCJ1cmxWYWwiLCJfY29tcG9uZW50X0ltYWdlUGlja2VyIiwiX2NhY2hlIiwiX3ZNb2RlbFRleHQiLCJCb3JkZXJSYWRpdXMiLCJib3JkZXIiLCJmcnN0IiwiaSIsInNpemUiLCJzdHlsZSIsImJvcmRlclJhZGl1cyIsImJvcmRlclJhZGl1c1ZhbHVlIiwiYm9yZGVySW1hZ2VWYWx1ZSIsImxpIiwiaXNJbmFjY2Vzc2libGUiLCJlIiwidGFyZ2V0IiwiY29udGFpbmVyTm9kZSIsIkVsZW1lbnRTdHlsZUFuaW1hdGlvbnNBcHBsaWVyIiwiYW5pbWF0aW9uIiwibm9kZVdpbmRvdyIsInNlbCIsImlkIiwiY29uZmlnIiwidGFyZ2V0TXciLCJjdXJyIiwiYSIsIml0ZW0iLCJjaXRlbSIsImFuaW1hdGlvbkRhdGEiLCJzcGVlZCIsIndoZW4iLCJncmlkT3B0aW9uIiwic2VsZWN0ZWRHcmlkT3B0aW9uIiwib3B0aW9uIiwiY29tbW9uanNHbG9iYWwiLCJjcmVhdGVDb21tb25qc01vZHVsZSIsImZuIiwiYmFzZWRpciIsIm1vZHVsZSIsInBhdGgiLCJiYXNlIiwiY29tbW9uanNSZXF1aXJlIiwidkNsaWNrT3V0c2lkZV91bWQiLCJleHBvcnRzIiwibiIsInQiLCJyIiwibyIsImQiLCJjIiwidSIsImwiLCJ2Q2xpY2tPdXRzaWRlIiwiX2hvaXN0ZWRfMSQxIiwiX2hvaXN0ZWRfMiQxIiwiY3JlYXRlRWxlbWVudFZOb2RlIiwiX2hvaXN0ZWRfMyQxIiwiX2hvaXN0ZWRfNCQxIiwicmVuZGVyJDEiLCJfY3R4Iiwib3BlbkJsb2NrIiwiY3JlYXRlRWxlbWVudEJsb2NrIiwic3R5bGVJbmplY3QiLCJyZWYiLCJpbnNlcnRBdCIsImhlYWQiLCJjc3NfMjQ4eiQxIiwic2NyaXB0JDEiLCJMb2FkaW5nIiwic2NyaXB0IiwiaXNMaW1pdCIsInZhbHVlIiwidGFncyIsIm5hbWUiLCJldmVudCIsImVsIiwibWVudSIsIkVMRU1FTlRfSEVJR0hUIiwiQk9SREVSX0hFSUdIVCIsInRhZ0RhdGEiLCJ0YWciLCJrZXlTaG91bGRBZGRUYWciLCJ0eXBlSXNOb3RCbHVyIiwiaXNEdXBsaWNhdGVkT3JNYXhMZW5ndGgiLCJ0YWdWYWx1ZSIsInJlbmRlciIsIiRzZXR1cCIsIl9jb21wb25lbnRfTG9hZGluZyIsInJlc29sdmVDb21wb25lbnQiLCJfZGlyZWN0aXZlX2NsaWNrX291dHNpZGUiLCJyZXNvbHZlRGlyZWN0aXZlIiwid2l0aERpcmVjdGl2ZXMiLCJub3JtYWxpemVDbGFzcyIsIkZyYWdtZW50IiwicmVuZGVyTGlzdCIsInJlbmRlclNsb3QiLCJub3JtYWxpemVQcm9wcyIsIm1lcmdlUHJvcHMiLCJ0b0Rpc3BsYXlTdHJpbmciLCJjcmVhdGVDb21tZW50Vk5vZGUiLCJ3aXRoTW9kaWZpZXJzIiwid2l0aEtleXMiLCJ2TW9kZWxUZXh0IiwiY3JlYXRlQmxvY2siLCJndWFyZFJlYWN0aXZlUHJvcHMiLCJjc3NfMjQ4eiIsImVudHJ5X2VzbSIsImluc3RhbGxhYmxlIiwiYXBwIiwiVnVlM1RhZ3NJbnB1dCIsInJlZ2V4IiwiY2xhc3NOYW1lIiwiY2xhc3NlcyIsImFjdGl2ZU5vZGVDbGFzc2VzIiwiY2xhc3Nlc1RvSW5jbHVkZSIsIl9jb21wb25lbnRfdnVlM190YWdzX2lucHV0IiwiX2NvbXBvbmVudF9Cb3JkZXJSYWRpdXMiLCJFbGVtZW50U3R5bGVFZGl0b3JCYWNrZ3JvdW5kIiwiRWxlbWVudFN0eWxlRWRpdG9yUm91bmRlZENvcm5lcnMiLCJFbGVtZW50U3R5bGVFZGl0b3JFbGVtZW50U2VsZWN0b3IiLCJFbGVtZW50U3R5bGVFZGl0b3JUeXBvZ3JhcGh5IiwiRWxlbWVudFN0eWxlRWRpdG9yU3BhY2luZyIsIkVsZW1lbnRTdHlsZUVkaXRvckJvcmRlciIsIkVsZW1lbnRTdHlsZUVkaXRvckNvbnRhaW5lciIsIkVsZW1lbnRTdHlsZUVkaXRvckdyaWQiLCJFbGVtZW50U3R5bGVFZGl0b3JBbmltYXRpb25zIiwiRWxlbWVudFN0eWxlRWRpdG9yQ2xhc3NBcHBsaWVyIiwic2V0dGluZ3MiLCJfd2l0aERpcmVjdGl2ZXMiLCJfY29tcG9uZW50X0VsZW1lbnRTdHlsZUVkaXRvckVsZW1lbnRTZWxlY3RvciIsIl9jb21wb25lbnRfRWxlbWVudFN0eWxlRWRpdG9yQmFja2dyb3VuZCIsIl9jb21wb25lbnRfRWxlbWVudFN0eWxlRWRpdG9yVHlwb2dyYXBoeSIsIl9jb21wb25lbnRfRWxlbWVudFN0eWxlRWRpdG9yU3BhY2luZyIsIl9jb21wb25lbnRfRWxlbWVudFN0eWxlRWRpdG9yQ29udGFpbmVyIiwiX2NvbXBvbmVudF9FbGVtZW50U3R5bGVFZGl0b3JHcmlkIiwiX2NvbXBvbmVudF9FbGVtZW50U3R5bGVFZGl0b3JCb3JkZXIiLCJfY29tcG9uZW50X0VsZW1lbnRTdHlsZUVkaXRvclJvdW5kZWRDb3JuZXJzIiwiX2NvbXBvbmVudF9FbGVtZW50U3R5bGVFZGl0b3JBbmltYXRpb25zIiwiX2NvbXBvbmVudF9FbGVtZW50U3R5bGVFZGl0b3JDbGFzc0FwcGxpZXIiLCJJTl9CUk9XU0VSIiwiU1VQUE9SVFNfSU5URVJTRUNUSU9OIiwiU1VQUE9SVFNfVE9VQ0giLCJfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyIsIm9iaiIsInByaXZhdGVNYXAiLCJfY2hlY2tQcml2YXRlUmVkZWNsYXJhdGlvbiIsInByaXZhdGVDb2xsZWN0aW9uIiwiX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwicmVjZWl2ZXIiLCJkZXNjcmlwdG9yIiwiX2NsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvciIsIl9jbGFzc0FwcGx5RGVzY3JpcHRvclNldCIsIl9jbGFzc1ByaXZhdGVGaWVsZEdldCIsIl9jbGFzc0FwcGx5RGVzY3JpcHRvckdldCIsImFjdGlvbiIsImdldE5lc3RlZFZhbHVlIiwiZmFsbGJhY2siLCJsYXN0IiwiZGVlcEVxdWFsIiwiYiIsInByb3BzIiwicCIsImdldE9iamVjdFZhbHVlQnlQYXRoIiwiZ2V0UHJvcGVydHlGcm9tSXRlbSIsInByb3BlcnR5IiwiY3JlYXRlUmFuZ2UiLCJsZW5ndGgiLCJzdGFydCIsInYiLCJrIiwiY29udmVydFRvVW5pdCIsInN0ciIsInVuaXQiLCJpc09iamVjdCIsInJlZkVsZW1lbnQiLCJrZXlDb2RlcyIsImtleVZhbHVlcyIsImtleXMiLCJoYXMiLCJrZXkiLCJwaWNrIiwicGF0aHMiLCJleGNsdWRlIiwiZm91bmQiLCJyZXN0Iiwib21pdCIsImNsb25lIiwib25SRSIsImlzT24iLCJidWJibGluZ0V2ZW50cyIsImZpbHRlcklucHV0QXR0cnMiLCJhdHRycyIsImV2ZW50cyIsImlucHV0RXZlbnRzIiwicm9vdEF0dHJzIiwiaW5wdXRBdHRycyIsIndyYXBJbkFycmF5IiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJnZXREZWNpbWFscyIsInRyaW1tZWRTdHIiLCJwYWRFbmQiLCJjaGFyIiwiY2h1bmsiLCJjaHVua2VkIiwiaHVtYW5SZWFkYWJsZUZpbGVTaXplIiwiYnl0ZXMiLCJwcmVmaXgiLCJtZXJnZURlZXAiLCJzb3VyY2UiLCJhcnJheUZuIiwib3V0Iiwic291cmNlUHJvcGVydHkiLCJ0YXJnZXRQcm9wZXJ0eSIsImZsYXR0ZW5GcmFnbWVudHMiLCJub2RlcyIsInRvS2ViYWJDYXNlIiwia2ViYWIiLCJmaW5kQ2hpbGRyZW5XaXRoUHJvdmlkZSIsInZub2RlIiwiY2hpbGQiLCJfYXJyIiwiX3BvaW50ZXIiLCJDaXJjdWxhckJ1ZmZlciIsImdldEV2ZW50Q29vcmRpbmF0ZXMiLCJkZXN0cnVjdENvbXB1dGVkIiwiZ2V0dGVyIiwicmVmcyIsInJlYWN0aXZlIiwiY29tcHV0ZWQiLCJ3YXRjaEVmZmVjdCIsInRvUmVmcyIsImluY2x1ZGVzIiwiYXJyIiwiZXZlbnROYW1lIiwicHJvcE5hbWUiLCJFdmVudFByb3AiLCJoYXNFdmVudCIsImNhcGl0YWxpemUiLCJjYWxsRXZlbnQiLCJoYW5kbGVyIiwiX2xlbjIiLCJfa2V5MiIsImgiLCJmb2N1c2FibGVDaGlsZHJlbiIsImZpbHRlckJ5VGFiSW5kZXgiLCJ0YXJnZXRzIiwicyIsImdldE5leHRFbGVtZW50IiwiZWxlbWVudHMiLCJsb2NhdGlvbiIsImNvbmRpdGlvbiIsIl9lbCIsImlkeCIsImluYyIsImZvY3VzQ2hpbGQiLCJmb2N1c2FibGUiLCJfYSIsIl9iIiwiX2MiLCJfZCIsIm5vb3AiLCJtYXRjaGVzU2VsZWN0b3IiLCJzZWxlY3RvciIsImJsb2NrIiwiaW5saW5lIiwicGFyc2VBbmNob3IiLCJhbmNob3IiLCJpc1J0bCIsInNpZGUiLCJ0b1BoeXNpY2FsIiwiZmxpcFNpZGUiLCJmbGlwQWxpZ24iLCJmbGlwQ29ybmVyIiwiZ2V0QXhpcyIsIkJveCIsIl9yZWYiLCJ4IiwieSIsIndpZHRoIiwiaGVpZ2h0IiwiZ2V0T3ZlcmZsb3ciLCJudWxsaWZ5VHJhbnNmb3JtcyIsInJlY3QiLCJ0eCIsInRhIiwic3giLCJzeSIsImR4IiwiZHkiLCJ0byIsInciLCJhbmltYXRlIiwia2V5ZnJhbWVzIiwib3B0aW9ucyIsInJlc29sdmUiLCJoYW5kbGVycyIsImJpbmRQcm9wcyIsIl9oYW5kbGVyIiwidW5iaW5kUHJvcHMiLCJtYWluVFJDIiwiUmNvIiwiR2NvIiwiQmNvIiwibm9ybUJHIiwibm9ybVRYVCIsInJldlRYVCIsInJldkJHIiwiYmxrVGhycyIsImJsa0NsbXAiLCJkZWx0YVltaW4iLCJzY2FsZUJvVyIsInNjYWxlV29CIiwibG9Db25UaHJlc2giLCJsb0NvbkZhY3RvciIsImxvQ29uT2Zmc2V0IiwibG9DbGlwIiwiQVBDQWNvbnRyYXN0IiwidGV4dCIsImJhY2tncm91bmQiLCJSdHh0IiwiR3R4dCIsIkJ0eHQiLCJSYmciLCJHYmciLCJCYmciLCJZdHh0IiwiWWJnIiwib3V0cHV0Q29udHJhc3QiLCJTQVBDIiwiZGVwcmVjYXRlIiwib3JpZ2luYWwiLCJyZXBsYWNlbWVudCIsImRlbHRhIiwiY2llbGFiRm9yd2FyZFRyYW5zZm9ybSIsImNpZWxhYlJldmVyc2VUcmFuc2Zvcm0iLCJmcm9tWFlaIiwieHl6IiwidHJhbnNmb3JtIiwidHJhbnNmb3JtZWRZIiwidG9YWVoiLCJsYWIiLCJMbiIsInNyZ2JGb3J3YXJkTWF0cml4Iiwic3JnYkZvcndhcmRUcmFuc2Zvcm0iLCJDIiwic3JnYlJldmVyc2VNYXRyaXgiLCJzcmdiUmV2ZXJzZVRyYW5zZm9ybSIsInJnYiIsIm1hdHJpeCIsImciLCJpc0Nzc0NvbG9yIiwiY3NzQ29sb3JSZSIsIm1hcHBlcnMiLCJIU0x0b1JHQiIsIkhTVnRvUkdCIiwicGFyc2VDb2xvciIsImdyb3VwcyIsInZhbHVlcyIsInJlYWxWYWx1ZXMiLCJoZXgiLCJIZXhUb1JHQiIsIkhTTHRvSFNWIiwiaHN2YSIsImYiLCJoc2xhIiwiUkdCdG9IU1YiLCJyZ2JhIiwiaHN2IiwiSFNWdG9IU0wiLCJzcHJpbWUiLCJoc2wiLCJSR0J0b0NTUyIsIkhTVnRvQ1NTIiwidG9IZXgiLCJSR0J0b0hleCIsIl9yZWYyIiwicGFyc2VIZXgiLCJIZXhUb0hTViIsIkhTVnRvSGV4IiwibGlnaHRlbiIsImFtb3VudCIsIkNJRUxBQi5mcm9tWFlaIiwic1JHQi50b1hZWiIsInNSR0IuZnJvbVhZWiIsIkNJRUxBQi50b1hZWiIsImRhcmtlbiIsImdldEx1bWEiLCJnZXRDb250cmFzdCIsImZpcnN0Iiwic2Vjb25kIiwibDEiLCJsMiIsImxpZ2h0IiwiZGFyayIsImdldEZvcmVncm91bmQiLCJibGFja0NvbnRyYXN0IiwicHJvcHNGYWN0b3J5IiwiZGVmYXVsdHMiLCJkZWZpbml0aW9uIiwibWFrZUNvbXBvbmVudFByb3BzIiwiZGVmaW5lQ29tcG9uZW50IiwicHJvcEtleXMiLCJjdHgiLCJpbmplY3REZWZhdWx0cyIsIl9wcm9wcyIsInByb3ZpZGVTdWJEZWZhdWx0cyIsImludGVybmFsVXNlRGVmYXVsdHMiLCJzZXR1cEJpbmRpbmdzIiwiZ2VuZXJpY0NvbXBvbmVudCIsImV4cG9zZURlZmF1bHRzIiwiX2RlZmluZUNvbXBvbmVudCIsImNyZWF0ZVNpbXBsZUZ1bmN0aW9uYWwiLCJrbGFzcyIsImNhbWVsaXplIiwic2xvdHMiLCJhdHRhY2hlZFJvb3QiLCJyb290Iiwic3RhbmRhcmRFYXNpbmciLCJkZWNlbGVyYXRlZEVhc2luZyIsImFjY2VsZXJhdGVkRWFzaW5nIiwiZ2V0Q3VycmVudEluc3RhbmNlIiwibWVzc2FnZSIsInZtIiwiX2dldEN1cnJlbnRJbnN0YW5jZSIsImdldEN1cnJlbnRJbnN0YW5jZU5hbWUiLCJfdWlkIiwiX21hcCIsImdldFVpZCIsInVpZCIsImdldFNjcm9sbFBhcmVudCIsImluY2x1ZGVIaWRkZW4iLCJpc1BvdGVudGlhbGx5U2Nyb2xsYWJsZSIsImhhc1Njcm9sbGJhciIsImdldFNjcm9sbFBhcmVudHMiLCJzdG9wQXQiLCJpbmplY3RTZWxmIiwicHJvdmlkZXMiLCJpc0ZpeGVkUG9zaXRpb24iLCJ1c2VSZW5kZXIiLCJEZWZhdWx0c1N5bWJvbCIsImNyZWF0ZURlZmF1bHRzIiwiaW5qZWN0IiwicHJvdmlkZURlZmF1bHRzIiwiaW5qZWN0ZWREZWZhdWx0cyIsInByb3ZpZGVkRGVmYXVsdHMiLCJuZXdEZWZhdWx0cyIsInVucmVmIiwic2NvcGVkIiwicmVzZXQiLCJwcm9wZXJ0aWVzIiwibGVuIiwicHJvdmlkZSIsInByb3BJc0RlZmluZWQiLCJjb21wb25lbnREZWZhdWx0cyIsInByb3BWYWx1ZSIsIl9zdWJjb21wb25lbnREZWZhdWx0cyIsInNoYWxsb3dSZWYiLCJzdWJDb21wb25lbnRzIiwiaW5qZWN0ZWQiLCJicmVha3BvaW50cyIsIkRpc3BsYXlTeW1ib2wiLCJkZWZhdWx0RGlzcGxheU9wdGlvbnMiLCJwYXJzZURpc3BsYXlPcHRpb25zIiwiZ2V0Q2xpZW50V2lkdGgiLCJzc3IiLCJnZXRDbGllbnRIZWlnaHQiLCJnZXRQbGF0Zm9ybSIsInVzZXJBZ2VudCIsIm1hdGNoIiwicmVnZXhwIiwiYW5kcm9pZCIsImlvcyIsImNvcmRvdmEiLCJlbGVjdHJvbiIsImNocm9tZSIsImVkZ2UiLCJmaXJlZm94Iiwib3BlcmEiLCJ3aW4iLCJtYWMiLCJsaW51eCIsImNyZWF0ZURpc3BsYXkiLCJ0aHJlc2hvbGRzIiwibW9iaWxlQnJlYWtwb2ludCIsInBsYXRmb3JtIiwic3RhdGUiLCJ1cGRhdGVTaXplIiwidXBkYXRlIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsInh4bCIsImJyZWFrcG9pbnRWYWx1ZSIsIm1vYmlsZSIsInVzZURpc3BsYXkiLCJkaXNwbGF5IiwiYWxpYXNlcyIsIm1kaSIsIlZDbGFzc0ljb24iLCJJY29uVmFsdWUiLCJJY29uU3ltYm9sIiwibWFrZUljb25Qcm9wcyIsIlZDb21wb25lbnRJY29uIiwiSWNvbiIsIlZTdmdJY29uIiwiX21lcmdlUHJvcHMiLCJWTGlnYXR1cmVJY29uIiwiZGVmYXVsdFNldHMiLCJjcmVhdGVJY29ucyIsInVzZUljb24iLCJpY29ucyIsImljb25BbGlhcyIsImljb24iLCJpY29uU2V0TmFtZSIsInNldE5hbWUiLCJpY29uTmFtZSIsImVuIiwiZGVmYXVsdFJ0bCIsInVzZVRvZ2dsZVNjb3BlIiwic2NvcGUiLCJlZmZlY3RTY29wZSIsIndhdGNoIiwiYWN0aXZlIiwib25TY29wZURpc3Bvc2UiLCJ1c2VQcm94aWVkTW9kZWwiLCJkZWZhdWx0VmFsdWUiLCJ0cmFuc2Zvcm1JbiIsInRyYW5zZm9ybU91dCIsImludGVybmFsIiwia2ViYWJQcm9wIiwiaXNDb250cm9sbGVkIiwibW9kZWwiLCJleHRlcm5hbFZhbHVlIiwiaW50ZXJuYWxWYWx1ZSIsInRvUmF3IiwiTEFOR19QUkVGSVgiLCJyZXBsYWNlIiwicGFyYW1zIiwiY3JlYXRlVHJhbnNsYXRlRnVuY3Rpb24iLCJjdXJyZW50IiwibWVzc2FnZXMiLCJfbGVuIiwiX2tleSIsInNob3J0S2V5IiwiY3VycmVudExvY2FsZSIsImZhbGxiYWNrTG9jYWxlIiwiY3JlYXRlTnVtYmVyRnVuY3Rpb24iLCJ1c2VQcm92aWRlZCIsInByb3ZpZGVkIiwiY3JlYXRlUHJvdmlkZUZ1bmN0aW9uIiwiY3JlYXRlVnVldGlmeUFkYXB0ZXIiLCJMb2NhbGVTeW1ib2wiLCJpc0xvY2FsZUluc3RhbmNlIiwiY3JlYXRlTG9jYWxlIiwiaTE4biIsInJ0bCIsImNyZWF0ZVJ0bCIsInVzZUxvY2FsZSIsImxvY2FsZSIsInByb3ZpZGVMb2NhbGUiLCJwcm92aWRlUnRsIiwiZGF0YSIsInVzZVJ0bCIsIlRoZW1lU3ltYm9sIiwibWFrZVRoZW1lUHJvcHMiLCJkZWZhdWx0VGhlbWVPcHRpb25zIiwicGFyc2VUaGVtZU9wdGlvbnMiLCJ0aGVtZXMiLCJ0aGVtZSIsImRlZmF1bHRUaGVtZSIsImNyZWF0ZVRoZW1lIiwicGFyc2VkT3B0aW9ucyIsImNvbXB1dGVkVGhlbWVzIiwiYWNjIiwidmFyaWF0aW9uIiwib25Db2xvciIsImNvbG9yVmFsIiwic3R5bGVzIiwibGluZXMiLCJjcmVhdGVDc3NDbGFzcyIsImdlbkNzc1ZhcmlhYmxlcyIsInRoZW1lTmFtZSIsImJnTGluZXMiLCJmZ0xpbmVzIiwiY29sb3JzIiwiZ2V0SGVhZCIsImluc3RhbGwiLCJlbnRyeSIsInVwZGF0ZVN0eWxlcyIsInN0eWxlRWwiLCJ0aGVtZUNsYXNzZXMiLCJwcm92aWRlVGhlbWUiLCJuZXdUaGVtZSIsInVzZVRoZW1lIiwiY29udGVudCIsImxpbmUiLCJsaWdodE92ZXJsYXkiLCJkYXJrT3ZlcmxheSIsInZhcmlhYmxlcyIsImZpcnN0RGF5IiwiZ2V0V2Vla0FycmF5IiwiZGF0ZSIsIndlZWtzIiwiY3VycmVudFdlZWsiLCJmaXJzdERheU9mTW9udGgiLCJzdGFydE9mTW9udGgiLCJsYXN0RGF5T2ZNb250aCIsImVuZE9mTW9udGgiLCJmaXJzdERheVdlZWtJbmRleCIsImxhc3REYXlXZWVrSW5kZXgiLCJhZGphY2VudERheSIsImRheSIsInBhcnNlTG9jYWxEYXRlIiwicGFydHMiLCJfWVlZTU1ERCIsInBhcnNlZCIsInN1bmRheUphbnVhcnlTZWNvbmQyMDAwIiwiZ2V0V2Vla2RheXMiLCJkYXlzRnJvbVN1bmRheSIsIndlZWtkYXkiLCJmb3JtYXQiLCJmb3JtYXRTdHJpbmciLCJhZGREYXlzIiwiYWRkTW9udGhzIiwiZ2V0WWVhciIsImdldE1vbnRoIiwic3RhcnRPZlllYXIiLCJlbmRPZlllYXIiLCJpc1dpdGhpblJhbmdlIiwicmFuZ2UiLCJpc0FmdGVyIiwiaXNCZWZvcmUiLCJpc1ZhbGlkIiwiY29tcGFyaW5nIiwiaXNFcXVhbCIsImlzU2FtZURheSIsImlzU2FtZU1vbnRoIiwiZ2V0RGlmZiIsInNldFllYXIiLCJ5ZWFyIiwic3RhcnRPZkRheSIsImVuZE9mRGF5IiwiVnVldGlmeURhdGVBZGFwdGVyIiwiRGF0ZUFkYXB0ZXJTeW1ib2wiLCJjcmVhdGVEYXRlIiwidXNlUmVzaXplT2JzZXJ2ZXIiLCJjYWxsYmFjayIsImJveCIsInJlc2l6ZVJlZiIsImNvbnRlbnRSZWN0Iiwib2JzZXJ2ZXIiLCJlbnRyaWVzIiwib25CZWZvcmVVbm1vdW50IiwicmVhZG9ubHkiLCJWdWV0aWZ5TGF5b3V0S2V5IiwiVnVldGlmeUxheW91dEl0ZW1LZXkiLCJST09UX1pJTkRFWCIsIm1ha2VMYXlvdXRQcm9wcyIsIm1ha2VMYXlvdXRJdGVtUHJvcHMiLCJ1c2VMYXlvdXQiLCJsYXlvdXQiLCJ1c2VMYXlvdXRJdGVtIiwiaXNLZXB0QWxpdmUiLCJvbkRlYWN0aXZhdGVkIiwib25BY3RpdmF0ZWQiLCJsYXlvdXRJdGVtU3R5bGVzIiwibGF5b3V0SXRlbVNjcmltU3R5bGVzIiwiZ2VuZXJhdGVMYXllcnMiLCJwb3NpdGlvbnMiLCJsYXlvdXRTaXplcyIsImFjdGl2ZUl0ZW1zIiwicHJldmlvdXNMYXllciIsImxheWVycyIsInBvc2l0aW9uIiwibGF5ZXIiLCJjcmVhdGVMYXlvdXQiLCJwYXJlbnRMYXlvdXQiLCJyb290WkluZGV4IiwicmVnaXN0ZXJlZCIsInByaW9yaXRpZXMiLCJkaXNhYmxlZFRyYW5zaXRpb25zIiwibGF5b3V0UmVjdCIsImNvbXB1dGVkT3ZlcmxhcHMiLCJtYXAiLCJvdmVybGFwcyIsIm92ZXJsYXAiLCJ0b3AiLCJib3R0b20iLCJ0b3BQb3NpdGlvbiIsImJvdHRvbVBvc2l0aW9uIiwidG9wQW1vdW50IiwiYm90dG9tQW1vdW50IiwidW5pcXVlUHJpb3JpdGllcyIsIml0ZW1zIiwidHJhbnNpdGlvbnNFbmFibGVkIiwibWFpblJlY3QiLCJtYWluU3R5bGVzIiwiZ2V0TGF5b3V0SXRlbSIsInJvb3RWbSIsImlzTW91bnRlZCIsIm9uTW91bnRlZCIsIm9yZGVyIiwibGF5b3V0U2l6ZSIsImVsZW1lbnRTaXplIiwiZGlzYWJsZVRyYW5zaXRpb25zIiwiYWJzb2x1dGUiLCJpbnN0YW5jZUluZGV4IiwiekluZGV4IiwiaXNIb3Jpem9udGFsIiwiaXNPcHBvc2l0ZUhvcml6b250YWwiLCJpc09wcG9zaXRlVmVydGljYWwiLCJsYXlvdXRDbGFzc2VzIiwibGF5b3V0U3R5bGVzIiwiY3JlYXRlVnVldGlmeSIsInZ1ZXRpZnkiLCJibHVlcHJpbnQiLCJjb21wb25lbnRzIiwiZGlyZWN0aXZlcyIsIm1vdW50IiwibmV4dFRpY2siLCJ2ZXJzaW9uIiwibWFrZVZBcHBQcm9wcyIsIlZBcHAiLCJsYXlvdXRSZWYiLCJydGxDbGFzc2VzIiwibWFrZVRhZ1Byb3BzIiwibWFrZVZUb29sYmFyVGl0bGVQcm9wcyIsIlZUb29sYmFyVGl0bGUiLCJoYXNUZXh0IiwibWFrZVRyYW5zaXRpb25Qcm9wcyIsImNyZWF0ZUNzc1RyYW5zaXRpb24iLCJvcmlnaW4iLCJtb2RlIiwiZnVuY3Rpb25zIiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwibGVmdCIsIlRyYW5zaXRpb25Hcm91cCIsIlRyYW5zaXRpb24iLCJjcmVhdGVKYXZhc2NyaXB0VHJhbnNpdGlvbiIsIkV4cGFuZFRyYW5zaXRpb25HZW5lcmF0b3IiLCJleHBhbmRlZFBhcmVudENsYXNzIiwic2l6ZVByb3BlcnR5Iiwib2Zmc2V0UHJvcGVydHkiLCJpbml0aWFsU3R5bGUiLCJvZmZzZXQiLCJyZXNldFN0eWxlcyIsIm9uQWZ0ZXJMZWF2ZSIsIm1ha2VWRGlhbG9nVHJhbnNpdGlvblByb3BzIiwiVkRpYWxvZ1RyYW5zaXRpb24iLCJkb25lIiwiZ2V0RGltZW5zaW9ucyIsImdldENoaWxkcmVuIiwiZWxzIiwidGFyZ2V0Qm94IiwiZWxCb3giLCJvcmlnaW5YIiwib3JpZ2luWSIsImFuY2hvclNpZGUiLCJhbmNob3JPZmZzZXQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInRzeCIsInRzeSIsIm1heHMiLCJhc2EiLCJWRmFiVHJhbnNpdGlvbiIsIlZEaWFsb2dCb3R0b21UcmFuc2l0aW9uIiwiVkRpYWxvZ1RvcFRyYW5zaXRpb24iLCJWRmFkZVRyYW5zaXRpb24iLCJWU2NhbGVUcmFuc2l0aW9uIiwiVlNjcm9sbFhUcmFuc2l0aW9uIiwiVlNjcm9sbFhSZXZlcnNlVHJhbnNpdGlvbiIsIlZTY3JvbGxZVHJhbnNpdGlvbiIsIlZTY3JvbGxZUmV2ZXJzZVRyYW5zaXRpb24iLCJWU2xpZGVYVHJhbnNpdGlvbiIsIlZTbGlkZVhSZXZlcnNlVHJhbnNpdGlvbiIsIlZTbGlkZVlUcmFuc2l0aW9uIiwiVlNsaWRlWVJldmVyc2VUcmFuc2l0aW9uIiwiVkV4cGFuZFRyYW5zaXRpb24iLCJWRXhwYW5kWFRyYW5zaXRpb24iLCJtYWtlVkRlZmF1bHRzUHJvdmlkZXJQcm9wcyIsIlZEZWZhdWx0c1Byb3ZpZGVyIiwiZGlzYWJsZWQiLCJtYWtlRGltZW5zaW9uUHJvcHMiLCJ1c2VEaW1lbnNpb24iLCJ1c2VBc3BlY3RTdHlsZXMiLCJyYXRpbyIsIm1ha2VWUmVzcG9uc2l2ZVByb3BzIiwiVlJlc3BvbnNpdmUiLCJhc3BlY3RTdHlsZXMiLCJkaW1lbnNpb25TdHlsZXMiLCJNYXliZVRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwiY29tcG9uZW50IiwiY3VzdG9tUHJvcHMiLCJtb3VudGVkIiwiYmluZGluZyIsIm1vZGlmaWVycyIsIl9vYnNlcnZlIiwiaXNJbnRlcnNlY3RpbmciLCJ1bm1vdW50ZWQiLCJvYnNlcnZlIiwiSW50ZXJzZWN0IiwibWFrZVZJbWdQcm9wcyIsIlZJbWciLCJpbnRlcnNlY3QiLCJlbWl0IiwiY3VycmVudFNyYyIsImltYWdlIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsIm5vcm1hbGlzZWRTcmMiLCJhc3BlY3RSYXRpbyIsImluaXQiLCJvbGRWYWwiLCJwb2xsRm9yU2l6ZSIsIm9uQmVmb3JlTW91bnQiLCJsYXp5SW1nIiwib25FcnJvciIsIm9uTG9hZCIsImdldFNyYyIsImltZyIsInRpbWVyIiwidGltZW91dCIsInBvbGwiLCJpbWdIZWlnaHQiLCJpbWdXaWR0aCIsImNvbnRhaW5DbGFzc2VzIiwiX19pbWFnZSIsInNvdXJjZXMiLCJ2U2hvdyIsIl9fcHJlbG9hZEltYWdlIiwiX19wbGFjZWhvbGRlciIsIl9fZXJyb3IiLCJfX2dyYWRpZW50IiwiaXNCb290ZWQiLCJzdG9wIiwicmVzcG9uc2l2ZVByb3BzIiwiX3Jlc29sdmVEaXJlY3RpdmUiLCJtYWtlQm9yZGVyUHJvcHMiLCJ1c2VCb3JkZXIiLCJpc1JlZiIsInVzZUNvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwidGV4dENvbG9yIiwidXNlVGV4dENvbG9yIiwidGV4dENvbG9yQ2xhc3NlcyIsInRleHRDb2xvclN0eWxlcyIsInVzZUJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmRDb2xvckNsYXNzZXMiLCJiYWNrZ3JvdW5kQ29sb3JTdHlsZXMiLCJtYWtlRWxldmF0aW9uUHJvcHMiLCJ1c2VFbGV2YXRpb24iLCJlbGV2YXRpb24iLCJtYWtlUm91bmRlZFByb3BzIiwidXNlUm91bmRlZCIsInJvdW5kZWQiLCJhbGxvd2VkRGVuc2l0aWVzIiwibWFrZVZUb29sYmFyUHJvcHMiLCJWVG9vbGJhciIsInRvUmVmIiwiYm9yZGVyQ2xhc3NlcyIsImVsZXZhdGlvbkNsYXNzZXMiLCJyb3VuZGVkQ2xhc3NlcyIsImlzRXh0ZW5kZWQiLCJjb250ZW50SGVpZ2h0IiwiZXh0ZW5zaW9uSGVpZ2h0IiwiaGFzVGl0bGUiLCJoYXNJbWFnZSIsImV4dGVuc2lvbiIsIm1ha2VTY3JvbGxQcm9wcyIsInVzZVNjcm9sbCIsImNhblNjcm9sbCIsInByZXZpb3VzU2Nyb2xsIiwiY3VycmVudFNjcm9sbCIsInNhdmVkU2Nyb2xsIiwiY3VycmVudFRocmVzaG9sZCIsImlzU2Nyb2xsQWN0aXZlIiwiaXNTY3JvbGxpbmdVcCIsInNjcm9sbFRocmVzaG9sZCIsInNjcm9sbFJhdGlvIiwib25TY3JvbGwiLCJ0YXJnZXRFbCIsInNjcm9sbFRhcmdldCIsIm5ld1RhcmdldCIsInVzZVNzckJvb3QiLCJtYWtlVkFwcEJhclByb3BzIiwiVkFwcEJhciIsInZUb29sYmFyUmVmIiwiaXNBY3RpdmUiLCJzY3JvbGxCZWhhdmlvciIsImJlaGF2aW9yIiwiaXNDb2xsYXBzZWQiLCJpc0ZsYXQiLCJvcGFjaXR5Iiwic3NyQm9vdFN0eWxlcyIsInRvb2xiYXJQcm9wcyIsIm1ha2VEZW5zaXR5UHJvcHMiLCJ1c2VEZW5zaXR5IiwiYWxsb3dlZFZhcmlhbnRzIiwiZ2VuT3ZlcmxheXMiLCJpc0NsaWNrYWJsZSIsIm1ha2VWYXJpYW50UHJvcHMiLCJ1c2VWYXJpYW50IiwidmFyaWFudENsYXNzZXMiLCJ2YXJpYW50IiwiY29sb3JDbGFzc2VzIiwiY29sb3JTdHlsZXMiLCJtYWtlVkJ0bkdyb3VwUHJvcHMiLCJWQnRuR3JvdXAiLCJkZW5zaXR5Q2xhc3NlcyIsIm1ha2VHcm91cFByb3BzIiwibWFrZUdyb3VwSXRlbVByb3BzIiwidXNlR3JvdXBJdGVtIiwiaW5qZWN0S2V5IiwicmVxdWlyZWQiLCJncm91cCIsImlzU2VsZWN0ZWQiLCJzZWxlY3RlZENsYXNzIiwidXNlR3JvdXAiLCJpc1VubW91bnRlZCIsInNlbGVjdGVkIiwiZ2V0SWRzIiwiZ2V0VmFsdWVzIiwiZ3JvdXBWbSIsInJlZ2lzdGVyIiwidW53cmFwcGVkIiwidW5yZWdpc3RlciIsImZvcmNlTWFuZGF0b3J5VmFsdWUiLCJzZWxlY3QiLCJzdGVwIiwiY3VycmVudElkIiwiY3VycmVudEluZGV4IiwibmV3SW5kZXgiLCJuZXdJdGVtIiwiZ2V0SXRlbUluZGV4IiwiaWRzIiwibW9kZWxWYWx1ZSIsIml0ZW1CeUluZGV4IiwiaXRlbUluZGV4IiwiVkJ0blRvZ2dsZVN5bWJvbCIsIm1ha2VWQnRuVG9nZ2xlUHJvcHMiLCJWQnRuVG9nZ2xlIiwibmV4dCIsInByZXYiLCJidG5Hcm91cFByb3BzIiwicHJlZGVmaW5lZFNpemVzIiwibWFrZVNpemVQcm9wcyIsInVzZVNpemUiLCJzaXplQ2xhc3NlcyIsInNpemVTdHlsZXMiLCJtYWtlVkljb25Qcm9wcyIsIlZJY29uIiwic2xvdEljb24iLCJpY29uRGF0YSIsInNsb3RWYWx1ZSIsIlRleHQiLCJ1c2VJbnRlcnNlY3Rpb25PYnNlcnZlciIsImludGVyc2VjdGlvblJlZiIsIm1ha2VWUHJvZ3Jlc3NDaXJjdWxhclByb3BzIiwiVlByb2dyZXNzQ2lyY3VsYXIiLCJNQUdJQ19SQURJVVNfQ09OU1RBTlQiLCJDSVJDVU1GRVJFTkNFIiwidW5kZXJsYXlDb2xvckNsYXNzZXMiLCJ1bmRlcmxheUNvbG9yU3R5bGVzIiwibm9ybWFsaXplZFZhbHVlIiwiZGlhbWV0ZXIiLCJzdHJva2VXaWR0aCIsInN0cm9rZURhc2hPZmZzZXQiLCJvcHBvc2l0ZU1hcCIsIm1ha2VMb2NhdGlvblByb3BzIiwidXNlTG9jYXRpb24iLCJvcHBvc2l0ZSIsImdldE9mZnNldCIsIm1ha2VWUHJvZ3Jlc3NMaW5lYXJQcm9wcyIsIlZQcm9ncmVzc0xpbmVhciIsInByb2dyZXNzIiwibG9jYXRpb25TdHlsZXMiLCJiYXJDb2xvckNsYXNzZXMiLCJiYXJDb2xvclN0eWxlcyIsIm5vcm1hbGl6ZWRCdWZmZXIiLCJpc1JldmVyc2VkIiwiaGFuZGxlQ2xpY2siLCJyaWdodCIsImJhciIsIm1ha2VMb2FkZXJQcm9wcyIsInVzZUxvYWRlciIsIkxvYWRlclNsb3QiLCJwb3NpdGlvblZhbHVlcyIsIm1ha2VQb3NpdGlvblByb3BzIiwidXNlUG9zaXRpb24iLCJ1c2VSb3V0ZXIiLCJ1c2VMaW5rIiwiUm91dGVyTGluayIsInJlc29sdmVEeW5hbWljQ29tcG9uZW50IiwiaXNMaW5rIiwibGluayIsIm1ha2VSb3V0ZXJQcm9wcyIsImluVHJhbnNpdGlvbiIsInVzZUJhY2tCdXR0b24iLCJyb3V0ZXIiLCJjYiIsInBvcHBlZCIsInJlbW92ZUJlZm9yZSIsInJlbW92ZUFmdGVyIiwib25Qb3BzdGF0ZSIsImZyb20iLCJ1c2VTZWxlY3RMaW5rIiwic3RvcFN5bWJvbCIsIkRFTEFZX1JJUFBMRSIsImlzVG91Y2hFdmVudCIsImlzS2V5Ym9hcmRFdmVudCIsImNhbGN1bGF0ZSIsImxvY2FsWCIsImxvY2FsWSIsInJhZGl1cyIsInNjYWxlIiwiY2VudGVyWCIsImNlbnRlclkiLCJyaXBwbGVzIiwiY29udGFpbmVyIiwiZGlmZiIsImRlbGF5IiwiaXNSaXBwbGVFbmFibGVkIiwicmlwcGxlU2hvdyIsInJpcHBsZVN0b3AiLCJyaXBwbGVIaWRlIiwicmlwcGxlQ2FuY2VsU2hvdyIsImtleWJvYXJkUmlwcGxlIiwia2V5Ym9hcmRSaXBwbGVTaG93Iiwia2V5Ym9hcmRSaXBwbGVIaWRlIiwiZm9jdXNSaXBwbGVIaWRlIiwidXBkYXRlUmlwcGxlIiwid2FzRW5hYmxlZCIsImVuYWJsZWQiLCJyZW1vdmVMaXN0ZW5lcnMiLCJ1cGRhdGVkIiwiUmlwcGxlIiwibWFrZVZCdG5Qcm9wcyIsIlZCdG4iLCJsb2FkZXJDbGFzc2VzIiwicG9zaXRpb25DbGFzc2VzIiwiaXNEaXNhYmxlZCIsImlzRWxldmF0ZWQiLCJ2YWx1ZUF0dHIiLCJvbkNsaWNrIiwiVGFnIiwiaGFzUHJlcGVuZCIsImhhc0FwcGVuZCIsImhhc0ljb24iLCJoYXNDb2xvciIsIm1ha2VWQXBwQmFyTmF2SWNvblByb3BzIiwiVkFwcEJhck5hdkljb24iLCJWQXBwQmFyVGl0bGUiLCJWQWxlcnRUaXRsZSIsImFsbG93ZWRUeXBlcyIsIm1ha2VWQWxlcnRQcm9wcyIsIlZBbGVydCIsInZhcmlhbnRQcm9wcyIsImNsb3NlUHJvcHMiLCJoYXNDbG9zZSIsIm1ha2VWTGFiZWxQcm9wcyIsIlZMYWJlbCIsIlZTZWxlY3Rpb25Db250cm9sR3JvdXBTeW1ib2wiLCJtYWtlU2VsZWN0aW9uQ29udHJvbEdyb3VwUHJvcHMiLCJtYWtlVlNlbGVjdGlvbkNvbnRyb2xHcm91cFByb3BzIiwiVlNlbGVjdGlvbkNvbnRyb2xHcm91cCIsInVwZGF0ZUhhbmRsZXJzIiwibWFrZVZTZWxlY3Rpb25Db250cm9sUHJvcHMiLCJ1c2VTZWxlY3Rpb25Db250cm9sIiwidHJ1ZVZhbHVlIiwiZmFsc2VWYWx1ZSIsImlzTXVsdGlwbGUiLCJjdXJyZW50VmFsdWUiLCJuZXdWYWwiLCJWU2VsZWN0aW9uQ29udHJvbCIsImlzRm9jdXNlZCIsImlzRm9jdXNWaXNpYmxlIiwiaW5wdXQiLCJvbkZvY3VzIiwib25CbHVyIiwib25JbnB1dCIsImxhYmVsIiwiaW5wdXROb2RlIiwibWFrZVZDaGVja2JveEJ0blByb3BzIiwiVkNoZWNrYm94QnRuIiwiaW5kZXRlcm1pbmF0ZSIsIm9uQ2hhbmdlIiwiZmFsc2VJY29uIiwidHJ1ZUljb24iLCJjb250cm9sUHJvcHMiLCJ1c2VJbnB1dEljb24iLCJJbnB1dEljb24iLCJsb2NhbGVLZXkiLCJsaXN0ZW5lciIsIm1ha2VWTWVzc2FnZXNQcm9wcyIsIlZNZXNzYWdlcyIsIm1ha2VGb2N1c1Byb3BzIiwidXNlRm9jdXMiLCJmb2N1c0NsYXNzZXMiLCJmb2N1cyIsImJsdXIiLCJGb3JtS2V5IiwibWFrZUZvcm1Qcm9wcyIsImNyZWF0ZUZvcm0iLCJpc1JlYWRvbmx5IiwiaXNWYWxpZGF0aW5nIiwiZXJyb3JzIiwidmFsaWRhdGUiLCJyZXN1bHRzIiwidmFsaWQiLCJpdGVtRXJyb3JNZXNzYWdlcyIsInJlc2V0VmFsaWRhdGlvbiIsImludmFsaWQiLCJlcnJvck1lc3NhZ2VzIiwidXNlRm9ybSIsIm1ha2VWYWxpZGF0aW9uUHJvcHMiLCJ1c2VWYWxpZGF0aW9uIiwidmFsaWRhdGlvbk1vZGVsIiwiZm9ybSIsImludGVybmFsRXJyb3JNZXNzYWdlcyIsImlzUHJpc3RpbmUiLCJpc0RpcnR5IiwidmFsaWRhdGVPbiIsInNldCIsInZhbGlkYXRpb25DbGFzc2VzIiwidW53YXRjaCIsInNpbGVudCIsInJ1bGUiLCJyZXN1bHQiLCJtYWtlVklucHV0UHJvcHMiLCJWSW5wdXQiLCJtZXNzYWdlc0lkIiwic2xvdFByb3BzIiwiaGFzTWVzc2FnZXMiLCJoYXNEZXRhaWxzIiwibWFrZVZDaGVja2JveFByb3BzIiwiVkNoZWNrYm94IiwiZm9jdXNlZCIsImNvbnRyb2xBdHRycyIsImlucHV0UHJvcHMiLCJfMSIsImNoZWNrYm94UHJvcHMiLCJfMiIsIm1ha2VWQXZhdGFyUHJvcHMiLCJWQXZhdGFyIiwiVkNoaXBHcm91cFN5bWJvbCIsIm1ha2VWQ2hpcEdyb3VwUHJvcHMiLCJWQ2hpcEdyb3VwIiwibWFrZVZDaGlwUHJvcHMiLCJWQ2hpcCIsIm9uS2V5RG93biIsImhhc0FwcGVuZE1lZGlhIiwiaGFzRmlsdGVyIiwiaGFzUHJlcGVuZE1lZGlhIiwiX3ZTaG93IiwiTGlzdEtleSIsImNyZWF0ZUxpc3QiLCJwYXJlbnQiLCJ1c2VMaXN0Iiwic2luZ2xlT3BlblN0cmF0ZWd5Iiwib3BlbmVkIiwicGFyZW50cyIsIm5ld09wZW5lZCIsIm11bHRpcGxlT3BlblN0cmF0ZWd5IiwibGlzdE9wZW5TdHJhdGVneSIsIl9yZWYzIiwiaW5kZXBlbmRlbnRTZWxlY3RTdHJhdGVneSIsIm1hbmRhdG9yeSIsInN0cmF0ZWd5Iiwib24iLCJjaGlsZHJlbiIsImluZGVwZW5kZW50U2luZ2xlU2VsZWN0U3RyYXRlZ3kiLCJwYXJlbnRTdHJhdGVneSIsInNpbmdsZVNlbGVjdGVkIiwibGVhZlNlbGVjdFN0cmF0ZWd5IiwiX3JlZjQiLCJsZWFmU2luZ2xlU2VsZWN0U3RyYXRlZ3kiLCJfcmVmNSIsImNsYXNzaWNTZWxlY3RTdHJhdGVneSIsIl9yZWY2IiwiY2hpbGRyZW5JZHMiLCJldmVyeVNlbGVjdGVkIiwiY2lkIiwibm9uZVNlbGVjdGVkIiwiX3JlZjciLCJWTmVzdGVkU3ltYm9sIiwiZW1wdHlOZXN0ZWQiLCJtYWtlTmVzdGVkUHJvcHMiLCJ1c2VOZXN0ZWQiLCJzZWxlY3RTdHJhdGVneSIsIm9wZW5TdHJhdGVneSIsImdldFBhdGgiLCJuZXN0ZWQiLCJwYXJlbnRJZCIsImlzR3JvdXAiLCJsaXN0IiwibmV3U2VsZWN0ZWQiLCJ1c2VOZXN0ZWRJdGVtIiwidWlkU3ltYm9sIiwiY29tcHV0ZWRJZCIsIm9wZW4iLCJ1c2VOZXN0ZWRHcm91cEFjdGl2YXRvciIsIlZMaXN0R3JvdXBBY3RpdmF0b3IiLCJfIiwibWFrZVZMaXN0R3JvdXBQcm9wcyIsIlZMaXN0R3JvdXAiLCJpc09wZW4iLCJfaWQiLCJhY3RpdmF0b3JQcm9wcyIsInRvZ2dsZUljb24iLCJhY3RpdmF0b3JEZWZhdWx0cyIsIlZMaXN0SXRlbVN1YnRpdGxlIiwiVkxpc3RJdGVtVGl0bGUiLCJtYWtlVkxpc3RJdGVtUHJvcHMiLCJWTGlzdEl0ZW0iLCJpc0luZGV0ZXJtaW5hdGUiLCJpc0dyb3VwQWN0aXZhdG9yIiwib3Blbk9uU2VsZWN0Iiwicm91bmRlZFByb3BzIiwibGluZUNsYXNzZXMiLCJoYXNTdWJ0aXRsZSIsIm1ha2VWTGlzdFN1YmhlYWRlclByb3BzIiwiVkxpc3RTdWJoZWFkZXIiLCJtYWtlVkRpdmlkZXJQcm9wcyIsIlZEaXZpZGVyIiwiZGl2aWRlclN0eWxlcyIsIm1ha2VWTGlzdENoaWxkcmVuUHJvcHMiLCJWTGlzdENoaWxkcmVuIiwiaXRlbVByb3BzIiwidHlwZSIsInNsb3RzV2l0aEl0ZW0iLCJsaXN0R3JvdXBQcm9wcyIsImxpc3RJdGVtUHJvcHMiLCJtYWtlSXRlbXNQcm9wcyIsInRyYW5zZm9ybUl0ZW0iLCJ0aXRsZSIsInRyYW5zZm9ybUl0ZW1zIiwiYXJyYXkiLCJ1c2VJdGVtcyIsImhhc051bGxJdGVtIiwicmF3IiwiaXNQcmltaXRpdmUiLCJ1c2VMaXN0SXRlbXMiLCJtYWtlVkxpc3RQcm9wcyIsIlZMaXN0IiwiYWN0aXZlQ29sb3IiLCJiYXNlQ29sb3IiLCJjb250ZW50UmVmIiwib25Gb2N1c2luIiwib25Gb2N1c291dCIsIm9uS2V5ZG93biIsIlZMaXN0SW1nIiwibWFrZVZMaXN0SXRlbUFjdGlvblByb3BzIiwiVkxpc3RJdGVtQWN0aW9uIiwibWFrZVZMaXN0SXRlbU1lZGlhUHJvcHMiLCJWTGlzdEl0ZW1NZWRpYSIsImVsZW1lbnRUb1ZpZXdwb3J0IiwicG9pbnQiLCJhbmNob3JUb1BvaW50IiwibG9jYXRpb25TdHJhdGVnaWVzIiwic3RhdGljTG9jYXRpb25TdHJhdGVneSIsImNvbm5lY3RlZExvY2F0aW9uU3RyYXRlZ3kiLCJtYWtlTG9jYXRpb25TdHJhdGVneVByb3BzIiwidXNlTG9jYXRpb25TdHJhdGVnaWVzIiwiY29udGVudFN0eWxlcyIsInVwZGF0ZUxvY2F0aW9uIiwib25SZXNpemUiLCJnZXRJbnRyaW5zaWNTaXplIiwiY29udGVudEJveCIsInByZWZlcnJlZEFuY2hvciIsInByZWZlcnJlZE9yaWdpbiIsInBhcnNlZEFuY2hvciIsInBhcnNlZE9yaWdpbiIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJuZXdBY3RpdmF0b3JFbCIsIm5ld0NvbnRlbnRFbCIsIm9sZEFjdGl2YXRvckVsIiwib2xkQ29udGVudEVsIiwic2Nyb2xsUGFyZW50cyIsInZpZXdwb3J0TWFyZ2luIiwidmlld3BvcnQiLCJzY3JvbGxCb3giLCJwbGFjZW1lbnQiLCJjaGVja092ZXJmbG93IiwiX3BsYWNlbWVudCIsInRhcmdldFBvaW50IiwiY29udGVudFBvaW50IiwiYXZhaWxhYmxlIiwiZmxpcHBlZCIsInJlc2V0cyIsIl94IiwiX3kiLCJvdmVyZmxvd3MiLCJheGlzIiwiaGFzT3ZlcmZsb3dYIiwiaGFzT3ZlcmZsb3dZIiwibmV3UGxhY2VtZW50IiwiZmxpcCIsIm5ld092ZXJmbG93cyIsInBpeGVsUm91bmQiLCJwaXhlbENlaWwiLCJjbGVhbiIsImZyYW1lcyIsInJlcXVlc3ROZXdGcmFtZSIsInJ1biIsInJhZiIsImZyYW1lIiwic2Nyb2xsU3RyYXRlZ2llcyIsImNsb3NlU2Nyb2xsU3RyYXRlZ3kiLCJibG9ja1Njcm9sbFN0cmF0ZWd5IiwicmVwb3NpdGlvblNjcm9sbFN0cmF0ZWd5IiwibWFrZVNjcm9sbFN0cmF0ZWd5UHJvcHMiLCJ1c2VTY3JvbGxTdHJhdGVnaWVzIiwiYmluZFNjcm9sbCIsIm9mZnNldFBhcmVudCIsInNjcm9sbEVsZW1lbnRzIiwic2Nyb2xsYmFyV2lkdGgiLCJzY3JvbGxhYmxlUGFyZW50Iiwic2xvdyIsInJpYyIsIlZNZW51U3ltYm9sIiwibWFrZURlbGF5UHJvcHMiLCJ1c2VEZWxheSIsImRlbGF5cyIsInJ1bkRlbGF5RmFjdG9yeSIsIm1ha2VBY3RpdmF0b3JQcm9wcyIsInVzZUFjdGl2YXRvciIsImlzVG9wIiwiYWN0aXZhdG9yRWwiLCJpc0hvdmVyZWQiLCJmaXJzdEVudGVyIiwib3Blbk9uRm9jdXMiLCJvcGVuT25DbGljayIsInJ1bk9wZW5EZWxheSIsInJ1bkNsb3NlRGVsYXkiLCJhdmFpbGFibGVFdmVudHMiLCJhY3RpdmF0b3JFdmVudHMiLCJjb250ZW50RXZlbnRzIiwic2NyaW1FdmVudHMiLCJhY3RpdmF0b3JSZWYiLCJfdXNlQWN0aXZhdG9yIiwiYWN0aXZhdG9yIiwiZ2V0QWN0aXZhdG9yIiwidW5iaW5kQWN0aXZhdG9yUHJvcHMiLCJiaW5kQWN0aXZhdG9yUHJvcHMiLCJ1c2VIeWRyYXRpb24iLCJtYWtlTGF6eVByb3BzIiwidXNlTGF6eSIsImhhc0NvbnRlbnQiLCJ1c2VTY29wZUlkIiwic2NvcGVJZCIsIlN0YWNrU3ltYm9sIiwiZ2xvYmFsU3RhY2siLCJ1c2VTdGFjayIsImRpc2FibGVHbG9iYWxTdGFjayIsImNyZWF0ZVN0YWNrRW50cnkiLCJzdGFjayIsIl96SW5kZXgiLCJsYXN0WkluZGV4IiwiZ2xvYmFsVG9wIiwiX2lzVG9wIiwibG9jYWxUb3AiLCJ1c2VUZWxlcG9ydCIsIl90YXJnZXQiLCJ0YXJnZXRFbGVtZW50IiwiZGVmYXVsdENvbmRpdGlvbmFsIiwiY2hlY2tFdmVudCIsImNoZWNrSXNBY3RpdmUiLCJkaXJlY3RpdmUiLCJoYW5kbGVTaGFkb3ciLCJDbGlja091dHNpZGUiLCJvbk1vdXNlZG93biIsIlNjcmltIiwibWFrZVZPdmVybGF5UHJvcHMiLCJWT3ZlcmxheSIsInRlbGVwb3J0VGFyZ2V0Iiwic2NyaW1Db2xvciIsInN0YWNrU3R5bGVzIiwiY29udGVudEVsIiwib25DbGlja091dHNpZGUiLCJhbmltYXRlQ2xpY2siLCJjbG9zZUNvbmRpdGlvbmFsIiwic2Nyb2xsUGFyZW50IiwiVGVsZXBvcnQiLCJSZWZzIiwiZ2V0RGVzY3JpcHRvciIsImN1cnJlbnRPYmoiLCJmb3J3YXJkUmVmcyIsImNoaWxkUmVmcyIsInF1ZXVlIiwibWFrZVZNZW51UHJvcHMiLCJWTWVudSIsIm92ZXJsYXkiLCJvcGVuQ2hpbGRyZW4iLCJvbkZvY3VzSW4iLCJiZWZvcmUiLCJhZnRlciIsIm9uQWN0aXZhdG9yS2V5ZG93biIsIm92ZXJsYXlQcm9wcyIsIm1ha2VWQ291bnRlclByb3BzIiwiVkNvdW50ZXIiLCJjb3VudGVyIiwibWFrZVZGaWVsZExhYmVsUHJvcHMiLCJWRmllbGRMYWJlbCIsIm1ha2VWRmllbGRQcm9wcyIsIlZGaWVsZCIsImhhc0xhYmVsIiwibGFiZWxSZWYiLCJmbG9hdGluZ0xhYmVsUmVmIiwiY29udHJvbFJlZiIsImlzUGxhaW5PclVuZGVybGluZWQiLCJ0YXJnZXRSZWN0IiwidGFyZ2V0V2lkdGgiLCJ0YXJnZXRTdHlsZSIsImR1cmF0aW9uIiwiaXNPdXRsaW5lZCIsImhhc0NsZWFyIiwiZmlsdGVyRmllbGRQcm9wcyIsImFjdGl2ZVR5cGVzIiwibWFrZVZUZXh0RmllbGRQcm9wcyIsIlZUZXh0RmllbGQiLCJjb3VudGVyVmFsdWUiLCJvbkludGVyc2VjdCIsInZJbnB1dFJlZiIsInZGaWVsZFJlZiIsImlucHV0UmVmIiwib25Db250cm9sTW91c2Vkb3duIiwib25Db250cm9sQ2xpY2siLCJvbkNsZWFyIiwiY2FyZXRQb3NpdGlvbiIsImhhc0NvdW50ZXIiLCJmaWVsZFByb3BzIiwiZmllbGRDbGFzcyIsImNsb25lVk5vZGUiLCJtYWtlVlZpcnR1YWxTY3JvbGxJdGVtUHJvcHMiLCJWVmlydHVhbFNjcm9sbEl0ZW0iLCJVUCIsIkRPV04iLCJtYWtlVmlydHVhbFByb3BzIiwidXNlVmlydHVhbCIsImJhc2VJdGVtSGVpZ2h0IiwiaXRlbUhlaWdodCIsImNvbnRhaW5lclJlZiIsInNpemVNYXAiLCJzaXplcyIsInZpc2libGVJdGVtcyIsImhhbmRsZUl0ZW1SZXNpemUiLCJjYWxjdWxhdGVPZmZzZXQiLCJjYWxjdWxhdGVNaWRQb2ludEluZGV4Iiwic2Nyb2xsVG9wIiwiZW5kIiwibWlkZGxlIiwibWlkZGxlT2Zmc2V0IiwibGFzdFNjcm9sbFRvcCIsImhhbmRsZVNjcm9sbCIsImRpcmVjdGlvbiIsIm1pZFBvaW50SW5kZXgiLCJidWZmZXIiLCJmaXJzdEluZGV4IiwibGFzdEluZGV4Iiwic2Nyb2xsVG9JbmRleCIsImNvbXB1dGVkSXRlbXMiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIm1ha2VWVmlydHVhbFNjcm9sbFByb3BzIiwiVlZpcnR1YWxTY3JvbGwiLCJ1c2VTY3JvbGxpbmciLCJsaXN0UmVmIiwidGV4dEZpZWxkUmVmIiwiaXNTY3JvbGxpbmciLCJzY3JvbGxUaW1lb3V0Iiwib25MaXN0U2Nyb2xsIiwiZmluaXNoU2Nyb2xsaW5nIiwib25MaXN0S2V5ZG93biIsIm1ha2VTZWxlY3RQcm9wcyIsIm1ha2VWU2VsZWN0UHJvcHMiLCJWU2VsZWN0IiwidlRleHRGaWVsZFJlZiIsInZNZW51UmVmIiwidlZpcnR1YWxTY3JvbGxSZWYiLCJfbWVudSIsInRyYW5zZm9ybWVkIiwic2VsZWN0ZWRWYWx1ZXMiLCJzZWxlY3Rpb24iLCJrZXlib2FyZExvb2t1cFByZWZpeCIsImtleWJvYXJkTG9va3VwTGFzdFRpbWUiLCJkaXNwbGF5SXRlbXMiLCJtZW51RGlzYWJsZWQiLCJvbk1vdXNlZG93bkNvbnRyb2wiLCJLRVlCT0FSRF9MT09LVVBfVEhSRVNIT0xEIiwiY2hlY2tQcmludGFibGUiLCJpc1ByaW50YWJsZUNoYXIiLCJub01vZGlmaWVyIiwibm93Iiwib25Nb2RlbFVwZGF0ZSIsImhhc0NoaXBzIiwiaGFzTGlzdCIsInRleHRGaWVsZFByb3BzIiwicGxhY2Vob2xkZXIiLCJpdGVtUmVmIiwib25DaGlwQ2xvc2UiLCJfY3JlYXRlVGV4dFZOb2RlIiwiZGVmYXVsdEZpbHRlciIsInF1ZXJ5IiwibWFrZUZpbHRlclByb3BzIiwiZmlsdGVySXRlbXMiLCJmaWx0ZXIiLCJjdXN0b21GaWx0ZXJzTGVuZ3RoIiwibG9vcCIsImN1c3RvbU1hdGNoZXMiLCJkZWZhdWx0TWF0Y2hlcyIsImZpbHRlcktleXMiLCJrZXlGaWx0ZXIiLCJkZWZhdWx0TWF0Y2hlc0xlbmd0aCIsImN1c3RvbU1hdGNoZXNMZW5ndGgiLCJ1c2VGaWx0ZXIiLCJmaWx0ZXJlZEl0ZW1zIiwiZmlsdGVyZWRNYXRjaGVzIiwidHJhbnNmb3JtZWRJdGVtcyIsIl9xdWVyeSIsInN0clF1ZXJ5Iiwib3JpZ2luYWxJdGVtcyIsIl9maWx0ZXJlZEl0ZW1zIiwiX2ZpbHRlcmVkTWF0Y2hlcyIsIm1hdGNoZXMiLCJnZXRNYXRjaGVzIiwiaGlnaGxpZ2h0UmVzdWx0IiwibWFrZVZBdXRvY29tcGxldGVQcm9wcyIsIlZBdXRvY29tcGxldGUiLCJsaXN0SGFzRm9jdXMiLCJzZWxlY3Rpb25JbmRleCIsInNlYXJjaCIsImZpbHRlcmVkSXRlbSIsImhpZ2hsaWdodEZpcnN0Iiwib25Nb3VzZWRvd25NZW51SWNvbiIsInNlbGVjdGlvblN0YXJ0Iiwib3JpZ2luYWxTZWxlY3Rpb25JbmRleCIsInNlbGVjdGVkSXRlbSIsIm9uVXBkYXRlTW9kZWxWYWx1ZSIsImlzU2VsZWN0aW5nIiwibWFrZVZCYWRnZVByb3BzIiwiVkJhZGdlIiwiYmFkZ2VBdHRycyIsIm1ha2VWQmFubmVyQWN0aW9uc1Byb3BzIiwiVkJhbm5lckFjdGlvbnMiLCJWQmFubmVyVGV4dCIsIm1ha2VWQmFubmVyUHJvcHMiLCJWQmFubmVyIiwiZGVuc2l0eSIsIm1ha2VWQm90dG9tTmF2aWdhdGlvblByb3BzIiwiVkJvdHRvbU5hdmlnYXRpb24iLCJtYWtlVkJyZWFkY3J1bWJzRGl2aWRlclByb3BzIiwiVkJyZWFkY3J1bWJzRGl2aWRlciIsIm1ha2VWQnJlYWRjcnVtYnNJdGVtUHJvcHMiLCJWQnJlYWRjcnVtYnNJdGVtIiwibWFrZVZCcmVhZGNydW1ic1Byb3BzIiwiVkJyZWFkY3J1bWJzIiwiVkNhcmRBY3Rpb25zIiwiVkNhcmRTdWJ0aXRsZSIsIlZDYXJkVGl0bGUiLCJtYWtlQ2FyZEl0ZW1Qcm9wcyIsIlZDYXJkSXRlbSIsIlZDYXJkVGV4dCIsIm1ha2VWQ2FyZFByb3BzIiwiVkNhcmQiLCJoYXNIZWFkZXIiLCJoYXNDYXJkSXRlbSIsImhhbmRsZUdlc3R1cmUiLCJ3cmFwcGVyIiwidG91Y2hzdGFydFgiLCJ0b3VjaGVuZFgiLCJ0b3VjaHN0YXJ0WSIsInRvdWNoZW5kWSIsImRpclJhdGlvIiwibWluRGlzdGFuY2UiLCJ0b3VjaHN0YXJ0IiwidG91Y2giLCJ0b3VjaGVuZCIsInRvdWNobW92ZSIsImNyZWF0ZUhhbmRsZXJzIiwiVG91Y2giLCJWV2luZG93U3ltYm9sIiwiVldpbmRvd0dyb3VwU3ltYm9sIiwibWFrZVZXaW5kb3dQcm9wcyIsIlZXaW5kb3ciLCJyb290UmVmIiwiaXNSdGxSZXZlcnNlIiwidHJhbnNpdGlvbkNvdW50IiwidHJhbnNpdGlvbkhlaWdodCIsImFjdGl2ZUluZGV4IiwiaXRlbXNMZW5ndGgiLCJjYW5Nb3ZlQmFjayIsImNhbk1vdmVGb3J3YXJkIiwiYXJyb3dzIiwicHJldlByb3BzIiwibmV4dFByb3BzIiwidG91Y2hPcHRpb25zIiwib3JpZ2luYWxFdmVudCIsIm1ha2VWQ2Fyb3VzZWxQcm9wcyIsIlZDYXJvdXNlbCIsIndpbmRvd1JlZiIsInNsaWRlVGltZW91dCIsInJlc3RhcnRUaW1lb3V0Iiwic3RhcnRUaW1lb3V0Iiwid2luZG93UHJvcHMiLCJtYWtlVldpbmRvd0l0ZW1Qcm9wcyIsIlZXaW5kb3dJdGVtIiwid2luZG93IiwiZ3JvdXBJdGVtIiwiaXNUcmFuc2l0aW9uaW5nIiwiaGFzVHJhbnNpdGlvbiIsIm9uQWZ0ZXJUcmFuc2l0aW9uIiwib25CZWZvcmVUcmFuc2l0aW9uIiwib25UcmFuc2l0aW9uQ2FuY2VsbGVkIiwib25FbnRlclRyYW5zaXRpb24iLCJtYWtlVkNhcm91c2VsSXRlbVByb3BzIiwiVkNhcm91c2VsSXRlbSIsImltZ1Byb3BzIiwid2luZG93SXRlbVByb3BzIiwiVkNvZGUiLCJtYWtlVkNvbG9yUGlja2VyQ2FudmFzUHJvcHMiLCJWQ29sb3JQaWNrZXJDYW52YXMiLCJodWUiLCJpc0ludGVyYWN0aW5nIiwiY2FudmFzUmVmIiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJfZG90UG9zaXRpb24iLCJkb3RQb3NpdGlvbiIsImRvdFN0eWxlcyIsInVwZGF0ZURvdFBvc2l0aW9uIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlTW91c2VNb3ZlIiwiaGFuZGxlTW91c2VVcCIsImNvb3JkcyIsInVwZGF0ZUNhbnZhcyIsImNhbnZhcyIsInNhdHVyYXRpb25HcmFkaWVudCIsInZhbHVlR3JhZGllbnQiLCJzdHJpcEFscGhhIiwiZXh0cmFjdENvbG9yIiwiY29udmVydGVkIiwibnVsbENvbG9yIiwiaGV4YSIsIm1vZGVzIiwiVkNvbG9yUGlja2VySW5wdXQiLCJtYWtlVkNvbG9yUGlja2VyRWRpdFByb3BzIiwibSIsIlZDb2xvclBpY2tlckVkaXQiLCJlbmFibGVkTW9kZXMiLCJpbnB1dHMiLCJnZXRWYWx1ZSIsImdldENvbG9yIiwibWkiLCJWU2xpZGVyU3ltYm9sIiwidmVydGljYWwiLCJnZXRQb3NpdGlvbiIsIm1ha2VTbGlkZXJQcm9wcyIsInVzZVN0ZXBzIiwiZGVjaW1hbHMiLCJyb3VuZFZhbHVlIiwiY2xhbXBlZCIsInVzZVNsaWRlciIsInN0ZXBzIiwib25TbGlkZXJTdGFydCIsIm9uU2xpZGVyTW92ZSIsIm9uU2xpZGVyRW5kIiwiZ2V0QWN0aXZlVGh1bWIiLCJob3Jpem9udGFsRGlyZWN0aW9uIiwiaGQiLCJ0aHVtYlNpemUiLCJ0aWNrU2l6ZSIsInRyYWNrU2l6ZSIsIm51bVRpY2tzIiwidGh1bWJDb2xvciIsInRyYWNrQ29sb3IiLCJ0cmFja0ZpbGxDb2xvciIsIm1vdXNlUHJlc3NlZCIsInN0YXJ0T2Zmc2V0IiwidHJhY2tDb250YWluZXJSZWYiLCJhY3RpdmVUaHVtYlJlZiIsInBhcnNlTW91c2VNb3ZlIiwidHJhY2tTdGFydCIsInRyYWNrTGVuZ3RoIiwiY2xpY2tPZmZzZXQiLCJjbGlja1BvcyIsImhhbmRsZVN0b3AiLCJoYW5kbGVTdGFydCIsIm1vdmVMaXN0ZW5lck9wdGlvbnMiLCJvbk1vdXNlTW92ZSIsIm9uU2xpZGVyTW91c2VVcCIsIm9uU2xpZGVyVG91Y2hlbmQiLCJvblNsaWRlclRvdWNoc3RhcnQiLCJvblNsaWRlck1vdXNlZG93biIsInBlcmNlbnRhZ2UiLCJzaG93VGlja3MiLCJwYXJzZWRUaWNrcyIsImhhc0xhYmVscyIsIm1ha2VWU2xpZGVyVGh1bWJQcm9wcyIsIlZTbGlkZXJUaHVtYiIsInNsaWRlciIsInRodW1iTGFiZWwiLCJwYWdldXAiLCJwYWdlZG93biIsImhvbWUiLCJkb3duIiwidXAiLCJyZWxldmFudEtleXMiLCJtdWx0aXBsaWVycyIsInBhcnNlS2V5ZG93biIsIl9zdGVwIiwibXVsdGlwbGllciIsInBvc2l0aW9uUGVyY2VudGFnZSIsIm1ha2VWU2xpZGVyVHJhY2tQcm9wcyIsIlZTbGlkZXJUcmFjayIsInRyYWNrRmlsbENvbG9yQ2xhc3NlcyIsInRyYWNrRmlsbENvbG9yU3R5bGVzIiwidHJhY2tDb2xvckNsYXNzZXMiLCJ0cmFja0NvbG9yU3R5bGVzIiwic3RhcnREaXIiLCJlbmREaXIiLCJiYWNrZ3JvdW5kU3R5bGVzIiwidHJhY2tGaWxsV2lkdGgiLCJ0cmFja0ZpbGxTdHlsZXMiLCJjb21wdXRlZFRpY2tzIiwidGljayIsImRpcmVjdGlvblByb3BlcnR5IiwiZGlyZWN0aW9uVmFsdWUiLCJtYWtlVlNsaWRlclByb3BzIiwiVlNsaWRlciIsInRodW1iQ29udGFpbmVyUmVmIiwicm91bmRlZFZhbHVlIiwidHJhY2tTdG9wIiwibWFrZVZDb2xvclBpY2tlclByZXZpZXdQcm9wcyIsIlZDb2xvclBpY2tlclByZXZpZXciLCJyZWQiLCJwaW5rIiwicHVycGxlIiwiZGVlcFB1cnBsZSIsImluZGlnbyIsImJsdWUiLCJsaWdodEJsdWUiLCJjeWFuIiwidGVhbCIsImdyZWVuIiwibGlnaHRHcmVlbiIsImxpbWUiLCJ5ZWxsb3ciLCJhbWJlciIsIm9yYW5nZSIsImRlZXBPcmFuZ2UiLCJicm93biIsImJsdWVHcmV5IiwiZ3JleSIsInNoYWRlcyIsIm1ha2VWQ29sb3JQaWNrZXJTd2F0Y2hlc1Byb3BzIiwicGFyc2VEZWZhdWx0Q29sb3JzIiwiVkNvbG9yUGlja2VyU3dhdGNoZXMiLCJzd2F0Y2giLCJtYWtlVlNoZWV0UHJvcHMiLCJWU2hlZXQiLCJtYWtlVkNvbG9yUGlja2VyUHJvcHMiLCJWQ29sb3JQaWNrZXIiLCJsYXN0UGlja2VkQ29sb3IiLCJjdXJyZW50Q29sb3IiLCJ1cGRhdGVDb2xvciIsInNoZWV0UHJvcHMiLCJtYWtlVkNvbWJvYm94UHJvcHMiLCJWQ29tYm9ib3giLCJjbGVhcmVkIiwiX3NlYXJjaCIsIm1ha2VWRGlhbG9nUHJvcHMiLCJWRGlhbG9nIiwiZmlyc3RFbGVtZW50IiwibGFzdEVsZW1lbnQiLCJWRXhwYW5zaW9uUGFuZWxTeW1ib2wiLCJtYWtlVkV4cGFuc2lvblBhbmVsc1Byb3BzIiwiVkV4cGFuc2lvblBhbmVscyIsInZhcmlhbnRDbGFzcyIsIm1ha2VWRXhwYW5zaW9uUGFuZWxUZXh0UHJvcHMiLCJWRXhwYW5zaW9uUGFuZWxUZXh0IiwiZXhwYW5zaW9uUGFuZWwiLCJtYWtlVkV4cGFuc2lvblBhbmVsVGl0bGVQcm9wcyIsIlZFeHBhbnNpb25QYW5lbFRpdGxlIiwibWFrZVZFeHBhbnNpb25QYW5lbFByb3BzIiwiVkV4cGFuc2lvblBhbmVsIiwic2VsZWN0ZWRJbmRpY2VzIiwiaXNCZWZvcmVTZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJpc0FmdGVyU2VsZWN0ZWQiLCJtYWtlVkZpbGVJbnB1dFByb3BzIiwiVkZpbGVJbnB1dCIsImZpbGVzIiwidG90YWxCeXRlcyIsInRvdGFsQnl0ZXNSZWFkYWJsZSIsImZpbGVOYW1lcyIsImZpbGVDb3VudCIsIm9uQ2xpY2tQcmVwZW5kIiwibWFrZVZGb290ZXJQcm9wcyIsIlZGb290ZXIiLCJhdXRvSGVpZ2h0IiwibWFrZVZGb3JtUHJvcHMiLCJWRm9ybSIsImZvcm1SZWYiLCJvblJlc2V0Iiwib25TdWJtaXQiLCJfZSIsInJlYWR5IiwibWFrZVZDb250YWluZXJQcm9wcyIsIlZDb250YWluZXIiLCJicmVha3BvaW50UHJvcHMiLCJvZmZzZXRQcm9wcyIsIm9mZnNldEtleSIsIm9yZGVyUHJvcHMiLCJvcmRlcktleSIsInByb3BNYXAiLCJicmVha3BvaW50Q2xhc3MiLCJicmVha3BvaW50IiwiQUxJR05fU0VMRl9WQUxVRVMiLCJtYWtlVkNvbFByb3BzIiwiVkNvbCIsImNsYXNzTGlzdCIsImhhc0NvbENsYXNzZXMiLCJBTElHTk1FTlQiLCJTUEFDRSIsIm1ha2VSb3dQcm9wcyIsImRlZiIsInByZWZpeEtleSIsIkFMSUdOX1ZBTFVFUyIsImFsaWduVmFsaWRhdG9yIiwiYWxpZ25Qcm9wcyIsIkpVU1RJRllfVkFMVUVTIiwianVzdGlmeVZhbGlkYXRvciIsImp1c3RpZnlQcm9wcyIsIkFMSUdOX0NPTlRFTlRfVkFMVUVTIiwiYWxpZ25Db250ZW50VmFsaWRhdG9yIiwiYWxpZ25Db250ZW50UHJvcHMiLCJjbGFzc01hcCIsIm1ha2VWUm93UHJvcHMiLCJWUm93IiwiVlNwYWNlciIsIm1ha2VWSG92ZXJQcm9wcyIsIlZIb3ZlciIsImlzSG92ZXJpbmciLCJWSXRlbUdyb3VwU3ltYm9sIiwibWFrZVZJdGVtR3JvdXBQcm9wcyIsIlZJdGVtR3JvdXAiLCJWSXRlbSIsInRvZ2dsZSIsIlZLYmQiLCJtYWtlVkxheW91dFByb3BzIiwiVkxheW91dCIsIm1ha2VWTGF5b3V0SXRlbVByb3BzIiwiVkxheW91dEl0ZW0iLCJtYWtlVkxhenlQcm9wcyIsIlZMYXp5IiwibWFrZVZMb2NhbGVQcm92aWRlclByb3BzIiwiVkxvY2FsZVByb3ZpZGVyIiwibWFrZVZNYWluUHJvcHMiLCJWTWFpbiIsInVzZVN0aWNreSIsInJvb3RFbCIsImlzU3RpY2t5IiwiaXNTdHVjayIsInN0dWNrUG9zaXRpb24iLCJzdGlja3lTdHlsZXMiLCJsYXlvdXRUb3AiLCJib2R5U2Nyb2xsIiwiSE9SSVpPTiIsIkhJU1RPUlkiLCJraW5ldGljRW5lcmd5VG9WZWxvY2l0eSIsIndvcmsiLCJzcXJ0MiIsImNhbGN1bGF0ZUltcHVsc2VWZWxvY2l0eSIsInNhbXBsZXMiLCJ2cHJldiIsInZjdXJyIiwidXNlVmVsb2NpdHkiLCJ0b3VjaGVzIiwiYWRkTW92ZW1lbnQiLCJlbmRUb3VjaCIsImdldFZlbG9jaXR5IiwibmV3ZXN0IiwiYWJzWCIsImFic1kiLCJvb3BzIiwidXNlVG91Y2giLCJpc1RlbXBvcmFyeSIsInRvdWNobGVzcyIsIm9uVG91Y2hzdGFydCIsIm9uVG91Y2htb3ZlIiwib25Ub3VjaGVuZCIsIm1heWJlRHJhZ2dpbmciLCJpc0RyYWdnaW5nIiwiZHJhZ1Byb2dyZXNzIiwicG9zIiwiZ2V0UHJvZ3Jlc3MiLCJsaW1pdCIsInRvdWNoWCIsInRvdWNoWSIsInRvdWNoWm9uZSIsImluVG91Y2hab25lIiwiaW5FbGVtZW50IiwidmVsb2NpdHkiLCJ2eCIsInZ5IiwiZHJhZ1N0eWxlcyIsImxvY2F0aW9ucyIsIm1ha2VWTmF2aWdhdGlvbkRyYXdlclByb3BzIiwiVk5hdmlnYXRpb25EcmF3ZXIiLCJzY3JpbVN0eWxlcyIsIm9uTW91c2VlbnRlciIsIm9uTW91c2VsZWF2ZSIsIlZOb1NzciIsInNob3ciLCJ1c2VSZWZzIiwib25CZWZvcmVVcGRhdGUiLCJ1cGRhdGVSZWYiLCJtYWtlVlBhZ2luYXRpb25Qcm9wcyIsIlZQYWdpbmF0aW9uIiwicGFnZSIsIm1heEJ1dHRvbnMiLCJmaXJzdEl0ZW0iLCJ0b3RhbFdpZHRoIiwiaXRlbVdpZHRoIiwiZ2V0TWF4IiwidG90YWxWaXNpYmxlIiwibWluQnV0dG9ucyIsImV2ZW4iLCJyYW5nZUxlbmd0aCIsInJhbmdlU3RhcnQiLCJzZXRWYWx1ZSIsImNvbnRyb2xzIiwicHJldkRpc2FibGVkIiwibmV4dERpc2FibGVkIiwidXBkYXRlRm9jdXMiLCJmbG9vciIsIm1ha2VWUGFyYWxsYXhQcm9wcyIsIlZQYXJhbGxheCIsImRpc3BsYXlIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJzY3JvbGxQb3MiLCJjZW50ZXIiLCJ0cmFuc2xhdGUiLCJzaXplU2NhbGUiLCJtYWtlVlJhZGlvUHJvcHMiLCJWUmFkaW8iLCJtYWtlVlJhZGlvR3JvdXBQcm9wcyIsIlZSYWRpb0dyb3VwIiwibWFrZVZSYW5nZVNsaWRlclByb3BzIiwiVlJhbmdlU2xpZGVyIiwic3RhcnRUaHVtYlJlZiIsInN0b3BUaHVtYlJlZiIsInN0b3BPZmZzZXQiLCJtYWtlVlJhdGluZ1Byb3BzIiwiVlJhdGluZyIsInJhdGluZyIsImluY3JlbWVudHMiLCJob3ZlckluZGV4IiwiaXRlbVN0YXRlIiwiaXNGaWxsZWQiLCJldmVudFN0YXRlIiwiVlJhdGluZ0l0ZW0iLCJzaG93U3RhciIsImJ0blByb3BzIiwiY3JlYXRlTGFiZWwiLCJsYWJlbFByb3BzIiwiYmlhcyIsImNhbGN1bGF0ZVVwZGF0ZWRPZmZzZXQiLCJzZWxlY3RlZEVsZW1lbnQiLCJjb250YWluZXJTaXplIiwiY29udGVudFNpemUiLCJjdXJyZW50U2Nyb2xsT2Zmc2V0IiwiY2xpZW50U2l6ZSIsIm9mZnNldFN0YXJ0IiwiYWRqdXN0ZWRPZmZzZXRTdGFydCIsInRvdGFsU2l6ZSIsIml0ZW1PZmZzZXQiLCJhZGRpdGlvbmFsT2Zmc2V0IiwiY2FsY3VsYXRlQ2VudGVyZWRPZmZzZXQiLCJvZmZzZXRDZW50ZXJlZCIsIlZTbGlkZUdyb3VwU3ltYm9sIiwibWFrZVZTbGlkZUdyb3VwUHJvcHMiLCJWU2xpZGVHcm91cCIsImlzT3ZlcmZsb3dpbmciLCJzY3JvbGxPZmZzZXQiLCJjb250YWluZXJSZWN0IiwiZmlyc3RTZWxlY3RlZEluZGV4IiwibGFzdFNlbGVjdGVkSW5kZXgiLCJkaXNhYmxlVHJhbnNpdGlvbiIsInN0YXJ0VG91Y2giLCJzaWduIiwibWF4U2Nyb2xsT2Zmc2V0Iiwic2Nyb2xsVG8iLCJuZXdBYnNvbHV0ZU9mZnNldCIsInNjcm9sbEFtb3VudCIsImhhc0FmZml4ZXMiLCJoYXNQcmV2IiwiaGFzTmV4dCIsIlZTbGlkZUdyb3VwSXRlbSIsInNsaWRlR3JvdXBJdGVtIiwibWFrZVZTbmFja2JhclByb3BzIiwiVlNuYWNrYmFyIiwiYWN0aXZlVGltZW91dCIsIm9uUG9pbnRlcmVudGVyIiwibWFrZVZTd2l0Y2hQcm9wcyIsIlZTd2l0Y2giLCJjb250cm9sIiwibG9hZGVyQ29sb3IiLCJvblRyYWNrQ2xpY2siLCJtYWtlVlN5c3RlbUJhclByb3BzIiwiVlN5c3RlbUJhciIsIlZUYWJzU3ltYm9sIiwibWFrZVZUYWJQcm9wcyIsIlZUYWIiLCJzbGlkZXJDb2xvckNsYXNzZXMiLCJzbGlkZXJDb2xvclN0eWxlcyIsInNsaWRlckVsIiwidXBkYXRlU2xpZGVyIiwicHJldkVsIiwibmV4dEVsIiwicHJldkJveCIsIm5leHRCb3giLCJ4eSIsIlhZIiwicmlnaHRCb3R0b20iLCJ3aWR0aEhlaWdodCIsInByZXZQb3MiLCJuZXh0UG9zIiwiaW5pdGlhbFNjYWxlIiwic2lnbWEiLCJwYXJzZUl0ZW1zIiwibWFrZVZUYWJzUHJvcHMiLCJWVGFicyIsInBhcnNlZEl0ZW1zIiwic2xpZGVHcm91cFByb3BzIiwibWFrZVZUYWJsZVByb3BzIiwiVlRhYmxlIiwibWFrZVZUZXh0YXJlYVByb3BzIiwiVlRleHRhcmVhIiwiY29udHJvbEhlaWdodCIsInRleHRhcmVhUmVmIiwic2l6ZXJSZWYiLCJyb3dzIiwiY2FsY3VsYXRlSW5wdXRIZWlnaHQiLCJmaWVsZFN0eWxlIiwibGluZUhlaWdodCIsIm5ld0hlaWdodCIsIm1ha2VWVGhlbWVQcm92aWRlclByb3BzIiwiVlRoZW1lUHJvdmlkZXIiLCJtYWtlVlRpbWVsaW5lUHJvcHMiLCJWVGltZWxpbmUiLCJzaWRlQ2xhc3NlcyIsInRydW5jYXRlQ2xhc3NlcyIsIm1ha2VWVGltZWxpbmVEaXZpZGVyUHJvcHMiLCJWVGltZWxpbmVEaXZpZGVyIiwibGluZUNvbG9yQ2xhc3NlcyIsImxpbmVDb2xvclN0eWxlcyIsIm1ha2VWVGltZWxpbmVJdGVtUHJvcHMiLCJWVGltZWxpbmVJdGVtIiwiZG90U2l6ZSIsImRvdFJlZiIsIm1ha2VWVG9vbGJhckl0ZW1zUHJvcHMiLCJWVG9vbGJhckl0ZW1zIiwibWFrZVZUb29sdGlwUHJvcHMiLCJWVG9vbHRpcCIsIlZWYWxpZGF0aW9uIiwidmFsaWRhdGlvbiIsIm9uY2UiLCJpbW1lZGlhdGUiLCJtb2RpZmllcktleXMiLCJtdXRhdGlvbnMiLCJNdXRhdGUiLCJSZXNpemUiLCJzZWxmIiwiU2Nyb2xsIiwiZW1pdHRlciIsIm1pdHQiLCJjcmVhdGVBcHAiLCJBcHAiLCJWdWVDbGlja0F3YXkiXSwibWFwcGluZ3MiOiJxa0NBMkNLQSxHQUFVLENBQ1gsTUFBTyxDQUNILFVBQVcsTUFDZCxFQUNELFFBQVMsQ0FDTCxpQkFBaUJDLEVBQVcsQ0FDeEIsS0FBSyxNQUFNLG1CQUFvQkEsQ0FBUyxDQUMzQyxDQUNKLENBQ0wsRUFuRFNDLEdBQUEsQ0FBQSxNQUFNLGdFQUFnRSxFQUN2RUMsR0FBQUMsRUFBdUQsUUFBaEQsQ0FBQSxNQUFNLDhCQUE2QixRQUFLLEVBQUEsRUFDMUNDLEdBQUEsQ0FBQSxNQUFNLGlCQUFpQixFQUNuQkMsR0FBQSxDQUFBLE1BQU0sWUFBWSxLQU96QkYsRUFBK0MsT0FBQSxDQUF6QyxNQUFNLDZCQUEyQixLQUFBLEVBQUEsTUFBdkNHLE9BUUFILEVB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dEMsRUFFRCxpQkFBa0IsQ0FDaEIsQ0FBQyxJQUFLLFdBQVksTUFBTyxVQUFVLEVBQ25DLENBQUMsSUFBSyxXQUFZLE1BQU8sVUFBVSxFQUNuQyxDQUFDLElBQUssV0FBWSxNQUFPLFVBQVUsRUFDbkMsQ0FBQyxJQUFLLFdBQVksTUFBTyxVQUFVLEVBQ25DLENBQUMsSUFBSyxXQUFZLE1BQU8sVUFBVSxFQUNuQyxDQUFDLElBQUssV0FBWSxNQUFPLFVBQVUsRUFDbkMsQ0FBQyxJQUFLLFdBQVksTUFBTyxVQUFVLEVBQ25DLENBQUMsSUFBSyxXQUFZLE1BQU8sVUFBVSxFQUNuQyxDQUFDLElBQUssV0FBWSxNQUFPLFVBQVUsRUFDbkMsQ0FBQyxJQUFLLFlBQWEsTUFBTyxXQUFXLEVBQ3JDLENBQUMsSUFBSyxZQUFhLE1BQU8sV0FBVyxFQUNyQyxDQUFDLElBQUssWUFBYSxNQUFPLFdBQVcsRUFDckMsQ0FBQyxJQUFLLFdBQVksTUFBTyxVQUFVLEVBQ25DLENBQUMsSUFBSyxXQUFZLE1BQU8sVUFBVSxFQUNuQyxDQUFDLElBQUssV0FBWSxNQUFPLFVBQVUsRUFDbkMsQ0FBQyxJQUFLLFdBQVksTUFBTyxVQUFVLEVBQ25DLENBQUMsSUFBSyxXQUFZLE1BQU8sVUFBVSxFQUNuQyxDQUFDLElBQUssV0FBWSxNQUFPLFVBQVUsRUFDbkMsQ0FBQyxJQUFLLFdBQVksTUFBTyxVQUFVLEVBQ25DLENBQUMsSUFBSyxXQUFZLE1BQU8sVUFBVSxFQUNuQyxDQUFDLElBQUssV0FBWSxNQUFPLFVBQVUsRUFDbkMsQ0FBQyxJQUFLLFlBQWEsTUFBTyxXQUFXLEVBQ3JDLENBQUMsSUFBSyxZQUFhLE1BQU8sV0FBVyxFQUNyQyxDQUFDLElBQUssWUFBYSxNQUFPLFdBQVcsQ0FDdEMsRUFFRCxpQkFBa0IsQ0FDaEIsQ0FBQyxJQUFLLFdBQVksTUFBTyxVQUFVLEVBQ25DLENBQUMsSUFBSyxXQUFZLE1BQU8sVUFBVSxFQUNuQyxDQUFDLElBQUssV0FBWSxNQUFPLFVBQVUsRUFDbkMsQ0FBQyxJQUFLLFdBQVksTUFBTyxVQUFV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MG5CLEVBQVUsS0FBSyxPQUFPdmEsQ0FBRyxLQUFLMEssR0FBT3RSLENBQUssRUFBRSxDQUM3QyxDQUNELE9BQU9taEIsQ0FDVCxDQ2xSQSxNQUFNQyxHQUFXLENBQ2YsTUFBTyxFQUNQLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixpQkFBa0IsRUFDbEIsR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxDQUNOLEVBQ0EsU0FBU0MsR0FBYUMsRUFBTTNDLEVBQVEsQ0FDbEMsTUFBTTRDLEVBQVEsQ0FBQSxFQUNkLElBQUlDLEVBQWMsQ0FBQSxFQUNsQixNQUFNQyxFQUFrQkMsR0FBYUosQ0FBSSxFQUNuQ0ssRUFBaUJDLEdBQVdOLENBQUksRUFDaENPLEdBQXFCSixFQUFnQixPQUFRLEVBQUdMLEdBQVN6QyxFQUFPLE1BQU0sRUFBRSxFQUFFLFlBQWEs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LFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFNBQ1gsQ0FBQyxFQUNLQyxHQUFPLE9BQU8sT0FBTyxDQUN6QixLQUFNLFVBQ04sU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxTQUNYLENBQUMsRUFDS0MsR0FBWSxPQUFPLE9BQU8sQ0FDOUIsS0FBTSxVQUNOLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsU0FDWCxDQUFDLEVBQ0tDLEdBQU8sT0FBTyxPQUFPLENBQ3pCLEtBQU0sVUFDTixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFNBQ1gsQ0FBQyxFQUNLQyxHQUFPLE9BQU8sT0FBTyxDQUN6QixLQUFNLFVBQ04sU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxTQUNYLENBQUMsRUFDS0MsR0FBUSxPQUFPLE9BQU8sQ0FDMUIsS0FBTSxVQUNOLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsU0FDWCxDQUFDLEVBQ0tDLEdBQWEsT0FBTyxPQUFPLENBQy9CLEtBQU0sVUFDTixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFNBQ1gsQ0FBQyxFQUNLQyxHQUFPLE9BQU8sT0FBTyxDQUN6QixLQUFNLFVBQ04sU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxTQUNYLENBQUMsRUFDS0MsR0FBUyxPQUFPLE9BQU8sQ0FDM0IsS0FBTSxVQUNOLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsU0FDWCxDQUFDLEVBQ0tDLEdBQVEsT0FBTyxPQUFPLENBQzFCLEtBQU0sVUFDTixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFNBQ1gsQ0FBQyxFQUNLQyxHQUFTLE9BQU8sT0FBTyxDQUMzQixLQUFNLFVBQ04sU0FBVSxVQUNWLFNBQVUsVUFDVixTQUFVLFVBQ1YsU0FBVSxVQUNWLFNBQVUsVUFDVixRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxVQUNULFFBQVMsVUFDVCxRQUFTLFVBQ1QsUUFBUyxTQUNYLENBQUMsRUFDS0MsR0FBYSxPQUFPLE9BQU8sQ0FD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QSxFQUFRLFdBQzlCSSxHQUFVNXRCLEVBQUl3dEIsQ0FBTyxFQUNyQkQsR0FBUXZ0QixFQUFJd3RCLENBQU8sRUFDckIsQ0FDTyxNQUFNbXdDLEdBQVMsQ0FDcEIsUUFBQXB3QyxHQUNBLFVBQUFLLEdBQ0EsUUFBQTRPLEVBQ0YsOEtDakNNb2hDLEdBQVVDLEdBQUksRUFFZDU3RCxHQUFNNjdELEdBQVVDLEVBQUcsRUFDekI5N0QsR0FBSSxPQUFPLGlCQUFpQixRQUFVMjdELEdBRXRDMzdELEdBQUksVUFBVSxVQUFXLENBQ3JCLFFBQVMsQ0FBQ2pDLEVBQUl3dEIsSUFDSCxJQUFJLFVBQVUsUUFBUXh0QixFQUFJLENBQzdCLFNBQVUsU0FBUyxLQUNuQixVQUFXQSxFQUFHLFVBQzFCLENBQVMsQ0FFVCxDQUFDLEVBUUQsTUFBTW1vQixHQUFVRCxHQUFjLENBQzFCLFdBQUFHLEdBQ0EsV0FBQUMsRUFDSixDQUFDLEVBRURybUIsR0FBSSxJQUFJa21CLEVBQU8sRUFDZmxtQixHQUFJLElBQUkrN0QsRUFBWSxFQUNwQi83RCxHQUFJLE1BQU0sOEJBQThCIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzE2LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDQ4LDQ5LDUwLDUxLDUyLDUzLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLDYyLDYzLDY0LDY1LDY2LDY3LDY4LDY5LDcwLDcxLDcyLDczLDc0LDc1LDc2LDc3LDc4LDc5LDgwLDgxLDgyLDgzLDg0LDg1LDg2LDg3LDg4LDg5LDkwLDkxLDkyLDkzLDk0LDk1LDk2LDk3LDk4LDk5LDEwMCwxMDEsMTAyLDEwMywxMDQsMTA1LDEwNiwxMDcsMTA4LDEwOSwxMTAsMTExLDExMiwxMTMsMTE0LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTIzLDEyNCwxMjUsMTI2LDEyNywxMjgsMTI5LDEzMCwxMzEsMTMyLDEzMywxMzQsMTM1LDEzNiwxMzcsMTM4LDEzOSwxNDAsMTQxLDE0MiwxNDMsMTQ0LDE0NSwxNDYsMTQ3LDE0OCwxNDksMTUwLDE1MSwxNTIsMTUzLDE1NCwxNTUsMTU2LDE1NywxNTgsMTU5LDE2MCwxNjEsMTYyLDE2MywxNjQsMTY1LDE2NiwxNjcsMTY4LDE2OSwxNzAsMTcxLDE3MiwxNzMsMTc0LDE3NSwxNzYsMTc3LDE3OCwxNzksMTgwLDE4MSwxODIsMTgzLDE4NCwxODUsMTg2LDE4NywxODgsMTg5LDE5MCwxOTEsMTkyLDE5MywxOTQsMTk1LDE5NiwxOTcsMTk4LDE5OSwyMDAsMjAxLDIwMiwyMDMsMjA0LDIwNSwyMDYsMjA3LDIwOCwyMDksMjEwLDIxMSwyMTIsMjEzLDIxNCwyMTUsMjE2LDIxNywyMTgsMjE5LDIyMCwyMjEsMjIyLDIyMywyMjQsMjI1LDIyNiwyMjcsMjI4LDIyOSwyMzAsMjMxLDIzMiwyMzMsMjM0LDIzNSwyMzYsMjM3LDIzOCwyMzksMjQwLDI0MSwyNDIsMjQzXX0=
