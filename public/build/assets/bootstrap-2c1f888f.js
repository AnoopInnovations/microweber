var Ut=Object.defineProperty;var Ft=(n,e,t)=>e in n?Ut(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var E=(n,e,t)=>(Ft(n,typeof e!="symbol"?e+"":e,t),t),fe=(n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)};var f=(n,e,t)=>(fe(n,e,"read from private field"),t?t.call(n):e.get(n)),x=(n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},q=(n,e,t,i)=>(fe(n,e,"write to private field"),i?i.call(n,t):e.set(n,t),t);var H=(n,e,t)=>(fe(n,e,"access private method"),t);var k;class he{constructor(){x(this,k,{})}on(e,t){f(this,k)[e]?f(this,k)[e].push(t):f(this,k)[e]=[t]}off(e,t){if(f(this,k)[e])if(typeof t=="function"){const i=f(this,k)[e].indexOf(t);if(i===-1)return;f(this,k)[e].splice(i,1)}else f(this,k)[e]=[]}dispatch(e,t){f(this,k)[e]&&f(this,k)[e].forEach(function(i){i.call(this,t)})}emit(e,t){return this.dispatch(e,t)}}k=new WeakMap;var N,F,ne;class Wt extends he{constructor(){super(...arguments);x(this,F);x(this,N,{})}call(t,i){for(let s in f(this,N))f(this,N)[s][t]&&H(this,F,ne).call(this,t,f(this,N)[s],i)}get(t){return f(this,N)[t]}getModules(){return f(this,N)}register(t,i){let s;typeof i=="function"?s=new i:s=i,f(this,N)[t]=s,this[t]=s,H(this,F,ne).call(this,"onRegister",s),this.dispatch("register")}remove(t){let i;if(typeof t=="string"&&(i=t,t=this.get(t)),!i){for(let s in f(this,N))if(f(this,N)[s]===t){i=s;break}}delete f(this,N)[i],delete this[i],H(this,F,ne).call(this,"onDestroy",t),this.dispatch("remove")}}N=new WeakMap,F=new WeakSet,ne=function(t,i,s){!t||!i||!i[t]||(t=i[t],t(s))};mw.require("editor.js");mw.require("css_parser.js");const Rs=function(){var n=document.querySelector("#mw-live-edit-editor"),e=function(){var d={};this.on=function(m,u){d[m]?d[m].push(u):d[m]=[u]},this.dispatch=function(m,u){d[m]&&d[m].forEach(function(c){c.call(this,u)})},this.provide=function(m){this.dispatch("change",m.map(function(u){return{label:u,value:u}}))}},t=new e;window.fontFamilyProvider=t;const i=mw.app.get("canvas").getFrame();i.contentWindow.fontFamilyProvider=t;const s=[[{group:{icon:"mdi mdi-format-title",controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],r=mw.Editor({document:i.contentWindow.document,executionDocument:i.contentWindow.document,actionWindow:i.contentWindow,element:n,mode:"document",notEditableClasses:["module"],regions:".edit",skin:"le2",editMode:"liveedit",scopeColor:"#111",controls:s,smallEditor:s,smallEditorPositionX:"center",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:t});var o=document.getElementById("toolbar-undo"),a=document.getElementById("toolbar-redo");r.state.on("record",function(){a.disabled=!r.state.hasPrev,o.disabled=!r.state.hasNext}),r.state.on("change",function(){a.disabled=!r.state.hasPrev,o.disabled=!r.state.hasNext}),o&&o.addEventListener("click",function(){r.state.undo()}),a&&a.addEventListener("click",function(){r.state.redo()}),n.innerHTML="",n.appendChild(r.wrapper);var l=r.storage.get(r.settings.id+"-small-editor-pinned");typeof l>"u"&&typeof r.smallEditorApi<"u"&&r.smallEditorApi.pin(),mw.app.register("richTextEditor",r),mw.app.register("richTextEditorAPI",r.api)};function Yt(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var Me={},Xt={get exports(){return Me},set exports(n){Me=n}},le={},Jt={get exports(){return le},set exports(n){le=n}},Lt=function(e,t){return function(){for(var s=new Array(arguments.length),r=0;r<s.length;r++)s[r]=arguments[r];return e.apply(t,s)}},Zt=Lt,V=Object.prototype.toString;function qe(n){return V.call(n)==="[object Array]"}function Oe(n){return typeof n>"u"}function Gt(n){return n!==null&&!Oe(n)&&n.constructor!==null&&!Oe(n.constructor)&&typeof n.constructor.isBuffer=="function"&&n.constructor.isBuffer(n)}function Kt(n){return V.call(n)==="[object ArrayBuffer]"}function Qt(n){return typeof FormData<"u"&&n instanceof FormData}function ei(n){var e;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?e=ArrayBuffer.isView(n):e=n&&n.buffer&&n.buffer instanceof ArrayBuffer,e}function ti(n){return typeof n=="string"}function ii(n){return typeof n=="number"}function Et(n){return n!==null&&typeof n=="object"}function re(n){if(V.call(n)!=="[object Object]")return!1;var e=Object.getPrototypeOf(n);return e===null||e===Object.prototype}function si(n){return V.call(n)==="[object Date]"}function ni(n){return V.call(n)==="[object File]"}function ri(n){return V.call(n)==="[object Blob]"}function kt(n){return V.call(n)==="[object Function]"}function oi(n){return Et(n)&&kt(n.pipe)}function ai(n){return typeof URLSearchParams<"u"&&n instanceof URLSearchParams}function li(n){return n.trim?n.trim():n.replace(/^\s+|\s+$/g,"")}function di(){return typeof navigator<"u"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window<"u"&&typeof document<"u"}function je(n,e){if(!(n===null||typeof n>"u"))if(typeof n!="object"&&(n=[n]),qe(n))for(var t=0,i=n.length;t<i;t++)e.call(null,n[t],t,n);else for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&e.call(null,n[s],s,n)}function De(){var n={};function e(s,r){re(n[r])&&re(s)?n[r]=De(n[r],s):re(s)?n[r]=De({},s):qe(s)?n[r]=s.slice():n[r]=s}for(var t=0,i=arguments.length;t<i;t++)je(arguments[t],e);return n}function ui(n,e,t){return je(e,function(s,r){t&&typeof s=="function"?n[r]=Zt(s,t):n[r]=s}),n}function hi(n){return n.charCodeAt(0)===65279&&(n=n.slice(1)),n}var L={isArray:qe,isArrayBuffer:Kt,isBuffer:Gt,isFormData:Qt,isArrayBufferView:ei,isString:ti,isNumber:ii,isObject:Et,isPlainObject:re,isUndefined:Oe,isDate:si,isFile:ni,isBlob:ri,isFunction:kt,isStream:oi,isURLSearchParams:ai,isStandardBrowserEnv:di,forEach:je,merge:De,extend:ui,trim:li,stripBOM:hi},j=L;function Ze(n){return encodeURIComponent(n).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var Nt=function(e,t,i){if(!t)return e;var s;if(i)s=i(t);else if(j.isURLSearchParams(t))s=t.toString();else{var r=[];j.forEach(t,function(l,d){l===null||typeof l>"u"||(j.isArray(l)?d=d+"[]":l=[l],j.forEach(l,function(u){j.isDate(u)?u=u.toISOString():j.isObject(u)&&(u=JSON.stringify(u)),r.push(Ze(d)+"="+Ze(u))}))}),s=r.join("&")}if(s){var o=e.indexOf("#");o!==-1&&(e=e.slice(0,o)),e+=(e.indexOf("?")===-1?"?":"&")+s}return e},ci=L;function ce(){this.handlers=[]}ce.prototype.use=function(e,t,i){return this.handlers.push({fulfilled:e,rejected:t,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1};ce.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)};ce.prototype.forEach=function(e){ci.forEach(this.handlers,function(i){i!==null&&e(i)})};var mi=ce,pi=L,fi=function(e,t){pi.forEach(e,function(s,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=s,delete e[r])})},Ht=function(e,t,i,s,r){return e.config=t,i&&(e.code=i),e.request=s,e.response=r,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e},ge,Ge;function Tt(){if(Ge)return ge;Ge=1;var n=Ht;return ge=function(t,i,s,r,o){var a=new Error(t);return n(a,i,s,r,o)},ge}var we,Ke;function gi(){if(Ke)return we;Ke=1;var n=Tt();return we=function(t,i,s){var r=s.config.validateStatus;!s.status||!r||r(s.status)?t(s):i(n("Request failed with status code "+s.status,s.config,null,s.request,s))},we}var ve,Qe;function wi(){if(Qe)return ve;Qe=1;var n=L;return ve=n.isStandardBrowserEnv()?function(){return{write:function(i,s,r,o,a,l){var d=[];d.push(i+"="+encodeURIComponent(s)),n.isNumber(r)&&d.push("expires="+new Date(r).toGMTString()),n.isString(o)&&d.push("path="+o),n.isString(a)&&d.push("domain="+a),l===!0&&d.push("secure"),document.cookie=d.join("; ")},read:function(i){var s=document.cookie.match(new RegExp("(^|;\\s*)("+i+")=([^;]*)"));return s?decodeURIComponent(s[3]):null},remove:function(i){this.write(i,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}(),ve}var ye,et;function vi(){return et||(et=1,ye=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}),ye}var be,tt;function yi(){return tt||(tt=1,be=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}),be}var xe,it;function bi(){if(it)return xe;it=1;var n=vi(),e=yi();return xe=function(i,s){return i&&!n(s)?e(i,s):s},xe}var Ce,st;function xi(){if(st)return Ce;st=1;var n=L,e=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];return Ce=function(i){var s={},r,o,a;return i&&n.forEach(i.split(`
`),function(d){if(a=d.indexOf(":"),r=n.trim(d.substr(0,a)).toLowerCase(),o=n.trim(d.substr(a+1)),r){if(s[r]&&e.indexOf(r)>=0)return;r==="set-cookie"?s[r]=(s[r]?s[r]:[]).concat([o]):s[r]=s[r]?s[r]+", "+o:o}}),s},Ce}var Le,nt;function Ci(){if(nt)return Le;nt=1;var n=L;return Le=n.isStandardBrowserEnv()?function(){var t=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a"),s;function r(o){var a=o;return t&&(i.setAttribute("href",a),a=i.href),i.setAttribute("href",a),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:i.pathname.charAt(0)==="/"?i.pathname:"/"+i.pathname}}return s=r(window.location.href),function(a){var l=n.isString(a)?r(a):a;return l.protocol===s.protocol&&l.host===s.host}}():function(){return function(){return!0}}(),Le}var Ee,rt;function ot(){if(rt)return Ee;rt=1;var n=L,e=gi(),t=wi(),i=Nt,s=bi(),r=xi(),o=Ci(),a=Tt();return Ee=function(d){return new Promise(function(u,c){var h=d.data,w=d.headers,v=d.responseType;n.isFormData(h)&&delete w["Content-Type"];var p=new XMLHttpRequest;if(d.auth){var I=d.auth.username||"",We=d.auth.password?unescape(encodeURIComponent(d.auth.password)):"";w.Authorization="Basic "+btoa(I+":"+We)}var Ye=s(d.baseURL,d.url);p.open(d.method.toUpperCase(),i(Ye,d.params,d.paramsSerializer),!0),p.timeout=d.timeout;function Xe(){if(p){var B="getAllResponseHeaders"in p?r(p.getAllResponseHeaders()):null,_=!v||v==="text"||v==="json"?p.responseText:p.response,J={data:_,status:p.status,statusText:p.statusText,headers:B,config:d,request:p};e(u,c,J),p=null}}if("onloadend"in p?p.onloadend=Xe:p.onreadystatechange=function(){!p||p.readyState!==4||p.status===0&&!(p.responseURL&&p.responseURL.indexOf("file:")===0)||setTimeout(Xe)},p.onabort=function(){p&&(c(a("Request aborted",d,"ECONNABORTED",p)),p=null)},p.onerror=function(){c(a("Network Error",d,null,p)),p=null},p.ontimeout=function(){var _="timeout of "+d.timeout+"ms exceeded";d.timeoutErrorMessage&&(_=d.timeoutErrorMessage),c(a(_,d,d.transitional&&d.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",p)),p=null},n.isStandardBrowserEnv()){var Je=(d.withCredentials||o(Ye))&&d.xsrfCookieName?t.read(d.xsrfCookieName):void 0;Je&&(w[d.xsrfHeaderName]=Je)}"setRequestHeader"in p&&n.forEach(w,function(_,J){typeof h>"u"&&J.toLowerCase()==="content-type"?delete w[J]:p.setRequestHeader(J,_)}),n.isUndefined(d.withCredentials)||(p.withCredentials=!!d.withCredentials),v&&v!=="json"&&(p.responseType=d.responseType),typeof d.onDownloadProgress=="function"&&p.addEventListener("progress",d.onDownloadProgress),typeof d.onUploadProgress=="function"&&p.upload&&p.upload.addEventListener("progress",d.onUploadProgress),d.cancelToken&&d.cancelToken.promise.then(function(_){p&&(p.abort(),c(_),p=null)}),h||(h=null),p.send(h)})},Ee}var y=L,at=fi,Li=Ht,Ei={"Content-Type":"application/x-www-form-urlencoded"};function lt(n,e){!y.isUndefined(n)&&y.isUndefined(n["Content-Type"])&&(n["Content-Type"]=e)}function ki(){var n;return(typeof XMLHttpRequest<"u"||typeof process<"u"&&Object.prototype.toString.call(process)==="[object process]")&&(n=ot()),n}function Ni(n,e,t){if(y.isString(n))try{return(e||JSON.parse)(n),y.trim(n)}catch(i){if(i.name!=="SyntaxError")throw i}return(t||JSON.stringify)(n)}var me={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:ki(),transformRequest:[function(e,t){return at(t,"Accept"),at(t,"Content-Type"),y.isFormData(e)||y.isArrayBuffer(e)||y.isBuffer(e)||y.isStream(e)||y.isFile(e)||y.isBlob(e)?e:y.isArrayBufferView(e)?e.buffer:y.isURLSearchParams(e)?(lt(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):y.isObject(e)||t&&t["Content-Type"]==="application/json"?(lt(t,"application/json"),Ni(e)):e}],transformResponse:[function(e){var t=this.transitional,i=t&&t.silentJSONParsing,s=t&&t.forcedJSONParsing,r=!i&&this.responseType==="json";if(r||s&&y.isString(e)&&e.length)try{return JSON.parse(e)}catch(o){if(r)throw o.name==="SyntaxError"?Li(o,this,"E_JSON_PARSE"):o}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};me.headers={common:{Accept:"application/json, text/plain, */*"}};y.forEach(["delete","get","head"],function(e){me.headers[e]={}});y.forEach(["post","put","patch"],function(e){me.headers[e]=y.merge(Ei)});var $e=me,Hi=L,Ti=$e,Si=function(e,t,i){var s=this||Ti;return Hi.forEach(i,function(o){e=o.call(s,e,t)}),e},ke,dt;function St(){return dt||(dt=1,ke=function(e){return!!(e&&e.__CANCEL__)}),ke}var ut=L,Ne=Si,Ai=St(),_i=$e;function He(n){n.cancelToken&&n.cancelToken.throwIfRequested()}var Mi=function(e){He(e),e.headers=e.headers||{},e.data=Ne.call(e,e.data,e.headers,e.transformRequest),e.headers=ut.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),ut.forEach(["delete","get","head","post","put","patch","common"],function(s){delete e.headers[s]});var t=e.adapter||_i.adapter;return t(e).then(function(s){return He(e),s.data=Ne.call(e,s.data,s.headers,e.transformResponse),s},function(s){return Ai(s)||(He(e),s&&s.response&&(s.response.data=Ne.call(e,s.response.data,s.response.headers,e.transformResponse))),Promise.reject(s)})},b=L,At=function(e,t){t=t||{};var i={},s=["url","method","data"],r=["headers","auth","proxy","params"],o=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],a=["validateStatus"];function l(c,h){return b.isPlainObject(c)&&b.isPlainObject(h)?b.merge(c,h):b.isPlainObject(h)?b.merge({},h):b.isArray(h)?h.slice():h}function d(c){b.isUndefined(t[c])?b.isUndefined(e[c])||(i[c]=l(void 0,e[c])):i[c]=l(e[c],t[c])}b.forEach(s,function(h){b.isUndefined(t[h])||(i[h]=l(void 0,t[h]))}),b.forEach(r,d),b.forEach(o,function(h){b.isUndefined(t[h])?b.isUndefined(e[h])||(i[h]=l(void 0,e[h])):i[h]=l(void 0,t[h])}),b.forEach(a,function(h){h in t?i[h]=l(e[h],t[h]):h in e&&(i[h]=l(void 0,e[h]))});var m=s.concat(r).concat(o).concat(a),u=Object.keys(e).concat(Object.keys(t)).filter(function(h){return m.indexOf(h)===-1});return b.forEach(u,d),i};const Oi="axios",Di="0.21.4",zi="Promise based HTTP client for the browser and node.js",Ii="index.js",Bi={test:"grunt test",start:"node ./sandbox/server.js",build:"NODE_ENV=production grunt build",preversion:"npm test",version:"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",postversion:"git push && git push --tags",examples:"node ./examples/server.js",coveralls:"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",fix:"eslint --fix lib/**/*.js"},Ri={type:"git",url:"https://github.com/axios/axios.git"},Pi=["xhr","http","ajax","promise","node"],Vi="Matt Zabriskie",qi="MIT",ji={url:"https://github.com/axios/axios/issues"},$i="https://axios-http.com",Ui={coveralls:"^3.0.0","es6-promise":"^4.2.4",grunt:"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1",karma:"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2",minimist:"^1.2.0",mocha:"^8.2.1",sinon:"^4.5.0","terser-webpack-plugin":"^4.2.3",typescript:"^4.0.5","url-search-params":"^0.10.0",webpack:"^4.44.2","webpack-dev-server":"^3.11.0"},Fi={"./lib/adapters/http.js":"./lib/adapters/xhr.js"},Wi="dist/axios.min.js",Yi="dist/axios.min.js",Xi="./index.d.ts",Ji={"follow-redirects":"^1.14.0"},Zi=[{path:"./dist/axios.min.js",threshold:"5kB"}],Gi={name:Oi,version:Di,description:zi,main:Ii,scripts:Bi,repository:Ri,keywords:Pi,author:Vi,license:qi,bugs:ji,homepage:$i,devDependencies:Ui,browser:Fi,jsdelivr:Wi,unpkg:Yi,typings:Xi,dependencies:Ji,bundlesize:Zi};var _t=Gi,Ue={};["object","boolean","number","function","string","symbol"].forEach(function(n,e){Ue[n]=function(i){return typeof i===n||"a"+(e<1?"n ":" ")+n}});var ht={},Ki=_t.version.split(".");function Mt(n,e){for(var t=e?e.split("."):Ki,i=n.split("."),s=0;s<3;s++){if(t[s]>i[s])return!0;if(t[s]<i[s])return!1}return!1}Ue.transitional=function(e,t,i){var s=t&&Mt(t);function r(o,a){return"[Axios v"+_t.version+"] Transitional option '"+o+"'"+a+(i?". "+i:"")}return function(o,a,l){if(e===!1)throw new Error(r(a," has been removed in "+t));return s&&!ht[a]&&(ht[a]=!0,console.warn(r(a," has been deprecated since v"+t+" and will be removed in the near future"))),e?e(o,a,l):!0}};function Qi(n,e,t){if(typeof n!="object")throw new TypeError("options must be an object");for(var i=Object.keys(n),s=i.length;s-- >0;){var r=i[s],o=e[r];if(o){var a=n[r],l=a===void 0||o(a,r,n);if(l!==!0)throw new TypeError("option "+r+" must be "+l);continue}if(t!==!0)throw Error("Unknown option "+r)}}var es={isOlderVersion:Mt,assertOptions:Qi,validators:Ue},Ot=L,ts=Nt,ct=mi,mt=Mi,pe=At,Dt=es,U=Dt.validators;function ee(n){this.defaults=n,this.interceptors={request:new ct,response:new ct}}ee.prototype.request=function(e){typeof e=="string"?(e=arguments[1]||{},e.url=arguments[0]):e=e||{},e=pe(this.defaults,e),e.method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=e.transitional;t!==void 0&&Dt.assertOptions(t,{silentJSONParsing:U.transitional(U.boolean,"1.0.0"),forcedJSONParsing:U.transitional(U.boolean,"1.0.0"),clarifyTimeoutError:U.transitional(U.boolean,"1.0.0")},!1);var i=[],s=!0;this.interceptors.request.forEach(function(c){typeof c.runWhen=="function"&&c.runWhen(e)===!1||(s=s&&c.synchronous,i.unshift(c.fulfilled,c.rejected))});var r=[];this.interceptors.response.forEach(function(c){r.push(c.fulfilled,c.rejected)});var o;if(!s){var a=[mt,void 0];for(Array.prototype.unshift.apply(a,i),a=a.concat(r),o=Promise.resolve(e);a.length;)o=o.then(a.shift(),a.shift());return o}for(var l=e;i.length;){var d=i.shift(),m=i.shift();try{l=d(l)}catch(u){m(u);break}}try{o=mt(l)}catch(u){return Promise.reject(u)}for(;r.length;)o=o.then(r.shift(),r.shift());return o};ee.prototype.getUri=function(e){return e=pe(this.defaults,e),ts(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")};Ot.forEach(["delete","get","head","options"],function(e){ee.prototype[e]=function(t,i){return this.request(pe(i||{},{method:e,url:t,data:(i||{}).data}))}});Ot.forEach(["post","put","patch"],function(e){ee.prototype[e]=function(t,i,s){return this.request(pe(s||{},{method:e,url:t,data:i}))}});var is=ee,Te,pt;function zt(){if(pt)return Te;pt=1;function n(e){this.message=e}return n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,Te=n,Te}var Se,ft;function ss(){if(ft)return Se;ft=1;var n=zt();function e(t){if(typeof t!="function")throw new TypeError("executor must be a function.");var i;this.promise=new Promise(function(o){i=o});var s=this;t(function(o){s.reason||(s.reason=new n(o),i(s.reason))})}return e.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},e.source=function(){var i,s=new e(function(o){i=o});return{token:s,cancel:i}},Se=e,Se}var Ae,gt;function ns(){return gt||(gt=1,Ae=function(e){return function(i){return e.apply(null,i)}}),Ae}var _e,wt;function rs(){return wt||(wt=1,_e=function(e){return typeof e=="object"&&e.isAxiosError===!0}),_e}var vt=L,os=Lt,oe=is,as=At,ls=$e;function It(n){var e=new oe(n),t=os(oe.prototype.request,e);return vt.extend(t,oe.prototype,e),vt.extend(t,e),t}var T=It(ls);T.Axios=oe;T.create=function(e){return It(as(T.defaults,e))};T.Cancel=zt();T.CancelToken=ss();T.isCancel=St();T.all=function(e){return Promise.all(e)};T.spread=ns();T.isAxiosError=rs();Jt.exports=T;le.default=T;(function(n){n.exports=le})(Xt);const de=Yt(Me);class A{static extend(){const e={};let t=!1,i=0;const s=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(t=arguments[0],i++);const r=function(o){for(const a in o)Object.prototype.hasOwnProperty.call(o,a)&&(t&&Object.prototype.toString.call(o[a])==="[object Object]"?e[a]=A.extend(!0,e[a],o[a]):e[a]=o[a])};for(;i<s;i++){const o=arguments[i];r(o)}return e}}var R=function(n,e){var t=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(s,r){this.nodes=(r||document).querySelectorAll(s)},this.each=function(s){if(this.nodes)for(var r=0;r<this.nodes.length;r++)s.call(this.nodes[r],r);else this.node&&s.call(this.node,0);return this},this.encapsulate=function(){};var i=function(s,r){s&&(Array.isArray(s)?s.forEach(function(o){i(o,r)}):s instanceof R?r.append(s):typeof s=="object"&&r.append(new R(s)))};this.create=function(){var s=this.document.createElement(this.settings.tag);if(this.node=s,this.settings.encapsulate===!0){var r=this.settings.encapsulate===!0?"open":this.settings.encapsulate;s.attachShadow({mode:r})}this.nodes=[s],this.settings.content&&i(this.settings.content,this)},this._specialProps=function(s,r){if(s==="tooltip")return this.node.dataset[s]=r,!0},this.setProps=function(){for(var s in this.settings.props)if(s==="dataset")for(var r in this.settings.props[s])this.node.dataset[r]=this.settings.props[s][r];else if(s==="style")for(var o in this.settings.props[s])this.node.style[o]=this.settings.props[s][o];else{var a=this.settings.props[s];this._specialProps(s,a)||(this.node[s]=a)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(s,r){return typeof r=="number"&&this.__.cssNumber.indexOf(s)===-1&&(r=r+"px"),r},this.css=function(s,r){if(typeof s=="string")if(typeof r<"u"){var o=this._normalizeCSSValue(s,r);this.each(function(){this.style[s]=o})}else return this.document.defaultView.getComputedStyle(this.node)[s];if(typeof s=="object")for(var a in s)this.each(function(){this.style[a]=t._normalizeCSSValue(a,s[a])});return this},this.dataset=function(s,r){return typeof r>"u"?this._active()[s]:(this.each(function(){this.dataset[s]=r}),this)},this.attr=function(s,r){return typeof r>"u"?this._active()[s]:(this.each(function(){this.setAttribute(s,r)}),this)},this.val=function(s){return typeof s>"u"?this._active().value:(this.each(function(){this.value=s}),this)},this.prop=function(s,r){var o=this._active();return typeof r>"u"?o[s]:(o[s]!==r&&(o[s]=r,this.trigger("propChange",[s,r])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(s){var r=mw.element("#r"+new Date().getTime());return this.each(function(){for(var o=this.querySelectorAll(s),a=0;a<o.length;a++)r.nodes.indexOf(o[a])===-1&&r.nodes.push(o[a])}),r},this.addClass=function(s){return s=s.trim().split(" "),this.each(function(){var r=this;s.forEach(function(o){r.classList.add(o)})})},this.toggleClass=function(s){return this.each(function(){this.classList.toggle(s.trim())})},this.removeClass=function(s){var r=Array.isArray(s);if(r)return this.each(function(){for(var a=0,l=s.length;a<l;a++)this.classList.remove(s[a])});s=s.trim();var o=s.split(" ");return o.length>1?this.removeClass(o):this.each(function(){this.classList.remove(s)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(s){return typeof s>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=s})},this.text=function(s,r){if(typeof s>"u")return this.node.textContent;typeof r>"u"&&(r=!0),r&&(s=this.document.createRange().createContextualFragment(s).textContent),this.node.innerHTML=s},this._asdom=function(s){return typeof s=="string"?this.document.createRange().createContextualFragment(s):s.node?s.node:s.nodes?s.nodes[s.nodes.length-1]:s},this.offset=function(){var s=this._active(),r=this.getWindow(),o=s.getBoundingClientRect();return o.offsetTop=o.top+r.pageYOffset,o.offsetBottom=o.bottom+r.pageYOffset,o.offsetLeft=o.left+r.pageXOffset,o},this.width=function(s){return s?this.css("width",s):this._active().offsetWidth},this.height=function(s){return s?this.css("height",s):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(s){s=s||"*";var r=this._active(),o=r.parentElement,a=mw.element();for(a.nodes=[];o;)o.matches(s)&&a.nodes.push(o),o=o.parentElement;return a},this.append=function(s){return s&&this.each(function(){this.append(t._asdom(s))}),this},this.before=function(s){return s&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(t._asdom(s),this)}),this},this.after=function(s){s&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(t._asdom(s),this.nextSibling)})},this.prepend=function(s){return s&&this.each(function(){this.prepend(t._asdom(s))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(s){this._disabled=s,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(s,r){return r=r||{},this.each(function(){this.dispatchEvent(new CustomEvent(s,{detail:r,cancelable:!0,bubbles:!0})),t._on[s]&&t._on[s].forEach(function(o){o.call(this,s,r)})}),this},this.get=function(s){return this.nodes[s]},this.wrap=function(s){var r=Fe(s);this.before(r),r.append(this)},this._on={},this.on=function(s,r){return s=s.trim().split(" "),s.forEach(function(o){t._on[o]||(t._on[o]=[]),t._on[o].push(r),t.each(function(){this.addEventListener(o,r,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=e||document,this.root instanceof R&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,n=n||{},n.nodeName&&n.nodeType)this.nodes.push(n),this.node=n,n={},this._asElement=!0;else if(typeof n=="string")if(n.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(n)),n={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof R)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new R(this.settings.content));else{var s=this._asdom(n);this.nodes=[].slice.call(s.children),this._asElement=!0}n=n||{};var r={tag:"div",props:{}};this.settings=A.extend({},r,n),!this._asElement&&(this.create(),this.setProps())},this.init()};const Fe=function(n,e){return new R(n,e)};Fe.module=function(n,e){R.prototype[n]=e};const ze="mw-le-element";window.customElements&&!customElements.get(ze)&&customElements.define(ze,class extends HTMLElement{constructor(){super()}});const g=(n,e)=>(n instanceof Object&&!n.nodeType&&(n=A.extend({},n||{},{tag:n.tag||ze})),Fe(n,e));let Z;const te=document.documentElement;te.matches?Z="matches":te.matchesSelector?Z="matchesSelector":te.mozMatchesSelector?Z="mozMatchesSelector":te.webkitMatchesSelector&&(Z="webkitMatchesSelector");class C{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(e,t){return e[Z](t)}static isBlockLevel(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof this._isBlockCache[t]<"u")return this._isBlockCache[t];var i=document.createElement(t);return this.fragment().appendChild(i),this._isBlockCache[t]=getComputedStyle(i).display==="block",this.fragment().removeChild(i),this._isBlockCache[t]}static firstBlockLevel(e){for(;e&&e.classList;){if(this.isBlockLevel(e))return e;e=e.parentNode}}static firstWithBackgroundImage(e){if(!e)return null;for(;e&&e.nodeName!=="BODY";){if(e.style.backgroundImage)return e;e=e.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(e,t){for(;e&&e.nodeName!=="BODY";){let i=0,s=t.length;for(;i<s;i++)if(e.classList.contains(t[i]))return!0;e=e.parentElement}return!1}static hasParentsWithClass(e,t){if(e){for(var i=e.parentNode;i&&i.nodeName!=="BODY";){if(i.classList.contains(t))return!0;i=i.parentNode}return!1}}static hasParentWithId(e,t){if(e){for(var i=e.parentNode;i&&i.nodeName!=="BODY";){if(i.id===t)return!0;i=i.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(e,t){for(;e&&e.nodeName!=="BODY";){let i=0,s=t.length;for(;i<s;i++)if(e.classList.contains(t[i]))return e;e=e.parentElement}return null}static firstParentOrCurrentWithTag(e,t){if(!(!e||!t)){t=typeof t!="string"?t:[t];for(var i=e;i&&i.nodeName!=="BODY";){if(t.indexOf(i.nodeName.toLowerCase())!==-1)return i;i=i.parentNode}return!1}}static index(e,t,i){i=i||e.tagName.toLowerCase(),t=t||e.parentNode;var s;t.constructor===[].constructor?s=t:s=t.querySelectorAll(i);for(var r=0,o=s.length;r<o;r++)if(e===s[r])return r}static firstParentOrCurrentWithClass(e,t){if(!e)return!1;for(var i=e;i&&i.nodeName!=="BODY";){if(i.classList.contains(t))return i;i=i.parentNode}return!1}static firstParentOrCurrent(e,t){if(!e)return!1;for(var i=e;i&&i.nodeName!=="BODY";){if(i.matches(t))return i;i=i.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(e,t){if(!e)return!1;for(var i=e;i&&i.nodeName!=="BODY";){if(!i)return!1;if(this.hasAnyOfClasses(i,t))return i;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(e,t){let i=e;for(;i&&i.nodeName!=="BODY";){const s=i.classList.contains(t[0]),r=i.classList.contains(t[1]);if(s&&r)return!1;if(s)return!0;if(r)return!1;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(e,t){let i=e;for(;i&&i.nodeName!=="BODY";){const s=i.classList.contains(t[0]),r=i.classList.contains(t[1]);if(s&&r)return!1;if(s)return!0;if(r)return!1;i=i.parentNode}return!0}static hasAnyOfClasses(e,t){if(!e)return;let i=0,s=t.length;for(;i<s;i++)if(e.classList.contains(t[i]))return!0;return!1}static offset(e){if(e){var t=e.getBoundingClientRect(),i={top:t.top,left:t.left,width:t.width,height:t.height,bottom:t.bottom,right:t.right};return i.top+=e.ownerDocument.defaultView.scrollY,i.bottom+=e.ownerDocument.defaultView.scrollY,i.left+=e.ownerDocument.defaultView.scrollX,i.right+=e.ownerDocument.defaultView.scrollX,i}}static parentsOrder(e,t){for(var i=[],s={},r=t.length,o=0,a=-1;o<r;o++)s[t[o]]=-1;if(!e)return s;for(var l=e.parentNode;l&&l.nodeName!=="BODY";){for(a++,o=0;o<r;o++)l.classList.contains(t[o])&&i.indexOf(t[o])===-1&&(s[t[o]]=a,i.push(t[o]));l=l.parentNode}return s}}E(C,"_isBlockCache",{}),E(C,"_fragment");class ds{constructor(e){this.settings=e,this.tools=C}isRow(e){return e.classList.contains(this.settings.rowClass)}isModule(e){return e.classList.contains(this.settings.moduleClass)&&e.dataset.type!=="layouts"}isLayout(e){return e.classList.contains(this.settings.moduleClass)&&e.dataset.type==="layouts"}isInLayout(e){if(!e)return!1;for(e=e.parentNode;e&&e!==this.settings.document.body;){if(e.classList.contains(this.settings.moduleClass)&&e.dataset.type==="layouts")return!0;e=e.parentNode}}isElement(e){return e.classList.contains(this.settings.elementClass)}isEmptyElement(e){return e.classList.contains(this.settings.emptyElementClass)}isEdit(e){return e.classList.contains(this.settings.editClass)}isInEdit(e){var t=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(e.parentNode,t)}isEditOrInEdit(e){return this.isEdit(e)||this.isInEdit(e)}isPlainText(e){return e.classList.contains(this.settings.plainElementClass)}getType(e){if(this.isEdit(e))return"edit";if(this.isElement(e))return"element";if(this.isModule(e))return"module";if(this.isLayout(e))return"layout"}}class Bt extends ds{constructor(e){super(e),this.settings=e,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM","DD"],this.init()}isConfigurable(e){return this.isElement(e)||this.isModule(e)||this.isRow(e)}isEditableLayout(e){return this.this.isLayout(e)&&this.isInEdit(e)}canMoveModule(e){return this.isModule(e)&&this.isInEdit(e)}canAcceptByClass(e){return this.tools.hasAnyOfClasses(e,this.dropableElements())}canAcceptByTag(e){return!e||e.nodeType!==1?!1:this._tagsCanAccept.indexOf(e.nodeName)!==-1}allowDrop(e){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(e,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(e){return this.canAccept(e.parentNode)}canAccept(e){return!!(this.canAcceptByClass(e)&&this.isEditOrInEdit(e)&&this.allowDrop(e))}canReceiveElements(e){return this.isEdit(e)&&this.canAcceptByTag(e)}dropableElements(){return this._dropableElements}getIteractionTarget(e){return this.tools.firstWithAyOfClassesOnNodeOrParent(e,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(e,t){const i=this.getIteractionTarget(e);if(!i||!this.isEditOrInEdit(e)||!this.allowDrop(e))return null;const s={target:i,canInsert:!1,beforeAfter:!1};var r=this.settings.strictLayouts&&this.isLayout(t),o=this.settings.strict&&!this.isLayout(t)&&!this.isInLayout(i);if(o)return null;if(this.isEdit(i))s.canInsert=!r;else if(this.isElement(i)&&!r)this.canAcceptByTag(i)&&(s.canInsert=!r),s.beforeAfter=!0;else if(this.isModule(i)&&!r)if(this.canInsertBeforeOrAfter(i))s.beforeAfter=!0;else return null;else if(this.isLayout(i))if(this.canInsertBeforeOrAfter(i))s.beforeAfter=!0;else return null;return s}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let us=-1;const hs=(n,e)=>{if(!n||!e)return!1;const t=e.target;if(!t||t.nodeType!==1)return!1;n.pageX;const i=n.pageY,s=C.offset(t),r={},o=15;if(us===i||!e||!e.canInsert&&!e.beforeAfter)return!1;if(e.canInsert&&e.beforeAfter)if(i>=s.top-o&&i<=s.top+o)r.position="top",r.action="before";else if(i>=s.top+o&&i<=s.top+s.height/2)r.position="top",r.action="prepend";else if(i>=s.top+s.height/2&&i<=s.bottom-o)r.position="bottom",r.action="append";else if(i>=s.top+s.height/2&&i>=s.bottom-o)r.position="bottom",r.action="after";else return!1;else if(e.beforeAfter)if(i>=s.top-o&&i<=s.top+s.height/2)r.position="top",r.action="before";else if(i>=s.top+s.height/2&&i<=s.bottom+o)r.position="bottom",r.action="after";else return!1;else if(e.canInsert)if(i>=s.top-o&&i<=s.top+s.height/2)r.position="top",r.action="prepend";else if(i>=s.top+s.height/2&&i<=s.bottom+o)r.position="bottom",r.action="append";else return!1;return r},cs=function(n,e){var t={handle:null,element:null,document,helper:!0},i=this,s={};this.on=function(o,a){s[o]?s[o].push(a):s[o]=[a]},this.dispatch=function(o,a){s[o]&&s[o].forEach(function(l){l.call(this,a)})};var r=function(o){i.settings.document.body.style.scrollBehavior="smooth",i.settings.document.defaultView.scrollTo(0,i.settings.document.defaultView.scrollY+o),i.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=A.extend({},t,n),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(o){this.element=g(o).get(0),this.settings.handle||(this.settings.handle=this.settings.element),this.handle=this.settings.handle,this.handle.attr("draggable","true")},this.setTargets=function(o){this.targets=g(o)},this.addTarget=function(o){this.targets.push(o)},this.init=function(){this.config(),this.draggable()},this.$data={},this.helper=function(o,a){if(this._helper||(this._helper=g().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),o==="create"){var l=g(i.element).offset();this.$data._calcMinus={y:a.pageY-l.offsetTop,x:a.pageX-l.offsetLeft},this._helper.style.top=o.pageY+"px",this._helper.style.left=o.pageX+"px",this._helper.style.width=i.element.offsetWidth+"px",this._helper.style.height=i.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"}else o==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&o&&(this._helper.style.top=o.pageY-this.$data._calcMinus.y+"px",this._helper.style.left=o.pageX-this.$data._calcMinus.x+"px",this.settings.document.documentElement.classList.add("le-dragging"));return this._helper.innerHTML=i.element.outerHTML,this._helper},this.isDragging=!1,this.dropableService=new Bt(e),this.dropPosition=hs,this.draggable=function(){g(this.settings.target).on("dragleave",function(o){i.dropIndicator&&i.dropIndicator.hide()}),g(this.settings.target).on("dragover",function(o){if(i.target=null,i.action=null,o.target!==i.element||!i.element.contains(o.target)){var a=i.dropableService.getTarget(o.target,i.element);if(a&&a!==i.element){const l=i.dropPosition(o,a);l?(i.target=a.target,i.action=l.action,i.dropIndicator&&i.dropIndicator.position(i.target,l.action+"-"+l.position)):i.dropIndicator&&i.dropIndicator.hide()}else i.dropIndicator&&i.dropIndicator.hide();i.isDragging&&(i.dispatch("dragOver",{element:i.element,event:o}),o.preventDefault())}}).on("drop",function(o){i.isDragging&&(o.preventDefault(),i.target&&i.action&&g(i.target)[i.action](i.element),i.dropIndicator&&i.dropIndicator.hide(),i.dispatch("drop",{element:i.element,event:o})),i.dropIndicator&&i.dropIndicator.hide()}),this.handle.on("dragstart",function(o){i.isDragging=!0,i.element.id||(i.element.id="mw-element-"+new Date().getTime()),i.element.classList.add("mw-element-is-dragged"),o.dataTransfer.setData("text",i.element.id),o.dataTransfer.effectAllowed="move",i.helper("create",o),i.dispatch("dragStart",{element:i.element,event:o})}).on("drag",function(o){var a=90,l=5;o.clientY<a&&r(-l),o.clientY>innerHeight-(a+(this._helper?this._helper.offsetHeight+10:0))&&r(l),o.dataTransfer.dropEffect="copy",i.dispatch("drag",{element:i.element,event:o}),i.helper(o)}).on("dragend",function(o){i.isDragging=!1,i.element.classList.remove("mw-element-is-dragged"),i.helper("remove"),i.dispatch("dragEnd",{element:i.element,event:o})})},this.init()};var O,W,Y;class Rt{constructor(e={}){E(this,"x",0);E(this,"y",0);E(this,"w",0);E(this,"h",0);E(this,"listeners",{});x(this,O,{});E(this,"activeHandle",null);E(this,"handles",{});x(this,W,!1);x(this,Y,!0);const t={element:null,document,maxHeight:null,maxWidth:null};this.settings=Object.assign({},t,e),this.element=this.settings.element,this.document=this.settings.document,this.element.classList.add("mw-le-resizable")}on(e,t){f(this,O)[e]?f(this,O)[e].push(t):f(this,O)[e]=[t]}dispatch(e,t){f(this,O)[e]&&f(this,O)[e].forEach(i=>{i.call(this,t)})}mouseMoveHandler(e){const t=e.clientX-this.x,i=e.clientY-this.y;let s=this.h+i,r;this.activeHandle===this.handles.left?r=this.w-t:r=this.w+t,this.settings.maxWidth&&(r=Math.min(r,this.settings.maxWidth)),this.settings.maxHeight&&(s=Math.min(s,this.settings.maxHeight)),this.element.style.width=`${r}px`,this.element.style.height=`${s}px`,e.preventDefault(),this.dispatch("resize",{height:this.element.offsetHeight,width:this.element.offsetWidth})}mouseUpHandler(){for(const e in this.listeners)this.document.removeEventListener(e,this.listeners[e]);this.listeners={},this.activeHandle=null,this.dispatch("resizeStop")}mouseDownHandler(e){this.x=e.clientX,this.y=e.clientY;const t=this.document.defaultView.getComputedStyle(this.element);this.w=parseInt(t.width,10),this.h=parseInt(t.height,10),this.listeners.mousemove=i=>this.mouseMoveHandler(i),this.listeners.mouseup=i=>this.mouseUpHandler(i);for(const i in this.listeners)this.document.addEventListener(i,this.listeners[i]);this.dispatch("resizeStart")}disable(){q(this,W,!0),q(this,Y,!1),this.element.classList.add("mw-le-resizable-disabled")}enable(){q(this,W,!1),q(this,Y,!0),this.element.classList.remove("mw-le-resizable-disabled")}disabled(){return f(this,W)}enabled(){return f(this,Y)}build(){const e=this.document.createElement("span"),t=this.document.createElement("span"),i=this.document.createElement("span"),s=this.document.createElement("span");this.handles.top=e,this.handles.right=t,this.handles.bottom=i,this.handles.left=s,e.className="mw-le-resizer mw-le-resizer-t",t.className="mw-le-resizer mw-le-resizer-r",s.className="mw-le-resizer mw-le-resizer-l",i.className="mw-le-resizer mw-le-resizer-b",this.element.appendChild(e),this.element.appendChild(t),this.element.appendChild(i),this.element.appendChild(s)}mount(){if(!this.element)return this;if(this.element.dataset.resizable)return this;this.element.dataset.resizable=!0,this.build();const e=this.element.querySelectorAll(".mw-le-resizer");return Array.from(e).forEach(t=>{t.addEventListener("mousedown",i=>{this.mouseDownHandler(i),this.activeHandle=t})}),this.dispatch("ready",{height:this.element.offsetHeight,width:this.element.offsetWidth}),this}}O=new WeakMap,W=new WeakMap,Y=new WeakMap;globalThis.Resizable=Rt;const ie=function(n){var e={},t=this;this.settings=A.extend({},e,n);const i={};this.on=(u,c)=>{i[u]?i[u].push(c):i[u]=[c]},this.dispatch=(u,c)=>{i[u]&&i[u].forEach(h=>{h.call(this,c)})};var s=!0,r=null;this.getTarget=function(){return r},this.isVisible=function(){return s},this.show=function(){s=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){s=!1,this.wrapper.addClass("mw-handle-item-hidden"),this.wrapper.removeClass("mw-handle-active")};let o=null;this.setContent=function(u){o&&o.remove(),o=u,this.wrapper.append(o)},this.initDraggable=function(){this.draggable=new cs({handle:this.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},n),this.draggable.on("dragStart",function(){t.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){t.wrapper.removeClass("mw-handle-item-dragging")})};const a=()=>{if(this.settings.document.defaultView.pageYOffset!==void 0)return{x:this.settings.document.defaultView.pageXOffset,y:this.settings.document.defaultView.pageYOffset};{let u,c,h=this.settings.document,w=h.documentElement,v=h.body;return u=w.scrollLeft||v.scrollLeft||0,c=w.scrollTop||v.scrollTop||0,{x:u,y:c}}};this.position=function(u){if(!u)return;const c=C.offset(u),h=a(),w=this.wrapper.get(0).querySelector(".mw-le-handle-menu-buttons");let v;h.y>c.top-70&&(v=h.y-(c.top-70),v>c.height&&(v=c.height+10)),w.style.transition="none",w.style.transform=v?`translateY(${v}px)`:"",setTimeout(()=>w.style.transition="",10),this.wrapper.css({top:c.top,left:c.left,width:c.width,height:c.height})},this.set=function(u,c){if(!u){r=null;return}this.position(u),this.show(),this.draggable.setElement(u),(r!==u||c)&&(r=u,this.dispatch("targetChange",u)),setTimeout(()=>this.wrapper.addClass("mw-handle-active"),1)},this.createHandle=function(){if(this.settings.handle==="self"){var u=g({tag:"div",props:{className:"mw-handle-item-draggable-self"}});this.wrapper.append(u),this.settings.document.addEventListener("mousedown",function(){u.addClass("active")}),this.settings.document.addEventListener("mouseup",function(){u.removeClass("active")}),this.settings.handle=u,this.handle=u,this.wrapper.append(u);return}this.settings.handle?(typeof this.settings.handle=="string"&&(this.settings.handle=g(this.handle)),this.handle=this.settings.handle):(this.handle=g({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))};var l=this.settings.document.defaultView.innerWidth,d=this.settings.document.defaultView.innerHeight;this.resizableMaxWidth=function(u){if(typeof u>"u")return l;l=u},this.resizableMaxHeight=function(u){if(typeof u>"u")return d;d=u},this.findClosestElementByClass=function(u,c=200){let h=[],w=u,v=0;for(;w!==document;){const p=w.parentNode.querySelectorAll(".element,.module");if(p.length>0&&(h=[...p].filter(I=>Math.abs(u.getBoundingClientRect().top-I.getBoundingClientRect().top)<=c),h.length>0)||(w=w.parentNode,v++,v>c/10))break}return h};function m(u,c,h,w){var v=Math.min(h/u,w/c);return{width:u*v,height:c*v}}this.resizable=function(){this.settings.resizable&&(this.resizer=new Rt({element:this.wrapper.get(0),document:this.settings.document}),this.resizer.mount(),this.resizer.on("resize",u=>{const c=this.getTarget();c.nodeName==="IMG"?(u=m(c.offsetWidth,c.offsetHeight,u.width,u.height),c.style.height=u.height+"px",c.style.width=u.width+"px"):(c.style.minHeight=u.height+"px",c.style.width=u.width+"px"),this.set(c)}))},this.createWrapper=function(){this.wrapper=g({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),g(document.body).on("mouseup touchend",function(){t.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide(),this.resizable(),this.settings.document.addEventListener("orientationChange",u=>this.position(this.getTarget())),this.settings.document.addEventListener("resize",u=>this.position(this.getTarget())),this.settings.document.addEventListener("scroll",u=>this.position(this.getTarget()))},ms=function(n){n=n||{},this.tools=C;var e=this,t={exceptions:["mw-handle-item"]};this.settings=A.extend({},t,n),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var i=20,s=function(a){return a%5>=2.5?a/5*5+5:a/5*5},r=function(a,l){a=s(a),l=s(l);for(var d=[],m=a-i,u=a+i,c=l-i,h=l+i;m<u;m+=5)for(;c<=h;c+=5)d.push([m,c]);return d},o=function(a,l){a&&a.parentElement&&l.indexOf(a)===-1&&e.body!==a&&l.push(a)};this.fromEvent=function(a){let l,d;return a.pageX?(l=a.pageX,d=a.pageY):a.targetTouches&&a.targetTouches[0]?(l=a.targetTouches[0].pageX,d=a.targetTouches[0].pageY):a.touches&&a.touches[0]&&(l=a.touches[0].pageX,d=a.touches[0].pageY),e.tools.hasAnyOfClassesOnNodeOrParent(a.target,this.settings.exceptions)?[]:(e.document._test||(e.document._test=document.createElement("div"),e.document._test.style.position="absolute",e.document._test.style.left="10px",e.document._test.style.background="red",e.document._test.style.width="10px",e.document._test.style.height="10px",e.document.body.appendChild(e.document._test)),e.document._test.style.top=a.pageY+"px",this.fromPoint(l,d))},this.fromPoint=function(a,l){var d=[];e.document.defaultView.frameElement&&(l-=e.document.defaultView.scrollY);var m=e.document.elementFromPoint(a,l);if(!m)return[];o(m,d);var u=r(a,l);return u.forEach(function(c){o(e.document.elementFromPoint(c[0],c[1]),d)}),d}},ps=function(n){return C.matches(n,'.row,[class*="row-"]')},fs=function(n){return C.matches(n,'.col,[class*="col-"]')};let M;const yt=function(){return M||(M=document.createElement("div"),M.style.visibility="hidden",M.style.position="absolute",M.style.width="1px",M.style.height="1px",document.body.appendChild(M)),M},se={},gs=function(n){if(!n||n.nodeType===3)return!1;var e=n.nodeName;if(typeof se[e]<"u")return se[e];var t=document.createElement(e);return yt().appendChild(t),se[e]=getComputedStyle(t).display==="block",yt().removeChild(t),se[e]},ws=(n,e,t)=>{n=n||"*";for(var i=e.querySelectorAll(n),s=0,r=[];s<i.length;s++)!fs(i[s])&&!ps(i[s])&&!t.elementAnalyzer.isEdit(i[s])&&gs(i[s])&&r.push(i[s]);return r},vs=n=>{const{backgroundImageHolder:e,editClass:t,moduleClass:i,elementClass:s,allowDrop:r}=n.settings,o=n.root;for(var a=o.querySelectorAll("."+t+"."+e+", ."+t+" ."+e+", ."+t+'[style*="background-image"], .'+t+' [style*="background-image"]'),l=o.querySelectorAll("."+i+n.settings.unEditableModules.join(",."+i)),d=o.querySelectorAll("."+t),m=0,u=0,c=0;m<a.length;m++){var h=a[m];n.elementAnalyzer.isInEdit(h)&&(mw.tools.hasClass(h,i)||mw.tools.addClass(h,t),h.style.backgroundImage||(h.style.backgroundImage="none"))}for(;u<l.length;u++)l[m].classList.remove(i);for(;c<d.length;c++){for(var w=ws(":not(."+s+")",d[c],n),v=0,p=d[c].querySelectorAll("img,."+r),I=0;I<p.length;I++)p[I].classList.add(s);for(;v<w.length;v++)w[v].classList.contains(i)||n.elementAnalyzer.isInEdit(w[v])&&w[v].classList.add(s)}},ys=function(n){this.handles=n,this.dragging=!1;var e=this;this.get=function(t){return this.handles[t]},this.set=function(t,i){this.get(t).set(i)},this.hide=function(t){t&&this.handles[t]?this.handles[t].hide():this.each(function(i,s){s.hide()})},this.hideAllBut=function(t){this.each(function(i,s){i!==t&&s.hide()})},this.show=function(t){t&&this.handles[t]?this.handles[t].show():this.each(function(i,s){s.show()})},this.each=function(t){if(t){var i;for(i in this.handles)t.call(e,i,this.handles[i])}},this.targetIsSelected=function(t,i){if(t){t=t.target||t;var s;for(s in this.handles){if(i&&i===this.handles[s])continue;const r=this.handles[s].getTarget();if(r&&r===t)return!0}return!1}},this.targetIsOrInsideHandle=function(t){if(t){t=t.target||t;var i;for(i in this.handles)if(this.handles[i].wrapper.get(0)===t||this.handles[i].wrapper.get(0).contains(t))return!0;return!1}},this.init=function(){this.each(function(t,i){i.draggable.on("dragStart",function(){e.dragging=!0,e.hideAllBut(t)}),i.draggable.on("dragEnd",function(){e.dragging=!1,i.show()})})},this.init()},bs=function(n){n=n||{};const e={template:"default"};let t={};this.settings=A.extend({},e,n),this._indicator=null;const i={};this.on=function(l,d){i[l]?i[l].push(d):i[l]=[d]},this.dispatch=function(l,d){i[l]&&i[l].forEach(function(m){m.call(this,d)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,t={})},this.show=function(){console.log(this.visible),this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const s=["before-top","prepend-top","after-bottom","append-bottom"],r="mw-drop-indicator-position-",o=s.map(function(l){return r+l});let a=null;this.position=function(l,d){if(!(!l||!d)&&!(t.target===l&&t.position===d)){t.target=l,t.position=d,a!==d&&(this._indicator.removeClass(o),a=d,this._indicator.addClass(r+d));var m=C.offset(l);this._indicator.css({height:m.height,left:m.left,top:m.top,width:m.width}),this.show()}},this.make=function(){this._indicator=g(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},xs=(n,e,t)=>{!n||!e||(n=n.isMWElement?n.get(0):n,n.dataset.tooltip=e,n.title=e,n.dataset.tooltipposition=t||"top-center")},X=function(n){this.options=n||{};var e=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=g({props:{className:"mw-le-handle-menu",id:e.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=g({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var t,i,s,r=function(){t=g({props:{className:"mw-le-handle-menu-title"}}),i=g({props:{className:"mw-le-handle-menu-title-text"}}),s=g({props:{className:"mw-le-handle-menu-title-icon"}}),t.append(i),t.append(s),e.root.prepend(t),e.title=t},o=null;this.getTarget=function(){return o},this.setTarget=function(a){o=a;for(var l=0;l<this.buttons.length;l++)this.buttons[l].config.onTarget&&this.buttons[l].config.onTarget(a,this.buttons[l].button.get(0),e.options.rootScope)},this.setTitle=function(a,l){i.html(a||""),s.html(l||"")},this.buttons=[],this.buildButtons=function(a,l){l=l||this.buttonsHolder,a=a||this.options.buttons,a.forEach(function(d){l.append(e.button(d))})},this.button=function(a){var l=g({props:{className:"mw-le-handle-menu-button"+(a.className?" "+a.className:"")}}),d={props:{className:"mw-le-handle-menu-button-content"}},m=g(d);if(a.title&&xs(m,a.title),a.icon){var u=g({props:{className:"mw-le-handle-menu-button-icon",innerHTML:a.icon}});m.append(u)}if(a.text){var c=g({props:{className:"mw-le-handle-menu-button-text",innerHTML:a.text}});m.append(c)}if(l.append(m),this.buttons.push({button:l,config:a}),a.menu){var h=g({props:{className:"mw-le-handle-menu-button-sub-menu"}});l.append(h),e.buildButtons(a.menu,h),l.on("click",function(){this.classList.toggle("sub-menu-active")})}else typeof a.action=="function"&&l.on("click",function(){a.action(e.getTarget(),l.get(0))});return l},this.init=function(){this.create(),r(),this.setTitle(e.options.title,e.options.icon),this.buildButtons(),this.hide()},this.init()},Cs=(n,e)=>{const t=g({props:{className:"le-dialog-footer"}}),i=g({props:{className:"le-btn le-btn-primary le-dialog-footer-ok",innerHTML:n||"OK"}}),s=g({props:{className:"le-btn le-dialog-footer-cancel"}});return t.append(s),t.append(i),{ok:i,cancel:s,footer:t}};var D,G,Ie;class Pt{constructor(e){x(this,G);x(this,D,{});e=e||{};const t={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},t,e),this.build(),setTimeout(i=>this.open())}on(e,t){f(this,D)[e]?f(this,D)[e].push(t):f(this,D)[e]=[t]}dispatch(e,t){f(this,D)[e]&&f(this,D)[e].forEach(i=>{i.call(this,t)})}build(){this.root=g({props:{className:`le-dialog ${typeof this.settings.position=="string"?this.settings.position:""}`}});var e=g({props:{className:"le-dialog-close"}});e.on("click",()=>{this.remove()}),this.container=g({props:{className:"le-dialog-container"},content:this.settings.content}),this.root.append(e),this.root.append(this.container),this.settings.footer&&this.root.append(this.settings.footer.root||this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this.settings.closeOnEscape&&this.settings.document.addEventListener("keydown",H(this,G,Ie)),this.settings.overlay&&this.overlay()}open(){if(this.settings.position.nodeName&&this.settings.position.ownerDocument===this.settings.document){var e=this.settings.position;e.ownerDocument;var t=e.ownerDocument.defaultView,i=e.getBoundingClientRect(),s=i.top+t.scrollY,r=i.left+e.offsetWidth+t.scrollX,o=this.root.get(0);s+o.offsetHeight>t.innerHeight+t.scrollY&&(s-=s+o.offsetHeight-(t.innerHeight+t.scrollY)),r+o.offsetWidth>t.innerWidth&&(r-=r+o.offsetWidth-t.innerWidth),this.root.css({top:s,left:r,position:this.settings.mode})}this.root.addClass("le-dialog-opened")}remove(){this.root.on("transitionend",()=>{this.root.remove(),this.overlay&&this.overlay.remove()}),this.root.removeClass("le-dialog-opened"),this.settings.closeOnEscape&&this.settings.document.removeEventListener("keydown",H(this,G,Ie)),this.dispatch("close")}overlay(){this.overlay=g({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}D=new WeakMap,G=new WeakSet,Ie=function(e){(e.key==="Escape"||e.keyCode===27)&&this.remove()};const Vt=function(n,e){const t=Cs(),i=new Pt({content:n,footer:t.footer.get(0),position:"centered"});return t.cancel.on("click",function(){i.remove()}),t.ok.on("click",function(){e&&e.call(),i.remove()}),i},Ls=function(n){this.root=g({props:{id:"mw-handle-item-element-root"}});const e=[{title:"Duplicate",text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg>',className:"mw-handle-clone-button",onTarget:function(t,i){i.style.display=t.classList.contains("cloneable")?"":"none"},action:function(t){g(t).after(t.outerHTML)}},{title:"Move backward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20 13.5C20 17.09 17.09 20 13.5 20H6V18H13.5C16 18 18 16 18 13.5S16 9 13.5 9H7.83L10.91 12.09L9.5 13.5L4 8L9.5 2.5L10.92 3.91L7.83 7H13.5C17.09 7 20 9.91 20 13.5Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(t,i){const s=t.classList.contains("cloneable"),r=t.previousElementSibling;i.style.display=s&&r?"":"none"},action:function(t){const i=t.previousElementSibling;i&&(i.before(t),n.elementHandle.set(t))}},{title:"Move forward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M10.5 18H18V20H10.5C6.91 20 4 17.09 4 13.5S6.91 7 10.5 7H16.17L13.08 3.91L14.5 2.5L20 8L14.5 13.5L13.09 12.09L16.17 9H10.5C8 9 6 11 6 13.5S8 18 10.5 18Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(t,i){const s=t.classList.contains("cloneable"),r=t.nextElementSibling;i.style.display=s&&r?"":"none"},action:function(t){const i=t.nextElementSibling;i&&(i.after(t),n.elementHandle.set(t))}}];this.menu=new X({id:"mw-handle-item-element-menu",title:"Element",buttons:[{title:"Edit",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',className:"mw-handle-add-button",onTarget:function(t,i){},action:function(t){mw.app.editor.dispatch("editNodeRequest",t)}},{title:"Insert module",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z" /></svg>',className:"mw-handle-add-button",onTarget:function(t,i){},action:function(t){mw.app.editor.dispatch("insertModuleRequest",t)}},{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,i){},action:function(t){n.dialog({})}},...e,{title:n.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(t){Vt(g("<span>Are you sure</span>"),()=>{t.remove(),n.elementHandle.hide()})}}]}),this.menu.show(),this.root.append(this.menu.root)},Es=function(n){this.root=g({props:{id:"mw-handle-item-module-root",contentEditable:!1}});var e=new X({id:"mw-handle-item-element-menu-default",title:"Module",rootScope:n,buttons:[{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',action:()=>{const t=mw.app.get("liveEdit").handles.get("module").getTarget();mw.app.editor.dispatch("onModuleSettingsRequest",t);var i=t.dataset.type||t.getAttribute("type");i=i.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+i,t)},onTarget:function(t,i){t.classList.contains("no-settings")?i.style.display="none":i.style.display=""}}]});this.menu=new X({id:"mw-handle-item-element-menu",title:"Module",rootScope:n,buttons:[]}),this.menu.show(),e.show(),this.root.append(this.menu.root),this.root.append(e.root)},ks=function(n){this.root=g({props:{id:"mw-handle-item-layout-root"}});const e={};this.on=(t,i)=>{e[t]?e[t].push(i):e[t]=[i]},this.dispatch=(t,i)=>{e[t]&&e[t].forEach(s=>{s.call(this,i)})},this.menu=new X({id:"mw-handle-item-layout-menu",title:n.lang("Layout"),rootScope:n,buttons:[{title:n.lang("Settings"),text:"",icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 13.3 15.9" xml:space="preserve"><path d="M8.2,2.4L11,5.1l-8.2,8.2H0v-2.8L8.2,2.4z M11.8,4.3L9,1.6l1.4-1.4C10.5,0.1,10.7,0,10.9,0c0.2,0,0.4,0.1,0.5,0.2l1.7,1.7c0.1,0.1,0.2,0.3,0.2,0.5S13.3,2.8,13.1,3L11.8,4.3z"/><rect y="14.5" width="12" height="1.4"/></svg>',className:"mw-handle-insert-button",menu:[{title:n.lang("Add something"),text:n.lang("Add something"),icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" version="1.1" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button"},{title:n.lang("Settings1212"),text:"Do alert",className:"mw-handle-insert-button"}]},{title:n.lang("Clone"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>',className:"mw-handle-insert-button",action:function(t,i,s){var r=document.createElement("div");r.innerHTML=t.outerHTML,g("[id]",r).each(function(){this.id="le-id-"+new Date().getTime()}),g(t).after(r.innerHTML);var o=t.nextElementSibling;mw.reload_module(o,function(){s.statemanager.record({target:mw.tools.firstParentWithClass(t,"edit"),value:parent.innerHTML})}),o.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})}},{title:n.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,i){t.nextElementSibling===null?i.style.display="none":i.style.display=""},action:function(t,i){var s=t.nextElementSibling;if(s){var r=t.getBoundingClientRect(),o=s.getBoundingClientRect(),a=0;r.top<o.top&&(a=-(r.top-o.top)),t.classList.add("mw-le-target-to-animate"),s.classList.add("mw-le-target-to-animate"),t.style.transform="translateY("+a+"px)",s.style.transform="translateY("+-a+"px)",setTimeout(function(){s.parentNode.insertBefore(t,s.nextSibling),t.classList.remove("mw-le-target-to-animate"),s.classList.remove("mw-le-target-to-animate"),t.style.transform="",s.style.transform="",t.scrollIntoView({behavior:"smooth",block:"start",inline:"start"}),n.layoutHandle.set(t,!0)},300)}}},{title:n.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,i,s){t.previousElementSibling===null?i.style.display="none":i.style.display=""},action:function(t,i){var s=t.previousElementSibling;if(s){var r=t.getBoundingClientRect(),o=s.getBoundingClientRect(),a=0;r.top>o.top&&(a=-(r.top-o.top)),t.classList.add("mw-le-target-to-animate"),s.classList.add("mw-le-target-to-animate"),t.style.transform="translateY("+a+"px)",s.style.transform="translateY("+-a+"px)",setTimeout(function(){s.parentNode.insertBefore(t,s),t.classList.remove("mw-le-target-to-animate"),s.classList.remove("mw-le-target-to-animate"),t.style.transform="",s.style.transform="",n.layoutHandle.set(t,!0),t.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})},300)}}},{title:n.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path  d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(t,i,s){Vt("Are you sure",function(){t.remove()})}}]}),this.addButtons=function(){var t="Add Layout",i=s=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+s.charAt(0).toUpperCase()+s.slice(1))};this.plusTop=g({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:n.lang(t)}}),this.plusBottom=g({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:n.lang(t)}}),this.plusTop.on("click",function(){i("top")}),this.plusBottom.on("click",function(){i("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.menu.show(),this.addButtons(),this.root.append(this.menu.root)},bt={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},Ns=(n,e)=>((!e||!bt[e])&&(e="en"),bt[e][n]||n),Hs=function(n){this.root=g({props:{id:"mw-handle-interaction-item-element-root"}}),this.menu=new X({id:"mw-handle-item-element-menu",title:"Element",buttons:[]}),this.menu.show(),this.root.append(this.menu.root)};class Ts{constructor(e){const t=this,i={};this.on=(h,w)=>{i[h]?i[h].push(w):i[h]=[w]},this.dispatch=(h,w)=>{i[h]&&i[h].forEach(v=>{v.call(this,w)})},this.paused=!1;var s={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=A.extend({},s,e),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(h){return Ns(h,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new Bt(this.settings),this.dropIndicator=new bs(this.settings);const r=new Ls(this),o=new Es(this),a=new ks(this);this.elementHandleContent=r,this.moduleHandleContent=o,this.layoutHandleContent=a,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.dialog=function(h){h||(h={});var w={document:window.top.document,position:o.menu.getTarget(),mode:"absolute"};t.pause();const v=new Pt(A.extend({},w,h));return v.on("close",function(){t.play()}),v};var l=this.elementHandle=new ie({...this.settings,dropIndicator:this.dropIndicator,content:r.root,handle:g(".mw-handle-drag-button",r.root.get(0)),handle:"self",document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});this.isResizing=!1,l.resizer.on("resizeStart",h=>this.isResizing=!0),l.resizer.on("resizeStop",h=>this.isResizing=!1),l.on("targetChange",function(h){r.menu.setTarget(h),h.className.includes("col-")?l.resizer.disable():l.resizer.enable()}),this.moduleHandle=new ie({...this.settings,dropIndicator:this.dropIndicator,content:o.root,handle:o.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});var d=this.moduleHandle;this.getModuleQuickSettings=h=>new Promise(w=>{w(mw.quickSettings[h]),this.dispatch("moduleQuickSettings",{module:h})}),d.on("targetChange",function(h){t.getModuleQuickSettings(h.dataset.type).then(function(w){o.menu.root.remove(),o.menu=new X({id:"mw-handle-item-element-menu",title:h.dataset.type,rootScope:t,buttons:w?w.mainMenu||[]:[],data:{target:h}}),o.menu.setTarget(h),o.menu.show(),o.root.append(o.menu.root)})}),this.layoutHandle=new ie({...this.settings,dropIndicator:this.dropIndicator,content:a.root,handle:a.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var m=this.layoutHandle,u=t.lang("Layout");a.menu.setTitle(u),m.on("targetChange",function(h){a.menu.setTarget(h),a.menu.setTitle(u),t.elementAnalyzer.isEditOrInEdit(h)?(a.plusTop.show(),a.plusBottom.show()):(a.plusTop.hide(),a.plusBottom.hide())}),a.handle=m,o.handle=d,r.handle=l;const c=new Hs;this.interactionHandle=new ie({...this.settings,content:c.root,document:this.settings.document,resizable:!1,className:"mw-handle-item-interaction-handle"}),this.interactionHandle.menu=c.menu,this.handles=new ys({element:l,module:d,layout:m,interactionHandle:this.interactionHandle}),this.observe=new ms(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}init(){this.settings.mode==="auto"&&setInterval(()=>vs(this),1e3);const e=i=>{if(this.handles.targetIsOrInsideHandle(i))return;const s=this.observe.fromEvent(i);let r=s[0];if(r.nodeName!=="IMG"&&(r=C.firstBlockLevel(s[0])),this.handles.get("element").set(null),this.handles.hide(),r){const o=this.elementAnalyzer.getType(r);o&&o!=="edit"&&(this.handles.set(o,r),o==="element"?this.handles.hide("module"):o==="module"?this.handles.hide("element"):o==="layout"?this.handles.set("layout",layout):this.handles.hide())}else{const o=C.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);o&&this.handles.set("layout",o)}};let t;t="mousedown touchstart",g(this.root).on("mousemove",i=>{if(this.paused||this.isResizing){this.interactionHandle.hide();return}if(this.handles.targetIsOrInsideHandle(i)){this.interactionHandle.hide();return}const s=this.observe.fromEvent(i),r=C.firstParentOrCurrentWithAnyOfClasses(s[0],["element","module","cloneable"]),o=C.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);let a=!1;if(o){const d=this.handles.get("element").getTarget(),m=this.handles.get("module").getTarget();o.contains(d)&&(a=!0),o.contains(m)&&(a=!0),a?this.handles.hide("layout"):this.handles.set("layout",o)}if(r&&!this.handles.targetIsSelected(r,this.interactionHandle)&&!r.classList.contains("module-layouts")){var l="";r.dataset.mwTitle?l=r.dataset.mwTitle:r.dataset.type?l=r.dataset.type:r.nodeName==="P"?l=this.lang("Paragraph"):/(H[1-6])/.test(r.nodeName)?l=this.lang("Title")+" "+r.nodeName.replace(/^\D+/g,""):r.nodeName==="IMG"||r.nodeName==="IMAGE"?l=this.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(r.nodeName)?l=this.lang("Title "+r.nodeName.replace("H","")):["DIV","MAIN","SECTION"].includes(r.nodeName)?l=this.lang("Block"):l=this.lang("Text"),this.interactionHandle.menu.setTitle(l),this.interactionHandle.show(),this.interactionHandle.set(r)}else this.interactionHandle.hide()}),g(this.root).on(t,i=>{if(!this.paused)e(i);else{var s=this.elementHandle.getTarget();s&&!s.contains(i.target)&&this.play()}})}}globalThis.LiveEdit=Ts;const Ps=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:none}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:999;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:none}.mw-handle-item.mw-le-resizable{position:absolute}.mw-handle-item.mw-handle-item-interaction-handle{pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;pointer-events:none}.mw-draggable-helper .mw-element-is-dragged{opacity:1;pointer-events:none}.mw-le-handle-menu{position:absolute;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;border-radius:7px;border:1px solid transparent;padding:3px 12px;display:inline-flex;align-items:center;background-color:#fff;pointer-events:all;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;position:absolute;top:-40px;left:-3px;transition:.2s;opacity:0;transform:translateY(10px);z-index:2}.mw-le-handle-menu .mw-le-handle-menu-buttons:empty{display:none!important}.mw-le-handle-menu *{vertical-align:middle}.mw-handle-item.mw-handle-active .mw-le-handle-menu .mw-le-handle-menu-buttons{opacity:1;transform:translateY(0)}#mw-handle-item-element-menu{top:-22px;left:-3px}#mw-handle-item-layout-menu{top:5px;right:5px;left:auto}#mw-handle-item-layout-menu .mw-le-handle-menu-buttons{left:auto;right:5px;top:5px}#mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-drag-button{cursor:grab}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:none;align-items:center;justify-content:center;padding:0 5px;height:20px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:grab;background-color:#0078ff;color:#fff}.mw-handle-item-interaction-handle .mw-le-handle-menu-title{display:inline-flex}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#0078ff;color:#fff;border-radius:7px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#016ce6}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}.mw-handle-item-draggable-self{position:absolute;pointer-events:all;inset:0;z-index:10;display:none}.mw-handle-item-draggable-self.active{display:block}.mw-handle-item.mw-le-resizable .mw-le-resizer:before,.mw-handle-item.mw-le-resizable .mw-le-resizer:after{position:absolute;width:9px;height:9px;background-color:#fff;border:2px solid #2a84fb;content:""}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before{top:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{top:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{left:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before{bottom:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{bottom:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{top:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before{left:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{left:calc(50% - 4px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before{right:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{right:calc(50% - 5px)}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizable.mw-le-resizable-disabled .mw-le-resizer{display:none}.mw-le-resizer{position:absolute;pointer-events:all}.mw-le-resizer-r{cursor:e-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-l{cursor:e-resize;height:100%;left:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:n-resize;height:5px;left:0;width:100%}.mw-le-resizer-t{top:0;cursor:n-resize;height:5px;left:0;width:100%}mw-le-element{display:block;line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;font-family:Verdana,sans-serif;box-sizing:border-box}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}
`;var S,z,P,K,Be,Q,Re,ue,jt;class qt{constructor(e={}){x(this,K);x(this,Q);x(this,ue);x(this,S,null);x(this,z,{});E(this,"selectedCategory","");x(this,P,[]);E(this,"root",null);const t={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},t,e),this.document=this.settings.document}on(e,t){f(this,z)[e]?f(this,z)[e].push(t):f(this,z)[e]=[t]}dispatch(e,t){f(this,z)[e]&&f(this,z)[e].forEach(i=>{i.call(this,t)})}getData(){return f(this,S)}setData(e,t=!0){q(this,S,e);let i=0,s=f(this,S).length;for(;i<s;i++)typeof f(this,S)[i].categories=="string"&&(f(this,S)[i].categories=f(this,S)[i].categories.split(",").map(r=>r.trim()));t&&this.dispatch("dataChanged",f(this,S))}prepareCategories(){const e=[],t=this.getData();let i=0,s=t.length;for(;i<s;i++){let o=t[i].categories||"",a=0,l=o.length;for(;a<l;a++){const d=o[a].trim();e.indexOf(d)===-1&&e.push(d)}}e.sort(),this.categories=e}createCategoriesMenu(){const e=this.document.createElement("ul");this.prepareCategories(),e.className="modules-list-categories",e.innerHTML=this.categories.map(t=>`<li data-category="${t}">${t}</li>`).join(""),e.innerHTML=`<li data-category="">All categories</li> ${e.innerHTML}`,e.addEventListener("click",t=>{t.target.nodeName==="LI"&&this.selectCategory(t.target.dataset.category)}),this.categoriesNavigation=e,this.rootShadow.appendChild(e),this.on("categorySelect",t=>{const i=e.querySelectorAll("[data-category]");for(const s of i)s.classList[s.dataset.category===t?"add":"remove"]("active")})}selectCategory(e=""){this.selectedCategory=e,this.search(e),this.dispatch("categorySelect",e)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let e=document.createElement("style");e.textContent=this.settings.css,this.rootShadow.appendChild(e)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const e=this.getData();let t=0,i=e.length;const s={miscellaneous:H(this,Q,Re).call(this,"miscellaneous")};for(;t<i;t++)(e[t].categories||["miscellaneous"]).forEach(o=>{s[o]||(s[o]=H(this,Q,Re).call(this,o));const a=H(this,K,Be).call(this,e[t]);f(this,P).push(a),s[o].appendChild(a),s[o].__$hasNodes=!0});for(const r in s)s[r].__$hasNodes&&this.modulesList.appendChild(s[r]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const e=this.getData();let t=0,i=e.length;for(;t<i;t++){const s=H(this,K,Be).call(this,e[t]);f(this,P).push(s),this.modulesList.appendChild(s)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(e){e.nodeName&&(e.style.display="none")}showItem(e){e.nodeName&&(e.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",e=>this.search(void 0,this.searchField.value)),this.on("categorySelect",e=>{this.searchField.value=""})}async search(e="",t=""){if(this.settings.searchMode==="local")return H(this,ue,jt).call(this,e,t)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(e=>{e(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(e=>{e(this)})}}S=new WeakMap,z=new WeakMap,P=new WeakMap,K=new WeakSet,Be=function(e){e.locked=e.description.includes("a");const t=this.document.createElement("div");return t.className="modules-list-block-item modules-list-block-item-is-locked-"+e.locked,t.__$data=e,t.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${e.icon||e.screenshot||e.image})"></div>
            <div class="modules-list-block-item-title">${e.name||e.title}</div>
            <div class="modules-list-block-item-description">${e.description}</div>
            ${e.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,t.addEventListener("click",i=>{i.stopPropagation(),t.__$data.locked?this.dispatch("lockedModuleSelected",{data:e,element:t}):this.dispatch("moduleSelected",{data:e,element:t})}),t.$data=e,t},Q=new WeakSet,Re=function(e){const t=this.document.createElement("div");return t.className="modules-list-block-category-section",t.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+e+"</h5></div>",t.__$hasNodes=!1,t},ue=new WeakSet,jt=async function(e,t){return e&&(e=e.trim().toLowerCase()),t&&(t=t.trim().toLowerCase()),new Promise(i=>{let s=0,r=f(this,P).length,o=0;for(;s<r;s++){const a=f(this,P)[s],l=a.$data;if(e&&l.categories.indexOf(e)===-1){this.hideItem(a);continue}if(t&&(l.name||l.title).toLowerCase().indexOf(t)===-1){this.hideItem(a);continue}this.showItem(a),o++}console.log(t,e),this.modulesListNoResultsNode.style.display=o===0?"":"none",i()})};const ae=[],$t=function(n){ae.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+n}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",e=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(n){(n.key==="Escape"||n.keyCode===27)&&ae.length>0&&(ae[0].remove(),ae.splice(0,1))});var Pe,xt=function(n){var e=new qt({data:Pe});e.create().then(function(){var t=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),i=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),s=mw.element({props:{className:"mw-le-layouts-dialog-col"}});t.append(i),t.append(s),mw.element(e.root).append(t),i.append(e.searchBlock);var r=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});i.append(r),i.append(e.categoriesNavigation),s.append(e.modulesList),n.append(e.root)})};const Ss=()=>{var n=new $t("mw-le-layouts-dialog"),e=n.dialog;if(Pe){xt(e);return}mw.spinner({element:e.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(t){return t.json()}).then(function(t){Pe=t,xt(e),mw.spinner({element:e.get(0),decorate:!0}).remove()})};var Ve,Ct=function(n){var e=new qt({data:Ve});e.createCategorized().then(function(){n.append(e.root)})};const As=()=>{var n=new $t("mw-le-modules-dialog"),e=n.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var t=mw.$(this).attr("data-module-name"),i={class:this.className};t==="layout"&&(i.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,t,i,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),Ve?Ct(e):(mw.spinner({element:e.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(t){return t.json()}).then(function(t){Ve=t,Ct(e),mw.spinner({element:e.get(0),decorate:!0}).remove()}))},_s={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return As()},insertLayout:function(){return Ss()}},Ms={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await de.get(route("api.module.list")+"?layout_type=module").then(n=>{this.modulesListData=n.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(n){if(this.modulesSkinsData[n])return this.modulesSkinsData[n];if(await de.get(route("api.module.getSkins")+"?module="+n).then(e=>{this.modulesSkinsData[n]=e.data}),this.modulesSkinsData[n])return this.modulesSkinsData[n]}},Os={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await de.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(n=>{this.layoutsListData=n.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var n="layouts";if(this.layoutSkinsData[n])return this.layoutSkinsData[n];if(await de.get(route("api.module.getSkins")+"?module="+n).then(e=>{this.layoutSkinsData[n]=e.data}),this.layoutSkinsData[n])return this.layoutSkinsData[n]}};class Ds extends he{constructor(){super()}onRegister(){}}class zs extends he{selectIcon(e){var t=$(e)[0];mw.iconLoader().init();var i=mw.iconPicker({iconOptions:!1});i.target=document.createElement("i"),i.on("select",function(s){s.render(),t.value=i.target.outerHTML;var r=new Event("input");t.dispatchEvent(r),i.dialog("hide")}),i.dialog()}removeIcon(e){var t=$(e)[0];t.value="";var i=new Event("input");t.dispatchEvent(i)}}class Is extends he{constructor(){super()}selectLink(e){var t=new(mw.top()).LinkEditor({mode:"dialog",controllers:[{type:"url",config:{text:!1,target:!1}},{type:"page",config:{text:!1,target:!1}},{type:"post",config:{text:!1,target:!1}},{type:"file",config:{text:!1,target:!1}},{type:"email",config:{text:!1,target:!1}},{type:"layout",config:{text:!1,target:!1}}]});mw.$(e)&&t.setValue({url:mw.$(e).val()||""});var i=this;t.promise().then(function(s){if(s){var r={},o=s.url;r.url=o,s.data&&s.data.id&&(r.id=s.data.id,s.data.type&&s.data.type==="category"?r.type="category":(s.data.type&&s.data.type==="page"||s.data.content_type)&&(r.type="content")),i.dispatch("selected",r)}})}}mw.app=new Wt;mw.app.register("commands",_s);mw.app.register("modules",Ms);mw.app.register("layouts",Os);mw.app.register("keyboard",Ds);mw.app.register("iconPicker",zs);mw.app.register("linkPicker",Is);export{Rs as E,Ts as L,he as M,de as a,Ps as l};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLTJjMWY4ODhmLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy9hcGktY29yZS9zZXJ2aWNlcy9jb250YWluZXJzL2Jhc2UtY2xhc3MuanMiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy9hcGktY29yZS9zZXJ2aWNlcy9jb250YWluZXJzL2NvbnRhaW5lci5qcyIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL2FwaS1jb3JlL3NlcnZpY2VzL2NvbXBvbmVudHMvZWRpdG9yL2VkaXRvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL2FwaS1jb3JlL2NvcmUvY2xhc3Nlcy9vYmplY3Quc2VydmljZS5qcyIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL2FwaS1jb3JlL2NvcmUvY2xhc3Nlcy9lbGVtZW50LmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvY29yZS9jbGFzc2VzL2RvbS5qcyIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL2FwaS1jb3JlL2NvcmUvZWxlbWVudC1hbmFsaXplci5zZXJ2aWNlLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvY29yZS9hbmFsaXplci5qcyIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL2FwaS1jb3JlL2NvcmUvZHJvcC1wb3NpdGlvbi5qcyIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL2FwaS1jb3JlL2NvcmUvZHJhZ2dhYmxlLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvY29yZS9jbGFzc2VzL3Jlc2l6YWJsZS5qcyIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL2FwaS1jb3JlL2NvcmUvaGFuZGxlLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvY29yZS9wb2ludGVyLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvY29yZS9tb2RlLWF1dG8uanMiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy9hcGktY29yZS9jb3JlL2hhbmRsZXMuanMiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy9hcGktY29yZS9jb3JlL2ludGVyYWN0LmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvY29yZS90b29sdGlwLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvY29yZS9oYW5kbGUtbWVudS5qcyIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL2FwaS1jb3JlL2NvcmUvY2xhc3Nlcy9kaWFsb2cuanMiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy9hcGktY29yZS9jb3JlL2hhbmRsZXMtY29udGVudC9lbGVtZW50LmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvY29yZS9oYW5kbGVzLWNvbnRlbnQvbW9kdWxlLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvY29yZS9oYW5kbGVzLWNvbnRlbnQvbGF5b3V0LmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvY29yZS9pMThuLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvY29yZS9oYW5kbGVzLWNvbnRlbnQvaW50ZXJhY3Rpb24uanMiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy9hcGktY29yZS9jb3JlL0BsaXZlLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvY29yZS9sZTIvbW9kdWxlcy1saXN0LmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvc2VydmljZXMvc2VydmljZXMvY29tbWFuZHMtZGlhbG9nLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvc2VydmljZXMvc2VydmljZXMvbGF5b3V0LXNlbGVjdG9yLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvc2VydmljZXMvc2VydmljZXMvbW9kdWxlLXNlbGVjdG9yLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvc2VydmljZXMvc2VydmljZXMvY29tbWFuZHMuanMiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy9hcGktY29yZS9zZXJ2aWNlcy9zZXJ2aWNlcy9tb2R1bGVzLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvc2VydmljZXMvc2VydmljZXMvbGF5b3V0cy5qcyIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL2FwaS1jb3JlL3NlcnZpY2VzL3NlcnZpY2VzL2tleWJvYXJkLWV2ZW50cy5qcyIsIi4uLy4uLy4uL3NyYy9NaWNyb3dlYmVyUGFja2FnZXMvTGl2ZUVkaXQvcmVzb3VyY2VzL2pzL2FwaS1jb3JlL3NlcnZpY2VzL3NlcnZpY2VzL2ljb24tcGlja2VyLmpzIiwiLi4vLi4vLi4vc3JjL01pY3Jvd2ViZXJQYWNrYWdlcy9MaXZlRWRpdC9yZXNvdXJjZXMvanMvYXBpLWNvcmUvc2VydmljZXMvc2VydmljZXMvbGluay1waWNrZXIuanMiLCIuLi8uLi8uLi9zcmMvTWljcm93ZWJlclBhY2thZ2VzL0xpdmVFZGl0L3Jlc291cmNlcy9qcy9hcGktY29yZS9zZXJ2aWNlcy9ib290c3RyYXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgTWljcm93ZWJlckJhc2VDbGFzcyB7XHJcbiAgICAjZXZlbnRzID0ge307XHJcbiAgICBvbihlLCBmKSB7XHJcbiAgICAgICAgdGhpcy4jZXZlbnRzW2VdID8gdGhpcy4jZXZlbnRzW2VdLnB1c2goZikgOiAodGhpcy4jZXZlbnRzW2VdID0gW2ZdKVxyXG4gICAgfTtcclxuICAgIG9mZihlLCBmKSB7XHJcbiAgICAgICAgaWYoIXRoaXMuI2V2ZW50c1tlXSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHR5cGVvZiBmID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy4jZXZlbnRzW2VdLmluZGV4T2YoZik7XHJcbiAgICAgICAgICAgIGlmKGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuI2V2ZW50c1tlXS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2V2ZW50c1tlXSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZGlzcGF0Y2ggKGUsIGYpIHtcclxuICAgICAgICB0aGlzLiNldmVudHNbZV0gPyB0aGlzLiNldmVudHNbZV0uZm9yRWFjaChmdW5jdGlvbiAoYykge1xyXG4gICAgICAgICAgICBjLmNhbGwodGhpcywgZik7XHJcbiAgICAgICAgfSkgOiAnJztcclxuICAgIH07XHJcblxyXG4gICAgZW1pdCAoZSwgZikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKGUsIGYpXHJcbiAgICB9O1xyXG4gICAgXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1pY3Jvd2ViZXJCYXNlQ2xhc3M7IiwiaW1wb3J0IE1pY3Jvd2ViZXJCYXNlQ2xhc3MgZnJvbSBcIi4vYmFzZS1jbGFzcy5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1XVW5pdmVyc2FsQ29udGFpbmVyIGV4dGVuZHMgTWljcm93ZWJlckJhc2VDbGFzcyB7XHJcblxyXG4gICAgI21vZHVsZXMgPSB7fTtcclxuXHJcblxyXG4gICAgI3J1bihtZXRob2QsIGluc3RhbmNlLCBkYXRhKSB7XHJcbiAgICAgICAgaWYoIW1ldGhvZCB8fCAhaW5zdGFuY2UgfHwgIWluc3RhbmNlW21ldGhvZF0pICB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWV0aG9kID0gaW5zdGFuY2VbbWV0aG9kXTtcclxuICAgICAgICBtZXRob2QoZGF0YSk7IFxyXG4gICAgfVxyXG5cclxuICAgIGNhbGwobWV0aG9kLCBkYXRhKXtcclxuICAgICAgICBmb3IobGV0IGkgaW4gdGhpcy4jbW9kdWxlcykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy4jbW9kdWxlc1tpXVttZXRob2RdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNydW4obWV0aG9kLCB0aGlzLiNtb2R1bGVzW2ldLCBkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldChuYW1lKXtcclxuICAgICAgICByZXR1cm4gdGhpcy4jbW9kdWxlc1tuYW1lXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNb2R1bGVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNtb2R1bGVzO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyKG5hbWUsIGNsYXNzUmVmKSB7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlO1xyXG4gICAgICAgIGlmKHR5cGVvZiBjbGFzc1JlZiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBjbGFzc1JlZigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlID0gY2xhc3NSZWY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLiNtb2R1bGVzW25hbWVdID0gaW5zdGFuY2U7XHJcbiAgICAgICAgdGhpc1tuYW1lXSA9IGluc3RhbmNlO1xyXG4gICAgICAgIHRoaXMuI3J1bignb25SZWdpc3RlcicsIGluc3RhbmNlKTtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoKCdyZWdpc3RlcicpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZShpbnN0YW5jZSkge1xyXG4gICAgICAgIGxldCBuYW1lO1xyXG4gICAgICAgIGlmKHR5cGVvZiBpbnN0YW5jZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgbmFtZSA9IGluc3RhbmNlXHJcbiAgICAgICAgICAgIGluc3RhbmNlID0gdGhpcy5nZXQoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoIW5hbWUpIHtcclxuICAgICAgICAgICAgZm9yKGxldCBpIGluIHRoaXMuI21vZHVsZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLiNtb2R1bGVzW2ldID09PSBpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLiNtb2R1bGVzW25hbWVdO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xyXG4gICAgICAgIHRoaXMuI3J1bignb25EZXN0cm95JywgaW5zdGFuY2UpO1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2goJ3JlbW92ZScpO1xyXG4gICAgfVxyXG59XHJcbiIsIlxyXG5cclxubXcucmVxdWlyZSgnZWRpdG9yLmpzJyk7XHJcbm13LnJlcXVpcmUoJ2Nzc19wYXJzZXIuanMnKTtcclxuZXhwb3J0IGNvbnN0IEVkaXRvckNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBob2xkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXctbGl2ZS1lZGl0LWVkaXRvcicpO1xyXG5cclxuICAgIHZhciBfZm9udEZhbWlseVByb3ZpZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfZSA9IHt9O1xyXG4gICAgICAgIHRoaXMub24gPSBmdW5jdGlvbiAoZSwgZikge1xyXG4gICAgICAgICAgICBfZVtlXSA/IF9lW2VdLnB1c2goZikgOiAoX2VbZV0gPSBbZl0pXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoID0gZnVuY3Rpb24gKGUsIGYpIHtcclxuICAgICAgICAgICAgX2VbZV0gPyBfZVtlXS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgICAgICBjLmNhbGwodGhpcywgZik7XHJcbiAgICAgICAgICAgIH0pIDogJyc7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5wcm92aWRlID0gZnVuY3Rpb24gKGZvbnRzQXJyYXkpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCgnY2hhbmdlJywgZm9udHNBcnJheS5tYXAoZnVuY3Rpb24gKGZvbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGZvbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZvbnQsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgdmFyIGZvbnRGYW1pbHlQcm92aWRlciA9IG5ldyBfZm9udEZhbWlseVByb3ZpZGVyKCk7XHJcbiAgICB3aW5kb3cuZm9udEZhbWlseVByb3ZpZGVyID0gZm9udEZhbWlseVByb3ZpZGVyO1xyXG4gICAgY29uc3QgZnJhbWUgPSBtdy5hcHAuZ2V0KCdjYW52YXMnKS5nZXRGcmFtZSgpO1xyXG4gICAgZnJhbWUuY29udGVudFdpbmRvdy5mb250RmFtaWx5UHJvdmlkZXIgPSBmb250RmFtaWx5UHJvdmlkZXI7XHJcblxyXG5cclxuICAgIGNvbnN0IGVkaXRvckNvbnRyb2xzID0gW1xyXG4gICAgICAgIFtcclxuXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGdyb3VwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogJ21kaSBtZGktZm9ybWF0LXRpdGxlJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sczogWydmb3JtYXQnLCAnbGluZUhlaWdodCddXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBncm91cDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdib2xkJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sczogWydpdGFsaWMnLCAndW5kZXJsaW5lJywgJ3N0cmlrZVRocm91Z2gnLCAncmVtb3ZlRm9ybWF0J11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ2ZvbnRTZWxlY3RvcicsXHJcblxyXG4gICAgICAgICAgICAnZm9udFNpemUnLFxyXG5cclxuXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGdyb3VwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2FsaWduTGVmdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbHM6IFsnYWxpZ25MZWZ0JywgJ2FsaWduQ2VudGVyJywgJ2FsaWduUmlnaHQnLCAnYWxpZ25KdXN0aWZ5J11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGdyb3VwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VsJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sczogWydvbCddXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAgICAgJ2ltYWdlJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZ3JvdXA6IHtcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbGluaycsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbHM6IFsndW5saW5rJ11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZ3JvdXA6IHtcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndGV4dENvbG9yJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sczogWyd0ZXh0QmFja2dyb3VuZENvbG9yJ11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIF1cclxuICAgIF07XHJcblxyXG5cclxuICAgIGNvbnN0IGxpdmVFZGl0b3IgPSBtdy5FZGl0b3Ioe1xyXG4gICAgICAgIGRvY3VtZW50OiBmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50LFxyXG4gICAgICAgIGV4ZWN1dGlvbkRvY3VtZW50OiBmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50LFxyXG4gICAgICAgIGFjdGlvbldpbmRvdzogZnJhbWUuY29udGVudFdpbmRvdyxcclxuICAgICAgICBlbGVtZW50OiBob2xkZXIsXHJcbiAgICAgICAgbW9kZTogJ2RvY3VtZW50JyxcclxuICAgICAgICBub3RFZGl0YWJsZUNsYXNzZXM6IFsnbW9kdWxlJ10sXHJcbiAgICAgICAgcmVnaW9uczogJy5lZGl0JyxcclxuICAgICAgICBza2luOiAnbGUyJyxcclxuICAgICAgICBlZGl0TW9kZTogJ2xpdmVlZGl0JyxcclxuICAgICAgICBzY29wZUNvbG9yOiAnIzExMScsXHJcbiAgICAgICAgY29udHJvbHM6IGVkaXRvckNvbnRyb2xzLFxyXG4gICAgICAgIHNtYWxsRWRpdG9yOiBlZGl0b3JDb250cm9scyxcclxuICAgICAgICBcclxuICAgICAgICBzbWFsbEVkaXRvclBvc2l0aW9uWDogJ2NlbnRlcicsXHJcbiAgICAgICAgc21hbGxFZGl0b3JTa2luOiAnbGl0ZScsXHJcblxyXG4gICAgICAgIGludGVyYWN0aW9uQ29udHJvbHM6IFtdLFxyXG5cclxuICAgICAgICBpZDogJ2xpdmUtZWRpdC13eXNpd3lnLWVkaXRvcicsXHJcblxyXG4gICAgICAgIG1pbkhlaWdodDogMjUwLFxyXG4gICAgICAgIG1heEhlaWdodDogJzcwdmgnLFxyXG4gICAgICAgIHN0YXRlOiBtdy5saXZlRWRpdFN0YXRlLFxyXG5cclxuICAgICAgICBmb250RmFtaWx5UHJvdmlkZXI6IGZvbnRGYW1pbHlQcm92aWRlclxyXG4gICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICB2YXIgYnRuVW5kbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b29sYmFyLXVuZG8nKVxyXG4gICAgdmFyIGJ0blJlZG8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9vbGJhci1yZWRvJylcclxuXHJcbiAgICBsaXZlRWRpdG9yLnN0YXRlLm9uKCdyZWNvcmQnLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGJ0blJlZG8uZGlzYWJsZWQgPSAhbGl2ZUVkaXRvci5zdGF0ZS5oYXNQcmV2O1xyXG4gICAgICAgIGJ0blVuZG8uZGlzYWJsZWQgPSAhbGl2ZUVkaXRvci5zdGF0ZS5oYXNOZXh0O1xyXG4gICAgfSlcclxuICAgIGxpdmVFZGl0b3Iuc3RhdGUub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgYnRuUmVkby5kaXNhYmxlZCA9ICFsaXZlRWRpdG9yLnN0YXRlLmhhc1ByZXY7XHJcbiAgICAgICAgYnRuVW5kby5kaXNhYmxlZCA9ICFsaXZlRWRpdG9yLnN0YXRlLmhhc05leHQ7XHJcbiAgICB9KVxyXG5cclxuICAgIGlmIChidG5VbmRvKSB7XHJcbiAgICAgICAgYnRuVW5kby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGl2ZUVkaXRvci5zdGF0ZS51bmRvKClcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChidG5SZWRvKSB7XHJcbiAgICAgICAgYnRuUmVkby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGl2ZUVkaXRvci5zdGF0ZS5yZWRvKClcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiAgICAgICAgICAgICAgICBsaXZlRWRpdG9yLm9uKCdhY3Rpb24nLCBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXcud3lzaXd5Zy5jaGFuZ2UobGl2ZUVkaXRvci5hcGkuZWxlbWVudE5vZGUobGl2ZUVkaXRvci5hcGkuZ2V0U2VsZWN0aW9uKCkuZm9jdXNOb2RlKSlcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGxpdmVFZGl0b3Iub24oJ3NtYWxsRWRpdG9yUmVhZHknLCBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseVByb3ZpZGVyLnByb3ZpZGUobXcudG9wKCkud3lzaXd5Zy5mb250RmFtaWxpZXNFeHRlbmRlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAkKGxpdmVFZGl0b3IpLm9uKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbCA9IGxpdmVFZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbC5yYW5nZUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXZlRWRpdG9yLmxhc3RSYW5nZSA9ICBzZWwuZ2V0UmFuZ2VBdCgwKSA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXZlRWRpdG9yLmxhc3RSYW5nZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KSovXHJcblxyXG4gICAgaG9sZGVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgaG9sZGVyLmFwcGVuZENoaWxkKGxpdmVFZGl0b3Iud3JhcHBlcik7XHJcblxyXG5cclxuICAgIHZhciBtZW1QaW4gPSBsaXZlRWRpdG9yLnN0b3JhZ2UuZ2V0KGxpdmVFZGl0b3Iuc2V0dGluZ3MuaWQgKyAnLXNtYWxsLWVkaXRvci1waW5uZWQnKTtcclxuICAgIGlmICh0eXBlb2YgbWVtUGluID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbGl2ZUVkaXRvci5zbWFsbEVkaXRvckFwaSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBsaXZlRWRpdG9yLnNtYWxsRWRpdG9yQXBpLnBpbigpXHJcbiAgICB9XHJcbiAgICBtdy5hcHAucmVnaXN0ZXIoJ3JpY2hUZXh0RWRpdG9yJywgbGl2ZUVkaXRvcik7XHJcblxyXG4gICAgbXcuYXBwLnJlZ2lzdGVyKCdyaWNoVGV4dEVkaXRvckFQSScsIGxpdmVFZGl0b3IuYXBpKTtcclxufTtcclxuXHJcblxyXG5cclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIudHJpbSA/IHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWQsXG4gICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuICAgIHZhciByZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8ICByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCc7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIGNvbmZpZy50cmFuc2l0aW9uYWwgJiYgY29uZmlnLnRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gJ0VUSU1FRE9VVCcgOiAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXJlcXVlc3REYXRhKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vY29yZS9lbmhhbmNlRXJyb3InKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDoge1xuICAgIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICAgIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG4gIH0sXG5cbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSB8fCAoaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgdmFyIHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgZW5oYW5jZUVycm9yKGUsIHRoaXMsICdFX0pTT05fUEFSU0UnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb250ZXh0LCBkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eScsICdwYXJhbXMnXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAndGltZW91dE1lc3NhZ2UnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnZGVjb21wcmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAnbWF4Qm9keUxlbmd0aCcsICdtYXhSZWRpcmVjdHMnLCAndHJhbnNwb3J0JywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCcsICdyZXNwb25zZUVuY29kaW5nJ1xuICBdO1xuICB2YXIgZGlyZWN0TWVyZ2VLZXlzID0gWyd2YWxpZGF0ZVN0YXR1cyddO1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRpcmVjdE1lcmdlS2V5cywgZnVuY3Rpb24gbWVyZ2UocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKVxuICAgIC5jb25jYXQoZGlyZWN0TWVyZ2VLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMSlcbiAgICAuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHBrZyA9IHJlcXVpcmUoJy4vLi4vLi4vcGFja2FnZS5qc29uJyk7XG5cbnZhciB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaChmdW5jdGlvbih0eXBlLCBpKSB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG52YXIgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG52YXIgY3VycmVudFZlckFyciA9IHBrZy52ZXJzaW9uLnNwbGl0KCcuJyk7XG5cbi8qKlxuICogQ29tcGFyZSBwYWNrYWdlIHZlcnNpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSB0aGFuVmVyc2lvblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzT2xkZXJWZXJzaW9uKHZlcnNpb24sIHRoYW5WZXJzaW9uKSB7XG4gIHZhciBwa2dWZXJzaW9uQXJyID0gdGhhblZlcnNpb24gPyB0aGFuVmVyc2lvbi5zcGxpdCgnLicpIDogY3VycmVudFZlckFycjtcbiAgdmFyIGRlc3RWZXIgPSB2ZXJzaW9uLnNwbGl0KCcuJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgaWYgKHBrZ1ZlcnNpb25BcnJbaV0gPiBkZXN0VmVyW2ldKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHBrZ1ZlcnNpb25BcnJbaV0gPCBkZXN0VmVyW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICB2YXIgaXNEZXByZWNhdGVkID0gdmVyc2lvbiAmJiBpc09sZGVyVmVyc2lvbih2ZXJzaW9uKTtcblxuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgcGtnLnZlcnNpb24gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvcHQsIG9wdHMpIHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQgaW4gJyArIHZlcnNpb24pKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZXByZWNhdGVkICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc09sZGVyVmVyc2lvbjogaXNPbGRlclZlcnNpb24sXG4gIGFzc2VydE9wdGlvbnM6IGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnM6IHZhbGlkYXRvcnNcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG52YXIgdmFsaWRhdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy92YWxpZGF0b3InKTtcblxudmFyIHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsO1xuXG4gIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiwgJzEuMC4wJyksXG4gICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuLCAnMS4wLjAnKSxcbiAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiwgJzEuMC4wJylcbiAgICB9LCBmYWxzZSk7XG4gIH1cblxuICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gIHZhciByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB2YXIgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciBwcm9taXNlO1xuXG4gIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcblxuICAgIEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgY2hhaW4gPSBjaGFpbi5jb25jYXQocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcblxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cblxuICB2YXIgbmV3Q29uZmlnID0gY29uZmlnO1xuICB3aGlsZSAocmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgdmFyIG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB2YXIgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdHJ5IHtcbiAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG9uUmVqZWN0ZWQoZXJyb3IpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0KG5ld0NvbmZpZyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfVxuXG4gIHdoaWxlIChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsImV4cG9ydCBjbGFzcyBPYmplY3RTZXJ2aWNlIHtcclxuICAgIHN0YXRpYyBleHRlbmQgKCkge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuZGVkID0ge307XHJcbiAgICAgICAgbGV0IGRlZXAgPSBmYWxzZTtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgY29uc3QgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcblxyXG4gICAgICAgIGlmICggT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCBhcmd1bWVudHNbMF0gKSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nICkge1xyXG4gICAgICAgICAgICBkZWVwID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1lcmdlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICBmb3IgKCBjb25zdCBwcm9wIGluIG9iaiApIHtcclxuICAgICAgICAgICAgICAgIGlmICggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCBvYmosIHByb3AgKSApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIGRlZXAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9ialtwcm9wXSkgPT09ICdbb2JqZWN0IE9iamVjdF0nICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmRlZFtwcm9wXSA9IE9iamVjdFNlcnZpY2UuZXh0ZW5kKCB0cnVlLCBleHRlbmRlZFtwcm9wXSwgb2JqW3Byb3BdICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRbcHJvcF0gPSBvYmpbcHJvcF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgbWVyZ2Uob2JqKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZGVkO1xyXG5cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge09iamVjdFNlcnZpY2V9IGZyb20gXCIuL29iamVjdC5zZXJ2aWNlLmpzXCI7XHJcblxyXG5cclxuXHJcbiAgICB2YXIgTVdFbGVtZW50ID0gZnVuY3Rpb24ob3B0aW9ucywgcm9vdCl7XHJcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcztcclxuXHJcbiAgICAgICAgdGhpcy5pc01XRWxlbWVudCA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNzcygnZGlzcGxheScsIHRoaXMuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJyA/ICdibG9jaycgOiAnbm9uZScpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZXNbdGhpcy5ub2Rlcy5sZW5ndGggLSAxXTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmdldERvY3VtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlKCkub3duZXJEb2N1bWVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZ2V0V2luZG93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREb2N1bWVudCgpLmRlZmF1bHRWaWV3OztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24oc2VsZWN0b3IsIHNjb3BlKXtcclxuICAgICAgICAgICAgdGhpcy5ub2RlcyA9IChzY29wZSB8fCBkb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5lYWNoID0gZnVuY3Rpb24oY2Ipe1xyXG4gICAgICAgICAgICBpZih0aGlzLm5vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjYi5jYWxsKHRoaXMubm9kZXNbaV0sIGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYodGhpcy5ub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjYi5jYWxsKHRoaXMubm9kZSwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5lbmNhcHN1bGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNvbnRlbnRNYW5hZ2UgPSBmdW5jdGlvbiAoY29udGVudCwgc2NvcGUpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudC5mb3JFYWNoKGZ1bmN0aW9uIChlbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRNYW5hZ2UoZWwsIHNjb3BlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGVudCBpbnN0YW5jZW9mIE1XRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmFwcGVuZChjb250ZW50KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuYXBwZW5kKG5ldyBNV0VsZW1lbnQoY29udGVudCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGVsID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMuc2V0dGluZ3MudGFnKTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlID0gZWw7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmNhcHN1bGF0ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZGUgPSB0aGlzLnNldHRpbmdzLmVuY2Fwc3VsYXRlID09PSB0cnVlID8gJ29wZW4nIDogdGhpcy5zZXR0aW5ncy5lbmNhcHN1bGF0ZTtcclxuICAgICAgICAgICAgICAgIGVsLmF0dGFjaFNoYWRvdyh7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogbW9kZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5ub2RlcyA9IFtlbF07XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50TWFuYWdlKHRoaXMuc2V0dGluZ3MuY29udGVudCwgdGhpcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuX3NwZWNpYWxQcm9wcyA9IGZ1bmN0aW9uKGR0LCB2YWwpe1xyXG4gICAgICAgICAgICBpZihkdCA9PT0gJ3Rvb2x0aXAnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUuZGF0YXNldFtkdF0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuc2V0UHJvcHMgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBmb3IodmFyIGkgaW4gdGhpcy5zZXR0aW5ncy5wcm9wcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09ICdkYXRhc2V0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgZHQgaW4gdGhpcy5zZXR0aW5ncy5wcm9wc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGUuZGF0YXNldFtkdF0gPSB0aGlzLnNldHRpbmdzLnByb3BzW2ldW2R0XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09ICdzdHlsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIHN0IGluIHRoaXMuc2V0dGluZ3MucHJvcHNbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlLnN0eWxlW3N0XSA9IHRoaXMuc2V0dGluZ3MucHJvcHNbaV1bc3RdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IHRoaXMuc2V0dGluZ3MucHJvcHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMuX3NwZWNpYWxQcm9wcyhpLCB2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZVtpXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLl9fID0ge1xyXG4gICAgICAgICAgICBjc3NOdW1iZXI6IFtcclxuICAgICAgICAgICAgICAgICdhbmltYXRpb25JdGVyYXRpb25Db3VudCcsXHJcbiAgICAgICAgICAgICAgICAnY29sdW1uQ291bnQnLFxyXG4gICAgICAgICAgICAgICAgJ2ZpbGxPcGFjaXR5JyxcclxuICAgICAgICAgICAgICAgICdmbGV4R3JvdycsXHJcbiAgICAgICAgICAgICAgICAnZmxleFNocmluaycsXHJcbiAgICAgICAgICAgICAgICAnZm9udFdlaWdodCcsXHJcbiAgICAgICAgICAgICAgICAnZ3JpZEFyZWEnLFxyXG4gICAgICAgICAgICAgICAgJ2dyaWRDb2x1bW4nLFxyXG4gICAgICAgICAgICAgICAgJ2dyaWRDb2x1bW5FbmQnLFxyXG4gICAgICAgICAgICAgICAgJ2dyaWRDb2x1bW5TdGFydCcsXHJcbiAgICAgICAgICAgICAgICAnZ3JpZFJvdycsXHJcbiAgICAgICAgICAgICAgICAnZ3JpZFJvd0VuZCcsXHJcbiAgICAgICAgICAgICAgICAnZ3JpZFJvd1N0YXJ0JyxcclxuICAgICAgICAgICAgICAgICdsaW5lSGVpZ2h0JyxcclxuICAgICAgICAgICAgICAgICdvcGFjaXR5JyxcclxuICAgICAgICAgICAgICAgICdvcmRlcicsXHJcbiAgICAgICAgICAgICAgICAnb3JwaGFucycsXHJcbiAgICAgICAgICAgICAgICAnd2lkb3dzJyxcclxuICAgICAgICAgICAgICAgICd6SW5kZXgnLFxyXG4gICAgICAgICAgICAgICAgJ3pvb20nXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLl9ub3JtYWxpemVDU1NWYWx1ZSA9IGZ1bmN0aW9uIChwcm9wLCB2YWwpIHtcclxuICAgICAgICAgICAgaWYodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuX18uY3NzTnVtYmVyLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdmFsICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuY3NzID0gZnVuY3Rpb24oY3NzLCB2YWwpe1xyXG4gICAgICAgICAgICBpZih0eXBlb2YgY3NzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgaWYodHlwZW9mIHZhbCAhPT0gJ3VuZGVmaW5lZCcpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBudmFsID0gIHRoaXMuX25vcm1hbGl6ZUNTU1ZhbHVlKGNzcywgdmFsKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3R5bGVbY3NzXSA9IG52YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUodGhpcy5ub2RlKVtjc3NdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHR5cGVvZiBjc3MgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIGNzcykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3R5bGVbaV0gPSBzY29wZS5fbm9ybWFsaXplQ1NTVmFsdWUoaSwgY3NzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmRhdGFzZXQgPSBmdW5jdGlvbihwcm9wLCB2YWwpe1xyXG4gICAgICAgICAgICBpZih0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZSgpW3Byb3BdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YXNldFtwcm9wXSA9IHZhbDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuYXR0ciA9IGZ1bmN0aW9uKHByb3AsIHZhbCl7XHJcbiAgICAgICAgICAgIGlmKHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlKClbcHJvcF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMudmFsID0gZnVuY3Rpb24odmFsKXtcclxuICAgICAgICAgICAgaWYodHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmUoKS52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5wcm9wID0gZnVuY3Rpb24ocHJvcCwgdmFsKXtcclxuICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHRoaXMuX2FjdGl2ZSgpO1xyXG4gICAgICAgICAgICBpZih0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZVtwcm9wXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihhY3RpdmVbcHJvcF0gIT09IHZhbCl7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVbcHJvcF0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3Byb3BDaGFuZ2UnLCBbcHJvcCwgdmFsXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuc2hvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmZpbmQgPSBmdW5jdGlvbiAoc2VsKSB7XHJcbiAgICAgICAgICAgIHZhciBlbCA9IG13LmVsZW1lbnQoJyNyJyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcclxuICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgdmFyIGFsbCA9IHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWwpO1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGFsbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVsLm5vZGVzLmluZGV4T2YoYWxsW2ldKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwubm9kZXMucHVzaChhbGxbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBlbDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmFkZENsYXNzID0gZnVuY3Rpb24gKGNscykge1xyXG4gICAgICAgICAgICBjbHMgPSBjbHMudHJpbSgpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBjbHMuZm9yRWFjaChmdW5jdGlvbiAoc2luZ2xlQ2xhc3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZChzaW5nbGVDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMudG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbiAoY2xzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC50b2dnbGUoY2xzLnRyaW0oKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoY2xzKSB7XHJcbiAgICAgICAgICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShjbHMpO1xyXG4gICAgICAgICAgICBpZighaXNBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgY2xzID0gY2xzLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIHZhciBpc011bHRpcGxlID0gY2xzLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgICAgICBpZihpc011bHRpcGxlLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVDbGFzcyhpc011bHRpcGxlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IDAsIGwgPSBjbHMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoY2xzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5lbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHRtbCgnJyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5odG1sID0gZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmUoKS5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uICh2YWwsIGNsZWFuKSB7XHJcbiAgICAgICAgICAgIGlmKHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHR5cGVvZiBjbGVhbiA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFuID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2xlYW4pIHtcclxuICAgICAgICAgICAgICAgIHZhbCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQodmFsKS50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm5vZGUuaW5uZXJIVE1MID0gdmFsO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuX2FzZG9tID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KG9iaik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLm5vZGUpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iai5ub2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9iai5ub2Rlcyl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLm5vZGVzW29iai5ub2Rlcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLm9mZnNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGN1cnIgPSB0aGlzLl9hY3RpdmUoKTtcclxuICAgICAgICAgICAgdmFyIHdpbiA9IHRoaXMuZ2V0V2luZG93KCk7XHJcbiAgICAgICAgICAgIHZhciByZWN0ID0gY3Vyci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgcmVjdC5vZmZzZXRUb3AgPSByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldDtcclxuICAgICAgICAgICAgcmVjdC5vZmZzZXRCb3R0b20gPSByZWN0LmJvdHRvbSArIHdpbi5wYWdlWU9mZnNldDtcclxuICAgICAgICAgICAgcmVjdC5vZmZzZXRMZWZ0ID0gcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0O1xyXG4gICAgICAgICAgICByZXR1cm4gcmVjdDtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy53aWR0aCA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgaWYodmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jc3MoJ3dpZHRoJywgdmFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlKCkub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgIGlmKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3NzKCdoZWlnaHQnLCB2YWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmUoKS5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtdy5lbGVtZW50KHRoaXMuX2FjdGl2ZSgpLnBhcmVudE5vZGUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5wYXJlbnRzID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJyonO1xyXG4gICAgICAgICAgICB2YXIgZWwgPSB0aGlzLl9hY3RpdmUoKTtcclxuICAgICAgICAgICAgdmFyIGN1cnIgPSBlbC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB2YXIgcmVzID0gbXcuZWxlbWVudCgpO1xyXG4gICAgICAgICAgICByZXMubm9kZXMgPSBbXVxyXG4gICAgICAgICAgICB3aGlsZSAoY3Vycikge1xyXG4gICAgICAgICAgICAgICAgaWYoY3Vyci5tYXRjaGVzKHNlbGVjdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5ub2Rlcy5wdXNoKGN1cnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3VyciA9IGN1cnIucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5hcHBlbmQgPSBmdW5jdGlvbiAoZWwpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kKHNjb3BlLl9hc2RvbShlbCkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5iZWZvcmUgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgaWYgKGVsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5wYXJlbnROb2RlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY29wZS5fYXNkb20oZWwpLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmFmdGVyID0gZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgIGlmIChlbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNjb3BlLl9hc2RvbShlbCksIHRoaXMubmV4dFNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5wcmVwZW5kID0gZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgIGlmIChlbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlcGVuZChzY29wZS5fYXNkb20oZWwpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5fZGlzYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZGlzYWJsZWRcIiwge1xyXG4gICAgICAgICAgICBnZXQgOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kaXNhYmxlZDsgfSxcclxuICAgICAgICAgICAgc2V0IDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlZCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLmRpc2FibGVkID0gdGhpcy5fZGlzYWJsZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUuZGF0YXNldC5kaXNhYmxlZCA9IHRoaXMuX2Rpc2FibGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMudHJpZ2dlciA9IGZ1bmN0aW9uKGV2ZW50LCBkYXRhKXtcclxuICAgICAgICAgICAgZGF0YSA9IGRhdGEgfHwge307XHJcbiAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoZXZlbnQsIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICBpZihzY29wZS5fb25bZXZlbnRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuX29uW2V2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uKGNiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2IuY2FsbCh0aGlzLCBldmVudCwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmdldCA9IGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vZGVzW2ldO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMud3JhcCA9IGZ1bmN0aW9uICh3aGF0KSB7XHJcbiAgICAgICAgICAgIHZhciBuZXdFbCA9IERvbVF1ZXJ5KHdoYXQpO1xyXG4gICAgICAgICAgICB0aGlzLmJlZm9yZShuZXdFbClcclxuICAgICAgICAgICAgbmV3RWwuYXBwZW5kKHRoaXMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vbiA9IHt9O1xyXG4gICAgICAgIHRoaXMub24gPSBmdW5jdGlvbihldmVudHMsIGNiKXtcclxuICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLnRyaW0oKS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXYpIHtcclxuICAgICAgICAgICAgICAgIGlmKCFzY29wZS5fb25bZXZdKSB7ICBzY29wZS5fb25bZXZdID0gW107IH1cclxuICAgICAgICAgICAgICAgIHNjb3BlLl9vbltldl0ucHVzaChjYik7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5lYWNoKGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8qdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2LCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiLmNhbGwoc2NvcGUsIGUsIGUuZGV0YWlsLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7Ki9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXYsIGNiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5pbml0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdGhpcy5ub2RlcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QgPSByb290IHx8IGRvY3VtZW50O1xyXG4gICAgICAgICAgICBpZih0aGlzLnJvb3QgaW5zdGFuY2VvZiBNV0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9vdCA9IHRoaXMucm9vdC5nZXQoMClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9hc0VsZW1lbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudCA9ICAodGhpcy5yb290LmJvZHkgPyB0aGlzLnJvb3QgOiB0aGlzLnJvb3Qub3duZXJEb2N1bWVudCk7XHJcblxyXG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgICAgICAgICAgIGlmKG9wdGlvbnMubm9kZU5hbWUgJiYgb3B0aW9ucy5ub2RlVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlcy5wdXNoKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlID0gKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXNFbGVtZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgaWYob3B0aW9ucy5pbmRleE9mKCc8JykgPT09IC0xKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLnJvb3QucXVlcnlTZWxlY3RvckFsbChvcHRpb25zKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FzRWxlbWVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYodGhpcy5zZXR0aW5ncyAmJiB0aGlzLnNldHRpbmdzLmNvbnRlbnQgaW5zdGFuY2VvZiBNV0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZCh0aGlzLnNldHRpbmdzLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgfSAgZWxzZSBpZih0aGlzLnNldHRpbmdzICYmIHR5cGVvZiB0aGlzLnNldHRpbmdzLmNvbnRlbnQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQobmV3IE1XRWxlbWVudCh0aGlzLnNldHRpbmdzLmNvbnRlbnQpKTtcclxuICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSB0aGlzLl9hc2RvbShvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlcyA9IFtdLnNsaWNlLmNhbGwoZWwuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FzRWxlbWVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICAgICAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgICAgICAgdGFnOiAnZGl2JyxcclxuICAgICAgICAgICAgICAgIHByb3BzOiB7fVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdFNlcnZpY2UuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLl9hc0VsZW1lbnQpIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRQcm9wcygpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9O1xyXG5jb25zdCBEb21RdWVyeSA9IGZ1bmN0aW9uKG9wdGlvbnMsIHJvb3Qpe1xyXG4gICAgcmV0dXJuIG5ldyBNV0VsZW1lbnQob3B0aW9ucywgcm9vdCk7XHJcbn07XHJcbkRvbVF1ZXJ5Lm1vZHVsZSA9IGZ1bmN0aW9uIChuYW1lLCBmdW5jKSB7XHJcbiAgICBNV0VsZW1lbnQucHJvdG90eXBlW25hbWVdID0gZnVuYztcclxufTtcclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IG5vZGVOYW1lID0gJ213LWxlLWVsZW1lbnQnO1xyXG5pZiAod2luZG93LmN1c3RvbUVsZW1lbnRzICYmICFjdXN0b21FbGVtZW50cy5nZXQobm9kZU5hbWUpKSB7XHJcbiAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoIG5vZGVOYW1lLFxyXG4gICAgICAgIGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICApO1xyXG59XHJcbmV4cG9ydCBjb25zdCBFbGVtZW50TWFuYWdlciA9IChjb25maWcsIHJvb3QpID0+IHtcclxuICAgIGlmIChjb25maWcgaW5zdGFuY2VvZiBPYmplY3QgJiYgIWNvbmZpZy5ub2RlVHlwZSkge1xyXG4gICAgICAgIGNvbmZpZyA9IE9iamVjdFNlcnZpY2UuZXh0ZW5kKHt9LCBjb25maWcgfHwge30sIHsgdGFnOiBjb25maWcudGFnIHx8IG5vZGVOYW1lIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIERvbVF1ZXJ5KGNvbmZpZywgcm9vdClcclxufVxyXG4iLCJcclxubGV0IG1hdGNoZXM7XHJcbmNvbnN0IGVsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5pZighIWVsLm1hdGNoZXMpIG1hdGNoZXMgPSAnbWF0Y2hlcyc7XHJcbmVsc2UgaWYgKCEhZWwubWF0Y2hlc1NlbGVjdG9yKSBtYXRjaGVzID0gJ21hdGNoZXNTZWxlY3Rvcic7XHJcbmVsc2UgaWYgKCEhZWwubW96TWF0Y2hlc1NlbGVjdG9yKSBtYXRjaGVzID0gJ21vek1hdGNoZXNTZWxlY3Rvcic7XHJcbmVsc2UgaWYgKCEhZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSBtYXRjaGVzID0gJ3dlYmtpdE1hdGNoZXNTZWxlY3Rvcic7XHJcblxyXG5leHBvcnQgY2xhc3MgRG9tU2VydmljZSB7XHJcbiAgICBzdGF0aWMgX2lzQmxvY2tDYWNoZSA9IHt9O1xyXG4gICAgc3RhdGljIF9mcmFnbWVudDtcclxuXHJcbiAgICBzdGF0aWMgZnJhZ21lbnQgKCl7XHJcbiAgICAgICAgaWYoIXRoaXMuX2ZyYWdtZW50KXtcclxuICAgICAgICAgICAgdGhpcy5fZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgdGhpcy5fZnJhZ21lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFnbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYWdtZW50LnN0eWxlLndpZHRoID0gJzFweCc7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYWdtZW50LnN0eWxlLmhlaWdodCA9ICcxcHgnO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2ZyYWdtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZyYWdtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBtYXRjaGVzKG5vZGUsIHNlbGVjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGVbbWF0Y2hlc10oc2VsZWN0b3IpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN0YXRpYyBpc0Jsb2NrTGV2ZWwgKG5vZGUpe1xyXG4gICAgICAgIGlmKCFub2RlIHx8IG5vZGUubm9kZVR5cGUgPT09IDMpe1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuYW1lID0gbm9kZS5ub2RlTmFtZTtcclxuICAgICAgICAgaWYodHlwZW9mIHRoaXMuX2lzQmxvY2tDYWNoZVtuYW1lXSAhPT0gJ3VuZGVmaW5lZCcpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNCbG9ja0NhY2hlW25hbWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdGVzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XHJcbiAgICAgICAgdGhpcy5mcmFnbWVudCgpLmFwcGVuZENoaWxkKHRlc3QpO1xyXG4gICAgICAgIHRoaXMuX2lzQmxvY2tDYWNoZVtuYW1lXSA9IGdldENvbXB1dGVkU3R5bGUodGVzdCkuZGlzcGxheSA9PT0gJ2Jsb2NrJztcclxuICAgICAgICB0aGlzLmZyYWdtZW50KCkucmVtb3ZlQ2hpbGQodGVzdCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQmxvY2tDYWNoZVtuYW1lXTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZmlyc3RCbG9ja0xldmVsIChlbCkge1xyXG4gICAgICAgIHdoaWxlKGVsICYmIGVsLmNsYXNzTGlzdCkge1xyXG4gICAgICAgICAgICBpZih0aGlzLmlzQmxvY2tMZXZlbChlbCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmaXJzdFdpdGhCYWNrZ3JvdW5kSW1hZ2UgKG5vZGUpIHtcclxuICAgICAgICBpZiAoIW5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlKG5vZGUgJiYgbm9kZS5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XHJcbiAgICAgICAgICAgIGlmICghIW5vZGUuc3R5bGUuYmFja2dyb3VuZEltYWdlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaGFzQW55T2ZDbGFzc2VzT25Ob2RlT3JQYXJlbnQobm9kZSwgYXJyKSB7XHJcbiAgICAgICAgd2hpbGUgKG5vZGUgJiYgbm9kZS5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XHJcbiAgICAgICAgICAgIGxldCBpID0gMCwgbCA9IGFyci5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAoIDsgaSA8IGwgOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5jbGFzc0xpc3QuY29udGFpbnMoYXJyW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaGFzUGFyZW50c1dpdGhDbGFzcyAoZWwsIGNscykge1xyXG4gICAgICAgIGlmICghZWwpIHJldHVybjtcclxuICAgICAgICB2YXIgY3VyciA9IGVsLnBhcmVudE5vZGU7XHJcbiAgICAgICAgd2hpbGUgKGN1cnIgJiYgY3Vyci5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XHJcbiAgICAgICAgICAgIGlmIChjdXJyLmNsYXNzTGlzdC5jb250YWlucyhjbHMpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyID0gY3Vyci5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGhhc1BhcmVudFdpdGhJZCAoZWwsIGlkKSB7XHJcbiAgICAgICAgaWYgKCFlbCkgcmV0dXJuO1xyXG4gICAgICAgIHZhciBjdXJyID0gZWwucGFyZW50Tm9kZTtcclxuICAgICAgICB3aGlsZSAoY3VyciAmJiBjdXJyLm5vZGVOYW1lICE9PSAnQk9EWScpIHtcclxuICAgICAgICAgICAgaWYgKGN1cnIuaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyID0gY3Vyci5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZpcnN0V2l0aEF5T2ZDbGFzc2VzT25Ob2RlT3JQYXJlbnQobm9kZSwgYXJyKSB7XHJcbiAgICAgICAgd2hpbGUgKG5vZGUgJiYgbm9kZS5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XHJcbiAgICAgICAgICAgIGxldCBpID0gMCwgbCA9IGFyci5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAoIDsgaSA8IGwgOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5jbGFzc0xpc3QuY29udGFpbnMoYXJyW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmaXJzdFBhcmVudE9yQ3VycmVudFdpdGhUYWcgKGVsLCB0YWcpIHtcclxuICAgICAgICBpZiAoIWVsIHx8ICF0YWcpIHJldHVybjtcclxuICAgICAgICB0YWcgPSB0eXBlb2YgdGFnICE9PSAnc3RyaW5nJyA/IHRhZyA6IFt0YWddO1xyXG4gICAgICAgIHZhciBjdXJyID0gZWw7XHJcbiAgICAgICAgd2hpbGUgKGN1cnIgJiYgY3Vyci5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XHJcbiAgICAgICAgICAgIGlmICh0YWcuaW5kZXhPZihjdXJyLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VyciA9IGN1cnIucGFyZW50Tm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpbmRleChlbCwgcGFyZW50LCBzZWxlY3Rvcikge1xyXG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHBhcmVudCA9IHBhcmVudCB8fCBlbC5wYXJlbnROb2RlO1xyXG4gICAgICAgIHZhciBhbGw7XHJcbiAgICAgICAgaWYgKHBhcmVudC5jb25zdHJ1Y3RvciA9PT0gW10uY29uc3RydWN0b3IpIHtcclxuICAgICAgICAgICAgYWxsID0gcGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWxsID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpID0gMCwgbCA9IGFsbC5sZW5ndGg7XHJcbiAgICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGVsID09PSBhbGxbaV0pIHJldHVybiBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZmlyc3RQYXJlbnRPckN1cnJlbnRXaXRoQ2xhc3MgKGVsLCBjbHMpIHtcclxuICAgICAgICBpZiAoIWVsKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFyIGN1cnIgPSBlbDtcclxuICAgICAgICB3aGlsZSAoY3VyciAmJiBjdXJyLm5vZGVOYW1lICE9PSAnQk9EWScpIHtcclxuICAgICAgICAgICAgaWYgKGN1cnIuY2xhc3NMaXN0LmNvbnRhaW5zKGNscykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnIgPSBjdXJyLnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBmaXJzdFBhcmVudE9yQ3VycmVudCAoZWwsIHNlbGVjdG9yKSB7XHJcbiAgICAgICAgaWYgKCFlbCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHZhciBjdXJyID0gZWw7XHJcbiAgICAgICAgd2hpbGUgKGN1cnIgJiYgY3Vyci5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XHJcbiAgICAgICAgICAgIGlmIChjdXJyLm1hdGNoZXMoc2VsZWN0b3IpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyID0gY3Vyci5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZpcnN0UGFyZW50T3JDdXJyZW50V2l0aEFueU9mQ2xhc3NlcyAobm9kZSwgYXJyKSB7XHJcbiAgICAgICAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFyIGN1cnIgPSBub2RlO1xyXG4gICAgICAgIHdoaWxlIChjdXJyICYmIGN1cnIubm9kZU5hbWUgIT09ICdCT0RZJykge1xyXG4gICAgICAgICAgICBpZiAoIWN1cnIpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzQW55T2ZDbGFzc2VzKGN1cnIsIGFycikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnIgPSBjdXJyLnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcGFyZW50c09yQ3VycmVudE9yZGVyTWF0Y2hPck9ubHlGaXJzdCAobm9kZSwgYXJyKSB7XHJcbiAgICAgICAgbGV0IGN1cnIgPSBub2RlO1xyXG4gICAgICAgIHdoaWxlIChjdXJyICYmIGN1cnIubm9kZU5hbWUgIT09ICdCT0RZJykge1xyXG4gICAgICAgICAgICBjb25zdCBoMSA9IGN1cnIuY2xhc3NMaXN0LmNvbnRhaW5zKGFyclswXSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGgyID0gY3Vyci5jbGFzc0xpc3QuY29udGFpbnMoYXJyWzFdKTtcclxuICAgICAgICAgICAgaWYgKGgxICYmIGgyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGgyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnIgPSBjdXJyLnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcGFyZW50c09yQ3VycmVudE9yZGVyTWF0Y2hPck9ubHlGaXJzdE9yTm9uZSAobm9kZSwgYXJyKSB7XHJcbiAgICAgICAgbGV0IGN1cnIgPSBub2RlO1xyXG4gICAgICAgIHdoaWxlIChjdXJyICYmIGN1cnIubm9kZU5hbWUgIT09ICdCT0RZJykge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaDEgPSBjdXJyLmNsYXNzTGlzdC5jb250YWlucyhhcnJbMF0pO1xyXG4gICAgICAgICAgICBjb25zdCBoMiA9IGN1cnIuY2xhc3NMaXN0LmNvbnRhaW5zKGFyclsxXSk7XHJcbiAgICAgICAgICAgIGlmIChoMSAmJiBoMikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGgxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGgyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnIgPSBjdXJyLnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBoYXNBbnlPZkNsYXNzZXMgKG5vZGUsIGFycikge1xyXG4gICAgICAgIGlmICghbm9kZSkgcmV0dXJuO1xyXG4gICAgICAgIGxldCBpID0gMCwgbCA9IGFyci5sZW5ndGg7XHJcbiAgICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKGFycltpXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgb2Zmc2V0IChub2RlKSB7XHJcbiAgICAgICAgaWYoIW5vZGUpIHJldHVybjtcclxuICAgICAgICB2YXIgb2ZmID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB2YXIgcmVzID0ge3RvcDogb2ZmLnRvcCAsIGxlZnQ6IG9mZi5sZWZ0LCB3aWR0aDogb2ZmLndpZHRoLCBoZWlnaHQ6IG9mZi5oZWlnaHQsIGJvdHRvbTogb2ZmLmJvdHRvbSwgcmlnaHQ6IG9mZi5yaWdodH07O1xyXG4gICAgICAgIHJlcy50b3AgKz0gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LnNjcm9sbFk7XHJcbiAgICAgICAgcmVzLmJvdHRvbSArPSBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuc2Nyb2xsWTtcclxuICAgICAgICByZXMubGVmdCArPSBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuc2Nyb2xsWDtcclxuICAgICAgICByZXMucmlnaHQgKz0gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LnNjcm9sbFg7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHN0YXRpYyBwYXJlbnRzT3JkZXIgKG5vZGUsIGFycikge1xyXG4gICAgICAgIHZhciBvbmx5X2ZpcnN0ID0gW107XHJcbiAgICAgICAgdmFyIG9iaiA9IHt9LCBsID0gYXJyLmxlbmd0aCwgaSA9IDAsIGNvdW50ID0gLTE7XHJcbiAgICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgb2JqW2FycltpXV0gPSAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFub2RlKSByZXR1cm4gb2JqO1xyXG5cclxuICAgICAgICB2YXIgY3VyciA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICB3aGlsZSAoY3VyciAmJiBjdXJyLm5vZGVOYW1lICE9PSAnQk9EWScpIHtcclxuICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoIDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnIuY2xhc3NMaXN0LmNvbnRhaW5zKGFycltpXSkgJiYgb25seV9maXJzdC5pbmRleE9mKGFycltpXSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqW2FycltpXV0gPSBjb3VudDtcclxuICAgICAgICAgICAgICAgICAgICBvbmx5X2ZpcnN0LnB1c2goYXJyW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyID0gY3Vyci5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuIiwiXHJcbmltcG9ydCB7RG9tU2VydmljZX0gZnJvbSAnLi9jbGFzc2VzL2RvbS5qcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRWxlbWVudEFuYWx5emVyU2VydmljZUJhc2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzKSB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgICAgIHRoaXMudG9vbHMgPSBEb21TZXJ2aWNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzUm93IChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuc2V0dGluZ3Mucm93Q2xhc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzTW9kdWxlIChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuc2V0dGluZ3MubW9kdWxlQ2xhc3MpICYmIG5vZGUuZGF0YXNldC50eXBlICE9PSAnbGF5b3V0cyc7XHJcbiAgICB9XHJcblxyXG4gICAgaXNMYXlvdXQgKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QuY29udGFpbnModGhpcy5zZXR0aW5ncy5tb2R1bGVDbGFzcykgJiYgbm9kZS5kYXRhc2V0LnR5cGUgPT09ICdsYXlvdXRzJztcclxuICAgIH1cclxuXHJcbiAgICBpc0luTGF5b3V0IChub2RlKSB7XHJcbiAgICAgICAgaWYoIW5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgIHdoaWxlKG5vZGUgJiYgbm9kZSAhPT0gdGhpcy5zZXR0aW5ncy5kb2N1bWVudC5ib2R5KSB7XHJcbiAgICAgICAgICAgIGlmKG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuc2V0dGluZ3MubW9kdWxlQ2xhc3MpICYmIG5vZGUuZGF0YXNldC50eXBlID09PSAnbGF5b3V0cycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGVcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbGVtZW50IChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuc2V0dGluZ3MuZWxlbWVudENsYXNzKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0VtcHR5RWxlbWVudCAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiBub2RlLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLnNldHRpbmdzLmVtcHR5RWxlbWVudENsYXNzKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0VkaXQgKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QuY29udGFpbnModGhpcy5zZXR0aW5ncy5lZGl0Q2xhc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzSW5FZGl0IChub2RlKSB7XHJcbiAgICAgICAgdmFyIG9yZGVyID0gW1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmVkaXRDbGFzcyxcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5tb2R1bGVDbGFzcyxcclxuICAgICAgICBdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xzLnBhcmVudHNPckN1cnJlbnRPcmRlck1hdGNoT3JPbmx5Rmlyc3Qobm9kZS5wYXJlbnROb2RlLCBvcmRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgaXNFZGl0T3JJbkVkaXQgKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0VkaXQobm9kZSkgfHwgdGhpcy5pc0luRWRpdChub2RlKTtcclxuICAgIH1cclxuXHJcbiAgICBpc1BsYWluVGV4dCAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiBub2RlLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLnNldHRpbmdzLnBsYWluRWxlbWVudENsYXNzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUeXBlKG5vZGUpIHtcclxuICAgICAgICBpZih0aGlzLmlzRWRpdChub2RlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2VkaXQnO1xyXG4gICAgICAgIH0gZWxzZSBpZih0aGlzLmlzRWxlbWVudChub2RlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2VsZW1lbnQnO1xyXG4gICAgICAgIH0gZWxzZSBpZih0aGlzLmlzTW9kdWxlKG5vZGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnbW9kdWxlJztcclxuICAgICAgICB9ICBlbHNlIGlmKHRoaXMuaXNMYXlvdXQobm9kZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdsYXlvdXQnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge0VsZW1lbnRBbmFseXplclNlcnZpY2VCYXNlfSBmcm9tICcuL2VsZW1lbnQtYW5hbGl6ZXIuc2VydmljZS5qcydcclxuXHJcbmV4cG9ydCBjbGFzcyBEcm9wcGFibGVFbGVtZW50QW5hbHl6ZXJTZXJ2aWNlIGV4dGVuZHMgRWxlbWVudEFuYWx5emVyU2VydmljZUJhc2UgIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncykge1xyXG4gICAgICAgIHN1cGVyKHNldHRpbmdzKTtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5fdGFnc0NhbkFjY2VwdCA9IFsnRElWJywgJ0FSVElDTEUnLCAnQVNJREUnLCAnRk9PVEVSJywgJ0hFQURFUicsICdNQUlOJywgJ1NFQ1RJT04nLCAnREQnLCAnTEknLCAnVEQnLCAnRk9STScsICdERCddO1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQ29uZmlndXJhYmxlICh0YXJnZXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0VsZW1lbnQodGFyZ2V0KSB8fCB0aGlzLmlzTW9kdWxlKHRhcmdldCkgfHwgdGhpcy5pc1Jvdyh0YXJnZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRWRpdGFibGVMYXlvdXQgKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aGlzLmlzTGF5b3V0KG5vZGUpICYmIHRoaXMuaXNJbkVkaXQobm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuTW92ZU1vZHVsZSAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzTW9kdWxlKG5vZGUpICYmIHRoaXMuaXNJbkVkaXQobm9kZSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNhbkFjY2VwdEJ5Q2xhc3MgKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b29scy5oYXNBbnlPZkNsYXNzZXMobm9kZSwgdGhpcy5kcm9wYWJsZUVsZW1lbnRzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbkFjY2VwdEJ5VGFnIChub2RlKSB7XHJcbiAgICAgICAgaWYoIW5vZGUgfHwgbm9kZS5ub2RlVHlwZSAhPT0gMSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90YWdzQ2FuQWNjZXB0LmluZGV4T2Yobm9kZS5ub2RlTmFtZSkgIT09IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIGFsbG93RHJvcCAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xzLnBhcmVudHNPckN1cnJlbnRPcmRlck1hdGNoT3JPbmx5Rmlyc3RPck5vbmUobm9kZSwgW3RoaXMuc2V0dGluZ3MuYWxsb3dEcm9wLCB0aGlzLnNldHRpbmdzLm5vZHJvcF0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbkluc2VydEJlZm9yZU9yQWZ0ZXIgKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYW5BY2NlcHQobm9kZS5wYXJlbnROb2RlKTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5BY2NlcHQgKHRhcmdldCkge1xyXG4gICAgICAgIC8vIHdoZXRoZXIgb3Igbm90IFwidGFyZ2V0XCIgY2FuIGFjY2VwdCBlbGVtZW50c1xyXG4gICAgICAgIHJldHVybiAhIShcclxuICAgICAgICAgICAgdGhpcy5jYW5BY2NlcHRCeUNsYXNzKHRhcmdldCkgJiZcclxuICAgICAgICAgICAgdGhpcy5pc0VkaXRPckluRWRpdCh0YXJnZXQpICYmXHJcbiAgICAgICAgICAgIHRoaXMuYWxsb3dEcm9wKHRhcmdldCkpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBjYW5SZWNlaXZlRWxlbWVudHModGFyZ2V0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNFZGl0KHRhcmdldCkgJiYgdGhpcy5jYW5BY2NlcHRCeVRhZyh0YXJnZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGRyb3BhYmxlRWxlbWVudHMgKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Ryb3BhYmxlRWxlbWVudHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SXRlcmFjdGlvblRhcmdldChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG9vbHMuZmlyc3RXaXRoQXlPZkNsYXNzZXNPbk5vZGVPclBhcmVudChub2RlLCBbXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuZWxlbWVudENsYXNzLFxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmVkaXRDbGFzcyxcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5tb2R1bGVDbGFzcyxcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUYXJnZXQgKG5vZGUsIGRyYWdnZWRFbGVtZW50KSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuZ2V0SXRlcmFjdGlvblRhcmdldChub2RlKTtcclxuICAgICAgICBpZighdGFyZ2V0IHx8ICF0aGlzLmlzRWRpdE9ySW5FZGl0KG5vZGUpIHx8ICF0aGlzLmFsbG93RHJvcChub2RlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0ge1xyXG4gICAgICAgICAgICB0YXJnZXQsXHJcbiAgICAgICAgICAgIGNhbkluc2VydDogZmFsc2UsXHJcbiAgICAgICAgICAgIGJlZm9yZUFmdGVyOiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGRyYWdnZWRFbGVtZW50SXNMYXlvdXRSZXN0cmljdGVkID0gdGhpcy5zZXR0aW5ncy5zdHJpY3RMYXlvdXRzICYmIHRoaXMuaXNMYXlvdXQoZHJhZ2dlZEVsZW1lbnQpO1xyXG4gICAgICAgIHZhciBpc1N0cmljdENhc2UgPSB0aGlzLnNldHRpbmdzLnN0cmljdCAmJiAhdGhpcy5pc0xheW91dChkcmFnZ2VkRWxlbWVudCkgJiYgIXRoaXMuaXNJbkxheW91dCh0YXJnZXQpO1xyXG5cclxuICAgICAgICBpZihpc1N0cmljdENhc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0VkaXQodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICByZXMuY2FuSW5zZXJ0ID0gIWRyYWdnZWRFbGVtZW50SXNMYXlvdXRSZXN0cmljdGVkO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIHRoaXMuaXNFbGVtZW50KHRhcmdldCkgJiYgIWRyYWdnZWRFbGVtZW50SXNMYXlvdXRSZXN0cmljdGVkICApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2FuQWNjZXB0QnlUYWcodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgcmVzLmNhbkluc2VydCA9ICFkcmFnZ2VkRWxlbWVudElzTGF5b3V0UmVzdHJpY3RlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXMuYmVmb3JlQWZ0ZXIgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZih0aGlzLmlzTW9kdWxlKHRhcmdldCkgJiYgIWRyYWdnZWRFbGVtZW50SXNMYXlvdXRSZXN0cmljdGVkKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuY2FuSW5zZXJ0QmVmb3JlT3JBZnRlcih0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXMuYmVmb3JlQWZ0ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYodGhpcy5pc0xheW91dCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuY2FuSW5zZXJ0QmVmb3JlT3JBZnRlcih0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgcmVzLmJlZm9yZUFmdGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCAoKSB7XHJcbiAgICAgICAgdGhpcy5fZHJvcGFibGVFbGVtZW50cyA9IFtcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5lbGVtZW50Q2xhc3MsXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuY2xvbmVhYmxlQ2xhc3MsXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuZWRpdENsYXNzLFxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLm1vZHVsZUNsYXNzLFxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmNvbENsYXNzLFxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmFsbG93RHJvcCxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwiaW1wb3J0IHtEb21TZXJ2aWNlfSBmcm9tICcuL2NsYXNzZXMvZG9tLmpzJztcclxuXHJcblxyXG5sZXQgcHJldlkgPSAtMTtcclxubGV0IHByZXYgPSBudWxsO1xyXG5cclxuZXhwb3J0IGNvbnN0IERyb3BQb3NpdGlvbiA9IChlLCBjb25mKSA9PiB7XHJcbiAgICBpZighZSB8fCAhY29uZikge1xyXG4gICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gICAgY29uc3QgdGFyZ2V0ID0gY29uZi50YXJnZXQ7XHJcbiAgICBpZiggIXRhcmdldCB8fCB0YXJnZXQubm9kZVR5cGUgIT09IDEpIHJldHVybiBmYWxzZTtcclxuICAgIGNvbnN0IHggPSBlLnBhZ2VYO1xyXG4gICAgY29uc3QgeSA9IGUucGFnZVk7XHJcblxyXG4gICAgLypcclxuICAgICogIGNvbmYgeyBjYW5JbnNlcnQ6IGJvb2xlYW4sICBiZWZvcmVBZnRlcjogYm9vbGVhbiB9XHJcbiAgICAqICovXHJcblxyXG5cclxuICAgIC8vICBpZih4JTIgIT09IDApIHJldHVybiBmYWxzZTtcclxuICAgIGNvbnN0IHJlY3QgPSBEb21TZXJ2aWNlLm9mZnNldCh0YXJnZXQpO1xyXG4gICAgY29uc3QgcmVzID0ge307XHJcbiAgICBjb25zdCBkaXN0YW5jZSA9IDE1O1xyXG4gICAgaWYoIHByZXZZICA9PT0geSB8fCAhY29uZiB8fCAoIWNvbmYuY2FuSW5zZXJ0ICYmICFjb25mLmJlZm9yZUFmdGVyKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYoY29uZi5jYW5JbnNlcnQgJiYgY29uZi5iZWZvcmVBZnRlcikge1xyXG4gICAgICAgIGlmICh5ID49IChyZWN0LnRvcCAtIGRpc3RhbmNlKSAmJiB5IDw9IChyZWN0LnRvcCArIGRpc3RhbmNlKSkge1xyXG4gICAgICAgICAgICByZXMucG9zaXRpb24gPSAndG9wJztcclxuICAgICAgICAgICAgcmVzLmFjdGlvbiA9ICdiZWZvcmUnO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIHkgPj0gKHJlY3QudG9wICsgZGlzdGFuY2UpICYmIHkgPD0gKHJlY3QudG9wICArIChyZWN0LmhlaWdodC8yKSkpIHtcclxuICAgICAgICAgICAgcmVzLnBvc2l0aW9uID0gJ3RvcCc7XHJcbiAgICAgICAgICAgIHJlcy5hY3Rpb24gPSAncHJlcGVuZCc7XHJcbiAgICAgICAgfSBlbHNlIGlmICggeSA+PSAocmVjdC50b3AgKyAocmVjdC5oZWlnaHQvMikpICYmIHkgPD0gKHJlY3QuYm90dG9tIC0gZGlzdGFuY2UpKSB7XHJcbiAgICAgICAgICAgIHJlcy5wb3NpdGlvbiA9ICdib3R0b20nO1xyXG4gICAgICAgICAgICByZXMuYWN0aW9uID0gJ2FwcGVuZCc7XHJcbiAgICAgICAgfSAgZWxzZSBpZiAoIHkgPj0gKHJlY3QudG9wICsgKHJlY3QuaGVpZ2h0LzIpKSAmJiB5ID49IChyZWN0LmJvdHRvbSAtIGRpc3RhbmNlKSkge1xyXG4gICAgICAgICAgICByZXMucG9zaXRpb24gPSAnYm90dG9tJztcclxuICAgICAgICAgICAgcmVzLmFjdGlvbiA9ICdhZnRlcic7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZihjb25mLmJlZm9yZUFmdGVyKSB7XHJcbiAgICAgICAgaWYgKCB5ID49IChyZWN0LnRvcCAtIGRpc3RhbmNlKSAmJiB5IDw9IChyZWN0LnRvcCAgKyAocmVjdC5oZWlnaHQvMikpKSB7XHJcbiAgICAgICAgICAgIHJlcy5wb3NpdGlvbiA9ICd0b3AnO1xyXG4gICAgICAgICAgICByZXMuYWN0aW9uID0gJ2JlZm9yZSc7XHJcbiAgICAgICAgfSBlbHNlIGlmICggeSA+PSAocmVjdC50b3AgKyAocmVjdC5oZWlnaHQvMikpICYmIHkgPD0gKHJlY3QuYm90dG9tICsgZGlzdGFuY2UpKSB7XHJcbiAgICAgICAgICAgIHJlcy5wb3NpdGlvbiA9ICdib3R0b20nO1xyXG4gICAgICAgICAgICByZXMuYWN0aW9uID0gJ2FmdGVyJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSAgZWxzZSBpZihjb25mLmNhbkluc2VydCkge1xyXG4gICAgICAgIGlmICggeSA+PSAocmVjdC50b3AgLSBkaXN0YW5jZSkgJiYgeSA8PSAocmVjdC50b3AgICsgKHJlY3QuaGVpZ2h0LzIpKSkge1xyXG4gICAgICAgICAgICByZXMucG9zaXRpb24gPSAndG9wJztcclxuICAgICAgICAgICAgcmVzLmFjdGlvbiA9ICdwcmVwZW5kJztcclxuICAgICAgICB9IGVsc2UgaWYgKCB5ID49IChyZWN0LnRvcCArIChyZWN0LmhlaWdodC8yKSkgJiYgeSA8PSAocmVjdC5ib3R0b20gKyBkaXN0YW5jZSkpIHtcclxuICAgICAgICAgICAgcmVzLnBvc2l0aW9uID0gJ2JvdHRvbSc7XHJcbiAgICAgICAgICAgIHJlcy5hY3Rpb24gPSAnYXBwZW5kJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXNcclxufTtcclxuIiwiXHJcbmltcG9ydCB7T2JqZWN0U2VydmljZX0gZnJvbSAnLi9jbGFzc2VzL29iamVjdC5zZXJ2aWNlLmpzJztcclxuaW1wb3J0IHtEcm9wcGFibGVFbGVtZW50QW5hbHl6ZXJTZXJ2aWNlfSBmcm9tIFwiLi9hbmFsaXplci5qc1wiO1xyXG5pbXBvcnQge0Ryb3BQb3NpdGlvbn0gZnJvbSBcIi4vZHJvcC1wb3NpdGlvbi5qc1wiO1xyXG5pbXBvcnQge0VsZW1lbnRNYW5hZ2VyfSBmcm9tIFwiLi9jbGFzc2VzL2VsZW1lbnQuanNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBEcmFnZ2FibGUgPSBmdW5jdGlvbiAob3B0aW9ucywgcm9vdFNldHRpbmdzKSB7XHJcbiAgICB2YXIgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgaGFuZGxlOiBudWxsLFxyXG4gICAgICAgIGVsZW1lbnQ6IG51bGwsXHJcbiAgICAgICAgZG9jdW1lbnQ6IGRvY3VtZW50LFxyXG4gICAgICAgIGhlbHBlcjogdHJ1ZVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc2NvcGUgPSB0aGlzO1xyXG5cclxuICAgIHZhciBfZSA9IHt9O1xyXG5cclxuICAgIHRoaXMub24gPSBmdW5jdGlvbiAoZSwgZikgeyBfZVtlXSA/IF9lW2VdLnB1c2goZikgOiAoX2VbZV0gPSBbZl0pIH07XHJcbiAgICB0aGlzLmRpc3BhdGNoID0gZnVuY3Rpb24gKGUsIGYpIHsgX2VbZV0gPyBfZVtlXS5mb3JFYWNoKGZ1bmN0aW9uIChjKXsgYy5jYWxsKHRoaXMsIGYpOyB9KSA6ICcnOyB9O1xyXG5cclxuICAgIHZhciBzdG9wID0gdHJ1ZTtcclxuXHJcbiAgICB2YXIgc2Nyb2xsID0gZnVuY3Rpb24gKHN0ZXApIHtcclxuICAgICAgICBzY29wZS5zZXR0aW5ncy5kb2N1bWVudC5ib2R5LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gJ3Ntb290aCc7XHJcbiAgICAgICAgc2NvcGUuc2V0dGluZ3MuZG9jdW1lbnQuZGVmYXVsdFZpZXcuc2Nyb2xsVG8oMCxzY29wZS5zZXR0aW5ncy5kb2N1bWVudC5kZWZhdWx0Vmlldy5zY3JvbGxZICsgc3RlcCk7XHJcbiAgICAgICAgc2NvcGUuc2V0dGluZ3MuZG9jdW1lbnQuYm9keS5zdHlsZS5zY3JvbGxCZWhhdmlvciA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY29uZmlnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3RTZXJ2aWNlLmV4dGVuZCh7fSwgZGVmYXVsdHMsIG9wdGlvbnMpO1xyXG4gICAgICAgIGlmKCF0aGlzLnNldHRpbmdzLnRhcmdldCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLnRhcmdldCA9IHRoaXMuc2V0dGluZ3MuZG9jdW1lbnQuYm9keTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50KHRoaXMuc2V0dGluZ3MuZWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5kcm9wSW5kaWNhdG9yID0gdGhpcy5zZXR0aW5ncy5kcm9wSW5kaWNhdG9yO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0RWxlbWVudCA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gRWxlbWVudE1hbmFnZXIobm9kZSkvKi5wcm9wKCdkcmFnZ2FibGUnLCB0cnVlKSovLmdldCgwKTtcclxuICAgICAgICBpZighdGhpcy5zZXR0aW5ncy5oYW5kbGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5oYW5kbGUgPSB0aGlzLnNldHRpbmdzLmVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGFuZGxlID0gdGhpcy5zZXR0aW5ncy5oYW5kbGU7XHJcbiAgICAgICAgdGhpcy5oYW5kbGUuYXR0cignZHJhZ2dhYmxlJywgJ3RydWUnKVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNldFRhcmdldHMgPSBmdW5jdGlvbiAodGFyZ2V0cykge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0cyA9IEVsZW1lbnRNYW5hZ2VyKHRhcmdldHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmFkZFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICB0aGlzLnRhcmdldHMucHVzaCh0YXJnZXQpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWcoKTtcclxuICAgICAgICB0aGlzLmRyYWdnYWJsZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLiRkYXRhID0ge31cclxuXHJcbiAgICB0aGlzLmhlbHBlciA9IGZ1bmN0aW9uIChlLCBldmVudCkge1xyXG4gICAgICAgIGlmKCF0aGlzLl9oZWxwZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5faGVscGVyID0gRWxlbWVudE1hbmFnZXIoKS5nZXQoMCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlbHBlci5jbGFzc05hbWUgPSAnbXctZHJhZ2dhYmxlLWhlbHBlcic7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9oZWxwZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZSA9PT0gJ2NyZWF0ZScpIHtcclxuICAgICAgICAgICAgdmFyIG9mZiA9IEVsZW1lbnRNYW5hZ2VyKCBzY29wZS5lbGVtZW50ICkub2Zmc2V0KClcclxuICAgICAgICAgICAgdGhpcy4kZGF0YS5fY2FsY01pbnVzID0ge1xyXG4gICAgICAgICAgICAgICAgeTogKGV2ZW50LnBhZ2VZIC0gb2ZmLm9mZnNldFRvcCksXHJcbiAgICAgICAgICAgICAgICB4OiAoZXZlbnQucGFnZVggLSBvZmYub2Zmc2V0TGVmdCksXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5faGVscGVyLnN0eWxlLnRvcCA9IGUucGFnZVkgKyAncHgnO1xyXG4gICAgICAgICAgICB0aGlzLl9oZWxwZXIuc3R5bGUubGVmdCA9IGUucGFnZVggKyAncHgnO1xyXG4gICAgICAgICAgICB0aGlzLl9oZWxwZXIuc3R5bGUud2lkdGggPSBzY29wZS5lbGVtZW50Lm9mZnNldFdpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5faGVscGVyLnN0eWxlLmhlaWdodCA9IHNjb3BlLmVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbGUtZHJhZ2dpbmcnKVxyXG4gICAgICAgICAgICB0aGlzLl9oZWxwZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgfSBlbHNlIGlmKGUgPT09ICdyZW1vdmUnICYmIHRoaXMuX2hlbHBlcikge1xyXG4gICAgICAgICAgICB0aGlzLl9oZWxwZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnbGUtZHJhZ2dpbmcnKVxyXG4gICAgICAgIH0gZWxzZSBpZih0aGlzLnNldHRpbmdzLmhlbHBlciAmJiBlKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLl9oZWxwZXIuc3R5bGUudG9wID0gKGUucGFnZVkgLSAgdGhpcy4kZGF0YS5fY2FsY01pbnVzLnkpICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5faGVscGVyLnN0eWxlLmxlZnQgPSAoZS5wYWdlWCAtICB0aGlzLiRkYXRhLl9jYWxjTWludXMueCkgKyAncHgnO1xyXG4gICAgICAgICAgICAvLyB0aGlzLl9oZWxwZXIuc3R5bGUubWF4V2lkdGggPSAoc2NvcGUuc2V0dGluZ3MuZG9jdW1lbnQuZGVmYXVsdFZpZXcuaW5uZXJXaWR0aCAtIGUucGFnZVggLSA0MCkgKyAncHgnO1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdsZS1kcmFnZ2luZycpXHJcbiAgICAgICAgfVxyXG4gICAgICAgICBcclxuICAgICAgICB0aGlzLl9oZWxwZXIuaW5uZXJIVE1MID0gIHNjb3BlLmVsZW1lbnQub3V0ZXJIVE1MO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9oZWxwZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgdGhpcy5kcm9wYWJsZVNlcnZpY2UgPSBuZXcgRHJvcHBhYmxlRWxlbWVudEFuYWx5emVyU2VydmljZShyb290U2V0dGluZ3MpO1xyXG5cclxuICAgIHRoaXMuZHJvcFBvc2l0aW9uID0gRHJvcFBvc2l0aW9uO1xyXG5cclxuICAgIHRoaXMuZHJhZ2dhYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICBFbGVtZW50TWFuYWdlcih0aGlzLnNldHRpbmdzLnRhcmdldCkub24oJ2RyYWdsZWF2ZScsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmKHNjb3BlLmRyb3BJbmRpY2F0b3IpIHNjb3BlLmRyb3BJbmRpY2F0b3IuaGlkZSgpO1xyXG4gICAgICAgICB9KVxyXG4gICAgICAgICBFbGVtZW50TWFuYWdlcih0aGlzLnNldHRpbmdzLnRhcmdldCkub24oJ2RyYWdvdmVyJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgIHNjb3BlLnRhcmdldCA9IG51bGw7XHJcbiAgICAgICAgICAgICBzY29wZS5hY3Rpb24gPSBudWxsO1xyXG4gICAgICAgICAgICAgaWYoZS50YXJnZXQgIT09IHNjb3BlLmVsZW1lbnQgfHwgIXNjb3BlLmVsZW1lbnQuY29udGFpbnMoZS50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEFjdGlvbiA9IHNjb3BlLmRyb3BhYmxlU2VydmljZS5nZXRUYXJnZXQoZS50YXJnZXQsIHNjb3BlLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0QWN0aW9uICYmIHRhcmdldEFjdGlvbiAhPT0gc2NvcGUuZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSBzY29wZS5kcm9wUG9zaXRpb24oZSwgdGFyZ2V0QWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmKHBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudGFyZ2V0ID0gdGFyZ2V0QWN0aW9uLnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmFjdGlvbiA9IHBvcy5hY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZihzY29wZS5kcm9wSW5kaWNhdG9yKSBzY29wZS5kcm9wSW5kaWNhdG9yLnBvc2l0aW9uKHNjb3BlLnRhcmdldCwgcG9zLmFjdGlvbiArICctJyArIHBvcy5wb3NpdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzY29wZS5kcm9wSW5kaWNhdG9yKSBzY29wZS5kcm9wSW5kaWNhdG9yLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihzY29wZS5kcm9wSW5kaWNhdG9yKSBzY29wZS5kcm9wSW5kaWNhdG9yLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgaWYgKHNjb3BlLmlzRHJhZ2dpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgc2NvcGUuZGlzcGF0Y2goJ2RyYWdPdmVyJywge2VsZW1lbnQ6IHNjb3BlLmVsZW1lbnQsIGV2ZW50OiBlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgfSkub24oJ2Ryb3AnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoc2NvcGUuaXNEcmFnZ2luZykge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlLnRhcmdldCAmJiBzY29wZS5hY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBFbGVtZW50TWFuYWdlcihzY29wZS50YXJnZXQpW3Njb3BlLmFjdGlvbl0oc2NvcGUuZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihzY29wZS5kcm9wSW5kaWNhdG9yKSBzY29wZS5kcm9wSW5kaWNhdG9yLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIHNjb3BlLmRpc3BhdGNoKCdkcm9wJywge2VsZW1lbnQ6IHNjb3BlLmVsZW1lbnQsIGV2ZW50OiBlfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoc2NvcGUuZHJvcEluZGljYXRvcikgc2NvcGUuZHJvcEluZGljYXRvci5oaWRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICB0aGlzLmhhbmRsZVxyXG4gICAgICAgICAgICAub24oJ2RyYWdzdGFydCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5pc0RyYWdnaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICghc2NvcGUuZWxlbWVudC5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmVsZW1lbnQuaWQgPSAoJ213LWVsZW1lbnQtJyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICBzY29wZS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ213LWVsZW1lbnQtaXMtZHJhZ2dlZCcpO1xyXG4gICAgICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YShcInRleHRcIiwgc2NvcGUuZWxlbWVudC5pZCk7XHJcbiAgICAgICAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gXCJtb3ZlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgc2NvcGUuaGVscGVyKCdjcmVhdGUnLCBlKTtcclxuICAgICAgICAgICAgICAgIHNjb3BlLmRpc3BhdGNoKCdkcmFnU3RhcnQnLHtlbGVtZW50OiBzY29wZS5lbGVtZW50LCBldmVudDogZX0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAub24oJ2RyYWcnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjcmxTdHAgPSA5MDtcclxuICAgICAgICAgICAgICAgIHZhciBzdGVwID0gNTtcclxuICAgICAgICAgICAgICAgIGlmIChlLmNsaWVudFkgPCBzY3JsU3RwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsKC1zdGVwKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUuY2xpZW50WSA+IChpbm5lckhlaWdodCAtIChzY3JsU3RwICsgKCB0aGlzLl9oZWxwZXIgPyB0aGlzLl9oZWxwZXIub2Zmc2V0SGVpZ2h0ICsgMTAgOiAwKSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsKHN0ZXApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gXCJjb3B5XCI7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5kaXNwYXRjaCgnZHJhZycse2VsZW1lbnQ6IHNjb3BlLmVsZW1lbnQsIGV2ZW50OiBlfSk7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5oZWxwZXIoZSlcclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5vbignZHJhZ2VuZCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5pc0RyYWdnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ213LWVsZW1lbnQtaXMtZHJhZ2dlZCcpO1xyXG4gICAgICAgICAgICAgICAgc2NvcGUuaGVscGVyKCdyZW1vdmUnKTtcclxuICAgICAgICAgICAgICAgIHNjb3BlLmRpc3BhdGNoKCdkcmFnRW5kJyx7ZWxlbWVudDogc2NvcGUuZWxlbWVudCwgZXZlbnQ6IGV9KTtcclxuICAgICAgICAgICAgICAgIHN0b3AgPSB0cnVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICB0aGlzLmluaXQoKTtcclxufTtcclxuIiwiZXhwb3J0IGNsYXNzIFJlc2l6YWJsZSAge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xyXG5cclxuICAgICAgICBjb25zdCBkZWZhdWx0cyA9IHtcclxuICAgICAgICAgICAgZWxlbWVudDogbnVsbCxcclxuICAgICAgICAgICAgZG9jdW1lbnQ6IGRvY3VtZW50LFxyXG4gICAgICAgICAgICBtYXhIZWlnaHQ6IG51bGwsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiBudWxsLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5zZXR0aW5ncy5lbGVtZW50O1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnQgPSB0aGlzLnNldHRpbmdzLmRvY3VtZW50O1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdtdy1sZS1yZXNpemFibGUnKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHggPSAwO1xyXG4gICAgeSA9IDA7XHJcbiAgICB3ID0gMDtcclxuICAgIGggPSAwO1xyXG5cclxuICAgIGxpc3RlbmVycyA9IHt9XHJcblxyXG4gICAgI19lID0ge307XHJcblxyXG4gICAgb24oZSwgZil7IHRoaXMuI19lW2VdID8gdGhpcy4jX2VbZV0ucHVzaChmKSA6ICh0aGlzLiNfZVtlXSA9IFtmXSkgfTtcclxuICAgIGRpc3BhdGNoKGUsIGYpeyB0aGlzLiNfZVtlXSA/IHRoaXMuI19lW2VdLmZvckVhY2goYyA9PiB7IGMuY2FsbCh0aGlzLCBmKTsgfSkgOiAnJzsgfTtcclxuXHJcbiAgICBtb3VzZU1vdmVIYW5kbGVyIChlKSB7XHJcbiAgICAgICAgY29uc3QgZHggPSBlLmNsaWVudFggLSB0aGlzLng7XHJcbiAgICAgICAgY29uc3QgZHkgPSBlLmNsaWVudFkgLSB0aGlzLnk7XHJcbiAgICAgICAgbGV0IGNhbGNIID0gdGhpcy5oICsgZHk7XHJcbiAgICAgICAgbGV0IGNhbGNXO1xyXG5cclxuICAgICAgXHJcbiAgICAgICAgaWYodGhpcy5hY3RpdmVIYW5kbGUgPT09IHRoaXMuaGFuZGxlcy5sZWZ0KSB7XHJcbiAgICAgICAgICAgIGNhbGNXID0gdGhpcy53IC0gZHg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2FsY1cgPSB0aGlzLncgKyBkeDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcblxyXG5cclxuICAgICAgICBpZih0aGlzLnNldHRpbmdzLm1heFdpZHRoKSB7XHJcbiAgICAgICAgICAgIGNhbGNXID0gTWF0aC5taW4oY2FsY1csIHRoaXMuc2V0dGluZ3MubWF4V2lkdGgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuc2V0dGluZ3MubWF4SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGNhbGNIID0gTWF0aC5taW4oY2FsY0gsIHRoaXMuc2V0dGluZ3MubWF4SGVpZ2h0KVxyXG4gICAgICAgIH1cclxuICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gYCR7Y2FsY1d9cHhgO1xyXG5cclxuXHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBgJHtjYWxjSH1weGA7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2goJ3Jlc2l6ZScsIHsgaGVpZ2h0OiB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0LCB3aWR0aDogdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBtb3VzZVVwSGFuZGxlciAoKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBsIGluIHRoaXMubGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihsLCB0aGlzLmxpc3RlbmVyc1tsXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0ge307XHJcbiAgICAgICAgdGhpcy5hY3RpdmVIYW5kbGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2goJ3Jlc2l6ZVN0b3AnKTtcclxuICAgIH07XHJcblxyXG4gICAgbW91c2VEb3duSGFuZGxlciAoZSkge1xyXG5cclxuICAgICAgICB0aGlzLnggPSBlLmNsaWVudFg7XHJcbiAgICAgICAgdGhpcy55ID0gZS5jbGllbnRZO1xyXG5cclxuICAgICAgICBjb25zdCBzdHlsZXMgPSB0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50KTtcclxuICAgICAgICB0aGlzLncgPSBwYXJzZUludChzdHlsZXMud2lkdGgsIDEwKTtcclxuICAgICAgICB0aGlzLmggPSBwYXJzZUludChzdHlsZXMuaGVpZ2h0LCAxMCk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMubW91c2Vtb3ZlID0gZSA9PiB0aGlzLm1vdXNlTW92ZUhhbmRsZXIoZSlcclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5tb3VzZXVwID0gZSA9PiB0aGlzLm1vdXNlVXBIYW5kbGVyKGUpXHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgbCBpbiB0aGlzLmxpc3RlbmVycykge1xyXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIobCwgdGhpcy5saXN0ZW5lcnNbbF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRpc3BhdGNoKCdyZXNpemVTdGFydCcpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgYWN0aXZlSGFuZGxlID0gbnVsbDtcclxuICAgIGhhbmRsZXMgPSB7fTtcclxuICAgICNkaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgI2VuYWJsZWQgPSB0cnVlO1xyXG5cclxuXHJcbiAgICBkaXNhYmxlKCkge1xyXG4gICAgICAgIHRoaXMuI2Rpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLiNlbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ213LWxlLXJlc2l6YWJsZS1kaXNhYmxlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgZW5hYmxlKCkge1xyXG4gICAgICAgIHRoaXMuI2Rpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy4jZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ213LWxlLXJlc2l6YWJsZS1kaXNhYmxlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc2FibGVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNkaXNhYmxlZFxyXG4gICAgfVxyXG5cclxuICAgIGVuYWJsZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2VuYWJsZWRcclxuICAgIH1cclxuXHJcbiAgICBidWlsZCgpIHtcclxuICAgICAgICBjb25zdCBub2RlVCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgIGNvbnN0IG5vZGVSID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgY29uc3Qgbm9kZUIgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICBjb25zdCBub2RlTCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG5cclxuICAgICAgICB0aGlzLmhhbmRsZXMudG9wID0gbm9kZVQ7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVzLnJpZ2h0ID0gbm9kZVI7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVzLmJvdHRvbSA9IG5vZGVCO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlcy5sZWZ0ID0gbm9kZUw7XHJcblxyXG4gICAgICAgIG5vZGVULmNsYXNzTmFtZSA9ICdtdy1sZS1yZXNpemVyIG13LWxlLXJlc2l6ZXItdCc7XHJcbiAgICAgICAgbm9kZVIuY2xhc3NOYW1lID0gJ213LWxlLXJlc2l6ZXIgbXctbGUtcmVzaXplci1yJztcclxuICAgICAgICBub2RlTC5jbGFzc05hbWUgPSAnbXctbGUtcmVzaXplciBtdy1sZS1yZXNpemVyLWwnO1xyXG4gICAgICAgIG5vZGVCLmNsYXNzTmFtZSA9ICdtdy1sZS1yZXNpemVyIG13LWxlLXJlc2l6ZXItYic7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKG5vZGVUKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQobm9kZVIpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChub2RlQik7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKG5vZGVMKTtcclxuICAgIH1cclxuXHJcbiAgICBtb3VudCgpIHtcclxuICAgICAgICBpZighdGhpcy5lbGVtZW50KSB7IHJldHVybiB0aGlzOyB9XHJcbiAgICAgICAgaWYodGhpcy5lbGVtZW50LmRhdGFzZXQucmVzaXphYmxlKSB7IHJldHVybiB0aGlzOyB9XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmRhdGFzZXQucmVzaXphYmxlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmJ1aWxkKCk7XHJcbiAgICAgICAgY29uc3QgcmVzaXplcnMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm13LWxlLXJlc2l6ZXInKTtcclxuXHJcbiAgICAgICAgQXJyYXkuZnJvbShyZXNpemVycykuZm9yRWFjaChyZXNpemVyID0+IHtcclxuICAgICAgICAgICAgcmVzaXplci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBlID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW91c2VEb3duSGFuZGxlcihlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVIYW5kbGUgPSByZXNpemVyO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoKCdyZWFkeScsIHsgaGVpZ2h0OiB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0LCB3aWR0aDogdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZ2xvYmFsVGhpcy5SZXNpemFibGUgPSBSZXNpemFibGVcclxuIiwiaW1wb3J0IHtPYmplY3RTZXJ2aWNlfSBmcm9tIFwiLi9jbGFzc2VzL29iamVjdC5zZXJ2aWNlLmpzXCI7XHJcbmltcG9ydCB7RHJhZ2dhYmxlfSBmcm9tIFwiLi9kcmFnZ2FibGUuanNcIjtcclxuXHJcbmltcG9ydCB7RWxlbWVudE1hbmFnZXJ9IGZyb20gXCIuL2NsYXNzZXMvZWxlbWVudC5qc1wiO1xyXG5pbXBvcnQge0RvbVNlcnZpY2V9IGZyb20gXCIuL2NsYXNzZXMvZG9tLmpzXCI7XHJcbmltcG9ydCB7UmVzaXphYmxlfSBmcm9tIFwiLi9jbGFzc2VzL3Jlc2l6YWJsZS5qc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEhhbmRsZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblxyXG4gICAgdmFyIGRlZmF1bHRzID0ge307XHJcblxyXG4gICAgdmFyIHNjb3BlID0gdGhpcztcclxuXHJcbiAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0U2VydmljZS5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcclxuXHJcbiAgICBjb25zdCBfZSA9IHt9O1xyXG4gICAgdGhpcy5vbiA9IChlLCBmKSA9PiB7IF9lW2VdID8gX2VbZV0ucHVzaChmKSA6IChfZVtlXSA9IFtmXSkgfTtcclxuICAgIHRoaXMuZGlzcGF0Y2ggPSAoZSwgZikgPT4geyBfZVtlXSA/IF9lW2VdLmZvckVhY2goIChjKSA9PiB7IGMuY2FsbCh0aGlzLCBmKTsgfSkgOiAnJzsgfTtcclxuXHJcbiAgICB2YXIgX3Zpc2libGUgPSB0cnVlO1xyXG4gICAgdmFyIF9jdXJyZW50VGFyZ2V0ID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLmdldFRhcmdldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX2N1cnJlbnRUYXJnZXRcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmlzVmlzaWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX3Zpc2libGU7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc2hvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfdmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy53cmFwcGVyLnJlbW92ZUNsYXNzKCdtdy1oYW5kbGUtaXRlbS1oaWRkZW4nKTtcclxuICAgIH07XHJcbiAgICB0aGlzLmhpZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgX3Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLndyYXBwZXIuYWRkQ2xhc3MoJ213LWhhbmRsZS1pdGVtLWhpZGRlbicpO1xyXG4gICAgICAgIHRoaXMud3JhcHBlci5yZW1vdmVDbGFzcygnbXctaGFuZGxlLWFjdGl2ZScpO1xyXG4gICAgfTtcclxuICAgIGxldCBfY29udGVudCA9IG51bGw7XHJcbiAgICB0aGlzLnNldENvbnRlbnQgPSBmdW5jdGlvbiAoY29udGVudCkge1xyXG4gICAgICAgIGlmKF9jb250ZW50KXtcclxuICAgICAgICAgICAgX2NvbnRlbnQucmVtb3ZlKClcclxuICAgICAgICB9XHJcbiAgICAgICAgX2NvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgIHRoaXMud3JhcHBlci5hcHBlbmQoX2NvbnRlbnQpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB0aGlzLmluaXREcmFnZ2FibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiBcclxuXHJcbiAgICAgIHRoaXMuZHJhZ2dhYmxlID0gbmV3IERyYWdnYWJsZSh7XHJcbiAgICAgICAgICBoYW5kbGU6IHRoaXMuaGFuZGxlLFxyXG4gICAgICAgICAgZWxlbWVudDogbnVsbCxcclxuICAgICAgICAgIGhlbHBlcjogdHJ1ZSxcclxuICAgICAgICAgIGRyb3BJbmRpY2F0b3I6IHRoaXMuc2V0dGluZ3MuZHJvcEluZGljYXRvcixcclxuICAgICAgICAgIGRvY3VtZW50OiB0aGlzLnNldHRpbmdzLmRvY3VtZW50LFxyXG4gICAgICAgICAgdGFyZ2V0OiB0aGlzLnNldHRpbmdzLnJvb3QsXHJcbiAgICAgICAgICBzdGF0ZU1hbmFnZXI6IHRoaXMuc2V0dGluZ3Muc3RhdGVNYW5hZ2VyLFxyXG4gICAgICAgICAgdHlwZTogdGhpcy5zZXR0aW5ncy50eXBlXHJcblxyXG4gICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgIFxyXG4gICAgICAgIHRoaXMuZHJhZ2dhYmxlLm9uKCdkcmFnU3RhcnQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHNjb3BlLndyYXBwZXIuYWRkQ2xhc3MoJ213LWhhbmRsZS1pdGVtLWRyYWdnaW5nJyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLmRyYWdnYWJsZS5vbignZHJhZ0VuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzY29wZS53cmFwcGVyLnJlbW92ZUNsYXNzKCdtdy1oYW5kbGUtaXRlbS1kcmFnZ2luZycpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiBcclxuXHJcblxyXG5cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZ2V0U2Nyb2xsID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRvY3VtZW50LmRlZmF1bHRWaWV3LnBhZ2VZT2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHt4OiB0aGlzLnNldHRpbmdzLmRvY3VtZW50LmRlZmF1bHRWaWV3LnBhZ2VYT2Zmc2V0LCB5OiB0aGlzLnNldHRpbmdzLmRvY3VtZW50LmRlZmF1bHRWaWV3LnBhZ2VZT2Zmc2V0fTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgc3gsIHN5LCBkID0gdGhpcy5zZXR0aW5ncy5kb2N1bWVudCxcclxuICAgICAgICAgICAgICAgIHIgPSBkLmRvY3VtZW50RWxlbWVudCxcclxuICAgICAgICAgICAgICAgIGIgPSBkLmJvZHk7XHJcbiAgICAgICAgICAgIHN4ID0gci5zY3JvbGxMZWZ0IHx8IGIuc2Nyb2xsTGVmdCB8fCAwO1xyXG4gICAgICAgICAgICBzeSA9IHIuc2Nyb2xsVG9wIHx8IGIuc2Nyb2xsVG9wIHx8IDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7eDogc3gsIHk6IHN5fTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wb3NpdGlvbiA9IGZ1bmN0aW9uKHRhcmdldCkge1xyXG4gICAgICAgIGlmKCF0YXJnZXQpe1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb2ZmID0gRG9tU2VydmljZS5vZmZzZXQodGFyZ2V0KTtcclxuICAgICAgICBjb25zdCBzY3JvbGwgPSBnZXRTY3JvbGwoKTtcclxuICAgICAgICBjb25zdCBtZW51ID0gdGhpcy53cmFwcGVyLmdldCgwKS5xdWVyeVNlbGVjdG9yKCcubXctbGUtaGFuZGxlLW1lbnUtYnV0dG9ucycpO1xyXG4gICAgICAgIGxldCB0cmFuc2Zvcm0gO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHNjcm9sbC55ID4gKG9mZi50b3AgLSA3MCkpIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtID0gKHNjcm9sbC55IC0gKG9mZi50b3AgLSA3MCkpO1xyXG5cclxuICAgICAgICAgICAgaWYoKHRyYW5zZm9ybSkgPiBvZmYuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0gPSBvZmYuaGVpZ2h0ICsgMTBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBtZW51LnN0eWxlLnRyYW5zaXRpb24gPSBgbm9uZWA7XHJcbiAgICAgICAgbWVudS5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm0gPyBgdHJhbnNsYXRlWSgke3RyYW5zZm9ybX1weClgIDogJyc7XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gbWVudS5zdHlsZS50cmFuc2l0aW9uID0gYGAsIDEwKVxyXG5cclxuXHJcbiAgICAgICAgIHRoaXMud3JhcHBlci5jc3Moe1xyXG4gICAgICAgICAgICB0b3A6ICBvZmYudG9wLCBcclxuICAgICAgICAgICAgbGVmdDogIG9mZi5sZWZ0LFxyXG4gICAgICAgICAgICB3aWR0aDogb2ZmLndpZHRoLCAgIFxyXG4gICAgICAgICAgICBoZWlnaHQ6IG9mZi5oZWlnaHQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBmb3JjZWQpIHtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICAgICAgICBfY3VycmVudFRhcmdldCA9IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucG9zaXRpb24odGFyZ2V0KTtcclxuICAgICAgICB0aGlzLnNob3coKTtcclxuXHJcbiAgICAgICAgdGhpcy5kcmFnZ2FibGUuc2V0RWxlbWVudCh0YXJnZXQpO1xyXG4gICAgICAgIGlmKF9jdXJyZW50VGFyZ2V0ICE9PSB0YXJnZXQgfHwgZm9yY2VkKSB7XHJcbiAgICAgICAgICAgIF9jdXJyZW50VGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKCd0YXJnZXRDaGFuZ2UnLCB0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMud3JhcHBlci5hZGRDbGFzcygnbXctaGFuZGxlLWFjdGl2ZScpLCAxKVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZUhhbmRsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5oYW5kbGUgPT09ICdzZWxmJykge1xyXG5cclxuICAgICAgICAgICAgdmFyIGVsZW1lbnRoYW5kbGUgPSBFbGVtZW50TWFuYWdlcih7XHJcbiAgICAgICAgICAgICAgICB0YWc6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1oYW5kbGUtaXRlbS1kcmFnZ2FibGUtc2VsZicsXHJcbiBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndyYXBwZXIuYXBwZW5kKGVsZW1lbnRoYW5kbGUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudGhhbmRsZS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRoYW5kbGUucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuaGFuZGxlID0gZWxlbWVudGhhbmRsZTtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGUgPSBlbGVtZW50aGFuZGxlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy53cmFwcGVyLmFwcGVuZChlbGVtZW50aGFuZGxlKVxyXG5cclxuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5oYW5kbGUpIHtcclxuICAgICAgICAgICAgaWYodHlwZW9mIHRoaXMuc2V0dGluZ3MuaGFuZGxlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5oYW5kbGUgPSBFbGVtZW50TWFuYWdlcih0aGlzLmhhbmRsZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZSA9IHRoaXMuc2V0dGluZ3MuaGFuZGxlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlID0gRWxlbWVudE1hbmFnZXIoe1xyXG4gICAgICAgICAgICAgICAgdGFnOiAnZGl2JyxcclxuICAgICAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXctaGFuZGxlLWl0ZW0taGFuZGxlJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50RWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMud3JhcHBlci5hcHBlbmQodGhpcy5oYW5kbGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX3Jlc2l6YWJsZU1heFdpZHRoID0gdGhpcy5zZXR0aW5ncy5kb2N1bWVudC5kZWZhdWx0Vmlldy5pbm5lcldpZHRoO1xyXG4gICAgdmFyIF9yZXNpemFibGVNYXhIZWlnaHQgPSB0aGlzLnNldHRpbmdzLmRvY3VtZW50LmRlZmF1bHRWaWV3LmlubmVySGVpZ2h0O1xyXG5cclxuICAgIHRoaXMucmVzaXphYmxlTWF4V2lkdGggPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICBpZih0eXBlb2YgbnVtYmVyID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm4gX3Jlc2l6YWJsZU1heFdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfcmVzaXphYmxlTWF4V2lkdGggPSBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yZXNpemFibGVNYXhIZWlnaHQgPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICAgICAgICBpZih0eXBlb2YgbnVtYmVyID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm4gX3Jlc2l6YWJsZU1heEhlaWdodDtcclxuICAgICAgICB9XHJcbiAgICAgICAgX3Jlc2l6YWJsZU1heEhlaWdodCA9IG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmZpbmRDbG9zZXN0RWxlbWVudEJ5Q2xhc3MgPSBmdW5jdGlvbihlbGVtZW50LCBtYXhEaXN0YW5jZSA9IDIwMCkge1xyXG4gICAgICAgIGxldCBjbG9zZXN0RWxlbWVudHMgPSBbXTtcclxuICAgICAgICBsZXQgY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIGxldCBkaXN0YW5jZSA9IDA7XHJcbiAgIFxyXG4gICAgICBcclxuICAgICAgICB3aGlsZSAoY3VycmVudEVsZW1lbnQgIT09IGRvY3VtZW50KSB7XHJcbiAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IGN1cnJlbnRFbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnLmVsZW1lbnQsLm1vZHVsZScpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjbG9zZXN0RWxlbWVudHMgPSBbLi4uZWxlbWVudHNdLmZpbHRlcihlbCA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgZWxEaXN0YW5jZSA9IE1hdGguYWJzKGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wKTtcclxuICAgICAgICAgICAgICByZXR1cm4gZWxEaXN0YW5jZSA8PSBtYXhEaXN0YW5jZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoY2xvc2VzdEVsZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICBcclxuICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY3VycmVudEVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICAgIGRpc3RhbmNlKys7XHJcbiAgICAgIFxyXG4gICAgICAgICAgaWYgKGRpc3RhbmNlID4gbWF4RGlzdGFuY2UgLyAxMCkge1xyXG4gICAgICAgICAgICAvLyBCcmVhayBvdXQgb2YgdGhlIGxvb3AgaWYgd2UndmUgZXhjZWVkZWQgdGhlIG1heGltdW0gZGlzdGFuY2UgdGhyZXNob2xkXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGNsb3Nlc3RFbGVtZW50cztcclxuICAgICAgfVxyXG5cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZUFzcGVjdFJhdGlvRml0KHNyY1dpZHRoLCBzcmNIZWlnaHQsIG1heFdpZHRoLCBtYXhIZWlnaHQpIHtcclxuXHJcbiAgICAgICAgdmFyIHJhdGlvID0gTWF0aC5taW4obWF4V2lkdGggLyBzcmNXaWR0aCwgbWF4SGVpZ2h0IC8gc3JjSGVpZ2h0KTtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiB7IHdpZHRoOiBzcmNXaWR0aCpyYXRpbywgaGVpZ2h0OiBzcmNIZWlnaHQqcmF0aW8gfTtcclxuICAgICB9XHJcbiAgICAgIFxyXG5cclxuICAgIHRoaXMucmVzaXphYmxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYoIXRoaXMuc2V0dGluZ3MucmVzaXphYmxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgdGhpcy5yZXNpemVyID0gbmV3IFJlc2l6YWJsZSh7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMud3JhcHBlci5nZXQoMCksXHJcbiAgICAgICAgICAgIGRvY3VtZW50OiB0aGlzLnNldHRpbmdzLmRvY3VtZW50LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnJlc2l6ZXIubW91bnQoKTtcclxuICAgICAgICB0aGlzLnJlc2l6ZXIub24oJ3Jlc2l6ZScsICBkYXRhID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5nZXRUYXJnZXQoKTtcclxuICAgICAgICAgICAgaWYodGFyZ2V0Lm5vZGVOYW1lID09PSAnSU1HJykge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9IGNhbGN1bGF0ZUFzcGVjdFJhdGlvRml0KHRhcmdldC5vZmZzZXRXaWR0aCwgdGFyZ2V0Lm9mZnNldEhlaWdodCwgZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQpXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQuc3R5bGUuaGVpZ2h0ID0gZGF0YS5oZWlnaHQgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnN0eWxlLndpZHRoID0gZGF0YS53aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldC5zdHlsZS5taW5IZWlnaHQgPSBkYXRhLmhlaWdodCArICdweCc7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQuc3R5bGUud2lkdGggPSBkYXRhLndpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNldCh0YXJnZXQpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jcmVhdGVXcmFwcGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy53cmFwcGVyID0gRWxlbWVudE1hbmFnZXIoe1xyXG4gICAgICAgICAgICB0YWc6ICdkaXYnLFxyXG4gICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXctaGFuZGxlLWl0ZW0gJyArICh0aGlzLnNldHRpbmdzLmNsYXNzTmFtZSB8fCAnbXctaGFuZGxlLXR5cGUtZGVmYXVsdCcpLFxyXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuc2V0dGluZ3MuaWQgfHwgKCdtdy1oYW5kbGUtJyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpKSxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRFZGl0YWJsZTogZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gXHJcblxyXG4gICAgICAgIHRoaXMud3JhcHBlci5vbignbW91c2Vkb3duJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ213LWhhbmRsZS1pdGVtLW1vdXNlLWRvd24nKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBFbGVtZW50TWFuYWdlcihkb2N1bWVudC5ib2R5KS5vbignbW91c2V1cCB0b3VjaGVuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2NvcGUud3JhcHBlci5yZW1vdmVDbGFzcygnbXctaGFuZGxlLWl0ZW0tbW91c2UtZG93bicpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLndyYXBwZXIuZ2V0KDApKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jcmVhdGVXcmFwcGVyKCk7XHJcbiAgICB0aGlzLmNyZWF0ZUhhbmRsZSgpO1xyXG4gICAgdGhpcy5pbml0RHJhZ2dhYmxlKCk7XHJcbiAgICBpZih0aGlzLnNldHRpbmdzLmNvbnRlbnQpIHtcclxuICAgICAgICB0aGlzLnNldENvbnRlbnQodGhpcy5zZXR0aW5ncy5jb250ZW50KTtcclxuICAgIH1cclxuICAgIHRoaXMuaGlkZSgpXHJcbiAgICB0aGlzLnJlc2l6YWJsZSgpXHJcblxyXG4gICAgdGhpcy5zZXR0aW5ncy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbkNoYW5nZScsIGUgPT4gdGhpcy5wb3NpdGlvbih0aGlzLmdldFRhcmdldCgpKSlcclxuICAgIHRoaXMuc2V0dGluZ3MuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZSA9PiB0aGlzLnBvc2l0aW9uKHRoaXMuZ2V0VGFyZ2V0KCkpKVxyXG4gICAgdGhpcy5zZXR0aW5ncy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBlID0+IHRoaXMucG9zaXRpb24odGhpcy5nZXRUYXJnZXQoKSkpXHJcbn07XHJcbiIsImltcG9ydCB7T2JqZWN0U2VydmljZX0gZnJvbSAnLi9jbGFzc2VzL29iamVjdC5zZXJ2aWNlLmpzJztcclxuaW1wb3J0IHtEb21TZXJ2aWNlfSBmcm9tICcuL2NsYXNzZXMvZG9tLmpzJztcclxuXHJcbmV4cG9ydCBjb25zdCBHZXRQb2ludGVyVGFyZ2V0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpICB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgdGhpcy50b29scyA9IERvbVNlcnZpY2U7XHJcblxyXG4gICAgdmFyIHNjb3BlID0gdGhpcztcclxuXHJcbiAgICB2YXIgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgZXhjZXB0aW9uczogWydtdy1oYW5kbGUtaXRlbSddXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3RTZXJ2aWNlLmV4dGVuZCh7fSwgZGVmYXVsdHMsIG9wdGlvbnMpO1xyXG5cclxuICAgIGlmICggdGhpcy5zZXR0aW5ncy5yb290Lm5vZGVUeXBlID09PSA5ICkge1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnQgPSB0aGlzLnNldHRpbmdzLnJvb3Q7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnQgPSB0aGlzLnNldHRpbmdzLnJvb3Qub3duZXJEb2N1bWVudDtcclxuICAgIH1cclxuICAgIHRoaXMuYm9keSA9IHRoaXMuZG9jdW1lbnQuYm9keTtcclxuXHJcbiAgICB2YXIgZGlzdGFuY2VNYXggPSAyMDtcclxuXHJcbiAgICBmdW5jdGlvbiBkaXN0YW5jZSh4MSwgeTEsIHgyLCB5Mikge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmh5cG90KHgyLXgxLCB5Mi15MSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaXNJblJhbmdlKGVsMSwgZWwyKSB7XHJcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlKGVsMSwgZWwyKSA8PSBkaXN0YW5jZU1heDtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgdmFsaWRhdGVOb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbm9kZS50eXBlID09PSAxO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgcm91bmQ1ID0gZnVuY3Rpb24gKHgpe1xyXG4gICAgICAgIHJldHVybiAoeCAlIDUpID49IDIuNSA/ICh4IC8gNSkgKiA1ICsgNSA6ICh4IC8gNSkgKiA1O1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZ2V0TmVhckNvb3JkaW5hdGVzID0gZnVuY3Rpb24gKHgsIHkpIHtcclxuICAgICAgICB4ID0gcm91bmQ1KHgpO1xyXG4gICAgICAgIHkgPSByb3VuZDUoeSk7XHJcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xyXG4gICAgICAgIHZhciB4MSA9IHggLSBkaXN0YW5jZU1heDtcclxuICAgICAgICB2YXIgeDFNYXggPSB4ICsgZGlzdGFuY2VNYXg7XHJcbiAgICAgICAgdmFyIHkxID0geSAtIGRpc3RhbmNlTWF4O1xyXG4gICAgICAgIHZhciB5MU1heCA9IHkgKyBkaXN0YW5jZU1heDtcclxuICAgICAgICBmb3IgKCA7IHgxIDwgeDFNYXg7IHgxICs9IDUpIHtcclxuICAgICAgICAgICAgZm9yICggOyB5MSA8PSB5MU1heDsgeTEgKz0gNSApIHtcclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKFt4MSwgeTFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgYWRkTm9kZSA9IGZ1bmN0aW9uIChlbCwgcmVzKSB7XHJcbiAgICAgICAgaWYoZWwgJiYgISFlbC5wYXJlbnRFbGVtZW50ICYmIHJlcy5pbmRleE9mKGVsKSA9PT0gLTEgJiYgc2NvcGUuYm9keSAhPT0gZWwpIHtcclxuICAgICAgICAgICAgcmVzLnB1c2goZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5mcm9tRXZlbnQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGxldCB4LCB5O1xyXG4gICAgICAgIGlmKGUucGFnZVgpIHtcclxuICAgICAgICAgICAgeCA9IGUucGFnZVg7XHJcbiAgICAgICAgICAgIHkgPSBlLnBhZ2VZO1xyXG4gICAgICAgIH0gZWxzZSBpZiggZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlc1swXSkge1xyXG4gICAgICAgICAgICB4ID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICAgICAgICB5ID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZOyAgIFxyXG4gICAgICAgIH0gZWxzZSBpZiggZS50b3VjaGVzICYmIGUudG91Y2hlc1swXSkge1xyXG4gICAgICAgICAgICB4ID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICAgICAgICB5ID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xyXG4gICAgICAgIH0gIFxyXG4gICAgICAgICBpZighc2NvcGUudG9vbHMuaGFzQW55T2ZDbGFzc2VzT25Ob2RlT3JQYXJlbnQoZS50YXJnZXQsIHRoaXMuc2V0dGluZ3MuZXhjZXB0aW9ucykpIHtcclxuICAgICAgICAgICAgIGlmKCFzY29wZS5kb2N1bWVudC5fdGVzdCl7XHJcbiAgICAgICAgICAgICAgICAgc2NvcGUuZG9jdW1lbnQuX3Rlc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgICBzY29wZS5kb2N1bWVudC5fdGVzdC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgICAgICAgc2NvcGUuZG9jdW1lbnQuX3Rlc3Quc3R5bGUubGVmdCA9ICcxMHB4JztcclxuXHJcbiAgICAgICAgICAgICAgICAgc2NvcGUuZG9jdW1lbnQuX3Rlc3Quc3R5bGUuYmFja2dyb3VuZCA9ICAncmVkJztcclxuICAgICAgICAgICAgICAgICBzY29wZS5kb2N1bWVudC5fdGVzdC5zdHlsZS53aWR0aCA9ICAnMTBweCc7XHJcbiAgICAgICAgICAgICAgICAgc2NvcGUuZG9jdW1lbnQuX3Rlc3Quc3R5bGUuaGVpZ2h0ID0gICcxMHB4JztcclxuICAgICAgICAgICAgICAgICBzY29wZS5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjb3BlLmRvY3VtZW50Ll90ZXN0KTtcclxuICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIHNjb3BlLmRvY3VtZW50Ll90ZXN0LnN0eWxlLnRvcCA9IGUucGFnZVkgKyAncHgnO1xyXG4gICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVBvaW50KHgsIHkvKiArIHNjb3BlLmRvY3VtZW50LmRlZmF1bHRWaWV3LnNjcm9sbFkqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXVxyXG4gICAgfVxyXG4gICAgdGhpcy5mcm9tUG9pbnQgPSBmdW5jdGlvbiAoeCwgeSkge1xyXG4gICAgICAgIHZhciByZXMgPSBbXTtcclxuICAgICAgICBpZihzY29wZS5kb2N1bWVudC5kZWZhdWx0Vmlldy5mcmFtZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgLy8geSArPSBzY29wZS5kb2N1bWVudC5kZWZhdWx0Vmlldy5mcmFtZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkueVxyXG4gICAgICAgICAgICB5IC09IHNjb3BlLmRvY3VtZW50LmRlZmF1bHRWaWV3LnNjcm9sbFk7XHJcbiAgICAgICAgfVxyXG5cclxuIFxyXG4gICAgICAgIHZhciBlbCA9IHNjb3BlLmRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XHJcblxyXG4gICAgICAgIGlmICghZWwgKSByZXR1cm4gW107XHJcbiAgICAgICAgYWRkTm9kZShlbCwgcmVzKTtcclxuICAgICAgICB2YXIgZG90cyA9IGdldE5lYXJDb29yZGluYXRlcyh4LCB5KTtcclxuICAgICAgICBkb3RzLmZvckVhY2goZnVuY3Rpb24gKGNvb3Jkcyl7XHJcbiAgICAgICAgICAgIGFkZE5vZGUoc2NvcGUuZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChjb29yZHNbMF0sIGNvb3Jkc1sxXSksIHJlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbn07XHJcblxyXG5cclxuIiwiXHJcblxyXG5pbXBvcnQge0RvbVNlcnZpY2V9IGZyb20gJy4vY2xhc3Nlcy9kb20uanMnO1xyXG5cclxuXHJcbmNvbnN0IGlzUm93TGlrZSA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICByZXR1cm4gRG9tU2VydmljZS5tYXRjaGVzKG5vZGUsICcucm93LFtjbGFzcyo9XCJyb3ctXCJdJyk7XHJcbn1cclxuXHJcbmNvbnN0IGlzQ29sdW1uTElrZSA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICByZXR1cm4gRG9tU2VydmljZS5tYXRjaGVzKG5vZGUsICcuY29sLFtjbGFzcyo9XCJjb2wtXCJdJyk7XHJcbn1cclxubGV0IF9mcmFnbWVudDtcclxuY29uc3QgZnJhZ21lbnQgPSBmdW5jdGlvbigpe1xyXG4gICAgaWYoIV9mcmFnbWVudCl7XHJcbiAgICAgICAgX2ZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgX2ZyYWdtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAgICAgICBfZnJhZ21lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgICAgIF9mcmFnbWVudC5zdHlsZS53aWR0aCA9ICcxcHgnO1xyXG4gICAgICAgIF9mcmFnbWVudC5zdHlsZS5oZWlnaHQgPSAnMXB4JztcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKF9mcmFnbWVudCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX2ZyYWdtZW50O1xyXG59XHJcbmNvbnN0IF9pc0Jsb2NrQ2FjaGUgPSB7fTtcclxuY29uc3QgaXNCbG9ja0xldmVsID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgIGlmKCFub2RlIHx8IG5vZGUubm9kZVR5cGUgPT09IDMpe1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHZhciBuYW1lID0gbm9kZS5ub2RlTmFtZTtcclxuICAgIGlmKHR5cGVvZiBfaXNCbG9ja0NhY2hlW25hbWVdICE9PSAndW5kZWZpbmVkJyl7XHJcbiAgICAgICAgcmV0dXJuIF9pc0Jsb2NrQ2FjaGVbbmFtZV07XHJcbiAgICB9XHJcbiAgICB2YXIgdGVzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XHJcbiAgICBmcmFnbWVudCgpLmFwcGVuZENoaWxkKHRlc3QpO1xyXG4gICAgX2lzQmxvY2tDYWNoZVtuYW1lXSA9IGdldENvbXB1dGVkU3R5bGUodGVzdCkuZGlzcGxheSA9PT0gJ2Jsb2NrJztcclxuICAgIGZyYWdtZW50KCkucmVtb3ZlQ2hpbGQodGVzdCk7XHJcbiAgICByZXR1cm4gX2lzQmxvY2tDYWNoZVtuYW1lXTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgZ2V0RWxlbWVudHNMaWtlID0gKHNlbGVjdG9yLCByb290LCBzY29wZSkgPT4ge1xyXG4gICAgc2VsZWN0b3IgPSBzZWxlY3RvciB8fCAnKic7XHJcbiAgICB2YXIgYWxsID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSwgaSA9IDAsIGZpbmFsID0gW107XHJcbiAgICBmb3IoIDsgaTxhbGwubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGlmKCFpc0NvbHVtbkxJa2UoYWxsW2ldKSAmJlxyXG4gICAgICAgICAgICAhaXNSb3dMaWtlKGFsbFtpXSkgJiZcclxuICAgICAgICAgICAgIXNjb3BlLmVsZW1lbnRBbmFseXplci5pc0VkaXQoYWxsW2ldKSAmJlxyXG4gICAgICAgICAgICBpc0Jsb2NrTGV2ZWwoYWxsW2ldKSl7XHJcbiAgICAgICAgICAgIGZpbmFsLnB1c2goYWxsW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmluYWw7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgTW9kZUF1dG8gPSAoc2NvcGUpID0+IHtcclxuIFxyXG4gICAgY29uc3Qge1xyXG4gICAgICAgIGJhY2tncm91bmRJbWFnZUhvbGRlcixcclxuICAgICAgICBlZGl0Q2xhc3MsXHJcbiAgICAgICAgbW9kdWxlQ2xhc3MsXHJcbiAgICAgICAgZWxlbWVudENsYXNzLFxyXG4gICAgICAgIGFsbG93RHJvcFxyXG4gICAgfSA9IHNjb3BlLnNldHRpbmdzO1xyXG4gICAgY29uc3Qgcm9vdCA9IHNjb3BlLnJvb3Q7XHJcbiAgICB2YXIgc2VsZWN0b3IgPSAnKic7XHJcbiAgICB2YXIgYmdIb2xkZXJzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGVkaXRDbGFzcyArICcuJyArIGJhY2tncm91bmRJbWFnZUhvbGRlciArICcsIC4nICsgZWRpdENsYXNzICsgJyAuJyArIGJhY2tncm91bmRJbWFnZUhvbGRlciArICcsIC4nK2VkaXRDbGFzcysnW3N0eWxlKj1cImJhY2tncm91bmQtaW1hZ2VcIl0sIC4nK2VkaXRDbGFzcysnIFtzdHlsZSo9XCJiYWNrZ3JvdW5kLWltYWdlXCJdJyk7XHJcbiAgICB2YXIgbm9FZGl0TW9kdWxlcyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbCgnLicgKyBtb2R1bGVDbGFzcyArIHNjb3BlLnNldHRpbmdzLnVuRWRpdGFibGVNb2R1bGVzLmpvaW4oJywuJyArIG1vZHVsZUNsYXNzKSk7XHJcbiAgICB2YXIgZWRpdHMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgZWRpdENsYXNzKTtcclxuICAgIHZhciBpID0gMCwgaTEgPSAwLCBpMiA9IDA7XHJcbiAgICBmb3IgKCA7IGkgPCBiZ0hvbGRlcnMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgICAgdmFyIGN1cnIgPSBiZ0hvbGRlcnNbaV07XHJcbiAgICAgICAgaWYoIHNjb3BlLmVsZW1lbnRBbmFseXplci5pc0luRWRpdChjdXJyKSApe1xyXG4gICAgICAgICAgICBpZighbXcudG9vbHMuaGFzQ2xhc3MoY3VyciwgbW9kdWxlQ2xhc3MpKSB7XHJcbiAgICAgICAgICAgICAgICBtdy50b29scy5hZGRDbGFzcyhjdXJyLCBlZGl0Q2xhc3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKCFjdXJyLnN0eWxlLmJhY2tncm91bmRJbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgY3Vyci5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKCA7IGkxPG5vRWRpdE1vZHVsZXMubGVuZ3RoOyBpMSsrICkge1xyXG4gICAgICAgIG5vRWRpdE1vZHVsZXNbaV0uY2xhc3NMaXN0LnJlbW92ZShtb2R1bGVDbGFzcyk7XHJcbiAgICB9XHJcbiAgICBmb3IgKCA7IGkyIDwgZWRpdHMubGVuZ3RoOyBpMisrICkge1xyXG4gICAgICAgIHZhciBhbGwgPSBnZXRFbGVtZW50c0xpa2UoJzpub3QoLicgKyBlbGVtZW50Q2xhc3MgKyAnKScsIGVkaXRzW2kyXSwgc2NvcGUpLCBpMmEgPSAwO1xyXG5cclxuICAgICAgICB2YXIgYWxsQWxsb3dEcm9wcyA9IGVkaXRzW2kyXS5xdWVyeVNlbGVjdG9yQWxsKCdpbWcsLicgKyBhbGxvd0Ryb3ApLCBpM2EgPSAwO1xyXG4gICAgICAgIGZvciggOyBpM2EgPCBhbGxBbGxvd0Ryb3BzLmxlbmd0aDsgaTNhKyspe1xyXG4gICAgICAgICAgICBhbGxBbGxvd0Ryb3BzW2kzYV0uY2xhc3NMaXN0LmFkZChlbGVtZW50Q2xhc3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IoIDsgaTJhPGFsbC5sZW5ndGg7IGkyYSsrKSB7XHJcbiAgICAgICAgICAgIGlmKCFhbGxbaTJhXS5jbGFzc0xpc3QuY29udGFpbnMobW9kdWxlQ2xhc3MpKXtcclxuICAgICAgICAgICAgICAgIGlmKHNjb3BlLmVsZW1lbnRBbmFseXplci5pc0luRWRpdChhbGxbaTJhXSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbFtpMmFdLmNsYXNzTGlzdC5hZGQoIGVsZW1lbnRDbGFzcyApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG4iLCJleHBvcnQgY29uc3QgSGFuZGxlcyA9IGZ1bmN0aW9uIChoYW5kbGVzKSB7XHJcblxyXG4gICAgdGhpcy5oYW5kbGVzID0gaGFuZGxlcztcclxuICAgIHRoaXMuZHJhZ2dpbmcgPSBmYWxzZTtcclxuICAgIHZhciBzY29wZSA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5nZXQgPSBmdW5jdGlvbiAoaGFuZGxlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlc1toYW5kbGVdO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICB0aGlzLnNldCA9IGZ1bmN0aW9uIChoYW5kbGUsIHRhcmdldCl7XHJcbiAgICAgICAgIHRoaXMuZ2V0KGhhbmRsZSkuc2V0KHRhcmdldClcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmhpZGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcclxuICAgICAgICBpZihoYW5kbGUgJiYgdGhpcy5oYW5kbGVzW2hhbmRsZV0pIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVzW2hhbmRsZV0uaGlkZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAobmFtZSwgaCl7XHJcbiAgICAgICAgICAgICAgICBoLmhpZGUoKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaGlkZUFsbEJ1dCA9IGZ1bmN0aW9uKGhhbmRsZSkge1xyXG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAobmFtZSwgaCl7XHJcbiAgICAgICAgICAgIGlmKG5hbWUgIT09IGhhbmRsZSkge1xyXG4gICAgICAgICAgICAgICAgaC5oaWRlKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNob3cgPSBmdW5jdGlvbihoYW5kbGUpIHtcclxuICAgICAgICBpZiAoaGFuZGxlICYmIHRoaXMuaGFuZGxlc1toYW5kbGVdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlc1toYW5kbGVdLnNob3coKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKG5hbWUsIGhhbmRsZSl7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGUuc2hvdygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZWFjaCA9IGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgaWYoIWMpIHJldHVybjtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICBmb3IgKGkgaW4gdGhpcy5oYW5kbGVzKSB7XHJcbiAgICAgICAgICAgIGMuY2FsbChzY29wZSwgaSwgdGhpcy5oYW5kbGVzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy50YXJnZXRJc1NlbGVjdGVkID0gZnVuY3Rpb24odGFyZ2V0LCBleGNlcHQpIHtcclxuICAgICAgICBpZighdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnRhcmdldCB8fCB0YXJnZXQ7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgZm9yIChpIGluIHRoaXMuaGFuZGxlcykge1xyXG4gICAgICAgICAgICBpZihleGNlcHQgJiYgZXhjZXB0ID09PSB0aGlzLmhhbmRsZXNbaV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHRnID0gdGhpcy5oYW5kbGVzW2ldLmdldFRhcmdldCgpO1xyXG4gICAgICAgICAgICAgaWYoIHRnICYmIHRnID09PSB0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHRoaXMudGFyZ2V0SXNPckluc2lkZUhhbmRsZSA9IGZ1bmN0aW9uKHRhcmdldCkge1xyXG4gICAgICAgIGlmKCF0YXJnZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0YXJnZXQgPSB0YXJnZXQudGFyZ2V0IHx8IHRhcmdldDtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICBmb3IgKGkgaW4gdGhpcy5oYW5kbGVzKSB7XHJcbiAgICAgICAgICAgICBpZih0aGlzLmhhbmRsZXNbaV0ud3JhcHBlci5nZXQoMCkgPT09IHRhcmdldCB8fCB0aGlzLmhhbmRsZXNbaV0ud3JhcHBlci5nZXQoMCkuY29udGFpbnModGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uICgpe1xyXG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAobmFtZSwgaGFuZGxlKXtcclxuICAgICAgICAgICAgaGFuZGxlLmRyYWdnYWJsZS5vbignZHJhZ1N0YXJ0JywgZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5kcmFnZ2luZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5oaWRlQWxsQnV0KG5hbWUpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGhhbmRsZS5kcmFnZ2FibGUub24oJ2RyYWdFbmQnLCBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgIHNjb3BlLmRyYWdnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGUuc2hvdygpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmluaXQoKTtcclxufTtcclxuIiwiXHJcbmltcG9ydCB7T2JqZWN0U2VydmljZX0gZnJvbSBcIi4vY2xhc3Nlcy9vYmplY3Quc2VydmljZS5qc1wiO1xyXG5pbXBvcnQge0RvbVNlcnZpY2V9IGZyb20gJy4vY2xhc3Nlcy9kb20uanMnO1xyXG5pbXBvcnQge0VsZW1lbnRNYW5hZ2VyfSBmcm9tIFwiLi9jbGFzc2VzL2VsZW1lbnQuanNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBEcm9wSW5kaWNhdG9yID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgICBjb25zdCBkZWZhdWx0cyA9IHtcclxuICAgICAgICB0ZW1wbGF0ZTogJ2RlZmF1bHQnXHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBwb3NpdGlvbkNhY2hlID0geyB9XHJcblxyXG4gICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdFNlcnZpY2UuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XHJcblxyXG4gICAgdGhpcy5faW5kaWNhdG9yID0gbnVsbDtcclxuXHJcbiAgICBjb25zdCBfZSA9IHt9O1xyXG4gICAgdGhpcy5vbiA9IGZ1bmN0aW9uIChlLCBmKSB7IF9lW2VdID8gX2VbZV0ucHVzaChmKSA6IChfZVtlXSA9IFtmXSkgfTtcclxuICAgIHRoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoZSwgZikgeyBfZVtlXSA/IF9lW2VdLmZvckVhY2goZnVuY3Rpb24gKGMpeyBjLmNhbGwodGhpcywgZik7IH0pIDogJyc7IH07XHJcblxyXG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmKHRoaXMudmlzaWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9pbmRpY2F0b3IuYWRkQ2xhc3MoJ213LWRyb3AtaW5kaWNhdG9yLWhpZGRlbicpO1xyXG4gICAgICAgICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgcG9zaXRpb25DYWNoZSA9IHt9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy52aXNpYmxlKVxyXG4gICAgICAgIGlmKCF0aGlzLnZpc2libGUpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2luZGljYXRvci5yZW1vdmVDbGFzcygnbXctZHJvcC1pbmRpY2F0b3ItaGlkZGVuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBbXHJcbiAgICAgICAgJ2JlZm9yZS10b3AnLCAncHJlcGVuZC10b3AnLFxyXG4gICAgICAgICdhZnRlci1ib3R0b20nLCAnYXBwZW5kLWJvdHRvbSdcclxuICAgIF07XHJcblxyXG5cclxuICAgIGNvbnN0IHBvc2l0aW9uc1ByZWZpeCA9ICdtdy1kcm9wLWluZGljYXRvci1wb3NpdGlvbi0nO1xyXG5cclxuICAgIGNvbnN0IHBvc2l0aW9uc0NsYXNzZXMgPSBwb3NpdGlvbnMubWFwKGZ1bmN0aW9uIChjbHMpeyByZXR1cm4gcG9zaXRpb25zUHJlZml4ICsgY2xzIH0pO1xyXG5cclxuICAgIGxldCBjdXJyZW50UG9zaXRpb25DbGFzcyA9IG51bGw7IC8vIGRvIG5vdCBzZXQgaWYgc2FtZSB0byBwcmV2ZW50IGFuaW1hdGlvbiBzdG9wXHJcblxyXG5cclxuICAgIGxldCBfcG9zaXRpb25UaW1lID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLnBvc2l0aW9uID0gZnVuY3Rpb24gKHRhcmdldCwgcG9zaXRpb24pIHtcclxuICAgICAgICBpZighdGFyZ2V0IHx8ICFwb3NpdGlvbikgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZihwb3NpdGlvbkNhY2hlLnRhcmdldCA9PT0gdGFyZ2V0ICYmIHBvc2l0aW9uQ2FjaGUucG9zaXRpb24gPT09IHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHBvc2l0aW9uQ2FjaGUudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgIHBvc2l0aW9uQ2FjaGUucG9zaXRpb24gPSBwb3NpdGlvblxyXG5cclxuICAgICAgICBpZihjdXJyZW50UG9zaXRpb25DbGFzcyAhPT0gcG9zaXRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5faW5kaWNhdG9yLnJlbW92ZUNsYXNzKHBvc2l0aW9uc0NsYXNzZXMpO1xyXG4gICAgICAgICAgICBjdXJyZW50UG9zaXRpb25DbGFzcyA9IHBvc2l0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLl9pbmRpY2F0b3IuYWRkQ2xhc3MocG9zaXRpb25zUHJlZml4ICsgcG9zaXRpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHJlY3QgPSBEb21TZXJ2aWNlLm9mZnNldCh0YXJnZXQpO1xyXG5cclxuICAgICAgICB0aGlzLl9pbmRpY2F0b3IuY3NzKHtcclxuICAgICAgICAgICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcclxuICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0LFxyXG4gICAgICAgICAgICB0b3A6IHJlY3QudG9wLFxyXG4gICAgICAgICAgICB3aWR0aDogcmVjdC53aWR0aFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2hvdygpO1xyXG5cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMubWFrZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9pbmRpY2F0b3IgPSBFbGVtZW50TWFuYWdlcigpO1xyXG4gICAgICAgIHRoaXMuX2luZGljYXRvci5odG1sKCc8ZGl2IGNsYXNzPVwibXctZHJvcC1pbmRpY2F0b3ItYmxvY2tcIj48ZGl2IGNsYXNzPVwibXctZHJvcC1pbmRpY2F0b3ItcGluXCI+PC9kaXY+PC9kaXY+Jyk7XHJcbiAgICAgICAgdGhpcy5faW5kaWNhdG9yLmFkZENsYXNzKCdtdy1kcm9wLWluZGljYXRvciBtdy1kcm9wLWluZGljYXRvci10ZW1wbGF0ZS0nICsgdGhpcy5zZXR0aW5ncy50ZW1wbGF0ZSk7XHJcbiAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2luZGljYXRvci5nZXQoMCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmluaXQgPSBmdW5jdGlvbiAoKXtcclxuICAgICAgICB0aGlzLm1ha2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5pbml0KCk7XHJcblxyXG59O1xyXG4iLCJleHBvcnQgY29uc3QgVG9vbHRpcCA9IChub2RlLCBjb250ZW50LCBwb3NpdGlvbikgPT4ge1xyXG4gICAgaWYoIW5vZGUgfHwgIWNvbnRlbnQpIHJldHVybjtcclxuICAgIG5vZGUgPSBub2RlLmlzTVdFbGVtZW50ID8gbm9kZS5nZXQoMCkgOiBub2RlO1xyXG4gICAgbm9kZS5kYXRhc2V0LnRvb2x0aXAgPSBjb250ZW50O1xyXG4gICAgbm9kZS50aXRsZSA9IGNvbnRlbnQ7XHJcbiAgICBub2RlLmRhdGFzZXQudG9vbHRpcHBvc2l0aW9uID0gcG9zaXRpb24gfHwgJ3RvcC1jZW50ZXInO1xyXG59O1xyXG5cclxuXHJcbiIsImltcG9ydCB7RWxlbWVudE1hbmFnZXJ9IGZyb20gXCIuL2NsYXNzZXMvZWxlbWVudC5qc1wiO1xyXG5pbXBvcnQge1Rvb2x0aXB9IGZyb20gXCIuL3Rvb2x0aXAuanNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBIYW5kbGVNZW51ID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG5cclxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgdmFyIHNjb3BlID0gdGhpcztcclxuXHJcbiAgICB0aGlzLl92aXNpYmxlID0gdHJ1ZTtcclxuICAgIHRoaXMuaXNWaXNpYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92aXNpYmxlO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKXtcclxuICAgICAgICB0aGlzLl92aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnJvb3QuYWRkQ2xhc3MoXCJtdy1sZS1oYW5kbGUtbWVudS12aXNpYmxlXCIpXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaGlkZSA9IGZ1bmN0aW9uICgpe1xyXG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnJvb3QucmVtb3ZlQ2xhc3MoXCJtdy1sZS1oYW5kbGUtbWVudS12aXNpYmxlXCIpXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24oKXtcclxuICAgICAgICB0aGlzLnJvb3QgPSBFbGVtZW50TWFuYWdlcih7XHJcbiAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1sZS1oYW5kbGUtbWVudScsXHJcbiAgICAgICAgICAgICAgICBpZDogc2NvcGUub3B0aW9ucy5pZCB8fCAnbXctbGUtaGFuZGxlLW1lbnUtJyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJ1dHRvbnNIb2xkZXIgPSBFbGVtZW50TWFuYWdlcih7XHJcbiAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1sZS1oYW5kbGUtbWVudS1idXR0b25zJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucm9vdC5hcHBlbmQodGhpcy5idXR0b25zSG9sZGVyKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIF90aXRsZSwgdGl0bGVUZXh0LCB0aXRsZUljb247XHJcblxyXG4gICAgdmFyIGNyZWF0ZVRpdGxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF90aXRsZSA9IEVsZW1lbnRNYW5hZ2VyKHtcclxuICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWxlLWhhbmRsZS1tZW51LXRpdGxlJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGl0bGVUZXh0ID0gRWxlbWVudE1hbmFnZXIoe1xyXG4gICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXctbGUtaGFuZGxlLW1lbnUtdGl0bGUtdGV4dCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRpdGxlSWNvbiA9IEVsZW1lbnRNYW5hZ2VyKHtcclxuICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWxlLWhhbmRsZS1tZW51LXRpdGxlLWljb24nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBfdGl0bGUuYXBwZW5kKHRpdGxlVGV4dCk7XHJcbiAgICAgICAgX3RpdGxlLmFwcGVuZCh0aXRsZUljb24pO1xyXG4gICAgICAgIHNjb3BlLnJvb3QucHJlcGVuZChfdGl0bGUpO1xyXG4gICAgICAgIHNjb3BlLnRpdGxlID0gX3RpdGxlXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBfdGFyZ2V0ID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLmdldFRhcmdldCA9IGZ1bmN0aW9uICgpe1xyXG4gICAgICAgIHJldHVybiBfdGFyZ2V0O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBfdGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICBmb3IgKCA7IGkgPCB0aGlzLmJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYodGhpcy5idXR0b25zW2ldLmNvbmZpZy5vblRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25zW2ldLmNvbmZpZy5vblRhcmdldCh0YXJnZXQsIHRoaXMuYnV0dG9uc1tpXS5idXR0b24uZ2V0KDApLCBzY29wZS5vcHRpb25zLnJvb3RTY29wZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgdGhpcy5zZXRUaXRsZSA9IGZ1bmN0aW9uICh0aXRsZSwgaWNvbil7XHJcbiAgICAgICAgdGl0bGVUZXh0Lmh0bWwodGl0bGUgfHwgJycpO1xyXG4gICAgICAgIHRpdGxlSWNvbi5odG1sKCBpY29uIHx8ICcnKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5idXR0b25zID0gW107XHJcblxyXG4gICAgdGhpcy5idWlsZEJ1dHRvbnMgPSBmdW5jdGlvbiAobWVudSwgYnRuSG9sZGVyKXtcclxuICAgICAgICBidG5Ib2xkZXIgPSBidG5Ib2xkZXIgfHwgdGhpcy5idXR0b25zSG9sZGVyO1xyXG4gICAgICAgIG1lbnUgPSBtZW51IHx8IHRoaXMub3B0aW9ucy5idXR0b25zO1xyXG4gICAgICAgIG1lbnUuZm9yRWFjaChmdW5jdGlvbiAoYnRuKXtcclxuICAgICAgICAgICAgYnRuSG9sZGVyLmFwcGVuZChzY29wZS5idXR0b24oYnRuKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuYnV0dG9uID0gZnVuY3Rpb24gKGNvbmYpe1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgKiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogbXcubGFuZygnU2V0dGluZ3MxMjEyJyksXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICAgICAgICAgIGljb246ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2ZXJzaW9uPVwiMS4xXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTIsOEE0LDQgMCAwLDEgMTYsMTJBNCw0IDAgMCwxIDEyLDE2QTQsNCAwIDAsMSA4LDEyQTQsNCAwIDAsMSAxMiw4TTEyLDEwQTIsMiAwIDAsMCAxMCwxMkEyLDIgMCAwLDAgMTIsMTRBMiwyIDAgMCwwIDE0LDEyQTIsMiAwIDAsMCAxMiwxME0xMCwyMkM5Ljc1LDIyIDkuNTQsMjEuODIgOS41LDIxLjU4TDkuMTMsMTguOTNDOC41LDE4LjY4IDcuOTYsMTguMzQgNy40NCwxNy45NEw0Ljk1LDE4Ljk1QzQuNzMsMTkuMDMgNC40NiwxOC45NSA0LjM0LDE4LjczTDIuMzQsMTUuMjdDMi4yMSwxNS4wNSAyLjI3LDE0Ljc4IDIuNDYsMTQuNjNMNC41NywxMi45N0w0LjUsMTJMNC41NywxMUwyLjQ2LDkuMzdDMi4yNyw5LjIyIDIuMjEsOC45NSAyLjM0LDguNzNMNC4zNCw1LjI3QzQuNDYsNS4wNSA0LjczLDQuOTYgNC45NSw1LjA1TDcuNDQsNi4wNUM3Ljk2LDUuNjYgOC41LDUuMzIgOS4xMyw1LjA3TDkuNSwyLjQyQzkuNTQsMi4xOCA5Ljc1LDIgMTAsMkgxNEMxNC4yNSwyIDE0LjQ2LDIuMTggMTQuNSwyLjQyTDE0Ljg3LDUuMDdDMTUuNSw1LjMyIDE2LjA0LDUuNjYgMTYuNTYsNi4wNUwxOS4wNSw1LjA1QzE5LjI3LDQuOTYgMTkuNTQsNS4wNSAxOS42Niw1LjI3TDIxLjY2LDguNzNDMjEuNzksOC45NSAyMS43Myw5LjIyIDIxLjU0LDkuMzdMMTkuNDMsMTFMMTkuNSwxMkwxOS40MywxM0wyMS41NCwxNC42M0MyMS43MywxNC43OCAyMS43OSwxNS4wNSAyMS42NiwxNS4yN0wxOS42NiwxOC43M0MxOS41NCwxOC45NSAxOS4yNywxOS4wNCAxOS4wNSwxOC45NUwxNi41NiwxNy45NUMxNi4wNCwxOC4zNCAxNS41LDE4LjY4IDE0Ljg3LDE4LjkzTDE0LjUsMjEuNThDMTQuNDYsMjEuODIgMTQuMjUsMjIgMTQsMjJIMTBNMTEuMjUsNEwxMC44OCw2LjYxQzkuNjgsNi44NiA4LjYyLDcuNSA3Ljg1LDguMzlMNS40NCw3LjM1TDQuNjksOC42NUw2LjgsMTAuMkM2LjQsMTEuMzcgNi40LDEyLjY0IDYuOCwxMy44TDQuNjgsMTUuMzZMNS40MywxNi42Nkw3Ljg2LDE1LjYyQzguNjMsMTYuNSA5LjY4LDE3LjE0IDEwLjg3LDE3LjM4TDExLjI0LDIwSDEyLjc2TDEzLjEzLDE3LjM5QzE0LjMyLDE3LjE0IDE1LjM3LDE2LjUgMTYuMTQsMTUuNjJMMTguNTcsMTYuNjZMMTkuMzIsMTUuMzZMMTcuMiwxMy44MUMxNy42LDEyLjY0IDE3LjYsMTEuMzcgMTcuMiwxMC4yTDE5LjMxLDguNjVMMTguNTYsNy4zNUwxNi4xNSw4LjM5QzE1LjM4LDcuNSAxNC4zMiw2Ljg2IDEzLjEyLDYuNjJMMTIuNzUsNEgxMS4yNVpcIiAvPjwvc3ZnPicsXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1oYW5kbGUtaW5zZXJ0LWJ1dHRvbicsXHJcbiAgICAgICAgICAgICAgICBtZW51OiBbXHJcblxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAqXHJcbiAgICAgICAgKiAqL1xyXG4gICAgICAgIHZhciBidG4gPSBFbGVtZW50TWFuYWdlcih7XHJcbiAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1sZS1oYW5kbGUtbWVudS1idXR0b24nICsgKGNvbmYuY2xhc3NOYW1lID8gJyAnICsgY29uZi5jbGFzc05hbWUgOiAnJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBidG5Db250ZW5Db25mID0ge1xyXG4gICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXctbGUtaGFuZGxlLW1lbnUtYnV0dG9uLWNvbnRlbnQnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBidG5Db250ZW50ID0gRWxlbWVudE1hbmFnZXIoYnRuQ29udGVuQ29uZik7XHJcblxyXG4gICAgICAgIGlmKGNvbmYudGl0bGUpIHtcclxuICAgICAgICAgICAgVG9vbHRpcChidG5Db250ZW50LCBjb25mLnRpdGxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKGNvbmYuaWNvbikge1xyXG4gICAgICAgICAgICB2YXIgaWNvbiA9IEVsZW1lbnRNYW5hZ2VyKHtcclxuICAgICAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXctbGUtaGFuZGxlLW1lbnUtYnV0dG9uLWljb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGlubmVySFRNTDogY29uZi5pY29uXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgYnRuQ29udGVudC5hcHBlbmQoaWNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGNvbmYudGV4dCkge1xyXG4gICAgICAgICAgICB2YXIgdGV4dCA9IEVsZW1lbnRNYW5hZ2VyKHtcclxuICAgICAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXctbGUtaGFuZGxlLW1lbnUtYnV0dG9uLXRleHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGlubmVySFRNTDogY29uZi50ZXh0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgYnRuQ29udGVudC5hcHBlbmQodGV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgYnRuLmFwcGVuZChidG5Db250ZW50KTtcclxuICAgICAgICB0aGlzLmJ1dHRvbnMucHVzaCh7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogYnRuLFxyXG4gICAgICAgICAgICBjb25maWc6IGNvbmYsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYoY29uZi5tZW51KSB7XHJcbiAgICAgICAgICAgIHZhciBzdWJtZW51ID0gRWxlbWVudE1hbmFnZXIoe1xyXG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1sZS1oYW5kbGUtbWVudS1idXR0b24tc3ViLW1lbnUnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBidG4uYXBwZW5kKHN1Ym1lbnUpO1xyXG4gICAgICAgICAgICBzY29wZS5idWlsZEJ1dHRvbnMoY29uZi5tZW51LCBzdWJtZW51KTtcclxuICAgICAgICAgICAgYnRuLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC50b2dnbGUoJ3N1Yi1tZW51LWFjdGl2ZScpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYodHlwZW9mIGNvbmYuYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGJ0bi5vbignY2xpY2snLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgY29uZi5hY3Rpb24oc2NvcGUuZ2V0VGFyZ2V0KCksIGJ0bi5nZXQoMCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ0bjtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY3JlYXRlKCk7XHJcbiAgICAgICAgY3JlYXRlVGl0bGUoKTtcclxuICAgICAgICB0aGlzLnNldFRpdGxlKHNjb3BlLm9wdGlvbnMudGl0bGUsIHNjb3BlLm9wdGlvbnMuaWNvbik7XHJcbiAgICAgICAgdGhpcy5idWlsZEJ1dHRvbnMoKTtcclxuICAgICAgICB0aGlzLmhpZGUoKTtcclxuXHJcbiAgICB9XHJcbiAgICB0aGlzLmluaXQoKVxyXG5cclxuXHJcbn1cclxuIiwiaW1wb3J0IHtFbGVtZW50TWFuYWdlcn0gZnJvbSBcIi4uL2NsYXNzZXMvZWxlbWVudC5qc1wiO1xyXG5cclxuY29uc3QgZGlhbG9nRm9vdGVyID0gKG9rTGFiZWwsIGNhbmNlbExhYmVsKSA9PiB7XHJcbiAgICBjb25zdCBmb290ZXIgPSBFbGVtZW50TWFuYWdlcih7XHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnbGUtZGlhbG9nLWZvb3RlcidcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBvayA9IEVsZW1lbnRNYW5hZ2VyKHtcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdsZS1idG4gbGUtYnRuLXByaW1hcnkgbGUtZGlhbG9nLWZvb3Rlci1vaycsXHJcbiAgICAgICAgICAgIGlubmVySFRNTDogb2tMYWJlbCB8fCAnT0snXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgY2FuY2VsID0gRWxlbWVudE1hbmFnZXIoe1xyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2xlLWJ0biBsZS1kaWFsb2ctZm9vdGVyLWNhbmNlbCdcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBmb290ZXIuYXBwZW5kKGNhbmNlbCk7XHJcbiAgICBmb290ZXIuYXBwZW5kKG9rKTtcclxuXHJcbiAgICByZXR1cm4gIHtcclxuICAgICAgICBvaywgY2FuY2VsLCBmb290ZXJcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERpYWxvZyB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICAgICAgY29uc3QgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGNsb3NlT25Fc2NhcGU6IHRydWUsXHJcbiAgICAgICAgICAgIGRvY3VtZW50OiBkb2N1bWVudCxcclxuICAgICAgICAgICAgcG9zaXRpb246ICdjZW50ZXJlZCcsXHJcbiAgICAgICAgICAgIG1vZGU6ICdmaXhlZCdcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHRoaXMuYnVpbGQoKTtcclxuICAgICAgICBzZXRUaW1lb3V0KF8gPT4gdGhpcy5vcGVuKCkpXHJcbiAgICB9XHJcblxyXG4gICAgI19lID0ge307XHJcblxyXG4gICAgI3JlbW92ZUxpc3RlbmVyKGUpIHtcclxuICAgICAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnIHx8IGUua2V5Q29kZSA9PT0gMjcpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb24oZSwgZil7IHRoaXMuI19lW2VdID8gdGhpcy4jX2VbZV0ucHVzaChmKSA6ICh0aGlzLiNfZVtlXSA9IFtmXSkgfTtcclxuICAgIGRpc3BhdGNoKGUsIGYpeyB0aGlzLiNfZVtlXSA/IHRoaXMuI19lW2VdLmZvckVhY2goYyA9PiB7IGMuY2FsbCh0aGlzLCBmKTsgfSkgOiAnJzsgfTtcclxuXHJcblxyXG4gICAgYnVpbGQoKSB7XHJcbiAgICAgICAgdGhpcy5yb290ID0gRWxlbWVudE1hbmFnZXIoe1xyXG4gICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBgbGUtZGlhbG9nICR7dHlwZW9mIHRoaXMuc2V0dGluZ3MucG9zaXRpb24gPT09ICdzdHJpbmcnID8gdGhpcy5zZXR0aW5ncy5wb3NpdGlvbiA6ICcnfWAsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgY2xvc2VCdG4gPSBFbGVtZW50TWFuYWdlcih7XHJcbiAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdsZS1kaWFsb2ctY2xvc2UnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY2xvc2VCdG4ub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gRWxlbWVudE1hbmFnZXIoe1xyXG4gICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbGUtZGlhbG9nLWNvbnRhaW5lcidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29udGVudDogdGhpcy5zZXR0aW5ncy5jb250ZW50XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5yb290LmFwcGVuZChjbG9zZUJ0bik7XHJcbiAgICAgICAgdGhpcy5yb290LmFwcGVuZCh0aGlzLmNvbnRhaW5lcik7XHJcbiAgICAgICAgaWYodGhpcy5zZXR0aW5ncy5mb290ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LmFwcGVuZCh0aGlzLnNldHRpbmdzLmZvb3Rlci5yb290IHx8IHRoaXMuc2V0dGluZ3MuZm9vdGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMucm9vdC5nZXQoMCkpXHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY2xvc2VPbkVzY2FwZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAgdGhpcy4jcmVtb3ZlTGlzdGVuZXIpIDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Mub3ZlcmxheSkge1xyXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXkoKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuICAgIG9wZW4oKSB7XHJcbiAgICAgICAgaWYodGhpcy5zZXR0aW5ncy5wb3NpdGlvbi5ub2RlTmFtZSAmJiB0aGlzLnNldHRpbmdzLnBvc2l0aW9uLm93bmVyRG9jdW1lbnQgPT09IHRoaXMuc2V0dGluZ3MuZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgdmFyIGVsID0gdGhpcy5zZXR0aW5ncy5wb3NpdGlvbjtcclxuICAgICAgICAgICAgdmFyIGRvYyA9IGVsLm93bmVyRG9jdW1lbnQ7XHJcbiAgICAgICAgICAgIHZhciB3aW4gPSBlbC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xyXG4gICAgICAgICAgICB2YXIgb2ZmID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgb3RvcCA9IG9mZi50b3AgKyB3aW4uc2Nyb2xsWTtcclxuICAgICAgICAgICAgdmFyIG9sZWZ0ID0gb2ZmLmxlZnQgKyBlbC5vZmZzZXRXaWR0aCArIHdpbi5zY3JvbGxYO1xyXG4gICAgICAgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdC5nZXQoMCk7XHJcbiAgICAgICAgICAgIGlmKG90b3AgKyByb290Lm9mZnNldEhlaWdodCA+IHdpbi5pbm5lckhlaWdodCArIHdpbi5zY3JvbGxZKSB7XHJcbiAgICAgICAgICAgICAgICBvdG9wIC09ICgob3RvcCArIHJvb3Qub2Zmc2V0SGVpZ2h0KSAtICggd2luLmlubmVySGVpZ2h0ICsgd2luLnNjcm9sbFkgKSApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKG9sZWZ0ICsgcm9vdC5vZmZzZXRXaWR0aCAgPiB3aW4uaW5uZXJXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgb2xlZnQgLT0gKChvbGVmdCArIHJvb3Qub2Zmc2V0V2lkdGgpIC0gKCB3aW4uaW5uZXJXaWR0aCAgKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yb290LmNzcyh7XHJcbiAgICAgICAgICAgICAgICB0b3A6IG90b3AsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBvbGVmdCxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLnNldHRpbmdzLm1vZGVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucm9vdC5hZGRDbGFzcygnbGUtZGlhbG9nLW9wZW5lZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZSgpIHtcclxuXHJcbiAgICAgICAgdGhpcy5yb290Lm9uKCd0cmFuc2l0aW9uZW5kJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMub3ZlcmxheSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJvb3QucmVtb3ZlQ2xhc3MoJ2xlLWRpYWxvZy1vcGVuZWQnKTtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5jbG9zZU9uRXNjYXBlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsICB0aGlzLiNyZW1vdmVMaXN0ZW5lcikgO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRpc3BhdGNoKCdjbG9zZScpO1xyXG5cclxuICAgIH1cclxuICAgIG92ZXJsYXkoKSB7XHJcbiAgICAgICAgdGhpcy5vdmVybGF5ID0gRWxlbWVudE1hbmFnZXIoe1xyXG4gICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbGUtZGlhbG9nLW92ZXJsYXknXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLm92ZXJsYXkuZ2V0KDApKVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBDb25maXJtID0gZnVuY3Rpb24gKGNvbnRlbnQsIGMpIHtcclxuICAgIGNvbnN0IGZvb3RlciA9IGRpYWxvZ0Zvb3RlcigpO1xyXG4gIFxyXG4gICAgY29uc3QgZGlhbG9nID0gbmV3IERpYWxvZyh7XHJcbiAgICAgICAgY29udGVudCwgZm9vdGVyOiBmb290ZXIuZm9vdGVyLmdldCgwKSwgcG9zaXRpb246ICdjZW50ZXJlZCdcclxuICAgIH0pO1xyXG4gICAgZm9vdGVyLmNhbmNlbC5vbignY2xpY2snLCBmdW5jdGlvbiAoKXtcclxuICAgICAgICBkaWFsb2cucmVtb3ZlKCk7XHJcbiAgICB9KTtcclxuICAgIGZvb3Rlci5vay5vbignY2xpY2snLCBmdW5jdGlvbiAoKXtcclxuICAgICAgICBpZihjKXtcclxuICAgICAgICAgICAgYy5jYWxsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpYWxvZy5yZW1vdmUoKVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZGlhbG9nXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBBbGVydCA9IGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICByZXR1cm4gbmV3IERpYWxvZyh7XHJcbiAgICAgICAgY29udGVudDogdGV4dFxyXG4gICAgfSk7XHJcbn07XHJcbiIsImltcG9ydCB7SGFuZGxlTWVudX0gZnJvbSBcIi4uL2hhbmRsZS1tZW51LmpzXCI7XHJcbmltcG9ydCB7RWxlbWVudE1hbmFnZXJ9IGZyb20gXCIuLi9jbGFzc2VzL2VsZW1lbnQuanNcIjtcclxuaW1wb3J0IHsgQ29uZmlybSB9IGZyb20gXCIuLi9jbGFzc2VzL2RpYWxvZy5qc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEVsZW1lbnRIYW5kbGVDb250ZW50ID0gZnVuY3Rpb24gKHByb3RvKSB7XHJcbiAgICB0aGlzLnJvb3QgPSBFbGVtZW50TWFuYWdlcih7XHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgaWQ6ICdtdy1oYW5kbGUtaXRlbS1lbGVtZW50LXJvb3QnXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgY2xvbmVBYmxlTWVudSA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnRHVwbGljYXRlJyAsXHJcbiAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICBpY29uOiAnPHN2ZyBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTksMjFIOFY3SDE5TTE5LDVIOEEyLDIgMCAwLDAgNiw3VjIxQTIsMiAwIDAsMCA4LDIzSDE5QTIsMiAwIDAsMCAyMSwyMVY3QTIsMiAwIDAsMCAxOSw1TTE2LDFINEEyLDIgMCAwLDAgMiwzVjE3SDRWM0gxNlYxWlwiPjwvcGF0aD48L3N2Zz4nLFxyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1oYW5kbGUtY2xvbmUtYnV0dG9uJyxcclxuICAgICAgICAgICAgb25UYXJnZXQ6IGZ1bmN0aW9uICh0YXJnZXQsIHNlbGZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmTm9kZS5zdHlsZS5kaXNwbGF5ID0gdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY2xvbmVhYmxlJykgPyAnJyA6ICdub25lJztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBFbGVtZW50TWFuYWdlcihlbCkuYWZ0ZXIoZWwub3V0ZXJIVE1MKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnTW92ZSBiYWNrd2FyZCcgLFxyXG4gICAgICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICAgICAgaWNvbjogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgPjxwYXRoIGQ9XCJNMjAgMTMuNUMyMCAxNy4wOSAxNy4wOSAyMCAxMy41IDIwSDZWMThIMTMuNUMxNiAxOCAxOCAxNiAxOCAxMy41UzE2IDkgMTMuNSA5SDcuODNMMTAuOTEgMTIuMDlMOS41IDEzLjVMNCA4TDkuNSAyLjVMMTAuOTIgMy45MUw3LjgzIDdIMTMuNUMxNy4wOSA3IDIwIDkuOTEgMjAgMTMuNVpcIiAvPjwvc3ZnPicsXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWhhbmRsZS1tb3ZlLWJhY2stYnV0dG9uJyxcclxuICAgICAgICAgICAgb25UYXJnZXQ6IGZ1bmN0aW9uICh0YXJnZXQsIHNlbGZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0Nsb25lYWJsZSA9IHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2Nsb25lYWJsZScpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IHRhcmdldC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgc2VsZk5vZGUuc3R5bGUuZGlzcGxheSA9IGlzQ2xvbmVhYmxlICYmIHByZXYgPyAnJyA6ICdub25lJztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgaWYocHJldikge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXYuYmVmb3JlKGVsKTtcclxuICAgICAgICAgICAgICAgICAgICBwcm90by5lbGVtZW50SGFuZGxlLnNldChlbClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aXRsZTogJ01vdmUgZm9yd2FyZCcgLFxyXG4gICAgICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICAgICAgaWNvbjogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCI+PHBhdGggZD1cIk0xMC41IDE4SDE4VjIwSDEwLjVDNi45MSAyMCA0IDE3LjA5IDQgMTMuNVM2LjkxIDcgMTAuNSA3SDE2LjE3TDEzLjA4IDMuOTFMMTQuNSAyLjVMMjAgOEwxNC41IDEzLjVMMTMuMDkgMTIuMDlMMTYuMTcgOUgxMC41QzggOSA2IDExIDYgMTMuNVM4IDE4IDEwLjUgMThaXCIgLz48L3N2Zz4nLFxyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1oYW5kbGUtbW92ZS1iYWNrLWJ1dHRvbicsXHJcbiAgICAgICAgICAgIG9uVGFyZ2V0OiBmdW5jdGlvbiAodGFyZ2V0LCBzZWxmTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNDbG9uZWFibGUgPSB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjbG9uZWFibGUnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgc2VsZk5vZGUuc3R5bGUuZGlzcGxheSA9IGlzQ2xvbmVhYmxlICYmIG5leHQgID8gJycgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gXHJcbiAgICAgICAgICAgICAgICBpZihuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5hZnRlcihlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvdG8uZWxlbWVudEhhbmRsZS5zZXQoZWwpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICBdO1xyXG4gICAgXHJcbiAgICB0aGlzLm1lbnUgPSBuZXcgSGFuZGxlTWVudSh7XHJcbiAgICAgICAgaWQ6ICdtdy1oYW5kbGUtaXRlbS1lbGVtZW50LW1lbnUnLFxyXG4gICAgICAgIHRpdGxlOiAnRWxlbWVudCcsXHJcbiAgICAgICAgYnV0dG9uczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0VkaXQnICxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgPjxwYXRoIGQ9XCJNMjAuNzEsNy4wNEMyMS4xLDYuNjUgMjEuMSw2IDIwLjcxLDUuNjNMMTguMzcsMy4yOUMxOCwyLjkgMTcuMzUsMi45IDE2Ljk2LDMuMjlMMTUuMTIsNS4xMkwxOC44Nyw4Ljg3TTMsMTcuMjVWMjFINi43NUwxNy44MSw5LjkzTDE0LjA2LDYuMThMMywxNy4yNVpcIiAvPjwvc3ZnPicsXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1oYW5kbGUtYWRkLWJ1dHRvbicsXHJcbiAgICAgICAgICAgICAgICBvblRhcmdldDogZnVuY3Rpb24gKHRhcmdldCwgc2VsZk5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0YXJnZXQpXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIG13LmFwcC5lZGl0b3IuZGlzcGF0Y2goJ2VkaXROb2RlUmVxdWVzdCcsIGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdJbnNlcnQgbW9kdWxlJyAsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICAgICAgICAgIGljb246ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiID48cGF0aCBkPVwiTTEyLDIwQzcuNTksMjAgNCwxNi40MSA0LDEyQzQsNy41OSA3LjU5LDQgMTIsNEMxNi40MSw0IDIwLDcuNTkgMjAsMTJDMjAsMTYuNDEgMTYuNDEsMjAgMTIsMjBNMTIsMkExMCwxMCAwIDAsMCAyLDEyQTEwLDEwIDAgMCwwIDEyLDIyQTEwLDEwIDAgMCwwIDIyLDEyQTEwLDEwIDAgMCwwIDEyLDJNMTMsN0gxMVYxMUg3VjEzSDExVjE3SDEzVjEzSDE3VjExSDEzVjdaXCIgLz48L3N2Zz4nLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXctaGFuZGxlLWFkZC1idXR0b24nLFxyXG4gICAgICAgICAgICAgICAgb25UYXJnZXQ6IGZ1bmN0aW9uICh0YXJnZXQsIHNlbGZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGFyZ2V0KVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbXcuYXBwLmVkaXRvci5kaXNwYXRjaCgnaW5zZXJ0TW9kdWxlUmVxdWVzdCcsIGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnU2V0dGluZ3MnICxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xMiw4QTQsNCAwIDAsMSAxNiwxMkE0LDQgMCAwLDEgMTIsMTZBNCw0IDAgMCwxIDgsMTJBNCw0IDAgMCwxIDEyLDhNMTIsMTBBMiwyIDAgMCwwIDEwLDEyQTIsMiAwIDAsMCAxMiwxNEEyLDIgMCAwLDAgMTQsMTJBMiwyIDAgMCwwIDEyLDEwTTEwLDIyQzkuNzUsMjIgOS41NCwyMS44MiA5LjUsMjEuNThMOS4xMywxOC45M0M4LjUsMTguNjggNy45NiwxOC4zNCA3LjQ0LDE3Ljk0TDQuOTUsMTguOTVDNC43MywxOS4wMyA0LjQ2LDE4Ljk1IDQuMzQsMTguNzNMMi4zNCwxNS4yN0MyLjIxLDE1LjA1IDIuMjcsMTQuNzggMi40NiwxNC42M0w0LjU3LDEyLjk3TDQuNSwxMkw0LjU3LDExTDIuNDYsOS4zN0MyLjI3LDkuMjIgMi4yMSw4Ljk1IDIuMzQsOC43M0w0LjM0LDUuMjdDNC40Niw1LjA1IDQuNzMsNC45NiA0Ljk1LDUuMDVMNy40NCw2LjA1QzcuOTYsNS42NiA4LjUsNS4zMiA5LjEzLDUuMDdMOS41LDIuNDJDOS41NCwyLjE4IDkuNzUsMiAxMCwySDE0QzE0LjI1LDIgMTQuNDYsMi4xOCAxNC41LDIuNDJMMTQuODcsNS4wN0MxNS41LDUuMzIgMTYuMDQsNS42NiAxNi41Niw2LjA1TDE5LjA1LDUuMDVDMTkuMjcsNC45NiAxOS41NCw1LjA1IDE5LjY2LDUuMjdMMjEuNjYsOC43M0MyMS43OSw4Ljk1IDIxLjczLDkuMjIgMjEuNTQsOS4zN0wxOS40MywxMUwxOS41LDEyTDE5LjQzLDEzTDIxLjU0LDE0LjYzQzIxLjczLDE0Ljc4IDIxLjc5LDE1LjA1IDIxLjY2LDE1LjI3TDE5LjY2LDE4LjczQzE5LjU0LDE4Ljk1IDE5LjI3LDE5LjA0IDE5LjA1LDE4Ljk1TDE2LjU2LDE3Ljk1QzE2LjA0LDE4LjM0IDE1LjUsMTguNjggMTQuODcsMTguOTNMMTQuNSwyMS41OEMxNC40NiwyMS44MiAxNC4yNSwyMiAxNCwyMkgxME0xMS4yNSw0TDEwLjg4LDYuNjFDOS42OCw2Ljg2IDguNjIsNy41IDcuODUsOC4zOUw1LjQ0LDcuMzVMNC42OSw4LjY1TDYuOCwxMC4yQzYuNCwxMS4zNyA2LjQsMTIuNjQgNi44LDEzLjhMNC42OCwxNS4zNkw1LjQzLDE2LjY2TDcuODYsMTUuNjJDOC42MywxNi41IDkuNjgsMTcuMTQgMTAuODcsMTcuMzhMMTEuMjQsMjBIMTIuNzZMMTMuMTMsMTcuMzlDMTQuMzIsMTcuMTQgMTUuMzcsMTYuNSAxNi4xNCwxNS42MkwxOC41NywxNi42NkwxOS4zMiwxNS4zNkwxNy4yLDEzLjgxQzE3LjYsMTIuNjQgMTcuNiwxMS4zNyAxNy4yLDEwLjJMMTkuMzEsOC42NUwxOC41Niw3LjM1TDE2LjE1LDguMzlDMTUuMzgsNy41IDE0LjMyLDYuODYgMTMuMTIsNi42MkwxMi43NSw0SDExLjI1WlwiIC8+PC9zdmc+JyxcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWhhbmRsZS1pbnNlcnQtYnV0dG9uJyxcclxuICAgICAgICAgICAgICAgIG9uVGFyZ2V0OiBmdW5jdGlvbiAodGFyZ2V0LCBzZWxmTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRhcmdldClcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChlbCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwcm90by5kaWFsb2coe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAuLi5jbG9uZUFibGVNZW51LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogcHJvdG8ubGFuZygnRGVsZXRlJyksXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICAgICAgICAgIGljb246ICc8c3ZnIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwiY3VycmVudENvbG9yXCI+PHBhdGggZD1cIk05LDNWNEg0VjZINVYxOUEyLDIgMCAwLDAgNywyMUgxN0EyLDIgMCAwLDAgMTksMTlWNkgyMFY0SDE1VjNIOU03LDZIMTdWMTlIN1Y2TTksOFYxN0gxMVY4SDlNMTMsOFYxN0gxNVY4SDEzWlwiIC8+PC9zdmc+JyxcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWhhbmRsZS1pbnNlcnQtYnV0dG9uJyxcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgQ29uZmlybShFbGVtZW50TWFuYWdlcignPHNwYW4+QXJlIHlvdSBzdXJlPC9zcGFuPicpLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm90by5lbGVtZW50SGFuZGxlLmhpZGUoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdLFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5tZW51LnNob3coKVxyXG5cclxuICAgIHRoaXMucm9vdC5hcHBlbmQodGhpcy5tZW51LnJvb3QpXHJcblxyXG5cclxufVxyXG5cclxuIiwiaW1wb3J0IHtIYW5kbGVNZW51fSBmcm9tIFwiLi4vaGFuZGxlLW1lbnUuanNcIjtcclxuaW1wb3J0IHtFbGVtZW50TWFuYWdlcn0gZnJvbSBcIi4uL2NsYXNzZXMvZWxlbWVudC5qc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1vZHVsZUhhbmRsZUNvbnRlbnQgPSBmdW5jdGlvbiAocm9vdFNjb3BlKSB7XHJcbiAgICB2YXIgc2NvcGUgPSB0aGlzO1xyXG4gICAgdGhpcy5yb290ID0gRWxlbWVudE1hbmFnZXIoe1xyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgIGlkOiAnbXctaGFuZGxlLWl0ZW0tbW9kdWxlLXJvb3QnLFxyXG4gICAgICAgICAgICBjb250ZW50RWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiBcclxuXHJcbiAgICB2YXIgc3RhdGljTWVudSA9IG5ldyBIYW5kbGVNZW51KHtcclxuICAgICAgICBpZDogJ213LWhhbmRsZS1pdGVtLWVsZW1lbnQtbWVudS1kZWZhdWx0JyxcclxuICAgICAgICB0aXRsZTogJ01vZHVsZScsXHJcbiAgICAgICAgcm9vdFNjb3BlOiByb290U2NvcGUsXHJcbiAgICAgICAgYnV0dG9uczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiU2V0dGluZ3NcIixcclxuICAgICAgICAgICAgICAgIFwiaWNvblwiOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIj48cGF0aCBkPVwiTTIwLjcxLDcuMDRDMjEuMSw2LjY1IDIxLjEsNiAyMC43MSw1LjYzTDE4LjM3LDMuMjlDMTgsMi45IDE3LjM1LDIuOSAxNi45NiwzLjI5TDE1LjEyLDUuMTJMMTguODcsOC44N00zLDE3LjI1VjIxSDYuNzVMMTcuODEsOS45M0wxNC4wNiw2LjE4TDMsMTcuMjVaXCIgLz48L3N2Zz4nLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gbXcuYXBwLmdldCgnbGl2ZUVkaXQnKS5oYW5kbGVzLmdldCgnbW9kdWxlJykuZ2V0VGFyZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbXcuYXBwLmVkaXRvci5kaXNwYXRjaCgnb25Nb2R1bGVTZXR0aW5nc1JlcXVlc3QnLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gdGFyZ2V0LmRhdGFzZXQudHlwZSB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKCd0eXBlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHR5cGUudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG13LmFwcC5lZGl0b3IuZGlzcGF0Y2goJ29uTW9kdWxlU2V0dGluZ3NSZXF1ZXN0QCcgKyB0eXBlLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uVGFyZ2V0OiBmdW5jdGlvbiAodGFyZ2V0LCBzZWxmTm9kZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZih0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCduby1zZXR0aW5ncycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGZOb2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZk5vZGUuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdLFxyXG4gICAgfSlcclxuICAgIHRoaXMubWVudSA9IG5ldyBIYW5kbGVNZW51KHtcclxuICAgICAgICBpZDogJ213LWhhbmRsZS1pdGVtLWVsZW1lbnQtbWVudScsXHJcbiAgICAgICAgdGl0bGU6ICdNb2R1bGUnLFxyXG4gICAgICAgIHJvb3RTY29wZTogcm9vdFNjb3BlLFxyXG4gICAgICAgIGJ1dHRvbnM6IFtcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgIF0sXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLm1lbnUuc2hvdygpO1xyXG4gICAgc3RhdGljTWVudS5zaG93KCk7XHJcblxyXG4gICAgdGhpcy5yb290LmFwcGVuZCh0aGlzLm1lbnUucm9vdCk7XHJcbiAgICB0aGlzLnJvb3QuYXBwZW5kKHN0YXRpY01lbnUucm9vdCk7XHJcblxyXG59O1xyXG5cclxuIiwiaW1wb3J0IHtIYW5kbGVNZW51fSBmcm9tIFwiLi4vaGFuZGxlLW1lbnUuanNcIjtcclxuaW1wb3J0IHtFbGVtZW50TWFuYWdlcn0gZnJvbSBcIi4uL2NsYXNzZXMvZWxlbWVudC5qc1wiO1xyXG5pbXBvcnQge0NvbmZpcm19IGZyb20gXCIuLi9jbGFzc2VzL2RpYWxvZy5qc1wiO1xyXG5cclxuY29uc3QgX2dldE1vZHVsZXNEYXRhQ2FjaGUgPSB7fTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRNb2R1bGVzRGF0YSA9ICh1KSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICBpZihBcnJheS5pc0FycmF5KHUpKSB7XHJcbiAgICAgICAgICAgcmVzb2x2ZSh1KVxyXG4gICAgICAgfSBlbHNlIGlmKHR5cGVvZiB1ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgIGlmKF9nZXRNb2R1bGVzRGF0YUNhY2hlW3VdKSB7XHJcbiAgICAgICAgICAgICAgIHJlc29sdmUoX2dldE1vZHVsZXNEYXRhQ2FjaGVbdV0pXHJcbiAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgZmV0Y2godSwge21vZGU6ICdjb3JzJ30pLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgICAgIF9nZXRNb2R1bGVzRGF0YUNhY2hlW3VdID0gcmVzO1xyXG4gICAgICAgICAgICAgICAgICAgcmVzb2x2ZSggcmVzIClcclxuICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICB9XHJcbiAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuY29uc3Qgc2luZ2xlTW9kdWxlSXRlbVJlbmRlciA9IChkYXRhLCB0eXBlKSA9PiB7XHJcbiAgICBjb25zdCBlbCA9IEVsZW1lbnRNYW5hZ2VyKHtcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdsZS1zZWxlY3RhYmxlLWl0ZW1zLWxpc3QtaXRlbScsXHJcbiAgICAgICAgICAgIG1vZHVsZUlkOiBkYXRhLmlkLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udGVudDogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwcm9wczogeyBjbGFzc05hbWU6ICdsZS1zZWxlY3RhYmxlLWl0ZW1zLWxpc3QtaW1hZ2UnLCBzdHlsZTogeyBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoJyArIChkYXRhLmljb24gfHwgZGF0YS5zY3JlZW5zaG90KSArICcpJyB9fSxcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbGUtc2VsZWN0YWJsZS1pdGVtcy1saXN0LXRpdGxlJyxcclxuICAgICAgICAgICAgICAgICAgICBpbm5lckhUTUw6IGRhdGEubmFtZSxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH0pO1xyXG5cclxuICAgIGVsLmdldCgwKS5fX2RhdGEgPSBkYXRhXHJcblxyXG4gICAgcmV0dXJuIGVsO1xyXG59XHJcblxyXG5jb25zdCBfbG9hZE1vZHVsZUNhY2hlID0ge31cclxuXHJcbmV4cG9ydCBjb25zdCBsb2FkTW9kdWxlID0gKG9iaiwgZW5kcG9pbnQpID0+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICBpZighb2JqIHx8ICghb2JqLmlkICYmICFvYmoubGF5b3V0X2ZpbGUpKXtcclxuICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIG9uZHJvcDogdHJ1ZSxcclxuICAgICAgICAgICAgaWQ6IG9iai5pZCB8fCAnbW9kdWxlLScgKyBEYXRlLm5vdygpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKG9iai5tb2R1bGUpIHtcclxuICAgICAgICAgICAgcGFyYW1zWydkYXRhLW1vZHVsZS1uYW1lJ10gPSBvYmoubW9kdWxlO1xyXG4gICAgICAgIH0gZWxzZSBpZihvYmoudHlwZSA9PT0gJ2xheW91dCcpIHtcclxuICAgICAgICAgICAgcGFyYW1zWydkYXRhLW1vZHVsZS1uYW1lJ10gPSAnbGF5b3V0cyc7XHJcbiAgICAgICAgICAgIHBhcmFtc1sndGVtcGxhdGUnXSA9IG9iai5sYXlvdXRfZmlsZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbmYgPSB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZmV0Y2goZW5kcG9pbnQsIGNvbmYpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3AgPT4gcmVzcC50ZXh0KCkpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3AgPT4gcmVzb2x2ZShyZXNwKSlcclxuXHJcblxyXG4gICAgfSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IG1vZHVsZXNEYXRhUmVuZGVyID0gKGRhdGEsIHR5cGUpID0+IHtcclxuICAgIGNvbnN0IGVsID0gRWxlbWVudE1hbmFnZXIoe1xyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2xlLXNlbGVjdGFibGUtaXRlbXMtbGlzdCBsZS1zZWxlY3RhYmxlLWl0ZW1zLWxpc3QtdHlwZS0nICsgdHlwZVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdmFyIGNhdHMgPSBFbGVtZW50TWFuYWdlcih7XHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnbGUtc2VsZWN0YWJsZS1pdGVtcy1saXN0IGxlLXNlbGVjdGFibGUtaXRlbXMtbGlzdC10eXBlLScgKyB0eXBlXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pe1xyXG4gICAgICAgIGVsLmFwcGVuZChzaW5nbGVNb2R1bGVJdGVtUmVuZGVyKGl0ZW0pKVxyXG4gICAgfSlcclxuXHJcbiAgICByZXR1cm4gZWw7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBMYXlvdXRIYW5kbGVDb250ZW50ID0gZnVuY3Rpb24gKHJvb3RTY29wZSkge1xyXG4gICAgdmFyIHNjb3BlID0gdGhpcztcclxuICAgIHRoaXMucm9vdCA9IEVsZW1lbnRNYW5hZ2VyKHtcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICBpZDogJ213LWhhbmRsZS1pdGVtLWxheW91dC1yb290J1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgX2UgPSB7fTtcclxuICAgIHRoaXMub24gPSAoZSwgZikgPT4geyBfZVtlXSA/IF9lW2VdLnB1c2goZikgOiAoX2VbZV0gPSBbZl0pIH07XHJcbiAgICB0aGlzLmRpc3BhdGNoID0gKGUsIGYpID0+IHsgX2VbZV0gPyBfZVtlXS5mb3JFYWNoKCAoYykgPT4geyBjLmNhbGwodGhpcywgZik7IH0pIDogJyc7IH07XHJcbiAgICB0aGlzLm1lbnUgPSBuZXcgSGFuZGxlTWVudSh7XHJcbiAgICAgICAgaWQ6ICdtdy1oYW5kbGUtaXRlbS1sYXlvdXQtbWVudScsXHJcbiAgICAgICAgdGl0bGU6IHJvb3RTY29wZS5sYW5nKCdMYXlvdXQnKSxcclxuICAgICAgICByb290U2NvcGU6IHJvb3RTY29wZSxcclxuICAgICAgICBidXR0b25zOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiByb290U2NvcGUubGFuZygnU2V0dGluZ3MnKSxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogJzxzdmcgZmlsbD1cImN1cnJlbnRDb2xvclwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjIxXCIgaGVpZ2h0PVwiMjFcIiB2aWV3Qm94PVwiMCAwIDEzLjMgMTUuOVwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCI+PHBhdGggZD1cIk04LjIsMi40TDExLDUuMWwtOC4yLDguMkgwdi0yLjhMOC4yLDIuNHogTTExLjgsNC4zTDksMS42bDEuNC0xLjRDMTAuNSwwLjEsMTAuNywwLDEwLjksMGMwLjIsMCwwLjQsMC4xLDAuNSwwLjJsMS43LDEuN2MwLjEsMC4xLDAuMiwwLjMsMC4yLDAuNVMxMy4zLDIuOCwxMy4xLDNMMTEuOCw0LjN6XCIvPjxyZWN0IHk9XCIxNC41XCIgd2lkdGg9XCIxMlwiIGhlaWdodD1cIjEuNFwiLz48L3N2Zz4nLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXctaGFuZGxlLWluc2VydC1idXR0b24nLFxyXG5cclxuICAgICAgICAgICAgICAgIG1lbnU6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiByb290U2NvcGUubGFuZygnQWRkIHNvbWV0aGluZycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiByb290U2NvcGUubGFuZygnQWRkIHNvbWV0aGluZycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnPHN2ZyBmaWxsPVwiY3VycmVudENvbG9yXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZlcnNpb249XCIxLjFcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xMiw4QTQsNCAwIDAsMSAxNiwxMkE0LDQgMCAwLDEgMTIsMTZBNCw0IDAgMCwxIDgsMTJBNCw0IDAgMCwxIDEyLDhNMTIsMTBBMiwyIDAgMCwwIDEwLDEyQTIsMiAwIDAsMCAxMiwxNEEyLDIgMCAwLDAgMTQsMTJBMiwyIDAgMCwwIDEyLDEwTTEwLDIyQzkuNzUsMjIgOS41NCwyMS44MiA5LjUsMjEuNThMOS4xMywxOC45M0M4LjUsMTguNjggNy45NiwxOC4zNCA3LjQ0LDE3Ljk0TDQuOTUsMTguOTVDNC43MywxOS4wMyA0LjQ2LDE4Ljk1IDQuMzQsMTguNzNMMi4zNCwxNS4yN0MyLjIxLDE1LjA1IDIuMjcsMTQuNzggMi40NiwxNC42M0w0LjU3LDEyLjk3TDQuNSwxMkw0LjU3LDExTDIuNDYsOS4zN0MyLjI3LDkuMjIgMi4yMSw4Ljk1IDIuMzQsOC43M0w0LjM0LDUuMjdDNC40Niw1LjA1IDQuNzMsNC45NiA0Ljk1LDUuMDVMNy40NCw2LjA1QzcuOTYsNS42NiA4LjUsNS4zMiA5LjEzLDUuMDdMOS41LDIuNDJDOS41NCwyLjE4IDkuNzUsMiAxMCwySDE0QzE0LjI1LDIgMTQuNDYsMi4xOCAxNC41LDIuNDJMMTQuODcsNS4wN0MxNS41LDUuMzIgMTYuMDQsNS42NiAxNi41Niw2LjA1TDE5LjA1LDUuMDVDMTkuMjcsNC45NiAxOS41NCw1LjA1IDE5LjY2LDUuMjdMMjEuNjYsOC43M0MyMS43OSw4Ljk1IDIxLjczLDkuMjIgMjEuNTQsOS4zN0wxOS40MywxMUwxOS41LDEyTDE5LjQzLDEzTDIxLjU0LDE0LjYzQzIxLjczLDE0Ljc4IDIxLjc5LDE1LjA1IDIxLjY2LDE1LjI3TDE5LjY2LDE4LjczQzE5LjU0LDE4Ljk1IDE5LjI3LDE5LjA0IDE5LjA1LDE4Ljk1TDE2LjU2LDE3Ljk1QzE2LjA0LDE4LjM0IDE1LjUsMTguNjggMTQuODcsMTguOTNMMTQuNSwyMS41OEMxNC40NiwyMS44MiAxNC4yNSwyMiAxNCwyMkgxME0xMS4yNSw0TDEwLjg4LDYuNjFDOS42OCw2Ljg2IDguNjIsNy41IDcuODUsOC4zOUw1LjQ0LDcuMzVMNC42OSw4LjY1TDYuOCwxMC4yQzYuNCwxMS4zNyA2LjQsMTIuNjQgNi44LDEzLjhMNC42OCwxNS4zNkw1LjQzLDE2LjY2TDcuODYsMTUuNjJDOC42MywxNi41IDkuNjgsMTcuMTQgMTAuODcsMTcuMzhMMTEuMjQsMjBIMTIuNzZMMTMuMTMsMTcuMzlDMTQuMzIsMTcuMTQgMTUuMzcsMTYuNSAxNi4xNCwxNS42MkwxOC41NywxNi42NkwxOS4zMiwxNS4zNkwxNy4yLDEzLjgxQzE3LjYsMTIuNjQgMTcuNiwxMS4zNyAxNy4yLDEwLjJMMTkuMzEsOC42NUwxOC41Niw3LjM1TDE2LjE1LDguMzlDMTUuMzgsNy41IDE0LjMyLDYuODYgMTMuMTIsNi42MkwxMi43NSw0SDExLjI1WlwiIC8+PC9zdmc+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXctaGFuZGxlLWluc2VydC1idXR0b24nLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogcm9vdFNjb3BlLmxhbmcoJ1NldHRpbmdzMTIxMicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRG8gYWxlcnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1oYW5kbGUtaW5zZXJ0LWJ1dHRvbicsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6IHJvb3RTY29wZS5sYW5nKCdDbG9uZScpLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogJycsXHJcbiAgICAgICAgICAgICAgICBpY29uOiAnPHN2ZyBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTksMjFIOFY3SDE5TTE5LDVIOEEyLDIgMCAwLDAgNiw3VjIxQTIsMiAwIDAsMCA4LDIzSDE5QTIsMiAwIDAsMCAyMSwyMVY3QTIsMiAwIDAsMCAxOSw1TTE2LDFINEEyLDIgMCAwLDAgMiwzVjE3SDRWM0gxNlYxWlwiIC8+PC9zdmc+JyxcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWhhbmRsZS1pbnNlcnQtYnV0dG9uJyxcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24gKHRhcmdldCwgc2VsZk5vZGUsIHJvb3RTY29wZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IHRhcmdldC5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgRWxlbWVudE1hbmFnZXIoJ1tpZF0nLCBlbCkuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlkID0gJ2xlLWlkLScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBFbGVtZW50TWFuYWdlcih0YXJnZXQpLmFmdGVyKGVsLmlubmVySFRNTCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0VsID0gdGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICBtdy5yZWxvYWRfbW9kdWxlKG5ld0VsLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb290U2NvcGUuc3RhdGVtYW5hZ2VyLnJlY29yZCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG13LnRvb2xzLmZpcnN0UGFyZW50V2l0aENsYXNzKHRhcmdldCwgJ2VkaXQnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwYXJlbnQuaW5uZXJIVE1MXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0VsLnNjcm9sbEludG9WaWV3KHtiZWhhdmlvcjogXCJzbW9vdGhcIiwgYmxvY2s6IFwic3RhcnRcIiwgaW5saW5lOiBcInN0YXJ0XCJ9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiByb290U2NvcGUubGFuZygnTW92ZSBEb3duJyksXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAnJyxcclxuICAgICAgICAgICAgICAgIGljb246ICc8c3ZnIGZpbGw9XCJjdXJyZW50Q29sb3JcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMTEsNEgxM1YxNkwxOC41LDEwLjVMMTkuOTIsMTEuOTJMMTIsMTkuODRMNC4wOCwxMS45Mkw1LjUsMTAuNUwxMSwxNlY0WlwiIC8+PC9zdmc+JyxcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWhhbmRsZS1pbnNlcnQtYnV0dG9uJyxcclxuICAgICAgICAgICAgICAgIG9uVGFyZ2V0OiBmdW5jdGlvbiAodGFyZ2V0LCBzZWxmTm9kZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZih0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGZOb2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZk5vZGUuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uICh0YXJnZXQsIHNlbGZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gdGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICBpZighcHJldikgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmZUYXJnZXQgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9mZlByZXYgPSBwcmV2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0byA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZUYXJnZXQudG9wIDwgb2ZmUHJldi50b3ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG8gPSAtKG9mZlRhcmdldC50b3AgLSBvZmZQcmV2LnRvcClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKFwibXctbGUtdGFyZ2V0LXRvLWFuaW1hdGVcIilcclxuICAgICAgICAgICAgICAgICAgICBwcmV2LmNsYXNzTGlzdC5hZGQoXCJtdy1sZS10YXJnZXQtdG8tYW5pbWF0ZVwiKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoJyt0bysncHgpJztcclxuICAgICAgICAgICAgICAgICAgICBwcmV2LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKCcrKC10bykrJ3B4KSc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGFyZ2V0LCBwcmV2Lm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoXCJtdy1sZS10YXJnZXQtdG8tYW5pbWF0ZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2LmNsYXNzTGlzdC5yZW1vdmUoXCJtdy1sZS10YXJnZXQtdG8tYW5pbWF0ZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc3R5bGUudHJhbnNmb3JtID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYuc3R5bGUudHJhbnNmb3JtID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5zY3JvbGxJbnRvVmlldyh7YmVoYXZpb3I6IFwic21vb3RoXCIsIGJsb2NrOiBcInN0YXJ0XCIsIGlubGluZTogXCJzdGFydFwifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RTY29wZS5sYXlvdXRIYW5kbGUuc2V0KHRhcmdldCwgdHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICB9LCAzMDApXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogcm9vdFNjb3BlLmxhbmcoJ01vdmUgdXAnKSxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogJzxzdmcgZmlsbD1cImN1cnJlbnRDb2xvclwiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0xMywyMEgxMVY4TDUuNSwxMy41TDQuMDgsMTIuMDhMMTIsNC4xNkwxOS45MiwxMi4wOEwxOC41LDEzLjVMMTMsOFYyMFpcIiAvPjwvc3ZnPicsXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1oYW5kbGUtaW5zZXJ0LWJ1dHRvbicsXHJcbiAgICAgICAgICAgICAgICBvblRhcmdldDogZnVuY3Rpb24gKHRhcmdldCwgc2VsZk5vZGUsIHJvb3RTY29wZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQucHJldmlvdXNFbGVtZW50U2libGluZyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmTm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGZOb2RlLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAodGFyZ2V0LCBzZWxmTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXYgPSB0YXJnZXQucHJldmlvdXNFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICBpZighcHJldikgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmZUYXJnZXQgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9mZlByZXYgPSBwcmV2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0byA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZUYXJnZXQudG9wID4gb2ZmUHJldi50b3ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG8gPSAtKG9mZlRhcmdldC50b3AgLSBvZmZQcmV2LnRvcClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKFwibXctbGUtdGFyZ2V0LXRvLWFuaW1hdGVcIilcclxuICAgICAgICAgICAgICAgICAgICBwcmV2LmNsYXNzTGlzdC5hZGQoXCJtdy1sZS10YXJnZXQtdG8tYW5pbWF0ZVwiKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoJyt0bysncHgpJztcclxuICAgICAgICAgICAgICAgICAgICBwcmV2LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKCcrKC10bykrJ3B4KSc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGFyZ2V0LCBwcmV2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoXCJtdy1sZS10YXJnZXQtdG8tYW5pbWF0ZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2LmNsYXNzTGlzdC5yZW1vdmUoXCJtdy1sZS10YXJnZXQtdG8tYW5pbWF0ZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc3R5bGUudHJhbnNmb3JtID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYuc3R5bGUudHJhbnNmb3JtID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm9vdFNjb3BlLmxheW91dEhhbmRsZS5zZXQodGFyZ2V0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnNjcm9sbEludG9WaWV3KHtiZWhhdmlvcjogXCJzbW9vdGhcIiwgYmxvY2s6IFwic3RhcnRcIiwgaW5saW5lOiBcInN0YXJ0XCJ9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCAzMDApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6IHJvb3RTY29wZS5sYW5nKCdEZWxldGUnKSxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogJzxzdmcgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIj48cGF0aCAgZD1cIk05LDNWNEg0VjZINVYxOUEyLDIgMCAwLDAgNywyMUgxN0EyLDIgMCAwLDAgMTksMTlWNkgyMFY0SDE1VjNIOU03LDZIMTdWMTlIN1Y2TTksOFYxN0gxMVY4SDlNMTMsOFYxN0gxNVY4SDEzWlwiIC8+PC9zdmc+JyxcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWhhbmRsZS1pbnNlcnQtYnV0dG9uJyxcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24gKHRhcmdldCwgc2VsZk5vZGUsIHJvb3RTY29wZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIENvbmZpcm0oJ0FyZSB5b3Ugc3VyZScsIGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQucmVtb3ZlKClcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgXSxcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuYWRkQnV0dG9ucyA9IGZ1bmN0aW9uICgpe1xyXG4gXHJcbiAgICAgICAgdmFyIHBsdXNMYWJlbCA9ICdBZGQgTGF5b3V0JztcclxuXHJcbiAgICAgICAgdmFyIGhhbmRsZVBsdXMgPSB3aGljaCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goJ2luc2VydExheW91dFJlcXVlc3QnKVxyXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKCdpbnNlcnRMYXlvdXRSZXF1ZXN0T24nICsgd2hpY2guY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB3aGljaC5zbGljZSgxKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGx1c1RvcCA9IEVsZW1lbnRNYW5hZ2VyKHtcclxuICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWhhbmRsZS1pdGVtLWxheW91dC1wbHVzIG13LWhhbmRsZS1pdGVtLWxheW91dC1wbHVzLXRvcCcsXHJcbiAgICAgICAgICAgICAgICBpbm5lckhUTUw6IHJvb3RTY29wZS5sYW5nKHBsdXNMYWJlbClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnBsdXNCb3R0b20gPSBFbGVtZW50TWFuYWdlcih7XHJcbiAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1oYW5kbGUtaXRlbS1sYXlvdXQtcGx1cyBtdy1oYW5kbGUtaXRlbS1sYXlvdXQtcGx1cy1ib3R0b20nLFxyXG4gICAgICAgICAgICAgICAgaW5uZXJIVE1MOiByb290U2NvcGUubGFuZyhwbHVzTGFiZWwpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5wbHVzVG9wLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICBoYW5kbGVQbHVzKCd0b3AnKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucGx1c0JvdHRvbS5vbignY2xpY2snLCBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgaGFuZGxlUGx1cygnYm90dG9tJylcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5yb290LmFwcGVuZCh0aGlzLnBsdXNUb3ApXHJcbiAgICAgICAgdGhpcy5yb290LmFwcGVuZCh0aGlzLnBsdXNCb3R0b20pXHJcbiAgICB9XHJcbiAgICB0aGlzLm1lbnUuc2hvdygpXHJcbiAgICB0aGlzLmFkZEJ1dHRvbnMoKVxyXG4gICAgdGhpcy5yb290LmFwcGVuZCh0aGlzLm1lbnUucm9vdClcclxuXHJcbn1cclxuXHJcbiIsImNvbnN0IGkxOG4gPSAge1xyXG4gICAgZW46IHtcclxuICAgICAgICBcIkxheW91dFwiOiBcIkxheW91dFwiLFxyXG4gICAgICAgIFwiQWRkIGxheW91dFwiOiBcIkFkZCBsYXlvdXRcIixcclxuICAgICAgICBcIlRpdGxlXCI6IFwiVGl0bGVcIixcclxuICAgICAgICBcIlNldHRpbmdzXCI6IFwiU2V0dGluZ3NcIixcclxuICAgICAgICBcIlBhcmFncmFwaFwiOiBcIlBhcmFncmFwaFwiLFxyXG4gICAgICAgIFwiVGV4dFwiOiBcIlRleHRcIixcclxuICAgIH0sXHJcbiAgICBiZzoge1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGxhbmcgPSAobGFiZWwsIGxhbmcpID0+IHtcclxuICAgIGlmKCFsYW5nIHx8ICFpMThuW2xhbmddKSB7XHJcbiAgICAgICAgbGFuZyA9ICdlbic7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaTE4bltsYW5nXVtsYWJlbF0gfHwgbGFiZWw7XHJcbn1cclxuIiwiaW1wb3J0IHtIYW5kbGVNZW51fSBmcm9tIFwiLi4vaGFuZGxlLW1lbnUuanNcIjtcclxuaW1wb3J0IHtFbGVtZW50TWFuYWdlcn0gZnJvbSBcIi4uL2NsYXNzZXMvZWxlbWVudC5qc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEludGVyYWN0aW9uSGFuZGxlQ29udGVudCA9IGZ1bmN0aW9uIChwcm90bykge1xyXG4gICAgdGhpcy5yb290ID0gRWxlbWVudE1hbmFnZXIoe1xyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgIGlkOiAnbXctaGFuZGxlLWludGVyYWN0aW9uLWl0ZW0tZWxlbWVudC1yb290J1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICB0aGlzLm1lbnUgPSBuZXcgSGFuZGxlTWVudSh7XHJcbiAgICAgICAgaWQ6ICdtdy1oYW5kbGUtaXRlbS1lbGVtZW50LW1lbnUnLFxyXG4gICAgICAgIHRpdGxlOiAnRWxlbWVudCcsXHJcbiAgICAgICAgYnV0dG9uczogW1xyXG4gXHJcbiAgICAgICAgXSxcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMubWVudS5zaG93KClcclxuXHJcbiAgICB0aGlzLnJvb3QuYXBwZW5kKHRoaXMubWVudS5yb290KVxyXG5cclxuXHJcbn1cclxuXHJcbiIsImltcG9ydCB7SGFuZGxlfSBmcm9tIFwiLi9oYW5kbGUuanNcIjtcclxuaW1wb3J0IHtHZXRQb2ludGVyVGFyZ2V0c30gZnJvbSBcIi4vcG9pbnRlci5qc1wiO1xyXG5pbXBvcnQge01vZGVBdXRvfSBmcm9tIFwiLi9tb2RlLWF1dG8uanNcIjtcclxuaW1wb3J0IHtIYW5kbGVzfSBmcm9tIFwiLi9oYW5kbGVzLmpzXCI7XHJcbmltcG9ydCB7T2JqZWN0U2VydmljZX0gZnJvbSBcIi4vY2xhc3Nlcy9vYmplY3Quc2VydmljZS5qc1wiO1xyXG5pbXBvcnQge0Ryb3BwYWJsZUVsZW1lbnRBbmFseXplclNlcnZpY2V9IGZyb20gXCIuL2FuYWxpemVyLmpzXCI7XHJcbmltcG9ydCB7RHJvcEluZGljYXRvcn0gZnJvbSBcIi4vaW50ZXJhY3QuanNcIjtcclxuaW1wb3J0IHtFbGVtZW50SGFuZGxlQ29udGVudH0gZnJvbSBcIi4vaGFuZGxlcy1jb250ZW50L2VsZW1lbnQuanNcIjtcclxuaW1wb3J0IHtNb2R1bGVIYW5kbGVDb250ZW50fSBmcm9tIFwiLi9oYW5kbGVzLWNvbnRlbnQvbW9kdWxlLmpzXCI7XHJcbmltcG9ydCB7TGF5b3V0SGFuZGxlQ29udGVudH0gZnJvbSBcIi4vaGFuZGxlcy1jb250ZW50L2xheW91dC5qc1wiO1xyXG5pbXBvcnQge0VsZW1lbnRNYW5hZ2VyfSBmcm9tIFwiLi9jbGFzc2VzL2VsZW1lbnQuanNcIjtcclxuaW1wb3J0IHtsYW5nfSBmcm9tIFwiLi9pMThuLmpzXCI7XHJcbmltcG9ydCB7RGlhbG9nfSBmcm9tIFwiLi9jbGFzc2VzL2RpYWxvZy5qc1wiO1xyXG5pbXBvcnQge1Jlc2l6YWJsZX0gZnJvbSBcIi4vY2xhc3Nlcy9yZXNpemFibGUuanNcIjtcclxuaW1wb3J0IHtIYW5kbGVNZW51fSBmcm9tIFwiLi9oYW5kbGUtbWVudS5qc1wiO1xyXG5cclxuaW1wb3J0IHtUb29sdGlwfSBmcm9tIFwiLi90b29sdGlwLmpzXCI7XHJcbmltcG9ydCB7IEludGVyYWN0aW9uSGFuZGxlQ29udGVudCB9IGZyb20gXCIuL2hhbmRsZXMtY29udGVudC9pbnRlcmFjdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBEb21TZXJ2aWNlIH0gZnJvbSBcIi4vY2xhc3Nlcy9kb20uanNcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTGl2ZUVkaXQge1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHNjb3BlID0gdGhpcztcclxuXHJcbiAgICAgICAgY29uc3QgX2UgPSB7fTtcclxuICAgICAgICB0aGlzLm9uID0gKGUsIGYpID0+IHsgX2VbZV0gPyBfZVtlXS5wdXNoKGYpIDogKF9lW2VdID0gW2ZdKSB9O1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2ggPSAoZSwgZikgPT4geyBfZVtlXSA/IF9lW2VdLmZvckVhY2goIChjKSA9PiB7IGMuY2FsbCh0aGlzLCBmKTsgfSkgOiAnJzsgfTtcclxuXHJcbiAgICAgICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgICBlbGVtZW50Q2xhc3M6ICdlbGVtZW50JyxcclxuICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlSG9sZGVyOiAnYmFja2dyb3VuZC1pbWFnZS1ob2xkZXInLFxyXG4gICAgICAgICAgICBjbG9uZWFibGVDbGFzczogJ2Nsb25lYWJsZScsXHJcbiAgICAgICAgICAgIGVkaXRDbGFzczogJ2VkaXQnLFxyXG4gICAgICAgICAgICBzdGF0ZU1hbmFnZXI6IG51bGwsXHJcbiAgICAgICAgICAgIG1vZHVsZUNsYXNzOiAnbW9kdWxlJyxcclxuLyogICAgICAgICAgICByb3dDbGFzczogJ213LXJvdycsXHJcbiAgICAgICAgICAgIGNvbENsYXNzOiAnbXctY29sJyxcclxuICAgICAgICAgICAgc2FmZUVsZW1lbnRDbGFzczogJ3NhZmUtZWxlbWVudCcsXHJcbiAgICAgICAgICAgIHBsYWluRWxlbWVudENsYXNzOiAncGxhaW4tdGV4dCcsXHJcbiAgICAgICAgICAgIGVtcHR5RWxlbWVudENsYXNzOiAnZW1wdHktZWxlbWVudCcsKi9cclxuICAgICAgICAgICAgbm9kcm9wOiAnbm9kcm9wJyxcclxuICAgICAgICAgICAgYWxsb3dEcm9wOiAnYWxsb3ctZHJvcCcsXHJcbiAgICAgICAgICAgIHVuRWRpdGFibGVNb2R1bGVzOiBbXHJcbiAgICAgICAgICAgICAgICAnW3R5cGU9XCJ0ZW1wbGF0ZV9zZXR0aW5nc1wiXSdcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgZnJhbWV3b3Jrc0NsYXNzZXM6IHtcclxuICAgICAgICAgICAgICAgIGNvbDogWydjb2wnLCAnbXctY29sJ11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZG9jdW1lbnQ6IGRvY3VtZW50LFxyXG4gICAgICAgICAgICBtb2RlOiAnbWFudWFsJywgLy8gJ2F1dG8nIHwgJ21hbnVhbCdcclxuICAgICAgICAgICAgbGFuZzogJ2VuJyxcclxuICAgICAgICAgICAgc3RyaWN0OiB0cnVlLCAvLyBlbGVtZW50IGFuZCBtb2R1bGVzIHNob3VsZCBiZSBkcm9wcGVkIG9ubHkgaW4gbGF5b3V0c1xyXG4gICAgICAgICAgICBzdHJpY3RMYXlvdXRzOiBmYWxzZSwgLy8gbGF5b3V0cyBjYW4gb25seSBleGlzdCBhcyBlZGl0LWZpZWxkIGNoaWxkcmVuXHJcbiAgICAgICAgICAgIHZpZXdXaW5kb3c6IHdpbmRvdyxcclxuICBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0U2VydmljZS5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLmRvY3VtZW50ID0gdGhpcy5zZXR0aW5ncy5kb2N1bWVudDtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZU1hbmFnZXIgPSB0aGlzLnNldHRpbmdzLnN0YXRlTWFuYWdlcjtcclxuXHJcbiAgICAgICAgdGhpcy5sYW5nID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGFuZyhrZXksIHRoaXMuc2V0dGluZ3MubGFuZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZighdGhpcy5zZXR0aW5ncy5yb290KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3Mucm9vdCA9IHRoaXMuc2V0dGluZ3MuZG9jdW1lbnQuYm9keVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yb290ID0gdGhpcy5zZXR0aW5ncy5yb290O1xyXG5cclxuICAgICAgICB0aGlzLmVsZW1lbnRBbmFseXplciA9IG5ldyBEcm9wcGFibGVFbGVtZW50QW5hbHl6ZXJTZXJ2aWNlKHRoaXMuc2V0dGluZ3MpO1xyXG5cclxuICAgICAgICB0aGlzLmRyb3BJbmRpY2F0b3IgPSBuZXcgRHJvcEluZGljYXRvcih0aGlzLnNldHRpbmdzKTtcclxuXHJcbiAgICAgICAgY29uc3QgZWxlbWVudEhhbmRsZUNvbnRlbnQgPSBuZXcgRWxlbWVudEhhbmRsZUNvbnRlbnQodGhpcyk7XHJcbiAgICAgICAgY29uc3QgbW9kdWxlSGFuZGxlQ29udGVudCA9IG5ldyBNb2R1bGVIYW5kbGVDb250ZW50KHRoaXMpO1xyXG4gICAgICAgIGNvbnN0IGxheW91dEhhbmRsZUNvbnRlbnQgPSBuZXcgTGF5b3V0SGFuZGxlQ29udGVudCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5lbGVtZW50SGFuZGxlQ29udGVudCA9IGVsZW1lbnRIYW5kbGVDb250ZW50O1xyXG4gICAgICAgIHRoaXMubW9kdWxlSGFuZGxlQ29udGVudCA9IG1vZHVsZUhhbmRsZUNvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy5sYXlvdXRIYW5kbGVDb250ZW50ID0gbGF5b3V0SGFuZGxlQ29udGVudDtcclxuXHJcbiAgICAgICAgdGhpcy5sYXlvdXRIYW5kbGVDb250ZW50Lm9uKCdpbnNlcnRMYXlvdXRSZXF1ZXN0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKCdpbnNlcnRMYXlvdXRSZXF1ZXN0JylcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLmRpYWxvZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmKCFvcHRpb25zKXtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQ6IHNjb3BlLmRvY3VtZW50LFxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQ6IHdpbmRvdy50b3AuZG9jdW1lbnQsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogbW9kdWxlSGFuZGxlQ29udGVudC5tZW51LmdldFRhcmdldCgpLFxyXG4gICAgICAgICAgICAgICAgbW9kZTogJ2Fic29sdXRlJ1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgc2NvcGUucGF1c2UoKTtcclxuICAgICAgICAgICAgY29uc3QgX2RsZyA9IG5ldyBEaWFsb2coT2JqZWN0U2VydmljZS5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zKSk7XHJcblxyXG4gICAgICAgICAgICBfZGxnLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHNjb3BlLnBsYXkoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX2RsZztcclxuICAgICAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgICAgIHZhciBlbGVtZW50SGFuZGxlID0gdGhpcy5lbGVtZW50SGFuZGxlID0gbmV3IEhhbmRsZSh7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuc2V0dGluZ3MsXHJcbiAgICAgICAgICAgIGRyb3BJbmRpY2F0b3I6IHRoaXMuZHJvcEluZGljYXRvcixcclxuICAgICAgICAgICAgY29udGVudDogZWxlbWVudEhhbmRsZUNvbnRlbnQucm9vdCxcclxuICAgICAgICAgICAgLy8gaGFuZGxlOiBlbGVtZW50SGFuZGxlQ29udGVudC5tZW51LnRpdGxlLFxyXG4gICAgICAgICAgICBoYW5kbGU6IEVsZW1lbnRNYW5hZ2VyKCcubXctaGFuZGxlLWRyYWctYnV0dG9uJywgZWxlbWVudEhhbmRsZUNvbnRlbnQucm9vdC5nZXQoMCkpLFxyXG4gICAgICAgICAgICBoYW5kbGU6ICdzZWxmJyxcclxuICAgICAgICAgICAgZG9jdW1lbnQ6IHRoaXMuc2V0dGluZ3MuZG9jdW1lbnQsXHJcbiAgICAgICAgICAgIHN0YXRlTWFuYWdlcjogdGhpcy5zZXR0aW5ncy5zdGF0ZU1hbmFnZXIsXHJcbiAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5pc1Jlc2l6aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGVsZW1lbnRIYW5kbGUucmVzaXplci5vbigncmVzaXplU3RhcnQnLCBlID0+IHRoaXMuaXNSZXNpemluZyA9IHRydWUpXHJcbiAgICAgICAgZWxlbWVudEhhbmRsZS5yZXNpemVyLm9uKCdyZXNpemVTdG9wJywgZSA9PiB0aGlzLmlzUmVzaXppbmcgPSBmYWxzZSlcclxuXHJcbiAgICAgICAgZWxlbWVudEhhbmRsZS5vbigndGFyZ2V0Q2hhbmdlJywgZnVuY3Rpb24gKHRhcmdldCl7XHJcbiAgICAgICAgICAgIGVsZW1lbnRIYW5kbGVDb250ZW50Lm1lbnUuc2V0VGFyZ2V0KHRhcmdldCk7XHJcblxyXG5cclxuICAgICAgICAgICAgaWYodGFyZ2V0LmNsYXNzTmFtZS5pbmNsdWRlcygnY29sLScpKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50SGFuZGxlLnJlc2l6ZXIuZGlzYWJsZSgpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50SGFuZGxlLnJlc2l6ZXIuZW5hYmxlKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5tb2R1bGVIYW5kbGUgPSBuZXcgSGFuZGxlKHtcclxuICAgICAgICAgICAgLi4udGhpcy5zZXR0aW5ncyxcclxuICAgICAgICAgICAgZHJvcEluZGljYXRvcjogdGhpcy5kcm9wSW5kaWNhdG9yLFxyXG4gICAgICAgICAgICBjb250ZW50OiBtb2R1bGVIYW5kbGVDb250ZW50LnJvb3QsXHJcbiAgICAgICAgICAgIGhhbmRsZTogbW9kdWxlSGFuZGxlQ29udGVudC5tZW51LnRpdGxlLFxyXG4gICAgICAgICAgICBkb2N1bWVudDogdGhpcy5zZXR0aW5ncy5kb2N1bWVudCxcclxuICAgICAgICAgICAgc3RhdGVNYW5hZ2VyOiB0aGlzLnNldHRpbmdzLnN0YXRlTWFuYWdlcixcclxuICAgICAgICAgICAgcmVzaXphYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIG1vZHVsZUhhbmRsZSA9IHRoaXMubW9kdWxlSGFuZGxlO1xyXG5cclxuICAgICAgICB0aGlzLmdldE1vZHVsZVF1aWNrU2V0dGluZ3MgPSB0eXBlID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtdy5xdWlja1NldHRpbmdzW3R5cGVdKTtcclxuICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCgnbW9kdWxlUXVpY2tTZXR0aW5ncycsIHttb2R1bGU6IHR5cGV9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIG1vZHVsZUhhbmRsZS5vbigndGFyZ2V0Q2hhbmdlJywgZnVuY3Rpb24gKG5vZGUpe1xyXG5cclxuXHJcbiAgICAgICAgICAgIHNjb3BlLmdldE1vZHVsZVF1aWNrU2V0dGluZ3Mobm9kZS5kYXRhc2V0LnR5cGUpLnRoZW4oZnVuY3Rpb24gKHNldHRpbmdzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbW9kdWxlSGFuZGxlQ29udGVudC5tZW51LnJvb3QucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICBtb2R1bGVIYW5kbGVDb250ZW50Lm1lbnUgPSBuZXcgSGFuZGxlTWVudSh7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdtdy1oYW5kbGUtaXRlbS1lbGVtZW50LW1lbnUnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBub2RlLmRhdGFzZXQudHlwZSxcclxuICAgICAgICAgICAgICAgICAgICByb290U2NvcGU6IHNjb3BlLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6IHNldHRpbmdzID8gc2V0dGluZ3MubWFpbk1lbnUgfHwgW10gOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7dGFyZ2V0OiBub2RlfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBtb2R1bGVIYW5kbGVDb250ZW50Lm1lbnUuc2V0VGFyZ2V0KG5vZGUpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBtb2R1bGVIYW5kbGVDb250ZW50Lm1lbnUuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgIG1vZHVsZUhhbmRsZUNvbnRlbnQucm9vdC5hcHBlbmQobW9kdWxlSGFuZGxlQ29udGVudC5tZW51LnJvb3QpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5sYXlvdXRIYW5kbGUgPSBuZXcgSGFuZGxlKHtcclxuICAgICAgICAgICAgLi4udGhpcy5zZXR0aW5ncyxcclxuICAgICAgICAgICAgZHJvcEluZGljYXRvcjogdGhpcy5kcm9wSW5kaWNhdG9yLFxyXG4gICAgICAgICAgICBjb250ZW50OiBsYXlvdXRIYW5kbGVDb250ZW50LnJvb3QsXHJcbiAgICAgICAgICAgIGhhbmRsZTogbGF5b3V0SGFuZGxlQ29udGVudC5tZW51LnRpdGxlLFxyXG4gICAgICAgICAgICBkb2N1bWVudDogdGhpcy5zZXR0aW5ncy5kb2N1bWVudCxcclxuICAgICAgICAgICAgc3RhdGVNYW5hZ2VyOiB0aGlzLnNldHRpbmdzLnN0YXRlTWFuYWdlcixcclxuICAgICAgICAgICAgdHlwZTogJ2xheW91dCdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIGxheW91dEhhbmRsZSA9IHRoaXMubGF5b3V0SGFuZGxlO1xyXG5cclxuICAgICAgICB2YXIgdGl0bGUgPSBzY29wZS5sYW5nKCdMYXlvdXQnKTtcclxuICAgICAgICBsYXlvdXRIYW5kbGVDb250ZW50Lm1lbnUuc2V0VGl0bGUodGl0bGUpXHJcbiAgICAgICAgbGF5b3V0SGFuZGxlLm9uKCd0YXJnZXRDaGFuZ2UnLCBmdW5jdGlvbiAodGFyZ2V0KXtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxheW91dEhhbmRsZUNvbnRlbnQubWVudS5zZXRUYXJnZXQodGFyZ2V0KTtcclxuICAgICAgICAgICAgbGF5b3V0SGFuZGxlQ29udGVudC5tZW51LnNldFRpdGxlKHRpdGxlKTtcclxuICAgICAgICAgICAgaWYoIHNjb3BlLmVsZW1lbnRBbmFseXplci5pc0VkaXRPckluRWRpdCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICBsYXlvdXRIYW5kbGVDb250ZW50LnBsdXNUb3Auc2hvdygpXHJcbiAgICAgICAgICAgICAgICBsYXlvdXRIYW5kbGVDb250ZW50LnBsdXNCb3R0b20uc2hvdygpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsYXlvdXRIYW5kbGVDb250ZW50LnBsdXNUb3AuaGlkZSgpXHJcbiAgICAgICAgICAgICAgICBsYXlvdXRIYW5kbGVDb250ZW50LnBsdXNCb3R0b20uaGlkZSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGF5b3V0SGFuZGxlQ29udGVudC5oYW5kbGUgPSBsYXlvdXRIYW5kbGU7XHJcbiAgICAgICAgbW9kdWxlSGFuZGxlQ29udGVudC5oYW5kbGUgPSBtb2R1bGVIYW5kbGU7XHJcbiAgICAgICAgZWxlbWVudEhhbmRsZUNvbnRlbnQuaGFuZGxlID0gZWxlbWVudEhhbmRsZTtcclxuXHJcbiAgICAgICAgY29uc3QgaW50ZXJhY3Rpb25IYW5kbGVDb250ZW50ID0gbmV3IEludGVyYWN0aW9uSGFuZGxlQ29udGVudCh0aGlzKTtcclxuXHJcbiBcclxuXHJcbiAgICAgICAgdGhpcy5pbnRlcmFjdGlvbkhhbmRsZSA9IG5ldyBIYW5kbGUoe1xyXG4gICAgICAgICAgICAuLi50aGlzLnNldHRpbmdzLFxyXG4gICBcclxuICAgICAgICAgICAgY29udGVudDogaW50ZXJhY3Rpb25IYW5kbGVDb250ZW50LnJvb3QsXHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICBkb2N1bWVudDogdGhpcy5zZXR0aW5ncy5kb2N1bWVudCxcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJlc2l6YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWhhbmRsZS1pdGVtLWludGVyYWN0aW9uLWhhbmRsZSdcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmludGVyYWN0aW9uSGFuZGxlLm1lbnUgPSBpbnRlcmFjdGlvbkhhbmRsZUNvbnRlbnQubWVudTtcclxuICAgICAgICAgXHJcblxyXG4gICAgICAgIHRoaXMuaGFuZGxlcyA9IG5ldyBIYW5kbGVzKHtcclxuICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudEhhbmRsZSxcclxuICAgICAgICAgICAgbW9kdWxlOiBtb2R1bGVIYW5kbGUsXHJcbiAgICAgICAgICAgIGxheW91dDogbGF5b3V0SGFuZGxlLFxyXG4gICAgICAgICAgICBpbnRlcmFjdGlvbkhhbmRsZTogdGhpcy5pbnRlcmFjdGlvbkhhbmRsZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm9ic2VydmUgPSBuZXcgR2V0UG9pbnRlclRhcmdldHModGhpcy5zZXR0aW5ncyk7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcGxheSgpIHtcclxuICAgICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHBhdXNlKCkge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlcy5oaWRlKCk7XHJcbiAgICAgICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgaWYodGhpcy5zZXR0aW5ncy5tb2RlID09PSAnYXV0bycpIHtcclxuICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gIE1vZGVBdXRvKHRoaXMpLCAxMDAwKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IF9ldmVudHNIYW5kbGUgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHRoaXMuaGFuZGxlcy50YXJnZXRJc09ySW5zaWRlSGFuZGxlKGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IHRoaXMub2JzZXJ2ZS5mcm9tRXZlbnQoZSk7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IGVsZW1lbnRzWzBdO1xyXG5cclxuICAgICAgICAgICAgaWYoZmlyc3Qubm9kZU5hbWUgIT09ICdJTUcnKSB7XHJcbiAgICAgICAgICAgICAgICBmaXJzdCA9IERvbVNlcnZpY2UuZmlyc3RCbG9ja0xldmVsKGVsZW1lbnRzWzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVzLmdldCgnZWxlbWVudCcpLnNldChudWxsKVxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZXMuaGlkZSgpO1xyXG4gICAgICAgICBcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoZmlyc3QpIHtcclxuICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMuZWxlbWVudEFuYWx5emVyLmdldFR5cGUoZmlyc3QpO1xyXG4gICAgICAgICAgICAgICBpZih0eXBlICYmIHR5cGUgIT09ICdlZGl0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVzLnNldCh0eXBlLCBmaXJzdClcclxuICAgICAgICAgICAgICAgICAgIGlmKHR5cGUgPT09ICdlbGVtZW50Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlcy5oaWRlKCdtb2R1bGUnKTtcclxuICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0eXBlID09PSAnbW9kdWxlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlcy5oaWRlKCdlbGVtZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSAgZWxzZSBpZih0eXBlID09PSAnbGF5b3V0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXMuc2V0KCdsYXlvdXQnLCBsYXlvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlcy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH1cclxuIFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGF5b3V0ID0gIERvbVNlcnZpY2UuZmlyc3RQYXJlbnRPckN1cnJlbnRXaXRoQW55T2ZDbGFzc2VzKGUudGFyZ2V0LCBbJ21vZHVsZS1sYXlvdXRzJ10pO1xyXG4gICAgICAgICAgICAgICAgaWYobGF5b3V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVzLnNldCgnbGF5b3V0JywgbGF5b3V0KVxyXG4gICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgfVxyXG4gXHJcbiAgICAgICAgfVxyXG5cclxuIFxyXG5cclxuICAgICAgICBsZXQgZXZlbnRzO1xyXG4gIFxyXG4gICAgICAgICAgICBldmVudHMgPSAnbW91c2Vkb3duIHRvdWNoc3RhcnQnO1xyXG4gICAgICAgICAgICBFbGVtZW50TWFuYWdlcih0aGlzLnJvb3QpLm9uKCdtb3VzZW1vdmUnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5wYXVzZWQgfHwgIHRoaXMuaXNSZXNpemluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJhY3Rpb25IYW5kbGUuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5oYW5kbGVzLnRhcmdldElzT3JJbnNpZGVIYW5kbGUoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVyYWN0aW9uSGFuZGxlLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5vYnNlcnZlLmZyb21FdmVudChlKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gIERvbVNlcnZpY2UuZmlyc3RQYXJlbnRPckN1cnJlbnRXaXRoQW55T2ZDbGFzc2VzKGVsZW1lbnRzWzBdLCBbJ2VsZW1lbnQnLCAnbW9kdWxlJywgJ2Nsb25lYWJsZSddKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxheW91dCA9ICBEb21TZXJ2aWNlLmZpcnN0UGFyZW50T3JDdXJyZW50V2l0aEFueU9mQ2xhc3NlcyhlLnRhcmdldCwgWydtb2R1bGUtbGF5b3V0cyddKTtcclxuICAgICAgICAgICAgICAgIGxldCBsYXlvdXRIYXNTZWxlY3RlZFRhcmdldCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIGlmKGxheW91dCkge1xyXG4gICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRUYXJnZXQgPSB0aGlzLmhhbmRsZXMuZ2V0KCdlbGVtZW50JykuZ2V0VGFyZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kdWxlVGFyZ2V0ID0gdGhpcy5oYW5kbGVzLmdldCgnbW9kdWxlJykuZ2V0VGFyZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGxheW91dC5jb250YWlucyhlbGVtZW50VGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRIYXNTZWxlY3RlZFRhcmdldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihsYXlvdXQuY29udGFpbnMobW9kdWxlVGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRIYXNTZWxlY3RlZFRhcmdldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZighbGF5b3V0SGFzU2VsZWN0ZWRUYXJnZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVzLnNldCgnbGF5b3V0JywgbGF5b3V0KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXMuaGlkZSgnbGF5b3V0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYodGFyZ2V0ICYmICF0aGlzLmhhbmRsZXMudGFyZ2V0SXNTZWxlY3RlZCh0YXJnZXQsIHRoaXMuaW50ZXJhY3Rpb25IYW5kbGUpICYmICF0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2R1bGUtbGF5b3V0cycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpdGxlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGFyZ2V0LmRhdGFzZXQubXdUaXRsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IHRhcmdldC5kYXRhc2V0Lm13VGl0bGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHRhcmdldC5kYXRhc2V0LnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSB0YXJnZXQuZGF0YXNldC50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gIGVsc2UgaWYodGFyZ2V0Lm5vZGVOYW1lID09PSAnUCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSB0aGlzLmxhbmcoJ1BhcmFncmFwaCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZigvKEhbMS02XSkvLnRlc3QodGFyZ2V0Lm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IHRoaXMubGFuZygnVGl0bGUnKSArICcgJyArIHRhcmdldC5ub2RlTmFtZS5yZXBsYWNlKCAvXlxcRCsvZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0YXJnZXQubm9kZU5hbWUgPT09ICdJTUcnIHx8IHRhcmdldC5ub2RlTmFtZSA9PT0gJ0lNQUdFJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IHRoaXMubGFuZygnSW1hZ2UnKTtcclxuICAgICAgICAgICAgICAgICAgICB9ICBlbHNlIGlmKFsnSDEnLCAnSDInLCAnSDMnLCAnSDQnLCAnSDUnLCAnSDYnXS5pbmNsdWRlcyh0YXJnZXQubm9kZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gdGhpcy5sYW5nKCdUaXRsZSAnICsgdGFyZ2V0Lm5vZGVOYW1lLnJlcGxhY2UoJ0gnLCAnJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gIGVsc2UgaWYoWydESVYnLCAnTUFJTicsICdTRUNUSU9OJ10uaW5jbHVkZXModGFyZ2V0Lm5vZGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IHRoaXMubGFuZygnQmxvY2snKTtcclxuICAgICAgICAgICAgICAgICAgICB9ICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gdGhpcy5sYW5nKCdUZXh0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVyYWN0aW9uSGFuZGxlLm1lbnUuc2V0VGl0bGUodGl0bGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJhY3Rpb25IYW5kbGUuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJhY3Rpb25IYW5kbGUuc2V0KHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJhY3Rpb25IYW5kbGUuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBFbGVtZW50TWFuYWdlcih0aGlzLnJvb3QpLm9uKGV2ZW50cywgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICggIXRoaXMucGF1c2VkICApIHtcclxuICAgICAgICAgICAgICAgICAgICBfZXZlbnRzSGFuZGxlKGUpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50VGFyZ2V0ID0gdGhpcy5lbGVtZW50SGFuZGxlLmdldFRhcmdldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnRUYXJnZXQgJiYgIWVsZW1lbnRUYXJnZXQuY29udGFpbnMoZS50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgXHJcbiBcclxuICAgICAgICAgXHJcbiAgICB9O1xyXG59XHJcblxyXG5nbG9iYWxUaGlzLkxpdmVFZGl0ID0gTGl2ZUVkaXQ7XHJcbiIsImV4cG9ydCBjbGFzcyBNb2R1bGVzTGlzdCB7XHJcbiAgICBjb25zdHJ1Y3Rvciggb3B0aW9ucyA9IHt9ICkge1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgICBtb2RlOiAnbG9jYWwnLFxyXG4gICAgICAgICAgICBkb2N1bWVudDogZG9jdW1lbnQsXHJcbiAgICAgICAgICAgIGVuY2Fwc3VsYXRlOiBmYWxzZSxcclxuICAgICAgICAgICAgY3NzOiBmYWxzZSxcclxuICAgICAgICAgICAgc2VhcmNoTW9kZTogJ2xvY2FsJyxcclxuICAgICAgICAgICAgZGF0YTogW10sXHJcbiAgICAgICAgICAgIHNraW46ICdkZWZhdWx0TW9kdWxlcycgLy8gJ2RlZmF1bHRNb2R1bGVzJyB8ICdkZWZhdWx0TGF5b3V0cydcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnQgPSB0aGlzLnNldHRpbmdzLmRvY3VtZW50O1xyXG4gICAgfVxyXG4gICAgI2RhdGEgPSBudWxsO1xyXG4gICAgI19lID0ge307XHJcbiAgICBzZWxlY3RlZENhdGVnb3J5ID0gJyc7XHJcbiAgICAjbW9kdWxlc05vZGVzID0gW107XHJcbiAgICByb290ID0gbnVsbDtcclxuXHJcbiAgICBvbihlLCBmKXsgdGhpcy4jX2VbZV0gPyB0aGlzLiNfZVtlXS5wdXNoKGYpIDogKHRoaXMuI19lW2VdID0gW2ZdKSB9O1xyXG4gICAgZGlzcGF0Y2goZSwgZil7IHRoaXMuI19lW2VdID8gdGhpcy4jX2VbZV0uZm9yRWFjaChjID0+IHsgYy5jYWxsKHRoaXMsIGYpOyB9KSA6ICcnOyB9O1xyXG5cclxuICAgIGdldERhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2RhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RGF0YShkYXRhLCB0cmlnZ2VyID0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMuI2RhdGEgPSBkYXRhO1xyXG4gICAgICAgIGxldCBpID0gMCwgbGVuZ3RoID0gdGhpcy4jZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgZm9yKCA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuI2RhdGFbaV0uY2F0ZWdvcmllcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI2RhdGFbaV0uY2F0ZWdvcmllcyA9IHRoaXMuI2RhdGFbaV0uY2F0ZWdvcmllcy5zcGxpdCgnLCcpLm1hcChjYXQgPT4gY2F0LnRyaW0oKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodHJpZ2dlcikge1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKCdkYXRhQ2hhbmdlZCcsIHRoaXMuI2RhdGEpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByZXBhcmVDYXRlZ29yaWVzKCkge1xyXG4gICAgICAgIGNvbnN0IGNhdGVnb3JpZXMgPSBbXTtcclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhKCk7XHJcbiAgICAgICAgbGV0IGkgPSAwLCBsZW5ndGggPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICBmb3IoIDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBpdGVtID0gZGF0YVtpXTtcclxuICAgICAgICAgICAgbGV0IGNhdHMgPSBpdGVtLmNhdGVnb3JpZXMgfHwgJyc7XHJcblxyXG4gICAgICAgICAgICBsZXQgaWMgPSAwLCBsZW5ndGhjID0gY2F0cy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciggOyBpYyA8IGxlbmd0aGM7IGljKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNhdCA9IGNhdHNbaWNdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGlmKGNhdGVnb3JpZXMuaW5kZXhPZihjYXQpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXMucHVzaChjYXQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0ZWdvcmllcy5zb3J0KCk7XHJcbiAgICAgICAgdGhpcy5jYXRlZ29yaWVzID0gY2F0ZWdvcmllcztcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVDYXRlZ29yaWVzTWVudSgpIHtcclxuICAgICAgICBjb25zdCBuYXYgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XHJcbiAgICAgICAgdGhpcy5wcmVwYXJlQ2F0ZWdvcmllcygpO1xyXG4gICAgICAgIG5hdi5jbGFzc05hbWUgPSAnbW9kdWxlcy1saXN0LWNhdGVnb3JpZXMnO1xyXG4gICAgICAgIG5hdi5pbm5lckhUTUwgPSB0aGlzLmNhdGVnb3JpZXMubWFwKGMgPT4gYDxsaSBkYXRhLWNhdGVnb3J5PVwiJHtjfVwiPiR7Y308L2xpPmApLmpvaW4oJycpO1xyXG4gICAgICAgIG5hdi5pbm5lckhUTUwgPSAgYDxsaSBkYXRhLWNhdGVnb3J5PVwiXCI+QWxsIGNhdGVnb3JpZXM8L2xpPiAke25hdi5pbm5lckhUTUx9YDtcclxuICAgICAgICBuYXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0Lm5vZGVOYW1lID09PSAnTEknKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdENhdGVnb3J5KGUudGFyZ2V0LmRhdGFzZXQuY2F0ZWdvcnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLmNhdGVnb3JpZXNOYXZpZ2F0aW9uID0gbmF2XHJcbiAgICAgICAgdGhpcy5yb290U2hhZG93LmFwcGVuZENoaWxkKG5hdik7XHJcbiAgICAgICAgdGhpcy5vbignY2F0ZWdvcnlTZWxlY3QnLCBjYXRlZ29yeSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gbmF2LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNhdGVnb3J5XScpO1xyXG4gICAgICAgICAgICBmb3IoIGNvbnN0IG5vZGUgb2YgaXRlbXMgKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLmNsYXNzTGlzdFtub2RlLmRhdGFzZXQuY2F0ZWdvcnkgPT09IGNhdGVnb3J5ID8gJ2FkZCcgOiAncmVtb3ZlJ10oJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcblxyXG4gICAgc2VsZWN0Q2F0ZWdvcnkoY2F0ZWdvcnkgPSAnJykge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRDYXRlZ29yeSA9IGNhdGVnb3J5O1xyXG4gICAgICAgIHRoaXMuc2VhcmNoKGNhdGVnb3J5KVxyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2goJ2NhdGVnb3J5U2VsZWN0JywgY2F0ZWdvcnkpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlUm9vdCgpIHtcclxuICAgICAgICB0aGlzLnJvb3QgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMucm9vdC5jbGFzc05hbWUgPSAnbW9kdWxlcy1saXN0IG1vZHVsZXMtbGlzdC0nICsgdGhpcy5zZXR0aW5ncy5za2luO1xyXG4gICAgICAgIHRoaXMucm9vdFNoYWRvdyA9IHRoaXMuc2V0dGluZ3MuZW5jYXBzdWxhdGUgPyB0aGlzLnJvb3QuYXR0YWNoU2hhZG93KHttb2RlOiAnb3Blbid9KSA6IHRoaXMucm9vdDtcclxuXHJcbiAgICAgICAgaWYodGhpcy5zZXR0aW5ncy5jc3MpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gdGhpcy5zZXR0aW5ncy5jc3M7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdFNoYWRvdy5hcHBlbmRDaGlsZChzdHlsZSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICNyZW5kZXJNb2R1bGUoZGF0YSkge1xyXG4gICAgICAgIC8vdG9kbzogcmVtb3ZlXHJcbiAgICAgICAgZGF0YS5sb2NrZWQgPSBkYXRhLmRlc2NyaXB0aW9uLmluY2x1ZGVzKCdhJyk7XHJcbiAgICAgICAgY29uc3QgbW9kdWxlSXRlbSA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgbW9kdWxlSXRlbS5jbGFzc05hbWUgPSAnbW9kdWxlcy1saXN0LWJsb2NrLWl0ZW0gbW9kdWxlcy1saXN0LWJsb2NrLWl0ZW0taXMtbG9ja2VkLScgKyBkYXRhLmxvY2tlZDtcclxuICAgICAgICBtb2R1bGVJdGVtLl9fJGRhdGEgPSBkYXRhO1xyXG4gICAgICAgIG1vZHVsZUl0ZW0uaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kdWxlcy1saXN0LWJsb2NrLWl0ZW0tcGljdHVyZVwiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7ZGF0YS5pY29uIHx8IGRhdGEuc2NyZWVuc2hvdCB8fCBkYXRhLmltYWdlfSlcIj48L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZHVsZXMtbGlzdC1ibG9jay1pdGVtLXRpdGxlXCI+JHtkYXRhLm5hbWUgfHwgZGF0YS50aXRsZX08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZHVsZXMtbGlzdC1ibG9jay1pdGVtLWRlc2NyaXB0aW9uXCI+JHtkYXRhLmRlc2NyaXB0aW9ufTwvZGl2PlxyXG4gICAgICAgICAgICAke2RhdGEubG9ja2VkID8gJzxzcGFuIGNsYXNzPVwibW9kdWxlcy1saXN0LWJsb2NrLWl0ZW0tbG9ja2VkLWJhZGdlXCI+UFJPPC9zcGFuPicgOiAnJ31cclxuICAgICAgICBgO1xyXG4gICAgICAgIG1vZHVsZUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgaWYobW9kdWxlSXRlbS5fXyRkYXRhLmxvY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCgnbG9ja2VkTW9kdWxlU2VsZWN0ZWQnLCB7ZGF0YSwgZWxlbWVudDogbW9kdWxlSXRlbX0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCgnbW9kdWxlU2VsZWN0ZWQnLCB7ZGF0YSwgZWxlbWVudDogbW9kdWxlSXRlbX0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbW9kdWxlSXRlbS4kZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgcmV0dXJuIG1vZHVsZUl0ZW07XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAjY2F0ZWdvcml6ZWRCbG9jayhjYXRlZ29yeU5hbWUpIHtcclxuICAgICAgICBjb25zdCBjYXQgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgICAgICBjYXQuY2xhc3NOYW1lID0gJ21vZHVsZXMtbGlzdC1ibG9jay1jYXRlZ29yeS1zZWN0aW9uJztcclxuICAgICAgICBjYXQuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJtb2R1bGVzLWxpc3QtYmxvY2stY2F0ZWdvcnktc2VjdGlvbi10aXRsZVwiPjxoNT4nICsgY2F0ZWdvcnlOYW1lICsgJzwvaDU+PC9kaXY+JztcclxuICAgICAgICBjYXQuX18kaGFzTm9kZXMgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNhdDtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJNb2R1bGVzQ2F0ZWdvcml6ZWQoKSB7XHJcbiAgICAgICAgdGhpcy5tb2R1bGVzTGlzdCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5tb2R1bGVzTGlzdC5jbGFzc05hbWUgPSAnbW9kdWxlcy1saXN0LWJsb2NrJ1xyXG5cclxuICAgICAgICB0aGlzLm1vZHVsZXNMaXN0Tm9SZXN1bHRzTm9kZSA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5tb2R1bGVzTGlzdE5vUmVzdWx0c05vZGUuY2xhc3NOYW1lID0gJ21vZHVsZXMtbGlzdC1ibG9jay1uby1yZXN1bHRzJ1xyXG4gICAgICAgIHRoaXMubW9kdWxlc0xpc3ROb1Jlc3VsdHNOb2RlLmlubmVySFRNTCA9ICdOb3RoaW5nIGZvdW5kLi4uJztcclxuICAgICAgICB0aGlzLm1vZHVsZXNMaXN0Tm9SZXN1bHRzTm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhKCk7XHJcbiAgICAgICAgbGV0IGkgPSAwLCBsZW5ndGggPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBieUNhdGVnb3J5ID0ge1xyXG4gICAgICAgICAgICBtaXNjZWxsYW5lb3VzOiAgdGhpcy4jY2F0ZWdvcml6ZWRCbG9jaygnbWlzY2VsbGFuZW91cycpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IoIDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhdGVnb3JpZXMgPSBkYXRhW2ldLmNhdGVnb3JpZXMgfHwgWydtaXNjZWxsYW5lb3VzJ107XHJcbiAgICAgICAgICAgIGNhdGVnb3JpZXMuZm9yRWFjaChjYXQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYoIWJ5Q2F0ZWdvcnlbY2F0XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ5Q2F0ZWdvcnlbY2F0XSA9IHRoaXMuI2NhdGVnb3JpemVkQmxvY2soY2F0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vZHVsZUl0ZW0gPSB0aGlzLiNyZW5kZXJNb2R1bGUoZGF0YVtpXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNtb2R1bGVzTm9kZXMucHVzaChtb2R1bGVJdGVtKTtcclxuICAgICAgICAgICAgICAgIGJ5Q2F0ZWdvcnlbY2F0XS5hcHBlbmRDaGlsZChtb2R1bGVJdGVtKTtcclxuICAgICAgICAgICAgICAgIGJ5Q2F0ZWdvcnlbY2F0XS5fXyRoYXNOb2RlcyA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGJjIGluIGJ5Q2F0ZWdvcnkpe1xyXG4gICAgICAgICAgICBpZighIWJ5Q2F0ZWdvcnlbYmNdLl9fJGhhc05vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZHVsZXNMaXN0LmFwcGVuZENoaWxkKGJ5Q2F0ZWdvcnlbYmNdKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICB0aGlzLnJvb3RTaGFkb3cuYXBwZW5kQ2hpbGQodGhpcy5tb2R1bGVzTGlzdClcclxuICAgICAgICB0aGlzLm1vZHVsZXNMaXN0LmFwcGVuZENoaWxkKHRoaXMubW9kdWxlc0xpc3ROb1Jlc3VsdHNOb2RlKVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlck1vZHVsZXMoKSB7XHJcbiAgICAgICAgdGhpcy5tb2R1bGVzTGlzdCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5tb2R1bGVzTGlzdC5jbGFzc05hbWUgPSAnbW9kdWxlcy1saXN0LWJsb2NrJ1xyXG5cclxuICAgICAgICB0aGlzLm1vZHVsZXNMaXN0Tm9SZXN1bHRzTm9kZSA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5tb2R1bGVzTGlzdE5vUmVzdWx0c05vZGUuY2xhc3NOYW1lID0gJ21vZHVsZXMtbGlzdC1ibG9jay1uby1yZXN1bHRzJ1xyXG4gICAgICAgIHRoaXMubW9kdWxlc0xpc3ROb1Jlc3VsdHNOb2RlLmlubmVySFRNTCA9ICdOb3RoaW5nIGZvdW5kLi4uJztcclxuICAgICAgICB0aGlzLm1vZHVsZXNMaXN0Tm9SZXN1bHRzTm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhKCk7XHJcbiAgICAgICAgbGV0IGkgPSAwLCBsZW5ndGggPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICBmb3IoIDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZHVsZUl0ZW0gPSB0aGlzLiNyZW5kZXJNb2R1bGUoZGF0YVtpXSk7XHJcbiAgICAgICAgICAgIHRoaXMuI21vZHVsZXNOb2Rlcy5wdXNoKG1vZHVsZUl0ZW0pO1xyXG4gICAgICAgICAgICB0aGlzLm1vZHVsZXNMaXN0LmFwcGVuZENoaWxkKG1vZHVsZUl0ZW0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucm9vdFNoYWRvdy5hcHBlbmRDaGlsZCh0aGlzLm1vZHVsZXNMaXN0KVxyXG4gICAgICAgIHRoaXMubW9kdWxlc0xpc3QuYXBwZW5kQ2hpbGQodGhpcy5tb2R1bGVzTGlzdE5vUmVzdWx0c05vZGUpXHJcbiAgICB9XHJcblxyXG4gICAgaGlkZUl0ZW0oaXRlbSkge1xyXG4gICAgICAgIGlmIChpdGVtLm5vZGVOYW1lKSB7XHJcbiAgICAgICAgICAgIGl0ZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG93SXRlbShpdGVtKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0ubm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgaXRlbS5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVNlYXJjaEdVSSgpIHtcclxuICAgICAgICB0aGlzLnNlYXJjaEJsb2NrID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0aGlzLnNlYXJjaEZpZWxkID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoRmllbGQudHlwZSA9ICd0ZXh0JztcclxuICAgICAgICB0aGlzLnNlYXJjaEZpZWxkLnBsYWNlaG9sZGVyID0gJ1R5cGUgdG8gU2VhcmNoLi4uJztcclxuICAgICAgICB0aGlzLnNlYXJjaEJsb2NrLmNsYXNzTmFtZSA9ICdtb2R1bGVzLWxpc3Qtc2VhcmNoLWJsb2NrJztcclxuICAgICAgICB0aGlzLnNlYXJjaEZpZWxkLmNsYXNzTmFtZSA9ICdtb2R1bGVzLWxpc3Qtc2VhcmNoLWZpZWxkJztcclxuICAgICAgICB0aGlzLnNlYXJjaEJsb2NrLmFwcGVuZENoaWxkKHRoaXMuc2VhcmNoRmllbGQpO1xyXG4gICAgICAgIHRoaXMucm9vdFNoYWRvdy5hcHBlbmRDaGlsZCh0aGlzLnNlYXJjaEJsb2NrKTtcclxuICAgICAgICB0aGlzLnNlYXJjaEZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZSA9PiB0aGlzLnNlYXJjaCh1bmRlZmluZWQsIHRoaXMuc2VhcmNoRmllbGQudmFsdWUpKVxyXG4gICAgICAgIHRoaXMub24oJ2NhdGVnb3J5U2VsZWN0JywgY2F0ID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZWFyY2hGaWVsZC52YWx1ZSA9ICcnO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgI3NlYXJjaExvY2FsKGNhdGVnb3J5LCBrZXl3b3JkKSB7XHJcbiAgICAgICAgaWYoY2F0ZWdvcnkpIHtcclxuICAgICAgICAgICAgY2F0ZWdvcnkgPSBjYXRlZ29yeS50cmltKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoa2V5d29yZCkge1xyXG4gICAgICAgICAgICBrZXl3b3JkID0ga2V5d29yZC50cmltKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgICAgICBsZXQgaSA9IDAsIGxlbmd0aCA9IHRoaXMuI21vZHVsZXNOb2Rlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy4jbW9kdWxlc05vZGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGl0ZW0uJGRhdGE7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2hlcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZighIWNhdGVnb3J5ICYmIGRhdGEuY2F0ZWdvcmllcy5pbmRleE9mKGNhdGVnb3J5KSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGVJdGVtKGl0ZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZighIWtleXdvcmQgJiYgKGRhdGEubmFtZSB8fCBkYXRhLnRpdGxlKS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoa2V5d29yZCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlSXRlbShpdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93SXRlbShpdGVtKTtcclxuICAgICAgICAgICAgICAgIGZvdW5kKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc29sZS5sb2coa2V5d29yZCwgY2F0ZWdvcnkpXHJcbiAgICAgICAgICAgIHRoaXMubW9kdWxlc0xpc3ROb1Jlc3VsdHNOb2RlLnN0eWxlLmRpc3BsYXkgPSBmb3VuZCA9PT0gMCA/ICcnIDogJ25vbmUnO1xyXG4gICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBzZWFyY2goY2F0ZWdvcnkgPSAnJywga2V5d29yZCA9ICcnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc2VhcmNoTW9kZSA9PT0gJ2xvY2FsJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4jc2VhcmNoTG9jYWwoY2F0ZWdvcnksIGtleXdvcmQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjcmVhdGVDYXRlZ29yaXplZCgpIHtcclxuXHJcbiAgICAgICAgdGhpcy5zZXREYXRhKHRoaXMuc2V0dGluZ3MuZGF0YSk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVSb290KCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVTZWFyY2hHVUkoKTtcclxuICAgICAgICB0aGlzLnJlbmRlck1vZHVsZXNDYXRlZ29yaXplZCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIHJlc29sdmUodGhpcylcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgYXN5bmMgY3JlYXRlKCkge1xyXG4gICAgICAgIHRoaXMuc2V0RGF0YSh0aGlzLnNldHRpbmdzLmRhdGEpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlUm9vdCgpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlQ2F0ZWdvcmllc01lbnUoKTtcclxuICAgICAgICB0aGlzLnJlbmRlck1vZHVsZXMoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVNlYXJjaEdVSSgpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZSh0aGlzKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG5cclxufVxyXG4iLCJcclxuY29uc3QgX0NvbW1hbmREaWFsb2dzID0gW107XHJcbmV4cG9ydCBjb25zdCBDb21tYW5kRGlhbG9nID0gZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gICAgX0NvbW1hbmREaWFsb2dzLnB1c2godGhpcyk7XHJcbiAgICB0aGlzLmRpYWxvZyA9IG13LmVsZW1lbnQoe1xyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWxlLWRpYWxvZy1ibG9jayAnICsgY2xhc3NOYW1lXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLm92ZXJsYXkgPSBtdy5lbGVtZW50KHtcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1sZS1vdmVybGF5J1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdGhpcy5vcGVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZGlhbG9nLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICB0aGlzLm92ZXJsYXkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgIHRoaXMuY2xvc2VCdXR0b24uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZGlhbG9nLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICB0aGlzLm92ZXJsYXkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgIHRoaXMuY2xvc2VCdXR0b24ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VCdXR0b24ucmVtb3ZlKCk7XHJcbiAgICAgICAgfSwgNDAwKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jbG9zZUJ1dHRvbiA9IG13LmVsZW1lbnQoe1xyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWxlLWRpYWxvZy1jbG9zZSdcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRoaXMuY2xvc2VCdXR0b24ub24oJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmUoKVxyXG4gICAgfSk7XHJcblxyXG4gICAgbXcuZWxlbWVudChkb2N1bWVudC5ib2R5KS5hcHBlbmQodGhpcy5vdmVybGF5KTtcclxuICAgIG13LmVsZW1lbnQoZG9jdW1lbnQuYm9keSkuYXBwZW5kKHRoaXMuZGlhbG9nKTtcclxuICAgIG13LmVsZW1lbnQoZG9jdW1lbnQuYm9keSkuYXBwZW5kKHRoaXMuY2xvc2VCdXR0b24pO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5vcGVuKCk7XHJcbiAgICB9LCAxMDApO1xyXG5cclxufTtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgaWYgKChlLmtleSA9PT0gJ0VzY2FwZScgfHwgZS5rZXlDb2RlID09PSAyNykgJiYgX0NvbW1hbmREaWFsb2dzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBfQ29tbWFuZERpYWxvZ3NbMF0ucmVtb3ZlKCk7XHJcbiAgICAgICAgX0NvbW1hbmREaWFsb2dzLnNwbGljZSgwLCAxKTtcclxuICAgIH1cclxufSk7XHJcblxyXG4iLCIvKipcclxuICogQGRlcHJlY2F0ZWQgVGhlIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWRcclxuICovXHJcblxyXG5pbXBvcnQgeyBNb2R1bGVzTGlzdCB9IGZyb20gXCIuLy4uLy4uL2NvcmUvbGUyL21vZHVsZXMtbGlzdC5qc1wiO1xyXG5pbXBvcnQgeyBDb21tYW5kRGlhbG9nIH0gZnJvbSBcIi4vY29tbWFuZHMtZGlhbG9nLmpzXCI7XHJcblxyXG52YXIgX2xheW90c0NhY2hlO1xyXG5cclxuLyoqXHJcbiAqIEBkZXByZWNhdGVkIFRoZSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkXHJcbiAqL1xyXG52YXIgX2xheW91dHNEYXRhTG9hZGVyID0gZnVuY3Rpb24gKGNtbW9kdWxlc0RpYWxvZykge1xyXG4gICAgdmFyIG1vZHVsZXNMaXN0ID0gbmV3IE1vZHVsZXNMaXN0KHtcclxuICAgICAgICBkYXRhOiBfbGF5b3RzQ2FjaGVcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBtb2R1bGVzTGlzdC5jcmVhdGUoKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZ3JpZCA9IG13LmVsZW1lbnQoe1xyXG4gICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXctbGUtbGF5b3V0cy1kaWFsb2ctcm93J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGNvbFNpZGViYXIgPSBtdy5lbGVtZW50KHtcclxuICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ213LWxlLWxheW91dHMtZGlhbG9nLWNvbCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBjb2xDb250ZW50ID0gbXcuZWxlbWVudCh7XHJcbiAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdtdy1sZS1sYXlvdXRzLWRpYWxvZy1jb2wnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBncmlkLmFwcGVuZChjb2xTaWRlYmFyKTtcclxuICAgICAgICBncmlkLmFwcGVuZChjb2xDb250ZW50KTtcclxuICAgICAgICBtdy5lbGVtZW50KG1vZHVsZXNMaXN0LnJvb3QpLmFwcGVuZChncmlkKTtcclxuICAgICAgICBjb2xTaWRlYmFyLmFwcGVuZChtb2R1bGVzTGlzdC5zZWFyY2hCbG9jayk7XHJcblxyXG4gICAgICAgIHZhciBjYXRlZ29yaWVzVGl0bGUgPSBtdy5lbGVtZW50KHtcclxuICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIGlubmVySFRNTDogJ0NhdGVnb3JpZXMnLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbXctbGUtbGF5b3V0cy1kaWFsb2ctY2F0ZWdvcmllcy10aXRsZSdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbFNpZGViYXIuYXBwZW5kKGNhdGVnb3JpZXNUaXRsZSk7XHJcbiAgICAgICAgY29sU2lkZWJhci5hcHBlbmQobW9kdWxlc0xpc3QuY2F0ZWdvcmllc05hdmlnYXRpb24pO1xyXG4gICAgICAgIGNvbENvbnRlbnQuYXBwZW5kKG1vZHVsZXNMaXN0Lm1vZHVsZXNMaXN0KTtcclxuXHJcbiAgICAgICAgY21tb2R1bGVzRGlhbG9nLmFwcGVuZChtb2R1bGVzTGlzdC5yb290KTtcclxuXHJcblxyXG4gICAgfSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGxheW91dFNlbGVjdG9yID0gKCkgPT4ge1xyXG5cclxuICAgIHZhciBjbW1vZHVsZXNEaWFsb2cgPSBuZXcgQ29tbWFuZERpYWxvZygnbXctbGUtbGF5b3V0cy1kaWFsb2cnKVxyXG4gICAgdmFyIGxheU91dHNEaWFsb2cgPSBjbW1vZHVsZXNEaWFsb2cuZGlhbG9nO1xyXG5cclxuXHJcbiAgICBpZiAoX2xheW90c0NhY2hlKSB7XHJcbiAgICAgICAgX2xheW91dHNEYXRhTG9hZGVyKGxheU91dHNEaWFsb2cpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBtdy5zcGlubmVyKHtcclxuICAgICAgICBlbGVtZW50OiBsYXlPdXRzRGlhbG9nLmdldCgwKSxcclxuICAgICAgICBkZWNvcmF0ZTogdHJ1ZVxyXG4gICAgfSlcclxuXHJcblxyXG4gICAgZmV0Y2goYCR7bXcuc2V0dGluZ3Muc2l0ZV91cmx9YXBpL21vZHVsZS9saXN0P2xheW91dF90eXBlPWxheW91dCZlbGVtZW50c19tb2RlPXRydWUmZ3JvdXBfbGF5b3V0c19ieV9jYXRlZ29yeT10cnVlYClcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YS5qc29uKCk7XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIF9sYXlvdHNDYWNoZSA9IGRhdGE7XHJcbiAgICAgICAgX2xheW91dHNEYXRhTG9hZGVyKGxheU91dHNEaWFsb2cpXHJcbiAgICAgICAgbXcuc3Bpbm5lcih7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IGxheU91dHNEaWFsb2cuZ2V0KDApLFxyXG4gICAgICAgICAgICBkZWNvcmF0ZTogdHJ1ZVxyXG4gICAgICAgIH0pLnJlbW92ZSgpXHJcbiAgICB9KVxyXG59XHJcbiIsImltcG9ydCB7IE1vZHVsZXNMaXN0IH0gZnJvbSBcIi4vLi4vLi4vY29yZS9sZTIvbW9kdWxlcy1saXN0LmpzXCI7XHJcbmltcG9ydCB7IENvbW1hbmREaWFsb2cgfSBmcm9tIFwiLi9jb21tYW5kcy1kaWFsb2cuanNcIjtcclxuXHJcblxyXG52YXIgX21vZHVsZXNDYWNoZTtcclxuXHJcbnZhciBfbW9kdWxlc0RhdGFMb2FkZXIgPSBmdW5jdGlvbiAobW9kdWxlc0RpYWxvZykge1xyXG4gICAgdmFyIG1vZHVsZXNMaXN0ID0gbmV3IE1vZHVsZXNMaXN0KHtcclxuICAgICAgICBkYXRhOiBfbW9kdWxlc0NhY2hlXHJcbiAgICB9KTtcclxuICAgIG1vZHVsZXNMaXN0LmNyZWF0ZUNhdGVnb3JpemVkKCkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbW9kdWxlc0RpYWxvZy5hcHBlbmQobW9kdWxlc0xpc3Qucm9vdClcclxuXHJcbiAgICB9KVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY29uc3QgbW9kdWxlU2VsZWN0b3IgPSAoKSA9PiB7XHJcbiAgICB2YXIgY21tb2R1bGVzRGlhbG9nID0gbmV3IENvbW1hbmREaWFsb2coJ213LWxlLW1vZHVsZXMtZGlhbG9nJyk7XHJcbiAgICB2YXIgbW9kdWxlc0RpYWxvZyA9IGNtbW9kdWxlc0RpYWxvZy5kaWFsb2c7XHJcblxyXG5cclxuICAgIG13LiQoJyNtdy1wbHVzLXRvb2x0aXAtc2VsZWN0b3IgbGknKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gbXcuJCh0aGlzKS5hdHRyKCdkYXRhLW1vZHVsZS1uYW1lJyk7XHJcbiAgICAgICAgICAgIHZhciBjb25mID0ge2NsYXNzOiB0aGlzLmNsYXNzTmFtZX07XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnbGF5b3V0Jykge1xyXG4gICAgICAgICAgICAgICAgY29uZi50ZW1wbGF0ZSA9IG13LiQodGhpcykuYXR0cigndGVtcGxhdGUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbXcubW9kdWxlLmluc2VydChtdy5fYWN0aXZlRWxlbWVudE92ZXIsIG5hbWUsIGNvbmYsIG13LmhhbmRsZUVsZW1lbnQucG9zaXRpb25lZEF0LCBtdy5saXZlRWRpdFN0YXRlKTtcclxuICAgICAgICAgICAgbXcud3lzaXd5Zy5jaGFuZ2UobXcuX2FjdGl2ZUVsZW1lbnRPdmVyKVxyXG4gICAgICAgICAgICB0b29sdGlwLnJlbW92ZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgaWYgKF9tb2R1bGVzQ2FjaGUpIHtcclxuICAgICAgICBfbW9kdWxlc0RhdGFMb2FkZXIobW9kdWxlc0RpYWxvZylcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbXcuc3Bpbm5lcih7XHJcbiAgICAgICAgICAgIGVsZW1lbnQ6IG1vZHVsZXNEaWFsb2cuZ2V0KDApLFxyXG4gICAgICAgICAgICBkZWNvcmF0ZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8qIGRlbW8gKi9cclxuICAgICAgICBmZXRjaChgJHttdy5zZXR0aW5ncy5zaXRlX3VybH1hcGkvbW9kdWxlL2xpc3Q/bGF5b3V0X3R5cGU9bW9kdWxlYClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmpzb24oKTtcclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICBfbW9kdWxlc0NhY2hlID0gZGF0YTtcclxuICAgICAgICAgICAgX21vZHVsZXNEYXRhTG9hZGVyKG1vZHVsZXNEaWFsb2cpXHJcbiAgICAgICAgICAgIG13LnNwaW5uZXIoe1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbW9kdWxlc0RpYWxvZy5nZXQoMCksXHJcbiAgICAgICAgICAgICAgICBkZWNvcmF0ZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KS5yZW1vdmUoKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbGF5b3V0U2VsZWN0b3IgfSBmcm9tIFwiLi9sYXlvdXQtc2VsZWN0b3IuanNcIjtcclxuaW1wb3J0IHsgbW9kdWxlU2VsZWN0b3IgfSBmcm9tIFwiLi9tb2R1bGUtc2VsZWN0b3IuanNcIlxyXG5cclxuZXhwb3J0IGNvbnN0IENvbW1hbmRzID0ge1xyXG4gICAgY3NzRWRpdG9yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nzcy1lZGl0b3ItdGVtcGxhdGUnKS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKVxyXG4gICAgfSxcclxuICAgIHRoZW1lRWRpdG9yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dlbmVyYWwtdGhlbWUtc2V0dGluZ3MnKS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKVxyXG4gICAgfSxcclxuICAgIGluc2VydE1vZHVsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBtb2R1bGVTZWxlY3RvcigpO1xyXG4gICAgfSxcclxuICAgIGluc2VydExheW91dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBsYXlvdXRTZWxlY3RvcigpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuXHJcbmV4cG9ydCBjb25zdCBNb2R1bGVzID0ge1xyXG5cclxuICAgIG1vZHVsZXNMaXN0RGF0YTogbnVsbCxcclxuXHJcbiAgICBsaXN0OiBhc3luYyBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1vZHVsZXNMaXN0RGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb2R1bGVzTGlzdERhdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCBheGlvcy5nZXQocm91dGUoJ2FwaS5tb2R1bGUubGlzdCcpICsgJz9sYXlvdXRfdHlwZT1tb2R1bGUnKVxyXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kdWxlc0xpc3REYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLm1vZHVsZXNMaXN0RGF0YTtcclxuXHJcbiAgICB9LFxyXG4gICAgbW9kdWxlc1NraW5zRGF0YTogW10sXHJcbiAgICBnZXRTa2luczogYXN5bmMgZnVuY3Rpb24gKG1vZHVsZSkge1xyXG4gICAgICAgIGlmICh0aGlzLm1vZHVsZXNTa2luc0RhdGFbbW9kdWxlXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb2R1bGVzU2tpbnNEYXRhW21vZHVsZV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCBheGlvcy5nZXQocm91dGUoJ2FwaS5tb2R1bGUuZ2V0U2tpbnMnKSArICc/bW9kdWxlPScgKyBtb2R1bGUpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2R1bGVzU2tpbnNEYXRhW21vZHVsZV0gPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubW9kdWxlc1NraW5zRGF0YVttb2R1bGVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZHVsZXNTa2luc0RhdGFbbW9kdWxlXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IExheW91dHMgPSB7XHJcblxyXG4gICAgbGF5b3V0c0xpc3REYXRhOiBudWxsLFxyXG5cclxuICAgIGxpc3Q6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubGF5b3V0c0xpc3REYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxheW91dHNMaXN0RGF0YTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IGF4aW9zLmdldChyb3V0ZSgnYXBpLm1vZHVsZS5saXN0JykgKyAnP2xheW91dF90eXBlPWxheW91dCZlbGVtZW50c19tb2RlPXRydWUmZ3JvdXBfbGF5b3V0c19ieV9jYXRlZ29yeT10cnVlJylcclxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxheW91dHNMaXN0RGF0YSA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGF5b3V0c0xpc3REYXRhO1xyXG5cclxuICAgIH0sXHJcblxyXG4gICAgbGF5b3V0U2tpbnNEYXRhOiBbXSxcclxuICAgIGdldFNraW5zOiBhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG1vZHVsZSA9ICdsYXlvdXRzJztcclxuICAgICAgICBpZiAodGhpcy5sYXlvdXRTa2luc0RhdGFbbW9kdWxlXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXRTa2luc0RhdGFbbW9kdWxlXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IGF4aW9zLmdldChyb3V0ZSgnYXBpLm1vZHVsZS5nZXRTa2lucycpICsgJz9tb2R1bGU9JyArIG1vZHVsZSlcclxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxheW91dFNraW5zRGF0YVttb2R1bGVdID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxheW91dFNraW5zRGF0YVttb2R1bGVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxheW91dFNraW5zRGF0YVttb2R1bGVdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59XHJcbiIsImltcG9ydCBNaWNyb3dlYmVyQmFzZUNsYXNzIGZyb20gXCIuLi9jb250YWluZXJzL2Jhc2UtY2xhc3MuanNcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgS2V5Ym9hcmRFdmVudHMgZXh0ZW5kcyBNaWNyb3dlYmVyQmFzZUNsYXNzIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUmVnaXN0ZXIoKSB7XHJcbiAgICAgICAgLypsZXQgc2VsZktleWJvYXJkRXZlbnRzID0gdGhpcztcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHtcclxuXHJcblxyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIiB8fCBlLmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZktleWJvYXJkRXZlbnRzLmRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZktleWJvYXJkRXZlbnRzLmRpc3BhdGNoKCdlbnRlcicsIGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIiB8fCBlLmtleUNvZGUgPT09IDI3KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZktleWJvYXJkRXZlbnRzLmRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZktleWJvYXJkRXZlbnRzLmRpc3BhdGNoKCdlc2NhcGUnLCBlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiQmFja3NwYWNlXCIgfHwgZS5rZXlDb2RlID09PSA4KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZktleWJvYXJkRXZlbnRzLmRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZktleWJvYXJkRXZlbnRzLmRpc3BhdGNoKCdiYWNrc3BhY2UnLCBlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09IFwiRGVsZXRlXCIgfHwgZS5rZXlDb2RlID09PSA0Nikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGZLZXlib2FyZEV2ZW50cy5kaXNwYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGZLZXlib2FyZEV2ZW50cy5kaXNwYXRjaCgnZGVsZXRlJywgZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT09IDgzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZktleWJvYXJkRXZlbnRzLmRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZktleWJvYXJkRXZlbnRzLmRpc3BhdGNoKCdjdHJsK3MnLCBlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PT0gOTApIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmS2V5Ym9hcmRFdmVudHMuZGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmS2V5Ym9hcmRFdmVudHMuZGlzcGF0Y2goJ2N0cmwreicsIGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSA4OSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGZLZXlib2FyZEV2ZW50cy5kaXNwYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGZLZXlib2FyZEV2ZW50cy5kaXNwYXRjaCgnY3RybCt5JywgZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTsqL1xyXG5cclxuICAgIH1cclxuXHJcblxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwiaW1wb3J0IE1pY3Jvd2ViZXJCYXNlQ2xhc3MgZnJvbSBcIi4uL2NvbnRhaW5lcnMvYmFzZS1jbGFzcy5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEljb25QaWNrZXIgZXh0ZW5kcyBNaWNyb3dlYmVyQmFzZUNsYXNzIHtcclxuICAgIHNlbGVjdEljb24odGFyZ2V0RWxlbWVudFNlbGVjdG9yKSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9ICQodGFyZ2V0RWxlbWVudFNlbGVjdG9yKVswXTtcclxuICAgICAgICBtdy5pY29uTG9hZGVyKCkuaW5pdCgpO1xyXG4gICAgICAgIHZhciBwaWNrZXIgPSBtdy5pY29uUGlja2VyKHtpY29uT3B0aW9uczogZmFsc2V9KTtcclxuICAgICAgICBwaWNrZXIudGFyZ2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xyXG4gICAgICAgIHBpY2tlci5vbignc2VsZWN0JywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgZGF0YS5yZW5kZXIoKTtcclxuICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gcGlja2VyLnRhcmdldC5vdXRlckhUTUxcclxuICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdpbnB1dCcpO1xyXG4gICAgICAgICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChldmVudCk7XHJcblxyXG4gICAgICAgICAgICBwaWNrZXIuZGlhbG9nKCdoaWRlJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcGlja2VyLmRpYWxvZygpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUljb24odGFyZ2V0RWxlbWVudFNlbGVjdG9yKSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9ICQodGFyZ2V0RWxlbWVudFNlbGVjdG9yKVswXTtcclxuICAgICAgICB0YXJnZXQudmFsdWUgPSAnJztcclxuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBNaWNyb3dlYmVyQmFzZUNsYXNzIGZyb20gXCIuLi9jb250YWluZXJzL2Jhc2UtY2xhc3MuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5rUGlja2VyIGV4dGVuZHMgTWljcm93ZWJlckJhc2VDbGFzcyB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdExpbmsodGFyZ2V0RWxlbWVudFNlbGVjdG9yKSB7XHJcblxyXG5cclxuICAgICAgICB2YXIgbGlua0VkaXRvciA9IG5ldyAobXcudG9wKCkpLkxpbmtFZGl0b3Ioe1xyXG4gICAgICAgICAgICBtb2RlOiAnZGlhbG9nJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcnM6IFtcclxuICAgICAgICAgICAgICAgIHt0eXBlOiAndXJsJywgY29uZmlnOiB7dGV4dDogZmFsc2UsIHRhcmdldDogZmFsc2V9fSxcclxuICAgICAgICAgICAgICAgIHt0eXBlOiAncGFnZScsIGNvbmZpZzoge3RleHQ6IGZhbHNlLCB0YXJnZXQ6IGZhbHNlfX0sXHJcbiAgICAgICAgICAgICAgICB7dHlwZTogJ3Bvc3QnLCBjb25maWc6IHt0ZXh0OiBmYWxzZSwgdGFyZ2V0OiBmYWxzZX19LFxyXG4gICAgICAgICAgICAgICAge3R5cGU6ICdmaWxlJywgY29uZmlnOiB7dGV4dDogZmFsc2UsIHRhcmdldDogZmFsc2V9fSxcclxuICAgICAgICAgICAgICAgIHt0eXBlOiAnZW1haWwnLCBjb25maWc6IHt0ZXh0OiBmYWxzZSwgdGFyZ2V0OiBmYWxzZX19LFxyXG4gICAgICAgICAgICAgICAge3R5cGU6ICdsYXlvdXQnLCBjb25maWc6IHt0ZXh0OiBmYWxzZSwgdGFyZ2V0OiBmYWxzZX19LFxyXG5cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKG13LiQodGFyZ2V0RWxlbWVudFNlbGVjdG9yKSkge1xyXG4gICAgICAgICAgICBsaW5rRWRpdG9yLnNldFZhbHVlKHtcclxuICAgICAgICAgICAgICAgIHVybDogbXcuJCh0YXJnZXRFbGVtZW50U2VsZWN0b3IpLnZhbCgpIHx8ICcnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzZWxlY3RMaW5rSW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgIGxpbmtFZGl0b3IucHJvbWlzZSgpLnRoZW4oZnVuY3Rpb24gKGxkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmICghbGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XHJcblxyXG4gICAgICAgICAgICB2YXIgdXJsID0gbGRhdGEudXJsO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHJlc3VsdC51cmwgPSB1cmw7XHJcblxyXG4gICAgICAgICAgICBpZiAobGRhdGEuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxkYXRhLmRhdGEuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuaWQgPSBsZGF0YS5kYXRhLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgobGRhdGEuZGF0YS50eXBlKSAmJiBsZGF0YS5kYXRhLnR5cGUgPT09ICdjYXRlZ29yeScpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC50eXBlID0gJ2NhdGVnb3J5JztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChsZGF0YS5kYXRhLnR5cGUpICYmIGxkYXRhLmRhdGEudHlwZSA9PT0gJ3BhZ2UnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQudHlwZSA9ICdjb250ZW50JztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxkYXRhLmRhdGEuY29udGVudF90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC50eXBlID0gJ2NvbnRlbnQnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgc2VsZWN0TGlua0luc3RhbmNlLmRpc3BhdGNoKCdzZWxlY3RlZCcsIHJlc3VsdCk7XHJcblxyXG4gICAgICAgIH0pXHJcblxyXG5cclxuICAgIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0ICcuL2luZGV4LmpzJ1xyXG5cclxuaW1wb3J0IHtNV1VuaXZlcnNhbENvbnRhaW5lcn0gZnJvbSBcIi4vY29udGFpbmVycy9jb250YWluZXIuanNcIjtcclxuXHJcblxyXG5pbXBvcnQge0VkaXRvckNvbXBvbmVudH0gZnJvbSBcIi4vY29tcG9uZW50cy9lZGl0b3IvZWRpdG9yLmpzXCI7XHJcbmltcG9ydCB7TGl2ZUVkaXRDYW52YXN9IGZyb20gXCIuL2NvbXBvbmVudHMvbGl2ZS1lZGl0LWNhbnZhcy9saXZlLWVkaXQtY2FudmFzLmpzXCI7XHJcbmltcG9ydCB7bGl2ZUVkaXRDb21wb25lbnR9IGZyb20gXCIuL2NvbXBvbmVudHMvbGl2ZS1lZGl0L2xpdmUtZWRpdC5qc1wiO1xyXG5pbXBvcnQge0NvbW1hbmRzfSBmcm9tIFwiLi9zZXJ2aWNlcy9jb21tYW5kcy5qc1wiO1xyXG5pbXBvcnQge01vZHVsZXN9IGZyb20gXCIuL3NlcnZpY2VzL21vZHVsZXMuanNcIjtcclxuaW1wb3J0IHtMYXlvdXRzfSBmcm9tIFwiLi9zZXJ2aWNlcy9sYXlvdXRzLmpzXCI7XHJcbmltcG9ydCB7S2V5Ym9hcmRFdmVudHN9IGZyb20gIFwiLi9zZXJ2aWNlcy9rZXlib2FyZC1ldmVudHMuanNcIjtcclxuaW1wb3J0IHtNb2R1bGVTZXR0aW5nc30gZnJvbSBcIi4vc2VydmljZXMvbW9kdWxlLXNldHRpbmdzXCI7XHJcbmltcG9ydCB7SWNvblBpY2tlcn0gZnJvbSBcIi4vc2VydmljZXMvaWNvbi1waWNrZXJcIjtcclxuaW1wb3J0IHtMaW5rUGlja2VyfSBmcm9tIFwiLi9zZXJ2aWNlcy9saW5rLXBpY2tlclwiO1xyXG5cclxuXHJcbm13LmFwcCA9IG5ldyBNV1VuaXZlcnNhbENvbnRhaW5lcigpO1xyXG5cclxuXHJcbi8vc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHJcbiAgICBtdy5hcHAucmVnaXN0ZXIoJ2NvbW1hbmRzJywgQ29tbWFuZHMpO1xyXG4gICAgbXcuYXBwLnJlZ2lzdGVyKCdtb2R1bGVzJywgTW9kdWxlcyk7XHJcblxyXG4gICAgbXcuYXBwLnJlZ2lzdGVyKCdsYXlvdXRzJywgTGF5b3V0cyk7XHJcbiAgICBtdy5hcHAucmVnaXN0ZXIoJ2tleWJvYXJkJywgS2V5Ym9hcmRFdmVudHMpO1xyXG4gICAgbXcuYXBwLnJlZ2lzdGVyKCdpY29uUGlja2VyJywgSWNvblBpY2tlcik7XHJcbiAgICBtdy5hcHAucmVnaXN0ZXIoJ2xpbmtQaWNrZXInLCBMaW5rUGlja2VyKTtcclxuXHJcbi8vbXcuYXBwLnJlZ2lzdGVyKCdjb21tYW5kcycsIENvbW1hbmRzKTtcclxuXHJcblxyXG4vL30sIDMwMCk7XHJcbiJdLCJuYW1lcyI6WyJfZXZlbnRzIiwiTWljcm93ZWJlckJhc2VDbGFzcyIsIl9fcHJpdmF0ZUFkZCIsImYiLCJfX3ByaXZhdGVHZXQiLCJpbmRleCIsImMiLCJfbW9kdWxlcyIsIl9ydW4iLCJydW5fZm4iLCJNV1VuaXZlcnNhbENvbnRhaW5lciIsIm1ldGhvZCIsImRhdGEiLCJpIiwiX19wcml2YXRlTWV0aG9kIiwibmFtZSIsImNsYXNzUmVmIiwiaW5zdGFuY2UiLCJFZGl0b3JDb21wb25lbnQiLCJob2xkZXIiLCJfZm9udEZhbWlseVByb3ZpZGVyIiwiX2UiLCJlIiwiZm9udHNBcnJheSIsImZvbnQiLCJmb250RmFtaWx5UHJvdmlkZXIiLCJmcmFtZSIsImVkaXRvckNvbnRyb2xzIiwibGl2ZUVkaXRvciIsImJ0blVuZG8iLCJidG5SZWRvIiwibWVtUGluIiwiYmluZCIsImZuIiwidGhpc0FyZyIsImFyZ3MiLCJyZXF1aXJlJCQwIiwidG9TdHJpbmciLCJpc0FycmF5IiwidmFsIiwiaXNVbmRlZmluZWQiLCJpc0J1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJyZXN1bHQiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwicHJvdG90eXBlIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNGdW5jdGlvbiIsImlzU3RyZWFtIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJ0cmltIiwic3RyIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJmb3JFYWNoIiwib2JqIiwibCIsImtleSIsIm1lcmdlIiwiYXNzaWduVmFsdWUiLCJleHRlbmQiLCJhIiwiYiIsInN0cmlwQk9NIiwiY29udGVudCIsInV0aWxzIiwiZW5jb2RlIiwiYnVpbGRVUkwiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidiIsImhhc2htYXJrSW5kZXgiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsIm9wdGlvbnMiLCJpZCIsImgiLCJJbnRlcmNlcHRvck1hbmFnZXJfMSIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJoZWFkZXJzIiwibm9ybWFsaXplZE5hbWUiLCJ2YWx1ZSIsImVuaGFuY2VFcnJvciIsImVycm9yIiwiY29uZmlnIiwiY29kZSIsInJlcXVlc3QiLCJyZXNwb25zZSIsImNyZWF0ZUVycm9yIiwibWVzc2FnZSIsInNldHRsZSIsInJlc29sdmUiLCJyZWplY3QiLCJ2YWxpZGF0ZVN0YXR1cyIsImNvb2tpZXMiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsIm1hdGNoIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwiYmFzZVVSTCIsInJlbGF0aXZlVVJMIiwicmVxdWlyZSQkMSIsImJ1aWxkRnVsbFBhdGgiLCJyZXF1ZXN0ZWRVUkwiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlSGVhZGVycyIsInBhcnNlZCIsImxpbmUiLCJpc1VSTFNhbWVPcmlnaW4iLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJvcmlnaW5VUkwiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInJlcXVlc3RVUkwiLCJyZXF1aXJlJCQyIiwicmVxdWlyZSQkMyIsInJlcXVpcmUkJDQiLCJyZXF1aXJlJCQ1IiwicmVxdWlyZSQkNiIsInJlcXVpcmUkJDciLCJ4aHIiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwicmVzcG9uc2VUeXBlIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImZ1bGxQYXRoIiwib25sb2FkZW5kIiwicmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VEYXRhIiwidGltZW91dEVycm9yTWVzc2FnZSIsInhzcmZWYWx1ZSIsImNhbmNlbCIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiZ2V0RGVmYXVsdEFkYXB0ZXIiLCJhZGFwdGVyIiwic3RyaW5naWZ5U2FmZWx5IiwicmF3VmFsdWUiLCJwYXJzZXIiLCJlbmNvZGVyIiwiZGVmYXVsdHMiLCJ0cmFuc2l0aW9uYWwiLCJzaWxlbnRKU09OUGFyc2luZyIsImZvcmNlZEpTT05QYXJzaW5nIiwic3RyaWN0SlNPTlBhcnNpbmciLCJzdGF0dXMiLCJkZWZhdWx0c18xIiwidHJhbnNmb3JtRGF0YSIsImZucyIsImNvbnRleHQiLCJpc0NhbmNlbCIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJkaXNwYXRjaFJlcXVlc3QiLCJyZWFzb24iLCJtZXJnZUNvbmZpZyIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMktleXMiLCJtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyIsImRlZmF1bHRUb0NvbmZpZzJLZXlzIiwiZGlyZWN0TWVyZ2VLZXlzIiwiZ2V0TWVyZ2VkVmFsdWUiLCJ0YXJnZXQiLCJzb3VyY2UiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwicHJvcCIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsInBrZyIsInZhbGlkYXRvcnMiLCJ0eXBlIiwidGhpbmciLCJkZXByZWNhdGVkV2FybmluZ3MiLCJjdXJyZW50VmVyQXJyIiwiaXNPbGRlclZlcnNpb24iLCJ2ZXJzaW9uIiwidGhhblZlcnNpb24iLCJwa2dWZXJzaW9uQXJyIiwiZGVzdFZlciIsInZhbGlkYXRvciIsImlzRGVwcmVjYXRlZCIsImZvcm1hdE1lc3NhZ2UiLCJvcHQiLCJkZXNjIiwib3B0cyIsImFzc2VydE9wdGlvbnMiLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJrZXlzIiwiQXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJwcm9taXNlIiwiY2hhaW4iLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJBeGlvc18xIiwiQ2FuY2VsIiwiQ2FuY2VsXzEiLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJ0b2tlbiIsIkNhbmNlbFRva2VuXzEiLCJzcHJlYWQiLCJjYWxsYmFjayIsImFyciIsImlzQXhpb3NFcnJvciIsInBheWxvYWQiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJheGlvcyIsInByb21pc2VzIiwicmVxdWlyZSQkOCIsInJlcXVpcmUkJDkiLCJheGlvc01vZHVsZSIsImF4aW9zXzEiLCJtb2R1bGUiLCJPYmplY3RTZXJ2aWNlIiwiZXh0ZW5kZWQiLCJkZWVwIiwiTVdFbGVtZW50Iiwicm9vdCIsInNjb3BlIiwic2VsZWN0b3IiLCJjYiIsImNvbnRlbnRNYW5hZ2UiLCJlbCIsIm1vZGUiLCJkdCIsInN0IiwiY3NzIiwibnZhbCIsImFjdGl2ZSIsInNlbCIsImFsbCIsImNscyIsIm5vZGUiLCJzaW5nbGVDbGFzcyIsImlzTXVsdGlwbGUiLCJjbGVhbiIsImN1cnIiLCJ3aW4iLCJyZWN0IiwicmVzIiwiZXZlbnQiLCJ3aGF0IiwibmV3RWwiLCJEb21RdWVyeSIsImV2ZW50cyIsImV2IiwiZnVuYyIsIm5vZGVOYW1lIiwiRWxlbWVudE1hbmFnZXIiLCJtYXRjaGVzIiwiRG9tU2VydmljZSIsInRlc3QiLCJ0YWciLCJwYXJlbnQiLCJoMSIsImgyIiwib2ZmIiwib25seV9maXJzdCIsImNvdW50IiwiX19wdWJsaWNGaWVsZCIsIkVsZW1lbnRBbmFseXplclNlcnZpY2VCYXNlIiwic2V0dGluZ3MiLCJvcmRlciIsIkRyb3BwYWJsZUVsZW1lbnRBbmFseXplclNlcnZpY2UiLCJkcmFnZ2VkRWxlbWVudCIsImRyYWdnZWRFbGVtZW50SXNMYXlvdXRSZXN0cmljdGVkIiwiaXNTdHJpY3RDYXNlIiwicHJldlkiLCJEcm9wUG9zaXRpb24iLCJjb25mIiwieSIsImRpc3RhbmNlIiwiRHJhZ2dhYmxlIiwicm9vdFNldHRpbmdzIiwic2Nyb2xsIiwic3RlcCIsInRhcmdldHMiLCJ0YXJnZXRBY3Rpb24iLCJwb3MiLCJzY3JsU3RwIiwiX19lIiwiX2Rpc2FibGVkIiwiX2VuYWJsZWQiLCJSZXNpemFibGUiLCJkeCIsImR5IiwiY2FsY0giLCJjYWxjVyIsInN0eWxlcyIsIl9fcHJpdmF0ZVNldCIsIm5vZGVUIiwibm9kZVIiLCJub2RlQiIsIm5vZGVMIiwicmVzaXplcnMiLCJyZXNpemVyIiwiSGFuZGxlIiwiX3Zpc2libGUiLCJfY3VycmVudFRhcmdldCIsIl9jb250ZW50IiwiZ2V0U2Nyb2xsIiwic3giLCJzeSIsImQiLCJyIiwibWVudSIsInRyYW5zZm9ybSIsImZvcmNlZCIsImVsZW1lbnRoYW5kbGUiLCJfcmVzaXphYmxlTWF4V2lkdGgiLCJfcmVzaXphYmxlTWF4SGVpZ2h0IiwibnVtYmVyIiwiZWxlbWVudCIsIm1heERpc3RhbmNlIiwiY2xvc2VzdEVsZW1lbnRzIiwiY3VycmVudEVsZW1lbnQiLCJlbGVtZW50cyIsImNhbGN1bGF0ZUFzcGVjdFJhdGlvRml0Iiwic3JjV2lkdGgiLCJzcmNIZWlnaHQiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsInJhdGlvIiwiR2V0UG9pbnRlclRhcmdldHMiLCJkaXN0YW5jZU1heCIsInJvdW5kNSIsIngiLCJnZXROZWFyQ29vcmRpbmF0ZXMiLCJ4MSIsIngxTWF4IiwieTEiLCJ5MU1heCIsImFkZE5vZGUiLCJkb3RzIiwiY29vcmRzIiwiaXNSb3dMaWtlIiwiaXNDb2x1bW5MSWtlIiwiX2ZyYWdtZW50IiwiZnJhZ21lbnQiLCJfaXNCbG9ja0NhY2hlIiwiaXNCbG9ja0xldmVsIiwiZ2V0RWxlbWVudHNMaWtlIiwiZmluYWwiLCJNb2RlQXV0byIsImJhY2tncm91bmRJbWFnZUhvbGRlciIsImVkaXRDbGFzcyIsIm1vZHVsZUNsYXNzIiwiZWxlbWVudENsYXNzIiwiYWxsb3dEcm9wIiwiYmdIb2xkZXJzIiwibm9FZGl0TW9kdWxlcyIsImVkaXRzIiwiaTEiLCJpMiIsImkyYSIsImFsbEFsbG93RHJvcHMiLCJpM2EiLCJIYW5kbGVzIiwiaGFuZGxlcyIsImhhbmRsZSIsImV4Y2VwdCIsInRnIiwiRHJvcEluZGljYXRvciIsInBvc2l0aW9uQ2FjaGUiLCJwb3NpdGlvbnMiLCJwb3NpdGlvbnNQcmVmaXgiLCJwb3NpdGlvbnNDbGFzc2VzIiwiY3VycmVudFBvc2l0aW9uQ2xhc3MiLCJwb3NpdGlvbiIsIlRvb2x0aXAiLCJIYW5kbGVNZW51IiwiX3RpdGxlIiwidGl0bGVUZXh0IiwidGl0bGVJY29uIiwiY3JlYXRlVGl0bGUiLCJfdGFyZ2V0IiwidGl0bGUiLCJpY29uIiwiYnRuSG9sZGVyIiwiYnRuIiwiYnRuQ29udGVuQ29uZiIsImJ0bkNvbnRlbnQiLCJ0ZXh0Iiwic3VibWVudSIsImRpYWxvZ0Zvb3RlciIsIm9rTGFiZWwiLCJjYW5jZWxMYWJlbCIsImZvb3RlciIsIm9rIiwiX3JlbW92ZUxpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXJfZm4iLCJEaWFsb2ciLCJfIiwiY2xvc2VCdG4iLCJvdG9wIiwib2xlZnQiLCJDb25maXJtIiwiZGlhbG9nIiwiRWxlbWVudEhhbmRsZUNvbnRlbnQiLCJwcm90byIsImNsb25lQWJsZU1lbnUiLCJzZWxmTm9kZSIsImlzQ2xvbmVhYmxlIiwicHJldiIsIm5leHQiLCJNb2R1bGVIYW5kbGVDb250ZW50Iiwicm9vdFNjb3BlIiwic3RhdGljTWVudSIsIkxheW91dEhhbmRsZUNvbnRlbnQiLCJvZmZUYXJnZXQiLCJvZmZQcmV2IiwidG8iLCJwbHVzTGFiZWwiLCJoYW5kbGVQbHVzIiwid2hpY2giLCJpMThuIiwibGFuZyIsImxhYmVsIiwiSW50ZXJhY3Rpb25IYW5kbGVDb250ZW50IiwiTGl2ZUVkaXQiLCJlbGVtZW50SGFuZGxlQ29udGVudCIsIm1vZHVsZUhhbmRsZUNvbnRlbnQiLCJsYXlvdXRIYW5kbGVDb250ZW50IiwiX2RsZyIsImVsZW1lbnRIYW5kbGUiLCJtb2R1bGVIYW5kbGUiLCJsYXlvdXRIYW5kbGUiLCJpbnRlcmFjdGlvbkhhbmRsZUNvbnRlbnQiLCJfZXZlbnRzSGFuZGxlIiwiZmlyc3QiLCJsYXlvdXQiLCJsYXlvdXRIYXNTZWxlY3RlZFRhcmdldCIsImVsZW1lbnRUYXJnZXQiLCJtb2R1bGVUYXJnZXQiLCJfZGF0YSIsIl9tb2R1bGVzTm9kZXMiLCJfcmVuZGVyTW9kdWxlIiwicmVuZGVyTW9kdWxlX2ZuIiwiX2NhdGVnb3JpemVkQmxvY2siLCJjYXRlZ29yaXplZEJsb2NrX2ZuIiwiX3NlYXJjaExvY2FsIiwic2VhcmNoTG9jYWxfZm4iLCJNb2R1bGVzTGlzdCIsInRyaWdnZXIiLCJsZW5ndGgiLCJjYXQiLCJjYXRlZ29yaWVzIiwiY2F0cyIsImljIiwibGVuZ3RoYyIsIm5hdiIsImNhdGVnb3J5IiwiaXRlbXMiLCJzdHlsZSIsImJ5Q2F0ZWdvcnkiLCJtb2R1bGVJdGVtIiwiYmMiLCJpdGVtIiwia2V5d29yZCIsImNhdGVnb3J5TmFtZSIsImZvdW5kIiwiX0NvbW1hbmREaWFsb2dzIiwiQ29tbWFuZERpYWxvZyIsImNsYXNzTmFtZSIsIl9sYXlvdHNDYWNoZSIsIl9sYXlvdXRzRGF0YUxvYWRlciIsImNtbW9kdWxlc0RpYWxvZyIsIm1vZHVsZXNMaXN0IiwiZ3JpZCIsImNvbFNpZGViYXIiLCJjb2xDb250ZW50IiwiY2F0ZWdvcmllc1RpdGxlIiwibGF5b3V0U2VsZWN0b3IiLCJsYXlPdXRzRGlhbG9nIiwiX21vZHVsZXNDYWNoZSIsIl9tb2R1bGVzRGF0YUxvYWRlciIsIm1vZHVsZXNEaWFsb2ciLCJtb2R1bGVTZWxlY3RvciIsIkNvbW1hbmRzIiwiTW9kdWxlcyIsIkxheW91dHMiLCJLZXlib2FyZEV2ZW50cyIsIkljb25QaWNrZXIiLCJ0YXJnZXRFbGVtZW50U2VsZWN0b3IiLCJwaWNrZXIiLCJMaW5rUGlja2VyIiwibGlua0VkaXRvciIsInNlbGVjdExpbmtJbnN0YW5jZSIsImxkYXRhIl0sIm1hcHBpbmdzIjoiaWpCQUFBLElBQUFBLEVBQUEsTUFBTUMsRUFBb0IsQ0FBMUIsY0FDSUMsRUFBQSxLQUFBRixFQUFVLENBQUEsR0FDVixHQUFHLEVBQUdHLEVBQUcsQ0FDTEMsRUFBQSxLQUFLSixHQUFRLENBQUMsRUFBSUksRUFBQSxLQUFLSixHQUFRLENBQUMsRUFBRSxLQUFLRyxDQUFDLEVBQUtDLEVBQUEsS0FBS0osR0FBUSxDQUFDLEVBQUksQ0FBQ0csQ0FBQyxDQUNwRSxDQUNELElBQUksRUFBR0EsRUFBRyxDQUNOLEdBQUlDLEVBQUEsS0FBS0osR0FBUSxDQUFDLEVBR2xCLEdBQUcsT0FBT0csR0FBTSxXQUFZLENBQ3hCLE1BQU1FLEVBQVFELEVBQUEsS0FBS0osR0FBUSxDQUFDLEVBQUUsUUFBUUcsQ0FBQyxFQUN2QyxHQUFHRSxJQUFVLEdBQ1QsT0FFSkQsRUFBQSxLQUFLSixHQUFRLENBQUMsRUFBRSxPQUFPSyxFQUFPLENBQUMsT0FFL0JELEVBQUEsS0FBS0osR0FBUSxDQUFDLEVBQUksRUFFekIsQ0FFRCxTQUFVLEVBQUdHLEVBQUcsQ0FDWkMsRUFBQSxLQUFLSixHQUFRLENBQUMsR0FBSUksRUFBQSxLQUFLSixHQUFRLENBQUMsRUFBRSxRQUFRLFNBQVVNLEVBQUcsQ0FDbkRBLEVBQUUsS0FBSyxLQUFNSCxDQUFDLENBQ2pCLENBQUEsQ0FDSixDQUVELEtBQU0sRUFBR0EsRUFBRyxDQUNSLE9BQU8sS0FBSyxTQUFTLEVBQUdBLENBQUMsQ0FDNUIsQ0FFTCxDQTdCSUgsRUFBQSxZQURKLElBQUFPLEVBQUFDLEVBQUFDLEdDRU8sTUFBTUMsV0FBNkJULEVBQW9CLENBQXZELGtDQUtIQyxFQUFBLEtBQUFNLEdBSEFOLEVBQUEsS0FBQUssRUFBVyxDQUFBLEdBV1gsS0FBS0ksRUFB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LEVBR0wsS0FBSXBkLEVBQVMsQ0FBQSxFQUVUNkIsRUFBTXViLEVBQU0sSUFHaEJwZCxFQUFPLElBQU02QixFQUVUdWIsRUFBTSxNQUNGQSxFQUFNLEtBQUssS0FDWHBkLEVBQU8sR0FBS29kLEVBQU0sS0FBSyxHQUNsQkEsRUFBTSxLQUFLLE1BQVNBLEVBQU0sS0FBSyxPQUFTLFdBRXpDcGQsRUFBTyxLQUFPLFlBQ05vZCxFQUFNLEtBQUssTUFBU0EsRUFBTSxLQUFLLE9BQVMsUUFHekNBLEVBQU0sS0FBSyxnQkFDbEJwZCxFQUFPLEtBQU8sWUFRMUJtZCxFQUFtQixTQUFTLFdBQVluZCxDQUFNLEVBRTFELENBQVMsQ0FHSixDQUVMLENDaERBLEdBQUcsSUFBTSxJQUFJbkMsR0FLVCxHQUFHLElBQUksU0FBUyxXQUFZNmUsRUFBUSxFQUNwQyxHQUFHLElBQUksU0FBUyxVQUFXQyxFQUFPLEVBRWxDLEdBQUcsSUFBSSxTQUFTLFVBQVdDLEVBQU8sRUFDbEMsR0FBRyxJQUFJLFNBQVMsV0FBWUMsRUFBYyxFQUMxQyxHQUFHLElBQUksU0FBUyxhQUFjQyxFQUFVLEVBQ3hDLEdBQUcsSUFBSSxTQUFTLGFBQWNHLEVBQVUiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyMywyNCwyNSwyNiwyNywyOCwyOSwzMF19
