function Ai(e,t){const n=Object.create(null),r=e.split(",");for(let s=0;s<r.length;s++)n[r[s]]=!0;return t?s=>!!n[s.toLowerCase()]:s=>!!n[s]}const Pe={},Yt=[],ot=()=>{},xl=()=>!1,_l=/^on[^a-z]/,Yr=e=>_l.test(e),Ni=e=>e.startsWith("onUpdate:"),Be=Object.assign,Jr=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},Cl=Object.prototype.hasOwnProperty,he=(e,t)=>Cl.call(e,t),ee=Array.isArray,Jt=e=>er(e)==="[object Map]",Mi=e=>er(e)==="[object Set]",oe=e=>typeof e=="function",He=e=>typeof e=="string",Xr=e=>typeof e=="symbol",Te=e=>e!==null&&typeof e=="object",Oi=e=>Te(e)&&oe(e.then)&&oe(e.catch),Fi=Object.prototype.toString,er=e=>Fi.call(e),wl=e=>er(e).slice(8,-1),ki=e=>er(e)==="[object Object]",Zr=e=>He(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,$n=Ai(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),tr=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},El=/-(\w)/g,ft=tr(e=>e.replace(El,(t,n)=>n?n.toUpperCase():"")),Sl=/\B([A-Z])/g,nr=tr(e=>e.replace(Sl,"-$1").toLowerCase()),Qr=tr(e=>e.charAt(0).toUpperCase()+e.slice(1)),Pr=tr(e=>e?`on${Qr(e)}`:""),vn=(e,t)=>!Object.is(e,t),Tr=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},qn=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},Pl=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let js;const Lr=()=>js||(js=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Tn(e){if(ee(e)){const t={};for(let n=0;n<e.length;n++){const r=e[n],s=He(r)?Ml(r):Tn(r);if(s)for(const i in s)t[i]=s[i]}return t}else{if(He(e))return e;if(Te(e))return e}}const Tl=/;(?![^(]*\))/g,Al=/:([^]+)/,Nl=/\/\*[^]*?\*\//g;function Ml(e){const t={};return e.replace(Nl,"").split(Tl).forEach(n=>{if(n){const r=n.split(Al);r.length>1&&(t[r[0].trim()]=r[1].trim())}}),t}function rr(e){let t="";if(He(e))t=e;else if(ee(e))for(let n=0;n<e.length;n++){const r=rr(e[n]);r&&(t+=r+" ")}else if(Te(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function Nu(e){if(!e)return null;let{class:t,style:n}=e;return t&&!He(t)&&(e.class=rr(t)),n&&(e.style=Tn(n)),e}const Ol=e=>He(e)?e:e==null?"":ee(e)||Te(e)&&(e.toString===Fi||!oe(e.toString))?JSON.stringify(e,Li,2):String(e),Li=(e,t)=>t&&t.__v_isRef?Li(e,t.value):Jt(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((n,[r,s])=>(n[`${r} =>`]=s,n),{})}:Mi(t)?{[`Set(${t.size})`]:[...t.values()]}:Te(t)&&!ee(t)&&!ki(t)?String(t):t;let Qe;class Ii{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Qe,!t&&Qe&&(this.index=(Qe.scopes||(Qe.scopes=[])).push(this)-1)}get active(){return this._active}run(t){if(this._active){const n=Qe;try{return Qe=this,t()}finally{Qe=n}}}on(){Qe=this}off(){Qe=this.parent}stop(t){if(this._active){let n,r;for(n=0,r=this.effects.length;n<r;n++)this.effects[n].stop();for(n=0,r=this.cleanups.length;n<r;n++)this.cleanups[n]();if(this.scopes)for(n=0,r=this.scopes.length;n<r;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!t){const s=this.parent.scopes.pop();s&&s!==this&&(this.parent.scopes[this.index]=s,s.index=this.index)}this.parent=void 0,this._active=!1}}}function Mu(e){return new Ii(e)}function Fl(e,t=Qe){t&&t.active&&t.effects.push(e)}function kl(){return Qe}function Ou(e){Qe&&Qe.cleanups.push(e)}const Gr=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Di=e=>(e.w&Ot)>0,Ui=e=>(e.n&Ot)>0,Ll=({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Ot},Il=e=>{const{deps:t}=e;if(t.length){let n=0;for(let r=0;r<t.length;r++){const s=t[r];Di(s)&&!Ui(s)?s.delete(e):t[n++]=s,s.w&=~Ot,s.n&=~Ot}t.length=n}},Wn=new WeakMap;let fn=0,Ot=1;const Ir=30;let st;const $t=Symbol(""),Dr=Symbol("");class es{constructor(t,n=null,r){this.fn=t,this.scheduler=n,this.active=!0,this.deps=[],this.parent=void 0,Fl(this,r)}run(){if(!this.active)return this.fn();let t=st,n=Nt;for(;t;){if(t===this)return;t=t.parent}try{return this.parent=st,st=this,Nt=!0,Ot=1<<++fn,fn<=Ir?Ll(this):Rs(this),this.fn()}finally{fn<=Ir&&Il(this),Ot=1<<--fn,st=this.parent,Nt=n,this.parent=void 0,this.deferStop&&this.stop()}}stop(){st===this?this.deferStop=!0:this.active&&(Rs(this),this.onStop&&this.onStop(),this.active=!1)}}function Rs(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}let Nt=!0;const ji=[];function nn(){ji.push(Nt),Nt=!1}function rn(){const e=ji.pop();Nt=e===void 0?!0:e}function Ze(e,t,n){if(Nt&&st){let r=Wn.get(e);r||Wn.set(e,r=new Map);let s=r.get(n);s||r.set(n,s=Gr()),Ri(s)}}function Ri(e,t){let n=!1;fn<=Ir?Ui(e)||(e.n|=Ot,n=!Di(e)):n=!e.has(st),n&&(e.add(st),st.deps.push(e))}function yt(e,t,n,r,s,i){const l=Wn.get(e);if(!l)return;let a=[];if(t==="clear")a=[...l.values()];else if(n==="length"&&ee(e)){const d=Number(r);l.forEach((p,m)=>{(m==="length"||m>=d)&&a.push(p)})}else switch(n!==void 0&&a.push(l.get(n)),t){case"add":ee(e)?Zr(n)&&a.push(l.get("length")):(a.push(l.get($t)),Jt(e)&&a.push(l.get(Dr)));break;case"delete":ee(e)||(a.push(l.get($t)),Jt(e)&&a.push(l.get(Dr)));break;case"set":Jt(e)&&a.push(l.get($t));break}if(a.length===1)a[0]&&Ur(a[0]);else{const d=[];for(const p of a)p&&d.push(...p);Ur(Gr(d))}}function Ur(e,t){const n=ee(e)?e:[...e];for(const r of n)r.computed&&Vs(r);for(const r of n)r.computed||Vs(r)}function Vs(e,t){(e!==st||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}function Dl(e,t){var n;return(n=Wn.get(e))==null?void 0:n.get(t)}const Ul=Ai("__proto__,__v_isRef,__isVue"),Vi=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Xr)),jl=ts(),Rl=ts(!1,!0),Vl=ts(!0),Hs=Hl();function Hl(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...n){const r=pe(this);for(let i=0,l=this.length;i<l;i++)Ze(r,"get",i+"");const s=r[t](...n);return s===-1||s===!1?r[t](...n.map(pe)):s}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...n){nn();const r=pe(this)[t].apply(this,n);return rn(),r}}),e}function $l(e){const t=pe(this);return Ze(t,"has",e),t.hasOwnProperty(e)}function ts(e=!1,t=!1){return function(r,s,i){if(s==="__v_isReactive")return!e;if(s==="__v_isReadonly")return e;if(s==="__v_isShallow")return t;if(s==="__v_raw"&&i===(e?t?sa:Ki:t?zi:Bi).get(r))return r;const l=ee(r);if(!e){if(l&&he(Hs,s))return Reflect.get(Hs,s,i);if(s==="hasOwnProperty")return $l}const a=Reflect.get(r,s,i);return(Xr(s)?Vi.has(s):Ul(s))||(e||Ze(r,"get",s),t)?a:Ve(a)?l&&Zr(s)?a:a.value:Te(a)?e?qi(a):ss(a):a}}const Bl=Hi(),zl=Hi(!0);function Hi(e=!1){return function(n,r,s,i){let l=n[r];if(Qt(l)&&Ve(l)&&!Ve(s))return!1;if(!e&&(!Yn(s)&&!Qt(s)&&(l=pe(l),s=pe(s)),!ee(n)&&Ve(l)&&!Ve(s)))return l.value=s,!0;const a=ee(n)&&Zr(r)?Number(r)<n.length:he(n,r),d=Reflect.set(n,r,s,i);return n===pe(i)&&(a?vn(s,l)&&yt(n,"set",r,s):yt(n,"add",r,s)),d}}function Kl(e,t){const n=he(e,t);e[t];const r=Reflect.deleteProperty(e,t);return r&&n&&yt(e,"delete",t,void 0),r}function ql(e,t){const n=Reflect.has(e,t);return(!Xr(t)||!Vi.has(t))&&Ze(e,"has",t),n}function Wl(e){return Ze(e,"iterate",ee(e)?"length":$t),Reflect.ownKeys(e)}const $i={get:jl,set:Bl,deleteProperty:Kl,has:ql,ownKeys:Wl},Yl={get:Vl,set(e,t){return!0},deleteProperty(e,t){return!0}},Jl=Be({},$i,{get:Rl,set:zl}),ns=e=>e,sr=e=>Reflect.getPrototypeOf(e);function kn(e,t,n=!1,r=!1){e=e.__v_raw;const s=pe(e),i=pe(t);n||(t!==i&&Ze(s,"get",t),Ze(s,"get",i));const{has:l}=sr(s),a=r?ns:n?os:bn;if(l.call(s,t))return a(e.get(t));if(l.call(s,i))return a(e.get(i));e!==s&&e.get(t)}function Ln(e,t=!1){const n=this.__v_raw,r=pe(n),s=pe(e);return t||(e!==s&&Ze(r,"has",e),Ze(r,"has",s)),e===s?n.has(e):n.has(e)||n.has(s)}function In(e,t=!1){return e=e.__v_raw,!t&&Ze(pe(e),"iterate",$t),Reflect.get(e,"size",e)}function $s(e){e=pe(e);const t=pe(this);return sr(t).has.call(t,e)||(t.add(e),yt(t,"add",e,e)),this}function Bs(e,t){t=pe(t);const n=pe(this),{has:r,get:s}=sr(n);let i=r.call(n,e);i||(e=pe(e),i=r.call(n,e));const l=s.call(n,e);return n.set(e,t),i?vn(t,l)&&yt(n,"set",e,t):yt(n,"add",e,t),this}function zs(e){const t=pe(this),{has:n,get:r}=sr(t);let s=n.call(t,e);s||(e=pe(e),s=n.call(t,e)),r&&r.call(t,e);const i=t.delete(e);return s&&yt(t,"delete",e,void 0),i}function Ks(){const e=pe(this),t=e.size!==0,n=e.clear();return t&&yt(e,"clear",void 0,void 0),n}function Dn(e,t){return function(r,s){const i=this,l=i.__v_raw,a=pe(l),d=t?ns:e?os:bn;return!e&&Ze(a,"iterate",$t),l.forEach((p,m)=>r.call(s,d(p),d(m),i))}}function Un(e,t,n){return function(...r){const s=this.__v_raw,i=pe(s),l=Jt(i),a=e==="entries"||e===Symbol.iterator&&l,d=e==="keys"&&l,p=s[e](...r),m=n?ns:t?os:bn;return!t&&Ze(i,"iterate",d?Dr:$t),{next(){const{value:b,done:y}=p.next();return y?{value:b,done:y}:{value:a?[m(b[0]),m(b[1])]:m(b),done:y}},[Symbol.iterator](){return this}}}}function wt(e){return function(...t){return e==="delete"?!1:this}}function Xl(){const e={get(i){return kn(this,i)},get size(){return In(this)},has:Ln,add:$s,set:Bs,delete:zs,clear:Ks,forEach:Dn(!1,!1)},t={get(i){return kn(this,i,!1,!0)},get size(){return In(this)},has:Ln,add:$s,set:Bs,delete:zs,clear:Ks,forEach:Dn(!1,!0)},n={get(i){return kn(this,i,!0)},get size(){return In(this,!0)},has(i){return Ln.call(this,i,!0)},add:wt("add"),set:wt("set"),delete:wt("delete"),clear:wt("clear"),forEach:Dn(!0,!1)},r={get(i){return kn(this,i,!0,!0)},get size(){return In(this,!0)},has(i){return Ln.call(this,i,!0)},add:wt("add"),set:wt("set"),delete:wt("delete"),clear:wt("clear"),forEach:Dn(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(i=>{e[i]=Un(i,!1,!1),n[i]=Un(i,!0,!1),t[i]=Un(i,!1,!0),r[i]=Un(i,!0,!0)}),[e,n,t,r]}const[Zl,Ql,Gl,ea]=Xl();function rs(e,t){const n=t?e?ea:Gl:e?Ql:Zl;return(r,s,i)=>s==="__v_isReactive"?!e:s==="__v_isReadonly"?e:s==="__v_raw"?r:Reflect.get(he(n,s)&&s in r?n:r,s,i)}const ta={get:rs(!1,!1)},na={get:rs(!1,!0)},ra={get:rs(!0,!1)},Bi=new WeakMap,zi=new WeakMap,Ki=new WeakMap,sa=new WeakMap;function ia(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function oa(e){return e.__v_skip||!Object.isExtensible(e)?0:ia(wl(e))}function ss(e){return Qt(e)?e:is(e,!1,$i,ta,Bi)}function la(e){return is(e,!1,Jl,na,zi)}function qi(e){return is(e,!0,Yl,ra,Ki)}function is(e,t,n,r,s){if(!Te(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const i=s.get(e);if(i)return i;const l=oa(e);if(l===0)return e;const a=new Proxy(e,l===2?r:n);return s.set(e,a),a}function Xt(e){return Qt(e)?Xt(e.__v_raw):!!(e&&e.__v_isReactive)}function Qt(e){return!!(e&&e.__v_isReadonly)}function Yn(e){return!!(e&&e.__v_isShallow)}function Wi(e){return Xt(e)||Qt(e)}function pe(e){const t=e&&e.__v_raw;return t?pe(t):e}function Yi(e){return qn(e,"__v_skip",!0),e}const bn=e=>Te(e)?ss(e):e,os=e=>Te(e)?qi(e):e;function Ji(e){Nt&&st&&(e=pe(e),Ri(e.dep||(e.dep=Gr())))}function Xi(e,t){e=pe(e);const n=e.dep;n&&Ur(n)}function Ve(e){return!!(e&&e.__v_isRef===!0)}function Wt(e){return Zi(e,!1)}function Fu(e){return Zi(e,!0)}function Zi(e,t){return Ve(e)?e:new aa(e,t)}class aa{constructor(t,n){this.__v_isShallow=n,this.dep=void 0,this.__v_isRef=!0,this._rawValue=n?t:pe(t),this._value=n?t:bn(t)}get value(){return Ji(this),this._value}set value(t){const n=this.__v_isShallow||Yn(t)||Qt(t);t=n?t:pe(t),vn(t,this._rawValue)&&(this._rawValue=t,this._value=n?t:bn(t),Xi(this))}}function ca(e){return Ve(e)?e.value:e}const ua={get:(e,t,n)=>ca(Reflect.get(e,t,n)),set:(e,t,n,r)=>{const s=e[t];return Ve(s)&&!Ve(n)?(s.value=n,!0):Reflect.set(e,t,n,r)}};function Qi(e){return Xt(e)?e:new Proxy(e,ua)}function jn(e){const t=ee(e)?new Array(e.length):{};for(const n in e)t[n]=Gi(e,n);return t}class fa{constructor(t,n,r){this._object=t,this._key=n,this._defaultValue=r,this.__v_isRef=!0}get value(){const t=this._object[this._key];return t===void 0?this._defaultValue:t}set value(t){this._object[this._key]=t}get dep(){return Dl(pe(this._object),this._key)}}class da{constructor(t){this._getter=t,this.__v_isRef=!0,this.__v_isReadonly=!0}get value(){return this._getter()}}function ku(e,t,n){return Ve(e)?e:oe(e)?new da(e):Te(e)&&arguments.length>1?Gi(e,t,n):Wt(e)}function Gi(e,t,n){const r=e[t];return Ve(r)?r:new fa(e,t,n)}class pa{constructor(t,n,r,s){this._setter=n,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this._dirty=!0,this.effect=new es(t,()=>{this._dirty||(this._dirty=!0,Xi(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!s,this.__v_isReadonly=r}get value(){const t=pe(this);return Ji(t),(t._dirty||!t._cacheable)&&(t._dirty=!1,t._value=t.effect.run()),t._value}set value(t){this._setter(t)}}function ha(e,t,n=!1){let r,s;const i=oe(e);return i?(r=e,s=ot):(r=e.get,s=e.set),new pa(r,s,i||!s,n)}function Mt(e,t,n,r){let s;try{s=r?e(...r):e()}catch(i){ir(i,t,n)}return s}function tt(e,t,n,r){if(oe(e)){const i=Mt(e,t,n,r);return i&&Oi(i)&&i.catch(l=>{ir(l,t,n)}),i}const s=[];for(let i=0;i<e.length;i++)s.push(tt(e[i],t,n,r));return s}function ir(e,t,n,r=!0){const s=t?t.vnode:null;if(t){let i=t.parent;const l=t.proxy,a=n;for(;i;){const p=i.ec;if(p){for(let m=0;m<p.length;m++)if(p[m](e,l,a)===!1)return}i=i.parent}const d=t.appContext.config.errorHandler;if(d){Mt(d,null,10,[e,l,a]);return}}ga(e,n,s,r)}function ga(e,t,n,r=!0){console.error(e)}let yn=!1,jr=!1;const Ke=[];let ut=0;const Zt=[];let bt=null,jt=0;const eo=Promise.resolve();let ls=null;function ma(e){const t=ls||eo;return e?t.then(this?e.bind(this):e):t}function va(e){let t=ut+1,n=Ke.length;for(;t<n;){const r=t+n>>>1;xn(Ke[r])<e?t=r+1:n=r}return t}function as(e){(!Ke.length||!Ke.includes(e,yn&&e.allowRecurse?ut+1:ut))&&(e.id==null?Ke.push(e):Ke.splice(va(e.id),0,e),to())}function to(){!yn&&!jr&&(jr=!0,ls=eo.then(ro))}function ba(e){const t=Ke.indexOf(e);t>ut&&Ke.splice(t,1)}function ya(e){ee(e)?Zt.push(...e):(!bt||!bt.includes(e,e.allowRecurse?jt+1:jt))&&Zt.push(e),to()}function qs(e,t=yn?ut+1:0){for(;t<Ke.length;t++){const n=Ke[t];n&&n.pre&&(Ke.splice(t,1),t--,n())}}function no(e){if(Zt.length){const t=[...new Set(Zt)];if(Zt.length=0,bt){bt.push(...t);return}for(bt=t,bt.sort((n,r)=>xn(n)-xn(r)),jt=0;jt<bt.length;jt++)bt[jt]();bt=null,jt=0}}const xn=e=>e.id==null?1/0:e.id,xa=(e,t)=>{const n=xn(e)-xn(t);if(n===0){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return n};function ro(e){jr=!1,yn=!0,Ke.sort(xa);const t=ot;try{for(ut=0;ut<Ke.length;ut++){const n=Ke[ut];n&&n.active!==!1&&Mt(n,null,14)}}finally{ut=0,Ke.length=0,no(),yn=!1,ls=null,(Ke.length||Zt.length)&&ro()}}function _a(e,t,...n){if(e.isUnmounted)return;const r=e.vnode.props||Pe;let s=n;const i=t.startsWith("update:"),l=i&&t.slice(7);if(l&&l in r){const m=`${l==="modelValue"?"model":l}Modifiers`,{number:b,trim:y}=r[m]||Pe;y&&(s=n.map(M=>He(M)?M.trim():M)),b&&(s=n.map(Pl))}let a,d=r[a=Pr(t)]||r[a=Pr(ft(t))];!d&&i&&(d=r[a=Pr(nr(t))]),d&&tt(d,e,6,s);const p=r[a+"Once"];if(p){if(!e.emitted)e.emitted={};else if(e.emitted[a])return;e.emitted[a]=!0,tt(p,e,6,s)}}function so(e,t,n=!1){const r=t.emitsCache,s=r.get(e);if(s!==void 0)return s;const i=e.emits;let l={},a=!1;if(!oe(e)){const d=p=>{const m=so(p,t,!0);m&&(a=!0,Be(l,m))};!n&&t.mixins.length&&t.mixins.forEach(d),e.extends&&d(e.extends),e.mixins&&e.mixins.forEach(d)}return!i&&!a?(Te(e)&&r.set(e,null),null):(ee(i)?i.forEach(d=>l[d]=null):Be(l,i),Te(e)&&r.set(e,l),l)}function or(e,t){return!e||!Yr(t)?!1:(t=t.slice(2).replace(/Once$/,""),he(e,t[0].toLowerCase()+t.slice(1))||he(e,nr(t))||he(e,t))}let $e=null,io=null;function Jn(e){const t=$e;return $e=e,io=e&&e.type.__scopeId||null,t}function Ca(e,t=$e,n){if(!t||e._n)return e;const r=(...s)=>{r._d&&ii(-1);const i=Jn(t);let l;try{l=e(...s)}finally{Jn(i),r._d&&ii(1)}return l};return r._n=!0,r._c=!0,r._d=!0,r}function Ar(e){const{type:t,vnode:n,proxy:r,withProxy:s,props:i,propsOptions:[l],slots:a,attrs:d,emit:p,render:m,renderCache:b,data:y,setupState:M,ctx:_,inheritAttrs:C}=e;let F,K;const q=Jn(e);try{if(n.shapeFlag&4){const z=s||r;F=ct(m.call(z,z,b,i,M,y,_)),K=d}else{const z=t;F=ct(z.length>1?z(i,{attrs:d,slots:a,emit:p}):z(i,null)),K=t.props?d:wa(d)}}catch(z){mn.length=0,ir(z,e,1),F=qe(nt)}let ue=F;if(K&&C!==!1){const z=Object.keys(K),{shapeFlag:X}=ue;z.length&&X&7&&(l&&z.some(Ni)&&(K=Ea(K,l)),ue=Ft(ue,K))}return n.dirs&&(ue=Ft(ue),ue.dirs=ue.dirs?ue.dirs.concat(n.dirs):n.dirs),n.transition&&(ue.transition=n.transition),F=ue,Jn(q),F}const wa=e=>{let t;for(const n in e)(n==="class"||n==="style"||Yr(n))&&((t||(t={}))[n]=e[n]);return t},Ea=(e,t)=>{const n={};for(const r in e)(!Ni(r)||!(r.slice(9)in t))&&(n[r]=e[r]);return n};function Sa(e,t,n){const{props:r,children:s,component:i}=e,{props:l,children:a,patchFlag:d}=t,p=i.emitsOptions;if(t.dirs||t.transition)return!0;if(n&&d>=0){if(d&1024)return!0;if(d&16)return r?Ws(r,l,p):!!l;if(d&8){const m=t.dynamicProps;for(let b=0;b<m.length;b++){const y=m[b];if(l[y]!==r[y]&&!or(p,y))return!0}}}else return(s||a)&&(!a||!a.$stable)?!0:r===l?!1:r?l?Ws(r,l,p):!0:!!l;return!1}function Ws(e,t,n){const r=Object.keys(t);if(r.length!==Object.keys(e).length)return!0;for(let s=0;s<r.length;s++){const i=r[s];if(t[i]!==e[i]&&!or(n,i))return!0}return!1}function Pa({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const Ta=e=>e.__isSuspense;function Aa(e,t){t&&t.pendingBranch?ee(e)?t.effects.push(...e):t.effects.push(e):ya(e)}function Lu(e,t){return cs(e,null,t)}const Rn={};function ze(e,t,n){return cs(e,t,n)}function cs(e,t,{immediate:n,deep:r,flush:s,onTrack:i,onTrigger:l}=Pe){var a;const d=kl()===((a=Re)==null?void 0:a.scope)?Re:null;let p,m=!1,b=!1;if(Ve(e)?(p=()=>e.value,m=Yn(e)):Xt(e)?(p=()=>e,r=!0):ee(e)?(b=!0,m=e.some(z=>Xt(z)||Yn(z)),p=()=>e.map(z=>{if(Ve(z))return z.value;if(Xt(z))return Ht(z);if(oe(z))return Mt(z,d,2)})):oe(e)?t?p=()=>Mt(e,d,2):p=()=>{if(!(d&&d.isUnmounted))return y&&y(),tt(e,d,3,[M])}:p=ot,t&&r){const z=p;p=()=>Ht(z())}let y,M=z=>{y=q.onStop=()=>{Mt(z,d,4)}},_;if(En)if(M=ot,t?n&&tt(t,d,3,[p(),b?[]:void 0,M]):p(),s==="sync"){const z=wc();_=z.__watcherHandles||(z.__watcherHandles=[])}else return ot;let C=b?new Array(e.length).fill(Rn):Rn;const F=()=>{if(q.active)if(t){const z=q.run();(r||m||(b?z.some((X,de)=>vn(X,C[de])):vn(z,C)))&&(y&&y(),tt(t,d,3,[z,C===Rn?void 0:b&&C[0]===Rn?[]:C,M]),C=z)}else q.run()};F.allowRecurse=!!t;let K;s==="sync"?K=F:s==="post"?K=()=>Xe(F,d&&d.suspense):(F.pre=!0,d&&(F.id=d.uid),K=()=>as(F));const q=new es(p,K);t?n?F():C=q.run():s==="post"?Xe(q.run.bind(q),d&&d.suspense):q.run();const ue=()=>{q.stop(),d&&d.scope&&Jr(d.scope.effects,q)};return _&&_.push(ue),ue}function Na(e,t,n){const r=this.proxy,s=He(e)?e.includes(".")?oo(r,e):()=>r[e]:e.bind(r,r);let i;oe(t)?i=t:(i=t.handler,n=t);const l=Re;Gt(this);const a=cs(s,i.bind(r),n);return l?Gt(l):Bt(),a}function oo(e,t){const n=t.split(".");return()=>{let r=e;for(let s=0;s<n.length&&r;s++)r=r[n[s]];return r}}function Ht(e,t){if(!Te(e)||e.__v_skip||(t=t||new Set,t.has(e)))return e;if(t.add(e),Ve(e))Ht(e.value,t);else if(ee(e))for(let n=0;n<e.length;n++)Ht(e[n],t);else if(Mi(e)||Jt(e))e.forEach(n=>{Ht(n,t)});else if(ki(e))for(const n in e)Ht(e[n],t);return e}function Iu(e,t){const n=$e;if(n===null)return e;const r=dr(n)||n.proxy,s=e.dirs||(e.dirs=[]);for(let i=0;i<t.length;i++){let[l,a,d,p=Pe]=t[i];l&&(oe(l)&&(l={mounted:l,updated:l}),l.deep&&Ht(a),s.push({dir:l,instance:r,value:a,oldValue:void 0,arg:d,modifiers:p}))}return e}function It(e,t,n,r){const s=e.dirs,i=t&&t.dirs;for(let l=0;l<s.length;l++){const a=s[l];i&&(a.oldValue=i[l].value);let d=a.dir[r];d&&(nn(),tt(d,n,8,[e.el,a,e,t]),rn())}}function lo(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return fs(()=>{e.isMounted=!0}),po(()=>{e.isUnmounting=!0}),e}const et=[Function,Array],ao={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:et,onEnter:et,onAfterEnter:et,onEnterCancelled:et,onBeforeLeave:et,onLeave:et,onAfterLeave:et,onLeaveCancelled:et,onBeforeAppear:et,onAppear:et,onAfterAppear:et,onAppearCancelled:et},Ma={name:"BaseTransition",props:ao,setup(e,{slots:t}){const n=No(),r=lo();let s;return()=>{const i=t.default&&us(t.default(),!0);if(!i||!i.length)return;let l=i[0];if(i.length>1){for(const C of i)if(C.type!==nt){l=C;break}}const a=pe(e),{mode:d}=a;if(r.isLeaving)return Nr(l);const p=Ys(l);if(!p)return Nr(l);const m=_n(p,a,r,n);Cn(p,m);const b=n.subTree,y=b&&Ys(b);let M=!1;const{getTransitionKey:_}=p.type;if(_){const C=_();s===void 0?s=C:C!==s&&(s=C,M=!0)}if(y&&y.type!==nt&&(!Rt(p,y)||M)){const C=_n(y,a,r,n);if(Cn(y,C),d==="out-in")return r.isLeaving=!0,C.afterLeave=()=>{r.isLeaving=!1,n.update.active!==!1&&n.update()},Nr(l);d==="in-out"&&p.type!==nt&&(C.delayLeave=(F,K,q)=>{const ue=co(r,y);ue[String(y.key)]=y,F._leaveCb=()=>{K(),F._leaveCb=void 0,delete m.delayedLeave},m.delayedLeave=q})}return l}}},Oa=Ma;function co(e,t){const{leavingVNodes:n}=e;let r=n.get(t.type);return r||(r=Object.create(null),n.set(t.type,r)),r}function _n(e,t,n,r){const{appear:s,mode:i,persisted:l=!1,onBeforeEnter:a,onEnter:d,onAfterEnter:p,onEnterCancelled:m,onBeforeLeave:b,onLeave:y,onAfterLeave:M,onLeaveCancelled:_,onBeforeAppear:C,onAppear:F,onAfterAppear:K,onAppearCancelled:q}=t,ue=String(e.key),z=co(n,e),X=(R,U)=>{R&&tt(R,r,9,U)},de=(R,U)=>{const ne=U[1];X(R,U),ee(R)?R.every(Q=>Q.length<=1)&&ne():R.length<=1&&ne()},ie={mode:i,persisted:l,beforeEnter(R){let U=a;if(!n.isMounted)if(s)U=C||a;else return;R._leaveCb&&R._leaveCb(!0);const ne=z[ue];ne&&Rt(e,ne)&&ne.el._leaveCb&&ne.el._leaveCb(),X(U,[R])},enter(R){let U=d,ne=p,Q=m;if(!n.isMounted)if(s)U=F||d,ne=K||p,Q=q||m;else return;let j=!1;const ce=R._enterCb=me=>{j||(j=!0,me?X(Q,[R]):X(ne,[R]),ie.delayedLeave&&ie.delayedLeave(),R._enterCb=void 0)};U?de(U,[R,ce]):ce()},leave(R,U){const ne=String(e.key);if(R._enterCb&&R._enterCb(!0),n.isUnmounting)return U();X(b,[R]);let Q=!1;const j=R._leaveCb=ce=>{Q||(Q=!0,U(),ce?X(_,[R]):X(M,[R]),R._leaveCb=void 0,z[ne]===e&&delete z[ne])};z[ne]=e,y?de(y,[R,j]):j()},clone(R){return _n(R,t,n,r)}};return ie}function Nr(e){if(lr(e))return e=Ft(e),e.children=null,e}function Ys(e){return lr(e)?e.children?e.children[0]:void 0:e}function Cn(e,t){e.shapeFlag&6&&e.component?Cn(e.component.subTree,t):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function us(e,t=!1,n){let r=[],s=0;for(let i=0;i<e.length;i++){let l=e[i];const a=n==null?l.key:String(n)+String(l.key!=null?l.key:i);l.type===Ge?(l.patchFlag&128&&s++,r=r.concat(us(l.children,t,a))):(t||l.type!==nt)&&r.push(a!=null?Ft(l,{key:a}):l)}if(s>1)for(let i=0;i<r.length;i++)r[i].patchFlag=-2;return r}function Du(e,t){return oe(e)?(()=>Be({name:e.name},t,{setup:e}))():e}const pn=e=>!!e.type.__asyncLoader,lr=e=>e.type.__isKeepAlive;function Fa(e,t){uo(e,"a",t)}function ka(e,t){uo(e,"da",t)}function uo(e,t,n=Re){const r=e.__wdc||(e.__wdc=()=>{let s=n;for(;s;){if(s.isDeactivated)return;s=s.parent}return e()});if(ar(t,r,n),n){let s=n.parent;for(;s&&s.parent;)lr(s.parent.vnode)&&La(r,t,n,s),s=s.parent}}function La(e,t,n,r){const s=ar(t,e,r,!0);ds(()=>{Jr(r[t],s)},n)}function ar(e,t,n=Re,r=!1){if(n){const s=n[e]||(n[e]=[]),i=t.__weh||(t.__weh=(...l)=>{if(n.isUnmounted)return;nn(),Gt(n);const a=tt(t,n,e,l);return Bt(),rn(),a});return r?s.unshift(i):s.push(i),i}}const _t=e=>(t,n=Re)=>(!En||e==="sp")&&ar(e,(...r)=>t(...r),n),Ia=_t("bm"),fs=_t("m"),Da=_t("bu"),fo=_t("u"),po=_t("bum"),ds=_t("um"),Ua=_t("sp"),ja=_t("rtg"),Ra=_t("rtc");function Va(e,t=Re){ar("ec",e,t)}const ps="components",Ha="directives";function Uu(e,t){return hs(ps,e,!0,t)||e}const ho=Symbol.for("v-ndc");function ju(e){return He(e)?hs(ps,e,!1)||e:e||ho}function Ru(e){return hs(Ha,e)}function hs(e,t,n=!0,r=!1){const s=$e||Re;if(s){const i=s.type;if(e===ps){const a=yc(i,!1);if(a&&(a===t||a===ft(t)||a===Qr(ft(t))))return i}const l=Js(s[e]||i[e],t)||Js(s.appContext[e],t);return!l&&r?i:l}}function Js(e,t){return e&&(e[t]||e[ft(t)]||e[Qr(ft(t))])}function Vu(e,t,n,r){let s;const i=n&&n[r];if(ee(e)||He(e)){s=new Array(e.length);for(let l=0,a=e.length;l<a;l++)s[l]=t(e[l],l,void 0,i&&i[l])}else if(typeof e=="number"){s=new Array(e);for(let l=0;l<e;l++)s[l]=t(l+1,l,void 0,i&&i[l])}else if(Te(e))if(e[Symbol.iterator])s=Array.from(e,(l,a)=>t(l,a,void 0,i&&i[a]));else{const l=Object.keys(e);s=new Array(l.length);for(let a=0,d=l.length;a<d;a++){const p=l[a];s[a]=t(e[p],p,a,i&&i[a])}}else s=[];return n&&(n[r]=s),s}function Hu(e,t,n={},r,s){if($e.isCE||$e.parent&&pn($e.parent)&&$e.parent.isCE)return t!=="default"&&(n.name=t),qe("slot",n,r&&r());let i=e[t];i&&i._c&&(i._d=!1),ur();const l=i&&go(i(n)),a=Po(Ge,{key:n.key||l&&l.key||`_${t}`},l||(r?r():[]),l&&e._===1?64:-2);return!s&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),i&&i._c&&(i._d=!0),a}function go(e){return e.some(t=>Qn(t)?!(t.type===nt||t.type===Ge&&!go(t.children)):!0)?e:null}const Rr=e=>e?Mo(e)?dr(e)||e.proxy:Rr(e.parent):null,hn=Be(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Rr(e.parent),$root:e=>Rr(e.root),$emit:e=>e.emit,$options:e=>gs(e),$forceUpdate:e=>e.f||(e.f=()=>as(e.update)),$nextTick:e=>e.n||(e.n=ma.bind(e.proxy)),$watch:e=>Na.bind(e)}),Mr=(e,t)=>e!==Pe&&!e.__isScriptSetup&&he(e,t),$a={get({_:e},t){const{ctx:n,setupState:r,data:s,props:i,accessCache:l,type:a,appContext:d}=e;let p;if(t[0]!=="$"){const M=l[t];if(M!==void 0)switch(M){case 1:return r[t];case 2:return s[t];case 4:return n[t];case 3:return i[t]}else{if(Mr(r,t))return l[t]=1,r[t];if(s!==Pe&&he(s,t))return l[t]=2,s[t];if((p=e.propsOptions[0])&&he(p,t))return l[t]=3,i[t];if(n!==Pe&&he(n,t))return l[t]=4,n[t];Vr&&(l[t]=0)}}const m=hn[t];let b,y;if(m)return t==="$attrs"&&Ze(e,"get",t),m(e);if((b=a.__cssModules)&&(b=b[t]))return b;if(n!==Pe&&he(n,t))return l[t]=4,n[t];if(y=d.config.globalProperties,he(y,t))return y[t]},set({_:e},t,n){const{data:r,setupState:s,ctx:i}=e;return Mr(s,t)?(s[t]=n,!0):r!==Pe&&he(r,t)?(r[t]=n,!0):he(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(i[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:r,appContext:s,propsOptions:i}},l){let a;return!!n[l]||e!==Pe&&he(e,l)||Mr(t,l)||(a=i[0])&&he(a,l)||he(r,l)||he(hn,l)||he(s.config.globalProperties,l)},defineProperty(e,t,n){return n.get!=null?e._.accessCache[t]=0:he(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}};function Xs(e){return ee(e)?e.reduce((t,n)=>(t[n]=null,t),{}):e}let Vr=!0;function Ba(e){const t=gs(e),n=e.proxy,r=e.ctx;Vr=!1,t.beforeCreate&&Zs(t.beforeCreate,e,"bc");const{data:s,computed:i,methods:l,watch:a,provide:d,inject:p,created:m,beforeMount:b,mounted:y,beforeUpdate:M,updated:_,activated:C,deactivated:F,beforeDestroy:K,beforeUnmount:q,destroyed:ue,unmounted:z,render:X,renderTracked:de,renderTriggered:ie,errorCaptured:R,serverPrefetch:U,expose:ne,inheritAttrs:Q,components:j,directives:ce,filters:me}=t;if(p&&za(p,r,null),l)for(const ve in l){const fe=l[ve];oe(fe)&&(r[ve]=fe.bind(n))}if(s){const ve=s.call(n,n);Te(ve)&&(e.data=ss(ve))}if(Vr=!0,i)for(const ve in i){const fe=i[ve],Ee=oe(fe)?fe.bind(n,n):oe(fe.get)?fe.get.bind(n,n):ot,Ce=!oe(fe)&&oe(fe.set)?fe.set.bind(n):ot,Oe=St({get:Ee,set:Ce});Object.defineProperty(r,ve,{enumerable:!0,configurable:!0,get:()=>Oe.value,set:Fe=>Oe.value=Fe})}if(a)for(const ve in a)mo(a[ve],r,n,ve);if(d){const ve=oe(d)?d.call(n):d;Reflect.ownKeys(ve).forEach(fe=>{Xa(fe,ve[fe])})}m&&Zs(m,e,"c");function le(ve,fe){ee(fe)?fe.forEach(Ee=>ve(Ee.bind(n))):fe&&ve(fe.bind(n))}if(le(Ia,b),le(fs,y),le(Da,M),le(fo,_),le(Fa,C),le(ka,F),le(Va,R),le(Ra,de),le(ja,ie),le(po,q),le(ds,z),le(Ua,U),ee(ne))if(ne.length){const ve=e.exposed||(e.exposed={});ne.forEach(fe=>{Object.defineProperty(ve,fe,{get:()=>n[fe],set:Ee=>n[fe]=Ee})})}else e.exposed||(e.exposed={});X&&e.render===ot&&(e.render=X),Q!=null&&(e.inheritAttrs=Q),j&&(e.components=j),ce&&(e.directives=ce)}function za(e,t,n=ot){ee(e)&&(e=Hr(e));for(const r in e){const s=e[r];let i;Te(s)?"default"in s?i=Bn(s.from||r,s.default,!0):i=Bn(s.from||r):i=Bn(s),Ve(i)?Object.defineProperty(t,r,{enumerable:!0,configurable:!0,get:()=>i.value,set:l=>i.value=l}):t[r]=i}}function Zs(e,t,n){tt(ee(e)?e.map(r=>r.bind(t.proxy)):e.bind(t.proxy),t,n)}function mo(e,t,n,r){const s=r.includes(".")?oo(n,r):()=>n[r];if(He(e)){const i=t[e];oe(i)&&ze(s,i)}else if(oe(e))ze(s,e.bind(n));else if(Te(e))if(ee(e))e.forEach(i=>mo(i,t,n,r));else{const i=oe(e.handler)?e.handler.bind(n):t[e.handler];oe(i)&&ze(s,i,e)}}function gs(e){const t=e.type,{mixins:n,extends:r}=t,{mixins:s,optionsCache:i,config:{optionMergeStrategies:l}}=e.appContext,a=i.get(t);let d;return a?d=a:!s.length&&!n&&!r?d=t:(d={},s.length&&s.forEach(p=>Xn(d,p,l,!0)),Xn(d,t,l)),Te(t)&&i.set(t,d),d}function Xn(e,t,n,r=!1){const{mixins:s,extends:i}=t;i&&Xn(e,i,n,!0),s&&s.forEach(l=>Xn(e,l,n,!0));for(const l in t)if(!(r&&l==="expose")){const a=Ka[l]||n&&n[l];e[l]=a?a(e[l],t[l]):t[l]}return e}const Ka={data:Qs,props:Gs,emits:Gs,methods:dn,computed:dn,beforeCreate:Ye,created:Ye,beforeMount:Ye,mounted:Ye,beforeUpdate:Ye,updated:Ye,beforeDestroy:Ye,beforeUnmount:Ye,destroyed:Ye,unmounted:Ye,activated:Ye,deactivated:Ye,errorCaptured:Ye,serverPrefetch:Ye,components:dn,directives:dn,watch:Wa,provide:Qs,inject:qa};function Qs(e,t){return t?e?function(){return Be(oe(e)?e.call(this,this):e,oe(t)?t.call(this,this):t)}:t:e}function qa(e,t){return dn(Hr(e),Hr(t))}function Hr(e){if(ee(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Ye(e,t){return e?[...new Set([].concat(e,t))]:t}function dn(e,t){return e?Be(Object.create(null),e,t):t}function Gs(e,t){return e?ee(e)&&ee(t)?[...new Set([...e,...t])]:Be(Object.create(null),Xs(e),Xs(t??{})):t}function Wa(e,t){if(!e)return t;if(!t)return e;const n=Be(Object.create(null),e);for(const r in t)n[r]=Ye(e[r],t[r]);return n}function vo(){return{app:null,config:{isNativeTag:xl,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Ya=0;function Ja(e,t){return function(r,s=null){oe(r)||(r=Be({},r)),s!=null&&!Te(s)&&(s=null);const i=vo(),l=new Set;let a=!1;const d=i.app={_uid:Ya++,_component:r,_props:s,_container:null,_context:i,_instance:null,version:Ec,get config(){return i.config},set config(p){},use(p,...m){return l.has(p)||(p&&oe(p.install)?(l.add(p),p.install(d,...m)):oe(p)&&(l.add(p),p(d,...m))),d},mixin(p){return i.mixins.includes(p)||i.mixins.push(p),d},component(p,m){return m?(i.components[p]=m,d):i.components[p]},directive(p,m){return m?(i.directives[p]=m,d):i.directives[p]},mount(p,m,b){if(!a){const y=qe(r,s);return y.appContext=i,m&&t?t(y,p):e(y,p,b),a=!0,d._container=p,p.__vue_app__=d,dr(y.component)||y.component.proxy}},unmount(){a&&(e(null,d._container),delete d._container.__vue_app__)},provide(p,m){return i.provides[p]=m,d},runWithContext(p){Zn=d;try{return p()}finally{Zn=null}}};return d}}let Zn=null;function Xa(e,t){if(Re){let n=Re.provides;const r=Re.parent&&Re.parent.provides;r===n&&(n=Re.provides=Object.create(r)),n[e]=t}}function Bn(e,t,n=!1){const r=Re||$e;if(r||Zn){const s=r?r.parent==null?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides:Zn._context.provides;if(s&&e in s)return s[e];if(arguments.length>1)return n&&oe(t)?t.call(r&&r.proxy):t}}function Za(e,t,n,r=!1){const s={},i={};qn(i,fr,1),e.propsDefaults=Object.create(null),bo(e,t,s,i);for(const l in e.propsOptions[0])l in s||(s[l]=void 0);n?e.props=r?s:la(s):e.type.props?e.props=s:e.props=i,e.attrs=i}function Qa(e,t,n,r){const{props:s,attrs:i,vnode:{patchFlag:l}}=e,a=pe(s),[d]=e.propsOptions;let p=!1;if((r||l>0)&&!(l&16)){if(l&8){const m=e.vnode.dynamicProps;for(let b=0;b<m.length;b++){let y=m[b];if(or(e.emitsOptions,y))continue;const M=t[y];if(d)if(he(i,y))M!==i[y]&&(i[y]=M,p=!0);else{const _=ft(y);s[_]=$r(d,a,_,M,e,!1)}else M!==i[y]&&(i[y]=M,p=!0)}}}else{bo(e,t,s,i)&&(p=!0);let m;for(const b in a)(!t||!he(t,b)&&((m=nr(b))===b||!he(t,m)))&&(d?n&&(n[b]!==void 0||n[m]!==void 0)&&(s[b]=$r(d,a,b,void 0,e,!0)):delete s[b]);if(i!==a)for(const b in i)(!t||!he(t,b))&&(delete i[b],p=!0)}p&&yt(e,"set","$attrs")}function bo(e,t,n,r){const[s,i]=e.propsOptions;let l=!1,a;if(t)for(let d in t){if($n(d))continue;const p=t[d];let m;s&&he(s,m=ft(d))?!i||!i.includes(m)?n[m]=p:(a||(a={}))[m]=p:or(e.emitsOptions,d)||(!(d in r)||p!==r[d])&&(r[d]=p,l=!0)}if(i){const d=pe(n),p=a||Pe;for(let m=0;m<i.length;m++){const b=i[m];n[b]=$r(s,d,b,p[b],e,!he(p,b))}}return l}function $r(e,t,n,r,s,i){const l=e[n];if(l!=null){const a=he(l,"default");if(a&&r===void 0){const d=l.default;if(l.type!==Function&&!l.skipFactory&&oe(d)){const{propsDefaults:p}=s;n in p?r=p[n]:(Gt(s),r=p[n]=d.call(null,t),Bt())}else r=d}l[0]&&(i&&!a?r=!1:l[1]&&(r===""||r===nr(n))&&(r=!0))}return r}function yo(e,t,n=!1){const r=t.propsCache,s=r.get(e);if(s)return s;const i=e.props,l={},a=[];let d=!1;if(!oe(e)){const m=b=>{d=!0;const[y,M]=yo(b,t,!0);Be(l,y),M&&a.push(...M)};!n&&t.mixins.length&&t.mixins.forEach(m),e.extends&&m(e.extends),e.mixins&&e.mixins.forEach(m)}if(!i&&!d)return Te(e)&&r.set(e,Yt),Yt;if(ee(i))for(let m=0;m<i.length;m++){const b=ft(i[m]);ei(b)&&(l[b]=Pe)}else if(i)for(const m in i){const b=ft(m);if(ei(b)){const y=i[m],M=l[b]=ee(y)||oe(y)?{type:y}:Be({},y);if(M){const _=ri(Boolean,M.type),C=ri(String,M.type);M[0]=_>-1,M[1]=C<0||_<C,(_>-1||he(M,"default"))&&a.push(b)}}}const p=[l,a];return Te(e)&&r.set(e,p),p}function ei(e){return e[0]!=="$"}function ti(e){const t=e&&e.toString().match(/^\s*(function|class) (\w+)/);return t?t[2]:e===null?"null":""}function ni(e,t){return ti(e)===ti(t)}function ri(e,t){return ee(t)?t.findIndex(n=>ni(n,e)):oe(t)&&ni(t,e)?0:-1}const xo=e=>e[0]==="_"||e==="$stable",ms=e=>ee(e)?e.map(ct):[ct(e)],Ga=(e,t,n)=>{if(t._n)return t;const r=Ca((...s)=>ms(t(...s)),n);return r._c=!1,r},_o=(e,t,n)=>{const r=e._ctx;for(const s in e){if(xo(s))continue;const i=e[s];if(oe(i))t[s]=Ga(s,i,r);else if(i!=null){const l=ms(i);t[s]=()=>l}}},Co=(e,t)=>{const n=ms(t);e.slots.default=()=>n},ec=(e,t)=>{if(e.vnode.shapeFlag&32){const n=t._;n?(e.slots=pe(t),qn(t,"_",n)):_o(t,e.slots={})}else e.slots={},t&&Co(e,t);qn(e.slots,fr,1)},tc=(e,t,n)=>{const{vnode:r,slots:s}=e;let i=!0,l=Pe;if(r.shapeFlag&32){const a=t._;a?n&&a===1?i=!1:(Be(s,t),!n&&a===1&&delete s._):(i=!t.$stable,_o(t,s)),l=t}else t&&(Co(e,t),l={default:1});if(i)for(const a in s)!xo(a)&&!(a in l)&&delete s[a]};function Br(e,t,n,r,s=!1){if(ee(e)){e.forEach((y,M)=>Br(y,t&&(ee(t)?t[M]:t),n,r,s));return}if(pn(r)&&!s)return;const i=r.shapeFlag&4?dr(r.component)||r.component.proxy:r.el,l=s?null:i,{i:a,r:d}=e,p=t&&t.r,m=a.refs===Pe?a.refs={}:a.refs,b=a.setupState;if(p!=null&&p!==d&&(He(p)?(m[p]=null,he(b,p)&&(b[p]=null)):Ve(p)&&(p.value=null)),oe(d))Mt(d,a,12,[l,m]);else{const y=He(d),M=Ve(d);if(y||M){const _=()=>{if(e.f){const C=y?he(b,d)?b[d]:m[d]:d.value;s?ee(C)&&Jr(C,i):ee(C)?C.includes(i)||C.push(i):y?(m[d]=[i],he(b,d)&&(b[d]=m[d])):(d.value=[i],e.k&&(m[e.k]=d.value))}else y?(m[d]=l,he(b,d)&&(b[d]=l)):M&&(d.value=l,e.k&&(m[e.k]=l))};l?(_.id=-1,Xe(_,n)):_()}}}const Xe=Aa;function nc(e){return rc(e)}function rc(e,t){const n=Lr();n.__VUE__=!0;const{insert:r,remove:s,patchProp:i,createElement:l,createText:a,createComment:d,setText:p,setElementText:m,parentNode:b,nextSibling:y,setScopeId:M=ot,insertStaticContent:_}=e,C=(f,h,x,E=null,w=null,N=null,I=!1,A=null,k=!!h.dynamicChildren)=>{if(f===h)return;f&&!Rt(f,h)&&(E=_e(f),Fe(f,w,N,!0),f=null),h.patchFlag===-2&&(k=!1,h.dynamicChildren=null);const{type:P,ref:W,shapeFlag:$}=h;switch(P){case cr:F(f,h,x,E);break;case nt:K(f,h,x,E);break;case zn:f==null&&q(h,x,E,I);break;case Ge:j(f,h,x,E,w,N,I,A,k);break;default:$&1?X(f,h,x,E,w,N,I,A,k):$&6?ce(f,h,x,E,w,N,I,A,k):($&64||$&128)&&P.process(f,h,x,E,w,N,I,A,k,Ct)}W!=null&&w&&Br(W,f&&f.ref,N,h||f,!h)},F=(f,h,x,E)=>{if(f==null)r(h.el=a(h.children),x,E);else{const w=h.el=f.el;h.children!==f.children&&p(w,h.children)}},K=(f,h,x,E)=>{f==null?r(h.el=d(h.children||""),x,E):h.el=f.el},q=(f,h,x,E)=>{[f.el,f.anchor]=_(f.children,h,x,E,f.el,f.anchor)},ue=({el:f,anchor:h},x,E)=>{let w;for(;f&&f!==h;)w=y(f),r(f,x,E),f=w;r(h,x,E)},z=({el:f,anchor:h})=>{let x;for(;f&&f!==h;)x=y(f),s(f),f=x;s(h)},X=(f,h,x,E,w,N,I,A,k)=>{I=I||h.type==="svg",f==null?de(h,x,E,w,N,I,A,k):U(f,h,w,N,I,A,k)},de=(f,h,x,E,w,N,I,A)=>{let k,P;const{type:W,props:$,shapeFlag:Y,transition:Z,dirs:ae}=f;if(k=f.el=l(f.type,N,$&&$.is,$),Y&8?m(k,f.children):Y&16&&R(f.children,k,null,E,w,N&&W!=="foreignObject",I,A),ae&&It(f,null,E,"created"),ie(k,f,f.scopeId,I,E),$){for(const be in $)be!=="value"&&!$n(be)&&i(k,be,null,$[be],N,f.children,E,w,B);"value"in $&&i(k,"value",null,$.value),(P=$.onVnodeBeforeMount)&&at(P,E,f)}ae&&It(f,null,E,"beforeMount");const ye=(!w||w&&!w.pendingBranch)&&Z&&!Z.persisted;ye&&Z.beforeEnter(k),r(k,h,x),((P=$&&$.onVnodeMounted)||ye||ae)&&Xe(()=>{P&&at(P,E,f),ye&&Z.enter(k),ae&&It(f,null,E,"mounted")},w)},ie=(f,h,x,E,w)=>{if(x&&M(f,x),E)for(let N=0;N<E.length;N++)M(f,E[N]);if(w){let N=w.subTree;if(h===N){const I=w.vnode;ie(f,I,I.scopeId,I.slotScopeIds,w.parent)}}},R=(f,h,x,E,w,N,I,A,k=0)=>{for(let P=k;P<f.length;P++){const W=f[P]=A?Tt(f[P]):ct(f[P]);C(null,W,h,x,E,w,N,I,A)}},U=(f,h,x,E,w,N,I)=>{const A=h.el=f.el;let{patchFlag:k,dynamicChildren:P,dirs:W}=h;k|=f.patchFlag&16;const $=f.props||Pe,Y=h.props||Pe;let Z;x&&Dt(x,!1),(Z=Y.onVnodeBeforeUpdate)&&at(Z,x,h,f),W&&It(h,f,x,"beforeUpdate"),x&&Dt(x,!0);const ae=w&&h.type!=="foreignObject";if(P?ne(f.dynamicChildren,P,A,x,E,ae,N):I||fe(f,h,A,null,x,E,ae,N,!1),k>0){if(k&16)Q(A,h,$,Y,x,E,w);else if(k&2&&$.class!==Y.class&&i(A,"class",null,Y.class,w),k&4&&i(A,"style",$.style,Y.style,w),k&8){const ye=h.dynamicProps;for(let be=0;be<ye.length;be++){const c=ye[be],o=$[c],T=Y[c];(T!==o||c==="value")&&i(A,c,o,T,w,f.children,x,E,B)}}k&1&&f.children!==h.children&&m(A,h.children)}else!I&&P==null&&Q(A,h,$,Y,x,E,w);((Z=Y.onVnodeUpdated)||W)&&Xe(()=>{Z&&at(Z,x,h,f),W&&It(h,f,x,"updated")},E)},ne=(f,h,x,E,w,N,I)=>{for(let A=0;A<h.length;A++){const k=f[A],P=h[A],W=k.el&&(k.type===Ge||!Rt(k,P)||k.shapeFlag&70)?b(k.el):x;C(k,P,W,null,E,w,N,I,!0)}},Q=(f,h,x,E,w,N,I)=>{if(x!==E){if(x!==Pe)for(const A in x)!$n(A)&&!(A in E)&&i(f,A,x[A],null,I,h.children,w,N,B);for(const A in E){if($n(A))continue;const k=E[A],P=x[A];k!==P&&A!=="value"&&i(f,A,P,k,I,h.children,w,N,B)}"value"in E&&i(f,"value",x.value,E.value)}},j=(f,h,x,E,w,N,I,A,k)=>{const P=h.el=f?f.el:a(""),W=h.anchor=f?f.anchor:a("");let{patchFlag:$,dynamicChildren:Y,slotScopeIds:Z}=h;Z&&(A=A?A.concat(Z):Z),f==null?(r(P,x,E),r(W,x,E),R(h.children,x,W,w,N,I,A,k)):$>0&&$&64&&Y&&f.dynamicChildren?(ne(f.dynamicChildren,Y,x,w,N,I,A),(h.key!=null||w&&h===w.subTree)&&vs(f,h,!0)):fe(f,h,x,W,w,N,I,A,k)},ce=(f,h,x,E,w,N,I,A,k)=>{h.slotScopeIds=A,f==null?h.shapeFlag&512?w.ctx.activate(h,x,E,I,k):me(h,x,E,w,N,I,k):G(f,h,k)},me=(f,h,x,E,w,N,I)=>{const A=f.component=hc(f,E,w);if(lr(f)&&(A.ctx.renderer=Ct),gc(A),A.asyncDep){if(w&&w.registerDep(A,le),!f.el){const k=A.subTree=qe(nt);K(null,k,h,x)}return}le(A,f,h,x,w,N,I)},G=(f,h,x)=>{const E=h.component=f.component;if(Sa(f,h,x))if(E.asyncDep&&!E.asyncResolved){ve(E,h,x);return}else E.next=h,ba(E.update),E.update();else h.el=f.el,E.vnode=h},le=(f,h,x,E,w,N,I)=>{const A=()=>{if(f.isMounted){let{next:W,bu:$,u:Y,parent:Z,vnode:ae}=f,ye=W,be;Dt(f,!1),W?(W.el=ae.el,ve(f,W,I)):W=ae,$&&Tr($),(be=W.props&&W.props.onVnodeBeforeUpdate)&&at(be,Z,W,ae),Dt(f,!0);const c=Ar(f),o=f.subTree;f.subTree=c,C(o,c,b(o.el),_e(o),f,w,N),W.el=c.el,ye===null&&Pa(f,c.el),Y&&Xe(Y,w),(be=W.props&&W.props.onVnodeUpdated)&&Xe(()=>at(be,Z,W,ae),w)}else{let W;const{el:$,props:Y}=h,{bm:Z,m:ae,parent:ye}=f,be=pn(h);if(Dt(f,!1),Z&&Tr(Z),!be&&(W=Y&&Y.onVnodeBeforeMount)&&at(W,ye,h),Dt(f,!0),$&&ln){const c=()=>{f.subTree=Ar(f),ln($,f.subTree,f,w,null)};be?h.type.__asyncLoader().then(()=>!f.isUnmounted&&c()):c()}else{const c=f.subTree=Ar(f);C(null,c,x,E,f,w,N),h.el=c.el}if(ae&&Xe(ae,w),!be&&(W=Y&&Y.onVnodeMounted)){const c=h;Xe(()=>at(W,ye,c),w)}(h.shapeFlag&256||ye&&pn(ye.vnode)&&ye.vnode.shapeFlag&256)&&f.a&&Xe(f.a,w),f.isMounted=!0,h=x=E=null}},k=f.effect=new es(A,()=>as(P),f.scope),P=f.update=()=>k.run();P.id=f.uid,Dt(f,!0),P()},ve=(f,h,x)=>{h.component=f;const E=f.vnode.props;f.vnode=h,f.next=null,Qa(f,h.props,E,x),tc(f,h.children,x),nn(),qs(),rn()},fe=(f,h,x,E,w,N,I,A,k=!1)=>{const P=f&&f.children,W=f?f.shapeFlag:0,$=h.children,{patchFlag:Y,shapeFlag:Z}=h;if(Y>0){if(Y&128){Ce(P,$,x,E,w,N,I,A,k);return}else if(Y&256){Ee(P,$,x,E,w,N,I,A,k);return}}Z&8?(W&16&&B(P,w,N),$!==P&&m(x,$)):W&16?Z&16?Ce(P,$,x,E,w,N,I,A,k):B(P,w,N,!0):(W&8&&m(x,""),Z&16&&R($,x,E,w,N,I,A,k))},Ee=(f,h,x,E,w,N,I,A,k)=>{f=f||Yt,h=h||Yt;const P=f.length,W=h.length,$=Math.min(P,W);let Y;for(Y=0;Y<$;Y++){const Z=h[Y]=k?Tt(h[Y]):ct(h[Y]);C(f[Y],Z,x,null,w,N,I,A,k)}P>W?B(f,w,N,!0,!1,$):R(h,x,E,w,N,I,A,k,$)},Ce=(f,h,x,E,w,N,I,A,k)=>{let P=0;const W=h.length;let $=f.length-1,Y=W-1;for(;P<=$&&P<=Y;){const Z=f[P],ae=h[P]=k?Tt(h[P]):ct(h[P]);if(Rt(Z,ae))C(Z,ae,x,null,w,N,I,A,k);else break;P++}for(;P<=$&&P<=Y;){const Z=f[$],ae=h[Y]=k?Tt(h[Y]):ct(h[Y]);if(Rt(Z,ae))C(Z,ae,x,null,w,N,I,A,k);else break;$--,Y--}if(P>$){if(P<=Y){const Z=Y+1,ae=Z<W?h[Z].el:E;for(;P<=Y;)C(null,h[P]=k?Tt(h[P]):ct(h[P]),x,ae,w,N,I,A,k),P++}}else if(P>Y)for(;P<=$;)Fe(f[P],w,N,!0),P++;else{const Z=P,ae=P,ye=new Map;for(P=ae;P<=Y;P++){const re=h[P]=k?Tt(h[P]):ct(h[P]);re.key!=null&&ye.set(re.key,P)}let be,c=0;const o=Y-ae+1;let T=!1,H=0;const O=new Array(o);for(P=0;P<o;P++)O[P]=0;for(P=Z;P<=$;P++){const re=f[P];if(c>=o){Fe(re,w,N,!0);continue}let ge;if(re.key!=null)ge=ye.get(re.key);else for(be=ae;be<=Y;be++)if(O[be-ae]===0&&Rt(re,h[be])){ge=be;break}ge===void 0?Fe(re,w,N,!0):(O[ge-ae]=P+1,ge>=H?H=ge:T=!0,C(re,h[ge],x,null,w,N,I,A,k),c++)}const J=T?sc(O):Yt;for(be=J.length-1,P=o-1;P>=0;P--){const re=ae+P,ge=h[re],Se=re+1<W?h[re+1].el:E;O[P]===0?C(null,ge,x,Se,w,N,I,A,k):T&&(be<0||P!==J[be]?Oe(ge,x,Se,2):be--)}}},Oe=(f,h,x,E,w=null)=>{const{el:N,type:I,transition:A,children:k,shapeFlag:P}=f;if(P&6){Oe(f.component.subTree,h,x,E);return}if(P&128){f.suspense.move(h,x,E);return}if(P&64){I.move(f,h,x,Ct);return}if(I===Ge){r(N,h,x);for(let $=0;$<k.length;$++)Oe(k[$],h,x,E);r(f.anchor,h,x);return}if(I===zn){ue(f,h,x);return}if(E!==2&&P&1&&A)if(E===0)A.beforeEnter(N),r(N,h,x),Xe(()=>A.enter(N),w);else{const{leave:$,delayLeave:Y,afterLeave:Z}=A,ae=()=>r(N,h,x),ye=()=>{$(N,()=>{ae(),Z&&Z()})};Y?Y(N,ae,ye):ye()}else r(N,h,x)},Fe=(f,h,x,E=!1,w=!1)=>{const{type:N,props:I,ref:A,children:k,dynamicChildren:P,shapeFlag:W,patchFlag:$,dirs:Y}=f;if(A!=null&&Br(A,null,x,f,!0),W&256){h.ctx.deactivate(f);return}const Z=W&1&&Y,ae=!pn(f);let ye;if(ae&&(ye=I&&I.onVnodeBeforeUnmount)&&at(ye,h,f),W&6)De(f.component,x,E);else{if(W&128){f.suspense.unmount(x,E);return}Z&&It(f,null,h,"beforeUnmount"),W&64?f.type.remove(f,h,x,w,Ct,E):P&&(N!==Ge||$>0&&$&64)?B(P,h,x,!1,!0):(N===Ge&&$&384||!w&&W&16)&&B(k,h,x),E&&lt(f)}(ae&&(ye=I&&I.onVnodeUnmounted)||Z)&&Xe(()=>{ye&&at(ye,h,f),Z&&It(f,null,h,"unmounted")},x)},lt=f=>{const{type:h,el:x,anchor:E,transition:w}=f;if(h===Ge){dt(x,E);return}if(h===zn){z(f);return}const N=()=>{s(x),w&&!w.persisted&&w.afterLeave&&w.afterLeave()};if(f.shapeFlag&1&&w&&!w.persisted){const{leave:I,delayLeave:A}=w,k=()=>I(x,N);A?A(f.el,N,k):k()}else N()},dt=(f,h)=>{let x;for(;f!==h;)x=y(f),s(f),f=x;s(h)},De=(f,h,x)=>{const{bum:E,scope:w,update:N,subTree:I,um:A}=f;E&&Tr(E),w.stop(),N&&(N.active=!1,Fe(I,f,h,x)),A&&Xe(A,h),Xe(()=>{f.isUnmounted=!0},h),h&&h.pendingBranch&&!h.isUnmounted&&f.asyncDep&&!f.asyncResolved&&f.suspenseId===h.pendingId&&(h.deps--,h.deps===0&&h.resolve())},B=(f,h,x,E=!1,w=!1,N=0)=>{for(let I=N;I<f.length;I++)Fe(f[I],h,x,E,w)},_e=f=>f.shapeFlag&6?_e(f.component.subTree):f.shapeFlag&128?f.suspense.next():y(f.anchor||f.el),sn=(f,h,x)=>{f==null?h._vnode&&Fe(h._vnode,null,null,!0):C(h._vnode||null,f,h,null,null,null,x),qs(),no(),h._vnode=f},Ct={p:C,um:Fe,m:Oe,r:lt,mt:me,mc:R,pc:fe,pbc:ne,n:_e,o:e};let on,ln;return t&&([on,ln]=t(Ct)),{render:sn,hydrate:on,createApp:Ja(sn,on)}}function Dt({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function vs(e,t,n=!1){const r=e.children,s=t.children;if(ee(r)&&ee(s))for(let i=0;i<r.length;i++){const l=r[i];let a=s[i];a.shapeFlag&1&&!a.dynamicChildren&&((a.patchFlag<=0||a.patchFlag===32)&&(a=s[i]=Tt(s[i]),a.el=l.el),n||vs(l,a)),a.type===cr&&(a.el=l.el)}}function sc(e){const t=e.slice(),n=[0];let r,s,i,l,a;const d=e.length;for(r=0;r<d;r++){const p=e[r];if(p!==0){if(s=n[n.length-1],e[s]<p){t[r]=s,n.push(r);continue}for(i=0,l=n.length-1;i<l;)a=i+l>>1,e[n[a]]<p?i=a+1:l=a;p<e[n[i]]&&(i>0&&(t[r]=n[i-1]),n[i]=r)}}for(i=n.length,l=n[i-1];i-- >0;)n[i]=l,l=t[l];return n}const ic=e=>e.__isTeleport,gn=e=>e&&(e.disabled||e.disabled===""),si=e=>typeof SVGElement<"u"&&e instanceof SVGElement,zr=(e,t)=>{const n=e&&e.to;return He(n)?t?t(n):null:n},oc={__isTeleport:!0,process(e,t,n,r,s,i,l,a,d,p){const{mc:m,pc:b,pbc:y,o:{insert:M,querySelector:_,createText:C,createComment:F}}=p,K=gn(t.props);let{shapeFlag:q,children:ue,dynamicChildren:z}=t;if(e==null){const X=t.el=C(""),de=t.anchor=C("");M(X,n,r),M(de,n,r);const ie=t.target=zr(t.props,_),R=t.targetAnchor=C("");ie&&(M(R,ie),l=l||si(ie));const U=(ne,Q)=>{q&16&&m(ue,ne,Q,s,i,l,a,d)};K?U(n,de):ie&&U(ie,R)}else{t.el=e.el;const X=t.anchor=e.anchor,de=t.target=e.target,ie=t.targetAnchor=e.targetAnchor,R=gn(e.props),U=R?n:de,ne=R?X:ie;if(l=l||si(de),z?(y(e.dynamicChildren,z,U,s,i,l,a),vs(e,t,!0)):d||b(e,t,U,ne,s,i,l,a,!1),K)R||Vn(t,n,X,p,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const Q=t.target=zr(t.props,_);Q&&Vn(t,Q,null,p,0)}else R&&Vn(t,de,ie,p,1)}wo(t)},remove(e,t,n,r,{um:s,o:{remove:i}},l){const{shapeFlag:a,children:d,anchor:p,targetAnchor:m,target:b,props:y}=e;if(b&&i(m),(l||!gn(y))&&(i(p),a&16))for(let M=0;M<d.length;M++){const _=d[M];s(_,t,n,!0,!!_.dynamicChildren)}},move:Vn,hydrate:lc};function Vn(e,t,n,{o:{insert:r},m:s},i=2){i===0&&r(e.targetAnchor,t,n);const{el:l,anchor:a,shapeFlag:d,children:p,props:m}=e,b=i===2;if(b&&r(l,t,n),(!b||gn(m))&&d&16)for(let y=0;y<p.length;y++)s(p[y],t,n,2);b&&r(a,t,n)}function lc(e,t,n,r,s,i,{o:{nextSibling:l,parentNode:a,querySelector:d}},p){const m=t.target=zr(t.props,d);if(m){const b=m._lpa||m.firstChild;if(t.shapeFlag&16)if(gn(t.props))t.anchor=p(l(e),t,a(e),n,r,s,i),t.targetAnchor=b;else{t.anchor=l(e);let y=b;for(;y;)if(y=l(y),y&&y.nodeType===8&&y.data==="teleport anchor"){t.targetAnchor=y,m._lpa=t.targetAnchor&&l(t.targetAnchor);break}p(b,t,m,n,r,s,i)}wo(t)}return t.anchor&&l(t.anchor)}const $u=oc;function wo(e){const t=e.ctx;if(t&&t.ut){let n=e.children[0].el;for(;n!==e.targetAnchor;)n.nodeType===1&&n.setAttribute("data-v-owner",t.uid),n=n.nextSibling;t.ut()}}const Ge=Symbol.for("v-fgt"),cr=Symbol.for("v-txt"),nt=Symbol.for("v-cmt"),zn=Symbol.for("v-stc"),mn=[];let it=null;function ur(e=!1){mn.push(it=e?null:[])}function ac(){mn.pop(),it=mn[mn.length-1]||null}let wn=1;function ii(e){wn+=e}function Eo(e){return e.dynamicChildren=wn>0?it||Yt:null,ac(),wn>0&&it&&it.push(e),e}function So(e,t,n,r,s,i){return Eo(rt(e,t,n,r,s,i,!0))}function Po(e,t,n,r,s){return Eo(qe(e,t,n,r,s,!0))}function Qn(e){return e?e.__v_isVNode===!0:!1}function Rt(e,t){return e.type===t.type&&e.key===t.key}const fr="__vInternal",To=({key:e})=>e??null,Kn=({ref:e,ref_key:t,ref_for:n})=>(typeof e=="number"&&(e=""+e),e!=null?He(e)||Ve(e)||oe(e)?{i:$e,r:e,k:t,f:!!n}:e:null);function rt(e,t=null,n=null,r=0,s=null,i=e===Ge?0:1,l=!1,a=!1){const d={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&To(t),ref:t&&Kn(t),scopeId:io,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:r,dynamicProps:s,dynamicChildren:null,appContext:null,ctx:$e};return a?(bs(d,n),i&128&&e.normalize(d)):n&&(d.shapeFlag|=He(n)?8:16),wn>0&&!l&&it&&(d.patchFlag>0||i&6)&&d.patchFlag!==32&&it.push(d),d}const qe=cc;function cc(e,t=null,n=null,r=0,s=null,i=!1){if((!e||e===ho)&&(e=nt),Qn(e)){const a=Ft(e,t,!0);return n&&bs(a,n),wn>0&&!i&&it&&(a.shapeFlag&6?it[it.indexOf(e)]=a:it.push(a)),a.patchFlag|=-2,a}if(xc(e)&&(e=e.__vccOpts),t){t=uc(t);let{class:a,style:d}=t;a&&!He(a)&&(t.class=rr(a)),Te(d)&&(Wi(d)&&!ee(d)&&(d=Be({},d)),t.style=Tn(d))}const l=He(e)?1:Ta(e)?128:ic(e)?64:Te(e)?4:oe(e)?2:0;return rt(e,t,n,r,s,l,i,!0)}function uc(e){return e?Wi(e)||fr in e?Be({},e):e:null}function Ft(e,t,n=!1){const{props:r,ref:s,patchFlag:i,children:l}=e,a=t?Ao(r||{},t):r;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:a,key:a&&To(a),ref:t&&t.ref?n&&s?ee(s)?s.concat(Kn(t)):[s,Kn(t)]:Kn(t):s,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:l,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ge?i===-1?16:i|16:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Ft(e.ssContent),ssFallback:e.ssFallback&&Ft(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function fc(e=" ",t=0){return qe(cr,null,e,t)}function Bu(e,t){const n=qe(zn,null,e);return n.staticCount=t,n}function zu(e="",t=!1){return t?(ur(),Po(nt,null,e)):qe(nt,null,e)}function ct(e){return e==null||typeof e=="boolean"?qe(nt):ee(e)?qe(Ge,null,e.slice()):typeof e=="object"?Tt(e):qe(cr,null,String(e))}function Tt(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:Ft(e)}function bs(e,t){let n=0;const{shapeFlag:r}=e;if(t==null)t=null;else if(ee(t))n=16;else if(typeof t=="object")if(r&65){const s=t.default;s&&(s._c&&(s._d=!1),bs(e,s()),s._c&&(s._d=!0));return}else{n=32;const s=t._;!s&&!(fr in t)?t._ctx=$e:s===3&&$e&&($e.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else oe(t)?(t={default:t,_ctx:$e},n=32):(t=String(t),r&64?(n=16,t=[fc(t)]):n=8);e.children=t,e.shapeFlag|=n}function Ao(...e){const t={};for(let n=0;n<e.length;n++){const r=e[n];for(const s in r)if(s==="class")t.class!==r.class&&(t.class=rr([t.class,r.class]));else if(s==="style")t.style=Tn([t.style,r.style]);else if(Yr(s)){const i=t[s],l=r[s];l&&i!==l&&!(ee(i)&&i.includes(l))&&(t[s]=i?[].concat(i,l):l)}else s!==""&&(t[s]=r[s])}return t}function at(e,t,n,r=null){tt(e,t,7,[n,r])}const dc=vo();let pc=0;function hc(e,t,n){const r=e.type,s=(t?t.appContext:e.appContext)||dc,i={uid:pc++,vnode:e,type:r,parent:t,appContext:s,root:null,next:null,subTree:null,effect:null,update:null,scope:new Ii(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(s.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:yo(r,s),emitsOptions:so(r,s),emit:null,emitted:null,propsDefaults:Pe,inheritAttrs:r.inheritAttrs,ctx:Pe,data:Pe,props:Pe,attrs:Pe,slots:Pe,refs:Pe,setupState:Pe,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return i.ctx={_:i},i.root=t?t.root:i,i.emit=_a.bind(null,i),e.ce&&e.ce(i),i}let Re=null;const No=()=>Re||$e;let ys,qt,oi="__VUE_INSTANCE_SETTERS__";(qt=Lr()[oi])||(qt=Lr()[oi]=[]),qt.push(e=>Re=e),ys=e=>{qt.length>1?qt.forEach(t=>t(e)):qt[0](e)};const Gt=e=>{ys(e),e.scope.on()},Bt=()=>{Re&&Re.scope.off(),ys(null)};function Mo(e){return e.vnode.shapeFlag&4}let En=!1;function gc(e,t=!1){En=t;const{props:n,children:r}=e.vnode,s=Mo(e);Za(e,n,s,t),ec(e,r);const i=s?mc(e,t):void 0;return En=!1,i}function mc(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=Yi(new Proxy(e.ctx,$a));const{setup:r}=n;if(r){const s=e.setupContext=r.length>1?bc(e):null;Gt(e),nn();const i=Mt(r,e,0,[e.props,s]);if(rn(),Bt(),Oi(i)){if(i.then(Bt,Bt),t)return i.then(l=>{li(e,l,t)}).catch(l=>{ir(l,e,0)});e.asyncDep=i}else li(e,i,t)}else Oo(e,t)}function li(e,t,n){oe(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:Te(t)&&(e.setupState=Qi(t)),Oo(e,n)}let ai;function Oo(e,t,n){const r=e.type;if(!e.render){if(!t&&ai&&!r.render){const s=r.template||gs(e).template;if(s){const{isCustomElement:i,compilerOptions:l}=e.appContext.config,{delimiters:a,compilerOptions:d}=r,p=Be(Be({isCustomElement:i,delimiters:a},l),d);r.render=ai(s,p)}}e.render=r.render||ot}Gt(e),nn(),Ba(e),rn(),Bt()}function vc(e){return e.attrsProxy||(e.attrsProxy=new Proxy(e.attrs,{get(t,n){return Ze(e,"get","$attrs"),t[n]}}))}function bc(e){const t=n=>{e.exposed=n||{}};return{get attrs(){return vc(e)},slots:e.slots,emit:e.emit,expose:t}}function dr(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(Qi(Yi(e.exposed)),{get(t,n){if(n in t)return t[n];if(n in hn)return hn[n](e)},has(t,n){return n in t||n in hn}}))}function yc(e,t=!0){return oe(e)?e.displayName||e.name:e.name||t&&e.__name}function xc(e){return oe(e)&&"__vccOpts"in e}const St=(e,t)=>ha(e,t,En);function _c(e,t,n){const r=arguments.length;return r===2?Te(t)&&!ee(t)?Qn(t)?qe(e,null,[t]):qe(e,t):qe(e,null,t):(r>3?n=Array.prototype.slice.call(arguments,2):r===3&&Qn(n)&&(n=[n]),qe(e,t,n))}const Cc=Symbol.for("v-scx"),wc=()=>Bn(Cc),Ec="3.3.4";function Sc(e,t){const n=Object.create(null),r=e.split(",");for(let s=0;s<r.length;s++)n[r[s]]=!0;return t?s=>!!n[s.toLowerCase()]:s=>!!n[s]}const Pc=/^on[^a-z]/,Tc=e=>Pc.test(e),Ac=e=>e.startsWith("onUpdate:"),pr=Object.assign,xt=Array.isArray,Fo=e=>Lo(e)==="[object Set]",ci=e=>Lo(e)==="[object Date]",ko=e=>typeof e=="function",Sn=e=>typeof e=="string",ui=e=>typeof e=="symbol",Kr=e=>e!==null&&typeof e=="object",Nc=Object.prototype.toString,Lo=e=>Nc.call(e),Io=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Mc=/\B([A-Z])/g,xs=Io(e=>e.replace(Mc,"-$1").toLowerCase()),Oc=Io(e=>e.charAt(0).toUpperCase()+e.slice(1)),Fc=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},qr=e=>{const t=parseFloat(e);return isNaN(t)?e:t},kc=e=>{const t=Sn(e)?Number(e):NaN;return isNaN(t)?e:t},Lc="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Ic=Sc(Lc);function Do(e){return!!e||e===""}function Dc(e,t){if(e.length!==t.length)return!1;let n=!0;for(let r=0;n&&r<e.length;r++)n=en(e[r],t[r]);return n}function en(e,t){if(e===t)return!0;let n=ci(e),r=ci(t);if(n||r)return n&&r?e.getTime()===t.getTime():!1;if(n=ui(e),r=ui(t),n||r)return e===t;if(n=xt(e),r=xt(t),n||r)return n&&r?Dc(e,t):!1;if(n=Kr(e),r=Kr(t),n||r){if(!n||!r)return!1;const s=Object.keys(e).length,i=Object.keys(t).length;if(s!==i)return!1;for(const l in e){const a=e.hasOwnProperty(l),d=t.hasOwnProperty(l);if(a&&!d||!a&&d||!en(e[l],t[l]))return!1}}return String(e)===String(t)}function Uc(e,t){return e.findIndex(n=>en(n,t))}const jc="http://www.w3.org/2000/svg",Vt=typeof document<"u"?document:null,fi=Vt&&Vt.createElement("template"),Rc={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,r)=>{const s=t?Vt.createElementNS(jc,e):Vt.createElement(e,n?{is:n}:void 0);return e==="select"&&r&&r.multiple!=null&&s.setAttribute("multiple",r.multiple),s},createText:e=>Vt.createTextNode(e),createComment:e=>Vt.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Vt.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,r,s,i){const l=n?n.previousSibling:t.lastChild;if(s&&(s===i||s.nextSibling))for(;t.insertBefore(s.cloneNode(!0),n),!(s===i||!(s=s.nextSibling)););else{fi.innerHTML=r?`<svg>${e}</svg>`:e;const a=fi.content;if(r){const d=a.firstChild;for(;d.firstChild;)a.appendChild(d.firstChild);a.removeChild(d)}t.insertBefore(a,n)}return[l?l.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}};function Vc(e,t,n){const r=e._vtc;r&&(t=(t?[t,...r]:[...r]).join(" ")),t==null?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}function Hc(e,t,n){const r=e.style,s=Sn(n);if(n&&!s){if(t&&!Sn(t))for(const i in t)n[i]==null&&Wr(r,i,"");for(const i in n)Wr(r,i,n[i])}else{const i=r.display;s?t!==n&&(r.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(r.display=i)}}const di=/\s*!important$/;function Wr(e,t,n){if(xt(n))n.forEach(r=>Wr(e,t,r));else if(n==null&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const r=$c(e,t);di.test(n)?e.setProperty(xs(r),n.replace(di,""),"important"):e[r]=n}}const pi=["Webkit","Moz","ms"],Or={};function $c(e,t){const n=Or[t];if(n)return n;let r=ft(t);if(r!=="filter"&&r in e)return Or[t]=r;r=Oc(r);for(let s=0;s<pi.length;s++){const i=pi[s]+r;if(i in e)return Or[t]=i}return t}const hi="http://www.w3.org/1999/xlink";function Bc(e,t,n,r,s){if(r&&t.startsWith("xlink:"))n==null?e.removeAttributeNS(hi,t.slice(6,t.length)):e.setAttributeNS(hi,t,n);else{const i=Ic(t);n==null||i&&!Do(n)?e.removeAttribute(t):e.setAttribute(t,i?"":n)}}function zc(e,t,n,r,s,i,l){if(t==="innerHTML"||t==="textContent"){r&&l(r,s,i),e[t]=n??"";return}const a=e.tagName;if(t==="value"&&a!=="PROGRESS"&&!a.includes("-")){e._value=n;const p=a==="OPTION"?e.getAttribute("value"):e.value,m=n??"";p!==m&&(e.value=m),n==null&&e.removeAttribute(t);return}let d=!1;if(n===""||n==null){const p=typeof e[t];p==="boolean"?n=Do(n):n==null&&p==="string"?(n="",d=!0):p==="number"&&(n=0,d=!0)}try{e[t]=n}catch{}d&&e.removeAttribute(t)}function At(e,t,n,r){e.addEventListener(t,n,r)}function Kc(e,t,n,r){e.removeEventListener(t,n,r)}function qc(e,t,n,r,s=null){const i=e._vei||(e._vei={}),l=i[t];if(r&&l)l.value=r;else{const[a,d]=Wc(t);if(r){const p=i[t]=Xc(r,s);At(e,a,p,d)}else l&&(Kc(e,a,l,d),i[t]=void 0)}}const gi=/(?:Once|Passive|Capture)$/;function Wc(e){let t;if(gi.test(e)){t={};let r;for(;r=e.match(gi);)e=e.slice(0,e.length-r[0].length),t[r[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):xs(e.slice(2)),t]}let Fr=0;const Yc=Promise.resolve(),Jc=()=>Fr||(Yc.then(()=>Fr=0),Fr=Date.now());function Xc(e,t){const n=r=>{if(!r._vts)r._vts=Date.now();else if(r._vts<=n.attached)return;tt(Zc(r,n.value),t,5,[r])};return n.value=e,n.attached=Jc(),n}function Zc(e,t){if(xt(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map(r=>s=>!s._stopped&&r&&r(s))}else return t}const mi=/^on[a-z]/,Qc=(e,t,n,r,s=!1,i,l,a,d)=>{t==="class"?Vc(e,r,s):t==="style"?Hc(e,n,r):Tc(t)?Ac(t)||qc(e,t,n,r,l):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):Gc(e,t,r,s))?zc(e,t,r,i,l,a,d):(t==="true-value"?e._trueValue=r:t==="false-value"&&(e._falseValue=r),Bc(e,t,r,s))};function Gc(e,t,n,r){return r?!!(t==="innerHTML"||t==="textContent"||t in e&&mi.test(t)&&ko(n)):t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA"||mi.test(t)&&Sn(n)?!1:t in e}const Et="transition",cn="animation",Uo=(e,{slots:t})=>_c(Oa,Ro(e),t);Uo.displayName="Transition";const jo={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},eu=Uo.props=pr({},ao,jo),Ut=(e,t=[])=>{xt(e)?e.forEach(n=>n(...t)):e&&e(...t)},vi=e=>e?xt(e)?e.some(t=>t.length>1):e.length>1:!1;function Ro(e){const t={};for(const j in e)j in jo||(t[j]=e[j]);if(e.css===!1)return t;const{name:n="v",type:r,duration:s,enterFromClass:i=`${n}-enter-from`,enterActiveClass:l=`${n}-enter-active`,enterToClass:a=`${n}-enter-to`,appearFromClass:d=i,appearActiveClass:p=l,appearToClass:m=a,leaveFromClass:b=`${n}-leave-from`,leaveActiveClass:y=`${n}-leave-active`,leaveToClass:M=`${n}-leave-to`}=e,_=tu(s),C=_&&_[0],F=_&&_[1],{onBeforeEnter:K,onEnter:q,onEnterCancelled:ue,onLeave:z,onLeaveCancelled:X,onBeforeAppear:de=K,onAppear:ie=q,onAppearCancelled:R=ue}=t,U=(j,ce,me)=>{Pt(j,ce?m:a),Pt(j,ce?p:l),me&&me()},ne=(j,ce)=>{j._isLeaving=!1,Pt(j,b),Pt(j,M),Pt(j,y),ce&&ce()},Q=j=>(ce,me)=>{const G=j?ie:q,le=()=>U(ce,j,me);Ut(G,[ce,le]),bi(()=>{Pt(ce,j?d:i),vt(ce,j?m:a),vi(G)||yi(ce,r,C,le)})};return pr(t,{onBeforeEnter(j){Ut(K,[j]),vt(j,i),vt(j,l)},onBeforeAppear(j){Ut(de,[j]),vt(j,d),vt(j,p)},onEnter:Q(!1),onAppear:Q(!0),onLeave(j,ce){j._isLeaving=!0;const me=()=>ne(j,ce);vt(j,b),Ho(),vt(j,y),bi(()=>{j._isLeaving&&(Pt(j,b),vt(j,M),vi(z)||yi(j,r,F,me))}),Ut(z,[j,me])},onEnterCancelled(j){U(j,!1),Ut(ue,[j])},onAppearCancelled(j){U(j,!0),Ut(R,[j])},onLeaveCancelled(j){ne(j),Ut(X,[j])}})}function tu(e){if(e==null)return null;if(Kr(e))return[kr(e.enter),kr(e.leave)];{const t=kr(e);return[t,t]}}function kr(e){return kc(e)}function vt(e,t){t.split(/\s+/).forEach(n=>n&&e.classList.add(n)),(e._vtc||(e._vtc=new Set)).add(t)}function Pt(e,t){t.split(/\s+/).forEach(r=>r&&e.classList.remove(r));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function bi(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let nu=0;function yi(e,t,n,r){const s=e._endId=++nu,i=()=>{s===e._endId&&r()};if(n)return setTimeout(i,n);const{type:l,timeout:a,propCount:d}=Vo(e,t);if(!l)return r();const p=l+"end";let m=0;const b=()=>{e.removeEventListener(p,y),i()},y=M=>{M.target===e&&++m>=d&&b()};setTimeout(()=>{m<d&&b()},a+1),e.addEventListener(p,y)}function Vo(e,t){const n=window.getComputedStyle(e),r=_=>(n[_]||"").split(", "),s=r(`${Et}Delay`),i=r(`${Et}Duration`),l=xi(s,i),a=r(`${cn}Delay`),d=r(`${cn}Duration`),p=xi(a,d);let m=null,b=0,y=0;t===Et?l>0&&(m=Et,b=l,y=i.length):t===cn?p>0&&(m=cn,b=p,y=d.length):(b=Math.max(l,p),m=b>0?l>p?Et:cn:null,y=m?m===Et?i.length:d.length:0);const M=m===Et&&/\b(transform|all)(,|$)/.test(r(`${Et}Property`).toString());return{type:m,timeout:b,propCount:y,hasTransform:M}}function xi(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((n,r)=>_i(n)+_i(e[r])))}function _i(e){return Number(e.slice(0,-1).replace(",","."))*1e3}function Ho(){return document.body.offsetHeight}const $o=new WeakMap,Bo=new WeakMap,zo={name:"TransitionGroup",props:pr({},eu,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=No(),r=lo();let s,i;return fo(()=>{if(!s.length)return;const l=e.moveClass||`${e.name||"v"}-move`;if(!lu(s[0].el,n.vnode.el,l))return;s.forEach(su),s.forEach(iu);const a=s.filter(ou);Ho(),a.forEach(d=>{const p=d.el,m=p.style;vt(p,l),m.transform=m.webkitTransform=m.transitionDuration="";const b=p._moveCb=y=>{y&&y.target!==p||(!y||/transform$/.test(y.propertyName))&&(p.removeEventListener("transitionend",b),p._moveCb=null,Pt(p,l))};p.addEventListener("transitionend",b)})}),()=>{const l=pe(e),a=Ro(l);let d=l.tag||Ge;s=i,i=t.default?us(t.default()):[];for(let p=0;p<i.length;p++){const m=i[p];m.key!=null&&Cn(m,_n(m,a,r,n))}if(s)for(let p=0;p<s.length;p++){const m=s[p];Cn(m,_n(m,a,r,n)),$o.set(m,m.el.getBoundingClientRect())}return qe(d,null,i)}}},ru=e=>delete e.mode;zo.props;const Ku=zo;function su(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function iu(e){Bo.set(e,e.el.getBoundingClientRect())}function ou(e){const t=$o.get(e),n=Bo.get(e),r=t.left-n.left,s=t.top-n.top;if(r||s){const i=e.el.style;return i.transform=i.webkitTransform=`translate(${r}px,${s}px)`,i.transitionDuration="0s",e}}function lu(e,t,n){const r=e.cloneNode();e._vtc&&e._vtc.forEach(l=>{l.split(/\s+/).forEach(a=>a&&r.classList.remove(a))}),n.split(/\s+/).forEach(l=>l&&r.classList.add(l)),r.style.display="none";const s=t.nodeType===1?t:t.parentNode;s.appendChild(r);const{hasTransform:i}=Vo(r);return s.removeChild(r),i}const tn=e=>{const t=e.props["onUpdate:modelValue"]||!1;return xt(t)?n=>Fc(t,n):t};function au(e){e.target.composing=!0}function Ci(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const qu={created(e,{modifiers:{lazy:t,trim:n,number:r}},s){e._assign=tn(s);const i=r||s.props&&s.props.type==="number";At(e,t?"change":"input",l=>{if(l.target.composing)return;let a=e.value;n&&(a=a.trim()),i&&(a=qr(a)),e._assign(a)}),n&&At(e,"change",()=>{e.value=e.value.trim()}),t||(At(e,"compositionstart",au),At(e,"compositionend",Ci),At(e,"change",Ci))},mounted(e,{value:t}){e.value=t??""},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:r,number:s}},i){if(e._assign=tn(i),e.composing||document.activeElement===e&&e.type!=="range"&&(n||r&&e.value.trim()===t||(s||e.type==="number")&&qr(e.value)===t))return;const l=t??"";e.value!==l&&(e.value=l)}},Wu={created(e,{value:t},n){e.checked=en(t,n.props.value),e._assign=tn(n),At(e,"change",()=>{e._assign(Pn(e))})},beforeUpdate(e,{value:t,oldValue:n},r){e._assign=tn(r),t!==n&&(e.checked=en(t,r.props.value))}},Yu={deep:!0,created(e,{value:t,modifiers:{number:n}},r){const s=Fo(t);At(e,"change",()=>{const i=Array.prototype.filter.call(e.options,l=>l.selected).map(l=>n?qr(Pn(l)):Pn(l));e._assign(e.multiple?s?new Set(i):i:i[0])}),e._assign=tn(r)},mounted(e,{value:t}){wi(e,t)},beforeUpdate(e,t,n){e._assign=tn(n)},updated(e,{value:t}){wi(e,t)}};function wi(e,t){const n=e.multiple;if(!(n&&!xt(t)&&!Fo(t))){for(let r=0,s=e.options.length;r<s;r++){const i=e.options[r],l=Pn(i);if(n)xt(t)?i.selected=Uc(t,l)>-1:i.selected=t.has(l);else if(en(Pn(i),t)){e.selectedIndex!==r&&(e.selectedIndex=r);return}}!n&&e.selectedIndex!==-1&&(e.selectedIndex=-1)}}function Pn(e){return"_value"in e?e._value:e.value}const cu=["ctrl","shift","alt","meta"],uu={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,t)=>cu.some(n=>e[`${n}Key`]&&!t.includes(n))},Ju=(e,t)=>(n,...r)=>{for(let s=0;s<t.length;s++){const i=uu[t[s]];if(i&&i(n,t))return}return e(n,...r)},fu={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Xu=(e,t)=>n=>{if(!("key"in n))return;const r=xs(n.key);if(t.some(s=>s===r||fu[s]===r))return e(n)},Zu={beforeMount(e,{value:t},{transition:n}){e._vod=e.style.display==="none"?"":e.style.display,n&&t?n.beforeEnter(e):un(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:r}){!t!=!n&&(r?t?(r.beforeEnter(e),un(e,!0),r.enter(e)):r.leave(e,()=>{un(e,!1)}):un(e,t))},beforeUnmount(e,{value:t}){un(e,t)}};function un(e,t){e.style.display=t?e._vod:"none"}const du=pr({patchProp:Qc},Rc);let Ei;function pu(){return Ei||(Ei=nc(du))}const Qu=(...e)=>{const t=pu().createApp(...e),{mount:n}=t;return t.mount=r=>{const s=hu(r);if(!s)return;const i=t._component;!ko(i)&&!i.render&&!i.template&&(i.template=s.innerHTML),s.innerHTML="";const l=n(s,!1,s instanceof SVGElement);return s instanceof Element&&(s.removeAttribute("v-cloak"),s.setAttribute("data-v-app","")),l},t};function hu(e){return Sn(e)?document.querySelector(e):e}const gu=(e,t)=>{const n=e.__vccOpts||e;for(const[r,s]of t)n[r]=s;return n},mu={props:{label:{type:String,default:"Color"},color:{type:String,default:"#ffffff"}},data(){var e=this.getHexColorDisplayValueText(this.color);return{selectedColor:this.color,selectedColorHex:e}},watch:{color(e){this.selectedColor=e,this.setHexColorDisplay(e)}},methods:{getHexColorDisplayValueText(e){if(e=="revert-layer")return"";if(e=="rgb(0 0 0 / 0%)")return"transparent";var t=mw.top().color.rgbOrRgbaToHex(e);return t=="#00000000"?"":t},setHexColorDisplay(e){this.selectedColorHex=this.getHexColorDisplayValueText(e)},handleColorChange(e){const t=e.target.value;this.selectedColor=t,this.setHexColorDisplay(t),this.$emit("change",t)},resetColor(){this.selectedColor="",this.$emit("change",this.selectedColor)},togglePicker(){let e=this.$refs.colorPickerElement;mw.app.colorPicker.openColorPicker(this.selectedColor,t=>{this.$props.color=t,this.selectedColor=t,this.$emit("change",this.$props.color)},e)}}},vu={class:"form-control-live-edit-label-wrapper my-4 d-flex align-items-center gap-2"},bu={class:"live-edit-label px-0 col-4"},yu={class:"mw-field-color-indicator"},xu=["value"],_u=["value"],Cu=rt("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",height:"16",viewBox:"0 -960 960 960",width:"16"},[rt("path",{d:"M440-122q-121-15-200.5-105.5T160-440q0-66 26-126.5T260-672l57 57q-38 34-57.5 79T240-440q0 88 56 155.5T440-202v80Zm80 0v-80q87-16 143.5-83T720-440q0-100-70-170t-170-70h-3l44 44-56 56-140-140 140-140 56 56-44 44h3q134 0 227 93t93 227q0 121-79.5 211.5T520-122Z"})],-1),wu=[Cu];function Eu(e,t,n,r,s,i){return ur(),So("div",vu,[rt("label",bu,Ol(n.label),1),rt("div",{class:"mw-field mw-field-flat","data-size":"medium",onClick:t[5]||(t[5]=(...l)=>i.togglePicker&&i.togglePicker(...l))},[rt("span",yu,[rt("span",{ref:"colorPickerElement",onClick:t[0]||(t[0]=(...l)=>i.togglePicker&&i.togglePicker(...l)),class:"mw-field-color-indicator-display",style:Tn({backgroundColor:s.selectedColor})},null,4)]),rt("input",{readonly:"",onClick:t[1]||(t[1]=(...l)=>i.togglePicker&&i.togglePicker(...l)),type:"hidden",class:"colorField unit ready mw-color-picker-field",value:s.selectedColor,onInput:t[2]||(t[2]=(...l)=>i.handleColorChange&&i.handleColorChange(...l)),autocomplete:"off",placeholder:"#ffffff"},null,40,xu),rt("input",{style:{"margin-left":"25px"},readonly:"",class:"colorField unit ready mw-color-picker-field",onClick:t[3]||(t[3]=(...l)=>i.togglePicker&&i.togglePicker(...l)),ref:"colorHex",value:s.selectedColorHex},null,8,_u),rt("span",{class:"reset-field tip mw-action-buttons-background-circle-on-hover","data-tipposition":"top-right","data-tip":"Restore default value",onClick:t[4]||(t[4]=(...l)=>i.resetColor&&i.resetColor(...l))},wu)])])}const Gu=gu(mu,[["render",Eu]]);function Hn(e){return[null,void 0,!1].indexOf(e)!==-1}function Su(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function Ko(e){var t={exports:{}};return e(t,t.exports),t.exports}var Si=Ko(function(e,t){e.exports=function(){var n=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function r(_){return _.split("").reverse().join("")}function s(_,C){return _.substring(0,C.length)===C}function i(_,C){return _.slice(-1*C.length)===C}function l(_,C,F){if((_[C]||_[F])&&_[C]===_[F])throw new Error(C)}function a(_){return typeof _=="number"&&isFinite(_)}function d(_,C){return _=_.toString().split("e"),(+((_=(_=Math.round(+(_[0]+"e"+(_[1]?+_[1]+C:C)))).toString().split("e"))[0]+"e"+(_[1]?+_[1]-C:-C))).toFixed(C)}function p(_,C,F,K,q,ue,z,X,de,ie,R,U){var ne,Q,j,ce=U,me="",G="";return ue&&(U=ue(U)),!!a(U)&&(_!==!1&&parseFloat(U.toFixed(_))===0&&(U=0),U<0&&(ne=!0,U=Math.abs(U)),_!==!1&&(U=d(U,_)),(U=U.toString()).indexOf(".")!==-1?(j=(Q=U.split("."))[0],F&&(me=F+Q[1])):j=U,C&&(j=r(j).match(/.{1,3}/g),j=r(j.join(r(C)))),ne&&X&&(G+=X),K&&(G+=K),ne&&de&&(G+=de),G+=j,G+=me,q&&(G+=q),ie&&(G=ie(G,ce)),G)}function m(_,C,F,K,q,ue,z,X,de,ie,R,U){var ne,Q="";return R&&(U=R(U)),!(!U||typeof U!="string")&&(X&&s(U,X)&&(U=U.replace(X,""),ne=!0),K&&s(U,K)&&(U=U.replace(K,"")),de&&s(U,de)&&(U=U.replace(de,""),ne=!0),q&&i(U,q)&&(U=U.slice(0,-1*q.length)),C&&(U=U.split(C).join("")),F&&(U=U.replace(F,".")),ne&&(Q+="-"),(Q=(Q+=U).replace(/[^0-9\.\-.]/g,""))!==""&&(Q=Number(Q),z&&(Q=z(Q)),!!a(Q)&&Q))}function b(_){var C,F,K,q={};for(_.suffix===void 0&&(_.suffix=_.postfix),C=0;C<n.length;C+=1)if((K=_[F=n[C]])===void 0)F!=="negative"||q.negativeBefore?F==="mark"&&q.thousand!=="."?q[F]=".":q[F]=!1:q[F]="-";else if(F==="decimals"){if(!(K>=0&&K<8))throw new Error(F);q[F]=K}else if(F==="encoder"||F==="decoder"||F==="edit"||F==="undo"){if(typeof K!="function")throw new Error(F);q[F]=K}else{if(typeof K!="string")throw new Error(F);q[F]=K}return l(q,"mark","thousand"),l(q,"prefix","negative"),l(q,"prefix","negativeBefore"),q}function y(_,C,F){var K,q=[];for(K=0;K<n.length;K+=1)q.push(_[n[K]]);return q.push(F),C.apply("",q)}function M(_){if(!(this instanceof M))return new M(_);typeof _=="object"&&(_=b(_),this.to=function(C){return y(_,p,C)},this.from=function(C){return y(_,m,C)})}return M}()}),Pu=Su(Ko(function(e,t){(function(n){function r(c){return s(c)&&typeof c.from=="function"}function s(c){return typeof c=="object"&&typeof c.to=="function"}function i(c){c.parentElement.removeChild(c)}function l(c){return c!=null}function a(c){c.preventDefault()}function d(c){return c.filter(function(o){return!this[o]&&(this[o]=!0)},{})}function p(c,o){return Math.round(c/o)*o}function m(c,o){var T=c.getBoundingClientRect(),H=c.ownerDocument,O=H.documentElement,J=ue(H);return/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(J.x=0),o?T.top+J.y-O.clientTop:T.left+J.x-O.clientLeft}function b(c){return typeof c=="number"&&!isNaN(c)&&isFinite(c)}function y(c,o,T){T>0&&(F(c,o),setTimeout(function(){K(c,o)},T))}function M(c){return Math.max(Math.min(c,100),0)}function _(c){return Array.isArray(c)?c:[c]}function C(c){var o=(c=String(c)).split(".");return o.length>1?o[1].length:0}function F(c,o){c.classList&&!/\s/.test(o)?c.classList.add(o):c.className+=" "+o}function K(c,o){c.classList&&!/\s/.test(o)?c.classList.remove(o):c.className=c.className.replace(new RegExp("(^|\\b)"+o.split(" ").join("|")+"(\\b|$)","gi")," ")}function q(c,o){return c.classList?c.classList.contains(o):new RegExp("\\b"+o+"\\b").test(c.className)}function ue(c){var o=window.pageXOffset!==void 0,T=(c.compatMode||"")==="CSS1Compat";return{x:o?window.pageXOffset:T?c.documentElement.scrollLeft:c.body.scrollLeft,y:o?window.pageYOffset:T?c.documentElement.scrollTop:c.body.scrollTop}}function z(){return window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"}}function X(){var c=!1;try{var o=Object.defineProperty({},"passive",{get:function(){c=!0}});window.addEventListener("test",null,o)}catch{}return c}function de(){return window.CSS&&CSS.supports&&CSS.supports("touch-action","none")}function ie(c,o){return 100/(o-c)}function R(c,o,T){return 100*o/(c[T+1]-c[T])}function U(c,o){return R(c,c[0]<0?o+Math.abs(c[0]):o-c[0],0)}function ne(c,o){return o*(c[1]-c[0])/100+c[0]}function Q(c,o){for(var T=1;c>=o[T];)T+=1;return T}function j(c,o,T){if(T>=c.slice(-1)[0])return 100;var H=Q(T,c),O=c[H-1],J=c[H],re=o[H-1],ge=o[H];return re+U([O,J],T)/ie(re,ge)}function ce(c,o,T){if(T>=100)return c.slice(-1)[0];var H=Q(T,o),O=c[H-1],J=c[H],re=o[H-1];return ne([O,J],(T-re)*ie(re,o[H]))}function me(c,o,T,H){if(H===100)return H;var O=Q(H,c),J=c[O-1],re=c[O];return T?H-J>(re-J)/2?re:J:o[O-1]?c[O-1]+p(H-c[O-1],o[O-1]):H}var G,le;n.PipsMode=void 0,(le=n.PipsMode||(n.PipsMode={})).Range="range",le.Steps="steps",le.Positions="positions",le.Count="count",le.Values="values",n.PipsType=void 0,(G=n.PipsType||(n.PipsType={}))[G.None=-1]="None",G[G.NoValue=0]="NoValue",G[G.LargeValue=1]="LargeValue",G[G.SmallValue=2]="SmallValue";var ve=function(){function c(o,T,H){var O;this.xPct=[],this.xVal=[],this.xSteps=[],this.xNumSteps=[],this.xHighestCompleteStep=[],this.xSteps=[H||!1],this.xNumSteps=[!1],this.snap=T;var J=[];for(Object.keys(o).forEach(function(re){J.push([_(o[re]),re])}),J.sort(function(re,ge){return re[0][0]-ge[0][0]}),O=0;O<J.length;O++)this.handleEntryPoint(J[O][1],J[O][0]);for(this.xNumSteps=this.xSteps.slice(0),O=0;O<this.xNumSteps.length;O++)this.handleStepPoint(O,this.xNumSteps[O])}return c.prototype.getDistance=function(o){for(var T=[],H=0;H<this.xNumSteps.length-1;H++)T[H]=R(this.xVal,o,H);return T},c.prototype.getAbsoluteDistance=function(o,T,H){var O,J=0;if(o<this.xPct[this.xPct.length-1])for(;o>this.xPct[J+1];)J++;else o===this.xPct[this.xPct.length-1]&&(J=this.xPct.length-2);H||o!==this.xPct[J+1]||J++,T===null&&(T=[]);var re=1,ge=T[J],Se=0,pt=0,Ue=0,te=0;for(O=H?(o-this.xPct[J])/(this.xPct[J+1]-this.xPct[J]):(this.xPct[J+1]-o)/(this.xPct[J+1]-this.xPct[J]);ge>0;)Se=this.xPct[J+1+te]-this.xPct[J+te],T[J+te]*re+100-100*O>100?(pt=Se*O,re=(ge-100*O)/T[J+te],O=1):(pt=T[J+te]*Se/100*re,re=0),H?(Ue-=pt,this.xPct.length+te>=1&&te--):(Ue+=pt,this.xPct.length-te>=1&&te++),ge=T[J+te]*re;return o+Ue},c.prototype.toStepping=function(o){return o=j(this.xVal,this.xPct,o)},c.prototype.fromStepping=function(o){return ce(this.xVal,this.xPct,o)},c.prototype.getStep=function(o){return o=me(this.xPct,this.xSteps,this.snap,o)},c.prototype.getDefaultStep=function(o,T,H){var O=Q(o,this.xPct);return(o===100||T&&o===this.xPct[O-1])&&(O=Math.max(O-1,1)),(this.xVal[O]-this.xVal[O-1])/H},c.prototype.getNearbySteps=function(o){var T=Q(o,this.xPct);return{stepBefore:{startValue:this.xVal[T-2],step:this.xNumSteps[T-2],highestStep:this.xHighestCompleteStep[T-2]},thisStep:{startValue:this.xVal[T-1],step:this.xNumSteps[T-1],highestStep:this.xHighestCompleteStep[T-1]},stepAfter:{startValue:this.xVal[T],step:this.xNumSteps[T],highestStep:this.xHighestCompleteStep[T]}}},c.prototype.countStepDecimals=function(){var o=this.xNumSteps.map(C);return Math.max.apply(null,o)},c.prototype.hasNoSize=function(){return this.xVal[0]===this.xVal[this.xVal.length-1]},c.prototype.convert=function(o){return this.getStep(this.toStepping(o))},c.prototype.handleEntryPoint=function(o,T){var H;if(!b(H=o==="min"?0:o==="max"?100:parseFloat(o))||!b(T[0]))throw new Error("noUiSlider: 'range' value isn't numeric.");this.xPct.push(H),this.xVal.push(T[0]);var O=Number(T[1]);H?this.xSteps.push(!isNaN(O)&&O):isNaN(O)||(this.xSteps[0]=O),this.xHighestCompleteStep.push(0)},c.prototype.handleStepPoint=function(o,T){if(T)if(this.xVal[o]!==this.xVal[o+1]){this.xSteps[o]=R([this.xVal[o],this.xVal[o+1]],T,0)/ie(this.xPct[o],this.xPct[o+1]);var H=(this.xVal[o+1]-this.xVal[o])/this.xNumSteps[o],O=Math.ceil(Number(H.toFixed(3))-1),J=this.xVal[o]+this.xNumSteps[o]*O;this.xHighestCompleteStep[o]=J}else this.xSteps[o]=this.xHighestCompleteStep[o]=this.xVal[o]},c}(),fe={to:function(c){return c===void 0?"":c.toFixed(2)},from:Number},Ee={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},Ce={tooltips:".__tooltips",aria:".__aria"};function Oe(c,o){if(!b(o))throw new Error("noUiSlider: 'step' is not numeric.");c.singleStep=o}function Fe(c,o){if(!b(o))throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");c.keyboardPageMultiplier=o}function lt(c,o){if(!b(o))throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");c.keyboardMultiplier=o}function dt(c,o){if(!b(o))throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");c.keyboardDefaultStep=o}function De(c,o){if(typeof o!="object"||Array.isArray(o))throw new Error("noUiSlider: 'range' is not an object.");if(o.min===void 0||o.max===void 0)throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");c.spectrum=new ve(o,c.snap||!1,c.singleStep)}function B(c,o){if(o=_(o),!Array.isArray(o)||!o.length)throw new Error("noUiSlider: 'start' option is incorrect.");c.handles=o.length,c.start=o}function _e(c,o){if(typeof o!="boolean")throw new Error("noUiSlider: 'snap' option must be a boolean.");c.snap=o}function sn(c,o){if(typeof o!="boolean")throw new Error("noUiSlider: 'animate' option must be a boolean.");c.animate=o}function Ct(c,o){if(typeof o!="number")throw new Error("noUiSlider: 'animationDuration' option must be a number.");c.animationDuration=o}function on(c,o){var T,H=[!1];if(o==="lower"?o=[!0,!1]:o==="upper"&&(o=[!1,!0]),o===!0||o===!1){for(T=1;T<c.handles;T++)H.push(o);H.push(!1)}else{if(!Array.isArray(o)||!o.length||o.length!==c.handles+1)throw new Error("noUiSlider: 'connect' option doesn't match handle count.");H=o}c.connect=H}function ln(c,o){switch(o){case"horizontal":c.ort=0;break;case"vertical":c.ort=1;break;default:throw new Error("noUiSlider: 'orientation' option is invalid.")}}function f(c,o){if(!b(o))throw new Error("noUiSlider: 'margin' option must be numeric.");o!==0&&(c.margin=c.spectrum.getDistance(o))}function h(c,o){if(!b(o))throw new Error("noUiSlider: 'limit' option must be numeric.");if(c.limit=c.spectrum.getDistance(o),!c.limit||c.handles<2)throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.")}function x(c,o){var T;if(!b(o)&&!Array.isArray(o))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(o)&&o.length!==2&&!b(o[0])&&!b(o[1]))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(o!==0){for(Array.isArray(o)||(o=[o,o]),c.padding=[c.spectrum.getDistance(o[0]),c.spectrum.getDistance(o[1])],T=0;T<c.spectrum.xNumSteps.length-1;T++)if(c.padding[0][T]<0||c.padding[1][T]<0)throw new Error("noUiSlider: 'padding' option must be a positive number(s).");var H=o[0]+o[1],O=c.spectrum.xVal[0];if(H/(c.spectrum.xVal[c.spectrum.xVal.length-1]-O)>1)throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.")}}function E(c,o){switch(o){case"ltr":c.dir=0;break;case"rtl":c.dir=1;break;default:throw new Error("noUiSlider: 'direction' option was not recognized.")}}function w(c,o){if(typeof o!="string")throw new Error("noUiSlider: 'behaviour' must be a string containing options.");var T=o.indexOf("tap")>=0,H=o.indexOf("drag")>=0,O=o.indexOf("fixed")>=0,J=o.indexOf("snap")>=0,re=o.indexOf("hover")>=0,ge=o.indexOf("unconstrained")>=0,Se=o.indexOf("drag-all")>=0,pt=o.indexOf("smooth-steps")>=0;if(O){if(c.handles!==2)throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");f(c,c.start[1]-c.start[0])}if(ge&&(c.margin||c.limit))throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");c.events={tap:T||J,drag:H,dragAll:Se,smoothSteps:pt,fixed:O,snap:J,hover:re,unconstrained:ge}}function N(c,o){if(o!==!1)if(o===!0||s(o)){c.tooltips=[];for(var T=0;T<c.handles;T++)c.tooltips.push(o)}else{if((o=_(o)).length!==c.handles)throw new Error("noUiSlider: must pass a formatter for all handles.");o.forEach(function(H){if(typeof H!="boolean"&&!s(H))throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.")}),c.tooltips=o}}function I(c,o){if(o.length!==c.handles)throw new Error("noUiSlider: must pass a attributes for all handles.");c.handleAttributes=o}function A(c,o){if(!s(o))throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");c.ariaFormat=o}function k(c,o){if(!r(o))throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");c.format=o}function P(c,o){if(typeof o!="boolean")throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");c.keyboardSupport=o}function W(c,o){c.documentElement=o}function $(c,o){if(typeof o!="string"&&o!==!1)throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");c.cssPrefix=o}function Y(c,o){if(typeof o!="object")throw new Error("noUiSlider: 'cssClasses' must be an object.");typeof c.cssPrefix=="string"?(c.cssClasses={},Object.keys(o).forEach(function(T){c.cssClasses[T]=c.cssPrefix+o[T]})):c.cssClasses=o}function Z(c){var o={margin:null,limit:null,padding:null,animate:!0,animationDuration:300,ariaFormat:fe,format:fe},T={step:{r:!1,t:Oe},keyboardPageMultiplier:{r:!1,t:Fe},keyboardMultiplier:{r:!1,t:lt},keyboardDefaultStep:{r:!1,t:dt},start:{r:!0,t:B},connect:{r:!0,t:on},direction:{r:!0,t:E},snap:{r:!1,t:_e},animate:{r:!1,t:sn},animationDuration:{r:!1,t:Ct},range:{r:!0,t:De},orientation:{r:!1,t:ln},margin:{r:!1,t:f},limit:{r:!1,t:h},padding:{r:!1,t:x},behaviour:{r:!0,t:w},ariaFormat:{r:!1,t:A},format:{r:!1,t:k},tooltips:{r:!1,t:N},keyboardSupport:{r:!0,t:P},documentElement:{r:!1,t:W},cssPrefix:{r:!0,t:$},cssClasses:{r:!0,t:Y},handleAttributes:{r:!1,t:I}},H={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:Ee,keyboardPageMultiplier:5,keyboardMultiplier:1,keyboardDefaultStep:10};c.format&&!c.ariaFormat&&(c.ariaFormat=c.format),Object.keys(T).forEach(function(Se){if(l(c[Se])||H[Se]!==void 0)T[Se].t(o,l(c[Se])?c[Se]:H[Se]);else if(T[Se].r)throw new Error("noUiSlider: '"+Se+"' is required.")}),o.pips=c.pips;var O=document.createElement("div"),J=O.style.msTransform!==void 0,re=O.style.transform!==void 0;o.transformRule=re?"transform":J?"msTransform":"webkitTransform";var ge=[["left","top"],["right","bottom"]];return o.style=ge[o.dir][o.ort],o}function ae(c,o,T){var H,O,J,re,ge,Se=z(),pt=de()&&X(),Ue=c,te=o.spectrum,ht=[],Ne=[],Je=[],hr=0,gt={},zt=c.ownerDocument,An=o.documentElement||zt.documentElement,Nn=zt.body,Jo=zt.dir==="rtl"||o.ort===1?0:100;function mt(u,g){var v=zt.createElement("div");return g&&F(v,g),u.appendChild(v),v}function Xo(u,g){var v=mt(u,o.cssClasses.origin),S=mt(v,o.cssClasses.handle);if(mt(S,o.cssClasses.touchArea),S.setAttribute("data-handle",String(g)),o.keyboardSupport&&(S.setAttribute("tabindex","0"),S.addEventListener("keydown",function(L){return ul(L,g)})),o.handleAttributes!==void 0){var D=o.handleAttributes[g];Object.keys(D).forEach(function(L){S.setAttribute(L,D[L])})}return S.setAttribute("role","slider"),S.setAttribute("aria-orientation",o.ort?"vertical":"horizontal"),g===0?F(S,o.cssClasses.handleLower):g===o.handles-1&&F(S,o.cssClasses.handleUpper),v}function _s(u,g){return!!g&&mt(u,o.cssClasses.connect)}function Zo(u,g){var v=mt(g,o.cssClasses.connects);O=[],(J=[]).push(_s(v,u[0]));for(var S=0;S<o.handles;S++)O.push(Xo(g,S)),Je[S]=S,J.push(_s(v,u[S+1]))}function Qo(u){return F(u,o.cssClasses.target),o.dir===0?F(u,o.cssClasses.ltr):F(u,o.cssClasses.rtl),o.ort===0?F(u,o.cssClasses.horizontal):F(u,o.cssClasses.vertical),F(u,getComputedStyle(u).direction==="rtl"?o.cssClasses.textDirectionRtl:o.cssClasses.textDirectionLtr),mt(u,o.cssClasses.base)}function Go(u,g){return!(!o.tooltips||!o.tooltips[g])&&mt(u.firstChild,o.cssClasses.tooltip)}function Cs(){return Ue.hasAttribute("disabled")}function gr(u){return O[u].hasAttribute("disabled")}function mr(){ge&&(an("update"+Ce.tooltips),ge.forEach(function(u){u&&i(u)}),ge=null)}function ws(){mr(),ge=O.map(Go),_r("update"+Ce.tooltips,function(u,g,v){if(ge&&o.tooltips&&ge[g]!==!1){var S=u[g];o.tooltips[g]!==!0&&(S=o.tooltips[g].to(v[g])),ge[g].innerHTML=S}})}function el(){an("update"+Ce.aria),_r("update"+Ce.aria,function(u,g,v,S,D){Je.forEach(function(L){var se=O[L],V=Mn(Ne,L,0,!0,!0,!0),Le=Mn(Ne,L,100,!0,!0,!0),Me=D[L],we=String(o.ariaFormat.to(v[L]));V=te.fromStepping(V).toFixed(1),Le=te.fromStepping(Le).toFixed(1),Me=te.fromStepping(Me).toFixed(1),se.children[0].setAttribute("aria-valuemin",V),se.children[0].setAttribute("aria-valuemax",Le),se.children[0].setAttribute("aria-valuenow",Me),se.children[0].setAttribute("aria-valuetext",we)})})}function tl(u){if(u.mode===n.PipsMode.Range||u.mode===n.PipsMode.Steps)return te.xVal;if(u.mode===n.PipsMode.Count){if(u.values<2)throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");for(var g=u.values-1,v=100/g,S=[];g--;)S[g]=g*v;return S.push(100),Es(S,u.stepped)}return u.mode===n.PipsMode.Positions?Es(u.values,u.stepped):u.mode===n.PipsMode.Values?u.stepped?u.values.map(function(D){return te.fromStepping(te.getStep(te.toStepping(D)))}):u.values:[]}function Es(u,g){return u.map(function(v){return te.fromStepping(g?te.getStep(v):v)})}function nl(u){function g(Me,we){return Number((Me+we).toFixed(7))}var v=tl(u),S={},D=te.xVal[0],L=te.xVal[te.xVal.length-1],se=!1,V=!1,Le=0;return(v=d(v.slice().sort(function(Me,we){return Me-we})))[0]!==D&&(v.unshift(D),se=!0),v[v.length-1]!==L&&(v.push(L),V=!0),v.forEach(function(Me,we){var Ae,xe,je,We,Ie,ks,Er,Ls,Is,Ds,Sr=Me,Kt=v[we+1],Us=u.mode===n.PipsMode.Steps;for(Us&&(Ae=te.xNumSteps[we]),Ae||(Ae=Kt-Sr),Kt===void 0&&(Kt=Sr),Ae=Math.max(Ae,1e-7),xe=Sr;xe<=Kt;xe=g(xe,Ae)){for(Ls=(Ie=(We=te.toStepping(xe))-Le)/(u.density||1),Ds=Ie/(Is=Math.round(Ls)),je=1;je<=Is;je+=1)S[(ks=Le+je*Ds).toFixed(5)]=[te.fromStepping(ks),0];Er=v.indexOf(xe)>-1?n.PipsType.LargeValue:Us?n.PipsType.SmallValue:n.PipsType.NoValue,!we&&se&&xe!==Kt&&(Er=0),xe===Kt&&V||(S[We.toFixed(5)]=[xe,Er]),Le=We}}),S}function rl(u,g,v){var S,D,L=zt.createElement("div"),se=((S={})[n.PipsType.None]="",S[n.PipsType.NoValue]=o.cssClasses.valueNormal,S[n.PipsType.LargeValue]=o.cssClasses.valueLarge,S[n.PipsType.SmallValue]=o.cssClasses.valueSub,S),V=((D={})[n.PipsType.None]="",D[n.PipsType.NoValue]=o.cssClasses.markerNormal,D[n.PipsType.LargeValue]=o.cssClasses.markerLarge,D[n.PipsType.SmallValue]=o.cssClasses.markerSub,D),Le=[o.cssClasses.valueHorizontal,o.cssClasses.valueVertical],Me=[o.cssClasses.markerHorizontal,o.cssClasses.markerVertical];function we(xe,je){var We=je===o.cssClasses.value,Ie=We?se:V;return je+" "+(We?Le:Me)[o.ort]+" "+Ie[xe]}function Ae(xe,je,We){if((We=g?g(je,We):We)!==n.PipsType.None){var Ie=mt(L,!1);Ie.className=we(We,o.cssClasses.marker),Ie.style[o.style]=xe+"%",We>n.PipsType.NoValue&&((Ie=mt(L,!1)).className=we(We,o.cssClasses.value),Ie.setAttribute("data-value",String(je)),Ie.style[o.style]=xe+"%",Ie.innerHTML=String(v.to(je)))}}return F(L,o.cssClasses.pips),F(L,o.ort===0?o.cssClasses.pipsHorizontal:o.cssClasses.pipsVertical),Object.keys(u).forEach(function(xe){Ae(xe,u[xe][0],u[xe][1])}),L}function vr(){re&&(i(re),re=null)}function br(u){vr();var g=nl(u),v=u.filter,S=u.format||{to:function(D){return String(Math.round(D))}};return re=Ue.appendChild(rl(g,v,S))}function Ss(){var u=H.getBoundingClientRect(),g="offset"+["Width","Height"][o.ort];return o.ort===0?u.width||H[g]:u.height||H[g]}function kt(u,g,v,S){var D=function(se){var V=sl(se,S.pageOffset,S.target||g);return!!V&&!(Cs()&&!S.doNotReject)&&!(q(Ue,o.cssClasses.tap)&&!S.doNotReject)&&!(u===Se.start&&V.buttons!==void 0&&V.buttons>1)&&(!S.hover||!V.buttons)&&(pt||V.preventDefault(),V.calcPoint=V.points[o.ort],void v(V,S))},L=[];return u.split(" ").forEach(function(se){g.addEventListener(se,D,!!pt&&{passive:!0}),L.push([se,D])}),L}function sl(u,g,v){var S=u.type.indexOf("touch")===0,D=u.type.indexOf("mouse")===0,L=u.type.indexOf("pointer")===0,se=0,V=0;if(u.type.indexOf("MSPointer")===0&&(L=!0),u.type==="mousedown"&&!u.buttons&&!u.touches)return!1;if(S){var Le=function(Ae){var xe=Ae.target;return xe===v||v.contains(xe)||u.composed&&u.composedPath().shift()===v};if(u.type==="touchstart"){var Me=Array.prototype.filter.call(u.touches,Le);if(Me.length>1)return!1;se=Me[0].pageX,V=Me[0].pageY}else{var we=Array.prototype.find.call(u.changedTouches,Le);if(!we)return!1;se=we.pageX,V=we.pageY}}return g=g||ue(zt),(D||L)&&(se=u.clientX+g.x,V=u.clientY+g.y),u.pageOffset=g,u.points=[se,V],u.cursor=D||L,u}function Ps(u){var g=100*(u-m(H,o.ort))/Ss();return g=M(g),o.dir?100-g:g}function il(u){var g=100,v=!1;return O.forEach(function(S,D){if(!gr(D)){var L=Ne[D],se=Math.abs(L-u);(se<g||se<=g&&u>L||se===100&&g===100)&&(v=D,g=se)}}),v}function ol(u,g){u.type==="mouseout"&&u.target.nodeName==="HTML"&&u.relatedTarget===null&&yr(u,g)}function ll(u,g){if(navigator.appVersion.indexOf("MSIE 9")===-1&&u.buttons===0&&g.buttonsProperty!==0)return yr(u,g);var v=(o.dir?-1:1)*(u.calcPoint-g.startCalcPoint);Ts(v>0,100*v/g.baseSize,g.locations,g.handleNumbers,g.connect)}function yr(u,g){g.handle&&(K(g.handle,o.cssClasses.active),hr-=1),g.listeners.forEach(function(v){An.removeEventListener(v[0],v[1])}),hr===0&&(K(Ue,o.cssClasses.drag),wr(),u.cursor&&(Nn.style.cursor="",Nn.removeEventListener("selectstart",a))),o.events.smoothSteps&&(g.handleNumbers.forEach(function(v){Lt(v,Ne[v],!0,!0,!1,!1)}),g.handleNumbers.forEach(function(v){ke("update",v)})),g.handleNumbers.forEach(function(v){ke("change",v),ke("set",v),ke("end",v)})}function xr(u,g){if(!g.handleNumbers.some(gr)){var v;g.handleNumbers.length===1&&(v=O[g.handleNumbers[0]].children[0],hr+=1,F(v,o.cssClasses.active)),u.stopPropagation();var S=[],D=kt(Se.move,An,ll,{target:u.target,handle:v,connect:g.connect,listeners:S,startCalcPoint:u.calcPoint,baseSize:Ss(),pageOffset:u.pageOffset,handleNumbers:g.handleNumbers,buttonsProperty:u.buttons,locations:Ne.slice()}),L=kt(Se.end,An,yr,{target:u.target,handle:v,listeners:S,doNotReject:!0,handleNumbers:g.handleNumbers}),se=kt("mouseout",An,ol,{target:u.target,handle:v,listeners:S,doNotReject:!0,handleNumbers:g.handleNumbers});S.push.apply(S,D.concat(L,se)),u.cursor&&(Nn.style.cursor=getComputedStyle(u.target).cursor,O.length>1&&F(Ue,o.cssClasses.drag),Nn.addEventListener("selectstart",a,!1)),g.handleNumbers.forEach(function(V){ke("start",V)})}}function al(u){u.stopPropagation();var g=Ps(u.calcPoint),v=il(g);v!==!1&&(o.events.snap||y(Ue,o.cssClasses.tap,o.animationDuration),Lt(v,g,!0,!0),wr(),ke("slide",v,!0),ke("update",v,!0),o.events.snap?xr(u,{handleNumbers:[v]}):(ke("change",v,!0),ke("set",v,!0)))}function cl(u){var g=Ps(u.calcPoint),v=te.getStep(g),S=te.fromStepping(v);Object.keys(gt).forEach(function(D){D.split(".")[0]==="hover"&&gt[D].forEach(function(L){L.call(Fn,S)})})}function ul(u,g){if(Cs()||gr(g))return!1;var v=["Left","Right"],S=["Down","Up"],D=["PageDown","PageUp"],L=["Home","End"];o.dir&&!o.ort?v.reverse():o.ort&&!o.dir&&(S.reverse(),D.reverse());var se,V=u.key.replace("Arrow",""),Le=V===D[0],Me=V===D[1],we=V===S[0]||V===v[0]||Le,Ae=V===S[1]||V===v[1]||Me,xe=V===L[0],je=V===L[1];if(!(we||Ae||xe||je))return!0;if(u.preventDefault(),Ae||we){var We=we?0:1,Ie=Fs(g)[We];if(Ie===null)return!1;Ie===!1&&(Ie=te.getDefaultStep(Ne[g],we,o.keyboardDefaultStep)),Ie*=Me||Le?o.keyboardPageMultiplier:o.keyboardMultiplier,Ie=Math.max(Ie,1e-7),Ie*=we?-1:1,se=ht[g]+Ie}else se=je?o.spectrum.xVal[o.spectrum.xVal.length-1]:o.spectrum.xVal[0];return Lt(g,te.toStepping(se),!0,!0),ke("slide",g),ke("update",g),ke("change",g),ke("set",g),!1}function fl(u){u.fixed||O.forEach(function(g,v){kt(Se.start,g.children[0],xr,{handleNumbers:[v]})}),u.tap&&kt(Se.start,H,al,{}),u.hover&&kt(Se.move,H,cl,{hover:!0}),u.drag&&J.forEach(function(g,v){if(g!==!1&&v!==0&&v!==J.length-1){var S=O[v-1],D=O[v],L=[g],se=[S,D],V=[v-1,v];F(g,o.cssClasses.draggable),u.fixed&&(L.push(S.children[0]),L.push(D.children[0])),u.dragAll&&(se=O,V=Je),L.forEach(function(Le){kt(Se.start,Le,xr,{handles:se,handleNumbers:V,connect:g})})}})}function _r(u,g){gt[u]=gt[u]||[],gt[u].push(g),u.split(".")[0]==="update"&&O.forEach(function(v,S){ke("update",S)})}function dl(u){return u===Ce.aria||u===Ce.tooltips}function an(u){var g=u&&u.split(".")[0],v=g?u.substring(g.length):u;Object.keys(gt).forEach(function(S){var D=S.split(".")[0],L=S.substring(D.length);g&&g!==D||v&&v!==L||dl(L)&&v!==L||delete gt[S]})}function ke(u,g,v){Object.keys(gt).forEach(function(S){var D=S.split(".")[0];u===D&&gt[S].forEach(function(L){L.call(Fn,ht.map(o.format.to),g,ht.slice(),v||!1,Ne.slice(),Fn)})})}function Mn(u,g,v,S,D,L,se){var V;return O.length>1&&!o.events.unconstrained&&(S&&g>0&&(V=te.getAbsoluteDistance(u[g-1],o.margin,!1),v=Math.max(v,V)),D&&g<O.length-1&&(V=te.getAbsoluteDistance(u[g+1],o.margin,!0),v=Math.min(v,V))),O.length>1&&o.limit&&(S&&g>0&&(V=te.getAbsoluteDistance(u[g-1],o.limit,!1),v=Math.min(v,V)),D&&g<O.length-1&&(V=te.getAbsoluteDistance(u[g+1],o.limit,!0),v=Math.max(v,V))),o.padding&&(g===0&&(V=te.getAbsoluteDistance(0,o.padding[0],!1),v=Math.max(v,V)),g===O.length-1&&(V=te.getAbsoluteDistance(100,o.padding[1],!0),v=Math.min(v,V))),se||(v=te.getStep(v)),!((v=M(v))===u[g]&&!L)&&v}function Cr(u,g){var v=o.ort;return(v?g:u)+", "+(v?u:g)}function Ts(u,g,v,S,D){var L=v.slice(),se=S[0],V=o.events.smoothSteps,Le=[!u,u],Me=[u,!u];S=S.slice(),u&&S.reverse(),S.length>1?S.forEach(function(Ae,xe){var je=Mn(L,Ae,L[Ae]+g,Le[xe],Me[xe],!1,V);je===!1?g=0:(g=je-L[Ae],L[Ae]=je)}):Le=Me=[!0];var we=!1;S.forEach(function(Ae,xe){we=Lt(Ae,v[Ae]+g,Le[xe],Me[xe],!1,V)||we}),we&&(S.forEach(function(Ae){ke("update",Ae),ke("slide",Ae)}),D!=null&&ke("drag",se))}function As(u,g){return o.dir?100-u-g:u}function pl(u,g){Ne[u]=g,ht[u]=te.fromStepping(g);var v="translate("+Cr(As(g,0)-Jo+"%","0")+")";O[u].style[o.transformRule]=v,Ns(u),Ns(u+1)}function wr(){Je.forEach(function(u){var g=Ne[u]>50?-1:1,v=3+(O.length+g*u);O[u].style.zIndex=String(v)})}function Lt(u,g,v,S,D,L){return D||(g=Mn(Ne,u,g,v,S,!1,L)),g!==!1&&(pl(u,g),!0)}function Ns(u){if(J[u]){var g=0,v=100;u!==0&&(g=Ne[u-1]),u!==J.length-1&&(v=Ne[u]);var S=v-g,D="translate("+Cr(As(g,S)+"%","0")+")",L="scale("+Cr(S/100,"1")+")";J[u].style[o.transformRule]=D+" "+L}}function Ms(u,g){return u===null||u===!1||u===void 0?Ne[g]:(typeof u=="number"&&(u=String(u)),(u=o.format.from(u))!==!1&&(u=te.toStepping(u)),u===!1||isNaN(u)?Ne[g]:u)}function On(u,g,v){var S=_(u),D=Ne[0]===void 0;g=g===void 0||g,o.animate&&!D&&y(Ue,o.cssClasses.tap,o.animationDuration),Je.forEach(function(V){Lt(V,Ms(S[V],V),!0,!1,v)});var L=Je.length===1?0:1;if(D&&te.hasNoSize()&&(v=!0,Ne[0]=0,Je.length>1)){var se=100/(Je.length-1);Je.forEach(function(V){Ne[V]=V*se})}for(;L<Je.length;++L)Je.forEach(function(V){Lt(V,Ne[V],!0,!0,v)});wr(),Je.forEach(function(V){ke("update",V),S[V]!==null&&g&&ke("set",V)})}function hl(u){On(o.start,u)}function gl(u,g,v,S){if(!((u=Number(u))>=0&&u<Je.length))throw new Error("noUiSlider: invalid handle number, got: "+u);Lt(u,Ms(g,u),!0,!0,S),ke("update",u),v&&ke("set",u)}function Os(u){if(u===void 0&&(u=!1),u)return ht.length===1?ht[0]:ht.slice(0);var g=ht.map(o.format.to);return g.length===1?g[0]:g}function ml(){for(an(Ce.aria),an(Ce.tooltips),Object.keys(o.cssClasses).forEach(function(u){K(Ue,o.cssClasses[u])});Ue.firstChild;)Ue.removeChild(Ue.firstChild);delete Ue.noUiSlider}function Fs(u){var g=Ne[u],v=te.getNearbySteps(g),S=ht[u],D=v.thisStep.step,L=null;if(o.snap)return[S-v.stepBefore.startValue||null,v.stepAfter.startValue-S||null];D!==!1&&S+D>v.stepAfter.startValue&&(D=v.stepAfter.startValue-S),L=S>v.thisStep.startValue?v.thisStep.step:v.stepBefore.step!==!1&&S-v.stepBefore.highestStep,g===100?D=null:g===0&&(L=null);var se=te.countStepDecimals();return D!==null&&D!==!1&&(D=Number(D.toFixed(se))),L!==null&&L!==!1&&(L=Number(L.toFixed(se))),[L,D]}function vl(){return Je.map(Fs)}function bl(u,g){var v=Os(),S=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];S.forEach(function(L){u[L]!==void 0&&(T[L]=u[L])});var D=Z(T);S.forEach(function(L){u[L]!==void 0&&(o[L]=D[L])}),te=D.spectrum,o.margin=D.margin,o.limit=D.limit,o.padding=D.padding,o.pips?br(o.pips):vr(),o.tooltips?ws():mr(),Ne=[],On(l(u.start)?u.start:v,g)}function yl(){H=Qo(Ue),Zo(o.connect,H),fl(o.events),On(o.start),o.pips&&br(o.pips),o.tooltips&&ws(),el()}yl();var Fn={destroy:ml,steps:vl,on:_r,off:an,get:Os,set:On,setHandle:gl,reset:hl,__moveHandles:function(u,g,v){Ts(u,g,Ne,v)},options:T,updateOptions:bl,target:Ue,removePips:vr,removeTooltips:mr,getPositions:function(){return Ne.slice()},getTooltips:function(){return ge},getOrigins:function(){return O},pips:br};return Fn}function ye(c,o){if(!c||!c.nodeName)throw new Error("noUiSlider: create requires a single element, got: "+c);if(c.noUiSlider)throw new Error("noUiSlider: Slider was already initialized.");var T=ae(c,Z(o),o);return c.noUiSlider=T,T}var be={__spectrum:ve,cssClasses:Ee,create:ye};n.create=ye,n.cssClasses=Ee,n.default=be,Object.defineProperty(n,"__esModule",{value:!0})})(t)}));function Pi(e,t){if(!Array.isArray(e)||!Array.isArray(t))return!1;const n=t.slice().sort();return e.length===t.length&&e.slice().sort().every(function(r,s){return r===n[s]})}var Ti={name:"Slider",emits:["input","update:modelValue","start","slide","drag","update","change","set","end"],props:{value:{validator:function(e){return t=>typeof t=="number"||t instanceof Array||t==null||t===!1},required:!1},modelValue:{validator:function(e){return t=>typeof t=="number"||t instanceof Array||t==null||t===!1},required:!1},id:{type:[String,Number],required:!1},disabled:{type:Boolean,required:!1,default:!1},min:{type:Number,required:!1,default:0},max:{type:Number,required:!1,default:100},step:{type:Number,required:!1,default:1},orientation:{type:String,required:!1,default:"horizontal"},direction:{type:String,required:!1,default:"ltr"},tooltips:{type:Boolean,required:!1,default:!0},options:{type:Object,required:!1,default:()=>({})},merge:{type:Number,required:!1,default:-1},format:{type:[Object,Function,Boolean],required:!1,default:null},classes:{type:Object,required:!1,default:()=>({})},showTooltip:{type:String,required:!1,default:"always"},tooltipPosition:{type:String,required:!1,default:null},lazy:{type:Boolean,required:!1,default:!0},ariaLabelledby:{type:String,required:!1,default:void 0},aria:{required:!1,type:Object,default:()=>({})}},setup(e,t){const n=function(l,a,d){const{value:p,modelValue:m,min:b}=jn(l);let y=m&&m.value!==void 0?m:p;const M=Wt(y.value);if(Hn(y.value)&&(y=Wt(b.value)),Array.isArray(y.value)&&y.value.length==0)throw new Error("Slider v-model must not be an empty array");return{value:y,initialValue:M}}(e),r=function(l,a,d){const{classes:p,showTooltip:m,tooltipPosition:b,orientation:y}=jn(l),M=St(()=>({target:"slider-target",focused:"slider-focused",tooltipFocus:"slider-tooltip-focus",tooltipDrag:"slider-tooltip-drag",ltr:"slider-ltr",rtl:"slider-rtl",horizontal:"slider-horizontal",vertical:"slider-vertical",textDirectionRtl:"slider-txt-dir-rtl",textDirectionLtr:"slider-txt-dir-ltr",base:"slider-base",connects:"slider-connects",connect:"slider-connect",origin:"slider-origin",handle:"slider-handle",handleLower:"slider-handle-lower",handleUpper:"slider-handle-upper",touchArea:"slider-touch-area",tooltip:"slider-tooltip",tooltipTop:"slider-tooltip-top",tooltipBottom:"slider-tooltip-bottom",tooltipLeft:"slider-tooltip-left",tooltipRight:"slider-tooltip-right",tooltipHidden:"slider-tooltip-hidden",active:"slider-active",draggable:"slider-draggable",tap:"slider-state-tap",drag:"slider-state-drag",pips:"slider-pips",pipsHorizontal:"slider-pips-horizontal",pipsVertical:"slider-pips-vertical",marker:"slider-marker",markerHorizontal:"slider-marker-horizontal",markerVertical:"slider-marker-vertical",markerNormal:"slider-marker-normal",markerLarge:"slider-marker-large",markerSub:"slider-marker-sub",value:"slider-value",valueHorizontal:"slider-value-horizontal",valueVertical:"slider-value-vertical",valueNormal:"slider-value-normal",valueLarge:"slider-value-large",valueSub:"slider-value-sub",...p.value}));return{classList:St(()=>{const _={...M.value};return Object.keys(_).forEach(C=>{_[C]=Array.isArray(_[C])?_[C].filter(F=>F!==null).join(" "):_[C]}),m.value!=="always"&&(_.target+=` ${m.value==="drag"?_.tooltipDrag:_.tooltipFocus}`),y.value==="horizontal"&&(_.tooltip+=b.value==="bottom"?` ${_.tooltipBottom}`:` ${_.tooltipTop}`),y.value==="vertical"&&(_.tooltip+=b.value==="right"?` ${_.tooltipRight}`:` ${_.tooltipLeft}`),_})}}(e),s=function(l,a,d){const{format:p,step:m}=jn(l),b=d.value,y=d.classList,M=St(()=>p&&p.value?typeof p.value=="function"?{to:p.value}:Si({...p.value}):Si({decimals:m.value>=0?0:2})),_=St(()=>Array.isArray(b.value)?b.value.map(C=>M.value):M.value);return{tooltipFormat:M,tooltipsFormat:_,tooltipsMerge:(C,F,K)=>{var q=getComputedStyle(C).direction==="rtl",ue=C.noUiSlider.options.direction==="rtl",z=C.noUiSlider.options.orientation==="vertical",X=C.noUiSlider.getTooltips(),de=C.noUiSlider.getOrigins();X.forEach(function(ie,R){ie&&de[R].appendChild(ie)}),C.noUiSlider.on("update",function(ie,R,U,ne,Q){var j=[[]],ce=[[]],me=[[]],G=0;X[0]&&(j[0][0]=0,ce[0][0]=Q[0],me[0][0]=M.value.to(parseFloat(ie[0])));for(var le=1;le<ie.length;le++)(!X[le]||ie[le]-ie[le-1]>F)&&(j[++G]=[],me[G]=[],ce[G]=[]),X[le]&&(j[G].push(le),me[G].push(M.value.to(parseFloat(ie[le]))),ce[G].push(Q[le]));j.forEach(function(ve,fe){for(var Ee=ve.length,Ce=0;Ce<Ee;Ce++){var Oe=ve[Ce];if(Ce===Ee-1){var Fe=0;ce[fe].forEach(function(B){Fe+=1e3-B});var lt=z?"bottom":"right",dt=ue?0:Ee-1,De=1e3-ce[fe][dt];Fe=(q&&!z?100:0)+Fe/Ee-De,X[Oe].innerHTML=me[fe].join(K),X[Oe].style.display="block",X[Oe].style[lt]=Fe+"%",y.value.tooltipHidden.split(" ").forEach(B=>{X[Oe].classList.contains(B)&&X[Oe].classList.remove(B)})}else X[Oe].style.display="none",y.value.tooltipHidden.split(" ").forEach(B=>{X[Oe].classList.add(B)})}})})}}}(e,0,{value:n.value,classList:r.classList}),i=function(l,a,d){const{orientation:p,direction:m,tooltips:b,step:y,min:M,max:_,merge:C,id:F,disabled:K,options:q,classes:ue,format:z,lazy:X,ariaLabelledby:de,aria:ie}=jn(l),R=d.value,U=d.initialValue,ne=d.tooltipsFormat,Q=d.tooltipsMerge,j=d.tooltipFormat,ce=d.classList,me=Wt(null),G=Wt(null),le=Wt(!1),ve=St(()=>{let B={cssPrefix:"",cssClasses:ce.value,orientation:p.value,direction:m.value,tooltips:!!b.value&&ne.value,connect:"lower",start:Hn(R.value)?M.value:R.value,range:{min:M.value,max:_.value}};if(y.value>0&&(B.step=y.value),Array.isArray(R.value)&&(B.connect=!0),de&&de.value||ie&&Object.keys(ie.value).length){let _e=Array.isArray(R.value)?R.value:[R.value];B.handleAttributes=_e.map(sn=>Object.assign({},ie.value,de&&de.value?{"aria-labelledby":de.value}:{}))}return z.value&&(B.ariaFormat=j.value),B}),fe=St(()=>{let B={id:F&&F.value?F.value:void 0};return K.value&&(B.disabled=!0),B}),Ee=St(()=>Array.isArray(R.value)),Ce=()=>{let B=G.value.get();return Array.isArray(B)?B.map(_e=>parseFloat(_e)):parseFloat(B)},Oe=function(B){let _e=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1];G.value.set(B,_e)},Fe=B=>{a.emit("input",B),a.emit("update:modelValue",B),a.emit("update",B)},lt=()=>{G.value=Pu.create(me.value,Object.assign({},ve.value,q.value)),b.value&&Ee.value&&C.value>=0&&Q(me.value,C.value," - "),G.value.on("set",()=>{const B=Ce();a.emit("change",B),a.emit("set",B),X.value&&Fe(B)}),G.value.on("update",()=>{if(!le.value)return;const B=Ce();Ee.value&&Pi(R.value,B)||!Ee.value&&R.value==B?a.emit("update",B):X.value||Fe(B)}),G.value.on("start",()=>{a.emit("start",Ce())}),G.value.on("end",()=>{a.emit("end",Ce())}),G.value.on("slide",()=>{a.emit("slide",Ce())}),G.value.on("drag",()=>{a.emit("drag",Ce())}),me.value.querySelectorAll("[data-handle]").forEach(B=>{B.onblur=()=>{me.value&&ce.value.focused.split(" ").forEach(_e=>{me.value.classList.remove(_e)})},B.onfocus=()=>{ce.value.focused.split(" ").forEach(_e=>{me.value.classList.add(_e)})}}),le.value=!0},dt=()=>{G.value.off(),G.value.destroy(),G.value=null},De=(B,_e)=>{le.value=!1,dt(),lt()};return fs(lt),ds(dt),ze(Ee,De,{immediate:!1}),ze(M,De,{immediate:!1}),ze(_,De,{immediate:!1}),ze(y,De,{immediate:!1}),ze(p,De,{immediate:!1}),ze(m,De,{immediate:!1}),ze(b,De,{immediate:!1}),ze(C,De,{immediate:!1}),ze(z,De,{immediate:!1,deep:!0}),ze(q,De,{immediate:!1,deep:!0}),ze(ue,De,{immediate:!1,deep:!0}),ze(R,(B,_e)=>{_e&&(typeof _e=="object"&&typeof B=="object"&&B&&Object.keys(_e)>Object.keys(B)||typeof _e=="object"&&typeof B!="object"||Hn(B))&&De()},{immediate:!1}),ze(R,B=>{if(Hn(B))return void Oe(M.value,!1);let _e=Ce();Ee.value&&!Array.isArray(_e)&&(_e=[_e]),(Ee.value&&!Pi(B,_e)||!Ee.value&&B!=_e)&&Oe(B,!1)},{deep:!0}),{slider:me,slider$:G,isRange:Ee,sliderProps:fe,init:lt,destroy:dt,refresh:De,update:Oe,reset:()=>{Fe(U.value)}}}(e,t,{value:n.value,initialValue:n.initialValue,tooltipFormat:s.tooltipFormat,tooltipsFormat:s.tooltipsFormat,tooltipsMerge:s.tooltipsMerge,classList:r.classList});return{...r,...s,...i}}};Ti.render=function(e,t,n,r,s,i){return ur(),So("div",Ao(e.sliderProps,{ref:"slider"}),null,16)},Ti.__file="src/Slider.vue";const qo=function(){return document.ontouchstart!==null?"click":"touchstart"},Gn="__vue_click_away__",Wo=function(e,t,n){Yo(e);let r=n.context,s=t.value,i=!1;setTimeout(function(){i=!0},0),e[Gn]=function(l){if((!e||!e.contains(l.target))&&s&&i&&typeof s=="function")return s.call(r,l)},document.addEventListener(qo(),e[Gn],!1)},Yo=function(e){document.removeEventListener(qo(),e[Gn],!1),delete e[Gn]},Tu=function(e,t,n){t.value!==t.oldValue&&Wo(e,t,n)},ef={install:function(e){e.directive("click-away",Au)}},Au={mounted:Wo,updated:Tu,unmounted:Yo};function tf(e){return{all:e=e||new Map,on:function(t,n){var r=e.get(t);r?r.push(n):e.set(t,[n])},off:function(t,n){var r=e.get(t);r&&(n?r.splice(r.indexOf(n)>>>0,1):e.set(t,[]))},emit:function(t,n){var r=e.get(t);r&&r.slice().map(function(s){s(n)}),(r=e.get("*"))&&r.slice().map(function(s){s(t,n)})}}}export{Mu as $,ma as A,Ca as B,Gu as C,qu as D,Qu as E,Ge as F,ef as G,tf as H,Wu as I,Nu as J,Ao as K,Ju as L,Xu as M,uc as N,ss as O,St as P,Lu as Q,Qr as R,ft as S,Uo as T,_c as U,No as V,Bn as W,Fu as X,Xa as Y,Ou as Z,gu as _,rt as a,pe as a0,qi as a1,ka as a2,Fa as a3,Ku as a4,Ia as a5,Ve as a6,ku as a7,cr as a8,ju as a9,$u as aa,Ft as ab,Da as ac,Po as b,So as c,qe as d,zu as e,Vu as f,fc as g,Tn as h,Bu as i,Ru as j,Zu as k,Hu as l,Ti as m,rr as n,ur as o,Du as p,jn as q,Uu as r,Wt as s,Ol as t,fs as u,Yu as v,Iu as w,po as x,ze as y,ca as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
