var za=Object.defineProperty;var ja=(e,t,n)=>t in e?za(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var He=(e,t,n)=>(ja(e,typeof t!="symbol"?t+"":t,n),n),Pi=(e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)};var B=(e,t,n)=>(Pi(e,t,"read from private field"),n?n.call(e):t.get(e)),Te=(e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)},It=(e,t,n,i)=>(Pi(e,t,"write to private field"),i?i.call(e,n):t.set(e,n),n);var et=(e,t,n)=>(Pi(e,t,"access private method"),n);var Ie;class oi{constructor(){Te(this,Ie,{})}on(t,n){B(this,Ie)[t]?B(this,Ie)[t].push(n):B(this,Ie)[t]=[n]}off(t,n){if(B(this,Ie)[t])if(typeof n=="function"){const i=B(this,Ie)[t].indexOf(n);if(i===-1)return;B(this,Ie)[t].splice(i,1)}else B(this,Ie)[t]=[]}dispatch(t,n){B(this,Ie)[t]&&B(this,Ie)[t].forEach(function(i){i.call(this,n)})}emit(t,n){return this.dispatch(t,n)}}Ie=new WeakMap;var Pe,Ft,qn;class Va extends oi{constructor(){super(...arguments);Te(this,Ft);Te(this,Pe,{})}call(n,i){for(let r in B(this,Pe))B(this,Pe)[r][n]&&et(this,Ft,qn).call(this,n,B(this,Pe)[r],i)}get(n){return B(this,Pe)[n]}getModules(){return B(this,Pe)}register(n,i){let r;typeof i=="function"?r=new i:r=i,B(this,Pe)[n]=r,this[n]=r,et(this,Ft,qn).call(this,"onRegister",r),this.dispatch("register")}remove(n){let i;if(typeof n=="string"&&(i=n,n=this.get(n)),!i){for(let r in B(this,Pe))if(B(this,Pe)[r]===n){i=r;break}}delete B(this,Pe)[i],delete this[i],et(this,Ft,qn).call(this,"onDestroy",n),this.dispatch("remove")}}Pe=new WeakMap,Ft=new WeakSet,qn=function(n,i,r){!n||!i||!i[n]||(n=i[n],n(r))};mw.require("editor.js");mw.require("css_parser.js");const sf=function(){var e=document.querySelector("#mw-live-edit-editor"),t=function(){var l={};this.on=function(d,f){l[d]?l[d].push(f):l[d]=[f]},this.dispatch=function(d,f){l[d]&&l[d].forEach(function(m){m.call(this,f)})},this.provide=function(d){this.dispatch("change",d.map(function(f){return{label:f,value:f}}))}},n=new t;window.fontFamilyProvider=n;const i=mw.app.get("canvas").getFrame();i.contentWindow.fontFamilyProvider=n;const r=[[{group:{icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5,4V7H10.5V19H13.5V7H19V4H5Z" /></svg>',controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],o=mw.Editor({document:i.contentWindow.document,executionDocument:i.contentWindow.document,actionWindow:i.contentWindow,element:e,mode:"document",notEditableClasses:["module"],regions:".edit",skin:"le2",editMode:"liveedit",controls:null,smallEditor:r,smallEditorPositionX:"left",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:n});e.innerHTML="",e.appendChild(o.wrapper);var s=o.storage.get(o.settings.id+"-small-editor-pinned");typeof s>"u"&&typeof o.smallEditorApi<"u"&&o.smallEditorApi.pin(),mw.app.register("richTextEditor",o),mw.app.register("richTextEditorAPI",o.api)};var $a=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function af(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var so={},qa={get exports(){return so},set exports(e){so=e}};(function(e,t){(function(n,i){e.exports=i()})($a,function(){return function(n){function i(o){if(r[o])return r[o].exports;var s=r[o]={exports:{},id:o,loaded:!1};return n[o].call(s.exports,s,s.exports,i),s.loaded=!0,s.exports}var r={};return i.m=n,i.c=r,i.p="dist/",i(0)}([function(n,i,r){function o(I){return I&&I.__esModule?I:{default:I}}var s=Object.assign||function(I){for(var Y=1;Y<arguments.length;Y++){var de=arguments[Y];for(var Ve in de)Object.prototype.hasOwnProperty.call(de,Ve)&&(I[Ve]=de[Ve])}return I},l=r(1),d=(o(l),r(6)),f=o(d),m=r(7),p=o(m),g=r(8),w=o(g),y=r(9),O=o(y),E=r(10),T=o(E),V=r(11),J=o(V),X=r(14),U=o(X),C=[],S=!1,R={offset:120,delay:0,easing:"ease",duration:400,disable:!1,once:!1,startEvent:"DOMContentLoaded",throttleDelay:99,debounceDelay:50,disableMutationObserver:!1},Q=function(){var I=arguments.length>0&&arguments[0]!==void 0&&arguments[0];if(I&&(S=!0),S)return C=(0,J.default)(C,R),(0,T.default)(C,R.once),C},ee=function(){C=(0,U.default)(),Q()},k=function(){C.forEach(function(I,Y){I.node.removeAttribute("data-aos"),I.node.removeAttribute("data-aos-easing"),I.node.removeAttribute("data-aos-duration"),I.node.removeAttribute("data-aos-delay")})},D=function(I){return I===!0||I==="mobile"&&O.default.mobile()||I==="phone"&&O.default.phone()||I==="tablet"&&O.default.tablet()||typeof I=="function"&&I()===!0},W=function(I){R=s(R,I),C=(0,U.default)();var Y=document.all&&!window.atob;return D(R.disable)||Y?k():(R.disableMutationObserver||w.default.isSupported()||(console.info(`
      aos: MutationObserver is not supported on this browser,
      code mutations observing has been disabled.
      You may have to call "refreshHard()" by yourself.
    `),R.disableMutationObserver=!0),document.querySelector("body").setAttribute("data-aos-easing",R.easing),document.querySelector("body").setAttribute("data-aos-duration",R.duration),document.querySelector("body").setAttribute("data-aos-delay",R.delay),R.startEvent==="DOMContentLoaded"&&["complete","interactive"].indexOf(document.readyState)>-1?Q(!0):R.startEvent==="load"?window.addEventListener(R.startEvent,function(){Q(!0)}):document.addEventListener(R.startEvent,function(){Q(!0)}),window.addEventListener("resize",(0,p.default)(Q,R.debounceDelay,!0)),window.addEventListener("orientationchange",(0,p.default)(Q,R.debounceDelay,!0)),window.addEventListener("scroll",(0,f.default)(function(){(0,T.default)(C,R.once)},R.throttleDelay)),R.disableMutationObserver||w.default.ready("[data-aos]",ee),C)};n.exports={init:W,refresh:Q,refreshHard:ee}},function(n,i){},,,,,function(n,i){(function(r){function o(D,W,I){function Y(G){var Z=Ee,re=Ne;return Ee=Ne=void 0,Se=G,pe=D.apply(re,Z)}function de(G){return Se=G,ue=setTimeout(Ke,W),Re?Y(G):pe}function Ve(G){var Z=G-Ce,re=G-Se,L=W-Z;return Ae?ee(L,ie-re):L}function ye(G){var Z=G-Ce,re=G-Se;return Ce===void 0||Z>=W||Z<0||Ae&&re>=ie}function Ke(){var G=k();return ye(G)?nt(G):void(ue=setTimeout(Ke,Ve(G)))}function nt(G){return ue=void 0,ne&&Ee?Y(G):(Ee=Ne=void 0,pe)}function Je(){ue!==void 0&&clearTimeout(ue),Se=0,Ee=Ce=Ne=ue=void 0}function it(){return ue===void 0?pe:nt(k())}function Me(){var G=k(),Z=ye(G);if(Ee=arguments,Ne=this,Ce=G,Z){if(ue===void 0)return de(Ce);if(Ae)return ue=setTimeout(Ke,W),Y(Ce)}return ue===void 0&&(ue=setTimeout(Ke,W)),pe}var Ee,Ne,ie,pe,ue,Ce,Se=0,Re=!1,Ae=!1,ne=!0;if(typeof D!="function")throw new TypeError(g);return W=m(W)||0,l(I)&&(Re=!!I.leading,Ae="maxWait"in I,ie=Ae?Q(m(I.maxWait)||0,W):ie,ne="trailing"in I?!!I.trailing:ne),Me.cancel=Je,Me.flush=it,Me}function s(D,W,I){var Y=!0,de=!0;if(typeof D!="function")throw new TypeError(g);return l(I)&&(Y="leading"in I?!!I.leading:Y,de="trailing"in I?!!I.trailing:de),o(D,W,{leading:Y,maxWait:W,trailing:de})}function l(D){var W=typeof D>"u"?"undefined":p(D);return!!D&&(W=="object"||W=="function")}function d(D){return!!D&&(typeof D>"u"?"undefined":p(D))=="object"}function f(D){return(typeof D>"u"?"undefined":p(D))=="symbol"||d(D)&&R.call(D)==y}function m(D){if(typeof D=="number")return D;if(f(D))return w;if(l(D)){var W=typeof D.valueOf=="function"?D.valueOf():D;D=l(W)?W+"":W}if(typeof D!="string")return D===0?D:+D;D=D.replace(O,"");var I=T.test(D);return I||V.test(D)?J(D.slice(2),I?2:8):E.test(D)?w:+D}var p=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(D){return typeof D}:function(D){return D&&typeof Symbol=="function"&&D.constructor===Symbol&&D!==Symbol.prototype?"symbol":typeof D},g="Expected a function",w=NaN,y="[object Symbol]",O=/^\s+|\s+$/g,E=/^[-+]0x[0-9a-f]+$/i,T=/^0b[01]+$/i,V=/^0o[0-7]+$/i,J=parseInt,X=(typeof r>"u"?"undefined":p(r))=="object"&&r&&r.Object===Object&&r,U=(typeof self>"u"?"undefined":p(self))=="object"&&self&&self.Object===Object&&self,C=X||U||Function("return this")(),S=Object.prototype,R=S.toString,Q=Math.max,ee=Math.min,k=function(){return C.Date.now()};n.exports=s}).call(i,function(){return this}())},function(n,i){(function(r){function o(k,D,W){function I(ne){var G=Me,Z=Ee;return Me=Ee=void 0,Ce=ne,ie=k.apply(Z,G)}function Y(ne){return Ce=ne,pe=setTimeout(ye,D),Se?I(ne):ie}function de(ne){var G=ne-ue,Z=ne-Ce,re=D-G;return Re?Q(re,Ne-Z):re}function Ve(ne){var G=ne-ue,Z=ne-Ce;return ue===void 0||G>=D||G<0||Re&&Z>=Ne}function ye(){var ne=ee();return Ve(ne)?Ke(ne):void(pe=setTimeout(ye,de(ne)))}function Ke(ne){return pe=void 0,Ae&&Me?I(ne):(Me=Ee=void 0,ie)}function nt(){pe!==void 0&&clearTimeout(pe),Ce=0,Me=ue=Ee=pe=void 0}function Je(){return pe===void 0?ie:Ke(ee())}function it(){var ne=ee(),G=Ve(ne);if(Me=arguments,Ee=this,ue=ne,G){if(pe===void 0)return Y(ue);if(Re)return pe=setTimeout(ye,D),I(ue)}return pe===void 0&&(pe=setTimeout(ye,D)),ie}var Me,Ee,Ne,ie,pe,ue,Ce=0,Se=!1,Re=!1,Ae=!0;if(typeof k!="function")throw new TypeError(p);return D=f(D)||0,s(W)&&(Se=!!W.leading,Re="maxWait"in W,Ne=Re?R(f(W.maxWait)||0,D):Ne,Ae="trailing"in W?!!W.trailing:Ae),it.cancel=nt,it.flush=Je,it}function s(k){var D=typeof k>"u"?"undefined":m(k);return!!k&&(D=="object"||D=="function")}function l(k){return!!k&&(typeof k>"u"?"undefined":m(k))=="object"}function d(k){return(typeof k>"u"?"undefined":m(k))=="symbol"||l(k)&&S.call(k)==w}function f(k){if(typeof k=="number")return k;if(d(k))return g;if(s(k)){var D=typeof k.valueOf=="function"?k.valueOf():k;k=s(D)?D+"":D}if(typeof k!="string")return k===0?k:+k;k=k.replace(y,"");var W=E.test(k);return W||T.test(k)?V(k.slice(2),W?2:8):O.test(k)?g:+k}var m=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(k){return typeof k}:function(k){return k&&typeof Symbol=="function"&&k.constructor===Symbol&&k!==Symbol.prototype?"symbol":typeof k},p="Expected a function",g=NaN,w="[object Symbol]",y=/^\s+|\s+$/g,O=/^[-+]0x[0-9a-f]+$/i,E=/^0b[01]+$/i,T=/^0o[0-7]+$/i,V=parseInt,J=(typeof r>"u"?"undefined":m(r))=="object"&&r&&r.Object===Object&&r,X=(typeof self>"u"?"undefined":m(self))=="object"&&self&&self.Object===Object&&self,U=J||X||Function("return this")(),C=Object.prototype,S=C.toString,R=Math.max,Q=Math.min,ee=function(){return U.Date.now()};n.exports=o}).call(i,function(){return this}())},function(n,i){function r(m){var p=void 0,g=void 0;for(p=0;p<m.length;p+=1)if(g=m[p],g.dataset&&g.dataset.aos||g.children&&r(g.children))return!0;return!1}function o(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}function s(){return!!o()}function l(m,p){var g=window.document,w=o(),y=new w(d);f=p,y.observe(g.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}function d(m){m&&m.forEach(function(p){var g=Array.prototype.slice.call(p.addedNodes),w=Array.prototype.slice.call(p.removedNodes),y=g.concat(w);if(r(y))return f()})}Object.defineProperty(i,"__esModule",{value:!0});var f=function(){};i.default={isSupported:s,ready:l}},function(n,i){function r(g,w){if(!(g instanceof w))throw new TypeError("Cannot call a class as a function")}function o(){return navigator.userAgent||navigator.vendor||window.opera||""}Object.defineProperty(i,"__esModule",{value:!0});var s=function(){function g(w,y){for(var O=0;O<y.length;O++){var E=y[O];E.enumerable=E.enumerable||!1,E.configurable=!0,"value"in E&&(E.writable=!0),Object.defineProperty(w,E.key,E)}}return function(w,y,O){return y&&g(w.prototype,y),O&&g(w,O),w}}(),l=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,d=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,f=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,m=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,p=function(){function g(){r(this,g)}return s(g,[{key:"phone",value:function(){var w=o();return!(!l.test(w)&&!d.test(w.substr(0,4)))}},{key:"mobile",value:function(){var w=o();return!(!f.test(w)&&!m.test(w.substr(0,4)))}},{key:"tablet",value:function(){return this.mobile()&&!this.phone()}}]),g}();i.default=new p},function(n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=function(s,l,d){var f=s.node.getAttribute("data-aos-once");l>s.position?s.node.classList.add("aos-animate"):typeof f<"u"&&(f==="false"||!d&&f!=="true")&&s.node.classList.remove("aos-animate")},o=function(s,l){var d=window.pageYOffset,f=window.innerHeight;s.forEach(function(m,p){r(m,f+d,l)})};i.default=o},function(n,i,r){function o(f){return f&&f.__esModule?f:{default:f}}Object.defineProperty(i,"__esModule",{value:!0});var s=r(12),l=o(s),d=function(f,m){return f.forEach(function(p,g){p.node.classList.add("aos-init"),p.position=(0,l.default)(p.node,m.offset)}),f};i.default=d},function(n,i,r){function o(f){return f&&f.__esModule?f:{default:f}}Object.defineProperty(i,"__esModule",{value:!0});var s=r(13),l=o(s),d=function(f,m){var p=0,g=0,w=window.innerHeight,y={offset:f.getAttribute("data-aos-offset"),anchor:f.getAttribute("data-aos-anchor"),anchorPlacement:f.getAttribute("data-aos-anchor-placement")};switch(y.offset&&!isNaN(y.offset)&&(g=parseInt(y.offset)),y.anchor&&document.querySelectorAll(y.anchor)&&(f=document.querySelectorAll(y.anchor)[0]),p=(0,l.default)(f).top,y.anchorPlacement){case"top-bottom":break;case"center-bottom":p+=f.offsetHeight/2;break;case"bottom-bottom":p+=f.offsetHeight;break;case"top-center":p+=w/2;break;case"bottom-center":p+=w/2+f.offsetHeight;break;case"center-center":p+=w/2+f.offsetHeight/2;break;case"top-top":p+=w;break;case"bottom-top":p+=f.offsetHeight+w;break;case"center-top":p+=f.offsetHeight/2+w}return y.anchorPlacement||y.offset||isNaN(m)||(g=m),p+g};i.default=d},function(n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=function(o){for(var s=0,l=0;o&&!isNaN(o.offsetLeft)&&!isNaN(o.offsetTop);)s+=o.offsetLeft-(o.tagName!="BODY"?o.scrollLeft:0),l+=o.offsetTop-(o.tagName!="BODY"?o.scrollTop:0),o=o.offsetParent;return{top:l,left:s}};i.default=r},function(n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=function(o){return o=o||document.querySelectorAll("[data-aos]"),Array.prototype.map.call(o,function(s){return{node:s}})};i.default=r}])})})(qa);function Ho(e,t){return function(){return e.apply(t,arguments)}}const{toString:Wa}=Object.prototype,{getPrototypeOf:yr}=Object,si=(e=>t=>{const n=Wa.call(t);return e[n]||(e[n]=n.slice(8,-1).toLowerCase())})(Object.create(null)),Xe=e=>(e=e.toLowerCase(),t=>si(t)===e),ai=e=>t=>typeof t===e,{isArray:Ut}=Array,pn=ai("undefined");function Ua(e){return e!==null&&!pn(e)&&e.constructor!==null&&!pn(e.constructor)&&Fe(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const Io=Xe("ArrayBuffer");function Ya(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&Io(e.buffer),t}const Xa=ai("string"),Fe=ai("function"),Po=ai("number"),li=e=>e!==null&&typeof e=="object",Ka=e=>e===!0||e===!1,Wn=e=>{if(si(e)!=="object")return!1;const t=yr(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},Ja=Xe("Date"),Ga=Xe("File"),Za=Xe("Blob"),Qa=Xe("FileList"),el=e=>li(e)&&Fe(e.pipe),tl=e=>{let t;return e&&(typeof FormData=="function"&&e instanceof FormData||Fe(e.append)&&((t=si(e))==="formdata"||t==="object"&&Fe(e.toString)&&e.toString()==="[object FormData]"))},nl=Xe("URLSearchParams"),il=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function bn(e,t,{allOwnKeys:n=!1}={}){if(e===null||typeof e>"u")return;let i,r;if(typeof e!="object"&&(e=[e]),Ut(e))for(i=0,r=e.length;i<r;i++)t.call(null,e[i],i,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),s=o.length;let l;for(i=0;i<s;i++)l=o[i],t.call(null,e[l],l,e)}}function Fo(e,t){t=t.toLowerCase();const n=Object.keys(e);let i=n.length,r;for(;i-- >0;)if(r=n[i],t===r.toLowerCase())return r;return null}const Bo=(()=>typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global)(),zo=e=>!pn(e)&&e!==Bo;function Yi(){const{caseless:e}=zo(this)&&this||{},t={},n=(i,r)=>{const o=e&&Fo(t,r)||r;Wn(t[o])&&Wn(i)?t[o]=Yi(t[o],i):Wn(i)?t[o]=Yi({},i):Ut(i)?t[o]=i.slice():t[o]=i};for(let i=0,r=arguments.length;i<r;i++)arguments[i]&&bn(arguments[i],n);return t}const rl=(e,t,n,{allOwnKeys:i}={})=>(bn(t,(r,o)=>{n&&Fe(r)?e[o]=Ho(r,n):e[o]=r},{allOwnKeys:i}),e),ol=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),sl=(e,t,n,i)=>{e.prototype=Object.create(t.prototype,i),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},al=(e,t,n,i)=>{let r,o,s;const l={};if(t=t||{},e==null)return t;do{for(r=Object.getOwnPropertyNames(e),o=r.length;o-- >0;)s=r[o],(!i||i(s,e,t))&&!l[s]&&(t[s]=e[s],l[s]=!0);e=n!==!1&&yr(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},ll=(e,t,n)=>{e=String(e),(n===void 0||n>e.length)&&(n=e.length),n-=t.length;const i=e.indexOf(t,n);return i!==-1&&i===n},cl=e=>{if(!e)return null;if(Ut(e))return e;let t=e.length;if(!Po(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},ul=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&yr(Uint8Array)),dl=(e,t)=>{const i=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=i.next())&&!r.done;){const o=r.value;t.call(e,o[0],o[1])}},fl=(e,t)=>{let n;const i=[];for(;(n=e.exec(t))!==null;)i.push(n);return i},hl=Xe("HTMLFormElement"),pl=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(n,i,r){return i.toUpperCase()+r}),ao=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),ml=Xe("RegExp"),jo=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),i={};bn(n,(r,o)=>{t(r,o,e)!==!1&&(i[o]=r)}),Object.defineProperties(e,i)},gl=e=>{jo(e,(t,n)=>{if(Fe(e)&&["arguments","caller","callee"].indexOf(n)!==-1)return!1;const i=e[n];if(Fe(i)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")})}})},vl=(e,t)=>{const n={},i=r=>{r.forEach(o=>{n[o]=!0})};return Ut(e)?i(e):i(String(e).split(t)),n},wl=()=>{},bl=(e,t)=>(e=+e,Number.isFinite(e)?e:t),Fi="abcdefghijklmnopqrstuvwxyz",lo="0123456789",Vo={DIGIT:lo,ALPHA:Fi,ALPHA_DIGIT:Fi+Fi.toUpperCase()+lo},yl=(e=16,t=Vo.ALPHA_DIGIT)=>{let n="";const{length:i}=t;for(;e--;)n+=t[Math.random()*i|0];return n};function _l(e){return!!(e&&Fe(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const xl=e=>{const t=new Array(10),n=(i,r)=>{if(li(i)){if(t.indexOf(i)>=0)return;if(!("toJSON"in i)){t[r]=i;const o=Ut(i)?[]:{};return bn(i,(s,l)=>{const d=n(s,r+1);!pn(d)&&(o[l]=d)}),t[r]=void 0,o}}return i};return n(e,0)},El=Xe("AsyncFunction"),Cl=e=>e&&(li(e)||Fe(e))&&Fe(e.then)&&Fe(e.catch),x={isArray:Ut,isArrayBuffer:Io,isBuffer:Ua,isFormData:tl,isArrayBufferView:Ya,isString:Xa,isNumber:Po,isBoolean:Ka,isObject:li,isPlainObject:Wn,isUndefined:pn,isDate:Ja,isFile:Ga,isBlob:Za,isRegExp:ml,isFunction:Fe,isStream:el,isURLSearchParams:nl,isTypedArray:ul,isFileList:Qa,forEach:bn,merge:Yi,extend:rl,trim:il,stripBOM:ol,inherits:sl,toFlatObject:al,kindOf:si,kindOfTest:Xe,endsWith:ll,toArray:cl,forEachEntry:dl,matchAll:fl,isHTMLForm:hl,hasOwnProperty:ao,hasOwnProp:ao,reduceDescriptors:jo,freezeMethods:gl,toObjectSet:vl,toCamelCase:pl,noop:wl,toFiniteNumber:bl,findKey:Fo,global:Bo,isContextDefined:zo,ALPHABET:Vo,generateString:yl,isSpecCompliantForm:_l,toJSONObject:xl,isAsyncFn:El,isThenable:Cl};function K(e,t,n,i,r){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),i&&(this.request=i),r&&(this.response=r)}x.inherits(K,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:x.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const $o=K.prototype,qo={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{qo[e]={value:e}});Object.defineProperties(K,qo);Object.defineProperty($o,"isAxiosError",{value:!0});K.from=(e,t,n,i,r,o)=>{const s=Object.create($o);return x.toFlatObject(e,s,function(d){return d!==Error.prototype},l=>l!=="isAxiosError"),K.call(s,e.message,t,n,i,r),s.cause=e,s.name=e.name,o&&Object.assign(s,o),s};const Sl=null;function Xi(e){return x.isPlainObject(e)||x.isArray(e)}function Wo(e){return x.endsWith(e,"[]")?e.slice(0,-2):e}function co(e,t,n){return e?e.concat(t).map(function(r,o){return r=Wo(r),!n&&o?"["+r+"]":r}).join(n?".":""):t}function Al(e){return x.isArray(e)&&!e.some(Xi)}const Ol=x.toFlatObject(x,{},null,function(t){return/^is[A-Z]/.test(t)});function ci(e,t,n){if(!x.isObject(e))throw new TypeError("target must be an object");t=t||new FormData,n=x.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,function(O,E){return!x.isUndefined(E[O])});const i=n.metaTokens,r=n.visitor||m,o=n.dots,s=n.indexes,d=(n.Blob||typeof Blob<"u"&&Blob)&&x.isSpecCompliantForm(t);if(!x.isFunction(r))throw new TypeError("visitor must be a function");function f(y){if(y===null)return"";if(x.isDate(y))return y.toISOString();if(!d&&x.isBlob(y))throw new K("Blob is not supported. Use a Buffer instead.");return x.isArrayBuffer(y)||x.isTypedArray(y)?d&&typeof Blob=="function"?new Blob([y]):Buffer.from(y):y}function m(y,O,E){let T=y;if(y&&!E&&typeof y=="object"){if(x.endsWith(O,"{}"))O=i?O:O.slice(0,-2),y=JSON.stringify(y);else if(x.isArray(y)&&Al(y)||(x.isFileList(y)||x.endsWith(O,"[]"))&&(T=x.toArray(y)))return O=Wo(O),T.forEach(function(J,X){!(x.isUndefined(J)||J===null)&&t.append(s===!0?co([O],X,o):s===null?O:O+"[]",f(J))}),!1}return Xi(y)?!0:(t.append(co(E,O,o),f(y)),!1)}const p=[],g=Object.assign(Ol,{defaultVisitor:m,convertValue:f,isVisitable:Xi});function w(y,O){if(!x.isUndefined(y)){if(p.indexOf(y)!==-1)throw Error("Circular reference detected in "+O.join("."));p.push(y),x.forEach(y,function(T,V){(!(x.isUndefined(T)||T===null)&&r.call(t,T,x.isString(V)?V.trim():V,O,g))===!0&&w(T,O?O.concat(V):[V])}),p.pop()}}if(!x.isObject(e))throw new TypeError("data must be an object");return w(e),t}function uo(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(i){return t[i]})}function _r(e,t){this._pairs=[],e&&ci(e,this,t)}const Uo=_r.prototype;Uo.append=function(t,n){this._pairs.push([t,n])};Uo.toString=function(t){const n=t?function(i){return t.call(this,i,uo)}:uo;return this._pairs.map(function(r){return n(r[0])+"="+n(r[1])},"").join("&")};function Tl(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Yo(e,t,n){if(!t)return e;const i=n&&n.encode||Tl,r=n&&n.serialize;let o;if(r?o=r(t,n):o=x.isURLSearchParams(t)?t.toString():new _r(t,n).toString(i),o){const s=e.indexOf("#");s!==-1&&(e=e.slice(0,s)),e+=(e.indexOf("?")===-1?"?":"&")+o}return e}class Ll{constructor(){this.handlers=[]}use(t,n,i){return this.handlers.push({fulfilled:t,rejected:n,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){x.forEach(this.handlers,function(i){i!==null&&t(i)})}}const fo=Ll,Xo={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Nl=typeof URLSearchParams<"u"?URLSearchParams:_r,kl=typeof FormData<"u"?FormData:null,Dl=typeof Blob<"u"?Blob:null,Ml=(()=>{let e;return typeof navigator<"u"&&((e=navigator.product)==="ReactNative"||e==="NativeScript"||e==="NS")?!1:typeof window<"u"&&typeof document<"u"})(),Rl=(()=>typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function")(),Ue={isBrowser:!0,classes:{URLSearchParams:Nl,FormData:kl,Blob:Dl},isStandardBrowserEnv:Ml,isStandardBrowserWebWorkerEnv:Rl,protocols:["http","https","file","blob","url","data"]};function Hl(e,t){return ci(e,new Ue.classes.URLSearchParams,Object.assign({visitor:function(n,i,r,o){return Ue.isNode&&x.isBuffer(n)?(this.append(i,n.toString("base64")),!1):o.defaultVisitor.apply(this,arguments)}},t))}function Il(e){return x.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function Pl(e){const t={},n=Object.keys(e);let i;const r=n.length;let o;for(i=0;i<r;i++)o=n[i],t[o]=e[o];return t}function Ko(e){function t(n,i,r,o){let s=n[o++];const l=Number.isFinite(+s),d=o>=n.length;return s=!s&&x.isArray(r)?r.length:s,d?(x.hasOwnProp(r,s)?r[s]=[r[s],i]:r[s]=i,!l):((!r[s]||!x.isObject(r[s]))&&(r[s]=[]),t(n,i,r[s],o)&&x.isArray(r[s])&&(r[s]=Pl(r[s])),!l)}if(x.isFormData(e)&&x.isFunction(e.entries)){const n={};return x.forEachEntry(e,(i,r)=>{t(Il(i),r,n,0)}),n}return null}const Fl={"Content-Type":void 0};function Bl(e,t,n){if(x.isString(e))try{return(t||JSON.parse)(e),x.trim(e)}catch(i){if(i.name!=="SyntaxError")throw i}return(n||JSON.stringify)(e)}const ui={transitional:Xo,adapter:["xhr","http"],transformRequest:[function(t,n){const i=n.getContentType()||"",r=i.indexOf("application/json")>-1,o=x.isObject(t);if(o&&x.isHTMLForm(t)&&(t=new FormData(t)),x.isFormData(t))return r&&r?JSON.stringify(Ko(t)):t;if(x.isArrayBuffer(t)||x.isBuffer(t)||x.isStream(t)||x.isFile(t)||x.isBlob(t))return t;if(x.isArrayBufferView(t))return t.buffer;if(x.isURLSearchParams(t))return n.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let l;if(o){if(i.indexOf("application/x-www-form-urlencoded")>-1)return Hl(t,this.formSerializer).toString();if((l=x.isFileList(t))||i.indexOf("multipart/form-data")>-1){const d=this.env&&this.env.FormData;return ci(l?{"files[]":t}:t,d&&new d,this.formSerializer)}}return o||r?(n.setContentType("application/json",!1),Bl(t)):t}],transformResponse:[function(t){const n=this.transitional||ui.transitional,i=n&&n.forcedJSONParsing,r=this.responseType==="json";if(t&&x.isString(t)&&(i&&!this.responseType||r)){const s=!(n&&n.silentJSONParsing)&&r;try{return JSON.parse(t)}catch(l){if(s)throw l.name==="SyntaxError"?K.from(l,K.ERR_BAD_RESPONSE,this,null,this.response):l}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Ue.classes.FormData,Blob:Ue.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};x.forEach(["delete","get","head"],function(t){ui.headers[t]={}});x.forEach(["post","put","patch"],function(t){ui.headers[t]=x.merge(Fl)});const xr=ui,zl=x.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),jl=e=>{const t={};let n,i,r;return e&&e.split(`
`).forEach(function(s){r=s.indexOf(":"),n=s.substring(0,r).trim().toLowerCase(),i=s.substring(r+1).trim(),!(!n||t[n]&&zl[n])&&(n==="set-cookie"?t[n]?t[n].push(i):t[n]=[i]:t[n]=t[n]?t[n]+", "+i:i)}),t},ho=Symbol("internals");function on(e){return e&&String(e).trim().toLowerCase()}function Un(e){return e===!1||e==null?e:x.isArray(e)?e.map(Un):String(e)}function Vl(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let i;for(;i=n.exec(e);)t[i[1]]=i[2];return t}const $l=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function Bi(e,t,n,i,r){if(x.isFunction(i))return i.call(this,t,n);if(r&&(t=n),!!x.isString(t)){if(x.isString(i))return t.indexOf(i)!==-1;if(x.isRegExp(i))return i.test(t)}}function ql(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,n,i)=>n.toUpperCase()+i)}function Wl(e,t){const n=x.toCamelCase(" "+t);["get","set","has"].forEach(i=>{Object.defineProperty(e,i+n,{value:function(r,o,s){return this[i].call(this,t,r,o,s)},configurable:!0})})}class di{constructor(t){t&&this.set(t)}set(t,n,i){const r=this;function o(l,d,f){const m=on(d);if(!m)throw new Error("header name must be a non-empty string");const p=x.findKey(r,m);(!p||r[p]===void 0||f===!0||f===void 0&&r[p]!==!1)&&(r[p||d]=Un(l))}const s=(l,d)=>x.forEach(l,(f,m)=>o(f,m,d));return x.isPlainObject(t)||t instanceof this.constructor?s(t,n):x.isString(t)&&(t=t.trim())&&!$l(t)?s(jl(t),n):t!=null&&o(n,t,i),this}get(t,n){if(t=on(t),t){const i=x.findKey(this,t);if(i){const r=this[i];if(!n)return r;if(n===!0)return Vl(r);if(x.isFunction(n))return n.call(this,r,i);if(x.isRegExp(n))return n.exec(r);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,n){if(t=on(t),t){const i=x.findKey(this,t);return!!(i&&this[i]!==void 0&&(!n||Bi(this,this[i],i,n)))}return!1}delete(t,n){const i=this;let r=!1;function o(s){if(s=on(s),s){const l=x.findKey(i,s);l&&(!n||Bi(i,i[l],l,n))&&(delete i[l],r=!0)}}return x.isArray(t)?t.forEach(o):o(t),r}clear(t){const n=Object.keys(this);let i=n.length,r=!1;for(;i--;){const o=n[i];(!t||Bi(this,this[o],o,t,!0))&&(delete this[o],r=!0)}return r}normalize(t){const n=this,i={};return x.forEach(this,(r,o)=>{const s=x.findKey(i,o);if(s){n[s]=Un(r),delete n[o];return}const l=t?ql(o):String(o).trim();l!==o&&delete n[o],n[l]=Un(r),i[l]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const n=Object.create(null);return x.forEach(this,(i,r)=>{i!=null&&i!==!1&&(n[r]=t&&x.isArray(i)?i.join(", "):i)}),n}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,n])=>t+": "+n).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...n){const i=new this(t);return n.forEach(r=>i.set(r)),i}static accessor(t){const i=(this[ho]=this[ho]={accessors:{}}).accessors,r=this.prototype;function o(s){const l=on(s);i[l]||(Wl(r,s),i[l]=!0)}return x.isArray(t)?t.forEach(o):o(t),this}}di.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);x.freezeMethods(di.prototype);x.freezeMethods(di);const tt=di;function zi(e,t){const n=this||xr,i=t||n,r=tt.from(i.headers);let o=i.data;return x.forEach(e,function(l){o=l.call(n,o,r.normalize(),t?t.status:void 0)}),r.normalize(),o}function Jo(e){return!!(e&&e.__CANCEL__)}function yn(e,t,n){K.call(this,e??"canceled",K.ERR_CANCELED,t,n),this.name="CanceledError"}x.inherits(yn,K,{__CANCEL__:!0});function Ul(e,t,n){const i=n.config.validateStatus;!n.status||!i||i(n.status)?e(n):t(new K("Request failed with status code "+n.status,[K.ERR_BAD_REQUEST,K.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n))}const Yl=Ue.isStandardBrowserEnv?function(){return{write:function(n,i,r,o,s,l){const d=[];d.push(n+"="+encodeURIComponent(i)),x.isNumber(r)&&d.push("expires="+new Date(r).toGMTString()),x.isString(o)&&d.push("path="+o),x.isString(s)&&d.push("domain="+s),l===!0&&d.push("secure"),document.cookie=d.join("; ")},read:function(n){const i=document.cookie.match(new RegExp("(^|;\\s*)("+n+")=([^;]*)"));return i?decodeURIComponent(i[3]):null},remove:function(n){this.write(n,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}();function Xl(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function Kl(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}function Go(e,t){return e&&!Xl(t)?Kl(e,t):t}const Jl=Ue.isStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");let i;function r(o){let s=o;return t&&(n.setAttribute("href",s),s=n.href),n.setAttribute("href",s),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:n.pathname.charAt(0)==="/"?n.pathname:"/"+n.pathname}}return i=r(window.location.href),function(s){const l=x.isString(s)?r(s):s;return l.protocol===i.protocol&&l.host===i.host}}():function(){return function(){return!0}}();function Gl(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}function Zl(e,t){e=e||10;const n=new Array(e),i=new Array(e);let r=0,o=0,s;return t=t!==void 0?t:1e3,function(d){const f=Date.now(),m=i[o];s||(s=f),n[r]=d,i[r]=f;let p=o,g=0;for(;p!==r;)g+=n[p++],p=p%e;if(r=(r+1)%e,r===o&&(o=(o+1)%e),f-s<t)return;const w=m&&f-m;return w?Math.round(g*1e3/w):void 0}}function po(e,t){let n=0;const i=Zl(50,250);return r=>{const o=r.loaded,s=r.lengthComputable?r.total:void 0,l=o-n,d=i(l),f=o<=s;n=o;const m={loaded:o,total:s,progress:s?o/s:void 0,bytes:l,rate:d||void 0,estimated:d&&s&&f?(s-o)/d:void 0,event:r};m[t?"download":"upload"]=!0,e(m)}}const Ql=typeof XMLHttpRequest<"u",ec=Ql&&function(e){return new Promise(function(n,i){let r=e.data;const o=tt.from(e.headers).normalize(),s=e.responseType;let l;function d(){e.cancelToken&&e.cancelToken.unsubscribe(l),e.signal&&e.signal.removeEventListener("abort",l)}x.isFormData(r)&&(Ue.isStandardBrowserEnv||Ue.isStandardBrowserWebWorkerEnv?o.setContentType(!1):o.setContentType("multipart/form-data;",!1));let f=new XMLHttpRequest;if(e.auth){const w=e.auth.username||"",y=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(w+":"+y))}const m=Go(e.baseURL,e.url);f.open(e.method.toUpperCase(),Yo(m,e.params,e.paramsSerializer),!0),f.timeout=e.timeout;function p(){if(!f)return;const w=tt.from("getAllResponseHeaders"in f&&f.getAllResponseHeaders()),O={data:!s||s==="text"||s==="json"?f.responseText:f.response,status:f.status,statusText:f.statusText,headers:w,config:e,request:f};Ul(function(T){n(T),d()},function(T){i(T),d()},O),f=null}if("onloadend"in f?f.onloadend=p:f.onreadystatechange=function(){!f||f.readyState!==4||f.status===0&&!(f.responseURL&&f.responseURL.indexOf("file:")===0)||setTimeout(p)},f.onabort=function(){f&&(i(new K("Request aborted",K.ECONNABORTED,e,f)),f=null)},f.onerror=function(){i(new K("Network Error",K.ERR_NETWORK,e,f)),f=null},f.ontimeout=function(){let y=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const O=e.transitional||Xo;e.timeoutErrorMessage&&(y=e.timeoutErrorMessage),i(new K(y,O.clarifyTimeoutError?K.ETIMEDOUT:K.ECONNABORTED,e,f)),f=null},Ue.isStandardBrowserEnv){const w=(e.withCredentials||Jl(m))&&e.xsrfCookieName&&Yl.read(e.xsrfCookieName);w&&o.set(e.xsrfHeaderName,w)}r===void 0&&o.setContentType(null),"setRequestHeader"in f&&x.forEach(o.toJSON(),function(y,O){f.setRequestHeader(O,y)}),x.isUndefined(e.withCredentials)||(f.withCredentials=!!e.withCredentials),s&&s!=="json"&&(f.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&f.addEventListener("progress",po(e.onDownloadProgress,!0)),typeof e.onUploadProgress=="function"&&f.upload&&f.upload.addEventListener("progress",po(e.onUploadProgress)),(e.cancelToken||e.signal)&&(l=w=>{f&&(i(!w||w.type?new yn(null,e,f):w),f.abort(),f=null)},e.cancelToken&&e.cancelToken.subscribe(l),e.signal&&(e.signal.aborted?l():e.signal.addEventListener("abort",l)));const g=Gl(m);if(g&&Ue.protocols.indexOf(g)===-1){i(new K("Unsupported protocol "+g+":",K.ERR_BAD_REQUEST,e));return}f.send(r||null)})},Yn={http:Sl,xhr:ec};x.forEach(Yn,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});const tc={getAdapter:e=>{e=x.isArray(e)?e:[e];const{length:t}=e;let n,i;for(let r=0;r<t&&(n=e[r],!(i=x.isString(n)?Yn[n.toLowerCase()]:n));r++);if(!i)throw i===!1?new K(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT"):new Error(x.hasOwnProp(Yn,n)?`Adapter '${n}' is not available in the build`:`Unknown adapter '${n}'`);if(!x.isFunction(i))throw new TypeError("adapter is not a function");return i},adapters:Yn};function ji(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new yn(null,e)}function mo(e){return ji(e),e.headers=tt.from(e.headers),e.data=zi.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),tc.getAdapter(e.adapter||xr.adapter)(e).then(function(i){return ji(e),i.data=zi.call(e,e.transformResponse,i),i.headers=tt.from(i.headers),i},function(i){return Jo(i)||(ji(e),i&&i.response&&(i.response.data=zi.call(e,e.transformResponse,i.response),i.response.headers=tt.from(i.response.headers))),Promise.reject(i)})}const go=e=>e instanceof tt?e.toJSON():e;function jt(e,t){t=t||{};const n={};function i(f,m,p){return x.isPlainObject(f)&&x.isPlainObject(m)?x.merge.call({caseless:p},f,m):x.isPlainObject(m)?x.merge({},m):x.isArray(m)?m.slice():m}function r(f,m,p){if(x.isUndefined(m)){if(!x.isUndefined(f))return i(void 0,f,p)}else return i(f,m,p)}function o(f,m){if(!x.isUndefined(m))return i(void 0,m)}function s(f,m){if(x.isUndefined(m)){if(!x.isUndefined(f))return i(void 0,f)}else return i(void 0,m)}function l(f,m,p){if(p in t)return i(f,m);if(p in e)return i(void 0,f)}const d={url:o,method:o,data:o,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:l,headers:(f,m)=>r(go(f),go(m),!0)};return x.forEach(Object.keys(Object.assign({},e,t)),function(m){const p=d[m]||r,g=p(e[m],t[m],m);x.isUndefined(g)&&p!==l||(n[m]=g)}),n}const Zo="1.4.0",Er={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{Er[e]=function(i){return typeof i===e||"a"+(t<1?"n ":" ")+e}});const vo={};Er.transitional=function(t,n,i){function r(o,s){return"[Axios v"+Zo+"] Transitional option '"+o+"'"+s+(i?". "+i:"")}return(o,s,l)=>{if(t===!1)throw new K(r(s," has been removed"+(n?" in "+n:"")),K.ERR_DEPRECATED);return n&&!vo[s]&&(vo[s]=!0,console.warn(r(s," has been deprecated since v"+n+" and will be removed in the near future"))),t?t(o,s,l):!0}};function nc(e,t,n){if(typeof e!="object")throw new K("options must be an object",K.ERR_BAD_OPTION_VALUE);const i=Object.keys(e);let r=i.length;for(;r-- >0;){const o=i[r],s=t[o];if(s){const l=e[o],d=l===void 0||s(l,o,e);if(d!==!0)throw new K("option "+o+" must be "+d,K.ERR_BAD_OPTION_VALUE);continue}if(n!==!0)throw new K("Unknown option "+o,K.ERR_BAD_OPTION)}}const Ki={assertOptions:nc,validators:Er},lt=Ki.validators;class Gn{constructor(t){this.defaults=t,this.interceptors={request:new fo,response:new fo}}request(t,n){typeof t=="string"?(n=n||{},n.url=t):n=t||{},n=jt(this.defaults,n);const{transitional:i,paramsSerializer:r,headers:o}=n;i!==void 0&&Ki.assertOptions(i,{silentJSONParsing:lt.transitional(lt.boolean),forcedJSONParsing:lt.transitional(lt.boolean),clarifyTimeoutError:lt.transitional(lt.boolean)},!1),r!=null&&(x.isFunction(r)?n.paramsSerializer={serialize:r}:Ki.assertOptions(r,{encode:lt.function,serialize:lt.function},!0)),n.method=(n.method||this.defaults.method||"get").toLowerCase();let s;s=o&&x.merge(o.common,o[n.method]),s&&x.forEach(["delete","get","head","post","put","patch","common"],y=>{delete o[y]}),n.headers=tt.concat(s,o);const l=[];let d=!0;this.interceptors.request.forEach(function(O){typeof O.runWhen=="function"&&O.runWhen(n)===!1||(d=d&&O.synchronous,l.unshift(O.fulfilled,O.rejected))});const f=[];this.interceptors.response.forEach(function(O){f.push(O.fulfilled,O.rejected)});let m,p=0,g;if(!d){const y=[mo.bind(this),void 0];for(y.unshift.apply(y,l),y.push.apply(y,f),g=y.length,m=Promise.resolve(n);p<g;)m=m.then(y[p++],y[p++]);return m}g=l.length;let w=n;for(p=0;p<g;){const y=l[p++],O=l[p++];try{w=y(w)}catch(E){O.call(this,E);break}}try{m=mo.call(this,w)}catch(y){return Promise.reject(y)}for(p=0,g=f.length;p<g;)m=m.then(f[p++],f[p++]);return m}getUri(t){t=jt(this.defaults,t);const n=Go(t.baseURL,t.url);return Yo(n,t.params,t.paramsSerializer)}}x.forEach(["delete","get","head","options"],function(t){Gn.prototype[t]=function(n,i){return this.request(jt(i||{},{method:t,url:n,data:(i||{}).data}))}});x.forEach(["post","put","patch"],function(t){function n(i){return function(o,s,l){return this.request(jt(l||{},{method:t,headers:i?{"Content-Type":"multipart/form-data"}:{},url:o,data:s}))}}Gn.prototype[t]=n(),Gn.prototype[t+"Form"]=n(!0)});const Xn=Gn;class Cr{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let n;this.promise=new Promise(function(o){n=o});const i=this;this.promise.then(r=>{if(!i._listeners)return;let o=i._listeners.length;for(;o-- >0;)i._listeners[o](r);i._listeners=null}),this.promise.then=r=>{let o;const s=new Promise(l=>{i.subscribe(l),o=l}).then(r);return s.cancel=function(){i.unsubscribe(o)},s},t(function(o,s,l){i.reason||(i.reason=new yn(o,s,l),n(i.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const n=this._listeners.indexOf(t);n!==-1&&this._listeners.splice(n,1)}static source(){let t;return{token:new Cr(function(r){t=r}),cancel:t}}}const ic=Cr;function rc(e){return function(n){return e.apply(null,n)}}function oc(e){return x.isObject(e)&&e.isAxiosError===!0}const Ji={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Ji).forEach(([e,t])=>{Ji[t]=e});const sc=Ji;function Qo(e){const t=new Xn(e),n=Ho(Xn.prototype.request,t);return x.extend(n,Xn.prototype,t,{allOwnKeys:!0}),x.extend(n,t,null,{allOwnKeys:!0}),n.create=function(r){return Qo(jt(e,r))},n}const ge=Qo(xr);ge.Axios=Xn;ge.CanceledError=yn;ge.CancelToken=ic;ge.isCancel=Jo;ge.VERSION=Zo;ge.toFormData=ci;ge.AxiosError=K;ge.Cancel=ge.CanceledError;ge.all=function(t){return Promise.all(t)};ge.spread=rc;ge.isAxiosError=oc;ge.mergeConfig=jt;ge.AxiosHeaders=tt;ge.formToJSON=e=>Ko(x.isHTMLForm(e)?new FormData(e):e);ge.HttpStatusCode=sc;ge.default=ge;const Zn=ge;class Ye{static extend(){const t={};let n=!1,i=0;const r=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(n=arguments[0],i++);const o=function(s){for(const l in s)Object.prototype.hasOwnProperty.call(s,l)&&(n&&Object.prototype.toString.call(s[l])==="[object Object]"?t[l]=Ye.extend(!0,t[l],s[l]):t[l]=s[l])};for(;i<r;i++){const s=arguments[i];o(s)}return t}}var St=function(e,t){var n=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(r,o){this.nodes=(o||document).querySelectorAll(r)},this.each=function(r){if(this.nodes)for(var o=0;o<this.nodes.length;o++)r.call(this.nodes[o],o);else this.node&&r.call(this.node,0);return this},this.encapsulate=function(){};var i=function(r,o){r&&(Array.isArray(r)?r.forEach(function(s){i(s,o)}):r instanceof St?o.append(r):typeof r=="object"&&o.append(new St(r)))};this.create=function(){var r=this.document.createElement(this.settings.tag);if(this.node=r,this.settings.encapsulate===!0){var o=this.settings.encapsulate===!0?"open":this.settings.encapsulate;r.attachShadow({mode:o})}this.nodes=[r],this.settings.content&&i(this.settings.content,this)},this._specialProps=function(r,o){if(r==="tooltip")return this.node.dataset[r]=o,!0},this.setProps=function(){for(var r in this.settings.props)if(r==="dataset")for(var o in this.settings.props[r])this.node.dataset[o]=this.settings.props[r][o];else if(r==="style")for(var s in this.settings.props[r])this.node.style[s]=this.settings.props[r][s];else{var l=this.settings.props[r];this._specialProps(r,l)||(this.node[r]=l)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(r,o){return typeof o=="number"&&this.__.cssNumber.indexOf(r)===-1&&(o=o+"px"),o},this.css=function(r,o){if(typeof r=="string")if(typeof o<"u"){var s=this._normalizeCSSValue(r,o);this.each(function(){this.style[r]=s})}else return this.document.defaultView.getComputedStyle(this.node)[r];if(typeof r=="object")for(var l in r)this.each(function(){this.style[l]=n._normalizeCSSValue(l,r[l])});return this},this.dataset=function(r,o){return typeof o>"u"?this._active()[r]:(this.each(function(){this.dataset[r]=o}),this)},this.attr=function(r,o){return typeof o>"u"?this._active()[r]:(this.each(function(){this.setAttribute(r,o)}),this)},this.val=function(r){return typeof r>"u"?this._active().value:(this.each(function(){this.value=r}),this)},this.prop=function(r,o){var s=this._active();return typeof o>"u"?s[r]:(s[r]!==o&&(s[r]=o,this.trigger("propChange",[r,o])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(r){var o=mw.element("#r"+new Date().getTime());return this.each(function(){for(var s=this.querySelectorAll(r),l=0;l<s.length;l++)o.nodes.indexOf(s[l])===-1&&o.nodes.push(s[l])}),o},this.addClass=function(r){return r=r.trim().split(" "),this.each(function(){var o=this;r.forEach(function(s){o.classList.add(s)})})},this.toggleClass=function(r){return this.each(function(){this.classList.toggle(r.trim())})},this.removeClass=function(r){var o=Array.isArray(r);if(o)return this.each(function(){for(var l=0,d=r.length;l<d;l++)this.classList.remove(r[l])});r=r.trim();var s=r.split(" ");return s.length>1?this.removeClass(s):this.each(function(){this.classList.remove(r)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(r){return typeof r>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=r})},this.text=function(r,o){if(typeof r>"u")return this.node.textContent;typeof o>"u"&&(o=!0),o&&(r=this.document.createRange().createContextualFragment(r).textContent),this.node.innerHTML=r},this._asdom=function(r){return typeof r=="string"?this.document.createRange().createContextualFragment(r):r.node?r.node:r.nodes?r.nodes[r.nodes.length-1]:r},this.offset=function(){var r=this._active(),o=this.getWindow(),s=r.getBoundingClientRect();return s.offsetTop=s.top+o.pageYOffset,s.offsetBottom=s.bottom+o.pageYOffset,s.offsetLeft=s.left+o.pageXOffset,s},this.width=function(r){return r?this.css("width",r):this._active().offsetWidth},this.height=function(r){return r?this.css("height",r):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(r){r=r||"*";var o=this._active(),s=o.parentElement,l=mw.element();for(l.nodes=[];s;)s.matches(r)&&l.nodes.push(s),s=s.parentElement;return l},this.append=function(r){return r&&this.each(function(){this.append(n._asdom(r))}),this},this.before=function(r){return r&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(n._asdom(r),this)}),this},this.after=function(r){r&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(n._asdom(r),this.nextSibling)})},this.prepend=function(r){return r&&this.each(function(){this.prepend(n._asdom(r))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(r){this._disabled=r,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(r,o){return o=o||{},this.each(function(){this.dispatchEvent(new CustomEvent(r,{detail:o,cancelable:!0,bubbles:!0})),n._on[r]&&n._on[r].forEach(function(s){s.call(this,r,o)})}),this},this.get=function(r){return this.nodes[r]},this.wrap=function(r){var o=Sr(r);this.before(o),o.append(this)},this._on={},this.on=function(r,o){return r=r.trim().split(" "),r.forEach(function(s){n._on[s]||(n._on[s]=[]),n._on[s].push(o),n.each(function(){this.addEventListener(s,o,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=t||document,this.root instanceof St&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,e=e||{},e.nodeName&&e.nodeType)this.nodes.push(e),this.node=e,e={},this._asElement=!0;else if(typeof e=="string")if(e.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(e)),e={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof St)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new St(this.settings.content));else{var r=this._asdom(e);this.nodes=[].slice.call(r.children),this._asElement=!0}e=e||{};var o={tag:"div",props:{}};this.settings=Ye.extend({},o,e),!this._asElement&&(this.create(),this.setProps())},this.init()};const Sr=function(e,t){return new St(e,t)};Sr.module=function(e,t){St.prototype[e]=t};const Gi="mw-le-element";window.customElements&&!customElements.get(Gi)&&customElements.define(Gi,class extends HTMLElement{constructor(){super()}});const z=(e,t)=>(e instanceof Object&&!e.nodeType&&(e=Ye.extend({},e||{},{tag:e.tag||Gi})),Sr(e,t));let cn;const zn=document.documentElement;zn.matches?cn="matches":zn.matchesSelector?cn="matchesSelector":zn.mozMatchesSelector?cn="mozMatchesSelector":zn.webkitMatchesSelector&&(cn="webkitMatchesSelector");class ve{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(t,n){return t[cn](n)}static isBlockLevel(t){if(!t||t.nodeType===3)return!1;var n=t.nodeName;if(typeof this._isBlockCache[n]<"u")return this._isBlockCache[n];var i=document.createElement(n);return this.fragment().appendChild(i),this._isBlockCache[n]=getComputedStyle(i).display==="block",this.fragment().removeChild(i),this._isBlockCache[n]}static firstBlockLevel(t){for(;t&&t.classList;){if(this.isBlockLevel(t))return t;t=t.parentNode}}static firstWithBackgroundImage(t){if(!t)return null;for(;t&&t.nodeName!=="BODY";){if(t.style.backgroundImage)return t;t=t.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(t,n){for(;t&&t.nodeName!=="BODY";){let i=0,r=n.length;for(;i<r;i++)if(t.classList.contains(n[i]))return!0;t=t.parentElement}return!1}static hasParentsWithClass(t,n){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.classList.contains(n))return!0;i=i.parentNode}return!1}}static hasParentWithId(t,n){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.id===n)return!0;i=i.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(t,n){for(;t&&t.nodeName!=="BODY";){let i=0,r=n.length;for(;i<r;i++)if(t.classList.contains(n[i]))return t;t=t.parentElement}return null}static firstParentOrCurrentWithTag(t,n){if(!(!t||!n)){n=typeof n!="string"?n:[n];for(var i=t;i&&i.nodeName!=="BODY";){if(n.indexOf(i.nodeName.toLowerCase())!==-1)return i;i=i.parentNode}return!1}}static index(t,n,i){i=i||t.tagName.toLowerCase(),n=n||t.parentNode;var r;n.constructor===[].constructor?r=n:r=n.querySelectorAll(i);for(var o=0,s=r.length;o<s;o++)if(t===r[o])return o}static firstParentOrCurrentWithClass(t,n){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.classList.contains(n))return i;i=i.parentNode}return!1}static firstParentOrCurrent(t,n){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.matches(n))return i;i=i.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(t,n){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(!i)return!1;if(this.hasAnyOfClasses(i,n))return i;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(t,n){let i=t;for(;i&&i.nodeName!=="BODY";){const r=i.classList.contains(n[0]),o=i.classList.contains(n[1]);if(r&&o)return!1;if(r)return!0;if(o)return!1;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,n){let i=t;for(;i&&i.nodeName!=="BODY";){const r=i.classList.contains(n[0]),o=i.classList.contains(n[1]);if(r&&o)return!1;if(r)return!0;if(o)return!1;i=i.parentNode}return!0}static hasAnyOfClasses(t,n){if(!t)return;let i=0,r=n.length;for(;i<r;i++)if(t.classList.contains(n[i]))return!0;return!1}static offset(t){if(t){var n=t.getBoundingClientRect(),i={top:n.top,left:n.left,width:n.width,height:n.height,bottom:n.bottom,right:n.right};return i.top+=t.ownerDocument.defaultView.scrollY,i.bottom+=t.ownerDocument.defaultView.scrollY,i.left+=t.ownerDocument.defaultView.scrollX,i.right+=t.ownerDocument.defaultView.scrollX,i}}static parentsOrder(t,n){for(var i=[],r={},o=n.length,s=0,l=-1;s<o;s++)r[n[s]]=-1;if(!t)return r;for(var d=t.parentNode;d&&d.nodeName!=="BODY";){for(l++,s=0;s<o;s++)d.classList.contains(n[s])&&i.indexOf(n[s])===-1&&(r[n[s]]=l,i.push(n[s]));d=d.parentNode}return r}}He(ve,"_isBlockCache",{}),He(ve,"_fragment");class ac{constructor(t){this.settings=t,this.tools=ve}isRow(t){return t.classList.contains(this.settings.rowClass)}isModule(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type!=="layouts"}isLayout(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts"}isInLayout(t){if(!t)return!1;for(t=t.parentNode;t&&t!==this.settings.document.body;){if(t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts")return!0;t=t.parentNode}}isElement(t){return t.classList.contains(this.settings.elementClass)}isEmptyElement(t){return t.classList.contains(this.settings.emptyElementClass)}isEdit(t){return t.classList.contains(this.settings.editClass)}isInEdit(t){var n=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t.parentNode,n)}isEditOrInEdit(t){return this.isEdit(t)||this.isInEdit(t)}isPlainText(t){return t.classList.contains(this.settings.plainElementClass)}getType(t){if(this.isEdit(t))return"edit";if(this.isElement(t))return"element";if(this.isModule(t))return"module";if(this.isLayout(t))return"layout"}}class es extends ac{constructor(t){super(t),this.settings=t,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM","DD"],this.init()}isConfigurable(t){return this.isElement(t)||this.isModule(t)||this.isRow(t)}isEditableLayout(t){return this.this.isLayout(t)&&this.isInEdit(t)}canMoveModule(t){return this.isModule(t)&&this.isInEdit(t)}canAcceptByClass(t){return this.tools.hasAnyOfClasses(t,this.dropableElements())}canAcceptByTag(t){return!t||t.nodeType!==1?!1:this._tagsCanAccept.indexOf(t.nodeName)!==-1}allowDrop(t){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(t){return this.canAccept(t.parentNode)}canAccept(t){return!!(this.canAcceptByClass(t)&&this.isEditOrInEdit(t)&&this.allowDrop(t))}canReceiveElements(t){return this.isEdit(t)&&this.canAcceptByTag(t)}dropableElements(){return this._dropableElements}getIteractionTarget(t){return this.tools.firstWithAyOfClassesOnNodeOrParent(t,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(t,n){const i=this.getIteractionTarget(t);if(!i||!this.isEditOrInEdit(t)||!this.allowDrop(t))return null;const r={target:i,canInsert:!1,beforeAfter:!1};var o=this.settings.strictLayouts&&this.isLayout(n),s=this.settings.strict&&!this.isLayout(n)&&!this.isInLayout(i);if(s)return null;if(this.isEdit(i))r.canInsert=!o;else if(this.isElement(i)&&!o)this.canAcceptByTag(i)&&(r.canInsert=!o),r.beforeAfter=!0;else if(this.isModule(i)&&!o)if(this.canInsertBeforeOrAfter(i))r.beforeAfter=!0;else return null;else if(this.isLayout(i))if(this.canInsertBeforeOrAfter(i))r.beforeAfter=!0;else return null;return r}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let lc=-1;const cc=(e,t)=>{if(!e||!t)return!1;const n=t.target;if(!n||n.nodeType!==1)return!1;e.pageX;const i=e.pageY,r=ve.offset(n),o={},s=15;if(lc===i||!t||!t.canInsert&&!t.beforeAfter)return!1;if(t.canInsert&&t.beforeAfter)if(i>=r.top-s&&i<=r.top+s)o.position="top",o.action="before";else if(i>=r.top+s&&i<=r.top+r.height/2)o.position="top",o.action="prepend";else if(i>=r.top+r.height/2&&i<=r.bottom-s)o.position="bottom",o.action="append";else if(i>=r.top+r.height/2&&i>=r.bottom-s)o.position="bottom",o.action="after";else return!1;else if(t.beforeAfter)if(i>=r.top-s&&i<=r.top+r.height/2)o.position="top",o.action="before";else if(i>=r.top+r.height/2&&i<=r.bottom+s)o.position="bottom",o.action="after";else return!1;else if(t.canInsert)if(i>=r.top-s&&i<=r.top+r.height/2)o.position="top",o.action="prepend";else if(i>=r.top+r.height/2&&i<=r.bottom+s)o.position="bottom",o.action="append";else return!1;return o},uc=function(e,t){var n={handle:null,element:null,document,helper:!0},i=this,r={};this.on=function(s,l){r[s]?r[s].push(l):r[s]=[l]},this.dispatch=function(s,l){r[s]&&r[s].forEach(function(d){d.call(this,l)})};var o=function(s){i.settings.document.body.style.scrollBehavior="smooth",i.settings.document.defaultView.scrollTo(0,i.settings.document.defaultView.scrollY+s),i.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=Ye.extend({},n,e),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(s){this.element=z(s).get(0),this.settings.handle||(this.settings.handle=this.settings.element),this.handle=this.settings.handle,this.handle.attr("draggable","true")},this.setTargets=function(s){this.targets=z(s)},this.addTarget=function(s){this.targets.push(s)},this.init=function(){this.config(),this.draggable()},this.$data={},this.helper=function(s,l){if(this._helper||(this._helper=z().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),s==="create"){var d=z(i.element).offset();this.$data._calcMinus={y:l.pageY-d.offsetTop,x:l.pageX-d.offsetLeft},this._helper.style.top=s.pageY+"px",this._helper.style.left=s.pageX+"px",this._helper.style.width=i.element.offsetWidth+"px",this._helper.style.height=i.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"}else s==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&s&&(this._helper.style.top=s.pageY-this.$data._calcMinus.y+"px",this._helper.style.left=s.pageX-this.$data._calcMinus.x+"px",this.settings.document.documentElement.classList.add("le-dragging"));return this._helper.innerHTML=i.element.outerHTML,this._helper},this.isDragging=!1,this.dropableService=new es(t),this.dropPosition=cc,this.draggable=function(){z(this.settings.target).on("dragleave",function(s){i.dropIndicator&&i.dropIndicator.hide()}),z(this.settings.target).on("dragover",function(s){if(i.target=null,i.action=null,s.target!==i.element||!i.element.contains(s.target)){var l=i.dropableService.getTarget(s.target,i.element);if(l&&l!==i.element){const d=i.dropPosition(s,l);d?(i.target=l.target,i.action=d.action,i.dropIndicator&&i.dropIndicator.position(i.target,d.action+"-"+d.position)):i.dropIndicator&&i.dropIndicator.hide()}else i.dropIndicator&&i.dropIndicator.hide();i.isDragging&&(i.dispatch("dragOver",{element:i.element,event:s}),s.preventDefault())}}).on("drop",function(s){i.isDragging&&(s.preventDefault(),i.target&&i.action&&z(i.target)[i.action](i.element),i.dropIndicator&&i.dropIndicator.hide(),i.dispatch("drop",{element:i.element,event:s})),i.dropIndicator&&i.dropIndicator.hide()}),this.handle.on("dragstart",function(s){i.isDragging=!0,i.element.id||(i.element.id="mw-element-"+new Date().getTime()),i.element.classList.add("mw-element-is-dragged"),s.dataTransfer.setData("text",i.element.id),s.dataTransfer.effectAllowed="move",i.helper("create",s),i.dispatch("dragStart",{element:i.element,event:s})}).on("drag",function(s){var l=90,d=5;s.clientY<l&&o(-d),s.clientY>innerHeight-(l+(this._helper?this._helper.offsetHeight+10:0))&&o(d),s.dataTransfer.dropEffect="copy",i.dispatch("drag",{element:i.element,event:s}),i.helper(s)}).on("dragend",function(s){i.isDragging=!1,i.element.classList.remove("mw-element-is-dragged"),i.helper("remove"),i.dispatch("dragEnd",{element:i.element,event:s})})},this.init()};var ut,Bt,zt;class ts{constructor(t={}){He(this,"x",0);He(this,"y",0);He(this,"w",0);He(this,"h",0);He(this,"listeners",{});Te(this,ut,{});He(this,"activeHandle",null);He(this,"handles",{});Te(this,Bt,!1);Te(this,zt,!0);const n={element:null,document,maxHeight:null,maxWidth:null};this.settings=Object.assign({},n,t),this.element=this.settings.element,this.document=this.settings.document,this.element.classList.add("mw-le-resizable")}on(t,n){B(this,ut)[t]?B(this,ut)[t].push(n):B(this,ut)[t]=[n]}dispatch(t,n){B(this,ut)[t]&&B(this,ut)[t].forEach(i=>{i.call(this,n)})}mouseMoveHandler(t){const n=t.clientX-this.x,i=t.clientY-this.y;let r=this.h+i,o;this.activeHandle===this.handles.left?o=this.w-n:o=this.w+n,this.settings.maxWidth&&(o=Math.min(o,this.settings.maxWidth)),this.settings.maxHeight&&(r=Math.min(r,this.settings.maxHeight)),this.element.style.width=`${o}px`,this.element.style.height=`${r}px`,t.preventDefault(),this.dispatch("resize",{height:this.element.offsetHeight,width:this.element.offsetWidth})}mouseUpHandler(){for(const t in this.listeners)this.document.removeEventListener(t,this.listeners[t]);this.listeners={},this.activeHandle=null,this.dispatch("resizeStop")}mouseDownHandler(t){this.x=t.clientX,this.y=t.clientY;const n=this.document.defaultView.getComputedStyle(this.element);this.w=parseInt(n.width,10),this.h=parseInt(n.height,10),this.listeners.mousemove=i=>this.mouseMoveHandler(i),this.listeners.mouseup=i=>this.mouseUpHandler(i);for(const i in this.listeners)this.document.addEventListener(i,this.listeners[i]);this.dispatch("resizeStart")}disable(){It(this,Bt,!0),It(this,zt,!1),this.element.classList.add("mw-le-resizable-disabled")}enable(){It(this,Bt,!1),It(this,zt,!0),this.element.classList.remove("mw-le-resizable-disabled")}disabled(){return B(this,Bt)}enabled(){return B(this,zt)}build(){const t=this.document.createElement("span"),n=this.document.createElement("span"),i=this.document.createElement("span"),r=this.document.createElement("span");this.handles.top=t,this.handles.right=n,this.handles.bottom=i,this.handles.left=r,t.className="mw-le-resizer mw-le-resizer-t",n.className="mw-le-resizer mw-le-resizer-r",r.className="mw-le-resizer mw-le-resizer-l",i.className="mw-le-resizer mw-le-resizer-b",this.element.appendChild(t),this.element.appendChild(n),this.element.appendChild(i),this.element.appendChild(r)}mount(){if(!this.element)return this;if(this.element.dataset.resizable)return this;this.element.dataset.resizable=!0,this.build();const t=this.element.querySelectorAll(".mw-le-resizer");return Array.from(t).forEach(n=>{n.addEventListener("mousedown",i=>{this.mouseDownHandler(i),this.activeHandle=n})}),this.dispatch("ready",{height:this.element.offsetHeight,width:this.element.offsetWidth}),this}}ut=new WeakMap,Bt=new WeakMap,zt=new WeakMap;globalThis.Resizable=ts;const jn=function(e){var t={},n=this;this.settings=Ye.extend({},t,e);const i={};this.on=(p,g)=>{i[p]?i[p].push(g):i[p]=[g]},this.dispatch=(p,g)=>{i[p]&&i[p].forEach(w=>{w.call(this,g)})};var r=!0,o=null;this.getTarget=function(){return o},this.isVisible=function(){return r},this.show=function(){r=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){r=!1,this.wrapper.addClass("mw-handle-item-hidden"),this.wrapper.removeClass("mw-handle-active")};let s=null;this.setContent=function(p){s&&s.remove(),s=p,this.wrapper.append(s)},this.initDraggable=function(){this.draggable=new uc({handle:this.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},e),this.draggable.on("dragStart",function(){n.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){n.wrapper.removeClass("mw-handle-item-dragging")})};const l=()=>{if(this.settings.document.defaultView.pageYOffset!==void 0)return{x:this.settings.document.defaultView.pageXOffset,y:this.settings.document.defaultView.pageYOffset};{let p,g,w=this.settings.document,y=w.documentElement,O=w.body;return p=y.scrollLeft||O.scrollLeft||0,g=y.scrollTop||O.scrollTop||0,{x:p,y:g}}};this.position=function(p){if(!p)return;const g=ve.offset(p),w=l(),y=this.wrapper.get(0).querySelector(".mw-le-handle-menu-buttons");let O;w.y>g.top-70&&(O=w.y-(g.top-70),O>g.height&&(O=g.height+10)),y.style.transition="none",y.style.transform=O?`translateX(${O}px)`:"",setTimeout(()=>y.style.transition="",10),this.wrapper.css({top:g.top,left:g.left,width:g.width,height:g.height})},this.set=function(p,g){if(!p){o=null;return}this.position(p),this.show(),this.draggable.setElement(p),(o!==p||g)&&(o=p,this.dispatch("targetChange",p)),setTimeout(()=>this.wrapper.addClass("mw-handle-active"),1)},this.createHandle=function(){if(this.settings.handle==="self"){var p=z({tag:"div",props:{className:"mw-handle-item-draggable-self"}});this.wrapper.append(p),this.settings.document.addEventListener("mousedown",function(){p.addClass("active")}),this.settings.document.addEventListener("mouseup",function(){p.removeClass("active")}),this.settings.handle=p,this.handle=p,this.wrapper.append(p);return}this.settings.handle?(typeof this.settings.handle=="string"&&(this.settings.handle=z(this.handle)),this.handle=this.settings.handle):(this.handle=z({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))};var d=this.settings.document.defaultView.innerWidth,f=this.settings.document.defaultView.innerHeight;this.resizableMaxWidth=function(p){if(typeof p>"u")return d;d=p},this.resizableMaxHeight=function(p){if(typeof p>"u")return f;f=p},this.findClosestElementByClass=function(p,g=200){let w=[],y=p,O=0;for(;y!==document;){const E=y.parentNode.querySelectorAll(".element,.module");if(E.length>0&&(w=[...E].filter(T=>Math.abs(p.getBoundingClientRect().top-T.getBoundingClientRect().top)<=g),w.length>0)||(y=y.parentNode,O++,O>g/10))break}return w};function m(p,g,w,y){var O=Math.min(w/p,y/g);return{width:p*O,height:g*O}}this.resizable=function(){this.settings.resizable&&(this.resizer=new ts({element:this.wrapper.get(0),document:this.settings.document}),this.resizer.mount(),this.resizer.on("resize",p=>{const g=this.getTarget();g.nodeName==="IMG"?(p=m(g.offsetWidth,g.offsetHeight,p.width,p.height),g.style.height=p.height+"px",g.style.width=p.width+"px"):(g.style.minHeight=p.height+"px",g.style.width=p.width+"px"),this.set(g)}))},this.createWrapper=function(){this.wrapper=z({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),z(document.body).on("mouseup touchend",function(){n.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide(),this.resizable(),this.settings.document.addEventListener("orientationChange",p=>this.position(this.getTarget())),this.settings.document.defaultView.addEventListener("resize",p=>this.position(this.getTarget())),this.settings.document.addEventListener("scroll",p=>this.position(this.getTarget()))},dc=function(e){e=e||{},this.tools=ve;var t=this,n={exceptions:["mw-handle-item"]};this.settings=Ye.extend({},n,e),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var i=20,r=function(l){return l%5>=2.5?l/5*5+5:l/5*5},o=function(l,d){l=r(l),d=r(d);for(var f=[],m=l-i,p=l+i,g=d-i,w=d+i;m<p;m+=5)for(;g<=w;g+=5)f.push([m,g]);return f},s=function(l,d){l&&l.parentElement&&d.indexOf(l)===-1&&t.body!==l&&d.push(l)};this.fromEvent=function(l){let d,f;return l.pageX?(d=l.pageX,f=l.pageY):l.targetTouches&&l.targetTouches[0]?(d=l.targetTouches[0].pageX,f=l.targetTouches[0].pageY):l.touches&&l.touches[0]&&(d=l.touches[0].pageX,f=l.touches[0].pageY),t.tools.hasAnyOfClassesOnNodeOrParent(l.target,this.settings.exceptions)?[]:this.fromPoint(d,f)},this.fromPoint=function(l,d){var f=[];if(t.document.defaultView.frameElement&&(d-=t.document.defaultView.scrollY),isNaN(l)||isNaN(d))return f;var m=t.document.elementFromPoint(l,d);if(!m)return[];s(m,f);var p=o(l,d);return p.forEach(function(g){s(t.document.elementFromPoint(g[0],g[1]),f)}),f}},fc=function(e){return ve.matches(e,'.row,[class*="row-"]')},hc=function(e){return ve.matches(e,'.col,[class*="col-"]')};let ct;const wo=function(){return ct||(ct=document.createElement("div"),ct.style.visibility="hidden",ct.style.position="absolute",ct.style.width="1px",ct.style.height="1px",document.body.appendChild(ct)),ct},Vn={},pc=function(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof Vn[t]<"u")return Vn[t];var n=document.createElement(t);return wo().appendChild(n),Vn[t]=getComputedStyle(n).display==="block",wo().removeChild(n),Vn[t]},mc=(e,t,n)=>{e=e||"*";for(var i=t.querySelectorAll(e),r=0,o=[];r<i.length;r++)mw.tools.parentsOrCurrentOrderMatchOrOnlyFirst(i[r],["edit","module"])&&!hc(i[r])&&!fc(i[r])&&!n.elementAnalyzer.isEdit(i[r])&&pc(i[r])&&o.push(i[r]);return o},gc=e=>{const{backgroundImageHolder:t,editClass:n,moduleClass:i,elementClass:r,allowDrop:o}=e.settings,s=e.root;for(var l=s.querySelectorAll("."+n+"."+t+", ."+n+" ."+t+", ."+n+'[style*="background-image"], .'+n+' [style*="background-image"]'),d=s.querySelectorAll("."+i+e.settings.unEditableModules.join(",."+i)),f=s.querySelectorAll("."+n),m=0,p=0,g=0;m<l.length;m++){var w=l[m];e.elementAnalyzer.isInEdit(w)&&(mw.tools.hasClass(w,i),w.style.backgroundImage||(w.style.backgroundImage="none"))}for(;p<d.length;p++)d[m].classList.remove(i);for(;g<f.length;g++){for(var y=mc(":not(."+r+")",f[g],e),O=0,E=f[g].querySelectorAll("img,."+o),T=0;T<E.length;T++)e.elementAnalyzer.isInEdit(E[T])&&E[T].classList.add(r);for(;O<y.length;O++)y[O].classList.contains(i)||e.elementAnalyzer.isInEdit(y[O])&&y[O].classList.add(r)}},vc=function(e){this.handles=e,this.dragging=!1;var t=this;this.get=function(n){return this.handles[n]},this.set=function(n,i){this.get(n).set(i)},this.hide=function(n){n&&this.handles[n]?this.handles[n].hide():this.each(function(i,r){r.hide()})},this.hideAllBut=function(n){this.each(function(i,r){i!==n&&r.hide()})},this.show=function(n){n&&this.handles[n]?this.handles[n].show():this.each(function(i,r){r.show()})},this.each=function(n){if(n){var i;for(i in this.handles)n.call(t,i,this.handles[i])}},this.targetIsSelected=function(n,i){if(n){n=n.target||n;var r;for(r in this.handles){if(i&&i===this.handles[r])continue;const o=this.handles[r].getTarget();if(o&&o===n)return!0}return!1}},this.targetIsSelectedAndHandleIsNotHidden=function(n,i){if(n){n=n.target||n;var r;for(r in this.handles){if(i&&i===this.handles[r])continue;const o=this.handles[r].getTarget();if(o&&o===n)return this.handles[r].isVisible()}return!1}},this.targetIsOrInsideHandle=function(n){if(n){n=n.target||n;var i;for(i in this.handles)if(this.handles[i].wrapper.get(0)===n||this.handles[i].wrapper.get(0).contains(n))return!0;return!1}},this.init=function(){this.each(function(n,i){i.draggable.on("dragStart",function(){t.dragging=!0,t.hideAllBut(n)}),i.draggable.on("dragEnd",function(){t.dragging=!1,i.show()})})},this.init()},wc=function(e){e=e||{};const t={template:"default"};let n={};this.settings=Ye.extend({},t,e),this._indicator=null;const i={};this.on=function(d,f){i[d]?i[d].push(f):i[d]=[f]},this.dispatch=function(d,f){i[d]&&i[d].forEach(function(m){m.call(this,f)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,n={})},this.show=function(){this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const r=["before-top","prepend-top","after-bottom","append-bottom"],o="mw-drop-indicator-position-",s=r.map(function(d){return o+d});let l=null;this.position=function(d,f){if(!(!d||!f)&&!(n.target===d&&n.position===f)){n.target=d,n.position=f,l!==f&&(this._indicator.removeClass(s),l=f,this._indicator.addClass(o+f));var m=ve.offset(d);this._indicator.css({height:m.height,left:m.left,top:m.top,width:m.width}),this.show()}},this.make=function(){this._indicator=z(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},bc=(e,t,n)=>{!e||!t||(e=e.isMWElement?e.get(0):e,e.dataset.tooltip=t,e.title=t,e.dataset.tooltipposition=n||"top-center")},Vt=function(e){this.options=e||{};var t=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=z({props:{className:"mw-le-handle-menu",id:t.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=z({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var n,i,r,o=function(){n=z({props:{className:"mw-le-handle-menu-title"}}),i=z({props:{className:"mw-le-handle-menu-title-text"}}),r=z({props:{className:"mw-le-handle-menu-title-icon"}}),n.append(i),n.append(r),t.root.prepend(n),t.title=n},s=null;this.getTarget=function(){return s},this.setTarget=function(l){s=l;for(var d=0;d<this.buttons.length;d++)this.buttons[d].config.onTarget&&this.buttons[d].config.onTarget(l,this.buttons[d].button.get(0),t.options.rootScope)},this.setTitle=function(l,d){i.html(l||""),r.html(d||"")},this.buttons=[],this.buildButtons=function(l,d){d=d||this.buttonsHolder,l=l||this.options.buttons,l.forEach(function(f){d.append(t.button(f))})},this.button=function(l){var d=z({props:{className:"mw-le-handle-menu-button"+(l.className?" "+l.className:"")}}),f={props:{className:"mw-le-handle-menu-button-content"}},m=z(f);if(l.title&&bc(m,l.title),l.icon){var p=z({props:{className:"mw-le-handle-menu-button-icon",innerHTML:l.icon}});m.append(p)}if(l.text){var g=z({props:{className:"mw-le-handle-menu-button-text",innerHTML:l.text}});m.append(g)}if(d.append(m),this.buttons.push({button:d,config:l}),l.menu){var w=z({props:{className:"mw-le-handle-menu-button-sub-menu"}});d.append(w),t.buildButtons(l.menu,w),d.on("click",function(){this.classList.toggle("sub-menu-active")})}else typeof l.action=="function"&&d.on("click",function(){l.action(t.getTarget(),d.get(0))});return d},this.init=function(){this.create(),o(),this.setTitle(t.options.title,t.options.icon),this.buildButtons(),this.hide()},this.init()},yc=(e,t)=>{const n=z({props:{className:"modal-footer"}}),i=z({props:{className:"mw-admin-action-links mw-adm-liveedit-tabs ms-2",innerHTML:e||"REMOVE"}}),r=z({props:{className:"mw-admin-action-links mw-adm-liveedit-tabs me-2",innerHTML:t||"CANCEL"}});return n.append(r),n.append(i),{ok:i,cancel:r,footer:n}};var dt,br,_c;class ns{constructor(t){Te(this,br);Te(this,dt,{});t=t||{};const n={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},n,t),this.settings.id||(this.settings.id="mw-le-dialog-"+Date.now()),this.build(),setTimeout(i=>this.open())}on(t,n){B(this,dt)[t]?B(this,dt)[t].push(n):B(this,dt)[t]=[n]}dispatch(t,n){B(this,dt)[t]&&B(this,dt)[t].forEach(i=>{i.call(this,n)})}build(){const t=`


                <div class="modal-dialog modal-sm modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            ${this.settings.title?`<h5 class="modal-title">${this.settings.title}</h5>`:""}
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body py-2 mb-2">

                        </div>
                    </div>
                </div>


        `;this.root=z({props:{className:"modal",tabIndex:-1}}),this.root.html(t);var n=this.root.find(".modal-body"),i=this.root.find(".modal-content");this.container=n,n.append(this.settings.content),this.settings.footer&&i.append(this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this._modal=new bootstrap.Modal(this.root.get(0),{}),this.open()}open(){this._modal.show()}show(){this._modal.show()}hide(){this._modal.hide()}close(){this._modal.hide()}toggle(){this._modal.toggle()}remove(){this._modal.hide(),this._modal.dispose()}overlay(){this.overlay=z({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}dt=new WeakMap,br=new WeakSet,_c=function(t){(t.key==="Escape"||t.keyCode===27)&&this.remove()};const Ar=function(e,t){const n=yc(),i=new ns({content:e,footer:n.footer.get(0),title:mw.lang("Remove section")});return n.cancel.on("click",function(){i.remove()}),n.ok.on("click",function(){t&&t.call(),i.remove()}),i},xc=function(e){this.root=z({props:{id:"mw-handle-item-element-root"}});const t=[{title:"Duplicate",text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg>',className:"mw-handle-clone-button",onTarget:function(n,i){i.style.display=n.classList.contains("cloneable")?"":"none"},action:function(n){z(n).after(n.outerHTML)}},{title:"Move backward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20 13.5C20 17.09 17.09 20 13.5 20H6V18H13.5C16 18 18 16 18 13.5S16 9 13.5 9H7.83L10.91 12.09L9.5 13.5L4 8L9.5 2.5L10.92 3.91L7.83 7H13.5C17.09 7 20 9.91 20 13.5Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(n,i){const r=n.classList.contains("cloneable"),o=n.previousElementSibling;i.style.display=r&&o?"":"none"},action:function(n){const i=n.previousElementSibling;i&&(i.before(n),e.elementHandle.set(n))}},{title:"Move forward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M10.5 18H18V20H10.5C6.91 20 4 17.09 4 13.5S6.91 7 10.5 7H16.17L13.08 3.91L14.5 2.5L20 8L14.5 13.5L13.09 12.09L16.17 9H10.5C8 9 6 11 6 13.5S8 18 10.5 18Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(n,i){const r=n.classList.contains("cloneable"),o=n.nextElementSibling;i.style.display=r&&o?"":"none"},action:function(n){const i=n.nextElementSibling;i&&(i.after(n),e.elementHandle.set(n))}}];this.menu=new Vt({id:"mw-handle-item-element-menu",title:"Element",buttons:[{title:"Edit",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',className:"mw-handle-add-button",onTarget:function(n,i){},action:function(n){mw.app.editor.dispatch("editNodeRequest",n)}},{title:"Insert module",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z" /></svg>',className:"mw-handle-add-button",onTarget:function(n,i){},action:function(n){mw.app.editor.dispatch("insertModuleRequest",n)}},{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(n,i){},action:function(n){mw.app.editor.dispatch("elementSettingsRequest",n)}},...t,{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(n){Ar(z("<span>Are you sure you want to delete this element?</span>"),()=>{mw.app.registerChangedState(n),n.remove(),e.elementHandle.hide()})}}]}),this.menu.show(),this.root.append(this.menu.root)},Ec=function(e){var t=this;this.root=z({props:{id:"mw-handle-item-module-root",contentEditable:!1}}),this.tools=ve;var n=new Vt({id:"mw-handle-item-element-menu-default",title:"Module",rootScope:e,buttons:[{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',action:()=>{const i=mw.app.get("liveEdit").handles.get("module").getTarget();mw.app.editor.dispatch("onModuleSettingsRequest",i);var r=i.dataset.type||i.getAttribute("type");r=r.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+r,i)},onTarget:function(i,r){i.classList.contains("no-settings")?r.style.display="none":r.style.display=""}},{title:"Insert module",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z" /></svg>',className:"mw-handle-add-button",onTarget:function(i,r){t.tools.parentsOrCurrentOrderMatchOrOnlyFirst(i.parentNode,["edit","module"])?r.style.display="":r.style.display="none"},action:function(i){mw.app.editor.dispatch("insertModuleRequest",i)}},{title:"Delete",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z"></path></svg>',action:()=>{Ar(z("<span>Are you sure you want to delete this module?</span>"),()=>{const i=mw.app.get("liveEdit").handles.get("module").getTarget();var r=i.dataset.type||i.getAttribute("type");r=r.trim(),mw.app.registerChangedState(i),i.remove(),mw.app.editor.dispatch("moduleRemoved",i),mw.app.editor.dispatch("modulet@"+r+"Removed",i),e.moduleHandle.hide()})},onTarget:(i,r)=>{this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(i.parentNode,["edit","module"])?r.style.display="":r.style.display="none"}}]});this.menu=new Vt({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,buttons:[]}),this.menu.show(),n.show(),this.root.append(this.menu.root),this.root.append(n.root),this.staticMenu=n},Cc=function(e){this.root=z({props:{id:"mw-handle-item-layout-root"}});const t={};this.on=(n,i)=>{t[n]?t[n].push(i):t[n]=[i]},this.dispatch=(n,i)=>{t[n]&&t[n].forEach(r=>{r.call(this,i)})},this.menu=new Vt({id:"mw-handle-item-layout-menu",title:e.lang("Layout"),rootScope:e,buttons:[{title:e.lang("Settings"),text:"",icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 13.3 15.9" xml:space="preserve"><path d="M8.2,2.4L11,5.1l-8.2,8.2H0v-2.8L8.2,2.4z M11.8,4.3L9,1.6l1.4-1.4C10.5,0.1,10.7,0,10.9,0c0.2,0,0.4,0.1,0.5,0.2l1.7,1.7c0.1,0.1,0.2,0.3,0.2,0.5S13.3,2.8,13.1,3L11.8,4.3z"/><rect y="14.5" width="12" height="1.4"/></svg>',className:"mw-handle-insert-button",menu:[{title:e.lang("Add something"),text:e.lang("Add something"),icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" version="1.1" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button"},{title:e.lang("Settings1212"),text:"Do alert",className:"mw-handle-insert-button"}]},{title:e.lang("Clone"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>',className:"mw-handle-insert-button",action:function(n,i,r){var o=document.createElement("div");o.innerHTML=n.outerHTML,z("[id]",o).each(function(){this.id="le-id-"+new Date().getTime()}),z(n).after(o.innerHTML);var s=n.nextElementSibling;mw.reload_module(s,function(){r.statemanager.record({target:mw.tools.firstParentWithClass(n,"edit"),value:parent.innerHTML})}),s.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})}},{title:e.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(n,i){n.nextElementSibling===null?i.style.display="none":i.style.display=""},action:function(n,i){var r=n.nextElementSibling;if(r){var o=n.getBoundingClientRect(),s=r.getBoundingClientRect(),l=0;o.top<s.top&&(l=-(o.top-s.top)),n.classList.add("mw-le-target-to-animate"),r.classList.add("mw-le-target-to-animate"),n.style.transform="translateY("+l+"px)",r.style.transform="translateY("+-l+"px)",setTimeout(function(){r.parentNode.insertBefore(n,r.nextSibling),n.classList.remove("mw-le-target-to-animate"),r.classList.remove("mw-le-target-to-animate"),n.style.transform="",r.style.transform="",n.scrollIntoView({behavior:"smooth",block:"start",inline:"start"}),e.layoutHandle.set(n,!0)},300)}}},{title:e.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(n,i,r){n.previousElementSibling===null?i.style.display="none":i.style.display=""},action:function(n,i){var r=n.previousElementSibling;if(r){var o=n.getBoundingClientRect(),s=r.getBoundingClientRect(),l=0;o.top>s.top&&(l=-(o.top-s.top)),n.classList.add("mw-le-target-to-animate"),r.classList.add("mw-le-target-to-animate"),n.style.transform="translateY("+l+"px)",r.style.transform="translateY("+-l+"px)",setTimeout(function(){r.parentNode.insertBefore(n,r),n.classList.remove("mw-le-target-to-animate"),r.classList.remove("mw-le-target-to-animate"),n.style.transform="",r.style.transform="",e.layoutHandle.set(n,!0),n.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})},300)}}},{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path  d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(n,i,r){Ar("Are you sure",function(){mw.app.registerChange(n),n.remove()})}}]}),this.addButtons=function(){var n="Add Layout",i=r=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+r.charAt(0).toUpperCase()+r.slice(1))};this.plusTop=z({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:e.lang(n)}}),this.plusBottom=z({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:e.lang(n)}}),this.plusTop.on("click",function(){i("top")}),this.plusBottom.on("click",function(){i("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.menu.show(),this.addButtons(),this.root.append(this.menu.root)},bo={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},Sc=(e,t)=>((!t||!bo[t])&&(t="en"),bo[t][e]||e),Ac=function(e){this.root=z({props:{id:"mw-handle-interaction-item-element-root"}}),this.menu=new Vt({id:"mw-handle-item-element-menu",title:"Element",buttons:[]}),this.menu.show(),this.root.append(this.menu.root)};mw.pauseSave=!1;mw.askusertostay=!1;window.top===window&&(window.onbeforeunload=function(){if(mw.askusertostay)return mw.notification.warning(mw.lang("You have unsaved changes")),mw.lang("You have unsaved changes")});window.mwd=document;window.mww=window;window.mwhead=document.head||document.getElementsByTagName("head")[0];mw.doc=document;mw.win=window;mw.head=mwhead;mw.loaded=!1;mw._random=new Date().getTime();mw.random=function(){return mw._random++};mw.id=function(e){return e=e||"mw-",e+mw.random()};mw.onLive=function(e){typeof mw.settings.liveEdit=="boolean"&&mw.settings.liveEdit&&e.call(this)};mw.onAdmin=function(e){window.mwAdmin&&e.call(this)};mw.target={};mw.log=function(e){window.console&&mw.settings.debug&&top.console.log(e)};mw.$=function(e,t){if(typeof e=="object"||typeof e=="string"&&e.indexOf("<")!==-1)return jQuery(e);if(t=t||mwd,typeof document.querySelector<"u")if(typeof e=="string")try{return jQuery(t.querySelectorAll(e))}catch{return jQuery(e,t)}else return jQuery(e,t);else return jQuery(e,t)};mw.parent=function(){return window===top?window.mw:mw.tools.canAccessWindow(parent)&&parent.mw?parent.mw:window.mw};mw.top=function(){if(mw.__top)return mw.__top;var e=function(){for(var t=window,n=window;n&&mw.tools.canAccessWindow(n)&&(n.mw||n.parent.mw);)t=n,n=n.parent;return mw.__top=n.mw,t.mw};return window===top?(mw.__top=window.mw,window.mw):mw.tools.canAccessWindow(top)&&top.mw?(mw.__top=top.mw,top.mw):window.top!==window.parent?e():(mw.__top=window.mw,window.mw)};mw.require("stylesheet.editor.js");class Oc{constructor(t){const n=this,i={};this.on=(w,y)=>{i[w]?i[w].push(y):i[w]=[y]},this.dispatch=(w,y)=>{i[w]&&i[w].forEach(O=>{O.call(this,y)})},this.paused=!1;var r={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=Ye.extend({},r,t),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(w){return Sc(w,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new es(this.settings),this.dropIndicator=new wc(this.settings);const o=new xc(this),s=new Ec(this),l=new Cc(this);this.elementHandleContent=o,this.moduleHandleContent=s,this.layoutHandleContent=l,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.layoutHandleContent.on("insertLayoutRequestOnTop",()=>{this.dispatch("insertLayoutRequestOnTop")}),this.layoutHandleContent.on("insertLayoutRequestOnBottom",()=>{this.dispatch("insertLayoutRequestOnBottom")}),this.dialog=function(w){w||(w={});var y={document:window.top.document,position:s.menu.getTarget(),mode:"absolute"};n.pause();const O=new ns(Ye.extend({},y,w));return O.on("close",function(){n.play()}),O};var d=this.elementHandle=new jn({...this.settings,dropIndicator:this.dropIndicator,content:o.root,handle:z(".mw-handle-drag-button",o.root.get(0)),handle:"self",document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});this.isResizing=!1,d.resizer.on("resizeStart",w=>this.isResizing=!0),d.resizer.on("resizeStop",w=>this.isResizing=!1),d.on("targetChange",function(w){o.menu.setTarget(w),w.className.includes("col-")?d.resizer.disable():d.resizer.enable()}),this.moduleHandle=new jn({...this.settings,dropIndicator:this.dropIndicator,content:s.root,handle:s.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!1});var f=this.moduleHandle;this.getModuleQuickSettings=w=>new Promise(y=>{y(mw.quickSettings[w]),this.dispatch("moduleQuickSettings",{module:w})}),f.on("targetChange",function(w){n.getModuleQuickSettings(w.dataset.type).then(function(y){s.menu.root.remove(),s.menu=new Vt({id:"mw-handle-item-element-menu",title:w.dataset.type,rootScope:n,buttons:y?y.mainMenu||[]:[],data:{target:w}}),s.menu.setTarget(w),s.staticMenu.setTarget(w),s.menu.show(),s.root.append(s.menu.root)})}),this.layoutHandle=new jn({...this.settings,dropIndicator:this.dropIndicator,content:l.root,handle:l.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var m=this.layoutHandle,p=n.lang("Layout");l.menu.setTitle(p),m.on("targetChange",function(w){l.menu.setTarget(w),l.menu.setTitle(p),n.elementAnalyzer.isEditOrInEdit(w)?(l.plusTop.show(),l.plusBottom.show()):(l.plusTop.hide(),l.plusBottom.hide())}),l.handle=m,s.handle=f,o.handle=d;const g=new Ac;this.interactionHandle=new jn({...this.settings,content:g.root,document:this.settings.document,resizable:!1,className:"mw-handle-item-interaction-handle"}),this.interactionHandle.menu=g.menu,this.handles=new vc({element:d,module:f,layout:m,interactionHandle:this.interactionHandle}),this.observe=new dc(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}init(){this.settings.mode==="auto"&&setInterval(()=>gc(this),1e3);const t=s=>{if(s&&s.classList&&s.classList.contains("module-custom-fields")){var l=ve.firstParentOrCurrentWithClass(s,"module-contact-form");l&&(s=l)}return s},n=s=>{if(this.handles.targetIsOrInsideHandle(s)){this.document.querySelectorAll("[contenteditable]").forEach(g=>g.contentEditable=!1);return}const l=[];["IMG"].indexOf(s.target.nodeName)!==-1?l.push(s.target):l.push(ve.firstBlockLevel(s.target));let f=l[0];const m=ve.firstParentOrCurrentWithAnyOfClasses(l[0],["element","module","cloneable","layout","edit"]);if(console.log(m),f.nodeName!=="IMG"&&(f=ve.firstBlockLevel(l[0])),f=m,this.document.querySelectorAll("[contenteditable]").forEach(g=>g.contentEditable=!1),this.document.querySelectorAll("[data-mw-live-edithover]").forEach(g=>delete g.dataset.mwLiveEdithover),this.handles.get("element").set(null),this.handles.get("module").set(null),this.handles.hide(),console.log(l),f){f=t(f);const g=this.elementAnalyzer.getType(f);if(g!=="layout"){var p=ve.firstParentOrCurrentWithClass(f,"module-layouts");p&&this.handles.set("layout",p)}console.log(g),g&&(g==="element"?(this.handles.hide("module"),this.handles.set(g,f)):g==="module"?(this.handles.hide("element"),this.handles.set(g,f)):g==="layout"?this.handles.set("layout",f):g==="edit"?this.handles.set("element",f):this.handles.hide())}else{const g=ve.firstParentOrCurrentWithAnyOfClasses(s.target,["module-layouts"]);g&&this.handles.set("layout",g)}};let i,r=[];i="mousedown touchstart",z(this.root).on("mousemove",s=>{if(this.paused||this.isResizing){this.interactionHandle.hide();return}if(this.handles.targetIsOrInsideHandle(s)){this.interactionHandle.hide();return}const l=this.observe.fromEvent(s);let d=ve.firstParentOrCurrentWithAnyOfClasses(l[0],["element","module","cloneable","edit"]);const f=ve.firstParentOrCurrentWithAnyOfClasses(s.target,["module-layouts"]);let m=!1;if(d=t(d),d&&r.indexOf(d)===-1&&(r.forEach(g=>delete g.dataset.mwLiveEdithover),r=[],this.handles.targetIsSelected(d,this.interactionHandle)||(d.dataset.mwLiveEdithover=!0,r.push(d))),f&&!d){const g=this.handles.get("element").getTarget(),w=this.handles.get("module").getTarget();f.contains(g)&&(m=!0),f.contains(w)&&(m=!0),m?this.handles.hide("layout"):this.handles.set("layout",f)}if(d&&!this.handles.targetIsSelectedAndHandleIsNotHidden(d,this.interactionHandle)&&!d.classList.contains("module-layouts")){var p="";d.dataset.mwTitle?p=d.dataset.mwTitle:d.dataset.type?p=d.dataset.type:d.nodeName==="P"?p=this.lang("Paragraph"):/(H[1-6])/.test(d.nodeName)?p=this.lang("Title")+" "+d.nodeName.replace(/^\D+/g,""):d.nodeName==="IMG"||d.nodeName==="IMAGE"?p=this.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(d.nodeName)?p=this.lang("Title "+d.nodeName.replace("H","")):["DIV","MAIN","SECTION"].includes(d.nodeName)?p=this.lang("Block"):p=this.lang("Text"),this.interactionHandle.menu.setTitle(p),this.interactionHandle.show(),this.interactionHandle.set(d)}else this.interactionHandle.hide()});let o;z(this.root).on("dblclick",s=>{const l=mw.app.liveEdit.elementHandle.getTarget();l&&l.contains(o)&&mw.app.editor.dispatch("editNodeRequest",l),!l&&s.target.classList.contains("edit")&&s.target.style.backgroundImage&&mw.app.editor.dispatch("editNodeRequest",s.target)}),z(this.root).on(i,s=>{if(o=s.target,!this.paused)n(s);else{var l=this.elementHandle.getTarget();l&&!l.contains(s.target)&&this.play()}})}}globalThis.LiveEdit=Oc;const lf=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:none}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:999;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:none}.mw-handle-item.mw-le-resizable{position:absolute}.mw-handle-item.mw-handle-item-interaction-handle{pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden;pointer-events:none}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;pointer-events:none}.mw-draggable-helper .mw-element-is-dragged{opacity:1;pointer-events:none}.mw-le-handle-menu{position:absolute;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;border-radius:7px;border:1px solid transparent;padding:3px 12px;display:inline-flex;align-items:center;background-color:#fff;pointer-events:all;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;position:absolute;top:-40px;left:-3px;transition:.2s;opacity:0;transform:translateY(10px);z-index:2}.mw-le-handle-menu .mw-le-handle-menu-buttons:empty{display:none!important}.mw-le-handle-menu *{vertical-align:middle}.mw-handle-item.mw-handle-active .mw-le-handle-menu .mw-le-handle-menu-buttons{opacity:1;transform:translateY(0)}#mw-handle-item-element-menu{top:-22px;left:-3px}#mw-handle-item-layout-menu{top:5px;right:5px;left:auto}#mw-handle-item-layout-menu .mw-le-handle-menu-buttons{left:auto;right:5px;top:5px}#mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-drag-button{cursor:grab}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:none;align-items:center;justify-content:center;padding:0 5px;height:20px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:grab;background-color:#0078ff;color:#fff}.mw-handle-item-interaction-handle .mw-le-handle-menu-title{display:inline-flex}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#0078ff;color:#fff;border-radius:7px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#016ce6}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}[data-mw-live-edithover=true]>*{pointer-events:none}[data-mw-live-edithover=true]>* .module,[data-mw-live-edithover=true]>* .element,[data-mw-live-edithover=true]>* .cloneable,[data-mw-live-edithover=true]>* .edit{pointer-events:all}[data-mw-live-edithover=true]>*.module,[data-mw-live-edithover=true]>*.element,[data-mw-live-edithover=true]>*.cloneable,[data-mw-live-edithover=true]>*.edit{pointer-events:all}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}.mw-handle-item-draggable-self{position:absolute;pointer-events:all;inset:0;z-index:10;display:none}.mw-handle-item-draggable-self.active{display:block}.mw-handle-item.mw-le-resizable .mw-le-resizer:before,.mw-handle-item.mw-le-resizable .mw-le-resizer:after{position:absolute;width:9px;height:9px;background-color:#fff;border:2px solid #2a84fb;content:""}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before{top:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{top:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{left:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before{bottom:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{bottom:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{top:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before{left:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{left:calc(50% - 4px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before{right:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{right:calc(50% - 5px)}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizable.mw-le-resizable-disabled .mw-le-resizer{display:none}.mw-le-resizer{position:absolute;pointer-events:all}.mw-le-resizer-r{cursor:e-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-l{cursor:e-resize;height:100%;left:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:n-resize;height:5px;left:0;width:100%}.mw-le-resizer-t{top:0;cursor:n-resize;height:5px;left:0;width:100%}mw-le-element{display:block;line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;box-sizing:border-box}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}body:not(.is_admin) [contenteditable=true]{outline:1px dotted #ccc;outline-offset:7px}.FIE_topbar-save-wrapper,.FIE_topbar-close-button{display:none!important}#sidebar-menu{overflow:auto;max-height:calc(100vh - 20px)}
`;var We,ft,Ot,vn,Zi,wn,Qi,ri,rs;class is{constructor(t={}){Te(this,vn);Te(this,wn);Te(this,ri);Te(this,We,null);Te(this,ft,{});He(this,"selectedCategory","");Te(this,Ot,[]);He(this,"root",null);const n={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},n,t),this.document=this.settings.document}on(t,n){B(this,ft)[t]?B(this,ft)[t].push(n):B(this,ft)[t]=[n]}dispatch(t,n){B(this,ft)[t]&&B(this,ft)[t].forEach(i=>{i.call(this,n)})}getData(){return B(this,We)}setData(t,n=!0){It(this,We,t);let i=0,r=B(this,We).length;for(;i<r;i++)typeof B(this,We)[i].categories=="string"&&(B(this,We)[i].categories=B(this,We)[i].categories.split(",").map(o=>o.trim()));n&&this.dispatch("dataChanged",B(this,We))}prepareCategories(){const t=[],n=this.getData();let i=0,r=n.length;for(;i<r;i++){let s=n[i].categories||"",l=0,d=s.length;for(;l<d;l++){const f=s[l].trim();t.indexOf(f)===-1&&t.push(f)}}t.sort(),this.categories=t}createCategoriesMenu(){const t=this.document.createElement("ul");this.prepareCategories(),t.className="modules-list-categories",t.innerHTML=this.categories.map(n=>`<li data-category="${n}">${n}</li>`).join(""),t.innerHTML=`<li data-category="">All categories</li> ${t.innerHTML}`,t.addEventListener("click",n=>{n.target.nodeName==="LI"&&this.selectCategory(n.target.dataset.category)}),this.categoriesNavigation=t,this.rootShadow.appendChild(t),this.on("categorySelect",n=>{const i=t.querySelectorAll("[data-category]");for(const r of i)r.classList[r.dataset.category===n?"add":"remove"]("active")})}selectCategory(t=""){this.selectedCategory=t,this.search(t),this.dispatch("categorySelect",t)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let t=document.createElement("style");t.textContent=this.settings.css,this.rootShadow.appendChild(t)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let n=0,i=t.length;const r={miscellaneous:et(this,wn,Qi).call(this,"miscellaneous")};for(;n<i;n++)(t[n].categories||["miscellaneous"]).forEach(s=>{r[s]||(r[s]=et(this,wn,Qi).call(this,s));const l=et(this,vn,Zi).call(this,t[n]);B(this,Ot).push(l),r[s].appendChild(l),r[s].__$hasNodes=!0});for(const o in r)r[o].__$hasNodes&&this.modulesList.appendChild(r[o]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let n=0,i=t.length;for(;n<i;n++){const r=et(this,vn,Zi).call(this,t[n]);B(this,Ot).push(r),this.modulesList.appendChild(r)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(t){t.nodeName&&(t.style.display="none")}showItem(t){t.nodeName&&(t.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",t=>this.search(void 0,this.searchField.value)),this.on("categorySelect",t=>{this.searchField.value=""})}async search(t="",n=""){if(this.settings.searchMode==="local")return et(this,ri,rs).call(this,t,n)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(t=>{t(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(t=>{t(this)})}}We=new WeakMap,ft=new WeakMap,Ot=new WeakMap,vn=new WeakSet,Zi=function(t){t.locked=t.description.includes("a");const n=this.document.createElement("div");return n.className="modules-list-block-item modules-list-block-item-is-locked-"+t.locked,n.__$data=t,n.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${t.icon||t.screenshot||t.image})"></div>
            <div class="modules-list-block-item-title">${t.name||t.title}</div>
            <div class="modules-list-block-item-description">${t.description}</div>
            ${t.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,n.addEventListener("click",i=>{i.stopPropagation(),n.__$data.locked?this.dispatch("lockedModuleSelected",{data:t,element:n}):this.dispatch("moduleSelected",{data:t,element:n})}),n.$data=t,n},wn=new WeakSet,Qi=function(t){const n=this.document.createElement("div");return n.className="modules-list-block-category-section",n.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+t+"</h5></div>",n.__$hasNodes=!1,n},ri=new WeakSet,rs=async function(t,n){return t&&(t=t.trim().toLowerCase()),n&&(n=n.trim().toLowerCase()),new Promise(i=>{let r=0,o=B(this,Ot).length,s=0;for(;r<o;r++){const l=B(this,Ot)[r],d=l.$data;if(t&&d.categories.indexOf(t)===-1){this.hideItem(l);continue}if(n&&(d.name||d.title).toLowerCase().indexOf(n)===-1){this.hideItem(l);continue}this.showItem(l),s++}console.log(n,t),this.modulesListNoResultsNode.style.display=s===0?"":"none",i()})};const Kn=[],os=function(e){Kn.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+e}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",t=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(e){(e.key==="Escape"||e.keyCode===27)&&Kn.length>0&&(Kn[0].remove(),Kn.splice(0,1))});var er,yo=function(e){var t=new is({data:er});t.create().then(function(){var n=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),i=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),r=mw.element({props:{className:"mw-le-layouts-dialog-col"}});n.append(i),n.append(r),mw.element(t.root).append(n),i.append(t.searchBlock);var o=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});i.append(o),i.append(t.categoriesNavigation),r.append(t.modulesList),e.append(t.root)})};const Tc=()=>{var e=new os("mw-le-layouts-dialog"),t=e.dialog;if(er){yo(t);return}mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(n){return n.json()}).then(function(n){er=n,yo(t),mw.spinner({element:t.get(0),decorate:!0}).remove()})};var tr,_o=function(e){var t=new is({data:tr});t.createCategorized().then(function(){e.append(t.root)})};const Lc=()=>{var e=new os("mw-le-modules-dialog"),t=e.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var n=mw.$(this).attr("data-module-name"),i={class:this.className};n==="layout"&&(i.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,n,i,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),tr?_o(t):(mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(n){return n.json()}).then(function(n){tr=n,_o(t),mw.spinner({element:t.get(0),decorate:!0}).remove()}))},Nc={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return Lc()},insertLayout:function(){return Tc()}},kc={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await Zn.get(route("api.module.list")+"?layout_type=module").then(e=>{this.modulesListData=e.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(e){if(this.modulesSkinsData[e])return this.modulesSkinsData[e];if(await Zn.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.modulesSkinsData[e]=t.data}),this.modulesSkinsData[e])return this.modulesSkinsData[e]}},Dc={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await Zn.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(e=>{this.layoutsListData=e.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var e="layouts";if(this.layoutSkinsData[e])return this.layoutSkinsData[e];if(await Zn.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.layoutSkinsData[e]=t.data}),this.layoutSkinsData[e])return this.layoutSkinsData[e]}};class Mc extends oi{constructor(){super()}onRegister(){}}class Rc extends oi{selectIcon(t){var n=$(t)[0];mw.iconLoader().init();var i=mw.iconPicker({iconOptions:!1});i.target=document.createElement("i"),i.on("select",function(r){r.render(),n.value=i.target.outerHTML;var o=new Event("input");n.dispatchEvent(o),i.dialog("hide")}),i.dialog()}removeIcon(t){var n=$(t)[0];n.value="";var i=new Event("input");n.dispatchEvent(i)}}class Hc extends oi{constructor(){super()}selectLink(t){var n=new(mw.top()).LinkEditor({mode:"dialog",controllers:[{type:"url",config:{text:!1,target:!1}},{type:"page",config:{text:!1,target:!1}},{type:"post",config:{text:!1,target:!1}},{type:"file",config:{text:!1,target:!1}},{type:"email",config:{text:!1,target:!1}},{type:"layout",config:{text:!1,target:!1}}]});mw.$(t)&&n.setValue({url:mw.$(t).val()||""});var i=this;n.promise().then(function(r){if(r){var o={},s=r.url;o.url=s,r.data&&r.data.id&&(o.id=r.data.id,r.data.type&&r.data.type==="category"?o.type="category":(r.data.type&&r.data.type==="page"||r.data.content_type)&&(o.type="content")),i.dispatch("selected",o)}})}}(()=>{function e(a,u){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var h=Object.getOwnPropertySymbols(a);u&&(h=h.filter(function(v){return Object.getOwnPropertyDescriptor(a,v).enumerable})),c.push.apply(c,h)}return c}function t(a){for(var u=1;u<arguments.length;u++){var c=arguments[u]!=null?arguments[u]:{};u%2?e(Object(c),!0).forEach(function(h){i(a,h,c[h])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(c)):e(Object(c)).forEach(function(h){Object.defineProperty(a,h,Object.getOwnPropertyDescriptor(c,h))})}return a}function n(a){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?n=function(u){return typeof u}:n=function(u){return u&&typeof Symbol=="function"&&u.constructor===Symbol&&u!==Symbol.prototype?"symbol":typeof u},n(a)}function i(a,u,c){return u in a?Object.defineProperty(a,u,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[u]=c,a}function r(){return r=Object.assign||function(a){for(var u=1;u<arguments.length;u++){var c=arguments[u];for(var h in c)Object.prototype.hasOwnProperty.call(c,h)&&(a[h]=c[h])}return a},r.apply(this,arguments)}function o(a,u){if(a==null)return{};var c={},h=Object.keys(a),v,b;for(b=0;b<h.length;b++)v=h[b],!(u.indexOf(v)>=0)&&(c[v]=a[v]);return c}function s(a,u){if(a==null)return{};var c=o(a,u),h,v;if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(a);for(v=0;v<b.length;v++)h=b[v],!(u.indexOf(h)>=0)&&(!Object.prototype.propertyIsEnumerable.call(a,h)||(c[h]=a[h]))}return c}var l="1.15.0";function d(a){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(a)}var f=d(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),m=d(/Edge/i),p=d(/firefox/i),g=d(/safari/i)&&!d(/chrome/i)&&!d(/android/i),w=d(/iP(ad|od|hone)/i),y=d(/chrome/i)&&d(/android/i),O={capture:!1,passive:!1};function E(a,u,c){a.addEventListener(u,c,!f&&O)}function T(a,u,c){a.removeEventListener(u,c,!f&&O)}function V(a,u){if(u){if(u[0]===">"&&(u=u.substring(1)),a)try{if(a.matches)return a.matches(u);if(a.msMatchesSelector)return a.msMatchesSelector(u);if(a.webkitMatchesSelector)return a.webkitMatchesSelector(u)}catch{return!1}return!1}}function J(a){return a.host&&a!==document&&a.host.nodeType?a.host:a.parentNode}function X(a,u,c,h){if(a){c=c||document;do{if(u!=null&&(u[0]===">"?a.parentNode===c&&V(a,u):V(a,u))||h&&a===c)return a;if(a===c)break}while(a=J(a))}return null}var U=/\s+/g;function C(a,u,c){if(a&&u)if(a.classList)a.classList[c?"add":"remove"](u);else{var h=(" "+a.className+" ").replace(U," ").replace(" "+u+" "," ");a.className=(h+(c?" "+u:"")).replace(U," ")}}function S(a,u,c){var h=a&&a.style;if(h){if(c===void 0)return document.defaultView&&document.defaultView.getComputedStyle?c=document.defaultView.getComputedStyle(a,""):a.currentStyle&&(c=a.currentStyle),u===void 0?c:c[u];!(u in h)&&u.indexOf("webkit")===-1&&(u="-webkit-"+u),h[u]=c+(typeof c=="string"?"":"px")}}function R(a,u){var c="";if(typeof a=="string")c=a;else do{var h=S(a,"transform");h&&h!=="none"&&(c=h+" "+c)}while(!u&&(a=a.parentNode));var v=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return v&&new v(c)}function Q(a,u,c){if(a){var h=a.getElementsByTagName(u),v=0,b=h.length;if(c)for(;v<b;v++)c(h[v],v);return h}return[]}function ee(){var a=document.scrollingElement;return a||document.documentElement}function k(a,u,c,h,v){if(!(!a.getBoundingClientRect&&a!==window)){var b,_,N,A,M,H,F;if(a!==window&&a.parentNode&&a!==ee()?(b=a.getBoundingClientRect(),_=b.top,N=b.left,A=b.bottom,M=b.right,H=b.height,F=b.width):(_=0,N=0,A=window.innerHeight,M=window.innerWidth,H=window.innerHeight,F=window.innerWidth),(u||c)&&a!==window&&(v=v||a.parentNode,!f))do if(v&&v.getBoundingClientRect&&(S(v,"transform")!=="none"||c&&S(v,"position")!=="static")){var se=v.getBoundingClientRect();_-=se.top+parseInt(S(v,"border-top-width")),N-=se.left+parseInt(S(v,"border-left-width")),A=_+b.height,M=N+b.width;break}while(v=v.parentNode);if(h&&a!==window){var q=R(v||a),me=q&&q.a,te=q&&q.d;q&&(_/=te,N/=me,F/=me,H/=te,A=_+H,M=N+F)}return{top:_,left:N,bottom:A,right:M,width:F,height:H}}}function D(a,u,c){for(var h=ye(a,!0),v=k(a)[u];h;){var b=k(h)[c],_=void 0;if(c==="top"||c==="left"?_=v>=b:_=v<=b,!_)return h;if(h===ee())break;h=ye(h,!1)}return!1}function W(a,u,c,h){for(var v=0,b=0,_=a.children;b<_.length;){if(_[b].style.display!=="none"&&_[b]!==P.ghost&&(h||_[b]!==P.dragged)&&X(_[b],c.draggable,a,!1)){if(v===u)return _[b];v++}b++}return null}function I(a,u){for(var c=a.lastElementChild;c&&(c===P.ghost||S(c,"display")==="none"||u&&!V(c,u));)c=c.previousElementSibling;return c||null}function Y(a,u){var c=0;if(!a||!a.parentNode)return-1;for(;a=a.previousElementSibling;)a.nodeName.toUpperCase()!=="TEMPLATE"&&a!==P.clone&&(!u||V(a,u))&&c++;return c}function de(a){var u=0,c=0,h=ee();if(a)do{var v=R(a),b=v.a,_=v.d;u+=a.scrollLeft*b,c+=a.scrollTop*_}while(a!==h&&(a=a.parentNode));return[u,c]}function Ve(a,u){for(var c in a)if(a.hasOwnProperty(c)){for(var h in u)if(u.hasOwnProperty(h)&&u[h]===a[c][h])return Number(c)}return-1}function ye(a,u){if(!a||!a.getBoundingClientRect)return ee();var c=a,h=!1;do if(c.clientWidth<c.scrollWidth||c.clientHeight<c.scrollHeight){var v=S(c);if(c.clientWidth<c.scrollWidth&&(v.overflowX=="auto"||v.overflowX=="scroll")||c.clientHeight<c.scrollHeight&&(v.overflowY=="auto"||v.overflowY=="scroll")){if(!c.getBoundingClientRect||c===document.body)return ee();if(h||u)return c;h=!0}}while(c=c.parentNode);return ee()}function Ke(a,u){if(a&&u)for(var c in u)u.hasOwnProperty(c)&&(a[c]=u[c]);return a}function nt(a,u){return Math.round(a.top)===Math.round(u.top)&&Math.round(a.left)===Math.round(u.left)&&Math.round(a.height)===Math.round(u.height)&&Math.round(a.width)===Math.round(u.width)}var Je;function it(a,u){return function(){if(!Je){var c=arguments,h=this;c.length===1?a.call(h,c[0]):a.apply(h,c),Je=setTimeout(function(){Je=void 0},u)}}}function Me(){clearTimeout(Je),Je=void 0}function Ee(a,u,c){a.scrollLeft+=u,a.scrollTop+=c}function Ne(a){var u=window.Polymer,c=window.jQuery||window.Zepto;return u&&u.dom?u.dom(a).cloneNode(!0):c?c(a).clone(!0)[0]:a.cloneNode(!0)}var ie="Sortable"+new Date().getTime();function pe(){var a=[],u;return{captureAnimationState:function(){if(a=[],!!this.options.animation){var c=[].slice.call(this.el.children);c.forEach(function(h){if(!(S(h,"display")==="none"||h===P.ghost)){a.push({target:h,rect:k(h)});var v=t({},a[a.length-1].rect);if(h.thisAnimationDuration){var b=R(h,!0);b&&(v.top-=b.f,v.left-=b.e)}h.fromRect=v}})}},addAnimationState:function(c){a.push(c)},removeAnimationState:function(c){a.splice(Ve(a,{target:c}),1)},animateAll:function(c){var h=this;if(!this.options.animation){clearTimeout(u),typeof c=="function"&&c();return}var v=!1,b=0;a.forEach(function(_){var N=0,A=_.target,M=A.fromRect,H=k(A),F=A.prevFromRect,se=A.prevToRect,q=_.rect,me=R(A,!0);me&&(H.top-=me.f,H.left-=me.e),A.toRect=H,A.thisAnimationDuration&&nt(F,H)&&!nt(M,H)&&(q.top-H.top)/(q.left-H.left)==(M.top-H.top)/(M.left-H.left)&&(N=Ce(q,F,se,h.options)),nt(H,M)||(A.prevFromRect=M,A.prevToRect=H,N||(N=h.options.animation),h.animate(A,q,H,N)),N&&(v=!0,b=Math.max(b,N),clearTimeout(A.animationResetTimer),A.animationResetTimer=setTimeout(function(){A.animationTime=0,A.prevFromRect=null,A.fromRect=null,A.prevToRect=null,A.thisAnimationDuration=null},N),A.thisAnimationDuration=N)}),clearTimeout(u),v?u=setTimeout(function(){typeof c=="function"&&c()},b):typeof c=="function"&&c(),a=[]},animate:function(c,h,v,b){if(b){S(c,"transition",""),S(c,"transform","");var _=R(this.el),N=_&&_.a,A=_&&_.d,M=(h.left-v.left)/(N||1),H=(h.top-v.top)/(A||1);c.animatingX=!!M,c.animatingY=!!H,S(c,"transform","translate3d("+M+"px,"+H+"px,0)"),this.forRepaintDummy=ue(c),S(c,"transition","transform "+b+"ms"+(this.options.easing?" "+this.options.easing:"")),S(c,"transform","translate3d(0,0,0)"),typeof c.animated=="number"&&clearTimeout(c.animated),c.animated=setTimeout(function(){S(c,"transition",""),S(c,"transform",""),c.animated=!1,c.animatingX=!1,c.animatingY=!1},b)}}}}function ue(a){return a.offsetWidth}function Ce(a,u,c,h){return Math.sqrt(Math.pow(u.top-a.top,2)+Math.pow(u.left-a.left,2))/Math.sqrt(Math.pow(u.top-c.top,2)+Math.pow(u.left-c.left,2))*h.animation}var Se=[],Re={initializeByDefault:!0},Ae={mount:function(a){for(var u in Re)Re.hasOwnProperty(u)&&!(u in a)&&(a[u]=Re[u]);Se.forEach(function(c){if(c.pluginName===a.pluginName)throw"Sortable: Cannot mount plugin ".concat(a.pluginName," more than once")}),Se.push(a)},pluginEvent:function(a,u,c){var h=this;this.eventCanceled=!1,c.cancel=function(){h.eventCanceled=!0};var v=a+"Global";Se.forEach(function(b){!u[b.pluginName]||(u[b.pluginName][v]&&u[b.pluginName][v](t({sortable:u},c)),u.options[b.pluginName]&&u[b.pluginName][a]&&u[b.pluginName][a](t({sortable:u},c)))})},initializePlugins:function(a,u,c,h){Se.forEach(function(_){var N=_.pluginName;if(!(!a.options[N]&&!_.initializeByDefault)){var A=new _(a,u,a.options);A.sortable=a,A.options=a.options,a[N]=A,r(c,A.defaults)}});for(var v in a.options)if(a.options.hasOwnProperty(v)){var b=this.modifyOption(a,v,a.options[v]);typeof b<"u"&&(a.options[v]=b)}},getEventProperties:function(a,u){var c={};return Se.forEach(function(h){typeof h.eventProperties=="function"&&r(c,h.eventProperties.call(u[h.pluginName],a))}),c},modifyOption:function(a,u,c){var h;return Se.forEach(function(v){!a[v.pluginName]||v.optionListeners&&typeof v.optionListeners[u]=="function"&&(h=v.optionListeners[u].call(a[v.pluginName],c))}),h}};function ne(a){var u=a.sortable,c=a.rootEl,h=a.name,v=a.targetEl,b=a.cloneEl,_=a.toEl,N=a.fromEl,A=a.oldIndex,M=a.newIndex,H=a.oldDraggableIndex,F=a.newDraggableIndex,se=a.originalEvent,q=a.putSortable,me=a.extraEventProperties;if(u=u||c&&c[ie],!!u){var te,Ge=u.options,Oe="on"+h.charAt(0).toUpperCase()+h.substr(1);window.CustomEvent&&!f&&!m?te=new CustomEvent(h,{bubbles:!0,cancelable:!0}):(te=document.createEvent("Event"),te.initEvent(h,!0,!0)),te.to=_||c,te.from=N||c,te.item=v||c,te.clone=b,te.oldIndex=A,te.newIndex=M,te.oldDraggableIndex=H,te.newDraggableIndex=F,te.originalEvent=se,te.pullMode=q?q.lastPutMode:void 0;var Ze=t(t({},me),Ae.getEventProperties(h,u));for(var xe in Ze)te[xe]=Ze[xe];c&&c.dispatchEvent(te),Ge[Oe]&&Ge[Oe].call(u,te)}}var G=["evt"],Z=function(a,u){var c=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},h=c.evt,v=s(c,G);Ae.pluginEvent.bind(P)(a,u,t({dragEl:L,parentEl:ce,ghostEl:j,rootEl:oe,nextEl:vt,lastDownEl:An,cloneEl:le,cloneHidden:rt,dragStarted:Gt,putSortable:be,activeSortable:P.active,originalEvent:h,oldIndex:kt,oldDraggableIndex:Jt,newIndex:ke,newDraggableIndex:ot,hideGhostForTarget:to,unhideGhostForTarget:no,cloneNowHidden:function(){rt=!0},cloneNowShown:function(){rt=!1},dispatchSortableEvent:function(b){re({sortable:u,name:b,originalEvent:h})}},v))};function re(a){ne(t({putSortable:be,cloneEl:le,targetEl:L,rootEl:oe,oldIndex:kt,oldDraggableIndex:Jt,newIndex:ke,newDraggableIndex:ot},a))}var L,ce,j,oe,vt,An,le,rt,kt,ke,Jt,ot,On,be,Dt=!1,Tn=!1,Ln=[],wt,Be,Ci,Si,Kr,Jr,Gt,Mt,Zt,Qt=!1,Nn=!1,kn,_e,Ai=[],Oi=!1,Dn=[],Mn=typeof document<"u",Rn=w,Gr=m||f?"cssFloat":"float",Ca=Mn&&!y&&!w&&"draggable"in document.createElement("div"),Zr=function(){if(Mn){if(f)return!1;var a=document.createElement("x");return a.style.cssText="pointer-events:auto",a.style.pointerEvents==="auto"}}(),Qr=function(a,u){var c=S(a),h=parseInt(c.width)-parseInt(c.paddingLeft)-parseInt(c.paddingRight)-parseInt(c.borderLeftWidth)-parseInt(c.borderRightWidth),v=W(a,0,u),b=W(a,1,u),_=v&&S(v),N=b&&S(b),A=_&&parseInt(_.marginLeft)+parseInt(_.marginRight)+k(v).width,M=N&&parseInt(N.marginLeft)+parseInt(N.marginRight)+k(b).width;if(c.display==="flex")return c.flexDirection==="column"||c.flexDirection==="column-reverse"?"vertical":"horizontal";if(c.display==="grid")return c.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(v&&_.float&&_.float!=="none"){var H=_.float==="left"?"left":"right";return b&&(N.clear==="both"||N.clear===H)?"vertical":"horizontal"}return v&&(_.display==="block"||_.display==="flex"||_.display==="table"||_.display==="grid"||A>=h&&c[Gr]==="none"||b&&c[Gr]==="none"&&A+M>h)?"vertical":"horizontal"},Sa=function(a,u,c){var h=c?a.left:a.top,v=c?a.right:a.bottom,b=c?a.width:a.height,_=c?u.left:u.top,N=c?u.right:u.bottom,A=c?u.width:u.height;return h===_||v===N||h+b/2===_+A/2},Aa=function(a,u){var c;return Ln.some(function(h){var v=h[ie].options.emptyInsertThreshold;if(!(!v||I(h))){var b=k(h),_=a>=b.left-v&&a<=b.right+v,N=u>=b.top-v&&u<=b.bottom+v;if(_&&N)return c=h}}),c},eo=function(a){function u(v,b){return function(_,N,A,M){var H=_.options.group.name&&N.options.group.name&&_.options.group.name===N.options.group.name;if(v==null&&(b||H))return!0;if(v==null||v===!1)return!1;if(b&&v==="clone")return v;if(typeof v=="function")return u(v(_,N,A,M),b)(_,N,A,M);var F=(b?_:N).options.group.name;return v===!0||typeof v=="string"&&v===F||v.join&&v.indexOf(F)>-1}}var c={},h=a.group;(!h||n(h)!="object")&&(h={name:h}),c.name=h.name,c.checkPull=u(h.pull,!0),c.checkPut=u(h.put),c.revertClone=h.revertClone,a.group=c},to=function(){!Zr&&j&&S(j,"display","none")},no=function(){!Zr&&j&&S(j,"display","")};Mn&&!y&&document.addEventListener("click",function(a){if(Tn)return a.preventDefault(),a.stopPropagation&&a.stopPropagation(),a.stopImmediatePropagation&&a.stopImmediatePropagation(),Tn=!1,!1},!0);var bt=function(a){if(L){a=a.touches?a.touches[0]:a;var u=Aa(a.clientX,a.clientY);if(u){var c={};for(var h in a)a.hasOwnProperty(h)&&(c[h]=a[h]);c.target=c.rootEl=u,c.preventDefault=void 0,c.stopPropagation=void 0,u[ie]._onDragOver(c)}}},Oa=function(a){L&&L.parentNode[ie]._isOutsideThisEl(a.target)};function P(a,u){if(!(a&&a.nodeType&&a.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(a));this.el=a,this.options=u=r({},u),a[ie]=this;var c={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(a.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Qr(a,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(b,_){b.setData("Text",_.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:P.supportPointer!==!1&&"PointerEvent"in window&&!g,emptyInsertThreshold:5};Ae.initializePlugins(this,a,c);for(var h in c)!(h in u)&&(u[h]=c[h]);eo(u);for(var v in this)v.charAt(0)==="_"&&typeof this[v]=="function"&&(this[v]=this[v].bind(this));this.nativeDraggable=u.forceFallback?!1:Ca,this.nativeDraggable&&(this.options.touchStartThreshold=1),u.supportPointer?E(a,"pointerdown",this._onTapStart):(E(a,"mousedown",this._onTapStart),E(a,"touchstart",this._onTapStart)),this.nativeDraggable&&(E(a,"dragover",this),E(a,"dragenter",this)),Ln.push(this.el),u.store&&u.store.get&&this.sort(u.store.get(this)||[]),r(this,pe())}P.prototype={constructor:P,_isOutsideThisEl:function(a){!this.el.contains(a)&&a!==this.el&&(Mt=null)},_getDirection:function(a,u){return typeof this.options.direction=="function"?this.options.direction.call(this,a,u,L):this.options.direction},_onTapStart:function(a){if(a.cancelable){var u=this,c=this.el,h=this.options,v=h.preventOnFilter,b=a.type,_=a.touches&&a.touches[0]||a.pointerType&&a.pointerType==="touch"&&a,N=(_||a).target,A=a.target.shadowRoot&&(a.path&&a.path[0]||a.composedPath&&a.composedPath()[0])||N,M=h.filter;if(Ha(c),!L&&!(/mousedown|pointerdown/.test(b)&&a.button!==0||h.disabled)&&!A.isContentEditable&&!(!this.nativeDraggable&&g&&N&&N.tagName.toUpperCase()==="SELECT")&&(N=X(N,h.draggable,c,!1),!(N&&N.animated)&&An!==N)){if(kt=Y(N),Jt=Y(N,h.draggable),typeof M=="function"){if(M.call(this,a,N,this)){re({sortable:u,rootEl:A,name:"filter",targetEl:N,toEl:c,fromEl:c}),Z("filter",u,{evt:a}),v&&a.cancelable&&a.preventDefault();return}}else if(M&&(M=M.split(",").some(function(H){if(H=X(A,H.trim(),c,!1),H)return re({sortable:u,rootEl:H,name:"filter",targetEl:N,fromEl:c,toEl:c}),Z("filter",u,{evt:a}),!0}),M)){v&&a.cancelable&&a.preventDefault();return}h.handle&&!X(A,h.handle,c,!1)||this._prepareDragStart(a,_,N)}}},_prepareDragStart:function(a,u,c){var h=this,v=h.el,b=h.options,_=v.ownerDocument,N;if(c&&!L&&c.parentNode===v){var A=k(c);if(oe=v,L=c,ce=L.parentNode,vt=L.nextSibling,An=c,On=b.group,P.dragged=L,wt={target:L,clientX:(u||a).clientX,clientY:(u||a).clientY},Kr=wt.clientX-A.left,Jr=wt.clientY-A.top,this._lastX=(u||a).clientX,this._lastY=(u||a).clientY,L.style["will-change"]="all",N=function(){if(Z("delayEnded",h,{evt:a}),P.eventCanceled){h._onDrop();return}h._disableDelayedDragEvents(),!p&&h.nativeDraggable&&(L.draggable=!0),h._triggerDragStart(a,u),re({sortable:h,name:"choose",originalEvent:a}),C(L,b.chosenClass,!0)},b.ignore.split(",").forEach(function(M){Q(L,M.trim(),Ti)}),E(_,"dragover",bt),E(_,"mousemove",bt),E(_,"touchmove",bt),E(_,"mouseup",h._onDrop),E(_,"touchend",h._onDrop),E(_,"touchcancel",h._onDrop),p&&this.nativeDraggable&&(this.options.touchStartThreshold=4,L.draggable=!0),Z("delayStart",this,{evt:a}),b.delay&&(!b.delayOnTouchOnly||u)&&(!this.nativeDraggable||!(m||f))){if(P.eventCanceled){this._onDrop();return}E(_,"mouseup",h._disableDelayedDrag),E(_,"touchend",h._disableDelayedDrag),E(_,"touchcancel",h._disableDelayedDrag),E(_,"mousemove",h._delayedDragTouchMoveHandler),E(_,"touchmove",h._delayedDragTouchMoveHandler),b.supportPointer&&E(_,"pointermove",h._delayedDragTouchMoveHandler),h._dragStartTimer=setTimeout(N,b.delay)}else N()}},_delayedDragTouchMoveHandler:function(a){var u=a.touches?a.touches[0]:a;Math.max(Math.abs(u.clientX-this._lastX),Math.abs(u.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){L&&Ti(L),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var a=this.el.ownerDocument;T(a,"mouseup",this._disableDelayedDrag),T(a,"touchend",this._disableDelayedDrag),T(a,"touchcancel",this._disableDelayedDrag),T(a,"mousemove",this._delayedDragTouchMoveHandler),T(a,"touchmove",this._delayedDragTouchMoveHandler),T(a,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(a,u){u=u||a.pointerType=="touch"&&a,!this.nativeDraggable||u?this.options.supportPointer?E(document,"pointermove",this._onTouchMove):u?E(document,"touchmove",this._onTouchMove):E(document,"mousemove",this._onTouchMove):(E(L,"dragend",this),E(oe,"dragstart",this._onDragStart));try{document.selection?In(function(){document.selection.empty()}):window.getSelection().removeAllRanges()}catch{}},_dragStarted:function(a,u){if(Dt=!1,oe&&L){Z("dragStarted",this,{evt:u}),this.nativeDraggable&&E(document,"dragover",Oa);var c=this.options;!a&&C(L,c.dragClass,!1),C(L,c.ghostClass,!0),P.active=this,a&&this._appendGhost(),re({sortable:this,name:"start",originalEvent:u})}else this._nulling()},_emulateDragOver:function(){if(Be){this._lastX=Be.clientX,this._lastY=Be.clientY,to();for(var a=document.elementFromPoint(Be.clientX,Be.clientY),u=a;a&&a.shadowRoot&&(a=a.shadowRoot.elementFromPoint(Be.clientX,Be.clientY),a!==u);)u=a;if(L.parentNode[ie]._isOutsideThisEl(a),u)do{if(u[ie]){var c=void 0;if(c=u[ie]._onDragOver({clientX:Be.clientX,clientY:Be.clientY,target:a,rootEl:u}),c&&!this.options.dragoverBubble)break}a=u}while(u=u.parentNode);no()}},_onTouchMove:function(a){if(wt){var u=this.options,c=u.fallbackTolerance,h=u.fallbackOffset,v=a.touches?a.touches[0]:a,b=j&&R(j,!0),_=j&&b&&b.a,N=j&&b&&b.d,A=Rn&&_e&&de(_e),M=(v.clientX-wt.clientX+h.x)/(_||1)+(A?A[0]-Ai[0]:0)/(_||1),H=(v.clientY-wt.clientY+h.y)/(N||1)+(A?A[1]-Ai[1]:0)/(N||1);if(!P.active&&!Dt){if(c&&Math.max(Math.abs(v.clientX-this._lastX),Math.abs(v.clientY-this._lastY))<c)return;this._onDragStart(a,!0)}if(j){b?(b.e+=M-(Ci||0),b.f+=H-(Si||0)):b={a:1,b:0,c:0,d:1,e:M,f:H};var F="matrix(".concat(b.a,",").concat(b.b,",").concat(b.c,",").concat(b.d,",").concat(b.e,",").concat(b.f,")");S(j,"webkitTransform",F),S(j,"mozTransform",F),S(j,"msTransform",F),S(j,"transform",F),Ci=M,Si=H,Be=v}a.cancelable&&a.preventDefault()}},_appendGhost:function(){if(!j){var a=this.options.fallbackOnBody?document.body:oe,u=k(L,!0,Rn,!0,a),c=this.options;if(Rn){for(_e=a;S(_e,"position")==="static"&&S(_e,"transform")==="none"&&_e!==document;)_e=_e.parentNode;_e!==document.body&&_e!==document.documentElement?(_e===document&&(_e=ee()),u.top+=_e.scrollTop,u.left+=_e.scrollLeft):_e=ee(),Ai=de(_e)}j=L.cloneNode(!0),C(j,c.ghostClass,!1),C(j,c.fallbackClass,!0),C(j,c.dragClass,!0),S(j,"transition",""),S(j,"transform",""),S(j,"box-sizing","border-box"),S(j,"margin",0),S(j,"top",u.top),S(j,"left",u.left),S(j,"width",u.width),S(j,"height",u.height),S(j,"opacity","0.8"),S(j,"position",Rn?"absolute":"fixed"),S(j,"zIndex","100000"),S(j,"pointerEvents","none"),P.ghost=j,a.appendChild(j),S(j,"transform-origin",Kr/parseInt(j.style.width)*100+"% "+Jr/parseInt(j.style.height)*100+"%")}},_onDragStart:function(a,u){var c=this,h=a.dataTransfer,v=c.options;if(Z("dragStart",this,{evt:a}),P.eventCanceled){this._onDrop();return}Z("setupClone",this),P.eventCanceled||(le=Ne(L),le.removeAttribute("id"),le.draggable=!1,le.style["will-change"]="",this._hideClone(),C(le,this.options.chosenClass,!1),P.clone=le),c.cloneId=In(function(){Z("clone",c),!P.eventCanceled&&(c.options.removeCloneOnHide||oe.insertBefore(le,L),c._hideClone(),re({sortable:c,name:"clone"}))}),!u&&C(L,v.dragClass,!0),u?(Tn=!0,c._loopId=setInterval(c._emulateDragOver,50)):(T(document,"mouseup",c._onDrop),T(document,"touchend",c._onDrop),T(document,"touchcancel",c._onDrop),h&&(h.effectAllowed="move",v.setData&&v.setData.call(c,h,L)),E(document,"drop",c),S(L,"transform","translateZ(0)")),Dt=!0,c._dragStartId=In(c._dragStarted.bind(c,u,a)),E(document,"selectstart",c),Gt=!0,g&&S(document.body,"user-select","none")},_onDragOver:function(a){var u=this.el,c=a.target,h,v,b,_=this.options,N=_.group,A=P.active,M=On===N,H=_.sort,F=be||A,se,q=this,me=!1;if(Oi)return;function te(rn,Fa){Z(rn,q,t({evt:a,isOwner:M,axis:se?"vertical":"horizontal",revert:b,dragRect:h,targetRect:v,canSort:H,fromSortable:F,target:c,completed:Oe,onMove:function(oo,Ba){return Hn(oe,u,L,h,oo,k(oo),a,Ba)},changed:Ze},Fa))}function Ge(){te("dragOverAnimationCapture"),q.captureAnimationState(),q!==F&&F.captureAnimationState()}function Oe(rn){return te("dragOverCompleted",{insertion:rn}),rn&&(M?A._hideClone():A._showClone(q),q!==F&&(C(L,be?be.options.ghostClass:A.options.ghostClass,!1),C(L,_.ghostClass,!0)),be!==q&&q!==P.active?be=q:q===P.active&&be&&(be=null),F===q&&(q._ignoreWhileAnimating=c),q.animateAll(function(){te("dragOverAnimationComplete"),q._ignoreWhileAnimating=null}),q!==F&&(F.animateAll(),F._ignoreWhileAnimating=null)),(c===L&&!L.animated||c===u&&!c.animated)&&(Mt=null),!_.dragoverBubble&&!a.rootEl&&c!==document&&(L.parentNode[ie]._isOutsideThisEl(a.target),!rn&&bt(a)),!_.dragoverBubble&&a.stopPropagation&&a.stopPropagation(),me=!0}function Ze(){ke=Y(L),ot=Y(L,_.draggable),re({sortable:q,name:"change",toEl:u,newIndex:ke,newDraggableIndex:ot,originalEvent:a})}if(a.preventDefault!==void 0&&a.cancelable&&a.preventDefault(),c=X(c,_.draggable,u,!0),te("dragOver"),P.eventCanceled)return me;if(L.contains(a.target)||c.animated&&c.animatingX&&c.animatingY||q._ignoreWhileAnimating===c)return Oe(!1);if(Tn=!1,A&&!_.disabled&&(M?H||(b=ce!==oe):be===this||(this.lastPutMode=On.checkPull(this,A,L,a))&&N.checkPut(this,A,L,a))){if(se=this._getDirection(a,c)==="vertical",h=k(L),te("dragOverValid"),P.eventCanceled)return me;if(b)return ce=oe,Ge(),this._hideClone(),te("revert"),P.eventCanceled||(vt?oe.insertBefore(L,vt):oe.appendChild(L)),Oe(!0);var xe=I(u,_.draggable);if(!xe||ka(a,se,this)&&!xe.animated){if(xe===L)return Oe(!1);if(xe&&u===a.target&&(c=xe),c&&(v=k(c)),Hn(oe,u,L,h,c,v,a,!!c)!==!1)return Ge(),xe&&xe.nextSibling?u.insertBefore(L,xe.nextSibling):u.appendChild(L),ce=u,Ze(),Oe(!0)}else if(xe&&Na(a,se,this)){var yt=W(u,0,_,!0);if(yt===L)return Oe(!1);if(c=yt,v=k(c),Hn(oe,u,L,h,c,v,a,!1)!==!1)return Ge(),u.insertBefore(L,yt),ce=u,Ze(),Oe(!0)}else if(c.parentNode===u){v=k(c);var $e=0,_t,nn=L.parentNode!==u,Rt=!Sa(L.animated&&L.toRect||h,c.animated&&c.toRect||v,se),De=se?"top":"left",st=D(c,"top","top")||D(L,"top","top"),Bn=st?st.scrollTop:void 0;Mt!==c&&(_t=v[De],Qt=!1,Nn=!Rt&&_.invertSwap||nn),$e=Da(a,c,v,se,Rt?1:_.swapThreshold,_.invertedSwapThreshold==null?_.swapThreshold:_.invertedSwapThreshold,Nn,Mt===c);var Qe;if($e!==0){var Ht=Y(L);do Ht-=$e,Qe=ce.children[Ht];while(Qe&&(S(Qe,"display")==="none"||Qe===j))}if($e===0||Qe===c)return Oe(!1);Mt=c,Zt=$e;var xt=c.nextElementSibling,at=!1;at=$e===1;var Et=Hn(oe,u,L,h,c,v,a,at);if(Et!==!1)return(Et===1||Et===-1)&&(at=Et===1),Oi=!0,setTimeout(La,30),Ge(),at&&!xt?u.appendChild(L):c.parentNode.insertBefore(L,at?xt:c),st&&Ee(st,0,Bn-st.scrollTop),ce=L.parentNode,_t!==void 0&&!Nn&&(kn=Math.abs(_t-k(c)[De])),Ze(),Oe(!0)}if(u.contains(L))return Oe(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){T(document,"mousemove",this._onTouchMove),T(document,"touchmove",this._onTouchMove),T(document,"pointermove",this._onTouchMove),T(document,"dragover",bt),T(document,"mousemove",bt),T(document,"touchmove",bt)},_offUpEvents:function(){var a=this.el.ownerDocument;T(a,"mouseup",this._onDrop),T(a,"touchend",this._onDrop),T(a,"pointerup",this._onDrop),T(a,"touchcancel",this._onDrop),T(document,"selectstart",this)},_onDrop:function(a){var u=this.el,c=this.options;if(ke=Y(L),ot=Y(L,c.draggable),Z("drop",this,{evt:a}),ce=L&&L.parentNode,ke=Y(L),ot=Y(L,c.draggable),P.eventCanceled){this._nulling();return}Dt=!1,Nn=!1,Qt=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),Li(this.cloneId),Li(this._dragStartId),this.nativeDraggable&&(T(document,"drop",this),T(u,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),g&&S(document.body,"user-select",""),S(L,"transform",""),a&&(Gt&&(a.cancelable&&a.preventDefault(),!c.dropBubble&&a.stopPropagation()),j&&j.parentNode&&j.parentNode.removeChild(j),(oe===ce||be&&be.lastPutMode!=="clone")&&le&&le.parentNode&&le.parentNode.removeChild(le),L&&(this.nativeDraggable&&T(L,"dragend",this),Ti(L),L.style["will-change"]="",Gt&&!Dt&&C(L,be?be.options.ghostClass:this.options.ghostClass,!1),C(L,this.options.chosenClass,!1),re({sortable:this,name:"unchoose",toEl:ce,newIndex:null,newDraggableIndex:null,originalEvent:a}),oe!==ce?(ke>=0&&(re({rootEl:ce,name:"add",toEl:ce,fromEl:oe,originalEvent:a}),re({sortable:this,name:"remove",toEl:ce,originalEvent:a}),re({rootEl:ce,name:"sort",toEl:ce,fromEl:oe,originalEvent:a}),re({sortable:this,name:"sort",toEl:ce,originalEvent:a})),be&&be.save()):ke!==kt&&ke>=0&&(re({sortable:this,name:"update",toEl:ce,originalEvent:a}),re({sortable:this,name:"sort",toEl:ce,originalEvent:a})),P.active&&((ke==null||ke===-1)&&(ke=kt,ot=Jt),re({sortable:this,name:"end",toEl:ce,originalEvent:a}),this.save()))),this._nulling()},_nulling:function(){Z("nulling",this),oe=L=ce=j=vt=le=An=rt=wt=Be=Gt=ke=ot=kt=Jt=Mt=Zt=be=On=P.dragged=P.ghost=P.clone=P.active=null,Dn.forEach(function(a){a.checked=!0}),Dn.length=Ci=Si=0},handleEvent:function(a){switch(a.type){case"drop":case"dragend":this._onDrop(a);break;case"dragenter":case"dragover":L&&(this._onDragOver(a),Ta(a));break;case"selectstart":a.preventDefault();break}},toArray:function(){for(var a=[],u,c=this.el.children,h=0,v=c.length,b=this.options;h<v;h++)u=c[h],X(u,b.draggable,this.el,!1)&&a.push(u.getAttribute(b.dataIdAttr)||Ra(u));return a},sort:function(a,u){var c={},h=this.el;this.toArray().forEach(function(v,b){var _=h.children[b];X(_,this.options.draggable,h,!1)&&(c[v]=_)},this),u&&this.captureAnimationState(),a.forEach(function(v){c[v]&&(h.removeChild(c[v]),h.appendChild(c[v]))}),u&&this.animateAll()},save:function(){var a=this.options.store;a&&a.set&&a.set(this)},closest:function(a,u){return X(a,u||this.options.draggable,this.el,!1)},option:function(a,u){var c=this.options;if(u===void 0)return c[a];var h=Ae.modifyOption(this,a,u);typeof h<"u"?c[a]=h:c[a]=u,a==="group"&&eo(c)},destroy:function(){Z("destroy",this);var a=this.el;a[ie]=null,T(a,"mousedown",this._onTapStart),T(a,"touchstart",this._onTapStart),T(a,"pointerdown",this._onTapStart),this.nativeDraggable&&(T(a,"dragover",this),T(a,"dragenter",this)),Array.prototype.forEach.call(a.querySelectorAll("[draggable]"),function(u){u.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),Ln.splice(Ln.indexOf(this.el),1),this.el=a=null},_hideClone:function(){if(!rt){if(Z("hideClone",this),P.eventCanceled)return;S(le,"display","none"),this.options.removeCloneOnHide&&le.parentNode&&le.parentNode.removeChild(le),rt=!0}},_showClone:function(a){if(a.lastPutMode!=="clone"){this._hideClone();return}if(rt){if(Z("showClone",this),P.eventCanceled)return;L.parentNode==oe&&!this.options.group.revertClone?oe.insertBefore(le,L):vt?oe.insertBefore(le,vt):oe.appendChild(le),this.options.group.revertClone&&this.animate(L,le),S(le,"display",""),rt=!1}}};function Ta(a){a.dataTransfer&&(a.dataTransfer.dropEffect="move"),a.cancelable&&a.preventDefault()}function Hn(a,u,c,h,v,b,_,N){var A,M=a[ie],H=M.options.onMove,F;return window.CustomEvent&&!f&&!m?A=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(A=document.createEvent("Event"),A.initEvent("move",!0,!0)),A.to=u,A.from=a,A.dragged=c,A.draggedRect=h,A.related=v||u,A.relatedRect=b||k(u),A.willInsertAfter=N,A.originalEvent=_,a.dispatchEvent(A),H&&(F=H.call(M,A,_)),F}function Ti(a){a.draggable=!1}function La(){Oi=!1}function Na(a,u,c){var h=k(W(c.el,0,c.options,!0)),v=10;return u?a.clientX<h.left-v||a.clientY<h.top&&a.clientX<h.right:a.clientY<h.top-v||a.clientY<h.bottom&&a.clientX<h.left}function ka(a,u,c){var h=k(I(c.el,c.options.draggable)),v=10;return u?a.clientX>h.right+v||a.clientX<=h.right&&a.clientY>h.bottom&&a.clientX>=h.left:a.clientX>h.right&&a.clientY>h.top||a.clientX<=h.right&&a.clientY>h.bottom+v}function Da(a,u,c,h,v,b,_,N){var A=h?a.clientY:a.clientX,M=h?c.height:c.width,H=h?c.top:c.left,F=h?c.bottom:c.right,se=!1;if(!_){if(N&&kn<M*v){if(!Qt&&(Zt===1?A>H+M*b/2:A<F-M*b/2)&&(Qt=!0),Qt)se=!0;else if(Zt===1?A<H+kn:A>F-kn)return-Zt}else if(A>H+M*(1-v)/2&&A<F-M*(1-v)/2)return Ma(u)}return se=se||_,se&&(A<H+M*b/2||A>F-M*b/2)?A>H+M/2?1:-1:0}function Ma(a){return Y(L)<Y(a)?1:-1}function Ra(a){for(var u=a.tagName+a.className+a.src+a.href+a.textContent,c=u.length,h=0;c--;)h+=u.charCodeAt(c);return h.toString(36)}function Ha(a){Dn.length=0;for(var u=a.getElementsByTagName("input"),c=u.length;c--;){var h=u[c];h.checked&&Dn.push(h)}}function In(a){return setTimeout(a,0)}function Li(a){return clearTimeout(a)}Mn&&E(document,"touchmove",function(a){(P.active||Dt)&&a.cancelable&&a.preventDefault()}),P.utils={on:E,off:T,css:S,find:Q,is:function(a,u){return!!X(a,u,a,!1)},extend:Ke,throttle:it,closest:X,toggleClass:C,clone:Ne,index:Y,nextTick:In,cancelNextTick:Li,detectDirection:Qr,getChild:W},P.get=function(a){return a[ie]},P.mount=function(){for(var a=arguments.length,u=new Array(a),c=0;c<a;c++)u[c]=arguments[c];u[0].constructor===Array&&(u=u[0]),u.forEach(function(h){if(!h.prototype||!h.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(h));h.utils&&(P.utils=t(t({},P.utils),h.utils)),Ae.mount(h)})},P.create=function(a,u){return new P(a,u)},P.version=l;var fe=[],en,Ni,ki=!1,Di,Mi,Pn,tn;function Ia(){function a(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var u in this)u.charAt(0)==="_"&&typeof this[u]=="function"&&(this[u]=this[u].bind(this))}return a.prototype={dragStarted:function(u){var c=u.originalEvent;this.sortable.nativeDraggable?E(document,"dragover",this._handleAutoScroll):this.options.supportPointer?E(document,"pointermove",this._handleFallbackAutoScroll):c.touches?E(document,"touchmove",this._handleFallbackAutoScroll):E(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(u){var c=u.originalEvent;!this.options.dragOverBubble&&!c.rootEl&&this._handleAutoScroll(c)},drop:function(){this.sortable.nativeDraggable?T(document,"dragover",this._handleAutoScroll):(T(document,"pointermove",this._handleFallbackAutoScroll),T(document,"touchmove",this._handleFallbackAutoScroll),T(document,"mousemove",this._handleFallbackAutoScroll)),io(),Fn(),Me()},nulling:function(){Pn=Ni=en=ki=tn=Di=Mi=null,fe.length=0},_handleFallbackAutoScroll:function(u){this._handleAutoScroll(u,!0)},_handleAutoScroll:function(u,c){var h=this,v=(u.touches?u.touches[0]:u).clientX,b=(u.touches?u.touches[0]:u).clientY,_=document.elementFromPoint(v,b);if(Pn=u,c||this.options.forceAutoScrollFallback||m||f||g){Ri(u,this.options,_,c);var N=ye(_,!0);ki&&(!tn||v!==Di||b!==Mi)&&(tn&&io(),tn=setInterval(function(){var A=ye(document.elementFromPoint(v,b),!0);A!==N&&(N=A,Fn()),Ri(u,h.options,A,c)},10),Di=v,Mi=b)}else{if(!this.options.bubbleScroll||ye(_,!0)===ee()){Fn();return}Ri(u,this.options,ye(_,!1),!1)}}},r(a,{pluginName:"scroll",initializeByDefault:!0})}function Fn(){fe.forEach(function(a){clearInterval(a.pid)}),fe=[]}function io(){clearInterval(tn)}var Ri=it(function(a,u,c,h){if(u.scroll){var v=(a.touches?a.touches[0]:a).clientX,b=(a.touches?a.touches[0]:a).clientY,_=u.scrollSensitivity,N=u.scrollSpeed,A=ee(),M=!1,H;Ni!==c&&(Ni=c,Fn(),en=u.scroll,H=u.scrollFn,en===!0&&(en=ye(c,!0)));var F=0,se=en;do{var q=se,me=k(q),te=me.top,Ge=me.bottom,Oe=me.left,Ze=me.right,xe=me.width,yt=me.height,$e=void 0,_t=void 0,nn=q.scrollWidth,Rt=q.scrollHeight,De=S(q),st=q.scrollLeft,Bn=q.scrollTop;q===A?($e=xe<nn&&(De.overflowX==="auto"||De.overflowX==="scroll"||De.overflowX==="visible"),_t=yt<Rt&&(De.overflowY==="auto"||De.overflowY==="scroll"||De.overflowY==="visible")):($e=xe<nn&&(De.overflowX==="auto"||De.overflowX==="scroll"),_t=yt<Rt&&(De.overflowY==="auto"||De.overflowY==="scroll"));var Qe=$e&&(Math.abs(Ze-v)<=_&&st+xe<nn)-(Math.abs(Oe-v)<=_&&!!st),Ht=_t&&(Math.abs(Ge-b)<=_&&Bn+yt<Rt)-(Math.abs(te-b)<=_&&!!Bn);if(!fe[F])for(var xt=0;xt<=F;xt++)fe[xt]||(fe[xt]={});(fe[F].vx!=Qe||fe[F].vy!=Ht||fe[F].el!==q)&&(fe[F].el=q,fe[F].vx=Qe,fe[F].vy=Ht,clearInterval(fe[F].pid),(Qe!=0||Ht!=0)&&(M=!0,fe[F].pid=setInterval(function(){h&&this.layer===0&&P.active._onTouchMove(Pn);var at=fe[this.layer].vy?fe[this.layer].vy*N:0,Et=fe[this.layer].vx?fe[this.layer].vx*N:0;typeof H=="function"&&H.call(P.dragged.parentNode[ie],Et,at,a,Pn,fe[this.layer].el)!=="continue"||Ee(fe[this.layer].el,Et,at)}.bind({layer:F}),24))),F++}while(u.bubbleScroll&&se!==A&&(se=ye(se,!1)));ki=M}},30),ro=function(a){var u=a.originalEvent,c=a.putSortable,h=a.dragEl,v=a.activeSortable,b=a.dispatchSortableEvent,_=a.hideGhostForTarget,N=a.unhideGhostForTarget;if(u){var A=c||v;_();var M=u.changedTouches&&u.changedTouches.length?u.changedTouches[0]:u,H=document.elementFromPoint(M.clientX,M.clientY);N(),A&&!A.el.contains(H)&&(b("spill"),this.onSpill({dragEl:h,putSortable:c}))}};function Hi(){}Hi.prototype={startIndex:null,dragStart:function(a){var u=a.oldDraggableIndex;this.startIndex=u},onSpill:function(a){var u=a.dragEl,c=a.putSortable;this.sortable.captureAnimationState(),c&&c.captureAnimationState();var h=W(this.sortable.el,this.startIndex,this.options);h?this.sortable.el.insertBefore(u,h):this.sortable.el.appendChild(u),this.sortable.animateAll(),c&&c.animateAll()},drop:ro},r(Hi,{pluginName:"revertOnSpill"});function Ii(){}Ii.prototype={onSpill:function(a){var u=a.dragEl,c=a.putSortable,h=c||this.sortable;h.captureAnimationState(),u.parentNode&&u.parentNode.removeChild(u),h.animateAll()},drop:ro},r(Ii,{pluginName:"removeOnSpill"}),P.mount(new Ia),P.mount(Ii,Hi);var Pa=P;if(window.Sortable=Pa,typeof window.Livewire>"u")throw"Livewire Sortable.js Plugin: window.Livewire is undefined. Make sure @livewireScripts is placed above this script include";window.Livewire.directive("sortable",(a,u,c)=>{if(u.modifiers.length>0)return;let h={};a.hasAttribute("wire:sortable.options")&&(h=new Function(`return ${a.getAttribute("wire:sortable.options")};`)()),a.livewire_sortable=window.Sortable.create(a,{...h,draggable:"[wire\\:sortable\\.item]",handle:a.querySelector("[wire\\:sortable\\.handle]")?"[wire\\:sortable\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable.item",group:{name:a.getAttribute("wire:sortable"),pull:!1,put:!1},store:{set:function(v){let b=v.toArray().map((_,N)=>({order:N+1,value:_}));c.call(u.method,b)}}})}),window.Livewire.directive("sortable-group",(a,u,c)=>{if(!u.modifiers.includes("item-group"))return;let h={};a.hasAttribute("wire:sortable-group.options")&&(h=new Function(`return ${a.getAttribute("wire:sortable-group.options")};`)()),a.livewire_sortable=window.Sortable.create(a,{...h,draggable:"[wire\\:sortable-group\\.item]",handle:a.querySelector("[wire\\:sortable-group\\.handle]")?"[wire\\:sortable-group\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable-group.item",group:{name:a.closest("[wire\\:sortable-group]").getAttribute("wire:sortable-group"),pull:!0,put:!0},onSort:()=>{let v=a.closest("[wire\\:sortable-group]"),b=Array.from(v.querySelectorAll("[wire\\:sortable-group\\.item-group]")).map((_,N)=>({order:N+1,value:_.getAttribute("wire:sortable-group.item-group"),items:_.livewire_sortable.toArray().map((A,M)=>({order:M+1,value:A}))}));c.call(v.getAttribute("wire:sortable-group"),b)}})})})();/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */var nr=!1,ir=!1,Tt=[],rr=-1;function Ic(e){Pc(e)}function Pc(e){Tt.includes(e)||Tt.push(e),Fc()}function ss(e){let t=Tt.indexOf(e);t!==-1&&t>rr&&Tt.splice(t,1)}function Fc(){!ir&&!nr&&(nr=!0,queueMicrotask(Bc))}function Bc(){nr=!1,ir=!0;for(let e=0;e<Tt.length;e++)Tt[e](),rr=e;Tt.length=0,rr=-1,ir=!1}var Yt,Xt,_n,as,or=!0;function zc(e){or=!1,e(),or=!0}function jc(e){Yt=e.reactive,_n=e.release,Xt=t=>e.effect(t,{scheduler:n=>{or?Ic(n):n()}}),as=e.raw}function xo(e){Xt=e}function Vc(e){let t=()=>{};return[i=>{let r=Xt(i);return e._x_effects||(e._x_effects=new Set,e._x_runEffects=()=>{e._x_effects.forEach(o=>o())}),e._x_effects.add(r),t=()=>{r!==void 0&&(e._x_effects.delete(r),_n(r))},r},()=>{t()}]}var ls=[],cs=[],us=[];function $c(e){us.push(e)}function ds(e,t){typeof t=="function"?(e._x_cleanups||(e._x_cleanups=[]),e._x_cleanups.push(t)):(t=e,cs.push(t))}function qc(e){ls.push(e)}function Wc(e,t,n){e._x_attributeCleanups||(e._x_attributeCleanups={}),e._x_attributeCleanups[t]||(e._x_attributeCleanups[t]=[]),e._x_attributeCleanups[t].push(n)}function fs(e,t){e._x_attributeCleanups&&Object.entries(e._x_attributeCleanups).forEach(([n,i])=>{(t===void 0||t.includes(n))&&(i.forEach(r=>r()),delete e._x_attributeCleanups[n])})}var Or=new MutationObserver(kr),Tr=!1;function Lr(){Or.observe(document,{subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0}),Tr=!0}function hs(){Uc(),Or.disconnect(),Tr=!1}var dn=[],Vi=!1;function Uc(){dn=dn.concat(Or.takeRecords()),dn.length&&!Vi&&(Vi=!0,queueMicrotask(()=>{Yc(),Vi=!1}))}function Yc(){kr(dn),dn.length=0}function we(e){if(!Tr)return e();hs();let t=e();return Lr(),t}var Nr=!1,Qn=[];function Xc(){Nr=!0}function Kc(){Nr=!1,kr(Qn),Qn=[]}function kr(e){if(Nr){Qn=Qn.concat(e);return}let t=[],n=[],i=new Map,r=new Map;for(let o=0;o<e.length;o++)if(!e[o].target._x_ignoreMutationObserver&&(e[o].type==="childList"&&(e[o].addedNodes.forEach(s=>s.nodeType===1&&t.push(s)),e[o].removedNodes.forEach(s=>s.nodeType===1&&n.push(s))),e[o].type==="attributes")){let s=e[o].target,l=e[o].attributeName,d=e[o].oldValue,f=()=>{i.has(s)||i.set(s,[]),i.get(s).push({name:l,value:s.getAttribute(l)})},m=()=>{r.has(s)||r.set(s,[]),r.get(s).push(l)};s.hasAttribute(l)&&d===null?f():s.hasAttribute(l)?(m(),f()):m()}r.forEach((o,s)=>{fs(s,o)}),i.forEach((o,s)=>{ls.forEach(l=>l(s,o))});for(let o of n)if(!t.includes(o)&&(cs.forEach(s=>s(o)),o._x_cleanups))for(;o._x_cleanups.length;)o._x_cleanups.pop()();t.forEach(o=>{o._x_ignoreSelf=!0,o._x_ignore=!0});for(let o of t)n.includes(o)||o.isConnected&&(delete o._x_ignoreSelf,delete o._x_ignore,us.forEach(s=>s(o)),o._x_ignore=!0,o._x_ignoreSelf=!0);t.forEach(o=>{delete o._x_ignoreSelf,delete o._x_ignore}),t=null,n=null,i=null,r=null}function ps(e){return En($t(e))}function xn(e,t,n){return e._x_dataStack=[t,...$t(n||e)],()=>{e._x_dataStack=e._x_dataStack.filter(i=>i!==t)}}function Eo(e,t){let n=e._x_dataStack[0];Object.entries(t).forEach(([i,r])=>{n[i]=r})}function $t(e){return e._x_dataStack?e._x_dataStack:typeof ShadowRoot=="function"&&e instanceof ShadowRoot?$t(e.host):e.parentNode?$t(e.parentNode):[]}function En(e){let t=new Proxy({},{ownKeys:()=>Array.from(new Set(e.flatMap(n=>Object.keys(n)))),has:(n,i)=>e.some(r=>r.hasOwnProperty(i)),get:(n,i)=>(e.find(r=>{if(r.hasOwnProperty(i)){let o=Object.getOwnPropertyDescriptor(r,i);if(o.get&&o.get._x_alreadyBound||o.set&&o.set._x_alreadyBound)return!0;if((o.get||o.set)&&o.enumerable){let s=o.get,l=o.set,d=o;s=s&&s.bind(t),l=l&&l.bind(t),s&&(s._x_alreadyBound=!0),l&&(l._x_alreadyBound=!0),Object.defineProperty(r,i,{...d,get:s,set:l})}return!0}return!1})||{})[i],set:(n,i,r)=>{let o=e.find(s=>s.hasOwnProperty(i));return o?o[i]=r:e[e.length-1][i]=r,!0}});return t}function ms(e){let t=i=>typeof i=="object"&&!Array.isArray(i)&&i!==null,n=(i,r="")=>{Object.entries(Object.getOwnPropertyDescriptors(i)).forEach(([o,{value:s,enumerable:l}])=>{if(l===!1||s===void 0)return;let d=r===""?o:`${r}.${o}`;typeof s=="object"&&s!==null&&s._x_interceptor?i[o]=s.initialize(e,d,o):t(s)&&s!==i&&!(s instanceof Element)&&n(s,d)})};return n(e)}function gs(e,t=()=>{}){let n={initialValue:void 0,_x_interceptor:!0,initialize(i,r,o){return e(this.initialValue,()=>Jc(i,r),s=>sr(i,r,s),r,o)}};return t(n),i=>{if(typeof i=="object"&&i!==null&&i._x_interceptor){let r=n.initialize.bind(n);n.initialize=(o,s,l)=>{let d=i.initialize(o,s,l);return n.initialValue=d,r(o,s,l)}}else n.initialValue=i;return n}}function Jc(e,t){return t.split(".").reduce((n,i)=>n[i],e)}function sr(e,t,n){if(typeof t=="string"&&(t=t.split(".")),t.length===1)e[t[0]]=n;else{if(t.length===0)throw error;return e[t[0]]||(e[t[0]]={}),sr(e[t[0]],t.slice(1),n)}}var vs={};function je(e,t){vs[e]=t}function ar(e,t){return Object.entries(vs).forEach(([n,i])=>{Object.defineProperty(e,`$${n}`,{get(){let[r,o]=xs(t);return r={interceptor:gs,...r},ds(t,o),i(t,r)},enumerable:!1})}),e}function Gc(e,t,n,...i){try{return n(...i)}catch(r){mn(r,e,t)}}function mn(e,t,n=void 0){Object.assign(e,{el:t,expression:n}),console.warn(`Alpine Expression Error: ${e.message}

${n?'Expression: "'+n+`"

`:""}`,t),setTimeout(()=>{throw e},0)}var Jn=!0;function Zc(e){let t=Jn;Jn=!1,e(),Jn=t}function Pt(e,t,n={}){let i;return Le(e,t)(r=>i=r,n),i}function Le(...e){return ws(...e)}var ws=bs;function Qc(e){ws=e}function bs(e,t){let n={};ar(n,e);let i=[n,...$t(e)],r=typeof t=="function"?eu(i,t):nu(i,t,e);return Gc.bind(null,e,t,r)}function eu(e,t){return(n=()=>{},{scope:i={},params:r=[]}={})=>{let o=t.apply(En([i,...e]),r);ei(n,o)}}var $i={};function tu(e,t){if($i[e])return $i[e];let n=Object.getPrototypeOf(async function(){}).constructor,i=/^[\n\s]*if.*\(.*\)/.test(e)||/^(let|const)\s/.test(e)?`(async()=>{ ${e} })()`:e,o=(()=>{try{return new n(["__self","scope"],`with (scope) { __self.result = ${i} }; __self.finished = true; return __self.result;`)}catch(s){return mn(s,t,e),Promise.resolve()}})();return $i[e]=o,o}function nu(e,t,n){let i=tu(t,n);return(r=()=>{},{scope:o={},params:s=[]}={})=>{i.result=void 0,i.finished=!1;let l=En([o,...e]);if(typeof i=="function"){let d=i(i,l).catch(f=>mn(f,n,t));i.finished?(ei(r,i.result,l,s,n),i.result=void 0):d.then(f=>{ei(r,f,l,s,n)}).catch(f=>mn(f,n,t)).finally(()=>i.result=void 0)}}}function ei(e,t,n,i,r){if(Jn&&typeof t=="function"){let o=t.apply(n,i);o instanceof Promise?o.then(s=>ei(e,s,n,i)).catch(s=>mn(s,r,t)):e(o)}else typeof t=="object"&&t instanceof Promise?t.then(o=>e(o)):e(t)}var Dr="x-";function Kt(e=""){return Dr+e}function iu(e){Dr=e}var lr={};function he(e,t){return lr[e]=t,{before(n){if(!lr[n]){console.warn("Cannot find directive `${directive}`. `${name}` will use the default order of execution");return}const i=At.indexOf(n);At.splice(i>=0?i:At.indexOf("DEFAULT"),0,e)}}}function Mr(e,t,n){if(t=Array.from(t),e._x_virtualDirectives){let o=Object.entries(e._x_virtualDirectives).map(([l,d])=>({name:l,value:d})),s=ys(o);o=o.map(l=>s.find(d=>d.name===l.name)?{name:`x-bind:${l.name}`,value:`"${l.value}"`}:l),t=t.concat(o)}let i={};return t.map(Ss((o,s)=>i[o]=s)).filter(Os).map(su(i,n)).sort(au).map(o=>ou(e,o))}function ys(e){return Array.from(e).map(Ss()).filter(t=>!Os(t))}var cr=!1,un=new Map,_s=Symbol();function ru(e){cr=!0;let t=Symbol();_s=t,un.set(t,[]);let n=()=>{for(;un.get(t).length;)un.get(t).shift()();un.delete(t)},i=()=>{cr=!1,n()};e(n),i()}function xs(e){let t=[],n=l=>t.push(l),[i,r]=Vc(e);return t.push(r),[{Alpine:Sn,effect:i,cleanup:n,evaluateLater:Le.bind(Le,e),evaluate:Pt.bind(Pt,e)},()=>t.forEach(l=>l())]}function ou(e,t){let n=()=>{},i=lr[t.type]||n,[r,o]=xs(e);Wc(e,t.original,o);let s=()=>{e._x_ignore||e._x_ignoreSelf||(i.inline&&i.inline(e,t,r),i=i.bind(i,e,t,r),cr?un.get(_s).push(i):i())};return s.runCleanups=o,s}var Es=(e,t)=>({name:n,value:i})=>(n.startsWith(e)&&(n=n.replace(e,t)),{name:n,value:i}),Cs=e=>e;function Ss(e=()=>{}){return({name:t,value:n})=>{let{name:i,value:r}=As.reduce((o,s)=>s(o),{name:t,value:n});return i!==t&&e(i,t),{name:i,value:r}}}var As=[];function Rr(e){As.push(e)}function Os({name:e}){return Ts().test(e)}var Ts=()=>new RegExp(`^${Dr}([^:^.]+)\\b`);function su(e,t){return({name:n,value:i})=>{let r=n.match(Ts()),o=n.match(/:([a-zA-Z0-9\-:]+)/),s=n.match(/\.[^.\]]+(?=[^\]]*$)/g)||[],l=t||e[n]||n;return{type:r?r[1]:null,value:o?o[1]:null,modifiers:s.map(d=>d.replace(".","")),expression:i,original:l}}}var ur="DEFAULT",At=["ignore","ref","data","id","bind","init","for","model","modelable","transition","show","if",ur,"teleport"];function au(e,t){let n=At.indexOf(e.type)===-1?ur:e.type,i=At.indexOf(t.type)===-1?ur:t.type;return At.indexOf(n)-At.indexOf(i)}function fn(e,t,n={}){e.dispatchEvent(new CustomEvent(t,{detail:n,bubbles:!0,composed:!0,cancelable:!0}))}function pt(e,t){if(typeof ShadowRoot=="function"&&e instanceof ShadowRoot){Array.from(e.children).forEach(r=>pt(r,t));return}let n=!1;if(t(e,()=>n=!0),n)return;let i=e.firstElementChild;for(;i;)pt(i,t),i=i.nextElementSibling}function qt(e,...t){console.warn(`Alpine Warning: ${e}`,...t)}function lu(){document.body||qt("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?"),fn(document,"alpine:init"),fn(document,"alpine:initializing"),Lr(),$c(t=>mt(t,pt)),ds(t=>Hs(t)),qc((t,n)=>{Mr(t,n).forEach(i=>i())});let e=t=>!fi(t.parentElement,!0);Array.from(document.querySelectorAll(ks())).filter(e).forEach(t=>{mt(t)}),fn(document,"alpine:initialized")}var Hr=[],Ls=[];function Ns(){return Hr.map(e=>e())}function ks(){return Hr.concat(Ls).map(e=>e())}function Ds(e){Hr.push(e)}function Ms(e){Ls.push(e)}function fi(e,t=!1){return hi(e,n=>{if((t?ks():Ns()).some(r=>n.matches(r)))return!0})}function hi(e,t){if(e){if(t(e))return e;if(e._x_teleportBack&&(e=e._x_teleportBack),!!e.parentElement)return hi(e.parentElement,t)}}function cu(e){return Ns().some(t=>e.matches(t))}var Rs=[];function uu(e){Rs.push(e)}function mt(e,t=pt,n=()=>{}){ru(()=>{t(e,(i,r)=>{n(i,r),Rs.forEach(o=>o(i,r)),Mr(i,i.attributes).forEach(o=>o()),i._x_ignore&&r()})})}function Hs(e){pt(e,t=>fs(t))}var dr=[],Ir=!1;function Pr(e=()=>{}){return queueMicrotask(()=>{Ir||setTimeout(()=>{fr()})}),new Promise(t=>{dr.push(()=>{e(),t()})})}function fr(){for(Ir=!1;dr.length;)dr.shift()()}function du(){Ir=!0}function Fr(e,t){return Array.isArray(t)?Co(e,t.join(" ")):typeof t=="object"&&t!==null?fu(e,t):typeof t=="function"?Fr(e,t()):Co(e,t)}function Co(e,t){let n=r=>r.split(" ").filter(o=>!e.classList.contains(o)).filter(Boolean),i=r=>(e.classList.add(...r),()=>{e.classList.remove(...r)});return t=t===!0?t="":t||"",i(n(t))}function fu(e,t){let n=l=>l.split(" ").filter(Boolean),i=Object.entries(t).flatMap(([l,d])=>d?n(l):!1).filter(Boolean),r=Object.entries(t).flatMap(([l,d])=>d?!1:n(l)).filter(Boolean),o=[],s=[];return r.forEach(l=>{e.classList.contains(l)&&(e.classList.remove(l),s.push(l))}),i.forEach(l=>{e.classList.contains(l)||(e.classList.add(l),o.push(l))}),()=>{s.forEach(l=>e.classList.add(l)),o.forEach(l=>e.classList.remove(l))}}function pi(e,t){return typeof t=="object"&&t!==null?hu(e,t):pu(e,t)}function hu(e,t){let n={};return Object.entries(t).forEach(([i,r])=>{n[i]=e.style[i],i.startsWith("--")||(i=mu(i)),e.style.setProperty(i,r)}),setTimeout(()=>{e.style.length===0&&e.removeAttribute("style")}),()=>{pi(e,n)}}function pu(e,t){let n=e.getAttribute("style",t);return e.setAttribute("style",t),()=>{e.setAttribute("style",n||"")}}function mu(e){return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function hr(e,t=()=>{}){let n=!1;return function(){n?t.apply(this,arguments):(n=!0,e.apply(this,arguments))}}he("transition",(e,{value:t,modifiers:n,expression:i},{evaluate:r})=>{typeof i=="function"&&(i=r(i)),i?gu(e,i,t):vu(e,n,t)});function gu(e,t,n){Is(e,Fr,""),{enter:r=>{e._x_transition.enter.during=r},"enter-start":r=>{e._x_transition.enter.start=r},"enter-end":r=>{e._x_transition.enter.end=r},leave:r=>{e._x_transition.leave.during=r},"leave-start":r=>{e._x_transition.leave.start=r},"leave-end":r=>{e._x_transition.leave.end=r}}[n](t)}function vu(e,t,n){Is(e,pi);let i=!t.includes("in")&&!t.includes("out")&&!n,r=i||t.includes("in")||["enter"].includes(n),o=i||t.includes("out")||["leave"].includes(n);t.includes("in")&&!i&&(t=t.filter((T,V)=>V<t.indexOf("out"))),t.includes("out")&&!i&&(t=t.filter((T,V)=>V>t.indexOf("out")));let s=!t.includes("opacity")&&!t.includes("scale"),l=s||t.includes("opacity"),d=s||t.includes("scale"),f=l?0:1,m=d?sn(t,"scale",95)/100:1,p=sn(t,"delay",0),g=sn(t,"origin","center"),w="opacity, transform",y=sn(t,"duration",150)/1e3,O=sn(t,"duration",75)/1e3,E="cubic-bezier(0.4, 0.0, 0.2, 1)";r&&(e._x_transition.enter.during={transformOrigin:g,transitionDelay:p,transitionProperty:w,transitionDuration:`${y}s`,transitionTimingFunction:E},e._x_transition.enter.start={opacity:f,transform:`scale(${m})`},e._x_transition.enter.end={opacity:1,transform:"scale(1)"}),o&&(e._x_transition.leave.during={transformOrigin:g,transitionDelay:p,transitionProperty:w,transitionDuration:`${O}s`,transitionTimingFunction:E},e._x_transition.leave.start={opacity:1,transform:"scale(1)"},e._x_transition.leave.end={opacity:f,transform:`scale(${m})`})}function Is(e,t,n={}){e._x_transition||(e._x_transition={enter:{during:n,start:n,end:n},leave:{during:n,start:n,end:n},in(i=()=>{},r=()=>{}){pr(e,t,{during:this.enter.during,start:this.enter.start,end:this.enter.end},i,r)},out(i=()=>{},r=()=>{}){pr(e,t,{during:this.leave.during,start:this.leave.start,end:this.leave.end},i,r)}})}window.Element.prototype._x_toggleAndCascadeWithTransitions=function(e,t,n,i){const r=document.visibilityState==="visible"?requestAnimationFrame:setTimeout;let o=()=>r(n);if(t){e._x_transition&&(e._x_transition.enter||e._x_transition.leave)?e._x_transition.enter&&(Object.entries(e._x_transition.enter.during).length||Object.entries(e._x_transition.enter.start).length||Object.entries(e._x_transition.enter.end).length)?e._x_transition.in(n):o():e._x_transition?e._x_transition.in(n):o();return}e._x_hidePromise=e._x_transition?new Promise((s,l)=>{e._x_transition.out(()=>{},()=>s(i)),e._x_transitioning.beforeCancel(()=>l({isFromCancelledTransition:!0}))}):Promise.resolve(i),queueMicrotask(()=>{let s=Ps(e);s?(s._x_hideChildren||(s._x_hideChildren=[]),s._x_hideChildren.push(e)):r(()=>{let l=d=>{let f=Promise.all([d._x_hidePromise,...(d._x_hideChildren||[]).map(l)]).then(([m])=>m());return delete d._x_hidePromise,delete d._x_hideChildren,f};l(e).catch(d=>{if(!d.isFromCancelledTransition)throw d})})})};function Ps(e){let t=e.parentNode;if(t)return t._x_hidePromise?t:Ps(t)}function pr(e,t,{during:n,start:i,end:r}={},o=()=>{},s=()=>{}){if(e._x_transitioning&&e._x_transitioning.cancel(),Object.keys(n).length===0&&Object.keys(i).length===0&&Object.keys(r).length===0){o(),s();return}let l,d,f;wu(e,{start(){l=t(e,i)},during(){d=t(e,n)},before:o,end(){l(),f=t(e,r)},after:s,cleanup(){d(),f()}})}function wu(e,t){let n,i,r,o=hr(()=>{we(()=>{n=!0,i||t.before(),r||(t.end(),fr()),t.after(),e.isConnected&&t.cleanup(),delete e._x_transitioning})});e._x_transitioning={beforeCancels:[],beforeCancel(s){this.beforeCancels.push(s)},cancel:hr(function(){for(;this.beforeCancels.length;)this.beforeCancels.shift()();o()}),finish:o},we(()=>{t.start(),t.during()}),du(),requestAnimationFrame(()=>{if(n)return;let s=Number(getComputedStyle(e).transitionDuration.replace(/,.*/,"").replace("s",""))*1e3,l=Number(getComputedStyle(e).transitionDelay.replace(/,.*/,"").replace("s",""))*1e3;s===0&&(s=Number(getComputedStyle(e).animationDuration.replace("s",""))*1e3),we(()=>{t.before()}),i=!0,requestAnimationFrame(()=>{n||(we(()=>{t.end()}),fr(),setTimeout(e._x_transitioning.finish,s+l),r=!0)})})}function sn(e,t,n){if(e.indexOf(t)===-1)return n;const i=e[e.indexOf(t)+1];if(!i||t==="scale"&&isNaN(i))return n;if(t==="duration"){let r=i.match(/([0-9]+)ms/);if(r)return r[1]}return t==="origin"&&["top","right","left","center","bottom"].includes(e[e.indexOf(t)+2])?[i,e[e.indexOf(t)+2]].join(" "):i}var gn=!1;function Cn(e,t=()=>{}){return(...n)=>gn?t(...n):e(...n)}function bu(e){return(...t)=>gn&&e(...t)}function yu(e,t){t._x_dataStack||(t._x_dataStack=e._x_dataStack),gn=!0,xu(()=>{_u(t)}),gn=!1}function _u(e){let t=!1;mt(e,(i,r)=>{pt(i,(o,s)=>{if(t&&cu(o))return s();t=!0,r(o,s)})})}function xu(e){let t=Xt;xo((n,i)=>{let r=t(n);return _n(r),()=>{}}),e(),xo(t)}function Fs(e,t,n,i=[]){switch(e._x_bindings||(e._x_bindings=Yt({})),e._x_bindings[t]=n,t=i.includes("camel")?Lu(t):t,t){case"value":Eu(e,n);break;case"style":Su(e,n);break;case"class":Cu(e,n);break;default:Au(e,t,n);break}}function Eu(e,t){if(e.type==="radio")e.attributes.value===void 0&&(e.value=t),window.fromModel&&(e.checked=So(e.value,t));else if(e.type==="checkbox")Number.isInteger(t)?e.value=t:!Number.isInteger(t)&&!Array.isArray(t)&&typeof t!="boolean"&&![null,void 0].includes(t)?e.value=String(t):Array.isArray(t)?e.checked=t.some(n=>So(n,e.value)):e.checked=!!t;else if(e.tagName==="SELECT")Tu(e,t);else{if(e.value===t)return;e.value=t}}function Cu(e,t){e._x_undoAddedClasses&&e._x_undoAddedClasses(),e._x_undoAddedClasses=Fr(e,t)}function Su(e,t){e._x_undoAddedStyles&&e._x_undoAddedStyles(),e._x_undoAddedStyles=pi(e,t)}function Au(e,t,n){[null,void 0,!1].includes(n)&&Nu(t)?e.removeAttribute(t):(Bs(t)&&(n=t),Ou(e,t,n))}function Ou(e,t,n){e.getAttribute(t)!=n&&e.setAttribute(t,n)}function Tu(e,t){const n=[].concat(t).map(i=>i+"");Array.from(e.options).forEach(i=>{i.selected=n.includes(i.value)})}function Lu(e){return e.toLowerCase().replace(/-(\w)/g,(t,n)=>n.toUpperCase())}function So(e,t){return e==t}function Bs(e){return["disabled","checked","required","readonly","hidden","open","selected","autofocus","itemscope","multiple","novalidate","allowfullscreen","allowpaymentrequest","formnovalidate","autoplay","controls","loop","muted","playsinline","default","ismap","reversed","async","defer","nomodule"].includes(e)}function Nu(e){return!["aria-pressed","aria-checked","aria-expanded","aria-selected"].includes(e)}function ku(e,t,n){if(e._x_bindings&&e._x_bindings[t]!==void 0)return e._x_bindings[t];let i=e.getAttribute(t);return i===null?typeof n=="function"?n():n:i===""?!0:Bs(t)?!![t,"true"].includes(i):i}function zs(e,t){var n;return function(){var i=this,r=arguments,o=function(){n=null,e.apply(i,r)};clearTimeout(n),n=setTimeout(o,t)}}function js(e,t){let n;return function(){let i=this,r=arguments;n||(e.apply(i,r),n=!0,setTimeout(()=>n=!1,t))}}function Du(e){e(Sn)}var Ct={},Ao=!1;function Mu(e,t){if(Ao||(Ct=Yt(Ct),Ao=!0),t===void 0)return Ct[e];Ct[e]=t,typeof t=="object"&&t!==null&&t.hasOwnProperty("init")&&typeof t.init=="function"&&Ct[e].init(),ms(Ct[e])}function Ru(){return Ct}var Vs={};function Hu(e,t){let n=typeof t!="function"?()=>t:t;e instanceof Element?$s(e,n()):Vs[e]=n}function Iu(e){return Object.entries(Vs).forEach(([t,n])=>{Object.defineProperty(e,t,{get(){return(...i)=>n(...i)}})}),e}function $s(e,t,n){let i=[];for(;i.length;)i.pop()();let r=Object.entries(t).map(([s,l])=>({name:s,value:l})),o=ys(r);r=r.map(s=>o.find(l=>l.name===s.name)?{name:`x-bind:${s.name}`,value:`"${s.value}"`}:s),Mr(e,r,n).map(s=>{i.push(s.runCleanups),s()})}var qs={};function Pu(e,t){qs[e]=t}function Fu(e,t){return Object.entries(qs).forEach(([n,i])=>{Object.defineProperty(e,n,{get(){return(...r)=>i.bind(t)(...r)},enumerable:!1})}),e}var Bu={get reactive(){return Yt},get release(){return _n},get effect(){return Xt},get raw(){return as},version:"3.12.0",flushAndStopDeferringMutations:Kc,dontAutoEvaluateFunctions:Zc,disableEffectScheduling:zc,startObservingMutations:Lr,stopObservingMutations:hs,setReactivityEngine:jc,closestDataStack:$t,skipDuringClone:Cn,onlyDuringClone:bu,addRootSelector:Ds,addInitSelector:Ms,addScopeToNode:xn,deferMutations:Xc,mapAttributes:Rr,evaluateLater:Le,interceptInit:uu,setEvaluator:Qc,mergeProxies:En,findClosest:hi,closestRoot:fi,destroyTree:Hs,interceptor:gs,transition:pr,setStyles:pi,mutateDom:we,directive:he,throttle:js,debounce:zs,evaluate:Pt,initTree:mt,nextTick:Pr,prefixed:Kt,prefix:iu,plugin:Du,magic:je,store:Mu,start:lu,clone:yu,bound:ku,$data:ps,walk:pt,data:Pu,bind:Hu},Sn=Bu;function zu(e,t){const n=Object.create(null),i=e.split(",");for(let r=0;r<i.length;r++)n[i[r]]=!0;return t?r=>!!n[r.toLowerCase()]:r=>!!n[r]}var ju=Object.freeze({}),Ws=Object.assign,Vu=Object.prototype.hasOwnProperty,mi=(e,t)=>Vu.call(e,t),Lt=Array.isArray,hn=e=>Us(e)==="[object Map]",$u=e=>typeof e=="string",Br=e=>typeof e=="symbol",gi=e=>e!==null&&typeof e=="object",qu=Object.prototype.toString,Us=e=>qu.call(e),Ys=e=>Us(e).slice(8,-1),zr=e=>$u(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Wu=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Uu=Wu(e=>e.charAt(0).toUpperCase()+e.slice(1)),Xs=(e,t)=>e!==t&&(e===e||t===t),mr=new WeakMap,an=[],qe,Nt=Symbol("iterate"),gr=Symbol("Map key iterate");function Yu(e){return e&&e._isEffect===!0}function Xu(e,t=ju){Yu(e)&&(e=e.raw);const n=Gu(e,t);return t.lazy||n(),n}function Ku(e){e.active&&(Ks(e),e.options.onStop&&e.options.onStop(),e.active=!1)}var Ju=0;function Gu(e,t){const n=function(){if(!n.active)return e();if(!an.includes(n)){Ks(n);try{return Qu(),an.push(n),qe=n,e()}finally{an.pop(),Js(),qe=an[an.length-1]}}};return n.id=Ju++,n.allowRecurse=!!t.allowRecurse,n._isEffect=!0,n.active=!0,n.raw=e,n.deps=[],n.options=t,n}function Ks(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}var Wt=!0,jr=[];function Zu(){jr.push(Wt),Wt=!1}function Qu(){jr.push(Wt),Wt=!0}function Js(){const e=jr.pop();Wt=e===void 0?!0:e}function ze(e,t,n){if(!Wt||qe===void 0)return;let i=mr.get(e);i||mr.set(e,i=new Map);let r=i.get(n);r||i.set(n,r=new Set),r.has(qe)||(r.add(qe),qe.deps.push(r),qe.options.onTrack&&qe.options.onTrack({effect:qe,target:e,type:t,key:n}))}function gt(e,t,n,i,r,o){const s=mr.get(e);if(!s)return;const l=new Set,d=m=>{m&&m.forEach(p=>{(p!==qe||p.allowRecurse)&&l.add(p)})};if(t==="clear")s.forEach(d);else if(n==="length"&&Lt(e))s.forEach((m,p)=>{(p==="length"||p>=i)&&d(m)});else switch(n!==void 0&&d(s.get(n)),t){case"add":Lt(e)?zr(n)&&d(s.get("length")):(d(s.get(Nt)),hn(e)&&d(s.get(gr)));break;case"delete":Lt(e)||(d(s.get(Nt)),hn(e)&&d(s.get(gr)));break;case"set":hn(e)&&d(s.get(Nt));break}const f=m=>{m.options.onTrigger&&m.options.onTrigger({effect:m,target:e,key:n,type:t,newValue:i,oldValue:r,oldTarget:o}),m.options.scheduler?m.options.scheduler(m):m()};l.forEach(f)}var ed=zu("__proto__,__v_isRef,__isVue"),Gs=new Set(Object.getOwnPropertyNames(Symbol).map(e=>Symbol[e]).filter(Br)),td=vi(),nd=vi(!1,!0),id=vi(!0),rd=vi(!0,!0),ti={};["includes","indexOf","lastIndexOf"].forEach(e=>{const t=Array.prototype[e];ti[e]=function(...n){const i=ae(this);for(let o=0,s=this.length;o<s;o++)ze(i,"get",o+"");const r=t.apply(i,n);return r===-1||r===!1?t.apply(i,n.map(ae)):r}});["push","pop","shift","unshift","splice"].forEach(e=>{const t=Array.prototype[e];ti[e]=function(...n){Zu();const i=t.apply(this,n);return Js(),i}});function vi(e=!1,t=!1){return function(i,r,o){if(r==="__v_isReactive")return!e;if(r==="__v_isReadonly")return e;if(r==="__v_raw"&&o===(e?t?pd:fa:t?hd:da).get(i))return i;const s=Lt(i);if(!e&&s&&mi(ti,r))return Reflect.get(ti,r,o);const l=Reflect.get(i,r,o);return(Br(r)?Gs.has(r):ed(r))||(e||ze(i,"get",r),t)?l:vr(l)?!s||!zr(r)?l.value:l:gi(l)?e?ha(l):Wr(l):l}}var od=Zs(),sd=Zs(!0);function Zs(e=!1){return function(n,i,r,o){let s=n[i];if(!e&&(r=ae(r),s=ae(s),!Lt(n)&&vr(s)&&!vr(r)))return s.value=r,!0;const l=Lt(n)&&zr(i)?Number(i)<n.length:mi(n,i),d=Reflect.set(n,i,r,o);return n===ae(o)&&(l?Xs(r,s)&&gt(n,"set",i,r,s):gt(n,"add",i,r)),d}}function ad(e,t){const n=mi(e,t),i=e[t],r=Reflect.deleteProperty(e,t);return r&&n&&gt(e,"delete",t,void 0,i),r}function ld(e,t){const n=Reflect.has(e,t);return(!Br(t)||!Gs.has(t))&&ze(e,"has",t),n}function cd(e){return ze(e,"iterate",Lt(e)?"length":Nt),Reflect.ownKeys(e)}var Qs={get:td,set:od,deleteProperty:ad,has:ld,ownKeys:cd},ea={get:id,set(e,t){return console.warn(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0},deleteProperty(e,t){return console.warn(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0}};Ws({},Qs,{get:nd,set:sd});Ws({},ea,{get:rd});var Vr=e=>gi(e)?Wr(e):e,$r=e=>gi(e)?ha(e):e,qr=e=>e,wi=e=>Reflect.getPrototypeOf(e);function bi(e,t,n=!1,i=!1){e=e.__v_raw;const r=ae(e),o=ae(t);t!==o&&!n&&ze(r,"get",t),!n&&ze(r,"get",o);const{has:s}=wi(r),l=i?qr:n?$r:Vr;if(s.call(r,t))return l(e.get(t));if(s.call(r,o))return l(e.get(o));e!==r&&e.get(t)}function yi(e,t=!1){const n=this.__v_raw,i=ae(n),r=ae(e);return e!==r&&!t&&ze(i,"has",e),!t&&ze(i,"has",r),e===r?n.has(e):n.has(e)||n.has(r)}function _i(e,t=!1){return e=e.__v_raw,!t&&ze(ae(e),"iterate",Nt),Reflect.get(e,"size",e)}function ta(e){e=ae(e);const t=ae(this);return wi(t).has.call(t,e)||(t.add(e),gt(t,"add",e,e)),this}function na(e,t){t=ae(t);const n=ae(this),{has:i,get:r}=wi(n);let o=i.call(n,e);o?ua(n,i,e):(e=ae(e),o=i.call(n,e));const s=r.call(n,e);return n.set(e,t),o?Xs(t,s)&&gt(n,"set",e,t,s):gt(n,"add",e,t),this}function ia(e){const t=ae(this),{has:n,get:i}=wi(t);let r=n.call(t,e);r?ua(t,n,e):(e=ae(e),r=n.call(t,e));const o=i?i.call(t,e):void 0,s=t.delete(e);return r&&gt(t,"delete",e,void 0,o),s}function ra(){const e=ae(this),t=e.size!==0,n=hn(e)?new Map(e):new Set(e),i=e.clear();return t&&gt(e,"clear",void 0,void 0,n),i}function xi(e,t){return function(i,r){const o=this,s=o.__v_raw,l=ae(s),d=t?qr:e?$r:Vr;return!e&&ze(l,"iterate",Nt),s.forEach((f,m)=>i.call(r,d(f),d(m),o))}}function $n(e,t,n){return function(...i){const r=this.__v_raw,o=ae(r),s=hn(o),l=e==="entries"||e===Symbol.iterator&&s,d=e==="keys"&&s,f=r[e](...i),m=n?qr:t?$r:Vr;return!t&&ze(o,"iterate",d?gr:Nt),{next(){const{value:p,done:g}=f.next();return g?{value:p,done:g}:{value:l?[m(p[0]),m(p[1])]:m(p),done:g}},[Symbol.iterator](){return this}}}}function ht(e){return function(...t){{const n=t[0]?`on key "${t[0]}" `:"";console.warn(`${Uu(e)} operation ${n}failed: target is readonly.`,ae(this))}return e==="delete"?!1:this}}var oa={get(e){return bi(this,e)},get size(){return _i(this)},has:yi,add:ta,set:na,delete:ia,clear:ra,forEach:xi(!1,!1)},sa={get(e){return bi(this,e,!1,!0)},get size(){return _i(this)},has:yi,add:ta,set:na,delete:ia,clear:ra,forEach:xi(!1,!0)},aa={get(e){return bi(this,e,!0)},get size(){return _i(this,!0)},has(e){return yi.call(this,e,!0)},add:ht("add"),set:ht("set"),delete:ht("delete"),clear:ht("clear"),forEach:xi(!0,!1)},la={get(e){return bi(this,e,!0,!0)},get size(){return _i(this,!0)},has(e){return yi.call(this,e,!0)},add:ht("add"),set:ht("set"),delete:ht("delete"),clear:ht("clear"),forEach:xi(!0,!0)},ud=["keys","values","entries",Symbol.iterator];ud.forEach(e=>{oa[e]=$n(e,!1,!1),aa[e]=$n(e,!0,!1),sa[e]=$n(e,!1,!0),la[e]=$n(e,!0,!0)});function ca(e,t){const n=t?e?la:sa:e?aa:oa;return(i,r,o)=>r==="__v_isReactive"?!e:r==="__v_isReadonly"?e:r==="__v_raw"?i:Reflect.get(mi(n,r)&&r in i?n:i,r,o)}var dd={get:ca(!1,!1)},fd={get:ca(!0,!1)};function ua(e,t,n){const i=ae(n);if(i!==n&&t.call(e,i)){const r=Ys(e);console.warn(`Reactive ${r} contains both the raw and reactive versions of the same object${r==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}var da=new WeakMap,hd=new WeakMap,fa=new WeakMap,pd=new WeakMap;function md(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function gd(e){return e.__v_skip||!Object.isExtensible(e)?0:md(Ys(e))}function Wr(e){return e&&e.__v_isReadonly?e:pa(e,!1,Qs,dd,da)}function ha(e){return pa(e,!0,ea,fd,fa)}function pa(e,t,n,i,r){if(!gi(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&!(t&&e.__v_isReactive))return e;const o=r.get(e);if(o)return o;const s=gd(e);if(s===0)return e;const l=new Proxy(e,s===2?i:n);return r.set(e,l),l}function ae(e){return e&&ae(e.__v_raw)||e}function vr(e){return!!(e&&e.__v_isRef===!0)}je("nextTick",()=>Pr);je("dispatch",e=>fn.bind(fn,e));je("watch",(e,{evaluateLater:t,effect:n})=>(i,r)=>{let o=t(i),s=!0,l,d=n(()=>o(f=>{JSON.stringify(f),s?l=f:queueMicrotask(()=>{r(f,l),l=f}),s=!1}));e._x_effects.delete(d)});je("store",Ru);je("data",e=>ps(e));je("root",e=>fi(e));je("refs",e=>(e._x_refs_proxy||(e._x_refs_proxy=En(vd(e))),e._x_refs_proxy));function vd(e){let t=[],n=e;for(;n;)n._x_refs&&t.push(n._x_refs),n=n.parentNode;return t}var qi={};function ma(e){return qi[e]||(qi[e]=0),++qi[e]}function wd(e,t){return hi(e,n=>{if(n._x_ids&&n._x_ids[t])return!0})}function bd(e,t){e._x_ids||(e._x_ids={}),e._x_ids[t]||(e._x_ids[t]=ma(t))}je("id",e=>(t,n=null)=>{let i=wd(e,t),r=i?i._x_ids[t]:ma(t);return n?`${t}-${r}-${n}`:`${t}-${r}`});je("el",e=>e);ga("Focus","focus","focus");ga("Persist","persist","persist");function ga(e,t,n){je(t,i=>qt(`You can't use [$${directiveName}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${n}`,i))}function yd({get:e,set:t},{get:n,set:i}){let r=!0,o,s,l=Xt(()=>{let d,f;r?(d=e(),i(d),f=n(),r=!1):(d=e(),f=n(),s=JSON.stringify(d),JSON.stringify(f),s!==o?(f=n(),i(d),f=d):(t(f),d=f)),o=JSON.stringify(d),JSON.stringify(f)});return()=>{_n(l)}}he("modelable",(e,{expression:t},{effect:n,evaluateLater:i,cleanup:r})=>{let o=i(t),s=()=>{let m;return o(p=>m=p),m},l=i(`${t} = __placeholder`),d=m=>l(()=>{},{scope:{__placeholder:m}}),f=s();d(f),queueMicrotask(()=>{if(!e._x_model)return;e._x_removeModelListeners.default();let m=e._x_model.get,p=e._x_model.set,g=yd({get(){return m()},set(w){p(w)}},{get(){return s()},set(w){d(w)}});r(g)})});var _d=document.createElement("div");he("teleport",(e,{modifiers:t,expression:n},{cleanup:i})=>{e.tagName.toLowerCase()!=="template"&&qt("x-teleport can only be used on a <template> tag",e);let r=Cn(()=>document.querySelector(n),()=>_d)();r||qt(`Cannot find x-teleport element for selector: "${n}"`);let o=e.content.cloneNode(!0).firstElementChild;e._x_teleport=o,o._x_teleportBack=e,e._x_forwardEvents&&e._x_forwardEvents.forEach(s=>{o.addEventListener(s,l=>{l.stopPropagation(),e.dispatchEvent(new l.constructor(l.type,l))})}),xn(o,{},e),we(()=>{t.includes("prepend")?r.parentNode.insertBefore(o,r):t.includes("append")?r.parentNode.insertBefore(o,r.nextSibling):r.appendChild(o),mt(o),o._x_ignore=!0}),i(()=>o.remove())});var va=()=>{};va.inline=(e,{modifiers:t},{cleanup:n})=>{t.includes("self")?e._x_ignoreSelf=!0:e._x_ignore=!0,n(()=>{t.includes("self")?delete e._x_ignoreSelf:delete e._x_ignore})};he("ignore",va);he("effect",(e,{expression:t},{effect:n})=>n(Le(e,t)));function wr(e,t,n,i){let r=e,o=d=>i(d),s={},l=(d,f)=>m=>f(d,m);if(n.includes("dot")&&(t=xd(t)),n.includes("camel")&&(t=Ed(t)),n.includes("passive")&&(s.passive=!0),n.includes("capture")&&(s.capture=!0),n.includes("window")&&(r=window),n.includes("document")&&(r=document),n.includes("prevent")&&(o=l(o,(d,f)=>{f.preventDefault(),d(f)})),n.includes("stop")&&(o=l(o,(d,f)=>{f.stopPropagation(),d(f)})),n.includes("self")&&(o=l(o,(d,f)=>{f.target===e&&d(f)})),(n.includes("away")||n.includes("outside"))&&(r=document,o=l(o,(d,f)=>{e.contains(f.target)||f.target.isConnected!==!1&&(e.offsetWidth<1&&e.offsetHeight<1||e._x_isShown!==!1&&d(f))})),n.includes("once")&&(o=l(o,(d,f)=>{d(f),r.removeEventListener(t,o,s)})),o=l(o,(d,f)=>{Sd(t)&&Ad(f,n)||d(f)}),n.includes("debounce")){let d=n[n.indexOf("debounce")+1]||"invalid-wait",f=ni(d.split("ms")[0])?Number(d.split("ms")[0]):250;o=zs(o,f)}if(n.includes("throttle")){let d=n[n.indexOf("throttle")+1]||"invalid-wait",f=ni(d.split("ms")[0])?Number(d.split("ms")[0]):250;o=js(o,f)}return r.addEventListener(t,o,s),()=>{r.removeEventListener(t,o,s)}}function xd(e){return e.replace(/-/g,".")}function Ed(e){return e.toLowerCase().replace(/-(\w)/g,(t,n)=>n.toUpperCase())}function ni(e){return!Array.isArray(e)&&!isNaN(e)}function Cd(e){return[" ","_"].includes(e)?e:e.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[_\s]/,"-").toLowerCase()}function Sd(e){return["keydown","keyup"].includes(e)}function Ad(e,t){let n=t.filter(o=>!["window","document","prevent","stop","once","capture"].includes(o));if(n.includes("debounce")){let o=n.indexOf("debounce");n.splice(o,ni((n[o+1]||"invalid-wait").split("ms")[0])?2:1)}if(n.includes("throttle")){let o=n.indexOf("throttle");n.splice(o,ni((n[o+1]||"invalid-wait").split("ms")[0])?2:1)}if(n.length===0||n.length===1&&Oo(e.key).includes(n[0]))return!1;const r=["ctrl","shift","alt","meta","cmd","super"].filter(o=>n.includes(o));return n=n.filter(o=>!r.includes(o)),!(r.length>0&&r.filter(s=>((s==="cmd"||s==="super")&&(s="meta"),e[`${s}Key`])).length===r.length&&Oo(e.key).includes(n[0]))}function Oo(e){if(!e)return[];e=Cd(e);let t={ctrl:"control",slash:"/",space:" ",spacebar:" ",cmd:"meta",esc:"escape",up:"arrow-up",down:"arrow-down",left:"arrow-left",right:"arrow-right",period:".",equal:"=",minus:"-",underscore:"_"};return t[e]=e,Object.keys(t).map(n=>{if(t[n]===e)return n}).filter(n=>n)}he("model",(e,{modifiers:t,expression:n},{effect:i,cleanup:r})=>{let o=e;t.includes("parent")&&(o=e.parentNode);let s=Le(o,n),l;typeof n=="string"?l=Le(o,`${n} = __placeholder`):typeof n=="function"&&typeof n()=="string"?l=Le(o,`${n()} = __placeholder`):l=()=>{};let d=()=>{let g;return s(w=>g=w),To(g)?g.get():g},f=g=>{let w;s(y=>w=y),To(w)?w.set(g):l(()=>{},{scope:{__placeholder:g}})};t.includes("fill")&&e.hasAttribute("value")&&(d()===null||d()==="")&&f(e.value),typeof n=="string"&&e.type==="radio"&&we(()=>{e.hasAttribute("name")||e.setAttribute("name",n)});var m=e.tagName.toLowerCase()==="select"||["checkbox","radio"].includes(e.type)||t.includes("lazy")?"change":"input";let p=gn?()=>{}:wr(e,m,t,g=>{f(Od(e,t,g,d()))});if(e._x_removeModelListeners||(e._x_removeModelListeners={}),e._x_removeModelListeners.default=p,r(()=>e._x_removeModelListeners.default()),e.form){let g=wr(e.form,"reset",[],w=>{Pr(()=>e._x_model&&e._x_model.set(e.value))});r(()=>g())}e._x_model={get(){return d()},set(g){f(g)}},e._x_forceModelUpdate=g=>{g=g===void 0?d():g,g===void 0&&typeof n=="string"&&n.match(/\./)&&(g=""),window.fromModel=!0,we(()=>Fs(e,"value",g)),delete window.fromModel},i(()=>{let g=d();t.includes("unintrusive")&&document.activeElement.isSameNode(e)||e._x_forceModelUpdate(g)})});function Od(e,t,n,i){return we(()=>{if(n instanceof CustomEvent&&n.detail!==void 0)return typeof n.detail<"u"?n.detail:n.target.value;if(e.type==="checkbox")if(Array.isArray(i)){let r=t.includes("number")?Wi(n.target.value):n.target.value;return n.target.checked?i.concat([r]):i.filter(o=>!Td(o,r))}else return n.target.checked;else{if(e.tagName.toLowerCase()==="select"&&e.multiple)return t.includes("number")?Array.from(n.target.selectedOptions).map(r=>{let o=r.value||r.text;return Wi(o)}):Array.from(n.target.selectedOptions).map(r=>r.value||r.text);{let r=n.target.value;return t.includes("number")?Wi(r):t.includes("trim")?r.trim():r}}})}function Wi(e){let t=e?parseFloat(e):null;return Ld(t)?t:e}function Td(e,t){return e==t}function Ld(e){return!Array.isArray(e)&&!isNaN(e)}function To(e){return e!==null&&typeof e=="object"&&typeof e.get=="function"&&typeof e.set=="function"}he("cloak",e=>queueMicrotask(()=>we(()=>e.removeAttribute(Kt("cloak")))));Ms(()=>`[${Kt("init")}]`);he("init",Cn((e,{expression:t},{evaluate:n})=>typeof t=="string"?!!t.trim()&&n(t,{},!1):n(t,{},!1)));he("text",(e,{expression:t},{effect:n,evaluateLater:i})=>{let r=i(t);n(()=>{r(o=>{we(()=>{e.textContent=o})})})});he("html",(e,{expression:t},{effect:n,evaluateLater:i})=>{let r=i(t);n(()=>{r(o=>{we(()=>{e.innerHTML=o,e._x_ignoreSelf=!0,mt(e),delete e._x_ignoreSelf})})})});Rr(Es(":",Cs(Kt("bind:"))));he("bind",(e,{value:t,modifiers:n,expression:i,original:r},{effect:o})=>{if(!t){let l={};Iu(l),Le(e,i)(f=>{$s(e,f,r)},{scope:l});return}if(t==="key")return Nd(e,i);let s=Le(e,i);o(()=>s(l=>{l===void 0&&typeof i=="string"&&i.match(/\./)&&(l=""),we(()=>Fs(e,t,l,n))}))});function Nd(e,t){e._x_keyExpression=t}Ds(()=>`[${Kt("data")}]`);he("data",Cn((e,{expression:t},{cleanup:n})=>{t=t===""?"{}":t;let i={};ar(i,e);let r={};Fu(r,i);let o=Pt(e,t,{scope:r});(o===void 0||o===!0)&&(o={}),ar(o,e);let s=Yt(o);ms(s);let l=xn(e,s);s.init&&Pt(e,s.init),n(()=>{s.destroy&&Pt(e,s.destroy),l()})}));he("show",(e,{modifiers:t,expression:n},{effect:i})=>{let r=Le(e,n);e._x_doHide||(e._x_doHide=()=>{we(()=>{e.style.setProperty("display","none",t.includes("important")?"important":void 0)})}),e._x_doShow||(e._x_doShow=()=>{we(()=>{e.style.length===1&&e.style.display==="none"?e.removeAttribute("style"):e.style.removeProperty("display")})});let o=()=>{e._x_doHide(),e._x_isShown=!1},s=()=>{e._x_doShow(),e._x_isShown=!0},l=()=>setTimeout(s),d=hr(p=>p?s():o(),p=>{typeof e._x_toggleAndCascadeWithTransitions=="function"?e._x_toggleAndCascadeWithTransitions(e,p,s,o):p?l():o()}),f,m=!0;i(()=>r(p=>{!m&&p===f||(t.includes("immediate")&&(p?l():o()),d(p),f=p,m=!1)}))});he("for",(e,{expression:t},{effect:n,cleanup:i})=>{let r=Dd(t),o=Le(e,r.items),s=Le(e,e._x_keyExpression||"index");e._x_prevKeys=[],e._x_lookup={},n(()=>kd(e,r,o,s)),i(()=>{Object.values(e._x_lookup).forEach(l=>l.remove()),delete e._x_prevKeys,delete e._x_lookup})});function kd(e,t,n,i){let r=s=>typeof s=="object"&&!Array.isArray(s),o=e;n(s=>{Md(s)&&s>=0&&(s=Array.from(Array(s).keys(),E=>E+1)),s===void 0&&(s=[]);let l=e._x_lookup,d=e._x_prevKeys,f=[],m=[];if(r(s))s=Object.entries(s).map(([E,T])=>{let V=Lo(t,T,E,s);i(J=>m.push(J),{scope:{index:E,...V}}),f.push(V)});else for(let E=0;E<s.length;E++){let T=Lo(t,s[E],E,s);i(V=>m.push(V),{scope:{index:E,...T}}),f.push(T)}let p=[],g=[],w=[],y=[];for(let E=0;E<d.length;E++){let T=d[E];m.indexOf(T)===-1&&w.push(T)}d=d.filter(E=>!w.includes(E));let O="template";for(let E=0;E<m.length;E++){let T=m[E],V=d.indexOf(T);if(V===-1)d.splice(E,0,T),p.push([O,E]);else if(V!==E){let J=d.splice(E,1)[0],X=d.splice(V-1,1)[0];d.splice(E,0,X),d.splice(V,0,J),g.push([J,X])}else y.push(T);O=T}for(let E=0;E<w.length;E++){let T=w[E];l[T]._x_effects&&l[T]._x_effects.forEach(ss),l[T].remove(),l[T]=null,delete l[T]}for(let E=0;E<g.length;E++){let[T,V]=g[E],J=l[T],X=l[V],U=document.createElement("div");we(()=>{X.after(U),J.after(X),X._x_currentIfEl&&X.after(X._x_currentIfEl),U.before(J),J._x_currentIfEl&&J.after(J._x_currentIfEl),U.remove()}),Eo(X,f[m.indexOf(V)])}for(let E=0;E<p.length;E++){let[T,V]=p[E],J=T==="template"?o:l[T];J._x_currentIfEl&&(J=J._x_currentIfEl);let X=f[V],U=m[V],C=document.importNode(o.content,!0).firstElementChild;xn(C,Yt(X),o),we(()=>{J.after(C),mt(C)}),typeof U=="object"&&qt("x-for key cannot be an object, it must be a string or an integer",o),l[U]=C}for(let E=0;E<y.length;E++)Eo(l[y[E]],f[m.indexOf(y[E])]);o._x_prevKeys=m})}function Dd(e){let t=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,n=/^\s*\(|\)\s*$/g,i=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,r=e.match(i);if(!r)return;let o={};o.items=r[2].trim();let s=r[1].replace(n,"").trim(),l=s.match(t);return l?(o.item=s.replace(t,"").trim(),o.index=l[1].trim(),l[2]&&(o.collection=l[2].trim())):o.item=s,o}function Lo(e,t,n,i){let r={};return/^\[.*\]$/.test(e.item)&&Array.isArray(t)?e.item.replace("[","").replace("]","").split(",").map(s=>s.trim()).forEach((s,l)=>{r[s]=t[l]}):/^\{.*\}$/.test(e.item)&&!Array.isArray(t)&&typeof t=="object"?e.item.replace("{","").replace("}","").split(",").map(s=>s.trim()).forEach(s=>{r[s]=t[s]}):r[e.item]=t,e.index&&(r[e.index]=n),e.collection&&(r[e.collection]=i),r}function Md(e){return!Array.isArray(e)&&!isNaN(e)}function wa(){}wa.inline=(e,{expression:t},{cleanup:n})=>{let i=fi(e);i._x_refs||(i._x_refs={}),i._x_refs[t]=e,n(()=>delete i._x_refs[t])};he("ref",wa);he("if",(e,{expression:t},{effect:n,cleanup:i})=>{let r=Le(e,t),o=()=>{if(e._x_currentIfEl)return e._x_currentIfEl;let l=e.content.cloneNode(!0).firstElementChild;return xn(l,{},e),we(()=>{e.after(l),mt(l)}),e._x_currentIfEl=l,e._x_undoIf=()=>{pt(l,d=>{d._x_effects&&d._x_effects.forEach(ss)}),l.remove(),delete e._x_currentIfEl},l},s=()=>{e._x_undoIf&&(e._x_undoIf(),delete e._x_undoIf)};n(()=>r(l=>{l?o():s()})),i(()=>e._x_undoIf&&e._x_undoIf())});he("id",(e,{expression:t},{evaluate:n})=>{n(t).forEach(r=>bd(e,r))});Rr(Es("@",Cs(Kt("on:"))));he("on",Cn((e,{value:t,modifiers:n,expression:i},{cleanup:r})=>{let o=i?Le(e,i):()=>{};e.tagName.toLowerCase()==="template"&&(e._x_forwardEvents||(e._x_forwardEvents=[]),e._x_forwardEvents.includes(t)||e._x_forwardEvents.push(t));let s=wr(e,t,n,l=>{o(()=>{},{scope:{$event:l},params:[l]})});r(()=>s())}));Ei("Collapse","collapse","collapse");Ei("Intersect","intersect","intersect");Ei("Focus","trap","focus");Ei("Mask","mask","mask");function Ei(e,t,n){he(t,i=>qt(`You can't use [x-${t}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${n}`,i))}Sn.setEvaluator(bs);Sn.setReactivityEngine({reactive:Wr,effect:Xu,release:Ku,raw:ae});var Rd=Sn,Ur=Rd,ba=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])',"details>summary:first-of-type","details"],No=ba.join(","),ii=typeof Element>"u"?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector,ya=function(t,n,i){var r=Array.prototype.slice.apply(t.querySelectorAll(No));return n&&ii.call(t,No)&&r.unshift(t),r=r.filter(i),r},Hd=function(t){return t.contentEditable==="true"},_a=function(t){var n=parseInt(t.getAttribute("tabindex"),10);return isNaN(n)?Hd(t)||(t.nodeName==="AUDIO"||t.nodeName==="VIDEO"||t.nodeName==="DETAILS")&&t.getAttribute("tabindex")===null?0:t.tabIndex:n},Id=function(t,n){return t.tabIndex===n.tabIndex?t.documentOrder-n.documentOrder:t.tabIndex-n.tabIndex},Yr=function(t){return t.tagName==="INPUT"},Pd=function(t){return Yr(t)&&t.type==="hidden"},Fd=function(t){var n=t.tagName==="DETAILS"&&Array.prototype.slice.apply(t.children).some(function(i){return i.tagName==="SUMMARY"});return n},Bd=function(t,n){for(var i=0;i<t.length;i++)if(t[i].checked&&t[i].form===n)return t[i]},zd=function(t){if(!t.name)return!0;var n=t.form||t.ownerDocument,i=function(l){return n.querySelectorAll('input[type="radio"][name="'+l+'"]')},r;if(typeof window<"u"&&typeof window.CSS<"u"&&typeof window.CSS.escape=="function")r=i(window.CSS.escape(t.name));else try{r=i(t.name)}catch(s){return console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s",s.message),!1}var o=Bd(r,t.form);return!o||o===t},jd=function(t){return Yr(t)&&t.type==="radio"},Vd=function(t){return jd(t)&&!zd(t)},$d=function(t,n){if(getComputedStyle(t).visibility==="hidden")return!0;var i=ii.call(t,"details>summary:first-of-type"),r=i?t.parentElement:t;if(ii.call(r,"details:not([open]) *"))return!0;if(!n||n==="full")for(;t;){if(getComputedStyle(t).display==="none")return!0;t=t.parentElement}else if(n==="non-zero-area"){var o=t.getBoundingClientRect(),s=o.width,l=o.height;return s===0&&l===0}return!1},qd=function(t){if(Yr(t)||t.tagName==="SELECT"||t.tagName==="TEXTAREA"||t.tagName==="BUTTON")for(var n=t.parentElement;n;){if(n.tagName==="FIELDSET"&&n.disabled){for(var i=0;i<n.children.length;i++){var r=n.children.item(i);if(r.tagName==="LEGEND")return!r.contains(t)}return!0}n=n.parentElement}return!1},Xr=function(t,n){return!(n.disabled||Pd(n)||$d(n,t.displayCheck)||Fd(n)||qd(n))},Wd=function(t,n){return!(!Xr(t,n)||Vd(n)||_a(n)<0)},Ud=function(t,n){n=n||{};var i=[],r=[],o=ya(t,n.includeContainer,Wd.bind(null,n));o.forEach(function(l,d){var f=_a(l);f===0?i.push(l):r.push({documentOrder:d,tabIndex:f,node:l})});var s=r.sort(Id).map(function(l){return l.node}).concat(i);return s},Yd=function(t,n){n=n||{};var i=ya(t,n.includeContainer,Xr.bind(null,n));return i},Xd=ba.concat("iframe").join(","),xa=function(t,n){if(n=n||{},!t)throw new Error("No node provided");return ii.call(t,Xd)===!1?!1:Xr(n,t)};function ko(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),n.push.apply(n,i)}return n}function Kd(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?ko(Object(n),!0).forEach(function(i){Jd(e,i,n[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ko(Object(n)).forEach(function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(n,i))})}return e}function Jd(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Do=function(){var e=[];return{activateTrap:function(n){if(e.length>0){var i=e[e.length-1];i!==n&&i.pause()}var r=e.indexOf(n);r===-1||e.splice(r,1),e.push(n)},deactivateTrap:function(n){var i=e.indexOf(n);i!==-1&&e.splice(i,1),e.length>0&&e[e.length-1].unpause()}}}(),Gd=function(t){return t.tagName&&t.tagName.toLowerCase()==="input"&&typeof t.select=="function"},Zd=function(t){return t.key==="Escape"||t.key==="Esc"||t.keyCode===27},Qd=function(t){return t.key==="Tab"||t.keyCode===9},Mo=function(t){return setTimeout(t,0)},Ui=function(t,n){var i=-1;return t.every(function(r,o){return n(r)?(i=o,!1):!0}),i},ln=function(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];return typeof t=="function"?t.apply(void 0,i):t},ef=function(t,n){var i=document,r=Kd({returnFocusOnDeactivate:!0,escapeDeactivates:!0,delayInitialFocus:!0},n),o={containers:[],tabbableGroups:[],nodeFocusedBeforeActivation:null,mostRecentlyFocusedNode:null,active:!1,paused:!1,delayInitialFocusTimer:void 0},s,l=function(C,S,R){return C&&C[S]!==void 0?C[S]:r[R||S]},d=function(C){return o.containers.some(function(S){return S.contains(C)})},f=function(C){var S=r[C];if(!S)return null;var R=S;if(typeof S=="string"&&(R=i.querySelector(S),!R))throw new Error("`".concat(C,"` refers to no known node"));if(typeof S=="function"&&(R=S(),!R))throw new Error("`".concat(C,"` did not return a node"));return R},m=function(){var C;if(l({},"initialFocus")===!1)return!1;if(f("initialFocus")!==null)C=f("initialFocus");else if(d(i.activeElement))C=i.activeElement;else{var S=o.tabbableGroups[0],R=S&&S.firstTabbableNode;C=R||f("fallbackFocus")}if(!C)throw new Error("Your focus-trap needs to have at least one focusable element");return C},p=function(){if(o.tabbableGroups=o.containers.map(function(C){var S=Ud(C);if(S.length>0)return{container:C,firstTabbableNode:S[0],lastTabbableNode:S[S.length-1]}}).filter(function(C){return!!C}),o.tabbableGroups.length<=0&&!f("fallbackFocus"))throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times")},g=function U(C){if(C!==!1&&C!==i.activeElement){if(!C||!C.focus){U(m());return}C.focus({preventScroll:!!r.preventScroll}),o.mostRecentlyFocusedNode=C,Gd(C)&&C.select()}},w=function(C){var S=f("setReturnFocus");return S||C},y=function(C){if(!d(C.target)){if(ln(r.clickOutsideDeactivates,C)){s.deactivate({returnFocus:r.returnFocusOnDeactivate&&!xa(C.target)});return}ln(r.allowOutsideClick,C)||C.preventDefault()}},O=function(C){var S=d(C.target);S||C.target instanceof Document?S&&(o.mostRecentlyFocusedNode=C.target):(C.stopImmediatePropagation(),g(o.mostRecentlyFocusedNode||m()))},E=function(C){p();var S=null;if(o.tabbableGroups.length>0){var R=Ui(o.tabbableGroups,function(Y){var de=Y.container;return de.contains(C.target)});if(R<0)C.shiftKey?S=o.tabbableGroups[o.tabbableGroups.length-1].lastTabbableNode:S=o.tabbableGroups[0].firstTabbableNode;else if(C.shiftKey){var Q=Ui(o.tabbableGroups,function(Y){var de=Y.firstTabbableNode;return C.target===de});if(Q<0&&o.tabbableGroups[R].container===C.target&&(Q=R),Q>=0){var ee=Q===0?o.tabbableGroups.length-1:Q-1,k=o.tabbableGroups[ee];S=k.lastTabbableNode}}else{var D=Ui(o.tabbableGroups,function(Y){var de=Y.lastTabbableNode;return C.target===de});if(D<0&&o.tabbableGroups[R].container===C.target&&(D=R),D>=0){var W=D===o.tabbableGroups.length-1?0:D+1,I=o.tabbableGroups[W];S=I.firstTabbableNode}}}else S=f("fallbackFocus");S&&(C.preventDefault(),g(S))},T=function(C){if(Zd(C)&&ln(r.escapeDeactivates)!==!1){C.preventDefault(),s.deactivate();return}if(Qd(C)){E(C);return}},V=function(C){ln(r.clickOutsideDeactivates,C)||d(C.target)||ln(r.allowOutsideClick,C)||(C.preventDefault(),C.stopImmediatePropagation())},J=function(){if(o.active)return Do.activateTrap(s),o.delayInitialFocusTimer=r.delayInitialFocus?Mo(function(){g(m())}):g(m()),i.addEventListener("focusin",O,!0),i.addEventListener("mousedown",y,{capture:!0,passive:!1}),i.addEventListener("touchstart",y,{capture:!0,passive:!1}),i.addEventListener("click",V,{capture:!0,passive:!1}),i.addEventListener("keydown",T,{capture:!0,passive:!1}),s},X=function(){if(o.active)return i.removeEventListener("focusin",O,!0),i.removeEventListener("mousedown",y,!0),i.removeEventListener("touchstart",y,!0),i.removeEventListener("click",V,!0),i.removeEventListener("keydown",T,!0),s};return s={activate:function(C){if(o.active)return this;var S=l(C,"onActivate"),R=l(C,"onPostActivate"),Q=l(C,"checkCanFocusTrap");Q||p(),o.active=!0,o.paused=!1,o.nodeFocusedBeforeActivation=i.activeElement,S&&S();var ee=function(){Q&&p(),J(),R&&R()};return Q?(Q(o.containers.concat()).then(ee,ee),this):(ee(),this)},deactivate:function(C){if(!o.active)return this;clearTimeout(o.delayInitialFocusTimer),o.delayInitialFocusTimer=void 0,X(),o.active=!1,o.paused=!1,Do.deactivateTrap(s);var S=l(C,"onDeactivate"),R=l(C,"onPostDeactivate"),Q=l(C,"checkCanReturnFocus");S&&S();var ee=l(C,"returnFocus","returnFocusOnDeactivate"),k=function(){Mo(function(){ee&&g(w(o.nodeFocusedBeforeActivation)),R&&R()})};return ee&&Q?(Q(w(o.nodeFocusedBeforeActivation)).then(k,k),this):(k(),this)},pause:function(){return o.paused||!o.active?this:(o.paused=!0,X(),this)},unpause:function(){return!o.paused||!o.active?this:(o.paused=!1,p(),J(),this)},updateContainerElements:function(C){var S=[].concat(C).filter(Boolean);return o.containers=S.map(function(R){return typeof R=="string"?i.querySelector(R):R}),o.active&&p(),this}},s.updateContainerElements(t),s};function tf(e){let t,n;window.addEventListener("focusin",()=>{t=n,n=document.activeElement}),e.magic("focus",i=>{let r=i;return{__noscroll:!1,__wrapAround:!1,within(o){return r=o,this},withoutScrolling(){return this.__noscroll=!0,this},noscroll(){return this.__noscroll=!0,this},withWrapAround(){return this.__wrapAround=!0,this},wrap(){return this.withWrapAround()},focusable(o){return xa(o)},previouslyFocused(){return t},lastFocused(){return t},focused(){return n},focusables(){return Array.isArray(r)?r:Yd(r,{displayCheck:"none"})},all(){return this.focusables()},isFirst(o){let s=this.all();return s[0]&&s[0].isSameNode(o)},isLast(o){let s=this.all();return s.length&&s.slice(-1)[0].isSameNode(o)},getFirst(){return this.all()[0]},getLast(){return this.all().slice(-1)[0]},getNext(){let o=this.all(),s=document.activeElement;if(o.indexOf(s)!==-1)return this.__wrapAround&&o.indexOf(s)===o.length-1?o[0]:o[o.indexOf(s)+1]},getPrevious(){let o=this.all(),s=document.activeElement;if(o.indexOf(s)!==-1)return this.__wrapAround&&o.indexOf(s)===0?o.slice(-1)[0]:o[o.indexOf(s)-1]},first(){this.focus(this.getFirst())},last(){this.focus(this.getLast())},next(){this.focus(this.getNext())},previous(){this.focus(this.getPrevious())},prev(){return this.previous()},focus(o){o&&setTimeout(()=>{o.hasAttribute("tabindex")||o.setAttribute("tabindex","0"),o.focus({preventScroll:this._noscroll})})}}}),e.directive("trap",e.skipDuringClone((i,{expression:r,modifiers:o},{effect:s,evaluateLater:l,cleanup:d})=>{let f=l(r),m=!1,p=ef(i,{escapeDeactivates:!1,allowOutsideClick:!0,fallbackFocus:()=>i,initialFocus:i.querySelector("[autofocus]")}),g=()=>{},w=()=>{};const y=()=>{g(),g=()=>{},w(),w=()=>{},p.deactivate({returnFocus:!o.includes("noreturn")})};s(()=>f(O=>{m!==O&&(O&&!m&&setTimeout(()=>{o.includes("inert")&&(g=Ro(i)),o.includes("noscroll")&&(w=nf()),p.activate()}),!O&&m&&y(),m=!!O)})),d(y)},(i,{expression:r,modifiers:o},{evaluate:s})=>{o.includes("inert")&&s(r)&&Ro(i)}))}function Ro(e){let t=[];return Ea(e,n=>{let i=n.hasAttribute("aria-hidden");n.setAttribute("aria-hidden","true"),t.push(()=>i||n.removeAttribute("aria-hidden"))}),()=>{for(;t.length;)t.pop()()}}function Ea(e,t){e.isSameNode(document.body)||!e.parentNode||Array.from(e.parentNode.children).forEach(n=>{n.isSameNode(e)?Ea(e.parentNode,t):t(n)})}function nf(){let e=document.documentElement.style.overflow,t=document.documentElement.style.paddingRight,n=window.innerWidth-document.documentElement.clientWidth;return document.documentElement.style.overflow="hidden",document.documentElement.style.paddingRight=`${n}px`,()=>{document.documentElement.style.overflow=e,document.documentElement.style.paddingRight=t}}var rf=tf;/*! Bundled license information:

tabbable/dist/index.esm.js:
  (*!
  * tabbable 5.2.1
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)

focus-trap/dist/focus-trap.esm.js:
  (*!
  * focus-trap 6.6.1
  * @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
  *)
*/mw.app=new Va;mw.app.register("commands",Nc);mw.app.register("modules",kc);mw.app.register("layouts",Dc);mw.app.register("keyboard",Mc);mw.app.register("iconPicker",Rc);mw.app.register("linkPicker",Hc);window.Alpine=Ur;Ur.plugin(rf);Ur.start();export{ve as D,sf as E,Oc as L,oi as M,Zn as a,$a as c,af as g,lf as l};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
