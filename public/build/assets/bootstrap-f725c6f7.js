var $a=Object.defineProperty;var Wa=(e,t,n)=>t in e?$a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var Te=(e,t,n)=>(Wa(e,typeof t!="symbol"?t+"":t,n),n),Hi=(e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)};var F=(e,t,n)=>(Hi(e,t,"read from private field"),n?n.call(e):t.get(e)),Le=(e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)},Bt=(e,t,n,i)=>(Hi(e,t,"write to private field"),i?i.call(e,n):t.set(e,n),n);var et=(e,t,n)=>(Hi(e,t,"access private method"),n);var Re;class Ut{constructor(){Le(this,Re,{})}on(t,n){F(this,Re)[t]?F(this,Re)[t].push(n):F(this,Re)[t]=[n]}off(t,n){if(F(this,Re)[t])if(typeof n=="function"){const i=F(this,Re)[t].indexOf(n);if(i===-1)return;F(this,Re)[t].splice(i,1)}else F(this,Re)[t]=[]}dispatch(t,n){F(this,Re)[t]&&F(this,Re)[t].forEach(function(i){i.call(this,n)})}emit(t,n){return this.dispatch(t,n)}}Re=new WeakMap;var He,Ft,Wn;class Ua extends Ut{constructor(){super(...arguments);Le(this,Ft);Le(this,He,{})}call(n,i){for(let r in F(this,He))F(this,He)[r][n]&&et(this,Ft,Wn).call(this,n,F(this,He)[r],i)}get(n){return F(this,He)[n]}getModules(){return F(this,He)}register(n,i){let r;typeof i=="function"?r=new i:r=i,F(this,He)[n]=r,this[n]=r,et(this,Ft,Wn).call(this,"onRegister",r),this.dispatch("register")}remove(n){let i;if(typeof n=="string"&&(i=n,n=this.get(n)),!i){for(let r in F(this,He))if(F(this,He)[r]===n){i=r;break}}delete F(this,He)[i],delete this[i],et(this,Ft,Wn).call(this,"onDestroy",n),this.dispatch("remove")}}He=new WeakMap,Ft=new WeakSet,Wn=function(n,i,r){!n||!i||!i[n]||(n=i[n],n(r))};mw.require("editor.js");mw.require("css_parser.js");const ff=function(){var e=document.querySelector("#mw-live-edit-editor"),t=function(){var l={};this.on=function(d,f){l[d]?l[d].push(f):l[d]=[f]},this.dispatch=function(d,f){l[d]&&l[d].forEach(function(p){p.call(this,f)})},this.provide=function(d){this.dispatch("change",d.map(function(f){return{label:f,value:f}}))}},n=new t;window.fontFamilyProvider=n;const i=mw.app.get("canvas").getFrame();i.contentWindow.fontFamilyProvider=n;const r=[[{group:{icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5,4V7H10.5V19H13.5V7H19V4H5Z" /></svg>',controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],o=mw.Editor({document:i.contentWindow.document,executionDocument:i.contentWindow.document,actionWindow:i.contentWindow,element:e,mode:"document",notEditableClasses:["module"],regions:".edit",skin:"le2",editMode:"liveedit",controls:null,smallEditor:r,smallEditorPositionX:"left",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:n,forced:!0});e.innerHTML="",e.appendChild(o.wrapper);var s=o.storage.get(o.settings.id+"-small-editor-pinned");typeof s>"u"&&typeof o.smallEditorApi<"u"&&o.smallEditorApi.pin(),mw.app.register("richTextEditor",o),mw.app.register("richTextEditorAPI",o.api)};var Va=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function hf(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Ya={exports:{}};(function(e,t){(function(n,i){e.exports=i()})(Va,function(){return function(n){function i(o){if(r[o])return r[o].exports;var s=r[o]={exports:{},id:o,loaded:!1};return n[o].call(s.exports,s,s.exports,i),s.loaded=!0,s.exports}var r={};return i.m=n,i.c=r,i.p="dist/",i(0)}([function(n,i,r){function o(R){return R&&R.__esModule?R:{default:R}}var s=Object.assign||function(R){for(var Y=1;Y<arguments.length;Y++){var de=arguments[Y];for(var qe in de)Object.prototype.hasOwnProperty.call(de,qe)&&(R[qe]=de[qe])}return R},l=r(1),d=(o(l),r(6)),f=o(d),p=r(7),w=o(p),m=r(8),v=o(m),b=r(9),T=o(b),_=r(10),A=o(_),j=r(11),J=o(j),X=r(14),V=o(X),C=[],S=!1,M={offset:120,delay:0,easing:"ease",duration:400,disable:!1,once:!1,startEvent:"DOMContentLoaded",throttleDelay:99,debounceDelay:50,disableMutationObserver:!1},G=function(){var R=arguments.length>0&&arguments[0]!==void 0&&arguments[0];if(R&&(S=!0),S)return C=(0,J.default)(C,M),(0,A.default)(C,M.once),C},Z=function(){C=(0,V.default)(),G()},k=function(){C.forEach(function(R,Y){R.node.removeAttribute("data-aos"),R.node.removeAttribute("data-aos-easing"),R.node.removeAttribute("data-aos-duration"),R.node.removeAttribute("data-aos-delay")})},D=function(R){return R===!0||R==="mobile"&&T.default.mobile()||R==="phone"&&T.default.phone()||R==="tablet"&&T.default.tablet()||typeof R=="function"&&R()===!0},U=function(R){M=s(M,R),C=(0,V.default)();var Y=document.all&&!window.atob;return D(M.disable)||Y?k():(M.disableMutationObserver||v.default.isSupported()||(console.info(`
      aos: MutationObserver is not supported on this browser,
      code mutations observing has been disabled.
      You may have to call "refreshHard()" by yourself.
    `),M.disableMutationObserver=!0),document.querySelector("body").setAttribute("data-aos-easing",M.easing),document.querySelector("body").setAttribute("data-aos-duration",M.duration),document.querySelector("body").setAttribute("data-aos-delay",M.delay),M.startEvent==="DOMContentLoaded"&&["complete","interactive"].indexOf(document.readyState)>-1?G(!0):M.startEvent==="load"?window.addEventListener(M.startEvent,function(){G(!0)}):document.addEventListener(M.startEvent,function(){G(!0)}),window.addEventListener("resize",(0,w.default)(G,M.debounceDelay,!0)),window.addEventListener("orientationchange",(0,w.default)(G,M.debounceDelay,!0)),window.addEventListener("scroll",(0,f.default)(function(){(0,A.default)(C,M.once)},M.throttleDelay)),M.disableMutationObserver||v.default.ready("[data-aos]",Z),C)};n.exports={init:U,refresh:G,refreshHard:Z}},function(n,i){},,,,,function(n,i){(function(r){function o(D,U,R){function Y(Q){var ee=Ee,re=ke;return Ee=ke=void 0,Se=Q,me=D.apply(re,ee)}function de(Q){return Se=Q,ue=setTimeout(Ke,U),Ie?Y(Q):me}function qe(Q){var ee=Q-Ce,re=Q-Se,L=U-ee;return Oe?Z(L,ie-re):L}function ye(Q){var ee=Q-Ce,re=Q-Se;return Ce===void 0||ee>=U||ee<0||Oe&&re>=ie}function Ke(){var Q=k();return ye(Q)?nt(Q):void(ue=setTimeout(Ke,qe(Q)))}function nt(Q){return ue=void 0,ne&&Ee?Y(Q):(Ee=ke=void 0,me)}function Je(){ue!==void 0&&clearTimeout(ue),Se=0,Ee=Ce=ke=ue=void 0}function it(){return ue===void 0?me:nt(k())}function Pe(){var Q=k(),ee=ye(Q);if(Ee=arguments,ke=this,Ce=Q,ee){if(ue===void 0)return de(Ce);if(Oe)return ue=setTimeout(Ke,U),Y(Ce)}return ue===void 0&&(ue=setTimeout(Ke,U)),me}var Ee,ke,ie,me,ue,Ce,Se=0,Ie=!1,Oe=!1,ne=!0;if(typeof D!="function")throw new TypeError(m);return U=p(U)||0,l(R)&&(Ie=!!R.leading,Oe="maxWait"in R,ie=Oe?G(p(R.maxWait)||0,U):ie,ne="trailing"in R?!!R.trailing:ne),Pe.cancel=Je,Pe.flush=it,Pe}function s(D,U,R){var Y=!0,de=!0;if(typeof D!="function")throw new TypeError(m);return l(R)&&(Y="leading"in R?!!R.leading:Y,de="trailing"in R?!!R.trailing:de),o(D,U,{leading:Y,maxWait:U,trailing:de})}function l(D){var U=typeof D>"u"?"undefined":w(D);return!!D&&(U=="object"||U=="function")}function d(D){return!!D&&(typeof D>"u"?"undefined":w(D))=="object"}function f(D){return(typeof D>"u"?"undefined":w(D))=="symbol"||d(D)&&M.call(D)==b}function p(D){if(typeof D=="number")return D;if(f(D))return v;if(l(D)){var U=typeof D.valueOf=="function"?D.valueOf():D;D=l(U)?U+"":U}if(typeof D!="string")return D===0?D:+D;D=D.replace(T,"");var R=A.test(D);return R||j.test(D)?J(D.slice(2),R?2:8):_.test(D)?v:+D}var w=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(D){return typeof D}:function(D){return D&&typeof Symbol=="function"&&D.constructor===Symbol&&D!==Symbol.prototype?"symbol":typeof D},m="Expected a function",v=NaN,b="[object Symbol]",T=/^\s+|\s+$/g,_=/^[-+]0x[0-9a-f]+$/i,A=/^0b[01]+$/i,j=/^0o[0-7]+$/i,J=parseInt,X=(typeof r>"u"?"undefined":w(r))=="object"&&r&&r.Object===Object&&r,V=(typeof self>"u"?"undefined":w(self))=="object"&&self&&self.Object===Object&&self,C=X||V||Function("return this")(),S=Object.prototype,M=S.toString,G=Math.max,Z=Math.min,k=function(){return C.Date.now()};n.exports=s}).call(i,function(){return this}())},function(n,i){(function(r){function o(k,D,U){function R(ne){var Q=Pe,ee=Ee;return Pe=Ee=void 0,Ce=ne,ie=k.apply(ee,Q)}function Y(ne){return Ce=ne,me=setTimeout(ye,D),Se?R(ne):ie}function de(ne){var Q=ne-ue,ee=ne-Ce,re=D-Q;return Ie?G(re,ke-ee):re}function qe(ne){var Q=ne-ue,ee=ne-Ce;return ue===void 0||Q>=D||Q<0||Ie&&ee>=ke}function ye(){var ne=Z();return qe(ne)?Ke(ne):void(me=setTimeout(ye,de(ne)))}function Ke(ne){return me=void 0,Oe&&Pe?R(ne):(Pe=Ee=void 0,ie)}function nt(){me!==void 0&&clearTimeout(me),Ce=0,Pe=ue=Ee=me=void 0}function Je(){return me===void 0?ie:Ke(Z())}function it(){var ne=Z(),Q=qe(ne);if(Pe=arguments,Ee=this,ue=ne,Q){if(me===void 0)return Y(ue);if(Ie)return me=setTimeout(ye,D),R(ue)}return me===void 0&&(me=setTimeout(ye,D)),ie}var Pe,Ee,ke,ie,me,ue,Ce=0,Se=!1,Ie=!1,Oe=!0;if(typeof k!="function")throw new TypeError(w);return D=f(D)||0,s(U)&&(Se=!!U.leading,Ie="maxWait"in U,ke=Ie?M(f(U.maxWait)||0,D):ke,Oe="trailing"in U?!!U.trailing:Oe),it.cancel=nt,it.flush=Je,it}function s(k){var D=typeof k>"u"?"undefined":p(k);return!!k&&(D=="object"||D=="function")}function l(k){return!!k&&(typeof k>"u"?"undefined":p(k))=="object"}function d(k){return(typeof k>"u"?"undefined":p(k))=="symbol"||l(k)&&S.call(k)==v}function f(k){if(typeof k=="number")return k;if(d(k))return m;if(s(k)){var D=typeof k.valueOf=="function"?k.valueOf():k;k=s(D)?D+"":D}if(typeof k!="string")return k===0?k:+k;k=k.replace(b,"");var U=_.test(k);return U||A.test(k)?j(k.slice(2),U?2:8):T.test(k)?m:+k}var p=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(k){return typeof k}:function(k){return k&&typeof Symbol=="function"&&k.constructor===Symbol&&k!==Symbol.prototype?"symbol":typeof k},w="Expected a function",m=NaN,v="[object Symbol]",b=/^\s+|\s+$/g,T=/^[-+]0x[0-9a-f]+$/i,_=/^0b[01]+$/i,A=/^0o[0-7]+$/i,j=parseInt,J=(typeof r>"u"?"undefined":p(r))=="object"&&r&&r.Object===Object&&r,X=(typeof self>"u"?"undefined":p(self))=="object"&&self&&self.Object===Object&&self,V=J||X||Function("return this")(),C=Object.prototype,S=C.toString,M=Math.max,G=Math.min,Z=function(){return V.Date.now()};n.exports=o}).call(i,function(){return this}())},function(n,i){function r(p){var w=void 0,m=void 0;for(w=0;w<p.length;w+=1)if(m=p[w],m.dataset&&m.dataset.aos||m.children&&r(m.children))return!0;return!1}function o(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}function s(){return!!o()}function l(p,w){var m=window.document,v=o(),b=new v(d);f=w,b.observe(m.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}function d(p){p&&p.forEach(function(w){var m=Array.prototype.slice.call(w.addedNodes),v=Array.prototype.slice.call(w.removedNodes),b=m.concat(v);if(r(b))return f()})}Object.defineProperty(i,"__esModule",{value:!0});var f=function(){};i.default={isSupported:s,ready:l}},function(n,i){function r(m,v){if(!(m instanceof v))throw new TypeError("Cannot call a class as a function")}function o(){return navigator.userAgent||navigator.vendor||window.opera||""}Object.defineProperty(i,"__esModule",{value:!0});var s=function(){function m(v,b){for(var T=0;T<b.length;T++){var _=b[T];_.enumerable=_.enumerable||!1,_.configurable=!0,"value"in _&&(_.writable=!0),Object.defineProperty(v,_.key,_)}}return function(v,b,T){return b&&m(v.prototype,b),T&&m(v,T),v}}(),l=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,d=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,f=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,p=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,w=function(){function m(){r(this,m)}return s(m,[{key:"phone",value:function(){var v=o();return!(!l.test(v)&&!d.test(v.substr(0,4)))}},{key:"mobile",value:function(){var v=o();return!(!f.test(v)&&!p.test(v.substr(0,4)))}},{key:"tablet",value:function(){return this.mobile()&&!this.phone()}}]),m}();i.default=new w},function(n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=function(s,l,d){var f=s.node.getAttribute("data-aos-once");l>s.position?s.node.classList.add("aos-animate"):typeof f<"u"&&(f==="false"||!d&&f!=="true")&&s.node.classList.remove("aos-animate")},o=function(s,l){var d=window.pageYOffset,f=window.innerHeight;s.forEach(function(p,w){r(p,f+d,l)})};i.default=o},function(n,i,r){function o(f){return f&&f.__esModule?f:{default:f}}Object.defineProperty(i,"__esModule",{value:!0});var s=r(12),l=o(s),d=function(f,p){return f.forEach(function(w,m){w.node.classList.add("aos-init"),w.position=(0,l.default)(w.node,p.offset)}),f};i.default=d},function(n,i,r){function o(f){return f&&f.__esModule?f:{default:f}}Object.defineProperty(i,"__esModule",{value:!0});var s=r(13),l=o(s),d=function(f,p){var w=0,m=0,v=window.innerHeight,b={offset:f.getAttribute("data-aos-offset"),anchor:f.getAttribute("data-aos-anchor"),anchorPlacement:f.getAttribute("data-aos-anchor-placement")};switch(b.offset&&!isNaN(b.offset)&&(m=parseInt(b.offset)),b.anchor&&document.querySelectorAll(b.anchor)&&(f=document.querySelectorAll(b.anchor)[0]),w=(0,l.default)(f).top,b.anchorPlacement){case"top-bottom":break;case"center-bottom":w+=f.offsetHeight/2;break;case"bottom-bottom":w+=f.offsetHeight;break;case"top-center":w+=v/2;break;case"bottom-center":w+=v/2+f.offsetHeight;break;case"center-center":w+=v/2+f.offsetHeight/2;break;case"top-top":w+=v;break;case"bottom-top":w+=f.offsetHeight+v;break;case"center-top":w+=f.offsetHeight/2+v}return b.anchorPlacement||b.offset||isNaN(p)||(m=p),w+m};i.default=d},function(n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=function(o){for(var s=0,l=0;o&&!isNaN(o.offsetLeft)&&!isNaN(o.offsetTop);)s+=o.offsetLeft-(o.tagName!="BODY"?o.scrollLeft:0),l+=o.offsetTop-(o.tagName!="BODY"?o.scrollTop:0),o=o.offsetParent;return{top:l,left:s}};i.default=r},function(n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=function(o){return o=o||document.querySelectorAll("[data-aos]"),Array.prototype.map.call(o,function(s){return{node:s}})};i.default=r}])})})(Ya);function Po(e,t){return function(){return e.apply(t,arguments)}}const{toString:Xa}=Object.prototype,{getPrototypeOf:yr}=Object,oi=(e=>t=>{const n=Xa.call(t);return e[n]||(e[n]=n.slice(8,-1).toLowerCase())})(Object.create(null)),Xe=e=>(e=e.toLowerCase(),t=>oi(t)===e),si=e=>t=>typeof t===e,{isArray:Vt}=Array,pn=si("undefined");function Ka(e){return e!==null&&!pn(e)&&e.constructor!==null&&!pn(e.constructor)&&Be(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const Io=Xe("ArrayBuffer");function Ja(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&Io(e.buffer),t}const Ga=si("string"),Be=si("function"),Ro=si("number"),ai=e=>e!==null&&typeof e=="object",Za=e=>e===!0||e===!1,Un=e=>{if(oi(e)!=="object")return!1;const t=yr(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},Qa=Xe("Date"),el=Xe("File"),tl=Xe("Blob"),nl=Xe("FileList"),il=e=>ai(e)&&Be(e.pipe),rl=e=>{let t;return e&&(typeof FormData=="function"&&e instanceof FormData||Be(e.append)&&((t=oi(e))==="formdata"||t==="object"&&Be(e.toString)&&e.toString()==="[object FormData]"))},ol=Xe("URLSearchParams"),sl=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function bn(e,t,{allOwnKeys:n=!1}={}){if(e===null||typeof e>"u")return;let i,r;if(typeof e!="object"&&(e=[e]),Vt(e))for(i=0,r=e.length;i<r;i++)t.call(null,e[i],i,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),s=o.length;let l;for(i=0;i<s;i++)l=o[i],t.call(null,e[l],l,e)}}function Ho(e,t){t=t.toLowerCase();const n=Object.keys(e);let i=n.length,r;for(;i-- >0;)if(r=n[i],t===r.toLowerCase())return r;return null}const Bo=(()=>typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global)(),Fo=e=>!pn(e)&&e!==Bo;function Yi(){const{caseless:e}=Fo(this)&&this||{},t={},n=(i,r)=>{const o=e&&Ho(t,r)||r;Un(t[o])&&Un(i)?t[o]=Yi(t[o],i):Un(i)?t[o]=Yi({},i):Vt(i)?t[o]=i.slice():t[o]=i};for(let i=0,r=arguments.length;i<r;i++)arguments[i]&&bn(arguments[i],n);return t}const al=(e,t,n,{allOwnKeys:i}={})=>(bn(t,(r,o)=>{n&&Be(r)?e[o]=Po(r,n):e[o]=r},{allOwnKeys:i}),e),ll=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),cl=(e,t,n,i)=>{e.prototype=Object.create(t.prototype,i),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},ul=(e,t,n,i)=>{let r,o,s;const l={};if(t=t||{},e==null)return t;do{for(r=Object.getOwnPropertyNames(e),o=r.length;o-- >0;)s=r[o],(!i||i(s,e,t))&&!l[s]&&(t[s]=e[s],l[s]=!0);e=n!==!1&&yr(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},dl=(e,t,n)=>{e=String(e),(n===void 0||n>e.length)&&(n=e.length),n-=t.length;const i=e.indexOf(t,n);return i!==-1&&i===n},fl=e=>{if(!e)return null;if(Vt(e))return e;let t=e.length;if(!Ro(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},hl=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&yr(Uint8Array)),pl=(e,t)=>{const i=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=i.next())&&!r.done;){const o=r.value;t.call(e,o[0],o[1])}},ml=(e,t)=>{let n;const i=[];for(;(n=e.exec(t))!==null;)i.push(n);return i},gl=Xe("HTMLFormElement"),vl=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(n,i,r){return i.toUpperCase()+r}),so=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),wl=Xe("RegExp"),zo=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),i={};bn(n,(r,o)=>{t(r,o,e)!==!1&&(i[o]=r)}),Object.defineProperties(e,i)},bl=e=>{zo(e,(t,n)=>{if(Be(e)&&["arguments","caller","callee"].indexOf(n)!==-1)return!1;const i=e[n];if(Be(i)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")})}})},yl=(e,t)=>{const n={},i=r=>{r.forEach(o=>{n[o]=!0})};return Vt(e)?i(e):i(String(e).split(t)),n},_l=()=>{},xl=(e,t)=>(e=+e,Number.isFinite(e)?e:t),Bi="abcdefghijklmnopqrstuvwxyz",ao="0123456789",jo={DIGIT:ao,ALPHA:Bi,ALPHA_DIGIT:Bi+Bi.toUpperCase()+ao},El=(e=16,t=jo.ALPHA_DIGIT)=>{let n="";const{length:i}=t;for(;e--;)n+=t[Math.random()*i|0];return n};function Cl(e){return!!(e&&Be(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const Sl=e=>{const t=new Array(10),n=(i,r)=>{if(ai(i)){if(t.indexOf(i)>=0)return;if(!("toJSON"in i)){t[r]=i;const o=Vt(i)?[]:{};return bn(i,(s,l)=>{const d=n(s,r+1);!pn(d)&&(o[l]=d)}),t[r]=void 0,o}}return i};return n(e,0)},Ol=Xe("AsyncFunction"),Al=e=>e&&(ai(e)||Be(e))&&Be(e.then)&&Be(e.catch),E={isArray:Vt,isArrayBuffer:Io,isBuffer:Ka,isFormData:rl,isArrayBufferView:Ja,isString:Ga,isNumber:Ro,isBoolean:Za,isObject:ai,isPlainObject:Un,isUndefined:pn,isDate:Qa,isFile:el,isBlob:tl,isRegExp:wl,isFunction:Be,isStream:il,isURLSearchParams:ol,isTypedArray:hl,isFileList:nl,forEach:bn,merge:Yi,extend:al,trim:sl,stripBOM:ll,inherits:cl,toFlatObject:ul,kindOf:oi,kindOfTest:Xe,endsWith:dl,toArray:fl,forEachEntry:pl,matchAll:ml,isHTMLForm:gl,hasOwnProperty:so,hasOwnProp:so,reduceDescriptors:zo,freezeMethods:bl,toObjectSet:yl,toCamelCase:vl,noop:_l,toFiniteNumber:xl,findKey:Ho,global:Bo,isContextDefined:Fo,ALPHABET:jo,generateString:El,isSpecCompliantForm:Cl,toJSONObject:Sl,isAsyncFn:Ol,isThenable:Al};function K(e,t,n,i,r){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),i&&(this.request=i),r&&(this.response=r)}E.inherits(K,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:E.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const qo=K.prototype,$o={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{$o[e]={value:e}});Object.defineProperties(K,$o);Object.defineProperty(qo,"isAxiosError",{value:!0});K.from=(e,t,n,i,r,o)=>{const s=Object.create(qo);return E.toFlatObject(e,s,function(d){return d!==Error.prototype},l=>l!=="isAxiosError"),K.call(s,e.message,t,n,i,r),s.cause=e,s.name=e.name,o&&Object.assign(s,o),s};const Tl=null;function Xi(e){return E.isPlainObject(e)||E.isArray(e)}function Wo(e){return E.endsWith(e,"[]")?e.slice(0,-2):e}function lo(e,t,n){return e?e.concat(t).map(function(r,o){return r=Wo(r),!n&&o?"["+r+"]":r}).join(n?".":""):t}function Ll(e){return E.isArray(e)&&!e.some(Xi)}const Nl=E.toFlatObject(E,{},null,function(t){return/^is[A-Z]/.test(t)});function li(e,t,n){if(!E.isObject(e))throw new TypeError("target must be an object");t=t||new FormData,n=E.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,function(T,_){return!E.isUndefined(_[T])});const i=n.metaTokens,r=n.visitor||p,o=n.dots,s=n.indexes,d=(n.Blob||typeof Blob<"u"&&Blob)&&E.isSpecCompliantForm(t);if(!E.isFunction(r))throw new TypeError("visitor must be a function");function f(b){if(b===null)return"";if(E.isDate(b))return b.toISOString();if(!d&&E.isBlob(b))throw new K("Blob is not supported. Use a Buffer instead.");return E.isArrayBuffer(b)||E.isTypedArray(b)?d&&typeof Blob=="function"?new Blob([b]):Buffer.from(b):b}function p(b,T,_){let A=b;if(b&&!_&&typeof b=="object"){if(E.endsWith(T,"{}"))T=i?T:T.slice(0,-2),b=JSON.stringify(b);else if(E.isArray(b)&&Ll(b)||(E.isFileList(b)||E.endsWith(T,"[]"))&&(A=E.toArray(b)))return T=Wo(T),A.forEach(function(J,X){!(E.isUndefined(J)||J===null)&&t.append(s===!0?lo([T],X,o):s===null?T:T+"[]",f(J))}),!1}return Xi(b)?!0:(t.append(lo(_,T,o),f(b)),!1)}const w=[],m=Object.assign(Nl,{defaultVisitor:p,convertValue:f,isVisitable:Xi});function v(b,T){if(!E.isUndefined(b)){if(w.indexOf(b)!==-1)throw Error("Circular reference detected in "+T.join("."));w.push(b),E.forEach(b,function(A,j){(!(E.isUndefined(A)||A===null)&&r.call(t,A,E.isString(j)?j.trim():j,T,m))===!0&&v(A,T?T.concat(j):[j])}),w.pop()}}if(!E.isObject(e))throw new TypeError("data must be an object");return v(e),t}function co(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(i){return t[i]})}function _r(e,t){this._pairs=[],e&&li(e,this,t)}const Uo=_r.prototype;Uo.append=function(t,n){this._pairs.push([t,n])};Uo.toString=function(t){const n=t?function(i){return t.call(this,i,co)}:co;return this._pairs.map(function(r){return n(r[0])+"="+n(r[1])},"").join("&")};function kl(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Vo(e,t,n){if(!t)return e;const i=n&&n.encode||kl,r=n&&n.serialize;let o;if(r?o=r(t,n):o=E.isURLSearchParams(t)?t.toString():new _r(t,n).toString(i),o){const s=e.indexOf("#");s!==-1&&(e=e.slice(0,s)),e+=(e.indexOf("?")===-1?"?":"&")+o}return e}class Dl{constructor(){this.handlers=[]}use(t,n,i){return this.handlers.push({fulfilled:t,rejected:n,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){E.forEach(this.handlers,function(i){i!==null&&t(i)})}}const uo=Dl,Yo={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Ml=typeof URLSearchParams<"u"?URLSearchParams:_r,Pl=typeof FormData<"u"?FormData:null,Il=typeof Blob<"u"?Blob:null,Rl=(()=>{let e;return typeof navigator<"u"&&((e=navigator.product)==="ReactNative"||e==="NativeScript"||e==="NS")?!1:typeof window<"u"&&typeof document<"u"})(),Hl=(()=>typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function")(),Ve={isBrowser:!0,classes:{URLSearchParams:Ml,FormData:Pl,Blob:Il},isStandardBrowserEnv:Rl,isStandardBrowserWebWorkerEnv:Hl,protocols:["http","https","file","blob","url","data"]};function Bl(e,t){return li(e,new Ve.classes.URLSearchParams,Object.assign({visitor:function(n,i,r,o){return Ve.isNode&&E.isBuffer(n)?(this.append(i,n.toString("base64")),!1):o.defaultVisitor.apply(this,arguments)}},t))}function Fl(e){return E.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function zl(e){const t={},n=Object.keys(e);let i;const r=n.length;let o;for(i=0;i<r;i++)o=n[i],t[o]=e[o];return t}function Xo(e){function t(n,i,r,o){let s=n[o++];const l=Number.isFinite(+s),d=o>=n.length;return s=!s&&E.isArray(r)?r.length:s,d?(E.hasOwnProp(r,s)?r[s]=[r[s],i]:r[s]=i,!l):((!r[s]||!E.isObject(r[s]))&&(r[s]=[]),t(n,i,r[s],o)&&E.isArray(r[s])&&(r[s]=zl(r[s])),!l)}if(E.isFormData(e)&&E.isFunction(e.entries)){const n={};return E.forEachEntry(e,(i,r)=>{t(Fl(i),r,n,0)}),n}return null}const jl={"Content-Type":void 0};function ql(e,t,n){if(E.isString(e))try{return(t||JSON.parse)(e),E.trim(e)}catch(i){if(i.name!=="SyntaxError")throw i}return(n||JSON.stringify)(e)}const ci={transitional:Yo,adapter:["xhr","http"],transformRequest:[function(t,n){const i=n.getContentType()||"",r=i.indexOf("application/json")>-1,o=E.isObject(t);if(o&&E.isHTMLForm(t)&&(t=new FormData(t)),E.isFormData(t))return r&&r?JSON.stringify(Xo(t)):t;if(E.isArrayBuffer(t)||E.isBuffer(t)||E.isStream(t)||E.isFile(t)||E.isBlob(t))return t;if(E.isArrayBufferView(t))return t.buffer;if(E.isURLSearchParams(t))return n.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let l;if(o){if(i.indexOf("application/x-www-form-urlencoded")>-1)return Bl(t,this.formSerializer).toString();if((l=E.isFileList(t))||i.indexOf("multipart/form-data")>-1){const d=this.env&&this.env.FormData;return li(l?{"files[]":t}:t,d&&new d,this.formSerializer)}}return o||r?(n.setContentType("application/json",!1),ql(t)):t}],transformResponse:[function(t){const n=this.transitional||ci.transitional,i=n&&n.forcedJSONParsing,r=this.responseType==="json";if(t&&E.isString(t)&&(i&&!this.responseType||r)){const s=!(n&&n.silentJSONParsing)&&r;try{return JSON.parse(t)}catch(l){if(s)throw l.name==="SyntaxError"?K.from(l,K.ERR_BAD_RESPONSE,this,null,this.response):l}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Ve.classes.FormData,Blob:Ve.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};E.forEach(["delete","get","head"],function(t){ci.headers[t]={}});E.forEach(["post","put","patch"],function(t){ci.headers[t]=E.merge(jl)});const xr=ci,$l=E.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Wl=e=>{const t={};let n,i,r;return e&&e.split(`
`).forEach(function(s){r=s.indexOf(":"),n=s.substring(0,r).trim().toLowerCase(),i=s.substring(r+1).trim(),!(!n||t[n]&&$l[n])&&(n==="set-cookie"?t[n]?t[n].push(i):t[n]=[i]:t[n]=t[n]?t[n]+", "+i:i)}),t},fo=Symbol("internals");function on(e){return e&&String(e).trim().toLowerCase()}function Vn(e){return e===!1||e==null?e:E.isArray(e)?e.map(Vn):String(e)}function Ul(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let i;for(;i=n.exec(e);)t[i[1]]=i[2];return t}const Vl=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function Fi(e,t,n,i,r){if(E.isFunction(i))return i.call(this,t,n);if(r&&(t=n),!!E.isString(t)){if(E.isString(i))return t.indexOf(i)!==-1;if(E.isRegExp(i))return i.test(t)}}function Yl(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,n,i)=>n.toUpperCase()+i)}function Xl(e,t){const n=E.toCamelCase(" "+t);["get","set","has"].forEach(i=>{Object.defineProperty(e,i+n,{value:function(r,o,s){return this[i].call(this,t,r,o,s)},configurable:!0})})}class ui{constructor(t){t&&this.set(t)}set(t,n,i){const r=this;function o(l,d,f){const p=on(d);if(!p)throw new Error("header name must be a non-empty string");const w=E.findKey(r,p);(!w||r[w]===void 0||f===!0||f===void 0&&r[w]!==!1)&&(r[w||d]=Vn(l))}const s=(l,d)=>E.forEach(l,(f,p)=>o(f,p,d));return E.isPlainObject(t)||t instanceof this.constructor?s(t,n):E.isString(t)&&(t=t.trim())&&!Vl(t)?s(Wl(t),n):t!=null&&o(n,t,i),this}get(t,n){if(t=on(t),t){const i=E.findKey(this,t);if(i){const r=this[i];if(!n)return r;if(n===!0)return Ul(r);if(E.isFunction(n))return n.call(this,r,i);if(E.isRegExp(n))return n.exec(r);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,n){if(t=on(t),t){const i=E.findKey(this,t);return!!(i&&this[i]!==void 0&&(!n||Fi(this,this[i],i,n)))}return!1}delete(t,n){const i=this;let r=!1;function o(s){if(s=on(s),s){const l=E.findKey(i,s);l&&(!n||Fi(i,i[l],l,n))&&(delete i[l],r=!0)}}return E.isArray(t)?t.forEach(o):o(t),r}clear(t){const n=Object.keys(this);let i=n.length,r=!1;for(;i--;){const o=n[i];(!t||Fi(this,this[o],o,t,!0))&&(delete this[o],r=!0)}return r}normalize(t){const n=this,i={};return E.forEach(this,(r,o)=>{const s=E.findKey(i,o);if(s){n[s]=Vn(r),delete n[o];return}const l=t?Yl(o):String(o).trim();l!==o&&delete n[o],n[l]=Vn(r),i[l]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const n=Object.create(null);return E.forEach(this,(i,r)=>{i!=null&&i!==!1&&(n[r]=t&&E.isArray(i)?i.join(", "):i)}),n}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,n])=>t+": "+n).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...n){const i=new this(t);return n.forEach(r=>i.set(r)),i}static accessor(t){const i=(this[fo]=this[fo]={accessors:{}}).accessors,r=this.prototype;function o(s){const l=on(s);i[l]||(Xl(r,s),i[l]=!0)}return E.isArray(t)?t.forEach(o):o(t),this}}ui.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);E.freezeMethods(ui.prototype);E.freezeMethods(ui);const tt=ui;function zi(e,t){const n=this||xr,i=t||n,r=tt.from(i.headers);let o=i.data;return E.forEach(e,function(l){o=l.call(n,o,r.normalize(),t?t.status:void 0)}),r.normalize(),o}function Ko(e){return!!(e&&e.__CANCEL__)}function yn(e,t,n){K.call(this,e??"canceled",K.ERR_CANCELED,t,n),this.name="CanceledError"}E.inherits(yn,K,{__CANCEL__:!0});function Kl(e,t,n){const i=n.config.validateStatus;!n.status||!i||i(n.status)?e(n):t(new K("Request failed with status code "+n.status,[K.ERR_BAD_REQUEST,K.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n))}const Jl=Ve.isStandardBrowserEnv?function(){return{write:function(n,i,r,o,s,l){const d=[];d.push(n+"="+encodeURIComponent(i)),E.isNumber(r)&&d.push("expires="+new Date(r).toGMTString()),E.isString(o)&&d.push("path="+o),E.isString(s)&&d.push("domain="+s),l===!0&&d.push("secure"),document.cookie=d.join("; ")},read:function(n){const i=document.cookie.match(new RegExp("(^|;\\s*)("+n+")=([^;]*)"));return i?decodeURIComponent(i[3]):null},remove:function(n){this.write(n,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}();function Gl(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function Zl(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}function Jo(e,t){return e&&!Gl(t)?Zl(e,t):t}const Ql=Ve.isStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");let i;function r(o){let s=o;return t&&(n.setAttribute("href",s),s=n.href),n.setAttribute("href",s),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:n.pathname.charAt(0)==="/"?n.pathname:"/"+n.pathname}}return i=r(window.location.href),function(s){const l=E.isString(s)?r(s):s;return l.protocol===i.protocol&&l.host===i.host}}():function(){return function(){return!0}}();function ec(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}function tc(e,t){e=e||10;const n=new Array(e),i=new Array(e);let r=0,o=0,s;return t=t!==void 0?t:1e3,function(d){const f=Date.now(),p=i[o];s||(s=f),n[r]=d,i[r]=f;let w=o,m=0;for(;w!==r;)m+=n[w++],w=w%e;if(r=(r+1)%e,r===o&&(o=(o+1)%e),f-s<t)return;const v=p&&f-p;return v?Math.round(m*1e3/v):void 0}}function ho(e,t){let n=0;const i=tc(50,250);return r=>{const o=r.loaded,s=r.lengthComputable?r.total:void 0,l=o-n,d=i(l),f=o<=s;n=o;const p={loaded:o,total:s,progress:s?o/s:void 0,bytes:l,rate:d||void 0,estimated:d&&s&&f?(s-o)/d:void 0,event:r};p[t?"download":"upload"]=!0,e(p)}}const nc=typeof XMLHttpRequest<"u",ic=nc&&function(e){return new Promise(function(n,i){let r=e.data;const o=tt.from(e.headers).normalize(),s=e.responseType;let l;function d(){e.cancelToken&&e.cancelToken.unsubscribe(l),e.signal&&e.signal.removeEventListener("abort",l)}E.isFormData(r)&&(Ve.isStandardBrowserEnv||Ve.isStandardBrowserWebWorkerEnv?o.setContentType(!1):o.setContentType("multipart/form-data;",!1));let f=new XMLHttpRequest;if(e.auth){const v=e.auth.username||"",b=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(v+":"+b))}const p=Jo(e.baseURL,e.url);f.open(e.method.toUpperCase(),Vo(p,e.params,e.paramsSerializer),!0),f.timeout=e.timeout;function w(){if(!f)return;const v=tt.from("getAllResponseHeaders"in f&&f.getAllResponseHeaders()),T={data:!s||s==="text"||s==="json"?f.responseText:f.response,status:f.status,statusText:f.statusText,headers:v,config:e,request:f};Kl(function(A){n(A),d()},function(A){i(A),d()},T),f=null}if("onloadend"in f?f.onloadend=w:f.onreadystatechange=function(){!f||f.readyState!==4||f.status===0&&!(f.responseURL&&f.responseURL.indexOf("file:")===0)||setTimeout(w)},f.onabort=function(){f&&(i(new K("Request aborted",K.ECONNABORTED,e,f)),f=null)},f.onerror=function(){i(new K("Network Error",K.ERR_NETWORK,e,f)),f=null},f.ontimeout=function(){let b=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const T=e.transitional||Yo;e.timeoutErrorMessage&&(b=e.timeoutErrorMessage),i(new K(b,T.clarifyTimeoutError?K.ETIMEDOUT:K.ECONNABORTED,e,f)),f=null},Ve.isStandardBrowserEnv){const v=(e.withCredentials||Ql(p))&&e.xsrfCookieName&&Jl.read(e.xsrfCookieName);v&&o.set(e.xsrfHeaderName,v)}r===void 0&&o.setContentType(null),"setRequestHeader"in f&&E.forEach(o.toJSON(),function(b,T){f.setRequestHeader(T,b)}),E.isUndefined(e.withCredentials)||(f.withCredentials=!!e.withCredentials),s&&s!=="json"&&(f.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&f.addEventListener("progress",ho(e.onDownloadProgress,!0)),typeof e.onUploadProgress=="function"&&f.upload&&f.upload.addEventListener("progress",ho(e.onUploadProgress)),(e.cancelToken||e.signal)&&(l=v=>{f&&(i(!v||v.type?new yn(null,e,f):v),f.abort(),f=null)},e.cancelToken&&e.cancelToken.subscribe(l),e.signal&&(e.signal.aborted?l():e.signal.addEventListener("abort",l)));const m=ec(p);if(m&&Ve.protocols.indexOf(m)===-1){i(new K("Unsupported protocol "+m+":",K.ERR_BAD_REQUEST,e));return}f.send(r||null)})},Yn={http:Tl,xhr:ic};E.forEach(Yn,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});const rc={getAdapter:e=>{e=E.isArray(e)?e:[e];const{length:t}=e;let n,i;for(let r=0;r<t&&(n=e[r],!(i=E.isString(n)?Yn[n.toLowerCase()]:n));r++);if(!i)throw i===!1?new K(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT"):new Error(E.hasOwnProp(Yn,n)?`Adapter '${n}' is not available in the build`:`Unknown adapter '${n}'`);if(!E.isFunction(i))throw new TypeError("adapter is not a function");return i},adapters:Yn};function ji(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new yn(null,e)}function po(e){return ji(e),e.headers=tt.from(e.headers),e.data=zi.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),rc.getAdapter(e.adapter||xr.adapter)(e).then(function(i){return ji(e),i.data=zi.call(e,e.transformResponse,i),i.headers=tt.from(i.headers),i},function(i){return Ko(i)||(ji(e),i&&i.response&&(i.response.data=zi.call(e,e.transformResponse,i.response),i.response.headers=tt.from(i.response.headers))),Promise.reject(i)})}const mo=e=>e instanceof tt?e.toJSON():e;function qt(e,t){t=t||{};const n={};function i(f,p,w){return E.isPlainObject(f)&&E.isPlainObject(p)?E.merge.call({caseless:w},f,p):E.isPlainObject(p)?E.merge({},p):E.isArray(p)?p.slice():p}function r(f,p,w){if(E.isUndefined(p)){if(!E.isUndefined(f))return i(void 0,f,w)}else return i(f,p,w)}function o(f,p){if(!E.isUndefined(p))return i(void 0,p)}function s(f,p){if(E.isUndefined(p)){if(!E.isUndefined(f))return i(void 0,f)}else return i(void 0,p)}function l(f,p,w){if(w in t)return i(f,p);if(w in e)return i(void 0,f)}const d={url:o,method:o,data:o,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:l,headers:(f,p)=>r(mo(f),mo(p),!0)};return E.forEach(Object.keys(Object.assign({},e,t)),function(p){const w=d[p]||r,m=w(e[p],t[p],p);E.isUndefined(m)&&w!==l||(n[p]=m)}),n}const Go="1.4.0",Er={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{Er[e]=function(i){return typeof i===e||"a"+(t<1?"n ":" ")+e}});const go={};Er.transitional=function(t,n,i){function r(o,s){return"[Axios v"+Go+"] Transitional option '"+o+"'"+s+(i?". "+i:"")}return(o,s,l)=>{if(t===!1)throw new K(r(s," has been removed"+(n?" in "+n:"")),K.ERR_DEPRECATED);return n&&!go[s]&&(go[s]=!0,console.warn(r(s," has been deprecated since v"+n+" and will be removed in the near future"))),t?t(o,s,l):!0}};function oc(e,t,n){if(typeof e!="object")throw new K("options must be an object",K.ERR_BAD_OPTION_VALUE);const i=Object.keys(e);let r=i.length;for(;r-- >0;){const o=i[r],s=t[o];if(s){const l=e[o],d=l===void 0||s(l,o,e);if(d!==!0)throw new K("option "+o+" must be "+d,K.ERR_BAD_OPTION_VALUE);continue}if(n!==!0)throw new K("Unknown option "+o,K.ERR_BAD_OPTION)}}const Ki={assertOptions:oc,validators:Er},lt=Ki.validators;class Gn{constructor(t){this.defaults=t,this.interceptors={request:new uo,response:new uo}}request(t,n){typeof t=="string"?(n=n||{},n.url=t):n=t||{},n=qt(this.defaults,n);const{transitional:i,paramsSerializer:r,headers:o}=n;i!==void 0&&Ki.assertOptions(i,{silentJSONParsing:lt.transitional(lt.boolean),forcedJSONParsing:lt.transitional(lt.boolean),clarifyTimeoutError:lt.transitional(lt.boolean)},!1),r!=null&&(E.isFunction(r)?n.paramsSerializer={serialize:r}:Ki.assertOptions(r,{encode:lt.function,serialize:lt.function},!0)),n.method=(n.method||this.defaults.method||"get").toLowerCase();let s;s=o&&E.merge(o.common,o[n.method]),s&&E.forEach(["delete","get","head","post","put","patch","common"],b=>{delete o[b]}),n.headers=tt.concat(s,o);const l=[];let d=!0;this.interceptors.request.forEach(function(T){typeof T.runWhen=="function"&&T.runWhen(n)===!1||(d=d&&T.synchronous,l.unshift(T.fulfilled,T.rejected))});const f=[];this.interceptors.response.forEach(function(T){f.push(T.fulfilled,T.rejected)});let p,w=0,m;if(!d){const b=[po.bind(this),void 0];for(b.unshift.apply(b,l),b.push.apply(b,f),m=b.length,p=Promise.resolve(n);w<m;)p=p.then(b[w++],b[w++]);return p}m=l.length;let v=n;for(w=0;w<m;){const b=l[w++],T=l[w++];try{v=b(v)}catch(_){T.call(this,_);break}}try{p=po.call(this,v)}catch(b){return Promise.reject(b)}for(w=0,m=f.length;w<m;)p=p.then(f[w++],f[w++]);return p}getUri(t){t=qt(this.defaults,t);const n=Jo(t.baseURL,t.url);return Vo(n,t.params,t.paramsSerializer)}}E.forEach(["delete","get","head","options"],function(t){Gn.prototype[t]=function(n,i){return this.request(qt(i||{},{method:t,url:n,data:(i||{}).data}))}});E.forEach(["post","put","patch"],function(t){function n(i){return function(o,s,l){return this.request(qt(l||{},{method:t,headers:i?{"Content-Type":"multipart/form-data"}:{},url:o,data:s}))}}Gn.prototype[t]=n(),Gn.prototype[t+"Form"]=n(!0)});const Xn=Gn;class Cr{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let n;this.promise=new Promise(function(o){n=o});const i=this;this.promise.then(r=>{if(!i._listeners)return;let o=i._listeners.length;for(;o-- >0;)i._listeners[o](r);i._listeners=null}),this.promise.then=r=>{let o;const s=new Promise(l=>{i.subscribe(l),o=l}).then(r);return s.cancel=function(){i.unsubscribe(o)},s},t(function(o,s,l){i.reason||(i.reason=new yn(o,s,l),n(i.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const n=this._listeners.indexOf(t);n!==-1&&this._listeners.splice(n,1)}static source(){let t;return{token:new Cr(function(r){t=r}),cancel:t}}}const sc=Cr;function ac(e){return function(n){return e.apply(null,n)}}function lc(e){return E.isObject(e)&&e.isAxiosError===!0}const Ji={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Ji).forEach(([e,t])=>{Ji[t]=e});const cc=Ji;function Zo(e){const t=new Xn(e),n=Po(Xn.prototype.request,t);return E.extend(n,Xn.prototype,t,{allOwnKeys:!0}),E.extend(n,t,null,{allOwnKeys:!0}),n.create=function(r){return Zo(qt(e,r))},n}const ve=Zo(xr);ve.Axios=Xn;ve.CanceledError=yn;ve.CancelToken=sc;ve.isCancel=Ko;ve.VERSION=Go;ve.toFormData=li;ve.AxiosError=K;ve.Cancel=ve.CanceledError;ve.all=function(t){return Promise.all(t)};ve.spread=ac;ve.isAxiosError=lc;ve.mergeConfig=qt;ve.AxiosHeaders=tt;ve.formToJSON=e=>Xo(E.isHTMLForm(e)?new FormData(e):e);ve.HttpStatusCode=cc;ve.default=ve;const Zn=ve;class Ye{static extend(){const t={};let n=!1,i=0;const r=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(n=arguments[0],i++);const o=function(s){for(const l in s)Object.prototype.hasOwnProperty.call(s,l)&&(n&&Object.prototype.toString.call(s[l])==="[object Object]"?t[l]=Ye.extend(!0,t[l],s[l]):t[l]=s[l])};for(;i<r;i++){const s=arguments[i];o(s)}return t}}var Ot=function(e,t){var n=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(r,o){this.nodes=(o||document).querySelectorAll(r)},this.each=function(r){if(this.nodes)for(var o=0;o<this.nodes.length;o++)r.call(this.nodes[o],o);else this.node&&r.call(this.node,0);return this},this.encapsulate=function(){};var i=function(r,o){r&&(Array.isArray(r)?r.forEach(function(s){i(s,o)}):r instanceof Ot?o.append(r):typeof r=="object"&&o.append(new Ot(r)))};this.create=function(){var r=this.document.createElement(this.settings.tag);if(this.node=r,this.settings.encapsulate===!0){var o=this.settings.encapsulate===!0?"open":this.settings.encapsulate;r.attachShadow({mode:o})}this.nodes=[r],this.settings.content&&i(this.settings.content,this)},this._specialProps=function(r,o){if(r==="tooltip")return this.node.dataset[r]=o,!0},this.setProps=function(){for(var r in this.settings.props)if(r==="dataset")for(var o in this.settings.props[r])this.node.dataset[o]=this.settings.props[r][o];else if(r==="style")for(var s in this.settings.props[r])this.node.style[s]=this.settings.props[r][s];else{var l=this.settings.props[r];this._specialProps(r,l)||(this.node[r]=l)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(r,o){return typeof o=="number"&&this.__.cssNumber.indexOf(r)===-1&&(o=o+"px"),o},this.css=function(r,o){if(typeof r=="string")if(typeof o<"u"){var s=this._normalizeCSSValue(r,o);this.each(function(){this.style[r]=s})}else return this.document.defaultView.getComputedStyle(this.node)[r];if(typeof r=="object")for(var l in r)this.each(function(){this.style[l]=n._normalizeCSSValue(l,r[l])});return this},this.dataset=function(r,o){return typeof o>"u"?this._active()[r]:(this.each(function(){this.dataset[r]=o}),this)},this.attr=function(r,o){return typeof o>"u"?this._active()[r]:(this.each(function(){this.setAttribute(r,o)}),this)},this.val=function(r){return typeof r>"u"?this._active().value:(this.each(function(){this.value=r}),this)},this.prop=function(r,o){var s=this._active();return typeof o>"u"?s[r]:(s[r]!==o&&(s[r]=o,this.trigger("propChange",[r,o])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(r){var o=mw.element("#r"+new Date().getTime());return this.each(function(){for(var s=this.querySelectorAll(r),l=0;l<s.length;l++)o.nodes.indexOf(s[l])===-1&&o.nodes.push(s[l])}),o},this.addClass=function(r){return r=r.trim().split(" "),this.each(function(){var o=this;r.forEach(function(s){o.classList.add(s)})})},this.toggleClass=function(r){return this.each(function(){this.classList.toggle(r.trim())})},this.removeClass=function(r){var o=Array.isArray(r);if(o)return this.each(function(){for(var l=0,d=r.length;l<d;l++)this.classList.remove(r[l])});r=r.trim();var s=r.split(" ");return s.length>1?this.removeClass(s):this.each(function(){this.classList.remove(r)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(r){return typeof r>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=r})},this.text=function(r,o){if(typeof r>"u")return this.node.textContent;typeof o>"u"&&(o=!0),o&&(r=this.document.createRange().createContextualFragment(r).textContent),this.node.innerHTML=r},this._asdom=function(r){return typeof r=="string"?this.document.createRange().createContextualFragment(r):r.node?r.node:r.nodes?r.nodes[r.nodes.length-1]:r},this.offset=function(){var r=this._active(),o=this.getWindow(),s=r.getBoundingClientRect();return s.offsetTop=s.top+o.pageYOffset,s.offsetBottom=s.bottom+o.pageYOffset,s.offsetLeft=s.left+o.pageXOffset,s},this.width=function(r){return r?this.css("width",r):this._active().offsetWidth},this.height=function(r){return r?this.css("height",r):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(r){r=r||"*";var o=this._active(),s=o.parentElement,l=mw.element();for(l.nodes=[];s;)s.matches(r)&&l.nodes.push(s),s=s.parentElement;return l},this.append=function(r){return r&&this.each(function(){this.append(n._asdom(r))}),this},this.before=function(r){return r&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(n._asdom(r),this)}),this},this.after=function(r){r&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(n._asdom(r),this.nextSibling)})},this.prepend=function(r){return r&&this.each(function(){this.prepend(n._asdom(r))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(r){this._disabled=r,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(r,o){return o=o||{},this.each(function(){this.dispatchEvent(new CustomEvent(r,{detail:o,cancelable:!0,bubbles:!0})),n._on[r]&&n._on[r].forEach(function(s){s.call(this,r,o)})}),this},this.get=function(r){return this.nodes[r]},this.wrap=function(r){var o=Sr(r);this.before(o),o.append(this)},this._on={},this.on=function(r,o){return r=r.trim().split(" "),r.forEach(function(s){n._on[s]||(n._on[s]=[]),n._on[s].push(o),n.each(function(){this.addEventListener(s,o,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=t||document,this.root instanceof Ot&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,e=e||{},e.nodeName&&e.nodeType)this.nodes.push(e),this.node=e,e={},this._asElement=!0;else if(typeof e=="string")if(e.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(e)),e={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof Ot)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new Ot(this.settings.content));else{var r=this._asdom(e);this.nodes=[].slice.call(r.children),this._asElement=!0}e=e||{};var o={tag:"div",props:{}};this.settings=Ye.extend({},o,e),!this._asElement&&(this.create(),this.setProps())},this.init()};const Sr=function(e,t){return new Ot(e,t)};Sr.module=function(e,t){Ot.prototype[e]=t};const Gi="mw-le-element";window.customElements&&!customElements.get(Gi)&&customElements.define(Gi,class extends HTMLElement{constructor(){super()}});const z=(e,t)=>(e instanceof Object&&!e.nodeType&&(e=Ye.extend({},e||{},{tag:e.tag||Gi})),Sr(e,t));let cn;const zn=document.documentElement;zn.matches?cn="matches":zn.matchesSelector?cn="matchesSelector":zn.mozMatchesSelector?cn="mozMatchesSelector":zn.webkitMatchesSelector&&(cn="webkitMatchesSelector");class he{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(t,n){return t[cn](n)}static isBlockLevel(t){if(!t||t.nodeType===3)return!1;var n=t.nodeName;if(typeof this._isBlockCache[n]<"u")return this._isBlockCache[n];var i=document.createElement(n);return this.fragment().appendChild(i),this._isBlockCache[n]=getComputedStyle(i).display==="block",this.fragment().removeChild(i),this._isBlockCache[n]}static firstBlockLevel(t){for(;t&&t.classList;){if(this.isBlockLevel(t))return t;t=t.parentNode}}static firstWithBackgroundImage(t){if(!t)return null;for(;t&&t.nodeName!=="BODY";){if(t.style.backgroundImage)return t;t=t.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(t,n){for(;t&&t.nodeName!=="BODY";){let i=0,r=n.length;for(;i<r;i++)if(t.classList.contains(n[i]))return!0;t=t.parentElement}return!1}static hasParentsWithClass(t,n){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.classList.contains(n))return!0;i=i.parentNode}return!1}}static hasParentWithId(t,n){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.id===n)return!0;i=i.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(t,n){for(;t&&t.nodeName!=="BODY";){let i=0,r=n.length;for(;i<r;i++)if(t.classList.contains(n[i]))return t;t=t.parentElement}return null}static firstParentOrCurrentWithTag(t,n){if(!(!t||!n)){n=typeof n!="string"?n:[n];for(var i=t;i&&i.nodeName!=="BODY";){if(n.indexOf(i.nodeName.toLowerCase())!==-1)return i;i=i.parentNode}return!1}}static index(t,n,i){i=i||t.tagName.toLowerCase(),n=n||t.parentNode;var r;n.constructor===[].constructor?r=n:r=n.querySelectorAll(i);for(var o=0,s=r.length;o<s;o++)if(t===r[o])return o}static firstParentOrCurrentWithClass(t,n){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.classList.contains(n))return i;i=i.parentNode}return!1}static firstParentOrCurrent(t,n){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.matches(n))return i;i=i.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(t,n){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(!i)return!1;if(this.hasAnyOfClasses(i,n))return i;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(t,n){let i=t;for(;i&&i.nodeName!=="BODY";){const r=i.classList.contains(n[0]),o=i.classList.contains(n[1]);if(r&&o)return!1;if(r)return!0;if(o)return!1;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,n){let i=t;for(;i&&i.nodeName!=="BODY";){const r=i.classList.contains(n[0]),o=i.classList.contains(n[1]);if(r&&o)return!1;if(r)return!0;if(o)return!1;i=i.parentNode}return!0}static hasAnyOfClasses(t,n){if(!t)return;let i=0,r=n.length;for(;i<r;i++)if(t.classList.contains(n[i]))return!0;return!1}static offset(t){if(t){var n=t.getBoundingClientRect(),i={top:n.top,left:n.left,width:n.width,height:n.height,bottom:n.bottom,right:n.right};return i.top+=t.ownerDocument.defaultView.scrollY,i.bottom+=t.ownerDocument.defaultView.scrollY,i.left+=t.ownerDocument.defaultView.scrollX,i.right+=t.ownerDocument.defaultView.scrollX,i}}static parentsOrder(t,n){for(var i=[],r={},o=n.length,s=0,l=-1;s<o;s++)r[n[s]]=-1;if(!t)return r;for(var d=t.parentNode;d&&d.nodeName!=="BODY";){for(l++,s=0;s<o;s++)d.classList.contains(n[s])&&i.indexOf(n[s])===-1&&(r[n[s]]=l,i.push(n[s]));d=d.parentNode}return r}}Te(he,"_isBlockCache",{}),Te(he,"_fragment");class uc{constructor(t){this.settings=t,this.tools=he}isRow(t){return t.classList.contains(this.settings.rowClass)}isModule(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type!=="layouts"}isLayout(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts"}isInLayout(t){if(!t)return!1;for(t=t.parentNode;t&&t!==this.settings.document.body;){if(t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts")return!0;t=t.parentNode}}isElement(t){return t.classList.contains(this.settings.elementClass)}isEmptyElement(t){return t.classList.contains(this.settings.emptyElementClass)}isEdit(t){return t.classList.contains(this.settings.editClass)}isInEdit(t){var n=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t.parentNode,n)}isEditOrInEdit(t){return this.isEdit(t)||this.isInEdit(t)}isPlainText(t){return t.classList.contains(this.settings.plainElementClass)}getType(t){if(this.isEdit(t))return"edit";if(this.isElement(t))return"element";if(this.isModule(t))return"module";if(this.isLayout(t))return"layout"}}class Qo extends uc{constructor(t){super(t),this.settings=t,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM","DD"],this.init()}isConfigurable(t){return this.isElement(t)||this.isModule(t)||this.isRow(t)}isEditableLayout(t){return this.this.isLayout(t)&&this.isInEdit(t)}canMoveModule(t){return this.isModule(t)&&this.isInEdit(t)}canAcceptByClass(t){return this.tools.hasAnyOfClasses(t,this.dropableElements())}canAcceptByTag(t){return!t||t.nodeType!==1?!1:this._tagsCanAccept.indexOf(t.nodeName)!==-1}allowDrop(t){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(t){return this.canAccept(t.parentNode)}canAccept(t){return!!(this.canAcceptByClass(t)&&this.isEditOrInEdit(t)&&this.allowDrop(t))}canReceiveElements(t){return this.isEdit(t)&&this.canAcceptByTag(t)}dropableElements(){return this._dropableElements}getIteractionTarget(t){return this.tools.firstWithAyOfClassesOnNodeOrParent(t,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(t,n){const i=this.getIteractionTarget(t);if(!i||!this.isEditOrInEdit(t)||!this.allowDrop(t))return null;const r={target:i,canInsert:!1,beforeAfter:!1};var o=this.settings.strictLayouts&&this.isLayout(n),s=this.settings.strict&&!this.isLayout(n)&&!this.isInLayout(i);if(s)return null;if(this.isEdit(i))r.canInsert=!o;else if(this.isElement(i)&&!o)this.canAcceptByTag(i)&&(r.canInsert=!o),r.beforeAfter=!0;else if(this.isModule(i)&&!o)if(this.canInsertBeforeOrAfter(i))r.beforeAfter=!0;else return null;else if(this.isLayout(i))if(this.canInsertBeforeOrAfter(i))r.beforeAfter=!0;else return null;return r}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let dc=-1;const fc=(e,t)=>{if(!e||!t)return!1;const n=t.target;if(!n||n.nodeType!==1)return!1;e.pageX;const i=e.pageY,r=he.offset(n),o={},s=15;if(dc===i||!t||!t.canInsert&&!t.beforeAfter)return!1;if(t.canInsert&&t.beforeAfter)if(i>=r.top-s&&i<=r.top+s)o.position="top",o.action="before";else if(i>=r.top+s&&i<=r.top+r.height/2)o.position="top",o.action="prepend";else if(i>=r.top+r.height/2&&i<=r.bottom-s)o.position="bottom",o.action="append";else if(i>=r.top+r.height/2&&i>=r.bottom-s)o.position="bottom",o.action="after";else return!1;else if(t.beforeAfter)if(i>=r.top-s&&i<=r.top+r.height/2)o.position="top",o.action="before";else if(i>=r.top+r.height/2&&i<=r.bottom+s)o.position="bottom",o.action="after";else return!1;else if(t.canInsert)if(i>=r.top-s&&i<=r.top+r.height/2)o.position="top",o.action="prepend";else if(i>=r.top+r.height/2&&i<=r.bottom+s)o.position="bottom",o.action="append";else return!1;return o},hc=function(e,t){var n={handle:null,element:null,document,helper:!0},i=this,r={};this.on=function(s,l){r[s]?r[s].push(l):r[s]=[l]},this.dispatch=function(s,l){r[s]&&r[s].forEach(function(d){d.call(this,l)})};var o=function(s){i.settings.document.body.style.scrollBehavior="smooth",i.settings.document.defaultView.scrollTo(0,i.settings.document.defaultView.scrollY+s),i.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=Ye.extend({},n,e),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(s){this.element=z(s).get(0),this.settings.handle||(this.settings.handle=this.settings.element),this.handle=this.settings.handle,this.handle.attr("draggable","true")},this.setTargets=function(s){this.targets=z(s)},this.addTarget=function(s){this.targets.push(s)},this.init=function(){this.config(),this.draggable()},this.$data={},this.helper=function(s,l){if(this._helper||(this._helper=z().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),s==="create"){var d=z(i.element).offset();this.$data._calcMinus={y:l.pageY-d.offsetTop,x:l.pageX-d.offsetLeft},this._helper.style.top=s.pageY+"px",this._helper.style.left=s.pageX+"px",this._helper.style.width=i.element.offsetWidth+"px",this._helper.style.height=i.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"}else s==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&s&&(this._helper.style.top=s.pageY-this.$data._calcMinus.y+"px",this._helper.style.left=s.pageX-this.$data._calcMinus.x+"px",this.settings.document.documentElement.classList.add("le-dragging"));return this._helper.innerHTML=i.element.outerHTML,this._helper},this.isDragging=!1,this.dropableService=new Qo(t),this.dropPosition=fc,this.draggable=function(){z(this.settings.target).on("dragleave",function(s){i.dropIndicator&&i.dropIndicator.hide()}),z(this.settings.target).on("dragover",function(s){if(i.target=null,i.action=null,s.target!==i.element||!i.element.contains(s.target)){var l=i.dropableService.getTarget(s.target,i.element);if(l&&l!==i.element){const d=i.dropPosition(s,l);d?(i.target=l.target,i.action=d.action,i.dropIndicator&&i.dropIndicator.position(i.target,d.action+"-"+d.position)):i.dropIndicator&&i.dropIndicator.hide()}else i.dropIndicator&&i.dropIndicator.hide();i.isDragging&&(i.dispatch("dragOver",{element:i.element,event:s}),s.preventDefault())}}).on("drop",function(s){i.isDragging&&(s.preventDefault(),i.target&&i.action&&z(i.target)[i.action](i.element),i.dropIndicator&&i.dropIndicator.hide(),i.dispatch("drop",{element:i.element,event:s})),i.dropIndicator&&i.dropIndicator.hide()}),this.handle.on("dragstart",function(s){i.isDragging=!0,i.element.id||(i.element.id="mw-element-"+new Date().getTime()),i.element.classList.add("mw-element-is-dragged"),s.dataTransfer.setData("text",i.element.id),s.dataTransfer.effectAllowed="move",i.helper("create",s),i.dispatch("dragStart",{element:i.element,event:s})}).on("drag",function(s){var l=90,d=5;s.clientY<l&&o(-d),s.clientY>innerHeight-(l+(this._helper?this._helper.offsetHeight+10:0))&&o(d),s.dataTransfer.dropEffect="copy",i.dispatch("drag",{element:i.element,event:s}),i.helper(s)}).on("dragend",function(s){i.isDragging=!1,i.element.classList.remove("mw-element-is-dragged"),i.helper("remove"),i.dispatch("dragEnd",{element:i.element,event:s})})},this.init()};var ut,zt,jt;class es{constructor(t={}){Te(this,"x",0);Te(this,"y",0);Te(this,"w",0);Te(this,"h",0);Te(this,"listeners",{});Le(this,ut,{});Te(this,"activeHandle",null);Te(this,"handles",{});Le(this,zt,!1);Le(this,jt,!0);const n={element:null,document,maxHeight:null,maxWidth:null};this.settings=Object.assign({},n,t),this.element=this.settings.element,this.document=this.settings.document,this.element.classList.add("mw-le-resizable")}on(t,n){F(this,ut)[t]?F(this,ut)[t].push(n):F(this,ut)[t]=[n]}dispatch(t,n){F(this,ut)[t]&&F(this,ut)[t].forEach(i=>{i.call(this,n)})}mouseMoveHandler(t){const n=t.clientX-this.x,i=t.clientY-this.y;let r=this.h+i,o;this.activeHandle===this.handles.left?o=this.w-n:o=this.w+n,this.settings.maxWidth&&(o=Math.min(o,this.settings.maxWidth)),this.settings.maxHeight&&(r=Math.min(r,this.settings.maxHeight)),this.element.style.width=`${o}px`,this.element.style.height=`${r}px`,t.preventDefault(),this.dispatch("resize",{height:this.element.offsetHeight,width:this.element.offsetWidth})}mouseUpHandler(){for(const t in this.listeners)this.document.removeEventListener(t,this.listeners[t]);this.listeners={},this.activeHandle=null,this.dispatch("resizeStop")}mouseDownHandler(t){this.x=t.clientX,this.y=t.clientY;const n=this.document.defaultView.getComputedStyle(this.element);this.w=parseInt(n.width,10),this.h=parseInt(n.height,10),this.listeners.mousemove=i=>this.mouseMoveHandler(i),this.listeners.mouseup=i=>this.mouseUpHandler(i);for(const i in this.listeners)this.document.addEventListener(i,this.listeners[i]);this.dispatch("resizeStart")}disable(){Bt(this,zt,!0),Bt(this,jt,!1),this.element.classList.add("mw-le-resizable-disabled")}enable(){Bt(this,zt,!1),Bt(this,jt,!0),this.element.classList.remove("mw-le-resizable-disabled")}disabled(){return F(this,zt)}enabled(){return F(this,jt)}build(){const t=this.document.createElement("span"),n=this.document.createElement("span"),i=this.document.createElement("span"),r=this.document.createElement("span");this.handles.top=t,this.handles.right=n,this.handles.bottom=i,this.handles.left=r,t.className="mw-le-resizer mw-le-resizer-t",n.className="mw-le-resizer mw-le-resizer-r",r.className="mw-le-resizer mw-le-resizer-l",i.className="mw-le-resizer mw-le-resizer-b",this.element.appendChild(t),this.element.appendChild(n),this.element.appendChild(i),this.element.appendChild(r)}mount(){if(!this.element)return this;if(this.element.dataset.resizable)return this;this.element.dataset.resizable=!0,this.build();const t=this.element.querySelectorAll(".mw-le-resizer");return Array.from(t).forEach(n=>{n.addEventListener("mousedown",i=>{this.mouseDownHandler(i),this.activeHandle=n})}),this.dispatch("ready",{height:this.element.offsetHeight,width:this.element.offsetWidth}),this}}ut=new WeakMap,zt=new WeakMap,jt=new WeakMap;globalThis.Resizable=es;const jn=function(e){var t={automaticMaxWidth:!0,setDraggableTarget:function(m){return!0}},n=this;this.settings=Ye.extend({},t,e);const i={};this.on=(m,v)=>{i[m]?i[m].push(v):i[m]=[v]},this.dispatch=(m,v)=>{i[m]&&i[m].forEach(b=>{b.call(this,v)})};var r=!0,o=null;this.getTarget=function(){return o},this.isVisible=function(){return r},this.show=function(){r=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){r=!1,this.wrapper.addClass("mw-handle-item-hidden"),this.wrapper.removeClass("mw-handle-active")};let s=null;this.setContent=function(m){s&&s.remove(),s=m,this.wrapper.append(s)},this.getContent=function(){return s},this.initDraggable=function(){this.draggable=new hc({handle:this.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},e),this.draggable.on("dragStart",function(){n.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){n.wrapper.removeClass("mw-handle-item-dragging"),n.position(n.getTarget())})};const l=()=>{if(this.settings.document.defaultView.pageYOffset!==void 0)return{x:this.settings.document.defaultView.pageXOffset,y:this.settings.document.defaultView.pageYOffset};{let m,v,b=this.settings.document,T=b.documentElement,_=b.body;return m=T.scrollLeft||_.scrollLeft||0,v=T.scrollTop||_.scrollTop||0,{x:m,y:v}}};this.position=function(m){if(!m)return;const v=he.offset(m),b=l(),T=this.wrapper.get(0).querySelector(".mw-le-handle-menu-buttons");if(!T)return;let _;b.y>v.top-70&&(_=b.y-(v.top-70),_>v.height&&(_=v.height+10)),T.style.transition="none",v.top<50?T.style.top="calc(100% + 60px)":T.style.top="",setTimeout(()=>T.style.transition="",10),this.wrapper.css({top:v.top,left:v.left,width:v.width,height:v.height})};var d;this.setDraggable=function(m){if(typeof value=="boolean")return d=value,this;typeof this.settings.setDraggableTarget=="function"&&(d=this.settings.setDraggableTarget(m)),this.wrapper.get(0).dataset.draggable=d},this.getDraggable=function(){return d},this.set=function(m,v){if(!m){o=null,this.setDraggable(!1);return}return this.position(m),this.setDraggable(m),this.show(),this.draggable.setElement(m),(o!==m||v)&&(o=m,this.dispatch("targetChange",m)),setTimeout(()=>this.wrapper.addClass("mw-handle-active"),1),this},this.createHandle=function(){if(this.settings.handle==="self"){var m=z({tag:"div",props:{className:"mw-handle-item-draggable-self"}});this.wrapper.append(m),this.settings.document.addEventListener("mousedown",function(){m.addClass("active")}),this.settings.document.addEventListener("mouseup",function(){m.removeClass("active")}),this.settings.handle=m,this.handle=m,this.wrapper.append(m);return}this.settings.handle?(typeof this.settings.handle=="string"&&(this.settings.handle=z(this.handle)),this.handle=this.settings.handle):(this.handle=z({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))};var f=this.settings.document.defaultView.innerWidth,p=this.settings.document.defaultView.innerHeight;this.resizableMaxWidth=function(m){if(typeof m>"u")return f;f=m},this.resizableMaxHeight=function(m){if(typeof m>"u")return p;p=m},this.findClosestElementByClass=function(m,v=200){let b=[],T=m,_=0;for(;T!==document;){const A=T.parentNode.querySelectorAll(".element,.module");if(A.length>0&&(b=[...A].filter(j=>Math.abs(m.getBoundingClientRect().top-j.getBoundingClientRect().top)<=v),b.length>0)||(T=T.parentNode,_++,_>v/10))break}return b};function w(m,v,b,T){var _=Math.min(b/m,T/v);return{width:m*_,height:v*_}}this.resizable=function(){this.settings.resizable&&(this.resizer=new es({element:this.wrapper.get(0),document:this.settings.document}),this.resizer.mount(),this.resizer.on("resize",m=>{const v=this.getTarget();this.settings.automaticMaxWidth&&(v.style.maxWidth="100%"),v.nodeName==="IMG"?(m=w(v.offsetWidth,v.offsetHeight,m.width,m.height),v.style.height=m.height+"px",v.style.width=m.width+"px"):(v.style.minHeight=m.height+"px",v.style.width=m.width+"px"),this.set(v)}))},this.createWrapper=function(){this.wrapper=z({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),z(document.body).on("mouseup touchend",function(){n.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide(),this.resizable(),this.settings.document.addEventListener("orientationChange",m=>this.position(this.getTarget())),this.settings.document.defaultView.addEventListener("resize",m=>this.position(this.getTarget())),this.settings.document.addEventListener("scroll",m=>this.position(this.getTarget()))},pc=function(e){e=e||{},this.tools=he;var t=this,n={exceptions:["mw-handle-item"]};this.settings=Ye.extend({},n,e),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var i=20,r=function(l){return l%5>=2.5?l/5*5+5:l/5*5},o=function(l,d){l=r(l),d=r(d);for(var f=[],p=l-i,w=l+i,m=d-i,v=d+i;p<w;p+=5)for(;m<=v;m+=5)f.push([p,m]);return f},s=function(l,d){l&&l.parentElement&&d.indexOf(l)===-1&&t.body!==l&&d.push(l)};this.fromEvent=function(l){let d,f;return l.pageX?(d=l.pageX,f=l.pageY):l.targetTouches&&l.targetTouches[0]?(d=l.targetTouches[0].pageX,f=l.targetTouches[0].pageY):l.touches&&l.touches[0]&&(d=l.touches[0].pageX,f=l.touches[0].pageY),t.tools.hasAnyOfClassesOnNodeOrParent(l.target,this.settings.exceptions)?[]:this.fromPoint(d,f)},this.fromPoint=function(l,d){var f=[];if(t.document.defaultView.frameElement&&(d-=t.document.defaultView.scrollY),isNaN(l)||isNaN(d))return f;var p=t.document.elementFromPoint(l,d);if(!p)return[];s(p,f);var w=o(l,d);return w.forEach(function(m){s(t.document.elementFromPoint(m[0],m[1]),f)}),f}},mc=function(e){return he.matches(e,'.row,[class*="row-"]')},gc=function(e){return he.matches(e,'.col,[class*="col-"]')};let ct;const vo=function(){return ct||(ct=document.createElement("div"),ct.style.visibility="hidden",ct.style.position="absolute",ct.style.width="1px",ct.style.height="1px",document.body.appendChild(ct)),ct},qn={},vc=function(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof qn[t]<"u")return qn[t];var n=document.createElement(t);return vo().appendChild(n),qn[t]=getComputedStyle(n).display==="block",vo().removeChild(n),qn[t]},wc=(e,t,n)=>{e=e||"*";for(var i=t.querySelectorAll(e),r=0,o=[];r<i.length;r++)mw.tools.parentsOrCurrentOrderMatchOrOnlyFirst(i[r],["edit","module"])&&!gc(i[r])&&!mc(i[r])&&!n.elementAnalyzer.isEdit(i[r])&&vc(i[r])&&o.push(i[r]);return o},bc=e=>{const{backgroundImageHolder:t,editClass:n,moduleClass:i,elementClass:r,allowDrop:o}=e.settings,s=e.root;for(var l=s.querySelectorAll("."+n+"."+t+", ."+n+" ."+t+", ."+n+'[style*="background-image"], .'+n+' [style*="background-image"]'),d=s.querySelectorAll("."+i+e.settings.unEditableModules.join(",."+i)),f=s.querySelectorAll("."+n),p=0,w=0,m=0;p<l.length;p++){var v=l[p];e.elementAnalyzer.isInEdit(v)&&(mw.tools.hasClass(v,i),v.style.backgroundImage||(v.style.backgroundImage="none"))}for(;w<d.length;w++)d[p].classList.remove(i);for(;m<f.length;m++){for(var b=wc(":not(."+r+")",f[m],e),T=0,_=f[m].querySelectorAll("img,."+o),A=0;A<_.length;A++)e.elementAnalyzer.isInEdit(_[A])&&e.canBeElement(_[A])&&_[A].classList.add(r);for(;T<b.length;T++)b[T].classList.contains(i)||e.elementAnalyzer.isInEdit(b[T])&&e.canBeElement(b[T])&&b[T].classList.add(r)}},yc=function(e){this.handles=e,this.dragging=!1;var t=this;this.get=function(n){return this.handles[n]},this.set=function(n,i){this.get(n).set(i)},this.hide=function(n){n&&this.handles[n]?this.handles[n].hide():this.each(function(i,r){r.hide()})},this.hideAllBut=function(n){this.each(function(i,r){i!==n&&r.hide()})},this.show=function(n){n&&this.handles[n]?this.handles[n].show():this.each(function(i,r){r.show()})},this.each=function(n){if(n){var i;for(i in this.handles)n.call(t,i,this.handles[i])}},this.targetIsSelected=function(n,i){if(n){n=n.target||n;var r;for(r in this.handles){if(i&&i===this.handles[r])continue;const o=this.handles[r].getTarget();if(o&&o===n)return!0}return!1}},this.targetIsSelectedAndHandleIsNotHidden=function(n,i){if(n){n=n.target||n;var r;for(r in this.handles){if(i&&i===this.handles[r])continue;const o=this.handles[r].getTarget();if(o&&o===n)return this.handles[r].isVisible()}return!1}},this.targetIsOrInsideHandle=function(n,i){if(n){n=n.target||n;var r;for(r in this.handles)if(!(i&&i===this.handles[r])&&(this.handles[r].wrapper.get(0)===n||this.handles[r].wrapper.get(0).contains(n)))return!0;return!1}},this.init=function(){this.each(function(n,i){i.draggable.on("dragStart",function(){t.dragging=!0,t.hideAllBut(n)}),i.draggable.on("dragEnd",function(){t.dragging=!1,i.show()})})},this.init()},_c=function(e){e=e||{};const t={template:"default"};let n={};this.settings=Ye.extend({},t,e),this._indicator=null;const i={};this.on=function(d,f){i[d]?i[d].push(f):i[d]=[f]},this.dispatch=function(d,f){i[d]&&i[d].forEach(function(p){p.call(this,f)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,n={})},this.show=function(){this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const r=["before-top","prepend-top","after-bottom","append-bottom"],o="mw-drop-indicator-position-",s=r.map(function(d){return o+d});let l=null;this.position=function(d,f){if(!(!d||!f)&&!(n.target===d&&n.position===f)){n.target=d,n.position=f,l!==f&&(this._indicator.removeClass(s),l=f,this._indicator.addClass(o+f));var p=he.offset(d);this._indicator.css({height:p.height,left:p.left,top:p.top,width:p.width}),this.show()}},this.make=function(){this._indicator=z(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},xc=(e,t,n)=>{!e||!t||(e=e.isMWElement?e.get(0):e,e.dataset.tooltip=t,e.title=t,e.dataset.tooltipposition=n||"top-center")},di=function(e){this.options=e||{};var t=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=z({props:{className:"mw-le-handle-menu",id:t.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=z({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var n,i,r,o=function(){n=z({props:{className:"mw-le-handle-menu-title"}}),i=z({props:{className:"mw-le-handle-menu-title-text"}}),r=z({props:{className:"mw-le-handle-menu-title-icon"}}),n.append(i),n.append(r),t.root.prepend(n),t.title=n},s=null;this.getTarget=function(){return s},this.setTarget=function(l){s=l;var d=0;for(this.rebuildButtons();d<this.buttons.length;d++){const f=this.buttons[d].config,p=this.buttons[d].button;f&&f.onTarget&&f.onTarget(l,p.get(0),t.options.rootScope)}},this.setTitle=function(l,d){i.html(l||""),r.html(d||"")},this.buttons=[],this.prepareMenu=function(){this.buttons=[]},this.getMenu=function(l){for(let d=0;d<this.options.menus.length;d++)if(this.options.menus[d].name===l)return this.options.menus[d].name},this.setMenu=function(l,d){let f=!1;for(let p=0;p<this.options.menus.length;p++)this.options.menus[p].name===l&&(this.options.menus[p].nodes=d,f=!0);f||this.options.menus.push({name:l,nodes:d}),this.rebuildButtons()},this.rebuildButtons=function(){this.buttonsHolder.empty(),this.buildButtons()},this.buildButtons=function(l,d){this.prepareMenu(),d=d||this.buttonsHolder,l=l||this.options.menus,l&&l.forEach(function(f){f.nodes?f.nodes.forEach(function(p){d.append(t.button(p))}):(f.title||f.icon)&&t.button(f)})},this.button=function(l){var d=z({props:{className:"mw-le-handle-menu-button"+(l.className?" "+l.className:"")}}),f={props:{className:"mw-le-handle-menu-button-content"}},p=z(f);if(l.title&&xc(p,l.title),l.icon){var w=z({props:{className:"mw-le-handle-menu-button-icon",innerHTML:l.icon}});p.append(w)}if(l.text){var m=z({props:{className:"mw-le-handle-menu-button-text",innerHTML:l.text}});p.append(m)}d.append(p),this.buttons.push({button:d,config:l});const v="mousedown touchstart";if(l.menu){var b=z({props:{className:"mw-le-handle-menu-button-sub-menu"}});d.append(b),t.buildButtons(l.menu,b),d.on(v,function(){this.classList.toggle("sub-menu-active")})}else typeof l.action=="function"&&d.on(v,function(){l.action(t.getTarget(),d.get(0))});return d},this.init=function(){this.create(),o(),this.setTitle(t.options.title,t.options.icon),this.buildButtons(),this.hide()},this.init()},Ec=(e,t)=>{const n=z({props:{className:"modal-footer"}}),i=z({props:{className:"mw-admin-action-links mw-adm-liveedit-tabs text-danger ms-2",innerHTML:e||"REMOVE"}}),r=z({props:{className:"mw-admin-action-links mw-adm-liveedit-tabs me-2",innerHTML:t||"CANCEL"}});return n.append(r),n.append(i),{ok:i,cancel:r,footer:n}};var dt,br,Cc;class ts{constructor(t){Le(this,br);Le(this,dt,{});t=t||{};const n={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},n,t),this.settings.id||(this.settings.id="mw-le-dialog-"+Date.now()),this.build(),setTimeout(i=>this.open())}on(t,n){F(this,dt)[t]?F(this,dt)[t].push(n):F(this,dt)[t]=[n]}dispatch(t,n){F(this,dt)[t]&&F(this,dt)[t].forEach(i=>{i.call(this,n)})}build(){const t=`


                <div class="modal-dialog modal-sm modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Please confirm</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body py-2 mb-2">

                        </div>
                    </div>
                </div>


        `;this.root=z({props:{className:"modal",tabIndex:-1}}),this.root.html(t);var n=this.root.find(".modal-body"),i=this.root.find(".modal-content");this.container=n,n.append(this.settings.content),this.settings.footer&&i.append(this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this._modal=new bootstrap.Modal(this.root.get(0),{}),this.open()}open(){this._modal.show()}show(){this._modal.show()}hide(){this._modal.hide()}close(){this._modal.hide()}toggle(){this._modal.toggle()}remove(){this._modal.hide(),this._modal.dispose()}overlay(){this.overlay=z({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}dt=new WeakMap,br=new WeakSet,Cc=function(t){(t.key==="Escape"||t.keyCode===27)&&this.remove()};const Or=function(e,t){const n=Ec(),i=new ts({content:e,footer:n.footer.get(0),title:mw.lang("Remove section")});return n.cancel.on("click",function(){i.remove()}),n.ok.on("click",function(){t&&t.call(),i.remove()}),i},Sc=function(e){this.root=z({props:{id:"mw-handle-item-element-root"}});const n=[{title:"Edit",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M181.674-179.761h41.13l441.087-441.565-41.13-41.13-441.087 441.565v41.13Zm613.043-484.326L665.761-793.043l36.978-37.218q19.631-19.63 47.859-19.75 28.228-.119 47.859 19.272l37.782 37.782q18.435 18.196 17.837 44.153-.598 25.956-18.315 43.674l-41.044 41.043Zm-41.76 41.761L247.761-117.13H118.804v-128.957l504.957-504.956 129.196 128.717Zm-109.392-19.565-20.804-20.565 41.13 41.13-20.326-20.565Z"/></svg>',className:"mw-handle-add-button",onTarget:function(o,s){},action:function(o){mw.app.editor.dispatch("editNodeRequest",o)}},{title:"Insert module",text:"",icon:'<svg style="stroke-width: 500;" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M445.935-195.935v-250h-250v-68.13h250v-250h68.13v250h250v68.13h-250v250h-68.13Z"/></svg>',className:"mw-handle-add-button",onTarget:function(o,s){},action:function(o){mw.app.editor.dispatch("insertModuleRequest",o)}},{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(o,s){},action:function(o){mw.app.editor.dispatch("elementSettingsRequest",o)}},...[{title:"Duplicate",text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg>',className:"mw-handle-clone-button",onTarget:function(o,s){s.style.display=o.classList.contains("cloneable")?"":"none"},action:function(o){z(o).after(o.outerHTML)}},{title:"Move backward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20 13.5C20 17.09 17.09 20 13.5 20H6V18H13.5C16 18 18 16 18 13.5S16 9 13.5 9H7.83L10.91 12.09L9.5 13.5L4 8L9.5 2.5L10.92 3.91L7.83 7H13.5C17.09 7 20 9.91 20 13.5Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(o,s){const l=o.classList.contains("cloneable"),d=o.previousElementSibling;s.style.display=l&&d?"":"none"},action:function(o){const s=o.previousElementSibling;s&&(s.before(o),e.elementHandle.set(o))}},{title:"Move forward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M10.5 18H18V20H10.5C6.91 20 4 17.09 4 13.5S6.91 7 10.5 7H16.17L13.08 3.91L14.5 2.5L20 8L14.5 13.5L13.09 12.09L16.17 9H10.5C8 9 6 11 6 13.5S8 18 10.5 18Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(o,s){const l=o.classList.contains("cloneable"),d=o.nextElementSibling;s.style.display=l&&d?"":"none"},action:function(o){const s=o.nextElementSibling;s&&(s.after(o),e.elementHandle.set(o))}}]],i=[{title:e.lang("Delete"),text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" ><path d="M0 0h24v24H0V0z" fill="none"></path><path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"></path></svg>',className:"mw-handle-insert-button",action:function(o){Or(z("<span>Are you sure you want to delete this element?</span>"),()=>{mw.app.registerChangedState(o),o.remove(),e.elementHandle.hide()})}}];this.menu=new di({id:"mw-handle-item-element-menu",title:"Element",menus:[{name:"primary",nodes:n},{name:"dynamic",nodes:[]},{name:"tail",nodes:i}]}),this.menu.show(),this.menusHolder=document.createElement("div"),this.menusHolder.className="mw-handle-item-menus-holder";var r=mw.element(this.menusHolder);r.append(this.menu.root),this.root.append(this.menusHolder)},Oc=function(e){var t=this;this.root=z({props:{id:"mw-handle-item-module-root",contentEditable:!1}}),this.tools=he;const n=[{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M181.674-179.761h41.13l441.087-441.565-41.13-41.13-441.087 441.565v41.13Zm613.043-484.326L665.761-793.043l36.978-37.218q19.631-19.63 47.859-19.75 28.228-.119 47.859 19.272l37.782 37.782q18.435 18.196 17.837 44.153-.598 25.956-18.315 43.674l-41.044 41.043Zm-41.76 41.761L247.761-117.13H118.804v-128.957l504.957-504.956 129.196 128.717Zm-109.392-19.565-20.804-20.565 41.13 41.13-20.326-20.565Z"/></svg>',action:()=>{const r=mw.app.get("liveEdit").handles.get("module").getTarget();mw.app.editor.dispatch("onModuleSettingsRequest",r);var o=r.dataset.type||r.getAttribute("type");o=o.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+o,r)},onTarget:function(r,o){r.classList.contains("no-settings")?o.style.display="none":o.style.display=""}},{title:"Insert module",text:"",icon:'<svg style="stroke-width: 500;" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M445.935-195.935v-250h-250v-68.13h250v-250h68.13v250h250v68.13h-250v250h-68.13Z"/></svg>',className:"mw-handle-add-button",onTarget:function(r,o){t.tools.parentsOrCurrentOrderMatchOrOnlyFirst(r.parentNode,["edit","module"])?o.style.display="":o.style.display="none"},action:function(r){mw.app.editor.dispatch("insertModuleRequest",r)}}],i=[{title:"Delete",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" ><path d="M0 0h24v24H0V0z" fill="none"></path><path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"></path></svg>',action:()=>{Or(z("<span>Are you sure you want to delete this module?</span>"),()=>{const r=mw.app.get("liveEdit").handles.get("module").getTarget();var o=r.dataset.type||r.getAttribute("type");o=o.trim(),mw.app.registerChangedState(r),r.remove(),mw.app.editor.dispatch("moduleRemoved",r),mw.app.editor.dispatch("modulet@"+o+"Removed",r),e.moduleHandle.hide()})},onTarget:(r,o)=>{this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(r.parentNode,["edit","module"])?o.style.display="":o.style.display="none"}}];this.menu=new di({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,menus:[{name:"primary",nodes:n},{name:"dynamic",nodes:[]},{name:"tail",nodes:i}]}),this.menu.show(),this.menusHolder=document.createElement("div"),this.menusHolder.className="mw-handle-item-menus-holder",this.menusHolder.append(this.menu.root.get(0)),this.root.append(this.menusHolder)},Ac=function(e){this.root=z({props:{id:"mw-handle-item-layout-root"}});const t={};this.on=(i,r)=>{t[i]?t[i].push(r):t[i]=[r]},this.dispatch=(i,r)=>{t[i]&&t[i].forEach(o=>{o.call(this,r)})};const n=[{title:e.lang("Settings"),text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M181.674-179.761h41.13l441.087-441.565-41.13-41.13-441.087 441.565v41.13Zm613.043-484.326L665.761-793.043l36.978-37.218q19.631-19.63 47.859-19.75 28.228-.119 47.859 19.272l37.782 37.782q18.435 18.196 17.837 44.153-.598 25.956-18.315 43.674l-41.044 41.043Zm-41.76 41.761L247.761-117.13H118.804v-128.957l504.957-504.956 129.196 128.717Zm-109.392-19.565-20.804-20.565 41.13 41.13-20.326-20.565Z"/></svg>',className:"mw-handle-insert-button",menu:[{title:e.lang("Add something"),text:e.lang("Add something"),icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" version="1.1" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button"},{title:e.lang("Settings1212"),text:"Do alert",className:"mw-handle-insert-button"}]},{title:e.lang("Clone"),text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"><path d="M178.087-70.717q-27.698 0-48.034-20.336t-20.336-48.034v-600.848h68.37v600.848h471.848v68.37H178.087Zm128.131-128.37q-27.599 0-47.865-20.266-20.266-20.266-20.266-47.865v-555.695q0-27.698 20.266-48.034t47.865-20.336h435.695q27.698 0 48.034 20.336t20.336 48.034v555.695q0 27.599-20.336 47.865-20.336 20.266-48.034 20.266H306.218Zm0-68.131h435.695v-555.695H306.218v555.695Zm0 0v-555.695 555.695Z"/></svg>',className:"mw-handle-insert-button",action:function(i,r,o){var s=document.createElement("div");s.innerHTML=i.outerHTML,z("[id]",s).each(function(){this.id="le-id-"+new Date().getTime()}),z(i).after(s.innerHTML);var l=i.nextElementSibling;mw.reload_module(l,function(){o.statemanager.record({target:mw.tools.firstParentWithClass(i,"edit"),value:parent.innerHTML})}),l.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})}},{title:e.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(i,r){i.nextElementSibling===null?r.style.display="none":r.style.display=""},action:function(i,r){var o=i.nextElementSibling;if(o){var s=i.getBoundingClientRect(),l=o.getBoundingClientRect(),d=0;s.top<l.top&&(d=-(s.top-l.top)),i.classList.add("mw-le-target-to-animate"),o.classList.add("mw-le-target-to-animate"),i.style.transform="translateY("+d+"px)",o.style.transform="translateY("+-d+"px)",setTimeout(function(){o.parentNode.insertBefore(i,o.nextSibling),i.classList.remove("mw-le-target-to-animate"),o.classList.remove("mw-le-target-to-animate"),i.style.transform="",o.style.transform="",i.scrollIntoView({behavior:"smooth",block:"start",inline:"start"}),e.layoutHandle.set(i,!0)},300)}}},{title:e.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(i,r,o){i.previousElementSibling===null?r.style.display="none":r.style.display=""},action:function(i,r){var o=i.previousElementSibling;if(o){var s=i.getBoundingClientRect(),l=o.getBoundingClientRect(),d=0;s.top>l.top&&(d=-(s.top-l.top)),i.classList.add("mw-le-target-to-animate"),o.classList.add("mw-le-target-to-animate"),i.style.transform="translateY("+d+"px)",o.style.transform="translateY("+-d+"px)",setTimeout(function(){o.parentNode.insertBefore(i,o),i.classList.remove("mw-le-target-to-animate"),o.classList.remove("mw-le-target-to-animate"),i.style.transform="",o.style.transform="",e.layoutHandle.set(i,!0),i.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})},300)}}},{title:e.lang("Delete"),text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" ><path d="M0 0h24v24H0V0z" fill="none"></path><path d="M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z"></path></svg>',className:"mw-handle-insert-button",action:function(i,r,o){Or("Are you sure you want to delete this layout?",function(){mw.app.registerChange(i),i.remove()})}}];this.addButtons=function(){var i="Add Layout",r=o=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+o.charAt(0).toUpperCase()+o.slice(1))};this.plusTop=z({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:e.lang(i)}}),this.plusBottom=z({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:e.lang(i)}}),this.plusTop.on("click",function(){r("top")}),this.plusBottom.on("click",function(){r("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.addButtons(),this.menusHolder=document.createElement("div"),this.menusHolder.className="mw-handle-item-menus-holder",this.menu=new di({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,menus:[{name:"primary",nodes:n}]}),this.menu.show(),this.menusHolder.append(this.menu.root),this.root.append(this.menusHolder)},wo={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},Tc=(e,t)=>((!t||!wo[t])&&(t="en"),wo[t][e]||e),Lc=function(e){this.root=z({props:{id:"mw-handle-interaction-item-element-root"}}),this.menu=new di({id:"mw-handle-item-element-menu",title:"Element",buttons:[]}),this.menu.show(),this.root.append(this.menu.root)};mw.pauseSave=!1;mw.askusertostay=!1;window.top===window&&(window.onbeforeunload=function(){if(mw.askusertostay)return mw.notification.warning(mw.lang("You have unsaved changes")),mw.lang("You have unsaved changes")});window.mwd=document;window.mww=window;window.mwhead=document.head||document.getElementsByTagName("head")[0];mw.doc=document;mw.win=window;mw.head=mwhead;mw.loaded=!1;mw._random=new Date().getTime();mw.random=function(){return mw._random++};mw.id=function(e){return e=e||"mw-",e+mw.random()};mw.onLive=function(e){typeof mw.settings.liveEdit=="boolean"&&mw.settings.liveEdit&&e.call(this)};mw.onAdmin=function(e){window.mwAdmin&&e.call(this)};mw.target={};mw.log=function(e){window.console&&mw.settings.debug&&top.console.log(e)};mw.$=function(e,t){if(typeof e=="object"||typeof e=="string"&&e.indexOf("<")!==-1)return jQuery(e);if(t=t||mwd,typeof document.querySelector<"u")if(typeof e=="string")try{return jQuery(t.querySelectorAll(e))}catch{return jQuery(e,t)}else return jQuery(e,t);else return jQuery(e,t)};mw.parent=function(){return window===top?window.mw:mw.tools.canAccessWindow(parent)&&parent.mw?parent.mw:window.mw};mw.top=function(){if(mw.__top)return mw.__top;var e=function(){for(var t=window,n=window;n&&mw.tools.canAccessWindow(n)&&(n.mw||n.parent.mw);)t=n,n=n.parent;return mw.__top=n.mw,t.mw};return window===top?(mw.__top=window.mw,window.mw):mw.tools.canAccessWindow(top)&&top.mw?(mw.__top=top.mw,top.mw):window.top!==window.parent?e():(mw.__top=window.mw,window.mw)};mw.require("stylesheet.editor.js");class Nc{constructor(t){Te(this,"_hoverAndSelectExceptions",t=>{if(t&&t.classList&&t.classList.contains("module-custom-fields")){var n=he.firstParentOrCurrentWithClass(t,"module-contact-form");n&&(t=n)}if(t&&t.parentNode&&t.parentNode.getAttribute("rel")==="module"&&typeof t.parentNode<"u")try{if(t=he.firstParentOrCurrentWithAnyOfClasses(t.parentNode,["element","module","cloneable","layout","edit"]),!t)return t}catch{}return t&&t.parentNode&&t.parentNode.classList.contains("module-layouts")&&(t=t.parentNode),t});Te(this,"canBeElement",function(t){var n=t,i=["mw-ui-col","mw-col-container","mw-ui-col-container","container"],r=["mw-le-spacer","background-image-holder","mw-layout-overlay-container","mw-le-resizer","mw-layout-overlay-container","mw-layout-overlay","mw-layout-overlay-background","mw-layout-overlay-background-image","mw-layout-overlay-wrapper"],o=mw.app.templateSettings.helperClasses.external_grids_col_classes,s=mw.app.templateSettings.helperClasses.external_css_no_element_classes,l=mw.app.templateSettings.helperClasses.external_css_no_element_controll_classes,d=mw.app.templateSettings.helperClasses.section_selectors,f=mw.app.templateSettings.helperClasses.fontIconFamilies;return i=i.concat(r),i=i.concat(o),i=i.concat(s),i=i.concat(l),i=i.concat(d),i=i.concat(f),!mw.tools.hasAnyOfClasses(n,i)});Te(this,"canBeEditable",function(t){return t.isContentEditable||mw.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t,["edit","module"])});const n=this,i={};this.on=(v,b)=>{i[v]?i[v].push(b):i[v]=[b]},this.dispatch=(v,b)=>{i[v]&&i[v].forEach(T=>{T.call(this,b)})},this.paused=!1,this.activeNode=!1;var r={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=Ye.extend({},r,t),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(v){return Tc(v,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new Qo(this.settings),this.dropIndicator=new _c(this.settings);const o=new Sc(this),s=new Oc(this),l=new Ac(this);this.elementHandleContent=o,this.moduleHandleContent=s,this.layoutHandleContent=l,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.layoutHandleContent.on("insertLayoutRequestOnTop",()=>{this.dispatch("insertLayoutRequestOnTop")}),this.layoutHandleContent.on("insertLayoutRequestOnBottom",()=>{this.dispatch("insertLayoutRequestOnBottom")}),this.dialog=function(v){v||(v={});var b={document:window.top.document,position:s.menu.getTarget(),mode:"absolute"};n.pause();const T=new ts(Ye.extend({},b,v));return T.on("close",function(){n.play()}),T};var d=this.elementHandle=new jn({...this.settings,dropIndicator:this.dropIndicator,content:o.root,handle:z(".mw-handle-drag-button",o.root.get(0)),handle:"self",document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});this.isResizing=!1,d.resizer.on("resizeStart",v=>{this.isResizing=!0,mw.app.registerChange(d.getTarget())}),d.resizer.on("resizeStop",v=>this.isResizing=!1),d.on("targetChange",function(v){o.menu.setTarget(v),v.className.includes("col-")?d.resizer.disable():d.resizer.enable()}),this.moduleHandle=new jn({...this.settings,dropIndicator:this.dropIndicator,content:s.root,handle:s.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!1,id:"mw-handle-item-module-menu",handle:"self",setDraggableTarget:function(v){return v.nodeType===1?he.parentsOrCurrentOrderMatchOrOnlyFirst(v.parentElement,["edit","module"]):!1}});var f=this.moduleHandle;this.getModuleQuickSettings=v=>new Promise(b=>{b(mw.quickSettings[v]),this.dispatch("moduleQuickSettings",{module:v})}),this.getLayoutQuickSettings=()=>new Promise(v=>{v(mw.layoutQuickSettings),this.dispatch("layoutQuickSettings",{module:type})}),f.on("targetChange",function(v){n.getModuleQuickSettings(v.dataset.type).then(function(b){console.log(b),mw.app.liveEdit.moduleHandleContent.menu.setMenu("dynamic",b),s.menu.setTarget(v),s.menu.show()})}),this.layoutHandle=new jn({...this.settings,dropIndicator:this.dropIndicator,content:l.root,handle:l.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var p=this.layoutHandle;p.wrapper.css({zIndex:1e3});var w=n.lang("Layout");l.menu.setTitle(w),p.on("targetChange",function(v){n.getLayoutQuickSettings(v.dataset.type).then(function(b){mw.app.liveEdit.layoutHandleContent.menu.setMenu("dynamic",b)}),l.menu.setTarget(v),l.menu.setTitle(w),n.elementAnalyzer.isEditOrInEdit(v)?(l.plusTop.show(),l.plusBottom.show()):(l.plusTop.hide(),l.plusBottom.hide())}),l.handle=p,s.handle=f,o.handle=d;const m=new Lc;this.interactionHandle=new jn({...this.settings,content:m.root,document:this.settings.document,resizable:!1,className:"mw-handle-item-interaction-handle"}),this.interactionHandle.menu=m.menu,this.handles=new yc({element:d,module:f,layout:p,interactionHandle:this.interactionHandle}),this.observe=new pc(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}getSelectedNode(){return this.activeNode}selectNode(o){if(this.handles.targetIsOrInsideHandle(o,this.handles.get("layout"))){this.handles.hide(),this.document.querySelectorAll("[contenteditable]").forEach(l=>l.contentEditable=!1);return}this.activeNode=o;const n=[];["IMG"].indexOf(o.nodeName)!==-1?n.push(o):n.push(he.firstBlockLevel(o));let r=n[0];var o=he.firstParentOrCurrentWithAnyOfClasses(n[0],["element","module","cloneable","layout","edit"]);if(r.nodeName!=="IMG"&&(r=he.firstBlockLevel(n[0])),r=o,this.document.querySelectorAll("[contenteditable]").forEach(l=>l.contentEditable=!1),this.document.querySelectorAll("[data-mw-live-edithover]").forEach(l=>delete l.dataset.mwLiveEdithover),this.handles.get("element").set(null),this.handles.get("module").set(null),this.handles.hide(),r){r=this._hoverAndSelectExceptions(r);const l=this.elementAnalyzer.getType(r);if(l!=="layout"){var s=he.firstParentOrCurrentWithClass(r,"module-layouts");s&&this.handles.set("layout",s)}l&&(l==="element"?(this.handles.hide("module"),this.handles.set(l,r)):l==="module"?(this.handles.hide("element"),this.handles.set(l,r)):l==="layout"?this.handles.set("layout",r):l==="edit"?this.handles.set("element",r):this.handles.hide()),this.activeNode=r}else{const l=he.firstParentOrCurrentWithAnyOfClasses(o,["module-layouts"]);l&&(this.handles.set("layout",l),this.activeNode=l)}}init(){this.settings.mode==="auto"&&setInterval(()=>bc(this),1e3);const t=o=>{var s=o.target?o.target:o;s&&s.className&&typeof s.className=="string"&&s.className.indexOf("layout-plus")!==-1||this.selectNode(s)};let n,i=[];n="mousedown touchstart",z(this.root).on("mousemove",o=>{if(this.paused||this.isResizing){this.interactionHandle.hide();return}if(this.handles.targetIsOrInsideHandle(o)){this.interactionHandle.hide();return}const s=this.observe.fromEvent(o);let l=he.firstParentOrCurrentWithAnyOfClasses(s[0],["element","module","cloneable","edit"]);const d=he.firstParentOrCurrentWithAnyOfClasses(o.target,["module-layouts"]);if(l=this._hoverAndSelectExceptions(l),l&&i.indexOf(l)===-1&&(i.forEach(p=>delete p.dataset.mwLiveEdithover),i=[],this.handles.targetIsSelected(l,this.interactionHandle)||(l.dataset.mwLiveEdithover=!0,i.push(l))),d){const p=this.handles.get("element").getTarget(),w=this.handles.get("module").getTarget();d.contains(p),d.contains(w),this.handles.set("layout",d)}if(l&&!this.handles.targetIsSelectedAndHandleIsNotHidden(l,this.interactionHandle)&&!l.classList.contains("module-layouts")){var f="";l.dataset.mwTitle?f=l.dataset.mwTitle:l.dataset.type?f=l.dataset.type:l.nodeName==="P"?f=this.lang("Paragraph"):/(H[1-6])/.test(l.nodeName)?f=this.lang("Title")+" "+l.nodeName.replace(/^\D+/g,""):l.nodeName==="IMG"||l.nodeName==="IMAGE"?f=this.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(l.nodeName)?f=this.lang("Title "+l.nodeName.replace("H","")):["DIV","MAIN","SECTION"].includes(l.nodeName)?f=this.lang("Block"):f=this.lang("Text"),this.interactionHandle.menu.setTitle(f),this.interactionHandle.show(),this.interactionHandle.set(l)}else this.interactionHandle.hide()});let r;z(this.root).on("dblclick",o=>{const s=mw.app.liveEdit.elementHandle.getTarget();s&&s.contains(r)&&mw.app.editor.dispatch("editNodeRequest",s),!s&&o.target.classList.contains("edit")&&o.target.style.backgroundImage&&mw.app.editor.dispatch("editNodeRequest",o.target)}),z(this.root).on(n,o=>{if(r=o.target,!this.paused)t(o);else{var s=this.elementHandle.getTarget();s&&!s.contains(o.target)&&this.play()}})}}globalThis.LiveEdit=Nc;const pf=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:none}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:999;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:none}.mw-handle-item.mw-le-resizable{position:absolute}.mw-handle-item.mw-handle-item-interaction-handle{pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden;pointer-events:none;display:none!important}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;pointer-events:none}.mw-draggable-helper .mw-element-is-dragged{opacity:1;pointer-events:none}#mw-handle-item-layout-root .mw-handle-item-menus-holder{top:10px;right:10px;left:auto;position:absolute}.mw-handle-item .mw-handle-item-menus-holder{height:42px;padding:0 12px;display:inline-flex;border-radius:7px;border:1px solid transparent;position:relative;top:-60px;left:-3px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;background-color:#fff}.mw-le-handle-menu{position:relative;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;display:inline-flex;align-items:center;pointer-events:all;position:static;transition:.2s;opacity:0;transform:translateY(10px);z-index:2}.mw-le-handle-menu .mw-le-handle-menu-buttons:empty{display:none!important}.mw-le-handle-menu *{vertical-align:middle}.mw-handle-item.mw-handle-active .mw-le-handle-menu .mw-le-handle-menu-buttons{opacity:1;transform:translateY(0)}#mw-handle-item-layout-menu{top:0;right:5px;left:auto}#mw-handle-item-layout-menu .mw-le-handle-menu-buttons{left:auto;right:5px;top:5px}#mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-drag-button{cursor:grab}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:none;align-items:center;justify-content:center;padding:0 5px;height:20px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:grab;background-color:#0078ff;color:#fff}.mw-handle-item-interaction-handle .mw-le-handle-menu-title{display:inline-flex;position:absolute;top:-22px;left:-3px}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#0078ff;color:#fff;border-radius:7px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#016ce6}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}[data-mw-live-edithover=true]>*{pointer-events:none}[data-mw-live-edithover=true]>* .module,[data-mw-live-edithover=true]>* .element,[data-mw-live-edithover=true]>* .cloneable,[data-mw-live-edithover=true]>* .edit{pointer-events:all}[data-mw-live-edithover=true]>*.module,[data-mw-live-edithover=true]>*.element,[data-mw-live-edithover=true]>*.cloneable,[data-mw-live-edithover=true]>*.edit{pointer-events:all}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}html.le-dragging iframe{pointer-events:none!important}.mw-handle-item-draggable-self{position:absolute;pointer-events:all;inset:0;z-index:10;display:none;cursor:default}.mw-handle-item-draggable-self.active{display:block}.mw-handle-item[data-draggable=false] .mw-handle-item-draggable-self,.mw-handle-item[data-draggable=false] .mw-handle-item-draggable-self.active{display:none}.mw-handle-item.mw-le-resizable .mw-le-resizer:before,.mw-handle-item.mw-le-resizable .mw-le-resizer:after{position:absolute;width:9px;height:9px;background-color:#fff;border:2px solid #2a84fb;content:""}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before{top:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{top:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{left:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before{bottom:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{bottom:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{top:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before{left:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{left:calc(50% - 4px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before{right:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{right:calc(50% - 5px)}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizable.mw-le-resizable-disabled .mw-le-resizer{display:none}.mw-le-resizer{position:absolute;pointer-events:all}.mw-le-resizer-r{cursor:e-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-l{cursor:e-resize;height:100%;left:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:n-resize;height:5px;left:0;width:100%}.mw-le-resizer-t{top:0;cursor:n-resize;height:5px;left:0;width:100%}mw-le-element{display:block}mw-le-element{line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;box-sizing:border-box}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}body:not(.is_admin) [contenteditable=true]{outline:1px dotted #ccc;outline-offset:7px}.FIE_topbar-save-wrapper,.FIE_topbar-close-button{display:none!important}#sidebar-menu{overflow:auto;max-height:calc(100vh - 20px)}
`;var Ue,ft,Tt,vn,Zi,wn,Qi,ri,is;class ns{constructor(t={}){Le(this,vn);Le(this,wn);Le(this,ri);Le(this,Ue,null);Le(this,ft,{});Te(this,"selectedCategory","");Le(this,Tt,[]);Te(this,"root",null);const n={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},n,t),this.document=this.settings.document}on(t,n){F(this,ft)[t]?F(this,ft)[t].push(n):F(this,ft)[t]=[n]}dispatch(t,n){F(this,ft)[t]&&F(this,ft)[t].forEach(i=>{i.call(this,n)})}getData(){return F(this,Ue)}setData(t,n=!0){Bt(this,Ue,t);let i=0,r=F(this,Ue).length;for(;i<r;i++)typeof F(this,Ue)[i].categories=="string"&&(F(this,Ue)[i].categories=F(this,Ue)[i].categories.split(",").map(o=>o.trim()));n&&this.dispatch("dataChanged",F(this,Ue))}prepareCategories(){const t=[],n=this.getData();let i=0,r=n.length;for(;i<r;i++){let s=n[i].categories||"",l=0,d=s.length;for(;l<d;l++){const f=s[l].trim();t.indexOf(f)===-1&&t.push(f)}}t.sort(),this.categories=t}createCategoriesMenu(){const t=this.document.createElement("ul");this.prepareCategories(),t.className="modules-list-categories",t.innerHTML=this.categories.map(n=>`<li data-category="${n}">${n}</li>`).join(""),t.innerHTML=`<li data-category="">All categories</li> ${t.innerHTML}`,t.addEventListener("click",n=>{n.target.nodeName==="LI"&&this.selectCategory(n.target.dataset.category)}),this.categoriesNavigation=t,this.rootShadow.appendChild(t),this.on("categorySelect",n=>{const i=t.querySelectorAll("[data-category]");for(const r of i)r.classList[r.dataset.category===n?"add":"remove"]("active")})}selectCategory(t=""){this.selectedCategory=t,this.search(t),this.dispatch("categorySelect",t)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let t=document.createElement("style");t.textContent=this.settings.css,this.rootShadow.appendChild(t)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let n=0,i=t.length;const r={miscellaneous:et(this,wn,Qi).call(this,"miscellaneous")};for(;n<i;n++)(t[n].categories||["miscellaneous"]).forEach(s=>{r[s]||(r[s]=et(this,wn,Qi).call(this,s));const l=et(this,vn,Zi).call(this,t[n]);F(this,Tt).push(l),r[s].appendChild(l),r[s].__$hasNodes=!0});for(const o in r)r[o].__$hasNodes&&this.modulesList.appendChild(r[o]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let n=0,i=t.length;for(;n<i;n++){const r=et(this,vn,Zi).call(this,t[n]);F(this,Tt).push(r),this.modulesList.appendChild(r)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(t){t.nodeName&&(t.style.display="none")}showItem(t){t.nodeName&&(t.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",t=>this.search(void 0,this.searchField.value)),this.on("categorySelect",t=>{this.searchField.value=""})}async search(t="",n=""){if(this.settings.searchMode==="local")return et(this,ri,is).call(this,t,n)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(t=>{t(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(t=>{t(this)})}}Ue=new WeakMap,ft=new WeakMap,Tt=new WeakMap,vn=new WeakSet,Zi=function(t){t.locked=t.description.includes("a");const n=this.document.createElement("div");return n.className="modules-list-block-item modules-list-block-item-is-locked-"+t.locked,n.__$data=t,n.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${t.icon||t.screenshot||t.image})"></div>
            <div class="modules-list-block-item-title">${t.name||t.title}</div>
            <div class="modules-list-block-item-description">${t.description}</div>
            ${t.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,n.addEventListener("click",i=>{i.stopPropagation(),n.__$data.locked?this.dispatch("lockedModuleSelected",{data:t,element:n}):this.dispatch("moduleSelected",{data:t,element:n})}),n.$data=t,n},wn=new WeakSet,Qi=function(t){const n=this.document.createElement("div");return n.className="modules-list-block-category-section",n.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+t+"</h5></div>",n.__$hasNodes=!1,n},ri=new WeakSet,is=async function(t,n){return t&&(t=t.trim().toLowerCase()),n&&(n=n.trim().toLowerCase()),new Promise(i=>{let r=0,o=F(this,Tt).length,s=0;for(;r<o;r++){const l=F(this,Tt)[r],d=l.$data;if(t&&d.categories.indexOf(t)===-1){this.hideItem(l);continue}if(n&&(d.name||d.title).toLowerCase().indexOf(n)===-1){this.hideItem(l);continue}this.showItem(l),s++}console.log(n,t),this.modulesListNoResultsNode.style.display=s===0?"":"none",i()})};const Kn=[],rs=function(e){Kn.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+e}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",t=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(e){(e.key==="Escape"||e.keyCode===27)&&Kn.length>0&&(Kn[0].remove(),Kn.splice(0,1))});var er,bo=function(e){var t=new ns({data:er});t.create().then(function(){var n=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),i=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),r=mw.element({props:{className:"mw-le-layouts-dialog-col"}});n.append(i),n.append(r),mw.element(t.root).append(n),i.append(t.searchBlock);var o=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});i.append(o),i.append(t.categoriesNavigation),r.append(t.modulesList),e.append(t.root)})};const kc=()=>{var e=new rs("mw-le-layouts-dialog"),t=e.dialog;if(er){bo(t);return}mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(n){return n.json()}).then(function(n){er=n,bo(t),mw.spinner({element:t.get(0),decorate:!0}).remove()})};var tr,yo=function(e){var t=new ns({data:tr});t.createCategorized().then(function(){e.append(t.root)})};const Dc=()=>{var e=new rs("mw-le-modules-dialog"),t=e.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var n=mw.$(this).attr("data-module-name"),i={class:this.className};n==="layout"&&(i.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,n,i,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),tr?yo(t):(mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(n){return n.json()}).then(function(n){tr=n,yo(t),mw.spinner({element:t.get(0),decorate:!0}).remove()}))},Mc={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return Dc()},insertLayout:function(){return kc()}},Pc={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await Zn.get(route("api.module.list")+"?layout_type=module").then(e=>{this.modulesListData=e.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(e){if(this.modulesSkinsData[e])return this.modulesSkinsData[e];if(await Zn.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.modulesSkinsData[e]=t.data}),this.modulesSkinsData[e])return this.modulesSkinsData[e]}},Ic={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await Zn.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(e=>{this.layoutsListData=e.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var e="layouts";if(this.layoutSkinsData[e])return this.layoutSkinsData[e];if(await Zn.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.layoutSkinsData[e]=t.data}),this.layoutSkinsData[e])return this.layoutSkinsData[e]}};class Rc extends Ut{constructor(){super()}onRegister(){}}class Hc extends Ut{selectIcon(t){var n=$(t)[0];mw.iconLoader().init();var i=mw.iconPicker({iconOptions:!1});i.target=document.createElement("i"),i.on("select",function(r){r.render(),n.value=i.target.outerHTML;var o=new Event("input");n.dispatchEvent(o),i.dialog("hide")}),i.dialog()}removeIcon(t){var n=$(t)[0];n.value="";var i=new Event("input");n.dispatchEvent(i)}}class Bc extends Ut{constructor(){super()}selectLink(t){var n=new(mw.top()).LinkEditor({mode:"dialog",controllers:[{type:"url",config:{text:!1,target:!1}},{type:"page",config:{text:!1,target:!1}},{type:"post",config:{text:!1,target:!1}},{type:"file",config:{text:!1,target:!1}},{type:"email",config:{text:!1,target:!1}},{type:"layout",config:{text:!1,target:!1}}]});mw.$(t)&&n.setValue({url:mw.$(t).val()||""});var i=this;n.promise().then(function(r){if(r){var o={},s=r.url;o.url=s,r.data&&r.data.id&&(o.id=r.data.id,r.data.type&&r.data.type==="category"?o.type="category":(r.data.type&&r.data.type==="page"||r.data.content_type)&&(o.type="content")),i.dispatch("selected",o)}})}}class Fc extends Ut{constructor(){super(),this.colorPickerInstances=[],this.positionToElement=!1}setPositionToElement(t){this.positionToElement=t}selectColor(t,n=!1){if(this.colorPickerInstances.length>0)for(let s=0;s<this.colorPickerInstances.length;s++)this.colorPickerInstances[s].remove();var i=$(t)[0];let r=this.generateRandId(10),o=mw.top().dialog({content:'<div id="color-picker-'+r+'" style="width:232px;height:325px;"></div>',title:"Color Picker",footer:!1,width:240,overlayClose:!0});o.dialogContainer&&(o.dialogContainer.style.padding="0px"),o.overlay&&(o.overlay.style.backgroundColor="transparent"),this.colorPickerInstances.push(o),mw.top().colorPicker({element:"#color-picker-"+r,onchange:function(s){i.value=s,i.dispatchEvent(new Event("input")),n&&n(s)}}),o.center()}generateRandId(t){let n="";const i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r=i.length;let o=0;for(;o<t;)n+=i.charAt(Math.floor(Math.random()*r)),o+=1;return n}}(()=>{function e(a,u){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var h=Object.getOwnPropertySymbols(a);u&&(h=h.filter(function(g){return Object.getOwnPropertyDescriptor(a,g).enumerable})),c.push.apply(c,h)}return c}function t(a){for(var u=1;u<arguments.length;u++){var c=arguments[u]!=null?arguments[u]:{};u%2?e(Object(c),!0).forEach(function(h){i(a,h,c[h])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(c)):e(Object(c)).forEach(function(h){Object.defineProperty(a,h,Object.getOwnPropertyDescriptor(c,h))})}return a}function n(a){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?n=function(u){return typeof u}:n=function(u){return u&&typeof Symbol=="function"&&u.constructor===Symbol&&u!==Symbol.prototype?"symbol":typeof u},n(a)}function i(a,u,c){return u in a?Object.defineProperty(a,u,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[u]=c,a}function r(){return r=Object.assign||function(a){for(var u=1;u<arguments.length;u++){var c=arguments[u];for(var h in c)Object.prototype.hasOwnProperty.call(c,h)&&(a[h]=c[h])}return a},r.apply(this,arguments)}function o(a,u){if(a==null)return{};var c={},h=Object.keys(a),g,y;for(y=0;y<h.length;y++)g=h[y],!(u.indexOf(g)>=0)&&(c[g]=a[g]);return c}function s(a,u){if(a==null)return{};var c=o(a,u),h,g;if(Object.getOwnPropertySymbols){var y=Object.getOwnPropertySymbols(a);for(g=0;g<y.length;g++)h=y[g],!(u.indexOf(h)>=0)&&(!Object.prototype.propertyIsEnumerable.call(a,h)||(c[h]=a[h]))}return c}var l="1.15.0";function d(a){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(a)}var f=d(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),p=d(/Edge/i),w=d(/firefox/i),m=d(/safari/i)&&!d(/chrome/i)&&!d(/android/i),v=d(/iP(ad|od|hone)/i),b=d(/chrome/i)&&d(/android/i),T={capture:!1,passive:!1};function _(a,u,c){a.addEventListener(u,c,!f&&T)}function A(a,u,c){a.removeEventListener(u,c,!f&&T)}function j(a,u){if(u){if(u[0]===">"&&(u=u.substring(1)),a)try{if(a.matches)return a.matches(u);if(a.msMatchesSelector)return a.msMatchesSelector(u);if(a.webkitMatchesSelector)return a.webkitMatchesSelector(u)}catch{return!1}return!1}}function J(a){return a.host&&a!==document&&a.host.nodeType?a.host:a.parentNode}function X(a,u,c,h){if(a){c=c||document;do{if(u!=null&&(u[0]===">"?a.parentNode===c&&j(a,u):j(a,u))||h&&a===c)return a;if(a===c)break}while(a=J(a))}return null}var V=/\s+/g;function C(a,u,c){if(a&&u)if(a.classList)a.classList[c?"add":"remove"](u);else{var h=(" "+a.className+" ").replace(V," ").replace(" "+u+" "," ");a.className=(h+(c?" "+u:"")).replace(V," ")}}function S(a,u,c){var h=a&&a.style;if(h){if(c===void 0)return document.defaultView&&document.defaultView.getComputedStyle?c=document.defaultView.getComputedStyle(a,""):a.currentStyle&&(c=a.currentStyle),u===void 0?c:c[u];!(u in h)&&u.indexOf("webkit")===-1&&(u="-webkit-"+u),h[u]=c+(typeof c=="string"?"":"px")}}function M(a,u){var c="";if(typeof a=="string")c=a;else do{var h=S(a,"transform");h&&h!=="none"&&(c=h+" "+c)}while(!u&&(a=a.parentNode));var g=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return g&&new g(c)}function G(a,u,c){if(a){var h=a.getElementsByTagName(u),g=0,y=h.length;if(c)for(;g<y;g++)c(h[g],g);return h}return[]}function Z(){var a=document.scrollingElement;return a||document.documentElement}function k(a,u,c,h,g){if(!(!a.getBoundingClientRect&&a!==window)){var y,x,N,O,P,I,B;if(a!==window&&a.parentNode&&a!==Z()?(y=a.getBoundingClientRect(),x=y.top,N=y.left,O=y.bottom,P=y.right,I=y.height,B=y.width):(x=0,N=0,O=window.innerHeight,P=window.innerWidth,I=window.innerHeight,B=window.innerWidth),(u||c)&&a!==window&&(g=g||a.parentNode,!f))do if(g&&g.getBoundingClientRect&&(S(g,"transform")!=="none"||c&&S(g,"position")!=="static")){var se=g.getBoundingClientRect();x-=se.top+parseInt(S(g,"border-top-width")),N-=se.left+parseInt(S(g,"border-left-width")),O=x+y.height,P=N+y.width;break}while(g=g.parentNode);if(h&&a!==window){var W=M(g||a),ge=W&&W.a,te=W&&W.d;W&&(x/=te,N/=ge,B/=ge,I/=te,O=x+I,P=N+B)}return{top:x,left:N,bottom:O,right:P,width:B,height:I}}}function D(a,u,c){for(var h=ye(a,!0),g=k(a)[u];h;){var y=k(h)[c],x=void 0;if(c==="top"||c==="left"?x=g>=y:x=g<=y,!x)return h;if(h===Z())break;h=ye(h,!1)}return!1}function U(a,u,c,h){for(var g=0,y=0,x=a.children;y<x.length;){if(x[y].style.display!=="none"&&x[y]!==H.ghost&&(h||x[y]!==H.dragged)&&X(x[y],c.draggable,a,!1)){if(g===u)return x[y];g++}y++}return null}function R(a,u){for(var c=a.lastElementChild;c&&(c===H.ghost||S(c,"display")==="none"||u&&!j(c,u));)c=c.previousElementSibling;return c||null}function Y(a,u){var c=0;if(!a||!a.parentNode)return-1;for(;a=a.previousElementSibling;)a.nodeName.toUpperCase()!=="TEMPLATE"&&a!==H.clone&&(!u||j(a,u))&&c++;return c}function de(a){var u=0,c=0,h=Z();if(a)do{var g=M(a),y=g.a,x=g.d;u+=a.scrollLeft*y,c+=a.scrollTop*x}while(a!==h&&(a=a.parentNode));return[u,c]}function qe(a,u){for(var c in a)if(a.hasOwnProperty(c)){for(var h in u)if(u.hasOwnProperty(h)&&u[h]===a[c][h])return Number(c)}return-1}function ye(a,u){if(!a||!a.getBoundingClientRect)return Z();var c=a,h=!1;do if(c.clientWidth<c.scrollWidth||c.clientHeight<c.scrollHeight){var g=S(c);if(c.clientWidth<c.scrollWidth&&(g.overflowX=="auto"||g.overflowX=="scroll")||c.clientHeight<c.scrollHeight&&(g.overflowY=="auto"||g.overflowY=="scroll")){if(!c.getBoundingClientRect||c===document.body)return Z();if(h||u)return c;h=!0}}while(c=c.parentNode);return Z()}function Ke(a,u){if(a&&u)for(var c in u)u.hasOwnProperty(c)&&(a[c]=u[c]);return a}function nt(a,u){return Math.round(a.top)===Math.round(u.top)&&Math.round(a.left)===Math.round(u.left)&&Math.round(a.height)===Math.round(u.height)&&Math.round(a.width)===Math.round(u.width)}var Je;function it(a,u){return function(){if(!Je){var c=arguments,h=this;c.length===1?a.call(h,c[0]):a.apply(h,c),Je=setTimeout(function(){Je=void 0},u)}}}function Pe(){clearTimeout(Je),Je=void 0}function Ee(a,u,c){a.scrollLeft+=u,a.scrollTop+=c}function ke(a){var u=window.Polymer,c=window.jQuery||window.Zepto;return u&&u.dom?u.dom(a).cloneNode(!0):c?c(a).clone(!0)[0]:a.cloneNode(!0)}var ie="Sortable"+new Date().getTime();function me(){var a=[],u;return{captureAnimationState:function(){if(a=[],!!this.options.animation){var c=[].slice.call(this.el.children);c.forEach(function(h){if(!(S(h,"display")==="none"||h===H.ghost)){a.push({target:h,rect:k(h)});var g=t({},a[a.length-1].rect);if(h.thisAnimationDuration){var y=M(h,!0);y&&(g.top-=y.f,g.left-=y.e)}h.fromRect=g}})}},addAnimationState:function(c){a.push(c)},removeAnimationState:function(c){a.splice(qe(a,{target:c}),1)},animateAll:function(c){var h=this;if(!this.options.animation){clearTimeout(u),typeof c=="function"&&c();return}var g=!1,y=0;a.forEach(function(x){var N=0,O=x.target,P=O.fromRect,I=k(O),B=O.prevFromRect,se=O.prevToRect,W=x.rect,ge=M(O,!0);ge&&(I.top-=ge.f,I.left-=ge.e),O.toRect=I,O.thisAnimationDuration&&nt(B,I)&&!nt(P,I)&&(W.top-I.top)/(W.left-I.left)==(P.top-I.top)/(P.left-I.left)&&(N=Ce(W,B,se,h.options)),nt(I,P)||(O.prevFromRect=P,O.prevToRect=I,N||(N=h.options.animation),h.animate(O,W,I,N)),N&&(g=!0,y=Math.max(y,N),clearTimeout(O.animationResetTimer),O.animationResetTimer=setTimeout(function(){O.animationTime=0,O.prevFromRect=null,O.fromRect=null,O.prevToRect=null,O.thisAnimationDuration=null},N),O.thisAnimationDuration=N)}),clearTimeout(u),g?u=setTimeout(function(){typeof c=="function"&&c()},y):typeof c=="function"&&c(),a=[]},animate:function(c,h,g,y){if(y){S(c,"transition",""),S(c,"transform","");var x=M(this.el),N=x&&x.a,O=x&&x.d,P=(h.left-g.left)/(N||1),I=(h.top-g.top)/(O||1);c.animatingX=!!P,c.animatingY=!!I,S(c,"transform","translate3d("+P+"px,"+I+"px,0)"),this.forRepaintDummy=ue(c),S(c,"transition","transform "+y+"ms"+(this.options.easing?" "+this.options.easing:"")),S(c,"transform","translate3d(0,0,0)"),typeof c.animated=="number"&&clearTimeout(c.animated),c.animated=setTimeout(function(){S(c,"transition",""),S(c,"transform",""),c.animated=!1,c.animatingX=!1,c.animatingY=!1},y)}}}}function ue(a){return a.offsetWidth}function Ce(a,u,c,h){return Math.sqrt(Math.pow(u.top-a.top,2)+Math.pow(u.left-a.left,2))/Math.sqrt(Math.pow(u.top-c.top,2)+Math.pow(u.left-c.left,2))*h.animation}var Se=[],Ie={initializeByDefault:!0},Oe={mount:function(a){for(var u in Ie)Ie.hasOwnProperty(u)&&!(u in a)&&(a[u]=Ie[u]);Se.forEach(function(c){if(c.pluginName===a.pluginName)throw"Sortable: Cannot mount plugin ".concat(a.pluginName," more than once")}),Se.push(a)},pluginEvent:function(a,u,c){var h=this;this.eventCanceled=!1,c.cancel=function(){h.eventCanceled=!0};var g=a+"Global";Se.forEach(function(y){!u[y.pluginName]||(u[y.pluginName][g]&&u[y.pluginName][g](t({sortable:u},c)),u.options[y.pluginName]&&u[y.pluginName][a]&&u[y.pluginName][a](t({sortable:u},c)))})},initializePlugins:function(a,u,c,h){Se.forEach(function(x){var N=x.pluginName;if(!(!a.options[N]&&!x.initializeByDefault)){var O=new x(a,u,a.options);O.sortable=a,O.options=a.options,a[N]=O,r(c,O.defaults)}});for(var g in a.options)if(a.options.hasOwnProperty(g)){var y=this.modifyOption(a,g,a.options[g]);typeof y<"u"&&(a.options[g]=y)}},getEventProperties:function(a,u){var c={};return Se.forEach(function(h){typeof h.eventProperties=="function"&&r(c,h.eventProperties.call(u[h.pluginName],a))}),c},modifyOption:function(a,u,c){var h;return Se.forEach(function(g){!a[g.pluginName]||g.optionListeners&&typeof g.optionListeners[u]=="function"&&(h=g.optionListeners[u].call(a[g.pluginName],c))}),h}};function ne(a){var u=a.sortable,c=a.rootEl,h=a.name,g=a.targetEl,y=a.cloneEl,x=a.toEl,N=a.fromEl,O=a.oldIndex,P=a.newIndex,I=a.oldDraggableIndex,B=a.newDraggableIndex,se=a.originalEvent,W=a.putSortable,ge=a.extraEventProperties;if(u=u||c&&c[ie],!!u){var te,Ge=u.options,Ae="on"+h.charAt(0).toUpperCase()+h.substr(1);window.CustomEvent&&!f&&!p?te=new CustomEvent(h,{bubbles:!0,cancelable:!0}):(te=document.createEvent("Event"),te.initEvent(h,!0,!0)),te.to=x||c,te.from=N||c,te.item=g||c,te.clone=y,te.oldIndex=O,te.newIndex=P,te.oldDraggableIndex=I,te.newDraggableIndex=B,te.originalEvent=se,te.pullMode=W?W.lastPutMode:void 0;var Ze=t(t({},ge),Oe.getEventProperties(h,u));for(var xe in Ze)te[xe]=Ze[xe];c&&c.dispatchEvent(te),Ge[Ae]&&Ge[Ae].call(u,te)}}var Q=["evt"],ee=function(a,u){var c=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},h=c.evt,g=s(c,Q);Oe.pluginEvent.bind(H)(a,u,t({dragEl:L,parentEl:ce,ghostEl:q,rootEl:oe,nextEl:wt,lastDownEl:On,cloneEl:le,cloneHidden:rt,dragStarted:Gt,putSortable:be,activeSortable:H.active,originalEvent:h,oldIndex:Mt,oldDraggableIndex:Jt,newIndex:De,newDraggableIndex:ot,hideGhostForTarget:to,unhideGhostForTarget:no,cloneNowHidden:function(){rt=!0},cloneNowShown:function(){rt=!1},dispatchSortableEvent:function(y){re({sortable:u,name:y,originalEvent:h})}},g))};function re(a){ne(t({putSortable:be,cloneEl:le,targetEl:L,rootEl:oe,oldIndex:Mt,oldDraggableIndex:Jt,newIndex:De,newDraggableIndex:ot},a))}var L,ce,q,oe,wt,On,le,rt,Mt,De,Jt,ot,An,be,Pt=!1,Tn=!1,Ln=[],bt,Fe,Ci,Si,Kr,Jr,Gt,It,Zt,Qt=!1,Nn=!1,kn,_e,Oi=[],Ai=!1,Dn=[],Mn=typeof document<"u",Pn=v,Gr=p||f?"cssFloat":"float",Aa=Mn&&!b&&!v&&"draggable"in document.createElement("div"),Zr=function(){if(Mn){if(f)return!1;var a=document.createElement("x");return a.style.cssText="pointer-events:auto",a.style.pointerEvents==="auto"}}(),Qr=function(a,u){var c=S(a),h=parseInt(c.width)-parseInt(c.paddingLeft)-parseInt(c.paddingRight)-parseInt(c.borderLeftWidth)-parseInt(c.borderRightWidth),g=U(a,0,u),y=U(a,1,u),x=g&&S(g),N=y&&S(y),O=x&&parseInt(x.marginLeft)+parseInt(x.marginRight)+k(g).width,P=N&&parseInt(N.marginLeft)+parseInt(N.marginRight)+k(y).width;if(c.display==="flex")return c.flexDirection==="column"||c.flexDirection==="column-reverse"?"vertical":"horizontal";if(c.display==="grid")return c.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(g&&x.float&&x.float!=="none"){var I=x.float==="left"?"left":"right";return y&&(N.clear==="both"||N.clear===I)?"vertical":"horizontal"}return g&&(x.display==="block"||x.display==="flex"||x.display==="table"||x.display==="grid"||O>=h&&c[Gr]==="none"||y&&c[Gr]==="none"&&O+P>h)?"vertical":"horizontal"},Ta=function(a,u,c){var h=c?a.left:a.top,g=c?a.right:a.bottom,y=c?a.width:a.height,x=c?u.left:u.top,N=c?u.right:u.bottom,O=c?u.width:u.height;return h===x||g===N||h+y/2===x+O/2},La=function(a,u){var c;return Ln.some(function(h){var g=h[ie].options.emptyInsertThreshold;if(!(!g||R(h))){var y=k(h),x=a>=y.left-g&&a<=y.right+g,N=u>=y.top-g&&u<=y.bottom+g;if(x&&N)return c=h}}),c},eo=function(a){function u(g,y){return function(x,N,O,P){var I=x.options.group.name&&N.options.group.name&&x.options.group.name===N.options.group.name;if(g==null&&(y||I))return!0;if(g==null||g===!1)return!1;if(y&&g==="clone")return g;if(typeof g=="function")return u(g(x,N,O,P),y)(x,N,O,P);var B=(y?x:N).options.group.name;return g===!0||typeof g=="string"&&g===B||g.join&&g.indexOf(B)>-1}}var c={},h=a.group;(!h||n(h)!="object")&&(h={name:h}),c.name=h.name,c.checkPull=u(h.pull,!0),c.checkPut=u(h.put),c.revertClone=h.revertClone,a.group=c},to=function(){!Zr&&q&&S(q,"display","none")},no=function(){!Zr&&q&&S(q,"display","")};Mn&&!b&&document.addEventListener("click",function(a){if(Tn)return a.preventDefault(),a.stopPropagation&&a.stopPropagation(),a.stopImmediatePropagation&&a.stopImmediatePropagation(),Tn=!1,!1},!0);var yt=function(a){if(L){a=a.touches?a.touches[0]:a;var u=La(a.clientX,a.clientY);if(u){var c={};for(var h in a)a.hasOwnProperty(h)&&(c[h]=a[h]);c.target=c.rootEl=u,c.preventDefault=void 0,c.stopPropagation=void 0,u[ie]._onDragOver(c)}}},Na=function(a){L&&L.parentNode[ie]._isOutsideThisEl(a.target)};function H(a,u){if(!(a&&a.nodeType&&a.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(a));this.el=a,this.options=u=r({},u),a[ie]=this;var c={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(a.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Qr(a,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(y,x){y.setData("Text",x.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:H.supportPointer!==!1&&"PointerEvent"in window&&!m,emptyInsertThreshold:5};Oe.initializePlugins(this,a,c);for(var h in c)!(h in u)&&(u[h]=c[h]);eo(u);for(var g in this)g.charAt(0)==="_"&&typeof this[g]=="function"&&(this[g]=this[g].bind(this));this.nativeDraggable=u.forceFallback?!1:Aa,this.nativeDraggable&&(this.options.touchStartThreshold=1),u.supportPointer?_(a,"pointerdown",this._onTapStart):(_(a,"mousedown",this._onTapStart),_(a,"touchstart",this._onTapStart)),this.nativeDraggable&&(_(a,"dragover",this),_(a,"dragenter",this)),Ln.push(this.el),u.store&&u.store.get&&this.sort(u.store.get(this)||[]),r(this,me())}H.prototype={constructor:H,_isOutsideThisEl:function(a){!this.el.contains(a)&&a!==this.el&&(It=null)},_getDirection:function(a,u){return typeof this.options.direction=="function"?this.options.direction.call(this,a,u,L):this.options.direction},_onTapStart:function(a){if(a.cancelable){var u=this,c=this.el,h=this.options,g=h.preventOnFilter,y=a.type,x=a.touches&&a.touches[0]||a.pointerType&&a.pointerType==="touch"&&a,N=(x||a).target,O=a.target.shadowRoot&&(a.path&&a.path[0]||a.composedPath&&a.composedPath()[0])||N,P=h.filter;if(Ba(c),!L&&!(/mousedown|pointerdown/.test(y)&&a.button!==0||h.disabled)&&!O.isContentEditable&&!(!this.nativeDraggable&&m&&N&&N.tagName.toUpperCase()==="SELECT")&&(N=X(N,h.draggable,c,!1),!(N&&N.animated)&&On!==N)){if(Mt=Y(N),Jt=Y(N,h.draggable),typeof P=="function"){if(P.call(this,a,N,this)){re({sortable:u,rootEl:O,name:"filter",targetEl:N,toEl:c,fromEl:c}),ee("filter",u,{evt:a}),g&&a.cancelable&&a.preventDefault();return}}else if(P&&(P=P.split(",").some(function(I){if(I=X(O,I.trim(),c,!1),I)return re({sortable:u,rootEl:I,name:"filter",targetEl:N,fromEl:c,toEl:c}),ee("filter",u,{evt:a}),!0}),P)){g&&a.cancelable&&a.preventDefault();return}h.handle&&!X(O,h.handle,c,!1)||this._prepareDragStart(a,x,N)}}},_prepareDragStart:function(a,u,c){var h=this,g=h.el,y=h.options,x=g.ownerDocument,N;if(c&&!L&&c.parentNode===g){var O=k(c);if(oe=g,L=c,ce=L.parentNode,wt=L.nextSibling,On=c,An=y.group,H.dragged=L,bt={target:L,clientX:(u||a).clientX,clientY:(u||a).clientY},Kr=bt.clientX-O.left,Jr=bt.clientY-O.top,this._lastX=(u||a).clientX,this._lastY=(u||a).clientY,L.style["will-change"]="all",N=function(){if(ee("delayEnded",h,{evt:a}),H.eventCanceled){h._onDrop();return}h._disableDelayedDragEvents(),!w&&h.nativeDraggable&&(L.draggable=!0),h._triggerDragStart(a,u),re({sortable:h,name:"choose",originalEvent:a}),C(L,y.chosenClass,!0)},y.ignore.split(",").forEach(function(P){G(L,P.trim(),Ti)}),_(x,"dragover",yt),_(x,"mousemove",yt),_(x,"touchmove",yt),_(x,"mouseup",h._onDrop),_(x,"touchend",h._onDrop),_(x,"touchcancel",h._onDrop),w&&this.nativeDraggable&&(this.options.touchStartThreshold=4,L.draggable=!0),ee("delayStart",this,{evt:a}),y.delay&&(!y.delayOnTouchOnly||u)&&(!this.nativeDraggable||!(p||f))){if(H.eventCanceled){this._onDrop();return}_(x,"mouseup",h._disableDelayedDrag),_(x,"touchend",h._disableDelayedDrag),_(x,"touchcancel",h._disableDelayedDrag),_(x,"mousemove",h._delayedDragTouchMoveHandler),_(x,"touchmove",h._delayedDragTouchMoveHandler),y.supportPointer&&_(x,"pointermove",h._delayedDragTouchMoveHandler),h._dragStartTimer=setTimeout(N,y.delay)}else N()}},_delayedDragTouchMoveHandler:function(a){var u=a.touches?a.touches[0]:a;Math.max(Math.abs(u.clientX-this._lastX),Math.abs(u.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){L&&Ti(L),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var a=this.el.ownerDocument;A(a,"mouseup",this._disableDelayedDrag),A(a,"touchend",this._disableDelayedDrag),A(a,"touchcancel",this._disableDelayedDrag),A(a,"mousemove",this._delayedDragTouchMoveHandler),A(a,"touchmove",this._delayedDragTouchMoveHandler),A(a,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(a,u){u=u||a.pointerType=="touch"&&a,!this.nativeDraggable||u?this.options.supportPointer?_(document,"pointermove",this._onTouchMove):u?_(document,"touchmove",this._onTouchMove):_(document,"mousemove",this._onTouchMove):(_(L,"dragend",this),_(oe,"dragstart",this._onDragStart));try{document.selection?Rn(function(){document.selection.empty()}):window.getSelection().removeAllRanges()}catch{}},_dragStarted:function(a,u){if(Pt=!1,oe&&L){ee("dragStarted",this,{evt:u}),this.nativeDraggable&&_(document,"dragover",Na);var c=this.options;!a&&C(L,c.dragClass,!1),C(L,c.ghostClass,!0),H.active=this,a&&this._appendGhost(),re({sortable:this,name:"start",originalEvent:u})}else this._nulling()},_emulateDragOver:function(){if(Fe){this._lastX=Fe.clientX,this._lastY=Fe.clientY,to();for(var a=document.elementFromPoint(Fe.clientX,Fe.clientY),u=a;a&&a.shadowRoot&&(a=a.shadowRoot.elementFromPoint(Fe.clientX,Fe.clientY),a!==u);)u=a;if(L.parentNode[ie]._isOutsideThisEl(a),u)do{if(u[ie]){var c=void 0;if(c=u[ie]._onDragOver({clientX:Fe.clientX,clientY:Fe.clientY,target:a,rootEl:u}),c&&!this.options.dragoverBubble)break}a=u}while(u=u.parentNode);no()}},_onTouchMove:function(a){if(bt){var u=this.options,c=u.fallbackTolerance,h=u.fallbackOffset,g=a.touches?a.touches[0]:a,y=q&&M(q,!0),x=q&&y&&y.a,N=q&&y&&y.d,O=Pn&&_e&&de(_e),P=(g.clientX-bt.clientX+h.x)/(x||1)+(O?O[0]-Oi[0]:0)/(x||1),I=(g.clientY-bt.clientY+h.y)/(N||1)+(O?O[1]-Oi[1]:0)/(N||1);if(!H.active&&!Pt){if(c&&Math.max(Math.abs(g.clientX-this._lastX),Math.abs(g.clientY-this._lastY))<c)return;this._onDragStart(a,!0)}if(q){y?(y.e+=P-(Ci||0),y.f+=I-(Si||0)):y={a:1,b:0,c:0,d:1,e:P,f:I};var B="matrix(".concat(y.a,",").concat(y.b,",").concat(y.c,",").concat(y.d,",").concat(y.e,",").concat(y.f,")");S(q,"webkitTransform",B),S(q,"mozTransform",B),S(q,"msTransform",B),S(q,"transform",B),Ci=P,Si=I,Fe=g}a.cancelable&&a.preventDefault()}},_appendGhost:function(){if(!q){var a=this.options.fallbackOnBody?document.body:oe,u=k(L,!0,Pn,!0,a),c=this.options;if(Pn){for(_e=a;S(_e,"position")==="static"&&S(_e,"transform")==="none"&&_e!==document;)_e=_e.parentNode;_e!==document.body&&_e!==document.documentElement?(_e===document&&(_e=Z()),u.top+=_e.scrollTop,u.left+=_e.scrollLeft):_e=Z(),Oi=de(_e)}q=L.cloneNode(!0),C(q,c.ghostClass,!1),C(q,c.fallbackClass,!0),C(q,c.dragClass,!0),S(q,"transition",""),S(q,"transform",""),S(q,"box-sizing","border-box"),S(q,"margin",0),S(q,"top",u.top),S(q,"left",u.left),S(q,"width",u.width),S(q,"height",u.height),S(q,"opacity","0.8"),S(q,"position",Pn?"absolute":"fixed"),S(q,"zIndex","100000"),S(q,"pointerEvents","none"),H.ghost=q,a.appendChild(q),S(q,"transform-origin",Kr/parseInt(q.style.width)*100+"% "+Jr/parseInt(q.style.height)*100+"%")}},_onDragStart:function(a,u){var c=this,h=a.dataTransfer,g=c.options;if(ee("dragStart",this,{evt:a}),H.eventCanceled){this._onDrop();return}ee("setupClone",this),H.eventCanceled||(le=ke(L),le.removeAttribute("id"),le.draggable=!1,le.style["will-change"]="",this._hideClone(),C(le,this.options.chosenClass,!1),H.clone=le),c.cloneId=Rn(function(){ee("clone",c),!H.eventCanceled&&(c.options.removeCloneOnHide||oe.insertBefore(le,L),c._hideClone(),re({sortable:c,name:"clone"}))}),!u&&C(L,g.dragClass,!0),u?(Tn=!0,c._loopId=setInterval(c._emulateDragOver,50)):(A(document,"mouseup",c._onDrop),A(document,"touchend",c._onDrop),A(document,"touchcancel",c._onDrop),h&&(h.effectAllowed="move",g.setData&&g.setData.call(c,h,L)),_(document,"drop",c),S(L,"transform","translateZ(0)")),Pt=!0,c._dragStartId=Rn(c._dragStarted.bind(c,u,a)),_(document,"selectstart",c),Gt=!0,m&&S(document.body,"user-select","none")},_onDragOver:function(a){var u=this.el,c=a.target,h,g,y,x=this.options,N=x.group,O=H.active,P=An===N,I=x.sort,B=be||O,se,W=this,ge=!1;if(Ai)return;function te(rn,ja){ee(rn,W,t({evt:a,isOwner:P,axis:se?"vertical":"horizontal",revert:y,dragRect:h,targetRect:g,canSort:I,fromSortable:B,target:c,completed:Ae,onMove:function(oo,qa){return In(oe,u,L,h,oo,k(oo),a,qa)},changed:Ze},ja))}function Ge(){te("dragOverAnimationCapture"),W.captureAnimationState(),W!==B&&B.captureAnimationState()}function Ae(rn){return te("dragOverCompleted",{insertion:rn}),rn&&(P?O._hideClone():O._showClone(W),W!==B&&(C(L,be?be.options.ghostClass:O.options.ghostClass,!1),C(L,x.ghostClass,!0)),be!==W&&W!==H.active?be=W:W===H.active&&be&&(be=null),B===W&&(W._ignoreWhileAnimating=c),W.animateAll(function(){te("dragOverAnimationComplete"),W._ignoreWhileAnimating=null}),W!==B&&(B.animateAll(),B._ignoreWhileAnimating=null)),(c===L&&!L.animated||c===u&&!c.animated)&&(It=null),!x.dragoverBubble&&!a.rootEl&&c!==document&&(L.parentNode[ie]._isOutsideThisEl(a.target),!rn&&yt(a)),!x.dragoverBubble&&a.stopPropagation&&a.stopPropagation(),ge=!0}function Ze(){De=Y(L),ot=Y(L,x.draggable),re({sortable:W,name:"change",toEl:u,newIndex:De,newDraggableIndex:ot,originalEvent:a})}if(a.preventDefault!==void 0&&a.cancelable&&a.preventDefault(),c=X(c,x.draggable,u,!0),te("dragOver"),H.eventCanceled)return ge;if(L.contains(a.target)||c.animated&&c.animatingX&&c.animatingY||W._ignoreWhileAnimating===c)return Ae(!1);if(Tn=!1,O&&!x.disabled&&(P?I||(y=ce!==oe):be===this||(this.lastPutMode=An.checkPull(this,O,L,a))&&N.checkPut(this,O,L,a))){if(se=this._getDirection(a,c)==="vertical",h=k(L),te("dragOverValid"),H.eventCanceled)return ge;if(y)return ce=oe,Ge(),this._hideClone(),te("revert"),H.eventCanceled||(wt?oe.insertBefore(L,wt):oe.appendChild(L)),Ae(!0);var xe=R(u,x.draggable);if(!xe||Pa(a,se,this)&&!xe.animated){if(xe===L)return Ae(!1);if(xe&&u===a.target&&(c=xe),c&&(g=k(c)),In(oe,u,L,h,c,g,a,!!c)!==!1)return Ge(),xe&&xe.nextSibling?u.insertBefore(L,xe.nextSibling):u.appendChild(L),ce=u,Ze(),Ae(!0)}else if(xe&&Ma(a,se,this)){var _t=U(u,0,x,!0);if(_t===L)return Ae(!1);if(c=_t,g=k(c),In(oe,u,L,h,c,g,a,!1)!==!1)return Ge(),u.insertBefore(L,_t),ce=u,Ze(),Ae(!0)}else if(c.parentNode===u){g=k(c);var $e=0,xt,nn=L.parentNode!==u,Rt=!Ta(L.animated&&L.toRect||h,c.animated&&c.toRect||g,se),Me=se?"top":"left",st=D(c,"top","top")||D(L,"top","top"),Fn=st?st.scrollTop:void 0;It!==c&&(xt=g[Me],Qt=!1,Nn=!Rt&&x.invertSwap||nn),$e=Ia(a,c,g,se,Rt?1:x.swapThreshold,x.invertedSwapThreshold==null?x.swapThreshold:x.invertedSwapThreshold,Nn,It===c);var Qe;if($e!==0){var Ht=Y(L);do Ht-=$e,Qe=ce.children[Ht];while(Qe&&(S(Qe,"display")==="none"||Qe===q))}if($e===0||Qe===c)return Ae(!1);It=c,Zt=$e;var Et=c.nextElementSibling,at=!1;at=$e===1;var Ct=In(oe,u,L,h,c,g,a,at);if(Ct!==!1)return(Ct===1||Ct===-1)&&(at=Ct===1),Ai=!0,setTimeout(Da,30),Ge(),at&&!Et?u.appendChild(L):c.parentNode.insertBefore(L,at?Et:c),st&&Ee(st,0,Fn-st.scrollTop),ce=L.parentNode,xt!==void 0&&!Nn&&(kn=Math.abs(xt-k(c)[Me])),Ze(),Ae(!0)}if(u.contains(L))return Ae(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){A(document,"mousemove",this._onTouchMove),A(document,"touchmove",this._onTouchMove),A(document,"pointermove",this._onTouchMove),A(document,"dragover",yt),A(document,"mousemove",yt),A(document,"touchmove",yt)},_offUpEvents:function(){var a=this.el.ownerDocument;A(a,"mouseup",this._onDrop),A(a,"touchend",this._onDrop),A(a,"pointerup",this._onDrop),A(a,"touchcancel",this._onDrop),A(document,"selectstart",this)},_onDrop:function(a){var u=this.el,c=this.options;if(De=Y(L),ot=Y(L,c.draggable),ee("drop",this,{evt:a}),ce=L&&L.parentNode,De=Y(L),ot=Y(L,c.draggable),H.eventCanceled){this._nulling();return}Pt=!1,Nn=!1,Qt=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),Li(this.cloneId),Li(this._dragStartId),this.nativeDraggable&&(A(document,"drop",this),A(u,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),m&&S(document.body,"user-select",""),S(L,"transform",""),a&&(Gt&&(a.cancelable&&a.preventDefault(),!c.dropBubble&&a.stopPropagation()),q&&q.parentNode&&q.parentNode.removeChild(q),(oe===ce||be&&be.lastPutMode!=="clone")&&le&&le.parentNode&&le.parentNode.removeChild(le),L&&(this.nativeDraggable&&A(L,"dragend",this),Ti(L),L.style["will-change"]="",Gt&&!Pt&&C(L,be?be.options.ghostClass:this.options.ghostClass,!1),C(L,this.options.chosenClass,!1),re({sortable:this,name:"unchoose",toEl:ce,newIndex:null,newDraggableIndex:null,originalEvent:a}),oe!==ce?(De>=0&&(re({rootEl:ce,name:"add",toEl:ce,fromEl:oe,originalEvent:a}),re({sortable:this,name:"remove",toEl:ce,originalEvent:a}),re({rootEl:ce,name:"sort",toEl:ce,fromEl:oe,originalEvent:a}),re({sortable:this,name:"sort",toEl:ce,originalEvent:a})),be&&be.save()):De!==Mt&&De>=0&&(re({sortable:this,name:"update",toEl:ce,originalEvent:a}),re({sortable:this,name:"sort",toEl:ce,originalEvent:a})),H.active&&((De==null||De===-1)&&(De=Mt,ot=Jt),re({sortable:this,name:"end",toEl:ce,originalEvent:a}),this.save()))),this._nulling()},_nulling:function(){ee("nulling",this),oe=L=ce=q=wt=le=On=rt=bt=Fe=Gt=De=ot=Mt=Jt=It=Zt=be=An=H.dragged=H.ghost=H.clone=H.active=null,Dn.forEach(function(a){a.checked=!0}),Dn.length=Ci=Si=0},handleEvent:function(a){switch(a.type){case"drop":case"dragend":this._onDrop(a);break;case"dragenter":case"dragover":L&&(this._onDragOver(a),ka(a));break;case"selectstart":a.preventDefault();break}},toArray:function(){for(var a=[],u,c=this.el.children,h=0,g=c.length,y=this.options;h<g;h++)u=c[h],X(u,y.draggable,this.el,!1)&&a.push(u.getAttribute(y.dataIdAttr)||Ha(u));return a},sort:function(a,u){var c={},h=this.el;this.toArray().forEach(function(g,y){var x=h.children[y];X(x,this.options.draggable,h,!1)&&(c[g]=x)},this),u&&this.captureAnimationState(),a.forEach(function(g){c[g]&&(h.removeChild(c[g]),h.appendChild(c[g]))}),u&&this.animateAll()},save:function(){var a=this.options.store;a&&a.set&&a.set(this)},closest:function(a,u){return X(a,u||this.options.draggable,this.el,!1)},option:function(a,u){var c=this.options;if(u===void 0)return c[a];var h=Oe.modifyOption(this,a,u);typeof h<"u"?c[a]=h:c[a]=u,a==="group"&&eo(c)},destroy:function(){ee("destroy",this);var a=this.el;a[ie]=null,A(a,"mousedown",this._onTapStart),A(a,"touchstart",this._onTapStart),A(a,"pointerdown",this._onTapStart),this.nativeDraggable&&(A(a,"dragover",this),A(a,"dragenter",this)),Array.prototype.forEach.call(a.querySelectorAll("[draggable]"),function(u){u.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),Ln.splice(Ln.indexOf(this.el),1),this.el=a=null},_hideClone:function(){if(!rt){if(ee("hideClone",this),H.eventCanceled)return;S(le,"display","none"),this.options.removeCloneOnHide&&le.parentNode&&le.parentNode.removeChild(le),rt=!0}},_showClone:function(a){if(a.lastPutMode!=="clone"){this._hideClone();return}if(rt){if(ee("showClone",this),H.eventCanceled)return;L.parentNode==oe&&!this.options.group.revertClone?oe.insertBefore(le,L):wt?oe.insertBefore(le,wt):oe.appendChild(le),this.options.group.revertClone&&this.animate(L,le),S(le,"display",""),rt=!1}}};function ka(a){a.dataTransfer&&(a.dataTransfer.dropEffect="move"),a.cancelable&&a.preventDefault()}function In(a,u,c,h,g,y,x,N){var O,P=a[ie],I=P.options.onMove,B;return window.CustomEvent&&!f&&!p?O=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(O=document.createEvent("Event"),O.initEvent("move",!0,!0)),O.to=u,O.from=a,O.dragged=c,O.draggedRect=h,O.related=g||u,O.relatedRect=y||k(u),O.willInsertAfter=N,O.originalEvent=x,a.dispatchEvent(O),I&&(B=I.call(P,O,x)),B}function Ti(a){a.draggable=!1}function Da(){Ai=!1}function Ma(a,u,c){var h=k(U(c.el,0,c.options,!0)),g=10;return u?a.clientX<h.left-g||a.clientY<h.top&&a.clientX<h.right:a.clientY<h.top-g||a.clientY<h.bottom&&a.clientX<h.left}function Pa(a,u,c){var h=k(R(c.el,c.options.draggable)),g=10;return u?a.clientX>h.right+g||a.clientX<=h.right&&a.clientY>h.bottom&&a.clientX>=h.left:a.clientX>h.right&&a.clientY>h.top||a.clientX<=h.right&&a.clientY>h.bottom+g}function Ia(a,u,c,h,g,y,x,N){var O=h?a.clientY:a.clientX,P=h?c.height:c.width,I=h?c.top:c.left,B=h?c.bottom:c.right,se=!1;if(!x){if(N&&kn<P*g){if(!Qt&&(Zt===1?O>I+P*y/2:O<B-P*y/2)&&(Qt=!0),Qt)se=!0;else if(Zt===1?O<I+kn:O>B-kn)return-Zt}else if(O>I+P*(1-g)/2&&O<B-P*(1-g)/2)return Ra(u)}return se=se||x,se&&(O<I+P*y/2||O>B-P*y/2)?O>I+P/2?1:-1:0}function Ra(a){return Y(L)<Y(a)?1:-1}function Ha(a){for(var u=a.tagName+a.className+a.src+a.href+a.textContent,c=u.length,h=0;c--;)h+=u.charCodeAt(c);return h.toString(36)}function Ba(a){Dn.length=0;for(var u=a.getElementsByTagName("input"),c=u.length;c--;){var h=u[c];h.checked&&Dn.push(h)}}function Rn(a){return setTimeout(a,0)}function Li(a){return clearTimeout(a)}Mn&&_(document,"touchmove",function(a){(H.active||Pt)&&a.cancelable&&a.preventDefault()}),H.utils={on:_,off:A,css:S,find:G,is:function(a,u){return!!X(a,u,a,!1)},extend:Ke,throttle:it,closest:X,toggleClass:C,clone:ke,index:Y,nextTick:Rn,cancelNextTick:Li,detectDirection:Qr,getChild:U},H.get=function(a){return a[ie]},H.mount=function(){for(var a=arguments.length,u=new Array(a),c=0;c<a;c++)u[c]=arguments[c];u[0].constructor===Array&&(u=u[0]),u.forEach(function(h){if(!h.prototype||!h.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(h));h.utils&&(H.utils=t(t({},H.utils),h.utils)),Oe.mount(h)})},H.create=function(a,u){return new H(a,u)},H.version=l;var fe=[],en,Ni,ki=!1,Di,Mi,Hn,tn;function Fa(){function a(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var u in this)u.charAt(0)==="_"&&typeof this[u]=="function"&&(this[u]=this[u].bind(this))}return a.prototype={dragStarted:function(u){var c=u.originalEvent;this.sortable.nativeDraggable?_(document,"dragover",this._handleAutoScroll):this.options.supportPointer?_(document,"pointermove",this._handleFallbackAutoScroll):c.touches?_(document,"touchmove",this._handleFallbackAutoScroll):_(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(u){var c=u.originalEvent;!this.options.dragOverBubble&&!c.rootEl&&this._handleAutoScroll(c)},drop:function(){this.sortable.nativeDraggable?A(document,"dragover",this._handleAutoScroll):(A(document,"pointermove",this._handleFallbackAutoScroll),A(document,"touchmove",this._handleFallbackAutoScroll),A(document,"mousemove",this._handleFallbackAutoScroll)),io(),Bn(),Pe()},nulling:function(){Hn=Ni=en=ki=tn=Di=Mi=null,fe.length=0},_handleFallbackAutoScroll:function(u){this._handleAutoScroll(u,!0)},_handleAutoScroll:function(u,c){var h=this,g=(u.touches?u.touches[0]:u).clientX,y=(u.touches?u.touches[0]:u).clientY,x=document.elementFromPoint(g,y);if(Hn=u,c||this.options.forceAutoScrollFallback||p||f||m){Pi(u,this.options,x,c);var N=ye(x,!0);ki&&(!tn||g!==Di||y!==Mi)&&(tn&&io(),tn=setInterval(function(){var O=ye(document.elementFromPoint(g,y),!0);O!==N&&(N=O,Bn()),Pi(u,h.options,O,c)},10),Di=g,Mi=y)}else{if(!this.options.bubbleScroll||ye(x,!0)===Z()){Bn();return}Pi(u,this.options,ye(x,!1),!1)}}},r(a,{pluginName:"scroll",initializeByDefault:!0})}function Bn(){fe.forEach(function(a){clearInterval(a.pid)}),fe=[]}function io(){clearInterval(tn)}var Pi=it(function(a,u,c,h){if(u.scroll){var g=(a.touches?a.touches[0]:a).clientX,y=(a.touches?a.touches[0]:a).clientY,x=u.scrollSensitivity,N=u.scrollSpeed,O=Z(),P=!1,I;Ni!==c&&(Ni=c,Bn(),en=u.scroll,I=u.scrollFn,en===!0&&(en=ye(c,!0)));var B=0,se=en;do{var W=se,ge=k(W),te=ge.top,Ge=ge.bottom,Ae=ge.left,Ze=ge.right,xe=ge.width,_t=ge.height,$e=void 0,xt=void 0,nn=W.scrollWidth,Rt=W.scrollHeight,Me=S(W),st=W.scrollLeft,Fn=W.scrollTop;W===O?($e=xe<nn&&(Me.overflowX==="auto"||Me.overflowX==="scroll"||Me.overflowX==="visible"),xt=_t<Rt&&(Me.overflowY==="auto"||Me.overflowY==="scroll"||Me.overflowY==="visible")):($e=xe<nn&&(Me.overflowX==="auto"||Me.overflowX==="scroll"),xt=_t<Rt&&(Me.overflowY==="auto"||Me.overflowY==="scroll"));var Qe=$e&&(Math.abs(Ze-g)<=x&&st+xe<nn)-(Math.abs(Ae-g)<=x&&!!st),Ht=xt&&(Math.abs(Ge-y)<=x&&Fn+_t<Rt)-(Math.abs(te-y)<=x&&!!Fn);if(!fe[B])for(var Et=0;Et<=B;Et++)fe[Et]||(fe[Et]={});(fe[B].vx!=Qe||fe[B].vy!=Ht||fe[B].el!==W)&&(fe[B].el=W,fe[B].vx=Qe,fe[B].vy=Ht,clearInterval(fe[B].pid),(Qe!=0||Ht!=0)&&(P=!0,fe[B].pid=setInterval((function(){h&&this.layer===0&&H.active._onTouchMove(Hn);var at=fe[this.layer].vy?fe[this.layer].vy*N:0,Ct=fe[this.layer].vx?fe[this.layer].vx*N:0;typeof I=="function"&&I.call(H.dragged.parentNode[ie],Ct,at,a,Hn,fe[this.layer].el)!=="continue"||Ee(fe[this.layer].el,Ct,at)}).bind({layer:B}),24))),B++}while(u.bubbleScroll&&se!==O&&(se=ye(se,!1)));ki=P}},30),ro=function(a){var u=a.originalEvent,c=a.putSortable,h=a.dragEl,g=a.activeSortable,y=a.dispatchSortableEvent,x=a.hideGhostForTarget,N=a.unhideGhostForTarget;if(u){var O=c||g;x();var P=u.changedTouches&&u.changedTouches.length?u.changedTouches[0]:u,I=document.elementFromPoint(P.clientX,P.clientY);N(),O&&!O.el.contains(I)&&(y("spill"),this.onSpill({dragEl:h,putSortable:c}))}};function Ii(){}Ii.prototype={startIndex:null,dragStart:function(a){var u=a.oldDraggableIndex;this.startIndex=u},onSpill:function(a){var u=a.dragEl,c=a.putSortable;this.sortable.captureAnimationState(),c&&c.captureAnimationState();var h=U(this.sortable.el,this.startIndex,this.options);h?this.sortable.el.insertBefore(u,h):this.sortable.el.appendChild(u),this.sortable.animateAll(),c&&c.animateAll()},drop:ro},r(Ii,{pluginName:"revertOnSpill"});function Ri(){}Ri.prototype={onSpill:function(a){var u=a.dragEl,c=a.putSortable,h=c||this.sortable;h.captureAnimationState(),u.parentNode&&u.parentNode.removeChild(u),h.animateAll()},drop:ro},r(Ri,{pluginName:"removeOnSpill"}),H.mount(new Fa),H.mount(Ri,Ii);var za=H;if(window.Sortable=za,typeof window.Livewire>"u")throw"Livewire Sortable.js Plugin: window.Livewire is undefined. Make sure @livewireScripts is placed above this script include";window.Livewire.directive("sortable",(a,u,c)=>{if(u.modifiers.length>0)return;let h={};a.hasAttribute("wire:sortable.options")&&(h=new Function(`return ${a.getAttribute("wire:sortable.options")};`)()),a.livewire_sortable=window.Sortable.create(a,{...h,draggable:"[wire\\:sortable\\.item]",handle:a.querySelector("[wire\\:sortable\\.handle]")?"[wire\\:sortable\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable.item",group:{name:a.getAttribute("wire:sortable"),pull:!1,put:!1},store:{set:function(g){let y=g.toArray().map((x,N)=>({order:N+1,value:x}));c.call(u.method,y)}}})}),window.Livewire.directive("sortable-group",(a,u,c)=>{if(!u.modifiers.includes("item-group"))return;let h={};a.hasAttribute("wire:sortable-group.options")&&(h=new Function(`return ${a.getAttribute("wire:sortable-group.options")};`)()),a.livewire_sortable=window.Sortable.create(a,{...h,draggable:"[wire\\:sortable-group\\.item]",handle:a.querySelector("[wire\\:sortable-group\\.handle]")?"[wire\\:sortable-group\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable-group.item",group:{name:a.closest("[wire\\:sortable-group]").getAttribute("wire:sortable-group"),pull:!0,put:!0},onSort:()=>{let g=a.closest("[wire\\:sortable-group]"),y=Array.from(g.querySelectorAll("[wire\\:sortable-group\\.item-group]")).map((x,N)=>({order:N+1,value:x.getAttribute("wire:sortable-group.item-group"),items:x.livewire_sortable.toArray().map((O,P)=>({order:P+1,value:O}))}));c.call(g.getAttribute("wire:sortable-group"),y)}})})})();/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */var nr=!1,ir=!1,Lt=[],rr=-1;function zc(e){jc(e)}function jc(e){Lt.includes(e)||Lt.push(e),qc()}function os(e){let t=Lt.indexOf(e);t!==-1&&t>rr&&Lt.splice(t,1)}function qc(){!ir&&!nr&&(nr=!0,queueMicrotask($c))}function $c(){nr=!1,ir=!0;for(let e=0;e<Lt.length;e++)Lt[e](),rr=e;Lt.length=0,rr=-1,ir=!1}var Yt,Xt,_n,ss,or=!0;function Wc(e){or=!1,e(),or=!0}function Uc(e){Yt=e.reactive,_n=e.release,Xt=t=>e.effect(t,{scheduler:n=>{or?zc(n):n()}}),ss=e.raw}function _o(e){Xt=e}function Vc(e){let t=()=>{};return[i=>{let r=Xt(i);return e._x_effects||(e._x_effects=new Set,e._x_runEffects=()=>{e._x_effects.forEach(o=>o())}),e._x_effects.add(r),t=()=>{r!==void 0&&(e._x_effects.delete(r),_n(r))},r},()=>{t()}]}var as=[],ls=[],cs=[];function Yc(e){cs.push(e)}function us(e,t){typeof t=="function"?(e._x_cleanups||(e._x_cleanups=[]),e._x_cleanups.push(t)):(t=e,ls.push(t))}function Xc(e){as.push(e)}function Kc(e,t,n){e._x_attributeCleanups||(e._x_attributeCleanups={}),e._x_attributeCleanups[t]||(e._x_attributeCleanups[t]=[]),e._x_attributeCleanups[t].push(n)}function ds(e,t){e._x_attributeCleanups&&Object.entries(e._x_attributeCleanups).forEach(([n,i])=>{(t===void 0||t.includes(n))&&(i.forEach(r=>r()),delete e._x_attributeCleanups[n])})}var Ar=new MutationObserver(kr),Tr=!1;function Lr(){Ar.observe(document,{subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0}),Tr=!0}function fs(){Jc(),Ar.disconnect(),Tr=!1}var dn=[],qi=!1;function Jc(){dn=dn.concat(Ar.takeRecords()),dn.length&&!qi&&(qi=!0,queueMicrotask(()=>{Gc(),qi=!1}))}function Gc(){kr(dn),dn.length=0}function we(e){if(!Tr)return e();fs();let t=e();return Lr(),t}var Nr=!1,Qn=[];function Zc(){Nr=!0}function Qc(){Nr=!1,kr(Qn),Qn=[]}function kr(e){if(Nr){Qn=Qn.concat(e);return}let t=[],n=[],i=new Map,r=new Map;for(let o=0;o<e.length;o++)if(!e[o].target._x_ignoreMutationObserver&&(e[o].type==="childList"&&(e[o].addedNodes.forEach(s=>s.nodeType===1&&t.push(s)),e[o].removedNodes.forEach(s=>s.nodeType===1&&n.push(s))),e[o].type==="attributes")){let s=e[o].target,l=e[o].attributeName,d=e[o].oldValue,f=()=>{i.has(s)||i.set(s,[]),i.get(s).push({name:l,value:s.getAttribute(l)})},p=()=>{r.has(s)||r.set(s,[]),r.get(s).push(l)};s.hasAttribute(l)&&d===null?f():s.hasAttribute(l)?(p(),f()):p()}r.forEach((o,s)=>{ds(s,o)}),i.forEach((o,s)=>{as.forEach(l=>l(s,o))});for(let o of n)if(!t.includes(o)&&(ls.forEach(s=>s(o)),o._x_cleanups))for(;o._x_cleanups.length;)o._x_cleanups.pop()();t.forEach(o=>{o._x_ignoreSelf=!0,o._x_ignore=!0});for(let o of t)n.includes(o)||o.isConnected&&(delete o._x_ignoreSelf,delete o._x_ignore,cs.forEach(s=>s(o)),o._x_ignore=!0,o._x_ignoreSelf=!0);t.forEach(o=>{delete o._x_ignoreSelf,delete o._x_ignore}),t=null,n=null,i=null,r=null}function hs(e){return En($t(e))}function xn(e,t,n){return e._x_dataStack=[t,...$t(n||e)],()=>{e._x_dataStack=e._x_dataStack.filter(i=>i!==t)}}function $t(e){return e._x_dataStack?e._x_dataStack:typeof ShadowRoot=="function"&&e instanceof ShadowRoot?$t(e.host):e.parentNode?$t(e.parentNode):[]}function En(e){let t=new Proxy({},{ownKeys:()=>Array.from(new Set(e.flatMap(n=>Object.keys(n)))),has:(n,i)=>e.some(r=>r.hasOwnProperty(i)),get:(n,i)=>(e.find(r=>{if(r.hasOwnProperty(i)){let o=Object.getOwnPropertyDescriptor(r,i);if(o.get&&o.get._x_alreadyBound||o.set&&o.set._x_alreadyBound)return!0;if((o.get||o.set)&&o.enumerable){let s=o.get,l=o.set,d=o;s=s&&s.bind(t),l=l&&l.bind(t),s&&(s._x_alreadyBound=!0),l&&(l._x_alreadyBound=!0),Object.defineProperty(r,i,{...d,get:s,set:l})}return!0}return!1})||{})[i],set:(n,i,r)=>{let o=e.find(s=>s.hasOwnProperty(i));return o?o[i]=r:e[e.length-1][i]=r,!0}});return t}function ps(e){let t=i=>typeof i=="object"&&!Array.isArray(i)&&i!==null,n=(i,r="")=>{Object.entries(Object.getOwnPropertyDescriptors(i)).forEach(([o,{value:s,enumerable:l}])=>{if(l===!1||s===void 0)return;let d=r===""?o:`${r}.${o}`;typeof s=="object"&&s!==null&&s._x_interceptor?i[o]=s.initialize(e,d,o):t(s)&&s!==i&&!(s instanceof Element)&&n(s,d)})};return n(e)}function ms(e,t=()=>{}){let n={initialValue:void 0,_x_interceptor:!0,initialize(i,r,o){return e(this.initialValue,()=>eu(i,r),s=>sr(i,r,s),r,o)}};return t(n),i=>{if(typeof i=="object"&&i!==null&&i._x_interceptor){let r=n.initialize.bind(n);n.initialize=(o,s,l)=>{let d=i.initialize(o,s,l);return n.initialValue=d,r(o,s,l)}}else n.initialValue=i;return n}}function eu(e,t){return t.split(".").reduce((n,i)=>n[i],e)}function sr(e,t,n){if(typeof t=="string"&&(t=t.split(".")),t.length===1)e[t[0]]=n;else{if(t.length===0)throw error;return e[t[0]]||(e[t[0]]={}),sr(e[t[0]],t.slice(1),n)}}var gs={};function je(e,t){gs[e]=t}function ar(e,t){return Object.entries(gs).forEach(([n,i])=>{let r=null;function o(){if(r)return r;{let[s,l]=xs(t);return r={interceptor:ms,...s},us(t,l),r}}Object.defineProperty(e,`$${n}`,{get(){return i(t,o())},enumerable:!1})}),e}function tu(e,t,n,...i){try{return n(...i)}catch(r){mn(r,e,t)}}function mn(e,t,n=void 0){Object.assign(e,{el:t,expression:n}),console.warn(`Alpine Expression Error: ${e.message}

${n?'Expression: "'+n+`"

`:""}`,t),setTimeout(()=>{throw e},0)}var Jn=!0;function vs(e){let t=Jn;Jn=!1;let n=e();return Jn=t,n}function Nt(e,t,n={}){let i;return Ne(e,t)(r=>i=r,n),i}function Ne(...e){return ws(...e)}var ws=bs;function nu(e){ws=e}function bs(e,t){let n={};ar(n,e);let i=[n,...$t(e)],r=typeof t=="function"?iu(i,t):ou(i,t,e);return tu.bind(null,e,t,r)}function iu(e,t){return(n=()=>{},{scope:i={},params:r=[]}={})=>{let o=t.apply(En([i,...e]),r);ei(n,o)}}var $i={};function ru(e,t){if($i[e])return $i[e];let n=Object.getPrototypeOf(async function(){}).constructor,i=/^[\n\s]*if.*\(.*\)/.test(e)||/^(let|const)\s/.test(e)?`(async()=>{ ${e} })()`:e,o=(()=>{try{return new n(["__self","scope"],`with (scope) { __self.result = ${i} }; __self.finished = true; return __self.result;`)}catch(s){return mn(s,t,e),Promise.resolve()}})();return $i[e]=o,o}function ou(e,t,n){let i=ru(t,n);return(r=()=>{},{scope:o={},params:s=[]}={})=>{i.result=void 0,i.finished=!1;let l=En([o,...e]);if(typeof i=="function"){let d=i(i,l).catch(f=>mn(f,n,t));i.finished?(ei(r,i.result,l,s,n),i.result=void 0):d.then(f=>{ei(r,f,l,s,n)}).catch(f=>mn(f,n,t)).finally(()=>i.result=void 0)}}}function ei(e,t,n,i,r){if(Jn&&typeof t=="function"){let o=t.apply(n,i);o instanceof Promise?o.then(s=>ei(e,s,n,i)).catch(s=>mn(s,r,t)):e(o)}else typeof t=="object"&&t instanceof Promise?t.then(o=>e(o)):e(t)}var Dr="x-";function Kt(e=""){return Dr+e}function su(e){Dr=e}var lr={};function pe(e,t){return lr[e]=t,{before(n){if(!lr[n]){console.warn("Cannot find directive `${directive}`. `${name}` will use the default order of execution");return}const i=At.indexOf(n);At.splice(i>=0?i:At.indexOf("DEFAULT"),0,e)}}}function Mr(e,t,n){if(t=Array.from(t),e._x_virtualDirectives){let o=Object.entries(e._x_virtualDirectives).map(([l,d])=>({name:l,value:d})),s=ys(o);o=o.map(l=>s.find(d=>d.name===l.name)?{name:`x-bind:${l.name}`,value:`"${l.value}"`}:l),t=t.concat(o)}let i={};return t.map(Ss((o,s)=>i[o]=s)).filter(As).map(cu(i,n)).sort(uu).map(o=>lu(e,o))}function ys(e){return Array.from(e).map(Ss()).filter(t=>!As(t))}var cr=!1,un=new Map,_s=Symbol();function au(e){cr=!0;let t=Symbol();_s=t,un.set(t,[]);let n=()=>{for(;un.get(t).length;)un.get(t).shift()();un.delete(t)},i=()=>{cr=!1,n()};e(n),i()}function xs(e){let t=[],n=l=>t.push(l),[i,r]=Vc(e);return t.push(r),[{Alpine:Sn,effect:i,cleanup:n,evaluateLater:Ne.bind(Ne,e),evaluate:Nt.bind(Nt,e)},()=>t.forEach(l=>l())]}function lu(e,t){let n=()=>{},i=lr[t.type]||n,[r,o]=xs(e);Kc(e,t.original,o);let s=()=>{e._x_ignore||e._x_ignoreSelf||(i.inline&&i.inline(e,t,r),i=i.bind(i,e,t,r),cr?un.get(_s).push(i):i())};return s.runCleanups=o,s}var Es=(e,t)=>({name:n,value:i})=>(n.startsWith(e)&&(n=n.replace(e,t)),{name:n,value:i}),Cs=e=>e;function Ss(e=()=>{}){return({name:t,value:n})=>{let{name:i,value:r}=Os.reduce((o,s)=>s(o),{name:t,value:n});return i!==t&&e(i,t),{name:i,value:r}}}var Os=[];function Pr(e){Os.push(e)}function As({name:e}){return Ts().test(e)}var Ts=()=>new RegExp(`^${Dr}([^:^.]+)\\b`);function cu(e,t){return({name:n,value:i})=>{let r=n.match(Ts()),o=n.match(/:([a-zA-Z0-9\-:]+)/),s=n.match(/\.[^.\]]+(?=[^\]]*$)/g)||[],l=t||e[n]||n;return{type:r?r[1]:null,value:o?o[1]:null,modifiers:s.map(d=>d.replace(".","")),expression:i,original:l}}}var ur="DEFAULT",At=["ignore","ref","data","id","bind","init","for","model","modelable","transition","show","if",ur,"teleport"];function uu(e,t){let n=At.indexOf(e.type)===-1?ur:e.type,i=At.indexOf(t.type)===-1?ur:t.type;return At.indexOf(n)-At.indexOf(i)}function fn(e,t,n={}){e.dispatchEvent(new CustomEvent(t,{detail:n,bubbles:!0,composed:!0,cancelable:!0}))}function pt(e,t){if(typeof ShadowRoot=="function"&&e instanceof ShadowRoot){Array.from(e.children).forEach(r=>pt(r,t));return}let n=!1;if(t(e,()=>n=!0),n)return;let i=e.firstElementChild;for(;i;)pt(i,t),i=i.nextElementSibling}function mt(e,...t){console.warn(`Alpine Warning: ${e}`,...t)}var xo=!1;function du(){xo&&mt("Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems."),xo=!0,document.body||mt("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?"),fn(document,"alpine:init"),fn(document,"alpine:initializing"),Lr(),Yc(t=>gt(t,pt)),us(t=>Is(t)),Xc((t,n)=>{Mr(t,n).forEach(i=>i())});let e=t=>!fi(t.parentElement,!0);Array.from(document.querySelectorAll(ks())).filter(e).forEach(t=>{gt(t)}),fn(document,"alpine:initialized")}var Ir=[],Ls=[];function Ns(){return Ir.map(e=>e())}function ks(){return Ir.concat(Ls).map(e=>e())}function Ds(e){Ir.push(e)}function Ms(e){Ls.push(e)}function fi(e,t=!1){return hi(e,n=>{if((t?ks():Ns()).some(r=>n.matches(r)))return!0})}function hi(e,t){if(e){if(t(e))return e;if(e._x_teleportBack&&(e=e._x_teleportBack),!!e.parentElement)return hi(e.parentElement,t)}}function fu(e){return Ns().some(t=>e.matches(t))}var Ps=[];function hu(e){Ps.push(e)}function gt(e,t=pt,n=()=>{}){au(()=>{t(e,(i,r)=>{n(i,r),Ps.forEach(o=>o(i,r)),Mr(i,i.attributes).forEach(o=>o()),i._x_ignore&&r()})})}function Is(e){pt(e,t=>ds(t))}var dr=[],Rr=!1;function Hr(e=()=>{}){return queueMicrotask(()=>{Rr||setTimeout(()=>{fr()})}),new Promise(t=>{dr.push(()=>{e(),t()})})}function fr(){for(Rr=!1;dr.length;)dr.shift()()}function pu(){Rr=!0}function Br(e,t){return Array.isArray(t)?Eo(e,t.join(" ")):typeof t=="object"&&t!==null?mu(e,t):typeof t=="function"?Br(e,t()):Eo(e,t)}function Eo(e,t){let n=r=>r.split(" ").filter(o=>!e.classList.contains(o)).filter(Boolean),i=r=>(e.classList.add(...r),()=>{e.classList.remove(...r)});return t=t===!0?t="":t||"",i(n(t))}function mu(e,t){let n=l=>l.split(" ").filter(Boolean),i=Object.entries(t).flatMap(([l,d])=>d?n(l):!1).filter(Boolean),r=Object.entries(t).flatMap(([l,d])=>d?!1:n(l)).filter(Boolean),o=[],s=[];return r.forEach(l=>{e.classList.contains(l)&&(e.classList.remove(l),s.push(l))}),i.forEach(l=>{e.classList.contains(l)||(e.classList.add(l),o.push(l))}),()=>{s.forEach(l=>e.classList.add(l)),o.forEach(l=>e.classList.remove(l))}}function pi(e,t){return typeof t=="object"&&t!==null?gu(e,t):vu(e,t)}function gu(e,t){let n={};return Object.entries(t).forEach(([i,r])=>{n[i]=e.style[i],i.startsWith("--")||(i=wu(i)),e.style.setProperty(i,r)}),setTimeout(()=>{e.style.length===0&&e.removeAttribute("style")}),()=>{pi(e,n)}}function vu(e,t){let n=e.getAttribute("style",t);return e.setAttribute("style",t),()=>{e.setAttribute("style",n||"")}}function wu(e){return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function hr(e,t=()=>{}){let n=!1;return function(){n?t.apply(this,arguments):(n=!0,e.apply(this,arguments))}}pe("transition",(e,{value:t,modifiers:n,expression:i},{evaluate:r})=>{typeof i=="function"&&(i=r(i)),i!==!1&&(!i||typeof i=="boolean"?yu(e,n,t):bu(e,i,t))});function bu(e,t,n){Rs(e,Br,""),{enter:r=>{e._x_transition.enter.during=r},"enter-start":r=>{e._x_transition.enter.start=r},"enter-end":r=>{e._x_transition.enter.end=r},leave:r=>{e._x_transition.leave.during=r},"leave-start":r=>{e._x_transition.leave.start=r},"leave-end":r=>{e._x_transition.leave.end=r}}[n](t)}function yu(e,t,n){Rs(e,pi);let i=!t.includes("in")&&!t.includes("out")&&!n,r=i||t.includes("in")||["enter"].includes(n),o=i||t.includes("out")||["leave"].includes(n);t.includes("in")&&!i&&(t=t.filter((A,j)=>j<t.indexOf("out"))),t.includes("out")&&!i&&(t=t.filter((A,j)=>j>t.indexOf("out")));let s=!t.includes("opacity")&&!t.includes("scale"),l=s||t.includes("opacity"),d=s||t.includes("scale"),f=l?0:1,p=d?sn(t,"scale",95)/100:1,w=sn(t,"delay",0)/1e3,m=sn(t,"origin","center"),v="opacity, transform",b=sn(t,"duration",150)/1e3,T=sn(t,"duration",75)/1e3,_="cubic-bezier(0.4, 0.0, 0.2, 1)";r&&(e._x_transition.enter.during={transformOrigin:m,transitionDelay:`${w}s`,transitionProperty:v,transitionDuration:`${b}s`,transitionTimingFunction:_},e._x_transition.enter.start={opacity:f,transform:`scale(${p})`},e._x_transition.enter.end={opacity:1,transform:"scale(1)"}),o&&(e._x_transition.leave.during={transformOrigin:m,transitionDelay:`${w}s`,transitionProperty:v,transitionDuration:`${T}s`,transitionTimingFunction:_},e._x_transition.leave.start={opacity:1,transform:"scale(1)"},e._x_transition.leave.end={opacity:f,transform:`scale(${p})`})}function Rs(e,t,n={}){e._x_transition||(e._x_transition={enter:{during:n,start:n,end:n},leave:{during:n,start:n,end:n},in(i=()=>{},r=()=>{}){pr(e,t,{during:this.enter.during,start:this.enter.start,end:this.enter.end},i,r)},out(i=()=>{},r=()=>{}){pr(e,t,{during:this.leave.during,start:this.leave.start,end:this.leave.end},i,r)}})}window.Element.prototype._x_toggleAndCascadeWithTransitions=function(e,t,n,i){const r=document.visibilityState==="visible"?requestAnimationFrame:setTimeout;let o=()=>r(n);if(t){e._x_transition&&(e._x_transition.enter||e._x_transition.leave)?e._x_transition.enter&&(Object.entries(e._x_transition.enter.during).length||Object.entries(e._x_transition.enter.start).length||Object.entries(e._x_transition.enter.end).length)?e._x_transition.in(n):o():e._x_transition?e._x_transition.in(n):o();return}e._x_hidePromise=e._x_transition?new Promise((s,l)=>{e._x_transition.out(()=>{},()=>s(i)),e._x_transitioning.beforeCancel(()=>l({isFromCancelledTransition:!0}))}):Promise.resolve(i),queueMicrotask(()=>{let s=Hs(e);s?(s._x_hideChildren||(s._x_hideChildren=[]),s._x_hideChildren.push(e)):r(()=>{let l=d=>{let f=Promise.all([d._x_hidePromise,...(d._x_hideChildren||[]).map(l)]).then(([p])=>p());return delete d._x_hidePromise,delete d._x_hideChildren,f};l(e).catch(d=>{if(!d.isFromCancelledTransition)throw d})})})};function Hs(e){let t=e.parentNode;if(t)return t._x_hidePromise?t:Hs(t)}function pr(e,t,{during:n,start:i,end:r}={},o=()=>{},s=()=>{}){if(e._x_transitioning&&e._x_transitioning.cancel(),Object.keys(n).length===0&&Object.keys(i).length===0&&Object.keys(r).length===0){o(),s();return}let l,d,f;_u(e,{start(){l=t(e,i)},during(){d=t(e,n)},before:o,end(){l(),f=t(e,r)},after:s,cleanup(){d(),f()}})}function _u(e,t){let n,i,r,o=hr(()=>{we(()=>{n=!0,i||t.before(),r||(t.end(),fr()),t.after(),e.isConnected&&t.cleanup(),delete e._x_transitioning})});e._x_transitioning={beforeCancels:[],beforeCancel(s){this.beforeCancels.push(s)},cancel:hr(function(){for(;this.beforeCancels.length;)this.beforeCancels.shift()();o()}),finish:o},we(()=>{t.start(),t.during()}),pu(),requestAnimationFrame(()=>{if(n)return;let s=Number(getComputedStyle(e).transitionDuration.replace(/,.*/,"").replace("s",""))*1e3,l=Number(getComputedStyle(e).transitionDelay.replace(/,.*/,"").replace("s",""))*1e3;s===0&&(s=Number(getComputedStyle(e).animationDuration.replace("s",""))*1e3),we(()=>{t.before()}),i=!0,requestAnimationFrame(()=>{n||(we(()=>{t.end()}),fr(),setTimeout(e._x_transitioning.finish,s+l),r=!0)})})}function sn(e,t,n){if(e.indexOf(t)===-1)return n;const i=e[e.indexOf(t)+1];if(!i||t==="scale"&&isNaN(i))return n;if(t==="duration"||t==="delay"){let r=i.match(/([0-9]+)ms/);if(r)return r[1]}return t==="origin"&&["top","right","left","center","bottom"].includes(e[e.indexOf(t)+2])?[i,e[e.indexOf(t)+2]].join(" "):i}var gn=!1;function Cn(e,t=()=>{}){return(...n)=>gn?t(...n):e(...n)}function xu(e){return(...t)=>gn&&e(...t)}function Eu(e,t){t._x_dataStack||(t._x_dataStack=e._x_dataStack),gn=!0,Su(()=>{Cu(t)}),gn=!1}function Cu(e){let t=!1;gt(e,(i,r)=>{pt(i,(o,s)=>{if(t&&fu(o))return s();t=!0,r(o,s)})})}function Su(e){let t=Xt;_o((n,i)=>{let r=t(n);return _n(r),()=>{}}),e(),_o(t)}function Bs(e,t,n,i=[]){switch(e._x_bindings||(e._x_bindings=Yt({})),e._x_bindings[t]=n,t=i.includes("camel")?Mu(t):t,t){case"value":Ou(e,n);break;case"style":Tu(e,n);break;case"class":Au(e,n);break;case"selected":case"checked":Lu(e,t,n);break;default:Fs(e,t,n);break}}function Ou(e,t){if(e.type==="radio")e.attributes.value===void 0&&(e.value=t),window.fromModel&&(e.checked=Co(e.value,t));else if(e.type==="checkbox")Number.isInteger(t)?e.value=t:!Number.isInteger(t)&&!Array.isArray(t)&&typeof t!="boolean"&&![null,void 0].includes(t)?e.value=String(t):Array.isArray(t)?e.checked=t.some(n=>Co(n,e.value)):e.checked=!!t;else if(e.tagName==="SELECT")Du(e,t);else{if(e.value===t)return;e.value=t}}function Au(e,t){e._x_undoAddedClasses&&e._x_undoAddedClasses(),e._x_undoAddedClasses=Br(e,t)}function Tu(e,t){e._x_undoAddedStyles&&e._x_undoAddedStyles(),e._x_undoAddedStyles=pi(e,t)}function Lu(e,t,n){Fs(e,t,n),ku(e,t,n)}function Fs(e,t,n){[null,void 0,!1].includes(n)&&Pu(t)?e.removeAttribute(t):(zs(t)&&(n=t),Nu(e,t,n))}function Nu(e,t,n){e.getAttribute(t)!=n&&e.setAttribute(t,n)}function ku(e,t,n){e[t]!==n&&(e[t]=n)}function Du(e,t){const n=[].concat(t).map(i=>i+"");Array.from(e.options).forEach(i=>{i.selected=n.includes(i.value)})}function Mu(e){return e.toLowerCase().replace(/-(\w)/g,(t,n)=>n.toUpperCase())}function Co(e,t){return e==t}function zs(e){return["disabled","checked","required","readonly","hidden","open","selected","autofocus","itemscope","multiple","novalidate","allowfullscreen","allowpaymentrequest","formnovalidate","autoplay","controls","loop","muted","playsinline","default","ismap","reversed","async","defer","nomodule"].includes(e)}function Pu(e){return!["aria-pressed","aria-checked","aria-expanded","aria-selected"].includes(e)}function Iu(e,t,n){return e._x_bindings&&e._x_bindings[t]!==void 0?e._x_bindings[t]:js(e,t,n)}function Ru(e,t,n,i=!0){if(e._x_bindings&&e._x_bindings[t]!==void 0)return e._x_bindings[t];if(e._x_inlineBindings&&e._x_inlineBindings[t]!==void 0){let r=e._x_inlineBindings[t];return r.extract=i,vs(()=>Nt(e,r.expression))}return js(e,t,n)}function js(e,t,n){let i=e.getAttribute(t);return i===null?typeof n=="function"?n():n:i===""?!0:zs(t)?!![t,"true"].includes(i):i}function qs(e,t){var n;return function(){var i=this,r=arguments,o=function(){n=null,e.apply(i,r)};clearTimeout(n),n=setTimeout(o,t)}}function $s(e,t){let n;return function(){let i=this,r=arguments;n||(e.apply(i,r),n=!0,setTimeout(()=>n=!1,t))}}function Hu(e){(Array.isArray(e)?e:[e]).forEach(n=>n(Sn))}var St={},So=!1;function Bu(e,t){if(So||(St=Yt(St),So=!0),t===void 0)return St[e];St[e]=t,typeof t=="object"&&t!==null&&t.hasOwnProperty("init")&&typeof t.init=="function"&&St[e].init(),ps(St[e])}function Fu(){return St}var Ws={};function zu(e,t){let n=typeof t!="function"?()=>t:t;e instanceof Element?Us(e,n()):Ws[e]=n}function ju(e){return Object.entries(Ws).forEach(([t,n])=>{Object.defineProperty(e,t,{get(){return(...i)=>n(...i)}})}),e}function Us(e,t,n){let i=[];for(;i.length;)i.pop()();let r=Object.entries(t).map(([s,l])=>({name:s,value:l})),o=ys(r);r=r.map(s=>o.find(l=>l.name===s.name)?{name:`x-bind:${s.name}`,value:`"${s.value}"`}:s),Mr(e,r,n).map(s=>{i.push(s.runCleanups),s()})}var Vs={};function qu(e,t){Vs[e]=t}function $u(e,t){return Object.entries(Vs).forEach(([n,i])=>{Object.defineProperty(e,n,{get(){return(...r)=>i.bind(t)(...r)},enumerable:!1})}),e}var Wu={get reactive(){return Yt},get release(){return _n},get effect(){return Xt},get raw(){return ss},version:"3.12.3",flushAndStopDeferringMutations:Qc,dontAutoEvaluateFunctions:vs,disableEffectScheduling:Wc,startObservingMutations:Lr,stopObservingMutations:fs,setReactivityEngine:Uc,closestDataStack:$t,skipDuringClone:Cn,onlyDuringClone:xu,addRootSelector:Ds,addInitSelector:Ms,addScopeToNode:xn,deferMutations:Zc,mapAttributes:Pr,evaluateLater:Ne,interceptInit:hu,setEvaluator:nu,mergeProxies:En,extractProp:Ru,findClosest:hi,closestRoot:fi,destroyTree:Is,interceptor:ms,transition:pr,setStyles:pi,mutateDom:we,directive:pe,throttle:$s,debounce:qs,evaluate:Nt,initTree:gt,nextTick:Hr,prefixed:Kt,prefix:su,plugin:Hu,magic:je,store:Bu,start:du,clone:Eu,bound:Iu,$data:hs,walk:pt,data:qu,bind:zu},Sn=Wu;function Uu(e,t){const n=Object.create(null),i=e.split(",");for(let r=0;r<i.length;r++)n[i[r]]=!0;return t?r=>!!n[r.toLowerCase()]:r=>!!n[r]}var Vu=Object.freeze({}),Ys=Object.assign,Yu=Object.prototype.hasOwnProperty,mi=(e,t)=>Yu.call(e,t),kt=Array.isArray,hn=e=>Xs(e)==="[object Map]",Xu=e=>typeof e=="string",Fr=e=>typeof e=="symbol",gi=e=>e!==null&&typeof e=="object",Ku=Object.prototype.toString,Xs=e=>Ku.call(e),Ks=e=>Xs(e).slice(8,-1),zr=e=>Xu(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Ju=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Gu=Ju(e=>e.charAt(0).toUpperCase()+e.slice(1)),Js=(e,t)=>e!==t&&(e===e||t===t),mr=new WeakMap,an=[],We,Dt=Symbol("iterate"),gr=Symbol("Map key iterate");function Zu(e){return e&&e._isEffect===!0}function Qu(e,t=Vu){Zu(e)&&(e=e.raw);const n=nd(e,t);return t.lazy||n(),n}function ed(e){e.active&&(Gs(e),e.options.onStop&&e.options.onStop(),e.active=!1)}var td=0;function nd(e,t){const n=function(){if(!n.active)return e();if(!an.includes(n)){Gs(n);try{return rd(),an.push(n),We=n,e()}finally{an.pop(),Zs(),We=an[an.length-1]}}};return n.id=td++,n.allowRecurse=!!t.allowRecurse,n._isEffect=!0,n.active=!0,n.raw=e,n.deps=[],n.options=t,n}function Gs(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}var Wt=!0,jr=[];function id(){jr.push(Wt),Wt=!1}function rd(){jr.push(Wt),Wt=!0}function Zs(){const e=jr.pop();Wt=e===void 0?!0:e}function ze(e,t,n){if(!Wt||We===void 0)return;let i=mr.get(e);i||mr.set(e,i=new Map);let r=i.get(n);r||i.set(n,r=new Set),r.has(We)||(r.add(We),We.deps.push(r),We.options.onTrack&&We.options.onTrack({effect:We,target:e,type:t,key:n}))}function vt(e,t,n,i,r,o){const s=mr.get(e);if(!s)return;const l=new Set,d=p=>{p&&p.forEach(w=>{(w!==We||w.allowRecurse)&&l.add(w)})};if(t==="clear")s.forEach(d);else if(n==="length"&&kt(e))s.forEach((p,w)=>{(w==="length"||w>=i)&&d(p)});else switch(n!==void 0&&d(s.get(n)),t){case"add":kt(e)?zr(n)&&d(s.get("length")):(d(s.get(Dt)),hn(e)&&d(s.get(gr)));break;case"delete":kt(e)||(d(s.get(Dt)),hn(e)&&d(s.get(gr)));break;case"set":hn(e)&&d(s.get(Dt));break}const f=p=>{p.options.onTrigger&&p.options.onTrigger({effect:p,target:e,key:n,type:t,newValue:i,oldValue:r,oldTarget:o}),p.options.scheduler?p.options.scheduler(p):p()};l.forEach(f)}var od=Uu("__proto__,__v_isRef,__isVue"),Qs=new Set(Object.getOwnPropertyNames(Symbol).map(e=>Symbol[e]).filter(Fr)),sd=vi(),ad=vi(!1,!0),ld=vi(!0),cd=vi(!0,!0),ti={};["includes","indexOf","lastIndexOf"].forEach(e=>{const t=Array.prototype[e];ti[e]=function(...n){const i=ae(this);for(let o=0,s=this.length;o<s;o++)ze(i,"get",o+"");const r=t.apply(i,n);return r===-1||r===!1?t.apply(i,n.map(ae)):r}});["push","pop","shift","unshift","splice"].forEach(e=>{const t=Array.prototype[e];ti[e]=function(...n){id();const i=t.apply(this,n);return Zs(),i}});function vi(e=!1,t=!1){return function(i,r,o){if(r==="__v_isReactive")return!e;if(r==="__v_isReadonly")return e;if(r==="__v_raw"&&o===(e?t?bd:pa:t?wd:ha).get(i))return i;const s=kt(i);if(!e&&s&&mi(ti,r))return Reflect.get(ti,r,o);const l=Reflect.get(i,r,o);return(Fr(r)?Qs.has(r):od(r))||(e||ze(i,"get",r),t)?l:vr(l)?!s||!zr(r)?l.value:l:gi(l)?e?ma(l):Ur(l):l}}var ud=ea(),dd=ea(!0);function ea(e=!1){return function(n,i,r,o){let s=n[i];if(!e&&(r=ae(r),s=ae(s),!kt(n)&&vr(s)&&!vr(r)))return s.value=r,!0;const l=kt(n)&&zr(i)?Number(i)<n.length:mi(n,i),d=Reflect.set(n,i,r,o);return n===ae(o)&&(l?Js(r,s)&&vt(n,"set",i,r,s):vt(n,"add",i,r)),d}}function fd(e,t){const n=mi(e,t),i=e[t],r=Reflect.deleteProperty(e,t);return r&&n&&vt(e,"delete",t,void 0,i),r}function hd(e,t){const n=Reflect.has(e,t);return(!Fr(t)||!Qs.has(t))&&ze(e,"has",t),n}function pd(e){return ze(e,"iterate",kt(e)?"length":Dt),Reflect.ownKeys(e)}var ta={get:sd,set:ud,deleteProperty:fd,has:hd,ownKeys:pd},na={get:ld,set(e,t){return console.warn(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0},deleteProperty(e,t){return console.warn(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0}};Ys({},ta,{get:ad,set:dd});Ys({},na,{get:cd});var qr=e=>gi(e)?Ur(e):e,$r=e=>gi(e)?ma(e):e,Wr=e=>e,wi=e=>Reflect.getPrototypeOf(e);function bi(e,t,n=!1,i=!1){e=e.__v_raw;const r=ae(e),o=ae(t);t!==o&&!n&&ze(r,"get",t),!n&&ze(r,"get",o);const{has:s}=wi(r),l=i?Wr:n?$r:qr;if(s.call(r,t))return l(e.get(t));if(s.call(r,o))return l(e.get(o));e!==r&&e.get(t)}function yi(e,t=!1){const n=this.__v_raw,i=ae(n),r=ae(e);return e!==r&&!t&&ze(i,"has",e),!t&&ze(i,"has",r),e===r?n.has(e):n.has(e)||n.has(r)}function _i(e,t=!1){return e=e.__v_raw,!t&&ze(ae(e),"iterate",Dt),Reflect.get(e,"size",e)}function ia(e){e=ae(e);const t=ae(this);return wi(t).has.call(t,e)||(t.add(e),vt(t,"add",e,e)),this}function ra(e,t){t=ae(t);const n=ae(this),{has:i,get:r}=wi(n);let o=i.call(n,e);o?fa(n,i,e):(e=ae(e),o=i.call(n,e));const s=r.call(n,e);return n.set(e,t),o?Js(t,s)&&vt(n,"set",e,t,s):vt(n,"add",e,t),this}function oa(e){const t=ae(this),{has:n,get:i}=wi(t);let r=n.call(t,e);r?fa(t,n,e):(e=ae(e),r=n.call(t,e));const o=i?i.call(t,e):void 0,s=t.delete(e);return r&&vt(t,"delete",e,void 0,o),s}function sa(){const e=ae(this),t=e.size!==0,n=hn(e)?new Map(e):new Set(e),i=e.clear();return t&&vt(e,"clear",void 0,void 0,n),i}function xi(e,t){return function(i,r){const o=this,s=o.__v_raw,l=ae(s),d=t?Wr:e?$r:qr;return!e&&ze(l,"iterate",Dt),s.forEach((f,p)=>i.call(r,d(f),d(p),o))}}function $n(e,t,n){return function(...i){const r=this.__v_raw,o=ae(r),s=hn(o),l=e==="entries"||e===Symbol.iterator&&s,d=e==="keys"&&s,f=r[e](...i),p=n?Wr:t?$r:qr;return!t&&ze(o,"iterate",d?gr:Dt),{next(){const{value:w,done:m}=f.next();return m?{value:w,done:m}:{value:l?[p(w[0]),p(w[1])]:p(w),done:m}},[Symbol.iterator](){return this}}}}function ht(e){return function(...t){{const n=t[0]?`on key "${t[0]}" `:"";console.warn(`${Gu(e)} operation ${n}failed: target is readonly.`,ae(this))}return e==="delete"?!1:this}}var aa={get(e){return bi(this,e)},get size(){return _i(this)},has:yi,add:ia,set:ra,delete:oa,clear:sa,forEach:xi(!1,!1)},la={get(e){return bi(this,e,!1,!0)},get size(){return _i(this)},has:yi,add:ia,set:ra,delete:oa,clear:sa,forEach:xi(!1,!0)},ca={get(e){return bi(this,e,!0)},get size(){return _i(this,!0)},has(e){return yi.call(this,e,!0)},add:ht("add"),set:ht("set"),delete:ht("delete"),clear:ht("clear"),forEach:xi(!0,!1)},ua={get(e){return bi(this,e,!0,!0)},get size(){return _i(this,!0)},has(e){return yi.call(this,e,!0)},add:ht("add"),set:ht("set"),delete:ht("delete"),clear:ht("clear"),forEach:xi(!0,!0)},md=["keys","values","entries",Symbol.iterator];md.forEach(e=>{aa[e]=$n(e,!1,!1),ca[e]=$n(e,!0,!1),la[e]=$n(e,!1,!0),ua[e]=$n(e,!0,!0)});function da(e,t){const n=t?e?ua:la:e?ca:aa;return(i,r,o)=>r==="__v_isReactive"?!e:r==="__v_isReadonly"?e:r==="__v_raw"?i:Reflect.get(mi(n,r)&&r in i?n:i,r,o)}var gd={get:da(!1,!1)},vd={get:da(!0,!1)};function fa(e,t,n){const i=ae(n);if(i!==n&&t.call(e,i)){const r=Ks(e);console.warn(`Reactive ${r} contains both the raw and reactive versions of the same object${r==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}var ha=new WeakMap,wd=new WeakMap,pa=new WeakMap,bd=new WeakMap;function yd(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function _d(e){return e.__v_skip||!Object.isExtensible(e)?0:yd(Ks(e))}function Ur(e){return e&&e.__v_isReadonly?e:ga(e,!1,ta,gd,ha)}function ma(e){return ga(e,!0,na,vd,pa)}function ga(e,t,n,i,r){if(!gi(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&!(t&&e.__v_isReactive))return e;const o=r.get(e);if(o)return o;const s=_d(e);if(s===0)return e;const l=new Proxy(e,s===2?i:n);return r.set(e,l),l}function ae(e){return e&&ae(e.__v_raw)||e}function vr(e){return!!(e&&e.__v_isRef===!0)}je("nextTick",()=>Hr);je("dispatch",e=>fn.bind(fn,e));je("watch",(e,{evaluateLater:t,effect:n})=>(i,r)=>{let o=t(i),s=!0,l,d=n(()=>o(f=>{JSON.stringify(f),s?l=f:queueMicrotask(()=>{r(f,l),l=f}),s=!1}));e._x_effects.delete(d)});je("store",Fu);je("data",e=>hs(e));je("root",e=>fi(e));je("refs",e=>(e._x_refs_proxy||(e._x_refs_proxy=En(xd(e))),e._x_refs_proxy));function xd(e){let t=[],n=e;for(;n;)n._x_refs&&t.push(n._x_refs),n=n.parentNode;return t}var Wi={};function va(e){return Wi[e]||(Wi[e]=0),++Wi[e]}function Ed(e,t){return hi(e,n=>{if(n._x_ids&&n._x_ids[t])return!0})}function Cd(e,t){e._x_ids||(e._x_ids={}),e._x_ids[t]||(e._x_ids[t]=va(t))}je("id",e=>(t,n=null)=>{let i=Ed(e,t),r=i?i._x_ids[t]:va(t);return n?`${t}-${r}-${n}`:`${t}-${r}`});je("el",e=>e);wa("Focus","focus","focus");wa("Persist","persist","persist");function wa(e,t,n){je(t,i=>mt(`You can't use [$${directiveName}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${n}`,i))}function Sd({get:e,set:t},{get:n,set:i}){let r=!0,o,s,l=Xt(()=>{let d,f;r?(d=e(),i(d),f=n(),r=!1):(d=e(),f=n(),s=JSON.stringify(d),JSON.stringify(f),s!==o?(f=n(),i(d),f=d):(t(f),d=f)),o=JSON.stringify(d),JSON.stringify(f)});return()=>{_n(l)}}pe("modelable",(e,{expression:t},{effect:n,evaluateLater:i,cleanup:r})=>{let o=i(t),s=()=>{let p;return o(w=>p=w),p},l=i(`${t} = __placeholder`),d=p=>l(()=>{},{scope:{__placeholder:p}}),f=s();d(f),queueMicrotask(()=>{if(!e._x_model)return;e._x_removeModelListeners.default();let p=e._x_model.get,w=e._x_model.set,m=Sd({get(){return p()},set(v){w(v)}},{get(){return s()},set(v){d(v)}});r(m)})});var Od=document.createElement("div");pe("teleport",(e,{modifiers:t,expression:n},{cleanup:i})=>{e.tagName.toLowerCase()!=="template"&&mt("x-teleport can only be used on a <template> tag",e);let r=Cn(()=>document.querySelector(n),()=>Od)();r||mt(`Cannot find x-teleport element for selector: "${n}"`);let o=e.content.cloneNode(!0).firstElementChild;e._x_teleport=o,o._x_teleportBack=e,e._x_forwardEvents&&e._x_forwardEvents.forEach(s=>{o.addEventListener(s,l=>{l.stopPropagation(),e.dispatchEvent(new l.constructor(l.type,l))})}),xn(o,{},e),we(()=>{t.includes("prepend")?r.parentNode.insertBefore(o,r):t.includes("append")?r.parentNode.insertBefore(o,r.nextSibling):r.appendChild(o),gt(o),o._x_ignore=!0}),i(()=>o.remove())});var ba=()=>{};ba.inline=(e,{modifiers:t},{cleanup:n})=>{t.includes("self")?e._x_ignoreSelf=!0:e._x_ignore=!0,n(()=>{t.includes("self")?delete e._x_ignoreSelf:delete e._x_ignore})};pe("ignore",ba);pe("effect",(e,{expression:t},{effect:n})=>n(Ne(e,t)));function wr(e,t,n,i){let r=e,o=d=>i(d),s={},l=(d,f)=>p=>f(d,p);if(n.includes("dot")&&(t=Ad(t)),n.includes("camel")&&(t=Td(t)),n.includes("passive")&&(s.passive=!0),n.includes("capture")&&(s.capture=!0),n.includes("window")&&(r=window),n.includes("document")&&(r=document),n.includes("debounce")){let d=n[n.indexOf("debounce")+1]||"invalid-wait",f=ni(d.split("ms")[0])?Number(d.split("ms")[0]):250;o=qs(o,f)}if(n.includes("throttle")){let d=n[n.indexOf("throttle")+1]||"invalid-wait",f=ni(d.split("ms")[0])?Number(d.split("ms")[0]):250;o=$s(o,f)}return n.includes("prevent")&&(o=l(o,(d,f)=>{f.preventDefault(),d(f)})),n.includes("stop")&&(o=l(o,(d,f)=>{f.stopPropagation(),d(f)})),n.includes("self")&&(o=l(o,(d,f)=>{f.target===e&&d(f)})),(n.includes("away")||n.includes("outside"))&&(r=document,o=l(o,(d,f)=>{e.contains(f.target)||f.target.isConnected!==!1&&(e.offsetWidth<1&&e.offsetHeight<1||e._x_isShown!==!1&&d(f))})),n.includes("once")&&(o=l(o,(d,f)=>{d(f),r.removeEventListener(t,o,s)})),o=l(o,(d,f)=>{Nd(t)&&kd(f,n)||d(f)}),r.addEventListener(t,o,s),()=>{r.removeEventListener(t,o,s)}}function Ad(e){return e.replace(/-/g,".")}function Td(e){return e.toLowerCase().replace(/-(\w)/g,(t,n)=>n.toUpperCase())}function ni(e){return!Array.isArray(e)&&!isNaN(e)}function Ld(e){return[" ","_"].includes(e)?e:e.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[_\s]/,"-").toLowerCase()}function Nd(e){return["keydown","keyup"].includes(e)}function kd(e,t){let n=t.filter(o=>!["window","document","prevent","stop","once","capture"].includes(o));if(n.includes("debounce")){let o=n.indexOf("debounce");n.splice(o,ni((n[o+1]||"invalid-wait").split("ms")[0])?2:1)}if(n.includes("throttle")){let o=n.indexOf("throttle");n.splice(o,ni((n[o+1]||"invalid-wait").split("ms")[0])?2:1)}if(n.length===0||n.length===1&&Oo(e.key).includes(n[0]))return!1;const r=["ctrl","shift","alt","meta","cmd","super"].filter(o=>n.includes(o));return n=n.filter(o=>!r.includes(o)),!(r.length>0&&r.filter(s=>((s==="cmd"||s==="super")&&(s="meta"),e[`${s}Key`])).length===r.length&&Oo(e.key).includes(n[0]))}function Oo(e){if(!e)return[];e=Ld(e);let t={ctrl:"control",slash:"/",space:" ",spacebar:" ",cmd:"meta",esc:"escape",up:"arrow-up",down:"arrow-down",left:"arrow-left",right:"arrow-right",period:".",equal:"=",minus:"-",underscore:"_"};return t[e]=e,Object.keys(t).map(n=>{if(t[n]===e)return n}).filter(n=>n)}pe("model",(e,{modifiers:t,expression:n},{effect:i,cleanup:r})=>{let o=e;t.includes("parent")&&(o=e.parentNode);let s=Ne(o,n),l;typeof n=="string"?l=Ne(o,`${n} = __placeholder`):typeof n=="function"&&typeof n()=="string"?l=Ne(o,`${n()} = __placeholder`):l=()=>{};let d=()=>{let m;return s(v=>m=v),Ao(m)?m.get():m},f=m=>{let v;s(b=>v=b),Ao(v)?v.set(m):l(()=>{},{scope:{__placeholder:m}})};typeof n=="string"&&e.type==="radio"&&we(()=>{e.hasAttribute("name")||e.setAttribute("name",n)});var p=e.tagName.toLowerCase()==="select"||["checkbox","radio"].includes(e.type)||t.includes("lazy")?"change":"input";let w=gn?()=>{}:wr(e,p,t,m=>{f(Dd(e,t,m,d()))});if(t.includes("fill")&&[null,""].includes(d())&&e.dispatchEvent(new Event(p,{})),e._x_removeModelListeners||(e._x_removeModelListeners={}),e._x_removeModelListeners.default=w,r(()=>e._x_removeModelListeners.default()),e.form){let m=wr(e.form,"reset",[],v=>{Hr(()=>e._x_model&&e._x_model.set(e.value))});r(()=>m())}e._x_model={get(){return d()},set(m){f(m)}},e._x_forceModelUpdate=m=>{m=m===void 0?d():m,m===void 0&&typeof n=="string"&&n.match(/\./)&&(m=""),window.fromModel=!0,we(()=>Bs(e,"value",m)),delete window.fromModel},i(()=>{let m=d();t.includes("unintrusive")&&document.activeElement.isSameNode(e)||e._x_forceModelUpdate(m)})});function Dd(e,t,n,i){return we(()=>{if(n instanceof CustomEvent&&n.detail!==void 0)return n.detail??n.target.value;if(e.type==="checkbox")if(Array.isArray(i)){let r=t.includes("number")?Ui(n.target.value):n.target.value;return n.target.checked?i.concat([r]):i.filter(o=>!Md(o,r))}else return n.target.checked;else{if(e.tagName.toLowerCase()==="select"&&e.multiple)return t.includes("number")?Array.from(n.target.selectedOptions).map(r=>{let o=r.value||r.text;return Ui(o)}):Array.from(n.target.selectedOptions).map(r=>r.value||r.text);{let r=n.target.value;return t.includes("number")?Ui(r):t.includes("trim")?r.trim():r}}})}function Ui(e){let t=e?parseFloat(e):null;return Pd(t)?t:e}function Md(e,t){return e==t}function Pd(e){return!Array.isArray(e)&&!isNaN(e)}function Ao(e){return e!==null&&typeof e=="object"&&typeof e.get=="function"&&typeof e.set=="function"}pe("cloak",e=>queueMicrotask(()=>we(()=>e.removeAttribute(Kt("cloak")))));Ms(()=>`[${Kt("init")}]`);pe("init",Cn((e,{expression:t},{evaluate:n})=>typeof t=="string"?!!t.trim()&&n(t,{},!1):n(t,{},!1)));pe("text",(e,{expression:t},{effect:n,evaluateLater:i})=>{let r=i(t);n(()=>{r(o=>{we(()=>{e.textContent=o})})})});pe("html",(e,{expression:t},{effect:n,evaluateLater:i})=>{let r=i(t);n(()=>{r(o=>{we(()=>{e.innerHTML=o,e._x_ignoreSelf=!0,gt(e),delete e._x_ignoreSelf})})})});Pr(Es(":",Cs(Kt("bind:"))));var ya=(e,{value:t,modifiers:n,expression:i,original:r},{effect:o})=>{if(!t){let l={};ju(l),Ne(e,i)(f=>{Us(e,f,r)},{scope:l});return}if(t==="key")return Id(e,i);if(e._x_inlineBindings&&e._x_inlineBindings[t]&&e._x_inlineBindings[t].extract)return;let s=Ne(e,i);o(()=>s(l=>{l===void 0&&typeof i=="string"&&i.match(/\./)&&(l=""),we(()=>Bs(e,t,l,n))}))};ya.inline=(e,{value:t,modifiers:n,expression:i})=>{t&&(e._x_inlineBindings||(e._x_inlineBindings={}),e._x_inlineBindings[t]={expression:i,extract:!1})};pe("bind",ya);function Id(e,t){e._x_keyExpression=t}Ds(()=>`[${Kt("data")}]`);pe("data",Cn((e,{expression:t},{cleanup:n})=>{t=t===""?"{}":t;let i={};ar(i,e);let r={};$u(r,i);let o=Nt(e,t,{scope:r});(o===void 0||o===!0)&&(o={}),ar(o,e);let s=Yt(o);ps(s);let l=xn(e,s);s.init&&Nt(e,s.init),n(()=>{s.destroy&&Nt(e,s.destroy),l()})}));pe("show",(e,{modifiers:t,expression:n},{effect:i})=>{let r=Ne(e,n);e._x_doHide||(e._x_doHide=()=>{we(()=>{e.style.setProperty("display","none",t.includes("important")?"important":void 0)})}),e._x_doShow||(e._x_doShow=()=>{we(()=>{e.style.length===1&&e.style.display==="none"?e.removeAttribute("style"):e.style.removeProperty("display")})});let o=()=>{e._x_doHide(),e._x_isShown=!1},s=()=>{e._x_doShow(),e._x_isShown=!0},l=()=>setTimeout(s),d=hr(w=>w?s():o(),w=>{typeof e._x_toggleAndCascadeWithTransitions=="function"?e._x_toggleAndCascadeWithTransitions(e,w,s,o):w?l():o()}),f,p=!0;i(()=>r(w=>{!p&&w===f||(t.includes("immediate")&&(w?l():o()),d(w),f=w,p=!1)}))});pe("for",(e,{expression:t},{effect:n,cleanup:i})=>{let r=Hd(t),o=Ne(e,r.items),s=Ne(e,e._x_keyExpression||"index");e._x_prevKeys=[],e._x_lookup={},n(()=>Rd(e,r,o,s)),i(()=>{Object.values(e._x_lookup).forEach(l=>l.remove()),delete e._x_prevKeys,delete e._x_lookup})});function Rd(e,t,n,i){let r=s=>typeof s=="object"&&!Array.isArray(s),o=e;n(s=>{Bd(s)&&s>=0&&(s=Array.from(Array(s).keys(),_=>_+1)),s===void 0&&(s=[]);let l=e._x_lookup,d=e._x_prevKeys,f=[],p=[];if(r(s))s=Object.entries(s).map(([_,A])=>{let j=To(t,A,_,s);i(J=>p.push(J),{scope:{index:_,...j}}),f.push(j)});else for(let _=0;_<s.length;_++){let A=To(t,s[_],_,s);i(j=>p.push(j),{scope:{index:_,...A}}),f.push(A)}let w=[],m=[],v=[],b=[];for(let _=0;_<d.length;_++){let A=d[_];p.indexOf(A)===-1&&v.push(A)}d=d.filter(_=>!v.includes(_));let T="template";for(let _=0;_<p.length;_++){let A=p[_],j=d.indexOf(A);if(j===-1)d.splice(_,0,A),w.push([T,_]);else if(j!==_){let J=d.splice(_,1)[0],X=d.splice(j-1,1)[0];d.splice(_,0,X),d.splice(j,0,J),m.push([J,X])}else b.push(A);T=A}for(let _=0;_<v.length;_++){let A=v[_];l[A]._x_effects&&l[A]._x_effects.forEach(os),l[A].remove(),l[A]=null,delete l[A]}for(let _=0;_<m.length;_++){let[A,j]=m[_],J=l[A],X=l[j],V=document.createElement("div");we(()=>{X||mt('x-for ":key" is undefined or invalid',o),X.after(V),J.after(X),X._x_currentIfEl&&X.after(X._x_currentIfEl),V.before(J),J._x_currentIfEl&&J.after(J._x_currentIfEl),V.remove()}),X._x_refreshXForScope(f[p.indexOf(j)])}for(let _=0;_<w.length;_++){let[A,j]=w[_],J=A==="template"?o:l[A];J._x_currentIfEl&&(J=J._x_currentIfEl);let X=f[j],V=p[j],C=document.importNode(o.content,!0).firstElementChild,S=Yt(X);xn(C,S,o),C._x_refreshXForScope=M=>{Object.entries(M).forEach(([G,Z])=>{S[G]=Z})},we(()=>{J.after(C),gt(C)}),typeof V=="object"&&mt("x-for key cannot be an object, it must be a string or an integer",o),l[V]=C}for(let _=0;_<b.length;_++)l[b[_]]._x_refreshXForScope(f[p.indexOf(b[_])]);o._x_prevKeys=p})}function Hd(e){let t=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,n=/^\s*\(|\)\s*$/g,i=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,r=e.match(i);if(!r)return;let o={};o.items=r[2].trim();let s=r[1].replace(n,"").trim(),l=s.match(t);return l?(o.item=s.replace(t,"").trim(),o.index=l[1].trim(),l[2]&&(o.collection=l[2].trim())):o.item=s,o}function To(e,t,n,i){let r={};return/^\[.*\]$/.test(e.item)&&Array.isArray(t)?e.item.replace("[","").replace("]","").split(",").map(s=>s.trim()).forEach((s,l)=>{r[s]=t[l]}):/^\{.*\}$/.test(e.item)&&!Array.isArray(t)&&typeof t=="object"?e.item.replace("{","").replace("}","").split(",").map(s=>s.trim()).forEach(s=>{r[s]=t[s]}):r[e.item]=t,e.index&&(r[e.index]=n),e.collection&&(r[e.collection]=i),r}function Bd(e){return!Array.isArray(e)&&!isNaN(e)}function _a(){}_a.inline=(e,{expression:t},{cleanup:n})=>{let i=fi(e);i._x_refs||(i._x_refs={}),i._x_refs[t]=e,n(()=>delete i._x_refs[t])};pe("ref",_a);pe("if",(e,{expression:t},{effect:n,cleanup:i})=>{let r=Ne(e,t),o=()=>{if(e._x_currentIfEl)return e._x_currentIfEl;let l=e.content.cloneNode(!0).firstElementChild;return xn(l,{},e),we(()=>{e.after(l),gt(l)}),e._x_currentIfEl=l,e._x_undoIf=()=>{pt(l,d=>{d._x_effects&&d._x_effects.forEach(os)}),l.remove(),delete e._x_currentIfEl},l},s=()=>{e._x_undoIf&&(e._x_undoIf(),delete e._x_undoIf)};n(()=>r(l=>{l?o():s()})),i(()=>e._x_undoIf&&e._x_undoIf())});pe("id",(e,{expression:t},{evaluate:n})=>{n(t).forEach(r=>Cd(e,r))});Pr(Es("@",Cs(Kt("on:"))));pe("on",Cn((e,{value:t,modifiers:n,expression:i},{cleanup:r})=>{let o=i?Ne(e,i):()=>{};e.tagName.toLowerCase()==="template"&&(e._x_forwardEvents||(e._x_forwardEvents=[]),e._x_forwardEvents.includes(t)||e._x_forwardEvents.push(t));let s=wr(e,t,n,l=>{o(()=>{},{scope:{$event:l},params:[l]})});r(()=>s())}));Ei("Collapse","collapse","collapse");Ei("Intersect","intersect","intersect");Ei("Focus","trap","focus");Ei("Mask","mask","mask");function Ei(e,t,n){pe(t,i=>mt(`You can't use [x-${t}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${n}`,i))}Sn.setEvaluator(bs);Sn.setReactivityEngine({reactive:Ur,effect:Qu,release:ed,raw:ae});var Fd=Sn,Vr=Fd;/*!
* tabbable 5.2.1
* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
*/var xa=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])',"details>summary:first-of-type","details"],Lo=xa.join(","),ii=typeof Element>"u"?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector,Ea=function(t,n,i){var r=Array.prototype.slice.apply(t.querySelectorAll(Lo));return n&&ii.call(t,Lo)&&r.unshift(t),r=r.filter(i),r},zd=function(t){return t.contentEditable==="true"},Ca=function(t){var n=parseInt(t.getAttribute("tabindex"),10);return isNaN(n)?zd(t)||(t.nodeName==="AUDIO"||t.nodeName==="VIDEO"||t.nodeName==="DETAILS")&&t.getAttribute("tabindex")===null?0:t.tabIndex:n},jd=function(t,n){return t.tabIndex===n.tabIndex?t.documentOrder-n.documentOrder:t.tabIndex-n.tabIndex},Yr=function(t){return t.tagName==="INPUT"},qd=function(t){return Yr(t)&&t.type==="hidden"},$d=function(t){var n=t.tagName==="DETAILS"&&Array.prototype.slice.apply(t.children).some(function(i){return i.tagName==="SUMMARY"});return n},Wd=function(t,n){for(var i=0;i<t.length;i++)if(t[i].checked&&t[i].form===n)return t[i]},Ud=function(t){if(!t.name)return!0;var n=t.form||t.ownerDocument,i=function(l){return n.querySelectorAll('input[type="radio"][name="'+l+'"]')},r;if(typeof window<"u"&&typeof window.CSS<"u"&&typeof window.CSS.escape=="function")r=i(window.CSS.escape(t.name));else try{r=i(t.name)}catch(s){return console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s",s.message),!1}var o=Wd(r,t.form);return!o||o===t},Vd=function(t){return Yr(t)&&t.type==="radio"},Yd=function(t){return Vd(t)&&!Ud(t)},Xd=function(t,n){if(getComputedStyle(t).visibility==="hidden")return!0;var i=ii.call(t,"details>summary:first-of-type"),r=i?t.parentElement:t;if(ii.call(r,"details:not([open]) *"))return!0;if(!n||n==="full")for(;t;){if(getComputedStyle(t).display==="none")return!0;t=t.parentElement}else if(n==="non-zero-area"){var o=t.getBoundingClientRect(),s=o.width,l=o.height;return s===0&&l===0}return!1},Kd=function(t){if(Yr(t)||t.tagName==="SELECT"||t.tagName==="TEXTAREA"||t.tagName==="BUTTON")for(var n=t.parentElement;n;){if(n.tagName==="FIELDSET"&&n.disabled){for(var i=0;i<n.children.length;i++){var r=n.children.item(i);if(r.tagName==="LEGEND")return!r.contains(t)}return!0}n=n.parentElement}return!1},Xr=function(t,n){return!(n.disabled||qd(n)||Xd(n,t.displayCheck)||$d(n)||Kd(n))},Jd=function(t,n){return!(!Xr(t,n)||Yd(n)||Ca(n)<0)},Gd=function(t,n){n=n||{};var i=[],r=[],o=Ea(t,n.includeContainer,Jd.bind(null,n));o.forEach(function(l,d){var f=Ca(l);f===0?i.push(l):r.push({documentOrder:d,tabIndex:f,node:l})});var s=r.sort(jd).map(function(l){return l.node}).concat(i);return s},Zd=function(t,n){n=n||{};var i=Ea(t,n.includeContainer,Xr.bind(null,n));return i},Qd=xa.concat("iframe").join(","),Sa=function(t,n){if(n=n||{},!t)throw new Error("No node provided");return ii.call(t,Qd)===!1?!1:Xr(n,t)};/*!
* focus-trap 6.6.1
* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
*/function No(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable})),n.push.apply(n,i)}return n}function ef(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?No(Object(n),!0).forEach(function(i){tf(e,i,n[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):No(Object(n)).forEach(function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(n,i))})}return e}function tf(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ko=function(){var e=[];return{activateTrap:function(n){if(e.length>0){var i=e[e.length-1];i!==n&&i.pause()}var r=e.indexOf(n);r===-1||e.splice(r,1),e.push(n)},deactivateTrap:function(n){var i=e.indexOf(n);i!==-1&&e.splice(i,1),e.length>0&&e[e.length-1].unpause()}}}(),nf=function(t){return t.tagName&&t.tagName.toLowerCase()==="input"&&typeof t.select=="function"},rf=function(t){return t.key==="Escape"||t.key==="Esc"||t.keyCode===27},of=function(t){return t.key==="Tab"||t.keyCode===9},Do=function(t){return setTimeout(t,0)},Vi=function(t,n){var i=-1;return t.every(function(r,o){return n(r)?(i=o,!1):!0}),i},ln=function(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];return typeof t=="function"?t.apply(void 0,i):t},sf=function(t,n){var i=document,r=ef({returnFocusOnDeactivate:!0,escapeDeactivates:!0,delayInitialFocus:!0},n),o={containers:[],tabbableGroups:[],nodeFocusedBeforeActivation:null,mostRecentlyFocusedNode:null,active:!1,paused:!1,delayInitialFocusTimer:void 0},s,l=function(C,S,M){return C&&C[S]!==void 0?C[S]:r[M||S]},d=function(C){return o.containers.some(function(S){return S.contains(C)})},f=function(C){var S=r[C];if(!S)return null;var M=S;if(typeof S=="string"&&(M=i.querySelector(S),!M))throw new Error("`".concat(C,"` refers to no known node"));if(typeof S=="function"&&(M=S(),!M))throw new Error("`".concat(C,"` did not return a node"));return M},p=function(){var C;if(l({},"initialFocus")===!1)return!1;if(f("initialFocus")!==null)C=f("initialFocus");else if(d(i.activeElement))C=i.activeElement;else{var S=o.tabbableGroups[0],M=S&&S.firstTabbableNode;C=M||f("fallbackFocus")}if(!C)throw new Error("Your focus-trap needs to have at least one focusable element");return C},w=function(){if(o.tabbableGroups=o.containers.map(function(C){var S=Gd(C);if(S.length>0)return{container:C,firstTabbableNode:S[0],lastTabbableNode:S[S.length-1]}}).filter(function(C){return!!C}),o.tabbableGroups.length<=0&&!f("fallbackFocus"))throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times")},m=function V(C){if(C!==!1&&C!==i.activeElement){if(!C||!C.focus){V(p());return}C.focus({preventScroll:!!r.preventScroll}),o.mostRecentlyFocusedNode=C,nf(C)&&C.select()}},v=function(C){var S=f("setReturnFocus");return S||C},b=function(C){if(!d(C.target)){if(ln(r.clickOutsideDeactivates,C)){s.deactivate({returnFocus:r.returnFocusOnDeactivate&&!Sa(C.target)});return}ln(r.allowOutsideClick,C)||C.preventDefault()}},T=function(C){var S=d(C.target);S||C.target instanceof Document?S&&(o.mostRecentlyFocusedNode=C.target):(C.stopImmediatePropagation(),m(o.mostRecentlyFocusedNode||p()))},_=function(C){w();var S=null;if(o.tabbableGroups.length>0){var M=Vi(o.tabbableGroups,function(Y){var de=Y.container;return de.contains(C.target)});if(M<0)C.shiftKey?S=o.tabbableGroups[o.tabbableGroups.length-1].lastTabbableNode:S=o.tabbableGroups[0].firstTabbableNode;else if(C.shiftKey){var G=Vi(o.tabbableGroups,function(Y){var de=Y.firstTabbableNode;return C.target===de});if(G<0&&o.tabbableGroups[M].container===C.target&&(G=M),G>=0){var Z=G===0?o.tabbableGroups.length-1:G-1,k=o.tabbableGroups[Z];S=k.lastTabbableNode}}else{var D=Vi(o.tabbableGroups,function(Y){var de=Y.lastTabbableNode;return C.target===de});if(D<0&&o.tabbableGroups[M].container===C.target&&(D=M),D>=0){var U=D===o.tabbableGroups.length-1?0:D+1,R=o.tabbableGroups[U];S=R.firstTabbableNode}}}else S=f("fallbackFocus");S&&(C.preventDefault(),m(S))},A=function(C){if(rf(C)&&ln(r.escapeDeactivates)!==!1){C.preventDefault(),s.deactivate();return}if(of(C)){_(C);return}},j=function(C){ln(r.clickOutsideDeactivates,C)||d(C.target)||ln(r.allowOutsideClick,C)||(C.preventDefault(),C.stopImmediatePropagation())},J=function(){if(o.active)return ko.activateTrap(s),o.delayInitialFocusTimer=r.delayInitialFocus?Do(function(){m(p())}):m(p()),i.addEventListener("focusin",T,!0),i.addEventListener("mousedown",b,{capture:!0,passive:!1}),i.addEventListener("touchstart",b,{capture:!0,passive:!1}),i.addEventListener("click",j,{capture:!0,passive:!1}),i.addEventListener("keydown",A,{capture:!0,passive:!1}),s},X=function(){if(o.active)return i.removeEventListener("focusin",T,!0),i.removeEventListener("mousedown",b,!0),i.removeEventListener("touchstart",b,!0),i.removeEventListener("click",j,!0),i.removeEventListener("keydown",A,!0),s};return s={activate:function(C){if(o.active)return this;var S=l(C,"onActivate"),M=l(C,"onPostActivate"),G=l(C,"checkCanFocusTrap");G||w(),o.active=!0,o.paused=!1,o.nodeFocusedBeforeActivation=i.activeElement,S&&S();var Z=function(){G&&w(),J(),M&&M()};return G?(G(o.containers.concat()).then(Z,Z),this):(Z(),this)},deactivate:function(C){if(!o.active)return this;clearTimeout(o.delayInitialFocusTimer),o.delayInitialFocusTimer=void 0,X(),o.active=!1,o.paused=!1,ko.deactivateTrap(s);var S=l(C,"onDeactivate"),M=l(C,"onPostDeactivate"),G=l(C,"checkCanReturnFocus");S&&S();var Z=l(C,"returnFocus","returnFocusOnDeactivate"),k=function(){Do(function(){Z&&m(v(o.nodeFocusedBeforeActivation)),M&&M()})};return Z&&G?(G(v(o.nodeFocusedBeforeActivation)).then(k,k),this):(k(),this)},pause:function(){return o.paused||!o.active?this:(o.paused=!0,X(),this)},unpause:function(){return!o.paused||!o.active?this:(o.paused=!1,w(),J(),this)},updateContainerElements:function(C){var S=[].concat(C).filter(Boolean);return o.containers=S.map(function(M){return typeof M=="string"?i.querySelector(M):M}),o.active&&w(),this}},s.updateContainerElements(t),s};function af(e){let t,n;window.addEventListener("focusin",()=>{t=n,n=document.activeElement}),e.magic("focus",i=>{let r=i;return{__noscroll:!1,__wrapAround:!1,within(o){return r=o,this},withoutScrolling(){return this.__noscroll=!0,this},noscroll(){return this.__noscroll=!0,this},withWrapAround(){return this.__wrapAround=!0,this},wrap(){return this.withWrapAround()},focusable(o){return Sa(o)},previouslyFocused(){return t},lastFocused(){return t},focused(){return n},focusables(){return Array.isArray(r)?r:Zd(r,{displayCheck:"none"})},all(){return this.focusables()},isFirst(o){let s=this.all();return s[0]&&s[0].isSameNode(o)},isLast(o){let s=this.all();return s.length&&s.slice(-1)[0].isSameNode(o)},getFirst(){return this.all()[0]},getLast(){return this.all().slice(-1)[0]},getNext(){let o=this.all(),s=document.activeElement;if(o.indexOf(s)!==-1)return this.__wrapAround&&o.indexOf(s)===o.length-1?o[0]:o[o.indexOf(s)+1]},getPrevious(){let o=this.all(),s=document.activeElement;if(o.indexOf(s)!==-1)return this.__wrapAround&&o.indexOf(s)===0?o.slice(-1)[0]:o[o.indexOf(s)-1]},first(){this.focus(this.getFirst())},last(){this.focus(this.getLast())},next(){this.focus(this.getNext())},previous(){this.focus(this.getPrevious())},prev(){return this.previous()},focus(o){o&&setTimeout(()=>{o.hasAttribute("tabindex")||o.setAttribute("tabindex","0"),o.focus({preventScroll:this._noscroll})})}}}),e.directive("trap",e.skipDuringClone((i,{expression:r,modifiers:o},{effect:s,evaluateLater:l,cleanup:d})=>{let f=l(r),p=!1,w={escapeDeactivates:!1,allowOutsideClick:!0,fallbackFocus:()=>i},m=i.querySelector("[autofocus]");m&&(w.initialFocus=m);let v=sf(i,w),b=()=>{},T=()=>{};const _=()=>{b(),b=()=>{},T(),T=()=>{},v.deactivate({returnFocus:!o.includes("noreturn")})};s(()=>f(A=>{p!==A&&(A&&!p&&setTimeout(()=>{o.includes("inert")&&(b=Mo(i)),o.includes("noscroll")&&(T=lf()),v.activate()}),!A&&p&&_(),p=!!A)})),d(_)},(i,{expression:r,modifiers:o},{evaluate:s})=>{o.includes("inert")&&s(r)&&Mo(i)}))}function Mo(e){let t=[];return Oa(e,n=>{let i=n.hasAttribute("aria-hidden");n.setAttribute("aria-hidden","true"),t.push(()=>i||n.removeAttribute("aria-hidden"))}),()=>{for(;t.length;)t.pop()()}}function Oa(e,t){e.isSameNode(document.body)||!e.parentNode||Array.from(e.parentNode.children).forEach(n=>{n.isSameNode(e)?Oa(e.parentNode,t):t(n)})}function lf(){let e=document.documentElement.style.overflow,t=document.documentElement.style.paddingRight,n=window.innerWidth-document.documentElement.clientWidth;return document.documentElement.style.overflow="hidden",document.documentElement.style.paddingRight=`${n}px`,()=>{document.documentElement.style.overflow=e,document.documentElement.style.paddingRight=t}}var cf=af;class uf extends Ut{constructor(){super()}addModuleQuickSetting(t,n){if(mw.quickSettings[t]||(mw.quickSettings[t]={}),mw.quickSettings[t].mainMenu||(mw.quickSettings[t].mainMenu=[]),Array.isArray(n))for(let i=0;i<n.length;i++)mw.quickSettings[t].mainMenu.push(n[i]);else mw.quickSettings[t].mainMenu.push(n)}addLayoutQuickSetting(t){if(mw.layoutQuickSettings||(mw.layoutQuickSettings=[]),Array.isArray(t))for(let n=0;n<t.length;n++)mw.layoutQuickSettings.push(t[n]);else mw.layoutQuickSettings.push(t)}}mw.app=new Ua;mw.app.register("commands",Mc);mw.app.register("modules",Pc);mw.app.register("layouts",Ic);mw.app.register("keyboard",Rc);mw.app.register("iconPicker",Hc);mw.app.register("linkPicker",Bc);mw.app.register("colorPicker",Fc);mw.app.register("dynamicTargetMenus",uf);window.Alpine=Vr;Vr.plugin(cf);Vr.start();export{he as D,ff as E,Nc as L,Ut as M,Zn as a,Va as c,hf as g,pf as l};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
