var Lc=Object.defineProperty;var Ac=(e,t,s)=>t in e?Lc(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var pt=(e,t,s)=>(Ac(e,typeof t!="symbol"?t+"":t,s),s),Vn=(e,t,s)=>{if(!t.has(e))throw TypeError("Cannot "+s)};var G=(e,t,s)=>(Vn(e,t,"read from private field"),s?s.call(e):t.get(e)),ht=(e,t,s)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,s)},Un=(e,t,s,i)=>(Vn(e,t,"write to private field"),i?i.call(e,s):t.set(e,s),s);var kt=(e,t,s)=>(Vn(e,t,"access private method"),s);var vt;class Kt{constructor(){ht(this,vt,{})}on(t,s){G(this,vt)[t]?G(this,vt)[t].push(s):G(this,vt)[t]=[s]}off(t,s){if(G(this,vt)[t])if(typeof s=="function"){const i=G(this,vt)[t].indexOf(s);if(i===-1)return;G(this,vt)[t].splice(i,1)}else G(this,vt)[t]=[]}dispatch(t,s){G(this,vt)[t]&&G(this,vt)[t].forEach(function(i){i.call(this,s)})}emit(t,s){return this.dispatch(t,s)}}vt=new WeakMap;var bt,Fs,Fi;class Tc extends Kt{constructor(){super(...arguments);ht(this,Fs);ht(this,bt,{})}call(s,i){for(let n in G(this,bt))G(this,bt)[n][s]&&kt(this,Fs,Fi).call(this,s,G(this,bt)[n],i)}get(s){return G(this,bt)[s]}getModules(){return G(this,bt)}register(s,i){let n;typeof i=="function"?n=new i:n=i,G(this,bt)[s]=n,this[s]=n,kt(this,Fs,Fi).call(this,"onRegister",n),this.dispatch("register")}remove(s){let i;if(typeof s=="string"&&(i=s,s=this.get(s)),!i){for(let n in G(this,bt))if(G(this,bt)[n]===s){i=n;break}}delete G(this,bt)[i],delete this[i],kt(this,Fs,Fi).call(this,"onDestroy",s),this.dispatch("remove")}}bt=new WeakMap,Fs=new WeakSet,Fi=function(s,i,n){!s||!i||!i[s]||(s=i[s],s(n))};mw.require("editor.js");mw.require("css_parser.js");const Mc=function(){var e=document.querySelector("#mw-live-edit-editor"),t=function(){var a={};this.on=function(d,h){a[d]?a[d].push(h):a[d]=[h]},this.dispatch=function(d,h){a[d]&&a[d].forEach(function(g){g.call(this,h)})},this.provide=function(d){this.dispatch("change",d.map(function(h){return{label:h,value:h}}))}},s=new t;window.fontFamilyProvider=s;const i=mw.app.get("canvas").getFrame();i.contentWindow.fontFamilyProvider=s;const n=mw.Editor({document:i.contentWindow.document,executionDocument:i.contentWindow.document,actionWindow:i.contentWindow,element:e,mode:"document",notEditableClasses:["module"],regions:".edit",skin:"le2",editMode:"liveedit",scopeColor:"white",controls:[[{group:{icon:"mdi mdi-format-title",controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],smallEditorPositionX:"center",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:s});var o=document.getElementById("toolbar-undo"),r=document.getElementById("toolbar-redo");n.state.on("record",function(){r.disabled=!n.state.hasPrev,o.disabled=!n.state.hasNext}),n.state.on("change",function(){r.disabled=!n.state.hasPrev,o.disabled=!n.state.hasNext}),o&&o.addEventListener("click",function(){n.state.undo()}),r&&r.addEventListener("click",function(){n.state.redo()}),e.innerHTML="",e.appendChild(n.wrapper);var l=n.storage.get(n.settings.id+"-small-editor-pinned");typeof l>"u"&&typeof n.smallEditorApi<"u"&&n.smallEditorApi.pin(),mw.app.register("richTextEditor",n),mw.app.register("richTextEditorAPI",n.api)};var Ke;class Oc extends Kt{constructor(){super();ht(this,Ke,null)}go(s){G(this,Ke)&&G(this,Ke).ownerDocument&&G(this,Ke).contentWindow&&(G(this,Ke).src=s)}refresh(){G(this,Ke)&&G(this,Ke).ownerDocument&&G(this,Ke).contentWindow&&G(this,Ke).contentWindow.location.reload()}getFrame(){if(G(this,Ke)&&G(this,Ke).ownerDocument)return G(this,Ke)}getWindow(){if(G(this,Ke)&&G(this,Ke).ownerDocument)return G(this,Ke).contentWindow}getDocument(){if(G(this,Ke)&&G(this,Ke).ownerDocument)return G(this,Ke).contentWindow.document}mount(s){this.dispatch("liveEditBeforeLoaded"),mw.spinner({element:s,size:52,decorate:!0});const i=document.createElement("iframe");i.src=`${mw.settings.site_url}?editmode=n`,i.frameBorder=0,i.id="live-editor-frame",i.referrerPolicy="no-referrer",Un(this,Ke,i),s.innerHTML="",s.appendChild(i),i.addEventListener("load",n=>{this.dispatch("liveEditCanvasLoaded"),mw.spinner({element:s}).remove()})}}Ke=new WeakMap;function Sl(e,t){return function(){return e.apply(t,arguments)}}const{toString:El}=Object.prototype,{getPrototypeOf:Eo}=Object,Lo=(e=>t=>{const s=El.call(t);return e[s]||(e[s]=s.slice(8,-1).toLowerCase())})(Object.create(null)),Yt=e=>(e=e.toLowerCase(),t=>Lo(t)===e),an=e=>t=>typeof t===e,{isArray:Vs}=Array,li=an("undefined");function Nc(e){return e!==null&&!li(e)&&e.constructor!==null&&!li(e.constructor)&&cs(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const Ll=Yt("ArrayBuffer");function Pc(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&Ll(e.buffer),t}const Hc=an("string"),cs=an("function"),Al=an("number"),Ao=e=>e!==null&&typeof e=="object",$c=e=>e===!0||e===!1,Di=e=>{if(Lo(e)!=="object")return!1;const t=Eo(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},Rc=Yt("Date"),Fc=Yt("File"),Dc=Yt("Blob"),Ic=Yt("FileList"),Bc=e=>Ao(e)&&cs(e.pipe),zc=e=>{const t="[object FormData]";return e&&(typeof FormData=="function"&&e instanceof FormData||El.call(e)===t||cs(e.toString)&&e.toString()===t)},Vc=Yt("URLSearchParams"),Uc=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function bi(e,t,{allOwnKeys:s=!1}={}){if(e===null||typeof e>"u")return;let i,n;if(typeof e!="object"&&(e=[e]),Vs(e))for(i=0,n=e.length;i<n;i++)t.call(null,e[i],i,e);else{const o=s?Object.getOwnPropertyNames(e):Object.keys(e),r=o.length;let l;for(i=0;i<r;i++)l=o[i],t.call(null,e[l],l,e)}}function Tl(e,t){t=t.toLowerCase();const s=Object.keys(e);let i=s.length,n;for(;i-- >0;)if(n=s[i],t===n.toLowerCase())return n;return null}const Ml=(()=>typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global)(),Ol=e=>!li(e)&&e!==Ml;function to(){const{caseless:e}=Ol(this)&&this||{},t={},s=(i,n)=>{const o=e&&Tl(t,n)||n;Di(t[o])&&Di(i)?t[o]=to(t[o],i):Di(i)?t[o]=to({},i):Vs(i)?t[o]=i.slice():t[o]=i};for(let i=0,n=arguments.length;i<n;i++)arguments[i]&&bi(arguments[i],s);return t}const jc=(e,t,s,{allOwnKeys:i}={})=>(bi(t,(n,o)=>{s&&cs(n)?e[o]=Sl(n,s):e[o]=n},{allOwnKeys:i}),e),Wc=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),qc=(e,t,s,i)=>{e.prototype=Object.create(t.prototype,i),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),s&&Object.assign(e.prototype,s)},Kc=(e,t,s,i)=>{let n,o,r;const l={};if(t=t||{},e==null)return t;do{for(n=Object.getOwnPropertyNames(e),o=n.length;o-- >0;)r=n[o],(!i||i(r,e,t))&&!l[r]&&(t[r]=e[r],l[r]=!0);e=s!==!1&&Eo(e)}while(e&&(!s||s(e,t))&&e!==Object.prototype);return t},Yc=(e,t,s)=>{e=String(e),(s===void 0||s>e.length)&&(s=e.length),s-=t.length;const i=e.indexOf(t,s);return i!==-1&&i===s},Jc=e=>{if(!e)return null;if(Vs(e))return e;let t=e.length;if(!Al(t))return null;const s=new Array(t);for(;t-- >0;)s[t]=e[t];return s},Xc=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&Eo(Uint8Array)),Zc=(e,t)=>{const i=(e&&e[Symbol.iterator]).call(e);let n;for(;(n=i.next())&&!n.done;){const o=n.value;t.call(e,o[0],o[1])}},Gc=(e,t)=>{let s;const i=[];for(;(s=e.exec(t))!==null;)i.push(s);return i},Qc=Yt("HTMLFormElement"),eu=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(s,i,n){return i.toUpperCase()+n}),Sr=(({hasOwnProperty:e})=>(t,s)=>e.call(t,s))(Object.prototype),tu=Yt("RegExp"),Nl=(e,t)=>{const s=Object.getOwnPropertyDescriptors(e),i={};bi(s,(n,o)=>{t(n,o,e)!==!1&&(i[o]=n)}),Object.defineProperties(e,i)},su=e=>{Nl(e,(t,s)=>{if(cs(e)&&["arguments","caller","callee"].indexOf(s)!==-1)return!1;const i=e[s];if(cs(i)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+s+"'")})}})},iu=(e,t)=>{const s={},i=n=>{n.forEach(o=>{s[o]=!0})};return Vs(e)?i(e):i(String(e).split(t)),s},nu=()=>{},ou=(e,t)=>(e=+e,Number.isFinite(e)?e:t),jn="abcdefghijklmnopqrstuvwxyz",Er="0123456789",Pl={DIGIT:Er,ALPHA:jn,ALPHA_DIGIT:jn+jn.toUpperCase()+Er},ru=(e=16,t=Pl.ALPHA_DIGIT)=>{let s="";const{length:i}=t;for(;e--;)s+=t[Math.random()*i|0];return s};function lu(e){return!!(e&&cs(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const au=e=>{const t=new Array(10),s=(i,n)=>{if(Ao(i)){if(t.indexOf(i)>=0)return;if(!("toJSON"in i)){t[n]=i;const o=Vs(i)?[]:{};return bi(i,(r,l)=>{const a=s(r,n+1);!li(a)&&(o[l]=a)}),t[n]=void 0,o}}return i};return s(e,0)},S={isArray:Vs,isArrayBuffer:Ll,isBuffer:Nc,isFormData:zc,isArrayBufferView:Pc,isString:Hc,isNumber:Al,isBoolean:$c,isObject:Ao,isPlainObject:Di,isUndefined:li,isDate:Rc,isFile:Fc,isBlob:Dc,isRegExp:tu,isFunction:cs,isStream:Bc,isURLSearchParams:Vc,isTypedArray:Xc,isFileList:Ic,forEach:bi,merge:to,extend:jc,trim:Uc,stripBOM:Wc,inherits:qc,toFlatObject:Kc,kindOf:Lo,kindOfTest:Yt,endsWith:Yc,toArray:Jc,forEachEntry:Zc,matchAll:Gc,isHTMLForm:Qc,hasOwnProperty:Sr,hasOwnProp:Sr,reduceDescriptors:Nl,freezeMethods:su,toObjectSet:iu,toCamelCase:eu,noop:nu,toFiniteNumber:ou,findKey:Tl,global:Ml,isContextDefined:Ol,ALPHABET:Pl,generateString:ru,isSpecCompliantForm:lu,toJSONObject:au};function ye(e,t,s,i,n){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),s&&(this.config=s),i&&(this.request=i),n&&(this.response=n)}S.inherits(ye,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:S.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Hl=ye.prototype,$l={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{$l[e]={value:e}});Object.defineProperties(ye,$l);Object.defineProperty(Hl,"isAxiosError",{value:!0});ye.from=(e,t,s,i,n,o)=>{const r=Object.create(Hl);return S.toFlatObject(e,r,function(a){return a!==Error.prototype},l=>l!=="isAxiosError"),ye.call(r,e.message,t,s,i,n),r.cause=e,r.name=e.name,o&&Object.assign(r,o),r};const cu=null;function so(e){return S.isPlainObject(e)||S.isArray(e)}function Rl(e){return S.endsWith(e,"[]")?e.slice(0,-2):e}function Lr(e,t,s){return e?e.concat(t).map(function(n,o){return n=Rl(n),!s&&o?"["+n+"]":n}).join(s?".":""):t}function uu(e){return S.isArray(e)&&!e.some(so)}const du=S.toFlatObject(S,{},null,function(t){return/^is[A-Z]/.test(t)});function cn(e,t,s){if(!S.isObject(e))throw new TypeError("target must be an object");t=t||new FormData,s=S.toFlatObject(s,{metaTokens:!0,dots:!1,indexes:!1},!1,function(_,E){return!S.isUndefined(E[_])});const i=s.metaTokens,n=s.visitor||h,o=s.dots,r=s.indexes,a=(s.Blob||typeof Blob<"u"&&Blob)&&S.isSpecCompliantForm(t);if(!S.isFunction(n))throw new TypeError("visitor must be a function");function d(v){if(v===null)return"";if(S.isDate(v))return v.toISOString();if(!a&&S.isBlob(v))throw new ye("Blob is not supported. Use a Buffer instead.");return S.isArrayBuffer(v)||S.isTypedArray(v)?a&&typeof Blob=="function"?new Blob([v]):Buffer.from(v):v}function h(v,_,E){let P=v;if(v&&!E&&typeof v=="object"){if(S.endsWith(_,"{}"))_=i?_:_.slice(0,-2),v=JSON.stringify(v);else if(S.isArray(v)&&uu(v)||(S.isFileList(v)||S.endsWith(_,"[]"))&&(P=S.toArray(v)))return _=Rl(_),P.forEach(function(K,ie){!(S.isUndefined(K)||K===null)&&t.append(r===!0?Lr([_],ie,o):r===null?_:_+"[]",d(K))}),!1}return so(v)?!0:(t.append(Lr(E,_,o),d(v)),!1)}const g=[],b=Object.assign(du,{defaultVisitor:h,convertValue:d,isVisitable:so});function k(v,_){if(!S.isUndefined(v)){if(g.indexOf(v)!==-1)throw Error("Circular reference detected in "+_.join("."));g.push(v),S.forEach(v,function(P,Y){(!(S.isUndefined(P)||P===null)&&n.call(t,P,S.isString(Y)?Y.trim():Y,_,b))===!0&&k(P,_?_.concat(Y):[Y])}),g.pop()}}if(!S.isObject(e))throw new TypeError("data must be an object");return k(e),t}function Ar(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(i){return t[i]})}function To(e,t){this._pairs=[],e&&cn(e,this,t)}const Fl=To.prototype;Fl.append=function(t,s){this._pairs.push([t,s])};Fl.toString=function(t){const s=t?function(i){return t.call(this,i,Ar)}:Ar;return this._pairs.map(function(n){return s(n[0])+"="+s(n[1])},"").join("&")};function hu(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Dl(e,t,s){if(!t)return e;const i=s&&s.encode||hu,n=s&&s.serialize;let o;if(n?o=n(t,s):o=S.isURLSearchParams(t)?t.toString():new To(t,s).toString(i),o){const r=e.indexOf("#");r!==-1&&(e=e.slice(0,r)),e+=(e.indexOf("?")===-1?"?":"&")+o}return e}class fu{constructor(){this.handlers=[]}use(t,s,i){return this.handlers.push({fulfilled:t,rejected:s,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){S.forEach(this.handlers,function(i){i!==null&&t(i)})}}const Tr=fu,Il={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},mu=typeof URLSearchParams<"u"?URLSearchParams:To,pu=typeof FormData<"u"?FormData:null,gu=typeof Blob<"u"?Blob:null,vu=(()=>{let e;return typeof navigator<"u"&&((e=navigator.product)==="ReactNative"||e==="NativeScript"||e==="NS")?!1:typeof window<"u"&&typeof document<"u"})(),bu=(()=>typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function")(),$t={isBrowser:!0,classes:{URLSearchParams:mu,FormData:pu,Blob:gu},isStandardBrowserEnv:vu,isStandardBrowserWebWorkerEnv:bu,protocols:["http","https","file","blob","url","data"]};function yu(e,t){return cn(e,new $t.classes.URLSearchParams,Object.assign({visitor:function(s,i,n,o){return $t.isNode&&S.isBuffer(s)?(this.append(i,s.toString("base64")),!1):o.defaultVisitor.apply(this,arguments)}},t))}function wu(e){return S.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function _u(e){const t={},s=Object.keys(e);let i;const n=s.length;let o;for(i=0;i<n;i++)o=s[i],t[o]=e[o];return t}function Bl(e){function t(s,i,n,o){let r=s[o++];const l=Number.isFinite(+r),a=o>=s.length;return r=!r&&S.isArray(n)?n.length:r,a?(S.hasOwnProp(n,r)?n[r]=[n[r],i]:n[r]=i,!l):((!n[r]||!S.isObject(n[r]))&&(n[r]=[]),t(s,i,n[r],o)&&S.isArray(n[r])&&(n[r]=_u(n[r])),!l)}if(S.isFormData(e)&&S.isFunction(e.entries)){const s={};return S.forEachEntry(e,(i,n)=>{t(wu(i),n,s,0)}),s}return null}const ku={"Content-Type":void 0};function xu(e,t,s){if(S.isString(e))try{return(t||JSON.parse)(e),S.trim(e)}catch(i){if(i.name!=="SyntaxError")throw i}return(s||JSON.stringify)(e)}const un={transitional:Il,adapter:["xhr","http"],transformRequest:[function(t,s){const i=s.getContentType()||"",n=i.indexOf("application/json")>-1,o=S.isObject(t);if(o&&S.isHTMLForm(t)&&(t=new FormData(t)),S.isFormData(t))return n&&n?JSON.stringify(Bl(t)):t;if(S.isArrayBuffer(t)||S.isBuffer(t)||S.isStream(t)||S.isFile(t)||S.isBlob(t))return t;if(S.isArrayBufferView(t))return t.buffer;if(S.isURLSearchParams(t))return s.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let l;if(o){if(i.indexOf("application/x-www-form-urlencoded")>-1)return yu(t,this.formSerializer).toString();if((l=S.isFileList(t))||i.indexOf("multipart/form-data")>-1){const a=this.env&&this.env.FormData;return cn(l?{"files[]":t}:t,a&&new a,this.formSerializer)}}return o||n?(s.setContentType("application/json",!1),xu(t)):t}],transformResponse:[function(t){const s=this.transitional||un.transitional,i=s&&s.forcedJSONParsing,n=this.responseType==="json";if(t&&S.isString(t)&&(i&&!this.responseType||n)){const r=!(s&&s.silentJSONParsing)&&n;try{return JSON.parse(t)}catch(l){if(r)throw l.name==="SyntaxError"?ye.from(l,ye.ERR_BAD_RESPONSE,this,null,this.response):l}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:$t.classes.FormData,Blob:$t.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};S.forEach(["delete","get","head"],function(t){un.headers[t]={}});S.forEach(["post","put","patch"],function(t){un.headers[t]=S.merge(ku)});const Mo=un,Cu=S.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Su=e=>{const t={};let s,i,n;return e&&e.split(`
`).forEach(function(r){n=r.indexOf(":"),s=r.substring(0,n).trim().toLowerCase(),i=r.substring(n+1).trim(),!(!s||t[s]&&Cu[s])&&(s==="set-cookie"?t[s]?t[s].push(i):t[s]=[i]:t[s]=t[s]?t[s]+", "+i:i)}),t},Mr=Symbol("internals");function Xs(e){return e&&String(e).trim().toLowerCase()}function Ii(e){return e===!1||e==null?e:S.isArray(e)?e.map(Ii):String(e)}function Eu(e){const t=Object.create(null),s=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let i;for(;i=s.exec(e);)t[i[1]]=i[2];return t}function Lu(e){return/^[-_a-zA-Z]+$/.test(e.trim())}function Wn(e,t,s,i,n){if(S.isFunction(i))return i.call(this,t,s);if(n&&(t=s),!!S.isString(t)){if(S.isString(i))return t.indexOf(i)!==-1;if(S.isRegExp(i))return i.test(t)}}function Au(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,s,i)=>s.toUpperCase()+i)}function Tu(e,t){const s=S.toCamelCase(" "+t);["get","set","has"].forEach(i=>{Object.defineProperty(e,i+s,{value:function(n,o,r){return this[i].call(this,t,n,o,r)},configurable:!0})})}class dn{constructor(t){t&&this.set(t)}set(t,s,i){const n=this;function o(l,a,d){const h=Xs(a);if(!h)throw new Error("header name must be a non-empty string");const g=S.findKey(n,h);(!g||n[g]===void 0||d===!0||d===void 0&&n[g]!==!1)&&(n[g||a]=Ii(l))}const r=(l,a)=>S.forEach(l,(d,h)=>o(d,h,a));return S.isPlainObject(t)||t instanceof this.constructor?r(t,s):S.isString(t)&&(t=t.trim())&&!Lu(t)?r(Su(t),s):t!=null&&o(s,t,i),this}get(t,s){if(t=Xs(t),t){const i=S.findKey(this,t);if(i){const n=this[i];if(!s)return n;if(s===!0)return Eu(n);if(S.isFunction(s))return s.call(this,n,i);if(S.isRegExp(s))return s.exec(n);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,s){if(t=Xs(t),t){const i=S.findKey(this,t);return!!(i&&this[i]!==void 0&&(!s||Wn(this,this[i],i,s)))}return!1}delete(t,s){const i=this;let n=!1;function o(r){if(r=Xs(r),r){const l=S.findKey(i,r);l&&(!s||Wn(i,i[l],l,s))&&(delete i[l],n=!0)}}return S.isArray(t)?t.forEach(o):o(t),n}clear(t){const s=Object.keys(this);let i=s.length,n=!1;for(;i--;){const o=s[i];(!t||Wn(this,this[o],o,t,!0))&&(delete this[o],n=!0)}return n}normalize(t){const s=this,i={};return S.forEach(this,(n,o)=>{const r=S.findKey(i,o);if(r){s[r]=Ii(n),delete s[o];return}const l=t?Au(o):String(o).trim();l!==o&&delete s[o],s[l]=Ii(n),i[l]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const s=Object.create(null);return S.forEach(this,(i,n)=>{i!=null&&i!==!1&&(s[n]=t&&S.isArray(i)?i.join(", "):i)}),s}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,s])=>t+": "+s).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...s){const i=new this(t);return s.forEach(n=>i.set(n)),i}static accessor(t){const i=(this[Mr]=this[Mr]={accessors:{}}).accessors,n=this.prototype;function o(r){const l=Xs(r);i[l]||(Tu(n,r),i[l]=!0)}return S.isArray(t)?t.forEach(o):o(t),this}}dn.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);S.freezeMethods(dn.prototype);S.freezeMethods(dn);const Wt=dn;function qn(e,t){const s=this||Mo,i=t||s,n=Wt.from(i.headers);let o=i.data;return S.forEach(e,function(l){o=l.call(s,o,n.normalize(),t?t.status:void 0)}),n.normalize(),o}function zl(e){return!!(e&&e.__CANCEL__)}function yi(e,t,s){ye.call(this,e??"canceled",ye.ERR_CANCELED,t,s),this.name="CanceledError"}S.inherits(yi,ye,{__CANCEL__:!0});function Mu(e,t,s){const i=s.config.validateStatus;!s.status||!i||i(s.status)?e(s):t(new ye("Request failed with status code "+s.status,[ye.ERR_BAD_REQUEST,ye.ERR_BAD_RESPONSE][Math.floor(s.status/100)-4],s.config,s.request,s))}const Ou=$t.isStandardBrowserEnv?function(){return{write:function(s,i,n,o,r,l){const a=[];a.push(s+"="+encodeURIComponent(i)),S.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),S.isString(o)&&a.push("path="+o),S.isString(r)&&a.push("domain="+r),l===!0&&a.push("secure"),document.cookie=a.join("; ")},read:function(s){const i=document.cookie.match(new RegExp("(^|;\\s*)("+s+")=([^;]*)"));return i?decodeURIComponent(i[3]):null},remove:function(s){this.write(s,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}();function Nu(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function Pu(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}function Vl(e,t){return e&&!Nu(t)?Pu(e,t):t}const Hu=$t.isStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),s=document.createElement("a");let i;function n(o){let r=o;return t&&(s.setAttribute("href",r),r=s.href),s.setAttribute("href",r),{href:s.href,protocol:s.protocol?s.protocol.replace(/:$/,""):"",host:s.host,search:s.search?s.search.replace(/^\?/,""):"",hash:s.hash?s.hash.replace(/^#/,""):"",hostname:s.hostname,port:s.port,pathname:s.pathname.charAt(0)==="/"?s.pathname:"/"+s.pathname}}return i=n(window.location.href),function(r){const l=S.isString(r)?n(r):r;return l.protocol===i.protocol&&l.host===i.host}}():function(){return function(){return!0}}();function $u(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}function Ru(e,t){e=e||10;const s=new Array(e),i=new Array(e);let n=0,o=0,r;return t=t!==void 0?t:1e3,function(a){const d=Date.now(),h=i[o];r||(r=d),s[n]=a,i[n]=d;let g=o,b=0;for(;g!==n;)b+=s[g++],g=g%e;if(n=(n+1)%e,n===o&&(o=(o+1)%e),d-r<t)return;const k=h&&d-h;return k?Math.round(b*1e3/k):void 0}}function Or(e,t){let s=0;const i=Ru(50,250);return n=>{const o=n.loaded,r=n.lengthComputable?n.total:void 0,l=o-s,a=i(l),d=o<=r;s=o;const h={loaded:o,total:r,progress:r?o/r:void 0,bytes:l,rate:a||void 0,estimated:a&&r&&d?(r-o)/a:void 0,event:n};h[t?"download":"upload"]=!0,e(h)}}const Fu=typeof XMLHttpRequest<"u",Du=Fu&&function(e){return new Promise(function(s,i){let n=e.data;const o=Wt.from(e.headers).normalize(),r=e.responseType;let l;function a(){e.cancelToken&&e.cancelToken.unsubscribe(l),e.signal&&e.signal.removeEventListener("abort",l)}S.isFormData(n)&&($t.isStandardBrowserEnv||$t.isStandardBrowserWebWorkerEnv)&&o.setContentType(!1);let d=new XMLHttpRequest;if(e.auth){const k=e.auth.username||"",v=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(k+":"+v))}const h=Vl(e.baseURL,e.url);d.open(e.method.toUpperCase(),Dl(h,e.params,e.paramsSerializer),!0),d.timeout=e.timeout;function g(){if(!d)return;const k=Wt.from("getAllResponseHeaders"in d&&d.getAllResponseHeaders()),_={data:!r||r==="text"||r==="json"?d.responseText:d.response,status:d.status,statusText:d.statusText,headers:k,config:e,request:d};Mu(function(P){s(P),a()},function(P){i(P),a()},_),d=null}if("onloadend"in d?d.onloadend=g:d.onreadystatechange=function(){!d||d.readyState!==4||d.status===0&&!(d.responseURL&&d.responseURL.indexOf("file:")===0)||setTimeout(g)},d.onabort=function(){d&&(i(new ye("Request aborted",ye.ECONNABORTED,e,d)),d=null)},d.onerror=function(){i(new ye("Network Error",ye.ERR_NETWORK,e,d)),d=null},d.ontimeout=function(){let v=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const _=e.transitional||Il;e.timeoutErrorMessage&&(v=e.timeoutErrorMessage),i(new ye(v,_.clarifyTimeoutError?ye.ETIMEDOUT:ye.ECONNABORTED,e,d)),d=null},$t.isStandardBrowserEnv){const k=(e.withCredentials||Hu(h))&&e.xsrfCookieName&&Ou.read(e.xsrfCookieName);k&&o.set(e.xsrfHeaderName,k)}n===void 0&&o.setContentType(null),"setRequestHeader"in d&&S.forEach(o.toJSON(),function(v,_){d.setRequestHeader(_,v)}),S.isUndefined(e.withCredentials)||(d.withCredentials=!!e.withCredentials),r&&r!=="json"&&(d.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&d.addEventListener("progress",Or(e.onDownloadProgress,!0)),typeof e.onUploadProgress=="function"&&d.upload&&d.upload.addEventListener("progress",Or(e.onUploadProgress)),(e.cancelToken||e.signal)&&(l=k=>{d&&(i(!k||k.type?new yi(null,e,d):k),d.abort(),d=null)},e.cancelToken&&e.cancelToken.subscribe(l),e.signal&&(e.signal.aborted?l():e.signal.addEventListener("abort",l)));const b=$u(h);if(b&&$t.protocols.indexOf(b)===-1){i(new ye("Unsupported protocol "+b+":",ye.ERR_BAD_REQUEST,e));return}d.send(n||null)})},Bi={http:cu,xhr:Du};S.forEach(Bi,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});const Iu={getAdapter:e=>{e=S.isArray(e)?e:[e];const{length:t}=e;let s,i;for(let n=0;n<t&&(s=e[n],!(i=S.isString(s)?Bi[s.toLowerCase()]:s));n++);if(!i)throw i===!1?new ye(`Adapter ${s} is not supported by the environment`,"ERR_NOT_SUPPORT"):new Error(S.hasOwnProp(Bi,s)?`Adapter '${s}' is not available in the build`:`Unknown adapter '${s}'`);if(!S.isFunction(i))throw new TypeError("adapter is not a function");return i},adapters:Bi};function Kn(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new yi(null,e)}function Nr(e){return Kn(e),e.headers=Wt.from(e.headers),e.data=qn.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Iu.getAdapter(e.adapter||Mo.adapter)(e).then(function(i){return Kn(e),i.data=qn.call(e,e.transformResponse,i),i.headers=Wt.from(i.headers),i},function(i){return zl(i)||(Kn(e),i&&i.response&&(i.response.data=qn.call(e,e.transformResponse,i.response),i.response.headers=Wt.from(i.response.headers))),Promise.reject(i)})}const Pr=e=>e instanceof Wt?e.toJSON():e;function Ds(e,t){t=t||{};const s={};function i(d,h,g){return S.isPlainObject(d)&&S.isPlainObject(h)?S.merge.call({caseless:g},d,h):S.isPlainObject(h)?S.merge({},h):S.isArray(h)?h.slice():h}function n(d,h,g){if(S.isUndefined(h)){if(!S.isUndefined(d))return i(void 0,d,g)}else return i(d,h,g)}function o(d,h){if(!S.isUndefined(h))return i(void 0,h)}function r(d,h){if(S.isUndefined(h)){if(!S.isUndefined(d))return i(void 0,d)}else return i(void 0,h)}function l(d,h,g){if(g in t)return i(d,h);if(g in e)return i(void 0,d)}const a={url:o,method:o,data:o,baseURL:r,transformRequest:r,transformResponse:r,paramsSerializer:r,timeout:r,timeoutMessage:r,withCredentials:r,adapter:r,responseType:r,xsrfCookieName:r,xsrfHeaderName:r,onUploadProgress:r,onDownloadProgress:r,decompress:r,maxContentLength:r,maxBodyLength:r,beforeRedirect:r,transport:r,httpAgent:r,httpsAgent:r,cancelToken:r,socketPath:r,responseEncoding:r,validateStatus:l,headers:(d,h)=>n(Pr(d),Pr(h),!0)};return S.forEach(Object.keys(e).concat(Object.keys(t)),function(h){const g=a[h]||n,b=g(e[h],t[h],h);S.isUndefined(b)&&g!==l||(s[h]=b)}),s}const Ul="1.3.4",Oo={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{Oo[e]=function(i){return typeof i===e||"a"+(t<1?"n ":" ")+e}});const Hr={};Oo.transitional=function(t,s,i){function n(o,r){return"[Axios v"+Ul+"] Transitional option '"+o+"'"+r+(i?". "+i:"")}return(o,r,l)=>{if(t===!1)throw new ye(n(r," has been removed"+(s?" in "+s:"")),ye.ERR_DEPRECATED);return s&&!Hr[r]&&(Hr[r]=!0,console.warn(n(r," has been deprecated since v"+s+" and will be removed in the near future"))),t?t(o,r,l):!0}};function Bu(e,t,s){if(typeof e!="object")throw new ye("options must be an object",ye.ERR_BAD_OPTION_VALUE);const i=Object.keys(e);let n=i.length;for(;n-- >0;){const o=i[n],r=t[o];if(r){const l=e[o],a=l===void 0||r(l,o,e);if(a!==!0)throw new ye("option "+o+" must be "+a,ye.ERR_BAD_OPTION_VALUE);continue}if(s!==!0)throw new ye("Unknown option "+o,ye.ERR_BAD_OPTION)}}const io={assertOptions:Bu,validators:Oo},Gt=io.validators;class Yi{constructor(t){this.defaults=t,this.interceptors={request:new Tr,response:new Tr}}request(t,s){typeof t=="string"?(s=s||{},s.url=t):s=t||{},s=Ds(this.defaults,s);const{transitional:i,paramsSerializer:n,headers:o}=s;i!==void 0&&io.assertOptions(i,{silentJSONParsing:Gt.transitional(Gt.boolean),forcedJSONParsing:Gt.transitional(Gt.boolean),clarifyTimeoutError:Gt.transitional(Gt.boolean)},!1),n!==void 0&&io.assertOptions(n,{encode:Gt.function,serialize:Gt.function},!0),s.method=(s.method||this.defaults.method||"get").toLowerCase();let r;r=o&&S.merge(o.common,o[s.method]),r&&S.forEach(["delete","get","head","post","put","patch","common"],v=>{delete o[v]}),s.headers=Wt.concat(r,o);const l=[];let a=!0;this.interceptors.request.forEach(function(_){typeof _.runWhen=="function"&&_.runWhen(s)===!1||(a=a&&_.synchronous,l.unshift(_.fulfilled,_.rejected))});const d=[];this.interceptors.response.forEach(function(_){d.push(_.fulfilled,_.rejected)});let h,g=0,b;if(!a){const v=[Nr.bind(this),void 0];for(v.unshift.apply(v,l),v.push.apply(v,d),b=v.length,h=Promise.resolve(s);g<b;)h=h.then(v[g++],v[g++]);return h}b=l.length;let k=s;for(g=0;g<b;){const v=l[g++],_=l[g++];try{k=v(k)}catch(E){_.call(this,E);break}}try{h=Nr.call(this,k)}catch(v){return Promise.reject(v)}for(g=0,b=d.length;g<b;)h=h.then(d[g++],d[g++]);return h}getUri(t){t=Ds(this.defaults,t);const s=Vl(t.baseURL,t.url);return Dl(s,t.params,t.paramsSerializer)}}S.forEach(["delete","get","head","options"],function(t){Yi.prototype[t]=function(s,i){return this.request(Ds(i||{},{method:t,url:s,data:(i||{}).data}))}});S.forEach(["post","put","patch"],function(t){function s(i){return function(o,r,l){return this.request(Ds(l||{},{method:t,headers:i?{"Content-Type":"multipart/form-data"}:{},url:o,data:r}))}}Yi.prototype[t]=s(),Yi.prototype[t+"Form"]=s(!0)});const zi=Yi;class No{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let s;this.promise=new Promise(function(o){s=o});const i=this;this.promise.then(n=>{if(!i._listeners)return;let o=i._listeners.length;for(;o-- >0;)i._listeners[o](n);i._listeners=null}),this.promise.then=n=>{let o;const r=new Promise(l=>{i.subscribe(l),o=l}).then(n);return r.cancel=function(){i.unsubscribe(o)},r},t(function(o,r,l){i.reason||(i.reason=new yi(o,r,l),s(i.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const s=this._listeners.indexOf(t);s!==-1&&this._listeners.splice(s,1)}static source(){let t;return{token:new No(function(n){t=n}),cancel:t}}}const zu=No;function Vu(e){return function(s){return e.apply(null,s)}}function Uu(e){return S.isObject(e)&&e.isAxiosError===!0}const no={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(no).forEach(([e,t])=>{no[t]=e});const ju=no;function jl(e){const t=new zi(e),s=Sl(zi.prototype.request,t);return S.extend(s,zi.prototype,t,{allOwnKeys:!0}),S.extend(s,t,null,{allOwnKeys:!0}),s.create=function(n){return jl(Ds(e,n))},s}const et=jl(Mo);et.Axios=zi;et.CanceledError=yi;et.CancelToken=zu;et.isCancel=zl;et.VERSION=Ul;et.toFormData=cn;et.AxiosError=ye;et.Cancel=et.CanceledError;et.all=function(t){return Promise.all(t)};et.spread=Vu;et.isAxiosError=Uu;et.mergeConfig=Ds;et.AxiosHeaders=Wt;et.formToJSON=e=>Bl(S.isHTMLForm(e)?new FormData(e):e);et.HttpStatusCode=ju;et.default=et;const Ts=et;class Rt{static extend(){const t={};let s=!1,i=0;const n=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(s=arguments[0],i++);const o=function(r){for(const l in r)Object.prototype.hasOwnProperty.call(r,l)&&(s&&Object.prototype.toString.call(r[l])==="[object Object]"?t[l]=Rt.extend(!0,t[l],r[l]):t[l]=r[l])};for(;i<n;i++){const r=arguments[i];o(r)}return t}}var ws=function(e,t){var s=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(n,o){this.nodes=(o||document).querySelectorAll(n)},this.each=function(n){if(this.nodes)for(var o=0;o<this.nodes.length;o++)n.call(this.nodes[o],o);else this.node&&n.call(this.node,0);return this},this.encapsulate=function(){};var i=function(n,o){n&&(Array.isArray(n)?n.forEach(function(r){i(r,o)}):n instanceof ws?o.append(n):typeof n=="object"&&o.append(new ws(n)))};this.create=function(){var n=this.document.createElement(this.settings.tag);if(this.node=n,this.settings.encapsulate===!0){var o=this.settings.encapsulate===!0?"open":this.settings.encapsulate;n.attachShadow({mode:o})}this.nodes=[n],this.settings.content&&i(this.settings.content,this)},this._specialProps=function(n,o){if(n==="tooltip")return this.node.dataset[n]=o,!0},this.setProps=function(){for(var n in this.settings.props)if(n==="dataset")for(var o in this.settings.props[n])this.node.dataset[o]=this.settings.props[n][o];else if(n==="style")for(var r in this.settings.props[n])this.node.style[r]=this.settings.props[n][r];else{var l=this.settings.props[n];this._specialProps(n,l)||(this.node[n]=l)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(n,o){return typeof o=="number"&&this.__.cssNumber.indexOf(n)===-1&&(o=o+"px"),o},this.css=function(n,o){if(typeof n=="string")if(typeof o<"u"){var r=this._normalizeCSSValue(n,o);this.each(function(){this.style[n]=r})}else return this.document.defaultView.getComputedStyle(this.node)[n];if(typeof n=="object")for(var l in n)this.each(function(){this.style[l]=s._normalizeCSSValue(l,n[l])});return this},this.dataset=function(n,o){return typeof o>"u"?this._active()[n]:(this.each(function(){this.dataset[n]=o}),this)},this.attr=function(n,o){return typeof o>"u"?this._active()[n]:(this.each(function(){this.setAttribute(n,o)}),this)},this.val=function(n){return typeof n>"u"?this._active().value:(this.each(function(){this.value=n}),this)},this.prop=function(n,o){var r=this._active();return typeof o>"u"?r[n]:(r[n]!==o&&(r[n]=o,this.trigger("propChange",[n,o])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(n){var o=mw.element("#r"+new Date().getTime());return this.each(function(){for(var r=this.querySelectorAll(n),l=0;l<r.length;l++)o.nodes.indexOf(r[l])===-1&&o.nodes.push(r[l])}),o},this.addClass=function(n){return n=n.trim().split(" "),this.each(function(){var o=this;n.forEach(function(r){o.classList.add(r)})})},this.toggleClass=function(n){return this.each(function(){this.classList.toggle(n.trim())})},this.removeClass=function(n){var o=Array.isArray(n);if(o)return this.each(function(){for(var l=0,a=n.length;l<a;l++)this.classList.remove(n[l])});n=n.trim();var r=n.split(" ");return r.length>1?this.removeClass(r):this.each(function(){this.classList.remove(n)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(n){return typeof n>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=n})},this.text=function(n,o){if(typeof n>"u")return this.node.textContent;typeof o>"u"&&(o=!0),o&&(n=this.document.createRange().createContextualFragment(n).textContent),this.node.innerHTML=n},this._asdom=function(n){return typeof n=="string"?this.document.createRange().createContextualFragment(n):n.node?n.node:n.nodes?n.nodes[n.nodes.length-1]:n},this.offset=function(){var n=this._active(),o=this.getWindow(),r=n.getBoundingClientRect();return r.offsetTop=r.top+o.pageYOffset,r.offsetBottom=r.bottom+o.pageYOffset,r.offsetLeft=r.left+o.pageXOffset,r},this.width=function(n){return n?this.css("width",n):this._active().offsetWidth},this.height=function(n){return n?this.css("height",n):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(n){n=n||"*";var o=this._active(),r=o.parentElement,l=mw.element();for(l.nodes=[];r;)r.matches(n)&&l.nodes.push(r),r=r.parentElement;return l},this.append=function(n){return n&&this.each(function(){this.append(s._asdom(n))}),this},this.before=function(n){return n&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(s._asdom(n),this)}),this},this.after=function(n){n&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(s._asdom(n),this.nextSibling)})},this.prepend=function(n){return n&&this.each(function(){this.prepend(s._asdom(n))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(n){this._disabled=n,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(n,o){return o=o||{},this.each(function(){this.dispatchEvent(new CustomEvent(n,{detail:o,cancelable:!0,bubbles:!0})),s._on[n]&&s._on[n].forEach(function(r){r.call(this,n,o)})}),this},this.get=function(n){return this.nodes[n]},this.wrap=function(n){var o=Po(n);this.before(o),o.append(this)},this._on={},this.on=function(n,o){return n=n.trim().split(" "),n.forEach(function(r){s._on[r]||(s._on[r]=[]),s._on[r].push(o),s.each(function(){this.addEventListener(r,o,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=t||document,this.root instanceof ws&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,e=e||{},e.nodeName&&e.nodeType)this.nodes.push(e),this.node=e,e={},this._asElement=!0;else if(typeof e=="string")if(e.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(e)),e={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof ws)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new ws(this.settings.content));else{var n=this._asdom(e);this.nodes=[].slice.call(n.children),this._asElement=!0}e=e||{};var o={tag:"div",props:{}};this.settings=Rt.extend({},o,e),!this._asElement&&(this.create(),this.setProps())},this.init()};const Po=function(e,t){return new ws(e,t)};Po.module=function(e,t){ws.prototype[e]=t};const oo="mw-le-element";window.customElements&&!customElements.get(oo)&&customElements.define(oo,class extends HTMLElement{constructor(){super()}});const ge=(e,t)=>(e instanceof Object&&!e.nodeType&&(e=Rt.extend({},e||{},{tag:e.tag||oo})),Po(e,t)),$r=(e=null,t,s={},i)=>{if(!(!e||!t))return new Promise(async n=>{await e.ownerDocument.defaultView.mw.module.insert(e,t,s,"top",mw.liveEditState),n()})};class Wu extends Kt{constructor(){super(),mw.app.get("liveEdit").moduleHandle.on("targetChange",s=>{this.dispatch("targetChange",s)})}}class qu extends Kt{constructor(){super(),mw.app.get("liveEdit").elementHandle.on("targetChange",s=>{this.dispatch("targetChange",s)})}}class Ku extends Kt{constructor(){super(),mw.app.get("liveEdit").layoutHandleContent.on("targetChange",s=>{this.dispatch("targetChange",s)})}}class Yu extends Kt{constructor(){super(...arguments);pt(this,"handle",{module:new Wu,element:new qu,layout:new Ku})}insertModule(s,i){const n=mw.app.get("liveEdit").handles.get("module").getTarget();return $r(n,s,i)}insertLayout(s){const i=mw.app.get("liveEdit").handles.get("layout").getTarget();return $r(i,"layouts",s)}}let Qs;const Li=document.documentElement;Li.matches?Qs="matches":Li.matchesSelector?Qs="matchesSelector":Li.mozMatchesSelector?Qs="mozMatchesSelector":Li.webkitMatchesSelector&&(Qs="webkitMatchesSelector");class yt{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(t,s){return t[Qs](s)}static isBlockLevel(t){if(!t||t.nodeType===3)return!1;var s=t.nodeName;if(typeof this._isBlockCache[s]<"u")return this._isBlockCache[s];var i=document.createElement(s);return this.fragment().appendChild(i),this._isBlockCache[s]=getComputedStyle(i).display==="block",this.fragment().removeChild(i),this._isBlockCache[s]}static firstBlockLevel(t){for(;t&&t.classList;){if(this.isBlockLevel(t))return t;t=t.parentNode}}static firstWithBackgroundImage(t){if(!t)return null;for(;t&&t.nodeName!=="BODY";){if(t.style.backgroundImage)return t;t=t.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(t,s){for(;t&&t.nodeName!=="BODY";){let i=0,n=s.length;for(;i<n;i++)if(t.classList.contains(s[i]))return!0;t=t.parentElement}return!1}static hasParentsWithClass(t,s){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.classList.contains(s))return!0;i=i.parentNode}return!1}}static hasParentWithId(t,s){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.id===s)return!0;i=i.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(t,s){for(;t&&t.nodeName!=="BODY";){let i=0,n=s.length;for(;i<n;i++)if(t.classList.contains(s[i]))return t;t=t.parentElement}return null}static firstParentOrCurrentWithTag(t,s){if(!(!t||!s)){s=typeof s!="string"?s:[s];for(var i=t;i&&i.nodeName!=="BODY";){if(s.indexOf(i.nodeName.toLowerCase())!==-1)return i;i=i.parentNode}return!1}}static index(t,s,i){i=i||t.tagName.toLowerCase(),s=s||t.parentNode;var n;s.constructor===[].constructor?n=s:n=s.querySelectorAll(i);for(var o=0,r=n.length;o<r;o++)if(t===n[o])return o}static firstParentOrCurrentWithClass(t,s){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.classList.contains(s))return i;i=i.parentNode}return!1}static firstParentOrCurrent(t,s){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.matches(s))return i;i=i.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(t,s){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(!i)return!1;if(this.hasAnyOfClasses(i,s))return i;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(t,s){let i=t;for(;i&&i.nodeName!=="BODY";){const n=i.classList.contains(s[0]),o=i.classList.contains(s[1]);if(n&&o)return!1;if(n)return!0;if(o)return!1;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,s){let i=t;for(;i&&i.nodeName!=="BODY";){const n=i.classList.contains(s[0]),o=i.classList.contains(s[1]);if(n&&o)return!1;if(n)return!0;if(o)return!1;i=i.parentNode}return!0}static hasAnyOfClasses(t,s){if(!t)return;let i=0,n=s.length;for(;i<n;i++)if(t.classList.contains(s[i]))return!0;return!1}static offset(t){if(t){var s=t.getBoundingClientRect(),i={top:s.top,left:s.left,width:s.width,height:s.height,bottom:s.bottom,right:s.right};return i.top+=t.ownerDocument.defaultView.scrollY,i.bottom+=t.ownerDocument.defaultView.scrollY,i.left+=t.ownerDocument.defaultView.scrollX,i.right+=t.ownerDocument.defaultView.scrollX,i}}static parentsOrder(t,s){for(var i=[],n={},o=s.length,r=0,l=-1;r<o;r++)n[s[r]]=-1;if(!t)return n;for(var a=t.parentNode;a&&a.nodeName!=="BODY";){for(l++,r=0;r<o;r++)a.classList.contains(s[r])&&i.indexOf(s[r])===-1&&(n[s[r]]=l,i.push(s[r]));a=a.parentNode}return n}}pt(yt,"_isBlockCache",{}),pt(yt,"_fragment");class Ju{constructor(t){this.settings=t,this.tools=yt}isRow(t){return t.classList.contains(this.settings.rowClass)}isModule(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type!=="layouts"}isLayout(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts"}isInLayout(t){if(!t)return!1;for(t=t.parentNode;t&&t!==this.settings.document.body;){if(t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts")return!0;t=t.parentNode}}isElement(t){return t.classList.contains(this.settings.elementClass)}isEmptyElement(t){return t.classList.contains(this.settings.emptyElementClass)}isEdit(t){return t.classList.contains(this.settings.editClass)}isInEdit(t){var s=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t.parentNode,s)}isEditOrInEdit(t){return this.isEdit(t)||this.isInEdit(t)}isPlainText(t){return t.classList.contains(this.settings.plainElementClass)}getType(t){if(this.isEdit(t))return"edit";if(this.isElement(t))return"element";if(this.isModule(t))return"module";if(this.isLayout(t))return"layout"}}class Wl extends Ju{constructor(t){super(t),this.settings=t,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM","DD"],this.init()}isConfigurable(t){return this.isElement(t)||this.isModule(t)||this.isRow(t)}isEditableLayout(t){return this.this.isLayout(t)&&this.isInEdit(t)}canMoveModule(t){return this.isModule(t)&&this.isInEdit(t)}canAcceptByClass(t){return this.tools.hasAnyOfClasses(t,this.dropableElements())}canAcceptByTag(t){return!t||t.nodeType!==1?!1:this._tagsCanAccept.indexOf(t.nodeName)!==-1}allowDrop(t){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(t){return this.canAccept(t.parentNode)}canAccept(t){return!!(this.canAcceptByClass(t)&&this.isEditOrInEdit(t)&&this.allowDrop(t))}canReceiveElements(t){return this.isEdit(t)&&this.canAcceptByTag(t)}dropableElements(){return this._dropableElements}getIteractionTarget(t){return this.tools.firstWithAyOfClassesOnNodeOrParent(t,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(t,s){const i=this.getIteractionTarget(t);if(!i||!this.isEditOrInEdit(t)||!this.allowDrop(t))return null;const n={target:i,canInsert:!1,beforeAfter:!1};var o=this.settings.strictLayouts&&this.isLayout(s),r=this.settings.strict&&!this.isLayout(s)&&!this.isInLayout(i);if(r)return null;if(this.isEdit(i))n.canInsert=!o;else if(this.isElement(i)&&!o)this.canAcceptByTag(i)&&(n.canInsert=!o),n.beforeAfter=!0;else if(this.isModule(i)&&!o)if(this.canInsertBeforeOrAfter(i))n.beforeAfter=!0;else return null;else if(this.isLayout(i))if(this.canInsertBeforeOrAfter(i))n.beforeAfter=!0;else return null;return n}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let Xu=-1;const Zu=(e,t)=>{if(!e||!t)return!1;const s=t.target;if(!s||s.nodeType!==1)return!1;e.pageX;const i=e.pageY,n=yt.offset(s),o={},r=15;if(Xu===i||!t||!t.canInsert&&!t.beforeAfter)return!1;if(t.canInsert&&t.beforeAfter)if(i>=n.top-r&&i<=n.top+r)o.position="top",o.action="before";else if(i>=n.top+r&&i<=n.top+n.height/2)o.position="top",o.action="prepend";else if(i>=n.top+n.height/2&&i<=n.bottom-r)o.position="bottom",o.action="append";else if(i>=n.top+n.height/2&&i>=n.bottom-r)o.position="bottom",o.action="after";else return!1;else if(t.beforeAfter)if(i>=n.top-r&&i<=n.top+n.height/2)o.position="top",o.action="before";else if(i>=n.top+n.height/2&&i<=n.bottom+r)o.position="bottom",o.action="after";else return!1;else if(t.canInsert)if(i>=n.top-r&&i<=n.top+n.height/2)o.position="top",o.action="prepend";else if(i>=n.top+n.height/2&&i<=n.bottom+r)o.position="bottom",o.action="append";else return!1;return o},Gu=function(e,t){var s={handle:null,element:null,document,helper:!0},i=this,n={};this.on=function(r,l){n[r]?n[r].push(l):n[r]=[l]},this.dispatch=function(r,l){n[r]&&n[r].forEach(function(a){a.call(this,l)})};var o=function(r){i.settings.document.body.style.scrollBehavior="smooth",i.settings.document.defaultView.scrollTo(0,i.settings.document.defaultView.scrollY+r),i.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=Rt.extend({},s,e),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(r){this.element=ge(r).get(0),this.settings.handle||(this.settings.handle=this.settings.element),this.handle=this.settings.handle,this.handle.attr("draggable","true")},this.setTargets=function(r){this.targets=ge(r)},this.addTarget=function(r){this.targets.push(r)},this.init=function(){this.config(),this.draggable()},this.helper=function(r){return this._helper||(this._helper=ge().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),r==="create"?(this._helper.style.top=r.pageY+"px",this._helper.style.left=r.pageX+"px",this._helper.style.width=i.element.offsetWidth+"px",this._helper.style.height=i.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"):r==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&r&&(this._helper.style.top=r.pageY+"px",this._helper.style.left=r.pageX+"px",this._helper.style.maxWidth=i.settings.document.defaultView.innerWidth-r.pageX-40+"px",this.settings.document.documentElement.classList.add("le-dragging")),this._helper},this.isDragging=!1,this.dropableService=new Wl(t),this.dropPosition=Zu,this.draggable=function(){ge(this.settings.target).on("dragleave",function(r){i.dropIndicator.hide()}),ge(this.settings.target).on("dragover",function(r){if(i.target=null,i.action=null,r.target!==i.element||!i.element.contains(r.target)){var l=i.dropableService.getTarget(r.target,i.element);if(l&&l!==i.element){const a=i.dropPosition(r,l);a?(i.target=l.target,i.action=a.action,i.dropIndicator.position(i.target,a.action+"-"+a.position)):i.dropIndicator.hide()}else i.dropIndicator.hide();i.isDragging&&(i.dispatch("dragOver",{element:i.element,event:r}),r.preventDefault())}}).on("drop",function(r){i.isDragging&&(r.preventDefault(),i.target&&i.action&&ge(i.target)[i.action](i.element),i.dropIndicator.hide(),i.dispatch("drop",{element:i.element,event:r})),i.dropIndicator.hide()}),this.handle.on("dragstart",function(r){i.isDragging=!0,i.element.id||(i.element.id="mw-element-"+new Date().getTime()),i.element.classList.add("mw-element-is-dragged"),r.dataTransfer.setData("text",i.element.id),r.dataTransfer.effectAllowed="move",i.helper("create"),i.dispatch("dragStart",{element:i.element,event:r})}).on("drag",function(r){var l=90,a=5;r.clientY<l&&o(-a),r.clientY>innerHeight-(l+(this._helper?this._helper.offsetHeight+10:0))&&o(a),r.dataTransfer.dropEffect="copy",i.dispatch("drag",{element:i.element,event:r}),i.helper(r)}).on("dragend",function(r){i.isDragging=!1,i.element.classList.remove("mw-element-is-dragged"),i.helper("remove"),i.dispatch("dragEnd",{element:i.element,event:r})})},this.init()};var ns;class ql{constructor(t={}){pt(this,"x",0);pt(this,"y",0);pt(this,"w",0);pt(this,"h",0);pt(this,"listeners",{});ht(this,ns,{});pt(this,"activeHandle",null);pt(this,"handles",{});const s={element:null,document,maxHeight:null,maxWidth:null};this.settings=Object.assign({},s,t),this.element=this.settings.element,this.document=this.settings.document,this.element.classList.add("mw-le-resizable")}on(t,s){G(this,ns)[t]?G(this,ns)[t].push(s):G(this,ns)[t]=[s]}dispatch(t,s){G(this,ns)[t]&&G(this,ns)[t].forEach(i=>{i.call(this,s)})}mouseMoveHandler(t){const s=t.clientX-this.x,i=t.clientY-this.y;let n=this.h+i,o;this.activeHandle===this.handles.left?o=this.w-s:o=this.w+s,this.settings.maxWidth&&(o=Math.min(o,this.settings.maxWidth)),this.settings.maxHeight&&(n=Math.min(n,this.settings.maxHeight)),this.element.style.width=`${o}px`,this.element.style.height=`${n}px`,t.preventDefault(),this.dispatch("resize",{height:this.element.offsetHeight,width:this.element.offsetWidth})}mouseUpHandler(){for(const t in this.listeners)this.document.removeEventListener(t,this.listeners[t]);this.listeners={},this.activeHandle=null,this.dispatch("resizeStop")}mouseDownHandler(t){this.x=t.clientX,this.y=t.clientY;const s=this.document.defaultView.getComputedStyle(this.element);this.w=parseInt(s.width,10),this.h=parseInt(s.height,10),this.listeners.mousemove=i=>this.mouseMoveHandler(i),this.listeners.mouseup=i=>this.mouseUpHandler(i);for(const i in this.listeners)this.document.addEventListener(i,this.listeners[i]);this.dispatch("resizeStart")}build(){const t=this.document.createElement("span"),s=this.document.createElement("span"),i=this.document.createElement("span"),n=this.document.createElement("span");this.handles.top=t,this.handles.right=s,this.handles.bottom=i,this.handles.left=n,t.className="mw-le-resizer mw-le-resizer-t",s.className="mw-le-resizer mw-le-resizer-r",n.className="mw-le-resizer mw-le-resizer-l",i.className="mw-le-resizer mw-le-resizer-b",this.element.appendChild(t),this.element.appendChild(s),this.element.appendChild(i),this.element.appendChild(n)}mount(){if(!this.element)return this;if(this.element.dataset.resizable)return this;this.element.dataset.resizable=!0,this.build();const t=this.element.querySelectorAll(".mw-le-resizer");return Array.from(t).forEach(s=>{s.addEventListener("mousedown",i=>{this.mouseDownHandler(i),this.activeHandle=s})}),this.dispatch("ready",{height:this.element.offsetHeight,width:this.element.offsetWidth}),this}}ns=new WeakMap;globalThis.Resizable=ql;const Ai=function(e){var t={},s=this;this.settings=Rt.extend({},t,e);const i={};this.on=(d,h)=>{i[d]?i[d].push(h):i[d]=[h]},this.dispatch=(d,h)=>{i[d]&&i[d].forEach(g=>{g.call(this,h)})};var n=!0,o=null;this.getTarget=function(){return o},this.isVisible=function(){return n},this.show=function(){n=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){n=!1,this.wrapper.addClass("mw-handle-item-hidden"),this.wrapper.removeClass("mw-handle-active")};let r=null;this.setContent=function(d){r&&r.remove(),r=d,this.wrapper.append(r)},this.initDraggable=function(){this.draggable=new Gu({handle:this.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},e),this.draggable.on("dragStart",function(){s.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){s.wrapper.removeClass("mw-handle-item-dragging")})},this.set=function(d){if(!d){o=null;return}var h=yt.offset(d);this.wrapper.css({top:h.top,left:h.left,width:h.width,height:h.height}),this.show(),this.draggable.setElement(d),o!==d&&(o=d,this.dispatch("targetChange",d)),setTimeout(()=>this.wrapper.addClass("mw-handle-active"),1)},this.createHandle=function(){this.settings.handle?this.handle=this.settings.handle:(this.handle=ge({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))};var l=this.settings.document.defaultView.innerWidth,a=this.settings.document.defaultView.innerHeight;this.resizableMaxWidth=function(d){if(typeof d>"u")return l;l=d},this.resizableMaxHeight=function(d){if(typeof d>"u")return a;a=d},this.findClosestElementByClass=function(d,h=200){let g=[],b=d,k=0;for(;b!==document;){const v=b.parentNode.querySelectorAll(".element,.module");if(v.length>0&&(g=[...v].filter(_=>Math.abs(d.getBoundingClientRect().top-_.getBoundingClientRect().top)<=h),g.length>0)||(b=b.parentNode,k++,k>h/10))break}return g},this.resizable=function(){this.settings.resizable&&(this.resizer=new ql({element:this.wrapper.get(0),document:this.settings.document}),this.resizer.mount(),this.resizer.on("resize",d=>{const h=this.getTarget();h&&(h.style.minHeight=d.height+"px",h.style.width=d.width+"px")}))},this.createWrapper=function(){this.wrapper=ge({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),ge(document.body).on("mouseup touchend",function(){s.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide(),this.resizable()},Qu=function(e){e=e||{},this.tools=yt;var t=this,s={exceptions:["mw-handle-item"]};this.settings=Rt.extend({},s,e),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var i=20,n=function(l){return l%5>=2.5?l/5*5+5:l/5*5},o=function(l,a){l=n(l),a=n(a);for(var d=[],h=l-i,g=l+i,b=a-i,k=a+i;h<g;h+=5)for(;b<=k;b+=5)d.push([h,b]);return d},r=function(l,a){l&&l.parentElement&&a.indexOf(l)===-1&&t.body!==l&&a.push(l)};this.fromEvent=function(l){return t.tools.hasAnyOfClassesOnNodeOrParent(l.target,this.settings.exceptions)?[]:(t.document._test||(t.document._test=document.createElement("div"),t.document._test.style.position="absolute",t.document._test.style.left="10px",t.document._test.style.background="red",t.document._test.style.width="10px",t.document._test.style.height="10px",t.document.body.appendChild(t.document._test)),t.document._test.style.top=l.pageY+"px",this.fromPoint(l.pageX,l.pageY))},this.fromPoint=function(l,a){var d=[];t.document.defaultView.frameElement&&(a-=t.document.defaultView.scrollY);var h=t.document.elementFromPoint(l,a);if(!h)return[];r(h,d);var g=o(l,a);return g.forEach(function(b){r(t.document.elementFromPoint(b[0],b[1]),d)}),d}},ed=function(e){return yt.matches(e,'.row,[class*="row-"]')},td=function(e){return yt.matches(e,'.col,[class*="col-"]')};let Qt;const Rr=function(){return Qt||(Qt=document.createElement("div"),Qt.style.visibility="hidden",Qt.style.position="absolute",Qt.style.width="1px",Qt.style.height="1px",document.body.appendChild(Qt)),Qt},Ti={},sd=function(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof Ti[t]<"u")return Ti[t];var s=document.createElement(t);return Rr().appendChild(s),Ti[t]=getComputedStyle(s).display==="block",Rr().removeChild(s),Ti[t]},id=(e,t,s)=>{e=e||"*";for(var i=t.querySelectorAll(e),n=0,o=[];n<i.length;n++)!td(i[n])&&!ed(i[n])&&!s.elementAnalyzer.isEdit(i[n])&&sd(i[n])&&o.push(i[n]);return o},nd=e=>{const{backgroundImageHolder:t,editClass:s,moduleClass:i,elementClass:n,allowDrop:o}=e.settings,r=e.root;for(var l=r.querySelectorAll("."+s+"."+t+", ."+s+" ."+t+", ."+s+'[style*="background-image"], .'+s+' [style*="background-image"]'),a=r.querySelectorAll("."+i+e.settings.unEditableModules.join(",."+i)),d=r.querySelectorAll("."+s),h=0,g=0,b=0;h<l.length;h++){var k=l[h];e.elementAnalyzer.isInEdit(k)&&(mw.tools.hasClass(k,i)||mw.tools.addClass(k,s),k.style.backgroundImage||(k.style.backgroundImage="none"))}for(;g<a.length;g++)a[h].classList.remove(i);for(;b<d.length;b++){for(var v=id(":not(."+n+")",d[b],e),_=0,E=d[b].querySelectorAll("."+o),P=0;P<E.length;P++)E[P].classList.add(n);for(;_<v.length;_++)v[_].classList.contains(i)||e.elementAnalyzer.isInEdit(v[_])&&v[_].classList.add(n)}},od=function(e){this.handles=e,this.dragging=!1;var t=this;this.get=function(s){return this.handles[s]},this.set=function(s,i){this.get(s).set(i)},this.hide=function(s){s&&this.handles[s]?this.handles[s].hide():this.each(function(i,n){n.hide()})},this.hideAllBut=function(s){this.each(function(i,n){i!==s&&n.hide()})},this.show=function(s){s&&this.handles[s]?this.handles[s].show():this.each(function(i,n){n.show()})},this.each=function(s){if(s){var i;for(i in this.handles)s.call(t,i,this.handles[i])}},this.targetIsSelected=function(s,i){if(s){s=s.target||s;var n;for(n in this.handles){if(i&&i===this.handles[n])continue;const o=this.handles[n].getTarget();if(o&&o===s)return!0}return!1}},this.targetIsOrInsideHandle=function(s){if(s){s=s.target||s;var i;for(i in this.handles)if(this.handles[i].wrapper.get(0)===s||this.handles[i].wrapper.get(0).contains(s))return!0;return!1}},this.init=function(){this.each(function(s,i){i.draggable.on("dragStart",function(){t.dragging=!0,t.hideAllBut(s)}),i.draggable.on("dragEnd",function(){t.dragging=!1,i.show()})})},this.init()},rd=function(e){e=e||{};const t={template:"default"};let s={};this.settings=Rt.extend({},t,e),this._indicator=null;const i={};this.on=function(a,d){i[a]?i[a].push(d):i[a]=[d]},this.dispatch=function(a,d){i[a]&&i[a].forEach(function(h){h.call(this,d)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,s={})},this.show=function(){console.log(this.visible),this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const n=["before-top","prepend-top","after-bottom","append-bottom"],o="mw-drop-indicator-position-",r=n.map(function(a){return o+a});let l=null;this.position=function(a,d){if(!(!a||!d)&&!(s.target===a&&s.position===d)){s.target=a,s.position=d,l!==d&&(this._indicator.removeClass(r),l=d,this._indicator.addClass(o+d));var h=yt.offset(a);this._indicator.css({height:h.height,left:h.left,top:h.top,width:h.width}),this.show()}},this.make=function(){this._indicator=ge(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},ld=(e,t,s)=>{!e||!t||(e=e.isMWElement?e.get(0):e,e.dataset.tooltip=t,e.title=t,e.dataset.tooltipposition=s||"top-center")},Is=function(e){this.options=e||{};var t=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=ge({props:{className:"mw-le-handle-menu",id:t.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=ge({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var s,i,n,o=function(){s=ge({props:{className:"mw-le-handle-menu-title"}}),i=ge({props:{className:"mw-le-handle-menu-title-text"}}),n=ge({props:{className:"mw-le-handle-menu-title-icon"}}),s.append(i),s.append(n),t.root.prepend(s),t.title=s},r=null;this.getTarget=function(){return r},this.setTarget=function(l){r=l;for(var a=0;a<this.buttons.length;a++)this.buttons[a].config.onTarget&&this.buttons[a].config.onTarget(l,this.buttons[a].button.get(0),t.options.rootScope)},this.setTitle=function(l,a){i.html(l||""),n.html(a||"")},this.buttons=[],this.buildButtons=function(l,a){a=a||this.buttonsHolder,l=l||this.options.buttons,l.forEach(function(d){a.append(t.button(d))})},this.button=function(l){var a=ge({props:{className:"mw-le-handle-menu-button"+(l.className?" "+l.className:"")}}),d={props:{className:"mw-le-handle-menu-button-content"}},h=ge(d);if(l.title&&ld(h,l.title),l.icon){var g=ge({props:{className:"mw-le-handle-menu-button-icon",innerHTML:l.icon}});h.append(g)}if(l.text){var b=ge({props:{className:"mw-le-handle-menu-button-text",innerHTML:l.text}});h.append(b)}if(a.append(h),this.buttons.push({button:a,config:l}),l.menu){var k=ge({props:{className:"mw-le-handle-menu-button-sub-menu"}});a.append(k),t.buildButtons(l.menu,k),a.on("click",function(){this.classList.toggle("sub-menu-active")})}else typeof l.action=="function"&&a.on("click",function(){l.action(t.getTarget(),a.get(0),{dialog:t.options.rootScope.dialog,tooltip:t.options.rootScope.tooltip})});return a},this.init=function(){this.create(),o(),this.setTitle(t.options.title,t.options.icon),this.buildButtons(),this.hide()},this.init()},ad=function(e){this.root=ge({props:{id:"mw-handle-item-element-root"}}),this.menu=new Is({id:"mw-handle-item-element-menu",title:"Element",buttons:[{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,s){},action:function(t){e.dialog({})}},{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(t){}}]}),this.menu.show(),this.root.append(this.menu.root)},cd=function(e){this.root=ge({props:{id:"mw-handle-item-module-root",contentEditable:!1}});var t=new Is({id:"mw-handle-item-element-menu-default",title:"Module",rootScope:e,buttons:[{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',action:()=>{const s=mw.app.get("liveEdit").handles.get("module").getTarget();mw.app.editor.dispatch("onModuleSettingsRequest",s);var i=s.dataset.type||s.getAttribute("type");i=i.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+i,s)}}]});this.menu=new Is({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,buttons:[]}),this.menu.show(),t.show(),this.root.append(this.menu.root),this.root.append(t.root)},ud=(e,t)=>{const s=ge({props:{className:"le-dialog-footer"}}),i=ge({props:{className:"le-btn le-btn-primary le-dialog-footer-ok",innerHTML:e||"OK"}}),n=ge({props:{className:"le-btn le-dialog-footer-cancel"}});return s.append(n),s.append(i),{ok:i,cancel:n,footer:s}};var os,pi,ro;class Kl{constructor(t){ht(this,pi);ht(this,os,{});t=t||{};const s={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},s,t),this.build(),setTimeout(i=>this.open())}on(t,s){G(this,os)[t]?G(this,os)[t].push(s):G(this,os)[t]=[s]}dispatch(t,s){G(this,os)[t]&&G(this,os)[t].forEach(i=>{i.call(this,s)})}build(){this.root=ge({props:{className:`le-dialog ${typeof this.settings.position=="string"?this.settings.position:""}`}});var t=ge({props:{className:"le-dialog-close"}});t.on("click",()=>{this.remove()}),this.container=ge({props:{className:"le-dialog-container"},content:this.settings.content}),this.root.append(t),this.root.append(this.container),this.settings.footer&&this.root.append(this.settings.footer.root||this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this.settings.closeOnEscape&&this.settings.document.addEventListener("keydown",kt(this,pi,ro)),this.settings.overlay&&this.overlay()}open(){if(this.settings.position.nodeName&&this.settings.position.ownerDocument===this.settings.document){var t=this.settings.position;t.ownerDocument;var s=t.ownerDocument.defaultView,i=t.getBoundingClientRect(),n=i.top+s.scrollY,o=i.left+t.offsetWidth+s.scrollX,r=this.root.get(0);n+r.offsetHeight>s.innerHeight+s.scrollY&&(n-=n+r.offsetHeight-(s.innerHeight+s.scrollY)),o+r.offsetWidth>s.innerWidth&&(o-=o+r.offsetWidth-s.innerWidth),this.root.css({top:n,left:o,position:this.settings.mode})}this.root.addClass("le-dialog-opened")}remove(){this.root.on("transitionend",()=>{this.root.remove(),this.overlay&&this.overlay.remove()}),this.root.removeClass("le-dialog-opened"),this.settings.closeOnEscape&&this.settings.document.removeEventListener("keydown",kt(this,pi,ro)),this.dispatch("close")}overlay(){this.overlay=ge({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}os=new WeakMap,pi=new WeakSet,ro=function(t){(t.key==="Escape"||t.keyCode===27)&&this.remove()};const dd=function(e,t){const s=ud(),i=new Kl({content:e,footer:s,position:"centered"});return s.cancel.on("click",function(){i.remove()}),s.ok.on("click",function(){t&&t.call(),i.remove()}),i},hd=function(e){this.root=ge({props:{id:"mw-handle-item-layout-root"}});const t={};this.on=(s,i)=>{t[s]?t[s].push(i):t[s]=[i]},this.dispatch=(s,i)=>{t[s]&&t[s].forEach(n=>{n.call(this,i)})},this.menu=new Is({id:"mw-handle-item-layout-menu",title:e.lang("Layout"),rootScope:e,buttons:[{title:e.lang("Settings"),text:"",icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 13.3 15.9" xml:space="preserve"><path d="M8.2,2.4L11,5.1l-8.2,8.2H0v-2.8L8.2,2.4z M11.8,4.3L9,1.6l1.4-1.4C10.5,0.1,10.7,0,10.9,0c0.2,0,0.4,0.1,0.5,0.2l1.7,1.7c0.1,0.1,0.2,0.3,0.2,0.5S13.3,2.8,13.1,3L11.8,4.3z"/><rect y="14.5" width="12" height="1.4"/></svg>',className:"mw-handle-insert-button",menu:[{title:e.lang("Add something"),text:e.lang("Add something"),icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" version="1.1" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button"},{title:e.lang("Settings1212"),text:"Do alert",className:"mw-handle-insert-button"}]},{title:e.lang("Clone"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>',className:"mw-handle-insert-button",action:function(s,i,n){var o=document.createElement("div");o.innerHTML=s.outerHTML,ge("[id]",o).each(function(){this.id="le-id-"+new Date().getTime()}),ge(s).after(o.innerHTML);var r=s.nextElementSibling;mw.reload_module(r,function(){n.statemanager.record({target:mw.tools.firstParentWithClass(s,"edit"),value:parent.innerHTML})}),r.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})}},{title:e.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(s,i,n){s.nextElementSibling===null?i.style.display="none":i.style.display=""},action:function(s,i,n){n.handles.get("layout").hide();var o=s.nextElementSibling;if(o){var r=s.getBoundingClientRect(),l=o.getBoundingClientRect(),a=0;r.top<l.top&&(a=-(r.top-l.top)),s.classList.add("mw-le-target-to-animate"),o.classList.add("mw-le-target-to-animate"),s.style.transform="translateY("+a+"px)",o.style.transform="translateY("+-a+"px)",setTimeout(function(){o.parentNode.insertBefore(s,o.nextSibling),s.classList.remove("mw-le-target-to-animate"),o.classList.remove("mw-le-target-to-animate"),s.style.transform="",o.style.transform=""},300)}}},{title:e.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(s,i,n){s.previousElementSibling===null?i.style.display="none":i.style.display=""},action:function(s,i,n){n.handles.get("layout").hide();var o=s.previousElementSibling;if(o){var r=s.getBoundingClientRect(),l=o.getBoundingClientRect(),a=0;r.top>l.top&&(a=-(r.top-l.top)),s.classList.add("mw-le-target-to-animate"),o.classList.add("mw-le-target-to-animate"),s.style.transform="translateY("+a+"px)",o.style.transform="translateY("+-a+"px)",setTimeout(function(){o.parentNode.insertBefore(s,o),s.classList.remove("mw-le-target-to-animate"),o.classList.remove("mw-le-target-to-animate"),s.style.transform="",o.style.transform=""},300)}}},{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path  d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(s,i,n){dd("Are you sure",function(){s.remove()})}}]}),this.addButtons=function(){var s="Add Layout",i=n=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+n.charAt(0).toUpperCase()+n.slice(1))};this.plusTop=ge({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:e.lang(s)}}),this.plusBottom=ge({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:e.lang(s)}}),this.plusTop.on("click",function(){i("top")}),this.plusBottom.on("click",function(){i("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.menu.show(),this.addButtons(),this.root.append(this.menu.root)},Fr={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},fd=(e,t)=>((!t||!Fr[t])&&(t="en"),Fr[t][e]||e),md=function(e){this.root=ge({props:{id:"mw-handle-interaction-item-element-root"}}),this.menu=new Is({id:"mw-handle-item-element-menu",title:"Element",buttons:[]}),this.menu.show(),this.root.append(this.menu.root)};class Yl{constructor(t){const s=this,i={};this.on=(k,v)=>{i[k]?i[k].push(v):i[k]=[v]},this.dispatch=(k,v)=>{i[k]&&i[k].forEach(_=>{_.call(this,v)})},this.paused=!1;var n={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=Rt.extend({},n,t),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(k){return fd(k,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new Wl(this.settings),this.dropIndicator=new rd(this.settings);const o=new ad(this),r=new cd(this),l=new hd(this);this.elementHandleContent=o,this.moduleHandleContent=r,this.layoutHandleContent=l,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.dialog=function(k){k||(k={});var v={document:window.top.document,position:r.menu.getTarget(),mode:"absolute"};s.pause();const _=new Kl(Rt.extend({},v,k));return _.on("close",function(){s.play()}),_};var a=this.elementHandle=new Ai({...this.settings,dropIndicator:this.dropIndicator,content:o.root,handle:o.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});a.on("targetChange",function(k){o.menu.setTarget(k)}),this.moduleHandle=new Ai({...this.settings,dropIndicator:this.dropIndicator,content:r.root,handle:r.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});var d=this.moduleHandle;this.getModuleQuickSettings=k=>new Promise(v=>{v(mw.quickSettings[k]),this.dispatch("moduleQuickSettings",{module:k})}),d.on("targetChange",function(k){s.getModuleQuickSettings(k.dataset.type).then(function(v){r.menu.root.remove(),r.menu=new Is({id:"mw-handle-item-element-menu",title:k.dataset.type,rootScope:s,buttons:v?v.mainMenu||[]:[],data:{target:k}}),r.menu.setTarget(k),r.menu.show(),r.root.append(r.menu.root)})}),this.layoutHandle=new Ai({...this.settings,dropIndicator:this.dropIndicator,content:l.root,handle:l.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var h=this.layoutHandle,g=s.lang("Layout");l.menu.setTitle(g),h.on("targetChange",function(k){l.menu.setTarget(k),l.menu.setTitle(g),s.elementAnalyzer.isEditOrInEdit(k)?(l.plusTop.show(),l.plusBottom.show()):(l.plusTop.hide(),l.plusBottom.hide())}),l.handle=h,r.handle=d,o.handle=a;const b=new md;this.interactionHandle=new Ai({...this.settings,content:b.root,document:this.settings.document,resizable:!1,className:"mw-handle-item-interaction-handle"}),this.interactionHandle.menu=b.menu,this.handles=new od({element:a,module:d,layout:h,interactionHandle:this.interactionHandle}),this.observe=new Qu(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}init(){this.settings.mode==="auto"&&nd(this);const t=i=>{if(this.handles.targetIsOrInsideHandle(i))return;const n=this.observe.fromEvent(i),o=n[0];if(this.handles.get("element").set(null),this.handles.get("module").set(null),this.handles.hide(),o){const r=this.elementAnalyzer.getType(o);r&&r!=="edit"&&(this.handles.set(r,n[0]),r==="element"?this.handles.hide("module"):r==="module"?this.handles.hide("element"):r==="layout"?this.handles.set("layout",layout):this.handles.hide())}else{const r=yt.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);r&&this.handles.set("layout",r)}};let s;s="mousedown touchstart",ge(this.root).on("mousemove",i=>{if(this.handles.targetIsOrInsideHandle(i))return;const n=this.observe.fromEvent(i),o=yt.firstParentOrCurrentWithAnyOfClasses(n[0],["element","module"]),r=yt.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);let l=!1;if(r){const d=this.handles.get("element").getTarget(),h=this.handles.get("module").getTarget();r.contains(d)&&(l=!0),r.contains(h)&&(l=!0),l?this.handles.hide("layout"):this.handles.set("layout",r)}if(o&&!this.handles.targetIsSelected(o,this.interactionHandle)&&!o.classList.contains("module-layouts")){var a="";o.dataset.mwTitle?a=o.dataset.mwTitle:o.dataset.type?a=o.dataset.type:o.nodeName==="P"?a=this.lang("Paragraph"):/(H[1-6])/.test(o.nodeName)?a=this.lang("Title")+" "+o.nodeName.replace(/^\D+/g,""):o.nodeName==="IMG"||o.nodeName==="IMAGE"?a=this.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(o.nodeName)?a=this.lang("Title "+o.nodeName.replace("H","")):["DIV","MAIN","SECTION"].includes(o.nodeName)?a=this.lang("Block"):a=this.lang("Text"),this.interactionHandle.menu.setTitle(a),this.interactionHandle.show(),this.interactionHandle.set(o)}else this.interactionHandle.hide()}),ge(this.root).on(s,i=>{this.paused||t(i)})}}globalThis.LiveEdit=Yl;const pd=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:inline-block}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:9;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:none}.mw-handle-item.mw-le-resizable{position:absolute}.mw-handle-item.mw-handle-item-interaction-handle{pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;background-color:#7775757d;pointer-events:none}.mw-le-handle-menu{position:absolute;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;border-radius:7px;border:1px solid transparent;padding:3px 12px;display:inline-flex;align-items:center;background-color:#fff;pointer-events:all;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;position:absolute;top:-40px;left:-3px;transition:.2s;opacity:0;transform:translateY(10px)}.mw-le-handle-menu .mw-le-handle-menu-buttons:empty{display:none!important}.mw-le-handle-menu *{vertical-align:middle}.mw-handle-item.mw-handle-active .mw-le-handle-menu .mw-le-handle-menu-buttons{opacity:1;transform:translateY(0)}#mw-handle-item-element-menu{top:-22px;left:-3px}#mw-handle-item-layout-menu{top:5px;right:5px;left:auto}#mw-handle-item-layout-menu .mw-le-handle-menu-buttons{left:auto;right:5px;top:5px}#mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#000}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#000}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:none;align-items:center;justify-content:center;padding:0 5px;height:20px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:grab;background-color:#0078ff;color:#fff}.mw-handle-item-interaction-handle .mw-le-handle-menu-title{display:inline-flex}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#0078ff;color:#fff;border-radius:7px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#016ce6}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}.mw-handle-item.mw-le-resizable .mw-le-resizer:before,.mw-handle-item.mw-le-resizable .mw-le-resizer:after{position:absolute;width:9px;height:9px;background-color:#fff;border:2px solid #2a84fb;content:""}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before{top:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{top:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{left:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before{bottom:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{bottom:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{top:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before{left:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{left:calc(50% - 4px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before{right:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{right:calc(50% - 5px)}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizer{position:absolute;pointer-events:all}.mw-le-resizer-r{cursor:e-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-l{cursor:e-resize;height:100%;left:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:n-resize;height:5px;left:0;width:100%}.mw-le-resizer-t{top:0;cursor:n-resize;height:5px;left:0;width:100%}mw-le-element{display:block;line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;font-family:Verdana,sans-serif;box-sizing:border-box}.edit,.element,.module{margin-top:20px;padding-top:20px;min-height:100px}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}
`;class gd extends Kt{constructor(){super()}onRegister(){mw.app.editor.on("onModuleSettingsChanged",t=>{mw.app.canvas.getWindow().mw.reload_module("#"+t.moduleId)}),mw.app.editor.on("onModuleSettingsRequest",t=>{var s=t.id,i=t.getAttribute("data-type");mw.dialogIframe({url:route("live_edit.module_settings")+"?id="+s+"&type="+i,width:300,height:500,draggable:!0,template:"mw_modal_simple",title:"Module settings",id:"btn-quick-setting-dialog-"+s})})}}let vd=class extends Kt{reloadStylesheet(t,s){Ts.get(mw.settings.api_url+"template/delete_compiled_css?path="+t+"&option_group="+s).then(function(i){mw.top().notification.success("Reloading styles",7e3);var n=mw.app.canvas.getWindow(),o=n.document.getElementById("theme-style");o&&o.setAttribute("href",i.data.new_file+"&t="+mw.random())})}};const bd=()=>{mw.app.get("canvas").getFrame().parentElement;const t=mw.app.get("canvas").getDocument(),s=t.createElement("style");s.textContent=pd,t.head.prepend(s);const i=new Yl({root:t.body,strict:!1,mode:"auto",document:t});i.on("insertLayoutRequest",function(){mw.app.editor.dispatch("insertLayoutRequest",mw.app.get("liveEdit").handles.get("layout").getTarget())}),mw.app.call("onLiveEditReady"),mw.app.register("liveEdit",i),mw.app.register("state",mw.liveEditState),mw.app.register("editor",Yu),mw.app.register("moduleSettings",gd),mw.app.register("templateSettings",vd)};var Ot,rs,Es,gi,lo,vi,ao,ln,Xl;class Jl{constructor(t={}){ht(this,gi);ht(this,vi);ht(this,ln);ht(this,Ot,null);ht(this,rs,{});pt(this,"selectedCategory","");ht(this,Es,[]);pt(this,"root",null);const s={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},s,t),this.document=this.settings.document}on(t,s){G(this,rs)[t]?G(this,rs)[t].push(s):G(this,rs)[t]=[s]}dispatch(t,s){G(this,rs)[t]&&G(this,rs)[t].forEach(i=>{i.call(this,s)})}getData(){return G(this,Ot)}setData(t,s=!0){Un(this,Ot,t);let i=0,n=G(this,Ot).length;for(;i<n;i++)typeof G(this,Ot)[i].categories=="string"&&(G(this,Ot)[i].categories=G(this,Ot)[i].categories.split(",").map(o=>o.trim()));s&&this.dispatch("dataChanged",G(this,Ot))}prepareCategories(){const t=[],s=this.getData();let i=0,n=s.length;for(;i<n;i++){let r=s[i].categories||"",l=0,a=r.length;for(;l<a;l++){const d=r[l].trim();t.indexOf(d)===-1&&t.push(d)}}t.sort(),this.categories=t}createCategoriesMenu(){const t=this.document.createElement("ul");this.prepareCategories(),t.className="modules-list-categories",t.innerHTML=this.categories.map(s=>`<li data-category="${s}">${s}</li>`).join(""),t.innerHTML=`<li data-category="">All categories</li> ${t.innerHTML}`,t.addEventListener("click",s=>{s.target.nodeName==="LI"&&this.selectCategory(s.target.dataset.category)}),this.categoriesNavigation=t,this.rootShadow.appendChild(t),this.on("categorySelect",s=>{const i=t.querySelectorAll("[data-category]");for(const n of i)n.classList[n.dataset.category===s?"add":"remove"]("active")})}selectCategory(t=""){this.selectedCategory=t,this.search(t),this.dispatch("categorySelect",t)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let t=document.createElement("style");t.textContent=this.settings.css,this.rootShadow.appendChild(t)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let s=0,i=t.length;const n={miscellaneous:kt(this,vi,ao).call(this,"miscellaneous")};for(;s<i;s++)(t[s].categories||["miscellaneous"]).forEach(r=>{n[r]||(n[r]=kt(this,vi,ao).call(this,r));const l=kt(this,gi,lo).call(this,t[s]);G(this,Es).push(l),n[r].appendChild(l),n[r].__$hasNodes=!0});for(const o in n)n[o].__$hasNodes&&this.modulesList.appendChild(n[o]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let s=0,i=t.length;for(;s<i;s++){const n=kt(this,gi,lo).call(this,t[s]);G(this,Es).push(n),this.modulesList.appendChild(n)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(t){t.nodeName&&(t.style.display="none")}showItem(t){t.nodeName&&(t.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",t=>this.search(void 0,this.searchField.value)),this.on("categorySelect",t=>{this.searchField.value=""})}async search(t="",s=""){if(this.settings.searchMode==="local")return kt(this,ln,Xl).call(this,t,s)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(t=>{t(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(t=>{t(this)})}}Ot=new WeakMap,rs=new WeakMap,Es=new WeakMap,gi=new WeakSet,lo=function(t){t.locked=t.description.includes("a");const s=this.document.createElement("div");return s.className="modules-list-block-item modules-list-block-item-is-locked-"+t.locked,s.__$data=t,s.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${t.icon||t.screenshot||t.image})"></div>
            <div class="modules-list-block-item-title">${t.name||t.title}</div>
            <div class="modules-list-block-item-description">${t.description}</div>
            ${t.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,s.addEventListener("click",i=>{i.stopPropagation(),s.__$data.locked?this.dispatch("lockedModuleSelected",{data:t,element:s}):this.dispatch("moduleSelected",{data:t,element:s})}),s.$data=t,s},vi=new WeakSet,ao=function(t){const s=this.document.createElement("div");return s.className="modules-list-block-category-section",s.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+t+"</h5></div>",s.__$hasNodes=!1,s},ln=new WeakSet,Xl=async function(t,s){return t&&(t=t.trim().toLowerCase()),s&&(s=s.trim().toLowerCase()),new Promise(i=>{let n=0,o=G(this,Es).length,r=0;for(;n<o;n++){const l=G(this,Es)[n],a=l.$data;if(t&&a.categories.indexOf(t)===-1){this.hideItem(l);continue}if(s&&(a.name||a.title).toLowerCase().indexOf(s)===-1){this.hideItem(l);continue}this.showItem(l),r++}console.log(s,t),this.modulesListNoResultsNode.style.display=r===0?"":"none",i()})};const Vi=[],Zl=function(e){Vi.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+e}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",t=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(e){(e.key==="Escape"||e.keyCode===27)&&Vi.length>0&&(Vi[0].remove(),Vi.splice(0,1))});var co,Dr=function(e){var t=new Jl({data:co});t.create().then(function(){var s=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),i=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),n=mw.element({props:{className:"mw-le-layouts-dialog-col"}});s.append(i),s.append(n),mw.element(t.root).append(s),i.append(t.searchBlock);var o=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});i.append(o),i.append(t.categoriesNavigation),n.append(t.modulesList),e.append(t.root)})};const yd=()=>{var e=new Zl("mw-le-layouts-dialog"),t=e.dialog;if(co){Dr(t);return}mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(s){return s.json()}).then(function(s){co=s,Dr(t),mw.spinner({element:t.get(0),decorate:!0}).remove()})};var uo,Ir=function(e){var t=new Jl({data:uo});t.createCategorized().then(function(){e.append(t.root)})};const wd=()=>{var e=new Zl("mw-le-modules-dialog"),t=e.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var s=mw.$(this).attr("data-module-name"),i={class:this.className};s==="layout"&&(i.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,s,i,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),uo?Ir(t):(mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(s){return s.json()}).then(function(s){uo=s,Ir(t),mw.spinner({element:t.get(0),decorate:!0}).remove()}))},_d={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return wd()},insertLayout:function(){return yd()}},kd={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await Ts.get(route("api.module.list")+"?layout_type=module").then(e=>{this.modulesListData=e.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(e){if(this.modulesSkinsData[e])return this.modulesSkinsData[e];if(await Ts.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.modulesSkinsData[e]=t.data}),this.modulesSkinsData[e])return this.modulesSkinsData[e]}},xd={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await Ts.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(e=>{this.layoutsListData=e.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var e="layouts";if(this.layoutSkinsData[e])return this.layoutSkinsData[e];if(await Ts.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.layoutSkinsData[e]=t.data}),this.layoutSkinsData[e])return this.layoutSkinsData[e]}};class Cd extends Kt{constructor(){super()}onRegister(){document.addEventListener("keydown",t=>{(t.key==="Enter"||t.keyCode===13)&&this.dispatch("enter",t),(t.key==="Escape"||t.keyCode===27)&&this.dispatch("escape",t),(t.key==="Backspace"||t.keyCode===8)&&this.dispatch("backspace",t),(t.key==="Delete"||t.keyCode===46)&&this.dispatch("delete",t),t.ctrlKey&&t.keyCode===83&&this.dispatch("ctrl+s",t),t.ctrlKey&&t.keyCode===90&&this.dispatch("ctrl+z",t),t.ctrlKey&&t.keyCode===89&&this.dispatch("ctrl+y",t)})}}mw.app=new Tc;const Gl=new Oc,Sd=document.getElementById("live-edit-frame-holder");mw.app.register("canvas",Gl);mw.app.register("commands",_d);mw.app.register("modules",kd);mw.app.register("layouts",xd);mw.app.register("keyboard",Cd);Gl.mount(Sd);mw.app.canvas.on("liveEditBeforeLoaded",function(){mw.app.dispatch("init")});mw.app.canvas.on("liveEditCanvasLoaded",()=>{mw.app.dispatch("ready")});function Ho(e,t){const s=Object.create(null),i=e.split(",");for(let n=0;n<i.length;n++)s[i[n]]=!0;return t?n=>!!s[n.toLowerCase()]:n=>!!s[n]}function Lt(e){if(se(e)){const t={};for(let s=0;s<e.length;s++){const i=e[s],n=Ze(i)?Td(i):Lt(i);if(n)for(const o in n)t[o]=n[o]}return t}else{if(Ze(e))return e;if(Me(e))return e}}const Ed=/;(?![^(]*\))/g,Ld=/:([^]+)/,Ad=/\/\*.*?\*\//gs;function Td(e){const t={};return e.replace(Ad,"").split(Ed).forEach(s=>{if(s){const i=s.split(Ld);i.length>1&&(t[i[0].trim()]=i[1].trim())}}),t}function ut(e){let t="";if(Ze(e))t=e;else if(se(e))for(let s=0;s<e.length;s++){const i=ut(e[s]);i&&(t+=i+" ")}else if(Me(e))for(const s in e)e[s]&&(t+=s+" ");return t.trim()}const Md="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Od=Ho(Md);function Ql(e){return!!e||e===""}function Nd(e,t){if(e.length!==t.length)return!1;let s=!0;for(let i=0;s&&i<e.length;i++)s=hn(e[i],t[i]);return s}function hn(e,t){if(e===t)return!0;let s=Br(e),i=Br(t);if(s||i)return s&&i?e.getTime()===t.getTime():!1;if(s=ai(e),i=ai(t),s||i)return e===t;if(s=se(e),i=se(t),s||i)return s&&i?Nd(e,t):!1;if(s=Me(e),i=Me(t),s||i){if(!s||!i)return!1;const n=Object.keys(e).length,o=Object.keys(t).length;if(n!==o)return!1;for(const r in e){const l=e.hasOwnProperty(r),a=t.hasOwnProperty(r);if(l&&!a||!l&&a||!hn(e[r],t[r]))return!1}}return String(e)===String(t)}function Pd(e,t){return e.findIndex(s=>hn(s,t))}const Ye=e=>Ze(e)?e:e==null?"":se(e)||Me(e)&&(e.toString===sa||!ue(e.toString))?JSON.stringify(e,ea,2):String(e),ea=(e,t)=>t&&t.__v_isRef?ea(e,t.value):Ps(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((s,[i,n])=>(s[`${i} =>`]=n,s),{})}:mn(t)?{[`Set(${t.size})`]:[...t.values()]}:Me(t)&&!se(t)&&!ia(t)?String(t):t,Fe={},Ns=[],At=()=>{},Hd=()=>!1,$d=/^on[^a-z]/,fn=e=>$d.test(e),$o=e=>e.startsWith("onUpdate:"),rt=Object.assign,Ro=(e,t)=>{const s=e.indexOf(t);s>-1&&e.splice(s,1)},Rd=Object.prototype.hasOwnProperty,be=(e,t)=>Rd.call(e,t),se=Array.isArray,Ps=e=>wi(e)==="[object Map]",mn=e=>wi(e)==="[object Set]",Br=e=>wi(e)==="[object Date]",ue=e=>typeof e=="function",Ze=e=>typeof e=="string",ai=e=>typeof e=="symbol",Me=e=>e!==null&&typeof e=="object",ta=e=>Me(e)&&ue(e.then)&&ue(e.catch),sa=Object.prototype.toString,wi=e=>sa.call(e),Fd=e=>wi(e).slice(8,-1),ia=e=>wi(e)==="[object Object]",Fo=e=>Ze(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Ui=Ho(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),pn=e=>{const t=Object.create(null);return s=>t[s]||(t[s]=e(s))},Dd=/-(\w)/g,Ft=pn(e=>e.replace(Dd,(t,s)=>s?s.toUpperCase():"")),Id=/\B([A-Z])/g,Us=pn(e=>e.replace(Id,"-$1").toLowerCase()),gn=pn(e=>e.charAt(0).toUpperCase()+e.slice(1)),Yn=pn(e=>e?`on${gn(e)}`:""),ci=(e,t)=>!Object.is(e,t),ji=(e,t)=>{for(let s=0;s<e.length;s++)e[s](t)},Ji=(e,t,s)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:s})},Xi=e=>{const t=parseFloat(e);return isNaN(t)?e:t},Bd=e=>{const t=Ze(e)?Number(e):NaN;return isNaN(t)?e:t};let zr;const zd=()=>zr||(zr=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});let xt;class Vd{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this.parent=xt,!t&&xt&&(this.index=(xt.scopes||(xt.scopes=[])).push(this)-1)}get active(){return this._active}run(t){if(this._active){const s=xt;try{return xt=this,t()}finally{xt=s}}}on(){xt=this}off(){xt=this.parent}stop(t){if(this._active){let s,i;for(s=0,i=this.effects.length;s<i;s++)this.effects[s].stop();for(s=0,i=this.cleanups.length;s<i;s++)this.cleanups[s]();if(this.scopes)for(s=0,i=this.scopes.length;s<i;s++)this.scopes[s].stop(!0);if(!this.detached&&this.parent&&!t){const n=this.parent.scopes.pop();n&&n!==this&&(this.parent.scopes[this.index]=n,n.index=this.index)}this.parent=void 0,this._active=!1}}}function Ud(e,t=xt){t&&t.active&&t.effects.push(e)}function jd(){return xt}const Do=e=>{const t=new Set(e);return t.w=0,t.n=0,t},na=e=>(e.w&us)>0,oa=e=>(e.n&us)>0,Wd=({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=us},qd=e=>{const{deps:t}=e;if(t.length){let s=0;for(let i=0;i<t.length;i++){const n=t[i];na(n)&&!oa(n)?n.delete(e):t[s++]=n,n.w&=~us,n.n&=~us}t.length=s}},Zi=new WeakMap;let ei=0,us=1;const ho=30;let Ct;const Ls=Symbol(""),fo=Symbol("");class Io{constructor(t,s=null,i){this.fn=t,this.scheduler=s,this.active=!0,this.deps=[],this.parent=void 0,Ud(this,i)}run(){if(!this.active)return this.fn();let t=Ct,s=ls;for(;t;){if(t===this)return;t=t.parent}try{return this.parent=Ct,Ct=this,ls=!0,us=1<<++ei,ei<=ho?Wd(this):Vr(this),this.fn()}finally{ei<=ho&&qd(this),us=1<<--ei,Ct=this.parent,ls=s,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ct===this?this.deferStop=!0:this.active&&(Vr(this),this.onStop&&this.onStop(),this.active=!1)}}function Vr(e){const{deps:t}=e;if(t.length){for(let s=0;s<t.length;s++)t[s].delete(e);t.length=0}}let ls=!0;const ra=[];function js(){ra.push(ls),ls=!1}function Ws(){const e=ra.pop();ls=e===void 0?!0:e}function mt(e,t,s){if(ls&&Ct){let i=Zi.get(e);i||Zi.set(e,i=new Map);let n=i.get(s);n||i.set(s,n=Do()),la(n)}}function la(e,t){let s=!1;ei<=ho?oa(e)||(e.n|=us,s=!na(e)):s=!e.has(Ct),s&&(e.add(Ct),Ct.deps.push(e))}function qt(e,t,s,i,n,o){const r=Zi.get(e);if(!r)return;let l=[];if(t==="clear")l=[...r.values()];else if(s==="length"&&se(e)){const a=Number(i);r.forEach((d,h)=>{(h==="length"||h>=a)&&l.push(d)})}else switch(s!==void 0&&l.push(r.get(s)),t){case"add":se(e)?Fo(s)&&l.push(r.get("length")):(l.push(r.get(Ls)),Ps(e)&&l.push(r.get(fo)));break;case"delete":se(e)||(l.push(r.get(Ls)),Ps(e)&&l.push(r.get(fo)));break;case"set":Ps(e)&&l.push(r.get(Ls));break}if(l.length===1)l[0]&&mo(l[0]);else{const a=[];for(const d of l)d&&a.push(...d);mo(Do(a))}}function mo(e,t){const s=se(e)?e:[...e];for(const i of s)i.computed&&Ur(i);for(const i of s)i.computed||Ur(i)}function Ur(e,t){(e!==Ct||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}function Kd(e,t){var s;return(s=Zi.get(e))===null||s===void 0?void 0:s.get(t)}const Yd=Ho("__proto__,__v_isRef,__isVue"),aa=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(ai)),Jd=Bo(),Xd=Bo(!1,!0),Zd=Bo(!0),jr=Gd();function Gd(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...s){const i=we(this);for(let o=0,r=this.length;o<r;o++)mt(i,"get",o+"");const n=i[t](...s);return n===-1||n===!1?i[t](...s.map(we)):n}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...s){js();const i=we(this)[t].apply(this,s);return Ws(),i}}),e}function Qd(e){const t=we(this);return mt(t,"has",e),t.hasOwnProperty(e)}function Bo(e=!1,t=!1){return function(i,n,o){if(n==="__v_isReactive")return!e;if(n==="__v_isReadonly")return e;if(n==="__v_isShallow")return t;if(n==="__v_raw"&&o===(e?t?ph:fa:t?ha:da).get(i))return i;const r=se(i);if(!e){if(r&&be(jr,n))return Reflect.get(jr,n,o);if(n==="hasOwnProperty")return Qd}const l=Reflect.get(i,n,o);return(ai(n)?aa.has(n):Yd(n))||(e||mt(i,"get",n),t)?l:nt(l)?r&&Fo(n)?l:l.value:Me(l)?e?ma(l):Uo(l):l}}const eh=ca(),th=ca(!0);function ca(e=!1){return function(s,i,n,o){let r=s[i];if(Bs(r)&&nt(r)&&!nt(n))return!1;if(!e&&(!Gi(n)&&!Bs(n)&&(r=we(r),n=we(n)),!se(s)&&nt(r)&&!nt(n)))return r.value=n,!0;const l=se(s)&&Fo(i)?Number(i)<s.length:be(s,i),a=Reflect.set(s,i,n,o);return s===we(o)&&(l?ci(n,r)&&qt(s,"set",i,n):qt(s,"add",i,n)),a}}function sh(e,t){const s=be(e,t);e[t];const i=Reflect.deleteProperty(e,t);return i&&s&&qt(e,"delete",t,void 0),i}function ih(e,t){const s=Reflect.has(e,t);return(!ai(t)||!aa.has(t))&&mt(e,"has",t),s}function nh(e){return mt(e,"iterate",se(e)?"length":Ls),Reflect.ownKeys(e)}const ua={get:Jd,set:eh,deleteProperty:sh,has:ih,ownKeys:nh},oh={get:Zd,set(e,t){return!0},deleteProperty(e,t){return!0}},rh=rt({},ua,{get:Xd,set:th}),zo=e=>e,vn=e=>Reflect.getPrototypeOf(e);function Mi(e,t,s=!1,i=!1){e=e.__v_raw;const n=we(e),o=we(t);s||(t!==o&&mt(n,"get",t),mt(n,"get",o));const{has:r}=vn(n),l=i?zo:s?Wo:ui;if(r.call(n,t))return l(e.get(t));if(r.call(n,o))return l(e.get(o));e!==n&&e.get(t)}function Oi(e,t=!1){const s=this.__v_raw,i=we(s),n=we(e);return t||(e!==n&&mt(i,"has",e),mt(i,"has",n)),e===n?s.has(e):s.has(e)||s.has(n)}function Ni(e,t=!1){return e=e.__v_raw,!t&&mt(we(e),"iterate",Ls),Reflect.get(e,"size",e)}function Wr(e){e=we(e);const t=we(this);return vn(t).has.call(t,e)||(t.add(e),qt(t,"add",e,e)),this}function qr(e,t){t=we(t);const s=we(this),{has:i,get:n}=vn(s);let o=i.call(s,e);o||(e=we(e),o=i.call(s,e));const r=n.call(s,e);return s.set(e,t),o?ci(t,r)&&qt(s,"set",e,t):qt(s,"add",e,t),this}function Kr(e){const t=we(this),{has:s,get:i}=vn(t);let n=s.call(t,e);n||(e=we(e),n=s.call(t,e)),i&&i.call(t,e);const o=t.delete(e);return n&&qt(t,"delete",e,void 0),o}function Yr(){const e=we(this),t=e.size!==0,s=e.clear();return t&&qt(e,"clear",void 0,void 0),s}function Pi(e,t){return function(i,n){const o=this,r=o.__v_raw,l=we(r),a=t?zo:e?Wo:ui;return!e&&mt(l,"iterate",Ls),r.forEach((d,h)=>i.call(n,a(d),a(h),o))}}function Hi(e,t,s){return function(...i){const n=this.__v_raw,o=we(n),r=Ps(o),l=e==="entries"||e===Symbol.iterator&&r,a=e==="keys"&&r,d=n[e](...i),h=s?zo:t?Wo:ui;return!t&&mt(o,"iterate",a?fo:Ls),{next(){const{value:g,done:b}=d.next();return b?{value:g,done:b}:{value:l?[h(g[0]),h(g[1])]:h(g),done:b}},[Symbol.iterator](){return this}}}}function es(e){return function(...t){return e==="delete"?!1:this}}function lh(){const e={get(o){return Mi(this,o)},get size(){return Ni(this)},has:Oi,add:Wr,set:qr,delete:Kr,clear:Yr,forEach:Pi(!1,!1)},t={get(o){return Mi(this,o,!1,!0)},get size(){return Ni(this)},has:Oi,add:Wr,set:qr,delete:Kr,clear:Yr,forEach:Pi(!1,!0)},s={get(o){return Mi(this,o,!0)},get size(){return Ni(this,!0)},has(o){return Oi.call(this,o,!0)},add:es("add"),set:es("set"),delete:es("delete"),clear:es("clear"),forEach:Pi(!0,!1)},i={get(o){return Mi(this,o,!0,!0)},get size(){return Ni(this,!0)},has(o){return Oi.call(this,o,!0)},add:es("add"),set:es("set"),delete:es("delete"),clear:es("clear"),forEach:Pi(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(o=>{e[o]=Hi(o,!1,!1),s[o]=Hi(o,!0,!1),t[o]=Hi(o,!1,!0),i[o]=Hi(o,!0,!0)}),[e,s,t,i]}const[ah,ch,uh,dh]=lh();function Vo(e,t){const s=t?e?dh:uh:e?ch:ah;return(i,n,o)=>n==="__v_isReactive"?!e:n==="__v_isReadonly"?e:n==="__v_raw"?i:Reflect.get(be(s,n)&&n in i?s:i,n,o)}const hh={get:Vo(!1,!1)},fh={get:Vo(!1,!0)},mh={get:Vo(!0,!1)},da=new WeakMap,ha=new WeakMap,fa=new WeakMap,ph=new WeakMap;function gh(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function vh(e){return e.__v_skip||!Object.isExtensible(e)?0:gh(Fd(e))}function Uo(e){return Bs(e)?e:jo(e,!1,ua,hh,da)}function bh(e){return jo(e,!1,rh,fh,ha)}function ma(e){return jo(e,!0,oh,mh,fa)}function jo(e,t,s,i,n){if(!Me(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const o=n.get(e);if(o)return o;const r=vh(e);if(r===0)return e;const l=new Proxy(e,r===2?i:s);return n.set(e,l),l}function Hs(e){return Bs(e)?Hs(e.__v_raw):!!(e&&e.__v_isReactive)}function Bs(e){return!!(e&&e.__v_isReadonly)}function Gi(e){return!!(e&&e.__v_isShallow)}function pa(e){return Hs(e)||Bs(e)}function we(e){const t=e&&e.__v_raw;return t?we(t):e}function ga(e){return Ji(e,"__v_skip",!0),e}const ui=e=>Me(e)?Uo(e):e,Wo=e=>Me(e)?ma(e):e;function va(e){ls&&Ct&&(e=we(e),la(e.dep||(e.dep=Do())))}function ba(e,t){e=we(e);const s=e.dep;s&&mo(s)}function nt(e){return!!(e&&e.__v_isRef===!0)}function Pt(e){return yh(e,!1)}function yh(e,t){return nt(e)?e:new wh(e,t)}class wh{constructor(t,s){this.__v_isShallow=s,this.dep=void 0,this.__v_isRef=!0,this._rawValue=s?t:we(t),this._value=s?t:ui(t)}get value(){return va(this),this._value}set value(t){const s=this.__v_isShallow||Gi(t)||Bs(t);t=s?t:we(t),ci(t,this._rawValue)&&(this._rawValue=t,this._value=s?t:ui(t),ba(this))}}function ti(e){return nt(e)?e.value:e}const _h={get:(e,t,s)=>ti(Reflect.get(e,t,s)),set:(e,t,s,i)=>{const n=e[t];return nt(n)&&!nt(s)?(n.value=s,!0):Reflect.set(e,t,s,i)}};function ya(e){return Hs(e)?e:new Proxy(e,_h)}function si(e){const t=se(e)?new Array(e.length):{};for(const s in e)t[s]=xh(e,s);return t}class kh{constructor(t,s,i){this._object=t,this._key=s,this._defaultValue=i,this.__v_isRef=!0}get value(){const t=this._object[this._key];return t===void 0?this._defaultValue:t}set value(t){this._object[this._key]=t}get dep(){return Kd(we(this._object),this._key)}}function xh(e,t,s){const i=e[t];return nt(i)?i:new kh(e,t,s)}var wa;class Ch{constructor(t,s,i,n){this._setter=s,this.dep=void 0,this.__v_isRef=!0,this[wa]=!1,this._dirty=!0,this.effect=new Io(t,()=>{this._dirty||(this._dirty=!0,ba(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!n,this.__v_isReadonly=i}get value(){const t=we(this);return va(t),(t._dirty||!t._cacheable)&&(t._dirty=!1,t._value=t.effect.run()),t._value}set value(t){this._setter(t)}}wa="__v_isReadonly";function Sh(e,t,s=!1){let i,n;const o=ue(e);return o?(i=e,n=At):(i=e.get,n=e.set),new Ch(i,n,o||!n,s)}function as(e,t,s,i){let n;try{n=i?e(...i):e()}catch(o){bn(o,t,s)}return n}function wt(e,t,s,i){if(ue(e)){const o=as(e,t,s,i);return o&&ta(o)&&o.catch(r=>{bn(r,t,s)}),o}const n=[];for(let o=0;o<e.length;o++)n.push(wt(e[o],t,s,i));return n}function bn(e,t,s,i=!0){const n=t?t.vnode:null;if(t){let o=t.parent;const r=t.proxy,l=s;for(;o;){const d=o.ec;if(d){for(let h=0;h<d.length;h++)if(d[h](e,r,l)===!1)return}o=o.parent}const a=t.appContext.config.errorHandler;if(a){as(a,null,10,[e,r,l]);return}}Eh(e,s,n,i)}function Eh(e,t,s,i=!0){console.error(e)}let di=!1,po=!1;const lt=[];let Ht=0;const $s=[];let Ut=null,_s=0;const _a=Promise.resolve();let qo=null;function ka(e){const t=qo||_a;return e?t.then(this?e.bind(this):e):t}function Lh(e){let t=Ht+1,s=lt.length;for(;t<s;){const i=t+s>>>1;hi(lt[i])<e?t=i+1:s=i}return t}function Ko(e){(!lt.length||!lt.includes(e,di&&e.allowRecurse?Ht+1:Ht))&&(e.id==null?lt.push(e):lt.splice(Lh(e.id),0,e),xa())}function xa(){!di&&!po&&(po=!0,qo=_a.then(Sa))}function Ah(e){const t=lt.indexOf(e);t>Ht&&lt.splice(t,1)}function Th(e){se(e)?$s.push(...e):(!Ut||!Ut.includes(e,e.allowRecurse?_s+1:_s))&&$s.push(e),xa()}function Jr(e,t=di?Ht+1:0){for(;t<lt.length;t++){const s=lt[t];s&&s.pre&&(lt.splice(t,1),t--,s())}}function Ca(e){if($s.length){const t=[...new Set($s)];if($s.length=0,Ut){Ut.push(...t);return}for(Ut=t,Ut.sort((s,i)=>hi(s)-hi(i)),_s=0;_s<Ut.length;_s++)Ut[_s]();Ut=null,_s=0}}const hi=e=>e.id==null?1/0:e.id,Mh=(e,t)=>{const s=hi(e)-hi(t);if(s===0){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return s};function Sa(e){po=!1,di=!0,lt.sort(Mh);const t=At;try{for(Ht=0;Ht<lt.length;Ht++){const s=lt[Ht];s&&s.active!==!1&&as(s,null,14)}}finally{Ht=0,lt.length=0,Ca(),di=!1,qo=null,(lt.length||$s.length)&&Sa()}}function Oh(e,t,...s){if(e.isUnmounted)return;const i=e.vnode.props||Fe;let n=s;const o=t.startsWith("update:"),r=o&&t.slice(7);if(r&&r in i){const h=`${r==="modelValue"?"model":r}Modifiers`,{number:g,trim:b}=i[h]||Fe;b&&(n=s.map(k=>Ze(k)?k.trim():k)),g&&(n=s.map(Xi))}let l,a=i[l=Yn(t)]||i[l=Yn(Ft(t))];!a&&o&&(a=i[l=Yn(Us(t))]),a&&wt(a,e,6,n);const d=i[l+"Once"];if(d){if(!e.emitted)e.emitted={};else if(e.emitted[l])return;e.emitted[l]=!0,wt(d,e,6,n)}}function Ea(e,t,s=!1){const i=t.emitsCache,n=i.get(e);if(n!==void 0)return n;const o=e.emits;let r={},l=!1;if(!ue(e)){const a=d=>{const h=Ea(d,t,!0);h&&(l=!0,rt(r,h))};!s&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}return!o&&!l?(Me(e)&&i.set(e,null),null):(se(o)?o.forEach(a=>r[a]=null):rt(r,o),Me(e)&&i.set(e,r),r)}function yn(e,t){return!e||!fn(t)?!1:(t=t.slice(2).replace(/Once$/,""),be(e,t[0].toLowerCase()+t.slice(1))||be(e,Us(t))||be(e,t))}let ot=null,La=null;function Qi(e){const t=ot;return ot=e,La=e&&e.type.__scopeId||null,t}function ii(e,t=ot,s){if(!t||e._n)return e;const i=(...n)=>{i._d&&ol(-1);const o=Qi(t);let r;try{r=e(...n)}finally{Qi(o),i._d&&ol(1)}return r};return i._n=!0,i._c=!0,i._d=!0,i}function Jn(e){const{type:t,vnode:s,proxy:i,withProxy:n,props:o,propsOptions:[r],slots:l,attrs:a,emit:d,render:h,renderCache:g,data:b,setupState:k,ctx:v,inheritAttrs:_}=e;let E,P;const Y=Qi(e);try{if(s.shapeFlag&4){const ie=n||i;E=Nt(h.call(ie,ie,g,o,k,b,v)),P=a}else{const ie=t;E=Nt(ie.length>1?ie(o,{attrs:a,slots:l,emit:d}):ie(o,null)),P=t.props?a:Nh(a)}}catch(ie){ri.length=0,bn(ie,e,1),E=U(_t)}let K=E;if(P&&_!==!1){const ie=Object.keys(P),{shapeFlag:le}=K;ie.length&&le&7&&(r&&ie.some($o)&&(P=Ph(P,r)),K=ds(K,P))}return s.dirs&&(K=ds(K),K.dirs=K.dirs?K.dirs.concat(s.dirs):s.dirs),s.transition&&(K.transition=s.transition),E=K,Qi(Y),E}const Nh=e=>{let t;for(const s in e)(s==="class"||s==="style"||fn(s))&&((t||(t={}))[s]=e[s]);return t},Ph=(e,t)=>{const s={};for(const i in e)(!$o(i)||!(i.slice(9)in t))&&(s[i]=e[i]);return s};function Hh(e,t,s){const{props:i,children:n,component:o}=e,{props:r,children:l,patchFlag:a}=t,d=o.emitsOptions;if(t.dirs||t.transition)return!0;if(s&&a>=0){if(a&1024)return!0;if(a&16)return i?Xr(i,r,d):!!r;if(a&8){const h=t.dynamicProps;for(let g=0;g<h.length;g++){const b=h[g];if(r[b]!==i[b]&&!yn(d,b))return!0}}}else return(n||l)&&(!l||!l.$stable)?!0:i===r?!1:i?r?Xr(i,r,d):!0:!!r;return!1}function Xr(e,t,s){const i=Object.keys(t);if(i.length!==Object.keys(e).length)return!0;for(let n=0;n<i.length;n++){const o=i[n];if(t[o]!==e[o]&&!yn(s,o))return!0}return!1}function $h({vnode:e,parent:t},s){for(;t&&t.subTree===e;)(e=t.vnode).el=s,t=t.parent}const Rh=e=>e.__isSuspense;function Fh(e,t){t&&t.pendingBranch?se(e)?t.effects.push(...e):t.effects.push(e):Th(e)}function Dh(e,t){if(Je){let s=Je.provides;const i=Je.parent&&Je.parent.provides;i===s&&(s=Je.provides=Object.create(i)),s[e]=t}}function Wi(e,t,s=!1){const i=Je||ot;if(i){const n=i.parent==null?i.vnode.appContext&&i.vnode.appContext.provides:i.parent.provides;if(n&&e in n)return n[e];if(arguments.length>1)return s&&ue(t)?t.call(i.proxy):t}}const $i={};function it(e,t,s){return Aa(e,t,s)}function Aa(e,t,{immediate:s,deep:i,flush:n,onTrack:o,onTrigger:r}=Fe){const l=jd()===(Je==null?void 0:Je.scope)?Je:null;let a,d=!1,h=!1;if(nt(e)?(a=()=>e.value,d=Gi(e)):Hs(e)?(a=()=>e,i=!0):se(e)?(h=!0,d=e.some(K=>Hs(K)||Gi(K)),a=()=>e.map(K=>{if(nt(K))return K.value;if(Hs(K))return Ss(K);if(ue(K))return as(K,l,2)})):ue(e)?t?a=()=>as(e,l,2):a=()=>{if(!(l&&l.isUnmounted))return g&&g(),wt(e,l,3,[b])}:a=At,t&&i){const K=a;a=()=>Ss(K())}let g,b=K=>{g=P.onStop=()=>{as(K,l,4)}},k;if(mi)if(b=At,t?s&&wt(t,l,3,[a(),h?[]:void 0,b]):a(),n==="sync"){const K=Hf();k=K.__watcherHandles||(K.__watcherHandles=[])}else return At;let v=h?new Array(e.length).fill($i):$i;const _=()=>{if(P.active)if(t){const K=P.run();(i||d||(h?K.some((ie,le)=>ci(ie,v[le])):ci(K,v)))&&(g&&g(),wt(t,l,3,[K,v===$i?void 0:h&&v[0]===$i?[]:v,b]),v=K)}else P.run()};_.allowRecurse=!!t;let E;n==="sync"?E=_:n==="post"?E=()=>ft(_,l&&l.suspense):(_.pre=!0,l&&(_.id=l.uid),E=()=>Ko(_));const P=new Io(a,E);t?s?_():v=P.run():n==="post"?ft(P.run.bind(P),l&&l.suspense):P.run();const Y=()=>{P.stop(),l&&l.scope&&Ro(l.scope.effects,P)};return k&&k.push(Y),Y}function Ih(e,t,s){const i=this.proxy,n=Ze(e)?e.includes(".")?Ta(i,e):()=>i[e]:e.bind(i,i);let o;ue(t)?o=t:(o=t.handler,s=t);const r=Je;zs(this);const l=Aa(n,o.bind(i),s);return r?zs(r):As(),l}function Ta(e,t){const s=t.split(".");return()=>{let i=e;for(let n=0;n<s.length&&i;n++)i=i[s[n]];return i}}function Ss(e,t){if(!Me(e)||e.__v_skip||(t=t||new Set,t.has(e)))return e;if(t.add(e),nt(e))Ss(e.value,t);else if(se(e))for(let s=0;s<e.length;s++)Ss(e[s],t);else if(mn(e)||Ps(e))e.forEach(s=>{Ss(s,t)});else if(ia(e))for(const s in e)Ss(e[s],t);return e}function Bh(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return kn(()=>{e.isMounted=!0}),Yo(()=>{e.isUnmounting=!0}),e}const gt=[Function,Array],zh={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:gt,onEnter:gt,onAfterEnter:gt,onEnterCancelled:gt,onBeforeLeave:gt,onLeave:gt,onAfterLeave:gt,onLeaveCancelled:gt,onBeforeAppear:gt,onAppear:gt,onAfterAppear:gt,onAppearCancelled:gt},setup(e,{slots:t}){const s=Sf(),i=Bh();let n;return()=>{const o=t.default&&Na(t.default(),!0);if(!o||!o.length)return;let r=o[0];if(o.length>1){for(const _ of o)if(_.type!==_t){r=_;break}}const l=we(e),{mode:a}=l;if(i.isLeaving)return Xn(r);const d=Zr(r);if(!d)return Xn(r);const h=go(d,l,i,s);vo(d,h);const g=s.subTree,b=g&&Zr(g);let k=!1;const{getTransitionKey:v}=d.type;if(v){const _=v();n===void 0?n=_:_!==n&&(n=_,k=!0)}if(b&&b.type!==_t&&(!ks(d,b)||k)){const _=go(b,l,i,s);if(vo(b,_),a==="out-in")return i.isLeaving=!0,_.afterLeave=()=>{i.isLeaving=!1,s.update.active!==!1&&s.update()},Xn(r);a==="in-out"&&d.type!==_t&&(_.delayLeave=(E,P,Y)=>{const K=Oa(i,b);K[String(b.key)]=b,E._leaveCb=()=>{P(),E._leaveCb=void 0,delete h.delayedLeave},h.delayedLeave=Y})}return r}}},Ma=zh;function Oa(e,t){const{leavingVNodes:s}=e;let i=s.get(t.type);return i||(i=Object.create(null),s.set(t.type,i)),i}function go(e,t,s,i){const{appear:n,mode:o,persisted:r=!1,onBeforeEnter:l,onEnter:a,onAfterEnter:d,onEnterCancelled:h,onBeforeLeave:g,onLeave:b,onAfterLeave:k,onLeaveCancelled:v,onBeforeAppear:_,onAppear:E,onAfterAppear:P,onAppearCancelled:Y}=t,K=String(e.key),ie=Oa(s,e),le=(X,W)=>{X&&wt(X,i,9,W)},He=(X,W)=>{const he=W[1];le(X,W),se(X)?X.every(de=>de.length<=1)&&he():X.length<=1&&he()},xe={mode:o,persisted:r,beforeEnter(X){let W=l;if(!s.isMounted)if(n)W=_||l;else return;X._leaveCb&&X._leaveCb(!0);const he=ie[K];he&&ks(e,he)&&he.el._leaveCb&&he.el._leaveCb(),le(W,[X])},enter(X){let W=a,he=d,de=h;if(!s.isMounted)if(n)W=E||a,he=P||d,de=Y||h;else return;let z=!1;const pe=X._enterCb=Ce=>{z||(z=!0,Ce?le(de,[X]):le(he,[X]),xe.delayedLeave&&xe.delayedLeave(),X._enterCb=void 0)};W?He(W,[X,pe]):pe()},leave(X,W){const he=String(e.key);if(X._enterCb&&X._enterCb(!0),s.isUnmounting)return W();le(g,[X]);let de=!1;const z=X._leaveCb=pe=>{de||(de=!0,W(),pe?le(v,[X]):le(k,[X]),X._leaveCb=void 0,ie[he]===e&&delete ie[he])};ie[he]=e,b?He(b,[X,z]):z()},clone(X){return go(X,t,s,i)}};return xe}function Xn(e){if(wn(e))return e=ds(e),e.children=null,e}function Zr(e){return wn(e)?e.children?e.children[0]:void 0:e}function vo(e,t){e.shapeFlag&6&&e.component?vo(e.component.subTree,t):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Na(e,t=!1,s){let i=[],n=0;for(let o=0;o<e.length;o++){let r=e[o];const l=s==null?r.key:String(s)+String(r.key!=null?r.key:o);r.type===Pe?(r.patchFlag&128&&n++,i=i.concat(Na(r.children,t,l))):(t||r.type!==_t)&&i.push(l!=null?ds(r,{key:l}):r)}if(n>1)for(let o=0;o<i.length;o++)i[o].patchFlag=-2;return i}function Jt(e){return ue(e)?{setup:e,name:e.name}:e}const ni=e=>!!e.type.__asyncLoader,wn=e=>e.type.__isKeepAlive;function Vh(e,t){Pa(e,"a",t)}function Uh(e,t){Pa(e,"da",t)}function Pa(e,t,s=Je){const i=e.__wdc||(e.__wdc=()=>{let n=s;for(;n;){if(n.isDeactivated)return;n=n.parent}return e()});if(_n(t,i,s),s){let n=s.parent;for(;n&&n.parent;)wn(n.parent.vnode)&&jh(i,t,s,n),n=n.parent}}function jh(e,t,s,i){const n=_n(t,e,i,!0);xn(()=>{Ro(i[t],n)},s)}function _n(e,t,s=Je,i=!1){if(s){const n=s[e]||(s[e]=[]),o=t.__weh||(t.__weh=(...r)=>{if(s.isUnmounted)return;js(),zs(s);const l=wt(t,s,e,r);return As(),Ws(),l});return i?n.unshift(o):n.push(o),o}}const Xt=e=>(t,s=Je)=>(!mi||e==="sp")&&_n(e,(...i)=>t(...i),s),Wh=Xt("bm"),kn=Xt("m"),qh=Xt("bu"),Kh=Xt("u"),Yo=Xt("bum"),xn=Xt("um"),Yh=Xt("sp"),Jh=Xt("rtg"),Xh=Xt("rtc");function Zh(e,t=Je){_n("ec",e,t)}function _i(e,t){const s=ot;if(s===null)return e;const i=An(s)||s.proxy,n=e.dirs||(e.dirs=[]);for(let o=0;o<t.length;o++){let[r,l,a,d=Fe]=t[o];r&&(ue(r)&&(r={mounted:r,updated:r}),r.deep&&Ss(l),n.push({dir:r,instance:i,value:l,oldValue:void 0,arg:a,modifiers:d}))}return e}function ms(e,t,s,i){const n=e.dirs,o=t&&t.dirs;for(let r=0;r<n.length;r++){const l=n[r];o&&(l.oldValue=o[r].value);let a=l.dir[i];a&&(js(),wt(a,s,8,[e.el,l,e,t]),Ws())}}const Ha="components",Gh="directives";function De(e,t){return $a(Ha,e,!0,t)||e}const Qh=Symbol();function ef(e){return $a(Gh,e)}function $a(e,t,s=!0,i=!1){const n=ot||Je;if(n){const o=n.type;if(e===Ha){const l=Mf(o,!1);if(l&&(l===t||l===Ft(t)||l===gn(Ft(t))))return o}const r=Gr(n[e]||o[e],t)||Gr(n.appContext[e],t);return!r&&i?o:r}}function Gr(e,t){return e&&(e[t]||e[Ft(t)]||e[gn(Ft(t))])}function St(e,t,s,i){let n;const o=s&&s[i];if(se(e)||Ze(e)){n=new Array(e.length);for(let r=0,l=e.length;r<l;r++)n[r]=t(e[r],r,void 0,o&&o[r])}else if(typeof e=="number"){n=new Array(e);for(let r=0;r<e;r++)n[r]=t(r+1,r,void 0,o&&o[r])}else if(Me(e))if(e[Symbol.iterator])n=Array.from(e,(r,l)=>t(r,l,void 0,o&&o[l]));else{const r=Object.keys(e);n=new Array(r.length);for(let l=0,a=r.length;l<a;l++){const d=r[l];n[l]=t(e[d],d,l,o&&o[l])}}else n=[];return s&&(s[i]=n),n}function en(e,t,s={},i,n){if(ot.isCE||ot.parent&&ni(ot.parent)&&ot.parent.isCE)return t!=="default"&&(s.name=t),U("slot",s,i&&i());let o=e[t];o&&o._c&&(o._d=!1),N();const r=o&&Ra(o(s)),l=Be(Pe,{key:s.key||r&&r.key||`_${t}`},r||(i?i():[]),r&&e._===1?64:-2);return!n&&l.scopeId&&(l.slotScopeIds=[l.scopeId+"-s"]),o&&o._c&&(o._d=!0),l}function Ra(e){return e.some(t=>sn(t)?!(t.type===_t||t.type===Pe&&!Ra(t.children)):!0)?e:null}const bo=e=>e?Ya(e)?An(e)||e.proxy:bo(e.parent):null,oi=rt(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>bo(e.parent),$root:e=>bo(e.root),$emit:e=>e.emit,$options:e=>Jo(e),$forceUpdate:e=>e.f||(e.f=()=>Ko(e.update)),$nextTick:e=>e.n||(e.n=ka.bind(e.proxy)),$watch:e=>Ih.bind(e)}),Zn=(e,t)=>e!==Fe&&!e.__isScriptSetup&&be(e,t),tf={get({_:e},t){const{ctx:s,setupState:i,data:n,props:o,accessCache:r,type:l,appContext:a}=e;let d;if(t[0]!=="$"){const k=r[t];if(k!==void 0)switch(k){case 1:return i[t];case 2:return n[t];case 4:return s[t];case 3:return o[t]}else{if(Zn(i,t))return r[t]=1,i[t];if(n!==Fe&&be(n,t))return r[t]=2,n[t];if((d=e.propsOptions[0])&&be(d,t))return r[t]=3,o[t];if(s!==Fe&&be(s,t))return r[t]=4,s[t];yo&&(r[t]=0)}}const h=oi[t];let g,b;if(h)return t==="$attrs"&&mt(e,"get",t),h(e);if((g=l.__cssModules)&&(g=g[t]))return g;if(s!==Fe&&be(s,t))return r[t]=4,s[t];if(b=a.config.globalProperties,be(b,t))return b[t]},set({_:e},t,s){const{data:i,setupState:n,ctx:o}=e;return Zn(n,t)?(n[t]=s,!0):i!==Fe&&be(i,t)?(i[t]=s,!0):be(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(o[t]=s,!0)},has({_:{data:e,setupState:t,accessCache:s,ctx:i,appContext:n,propsOptions:o}},r){let l;return!!s[r]||e!==Fe&&be(e,r)||Zn(t,r)||(l=o[0])&&be(l,r)||be(i,r)||be(oi,r)||be(n.config.globalProperties,r)},defineProperty(e,t,s){return s.get!=null?e._.accessCache[t]=0:be(s,"value")&&this.set(e,t,s.value,null),Reflect.defineProperty(e,t,s)}};let yo=!0;function sf(e){const t=Jo(e),s=e.proxy,i=e.ctx;yo=!1,t.beforeCreate&&Qr(t.beforeCreate,e,"bc");const{data:n,computed:o,methods:r,watch:l,provide:a,inject:d,created:h,beforeMount:g,mounted:b,beforeUpdate:k,updated:v,activated:_,deactivated:E,beforeDestroy:P,beforeUnmount:Y,destroyed:K,unmounted:ie,render:le,renderTracked:He,renderTriggered:xe,errorCaptured:X,serverPrefetch:W,expose:he,inheritAttrs:de,components:z,directives:pe,filters:Ce}=t;if(d&&nf(d,i,null,e.appContext.config.unwrapInjectedRef),r)for(const Se in r){const ve=r[Se];ue(ve)&&(i[Se]=ve.bind(s))}if(n){const Se=n.call(s,s);Me(Se)&&(e.data=Uo(Se))}if(yo=!0,o)for(const Se in o){const ve=o[Se],$e=ue(ve)?ve.bind(s,s):ue(ve.get)?ve.get.bind(s,s):At,Oe=!ue(ve)&&ue(ve.set)?ve.set.bind(s):At,Ue=jt({get:$e,set:Oe});Object.defineProperty(i,Se,{enumerable:!0,configurable:!0,get:()=>Ue.value,set:je=>Ue.value=je})}if(l)for(const Se in l)Fa(l[Se],i,s,Se);if(a){const Se=ue(a)?a.call(s):a;Reflect.ownKeys(Se).forEach(ve=>{Dh(ve,Se[ve])})}h&&Qr(h,e,"c");function fe(Se,ve){se(ve)?ve.forEach($e=>Se($e.bind(s))):ve&&Se(ve.bind(s))}if(fe(Wh,g),fe(kn,b),fe(qh,k),fe(Kh,v),fe(Vh,_),fe(Uh,E),fe(Zh,X),fe(Xh,He),fe(Jh,xe),fe(Yo,Y),fe(xn,ie),fe(Yh,W),se(he))if(he.length){const Se=e.exposed||(e.exposed={});he.forEach(ve=>{Object.defineProperty(Se,ve,{get:()=>s[ve],set:$e=>s[ve]=$e})})}else e.exposed||(e.exposed={});le&&e.render===At&&(e.render=le),de!=null&&(e.inheritAttrs=de),z&&(e.components=z),pe&&(e.directives=pe)}function nf(e,t,s=At,i=!1){se(e)&&(e=wo(e));for(const n in e){const o=e[n];let r;Me(o)?"default"in o?r=Wi(o.from||n,o.default,!0):r=Wi(o.from||n):r=Wi(o),nt(r)&&i?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>r.value,set:l=>r.value=l}):t[n]=r}}function Qr(e,t,s){wt(se(e)?e.map(i=>i.bind(t.proxy)):e.bind(t.proxy),t,s)}function Fa(e,t,s,i){const n=i.includes(".")?Ta(s,i):()=>s[i];if(Ze(e)){const o=t[e];ue(o)&&it(n,o)}else if(ue(e))it(n,e.bind(s));else if(Me(e))if(se(e))e.forEach(o=>Fa(o,t,s,i));else{const o=ue(e.handler)?e.handler.bind(s):t[e.handler];ue(o)&&it(n,o,e)}}function Jo(e){const t=e.type,{mixins:s,extends:i}=t,{mixins:n,optionsCache:o,config:{optionMergeStrategies:r}}=e.appContext,l=o.get(t);let a;return l?a=l:!n.length&&!s&&!i?a=t:(a={},n.length&&n.forEach(d=>tn(a,d,r,!0)),tn(a,t,r)),Me(t)&&o.set(t,a),a}function tn(e,t,s,i=!1){const{mixins:n,extends:o}=t;o&&tn(e,o,s,!0),n&&n.forEach(r=>tn(e,r,s,!0));for(const r in t)if(!(i&&r==="expose")){const l=of[r]||s&&s[r];e[r]=l?l(e[r],t[r]):t[r]}return e}const of={data:el,props:ys,emits:ys,methods:ys,computed:ys,beforeCreate:ct,created:ct,beforeMount:ct,mounted:ct,beforeUpdate:ct,updated:ct,beforeDestroy:ct,beforeUnmount:ct,destroyed:ct,unmounted:ct,activated:ct,deactivated:ct,errorCaptured:ct,serverPrefetch:ct,components:ys,directives:ys,watch:lf,provide:el,inject:rf};function el(e,t){return t?e?function(){return rt(ue(e)?e.call(this,this):e,ue(t)?t.call(this,this):t)}:t:e}function rf(e,t){return ys(wo(e),wo(t))}function wo(e){if(se(e)){const t={};for(let s=0;s<e.length;s++)t[e[s]]=e[s];return t}return e}function ct(e,t){return e?[...new Set([].concat(e,t))]:t}function ys(e,t){return e?rt(rt(Object.create(null),e),t):t}function lf(e,t){if(!e)return t;if(!t)return e;const s=rt(Object.create(null),e);for(const i in t)s[i]=ct(e[i],t[i]);return s}function af(e,t,s,i=!1){const n={},o={};Ji(o,Sn,1),e.propsDefaults=Object.create(null),Da(e,t,n,o);for(const r in e.propsOptions[0])r in n||(n[r]=void 0);s?e.props=i?n:bh(n):e.type.props?e.props=n:e.props=o,e.attrs=o}function cf(e,t,s,i){const{props:n,attrs:o,vnode:{patchFlag:r}}=e,l=we(n),[a]=e.propsOptions;let d=!1;if((i||r>0)&&!(r&16)){if(r&8){const h=e.vnode.dynamicProps;for(let g=0;g<h.length;g++){let b=h[g];if(yn(e.emitsOptions,b))continue;const k=t[b];if(a)if(be(o,b))k!==o[b]&&(o[b]=k,d=!0);else{const v=Ft(b);n[v]=_o(a,l,v,k,e,!1)}else k!==o[b]&&(o[b]=k,d=!0)}}}else{Da(e,t,n,o)&&(d=!0);let h;for(const g in l)(!t||!be(t,g)&&((h=Us(g))===g||!be(t,h)))&&(a?s&&(s[g]!==void 0||s[h]!==void 0)&&(n[g]=_o(a,l,g,void 0,e,!0)):delete n[g]);if(o!==l)for(const g in o)(!t||!be(t,g))&&(delete o[g],d=!0)}d&&qt(e,"set","$attrs")}function Da(e,t,s,i){const[n,o]=e.propsOptions;let r=!1,l;if(t)for(let a in t){if(Ui(a))continue;const d=t[a];let h;n&&be(n,h=Ft(a))?!o||!o.includes(h)?s[h]=d:(l||(l={}))[h]=d:yn(e.emitsOptions,a)||(!(a in i)||d!==i[a])&&(i[a]=d,r=!0)}if(o){const a=we(s),d=l||Fe;for(let h=0;h<o.length;h++){const g=o[h];s[g]=_o(n,a,g,d[g],e,!be(d,g))}}return r}function _o(e,t,s,i,n,o){const r=e[s];if(r!=null){const l=be(r,"default");if(l&&i===void 0){const a=r.default;if(r.type!==Function&&ue(a)){const{propsDefaults:d}=n;s in d?i=d[s]:(zs(n),i=d[s]=a.call(null,t),As())}else i=a}r[0]&&(o&&!l?i=!1:r[1]&&(i===""||i===Us(s))&&(i=!0))}return i}function Ia(e,t,s=!1){const i=t.propsCache,n=i.get(e);if(n)return n;const o=e.props,r={},l=[];let a=!1;if(!ue(e)){const h=g=>{a=!0;const[b,k]=Ia(g,t,!0);rt(r,b),k&&l.push(...k)};!s&&t.mixins.length&&t.mixins.forEach(h),e.extends&&h(e.extends),e.mixins&&e.mixins.forEach(h)}if(!o&&!a)return Me(e)&&i.set(e,Ns),Ns;if(se(o))for(let h=0;h<o.length;h++){const g=Ft(o[h]);tl(g)&&(r[g]=Fe)}else if(o)for(const h in o){const g=Ft(h);if(tl(g)){const b=o[h],k=r[g]=se(b)||ue(b)?{type:b}:Object.assign({},b);if(k){const v=nl(Boolean,k.type),_=nl(String,k.type);k[0]=v>-1,k[1]=_<0||v<_,(v>-1||be(k,"default"))&&l.push(g)}}}const d=[r,l];return Me(e)&&i.set(e,d),d}function tl(e){return e[0]!=="$"}function sl(e){const t=e&&e.toString().match(/^\s*(function|class) (\w+)/);return t?t[2]:e===null?"null":""}function il(e,t){return sl(e)===sl(t)}function nl(e,t){return se(t)?t.findIndex(s=>il(s,e)):ue(t)&&il(t,e)?0:-1}const Ba=e=>e[0]==="_"||e==="$stable",Xo=e=>se(e)?e.map(Nt):[Nt(e)],uf=(e,t,s)=>{if(t._n)return t;const i=ii((...n)=>Xo(t(...n)),s);return i._c=!1,i},za=(e,t,s)=>{const i=e._ctx;for(const n in e){if(Ba(n))continue;const o=e[n];if(ue(o))t[n]=uf(n,o,i);else if(o!=null){const r=Xo(o);t[n]=()=>r}}},Va=(e,t)=>{const s=Xo(t);e.slots.default=()=>s},df=(e,t)=>{if(e.vnode.shapeFlag&32){const s=t._;s?(e.slots=we(t),Ji(t,"_",s)):za(t,e.slots={})}else e.slots={},t&&Va(e,t);Ji(e.slots,Sn,1)},hf=(e,t,s)=>{const{vnode:i,slots:n}=e;let o=!0,r=Fe;if(i.shapeFlag&32){const l=t._;l?s&&l===1?o=!1:(rt(n,t),!s&&l===1&&delete n._):(o=!t.$stable,za(t,n)),r=t}else t&&(Va(e,t),r={default:1});if(o)for(const l in n)!Ba(l)&&!(l in r)&&delete n[l]};function Ua(){return{app:null,config:{isNativeTag:Hd,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let ff=0;function mf(e,t){return function(i,n=null){ue(i)||(i=Object.assign({},i)),n!=null&&!Me(n)&&(n=null);const o=Ua(),r=new Set;let l=!1;const a=o.app={_uid:ff++,_component:i,_props:n,_container:null,_context:o,_instance:null,version:$f,get config(){return o.config},set config(d){},use(d,...h){return r.has(d)||(d&&ue(d.install)?(r.add(d),d.install(a,...h)):ue(d)&&(r.add(d),d(a,...h))),a},mixin(d){return o.mixins.includes(d)||o.mixins.push(d),a},component(d,h){return h?(o.components[d]=h,a):o.components[d]},directive(d,h){return h?(o.directives[d]=h,a):o.directives[d]},mount(d,h,g){if(!l){const b=U(i,n);return b.appContext=o,h&&t?t(b,d):e(b,d,g),l=!0,a._container=d,d.__vue_app__=a,An(b.component)||b.component.proxy}},unmount(){l&&(e(null,a._container),delete a._container.__vue_app__)},provide(d,h){return o.provides[d]=h,a}};return a}}function ko(e,t,s,i,n=!1){if(se(e)){e.forEach((b,k)=>ko(b,t&&(se(t)?t[k]:t),s,i,n));return}if(ni(i)&&!n)return;const o=i.shapeFlag&4?An(i.component)||i.component.proxy:i.el,r=n?null:o,{i:l,r:a}=e,d=t&&t.r,h=l.refs===Fe?l.refs={}:l.refs,g=l.setupState;if(d!=null&&d!==a&&(Ze(d)?(h[d]=null,be(g,d)&&(g[d]=null)):nt(d)&&(d.value=null)),ue(a))as(a,l,12,[r,h]);else{const b=Ze(a),k=nt(a);if(b||k){const v=()=>{if(e.f){const _=b?be(g,a)?g[a]:h[a]:a.value;n?se(_)&&Ro(_,o):se(_)?_.includes(o)||_.push(o):b?(h[a]=[o],be(g,a)&&(g[a]=h[a])):(a.value=[o],e.k&&(h[e.k]=a.value))}else b?(h[a]=r,be(g,a)&&(g[a]=r)):k&&(a.value=r,e.k&&(h[e.k]=r))};r?(v.id=-1,ft(v,s)):v()}}}const ft=Fh;function pf(e){return gf(e)}function gf(e,t){const s=zd();s.__VUE__=!0;const{insert:i,remove:n,patchProp:o,createElement:r,createText:l,createComment:a,setText:d,setElementText:h,parentNode:g,nextSibling:b,setScopeId:k=At,insertStaticContent:v}=e,_=(p,y,C,A=null,L=null,$=null,I=!1,H=null,F=!!y.dynamicChildren)=>{if(p===y)return;p&&!ks(p,y)&&(A=Te(p),je(p,L,$,!0),p=null),y.patchFlag===-2&&(F=!1,y.dynamicChildren=null);const{type:M,ref:Q,shapeFlag:J}=y;switch(M){case Cn:E(p,y,C,A);break;case _t:P(p,y,C,A);break;case qi:p==null&&Y(y,C,A,I);break;case Pe:z(p,y,C,A,L,$,I,H,F);break;default:J&1?le(p,y,C,A,L,$,I,H,F):J&6?pe(p,y,C,A,L,$,I,H,F):(J&64||J&128)&&M.process(p,y,C,A,L,$,I,H,F,Zt)}Q!=null&&L&&ko(Q,p&&p.ref,$,y||p,!y)},E=(p,y,C,A)=>{if(p==null)i(y.el=l(y.children),C,A);else{const L=y.el=p.el;y.children!==p.children&&d(L,y.children)}},P=(p,y,C,A)=>{p==null?i(y.el=a(y.children||""),C,A):y.el=p.el},Y=(p,y,C,A)=>{[p.el,p.anchor]=v(p.children,y,C,A,p.el,p.anchor)},K=({el:p,anchor:y},C,A)=>{let L;for(;p&&p!==y;)L=b(p),i(p,C,A),p=L;i(y,C,A)},ie=({el:p,anchor:y})=>{let C;for(;p&&p!==y;)C=b(p),n(p),p=C;n(y)},le=(p,y,C,A,L,$,I,H,F)=>{I=I||y.type==="svg",p==null?He(y,C,A,L,$,I,H,F):W(p,y,L,$,I,H,F)},He=(p,y,C,A,L,$,I,H)=>{let F,M;const{type:Q,props:J,shapeFlag:ee,transition:ne,dirs:me}=p;if(F=p.el=r(p.type,$,J&&J.is,J),ee&8?h(F,p.children):ee&16&&X(p.children,F,null,A,L,$&&Q!=="foreignObject",I,H),me&&ms(p,null,A,"created"),xe(F,p,p.scopeId,I,A),J){for(const Ee in J)Ee!=="value"&&!Ui(Ee)&&o(F,Ee,null,J[Ee],$,p.children,A,L,Z);"value"in J&&o(F,"value",null,J.value),(M=J.onVnodeBeforeMount)&&Mt(M,A,p)}me&&ms(p,null,A,"beforeMount");const Le=(!L||L&&!L.pendingBranch)&&ne&&!ne.persisted;Le&&ne.beforeEnter(F),i(F,y,C),((M=J&&J.onVnodeMounted)||Le||me)&&ft(()=>{M&&Mt(M,A,p),Le&&ne.enter(F),me&&ms(p,null,A,"mounted")},L)},xe=(p,y,C,A,L)=>{if(C&&k(p,C),A)for(let $=0;$<A.length;$++)k(p,A[$]);if(L){let $=L.subTree;if(y===$){const I=L.vnode;xe(p,I,I.scopeId,I.slotScopeIds,L.parent)}}},X=(p,y,C,A,L,$,I,H,F=0)=>{for(let M=F;M<p.length;M++){const Q=p[M]=H?is(p[M]):Nt(p[M]);_(null,Q,y,C,A,L,$,I,H)}},W=(p,y,C,A,L,$,I)=>{const H=y.el=p.el;let{patchFlag:F,dynamicChildren:M,dirs:Q}=y;F|=p.patchFlag&16;const J=p.props||Fe,ee=y.props||Fe;let ne;C&&ps(C,!1),(ne=ee.onVnodeBeforeUpdate)&&Mt(ne,C,y,p),Q&&ms(y,p,C,"beforeUpdate"),C&&ps(C,!0);const me=L&&y.type!=="foreignObject";if(M?he(p.dynamicChildren,M,H,C,A,me,$):I||ve(p,y,H,null,C,A,me,$,!1),F>0){if(F&16)de(H,y,J,ee,C,A,L);else if(F&2&&J.class!==ee.class&&o(H,"class",null,ee.class,L),F&4&&o(H,"style",J.style,ee.style,L),F&8){const Le=y.dynamicProps;for(let Ee=0;Ee<Le.length;Ee++){const f=Le[Ee],u=J[f],O=ee[f];(O!==u||f==="value")&&o(H,f,u,O,L,p.children,C,A,Z)}}F&1&&p.children!==y.children&&h(H,y.children)}else!I&&M==null&&de(H,y,J,ee,C,A,L);((ne=ee.onVnodeUpdated)||Q)&&ft(()=>{ne&&Mt(ne,C,y,p),Q&&ms(y,p,C,"updated")},A)},he=(p,y,C,A,L,$,I)=>{for(let H=0;H<y.length;H++){const F=p[H],M=y[H],Q=F.el&&(F.type===Pe||!ks(F,M)||F.shapeFlag&70)?g(F.el):C;_(F,M,Q,null,A,L,$,I,!0)}},de=(p,y,C,A,L,$,I)=>{if(C!==A){if(C!==Fe)for(const H in C)!Ui(H)&&!(H in A)&&o(p,H,C[H],null,I,y.children,L,$,Z);for(const H in A){if(Ui(H))continue;const F=A[H],M=C[H];F!==M&&H!=="value"&&o(p,H,M,F,I,y.children,L,$,Z)}"value"in A&&o(p,"value",C.value,A.value)}},z=(p,y,C,A,L,$,I,H,F)=>{const M=y.el=p?p.el:l(""),Q=y.anchor=p?p.anchor:l("");let{patchFlag:J,dynamicChildren:ee,slotScopeIds:ne}=y;ne&&(H=H?H.concat(ne):ne),p==null?(i(M,C,A),i(Q,C,A),X(y.children,C,Q,L,$,I,H,F)):J>0&&J&64&&ee&&p.dynamicChildren?(he(p.dynamicChildren,ee,C,L,$,I,H),(y.key!=null||L&&y===L.subTree)&&ja(p,y,!0)):ve(p,y,C,Q,L,$,I,H,F)},pe=(p,y,C,A,L,$,I,H,F)=>{y.slotScopeIds=H,p==null?y.shapeFlag&512?L.ctx.activate(y,C,A,I,F):Ce(y,C,A,L,$,I,F):oe(p,y,F)},Ce=(p,y,C,A,L,$,I)=>{const H=p.component=Cf(p,A,L);if(wn(p)&&(H.ctx.renderer=Zt),Ef(H),H.asyncDep){if(L&&L.registerDep(H,fe),!p.el){const F=H.subTree=U(_t);P(null,F,y,C)}return}fe(H,p,y,C,L,$,I)},oe=(p,y,C)=>{const A=y.component=p.component;if(Hh(p,y,C))if(A.asyncDep&&!A.asyncResolved){Se(A,y,C);return}else A.next=y,Ah(A.update),A.update();else y.el=p.el,A.vnode=y},fe=(p,y,C,A,L,$,I)=>{const H=()=>{if(p.isMounted){let{next:Q,bu:J,u:ee,parent:ne,vnode:me}=p,Le=Q,Ee;ps(p,!1),Q?(Q.el=me.el,Se(p,Q,I)):Q=me,J&&ji(J),(Ee=Q.props&&Q.props.onVnodeBeforeUpdate)&&Mt(Ee,ne,Q,me),ps(p,!0);const f=Jn(p),u=p.subTree;p.subTree=f,_(u,f,g(u.el),Te(u),p,L,$),Q.el=f.el,Le===null&&$h(p,f.el),ee&&ft(ee,L),(Ee=Q.props&&Q.props.onVnodeUpdated)&&ft(()=>Mt(Ee,ne,Q,me),L)}else{let Q;const{el:J,props:ee}=y,{bm:ne,m:me,parent:Le}=p,Ee=ni(y);if(ps(p,!1),ne&&ji(ne),!Ee&&(Q=ee&&ee.onVnodeBeforeMount)&&Mt(Q,Le,y),ps(p,!0),J&&Ys){const f=()=>{p.subTree=Jn(p),Ys(J,p.subTree,p,L,null)};Ee?y.type.__asyncLoader().then(()=>!p.isUnmounted&&f()):f()}else{const f=p.subTree=Jn(p);_(null,f,C,A,p,L,$),y.el=f.el}if(me&&ft(me,L),!Ee&&(Q=ee&&ee.onVnodeMounted)){const f=y;ft(()=>Mt(Q,Le,f),L)}(y.shapeFlag&256||Le&&ni(Le.vnode)&&Le.vnode.shapeFlag&256)&&p.a&&ft(p.a,L),p.isMounted=!0,y=C=A=null}},F=p.effect=new Io(H,()=>Ko(M),p.scope),M=p.update=()=>F.run();M.id=p.uid,ps(p,!0),M()},Se=(p,y,C)=>{y.component=p;const A=p.vnode.props;p.vnode=y,p.next=null,cf(p,y.props,A,C),hf(p,y.children,C),js(),Jr(),Ws()},ve=(p,y,C,A,L,$,I,H,F=!1)=>{const M=p&&p.children,Q=p?p.shapeFlag:0,J=y.children,{patchFlag:ee,shapeFlag:ne}=y;if(ee>0){if(ee&128){Oe(M,J,C,A,L,$,I,H,F);return}else if(ee&256){$e(M,J,C,A,L,$,I,H,F);return}}ne&8?(Q&16&&Z(M,L,$),J!==M&&h(C,J)):Q&16?ne&16?Oe(M,J,C,A,L,$,I,H,F):Z(M,L,$,!0):(Q&8&&h(C,""),ne&16&&X(J,C,A,L,$,I,H,F))},$e=(p,y,C,A,L,$,I,H,F)=>{p=p||Ns,y=y||Ns;const M=p.length,Q=y.length,J=Math.min(M,Q);let ee;for(ee=0;ee<J;ee++){const ne=y[ee]=F?is(y[ee]):Nt(y[ee]);_(p[ee],ne,C,null,L,$,I,H,F)}M>Q?Z(p,L,$,!0,!1,J):X(y,C,A,L,$,I,H,F,J)},Oe=(p,y,C,A,L,$,I,H,F)=>{let M=0;const Q=y.length;let J=p.length-1,ee=Q-1;for(;M<=J&&M<=ee;){const ne=p[M],me=y[M]=F?is(y[M]):Nt(y[M]);if(ks(ne,me))_(ne,me,C,null,L,$,I,H,F);else break;M++}for(;M<=J&&M<=ee;){const ne=p[J],me=y[ee]=F?is(y[ee]):Nt(y[ee]);if(ks(ne,me))_(ne,me,C,null,L,$,I,H,F);else break;J--,ee--}if(M>J){if(M<=ee){const ne=ee+1,me=ne<Q?y[ne].el:A;for(;M<=ee;)_(null,y[M]=F?is(y[M]):Nt(y[M]),C,me,L,$,I,H,F),M++}}else if(M>ee)for(;M<=J;)je(p[M],L,$,!0),M++;else{const ne=M,me=M,Le=new Map;for(M=me;M<=ee;M++){const ae=y[M]=F?is(y[M]):Nt(y[M]);ae.key!=null&&Le.set(ae.key,M)}let Ee,f=0;const u=ee-me+1;let O=!1,q=0;const R=new Array(u);for(M=0;M<u;M++)R[M]=0;for(M=ne;M<=J;M++){const ae=p[M];if(f>=u){je(ae,L,$,!0);continue}let _e;if(ae.key!=null)_e=Le.get(ae.key);else for(Ee=me;Ee<=ee;Ee++)if(R[Ee-me]===0&&ks(ae,y[Ee])){_e=Ee;break}_e===void 0?je(ae,L,$,!0):(R[_e-me]=M+1,_e>=q?q=_e:O=!0,_(ae,y[_e],C,null,L,$,I,H,F),f++)}const te=O?vf(R):Ns;for(Ee=te.length-1,M=u-1;M>=0;M--){const ae=me+M,_e=y[ae],Re=ae+1<Q?y[ae+1].el:A;R[M]===0?_(null,_e,C,Re,L,$,I,H,F):O&&(Ee<0||M!==te[Ee]?Ue(_e,C,Re,2):Ee--)}}},Ue=(p,y,C,A,L=null)=>{const{el:$,type:I,transition:H,children:F,shapeFlag:M}=p;if(M&6){Ue(p.component.subTree,y,C,A);return}if(M&128){p.suspense.move(y,C,A);return}if(M&64){I.move(p,y,C,Zt);return}if(I===Pe){i($,y,C);for(let J=0;J<F.length;J++)Ue(F[J],y,C,A);i(p.anchor,y,C);return}if(I===qi){K(p,y,C);return}if(A!==2&&M&1&&H)if(A===0)H.beforeEnter($),i($,y,C),ft(()=>H.enter($),L);else{const{leave:J,delayLeave:ee,afterLeave:ne}=H,me=()=>i($,y,C),Le=()=>{J($,()=>{me(),ne&&ne()})};ee?ee($,me,Le):Le()}else i($,y,C)},je=(p,y,C,A=!1,L=!1)=>{const{type:$,props:I,ref:H,children:F,dynamicChildren:M,shapeFlag:Q,patchFlag:J,dirs:ee}=p;if(H!=null&&ko(H,null,C,p,!0),Q&256){y.ctx.deactivate(p);return}const ne=Q&1&&ee,me=!ni(p);let Le;if(me&&(Le=I&&I.onVnodeBeforeUnmount)&&Mt(Le,y,p),Q&6)Qe(p.component,C,A);else{if(Q&128){p.suspense.unmount(C,A);return}ne&&ms(p,null,y,"beforeUnmount"),Q&64?p.type.remove(p,y,C,L,Zt,A):M&&($!==Pe||J>0&&J&64)?Z(M,y,C,!1,!0):($===Pe&&J&384||!L&&Q&16)&&Z(F,y,C),A&&Tt(p)}(me&&(Le=I&&I.onVnodeUnmounted)||ne)&&ft(()=>{Le&&Mt(Le,y,p),ne&&ms(p,null,y,"unmounted")},C)},Tt=p=>{const{type:y,el:C,anchor:A,transition:L}=p;if(y===Pe){Dt(C,A);return}if(y===qi){ie(p);return}const $=()=>{n(C),L&&!L.persisted&&L.afterLeave&&L.afterLeave()};if(p.shapeFlag&1&&L&&!L.persisted){const{leave:I,delayLeave:H}=L,F=()=>I(C,$);H?H(p.el,$,F):F()}else $()},Dt=(p,y)=>{let C;for(;p!==y;)C=b(p),n(p),p=C;n(y)},Qe=(p,y,C)=>{const{bum:A,scope:L,update:$,subTree:I,um:H}=p;A&&ji(A),L.stop(),$&&($.active=!1,je(I,p,y,C)),H&&ft(H,y),ft(()=>{p.isUnmounted=!0},y),y&&y.pendingBranch&&!y.isUnmounted&&p.asyncDep&&!p.asyncResolved&&p.suspenseId===y.pendingId&&(y.deps--,y.deps===0&&y.resolve())},Z=(p,y,C,A=!1,L=!1,$=0)=>{for(let I=$;I<p.length;I++)je(p[I],y,C,A,L)},Te=p=>p.shapeFlag&6?Te(p.component.subTree):p.shapeFlag&128?p.suspense.next():b(p.anchor||p.el),qs=(p,y,C)=>{p==null?y._vnode&&je(y._vnode,null,null,!0):_(y._vnode||null,p,y,null,null,null,C),Jr(),Ca(),y._vnode=p},Zt={p:_,um:je,m:Ue,r:Tt,mt:Ce,mc:X,pc:ve,pbc:he,n:Te,o:e};let Ks,Ys;return t&&([Ks,Ys]=t(Zt)),{render:qs,hydrate:Ks,createApp:mf(qs,Ks)}}function ps({effect:e,update:t},s){e.allowRecurse=t.allowRecurse=s}function ja(e,t,s=!1){const i=e.children,n=t.children;if(se(i)&&se(n))for(let o=0;o<i.length;o++){const r=i[o];let l=n[o];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=n[o]=is(n[o]),l.el=r.el),s||ja(r,l)),l.type===Cn&&(l.el=r.el)}}function vf(e){const t=e.slice(),s=[0];let i,n,o,r,l;const a=e.length;for(i=0;i<a;i++){const d=e[i];if(d!==0){if(n=s[s.length-1],e[n]<d){t[i]=n,s.push(i);continue}for(o=0,r=s.length-1;o<r;)l=o+r>>1,e[s[l]]<d?o=l+1:r=l;d<e[s[o]]&&(o>0&&(t[i]=s[o-1]),s[o]=i)}}for(o=s.length,r=s[o-1];o-- >0;)s[o]=r,r=t[r];return s}const bf=e=>e.__isTeleport,Pe=Symbol(void 0),Cn=Symbol(void 0),_t=Symbol(void 0),qi=Symbol(void 0),ri=[];let Et=null;function N(e=!1){ri.push(Et=e?null:[])}function yf(){ri.pop(),Et=ri[ri.length-1]||null}let fi=1;function ol(e){fi+=e}function Wa(e){return e.dynamicChildren=fi>0?Et||Ns:null,yf(),fi>0&&Et&&Et.push(e),e}function V(e,t,s,i,n,o){return Wa(c(e,t,s,i,n,o,!0))}function Be(e,t,s,i,n){return Wa(U(e,t,s,i,n,!0))}function sn(e){return e?e.__v_isVNode===!0:!1}function ks(e,t){return e.type===t.type&&e.key===t.key}const Sn="__vInternal",qa=({key:e})=>e??null,Ki=({ref:e,ref_key:t,ref_for:s})=>e!=null?Ze(e)||nt(e)||ue(e)?{i:ot,r:e,k:t,f:!!s}:e:null;function c(e,t=null,s=null,i=0,n=null,o=e===Pe?0:1,r=!1,l=!1){const a={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&qa(t),ref:t&&Ki(t),scopeId:La,slotScopeIds:null,children:s,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:o,patchFlag:i,dynamicProps:n,dynamicChildren:null,appContext:null,ctx:ot};return l?(Zo(a,s),o&128&&e.normalize(a)):s&&(a.shapeFlag|=Ze(s)?8:16),fi>0&&!r&&Et&&(a.patchFlag>0||o&6)&&a.patchFlag!==32&&Et.push(a),a}const U=wf;function wf(e,t=null,s=null,i=0,n=null,o=!1){if((!e||e===Qh)&&(e=_t),sn(e)){const l=ds(e,t,!0);return s&&Zo(l,s),fi>0&&!o&&Et&&(l.shapeFlag&6?Et[Et.indexOf(e)]=l:Et.push(l)),l.patchFlag|=-2,l}if(Of(e)&&(e=e.__vccOpts),t){t=_f(t);let{class:l,style:a}=t;l&&!Ze(l)&&(t.class=ut(l)),Me(a)&&(pa(a)&&!se(a)&&(a=rt({},a)),t.style=Lt(a))}const r=Ze(e)?1:Rh(e)?128:bf(e)?64:Me(e)?4:ue(e)?2:0;return c(e,t,s,i,n,r,o,!0)}function _f(e){return e?pa(e)||Sn in e?rt({},e):e:null}function ds(e,t,s=!1){const{props:i,ref:n,patchFlag:o,children:r}=e,l=t?Ka(i||{},t):i;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&qa(l),ref:t&&t.ref?s&&n?se(n)?n.concat(Ki(t)):[n,Ki(t)]:Ki(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:r,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Pe?o===-1?16:o|16:o,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&ds(e.ssContent),ssFallback:e.ssFallback&&ds(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function En(e=" ",t=0){return U(Cn,null,e,t)}function Ln(e,t){const s=U(qi,null,e);return s.staticCount=t,s}function ke(e="",t=!1){return t?(N(),Be(_t,null,e)):U(_t,null,e)}function Nt(e){return e==null||typeof e=="boolean"?U(_t):se(e)?U(Pe,null,e.slice()):typeof e=="object"?is(e):U(Cn,null,String(e))}function is(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:ds(e)}function Zo(e,t){let s=0;const{shapeFlag:i}=e;if(t==null)t=null;else if(se(t))s=16;else if(typeof t=="object")if(i&65){const n=t.default;n&&(n._c&&(n._d=!1),Zo(e,n()),n._c&&(n._d=!0));return}else{s=32;const n=t._;!n&&!(Sn in t)?t._ctx=ot:n===3&&ot&&(ot.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else ue(t)?(t={default:t,_ctx:ot},s=32):(t=String(t),i&64?(s=16,t=[En(t)]):s=8);e.children=t,e.shapeFlag|=s}function Ka(...e){const t={};for(let s=0;s<e.length;s++){const i=e[s];for(const n in i)if(n==="class")t.class!==i.class&&(t.class=ut([t.class,i.class]));else if(n==="style")t.style=Lt([t.style,i.style]);else if(fn(n)){const o=t[n],r=i[n];r&&o!==r&&!(se(o)&&o.includes(r))&&(t[n]=o?[].concat(o,r):r)}else n!==""&&(t[n]=i[n])}return t}function Mt(e,t,s,i=null){wt(e,t,7,[s,i])}const kf=Ua();let xf=0;function Cf(e,t,s){const i=e.type,n=(t?t.appContext:e.appContext)||kf,o={uid:xf++,vnode:e,type:i,parent:t,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new Vd(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Ia(i,n),emitsOptions:Ea(i,n),emit:null,emitted:null,propsDefaults:Fe,inheritAttrs:i.inheritAttrs,ctx:Fe,data:Fe,props:Fe,attrs:Fe,slots:Fe,refs:Fe,setupState:Fe,setupContext:null,suspense:s,suspenseId:s?s.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return o.ctx={_:o},o.root=t?t.root:o,o.emit=Oh.bind(null,o),e.ce&&e.ce(o),o}let Je=null;const Sf=()=>Je||ot,zs=e=>{Je=e,e.scope.on()},As=()=>{Je&&Je.scope.off(),Je=null};function Ya(e){return e.vnode.shapeFlag&4}let mi=!1;function Ef(e,t=!1){mi=t;const{props:s,children:i}=e.vnode,n=Ya(e);af(e,s,n,t),df(e,i);const o=n?Lf(e,t):void 0;return mi=!1,o}function Lf(e,t){const s=e.type;e.accessCache=Object.create(null),e.proxy=ga(new Proxy(e.ctx,tf));const{setup:i}=s;if(i){const n=e.setupContext=i.length>1?Tf(e):null;zs(e),js();const o=as(i,e,0,[e.props,n]);if(Ws(),As(),ta(o)){if(o.then(As,As),t)return o.then(r=>{rl(e,r,t)}).catch(r=>{bn(r,e,0)});e.asyncDep=o}else rl(e,o,t)}else Ja(e,t)}function rl(e,t,s){ue(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:Me(t)&&(e.setupState=ya(t)),Ja(e,s)}let ll;function Ja(e,t,s){const i=e.type;if(!e.render){if(!t&&ll&&!i.render){const n=i.template||Jo(e).template;if(n){const{isCustomElement:o,compilerOptions:r}=e.appContext.config,{delimiters:l,compilerOptions:a}=i,d=rt(rt({isCustomElement:o,delimiters:l},r),a);i.render=ll(n,d)}}e.render=i.render||At}zs(e),js(),sf(e),Ws(),As()}function Af(e){return new Proxy(e.attrs,{get(t,s){return mt(e,"get","$attrs"),t[s]}})}function Tf(e){const t=i=>{e.exposed=i||{}};let s;return{get attrs(){return s||(s=Af(e))},slots:e.slots,emit:e.emit,expose:t}}function An(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(ya(ga(e.exposed)),{get(t,s){if(s in t)return t[s];if(s in oi)return oi[s](e)},has(t,s){return s in t||s in oi}}))}function Mf(e,t=!0){return ue(e)?e.displayName||e.name:e.name||t&&e.__name}function Of(e){return ue(e)&&"__vccOpts"in e}const jt=(e,t)=>Sh(e,t,mi);function Nf(e,t,s){const i=arguments.length;return i===2?Me(t)&&!se(t)?sn(t)?U(e,null,[t]):U(e,t):U(e,null,t):(i>3?s=Array.prototype.slice.call(arguments,2):i===3&&sn(s)&&(s=[s]),U(e,t,s))}const Pf=Symbol(""),Hf=()=>Wi(Pf),$f="3.2.47",Rf="http://www.w3.org/2000/svg",xs=typeof document<"u"?document:null,al=xs&&xs.createElement("template"),Ff={insert:(e,t,s)=>{t.insertBefore(e,s||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,s,i)=>{const n=t?xs.createElementNS(Rf,e):xs.createElement(e,s?{is:s}:void 0);return e==="select"&&i&&i.multiple!=null&&n.setAttribute("multiple",i.multiple),n},createText:e=>xs.createTextNode(e),createComment:e=>xs.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>xs.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,s,i,n,o){const r=s?s.previousSibling:t.lastChild;if(n&&(n===o||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),s),!(n===o||!(n=n.nextSibling)););else{al.innerHTML=i?`<svg>${e}</svg>`:e;const l=al.content;if(i){const a=l.firstChild;for(;a.firstChild;)l.appendChild(a.firstChild);l.removeChild(a)}t.insertBefore(l,s)}return[r?r.nextSibling:t.firstChild,s?s.previousSibling:t.lastChild]}};function Df(e,t,s){const i=e._vtc;i&&(t=(t?[t,...i]:[...i]).join(" ")),t==null?e.removeAttribute("class"):s?e.setAttribute("class",t):e.className=t}function If(e,t,s){const i=e.style,n=Ze(s);if(s&&!n){if(t&&!Ze(t))for(const o in t)s[o]==null&&xo(i,o,"");for(const o in s)xo(i,o,s[o])}else{const o=i.display;n?t!==s&&(i.cssText=s):t&&e.removeAttribute("style"),"_vod"in e&&(i.display=o)}}const cl=/\s*!important$/;function xo(e,t,s){if(se(s))s.forEach(i=>xo(e,t,i));else if(s==null&&(s=""),t.startsWith("--"))e.setProperty(t,s);else{const i=Bf(e,t);cl.test(s)?e.setProperty(Us(i),s.replace(cl,""),"important"):e[i]=s}}const ul=["Webkit","Moz","ms"],Gn={};function Bf(e,t){const s=Gn[t];if(s)return s;let i=Ft(t);if(i!=="filter"&&i in e)return Gn[t]=i;i=gn(i);for(let n=0;n<ul.length;n++){const o=ul[n]+i;if(o in e)return Gn[t]=o}return t}const dl="http://www.w3.org/1999/xlink";function zf(e,t,s,i,n){if(i&&t.startsWith("xlink:"))s==null?e.removeAttributeNS(dl,t.slice(6,t.length)):e.setAttributeNS(dl,t,s);else{const o=Od(t);s==null||o&&!Ql(s)?e.removeAttribute(t):e.setAttribute(t,o?"":s)}}function Vf(e,t,s,i,n,o,r){if(t==="innerHTML"||t==="textContent"){i&&r(i,n,o),e[t]=s??"";return}if(t==="value"&&e.tagName!=="PROGRESS"&&!e.tagName.includes("-")){e._value=s;const a=s??"";(e.value!==a||e.tagName==="OPTION")&&(e.value=a),s==null&&e.removeAttribute(t);return}let l=!1;if(s===""||s==null){const a=typeof e[t];a==="boolean"?s=Ql(s):s==null&&a==="string"?(s="",l=!0):a==="number"&&(s=0,l=!0)}try{e[t]=s}catch{}l&&e.removeAttribute(t)}function Cs(e,t,s,i){e.addEventListener(t,s,i)}function Uf(e,t,s,i){e.removeEventListener(t,s,i)}function jf(e,t,s,i,n=null){const o=e._vei||(e._vei={}),r=o[t];if(i&&r)r.value=i;else{const[l,a]=Wf(t);if(i){const d=o[t]=Yf(i,n);Cs(e,l,d,a)}else r&&(Uf(e,l,r,a),o[t]=void 0)}}const hl=/(?:Once|Passive|Capture)$/;function Wf(e){let t;if(hl.test(e)){t={};let i;for(;i=e.match(hl);)e=e.slice(0,e.length-i[0].length),t[i[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):Us(e.slice(2)),t]}let Qn=0;const qf=Promise.resolve(),Kf=()=>Qn||(qf.then(()=>Qn=0),Qn=Date.now());function Yf(e,t){const s=i=>{if(!i._vts)i._vts=Date.now();else if(i._vts<=s.attached)return;wt(Jf(i,s.value),t,5,[i])};return s.value=e,s.attached=Kf(),s}function Jf(e,t){if(se(t)){const s=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{s.call(e),e._stopped=!0},t.map(i=>n=>!n._stopped&&i&&i(n))}else return t}const fl=/^on[a-z]/,Xf=(e,t,s,i,n=!1,o,r,l,a)=>{t==="class"?Df(e,i,n):t==="style"?If(e,s,i):fn(t)?$o(t)||jf(e,t,s,i,r):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):Zf(e,t,i,n))?Vf(e,t,i,o,r,l,a):(t==="true-value"?e._trueValue=i:t==="false-value"&&(e._falseValue=i),zf(e,t,i,n))};function Zf(e,t,s,i){return i?!!(t==="innerHTML"||t==="textContent"||t in e&&fl.test(t)&&ue(s)):t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA"||fl.test(t)&&Ze(s)?!1:t in e}const ts="transition",Zs="animation",Tn=(e,{slots:t})=>Nf(Ma,Gf(e),t);Tn.displayName="Transition";const Xa={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String};Tn.props=rt({},Ma.props,Xa);const gs=(e,t=[])=>{se(e)?e.forEach(s=>s(...t)):e&&e(...t)},ml=e=>e?se(e)?e.some(t=>t.length>1):e.length>1:!1;function Gf(e){const t={};for(const z in e)z in Xa||(t[z]=e[z]);if(e.css===!1)return t;const{name:s="v",type:i,duration:n,enterFromClass:o=`${s}-enter-from`,enterActiveClass:r=`${s}-enter-active`,enterToClass:l=`${s}-enter-to`,appearFromClass:a=o,appearActiveClass:d=r,appearToClass:h=l,leaveFromClass:g=`${s}-leave-from`,leaveActiveClass:b=`${s}-leave-active`,leaveToClass:k=`${s}-leave-to`}=e,v=Qf(n),_=v&&v[0],E=v&&v[1],{onBeforeEnter:P,onEnter:Y,onEnterCancelled:K,onLeave:ie,onLeaveCancelled:le,onBeforeAppear:He=P,onAppear:xe=Y,onAppearCancelled:X=K}=t,W=(z,pe,Ce)=>{vs(z,pe?h:l),vs(z,pe?d:r),Ce&&Ce()},he=(z,pe)=>{z._isLeaving=!1,vs(z,g),vs(z,k),vs(z,b),pe&&pe()},de=z=>(pe,Ce)=>{const oe=z?xe:Y,fe=()=>W(pe,z,Ce);gs(oe,[pe,fe]),pl(()=>{vs(pe,z?a:o),ss(pe,z?h:l),ml(oe)||gl(pe,i,_,fe)})};return rt(t,{onBeforeEnter(z){gs(P,[z]),ss(z,o),ss(z,r)},onBeforeAppear(z){gs(He,[z]),ss(z,a),ss(z,d)},onEnter:de(!1),onAppear:de(!0),onLeave(z,pe){z._isLeaving=!0;const Ce=()=>he(z,pe);ss(z,g),sm(),ss(z,b),pl(()=>{z._isLeaving&&(vs(z,g),ss(z,k),ml(ie)||gl(z,i,E,Ce))}),gs(ie,[z,Ce])},onEnterCancelled(z){W(z,!1),gs(K,[z])},onAppearCancelled(z){W(z,!0),gs(X,[z])},onLeaveCancelled(z){he(z),gs(le,[z])}})}function Qf(e){if(e==null)return null;if(Me(e))return[eo(e.enter),eo(e.leave)];{const t=eo(e);return[t,t]}}function eo(e){return Bd(e)}function ss(e,t){t.split(/\s+/).forEach(s=>s&&e.classList.add(s)),(e._vtc||(e._vtc=new Set)).add(t)}function vs(e,t){t.split(/\s+/).forEach(i=>i&&e.classList.remove(i));const{_vtc:s}=e;s&&(s.delete(t),s.size||(e._vtc=void 0))}function pl(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let em=0;function gl(e,t,s,i){const n=e._endId=++em,o=()=>{n===e._endId&&i()};if(s)return setTimeout(o,s);const{type:r,timeout:l,propCount:a}=tm(e,t);if(!r)return i();const d=r+"end";let h=0;const g=()=>{e.removeEventListener(d,b),o()},b=k=>{k.target===e&&++h>=a&&g()};setTimeout(()=>{h<a&&g()},l+1),e.addEventListener(d,b)}function tm(e,t){const s=window.getComputedStyle(e),i=v=>(s[v]||"").split(", "),n=i(`${ts}Delay`),o=i(`${ts}Duration`),r=vl(n,o),l=i(`${Zs}Delay`),a=i(`${Zs}Duration`),d=vl(l,a);let h=null,g=0,b=0;t===ts?r>0&&(h=ts,g=r,b=o.length):t===Zs?d>0&&(h=Zs,g=d,b=a.length):(g=Math.max(r,d),h=g>0?r>d?ts:Zs:null,b=h?h===ts?o.length:a.length:0);const k=h===ts&&/\b(transform|all)(,|$)/.test(i(`${ts}Property`).toString());return{type:h,timeout:g,propCount:b,hasTransform:k}}function vl(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((s,i)=>bl(s)+bl(e[i])))}function bl(e){return Number(e.slice(0,-1).replace(",","."))*1e3}function sm(){return document.body.offsetHeight}const nn=e=>{const t=e.props["onUpdate:modelValue"]||!1;return se(t)?s=>ji(t,s):t};function im(e){e.target.composing=!0}function yl(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Za={created(e,{modifiers:{lazy:t,trim:s,number:i}},n){e._assign=nn(n);const o=i||n.props&&n.props.type==="number";Cs(e,t?"change":"input",r=>{if(r.target.composing)return;let l=e.value;s&&(l=l.trim()),o&&(l=Xi(l)),e._assign(l)}),s&&Cs(e,"change",()=>{e.value=e.value.trim()}),t||(Cs(e,"compositionstart",im),Cs(e,"compositionend",yl),Cs(e,"change",yl))},mounted(e,{value:t}){e.value=t??""},beforeUpdate(e,{value:t,modifiers:{lazy:s,trim:i,number:n}},o){if(e._assign=nn(o),e.composing||document.activeElement===e&&e.type!=="range"&&(s||i&&e.value.trim()===t||(n||e.type==="number")&&Xi(e.value)===t))return;const r=t??"";e.value!==r&&(e.value=r)}},nm={deep:!0,created(e,{value:t,modifiers:{number:s}},i){const n=mn(t);Cs(e,"change",()=>{const o=Array.prototype.filter.call(e.options,r=>r.selected).map(r=>s?Xi(on(r)):on(r));e._assign(e.multiple?n?new Set(o):o:o[0])}),e._assign=nn(i)},mounted(e,{value:t}){wl(e,t)},beforeUpdate(e,t,s){e._assign=nn(s)},updated(e,{value:t}){wl(e,t)}};function wl(e,t){const s=e.multiple;if(!(s&&!se(t)&&!mn(t))){for(let i=0,n=e.options.length;i<n;i++){const o=e.options[i],r=on(o);if(s)se(t)?o.selected=Pd(t,r)>-1:o.selected=t.has(r);else if(hn(on(o),t)){e.selectedIndex!==i&&(e.selectedIndex=i);return}}!s&&e.selectedIndex!==-1&&(e.selectedIndex=-1)}}function on(e){return"_value"in e?e._value:e.value}const om=["ctrl","shift","alt","meta"],rm={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,t)=>om.some(s=>e[`${s}Key`]&&!t.includes(s))},Go=(e,t)=>(s,...i)=>{for(let n=0;n<t.length;n++){const o=rm[t[n]];if(o&&o(s,t))return}return e(s,...i)},lm={beforeMount(e,{value:t},{transition:s}){e._vod=e.style.display==="none"?"":e.style.display,s&&t?s.beforeEnter(e):Gs(e,t)},mounted(e,{value:t},{transition:s}){s&&t&&s.enter(e)},updated(e,{value:t,oldValue:s},{transition:i}){!t!=!s&&(i?t?(i.beforeEnter(e),Gs(e,!0),i.enter(e)):i.leave(e,()=>{Gs(e,!1)}):Gs(e,t))},beforeUnmount(e,{value:t}){Gs(e,t)}};function Gs(e,t){e.style.display=t?e._vod:"none"}const am=rt({patchProp:Xf},Ff);let _l;function cm(){return _l||(_l=pf(am))}const um=(...e)=>{const t=cm().createApp(...e),{mount:s}=t;return t.mount=i=>{const n=dm(i);if(!n)return;const o=t._component;!ue(o)&&!o.render&&!o.template&&(o.template=n.innerHTML),n.innerHTML="";const r=s(n,!1,n instanceof SVGElement);return n instanceof Element&&(n.removeAttribute("v-cloak"),n.setAttribute("data-v-app","")),r},t};function dm(e){return Ze(e)?document.querySelector(e):e}const Ge=(e,t)=>{const s=e.__vccOpts||e;for(const[i,n]of t)s[i]=n;return s},hm={data(){return{previewMode:"desktop"}},methods:{setPreviewMode(e){this.previewMode=e,this.emulatorSet(e)},emulatorSet(e){var t={tablet:800,phone:400,desktop:"100%"},s=function(i){var n=t[i];typeof n=="number"&&(n=n+"px"),mw.app.canvas.getFrame().style.width=n};s(e)}}},fm={id:"preview-nav",class:"toolbar-nav toolbar-nav-hover"},mm={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 48 36.17",style:{"enable-background":"new 0 0 48 36.17"},"xml:space":"preserve"},pm=c("path",{d:`M25.59,34.11h-3.58v-6.59h3.58V34.11z M14.16,34.88L14.16,34.88c0-0.71,0.58-1.29,1.29-1.29h17.1
                        c0.71,0,1.29,0.58,1.29,1.29v0c0,0.71-0.58,1.29-1.29,1.29h-17.1C14.74,36.17,14.16,35.59,14.16,34.88z`},null,-1),gm=c("path",{class:"st0",d:`M3.32,27.6h41.35c1.53,0,2.76-1.24,2.76-2.76V3.24c0-1.53-1.24-2.76-2.76-2.76H3.32
                        c-1.53,0-2.76,1.24-2.76,2.76v21.6C0.56,26.37,1.8,27.6,3.32,27.6z`},null,-1),vm=[pm,gm],bm={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 48 48",style:{"enable-background":"new 0 0 48 48"},"xml:space":"preserve"},ym=c("path",{class:"st0",d:`M24.45,39.5c0.56,0,1.03-0.18,1.39-0.55c0.37-0.37,0.55-0.83,0.55-1.39s-0.18-1.03-0.55-1.39
                    c-0.37-0.37-0.83-0.55-1.39-0.55s-1.03,0.18-1.39,0.55c-0.37,0.37-0.55,0.83-0.55,1.39s0.18,1.03,0.55,1.39
                    C23.42,39.32,23.88,39.5,24.45,39.5z M7,46c-0.8,0-1.5-0.3-2.1-0.9C4.3,44.5,4,43.8,4,43V5c0-0.8,0.3-1.5,0.9-2.1C5.5,2.3,6.2,2,7,2
                    h34c0.8,0,1.5,0.3,2.1,0.9C43.7,3.5,44,4.2,44,5v38c0,0.8-0.3,1.5-0.9,2.1C42.5,45.7,41.8,46,41,46H7z`},null,-1),wm=[ym],_m={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 48 48",style:{"enable-background":"new 0 0 48 48"},"xml:space":"preserve"},km=c("path",{class:"st0",d:`M18,11.5c0.43,0,0.79-0.14,1.08-0.43c0.28-0.28,0.42-0.64,0.42-1.07s-0.14-0.79-0.42-1.07
                    C18.79,8.64,18.43,8.5,18,8.5s-0.79,0.14-1.08,0.43C16.64,9.21,16.5,9.57,16.5,10s0.14,0.79,0.42,1.07
                    C17.21,11.36,17.57,11.5,18,11.5z M13,46c-0.8,0-1.5-0.3-2.1-0.9C10.3,44.5,10,43.8,10,43V5c0-0.8,0.3-1.5,0.9-2.1
                    C11.5,2.3,12.2,2,13,2h22c0.8,0,1.5,0.3,2.1,0.9C37.7,3.5,38,4.2,38,5v38c0,0.8-0.3,1.5-0.9,2.1C36.5,45.7,35.8,46,35,46H13z`},null,-1),xm=[km];function Cm(e,t,s,i,n,o){return N(),V("div",null,[c("nav",fm,[c("span",{onClick:t[0]||(t[0]=r=>o.setPreviewMode("desktop")),"data-preview":"desktop",class:ut([n.previewMode=="desktop"?"active":""])},[(N(),V("svg",mm,vm))],2),c("span",{onClick:t[1]||(t[1]=r=>o.setPreviewMode("tablet")),"data-preview":"tablet",class:ut([n.previewMode=="tablet"?"active":""])},[(N(),V("svg",bm,wm))],2),c("span",{onClick:t[2]||(t[2]=r=>o.setPreviewMode("phone")),"data-preview":"phone",class:ut([n.previewMode=="phone"?"active":""])},[(N(),V("svg",_m,xm))],2)])])}const Sm=Ge(hm,[["render",Cm]]),Em={data(){},mounted(){mw.app.on("ready",()=>{new Mc,bd()})}},Lm=c("div",{class:"toolbar-nav",id:"mw-live-edit-editor"},null,-1),Am=[Lm];function Tm(e,t,s,i,n,o){return N(),V("div",null,Am)}const Mm=Ge(Em,[["render",Tm]]),Om={},Nm=Ln('<button class="mw-le-btn mw-le-btn-icon" id="toolbar-undo" disabled><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12.5,8C9.85,8 7.45,9 5.6,10.6L2,7V16H11L7.38,12.38C8.77,11.22 10.54,10.5 12.5,10.5C16.04,10.5 19.05,12.81 20.1,16L22.47,15.22C21.08,11.03 17.15,8 12.5,8Z"></path></svg></button><button class="mw-le-btn mw-le-btn-icon" id="toolbar-redo" disabled><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.4,10.6C16.55,9 14.15,8 11.5,8C6.85,8 2.92,11.03 1.54,15.22L3.9,16C4.95,12.81 7.95,10.5 11.5,10.5C13.45,10.5 15.23,11.22 16.62,12.38L13,16H22V7L18.4,10.6Z"></path></svg></button>',2);function Pm(e,t){return Nm}const Hm=Ge(Om,[["render",Pm]]),$m={data(){}},Rm={class:"mw-le-btn mw-le-btn-primary",id:"save-button"};function Fm(e,t,s,i,n,o){return N(),V("span",Rm," Save ")}const Dm=Ge($m,[["render",Fm]]),Im={components:{SaveButton:Dm,UndoRedo:Hm,Editor:Mm,ResolutionSwitch:Sm},data(){}},Bm={id:"toolbar"},zm={class:"toolbar-nav toolbar-nav-hover"},Vm={href:"",class:"mw-le-btn mw-le-btn-icon mw-le-btn-primary2"},Um={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",style:{width:"32px"}},jm=c("path",{d:"M21,11H6.83L10.41,7.41L9,6L3,12L9,18L10.41,16.58L6.83,13H21V11Z"},null,-1),Wm=[jm],qm={class:"toolbar-col"},Km={class:"toolbar-nav toolbar-nav-hover"},Ym=c("span",{style:{width:"50px"}},null,-1),Jm=c("span",{class:"mw-le-btn mw-le-btn-icon",id:"preview-button",onclick:"pagePreviewToggle()"},[c("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},[c("title",null,"eye"),c("path",{d:"M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17M12,4.5C7,4.5 2.73,7.61 1,12C2.73,16.39 7,19.5 12,19.5C17,19.5 21.27,16.39 23,12C21.27,7.61 17,4.5 12,4.5Z"})])],-1),Xm=Ln('<div id="user-menu-wrapper"><span class="mw-le-hamburger" id="toolbar-user-menu-button"><span></span><span></span><span></span></span><div id="user-menu" class="mw-le-nav-box"><div class="mw-le-nav-box-content" id="user-menu-header"><small>Project</small><h3>Boris Website</h3><span class="mw-le-btn mw-le-btn-sm"> In Test Period </span><span class="mw-le-btn mw-le-btn-sm mw-le-btn-primary2"> Upgrade </span></div><nav><a href=""><svg viewBox="0 0 40 40"><path d="M20 27.3l2.1-2.1-3.7-3.7h9.1v-3h-9.1l3.7-3.7-2.1-2.1-7.3 7.3 7.3 7.3zM20 40c-2.73 0-5.32-.52-7.75-1.58-2.43-1.05-4.56-2.48-6.38-4.3s-3.25-3.94-4.3-6.38S0 22.73 0 20c0-2.77.53-5.37 1.57-7.8s2.48-4.55 4.3-6.35 3.94-3.22 6.38-4.28S17.27 0 20 0c2.77 0 5.37.53 7.8 1.57s4.55 2.48 6.35 4.28c1.8 1.8 3.23 3.92 4.28 6.35C39.48 14.63 40 17.23 40 20c0 2.73-.52 5.32-1.58 7.75-1.05 2.43-2.48 4.56-4.28 6.38-1.8 1.82-3.92 3.25-6.35 4.3C25.37 39.48 22.77 40 20 40zm0-3c4.73 0 8.75-1.66 12.05-4.97C35.35 28.71 37 24.7 37 20c0-4.73-1.65-8.75-4.95-12.05C28.75 4.65 24.73 3 20 3c-4.7 0-8.71 1.65-12.02 4.95S3 15.27 3 20c0 4.7 1.66 8.71 4.98 12.03C11.29 35.34 15.3 37 20 37z"></path></svg> Back to Admin </a><a href=""><svg xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 40 40" xml:space="preserve" enable-background="new 0 0 40 40"><path d="M14.7 23c-2 0-3.6-.7-5-2-1.3-1.4-2-3-2-4.9 0-1.9.7-3.5 2-4.9 1.4-1.3 3-2 5-2 1.8 0 3.5.7 4.8 2 1.4 1.4 2 3 2 4.9 0 1.9-.6 3.5-2 4.9-1.3 1.3-3 2-4.8 2zm0-3a3.8 3.8 0 0 0 3.9-3.9c0-1.1-.4-2-1.2-2.8a3.8 3.8 0 0 0-2.7-1c-1.1 0-2 .3-2.8 1-.8.8-1.1 1.7-1.1 2.8 0 1 .3 2 1.1 2.8.8.7 1.7 1.1 2.8 1.1zm15 5.3c-1.5 0-2.7-.5-3.8-1.6-1-1-1.5-2.2-1.5-3.7s.5-2.7 1.6-3.8 2.2-1.5 3.7-1.5 2.7.5 3.8 1.6S35 18.4 35 20s-.5 2.7-1.6 3.8-2.2 1.5-3.7 1.5zM17.1 36.8c1.6-3 3.6-5 6.1-6S28 29 29.7 29a12.6 12.6 0 0 1 4.2.6A18.3 18.3 0 0 0 37 20c0-4.7-1.6-8.8-5-12-3.3-3.3-7.3-5-12-5S11.2 4.7 8 8a16.8 16.8 0 0 0-2.2 21.2 19.2 19.2 0 0 1 13.8-1.4 13.6 13.6 0 0 0-3.2 2.2H14.8a16.2 16.2 0 0 0-7.1 1.6c1.2 1.4 2.7 2.5 4.3 3.4s3.4 1.5 5.2 1.8zM20 40A20.3 20.3 0 0 1 1.6 27.7 19.4 19.4 0 0 1 5.9 5.8a20.2 20.2 0 0 1 21.9-4.2A20.3 20.3 0 0 1 40 20a20.3 20.3 0 0 1-12.2 18.4c-2.4 1-5 1.6-7.8 1.6z"></path></svg> Users </a><a href=""><svg viewBox="0 0 40 40"><path d="M15.4 40l-1-6.3c-.63-.23-1.3-.55-2-.95-.7-.4-1.32-.82-1.85-1.25l-5.9 2.7L0 26l5.4-3.95a5.1 5.1 0 01-.12-1.02c-.02-.39-.03-.73-.03-1.03s.01-.64.02-1.02c.02-.38.06-.73.12-1.02L0 14l4.65-8.2 5.9 2.7c.53-.43 1.15-.85 1.85-1.25.7-.4 1.37-.7 2-.9l1-6.35h9.2l1 6.3c.63.23 1.31.54 2.02.93.72.38 1.33.81 1.83 1.27l5.9-2.7L40 14l-5.4 3.85c.07.33.11.69.12 1.08a19.5 19.5 0 010 2.13c-.02.37-.06.72-.12 1.05L40 26l-4.65 8.2-5.9-2.7c-.53.43-1.14.86-1.83 1.28-.68.42-1.36.72-2.02.92l-1 6.3h-9.2zM20 26.5c1.8 0 3.33-.63 4.6-1.9s1.9-2.8 1.9-4.6-.63-3.33-1.9-4.6-2.8-1.9-4.6-1.9-3.33.63-4.6 1.9-1.9 2.8-1.9 4.6.63 3.33 1.9 4.6 2.8 1.9 4.6 1.9zm0-3c-.97 0-1.79-.34-2.48-1.02-.68-.68-1.02-1.51-1.02-2.48s.34-1.79 1.02-2.48c.68-.68 1.51-1.02 2.48-1.02s1.79.34 2.48 1.02c.68.68 1.02 1.51 1.02 2.48s-.34 1.79-1.02 2.48c-.69.68-1.51 1.02-2.48 1.02zM17.8 37h4.4l.7-5.6c1.1-.27 2.14-.68 3.12-1.25s1.88-1.25 2.68-2.05l5.3 2.3 2-3.6-4.7-3.45c.13-.57.24-1.12.33-1.67s.12-1.11.12-1.67-.03-1.12-.1-1.67-.18-1.11-.35-1.67L36 13.2l-2-3.6-5.3 2.3c-.77-.87-1.63-1.59-2.6-2.17s-2.03-.96-3.2-1.12L22.2 3h-4.4l-.7 5.6c-1.13.23-2.19.63-3.17 1.2s-1.86 1.27-2.62 2.1L6 9.6l-2 3.6 4.7 3.45c-.13.57-.24 1.12-.32 1.67s-.13 1.11-.13 1.68.04 1.12.12 1.67c.08.55.19 1.11.32 1.67L4 26.8l2 3.6 5.3-2.3c.8.8 1.69 1.48 2.68 2.05s2.02.98 3.12 1.25l.7 5.6z"></path></svg> Website Settings </a><a href=""><svg viewBox="0 0 40 32.29"><path d="M40 3v26c0 .8-.3 1.5-.9 2.1-.6.6-1.3.9-2.1.9H3c-.8 0-1.5-.3-2.1-.9-.6-.6-.9-1.3-.9-2.1V3C0 2.2.3 1.5.9.9 1.5.3 2.2 0 3 0h34c.8 0 1.5.3 2.1.9.6.6.9 1.3.9 2.1zM3 8.45h34V3H3v5.45zm0 6.45V29h34V14.9H3zM3 29V3v26z"></path></svg> Plans and Payments </a><a href=""><svg viewBox="0 0 36 36.1"><path d="M3 36.1c-.8 0-1.5-.3-2.1-.9-.6-.6-.9-1.3-.9-2.1V22.6h3v10.5h30V3H3v10.6H0V3C0 2.2.3 1.5.9.9S2.2 0 3 0h30c.8 0 1.5.3 2.1.9.6.6.9 1.3.9 2.1v30.1c0 .8-.3 1.5-.9 2.1-.6.6-1.3.9-2.1.9H3zm11.65-8.35L12.4 25.5l5.9-5.9H0v-3h18.3l-5.9-5.9 2.25-2.25 9.65 9.65-9.65 9.65z"></path></svg> Log out </a></nav></div></div>',1);function Zm(e,t,s,i,n,o){const r=De("ResolutionSwitch"),l=De("Editor"),a=De("UndoRedo"),d=De("SaveButton");return N(),V("div",Bm,[c("div",zm,[c("a",Vm,[(N(),V("svg",Um,Wm))])]),U(r),U(l),c("div",qm,[c("div",Km,[U(a),U(d)]),Ym,Jm,Xm])])}const Gm=Ge(Im,[["render",Zm]]);function Qm(e,t){return N(),Be("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"2",stroke:"currentColor","aria-hidden":"true"},[U("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"}),U("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15 12a3 3 0 11-6 0 3 3 0 016 0z"})])}function ep(e,t){return N(),Be("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"2",stroke:"currentColor","aria-hidden":"true"},[U("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"})])}function tp(e,t){return N(),Be("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"2",stroke:"currentColor","aria-hidden":"true"},[U("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"}),U("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 12a9 9 0 11-18 0 9 9 0 0118 0z"})])}const sp={},ip={version:"1.1",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 129 129","xmlns:xlink":"http://www.w3.org/1999/xlink"},np=c("g",null,[c("g",null,[c("path",{d:"m10.5,58.9h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3c0-2.3-1.8-4.1-4.1-4.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.2 1.9,4.1 4.1,4.1zm4.1-44.3h36.1v36.1h-36.1v-36.1z"}),c("path",{d:"m122.6,10.5c0-2.3-1.8-4.1-4.1-4.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.3 1.8,4.1 4.1,4.1h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3zm-8.2,40.2h-36.1v-36.1h36.1v36.1z"}),c("path",{d:"m10.5,122.6h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3c0-2.3-1.8-4.1-4.1-4.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.2 1.9,4.1 4.1,4.1zm4.1-44.3h36.1v36.1h-36.1v-36.1z"}),c("path",{d:"m118.5,70.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.3 1.8,4.1 4.1,4.1h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3c0-2.2-1.9-4.1-4.1-4.1zm-4.1,44.3h-36.1v-36.1h36.1v36.1z"})])],-1),op=[np];function rp(e,t){return N(),V("svg",ip,op)}const lp=Ge(sp,[["render",rp]]),ap={},cp={version:"1.1",id:"Capa_1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",width:"612px",height:"612px",viewBox:"0 0 612 612","xml:space":"preserve"},up=c("g",null,[c("g",{id:"_x33__32_"},[c("g",null,[c("path",{d:`M59.226,88.839C26.513,88.839,0,115.352,0,148.064s26.513,59.226,59.226,59.226s59.226-26.514,59.226-59.226
				S91.938,88.839,59.226,88.839z M59.226,246.774C26.513,246.774,0,273.288,0,306c0,32.713,26.513,59.226,59.226,59.226
				s59.226-26.513,59.226-59.226C118.452,273.288,91.938,246.774,59.226,246.774z M59.226,404.71C26.513,404.71,0,431.223,0,463.936
				c0,32.712,26.513,59.226,59.226,59.226s59.226-26.514,59.226-59.226C118.452,431.223,91.938,404.71,59.226,404.71z
				 M197.419,187.548h375.096c21.815,0,39.484-17.669,39.484-39.484s-17.669-39.484-39.484-39.484H197.419
				c-21.815,0-39.484,17.669-39.484,39.484S175.604,187.548,197.419,187.548z M572.516,266.516H197.419
				c-21.815,0-39.484,17.669-39.484,39.484c0,21.814,17.669,39.484,39.484,39.484h375.096c21.815,0,39.484-17.67,39.484-39.484
				C612,284.185,594.331,266.516,572.516,266.516z M572.516,424.451H197.419c-21.815,0-39.484,17.67-39.484,39.484
				s17.669,39.483,39.484,39.483h375.096c21.815,0,39.484-17.669,39.484-39.483S594.331,424.451,572.516,424.451z`})])])],-1),dp=c("g",null,null,-1),hp=c("g",null,null,-1),fp=c("g",null,null,-1),mp=c("g",null,null,-1),pp=c("g",null,null,-1),gp=c("g",null,null,-1),vp=c("g",null,null,-1),bp=c("g",null,null,-1),yp=c("g",null,null,-1),wp=c("g",null,null,-1),_p=c("g",null,null,-1),kp=c("g",null,null,-1),xp=c("g",null,null,-1),Cp=c("g",null,null,-1),Sp=c("g",null,null,-1),Ep=[up,dp,hp,fp,mp,pp,gp,vp,bp,yp,wp,_p,kp,xp,Cp,Sp];function Lp(e,t){return N(),V("svg",cp,Ep)}const Ap=Ge(ap,[["render",Lp]]),Tp={},Mp={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 1000 1000","xml:space":"preserve"},Op=Ln('<g><g transform="translate(0.000000,511.000000) scale(0.100000,-0.100000)"><path d="M4905.7,4342.3c-33.5-8.4-475.7-224.2-980.7-475.7l-920-461l1104.4-509.2L5213.7,2385l77.5,44c41.9,23.1,391.9,213.8,777.5,423.3c385.6,209.6,762.8,414.9,836.2,456.8l136.2,73.3l-953.5,475.7c-570,287.1-984.9,482-1035.2,488.3C5006.3,4352.8,4941.3,4350.7,4905.7,4342.3z"></path><path d="M2782.9,2037.2l6.3-961.9l62.9-92.2c58.7-85.9,119.4-117.3,1037.3-578.4C4425.8,136.5,4895.2-87.8,4932.9-96.2l67.1-12.6l-4.2,1043.6l-6.3,1043.6l-1037.3,477.8c-570,264-1068.7,492.5-1106.5,511.3l-69.2,31.4L2782.9,2037.2z"></path><path d="M6330.7,2466.8l-859.2-469.4l-6.3-955.6c-2.1-526,2.1-955.6,10.5-955.6c10.5,2.1,375.1,182.3,813.1,404.4c741.8,375.1,800.5,408.6,859.2,492.5l62.9,92.2l6.3,930.4c2.1,511.3-2.1,930.4-10.5,930.4C7198.3,2936.2,6804.3,2724.5,6330.7,2466.8z"></path><path d="M2223.3,318.8c-33.5-8.4-486.2-228.4-1003.8-488.3L276.6-641l366.7-199.1c201.2-111.1,576.3-316.4,836.1-456.8c259.8-140.4,505-274.5,546.9-297.6l77.5-44l1104.4,511.3l1104.4,509.2l-930.4,465.2C2826.9,123.9,2420.3,316.7,2370,323C2323.9,329.3,2259,327.2,2223.3,318.8z"></path><path d="M7588,318.8c-33.5-8.4-475.7-224.2-980.7-475.7l-920-461l1104.4-509.2l1104.4-511.3l75.4,41.9c44,25.1,394,215.8,779.6,425.4c385.6,209.6,762.8,414.9,836.1,456.8l136.2,73.3L8770-165.3C8200,121.8,7785,316.7,7734.7,323C7688.6,329.3,7623.7,327.2,7588,318.8z"></path><path d="M3428.3-1537.9L2328.1-2045l-6.3-1043.6l-4.2-1041.5l77.5,14.7c41.9,6.3,509.2,230.5,1037.3,494.6c873.8,438,966.1,488.3,1022.6,565.8c33.5,48.2,67.1,115.3,73.3,153c6.3,35.6,8.4,471.5,6.3,968.2l-6.3,905.3L3428.3-1537.9z"></path><path d="M5465.2-1986.4l6.3-961.9l62.9-92.2c58.7-83.8,119.5-119.5,1026.8-576.3c532.3-266.1,1001.7-490.4,1043.6-498.8l77.5-14.7l-4.2,1041.5l-6.3,1043.6l-1037.3,477.8c-570,264-1068.8,492.5-1106.5,511.3l-69.2,31.4L5465.2-1986.4z"></path><path d="M100.5-2017.8l6.3-930.4l62.9-92.2c58.7-83.8,117.4-117.3,859.2-492.5c438-222.1,802.6-402.4,813.1-404.4c8.4,0,12.6,429.6,10.5,955.6l-6.3,955.6L987-1556.8c-473.6,257.7-867.6,469.4-876,469.4C102.6-1087.4,98.4-1506.5,100.5-2017.8z"></path><path d="M9013-1556.8l-859.2-469.4l-6.3-955.6c-2.1-526,2.1-955.6,10.5-955.6c10.5,2.1,375.1,182.3,813.1,404.4c741.8,375.1,800.5,408.6,859.2,492.5l62.9,92.2l6.3,930.4c2.1,511.3-2.1,930.4-10.5,930.4C9880.6-1087.4,9486.6-1299,9013-1556.8z"></path></g></g>',1),Np=[Op];function Pp(e,t){return N(),V("svg",Mp,Np)}const Hp=Ge(Tp,[["render",Pp]]),$p={},Rp={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 1000 1000","enable-background":"new 0 0 1000 1000","xml:space":"preserve"},Fp=c("g",null,[c("g",{transform:"translate(0.000000,511.000000) scale(0.100000,-0.100000)"},[c("path",{d:"M731.7,4913.1c-204.8-40.2-442.2-218.2-535.9-402c-99.5-191.4-95.7-67-95.7-3252c0-3242.4-3.8-3097,105.3-3284.5c70.8-120.6,214.4-250.8,352.2-319.6l126.3-61.3l1125.5-5.7l1125.5-5.7l80.4,57.4c124.4,84.2,384.7,212.5,574.2,279.5c168.4,59.3,168.4,59.3,243.1,183.8l72.7,122.5l-1496.8,9.6c-1663.3,11.5-1560,1.9-1626.9,139.7c-28.7,61.3-30.6,306.3-30.6,2888.3c0,2760.1,0,2821.3,38.3,2880.7c19.1,34.4,59.3,76.6,90,95.7c49.8,32.5,231.6,34.4,4122.9,34.4H9075l53.6-40.2c107.2-78.5,120.6-135.9,120.6-511v-338.8l168.4,84.2c179.9,90,342.6,145.5,428.8,145.5h53.6v312c0,201-9.6,344.5-26.8,407.7c-80.4,300.5-319.6,524.4-624,581.9C9122.9,4939.9,856.1,4938,731.7,4913.1z"}),c("path",{d:"M9727.7,3423.9C9358.3,3305.3,8632.9,2821,7852,2168.3C6295.8,870.6,4498.5-1058.8,3956.8-2008.2l-84.2-145.5l-178-61.3c-371.3-126.3-681.4-313.9-930.2-564.6c-176.1-179.9-294.8-338.8-551.3-746.5c-384.7-610.6-589.5-819.2-947.5-957l-149.3-57.4H607.2H100v-86.1v-86.1h2775.4h2775.4v86.1v86.1l-1898.7,1.9c-1123.5,1.9-1818.4,9.6-1701.6,19.1c302.4,23,585.7,72.7,786.7,135.9c338.8,109.1,507.2,218.2,796.3,516.8c417.3,434.5,620.2,771.4,685.2,1142.7c15.3,86.1,30.6,158.9,32.5,160.8c3.8,1.9,67,34.5,139.7,70.8c1085.3,549.3,3162,2553.4,4513.3,4354.5c505.3,671.8,832.6,1236.5,886.2,1527.4C9907.7,3473.7,9892.3,3477.5,9727.7,3423.9z M4177-2438.8c0-216.3-38.3-403.9-112.9-564.6c-55.5-118.7-61.3-124.4-199.1-185.7c-78.5-36.4-225.9-93.8-331.1-126.3c-162.7-53.6-225.9-63.2-440.2-72.7c-195.2-5.7-285.2-1.9-398.1,23c-80.4,19.1-145.5,40.2-145.5,47.9c0,34.5,201,289,340.7,428.7c283.3,287.1,656.5,486.2,1104.4,587.6c84.2,19.1,158.9,36.4,168.4,36.4C4171.2-2262.7,4177-2343.1,4177-2438.8z"}),c("path",{d:"M9789,2746.4c-55.5-101.5-199.1-333.1-319.6-513L9249.2,1908V172c0-1646.1-1.9-1739.9-34.5-1801.1c-19.1-36.4-65.1-82.3-101.4-101.5c-61.3-32.5-151.2-34.4-1684.4-34.4H5807.7l-197.1-158.9c-369.4-294.8-706.3-528.3-993.4-687.2l-124.4-68.9l-24.9-130.1c-45.9-239.3-176.1-509.2-365.6-761.8c-51.7-67-97.6-130.1-105.3-143.6c-9.6-15.3,513-21,2044.2-21h2059.5v86.1v86.1h-86.1c-149.3,0-482.3,187.6-696.7,390.5c-206.7,197.1-335,438.3-350.3,662.3l-5.7,86.1l1177.1,9.6l1177.1,9.6l126.3,61.3c137.8,68.9,281.4,199.1,352.2,319.6c109.1,185.7,105.3,103.3,101.4,2633.7l-5.7,2325.6L9789,2746.4z"})])],-1),Dp=[Fp];function Ip(e,t){return N(),V("svg",Rp,Dp)}const Bp=Ge($p,[["render",Ip]]),zp={methods:{show:function(e){this.emitter.emit("live-edit-ui-show",e)}},components:{DesignSettingsIcon:Bp,LayoutsIcon:lp,ModulesIcon:Hp,PencilIcon:ep,PlayIcon:tp,CogIcon:Qm},data(){return{}}},Vp={id:"bubble-nav",class:"active"};function Up(e,t,s,i,n,o){const r=De("DesignSettingsIcon"),l=De("ModulesIcon"),a=De("LayoutsIcon");return N(),V("div",Vp,[c("span",{onClick:t[0]||(t[0]=d=>o.show("template-settings"))},[U(r)]),c("span",{onClick:t[1]||(t[1]=d=>o.show("show-modules"))},[U(l)]),c("span",{onClick:t[2]||(t[2]=d=>o.show("show-layouts"))},[U(a)])])}const jp=Ge(zp,[["render",Up]]),Wp={components:{BubbleNav:jp},data(){}};function qp(e,t,s,i,n,o){const r=De("BubbleNav");return N(),V("div",null,[U(r)])}const Kp=Ge(Wp,[["render",qp]]);/*!
  * vue-color-kit v1.0.4
  * (c) 2021 
  * @license MIT
  */function bs(e){let t={r:0,g:0,b:0,a:1};/#/.test(e)?t=Jp(e):/rgb/.test(e)?t=kl(e):typeof e=="string"?t=kl(`rgba(${e})`):Object.prototype.toString.call(e)==="[object Object]"&&(t=e);const{r:s,g:i,b:n,a:o}=t,{h:r,s:l,v:a}=Xp(t);return{r:s,g:i,b:n,a:o===void 0?1:o,h:r,s:l,v:a}}function Qo(e){const t=document.createElement("canvas"),s=t.getContext("2d"),i=e*2;return t.width=i,t.height=i,s.fillStyle="#ffffff",s.fillRect(0,0,i,i),s.fillStyle="#ccd5db",s.fillRect(0,0,e,e),s.fillRect(e,e,e,e),t}function Co(e,t,s,i,n,o){const r=e==="l",l=t.createLinearGradient(0,0,r?s:0,r?0:i);l.addColorStop(.01,n),l.addColorStop(.99,o),t.fillStyle=l,t.fillRect(0,0,s,i)}function Yp({r:e,g:t,b:s},i){const n=r=>("0"+Number(r).toString(16)).slice(-2),o=`#${n(e)}${n(t)}${n(s)}`;return i?o.toUpperCase():o}function Jp(e){e=e.slice(1);const t=s=>parseInt(s,16)||0;return{r:t(e.slice(0,2)),g:t(e.slice(2,4)),b:t(e.slice(4,6))}}function kl(e){return typeof e=="string"?(e=(/rgba?\((.*?)\)/.exec(e)||["","0,0,0,1"])[1].split(","),{r:Number(e[0])||0,g:Number(e[1])||0,b:Number(e[2])||0,a:Number(e[3]?e[3]:1)}):e}function Xp({r:e,g:t,b:s}){e=e/255,t=t/255,s=s/255;const i=Math.max(e,t,s),n=Math.min(e,t,s),o=i-n;let r=0;i===n?r=0:i===e?t>=s?r=60*(t-s)/o:r=60*(t-s)/o+360:i===t?r=60*(s-e)/o+120:i===s&&(r=60*(e-t)/o+240),r=Math.floor(r);let l=parseFloat((i===0?0:1-n/i).toFixed(2)),a=parseFloat(i.toFixed(2));return{h:r,s:l,v:a}}var er=Jt({props:{color:{type:String,default:"#000000"},hsv:{type:Object,default:null},size:{type:Number,default:152}},emits:["selectSaturation"],data(){return{slideSaturationStyle:{}}},mounted(){this.renderColor(),this.renderSlide()},methods:{renderColor(){const e=this.$refs.canvasSaturation,t=this.size,s=e.getContext("2d");e.width=t,e.height=t,s.fillStyle=this.color,s.fillRect(0,0,t,t),Co("l",s,t,t,"#FFFFFF","rgba(255,255,255,0)"),Co("p",s,t,t,"rgba(0,0,0,0)","#000000")},renderSlide(){this.slideSaturationStyle={left:this.hsv.s*this.size-5+"px",top:(1-this.hsv.v)*this.size-5+"px"}},selectSaturation(e){const{top:t,left:s}=this.$el.getBoundingClientRect(),i=e.target.getContext("2d"),n=r=>{let l=r.clientX-s,a=r.clientY-t;l<0&&(l=0),a<0&&(a=0),l>this.size&&(l=this.size),a>this.size&&(a=this.size),this.slideSaturationStyle={left:l-5+"px",top:a-5+"px"};const d=i.getImageData(Math.min(l,this.size-1),Math.min(a,this.size-1),1,1),[h,g,b]=d.data;this.$emit("selectSaturation",{r:h,g,b})};n(e);const o=()=>{document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",o)};document.addEventListener("mousemove",n),document.addEventListener("mouseup",o)}}});const Zp={ref:"canvasSaturation"};function Gp(e,t,s,i,n,o){return N(),Be("div",{class:"saturation",onMousedown:t[1]||(t[1]=Go((...r)=>e.selectSaturation&&e.selectSaturation(...r),["prevent","stop"]))},[U("canvas",Zp,null,512),U("div",{style:e.slideSaturationStyle,class:"slide"},null,4)],32)}er.render=Gp;er.__file="src/color/Saturation.vue";var tr=Jt({props:{hsv:{type:Object,default:null},width:{type:Number,default:15},height:{type:Number,default:152}},emits:["selectHue"],data(){return{slideHueStyle:{}}},mounted(){this.renderColor(),this.renderSlide()},methods:{renderColor(){const e=this.$refs.canvasHue,t=this.width,s=this.height,i=e.getContext("2d");e.width=t,e.height=s;const n=i.createLinearGradient(0,0,0,s);n.addColorStop(0,"#FF0000"),n.addColorStop(.17*1,"#FF00FF"),n.addColorStop(.17*2,"#0000FF"),n.addColorStop(.17*3,"#00FFFF"),n.addColorStop(.17*4,"#00FF00"),n.addColorStop(.17*5,"#FFFF00"),n.addColorStop(1,"#FF0000"),i.fillStyle=n,i.fillRect(0,0,t,s)},renderSlide(){this.slideHueStyle={top:(1-this.hsv.h/360)*this.height-2+"px"}},selectHue(e){const{top:t}=this.$el.getBoundingClientRect(),s=e.target.getContext("2d"),i=o=>{let r=o.clientY-t;r<0&&(r=0),r>this.height&&(r=this.height),this.slideHueStyle={top:r-2+"px"};const l=s.getImageData(0,Math.min(r,this.height-1),1,1),[a,d,h]=l.data;this.$emit("selectHue",{r:a,g:d,b:h})};i(e);const n=()=>{document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",n)};document.addEventListener("mousemove",i),document.addEventListener("mouseup",n)}}});const Qp={ref:"canvasHue"};function e1(e,t,s,i,n,o){return N(),Be("div",{class:"hue",onMousedown:t[1]||(t[1]=Go((...r)=>e.selectHue&&e.selectHue(...r),["prevent","stop"]))},[U("canvas",Qp,null,512),U("div",{style:e.slideHueStyle,class:"slide"},null,4)],32)}tr.render=e1;tr.__file="src/color/Hue.vue";var sr=Jt({props:{color:{type:String,default:"#000000"},rgba:{type:Object,default:null},width:{type:Number,default:15},height:{type:Number,default:152}},emits:["selectAlpha"],data(){return{slideAlphaStyle:{},alphaSize:5}},watch:{color(){this.renderColor()},"rgba.a"(){this.renderSlide()}},mounted(){this.renderColor(),this.renderSlide()},methods:{renderColor(){const e=this.$refs.canvasAlpha,t=this.width,s=this.height,i=this.alphaSize,n=Qo(i),o=e.getContext("2d");e.width=t,e.height=s,o.fillStyle=o.createPattern(n,"repeat"),o.fillRect(0,0,t,s),Co("p",o,t,s,"rgba(255,255,255,0)",this.color)},renderSlide(){this.slideAlphaStyle={top:this.rgba.a*this.height-2+"px"}},selectAlpha(e){const{top:t}=this.$el.getBoundingClientRect(),s=n=>{let o=n.clientY-t;o<0&&(o=0),o>this.height&&(o=this.height);let r=parseFloat((o/this.height).toFixed(2));this.$emit("selectAlpha",r)};s(e);const i=()=>{document.removeEventListener("mousemove",s),document.removeEventListener("mouseup",i)};document.addEventListener("mousemove",s),document.addEventListener("mouseup",i)}}});const t1={ref:"canvasAlpha"};function s1(e,t,s,i,n,o){return N(),Be("div",{class:"color-alpha",onMousedown:t[1]||(t[1]=Go((...r)=>e.selectAlpha&&e.selectAlpha(...r),["prevent","stop"]))},[U("canvas",t1,null,512),U("div",{style:e.slideAlphaStyle,class:"slide"},null,4)],32)}sr.render=s1;sr.__file="src/color/Alpha.vue";var ir=Jt({props:{color:{type:String,default:"#000000"},width:{type:Number,default:100},height:{type:Number,default:30}},data(){return{alphaSize:5}},watch:{color(){this.renderColor()}},mounted(){this.renderColor()},methods:{renderColor(){const e=this.$el,t=this.width,s=this.height,i=this.alphaSize,n=Qo(i),o=e.getContext("2d");e.width=t,e.height=s,o.fillStyle=o.createPattern(n,"repeat"),o.fillRect(0,0,t,s),o.fillStyle=this.color,o.fillRect(0,0,t,s)}}});function i1(e,t,s,i,n,o){return N(),Be("canvas")}ir.render=i1;ir.__file="src/color/Preview.vue";var nr=Jt({props:{suckerCanvas:{type:Object,default:null},suckerArea:{type:Array,default:()=>[]}},data(){return{isOpenSucker:!1,suckerPreview:null,isSucking:!1}},watch:{suckerCanvas(e){this.isSucking=!1,this.suckColor(e)}},methods:{openSucker(){this.isOpenSucker?this.keydownHandler({keyCode:27}):(this.isOpenSucker=!0,this.isSucking=!0,this.$emit("openSucker",!0),document.addEventListener("keydown",this.keydownHandler))},keydownHandler(e){e.keyCode===27&&(this.isOpenSucker=!1,this.isSucking=!1,this.$emit("openSucker",!1),document.removeEventListener("keydown",this.keydownHandler),document.removeEventListener("mousemove",this.mousemoveHandler),document.removeEventListener("mouseup",this.mousemoveHandler),this.suckerPreview&&(document.body.removeChild(this.suckerPreview),this.suckerPreview=null))},mousemoveHandler(e){const{clientX:t,clientY:s}=e,{top:i,left:n,width:o,height:r}=this.suckerCanvas.getBoundingClientRect(),l=t-n,a=s-i,h=this.suckerCanvas.getContext("2d").getImageData(Math.min(l,o-1),Math.min(a,r-1),1,1);let[g,b,k,v]=h.data;v=parseFloat((v/255).toFixed(2));const _=this.suckerPreview.style;Object.assign(_,{position:"absolute",left:t+20+"px",top:s-36+"px",width:"24px",height:"24px",borderRadius:"50%",border:"2px solid #fff",boxShadow:"0 0 8px 0 rgba(0, 0, 0, 0.16)",background:`rgba(${g}, ${b}, ${k}, ${v})`,zIndex:95}),this.suckerArea.length&&t>=this.suckerArea[0]&&s>=this.suckerArea[1]&&t<=this.suckerArea[2]&&s<=this.suckerArea[3]?_.display="":_.display="none"},suckColor(e){e&&e.tagName!=="CANVAS"||(this.suckerPreview=document.createElement("div"),this.suckerPreview&&document.body.appendChild(this.suckerPreview),document.addEventListener("mousemove",this.mousemoveHandler),document.addEventListener("mouseup",this.mousemoveHandler),e.addEventListener("click",t=>{const{clientX:s,clientY:i}=t,{top:n,left:o,width:r,height:l}=e.getBoundingClientRect(),a=s-o,d=i-n,g=e.getContext("2d").getImageData(Math.min(a,r-1),Math.min(d,l-1),1,1);let[b,k,v,_]=g.data;_=parseFloat((_/255).toFixed(2)),this.$emit("selectSucker",{r:b,g:k,b:v,a:_})}))}}});const n1=U("path",{d:"M13.1,8.2l5.6,5.6c0.4,0.4,0.5,1.1,0.1,1.5s-1.1,0.5-1.5,0.1c0,0-0.1,0-0.1-0.1l-1.4-1.4l-7.7,7.7C7.9,21.9,7.6,22,7.3,22H3.1C2.5,22,2,21.5,2,20.9l0,0v-4.2c0-0.3,0.1-0.6,0.3-0.8l5.8-5.8C8.5,9.7,9.2,9.6,9.7,10s0.5,1.1,0.1,1.5c0,0,0,0.1-0.1,0.1l-5.5,5.5v2.7h2.7l7.4-7.4L8.7,6.8c-0.5-0.4-0.5-1-0.1-1.5s1.1-0.5,1.5-0.1c0,0,0.1,0,0.1,0.1l1.4,1.4l3.5-3.5c1.6-1.6,4.1-1.6,5.8-0.1c1.6,1.6,1.6,4.1,0.1,5.8L20.9,9l-3.6,3.6c-0.4,0.4-1.1,0.5-1.5,0.1"},null,-1),o1={key:1,class:"sucker",viewBox:"-16 -16 68 68",xmlns:"http://www.w3.org/2000/svg",stroke:"#9099a4"},r1=U("g",{fill:"none","fill-rule":"evenodd"},[U("g",{transform:"translate(1 1)","stroke-width":"4"},[U("circle",{"stroke-opacity":".5",cx:"18",cy:"18",r:"18"}),U("path",{d:"M36 18c0-9.94-8.06-18-18-18"},[U("animateTransform",{attributeName:"transform",type:"rotate",from:"0 18 18",to:"360 18 18",dur:"1s",repeatCount:"indefinite"})])])],-1);function l1(e,t,s,i,n,o){return N(),Be("div",null,[e.isSucking?ke("v-if",!0):(N(),Be("svg",{key:0,class:[{active:e.isOpenSucker},"sucker"],xmlns:"http://www.w3.org/2000/svg",viewBox:"-12 -12 48 48",onClick:t[1]||(t[1]=(...r)=>e.openSucker&&e.openSucker(...r))},[n1],2)),e.isSucking?(N(),Be("svg",o1,[r1])):ke("v-if",!0)])}nr.render=l1;nr.__file="src/color/Sucker.vue";var or=Jt({props:{name:{type:String,default:""},color:{type:String,default:""}},emits:["inputColor"],setup(e,{emit:t}){return{modelColor:jt({get(){return e.color||""},set(i){t("inputColor",i)}})}}});const a1={class:"color-type"},c1={class:"name"};function u1(e,t,s,i,n,o){return N(),Be("div",a1,[U("span",c1,Ye(e.name),1),_i(U("input",{"onUpdate:modelValue":t[1]||(t[1]=r=>e.modelColor=r),class:"value"},null,512),[[Za,e.modelColor]])])}or.render=u1;or.__file="src/color/Box.vue";var rr=Jt({name:"ColorPicker",props:{color:{type:String,default:"#000000"},colorsDefault:{type:Array,default:()=>[]},colorsHistoryKey:{type:String,default:""}},emits:["selectColor"],setup(e,{emit:t}){const s=Pt(),i=Pt([]),n=Pt();e.colorsHistoryKey&&localStorage&&(i.value=JSON.parse(localStorage.getItem(e.colorsHistoryKey))||[]),n.value=Qo(4).toDataURL(),xn(()=>{o(s.value)});function o(l){if(!l)return;const a=i.value||[],d=a.indexOf(l);d>=0&&a.splice(d,1),a.length>=8&&(a.length=7),a.unshift(l),i.value=a||[],localStorage&&e.colorsHistoryKey&&localStorage.setItem(e.colorsHistoryKey,JSON.stringify(a))}function r(l){t("selectColor",l)}return{setColorsHistory:o,colorsHistory:i,color:s,imgAlphaBase64:n,selectColor:r}}});const d1={class:"colors"},h1={key:0,class:"colors history"};function f1(e,t,s,i,n,o){return N(),Be("div",null,[U("ul",d1,[(N(!0),Be(Pe,null,St(e.colorsDefault,r=>(N(),Be("li",{key:r,class:"item",onClick:l=>e.selectColor(r)},[U("div",{style:{background:`url(${e.imgAlphaBase64})`},class:"alpha"},null,4),U("div",{style:{background:r},class:"color"},null,4)],8,["onClick"]))),128))]),e.colorsHistory.length?(N(),Be("ul",h1,[(N(!0),Be(Pe,null,St(e.colorsHistory,r=>(N(),Be("li",{key:r,class:"item",onClick:l=>e.selectColor(r)},[U("div",{style:{background:`url(${e.imgAlphaBase64})`},class:"alpha"},null,4),U("div",{style:{background:r},class:"color"},null,4)],8,["onClick"]))),128))])):ke("v-if",!0)])}rr.render=f1;rr.__file="src/color/Colors.vue";var Rs=Jt({components:{Saturation:er,Hue:tr,Alpha:sr,Preview:ir,Sucker:nr,Box:or,Colors:rr},emits:["changeColor","openSucker"],props:{color:{type:String,default:"#000000"},theme:{type:String,default:"dark"},suckerHide:{type:Boolean,default:!0},suckerCanvas:{type:null,default:null},suckerArea:{type:Array,default:()=>[]},colorsDefault:{type:Array,default:()=>["#000000","#FFFFFF","#FF1900","#F47365","#FFB243","#FFE623","#6EFF2A","#1BC7B1","#00BEFF","#2E81FF","#5D61FF","#FF89CF","#FC3CAD","#BF3DCE","#8E00A7","rgba(0,0,0,0)"]},colorsHistoryKey:{type:String,default:"vue-colorpicker-history"}},data(){return{hueWidth:15,hueHeight:152,previewHeight:30,modelRgba:"",modelHex:"",r:0,g:0,b:0,a:1,h:0,s:0,v:0}},computed:{isLightTheme(){return this.theme==="light"},totalWidth(){return this.hueHeight+(this.hueWidth+8)*2},previewWidth(){return this.totalWidth-(this.suckerHide?0:this.previewHeight)},rgba(){return{r:this.r,g:this.g,b:this.b,a:this.a}},hsv(){return{h:this.h,s:this.s,v:this.v}},rgbString(){return`rgb(${this.r}, ${this.g}, ${this.b})`},rgbaStringShort(){return`${this.r}, ${this.g}, ${this.b}, ${this.a}`},rgbaString(){return`rgba(${this.rgbaStringShort})`},hexString(){return Yp(this.rgba,!0)}},created(){Object.assign(this,bs(this.color)),this.setText(),this.$watch("rgba",()=>{this.$emit("changeColor",{rgba:this.rgba,hsv:this.hsv,hex:this.modelHex})})},methods:{selectSaturation(e){const{r:t,g:s,b:i,h:n,s:o,v:r}=bs(e);Object.assign(this,{r:t,g:s,b:i,h:n,s:o,v:r}),this.setText()},selectHue(e){const{r:t,g:s,b:i,h:n,s:o,v:r}=bs(e);Object.assign(this,{r:t,g:s,b:i,h:n,s:o,v:r}),this.setText(),this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide()})},selectAlpha(e){this.a=e,this.setText()},inputHex(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=bs(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.modelHex=e,this.modelRgba=this.rgbaStringShort,this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})},inputRgba(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=bs(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.modelHex=this.hexString,this.modelRgba=e,this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})},setText(){this.modelHex=this.hexString,this.modelRgba=this.rgbaStringShort},openSucker(e){this.$emit("openSucker",e)},selectSucker(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=bs(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.setText(),this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})},selectColor(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=bs(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.setText(),this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})}}});const m1={class:"color-set"};function p1(e,t,s,i,n,o){const r=De("Saturation"),l=De("Hue"),a=De("Alpha"),d=De("Preview"),h=De("Sucker"),g=De("Box"),b=De("Colors");return N(),Be("div",{class:["hu-color-picker",{light:e.isLightTheme}],style:{width:e.totalWidth+"px"}},[U("div",m1,[U(r,{ref:"saturation",color:e.rgbString,hsv:e.hsv,size:e.hueHeight,onSelectSaturation:e.selectSaturation},null,8,["color","hsv","size","onSelectSaturation"]),U(l,{ref:"hue",hsv:e.hsv,width:e.hueWidth,height:e.hueHeight,onSelectHue:e.selectHue},null,8,["hsv","width","height","onSelectHue"]),U(a,{ref:"alpha",color:e.rgbString,rgba:e.rgba,width:e.hueWidth,height:e.hueHeight,onSelectAlpha:e.selectAlpha},null,8,["color","rgba","width","height","onSelectAlpha"])]),U("div",{style:{height:e.previewHeight+"px"},class:"color-show"},[U(d,{color:e.rgbaString,width:e.previewWidth,height:e.previewHeight},null,8,["color","width","height"]),e.suckerHide?ke("v-if",!0):(N(),Be(h,{key:0,"sucker-canvas":e.suckerCanvas,"sucker-area":e.suckerArea,onOpenSucker:e.openSucker,onSelectSucker:e.selectSucker},null,8,["sucker-canvas","sucker-area","onOpenSucker","onSelectSucker"]))],4),U(g,{name:"HEX",color:e.modelHex,onInputColor:e.inputHex},null,8,["color","onInputColor"]),U(g,{name:"RGBA",color:e.modelRgba,onInputColor:e.inputRgba},null,8,["color","onInputColor"]),U(b,{color:e.rgbaString,"colors-default":e.colorsDefault,"colors-history-key":e.colorsHistoryKey,onSelectColor:e.selectColor},null,8,["color","colors-default","colors-history-key","onSelectColor"]),ke(" custom options "),en(e.$slots,"default")],6)}Rs.render=p1;Rs.__file="src/color/ColorPicker.vue";Rs.install=e=>{e.component(Rs.name,Rs)};const g1={components:{ColorPicker:Rs},props:{color:{type:String,default:"#000000"},name:{type:String,default:"color"}},data(){return{showPicker:!1,suckerCanvas:null,suckerArea:[],isSucking:!1}},methods:{changeColor(e){this.$props.color=e.hex},triggerChange(){this.$emit("change",this.$props.color)},openSucker(e){},closePicker(){this.showPicker=!1},togglePicker(){this.showPicker=!this.showPicker}}};function v1(e,t,s,i,n,o){const r=De("ColorPicker",!0),l=ef("click-away");return _i((N(),V("div",null,[c("div",{class:"color-picker-badge",onClick:t[0]||(t[0]=(...a)=>o.togglePicker&&o.togglePicker(...a)),style:Lt({background:s.color})},null,4),n.showPicker?(N(),Be(r,{key:0,theme:"light",value:s.color,"sucker-hide":!1,"sucker-canvas":n.suckerCanvas,"sucker-area":n.suckerArea,onClick:o.triggerChange,onOpenSucker:o.openSucker,onChangeColor:o.changeColor,onClose:o.togglePicker},null,8,["value","sucker-canvas","sucker-area","onClick","onOpenSucker","onChangeColor","onClose"])):ke("",!0)])),[[l,o.closePicker]])}const b1=Ge(g1,[["render",v1]]);function Ri(e){return[null,void 0,!1].indexOf(e)!==-1}function y1(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function Ga(e){var t={exports:{}};return e(t,t.exports),t.exports}var xl=Ga(function(e,t){e.exports=function(){var s=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function i(v){return v.split("").reverse().join("")}function n(v,_){return v.substring(0,_.length)===_}function o(v,_){return v.slice(-1*_.length)===_}function r(v,_,E){if((v[_]||v[E])&&v[_]===v[E])throw new Error(_)}function l(v){return typeof v=="number"&&isFinite(v)}function a(v,_){return v=v.toString().split("e"),(+((v=(v=Math.round(+(v[0]+"e"+(v[1]?+v[1]+_:_)))).toString().split("e"))[0]+"e"+(v[1]?+v[1]-_:-_))).toFixed(_)}function d(v,_,E,P,Y,K,ie,le,He,xe,X,W){var he,de,z,pe=W,Ce="",oe="";return K&&(W=K(W)),!!l(W)&&(v!==!1&&parseFloat(W.toFixed(v))===0&&(W=0),W<0&&(he=!0,W=Math.abs(W)),v!==!1&&(W=a(W,v)),(W=W.toString()).indexOf(".")!==-1?(z=(de=W.split("."))[0],E&&(Ce=E+de[1])):z=W,_&&(z=i(z).match(/.{1,3}/g),z=i(z.join(i(_)))),he&&le&&(oe+=le),P&&(oe+=P),he&&He&&(oe+=He),oe+=z,oe+=Ce,Y&&(oe+=Y),xe&&(oe=xe(oe,pe)),oe)}function h(v,_,E,P,Y,K,ie,le,He,xe,X,W){var he,de="";return X&&(W=X(W)),!(!W||typeof W!="string")&&(le&&n(W,le)&&(W=W.replace(le,""),he=!0),P&&n(W,P)&&(W=W.replace(P,"")),He&&n(W,He)&&(W=W.replace(He,""),he=!0),Y&&o(W,Y)&&(W=W.slice(0,-1*Y.length)),_&&(W=W.split(_).join("")),E&&(W=W.replace(E,".")),he&&(de+="-"),(de=(de+=W).replace(/[^0-9\.\-.]/g,""))!==""&&(de=Number(de),ie&&(de=ie(de)),!!l(de)&&de))}function g(v){var _,E,P,Y={};for(v.suffix===void 0&&(v.suffix=v.postfix),_=0;_<s.length;_+=1)if((P=v[E=s[_]])===void 0)E!=="negative"||Y.negativeBefore?E==="mark"&&Y.thousand!=="."?Y[E]=".":Y[E]=!1:Y[E]="-";else if(E==="decimals"){if(!(P>=0&&P<8))throw new Error(E);Y[E]=P}else if(E==="encoder"||E==="decoder"||E==="edit"||E==="undo"){if(typeof P!="function")throw new Error(E);Y[E]=P}else{if(typeof P!="string")throw new Error(E);Y[E]=P}return r(Y,"mark","thousand"),r(Y,"prefix","negative"),r(Y,"prefix","negativeBefore"),Y}function b(v,_,E){var P,Y=[];for(P=0;P<s.length;P+=1)Y.push(v[s[P]]);return Y.push(E),_.apply("",Y)}function k(v){if(!(this instanceof k))return new k(v);typeof v=="object"&&(v=g(v),this.to=function(_){return b(v,d,_)},this.from=function(_){return b(v,h,_)})}return k}()}),w1=y1(Ga(function(e,t){(function(s){function i(f){return n(f)&&typeof f.from=="function"}function n(f){return typeof f=="object"&&typeof f.to=="function"}function o(f){f.parentElement.removeChild(f)}function r(f){return f!=null}function l(f){f.preventDefault()}function a(f){return f.filter(function(u){return!this[u]&&(this[u]=!0)},{})}function d(f,u){return Math.round(f/u)*u}function h(f,u){var O=f.getBoundingClientRect(),q=f.ownerDocument,R=q.documentElement,te=K(q);return/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(te.x=0),u?O.top+te.y-R.clientTop:O.left+te.x-R.clientLeft}function g(f){return typeof f=="number"&&!isNaN(f)&&isFinite(f)}function b(f,u,O){O>0&&(E(f,u),setTimeout(function(){P(f,u)},O))}function k(f){return Math.max(Math.min(f,100),0)}function v(f){return Array.isArray(f)?f:[f]}function _(f){var u=(f=String(f)).split(".");return u.length>1?u[1].length:0}function E(f,u){f.classList&&!/\s/.test(u)?f.classList.add(u):f.className+=" "+u}function P(f,u){f.classList&&!/\s/.test(u)?f.classList.remove(u):f.className=f.className.replace(new RegExp("(^|\\b)"+u.split(" ").join("|")+"(\\b|$)","gi")," ")}function Y(f,u){return f.classList?f.classList.contains(u):new RegExp("\\b"+u+"\\b").test(f.className)}function K(f){var u=window.pageXOffset!==void 0,O=(f.compatMode||"")==="CSS1Compat";return{x:u?window.pageXOffset:O?f.documentElement.scrollLeft:f.body.scrollLeft,y:u?window.pageYOffset:O?f.documentElement.scrollTop:f.body.scrollTop}}function ie(){return window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"}}function le(){var f=!1;try{var u=Object.defineProperty({},"passive",{get:function(){f=!0}});window.addEventListener("test",null,u)}catch{}return f}function He(){return window.CSS&&CSS.supports&&CSS.supports("touch-action","none")}function xe(f,u){return 100/(u-f)}function X(f,u,O){return 100*u/(f[O+1]-f[O])}function W(f,u){return X(f,f[0]<0?u+Math.abs(f[0]):u-f[0],0)}function he(f,u){return u*(f[1]-f[0])/100+f[0]}function de(f,u){for(var O=1;f>=u[O];)O+=1;return O}function z(f,u,O){if(O>=f.slice(-1)[0])return 100;var q=de(O,f),R=f[q-1],te=f[q],ae=u[q-1],_e=u[q];return ae+W([R,te],O)/xe(ae,_e)}function pe(f,u,O){if(O>=100)return f.slice(-1)[0];var q=de(O,u),R=f[q-1],te=f[q],ae=u[q-1];return he([R,te],(O-ae)*xe(ae,u[q]))}function Ce(f,u,O,q){if(q===100)return q;var R=de(q,f),te=f[R-1],ae=f[R];return O?q-te>(ae-te)/2?ae:te:u[R-1]?f[R-1]+d(q-f[R-1],u[R-1]):q}var oe,fe;s.PipsMode=void 0,(fe=s.PipsMode||(s.PipsMode={})).Range="range",fe.Steps="steps",fe.Positions="positions",fe.Count="count",fe.Values="values",s.PipsType=void 0,(oe=s.PipsType||(s.PipsType={}))[oe.None=-1]="None",oe[oe.NoValue=0]="NoValue",oe[oe.LargeValue=1]="LargeValue",oe[oe.SmallValue=2]="SmallValue";var Se=function(){function f(u,O,q){var R;this.xPct=[],this.xVal=[],this.xSteps=[],this.xNumSteps=[],this.xHighestCompleteStep=[],this.xSteps=[q||!1],this.xNumSteps=[!1],this.snap=O;var te=[];for(Object.keys(u).forEach(function(ae){te.push([v(u[ae]),ae])}),te.sort(function(ae,_e){return ae[0][0]-_e[0][0]}),R=0;R<te.length;R++)this.handleEntryPoint(te[R][1],te[R][0]);for(this.xNumSteps=this.xSteps.slice(0),R=0;R<this.xNumSteps.length;R++)this.handleStepPoint(R,this.xNumSteps[R])}return f.prototype.getDistance=function(u){for(var O=[],q=0;q<this.xNumSteps.length-1;q++)O[q]=X(this.xVal,u,q);return O},f.prototype.getAbsoluteDistance=function(u,O,q){var R,te=0;if(u<this.xPct[this.xPct.length-1])for(;u>this.xPct[te+1];)te++;else u===this.xPct[this.xPct.length-1]&&(te=this.xPct.length-2);q||u!==this.xPct[te+1]||te++,O===null&&(O=[]);var ae=1,_e=O[te],Re=0,It=0,tt=0,re=0;for(R=q?(u-this.xPct[te])/(this.xPct[te+1]-this.xPct[te]):(this.xPct[te+1]-u)/(this.xPct[te+1]-this.xPct[te]);_e>0;)Re=this.xPct[te+1+re]-this.xPct[te+re],O[te+re]*ae+100-100*R>100?(It=Re*R,ae=(_e-100*R)/O[te+re],R=1):(It=O[te+re]*Re/100*ae,ae=0),q?(tt-=It,this.xPct.length+re>=1&&re--):(tt+=It,this.xPct.length-re>=1&&re++),_e=O[te+re]*ae;return u+tt},f.prototype.toStepping=function(u){return u=z(this.xVal,this.xPct,u)},f.prototype.fromStepping=function(u){return pe(this.xVal,this.xPct,u)},f.prototype.getStep=function(u){return u=Ce(this.xPct,this.xSteps,this.snap,u)},f.prototype.getDefaultStep=function(u,O,q){var R=de(u,this.xPct);return(u===100||O&&u===this.xPct[R-1])&&(R=Math.max(R-1,1)),(this.xVal[R]-this.xVal[R-1])/q},f.prototype.getNearbySteps=function(u){var O=de(u,this.xPct);return{stepBefore:{startValue:this.xVal[O-2],step:this.xNumSteps[O-2],highestStep:this.xHighestCompleteStep[O-2]},thisStep:{startValue:this.xVal[O-1],step:this.xNumSteps[O-1],highestStep:this.xHighestCompleteStep[O-1]},stepAfter:{startValue:this.xVal[O],step:this.xNumSteps[O],highestStep:this.xHighestCompleteStep[O]}}},f.prototype.countStepDecimals=function(){var u=this.xNumSteps.map(_);return Math.max.apply(null,u)},f.prototype.hasNoSize=function(){return this.xVal[0]===this.xVal[this.xVal.length-1]},f.prototype.convert=function(u){return this.getStep(this.toStepping(u))},f.prototype.handleEntryPoint=function(u,O){var q;if(!g(q=u==="min"?0:u==="max"?100:parseFloat(u))||!g(O[0]))throw new Error("noUiSlider: 'range' value isn't numeric.");this.xPct.push(q),this.xVal.push(O[0]);var R=Number(O[1]);q?this.xSteps.push(!isNaN(R)&&R):isNaN(R)||(this.xSteps[0]=R),this.xHighestCompleteStep.push(0)},f.prototype.handleStepPoint=function(u,O){if(O)if(this.xVal[u]!==this.xVal[u+1]){this.xSteps[u]=X([this.xVal[u],this.xVal[u+1]],O,0)/xe(this.xPct[u],this.xPct[u+1]);var q=(this.xVal[u+1]-this.xVal[u])/this.xNumSteps[u],R=Math.ceil(Number(q.toFixed(3))-1),te=this.xVal[u]+this.xNumSteps[u]*R;this.xHighestCompleteStep[u]=te}else this.xSteps[u]=this.xHighestCompleteStep[u]=this.xVal[u]},f}(),ve={to:function(f){return f===void 0?"":f.toFixed(2)},from:Number},$e={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},Oe={tooltips:".__tooltips",aria:".__aria"};function Ue(f,u){if(!g(u))throw new Error("noUiSlider: 'step' is not numeric.");f.singleStep=u}function je(f,u){if(!g(u))throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");f.keyboardPageMultiplier=u}function Tt(f,u){if(!g(u))throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");f.keyboardMultiplier=u}function Dt(f,u){if(!g(u))throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");f.keyboardDefaultStep=u}function Qe(f,u){if(typeof u!="object"||Array.isArray(u))throw new Error("noUiSlider: 'range' is not an object.");if(u.min===void 0||u.max===void 0)throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");f.spectrum=new Se(u,f.snap||!1,f.singleStep)}function Z(f,u){if(u=v(u),!Array.isArray(u)||!u.length)throw new Error("noUiSlider: 'start' option is incorrect.");f.handles=u.length,f.start=u}function Te(f,u){if(typeof u!="boolean")throw new Error("noUiSlider: 'snap' option must be a boolean.");f.snap=u}function qs(f,u){if(typeof u!="boolean")throw new Error("noUiSlider: 'animate' option must be a boolean.");f.animate=u}function Zt(f,u){if(typeof u!="number")throw new Error("noUiSlider: 'animationDuration' option must be a number.");f.animationDuration=u}function Ks(f,u){var O,q=[!1];if(u==="lower"?u=[!0,!1]:u==="upper"&&(u=[!1,!0]),u===!0||u===!1){for(O=1;O<f.handles;O++)q.push(u);q.push(!1)}else{if(!Array.isArray(u)||!u.length||u.length!==f.handles+1)throw new Error("noUiSlider: 'connect' option doesn't match handle count.");q=u}f.connect=q}function Ys(f,u){switch(u){case"horizontal":f.ort=0;break;case"vertical":f.ort=1;break;default:throw new Error("noUiSlider: 'orientation' option is invalid.")}}function p(f,u){if(!g(u))throw new Error("noUiSlider: 'margin' option must be numeric.");u!==0&&(f.margin=f.spectrum.getDistance(u))}function y(f,u){if(!g(u))throw new Error("noUiSlider: 'limit' option must be numeric.");if(f.limit=f.spectrum.getDistance(u),!f.limit||f.handles<2)throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.")}function C(f,u){var O;if(!g(u)&&!Array.isArray(u))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(u)&&u.length!==2&&!g(u[0])&&!g(u[1]))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(u!==0){for(Array.isArray(u)||(u=[u,u]),f.padding=[f.spectrum.getDistance(u[0]),f.spectrum.getDistance(u[1])],O=0;O<f.spectrum.xNumSteps.length-1;O++)if(f.padding[0][O]<0||f.padding[1][O]<0)throw new Error("noUiSlider: 'padding' option must be a positive number(s).");var q=u[0]+u[1],R=f.spectrum.xVal[0];if(q/(f.spectrum.xVal[f.spectrum.xVal.length-1]-R)>1)throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.")}}function A(f,u){switch(u){case"ltr":f.dir=0;break;case"rtl":f.dir=1;break;default:throw new Error("noUiSlider: 'direction' option was not recognized.")}}function L(f,u){if(typeof u!="string")throw new Error("noUiSlider: 'behaviour' must be a string containing options.");var O=u.indexOf("tap")>=0,q=u.indexOf("drag")>=0,R=u.indexOf("fixed")>=0,te=u.indexOf("snap")>=0,ae=u.indexOf("hover")>=0,_e=u.indexOf("unconstrained")>=0,Re=u.indexOf("drag-all")>=0,It=u.indexOf("smooth-steps")>=0;if(R){if(f.handles!==2)throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");p(f,f.start[1]-f.start[0])}if(_e&&(f.margin||f.limit))throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");f.events={tap:O||te,drag:q,dragAll:Re,smoothSteps:It,fixed:R,snap:te,hover:ae,unconstrained:_e}}function $(f,u){if(u!==!1)if(u===!0||n(u)){f.tooltips=[];for(var O=0;O<f.handles;O++)f.tooltips.push(u)}else{if((u=v(u)).length!==f.handles)throw new Error("noUiSlider: must pass a formatter for all handles.");u.forEach(function(q){if(typeof q!="boolean"&&!n(q))throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.")}),f.tooltips=u}}function I(f,u){if(u.length!==f.handles)throw new Error("noUiSlider: must pass a attributes for all handles.");f.handleAttributes=u}function H(f,u){if(!n(u))throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");f.ariaFormat=u}function F(f,u){if(!i(u))throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");f.format=u}function M(f,u){if(typeof u!="boolean")throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");f.keyboardSupport=u}function Q(f,u){f.documentElement=u}function J(f,u){if(typeof u!="string"&&u!==!1)throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");f.cssPrefix=u}function ee(f,u){if(typeof u!="object")throw new Error("noUiSlider: 'cssClasses' must be an object.");typeof f.cssPrefix=="string"?(f.cssClasses={},Object.keys(u).forEach(function(O){f.cssClasses[O]=f.cssPrefix+u[O]})):f.cssClasses=u}function ne(f){var u={margin:null,limit:null,padding:null,animate:!0,animationDuration:300,ariaFormat:ve,format:ve},O={step:{r:!1,t:Ue},keyboardPageMultiplier:{r:!1,t:je},keyboardMultiplier:{r:!1,t:Tt},keyboardDefaultStep:{r:!1,t:Dt},start:{r:!0,t:Z},connect:{r:!0,t:Ks},direction:{r:!0,t:A},snap:{r:!1,t:Te},animate:{r:!1,t:qs},animationDuration:{r:!1,t:Zt},range:{r:!0,t:Qe},orientation:{r:!1,t:Ys},margin:{r:!1,t:p},limit:{r:!1,t:y},padding:{r:!1,t:C},behaviour:{r:!0,t:L},ariaFormat:{r:!1,t:H},format:{r:!1,t:F},tooltips:{r:!1,t:$},keyboardSupport:{r:!0,t:M},documentElement:{r:!1,t:Q},cssPrefix:{r:!0,t:J},cssClasses:{r:!0,t:ee},handleAttributes:{r:!1,t:I}},q={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:$e,keyboardPageMultiplier:5,keyboardMultiplier:1,keyboardDefaultStep:10};f.format&&!f.ariaFormat&&(f.ariaFormat=f.format),Object.keys(O).forEach(function(Re){if(r(f[Re])||q[Re]!==void 0)O[Re].t(u,r(f[Re])?f[Re]:q[Re]);else if(O[Re].r)throw new Error("noUiSlider: '"+Re+"' is required.")}),u.pips=f.pips;var R=document.createElement("div"),te=R.style.msTransform!==void 0,ae=R.style.transform!==void 0;u.transformRule=ae?"transform":te?"msTransform":"webkitTransform";var _e=[["left","top"],["right","bottom"]];return u.style=_e[u.dir][u.ort],u}function me(f,u,O){var q,R,te,ae,_e,Re=ie(),It=He()&&le(),tt=f,re=u.spectrum,Bt=[],ze=[],dt=[],Mn=0,zt={},Ms=f.ownerDocument,ki=u.documentElement||Ms.documentElement,xi=Ms.body,sc=Ms.dir==="rtl"||u.ort===1?0:100;function Vt(m,w){var x=Ms.createElement("div");return w&&E(x,w),m.appendChild(x),x}function ic(m,w){var x=Vt(m,u.cssClasses.origin),T=Vt(x,u.cssClasses.handle);if(Vt(T,u.cssClasses.touchArea),T.setAttribute("data-handle",String(w)),u.keyboardSupport&&(T.setAttribute("tabindex","0"),T.addEventListener("keydown",function(D){return vc(D,w)})),u.handleAttributes!==void 0){var B=u.handleAttributes[w];Object.keys(B).forEach(function(D){T.setAttribute(D,B[D])})}return T.setAttribute("role","slider"),T.setAttribute("aria-orientation",u.ort?"vertical":"horizontal"),w===0?E(T,u.cssClasses.handleLower):w===u.handles-1&&E(T,u.cssClasses.handleUpper),x}function ar(m,w){return!!w&&Vt(m,u.cssClasses.connect)}function nc(m,w){var x=Vt(w,u.cssClasses.connects);R=[],(te=[]).push(ar(x,m[0]));for(var T=0;T<u.handles;T++)R.push(ic(w,T)),dt[T]=T,te.push(ar(x,m[T+1]))}function oc(m){return E(m,u.cssClasses.target),u.dir===0?E(m,u.cssClasses.ltr):E(m,u.cssClasses.rtl),u.ort===0?E(m,u.cssClasses.horizontal):E(m,u.cssClasses.vertical),E(m,getComputedStyle(m).direction==="rtl"?u.cssClasses.textDirectionRtl:u.cssClasses.textDirectionLtr),Vt(m,u.cssClasses.base)}function rc(m,w){return!(!u.tooltips||!u.tooltips[w])&&Vt(m.firstChild,u.cssClasses.tooltip)}function cr(){return tt.hasAttribute("disabled")}function On(m){return R[m].hasAttribute("disabled")}function Nn(){_e&&(Js("update"+Oe.tooltips),_e.forEach(function(m){m&&o(m)}),_e=null)}function ur(){Nn(),_e=R.map(rc),Fn("update"+Oe.tooltips,function(m,w,x){if(_e&&u.tooltips&&_e[w]!==!1){var T=m[w];u.tooltips[w]!==!0&&(T=u.tooltips[w].to(x[w])),_e[w].innerHTML=T}})}function lc(){Js("update"+Oe.aria),Fn("update"+Oe.aria,function(m,w,x,T,B){dt.forEach(function(D){var ce=R[D],j=Ci(ze,D,0,!0,!0,!0),qe=Ci(ze,D,100,!0,!0,!0),Ve=B[D],Ne=String(u.ariaFormat.to(x[D]));j=re.fromStepping(j).toFixed(1),qe=re.fromStepping(qe).toFixed(1),Ve=re.fromStepping(Ve).toFixed(1),ce.children[0].setAttribute("aria-valuemin",j),ce.children[0].setAttribute("aria-valuemax",qe),ce.children[0].setAttribute("aria-valuenow",Ve),ce.children[0].setAttribute("aria-valuetext",Ne)})})}function ac(m){if(m.mode===s.PipsMode.Range||m.mode===s.PipsMode.Steps)return re.xVal;if(m.mode===s.PipsMode.Count){if(m.values<2)throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");for(var w=m.values-1,x=100/w,T=[];w--;)T[w]=w*x;return T.push(100),dr(T,m.stepped)}return m.mode===s.PipsMode.Positions?dr(m.values,m.stepped):m.mode===s.PipsMode.Values?m.stepped?m.values.map(function(B){return re.fromStepping(re.getStep(re.toStepping(B)))}):m.values:[]}function dr(m,w){return m.map(function(x){return re.fromStepping(w?re.getStep(x):x)})}function cc(m){function w(Ve,Ne){return Number((Ve+Ne).toFixed(7))}var x=ac(m),T={},B=re.xVal[0],D=re.xVal[re.xVal.length-1],ce=!1,j=!1,qe=0;return(x=a(x.slice().sort(function(Ve,Ne){return Ve-Ne})))[0]!==B&&(x.unshift(B),ce=!0),x[x.length-1]!==D&&(x.push(D),j=!0),x.forEach(function(Ve,Ne){var Ie,Ae,st,at,Xe,wr,Bn,_r,kr,xr,zn=Ve,Os=x[Ne+1],Cr=m.mode===s.PipsMode.Steps;for(Cr&&(Ie=re.xNumSteps[Ne]),Ie||(Ie=Os-zn),Os===void 0&&(Os=zn),Ie=Math.max(Ie,1e-7),Ae=zn;Ae<=Os;Ae=w(Ae,Ie)){for(_r=(Xe=(at=re.toStepping(Ae))-qe)/(m.density||1),xr=Xe/(kr=Math.round(_r)),st=1;st<=kr;st+=1)T[(wr=qe+st*xr).toFixed(5)]=[re.fromStepping(wr),0];Bn=x.indexOf(Ae)>-1?s.PipsType.LargeValue:Cr?s.PipsType.SmallValue:s.PipsType.NoValue,!Ne&&ce&&Ae!==Os&&(Bn=0),Ae===Os&&j||(T[at.toFixed(5)]=[Ae,Bn]),qe=at}}),T}function uc(m,w,x){var T,B,D=Ms.createElement("div"),ce=((T={})[s.PipsType.None]="",T[s.PipsType.NoValue]=u.cssClasses.valueNormal,T[s.PipsType.LargeValue]=u.cssClasses.valueLarge,T[s.PipsType.SmallValue]=u.cssClasses.valueSub,T),j=((B={})[s.PipsType.None]="",B[s.PipsType.NoValue]=u.cssClasses.markerNormal,B[s.PipsType.LargeValue]=u.cssClasses.markerLarge,B[s.PipsType.SmallValue]=u.cssClasses.markerSub,B),qe=[u.cssClasses.valueHorizontal,u.cssClasses.valueVertical],Ve=[u.cssClasses.markerHorizontal,u.cssClasses.markerVertical];function Ne(Ae,st){var at=st===u.cssClasses.value,Xe=at?ce:j;return st+" "+(at?qe:Ve)[u.ort]+" "+Xe[Ae]}function Ie(Ae,st,at){if((at=w?w(st,at):at)!==s.PipsType.None){var Xe=Vt(D,!1);Xe.className=Ne(at,u.cssClasses.marker),Xe.style[u.style]=Ae+"%",at>s.PipsType.NoValue&&((Xe=Vt(D,!1)).className=Ne(at,u.cssClasses.value),Xe.setAttribute("data-value",String(st)),Xe.style[u.style]=Ae+"%",Xe.innerHTML=String(x.to(st)))}}return E(D,u.cssClasses.pips),E(D,u.ort===0?u.cssClasses.pipsHorizontal:u.cssClasses.pipsVertical),Object.keys(m).forEach(function(Ae){Ie(Ae,m[Ae][0],m[Ae][1])}),D}function Pn(){ae&&(o(ae),ae=null)}function Hn(m){Pn();var w=cc(m),x=m.filter,T=m.format||{to:function(B){return String(Math.round(B))}};return ae=tt.appendChild(uc(w,x,T))}function hr(){var m=q.getBoundingClientRect(),w="offset"+["Width","Height"][u.ort];return u.ort===0?m.width||q[w]:m.height||q[w]}function hs(m,w,x,T){var B=function(ce){var j=dc(ce,T.pageOffset,T.target||w);return!!j&&!(cr()&&!T.doNotReject)&&!(Y(tt,u.cssClasses.tap)&&!T.doNotReject)&&!(m===Re.start&&j.buttons!==void 0&&j.buttons>1)&&(!T.hover||!j.buttons)&&(It||j.preventDefault(),j.calcPoint=j.points[u.ort],void x(j,T))},D=[];return m.split(" ").forEach(function(ce){w.addEventListener(ce,B,!!It&&{passive:!0}),D.push([ce,B])}),D}function dc(m,w,x){var T=m.type.indexOf("touch")===0,B=m.type.indexOf("mouse")===0,D=m.type.indexOf("pointer")===0,ce=0,j=0;if(m.type.indexOf("MSPointer")===0&&(D=!0),m.type==="mousedown"&&!m.buttons&&!m.touches)return!1;if(T){var qe=function(Ie){var Ae=Ie.target;return Ae===x||x.contains(Ae)||m.composed&&m.composedPath().shift()===x};if(m.type==="touchstart"){var Ve=Array.prototype.filter.call(m.touches,qe);if(Ve.length>1)return!1;ce=Ve[0].pageX,j=Ve[0].pageY}else{var Ne=Array.prototype.find.call(m.changedTouches,qe);if(!Ne)return!1;ce=Ne.pageX,j=Ne.pageY}}return w=w||K(Ms),(B||D)&&(ce=m.clientX+w.x,j=m.clientY+w.y),m.pageOffset=w,m.points=[ce,j],m.cursor=B||D,m}function fr(m){var w=100*(m-h(q,u.ort))/hr();return w=k(w),u.dir?100-w:w}function hc(m){var w=100,x=!1;return R.forEach(function(T,B){if(!On(B)){var D=ze[B],ce=Math.abs(D-m);(ce<w||ce<=w&&m>D||ce===100&&w===100)&&(x=B,w=ce)}}),x}function fc(m,w){m.type==="mouseout"&&m.target.nodeName==="HTML"&&m.relatedTarget===null&&$n(m,w)}function mc(m,w){if(navigator.appVersion.indexOf("MSIE 9")===-1&&m.buttons===0&&w.buttonsProperty!==0)return $n(m,w);var x=(u.dir?-1:1)*(m.calcPoint-w.startCalcPoint);mr(x>0,100*x/w.baseSize,w.locations,w.handleNumbers,w.connect)}function $n(m,w){w.handle&&(P(w.handle,u.cssClasses.active),Mn-=1),w.listeners.forEach(function(x){ki.removeEventListener(x[0],x[1])}),Mn===0&&(P(tt,u.cssClasses.drag),In(),m.cursor&&(xi.style.cursor="",xi.removeEventListener("selectstart",l))),u.events.smoothSteps&&(w.handleNumbers.forEach(function(x){fs(x,ze[x],!0,!0,!1,!1)}),w.handleNumbers.forEach(function(x){We("update",x)})),w.handleNumbers.forEach(function(x){We("change",x),We("set",x),We("end",x)})}function Rn(m,w){if(!w.handleNumbers.some(On)){var x;w.handleNumbers.length===1&&(x=R[w.handleNumbers[0]].children[0],Mn+=1,E(x,u.cssClasses.active)),m.stopPropagation();var T=[],B=hs(Re.move,ki,mc,{target:m.target,handle:x,connect:w.connect,listeners:T,startCalcPoint:m.calcPoint,baseSize:hr(),pageOffset:m.pageOffset,handleNumbers:w.handleNumbers,buttonsProperty:m.buttons,locations:ze.slice()}),D=hs(Re.end,ki,$n,{target:m.target,handle:x,listeners:T,doNotReject:!0,handleNumbers:w.handleNumbers}),ce=hs("mouseout",ki,fc,{target:m.target,handle:x,listeners:T,doNotReject:!0,handleNumbers:w.handleNumbers});T.push.apply(T,B.concat(D,ce)),m.cursor&&(xi.style.cursor=getComputedStyle(m.target).cursor,R.length>1&&E(tt,u.cssClasses.drag),xi.addEventListener("selectstart",l,!1)),w.handleNumbers.forEach(function(j){We("start",j)})}}function pc(m){m.stopPropagation();var w=fr(m.calcPoint),x=hc(w);x!==!1&&(u.events.snap||b(tt,u.cssClasses.tap,u.animationDuration),fs(x,w,!0,!0),In(),We("slide",x,!0),We("update",x,!0),u.events.snap?Rn(m,{handleNumbers:[x]}):(We("change",x,!0),We("set",x,!0)))}function gc(m){var w=fr(m.calcPoint),x=re.getStep(w),T=re.fromStepping(x);Object.keys(zt).forEach(function(B){B.split(".")[0]==="hover"&&zt[B].forEach(function(D){D.call(Ei,T)})})}function vc(m,w){if(cr()||On(w))return!1;var x=["Left","Right"],T=["Down","Up"],B=["PageDown","PageUp"],D=["Home","End"];u.dir&&!u.ort?x.reverse():u.ort&&!u.dir&&(T.reverse(),B.reverse());var ce,j=m.key.replace("Arrow",""),qe=j===B[0],Ve=j===B[1],Ne=j===T[0]||j===x[0]||qe,Ie=j===T[1]||j===x[1]||Ve,Ae=j===D[0],st=j===D[1];if(!(Ne||Ie||Ae||st))return!0;if(m.preventDefault(),Ie||Ne){var at=Ne?0:1,Xe=yr(w)[at];if(Xe===null)return!1;Xe===!1&&(Xe=re.getDefaultStep(ze[w],Ne,u.keyboardDefaultStep)),Xe*=Ve||qe?u.keyboardPageMultiplier:u.keyboardMultiplier,Xe=Math.max(Xe,1e-7),Xe*=Ne?-1:1,ce=Bt[w]+Xe}else ce=st?u.spectrum.xVal[u.spectrum.xVal.length-1]:u.spectrum.xVal[0];return fs(w,re.toStepping(ce),!0,!0),We("slide",w),We("update",w),We("change",w),We("set",w),!1}function bc(m){m.fixed||R.forEach(function(w,x){hs(Re.start,w.children[0],Rn,{handleNumbers:[x]})}),m.tap&&hs(Re.start,q,pc,{}),m.hover&&hs(Re.move,q,gc,{hover:!0}),m.drag&&te.forEach(function(w,x){if(w!==!1&&x!==0&&x!==te.length-1){var T=R[x-1],B=R[x],D=[w],ce=[T,B],j=[x-1,x];E(w,u.cssClasses.draggable),m.fixed&&(D.push(T.children[0]),D.push(B.children[0])),m.dragAll&&(ce=R,j=dt),D.forEach(function(qe){hs(Re.start,qe,Rn,{handles:ce,handleNumbers:j,connect:w})})}})}function Fn(m,w){zt[m]=zt[m]||[],zt[m].push(w),m.split(".")[0]==="update"&&R.forEach(function(x,T){We("update",T)})}function yc(m){return m===Oe.aria||m===Oe.tooltips}function Js(m){var w=m&&m.split(".")[0],x=w?m.substring(w.length):m;Object.keys(zt).forEach(function(T){var B=T.split(".")[0],D=T.substring(B.length);w&&w!==B||x&&x!==D||yc(D)&&x!==D||delete zt[T]})}function We(m,w,x){Object.keys(zt).forEach(function(T){var B=T.split(".")[0];m===B&&zt[T].forEach(function(D){D.call(Ei,Bt.map(u.format.to),w,Bt.slice(),x||!1,ze.slice(),Ei)})})}function Ci(m,w,x,T,B,D,ce){var j;return R.length>1&&!u.events.unconstrained&&(T&&w>0&&(j=re.getAbsoluteDistance(m[w-1],u.margin,!1),x=Math.max(x,j)),B&&w<R.length-1&&(j=re.getAbsoluteDistance(m[w+1],u.margin,!0),x=Math.min(x,j))),R.length>1&&u.limit&&(T&&w>0&&(j=re.getAbsoluteDistance(m[w-1],u.limit,!1),x=Math.min(x,j)),B&&w<R.length-1&&(j=re.getAbsoluteDistance(m[w+1],u.limit,!0),x=Math.max(x,j))),u.padding&&(w===0&&(j=re.getAbsoluteDistance(0,u.padding[0],!1),x=Math.max(x,j)),w===R.length-1&&(j=re.getAbsoluteDistance(100,u.padding[1],!0),x=Math.min(x,j))),ce||(x=re.getStep(x)),!((x=k(x))===m[w]&&!D)&&x}function Dn(m,w){var x=u.ort;return(x?w:m)+", "+(x?m:w)}function mr(m,w,x,T,B){var D=x.slice(),ce=T[0],j=u.events.smoothSteps,qe=[!m,m],Ve=[m,!m];T=T.slice(),m&&T.reverse(),T.length>1?T.forEach(function(Ie,Ae){var st=Ci(D,Ie,D[Ie]+w,qe[Ae],Ve[Ae],!1,j);st===!1?w=0:(w=st-D[Ie],D[Ie]=st)}):qe=Ve=[!0];var Ne=!1;T.forEach(function(Ie,Ae){Ne=fs(Ie,x[Ie]+w,qe[Ae],Ve[Ae],!1,j)||Ne}),Ne&&(T.forEach(function(Ie){We("update",Ie),We("slide",Ie)}),B!=null&&We("drag",ce))}function pr(m,w){return u.dir?100-m-w:m}function wc(m,w){ze[m]=w,Bt[m]=re.fromStepping(w);var x="translate("+Dn(pr(w,0)-sc+"%","0")+")";R[m].style[u.transformRule]=x,gr(m),gr(m+1)}function In(){dt.forEach(function(m){var w=ze[m]>50?-1:1,x=3+(R.length+w*m);R[m].style.zIndex=String(x)})}function fs(m,w,x,T,B,D){return B||(w=Ci(ze,m,w,x,T,!1,D)),w!==!1&&(wc(m,w),!0)}function gr(m){if(te[m]){var w=0,x=100;m!==0&&(w=ze[m-1]),m!==te.length-1&&(x=ze[m]);var T=x-w,B="translate("+Dn(pr(w,T)+"%","0")+")",D="scale("+Dn(T/100,"1")+")";te[m].style[u.transformRule]=B+" "+D}}function vr(m,w){return m===null||m===!1||m===void 0?ze[w]:(typeof m=="number"&&(m=String(m)),(m=u.format.from(m))!==!1&&(m=re.toStepping(m)),m===!1||isNaN(m)?ze[w]:m)}function Si(m,w,x){var T=v(m),B=ze[0]===void 0;w=w===void 0||w,u.animate&&!B&&b(tt,u.cssClasses.tap,u.animationDuration),dt.forEach(function(j){fs(j,vr(T[j],j),!0,!1,x)});var D=dt.length===1?0:1;if(B&&re.hasNoSize()&&(x=!0,ze[0]=0,dt.length>1)){var ce=100/(dt.length-1);dt.forEach(function(j){ze[j]=j*ce})}for(;D<dt.length;++D)dt.forEach(function(j){fs(j,ze[j],!0,!0,x)});In(),dt.forEach(function(j){We("update",j),T[j]!==null&&w&&We("set",j)})}function _c(m){Si(u.start,m)}function kc(m,w,x,T){if(!((m=Number(m))>=0&&m<dt.length))throw new Error("noUiSlider: invalid handle number, got: "+m);fs(m,vr(w,m),!0,!0,T),We("update",m),x&&We("set",m)}function br(m){if(m===void 0&&(m=!1),m)return Bt.length===1?Bt[0]:Bt.slice(0);var w=Bt.map(u.format.to);return w.length===1?w[0]:w}function xc(){for(Js(Oe.aria),Js(Oe.tooltips),Object.keys(u.cssClasses).forEach(function(m){P(tt,u.cssClasses[m])});tt.firstChild;)tt.removeChild(tt.firstChild);delete tt.noUiSlider}function yr(m){var w=ze[m],x=re.getNearbySteps(w),T=Bt[m],B=x.thisStep.step,D=null;if(u.snap)return[T-x.stepBefore.startValue||null,x.stepAfter.startValue-T||null];B!==!1&&T+B>x.stepAfter.startValue&&(B=x.stepAfter.startValue-T),D=T>x.thisStep.startValue?x.thisStep.step:x.stepBefore.step!==!1&&T-x.stepBefore.highestStep,w===100?B=null:w===0&&(D=null);var ce=re.countStepDecimals();return B!==null&&B!==!1&&(B=Number(B.toFixed(ce))),D!==null&&D!==!1&&(D=Number(D.toFixed(ce))),[D,B]}function Cc(){return dt.map(yr)}function Sc(m,w){var x=br(),T=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];T.forEach(function(D){m[D]!==void 0&&(O[D]=m[D])});var B=ne(O);T.forEach(function(D){m[D]!==void 0&&(u[D]=B[D])}),re=B.spectrum,u.margin=B.margin,u.limit=B.limit,u.padding=B.padding,u.pips?Hn(u.pips):Pn(),u.tooltips?ur():Nn(),ze=[],Si(r(m.start)?m.start:x,w)}function Ec(){q=oc(tt),nc(u.connect,q),bc(u.events),Si(u.start),u.pips&&Hn(u.pips),u.tooltips&&ur(),lc()}Ec();var Ei={destroy:xc,steps:Cc,on:Fn,off:Js,get:br,set:Si,setHandle:kc,reset:_c,__moveHandles:function(m,w,x){mr(m,w,ze,x)},options:O,updateOptions:Sc,target:tt,removePips:Pn,removeTooltips:Nn,getPositions:function(){return ze.slice()},getTooltips:function(){return _e},getOrigins:function(){return R},pips:Hn};return Ei}function Le(f,u){if(!f||!f.nodeName)throw new Error("noUiSlider: create requires a single element, got: "+f);if(f.noUiSlider)throw new Error("noUiSlider: Slider was already initialized.");var O=me(f,ne(u),u);return f.noUiSlider=O,O}var Ee={__spectrum:Se,cssClasses:$e,create:Le};s.create=Le,s.cssClasses=$e,s.default=Ee,Object.defineProperty(s,"__esModule",{value:!0})})(t)}));function Cl(e,t){if(!Array.isArray(e)||!Array.isArray(t))return!1;const s=t.slice().sort();return e.length===t.length&&e.slice().sort().every(function(i,n){return i===s[n]})}var So={name:"Slider",emits:["input","update:modelValue","start","slide","drag","update","change","set","end"],props:{value:{validator:function(e){return t=>typeof t=="number"||t instanceof Array||t==null||t===!1},required:!1},modelValue:{validator:function(e){return t=>typeof t=="number"||t instanceof Array||t==null||t===!1},required:!1},id:{type:[String,Number],required:!1},disabled:{type:Boolean,required:!1,default:!1},min:{type:Number,required:!1,default:0},max:{type:Number,required:!1,default:100},step:{type:Number,required:!1,default:1},orientation:{type:String,required:!1,default:"horizontal"},direction:{type:String,required:!1,default:"ltr"},tooltips:{type:Boolean,required:!1,default:!0},options:{type:Object,required:!1,default:()=>({})},merge:{type:Number,required:!1,default:-1},format:{type:[Object,Function,Boolean],required:!1,default:null},classes:{type:Object,required:!1,default:()=>({})},showTooltip:{type:String,required:!1,default:"always"},tooltipPosition:{type:String,required:!1,default:null},lazy:{type:Boolean,required:!1,default:!0},ariaLabelledby:{type:String,required:!1,default:void 0},aria:{required:!1,type:Object,default:()=>({})}},setup(e,t){const s=function(r,l,a){const{value:d,modelValue:h,min:g}=si(r);let b=h&&h.value!==void 0?h:d;const k=Pt(b.value);if(Ri(b.value)&&(b=Pt(g.value)),Array.isArray(b.value)&&b.value.length==0)throw new Error("Slider v-model must not be an empty array");return{value:b,initialValue:k}}(e),i=function(r,l,a){const{classes:d,showTooltip:h,tooltipPosition:g,orientation:b}=si(r),k=jt(()=>({target:"slider-target",focused:"slider-focused",tooltipFocus:"slider-tooltip-focus",tooltipDrag:"slider-tooltip-drag",ltr:"slider-ltr",rtl:"slider-rtl",horizontal:"slider-horizontal",vertical:"slider-vertical",textDirectionRtl:"slider-txt-dir-rtl",textDirectionLtr:"slider-txt-dir-ltr",base:"slider-base",connects:"slider-connects",connect:"slider-connect",origin:"slider-origin",handle:"slider-handle",handleLower:"slider-handle-lower",handleUpper:"slider-handle-upper",touchArea:"slider-touch-area",tooltip:"slider-tooltip",tooltipTop:"slider-tooltip-top",tooltipBottom:"slider-tooltip-bottom",tooltipLeft:"slider-tooltip-left",tooltipRight:"slider-tooltip-right",tooltipHidden:"slider-tooltip-hidden",active:"slider-active",draggable:"slider-draggable",tap:"slider-state-tap",drag:"slider-state-drag",pips:"slider-pips",pipsHorizontal:"slider-pips-horizontal",pipsVertical:"slider-pips-vertical",marker:"slider-marker",markerHorizontal:"slider-marker-horizontal",markerVertical:"slider-marker-vertical",markerNormal:"slider-marker-normal",markerLarge:"slider-marker-large",markerSub:"slider-marker-sub",value:"slider-value",valueHorizontal:"slider-value-horizontal",valueVertical:"slider-value-vertical",valueNormal:"slider-value-normal",valueLarge:"slider-value-large",valueSub:"slider-value-sub",...d.value}));return{classList:jt(()=>{const v={...k.value};return Object.keys(v).forEach(_=>{v[_]=Array.isArray(v[_])?v[_].filter(E=>E!==null).join(" "):v[_]}),h.value!=="always"&&(v.target+=` ${h.value==="drag"?v.tooltipDrag:v.tooltipFocus}`),b.value==="horizontal"&&(v.tooltip+=g.value==="bottom"?` ${v.tooltipBottom}`:` ${v.tooltipTop}`),b.value==="vertical"&&(v.tooltip+=g.value==="right"?` ${v.tooltipRight}`:` ${v.tooltipLeft}`),v})}}(e),n=function(r,l,a){const{format:d,step:h}=si(r),g=a.value,b=a.classList,k=jt(()=>d&&d.value?typeof d.value=="function"?{to:d.value}:xl({...d.value}):xl({decimals:h.value>=0?0:2})),v=jt(()=>Array.isArray(g.value)?g.value.map(_=>k.value):k.value);return{tooltipFormat:k,tooltipsFormat:v,tooltipsMerge:(_,E,P)=>{var Y=getComputedStyle(_).direction==="rtl",K=_.noUiSlider.options.direction==="rtl",ie=_.noUiSlider.options.orientation==="vertical",le=_.noUiSlider.getTooltips(),He=_.noUiSlider.getOrigins();le.forEach(function(xe,X){xe&&He[X].appendChild(xe)}),_.noUiSlider.on("update",function(xe,X,W,he,de){var z=[[]],pe=[[]],Ce=[[]],oe=0;le[0]&&(z[0][0]=0,pe[0][0]=de[0],Ce[0][0]=k.value.to(parseFloat(xe[0])));for(var fe=1;fe<xe.length;fe++)(!le[fe]||xe[fe]-xe[fe-1]>E)&&(z[++oe]=[],Ce[oe]=[],pe[oe]=[]),le[fe]&&(z[oe].push(fe),Ce[oe].push(k.value.to(parseFloat(xe[fe]))),pe[oe].push(de[fe]));z.forEach(function(Se,ve){for(var $e=Se.length,Oe=0;Oe<$e;Oe++){var Ue=Se[Oe];if(Oe===$e-1){var je=0;pe[ve].forEach(function(Z){je+=1e3-Z});var Tt=ie?"bottom":"right",Dt=K?0:$e-1,Qe=1e3-pe[ve][Dt];je=(Y&&!ie?100:0)+je/$e-Qe,le[Ue].innerHTML=Ce[ve].join(P),le[Ue].style.display="block",le[Ue].style[Tt]=je+"%",b.value.tooltipHidden.split(" ").forEach(Z=>{le[Ue].classList.contains(Z)&&le[Ue].classList.remove(Z)})}else le[Ue].style.display="none",b.value.tooltipHidden.split(" ").forEach(Z=>{le[Ue].classList.add(Z)})}})})}}}(e,0,{value:s.value,classList:i.classList}),o=function(r,l,a){const{orientation:d,direction:h,tooltips:g,step:b,min:k,max:v,merge:_,id:E,disabled:P,options:Y,classes:K,format:ie,lazy:le,ariaLabelledby:He,aria:xe}=si(r),X=a.value,W=a.initialValue,he=a.tooltipsFormat,de=a.tooltipsMerge,z=a.tooltipFormat,pe=a.classList,Ce=Pt(null),oe=Pt(null),fe=Pt(!1),Se=jt(()=>{let Z={cssPrefix:"",cssClasses:pe.value,orientation:d.value,direction:h.value,tooltips:!!g.value&&he.value,connect:"lower",start:Ri(X.value)?k.value:X.value,range:{min:k.value,max:v.value}};if(b.value>0&&(Z.step=b.value),Array.isArray(X.value)&&(Z.connect=!0),He&&He.value||xe&&Object.keys(xe.value).length){let Te=Array.isArray(X.value)?X.value:[X.value];Z.handleAttributes=Te.map(qs=>Object.assign({},xe.value,He&&He.value?{"aria-labelledby":He.value}:{}))}return ie.value&&(Z.ariaFormat=z.value),Z}),ve=jt(()=>{let Z={id:E&&E.value?E.value:void 0};return P.value&&(Z.disabled=!0),Z}),$e=jt(()=>Array.isArray(X.value)),Oe=()=>{let Z=oe.value.get();return Array.isArray(Z)?Z.map(Te=>parseFloat(Te)):parseFloat(Z)},Ue=function(Z){let Te=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1];oe.value.set(Z,Te)},je=Z=>{l.emit("input",Z),l.emit("update:modelValue",Z),l.emit("update",Z)},Tt=()=>{oe.value=w1.create(Ce.value,Object.assign({},Se.value,Y.value)),g.value&&$e.value&&_.value>=0&&de(Ce.value,_.value," - "),oe.value.on("set",()=>{const Z=Oe();l.emit("change",Z),l.emit("set",Z),le.value&&je(Z)}),oe.value.on("update",()=>{if(!fe.value)return;const Z=Oe();$e.value&&Cl(X.value,Z)||!$e.value&&X.value==Z?l.emit("update",Z):le.value||je(Z)}),oe.value.on("start",()=>{l.emit("start",Oe())}),oe.value.on("end",()=>{l.emit("end",Oe())}),oe.value.on("slide",()=>{l.emit("slide",Oe())}),oe.value.on("drag",()=>{l.emit("drag",Oe())}),Ce.value.querySelectorAll("[data-handle]").forEach(Z=>{Z.onblur=()=>{Ce.value&&pe.value.focused.split(" ").forEach(Te=>{Ce.value.classList.remove(Te)})},Z.onfocus=()=>{pe.value.focused.split(" ").forEach(Te=>{Ce.value.classList.add(Te)})}}),fe.value=!0},Dt=()=>{oe.value.off(),oe.value.destroy(),oe.value=null},Qe=(Z,Te)=>{fe.value=!1,Dt(),Tt()};return kn(Tt),xn(Dt),it($e,Qe,{immediate:!1}),it(k,Qe,{immediate:!1}),it(v,Qe,{immediate:!1}),it(b,Qe,{immediate:!1}),it(d,Qe,{immediate:!1}),it(h,Qe,{immediate:!1}),it(g,Qe,{immediate:!1}),it(_,Qe,{immediate:!1}),it(ie,Qe,{immediate:!1,deep:!0}),it(Y,Qe,{immediate:!1,deep:!0}),it(K,Qe,{immediate:!1,deep:!0}),it(X,(Z,Te)=>{Te&&(typeof Te=="object"&&typeof Z=="object"&&Z&&Object.keys(Te)>Object.keys(Z)||typeof Te=="object"&&typeof Z!="object"||Ri(Z))&&Qe()},{immediate:!1}),it(X,Z=>{if(Ri(Z))return void Ue(k.value,!1);let Te=Oe();$e.value&&!Array.isArray(Te)&&(Te=[Te]),($e.value&&!Cl(Z,Te)||!$e.value&&Z!=Te)&&Ue(Z,!1)},{deep:!0}),{slider:Ce,slider$:oe,isRange:$e,sliderProps:ve,init:Tt,destroy:Dt,refresh:Qe,update:Ue,reset:()=>{je(W.value)}}}(e,t,{value:s.value,initialValue:s.initialValue,tooltipFormat:n.tooltipFormat,tooltipsFormat:n.tooltipsFormat,tooltipsMerge:n.tooltipsMerge,classList:i.classList});return{...i,...n,...o}}};So.render=function(e,t,s,i,n,o){return N(),V("div",Ka(e.sliderProps,{ref:"slider"}),null,16)},So.__file="src/Slider.vue";const _1={components:{ColorPicker:b1,Slider:So},methods:{stringToId(e){return e.replace(/[^a-z0-9]/gi,"-").toLowerCase()},showSettingsGroup(e){let t="settings-group-"+this.stringToId(e),s=document.getElementById(t);s.style.display==="none"?s.style.display="block":s.style.display="none"},updateSettings(e,t,s){let i=e;e.target&&(i=e.target.value),this.options[s][t]=i;let n=this;Ts.post(mw.settings.api_url+"save_option",{option_group:s,option_key:t,option_value:i}).then(function(o){o.data&&n.styleSheetSourceFile&&mw.app.templateSettings.reloadStylesheet(n.styleSheetSourceFile,n.optionGroupLess)})},resetTemplateSettings(){mw.tools.confirm_reset_module_by_id(this.optionGroup,function(){})},resetStylesheetSettings(){mw.tools.confirm_reset_module_by_id(this.optionGroupLess,function(){})}},mounted(){let e=this;Ts.get(mw.settings.api_url+"editor/template_settings_v2/list").then(function(t){t.data&&(e.settingsGroups=t.data.settingsGroups,e.options=t.data.options,e.optionGroup=t.data.optionGroup,e.optionGroupLess=t.data.optionGroupLess,e.styleSheetSourceFile=t.data.styleSheetSourceFile)})},data(){return{settingsGroups:[],options:{},optionGroup:"",optionGroupLess:"",styleSheetSourceFile:!1}}},k1={class:"p-3"},x1={key:0,class:"text-center"},C1={class:"mb-3"},S1=["onClick"],E1=["id"],L1=["id"],A1={class:"accordion-item"},T1=["id"],M1=["data-bs-target","aria-controls"],O1=["id","aria-labelledby","data-bs-parent"],N1={class:"accordion-body"},P1={class:"mt-2"},H1={key:0},$1={class:"mr-4"},R1=["value","onChange","name"],F1={key:1},D1={class:"d-flex justify-content-between"},I1={class:"mr-4"},B1={key:2},z1={class:"text-uppercase"},V1={key:3},U1={class:"mr-4"},j1={key:0},W1={key:4},q1=["onChange","name","value"],K1=["value"],Y1={key:5},J1=["onChange","onUpdate:modelValue"],X1=["value"],Z1={key:6},G1=["onChange","name","value"],Q1=c("option",{value:"Arial"},"Arial",-1),e0=c("option",{value:"Tahoma"},"Tahoma",-1),t0=[Q1,e0],s0={key:0,class:"mt-2 mr-2"},i0={key:1,class:"mt-2 mr-2"};function n0(e,t,s,i,n,o){const r=De("ColorPicker"),l=De("Slider");return N(),V("div",k1,[n.settingsGroups.length===0?(N(),V("div",x1," Loading... ")):(N(!0),V(Pe,{key:1},St(n.settingsGroups,(a,d)=>(N(),V("div",C1,[c("div",null,[c("span",{onClick:h=>o.showSettingsGroup(d),class:"border-bottom pt-1 pb-1 settings-main-group"},Ye(d),9,S1)]),c("div",{style:{display:"none"},id:"settings-group-"+o.stringToId(d)},[c("div",{class:"accordion accordion-flush",id:"accordionFlush"+o.stringToId(d)},[(N(!0),V(Pe,null,St(a.values,(h,g)=>(N(),V("div",A1,[c("h2",{class:"accordion-header",id:"flush-heading-"+o.stringToId(d+"-"+g)},[c("button",{class:"accordion-button collapsed",type:"button","data-bs-toggle":"collapse","data-bs-target":"#flush-collapse-"+o.stringToId(d+"-"+g),"aria-expanded":"false","aria-controls":"flush-collapse-"+o.stringToId(d+"-"+g)},Ye(g),9,M1)],8,T1),c("div",{id:"flush-collapse-"+o.stringToId(d+"-"+g),class:"accordion-collapse collapse","aria-labelledby":"flush-heading-"+o.stringToId(d+"-"+g),"data-bs-parent":"#accordionFlush"+o.stringToId(d)},[c("div",N1,[(N(!0),V(Pe,null,St(h,(b,k)=>(N(),V("div",P1,[b.type==="text"?(N(),V("div",H1,[c("label",$1,Ye(b.label),1),c("div",null,[c("input",{type:"text",class:"form-control",value:[b.value?b.value:b.default],onChange:v=>o.updateSettings(v,k,b.optionGroup),name:k},null,40,R1)])])):ke("",!0),b.type==="color"?(N(),V("div",F1,[c("div",D1,[c("div",I1,Ye(b.label),1),c("div",null,[(N(),Be(r,{key:k,color:[b.value?b.value:b.default],onChange:v=>o.updateSettings(v,k,b.optionGroup),name:k},null,8,["color","onChange","name"]))])])])):ke("",!0),b.type==="title"?(N(),V("div",B1,[c("div",z1,[c("span",null,Ye(b.label),1)])])):ke("",!0),b.type==="range"?(N(),V("div",V1,[c("label",U1,[En(Ye(b.label)+" - "+Ye(n.options[b.optionGroup][k])+" ",1),b.range.unit?(N(),V("span",j1,Ye(b.range.unit?b.range.unit:""),1)):ke("",!0)]),c("div",null,[U(l,{min:[b.range.min?b.range.min:0],max:[b.range.max?b.range.max:100],step:[b.range.step?b.range.step:1],onChange:v=>o.updateSettings(v,k,b.optionGroup),modelValue:n.options[b.optionGroup][k],"onUpdate:modelValue":v=>n.options[b.optionGroup][k]=v,merge:1,tooltips:!1,tooltipPosition:"right"},null,8,["min","max","step","onChange","modelValue","onUpdate:modelValue"])])])):ke("",!0),b.type==="dropdown_image"?(N(),V("div",W1,[c("div",null,Ye(b.label),1),c("select",{class:"form-control",onChange:v=>o.updateSettings(v,k,b.optionGroup),name:k,value:[b.value?b.value:b.default]},[(N(!0),V(Pe,null,St(b.options,(v,_)=>(N(),V("option",{value:_},Ye(v),9,K1))),256))],40,q1)])):ke("",!0),b.type==="dropdown"?(N(),V("div",Y1,[c("div",null,Ye(b.label),1),_i(c("select",{class:"form-control",onChange:v=>o.updateSettings(v,k,b.optionGroup),"onUpdate:modelValue":v=>n.options[b.optionGroup][k]=v},[(N(!0),V(Pe,null,St(b.options,(v,_)=>(N(),V("option",{value:_},Ye(v),9,X1))),256))],40,J1),[[nm,n.options[b.optionGroup][k]]])])):ke("",!0),b.type==="font_selector"?(N(),V("div",Z1,[c("div",null,Ye(b.label),1),c("select",{class:"form-control",onChange:v=>o.updateSettings(v,k,b.optionGroup),name:k,value:[b.value?b.value:b.default]},t0,40,G1)])):ke("",!0)]))),256))])],8,O1)]))),256))],8,L1),a.type=="stylesheet"?(N(),V("div",s0,[c("button",{onClick:t[0]||(t[0]=(...h)=>o.resetStylesheetSettings&&o.resetStylesheetSettings(...h)),style:{"border-radius":"20px"},class:"btn btn-primary btn-sm btn-block"},"Reset Stylesheet Settings ")])):ke("",!0),a.type=="template"?(N(),V("div",i0,[c("button",{onClick:t[1]||(t[1]=(...h)=>o.resetTemplateSettings&&o.resetTemplateSettings(...h)),style:{"border-radius":"20px"},class:"btn btn-primary btn-sm btn-block"},"Reset Template Settings ")])):ke("",!0)],8,E1)]))),256))])}const o0=Ge(_1,[["render",n0]]);const r0={components:{TemplateSettings:o0},methods:{closeSidebar(){this.showSidebar=!1,document.getElementById("live-edit-frame-holder").removeAttribute("style")},openSidebar(){this.showSidebar=!0,document.getElementById("live-edit-frame-holder").setAttribute("style","margin-right: 303px;")}},mounted(){const e=this;this.emitter.on("live-edit-ui-show",t=>{t=="template-settings"&&(e.showSidebar==!1?e.openSidebar():e.closeSidebar())}),document.addEventListener("keyup",function(t){t.keyCode===27&&(e.showSidebar=!1)})},data(){return{showSidebar:!1}}},l0={key:0};function a0(e,t,s,i,n,o){const r=De("TemplateSettings");return N(),V("div",null,[c("div",{id:"general-theme-settings",class:ut([n.showSidebar==!0?"active":""])},[n.showSidebar?(N(),V("div",l0,[c("button",{onClick:t[0]||(t[0]=(...l)=>o.closeSidebar&&o.closeSidebar(...l)),type:"button",class:"btn btn-danger"}," Close Sidebar ")])):ke("",!0),U(r)],2)])}const c0=Ge(r0,[["render",a0]]),u0={},d0={style:{"fill-rule":"evenodd","clip-rule":"evenodd","stroke-linejoin":"round","stroke-miterlimit":"2"},version:"1.1",viewBox:"0 0 24 24",width:"100%","xml:space":"preserve",xmlns:"http://www.w3.org/2000/svg","xmlns:serif":"http://www.serif.com/","xmlns:xlink":"http://www.w3.org/1999/xlink"},h0=Ln('<g id="Icon"><path d="M11.25,15.5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l-0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l-0,-3.5Zm-1.5,0l-0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l-0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path><path d="M11.25,5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l0,-3.5Zm-1.5,0l0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path><path d="M21.75,15.5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l0,-3.5Zm-1.5,0l0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path><path d="M21.75,5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l0,-3.5Zm-1.5,0l0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path></g>',1),f0=[h0];function m0(e,t){return N(),V("svg",d0,f0)}const p0=Ge(u0,[["render",m0]]),g0={},v0={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"},b0=c("g",null,[c("path",{d:"M22 9.999V20a1 1 0 0 1-1 1h-8V9.999h9zm-11 6V21H3a1 1 0 0 1-1-1v-4.001h9zM11 3v10.999H2V4a1 1 0 0 1 1-1h8zm10 0a1 1 0 0 1 1 1v3.999h-9V3h8z"})],-1),y0=[b0];function w0(e,t){return N(),V("svg",v0,y0)}const _0=Ge(g0,[["render",w0]]);const k0=(e,t)=>Array.from({length:Math.ceil(e.length/t)},(s,i)=>e.slice(i*t,i*t+t)),x0={name:"Loading",props:{color:{type:String,default:"#18191A"}}},C0={class:"dots"};function S0(e,t,s,i,n,o){return N(),V("div",C0,[c("div",{style:Lt(`background-color: ${s.color}`)},null,4),c("div",{style:Lt(`background-color: ${s.color}`)},null,4),c("div",{style:Lt(`background-color: ${s.color}`)},null,4)])}const E0=Ge(x0,[["render",S0]]),L0={name:"LazyList",components:{Loading:E0},props:{data:{type:Array,default:()=>[]},itemsPerRender:{type:Number,default:3},containerClasses:{type:String,default:""},defaultLoading:{type:Boolean,default:!0},defaultLoadingColor:{type:String,default:"#18191A"}},created(){this.updateList(),this.$watch("data",function(){this.updateList()},{deep:!0})},mounted(){this.$refs.container.addEventListener("scroll",this.loadItems),this.loadItems()},beforeUnmount(){this.$refs.container.removeEventListener("scroll",this.loadItems)},data(){return{items:[],page:0,loading:!1,itemsToDisplay:[]}},methods:{updateList(){const e=k0(this.data,this.itemsPerRender);this.items=e,this.itemsToDisplay=e[0]},loadItems(){if(this.page===this.items.length-1)return;const e=this.$refs["end-of-list"];if(!e)return;const t=e.getBoundingClientRect();t.top>=0&&t.bottom<=window.innerHeight&&!this.loading&&(this.loading=!0,this.page++,setTimeout(()=>{this.items[this.page]===void 0&&(this.page=0),this.itemsToDisplay=[...this.itemsToDisplay,...this.items[this.page]],this.loading=!1,this.loadItems()},500))}}},A0={key:0,id:"loading-wrapper"},T0={key:1,id:"loading-wrapper"},M0={id:"end-of-list",ref:"end-of-list"};function O0(e,t,s,i,n,o){const r=De("Loading");return N(),V("div",{id:"container",ref:"container",class:ut(`${s.containerClasses}`)},[(N(!0),V(Pe,null,St(n.itemsToDisplay,l=>en(e.$slots,"default",{item:l})),256)),n.loading?(N(),V(Pe,{key:0},[s.defaultLoading?(N(),V("div",A0,[U(r,{color:s.defaultLoadingColor},null,8,["color"])])):(N(),V("div",T0,[en(e.$slots,"loading")]))],64)):ke("",!0),_i(c("div",M0,null,512),[[lm,n.page!==n.items.length-1||!n.loading]])],2)}const N0=Ge(L0,[["render",O0]]),P0=["data-index"],H0=Jt({__name:"masonry-wall",props:{columnWidth:{default:400},items:null,gap:{default:0},rtl:{type:Boolean,default:!1},ssrColumns:{default:0},scrollContainer:{default:null}},emits:["redraw","redrawSkip"],setup(e,{emit:t}){const s=e,{columnWidth:i,items:n,gap:o,rtl:r,ssrColumns:l,scrollContainer:a}=si(s),d=Pt([]),h=Pt();function g(){const E=Math.floor((h.value.getBoundingClientRect().width+o.value)/(i.value+o.value));return E>0?E:1}function b(E){return[...new Array(E)].map(()=>[])}if(l.value>0){const E=b(l.value);n.value.forEach((P,Y)=>E[Y%l.value].push(Y)),d.value=E}async function k(E){if(E>=n.value.length)return;await ka();const P=[...h.value.children];r.value&&P.reverse();const Y=P.reduce((K,ie)=>ie.getBoundingClientRect().height<K.getBoundingClientRect().height?ie:K);d.value[+Y.dataset.index].push(E),await k(E+1)}async function v(E=!1){if(d.value.length===g()&&!E){t("redrawSkip");return}d.value=b(g());const P=a==null?void 0:a.value,Y=P?P.scrollTop:window.scrollY;await k(0),P?P.scrollBy({top:Y-P.scrollTop}):window.scrollTo({top:Y}),t("redraw")}const _=typeof ResizeObserver>"u"?void 0:new ResizeObserver(()=>v());return kn(()=>{v(),_==null||_.observe(h.value)}),Yo(()=>_==null?void 0:_.unobserve(h.value)),it([n,r],()=>v(!0)),it([i,o],()=>v()),(E,P)=>(N(),V("div",{ref_key:"wall",ref:h,class:"masonry-wall",style:Lt({display:"flex",gap:`${ti(o)}px`})},[(N(!0),V(Pe,null,St(d.value,(Y,K)=>(N(),V("div",{key:K,class:"masonry-column","data-index":K,style:Lt({display:"flex","flex-basis":"0px","flex-direction":"column","flex-grow":1,gap:`${ti(o)}px`,height:["-webkit-max-content","-moz-max-content","max-content"],"min-width":0})},[(N(!0),V(Pe,null,St(Y,ie=>(N(),V("div",{key:ie,class:"masonry-item"},[en(E.$slots,"default",{item:ti(n)[ie],index:ie},()=>[En(Ye(ti(n)[ie]),1)])]))),128))],12,P0))),128))],4))}}),$0=(()=>{const e=H0;return e.install=t=>{t.component("MasonryWall",e)},e})();const R0={components:{GridIcon:p0,MasonryIcon:_0,MasonryWall:$0,LazyList:N0,ListIcon:Ap},methods:{insertLayout(e){mw.app.editor.insertLayout({template:e}),this.showModal=!1},getLayoutsListFromService(){return mw.app.layouts.list()},filterCategorySubmit(e){this.filterCategory=e,this.filterLayouts()},filterLayouts(){this.layoutsListLoaded=!1;let e=this.layoutsList.layouts;this.filterKeyword!=""&&this.filterKeyword&&(e=e.filter(t=>t.title.toUpperCase().includes(this.filterKeyword.toUpperCase()))),this.filterCategory!=""&&this.filterCategory&&(e=e.filter(t=>{if(t.categories)return t.categories.toUpperCase().includes(this.filterCategory.toUpperCase())})),this.layoutsListLoaded=!0,this.layoutsListFiltered=e}},mounted(){const e=this;mw.app.on("ready",()=>{this.getLayoutsListFromService().then(function(t){e.layoutsList=t,e.layoutsListFiltered=t.layouts,e.layoutsListLoaded=!0}),mw.app.editor.on("insertLayoutRequest",function(t){e.showModal=!0})}),this.emitter.on("live-edit-ui-show",t=>{t=="show-layouts"&&(e.showModal==!1?e.showModal=!0:e.showModal=!1)}),document.addEventListener("keyup",function(t){t.keyCode===27&&(e.showModal=!1)})},data(){return{items:[{title:"First",description:"The first item."},{title:"Second",description:"The second item."}],filterKeyword:"",filterCategory:"",layoutsListTypePreview:"list",layoutsList:[],layoutsListFiltered:[],layoutsListLoaded:!1,showModal:!1}}},F0={key:0,style:{visibility:"hidden",position:"absolute",width:"1px",height:"1px"}},D0={key:0,class:"mw-le-dialog-block mw-le-layouts-dialog active",style:{inset:"20px",transform:"none"}},I0={class:"modules-list modules-list-defaultModules"},B0={class:"mw-le-layouts-dialog-row"},z0={class:"mw-le-layouts-dialog-col"},V0={class:"modules-list-search-block"},U0=c("div",{class:"mw-le-layouts-dialog-categories-title"},"Categories",-1),j0={class:"modules-list-categories pb-5"},W0=c("li",null,null,-1),q0=["onClick"],K0={class:"mw-le-layouts-dialog-col"},Y0={key:0,class:"pl-4 mb-3 mt-3"},J0={key:0},X0={class:"pr-4 mt-3"},Z0={class:"d-flex justify-content-end pr-4 layout-list-buttons"},G0={key:1,class:"modules-list-block"},Q0=["onClick"],eg=["src","alt"],tg={class:"modules-list-block-item-title"},sg=["onClick"],ig={class:"modules-list-block-item-title"},ng={class:"modules-list-block-item-description"},og={key:3,class:"modules-list-block"},rg=c("div",{class:"modules-list-block-no-results"}," Nothing found... ",-1),lg=[rg];function ag(e,t,s,i,n,o){const r=De("GridIcon"),l=De("ListIcon"),a=De("MasonryIcon"),d=De("MasonryWall"),h=De("LazyList");return N(),V(Pe,null,[n.showModal?(N(),V("div",F0)):ke("",!0),n.showModal?(N(),V("div",{key:1,onClick:t[0]||(t[0]=g=>n.showModal=!1),class:"mw-le-overlay active"})):ke("",!0),U(Tn,{"enter-active-class":"animate__animated animate__backInLeft","leave-active-class":"animate__animated animate__backOutLeft"},{default:ii(()=>[n.showModal?(N(),V("div",D0,[c("div",I0,[c("div",B0,[c("div",z0,[c("div",V0,[_i(c("input",{"onUpdate:modelValue":t[1]||(t[1]=g=>n.filterKeyword=g),onKeydown:t[2]||(t[2]=g=>o.filterLayouts()),type:"text",placeholder:"Type to Search...",class:"modules-list-search-field"},null,544),[[Za,n.filterKeyword]])]),U0,c("ul",j0,[c("li",{onClick:t[3]||(t[3]=g=>o.filterCategorySubmit("")),class:ut([n.filterCategory==""?"active animate__animated animate__pulse":""])}," All categories ",2),W0,n.layoutsList.categories?(N(!0),V(Pe,{key:0},St(n.layoutsList.categories,g=>(N(),V("li",{class:ut([g==n.filterCategory?"active animate__animated animate__pulse":""]),onClick:b=>o.filterCategorySubmit(g)},Ye(g),11,q0))),256)):ke("",!0)])]),c("div",K0,[n.filterKeyword?(N(),V("div",Y0,[En(" Looking for "+Ye(n.filterKeyword)+" ",1),n.filterCategory?(N(),V("span",J0," in "+Ye(n.filterCategory),1)):ke("",!0)])):ke("",!0),c("div",X0,[c("div",Z0,[c("button",{type:"button",onClick:t[4]||(t[4]=g=>n.layoutsListTypePreview="list"),class:ut(["btn btn-sm btn-rounded mr-1",n.layoutsListTypePreview=="list"?"btn-primary":"btn-dark"])},[U(r,{style:{"max-width":"23px","max-height":"23px"}})],2),c("button",{type:"button",onClick:t[5]||(t[5]=g=>n.layoutsListTypePreview="full"),class:ut(["btn btn-sm btn-rounded",n.layoutsListTypePreview=="full"?"btn-primary":"btn-dark"])},[U(l,{style:{"max-width":"23px","max-height":"23px"}})],2),c("button",{type:"button",onClick:t[6]||(t[6]=g=>n.layoutsListTypePreview="masonry"),class:ut(["btn btn-sm btn-rounded mr-1",n.layoutsListTypePreview=="masonry"?"btn-primary":"btn-dark"])},[U(a,{style:{"max-width":"23px","max-height":"23px"}})],2)])]),n.layoutsListLoaded&&n.layoutsListTypePreview=="masonry"?(N(),V("div",G0,[U(d,{items:n.layoutsListFiltered,"ssr-columns":1,"column-width":200,padding:22,gap:22},{default:ii(({item:g,index:b})=>[c("div",{onClick:k=>o.insertLayout(g.template),class:ut(["modules-list-block-item",g.locked?"modules-list-block-item-is-locked-true":"modules-list-block-item-is-locked-false"])},[c("img",{src:g.screenshot,alt:g.title},null,8,eg),c("div",tg,Ye(g.title),1)],10,Q0)]),_:1},8,["items"])])):ke("",!0),n.layoutsListLoaded&&(n.layoutsListTypePreview=="list"||n.layoutsListTypePreview=="full")&&n.layoutsListFiltered.length>0?(N(),Be(h,{key:2,data:n.layoutsListFiltered,itemsPerRender:18,containerClasses:"modules-list-block",defaultLoadingColor:"#222"},{default:ii(({item:g})=>[c("div",{onClick:b=>o.insertLayout(g.template),style:Lt([n.layoutsListTypePreview=="full"?"width:100%;height:300px":"width:300px;height:160px"]),class:ut(["modules-list-block-item",g.locked?"modules-list-block-item-is-locked-true":"modules-list-block-item-is-locked-false"])},[c("div",{class:"modules-list-block-item-picture",style:Lt("background-image: url("+g.screenshot+")")},null,4),c("div",ig,Ye(g.title),1),c("div",ng,Ye(g.description),1)],14,sg)]),_:1},8,["data"])):ke("",!0),n.layoutsListFiltered.length==0?(N(),V("div",og,lg)):ke("",!0)])])])])):ke("",!0)]),_:1}),n.showModal?(N(),V("div",{key:2,onClick:t[7]||(t[7]=g=>n.showModal=!1),class:"mw-le-dialog-close active"})):ke("",!0)],64)}const cg=Ge(R0,[["render",ag]]);const ug={methods:{getLayoutsList(){return mw.app.modules.list()}},components:{},mounted(){const e=this;mw.app.on("ready",()=>{this.getLayoutsList().then(function(t){e.layoutsList=t})}),this.emitter.on("live-edit-ui-show",t=>{t=="show-modules"&&(e.showModal==!1?e.showModal=!0:e.showModal=!1)}),document.addEventListener("keyup",function(t){t.keyCode===27&&(e.showModal=!1)})},data(){return{keyword:"",category:"",layoutsList:null,showModal:!1}}},dg={key:0,style:{visibility:"hidden",position:"absolute",width:"1px",height:"1px"}},hg={key:0,class:"mw-le-dialog-block mw-le-modules-dialog active",style:{inset:"20px",transform:"none"}},fg={class:"modules-list modules-list-defaultModules"},mg={class:"modules-list-search-block"},pg=c("input",{type:"text",placeholder:"Type to Search...",class:"modules-list-search-field"},null,-1),gg={key:0},vg=c("div",{class:"modules-list-block"},[c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"miscellaneous")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/inline_table/inline_table.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Inline Table"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/search/search.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Search"),c("div",{class:"modules-list-block-item-description"},"Module to search for content"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/popup/popup.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Pop-Up"),c("div",{class:"modules-list-block-item-description"},"Pop-Up")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/embed/embed.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Embed Code"),c("div",{class:"modules-list-block-item-description"},"Embed Code")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/logo/logo.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Logo"),c("div",{class:"modules-list-block-item-description"},"Logo")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/pdf/pdf.svg)"}}),c("div",{class:"modules-list-block-item-title"},"PDF"),c("div",{class:"modules-list-block-item-description"},"PDF")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/categories/category_images/category_images.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Categories Images"),c("div",{class:"modules-list-block-item-description"},"Categories Images"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/accordion/accordion.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Accordion"),c("div",{class:"modules-list-block-item-description"},"Accordion")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/tabs/tabs.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Tabs"),c("div",{class:"modules-list-block-item-description"},"Tabs"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/breadcrumb/breadcrumb.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Breadcrumb"),c("div",{class:"modules-list-block-item-description"},"Breadcrumb navigation"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/faq/faq.svg)"}}),c("div",{class:"modules-list-block-item-title"},"FAQ"),c("div",{class:"modules-list-block-item-description"},"FAQ")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/teamcard/teamcard.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Team Card"),c("div",{class:"modules-list-block-item-description"},"Team Card"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/multilanguage/multilanguage.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Multilanguage"),c("div",{class:"modules-list-block-item-description"},"Multilanguage"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/testimonials/testimonials.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Testimonials"),c("div",{class:"modules-list-block-item-description"},"Testimonials"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/tags/tags.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Tags"),c("div",{class:"modules-list-block-item-description"},"Tags module for your posts!"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"essentials")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/title/title.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Title"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/text/text.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Text"),c("div",{class:"modules-list-block-item-description"},"Simple text")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/spacer/spacer.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Spacer"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/text/empty_element.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Empty Element"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/text/multiple_columns.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Multiple Columns"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/btn/btn.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Button"),c("div",{class:"modules-list-block-item-description"},"Button")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/contact_form/contact_form.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Contact form"),c("div",{class:"modules-list-block-item-description"},"Contact form"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/google_maps/google_maps.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Google Maps"),c("div",{class:"modules-list-block-item-description"},"Google Maps"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/posts/posts.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Posts List"),c("div",{class:"modules-list-block-item-description"},"Posts List")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/content/content.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Content"),c("div",{class:"modules-list-block-item-description"},"Shows dynamic content"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/menu/menu.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Menu"),c("div",{class:"modules-list-block-item-description"},"Navigation menu for pages and links."),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"media")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/picture/picture.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Picture"),c("div",{class:"modules-list-block-item-description"},"Picture")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/pictures/pictures.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Picture Gallery"),c("div",{class:"modules-list-block-item-description"},"Picture Gallery"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/video/video.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Video"),c("div",{class:"modules-list-block-item-description"},"Video")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/image_rollover/image_rollover.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Image Rollover"),c("div",{class:"modules-list-block-item-description"},"Image Rollover"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/slider/slider.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Slider"),c("div",{class:"modules-list-block-item-description"},"Slider")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/audio/audio.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Audio"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/beforeafter/beforeafter.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Before/After"),c("div",{class:"modules-list-block-item-description"},"Before/After")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/carousel_grid/carousel_grid.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Carousel Grid"),c("div",{class:"modules-list-block-item-description"},"Microweber Carousel Grid"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"social")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/social_links/social_links.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Social Links"),c("div",{class:"modules-list-block-item-description"},"Social Links"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/facebook_like/facebook_like.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Facebook Like"),c("div",{class:"modules-list-block-item-description"},"Facebook Like"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/facebook_page/facebook_page.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Facebook page"),c("div",{class:"modules-list-block-item-description"},"Facebook page integration for your website! "),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/tweet_embed/tweet_embed.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Tweet Embed"),c("div",{class:"modules-list-block-item-description"},"Tweet Embed")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/twitter_feed/twitter_feed.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Twitter feed"),c("div",{class:"modules-list-block-item-description"},"Feed of tweets")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/sharer/sharer.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Sharer"),c("div",{class:"modules-list-block-item-description"},"Sharer"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"store")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/shop/products/products.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Products"),c("div",{class:"modules-list-block-item-description"},"Products")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/shop/cart_add/cart_add.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Add to cart"),c("div",{class:"modules-list-block-item-description"},"Add to cart"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/shop/shop.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Online shop"),c("div",{class:"modules-list-block-item-description"},"Online shop")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"navigation")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/pages/pages.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Pages Menu"),c("div",{class:"modules-list-block-item-description"},"Pages Menu"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/categories/categories.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Categories"),c("div",{class:"modules-list-block-item-description"},"Categories"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"users")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/users/forgot_password/forgot_password.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Forgot password"),c("div",{class:"modules-list-block-item-description"},"Microweber")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/users/login/login.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Login"),c("div",{class:"modules-list-block-item-description"},"Login")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/users/register/register.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Registration"),c("div",{class:"modules-list-block-item-description"},"Microweber")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"marketing")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/newsletter/newsletter.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Newsletter"),c("div",{class:"modules-list-block-item-description"},"Newsletter")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"content")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/blog/blog.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Blog"),c("div",{class:"modules-list-block-item-description"},"Blog")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/comments/comments.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Comments"),c("div",{class:"modules-list-block-item-description"},"Comments")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/layouts/layouts.svg)"}}),c("div",{class:"modules-list-block-item-title"},"Layouts"),c("div",{class:"modules-list-block-item-description"},"Layouts"),c("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),c("div",{class:"modules-list-block-category-section"},[c("div",{class:"modules-list-block-category-section-title"},[c("h5",null,"other")]),c("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[c("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/highlight_code/highlight_code.svg)"}}),c("div",{class:"modules-list-block-item-title"},"highlight_code"),c("div",{class:"modules-list-block-item-description"},"highlight_code")])]),c("div",{class:"modules-list-block-no-results",style:{display:"none"}},"Nothing found...")],-1);function bg(e,t,s,i,n,o){return N(),V(Pe,null,[n.showModal?(N(),V("div",dg)):ke("",!0),n.showModal?(N(),V("div",{key:1,onClick:t[0]||(t[0]=r=>n.showModal=!1),class:"mw-le-overlay active"})):ke("",!0),U(Tn,{"enter-active-class":"animate__animated animate__backInLeft","leave-active-class":"animate__animated animate__backOutLeft"},{default:ii(()=>[n.showModal?(N(),V("div",hg,[c("div",fg,[c("div",mg,[pg,n.showModal?(N(),V("div",gg,[c("button",{onClick:t[1]||(t[1]=r=>n.showModal=!1),type:"button",class:"btn btn-danger"}," Close Modal ")])):ke("",!0)]),vg])])):ke("",!0)]),_:1})],64)}const yg=Ge(ug,[["render",bg]]);const wg={__name:"App",setup(e){return(t,s)=>(N(),V("div",null,[U(Gm),U(Kp),U(c0),U(cg),U(yg)]))}},Qa=function(){return document.ontouchstart!==null?"click":"touchstart"},rn="__vue_click_away__",ec=function(e,t,s){tc(e);let i=s.context,n=t.value,o=!1;setTimeout(function(){o=!0},0),e[rn]=function(r){if((!e||!e.contains(r.target))&&n&&o&&typeof n=="function")return n.call(i,r)},document.addEventListener(Qa(),e[rn],!1)},tc=function(e){document.removeEventListener(Qa(),e[rn],!1),delete e[rn]},_g=function(e,t,s){t.value!==t.oldValue&&ec(e,t,s)},kg={install:function(e){e.directive("click-away",xg)}},xg={mounted:ec,updated:_g,unmounted:tc};function Cg(e){return{all:e=e||new Map,on:function(t,s){var i=e.get(t);i?i.push(s):e.set(t,[s])},off:function(t,s){var i=e.get(t);i&&(s?i.splice(i.indexOf(s)>>>0,1):e.set(t,[]))},emit:function(t,s){var i=e.get(t);i&&i.slice().map(function(n){n(s)}),(i=e.get("*"))&&i.slice().map(function(n){n(t,s)})}}}const Sg=Cg(),lr=um(wg);lr.config.globalProperties.emitter=Sg;lr.use(kg);lr.mount("#live-edit-app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
