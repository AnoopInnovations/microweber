var Oc=Object.defineProperty;var $c=(e,t,s)=>t in e?Oc(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var mt=(e,t,s)=>($c(e,typeof t!="symbol"?t+"":t,s),s),On=(e,t,s)=>{if(!t.has(e))throw TypeError("Cannot "+s)};var J=(e,t,s)=>(On(e,t,"read from private field"),s?s.call(e):t.get(e)),dt=(e,t,s)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,s)},$n=(e,t,s,i)=>(On(e,t,"write to private field"),i?i.call(e,s):t.set(e,s),s);var _t=(e,t,s)=>(On(e,t,"access private method"),s);var vt;class Wt{constructor(){dt(this,vt,{})}on(t,s){J(this,vt)[t]?J(this,vt)[t].push(s):J(this,vt)[t]=[s]}off(t,s){if(J(this,vt)[t])if(typeof s=="function"){const i=J(this,vt)[t].indexOf(s);if(i===-1)return;J(this,vt)[t].splice(i,1)}else J(this,vt)[t]=[]}dispatch(t,s){J(this,vt)[t]&&J(this,vt)[t].forEach(function(i){i.call(this,s)})}emit(t,s){return this.dispatch(t,s)}}vt=new WeakMap;var bt,Rs,Ni;class Hc extends Wt{constructor(){super(...arguments);dt(this,Rs);dt(this,bt,{})}call(s,i){for(let n in J(this,bt))J(this,bt)[n][s]&&_t(this,Rs,Ni).call(this,s,J(this,bt)[n],i)}get(s){return J(this,bt)[s]}getModules(){return J(this,bt)}register(s,i){let n;typeof i=="function"?n=new i:n=i,J(this,bt)[s]=n,this[s]=n,_t(this,Rs,Ni).call(this,"onRegister",n),this.dispatch("register")}remove(s){let i;if(typeof s=="string"&&(i=s,s=this.get(s)),!i){for(let n in J(this,bt))if(J(this,bt)[n]===s){i=n;break}}delete J(this,bt)[i],delete this[i],_t(this,Rs,Ni).call(this,"onDestroy",s),this.dispatch("remove")}}bt=new WeakMap,Rs=new WeakSet,Ni=function(s,i,n){!s||!i||!i[s]||(s=i[s],s(n))};mw.require("editor.js");mw.require("css_parser.js");const Rc=function(){var e=document.querySelector("#mw-live-edit-editor"),t=function(){var c={};this.on=function(d,g){c[d]?c[d].push(g):c[d]=[g]},this.dispatch=function(d,g){c[d]&&c[d].forEach(function(v){v.call(this,g)})},this.provide=function(d){this.dispatch("change",d.map(function(g){return{label:g,value:g}}))}},s=new t;window.fontFamilyProvider=s;const i=mw.app.get("canvas").getFrame();i.contentWindow.fontFamilyProvider=s;const n=mw.Editor({document:i.contentWindow.document,executionDocument:i.contentWindow.document,actionWindow:i.contentWindow,element:e,mode:"document",notEditableClasses:["module"],regions:".edit",skin:"le2",editMode:"liveedit",scopeColor:"white",controls:[[{group:{icon:"mdi mdi-format-title",controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],smallEditorPositionX:"center",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:s});var o=document.getElementById("toolbar-undo"),r=document.getElementById("toolbar-redo");n.state.on("record",function(){r.disabled=!n.state.hasPrev,o.disabled=!n.state.hasNext}),n.state.on("change",function(){r.disabled=!n.state.hasPrev,o.disabled=!n.state.hasNext}),o&&o.addEventListener("click",function(){n.state.undo()}),r&&r.addEventListener("click",function(){n.state.redo()}),e.innerHTML="",e.appendChild(n.wrapper);var l=n.storage.get(n.settings.id+"-small-editor-pinned");typeof l>"u"&&typeof n.smallEditorApi<"u"&&n.smallEditorApi.pin(),mw.app.register("richTextEditor",n),mw.app.register("richTextEditorAPI",n.api)};var qe;class Ic extends Wt{constructor(){super();dt(this,qe,null)}go(s){J(this,qe)&&J(this,qe).ownerDocument&&J(this,qe).contentWindow&&(J(this,qe).src=s)}refresh(){J(this,qe)&&J(this,qe).ownerDocument&&J(this,qe).contentWindow&&J(this,qe).contentWindow.location.reload()}getFrame(){if(J(this,qe)&&J(this,qe).ownerDocument)return J(this,qe)}getWindow(){if(J(this,qe)&&J(this,qe).ownerDocument)return J(this,qe).contentWindow}getDocument(){if(J(this,qe)&&J(this,qe).ownerDocument)return J(this,qe).contentWindow.document}mount(s){this.dispatch("liveEditBeforeLoaded"),mw.spinner({element:s,size:52,decorate:!0});const i=document.createElement("iframe");i.src=`${mw.settings.site_url}?editmode=n`,i.frameBorder=0,i.id="live-editor-frame",i.referrerPolicy="no-referrer",$n(this,qe,i),s.innerHTML="",s.appendChild(i),i.addEventListener("load",n=>{this.dispatch("liveEditCanvasLoaded"),mw.spinner({element:s}).remove()})}}qe=new WeakMap;function Dc(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var no={},Fc={get exports(){return no},set exports(e){no=e}},Bi={},Bc={get exports(){return Bi},set exports(e){Bi=e}},Il=function(t,s){return function(){for(var n=new Array(arguments.length),o=0;o<n.length;o++)n[o]=arguments[o];return t.apply(s,n)}},zc=Il,Ls=Object.prototype.toString;function Mo(e){return Ls.call(e)==="[object Array]"}function oo(e){return typeof e>"u"}function Vc(e){return e!==null&&!oo(e)&&e.constructor!==null&&!oo(e.constructor)&&typeof e.constructor.isBuffer=="function"&&e.constructor.isBuffer(e)}function jc(e){return Ls.call(e)==="[object ArrayBuffer]"}function Uc(e){return typeof FormData<"u"&&e instanceof FormData}function qc(e){var t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&e.buffer instanceof ArrayBuffer,t}function Wc(e){return typeof e=="string"}function Yc(e){return typeof e=="number"}function Dl(e){return e!==null&&typeof e=="object"}function Pi(e){if(Ls.call(e)!=="[object Object]")return!1;var t=Object.getPrototypeOf(e);return t===null||t===Object.prototype}function Kc(e){return Ls.call(e)==="[object Date]"}function Xc(e){return Ls.call(e)==="[object File]"}function Jc(e){return Ls.call(e)==="[object Blob]"}function Fl(e){return Ls.call(e)==="[object Function]"}function Zc(e){return Dl(e)&&Fl(e.pipe)}function Gc(e){return typeof URLSearchParams<"u"&&e instanceof URLSearchParams}function Qc(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function eu(){return typeof navigator<"u"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window<"u"&&typeof document<"u"}function Ao(e,t){if(!(e===null||typeof e>"u"))if(typeof e!="object"&&(e=[e]),Mo(e))for(var s=0,i=e.length;s<i;s++)t.call(null,e[s],s,e);else for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.call(null,e[n],n,e)}function ro(){var e={};function t(n,o){Pi(e[o])&&Pi(n)?e[o]=ro(e[o],n):Pi(n)?e[o]=ro({},n):Mo(n)?e[o]=n.slice():e[o]=n}for(var s=0,i=arguments.length;s<i;s++)Ao(arguments[s],t);return e}function tu(e,t,s){return Ao(t,function(n,o){s&&typeof n=="function"?e[o]=zc(n,s):e[o]=n}),e}function su(e){return e.charCodeAt(0)===65279&&(e=e.slice(1)),e}var pt={isArray:Mo,isArrayBuffer:jc,isBuffer:Vc,isFormData:Uc,isArrayBufferView:qc,isString:Wc,isNumber:Yc,isObject:Dl,isPlainObject:Pi,isUndefined:oo,isDate:Kc,isFile:Xc,isBlob:Jc,isFunction:Fl,isStream:Zc,isURLSearchParams:Gc,isStandardBrowserEnv:eu,forEach:Ao,merge:ro,extend:tu,trim:Qc,stripBOM:su},As=pt;function Cr(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var Bl=function(t,s,i){if(!s)return t;var n;if(i)n=i(s);else if(As.isURLSearchParams(s))n=s.toString();else{var o=[];As.forEach(s,function(c,d){c===null||typeof c>"u"||(As.isArray(c)?d=d+"[]":c=[c],As.forEach(c,function(v){As.isDate(v)?v=v.toISOString():As.isObject(v)&&(v=JSON.stringify(v)),o.push(Cr(d)+"="+Cr(v))}))}),n=o.join("&")}if(n){var r=t.indexOf("#");r!==-1&&(t=t.slice(0,r)),t+=(t.indexOf("?")===-1?"?":"&")+n}return t},iu=pt;function Qi(){this.handlers=[]}Qi.prototype.use=function(t,s,i){return this.handlers.push({fulfilled:t,rejected:s,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1};Qi.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)};Qi.prototype.forEach=function(t){iu.forEach(this.handlers,function(i){i!==null&&t(i)})};var nu=Qi,ou=pt,ru=function(t,s){ou.forEach(t,function(n,o){o!==s&&o.toUpperCase()===s.toUpperCase()&&(t[s]=n,delete t[o])})},zl=function(t,s,i,n,o){return t.config=s,i&&(t.code=i),t.request=n,t.response=o,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t},Hn,Sr;function Vl(){if(Sr)return Hn;Sr=1;var e=zl;return Hn=function(s,i,n,o,r){var l=new Error(s);return e(l,i,n,o,r)},Hn}var Rn,Lr;function lu(){if(Lr)return Rn;Lr=1;var e=Vl();return Rn=function(s,i,n){var o=n.config.validateStatus;!n.status||!o||o(n.status)?s(n):i(e("Request failed with status code "+n.status,n.config,null,n.request,n))},Rn}var In,Er;function au(){if(Er)return In;Er=1;var e=pt;return In=e.isStandardBrowserEnv()?function(){return{write:function(i,n,o,r,l,c){var d=[];d.push(i+"="+encodeURIComponent(n)),e.isNumber(o)&&d.push("expires="+new Date(o).toGMTString()),e.isString(r)&&d.push("path="+r),e.isString(l)&&d.push("domain="+l),c===!0&&d.push("secure"),document.cookie=d.join("; ")},read:function(i){var n=document.cookie.match(new RegExp("(^|;\\s*)("+i+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(i){this.write(i,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}(),In}var Dn,Mr;function cu(){return Mr||(Mr=1,Dn=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}),Dn}var Fn,Ar;function uu(){return Ar||(Ar=1,Fn=function(t,s){return s?t.replace(/\/+$/,"")+"/"+s.replace(/^\/+/,""):t}),Fn}var Bn,Tr;function du(){if(Tr)return Bn;Tr=1;var e=cu(),t=uu();return Bn=function(i,n){return i&&!e(n)?t(i,n):n},Bn}var zn,Nr;function hu(){if(Nr)return zn;Nr=1;var e=pt,t=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];return zn=function(i){var n={},o,r,l;return i&&e.forEach(i.split(`
`),function(d){if(l=d.indexOf(":"),o=e.trim(d.substr(0,l)).toLowerCase(),r=e.trim(d.substr(l+1)),o){if(n[o]&&t.indexOf(o)>=0)return;o==="set-cookie"?n[o]=(n[o]?n[o]:[]).concat([r]):n[o]=n[o]?n[o]+", "+r:r}}),n},zn}var Vn,Pr;function fu(){if(Pr)return Vn;Pr=1;var e=pt;return Vn=e.isStandardBrowserEnv()?function(){var s=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a"),n;function o(r){var l=r;return s&&(i.setAttribute("href",l),l=i.href),i.setAttribute("href",l),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:i.pathname.charAt(0)==="/"?i.pathname:"/"+i.pathname}}return n=o(window.location.href),function(l){var c=e.isString(l)?o(l):l;return c.protocol===n.protocol&&c.host===n.host}}():function(){return function(){return!0}}(),Vn}var jn,Or;function $r(){if(Or)return jn;Or=1;var e=pt,t=lu(),s=au(),i=Bl,n=du(),o=hu(),r=fu(),l=Vl();return jn=function(d){return new Promise(function(v,p){var w=d.data,k=d.headers,x=d.responseType;e.isFormData(w)&&delete k["Content-Type"];var C=new XMLHttpRequest;if(d.auth){var R=d.auth.username||"",Z=d.auth.password?unescape(encodeURIComponent(d.auth.password)):"";k.Authorization="Basic "+btoa(R+":"+Z)}var Y=n(d.baseURL,d.url);C.open(d.method.toUpperCase(),i(Y,d.params,d.paramsSerializer),!0),C.timeout=d.timeout;function se(){if(C){var be="getAllResponseHeaders"in C?o(C.getAllResponseHeaders()):null,ue=!x||x==="text"||x==="json"?C.responseText:C.response,j={data:ue,status:C.status,statusText:C.statusText,headers:be,config:d,request:C};t(v,p,j),C=null}}if("onloadend"in C?C.onloadend=se:C.onreadystatechange=function(){!C||C.readyState!==4||C.status===0&&!(C.responseURL&&C.responseURL.indexOf("file:")===0)||setTimeout(se)},C.onabort=function(){C&&(p(l("Request aborted",d,"ECONNABORTED",C)),C=null)},C.onerror=function(){p(l("Network Error",d,null,C)),C=null},C.ontimeout=function(){var ue="timeout of "+d.timeout+"ms exceeded";d.timeoutErrorMessage&&(ue=d.timeoutErrorMessage),p(l(ue,d,d.transitional&&d.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",C)),C=null},e.isStandardBrowserEnv()){var ne=(d.withCredentials||r(Y))&&d.xsrfCookieName?s.read(d.xsrfCookieName):void 0;ne&&(k[d.xsrfHeaderName]=ne)}"setRequestHeader"in C&&e.forEach(k,function(ue,j){typeof w>"u"&&j.toLowerCase()==="content-type"?delete k[j]:C.setRequestHeader(j,ue)}),e.isUndefined(d.withCredentials)||(C.withCredentials=!!d.withCredentials),x&&x!=="json"&&(C.responseType=d.responseType),typeof d.onDownloadProgress=="function"&&C.addEventListener("progress",d.onDownloadProgress),typeof d.onUploadProgress=="function"&&C.upload&&C.upload.addEventListener("progress",d.onUploadProgress),d.cancelToken&&d.cancelToken.promise.then(function(ue){C&&(C.abort(),p(ue),C=null)}),w||(w=null),C.send(w)})},jn}var tt=pt,Hr=ru,mu=zl,pu={"Content-Type":"application/x-www-form-urlencoded"};function Rr(e,t){!tt.isUndefined(e)&&tt.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}function gu(){var e;return(typeof XMLHttpRequest<"u"||typeof process<"u"&&Object.prototype.toString.call(process)==="[object process]")&&(e=$r()),e}function vu(e,t,s){if(tt.isString(e))try{return(t||JSON.parse)(e),tt.trim(e)}catch(i){if(i.name!=="SyntaxError")throw i}return(s||JSON.stringify)(e)}var en={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:gu(),transformRequest:[function(t,s){return Hr(s,"Accept"),Hr(s,"Content-Type"),tt.isFormData(t)||tt.isArrayBuffer(t)||tt.isBuffer(t)||tt.isStream(t)||tt.isFile(t)||tt.isBlob(t)?t:tt.isArrayBufferView(t)?t.buffer:tt.isURLSearchParams(t)?(Rr(s,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):tt.isObject(t)||s&&s["Content-Type"]==="application/json"?(Rr(s,"application/json"),vu(t)):t}],transformResponse:[function(t){var s=this.transitional,i=s&&s.silentJSONParsing,n=s&&s.forcedJSONParsing,o=!i&&this.responseType==="json";if(o||n&&tt.isString(t)&&t.length)try{return JSON.parse(t)}catch(r){if(o)throw r.name==="SyntaxError"?mu(r,this,"E_JSON_PARSE"):r}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300}};en.headers={common:{Accept:"application/json, text/plain, */*"}};tt.forEach(["delete","get","head"],function(t){en.headers[t]={}});tt.forEach(["post","put","patch"],function(t){en.headers[t]=tt.merge(pu)});var To=en,bu=pt,yu=To,wu=function(t,s,i){var n=this||yu;return bu.forEach(i,function(r){t=r.call(n,t,s)}),t},Un,Ir;function jl(){return Ir||(Ir=1,Un=function(t){return!!(t&&t.__CANCEL__)}),Un}var Dr=pt,qn=wu,ku=jl(),_u=To;function Wn(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var xu=function(t){Wn(t),t.headers=t.headers||{},t.data=qn.call(t,t.data,t.headers,t.transformRequest),t.headers=Dr.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),Dr.forEach(["delete","get","head","post","put","patch","common"],function(n){delete t.headers[n]});var s=t.adapter||_u.adapter;return s(t).then(function(n){return Wn(t),n.data=qn.call(t,n.data,n.headers,t.transformResponse),n},function(n){return ku(n)||(Wn(t),n&&n.response&&(n.response.data=qn.call(t,n.response.data,n.response.headers,t.transformResponse))),Promise.reject(n)})},ot=pt,Ul=function(t,s){s=s||{};var i={},n=["url","method","data"],o=["headers","auth","proxy","params"],r=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],l=["validateStatus"];function c(p,w){return ot.isPlainObject(p)&&ot.isPlainObject(w)?ot.merge(p,w):ot.isPlainObject(w)?ot.merge({},w):ot.isArray(w)?w.slice():w}function d(p){ot.isUndefined(s[p])?ot.isUndefined(t[p])||(i[p]=c(void 0,t[p])):i[p]=c(t[p],s[p])}ot.forEach(n,function(w){ot.isUndefined(s[w])||(i[w]=c(void 0,s[w]))}),ot.forEach(o,d),ot.forEach(r,function(w){ot.isUndefined(s[w])?ot.isUndefined(t[w])||(i[w]=c(void 0,t[w])):i[w]=c(void 0,s[w])}),ot.forEach(l,function(w){w in s?i[w]=c(t[w],s[w]):w in t&&(i[w]=c(void 0,t[w]))});var g=n.concat(o).concat(r).concat(l),v=Object.keys(t).concat(Object.keys(s)).filter(function(w){return g.indexOf(w)===-1});return ot.forEach(v,d),i};const Cu="axios",Su="0.21.4",Lu="Promise based HTTP client for the browser and node.js",Eu="index.js",Mu={test:"grunt test",start:"node ./sandbox/server.js",build:"NODE_ENV=production grunt build",preversion:"npm test",version:"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",postversion:"git push && git push --tags",examples:"node ./examples/server.js",coveralls:"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",fix:"eslint --fix lib/**/*.js"},Au={type:"git",url:"https://github.com/axios/axios.git"},Tu=["xhr","http","ajax","promise","node"],Nu="Matt Zabriskie",Pu="MIT",Ou={url:"https://github.com/axios/axios/issues"},$u="https://axios-http.com",Hu={coveralls:"^3.0.0","es6-promise":"^4.2.4",grunt:"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1",karma:"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2",minimist:"^1.2.0",mocha:"^8.2.1",sinon:"^4.5.0","terser-webpack-plugin":"^4.2.3",typescript:"^4.0.5","url-search-params":"^0.10.0",webpack:"^4.44.2","webpack-dev-server":"^3.11.0"},Ru={"./lib/adapters/http.js":"./lib/adapters/xhr.js"},Iu="dist/axios.min.js",Du="dist/axios.min.js",Fu="./index.d.ts",Bu={"follow-redirects":"^1.14.0"},zu=[{path:"./dist/axios.min.js",threshold:"5kB"}],Vu={name:Cu,version:Su,description:Lu,main:Eu,scripts:Mu,repository:Au,keywords:Tu,author:Nu,license:Pu,bugs:Ou,homepage:$u,devDependencies:Hu,browser:Ru,jsdelivr:Iu,unpkg:Du,typings:Fu,dependencies:Bu,bundlesize:zu};var ql=Vu,No={};["object","boolean","number","function","string","symbol"].forEach(function(e,t){No[e]=function(i){return typeof i===e||"a"+(t<1?"n ":" ")+e}});var Fr={},ju=ql.version.split(".");function Wl(e,t){for(var s=t?t.split("."):ju,i=e.split("."),n=0;n<3;n++){if(s[n]>i[n])return!0;if(s[n]<i[n])return!1}return!1}No.transitional=function(t,s,i){var n=s&&Wl(s);function o(r,l){return"[Axios v"+ql.version+"] Transitional option '"+r+"'"+l+(i?". "+i:"")}return function(r,l,c){if(t===!1)throw new Error(o(l," has been removed in "+s));return n&&!Fr[l]&&(Fr[l]=!0,console.warn(o(l," has been deprecated since v"+s+" and will be removed in the near future"))),t?t(r,l,c):!0}};function Uu(e,t,s){if(typeof e!="object")throw new TypeError("options must be an object");for(var i=Object.keys(e),n=i.length;n-- >0;){var o=i[n],r=t[o];if(r){var l=e[o],c=l===void 0||r(l,o,e);if(c!==!0)throw new TypeError("option "+o+" must be "+c);continue}if(s!==!0)throw Error("Unknown option "+o)}}var qu={isOlderVersion:Wl,assertOptions:Uu,validators:No},Yl=pt,Wu=Bl,Br=nu,zr=xu,tn=Ul,Kl=qu,Ts=Kl.validators;function fi(e){this.defaults=e,this.interceptors={request:new Br,response:new Br}}fi.prototype.request=function(t){typeof t=="string"?(t=arguments[1]||{},t.url=arguments[0]):t=t||{},t=tn(this.defaults,t),t.method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var s=t.transitional;s!==void 0&&Kl.assertOptions(s,{silentJSONParsing:Ts.transitional(Ts.boolean,"1.0.0"),forcedJSONParsing:Ts.transitional(Ts.boolean,"1.0.0"),clarifyTimeoutError:Ts.transitional(Ts.boolean,"1.0.0")},!1);var i=[],n=!0;this.interceptors.request.forEach(function(p){typeof p.runWhen=="function"&&p.runWhen(t)===!1||(n=n&&p.synchronous,i.unshift(p.fulfilled,p.rejected))});var o=[];this.interceptors.response.forEach(function(p){o.push(p.fulfilled,p.rejected)});var r;if(!n){var l=[zr,void 0];for(Array.prototype.unshift.apply(l,i),l=l.concat(o),r=Promise.resolve(t);l.length;)r=r.then(l.shift(),l.shift());return r}for(var c=t;i.length;){var d=i.shift(),g=i.shift();try{c=d(c)}catch(v){g(v);break}}try{r=zr(c)}catch(v){return Promise.reject(v)}for(;o.length;)r=r.then(o.shift(),o.shift());return r};fi.prototype.getUri=function(t){return t=tn(this.defaults,t),Wu(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")};Yl.forEach(["delete","get","head","options"],function(t){fi.prototype[t]=function(s,i){return this.request(tn(i||{},{method:t,url:s,data:(i||{}).data}))}});Yl.forEach(["post","put","patch"],function(t){fi.prototype[t]=function(s,i,n){return this.request(tn(n||{},{method:t,url:s,data:i}))}});var Yu=fi,Yn,Vr;function Xl(){if(Vr)return Yn;Vr=1;function e(t){this.message=t}return e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,Yn=e,Yn}var Kn,jr;function Ku(){if(jr)return Kn;jr=1;var e=Xl();function t(s){if(typeof s!="function")throw new TypeError("executor must be a function.");var i;this.promise=new Promise(function(r){i=r});var n=this;s(function(r){n.reason||(n.reason=new e(r),i(n.reason))})}return t.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},t.source=function(){var i,n=new t(function(r){i=r});return{token:n,cancel:i}},Kn=t,Kn}var Xn,Ur;function Xu(){return Ur||(Ur=1,Xn=function(t){return function(i){return t.apply(null,i)}}),Xn}var Jn,qr;function Ju(){return qr||(qr=1,Jn=function(t){return typeof t=="object"&&t.isAxiosError===!0}),Jn}var Wr=pt,Zu=Il,Oi=Yu,Gu=Ul,Qu=To;function Jl(e){var t=new Oi(e),s=Zu(Oi.prototype.request,t);return Wr.extend(s,Oi.prototype,t),Wr.extend(s,t),s}var At=Jl(Qu);At.Axios=Oi;At.create=function(t){return Jl(Gu(At.defaults,t))};At.Cancel=Xl();At.CancelToken=Ku();At.isCancel=jl();At.all=function(t){return Promise.all(t)};At.spread=Xu();At.isAxiosError=Ju();Bc.exports=At;Bi.default=At;(function(e){e.exports=Bi})(Fc);const Ss=Dc(no);class Rt{static extend(){const t={};let s=!1,i=0;const n=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(s=arguments[0],i++);const o=function(r){for(const l in r)Object.prototype.hasOwnProperty.call(r,l)&&(s&&Object.prototype.toString.call(r[l])==="[object Object]"?t[l]=Rt.extend(!0,t[l],r[l]):t[l]=r[l])};for(;i<n;i++){const r=arguments[i];o(r)}return t}}var gs=function(e,t){var s=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(n,o){this.nodes=(o||document).querySelectorAll(n)},this.each=function(n){if(this.nodes)for(var o=0;o<this.nodes.length;o++)n.call(this.nodes[o],o);else this.node&&n.call(this.node,0);return this},this.encapsulate=function(){};var i=function(n,o){n&&(Array.isArray(n)?n.forEach(function(r){i(r,o)}):n instanceof gs?o.append(n):typeof n=="object"&&o.append(new gs(n)))};this.create=function(){var n=this.document.createElement(this.settings.tag);if(this.node=n,this.settings.encapsulate===!0){var o=this.settings.encapsulate===!0?"open":this.settings.encapsulate;n.attachShadow({mode:o})}this.nodes=[n],this.settings.content&&i(this.settings.content,this)},this._specialProps=function(n,o){if(n==="tooltip")return this.node.dataset[n]=o,!0},this.setProps=function(){for(var n in this.settings.props)if(n==="dataset")for(var o in this.settings.props[n])this.node.dataset[o]=this.settings.props[n][o];else if(n==="style")for(var r in this.settings.props[n])this.node.style[r]=this.settings.props[n][r];else{var l=this.settings.props[n];this._specialProps(n,l)||(this.node[n]=l)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(n,o){return typeof o=="number"&&this.__.cssNumber.indexOf(n)===-1&&(o=o+"px"),o},this.css=function(n,o){if(typeof n=="string")if(typeof o<"u"){var r=this._normalizeCSSValue(n,o);this.each(function(){this.style[n]=r})}else return this.document.defaultView.getComputedStyle(this.node)[n];if(typeof n=="object")for(var l in n)this.each(function(){this.style[l]=s._normalizeCSSValue(l,n[l])});return this},this.dataset=function(n,o){return typeof o>"u"?this._active()[n]:(this.each(function(){this.dataset[n]=o}),this)},this.attr=function(n,o){return typeof o>"u"?this._active()[n]:(this.each(function(){this.setAttribute(n,o)}),this)},this.val=function(n){return typeof n>"u"?this._active().value:(this.each(function(){this.value=n}),this)},this.prop=function(n,o){var r=this._active();return typeof o>"u"?r[n]:(r[n]!==o&&(r[n]=o,this.trigger("propChange",[n,o])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(n){var o=mw.element("#r"+new Date().getTime());return this.each(function(){for(var r=this.querySelectorAll(n),l=0;l<r.length;l++)o.nodes.indexOf(r[l])===-1&&o.nodes.push(r[l])}),o},this.addClass=function(n){return n=n.trim().split(" "),this.each(function(){var o=this;n.forEach(function(r){o.classList.add(r)})})},this.toggleClass=function(n){return this.each(function(){this.classList.toggle(n.trim())})},this.removeClass=function(n){var o=Array.isArray(n);if(o)return this.each(function(){for(var l=0,c=n.length;l<c;l++)this.classList.remove(n[l])});n=n.trim();var r=n.split(" ");return r.length>1?this.removeClass(r):this.each(function(){this.classList.remove(n)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(n){return typeof n>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=n})},this.text=function(n,o){if(typeof n>"u")return this.node.textContent;typeof o>"u"&&(o=!0),o&&(n=this.document.createRange().createContextualFragment(n).textContent),this.node.innerHTML=n},this._asdom=function(n){return typeof n=="string"?this.document.createRange().createContextualFragment(n):n.node?n.node:n.nodes?n.nodes[n.nodes.length-1]:n},this.offset=function(){var n=this._active(),o=this.getWindow(),r=n.getBoundingClientRect();return r.offsetTop=r.top+o.pageYOffset,r.offsetBottom=r.bottom+o.pageYOffset,r.offsetLeft=r.left+o.pageXOffset,r},this.width=function(n){return n?this.css("width",n):this._active().offsetWidth},this.height=function(n){return n?this.css("height",n):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(n){n=n||"*";var o=this._active(),r=o.parentElement,l=mw.element();for(l.nodes=[];r;)r.matches(n)&&l.nodes.push(r),r=r.parentElement;return l},this.append=function(n){return n&&this.each(function(){this.append(s._asdom(n))}),this},this.before=function(n){return n&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(s._asdom(n),this)}),this},this.after=function(n){n&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(s._asdom(n),this.nextSibling)})},this.prepend=function(n){return n&&this.each(function(){this.prepend(s._asdom(n))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(n){this._disabled=n,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(n,o){return o=o||{},this.each(function(){this.dispatchEvent(new CustomEvent(n,{detail:o,cancelable:!0,bubbles:!0})),s._on[n]&&s._on[n].forEach(function(r){r.call(this,n,o)})}),this},this.get=function(n){return this.nodes[n]},this.wrap=function(n){var o=Po(n);this.before(o),o.append(this)},this._on={},this.on=function(n,o){return n=n.trim().split(" "),n.forEach(function(r){s._on[r]||(s._on[r]=[]),s._on[r].push(o),s.each(function(){this.addEventListener(r,o,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=t||document,this.root instanceof gs&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,e=e||{},e.nodeName&&e.nodeType)this.nodes.push(e),this.node=e,e={},this._asElement=!0;else if(typeof e=="string")if(e.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(e)),e={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof gs)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new gs(this.settings.content));else{var n=this._asdom(e);this.nodes=[].slice.call(n.children),this._asElement=!0}e=e||{};var o={tag:"div",props:{}};this.settings=Rt.extend({},o,e),!this._asElement&&(this.create(),this.setProps())},this.init()};const Po=function(e,t){return new gs(e,t)};Po.module=function(e,t){gs.prototype[e]=t};const lo="mw-le-element";window.customElements&&!customElements.get(lo)&&customElements.define(lo,class extends HTMLElement{constructor(){super()}});const ge=(e,t)=>(e instanceof Object&&!e.nodeType&&(e=Rt.extend({},e||{},{tag:e.tag||lo})),Po(e,t)),Yr=(e=null,t,s={},i)=>{if(!(!e||!t))return new Promise(async n=>{await e.ownerDocument.defaultView.mw.module.insert(e,t,s,"top",mw.liveEditState),n()})};class ed extends Wt{constructor(){super(),mw.app.get("liveEdit").moduleHandle.on("targetChange",s=>{this.dispatch("targetChange",s)})}}class td extends Wt{constructor(){super(),mw.app.get("liveEdit").elementHandle.on("targetChange",s=>{this.dispatch("targetChange",s)})}}class sd extends Wt{constructor(){super(),mw.app.get("liveEdit").layoutHandleContent.on("targetChange",s=>{this.dispatch("targetChange",s)})}}class id extends Wt{constructor(){super(...arguments);mt(this,"handle",{module:new ed,element:new td,layout:new sd})}insertModule(s,i){const n=mw.app.get("liveEdit").handles.get("module").getTarget();return Yr(n,s,i)}insertLayout(s){const i=mw.app.get("liveEdit").handles.get("layout").getTarget();return Yr(i,"layouts",s)}}let Xs;const ki=document.documentElement;ki.matches?Xs="matches":ki.matchesSelector?Xs="matchesSelector":ki.mozMatchesSelector?Xs="mozMatchesSelector":ki.webkitMatchesSelector&&(Xs="webkitMatchesSelector");class yt{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(t,s){return t[Xs](s)}static isBlockLevel(t){if(!t||t.nodeType===3)return!1;var s=t.nodeName;if(typeof this._isBlockCache[s]<"u")return this._isBlockCache[s];var i=document.createElement(s);return this.fragment().appendChild(i),this._isBlockCache[s]=getComputedStyle(i).display==="block",this.fragment().removeChild(i),this._isBlockCache[s]}static firstBlockLevel(t){for(;t&&t.classList;){if(this.isBlockLevel(t))return t;t=t.parentNode}}static firstWithBackgroundImage(t){if(!t)return null;for(;t&&t.nodeName!=="BODY";){if(t.style.backgroundImage)return t;t=t.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(t,s){for(;t&&t.nodeName!=="BODY";){let i=0,n=s.length;for(;i<n;i++)if(t.classList.contains(s[i]))return!0;t=t.parentElement}return!1}static hasParentsWithClass(t,s){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.classList.contains(s))return!0;i=i.parentNode}return!1}}static hasParentWithId(t,s){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.id===s)return!0;i=i.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(t,s){for(;t&&t.nodeName!=="BODY";){let i=0,n=s.length;for(;i<n;i++)if(t.classList.contains(s[i]))return t;t=t.parentElement}return null}static firstParentOrCurrentWithTag(t,s){if(!(!t||!s)){s=typeof s!="string"?s:[s];for(var i=t;i&&i.nodeName!=="BODY";){if(s.indexOf(i.nodeName.toLowerCase())!==-1)return i;i=i.parentNode}return!1}}static index(t,s,i){i=i||t.tagName.toLowerCase(),s=s||t.parentNode;var n;s.constructor===[].constructor?n=s:n=s.querySelectorAll(i);for(var o=0,r=n.length;o<r;o++)if(t===n[o])return o}static firstParentOrCurrentWithClass(t,s){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.classList.contains(s))return i;i=i.parentNode}return!1}static firstParentOrCurrent(t,s){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.matches(s))return i;i=i.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(t,s){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(!i)return!1;if(this.hasAnyOfClasses(i,s))return i;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(t,s){let i=t;for(;i&&i.nodeName!=="BODY";){const n=i.classList.contains(s[0]),o=i.classList.contains(s[1]);if(n&&o)return!1;if(n)return!0;if(o)return!1;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,s){let i=t;for(;i&&i.nodeName!=="BODY";){const n=i.classList.contains(s[0]),o=i.classList.contains(s[1]);if(n&&o)return!1;if(n)return!0;if(o)return!1;i=i.parentNode}return!0}static hasAnyOfClasses(t,s){if(!t)return;let i=0,n=s.length;for(;i<n;i++)if(t.classList.contains(s[i]))return!0;return!1}static offset(t){if(t){var s=t.getBoundingClientRect(),i={top:s.top,left:s.left,width:s.width,height:s.height,bottom:s.bottom,right:s.right};return i.top+=t.ownerDocument.defaultView.scrollY,i.bottom+=t.ownerDocument.defaultView.scrollY,i.left+=t.ownerDocument.defaultView.scrollX,i.right+=t.ownerDocument.defaultView.scrollX,i}}static parentsOrder(t,s){for(var i=[],n={},o=s.length,r=0,l=-1;r<o;r++)n[s[r]]=-1;if(!t)return n;for(var c=t.parentNode;c&&c.nodeName!=="BODY";){for(l++,r=0;r<o;r++)c.classList.contains(s[r])&&i.indexOf(s[r])===-1&&(n[s[r]]=l,i.push(s[r]));c=c.parentNode}return n}}mt(yt,"_isBlockCache",{}),mt(yt,"_fragment");class nd{constructor(t){this.settings=t,this.tools=yt}isRow(t){return t.classList.contains(this.settings.rowClass)}isModule(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type!=="layouts"}isLayout(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts"}isInLayout(t){if(!t)return!1;for(t=t.parentNode;t&&t!==this.settings.document.body;){if(t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts")return!0;t=t.parentNode}}isElement(t){return t.classList.contains(this.settings.elementClass)}isEmptyElement(t){return t.classList.contains(this.settings.emptyElementClass)}isEdit(t){return t.classList.contains(this.settings.editClass)}isInEdit(t){var s=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t.parentNode,s)}isEditOrInEdit(t){return this.isEdit(t)||this.isInEdit(t)}isPlainText(t){return t.classList.contains(this.settings.plainElementClass)}getType(t){if(this.isEdit(t))return"edit";if(this.isElement(t))return"element";if(this.isModule(t))return"module";if(this.isLayout(t))return"layout"}}class Zl extends nd{constructor(t){super(t),this.settings=t,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM","DD"],this.init()}isConfigurable(t){return this.isElement(t)||this.isModule(t)||this.isRow(t)}isEditableLayout(t){return this.this.isLayout(t)&&this.isInEdit(t)}canMoveModule(t){return this.isModule(t)&&this.isInEdit(t)}canAcceptByClass(t){return this.tools.hasAnyOfClasses(t,this.dropableElements())}canAcceptByTag(t){return!t||t.nodeType!==1?!1:this._tagsCanAccept.indexOf(t.nodeName)!==-1}allowDrop(t){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(t){return this.canAccept(t.parentNode)}canAccept(t){return!!(this.canAcceptByClass(t)&&this.isEditOrInEdit(t)&&this.allowDrop(t))}canReceiveElements(t){return this.isEdit(t)&&this.canAcceptByTag(t)}dropableElements(){return this._dropableElements}getIteractionTarget(t){return this.tools.firstWithAyOfClassesOnNodeOrParent(t,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(t,s){const i=this.getIteractionTarget(t);if(!i||!this.isEditOrInEdit(t)||!this.allowDrop(t))return null;const n={target:i,canInsert:!1,beforeAfter:!1};var o=this.settings.strictLayouts&&this.isLayout(s),r=this.settings.strict&&!this.isLayout(s)&&!this.isInLayout(i);if(r)return null;if(this.isEdit(i))n.canInsert=!o;else if(this.isElement(i)&&!o)this.canAcceptByTag(i)&&(n.canInsert=!o),n.beforeAfter=!0;else if(this.isModule(i)&&!o)if(this.canInsertBeforeOrAfter(i))n.beforeAfter=!0;else return null;else if(this.isLayout(i))if(this.canInsertBeforeOrAfter(i))n.beforeAfter=!0;else return null;return n}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let od=-1;const rd=(e,t)=>{if(!e||!t)return!1;const s=t.target;if(!s||s.nodeType!==1)return!1;e.pageX;const i=e.pageY,n=yt.offset(s),o={},r=15;if(od===i||!t||!t.canInsert&&!t.beforeAfter)return!1;if(t.canInsert&&t.beforeAfter)if(i>=n.top-r&&i<=n.top+r)o.position="top",o.action="before";else if(i>=n.top+r&&i<=n.top+n.height/2)o.position="top",o.action="prepend";else if(i>=n.top+n.height/2&&i<=n.bottom-r)o.position="bottom",o.action="append";else if(i>=n.top+n.height/2&&i>=n.bottom-r)o.position="bottom",o.action="after";else return!1;else if(t.beforeAfter)if(i>=n.top-r&&i<=n.top+n.height/2)o.position="top",o.action="before";else if(i>=n.top+n.height/2&&i<=n.bottom+r)o.position="bottom",o.action="after";else return!1;else if(t.canInsert)if(i>=n.top-r&&i<=n.top+n.height/2)o.position="top",o.action="prepend";else if(i>=n.top+n.height/2&&i<=n.bottom+r)o.position="bottom",o.action="append";else return!1;return o},ld=function(e,t){var s={handle:null,element:null,document,helper:!0},i=this,n={};this.on=function(r,l){n[r]?n[r].push(l):n[r]=[l]},this.dispatch=function(r,l){n[r]&&n[r].forEach(function(c){c.call(this,l)})};var o=function(r){i.settings.document.body.style.scrollBehavior="smooth",i.settings.document.defaultView.scrollTo(0,i.settings.document.defaultView.scrollY+r),i.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=Rt.extend({},s,e),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(r){this.element=ge(r).get(0),this.settings.handle||(this.settings.handle=this.settings.element),this.handle=this.settings.handle,this.handle.attr("draggable","true")},this.setTargets=function(r){this.targets=ge(r)},this.addTarget=function(r){this.targets.push(r)},this.init=function(){this.config(),this.draggable()},this.helper=function(r){return this._helper||(this._helper=ge().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),r==="create"?(this._helper.style.top=r.pageY+"px",this._helper.style.left=r.pageX+"px",this._helper.style.width=i.element.offsetWidth+"px",this._helper.style.height=i.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"):r==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&r&&(this._helper.style.top=r.pageY+"px",this._helper.style.left=r.pageX+"px",this._helper.style.maxWidth=i.settings.document.defaultView.innerWidth-r.pageX-40+"px",this.settings.document.documentElement.classList.add("le-dragging")),this._helper},this.isDragging=!1,this.dropableService=new Zl(t),this.dropPosition=rd,this.draggable=function(){ge(this.settings.target).on("dragleave",function(r){i.dropIndicator.hide()}),ge(this.settings.target).on("dragover",function(r){if(i.target=null,i.action=null,r.target!==i.element||!i.element.contains(r.target)){var l=i.dropableService.getTarget(r.target,i.element);if(l&&l!==i.element){const c=i.dropPosition(r,l);c?(i.target=l.target,i.action=c.action,i.dropIndicator.position(i.target,c.action+"-"+c.position)):i.dropIndicator.hide()}else i.dropIndicator.hide();i.isDragging&&(i.dispatch("dragOver",{element:i.element,event:r}),r.preventDefault())}}).on("drop",function(r){i.isDragging&&(r.preventDefault(),i.target&&i.action&&ge(i.target)[i.action](i.element),i.dropIndicator.hide(),i.dispatch("drop",{element:i.element,event:r})),i.dropIndicator.hide()}),this.handle.on("dragstart",function(r){i.isDragging=!0,i.element.id||(i.element.id="mw-element-"+new Date().getTime()),i.element.classList.add("mw-element-is-dragged"),r.dataTransfer.setData("text",i.element.id),r.dataTransfer.effectAllowed="move",i.helper("create"),i.dispatch("dragStart",{element:i.element,event:r})}).on("drag",function(r){var l=90,c=5;r.clientY<l&&o(-c),r.clientY>innerHeight-(l+(this._helper?this._helper.offsetHeight+10:0))&&o(c),r.dataTransfer.dropEffect="copy",i.dispatch("drag",{element:i.element,event:r}),i.helper(r)}).on("dragend",function(r){i.isDragging=!1,i.element.classList.remove("mw-element-is-dragged"),i.helper("remove"),i.dispatch("dragEnd",{element:i.element,event:r})})},this.init()};var ts;class Gl{constructor(t={}){mt(this,"x",0);mt(this,"y",0);mt(this,"w",0);mt(this,"h",0);mt(this,"listeners",{});dt(this,ts,{});mt(this,"activeHandle",null);mt(this,"handles",{});const s={element:null,document,maxHeight:null,maxWidth:null};this.settings=Object.assign({},s,t),this.element=this.settings.element,this.document=this.settings.document,this.element.classList.add("mw-le-resizable")}on(t,s){J(this,ts)[t]?J(this,ts)[t].push(s):J(this,ts)[t]=[s]}dispatch(t,s){J(this,ts)[t]&&J(this,ts)[t].forEach(i=>{i.call(this,s)})}mouseMoveHandler(t){const s=t.clientX-this.x,i=t.clientY-this.y;let n=this.h+i,o;this.activeHandle===this.handles.left?o=this.w-s:o=this.w+s,this.settings.maxWidth&&(o=Math.min(o,this.settings.maxWidth)),this.settings.maxHeight&&(n=Math.min(n,this.settings.maxHeight)),this.element.style.width=`${o}px`,this.element.style.height=`${n}px`,t.preventDefault(),this.dispatch("resize",{height:this.element.offsetHeight,width:this.element.offsetWidth})}mouseUpHandler(){for(const t in this.listeners)this.document.removeEventListener(t,this.listeners[t]);this.listeners={},this.activeHandle=null,this.dispatch("resizeStop")}mouseDownHandler(t){this.x=t.clientX,this.y=t.clientY;const s=this.document.defaultView.getComputedStyle(this.element);this.w=parseInt(s.width,10),this.h=parseInt(s.height,10),this.listeners.mousemove=i=>this.mouseMoveHandler(i),this.listeners.mouseup=i=>this.mouseUpHandler(i);for(const i in this.listeners)this.document.addEventListener(i,this.listeners[i]);this.dispatch("resizeStart")}build(){const t=this.document.createElement("span"),s=this.document.createElement("span"),i=this.document.createElement("span"),n=this.document.createElement("span");this.handles.top=t,this.handles.right=s,this.handles.bottom=i,this.handles.left=n,t.className="mw-le-resizer mw-le-resizer-t",s.className="mw-le-resizer mw-le-resizer-r",n.className="mw-le-resizer mw-le-resizer-l",i.className="mw-le-resizer mw-le-resizer-b",this.element.appendChild(t),this.element.appendChild(s),this.element.appendChild(i),this.element.appendChild(n)}mount(){if(!this.element)return this;if(this.element.dataset.resizable)return this;this.element.dataset.resizable=!0,this.build();const t=this.element.querySelectorAll(".mw-le-resizer");return Array.from(t).forEach(s=>{s.addEventListener("mousedown",i=>{this.mouseDownHandler(i),this.activeHandle=s})}),this.dispatch("ready",{height:this.element.offsetHeight,width:this.element.offsetWidth}),this}}ts=new WeakMap;globalThis.Resizable=Gl;const _i=function(e){var t={},s=this;this.settings=Rt.extend({},t,e);const i={};this.on=(d,g)=>{i[d]?i[d].push(g):i[d]=[g]},this.dispatch=(d,g)=>{i[d]&&i[d].forEach(v=>{v.call(this,g)})};var n=!0,o=null;this.getTarget=function(){return o},this.isVisible=function(){return n},this.show=function(){n=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){n=!1,this.wrapper.addClass("mw-handle-item-hidden"),this.wrapper.removeClass("mw-handle-active")};let r=null;this.setContent=function(d){r&&r.remove(),r=d,this.wrapper.append(r)},this.initDraggable=function(){this.draggable=new ld({handle:this.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},e),this.draggable.on("dragStart",function(){s.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){s.wrapper.removeClass("mw-handle-item-dragging")})},this.set=function(d){if(!d){o=null;return}var g=yt.offset(d);this.wrapper.css({top:g.top,left:g.left,width:g.width,height:g.height}),this.show(),this.draggable.setElement(d),o!==d&&(o=d,this.dispatch("targetChange",d)),setTimeout(()=>this.wrapper.addClass("mw-handle-active"),1)},this.createHandle=function(){this.settings.handle?this.handle=this.settings.handle:(this.handle=ge({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))};var l=this.settings.document.defaultView.innerWidth,c=this.settings.document.defaultView.innerHeight;this.resizableMaxWidth=function(d){if(typeof d>"u")return l;l=d},this.resizableMaxHeight=function(d){if(typeof d>"u")return c;c=d},this.findClosestElementByClass=function(d,g=200){let v=[],p=d,w=0;for(;p!==document;){const k=p.parentNode.querySelectorAll(".element,.module");if(k.length>0&&(v=[...k].filter(x=>Math.abs(d.getBoundingClientRect().top-x.getBoundingClientRect().top)<=g),v.length>0)||(p=p.parentNode,w++,w>g/10))break}return v},this.resizable=function(){this.settings.resizable&&(this.resizer=new Gl({element:this.wrapper.get(0),document:this.settings.document}),this.resizer.mount(),this.resizer.on("resize",d=>{const g=this.getTarget();g&&(g.style.minHeight=d.height+"px",g.style.width=d.width+"px")}))},this.createWrapper=function(){this.wrapper=ge({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),ge(document.body).on("mouseup touchend",function(){s.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide(),this.resizable()},ad=function(e){e=e||{},this.tools=yt;var t=this,s={exceptions:["mw-handle-item"]};this.settings=Rt.extend({},s,e),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var i=20,n=function(l){return l%5>=2.5?l/5*5+5:l/5*5},o=function(l,c){l=n(l),c=n(c);for(var d=[],g=l-i,v=l+i,p=c-i,w=c+i;g<v;g+=5)for(;p<=w;p+=5)d.push([g,p]);return d},r=function(l,c){l&&l.parentElement&&c.indexOf(l)===-1&&t.body!==l&&c.push(l)};this.fromEvent=function(l){return t.tools.hasAnyOfClassesOnNodeOrParent(l.target,this.settings.exceptions)?[]:(t.document._test||(t.document._test=document.createElement("div"),t.document._test.style.position="absolute",t.document._test.style.left="10px",t.document._test.style.background="red",t.document._test.style.width="10px",t.document._test.style.height="10px",t.document.body.appendChild(t.document._test)),t.document._test.style.top=l.pageY+"px",this.fromPoint(l.pageX,l.pageY))},this.fromPoint=function(l,c){var d=[];t.document.defaultView.frameElement&&(c-=t.document.defaultView.scrollY);var g=t.document.elementFromPoint(l,c);if(!g)return[];r(g,d);var v=o(l,c);return v.forEach(function(p){r(t.document.elementFromPoint(p[0],p[1]),d)}),d}},cd=function(e){return yt.matches(e,'.row,[class*="row-"]')},ud=function(e){return yt.matches(e,'.col,[class*="col-"]')};let Jt;const Kr=function(){return Jt||(Jt=document.createElement("div"),Jt.style.visibility="hidden",Jt.style.position="absolute",Jt.style.width="1px",Jt.style.height="1px",document.body.appendChild(Jt)),Jt},xi={},dd=function(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof xi[t]<"u")return xi[t];var s=document.createElement(t);return Kr().appendChild(s),xi[t]=getComputedStyle(s).display==="block",Kr().removeChild(s),xi[t]},hd=(e,t,s)=>{e=e||"*";for(var i=t.querySelectorAll(e),n=0,o=[];n<i.length;n++)!ud(i[n])&&!cd(i[n])&&!s.elementAnalyzer.isEdit(i[n])&&dd(i[n])&&o.push(i[n]);return o},fd=e=>{const{backgroundImageHolder:t,editClass:s,moduleClass:i,elementClass:n,allowDrop:o}=e.settings,r=e.root;for(var l=r.querySelectorAll("."+s+"."+t+", ."+s+" ."+t+", ."+s+'[style*="background-image"], .'+s+' [style*="background-image"]'),c=r.querySelectorAll("."+i+e.settings.unEditableModules.join(",."+i)),d=r.querySelectorAll("."+s),g=0,v=0,p=0;g<l.length;g++){var w=l[g];e.elementAnalyzer.isInEdit(w)&&(mw.tools.hasClass(w,i)||mw.tools.addClass(w,s),w.style.backgroundImage||(w.style.backgroundImage="none"))}for(;v<c.length;v++)c[g].classList.remove(i);for(;p<d.length;p++){for(var k=hd(":not(."+n+")",d[p],e),x=0,C=d[p].querySelectorAll("."+o),R=0;R<C.length;R++)C[R].classList.add(n);for(;x<k.length;x++)k[x].classList.contains(i)||e.elementAnalyzer.isInEdit(k[x])&&k[x].classList.add(n)}},md=function(e){this.handles=e,this.dragging=!1;var t=this;this.get=function(s){return this.handles[s]},this.set=function(s,i){this.get(s).set(i)},this.hide=function(s){s&&this.handles[s]?this.handles[s].hide():this.each(function(i,n){n.hide()})},this.hideAllBut=function(s){this.each(function(i,n){i!==s&&n.hide()})},this.show=function(s){s&&this.handles[s]?this.handles[s].show():this.each(function(i,n){n.show()})},this.each=function(s){if(s){var i;for(i in this.handles)s.call(t,i,this.handles[i])}},this.targetIsSelected=function(s,i){if(s){s=s.target||s;var n;for(n in this.handles){if(i&&i===this.handles[n])continue;const o=this.handles[n].getTarget();if(o&&o===s)return!0}return!1}},this.targetIsOrInsideHandle=function(s){if(s){s=s.target||s;var i;for(i in this.handles)if(this.handles[i].wrapper.get(0)===s||this.handles[i].wrapper.get(0).contains(s))return!0;return!1}},this.init=function(){this.each(function(s,i){i.draggable.on("dragStart",function(){t.dragging=!0,t.hideAllBut(s)}),i.draggable.on("dragEnd",function(){t.dragging=!1,i.show()})})},this.init()},pd=function(e){e=e||{};const t={template:"default"};let s={};this.settings=Rt.extend({},t,e),this._indicator=null;const i={};this.on=function(c,d){i[c]?i[c].push(d):i[c]=[d]},this.dispatch=function(c,d){i[c]&&i[c].forEach(function(g){g.call(this,d)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,s={})},this.show=function(){console.log(this.visible),this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const n=["before-top","prepend-top","after-bottom","append-bottom"],o="mw-drop-indicator-position-",r=n.map(function(c){return o+c});let l=null;this.position=function(c,d){if(!(!c||!d)&&!(s.target===c&&s.position===d)){s.target=c,s.position=d,l!==d&&(this._indicator.removeClass(r),l=d,this._indicator.addClass(o+d));var g=yt.offset(c);this._indicator.css({height:g.height,left:g.left,top:g.top,width:g.width}),this.show()}},this.make=function(){this._indicator=ge(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},gd=(e,t,s)=>{!e||!t||(e=e.isMWElement?e.get(0):e,e.dataset.tooltip=t,e.title=t,e.dataset.tooltipposition=s||"top-center")},Is=function(e){this.options=e||{};var t=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=ge({props:{className:"mw-le-handle-menu",id:t.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=ge({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var s,i,n,o=function(){s=ge({props:{className:"mw-le-handle-menu-title"}}),i=ge({props:{className:"mw-le-handle-menu-title-text"}}),n=ge({props:{className:"mw-le-handle-menu-title-icon"}}),s.append(i),s.append(n),t.root.prepend(s),t.title=s},r=null;this.getTarget=function(){return r},this.setTarget=function(l){r=l;for(var c=0;c<this.buttons.length;c++)this.buttons[c].config.onTarget&&this.buttons[c].config.onTarget(l,this.buttons[c].button.get(0),t.options.rootScope)},this.setTitle=function(l,c){i.html(l||""),n.html(c||"")},this.buttons=[],this.buildButtons=function(l,c){c=c||this.buttonsHolder,l=l||this.options.buttons,l.forEach(function(d){c.append(t.button(d))})},this.button=function(l){var c=ge({props:{className:"mw-le-handle-menu-button"+(l.className?" "+l.className:"")}}),d={props:{className:"mw-le-handle-menu-button-content"}},g=ge(d);if(l.title&&gd(g,l.title),l.icon){var v=ge({props:{className:"mw-le-handle-menu-button-icon",innerHTML:l.icon}});g.append(v)}if(l.text){var p=ge({props:{className:"mw-le-handle-menu-button-text",innerHTML:l.text}});g.append(p)}if(c.append(g),this.buttons.push({button:c,config:l}),l.menu){var w=ge({props:{className:"mw-le-handle-menu-button-sub-menu"}});c.append(w),t.buildButtons(l.menu,w),c.on("click",function(){this.classList.toggle("sub-menu-active")})}else typeof l.action=="function"&&c.on("click",function(){l.action(t.getTarget(),c.get(0),{dialog:t.options.rootScope.dialog,tooltip:t.options.rootScope.tooltip})});return c},this.init=function(){this.create(),o(),this.setTitle(t.options.title,t.options.icon),this.buildButtons(),this.hide()},this.init()},vd=function(e){this.root=ge({props:{id:"mw-handle-item-element-root"}}),this.menu=new Is({id:"mw-handle-item-element-menu",title:"Element",buttons:[{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(t,s){},action:function(t){e.dialog({})}},{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(t){}}]}),this.menu.show(),this.root.append(this.menu.root)},bd=function(e){this.root=ge({props:{id:"mw-handle-item-module-root",contentEditable:!1}});var t=new Is({id:"mw-handle-item-element-menu-default",title:"Module",rootScope:e,buttons:[{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',action:()=>{const s=mw.app.get("liveEdit").handles.get("module").getTarget();mw.app.editor.dispatch("onModuleSettingsRequest",s);var i=s.dataset.type||s.getAttribute("type");i=i.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+i,s)}}]});this.menu=new Is({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,buttons:[]}),this.menu.show(),t.show(),this.root.append(this.menu.root),this.root.append(t.root)},yd=(e,t)=>{const s=ge({props:{className:"le-dialog-footer"}}),i=ge({props:{className:"le-btn le-btn-primary le-dialog-footer-ok",innerHTML:e||"OK"}}),n=ge({props:{className:"le-btn le-dialog-footer-cancel"}});return s.append(n),s.append(i),{ok:i,cancel:n,footer:s}};var ss,ui,ao;class Ql{constructor(t){dt(this,ui);dt(this,ss,{});t=t||{};const s={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},s,t),this.build(),setTimeout(i=>this.open())}on(t,s){J(this,ss)[t]?J(this,ss)[t].push(s):J(this,ss)[t]=[s]}dispatch(t,s){J(this,ss)[t]&&J(this,ss)[t].forEach(i=>{i.call(this,s)})}build(){this.root=ge({props:{className:`le-dialog ${typeof this.settings.position=="string"?this.settings.position:""}`}});var t=ge({props:{className:"le-dialog-close"}});t.on("click",()=>{this.remove()}),this.container=ge({props:{className:"le-dialog-container"},content:this.settings.content}),this.root.append(t),this.root.append(this.container),this.settings.footer&&this.root.append(this.settings.footer.root||this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this.settings.closeOnEscape&&this.settings.document.addEventListener("keydown",_t(this,ui,ao)),this.settings.overlay&&this.overlay()}open(){if(this.settings.position.nodeName&&this.settings.position.ownerDocument===this.settings.document){var t=this.settings.position;t.ownerDocument;var s=t.ownerDocument.defaultView,i=t.getBoundingClientRect(),n=i.top+s.scrollY,o=i.left+t.offsetWidth+s.scrollX,r=this.root.get(0);n+r.offsetHeight>s.innerHeight+s.scrollY&&(n-=n+r.offsetHeight-(s.innerHeight+s.scrollY)),o+r.offsetWidth>s.innerWidth&&(o-=o+r.offsetWidth-s.innerWidth),this.root.css({top:n,left:o,position:this.settings.mode})}this.root.addClass("le-dialog-opened")}remove(){this.root.on("transitionend",()=>{this.root.remove(),this.overlay&&this.overlay.remove()}),this.root.removeClass("le-dialog-opened"),this.settings.closeOnEscape&&this.settings.document.removeEventListener("keydown",_t(this,ui,ao)),this.dispatch("close")}overlay(){this.overlay=ge({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}ss=new WeakMap,ui=new WeakSet,ao=function(t){(t.key==="Escape"||t.keyCode===27)&&this.remove()};const wd=function(e,t){const s=yd(),i=new Ql({content:e,footer:s,position:"centered"});return s.cancel.on("click",function(){i.remove()}),s.ok.on("click",function(){t&&t.call(),i.remove()}),i},kd=function(e){this.root=ge({props:{id:"mw-handle-item-layout-root"}});const t={};this.on=(s,i)=>{t[s]?t[s].push(i):t[s]=[i]},this.dispatch=(s,i)=>{t[s]&&t[s].forEach(n=>{n.call(this,i)})},this.menu=new Is({id:"mw-handle-item-layout-menu",title:e.lang("Layout"),rootScope:e,buttons:[{title:e.lang("Settings"),text:"",icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 13.3 15.9" xml:space="preserve"><path d="M8.2,2.4L11,5.1l-8.2,8.2H0v-2.8L8.2,2.4z M11.8,4.3L9,1.6l1.4-1.4C10.5,0.1,10.7,0,10.9,0c0.2,0,0.4,0.1,0.5,0.2l1.7,1.7c0.1,0.1,0.2,0.3,0.2,0.5S13.3,2.8,13.1,3L11.8,4.3z"/><rect y="14.5" width="12" height="1.4"/></svg>',className:"mw-handle-insert-button",menu:[{title:e.lang("Add something"),text:e.lang("Add something"),icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" version="1.1" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button"},{title:e.lang("Settings1212"),text:"Do alert",className:"mw-handle-insert-button"}]},{title:e.lang("Clone"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>',className:"mw-handle-insert-button",action:function(s,i,n){var o=document.createElement("div");o.innerHTML=s.outerHTML,ge("[id]",o).each(function(){this.id="le-id-"+new Date().getTime()}),ge(s).after(o.innerHTML);var r=s.nextElementSibling;mw.reload_module(r,function(){n.statemanager.record({target:mw.tools.firstParentWithClass(s,"edit"),value:parent.innerHTML})}),r.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})}},{title:e.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(s,i,n){s.nextElementSibling===null?i.style.display="none":i.style.display=""},action:function(s,i,n){n.handles.get("layout").hide();var o=s.nextElementSibling;if(o){var r=s.getBoundingClientRect(),l=o.getBoundingClientRect(),c=0;r.top<l.top&&(c=-(r.top-l.top)),s.classList.add("mw-le-target-to-animate"),o.classList.add("mw-le-target-to-animate"),s.style.transform="translateY("+c+"px)",o.style.transform="translateY("+-c+"px)",setTimeout(function(){o.parentNode.insertBefore(s,o.nextSibling),s.classList.remove("mw-le-target-to-animate"),o.classList.remove("mw-le-target-to-animate"),s.style.transform="",o.style.transform=""},300)}}},{title:e.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(s,i,n){s.previousElementSibling===null?i.style.display="none":i.style.display=""},action:function(s,i,n){n.handles.get("layout").hide();var o=s.previousElementSibling;if(o){var r=s.getBoundingClientRect(),l=o.getBoundingClientRect(),c=0;r.top>l.top&&(c=-(r.top-l.top)),s.classList.add("mw-le-target-to-animate"),o.classList.add("mw-le-target-to-animate"),s.style.transform="translateY("+c+"px)",o.style.transform="translateY("+-c+"px)",setTimeout(function(){o.parentNode.insertBefore(s,o),s.classList.remove("mw-le-target-to-animate"),o.classList.remove("mw-le-target-to-animate"),s.style.transform="",o.style.transform=""},300)}}},{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path  d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(s,i,n){wd("Are you sure",function(){s.remove()})}}]}),this.addButtons=function(){var s="Add Layout",i=n=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+n.charAt(0).toUpperCase()+n.slice(1))};this.plusTop=ge({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:e.lang(s)}}),this.plusBottom=ge({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:e.lang(s)}}),this.plusTop.on("click",function(){i("top")}),this.plusBottom.on("click",function(){i("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.menu.show(),this.addButtons(),this.root.append(this.menu.root)},Xr={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},_d=(e,t)=>((!t||!Xr[t])&&(t="en"),Xr[t][e]||e),xd=function(e){this.root=ge({props:{id:"mw-handle-interaction-item-element-root"}}),this.menu=new Is({id:"mw-handle-item-element-menu",title:"Element",buttons:[]}),this.menu.show(),this.root.append(this.menu.root)};class ea{constructor(t){const s=this,i={};this.on=(w,k)=>{i[w]?i[w].push(k):i[w]=[k]},this.dispatch=(w,k)=>{i[w]&&i[w].forEach(x=>{x.call(this,k)})},this.paused=!1;var n={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=Rt.extend({},n,t),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(w){return _d(w,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new Zl(this.settings),this.dropIndicator=new pd(this.settings);const o=new vd(this),r=new bd(this),l=new kd(this);this.elementHandleContent=o,this.moduleHandleContent=r,this.layoutHandleContent=l,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.dialog=function(w){w||(w={});var k={document:window.top.document,position:r.menu.getTarget(),mode:"absolute"};s.pause();const x=new Ql(Rt.extend({},k,w));return x.on("close",function(){s.play()}),x};var c=this.elementHandle=new _i({...this.settings,dropIndicator:this.dropIndicator,content:o.root,handle:o.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});c.on("targetChange",function(w){o.menu.setTarget(w)}),this.moduleHandle=new _i({...this.settings,dropIndicator:this.dropIndicator,content:r.root,handle:r.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});var d=this.moduleHandle;this.getModuleQuickSettings=w=>new Promise(k=>{k(mw.quickSettings[w]),this.dispatch("moduleQuickSettings",{module:w})}),d.on("targetChange",function(w){s.getModuleQuickSettings(w.dataset.type).then(function(k){r.menu.root.remove(),r.menu=new Is({id:"mw-handle-item-element-menu",title:w.dataset.type,rootScope:s,buttons:k?k.mainMenu||[]:[],data:{target:w}}),r.menu.setTarget(w),r.menu.show(),r.root.append(r.menu.root)})}),this.layoutHandle=new _i({...this.settings,dropIndicator:this.dropIndicator,content:l.root,handle:l.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var g=this.layoutHandle,v=s.lang("Layout");l.menu.setTitle(v),g.on("targetChange",function(w){l.menu.setTarget(w),l.menu.setTitle(v),s.elementAnalyzer.isEditOrInEdit(w)?(l.plusTop.show(),l.plusBottom.show()):(l.plusTop.hide(),l.plusBottom.hide())}),l.handle=g,r.handle=d,o.handle=c;const p=new xd;this.interactionHandle=new _i({...this.settings,content:p.root,document:this.settings.document,resizable:!1,className:"mw-handle-item-interaction-handle"}),this.interactionHandle.menu=p.menu,this.handles=new md({element:c,module:d,layout:g,interactionHandle:this.interactionHandle}),this.observe=new ad(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}init(){this.settings.mode==="auto"&&fd(this);const t=i=>{if(this.handles.targetIsOrInsideHandle(i))return;const n=this.observe.fromEvent(i),o=n[0];if(this.handles.get("element").set(null),this.handles.get("module").set(null),this.handles.hide(),o){const r=this.elementAnalyzer.getType(o);r&&r!=="edit"&&(this.handles.set(r,n[0]),r==="element"?this.handles.hide("module"):r==="module"?this.handles.hide("element"):r==="layout"?this.handles.set("layout",layout):this.handles.hide())}else{const r=yt.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);r&&this.handles.set("layout",r)}};let s;s="mousedown touchstart",ge(this.root).on("mousemove",i=>{if(this.handles.targetIsOrInsideHandle(i))return;const n=this.observe.fromEvent(i),o=yt.firstParentOrCurrentWithAnyOfClasses(n[0],["element","module"]),r=yt.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);let l=!1;if(r){const d=this.handles.get("element").getTarget(),g=this.handles.get("module").getTarget();r.contains(d)&&(l=!0),r.contains(g)&&(l=!0),l?this.handles.hide("layout"):this.handles.set("layout",r)}if(o&&!this.handles.targetIsSelected(o,this.interactionHandle)&&!o.classList.contains("module-layouts")){var c="";o.dataset.mwTitle?c=o.dataset.mwTitle:o.dataset.type?c=o.dataset.type:o.nodeName==="P"?c=this.lang("Paragraph"):/(H[1-6])/.test(o.nodeName)?c=this.lang("Title")+" "+o.nodeName.replace(/^\D+/g,""):o.nodeName==="IMG"||o.nodeName==="IMAGE"?c=this.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(o.nodeName)?c=this.lang("Title "+o.nodeName.replace("H","")):["DIV","MAIN","SECTION"].includes(o.nodeName)?c=this.lang("Block"):c=this.lang("Text"),this.interactionHandle.menu.setTitle(c),this.interactionHandle.show(),this.interactionHandle.set(o)}else this.interactionHandle.hide()}),ge(this.root).on(s,i=>{this.paused||t(i)})}}globalThis.LiveEdit=ea;const Cd=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:inline-block}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:9;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:none}.mw-handle-item.mw-le-resizable{position:absolute}.mw-handle-item.mw-handle-item-interaction-handle{pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;background-color:#7775757d;pointer-events:none}.mw-le-handle-menu{position:absolute;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;border-radius:7px;border:1px solid transparent;padding:3px 12px;display:inline-flex;align-items:center;background-color:#fff;pointer-events:all;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;position:absolute;top:-40px;left:-3px;transition:.2s;opacity:0;transform:translateY(10px)}.mw-le-handle-menu .mw-le-handle-menu-buttons:empty{display:none!important}.mw-le-handle-menu *{vertical-align:middle}.mw-handle-item.mw-handle-active .mw-le-handle-menu .mw-le-handle-menu-buttons{opacity:1;transform:translateY(0)}#mw-handle-item-element-menu{top:-22px;left:-3px}#mw-handle-item-layout-menu{top:5px;right:5px;left:auto}#mw-handle-item-layout-menu .mw-le-handle-menu-buttons{left:auto;right:5px;top:5px}#mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#000}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#000}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:none;align-items:center;justify-content:center;padding:0 5px;height:20px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:grab;background-color:#0078ff;color:#fff}.mw-handle-item-interaction-handle .mw-le-handle-menu-title{display:inline-flex}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#0078ff;color:#fff;border-radius:7px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#016ce6}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}.mw-handle-item.mw-le-resizable .mw-le-resizer:before,.mw-handle-item.mw-le-resizable .mw-le-resizer:after{position:absolute;width:9px;height:9px;background-color:#fff;border:2px solid #2a84fb;content:""}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before{top:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{top:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{left:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before{bottom:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{bottom:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{top:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before{left:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{left:calc(50% - 4px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before{right:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{right:calc(50% - 5px)}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizer{position:absolute;pointer-events:all}.mw-le-resizer-r{cursor:e-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-l{cursor:e-resize;height:100%;left:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:n-resize;height:5px;left:0;width:100%}.mw-le-resizer-t{top:0;cursor:n-resize;height:5px;left:0;width:100%}mw-le-element{display:block;line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;font-family:Verdana,sans-serif;box-sizing:border-box}.edit,.element,.module{margin-top:20px;padding-top:20px;min-height:100px}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}
`;class Sd extends Wt{constructor(){super()}onRegister(){mw.app.editor.on("onModuleSettingsChanged",t=>{mw.app.canvas.getWindow().mw.reload_module("#"+t.moduleId)}),mw.app.editor.on("onModuleSettingsRequest",t=>{var s=t.id,i=t.getAttribute("data-type");mw.dialogIframe({url:route("live_edit.module_settings")+"?id="+s+"&type="+i,width:300,height:500,draggable:!0,template:"mw_modal_simple",title:"Module settings",id:"btn-quick-setting-dialog-"+s})})}}let Ld=class extends Wt{reloadStylesheet(t,s){Ss.get(mw.settings.api_url+"template/delete_compiled_css?path="+t+"&option_group="+s).then(function(i){mw.top().notification.success("Reloading styles",7e3);var n=mw.app.canvas.getWindow(),o=n.document.getElementById("theme-style");o&&o.setAttribute("href",i.data.new_file+"&t="+mw.random())})}};const Ed=()=>{mw.app.get("canvas").getFrame().parentElement;const t=mw.app.get("canvas").getDocument(),s=t.createElement("style");s.textContent=Cd,t.head.prepend(s);const i=new ea({root:t.body,strict:!1,mode:"auto",document:t});i.on("insertLayoutRequest",function(){mw.app.editor.dispatch("insertLayoutRequest",mw.app.get("liveEdit").handles.get("layout").getTarget())}),mw.app.call("onLiveEditReady"),mw.app.register("liveEdit",i),mw.app.register("state",mw.liveEditState),mw.app.register("editor",id),mw.app.register("moduleSettings",Sd),mw.app.register("templateSettings",Ld)};var Pt,is,_s,di,co,hi,uo,Gi,sa;class ta{constructor(t={}){dt(this,di);dt(this,hi);dt(this,Gi);dt(this,Pt,null);dt(this,is,{});mt(this,"selectedCategory","");dt(this,_s,[]);mt(this,"root",null);const s={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},s,t),this.document=this.settings.document}on(t,s){J(this,is)[t]?J(this,is)[t].push(s):J(this,is)[t]=[s]}dispatch(t,s){J(this,is)[t]&&J(this,is)[t].forEach(i=>{i.call(this,s)})}getData(){return J(this,Pt)}setData(t,s=!0){$n(this,Pt,t);let i=0,n=J(this,Pt).length;for(;i<n;i++)typeof J(this,Pt)[i].categories=="string"&&(J(this,Pt)[i].categories=J(this,Pt)[i].categories.split(",").map(o=>o.trim()));s&&this.dispatch("dataChanged",J(this,Pt))}prepareCategories(){const t=[],s=this.getData();let i=0,n=s.length;for(;i<n;i++){let r=s[i].categories||"",l=0,c=r.length;for(;l<c;l++){const d=r[l].trim();t.indexOf(d)===-1&&t.push(d)}}t.sort(),this.categories=t}createCategoriesMenu(){const t=this.document.createElement("ul");this.prepareCategories(),t.className="modules-list-categories",t.innerHTML=this.categories.map(s=>`<li data-category="${s}">${s}</li>`).join(""),t.innerHTML=`<li data-category="">All categories</li> ${t.innerHTML}`,t.addEventListener("click",s=>{s.target.nodeName==="LI"&&this.selectCategory(s.target.dataset.category)}),this.categoriesNavigation=t,this.rootShadow.appendChild(t),this.on("categorySelect",s=>{const i=t.querySelectorAll("[data-category]");for(const n of i)n.classList[n.dataset.category===s?"add":"remove"]("active")})}selectCategory(t=""){this.selectedCategory=t,this.search(t),this.dispatch("categorySelect",t)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let t=document.createElement("style");t.textContent=this.settings.css,this.rootShadow.appendChild(t)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let s=0,i=t.length;const n={miscellaneous:_t(this,hi,uo).call(this,"miscellaneous")};for(;s<i;s++)(t[s].categories||["miscellaneous"]).forEach(r=>{n[r]||(n[r]=_t(this,hi,uo).call(this,r));const l=_t(this,di,co).call(this,t[s]);J(this,_s).push(l),n[r].appendChild(l),n[r].__$hasNodes=!0});for(const o in n)n[o].__$hasNodes&&this.modulesList.appendChild(n[o]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let s=0,i=t.length;for(;s<i;s++){const n=_t(this,di,co).call(this,t[s]);J(this,_s).push(n),this.modulesList.appendChild(n)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(t){t.nodeName&&(t.style.display="none")}showItem(t){t.nodeName&&(t.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",t=>this.search(void 0,this.searchField.value)),this.on("categorySelect",t=>{this.searchField.value=""})}async search(t="",s=""){if(this.settings.searchMode==="local")return _t(this,Gi,sa).call(this,t,s)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(t=>{t(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(t=>{t(this)})}}Pt=new WeakMap,is=new WeakMap,_s=new WeakMap,di=new WeakSet,co=function(t){t.locked=t.description.includes("a");const s=this.document.createElement("div");return s.className="modules-list-block-item modules-list-block-item-is-locked-"+t.locked,s.__$data=t,s.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${t.icon||t.screenshot||t.image})"></div>
            <div class="modules-list-block-item-title">${t.name||t.title}</div>
            <div class="modules-list-block-item-description">${t.description}</div>
            ${t.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,s.addEventListener("click",i=>{i.stopPropagation(),s.__$data.locked?this.dispatch("lockedModuleSelected",{data:t,element:s}):this.dispatch("moduleSelected",{data:t,element:s})}),s.$data=t,s},hi=new WeakSet,uo=function(t){const s=this.document.createElement("div");return s.className="modules-list-block-category-section",s.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+t+"</h5></div>",s.__$hasNodes=!1,s},Gi=new WeakSet,sa=async function(t,s){return t&&(t=t.trim().toLowerCase()),s&&(s=s.trim().toLowerCase()),new Promise(i=>{let n=0,o=J(this,_s).length,r=0;for(;n<o;n++){const l=J(this,_s)[n],c=l.$data;if(t&&c.categories.indexOf(t)===-1){this.hideItem(l);continue}if(s&&(c.name||c.title).toLowerCase().indexOf(s)===-1){this.hideItem(l);continue}this.showItem(l),r++}console.log(s,t),this.modulesListNoResultsNode.style.display=r===0?"":"none",i()})};const $i=[],ia=function(e){$i.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+e}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",t=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(e){(e.key==="Escape"||e.keyCode===27)&&$i.length>0&&($i[0].remove(),$i.splice(0,1))});var ho,Jr=function(e){var t=new ta({data:ho});t.create().then(function(){var s=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),i=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),n=mw.element({props:{className:"mw-le-layouts-dialog-col"}});s.append(i),s.append(n),mw.element(t.root).append(s),i.append(t.searchBlock);var o=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});i.append(o),i.append(t.categoriesNavigation),n.append(t.modulesList),e.append(t.root)})};const Md=()=>{var e=new ia("mw-le-layouts-dialog"),t=e.dialog;if(ho){Jr(t);return}mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(s){return s.json()}).then(function(s){ho=s,Jr(t),mw.spinner({element:t.get(0),decorate:!0}).remove()})};var fo,Zr=function(e){var t=new ta({data:fo});t.createCategorized().then(function(){e.append(t.root)})};const Ad=()=>{var e=new ia("mw-le-modules-dialog"),t=e.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var s=mw.$(this).attr("data-module-name"),i={class:this.className};s==="layout"&&(i.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,s,i,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),fo?Zr(t):(mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(s){return s.json()}).then(function(s){fo=s,Zr(t),mw.spinner({element:t.get(0),decorate:!0}).remove()}))},Td={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return Ad()},insertLayout:function(){return Md()}},Nd={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await Ss.get(route("api.module.list")+"?layout_type=module").then(e=>{this.modulesListData=e.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(e){if(this.modulesSkinsData[e])return this.modulesSkinsData[e];if(await Ss.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.modulesSkinsData[e]=t.data}),this.modulesSkinsData[e])return this.modulesSkinsData[e]}},Pd={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await Ss.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(e=>{this.layoutsListData=e.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var e="layouts";if(this.layoutSkinsData[e])return this.layoutSkinsData[e];if(await Ss.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.layoutSkinsData[e]=t.data}),this.layoutSkinsData[e])return this.layoutSkinsData[e]}};class Od extends Wt{constructor(){super()}onRegister(){document.addEventListener("keydown",t=>{(t.key==="Enter"||t.keyCode===13)&&this.dispatch("enter",t),(t.key==="Escape"||t.keyCode===27)&&this.dispatch("escape",t),(t.key==="Backspace"||t.keyCode===8)&&this.dispatch("backspace",t),(t.key==="Delete"||t.keyCode===46)&&this.dispatch("delete",t),t.ctrlKey&&t.keyCode===83&&this.dispatch("ctrl+s",t),t.ctrlKey&&t.keyCode===90&&this.dispatch("ctrl+z",t),t.ctrlKey&&t.keyCode===89&&this.dispatch("ctrl+y",t)})}}mw.app=new Hc;const na=new Ic,$d=document.getElementById("live-edit-frame-holder");mw.app.register("canvas",na);mw.app.register("commands",Td);mw.app.register("modules",Nd);mw.app.register("layouts",Pd);mw.app.register("keyboard",Od);na.mount($d);mw.app.canvas.on("liveEditBeforeLoaded",function(){mw.app.dispatch("init")});mw.app.canvas.on("liveEditCanvasLoaded",()=>{mw.app.dispatch("ready")});function Oo(e,t){const s=Object.create(null),i=e.split(",");for(let n=0;n<i.length;n++)s[i[n]]=!0;return t?n=>!!s[n.toLowerCase()]:n=>!!s[n]}function Et(e){if(te(e)){const t={};for(let s=0;s<e.length;s++){const i=e[s],n=Xe(i)?Dd(i):Et(i);if(n)for(const o in n)t[o]=n[o]}return t}else{if(Xe(e))return e;if(Ae(e))return e}}const Hd=/;(?![^(]*\))/g,Rd=/:([^]+)/,Id=/\/\*.*?\*\//gs;function Dd(e){const t={};return e.replace(Id,"").split(Hd).forEach(s=>{if(s){const i=s.split(Rd);i.length>1&&(t[i[0].trim()]=i[1].trim())}}),t}function ct(e){let t="";if(Xe(e))t=e;else if(te(e))for(let s=0;s<e.length;s++){const i=ct(e[s]);i&&(t+=i+" ")}else if(Ae(e))for(const s in e)e[s]&&(t+=s+" ");return t.trim()}const Fd="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Bd=Oo(Fd);function oa(e){return!!e||e===""}function zd(e,t){if(e.length!==t.length)return!1;let s=!0;for(let i=0;s&&i<e.length;i++)s=sn(e[i],t[i]);return s}function sn(e,t){if(e===t)return!0;let s=Gr(e),i=Gr(t);if(s||i)return s&&i?e.getTime()===t.getTime():!1;if(s=ii(e),i=ii(t),s||i)return e===t;if(s=te(e),i=te(t),s||i)return s&&i?zd(e,t):!1;if(s=Ae(e),i=Ae(t),s||i){if(!s||!i)return!1;const n=Object.keys(e).length,o=Object.keys(t).length;if(n!==o)return!1;for(const r in e){const l=e.hasOwnProperty(r),c=t.hasOwnProperty(r);if(l&&!c||!l&&c||!sn(e[r],t[r]))return!1}}return String(e)===String(t)}function Vd(e,t){return e.findIndex(s=>sn(s,t))}const We=e=>Xe(e)?e:e==null?"":te(e)||Ae(e)&&(e.toString===aa||!ce(e.toString))?JSON.stringify(e,ra,2):String(e),ra=(e,t)=>t&&t.__v_isRef?ra(e,t.value):Ps(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((s,[i,n])=>(s[`${i} =>`]=n,s),{})}:on(t)?{[`Set(${t.size})`]:[...t.values()]}:Ae(t)&&!te(t)&&!ca(t)?String(t):t,He={},Ns=[],Mt=()=>{},jd=()=>!1,Ud=/^on[^a-z]/,nn=e=>Ud.test(e),$o=e=>e.startsWith("onUpdate:"),nt=Object.assign,Ho=(e,t)=>{const s=e.indexOf(t);s>-1&&e.splice(s,1)},qd=Object.prototype.hasOwnProperty,ye=(e,t)=>qd.call(e,t),te=Array.isArray,Ps=e=>mi(e)==="[object Map]",on=e=>mi(e)==="[object Set]",Gr=e=>mi(e)==="[object Date]",ce=e=>typeof e=="function",Xe=e=>typeof e=="string",ii=e=>typeof e=="symbol",Ae=e=>e!==null&&typeof e=="object",la=e=>Ae(e)&&ce(e.then)&&ce(e.catch),aa=Object.prototype.toString,mi=e=>aa.call(e),Wd=e=>mi(e).slice(8,-1),ca=e=>mi(e)==="[object Object]",Ro=e=>Xe(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Hi=Oo(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),rn=e=>{const t=Object.create(null);return s=>t[s]||(t[s]=e(s))},Yd=/-(\w)/g,It=rn(e=>e.replace(Yd,(t,s)=>s?s.toUpperCase():"")),Kd=/\B([A-Z])/g,Bs=rn(e=>e.replace(Kd,"-$1").toLowerCase()),ln=rn(e=>e.charAt(0).toUpperCase()+e.slice(1)),Zn=rn(e=>e?`on${ln(e)}`:""),ni=(e,t)=>!Object.is(e,t),Ri=(e,t)=>{for(let s=0;s<e.length;s++)e[s](t)},zi=(e,t,s)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:s})},Vi=e=>{const t=parseFloat(e);return isNaN(t)?e:t},Xd=e=>{const t=Xe(e)?Number(e):NaN;return isNaN(t)?e:t};let Qr;const Jd=()=>Qr||(Qr=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});let xt;class Zd{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this.parent=xt,!t&&xt&&(this.index=(xt.scopes||(xt.scopes=[])).push(this)-1)}get active(){return this._active}run(t){if(this._active){const s=xt;try{return xt=this,t()}finally{xt=s}}}on(){xt=this}off(){xt=this.parent}stop(t){if(this._active){let s,i;for(s=0,i=this.effects.length;s<i;s++)this.effects[s].stop();for(s=0,i=this.cleanups.length;s<i;s++)this.cleanups[s]();if(this.scopes)for(s=0,i=this.scopes.length;s<i;s++)this.scopes[s].stop(!0);if(!this.detached&&this.parent&&!t){const n=this.parent.scopes.pop();n&&n!==this&&(this.parent.scopes[this.index]=n,n.index=this.index)}this.parent=void 0,this._active=!1}}}function Gd(e,t=xt){t&&t.active&&t.effects.push(e)}function Qd(){return xt}const Io=e=>{const t=new Set(e);return t.w=0,t.n=0,t},ua=e=>(e.w&rs)>0,da=e=>(e.n&rs)>0,eh=({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=rs},th=e=>{const{deps:t}=e;if(t.length){let s=0;for(let i=0;i<t.length;i++){const n=t[i];ua(n)&&!da(n)?n.delete(e):t[s++]=n,n.w&=~rs,n.n&=~rs}t.length=s}},ji=new WeakMap;let Js=0,rs=1;const mo=30;let Ct;const xs=Symbol(""),po=Symbol("");class Do{constructor(t,s=null,i){this.fn=t,this.scheduler=s,this.active=!0,this.deps=[],this.parent=void 0,Gd(this,i)}run(){if(!this.active)return this.fn();let t=Ct,s=ns;for(;t;){if(t===this)return;t=t.parent}try{return this.parent=Ct,Ct=this,ns=!0,rs=1<<++Js,Js<=mo?eh(this):el(this),this.fn()}finally{Js<=mo&&th(this),rs=1<<--Js,Ct=this.parent,ns=s,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ct===this?this.deferStop=!0:this.active&&(el(this),this.onStop&&this.onStop(),this.active=!1)}}function el(e){const{deps:t}=e;if(t.length){for(let s=0;s<t.length;s++)t[s].delete(e);t.length=0}}let ns=!0;const ha=[];function zs(){ha.push(ns),ns=!1}function Vs(){const e=ha.pop();ns=e===void 0?!0:e}function ft(e,t,s){if(ns&&Ct){let i=ji.get(e);i||ji.set(e,i=new Map);let n=i.get(s);n||i.set(s,n=Io()),fa(n)}}function fa(e,t){let s=!1;Js<=mo?da(e)||(e.n|=rs,s=!ua(e)):s=!e.has(Ct),s&&(e.add(Ct),Ct.deps.push(e))}function qt(e,t,s,i,n,o){const r=ji.get(e);if(!r)return;let l=[];if(t==="clear")l=[...r.values()];else if(s==="length"&&te(e)){const c=Number(i);r.forEach((d,g)=>{(g==="length"||g>=c)&&l.push(d)})}else switch(s!==void 0&&l.push(r.get(s)),t){case"add":te(e)?Ro(s)&&l.push(r.get("length")):(l.push(r.get(xs)),Ps(e)&&l.push(r.get(po)));break;case"delete":te(e)||(l.push(r.get(xs)),Ps(e)&&l.push(r.get(po)));break;case"set":Ps(e)&&l.push(r.get(xs));break}if(l.length===1)l[0]&&go(l[0]);else{const c=[];for(const d of l)d&&c.push(...d);go(Io(c))}}function go(e,t){const s=te(e)?e:[...e];for(const i of s)i.computed&&tl(i);for(const i of s)i.computed||tl(i)}function tl(e,t){(e!==Ct||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}function sh(e,t){var s;return(s=ji.get(e))===null||s===void 0?void 0:s.get(t)}const ih=Oo("__proto__,__v_isRef,__isVue"),ma=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(ii)),nh=Fo(),oh=Fo(!1,!0),rh=Fo(!0),sl=lh();function lh(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...s){const i=we(this);for(let o=0,r=this.length;o<r;o++)ft(i,"get",o+"");const n=i[t](...s);return n===-1||n===!1?i[t](...s.map(we)):n}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...s){zs();const i=we(this)[t].apply(this,s);return Vs(),i}}),e}function ah(e){const t=we(this);return ft(t,"has",e),t.hasOwnProperty(e)}function Fo(e=!1,t=!1){return function(i,n,o){if(n==="__v_isReactive")return!e;if(n==="__v_isReadonly")return e;if(n==="__v_isShallow")return t;if(n==="__v_raw"&&o===(e?t?Ch:ya:t?ba:va).get(i))return i;const r=te(i);if(!e){if(r&&ye(sl,n))return Reflect.get(sl,n,o);if(n==="hasOwnProperty")return ah}const l=Reflect.get(i,n,o);return(ii(n)?ma.has(n):ih(n))||(e||ft(i,"get",n),t)?l:st(l)?r&&Ro(n)?l:l.value:Ae(l)?e?wa(l):Vo(l):l}}const ch=pa(),uh=pa(!0);function pa(e=!1){return function(s,i,n,o){let r=s[i];if(Ds(r)&&st(r)&&!st(n))return!1;if(!e&&(!Ui(n)&&!Ds(n)&&(r=we(r),n=we(n)),!te(s)&&st(r)&&!st(n)))return r.value=n,!0;const l=te(s)&&Ro(i)?Number(i)<s.length:ye(s,i),c=Reflect.set(s,i,n,o);return s===we(o)&&(l?ni(n,r)&&qt(s,"set",i,n):qt(s,"add",i,n)),c}}function dh(e,t){const s=ye(e,t);e[t];const i=Reflect.deleteProperty(e,t);return i&&s&&qt(e,"delete",t,void 0),i}function hh(e,t){const s=Reflect.has(e,t);return(!ii(t)||!ma.has(t))&&ft(e,"has",t),s}function fh(e){return ft(e,"iterate",te(e)?"length":xs),Reflect.ownKeys(e)}const ga={get:nh,set:ch,deleteProperty:dh,has:hh,ownKeys:fh},mh={get:rh,set(e,t){return!0},deleteProperty(e,t){return!0}},ph=nt({},ga,{get:oh,set:uh}),Bo=e=>e,an=e=>Reflect.getPrototypeOf(e);function Ci(e,t,s=!1,i=!1){e=e.__v_raw;const n=we(e),o=we(t);s||(t!==o&&ft(n,"get",t),ft(n,"get",o));const{has:r}=an(n),l=i?Bo:s?Uo:oi;if(r.call(n,t))return l(e.get(t));if(r.call(n,o))return l(e.get(o));e!==n&&e.get(t)}function Si(e,t=!1){const s=this.__v_raw,i=we(s),n=we(e);return t||(e!==n&&ft(i,"has",e),ft(i,"has",n)),e===n?s.has(e):s.has(e)||s.has(n)}function Li(e,t=!1){return e=e.__v_raw,!t&&ft(we(e),"iterate",xs),Reflect.get(e,"size",e)}function il(e){e=we(e);const t=we(this);return an(t).has.call(t,e)||(t.add(e),qt(t,"add",e,e)),this}function nl(e,t){t=we(t);const s=we(this),{has:i,get:n}=an(s);let o=i.call(s,e);o||(e=we(e),o=i.call(s,e));const r=n.call(s,e);return s.set(e,t),o?ni(t,r)&&qt(s,"set",e,t):qt(s,"add",e,t),this}function ol(e){const t=we(this),{has:s,get:i}=an(t);let n=s.call(t,e);n||(e=we(e),n=s.call(t,e)),i&&i.call(t,e);const o=t.delete(e);return n&&qt(t,"delete",e,void 0),o}function rl(){const e=we(this),t=e.size!==0,s=e.clear();return t&&qt(e,"clear",void 0,void 0),s}function Ei(e,t){return function(i,n){const o=this,r=o.__v_raw,l=we(r),c=t?Bo:e?Uo:oi;return!e&&ft(l,"iterate",xs),r.forEach((d,g)=>i.call(n,c(d),c(g),o))}}function Mi(e,t,s){return function(...i){const n=this.__v_raw,o=we(n),r=Ps(o),l=e==="entries"||e===Symbol.iterator&&r,c=e==="keys"&&r,d=n[e](...i),g=s?Bo:t?Uo:oi;return!t&&ft(o,"iterate",c?po:xs),{next(){const{value:v,done:p}=d.next();return p?{value:v,done:p}:{value:l?[g(v[0]),g(v[1])]:g(v),done:p}},[Symbol.iterator](){return this}}}}function Zt(e){return function(...t){return e==="delete"?!1:this}}function gh(){const e={get(o){return Ci(this,o)},get size(){return Li(this)},has:Si,add:il,set:nl,delete:ol,clear:rl,forEach:Ei(!1,!1)},t={get(o){return Ci(this,o,!1,!0)},get size(){return Li(this)},has:Si,add:il,set:nl,delete:ol,clear:rl,forEach:Ei(!1,!0)},s={get(o){return Ci(this,o,!0)},get size(){return Li(this,!0)},has(o){return Si.call(this,o,!0)},add:Zt("add"),set:Zt("set"),delete:Zt("delete"),clear:Zt("clear"),forEach:Ei(!0,!1)},i={get(o){return Ci(this,o,!0,!0)},get size(){return Li(this,!0)},has(o){return Si.call(this,o,!0)},add:Zt("add"),set:Zt("set"),delete:Zt("delete"),clear:Zt("clear"),forEach:Ei(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(o=>{e[o]=Mi(o,!1,!1),s[o]=Mi(o,!0,!1),t[o]=Mi(o,!1,!0),i[o]=Mi(o,!0,!0)}),[e,s,t,i]}const[vh,bh,yh,wh]=gh();function zo(e,t){const s=t?e?wh:yh:e?bh:vh;return(i,n,o)=>n==="__v_isReactive"?!e:n==="__v_isReadonly"?e:n==="__v_raw"?i:Reflect.get(ye(s,n)&&n in i?s:i,n,o)}const kh={get:zo(!1,!1)},_h={get:zo(!1,!0)},xh={get:zo(!0,!1)},va=new WeakMap,ba=new WeakMap,ya=new WeakMap,Ch=new WeakMap;function Sh(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Lh(e){return e.__v_skip||!Object.isExtensible(e)?0:Sh(Wd(e))}function Vo(e){return Ds(e)?e:jo(e,!1,ga,kh,va)}function Eh(e){return jo(e,!1,ph,_h,ba)}function wa(e){return jo(e,!0,mh,xh,ya)}function jo(e,t,s,i,n){if(!Ae(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const o=n.get(e);if(o)return o;const r=Lh(e);if(r===0)return e;const l=new Proxy(e,r===2?i:s);return n.set(e,l),l}function Os(e){return Ds(e)?Os(e.__v_raw):!!(e&&e.__v_isReactive)}function Ds(e){return!!(e&&e.__v_isReadonly)}function Ui(e){return!!(e&&e.__v_isShallow)}function ka(e){return Os(e)||Ds(e)}function we(e){const t=e&&e.__v_raw;return t?we(t):e}function _a(e){return zi(e,"__v_skip",!0),e}const oi=e=>Ae(e)?Vo(e):e,Uo=e=>Ae(e)?wa(e):e;function xa(e){ns&&Ct&&(e=we(e),fa(e.dep||(e.dep=Io())))}function Ca(e,t){e=we(e);const s=e.dep;s&&go(s)}function st(e){return!!(e&&e.__v_isRef===!0)}function $t(e){return Mh(e,!1)}function Mh(e,t){return st(e)?e:new Ah(e,t)}class Ah{constructor(t,s){this.__v_isShallow=s,this.dep=void 0,this.__v_isRef=!0,this._rawValue=s?t:we(t),this._value=s?t:oi(t)}get value(){return xa(this),this._value}set value(t){const s=this.__v_isShallow||Ui(t)||Ds(t);t=s?t:we(t),ni(t,this._rawValue)&&(this._rawValue=t,this._value=s?t:oi(t),Ca(this))}}function Zs(e){return st(e)?e.value:e}const Th={get:(e,t,s)=>Zs(Reflect.get(e,t,s)),set:(e,t,s,i)=>{const n=e[t];return st(n)&&!st(s)?(n.value=s,!0):Reflect.set(e,t,s,i)}};function Sa(e){return Os(e)?e:new Proxy(e,Th)}function Gs(e){const t=te(e)?new Array(e.length):{};for(const s in e)t[s]=Ph(e,s);return t}class Nh{constructor(t,s,i){this._object=t,this._key=s,this._defaultValue=i,this.__v_isRef=!0}get value(){const t=this._object[this._key];return t===void 0?this._defaultValue:t}set value(t){this._object[this._key]=t}get dep(){return sh(we(this._object),this._key)}}function Ph(e,t,s){const i=e[t];return st(i)?i:new Nh(e,t,s)}var La;class Oh{constructor(t,s,i,n){this._setter=s,this.dep=void 0,this.__v_isRef=!0,this[La]=!1,this._dirty=!0,this.effect=new Do(t,()=>{this._dirty||(this._dirty=!0,Ca(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!n,this.__v_isReadonly=i}get value(){const t=we(this);return xa(t),(t._dirty||!t._cacheable)&&(t._dirty=!1,t._value=t.effect.run()),t._value}set value(t){this._setter(t)}}La="__v_isReadonly";function $h(e,t,s=!1){let i,n;const o=ce(e);return o?(i=e,n=Mt):(i=e.get,n=e.set),new Oh(i,n,o||!n,s)}function os(e,t,s,i){let n;try{n=i?e(...i):e()}catch(o){cn(o,t,s)}return n}function wt(e,t,s,i){if(ce(e)){const o=os(e,t,s,i);return o&&la(o)&&o.catch(r=>{cn(r,t,s)}),o}const n=[];for(let o=0;o<e.length;o++)n.push(wt(e[o],t,s,i));return n}function cn(e,t,s,i=!0){const n=t?t.vnode:null;if(t){let o=t.parent;const r=t.proxy,l=s;for(;o;){const d=o.ec;if(d){for(let g=0;g<d.length;g++)if(d[g](e,r,l)===!1)return}o=o.parent}const c=t.appContext.config.errorHandler;if(c){os(c,null,10,[e,r,l]);return}}Hh(e,s,n,i)}function Hh(e,t,s,i=!0){console.error(e)}let ri=!1,vo=!1;const rt=[];let Ht=0;const $s=[];let jt=null,vs=0;const Ea=Promise.resolve();let qo=null;function Ma(e){const t=qo||Ea;return e?t.then(this?e.bind(this):e):t}function Rh(e){let t=Ht+1,s=rt.length;for(;t<s;){const i=t+s>>>1;li(rt[i])<e?t=i+1:s=i}return t}function Wo(e){(!rt.length||!rt.includes(e,ri&&e.allowRecurse?Ht+1:Ht))&&(e.id==null?rt.push(e):rt.splice(Rh(e.id),0,e),Aa())}function Aa(){!ri&&!vo&&(vo=!0,qo=Ea.then(Na))}function Ih(e){const t=rt.indexOf(e);t>Ht&&rt.splice(t,1)}function Dh(e){te(e)?$s.push(...e):(!jt||!jt.includes(e,e.allowRecurse?vs+1:vs))&&$s.push(e),Aa()}function ll(e,t=ri?Ht+1:0){for(;t<rt.length;t++){const s=rt[t];s&&s.pre&&(rt.splice(t,1),t--,s())}}function Ta(e){if($s.length){const t=[...new Set($s)];if($s.length=0,jt){jt.push(...t);return}for(jt=t,jt.sort((s,i)=>li(s)-li(i)),vs=0;vs<jt.length;vs++)jt[vs]();jt=null,vs=0}}const li=e=>e.id==null?1/0:e.id,Fh=(e,t)=>{const s=li(e)-li(t);if(s===0){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return s};function Na(e){vo=!1,ri=!0,rt.sort(Fh);const t=Mt;try{for(Ht=0;Ht<rt.length;Ht++){const s=rt[Ht];s&&s.active!==!1&&os(s,null,14)}}finally{Ht=0,rt.length=0,Ta(),ri=!1,qo=null,(rt.length||$s.length)&&Na()}}function Bh(e,t,...s){if(e.isUnmounted)return;const i=e.vnode.props||He;let n=s;const o=t.startsWith("update:"),r=o&&t.slice(7);if(r&&r in i){const g=`${r==="modelValue"?"model":r}Modifiers`,{number:v,trim:p}=i[g]||He;p&&(n=s.map(w=>Xe(w)?w.trim():w)),v&&(n=s.map(Vi))}let l,c=i[l=Zn(t)]||i[l=Zn(It(t))];!c&&o&&(c=i[l=Zn(Bs(t))]),c&&wt(c,e,6,n);const d=i[l+"Once"];if(d){if(!e.emitted)e.emitted={};else if(e.emitted[l])return;e.emitted[l]=!0,wt(d,e,6,n)}}function Pa(e,t,s=!1){const i=t.emitsCache,n=i.get(e);if(n!==void 0)return n;const o=e.emits;let r={},l=!1;if(!ce(e)){const c=d=>{const g=Pa(d,t,!0);g&&(l=!0,nt(r,g))};!s&&t.mixins.length&&t.mixins.forEach(c),e.extends&&c(e.extends),e.mixins&&e.mixins.forEach(c)}return!o&&!l?(Ae(e)&&i.set(e,null),null):(te(o)?o.forEach(c=>r[c]=null):nt(r,o),Ae(e)&&i.set(e,r),r)}function un(e,t){return!e||!nn(t)?!1:(t=t.slice(2).replace(/Once$/,""),ye(e,t[0].toLowerCase()+t.slice(1))||ye(e,Bs(t))||ye(e,t))}let it=null,Oa=null;function qi(e){const t=it;return it=e,Oa=e&&e.type.__scopeId||null,t}function Qs(e,t=it,s){if(!t||e._n)return e;const i=(...n)=>{i._d&&vl(-1);const o=qi(t);let r;try{r=e(...n)}finally{qi(o),i._d&&vl(1)}return r};return i._n=!0,i._c=!0,i._d=!0,i}function Gn(e){const{type:t,vnode:s,proxy:i,withProxy:n,props:o,propsOptions:[r],slots:l,attrs:c,emit:d,render:g,renderCache:v,data:p,setupState:w,ctx:k,inheritAttrs:x}=e;let C,R;const Z=qi(e);try{if(s.shapeFlag&4){const se=n||i;C=Ot(g.call(se,se,v,o,w,p,k)),R=c}else{const se=t;C=Ot(se.length>1?se(o,{attrs:c,slots:l,emit:d}):se(o,null)),R=t.props?c:zh(c)}}catch(se){si.length=0,cn(se,e,1),C=V(kt)}let Y=C;if(R&&x!==!1){const se=Object.keys(R),{shapeFlag:ne}=Y;se.length&&ne&7&&(r&&se.some($o)&&(R=Vh(R,r)),Y=ls(Y,R))}return s.dirs&&(Y=ls(Y),Y.dirs=Y.dirs?Y.dirs.concat(s.dirs):s.dirs),s.transition&&(Y.transition=s.transition),C=Y,qi(Z),C}const zh=e=>{let t;for(const s in e)(s==="class"||s==="style"||nn(s))&&((t||(t={}))[s]=e[s]);return t},Vh=(e,t)=>{const s={};for(const i in e)(!$o(i)||!(i.slice(9)in t))&&(s[i]=e[i]);return s};function jh(e,t,s){const{props:i,children:n,component:o}=e,{props:r,children:l,patchFlag:c}=t,d=o.emitsOptions;if(t.dirs||t.transition)return!0;if(s&&c>=0){if(c&1024)return!0;if(c&16)return i?al(i,r,d):!!r;if(c&8){const g=t.dynamicProps;for(let v=0;v<g.length;v++){const p=g[v];if(r[p]!==i[p]&&!un(d,p))return!0}}}else return(n||l)&&(!l||!l.$stable)?!0:i===r?!1:i?r?al(i,r,d):!0:!!r;return!1}function al(e,t,s){const i=Object.keys(t);if(i.length!==Object.keys(e).length)return!0;for(let n=0;n<i.length;n++){const o=i[n];if(t[o]!==e[o]&&!un(s,o))return!0}return!1}function Uh({vnode:e,parent:t},s){for(;t&&t.subTree===e;)(e=t.vnode).el=s,t=t.parent}const qh=e=>e.__isSuspense;function Wh(e,t){t&&t.pendingBranch?te(e)?t.effects.push(...e):t.effects.push(e):Dh(e)}function Yh(e,t){if(Ye){let s=Ye.provides;const i=Ye.parent&&Ye.parent.provides;i===s&&(s=Ye.provides=Object.create(i)),s[e]=t}}function Ii(e,t,s=!1){const i=Ye||it;if(i){const n=i.parent==null?i.vnode.appContext&&i.vnode.appContext.provides:i.parent.provides;if(n&&e in n)return n[e];if(arguments.length>1)return s&&ce(t)?t.call(i.proxy):t}}const Ai={};function et(e,t,s){return $a(e,t,s)}function $a(e,t,{immediate:s,deep:i,flush:n,onTrack:o,onTrigger:r}=He){const l=Qd()===(Ye==null?void 0:Ye.scope)?Ye:null;let c,d=!1,g=!1;if(st(e)?(c=()=>e.value,d=Ui(e)):Os(e)?(c=()=>e,i=!0):te(e)?(g=!0,d=e.some(Y=>Os(Y)||Ui(Y)),c=()=>e.map(Y=>{if(st(Y))return Y.value;if(Os(Y))return ks(Y);if(ce(Y))return os(Y,l,2)})):ce(e)?t?c=()=>os(e,l,2):c=()=>{if(!(l&&l.isUnmounted))return v&&v(),wt(e,l,3,[p])}:c=Mt,t&&i){const Y=c;c=()=>ks(Y())}let v,p=Y=>{v=R.onStop=()=>{os(Y,l,4)}},w;if(ci)if(p=Mt,t?s&&wt(t,l,3,[c(),g?[]:void 0,p]):c(),n==="sync"){const Y=jf();w=Y.__watcherHandles||(Y.__watcherHandles=[])}else return Mt;let k=g?new Array(e.length).fill(Ai):Ai;const x=()=>{if(R.active)if(t){const Y=R.run();(i||d||(g?Y.some((se,ne)=>ni(se,k[ne])):ni(Y,k)))&&(v&&v(),wt(t,l,3,[Y,k===Ai?void 0:g&&k[0]===Ai?[]:k,p]),k=Y)}else R.run()};x.allowRecurse=!!t;let C;n==="sync"?C=x:n==="post"?C=()=>ht(x,l&&l.suspense):(x.pre=!0,l&&(x.id=l.uid),C=()=>Wo(x));const R=new Do(c,C);t?s?x():k=R.run():n==="post"?ht(R.run.bind(R),l&&l.suspense):R.run();const Z=()=>{R.stop(),l&&l.scope&&Ho(l.scope.effects,R)};return w&&w.push(Z),Z}function Kh(e,t,s){const i=this.proxy,n=Xe(e)?e.includes(".")?Ha(i,e):()=>i[e]:e.bind(i,i);let o;ce(t)?o=t:(o=t.handler,s=t);const r=Ye;Fs(this);const l=$a(n,o.bind(i),s);return r?Fs(r):Cs(),l}function Ha(e,t){const s=t.split(".");return()=>{let i=e;for(let n=0;n<s.length&&i;n++)i=i[s[n]];return i}}function ks(e,t){if(!Ae(e)||e.__v_skip||(t=t||new Set,t.has(e)))return e;if(t.add(e),st(e))ks(e.value,t);else if(te(e))for(let s=0;s<e.length;s++)ks(e[s],t);else if(on(e)||Ps(e))e.forEach(s=>{ks(s,t)});else if(ca(e))for(const s in e)ks(e[s],t);return e}function Xh(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return fn(()=>{e.isMounted=!0}),Yo(()=>{e.isUnmounting=!0}),e}const gt=[Function,Array],Jh={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:gt,onEnter:gt,onAfterEnter:gt,onEnterCancelled:gt,onBeforeLeave:gt,onLeave:gt,onAfterLeave:gt,onLeaveCancelled:gt,onBeforeAppear:gt,onAppear:gt,onAfterAppear:gt,onAppearCancelled:gt},setup(e,{slots:t}){const s=$f(),i=Xh();let n;return()=>{const o=t.default&&Da(t.default(),!0);if(!o||!o.length)return;let r=o[0];if(o.length>1){for(const x of o)if(x.type!==kt){r=x;break}}const l=we(e),{mode:c}=l;if(i.isLeaving)return Qn(r);const d=cl(r);if(!d)return Qn(r);const g=bo(d,l,i,s);yo(d,g);const v=s.subTree,p=v&&cl(v);let w=!1;const{getTransitionKey:k}=d.type;if(k){const x=k();n===void 0?n=x:x!==n&&(n=x,w=!0)}if(p&&p.type!==kt&&(!bs(d,p)||w)){const x=bo(p,l,i,s);if(yo(p,x),c==="out-in")return i.isLeaving=!0,x.afterLeave=()=>{i.isLeaving=!1,s.update.active!==!1&&s.update()},Qn(r);c==="in-out"&&d.type!==kt&&(x.delayLeave=(C,R,Z)=>{const Y=Ia(i,p);Y[String(p.key)]=p,C._leaveCb=()=>{R(),C._leaveCb=void 0,delete g.delayedLeave},g.delayedLeave=Z})}return r}}},Ra=Jh;function Ia(e,t){const{leavingVNodes:s}=e;let i=s.get(t.type);return i||(i=Object.create(null),s.set(t.type,i)),i}function bo(e,t,s,i){const{appear:n,mode:o,persisted:r=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:d,onEnterCancelled:g,onBeforeLeave:v,onLeave:p,onAfterLeave:w,onLeaveCancelled:k,onBeforeAppear:x,onAppear:C,onAfterAppear:R,onAppearCancelled:Z}=t,Y=String(e.key),se=Ia(s,e),ne=(j,q)=>{j&&wt(j,i,9,q)},be=(j,q)=>{const he=q[1];ne(j,q),te(j)?j.every(de=>de.length<=1)&&he():j.length<=1&&he()},ue={mode:o,persisted:r,beforeEnter(j){let q=l;if(!s.isMounted)if(n)q=x||l;else return;j._leaveCb&&j._leaveCb(!0);const he=se[Y];he&&bs(e,he)&&he.el._leaveCb&&he.el._leaveCb(),ne(q,[j])},enter(j){let q=c,he=d,de=g;if(!s.isMounted)if(n)q=C||c,he=R||d,de=Z||g;else return;let B=!1;const pe=j._enterCb=xe=>{B||(B=!0,xe?ne(de,[j]):ne(he,[j]),ue.delayedLeave&&ue.delayedLeave(),j._enterCb=void 0)};q?be(q,[j,pe]):pe()},leave(j,q){const he=String(e.key);if(j._enterCb&&j._enterCb(!0),s.isUnmounting)return q();ne(v,[j]);let de=!1;const B=j._leaveCb=pe=>{de||(de=!0,q(),pe?ne(k,[j]):ne(w,[j]),j._leaveCb=void 0,se[he]===e&&delete se[he])};se[he]=e,p?be(p,[j,B]):B()},clone(j){return bo(j,t,s,i)}};return ue}function Qn(e){if(dn(e))return e=ls(e),e.children=null,e}function cl(e){return dn(e)?e.children?e.children[0]:void 0:e}function yo(e,t){e.shapeFlag&6&&e.component?yo(e.component.subTree,t):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Da(e,t=!1,s){let i=[],n=0;for(let o=0;o<e.length;o++){let r=e[o];const l=s==null?r.key:String(s)+String(r.key!=null?r.key:o);r.type===Pe?(r.patchFlag&128&&n++,i=i.concat(Da(r.children,t,l))):(t||r.type!==kt)&&i.push(l!=null?ls(r,{key:l}):r)}if(n>1)for(let o=0;o<i.length;o++)i[o].patchFlag=-2;return i}function Yt(e){return ce(e)?{setup:e,name:e.name}:e}const ei=e=>!!e.type.__asyncLoader,dn=e=>e.type.__isKeepAlive;function Zh(e,t){Fa(e,"a",t)}function Gh(e,t){Fa(e,"da",t)}function Fa(e,t,s=Ye){const i=e.__wdc||(e.__wdc=()=>{let n=s;for(;n;){if(n.isDeactivated)return;n=n.parent}return e()});if(hn(t,i,s),s){let n=s.parent;for(;n&&n.parent;)dn(n.parent.vnode)&&Qh(i,t,s,n),n=n.parent}}function Qh(e,t,s,i){const n=hn(t,e,i,!0);mn(()=>{Ho(i[t],n)},s)}function hn(e,t,s=Ye,i=!1){if(s){const n=s[e]||(s[e]=[]),o=t.__weh||(t.__weh=(...r)=>{if(s.isUnmounted)return;zs(),Fs(s);const l=wt(t,s,e,r);return Cs(),Vs(),l});return i?n.unshift(o):n.push(o),o}}const Kt=e=>(t,s=Ye)=>(!ci||e==="sp")&&hn(e,(...i)=>t(...i),s),ef=Kt("bm"),fn=Kt("m"),tf=Kt("bu"),sf=Kt("u"),Yo=Kt("bum"),mn=Kt("um"),nf=Kt("sp"),of=Kt("rtg"),rf=Kt("rtc");function lf(e,t=Ye){hn("ec",e,t)}function pi(e,t){const s=it;if(s===null)return e;const i=yn(s)||s.proxy,n=e.dirs||(e.dirs=[]);for(let o=0;o<t.length;o++){let[r,l,c,d=He]=t[o];r&&(ce(r)&&(r={mounted:r,updated:r}),r.deep&&ks(l),n.push({dir:r,instance:i,value:l,oldValue:void 0,arg:c,modifiers:d}))}return e}function us(e,t,s,i){const n=e.dirs,o=t&&t.dirs;for(let r=0;r<n.length;r++){const l=n[r];o&&(l.oldValue=o[r].value);let c=l.dir[i];c&&(zs(),wt(c,s,8,[e.el,l,e,t]),Vs())}}const Ba="components",af="directives";function Re(e,t){return za(Ba,e,!0,t)||e}const cf=Symbol();function uf(e){return za(af,e)}function za(e,t,s=!0,i=!1){const n=it||Ye;if(n){const o=n.type;if(e===Ba){const l=Ff(o,!1);if(l&&(l===t||l===It(t)||l===ln(It(t))))return o}const r=ul(n[e]||o[e],t)||ul(n.appContext[e],t);return!r&&i?o:r}}function ul(e,t){return e&&(e[t]||e[It(t)]||e[ln(It(t))])}function St(e,t,s,i){let n;const o=s&&s[i];if(te(e)||Xe(e)){n=new Array(e.length);for(let r=0,l=e.length;r<l;r++)n[r]=t(e[r],r,void 0,o&&o[r])}else if(typeof e=="number"){n=new Array(e);for(let r=0;r<e;r++)n[r]=t(r+1,r,void 0,o&&o[r])}else if(Ae(e))if(e[Symbol.iterator])n=Array.from(e,(r,l)=>t(r,l,void 0,o&&o[l]));else{const r=Object.keys(e);n=new Array(r.length);for(let l=0,c=r.length;l<c;l++){const d=r[l];n[l]=t(e[d],d,l,o&&o[l])}}else n=[];return s&&(s[i]=n),n}function Wi(e,t,s={},i,n){if(it.isCE||it.parent&&ei(it.parent)&&it.parent.isCE)return t!=="default"&&(s.name=t),V("slot",s,i&&i());let o=e[t];o&&o._c&&(o._d=!1),N();const r=o&&Va(o(s)),l=De(Pe,{key:s.key||r&&r.key||`_${t}`},r||(i?i():[]),r&&e._===1?64:-2);return!n&&l.scopeId&&(l.slotScopeIds=[l.scopeId+"-s"]),o&&o._c&&(o._d=!0),l}function Va(e){return e.some(t=>Ki(t)?!(t.type===kt||t.type===Pe&&!Va(t.children)):!0)?e:null}const wo=e=>e?ec(e)?yn(e)||e.proxy:wo(e.parent):null,ti=nt(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>wo(e.parent),$root:e=>wo(e.root),$emit:e=>e.emit,$options:e=>Ko(e),$forceUpdate:e=>e.f||(e.f=()=>Wo(e.update)),$nextTick:e=>e.n||(e.n=Ma.bind(e.proxy)),$watch:e=>Kh.bind(e)}),eo=(e,t)=>e!==He&&!e.__isScriptSetup&&ye(e,t),df={get({_:e},t){const{ctx:s,setupState:i,data:n,props:o,accessCache:r,type:l,appContext:c}=e;let d;if(t[0]!=="$"){const w=r[t];if(w!==void 0)switch(w){case 1:return i[t];case 2:return n[t];case 4:return s[t];case 3:return o[t]}else{if(eo(i,t))return r[t]=1,i[t];if(n!==He&&ye(n,t))return r[t]=2,n[t];if((d=e.propsOptions[0])&&ye(d,t))return r[t]=3,o[t];if(s!==He&&ye(s,t))return r[t]=4,s[t];ko&&(r[t]=0)}}const g=ti[t];let v,p;if(g)return t==="$attrs"&&ft(e,"get",t),g(e);if((v=l.__cssModules)&&(v=v[t]))return v;if(s!==He&&ye(s,t))return r[t]=4,s[t];if(p=c.config.globalProperties,ye(p,t))return p[t]},set({_:e},t,s){const{data:i,setupState:n,ctx:o}=e;return eo(n,t)?(n[t]=s,!0):i!==He&&ye(i,t)?(i[t]=s,!0):ye(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(o[t]=s,!0)},has({_:{data:e,setupState:t,accessCache:s,ctx:i,appContext:n,propsOptions:o}},r){let l;return!!s[r]||e!==He&&ye(e,r)||eo(t,r)||(l=o[0])&&ye(l,r)||ye(i,r)||ye(ti,r)||ye(n.config.globalProperties,r)},defineProperty(e,t,s){return s.get!=null?e._.accessCache[t]=0:ye(s,"value")&&this.set(e,t,s.value,null),Reflect.defineProperty(e,t,s)}};let ko=!0;function hf(e){const t=Ko(e),s=e.proxy,i=e.ctx;ko=!1,t.beforeCreate&&dl(t.beforeCreate,e,"bc");const{data:n,computed:o,methods:r,watch:l,provide:c,inject:d,created:g,beforeMount:v,mounted:p,beforeUpdate:w,updated:k,activated:x,deactivated:C,beforeDestroy:R,beforeUnmount:Z,destroyed:Y,unmounted:se,render:ne,renderTracked:be,renderTriggered:ue,errorCaptured:j,serverPrefetch:q,expose:he,inheritAttrs:de,components:B,directives:pe,filters:xe}=t;if(d&&ff(d,i,null,e.appContext.config.unwrapInjectedRef),r)for(const Ce in r){const ve=r[Ce];ce(ve)&&(i[Ce]=ve.bind(s))}if(n){const Ce=n.call(s,s);Ae(Ce)&&(e.data=Vo(Ce))}if(ko=!0,o)for(const Ce in o){const ve=o[Ce],Oe=ce(ve)?ve.bind(s,s):ce(ve.get)?ve.get.bind(s,s):Mt,Te=!ce(ve)&&ce(ve.set)?ve.set.bind(s):Mt,ze=Ut({get:Oe,set:Te});Object.defineProperty(i,Ce,{enumerable:!0,configurable:!0,get:()=>ze.value,set:Ve=>ze.value=Ve})}if(l)for(const Ce in l)ja(l[Ce],i,s,Ce);if(c){const Ce=ce(c)?c.call(s):c;Reflect.ownKeys(Ce).forEach(ve=>{Yh(ve,Ce[ve])})}g&&dl(g,e,"c");function fe(Ce,ve){te(ve)?ve.forEach(Oe=>Ce(Oe.bind(s))):ve&&Ce(ve.bind(s))}if(fe(ef,v),fe(fn,p),fe(tf,w),fe(sf,k),fe(Zh,x),fe(Gh,C),fe(lf,j),fe(rf,be),fe(of,ue),fe(Yo,Z),fe(mn,se),fe(nf,q),te(he))if(he.length){const Ce=e.exposed||(e.exposed={});he.forEach(ve=>{Object.defineProperty(Ce,ve,{get:()=>s[ve],set:Oe=>s[ve]=Oe})})}else e.exposed||(e.exposed={});ne&&e.render===Mt&&(e.render=ne),de!=null&&(e.inheritAttrs=de),B&&(e.components=B),pe&&(e.directives=pe)}function ff(e,t,s=Mt,i=!1){te(e)&&(e=_o(e));for(const n in e){const o=e[n];let r;Ae(o)?"default"in o?r=Ii(o.from||n,o.default,!0):r=Ii(o.from||n):r=Ii(o),st(r)&&i?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>r.value,set:l=>r.value=l}):t[n]=r}}function dl(e,t,s){wt(te(e)?e.map(i=>i.bind(t.proxy)):e.bind(t.proxy),t,s)}function ja(e,t,s,i){const n=i.includes(".")?Ha(s,i):()=>s[i];if(Xe(e)){const o=t[e];ce(o)&&et(n,o)}else if(ce(e))et(n,e.bind(s));else if(Ae(e))if(te(e))e.forEach(o=>ja(o,t,s,i));else{const o=ce(e.handler)?e.handler.bind(s):t[e.handler];ce(o)&&et(n,o,e)}}function Ko(e){const t=e.type,{mixins:s,extends:i}=t,{mixins:n,optionsCache:o,config:{optionMergeStrategies:r}}=e.appContext,l=o.get(t);let c;return l?c=l:!n.length&&!s&&!i?c=t:(c={},n.length&&n.forEach(d=>Yi(c,d,r,!0)),Yi(c,t,r)),Ae(t)&&o.set(t,c),c}function Yi(e,t,s,i=!1){const{mixins:n,extends:o}=t;o&&Yi(e,o,s,!0),n&&n.forEach(r=>Yi(e,r,s,!0));for(const r in t)if(!(i&&r==="expose")){const l=mf[r]||s&&s[r];e[r]=l?l(e[r],t[r]):t[r]}return e}const mf={data:hl,props:ps,emits:ps,methods:ps,computed:ps,beforeCreate:at,created:at,beforeMount:at,mounted:at,beforeUpdate:at,updated:at,beforeDestroy:at,beforeUnmount:at,destroyed:at,unmounted:at,activated:at,deactivated:at,errorCaptured:at,serverPrefetch:at,components:ps,directives:ps,watch:gf,provide:hl,inject:pf};function hl(e,t){return t?e?function(){return nt(ce(e)?e.call(this,this):e,ce(t)?t.call(this,this):t)}:t:e}function pf(e,t){return ps(_o(e),_o(t))}function _o(e){if(te(e)){const t={};for(let s=0;s<e.length;s++)t[e[s]]=e[s];return t}return e}function at(e,t){return e?[...new Set([].concat(e,t))]:t}function ps(e,t){return e?nt(nt(Object.create(null),e),t):t}function gf(e,t){if(!e)return t;if(!t)return e;const s=nt(Object.create(null),e);for(const i in t)s[i]=at(e[i],t[i]);return s}function vf(e,t,s,i=!1){const n={},o={};zi(o,gn,1),e.propsDefaults=Object.create(null),Ua(e,t,n,o);for(const r in e.propsOptions[0])r in n||(n[r]=void 0);s?e.props=i?n:Eh(n):e.type.props?e.props=n:e.props=o,e.attrs=o}function bf(e,t,s,i){const{props:n,attrs:o,vnode:{patchFlag:r}}=e,l=we(n),[c]=e.propsOptions;let d=!1;if((i||r>0)&&!(r&16)){if(r&8){const g=e.vnode.dynamicProps;for(let v=0;v<g.length;v++){let p=g[v];if(un(e.emitsOptions,p))continue;const w=t[p];if(c)if(ye(o,p))w!==o[p]&&(o[p]=w,d=!0);else{const k=It(p);n[k]=xo(c,l,k,w,e,!1)}else w!==o[p]&&(o[p]=w,d=!0)}}}else{Ua(e,t,n,o)&&(d=!0);let g;for(const v in l)(!t||!ye(t,v)&&((g=Bs(v))===v||!ye(t,g)))&&(c?s&&(s[v]!==void 0||s[g]!==void 0)&&(n[v]=xo(c,l,v,void 0,e,!0)):delete n[v]);if(o!==l)for(const v in o)(!t||!ye(t,v))&&(delete o[v],d=!0)}d&&qt(e,"set","$attrs")}function Ua(e,t,s,i){const[n,o]=e.propsOptions;let r=!1,l;if(t)for(let c in t){if(Hi(c))continue;const d=t[c];let g;n&&ye(n,g=It(c))?!o||!o.includes(g)?s[g]=d:(l||(l={}))[g]=d:un(e.emitsOptions,c)||(!(c in i)||d!==i[c])&&(i[c]=d,r=!0)}if(o){const c=we(s),d=l||He;for(let g=0;g<o.length;g++){const v=o[g];s[v]=xo(n,c,v,d[v],e,!ye(d,v))}}return r}function xo(e,t,s,i,n,o){const r=e[s];if(r!=null){const l=ye(r,"default");if(l&&i===void 0){const c=r.default;if(r.type!==Function&&ce(c)){const{propsDefaults:d}=n;s in d?i=d[s]:(Fs(n),i=d[s]=c.call(null,t),Cs())}else i=c}r[0]&&(o&&!l?i=!1:r[1]&&(i===""||i===Bs(s))&&(i=!0))}return i}function qa(e,t,s=!1){const i=t.propsCache,n=i.get(e);if(n)return n;const o=e.props,r={},l=[];let c=!1;if(!ce(e)){const g=v=>{c=!0;const[p,w]=qa(v,t,!0);nt(r,p),w&&l.push(...w)};!s&&t.mixins.length&&t.mixins.forEach(g),e.extends&&g(e.extends),e.mixins&&e.mixins.forEach(g)}if(!o&&!c)return Ae(e)&&i.set(e,Ns),Ns;if(te(o))for(let g=0;g<o.length;g++){const v=It(o[g]);fl(v)&&(r[v]=He)}else if(o)for(const g in o){const v=It(g);if(fl(v)){const p=o[g],w=r[v]=te(p)||ce(p)?{type:p}:Object.assign({},p);if(w){const k=gl(Boolean,w.type),x=gl(String,w.type);w[0]=k>-1,w[1]=x<0||k<x,(k>-1||ye(w,"default"))&&l.push(v)}}}const d=[r,l];return Ae(e)&&i.set(e,d),d}function fl(e){return e[0]!=="$"}function ml(e){const t=e&&e.toString().match(/^\s*(function|class) (\w+)/);return t?t[2]:e===null?"null":""}function pl(e,t){return ml(e)===ml(t)}function gl(e,t){return te(t)?t.findIndex(s=>pl(s,e)):ce(t)&&pl(t,e)?0:-1}const Wa=e=>e[0]==="_"||e==="$stable",Xo=e=>te(e)?e.map(Ot):[Ot(e)],yf=(e,t,s)=>{if(t._n)return t;const i=Qs((...n)=>Xo(t(...n)),s);return i._c=!1,i},Ya=(e,t,s)=>{const i=e._ctx;for(const n in e){if(Wa(n))continue;const o=e[n];if(ce(o))t[n]=yf(n,o,i);else if(o!=null){const r=Xo(o);t[n]=()=>r}}},Ka=(e,t)=>{const s=Xo(t);e.slots.default=()=>s},wf=(e,t)=>{if(e.vnode.shapeFlag&32){const s=t._;s?(e.slots=we(t),zi(t,"_",s)):Ya(t,e.slots={})}else e.slots={},t&&Ka(e,t);zi(e.slots,gn,1)},kf=(e,t,s)=>{const{vnode:i,slots:n}=e;let o=!0,r=He;if(i.shapeFlag&32){const l=t._;l?s&&l===1?o=!1:(nt(n,t),!s&&l===1&&delete n._):(o=!t.$stable,Ya(t,n)),r=t}else t&&(Ka(e,t),r={default:1});if(o)for(const l in n)!Wa(l)&&!(l in r)&&delete n[l]};function Xa(){return{app:null,config:{isNativeTag:jd,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let _f=0;function xf(e,t){return function(i,n=null){ce(i)||(i=Object.assign({},i)),n!=null&&!Ae(n)&&(n=null);const o=Xa(),r=new Set;let l=!1;const c=o.app={_uid:_f++,_component:i,_props:n,_container:null,_context:o,_instance:null,version:Uf,get config(){return o.config},set config(d){},use(d,...g){return r.has(d)||(d&&ce(d.install)?(r.add(d),d.install(c,...g)):ce(d)&&(r.add(d),d(c,...g))),c},mixin(d){return o.mixins.includes(d)||o.mixins.push(d),c},component(d,g){return g?(o.components[d]=g,c):o.components[d]},directive(d,g){return g?(o.directives[d]=g,c):o.directives[d]},mount(d,g,v){if(!l){const p=V(i,n);return p.appContext=o,g&&t?t(p,d):e(p,d,v),l=!0,c._container=d,d.__vue_app__=c,yn(p.component)||p.component.proxy}},unmount(){l&&(e(null,c._container),delete c._container.__vue_app__)},provide(d,g){return o.provides[d]=g,c}};return c}}function Co(e,t,s,i,n=!1){if(te(e)){e.forEach((p,w)=>Co(p,t&&(te(t)?t[w]:t),s,i,n));return}if(ei(i)&&!n)return;const o=i.shapeFlag&4?yn(i.component)||i.component.proxy:i.el,r=n?null:o,{i:l,r:c}=e,d=t&&t.r,g=l.refs===He?l.refs={}:l.refs,v=l.setupState;if(d!=null&&d!==c&&(Xe(d)?(g[d]=null,ye(v,d)&&(v[d]=null)):st(d)&&(d.value=null)),ce(c))os(c,l,12,[r,g]);else{const p=Xe(c),w=st(c);if(p||w){const k=()=>{if(e.f){const x=p?ye(v,c)?v[c]:g[c]:c.value;n?te(x)&&Ho(x,o):te(x)?x.includes(o)||x.push(o):p?(g[c]=[o],ye(v,c)&&(v[c]=g[c])):(c.value=[o],e.k&&(g[e.k]=c.value))}else p?(g[c]=r,ye(v,c)&&(v[c]=r)):w&&(c.value=r,e.k&&(g[e.k]=r))};r?(k.id=-1,ht(k,s)):k()}}}const ht=Wh;function Cf(e){return Sf(e)}function Sf(e,t){const s=Jd();s.__VUE__=!0;const{insert:i,remove:n,patchProp:o,createElement:r,createText:l,createComment:c,setText:d,setElementText:g,parentNode:v,nextSibling:p,setScopeId:w=Mt,insertStaticContent:k}=e,x=(m,b,S,E=null,L=null,O=null,D=!1,P=null,H=!!b.dynamicChildren)=>{if(m===b)return;m&&!bs(m,b)&&(E=Me(m),Ve(m,L,O,!0),m=null),b.patchFlag===-2&&(H=!1,b.dynamicChildren=null);const{type:A,ref:G,shapeFlag:K}=b;switch(A){case pn:C(m,b,S,E);break;case kt:R(m,b,S,E);break;case Di:m==null&&Z(b,S,E,D);break;case Pe:B(m,b,S,E,L,O,D,P,H);break;default:K&1?ne(m,b,S,E,L,O,D,P,H):K&6?pe(m,b,S,E,L,O,D,P,H):(K&64||K&128)&&A.process(m,b,S,E,L,O,D,P,H,Xt)}G!=null&&L&&Co(G,m&&m.ref,O,b||m,!b)},C=(m,b,S,E)=>{if(m==null)i(b.el=l(b.children),S,E);else{const L=b.el=m.el;b.children!==m.children&&d(L,b.children)}},R=(m,b,S,E)=>{m==null?i(b.el=c(b.children||""),S,E):b.el=m.el},Z=(m,b,S,E)=>{[m.el,m.anchor]=k(m.children,b,S,E,m.el,m.anchor)},Y=({el:m,anchor:b},S,E)=>{let L;for(;m&&m!==b;)L=p(m),i(m,S,E),m=L;i(b,S,E)},se=({el:m,anchor:b})=>{let S;for(;m&&m!==b;)S=p(m),n(m),m=S;n(b)},ne=(m,b,S,E,L,O,D,P,H)=>{D=D||b.type==="svg",m==null?be(b,S,E,L,O,D,P,H):q(m,b,L,O,D,P,H)},be=(m,b,S,E,L,O,D,P)=>{let H,A;const{type:G,props:K,shapeFlag:Q,transition:ie,dirs:me}=m;if(H=m.el=r(m.type,O,K&&K.is,K),Q&8?g(H,m.children):Q&16&&j(m.children,H,null,E,L,O&&G!=="foreignObject",D,P),me&&us(m,null,E,"created"),ue(H,m,m.scopeId,D,E),K){for(const Se in K)Se!=="value"&&!Hi(Se)&&o(H,Se,null,K[Se],O,m.children,E,L,X);"value"in K&&o(H,"value",null,K.value),(A=K.onVnodeBeforeMount)&&Nt(A,E,m)}me&&us(m,null,E,"beforeMount");const Le=(!L||L&&!L.pendingBranch)&&ie&&!ie.persisted;Le&&ie.beforeEnter(H),i(H,b,S),((A=K&&K.onVnodeMounted)||Le||me)&&ht(()=>{A&&Nt(A,E,m),Le&&ie.enter(H),me&&us(m,null,E,"mounted")},L)},ue=(m,b,S,E,L)=>{if(S&&w(m,S),E)for(let O=0;O<E.length;O++)w(m,E[O]);if(L){let O=L.subTree;if(b===O){const D=L.vnode;ue(m,D,D.scopeId,D.slotScopeIds,L.parent)}}},j=(m,b,S,E,L,O,D,P,H=0)=>{for(let A=H;A<m.length;A++){const G=m[A]=P?es(m[A]):Ot(m[A]);x(null,G,b,S,E,L,O,D,P)}},q=(m,b,S,E,L,O,D)=>{const P=b.el=m.el;let{patchFlag:H,dynamicChildren:A,dirs:G}=b;H|=m.patchFlag&16;const K=m.props||He,Q=b.props||He;let ie;S&&ds(S,!1),(ie=Q.onVnodeBeforeUpdate)&&Nt(ie,S,b,m),G&&us(b,m,S,"beforeUpdate"),S&&ds(S,!0);const me=L&&b.type!=="foreignObject";if(A?he(m.dynamicChildren,A,P,S,E,me,O):D||ve(m,b,P,null,S,E,me,O,!1),H>0){if(H&16)de(P,b,K,Q,S,E,L);else if(H&2&&K.class!==Q.class&&o(P,"class",null,Q.class,L),H&4&&o(P,"style",K.style,Q.style,L),H&8){const Le=b.dynamicProps;for(let Se=0;Se<Le.length;Se++){const h=Le[Se],u=K[h],T=Q[h];(T!==u||h==="value")&&o(P,h,u,T,L,m.children,S,E,X)}}H&1&&m.children!==b.children&&g(P,b.children)}else!D&&A==null&&de(P,b,K,Q,S,E,L);((ie=Q.onVnodeUpdated)||G)&&ht(()=>{ie&&Nt(ie,S,b,m),G&&us(b,m,S,"updated")},E)},he=(m,b,S,E,L,O,D)=>{for(let P=0;P<b.length;P++){const H=m[P],A=b[P],G=H.el&&(H.type===Pe||!bs(H,A)||H.shapeFlag&70)?v(H.el):S;x(H,A,G,null,E,L,O,D,!0)}},de=(m,b,S,E,L,O,D)=>{if(S!==E){if(S!==He)for(const P in S)!Hi(P)&&!(P in E)&&o(m,P,S[P],null,D,b.children,L,O,X);for(const P in E){if(Hi(P))continue;const H=E[P],A=S[P];H!==A&&P!=="value"&&o(m,P,A,H,D,b.children,L,O,X)}"value"in E&&o(m,"value",S.value,E.value)}},B=(m,b,S,E,L,O,D,P,H)=>{const A=b.el=m?m.el:l(""),G=b.anchor=m?m.anchor:l("");let{patchFlag:K,dynamicChildren:Q,slotScopeIds:ie}=b;ie&&(P=P?P.concat(ie):ie),m==null?(i(A,S,E),i(G,S,E),j(b.children,S,G,L,O,D,P,H)):K>0&&K&64&&Q&&m.dynamicChildren?(he(m.dynamicChildren,Q,S,L,O,D,P),(b.key!=null||L&&b===L.subTree)&&Ja(m,b,!0)):ve(m,b,S,G,L,O,D,P,H)},pe=(m,b,S,E,L,O,D,P,H)=>{b.slotScopeIds=P,m==null?b.shapeFlag&512?L.ctx.activate(b,S,E,D,H):xe(b,S,E,L,O,D,H):oe(m,b,H)},xe=(m,b,S,E,L,O,D)=>{const P=m.component=Of(m,E,L);if(dn(m)&&(P.ctx.renderer=Xt),Hf(P),P.asyncDep){if(L&&L.registerDep(P,fe),!m.el){const H=P.subTree=V(kt);R(null,H,b,S)}return}fe(P,m,b,S,L,O,D)},oe=(m,b,S)=>{const E=b.component=m.component;if(jh(m,b,S))if(E.asyncDep&&!E.asyncResolved){Ce(E,b,S);return}else E.next=b,Ih(E.update),E.update();else b.el=m.el,E.vnode=b},fe=(m,b,S,E,L,O,D)=>{const P=()=>{if(m.isMounted){let{next:G,bu:K,u:Q,parent:ie,vnode:me}=m,Le=G,Se;ds(m,!1),G?(G.el=me.el,Ce(m,G,D)):G=me,K&&Ri(K),(Se=G.props&&G.props.onVnodeBeforeUpdate)&&Nt(Se,ie,G,me),ds(m,!0);const h=Gn(m),u=m.subTree;m.subTree=h,x(u,h,v(u.el),Me(u),m,L,O),G.el=h.el,Le===null&&Uh(m,h.el),Q&&ht(Q,L),(Se=G.props&&G.props.onVnodeUpdated)&&ht(()=>Nt(Se,ie,G,me),L)}else{let G;const{el:K,props:Q}=b,{bm:ie,m:me,parent:Le}=m,Se=ei(b);if(ds(m,!1),ie&&Ri(ie),!Se&&(G=Q&&Q.onVnodeBeforeMount)&&Nt(G,Le,b),ds(m,!0),K&&qs){const h=()=>{m.subTree=Gn(m),qs(K,m.subTree,m,L,null)};Se?b.type.__asyncLoader().then(()=>!m.isUnmounted&&h()):h()}else{const h=m.subTree=Gn(m);x(null,h,S,E,m,L,O),b.el=h.el}if(me&&ht(me,L),!Se&&(G=Q&&Q.onVnodeMounted)){const h=b;ht(()=>Nt(G,Le,h),L)}(b.shapeFlag&256||Le&&ei(Le.vnode)&&Le.vnode.shapeFlag&256)&&m.a&&ht(m.a,L),m.isMounted=!0,b=S=E=null}},H=m.effect=new Do(P,()=>Wo(A),m.scope),A=m.update=()=>H.run();A.id=m.uid,ds(m,!0),A()},Ce=(m,b,S)=>{b.component=m;const E=m.vnode.props;m.vnode=b,m.next=null,bf(m,b.props,E,S),kf(m,b.children,S),zs(),ll(),Vs()},ve=(m,b,S,E,L,O,D,P,H=!1)=>{const A=m&&m.children,G=m?m.shapeFlag:0,K=b.children,{patchFlag:Q,shapeFlag:ie}=b;if(Q>0){if(Q&128){Te(A,K,S,E,L,O,D,P,H);return}else if(Q&256){Oe(A,K,S,E,L,O,D,P,H);return}}ie&8?(G&16&&X(A,L,O),K!==A&&g(S,K)):G&16?ie&16?Te(A,K,S,E,L,O,D,P,H):X(A,L,O,!0):(G&8&&g(S,""),ie&16&&j(K,S,E,L,O,D,P,H))},Oe=(m,b,S,E,L,O,D,P,H)=>{m=m||Ns,b=b||Ns;const A=m.length,G=b.length,K=Math.min(A,G);let Q;for(Q=0;Q<K;Q++){const ie=b[Q]=H?es(b[Q]):Ot(b[Q]);x(m[Q],ie,S,null,L,O,D,P,H)}A>G?X(m,L,O,!0,!1,K):j(b,S,E,L,O,D,P,H,K)},Te=(m,b,S,E,L,O,D,P,H)=>{let A=0;const G=b.length;let K=m.length-1,Q=G-1;for(;A<=K&&A<=Q;){const ie=m[A],me=b[A]=H?es(b[A]):Ot(b[A]);if(bs(ie,me))x(ie,me,S,null,L,O,D,P,H);else break;A++}for(;A<=K&&A<=Q;){const ie=m[K],me=b[Q]=H?es(b[Q]):Ot(b[Q]);if(bs(ie,me))x(ie,me,S,null,L,O,D,P,H);else break;K--,Q--}if(A>K){if(A<=Q){const ie=Q+1,me=ie<G?b[ie].el:E;for(;A<=Q;)x(null,b[A]=H?es(b[A]):Ot(b[A]),S,me,L,O,D,P,H),A++}}else if(A>Q)for(;A<=K;)Ve(m[A],L,O,!0),A++;else{const ie=A,me=A,Le=new Map;for(A=me;A<=Q;A++){const le=b[A]=H?es(b[A]):Ot(b[A]);le.key!=null&&Le.set(le.key,A)}let Se,h=0;const u=Q-me+1;let T=!1,W=0;const $=new Array(u);for(A=0;A<u;A++)$[A]=0;for(A=ie;A<=K;A++){const le=m[A];if(h>=u){Ve(le,L,O,!0);continue}let ke;if(le.key!=null)ke=Le.get(le.key);else for(Se=me;Se<=Q;Se++)if($[Se-me]===0&&bs(le,b[Se])){ke=Se;break}ke===void 0?Ve(le,L,O,!0):($[ke-me]=A+1,ke>=W?W=ke:T=!0,x(le,b[ke],S,null,L,O,D,P,H),h++)}const ee=T?Lf($):Ns;for(Se=ee.length-1,A=u-1;A>=0;A--){const le=me+A,ke=b[le],$e=le+1<G?b[le+1].el:E;$[A]===0?x(null,ke,S,$e,L,O,D,P,H):T&&(Se<0||A!==ee[Se]?ze(ke,S,$e,2):Se--)}}},ze=(m,b,S,E,L=null)=>{const{el:O,type:D,transition:P,children:H,shapeFlag:A}=m;if(A&6){ze(m.component.subTree,b,S,E);return}if(A&128){m.suspense.move(b,S,E);return}if(A&64){D.move(m,b,S,Xt);return}if(D===Pe){i(O,b,S);for(let K=0;K<H.length;K++)ze(H[K],b,S,E);i(m.anchor,b,S);return}if(D===Di){Y(m,b,S);return}if(E!==2&&A&1&&P)if(E===0)P.beforeEnter(O),i(O,b,S),ht(()=>P.enter(O),L);else{const{leave:K,delayLeave:Q,afterLeave:ie}=P,me=()=>i(O,b,S),Le=()=>{K(O,()=>{me(),ie&&ie()})};Q?Q(O,me,Le):Le()}else i(O,b,S)},Ve=(m,b,S,E=!1,L=!1)=>{const{type:O,props:D,ref:P,children:H,dynamicChildren:A,shapeFlag:G,patchFlag:K,dirs:Q}=m;if(P!=null&&Co(P,null,S,m,!0),G&256){b.ctx.deactivate(m);return}const ie=G&1&&Q,me=!ei(m);let Le;if(me&&(Le=D&&D.onVnodeBeforeUnmount)&&Nt(Le,b,m),G&6)Ze(m.component,S,E);else{if(G&128){m.suspense.unmount(S,E);return}ie&&us(m,null,b,"beforeUnmount"),G&64?m.type.remove(m,b,S,L,Xt,E):A&&(O!==Pe||K>0&&K&64)?X(A,b,S,!1,!0):(O===Pe&&K&384||!L&&G&16)&&X(H,b,S),E&&Tt(m)}(me&&(Le=D&&D.onVnodeUnmounted)||ie)&&ht(()=>{Le&&Nt(Le,b,m),ie&&us(m,null,b,"unmounted")},S)},Tt=m=>{const{type:b,el:S,anchor:E,transition:L}=m;if(b===Pe){Dt(S,E);return}if(b===Di){se(m);return}const O=()=>{n(S),L&&!L.persisted&&L.afterLeave&&L.afterLeave()};if(m.shapeFlag&1&&L&&!L.persisted){const{leave:D,delayLeave:P}=L,H=()=>D(S,O);P?P(m.el,O,H):H()}else O()},Dt=(m,b)=>{let S;for(;m!==b;)S=p(m),n(m),m=S;n(b)},Ze=(m,b,S)=>{const{bum:E,scope:L,update:O,subTree:D,um:P}=m;E&&Ri(E),L.stop(),O&&(O.active=!1,Ve(D,m,b,S)),P&&ht(P,b),ht(()=>{m.isUnmounted=!0},b),b&&b.pendingBranch&&!b.isUnmounted&&m.asyncDep&&!m.asyncResolved&&m.suspenseId===b.pendingId&&(b.deps--,b.deps===0&&b.resolve())},X=(m,b,S,E=!1,L=!1,O=0)=>{for(let D=O;D<m.length;D++)Ve(m[D],b,S,E,L)},Me=m=>m.shapeFlag&6?Me(m.component.subTree):m.shapeFlag&128?m.suspense.next():p(m.anchor||m.el),js=(m,b,S)=>{m==null?b._vnode&&Ve(b._vnode,null,null,!0):x(b._vnode||null,m,b,null,null,null,S),ll(),Ta(),b._vnode=m},Xt={p:x,um:Ve,m:ze,r:Tt,mt:xe,mc:j,pc:ve,pbc:he,n:Me,o:e};let Us,qs;return t&&([Us,qs]=t(Xt)),{render:js,hydrate:Us,createApp:xf(js,Us)}}function ds({effect:e,update:t},s){e.allowRecurse=t.allowRecurse=s}function Ja(e,t,s=!1){const i=e.children,n=t.children;if(te(i)&&te(n))for(let o=0;o<i.length;o++){const r=i[o];let l=n[o];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=n[o]=es(n[o]),l.el=r.el),s||Ja(r,l)),l.type===pn&&(l.el=r.el)}}function Lf(e){const t=e.slice(),s=[0];let i,n,o,r,l;const c=e.length;for(i=0;i<c;i++){const d=e[i];if(d!==0){if(n=s[s.length-1],e[n]<d){t[i]=n,s.push(i);continue}for(o=0,r=s.length-1;o<r;)l=o+r>>1,e[s[l]]<d?o=l+1:r=l;d<e[s[o]]&&(o>0&&(t[i]=s[o-1]),s[o]=i)}}for(o=s.length,r=s[o-1];o-- >0;)s[o]=r,r=t[r];return s}const Ef=e=>e.__isTeleport,Pe=Symbol(void 0),pn=Symbol(void 0),kt=Symbol(void 0),Di=Symbol(void 0),si=[];let Lt=null;function N(e=!1){si.push(Lt=e?null:[])}function Mf(){si.pop(),Lt=si[si.length-1]||null}let ai=1;function vl(e){ai+=e}function Za(e){return e.dynamicChildren=ai>0?Lt||Ns:null,Mf(),ai>0&&Lt&&Lt.push(e),e}function z(e,t,s,i,n,o){return Za(a(e,t,s,i,n,o,!0))}function De(e,t,s,i,n){return Za(V(e,t,s,i,n,!0))}function Ki(e){return e?e.__v_isVNode===!0:!1}function bs(e,t){return e.type===t.type&&e.key===t.key}const gn="__vInternal",Ga=({key:e})=>e??null,Fi=({ref:e,ref_key:t,ref_for:s})=>e!=null?Xe(e)||st(e)||ce(e)?{i:it,r:e,k:t,f:!!s}:e:null;function a(e,t=null,s=null,i=0,n=null,o=e===Pe?0:1,r=!1,l=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Ga(t),ref:t&&Fi(t),scopeId:Oa,slotScopeIds:null,children:s,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:o,patchFlag:i,dynamicProps:n,dynamicChildren:null,appContext:null,ctx:it};return l?(Jo(c,s),o&128&&e.normalize(c)):s&&(c.shapeFlag|=Xe(s)?8:16),ai>0&&!r&&Lt&&(c.patchFlag>0||o&6)&&c.patchFlag!==32&&Lt.push(c),c}const V=Af;function Af(e,t=null,s=null,i=0,n=null,o=!1){if((!e||e===cf)&&(e=kt),Ki(e)){const l=ls(e,t,!0);return s&&Jo(l,s),ai>0&&!o&&Lt&&(l.shapeFlag&6?Lt[Lt.indexOf(e)]=l:Lt.push(l)),l.patchFlag|=-2,l}if(Bf(e)&&(e=e.__vccOpts),t){t=Tf(t);let{class:l,style:c}=t;l&&!Xe(l)&&(t.class=ct(l)),Ae(c)&&(ka(c)&&!te(c)&&(c=nt({},c)),t.style=Et(c))}const r=Xe(e)?1:qh(e)?128:Ef(e)?64:Ae(e)?4:ce(e)?2:0;return a(e,t,s,i,n,r,o,!0)}function Tf(e){return e?ka(e)||gn in e?nt({},e):e:null}function ls(e,t,s=!1){const{props:i,ref:n,patchFlag:o,children:r}=e,l=t?Qa(i||{},t):i;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&Ga(l),ref:t&&t.ref?s&&n?te(n)?n.concat(Fi(t)):[n,Fi(t)]:Fi(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:r,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Pe?o===-1?16:o|16:o,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&ls(e.ssContent),ssFallback:e.ssFallback&&ls(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function vn(e=" ",t=0){return V(pn,null,e,t)}function bn(e,t){const s=V(Di,null,e);return s.staticCount=t,s}function _e(e="",t=!1){return t?(N(),De(kt,null,e)):V(kt,null,e)}function Ot(e){return e==null||typeof e=="boolean"?V(kt):te(e)?V(Pe,null,e.slice()):typeof e=="object"?es(e):V(pn,null,String(e))}function es(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:ls(e)}function Jo(e,t){let s=0;const{shapeFlag:i}=e;if(t==null)t=null;else if(te(t))s=16;else if(typeof t=="object")if(i&65){const n=t.default;n&&(n._c&&(n._d=!1),Jo(e,n()),n._c&&(n._d=!0));return}else{s=32;const n=t._;!n&&!(gn in t)?t._ctx=it:n===3&&it&&(it.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else ce(t)?(t={default:t,_ctx:it},s=32):(t=String(t),i&64?(s=16,t=[vn(t)]):s=8);e.children=t,e.shapeFlag|=s}function Qa(...e){const t={};for(let s=0;s<e.length;s++){const i=e[s];for(const n in i)if(n==="class")t.class!==i.class&&(t.class=ct([t.class,i.class]));else if(n==="style")t.style=Et([t.style,i.style]);else if(nn(n)){const o=t[n],r=i[n];r&&o!==r&&!(te(o)&&o.includes(r))&&(t[n]=o?[].concat(o,r):r)}else n!==""&&(t[n]=i[n])}return t}function Nt(e,t,s,i=null){wt(e,t,7,[s,i])}const Nf=Xa();let Pf=0;function Of(e,t,s){const i=e.type,n=(t?t.appContext:e.appContext)||Nf,o={uid:Pf++,vnode:e,type:i,parent:t,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new Zd(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:qa(i,n),emitsOptions:Pa(i,n),emit:null,emitted:null,propsDefaults:He,inheritAttrs:i.inheritAttrs,ctx:He,data:He,props:He,attrs:He,slots:He,refs:He,setupState:He,setupContext:null,suspense:s,suspenseId:s?s.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return o.ctx={_:o},o.root=t?t.root:o,o.emit=Bh.bind(null,o),e.ce&&e.ce(o),o}let Ye=null;const $f=()=>Ye||it,Fs=e=>{Ye=e,e.scope.on()},Cs=()=>{Ye&&Ye.scope.off(),Ye=null};function ec(e){return e.vnode.shapeFlag&4}let ci=!1;function Hf(e,t=!1){ci=t;const{props:s,children:i}=e.vnode,n=ec(e);vf(e,s,n,t),wf(e,i);const o=n?Rf(e,t):void 0;return ci=!1,o}function Rf(e,t){const s=e.type;e.accessCache=Object.create(null),e.proxy=_a(new Proxy(e.ctx,df));const{setup:i}=s;if(i){const n=e.setupContext=i.length>1?Df(e):null;Fs(e),zs();const o=os(i,e,0,[e.props,n]);if(Vs(),Cs(),la(o)){if(o.then(Cs,Cs),t)return o.then(r=>{bl(e,r,t)}).catch(r=>{cn(r,e,0)});e.asyncDep=o}else bl(e,o,t)}else tc(e,t)}function bl(e,t,s){ce(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:Ae(t)&&(e.setupState=Sa(t)),tc(e,s)}let yl;function tc(e,t,s){const i=e.type;if(!e.render){if(!t&&yl&&!i.render){const n=i.template||Ko(e).template;if(n){const{isCustomElement:o,compilerOptions:r}=e.appContext.config,{delimiters:l,compilerOptions:c}=i,d=nt(nt({isCustomElement:o,delimiters:l},r),c);i.render=yl(n,d)}}e.render=i.render||Mt}Fs(e),zs(),hf(e),Vs(),Cs()}function If(e){return new Proxy(e.attrs,{get(t,s){return ft(e,"get","$attrs"),t[s]}})}function Df(e){const t=i=>{e.exposed=i||{}};let s;return{get attrs(){return s||(s=If(e))},slots:e.slots,emit:e.emit,expose:t}}function yn(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(Sa(_a(e.exposed)),{get(t,s){if(s in t)return t[s];if(s in ti)return ti[s](e)},has(t,s){return s in t||s in ti}}))}function Ff(e,t=!0){return ce(e)?e.displayName||e.name:e.name||t&&e.__name}function Bf(e){return ce(e)&&"__vccOpts"in e}const Ut=(e,t)=>$h(e,t,ci);function zf(e,t,s){const i=arguments.length;return i===2?Ae(t)&&!te(t)?Ki(t)?V(e,null,[t]):V(e,t):V(e,null,t):(i>3?s=Array.prototype.slice.call(arguments,2):i===3&&Ki(s)&&(s=[s]),V(e,t,s))}const Vf=Symbol(""),jf=()=>Ii(Vf),Uf="3.2.47",qf="http://www.w3.org/2000/svg",ys=typeof document<"u"?document:null,wl=ys&&ys.createElement("template"),Wf={insert:(e,t,s)=>{t.insertBefore(e,s||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,s,i)=>{const n=t?ys.createElementNS(qf,e):ys.createElement(e,s?{is:s}:void 0);return e==="select"&&i&&i.multiple!=null&&n.setAttribute("multiple",i.multiple),n},createText:e=>ys.createTextNode(e),createComment:e=>ys.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>ys.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,s,i,n,o){const r=s?s.previousSibling:t.lastChild;if(n&&(n===o||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),s),!(n===o||!(n=n.nextSibling)););else{wl.innerHTML=i?`<svg>${e}</svg>`:e;const l=wl.content;if(i){const c=l.firstChild;for(;c.firstChild;)l.appendChild(c.firstChild);l.removeChild(c)}t.insertBefore(l,s)}return[r?r.nextSibling:t.firstChild,s?s.previousSibling:t.lastChild]}};function Yf(e,t,s){const i=e._vtc;i&&(t=(t?[t,...i]:[...i]).join(" ")),t==null?e.removeAttribute("class"):s?e.setAttribute("class",t):e.className=t}function Kf(e,t,s){const i=e.style,n=Xe(s);if(s&&!n){if(t&&!Xe(t))for(const o in t)s[o]==null&&So(i,o,"");for(const o in s)So(i,o,s[o])}else{const o=i.display;n?t!==s&&(i.cssText=s):t&&e.removeAttribute("style"),"_vod"in e&&(i.display=o)}}const kl=/\s*!important$/;function So(e,t,s){if(te(s))s.forEach(i=>So(e,t,i));else if(s==null&&(s=""),t.startsWith("--"))e.setProperty(t,s);else{const i=Xf(e,t);kl.test(s)?e.setProperty(Bs(i),s.replace(kl,""),"important"):e[i]=s}}const _l=["Webkit","Moz","ms"],to={};function Xf(e,t){const s=to[t];if(s)return s;let i=It(t);if(i!=="filter"&&i in e)return to[t]=i;i=ln(i);for(let n=0;n<_l.length;n++){const o=_l[n]+i;if(o in e)return to[t]=o}return t}const xl="http://www.w3.org/1999/xlink";function Jf(e,t,s,i,n){if(i&&t.startsWith("xlink:"))s==null?e.removeAttributeNS(xl,t.slice(6,t.length)):e.setAttributeNS(xl,t,s);else{const o=Bd(t);s==null||o&&!oa(s)?e.removeAttribute(t):e.setAttribute(t,o?"":s)}}function Zf(e,t,s,i,n,o,r){if(t==="innerHTML"||t==="textContent"){i&&r(i,n,o),e[t]=s??"";return}if(t==="value"&&e.tagName!=="PROGRESS"&&!e.tagName.includes("-")){e._value=s;const c=s??"";(e.value!==c||e.tagName==="OPTION")&&(e.value=c),s==null&&e.removeAttribute(t);return}let l=!1;if(s===""||s==null){const c=typeof e[t];c==="boolean"?s=oa(s):s==null&&c==="string"?(s="",l=!0):c==="number"&&(s=0,l=!0)}try{e[t]=s}catch{}l&&e.removeAttribute(t)}function ws(e,t,s,i){e.addEventListener(t,s,i)}function Gf(e,t,s,i){e.removeEventListener(t,s,i)}function Qf(e,t,s,i,n=null){const o=e._vei||(e._vei={}),r=o[t];if(i&&r)r.value=i;else{const[l,c]=em(t);if(i){const d=o[t]=im(i,n);ws(e,l,d,c)}else r&&(Gf(e,l,r,c),o[t]=void 0)}}const Cl=/(?:Once|Passive|Capture)$/;function em(e){let t;if(Cl.test(e)){t={};let i;for(;i=e.match(Cl);)e=e.slice(0,e.length-i[0].length),t[i[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):Bs(e.slice(2)),t]}let so=0;const tm=Promise.resolve(),sm=()=>so||(tm.then(()=>so=0),so=Date.now());function im(e,t){const s=i=>{if(!i._vts)i._vts=Date.now();else if(i._vts<=s.attached)return;wt(nm(i,s.value),t,5,[i])};return s.value=e,s.attached=sm(),s}function nm(e,t){if(te(t)){const s=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{s.call(e),e._stopped=!0},t.map(i=>n=>!n._stopped&&i&&i(n))}else return t}const Sl=/^on[a-z]/,om=(e,t,s,i,n=!1,o,r,l,c)=>{t==="class"?Yf(e,i,n):t==="style"?Kf(e,s,i):nn(t)?$o(t)||Qf(e,t,s,i,r):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):rm(e,t,i,n))?Zf(e,t,i,o,r,l,c):(t==="true-value"?e._trueValue=i:t==="false-value"&&(e._falseValue=i),Jf(e,t,i,n))};function rm(e,t,s,i){return i?!!(t==="innerHTML"||t==="textContent"||t in e&&Sl.test(t)&&ce(s)):t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA"||Sl.test(t)&&Xe(s)?!1:t in e}const Gt="transition",Ys="animation",wn=(e,{slots:t})=>zf(Ra,lm(e),t);wn.displayName="Transition";const sc={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String};wn.props=nt({},Ra.props,sc);const hs=(e,t=[])=>{te(e)?e.forEach(s=>s(...t)):e&&e(...t)},Ll=e=>e?te(e)?e.some(t=>t.length>1):e.length>1:!1;function lm(e){const t={};for(const B in e)B in sc||(t[B]=e[B]);if(e.css===!1)return t;const{name:s="v",type:i,duration:n,enterFromClass:o=`${s}-enter-from`,enterActiveClass:r=`${s}-enter-active`,enterToClass:l=`${s}-enter-to`,appearFromClass:c=o,appearActiveClass:d=r,appearToClass:g=l,leaveFromClass:v=`${s}-leave-from`,leaveActiveClass:p=`${s}-leave-active`,leaveToClass:w=`${s}-leave-to`}=e,k=am(n),x=k&&k[0],C=k&&k[1],{onBeforeEnter:R,onEnter:Z,onEnterCancelled:Y,onLeave:se,onLeaveCancelled:ne,onBeforeAppear:be=R,onAppear:ue=Z,onAppearCancelled:j=Y}=t,q=(B,pe,xe)=>{fs(B,pe?g:l),fs(B,pe?d:r),xe&&xe()},he=(B,pe)=>{B._isLeaving=!1,fs(B,v),fs(B,w),fs(B,p),pe&&pe()},de=B=>(pe,xe)=>{const oe=B?ue:Z,fe=()=>q(pe,B,xe);hs(oe,[pe,fe]),El(()=>{fs(pe,B?c:o),Qt(pe,B?g:l),Ll(oe)||Ml(pe,i,x,fe)})};return nt(t,{onBeforeEnter(B){hs(R,[B]),Qt(B,o),Qt(B,r)},onBeforeAppear(B){hs(be,[B]),Qt(B,c),Qt(B,d)},onEnter:de(!1),onAppear:de(!0),onLeave(B,pe){B._isLeaving=!0;const xe=()=>he(B,pe);Qt(B,v),dm(),Qt(B,p),El(()=>{B._isLeaving&&(fs(B,v),Qt(B,w),Ll(se)||Ml(B,i,C,xe))}),hs(se,[B,xe])},onEnterCancelled(B){q(B,!1),hs(Y,[B])},onAppearCancelled(B){q(B,!0),hs(j,[B])},onLeaveCancelled(B){he(B),hs(ne,[B])}})}function am(e){if(e==null)return null;if(Ae(e))return[io(e.enter),io(e.leave)];{const t=io(e);return[t,t]}}function io(e){return Xd(e)}function Qt(e,t){t.split(/\s+/).forEach(s=>s&&e.classList.add(s)),(e._vtc||(e._vtc=new Set)).add(t)}function fs(e,t){t.split(/\s+/).forEach(i=>i&&e.classList.remove(i));const{_vtc:s}=e;s&&(s.delete(t),s.size||(e._vtc=void 0))}function El(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let cm=0;function Ml(e,t,s,i){const n=e._endId=++cm,o=()=>{n===e._endId&&i()};if(s)return setTimeout(o,s);const{type:r,timeout:l,propCount:c}=um(e,t);if(!r)return i();const d=r+"end";let g=0;const v=()=>{e.removeEventListener(d,p),o()},p=w=>{w.target===e&&++g>=c&&v()};setTimeout(()=>{g<c&&v()},l+1),e.addEventListener(d,p)}function um(e,t){const s=window.getComputedStyle(e),i=k=>(s[k]||"").split(", "),n=i(`${Gt}Delay`),o=i(`${Gt}Duration`),r=Al(n,o),l=i(`${Ys}Delay`),c=i(`${Ys}Duration`),d=Al(l,c);let g=null,v=0,p=0;t===Gt?r>0&&(g=Gt,v=r,p=o.length):t===Ys?d>0&&(g=Ys,v=d,p=c.length):(v=Math.max(r,d),g=v>0?r>d?Gt:Ys:null,p=g?g===Gt?o.length:c.length:0);const w=g===Gt&&/\b(transform|all)(,|$)/.test(i(`${Gt}Property`).toString());return{type:g,timeout:v,propCount:p,hasTransform:w}}function Al(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((s,i)=>Tl(s)+Tl(e[i])))}function Tl(e){return Number(e.slice(0,-1).replace(",","."))*1e3}function dm(){return document.body.offsetHeight}const Xi=e=>{const t=e.props["onUpdate:modelValue"]||!1;return te(t)?s=>Ri(t,s):t};function hm(e){e.target.composing=!0}function Nl(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const ic={created(e,{modifiers:{lazy:t,trim:s,number:i}},n){e._assign=Xi(n);const o=i||n.props&&n.props.type==="number";ws(e,t?"change":"input",r=>{if(r.target.composing)return;let l=e.value;s&&(l=l.trim()),o&&(l=Vi(l)),e._assign(l)}),s&&ws(e,"change",()=>{e.value=e.value.trim()}),t||(ws(e,"compositionstart",hm),ws(e,"compositionend",Nl),ws(e,"change",Nl))},mounted(e,{value:t}){e.value=t??""},beforeUpdate(e,{value:t,modifiers:{lazy:s,trim:i,number:n}},o){if(e._assign=Xi(o),e.composing||document.activeElement===e&&e.type!=="range"&&(s||i&&e.value.trim()===t||(n||e.type==="number")&&Vi(e.value)===t))return;const r=t??"";e.value!==r&&(e.value=r)}},fm={deep:!0,created(e,{value:t,modifiers:{number:s}},i){const n=on(t);ws(e,"change",()=>{const o=Array.prototype.filter.call(e.options,r=>r.selected).map(r=>s?Vi(Ji(r)):Ji(r));e._assign(e.multiple?n?new Set(o):o:o[0])}),e._assign=Xi(i)},mounted(e,{value:t}){Pl(e,t)},beforeUpdate(e,t,s){e._assign=Xi(s)},updated(e,{value:t}){Pl(e,t)}};function Pl(e,t){const s=e.multiple;if(!(s&&!te(t)&&!on(t))){for(let i=0,n=e.options.length;i<n;i++){const o=e.options[i],r=Ji(o);if(s)te(t)?o.selected=Vd(t,r)>-1:o.selected=t.has(r);else if(sn(Ji(o),t)){e.selectedIndex!==i&&(e.selectedIndex=i);return}}!s&&e.selectedIndex!==-1&&(e.selectedIndex=-1)}}function Ji(e){return"_value"in e?e._value:e.value}const mm=["ctrl","shift","alt","meta"],pm={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,t)=>mm.some(s=>e[`${s}Key`]&&!t.includes(s))},Zo=(e,t)=>(s,...i)=>{for(let n=0;n<t.length;n++){const o=pm[t[n]];if(o&&o(s,t))return}return e(s,...i)},gm={beforeMount(e,{value:t},{transition:s}){e._vod=e.style.display==="none"?"":e.style.display,s&&t?s.beforeEnter(e):Ks(e,t)},mounted(e,{value:t},{transition:s}){s&&t&&s.enter(e)},updated(e,{value:t,oldValue:s},{transition:i}){!t!=!s&&(i?t?(i.beforeEnter(e),Ks(e,!0),i.enter(e)):i.leave(e,()=>{Ks(e,!1)}):Ks(e,t))},beforeUnmount(e,{value:t}){Ks(e,t)}};function Ks(e,t){e.style.display=t?e._vod:"none"}const vm=nt({patchProp:om},Wf);let Ol;function bm(){return Ol||(Ol=Cf(vm))}const ym=(...e)=>{const t=bm().createApp(...e),{mount:s}=t;return t.mount=i=>{const n=wm(i);if(!n)return;const o=t._component;!ce(o)&&!o.render&&!o.template&&(o.template=n.innerHTML),n.innerHTML="";const r=s(n,!1,n instanceof SVGElement);return n instanceof Element&&(n.removeAttribute("v-cloak"),n.setAttribute("data-v-app","")),r},t};function wm(e){return Xe(e)?document.querySelector(e):e}const Je=(e,t)=>{const s=e.__vccOpts||e;for(const[i,n]of t)s[i]=n;return s},km={data(){return{previewMode:"desktop"}},methods:{setPreviewMode(e){this.previewMode=e,this.emulatorSet(e)},emulatorSet(e){var t={tablet:800,phone:400,desktop:"100%"},s=function(i){var n=t[i];typeof n=="number"&&(n=n+"px"),mw.app.canvas.getFrame().style.width=n};s(e)}}},_m={id:"preview-nav",class:"toolbar-nav toolbar-nav-hover"},xm={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 48 36.17",style:{"enable-background":"new 0 0 48 36.17"},"xml:space":"preserve"},Cm=a("path",{d:`M25.59,34.11h-3.58v-6.59h3.58V34.11z M14.16,34.88L14.16,34.88c0-0.71,0.58-1.29,1.29-1.29h17.1\r
                        c0.71,0,1.29,0.58,1.29,1.29v0c0,0.71-0.58,1.29-1.29,1.29h-17.1C14.74,36.17,14.16,35.59,14.16,34.88z`},null,-1),Sm=a("path",{class:"st0",d:`M3.32,27.6h41.35c1.53,0,2.76-1.24,2.76-2.76V3.24c0-1.53-1.24-2.76-2.76-2.76H3.32\r
                        c-1.53,0-2.76,1.24-2.76,2.76v21.6C0.56,26.37,1.8,27.6,3.32,27.6z`},null,-1),Lm=[Cm,Sm],Em={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 48 48",style:{"enable-background":"new 0 0 48 48"},"xml:space":"preserve"},Mm=a("path",{class:"st0",d:`M24.45,39.5c0.56,0,1.03-0.18,1.39-0.55c0.37-0.37,0.55-0.83,0.55-1.39s-0.18-1.03-0.55-1.39\r
                    c-0.37-0.37-0.83-0.55-1.39-0.55s-1.03,0.18-1.39,0.55c-0.37,0.37-0.55,0.83-0.55,1.39s0.18,1.03,0.55,1.39\r
                    C23.42,39.32,23.88,39.5,24.45,39.5z M7,46c-0.8,0-1.5-0.3-2.1-0.9C4.3,44.5,4,43.8,4,43V5c0-0.8,0.3-1.5,0.9-2.1C5.5,2.3,6.2,2,7,2\r
                    h34c0.8,0,1.5,0.3,2.1,0.9C43.7,3.5,44,4.2,44,5v38c0,0.8-0.3,1.5-0.9,2.1C42.5,45.7,41.8,46,41,46H7z`},null,-1),Am=[Mm],Tm={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 48 48",style:{"enable-background":"new 0 0 48 48"},"xml:space":"preserve"},Nm=a("path",{class:"st0",d:`M18,11.5c0.43,0,0.79-0.14,1.08-0.43c0.28-0.28,0.42-0.64,0.42-1.07s-0.14-0.79-0.42-1.07\r
                    C18.79,8.64,18.43,8.5,18,8.5s-0.79,0.14-1.08,0.43C16.64,9.21,16.5,9.57,16.5,10s0.14,0.79,0.42,1.07\r
                    C17.21,11.36,17.57,11.5,18,11.5z M13,46c-0.8,0-1.5-0.3-2.1-0.9C10.3,44.5,10,43.8,10,43V5c0-0.8,0.3-1.5,0.9-2.1\r
                    C11.5,2.3,12.2,2,13,2h22c0.8,0,1.5,0.3,2.1,0.9C37.7,3.5,38,4.2,38,5v38c0,0.8-0.3,1.5-0.9,2.1C36.5,45.7,35.8,46,35,46H13z`},null,-1),Pm=[Nm];function Om(e,t,s,i,n,o){return N(),z("div",null,[a("nav",_m,[a("span",{onClick:t[0]||(t[0]=r=>o.setPreviewMode("desktop")),"data-preview":"desktop",class:ct([n.previewMode=="desktop"?"active":""])},[(N(),z("svg",xm,Lm))],2),a("span",{onClick:t[1]||(t[1]=r=>o.setPreviewMode("tablet")),"data-preview":"tablet",class:ct([n.previewMode=="tablet"?"active":""])},[(N(),z("svg",Em,Am))],2),a("span",{onClick:t[2]||(t[2]=r=>o.setPreviewMode("phone")),"data-preview":"phone",class:ct([n.previewMode=="phone"?"active":""])},[(N(),z("svg",Tm,Pm))],2)])])}const $m=Je(km,[["render",Om]]),Hm={data(){},mounted(){mw.app.on("ready",()=>{new Rc,Ed()})}},Rm=a("div",{class:"toolbar-nav",id:"mw-live-edit-editor"},null,-1),Im=[Rm];function Dm(e,t,s,i,n,o){return N(),z("div",null,Im)}const Fm=Je(Hm,[["render",Dm]]),Bm={},zm=bn('<button class="mw-le-btn mw-le-btn-icon" id="toolbar-undo" disabled><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12.5,8C9.85,8 7.45,9 5.6,10.6L2,7V16H11L7.38,12.38C8.77,11.22 10.54,10.5 12.5,10.5C16.04,10.5 19.05,12.81 20.1,16L22.47,15.22C21.08,11.03 17.15,8 12.5,8Z"></path></svg></button><button class="mw-le-btn mw-le-btn-icon" id="toolbar-redo" disabled><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.4,10.6C16.55,9 14.15,8 11.5,8C6.85,8 2.92,11.03 1.54,15.22L3.9,16C4.95,12.81 7.95,10.5 11.5,10.5C13.45,10.5 15.23,11.22 16.62,12.38L13,16H22V7L18.4,10.6Z"></path></svg></button>',2);function Vm(e,t){return zm}const jm=Je(Bm,[["render",Vm]]),Um={data(){}},qm={class:"mw-le-btn mw-le-btn-primary",id:"save-button"};function Wm(e,t,s,i,n,o){return N(),z("span",qm," Save ")}const Ym=Je(Um,[["render",Wm]]),Km={components:{SaveButton:Ym,UndoRedo:jm,Editor:Fm,ResolutionSwitch:$m},data(){}},Xm={id:"toolbar"},Jm={class:"toolbar-nav toolbar-nav-hover"},Zm={href:"",class:"mw-le-btn mw-le-btn-icon mw-le-btn-primary2"},Gm={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",style:{width:"32px"}},Qm=a("path",{d:"M21,11H6.83L10.41,7.41L9,6L3,12L9,18L10.41,16.58L6.83,13H21V11Z"},null,-1),ep=[Qm],tp={class:"toolbar-col"},sp={class:"toolbar-nav toolbar-nav-hover"},ip=a("span",{style:{width:"50px"}},null,-1),np=a("span",{class:"mw-le-btn mw-le-btn-icon",id:"preview-button",onclick:"pagePreviewToggle()"},[a("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},[a("title",null,"eye"),a("path",{d:"M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17M12,4.5C7,4.5 2.73,7.61 1,12C2.73,16.39 7,19.5 12,19.5C17,19.5 21.27,16.39 23,12C21.27,7.61 17,4.5 12,4.5Z"})])],-1),op=bn('<div id="user-menu-wrapper"><span class="mw-le-hamburger" id="toolbar-user-menu-button"><span></span><span></span><span></span></span><div id="user-menu" class="mw-le-nav-box"><div class="mw-le-nav-box-content" id="user-menu-header"><small>Project</small><h3>Boris Website</h3><span class="mw-le-btn mw-le-btn-sm"> In Test Period </span><span class="mw-le-btn mw-le-btn-sm mw-le-btn-primary2"> Upgrade </span></div><nav><a href=""><svg viewBox="0 0 40 40"><path d="M20 27.3l2.1-2.1-3.7-3.7h9.1v-3h-9.1l3.7-3.7-2.1-2.1-7.3 7.3 7.3 7.3zM20 40c-2.73 0-5.32-.52-7.75-1.58-2.43-1.05-4.56-2.48-6.38-4.3s-3.25-3.94-4.3-6.38S0 22.73 0 20c0-2.77.53-5.37 1.57-7.8s2.48-4.55 4.3-6.35 3.94-3.22 6.38-4.28S17.27 0 20 0c2.77 0 5.37.53 7.8 1.57s4.55 2.48 6.35 4.28c1.8 1.8 3.23 3.92 4.28 6.35C39.48 14.63 40 17.23 40 20c0 2.73-.52 5.32-1.58 7.75-1.05 2.43-2.48 4.56-4.28 6.38-1.8 1.82-3.92 3.25-6.35 4.3C25.37 39.48 22.77 40 20 40zm0-3c4.73 0 8.75-1.66 12.05-4.97C35.35 28.71 37 24.7 37 20c0-4.73-1.65-8.75-4.95-12.05C28.75 4.65 24.73 3 20 3c-4.7 0-8.71 1.65-12.02 4.95S3 15.27 3 20c0 4.7 1.66 8.71 4.98 12.03C11.29 35.34 15.3 37 20 37z"></path></svg> Back to Admin </a><a href=""><svg xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 40 40" xml:space="preserve" enable-background="new 0 0 40 40"><path d="M14.7 23c-2 0-3.6-.7-5-2-1.3-1.4-2-3-2-4.9 0-1.9.7-3.5 2-4.9 1.4-1.3 3-2 5-2 1.8 0 3.5.7 4.8 2 1.4 1.4 2 3 2 4.9 0 1.9-.6 3.5-2 4.9-1.3 1.3-3 2-4.8 2zm0-3a3.8 3.8 0 0 0 3.9-3.9c0-1.1-.4-2-1.2-2.8a3.8 3.8 0 0 0-2.7-1c-1.1 0-2 .3-2.8 1-.8.8-1.1 1.7-1.1 2.8 0 1 .3 2 1.1 2.8.8.7 1.7 1.1 2.8 1.1zm15 5.3c-1.5 0-2.7-.5-3.8-1.6-1-1-1.5-2.2-1.5-3.7s.5-2.7 1.6-3.8 2.2-1.5 3.7-1.5 2.7.5 3.8 1.6S35 18.4 35 20s-.5 2.7-1.6 3.8-2.2 1.5-3.7 1.5zM17.1 36.8c1.6-3 3.6-5 6.1-6S28 29 29.7 29a12.6 12.6 0 0 1 4.2.6A18.3 18.3 0 0 0 37 20c0-4.7-1.6-8.8-5-12-3.3-3.3-7.3-5-12-5S11.2 4.7 8 8a16.8 16.8 0 0 0-2.2 21.2 19.2 19.2 0 0 1 13.8-1.4 13.6 13.6 0 0 0-3.2 2.2H14.8a16.2 16.2 0 0 0-7.1 1.6c1.2 1.4 2.7 2.5 4.3 3.4s3.4 1.5 5.2 1.8zM20 40A20.3 20.3 0 0 1 1.6 27.7 19.4 19.4 0 0 1 5.9 5.8a20.2 20.2 0 0 1 21.9-4.2A20.3 20.3 0 0 1 40 20a20.3 20.3 0 0 1-12.2 18.4c-2.4 1-5 1.6-7.8 1.6z"></path></svg> Users </a><a href=""><svg viewBox="0 0 40 40"><path d="M15.4 40l-1-6.3c-.63-.23-1.3-.55-2-.95-.7-.4-1.32-.82-1.85-1.25l-5.9 2.7L0 26l5.4-3.95a5.1 5.1 0 01-.12-1.02c-.02-.39-.03-.73-.03-1.03s.01-.64.02-1.02c.02-.38.06-.73.12-1.02L0 14l4.65-8.2 5.9 2.7c.53-.43 1.15-.85 1.85-1.25.7-.4 1.37-.7 2-.9l1-6.35h9.2l1 6.3c.63.23 1.31.54 2.02.93.72.38 1.33.81 1.83 1.27l5.9-2.7L40 14l-5.4 3.85c.07.33.11.69.12 1.08a19.5 19.5 0 010 2.13c-.02.37-.06.72-.12 1.05L40 26l-4.65 8.2-5.9-2.7c-.53.43-1.14.86-1.83 1.28-.68.42-1.36.72-2.02.92l-1 6.3h-9.2zM20 26.5c1.8 0 3.33-.63 4.6-1.9s1.9-2.8 1.9-4.6-.63-3.33-1.9-4.6-2.8-1.9-4.6-1.9-3.33.63-4.6 1.9-1.9 2.8-1.9 4.6.63 3.33 1.9 4.6 2.8 1.9 4.6 1.9zm0-3c-.97 0-1.79-.34-2.48-1.02-.68-.68-1.02-1.51-1.02-2.48s.34-1.79 1.02-2.48c.68-.68 1.51-1.02 2.48-1.02s1.79.34 2.48 1.02c.68.68 1.02 1.51 1.02 2.48s-.34 1.79-1.02 2.48c-.69.68-1.51 1.02-2.48 1.02zM17.8 37h4.4l.7-5.6c1.1-.27 2.14-.68 3.12-1.25s1.88-1.25 2.68-2.05l5.3 2.3 2-3.6-4.7-3.45c.13-.57.24-1.12.33-1.67s.12-1.11.12-1.67-.03-1.12-.1-1.67-.18-1.11-.35-1.67L36 13.2l-2-3.6-5.3 2.3c-.77-.87-1.63-1.59-2.6-2.17s-2.03-.96-3.2-1.12L22.2 3h-4.4l-.7 5.6c-1.13.23-2.19.63-3.17 1.2s-1.86 1.27-2.62 2.1L6 9.6l-2 3.6 4.7 3.45c-.13.57-.24 1.12-.32 1.67s-.13 1.11-.13 1.68.04 1.12.12 1.67c.08.55.19 1.11.32 1.67L4 26.8l2 3.6 5.3-2.3c.8.8 1.69 1.48 2.68 2.05s2.02.98 3.12 1.25l.7 5.6z"></path></svg> Website Settings </a><a href=""><svg viewBox="0 0 40 32.29"><path d="M40 3v26c0 .8-.3 1.5-.9 2.1-.6.6-1.3.9-2.1.9H3c-.8 0-1.5-.3-2.1-.9-.6-.6-.9-1.3-.9-2.1V3C0 2.2.3 1.5.9.9 1.5.3 2.2 0 3 0h34c.8 0 1.5.3 2.1.9.6.6.9 1.3.9 2.1zM3 8.45h34V3H3v5.45zm0 6.45V29h34V14.9H3zM3 29V3v26z"></path></svg> Plans and Payments </a><a href=""><svg viewBox="0 0 36 36.1"><path d="M3 36.1c-.8 0-1.5-.3-2.1-.9-.6-.6-.9-1.3-.9-2.1V22.6h3v10.5h30V3H3v10.6H0V3C0 2.2.3 1.5.9.9S2.2 0 3 0h30c.8 0 1.5.3 2.1.9.6.6.9 1.3.9 2.1v30.1c0 .8-.3 1.5-.9 2.1-.6.6-1.3.9-2.1.9H3zm11.65-8.35L12.4 25.5l5.9-5.9H0v-3h18.3l-5.9-5.9 2.25-2.25 9.65 9.65-9.65 9.65z"></path></svg> Log out </a></nav></div></div>',1);function rp(e,t,s,i,n,o){const r=Re("ResolutionSwitch"),l=Re("Editor"),c=Re("UndoRedo"),d=Re("SaveButton");return N(),z("div",Xm,[a("div",Jm,[a("a",Zm,[(N(),z("svg",Gm,ep))])]),V(r),V(l),a("div",tp,[a("div",sp,[V(c),V(d)]),ip,np,op])])}const lp=Je(Km,[["render",rp]]);function ap(e,t){return N(),De("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"2",stroke:"currentColor","aria-hidden":"true"},[V("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"}),V("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15 12a3 3 0 11-6 0 3 3 0 016 0z"})])}function cp(e,t){return N(),De("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"2",stroke:"currentColor","aria-hidden":"true"},[V("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"})])}function up(e,t){return N(),De("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"2",stroke:"currentColor","aria-hidden":"true"},[V("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"}),V("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21 12a9 9 0 11-18 0 9 9 0 0118 0z"})])}const dp={},hp={version:"1.1",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 129 129","xmlns:xlink":"http://www.w3.org/1999/xlink"},fp=a("g",null,[a("g",null,[a("path",{d:"m10.5,58.9h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3c0-2.3-1.8-4.1-4.1-4.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.2 1.9,4.1 4.1,4.1zm4.1-44.3h36.1v36.1h-36.1v-36.1z"}),a("path",{d:"m122.6,10.5c0-2.3-1.8-4.1-4.1-4.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.3 1.8,4.1 4.1,4.1h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3zm-8.2,40.2h-36.1v-36.1h36.1v36.1z"}),a("path",{d:"m10.5,122.6h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3c0-2.3-1.8-4.1-4.1-4.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.2 1.9,4.1 4.1,4.1zm4.1-44.3h36.1v36.1h-36.1v-36.1z"}),a("path",{d:"m118.5,70.1h-44.3c-2.3,0-4.1,1.8-4.1,4.1v44.3c0,2.3 1.8,4.1 4.1,4.1h44.3c2.3,0 4.1-1.8 4.1-4.1v-44.3c0-2.2-1.9-4.1-4.1-4.1zm-4.1,44.3h-36.1v-36.1h36.1v36.1z"})])],-1),mp=[fp];function pp(e,t){return N(),z("svg",hp,mp)}const gp=Je(dp,[["render",pp]]),vp={},bp={version:"1.1",id:"Capa_1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",width:"612px",height:"612px",viewBox:"0 0 612 612","xml:space":"preserve"},yp=a("g",null,[a("g",{id:"_x33__32_"},[a("g",null,[a("path",{d:`M59.226,88.839C26.513,88.839,0,115.352,0,148.064s26.513,59.226,59.226,59.226s59.226-26.514,59.226-59.226\r
				S91.938,88.839,59.226,88.839z M59.226,246.774C26.513,246.774,0,273.288,0,306c0,32.713,26.513,59.226,59.226,59.226\r
				s59.226-26.513,59.226-59.226C118.452,273.288,91.938,246.774,59.226,246.774z M59.226,404.71C26.513,404.71,0,431.223,0,463.936\r
				c0,32.712,26.513,59.226,59.226,59.226s59.226-26.514,59.226-59.226C118.452,431.223,91.938,404.71,59.226,404.71z\r
				 M197.419,187.548h375.096c21.815,0,39.484-17.669,39.484-39.484s-17.669-39.484-39.484-39.484H197.419\r
				c-21.815,0-39.484,17.669-39.484,39.484S175.604,187.548,197.419,187.548z M572.516,266.516H197.419\r
				c-21.815,0-39.484,17.669-39.484,39.484c0,21.814,17.669,39.484,39.484,39.484h375.096c21.815,0,39.484-17.67,39.484-39.484\r
				C612,284.185,594.331,266.516,572.516,266.516z M572.516,424.451H197.419c-21.815,0-39.484,17.67-39.484,39.484\r
				s17.669,39.483,39.484,39.483h375.096c21.815,0,39.484-17.669,39.484-39.483S594.331,424.451,572.516,424.451z`})])])],-1),wp=a("g",null,null,-1),kp=a("g",null,null,-1),_p=a("g",null,null,-1),xp=a("g",null,null,-1),Cp=a("g",null,null,-1),Sp=a("g",null,null,-1),Lp=a("g",null,null,-1),Ep=a("g",null,null,-1),Mp=a("g",null,null,-1),Ap=a("g",null,null,-1),Tp=a("g",null,null,-1),Np=a("g",null,null,-1),Pp=a("g",null,null,-1),Op=a("g",null,null,-1),$p=a("g",null,null,-1),Hp=[yp,wp,kp,_p,xp,Cp,Sp,Lp,Ep,Mp,Ap,Tp,Np,Pp,Op,$p];function Rp(e,t){return N(),z("svg",bp,Hp)}const Ip=Je(vp,[["render",Rp]]),Dp={},Fp={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 1000 1000","xml:space":"preserve"},Bp=bn('<g><g transform="translate(0.000000,511.000000) scale(0.100000,-0.100000)"><path d="M4905.7,4342.3c-33.5-8.4-475.7-224.2-980.7-475.7l-920-461l1104.4-509.2L5213.7,2385l77.5,44c41.9,23.1,391.9,213.8,777.5,423.3c385.6,209.6,762.8,414.9,836.2,456.8l136.2,73.3l-953.5,475.7c-570,287.1-984.9,482-1035.2,488.3C5006.3,4352.8,4941.3,4350.7,4905.7,4342.3z"></path><path d="M2782.9,2037.2l6.3-961.9l62.9-92.2c58.7-85.9,119.4-117.3,1037.3-578.4C4425.8,136.5,4895.2-87.8,4932.9-96.2l67.1-12.6l-4.2,1043.6l-6.3,1043.6l-1037.3,477.8c-570,264-1068.7,492.5-1106.5,511.3l-69.2,31.4L2782.9,2037.2z"></path><path d="M6330.7,2466.8l-859.2-469.4l-6.3-955.6c-2.1-526,2.1-955.6,10.5-955.6c10.5,2.1,375.1,182.3,813.1,404.4c741.8,375.1,800.5,408.6,859.2,492.5l62.9,92.2l6.3,930.4c2.1,511.3-2.1,930.4-10.5,930.4C7198.3,2936.2,6804.3,2724.5,6330.7,2466.8z"></path><path d="M2223.3,318.8c-33.5-8.4-486.2-228.4-1003.8-488.3L276.6-641l366.7-199.1c201.2-111.1,576.3-316.4,836.1-456.8c259.8-140.4,505-274.5,546.9-297.6l77.5-44l1104.4,511.3l1104.4,509.2l-930.4,465.2C2826.9,123.9,2420.3,316.7,2370,323C2323.9,329.3,2259,327.2,2223.3,318.8z"></path><path d="M7588,318.8c-33.5-8.4-475.7-224.2-980.7-475.7l-920-461l1104.4-509.2l1104.4-511.3l75.4,41.9c44,25.1,394,215.8,779.6,425.4c385.6,209.6,762.8,414.9,836.1,456.8l136.2,73.3L8770-165.3C8200,121.8,7785,316.7,7734.7,323C7688.6,329.3,7623.7,327.2,7588,318.8z"></path><path d="M3428.3-1537.9L2328.1-2045l-6.3-1043.6l-4.2-1041.5l77.5,14.7c41.9,6.3,509.2,230.5,1037.3,494.6c873.8,438,966.1,488.3,1022.6,565.8c33.5,48.2,67.1,115.3,73.3,153c6.3,35.6,8.4,471.5,6.3,968.2l-6.3,905.3L3428.3-1537.9z"></path><path d="M5465.2-1986.4l6.3-961.9l62.9-92.2c58.7-83.8,119.5-119.5,1026.8-576.3c532.3-266.1,1001.7-490.4,1043.6-498.8l77.5-14.7l-4.2,1041.5l-6.3,1043.6l-1037.3,477.8c-570,264-1068.8,492.5-1106.5,511.3l-69.2,31.4L5465.2-1986.4z"></path><path d="M100.5-2017.8l6.3-930.4l62.9-92.2c58.7-83.8,117.4-117.3,859.2-492.5c438-222.1,802.6-402.4,813.1-404.4c8.4,0,12.6,429.6,10.5,955.6l-6.3,955.6L987-1556.8c-473.6,257.7-867.6,469.4-876,469.4C102.6-1087.4,98.4-1506.5,100.5-2017.8z"></path><path d="M9013-1556.8l-859.2-469.4l-6.3-955.6c-2.1-526,2.1-955.6,10.5-955.6c10.5,2.1,375.1,182.3,813.1,404.4c741.8,375.1,800.5,408.6,859.2,492.5l62.9,92.2l6.3,930.4c2.1,511.3-2.1,930.4-10.5,930.4C9880.6-1087.4,9486.6-1299,9013-1556.8z"></path></g></g>',1),zp=[Bp];function Vp(e,t){return N(),z("svg",Fp,zp)}const jp=Je(Dp,[["render",Vp]]),Up={},qp={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",x:"0px",y:"0px",viewBox:"0 0 1000 1000","enable-background":"new 0 0 1000 1000","xml:space":"preserve"},Wp=a("g",null,[a("g",{transform:"translate(0.000000,511.000000) scale(0.100000,-0.100000)"},[a("path",{d:"M731.7,4913.1c-204.8-40.2-442.2-218.2-535.9-402c-99.5-191.4-95.7-67-95.7-3252c0-3242.4-3.8-3097,105.3-3284.5c70.8-120.6,214.4-250.8,352.2-319.6l126.3-61.3l1125.5-5.7l1125.5-5.7l80.4,57.4c124.4,84.2,384.7,212.5,574.2,279.5c168.4,59.3,168.4,59.3,243.1,183.8l72.7,122.5l-1496.8,9.6c-1663.3,11.5-1560,1.9-1626.9,139.7c-28.7,61.3-30.6,306.3-30.6,2888.3c0,2760.1,0,2821.3,38.3,2880.7c19.1,34.4,59.3,76.6,90,95.7c49.8,32.5,231.6,34.4,4122.9,34.4H9075l53.6-40.2c107.2-78.5,120.6-135.9,120.6-511v-338.8l168.4,84.2c179.9,90,342.6,145.5,428.8,145.5h53.6v312c0,201-9.6,344.5-26.8,407.7c-80.4,300.5-319.6,524.4-624,581.9C9122.9,4939.9,856.1,4938,731.7,4913.1z"}),a("path",{d:"M9727.7,3423.9C9358.3,3305.3,8632.9,2821,7852,2168.3C6295.8,870.6,4498.5-1058.8,3956.8-2008.2l-84.2-145.5l-178-61.3c-371.3-126.3-681.4-313.9-930.2-564.6c-176.1-179.9-294.8-338.8-551.3-746.5c-384.7-610.6-589.5-819.2-947.5-957l-149.3-57.4H607.2H100v-86.1v-86.1h2775.4h2775.4v86.1v86.1l-1898.7,1.9c-1123.5,1.9-1818.4,9.6-1701.6,19.1c302.4,23,585.7,72.7,786.7,135.9c338.8,109.1,507.2,218.2,796.3,516.8c417.3,434.5,620.2,771.4,685.2,1142.7c15.3,86.1,30.6,158.9,32.5,160.8c3.8,1.9,67,34.5,139.7,70.8c1085.3,549.3,3162,2553.4,4513.3,4354.5c505.3,671.8,832.6,1236.5,886.2,1527.4C9907.7,3473.7,9892.3,3477.5,9727.7,3423.9z M4177-2438.8c0-216.3-38.3-403.9-112.9-564.6c-55.5-118.7-61.3-124.4-199.1-185.7c-78.5-36.4-225.9-93.8-331.1-126.3c-162.7-53.6-225.9-63.2-440.2-72.7c-195.2-5.7-285.2-1.9-398.1,23c-80.4,19.1-145.5,40.2-145.5,47.9c0,34.5,201,289,340.7,428.7c283.3,287.1,656.5,486.2,1104.4,587.6c84.2,19.1,158.9,36.4,168.4,36.4C4171.2-2262.7,4177-2343.1,4177-2438.8z"}),a("path",{d:"M9789,2746.4c-55.5-101.5-199.1-333.1-319.6-513L9249.2,1908V172c0-1646.1-1.9-1739.9-34.5-1801.1c-19.1-36.4-65.1-82.3-101.4-101.5c-61.3-32.5-151.2-34.4-1684.4-34.4H5807.7l-197.1-158.9c-369.4-294.8-706.3-528.3-993.4-687.2l-124.4-68.9l-24.9-130.1c-45.9-239.3-176.1-509.2-365.6-761.8c-51.7-67-97.6-130.1-105.3-143.6c-9.6-15.3,513-21,2044.2-21h2059.5v86.1v86.1h-86.1c-149.3,0-482.3,187.6-696.7,390.5c-206.7,197.1-335,438.3-350.3,662.3l-5.7,86.1l1177.1,9.6l1177.1,9.6l126.3,61.3c137.8,68.9,281.4,199.1,352.2,319.6c109.1,185.7,105.3,103.3,101.4,2633.7l-5.7,2325.6L9789,2746.4z"})])],-1),Yp=[Wp];function Kp(e,t){return N(),z("svg",qp,Yp)}const Xp=Je(Up,[["render",Kp]]),Jp={methods:{show:function(e){this.emitter.emit("live-edit-ui-show",e)}},components:{DesignSettingsIcon:Xp,LayoutsIcon:gp,ModulesIcon:jp,PencilIcon:cp,PlayIcon:up,CogIcon:ap},data(){return{}}},Zp={id:"bubble-nav",class:"active"};function Gp(e,t,s,i,n,o){const r=Re("DesignSettingsIcon"),l=Re("ModulesIcon"),c=Re("LayoutsIcon");return N(),z("div",Zp,[a("span",{onClick:t[0]||(t[0]=d=>o.show("template-settings"))},[V(r)]),a("span",{onClick:t[1]||(t[1]=d=>o.show("show-modules"))},[V(l)]),a("span",{onClick:t[2]||(t[2]=d=>o.show("show-layouts"))},[V(c)])])}const Qp=Je(Jp,[["render",Gp]]),e1={components:{BubbleNav:Qp},data(){}};function t1(e,t,s,i,n,o){const r=Re("BubbleNav");return N(),z("div",null,[V(r)])}const s1=Je(e1,[["render",t1]]);/*!
  * vue-color-kit v1.0.4
  * (c) 2021 
  * @license MIT
  */function ms(e){let t={r:0,g:0,b:0,a:1};/#/.test(e)?t=n1(e):/rgb/.test(e)?t=$l(e):typeof e=="string"?t=$l(`rgba(${e})`):Object.prototype.toString.call(e)==="[object Object]"&&(t=e);const{r:s,g:i,b:n,a:o}=t,{h:r,s:l,v:c}=o1(t);return{r:s,g:i,b:n,a:o===void 0?1:o,h:r,s:l,v:c}}function Go(e){const t=document.createElement("canvas"),s=t.getContext("2d"),i=e*2;return t.width=i,t.height=i,s.fillStyle="#ffffff",s.fillRect(0,0,i,i),s.fillStyle="#ccd5db",s.fillRect(0,0,e,e),s.fillRect(e,e,e,e),t}function Lo(e,t,s,i,n,o){const r=e==="l",l=t.createLinearGradient(0,0,r?s:0,r?0:i);l.addColorStop(.01,n),l.addColorStop(.99,o),t.fillStyle=l,t.fillRect(0,0,s,i)}function i1({r:e,g:t,b:s},i){const n=r=>("0"+Number(r).toString(16)).slice(-2),o=`#${n(e)}${n(t)}${n(s)}`;return i?o.toUpperCase():o}function n1(e){e=e.slice(1);const t=s=>parseInt(s,16)||0;return{r:t(e.slice(0,2)),g:t(e.slice(2,4)),b:t(e.slice(4,6))}}function $l(e){return typeof e=="string"?(e=(/rgba?\((.*?)\)/.exec(e)||["","0,0,0,1"])[1].split(","),{r:Number(e[0])||0,g:Number(e[1])||0,b:Number(e[2])||0,a:Number(e[3]?e[3]:1)}):e}function o1({r:e,g:t,b:s}){e=e/255,t=t/255,s=s/255;const i=Math.max(e,t,s),n=Math.min(e,t,s),o=i-n;let r=0;i===n?r=0:i===e?t>=s?r=60*(t-s)/o:r=60*(t-s)/o+360:i===t?r=60*(s-e)/o+120:i===s&&(r=60*(e-t)/o+240),r=Math.floor(r);let l=parseFloat((i===0?0:1-n/i).toFixed(2)),c=parseFloat(i.toFixed(2));return{h:r,s:l,v:c}}var Qo=Yt({props:{color:{type:String,default:"#000000"},hsv:{type:Object,default:null},size:{type:Number,default:152}},emits:["selectSaturation"],data(){return{slideSaturationStyle:{}}},mounted(){this.renderColor(),this.renderSlide()},methods:{renderColor(){const e=this.$refs.canvasSaturation,t=this.size,s=e.getContext("2d");e.width=t,e.height=t,s.fillStyle=this.color,s.fillRect(0,0,t,t),Lo("l",s,t,t,"#FFFFFF","rgba(255,255,255,0)"),Lo("p",s,t,t,"rgba(0,0,0,0)","#000000")},renderSlide(){this.slideSaturationStyle={left:this.hsv.s*this.size-5+"px",top:(1-this.hsv.v)*this.size-5+"px"}},selectSaturation(e){const{top:t,left:s}=this.$el.getBoundingClientRect(),i=e.target.getContext("2d"),n=r=>{let l=r.clientX-s,c=r.clientY-t;l<0&&(l=0),c<0&&(c=0),l>this.size&&(l=this.size),c>this.size&&(c=this.size),this.slideSaturationStyle={left:l-5+"px",top:c-5+"px"};const d=i.getImageData(Math.min(l,this.size-1),Math.min(c,this.size-1),1,1),[g,v,p]=d.data;this.$emit("selectSaturation",{r:g,g:v,b:p})};n(e);const o=()=>{document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",o)};document.addEventListener("mousemove",n),document.addEventListener("mouseup",o)}}});const r1={ref:"canvasSaturation"};function l1(e,t,s,i,n,o){return N(),De("div",{class:"saturation",onMousedown:t[1]||(t[1]=Zo((...r)=>e.selectSaturation&&e.selectSaturation(...r),["prevent","stop"]))},[V("canvas",r1,null,512),V("div",{style:e.slideSaturationStyle,class:"slide"},null,4)],32)}Qo.render=l1;Qo.__file="src/color/Saturation.vue";var er=Yt({props:{hsv:{type:Object,default:null},width:{type:Number,default:15},height:{type:Number,default:152}},emits:["selectHue"],data(){return{slideHueStyle:{}}},mounted(){this.renderColor(),this.renderSlide()},methods:{renderColor(){const e=this.$refs.canvasHue,t=this.width,s=this.height,i=e.getContext("2d");e.width=t,e.height=s;const n=i.createLinearGradient(0,0,0,s);n.addColorStop(0,"#FF0000"),n.addColorStop(.17*1,"#FF00FF"),n.addColorStop(.17*2,"#0000FF"),n.addColorStop(.17*3,"#00FFFF"),n.addColorStop(.17*4,"#00FF00"),n.addColorStop(.17*5,"#FFFF00"),n.addColorStop(1,"#FF0000"),i.fillStyle=n,i.fillRect(0,0,t,s)},renderSlide(){this.slideHueStyle={top:(1-this.hsv.h/360)*this.height-2+"px"}},selectHue(e){const{top:t}=this.$el.getBoundingClientRect(),s=e.target.getContext("2d"),i=o=>{let r=o.clientY-t;r<0&&(r=0),r>this.height&&(r=this.height),this.slideHueStyle={top:r-2+"px"};const l=s.getImageData(0,Math.min(r,this.height-1),1,1),[c,d,g]=l.data;this.$emit("selectHue",{r:c,g:d,b:g})};i(e);const n=()=>{document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",n)};document.addEventListener("mousemove",i),document.addEventListener("mouseup",n)}}});const a1={ref:"canvasHue"};function c1(e,t,s,i,n,o){return N(),De("div",{class:"hue",onMousedown:t[1]||(t[1]=Zo((...r)=>e.selectHue&&e.selectHue(...r),["prevent","stop"]))},[V("canvas",a1,null,512),V("div",{style:e.slideHueStyle,class:"slide"},null,4)],32)}er.render=c1;er.__file="src/color/Hue.vue";var tr=Yt({props:{color:{type:String,default:"#000000"},rgba:{type:Object,default:null},width:{type:Number,default:15},height:{type:Number,default:152}},emits:["selectAlpha"],data(){return{slideAlphaStyle:{},alphaSize:5}},watch:{color(){this.renderColor()},"rgba.a"(){this.renderSlide()}},mounted(){this.renderColor(),this.renderSlide()},methods:{renderColor(){const e=this.$refs.canvasAlpha,t=this.width,s=this.height,i=this.alphaSize,n=Go(i),o=e.getContext("2d");e.width=t,e.height=s,o.fillStyle=o.createPattern(n,"repeat"),o.fillRect(0,0,t,s),Lo("p",o,t,s,"rgba(255,255,255,0)",this.color)},renderSlide(){this.slideAlphaStyle={top:this.rgba.a*this.height-2+"px"}},selectAlpha(e){const{top:t}=this.$el.getBoundingClientRect(),s=n=>{let o=n.clientY-t;o<0&&(o=0),o>this.height&&(o=this.height);let r=parseFloat((o/this.height).toFixed(2));this.$emit("selectAlpha",r)};s(e);const i=()=>{document.removeEventListener("mousemove",s),document.removeEventListener("mouseup",i)};document.addEventListener("mousemove",s),document.addEventListener("mouseup",i)}}});const u1={ref:"canvasAlpha"};function d1(e,t,s,i,n,o){return N(),De("div",{class:"color-alpha",onMousedown:t[1]||(t[1]=Zo((...r)=>e.selectAlpha&&e.selectAlpha(...r),["prevent","stop"]))},[V("canvas",u1,null,512),V("div",{style:e.slideAlphaStyle,class:"slide"},null,4)],32)}tr.render=d1;tr.__file="src/color/Alpha.vue";var sr=Yt({props:{color:{type:String,default:"#000000"},width:{type:Number,default:100},height:{type:Number,default:30}},data(){return{alphaSize:5}},watch:{color(){this.renderColor()}},mounted(){this.renderColor()},methods:{renderColor(){const e=this.$el,t=this.width,s=this.height,i=this.alphaSize,n=Go(i),o=e.getContext("2d");e.width=t,e.height=s,o.fillStyle=o.createPattern(n,"repeat"),o.fillRect(0,0,t,s),o.fillStyle=this.color,o.fillRect(0,0,t,s)}}});function h1(e,t,s,i,n,o){return N(),De("canvas")}sr.render=h1;sr.__file="src/color/Preview.vue";var ir=Yt({props:{suckerCanvas:{type:Object,default:null},suckerArea:{type:Array,default:()=>[]}},data(){return{isOpenSucker:!1,suckerPreview:null,isSucking:!1}},watch:{suckerCanvas(e){this.isSucking=!1,this.suckColor(e)}},methods:{openSucker(){this.isOpenSucker?this.keydownHandler({keyCode:27}):(this.isOpenSucker=!0,this.isSucking=!0,this.$emit("openSucker",!0),document.addEventListener("keydown",this.keydownHandler))},keydownHandler(e){e.keyCode===27&&(this.isOpenSucker=!1,this.isSucking=!1,this.$emit("openSucker",!1),document.removeEventListener("keydown",this.keydownHandler),document.removeEventListener("mousemove",this.mousemoveHandler),document.removeEventListener("mouseup",this.mousemoveHandler),this.suckerPreview&&(document.body.removeChild(this.suckerPreview),this.suckerPreview=null))},mousemoveHandler(e){const{clientX:t,clientY:s}=e,{top:i,left:n,width:o,height:r}=this.suckerCanvas.getBoundingClientRect(),l=t-n,c=s-i,g=this.suckerCanvas.getContext("2d").getImageData(Math.min(l,o-1),Math.min(c,r-1),1,1);let[v,p,w,k]=g.data;k=parseFloat((k/255).toFixed(2));const x=this.suckerPreview.style;Object.assign(x,{position:"absolute",left:t+20+"px",top:s-36+"px",width:"24px",height:"24px",borderRadius:"50%",border:"2px solid #fff",boxShadow:"0 0 8px 0 rgba(0, 0, 0, 0.16)",background:`rgba(${v}, ${p}, ${w}, ${k})`,zIndex:95}),this.suckerArea.length&&t>=this.suckerArea[0]&&s>=this.suckerArea[1]&&t<=this.suckerArea[2]&&s<=this.suckerArea[3]?x.display="":x.display="none"},suckColor(e){e&&e.tagName!=="CANVAS"||(this.suckerPreview=document.createElement("div"),this.suckerPreview&&document.body.appendChild(this.suckerPreview),document.addEventListener("mousemove",this.mousemoveHandler),document.addEventListener("mouseup",this.mousemoveHandler),e.addEventListener("click",t=>{const{clientX:s,clientY:i}=t,{top:n,left:o,width:r,height:l}=e.getBoundingClientRect(),c=s-o,d=i-n,v=e.getContext("2d").getImageData(Math.min(c,r-1),Math.min(d,l-1),1,1);let[p,w,k,x]=v.data;x=parseFloat((x/255).toFixed(2)),this.$emit("selectSucker",{r:p,g:w,b:k,a:x})}))}}});const f1=V("path",{d:"M13.1,8.2l5.6,5.6c0.4,0.4,0.5,1.1,0.1,1.5s-1.1,0.5-1.5,0.1c0,0-0.1,0-0.1-0.1l-1.4-1.4l-7.7,7.7C7.9,21.9,7.6,22,7.3,22H3.1C2.5,22,2,21.5,2,20.9l0,0v-4.2c0-0.3,0.1-0.6,0.3-0.8l5.8-5.8C8.5,9.7,9.2,9.6,9.7,10s0.5,1.1,0.1,1.5c0,0,0,0.1-0.1,0.1l-5.5,5.5v2.7h2.7l7.4-7.4L8.7,6.8c-0.5-0.4-0.5-1-0.1-1.5s1.1-0.5,1.5-0.1c0,0,0.1,0,0.1,0.1l1.4,1.4l3.5-3.5c1.6-1.6,4.1-1.6,5.8-0.1c1.6,1.6,1.6,4.1,0.1,5.8L20.9,9l-3.6,3.6c-0.4,0.4-1.1,0.5-1.5,0.1"},null,-1),m1={key:1,class:"sucker",viewBox:"-16 -16 68 68",xmlns:"http://www.w3.org/2000/svg",stroke:"#9099a4"},p1=V("g",{fill:"none","fill-rule":"evenodd"},[V("g",{transform:"translate(1 1)","stroke-width":"4"},[V("circle",{"stroke-opacity":".5",cx:"18",cy:"18",r:"18"}),V("path",{d:"M36 18c0-9.94-8.06-18-18-18"},[V("animateTransform",{attributeName:"transform",type:"rotate",from:"0 18 18",to:"360 18 18",dur:"1s",repeatCount:"indefinite"})])])],-1);function g1(e,t,s,i,n,o){return N(),De("div",null,[e.isSucking?_e("v-if",!0):(N(),De("svg",{key:0,class:[{active:e.isOpenSucker},"sucker"],xmlns:"http://www.w3.org/2000/svg",viewBox:"-12 -12 48 48",onClick:t[1]||(t[1]=(...r)=>e.openSucker&&e.openSucker(...r))},[f1],2)),e.isSucking?(N(),De("svg",m1,[p1])):_e("v-if",!0)])}ir.render=g1;ir.__file="src/color/Sucker.vue";var nr=Yt({props:{name:{type:String,default:""},color:{type:String,default:""}},emits:["inputColor"],setup(e,{emit:t}){return{modelColor:Ut({get(){return e.color||""},set(i){t("inputColor",i)}})}}});const v1={class:"color-type"},b1={class:"name"};function y1(e,t,s,i,n,o){return N(),De("div",v1,[V("span",b1,We(e.name),1),pi(V("input",{"onUpdate:modelValue":t[1]||(t[1]=r=>e.modelColor=r),class:"value"},null,512),[[ic,e.modelColor]])])}nr.render=y1;nr.__file="src/color/Box.vue";var or=Yt({name:"ColorPicker",props:{color:{type:String,default:"#000000"},colorsDefault:{type:Array,default:()=>[]},colorsHistoryKey:{type:String,default:""}},emits:["selectColor"],setup(e,{emit:t}){const s=$t(),i=$t([]),n=$t();e.colorsHistoryKey&&localStorage&&(i.value=JSON.parse(localStorage.getItem(e.colorsHistoryKey))||[]),n.value=Go(4).toDataURL(),mn(()=>{o(s.value)});function o(l){if(!l)return;const c=i.value||[],d=c.indexOf(l);d>=0&&c.splice(d,1),c.length>=8&&(c.length=7),c.unshift(l),i.value=c||[],localStorage&&e.colorsHistoryKey&&localStorage.setItem(e.colorsHistoryKey,JSON.stringify(c))}function r(l){t("selectColor",l)}return{setColorsHistory:o,colorsHistory:i,color:s,imgAlphaBase64:n,selectColor:r}}});const w1={class:"colors"},k1={key:0,class:"colors history"};function _1(e,t,s,i,n,o){return N(),De("div",null,[V("ul",w1,[(N(!0),De(Pe,null,St(e.colorsDefault,r=>(N(),De("li",{key:r,class:"item",onClick:l=>e.selectColor(r)},[V("div",{style:{background:`url(${e.imgAlphaBase64})`},class:"alpha"},null,4),V("div",{style:{background:r},class:"color"},null,4)],8,["onClick"]))),128))]),e.colorsHistory.length?(N(),De("ul",k1,[(N(!0),De(Pe,null,St(e.colorsHistory,r=>(N(),De("li",{key:r,class:"item",onClick:l=>e.selectColor(r)},[V("div",{style:{background:`url(${e.imgAlphaBase64})`},class:"alpha"},null,4),V("div",{style:{background:r},class:"color"},null,4)],8,["onClick"]))),128))])):_e("v-if",!0)])}or.render=_1;or.__file="src/color/Colors.vue";var Hs=Yt({components:{Saturation:Qo,Hue:er,Alpha:tr,Preview:sr,Sucker:ir,Box:nr,Colors:or},emits:["changeColor","openSucker"],props:{color:{type:String,default:"#000000"},theme:{type:String,default:"dark"},suckerHide:{type:Boolean,default:!0},suckerCanvas:{type:null,default:null},suckerArea:{type:Array,default:()=>[]},colorsDefault:{type:Array,default:()=>["#000000","#FFFFFF","#FF1900","#F47365","#FFB243","#FFE623","#6EFF2A","#1BC7B1","#00BEFF","#2E81FF","#5D61FF","#FF89CF","#FC3CAD","#BF3DCE","#8E00A7","rgba(0,0,0,0)"]},colorsHistoryKey:{type:String,default:"vue-colorpicker-history"}},data(){return{hueWidth:15,hueHeight:152,previewHeight:30,modelRgba:"",modelHex:"",r:0,g:0,b:0,a:1,h:0,s:0,v:0}},computed:{isLightTheme(){return this.theme==="light"},totalWidth(){return this.hueHeight+(this.hueWidth+8)*2},previewWidth(){return this.totalWidth-(this.suckerHide?0:this.previewHeight)},rgba(){return{r:this.r,g:this.g,b:this.b,a:this.a}},hsv(){return{h:this.h,s:this.s,v:this.v}},rgbString(){return`rgb(${this.r}, ${this.g}, ${this.b})`},rgbaStringShort(){return`${this.r}, ${this.g}, ${this.b}, ${this.a}`},rgbaString(){return`rgba(${this.rgbaStringShort})`},hexString(){return i1(this.rgba,!0)}},created(){Object.assign(this,ms(this.color)),this.setText(),this.$watch("rgba",()=>{this.$emit("changeColor",{rgba:this.rgba,hsv:this.hsv,hex:this.modelHex})})},methods:{selectSaturation(e){const{r:t,g:s,b:i,h:n,s:o,v:r}=ms(e);Object.assign(this,{r:t,g:s,b:i,h:n,s:o,v:r}),this.setText()},selectHue(e){const{r:t,g:s,b:i,h:n,s:o,v:r}=ms(e);Object.assign(this,{r:t,g:s,b:i,h:n,s:o,v:r}),this.setText(),this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide()})},selectAlpha(e){this.a=e,this.setText()},inputHex(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=ms(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.modelHex=e,this.modelRgba=this.rgbaStringShort,this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})},inputRgba(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=ms(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.modelHex=this.hexString,this.modelRgba=e,this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})},setText(){this.modelHex=this.hexString,this.modelRgba=this.rgbaStringShort},openSucker(e){this.$emit("openSucker",e)},selectSucker(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=ms(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.setText(),this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})},selectColor(e){const{r:t,g:s,b:i,a:n,h:o,s:r,v:l}=ms(e);Object.assign(this,{r:t,g:s,b:i,a:n,h:o,s:r,v:l}),this.setText(),this.$nextTick(()=>{this.$refs.saturation.renderColor(),this.$refs.saturation.renderSlide(),this.$refs.hue.renderSlide()})}}});const x1={class:"color-set"};function C1(e,t,s,i,n,o){const r=Re("Saturation"),l=Re("Hue"),c=Re("Alpha"),d=Re("Preview"),g=Re("Sucker"),v=Re("Box"),p=Re("Colors");return N(),De("div",{class:["hu-color-picker",{light:e.isLightTheme}],style:{width:e.totalWidth+"px"}},[V("div",x1,[V(r,{ref:"saturation",color:e.rgbString,hsv:e.hsv,size:e.hueHeight,onSelectSaturation:e.selectSaturation},null,8,["color","hsv","size","onSelectSaturation"]),V(l,{ref:"hue",hsv:e.hsv,width:e.hueWidth,height:e.hueHeight,onSelectHue:e.selectHue},null,8,["hsv","width","height","onSelectHue"]),V(c,{ref:"alpha",color:e.rgbString,rgba:e.rgba,width:e.hueWidth,height:e.hueHeight,onSelectAlpha:e.selectAlpha},null,8,["color","rgba","width","height","onSelectAlpha"])]),V("div",{style:{height:e.previewHeight+"px"},class:"color-show"},[V(d,{color:e.rgbaString,width:e.previewWidth,height:e.previewHeight},null,8,["color","width","height"]),e.suckerHide?_e("v-if",!0):(N(),De(g,{key:0,"sucker-canvas":e.suckerCanvas,"sucker-area":e.suckerArea,onOpenSucker:e.openSucker,onSelectSucker:e.selectSucker},null,8,["sucker-canvas","sucker-area","onOpenSucker","onSelectSucker"]))],4),V(v,{name:"HEX",color:e.modelHex,onInputColor:e.inputHex},null,8,["color","onInputColor"]),V(v,{name:"RGBA",color:e.modelRgba,onInputColor:e.inputRgba},null,8,["color","onInputColor"]),V(p,{color:e.rgbaString,"colors-default":e.colorsDefault,"colors-history-key":e.colorsHistoryKey,onSelectColor:e.selectColor},null,8,["color","colors-default","colors-history-key","onSelectColor"]),_e(" custom options "),Wi(e.$slots,"default")],6)}Hs.render=C1;Hs.__file="src/color/ColorPicker.vue";Hs.install=e=>{e.component(Hs.name,Hs)};const S1={components:{ColorPicker:Hs},props:{color:{type:String,default:"#000000"},name:{type:String,default:"color"}},data(){return{showPicker:!1,suckerCanvas:null,suckerArea:[],isSucking:!1}},methods:{changeColor(e){this.$props.color=e.hex},triggerChange(){this.$emit("change",this.$props.color)},openSucker(e){},closePicker(){this.showPicker=!1},togglePicker(){this.showPicker=!this.showPicker}}};function L1(e,t,s,i,n,o){const r=Re("ColorPicker",!0),l=uf("click-away");return pi((N(),z("div",null,[a("div",{class:"color-picker-badge",onClick:t[0]||(t[0]=(...c)=>o.togglePicker&&o.togglePicker(...c)),style:Et({background:s.color})},null,4),n.showPicker?(N(),De(r,{key:0,theme:"light",value:s.color,"sucker-hide":!1,"sucker-canvas":n.suckerCanvas,"sucker-area":n.suckerArea,onClick:o.triggerChange,onOpenSucker:o.openSucker,onChangeColor:o.changeColor,onClose:o.togglePicker},null,8,["value","sucker-canvas","sucker-area","onClick","onOpenSucker","onChangeColor","onClose"])):_e("",!0)])),[[l,o.closePicker]])}const E1=Je(S1,[["render",L1]]);function Ti(e){return[null,void 0,!1].indexOf(e)!==-1}function M1(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function nc(e){var t={exports:{}};return e(t,t.exports),t.exports}var Hl=nc(function(e,t){e.exports=function(){var s=["decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo"];function i(k){return k.split("").reverse().join("")}function n(k,x){return k.substring(0,x.length)===x}function o(k,x){return k.slice(-1*x.length)===x}function r(k,x,C){if((k[x]||k[C])&&k[x]===k[C])throw new Error(x)}function l(k){return typeof k=="number"&&isFinite(k)}function c(k,x){return k=k.toString().split("e"),(+((k=(k=Math.round(+(k[0]+"e"+(k[1]?+k[1]+x:x)))).toString().split("e"))[0]+"e"+(k[1]?+k[1]-x:-x))).toFixed(x)}function d(k,x,C,R,Z,Y,se,ne,be,ue,j,q){var he,de,B,pe=q,xe="",oe="";return Y&&(q=Y(q)),!!l(q)&&(k!==!1&&parseFloat(q.toFixed(k))===0&&(q=0),q<0&&(he=!0,q=Math.abs(q)),k!==!1&&(q=c(q,k)),(q=q.toString()).indexOf(".")!==-1?(B=(de=q.split("."))[0],C&&(xe=C+de[1])):B=q,x&&(B=i(B).match(/.{1,3}/g),B=i(B.join(i(x)))),he&&ne&&(oe+=ne),R&&(oe+=R),he&&be&&(oe+=be),oe+=B,oe+=xe,Z&&(oe+=Z),ue&&(oe=ue(oe,pe)),oe)}function g(k,x,C,R,Z,Y,se,ne,be,ue,j,q){var he,de="";return j&&(q=j(q)),!(!q||typeof q!="string")&&(ne&&n(q,ne)&&(q=q.replace(ne,""),he=!0),R&&n(q,R)&&(q=q.replace(R,"")),be&&n(q,be)&&(q=q.replace(be,""),he=!0),Z&&o(q,Z)&&(q=q.slice(0,-1*Z.length)),x&&(q=q.split(x).join("")),C&&(q=q.replace(C,".")),he&&(de+="-"),(de=(de+=q).replace(/[^0-9\.\-.]/g,""))!==""&&(de=Number(de),se&&(de=se(de)),!!l(de)&&de))}function v(k){var x,C,R,Z={};for(k.suffix===void 0&&(k.suffix=k.postfix),x=0;x<s.length;x+=1)if((R=k[C=s[x]])===void 0)C!=="negative"||Z.negativeBefore?C==="mark"&&Z.thousand!=="."?Z[C]=".":Z[C]=!1:Z[C]="-";else if(C==="decimals"){if(!(R>=0&&R<8))throw new Error(C);Z[C]=R}else if(C==="encoder"||C==="decoder"||C==="edit"||C==="undo"){if(typeof R!="function")throw new Error(C);Z[C]=R}else{if(typeof R!="string")throw new Error(C);Z[C]=R}return r(Z,"mark","thousand"),r(Z,"prefix","negative"),r(Z,"prefix","negativeBefore"),Z}function p(k,x,C){var R,Z=[];for(R=0;R<s.length;R+=1)Z.push(k[s[R]]);return Z.push(C),x.apply("",Z)}function w(k){if(!(this instanceof w))return new w(k);typeof k=="object"&&(k=v(k),this.to=function(x){return p(k,d,x)},this.from=function(x){return p(k,g,x)})}return w}()}),A1=M1(nc(function(e,t){(function(s){function i(h){return n(h)&&typeof h.from=="function"}function n(h){return typeof h=="object"&&typeof h.to=="function"}function o(h){h.parentElement.removeChild(h)}function r(h){return h!=null}function l(h){h.preventDefault()}function c(h){return h.filter(function(u){return!this[u]&&(this[u]=!0)},{})}function d(h,u){return Math.round(h/u)*u}function g(h,u){var T=h.getBoundingClientRect(),W=h.ownerDocument,$=W.documentElement,ee=Y(W);return/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(ee.x=0),u?T.top+ee.y-$.clientTop:T.left+ee.x-$.clientLeft}function v(h){return typeof h=="number"&&!isNaN(h)&&isFinite(h)}function p(h,u,T){T>0&&(C(h,u),setTimeout(function(){R(h,u)},T))}function w(h){return Math.max(Math.min(h,100),0)}function k(h){return Array.isArray(h)?h:[h]}function x(h){var u=(h=String(h)).split(".");return u.length>1?u[1].length:0}function C(h,u){h.classList&&!/\s/.test(u)?h.classList.add(u):h.className+=" "+u}function R(h,u){h.classList&&!/\s/.test(u)?h.classList.remove(u):h.className=h.className.replace(new RegExp("(^|\\b)"+u.split(" ").join("|")+"(\\b|$)","gi")," ")}function Z(h,u){return h.classList?h.classList.contains(u):new RegExp("\\b"+u+"\\b").test(h.className)}function Y(h){var u=window.pageXOffset!==void 0,T=(h.compatMode||"")==="CSS1Compat";return{x:u?window.pageXOffset:T?h.documentElement.scrollLeft:h.body.scrollLeft,y:u?window.pageYOffset:T?h.documentElement.scrollTop:h.body.scrollTop}}function se(){return window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"}}function ne(){var h=!1;try{var u=Object.defineProperty({},"passive",{get:function(){h=!0}});window.addEventListener("test",null,u)}catch{}return h}function be(){return window.CSS&&CSS.supports&&CSS.supports("touch-action","none")}function ue(h,u){return 100/(u-h)}function j(h,u,T){return 100*u/(h[T+1]-h[T])}function q(h,u){return j(h,h[0]<0?u+Math.abs(h[0]):u-h[0],0)}function he(h,u){return u*(h[1]-h[0])/100+h[0]}function de(h,u){for(var T=1;h>=u[T];)T+=1;return T}function B(h,u,T){if(T>=h.slice(-1)[0])return 100;var W=de(T,h),$=h[W-1],ee=h[W],le=u[W-1],ke=u[W];return le+q([$,ee],T)/ue(le,ke)}function pe(h,u,T){if(T>=100)return h.slice(-1)[0];var W=de(T,u),$=h[W-1],ee=h[W],le=u[W-1];return he([$,ee],(T-le)*ue(le,u[W]))}function xe(h,u,T,W){if(W===100)return W;var $=de(W,h),ee=h[$-1],le=h[$];return T?W-ee>(le-ee)/2?le:ee:u[$-1]?h[$-1]+d(W-h[$-1],u[$-1]):W}var oe,fe;s.PipsMode=void 0,(fe=s.PipsMode||(s.PipsMode={})).Range="range",fe.Steps="steps",fe.Positions="positions",fe.Count="count",fe.Values="values",s.PipsType=void 0,(oe=s.PipsType||(s.PipsType={}))[oe.None=-1]="None",oe[oe.NoValue=0]="NoValue",oe[oe.LargeValue=1]="LargeValue",oe[oe.SmallValue=2]="SmallValue";var Ce=function(){function h(u,T,W){var $;this.xPct=[],this.xVal=[],this.xSteps=[],this.xNumSteps=[],this.xHighestCompleteStep=[],this.xSteps=[W||!1],this.xNumSteps=[!1],this.snap=T;var ee=[];for(Object.keys(u).forEach(function(le){ee.push([k(u[le]),le])}),ee.sort(function(le,ke){return le[0][0]-ke[0][0]}),$=0;$<ee.length;$++)this.handleEntryPoint(ee[$][1],ee[$][0]);for(this.xNumSteps=this.xSteps.slice(0),$=0;$<this.xNumSteps.length;$++)this.handleStepPoint($,this.xNumSteps[$])}return h.prototype.getDistance=function(u){for(var T=[],W=0;W<this.xNumSteps.length-1;W++)T[W]=j(this.xVal,u,W);return T},h.prototype.getAbsoluteDistance=function(u,T,W){var $,ee=0;if(u<this.xPct[this.xPct.length-1])for(;u>this.xPct[ee+1];)ee++;else u===this.xPct[this.xPct.length-1]&&(ee=this.xPct.length-2);W||u!==this.xPct[ee+1]||ee++,T===null&&(T=[]);var le=1,ke=T[ee],$e=0,Ft=0,Ge=0,re=0;for($=W?(u-this.xPct[ee])/(this.xPct[ee+1]-this.xPct[ee]):(this.xPct[ee+1]-u)/(this.xPct[ee+1]-this.xPct[ee]);ke>0;)$e=this.xPct[ee+1+re]-this.xPct[ee+re],T[ee+re]*le+100-100*$>100?(Ft=$e*$,le=(ke-100*$)/T[ee+re],$=1):(Ft=T[ee+re]*$e/100*le,le=0),W?(Ge-=Ft,this.xPct.length+re>=1&&re--):(Ge+=Ft,this.xPct.length-re>=1&&re++),ke=T[ee+re]*le;return u+Ge},h.prototype.toStepping=function(u){return u=B(this.xVal,this.xPct,u)},h.prototype.fromStepping=function(u){return pe(this.xVal,this.xPct,u)},h.prototype.getStep=function(u){return u=xe(this.xPct,this.xSteps,this.snap,u)},h.prototype.getDefaultStep=function(u,T,W){var $=de(u,this.xPct);return(u===100||T&&u===this.xPct[$-1])&&($=Math.max($-1,1)),(this.xVal[$]-this.xVal[$-1])/W},h.prototype.getNearbySteps=function(u){var T=de(u,this.xPct);return{stepBefore:{startValue:this.xVal[T-2],step:this.xNumSteps[T-2],highestStep:this.xHighestCompleteStep[T-2]},thisStep:{startValue:this.xVal[T-1],step:this.xNumSteps[T-1],highestStep:this.xHighestCompleteStep[T-1]},stepAfter:{startValue:this.xVal[T],step:this.xNumSteps[T],highestStep:this.xHighestCompleteStep[T]}}},h.prototype.countStepDecimals=function(){var u=this.xNumSteps.map(x);return Math.max.apply(null,u)},h.prototype.hasNoSize=function(){return this.xVal[0]===this.xVal[this.xVal.length-1]},h.prototype.convert=function(u){return this.getStep(this.toStepping(u))},h.prototype.handleEntryPoint=function(u,T){var W;if(!v(W=u==="min"?0:u==="max"?100:parseFloat(u))||!v(T[0]))throw new Error("noUiSlider: 'range' value isn't numeric.");this.xPct.push(W),this.xVal.push(T[0]);var $=Number(T[1]);W?this.xSteps.push(!isNaN($)&&$):isNaN($)||(this.xSteps[0]=$),this.xHighestCompleteStep.push(0)},h.prototype.handleStepPoint=function(u,T){if(T)if(this.xVal[u]!==this.xVal[u+1]){this.xSteps[u]=j([this.xVal[u],this.xVal[u+1]],T,0)/ue(this.xPct[u],this.xPct[u+1]);var W=(this.xVal[u+1]-this.xVal[u])/this.xNumSteps[u],$=Math.ceil(Number(W.toFixed(3))-1),ee=this.xVal[u]+this.xNumSteps[u]*$;this.xHighestCompleteStep[u]=ee}else this.xSteps[u]=this.xHighestCompleteStep[u]=this.xVal[u]},h}(),ve={to:function(h){return h===void 0?"":h.toFixed(2)},from:Number},Oe={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},Te={tooltips:".__tooltips",aria:".__aria"};function ze(h,u){if(!v(u))throw new Error("noUiSlider: 'step' is not numeric.");h.singleStep=u}function Ve(h,u){if(!v(u))throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");h.keyboardPageMultiplier=u}function Tt(h,u){if(!v(u))throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");h.keyboardMultiplier=u}function Dt(h,u){if(!v(u))throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");h.keyboardDefaultStep=u}function Ze(h,u){if(typeof u!="object"||Array.isArray(u))throw new Error("noUiSlider: 'range' is not an object.");if(u.min===void 0||u.max===void 0)throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");h.spectrum=new Ce(u,h.snap||!1,h.singleStep)}function X(h,u){if(u=k(u),!Array.isArray(u)||!u.length)throw new Error("noUiSlider: 'start' option is incorrect.");h.handles=u.length,h.start=u}function Me(h,u){if(typeof u!="boolean")throw new Error("noUiSlider: 'snap' option must be a boolean.");h.snap=u}function js(h,u){if(typeof u!="boolean")throw new Error("noUiSlider: 'animate' option must be a boolean.");h.animate=u}function Xt(h,u){if(typeof u!="number")throw new Error("noUiSlider: 'animationDuration' option must be a number.");h.animationDuration=u}function Us(h,u){var T,W=[!1];if(u==="lower"?u=[!0,!1]:u==="upper"&&(u=[!1,!0]),u===!0||u===!1){for(T=1;T<h.handles;T++)W.push(u);W.push(!1)}else{if(!Array.isArray(u)||!u.length||u.length!==h.handles+1)throw new Error("noUiSlider: 'connect' option doesn't match handle count.");W=u}h.connect=W}function qs(h,u){switch(u){case"horizontal":h.ort=0;break;case"vertical":h.ort=1;break;default:throw new Error("noUiSlider: 'orientation' option is invalid.")}}function m(h,u){if(!v(u))throw new Error("noUiSlider: 'margin' option must be numeric.");u!==0&&(h.margin=h.spectrum.getDistance(u))}function b(h,u){if(!v(u))throw new Error("noUiSlider: 'limit' option must be numeric.");if(h.limit=h.spectrum.getDistance(u),!h.limit||h.handles<2)throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.")}function S(h,u){var T;if(!v(u)&&!Array.isArray(u))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(u)&&u.length!==2&&!v(u[0])&&!v(u[1]))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(u!==0){for(Array.isArray(u)||(u=[u,u]),h.padding=[h.spectrum.getDistance(u[0]),h.spectrum.getDistance(u[1])],T=0;T<h.spectrum.xNumSteps.length-1;T++)if(h.padding[0][T]<0||h.padding[1][T]<0)throw new Error("noUiSlider: 'padding' option must be a positive number(s).");var W=u[0]+u[1],$=h.spectrum.xVal[0];if(W/(h.spectrum.xVal[h.spectrum.xVal.length-1]-$)>1)throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.")}}function E(h,u){switch(u){case"ltr":h.dir=0;break;case"rtl":h.dir=1;break;default:throw new Error("noUiSlider: 'direction' option was not recognized.")}}function L(h,u){if(typeof u!="string")throw new Error("noUiSlider: 'behaviour' must be a string containing options.");var T=u.indexOf("tap")>=0,W=u.indexOf("drag")>=0,$=u.indexOf("fixed")>=0,ee=u.indexOf("snap")>=0,le=u.indexOf("hover")>=0,ke=u.indexOf("unconstrained")>=0,$e=u.indexOf("drag-all")>=0,Ft=u.indexOf("smooth-steps")>=0;if($){if(h.handles!==2)throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");m(h,h.start[1]-h.start[0])}if(ke&&(h.margin||h.limit))throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");h.events={tap:T||ee,drag:W,dragAll:$e,smoothSteps:Ft,fixed:$,snap:ee,hover:le,unconstrained:ke}}function O(h,u){if(u!==!1)if(u===!0||n(u)){h.tooltips=[];for(var T=0;T<h.handles;T++)h.tooltips.push(u)}else{if((u=k(u)).length!==h.handles)throw new Error("noUiSlider: must pass a formatter for all handles.");u.forEach(function(W){if(typeof W!="boolean"&&!n(W))throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.")}),h.tooltips=u}}function D(h,u){if(u.length!==h.handles)throw new Error("noUiSlider: must pass a attributes for all handles.");h.handleAttributes=u}function P(h,u){if(!n(u))throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");h.ariaFormat=u}function H(h,u){if(!i(u))throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");h.format=u}function A(h,u){if(typeof u!="boolean")throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");h.keyboardSupport=u}function G(h,u){h.documentElement=u}function K(h,u){if(typeof u!="string"&&u!==!1)throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");h.cssPrefix=u}function Q(h,u){if(typeof u!="object")throw new Error("noUiSlider: 'cssClasses' must be an object.");typeof h.cssPrefix=="string"?(h.cssClasses={},Object.keys(u).forEach(function(T){h.cssClasses[T]=h.cssPrefix+u[T]})):h.cssClasses=u}function ie(h){var u={margin:null,limit:null,padding:null,animate:!0,animationDuration:300,ariaFormat:ve,format:ve},T={step:{r:!1,t:ze},keyboardPageMultiplier:{r:!1,t:Ve},keyboardMultiplier:{r:!1,t:Tt},keyboardDefaultStep:{r:!1,t:Dt},start:{r:!0,t:X},connect:{r:!0,t:Us},direction:{r:!0,t:E},snap:{r:!1,t:Me},animate:{r:!1,t:js},animationDuration:{r:!1,t:Xt},range:{r:!0,t:Ze},orientation:{r:!1,t:qs},margin:{r:!1,t:m},limit:{r:!1,t:b},padding:{r:!1,t:S},behaviour:{r:!0,t:L},ariaFormat:{r:!1,t:P},format:{r:!1,t:H},tooltips:{r:!1,t:O},keyboardSupport:{r:!0,t:A},documentElement:{r:!1,t:G},cssPrefix:{r:!0,t:K},cssClasses:{r:!0,t:Q},handleAttributes:{r:!1,t:D}},W={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:Oe,keyboardPageMultiplier:5,keyboardMultiplier:1,keyboardDefaultStep:10};h.format&&!h.ariaFormat&&(h.ariaFormat=h.format),Object.keys(T).forEach(function($e){if(r(h[$e])||W[$e]!==void 0)T[$e].t(u,r(h[$e])?h[$e]:W[$e]);else if(T[$e].r)throw new Error("noUiSlider: '"+$e+"' is required.")}),u.pips=h.pips;var $=document.createElement("div"),ee=$.style.msTransform!==void 0,le=$.style.transform!==void 0;u.transformRule=le?"transform":ee?"msTransform":"webkitTransform";var ke=[["left","top"],["right","bottom"]];return u.style=ke[u.dir][u.ort],u}function me(h,u,T){var W,$,ee,le,ke,$e=se(),Ft=be()&&ne(),Ge=h,re=u.spectrum,Bt=[],Fe=[],ut=[],kn=0,zt={},Es=h.ownerDocument,gi=u.documentElement||Es.documentElement,vi=Es.body,ac=Es.dir==="rtl"||u.ort===1?0:100;function Vt(f,y){var _=Es.createElement("div");return y&&C(_,y),f.appendChild(_),_}function cc(f,y){var _=Vt(f,u.cssClasses.origin),M=Vt(_,u.cssClasses.handle);if(Vt(M,u.cssClasses.touchArea),M.setAttribute("data-handle",String(y)),u.keyboardSupport&&(M.setAttribute("tabindex","0"),M.addEventListener("keydown",function(I){return xc(I,y)})),u.handleAttributes!==void 0){var F=u.handleAttributes[y];Object.keys(F).forEach(function(I){M.setAttribute(I,F[I])})}return M.setAttribute("role","slider"),M.setAttribute("aria-orientation",u.ort?"vertical":"horizontal"),y===0?C(M,u.cssClasses.handleLower):y===u.handles-1&&C(M,u.cssClasses.handleUpper),_}function lr(f,y){return!!y&&Vt(f,u.cssClasses.connect)}function uc(f,y){var _=Vt(y,u.cssClasses.connects);$=[],(ee=[]).push(lr(_,f[0]));for(var M=0;M<u.handles;M++)$.push(cc(y,M)),ut[M]=M,ee.push(lr(_,f[M+1]))}function dc(f){return C(f,u.cssClasses.target),u.dir===0?C(f,u.cssClasses.ltr):C(f,u.cssClasses.rtl),u.ort===0?C(f,u.cssClasses.horizontal):C(f,u.cssClasses.vertical),C(f,getComputedStyle(f).direction==="rtl"?u.cssClasses.textDirectionRtl:u.cssClasses.textDirectionLtr),Vt(f,u.cssClasses.base)}function hc(f,y){return!(!u.tooltips||!u.tooltips[y])&&Vt(f.firstChild,u.cssClasses.tooltip)}function ar(){return Ge.hasAttribute("disabled")}function _n(f){return $[f].hasAttribute("disabled")}function xn(){ke&&(Ws("update"+Te.tooltips),ke.forEach(function(f){f&&o(f)}),ke=null)}function cr(){xn(),ke=$.map(hc),Mn("update"+Te.tooltips,function(f,y,_){if(ke&&u.tooltips&&ke[y]!==!1){var M=f[y];u.tooltips[y]!==!0&&(M=u.tooltips[y].to(_[y])),ke[y].innerHTML=M}})}function fc(){Ws("update"+Te.aria),Mn("update"+Te.aria,function(f,y,_,M,F){ut.forEach(function(I){var ae=$[I],U=bi(Fe,I,0,!0,!0,!0),Ue=bi(Fe,I,100,!0,!0,!0),Be=F[I],Ne=String(u.ariaFormat.to(_[I]));U=re.fromStepping(U).toFixed(1),Ue=re.fromStepping(Ue).toFixed(1),Be=re.fromStepping(Be).toFixed(1),ae.children[0].setAttribute("aria-valuemin",U),ae.children[0].setAttribute("aria-valuemax",Ue),ae.children[0].setAttribute("aria-valuenow",Be),ae.children[0].setAttribute("aria-valuetext",Ne)})})}function mc(f){if(f.mode===s.PipsMode.Range||f.mode===s.PipsMode.Steps)return re.xVal;if(f.mode===s.PipsMode.Count){if(f.values<2)throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");for(var y=f.values-1,_=100/y,M=[];y--;)M[y]=y*_;return M.push(100),ur(M,f.stepped)}return f.mode===s.PipsMode.Positions?ur(f.values,f.stepped):f.mode===s.PipsMode.Values?f.stepped?f.values.map(function(F){return re.fromStepping(re.getStep(re.toStepping(F)))}):f.values:[]}function ur(f,y){return f.map(function(_){return re.fromStepping(y?re.getStep(_):_)})}function pc(f){function y(Be,Ne){return Number((Be+Ne).toFixed(7))}var _=mc(f),M={},F=re.xVal[0],I=re.xVal[re.xVal.length-1],ae=!1,U=!1,Ue=0;return(_=c(_.slice().sort(function(Be,Ne){return Be-Ne})))[0]!==F&&(_.unshift(F),ae=!0),_[_.length-1]!==I&&(_.push(I),U=!0),_.forEach(function(Be,Ne){var Ie,Ee,Qe,lt,Ke,yr,Nn,wr,kr,_r,Pn=Be,Ms=_[Ne+1],xr=f.mode===s.PipsMode.Steps;for(xr&&(Ie=re.xNumSteps[Ne]),Ie||(Ie=Ms-Pn),Ms===void 0&&(Ms=Pn),Ie=Math.max(Ie,1e-7),Ee=Pn;Ee<=Ms;Ee=y(Ee,Ie)){for(wr=(Ke=(lt=re.toStepping(Ee))-Ue)/(f.density||1),_r=Ke/(kr=Math.round(wr)),Qe=1;Qe<=kr;Qe+=1)M[(yr=Ue+Qe*_r).toFixed(5)]=[re.fromStepping(yr),0];Nn=_.indexOf(Ee)>-1?s.PipsType.LargeValue:xr?s.PipsType.SmallValue:s.PipsType.NoValue,!Ne&&ae&&Ee!==Ms&&(Nn=0),Ee===Ms&&U||(M[lt.toFixed(5)]=[Ee,Nn]),Ue=lt}}),M}function gc(f,y,_){var M,F,I=Es.createElement("div"),ae=((M={})[s.PipsType.None]="",M[s.PipsType.NoValue]=u.cssClasses.valueNormal,M[s.PipsType.LargeValue]=u.cssClasses.valueLarge,M[s.PipsType.SmallValue]=u.cssClasses.valueSub,M),U=((F={})[s.PipsType.None]="",F[s.PipsType.NoValue]=u.cssClasses.markerNormal,F[s.PipsType.LargeValue]=u.cssClasses.markerLarge,F[s.PipsType.SmallValue]=u.cssClasses.markerSub,F),Ue=[u.cssClasses.valueHorizontal,u.cssClasses.valueVertical],Be=[u.cssClasses.markerHorizontal,u.cssClasses.markerVertical];function Ne(Ee,Qe){var lt=Qe===u.cssClasses.value,Ke=lt?ae:U;return Qe+" "+(lt?Ue:Be)[u.ort]+" "+Ke[Ee]}function Ie(Ee,Qe,lt){if((lt=y?y(Qe,lt):lt)!==s.PipsType.None){var Ke=Vt(I,!1);Ke.className=Ne(lt,u.cssClasses.marker),Ke.style[u.style]=Ee+"%",lt>s.PipsType.NoValue&&((Ke=Vt(I,!1)).className=Ne(lt,u.cssClasses.value),Ke.setAttribute("data-value",String(Qe)),Ke.style[u.style]=Ee+"%",Ke.innerHTML=String(_.to(Qe)))}}return C(I,u.cssClasses.pips),C(I,u.ort===0?u.cssClasses.pipsHorizontal:u.cssClasses.pipsVertical),Object.keys(f).forEach(function(Ee){Ie(Ee,f[Ee][0],f[Ee][1])}),I}function Cn(){le&&(o(le),le=null)}function Sn(f){Cn();var y=pc(f),_=f.filter,M=f.format||{to:function(F){return String(Math.round(F))}};return le=Ge.appendChild(gc(y,_,M))}function dr(){var f=W.getBoundingClientRect(),y="offset"+["Width","Height"][u.ort];return u.ort===0?f.width||W[y]:f.height||W[y]}function as(f,y,_,M){var F=function(ae){var U=vc(ae,M.pageOffset,M.target||y);return!!U&&!(ar()&&!M.doNotReject)&&!(Z(Ge,u.cssClasses.tap)&&!M.doNotReject)&&!(f===$e.start&&U.buttons!==void 0&&U.buttons>1)&&(!M.hover||!U.buttons)&&(Ft||U.preventDefault(),U.calcPoint=U.points[u.ort],void _(U,M))},I=[];return f.split(" ").forEach(function(ae){y.addEventListener(ae,F,!!Ft&&{passive:!0}),I.push([ae,F])}),I}function vc(f,y,_){var M=f.type.indexOf("touch")===0,F=f.type.indexOf("mouse")===0,I=f.type.indexOf("pointer")===0,ae=0,U=0;if(f.type.indexOf("MSPointer")===0&&(I=!0),f.type==="mousedown"&&!f.buttons&&!f.touches)return!1;if(M){var Ue=function(Ie){var Ee=Ie.target;return Ee===_||_.contains(Ee)||f.composed&&f.composedPath().shift()===_};if(f.type==="touchstart"){var Be=Array.prototype.filter.call(f.touches,Ue);if(Be.length>1)return!1;ae=Be[0].pageX,U=Be[0].pageY}else{var Ne=Array.prototype.find.call(f.changedTouches,Ue);if(!Ne)return!1;ae=Ne.pageX,U=Ne.pageY}}return y=y||Y(Es),(F||I)&&(ae=f.clientX+y.x,U=f.clientY+y.y),f.pageOffset=y,f.points=[ae,U],f.cursor=F||I,f}function hr(f){var y=100*(f-g(W,u.ort))/dr();return y=w(y),u.dir?100-y:y}function bc(f){var y=100,_=!1;return $.forEach(function(M,F){if(!_n(F)){var I=Fe[F],ae=Math.abs(I-f);(ae<y||ae<=y&&f>I||ae===100&&y===100)&&(_=F,y=ae)}}),_}function yc(f,y){f.type==="mouseout"&&f.target.nodeName==="HTML"&&f.relatedTarget===null&&Ln(f,y)}function wc(f,y){if(navigator.appVersion.indexOf("MSIE 9")===-1&&f.buttons===0&&y.buttonsProperty!==0)return Ln(f,y);var _=(u.dir?-1:1)*(f.calcPoint-y.startCalcPoint);fr(_>0,100*_/y.baseSize,y.locations,y.handleNumbers,y.connect)}function Ln(f,y){y.handle&&(R(y.handle,u.cssClasses.active),kn-=1),y.listeners.forEach(function(_){gi.removeEventListener(_[0],_[1])}),kn===0&&(R(Ge,u.cssClasses.drag),Tn(),f.cursor&&(vi.style.cursor="",vi.removeEventListener("selectstart",l))),u.events.smoothSteps&&(y.handleNumbers.forEach(function(_){cs(_,Fe[_],!0,!0,!1,!1)}),y.handleNumbers.forEach(function(_){je("update",_)})),y.handleNumbers.forEach(function(_){je("change",_),je("set",_),je("end",_)})}function En(f,y){if(!y.handleNumbers.some(_n)){var _;y.handleNumbers.length===1&&(_=$[y.handleNumbers[0]].children[0],kn+=1,C(_,u.cssClasses.active)),f.stopPropagation();var M=[],F=as($e.move,gi,wc,{target:f.target,handle:_,connect:y.connect,listeners:M,startCalcPoint:f.calcPoint,baseSize:dr(),pageOffset:f.pageOffset,handleNumbers:y.handleNumbers,buttonsProperty:f.buttons,locations:Fe.slice()}),I=as($e.end,gi,Ln,{target:f.target,handle:_,listeners:M,doNotReject:!0,handleNumbers:y.handleNumbers}),ae=as("mouseout",gi,yc,{target:f.target,handle:_,listeners:M,doNotReject:!0,handleNumbers:y.handleNumbers});M.push.apply(M,F.concat(I,ae)),f.cursor&&(vi.style.cursor=getComputedStyle(f.target).cursor,$.length>1&&C(Ge,u.cssClasses.drag),vi.addEventListener("selectstart",l,!1)),y.handleNumbers.forEach(function(U){je("start",U)})}}function kc(f){f.stopPropagation();var y=hr(f.calcPoint),_=bc(y);_!==!1&&(u.events.snap||p(Ge,u.cssClasses.tap,u.animationDuration),cs(_,y,!0,!0),Tn(),je("slide",_,!0),je("update",_,!0),u.events.snap?En(f,{handleNumbers:[_]}):(je("change",_,!0),je("set",_,!0)))}function _c(f){var y=hr(f.calcPoint),_=re.getStep(y),M=re.fromStepping(_);Object.keys(zt).forEach(function(F){F.split(".")[0]==="hover"&&zt[F].forEach(function(I){I.call(wi,M)})})}function xc(f,y){if(ar()||_n(y))return!1;var _=["Left","Right"],M=["Down","Up"],F=["PageDown","PageUp"],I=["Home","End"];u.dir&&!u.ort?_.reverse():u.ort&&!u.dir&&(M.reverse(),F.reverse());var ae,U=f.key.replace("Arrow",""),Ue=U===F[0],Be=U===F[1],Ne=U===M[0]||U===_[0]||Ue,Ie=U===M[1]||U===_[1]||Be,Ee=U===I[0],Qe=U===I[1];if(!(Ne||Ie||Ee||Qe))return!0;if(f.preventDefault(),Ie||Ne){var lt=Ne?0:1,Ke=br(y)[lt];if(Ke===null)return!1;Ke===!1&&(Ke=re.getDefaultStep(Fe[y],Ne,u.keyboardDefaultStep)),Ke*=Be||Ue?u.keyboardPageMultiplier:u.keyboardMultiplier,Ke=Math.max(Ke,1e-7),Ke*=Ne?-1:1,ae=Bt[y]+Ke}else ae=Qe?u.spectrum.xVal[u.spectrum.xVal.length-1]:u.spectrum.xVal[0];return cs(y,re.toStepping(ae),!0,!0),je("slide",y),je("update",y),je("change",y),je("set",y),!1}function Cc(f){f.fixed||$.forEach(function(y,_){as($e.start,y.children[0],En,{handleNumbers:[_]})}),f.tap&&as($e.start,W,kc,{}),f.hover&&as($e.move,W,_c,{hover:!0}),f.drag&&ee.forEach(function(y,_){if(y!==!1&&_!==0&&_!==ee.length-1){var M=$[_-1],F=$[_],I=[y],ae=[M,F],U=[_-1,_];C(y,u.cssClasses.draggable),f.fixed&&(I.push(M.children[0]),I.push(F.children[0])),f.dragAll&&(ae=$,U=ut),I.forEach(function(Ue){as($e.start,Ue,En,{handles:ae,handleNumbers:U,connect:y})})}})}function Mn(f,y){zt[f]=zt[f]||[],zt[f].push(y),f.split(".")[0]==="update"&&$.forEach(function(_,M){je("update",M)})}function Sc(f){return f===Te.aria||f===Te.tooltips}function Ws(f){var y=f&&f.split(".")[0],_=y?f.substring(y.length):f;Object.keys(zt).forEach(function(M){var F=M.split(".")[0],I=M.substring(F.length);y&&y!==F||_&&_!==I||Sc(I)&&_!==I||delete zt[M]})}function je(f,y,_){Object.keys(zt).forEach(function(M){var F=M.split(".")[0];f===F&&zt[M].forEach(function(I){I.call(wi,Bt.map(u.format.to),y,Bt.slice(),_||!1,Fe.slice(),wi)})})}function bi(f,y,_,M,F,I,ae){var U;return $.length>1&&!u.events.unconstrained&&(M&&y>0&&(U=re.getAbsoluteDistance(f[y-1],u.margin,!1),_=Math.max(_,U)),F&&y<$.length-1&&(U=re.getAbsoluteDistance(f[y+1],u.margin,!0),_=Math.min(_,U))),$.length>1&&u.limit&&(M&&y>0&&(U=re.getAbsoluteDistance(f[y-1],u.limit,!1),_=Math.min(_,U)),F&&y<$.length-1&&(U=re.getAbsoluteDistance(f[y+1],u.limit,!0),_=Math.max(_,U))),u.padding&&(y===0&&(U=re.getAbsoluteDistance(0,u.padding[0],!1),_=Math.max(_,U)),y===$.length-1&&(U=re.getAbsoluteDistance(100,u.padding[1],!0),_=Math.min(_,U))),ae||(_=re.getStep(_)),!((_=w(_))===f[y]&&!I)&&_}function An(f,y){var _=u.ort;return(_?y:f)+", "+(_?f:y)}function fr(f,y,_,M,F){var I=_.slice(),ae=M[0],U=u.events.smoothSteps,Ue=[!f,f],Be=[f,!f];M=M.slice(),f&&M.reverse(),M.length>1?M.forEach(function(Ie,Ee){var Qe=bi(I,Ie,I[Ie]+y,Ue[Ee],Be[Ee],!1,U);Qe===!1?y=0:(y=Qe-I[Ie],I[Ie]=Qe)}):Ue=Be=[!0];var Ne=!1;M.forEach(function(Ie,Ee){Ne=cs(Ie,_[Ie]+y,Ue[Ee],Be[Ee],!1,U)||Ne}),Ne&&(M.forEach(function(Ie){je("update",Ie),je("slide",Ie)}),F!=null&&je("drag",ae))}function mr(f,y){return u.dir?100-f-y:f}function Lc(f,y){Fe[f]=y,Bt[f]=re.fromStepping(y);var _="translate("+An(mr(y,0)-ac+"%","0")+")";$[f].style[u.transformRule]=_,pr(f),pr(f+1)}function Tn(){ut.forEach(function(f){var y=Fe[f]>50?-1:1,_=3+($.length+y*f);$[f].style.zIndex=String(_)})}function cs(f,y,_,M,F,I){return F||(y=bi(Fe,f,y,_,M,!1,I)),y!==!1&&(Lc(f,y),!0)}function pr(f){if(ee[f]){var y=0,_=100;f!==0&&(y=Fe[f-1]),f!==ee.length-1&&(_=Fe[f]);var M=_-y,F="translate("+An(mr(y,M)+"%","0")+")",I="scale("+An(M/100,"1")+")";ee[f].style[u.transformRule]=F+" "+I}}function gr(f,y){return f===null||f===!1||f===void 0?Fe[y]:(typeof f=="number"&&(f=String(f)),(f=u.format.from(f))!==!1&&(f=re.toStepping(f)),f===!1||isNaN(f)?Fe[y]:f)}function yi(f,y,_){var M=k(f),F=Fe[0]===void 0;y=y===void 0||y,u.animate&&!F&&p(Ge,u.cssClasses.tap,u.animationDuration),ut.forEach(function(U){cs(U,gr(M[U],U),!0,!1,_)});var I=ut.length===1?0:1;if(F&&re.hasNoSize()&&(_=!0,Fe[0]=0,ut.length>1)){var ae=100/(ut.length-1);ut.forEach(function(U){Fe[U]=U*ae})}for(;I<ut.length;++I)ut.forEach(function(U){cs(U,Fe[U],!0,!0,_)});Tn(),ut.forEach(function(U){je("update",U),M[U]!==null&&y&&je("set",U)})}function Ec(f){yi(u.start,f)}function Mc(f,y,_,M){if(!((f=Number(f))>=0&&f<ut.length))throw new Error("noUiSlider: invalid handle number, got: "+f);cs(f,gr(y,f),!0,!0,M),je("update",f),_&&je("set",f)}function vr(f){if(f===void 0&&(f=!1),f)return Bt.length===1?Bt[0]:Bt.slice(0);var y=Bt.map(u.format.to);return y.length===1?y[0]:y}function Ac(){for(Ws(Te.aria),Ws(Te.tooltips),Object.keys(u.cssClasses).forEach(function(f){R(Ge,u.cssClasses[f])});Ge.firstChild;)Ge.removeChild(Ge.firstChild);delete Ge.noUiSlider}function br(f){var y=Fe[f],_=re.getNearbySteps(y),M=Bt[f],F=_.thisStep.step,I=null;if(u.snap)return[M-_.stepBefore.startValue||null,_.stepAfter.startValue-M||null];F!==!1&&M+F>_.stepAfter.startValue&&(F=_.stepAfter.startValue-M),I=M>_.thisStep.startValue?_.thisStep.step:_.stepBefore.step!==!1&&M-_.stepBefore.highestStep,y===100?F=null:y===0&&(I=null);var ae=re.countStepDecimals();return F!==null&&F!==!1&&(F=Number(F.toFixed(ae))),I!==null&&I!==!1&&(I=Number(I.toFixed(ae))),[I,F]}function Tc(){return ut.map(br)}function Nc(f,y){var _=vr(),M=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];M.forEach(function(I){f[I]!==void 0&&(T[I]=f[I])});var F=ie(T);M.forEach(function(I){f[I]!==void 0&&(u[I]=F[I])}),re=F.spectrum,u.margin=F.margin,u.limit=F.limit,u.padding=F.padding,u.pips?Sn(u.pips):Cn(),u.tooltips?cr():xn(),Fe=[],yi(r(f.start)?f.start:_,y)}function Pc(){W=dc(Ge),uc(u.connect,W),Cc(u.events),yi(u.start),u.pips&&Sn(u.pips),u.tooltips&&cr(),fc()}Pc();var wi={destroy:Ac,steps:Tc,on:Mn,off:Ws,get:vr,set:yi,setHandle:Mc,reset:Ec,__moveHandles:function(f,y,_){fr(f,y,Fe,_)},options:T,updateOptions:Nc,target:Ge,removePips:Cn,removeTooltips:xn,getPositions:function(){return Fe.slice()},getTooltips:function(){return ke},getOrigins:function(){return $},pips:Sn};return wi}function Le(h,u){if(!h||!h.nodeName)throw new Error("noUiSlider: create requires a single element, got: "+h);if(h.noUiSlider)throw new Error("noUiSlider: Slider was already initialized.");var T=me(h,ie(u),u);return h.noUiSlider=T,T}var Se={__spectrum:Ce,cssClasses:Oe,create:Le};s.create=Le,s.cssClasses=Oe,s.default=Se,Object.defineProperty(s,"__esModule",{value:!0})})(t)}));function Rl(e,t){if(!Array.isArray(e)||!Array.isArray(t))return!1;const s=t.slice().sort();return e.length===t.length&&e.slice().sort().every(function(i,n){return i===s[n]})}var Eo={name:"Slider",emits:["input","update:modelValue","start","slide","drag","update","change","set","end"],props:{value:{validator:function(e){return t=>typeof t=="number"||t instanceof Array||t==null||t===!1},required:!1},modelValue:{validator:function(e){return t=>typeof t=="number"||t instanceof Array||t==null||t===!1},required:!1},id:{type:[String,Number],required:!1},disabled:{type:Boolean,required:!1,default:!1},min:{type:Number,required:!1,default:0},max:{type:Number,required:!1,default:100},step:{type:Number,required:!1,default:1},orientation:{type:String,required:!1,default:"horizontal"},direction:{type:String,required:!1,default:"ltr"},tooltips:{type:Boolean,required:!1,default:!0},options:{type:Object,required:!1,default:()=>({})},merge:{type:Number,required:!1,default:-1},format:{type:[Object,Function,Boolean],required:!1,default:null},classes:{type:Object,required:!1,default:()=>({})},showTooltip:{type:String,required:!1,default:"always"},tooltipPosition:{type:String,required:!1,default:null},lazy:{type:Boolean,required:!1,default:!0},ariaLabelledby:{type:String,required:!1,default:void 0},aria:{required:!1,type:Object,default:()=>({})}},setup(e,t){const s=function(r,l,c){const{value:d,modelValue:g,min:v}=Gs(r);let p=g&&g.value!==void 0?g:d;const w=$t(p.value);if(Ti(p.value)&&(p=$t(v.value)),Array.isArray(p.value)&&p.value.length==0)throw new Error("Slider v-model must not be an empty array");return{value:p,initialValue:w}}(e),i=function(r,l,c){const{classes:d,showTooltip:g,tooltipPosition:v,orientation:p}=Gs(r),w=Ut(()=>({target:"slider-target",focused:"slider-focused",tooltipFocus:"slider-tooltip-focus",tooltipDrag:"slider-tooltip-drag",ltr:"slider-ltr",rtl:"slider-rtl",horizontal:"slider-horizontal",vertical:"slider-vertical",textDirectionRtl:"slider-txt-dir-rtl",textDirectionLtr:"slider-txt-dir-ltr",base:"slider-base",connects:"slider-connects",connect:"slider-connect",origin:"slider-origin",handle:"slider-handle",handleLower:"slider-handle-lower",handleUpper:"slider-handle-upper",touchArea:"slider-touch-area",tooltip:"slider-tooltip",tooltipTop:"slider-tooltip-top",tooltipBottom:"slider-tooltip-bottom",tooltipLeft:"slider-tooltip-left",tooltipRight:"slider-tooltip-right",tooltipHidden:"slider-tooltip-hidden",active:"slider-active",draggable:"slider-draggable",tap:"slider-state-tap",drag:"slider-state-drag",pips:"slider-pips",pipsHorizontal:"slider-pips-horizontal",pipsVertical:"slider-pips-vertical",marker:"slider-marker",markerHorizontal:"slider-marker-horizontal",markerVertical:"slider-marker-vertical",markerNormal:"slider-marker-normal",markerLarge:"slider-marker-large",markerSub:"slider-marker-sub",value:"slider-value",valueHorizontal:"slider-value-horizontal",valueVertical:"slider-value-vertical",valueNormal:"slider-value-normal",valueLarge:"slider-value-large",valueSub:"slider-value-sub",...d.value}));return{classList:Ut(()=>{const k={...w.value};return Object.keys(k).forEach(x=>{k[x]=Array.isArray(k[x])?k[x].filter(C=>C!==null).join(" "):k[x]}),g.value!=="always"&&(k.target+=` ${g.value==="drag"?k.tooltipDrag:k.tooltipFocus}`),p.value==="horizontal"&&(k.tooltip+=v.value==="bottom"?` ${k.tooltipBottom}`:` ${k.tooltipTop}`),p.value==="vertical"&&(k.tooltip+=v.value==="right"?` ${k.tooltipRight}`:` ${k.tooltipLeft}`),k})}}(e),n=function(r,l,c){const{format:d,step:g}=Gs(r),v=c.value,p=c.classList,w=Ut(()=>d&&d.value?typeof d.value=="function"?{to:d.value}:Hl({...d.value}):Hl({decimals:g.value>=0?0:2})),k=Ut(()=>Array.isArray(v.value)?v.value.map(x=>w.value):w.value);return{tooltipFormat:w,tooltipsFormat:k,tooltipsMerge:(x,C,R)=>{var Z=getComputedStyle(x).direction==="rtl",Y=x.noUiSlider.options.direction==="rtl",se=x.noUiSlider.options.orientation==="vertical",ne=x.noUiSlider.getTooltips(),be=x.noUiSlider.getOrigins();ne.forEach(function(ue,j){ue&&be[j].appendChild(ue)}),x.noUiSlider.on("update",function(ue,j,q,he,de){var B=[[]],pe=[[]],xe=[[]],oe=0;ne[0]&&(B[0][0]=0,pe[0][0]=de[0],xe[0][0]=w.value.to(parseFloat(ue[0])));for(var fe=1;fe<ue.length;fe++)(!ne[fe]||ue[fe]-ue[fe-1]>C)&&(B[++oe]=[],xe[oe]=[],pe[oe]=[]),ne[fe]&&(B[oe].push(fe),xe[oe].push(w.value.to(parseFloat(ue[fe]))),pe[oe].push(de[fe]));B.forEach(function(Ce,ve){for(var Oe=Ce.length,Te=0;Te<Oe;Te++){var ze=Ce[Te];if(Te===Oe-1){var Ve=0;pe[ve].forEach(function(X){Ve+=1e3-X});var Tt=se?"bottom":"right",Dt=Y?0:Oe-1,Ze=1e3-pe[ve][Dt];Ve=(Z&&!se?100:0)+Ve/Oe-Ze,ne[ze].innerHTML=xe[ve].join(R),ne[ze].style.display="block",ne[ze].style[Tt]=Ve+"%",p.value.tooltipHidden.split(" ").forEach(X=>{ne[ze].classList.contains(X)&&ne[ze].classList.remove(X)})}else ne[ze].style.display="none",p.value.tooltipHidden.split(" ").forEach(X=>{ne[ze].classList.add(X)})}})})}}}(e,0,{value:s.value,classList:i.classList}),o=function(r,l,c){const{orientation:d,direction:g,tooltips:v,step:p,min:w,max:k,merge:x,id:C,disabled:R,options:Z,classes:Y,format:se,lazy:ne,ariaLabelledby:be,aria:ue}=Gs(r),j=c.value,q=c.initialValue,he=c.tooltipsFormat,de=c.tooltipsMerge,B=c.tooltipFormat,pe=c.classList,xe=$t(null),oe=$t(null),fe=$t(!1),Ce=Ut(()=>{let X={cssPrefix:"",cssClasses:pe.value,orientation:d.value,direction:g.value,tooltips:!!v.value&&he.value,connect:"lower",start:Ti(j.value)?w.value:j.value,range:{min:w.value,max:k.value}};if(p.value>0&&(X.step=p.value),Array.isArray(j.value)&&(X.connect=!0),be&&be.value||ue&&Object.keys(ue.value).length){let Me=Array.isArray(j.value)?j.value:[j.value];X.handleAttributes=Me.map(js=>Object.assign({},ue.value,be&&be.value?{"aria-labelledby":be.value}:{}))}return se.value&&(X.ariaFormat=B.value),X}),ve=Ut(()=>{let X={id:C&&C.value?C.value:void 0};return R.value&&(X.disabled=!0),X}),Oe=Ut(()=>Array.isArray(j.value)),Te=()=>{let X=oe.value.get();return Array.isArray(X)?X.map(Me=>parseFloat(Me)):parseFloat(X)},ze=function(X){let Me=!(arguments.length>1&&arguments[1]!==void 0)||arguments[1];oe.value.set(X,Me)},Ve=X=>{l.emit("input",X),l.emit("update:modelValue",X),l.emit("update",X)},Tt=()=>{oe.value=A1.create(xe.value,Object.assign({},Ce.value,Z.value)),v.value&&Oe.value&&x.value>=0&&de(xe.value,x.value," - "),oe.value.on("set",()=>{const X=Te();l.emit("change",X),l.emit("set",X),ne.value&&Ve(X)}),oe.value.on("update",()=>{if(!fe.value)return;const X=Te();Oe.value&&Rl(j.value,X)||!Oe.value&&j.value==X?l.emit("update",X):ne.value||Ve(X)}),oe.value.on("start",()=>{l.emit("start",Te())}),oe.value.on("end",()=>{l.emit("end",Te())}),oe.value.on("slide",()=>{l.emit("slide",Te())}),oe.value.on("drag",()=>{l.emit("drag",Te())}),xe.value.querySelectorAll("[data-handle]").forEach(X=>{X.onblur=()=>{xe.value&&pe.value.focused.split(" ").forEach(Me=>{xe.value.classList.remove(Me)})},X.onfocus=()=>{pe.value.focused.split(" ").forEach(Me=>{xe.value.classList.add(Me)})}}),fe.value=!0},Dt=()=>{oe.value.off(),oe.value.destroy(),oe.value=null},Ze=(X,Me)=>{fe.value=!1,Dt(),Tt()};return fn(Tt),mn(Dt),et(Oe,Ze,{immediate:!1}),et(w,Ze,{immediate:!1}),et(k,Ze,{immediate:!1}),et(p,Ze,{immediate:!1}),et(d,Ze,{immediate:!1}),et(g,Ze,{immediate:!1}),et(v,Ze,{immediate:!1}),et(x,Ze,{immediate:!1}),et(se,Ze,{immediate:!1,deep:!0}),et(Z,Ze,{immediate:!1,deep:!0}),et(Y,Ze,{immediate:!1,deep:!0}),et(j,(X,Me)=>{Me&&(typeof Me=="object"&&typeof X=="object"&&X&&Object.keys(Me)>Object.keys(X)||typeof Me=="object"&&typeof X!="object"||Ti(X))&&Ze()},{immediate:!1}),et(j,X=>{if(Ti(X))return void ze(w.value,!1);let Me=Te();Oe.value&&!Array.isArray(Me)&&(Me=[Me]),(Oe.value&&!Rl(X,Me)||!Oe.value&&X!=Me)&&ze(X,!1)},{deep:!0}),{slider:xe,slider$:oe,isRange:Oe,sliderProps:ve,init:Tt,destroy:Dt,refresh:Ze,update:ze,reset:()=>{Ve(q.value)}}}(e,t,{value:s.value,initialValue:s.initialValue,tooltipFormat:n.tooltipFormat,tooltipsFormat:n.tooltipsFormat,tooltipsMerge:n.tooltipsMerge,classList:i.classList});return{...i,...n,...o}}};Eo.render=function(e,t,s,i,n,o){return N(),z("div",Qa(e.sliderProps,{ref:"slider"}),null,16)},Eo.__file="src/Slider.vue";const T1={components:{ColorPicker:E1,Slider:Eo},methods:{stringToId(e){return e.replace(/[^a-z0-9]/gi,"-").toLowerCase()},showSettingsGroup(e){let t="settings-group-"+this.stringToId(e),s=document.getElementById(t);s.style.display==="none"?s.style.display="block":s.style.display="none"},updateSettings(e,t,s){let i=e;e.target&&(i=e.target.value),this.options[s][t]=i;let n=this;Ss.post(mw.settings.api_url+"save_option",{option_group:s,option_key:t,option_value:i}).then(function(o){o.data&&n.styleSheetSourceFile&&mw.app.templateSettings.reloadStylesheet(n.styleSheetSourceFile,n.optionGroupLess)})},resetTemplateSettings(){mw.tools.confirm_reset_module_by_id(this.optionGroup,function(){})},resetStylesheetSettings(){mw.tools.confirm_reset_module_by_id(this.optionGroupLess,function(){})}},mounted(){let e=this;Ss.get(mw.settings.api_url+"editor/template_settings_v2/list").then(function(t){t.data&&(e.settingsGroups=t.data.settingsGroups,e.options=t.data.options,e.optionGroup=t.data.optionGroup,e.optionGroupLess=t.data.optionGroupLess,e.styleSheetSourceFile=t.data.styleSheetSourceFile)})},data(){return{settingsGroups:[],options:{},optionGroup:"",optionGroupLess:"",styleSheetSourceFile:!1}}},N1={class:"p-3"},P1={key:0,class:"text-center"},O1={class:"mb-3"},$1=["onClick"],H1=["id"],R1=["id"],I1={class:"accordion-item"},D1=["id"],F1=["data-bs-target","aria-controls"],B1=["id","aria-labelledby","data-bs-parent"],z1={class:"accordion-body"},V1={class:"mt-2"},j1={key:0},U1={class:"mr-4"},q1=["value","onChange","name"],W1={key:1},Y1={class:"d-flex justify-content-between"},K1={class:"mr-4"},X1={key:2},J1={class:"text-uppercase"},Z1={key:3},G1={class:"mr-4"},Q1={key:0},e0={key:4},t0=["onChange","name","value"],s0=["value"],i0={key:5},n0=["onChange","onUpdate:modelValue"],o0=["value"],r0={key:6},l0=["onChange","name","value"],a0=a("option",{value:"Arial"},"Arial",-1),c0=a("option",{value:"Tahoma"},"Tahoma",-1),u0=[a0,c0],d0={key:0,class:"mt-2 mr-2"},h0={key:1,class:"mt-2 mr-2"};function f0(e,t,s,i,n,o){const r=Re("ColorPicker"),l=Re("Slider");return N(),z("div",N1,[n.settingsGroups.length===0?(N(),z("div",P1," Loading... ")):(N(!0),z(Pe,{key:1},St(n.settingsGroups,(c,d)=>(N(),z("div",O1,[a("div",null,[a("span",{onClick:g=>o.showSettingsGroup(d),class:"border-bottom pt-1 pb-1 settings-main-group"},We(d),9,$1)]),a("div",{style:{display:"none"},id:"settings-group-"+o.stringToId(d)},[a("div",{class:"accordion accordion-flush",id:"accordionFlush"+o.stringToId(d)},[(N(!0),z(Pe,null,St(c.values,(g,v)=>(N(),z("div",I1,[a("h2",{class:"accordion-header",id:"flush-heading-"+o.stringToId(d+"-"+v)},[a("button",{class:"accordion-button collapsed",type:"button","data-bs-toggle":"collapse","data-bs-target":"#flush-collapse-"+o.stringToId(d+"-"+v),"aria-expanded":"false","aria-controls":"flush-collapse-"+o.stringToId(d+"-"+v)},We(v),9,F1)],8,D1),a("div",{id:"flush-collapse-"+o.stringToId(d+"-"+v),class:"accordion-collapse collapse","aria-labelledby":"flush-heading-"+o.stringToId(d+"-"+v),"data-bs-parent":"#accordionFlush"+o.stringToId(d)},[a("div",z1,[(N(!0),z(Pe,null,St(g,(p,w)=>(N(),z("div",V1,[p.type==="text"?(N(),z("div",j1,[a("label",U1,We(p.label),1),a("div",null,[a("input",{type:"text",class:"form-control",value:[p.value?p.value:p.default],onChange:k=>o.updateSettings(k,w,p.optionGroup),name:w},null,40,q1)])])):_e("",!0),p.type==="color"?(N(),z("div",W1,[a("div",Y1,[a("div",K1,We(p.label),1),a("div",null,[(N(),De(r,{key:w,color:[p.value?p.value:p.default],onChange:k=>o.updateSettings(k,w,p.optionGroup),name:w},null,8,["color","onChange","name"]))])])])):_e("",!0),p.type==="title"?(N(),z("div",X1,[a("div",J1,[a("span",null,We(p.label),1)])])):_e("",!0),p.type==="range"?(N(),z("div",Z1,[a("label",G1,[vn(We(p.label)+" - "+We(n.options[p.optionGroup][w])+" ",1),p.range.unit?(N(),z("span",Q1,We(p.range.unit?p.range.unit:""),1)):_e("",!0)]),a("div",null,[V(l,{min:[p.range.min?p.range.min:0],max:[p.range.max?p.range.max:100],step:[p.range.step?p.range.step:1],onChange:k=>o.updateSettings(k,w,p.optionGroup),modelValue:n.options[p.optionGroup][w],"onUpdate:modelValue":k=>n.options[p.optionGroup][w]=k,merge:1,tooltips:!1,tooltipPosition:"right"},null,8,["min","max","step","onChange","modelValue","onUpdate:modelValue"])])])):_e("",!0),p.type==="dropdown_image"?(N(),z("div",e0,[a("div",null,We(p.label),1),a("select",{class:"form-control",onChange:k=>o.updateSettings(k,w,p.optionGroup),name:w,value:[p.value?p.value:p.default]},[(N(!0),z(Pe,null,St(p.options,(k,x)=>(N(),z("option",{value:x},We(k),9,s0))),256))],40,t0)])):_e("",!0),p.type==="dropdown"?(N(),z("div",i0,[a("div",null,We(p.label),1),pi(a("select",{class:"form-control",onChange:k=>o.updateSettings(k,w,p.optionGroup),"onUpdate:modelValue":k=>n.options[p.optionGroup][w]=k},[(N(!0),z(Pe,null,St(p.options,(k,x)=>(N(),z("option",{value:x},We(k),9,o0))),256))],40,n0),[[fm,n.options[p.optionGroup][w]]])])):_e("",!0),p.type==="font_selector"?(N(),z("div",r0,[a("div",null,We(p.label),1),a("select",{class:"form-control",onChange:k=>o.updateSettings(k,w,p.optionGroup),name:w,value:[p.value?p.value:p.default]},u0,40,l0)])):_e("",!0)]))),256))])],8,B1)]))),256))],8,R1),c.type=="stylesheet"?(N(),z("div",d0,[a("button",{onClick:t[0]||(t[0]=(...g)=>o.resetStylesheetSettings&&o.resetStylesheetSettings(...g)),style:{"border-radius":"20px"},class:"btn btn-primary btn-sm btn-block"},"Reset Stylesheet Settings ")])):_e("",!0),c.type=="template"?(N(),z("div",h0,[a("button",{onClick:t[1]||(t[1]=(...g)=>o.resetTemplateSettings&&o.resetTemplateSettings(...g)),style:{"border-radius":"20px"},class:"btn btn-primary btn-sm btn-block"},"Reset Template Settings ")])):_e("",!0)],8,H1)]))),256))])}const m0=Je(T1,[["render",f0]]);const p0={components:{TemplateSettings:m0},methods:{closeSidebar(){this.showSidebar=!1,document.getElementById("live-edit-frame-holder").removeAttribute("style")},openSidebar(){this.showSidebar=!0,document.getElementById("live-edit-frame-holder").setAttribute("style","margin-right: 303px;")}},mounted(){const e=this;this.emitter.on("live-edit-ui-show",t=>{t=="template-settings"&&(e.showSidebar==!1?e.openSidebar():e.closeSidebar())}),document.addEventListener("keyup",function(t){t.keyCode===27&&(e.showSidebar=!1)})},data(){return{showSidebar:!1}}},g0={key:0};function v0(e,t,s,i,n,o){const r=Re("TemplateSettings");return N(),z("div",null,[a("div",{id:"general-theme-settings",class:ct([n.showSidebar==!0?"active":""])},[n.showSidebar?(N(),z("div",g0,[a("button",{onClick:t[0]||(t[0]=(...l)=>o.closeSidebar&&o.closeSidebar(...l)),type:"button",class:"btn btn-danger"}," Close Sidebar ")])):_e("",!0),V(r)],2)])}const b0=Je(p0,[["render",v0]]),y0={},w0={style:{"fill-rule":"evenodd","clip-rule":"evenodd","stroke-linejoin":"round","stroke-miterlimit":"2"},version:"1.1",viewBox:"0 0 24 24",width:"100%","xml:space":"preserve",xmlns:"http://www.w3.org/2000/svg","xmlns:serif":"http://www.serif.com/","xmlns:xlink":"http://www.w3.org/1999/xlink"},k0=bn('<g id="Icon"><path d="M11.25,15.5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l-0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l-0,-3.5Zm-1.5,0l-0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l-0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path><path d="M11.25,5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l0,-3.5Zm-1.5,0l0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path><path d="M21.75,15.5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l0,-3.5Zm-1.5,0l0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path><path d="M21.75,5c0,-0.729 -0.29,-1.429 -0.805,-1.945c-0.516,-0.515 -1.216,-0.805 -1.945,-0.805l-3.5,-0c-0.729,-0 -1.429,0.29 -1.945,0.805c-0.515,0.516 -0.805,1.216 -0.805,1.945l0,3.5c-0,0.729 0.29,1.429 0.805,1.945c0.516,0.515 1.216,0.805 1.945,0.805l3.5,-0c0.729,0 1.429,-0.29 1.945,-0.805c0.515,-0.516 0.805,-1.216 0.805,-1.945l0,-3.5Zm-1.5,0l0,3.5c0,0.332 -0.132,0.649 -0.366,0.884c-0.235,0.234 -0.552,0.366 -0.884,0.366l-3.5,-0c-0.332,0 -0.649,-0.132 -0.884,-0.366c-0.234,-0.235 -0.366,-0.552 -0.366,-0.884l0,-3.5c-0,-0.332 0.132,-0.649 0.366,-0.884c0.235,-0.234 0.552,-0.366 0.884,-0.366l3.5,-0c0.332,-0 0.649,0.132 0.884,0.366c0.234,0.235 0.366,0.552 0.366,0.884Z"></path></g>',1),_0=[k0];function x0(e,t){return N(),z("svg",w0,_0)}const C0=Je(y0,[["render",x0]]),S0={},L0={version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"},E0=a("g",null,[a("path",{d:"M22 9.999V20a1 1 0 0 1-1 1h-8V9.999h9zm-11 6V21H3a1 1 0 0 1-1-1v-4.001h9zM11 3v10.999H2V4a1 1 0 0 1 1-1h8zm10 0a1 1 0 0 1 1 1v3.999h-9V3h8z"})],-1),M0=[E0];function A0(e,t){return N(),z("svg",L0,M0)}const T0=Je(S0,[["render",A0]]);const N0=(e,t)=>Array.from({length:Math.ceil(e.length/t)},(s,i)=>e.slice(i*t,i*t+t)),P0={name:"Loading",props:{color:{type:String,default:"#18191A"}}},O0={class:"dots"};function $0(e,t,s,i,n,o){return N(),z("div",O0,[a("div",{style:Et(`background-color: ${s.color}`)},null,4),a("div",{style:Et(`background-color: ${s.color}`)},null,4),a("div",{style:Et(`background-color: ${s.color}`)},null,4)])}const H0=Je(P0,[["render",$0]]),R0={name:"LazyList",components:{Loading:H0},props:{data:{type:Array,default:()=>[]},itemsPerRender:{type:Number,default:3},containerClasses:{type:String,default:""},defaultLoading:{type:Boolean,default:!0},defaultLoadingColor:{type:String,default:"#18191A"}},created(){this.updateList(),this.$watch("data",function(){this.updateList()},{deep:!0})},mounted(){this.$refs.container.addEventListener("scroll",this.loadItems),this.loadItems()},beforeUnmount(){this.$refs.container.removeEventListener("scroll",this.loadItems)},data(){return{items:[],page:0,loading:!1,itemsToDisplay:[]}},methods:{updateList(){const e=N0(this.data,this.itemsPerRender);this.items=e,this.itemsToDisplay=e[0]},loadItems(){if(this.page===this.items.length-1)return;const e=this.$refs["end-of-list"];if(!e)return;const t=e.getBoundingClientRect();t.top>=0&&t.bottom<=window.innerHeight&&!this.loading&&(this.loading=!0,this.page++,setTimeout(()=>{this.items[this.page]===void 0&&(this.page=0),this.itemsToDisplay=[...this.itemsToDisplay,...this.items[this.page]],this.loading=!1,this.loadItems()},500))}}},I0={key:0,id:"loading-wrapper"},D0={key:1,id:"loading-wrapper"},F0={id:"end-of-list",ref:"end-of-list"};function B0(e,t,s,i,n,o){const r=Re("Loading");return N(),z("div",{id:"container",ref:"container",class:ct(`${s.containerClasses}`)},[(N(!0),z(Pe,null,St(n.itemsToDisplay,l=>Wi(e.$slots,"default",{item:l})),256)),n.loading?(N(),z(Pe,{key:0},[s.defaultLoading?(N(),z("div",I0,[V(r,{color:s.defaultLoadingColor},null,8,["color"])])):(N(),z("div",D0,[Wi(e.$slots,"loading")]))],64)):_e("",!0),pi(a("div",F0,null,512),[[gm,n.page!==n.items.length-1||!n.loading]])],2)}const z0=Je(R0,[["render",B0]]),V0=["data-index"],j0=Yt({__name:"masonry-wall",props:{columnWidth:{default:400},items:null,gap:{default:0},rtl:{type:Boolean,default:!1},ssrColumns:{default:0},scrollContainer:{default:null}},emits:["redraw","redrawSkip"],setup(e,{emit:t}){const s=e,{columnWidth:i,items:n,gap:o,rtl:r,ssrColumns:l,scrollContainer:c}=Gs(s),d=$t([]),g=$t();function v(){const C=Math.floor((g.value.getBoundingClientRect().width+o.value)/(i.value+o.value));return C>0?C:1}function p(C){return[...new Array(C)].map(()=>[])}if(l.value>0){const C=p(l.value);n.value.forEach((R,Z)=>C[Z%l.value].push(Z)),d.value=C}async function w(C){if(C>=n.value.length)return;await Ma();const R=[...g.value.children];r.value&&R.reverse();const Z=R.reduce((Y,se)=>se.getBoundingClientRect().height<Y.getBoundingClientRect().height?se:Y);d.value[+Z.dataset.index].push(C),await w(C+1)}async function k(C=!1){if(d.value.length===v()&&!C){t("redrawSkip");return}d.value=p(v());const R=c==null?void 0:c.value,Z=R?R.scrollTop:window.scrollY;await w(0),R?R.scrollBy({top:Z-R.scrollTop}):window.scrollTo({top:Z}),t("redraw")}const x=typeof ResizeObserver>"u"?void 0:new ResizeObserver(()=>k());return fn(()=>{k(),x==null||x.observe(g.value)}),Yo(()=>x==null?void 0:x.unobserve(g.value)),et([n,r],()=>k(!0)),et([i,o],()=>k()),(C,R)=>(N(),z("div",{ref_key:"wall",ref:g,class:"masonry-wall",style:Et({display:"flex",gap:`${Zs(o)}px`})},[(N(!0),z(Pe,null,St(d.value,(Z,Y)=>(N(),z("div",{key:Y,class:"masonry-column","data-index":Y,style:Et({display:"flex","flex-basis":"0px","flex-direction":"column","flex-grow":1,gap:`${Zs(o)}px`,height:["-webkit-max-content","-moz-max-content","max-content"],"min-width":0})},[(N(!0),z(Pe,null,St(Z,se=>(N(),z("div",{key:se,class:"masonry-item"},[Wi(C.$slots,"default",{item:Zs(n)[se],index:se},()=>[vn(We(Zs(n)[se]),1)])]))),128))],12,V0))),128))],4))}}),U0=(()=>{const e=j0;return e.install=t=>{t.component("MasonryWall",e)},e})();const q0={components:{GridIcon:C0,MasonryIcon:T0,MasonryWall:U0,LazyList:z0,ListIcon:Ip},methods:{insertLayout(e){mw.app.editor.insertLayout({template:e}),this.showModal=!1},getLayoutsListFromService(){return mw.app.layouts.list()},filterCategorySubmit(e){this.filterCategory=e,this.filterLayouts()},filterLayouts(){this.layoutsListLoaded=!1;let e=this.layoutsList.layouts;this.filterKeyword!=""&&this.filterKeyword&&(e=e.filter(t=>t.title.toUpperCase().includes(this.filterKeyword.toUpperCase()))),this.filterCategory!=""&&this.filterCategory&&(e=e.filter(t=>{if(t.categories)return t.categories.toUpperCase().includes(this.filterCategory.toUpperCase())})),this.layoutsListLoaded=!0,this.layoutsListFiltered=e}},mounted(){const e=this;mw.app.on("ready",()=>{this.getLayoutsListFromService().then(function(t){e.layoutsList=t,e.layoutsListFiltered=t.layouts,e.layoutsListLoaded=!0}),mw.app.editor.on("insertLayoutRequest",function(t){e.showModal=!0})}),this.emitter.on("live-edit-ui-show",t=>{t=="show-layouts"&&(e.showModal==!1?e.showModal=!0:e.showModal=!1)}),document.addEventListener("keyup",function(t){t.keyCode===27&&(e.showModal=!1)})},data(){return{items:[{title:"First",description:"The first item."},{title:"Second",description:"The second item."}],filterKeyword:"",filterCategory:"",layoutsListTypePreview:"list",layoutsList:[],layoutsListFiltered:[],layoutsListLoaded:!1,showModal:!1}}},W0={key:0,style:{visibility:"hidden",position:"absolute",width:"1px",height:"1px"}},Y0={key:0,class:"mw-le-dialog-block mw-le-layouts-dialog active",style:{inset:"20px",transform:"none"}},K0={class:"modules-list modules-list-defaultModules"},X0={class:"mw-le-layouts-dialog-row"},J0={class:"mw-le-layouts-dialog-col"},Z0={class:"modules-list-search-block"},G0=a("div",{class:"mw-le-layouts-dialog-categories-title"},"Categories",-1),Q0={class:"modules-list-categories pb-5"},eg=a("li",null,null,-1),tg=["onClick"],sg={class:"mw-le-layouts-dialog-col"},ig={key:0,class:"pl-4 mb-3 mt-3"},ng={key:0},og={class:"pr-4 mt-3"},rg={class:"d-flex justify-content-end pr-4 layout-list-buttons"},lg={key:1,class:"modules-list-block"},ag=["onClick"],cg=["src","alt"],ug={class:"modules-list-block-item-title"},dg=["onClick"],hg={class:"modules-list-block-item-title"},fg={class:"modules-list-block-item-description"},mg={key:3,class:"modules-list-block"},pg=a("div",{class:"modules-list-block-no-results"}," Nothing found... ",-1),gg=[pg];function vg(e,t,s,i,n,o){const r=Re("GridIcon"),l=Re("ListIcon"),c=Re("MasonryIcon"),d=Re("MasonryWall"),g=Re("LazyList");return N(),z(Pe,null,[n.showModal?(N(),z("div",W0)):_e("",!0),n.showModal?(N(),z("div",{key:1,onClick:t[0]||(t[0]=v=>n.showModal=!1),class:"mw-le-overlay active"})):_e("",!0),V(wn,{"enter-active-class":"animate__animated animate__backInLeft","leave-active-class":"animate__animated animate__backOutLeft"},{default:Qs(()=>[n.showModal?(N(),z("div",Y0,[a("div",K0,[a("div",X0,[a("div",J0,[a("div",Z0,[pi(a("input",{"onUpdate:modelValue":t[1]||(t[1]=v=>n.filterKeyword=v),onKeydown:t[2]||(t[2]=v=>o.filterLayouts()),type:"text",placeholder:"Type to Search...",class:"modules-list-search-field"},null,544),[[ic,n.filterKeyword]])]),G0,a("ul",Q0,[a("li",{onClick:t[3]||(t[3]=v=>o.filterCategorySubmit("")),class:ct([n.filterCategory==""?"active animate__animated animate__pulse":""])}," All categories ",2),eg,n.layoutsList.categories?(N(!0),z(Pe,{key:0},St(n.layoutsList.categories,v=>(N(),z("li",{class:ct([v==n.filterCategory?"active animate__animated animate__pulse":""]),onClick:p=>o.filterCategorySubmit(v)},We(v),11,tg))),256)):_e("",!0)])]),a("div",sg,[n.filterKeyword?(N(),z("div",ig,[vn(" Looking for "+We(n.filterKeyword)+" ",1),n.filterCategory?(N(),z("span",ng," in "+We(n.filterCategory),1)):_e("",!0)])):_e("",!0),a("div",og,[a("div",rg,[a("button",{type:"button",onClick:t[4]||(t[4]=v=>n.layoutsListTypePreview="list"),class:ct(["btn btn-sm btn-rounded mr-1",n.layoutsListTypePreview=="list"?"btn-primary":"btn-dark"])},[V(r,{style:{"max-width":"23px","max-height":"23px"}})],2),a("button",{type:"button",onClick:t[5]||(t[5]=v=>n.layoutsListTypePreview="full"),class:ct(["btn btn-sm btn-rounded",n.layoutsListTypePreview=="full"?"btn-primary":"btn-dark"])},[V(l,{style:{"max-width":"23px","max-height":"23px"}})],2),a("button",{type:"button",onClick:t[6]||(t[6]=v=>n.layoutsListTypePreview="masonry"),class:ct(["btn btn-sm btn-rounded mr-1",n.layoutsListTypePreview=="masonry"?"btn-primary":"btn-dark"])},[V(c,{style:{"max-width":"23px","max-height":"23px"}})],2)])]),n.layoutsListLoaded&&n.layoutsListTypePreview=="masonry"?(N(),z("div",lg,[V(d,{items:n.layoutsListFiltered,"ssr-columns":1,"column-width":200,padding:22,gap:22},{default:Qs(({item:v,index:p})=>[a("div",{onClick:w=>o.insertLayout(v.template),class:ct(["modules-list-block-item",v.locked?"modules-list-block-item-is-locked-true":"modules-list-block-item-is-locked-false"])},[a("img",{src:v.screenshot,alt:v.title},null,8,cg),a("div",ug,We(v.title),1)],10,ag)]),_:1},8,["items"])])):_e("",!0),n.layoutsListLoaded&&(n.layoutsListTypePreview=="list"||n.layoutsListTypePreview=="full")&&n.layoutsListFiltered.length>0?(N(),De(g,{key:2,data:n.layoutsListFiltered,itemsPerRender:18,containerClasses:"modules-list-block",defaultLoadingColor:"#222"},{default:Qs(({item:v})=>[a("div",{onClick:p=>o.insertLayout(v.template),style:Et([n.layoutsListTypePreview=="full"?"width:100%;height:300px":"width:300px;height:160px"]),class:ct(["modules-list-block-item",v.locked?"modules-list-block-item-is-locked-true":"modules-list-block-item-is-locked-false"])},[a("div",{class:"modules-list-block-item-picture",style:Et("background-image: url("+v.screenshot+")")},null,4),a("div",hg,We(v.title),1),a("div",fg,We(v.description),1)],14,dg)]),_:1},8,["data"])):_e("",!0),n.layoutsListFiltered.length==0?(N(),z("div",mg,gg)):_e("",!0)])])])])):_e("",!0)]),_:1}),n.showModal?(N(),z("div",{key:2,onClick:t[7]||(t[7]=v=>n.showModal=!1),class:"mw-le-dialog-close active"})):_e("",!0)],64)}const bg=Je(q0,[["render",vg]]);const yg={methods:{getLayoutsList(){return mw.app.modules.list()}},components:{},mounted(){const e=this;mw.app.on("ready",()=>{this.getLayoutsList().then(function(t){e.layoutsList=t})}),this.emitter.on("live-edit-ui-show",t=>{t=="show-modules"&&(e.showModal==!1?e.showModal=!0:e.showModal=!1)}),document.addEventListener("keyup",function(t){t.keyCode===27&&(e.showModal=!1)})},data(){return{keyword:"",category:"",layoutsList:null,showModal:!1}}},wg={key:0,style:{visibility:"hidden",position:"absolute",width:"1px",height:"1px"}},kg={key:0,class:"mw-le-dialog-block mw-le-modules-dialog active",style:{inset:"20px",transform:"none"}},_g={class:"modules-list modules-list-defaultModules"},xg={class:"modules-list-search-block"},Cg=a("input",{type:"text",placeholder:"Type to Search...",class:"modules-list-search-field"},null,-1),Sg={key:0},Lg=a("div",{class:"modules-list-block"},[a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"miscellaneous")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/inline_table/inline_table.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Inline Table"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/search/search.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Search"),a("div",{class:"modules-list-block-item-description"},"Module to search for content"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/popup/popup.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Pop-Up"),a("div",{class:"modules-list-block-item-description"},"Pop-Up")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/embed/embed.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Embed Code"),a("div",{class:"modules-list-block-item-description"},"Embed Code")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/logo/logo.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Logo"),a("div",{class:"modules-list-block-item-description"},"Logo")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/pdf/pdf.svg)"}}),a("div",{class:"modules-list-block-item-title"},"PDF"),a("div",{class:"modules-list-block-item-description"},"PDF")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/categories/category_images/category_images.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Categories Images"),a("div",{class:"modules-list-block-item-description"},"Categories Images"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/accordion/accordion.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Accordion"),a("div",{class:"modules-list-block-item-description"},"Accordion")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/tabs/tabs.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Tabs"),a("div",{class:"modules-list-block-item-description"},"Tabs"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/breadcrumb/breadcrumb.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Breadcrumb"),a("div",{class:"modules-list-block-item-description"},"Breadcrumb navigation"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/faq/faq.svg)"}}),a("div",{class:"modules-list-block-item-title"},"FAQ"),a("div",{class:"modules-list-block-item-description"},"FAQ")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/teamcard/teamcard.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Team Card"),a("div",{class:"modules-list-block-item-description"},"Team Card"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/multilanguage/multilanguage.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Multilanguage"),a("div",{class:"modules-list-block-item-description"},"Multilanguage"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/testimonials/testimonials.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Testimonials"),a("div",{class:"modules-list-block-item-description"},"Testimonials"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/tags/tags.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Tags"),a("div",{class:"modules-list-block-item-description"},"Tags module for your posts!"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"essentials")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/title/title.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Title"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/text/text.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Text"),a("div",{class:"modules-list-block-item-description"},"Simple text")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/spacer/spacer.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Spacer"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/text/empty_element.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Empty Element"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/text/multiple_columns.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Multiple Columns"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/btn/btn.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Button"),a("div",{class:"modules-list-block-item-description"},"Button")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/contact_form/contact_form.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Contact form"),a("div",{class:"modules-list-block-item-description"},"Contact form"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/google_maps/google_maps.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Google Maps"),a("div",{class:"modules-list-block-item-description"},"Google Maps"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/posts/posts.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Posts List"),a("div",{class:"modules-list-block-item-description"},"Posts List")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/content/content.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Content"),a("div",{class:"modules-list-block-item-description"},"Shows dynamic content"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/menu/menu.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Menu"),a("div",{class:"modules-list-block-item-description"},"Navigation menu for pages and links."),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"media")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/picture/picture.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Picture"),a("div",{class:"modules-list-block-item-description"},"Picture")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/pictures/pictures.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Picture Gallery"),a("div",{class:"modules-list-block-item-description"},"Picture Gallery"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/video/video.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Video"),a("div",{class:"modules-list-block-item-description"},"Video")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/image_rollover/image_rollover.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Image Rollover"),a("div",{class:"modules-list-block-item-description"},"Image Rollover"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/slider/slider.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Slider"),a("div",{class:"modules-list-block-item-description"},"Slider")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/audio/audio.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Audio"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/beforeafter/beforeafter.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Before/After"),a("div",{class:"modules-list-block-item-description"},"Before/After")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/carousel_grid/carousel_grid.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Carousel Grid"),a("div",{class:"modules-list-block-item-description"},"Microweber Carousel Grid"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"social")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/social_links/social_links.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Social Links"),a("div",{class:"modules-list-block-item-description"},"Social Links"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/facebook_like/facebook_like.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Facebook Like"),a("div",{class:"modules-list-block-item-description"},"Facebook Like"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/facebook_page/facebook_page.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Facebook page"),a("div",{class:"modules-list-block-item-description"},"Facebook page integration for your website! "),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/tweet_embed/tweet_embed.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Tweet Embed"),a("div",{class:"modules-list-block-item-description"},"Tweet Embed")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/twitter_feed/twitter_feed.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Twitter feed"),a("div",{class:"modules-list-block-item-description"},"Feed of tweets")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/sharer/sharer.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Sharer"),a("div",{class:"modules-list-block-item-description"},"Sharer"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"store")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/shop/products/products.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Products"),a("div",{class:"modules-list-block-item-description"},"Products")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/shop/cart_add/cart_add.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Add to cart"),a("div",{class:"modules-list-block-item-description"},"Add to cart"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/shop/shop.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Online shop"),a("div",{class:"modules-list-block-item-description"},"Online shop")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"navigation")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/pages/pages.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Pages Menu"),a("div",{class:"modules-list-block-item-description"},"Pages Menu"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/categories/categories.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Categories"),a("div",{class:"modules-list-block-item-description"},"Categories"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"users")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/users/forgot_password/forgot_password.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Forgot password"),a("div",{class:"modules-list-block-item-description"},"Microweber")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/users/login/login.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Login"),a("div",{class:"modules-list-block-item-description"},"Login")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/users/register/register.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Registration"),a("div",{class:"modules-list-block-item-description"},"Microweber")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"marketing")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/newsletter/newsletter.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Newsletter"),a("div",{class:"modules-list-block-item-description"},"Newsletter")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"content")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/blog/blog.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Blog"),a("div",{class:"modules-list-block-item-description"},"Blog")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/comments/comments.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Comments"),a("div",{class:"modules-list-block-item-description"},"Comments")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-true"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/layouts/layouts.svg)"}}),a("div",{class:"modules-list-block-item-title"},"Layouts"),a("div",{class:"modules-list-block-item-description"},"Layouts"),a("span",{class:"modules-list-block-item-locked-badge"},"PRO")])]),a("div",{class:"modules-list-block-category-section"},[a("div",{class:"modules-list-block-category-section-title"},[a("h5",null,"other")]),a("div",{class:"modules-list-block-item modules-list-block-item-is-locked-false"},[a("div",{class:"modules-list-block-item-picture",style:{"background-image":"url(http://127.0.0.1:8000/userfiles/modules/highlight_code/highlight_code.svg)"}}),a("div",{class:"modules-list-block-item-title"},"highlight_code"),a("div",{class:"modules-list-block-item-description"},"highlight_code")])]),a("div",{class:"modules-list-block-no-results",style:{display:"none"}},"Nothing found...")],-1);function Eg(e,t,s,i,n,o){return N(),z(Pe,null,[n.showModal?(N(),z("div",wg)):_e("",!0),n.showModal?(N(),z("div",{key:1,onClick:t[0]||(t[0]=r=>n.showModal=!1),class:"mw-le-overlay active"})):_e("",!0),V(wn,{"enter-active-class":"animate__animated animate__backInLeft","leave-active-class":"animate__animated animate__backOutLeft"},{default:Qs(()=>[n.showModal?(N(),z("div",kg,[a("div",_g,[a("div",xg,[Cg,n.showModal?(N(),z("div",Sg,[a("button",{onClick:t[1]||(t[1]=r=>n.showModal=!1),type:"button",class:"btn btn-danger"}," Close Modal ")])):_e("",!0)]),Lg])])):_e("",!0)]),_:1})],64)}const Mg=Je(yg,[["render",Eg]]);const Ag={__name:"App",setup(e){return(t,s)=>(N(),z("div",null,[V(lp),V(s1),V(b0),V(bg),V(Mg)]))}},oc=function(){return document.ontouchstart!==null?"click":"touchstart"},Zi="__vue_click_away__",rc=function(e,t,s){lc(e);let i=s.context,n=t.value,o=!1;setTimeout(function(){o=!0},0),e[Zi]=function(r){if((!e||!e.contains(r.target))&&n&&o&&typeof n=="function")return n.call(i,r)},document.addEventListener(oc(),e[Zi],!1)},lc=function(e){document.removeEventListener(oc(),e[Zi],!1),delete e[Zi]},Tg=function(e,t,s){t.value!==t.oldValue&&rc(e,t,s)},Ng={install:function(e){e.directive("click-away",Pg)}},Pg={mounted:rc,updated:Tg,unmounted:lc};function Og(e){return{all:e=e||new Map,on:function(t,s){var i=e.get(t);i?i.push(s):e.set(t,[s])},off:function(t,s){var i=e.get(t);i&&(s?i.splice(i.indexOf(s)>>>0,1):e.set(t,[]))},emit:function(t,s){var i=e.get(t);i&&i.slice().map(function(n){n(s)}),(i=e.get("*"))&&i.slice().map(function(n){n(t,s)})}}}const $g=Og(),rr=ym(Ag);rr.config.globalProperties.emitter=$g;rr.use(Ng);rr.mount("#live-edit-app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
