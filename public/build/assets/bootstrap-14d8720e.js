var Sa=Object.defineProperty;var La=(e,t,n)=>t in e?Sa(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var me=(e,t,n)=>(La(e,typeof t!="symbol"?t+"":t,n),n),xi=(e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)};var R=(e,t,n)=>(xi(e,t,"read from private field"),n?n.call(e):t.get(e)),ae=(e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)},wt=(e,t,n,i)=>(xi(e,t,"write to private field"),i?i.call(e,n):t.set(e,n),n);var ye=(e,t,n)=>(xi(e,t,"access private method"),n);var ge;class jn{constructor(){ae(this,ge,{})}on(t,n){R(this,ge)[t]?R(this,ge)[t].push(n):R(this,ge)[t]=[n]}off(t,n){if(R(this,ge)[t])if(typeof n=="function"){const i=R(this,ge)[t].indexOf(n);if(i===-1)return;R(this,ge)[t].splice(i,1)}else R(this,ge)[t]=[]}dispatch(t,n){R(this,ge)[t]&&R(this,ge)[t].forEach(function(i){i.call(this,n)})}emit(t,n){return this.dispatch(t,n)}}ge=new WeakMap;var we,bt,An;class Aa extends jn{constructor(){super(...arguments);ae(this,bt);ae(this,we,{})}call(n,i){for(let r in R(this,we))R(this,we)[r][n]&&ye(this,bt,An).call(this,n,R(this,we)[r],i)}get(n){return R(this,we)[n]}getModules(){return R(this,we)}register(n,i){let r;typeof i=="function"?r=new i:r=i,R(this,we)[n]=r,this[n]=r,ye(this,bt,An).call(this,"onRegister",r),this.dispatch("register")}remove(n){let i;if(typeof n=="string"&&(i=n,n=this.get(n)),!i){for(let r in R(this,we))if(R(this,we)[r]===n){i=r;break}}delete R(this,we)[i],delete this[i],ye(this,bt,An).call(this,"onDestroy",n),this.dispatch("remove")}}we=new WeakMap,bt=new WeakSet,An=function(n,i,r){!n||!i||!i[n]||(n=i[n],n(r))};mw.require("editor.js");mw.require("css_parser.js");const vd=function(){var e=document.querySelector("#mw-live-edit-editor"),t=function(){var f={};this.on=function(m,g){f[m]?f[m].push(g):f[m]=[g]},this.dispatch=function(m,g){f[m]&&f[m].forEach(function(y){y.call(this,g)})},this.provide=function(m){this.dispatch("change",m.map(function(g){return{label:g,value:g}}))}},n=new t;window.fontFamilyProvider=n;const i=mw.app.get("canvas").getFrame();i.contentWindow.fontFamilyProvider=n;const r=[[{group:{icon:"mdi mdi-format-title",controls:["format","lineHeight"]}},{group:{controller:"bold",controls:["italic","underline","strikeThrough","removeFormat"]}},"fontSelector","fontSize",{group:{controller:"alignLeft",controls:["alignLeft","alignCenter","alignRight","alignJustify"]}},{group:{controller:"ul",controls:["ol"]}},"image",{group:{controller:"link",controls:["unlink"]}},{group:{controller:"textColor",controls:["textBackgroundColor"]}}]],s=mw.Editor({document:i.contentWindow.document,executionDocument:i.contentWindow.document,actionWindow:i.contentWindow,element:e,mode:"document",notEditableClasses:["module"],regions:".edit",skin:"le2",editMode:"liveedit",scopeColor:"#111",controls:r,smallEditor:r,smallEditorPositionX:"center",smallEditorSkin:"lite",interactionControls:[],id:"live-edit-wysiwyg-editor",minHeight:250,maxHeight:"70vh",state:mw.liveEditState,fontFamilyProvider:n});var o=document.getElementById("vue-toolbar-undo"),l=document.getElementById("vue-toolbar-redo");s.state.on("record",function(){l.disabled=!s.state.hasPrev,o.disabled=!s.state.hasNext}),s.state.on("change",function(){l.disabled=!s.state.hasPrev,o.disabled=!s.state.hasNext}),o&&o.addEventListener("click",function(){s.state.undo()}),l&&l.addEventListener("click",function(){s.state.redo()}),e.innerHTML="",e.appendChild(s.wrapper);var d=s.storage.get(s.settings.id+"-small-editor-pinned");typeof d>"u"&&typeof s.smallEditorApi<"u"&&s.smallEditorApi.pin(),mw.app.register("richTextEditor",s),mw.app.register("richTextEditorAPI",s.api)};function ps(e,t){return function(){return e.apply(t,arguments)}}const{toString:Oa}=Object.prototype,{getPrototypeOf:rr}=Object,$n=(e=>t=>{const n=Oa.call(t);return e[n]||(e[n]=n.slice(8,-1).toLowerCase())})(Object.create(null)),Te=e=>(e=e.toLowerCase(),t=>$n(t)===e),Vn=e=>t=>typeof t===e,{isArray:At}=Array,Kt=Vn("undefined");function Ta(e){return e!==null&&!Kt(e)&&e.constructor!==null&&!Kt(e.constructor)&&ve(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const ms=Te("ArrayBuffer");function Na(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&ms(e.buffer),t}const Da=Vn("string"),ve=Vn("function"),gs=Vn("number"),Wn=e=>e!==null&&typeof e=="object",Ma=e=>e===!0||e===!1,On=e=>{if($n(e)!=="object")return!1;const t=rr(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},ka=Te("Date"),Ra=Te("File"),Ia=Te("Blob"),Pa=Te("FileList"),Ha=e=>Wn(e)&&ve(e.pipe),Ba=e=>{let t;return e&&(typeof FormData=="function"&&e instanceof FormData||ve(e.append)&&((t=$n(e))==="formdata"||t==="object"&&ve(e.toString)&&e.toString()==="[object FormData]"))},za=Te("URLSearchParams"),Fa=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function tn(e,t,{allOwnKeys:n=!1}={}){if(e===null||typeof e>"u")return;let i,r;if(typeof e!="object"&&(e=[e]),At(e))for(i=0,r=e.length;i<r;i++)t.call(null,e[i],i,e);else{const s=n?Object.getOwnPropertyNames(e):Object.keys(e),o=s.length;let l;for(i=0;i<o;i++)l=s[i],t.call(null,e[l],l,e)}}function ws(e,t){t=t.toLowerCase();const n=Object.keys(e);let i=n.length,r;for(;i-- >0;)if(r=n[i],t===r.toLowerCase())return r;return null}const vs=(()=>typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global)(),bs=e=>!Kt(e)&&e!==vs;function Di(){const{caseless:e}=bs(this)&&this||{},t={},n=(i,r)=>{const s=e&&ws(t,r)||r;On(t[s])&&On(i)?t[s]=Di(t[s],i):On(i)?t[s]=Di({},i):At(i)?t[s]=i.slice():t[s]=i};for(let i=0,r=arguments.length;i<r;i++)arguments[i]&&tn(arguments[i],n);return t}const ja=(e,t,n,{allOwnKeys:i}={})=>(tn(t,(r,s)=>{n&&ve(r)?e[s]=ps(r,n):e[s]=r},{allOwnKeys:i}),e),$a=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),Va=(e,t,n,i)=>{e.prototype=Object.create(t.prototype,i),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},Wa=(e,t,n,i)=>{let r,s,o;const l={};if(t=t||{},e==null)return t;do{for(r=Object.getOwnPropertyNames(e),s=r.length;s-- >0;)o=r[s],(!i||i(o,e,t))&&!l[o]&&(t[o]=e[o],l[o]=!0);e=n!==!1&&rr(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},Ua=(e,t,n)=>{e=String(e),(n===void 0||n>e.length)&&(n=e.length),n-=t.length;const i=e.indexOf(t,n);return i!==-1&&i===n},Ya=e=>{if(!e)return null;if(At(e))return e;let t=e.length;if(!gs(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},qa=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&rr(Uint8Array)),Xa=(e,t)=>{const i=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=i.next())&&!r.done;){const s=r.value;t.call(e,s[0],s[1])}},Ka=(e,t)=>{let n;const i=[];for(;(n=e.exec(t))!==null;)i.push(n);return i},Ja=Te("HTMLFormElement"),Ga=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(n,i,r){return i.toUpperCase()+r}),Yr=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),Za=Te("RegExp"),ys=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),i={};tn(n,(r,s)=>{t(r,s,e)!==!1&&(i[s]=r)}),Object.defineProperties(e,i)},Qa=e=>{ys(e,(t,n)=>{if(ve(e)&&["arguments","caller","callee"].indexOf(n)!==-1)return!1;const i=e[n];if(ve(i)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")})}})},el=(e,t)=>{const n={},i=r=>{r.forEach(s=>{n[s]=!0})};return At(e)?i(e):i(String(e).split(t)),n},tl=()=>{},nl=(e,t)=>(e=+e,Number.isFinite(e)?e:t),Ei="abcdefghijklmnopqrstuvwxyz",qr="0123456789",_s={DIGIT:qr,ALPHA:Ei,ALPHA_DIGIT:Ei+Ei.toUpperCase()+qr},il=(e=16,t=_s.ALPHA_DIGIT)=>{let n="";const{length:i}=t;for(;e--;)n+=t[Math.random()*i|0];return n};function rl(e){return!!(e&&ve(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const sl=e=>{const t=new Array(10),n=(i,r)=>{if(Wn(i)){if(t.indexOf(i)>=0)return;if(!("toJSON"in i)){t[r]=i;const s=At(i)?[]:{};return tn(i,(o,l)=>{const d=n(o,r+1);!Kt(d)&&(s[l]=d)}),t[r]=void 0,s}}return i};return n(e,0)},ol=Te("AsyncFunction"),al=e=>e&&(Wn(e)||ve(e))&&ve(e.then)&&ve(e.catch),b={isArray:At,isArrayBuffer:ms,isBuffer:Ta,isFormData:Ba,isArrayBufferView:Na,isString:Da,isNumber:gs,isBoolean:Ma,isObject:Wn,isPlainObject:On,isUndefined:Kt,isDate:ka,isFile:Ra,isBlob:Ia,isRegExp:Za,isFunction:ve,isStream:Ha,isURLSearchParams:za,isTypedArray:qa,isFileList:Pa,forEach:tn,merge:Di,extend:ja,trim:Fa,stripBOM:$a,inherits:Va,toFlatObject:Wa,kindOf:$n,kindOfTest:Te,endsWith:Ua,toArray:Ya,forEachEntry:Xa,matchAll:Ka,isHTMLForm:Ja,hasOwnProperty:Yr,hasOwnProp:Yr,reduceDescriptors:ys,freezeMethods:Qa,toObjectSet:el,toCamelCase:Ga,noop:tl,toFiniteNumber:nl,findKey:ws,global:vs,isContextDefined:bs,ALPHABET:_s,generateString:il,isSpecCompliantForm:rl,toJSONObject:sl,isAsyncFn:ol,isThenable:al};function B(e,t,n,i,r){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),i&&(this.request=i),r&&(this.response=r)}b.inherits(B,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:b.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const xs=B.prototype,Es={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{Es[e]={value:e}});Object.defineProperties(B,Es);Object.defineProperty(xs,"isAxiosError",{value:!0});B.from=(e,t,n,i,r,s)=>{const o=Object.create(xs);return b.toFlatObject(e,o,function(d){return d!==Error.prototype},l=>l!=="isAxiosError"),B.call(o,e.message,t,n,i,r),o.cause=e,o.name=e.name,s&&Object.assign(o,s),o};const ll=null;function Mi(e){return b.isPlainObject(e)||b.isArray(e)}function Cs(e){return b.endsWith(e,"[]")?e.slice(0,-2):e}function Xr(e,t,n){return e?e.concat(t).map(function(r,s){return r=Cs(r),!n&&s?"["+r+"]":r}).join(n?".":""):t}function cl(e){return b.isArray(e)&&!e.some(Mi)}const ul=b.toFlatObject(b,{},null,function(t){return/^is[A-Z]/.test(t)});function Un(e,t,n){if(!b.isObject(e))throw new TypeError("target must be an object");t=t||new FormData,n=b.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,function(O,C){return!b.isUndefined(C[O])});const i=n.metaTokens,r=n.visitor||m,s=n.dots,o=n.indexes,d=(n.Blob||typeof Blob<"u"&&Blob)&&b.isSpecCompliantForm(t);if(!b.isFunction(r))throw new TypeError("visitor must be a function");function f(E){if(E===null)return"";if(b.isDate(E))return E.toISOString();if(!d&&b.isBlob(E))throw new B("Blob is not supported. Use a Buffer instead.");return b.isArrayBuffer(E)||b.isTypedArray(E)?d&&typeof Blob=="function"?new Blob([E]):Buffer.from(E):E}function m(E,O,C){let A=E;if(E&&!C&&typeof E=="object"){if(b.endsWith(O,"{}"))O=i?O:O.slice(0,-2),E=JSON.stringify(E);else if(b.isArray(E)&&cl(E)||(b.isFileList(E)||b.endsWith(O,"[]"))&&(A=b.toArray(E)))return O=Cs(O),A.forEach(function(q,j){!(b.isUndefined(q)||q===null)&&t.append(o===!0?Xr([O],j,s):o===null?O:O+"[]",f(q))}),!1}return Mi(E)?!0:(t.append(Xr(C,O,s),f(E)),!1)}const g=[],y=Object.assign(ul,{defaultVisitor:m,convertValue:f,isVisitable:Mi});function _(E,O){if(!b.isUndefined(E)){if(g.indexOf(E)!==-1)throw Error("Circular reference detected in "+O.join("."));g.push(E),b.forEach(E,function(A,z){(!(b.isUndefined(A)||A===null)&&r.call(t,A,b.isString(z)?z.trim():z,O,y))===!0&&_(A,O?O.concat(z):[z])}),g.pop()}}if(!b.isObject(e))throw new TypeError("data must be an object");return _(e),t}function Kr(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(i){return t[i]})}function sr(e,t){this._pairs=[],e&&Un(e,this,t)}const Ss=sr.prototype;Ss.append=function(t,n){this._pairs.push([t,n])};Ss.toString=function(t){const n=t?function(i){return t.call(this,i,Kr)}:Kr;return this._pairs.map(function(r){return n(r[0])+"="+n(r[1])},"").join("&")};function dl(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Ls(e,t,n){if(!t)return e;const i=n&&n.encode||dl,r=n&&n.serialize;let s;if(r?s=r(t,n):s=b.isURLSearchParams(t)?t.toString():new sr(t,n).toString(i),s){const o=e.indexOf("#");o!==-1&&(e=e.slice(0,o)),e+=(e.indexOf("?")===-1?"?":"&")+s}return e}class hl{constructor(){this.handlers=[]}use(t,n,i){return this.handlers.push({fulfilled:t,rejected:n,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){b.forEach(this.handlers,function(i){i!==null&&t(i)})}}const Jr=hl,As={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},fl=typeof URLSearchParams<"u"?URLSearchParams:sr,pl=typeof FormData<"u"?FormData:null,ml=typeof Blob<"u"?Blob:null,gl=(()=>{let e;return typeof navigator<"u"&&((e=navigator.product)==="ReactNative"||e==="NativeScript"||e==="NS")?!1:typeof window<"u"&&typeof document<"u"})(),wl=(()=>typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function")(),Ae={isBrowser:!0,classes:{URLSearchParams:fl,FormData:pl,Blob:ml},isStandardBrowserEnv:gl,isStandardBrowserWebWorkerEnv:wl,protocols:["http","https","file","blob","url","data"]};function vl(e,t){return Un(e,new Ae.classes.URLSearchParams,Object.assign({visitor:function(n,i,r,s){return Ae.isNode&&b.isBuffer(n)?(this.append(i,n.toString("base64")),!1):s.defaultVisitor.apply(this,arguments)}},t))}function bl(e){return b.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function yl(e){const t={},n=Object.keys(e);let i;const r=n.length;let s;for(i=0;i<r;i++)s=n[i],t[s]=e[s];return t}function Os(e){function t(n,i,r,s){let o=n[s++];const l=Number.isFinite(+o),d=s>=n.length;return o=!o&&b.isArray(r)?r.length:o,d?(b.hasOwnProp(r,o)?r[o]=[r[o],i]:r[o]=i,!l):((!r[o]||!b.isObject(r[o]))&&(r[o]=[]),t(n,i,r[o],s)&&b.isArray(r[o])&&(r[o]=yl(r[o])),!l)}if(b.isFormData(e)&&b.isFunction(e.entries)){const n={};return b.forEachEntry(e,(i,r)=>{t(bl(i),r,n,0)}),n}return null}const _l={"Content-Type":void 0};function xl(e,t,n){if(b.isString(e))try{return(t||JSON.parse)(e),b.trim(e)}catch(i){if(i.name!=="SyntaxError")throw i}return(n||JSON.stringify)(e)}const Yn={transitional:As,adapter:["xhr","http"],transformRequest:[function(t,n){const i=n.getContentType()||"",r=i.indexOf("application/json")>-1,s=b.isObject(t);if(s&&b.isHTMLForm(t)&&(t=new FormData(t)),b.isFormData(t))return r&&r?JSON.stringify(Os(t)):t;if(b.isArrayBuffer(t)||b.isBuffer(t)||b.isStream(t)||b.isFile(t)||b.isBlob(t))return t;if(b.isArrayBufferView(t))return t.buffer;if(b.isURLSearchParams(t))return n.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let l;if(s){if(i.indexOf("application/x-www-form-urlencoded")>-1)return vl(t,this.formSerializer).toString();if((l=b.isFileList(t))||i.indexOf("multipart/form-data")>-1){const d=this.env&&this.env.FormData;return Un(l?{"files[]":t}:t,d&&new d,this.formSerializer)}}return s||r?(n.setContentType("application/json",!1),xl(t)):t}],transformResponse:[function(t){const n=this.transitional||Yn.transitional,i=n&&n.forcedJSONParsing,r=this.responseType==="json";if(t&&b.isString(t)&&(i&&!this.responseType||r)){const o=!(n&&n.silentJSONParsing)&&r;try{return JSON.parse(t)}catch(l){if(o)throw l.name==="SyntaxError"?B.from(l,B.ERR_BAD_RESPONSE,this,null,this.response):l}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Ae.classes.FormData,Blob:Ae.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};b.forEach(["delete","get","head"],function(t){Yn.headers[t]={}});b.forEach(["post","put","patch"],function(t){Yn.headers[t]=b.merge(_l)});const or=Yn,El=b.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Cl=e=>{const t={};let n,i,r;return e&&e.split(`
`).forEach(function(o){r=o.indexOf(":"),n=o.substring(0,r).trim().toLowerCase(),i=o.substring(r+1).trim(),!(!n||t[n]&&El[n])&&(n==="set-cookie"?t[n]?t[n].push(i):t[n]=[i]:t[n]=t[n]?t[n]+", "+i:i)}),t},Gr=Symbol("internals");function jt(e){return e&&String(e).trim().toLowerCase()}function Tn(e){return e===!1||e==null?e:b.isArray(e)?e.map(Tn):String(e)}function Sl(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let i;for(;i=n.exec(e);)t[i[1]]=i[2];return t}const Ll=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function Ci(e,t,n,i,r){if(b.isFunction(i))return i.call(this,t,n);if(r&&(t=n),!!b.isString(t)){if(b.isString(i))return t.indexOf(i)!==-1;if(b.isRegExp(i))return i.test(t)}}function Al(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,n,i)=>n.toUpperCase()+i)}function Ol(e,t){const n=b.toCamelCase(" "+t);["get","set","has"].forEach(i=>{Object.defineProperty(e,i+n,{value:function(r,s,o){return this[i].call(this,t,r,s,o)},configurable:!0})})}class qn{constructor(t){t&&this.set(t)}set(t,n,i){const r=this;function s(l,d,f){const m=jt(d);if(!m)throw new Error("header name must be a non-empty string");const g=b.findKey(r,m);(!g||r[g]===void 0||f===!0||f===void 0&&r[g]!==!1)&&(r[g||d]=Tn(l))}const o=(l,d)=>b.forEach(l,(f,m)=>s(f,m,d));return b.isPlainObject(t)||t instanceof this.constructor?o(t,n):b.isString(t)&&(t=t.trim())&&!Ll(t)?o(Cl(t),n):t!=null&&s(n,t,i),this}get(t,n){if(t=jt(t),t){const i=b.findKey(this,t);if(i){const r=this[i];if(!n)return r;if(n===!0)return Sl(r);if(b.isFunction(n))return n.call(this,r,i);if(b.isRegExp(n))return n.exec(r);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,n){if(t=jt(t),t){const i=b.findKey(this,t);return!!(i&&this[i]!==void 0&&(!n||Ci(this,this[i],i,n)))}return!1}delete(t,n){const i=this;let r=!1;function s(o){if(o=jt(o),o){const l=b.findKey(i,o);l&&(!n||Ci(i,i[l],l,n))&&(delete i[l],r=!0)}}return b.isArray(t)?t.forEach(s):s(t),r}clear(t){const n=Object.keys(this);let i=n.length,r=!1;for(;i--;){const s=n[i];(!t||Ci(this,this[s],s,t,!0))&&(delete this[s],r=!0)}return r}normalize(t){const n=this,i={};return b.forEach(this,(r,s)=>{const o=b.findKey(i,s);if(o){n[o]=Tn(r),delete n[s];return}const l=t?Al(s):String(s).trim();l!==s&&delete n[s],n[l]=Tn(r),i[l]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const n=Object.create(null);return b.forEach(this,(i,r)=>{i!=null&&i!==!1&&(n[r]=t&&b.isArray(i)?i.join(", "):i)}),n}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,n])=>t+": "+n).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...n){const i=new this(t);return n.forEach(r=>i.set(r)),i}static accessor(t){const i=(this[Gr]=this[Gr]={accessors:{}}).accessors,r=this.prototype;function s(o){const l=jt(o);i[l]||(Ol(r,o),i[l]=!0)}return b.isArray(t)?t.forEach(s):s(t),this}}qn.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);b.freezeMethods(qn.prototype);b.freezeMethods(qn);const Re=qn;function Si(e,t){const n=this||or,i=t||n,r=Re.from(i.headers);let s=i.data;return b.forEach(e,function(l){s=l.call(n,s,r.normalize(),t?t.status:void 0)}),r.normalize(),s}function Ts(e){return!!(e&&e.__CANCEL__)}function nn(e,t,n){B.call(this,e??"canceled",B.ERR_CANCELED,t,n),this.name="CanceledError"}b.inherits(nn,B,{__CANCEL__:!0});function Tl(e,t,n){const i=n.config.validateStatus;!n.status||!i||i(n.status)?e(n):t(new B("Request failed with status code "+n.status,[B.ERR_BAD_REQUEST,B.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n))}const Nl=Ae.isStandardBrowserEnv?function(){return{write:function(n,i,r,s,o,l){const d=[];d.push(n+"="+encodeURIComponent(i)),b.isNumber(r)&&d.push("expires="+new Date(r).toGMTString()),b.isString(s)&&d.push("path="+s),b.isString(o)&&d.push("domain="+o),l===!0&&d.push("secure"),document.cookie=d.join("; ")},read:function(n){const i=document.cookie.match(new RegExp("(^|;\\s*)("+n+")=([^;]*)"));return i?decodeURIComponent(i[3]):null},remove:function(n){this.write(n,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}();function Dl(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function Ml(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}function Ns(e,t){return e&&!Dl(t)?Ml(e,t):t}const kl=Ae.isStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");let i;function r(s){let o=s;return t&&(n.setAttribute("href",o),o=n.href),n.setAttribute("href",o),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:n.pathname.charAt(0)==="/"?n.pathname:"/"+n.pathname}}return i=r(window.location.href),function(o){const l=b.isString(o)?r(o):o;return l.protocol===i.protocol&&l.host===i.host}}():function(){return function(){return!0}}();function Rl(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}function Il(e,t){e=e||10;const n=new Array(e),i=new Array(e);let r=0,s=0,o;return t=t!==void 0?t:1e3,function(d){const f=Date.now(),m=i[s];o||(o=f),n[r]=d,i[r]=f;let g=s,y=0;for(;g!==r;)y+=n[g++],g=g%e;if(r=(r+1)%e,r===s&&(s=(s+1)%e),f-o<t)return;const _=m&&f-m;return _?Math.round(y*1e3/_):void 0}}function Zr(e,t){let n=0;const i=Il(50,250);return r=>{const s=r.loaded,o=r.lengthComputable?r.total:void 0,l=s-n,d=i(l),f=s<=o;n=s;const m={loaded:s,total:o,progress:o?s/o:void 0,bytes:l,rate:d||void 0,estimated:d&&o&&f?(o-s)/d:void 0,event:r};m[t?"download":"upload"]=!0,e(m)}}const Pl=typeof XMLHttpRequest<"u",Hl=Pl&&function(e){return new Promise(function(n,i){let r=e.data;const s=Re.from(e.headers).normalize(),o=e.responseType;let l;function d(){e.cancelToken&&e.cancelToken.unsubscribe(l),e.signal&&e.signal.removeEventListener("abort",l)}b.isFormData(r)&&(Ae.isStandardBrowserEnv||Ae.isStandardBrowserWebWorkerEnv?s.setContentType(!1):s.setContentType("multipart/form-data;",!1));let f=new XMLHttpRequest;if(e.auth){const _=e.auth.username||"",E=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";s.set("Authorization","Basic "+btoa(_+":"+E))}const m=Ns(e.baseURL,e.url);f.open(e.method.toUpperCase(),Ls(m,e.params,e.paramsSerializer),!0),f.timeout=e.timeout;function g(){if(!f)return;const _=Re.from("getAllResponseHeaders"in f&&f.getAllResponseHeaders()),O={data:!o||o==="text"||o==="json"?f.responseText:f.response,status:f.status,statusText:f.statusText,headers:_,config:e,request:f};Tl(function(A){n(A),d()},function(A){i(A),d()},O),f=null}if("onloadend"in f?f.onloadend=g:f.onreadystatechange=function(){!f||f.readyState!==4||f.status===0&&!(f.responseURL&&f.responseURL.indexOf("file:")===0)||setTimeout(g)},f.onabort=function(){f&&(i(new B("Request aborted",B.ECONNABORTED,e,f)),f=null)},f.onerror=function(){i(new B("Network Error",B.ERR_NETWORK,e,f)),f=null},f.ontimeout=function(){let E=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const O=e.transitional||As;e.timeoutErrorMessage&&(E=e.timeoutErrorMessage),i(new B(E,O.clarifyTimeoutError?B.ETIMEDOUT:B.ECONNABORTED,e,f)),f=null},Ae.isStandardBrowserEnv){const _=(e.withCredentials||kl(m))&&e.xsrfCookieName&&Nl.read(e.xsrfCookieName);_&&s.set(e.xsrfHeaderName,_)}r===void 0&&s.setContentType(null),"setRequestHeader"in f&&b.forEach(s.toJSON(),function(E,O){f.setRequestHeader(O,E)}),b.isUndefined(e.withCredentials)||(f.withCredentials=!!e.withCredentials),o&&o!=="json"&&(f.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&f.addEventListener("progress",Zr(e.onDownloadProgress,!0)),typeof e.onUploadProgress=="function"&&f.upload&&f.upload.addEventListener("progress",Zr(e.onUploadProgress)),(e.cancelToken||e.signal)&&(l=_=>{f&&(i(!_||_.type?new nn(null,e,f):_),f.abort(),f=null)},e.cancelToken&&e.cancelToken.subscribe(l),e.signal&&(e.signal.aborted?l():e.signal.addEventListener("abort",l)));const y=Rl(m);if(y&&Ae.protocols.indexOf(y)===-1){i(new B("Unsupported protocol "+y+":",B.ERR_BAD_REQUEST,e));return}f.send(r||null)})},Nn={http:ll,xhr:Hl};b.forEach(Nn,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});const Bl={getAdapter:e=>{e=b.isArray(e)?e:[e];const{length:t}=e;let n,i;for(let r=0;r<t&&(n=e[r],!(i=b.isString(n)?Nn[n.toLowerCase()]:n));r++);if(!i)throw i===!1?new B(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT"):new Error(b.hasOwnProp(Nn,n)?`Adapter '${n}' is not available in the build`:`Unknown adapter '${n}'`);if(!b.isFunction(i))throw new TypeError("adapter is not a function");return i},adapters:Nn};function Li(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new nn(null,e)}function Qr(e){return Li(e),e.headers=Re.from(e.headers),e.data=Si.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Bl.getAdapter(e.adapter||or.adapter)(e).then(function(i){return Li(e),i.data=Si.call(e,e.transformResponse,i),i.headers=Re.from(i.headers),i},function(i){return Ts(i)||(Li(e),i&&i.response&&(i.response.data=Si.call(e,e.transformResponse,i.response),i.response.headers=Re.from(i.response.headers))),Promise.reject(i)})}const es=e=>e instanceof Re?e.toJSON():e;function xt(e,t){t=t||{};const n={};function i(f,m,g){return b.isPlainObject(f)&&b.isPlainObject(m)?b.merge.call({caseless:g},f,m):b.isPlainObject(m)?b.merge({},m):b.isArray(m)?m.slice():m}function r(f,m,g){if(b.isUndefined(m)){if(!b.isUndefined(f))return i(void 0,f,g)}else return i(f,m,g)}function s(f,m){if(!b.isUndefined(m))return i(void 0,m)}function o(f,m){if(b.isUndefined(m)){if(!b.isUndefined(f))return i(void 0,f)}else return i(void 0,m)}function l(f,m,g){if(g in t)return i(f,m);if(g in e)return i(void 0,f)}const d={url:s,method:s,data:s,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:l,headers:(f,m)=>r(es(f),es(m),!0)};return b.forEach(Object.keys(Object.assign({},e,t)),function(m){const g=d[m]||r,y=g(e[m],t[m],m);b.isUndefined(y)&&g!==l||(n[m]=y)}),n}const Ds="1.4.0",ar={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{ar[e]=function(i){return typeof i===e||"a"+(t<1?"n ":" ")+e}});const ts={};ar.transitional=function(t,n,i){function r(s,o){return"[Axios v"+Ds+"] Transitional option '"+s+"'"+o+(i?". "+i:"")}return(s,o,l)=>{if(t===!1)throw new B(r(o," has been removed"+(n?" in "+n:"")),B.ERR_DEPRECATED);return n&&!ts[o]&&(ts[o]=!0,console.warn(r(o," has been deprecated since v"+n+" and will be removed in the near future"))),t?t(s,o,l):!0}};function zl(e,t,n){if(typeof e!="object")throw new B("options must be an object",B.ERR_BAD_OPTION_VALUE);const i=Object.keys(e);let r=i.length;for(;r-- >0;){const s=i[r],o=t[s];if(o){const l=e[s],d=l===void 0||o(l,s,e);if(d!==!0)throw new B("option "+s+" must be "+d,B.ERR_BAD_OPTION_VALUE);continue}if(n!==!0)throw new B("Unknown option "+s,B.ERR_BAD_OPTION)}}const ki={assertOptions:zl,validators:ar},Fe=ki.validators;class Rn{constructor(t){this.defaults=t,this.interceptors={request:new Jr,response:new Jr}}request(t,n){typeof t=="string"?(n=n||{},n.url=t):n=t||{},n=xt(this.defaults,n);const{transitional:i,paramsSerializer:r,headers:s}=n;i!==void 0&&ki.assertOptions(i,{silentJSONParsing:Fe.transitional(Fe.boolean),forcedJSONParsing:Fe.transitional(Fe.boolean),clarifyTimeoutError:Fe.transitional(Fe.boolean)},!1),r!=null&&(b.isFunction(r)?n.paramsSerializer={serialize:r}:ki.assertOptions(r,{encode:Fe.function,serialize:Fe.function},!0)),n.method=(n.method||this.defaults.method||"get").toLowerCase();let o;o=s&&b.merge(s.common,s[n.method]),o&&b.forEach(["delete","get","head","post","put","patch","common"],E=>{delete s[E]}),n.headers=Re.concat(o,s);const l=[];let d=!0;this.interceptors.request.forEach(function(O){typeof O.runWhen=="function"&&O.runWhen(n)===!1||(d=d&&O.synchronous,l.unshift(O.fulfilled,O.rejected))});const f=[];this.interceptors.response.forEach(function(O){f.push(O.fulfilled,O.rejected)});let m,g=0,y;if(!d){const E=[Qr.bind(this),void 0];for(E.unshift.apply(E,l),E.push.apply(E,f),y=E.length,m=Promise.resolve(n);g<y;)m=m.then(E[g++],E[g++]);return m}y=l.length;let _=n;for(g=0;g<y;){const E=l[g++],O=l[g++];try{_=E(_)}catch(C){O.call(this,C);break}}try{m=Qr.call(this,_)}catch(E){return Promise.reject(E)}for(g=0,y=f.length;g<y;)m=m.then(f[g++],f[g++]);return m}getUri(t){t=xt(this.defaults,t);const n=Ns(t.baseURL,t.url);return Ls(n,t.params,t.paramsSerializer)}}b.forEach(["delete","get","head","options"],function(t){Rn.prototype[t]=function(n,i){return this.request(xt(i||{},{method:t,url:n,data:(i||{}).data}))}});b.forEach(["post","put","patch"],function(t){function n(i){return function(s,o,l){return this.request(xt(l||{},{method:t,headers:i?{"Content-Type":"multipart/form-data"}:{},url:s,data:o}))}}Rn.prototype[t]=n(),Rn.prototype[t+"Form"]=n(!0)});const Dn=Rn;class lr{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let n;this.promise=new Promise(function(s){n=s});const i=this;this.promise.then(r=>{if(!i._listeners)return;let s=i._listeners.length;for(;s-- >0;)i._listeners[s](r);i._listeners=null}),this.promise.then=r=>{let s;const o=new Promise(l=>{i.subscribe(l),s=l}).then(r);return o.cancel=function(){i.unsubscribe(s)},o},t(function(s,o,l){i.reason||(i.reason=new nn(s,o,l),n(i.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const n=this._listeners.indexOf(t);n!==-1&&this._listeners.splice(n,1)}static source(){let t;return{token:new lr(function(r){t=r}),cancel:t}}}const Fl=lr;function jl(e){return function(n){return e.apply(null,n)}}function $l(e){return b.isObject(e)&&e.isAxiosError===!0}const Ri={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Ri).forEach(([e,t])=>{Ri[t]=e});const Vl=Ri;function Ms(e){const t=new Dn(e),n=ps(Dn.prototype.request,t);return b.extend(n,Dn.prototype,t,{allOwnKeys:!0}),b.extend(n,t,null,{allOwnKeys:!0}),n.create=function(r){return Ms(xt(e,r))},n}const Q=Ms(or);Q.Axios=Dn;Q.CanceledError=nn;Q.CancelToken=Fl;Q.isCancel=Ts;Q.VERSION=Ds;Q.toFormData=Un;Q.AxiosError=B;Q.Cancel=Q.CanceledError;Q.all=function(t){return Promise.all(t)};Q.spread=jl;Q.isAxiosError=$l;Q.mergeConfig=xt;Q.AxiosHeaders=Re;Q.formToJSON=e=>Os(b.isHTMLForm(e)?new FormData(e):e);Q.HttpStatusCode=Vl;Q.default=Q;const In=Q;class Oe{static extend(){const t={};let n=!1,i=0;const r=arguments.length;Object.prototype.toString.call(arguments[0])==="[object Boolean]"&&(n=arguments[0],i++);const s=function(o){for(const l in o)Object.prototype.hasOwnProperty.call(o,l)&&(n&&Object.prototype.toString.call(o[l])==="[object Object]"?t[l]=Oe.extend(!0,t[l],o[l]):t[l]=o[l])};for(;i<r;i++){const o=arguments[i];s(o)}return t}}var it=function(e,t){var n=this;this.isMWElement=!0,this.toggle=function(){this.css("display",this.css("display")==="none"?"block":"none")},this._active=function(){return this.nodes[this.nodes.length-1]},this.getDocument=function(){return this._active().ownerDocument},this.getWindow=function(){return this.getDocument().defaultView},this.get=function(r,s){this.nodes=(s||document).querySelectorAll(r)},this.each=function(r){if(this.nodes)for(var s=0;s<this.nodes.length;s++)r.call(this.nodes[s],s);else this.node&&r.call(this.node,0);return this},this.encapsulate=function(){};var i=function(r,s){r&&(Array.isArray(r)?r.forEach(function(o){i(o,s)}):r instanceof it?s.append(r):typeof r=="object"&&s.append(new it(r)))};this.create=function(){var r=this.document.createElement(this.settings.tag);if(this.node=r,this.settings.encapsulate===!0){var s=this.settings.encapsulate===!0?"open":this.settings.encapsulate;r.attachShadow({mode:s})}this.nodes=[r],this.settings.content&&i(this.settings.content,this)},this._specialProps=function(r,s){if(r==="tooltip")return this.node.dataset[r]=s,!0},this.setProps=function(){for(var r in this.settings.props)if(r==="dataset")for(var s in this.settings.props[r])this.node.dataset[s]=this.settings.props[r][s];else if(r==="style")for(var o in this.settings.props[r])this.node.style[o]=this.settings.props[r][o];else{var l=this.settings.props[r];this._specialProps(r,l)||(this.node[r]=l)}},this.__={cssNumber:["animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","widows","zIndex","zoom"]},this._normalizeCSSValue=function(r,s){return typeof s=="number"&&this.__.cssNumber.indexOf(r)===-1&&(s=s+"px"),s},this.css=function(r,s){if(typeof r=="string")if(typeof s<"u"){var o=this._normalizeCSSValue(r,s);this.each(function(){this.style[r]=o})}else return this.document.defaultView.getComputedStyle(this.node)[r];if(typeof r=="object")for(var l in r)this.each(function(){this.style[l]=n._normalizeCSSValue(l,r[l])});return this},this.dataset=function(r,s){return typeof s>"u"?this._active()[r]:(this.each(function(){this.dataset[r]=s}),this)},this.attr=function(r,s){return typeof s>"u"?this._active()[r]:(this.each(function(){this.setAttribute(r,s)}),this)},this.val=function(r){return typeof r>"u"?this._active().value:(this.each(function(){this.value=r}),this)},this.prop=function(r,s){var o=this._active();return typeof s>"u"?o[r]:(o[r]!==s&&(o[r]=s,this.trigger("propChange",[r,s])),this)},this.hide=function(){return this.each(function(){this.style.display="none"})},this.show=function(){return this.each(function(){this.style.display=""})},this.find=function(r){var s=mw.element("#r"+new Date().getTime());return this.each(function(){for(var o=this.querySelectorAll(r),l=0;l<o.length;l++)s.nodes.indexOf(o[l])===-1&&s.nodes.push(o[l])}),s},this.addClass=function(r){return r=r.trim().split(" "),this.each(function(){var s=this;r.forEach(function(o){s.classList.add(o)})})},this.toggleClass=function(r){return this.each(function(){this.classList.toggle(r.trim())})},this.removeClass=function(r){var s=Array.isArray(r);if(s)return this.each(function(){for(var l=0,d=r.length;l<d;l++)this.classList.remove(r[l])});r=r.trim();var o=r.split(" ");return o.length>1?this.removeClass(o):this.each(function(){this.classList.remove(r)})},this.remove=function(){return this.each(function(){this.remove()})},this.empty=function(){return this.html("")},this.html=function(r){return typeof r>"u"?this._active().innerHTML:this.each(function(){this.innerHTML=r})},this.text=function(r,s){if(typeof r>"u")return this.node.textContent;typeof s>"u"&&(s=!0),s&&(r=this.document.createRange().createContextualFragment(r).textContent),this.node.innerHTML=r},this._asdom=function(r){return typeof r=="string"?this.document.createRange().createContextualFragment(r):r.node?r.node:r.nodes?r.nodes[r.nodes.length-1]:r},this.offset=function(){var r=this._active(),s=this.getWindow(),o=r.getBoundingClientRect();return o.offsetTop=o.top+s.pageYOffset,o.offsetBottom=o.bottom+s.pageYOffset,o.offsetLeft=o.left+s.pageXOffset,o},this.width=function(r){return r?this.css("width",r):this._active().offsetWidth},this.height=function(r){return r?this.css("height",r):this._active().offsetHeight},this.parent=function(){return mw.element(this._active().parentNode)},this.parents=function(r){r=r||"*";var s=this._active(),o=s.parentElement,l=mw.element();for(l.nodes=[];o;)o.matches(r)&&l.nodes.push(o),o=o.parentElement;return l},this.append=function(r){return r&&this.each(function(){this.append(n._asdom(r))}),this},this.before=function(r){return r&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(n._asdom(r),this)}),this},this.after=function(r){r&&this.each(function(){this.parentNode&&this.parentNode.insertBefore(n._asdom(r),this.nextSibling)})},this.prepend=function(r){return r&&this.each(function(){this.prepend(n._asdom(r))}),this},this._disabled=!1,Object.defineProperty(this,"disabled",{get:function(){return this._disabled},set:function(r){this._disabled=r,this.node.disabled=this._disabled,this.node.dataset.disabled=this._disabled}}),this.trigger=function(r,s){return s=s||{},this.each(function(){this.dispatchEvent(new CustomEvent(r,{detail:s,cancelable:!0,bubbles:!0})),n._on[r]&&n._on[r].forEach(function(o){o.call(this,r,s)})}),this},this.get=function(r){return this.nodes[r]},this.wrap=function(r){var s=cr(r);this.before(s),s.append(this)},this._on={},this.on=function(r,s){return r=r.trim().split(" "),r.forEach(function(o){n._on[o]||(n._on[o]=[]),n._on[o].push(s),n.each(function(){this.addEventListener(o,s,!1)})}),this},this.init=function(){if(this.nodes=[],this.root=t||document,this.root instanceof it&&(this.root=this.root.get(0)),this._asElement=!1,this.document=this.root.body?this.root:this.root.ownerDocument,e=e||{},e.nodeName&&e.nodeType)this.nodes.push(e),this.node=e,e={},this._asElement=!0;else if(typeof e=="string")if(e.indexOf("<")===-1)this.nodes=Array.prototype.slice.call(this.root.querySelectorAll(e)),e={},this._asElement=!0;else if(this.settings&&this.settings.content instanceof it)this.append(this.settings.content);else if(this.settings&&typeof this.settings.content=="object")this.append(new it(this.settings.content));else{var r=this._asdom(e);this.nodes=[].slice.call(r.children),this._asElement=!0}e=e||{};var s={tag:"div",props:{}};this.settings=Oe.extend({},s,e),!this._asElement&&(this.create(),this.setProps())},this.init()};const cr=function(e,t){return new it(e,t)};cr.module=function(e,t){it.prototype[e]=t};const Ii="mw-le-element";window.customElements&&!customElements.get(Ii)&&customElements.define(Ii,class extends HTMLElement{constructor(){super()}});const I=(e,t)=>(e instanceof Object&&!e.nodeType&&(e=Oe.extend({},e||{},{tag:e.tag||Ii})),cr(e,t));let Wt;const En=document.documentElement;En.matches?Wt="matches":En.matchesSelector?Wt="matchesSelector":En.mozMatchesSelector?Wt="mozMatchesSelector":En.webkitMatchesSelector&&(Wt="webkitMatchesSelector");class fe{static fragment(){return this._fragment||(this._fragment=document.createElement("div"),this._fragment.style.visibility="hidden",this._fragment.style.position="absolute",this._fragment.style.width="1px",this._fragment.style.height="1px",document.body.appendChild(this._fragment)),this._fragment}static matches(t,n){return t[Wt](n)}static isBlockLevel(t){if(!t||t.nodeType===3)return!1;var n=t.nodeName;if(typeof this._isBlockCache[n]<"u")return this._isBlockCache[n];var i=document.createElement(n);return this.fragment().appendChild(i),this._isBlockCache[n]=getComputedStyle(i).display==="block",this.fragment().removeChild(i),this._isBlockCache[n]}static firstBlockLevel(t){for(;t&&t.classList;){if(this.isBlockLevel(t))return t;t=t.parentNode}}static firstWithBackgroundImage(t){if(!t)return null;for(;t&&t.nodeName!=="BODY";){if(t.style.backgroundImage)return t;t=t.parentElement}return null}static hasAnyOfClassesOnNodeOrParent(t,n){for(;t&&t.nodeName!=="BODY";){let i=0,r=n.length;for(;i<r;i++)if(t.classList.contains(n[i]))return!0;t=t.parentElement}return!1}static hasParentsWithClass(t,n){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.classList.contains(n))return!0;i=i.parentNode}return!1}}static hasParentWithId(t,n){if(t){for(var i=t.parentNode;i&&i.nodeName!=="BODY";){if(i.id===n)return!0;i=i.parentNode}return!1}}static firstWithAyOfClassesOnNodeOrParent(t,n){for(;t&&t.nodeName!=="BODY";){let i=0,r=n.length;for(;i<r;i++)if(t.classList.contains(n[i]))return t;t=t.parentElement}return null}static firstParentOrCurrentWithTag(t,n){if(!(!t||!n)){n=typeof n!="string"?n:[n];for(var i=t;i&&i.nodeName!=="BODY";){if(n.indexOf(i.nodeName.toLowerCase())!==-1)return i;i=i.parentNode}return!1}}static index(t,n,i){i=i||t.tagName.toLowerCase(),n=n||t.parentNode;var r;n.constructor===[].constructor?r=n:r=n.querySelectorAll(i);for(var s=0,o=r.length;s<o;s++)if(t===r[s])return s}static firstParentOrCurrentWithClass(t,n){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.classList.contains(n))return i;i=i.parentNode}return!1}static firstParentOrCurrent(t,n){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(i.matches(n))return i;i=i.parentNode}return!1}static firstParentOrCurrentWithAnyOfClasses(t,n){if(!t)return!1;for(var i=t;i&&i.nodeName!=="BODY";){if(!i)return!1;if(this.hasAnyOfClasses(i,n))return i;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirst(t,n){let i=t;for(;i&&i.nodeName!=="BODY";){const r=i.classList.contains(n[0]),s=i.classList.contains(n[1]);if(r&&s)return!1;if(r)return!0;if(s)return!1;i=i.parentNode}return!1}static parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,n){let i=t;for(;i&&i.nodeName!=="BODY";){const r=i.classList.contains(n[0]),s=i.classList.contains(n[1]);if(r&&s)return!1;if(r)return!0;if(s)return!1;i=i.parentNode}return!0}static hasAnyOfClasses(t,n){if(!t)return;let i=0,r=n.length;for(;i<r;i++)if(t.classList.contains(n[i]))return!0;return!1}static offset(t){if(t){var n=t.getBoundingClientRect(),i={top:n.top,left:n.left,width:n.width,height:n.height,bottom:n.bottom,right:n.right};return i.top+=t.ownerDocument.defaultView.scrollY,i.bottom+=t.ownerDocument.defaultView.scrollY,i.left+=t.ownerDocument.defaultView.scrollX,i.right+=t.ownerDocument.defaultView.scrollX,i}}static parentsOrder(t,n){for(var i=[],r={},s=n.length,o=0,l=-1;o<s;o++)r[n[o]]=-1;if(!t)return r;for(var d=t.parentNode;d&&d.nodeName!=="BODY";){for(l++,o=0;o<s;o++)d.classList.contains(n[o])&&i.indexOf(n[o])===-1&&(r[n[o]]=l,i.push(n[o]));d=d.parentNode}return r}}me(fe,"_isBlockCache",{}),me(fe,"_fragment");class Wl{constructor(t){this.settings=t,this.tools=fe}isRow(t){return t.classList.contains(this.settings.rowClass)}isModule(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type!=="layouts"}isLayout(t){return t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts"}isInLayout(t){if(!t)return!1;for(t=t.parentNode;t&&t!==this.settings.document.body;){if(t.classList.contains(this.settings.moduleClass)&&t.dataset.type==="layouts")return!0;t=t.parentNode}}isElement(t){return t.classList.contains(this.settings.elementClass)}isEmptyElement(t){return t.classList.contains(this.settings.emptyElementClass)}isEdit(t){return t.classList.contains(this.settings.editClass)}isInEdit(t){var n=[this.settings.editClass,this.settings.moduleClass];return this.tools.parentsOrCurrentOrderMatchOrOnlyFirst(t.parentNode,n)}isEditOrInEdit(t){return this.isEdit(t)||this.isInEdit(t)}isPlainText(t){return t.classList.contains(this.settings.plainElementClass)}getType(t){if(this.isEdit(t))return"edit";if(this.isElement(t))return"element";if(this.isModule(t))return"module";if(this.isLayout(t))return"layout"}}class ks extends Wl{constructor(t){super(t),this.settings=t,this._tagsCanAccept=["DIV","ARTICLE","ASIDE","FOOTER","HEADER","MAIN","SECTION","DD","LI","TD","FORM","DD"],this.init()}isConfigurable(t){return this.isElement(t)||this.isModule(t)||this.isRow(t)}isEditableLayout(t){return this.this.isLayout(t)&&this.isInEdit(t)}canMoveModule(t){return this.isModule(t)&&this.isInEdit(t)}canAcceptByClass(t){return this.tools.hasAnyOfClasses(t,this.dropableElements())}canAcceptByTag(t){return!t||t.nodeType!==1?!1:this._tagsCanAccept.indexOf(t.nodeName)!==-1}allowDrop(t){return this.tools.parentsOrCurrentOrderMatchOrOnlyFirstOrNone(t,[this.settings.allowDrop,this.settings.nodrop])}canInsertBeforeOrAfter(t){return this.canAccept(t.parentNode)}canAccept(t){return!!(this.canAcceptByClass(t)&&this.isEditOrInEdit(t)&&this.allowDrop(t))}canReceiveElements(t){return this.isEdit(t)&&this.canAcceptByTag(t)}dropableElements(){return this._dropableElements}getIteractionTarget(t){return this.tools.firstWithAyOfClassesOnNodeOrParent(t,[this.settings.elementClass,this.settings.editClass,this.settings.moduleClass])}getTarget(t,n){const i=this.getIteractionTarget(t);if(!i||!this.isEditOrInEdit(t)||!this.allowDrop(t))return null;const r={target:i,canInsert:!1,beforeAfter:!1};var s=this.settings.strictLayouts&&this.isLayout(n),o=this.settings.strict&&!this.isLayout(n)&&!this.isInLayout(i);if(o)return null;if(this.isEdit(i))r.canInsert=!s;else if(this.isElement(i)&&!s)this.canAcceptByTag(i)&&(r.canInsert=!s),r.beforeAfter=!0;else if(this.isModule(i)&&!s)if(this.canInsertBeforeOrAfter(i))r.beforeAfter=!0;else return null;else if(this.isLayout(i))if(this.canInsertBeforeOrAfter(i))r.beforeAfter=!0;else return null;return r}init(){this._dropableElements=[this.settings.elementClass,this.settings.cloneableClass,this.settings.editClass,this.settings.moduleClass,this.settings.colClass,this.settings.allowDrop]}}let Ul=-1;const Yl=(e,t)=>{if(!e||!t)return!1;const n=t.target;if(!n||n.nodeType!==1)return!1;e.pageX;const i=e.pageY,r=fe.offset(n),s={},o=15;if(Ul===i||!t||!t.canInsert&&!t.beforeAfter)return!1;if(t.canInsert&&t.beforeAfter)if(i>=r.top-o&&i<=r.top+o)s.position="top",s.action="before";else if(i>=r.top+o&&i<=r.top+r.height/2)s.position="top",s.action="prepend";else if(i>=r.top+r.height/2&&i<=r.bottom-o)s.position="bottom",s.action="append";else if(i>=r.top+r.height/2&&i>=r.bottom-o)s.position="bottom",s.action="after";else return!1;else if(t.beforeAfter)if(i>=r.top-o&&i<=r.top+r.height/2)s.position="top",s.action="before";else if(i>=r.top+r.height/2&&i<=r.bottom+o)s.position="bottom",s.action="after";else return!1;else if(t.canInsert)if(i>=r.top-o&&i<=r.top+r.height/2)s.position="top",s.action="prepend";else if(i>=r.top+r.height/2&&i<=r.bottom+o)s.position="bottom",s.action="append";else return!1;return s},ql=function(e,t){var n={handle:null,element:null,document,helper:!0},i=this,r={};this.on=function(o,l){r[o]?r[o].push(l):r[o]=[l]},this.dispatch=function(o,l){r[o]&&r[o].forEach(function(d){d.call(this,l)})};var s=function(o){i.settings.document.body.style.scrollBehavior="smooth",i.settings.document.defaultView.scrollTo(0,i.settings.document.defaultView.scrollY+o),i.settings.document.body.style.scrollBehavior=""};this.config=function(){this.settings=Oe.extend({},n,e),this.settings.target||(this.settings.target=this.settings.document.body),this.setElement(this.settings.element),this.dropIndicator=this.settings.dropIndicator},this.setElement=function(o){this.element=I(o).get(0),this.settings.handle||(this.settings.handle=this.settings.element),this.handle=this.settings.handle,this.handle.attr("draggable","true")},this.setTargets=function(o){this.targets=I(o)},this.addTarget=function(o){this.targets.push(o)},this.init=function(){this.config(),this.draggable()},this.$data={},this.helper=function(o,l){if(this._helper||(this._helper=I().get(0),this._helper.className="mw-draggable-helper",this.settings.document.body.appendChild(this._helper)),o==="create"){var d=I(i.element).offset();this.$data._calcMinus={y:l.pageY-d.offsetTop,x:l.pageX-d.offsetLeft},this._helper.style.top=o.pageY+"px",this._helper.style.left=o.pageX+"px",this._helper.style.width=i.element.offsetWidth+"px",this._helper.style.height=i.element.offsetHeight+"px",this.settings.document.documentElement.classList.add("le-dragging"),this._helper.style.display="block"}else o==="remove"&&this._helper?(this._helper.style.display="none",this.settings.document.documentElement.classList.remove("le-dragging")):this.settings.helper&&o&&(this._helper.style.top=o.pageY-this.$data._calcMinus.y+"px",this._helper.style.left=o.pageX-this.$data._calcMinus.x+"px",this.settings.document.documentElement.classList.add("le-dragging"));return this._helper.innerHTML=i.element.outerHTML,this._helper},this.isDragging=!1,this.dropableService=new ks(t),this.dropPosition=Yl,this.draggable=function(){I(this.settings.target).on("dragleave",function(o){i.dropIndicator&&i.dropIndicator.hide()}),I(this.settings.target).on("dragover",function(o){if(i.target=null,i.action=null,o.target!==i.element||!i.element.contains(o.target)){var l=i.dropableService.getTarget(o.target,i.element);if(l&&l!==i.element){const d=i.dropPosition(o,l);d?(i.target=l.target,i.action=d.action,i.dropIndicator&&i.dropIndicator.position(i.target,d.action+"-"+d.position)):i.dropIndicator&&i.dropIndicator.hide()}else i.dropIndicator&&i.dropIndicator.hide();i.isDragging&&(i.dispatch("dragOver",{element:i.element,event:o}),o.preventDefault())}}).on("drop",function(o){i.isDragging&&(o.preventDefault(),i.target&&i.action&&I(i.target)[i.action](i.element),i.dropIndicator&&i.dropIndicator.hide(),i.dispatch("drop",{element:i.element,event:o})),i.dropIndicator&&i.dropIndicator.hide()}),this.handle.on("dragstart",function(o){i.isDragging=!0,i.element.id||(i.element.id="mw-element-"+new Date().getTime()),i.element.classList.add("mw-element-is-dragged"),o.dataTransfer.setData("text",i.element.id),o.dataTransfer.effectAllowed="move",i.helper("create",o),i.dispatch("dragStart",{element:i.element,event:o})}).on("drag",function(o){var l=90,d=5;o.clientY<l&&s(-d),o.clientY>innerHeight-(l+(this._helper?this._helper.offsetHeight+10:0))&&s(d),o.dataTransfer.dropEffect="copy",i.dispatch("drag",{element:i.element,event:o}),i.helper(o)}).on("dragend",function(o){i.isDragging=!1,i.element.classList.remove("mw-element-is-dragged"),i.helper("remove"),i.dispatch("dragEnd",{element:i.element,event:o})})},this.init()};var $e,yt,_t;class Rs{constructor(t={}){me(this,"x",0);me(this,"y",0);me(this,"w",0);me(this,"h",0);me(this,"listeners",{});ae(this,$e,{});me(this,"activeHandle",null);me(this,"handles",{});ae(this,yt,!1);ae(this,_t,!0);const n={element:null,document,maxHeight:null,maxWidth:null};this.settings=Object.assign({},n,t),this.element=this.settings.element,this.document=this.settings.document,this.element.classList.add("mw-le-resizable")}on(t,n){R(this,$e)[t]?R(this,$e)[t].push(n):R(this,$e)[t]=[n]}dispatch(t,n){R(this,$e)[t]&&R(this,$e)[t].forEach(i=>{i.call(this,n)})}mouseMoveHandler(t){const n=t.clientX-this.x,i=t.clientY-this.y;let r=this.h+i,s;this.activeHandle===this.handles.left?s=this.w-n:s=this.w+n,this.settings.maxWidth&&(s=Math.min(s,this.settings.maxWidth)),this.settings.maxHeight&&(r=Math.min(r,this.settings.maxHeight)),this.element.style.width=`${s}px`,this.element.style.height=`${r}px`,t.preventDefault(),this.dispatch("resize",{height:this.element.offsetHeight,width:this.element.offsetWidth})}mouseUpHandler(){for(const t in this.listeners)this.document.removeEventListener(t,this.listeners[t]);this.listeners={},this.activeHandle=null,this.dispatch("resizeStop")}mouseDownHandler(t){this.x=t.clientX,this.y=t.clientY;const n=this.document.defaultView.getComputedStyle(this.element);this.w=parseInt(n.width,10),this.h=parseInt(n.height,10),this.listeners.mousemove=i=>this.mouseMoveHandler(i),this.listeners.mouseup=i=>this.mouseUpHandler(i);for(const i in this.listeners)this.document.addEventListener(i,this.listeners[i]);this.dispatch("resizeStart")}disable(){wt(this,yt,!0),wt(this,_t,!1),this.element.classList.add("mw-le-resizable-disabled")}enable(){wt(this,yt,!1),wt(this,_t,!0),this.element.classList.remove("mw-le-resizable-disabled")}disabled(){return R(this,yt)}enabled(){return R(this,_t)}build(){const t=this.document.createElement("span"),n=this.document.createElement("span"),i=this.document.createElement("span"),r=this.document.createElement("span");this.handles.top=t,this.handles.right=n,this.handles.bottom=i,this.handles.left=r,t.className="mw-le-resizer mw-le-resizer-t",n.className="mw-le-resizer mw-le-resizer-r",r.className="mw-le-resizer mw-le-resizer-l",i.className="mw-le-resizer mw-le-resizer-b",this.element.appendChild(t),this.element.appendChild(n),this.element.appendChild(i),this.element.appendChild(r)}mount(){if(!this.element)return this;if(this.element.dataset.resizable)return this;this.element.dataset.resizable=!0,this.build();const t=this.element.querySelectorAll(".mw-le-resizer");return Array.from(t).forEach(n=>{n.addEventListener("mousedown",i=>{this.mouseDownHandler(i),this.activeHandle=n})}),this.dispatch("ready",{height:this.element.offsetHeight,width:this.element.offsetWidth}),this}}$e=new WeakMap,yt=new WeakMap,_t=new WeakMap;globalThis.Resizable=Rs;const Cn=function(e){var t={},n=this;this.settings=Oe.extend({},t,e);const i={};this.on=(g,y)=>{i[g]?i[g].push(y):i[g]=[y]},this.dispatch=(g,y)=>{i[g]&&i[g].forEach(_=>{_.call(this,y)})};var r=!0,s=null;this.getTarget=function(){return s},this.isVisible=function(){return r},this.show=function(){r=!0,this.wrapper.removeClass("mw-handle-item-hidden")},this.hide=function(){r=!1,this.wrapper.addClass("mw-handle-item-hidden"),this.wrapper.removeClass("mw-handle-active")};let o=null;this.setContent=function(g){o&&o.remove(),o=g,this.wrapper.append(o)},this.initDraggable=function(){this.draggable=new ql({handle:this.handle,element:null,helper:!0,dropIndicator:this.settings.dropIndicator,document:this.settings.document,target:this.settings.root,stateManager:this.settings.stateManager,type:this.settings.type},e),this.draggable.on("dragStart",function(){n.wrapper.addClass("mw-handle-item-dragging")}),this.draggable.on("dragEnd",function(){n.wrapper.removeClass("mw-handle-item-dragging")})};const l=()=>{if(this.settings.document.defaultView.pageYOffset!==void 0)return{x:this.settings.document.defaultView.pageXOffset,y:this.settings.document.defaultView.pageYOffset};{let g,y,_=this.settings.document,E=_.documentElement,O=_.body;return g=E.scrollLeft||O.scrollLeft||0,y=E.scrollTop||O.scrollTop||0,{x:g,y}}};this.position=function(g){if(!g)return;const y=fe.offset(g),_=l(),E=this.wrapper.get(0).querySelector(".mw-le-handle-menu-buttons");let O;_.y>y.top-70&&(O=_.y-(y.top-70),O>y.height&&(O=y.height+10)),E.style.transition="none",E.style.transform=O?`translateY(${O}px)`:"",setTimeout(()=>E.style.transition="",10),this.wrapper.css({top:y.top,left:y.left,width:y.width,height:y.height})},this.set=function(g,y){if(!g){s=null;return}this.position(g),this.show(),this.draggable.setElement(g),(s!==g||y)&&(s=g,this.dispatch("targetChange",g)),setTimeout(()=>this.wrapper.addClass("mw-handle-active"),1)},this.createHandle=function(){if(this.settings.handle==="self"){var g=I({tag:"div",props:{className:"mw-handle-item-draggable-self"}});this.wrapper.append(g),this.settings.document.addEventListener("mousedown",function(){g.addClass("active")}),this.settings.document.addEventListener("mouseup",function(){g.removeClass("active")}),this.settings.handle=g,this.handle=g,this.wrapper.append(g);return}this.settings.handle?(typeof this.settings.handle=="string"&&(this.settings.handle=I(this.handle)),this.handle=this.settings.handle):(this.handle=I({tag:"div",props:{className:"mw-handle-item-handle",contentEditable:!1,draggable:!0}}),this.wrapper.append(this.handle))};var d=this.settings.document.defaultView.innerWidth,f=this.settings.document.defaultView.innerHeight;this.resizableMaxWidth=function(g){if(typeof g>"u")return d;d=g},this.resizableMaxHeight=function(g){if(typeof g>"u")return f;f=g},this.findClosestElementByClass=function(g,y=200){let _=[],E=g,O=0;for(;E!==document;){const C=E.parentNode.querySelectorAll(".element,.module");if(C.length>0&&(_=[...C].filter(A=>Math.abs(g.getBoundingClientRect().top-A.getBoundingClientRect().top)<=y),_.length>0)||(E=E.parentNode,O++,O>y/10))break}return _};function m(g,y,_,E){var O=Math.min(_/g,E/y);return{width:g*O,height:y*O}}this.resizable=function(){this.settings.resizable&&(this.resizer=new Rs({element:this.wrapper.get(0),document:this.settings.document}),this.resizer.mount(),this.resizer.on("resize",g=>{const y=this.getTarget();y.nodeName==="IMG"?(g=m(y.offsetWidth,y.offsetHeight,g.width,g.height),y.style.height=g.height+"px",y.style.width=g.width+"px"):(y.style.minHeight=g.height+"px",y.style.width=g.width+"px"),this.set(y)}))},this.createWrapper=function(){this.wrapper=I({tag:"div",props:{className:"mw-handle-item "+(this.settings.className||"mw-handle-type-default"),id:this.settings.id||"mw-handle-"+new Date().getTime(),contentEditable:!1}}),this.wrapper.on("mousedown",function(){this.classList.remove("mw-handle-item-mouse-down")}),I(document.body).on("mouseup touchend",function(){n.wrapper.removeClass("mw-handle-item-mouse-down")}),this.settings.document.body.appendChild(this.wrapper.get(0))},this.createWrapper(),this.createHandle(),this.initDraggable(),this.settings.content&&this.setContent(this.settings.content),this.hide(),this.resizable(),this.settings.document.addEventListener("orientationChange",g=>this.position(this.getTarget())),this.settings.document.addEventListener("resize",g=>this.position(this.getTarget())),this.settings.document.addEventListener("scroll",g=>this.position(this.getTarget()))},Xl=function(e){e=e||{},this.tools=fe;var t=this,n={exceptions:["mw-handle-item"]};this.settings=Oe.extend({},n,e),this.settings.root.nodeType===9?this.document=this.settings.root:this.document=this.settings.root.ownerDocument,this.body=this.document.body;var i=20,r=function(l){return l%5>=2.5?l/5*5+5:l/5*5},s=function(l,d){l=r(l),d=r(d);for(var f=[],m=l-i,g=l+i,y=d-i,_=d+i;m<g;m+=5)for(;y<=_;y+=5)f.push([m,y]);return f},o=function(l,d){l&&l.parentElement&&d.indexOf(l)===-1&&t.body!==l&&d.push(l)};this.fromEvent=function(l){let d,f;return l.pageX?(d=l.pageX,f=l.pageY):l.targetTouches&&l.targetTouches[0]?(d=l.targetTouches[0].pageX,f=l.targetTouches[0].pageY):l.touches&&l.touches[0]&&(d=l.touches[0].pageX,f=l.touches[0].pageY),t.tools.hasAnyOfClassesOnNodeOrParent(l.target,this.settings.exceptions)?[]:(t.document._test||(t.document._test=document.createElement("div"),t.document._test.style.position="absolute",t.document._test.style.left="10px",t.document._test.style.background="red",t.document._test.style.width="10px",t.document._test.style.height="10px",t.document.body.appendChild(t.document._test)),t.document._test.style.top=l.pageY+"px",this.fromPoint(d,f))},this.fromPoint=function(l,d){var f=[];t.document.defaultView.frameElement&&(d-=t.document.defaultView.scrollY);var m=t.document.elementFromPoint(l,d);if(!m)return[];o(m,f);var g=s(l,d);return g.forEach(function(y){o(t.document.elementFromPoint(y[0],y[1]),f)}),f}},Kl=function(e){return fe.matches(e,'.row,[class*="row-"]')},Jl=function(e){return fe.matches(e,'.col,[class*="col-"]')};let je;const ns=function(){return je||(je=document.createElement("div"),je.style.visibility="hidden",je.style.position="absolute",je.style.width="1px",je.style.height="1px",document.body.appendChild(je)),je},Sn={},Gl=function(e){if(!e||e.nodeType===3)return!1;var t=e.nodeName;if(typeof Sn[t]<"u")return Sn[t];var n=document.createElement(t);return ns().appendChild(n),Sn[t]=getComputedStyle(n).display==="block",ns().removeChild(n),Sn[t]},Zl=(e,t,n)=>{e=e||"*";for(var i=t.querySelectorAll(e),r=0,s=[];r<i.length;r++)!Jl(i[r])&&!Kl(i[r])&&!n.elementAnalyzer.isEdit(i[r])&&Gl(i[r])&&s.push(i[r]);return s},Ql=e=>{const{backgroundImageHolder:t,editClass:n,moduleClass:i,elementClass:r,allowDrop:s}=e.settings,o=e.root;for(var l=o.querySelectorAll("."+n+"."+t+", ."+n+" ."+t+", ."+n+'[style*="background-image"], .'+n+' [style*="background-image"]'),d=o.querySelectorAll("."+i+e.settings.unEditableModules.join(",."+i)),f=o.querySelectorAll("."+n),m=0,g=0,y=0;m<l.length;m++){var _=l[m];e.elementAnalyzer.isInEdit(_)&&(mw.tools.hasClass(_,i)||mw.tools.addClass(_,n),_.style.backgroundImage||(_.style.backgroundImage="none"))}for(;g<d.length;g++)d[m].classList.remove(i);for(;y<f.length;y++){for(var E=Zl(":not(."+r+")",f[y],e),O=0,C=f[y].querySelectorAll("img,."+s),A=0;A<C.length;A++)C[A].classList.add(r);for(;O<E.length;O++)E[O].classList.contains(i)||e.elementAnalyzer.isInEdit(E[O])&&E[O].classList.add(r)}},ec=function(e){this.handles=e,this.dragging=!1;var t=this;this.get=function(n){return this.handles[n]},this.set=function(n,i){this.get(n).set(i)},this.hide=function(n){n&&this.handles[n]?this.handles[n].hide():this.each(function(i,r){r.hide()})},this.hideAllBut=function(n){this.each(function(i,r){i!==n&&r.hide()})},this.show=function(n){n&&this.handles[n]?this.handles[n].show():this.each(function(i,r){r.show()})},this.each=function(n){if(n){var i;for(i in this.handles)n.call(t,i,this.handles[i])}},this.targetIsSelected=function(n,i){if(n){n=n.target||n;var r;for(r in this.handles){if(i&&i===this.handles[r])continue;const s=this.handles[r].getTarget();if(s&&s===n)return!0}return!1}},this.targetIsOrInsideHandle=function(n){if(n){n=n.target||n;var i;for(i in this.handles)if(this.handles[i].wrapper.get(0)===n||this.handles[i].wrapper.get(0).contains(n))return!0;return!1}},this.init=function(){this.each(function(n,i){i.draggable.on("dragStart",function(){t.dragging=!0,t.hideAllBut(n)}),i.draggable.on("dragEnd",function(){t.dragging=!1,i.show()})})},this.init()},tc=function(e){e=e||{};const t={template:"default"};let n={};this.settings=Oe.extend({},t,e),this._indicator=null;const i={};this.on=function(d,f){i[d]?i[d].push(f):i[d]=[f]},this.dispatch=function(d,f){i[d]&&i[d].forEach(function(m){m.call(this,f)})},this.visible=!1,this.hide=function(){this.visible&&(this._indicator.addClass("mw-drop-indicator-hidden"),this.visible=!1,n={})},this.show=function(){console.log(this.visible),this.visible||this._indicator.removeClass("mw-drop-indicator-hidden"),this.visible=!0};const r=["before-top","prepend-top","after-bottom","append-bottom"],s="mw-drop-indicator-position-",o=r.map(function(d){return s+d});let l=null;this.position=function(d,f){if(!(!d||!f)&&!(n.target===d&&n.position===f)){n.target=d,n.position=f,l!==f&&(this._indicator.removeClass(o),l=f,this._indicator.addClass(s+f));var m=fe.offset(d);this._indicator.css({height:m.height,left:m.left,top:m.top,width:m.width}),this.show()}},this.make=function(){this._indicator=I(),this._indicator.html('<div class="mw-drop-indicator-block"><div class="mw-drop-indicator-pin"></div></div>'),this._indicator.addClass("mw-drop-indicator mw-drop-indicator-template-"+this.settings.template),this.hide(),this.settings.document.body.appendChild(this._indicator.get(0))},this.init=function(){this.make()},this.init()},nc=(e,t,n)=>{!e||!t||(e=e.isMWElement?e.get(0):e,e.dataset.tooltip=t,e.title=t,e.dataset.tooltipposition=n||"top-center")},Et=function(e){this.options=e||{};var t=this;this._visible=!0,this.isVisible=function(){return this._visible},this.show=function(){this._visible=!0,this.root.addClass("mw-le-handle-menu-visible")},this.hide=function(){this._visible=!1,this.root.removeClass("mw-le-handle-menu-visible")},this.create=function(){this.root=I({props:{className:"mw-le-handle-menu",id:t.options.id||"mw-le-handle-menu-"+new Date().getTime()}}),this.buttonsHolder=I({props:{className:"mw-le-handle-menu-buttons"}}),this.root.append(this.buttonsHolder)};var n,i,r,s=function(){n=I({props:{className:"mw-le-handle-menu-title"}}),i=I({props:{className:"mw-le-handle-menu-title-text"}}),r=I({props:{className:"mw-le-handle-menu-title-icon"}}),n.append(i),n.append(r),t.root.prepend(n),t.title=n},o=null;this.getTarget=function(){return o},this.setTarget=function(l){o=l;for(var d=0;d<this.buttons.length;d++)this.buttons[d].config.onTarget&&this.buttons[d].config.onTarget(l,this.buttons[d].button.get(0),t.options.rootScope)},this.setTitle=function(l,d){i.html(l||""),r.html(d||"")},this.buttons=[],this.buildButtons=function(l,d){d=d||this.buttonsHolder,l=l||this.options.buttons,l.forEach(function(f){d.append(t.button(f))})},this.button=function(l){var d=I({props:{className:"mw-le-handle-menu-button"+(l.className?" "+l.className:"")}}),f={props:{className:"mw-le-handle-menu-button-content"}},m=I(f);if(l.title&&nc(m,l.title),l.icon){var g=I({props:{className:"mw-le-handle-menu-button-icon",innerHTML:l.icon}});m.append(g)}if(l.text){var y=I({props:{className:"mw-le-handle-menu-button-text",innerHTML:l.text}});m.append(y)}if(d.append(m),this.buttons.push({button:d,config:l}),l.menu){var _=I({props:{className:"mw-le-handle-menu-button-sub-menu"}});d.append(_),t.buildButtons(l.menu,_),d.on("click",function(){this.classList.toggle("sub-menu-active")})}else typeof l.action=="function"&&d.on("click",function(){l.action(t.getTarget(),d.get(0))});return d},this.init=function(){this.create(),s(),this.setTitle(t.options.title,t.options.icon),this.buildButtons(),this.hide()},this.init()},ic=(e,t)=>{const n=I({props:{className:"le-dialog-footer"}}),i=I({props:{className:"le-btn le-btn-primary le-dialog-footer-ok",innerHTML:e||"OK"}}),r=I({props:{className:"le-btn le-dialog-footer-cancel"}});return n.append(r),n.append(i),{ok:i,cancel:r,footer:n}};var Ve,Zt,Pi;class Is{constructor(t){ae(this,Zt);ae(this,Ve,{});t=t||{};const n={content:null,overlay:!0,closeOnEscape:!0,document,position:"centered",mode:"fixed"};this.settings=Object.assign({},n,t),this.build(),setTimeout(i=>this.open())}on(t,n){R(this,Ve)[t]?R(this,Ve)[t].push(n):R(this,Ve)[t]=[n]}dispatch(t,n){R(this,Ve)[t]&&R(this,Ve)[t].forEach(i=>{i.call(this,n)})}build(){this.root=I({props:{className:`le-dialog ${typeof this.settings.position=="string"?this.settings.position:""}`}});var t=I({props:{className:"le-dialog-close"}});t.on("click",()=>{this.remove()}),this.container=I({props:{className:"le-dialog-container"},content:this.settings.content}),this.root.append(t),this.root.append(this.container),this.settings.footer&&this.root.append(this.settings.footer.root||this.settings.footer),this.settings.document.body.appendChild(this.root.get(0)),this.settings.closeOnEscape&&this.settings.document.addEventListener("keydown",ye(this,Zt,Pi)),this.settings.overlay&&this.overlay()}open(){if(this.settings.position.nodeName&&this.settings.position.ownerDocument===this.settings.document){var t=this.settings.position;t.ownerDocument;var n=t.ownerDocument.defaultView,i=t.getBoundingClientRect(),r=i.top+n.scrollY,s=i.left+t.offsetWidth+n.scrollX,o=this.root.get(0);r+o.offsetHeight>n.innerHeight+n.scrollY&&(r-=r+o.offsetHeight-(n.innerHeight+n.scrollY)),s+o.offsetWidth>n.innerWidth&&(s-=s+o.offsetWidth-n.innerWidth),this.root.css({top:r,left:s,position:this.settings.mode})}this.root.addClass("le-dialog-opened")}remove(){this.root.on("transitionend",()=>{this.root.remove(),this.overlay&&this.overlay.remove()}),this.root.removeClass("le-dialog-opened"),this.settings.closeOnEscape&&this.settings.document.removeEventListener("keydown",ye(this,Zt,Pi)),this.dispatch("close")}overlay(){this.overlay=I({props:{className:"le-dialog-overlay"}}),this.settings.document.body.appendChild(this.overlay.get(0))}}Ve=new WeakMap,Zt=new WeakSet,Pi=function(t){(t.key==="Escape"||t.keyCode===27)&&this.remove()};const Ps=function(e,t){const n=ic(),i=new Is({content:e,footer:n.footer.get(0),position:"centered"});return n.cancel.on("click",function(){i.remove()}),n.ok.on("click",function(){t&&t.call(),i.remove()}),i},rc=function(e){this.root=I({props:{id:"mw-handle-item-element-root"}});const t=[{title:"Duplicate",text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg>',className:"mw-handle-clone-button",onTarget:function(n,i){i.style.display=n.classList.contains("cloneable")?"":"none"},action:function(n){I(n).after(n.outerHTML)}},{title:"Move backward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20 13.5C20 17.09 17.09 20 13.5 20H6V18H13.5C16 18 18 16 18 13.5S16 9 13.5 9H7.83L10.91 12.09L9.5 13.5L4 8L9.5 2.5L10.92 3.91L7.83 7H13.5C17.09 7 20 9.91 20 13.5Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(n,i){const r=n.classList.contains("cloneable"),s=n.previousElementSibling;i.style.display=r&&s?"":"none"},action:function(n){const i=n.previousElementSibling;i&&(i.before(n),e.elementHandle.set(n))}},{title:"Move forward",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M10.5 18H18V20H10.5C6.91 20 4 17.09 4 13.5S6.91 7 10.5 7H16.17L13.08 3.91L14.5 2.5L20 8L14.5 13.5L13.09 12.09L16.17 9H10.5C8 9 6 11 6 13.5S8 18 10.5 18Z" /></svg>',className:"mw-handle-move-back-button",onTarget:function(n,i){const r=n.classList.contains("cloneable"),s=n.nextElementSibling;i.style.display=r&&s?"":"none"},action:function(n){const i=n.nextElementSibling;i&&(i.after(n),e.elementHandle.set(n))}}];this.menu=new Et({id:"mw-handle-item-element-menu",title:"Element",buttons:[{title:"Edit",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',className:"mw-handle-add-button",onTarget:function(n,i){},action:function(n){mw.app.editor.dispatch("editNodeRequest",n)}},{title:"Insert module",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24" ><path d="M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z" /></svg>',className:"mw-handle-add-button",onTarget:function(n,i){},action:function(n){mw.app.editor.dispatch("insertModuleRequest",n)}},{title:"Settings",text:"",icon:'<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(n,i){},action:function(n){e.dialog({})}},...t,{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(n){Ps(I("<span>Are you sure</span>"),()=>{n.remove(),e.elementHandle.hide()})}}]}),this.menu.show(),this.root.append(this.menu.root)},sc=function(e){this.root=I({props:{id:"mw-handle-item-module-root",contentEditable:!1}});var t=new Et({id:"mw-handle-item-element-menu-default",title:"Module",rootScope:e,buttons:[{title:"Settings",icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" /></svg>',action:()=>{const n=mw.app.get("liveEdit").handles.get("module").getTarget();mw.app.editor.dispatch("onModuleSettingsRequest",n);var i=n.dataset.type||n.getAttribute("type");i=i.trim(),mw.app.editor.dispatch("onModuleSettingsRequest@"+i,n)},onTarget:function(n,i){n.classList.contains("no-settings")?i.style.display="none":i.style.display=""}}]});this.menu=new Et({id:"mw-handle-item-element-menu",title:"Module",rootScope:e,buttons:[]}),this.menu.show(),t.show(),this.root.append(this.menu.root),this.root.append(t.root)},oc=function(e){this.root=I({props:{id:"mw-handle-item-layout-root"}});const t={};this.on=(n,i)=>{t[n]?t[n].push(i):t[n]=[i]},this.dispatch=(n,i)=>{t[n]&&t[n].forEach(r=>{r.call(this,i)})},this.menu=new Et({id:"mw-handle-item-layout-menu",title:e.lang("Layout"),rootScope:e,buttons:[{title:e.lang("Settings"),text:"",icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 13.3 15.9" xml:space="preserve"><path d="M8.2,2.4L11,5.1l-8.2,8.2H0v-2.8L8.2,2.4z M11.8,4.3L9,1.6l1.4-1.4C10.5,0.1,10.7,0,10.9,0c0.2,0,0.4,0.1,0.5,0.2l1.7,1.7c0.1,0.1,0.2,0.3,0.2,0.5S13.3,2.8,13.1,3L11.8,4.3z"/><rect y="14.5" width="12" height="1.4"/></svg>',className:"mw-handle-insert-button",menu:[{title:e.lang("Add something"),text:e.lang("Add something"),icon:'<svg fill="currentColor" xmlns="http://www.w3.org/2000/svg" version="1.1" width="24" height="24" viewBox="0 0 24 24"><path d="M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z" /></svg>',className:"mw-handle-insert-button"},{title:e.lang("Settings1212"),text:"Do alert",className:"mw-handle-insert-button"}]},{title:e.lang("Clone"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" /></svg>',className:"mw-handle-insert-button",action:function(n,i,r){var s=document.createElement("div");s.innerHTML=n.outerHTML,I("[id]",s).each(function(){this.id="le-id-"+new Date().getTime()}),I(n).after(s.innerHTML);var o=n.nextElementSibling;mw.reload_module(o,function(){r.statemanager.record({target:mw.tools.firstParentWithClass(n,"edit"),value:parent.innerHTML})}),o.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})}},{title:e.lang("Move Down"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(n,i){n.nextElementSibling===null?i.style.display="none":i.style.display=""},action:function(n,i){var r=n.nextElementSibling;if(r){var s=n.getBoundingClientRect(),o=r.getBoundingClientRect(),l=0;s.top<o.top&&(l=-(s.top-o.top)),n.classList.add("mw-le-target-to-animate"),r.classList.add("mw-le-target-to-animate"),n.style.transform="translateY("+l+"px)",r.style.transform="translateY("+-l+"px)",setTimeout(function(){r.parentNode.insertBefore(n,r.nextSibling),n.classList.remove("mw-le-target-to-animate"),r.classList.remove("mw-le-target-to-animate"),n.style.transform="",r.style.transform="",n.scrollIntoView({behavior:"smooth",block:"start",inline:"start"}),e.layoutHandle.set(n,!0)},300)}}},{title:e.lang("Move up"),text:"",icon:'<svg fill="currentColor" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z" /></svg>',className:"mw-handle-insert-button",onTarget:function(n,i,r){n.previousElementSibling===null?i.style.display="none":i.style.display=""},action:function(n,i){var r=n.previousElementSibling;if(r){var s=n.getBoundingClientRect(),o=r.getBoundingClientRect(),l=0;s.top>o.top&&(l=-(s.top-o.top)),n.classList.add("mw-le-target-to-animate"),r.classList.add("mw-le-target-to-animate"),n.style.transform="translateY("+l+"px)",r.style.transform="translateY("+-l+"px)",setTimeout(function(){r.parentNode.insertBefore(n,r),n.classList.remove("mw-le-target-to-animate"),r.classList.remove("mw-le-target-to-animate"),n.style.transform="",r.style.transform="",e.layoutHandle.set(n,!0),n.scrollIntoView({behavior:"smooth",block:"start",inline:"start"})},300)}}},{title:e.lang("Delete"),text:"",icon:'<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path  d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',className:"mw-handle-insert-button",action:function(n,i,r){Ps("Are you sure",function(){n.remove()})}}]}),this.addButtons=function(){var n="Add Layout",i=r=>{this.dispatch("insertLayoutRequest"),this.dispatch("insertLayoutRequestOn"+r.charAt(0).toUpperCase()+r.slice(1))};this.plusTop=I({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-top",innerHTML:e.lang(n)}}),this.plusBottom=I({props:{className:"mw-handle-item-layout-plus mw-handle-item-layout-plus-bottom",innerHTML:e.lang(n)}}),this.plusTop.on("click",function(){i("top")}),this.plusBottom.on("click",function(){i("bottom")}),this.root.append(this.plusTop),this.root.append(this.plusBottom)},this.menu.show(),this.addButtons(),this.root.append(this.menu.root)},is={en:{Layout:"Layout","Add layout":"Add layout",Title:"Title",Settings:"Settings",Paragraph:"Paragraph",Text:"Text"},bg:{}},ac=(e,t)=>((!t||!is[t])&&(t="en"),is[t][e]||e),lc=function(e){this.root=I({props:{id:"mw-handle-interaction-item-element-root"}}),this.menu=new Et({id:"mw-handle-item-element-menu",title:"Element",buttons:[]}),this.menu.show(),this.root.append(this.menu.root)};class cc{constructor(t){const n=this,i={};this.on=(_,E)=>{i[_]?i[_].push(E):i[_]=[E]},this.dispatch=(_,E)=>{i[_]&&i[_].forEach(O=>{O.call(this,E)})},this.paused=!1;var r={elementClass:"element",backgroundImageHolder:"background-image-holder",cloneableClass:"cloneable",editClass:"edit",stateManager:null,moduleClass:"module",nodrop:"nodrop",allowDrop:"allow-drop",unEditableModules:['[type="template_settings"]'],frameworksClasses:{col:["col","mw-col"]},document,mode:"manual",lang:"en",strict:!0,strictLayouts:!1,viewWindow:window};this.settings=Oe.extend({},r,t),this.document=this.settings.document,this.stateManager=this.settings.stateManager,this.lang=function(_){return ac(_,this.settings.lang)},this.settings.root||(this.settings.root=this.settings.document.body),this.root=this.settings.root,this.elementAnalyzer=new ks(this.settings),this.dropIndicator=new tc(this.settings);const s=new rc(this),o=new sc(this),l=new oc(this);this.elementHandleContent=s,this.moduleHandleContent=o,this.layoutHandleContent=l,this.layoutHandleContent.on("insertLayoutRequest",()=>{this.dispatch("insertLayoutRequest")}),this.dialog=function(_){_||(_={});var E={document:window.top.document,position:o.menu.getTarget(),mode:"absolute"};n.pause();const O=new Is(Oe.extend({},E,_));return O.on("close",function(){n.play()}),O};var d=this.elementHandle=new Cn({...this.settings,dropIndicator:this.dropIndicator,content:s.root,handle:I(".mw-handle-drag-button",s.root.get(0)),handle:"self",document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});this.isResizing=!1,d.resizer.on("resizeStart",_=>this.isResizing=!0),d.resizer.on("resizeStop",_=>this.isResizing=!1),d.on("targetChange",function(_){s.menu.setTarget(_),_.className.includes("col-")?d.resizer.disable():d.resizer.enable()}),this.moduleHandle=new Cn({...this.settings,dropIndicator:this.dropIndicator,content:o.root,handle:o.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,resizable:!0});var f=this.moduleHandle;this.getModuleQuickSettings=_=>new Promise(E=>{E(mw.quickSettings[_]),this.dispatch("moduleQuickSettings",{module:_})}),f.on("targetChange",function(_){n.getModuleQuickSettings(_.dataset.type).then(function(E){o.menu.root.remove(),o.menu=new Et({id:"mw-handle-item-element-menu",title:_.dataset.type,rootScope:n,buttons:E?E.mainMenu||[]:[],data:{target:_}}),o.menu.setTarget(_),o.menu.show(),o.root.append(o.menu.root)})}),this.layoutHandle=new Cn({...this.settings,dropIndicator:this.dropIndicator,content:l.root,handle:l.menu.title,document:this.settings.document,stateManager:this.settings.stateManager,type:"layout"});var m=this.layoutHandle,g=n.lang("Layout");l.menu.setTitle(g),m.on("targetChange",function(_){l.menu.setTarget(_),l.menu.setTitle(g),n.elementAnalyzer.isEditOrInEdit(_)?(l.plusTop.show(),l.plusBottom.show()):(l.plusTop.hide(),l.plusBottom.hide())}),l.handle=m,o.handle=f,s.handle=d;const y=new lc;this.interactionHandle=new Cn({...this.settings,content:y.root,document:this.settings.document,resizable:!1,className:"mw-handle-item-interaction-handle"}),this.interactionHandle.menu=y.menu,this.handles=new ec({element:d,module:f,layout:m,interactionHandle:this.interactionHandle}),this.observe=new Xl(this.settings),this.init()}play(){this.paused=!1}pause(){this.handles.hide(),this.paused=!0}init(){this.settings.mode==="auto"&&setInterval(()=>Ql(this),1e3);const t=i=>{if(this.handles.targetIsOrInsideHandle(i))return;const r=this.observe.fromEvent(i);let s=r[0];if(s.nodeName!=="IMG"&&(s=fe.firstBlockLevel(r[0])),this.handles.get("element").set(null),this.handles.hide(),s){const o=this.elementAnalyzer.getType(s);o&&o!=="edit"&&(this.handles.set(o,s),o==="element"?this.handles.hide("module"):o==="module"?this.handles.hide("element"):o==="layout"?this.handles.set("layout",layout):this.handles.hide())}else{const o=fe.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);o&&this.handles.set("layout",o)}};let n;n="mousedown touchstart",I(this.root).on("mousemove",i=>{if(this.paused||this.isResizing){this.interactionHandle.hide();return}if(this.handles.targetIsOrInsideHandle(i)){this.interactionHandle.hide();return}const r=this.observe.fromEvent(i),s=fe.firstParentOrCurrentWithAnyOfClasses(r[0],["element","module","cloneable"]),o=fe.firstParentOrCurrentWithAnyOfClasses(i.target,["module-layouts"]);let l=!1;if(o){const f=this.handles.get("element").getTarget(),m=this.handles.get("module").getTarget();o.contains(f)&&(l=!0),o.contains(m)&&(l=!0),l?this.handles.hide("layout"):this.handles.set("layout",o)}if(s&&!this.handles.targetIsSelected(s,this.interactionHandle)&&!s.classList.contains("module-layouts")){var d="";s.dataset.mwTitle?d=s.dataset.mwTitle:s.dataset.type?d=s.dataset.type:s.nodeName==="P"?d=this.lang("Paragraph"):/(H[1-6])/.test(s.nodeName)?d=this.lang("Title")+" "+s.nodeName.replace(/^\D+/g,""):s.nodeName==="IMG"||s.nodeName==="IMAGE"?d=this.lang("Image"):["H1","H2","H3","H4","H5","H6"].includes(s.nodeName)?d=this.lang("Title "+s.nodeName.replace("H","")):["DIV","MAIN","SECTION"].includes(s.nodeName)?d=this.lang("Block"):d=this.lang("Text"),this.interactionHandle.menu.setTitle(d),this.interactionHandle.show(),this.interactionHandle.set(s)}else this.interactionHandle.hide()}),I(this.root).on(n,i=>{if(!this.paused)t(i);else{var r=this.elementHandle.getTarget();r&&!r.contains(i.target)&&this.play()}})}}globalThis.LiveEdit=cc;const bd=`.mw-drop-indicator{position:absolute;pointer-events:none!important;z-index:1001;margin:0!important;padding:0!important;border-color:#111;border-style:solid;border-width:0}.mw-drop-indicator.mw-drop-indicator-position-top{border-top-width:2px}.mw-drop-indicator.mw-drop-indicator-position-bottom{border-bottom-width:2px}@keyframes mwLiveEditDropIndicatorAnimationUp{0%,to{top:30px;opacity:1}50%{top:40px;opacity:.6}}@keyframes mwLiveEditDropIndicatorAnimationDown{0%,to{top:-30px;opacity:1}50%{top:-40px;opacity:.6}}.mw-drop-indicator-template-default .mw-drop-indicator-pin{position:absolute;left:50%;width:24px;height:24px;background-repeat:no-repeat;background-size:contain;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z' /%3E%3C/svg%3E");bottom:0;transition:transform .2s;transform:rotate(180deg);top:30px;display:none}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{margin-top:-70px;transform:rotate(0)}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{margin-top:50px}.mw-drop-indicator-template-default.mw-drop-indicator-hidden .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-pin,.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-pin{display:none;animation:none}.mw-drop-indicator-template-default .mw-drop-indicator-block{transform:scale(1);pointer-events:none!important;background-color:#111;position:absolute}.mw-drop-indicator-template-default.mw-drop-indicator-hidden{opacity:0;transform:scale(.8);visibility:hidden!important}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{height:5px;width:100%;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block{height:45px;width:100%;background-color:#00000054;left:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-prepend-top .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-block{top:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-append-bottom .mw-drop-indicator-block,.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-block{bottom:0}.mw-drop-indicator-template-default.mw-drop-indicator-position-after-bottom .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationDown 2s linear infinite}.mw-drop-indicator-template-default.mw-drop-indicator-position-before-top .mw-drop-indicator-pin{animation:mwLiveEditDropIndicatorAnimationUp 2s linear infinite}.mw-handle-item{position:absolute;z-index:999;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:3px solid #0078ff;transition:opacity .2s;pointer-events:none}.mw-handle-item.mw-le-resizable{position:absolute}.mw-handle-item.mw-handle-item-interaction-handle{pointer-events:none}.mw-handle-item.mw-handle-item-dragging{border-color:transparent}.mw-handle-item.mw-handle-item-dragging *{opacity:0!important}.mw-handle-item.mw-handle-item-hidden{opacity:0;visibility:hidden}.mw-handle-item .mw-handlemenu-item{pointer-events:all}.mw-draggable-helper{position:absolute;z-index:10;pointer-events:none}.mw-draggable-helper .mw-element-is-dragged{opacity:1;pointer-events:none}.mw-le-handle-menu{position:absolute;color:#404040}.mw-le-handle-menu .mw-le-handle-menu-buttons{height:42px;border-radius:7px;border:1px solid transparent;padding:3px 12px;display:inline-flex;align-items:center;background-color:#fff;pointer-events:all;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px;position:absolute;top:-40px;left:-3px;transition:.2s;opacity:0;transform:translateY(10px);z-index:2}.mw-le-handle-menu .mw-le-handle-menu-buttons:empty{display:none!important}.mw-le-handle-menu *{vertical-align:middle}.mw-handle-item.mw-handle-active .mw-le-handle-menu .mw-le-handle-menu-buttons{opacity:1;transform:translateY(0)}#mw-handle-item-element-menu{top:-22px;left:-3px}#mw-handle-item-layout-menu{top:5px;right:5px;left:auto}#mw-handle-item-layout-menu .mw-le-handle-menu-buttons{left:auto;right:5px;top:5px}#mw-handle-item-layout-menu .mw-le-handle-menu-title{display:none}.mw-le-handle-menu-buttons{display:inline-block;white-space:nowrap}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button{display:inline-flex;width:32px;height:32px;margin:0 2px;border-radius:3px;cursor:pointer;text-align:center;justify-content:center;align-items:center;transition:.3s;font-size:19px}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-buttons>.mw-le-handle-menu-button.mw-handle-drag-button{cursor:grab}.mw-le-handle-menu-button-sub-menu{display:flex;flex-wrap:nowrap;padding:10px 0;position:absolute;visibility:hidden;opacity:0;transform:scaleY(.5);transform-origin:center top;transition:.2s;top:100%;left:0;background-color:#fff;box-shadow:0 4px 16px #11111a1a,0 8px 32px #11111a0d}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button{display:block;white-space:nowrap;padding:5px 10px;text-align:left;transition:background-color .3s}.mw-le-handle-menu-button-sub-menu .mw-le-handle-menu-button:hover{background-color:#f1f1f1}.mw-le-handle-menu-button.sub-menu-active>.mw-le-handle-menu-button-sub-menu{visibility:visible;opacity:1;transform:scaleY(1)}.mw-le-handle-menu-button-content{display:inline-flex;white-space:nowrap;flex-wrap:nowrap;align-items:center}.mw-le-handle-menu-button-content .mw-le-handle-menu-button-text{font-size:14px}.mw-le-handle-menu-title{display:none;align-items:center;justify-content:center;padding:0 5px;height:20px;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:grab;background-color:#0078ff;color:#fff}.mw-handle-item-interaction-handle .mw-le-handle-menu-title{display:inline-flex}.mw-le-handle-menu-button-icon{display:inline-flex;white-space:nowrap;align-items:center;margin-inline:6px}.mw-le-handle-menu-button-icon svg,.mw-le-handle-menu-button-icon .mdi,.mw-le-handle-menu-button-icon .material-icons,.mw-le-handle-menu-button-icon .fa{max-width:25px;max-height:25px;display:inline-block}.mw-le-handle-menu-button-icon svg{width:25px;height:25px}.mw-le-handle-menu-button-icon *{max-width:31px;max-height:31px}.mw-le-handle-menu-title-text{font-size:12px}.mw-handle-item-layout-plus{font-size:12px;display:inline-flex;position:absolute;pointer-events:all;min-width:100px;text-align:center;align-items:center;justify-content:center;white-space:nowrap;background-color:#0078ff;color:#fff;border-radius:7px;cursor:pointer;left:50%;transform:translate(-50%);height:30px;padding:0 15px;box-shadow:#11111a1a 0 4px 16px,#11111a0d 0 8px 32px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-top{top:0;margin-top:-15px}.mw-handle-item-layout-plus.mw-handle-item-layout-plus-bottom{bottom:0;margin-bottom:-15px}.mw-handle-item-layout-plus:hover{background-color:#016ce6}.mw-handle-item-element-image-control{position:absolute;top:20%;left:50%;width:44px;height:44px;margin-left:-22px;border-radius:50px;background-color:#fff;box-shadow:#0000000d 0 6px 24px,#00000014 0 0 0 1px;cursor:pointer;pointer-events:all;display:flex;align-items:center;justify-content:center;background-size:20px auto;background-position:center;background-repeat:no-repeat;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z' /%3E%3C/svg%3E")}.mw-handle-item-element-image-control>input{position:absolute;top:0}.mw-element-is-dragged{opacity:0;pointer-events:none}html.le-dragging .mw-handle-item{opacity:0!important}.mw-handle-item-draggable-self{position:absolute;pointer-events:all;inset:0;z-index:10;display:none}.mw-handle-item-draggable-self.active{display:block}.mw-handle-item.mw-le-resizable .mw-le-resizer:before,.mw-handle-item.mw-le-resizable .mw-le-resizer:after{position:absolute;width:9px;height:9px;background-color:#fff;border:2px solid #2a84fb;content:""}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{left:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:before{top:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-l:after{top:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{left:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:before{bottom:-6px;cursor:nw-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-r:after{bottom:calc(50% - 6px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{top:2px}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:before{left:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-b:after{left:calc(50% - 4px)}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before,.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{top:-6px}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:before{right:-6px;cursor:ne-resize}.mw-handle-item.mw-le-resizable .mw-le-resizer-t:after{right:calc(50% - 5px)}.le-dialog-overlay{position:fixed;top:0;left:0;z-index:122;width:100%;height:100%;background-color:#0000000d}.le-dialog-close{width:30px;height:30px;background-repeat:no-repeat;background-position:center;background-size:25px 25px;position:absolute;top:5px;right:5px;cursor:pointer;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' style='width:24px;height:24px' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z' /%3E%3C/svg%3E")}.le-dialog{max-width:90%;position:fixed;top:50%;left:50%;transform:scale(.8);transform-origin:center center;z-index:1024;transition:.3s;visibility:hidden;opacity:0;pointer-events:none;min-width:320px}.le-dialog.le-dialog-centered{transform:scale(.8) translate(-50%,-50%)}.le-dialog.le-dialog-centered.le-dialog-opened{transform:scale(1) translate(-50%,-50%)}.le-dialog.le-dialog-opened{visibility:visible;opacity:1;pointer-events:auto;transform:scale(1)}.le-dialog .le-dialog-container{padding:20px;background-color:#fff;border-radius:5px;box-shadow:#32325d40 0 6px 12px -2px,#0000004d 0 3px 7px -3px}.mw-le-resizable{position:relative}.mw-le-resizable.mw-le-resizable-disabled .mw-le-resizer{display:none}.mw-le-resizer{position:absolute;pointer-events:all}.mw-le-resizer-r{cursor:e-resize;height:100%;right:0;top:0;width:5px}.mw-le-resizer-l{cursor:e-resize;height:100%;left:0;top:0;width:5px}.mw-le-resizer-b{bottom:0;cursor:n-resize;height:5px;left:0;width:100%}.mw-le-resizer-t{top:0;cursor:n-resize;height:5px;left:0;width:100%}mw-le-element{display:block;line-height:normal;font-weight:400;font-style:normal;list-style:none;letter-spacing:normal;word-spacing:normal}mw-le-element,mw-le-element *,mw-le-element *:before,mw-le-element *:after{margin:0;padding:0;font-family:Verdana,sans-serif;box-sizing:border-box}.edit.mw-le-target-to-animate,.element.mw-le-target-to-animate,.module.mw-le-target-to-animate{transition:transform .3s!important}.le-selectable-items-list-image{background-size:contain;background-repeat:no-repeat;background-position:center;height:120px}.le-selectable-items-list-type-layouts .le-selectable-items-list-image{background-size:cover}
`;var Le,We,st,Qt,Hi,en,Bi,Fn,Bs;class Hs{constructor(t={}){ae(this,Qt);ae(this,en);ae(this,Fn);ae(this,Le,null);ae(this,We,{});me(this,"selectedCategory","");ae(this,st,[]);me(this,"root",null);const n={mode:"local",document,encapsulate:!1,css:!1,searchMode:"local",data:[],skin:"defaultModules"};this.settings=Object.assign({},n,t),this.document=this.settings.document}on(t,n){R(this,We)[t]?R(this,We)[t].push(n):R(this,We)[t]=[n]}dispatch(t,n){R(this,We)[t]&&R(this,We)[t].forEach(i=>{i.call(this,n)})}getData(){return R(this,Le)}setData(t,n=!0){wt(this,Le,t);let i=0,r=R(this,Le).length;for(;i<r;i++)typeof R(this,Le)[i].categories=="string"&&(R(this,Le)[i].categories=R(this,Le)[i].categories.split(",").map(s=>s.trim()));n&&this.dispatch("dataChanged",R(this,Le))}prepareCategories(){const t=[],n=this.getData();let i=0,r=n.length;for(;i<r;i++){let o=n[i].categories||"",l=0,d=o.length;for(;l<d;l++){const f=o[l].trim();t.indexOf(f)===-1&&t.push(f)}}t.sort(),this.categories=t}createCategoriesMenu(){const t=this.document.createElement("ul");this.prepareCategories(),t.className="modules-list-categories",t.innerHTML=this.categories.map(n=>`<li data-category="${n}">${n}</li>`).join(""),t.innerHTML=`<li data-category="">All categories</li> ${t.innerHTML}`,t.addEventListener("click",n=>{n.target.nodeName==="LI"&&this.selectCategory(n.target.dataset.category)}),this.categoriesNavigation=t,this.rootShadow.appendChild(t),this.on("categorySelect",n=>{const i=t.querySelectorAll("[data-category]");for(const r of i)r.classList[r.dataset.category===n?"add":"remove"]("active")})}selectCategory(t=""){this.selectedCategory=t,this.search(t),this.dispatch("categorySelect",t)}createRoot(){if(this.root=this.document.createElement("div"),this.root.className="modules-list modules-list-"+this.settings.skin,this.rootShadow=this.settings.encapsulate?this.root.attachShadow({mode:"open"}):this.root,this.settings.css){let t=document.createElement("style");t.textContent=this.settings.css,this.rootShadow.appendChild(t)}}renderModulesCategorized(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let n=0,i=t.length;const r={miscellaneous:ye(this,en,Bi).call(this,"miscellaneous")};for(;n<i;n++)(t[n].categories||["miscellaneous"]).forEach(o=>{r[o]||(r[o]=ye(this,en,Bi).call(this,o));const l=ye(this,Qt,Hi).call(this,t[n]);R(this,st).push(l),r[o].appendChild(l),r[o].__$hasNodes=!0});for(const s in r)r[s].__$hasNodes&&this.modulesList.appendChild(r[s]);this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}renderModules(){this.modulesList=this.document.createElement("div"),this.modulesList.className="modules-list-block",this.modulesListNoResultsNode=this.document.createElement("div"),this.modulesListNoResultsNode.className="modules-list-block-no-results",this.modulesListNoResultsNode.innerHTML="Nothing found...",this.modulesListNoResultsNode.style.display="none";const t=this.getData();let n=0,i=t.length;for(;n<i;n++){const r=ye(this,Qt,Hi).call(this,t[n]);R(this,st).push(r),this.modulesList.appendChild(r)}this.rootShadow.appendChild(this.modulesList),this.modulesList.appendChild(this.modulesListNoResultsNode)}hideItem(t){t.nodeName&&(t.style.display="none")}showItem(t){t.nodeName&&(t.style.display="")}createSearchGUI(){this.searchBlock=this.document.createElement("div"),this.searchField=this.document.createElement("input"),this.searchField.type="text",this.searchField.placeholder="Type to Search...",this.searchBlock.className="modules-list-search-block",this.searchField.className="modules-list-search-field",this.searchBlock.appendChild(this.searchField),this.rootShadow.appendChild(this.searchBlock),this.searchField.addEventListener("input",t=>this.search(void 0,this.searchField.value)),this.on("categorySelect",t=>{this.searchField.value=""})}async search(t="",n=""){if(this.settings.searchMode==="local")return ye(this,Fn,Bs).call(this,t,n)}async createCategorized(){return this.setData(this.settings.data),this.createRoot(),this.createSearchGUI(),this.renderModulesCategorized(),new Promise(t=>{t(this)})}async create(){return this.setData(this.settings.data),this.createRoot(),this.createCategoriesMenu(),this.renderModules(),this.createSearchGUI(),new Promise(t=>{t(this)})}}Le=new WeakMap,We=new WeakMap,st=new WeakMap,Qt=new WeakSet,Hi=function(t){t.locked=t.description.includes("a");const n=this.document.createElement("div");return n.className="modules-list-block-item modules-list-block-item-is-locked-"+t.locked,n.__$data=t,n.innerHTML=`
            <div class="modules-list-block-item-picture" style="background-image: url(${t.icon||t.screenshot||t.image})"></div>
            <div class="modules-list-block-item-title">${t.name||t.title}</div>
            <div class="modules-list-block-item-description">${t.description}</div>
            ${t.locked?'<span class="modules-list-block-item-locked-badge">PRO</span>':""}
        `,n.addEventListener("click",i=>{i.stopPropagation(),n.__$data.locked?this.dispatch("lockedModuleSelected",{data:t,element:n}):this.dispatch("moduleSelected",{data:t,element:n})}),n.$data=t,n},en=new WeakSet,Bi=function(t){const n=this.document.createElement("div");return n.className="modules-list-block-category-section",n.innerHTML='<div class="modules-list-block-category-section-title"><h5>'+t+"</h5></div>",n.__$hasNodes=!1,n},Fn=new WeakSet,Bs=async function(t,n){return t&&(t=t.trim().toLowerCase()),n&&(n=n.trim().toLowerCase()),new Promise(i=>{let r=0,s=R(this,st).length,o=0;for(;r<s;r++){const l=R(this,st)[r],d=l.$data;if(t&&d.categories.indexOf(t)===-1){this.hideItem(l);continue}if(n&&(d.name||d.title).toLowerCase().indexOf(n)===-1){this.hideItem(l);continue}this.showItem(l),o++}console.log(n,t),this.modulesListNoResultsNode.style.display=o===0?"":"none",i()})};const Mn=[],zs=function(e){Mn.push(this),this.dialog=mw.element({props:{className:"mw-le-dialog-block "+e}}),this.overlay=mw.element({props:{className:"mw-le-overlay"}}),this.open=function(){this.dialog.addClass("active"),this.overlay.addClass("active"),this.closeButton.addClass("active")},this.close=function(){this.dialog.removeClass("active"),this.overlay.removeClass("active"),this.closeButton.removeClass("active")},this.remove=function(){this.close(),setTimeout(()=>{this.dialog.remove(),this.overlay.remove(),this.closeButton.remove()},400)},this.closeButton=mw.element({props:{className:"mw-le-dialog-close"}}),this.closeButton.on("click",t=>{this.remove()}),mw.element(document.body).append(this.overlay),mw.element(document.body).append(this.dialog),mw.element(document.body).append(this.closeButton),setTimeout(()=>{this.open()},100)};document.addEventListener("keydown",function(e){(e.key==="Escape"||e.keyCode===27)&&Mn.length>0&&(Mn[0].remove(),Mn.splice(0,1))});var zi,rs=function(e){var t=new Hs({data:zi});t.create().then(function(){var n=mw.element({props:{className:"mw-le-layouts-dialog-row"}}),i=mw.element({props:{className:"mw-le-layouts-dialog-col"}}),r=mw.element({props:{className:"mw-le-layouts-dialog-col"}});n.append(i),n.append(r),mw.element(t.root).append(n),i.append(t.searchBlock);var s=mw.element({props:{innerHTML:"Categories",className:"mw-le-layouts-dialog-categories-title"}});i.append(s),i.append(t.categoriesNavigation),r.append(t.modulesList),e.append(t.root)})};const uc=()=>{var e=new zs("mw-le-layouts-dialog"),t=e.dialog;if(zi){rs(t);return}mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=layout&elements_mode=true&group_layouts_by_category=true`).then(function(n){return n.json()}).then(function(n){zi=n,rs(t),mw.spinner({element:t.get(0),decorate:!0}).remove()})};var Fi,ss=function(e){var t=new Hs({data:Fi});t.createCategorized().then(function(){e.append(t.root)})};const dc=()=>{var e=new zs("mw-le-modules-dialog"),t=e.dialog;mw.$("#mw-plus-tooltip-selector li").each(function(){this.onclick=function(){var n=mw.$(this).attr("data-module-name"),i={class:this.className};n==="layout"&&(i.template=mw.$(this).attr("template")),mw.module.insert(mw._activeElementOver,n,i,mw.handleElement.positionedAt,mw.liveEditState),mw.wysiwyg.change(mw._activeElementOver),tooltip.remove()}}),Fi?ss(t):(mw.spinner({element:t.get(0),decorate:!0}),fetch(`${mw.settings.site_url}api/module/list?layout_type=module`).then(function(n){return n.json()}).then(function(n){Fi=n,ss(t),mw.spinner({element:t.get(0),decorate:!0}).remove()}))},hc={cssEditor:function(){document.getElementById("css-editor-template").classList.toggle("active")},themeEditor:function(){document.getElementById("general-theme-settings").classList.toggle("active")},insertModule:function(){return dc()},insertLayout:function(){return uc()}},fc={modulesListData:null,list:async function(){return this.modulesListData?this.modulesListData:(await In.get(route("api.module.list")+"?layout_type=module").then(e=>{this.modulesListData=e.data}),this.modulesListData)},modulesSkinsData:[],getSkins:async function(e){if(this.modulesSkinsData[e])return this.modulesSkinsData[e];if(await In.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.modulesSkinsData[e]=t.data}),this.modulesSkinsData[e])return this.modulesSkinsData[e]}},pc={layoutsListData:null,list:async function(){return this.layoutsListData?this.layoutsListData:(await In.get(route("api.module.list")+"?layout_type=layout&elements_mode=true&group_layouts_by_category=true").then(e=>{this.layoutsListData=e.data}),this.layoutsListData)},layoutSkinsData:[],getSkins:async function(){var e="layouts";if(this.layoutSkinsData[e])return this.layoutSkinsData[e];if(await In.get(route("api.module.getSkins")+"?module="+e).then(t=>{this.layoutSkinsData[e]=t.data}),this.layoutSkinsData[e])return this.layoutSkinsData[e]}};class mc extends jn{constructor(){super()}onRegister(){}}class gc extends jn{selectIcon(t){var n=$(t)[0];mw.iconLoader().init();var i=mw.iconPicker({iconOptions:!1});i.target=document.createElement("i"),i.on("select",function(r){r.render(),n.value=i.target.outerHTML;var s=new Event("input");n.dispatchEvent(s),i.dialog("hide")}),i.dialog()}removeIcon(t){var n=$(t)[0];n.value="";var i=new Event("input");n.dispatchEvent(i)}}class wc extends jn{constructor(){super()}selectLink(t){var n=new(mw.top()).LinkEditor({mode:"dialog",controllers:[{type:"url",config:{text:!1,target:!1}},{type:"page",config:{text:!1,target:!1}},{type:"post",config:{text:!1,target:!1}},{type:"file",config:{text:!1,target:!1}},{type:"email",config:{text:!1,target:!1}},{type:"layout",config:{text:!1,target:!1}}]});mw.$(t)&&n.setValue({url:mw.$(t).val()||""});var i=this;n.promise().then(function(r){if(r){var s={},o=r.url;s.url=o,r.data&&r.data.id&&(s.id=r.data.id,r.data.type&&r.data.type==="category"?s.type="category":(r.data.type&&r.data.type==="page"||r.data.content_type)&&(s.type="content")),i.dispatch("selected",s)}})}}(()=>{function e(a,u){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var h=Object.getOwnPropertySymbols(a);u&&(h=h.filter(function(p){return Object.getOwnPropertyDescriptor(a,p).enumerable})),c.push.apply(c,h)}return c}function t(a){for(var u=1;u<arguments.length;u++){var c=arguments[u]!=null?arguments[u]:{};u%2?e(Object(c),!0).forEach(function(h){i(a,h,c[h])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(c)):e(Object(c)).forEach(function(h){Object.defineProperty(a,h,Object.getOwnPropertyDescriptor(c,h))})}return a}function n(a){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?n=function(u){return typeof u}:n=function(u){return u&&typeof Symbol=="function"&&u.constructor===Symbol&&u!==Symbol.prototype?"symbol":typeof u},n(a)}function i(a,u,c){return u in a?Object.defineProperty(a,u,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[u]=c,a}function r(){return r=Object.assign||function(a){for(var u=1;u<arguments.length;u++){var c=arguments[u];for(var h in c)Object.prototype.hasOwnProperty.call(c,h)&&(a[h]=c[h])}return a},r.apply(this,arguments)}function s(a,u){if(a==null)return{};var c={},h=Object.keys(a),p,w;for(w=0;w<h.length;w++)p=h[w],!(u.indexOf(p)>=0)&&(c[p]=a[p]);return c}function o(a,u){if(a==null)return{};var c=s(a,u),h,p;if(Object.getOwnPropertySymbols){var w=Object.getOwnPropertySymbols(a);for(p=0;p<w.length;p++)h=w[p],!(u.indexOf(h)>=0)&&(!Object.prototype.propertyIsEnumerable.call(a,h)||(c[h]=a[h]))}return c}var l="1.15.0";function d(a){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(a)}var f=d(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),m=d(/Edge/i),g=d(/firefox/i),y=d(/safari/i)&&!d(/chrome/i)&&!d(/android/i),_=d(/iP(ad|od|hone)/i),E=d(/chrome/i)&&d(/android/i),O={capture:!1,passive:!1};function C(a,u,c){a.addEventListener(u,c,!f&&O)}function A(a,u,c){a.removeEventListener(u,c,!f&&O)}function z(a,u){if(u){if(u[0]===">"&&(u=u.substring(1)),a)try{if(a.matches)return a.matches(u);if(a.msMatchesSelector)return a.msMatchesSelector(u);if(a.webkitMatchesSelector)return a.webkitMatchesSelector(u)}catch{return!1}return!1}}function q(a){return a.host&&a!==document&&a.host.nodeType?a.host:a.parentNode}function j(a,u,c,h){if(a){c=c||document;do{if(u!=null&&(u[0]===">"?a.parentNode===c&&z(a,u):z(a,u))||h&&a===c)return a;if(a===c)break}while(a=q(a))}return null}var Ne=/\s+/g;function ee(a,u,c){if(a&&u)if(a.classList)a.classList[c?"add":"remove"](u);else{var h=(" "+a.className+" ").replace(Ne," ").replace(" "+u+" "," ");a.className=(h+(c?" "+u:"")).replace(Ne," ")}}function D(a,u,c){var h=a&&a.style;if(h){if(c===void 0)return document.defaultView&&document.defaultView.getComputedStyle?c=document.defaultView.getComputedStyle(a,""):a.currentStyle&&(c=a.currentStyle),u===void 0?c:c[u];!(u in h)&&u.indexOf("webkit")===-1&&(u="-webkit-"+u),h[u]=c+(typeof c=="string"?"":"px")}}function ct(a,u){var c="";if(typeof a=="string")c=a;else do{var h=D(a,"transform");h&&h!=="none"&&(c=h+" "+c)}while(!u&&(a=a.parentNode));var p=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return p&&new p(c)}function Tr(a,u,c){if(a){var h=a.getElementsByTagName(u),p=0,w=h.length;if(c)for(;p<w;p++)c(h[p],p);return h}return[]}function Ee(){var a=document.scrollingElement;return a||document.documentElement}function G(a,u,c,h,p){if(!(!a.getBoundingClientRect&&a!==window)){var w,v,L,x,T,N,k;if(a!==window&&a.parentNode&&a!==Ee()?(w=a.getBoundingClientRect(),v=w.top,L=w.left,x=w.bottom,T=w.right,N=w.height,k=w.width):(v=0,L=0,x=window.innerHeight,T=window.innerWidth,N=window.innerHeight,k=window.innerWidth),(u||c)&&a!==window&&(p=p||a.parentNode,!f))do if(p&&p.getBoundingClientRect&&(D(p,"transform")!=="none"||c&&D(p,"position")!=="static")){var W=p.getBoundingClientRect();v-=W.top+parseInt(D(p,"border-top-width")),L-=W.left+parseInt(D(p,"border-left-width")),x=v+w.height,T=L+w.width;break}while(p=p.parentNode);if(h&&a!==window){var H=ct(p||a),Z=H&&H.a,F=H&&H.d;H&&(v/=F,L/=Z,k/=Z,N/=F,x=v+N,T=L+k)}return{top:v,left:L,bottom:x,right:T,width:k,height:N}}}function Nr(a,u,c){for(var h=Ie(a,!0),p=G(a)[u];h;){var w=G(h)[c],v=void 0;if(c==="top"||c==="left"?v=p>=w:v=p<=w,!v)return h;if(h===Ee())break;h=Ie(h,!1)}return!1}function ut(a,u,c,h){for(var p=0,w=0,v=a.children;w<v.length;){if(v[w].style.display!=="none"&&v[w]!==M.ghost&&(h||v[w]!==M.dragged)&&j(v[w],c.draggable,a,!1)){if(p===u)return v[w];p++}w++}return null}function oi(a,u){for(var c=a.lastElementChild;c&&(c===M.ghost||D(c,"display")==="none"||u&&!z(c,u));)c=c.previousElementSibling;return c||null}function pe(a,u){var c=0;if(!a||!a.parentNode)return-1;for(;a=a.previousElementSibling;)a.nodeName.toUpperCase()!=="TEMPLATE"&&a!==M.clone&&(!u||z(a,u))&&c++;return c}function Dr(a){var u=0,c=0,h=Ee();if(a)do{var p=ct(a),w=p.a,v=p.d;u+=a.scrollLeft*w,c+=a.scrollTop*v}while(a!==h&&(a=a.parentNode));return[u,c]}function ta(a,u){for(var c in a)if(a.hasOwnProperty(c)){for(var h in u)if(u.hasOwnProperty(h)&&u[h]===a[c][h])return Number(c)}return-1}function Ie(a,u){if(!a||!a.getBoundingClientRect)return Ee();var c=a,h=!1;do if(c.clientWidth<c.scrollWidth||c.clientHeight<c.scrollHeight){var p=D(c);if(c.clientWidth<c.scrollWidth&&(p.overflowX=="auto"||p.overflowX=="scroll")||c.clientHeight<c.scrollHeight&&(p.overflowY=="auto"||p.overflowY=="scroll")){if(!c.getBoundingClientRect||c===document.body)return Ee();if(h||u)return c;h=!0}}while(c=c.parentNode);return Ee()}function na(a,u){if(a&&u)for(var c in u)u.hasOwnProperty(c)&&(a[c]=u[c]);return a}function ai(a,u){return Math.round(a.top)===Math.round(u.top)&&Math.round(a.left)===Math.round(u.left)&&Math.round(a.height)===Math.round(u.height)&&Math.round(a.width)===Math.round(u.width)}var Dt;function Mr(a,u){return function(){if(!Dt){var c=arguments,h=this;c.length===1?a.call(h,c[0]):a.apply(h,c),Dt=setTimeout(function(){Dt=void 0},u)}}}function ia(){clearTimeout(Dt),Dt=void 0}function kr(a,u,c){a.scrollLeft+=u,a.scrollTop+=c}function Rr(a){var u=window.Polymer,c=window.jQuery||window.Zepto;return u&&u.dom?u.dom(a).cloneNode(!0):c?c(a).clone(!0)[0]:a.cloneNode(!0)}var ue="Sortable"+new Date().getTime();function ra(){var a=[],u;return{captureAnimationState:function(){if(a=[],!!this.options.animation){var c=[].slice.call(this.el.children);c.forEach(function(h){if(!(D(h,"display")==="none"||h===M.ghost)){a.push({target:h,rect:G(h)});var p=t({},a[a.length-1].rect);if(h.thisAnimationDuration){var w=ct(h,!0);w&&(p.top-=w.f,p.left-=w.e)}h.fromRect=p}})}},addAnimationState:function(c){a.push(c)},removeAnimationState:function(c){a.splice(ta(a,{target:c}),1)},animateAll:function(c){var h=this;if(!this.options.animation){clearTimeout(u),typeof c=="function"&&c();return}var p=!1,w=0;a.forEach(function(v){var L=0,x=v.target,T=x.fromRect,N=G(x),k=x.prevFromRect,W=x.prevToRect,H=v.rect,Z=ct(x,!0);Z&&(N.top-=Z.f,N.left-=Z.e),x.toRect=N,x.thisAnimationDuration&&ai(k,N)&&!ai(T,N)&&(H.top-N.top)/(H.left-N.left)==(T.top-N.top)/(T.left-N.left)&&(L=oa(H,k,W,h.options)),ai(N,T)||(x.prevFromRect=T,x.prevToRect=N,L||(L=h.options.animation),h.animate(x,H,N,L)),L&&(p=!0,w=Math.max(w,L),clearTimeout(x.animationResetTimer),x.animationResetTimer=setTimeout(function(){x.animationTime=0,x.prevFromRect=null,x.fromRect=null,x.prevToRect=null,x.thisAnimationDuration=null},L),x.thisAnimationDuration=L)}),clearTimeout(u),p?u=setTimeout(function(){typeof c=="function"&&c()},w):typeof c=="function"&&c(),a=[]},animate:function(c,h,p,w){if(w){D(c,"transition",""),D(c,"transform","");var v=ct(this.el),L=v&&v.a,x=v&&v.d,T=(h.left-p.left)/(L||1),N=(h.top-p.top)/(x||1);c.animatingX=!!T,c.animatingY=!!N,D(c,"transform","translate3d("+T+"px,"+N+"px,0)"),this.forRepaintDummy=sa(c),D(c,"transition","transform "+w+"ms"+(this.options.easing?" "+this.options.easing:"")),D(c,"transform","translate3d(0,0,0)"),typeof c.animated=="number"&&clearTimeout(c.animated),c.animated=setTimeout(function(){D(c,"transition",""),D(c,"transform",""),c.animated=!1,c.animatingX=!1,c.animatingY=!1},w)}}}}function sa(a){return a.offsetWidth}function oa(a,u,c,h){return Math.sqrt(Math.pow(u.top-a.top,2)+Math.pow(u.left-a.left,2))/Math.sqrt(Math.pow(u.top-c.top,2)+Math.pow(u.left-c.left,2))*h.animation}var dt=[],li={initializeByDefault:!0},Mt={mount:function(a){for(var u in li)li.hasOwnProperty(u)&&!(u in a)&&(a[u]=li[u]);dt.forEach(function(c){if(c.pluginName===a.pluginName)throw"Sortable: Cannot mount plugin ".concat(a.pluginName," more than once")}),dt.push(a)},pluginEvent:function(a,u,c){var h=this;this.eventCanceled=!1,c.cancel=function(){h.eventCanceled=!0};var p=a+"Global";dt.forEach(function(w){!u[w.pluginName]||(u[w.pluginName][p]&&u[w.pluginName][p](t({sortable:u},c)),u.options[w.pluginName]&&u[w.pluginName][a]&&u[w.pluginName][a](t({sortable:u},c)))})},initializePlugins:function(a,u,c,h){dt.forEach(function(v){var L=v.pluginName;if(!(!a.options[L]&&!v.initializeByDefault)){var x=new v(a,u,a.options);x.sortable=a,x.options=a.options,a[L]=x,r(c,x.defaults)}});for(var p in a.options)if(a.options.hasOwnProperty(p)){var w=this.modifyOption(a,p,a.options[p]);typeof w<"u"&&(a.options[p]=w)}},getEventProperties:function(a,u){var c={};return dt.forEach(function(h){typeof h.eventProperties=="function"&&r(c,h.eventProperties.call(u[h.pluginName],a))}),c},modifyOption:function(a,u,c){var h;return dt.forEach(function(p){!a[p.pluginName]||p.optionListeners&&typeof p.optionListeners[u]=="function"&&(h=p.optionListeners[u].call(a[p.pluginName],c))}),h}};function aa(a){var u=a.sortable,c=a.rootEl,h=a.name,p=a.targetEl,w=a.cloneEl,v=a.toEl,L=a.fromEl,x=a.oldIndex,T=a.newIndex,N=a.oldDraggableIndex,k=a.newDraggableIndex,W=a.originalEvent,H=a.putSortable,Z=a.extraEventProperties;if(u=u||c&&c[ue],!!u){var F,De=u.options,oe="on"+h.charAt(0).toUpperCase()+h.substr(1);window.CustomEvent&&!f&&!m?F=new CustomEvent(h,{bubbles:!0,cancelable:!0}):(F=document.createEvent("Event"),F.initEvent(h,!0,!0)),F.to=v||c,F.from=L||c,F.item=p||c,F.clone=w,F.oldIndex=x,F.newIndex=T,F.oldDraggableIndex=N,F.newDraggableIndex=k,F.originalEvent=W,F.pullMode=H?H.lastPutMode:void 0;var Me=t(t({},Z),Mt.getEventProperties(h,u));for(var re in Me)F[re]=Me[re];c&&c.dispatchEvent(F),De[oe]&&De[oe].call(u,F)}}var la=["evt"],ce=function(a,u){var c=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},h=c.evt,p=o(c,la);Mt.pluginEvent.bind(M)(a,u,t({dragEl:S,parentEl:X,ghostEl:P,rootEl:V,nextEl:Ke,lastDownEl:cn,cloneEl:Y,cloneHidden:Pe,dragStarted:Rt,putSortable:ne,activeSortable:M.active,originalEvent:h,oldIndex:ht,oldDraggableIndex:kt,newIndex:de,newDraggableIndex:He,hideGhostForTarget:jr,unhideGhostForTarget:$r,cloneNowHidden:function(){Pe=!0},cloneNowShown:function(){Pe=!1},dispatchSortableEvent:function(w){se({sortable:u,name:w,originalEvent:h})}},p))};function se(a){aa(t({putSortable:ne,cloneEl:Y,targetEl:S,rootEl:V,oldIndex:ht,oldDraggableIndex:kt,newIndex:de,newDraggableIndex:He},a))}var S,X,P,V,Ke,cn,Y,Pe,ht,de,kt,He,un,ne,ft=!1,dn=!1,hn=[],Je,be,ci,ui,Ir,Pr,Rt,pt,It,Pt=!1,fn=!1,pn,ie,di=[],hi=!1,mn=[],gn=typeof document<"u",wn=_,Hr=m||f?"cssFloat":"float",ca=gn&&!E&&!_&&"draggable"in document.createElement("div"),Br=function(){if(gn){if(f)return!1;var a=document.createElement("x");return a.style.cssText="pointer-events:auto",a.style.pointerEvents==="auto"}}(),zr=function(a,u){var c=D(a),h=parseInt(c.width)-parseInt(c.paddingLeft)-parseInt(c.paddingRight)-parseInt(c.borderLeftWidth)-parseInt(c.borderRightWidth),p=ut(a,0,u),w=ut(a,1,u),v=p&&D(p),L=w&&D(w),x=v&&parseInt(v.marginLeft)+parseInt(v.marginRight)+G(p).width,T=L&&parseInt(L.marginLeft)+parseInt(L.marginRight)+G(w).width;if(c.display==="flex")return c.flexDirection==="column"||c.flexDirection==="column-reverse"?"vertical":"horizontal";if(c.display==="grid")return c.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(p&&v.float&&v.float!=="none"){var N=v.float==="left"?"left":"right";return w&&(L.clear==="both"||L.clear===N)?"vertical":"horizontal"}return p&&(v.display==="block"||v.display==="flex"||v.display==="table"||v.display==="grid"||x>=h&&c[Hr]==="none"||w&&c[Hr]==="none"&&x+T>h)?"vertical":"horizontal"},ua=function(a,u,c){var h=c?a.left:a.top,p=c?a.right:a.bottom,w=c?a.width:a.height,v=c?u.left:u.top,L=c?u.right:u.bottom,x=c?u.width:u.height;return h===v||p===L||h+w/2===v+x/2},da=function(a,u){var c;return hn.some(function(h){var p=h[ue].options.emptyInsertThreshold;if(!(!p||oi(h))){var w=G(h),v=a>=w.left-p&&a<=w.right+p,L=u>=w.top-p&&u<=w.bottom+p;if(v&&L)return c=h}}),c},Fr=function(a){function u(p,w){return function(v,L,x,T){var N=v.options.group.name&&L.options.group.name&&v.options.group.name===L.options.group.name;if(p==null&&(w||N))return!0;if(p==null||p===!1)return!1;if(w&&p==="clone")return p;if(typeof p=="function")return u(p(v,L,x,T),w)(v,L,x,T);var k=(w?v:L).options.group.name;return p===!0||typeof p=="string"&&p===k||p.join&&p.indexOf(k)>-1}}var c={},h=a.group;(!h||n(h)!="object")&&(h={name:h}),c.name=h.name,c.checkPull=u(h.pull,!0),c.checkPut=u(h.put),c.revertClone=h.revertClone,a.group=c},jr=function(){!Br&&P&&D(P,"display","none")},$r=function(){!Br&&P&&D(P,"display","")};gn&&!E&&document.addEventListener("click",function(a){if(dn)return a.preventDefault(),a.stopPropagation&&a.stopPropagation(),a.stopImmediatePropagation&&a.stopImmediatePropagation(),dn=!1,!1},!0);var Ge=function(a){if(S){a=a.touches?a.touches[0]:a;var u=da(a.clientX,a.clientY);if(u){var c={};for(var h in a)a.hasOwnProperty(h)&&(c[h]=a[h]);c.target=c.rootEl=u,c.preventDefault=void 0,c.stopPropagation=void 0,u[ue]._onDragOver(c)}}},ha=function(a){S&&S.parentNode[ue]._isOutsideThisEl(a.target)};function M(a,u){if(!(a&&a.nodeType&&a.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(a));this.el=a,this.options=u=r({},u),a[ue]=this;var c={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(a.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return zr(a,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(w,v){w.setData("Text",v.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:M.supportPointer!==!1&&"PointerEvent"in window&&!y,emptyInsertThreshold:5};Mt.initializePlugins(this,a,c);for(var h in c)!(h in u)&&(u[h]=c[h]);Fr(u);for(var p in this)p.charAt(0)==="_"&&typeof this[p]=="function"&&(this[p]=this[p].bind(this));this.nativeDraggable=u.forceFallback?!1:ca,this.nativeDraggable&&(this.options.touchStartThreshold=1),u.supportPointer?C(a,"pointerdown",this._onTapStart):(C(a,"mousedown",this._onTapStart),C(a,"touchstart",this._onTapStart)),this.nativeDraggable&&(C(a,"dragover",this),C(a,"dragenter",this)),hn.push(this.el),u.store&&u.store.get&&this.sort(u.store.get(this)||[]),r(this,ra())}M.prototype={constructor:M,_isOutsideThisEl:function(a){!this.el.contains(a)&&a!==this.el&&(pt=null)},_getDirection:function(a,u){return typeof this.options.direction=="function"?this.options.direction.call(this,a,u,S):this.options.direction},_onTapStart:function(a){if(a.cancelable){var u=this,c=this.el,h=this.options,p=h.preventOnFilter,w=a.type,v=a.touches&&a.touches[0]||a.pointerType&&a.pointerType==="touch"&&a,L=(v||a).target,x=a.target.shadowRoot&&(a.path&&a.path[0]||a.composedPath&&a.composedPath()[0])||L,T=h.filter;if(ya(c),!S&&!(/mousedown|pointerdown/.test(w)&&a.button!==0||h.disabled)&&!x.isContentEditable&&!(!this.nativeDraggable&&y&&L&&L.tagName.toUpperCase()==="SELECT")&&(L=j(L,h.draggable,c,!1),!(L&&L.animated)&&cn!==L)){if(ht=pe(L),kt=pe(L,h.draggable),typeof T=="function"){if(T.call(this,a,L,this)){se({sortable:u,rootEl:x,name:"filter",targetEl:L,toEl:c,fromEl:c}),ce("filter",u,{evt:a}),p&&a.cancelable&&a.preventDefault();return}}else if(T&&(T=T.split(",").some(function(N){if(N=j(x,N.trim(),c,!1),N)return se({sortable:u,rootEl:N,name:"filter",targetEl:L,fromEl:c,toEl:c}),ce("filter",u,{evt:a}),!0}),T)){p&&a.cancelable&&a.preventDefault();return}h.handle&&!j(x,h.handle,c,!1)||this._prepareDragStart(a,v,L)}}},_prepareDragStart:function(a,u,c){var h=this,p=h.el,w=h.options,v=p.ownerDocument,L;if(c&&!S&&c.parentNode===p){var x=G(c);if(V=p,S=c,X=S.parentNode,Ke=S.nextSibling,cn=c,un=w.group,M.dragged=S,Je={target:S,clientX:(u||a).clientX,clientY:(u||a).clientY},Ir=Je.clientX-x.left,Pr=Je.clientY-x.top,this._lastX=(u||a).clientX,this._lastY=(u||a).clientY,S.style["will-change"]="all",L=function(){if(ce("delayEnded",h,{evt:a}),M.eventCanceled){h._onDrop();return}h._disableDelayedDragEvents(),!g&&h.nativeDraggable&&(S.draggable=!0),h._triggerDragStart(a,u),se({sortable:h,name:"choose",originalEvent:a}),ee(S,w.chosenClass,!0)},w.ignore.split(",").forEach(function(T){Tr(S,T.trim(),fi)}),C(v,"dragover",Ge),C(v,"mousemove",Ge),C(v,"touchmove",Ge),C(v,"mouseup",h._onDrop),C(v,"touchend",h._onDrop),C(v,"touchcancel",h._onDrop),g&&this.nativeDraggable&&(this.options.touchStartThreshold=4,S.draggable=!0),ce("delayStart",this,{evt:a}),w.delay&&(!w.delayOnTouchOnly||u)&&(!this.nativeDraggable||!(m||f))){if(M.eventCanceled){this._onDrop();return}C(v,"mouseup",h._disableDelayedDrag),C(v,"touchend",h._disableDelayedDrag),C(v,"touchcancel",h._disableDelayedDrag),C(v,"mousemove",h._delayedDragTouchMoveHandler),C(v,"touchmove",h._delayedDragTouchMoveHandler),w.supportPointer&&C(v,"pointermove",h._delayedDragTouchMoveHandler),h._dragStartTimer=setTimeout(L,w.delay)}else L()}},_delayedDragTouchMoveHandler:function(a){var u=a.touches?a.touches[0]:a;Math.max(Math.abs(u.clientX-this._lastX),Math.abs(u.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){S&&fi(S),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var a=this.el.ownerDocument;A(a,"mouseup",this._disableDelayedDrag),A(a,"touchend",this._disableDelayedDrag),A(a,"touchcancel",this._disableDelayedDrag),A(a,"mousemove",this._delayedDragTouchMoveHandler),A(a,"touchmove",this._delayedDragTouchMoveHandler),A(a,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(a,u){u=u||a.pointerType=="touch"&&a,!this.nativeDraggable||u?this.options.supportPointer?C(document,"pointermove",this._onTouchMove):u?C(document,"touchmove",this._onTouchMove):C(document,"mousemove",this._onTouchMove):(C(S,"dragend",this),C(V,"dragstart",this._onDragStart));try{document.selection?bn(function(){document.selection.empty()}):window.getSelection().removeAllRanges()}catch{}},_dragStarted:function(a,u){if(ft=!1,V&&S){ce("dragStarted",this,{evt:u}),this.nativeDraggable&&C(document,"dragover",ha);var c=this.options;!a&&ee(S,c.dragClass,!1),ee(S,c.ghostClass,!0),M.active=this,a&&this._appendGhost(),se({sortable:this,name:"start",originalEvent:u})}else this._nulling()},_emulateDragOver:function(){if(be){this._lastX=be.clientX,this._lastY=be.clientY,jr();for(var a=document.elementFromPoint(be.clientX,be.clientY),u=a;a&&a.shadowRoot&&(a=a.shadowRoot.elementFromPoint(be.clientX,be.clientY),a!==u);)u=a;if(S.parentNode[ue]._isOutsideThisEl(a),u)do{if(u[ue]){var c=void 0;if(c=u[ue]._onDragOver({clientX:be.clientX,clientY:be.clientY,target:a,rootEl:u}),c&&!this.options.dragoverBubble)break}a=u}while(u=u.parentNode);$r()}},_onTouchMove:function(a){if(Je){var u=this.options,c=u.fallbackTolerance,h=u.fallbackOffset,p=a.touches?a.touches[0]:a,w=P&&ct(P,!0),v=P&&w&&w.a,L=P&&w&&w.d,x=wn&&ie&&Dr(ie),T=(p.clientX-Je.clientX+h.x)/(v||1)+(x?x[0]-di[0]:0)/(v||1),N=(p.clientY-Je.clientY+h.y)/(L||1)+(x?x[1]-di[1]:0)/(L||1);if(!M.active&&!ft){if(c&&Math.max(Math.abs(p.clientX-this._lastX),Math.abs(p.clientY-this._lastY))<c)return;this._onDragStart(a,!0)}if(P){w?(w.e+=T-(ci||0),w.f+=N-(ui||0)):w={a:1,b:0,c:0,d:1,e:T,f:N};var k="matrix(".concat(w.a,",").concat(w.b,",").concat(w.c,",").concat(w.d,",").concat(w.e,",").concat(w.f,")");D(P,"webkitTransform",k),D(P,"mozTransform",k),D(P,"msTransform",k),D(P,"transform",k),ci=T,ui=N,be=p}a.cancelable&&a.preventDefault()}},_appendGhost:function(){if(!P){var a=this.options.fallbackOnBody?document.body:V,u=G(S,!0,wn,!0,a),c=this.options;if(wn){for(ie=a;D(ie,"position")==="static"&&D(ie,"transform")==="none"&&ie!==document;)ie=ie.parentNode;ie!==document.body&&ie!==document.documentElement?(ie===document&&(ie=Ee()),u.top+=ie.scrollTop,u.left+=ie.scrollLeft):ie=Ee(),di=Dr(ie)}P=S.cloneNode(!0),ee(P,c.ghostClass,!1),ee(P,c.fallbackClass,!0),ee(P,c.dragClass,!0),D(P,"transition",""),D(P,"transform",""),D(P,"box-sizing","border-box"),D(P,"margin",0),D(P,"top",u.top),D(P,"left",u.left),D(P,"width",u.width),D(P,"height",u.height),D(P,"opacity","0.8"),D(P,"position",wn?"absolute":"fixed"),D(P,"zIndex","100000"),D(P,"pointerEvents","none"),M.ghost=P,a.appendChild(P),D(P,"transform-origin",Ir/parseInt(P.style.width)*100+"% "+Pr/parseInt(P.style.height)*100+"%")}},_onDragStart:function(a,u){var c=this,h=a.dataTransfer,p=c.options;if(ce("dragStart",this,{evt:a}),M.eventCanceled){this._onDrop();return}ce("setupClone",this),M.eventCanceled||(Y=Rr(S),Y.removeAttribute("id"),Y.draggable=!1,Y.style["will-change"]="",this._hideClone(),ee(Y,this.options.chosenClass,!1),M.clone=Y),c.cloneId=bn(function(){ce("clone",c),!M.eventCanceled&&(c.options.removeCloneOnHide||V.insertBefore(Y,S),c._hideClone(),se({sortable:c,name:"clone"}))}),!u&&ee(S,p.dragClass,!0),u?(dn=!0,c._loopId=setInterval(c._emulateDragOver,50)):(A(document,"mouseup",c._onDrop),A(document,"touchend",c._onDrop),A(document,"touchcancel",c._onDrop),h&&(h.effectAllowed="move",p.setData&&p.setData.call(c,h,S)),C(document,"drop",c),D(S,"transform","translateZ(0)")),ft=!0,c._dragStartId=bn(c._dragStarted.bind(c,u,a)),C(document,"selectstart",c),Rt=!0,y&&D(document.body,"user-select","none")},_onDragOver:function(a){var u=this.el,c=a.target,h,p,w,v=this.options,L=v.group,x=M.active,T=un===L,N=v.sort,k=ne||x,W,H=this,Z=!1;if(hi)return;function F(Ft,Ea){ce(Ft,H,t({evt:a,isOwner:T,axis:W?"vertical":"horizontal",revert:w,dragRect:h,targetRect:p,canSort:N,fromSortable:k,target:c,completed:oe,onMove:function(Ur,Ca){return vn(V,u,S,h,Ur,G(Ur),a,Ca)},changed:Me},Ea))}function De(){F("dragOverAnimationCapture"),H.captureAnimationState(),H!==k&&k.captureAnimationState()}function oe(Ft){return F("dragOverCompleted",{insertion:Ft}),Ft&&(T?x._hideClone():x._showClone(H),H!==k&&(ee(S,ne?ne.options.ghostClass:x.options.ghostClass,!1),ee(S,v.ghostClass,!0)),ne!==H&&H!==M.active?ne=H:H===M.active&&ne&&(ne=null),k===H&&(H._ignoreWhileAnimating=c),H.animateAll(function(){F("dragOverAnimationComplete"),H._ignoreWhileAnimating=null}),H!==k&&(k.animateAll(),k._ignoreWhileAnimating=null)),(c===S&&!S.animated||c===u&&!c.animated)&&(pt=null),!v.dragoverBubble&&!a.rootEl&&c!==document&&(S.parentNode[ue]._isOutsideThisEl(a.target),!Ft&&Ge(a)),!v.dragoverBubble&&a.stopPropagation&&a.stopPropagation(),Z=!0}function Me(){de=pe(S),He=pe(S,v.draggable),se({sortable:H,name:"change",toEl:u,newIndex:de,newDraggableIndex:He,originalEvent:a})}if(a.preventDefault!==void 0&&a.cancelable&&a.preventDefault(),c=j(c,v.draggable,u,!0),F("dragOver"),M.eventCanceled)return Z;if(S.contains(a.target)||c.animated&&c.animatingX&&c.animatingY||H._ignoreWhileAnimating===c)return oe(!1);if(dn=!1,x&&!v.disabled&&(T?N||(w=X!==V):ne===this||(this.lastPutMode=un.checkPull(this,x,S,a))&&L.checkPut(this,x,S,a))){if(W=this._getDirection(a,c)==="vertical",h=G(S),F("dragOverValid"),M.eventCanceled)return Z;if(w)return X=V,De(),this._hideClone(),F("revert"),M.eventCanceled||(Ke?V.insertBefore(S,Ke):V.appendChild(S)),oe(!0);var re=oi(u,v.draggable);if(!re||ga(a,W,this)&&!re.animated){if(re===S)return oe(!1);if(re&&u===a.target&&(c=re),c&&(p=G(c)),vn(V,u,S,h,c,p,a,!!c)!==!1)return De(),re&&re.nextSibling?u.insertBefore(S,re.nextSibling):u.appendChild(S),X=u,Me(),oe(!0)}else if(re&&ma(a,W,this)){var Ze=ut(u,0,v,!0);if(Ze===S)return oe(!1);if(c=Ze,p=G(c),vn(V,u,S,h,c,p,a,!1)!==!1)return De(),u.insertBefore(S,Ze),X=u,Me(),oe(!0)}else if(c.parentNode===u){p=G(c);var Ce=0,Qe,zt=S.parentNode!==u,mt=!ua(S.animated&&S.toRect||h,c.animated&&c.toRect||p,W),he=W?"top":"left",Be=Nr(c,"top","top")||Nr(S,"top","top"),xn=Be?Be.scrollTop:void 0;pt!==c&&(Qe=p[he],Pt=!1,fn=!mt&&v.invertSwap||zt),Ce=wa(a,c,p,W,mt?1:v.swapThreshold,v.invertedSwapThreshold==null?v.swapThreshold:v.invertedSwapThreshold,fn,pt===c);var ke;if(Ce!==0){var gt=pe(S);do gt-=Ce,ke=X.children[gt];while(ke&&(D(ke,"display")==="none"||ke===P))}if(Ce===0||ke===c)return oe(!1);pt=c,It=Ce;var et=c.nextElementSibling,ze=!1;ze=Ce===1;var tt=vn(V,u,S,h,c,p,a,ze);if(tt!==!1)return(tt===1||tt===-1)&&(ze=tt===1),hi=!0,setTimeout(pa,30),De(),ze&&!et?u.appendChild(S):c.parentNode.insertBefore(S,ze?et:c),Be&&kr(Be,0,xn-Be.scrollTop),X=S.parentNode,Qe!==void 0&&!fn&&(pn=Math.abs(Qe-G(c)[he])),Me(),oe(!0)}if(u.contains(S))return oe(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){A(document,"mousemove",this._onTouchMove),A(document,"touchmove",this._onTouchMove),A(document,"pointermove",this._onTouchMove),A(document,"dragover",Ge),A(document,"mousemove",Ge),A(document,"touchmove",Ge)},_offUpEvents:function(){var a=this.el.ownerDocument;A(a,"mouseup",this._onDrop),A(a,"touchend",this._onDrop),A(a,"pointerup",this._onDrop),A(a,"touchcancel",this._onDrop),A(document,"selectstart",this)},_onDrop:function(a){var u=this.el,c=this.options;if(de=pe(S),He=pe(S,c.draggable),ce("drop",this,{evt:a}),X=S&&S.parentNode,de=pe(S),He=pe(S,c.draggable),M.eventCanceled){this._nulling();return}ft=!1,fn=!1,Pt=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),pi(this.cloneId),pi(this._dragStartId),this.nativeDraggable&&(A(document,"drop",this),A(u,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),y&&D(document.body,"user-select",""),D(S,"transform",""),a&&(Rt&&(a.cancelable&&a.preventDefault(),!c.dropBubble&&a.stopPropagation()),P&&P.parentNode&&P.parentNode.removeChild(P),(V===X||ne&&ne.lastPutMode!=="clone")&&Y&&Y.parentNode&&Y.parentNode.removeChild(Y),S&&(this.nativeDraggable&&A(S,"dragend",this),fi(S),S.style["will-change"]="",Rt&&!ft&&ee(S,ne?ne.options.ghostClass:this.options.ghostClass,!1),ee(S,this.options.chosenClass,!1),se({sortable:this,name:"unchoose",toEl:X,newIndex:null,newDraggableIndex:null,originalEvent:a}),V!==X?(de>=0&&(se({rootEl:X,name:"add",toEl:X,fromEl:V,originalEvent:a}),se({sortable:this,name:"remove",toEl:X,originalEvent:a}),se({rootEl:X,name:"sort",toEl:X,fromEl:V,originalEvent:a}),se({sortable:this,name:"sort",toEl:X,originalEvent:a})),ne&&ne.save()):de!==ht&&de>=0&&(se({sortable:this,name:"update",toEl:X,originalEvent:a}),se({sortable:this,name:"sort",toEl:X,originalEvent:a})),M.active&&((de==null||de===-1)&&(de=ht,He=kt),se({sortable:this,name:"end",toEl:X,originalEvent:a}),this.save()))),this._nulling()},_nulling:function(){ce("nulling",this),V=S=X=P=Ke=Y=cn=Pe=Je=be=Rt=de=He=ht=kt=pt=It=ne=un=M.dragged=M.ghost=M.clone=M.active=null,mn.forEach(function(a){a.checked=!0}),mn.length=ci=ui=0},handleEvent:function(a){switch(a.type){case"drop":case"dragend":this._onDrop(a);break;case"dragenter":case"dragover":S&&(this._onDragOver(a),fa(a));break;case"selectstart":a.preventDefault();break}},toArray:function(){for(var a=[],u,c=this.el.children,h=0,p=c.length,w=this.options;h<p;h++)u=c[h],j(u,w.draggable,this.el,!1)&&a.push(u.getAttribute(w.dataIdAttr)||ba(u));return a},sort:function(a,u){var c={},h=this.el;this.toArray().forEach(function(p,w){var v=h.children[w];j(v,this.options.draggable,h,!1)&&(c[p]=v)},this),u&&this.captureAnimationState(),a.forEach(function(p){c[p]&&(h.removeChild(c[p]),h.appendChild(c[p]))}),u&&this.animateAll()},save:function(){var a=this.options.store;a&&a.set&&a.set(this)},closest:function(a,u){return j(a,u||this.options.draggable,this.el,!1)},option:function(a,u){var c=this.options;if(u===void 0)return c[a];var h=Mt.modifyOption(this,a,u);typeof h<"u"?c[a]=h:c[a]=u,a==="group"&&Fr(c)},destroy:function(){ce("destroy",this);var a=this.el;a[ue]=null,A(a,"mousedown",this._onTapStart),A(a,"touchstart",this._onTapStart),A(a,"pointerdown",this._onTapStart),this.nativeDraggable&&(A(a,"dragover",this),A(a,"dragenter",this)),Array.prototype.forEach.call(a.querySelectorAll("[draggable]"),function(u){u.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),hn.splice(hn.indexOf(this.el),1),this.el=a=null},_hideClone:function(){if(!Pe){if(ce("hideClone",this),M.eventCanceled)return;D(Y,"display","none"),this.options.removeCloneOnHide&&Y.parentNode&&Y.parentNode.removeChild(Y),Pe=!0}},_showClone:function(a){if(a.lastPutMode!=="clone"){this._hideClone();return}if(Pe){if(ce("showClone",this),M.eventCanceled)return;S.parentNode==V&&!this.options.group.revertClone?V.insertBefore(Y,S):Ke?V.insertBefore(Y,Ke):V.appendChild(Y),this.options.group.revertClone&&this.animate(S,Y),D(Y,"display",""),Pe=!1}}};function fa(a){a.dataTransfer&&(a.dataTransfer.dropEffect="move"),a.cancelable&&a.preventDefault()}function vn(a,u,c,h,p,w,v,L){var x,T=a[ue],N=T.options.onMove,k;return window.CustomEvent&&!f&&!m?x=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(x=document.createEvent("Event"),x.initEvent("move",!0,!0)),x.to=u,x.from=a,x.dragged=c,x.draggedRect=h,x.related=p||u,x.relatedRect=w||G(u),x.willInsertAfter=L,x.originalEvent=v,a.dispatchEvent(x),N&&(k=N.call(T,x,v)),k}function fi(a){a.draggable=!1}function pa(){hi=!1}function ma(a,u,c){var h=G(ut(c.el,0,c.options,!0)),p=10;return u?a.clientX<h.left-p||a.clientY<h.top&&a.clientX<h.right:a.clientY<h.top-p||a.clientY<h.bottom&&a.clientX<h.left}function ga(a,u,c){var h=G(oi(c.el,c.options.draggable)),p=10;return u?a.clientX>h.right+p||a.clientX<=h.right&&a.clientY>h.bottom&&a.clientX>=h.left:a.clientX>h.right&&a.clientY>h.top||a.clientX<=h.right&&a.clientY>h.bottom+p}function wa(a,u,c,h,p,w,v,L){var x=h?a.clientY:a.clientX,T=h?c.height:c.width,N=h?c.top:c.left,k=h?c.bottom:c.right,W=!1;if(!v){if(L&&pn<T*p){if(!Pt&&(It===1?x>N+T*w/2:x<k-T*w/2)&&(Pt=!0),Pt)W=!0;else if(It===1?x<N+pn:x>k-pn)return-It}else if(x>N+T*(1-p)/2&&x<k-T*(1-p)/2)return va(u)}return W=W||v,W&&(x<N+T*w/2||x>k-T*w/2)?x>N+T/2?1:-1:0}function va(a){return pe(S)<pe(a)?1:-1}function ba(a){for(var u=a.tagName+a.className+a.src+a.href+a.textContent,c=u.length,h=0;c--;)h+=u.charCodeAt(c);return h.toString(36)}function ya(a){mn.length=0;for(var u=a.getElementsByTagName("input"),c=u.length;c--;){var h=u[c];h.checked&&mn.push(h)}}function bn(a){return setTimeout(a,0)}function pi(a){return clearTimeout(a)}gn&&C(document,"touchmove",function(a){(M.active||ft)&&a.cancelable&&a.preventDefault()}),M.utils={on:C,off:A,css:D,find:Tr,is:function(a,u){return!!j(a,u,a,!1)},extend:na,throttle:Mr,closest:j,toggleClass:ee,clone:Rr,index:pe,nextTick:bn,cancelNextTick:pi,detectDirection:zr,getChild:ut},M.get=function(a){return a[ue]},M.mount=function(){for(var a=arguments.length,u=new Array(a),c=0;c<a;c++)u[c]=arguments[c];u[0].constructor===Array&&(u=u[0]),u.forEach(function(h){if(!h.prototype||!h.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(h));h.utils&&(M.utils=t(t({},M.utils),h.utils)),Mt.mount(h)})},M.create=function(a,u){return new M(a,u)},M.version=l;var K=[],Ht,mi,gi=!1,wi,vi,yn,Bt;function _a(){function a(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var u in this)u.charAt(0)==="_"&&typeof this[u]=="function"&&(this[u]=this[u].bind(this))}return a.prototype={dragStarted:function(u){var c=u.originalEvent;this.sortable.nativeDraggable?C(document,"dragover",this._handleAutoScroll):this.options.supportPointer?C(document,"pointermove",this._handleFallbackAutoScroll):c.touches?C(document,"touchmove",this._handleFallbackAutoScroll):C(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(u){var c=u.originalEvent;!this.options.dragOverBubble&&!c.rootEl&&this._handleAutoScroll(c)},drop:function(){this.sortable.nativeDraggable?A(document,"dragover",this._handleAutoScroll):(A(document,"pointermove",this._handleFallbackAutoScroll),A(document,"touchmove",this._handleFallbackAutoScroll),A(document,"mousemove",this._handleFallbackAutoScroll)),Vr(),_n(),ia()},nulling:function(){yn=mi=Ht=gi=Bt=wi=vi=null,K.length=0},_handleFallbackAutoScroll:function(u){this._handleAutoScroll(u,!0)},_handleAutoScroll:function(u,c){var h=this,p=(u.touches?u.touches[0]:u).clientX,w=(u.touches?u.touches[0]:u).clientY,v=document.elementFromPoint(p,w);if(yn=u,c||this.options.forceAutoScrollFallback||m||f||y){bi(u,this.options,v,c);var L=Ie(v,!0);gi&&(!Bt||p!==wi||w!==vi)&&(Bt&&Vr(),Bt=setInterval(function(){var x=Ie(document.elementFromPoint(p,w),!0);x!==L&&(L=x,_n()),bi(u,h.options,x,c)},10),wi=p,vi=w)}else{if(!this.options.bubbleScroll||Ie(v,!0)===Ee()){_n();return}bi(u,this.options,Ie(v,!1),!1)}}},r(a,{pluginName:"scroll",initializeByDefault:!0})}function _n(){K.forEach(function(a){clearInterval(a.pid)}),K=[]}function Vr(){clearInterval(Bt)}var bi=Mr(function(a,u,c,h){if(u.scroll){var p=(a.touches?a.touches[0]:a).clientX,w=(a.touches?a.touches[0]:a).clientY,v=u.scrollSensitivity,L=u.scrollSpeed,x=Ee(),T=!1,N;mi!==c&&(mi=c,_n(),Ht=u.scroll,N=u.scrollFn,Ht===!0&&(Ht=Ie(c,!0)));var k=0,W=Ht;do{var H=W,Z=G(H),F=Z.top,De=Z.bottom,oe=Z.left,Me=Z.right,re=Z.width,Ze=Z.height,Ce=void 0,Qe=void 0,zt=H.scrollWidth,mt=H.scrollHeight,he=D(H),Be=H.scrollLeft,xn=H.scrollTop;H===x?(Ce=re<zt&&(he.overflowX==="auto"||he.overflowX==="scroll"||he.overflowX==="visible"),Qe=Ze<mt&&(he.overflowY==="auto"||he.overflowY==="scroll"||he.overflowY==="visible")):(Ce=re<zt&&(he.overflowX==="auto"||he.overflowX==="scroll"),Qe=Ze<mt&&(he.overflowY==="auto"||he.overflowY==="scroll"));var ke=Ce&&(Math.abs(Me-p)<=v&&Be+re<zt)-(Math.abs(oe-p)<=v&&!!Be),gt=Qe&&(Math.abs(De-w)<=v&&xn+Ze<mt)-(Math.abs(F-w)<=v&&!!xn);if(!K[k])for(var et=0;et<=k;et++)K[et]||(K[et]={});(K[k].vx!=ke||K[k].vy!=gt||K[k].el!==H)&&(K[k].el=H,K[k].vx=ke,K[k].vy=gt,clearInterval(K[k].pid),(ke!=0||gt!=0)&&(T=!0,K[k].pid=setInterval(function(){h&&this.layer===0&&M.active._onTouchMove(yn);var ze=K[this.layer].vy?K[this.layer].vy*L:0,tt=K[this.layer].vx?K[this.layer].vx*L:0;typeof N=="function"&&N.call(M.dragged.parentNode[ue],tt,ze,a,yn,K[this.layer].el)!=="continue"||kr(K[this.layer].el,tt,ze)}.bind({layer:k}),24))),k++}while(u.bubbleScroll&&W!==x&&(W=Ie(W,!1)));gi=T}},30),Wr=function(a){var u=a.originalEvent,c=a.putSortable,h=a.dragEl,p=a.activeSortable,w=a.dispatchSortableEvent,v=a.hideGhostForTarget,L=a.unhideGhostForTarget;if(u){var x=c||p;v();var T=u.changedTouches&&u.changedTouches.length?u.changedTouches[0]:u,N=document.elementFromPoint(T.clientX,T.clientY);L(),x&&!x.el.contains(N)&&(w("spill"),this.onSpill({dragEl:h,putSortable:c}))}};function yi(){}yi.prototype={startIndex:null,dragStart:function(a){var u=a.oldDraggableIndex;this.startIndex=u},onSpill:function(a){var u=a.dragEl,c=a.putSortable;this.sortable.captureAnimationState(),c&&c.captureAnimationState();var h=ut(this.sortable.el,this.startIndex,this.options);h?this.sortable.el.insertBefore(u,h):this.sortable.el.appendChild(u),this.sortable.animateAll(),c&&c.animateAll()},drop:Wr},r(yi,{pluginName:"revertOnSpill"});function _i(){}_i.prototype={onSpill:function(a){var u=a.dragEl,c=a.putSortable,h=c||this.sortable;h.captureAnimationState(),u.parentNode&&u.parentNode.removeChild(u),h.animateAll()},drop:Wr},r(_i,{pluginName:"removeOnSpill"}),M.mount(new _a),M.mount(_i,yi);var xa=M;if(window.Sortable=xa,typeof window.Livewire>"u")throw"Livewire Sortable.js Plugin: window.Livewire is undefined. Make sure @livewireScripts is placed above this script include";window.Livewire.directive("sortable",(a,u,c)=>{if(u.modifiers.length>0)return;let h={};a.hasAttribute("wire:sortable.options")&&(h=new Function(`return ${a.getAttribute("wire:sortable.options")};`)()),a.livewire_sortable=window.Sortable.create(a,{...h,draggable:"[wire\\:sortable\\.item]",handle:a.querySelector("[wire\\:sortable\\.handle]")?"[wire\\:sortable\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable.item",group:{name:a.getAttribute("wire:sortable"),pull:!1,put:!1},store:{set:function(p){let w=p.toArray().map((v,L)=>({order:L+1,value:v}));c.call(u.method,w)}}})}),window.Livewire.directive("sortable-group",(a,u,c)=>{if(!u.modifiers.includes("item-group"))return;let h={};a.hasAttribute("wire:sortable-group.options")&&(h=new Function(`return ${a.getAttribute("wire:sortable-group.options")};`)()),a.livewire_sortable=window.Sortable.create(a,{...h,draggable:"[wire\\:sortable-group\\.item]",handle:a.querySelector("[wire\\:sortable-group\\.handle]")?"[wire\\:sortable-group\\.handle]":null,sort:!0,dataIdAttr:"wire:sortable-group.item",group:{name:a.closest("[wire\\:sortable-group]").getAttribute("wire:sortable-group"),pull:!0,put:!0},onSort:()=>{let p=a.closest("[wire\\:sortable-group]"),w=Array.from(p.querySelectorAll("[wire\\:sortable-group\\.item-group]")).map((v,L)=>({order:L+1,value:v.getAttribute("wire:sortable-group.item-group"),items:v.livewire_sortable.toArray().map((x,T)=>({order:T+1,value:x}))}));c.call(p.getAttribute("wire:sortable-group"),w)}})})})();/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */var ji=!1,$i=!1,ot=[],Vi=-1;function vc(e){bc(e)}function bc(e){ot.includes(e)||ot.push(e),yc()}function Fs(e){let t=ot.indexOf(e);t!==-1&&t>Vi&&ot.splice(t,1)}function yc(){!$i&&!ji&&(ji=!0,queueMicrotask(_c))}function _c(){ji=!1,$i=!0;for(let e=0;e<ot.length;e++)ot[e](),Vi=e;ot.length=0,Vi=-1,$i=!1}var Ot,Tt,rn,js,Wi=!0;function xc(e){Wi=!1,e(),Wi=!0}function Ec(e){Ot=e.reactive,rn=e.release,Tt=t=>e.effect(t,{scheduler:n=>{Wi?vc(n):n()}}),js=e.raw}function os(e){Tt=e}function Cc(e){let t=()=>{};return[i=>{let r=Tt(i);return e._x_effects||(e._x_effects=new Set,e._x_runEffects=()=>{e._x_effects.forEach(s=>s())}),e._x_effects.add(r),t=()=>{r!==void 0&&(e._x_effects.delete(r),rn(r))},r},()=>{t()}]}var $s=[],Vs=[],Ws=[];function Sc(e){Ws.push(e)}function Us(e,t){typeof t=="function"?(e._x_cleanups||(e._x_cleanups=[]),e._x_cleanups.push(t)):(t=e,Vs.push(t))}function Lc(e){$s.push(e)}function Ac(e,t,n){e._x_attributeCleanups||(e._x_attributeCleanups={}),e._x_attributeCleanups[t]||(e._x_attributeCleanups[t]=[]),e._x_attributeCleanups[t].push(n)}function Ys(e,t){e._x_attributeCleanups&&Object.entries(e._x_attributeCleanups).forEach(([n,i])=>{(t===void 0||t.includes(n))&&(i.forEach(r=>r()),delete e._x_attributeCleanups[n])})}var ur=new MutationObserver(pr),dr=!1;function hr(){ur.observe(document,{subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0}),dr=!0}function qs(){Oc(),ur.disconnect(),dr=!1}var Yt=[],Ai=!1;function Oc(){Yt=Yt.concat(ur.takeRecords()),Yt.length&&!Ai&&(Ai=!0,queueMicrotask(()=>{Tc(),Ai=!1}))}function Tc(){pr(Yt),Yt.length=0}function te(e){if(!dr)return e();qs();let t=e();return hr(),t}var fr=!1,Pn=[];function Nc(){fr=!0}function Dc(){fr=!1,pr(Pn),Pn=[]}function pr(e){if(fr){Pn=Pn.concat(e);return}let t=[],n=[],i=new Map,r=new Map;for(let s=0;s<e.length;s++)if(!e[s].target._x_ignoreMutationObserver&&(e[s].type==="childList"&&(e[s].addedNodes.forEach(o=>o.nodeType===1&&t.push(o)),e[s].removedNodes.forEach(o=>o.nodeType===1&&n.push(o))),e[s].type==="attributes")){let o=e[s].target,l=e[s].attributeName,d=e[s].oldValue,f=()=>{i.has(o)||i.set(o,[]),i.get(o).push({name:l,value:o.getAttribute(l)})},m=()=>{r.has(o)||r.set(o,[]),r.get(o).push(l)};o.hasAttribute(l)&&d===null?f():o.hasAttribute(l)?(m(),f()):m()}r.forEach((s,o)=>{Ys(o,s)}),i.forEach((s,o)=>{$s.forEach(l=>l(o,s))});for(let s of n)if(!t.includes(s)&&(Vs.forEach(o=>o(s)),s._x_cleanups))for(;s._x_cleanups.length;)s._x_cleanups.pop()();t.forEach(s=>{s._x_ignoreSelf=!0,s._x_ignore=!0});for(let s of t)n.includes(s)||s.isConnected&&(delete s._x_ignoreSelf,delete s._x_ignore,Ws.forEach(o=>o(s)),s._x_ignore=!0,s._x_ignoreSelf=!0);t.forEach(s=>{delete s._x_ignoreSelf,delete s._x_ignore}),t=null,n=null,i=null,r=null}function Xs(e){return on(Ct(e))}function sn(e,t,n){return e._x_dataStack=[t,...Ct(n||e)],()=>{e._x_dataStack=e._x_dataStack.filter(i=>i!==t)}}function as(e,t){let n=e._x_dataStack[0];Object.entries(t).forEach(([i,r])=>{n[i]=r})}function Ct(e){return e._x_dataStack?e._x_dataStack:typeof ShadowRoot=="function"&&e instanceof ShadowRoot?Ct(e.host):e.parentNode?Ct(e.parentNode):[]}function on(e){let t=new Proxy({},{ownKeys:()=>Array.from(new Set(e.flatMap(n=>Object.keys(n)))),has:(n,i)=>e.some(r=>r.hasOwnProperty(i)),get:(n,i)=>(e.find(r=>{if(r.hasOwnProperty(i)){let s=Object.getOwnPropertyDescriptor(r,i);if(s.get&&s.get._x_alreadyBound||s.set&&s.set._x_alreadyBound)return!0;if((s.get||s.set)&&s.enumerable){let o=s.get,l=s.set,d=s;o=o&&o.bind(t),l=l&&l.bind(t),o&&(o._x_alreadyBound=!0),l&&(l._x_alreadyBound=!0),Object.defineProperty(r,i,{...d,get:o,set:l})}return!0}return!1})||{})[i],set:(n,i,r)=>{let s=e.find(o=>o.hasOwnProperty(i));return s?s[i]=r:e[e.length-1][i]=r,!0}});return t}function Ks(e){let t=i=>typeof i=="object"&&!Array.isArray(i)&&i!==null,n=(i,r="")=>{Object.entries(Object.getOwnPropertyDescriptors(i)).forEach(([s,{value:o,enumerable:l}])=>{if(l===!1||o===void 0)return;let d=r===""?s:`${r}.${s}`;typeof o=="object"&&o!==null&&o._x_interceptor?i[s]=o.initialize(e,d,s):t(o)&&o!==i&&!(o instanceof Element)&&n(o,d)})};return n(e)}function Js(e,t=()=>{}){let n={initialValue:void 0,_x_interceptor:!0,initialize(i,r,s){return e(this.initialValue,()=>Mc(i,r),o=>Ui(i,r,o),r,s)}};return t(n),i=>{if(typeof i=="object"&&i!==null&&i._x_interceptor){let r=n.initialize.bind(n);n.initialize=(s,o,l)=>{let d=i.initialize(s,o,l);return n.initialValue=d,r(s,o,l)}}else n.initialValue=i;return n}}function Mc(e,t){return t.split(".").reduce((n,i)=>n[i],e)}function Ui(e,t,n){if(typeof t=="string"&&(t=t.split(".")),t.length===1)e[t[0]]=n;else{if(t.length===0)throw error;return e[t[0]]||(e[t[0]]={}),Ui(e[t[0]],t.slice(1),n)}}var Gs={};function xe(e,t){Gs[e]=t}function Yi(e,t){return Object.entries(Gs).forEach(([n,i])=>{Object.defineProperty(e,`$${n}`,{get(){let[r,s]=no(t);return r={interceptor:Js,...r},Us(t,s),i(t,r)},enumerable:!1})}),e}function kc(e,t,n,...i){try{return n(...i)}catch(r){Jt(r,e,t)}}function Jt(e,t,n=void 0){Object.assign(e,{el:t,expression:n}),console.warn(`Alpine Expression Error: ${e.message}

${n?'Expression: "'+n+`"

`:""}`,t),setTimeout(()=>{throw e},0)}var kn=!0;function Rc(e){let t=kn;kn=!1,e(),kn=t}function vt(e,t,n={}){let i;return le(e,t)(r=>i=r,n),i}function le(...e){return Zs(...e)}var Zs=Qs;function Ic(e){Zs=e}function Qs(e,t){let n={};Yi(n,e);let i=[n,...Ct(e)],r=typeof t=="function"?Pc(i,t):Bc(i,t,e);return kc.bind(null,e,t,r)}function Pc(e,t){return(n=()=>{},{scope:i={},params:r=[]}={})=>{let s=t.apply(on([i,...e]),r);Hn(n,s)}}var Oi={};function Hc(e,t){if(Oi[e])return Oi[e];let n=Object.getPrototypeOf(async function(){}).constructor,i=/^[\n\s]*if.*\(.*\)/.test(e)||/^(let|const)\s/.test(e)?`(async()=>{ ${e} })()`:e,s=(()=>{try{return new n(["__self","scope"],`with (scope) { __self.result = ${i} }; __self.finished = true; return __self.result;`)}catch(o){return Jt(o,t,e),Promise.resolve()}})();return Oi[e]=s,s}function Bc(e,t,n){let i=Hc(t,n);return(r=()=>{},{scope:s={},params:o=[]}={})=>{i.result=void 0,i.finished=!1;let l=on([s,...e]);if(typeof i=="function"){let d=i(i,l).catch(f=>Jt(f,n,t));i.finished?(Hn(r,i.result,l,o,n),i.result=void 0):d.then(f=>{Hn(r,f,l,o,n)}).catch(f=>Jt(f,n,t)).finally(()=>i.result=void 0)}}}function Hn(e,t,n,i,r){if(kn&&typeof t=="function"){let s=t.apply(n,i);s instanceof Promise?s.then(o=>Hn(e,o,n,i)).catch(o=>Jt(o,r,t)):e(s)}else typeof t=="object"&&t instanceof Promise?t.then(s=>e(s)):e(t)}var mr="x-";function Nt(e=""){return mr+e}function zc(e){mr=e}var qi={};function J(e,t){return qi[e]=t,{before(n){if(!qi[n]){console.warn("Cannot find directive `${directive}`. `${name}` will use the default order of execution");return}const i=rt.indexOf(n);rt.splice(i>=0?i:rt.indexOf("DEFAULT"),0,e)}}}function gr(e,t,n){if(t=Array.from(t),e._x_virtualDirectives){let s=Object.entries(e._x_virtualDirectives).map(([l,d])=>({name:l,value:d})),o=eo(s);s=s.map(l=>o.find(d=>d.name===l.name)?{name:`x-bind:${l.name}`,value:`"${l.value}"`}:l),t=t.concat(s)}let i={};return t.map(so((s,o)=>i[s]=o)).filter(ao).map($c(i,n)).sort(Vc).map(s=>jc(e,s))}function eo(e){return Array.from(e).map(so()).filter(t=>!ao(t))}var Xi=!1,Ut=new Map,to=Symbol();function Fc(e){Xi=!0;let t=Symbol();to=t,Ut.set(t,[]);let n=()=>{for(;Ut.get(t).length;)Ut.get(t).shift()();Ut.delete(t)},i=()=>{Xi=!1,n()};e(n),i()}function no(e){let t=[],n=l=>t.push(l),[i,r]=Cc(e);return t.push(r),[{Alpine:ln,effect:i,cleanup:n,evaluateLater:le.bind(le,e),evaluate:vt.bind(vt,e)},()=>t.forEach(l=>l())]}function jc(e,t){let n=()=>{},i=qi[t.type]||n,[r,s]=no(e);Ac(e,t.original,s);let o=()=>{e._x_ignore||e._x_ignoreSelf||(i.inline&&i.inline(e,t,r),i=i.bind(i,e,t,r),Xi?Ut.get(to).push(i):i())};return o.runCleanups=s,o}var io=(e,t)=>({name:n,value:i})=>(n.startsWith(e)&&(n=n.replace(e,t)),{name:n,value:i}),ro=e=>e;function so(e=()=>{}){return({name:t,value:n})=>{let{name:i,value:r}=oo.reduce((s,o)=>o(s),{name:t,value:n});return i!==t&&e(i,t),{name:i,value:r}}}var oo=[];function wr(e){oo.push(e)}function ao({name:e}){return lo().test(e)}var lo=()=>new RegExp(`^${mr}([^:^.]+)\\b`);function $c(e,t){return({name:n,value:i})=>{let r=n.match(lo()),s=n.match(/:([a-zA-Z0-9\-:]+)/),o=n.match(/\.[^.\]]+(?=[^\]]*$)/g)||[],l=t||e[n]||n;return{type:r?r[1]:null,value:s?s[1]:null,modifiers:o.map(d=>d.replace(".","")),expression:i,original:l}}}var Ki="DEFAULT",rt=["ignore","ref","data","id","bind","init","for","model","modelable","transition","show","if",Ki,"teleport"];function Vc(e,t){let n=rt.indexOf(e.type)===-1?Ki:e.type,i=rt.indexOf(t.type)===-1?Ki:t.type;return rt.indexOf(n)-rt.indexOf(i)}function qt(e,t,n={}){e.dispatchEvent(new CustomEvent(t,{detail:n,bubbles:!0,composed:!0,cancelable:!0}))}function Ye(e,t){if(typeof ShadowRoot=="function"&&e instanceof ShadowRoot){Array.from(e.children).forEach(r=>Ye(r,t));return}let n=!1;if(t(e,()=>n=!0),n)return;let i=e.firstElementChild;for(;i;)Ye(i,t),i=i.nextElementSibling}function St(e,...t){console.warn(`Alpine Warning: ${e}`,...t)}function Wc(){document.body||St("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?"),qt(document,"alpine:init"),qt(document,"alpine:initializing"),hr(),Sc(t=>qe(t,Ye)),Us(t=>go(t)),Lc((t,n)=>{gr(t,n).forEach(i=>i())});let e=t=>!Xn(t.parentElement,!0);Array.from(document.querySelectorAll(ho())).filter(e).forEach(t=>{qe(t)}),qt(document,"alpine:initialized")}var vr=[],co=[];function uo(){return vr.map(e=>e())}function ho(){return vr.concat(co).map(e=>e())}function fo(e){vr.push(e)}function po(e){co.push(e)}function Xn(e,t=!1){return Kn(e,n=>{if((t?ho():uo()).some(r=>n.matches(r)))return!0})}function Kn(e,t){if(e){if(t(e))return e;if(e._x_teleportBack&&(e=e._x_teleportBack),!!e.parentElement)return Kn(e.parentElement,t)}}function Uc(e){return uo().some(t=>e.matches(t))}var mo=[];function Yc(e){mo.push(e)}function qe(e,t=Ye,n=()=>{}){Fc(()=>{t(e,(i,r)=>{n(i,r),mo.forEach(s=>s(i,r)),gr(i,i.attributes).forEach(s=>s()),i._x_ignore&&r()})})}function go(e){Ye(e,t=>Ys(t))}var Ji=[],br=!1;function yr(e=()=>{}){return queueMicrotask(()=>{br||setTimeout(()=>{Gi()})}),new Promise(t=>{Ji.push(()=>{e(),t()})})}function Gi(){for(br=!1;Ji.length;)Ji.shift()()}function qc(){br=!0}function _r(e,t){return Array.isArray(t)?ls(e,t.join(" ")):typeof t=="object"&&t!==null?Xc(e,t):typeof t=="function"?_r(e,t()):ls(e,t)}function ls(e,t){let n=r=>r.split(" ").filter(s=>!e.classList.contains(s)).filter(Boolean),i=r=>(e.classList.add(...r),()=>{e.classList.remove(...r)});return t=t===!0?t="":t||"",i(n(t))}function Xc(e,t){let n=l=>l.split(" ").filter(Boolean),i=Object.entries(t).flatMap(([l,d])=>d?n(l):!1).filter(Boolean),r=Object.entries(t).flatMap(([l,d])=>d?!1:n(l)).filter(Boolean),s=[],o=[];return r.forEach(l=>{e.classList.contains(l)&&(e.classList.remove(l),o.push(l))}),i.forEach(l=>{e.classList.contains(l)||(e.classList.add(l),s.push(l))}),()=>{o.forEach(l=>e.classList.add(l)),s.forEach(l=>e.classList.remove(l))}}function Jn(e,t){return typeof t=="object"&&t!==null?Kc(e,t):Jc(e,t)}function Kc(e,t){let n={};return Object.entries(t).forEach(([i,r])=>{n[i]=e.style[i],i.startsWith("--")||(i=Gc(i)),e.style.setProperty(i,r)}),setTimeout(()=>{e.style.length===0&&e.removeAttribute("style")}),()=>{Jn(e,n)}}function Jc(e,t){let n=e.getAttribute("style",t);return e.setAttribute("style",t),()=>{e.setAttribute("style",n||"")}}function Gc(e){return e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function Zi(e,t=()=>{}){let n=!1;return function(){n?t.apply(this,arguments):(n=!0,e.apply(this,arguments))}}J("transition",(e,{value:t,modifiers:n,expression:i},{evaluate:r})=>{typeof i=="function"&&(i=r(i)),i?Zc(e,i,t):Qc(e,n,t)});function Zc(e,t,n){wo(e,_r,""),{enter:r=>{e._x_transition.enter.during=r},"enter-start":r=>{e._x_transition.enter.start=r},"enter-end":r=>{e._x_transition.enter.end=r},leave:r=>{e._x_transition.leave.during=r},"leave-start":r=>{e._x_transition.leave.start=r},"leave-end":r=>{e._x_transition.leave.end=r}}[n](t)}function Qc(e,t,n){wo(e,Jn);let i=!t.includes("in")&&!t.includes("out")&&!n,r=i||t.includes("in")||["enter"].includes(n),s=i||t.includes("out")||["leave"].includes(n);t.includes("in")&&!i&&(t=t.filter((A,z)=>z<t.indexOf("out"))),t.includes("out")&&!i&&(t=t.filter((A,z)=>z>t.indexOf("out")));let o=!t.includes("opacity")&&!t.includes("scale"),l=o||t.includes("opacity"),d=o||t.includes("scale"),f=l?0:1,m=d?$t(t,"scale",95)/100:1,g=$t(t,"delay",0),y=$t(t,"origin","center"),_="opacity, transform",E=$t(t,"duration",150)/1e3,O=$t(t,"duration",75)/1e3,C="cubic-bezier(0.4, 0.0, 0.2, 1)";r&&(e._x_transition.enter.during={transformOrigin:y,transitionDelay:g,transitionProperty:_,transitionDuration:`${E}s`,transitionTimingFunction:C},e._x_transition.enter.start={opacity:f,transform:`scale(${m})`},e._x_transition.enter.end={opacity:1,transform:"scale(1)"}),s&&(e._x_transition.leave.during={transformOrigin:y,transitionDelay:g,transitionProperty:_,transitionDuration:`${O}s`,transitionTimingFunction:C},e._x_transition.leave.start={opacity:1,transform:"scale(1)"},e._x_transition.leave.end={opacity:f,transform:`scale(${m})`})}function wo(e,t,n={}){e._x_transition||(e._x_transition={enter:{during:n,start:n,end:n},leave:{during:n,start:n,end:n},in(i=()=>{},r=()=>{}){Qi(e,t,{during:this.enter.during,start:this.enter.start,end:this.enter.end},i,r)},out(i=()=>{},r=()=>{}){Qi(e,t,{during:this.leave.during,start:this.leave.start,end:this.leave.end},i,r)}})}window.Element.prototype._x_toggleAndCascadeWithTransitions=function(e,t,n,i){const r=document.visibilityState==="visible"?requestAnimationFrame:setTimeout;let s=()=>r(n);if(t){e._x_transition&&(e._x_transition.enter||e._x_transition.leave)?e._x_transition.enter&&(Object.entries(e._x_transition.enter.during).length||Object.entries(e._x_transition.enter.start).length||Object.entries(e._x_transition.enter.end).length)?e._x_transition.in(n):s():e._x_transition?e._x_transition.in(n):s();return}e._x_hidePromise=e._x_transition?new Promise((o,l)=>{e._x_transition.out(()=>{},()=>o(i)),e._x_transitioning.beforeCancel(()=>l({isFromCancelledTransition:!0}))}):Promise.resolve(i),queueMicrotask(()=>{let o=vo(e);o?(o._x_hideChildren||(o._x_hideChildren=[]),o._x_hideChildren.push(e)):r(()=>{let l=d=>{let f=Promise.all([d._x_hidePromise,...(d._x_hideChildren||[]).map(l)]).then(([m])=>m());return delete d._x_hidePromise,delete d._x_hideChildren,f};l(e).catch(d=>{if(!d.isFromCancelledTransition)throw d})})})};function vo(e){let t=e.parentNode;if(t)return t._x_hidePromise?t:vo(t)}function Qi(e,t,{during:n,start:i,end:r}={},s=()=>{},o=()=>{}){if(e._x_transitioning&&e._x_transitioning.cancel(),Object.keys(n).length===0&&Object.keys(i).length===0&&Object.keys(r).length===0){s(),o();return}let l,d,f;eu(e,{start(){l=t(e,i)},during(){d=t(e,n)},before:s,end(){l(),f=t(e,r)},after:o,cleanup(){d(),f()}})}function eu(e,t){let n,i,r,s=Zi(()=>{te(()=>{n=!0,i||t.before(),r||(t.end(),Gi()),t.after(),e.isConnected&&t.cleanup(),delete e._x_transitioning})});e._x_transitioning={beforeCancels:[],beforeCancel(o){this.beforeCancels.push(o)},cancel:Zi(function(){for(;this.beforeCancels.length;)this.beforeCancels.shift()();s()}),finish:s},te(()=>{t.start(),t.during()}),qc(),requestAnimationFrame(()=>{if(n)return;let o=Number(getComputedStyle(e).transitionDuration.replace(/,.*/,"").replace("s",""))*1e3,l=Number(getComputedStyle(e).transitionDelay.replace(/,.*/,"").replace("s",""))*1e3;o===0&&(o=Number(getComputedStyle(e).animationDuration.replace("s",""))*1e3),te(()=>{t.before()}),i=!0,requestAnimationFrame(()=>{n||(te(()=>{t.end()}),Gi(),setTimeout(e._x_transitioning.finish,o+l),r=!0)})})}function $t(e,t,n){if(e.indexOf(t)===-1)return n;const i=e[e.indexOf(t)+1];if(!i||t==="scale"&&isNaN(i))return n;if(t==="duration"){let r=i.match(/([0-9]+)ms/);if(r)return r[1]}return t==="origin"&&["top","right","left","center","bottom"].includes(e[e.indexOf(t)+2])?[i,e[e.indexOf(t)+2]].join(" "):i}var Gt=!1;function an(e,t=()=>{}){return(...n)=>Gt?t(...n):e(...n)}function tu(e){return(...t)=>Gt&&e(...t)}function nu(e,t){t._x_dataStack||(t._x_dataStack=e._x_dataStack),Gt=!0,ru(()=>{iu(t)}),Gt=!1}function iu(e){let t=!1;qe(e,(i,r)=>{Ye(i,(s,o)=>{if(t&&Uc(s))return o();t=!0,r(s,o)})})}function ru(e){let t=Tt;os((n,i)=>{let r=t(n);return rn(r),()=>{}}),e(),os(t)}function bo(e,t,n,i=[]){switch(e._x_bindings||(e._x_bindings=Ot({})),e._x_bindings[t]=n,t=i.includes("camel")?du(t):t,t){case"value":su(e,n);break;case"style":au(e,n);break;case"class":ou(e,n);break;default:lu(e,t,n);break}}function su(e,t){if(e.type==="radio")e.attributes.value===void 0&&(e.value=t),window.fromModel&&(e.checked=cs(e.value,t));else if(e.type==="checkbox")Number.isInteger(t)?e.value=t:!Number.isInteger(t)&&!Array.isArray(t)&&typeof t!="boolean"&&![null,void 0].includes(t)?e.value=String(t):Array.isArray(t)?e.checked=t.some(n=>cs(n,e.value)):e.checked=!!t;else if(e.tagName==="SELECT")uu(e,t);else{if(e.value===t)return;e.value=t}}function ou(e,t){e._x_undoAddedClasses&&e._x_undoAddedClasses(),e._x_undoAddedClasses=_r(e,t)}function au(e,t){e._x_undoAddedStyles&&e._x_undoAddedStyles(),e._x_undoAddedStyles=Jn(e,t)}function lu(e,t,n){[null,void 0,!1].includes(n)&&hu(t)?e.removeAttribute(t):(yo(t)&&(n=t),cu(e,t,n))}function cu(e,t,n){e.getAttribute(t)!=n&&e.setAttribute(t,n)}function uu(e,t){const n=[].concat(t).map(i=>i+"");Array.from(e.options).forEach(i=>{i.selected=n.includes(i.value)})}function du(e){return e.toLowerCase().replace(/-(\w)/g,(t,n)=>n.toUpperCase())}function cs(e,t){return e==t}function yo(e){return["disabled","checked","required","readonly","hidden","open","selected","autofocus","itemscope","multiple","novalidate","allowfullscreen","allowpaymentrequest","formnovalidate","autoplay","controls","loop","muted","playsinline","default","ismap","reversed","async","defer","nomodule"].includes(e)}function hu(e){return!["aria-pressed","aria-checked","aria-expanded","aria-selected"].includes(e)}function fu(e,t,n){if(e._x_bindings&&e._x_bindings[t]!==void 0)return e._x_bindings[t];let i=e.getAttribute(t);return i===null?typeof n=="function"?n():n:i===""?!0:yo(t)?!![t,"true"].includes(i):i}function _o(e,t){var n;return function(){var i=this,r=arguments,s=function(){n=null,e.apply(i,r)};clearTimeout(n),n=setTimeout(s,t)}}function xo(e,t){let n;return function(){let i=this,r=arguments;n||(e.apply(i,r),n=!0,setTimeout(()=>n=!1,t))}}function pu(e){e(ln)}var nt={},us=!1;function mu(e,t){if(us||(nt=Ot(nt),us=!0),t===void 0)return nt[e];nt[e]=t,typeof t=="object"&&t!==null&&t.hasOwnProperty("init")&&typeof t.init=="function"&&nt[e].init(),Ks(nt[e])}function gu(){return nt}var Eo={};function wu(e,t){let n=typeof t!="function"?()=>t:t;e instanceof Element?Co(e,n()):Eo[e]=n}function vu(e){return Object.entries(Eo).forEach(([t,n])=>{Object.defineProperty(e,t,{get(){return(...i)=>n(...i)}})}),e}function Co(e,t,n){let i=[];for(;i.length;)i.pop()();let r=Object.entries(t).map(([o,l])=>({name:o,value:l})),s=eo(r);r=r.map(o=>s.find(l=>l.name===o.name)?{name:`x-bind:${o.name}`,value:`"${o.value}"`}:o),gr(e,r,n).map(o=>{i.push(o.runCleanups),o()})}var So={};function bu(e,t){So[e]=t}function yu(e,t){return Object.entries(So).forEach(([n,i])=>{Object.defineProperty(e,n,{get(){return(...r)=>i.bind(t)(...r)},enumerable:!1})}),e}var _u={get reactive(){return Ot},get release(){return rn},get effect(){return Tt},get raw(){return js},version:"3.12.0",flushAndStopDeferringMutations:Dc,dontAutoEvaluateFunctions:Rc,disableEffectScheduling:xc,startObservingMutations:hr,stopObservingMutations:qs,setReactivityEngine:Ec,closestDataStack:Ct,skipDuringClone:an,onlyDuringClone:tu,addRootSelector:fo,addInitSelector:po,addScopeToNode:sn,deferMutations:Nc,mapAttributes:wr,evaluateLater:le,interceptInit:Yc,setEvaluator:Ic,mergeProxies:on,findClosest:Kn,closestRoot:Xn,destroyTree:go,interceptor:Js,transition:Qi,setStyles:Jn,mutateDom:te,directive:J,throttle:xo,debounce:_o,evaluate:vt,initTree:qe,nextTick:yr,prefixed:Nt,prefix:zc,plugin:pu,magic:xe,store:mu,start:Wc,clone:nu,bound:fu,$data:Xs,walk:Ye,data:bu,bind:wu},ln=_u;function xu(e,t){const n=Object.create(null),i=e.split(",");for(let r=0;r<i.length;r++)n[i[r]]=!0;return t?r=>!!n[r.toLowerCase()]:r=>!!n[r]}var Eu=Object.freeze({}),Lo=Object.assign,Cu=Object.prototype.hasOwnProperty,Gn=(e,t)=>Cu.call(e,t),at=Array.isArray,Xt=e=>Ao(e)==="[object Map]",Su=e=>typeof e=="string",xr=e=>typeof e=="symbol",Zn=e=>e!==null&&typeof e=="object",Lu=Object.prototype.toString,Ao=e=>Lu.call(e),Oo=e=>Ao(e).slice(8,-1),Er=e=>Su(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Au=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Ou=Au(e=>e.charAt(0).toUpperCase()+e.slice(1)),To=(e,t)=>e!==t&&(e===e||t===t),er=new WeakMap,Vt=[],Se,lt=Symbol("iterate"),tr=Symbol("Map key iterate");function Tu(e){return e&&e._isEffect===!0}function Nu(e,t=Eu){Tu(e)&&(e=e.raw);const n=ku(e,t);return t.lazy||n(),n}function Du(e){e.active&&(No(e),e.options.onStop&&e.options.onStop(),e.active=!1)}var Mu=0;function ku(e,t){const n=function(){if(!n.active)return e();if(!Vt.includes(n)){No(n);try{return Iu(),Vt.push(n),Se=n,e()}finally{Vt.pop(),Do(),Se=Vt[Vt.length-1]}}};return n.id=Mu++,n.allowRecurse=!!t.allowRecurse,n._isEffect=!0,n.active=!0,n.raw=e,n.deps=[],n.options=t,n}function No(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}var Lt=!0,Cr=[];function Ru(){Cr.push(Lt),Lt=!1}function Iu(){Cr.push(Lt),Lt=!0}function Do(){const e=Cr.pop();Lt=e===void 0?!0:e}function _e(e,t,n){if(!Lt||Se===void 0)return;let i=er.get(e);i||er.set(e,i=new Map);let r=i.get(n);r||i.set(n,r=new Set),r.has(Se)||(r.add(Se),Se.deps.push(r),Se.options.onTrack&&Se.options.onTrack({effect:Se,target:e,type:t,key:n}))}function Xe(e,t,n,i,r,s){const o=er.get(e);if(!o)return;const l=new Set,d=m=>{m&&m.forEach(g=>{(g!==Se||g.allowRecurse)&&l.add(g)})};if(t==="clear")o.forEach(d);else if(n==="length"&&at(e))o.forEach((m,g)=>{(g==="length"||g>=i)&&d(m)});else switch(n!==void 0&&d(o.get(n)),t){case"add":at(e)?Er(n)&&d(o.get("length")):(d(o.get(lt)),Xt(e)&&d(o.get(tr)));break;case"delete":at(e)||(d(o.get(lt)),Xt(e)&&d(o.get(tr)));break;case"set":Xt(e)&&d(o.get(lt));break}const f=m=>{m.options.onTrigger&&m.options.onTrigger({effect:m,target:e,key:n,type:t,newValue:i,oldValue:r,oldTarget:s}),m.options.scheduler?m.options.scheduler(m):m()};l.forEach(f)}var Pu=xu("__proto__,__v_isRef,__isVue"),Mo=new Set(Object.getOwnPropertyNames(Symbol).map(e=>Symbol[e]).filter(xr)),Hu=Qn(),Bu=Qn(!1,!0),zu=Qn(!0),Fu=Qn(!0,!0),Bn={};["includes","indexOf","lastIndexOf"].forEach(e=>{const t=Array.prototype[e];Bn[e]=function(...n){const i=U(this);for(let s=0,o=this.length;s<o;s++)_e(i,"get",s+"");const r=t.apply(i,n);return r===-1||r===!1?t.apply(i,n.map(U)):r}});["push","pop","shift","unshift","splice"].forEach(e=>{const t=Array.prototype[e];Bn[e]=function(...n){Ru();const i=t.apply(this,n);return Do(),i}});function Qn(e=!1,t=!1){return function(i,r,s){if(r==="__v_isReactive")return!e;if(r==="__v_isReadonly")return e;if(r==="__v_raw"&&s===(e?t?Ju:qo:t?Ku:Yo).get(i))return i;const o=at(i);if(!e&&o&&Gn(Bn,r))return Reflect.get(Bn,r,s);const l=Reflect.get(i,r,s);return(xr(r)?Mo.has(r):Pu(r))||(e||_e(i,"get",r),t)?l:nr(l)?!o||!Er(r)?l.value:l:Zn(l)?e?Xo(l):Or(l):l}}var ju=ko(),$u=ko(!0);function ko(e=!1){return function(n,i,r,s){let o=n[i];if(!e&&(r=U(r),o=U(o),!at(n)&&nr(o)&&!nr(r)))return o.value=r,!0;const l=at(n)&&Er(i)?Number(i)<n.length:Gn(n,i),d=Reflect.set(n,i,r,s);return n===U(s)&&(l?To(r,o)&&Xe(n,"set",i,r,o):Xe(n,"add",i,r)),d}}function Vu(e,t){const n=Gn(e,t),i=e[t],r=Reflect.deleteProperty(e,t);return r&&n&&Xe(e,"delete",t,void 0,i),r}function Wu(e,t){const n=Reflect.has(e,t);return(!xr(t)||!Mo.has(t))&&_e(e,"has",t),n}function Uu(e){return _e(e,"iterate",at(e)?"length":lt),Reflect.ownKeys(e)}var Ro={get:Hu,set:ju,deleteProperty:Vu,has:Wu,ownKeys:Uu},Io={get:zu,set(e,t){return console.warn(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0},deleteProperty(e,t){return console.warn(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0}};Lo({},Ro,{get:Bu,set:$u});Lo({},Io,{get:Fu});var Sr=e=>Zn(e)?Or(e):e,Lr=e=>Zn(e)?Xo(e):e,Ar=e=>e,ei=e=>Reflect.getPrototypeOf(e);function ti(e,t,n=!1,i=!1){e=e.__v_raw;const r=U(e),s=U(t);t!==s&&!n&&_e(r,"get",t),!n&&_e(r,"get",s);const{has:o}=ei(r),l=i?Ar:n?Lr:Sr;if(o.call(r,t))return l(e.get(t));if(o.call(r,s))return l(e.get(s));e!==r&&e.get(t)}function ni(e,t=!1){const n=this.__v_raw,i=U(n),r=U(e);return e!==r&&!t&&_e(i,"has",e),!t&&_e(i,"has",r),e===r?n.has(e):n.has(e)||n.has(r)}function ii(e,t=!1){return e=e.__v_raw,!t&&_e(U(e),"iterate",lt),Reflect.get(e,"size",e)}function Po(e){e=U(e);const t=U(this);return ei(t).has.call(t,e)||(t.add(e),Xe(t,"add",e,e)),this}function Ho(e,t){t=U(t);const n=U(this),{has:i,get:r}=ei(n);let s=i.call(n,e);s?Uo(n,i,e):(e=U(e),s=i.call(n,e));const o=r.call(n,e);return n.set(e,t),s?To(t,o)&&Xe(n,"set",e,t,o):Xe(n,"add",e,t),this}function Bo(e){const t=U(this),{has:n,get:i}=ei(t);let r=n.call(t,e);r?Uo(t,n,e):(e=U(e),r=n.call(t,e));const s=i?i.call(t,e):void 0,o=t.delete(e);return r&&Xe(t,"delete",e,void 0,s),o}function zo(){const e=U(this),t=e.size!==0,n=Xt(e)?new Map(e):new Set(e),i=e.clear();return t&&Xe(e,"clear",void 0,void 0,n),i}function ri(e,t){return function(i,r){const s=this,o=s.__v_raw,l=U(o),d=t?Ar:e?Lr:Sr;return!e&&_e(l,"iterate",lt),o.forEach((f,m)=>i.call(r,d(f),d(m),s))}}function Ln(e,t,n){return function(...i){const r=this.__v_raw,s=U(r),o=Xt(s),l=e==="entries"||e===Symbol.iterator&&o,d=e==="keys"&&o,f=r[e](...i),m=n?Ar:t?Lr:Sr;return!t&&_e(s,"iterate",d?tr:lt),{next(){const{value:g,done:y}=f.next();return y?{value:g,done:y}:{value:l?[m(g[0]),m(g[1])]:m(g),done:y}},[Symbol.iterator](){return this}}}}function Ue(e){return function(...t){{const n=t[0]?`on key "${t[0]}" `:"";console.warn(`${Ou(e)} operation ${n}failed: target is readonly.`,U(this))}return e==="delete"?!1:this}}var Fo={get(e){return ti(this,e)},get size(){return ii(this)},has:ni,add:Po,set:Ho,delete:Bo,clear:zo,forEach:ri(!1,!1)},jo={get(e){return ti(this,e,!1,!0)},get size(){return ii(this)},has:ni,add:Po,set:Ho,delete:Bo,clear:zo,forEach:ri(!1,!0)},$o={get(e){return ti(this,e,!0)},get size(){return ii(this,!0)},has(e){return ni.call(this,e,!0)},add:Ue("add"),set:Ue("set"),delete:Ue("delete"),clear:Ue("clear"),forEach:ri(!0,!1)},Vo={get(e){return ti(this,e,!0,!0)},get size(){return ii(this,!0)},has(e){return ni.call(this,e,!0)},add:Ue("add"),set:Ue("set"),delete:Ue("delete"),clear:Ue("clear"),forEach:ri(!0,!0)},Yu=["keys","values","entries",Symbol.iterator];Yu.forEach(e=>{Fo[e]=Ln(e,!1,!1),$o[e]=Ln(e,!0,!1),jo[e]=Ln(e,!1,!0),Vo[e]=Ln(e,!0,!0)});function Wo(e,t){const n=t?e?Vo:jo:e?$o:Fo;return(i,r,s)=>r==="__v_isReactive"?!e:r==="__v_isReadonly"?e:r==="__v_raw"?i:Reflect.get(Gn(n,r)&&r in i?n:i,r,s)}var qu={get:Wo(!1,!1)},Xu={get:Wo(!0,!1)};function Uo(e,t,n){const i=U(n);if(i!==n&&t.call(e,i)){const r=Oo(e);console.warn(`Reactive ${r} contains both the raw and reactive versions of the same object${r==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}var Yo=new WeakMap,Ku=new WeakMap,qo=new WeakMap,Ju=new WeakMap;function Gu(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Zu(e){return e.__v_skip||!Object.isExtensible(e)?0:Gu(Oo(e))}function Or(e){return e&&e.__v_isReadonly?e:Ko(e,!1,Ro,qu,Yo)}function Xo(e){return Ko(e,!0,Io,Xu,qo)}function Ko(e,t,n,i,r){if(!Zn(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&!(t&&e.__v_isReactive))return e;const s=r.get(e);if(s)return s;const o=Zu(e);if(o===0)return e;const l=new Proxy(e,o===2?i:n);return r.set(e,l),l}function U(e){return e&&U(e.__v_raw)||e}function nr(e){return!!(e&&e.__v_isRef===!0)}xe("nextTick",()=>yr);xe("dispatch",e=>qt.bind(qt,e));xe("watch",(e,{evaluateLater:t,effect:n})=>(i,r)=>{let s=t(i),o=!0,l,d=n(()=>s(f=>{JSON.stringify(f),o?l=f:queueMicrotask(()=>{r(f,l),l=f}),o=!1}));e._x_effects.delete(d)});xe("store",gu);xe("data",e=>Xs(e));xe("root",e=>Xn(e));xe("refs",e=>(e._x_refs_proxy||(e._x_refs_proxy=on(Qu(e))),e._x_refs_proxy));function Qu(e){let t=[],n=e;for(;n;)n._x_refs&&t.push(n._x_refs),n=n.parentNode;return t}var Ti={};function Jo(e){return Ti[e]||(Ti[e]=0),++Ti[e]}function ed(e,t){return Kn(e,n=>{if(n._x_ids&&n._x_ids[t])return!0})}function td(e,t){e._x_ids||(e._x_ids={}),e._x_ids[t]||(e._x_ids[t]=Jo(t))}xe("id",e=>(t,n=null)=>{let i=ed(e,t),r=i?i._x_ids[t]:Jo(t);return n?`${t}-${r}-${n}`:`${t}-${r}`});xe("el",e=>e);Go("Focus","focus","focus");Go("Persist","persist","persist");function Go(e,t,n){xe(t,i=>St(`You can't use [$${directiveName}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${n}`,i))}function nd({get:e,set:t},{get:n,set:i}){let r=!0,s,o,l=Tt(()=>{let d,f;r?(d=e(),i(d),f=n(),r=!1):(d=e(),f=n(),o=JSON.stringify(d),JSON.stringify(f),o!==s?(f=n(),i(d),f=d):(t(f),d=f)),s=JSON.stringify(d),JSON.stringify(f)});return()=>{rn(l)}}J("modelable",(e,{expression:t},{effect:n,evaluateLater:i,cleanup:r})=>{let s=i(t),o=()=>{let m;return s(g=>m=g),m},l=i(`${t} = __placeholder`),d=m=>l(()=>{},{scope:{__placeholder:m}}),f=o();d(f),queueMicrotask(()=>{if(!e._x_model)return;e._x_removeModelListeners.default();let m=e._x_model.get,g=e._x_model.set,y=nd({get(){return m()},set(_){g(_)}},{get(){return o()},set(_){d(_)}});r(y)})});var id=document.createElement("div");J("teleport",(e,{modifiers:t,expression:n},{cleanup:i})=>{e.tagName.toLowerCase()!=="template"&&St("x-teleport can only be used on a <template> tag",e);let r=an(()=>document.querySelector(n),()=>id)();r||St(`Cannot find x-teleport element for selector: "${n}"`);let s=e.content.cloneNode(!0).firstElementChild;e._x_teleport=s,s._x_teleportBack=e,e._x_forwardEvents&&e._x_forwardEvents.forEach(o=>{s.addEventListener(o,l=>{l.stopPropagation(),e.dispatchEvent(new l.constructor(l.type,l))})}),sn(s,{},e),te(()=>{t.includes("prepend")?r.parentNode.insertBefore(s,r):t.includes("append")?r.parentNode.insertBefore(s,r.nextSibling):r.appendChild(s),qe(s),s._x_ignore=!0}),i(()=>s.remove())});var Zo=()=>{};Zo.inline=(e,{modifiers:t},{cleanup:n})=>{t.includes("self")?e._x_ignoreSelf=!0:e._x_ignore=!0,n(()=>{t.includes("self")?delete e._x_ignoreSelf:delete e._x_ignore})};J("ignore",Zo);J("effect",(e,{expression:t},{effect:n})=>n(le(e,t)));function ir(e,t,n,i){let r=e,s=d=>i(d),o={},l=(d,f)=>m=>f(d,m);if(n.includes("dot")&&(t=rd(t)),n.includes("camel")&&(t=sd(t)),n.includes("passive")&&(o.passive=!0),n.includes("capture")&&(o.capture=!0),n.includes("window")&&(r=window),n.includes("document")&&(r=document),n.includes("prevent")&&(s=l(s,(d,f)=>{f.preventDefault(),d(f)})),n.includes("stop")&&(s=l(s,(d,f)=>{f.stopPropagation(),d(f)})),n.includes("self")&&(s=l(s,(d,f)=>{f.target===e&&d(f)})),(n.includes("away")||n.includes("outside"))&&(r=document,s=l(s,(d,f)=>{e.contains(f.target)||f.target.isConnected!==!1&&(e.offsetWidth<1&&e.offsetHeight<1||e._x_isShown!==!1&&d(f))})),n.includes("once")&&(s=l(s,(d,f)=>{d(f),r.removeEventListener(t,s,o)})),s=l(s,(d,f)=>{ad(t)&&ld(f,n)||d(f)}),n.includes("debounce")){let d=n[n.indexOf("debounce")+1]||"invalid-wait",f=zn(d.split("ms")[0])?Number(d.split("ms")[0]):250;s=_o(s,f)}if(n.includes("throttle")){let d=n[n.indexOf("throttle")+1]||"invalid-wait",f=zn(d.split("ms")[0])?Number(d.split("ms")[0]):250;s=xo(s,f)}return r.addEventListener(t,s,o),()=>{r.removeEventListener(t,s,o)}}function rd(e){return e.replace(/-/g,".")}function sd(e){return e.toLowerCase().replace(/-(\w)/g,(t,n)=>n.toUpperCase())}function zn(e){return!Array.isArray(e)&&!isNaN(e)}function od(e){return[" ","_"].includes(e)?e:e.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[_\s]/,"-").toLowerCase()}function ad(e){return["keydown","keyup"].includes(e)}function ld(e,t){let n=t.filter(s=>!["window","document","prevent","stop","once","capture"].includes(s));if(n.includes("debounce")){let s=n.indexOf("debounce");n.splice(s,zn((n[s+1]||"invalid-wait").split("ms")[0])?2:1)}if(n.includes("throttle")){let s=n.indexOf("throttle");n.splice(s,zn((n[s+1]||"invalid-wait").split("ms")[0])?2:1)}if(n.length===0||n.length===1&&ds(e.key).includes(n[0]))return!1;const r=["ctrl","shift","alt","meta","cmd","super"].filter(s=>n.includes(s));return n=n.filter(s=>!r.includes(s)),!(r.length>0&&r.filter(o=>((o==="cmd"||o==="super")&&(o="meta"),e[`${o}Key`])).length===r.length&&ds(e.key).includes(n[0]))}function ds(e){if(!e)return[];e=od(e);let t={ctrl:"control",slash:"/",space:" ",spacebar:" ",cmd:"meta",esc:"escape",up:"arrow-up",down:"arrow-down",left:"arrow-left",right:"arrow-right",period:".",equal:"=",minus:"-",underscore:"_"};return t[e]=e,Object.keys(t).map(n=>{if(t[n]===e)return n}).filter(n=>n)}J("model",(e,{modifiers:t,expression:n},{effect:i,cleanup:r})=>{let s=e;t.includes("parent")&&(s=e.parentNode);let o=le(s,n),l;typeof n=="string"?l=le(s,`${n} = __placeholder`):typeof n=="function"&&typeof n()=="string"?l=le(s,`${n()} = __placeholder`):l=()=>{};let d=()=>{let y;return o(_=>y=_),hs(y)?y.get():y},f=y=>{let _;o(E=>_=E),hs(_)?_.set(y):l(()=>{},{scope:{__placeholder:y}})};t.includes("fill")&&e.hasAttribute("value")&&(d()===null||d()==="")&&f(e.value),typeof n=="string"&&e.type==="radio"&&te(()=>{e.hasAttribute("name")||e.setAttribute("name",n)});var m=e.tagName.toLowerCase()==="select"||["checkbox","radio"].includes(e.type)||t.includes("lazy")?"change":"input";let g=Gt?()=>{}:ir(e,m,t,y=>{f(cd(e,t,y,d()))});if(e._x_removeModelListeners||(e._x_removeModelListeners={}),e._x_removeModelListeners.default=g,r(()=>e._x_removeModelListeners.default()),e.form){let y=ir(e.form,"reset",[],_=>{yr(()=>e._x_model&&e._x_model.set(e.value))});r(()=>y())}e._x_model={get(){return d()},set(y){f(y)}},e._x_forceModelUpdate=y=>{y=y===void 0?d():y,y===void 0&&typeof n=="string"&&n.match(/\./)&&(y=""),window.fromModel=!0,te(()=>bo(e,"value",y)),delete window.fromModel},i(()=>{let y=d();t.includes("unintrusive")&&document.activeElement.isSameNode(e)||e._x_forceModelUpdate(y)})});function cd(e,t,n,i){return te(()=>{if(n instanceof CustomEvent&&n.detail!==void 0)return typeof n.detail<"u"?n.detail:n.target.value;if(e.type==="checkbox")if(Array.isArray(i)){let r=t.includes("number")?Ni(n.target.value):n.target.value;return n.target.checked?i.concat([r]):i.filter(s=>!ud(s,r))}else return n.target.checked;else{if(e.tagName.toLowerCase()==="select"&&e.multiple)return t.includes("number")?Array.from(n.target.selectedOptions).map(r=>{let s=r.value||r.text;return Ni(s)}):Array.from(n.target.selectedOptions).map(r=>r.value||r.text);{let r=n.target.value;return t.includes("number")?Ni(r):t.includes("trim")?r.trim():r}}})}function Ni(e){let t=e?parseFloat(e):null;return dd(t)?t:e}function ud(e,t){return e==t}function dd(e){return!Array.isArray(e)&&!isNaN(e)}function hs(e){return e!==null&&typeof e=="object"&&typeof e.get=="function"&&typeof e.set=="function"}J("cloak",e=>queueMicrotask(()=>te(()=>e.removeAttribute(Nt("cloak")))));po(()=>`[${Nt("init")}]`);J("init",an((e,{expression:t},{evaluate:n})=>typeof t=="string"?!!t.trim()&&n(t,{},!1):n(t,{},!1)));J("text",(e,{expression:t},{effect:n,evaluateLater:i})=>{let r=i(t);n(()=>{r(s=>{te(()=>{e.textContent=s})})})});J("html",(e,{expression:t},{effect:n,evaluateLater:i})=>{let r=i(t);n(()=>{r(s=>{te(()=>{e.innerHTML=s,e._x_ignoreSelf=!0,qe(e),delete e._x_ignoreSelf})})})});wr(io(":",ro(Nt("bind:"))));J("bind",(e,{value:t,modifiers:n,expression:i,original:r},{effect:s})=>{if(!t){let l={};vu(l),le(e,i)(f=>{Co(e,f,r)},{scope:l});return}if(t==="key")return hd(e,i);let o=le(e,i);s(()=>o(l=>{l===void 0&&typeof i=="string"&&i.match(/\./)&&(l=""),te(()=>bo(e,t,l,n))}))});function hd(e,t){e._x_keyExpression=t}fo(()=>`[${Nt("data")}]`);J("data",an((e,{expression:t},{cleanup:n})=>{t=t===""?"{}":t;let i={};Yi(i,e);let r={};yu(r,i);let s=vt(e,t,{scope:r});(s===void 0||s===!0)&&(s={}),Yi(s,e);let o=Ot(s);Ks(o);let l=sn(e,o);o.init&&vt(e,o.init),n(()=>{o.destroy&&vt(e,o.destroy),l()})}));J("show",(e,{modifiers:t,expression:n},{effect:i})=>{let r=le(e,n);e._x_doHide||(e._x_doHide=()=>{te(()=>{e.style.setProperty("display","none",t.includes("important")?"important":void 0)})}),e._x_doShow||(e._x_doShow=()=>{te(()=>{e.style.length===1&&e.style.display==="none"?e.removeAttribute("style"):e.style.removeProperty("display")})});let s=()=>{e._x_doHide(),e._x_isShown=!1},o=()=>{e._x_doShow(),e._x_isShown=!0},l=()=>setTimeout(o),d=Zi(g=>g?o():s(),g=>{typeof e._x_toggleAndCascadeWithTransitions=="function"?e._x_toggleAndCascadeWithTransitions(e,g,o,s):g?l():s()}),f,m=!0;i(()=>r(g=>{!m&&g===f||(t.includes("immediate")&&(g?l():s()),d(g),f=g,m=!1)}))});J("for",(e,{expression:t},{effect:n,cleanup:i})=>{let r=pd(t),s=le(e,r.items),o=le(e,e._x_keyExpression||"index");e._x_prevKeys=[],e._x_lookup={},n(()=>fd(e,r,s,o)),i(()=>{Object.values(e._x_lookup).forEach(l=>l.remove()),delete e._x_prevKeys,delete e._x_lookup})});function fd(e,t,n,i){let r=o=>typeof o=="object"&&!Array.isArray(o),s=e;n(o=>{md(o)&&o>=0&&(o=Array.from(Array(o).keys(),C=>C+1)),o===void 0&&(o=[]);let l=e._x_lookup,d=e._x_prevKeys,f=[],m=[];if(r(o))o=Object.entries(o).map(([C,A])=>{let z=fs(t,A,C,o);i(q=>m.push(q),{scope:{index:C,...z}}),f.push(z)});else for(let C=0;C<o.length;C++){let A=fs(t,o[C],C,o);i(z=>m.push(z),{scope:{index:C,...A}}),f.push(A)}let g=[],y=[],_=[],E=[];for(let C=0;C<d.length;C++){let A=d[C];m.indexOf(A)===-1&&_.push(A)}d=d.filter(C=>!_.includes(C));let O="template";for(let C=0;C<m.length;C++){let A=m[C],z=d.indexOf(A);if(z===-1)d.splice(C,0,A),g.push([O,C]);else if(z!==C){let q=d.splice(C,1)[0],j=d.splice(z-1,1)[0];d.splice(C,0,j),d.splice(z,0,q),y.push([q,j])}else E.push(A);O=A}for(let C=0;C<_.length;C++){let A=_[C];l[A]._x_effects&&l[A]._x_effects.forEach(Fs),l[A].remove(),l[A]=null,delete l[A]}for(let C=0;C<y.length;C++){let[A,z]=y[C],q=l[A],j=l[z],Ne=document.createElement("div");te(()=>{j.after(Ne),q.after(j),j._x_currentIfEl&&j.after(j._x_currentIfEl),Ne.before(q),q._x_currentIfEl&&q.after(q._x_currentIfEl),Ne.remove()}),as(j,f[m.indexOf(z)])}for(let C=0;C<g.length;C++){let[A,z]=g[C],q=A==="template"?s:l[A];q._x_currentIfEl&&(q=q._x_currentIfEl);let j=f[z],Ne=m[z],ee=document.importNode(s.content,!0).firstElementChild;sn(ee,Ot(j),s),te(()=>{q.after(ee),qe(ee)}),typeof Ne=="object"&&St("x-for key cannot be an object, it must be a string or an integer",s),l[Ne]=ee}for(let C=0;C<E.length;C++)as(l[E[C]],f[m.indexOf(E[C])]);s._x_prevKeys=m})}function pd(e){let t=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,n=/^\s*\(|\)\s*$/g,i=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,r=e.match(i);if(!r)return;let s={};s.items=r[2].trim();let o=r[1].replace(n,"").trim(),l=o.match(t);return l?(s.item=o.replace(t,"").trim(),s.index=l[1].trim(),l[2]&&(s.collection=l[2].trim())):s.item=o,s}function fs(e,t,n,i){let r={};return/^\[.*\]$/.test(e.item)&&Array.isArray(t)?e.item.replace("[","").replace("]","").split(",").map(o=>o.trim()).forEach((o,l)=>{r[o]=t[l]}):/^\{.*\}$/.test(e.item)&&!Array.isArray(t)&&typeof t=="object"?e.item.replace("{","").replace("}","").split(",").map(o=>o.trim()).forEach(o=>{r[o]=t[o]}):r[e.item]=t,e.index&&(r[e.index]=n),e.collection&&(r[e.collection]=i),r}function md(e){return!Array.isArray(e)&&!isNaN(e)}function Qo(){}Qo.inline=(e,{expression:t},{cleanup:n})=>{let i=Xn(e);i._x_refs||(i._x_refs={}),i._x_refs[t]=e,n(()=>delete i._x_refs[t])};J("ref",Qo);J("if",(e,{expression:t},{effect:n,cleanup:i})=>{let r=le(e,t),s=()=>{if(e._x_currentIfEl)return e._x_currentIfEl;let l=e.content.cloneNode(!0).firstElementChild;return sn(l,{},e),te(()=>{e.after(l),qe(l)}),e._x_currentIfEl=l,e._x_undoIf=()=>{Ye(l,d=>{d._x_effects&&d._x_effects.forEach(Fs)}),l.remove(),delete e._x_currentIfEl},l},o=()=>{e._x_undoIf&&(e._x_undoIf(),delete e._x_undoIf)};n(()=>r(l=>{l?s():o()})),i(()=>e._x_undoIf&&e._x_undoIf())});J("id",(e,{expression:t},{evaluate:n})=>{n(t).forEach(r=>td(e,r))});wr(io("@",ro(Nt("on:"))));J("on",an((e,{value:t,modifiers:n,expression:i},{cleanup:r})=>{let s=i?le(e,i):()=>{};e.tagName.toLowerCase()==="template"&&(e._x_forwardEvents||(e._x_forwardEvents=[]),e._x_forwardEvents.includes(t)||e._x_forwardEvents.push(t));let o=ir(e,t,n,l=>{s(()=>{},{scope:{$event:l},params:[l]})});r(()=>o())}));si("Collapse","collapse","collapse");si("Intersect","intersect","intersect");si("Focus","trap","focus");si("Mask","mask","mask");function si(e,t,n){J(t,i=>St(`You can't use [x-${t}] without first installing the "${e}" plugin here: https://alpinejs.dev/plugins/${n}`,i))}ln.setEvaluator(Qs);ln.setReactivityEngine({reactive:Or,effect:Nu,release:Du,raw:U});var gd=ln,ea=gd;mw.app=new Aa;mw.app.register("commands",hc);mw.app.register("modules",fc);mw.app.register("layouts",pc);mw.app.register("keyboard",mc);mw.app.register("iconPicker",gc);mw.app.register("linkPicker",wc);window.Alpine=ea;ea.start();export{vd as E,cc as L,jn as M,In as a,bd as l};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
